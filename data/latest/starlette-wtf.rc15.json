{
  "info": {
    "author": "Andres Morey",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# Starlette-WTF\n\nStarlette-WTF is a simple tool for integrating [Starlette](https://www.starlette.io/) and [WTForms](https://wtforms.readthedocs.io/en/stable/). It is modeled on the excellent [Flask-WTF](https://flask-wtf.readthedocs.io) library.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Quickstart](#quickstart)\n- [Creating Forms](#creating-forms)\n  * [The StarletteForm Class](#the-starletteform-class)\n  * [Validation](#validation)\n  * [Async Custom Validators](#async-custom-validators)\n- [CSRF Protection](#csrf-protection)\n  * [Setup](#setup)\n  * [Protect Views](#protect-views)\n  * [HTML Forms](#html-forms)\n  * [JavaScript Requests](#javascript-requests)\n  * [Disable in Unit Tests](#disable-in-unit-tests)\n  * [Configuration](#configuration)\n- [Development](#development)\n  * [Get the code](#get-the-code)\n  * [Run unit tests](#run-unit-tests)\n\n## Installation\n\nInstalling Starlette-WTF is simple with [pip](https://pip.pypa.io/en/stable/):\n\n```bash\n$ pip install starlette-wtf\n```\n\n## Quickstart\n\nThe following code implements a simple form handler with CSRF protection. The form has a required string field and validation errors are handled by the html template. Note that CSRF protection requires `SessionMiddleware`, `CSRFProtectMiddleware`, `@csrf_protect` and the `csrf_token` field to be added to the HTML form.\n\nFirst, install the dependencies for this quickstart:\n\n```bash\n$ pip install starlette starlette-wtf jinja2 uvicorn \n```\n\nNext, create a Python file (app.py) with the following code:\n\n```python\nfrom jinja2 import Template\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.responses import PlainTextResponse, HTMLResponse\nfrom starlette_wtf import StarletteForm, CSRFProtectMiddleware, csrf_protect\nfrom wtforms import StringField\nfrom wtforms.validators\timport DataRequired\n\n\nclass MyForm(StarletteForm):\n    name = StringField('name', validators=[DataRequired()])\n\n\ntemplate = Template('''\n<html>\n  <body>\n    <form method=\"post\" novalidate>\n      {{ form.csrf_token }}\n      <div>\n        {{ form.name(placeholder='Name') }}\n        {% if form.name.errors -%}\n        <span>{{ form.name.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </body>\n</html>\n''')\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware, csrf_secret='***REPLACEME2***')\n])\n\n\n@app.route('/', methods=['GET', 'POST'])\n@csrf_protect\nasync def index(request):\n    \"\"\"GET|POST /: form handler\n    \"\"\"\n    form = await MyForm.from_formdata(request)\n    \n    if await form.validate_on_submit():\n        return PlainTextResponse('SUCCESS')\n\n    html = template.render(form=form)\n    return HTMLResponse(html)\n```\n    \nFinally, run the app using the following command:\n    \n```bash\n$ uvicorn app:app\n```\n\n## Creating Forms\n\n### The StarletteForm Class\n\nStarlette-WTF provides a form class that makes it easy to add form validation and CSRF protection to Starlette apps. To make a form, subclass the `StarletteForm` class and use [WTForms](https://wtforms.readthedocs.io/) fields, validators and widgets to define the inputs. The `StarletteForm` class inherits from the WTForms `Form` class so you can use WTForms features and methods to add more advanced functionality to your app:\n\n```python\nfrom starlette_wtf import StarletteForm\nfrom wtforms import TextField, PasswordField\nfrom wtforms.validators import DataRequired, Email, EqualTo\nfrom wtforms.widgets import PasswordInput\n\n\nclass CreateAccountForm(StarletteForm):\n    email = TextField(\n        'Email address',\n        validators=[\n            DataRequired('Please enter your email address'),\n            Email()\n        ]\n    )\n\n    password = PasswordField(\n        'Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please enter your password'),\n            EqualTo('password_confirm', message='Passwords must match')\n        ]\n    )\n\n    password_confirm = PasswordField(\n        'Confirm Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please confirm your password')\n        ]\n    )\n```\n\nOften you will want to initialize form objects using default values on GET requests and from submitted formdata on POST requests. To make this easier you can use the `.from_formdata()` async class method which does this for you automatically:\n\n```python\n@app.route('/create-account', methods=['GET', 'POST'])\nasync def create_account(request):\n    \"\"\"GET|POST /create-account: Create account form handler\n    \"\"\"\n    form = await CreateAccountForm.from_formdata(request)\n    return PlainTextResponse()\n```\n\n### Validation\n\nThe `StarletteForm` class has a useful `.validate_on_submit()` method that performs input validation for POST, PUT, PATCH and DELETE requests and returns a boolean indicating whether or not there were any errors. After validation, errors are available via the `.errors` attribute attached to each input field instance. Note that validation is asynchronous to handle async field validators (see below):\n\n```python\nfrom jinja2 import Template\nfrom starlette.applications import Starlette\nfrom starlette.responses import (PlainTextResponse, RedirectResponse,\n                                 HTMLResponse)\n\n\ntemplate = Template('''\n<html>\n  <body>\n    <h1>Create Account</h1>\n    <form method=\"post\" novalidate>\n      <div>\n        {{ form.email(placeholder='Email address',\n                      autofocus='true',\n                      type='email',\n                      spellcheck='false') }}\n        {% if form.email.errors -%}\n        <span>{{ form.email.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <div>\n        {{ form.password(placeholder=\"Password\") }}\n        {% if form.password.errors -%}\n        <span>{{ form.password.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <div>\n        {{ form.password_confirm(placeholder=\"Confirm password\") }}\n        {% if form.password_confirm.errors -%}\n        <span>{{ form.password_confirm.errors[0] }}</span>\n        {%- endif %}\n      </div>\n      <button type=\"submit\">Create account</button>\n    </form>\n  </body>\n</html>\n''')\n\n\napp = Starlette()\n\n\n@app.route('/', methods=['GET'])\nasync def index(request):\n    \"\"\"GET /: Return home page\n    \"\"\"\n    return PlainTextResponse()\n\n\n@app.route('/create-account', methods=['GET', 'POST'])\nasync def create_account(request):\n    \"\"\"GET|POST /create-account: Create account form handler\n    \"\"\"\n    # initialize form\n    form = await CreateAccountForm.from_formdata(request)\n\n    # validate form\n    if await form.validate_on_submit():\n        # TODO: Save account credentials before returning redirect response\n        return RedirectResponse(url='/', status_code=303)\n\n    # generate html\n    html = template.render(form=form)\n\n    # return response\n    status_code = 422 if form.errors else 200\n    return HTMLResponse(html, status_code=status_code)\n```\n\n### Async Custom Validators\n\nThe `StarletteForm` class allows you to implement asynchronous [WTForms-like custom validators](https://wtforms.readthedocs.io/en/stable/validators/#custom-validators) by adding `async_validate_{fieldname}` methods to your form classes:\n\n```python\nfrom starlette_wtf import StarletteForm\nfrom wtforms import TextField, PasswordField, ValidationError\nfrom wtforms.validators import DataRequired, Email, EqualTo\n\n\nclass CreateAccountForm(StarletteForm):\n    email = TextField(\n        'Email address',\n        validators=[\n            DataRequired('Please enter your email address'),\n            Email()\n        ]\n    )\n\n    password = PasswordField(\n        'Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please enter your password'),\n            EqualTo('password_confirm', message='Passwords must match')\n        ]\n    )\n\n    password_confirm = PasswordField(\n        'Confirm Password',\n        widget=PasswordInput(hide_value=False),\n        validators=[\n            DataRequired('Please confirm your password')\n        ]\n    )\n\n    async def async_validate_email(self, field):\n        \"\"\"Asynchronous validator to check if email is already in-use\n        \"\"\"\n        # replace this with your own code\n        if await make_database_request_here():\n            raise ValidationError('Email is already in use')\n```\n\n## CSRF Protection\n\nIn order to add CSRF protection to your app, first you must ensure that Starlette's `SessionMiddleware` is enabled, second you must configure Starlette-WTF using `CSRFProtectMiddleware`, third you must use the `@csrf_protect` decorator to protect individual endpoints, and fourth you must add the CSRF token to your HTML forms or JavaScript requests.\n\n### Setup\n\nTo enable CSRF protection for your app, first you must ensure that Starlette's `SessionMiddleware` is enabled, and second you must configure Starlette-WTF using `CSRFProtectMiddleware`.\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette_wtf import CSRFProtectMiddleware\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware, csrf_secret='***REPLACEME2***')\n])\n```\n\n### Protect Views\n\nOnce Starlette-WTF has been configured using `CSRFProtectMiddleware` you can enable CSRF protection for individual endpoints using the `@csrf_protect` decorator. The `@csrf_protect` decorator will automatically look for `csrf_token` in the form data or in the request headers (`X-CSRFToken`) and it will raise an `HTTPException` if the token is missing or invalid. CSRF token validation will only be performed on submission requests (POST, PUT, PATCH, DELETE). Note that the `@csrf_protect` must run after `@app.route()`:\n\n```python\nfrom starlette.responses import PlainTextResponse\nfrom starlette_wtf import csrf_protect\n\n\n@app.route('/form-handler', methods=['GET', 'POST'])\n@csrf_protect\nasync def form_handler(request):\n    \"\"\"GET|POST /form-handler: Form handler\n    \"\"\"\n    # this code won't run unless the CSRF token has been validated\n    return PlainTextResponse()\n```\n\nThe `@csrf_protect` decorator can also be used with class-based views (e.g. [HTTPEndpoint](https://www.starlette.io/endpoints/)):\n```python\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.responses import PlainTextResponse\nfrom starlette_wtf import csrf_protect\n\n\n@csrf_protect\nclass Endpoint(HTTPEndpoint):\n    async def get(self, request):\n        # this code will run without a CSRF check\n        return PlainTextResponse()\n\n    async def post(self, request):\n        # this code won't run unless the CSRF token has been validated\n        return PlainTextResponse()\n```\n\nThe `@csrf_protect` decorator can also be used with bound methods attached to class-based views:\n```python\nfrom starlette.endpoints import HTTPEndpoint\nfrom starlette.responses import PlainTextResponse\nfrom starlette_wtf import csrf_protect\n\n\nclass Endpoint(HTTPEndpoint):\n    async def get(self, request):\n        # this code will run without a CSRF check\n        return PlainTextResponse()\n\n    @csrf_protect\n    async def post(self, request):\n        # this code won't run unless the CSRF token has been validated\n        return PlainTextResponse()\n```\n\n### HTML Forms\n\nWhen using `StarletteForm` you can render the form's CSRF token field like this:\n\n```html\n<form method=\"post\">\n  {{ form.csrf_token }}\n</form>\n```\n\n### JavaScript Requests\n\nWhen sending an AJAX request, add the `X-CSRFToken` header to allow Starlette-WTF to perform CSRF validation. For example, in jQuery you can configure all requests to send the token:\n\n```html\n<script type=\"text/javascript\">\n  var csrf_token = \"{{ csrf_token(request) }}\";\n\n  $.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n      if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", csrf_token);\n      }\n    }\n  });\n</script>\n```\n\n### Disable in Unit Tests\n\nTo disable CSRF protection in unit tests you can toggle the `enabled` attribute in `CSRFProtectionMiddleware`:\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.config import environ\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette_wtf import CSRFProtectMiddleware\n\n\napp = Starlette(middleware=[\n    Middleware(SessionMiddleware, secret_key='***REPLACEME1***'),\n    Middleware(CSRFProtectMiddleware,\n               enable=!environ.get('TESTING', False),\n               csrf_secret='***REPLACEME2***')\n])\n```\n\n### Configuration\n\n`CSRFProtectMiddleware` accepts the following options:\n\n| Argument          | Description\n| ----------------- | -----------\n| enabled         | If true, enables CSRF protection. Default to True.\n| csrf_secret     | The CSRF token signing key.\n| csrf_field_name | The CSRF token's field name in the session. Defaults to \"csrf_token\"\n| csrf_time_limit | The time limit for each signed token in seconds. Defaults to 3600.\n| csrf_headers    | List of CSRF HTTP header field names. Defaults to [\"X-CSRFToken\", \"X-CSRF-Token\"]\n| csrf_ssl_strict | If enabled, ensures same origin policy on https requests. Defaults to True.\n\n## Development\n\n### Get the code\n\nStarlette-WTF is actively developed on GitHub. You can clone the repository using git:\n\n```bash\n$ git clone git@github.com:muicss/starlette-wtf.git\n```\n\nOnce you have a copy of the source, you can install it into your site-packages in development mode so you can modify and execute the code:\n\n```bash\n$ python setup.py develop\n```\n\n### Run unit tests\n\nTo install unit test dependencies:\n\n```bash\n$ pip install -e .[test]\n```\n\nTo run unit tests:\n\n```bash\n$ pytest\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/muicss/starlette-wtf",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Starlette-WTF",
    "package_url": "https://pypi.org/project/Starlette-WTF/",
    "platform": "any",
    "project_url": "https://pypi.org/project/Starlette-WTF/",
    "project_urls": {
      "Homepage": "https://github.com/muicss/starlette-wtf"
    },
    "release_url": "https://pypi.org/project/Starlette-WTF/0.4.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple integration of Starlette and WTForms.",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10676605,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7079b8565df6d2910c8be70a01fe5b2a7bf5cd63e63f113e2c755abb4169acf",
          "md5": "ca3fb514be92522811ec41f0e6860c24",
          "sha256": "b3498d9986302c3b1f598345a672f81badde32388685950cfdd6d000f1e6ed49"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca3fb514be92522811ec41f0e6860c24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10143,
        "upload_time": "2020-02-03T09:44:33",
        "upload_time_iso_8601": "2020-02-03T09:44:33.022017Z",
        "url": "https://files.pythonhosted.org/packages/d7/07/9b8565df6d2910c8be70a01fe5b2a7bf5cd63e63f113e2c755abb4169acf/Starlette-WTF-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d71b3c0b94dd77274421b90825de1716b956963d6cff938c246c545723849e4",
          "md5": "b031f5d9eb2b1b7167de6d23286ec29b",
          "sha256": "4ea290da27f5f64941ff9e3ca9a9eeb3e26059276c74595c39e551a3f5db1094"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b031f5d9eb2b1b7167de6d23286ec29b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10135,
        "upload_time": "2020-02-03T10:05:33",
        "upload_time_iso_8601": "2020-02-03T10:05:33.979274Z",
        "url": "https://files.pythonhosted.org/packages/0d/71/b3c0b94dd77274421b90825de1716b956963d6cff938c246c545723849e4/Starlette-WTF-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "791a4998336f584f00f6ec8683aac9e0938bb0d36df55b8f5c65513c9042625c",
          "md5": "0a1c7ce8f5f06e87283e507fad40af0b",
          "sha256": "8f6348b0590309bed278e559b9c633f49b0fe01688b5ea2e0166a84e1d7cb3cd"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a1c7ce8f5f06e87283e507fad40af0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10144,
        "upload_time": "2020-02-03T10:07:52",
        "upload_time_iso_8601": "2020-02-03T10:07:52.174660Z",
        "url": "https://files.pythonhosted.org/packages/79/1a/4998336f584f00f6ec8683aac9e0938bb0d36df55b8f5c65513c9042625c/Starlette-WTF-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17cfe9b76c680eaebcb1e075b7c642bb96fe384931d446ea4cbcb55b9726370c",
          "md5": "3af547602bfdf3d54e915dced57deba5",
          "sha256": "b3b71d4e1cdc8281667b884e61972bcb70cfd6e09f7a9a7f2f2cfa5999f90920"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3af547602bfdf3d54e915dced57deba5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10336,
        "upload_time": "2020-02-03T13:34:27",
        "upload_time_iso_8601": "2020-02-03T13:34:27.515096Z",
        "url": "https://files.pythonhosted.org/packages/17/cf/e9b76c680eaebcb1e075b7c642bb96fe384931d446ea4cbcb55b9726370c/Starlette-WTF-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04b5262a38f426eb7d2ce560715cd037ea5143eecf0433edc3fe362166733e46",
          "md5": "9d21ec0d4a7c10b317219eed2f140713",
          "sha256": "7ad1cfd31e22a91860ef10ddf84030d37458eec27a41fdc9978c78becd33ca64"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9d21ec0d4a7c10b317219eed2f140713",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10397,
        "upload_time": "2020-02-03T14:14:36",
        "upload_time_iso_8601": "2020-02-03T14:14:36.446790Z",
        "url": "https://files.pythonhosted.org/packages/04/b5/262a38f426eb7d2ce560715cd037ea5143eecf0433edc3fe362166733e46/Starlette-WTF-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd12815644fe810cf4c78dc18da46fe3f7ea014cb471157c3fc527771806d9a2",
          "md5": "320d9f69df145e043dfc17579b18b275",
          "sha256": "8e56835ef7e912eef00f33e095c61b019749050bc39e56f59eef6134c4e0dec7"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "320d9f69df145e043dfc17579b18b275",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12239,
        "upload_time": "2020-12-02T09:34:12",
        "upload_time_iso_8601": "2020-12-02T09:34:12.924704Z",
        "url": "https://files.pythonhosted.org/packages/fd/12/815644fe810cf4c78dc18da46fe3f7ea014cb471157c3fc527771806d9a2/Starlette-WTF-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4984e63086cd3901d3eab429093025a68196787aa4d2d88d60545d507198314",
          "md5": "50e63cc7c2c0eb172217f80b657cc1d8",
          "sha256": "3340d3f85eb3f44929687efaef14085f354470fb695fce360db68a7c28ccefd0"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.3.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "50e63cc7c2c0eb172217f80b657cc1d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10903,
        "upload_time": "2020-11-29T15:12:51",
        "upload_time_iso_8601": "2020-11-29T15:12:51.181773Z",
        "url": "https://files.pythonhosted.org/packages/b4/98/4e63086cd3901d3eab429093025a68196787aa4d2d88d60545d507198314/Starlette-WTF-0.3.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a172f91d151aa4e70756eb56deca6639f392082fe31a27a52a15a971e2732639",
          "md5": "2d469752dffed4698c39198461da2e70",
          "sha256": "76ef3080c891dc087b0fe03eee159d591a49736822d5274bd04f15145c85a463"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.3.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d469752dffed4698c39198461da2e70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10878,
        "upload_time": "2020-12-01T08:06:51",
        "upload_time_iso_8601": "2020-12-01T08:06:51.400786Z",
        "url": "https://files.pythonhosted.org/packages/a1/72/f91d151aa4e70756eb56deca6639f392082fe31a27a52a15a971e2732639/Starlette-WTF-0.3.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d6cb05c4907462d415dbc5030233e348253a6a719011431835a8605af94197d",
          "md5": "0ab25f74a74eb262248f05ddf5cbabd1",
          "sha256": "976be13f29008fb46308f7f3ec5af6df7896eb8325cfe08493d3e1ba18df1d05"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ab25f74a74eb262248f05ddf5cbabd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12927,
        "upload_time": "2021-05-05T19:23:28",
        "upload_time_iso_8601": "2021-05-05T19:23:28.818781Z",
        "url": "https://files.pythonhosted.org/packages/5d/6c/b05c4907462d415dbc5030233e348253a6a719011431835a8605af94197d/Starlette-WTF-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27c6778942fd9918878d5b65b375a8f7b843ca3509a8cc9f10132bea08f6a4cc",
          "md5": "a2ed18c51e37a1aa5e33795a7b9bb69b",
          "sha256": "048e0c5268e88c80f95d3b7fef4030d8f782a05527999a59e8a88e229543569b"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2ed18c51e37a1aa5e33795a7b9bb69b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12525,
        "upload_time": "2021-05-05T12:53:45",
        "upload_time_iso_8601": "2021-05-05T12:53:45.688823Z",
        "url": "https://files.pythonhosted.org/packages/27/c6/778942fd9918878d5b65b375a8f7b843ca3509a8cc9f10132bea08f6a4cc/Starlette-WTF-0.4.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f47472ad4d5cc6a766e8dbd27f5d63c28f29fc3cfeb2900971615655e19a39a3",
          "md5": "6aac2341272023f2a87c0d9288b439be",
          "sha256": "ae519db43caf6f6219e8176d07195ee2a265fe39bd74f7d48b35e08a6e82de94"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6aac2341272023f2a87c0d9288b439be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12908,
        "upload_time": "2021-05-05T21:08:47",
        "upload_time_iso_8601": "2021-05-05T21:08:47.571824Z",
        "url": "https://files.pythonhosted.org/packages/f4/74/72ad4d5cc6a766e8dbd27f5d63c28f29fc3cfeb2900971615655e19a39a3/Starlette-WTF-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3f9942ea7d784f69027049719c56c1247331a5a57c13866e8e9a7b8006be0ac",
          "md5": "2f3cbfb81ab4e3216c3fa51ee9498adb",
          "sha256": "7a47cc57733327db1f5710727cd1c388e944e0ca3f364b02df99a660855f201f"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2f3cbfb81ab4e3216c3fa51ee9498adb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12939,
        "upload_time": "2021-06-07T16:10:52",
        "upload_time_iso_8601": "2021-06-07T16:10:52.689542Z",
        "url": "https://files.pythonhosted.org/packages/a3/f9/942ea7d784f69027049719c56c1247331a5a57c13866e8e9a7b8006be0ac/Starlette-WTF-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5c22f8ec816d6c392eacb792f5c123b431cab632e37b598dc2691de118c015f",
          "md5": "e9207df17b5328d12190df66fb1788c8",
          "sha256": "cdb5db035ad5a8453fd36e425694d3f3c26fc4fafffe55d87633a1486dad8a16"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.2rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9207df17b5328d12190df66fb1788c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12941,
        "upload_time": "2021-06-04T17:59:03",
        "upload_time_iso_8601": "2021-06-04T17:59:03.986945Z",
        "url": "https://files.pythonhosted.org/packages/a5/c2/2f8ec816d6c392eacb792f5c123b431cab632e37b598dc2691de118c015f/Starlette-WTF-0.4.2rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce4600eda53b774e9a5b2ef4edeb7e69f849d49492ee26e97504a06e782ebb0c",
          "md5": "c18cbb872c2e9ebbfd0225f50f67abe2",
          "sha256": "4b01d670f65112f13d19aa458cc9932f94f17ace14aaae1b6f08224f4aab2d86"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c18cbb872c2e9ebbfd0225f50f67abe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13017,
        "upload_time": "2021-06-17T18:37:09",
        "upload_time_iso_8601": "2021-06-17T18:37:09.794783Z",
        "url": "https://files.pythonhosted.org/packages/ce/46/00eda53b774e9a5b2ef4edeb7e69f849d49492ee26e97504a06e782ebb0c/Starlette-WTF-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d3ffc2364e244269d364fbe876ebf95ef6319993d0beb1f10035aae03d21f44",
          "md5": "1dcac950887e245f663d225250592c3e",
          "sha256": "4737408a2a49ce81b93320a27840a47519638717f1e18c23a90369dcf4b5c3df"
        },
        "downloads": -1,
        "filename": "Starlette-WTF-0.4.3rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "1dcac950887e245f663d225250592c3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13003,
        "upload_time": "2021-06-17T09:06:29",
        "upload_time_iso_8601": "2021-06-17T09:06:29.806791Z",
        "url": "https://files.pythonhosted.org/packages/4d/3f/fc2364e244269d364fbe876ebf95ef6319993d0beb1f10035aae03d21f44/Starlette-WTF-0.4.3rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce4600eda53b774e9a5b2ef4edeb7e69f849d49492ee26e97504a06e782ebb0c",
        "md5": "c18cbb872c2e9ebbfd0225f50f67abe2",
        "sha256": "4b01d670f65112f13d19aa458cc9932f94f17ace14aaae1b6f08224f4aab2d86"
      },
      "downloads": -1,
      "filename": "Starlette-WTF-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c18cbb872c2e9ebbfd0225f50f67abe2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13017,
      "upload_time": "2021-06-17T18:37:09",
      "upload_time_iso_8601": "2021-06-17T18:37:09.794783Z",
      "url": "https://files.pythonhosted.org/packages/ce/46/00eda53b774e9a5b2ef4edeb7e69f849d49492ee26e97504a06e782ebb0c/Starlette-WTF-0.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}