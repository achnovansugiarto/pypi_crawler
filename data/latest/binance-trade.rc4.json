{
  "info": {
    "author": "pyted",
    "author_email": "pyted@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Binance_trade 说明文档\n\n**version:1.0.3**\n\n## 1 Binance_trade 介绍\n\nBiance_trade基于pbinance与binance_candle封装了现货（SPOT）、U本位（UM）与币本位（CM）中常用的函数，降低量化交易难度。\n\n## 2 安装Binance_trade\n\n```cmd\npip3 install binance_trade\n```\n\n## 3 快速开始\n\n1.获取现货现货交易BTCUSDT的价格，降价2%挂单买入，买入金额为1000USDT，挂单时间为2小时，如果超时则取消订单。\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    binanceSPOT = BinanceSPOT(\n        key='****',\n        secret='****',\n    )\n\n    # 产品\n    symbol = 'BTCUSDT'\n    # 开仓金额\n    openMoney = 10000\n    # 购买价格\n    askPrice = binanceSPOT.market.get_bookTicker(symbol=symbol)['data']['askPrice']  # 卖1价格\n    askPrice = float(askPrice)\n    openPrice = askPrice * 0.98  # 降价2%\n    # 挂单时间\n    timeout = 60 * 60 * 2  # 单位秒\n    # 超时是否取消订单\n    cancel = True\n    # 是否堵塞模式\n    block = True\n\n    # 限价单开仓\n    result = binanceSPOT.trade.open_limit(\n        symbol=symbol,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        timeout=timeout,  # 等待订单成功的超时时间\n        cancel=True,  # 订单超时后是否取消\n    )\n    pprint(result)\n```\n\n2.获取U本位合约BTCUSDT的价格，降价5%，采用逐仓、10倍杠杆、开仓金额1000USDT挂单，挂单时间为2小时，如果超时则取消。\n\n**采用异步的方式管理这个订单，并设置订单成功或失败后的回调函数**\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    binanceUM = BinanceUM(\n        key='****',\n        secret='****'\n    )\n\n    # 产品\n    symbol = 'BTCUSDT'\n    # 开仓金额\n    openMoney = 10000\n    # 购买价格\n    askPrice = binanceUM.market.get_bookTicker(symbol=symbol)['data']['askPrice']  # 卖1价格\n    askPrice = float(askPrice)\n    openPrice = askPrice * 0.95  # 降价5%\n\n    # 限价单开仓\n    binanceUM.trade.open_limit(\n        symbol=symbol,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        leverage=10,  # 开仓金额\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        quantity=None,  # 开仓数量 None：用openMoney计算可以购买的最大数量\n        block=True,  # 是否以堵塞的模式\n        timeout=60 * 60 * 2,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n3.对于U本位合约以当前BTCUSDT的价格，止盈20%挂单买入平空，超时时间2小时，超时后取消订单，并设置回调函数。\n\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    binanceUM = BinanceUM(\n        key='****',\n        secret='****'\n    )\n\n    # 产品\n    symbol = 'BTCUSDT'\n\n    # 限价单平仓\n    binanceUM.trade.close_limit(\n        symbol=symbol,  # 产品\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        closePrice=None,  # 平仓价格 平仓价格closePrice与止盈率tpRate必须添加一个 优先级closePrice > tpRate\n        tpRate=0.2,  # 止盈率\n        # 平多 positionSide=\"LONG\":   closePrice = askPrice * (1 + abs(tpRate))\n        # 平空 positionSide=\"SHORT\":  closePrice = askPrice * (1 - abs(tpRate))\n        quantity='all',  # 平仓数量，'all' 表示全部\n        block=True,  # 是否以堵塞的模式\n        timeout=60 * 60 * 2,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 平仓成功触发的回调函数\n        errorback=errorback,  # 平仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n## 4 现货产品 BinanceSPOT\n\n### 4.1 现货账户\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_account|获取账户信息|\n|get_balances|获取全部现货余额|  \n|get_balance|获取单个现货余额|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 获取账户信息\n    account = binanceSPOT.account.get_account()\n    pprint(account)\n    # 获取全部现货余额\n    balances = binanceSPOT.account.get_balances()\n    pprint(balances)\n    # 获取单个现货余额\n    balance = binanceSPOT.account.get_balance(\n        symbol='BTCUSDT',\n        base_asset='USDT'\n    )  # 等价于： # balances = binanceSPOT.account.get_balance(asset='BTC')\n    pprint(balance)\n```\n\n### 4.2 现货行情\n\n#### 4.2.1 现货交易规则信息\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_exchangeInfos|获取全部交易规则与交易对|\n|get_exchangeInfo|获取单个交易规则与交易对|  \n|get_symbols_trading_on|获取可以交易的产品列表|\n|get_symbols_trading_off|获取不可交易的产品列表|\n\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 获取全部交易规则与交易对\n    exchangeInfos = binanceSPOT.market.get_exchangeInfos()\n    pprint(exchangeInfos)\n\n    # 获取单个交易规则与交易对\n    exchangeInfo = binanceSPOT.market.get_exchangeInfo(symbol='BTCUSDT')\n    pprint(exchangeInfo)\n\n    # 获取可以交易的产品列表\n    symbols_trading_on = binanceSPOT.market.get_symbols_trading_on()\n    pprint(symbols_trading_on)\n\n    # 获取不可交易的产品列表\n    get_symbols_trading_off = binanceSPOT.market.get_symbols_trading_off()\n    pprint(get_symbols_trading_off)\n```\n\n#### 4.2.2 现货实时价格\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_bookTickersMap|获取全部产品的最优挂单字典(包含不可交易的产品)|\n|get_bookTickers|获取全部产品的最优挂单列表(包含不可交易的产品)|\n|get_bookTicker|获取单个产品的最优挂单|\n|get_tickerPricesMap|获取全部产品的最新价格字典(包含不可交易的产品)|\n|get_tickerPrices|获取全部产品的最新价格列表(包含不可交易的产品)|\n|get_tickerPrice|获取单个产品的最新价格|\n|get_depth|获取单个产品的深度交易|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 获取全部产品的最优挂单\n    bookTickersMap = binanceSPOT.market.get_bookTickersMap()\n    pprint(bookTickersMap)\n    bookTickers = binanceSPOT.market.get_bookTickers()\n    pprint(bookTickers)\n\n    # 获取单个产品的最优挂单\n    bookTicker = binanceSPOT.market.get_bookTicker(symbol='BTCUSDT')\n    pprint(bookTicker)\n\n    # 获取全部产品的最新价格\n    tickerPricesMap = binanceSPOT.market.get_tickerPricesMap()\n    pprint(tickerPricesMap)\n    tickerPrices = binanceSPOT.market.get_tickerPrices()\n    pprint(tickerPrices)\n\n    # 获取单个产品的最新价格\n    tickerPrice = binanceSPOT.market.get_tickerPrice(symbol='BTCUSDT')\n    pprint(tickerPrice)\n\n    # 获取单个产品的深度交易\n    depth = binanceSPOT.market.get_depth(symbol='BTCUSDT', limit=100)\n    pprint(depth)\n```\n\n#### 4.2.3 现货历史K线\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_history_candle|获取产品的历史K线数据|\n|get_history_candle_latest|获取产品指定数量的最新历史K线数据|\n|get_history_candle_by_date|获取产品指定日期的历史K线数据|\n\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 获取产品的历史K线数据\n    history_candle = binanceSPOT.market.get_history_candle(\n        symbol='BTCUSDT',\n        start='2023-01-01 00:00:00',\n        end='2023-01-01 23:59:00',\n        bar='1m',\n    )\n    pprint(history_candle)\n\n    # 获取产品指定数量的最新历史K线数据\n    history_candle_latest = binanceSPOT.market.get_history_candle_latest(\n        symbol='BTCUSDT',\n        length=1440,\n        bar='1m',\n    )\n    pprint(history_candle_latest)\n\n    # 获取产品指定日期的历史K线数据\n    history_candle_by_date = binanceSPOT.market.get_history_candle_by_date(\n        symbol='BTCUSDT',\n        date='2023-01-01',\n        bar='1m',\n    )\n    pprint(history_candle_by_date)\n```\n\n### 4.3 现货交易\n\n#### 4.3.1 现货基础订单\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|set_order|普通下单购买|  \n|get_order|查询订单|  \n|get_openOrders|查看全部当前全部挂单|\n|get_openOrder|查询单个产品当前挂单|\n|cancel_order|撤销订单|\n|wait_order_FILLED|等待订单成交|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 普通下单购买\n    set_order = binanceSPOT.trade.set_order(\n        symbol='xxx',\n        side='BUY',\n        type='LIMIT',\n        timeInForce='GTC',\n        quantity='xxx',\n        price='xxx',\n    )\n    pprint(set_order)\n\n    # 查询订单\n    order = binanceSPOT.trade.get_order(\n        symbol='xxx',\n        orderId='xxx'\n    )\n    pprint(order)\n\n    # 查看全部当前全部挂单\n    openOrders = binanceSPOT.trade.get_openOrders()\n    pprint(openOrders)\n\n    # 查询单个产品当前挂单\n    openOrder = binanceSPOT.trade.get_openOrder(symbol='xxx')\n    pprint(openOrder)\n\n    # 撤销订单\n    binanceSPOT.trade.cancel_order(\n        symbol='xxx',\n        orderId='xxx',\n    )\n\n    # 等待订单成交\n    binanceSPOT.trade.wait_order_FILLED(\n        symbol='xxx',\n        orderId='xxx',\n    )\n```\n\n#### 4.3.2 现货下单价格与数量\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|round_quantity|圆整下单数量|\n|round_price|圆整开仓价格|\n|get_quantity|根据开仓金额、开仓价格与杠杆计算最大可开仓数量|\n|quantity_to_f|将下单数量转化为字符串|\n|price_to_f|将下单价格转化为字符串|\n\n```python\nfrom pprint import pprint\nfrom binance_trade import BinanceSPOT\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    # 圆整下单数量\n    round_quantity_result = binanceSPOT.trade.round_quantity(\n        quantity=100.00023234234234,\n        symbol='MANAUSDT',\n    )\n    pprint(round_quantity_result)\n    # 圆整下单价格\n    round_price_result = binanceSPOT.trade.round_price(\n        price=20.123123123,\n        symbol='MANAUSDT',\n        type='FLOOR',  # FLOOR:向下圆整 CEIL:向上圆整\n    )\n    pprint(round_price_result)\n    # 根据开仓金额、开仓价格与杠杆计算最大可开仓数量\n    get_quantity_result = binanceSPOT.trade.get_quantity(\n        openPrice=2.123123,\n        openMoney=20,\n        symbol='MANAUSDT',\n        leverage=1\n    )\n    pprint(get_quantity_result)\n    # 将下单数量转化为字符串\n    quantity_to_f_result = binanceSPOT.trade.quantity_to_f(\n        quantity=get_quantity_result['data'],\n        symbol='MANAUSDT',\n    )\n    pprint(quantity_to_f_result)\n    # 将下单价格转化为字符串\n    price_to_f_result = binanceSPOT.trade.price_to_f(\n        price=round_price_result['data'],\n        symbol='MANAUSDT',\n    )\n    pprint(price_to_f_result)\n```\n\n#### 4.3.3 现货限价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_limit|限价单开仓|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    symbol = 'PHAUSDT'  # 测试产品\n    openMoney = 15  # 购买金额\n    askPrice = binanceSPOT.market.get_bookTicker(symbol=symbol)['data']['askPrice']  # 卖1价格\n    askPrice = float(askPrice)\n    openPrice = askPrice * 0.8  # 购买价格为卖1价的8折，测试挂单\n\n    # 限价单开仓\n    binanceSPOT.trade.open_limit(\n        symbol=symbol,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        quantity=None,  # 开仓数量 None：用openMoney计算可以购买的最大数量\n        block=True,  # 是否以堵塞的模式\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 4.3.4 现货市价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_market|市价单开仓|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    symbol = 'xxxx'  # 测试产品 可以选择：PHAUSDT\n    openMoney = 15  # 购买金额\n\n    # 市价单开仓\n    binanceSPOT.trade.open_market(\n        symbol=symbol,  # 产品\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个\n        quantity=None,  # 开仓数量 None：用openMoney计算可以购买的最大数量\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 4.3.5 现货限价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_limit|限价单平仓|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    symbol = 'PHAUSDT'  # 测试产品\n    base_asset = 'USDT'  # 产品的基础货币\n\n    # 限价单平仓\n    binanceSPOT.trade.close_limit(\n        symbol=symbol,  # 产品\n        base_asset=base_asset,  # 产品的基础货币\n        closePrice=None,  # 平仓价格 平仓价格closePrice与止盈率tpRate必须添加一个 优先级closePrice > tpRate\n        tpRate=0.05,  # 以(当前实时价格 * (1 + tpRate)) 作为平仓价格\n        quantity='all',  # 平仓数量，'all' 表示全部\n        block=True,  # 是否以堵塞的模式\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 平仓成功触发的回调函数\n        errorback=errorback,  # 平仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 4.3.6 现货市价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_market|市价单平仓|\n\n```python\nfrom binance_trade import BinanceSPOT\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceSPOT = BinanceSPOT(key=key, secret=secret)\n\n    symbol = 'xxxx'  # 测试产品 可以选择：PHAUSDT\n    base_asset = 'USDT'  # 产品的基础货币\n\n    # 市价单平仓\n    binanceSPOT.trade.close_market(\n        symbol=symbol,  # 产品\n        base_asset=base_asset,  # 产品的基础货币\n        quantity='all',  # 平仓数量，'all' 表示全部\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 平仓成功触发的回调函数\n        errorback=errorback,  # 平仓失败触发的回调函数\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n## 5 U本位合约 BinanceUM\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|get_account|获取账户信息|\n|get_balances|获取账户全部余额|\n|get_balance|获取账户单个货币余额|\n|set_leverage|调整开仓杠杆|\n|set_marginType|更改持仓模式|\n|get_positions|获取全部产品的持仓信息|\n|get_position|获取单个产品的持仓信息|\n\n### 5.1 U本位账户\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    # 获取账户信息\n    account = binanceUM.account.get_account()\n    pprint(account)\n\n    # 获取账户全部余额\n    balances = binanceUM.account.get_balances()\n    pprint(balances)\n\n    # 获取账户单个货币余额\n    balance = binanceUM.account.get_balance(asset='BTC')\n    pprint(balance)\n\n    # 调整开仓杠杆\n    leverage = binanceUM.account.set_leverage(symbol='BTCUSDT', leverage=1)\n    pprint(leverage)\n\n    # 更改持仓模式\n    marginType = binanceUM.account.set_marginType(symbol='BTCUSDT', marginType='ISOLATED')\n    pprint(marginType)\n\n    # 获取全部产品的持仓信息\n    positions = binanceUM.account.get_positions()\n    pprint(positions)\n\n    # 获取单个产品的持仓信息\n    position = binanceUM.account.get_position(symbol='BTCUSDT')\n    pprint(position)\n```\n\n### 5.2 U本位行情\n\n#### 5.2.1 U本位交易规则信息\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_exchangeInfos|获取全部交易规则与交易对|\n|get_exchangeInfo|获取单个交易规则与交易对|  \n|get_symbols_trading_on|获取可以交易的产品列表|\n|get_symbols_trading_off|获取不可交易的产品列表|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    # 获取全部交易规则与交易对\n    exchangeInfos = binanceUM.market.get_exchangeInfos()\n    pprint(exchangeInfos)\n\n    # 获取单个交易规则与交易对\n    exchangeInfo = binanceUM.market.get_exchangeInfo(symbol='BTCUSDT')\n    pprint(exchangeInfo)\n\n    # 获取可以交易的产品列表\n    symbols_trading_on = binanceUM.market.get_symbols_trading_on()\n    pprint(symbols_trading_on)\n\n    # 获取不可交易的产品列表\n    get_symbols_trading_off = binanceUM.market.get_symbols_trading_off()\n    pprint(get_symbols_trading_off)\n```\n\n#### 5.2.2 U本位实时价格\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_bookTickersMap|获取全部产品的最优挂单字典(包含不可交易的产品)|\n|get_bookTickers|获取全部产品的最优挂单列表(包含不可交易的产品)|\n|get_bookTicker|获取单个产品的最优挂单|\n|get_tickerPricesMap|获取全部产品的最新价格字典(包含不可交易的产品)|\n|get_tickerPrices|获取全部产品的最新价格列表(包含不可交易的产品)|\n|get_tickerPrice|获取单个产品的最新价格|\n|get_depth|获取单个产品的深度交易|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    # 获取全部产品的最优挂单\n    bookTickersMap = binanceUM.market.get_bookTickersMap()\n    pprint(bookTickersMap)\n    bookTickers = binanceUM.market.get_bookTickers()\n    pprint(bookTickers)\n\n    # 获取单个产品的最优挂单\n    bookTicker = binanceUM.market.get_bookTicker(symbol='BTCUSDT')\n    pprint(bookTicker)\n\n    # 获取全部产品的最新价格\n    tickerPricesMap = binanceUM.market.get_tickerPricesMap()\n    pprint(tickerPricesMap)\n    tickerPrices = binanceUM.market.get_tickerPrices()\n    pprint(tickerPrices)\n\n    # 获取单个产品的最新价格\n    tickerPrice = binanceUM.market.get_tickerPrice(symbol='BTCUSDT')\n    pprint(tickerPrice)\n\n    # 获取单个产品的深度交易\n    depth = binanceUM.market.get_depth(symbol='BTCUSDT', limit=100)\n    pprint(depth)\n```\n\n#### 5.2.3 U本位历史K线\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_history_candle|获取产品的历史K线数据|\n|get_history_candle_latest|获取产品指定数量的最新历史K线数据|\n|get_history_candle_by_date|获取产品指定日期的历史K线数据|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n    \n    # 获取产品的历史K线数据\n    history_candle = binanceUM.market.get_history_candle(\n        symbol='BTCUSDT',\n        start='2023-01-01 00:00:00',\n        end='2023-01-01 23:59:00',\n        bar='1m',\n    )\n    pprint(history_candle)\n\n    # 获取产品指定数量的最新历史K线数据\n    history_candle_latest = binanceUM.market.get_history_candle_latest(\n        symbol='BTCUSDT',\n        length=1440,\n        bar='1m',\n    )\n    pprint(history_candle_latest)\n\n    # 获取产品指定日期的历史K线数据\n    history_candle_by_date = binanceUM.market.get_history_candle_by_date(\n        symbol='BTCUSDT',\n        date='2023-01-01',\n        bar='1m',\n    )\n    pprint(history_candle_by_date)\n```\n\n### 5.3 U本位交易\n\n#### 5.3.1 U本位基础订单\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|set_order|普通下单购买|  \n|get_order|查询订单|  \n|get_openOrders|查看全部当前全部挂单|\n|get_openOrder|查询单个产品当前挂单|\n|cancel_order|撤销订单|\n|wait_order_FILLED|等待订单成交|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    # 普通下单购买\n    set_order = binanceUM.trade.set_order(\n        symbol='xxx',\n        side='BUY',\n        type='LIMIT',\n        positionSide='LONG',\n        timeInForce='GTC',\n        quantity='xxx',\n        price='xxx',\n    )\n    pprint(set_order)\n\n    # 查询订单\n    order = binanceUM.trade.get_order(\n        symbol='xxx',\n        orderId='xxx'\n    )\n    pprint(order)\n\n    # 查看全部当前全部挂单\n    openOrders = binanceUM.trade.get_openOrders()\n    pprint(openOrders)\n\n    # 查询单个产品当前挂单\n    openOrder = binanceUM.trade.get_openOrder(symbol='xxx')\n    pprint(openOrder)\n\n    # 撤销订单\n    binanceUM.trade.cancel_order(\n        symbol='xxx',\n        orderId='xxx',\n    )\n\n    # 等待订单成交\n    binanceUM.trade.wait_order_FILLED(\n        symbol='xxx',\n        orderId='xxx',\n    )\n```\n\n#### 5.3.2 U本位下单价格与数量\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|round_quantity|圆整下单数量|\n|round_price|圆整开仓价格|\n|get_quantity|根据开仓金额、开仓价格与杠杆计算最大可开仓数量|\n|quantity_to_f|将下单数量转化为字符串|\n|price_to_f|将下单价格转化为字符串|\n\n```python\nfrom pprint import pprint\nfrom binance_trade import BinanceUM\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM= BinanceUM(key=key, secret=secret)\n\n    # 圆整下单数量\n    round_quantity_result = binanceUM.trade.round_quantity(\n        quantity=100.00023234234234,\n        symbol='MANAUSDT',\n    )\n    pprint(round_quantity_result)\n    # 圆整下单价格\n    round_price_result = binanceUM.trade.round_price(\n        price=20.123123123,\n        symbol='MANAUSDT',\n        type='FLOOR',  # FLOOR:向下圆整 CEIL:向上圆整\n    )\n    pprint(round_price_result)\n    # 根据开仓金额、开仓价格与杠杆计算最大可开仓数量\n    get_quantity_result = binanceUM.trade.get_quantity(\n        openPrice=2.123123,\n        openMoney=20,\n        symbol='MANAUSDT',\n        leverage=1\n    )\n    pprint(get_quantity_result)\n    # 将下单数量转化为字符串\n    quantity_to_f_result = binanceUM.trade.quantity_to_f(\n        quantity=get_quantity_result['data'],\n        symbol='MANAUSDT',\n    )\n    pprint(quantity_to_f_result)\n    # 将下单价格转化为字符串\n    price_to_f_result = binanceUM.trade.price_to_f(\n        price=round_price_result['data'],\n        symbol='MANAUSDT',\n    )\n    pprint(price_to_f_result)\n```\n\n#### 5.3.3 U本位限价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_limit|限价单开仓|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    symbol = 'BATUSDT'  # 测试产品\n    openMoney = 15  # 购买金额\n    askPrice = binanceUM.market.get_bookTicker(symbol=symbol)['data']['askPrice']  # 卖1价格\n    askPrice = float(askPrice)\n    openPrice = askPrice * 0.8  # 购买价格为卖1价的8折，测试挂单\n\n    # 限价单开仓\n    binanceUM.trade.open_limit(\n        symbol=symbol,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        leverage=1,  # 开仓杠杆\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        quantity=None,  # 开仓数量 None：用openMoney计算可以购买的最大数量\n        block=True,  # 是否以堵塞的模式\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 5.3.4 U本位市价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_market|市价单开仓|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    symbol = 'xxxx'  # 测试产品 可以选择：BATUSDT\n    openMoney = 15  # 购买金额\n\n    # 市价单开仓\n    binanceUM.trade.open_market(\n        symbol=symbol,  # 产品\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个\n        leverage=1,  # 开仓杠杆\n        quantity=None,  # 开仓数量 None：用openMoney计算可以购买的最大数量\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 5.3.5 U本位限单价平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_limit|限价单平仓|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    symbol = 'BATUSDT'  # 测试产品\n\n    # 限价单平仓\n    binanceUM.trade.close_limit(\n        symbol=symbol,  # 产品\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        closePrice=None,  # 平仓价格 平仓价格closePrice与止盈率tpRate必须添加一个 优先级closePrice > tpRate\n        tpRate=0.05,  # 止盈率\n        # 平多 positionSide=\"LONG\":   closePrice = askPrice * (1 + abs(tpRate))\n        # 平空 positionSide=\"SHORT\":  closePrice = askPrice * (1 - abs(tpRate))\n        quantity='all',  # 平仓数量，'all' 表示全部\n        block=True,  # 是否以堵塞的模式\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 平仓成功触发的回调函数\n        errorback=errorback,  # 平仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 5.3.6 U本位市价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_market|市价单平仓|\n\n```python\nfrom binance_trade import BinanceUM\nfrom pprint import pprint\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'symbol': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <close_market中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    key = '****'\n    secret = '****'\n    binanceUM = BinanceUM(key=key, secret=secret)\n\n    symbol = 'xxxx'  # 测试产品 可以选择：BATUSDT\n\n    # 市价单平仓\n    binanceUM.trade.close_market(\n        symbol=symbol,  # 产品\n        marginType='ISOLATED',  # 保证金模式： ISOLATED: 逐仓 CROSSED: 全仓\n        positionSide='LONG',  # 持仓方向 LONG: 多单 SHORT: 空单\n        quantity='all',  # 平仓数量，'all' 表示全部\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 间隔多少秒检测订单是否成功\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 平仓成功触发的回调函数\n        errorback=errorback,  # 平仓失败触发的回调函数\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        newClientOrderId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n## 6 币本位合约 BinanceCM\n\n币本位合约的使用方式与U本位相同，类名为BinanceCM\n\n```python\nfrom binance_trade import BinanceCM\n\nif __name__ == '__main__':\n    binanceCM = BinanceCM(\n        key='****',\n        secret='****',\n    )\n\n    # binanceCM.account.xxxx\n    # binanceCM.market.xxxx\n    # binanceCM.trade.xxxx\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyted/binance_trade",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "binance-trade",
    "package_url": "https://pypi.org/project/binance-trade/",
    "platform": null,
    "project_url": "https://pypi.org/project/binance-trade/",
    "project_urls": {
      "Homepage": "https://github.com/pyted/binance_trade"
    },
    "release_url": "https://pypi.org/project/binance-trade/1.0.3/",
    "requires_dist": [
      "candlelite",
      "pbinance",
      "binance-candle (>=1.0.3)",
      "paux"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Make Binance API Transactions Easier",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16956454,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed93fd8d8f8e400e5bd22decb547ee50768f2617597a7e9853c2ac99d6199f02",
          "md5": "cefacd848e6758facacdef882be2d89e",
          "sha256": "8503ec8b0a76e3aa4c9631a95b23d249e5e76e81c3af4d9148a7882f2098f5b7"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cefacd848e6758facacdef882be2d89e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 1419,
        "upload_time": "2023-02-08T03:26:47",
        "upload_time_iso_8601": "2023-02-08T03:26:47.757559Z",
        "url": "https://files.pythonhosted.org/packages/ed/93/fd8d8f8e400e5bd22decb547ee50768f2617597a7e9853c2ac99d6199f02/binance_trade-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "816d4c93fbb121d20766ec19121888c65a028c95f1663b1f5f779df2502ee471",
          "md5": "b29924578d3f944771ca82c6d6921156",
          "sha256": "3ace910370360f01515f451bad5b3f34cbb6501a5121f5c0f6900bac79fc9685"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b29924578d3f944771ca82c6d6921156",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 2030,
        "upload_time": "2023-02-08T03:26:49",
        "upload_time_iso_8601": "2023-02-08T03:26:49.775124Z",
        "url": "https://files.pythonhosted.org/packages/81/6d/4c93fbb121d20766ec19121888c65a028c95f1663b1f5f779df2502ee471/binance_trade-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c11c4774968bec35d9cb595b9151348999b954d3822c545e6eb57f046d7769b",
          "md5": "e96bd23eb74d0a0493903ec98d604c23",
          "sha256": "1d5d93c38d7e4eac749cf0a054a4dc231c9dd4f34d7dfaccea299e64647b3999"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e96bd23eb74d0a0493903ec98d604c23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 43669,
        "upload_time": "2023-02-14T08:19:32",
        "upload_time_iso_8601": "2023-02-14T08:19:32.932876Z",
        "url": "https://files.pythonhosted.org/packages/6c/11/c4774968bec35d9cb595b9151348999b954d3822c545e6eb57f046d7769b/binance_trade-1.0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76f77e1f142ad2f69e7abcfcbb9788838f14d4456a5ddc90479f657f870cd37c",
          "md5": "4f2a32c4298ba2f416dc6c3d96aa7444",
          "sha256": "2f68ab8f74b2cc5880cd3a1051ad49be241fbc623cd98ab4dbd4737c5b013024"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f2a32c4298ba2f416dc6c3d96aa7444",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27747,
        "upload_time": "2023-02-14T08:19:34",
        "upload_time_iso_8601": "2023-02-14T08:19:34.853363Z",
        "url": "https://files.pythonhosted.org/packages/76/f7/7e1f142ad2f69e7abcfcbb9788838f14d4456a5ddc90479f657f870cd37c/binance_trade-1.0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1ece4968ae996d759b93924fcded062cd9c9f3cb63fac9e148142769be2596",
          "md5": "dbaf50e8842726e1a1cc0c12b750b7d2",
          "sha256": "23feca3eee7aaff61d09e3443cc7afda9c7353681a827db4d9b58d8ac6c288d5"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbaf50e8842726e1a1cc0c12b750b7d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 47733,
        "upload_time": "2023-02-15T02:34:49",
        "upload_time_iso_8601": "2023-02-15T02:34:49.144691Z",
        "url": "https://files.pythonhosted.org/packages/bc/1e/ce4968ae996d759b93924fcded062cd9c9f3cb63fac9e148142769be2596/binance_trade-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a3fc4e0dcff779fc4c72e5a5d10614937b7051cb514a0262b17504e5198d887",
          "md5": "b215a8ba6d81696726f89d76f7c129e4",
          "sha256": "81562093a1421ef06d1ecc6eac120b8c1282faddc211e739c771832c77a142fb"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b215a8ba6d81696726f89d76f7c129e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 41353,
        "upload_time": "2023-02-15T02:34:52",
        "upload_time_iso_8601": "2023-02-15T02:34:52.668890Z",
        "url": "https://files.pythonhosted.org/packages/9a/3f/c4e0dcff779fc4c72e5a5d10614937b7051cb514a0262b17504e5198d887/binance_trade-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5776616f4f58974d705c9db183bb2cd8517c7c38b0b4356a6fb68d889f2bc37d",
          "md5": "88f8beafaa370363e84863ce86190c61",
          "sha256": "b477e8f01a167fb93eaf642dfe49915c7f5cbfe2b38815e2605f3927fc014c12"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88f8beafaa370363e84863ce86190c61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 48605,
        "upload_time": "2023-02-21T06:10:17",
        "upload_time_iso_8601": "2023-02-21T06:10:17.622940Z",
        "url": "https://files.pythonhosted.org/packages/57/76/616f4f58974d705c9db183bb2cd8517c7c38b0b4356a6fb68d889f2bc37d/binance_trade-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c355f2c7f7d3459c4356a58b51e630e8d01ea306e72b12142cd44d0be327c1c0",
          "md5": "d61de1ea16c11c16c13ebf39ab685bc9",
          "sha256": "4e984f45596e8966980cfb8c9c3cd46b0d3378b1bbcdcb1baf44b6a80a9849ce"
        },
        "downloads": -1,
        "filename": "binance_trade-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d61de1ea16c11c16c13ebf39ab685bc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 43959,
        "upload_time": "2023-02-21T06:10:20",
        "upload_time_iso_8601": "2023-02-21T06:10:20.417825Z",
        "url": "https://files.pythonhosted.org/packages/c3/55/f2c7f7d3459c4356a58b51e630e8d01ea306e72b12142cd44d0be327c1c0/binance_trade-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5776616f4f58974d705c9db183bb2cd8517c7c38b0b4356a6fb68d889f2bc37d",
        "md5": "88f8beafaa370363e84863ce86190c61",
        "sha256": "b477e8f01a167fb93eaf642dfe49915c7f5cbfe2b38815e2605f3927fc014c12"
      },
      "downloads": -1,
      "filename": "binance_trade-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "88f8beafaa370363e84863ce86190c61",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 48605,
      "upload_time": "2023-02-21T06:10:17",
      "upload_time_iso_8601": "2023-02-21T06:10:17.622940Z",
      "url": "https://files.pythonhosted.org/packages/57/76/616f4f58974d705c9db183bb2cd8517c7c38b0b4356a6fb68d889f2bc37d/binance_trade-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c355f2c7f7d3459c4356a58b51e630e8d01ea306e72b12142cd44d0be327c1c0",
        "md5": "d61de1ea16c11c16c13ebf39ab685bc9",
        "sha256": "4e984f45596e8966980cfb8c9c3cd46b0d3378b1bbcdcb1baf44b6a80a9849ce"
      },
      "downloads": -1,
      "filename": "binance_trade-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d61de1ea16c11c16c13ebf39ab685bc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 43959,
      "upload_time": "2023-02-21T06:10:20",
      "upload_time_iso_8601": "2023-02-21T06:10:20.417825Z",
      "url": "https://files.pythonhosted.org/packages/c3/55/f2c7f7d3459c4356a58b51e630e8d01ea306e72b12142cd44d0be327c1c0/binance_trade-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}