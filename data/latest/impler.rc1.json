{
  "info": {
    "author": "Roman",
    "author_email": "roman-right@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "## Implementation pattern*\n\n/* *inspired by Rust*\n\nUseful when it is needed to extend a class (usually 3d party) with some methods\nor interfaces\n\n### Install\n\n```shell\npip install impler\n```\n\nor\n\n```shell\npoetry add impler\n```\n\n### Usage\n\n#### Methods implementation\n\nUsing implementation pattern you can extend any class (even 3rd party) with\nregular, class or static methods.\n\n```python\nfrom impler import impl\nfrom pydantic import BaseModel\n\n\n@impl(BaseModel)\ndef fields_count(self: BaseModel):\n    return len(self.__fields__)\n\n\nclass Point(BaseModel):\n    x: int = 0\n    y: int = 1\n\n\npoint = Point()\nprint(point.fields_count())\n```\n\nClass methods\n\n```python\n@impl_classmethod(BaseModel)\ndef fields_count(cls):\n    return len(cls.__fields__)\n\n\n# or\n\n@impl(BaseModel)\n@classmethod\ndef fields_count(cls):\n    return len(cls.__fields__)\n```\n\nStatic methods\n\n```python\n@impl_staticmethod(BaseModel)\ndef zero(cls):\n    return 0\n\n\n# or\n\n@impl(BaseModel)\n@staticmethod\ndef zero(cls):\n    return 0\n```\n\nAsync methods\n\n```python\n@impl(BaseModel)\nasync def zero(cls):\n    await asyncio.sleep(1)\n    return 0\n```\n\n#### Interfaces implementation\n\nThe same way you can extend any class with the whole interface\n\nHere is example of the base interface, which\n\n```python\nfrom pathlib import Path\n\n\nclass BaseFileInterfase:\n    def dump(self, path: Path):\n        ...\n\n    @classmethod\n    def parse(cls, path: Path):\n        ...\n```\n\nThis is how you can implement this interface for Pydantic `BaseModel` class:\n\n```python\nfrom impler import impl\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\n\n@impl(BaseModel, as_parent=True)\nclass ModelFileInterface(BaseFileInterface):\n    def dump(self, path: Path):\n        path.write_text(self.json())\n        \n    @classmethod\n    def parse(cls, path: Path):\n        return cls.parse_file(path)\n\n```\n\nIf `as_parent` parameter is `True` the implementation will be injected to the list of the target class parents.\n\nThen you can check if the class or object implements the interface:\n\n```python\nprint(issubclass(BaseModel, BaseFileInterfase))\n# True\n\nprint(issubclass(Point, BaseFileInterfase))\n# True\n\nprint(isinstance(point, BaseFileInterface))\n# True\n```\n\nThe whole api documentation could be found by the [link](https://github.com/roman-right/impler/docs/api.md)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/roman-right/impler",
    "keywords": "impl,impler,implementation,pattern,sync,async,python",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "impler",
    "package_url": "https://pypi.org/project/impler/",
    "platform": "",
    "project_url": "https://pypi.org/project/impler/",
    "project_urls": {
      "Homepage": "https://github.com/roman-right/impler",
      "Repository": "https://github.com/roman-right/impler"
    },
    "release_url": "https://pypi.org/project/impler/0.1.0/",
    "requires_dist": [
      "asyncio (>=3.4,<4.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12582619,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "224f5b0f45fd0c7251b39b8d5d9650f266529b076c1252a8032478dbcabd2aac",
          "md5": "cfc0a8404c5139f435758cb60627f616",
          "sha256": "eaac754a34787001f74aab5b53168f5cfe58ff62c56f117024e372650a1eb33b"
        },
        "downloads": -1,
        "filename": "impler-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfc0a8404c5139f435758cb60627f616",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 12174,
        "upload_time": "2022-01-15T14:06:00",
        "upload_time_iso_8601": "2022-01-15T14:06:00.676094Z",
        "url": "https://files.pythonhosted.org/packages/22/4f/5b0f45fd0c7251b39b8d5d9650f266529b076c1252a8032478dbcabd2aac/impler-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff3b0e0df6c49d5c7e8cbefab1020f6d39b75588c19529e08514d072be4ccbb7",
          "md5": "31a64e65f2b6ba5d9bc7af577555af13",
          "sha256": "c08c082cd017ac8b30ec8b64257f20bc018c34e2c81fdc4fca199eb3924d91dc"
        },
        "downloads": -1,
        "filename": "impler-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "31a64e65f2b6ba5d9bc7af577555af13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8250,
        "upload_time": "2022-01-15T14:06:02",
        "upload_time_iso_8601": "2022-01-15T14:06:02.130479Z",
        "url": "https://files.pythonhosted.org/packages/ff/3b/0e0df6c49d5c7e8cbefab1020f6d39b75588c19529e08514d072be4ccbb7/impler-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "224f5b0f45fd0c7251b39b8d5d9650f266529b076c1252a8032478dbcabd2aac",
        "md5": "cfc0a8404c5139f435758cb60627f616",
        "sha256": "eaac754a34787001f74aab5b53168f5cfe58ff62c56f117024e372650a1eb33b"
      },
      "downloads": -1,
      "filename": "impler-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfc0a8404c5139f435758cb60627f616",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 12174,
      "upload_time": "2022-01-15T14:06:00",
      "upload_time_iso_8601": "2022-01-15T14:06:00.676094Z",
      "url": "https://files.pythonhosted.org/packages/22/4f/5b0f45fd0c7251b39b8d5d9650f266529b076c1252a8032478dbcabd2aac/impler-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff3b0e0df6c49d5c7e8cbefab1020f6d39b75588c19529e08514d072be4ccbb7",
        "md5": "31a64e65f2b6ba5d9bc7af577555af13",
        "sha256": "c08c082cd017ac8b30ec8b64257f20bc018c34e2c81fdc4fca199eb3924d91dc"
      },
      "downloads": -1,
      "filename": "impler-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "31a64e65f2b6ba5d9bc7af577555af13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 8250,
      "upload_time": "2022-01-15T14:06:02",
      "upload_time_iso_8601": "2022-01-15T14:06:02.130479Z",
      "url": "https://files.pythonhosted.org/packages/ff/3b/0e0df6c49d5c7e8cbefab1020f6d39b75588c19529e08514d072be4ccbb7/impler-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}