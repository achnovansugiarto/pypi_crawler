{
  "info": {
    "author": "",
    "author_email": "Isaac Robert <isaacrobertoluwaseun@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "channels_redis\n==============\n\nProvides Django Channels channel layers that use Redis as a backing store.\n\nThere are two available implementations:\n\n* ``RedisChannelLayer`` is the original layer, and implements channel and group\n  handling itself.\n* ``RedisPubSubChannelLayer`` is newer and leverages Redis Pub/Sub for message\n  dispatch. This layer is currently at *Beta* status, meaning it may be subject\n  to breaking changes whilst it matures.\n\nBoth layers support a single-server and sharded configurations.\n\nInstallation\n------------\n\n.. code-block::\n\n    pip install channels-redis-contrib\n\nUsage\n-----\n\nSet up the channel layer in your Django settings file like so:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [(\"localhost\", 6379)],\n            },\n        },\n    }\n\nOr, you can use the alternate implementation which uses Redis Pub/Sub:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.pubsub.RedisPubSubChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [(\"localhost\", 6379)],\n            },\n        },\n    }\n\nPossible options for ``CONFIG`` are listed below.\n\n``hosts``\n~~~~~~~~~\n\nThe server(s) to connect to, as either URIs, ``(host, port)`` tuples, or dicts conforming to `redis Connection <https://redis-py.readthedocs.io/en/v4.3.3/connections.html#redis.connection.Connection>`_.\nDefaults to ``redis://localhost:6379``. Pass multiple hosts to enable sharding,\nbut note that changing the host list will lose some sharded data.\n\nSentinel connections require dicts conforming to:\n\n.. code-block::\n\n    {\n        \"sentinels\": [\n            (\"localhost\", 26379),\n        ],\n        \"master_name\": SENTINEL_MASTER_SET,\n        **kwargs\n    }\n\nnote the additional ``master_name`` key specifying the Sentinel master set and any additional connection kwargs can also be passed. Plain Redis and Sentinel connections can be mixed and matched if\nsharding.\n\nIf your server is listening on a UNIX domain socket, you can also use that to connect: ``[\"unix:///path/to/redis.sock\"]``.\nThis should be slightly faster than a loopback TCP connection.\n\n``prefix``\n~~~~~~~~~~\n\nPrefix to add to all Redis keys. Defaults to ``asgi:``. If you're running\ntwo or more entirely separate channel layers through the same Redis instance,\nmake sure they have different prefixes. All servers talking to the same layer\nshould have the same prefix, though.\n\n``expiry``\n~~~~~~~~~~\n\nMessage expiry in seconds. Defaults to ``60``. You generally shouldn't need\nto change this, but you may want to turn it down if you have peaky traffic you\nwish to drop, or up if you have peaky traffic you want to backlog until you\nget to it.\n\n``group_expiry``\n~~~~~~~~~~~~~~~~\n\nGroup expiry in seconds. Defaults to ``86400``. Channels will be removed\nfrom the group after this amount of time; it's recommended you reduce it\nfor a healthier system that encourages disconnections. This value should\nnot be lower than the relevant timeouts in the interface server (e.g.\nthe ``--websocket_timeout`` to `daphne\n<https://github.com/django/daphne>`_).\n\n``capacity``\n~~~~~~~~~~~~\n\nDefault channel capacity. Defaults to ``100``. Once a channel is at capacity,\nit will refuse more messages. How this affects different parts of the system\nvaries; a HTTP server will refuse connections, for example, while Django\nsending a response will just wait until there's space.\n\n``channel_capacity``\n~~~~~~~~~~~~~~~~~~~~\n\nPer-channel capacity configuration. This lets you tweak the channel capacity\nbased on the channel name, and supports both globbing and regular expressions.\n\nIt should be a dict mapping channel name pattern to desired capacity; if the\ndict key is a string, it's intepreted as a glob, while if it's a compiled\n``re`` object, it's treated as a regular expression.\n\nThis example sets ``http.request`` to 200, all ``http.response!`` channels\nto 10, and all ``websocket.send!`` channels to 20:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [(\"localhost\", 6379)],\n                \"channel_capacity\": {\n                    \"http.request\": 200,\n                    \"http.response!*\": 10,\n                    re.compile(r\"^websocket.send\\!.+\"): 20,\n                },\n            },\n        },\n    }\n\nIf you want to enforce a matching order, use an ``OrderedDict`` as the\nargument; channels will then be matched in the order the dict provides them.\n\n``symmetric_encryption_keys``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPass this to enable the optional symmetric encryption mode of the backend. To\nuse it, make sure you have the ``cryptography`` package installed, or specify\nthe ``cryptography`` extra when you install ``channels_redis``::\n\n    pip install channels_redis[cryptography]\n\n``symmetric_encryption_keys`` should be a list of strings, with each string\nbeing an encryption key. The first key is always used for encryption; all are\nconsidered for decryption, so you can rotate keys without downtime - just add\na new key at the start and move the old one down, then remove the old one\nafter the message expiry time has passed.\n\nData is encrypted both on the wire and at rest in Redis, though we advise\nyou also route your Redis connections over TLS for higher security; the Redis\nprotocol is still unencrypted, and the channel and group key names could\npotentially contain metadata patterns of use to attackers.\n\nKeys **should have at least 32 bytes of entropy** - they are passed through\nthe SHA256 hash function before being used as an encryption key. Any string\nwill work, but the shorter the string, the easier the encryption is to break.\n\nIf you're using Django, you may also wish to set this to your site's\n``SECRET_KEY`` setting via the ``CHANNEL_LAYERS`` setting:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [\"redis://:password@127.0.0.1:6379/0\"],\n                \"symmetric_encryption_keys\": [SECRET_KEY],\n            },\n        },\n    }\n\n``on_disconnect`` / ``on_reconnect``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe PubSub layer, which maintains long-running connections to Redis, can drop messages in the event of a network partition.\nTo handle such situations the PubSub layer accepts optional arguments which will notify consumers of Redis disconnect/reconnect events.\nA common use-case is for consumers to ensure that they perform a full state re-sync to ensure that no messages have been missed.\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.pubsub.RedisPubSubChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [...],\n                \"on_disconnect\": \"redis.disconnect\",\n            },\n        },\n    }\n\n\nAnd then in your channels consumer, you can implement the handler:\n\n.. code-block:: python\n\n    async def redis_disconnect(self, *args):\n        # Handle disconnect\n\nDependencies\n------------\n\nRedis server >= 5.0 is required for `channels_redis`. Python 3.7 or higher is required.\n\n\nUsed commands\n~~~~~~~~~~~~~\n\nYour Redis server must support the following commands:\n\n* ``RedisChannelLayer`` uses ``BZPOPMIN``, ``DEL``, ``EVAL``, ``EXPIRE``,\n  ``KEYS``, ``PIPELINE``, ``ZADD``, ``ZCOUNT``, ``ZPOPMIN``, ``ZRANGE``,\n  ``ZREM``, ``ZREMRANGEBYSCORE``\n\n* ``RedisPubSubChannelLayer`` uses ``PUBLISH``, ``SUBSCRIBE``, ``UNSUBSCRIBE``\n\nLocal Development\n-----------------\n\nYou can run the necessary Redis instances in Docker with the following commands:\n\n.. code-block:: shell\n\n    $ docker run -it --rm --name redis -p 6379:6379 redis\n\n## To report bugs or request new features, please open a new GitHub issue.\n\nThis repository is part of the Channels project. For the shepherd and maintenance team, please see the\n`main Channels readme <https://github.com/django/channels/blob/master/README.rst>`_.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "channels-redis-contrib",
    "package_url": "https://pypi.org/project/channels-redis-contrib/",
    "platform": null,
    "project_url": "https://pypi.org/project/channels-redis-contrib/",
    "project_urls": {
      "Bug Tracker": "https://github.com/isaacrobert33/channels-redis-contrib/issues",
      "Homepage": "https://github.com/isaacrobert33/channels-redis-contrib"
    },
    "release_url": "https://pypi.org/project/channels-redis-contrib/3.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Provides Django Channels channel layers that use Redis as a backing store.",
    "version": "3.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17270738,
  "releases": {
    "3.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f38c9d6633096fed9733df49103d39814c25436392ed8c52cff5273b74bbc262",
          "md5": "37dbfc6aa0c7c9c5765fe7a06f783ff3",
          "sha256": "7d89351e03ff7a230c15098b980a71be16d821a7fbcce9ca9a60230dca1429e6"
        },
        "downloads": -1,
        "filename": "channels_redis_contrib-3.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37dbfc6aa0c7c9c5765fe7a06f783ff3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 20022,
        "upload_time": "2023-03-13T12:27:00",
        "upload_time_iso_8601": "2023-03-13T12:27:00.801624Z",
        "url": "https://files.pythonhosted.org/packages/f3/8c/9d6633096fed9733df49103d39814c25436392ed8c52cff5273b74bbc262/channels_redis_contrib-3.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c97ac6d3f44382f4c1013b22e838230826c7e917fdbacb90faa13c1938afb926",
          "md5": "558fccb71c0b891c4ea96719af906c83",
          "sha256": "2be13c3152a7c42e1080052b454400000e90e2a63c4c2a8a16bdea16b445093b"
        },
        "downloads": -1,
        "filename": "channels-redis-contrib-3.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "558fccb71c0b891c4ea96719af906c83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 28902,
        "upload_time": "2023-03-13T12:27:03",
        "upload_time_iso_8601": "2023-03-13T12:27:03.111846Z",
        "url": "https://files.pythonhosted.org/packages/c9/7a/c6d3f44382f4c1013b22e838230826c7e917fdbacb90faa13c1938afb926/channels-redis-contrib-3.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f38c9d6633096fed9733df49103d39814c25436392ed8c52cff5273b74bbc262",
        "md5": "37dbfc6aa0c7c9c5765fe7a06f783ff3",
        "sha256": "7d89351e03ff7a230c15098b980a71be16d821a7fbcce9ca9a60230dca1429e6"
      },
      "downloads": -1,
      "filename": "channels_redis_contrib-3.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37dbfc6aa0c7c9c5765fe7a06f783ff3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 20022,
      "upload_time": "2023-03-13T12:27:00",
      "upload_time_iso_8601": "2023-03-13T12:27:00.801624Z",
      "url": "https://files.pythonhosted.org/packages/f3/8c/9d6633096fed9733df49103d39814c25436392ed8c52cff5273b74bbc262/channels_redis_contrib-3.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c97ac6d3f44382f4c1013b22e838230826c7e917fdbacb90faa13c1938afb926",
        "md5": "558fccb71c0b891c4ea96719af906c83",
        "sha256": "2be13c3152a7c42e1080052b454400000e90e2a63c4c2a8a16bdea16b445093b"
      },
      "downloads": -1,
      "filename": "channels-redis-contrib-3.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "558fccb71c0b891c4ea96719af906c83",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 28902,
      "upload_time": "2023-03-13T12:27:03",
      "upload_time_iso_8601": "2023-03-13T12:27:03.111846Z",
      "url": "https://files.pythonhosted.org/packages/c9/7a/c6d3f44382f4c1013b22e838230826c7e917fdbacb90faa13c1938afb926/channels-redis-contrib-3.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}