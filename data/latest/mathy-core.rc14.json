{
  "info": {
    "author": "Justin DuJardin",
    "author_email": "justin@dujardinconsulting.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mathy_core: parse and manipulate math expressions\n\n[![Build](https://github.com/mathy/mathy_core/workflows/Build/badge.svg)](https://github.com/mathy/mathy_core/actions)\n[![Types](https://github.com/mathy/mathy_core/workflows/Types/badge.svg)](https://github.com/mathy/mathy_core/actions)\n[![codecov](https://codecov.io/gh/mathy/mathy_core/branch/master/graph/badge.svg)](https://codecov.io/gh/mathy/mathy_core)\n[![Pypi version](https://badgen.net/pypi/v/mathy-core)](https://pypi.org/project/mathy-core/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nMathy core is a python package (_with type annotations_) for working with math problems. It has a tokenizer for converting plain text into tokens, a parser for converting tokens into expression trees, a rule-based system for manipulating the trees, a layout system for visualizing trees, and a set of problem generation functions that can be used to generate datasets for ML training.\n\n## ðŸš€ Quickstart\n\nYou can install `mathy_core` from pip:\n\n```bash\npip install mathy_core\n```\n\n## Examples\n\nConsider a few examples to get a feel for what Mathy core does.\n\n### Evaluate an expression\n\nArithmetic is a snap.\n\n```python\nfrom mathy_core import ExpressionParser\n\nexpression = ExpressionParser().parse(\"4 + 2\")\nassert expression.evaluate() == 6\n```\n\n### Evaluate with variables\n\nVariable values can be specified when evaluating an expression.\n\n```python\nfrom mathy_core import ExpressionParser, MathExpression\n\nexpression: MathExpression = ExpressionParser().parse(\"4x + 2y\")\nassert expression.evaluate({\"x\": 2, \"y\": 5}) == 18\n```\n\n### Transform an expression\n\nExpressions can be changed using rules based on the properties of numbers.\n\n```python\nfrom mathy_core import ExpressionParser\nfrom mathy_core.rules import DistributiveFactorOutRule\n\ninput = \"4x + 2x\"\noutput = \"(4 + 2) * x\"\nparser = ExpressionParser()\n\ninput_exp = parser.parse(input)\noutput_exp = parser.parse(output)\n\n# Verify that the rule transforms the tree as expected\nchange = DistributiveFactorOutRule().apply_to(input_exp)\nassert str(change.result) == output\n\n# Verify that both trees evaluate to the same value\nctx = {\"x\": 3}\nassert input_exp.evaluate(ctx) == output_exp.evaluate(ctx)\n```\n\n<!-- ### Visualize a Tree -- needs mathy plugin in docs.sh -->\n<!-- ### Generate Problems -- needs example snippet -->\n\n## Semantic Versioning\n\nBefore Mathy Core reaches v1.0 the project is not guaranteed to have a consistent API, which means that types and classes may move around or be removed. That said, we try to be predictable when it comes to breaking changes, so the project uses semantic versioning to help users avoid breakage.\n\nSpecifically, new releases increase the `patch` semver component for new features and fixes, and the `minor` component when there are breaking changes. If you don't know much about semver strings, they're usually formatted `{major}.{minor}.{patch}` so increasing the `patch` component means incrementing the last number.\n\nConsider a few examples:\n\n| From Version | To Version | Changes are Breaking |\n| :----------: | :--------: | :------------------: |\n|    0.2.0     |   0.2.1    |          No          |\n|    0.3.2     |   0.3.6    |          No          |\n|    0.3.1     |   0.3.17   |          No          |\n|    0.2.2     |   0.3.0    |         Yes          |\n\nIf you are concerned about breaking changes, you can pin the version in your requirements so that it does not go beyond the current semver `minor` component, for example if the current version was `0.1.37`:\n\n```\nmathy_core>=0.1.37,<0.2.0\n```\n\n## ðŸŽ› API\n\n<!-- NOTE: The below code is auto-generated. Update source files to change API documentation. -->\n<!-- AUTO_DOCZ_START -->\n\n# Tokenizer <kbd>class</kbd>\n\n```python (doc)\nTokenizer(self, exclude_padding: bool = True)\n```\n\nThe Tokenizer produces a list of tokens from an input string.\n\n## eat_token <kbd>method</kbd>\n\n```python (doc)\nTokenizer.eat_token(\n    self,\n    context: mathy_core.tokenizer.TokenContext,\n    typeFn: Callable[[str], bool],\n) -> str\n```\n\nEat all of the tokens of a given type from the front of the stream\nuntil a different type is hit, and return the text.\n\n## identify_alphas <kbd>method</kbd>\n\n```python (doc)\nTokenizer.identify_alphas(\n    self,\n    context: mathy_core.tokenizer.TokenContext,\n) -> int\n```\n\nIdentify and tokenize functions and variables.\n\n## identify_constants <kbd>method</kbd>\n\n```python (doc)\nTokenizer.identify_constants(\n    self,\n    context: mathy_core.tokenizer.TokenContext,\n) -> int\n```\n\nIdentify and tokenize a constant number.\n\n## identify_operators <kbd>method</kbd>\n\n```python (doc)\nTokenizer.identify_operators(\n    self,\n    context: mathy_core.tokenizer.TokenContext,\n) -> bool\n```\n\nIdentify and tokenize operators.\n\n## is_alpha <kbd>method</kbd>\n\n```python (doc)\nTokenizer.is_alpha(self, c: str) -> bool\n```\n\nIs this character a letter\n\n## is_number <kbd>method</kbd>\n\n```python (doc)\nTokenizer.is_number(self, c: str) -> bool\n```\n\nIs this character a number\n\n## tokenize <kbd>method</kbd>\n\n```python (doc)\nTokenizer.tokenize(self, buffer: str) -> List[mathy_core.tokenizer.Token]\n```\n\nReturn an array of `Token`s from a given string input.\nThis throws an exception if an unknown token type is found in the input.\n\n# mathy_core.parser\n\n## ExpressionParser <kbd>class</kbd>\n\n```python (doc)\nExpressionParser(self) -> None\n```\n\nParser for converting text into binary trees. Trees encode the order of\noperations for an input, and allow evaluating it to detemrine the expression\nvalue.\n\n### Grammar Rules\n\nSymbols:\n\n```\n( )    == Non-terminal\n{ }*   == 0 or more occurrences\n{ }+   == 1 or more occurrences\n{ }?   == 0 or 1 occurrences\n[ ]    == Mandatory (1 must occur)\n|      == logical OR\n\" \"    == Terminal symbol (literal)\n```\n\nNon-terminals defined/parsed by Tokenizer:\n\n```\n(Constant) = anything that can be parsed by `float(in)`\n(Variable) = any string containing only letters (a-z and A-Z)\n```\n\nRules:\n\n```\n(Function)     = [ functionName ] \"(\" (AddExp) \")\"\n(Factor)       = { (Variable) | (Function) | \"(\" (AddExp) \")\" }+ { { \"^\" }? (UnaryExp) }?\n(FactorPrefix) = [ (Constant) { (Factor) }? | (Factor) ]\n(UnaryExp)     = { \"-\" }? (FactorPrefix)\n(ExpExp)       = (UnaryExp) { { \"^\" }? (UnaryExp) }?\n(MultExp)      = (ExpExp) { { \"*\" | \"/\" }? (ExpExp) }*\n(AddExp)       = (MultExp) { { \"+\" | \"-\" }? (MultExp) }*\n(EqualExp)     = (AddExp) { { \"=\" }? (AddExp) }*\n(start)        = (EqualExp)\n```\n\n### check <kbd>method</kbd>\n\n```python (doc)\nExpressionParser.check(\n    self,\n    tokens: mathy_core.parser.TokenSet,\n    do_assert: bool = False,\n) -> bool\n```\n\nCheck if the `self.current_token` is a member of a set Token types\n\nArgs: - `tokens` The set of Token types to check against\n\n`Returns` True if the `current_token`'s type is in the set else False\n\n### eat <kbd>method</kbd>\n\n```python (doc)\nExpressionParser.eat(self, type: int) -> bool\n```\n\nAssign the next token in the queue to current_token if its type\nmatches that of the specified parameter. If the type does not match,\nraise a syntax exception.\n\nArgs: - `type` The type that your syntax expects @current_token to be\n\n### next <kbd>method</kbd>\n\n```python (doc)\nExpressionParser.next(self) -> bool\n```\n\nAssign the next token in the queue to `self.current_token`.\n\nReturn True if there are still more tokens in the queue, or False if there\nare no more tokens to look at.\n\n### parse <kbd>method</kbd>\n\n```python (doc)\nExpressionParser.parse(\n    self,\n    input_text: str,\n) -> mathy_core.expressions.MathExpression\n```\n\nParse a string representation of an expression into a tree\nthat can be later evaluated.\n\nReturns : The evaluatable expression tree.\n\n## TokenSet <kbd>class</kbd>\n\n```python (doc)\nTokenSet(self, source: int)\n```\n\nTokenSet objects are bitmask combinations for checking to see\nif a token is part of a valid set.\n\n### add <kbd>method</kbd>\n\n```python (doc)\nTokenSet.add(self, addTokens: int) -> 'TokenSet'\n```\n\nAdd tokens to self set and return a TokenSet representing\ntheir combination of flags. Value can be an integer or an instance\nof `TokenSet`\n\n### contains <kbd>method</kbd>\n\n```python (doc)\nTokenSet.contains(self, type: int) -> bool\n```\n\nReturns true if the given type is part of this set\n\n# mathy_core.tree\n\n## BinaryTreeNode <kbd>class</kbd>\n\n```python (doc)\nBinaryTreeNode(\n    self,\n    left: Optional[BinaryTreeNode] = None,\n    right: Optional[BinaryTreeNode] = None,\n    parent: Optional[BinaryTreeNode] = None,\n    id: Optional[str] = None,\n)\n```\n\nThe binary tree node is the base node for all of our trees, and provides a\nrich set of methods for constructing, inspecting, and modifying them.\nThe node itself defines the structure of the binary tree, having left and right\nchildren, and a parent.\n\n### clone <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.clone(self: ~NodeType) -> ~NodeType\n```\n\nCreate a clone of this tree\n\n### get_children <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.get_children(self: ~NodeType) -> List[~NodeType]\n```\n\nGet children as an array. If there are two children, the first object will\nalways represent the left child, and the second will represent the right.\n\n### get_root <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.get_root(self: ~NodeType) -> ~NodeType\n```\n\nReturn the root element of this tree\n\n### get_root_side <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.get_root_side(\n    self: 'BinaryTreeNode',\n) -> typing_extensions.Literal['left', 'right']\n```\n\nReturn the side of the tree that this node lives on\n\n### get_sibling <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.get_sibling(self: ~NodeType) -> Optional[~NodeType]\n```\n\nGet the sibling node of this node. If there is no parent, or the node\nhas no sibling, the return value will be None.\n\n### get_side <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.get_side(\n    self,\n    child: Optional[BinaryTreeNode],\n) -> typing_extensions.Literal['left', 'right']\n```\n\nDetermine whether the given `child` is the left or right child of this\nnode\n\n### is_leaf <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.is_leaf(self) -> bool\n```\n\nIs this node a leaf? A node is a leaf if it has no children.\n\n### rotate <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.rotate(self: ~NodeType) -> ~NodeType\n```\n\nRotate a node, changing the structure of the tree, without modifying\nthe order of the nodes in the tree.\n\n### set_left <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.set_left(\n    self: ~NodeType,\n    child: Optional[BinaryTreeNode] = None,\n    clear_old_child_parent: bool = False,\n) -> ~NodeType\n```\n\nSet the left node to the passed `child`\n\n### set_right <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.set_right(\n    self: ~NodeType,\n    child: Optional[BinaryTreeNode] = None,\n    clear_old_child_parent: bool = False,\n) -> ~NodeType\n```\n\nSet the right node to the passed `child`\n\n### set_side <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.set_side(\n    self,\n    child: ~NodeType,\n    side: typing_extensions.Literal['left', 'right'],\n) -> ~NodeType\n```\n\nSet a new `child` on the given `side`\n\n### visit_inorder <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.visit_inorder(\n    self,\n    visit_fn: Callable[[Any, int, Optional[Any]], Optional[typing_extensions.Literal['stop']]],\n    depth: int = 0,\n    data: Optional[Any] = None,\n) -> Optional[typing_extensions.Literal['stop']]\n```\n\nVisit the tree inorder, which visits the left child, then the current node,\nand then its right child.\n\n_Left -> Visit -> Right_\n\nThis method accepts a function that will be invoked for each node in the\ntree. The callback function is passed three arguments: the node being\nvisited, the current depth in the tree, and a user specified data parameter.\n\n!!! info\n\n    Traversals may be canceled by returning `STOP` from any visit function.\n\n### visit_postorder <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.visit_postorder(\n    self,\n    visit_fn: Callable[[Any, int, Optional[Any]], Optional[typing_extensions.Literal['stop']]],\n    depth: int = 0,\n    data: Optional[Any] = None,\n) -> Optional[typing_extensions.Literal['stop']]\n```\n\nVisit the tree postorder, which visits its left child, then its right child,\nand finally the current node.\n\n_Left -> Right -> Visit_\n\nThis method accepts a function that will be invoked for each node in the\ntree. The callback function is passed three arguments: the node being\nvisited, the current depth in the tree, and a user specified data parameter.\n\n!!! info\n\n    Traversals may be canceled by returning `STOP` from any visit function.\n\n### visit_preorder <kbd>method</kbd>\n\n```python (doc)\nBinaryTreeNode.visit_preorder(\n    self,\n    visit_fn: Callable[[Any, int, Optional[Any]], Optional[typing_extensions.Literal['stop']]],\n    depth: int = 0,\n    data: Optional[Any] = None,\n) -> Optional[typing_extensions.Literal['stop']]\n```\n\nVisit the tree preorder, which visits the current node, then its left\nchild, and then its right child.\n\n_Visit -> Left -> Right_\n\nThis method accepts a function that will be invoked for each node in the\ntree. The callback function is passed three arguments: the node being\nvisited, the current depth in the tree, and a user specified data parameter.\n\n!!! info\n\n    Traversals may be canceled by returning `STOP` from any visit function.\n\n## NodeType\n\nTemplate type that inherits from BinaryTreeNode.\n\n## VisitDataType\n\nTemplate type of user data passed to visit functions.\n\n# mathy_core.expressions\n\n## AbsExpression <kbd>class</kbd>\n\n```python (doc)\nAbsExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\nEvaluates the absolute value of an expression.\n\n## AddExpression <kbd>class</kbd>\n\n```python (doc)\nAddExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nAdd one and two\n\n## BinaryExpression <kbd>class</kbd>\n\n```python (doc)\nBinaryExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nAn expression that operates on two sub-expressions\n\n### get_priority <kbd>method</kbd>\n\n```python (doc)\nBinaryExpression.get_priority(self) -> int\n```\n\nReturn a number representing the order of operations priority\nof this node. This can be used to check if a node is `locked`\nwith respect to another node, i.e. the other node must be resolved\nfirst during evaluation because of it's priority.\n\n### to_math_ml_fragment <kbd>method</kbd>\n\n```python (doc)\nBinaryExpression.to_math_ml_fragment(self) -> str\n```\n\nRender this node as a MathML element fragment\n\n## ConstantExpression <kbd>class</kbd>\n\n```python (doc)\nConstantExpression(self, value: Optional[int, float] = None)\n```\n\nA Constant value node, where the value is accessible as `node.value`\n\n## DivideExpression <kbd>class</kbd>\n\n```python (doc)\nDivideExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nDivide one by two\n\n## EqualExpression <kbd>class</kbd>\n\n```python (doc)\nEqualExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nEvaluate equality of two expressions\n\n### operate <kbd>method</kbd>\n\n```python (doc)\nEqualExpression.operate(\n    self,\n    one: Union[float, int],\n    two: Union[float, int],\n) -> Union[float, int]\n```\n\nReturn the value of the equation if one == two.\n\nRaise ValueError if both sides of the equation don't agree.\n\n## FactorialExpression <kbd>class</kbd>\n\n```python (doc)\nFactorialExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\nFactorial of a constant, e.g. `5` evaluates to `120`\n\n## FunctionExpression <kbd>class</kbd>\n\n```python (doc)\nFunctionExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\nA Specialized UnaryExpression that is used for functions. The function name in\ntext (used by the parser and tokenizer) is derived from the name() method on the\nclass.\n\n## MathExpression <kbd>class</kbd>\n\n```python (doc)\nMathExpression(\n    self,\n    id: Optional[str] = None,\n    left: Optional[MathExpression] = None,\n    right: Optional[MathExpression] = None,\n    parent: Optional[MathExpression] = None,\n)\n```\n\nMath tree node with helpers for manipulating expressions.\n\n`mathy:x+y=z`\n\n### add_class <kbd>method</kbd>\n\n```python (doc)\nMathExpression.add_class(\n    self,\n    classes: Union[List[str], str],\n) -> 'MathExpression'\n```\n\nAssociate a class name with an expression. This class name will be\nattached to nodes when the expression is converted to a capable output\nformat.\n\nSee `MathExpression.to_math_ml_fragment`\n\n### all_changed <kbd>method</kbd>\n\n```python (doc)\nMathExpression.all_changed(self) -> None\n```\n\nMark this node and all of its children as changed\n\n### clear_classes <kbd>method</kbd>\n\n```python (doc)\nMathExpression.clear_classes(self) -> None\n```\n\nClear all the classes currently set on the nodes in this expression.\n\n### clone <kbd>method</kbd>\n\n```python (doc)\nMathExpression.clone(self) -> 'MathExpression'\n```\n\nA specialization of the clone method that can track and report a cloned\nsubtree node.\n\nSee `MathExpression.clone_from_root` for more details.\n\n### clone_from_root <kbd>method</kbd>\n\n```python (doc)\nMathExpression.clone_from_root(\n    self,\n    node: Optional[MathExpression] = None,\n) -> 'MathExpression'\n```\n\nClone this node including the entire parent hierarchy that it has. This\nis useful when you want to clone a subtree and still maintain the overall\nhierarchy.\n\n**Arguments**\n\n- **node (MathExpression)**: The node to clone.\n\n**Returns**\n\n`(MathExpression)`: The cloned node.\n\n### color\n\nColor to use for this node when rendering it as changed with\n`.terminal_text`\n\n### evaluate <kbd>method</kbd>\n\n```python (doc)\nMathExpression.evaluate(\n    self,\n    context: Union[Dict[str, Optional[float, int]]] = None,\n) -> Union[float, int]\n```\n\nEvaluate the expression, resolving all variables to constant values\n\n### find_id <kbd>method</kbd>\n\n```python (doc)\nMathExpression.find_id(\n    self,\n    id: str,\n) -> Optional[MathExpression]\n```\n\nFind an expression by its unique ID.\n\nReturns: The found `MathExpression` or `None`\n\n### find_type <kbd>method</kbd>\n\n```python (doc)\nMathExpression.find_type(self, instanceType: Type[~NodeType]) -> List[~NodeType]\n```\n\nFind an expression in this tree by type.\n\n- instanceType: The type to check for instances of\n\nReturns the found `MathExpression` objects of the given type.\n\n### make_ml_tag <kbd>method</kbd>\n\n```python (doc)\nMathExpression.make_ml_tag(\n    self,\n    tag: str,\n    content: str,\n    classes: List[str] = [],\n) -> str\n```\n\nMake a MathML tag for the given content while respecting the node's given\nclasses.\n\n**Arguments**\n\n- **tag (str)**: The ML tag name to create.\n- **content (str)**: The ML content to place inside of the tag.\n  classes (List[str]) An array of classes to attach to this tag.\n\n**Returns**\n\n`(str)`: A MathML element with the given tag, content, and classes\n\n### path_to_root <kbd>method</kbd>\n\n```python (doc)\nMathExpression.path_to_root(self) -> str\n```\n\nGenerate a namespaced path key to from the current node to the root.\nThis key can be used to identify a node inside of a tree.\n\n### raw\n\nraw text representation of the expression.\n\n### set_changed <kbd>method</kbd>\n\n```python (doc)\nMathExpression.set_changed(self) -> None\n```\n\nMark this node as having been changed by the application of a Rule\n\n### terminal_text\n\nText output of this node that includes terminal color codes that\nhighlight which nodes have been changed in this tree as a result of\na transformation.\n\n### to_list <kbd>method</kbd>\n\n```python (doc)\nMathExpression.to_list(\n    self,\n    visit: str = 'preorder',\n) -> List[MathExpression]\n```\n\nConvert this node hierarchy into a list.\n\n### to_math_ml <kbd>method</kbd>\n\n```python (doc)\nMathExpression.to_math_ml(self) -> str\n```\n\nConvert this expression into a MathML container.\n\n### to_math_ml_fragment <kbd>method</kbd>\n\n```python (doc)\nMathExpression.to_math_ml_fragment(self) -> str\n```\n\nConvert this single node into MathML.\n\n### with_color <kbd>method</kbd>\n\n```python (doc)\nMathExpression.with_color(self, text: str, style: str = 'bright') -> str\n```\n\nRender a string that is colored if something has changed\n\n## MultiplyExpression <kbd>class</kbd>\n\n```python (doc)\nMultiplyExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nMultiply one and two\n\n## NegateExpression <kbd>class</kbd>\n\n```python (doc)\nNegateExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\nNegate an expression, e.g. `4` becomes `-4`\n\n### to_math_ml_fragment <kbd>method</kbd>\n\n```python (doc)\nNegateExpression.to_math_ml_fragment(self) -> str\n```\n\nConvert this single node into MathML.\n\n## PowerExpression <kbd>class</kbd>\n\n```python (doc)\nPowerExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nRaise one to the power of two\n\n## SgnExpression <kbd>class</kbd>\n\n```python (doc)\nSgnExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\n### operate <kbd>method</kbd>\n\n```python (doc)\nSgnExpression.operate(self, value: Union[float, int]) -> Union[float, int]\n```\n\nDetermine the sign of an value.\n\n**Returns**\n\n`(int)`: -1 if negative, 1 if positive, 0 if 0\n\n## SubtractExpression <kbd>class</kbd>\n\n```python (doc)\nSubtractExpression(\n    self,\n    left: Optional[mathy_core.expressions.MathExpression] = None,\n    right: Optional[mathy_core.expressions.MathExpression] = None,\n)\n```\n\nSubtract one from two\n\n## UnaryExpression <kbd>class</kbd>\n\n```python (doc)\nUnaryExpression(\n    self,\n    child: Optional[mathy_core.expressions.MathExpression] = None,\n    child_on_left: bool = False,\n)\n```\n\nAn expression that operates on one sub-expression\n\n# mathy_core.rules.associative_swap\n\n## AssociativeSwapRule <kbd>class</kbd>\n\n```python (doc)\nAssociativeSwapRule(self, args, kwargs)\n```\n\nAssociative Property\nAddition: `(a + b) + c = a + (b + c)`\n\n         (y) +            + (x)\n            / \\          / \\\n           /   \\        /   \\\n      (x) +     c  ->  a     + (y)\n         / \\                / \\\n        /   \\              /   \\\n       a     b            b     c\n\nMultiplication: `(ab)c = a(bc)`\n\n         (x) *            * (y)\n            / \\          / \\\n           /   \\        /   \\\n      (y) *     c  <-  a     * (x)\n         / \\                / \\\n        /   \\              /   \\\n       a     b            b     c\n\n# mathy_core.rules.balanced_move\n\n## BalancedMoveRule <kbd>class</kbd>\n\n```python (doc)\nBalancedMoveRule(self, args, kwargs)\n```\n\nBalanced rewrite rule moves nodes from one side of an equation\nto the other by performing the same operation on both sides.\n\nAddition: `a + 2 = 3` -> `a + 2 = 3 - 2`\nMultiplication: `3a = 3` -> `3a / 3 = 3 / 3`\n\n### get_type <kbd>method</kbd>\n\n```python (doc)\nBalancedMoveRule.get_type(\n    self,\n    node: mathy_core.expressions.MathExpression,\n) -> Optional[str]\n```\n\nDetermine the configuration of the tree for this transformation.\n\nSupports the following configurations:\n\n- Addition is a term connected by an addition to the side of an equation\n  or inequality. It generates two subtractions to move from one side to the\n  other.\n- Multiply is a coefficient of a term that must be divided on both sides of\n  the equation or inequality.\n\n# mathy_core.rules.commutative_swap\n\n## CommutativeSwapRule <kbd>class</kbd>\n\n```python (doc)\nCommutativeSwapRule(self, preferred: bool = True)\n```\n\nCommutative Property\nFor Addition: `a + b = b + a`\n\n         +                  +\n        / \\                / \\\n       /   \\     ->       /   \\\n      /     \\            /     \\\n     a       b          b       a\n\nFor Multiplication: `a * b = b * a`\n\n         *                  *\n        / \\                / \\\n       /   \\     ->       /   \\\n      /     \\            /     \\\n     a       b          b       a\n\n# mathy_core.rules.constants_simplify\n\n## ConstantsSimplifyRule <kbd>class</kbd>\n\n```python (doc)\nConstantsSimplifyRule(self, args, kwargs)\n```\n\nGiven a binary operation on two constants, simplify to the resulting\nconstant expression\n\n### get_type <kbd>method</kbd>\n\n```python (doc)\nConstantsSimplifyRule.get_type(\n    self,\n    node: mathy_core.expressions.MathExpression,\n) -> Optional[Tuple[str, mathy_core.expressions.ConstantExpression, mathy_core.expressions.ConstantExpression]]\n```\n\nDetermine the configuration of the tree for this transformation.\n\nSupport the three types of tree configurations:\n\n- Simple is where the node's left and right children are exactly\n  constants linked by an add operation.\n- Chained Right is where the node's left child is a constant, but the right\n  child is another binary operation of the same type. In this case the left\n  child of the next binary node is the target.\n\nStructure:\n\n- Simple\n  - node(add),node.left(const),node.right(const)\n- Chained Right\n  - node(add),node.left(const),node.right(add),node.right.left(const)\n- Chained Right Deep\n  - node(add),node.left(const),node.right(add),node.right.left(const)\n\n# mathy_core.rules.distributive_factor_out\n\n## DistributiveFactorOutRule <kbd>class</kbd>\n\n```python (doc)\nDistributiveFactorOutRule(self, constants: bool = False)\n```\n\nDistributive Property\n`ab + ac = a(b + c)`\n\nThe distributive property can be used to expand out expressions\nto allow for simplification, as well as to factor out common properties\nof terms.\n\n**Factor out a common term**\n\nThis handles the `ab + ac` conversion of the distributive property, which\nfactors out a common term from the given two addition operands.\n\n           +               *\n          / \\             / \\\n         /   \\           /   \\\n        /     \\    ->   /     \\\n       *       *       a       +\n      / \\     / \\             / \\\n     a   b   a   c           b   c\n\n### get_type <kbd>method</kbd>\n\n```python (doc)\nDistributiveFactorOutRule.get_type(\n    self,\n    node: mathy_core.expressions.MathExpression,\n) -> Optional[Tuple[str, mathy_core.util.TermEx, mathy_core.util.TermEx]]\n```\n\nDetermine the configuration of the tree for this transformation.\n\nSupport the three types of tree configurations:\n\n- Simple is where the node's left and right children are exactly\n  terms linked by an add operation.\n- Chained Left is where the node's left child is a term, but the right\n  child is another add operation. In this case the left child\n  of the next add node is the target.\n- Chained Right is where the node's right child is a term, but the left\n  child is another add operation. In this case the right child\n  of the child add node is the target.\n\nStructure:\n\n- Simple\n  - node(add),node.left(term),node.right(term)\n- Chained Left\n  - node(add),node.left(term),node.right(add),node.right.left(term)\n- Chained Right\n  - node(add),node.right(term),node.left(add),node.left.right(term)\n\n# mathy_core.rules.distributive_multiply_across\n\n## DistributiveMultiplyRule <kbd>class</kbd>\n\n```python (doc)\nDistributiveMultiplyRule(self, args, kwargs)\n```\n\nDistributive Property\n`a(b + c) = ab + ac`\n\nThe distributive property can be used to expand out expressions\nto allow for simplification, as well as to factor out common properties of terms.\n\n**Distribute across a group**\n\nThis handles the `a(b + c)` conversion of the distributive property, which\ndistributes `a` across both `b` and `c`.\n\n_note: this is useful because it takes a complex Multiply expression and\nreplaces it with two simpler ones. This can expose terms that can be\ncombined for further expression simplification._\n\n                             +\n         *                  / \\\n        / \\                /   \\\n       /   \\              /     \\\n      a     +     ->     *       *\n           / \\          / \\     / \\\n          /   \\        /   \\   /   \\\n         b     c      a     b a     c\n\n# mathy_core.rules.variable_multiply\n\n## VariableMultiplyRule <kbd>class</kbd>\n\n```python (doc)\nVariableMultiplyRule(self, args, kwargs)\n```\n\nThis restates `x^b * x^d` as `x^(b + d)` which has the effect of isolating\nthe exponents attached to the variables, so they can be combined.\n\n    1. When there are two terms with the same base being multiplied together, their\n       exponents are added together. \"x * x^3\" = \"x^4\" because \"x = x^1\" so\n       \"x^1 * x^3 = x^(1 + 3) = x^4\"\n\n    TODO: 2. When there is a power raised to another power, they can be combined by\n             multiplying the exponents together. \"x^(2^2) = x^4\"\n\nThe rule identifies terms with explicit and implicit powers, so the following\ntransformations are all valid:\n\nExplicit powers: x^b \\* x^d = x^(b+d)\n\n          *\n         / \\\n        /   \\          ^\n       /     \\    =   / \\\n      ^       ^      x   +\n     / \\     / \\        / \\\n    x   b   x   d      b   d\n\nImplicit powers: x \\* x^d = x^(1 + d)\n\n        *\n       / \\\n      /   \\          ^\n     /     \\    =   / \\\n    x       ^      x   +\n           / \\        / \\\n          x   d      1   d\n\n### get_type <kbd>method</kbd>\n\n```python (doc)\nVariableMultiplyRule.get_type(\n    self,\n    node: mathy_core.expressions.MathExpression,\n) -> Optional[Tuple[str, mathy_core.util.TermEx, mathy_core.util.TermEx]]\n```\n\nDetermine the configuration of the tree for this transformation.\n\nSupport two types of tree configurations:\n\n- Simple is where the node's left and right children are exactly\n  terms that can be multiplied together.\n- Chained is where the node's left child is a term, but the right\n  child is a continuation of a more complex term, as indicated by\n  the presence of another Multiply node. In this case the left child\n  of the next multiply node is the target.\n\nStructure:\n\n- Simple node(mult),node.left(term),node.right(term)\n- Chained node(mult),node.left(term),node.right(mult),node.right.left(term)\n\n# mathy_core.layout\n\n## TreeLayout <kbd>class</kbd>\n\n```python (doc)\nTreeLayout(self, args, kwargs)\n```\n\nCalculate a visual layout for input trees.\n\n### layout <kbd>method</kbd>\n\n```python (doc)\nTreeLayout.layout(\n    self,\n    node: mathy_core.tree.BinaryTreeNode,\n    unit_x_multiplier: float = 1.0,\n    unit_y_multiplier: float = 1.0,\n) -> 'TreeMeasurement'\n```\n\nAssign x/y values to all nodes in the tree, and return an object containing\nthe measurements of the tree.\n\nReturns a TreeMeasurement object that describes the bounds of the tree\n\n### transform <kbd>method</kbd>\n\n```python (doc)\nTreeLayout.transform(\n    self,\n    node: mathy_core.tree.BinaryTreeNode = None,\n    x: float = 0,\n    unit_x_multiplier: float = 1,\n    unit_y_multiplier: float = 1,\n    measure: Optional[TreeMeasurement] = None,\n) -> 'TreeMeasurement'\n```\n\nTransform relative to absolute coordinates, and measure the bounds of the tree.\n\nReturn a measurement of the tree in output units.\n\n## TreeMeasurement <kbd>class</kbd>\n\n```python (doc)\nTreeMeasurement(self) -> None\n```\n\nSummary of the rendered tree\n\n# mathy_core.problems\n\n## Problem Generation\n\nUtility functions for helping generate input problems.\n\n## DefaultType\n\nTemplate type for a default return value\n\n## gen_binomial_times_binomial <kbd>function</kbd>\n\n```python (doc)\ngen_binomial_times_binomial(\n    op: str = '+',\n    min_vars: int = 1,\n    max_vars: int = 2,\n    simple_variables: bool = True,\n    powers_probability: float = 0.33,\n    like_variables_probability: float = 1.0,\n) -> Tuple[str, int]\n```\n\nGenerate a binomial multiplied by another binomial.\n\n**Example**\n\n```\n(2e + 12p)(16 + 7e)\n```\n\n`mathy:(2e + 12p)(16 + 7e)`\n\n## gen_binomial_times_monomial <kbd>function</kbd>\n\n```python (doc)\ngen_binomial_times_monomial(\n    op: str = '+',\n    min_vars: int = 1,\n    max_vars: int = 2,\n    simple_variables: bool = True,\n    powers_probability: float = 0.33,\n    like_variables_probability: float = 1.0,\n) -> Tuple[str, int]\n```\n\nGenerate a binomial multiplied by a monomial.\n\n**Example**\n\n```\n(4x^3 + y) * 2x\n```\n\n`mathy:(4x^3 + y) * 2x`\n\n## gen_combine_terms_in_place <kbd>function</kbd>\n\n```python (doc)\ngen_combine_terms_in_place(\n    min_terms: int = 16,\n    max_terms: int = 26,\n    easy: bool = True,\n    powers: bool = False,\n) -> Tuple[str, int]\n```\n\nGenerate a problem that puts one pair of like terms next to each other\nsomewhere inside a large tree of unlike terms.\n\nThe problem is intended to be solved in a very small number of moves, making\ntraining across many episodes relatively quick, and reducing the combinatorial\nexplosion of branches that need to be searched to solve the task.\n\nThe hope is that by focusing the agent on selecting the right moves inside of a\nridiculously large expression it will learn to select actions to combine like terms\ninvariant of the sequence length.\n\n**Example**\n\n```\n4y + 12j + 73q + 19k + 13z + 56l + (24x + 12x) + 43n + 17j\n```\n\n`mathy:4y + 12j + 73q + 19k + 13z + 56l + (24x + 12x) + 43n + 17j`\n\n## gen_commute_haystack <kbd>function</kbd>\n\n```python (doc)\ngen_commute_haystack(\n    min_terms: int = 5,\n    max_terms: int = 8,\n    commute_blockers: int = 1,\n    easy: bool = True,\n    powers: bool = False,\n) -> Tuple[str, int]\n```\n\nA problem with a bunch of terms that have no matches, and a single\nset of two terms that do match, but are separated by one other term.\nThe challenge is to commute the terms to each other in one move.\n\n**Example**\n\n```\n4y + 12j + 73q + 19k + 13z + 24x + 56l + 12x  + 43n + 17j\"\n                              ^-----------^\n```\n\n`mathy:4y + 12j + 73q + 19k + 13z + 24x + 56l + 12x + 43n + 17j`\n\n## gen_move_around_blockers_one <kbd>function</kbd>\n\n```python (doc)\ngen_move_around_blockers_one(\n    number_blockers: int,\n    powers_probability: float = 0.5,\n) -> Tuple[str, int]\n```\n\nTwo like terms separated by (n) blocker terms.\n\n**Example**\n\n```\n4x + (y + f) + x\n```\n\n`mathy:4x + (y + f) + x`\n\n## gen_move_around_blockers_two <kbd>function</kbd>\n\n```python (doc)\ngen_move_around_blockers_two(\n    number_blockers: int,\n    powers_probability: float = 0.5,\n) -> Tuple[str, int]\n```\n\nTwo like terms with three blockers.\n\n**Example**\n\n```\n7a + 4x + (2f + j) + x + 3d\n```\n\n`mathy:7a + 4x + (2f + j) + x + 3d`\n\n## gen_simplify_multiple_terms <kbd>function</kbd>\n\n```python (doc)\ngen_simplify_multiple_terms(\n    num_terms: int,\n    optional_var: bool = False,\n    op: Union[List[str], str] = None,\n    common_variables: bool = True,\n    inner_terms_scaling: float = 0.3,\n    powers_probability: float = 0.33,\n    optional_var_probability: float = 0.8,\n    noise_probability: float = 0.8,\n    shuffle_probability: float = 0.66,\n    share_var_probability: float = 0.5,\n    grouping_noise_probability: float = 0.66,\n    noise_terms: int = None,\n) -> Tuple[str, int]\n```\n\nGenerate a polynomial problem with like terms that need to be combined and\nsimplified.\n\n**Example**\n\n```\n2a + 3j - 7b + 17.2a + j\n```\n\n`mathy:2a + 3j - 7b + 17.2a + j`\n\n## get_blocker <kbd>function</kbd>\n\n```python (doc)\nget_blocker(\n    num_blockers: int = 1,\n    exclude_vars: Optional[List[str]] = None,\n) -> str\n```\n\nGet a string of terms to place between target simplification terms\nin order to challenge the agent's ability to use commutative/associative\nrules to move terms around.\n\n## get_rand_vars <kbd>function</kbd>\n\n```python (doc)\nget_rand_vars(\n    num_vars: int,\n    exclude_vars: Optional[List[str]] = None,\n    common_variables: bool = False,\n) -> List[str]\n```\n\nGet a list of random variables, excluding the given list of hold-out variables\n\n## split_in_two_random <kbd>function</kbd>\n\n```python (doc)\nsplit_in_two_random(value: int) -> Tuple[int, int]\n```\n\nSplit a given number into two smaller numbers that sum to it.\nReturns: a tuple of (lower, higher) numbers that sum to the input\n\n## use_pretty_numbers <kbd>function</kbd>\n\n```python (doc)\nuse_pretty_numbers(enabled: bool = True) -> None\n```\n\nDetermine if problems should include only pretty numbers or\na whole range of integers and floats. Using pretty numbers will\nrestrict the numbers that are generated to integers between 1 and 12. When not using pretty numbers, floats and large integers will\nbe included in the output from `rand_number`\n\n<!-- AUTO_DOCZ_END -->\n\n## Contributors\n\nMathy Core wouldn't be possible without the wonderful contributions of the following people:\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a target=\"_blank\" href=\"https://www.justindujardin.com/\"><img src=\"https://avatars0.githubusercontent.com/u/101493?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Justin DuJardin</b></sub></a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://mathy.ai",
    "keywords": "math",
    "license": "All rights reserved",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mathy-core",
    "package_url": "https://pypi.org/project/mathy-core/",
    "platform": null,
    "project_url": "https://pypi.org/project/mathy-core/",
    "project_urls": {
      "Homepage": "https://mathy.ai"
    },
    "release_url": "https://pypi.org/project/mathy-core/0.8.6/",
    "requires_dist": [
      "pytest-cov ; extra == 'dev'",
      "numpy",
      "colr",
      "pydantic (>=1.0.0)",
      "wasabi",
      "typing-extensions ; python_version < \"3.7\"",
      "mypy ; extra == 'all'",
      "pytest ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "black ; extra == 'all'",
      "flake8 ; extra == 'all'",
      "isort ; extra == 'all'",
      "autoflake ; extra == 'all'",
      "typer ; extra == 'all'",
      "mathy-pydoc ; extra == 'all'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "autoflake ; extra == 'dev'",
      "typer ; extra == 'dev'",
      "mathy-pydoc ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Computer Algebra System for working with math expressions",
    "version": "0.8.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15200901,
  "releases": {
    "0.7.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e353dbd4cd5e58bcb8f893584c245898480fdab803847471c74637459056d15",
          "md5": "c59362a675f3b45f04b2539e7d07d0ae",
          "sha256": "6dcba1519345425d1fc2ac852ab5a2b3911aed1b2f1899b1c2a218fc0ae57b73"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c59362a675f3b45f04b2539e7d07d0ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59490,
        "upload_time": "2020-07-19T19:05:20",
        "upload_time_iso_8601": "2020-07-19T19:05:20.031279Z",
        "url": "https://files.pythonhosted.org/packages/3e/35/3dbd4cd5e58bcb8f893584c245898480fdab803847471c74637459056d15/mathy_core-0.7.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aec4bdc4cbd61b4ca98d4bf2314668ab33759a5c6f1330fd5e31f026cc7d57b5",
          "md5": "438df13316b87ea2e9ecada7bf4d152b",
          "sha256": "9744d175574ccaa86ba570e726ee734a0b233471966bfd31aa1dbda1b5c91cbb"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.14.tar.gz",
        "has_sig": false,
        "md5_digest": "438df13316b87ea2e9ecada7bf4d152b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44894,
        "upload_time": "2020-07-19T19:05:22",
        "upload_time_iso_8601": "2020-07-19T19:05:22.043455Z",
        "url": "https://files.pythonhosted.org/packages/ae/c4/bdc4cbd61b4ca98d4bf2314668ab33759a5c6f1330fd5e31f026cc7d57b5/mathy_core-0.7.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99485b1a21122ea5f4987b99c65166de1b160cfeff182ca5a8394a05887c0bd1",
          "md5": "0c7674449a8928c6094d5d200a3807d4",
          "sha256": "d5ece81bdfd9dac425ecb5e87649f07a9c64c484741ec3d5f3f3f3c8ef668edd"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c7674449a8928c6094d5d200a3807d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59491,
        "upload_time": "2020-07-19T19:10:31",
        "upload_time_iso_8601": "2020-07-19T19:10:31.376560Z",
        "url": "https://files.pythonhosted.org/packages/99/48/5b1a21122ea5f4987b99c65166de1b160cfeff182ca5a8394a05887c0bd1/mathy_core-0.7.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d16b17f537e5548f5baff19994237c912bea99d9416fd04ba42b6c92c7ff355",
          "md5": "daa08882cf9af60d63599c470c50b202",
          "sha256": "69e1b687761e28a429afed6ea18e8ffdd280ab32936656cfe286e4eacdede9ab"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.16.tar.gz",
        "has_sig": false,
        "md5_digest": "daa08882cf9af60d63599c470c50b202",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44895,
        "upload_time": "2020-07-19T19:10:32",
        "upload_time_iso_8601": "2020-07-19T19:10:32.552142Z",
        "url": "https://files.pythonhosted.org/packages/3d/16/b17f537e5548f5baff19994237c912bea99d9416fd04ba42b6c92c7ff355/mathy_core-0.7.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df71b96a915a7759e1bea8d5b94fbdfcc02ea46884e50948ebd6101b9aa1071d",
          "md5": "8a80a99d74eec8be207f877592187c73",
          "sha256": "8b1627017f384bc72d85941ec150f7a19f20d213a0ee2c19658339d0cc2c154e"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a80a99d74eec8be207f877592187c73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59370,
        "upload_time": "2020-07-20T02:07:05",
        "upload_time_iso_8601": "2020-07-20T02:07:05.849536Z",
        "url": "https://files.pythonhosted.org/packages/df/71/b96a915a7759e1bea8d5b94fbdfcc02ea46884e50948ebd6101b9aa1071d/mathy_core-0.7.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19de47ef26dc91d6f5c40547d59065e3352877102f4c31af814e930e60933291",
          "md5": "7f62b0ad8e4e75d2014b17ef63e750a6",
          "sha256": "4e232b7b62c038093b95ec567183d958122936d50218eec98c75e11e5503ca19"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.17.tar.gz",
        "has_sig": false,
        "md5_digest": "7f62b0ad8e4e75d2014b17ef63e750a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44857,
        "upload_time": "2020-07-20T02:07:06",
        "upload_time_iso_8601": "2020-07-20T02:07:06.663506Z",
        "url": "https://files.pythonhosted.org/packages/19/de/47ef26dc91d6f5c40547d59065e3352877102f4c31af814e930e60933291/mathy_core-0.7.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d0f68f2622450e3202250ab6aea23cdf54e2ff6266f06cd677fc31d70a15059",
          "md5": "8ec9beaea08063914ddaf0b8e959ecf9",
          "sha256": "569c98ee26b49adb4083ae7c814ec77816d28400ef69dd24dc5bf554e2150f72"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ec9beaea08063914ddaf0b8e959ecf9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59491,
        "upload_time": "2020-07-20T03:33:32",
        "upload_time_iso_8601": "2020-07-20T03:33:32.574014Z",
        "url": "https://files.pythonhosted.org/packages/7d/0f/68f2622450e3202250ab6aea23cdf54e2ff6266f06cd677fc31d70a15059/mathy_core-0.7.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c696962392c434d7bf5d1d10b185fe2ea7506dd200ec29ed782f1bb929a9711a",
          "md5": "41e29edd67699f687fc3d2b7855da0f7",
          "sha256": "9076711190a58a9eda5cbfbd4b05a59828f7901a083edd3ab808556ca76c9239"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.18.tar.gz",
        "has_sig": false,
        "md5_digest": "41e29edd67699f687fc3d2b7855da0f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44899,
        "upload_time": "2020-07-20T03:33:33",
        "upload_time_iso_8601": "2020-07-20T03:33:33.467263Z",
        "url": "https://files.pythonhosted.org/packages/c6/96/962392c434d7bf5d1d10b185fe2ea7506dd200ec29ed782f1bb929a9711a/mathy_core-0.7.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1955d1f131550c32cec4bc917463c8c9eda92cc3fb6c53c5d04212fef78bdc9a",
          "md5": "fc9b0eef4fdda68248a2e34f1619bc6c",
          "sha256": "ffdaa65b68330d775c55a9321e8a6a1b943d0b08f0f4763ab009965c1d619417"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc9b0eef4fdda68248a2e34f1619bc6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 63797,
        "upload_time": "2020-07-24T04:23:06",
        "upload_time_iso_8601": "2020-07-24T04:23:06.282667Z",
        "url": "https://files.pythonhosted.org/packages/19/55/d1f131550c32cec4bc917463c8c9eda92cc3fb6c53c5d04212fef78bdc9a/mathy_core-0.7.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1affb7a69e1118148367f761a799845974d9ad3757e2d8c6bdfa82d7f9588aa7",
          "md5": "d176f6dc62c7a24c31fc86257f0d7733",
          "sha256": "4bb75c4f4fea0663ab17f3719e4b73c46f7fbe673e092f2dd434555afe011244"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.19.tar.gz",
        "has_sig": false,
        "md5_digest": "d176f6dc62c7a24c31fc86257f0d7733",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46601,
        "upload_time": "2020-07-24T04:23:08",
        "upload_time_iso_8601": "2020-07-24T04:23:08.946648Z",
        "url": "https://files.pythonhosted.org/packages/1a/ff/b7a69e1118148367f761a799845974d9ad3757e2d8c6bdfa82d7f9588aa7/mathy_core-0.7.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce8f94c72ee517be1dff0a46531b628dd731e6498f33fe1b1b6540442ff9a5e9",
          "md5": "fb7f8f1c5ad8b3de27d3d10a1f564eba",
          "sha256": "a52da7077c5053b9072a5eb348bbb01380090547ad9d3337c3451ab2aafcb51a"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb7f8f1c5ad8b3de27d3d10a1f564eba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64116,
        "upload_time": "2020-08-23T01:44:55",
        "upload_time_iso_8601": "2020-08-23T01:44:55.762185Z",
        "url": "https://files.pythonhosted.org/packages/ce/8f/94c72ee517be1dff0a46531b628dd731e6498f33fe1b1b6540442ff9a5e9/mathy_core-0.7.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61132cd189676ec7c25cf158f22b2ed6b6acefa6aff89223a815d39a9818d722",
          "md5": "915613e9a117d51f482502f3eb7b3bc7",
          "sha256": "e3ebfa89e8a2828deb502b733183f54560d638b1d075534d5b7625ab122f5f7d"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.20.tar.gz",
        "has_sig": false,
        "md5_digest": "915613e9a117d51f482502f3eb7b3bc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47879,
        "upload_time": "2020-08-23T01:44:56",
        "upload_time_iso_8601": "2020-08-23T01:44:56.984669Z",
        "url": "https://files.pythonhosted.org/packages/61/13/2cd189676ec7c25cf158f22b2ed6b6acefa6aff89223a815d39a9818d722/mathy_core-0.7.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8841513d93722dffe21b7bba7457b706c33052da2e80092350e3830de3de7974",
          "md5": "959add103e8edc85527edfd294bb8d7c",
          "sha256": "3a994af524d6625f009814fa699a2e7a8af9c40bf100dec31abb2dc85b82b6a1"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "959add103e8edc85527edfd294bb8d7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64123,
        "upload_time": "2020-09-06T18:01:16",
        "upload_time_iso_8601": "2020-09-06T18:01:16.401607Z",
        "url": "https://files.pythonhosted.org/packages/88/41/513d93722dffe21b7bba7457b706c33052da2e80092350e3830de3de7974/mathy_core-0.7.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04791a89e6296aa3d5f4f6aebb08f12c8371cd1b11e815db87cd19743be7cc61",
          "md5": "93cefbbc90cc25cbb0f875f03ba27c62",
          "sha256": "2b045f9061d410def2a68a0a14fc31188c4718948a726f4fa3b248aa363df041"
        },
        "downloads": -1,
        "filename": "mathy_core-0.7.21.tar.gz",
        "has_sig": false,
        "md5_digest": "93cefbbc90cc25cbb0f875f03ba27c62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47692,
        "upload_time": "2020-09-06T18:01:17",
        "upload_time_iso_8601": "2020-09-06T18:01:17.274489Z",
        "url": "https://files.pythonhosted.org/packages/04/79/1a89e6296aa3d5f4f6aebb08f12c8371cd1b11e815db87cd19743be7cc61/mathy_core-0.7.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6557499ae38c131ecf59f7a2e8e846998a0d7c55b571046a86310679a14ee714",
          "md5": "b0897baba1154b1986b0a4b8159d31e4",
          "sha256": "7cb3b3c06b7510ca5e383a3fae342bb8503a1ad722cb258ca0efb17daa27e24f"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0897baba1154b1986b0a4b8159d31e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 58470,
        "upload_time": "2020-09-13T15:51:12",
        "upload_time_iso_8601": "2020-09-13T15:51:12.956757Z",
        "url": "https://files.pythonhosted.org/packages/65/57/499ae38c131ecf59f7a2e8e846998a0d7c55b571046a86310679a14ee714/mathy_core-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9dfbfc4638c07e1a162bc91c93a5931f32291b66367632368d16435593a0a8c",
          "md5": "a36634751482230cc5eacf9e115709bb",
          "sha256": "f73dd0357b73bffb420356b0490da49263e24ffb5d8e2f0267df218f5864e7fb"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a36634751482230cc5eacf9e115709bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46468,
        "upload_time": "2020-09-13T15:51:13",
        "upload_time_iso_8601": "2020-09-13T15:51:13.819545Z",
        "url": "https://files.pythonhosted.org/packages/b9/df/bfc4638c07e1a162bc91c93a5931f32291b66367632368d16435593a0a8c/mathy_core-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6da061fa3a52a2340c1604f48287e8ed7cf9008166d5502f71d0110b97cbbe90",
          "md5": "0df367546e240f452619e10e0afb2ccb",
          "sha256": "9274d1e9d0987cbedd3b49c8cb36a5b82adb06e3efb160507daa70c11c13d865"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0df367546e240f452619e10e0afb2ccb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67409,
        "upload_time": "2020-09-13T18:46:48",
        "upload_time_iso_8601": "2020-09-13T18:46:48.649714Z",
        "url": "https://files.pythonhosted.org/packages/6d/a0/61fa3a52a2340c1604f48287e8ed7cf9008166d5502f71d0110b97cbbe90/mathy_core-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4daaf92ff8cbffbb658dba272f8fece143a87f92687fad5dd209cf7bf41ede67",
          "md5": "690c0eea8747abba1c8887439d694ec0",
          "sha256": "4bf50a9cd93eee40f4eda5a5c5bcb97f805791eecd95d000ad77808269a41e4f"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "690c0eea8747abba1c8887439d694ec0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72827,
        "upload_time": "2020-09-13T18:46:50",
        "upload_time_iso_8601": "2020-09-13T18:46:50.155831Z",
        "url": "https://files.pythonhosted.org/packages/4d/aa/f92ff8cbffbb658dba272f8fece143a87f92687fad5dd209cf7bf41ede67/mathy_core-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d13aca15993c9eae67825845d501f357086f7cb0fb8ac0c32d8c372c040a50a3",
          "md5": "de45b6755ff7decaeda02a593eb90359",
          "sha256": "320b6d5cbd76172c8ef0ed15d8da3c9abf85e8b29ba0b4ea3c41e5bde5d69d07"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de45b6755ff7decaeda02a593eb90359",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69116,
        "upload_time": "2020-11-03T23:57:49",
        "upload_time_iso_8601": "2020-11-03T23:57:49.051290Z",
        "url": "https://files.pythonhosted.org/packages/d1/3a/ca15993c9eae67825845d501f357086f7cb0fb8ac0c32d8c372c040a50a3/mathy_core-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1cbd672fd6b58cee1a12eaaa414389a662b9d14ef4881f1a167d1c8f607c7a3",
          "md5": "271ee48fa8ae1d853cc6d63e54aaf73c",
          "sha256": "7a9c3365ec6f16adef9f8331a37be9f727c4920b75363887b83fb55bd339f0a5"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "271ee48fa8ae1d853cc6d63e54aaf73c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 74534,
        "upload_time": "2020-11-03T23:57:50",
        "upload_time_iso_8601": "2020-11-03T23:57:50.561730Z",
        "url": "https://files.pythonhosted.org/packages/c1/cb/d672fd6b58cee1a12eaaa414389a662b9d14ef4881f1a167d1c8f607c7a3/mathy_core-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6924d9ad311e8633f4ae3526502fc368d5ba369910fd209a7c2fd7cc00be42",
          "md5": "cf801076954b483f6d4a0cd38ebb528d",
          "sha256": "7fd45eb38039dfda2e9f60cbb6b776cc5ce15939193da70f2a98443179cd29d5"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf801076954b483f6d4a0cd38ebb528d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70042,
        "upload_time": "2021-03-25T17:02:21",
        "upload_time_iso_8601": "2021-03-25T17:02:21.582022Z",
        "url": "https://files.pythonhosted.org/packages/de/69/24d9ad311e8633f4ae3526502fc368d5ba369910fd209a7c2fd7cc00be42/mathy_core-0.8.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fabd69449abbd74b5c2754153c1a99f81590cdec89e9dca69bf6eb209f218dc",
          "md5": "8f1a0cdb59be243efc930eb46a691f1a",
          "sha256": "fda26c4e0e7cad9769035702c060e09c91d61b9921034c9d81f37ede9ad8b217"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8f1a0cdb59be243efc930eb46a691f1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 75524,
        "upload_time": "2021-03-25T17:02:23",
        "upload_time_iso_8601": "2021-03-25T17:02:23.548262Z",
        "url": "https://files.pythonhosted.org/packages/2f/ab/d69449abbd74b5c2754153c1a99f81590cdec89e9dca69bf6eb209f218dc/mathy_core-0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac3742da1e618cc197035c77c2576024e6dee46f46dfb1e937b378c706755a8f",
          "md5": "6d7fed197e26f0b5a19ad7239891e879",
          "sha256": "e6367757971b03b24113a1ee6dea16585088b8fa205e139b977c000e432bb687"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d7fed197e26f0b5a19ad7239891e879",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 75566,
        "upload_time": "2021-04-06T20:42:49",
        "upload_time_iso_8601": "2021-04-06T20:42:49.379520Z",
        "url": "https://files.pythonhosted.org/packages/ac/37/42da1e618cc197035c77c2576024e6dee46f46dfb1e937b378c706755a8f/mathy_core-0.8.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c144419e97052dc3d83a2c1a83034727bd753860a7d4e46bce0fcff73eac41",
          "md5": "21cb013b5c6377360072189eb51d03ec",
          "sha256": "50a04d55b802d459616b6353c2e113734f0f74494602fa134faef2482332a206"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "21cb013b5c6377360072189eb51d03ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 79574,
        "upload_time": "2021-04-06T20:42:51",
        "upload_time_iso_8601": "2021-04-06T20:42:51.134239Z",
        "url": "https://files.pythonhosted.org/packages/68/c1/44419e97052dc3d83a2c1a83034727bd753860a7d4e46bce0fcff73eac41/mathy_core-0.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c32a15e6a4ae4cf55f3578ece33c14dbd78a3352ef98e162370672e813c218be",
          "md5": "b582c8190fb2701b7bcef2e1a463eb5b",
          "sha256": "89b12e261a64f8b6170f73b80ac4616be634254ec5624d0585abcebb631b8e14"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b582c8190fb2701b7bcef2e1a463eb5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 75706,
        "upload_time": "2022-09-24T18:43:17",
        "upload_time_iso_8601": "2022-09-24T18:43:17.096647Z",
        "url": "https://files.pythonhosted.org/packages/c3/2a/15e6a4ae4cf55f3578ece33c14dbd78a3352ef98e162370672e813c218be/mathy_core-0.8.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c489de96beac0f209986724d6a3ee37f7fa88222437468438bdde1fb70bf6982",
          "md5": "dc6fef2512f184038494f932715e54c8",
          "sha256": "68603f1f2a314b7d74d71ff6065bc82e0cef7979a32cdaaa7c5fb5784e7624f4"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dc6fef2512f184038494f932715e54c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 79391,
        "upload_time": "2022-09-24T18:43:19",
        "upload_time_iso_8601": "2022-09-24T18:43:19.007404Z",
        "url": "https://files.pythonhosted.org/packages/c4/89/de96beac0f209986724d6a3ee37f7fa88222437468438bdde1fb70bf6982/mathy_core-0.8.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e80131d5aaaf430aed0ad7ed526379920157421abe8da1fe3b36c1b675311f9",
          "md5": "27a7a39e37810289620bf528449b5673",
          "sha256": "9ae063907f26783f6838fc4617fb966a47bf6cea08f2bc7253d39b3edba62f5c"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27a7a39e37810289620bf528449b5673",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 76352,
        "upload_time": "2022-09-24T21:00:12",
        "upload_time_iso_8601": "2022-09-24T21:00:12.197726Z",
        "url": "https://files.pythonhosted.org/packages/2e/80/131d5aaaf430aed0ad7ed526379920157421abe8da1fe3b36c1b675311f9/mathy_core-0.8.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c806b1d288054bf48f614f977f130f3d689bda665a95641b749d35a0ff2007",
          "md5": "88fe37b6fddf90e16823937f318ee3b0",
          "sha256": "99e6e2b55c3d7f418fcc570a7b85affe6c1f63f97bc2ad7db006ade9006e29e6"
        },
        "downloads": -1,
        "filename": "mathy_core-0.8.6.tar.gz",
        "has_sig": false,
        "md5_digest": "88fe37b6fddf90e16823937f318ee3b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 79955,
        "upload_time": "2022-09-24T21:00:14",
        "upload_time_iso_8601": "2022-09-24T21:00:14.173151Z",
        "url": "https://files.pythonhosted.org/packages/92/c8/06b1d288054bf48f614f977f130f3d689bda665a95641b749d35a0ff2007/mathy_core-0.8.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e80131d5aaaf430aed0ad7ed526379920157421abe8da1fe3b36c1b675311f9",
        "md5": "27a7a39e37810289620bf528449b5673",
        "sha256": "9ae063907f26783f6838fc4617fb966a47bf6cea08f2bc7253d39b3edba62f5c"
      },
      "downloads": -1,
      "filename": "mathy_core-0.8.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "27a7a39e37810289620bf528449b5673",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 76352,
      "upload_time": "2022-09-24T21:00:12",
      "upload_time_iso_8601": "2022-09-24T21:00:12.197726Z",
      "url": "https://files.pythonhosted.org/packages/2e/80/131d5aaaf430aed0ad7ed526379920157421abe8da1fe3b36c1b675311f9/mathy_core-0.8.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92c806b1d288054bf48f614f977f130f3d689bda665a95641b749d35a0ff2007",
        "md5": "88fe37b6fddf90e16823937f318ee3b0",
        "sha256": "99e6e2b55c3d7f418fcc570a7b85affe6c1f63f97bc2ad7db006ade9006e29e6"
      },
      "downloads": -1,
      "filename": "mathy_core-0.8.6.tar.gz",
      "has_sig": false,
      "md5_digest": "88fe37b6fddf90e16823937f318ee3b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 79955,
      "upload_time": "2022-09-24T21:00:14",
      "upload_time_iso_8601": "2022-09-24T21:00:14.173151Z",
      "url": "https://files.pythonhosted.org/packages/92/c8/06b1d288054bf48f614f977f130f3d689bda665a95641b749d35a0ff2007/mathy_core-0.8.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}