{
  "info": {
    "author": "p02diada",
    "author_email": "p02diada@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Simple Api Auth\n########################\n\n\nDjango Simple Api Auth is a Django app to help developers with the Session auth of a rest or graphql api in Django.\n\n- Django Rest Framework\n- Graphene\n- Ariadne\n\nFeatures\n*********\n\n- Create user\n- Login\n- Logout\n- Social login\n- Get user data (Me)\n- Recover user password\n- Overwrite emails\n- Overwrite Me fields (Not implemented for ariadne)\n- Reset password v√≠a API\n\nOverview\n*********\n\nYou should read about the CSRF protection in `django <https://docs.djangoproject.com/en/3.2/ref/csrf/>`_\n\n* You have to send X-CSRFToken token in headers\n* Rest framework disable csrf in views using csrf_exempt, and adding the validation to the SessionAuthentication\n* Graphene don't do anything with the csrf validation, so you have to exempt them when it makes sense. You can use the view of this `example <https://github.com/mrmilu/django-simple-api-auth-example/blob/master/graphqls/views.py>`_ or create your own. Don't disable it for all the endpoints.\n\nQuick start\n************\n\n\n\nAdd django_simple_api_auth and dependencies to your INSTALLED_APPS setting like this::\n\n\n    INSTALLED_APPS = [\n        ...\n        'rest_framework',\n        'graphene_django',\n        'social_django',\n        'ariadne.contrib.django',\n        'django_simple_api_auth',\n    ]\n\n\nRest framework\n***************\n\nYou can add the main ViewSet that has all the permissions and features implemented to your router::\n\n    router.register(r'users', UserApiViewSet, 'users')\n\nOr you can use mixins to create your own viewset::\n\n    class UserCompleteViewSet(UserCreateMixin, UserLoginMixin, UserMeMixin, UserPasswordRecoveryMixin, UserLogoutMixin, UserSocialLoginMixin):\n        pass\n\nGraphene\n*********\n\nYou can add the user queries and mutations to your schema::\n\n\n\n    from django_simple_api_auth.api.graphql.mutations import UsersMutation\n    from django_simple_api_auth.api.graphql.queries import UserQuery\n\n\n    class Query(UserQuery, graphene.ObjectType):\n        pass\n\n\n    class Mutation(UsersMutation, graphene.ObjectType):\n        pass\n\n\n    schema = graphene.Schema(\n        query=Query,\n        mutation=Mutation\n    )\n\n\nor you can create your own query and mutation::\n\n    class UsersMutation(graphene.ObjectType):\n        user_create = UserCreateMutation.Field()\n        user_login = UserLoginMutation.Field()\n        user_social_login = UserSocialLoginMutation.Field()\n        user_logout = UserLogoutMutation.Field()\n        user_password_recovery = UserPasswordRecoveryMutation.Field()\n        user_reset_password = UserResetPasswordMutation.Field()\n\n    class UserQuery(ObjectType):\n        get_me = Field(AuthUserType)\n\n        @login_required\n        def resolve_get_me(self, info, **kwargs):\n            return info.context.user\n\n\n\nAriadne\n*********\n\nYou have to add the user queries and mutations to your schema manually::\n\n    type Mutation {\n        userCreate(input: UserCreateMutationInput!): UserCreateMutationPayload\n        userLogin(input: UserLoginMutationInput!): UserLoginMutationPayload\n        userLogout(input: UserLogoutMutationInput!): UserLogoutMutationPayload\n        userPasswordRecovery(input: UserPasswordRecoveryMutationInput!): UserPasswordRecoveryMutationPayload\n        userResetPassword(input: UserResetPasswordMutationInput!): UserResetPasswordMutationPayload\n        userSocialLogin(input: UserSocialLoginMutationInput!): UserSocialLoginMutationPayload\n    }\n\n    type Query {\n        getMe: AuthUserType\n    }\n\n\nand then you have to add types and ObjectTypes to your executable schema, for example::\n\n    import os\n\n    from ariadne import make_executable_schema, gql, load_schema_from_path\n    import django_simple_api_auth.api.graphql.ariadne\n    from django_simple_api_auth.api.graphql.ariadne.mutations import mutation as auth_mutations\n    from django_simple_api_auth.api.graphql.ariadne.queries import query as auth_query\n    from example.graphqls.ariadne.queries import query\n\n    auth_types_graphql_dirname = os.path.dirname(django_simple_api_auth.api.graphql.ariadne.__file__)\n    auth_mutations_type_defs = gql(load_schema_from_path(f\"{auth_types_graphql_dirname}/mutations.graphql\"))\n    auth_queries_type_defs = gql(load_schema_from_path(f\"{auth_types_graphql_dirname}/queries.graphql\"))\n    type_defs = gql(load_schema_from_path('./graphqls/ariadne/scheme.graphql'))\n\n    type_defs_list = [\n        auth_mutations_type_defs,\n        auth_queries_type_defs,\n        type_defs,\n    ]\n    schema = make_executable_schema([*type_defs_list], [auth_mutations, auth_query, query])\n\n\nCreate user\n*************\n\nUser creation is based on BaseUserManager and it manages if you override the USERNAME_FIELD of the user model to use the email field for authentication and login.\n\nSocial login\n*************\n\nWe have the endpoints available to use the `social-app-django <https://github.com/python-social-auth/social-app-django>`_ so read their doc to use it.\n\n\nRecover user password\n**********************\n\nBy default, email sent to recover user password has a link to 's/accounts/reset'. The easiest way of handle this is to use the django admin views but you can overwrite the REMEMBER_PASSWORD_URL to send to another location.\nIf you want to use the default  link you have to add admin views to your project:\n\nadd to your settings::\n\n    REMEMBER_PASSWORD_URL = 'front-endpoint'\n\n\nadd to your views::\n\n    path('accounts/', include('django.contrib.auth.urls')),\n\nIf you handle de remember password in your frontend, you can use the reset-password endpoint.\n\nOverwrite emails\n*****************\n\nYou can overwrite emails templates adding new templates to your project::\n\n\n    - project_name/\n        - project_name/\n        - templates/\n            emails/\n                password_recovery/\n                    email.html\n                    subject.txt\n          manage.py\n\n\nOverwrite Me fields\n********************\n\nYou can overwrite default fields that the rest and graphql endpoint returns for an authenticated user updating the ME_FIELDS settings::\n\n    ME_FIELDS = (\"id\", \"email\",)\n\n\nthis feature can't be implemented for ariadne because of the schema first approach.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrmilu/django-simple-api-auth-example",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simple-api-auth",
    "package_url": "https://pypi.org/project/django-simple-api-auth/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-simple-api-auth/",
    "project_urls": {
      "Homepage": "https://github.com/mrmilu/django-simple-api-auth-example"
    },
    "release_url": "https://pypi.org/project/django-simple-api-auth/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Django Simple Api Auth is a Django app to help developers with the Session auth of a rest or graphql api in Django.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11766827,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7574d3edac5d59c75045dbfc9faae4b262589bfcba23ef2998a065f57b2d71d7",
          "md5": "d2f6e10b63e45aca1bb115a669371292",
          "sha256": "bac867600ba7751a39cd547ddb53663af7187d1dcb204a552a54aa9051f6dd67"
        },
        "downloads": -1,
        "filename": "django_simple_api_auth-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2f6e10b63e45aca1bb115a669371292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14804,
        "upload_time": "2021-07-06T15:22:50",
        "upload_time_iso_8601": "2021-07-06T15:22:50.214948Z",
        "url": "https://files.pythonhosted.org/packages/75/74/d3edac5d59c75045dbfc9faae4b262589bfcba23ef2998a065f57b2d71d7/django_simple_api_auth-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "146a41828c790cbf05af68301d19708f210580e5700d81e913eee47bbcd22b7d",
          "md5": "e87e9a43773c47863855049ffb8e93db",
          "sha256": "926333fa464e4d5ec93eb3ed2c811aad588ca759b2496b7f2a43c35d1116ca8b"
        },
        "downloads": -1,
        "filename": "django_simple_api_auth-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e87e9a43773c47863855049ffb8e93db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 33296,
        "upload_time": "2021-10-19T08:26:23",
        "upload_time_iso_8601": "2021-10-19T08:26:23.364554Z",
        "url": "https://files.pythonhosted.org/packages/14/6a/41828c790cbf05af68301d19708f210580e5700d81e913eee47bbcd22b7d/django_simple_api_auth-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "146a41828c790cbf05af68301d19708f210580e5700d81e913eee47bbcd22b7d",
        "md5": "e87e9a43773c47863855049ffb8e93db",
        "sha256": "926333fa464e4d5ec93eb3ed2c811aad588ca759b2496b7f2a43c35d1116ca8b"
      },
      "downloads": -1,
      "filename": "django_simple_api_auth-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e87e9a43773c47863855049ffb8e93db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 33296,
      "upload_time": "2021-10-19T08:26:23",
      "upload_time_iso_8601": "2021-10-19T08:26:23.364554Z",
      "url": "https://files.pythonhosted.org/packages/14/6a/41828c790cbf05af68301d19708f210580e5700d81e913eee47bbcd22b7d/django_simple_api_auth-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}