{
  "info": {
    "author": "nielstron",
    "author_email": "n.muendler@web.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Compilers"
    ],
    "description": "\n<div align=\"center\">\n\n<img  src=\"https://raw.githubusercontent.com/OpShin/opshin/master/opshin.png\" width=\"240\" />\n<h1 style=\"text-align: center;\">opshin</h1></br>\n\n\n<a href=\"https://app.travis-ci.com/OpShin/opshin\"><img alt=\"Build Status\" src=\"https://app.travis-ci.com/OpShin/opshin.svg?branch=master\"/></a>\n<a href=\"https://pypi.org/project/opshin/\"><img alt=\"PyPI version\" src=\"https://badge.fury.io/py/opshin.svg\"/></a>\n<img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/opshin.svg\" />\n<a href=\"https://pypi.org/project/opshin/\"><img alt=\"PyPI - Status\" src=\"https://img.shields.io/pypi/status/opshin.svg\" /></a>\n<a href=\"https://coveralls.io/github/OpShin/opshin?branch=master\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/OpShin/opshin/badge.svg?branch=master\" /></a>\n\n</div>\n\n> You are building what you want. Why not also build **how** you want?\n\nThis is an implementation of smart contracts for Cardano which are written in a strict subset of valid Python.\nThe general philosophy of this project is to write a compiler that \nensure the following:\n\nIf the program compiles then:\n\n1. it is a valid Python program\n2. the output running it with python is the same as running it on-chain.\n\n### Why opshin?\n- 100% valid Python. Leverage the existing tool stack for Python, syntax highlighting, linting, debugging, unit-testing, [property-based testing](https://hypothesis.readthedocs.io/), [verification](https://github.com/marcoeilers/nagini)\n- Intuitive. Just like Python.\n- Flexible. Imperative, functional, the way you want it.\n- Efficient & Secure. Static type inference ensures strict typing and optimized code\n\n\n### Getting Started\n\n#### OpShin Pioneer Program\n\nCheck out the [opshin-pioneer-program](\nhttps://github.com/OpShin/opshin-pioneer-program) for a host of educational example contracts, test cases and off-chain code.\n\n#### Example repository\n\nCheck out the [opshin-starter-kit](\nhttps://github.com/OpShin/opshin-starter-kit) repository for a quick start in setting up a development environment\nand compiling some sample contracts yourself.\n\n\nYou can replace the contracts in your local copy of the repository with code from the\n`examples` section here to start exploring different contracts.\n\n#### Developer Community and Questions\n\nThis repository contains a discussions page.\nFeel free to open up a new discussion with questions regarding development using opshin and using certain features.\nOthers may be able to help you and will also benefit from the previously shared questions.\n\nCheck out the community [here](https://github.com/OpShin/opshin/discussions)\n\nYou can also chat with other developers [in the welcoming discord\ncommunity](https://discord.gg/umR3A2g4uw) of OpShin\n\n#### Installation\n\nInstall Python 3.8, 3.9 or 3.10. Then run\n\n```bash\npython3 -m pip install opshin\n```\n\n#### Writing a Smart Contract\n\nA short non-complete introduction in starting to write smart contracts follows.\n\n1. Make sure you understand EUTxOs, Addresses, Validators etc on Cardano. [There is a wonderful crashcourse by @KtorZ](https://aiken-lang.org/fundamentals/eutxo). The contract will work on these concepts\n2. Make sure you understand python. opshin works like python and uses python. There are tons of tutorials for python, choose what suits you best.\n3. Make sure your contract is valid python and the types check out. Write simple contracts first and run them using `opshin eval` to get a feeling for how they work.\n4. Make sure your contract is valid opshin code. Run `opshin compile` and look at the compiler erros for guidance along what works and doesn't work and why.\n5. Dig into the [`examples`](https://github.com/OpShin/opshin/tree/master/examples) to understand common patterns. Check out the [`prelude`](https://opshin.opshin.dev/opshin/prelude.html) for understanding how the Script Context is structured and how complex datums are defined.\n6. Check out the [sample repository](https://github.com/OpShin/opshin-starter-kit) to find a sample setup for developing your own contract.\n\n\nIn summary, a smart contract in opshin is defined by the function `validator` in your contract file.\nThe function validates that a specific value can be spent, minted, burned, withdrawn etc, depending\non where it is invoked/used as a credential.\nIf the function fails (i.e. raises an error of any kind such as a `KeyError` or `AssertionError`)\nthe validation is denied, and the funds can not be spent, minted, burned etc.\n\n> There is a subtle difference here in comparison to most other Smart Contract languages.\n> In opshin a validator may return anything (in particular also `False`) - as long as it does not fail, the execution is considered valid.\n> This is more similar to how contracts in Solidity always pass, unless they run out of gas or hit an error.\n> So make sure to `assert` what you want to ensure to hold for validation!\n\nA simple contract called the \"Gift Contract\" verifies that only specific wallets can withdraw money.\nThey are authenticated by a signature.\nIf you don't understand what a pubkeyhash is and how this validates anything, check out [this gentle introduction into Cardanos EUTxO](https://aiken-lang.org/fundamentals/eutxo).\nAlso see the [tutorial by `pycardano`](https://pycardano.readthedocs.io/en/latest/guides/plutus.html) for explanations on what each of the parameters to the validator means\nand how to build transactions with the contract.\n\n```python3\nfrom opshin.prelude import *\n\n\n@dataclass()\nclass CancelDatum(PlutusData):\n    pubkeyhash: bytes\n\n\ndef validator(datum: CancelDatum, redeemer: None, context: ScriptContext) -> None:\n    sig_present = False\n    for s in context.tx_info.signatories:\n        if datum.pubkeyhash == s:\n            sig_present = True\n    assert sig_present, \"Required signature missing\"\n```\n\nAll contracts written in opshin are 100% valid python.\nMinting policies expect only a redeemer and script context as argument.\nCheck out the [Architecture guide](https://github.com/OpShin/opshin/blob/master/ARCHITECTURE.md#minting-policy---spending-validator-double-function)\nfor details on how to write double functioning contracts.\nThe [`examples`](https://github.com/OpShin/opshin/blob/master/examples) folder contains more examples.\nAlso check out the [opshin-pioneer-program](\nhttps://github.com/OpShin/opshin-pioneer-program)\n and [opshin-starter-kit](\nhttps://github.com/OpShin/opshin-starter-kit) repo.\n\n### Compiling\n\nWrite your program in python. You may start with the content of `examples`.\nArguments to scripts are passed in as Plutus Data objects in JSON notation.\n\nYou can run any of the following commands\n```bash\n# Evaluate script in Python - this can be used to make sure there are no obvious errors\nopshin eval examples/smart_contracts/assert_sum.py \"{\\\"int\\\": 4}\" \"{\\\"int\\\": 38}\" \"{\\\"constructor\\\": 0, \\\"fields\\\": []}\"\n\n# Compile script to 'uplc', the Cardano Smart Contract assembly\nopshin compile examples/smart_contracts/assert_sum.py\n```\n\n### Deploying\n\nThe deploy process generates all artifacts required for usage with common libraries like [pycardano](https://github.com/Python-Cardano/pycardano), [lucid](https://github.com/spacebudz/lucid) and the [cardano-cli](https://github.com/input-output-hk/cardano-node).\n\n```bash\n# Automatically generate all artifacts needed for using this contract\nopshin build examples/smart_contracts/assert_sum.py\n```\n\nSee the [tutorial by `pycardano`](https://pycardano.readthedocs.io/en/latest/guides/plutus.html) for explanations how to build transactions with `opshin` contracts.\n\n### The small print\n\n_Not every valid python program is a valid smart contract_.\nNot all language features of python will or can be supported.\nThe reasons are mainly of practical nature (i.e. we can't infer types when functions like `eval` are allowed).\nSpecifically, only a pure subset of python is allowed.\nFurther, only immutable objects may be generated.\n\nFor your program to be accepted, make sure to only make use of language constructs supported by the compiler.\nYou will be notified of which constructs are not supported when trying to compile.\n\n### Name\n\n> Eopsin (Korean: 업신; Hanja: 業神) is the goddess of the storage and wealth in Korean mythology and shamanism. \n> [...] Eopsin was believed to be a pitch-black snake that had ears. [[1]](https://en.wikipedia.org/wiki/Eopsin)\n\nSince this project tries to merge Python (a large serpent) and Pluto/Plutus (Greek wealth gods), the name appears fitting.\nThe name e_opsin is pronounced _op-shin_.\ne\n\n## Contributing\n\n### Architecture\n\nThis program consists of a few independent components:\n\n1. An aggressive static type inferencer\n2. Rewriting tools to simplify complex python expressions\n3. A compiler from a subset of python into UPLC\n\n### Debugging artefacts\n\nFor debugging purposes, you can also run\n\n```bash\n# Compile script to 'uplc', and evaluate the script in UPLC (for debugging purposes)\nopshin eval_uplc examples/smart_contracts/assert_sum.py \"{\\\"int\\\": 4}\" \"{\\\"int\\\": 38}\" \"{\\\"constructor\\\": 0, \\\"fields\\\": []}\"\n\n# Compile script to 'pluto', an intermediate language (for debugging purposes)\nopshin compile_pluto examples/smart_contracts/assert_sum.py\n```\n\n### Sponsoring\n\nYou can sponsor the development of opshin through GitHub or [Teiki](https://alpha.teiki.network/projects/opshin) or just by sending ADA. Drop me a message on social media and let me know what it is for.\n\n- **[Teiki](https://alpha.teiki.network/projects/opshin)** Stake your ada to support OpShin at [Teiki](https://alpha.teiki.network/projects/opshin)\n- **GitHub** Sponsor the developers of this project through the button \"Sponsor\" next to them\n- **ADA** Donation in ADA can be submitted to `$opshin` or `addr1qyz3vgd5xxevjy2rvqevz9n7n7dney8n6hqggp23479fm6vwpj9clsvsf85cd4xc59zjztr5zwpummwckmzr2myjwjns74lhmr`.\n\n### Supporters\n\n<a href=\"https://github.com/inversion-dev\"><img src=\"https://avatars.githubusercontent.com/u/127298233?s=200&v=4\" width=\"50\"></a>\n<a href=\"https://github.com/MuesliSwapTeam/\"><img  src=\"https://avatars.githubusercontent.com/u/91151317?v=4\" width=\"50\" /></a>\n<a href=\"https://github.com/AadaFinance/\"><img  src=\"https://avatars.githubusercontent.com/u/89693711?v=4\" width=\"50\" /></a>\n\nThe main sponsor of this project is [Inversion](https://inversion.dev/cardano/). Here is a word from them!\n\n> At Inversion, we pride ourselves on our passion for life and our ability to create exceptional software solutions for our clients. Our team of experts, with over a century of cumulative experience, is dedicated to harnessing the power of the Cardano blockchain to bring innovative and scalable decentralized applications to life. We've successfully built applications for NFT management, staking and delegation, chain data monitoring, analytics, and web3 integrations, as well as countless non-blockchain systems. With a focus on security, transparency, and sustainability, our team is excited to contribute to the Cardano ecosystem, pushing the boundaries of decentralized technologies to improve lives worldwide. Trust Inversion to be your go-to partner for robust, effective, and forward-thinking solutions, whether blockchain based, traditional systems, or a mix of the two.\n\nThey have recently started a podcast, called \"Africa On Chain\", which you can check out here:\nhttps://www.youtube.com/@africaonchain",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/opshin/opshin",
    "keywords": "python,language,programming-language,compiler,validator,smart-contracts,cardano",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opshin",
    "package_url": "https://pypi.org/project/opshin/",
    "platform": null,
    "project_url": "https://pypi.org/project/opshin/",
    "project_urls": {
      "Documentation": "https://opshin.opshin.dev/",
      "Homepage": "https://github.com/opshin/opshin",
      "Repository": "https://github.com/opshin/opshin"
    },
    "release_url": "https://pypi.org/project/opshin/0.11.0/",
    "requires_dist": [
      "uplc (==0.6.0)",
      "pluthon (==0.3.2)",
      "pycardano (==0.7.2)",
      "frozenlist (==1.3.3)"
    ],
    "requires_python": ">=3.8,<3.12",
    "summary": "A simple pythonic programming language for Smart Contracts on Cardano",
    "version": "0.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17453085,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8ff3b0d9ade8434bb7881c9631cfe19b2f70f804d5a7b19516e5aadf4214673",
          "md5": "1fddffda88048a8615f48608b088a01d",
          "sha256": "3e7cd9eff03226b55cdec34352e198338ec706a53201b8496bc5349f9e851cde"
        },
        "downloads": -1,
        "filename": "opshin-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fddffda88048a8615f48608b088a01d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 59573,
        "upload_time": "2023-03-22T16:48:02",
        "upload_time_iso_8601": "2023-03-22T16:48:02.796173Z",
        "url": "https://files.pythonhosted.org/packages/b8/ff/3b0d9ade8434bb7881c9631cfe19b2f70f804d5a7b19516e5aadf4214673/opshin-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "915b37906fe340f47216a805b31f8f7cb788c1c6d4b1fffc8bb167045352b1d1",
          "md5": "5536d16814e1df41f778e831ff7a13bf",
          "sha256": "d18d2fd5ad68a6d347cb022699cdd999206ca82c97444c36af239aa13a5376a8"
        },
        "downloads": -1,
        "filename": "opshin-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5536d16814e1df41f778e831ff7a13bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 51734,
        "upload_time": "2023-03-22T16:48:04",
        "upload_time_iso_8601": "2023-03-22T16:48:04.410819Z",
        "url": "https://files.pythonhosted.org/packages/91/5b/37906fe340f47216a805b31f8f7cb788c1c6d4b1fffc8bb167045352b1d1/opshin-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af8b3e9a99e0c296abc00efc69e40e6a0ca4c323981cf20dba6d39e17099d352",
          "md5": "363ba37097f0ae0dd3ad1e6c5b990a9f",
          "sha256": "0af5dbe437c2213457090d96654fff526b9ee7eb16b22eddbb79bed82b92e621"
        },
        "downloads": -1,
        "filename": "opshin-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "363ba37097f0ae0dd3ad1e6c5b990a9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.12",
        "size": 59561,
        "upload_time": "2023-03-26T21:42:31",
        "upload_time_iso_8601": "2023-03-26T21:42:31.631629Z",
        "url": "https://files.pythonhosted.org/packages/af/8b/3e9a99e0c296abc00efc69e40e6a0ca4c323981cf20dba6d39e17099d352/opshin-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6693f7d2579c4df1976831d237409de49f04c56baa0bac5b1367ba62c8791547",
          "md5": "64ecc5d8bfea4561268282cbc8b18ac9",
          "sha256": "b98d2af489a82a0c2d74797651559774142151faae5429b6a3a1190079b911c8"
        },
        "downloads": -1,
        "filename": "opshin-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64ecc5d8bfea4561268282cbc8b18ac9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.12",
        "size": 51751,
        "upload_time": "2023-03-26T21:42:33",
        "upload_time_iso_8601": "2023-03-26T21:42:33.287766Z",
        "url": "https://files.pythonhosted.org/packages/66/93/f7d2579c4df1976831d237409de49f04c56baa0bac5b1367ba62c8791547/opshin-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "550832a7b314cd1c3b2f0a753a718de77ddd5d2209e127da9a7e11a67093fa9c",
          "md5": "eb255c3224679a818e08139bfe64eccb",
          "sha256": "8b6f26097dd6076f027a5292016700cce96c6d72658c8411dfce2636420b8221"
        },
        "downloads": -1,
        "filename": "opshin-0.9.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb255c3224679a818e08139bfe64eccb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.9",
        "size": 56965,
        "upload_time": "2023-03-18T18:13:01",
        "upload_time_iso_8601": "2023-03-18T18:13:01.442246Z",
        "url": "https://files.pythonhosted.org/packages/55/08/32a7b314cd1c3b2f0a753a718de77ddd5d2209e127da9a7e11a67093fa9c/opshin-0.9.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "818232e035370237320c42af239ddc75c8bb4d6ab45c18e7b371e116751836ff",
          "md5": "a8397ad57d16bb62ee3acf1ad4ac39ed",
          "sha256": "a9b3cd1e1d9cb293fa637cf338ad285e389a1c29096824fe8289580239e3bf1d"
        },
        "downloads": -1,
        "filename": "opshin-0.9.12.tar.gz",
        "has_sig": false,
        "md5_digest": "a8397ad57d16bb62ee3acf1ad4ac39ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.9",
        "size": 49816,
        "upload_time": "2023-03-18T18:13:04",
        "upload_time_iso_8601": "2023-03-18T18:13:04.263403Z",
        "url": "https://files.pythonhosted.org/packages/81/82/32e035370237320c42af239ddc75c8bb4d6ab45c18e7b371e116751836ff/opshin-0.9.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a70b612d7322a9ea846dd7cb081728fc627ff108cd64b00f069e6bdece13899",
          "md5": "a31d1c4732eabf2eff0d9621bac2b15e",
          "sha256": "0b6ac851f223021486e8ed65146059af50f6b78402517637baa493b717c3c2b2"
        },
        "downloads": -1,
        "filename": "opshin-0.9.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a31d1c4732eabf2eff0d9621bac2b15e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.9",
        "size": 56961,
        "upload_time": "2023-03-18T18:22:29",
        "upload_time_iso_8601": "2023-03-18T18:22:29.617045Z",
        "url": "https://files.pythonhosted.org/packages/0a/70/b612d7322a9ea846dd7cb081728fc627ff108cd64b00f069e6bdece13899/opshin-0.9.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26bb11a087c6fe472e114e8a3047a890ffcd4684a0ec8859ef569fbfc6b68153",
          "md5": "24e6657bb23154bba8753f8584f4401f",
          "sha256": "45a1ba6a359efde3fd4dc4cc39926b5f5ea425664341fc688561ed6e7b37797a"
        },
        "downloads": -1,
        "filename": "opshin-0.9.13.tar.gz",
        "has_sig": false,
        "md5_digest": "24e6657bb23154bba8753f8584f4401f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.9",
        "size": 49470,
        "upload_time": "2023-03-18T18:22:31",
        "upload_time_iso_8601": "2023-03-18T18:22:31.456317Z",
        "url": "https://files.pythonhosted.org/packages/26/bb/11a087c6fe472e114e8a3047a890ffcd4684a0ec8859ef569fbfc6b68153/opshin-0.9.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "668e34b1df0591e4fe6c9edf393a69e1953c8f9d2a7fb64dbfc2ac269ac905a0",
          "md5": "21584ef6b5fa1b067f8452766be2ad38",
          "sha256": "5ed953ef803de9a85a74cb75c06d4ea25b318b144ad968ebe13549405a1a45c9"
        },
        "downloads": -1,
        "filename": "opshin-0.9.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21584ef6b5fa1b067f8452766be2ad38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.9",
        "size": 56966,
        "upload_time": "2023-03-18T21:55:06",
        "upload_time_iso_8601": "2023-03-18T21:55:06.448934Z",
        "url": "https://files.pythonhosted.org/packages/66/8e/34b1df0591e4fe6c9edf393a69e1953c8f9d2a7fb64dbfc2ac269ac905a0/opshin-0.9.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac8f230fda1102c884b7ed406b6fa48643d7b0826e924f753db71c59de2fd65f",
          "md5": "a77694f8f4d8b06c3d5187105f4b77c8",
          "sha256": "a208cfc9a907a79a20f42d0f27fd21fba412e6b1a4b25ba30960e6aa8906eea7"
        },
        "downloads": -1,
        "filename": "opshin-0.9.14.tar.gz",
        "has_sig": false,
        "md5_digest": "a77694f8f4d8b06c3d5187105f4b77c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.9",
        "size": 49500,
        "upload_time": "2023-03-18T21:55:08",
        "upload_time_iso_8601": "2023-03-18T21:55:08.320146Z",
        "url": "https://files.pythonhosted.org/packages/ac/8f/230fda1102c884b7ed406b6fa48643d7b0826e924f753db71c59de2fd65f/opshin-0.9.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "907d3c56af9c1d9110f74c74e03f49e7dcf706bc6e6bf9088169a425709192df",
          "md5": "d73cc22c44c92609792e10ded2f7da9c",
          "sha256": "9a0c84381caa8c26e53afbc0709f2a5bbc5a12982bba4c27ed31cf6290319333"
        },
        "downloads": -1,
        "filename": "opshin-0.9.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d73cc22c44c92609792e10ded2f7da9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.9",
        "size": 58668,
        "upload_time": "2023-03-20T15:59:40",
        "upload_time_iso_8601": "2023-03-20T15:59:40.578973Z",
        "url": "https://files.pythonhosted.org/packages/90/7d/3c56af9c1d9110f74c74e03f49e7dcf706bc6e6bf9088169a425709192df/opshin-0.9.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8527589ead27cf5b537b46af189eb5765afcf156edecbd7075c43b3d788048ac",
          "md5": "7a0842803c0ddb4a93bbbf5b84096b03",
          "sha256": "01d6f464f0658cea63f16c7d4badd4ae32d7cc318870f4bb17d033ba1845fe91"
        },
        "downloads": -1,
        "filename": "opshin-0.9.15.tar.gz",
        "has_sig": false,
        "md5_digest": "7a0842803c0ddb4a93bbbf5b84096b03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.9",
        "size": 50589,
        "upload_time": "2023-03-20T15:59:41",
        "upload_time_iso_8601": "2023-03-20T15:59:41.805880Z",
        "url": "https://files.pythonhosted.org/packages/85/27/589ead27cf5b537b46af189eb5765afcf156edecbd7075c43b3d788048ac/opshin-0.9.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af8b3e9a99e0c296abc00efc69e40e6a0ca4c323981cf20dba6d39e17099d352",
        "md5": "363ba37097f0ae0dd3ad1e6c5b990a9f",
        "sha256": "0af5dbe437c2213457090d96654fff526b9ee7eb16b22eddbb79bed82b92e621"
      },
      "downloads": -1,
      "filename": "opshin-0.11.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "363ba37097f0ae0dd3ad1e6c5b990a9f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<3.12",
      "size": 59561,
      "upload_time": "2023-03-26T21:42:31",
      "upload_time_iso_8601": "2023-03-26T21:42:31.631629Z",
      "url": "https://files.pythonhosted.org/packages/af/8b/3e9a99e0c296abc00efc69e40e6a0ca4c323981cf20dba6d39e17099d352/opshin-0.11.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6693f7d2579c4df1976831d237409de49f04c56baa0bac5b1367ba62c8791547",
        "md5": "64ecc5d8bfea4561268282cbc8b18ac9",
        "sha256": "b98d2af489a82a0c2d74797651559774142151faae5429b6a3a1190079b911c8"
      },
      "downloads": -1,
      "filename": "opshin-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "64ecc5d8bfea4561268282cbc8b18ac9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<3.12",
      "size": 51751,
      "upload_time": "2023-03-26T21:42:33",
      "upload_time_iso_8601": "2023-03-26T21:42:33.287766Z",
      "url": "https://files.pythonhosted.org/packages/66/93/f7d2579c4df1976831d237409de49f04c56baa0bac5b1367ba62c8791547/opshin-0.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}