{
  "info": {
    "author": "Zhen Lin",
    "author_email": "zhenlin4@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# Installation\n\n`pip install .`\n\n**By default, a folder called `.persist_to_disk` is created under your home directory, and will be used to store cache files.**\nIf you want to change it, see \"Global Settings\" below.\n\n# Global Settings\n\nTo set global settings (for example, where the cache should go by default), please do the following:\n\n```\nimport persist_to_disk as ptd\nptd.config.generate_config()\n```\nThen, you could (optionally) change the settings in the generated `config.ini`:\n\n1. `persist_path`: where to store the cache.\n    All projects you have on this machine will have a folder under `persist_path` by default, unless you specify it within the project (See examples below).\n2. `hashsize`: How many hash buckets to use to store each function's outputs. Default=500.\n3. `lock_granularity`:\n    How granular the lock is.\n    This could be `call`, `func` or `global`.\n\n    * `call` means each hash bucket will have one lock, so only only processes trying to write/read to/from the same hash bucket will share the same lock.\n    * `func` means each function will have one lock, so if you have many processes calling the same function they will all be using the same lock.\n    * `global` all processes share the same lock (I tested that it's OK to have nested mechanism on Unix).\n\n\n# Quick Start\n\n### Basic Example\nUsing `persist_to_disk` is very easy.\nFor example, if you want to write a general training function:\n```\nimport torch \n\n@ptd.persistf()\ndef train_a_model(dataset, model_cls, lr, epochs, device='cpu'):\n    ...\n    return trained_model_or_key\n\nif __name__ == '__main__':\n    train_a_model('MNIST', torch.nn.Linear, 1e-3, 30)\n```\n\nSuppose the above is in a file with path `~/project_name/pipeline/train.py`. \nIf we are in `~/project_name` and run `python -m pipeline.train`, a cache folder will be created under `PERSIST_PATH`, like the following:\n```\nPERSIST_PATH(=ptd.config.get_persist_path())\n├── project_name-[autoid]\n│   ├── pipeline\n│   │   ├── train\n│   │   │   ├── train_a_model\n│   │   │   │   ├──[hashed_bucket].pkl\n```\nNote that in the above, `[autoid]` is a auto-generated id. \n`[hashed_bucket]` will be an int in [0, `hashsize`).\n\n### Multiprocessing\nNote that `ptd.persistf` can be used with [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) directly.\n\n\n# Advanced Settings\n\n## `config.set_project_path` and `config.set_persist_path`\n\nThere are two important paths for each workspace/project: `project_path` and `persist_path`. \nYou could set them by calling `ptd.config.set_project_path` and `ptd.config.set_persist_path`.\n\nOn a high level, `persist_path` determines *where* the results are cached/persisted, and `project_path` determines the structure of the cache file tree.\nFollowing the basic example, `ptd.config.persist_path(PERSIST_PATH)` will only change the root directory. \nOn the other hand, supppose we add a line of `ptd.config.set_project_path(\"./pipeline\")` to `train.py` and run it again, the new file structure will be created under `PERSIST_PATH`, like the following:\n```\nPERSIST_PATH(=ptd.config.get_persist_path())\n├── pipeline-[autoid]\n│   ├── train\n│   │   ├── train_a_model\n│   │   │   ├──[hashed_bucket].pkl\n```\n\nAlternatively, it is also possible that we store some notebooks under `~/project_name/notebook/`. \nIn this case, we could set the `project_path` back to `~/project_name`.\nYou could check the mapping from projects to autoids in `~/.persist_to_disk/project_to_pids.txt`.\n\n\n\n## Additional Parameters\n`persist` take additional arguments.\nFor example, consider the new function below:\n```\n@ptd.persistf(groupby=['dataset', 'epochs'], expand_dict_kwargs=['model_kwargs'], skip_kwargs=['device'])\ndef train_a_model(dataset, model_cls, model_kwargs, lr, epochs, device='cpu'):\n    model = model_cls(**model_kwargs)\n    model.to(device)\n    ... # train the model\n    model.save(path)\n    return path\n```\nThe kwargs we passed to `persistf` has the following effects:\n\n* `groupby`: We will create more intermediate directories basing on what's in `groupby`. \nIn the example above, the new cache structure will look like\n```\nPERSIST_PATH(=ptd.config.get_persist_path())\n├── project_name-[autoid]\n│   ├── pipeline\n│   │   ├── train\n│   │   │   ├── train_a_model\n│   │   │   │   ├── MNIST\n│   │   │   │   │   ├── 20\n│   │   │   │   │   │   ├──[hashed_bucket].pkl\n│   │   │   │   │   ├── 10\n│   │   │   │   │   │   ├──[hashed_bucket].pkl\n│   │   │   │   ├── CIFAR10\n│   │   │   │   │   ├── 30\n│   │   │   │   │   │   ├──[hashed_bucket].pkl\n```\n\n* `expand_dict_kwargs`: This simply allows the dictionary to be passed in.\nThis is because we cannot hash a dictionary directly, so there are additionally preprocessing steps for these arguments within `ptd`. \nNote that you can also set `expand_dict_kwargs='all'` to avoid specifying individual dictionary arguements.\nHowever, please only do so IF YOU KNOW what you are passing in - a very big nested dictionary can make the cache-retrievement very slow and use a lot of disk space unnecessarily.\n\n* `skip_kwargs`: This specifies arguments that will be *ignored*. \nFor examplte, if we call `train_a_model(..., device='cpu')` and `train_a_model(..., device='cuda:0')`, the second run will simply read the cache, as `device` is ignored. \n\n### Other useful parameters:\n* `hash_size`: Defaults to 500. \nIf a function has a lot of cache files, you can also increase this if necessary to reduce the number of `.pkl` files on disk.\n\n## 0.0.4\n==================\n1. Changed the behavior of `switch_kwarg`. Now, this is not considered an input to the wrapped function. For example, the correct usage is\n    ```\n    @ptd.persistf(switch_kwarg='switch')\n    def func1(a=1):\n        print(1)\n    func1(a=1, switch=ptd.NOCACHE)\n    ```\n    Note how `switch` is not an argument of `func1`.\n2. Fix the path inference step, which now finds the absolute paths for `project_path` or `file_path` (the path to the file contaning the function) before inferencing the structure.\n\n## 0.0.3\n==================\n\n1. Added `set_project_path` to config.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zlin7/python-persist_to_disk",
    "keywords": "Cache,Persist",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "persist-to-disk",
    "package_url": "https://pypi.org/project/persist-to-disk/",
    "platform": null,
    "project_url": "https://pypi.org/project/persist-to-disk/",
    "project_urls": {
      "Homepage": "https://github.com/zlin7/python-persist_to_disk"
    },
    "release_url": "https://pypi.org/project/persist-to-disk/0.0.4/",
    "requires_dist": [
      "filelock (==3.9.0)"
    ],
    "requires_python": "",
    "summary": "Persist expensive operations on disk.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17203144,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59736d9f69c5c21f6e4db58a0d8fb0fb87d0767aee6c86c0ee243c2fbc04230f",
          "md5": "71f03476b5222a7c3e55250177f3588e",
          "sha256": "3f7ccd2ac81547468eb96cb084ceeae99eded1cb435c4645ca41daf35c75e5b4"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71f03476b5222a7c3e55250177f3588e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10679,
        "upload_time": "2023-02-06T05:39:29",
        "upload_time_iso_8601": "2023-02-06T05:39:29.733356Z",
        "url": "https://files.pythonhosted.org/packages/59/73/6d9f69c5c21f6e4db58a0d8fb0fb87d0767aee6c86c0ee243c2fbc04230f/persist_to_disk-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f40cb6b91a480c848623a181f8996dc4c552c0d77c60e588661b0ca6539ef5b0",
          "md5": "95e57525cf2a492dba735b42b6db1924",
          "sha256": "92916211a9e5304798b95bc40ade5dc31a1db344468e8c6fc189775b5f7bffb1"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95e57525cf2a492dba735b42b6db1924",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9467,
        "upload_time": "2023-02-06T05:39:31",
        "upload_time_iso_8601": "2023-02-06T05:39:31.703238Z",
        "url": "https://files.pythonhosted.org/packages/f4/0c/b6b91a480c848623a181f8996dc4c552c0d77c60e588661b0ca6539ef5b0/persist_to_disk-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a2b1320fe70bdd4c30967d7e07504e64d0b59900f4db8fb8dd0f47438c1e0f1",
          "md5": "37e2dded1ecfe555358feefde554f7a4",
          "sha256": "510638139c97b935997604d0618c70d2f8e1b036b7d9fbc1e824ed263a8c587f"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37e2dded1ecfe555358feefde554f7a4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12069,
        "upload_time": "2023-02-08T00:38:45",
        "upload_time_iso_8601": "2023-02-08T00:38:45.845304Z",
        "url": "https://files.pythonhosted.org/packages/0a/2b/1320fe70bdd4c30967d7e07504e64d0b59900f4db8fb8dd0f47438c1e0f1/persist_to_disk-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef4e31e6ad4c823195917d779de33ef5e61d108219757ef5fed9d0cd1860e56d",
          "md5": "4b897252c3ee6425ba9d207bfc2cbe6c",
          "sha256": "d42c98f5a1a0be7b50e957b4e80eb3f8025d4702929ee198dbae24c033f62641"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4b897252c3ee6425ba9d207bfc2cbe6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11099,
        "upload_time": "2023-02-08T00:38:47",
        "upload_time_iso_8601": "2023-02-08T00:38:47.197046Z",
        "url": "https://files.pythonhosted.org/packages/ef/4e/31e6ad4c823195917d779de33ef5e61d108219757ef5fed9d0cd1860e56d/persist_to_disk-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0070c7966eb9402d985298e76cef7658329b40b8803254d501d452f39e9f7f20",
          "md5": "0259f212f27df77f62da29aed573647a",
          "sha256": "dade6964f897e42e1f532d7455c0234daa94875b5000e1c9f6d62cdaa5a1d8ce"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0259f212f27df77f62da29aed573647a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15153,
        "upload_time": "2023-02-14T18:44:52",
        "upload_time_iso_8601": "2023-02-14T18:44:52.498811Z",
        "url": "https://files.pythonhosted.org/packages/00/70/c7966eb9402d985298e76cef7658329b40b8803254d501d452f39e9f7f20/persist_to_disk-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba6d2913a83bfc68ae98a2c7cdeb79f2b88cbae130f6213e8628a3ca4eeb3f19",
          "md5": "09699145b6456fc8ffc4004c4317fb6a",
          "sha256": "229c54faa715ec3a216cc0e7e03dfa34f6822fa467912da899f7b49c67d2af31"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "09699145b6456fc8ffc4004c4317fb6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13208,
        "upload_time": "2023-02-14T18:44:54",
        "upload_time_iso_8601": "2023-02-14T18:44:54.479788Z",
        "url": "https://files.pythonhosted.org/packages/ba/6d/2913a83bfc68ae98a2c7cdeb79f2b88cbae130f6213e8628a3ca4eeb3f19/persist_to_disk-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e9faeb67d36e9046e54725500b52a107b73bdeab8fdeec8e020e4229d991e9",
          "md5": "1828dc7496dadb681ae56cf60be11762",
          "sha256": "2b9537da2f3d4e74ebf0ed34de3a0e2608b86b4a806d8ff80ae8145a4219f270"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1828dc7496dadb681ae56cf60be11762",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15394,
        "upload_time": "2023-03-08T06:27:46",
        "upload_time_iso_8601": "2023-03-08T06:27:46.135507Z",
        "url": "https://files.pythonhosted.org/packages/a3/e9/faeb67d36e9046e54725500b52a107b73bdeab8fdeec8e020e4229d991e9/persist_to_disk-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f10214d4143286cce7ffb1b279fbab0d32748417cc36fcf92e6441ec968e5b7",
          "md5": "e911ffddd7c88a9fe3148dd57d7873be",
          "sha256": "cd5281808ae4f8a365ea3aac351e4a7ef8d8ed3aea32ebdd12e999a944b7d5aa"
        },
        "downloads": -1,
        "filename": "persist_to_disk-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e911ffddd7c88a9fe3148dd57d7873be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13660,
        "upload_time": "2023-03-08T06:27:48",
        "upload_time_iso_8601": "2023-03-08T06:27:48.064759Z",
        "url": "https://files.pythonhosted.org/packages/6f/10/214d4143286cce7ffb1b279fbab0d32748417cc36fcf92e6441ec968e5b7/persist_to_disk-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3e9faeb67d36e9046e54725500b52a107b73bdeab8fdeec8e020e4229d991e9",
        "md5": "1828dc7496dadb681ae56cf60be11762",
        "sha256": "2b9537da2f3d4e74ebf0ed34de3a0e2608b86b4a806d8ff80ae8145a4219f270"
      },
      "downloads": -1,
      "filename": "persist_to_disk-0.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1828dc7496dadb681ae56cf60be11762",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15394,
      "upload_time": "2023-03-08T06:27:46",
      "upload_time_iso_8601": "2023-03-08T06:27:46.135507Z",
      "url": "https://files.pythonhosted.org/packages/a3/e9/faeb67d36e9046e54725500b52a107b73bdeab8fdeec8e020e4229d991e9/persist_to_disk-0.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f10214d4143286cce7ffb1b279fbab0d32748417cc36fcf92e6441ec968e5b7",
        "md5": "e911ffddd7c88a9fe3148dd57d7873be",
        "sha256": "cd5281808ae4f8a365ea3aac351e4a7ef8d8ed3aea32ebdd12e999a944b7d5aa"
      },
      "downloads": -1,
      "filename": "persist_to_disk-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e911ffddd7c88a9fe3148dd57d7873be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13660,
      "upload_time": "2023-03-08T06:27:48",
      "upload_time_iso_8601": "2023-03-08T06:27:48.064759Z",
      "url": "https://files.pythonhosted.org/packages/6f/10/214d4143286cce7ffb1b279fbab0d32748417cc36fcf92e6441ec968e5b7/persist_to_disk-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}