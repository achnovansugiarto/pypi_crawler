{
  "info": {
    "author": "Vincent Russo",
    "author_email": "vincentrusso1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# ![logo](./docs/figures/logo.svg \"logo\") \n\n# QUSTOP\n\n[![build status](http://img.shields.io/travis/vprusso/toqito.svg?style=plastic)](https://travis-ci.org/vprusso/qustop)\n[![doc status](https://readthedocs.org/projects/toqito/badge/?version=latest&style=plastic)](https://qustop.readthedocs.io/en/latest/)\n[![codecov](https://codecov.io/gh/vprusso/toqito/branch/main/graph/badge.svg?style=plastic)](https://codecov.io/gh/vprusso/qustop)\n\n*NOTE*: The `qustop` package is still is under development. \n\nThe `qustop` (QUantum STate OPtimizer) package is a Python toolkit for studying\nvarious quantum state optimization scenarios including calculating optimal\nvalues for quantum state distinguishability, quantum state exclusion, quantum\nstate cloning, and more.\n\n## Applications\n\nThe `qustop` package can be used to:\n\n- Calculate and approximate optimal probabilities of distinguishing quantum\n  states over positive, PPT, and separable measurements with either minimum-error\n  or unambiguously.\n\n- Calculate and approximate optimal probabilities of excluding quantum states\n  with either minimum-error or unambiguously.\n\n## Installation\n\nSee the [installation guide](https://qustop.readthedocs.io/en/latest/getting_started.html).\n\n## Usage\n\nSee the [documentation](https://qustop.readthedocs.io/en/latest/index.html).\n\n## Examples\n\nFor more examples, please consult\n[`qustop/examples`](https://github.com/vprusso/qustop/tree/main/examples/)\nas well as the `qustop` [introductory\ntutorial](https://qustop.readthedocs.io/en/latest/intro_tutorial.html).\n\n### Quantum state distinguishability\n\nFurther examples on quantum state distinguishability can be found in the\n[`qustop/examples/opt_dist`](https://github.com/vprusso/qustop/tree/main/examples/opt_dist)\ndirectory.\n\nConsider the following Bell states:\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;|\\psi_0\\rangle=\\frac{|00\\rangle+|11\\rangle}{\\sqrt{2}},\\quad|\\psi_1\\rangle=\\frac{|01\\rangle+|10\\rangle}{\\sqrt{2}},) \n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;|\\psi_2\\rangle=\\frac{|01\\rangle-|10\\rangle}{\\sqrt{2}},\\quad|\\psi_3\\rangle=\\frac{|00\\rangle-|11\\rangle}{\\sqrt{2}}.) \n\nWe will be using these states to consider a number of applications in the realm\nof quantum state distinguishability.\n\n#### Distinguishing two orthogonal states\n\nA result of [arXiv:0007098](https://arxiv.org/abs/quant-ph/0007098) states that\nany two orthogonal pure states can be distinguished perfectly by LOCC\nmeasurements. As the optimal probability of distinguishing via LOCC\nmeasurements is a lower bound on positive, PPT, separable, etc., we should\nexpect to also see a value of `1` to indicate perfect probability of\ndistinguishing.\n\n```python\nfrom toqito.states import bell\nfrom qustop import State, Ensemble, OptDist\n\ndims = [2, 2]\nstates = [\n    State(bell(0) * bell(0).conj().T, dims),\n    State(bell(1) * bell(1).conj().T, dims)\n]\nprobs = [1/2, 1/2]\nensemble = Ensemble(states, probs)\n\nsep_res = OptDist(ensemble, \"sep\", \"min-error\")\nsep_res.solve()\n\nppt_res = OptDist(ensemble, \"ppt\", \"min-error\")\nppt_res.solve()\n\npos_res = OptDist(ensemble, \"pos\", \"min-error\")\npos_res.solve()\n```\n\nChecking the respective values of the solved instances, we see that all of the\nvalues are equal to one, which indicate that the two pure states are indeed\nperfectly distinguishable under PPT, separable, and positive measurements.\n\n```python\n>>> print(pos_res.value)\n0.9999999999384911\n>>> print(ppt_res.value)\n1.0000000047560667\n>>> print(sep_res.value)\n0.9999999995278338\n```\n\n#### Four indistinguishable orthogonal maximally entangled states\n\nIt was shown in [arXiv:1205.1031](https://arxiv.org/abs/1205.1031) and later\nextended in [arXiv:1307.3232](https://arxiv.org/abs/1307.3232) that for the\nfollowing set of states\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\rho_0=|\\psi_0\\rangle|\\psi_0\\rangle\\langle\\psi_0|\\langle\\psi_0|,\\quad\\rho_1=|\\psi_1\\rangle|\\psi_3\\rangle\\langle\\psi_1|\\langle\\psi_3|,) \n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\rho_2=|\\psi_2\\rangle|\\psi_3\\rangle\\langle\\psi_2|\\langle\\psi_3|,\\quad\\rho_3=|\\psi_3\\rangle|\\psi_3\\rangle\\langle\\psi_3|\\langle\\psi_3|,) \n\nthat the optimal probability of distinguishing via a PPT measurement should\nyield an optimal probability of 7/8.\n\n```python\nimport numpy as np\n\nfrom toqito.states import bell\nfrom qustop import State, Ensemble, OptDist\n\ndims = [2, 2, 2, 2]\nrho_0 = np.kron(bell(0), bell(0)) * np.kron(bell(0), bell(0)).conj().T\nrho_1 = np.kron(bell(2), bell(1)) * np.kron(bell(2), bell(1)).conj().T\nrho_2 = np.kron(bell(3), bell(1)) * np.kron(bell(3), bell(1)).conj().T\nrho_3 = np.kron(bell(1), bell(1)) * np.kron(bell(1), bell(1)).conj().T\n\nensemble = Ensemble([\n    State(rho_0, dims), State(rho_1, dims),\n    State(rho_2, dims), State(rho_3, dims)\n])\n\nsd = OptDist(ensemble, \"ppt\", \"min-error\")\nsd.solve()\n```\n\nIndeed the optimal value obtained via `qustop` is equal to 7/8:\n\n```python\n# 7/8 \\approx 0.875\n>>> print(sd.value)\n0.8749769201568257\n```\n\nIt was also shown in [arXiv:1205.1031](https://arxiv.org/abs/1205.1031) that the optimal\nprobability of distinguishing amongst these same state unambiguously via PPT measurements was\nequal to 3/4.\n\n```python\nsd = OptDist(ensemble, \"ppt\", \"unambiguous\")\nsd.solve()\n\n# 3/4 = 0.75\n>>> print(sd.value)\n0.749999999939434\n```\n\n#### Entanglement cost of distinguishing Bell states\n\nOne may ask whether the ability to distinguish a state can be improved by\nmaking use of an auxiliary resource state.\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;|\\tau_{\\epsilon}\\rangle=\\sqrt{\\frac{1+\\epsilon}{2}}|00\\rangle+\\sqrt{\\frac{1-\\epsilon}{2}}|11\\rangle),\n\nfor some &epsilon; in [0, 1].\n\nIt was shown in [arXiv:1408.6981](https://arxiv.org/abs/1408.6981) that the\nprobability of distinguishing four Bell states with a resource state via PPT\nmeasurements or separable measurements is given by the closed-form expression\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\text{opt}_{\\text{PPT}}(\\eta)=\\text{opt}_{\\text{SEP}}(\\eta)=\\frac{1}{2}\\left(1+\\sqrt{1-\\epsilon^2}\\right)) \n\nwhere the ensemble is defined as\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\eta=\\left\\(|\\psi_0\\rangle\\otimes|\\tau_{\\epsilon}\\rangle,\\quad|\\psi_1\\rangle\\otimes|\\tau_{\\epsilon}\\rangle,\\quad|\\psi_2\\rangle\\otimes|\\tau_{\\epsilon}\\rangle,\\quad|\\psi_3\\rangle\\otimes|\\tau_{\\epsilon}\\rangle\\right\\))\n\n\nUsing `qustop`, we may encode this scenario as follows.\n\n```python\nimport numpy as np\n\nfrom toqito.states import basis, bell\nfrom qustop import State, Ensemble, OptDist\n\n\ne_0, e_1 = basis(2, 0), basis(2, 1)\n\neps = 0.5\ntau = np.sqrt((1 + eps) / 2) * np.kron(e_0, e_0) + np.sqrt((1 - eps) / 2) * np.kron(e_1, e_1)\n\ndims = [2, 2, 2, 2]\nstates = [\n    State(np.kron(bell(0), tau), dims),\n    State(np.kron(bell(1), tau), dims),\n    State(np.kron(bell(2), tau), dims),\n    State(np.kron(bell(3), tau), dims),\n]\nprobs = [1 / 4, 1 / 4, 1 / 4, 1 / 4]\nensemble = Ensemble(states, probs)\n\nsep_res = OptDist(ensemble, \"sep\", \"min-error\")\nsep_res.solve()\n\nppt_res = OptDist(ensemble, \"ppt\", \"min-error\")\nppt_res.solve()\n\neq = 1 / 2 * (1 + np.sqrt(1 - eps ** 2))\n```\n\nNote that when we print out the optimal values for both separable and PPT\nmeasurements that the values obtained agree with the closed form expression.\n\n```python\n>>> print(eq)\n0.9330127018922193\n>>> print(ppt_res.value)\n0.933010488554166\n>>> print(sep_res.value)\n0.9330124607534689\n```\n\nIt was also shown in [arXiv:1408.6981](https://arxiv.org/abs/1408.6981) that\nthe closed-form probability of distinguishing three Bell states with a resource\nstate using separable measurements to be given by the closed-form expression:\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\text{opt}_{\\text{SEP}}(\\eta)=\\frac{1}{3}\\left(2+\\sqrt{1-\\epsilon^2}\\right)) \n\nwhere the ensemble is defined as\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\eta=\\left\\(|\\psi_0\\rangle\\otimes|\\tau_{\\epsilon}\\rangle,\\quad|\\psi_1\\rangle\\otimes|\\tau_{\\epsilon}\\rangle,\\quad|\\psi_2\\rangle\\otimes|\\tau_{\\epsilon}\\rangle\\right\\))\n\nUsing `qustop`, we may encode this scenario as follows.\n\n```python\nimport numpy as np\n\nfrom toqito.states import basis, bell\nfrom qustop import State, Ensemble, OptDist\n\n\ne_0, e_1 = basis(2, 0), basis(2, 1)\n\neps = 0.5\ntau = np.sqrt((1 + eps) / 2) * np.kron(e_0, e_0) + np.sqrt((1 - eps) / 2) * np.kron(e_1, e_1)\n\ndims = [2, 2, 2, 2]\nstates = [\n    State(np.kron(bell(0), tau), dims),\n    State(np.kron(bell(1), tau), dims),\n    State(np.kron(bell(2), tau), dims),\n]\nprobs = [1 / 3, 1 / 3, 1 / 3]\nensemble = Ensemble(states, probs)\n\nsep_res = OptDist(ensemble, \"sep\", \"min-error\", level=2)\nsep_res.solve()\n\neq = 1 / 3 * (2 + np.sqrt(1 - eps**2))\n```\n\nPritning the values of both the closed-form equation and the value obtained via\nthe SDP, we obtain:\n\n```python\n>>> print(sep_res.value)\n0.9583057987150858\n>>> print(eq)\n0.9553418012614794\n```\n\nNote that the value of `sep_res.value` is actually a bit higher than `eq`. This\nis because the separable value is calculated by a hierarchy of SDPs. At low\nlevels of the SDP, the problem can often converge to the optimal value, but\nother times it is necessary to compute higher levels of the SDP to eventually\narrive at the optimal value. While this is intractable in general, in practice,\nthe SDP can often converge or at least get fairly close to the optimal value\nfor small problem sizes.\n\n#### Werner hiding pairs\n\nIn [arXiv:0011042](https://arxiv.org/abs/quant-ph/0011042) and\n[arXiv:0103098](https://arxiv.org/abs/quant-ph/0103098) a quantum data hiding\nprotocol that encodes a classical bit in a Werner hiding pair was provided.\n\nA Werner hiding pair is defined as\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\sigma_0^n=\\frac{\\mathbb{I}\\otimes\\mathbb{I}+W_n}{n(n+1)}\\quad\\text{and}\\quad\\sigma_1^n=\\frac{\\mathbb{I}\\otimes\\mathbb{I}-W_n}{n(n-1)}) \n\nwhere \n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;W_n=\\sum_{i,j=0}^{n-1}|i\\rangle\\langle\\text{}j|\\otimes|j\\rangle\\langle\\text{}i|\\in\\text{}U(\\mathbb{C}^n\\otimes\\mathbb{C}^n)) \n\nis the swap operator defined for some dimension n >= 2.\n\nIt was show in [hdl:10012/9572](https://uwspace.uwaterloo.ca/handle/10012/9572) that \n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\text{opt}_{\\text{PPT}}(\\eta)=\\frac{1}{2}+\\frac{1}{n+1}) \n\nwhere the ensemble is defined as\n\n![\\Large x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2c}](https://latex.codecogs.com/svg.latex?\\Large&space;\\eta=\\(\\sigma_0,\\sigma_1\\).)\n\nUsing `qustop`, we may encode this scenario as follows.\n\n```python\nimport numpy as np\nfrom toqito.perms import swap_operator\nfrom qustop import Ensemble, State, OptDist\n\n\ndim = 2\nsigma_0 = (np.kron(np.identity(dim), np.identity(dim)) + swap_operator(dim)) / (dim * (dim + 1))\nsigma_1 = (np.kron(np.identity(dim), np.identity(dim)) - swap_operator(dim)) / (dim * (dim - 1))\n\nstates = [State(sigma_0, [2, 2]), State(sigma_1, [2, 2])]\nensemble = Ensemble(states)\n\nexpected_val = 1 / 2 + 1 / (dim + 1)\n\nsd = OptDist(ensemble=ensemble, \n             dist_measurement=\"ppt\",\n             dist_method=\"min-error\",\n             eps=1e-8)\n\nsd.solve()\n```\n\nWe can verify that the closed-form expression matches that of the value\nreturned from `qustop`.\n\n```python\nprint(sd.value)\n0.8333333333668715\nprint(expected_val)\n0.8333333333333333\n```\n\n### State exclusion\n\nThe primary difference between the quantum state distinguishability\nscenario and the quantum state exclusion scenario is that in the former,\nBob want to guess which state he was given, and in the latter, Bob wants to\nguess which state he was *not* given.\n\n\n\n### State cloning\n\n(Coming soon).\n\n## License\n\n[GNU GPL v.3.0.](https://github.com/vprusso/qustop/blob/master/LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vprusso/toqito",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qustop",
    "package_url": "https://pypi.org/project/qustop/",
    "platform": null,
    "project_url": "https://pypi.org/project/qustop/",
    "project_urls": {
      "Homepage": "https://github.com/vprusso/toqito"
    },
    "release_url": "https://pypi.org/project/qustop/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Python toolkit for studying quantum state optimization problems",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13521728,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fe0a1914ac3993c4e0b17f210b9bdacedf6ed51f764aa156a56bb584691797d",
          "md5": "0fcac90aed55d8e38bdc9235a677120d",
          "sha256": "ef77242b962407c79f3ce02e635116c00d309bf63dd775501abdc2963a34412e"
        },
        "downloads": -1,
        "filename": "qustop-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0fcac90aed55d8e38bdc9235a677120d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 102965,
        "upload_time": "2022-04-15T02:22:37",
        "upload_time_iso_8601": "2022-04-15T02:22:37.769265Z",
        "url": "https://files.pythonhosted.org/packages/3f/e0/a1914ac3993c4e0b17f210b9bdacedf6ed51f764aa156a56bb584691797d/qustop-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "019f363550b324b27bbc63ce3f504f9d43766fdf0750ab4d2e5841297ca4c342",
          "md5": "f24ff4496856e8f17cfcb57be24553aa",
          "sha256": "f9899b76b8b3ec7de271a3f7aad448110c890a95408a1ee69de65cb91e968c59"
        },
        "downloads": -1,
        "filename": "qustop-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f24ff4496856e8f17cfcb57be24553aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21101,
        "upload_time": "2022-04-15T03:08:00",
        "upload_time_iso_8601": "2022-04-15T03:08:00.911495Z",
        "url": "https://files.pythonhosted.org/packages/01/9f/363550b324b27bbc63ce3f504f9d43766fdf0750ab4d2e5841297ca4c342/qustop-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dca7f89291af2a8e6c7114460066bc1a73b7c205b8738317d88b19c73eb6ebe8",
          "md5": "5baf8e55eb319cb9f4481b99e82ea1cb",
          "sha256": "83313588c4f90324c63aa08287324903ad8f8dbdb48a7f8dbd51b7d9ce2e1687"
        },
        "downloads": -1,
        "filename": "qustop-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5baf8e55eb319cb9f4481b99e82ea1cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21076,
        "upload_time": "2022-04-15T03:21:16",
        "upload_time_iso_8601": "2022-04-15T03:21:16.608919Z",
        "url": "https://files.pythonhosted.org/packages/dc/a7/f89291af2a8e6c7114460066bc1a73b7c205b8738317d88b19c73eb6ebe8/qustop-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dca7f89291af2a8e6c7114460066bc1a73b7c205b8738317d88b19c73eb6ebe8",
        "md5": "5baf8e55eb319cb9f4481b99e82ea1cb",
        "sha256": "83313588c4f90324c63aa08287324903ad8f8dbdb48a7f8dbd51b7d9ce2e1687"
      },
      "downloads": -1,
      "filename": "qustop-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5baf8e55eb319cb9f4481b99e82ea1cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 21076,
      "upload_time": "2022-04-15T03:21:16",
      "upload_time_iso_8601": "2022-04-15T03:21:16.608919Z",
      "url": "https://files.pythonhosted.org/packages/dc/a7/f89291af2a8e6c7114460066bc1a73b7c205b8738317d88b19c73eb6ebe8/qustop-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}