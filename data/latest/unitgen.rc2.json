{
  "info": {
    "author": "Susmit Rajeev Vengurlekar",
    "author_email": "susmit.py@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# unitgen\n\nGenerate unit tests boilerplate code\n\nThis is a simple tool to generate boilerplate code for unit tests. It is for those developers who are not able to follow TDD (Test Driven Development) for few methods and want to write unit tests for them after writing the actual code.\n\nAll the test files are generated in a folder named \"tests\" if it does not exist.\n\nExample:\nexamples/calci.py\n```python\nimport math\n\nclass Calci:\n    def __init__(self):\n        print(\"Calci class created\")\n\n    def add(self, a, b=0):\n        c = a + b\n        return c\n\n    def sub(self, a, b):\n        return a - b\n\n\nclass StringCalci:\n    def concat(self, a, b):\n        return a + b\n\n    def repeat(self, a, b):\n        return a * b\n```\n\nRun unitgen from command line:\n```bash\n# View how to use unitgen\nunitgen\n\n# all files under examples directory are processed\nunitgen examples\n\n# Files calci.py and pay_handler.py are processed\nunitgen examples/calci.py examples/pay_handler.py\n```\n\nGenerated result:\ntests/test_calci.py\n```python\n\nfrom unittest import TestCase\nfrom examples.calci import Calci, StringCalci\n\n\nclass TestCalci(TestCase):\n    def setUp(self):\n        \"\"\" Set up objects for each test \"\"\"\n        \n        self.calci = Calci()\n    \n    \n    def test___init__(self):\n        \"\"\" Test initialiser \"\"\"\n        self.obj = Calci()\n    \n    \n    \n    def test_add(self):\n        \n        a = None\n        b = None\n        actual_result = self.calci.add(a, b)\n        expected_result = None\n        self.assertEqual(actual_result, expected_result)\n    \n    \n    \n    def test_sub(self):\n        \n        a = None\n        b = None\n        actual_result = self.calci.sub(a, b)\n        expected_result = None\n        self.assertEqual(actual_result, expected_result)\n    \n    \n    def tearDown(self):\n        \"\"\" Destroy objects after each test \"\"\"\n\nclass TestStringCalci(TestCase):\n    def setUp(self):\n        \"\"\" Set up objects for each test \"\"\"\n        \n        self.string_calci = StringCalci()\n    \n    \n    def test_concat(self):\n        \n        a = None\n        b = None\n        actual_result = self.string_calci.concat(a, b)\n        expected_result = None\n        self.assertEqual(actual_result, expected_result)\n    \n    def test_repeat(self):\n        \n        a = None\n        b = None\n        actual_result = self.string_calci.repeat(a, b)\n        expected_result = None\n        self.assertEqual(actual_result, expected_result)\n    \n    \n    def tearDown(self):\n        \"\"\" Destroy objects after each test \"\"\"\n```\n\nEnjoy!\n\nMy Github profile: [susmitpy](https://www.github.com/susmitpy)\n\nMy Linkedin profile: [susmit vengurlekar](https://www.linkedin.com/in/susmit-vengurlekar/)\n\nMy Medium profile: [susmit.py](https://medium.com/@susmit.py)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/susmitpy/unitgen/archive/refs/tags/v_1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/susmitpy/unitgen",
    "keywords": "generate unit tests,generate tests,tests generator,boilerplate generator",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitgen",
    "package_url": "https://pypi.org/project/unitgen/",
    "platform": "",
    "project_url": "https://pypi.org/project/unitgen/",
    "project_urls": {
      "Download": "https://github.com/susmitpy/unitgen/archive/refs/tags/v_1.2.tar.gz",
      "Homepage": "https://github.com/susmitpy/unitgen"
    },
    "release_url": "https://pypi.org/project/unitgen/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Generate unit tests boilerplate code",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12175410,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da4d6a583ce2396253a2c3c05e5ef4778398d767223751ae94b285d299431680",
          "md5": "43583b00466f63dcfab11b682916922d",
          "sha256": "75686e3e417f9a03c2a6414c3256e9c58c2bd1c7d40c05c91bde7261a00bd0a6"
        },
        "downloads": -1,
        "filename": "unitgen-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43583b00466f63dcfab11b682916922d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3456,
        "upload_time": "2021-11-29T08:52:59",
        "upload_time_iso_8601": "2021-11-29T08:52:59.548777Z",
        "url": "https://files.pythonhosted.org/packages/da/4d/6a583ce2396253a2c3c05e5ef4778398d767223751ae94b285d299431680/unitgen-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d676f1641d97ee78e6272889302c72d94408a64f86e3a1cd732f0a296521d44b",
          "md5": "e8e4b6d022718321ffdb13487a65614e",
          "sha256": "55ad6304f83227e2bb3e7a5418ac3373a540e8aeed3178c9c620b41210d10f15"
        },
        "downloads": -1,
        "filename": "unitgen-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e8e4b6d022718321ffdb13487a65614e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4190,
        "upload_time": "2021-12-01T10:04:24",
        "upload_time_iso_8601": "2021-12-01T10:04:24.528379Z",
        "url": "https://files.pythonhosted.org/packages/d6/76/f1641d97ee78e6272889302c72d94408a64f86e3a1cd732f0a296521d44b/unitgen-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d676f1641d97ee78e6272889302c72d94408a64f86e3a1cd732f0a296521d44b",
        "md5": "e8e4b6d022718321ffdb13487a65614e",
        "sha256": "55ad6304f83227e2bb3e7a5418ac3373a540e8aeed3178c9c620b41210d10f15"
      },
      "downloads": -1,
      "filename": "unitgen-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e8e4b6d022718321ffdb13487a65614e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4190,
      "upload_time": "2021-12-01T10:04:24",
      "upload_time_iso_8601": "2021-12-01T10:04:24.528379Z",
      "url": "https://files.pythonhosted.org/packages/d6/76/f1641d97ee78e6272889302c72d94408a64f86e3a1cd732f0a296521d44b/unitgen-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}