{
  "info": {
    "author": "wilgysef",
    "author_email": "wilgysef@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pycolor\n\n[![Build Status](https://www.travis-ci.com/WiLGYSeF/pycolor.svg?branch=master)](https://app.travis-ci.com/github/WiLGYSeF/pycolor)\n[![codecov](https://codecov.io/gh/WiLGYSeF/pycolor/branch/master/graph/badge.svg?token=7ASXFQTOOG)](https://codecov.io/gh/WiLGYSeF/pycolor)\n[![PyPI version](https://badgen.net/pypi/v/pycolor-term)](https://pypi.org/project/pycolor-term/)\n\n1. [Installation](#installation).\n2. [Example Usage](#example-usage).\n3. [Configuration](#configuration).\n4. [Formatting Strings](#formatting-strings).\n    - [Color Formatting](#colors).\n    - [Field Formatting](#fields).\n    - [Group Formatting](#groups).\n    - [Alignment](#alignment).\n    - [Truncate](#truncate).\n5. [Debugging and Creating Profiles](#debugging-and-creating-profiles).\n    - [Debug Colors](#debug-colors).\n    - [Creating Profiles](#creating-profiles).\n6. [Limitations](#limitations).\n7. [Known Issues](#known-issues).\n\nA Python program that executes commands to perform real-time terminal output coloring using ANSI color codes.\nColor formatting can be added to program output using JSON configuration files and regular expressions to improve readability of the output.\n\nDesigned for Unix, but works in Windows.\n\n# Installation\n\n```bash\npip install pycolor-term\n```\n\n# Example Usage\n\nPycolor can be used explicitly on the command line:\n\n**Before:**\n\n![sample df output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-df-output.png)\n\n**After:**\n\n![sample colored df output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-df-output-colored.png)\n\n[Sample df configuration file.](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/src/pycolor/config/sample-config/df.json)\n\n----\n\nPycolor can also be aliased in `~/.bashrc` like so:\n```bash\nalias rsync='pycolor rsync'\n```\n\n**Before:**\n\n![sample rsync output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-rsync-output.png)\n\n**After:**\n*Note pycolor omitted lines with trailing slashes in addition to coloring output for better readability.*\n\n![sample colored rsync output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-rsync-output-colored.png)\n\n[Sample rsync configuration file.](https://github.com/WiLGYSeF/pycolor/blob/master/src/pycolor/config/sample-config/rsync.json)\n\n----\n\nSample rclone copy output:\n\n**Before:**\n\n![sample rclone output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-rclone-output.png)\n\n**After:**\n\n![sample colored rclone output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/sample-rclone-output-colored.png)\n\n# Configuration\n\nPycolor will first try to load configuration from `~/.pycolor.json` before loading files found in `~/.pycolor.d/` in filename order.\n\nWhen looking for a profile to use, pycolor will select the last matching profile based on the `name`/`command`, `name_expression`/`command_expression`, or `which` property.\n\nMatching patterns are applied first-to-last for each profile.\n\nJSON schema files that describe the config format can be found in [`/config/schema/`](https://github.com/WiLGYSeF/pycolor/blob/master/src/pycolor/config/schema/profile.json).\n\nSample config files can be found [`here`](https://github.com/WiLGYSeF/pycolor/blob/master/src/pycolor/config/sample-config/) and will be automatically copied to `~/.pycolor.d/` when run, if it does not exist.\n\n# Formatting Strings\n\nUse formatting strings to color/manipulate the program output in real-time.\nThese are valid formats:\n- `%(<name>:<value>)`\n- `%<code>(<value>)`\n- `%<code><value>`\n\n| Code | Name | Description |\n|---|---|---|\n| [C](#colors) | color | Color formatter |\n| [F](#fields) | field | Field (separator) formatter |\n| [G](#groups) | group | Regex group formatter |\n| [H](#context-aware-color-alias-format) | colorctx | Context-aware field/group color alias |\n|  | [align](#alignment) | Alignment formatter |\n|  | [trunc](#truncate) | Truncation formatter |\n\nFormatting strings can written like `%(color:red)`, `%C(red)`, or `%Cr`.\n`%C(red)hello` formats the string `hello` in red.\n\nA literal `%` can be used in a format string by using `%%`.\nE.g. the format string `The total is %C(red)15%%` will become `The total is 15%`, with the `15%` part in red.\n\nValid format value characters are upper/lowercase letters and numbers, unless the argument is encapsulated in parentheses, then everything in the parenthesis pair is used.\n\nCheck [`the sample config`](https://github.com/WiLGYSeF/pycolor/blob/master/src/pycolor/config/sample-config/) for examples of formatting strings being used for actual programs.\n\n## Colors\n\nTo colorize output through a replace pattern use `%(color:<color value>)`, `%C(<color value>)` or `%C<color value>`.\n\n### Recognized Attributes and Colors:\n| Color Value | Aliases | ANSI Code | Description |\n|---|---|---|---|\n| reset | normal, res, nor, z | `\\e[0m` | Resets all ANSI color formatting |\n| bold | bright, bol, bri | `\\e[1m` | Bold characters |\n| dim |  | `\\e[2m` | Dim characters |\n| italic | ita | `\\e[3m` | Italicize characters |\n| underline | underlined, ul, und | `\\e[4m` | Underline characters |\n| blink | bli | `\\e[5m` | Blink characters |\n| invert | reverse, inv, rev | `\\e[7m` | Invert background and foreground colors |\n| hidden | conceal, hid, con | `\\e[8m` | Hide characters |\n| strikethrough | strike, str, crossedout, crossed, cro | `\\e[9m` | Strikethrough characters |\n| black | k | `\\e[30m` | Black color |\n| red | r | `\\e[31m` | Red color |\n| green | g | `\\e[32m` | Green color |\n| yellow | y | `\\e[33m` | Yellow color |\n| blue | b | `\\e[34m` | Blue color |\n| magenta | m | `\\e[35m` | Magenta color |\n| cyan | c | `\\e[36m` | Cyan color |\n| grey | gray, e | `\\e[37m` | Grey color |\n| default |  | `\\e[39m` | Default color |\n| overline | overlined, ol, ove | `\\e[53m` | Overline characters |\n| darkgrey | darkgray, de, lk | `\\e[90m` | Dark grey color |\n| lightred | lr | `\\e[91m` | Light red color |\n| lightgreen | lg | `\\e[92m` | Light green color |\n| lightyellow | ly | `\\e[93m` | Light yellow color |\n| lightblue | lb | `\\e[94m` | Light blue color |\n| lightmagenta | lm | `\\e[95m` | Light magenta color |\n| lightcyan | lc | `\\e[96m` | Light cyan color |\n| white | lightgrey, le, w | `\\e[97m` | White color |\n\n[Click here for a list of all attributes and color codes](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_%28Select_Graphic_Rendition%29_parameters).\n\n### Modifier Characters\n\nYou can select multiple color values by separating them with `;` (must be wrapped in parentheses). e.g. `%(color:bold;red)` or `%C(bold;red)`.\n\nIf `^` is added before a color (e.g. `%C(^red)`), it will set the background color instead.\nThe color formatting for bold, red-on-yellow text can be written as `%C(bold;red;^yellow)hello%C(z)`, or `%C(bol;r;^y)hello%Cz`, which will produce `\\e[1;31;43mhello\\e[0m`.\n\nIf `^` is added before a style (e.g. `%C(^italic)` produces `\\e[23m`), then the style is turned off.\n\n*Note that turning off bold (`%C(^bold)` i.e. `\\e[21m`) instead turns on double underline for some terminals.*\n\n### Special Colors\n\n#### 8-bit Color\nIf a color value is just a number (e.g. `%C130`), then it will use the 8-bit color set (in this case, a brown color: `\\e[38;5;130m`).\nThis also works for background colors as well (e.g. `%C(^130)` produces `\\e[48;5;130m`).\n\n[Click here to see the 8-bit color table](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit).\n\n#### 24-bit Color\n24-bit color is also supported by using hex codes (`%C(0xffaa00)` or `%C(0xfa0)` will produce orange: `\\e[38;2;255;170;0m`).\n\n### Raw ANSI Codes\nIf for some reason you would like to use raw color codes, `%C(raw1;3;36)` will produce bold, italic, cyan (`\\e[1;3;36m`).\n\n## Fields\n\nIf the pattern's `separator` property is set, then the fields and their separators can be referenced in the format string.\n\nTo get a field's text, use `%F<field number>`.\n\nTo get the field separator string, use `%Fs<field number>`. This will return the field separator string that precedes that field number.\n(e.g. `%Fs3` will get the field separator string that comes before the third field `%F3`).\n\nIf `separator` is set to `#+`, and the output line is `a#b##c###d##e#f`, the field format values will be:\n\n| Field Format | Value |\n|---|---|\n| `%F1` | `a` |\n| `%Fs2` | `#` |\n| `%F2` | `b` |\n| `%Fs3` | `##` |\n| `%F3` | `c` |\n| `%Fs4` | `###` |\n| `%F4` | `d` |\n| `%Fs5` | `##` |\n| `%F5` | `e` |\n| `%Fs6` | `#` |\n| `%F6` | `f` |\n\n### Negative Indexing\n\nField formats support negative indexing, so `%F(-1)_%F(-2)` will format to `f_e` in the previous example.\n\n### Field Ranges\n\nGiving a range of fields is possible using the `*` character, in the format `%F(<start range>*<end range>)`.\n\nUsing the same example as above:\n\n| Field Format | Value |\n|---|---|\n| `%F(*3)` | `a#b##c` |\n| `%F(1*3)` | `a#b##c` |\n| `%F(2*3)` | `b##c` |\n| `%F(2*4)` | `b##c###d` |\n| `%F(4*)` | `d##e#f` |\n\n### Separator replacement\n\nIf you want to format using field ranges, but want to override the separator used to be a constant-length string, use `%F(<start range>*<end range>,<separator>)`.\nUsing the previous input as an example, `%F(*4,_)` formats to  `a_b_c_d`.\n\n### `replace-fields`\n\nChanging only the matched fields is possible using pattern's `replace-fields` property.\nAny fields not explicitly set will be left alone.\n\nUse `%Fc` to specify the current field that applies to the index/string.\n\nIt can be a list of format strings, where the format string at index `i` is applied to field number `i + 1`.\n\n```\n'replace_fields': [\"%Cg%Fc%Cz\", \"%Cr%Fc%Cz\", \"%Cg%Fc%Cz\"]\n```\n\nIt can also be an object with the keys as field numbers and the value as the format value.\nKeys may be comma-separated numbers, or even ranges (`\"<start>*<end>\"` or `\"<start>*<end>*<step>\"`).\n\n```\n'replace_fields': {\n    \"1,3\": \"%Cg%Fc%Cz\",\n    \"2\": \"%Cr%Fc%Cz\",\n    \"4*6\": \"%Cb%Fc%Cz\"\n}\n```\n\n## Groups\n\nRegex groups can be referenced with the format: `%G<group number or name>`.\n`%G0` is the entire matching text from `expression`. `%G1` is the first matching group, `%G2` is the second, etc.\nIf the regex group is named, it can also be referenced by name (e.g. `%G(myregexgroup)`).\n\n### Group Incrementor\n\nInstead of using groups explicitly in order (e.g. `%G1, %G2: %G3`), using the special incrementor instead of numbers, `%Gn, %Gn: %Gn`, will result in the same format output.\n\nNote that if a named group `n` is defined in the expression, then the special incrementor will be overridden.\n\n### `replace-groups`\n\nChanging only the matched regex groups is possible using pattern's `replace-groups` property.\nAny groups not explicitly set will be left alone.\n\nUse `%Gc` to specify the current group that applies to the index/strin.\n\nIt can be a list of format strings, where the format string at index `i` is applied to group number `i + 1`.\n\n```\n'replace_groups': [\"%Cg%Gc%Cz\", \"%Cr%Gc%Cz\", \"%Cg%Gc%Cz\"]\n```\n\nIt can also be an object with the keys as group numbers and the value as the format value.\nKeys may be comma-separated numbers, or even ranges (`\"<start>*<end>\"` or `\"<start>*<end>*<step>\"`).\n\n```\n'replace_groups': {\n    \"1,3\": \"%Cg%Gc%Cz\",\n    \"2\": \"%Cr%Gc%Cz\",\n    \"4*6\": \"%Cb%Fc%Cz\"\n}\n```\n\n## Context-Aware Color Alias Format\n\nYou may find yourself coloring groups or fields often using `%Cg%Fc%Cz` or `%Cg%Gc%Cz`, which is why a context-aware color alias format is available: `%H(<color value>)` is an alias for `%C(<color value>)%Fc%Cz` or `%C(<color value>)%Gc%Cz`.\n\nNow `%Cg%Gc%Cz` can be replaced with the shorter alias `%Hg`.\nIf `%H` is used in `replace_groups`, it will be an alias for coloring `%Gc`, and if `%H` is used in `replace_fields`, it will be an alias for coloring `%Fc`.\n\n## Alignment\n\nAlign strings to a certain width with `%(align:<width>,<position>,<pad character>)<string>%(end)`.\n\n| Value | Description |\n|---|---|\n| `width` | align `string` to this width |\n| `position` | alignment position: `left`, `middle`, or `right` (default `left`) |\n| `pad character` | pad character used to pad the string to `width` (default ` `) |\n\nThe text will be padded to the width specified.\nIf the width is shorter than the text, then no padding or alignment is done.\n\nFor example, left-aligning group 1 with a 12 character width can be done with the format string `%(align:12)%G1%(end)`.\n\nRight-aligning can be done with `%(align:12,right)%G1%(end)`.\n\n## Truncate\n\nTruncate strings to a certain length using `%(trunc:<length>,<location>,<replace>,<hard length>)<string>%(end)`, where:\n\n| Value | Description |\n|---|---|\n| `length` | truncate `string` to this length |\n| `location` | where to truncate `string`: `left`, `middle`, or `right` |\n| `replace` | insert this string at the truncation (e.g `...`) (default empty) |\n| `hard length` | indicates if length of `replace` is counted as part of `length`: `yes` or `no` (default `yes`) |\n\n### Truncate Samples\n\nTruncate the value of group 1 to 8 chars, adding `...` if necessary: `%(trunc:8,right,...,no)%G1%(end)`.\n\n| String | Result |\n|---|---|\n| `Testing` | `Testing` |\n| `LongString` | `LongStri...` |\n\nTruncate the value of a path in field 1 to 16 chars, inserting `...` if necessary: `%(trunc:16,middle,...)%F1%(end)`.\n\n| String | Result |\n|---|---|\n| `/root/` | `/root/` |\n| `/path/to/a/certain/file` | `/path/...in/file` |\n\n# Debugging and Creating Profiles\n\n## Debug Colors\n\nTo check the supported color codes of your terminal, run `pycolor --debug-color` to print all the available ANSI color codes.\nUsing `--debug-color` will show the results of the text styles, 16-color output, 8-bit color support, and 24-bit color support.\n\nOutput of `pycolor --debug-color` run on Windows PowerShell (24-bit colors are not shown in this image for brevity):\n\n![--debug-color output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/debug-color.png)\n\n*Note: bold off (`\\e[21m`) is actually bold underline in PowerShell*\n\n## Creating Profiles\n\nPycolor has a debug mode when running commands that shows the raw output of the command.\nDebug mode is turned on using `-v` or `--verbose` and can be used multiple times to increase the debug level.\n\nDebug levels (previous levels are applied to the current):\n\n| Level | Command | Description |\n|---|---|---|\n| 1 | `-v`    | Print received output |\n| 2 | `-vv`   | Print final output written |\n| 3 | `-vvv`  | Print each matching pattern index and its output |\n| 4 | `-vvvv` | Print the output line number |\n\nUsing debug level 3 on `free -h` with a profile loaded:\n\n![--debug-color output](https://raw.githubusercontent.com/WiLGYSeF/pycolor/master/docs/images/debug-3-free.png)\n\n# Limitations\n\n- Programs that expect interactive standard input may not work properly.\n- Programs that rewrite parts of the screen may cause unexpected behavior.\n\n# Known Issues\n\n- A fatal Python error can occur when attempting to acquire a lock for stdout at interpreter shutdown, caused when the command pycolor is running terminates, but output has not yet fully been written to the screen.\n  - It has only been observed when running pycolor inside of tmux while in copy-mode.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WiLGYSeF/pycolor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycolor-term",
    "package_url": "https://pypi.org/project/pycolor-term/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycolor-term/",
    "project_urls": {
      "Bug Tracker": "https://github.com/WiLGYSeF/pycolor/issues",
      "Homepage": "https://github.com/WiLGYSeF/pycolor"
    },
    "release_url": "https://pypi.org/project/pycolor-term/0.1.0/",
    "requires_dist": [
      "fastjsonschema"
    ],
    "requires_python": ">=3.6",
    "summary": "Execute commands, coloring terminal output in real-time using ANSI color codes.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12737710,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "736b8b691a6e4353a37ba83217af1afa51f25312a15c84d180923a2150a161ae",
          "md5": "f51cce62d13a8d881d34f9e041ff1d65",
          "sha256": "84cb749b6aad01e21498181a14621800fdffbd3167051b52425344266d4847ac"
        },
        "downloads": -1,
        "filename": "pycolor_term-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f51cce62d13a8d881d34f9e041ff1d65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35189,
        "upload_time": "2021-08-02T02:50:46",
        "upload_time_iso_8601": "2021-08-02T02:50:46.642553Z",
        "url": "https://files.pythonhosted.org/packages/73/6b/8b691a6e4353a37ba83217af1afa51f25312a15c84d180923a2150a161ae/pycolor_term-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae356f272240cc6311700b5dfdcd617a26d434e706d0e86c3bfff9fc70cb093f",
          "md5": "39756a82e18e7c606808729880d1d27a",
          "sha256": "977d73feb434e01b146c6221bdbd0cfb9fa4c0a7ba2cb6be205683d8c7e31f95"
        },
        "downloads": -1,
        "filename": "pycolor-term-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "39756a82e18e7c606808729880d1d27a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35412,
        "upload_time": "2021-08-02T02:50:48",
        "upload_time_iso_8601": "2021-08-02T02:50:48.251095Z",
        "url": "https://files.pythonhosted.org/packages/ae/35/6f272240cc6311700b5dfdcd617a26d434e706d0e86c3bfff9fc70cb093f/pycolor-term-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8008b193c0b08b8e9c7072463f71df9d743ce9dfa7a7c22967469a3131a182b4",
          "md5": "c741182aba9b06966336e0449dc56e47",
          "sha256": "84490f4665257d736ad9f5693481149c9e17e81299b56534fd841db95201af12"
        },
        "downloads": -1,
        "filename": "pycolor_term-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c741182aba9b06966336e0449dc56e47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38351,
        "upload_time": "2021-08-02T03:09:38",
        "upload_time_iso_8601": "2021-08-02T03:09:38.589287Z",
        "url": "https://files.pythonhosted.org/packages/80/08/b193c0b08b8e9c7072463f71df9d743ce9dfa7a7c22967469a3131a182b4/pycolor_term-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4152d953c58f9599bdaa28798ae1fd680f878cb540f4cc80bf65918d0d6487c",
          "md5": "69ca93d8c39fa9ee4f3ff531cbf5e12a",
          "sha256": "15b598e744f14104f6b01df04d3752be126a0b8a49d710639069a44f3f69dc08"
        },
        "downloads": -1,
        "filename": "pycolor-term-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "69ca93d8c39fa9ee4f3ff531cbf5e12a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35254,
        "upload_time": "2021-08-02T03:09:39",
        "upload_time_iso_8601": "2021-08-02T03:09:39.814788Z",
        "url": "https://files.pythonhosted.org/packages/f4/15/2d953c58f9599bdaa28798ae1fd680f878cb540f4cc80bf65918d0d6487c/pycolor-term-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ad3dc7539526a34c98a0f210c24b921fe77a99c1d0fb71fee9b5630038e0eca",
          "md5": "0fa36b45ea46135aeab4a5a2d316f857",
          "sha256": "9d23b2e24ce26fa29f6bc4829a29dc1a491ce4af0567669ab060f2fdafbf1e76"
        },
        "downloads": -1,
        "filename": "pycolor_term-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fa36b45ea46135aeab4a5a2d316f857",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39338,
        "upload_time": "2021-08-02T14:48:27",
        "upload_time_iso_8601": "2021-08-02T14:48:27.257397Z",
        "url": "https://files.pythonhosted.org/packages/7a/d3/dc7539526a34c98a0f210c24b921fe77a99c1d0fb71fee9b5630038e0eca/pycolor_term-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05588d4771850ac371a906e54307e24b62134def1ed00b39a807eb73d1545b50",
          "md5": "41492aa5c91f57ad384f279259fd9fb9",
          "sha256": "7a100dfa2a8c5a965b41d70ebb03b863a7fe5c8f37f2e8e7e3f60ac30e531d13"
        },
        "downloads": -1,
        "filename": "pycolor-term-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "41492aa5c91f57ad384f279259fd9fb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37359,
        "upload_time": "2021-08-02T14:48:28",
        "upload_time_iso_8601": "2021-08-02T14:48:28.557914Z",
        "url": "https://files.pythonhosted.org/packages/05/58/8d4771850ac371a906e54307e24b62134def1ed00b39a807eb73d1545b50/pycolor-term-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec0f152940674adae6336005749060d8ce666f633e6ab82ddcb17face89d1b18",
          "md5": "b4b1b61d0f08ba9a299ab7affa2bddec",
          "sha256": "877e462ebbde74357d6bf7cff9277e45a4b0ca16283531211f90997d06bbf6ef"
        },
        "downloads": -1,
        "filename": "pycolor_term-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4b1b61d0f08ba9a299ab7affa2bddec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39448,
        "upload_time": "2021-08-22T00:07:16",
        "upload_time_iso_8601": "2021-08-22T00:07:16.222414Z",
        "url": "https://files.pythonhosted.org/packages/ec/0f/152940674adae6336005749060d8ce666f633e6ab82ddcb17face89d1b18/pycolor_term-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "859514c0e385f33ef667d865a9e78a6f2d17e92f2dd838cd7abdba702f75e376",
          "md5": "cc8abcfcccec85efda03c70e2dcb0784",
          "sha256": "6930e26c3f5ec9e5680dfe9f5b89427669638e56eeaf5f6fd4f817d6e29ba248"
        },
        "downloads": -1,
        "filename": "pycolor-term-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "cc8abcfcccec85efda03c70e2dcb0784",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37498,
        "upload_time": "2021-08-22T00:07:17",
        "upload_time_iso_8601": "2021-08-22T00:07:17.475399Z",
        "url": "https://files.pythonhosted.org/packages/85/95/14c0e385f33ef667d865a9e78a6f2d17e92f2dd838cd7abdba702f75e376/pycolor-term-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b30a19b5f12726c56cfc4f25a5cea27abcf4b21314df9ab315743ed12b47d8b",
          "md5": "156c0fc276818ec799c66b06b308aa4b",
          "sha256": "29f4f8d38f86ffeb566c9a4082665b081cfce41ff352fa8375c4fe415d71373b"
        },
        "downloads": -1,
        "filename": "pycolor_term-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "156c0fc276818ec799c66b06b308aa4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54439,
        "upload_time": "2022-01-30T15:56:09",
        "upload_time_iso_8601": "2022-01-30T15:56:09.961663Z",
        "url": "https://files.pythonhosted.org/packages/3b/30/a19b5f12726c56cfc4f25a5cea27abcf4b21314df9ab315743ed12b47d8b/pycolor_term-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0df8706abd30b3ddffa621455723c2977f7252d902982005ca493f81257378eb",
          "md5": "1a2c90fec85365c98ffc8ea82b198e14",
          "sha256": "c7e57fc81bd1da1ab7bea28387cea4cc24740905d849f48225fe1aecd92069e5"
        },
        "downloads": -1,
        "filename": "pycolor-term-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a2c90fec85365c98ffc8ea82b198e14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47033,
        "upload_time": "2022-01-30T15:56:11",
        "upload_time_iso_8601": "2022-01-30T15:56:11.027248Z",
        "url": "https://files.pythonhosted.org/packages/0d/f8/706abd30b3ddffa621455723c2977f7252d902982005ca493f81257378eb/pycolor-term-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b30a19b5f12726c56cfc4f25a5cea27abcf4b21314df9ab315743ed12b47d8b",
        "md5": "156c0fc276818ec799c66b06b308aa4b",
        "sha256": "29f4f8d38f86ffeb566c9a4082665b081cfce41ff352fa8375c4fe415d71373b"
      },
      "downloads": -1,
      "filename": "pycolor_term-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "156c0fc276818ec799c66b06b308aa4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 54439,
      "upload_time": "2022-01-30T15:56:09",
      "upload_time_iso_8601": "2022-01-30T15:56:09.961663Z",
      "url": "https://files.pythonhosted.org/packages/3b/30/a19b5f12726c56cfc4f25a5cea27abcf4b21314df9ab315743ed12b47d8b/pycolor_term-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0df8706abd30b3ddffa621455723c2977f7252d902982005ca493f81257378eb",
        "md5": "1a2c90fec85365c98ffc8ea82b198e14",
        "sha256": "c7e57fc81bd1da1ab7bea28387cea4cc24740905d849f48225fe1aecd92069e5"
      },
      "downloads": -1,
      "filename": "pycolor-term-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1a2c90fec85365c98ffc8ea82b198e14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47033,
      "upload_time": "2022-01-30T15:56:11",
      "upload_time_iso_8601": "2022-01-30T15:56:11.027248Z",
      "url": "https://files.pythonhosted.org/packages/0d/f8/706abd30b3ddffa621455723c2977f7252d902982005ca493f81257378eb/pycolor-term-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}