{
  "info": {
    "author": "Xiao Ma",
    "author_email": "Marshalma0923@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\n## Introduction\n\nThis module helps you extract key terms and topics from corpus using a comparative approach.\n\n## Installation\n\n## Usage\n\n### Import packages\n\n\n```python\nfrom compExtract import ComparativeExtraction\n```\n\n### Load sample data\n\n\n```python\nimport pandas as pd\nimport numpy as np\nPATH = \"/Users/xiaoma/Desktop/gitrepo/associate-term-search/data/switch_reviews.csv\"\ndata = pd.read_csv(PATH)\nlabel = [x <= 3 for x in data['stars']]\n```\n\n\n```python\ndata\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stars</th>\n      <th>titles</th>\n      <th>reviews</th>\n      <th>dates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.0</td>\n      <td>Worth It\\n</td>\n      <td>Definitely worth the money!\\n</td>\n      <td>September 21, 2019</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>Nintendo Swich gris joy con\\n</td>\n      <td>Con este producto no he sentido mucha satisfac...</td>\n      <td>September 20, 2019</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5.0</td>\n      <td>My kid wont put it down\\n</td>\n      <td>Couldnt of been happier, came early.  I was th...</td>\n      <td>September 20, 2019</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.0</td>\n      <td>Happy\\n</td>\n      <td>Happy\\n</td>\n      <td>September 20, 2019</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>Great\\n</td>\n      <td>Great product\\n</td>\n      <td>September 19, 2019</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4995</th>\n      <td>1.0</td>\n      <td>One Star\\n</td>\n      <td>it is no good, it suck, no work, plz hlp amazon\\n</td>\n      <td>December 12, 2017</td>\n    </tr>\n    <tr>\n      <th>4996</th>\n      <td>5.0</td>\n      <td>A must have gaming system\\n</td>\n      <td>The Nintendo Switch is a versatile hybrid game...</td>\n      <td>December 12, 2017</td>\n    </tr>\n    <tr>\n      <th>4997</th>\n      <td>5.0</td>\n      <td>Switch\\n</td>\n      <td>This purchase save me from looking for one.\\n</td>\n      <td>December 11, 2017</td>\n    </tr>\n    <tr>\n      <th>4998</th>\n      <td>5.0</td>\n      <td>Five Stars\\n</td>\n      <td>Best babysitter ever!\\n</td>\n      <td>December 11, 2017</td>\n    </tr>\n    <tr>\n      <th>4999</th>\n      <td>5.0</td>\n      <td>Five Stars\\n</td>\n      <td>Its a great game console.\\n</td>\n      <td>December 11, 2017</td>\n    </tr>\n  </tbody>\n</table>\n<p>5000 rows Ã— 4 columns</p>\n</div>\n\n\n\n\n```python\ndata.columns\n```\n\n\n\n\n    Index(['stars', 'titles', 'reviews', 'dates'], dtype='object')\n\n\n\nHere we are using online Amazon reviews for Nintendo Switch to illustrate the usages of the module. \n\nThe module requires a corpus and a set of binary labels as inputs. The labels should be created depending on what type of questions are we trying to answer. The set of labels should be of the same length as the corpus.\n\nHere, let's assume that we want to know why people dislike this product and find relevant keywords. To answer this question, we created the label to be a binary variable indicating whether a reviewer gives a 3 star or less. \n\n### Initialize the module with the review corpus and labels\n\n\n```python\nce = ComparativeExtraction(corpus = data['reviews'], labels = label)\n```\n\n### Extract the keywords\n\n\n```python\nce.get_distinguish_terms(ngram_range = (1,3),top_n = 10)\n```\n\n\n\n\n    <compExtract.ComparativeExtraction at 0x7ff96f84b588>\n\n\n\n\n```python\n# Get the keywords that are mentioned significantly more in the less than or equal to 3 star reviews\nce.increased_terms_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>diff</th>\n      <th>pos_prop</th>\n      <th>pos_count</th>\n      <th>neg_prop</th>\n      <th>neg_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>work</td>\n      <td>0.194976</td>\n      <td>0.278426</td>\n      <td>191</td>\n      <td>0.083449</td>\n      <td>360</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>switch</td>\n      <td>0.176764</td>\n      <td>0.351312</td>\n      <td>241</td>\n      <td>0.174548</td>\n      <td>753</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>buy</td>\n      <td>0.174520</td>\n      <td>0.297376</td>\n      <td>204</td>\n      <td>0.122856</td>\n      <td>530</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>month</td>\n      <td>0.143129</td>\n      <td>0.158892</td>\n      <td>109</td>\n      <td>0.015763</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>nintendo</td>\n      <td>0.134316</td>\n      <td>0.290087</td>\n      <td>199</td>\n      <td>0.155772</td>\n      <td>672</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>charge</td>\n      <td>0.122855</td>\n      <td>0.141399</td>\n      <td>97</td>\n      <td>0.018544</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>use</td>\n      <td>0.118448</td>\n      <td>0.206997</td>\n      <td>142</td>\n      <td>0.088549</td>\n      <td>382</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>new</td>\n      <td>0.113989</td>\n      <td>0.160350</td>\n      <td>110</td>\n      <td>0.046361</td>\n      <td>200</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>would</td>\n      <td>0.106540</td>\n      <td>0.164723</td>\n      <td>113</td>\n      <td>0.058183</td>\n      <td>251</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>get</td>\n      <td>0.104055</td>\n      <td>0.231778</td>\n      <td>159</td>\n      <td>0.127724</td>\n      <td>551</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Get the keywords that are mentioned significantly less in the less than or equal to 3 star reviews\nce.decreased_terms_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>diff</th>\n      <th>pos_prop</th>\n      <th>pos_count</th>\n      <th>neg_prop</th>\n      <th>neg_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>love</td>\n      <td>-0.216997</td>\n      <td>0.080175</td>\n      <td>55</td>\n      <td>0.297172</td>\n      <td>1282</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>great</td>\n      <td>-0.122247</td>\n      <td>0.099125</td>\n      <td>68</td>\n      <td>0.221372</td>\n      <td>955</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fun</td>\n      <td>-0.048160</td>\n      <td>0.046647</td>\n      <td>32</td>\n      <td>0.094808</td>\n      <td>409</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>best</td>\n      <td>-0.042638</td>\n      <td>0.030612</td>\n      <td>21</td>\n      <td>0.073250</td>\n      <td>316</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>amaze</td>\n      <td>-0.038011</td>\n      <td>0.010204</td>\n      <td>7</td>\n      <td>0.048215</td>\n      <td>208</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>awesome</td>\n      <td>-0.035827</td>\n      <td>0.007289</td>\n      <td>5</td>\n      <td>0.043115</td>\n      <td>186</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>son love</td>\n      <td>-0.035564</td>\n      <td>0.002915</td>\n      <td>2</td>\n      <td>0.038479</td>\n      <td>166</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>perfect</td>\n      <td>-0.032515</td>\n      <td>0.008746</td>\n      <td>6</td>\n      <td>0.041261</td>\n      <td>178</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>easy</td>\n      <td>-0.026282</td>\n      <td>0.023324</td>\n      <td>16</td>\n      <td>0.049606</td>\n      <td>214</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>kid love</td>\n      <td>-0.024370</td>\n      <td>0.004373</td>\n      <td>3</td>\n      <td>0.028744</td>\n      <td>124</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nIf we need more context on a given word, or we need more interpretable topics, we can:\n1. Output the reviews that contains the term\n2. Switch the ngram_range\n\n### Output the reviews\n\nSay we want to know more about the significant term \"work\", we can directly output all the reviews containing the term.\n\nThe output class \"kw\" contains a one-hot encoded document-term-matrix that has all the terms found from the corpus. We can leverage it to find corresponding reviews of each term.\n\n\n```python\n# The binary_dtm provides a convenient way to extract reviews with specific terms\nprint(ce.binary_dtm[['work']])\n```\n\n          work\n    0        0\n    1        0\n    2        0\n    3        0\n    4        0\n    ...    ...\n    4995     1\n    4996     0\n    4997     0\n    4998     0\n    4999     0\n    \n    [5000 rows x 1 columns]\n\n\n\n```python\nreviews_contain_term_work = data['reviews'][[x == 1 for x in ce.binary_dtm['work']]]\nlen(reviews_contain_term_work)\n```\n\n\n\n\n    551\n\n\n\n\n```python\nfor x in pd.Series(reviews_contain_term_work).sample(1):\n    print(x)\n```\n\n    I bought this as a Christmas present for my son.  After about a month and half of using it.  The switch stopped working.  It wont charge.  The product is an expensive piece of junk.\n    \n\n\n### Change the n-gram range to exclude uni-grams\n\n\n```python\nce_ngram = ComparativeExtraction(corpus = data['reviews'], labels = label).get_distinguish_terms(ngram_range=(2,4), top_n=10)\n```\n\n    /Users/xiaoma/envs/compExtract/lib/python3.7/site-packages/sklearn/feature_extraction/text.py:489: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n      warnings.warn(\"The parameter 'token_pattern' will not be used\"\n\n\n\n\n\n    <compExtract.ComparativeExtraction at 0x7ff955f23cf8>\n\n\n\n\n```python\nce_ngram.increased_terms_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>diff</th>\n      <th>pos_prop</th>\n      <th>pos_count</th>\n      <th>neg_prop</th>\n      <th>neg_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>joy con</td>\n      <td>0.040857</td>\n      <td>0.056851</td>\n      <td>39</td>\n      <td>0.015994</td>\n      <td>69</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>brand new</td>\n      <td>0.020511</td>\n      <td>0.027697</td>\n      <td>19</td>\n      <td>0.007186</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>nintendo switch</td>\n      <td>0.019638</td>\n      <td>0.074344</td>\n      <td>51</td>\n      <td>0.054706</td>\n      <td>236</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>buy switch</td>\n      <td>0.018888</td>\n      <td>0.027697</td>\n      <td>19</td>\n      <td>0.008809</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>play game</td>\n      <td>0.014092</td>\n      <td>0.039359</td>\n      <td>27</td>\n      <td>0.025267</td>\n      <td>109</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>game play</td>\n      <td>0.009812</td>\n      <td>0.021866</td>\n      <td>15</td>\n      <td>0.012054</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>year old</td>\n      <td>0.005243</td>\n      <td>0.023324</td>\n      <td>16</td>\n      <td>0.018081</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>christmas gift</td>\n      <td>0.003682</td>\n      <td>0.014577</td>\n      <td>10</td>\n      <td>0.010895</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>battery life</td>\n      <td>0.001833</td>\n      <td>0.024781</td>\n      <td>17</td>\n      <td>0.022949</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>wii u</td>\n      <td>0.000504</td>\n      <td>0.016035</td>\n      <td>11</td>\n      <td>0.015531</td>\n      <td>67</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nce_ngram.decreased_terms_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>diff</th>\n      <th>pos_prop</th>\n      <th>pos_count</th>\n      <th>neg_prop</th>\n      <th>neg_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>son love</td>\n      <td>-0.035564</td>\n      <td>0.002915</td>\n      <td>2</td>\n      <td>0.038479</td>\n      <td>166</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>kid love</td>\n      <td>-0.024370</td>\n      <td>0.004373</td>\n      <td>3</td>\n      <td>0.028744</td>\n      <td>124</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>great game</td>\n      <td>-0.018442</td>\n      <td>0.007289</td>\n      <td>5</td>\n      <td>0.025730</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>great product</td>\n      <td>-0.014171</td>\n      <td>0.004373</td>\n      <td>3</td>\n      <td>0.018544</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>great console</td>\n      <td>-0.013641</td>\n      <td>0.005831</td>\n      <td>4</td>\n      <td>0.019471</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>best console</td>\n      <td>-0.013609</td>\n      <td>0.001458</td>\n      <td>1</td>\n      <td>0.015067</td>\n      <td>65</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>highly recommend</td>\n      <td>-0.012615</td>\n      <td>0.002915</td>\n      <td>2</td>\n      <td>0.015531</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>absolutely love</td>\n      <td>-0.011987</td>\n      <td>0.001458</td>\n      <td>1</td>\n      <td>0.013445</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>game system</td>\n      <td>-0.011746</td>\n      <td>0.021866</td>\n      <td>15</td>\n      <td>0.033611</td>\n      <td>145</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>love switch</td>\n      <td>-0.011452</td>\n      <td>0.013120</td>\n      <td>9</td>\n      <td>0.024571</td>\n      <td>106</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ALaughingHorse/comparative_keyword_extraction/archive/v_012.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ALaughingHorse/comparative_keyword_extraction",
    "keywords": "NLP",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "compExtract",
    "package_url": "https://pypi.org/project/compExtract/",
    "platform": "",
    "project_url": "https://pypi.org/project/compExtract/",
    "project_urls": {
      "Download": "https://github.com/ALaughingHorse/comparative_keyword_extraction/archive/v_012.tar.gz",
      "Homepage": "https://github.com/ALaughingHorse/comparative_keyword_extraction"
    },
    "release_url": "https://pypi.org/project/compExtract/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extract keywords via comparison of corpus",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11390696,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1510dd1a78deb904e1e9f0fb8df59b2df9e6a1d53fa274bb9ad03023a69f7e6c",
          "md5": "a6175dd18e1fc58bf81369f8fca3fed3",
          "sha256": "b8d0a47437e155b237b8ea05e49e6a6b207d742ff277d6ee369c88a2edb30a3a"
        },
        "downloads": -1,
        "filename": "compExtract-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a6175dd18e1fc58bf81369f8fca3fed3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8112,
        "upload_time": "2021-09-07T23:58:14",
        "upload_time_iso_8601": "2021-09-07T23:58:14.929627Z",
        "url": "https://files.pythonhosted.org/packages/15/10/dd1a78deb904e1e9f0fb8df59b2df9e6a1d53fa274bb9ad03023a69f7e6c/compExtract-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0a3a9f81623cff9265901033102b2fb31c6edb71212a41fc02da923d87a742c",
          "md5": "15ae6f650c5f8f644a3bfc29d88b6a47",
          "sha256": "b8ae41b96da2c4184d23904b073a20d812aeca8bfc770b028b8f94747e6fc745"
        },
        "downloads": -1,
        "filename": "compExtract-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "15ae6f650c5f8f644a3bfc29d88b6a47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8057,
        "upload_time": "2021-09-08T00:07:18",
        "upload_time_iso_8601": "2021-09-08T00:07:18.105407Z",
        "url": "https://files.pythonhosted.org/packages/f0/a3/a9f81623cff9265901033102b2fb31c6edb71212a41fc02da923d87a742c/compExtract-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0a3a9f81623cff9265901033102b2fb31c6edb71212a41fc02da923d87a742c",
        "md5": "15ae6f650c5f8f644a3bfc29d88b6a47",
        "sha256": "b8ae41b96da2c4184d23904b073a20d812aeca8bfc770b028b8f94747e6fc745"
      },
      "downloads": -1,
      "filename": "compExtract-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "15ae6f650c5f8f644a3bfc29d88b6a47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8057,
      "upload_time": "2021-09-08T00:07:18",
      "upload_time_iso_8601": "2021-09-08T00:07:18.105407Z",
      "url": "https://files.pythonhosted.org/packages/f0/a3/a9f81623cff9265901033102b2fb31c6edb71212a41fc02da923d87a742c/compExtract-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}