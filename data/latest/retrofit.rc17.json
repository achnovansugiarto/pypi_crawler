{
  "info": {
    "author": "['Adrian Antico', 'Sean Benner']",
    "author_email": "adrianantico@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Version: 0.1.7](https://img.shields.io/static/v1?label=Version&message=0.1.7&color=blue&?style=plastic)\n![Python](https://img.shields.io/badge/Python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9-blue)\n![Build: Passing](https://img.shields.io/static/v1?label=Build&message=passing&color=brightgreen)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=default)](http://makeapullrequest.com)\n[![GitHub Stars](https://img.shields.io/github/stars/AdrianAntico/RetroFit.svg?style=social)](https://github.com/AdrianAntico/retrofit)\n\n<img src='https://raw.githubusercontent.com/AdrianAntico/RetroFit/main/images/PackageLogo.PNG' align='center' width='1000' />\n\n## Quick Note\nThis package is currently in its beginning stages. I'll be working off a blueprint from my R package RemixAutoML so there should be minimal breakages upon new releases, only non-breaking enhancements and additions. \n\n## Installation\n```\n# Most up-to-date\npip install git+https://github.com/AdrianAntico/RetroFit.git#egg=retrofit\n\n# From pypi\npip install retrofit==0.1.7\n\n# Check out R package RemixAutoML\nhttps://github.com/AdrianAntico/RemixAutoML\n```\n\n\n## Feature Engineering\n\n> Feature Engineering - Some of the feature engineering functions can only be found in this package. I believe feature engineering is your best bet for improving model performance. I have functions that cover all feature types. There are feature engineering functions for numeric data, categorical data, text data, and date data. They are all designed to generate features for training and scoring pipelines and they run extremely fast with low memory utilization. The Feature Engineering class offers the user the ability to have features generated using datatable, polars, or pandas for all feature engineering and data wrangling related methods. All methods collect paramter settings which will be used for scoring pipelines without the need for the user to save them. This makes life really easy when designing training and scoring pipelines. \n\n## Machine Learning\n\n> Machine Learning Training: the goal here is enable the data scientist or machine learning engineer to effortlessly build any number of models with full optionality to tweak all available underlying parameters offered by the various algorithms. The underlying data can come from datatable or polars which means you'll be able to model with bigger data than if you were utilizing pandas. All models come with the ability to generate comprehensive evaluation metrics, evaluation plots, importances, and feature insights. Scoring should be seamless, from regenerating features for scoring to the actual scoring. The RetroFit class makes this super easy, fast, with minimal memory utilization.\n\n\n\n<img src='https://raw.githubusercontent.com/AdrianAntico/RetroFit/main/images/Documentation.PNG' align='center' width='1000' />\n\n\n\n\n## Feature Engineering\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n\n### FE0 Feature Engineering: Row-Dependence\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n\n#### **FE0_AutoLags()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE0_AutoLags()</code> Automatically generate any number of lags, for any number of columns, by any number of By-Variables, using datatable.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# QA: Test FE0_AutoLags\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import PolarsFE as pfe\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# No Group Example: datatable\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = dt.fread(FilePath)\n\n# Run function\nt_start = timeit.default_timer()\ndata1 = FE.FE0_AutoLags(\n  data=data, \n  LagPeriods=1, \n  LagColumnNames='Leads', \n  DateColumnName='CalendarDateColumn', \n  ByVariables=None, \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args = False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\ndel Output\nprint(data1.names)\n\n# No Group Example: polars\n\n# Instantiate Feature Engineering Class\nFE = pfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = pl.read_csv(FilePath)\nt_start = timeit.default_timer()\ndata2 = FE.FE0_AutoLags(\n  data=data,\n  LagPeriods=1,\n  LagColumnNames='Leads',\n  DateColumnName='CalendarDateColumn',\n  ByVariables=None,\n  ImputeValue=-1.0,\n  Sort=True,\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data2.columns)\n\n# Group Example, Single Lag: datatable\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\nt_start = timeit.default_timer()\ndata1 = FE.FE0_AutoLags(\n  data=data, \n  LagPeriods=1, \n  LagColumnNames='Leads', \n  DateColumnName='CalendarDateColumn', \n  ByVariables=['MarketingSegments','MarketingSegments2','MarketingSegments3', 'Label'], \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data1.names)\n\n# Group Exmaple: polars\n\n# Instantiate Feature Engineering Class\nFE = pfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = pl.read_csv(FilePath)\nt_start = timeit.default_timer()\ndata2 = FE.FE0_AutoLags(\n  data=data, \n  LagPeriods=1, \n  LagColumnNames='Leads', \n  DateColumnName='CalendarDateColumn', \n  ByVariables=['MarketingSegments','MarketingSegments2','MarketingSegments3', 'Label'], \n  ImputeValue=-1.0, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data2.columns)\n\n# Group and Multiple Periods and LagColumnNames: datatable\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\nt_start = timeit.default_timer()\ndata1 = FE.FE0_AutoLags(\n  data=data, \n  LagPeriods=[1,3,5], \n  LagColumnNames=['Leads','XREGS1'], \n  DateColumnName='CalendarDateColumn', \n  ByVariables=['MarketingSegments','MarketingSegments2','MarketingSegments3', 'Label'], \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data1.names)\n\n# Group and Multiple Periods and LagColumnNames: datatable\n\n# Instantiate Feature Engineering Class\nFE = pfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = pl.read_csv(FilePath)\nt_start = timeit.default_timer()\ndata2 = FE.FE0_AutoLags(\n  data=data, \n  LagPeriods=[1,3,5],\n  LagColumnNames=['Leads','XREGS1'], \n  DateColumnName='CalendarDateColumn', \n  ByVariables=['MarketingSegments','MarketingSegments2','MarketingSegments3', 'Label'], \n  ImputeValue=-1.0, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data2.columns)\n```\n\n</p>\n</details>\n\n\n\n#### **FE0_AutoRollStats()**\n<p>\n\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE0_AutoRollStats()</code> Automatically generate any number of moving averages, moving standard deviations, moving mins and moving maxs from any number of source columns, by any number of By-Variables, using datatable.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Test Function\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\n\n# Group Example:\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoRollStats(\n  data=data, \n  RollColumnNames='Leads', \n  DateColumnName='CalendarDateColumn', \n  ByVariables=None, \n  MovingAvg_Periods=[3,5,7], \n  MovingSD_Periods=[3,5,7], \n  MovingMin_Periods=[3,5,7], \n  MovingMax_Periods=[3,5,7], \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n    \n## Group and Multiple Periods and RollColumnNames:\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Run function\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoRollStats(\n  data=data, \n  RollColumnNames=['Leads','XREGS1'], \n  DateColumnName='CalendarDateColumn', \n  ByVariables=['MarketingSegments', 'MarketingSegments2', 'MarketingSegments3', 'Label'], \n  MovingAvg_Periods=[3,5,7], \n  MovingSD_Periods=[3,5,7], \n  MovingMin_Periods=[3,5,7], \n  MovingMax_Periods=[3,5,7], \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n\n## No Group Example:\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Run function\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoRollStats(\n  data=data, \n  RollColumnNames='Leads', \n  DateColumnName='CalendarDateColumn', \n  ByVariables=None, \n  MovingAvg_Periods=[3,5,7], \n  MovingSD_Periods=[3,5,7], \n  MovingMin_Periods=[3,5,7], \n  MovingMax_Periods=[3,5,7], \n  ImputeValue=-1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n```\n\n</p>\n</details>\n\n\n\n#### **FE0_AutoDiff()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE0_AutoDiff()</code> Automatically generate any number of differences from any number of source columns, for numeric, character, and date columns, by any number of By-Variables, using datatable.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Test Function\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\n\n## Group Example:\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoDiff(\n  data=data, \n  DateColumnName = 'CalendarDateColumn', \n  ByVariables = ['MarketingSegments', 'MarketingSegments2', 'MarketingSegments3', 'Label'], \n  DiffNumericVariables = 'Leads', \n  DiffDateVariables = 'CalendarDateColumn', \n  DiffGroupVariables = None, \n  NLag1 = 0, \n  NLag2 = 1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n    \n## Group and Multiple Periods and RollColumnNames:\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv')\ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoDiff(\n  data=data, \n  DateColumnName = 'CalendarDateColumn',\n  ByVariables = ['MarketingSegments', 'MarketingSegments2', 'MarketingSegments3', 'Label'], \n  DiffNumericVariables = 'Leads', \n  DiffDateVariables = 'CalendarDateColumn', \n  DiffGroupVariables = None, \n  NLag1 = 0, \n  NLag2 = 1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n\n## No Group Example:\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.FE0_AutoDiff(\n  data=data, \n  DateColumnName = 'CalendarDateColumn', \n  ByVariables = None, \n  DiffNumericVariables = 'Leads', \n  DiffDateVariables = 'CalendarDateColumn', \n  DiffGroupVariables = None, \n  NLag1 = 0, \n  NLag2 = 1, \n  Sort=True, \n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nprint(data.names)\n```\n\n</p>\n</details>\n\n\n\n</p>\n</details>\n\n\n### FE1 Feature Engineering: Row-Independence\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n#### **FE1_AutoCalendarVariables()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE1_AutoCalendarVariables()</code> Automatically generate calendar variables from your datatable.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Test Function\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import PolarsFE as pfe\n\n# DatatableFE\n \n# Data can be created using the R package RemixAutoML and function FakeDataGenerator\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.AutoCalendarVariables(\n  data=data, \n  DateColumnNames = 'CalendarDateColumn',\n  CalendarVariables = ['wday','mday','month','quarter','year'],\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\ndata.names\n\n# PolarsFE\n\n# Instantiate Feature Engineering Class\nFE = pfe.FE()\n\nt_start = timeit.default_timer()\ndata = FE.AutoCalendarVariables(\n  data=data,\n  DateColumnNames = 'CalendarDateColumn',\n  CalendarVariables = ['wday','mday','month','quarter','year'],\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\ndata.names\n```\n\n</p>\n</details>\n\n\n\n\n\n#### **FE1_DummyVariables()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE1_DummyVariables()</code> Automatically generate dummy variables for user supplied categorical columns\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Example: datatable\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import PolarsFE as pfe\n\n# DatatableFE\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Run function\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\nt_start = timeit.default_timer()\ndata = FE.FE1_DummyVariables(\n  data=data, \n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2'], \n  use_saved_args=False)\nt_end = timeit.default_timer()\nt_end - t_start\n\n# Example: polars\n# DatatableFE\n\n# Instantiate Feature Engineering Class\nFE = pfe.FE()\n\n# Run function\ndata = pl.read_csv('C:/Users/Bizon/Documents/GitHub/BenchmarkData.csv')\nt_start = timeit.default_timer()\ndata = FE.FE1_DummyVariables(\n  data=data, \n  ArgsList=None, \n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2'], \n  use_saved_args=False)\nt_end = timeit.default_timer()\nt_end - t_start\n```\n\n</p>\n</details>\n\n\n\n\n</p>\n</details>\n\n\n\n### FE2 Feature Engineering: Full-Data-Set\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n#### **FE2_ColTypeConversions()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE2_ColTypeConversions()</code> Automatically convert column types required by certain models\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    self,\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=False,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n```\n\n</p>\n</details>\n\n\n\n#### **FE2_AutoDataParition()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>FE2_AutoDataParition()</code> Automatically create data sets for training based on random or time based splits\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n\n```\n# FE2_AutoDataParition Example\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import PolarsFE as pfe\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv')\ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# datatable random Example\nt_start = timeit.default_timer()\nDataSets = FE.FE2_AutoDataParition(\n  data=data,\n  DateColumnName='CalendarDateColumn',\n  PartitionType='random',\n  Ratios=[0.70,0.20,0.10],\n  Sort = False,\n  ByVariables=None,\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\n\n# polars random Example\ndata = pl.read_csv(FilePath)\nt_start = timeit.default_timer()\nDataSets = FE.FE2_AutoDataParition(\n  data=data,\n  DateColumnName='CalendarDateColumn',\n  PartitionType='random',\n  Ratios=[0.70,0.20,0.10],\n  ByVariables=None,\n  Sort = False,\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\n\n# datatable time Example\ndata = dt.fread(FilePath)\nt_start = timeit.default_timer()\nDataSets = FE.FE2_AutoDataParition(\n  data=data,\n  DateColumnName='CalendarDateColumn',\n  PartitionType='time',\n  Ratios=[0.70,0.20,0.10],\n  Sort = True,\n  ByVariables=None,\n  use_saved_args=False)\nt_end = timeit.default_timer()\nprint(t_end - t_start)\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\n\n# polars time Example\ndata = pl.read_csv(FilePath)\nt_start = timeit.default_timer()\nDataSets = FE.FE2_AutoDataParition(\n  data=data,\n  DateColumnName='CalendarDateColumn',\n  PartitionType='time',\n  Ratios=[0.70,0.20,0.10],\n  ByVariables=None,\n  Sort = True,\n  use_saved_args=False)\nt_end = timeit.default_timer()\nt_end - t_start\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\n```\n\n</p>\n</details>\n\n\n\n\n</p>\n</details>\n\n\n### FE3 Feature Engineering: Model-Based\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n##### Coming soon\n\n</p>\n</details>\n\n</p>\n</details>\n\n\n\n## Machine Learning\n<p>\n \n<details><summary>Expand to view content</summary>\n<p>\n\n\n### ML0 Machine Learning: Prepare for Modeling\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n\n#### **ML0_Parameters()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>ML0_Parameters()</code> Automatically generate parameters for modeling. User can update the parameters as desired.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nfrom datatable import sort, f, by\nimport retrofit\nfrom retrofit import FeatureEngineering as fe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n\n# Create partitioned data sets\nData = fe.FE2_AutoDataParition(\n  data=data, \n  ArgsList=None, \n  DateColumnName=None, \n  PartitionType='random', \n  Ratios=[0.7,0.2,0.1], \n  ByVariables=None, \n  Sort=False, \n  Processing='datatable', \n  InputFrame='datatable', \n  OutputFrame='datatable')\n\n# Prepare modeling data sets\nDataSets = ml.ML0_GetModelData(\n  Processing='catboost',\n  TrainData=Data['TrainData'],\n  ValidationData=Data['ValidationData'],\n  TestData=Data['TestData'],\n  ArgsList=None,\n  TargetColumnName='Leads',\n  NumericColumnNames=['XREGS1','XREGS2','XREGS3'],\n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2','MarketingSegments3','Label'],\n  TextColumnNames=None,\n  WeightColumnName=None,\n  Threads=-1,\n  InputFrame='datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms='CatBoost', \n  TargetType='Regression', \n  TrainMethod='Train')\n```\n\n</p>\n</details>\n\n\n\n#### **ML0_GetModelData()**\n<p>\n\n<details><summary>Function Description</summary>\n<p>\n \n<code>ML0_GetModelData()</code> Automatically create data sets chosen ML algorithm. Currently supports catboost, xgboost, and lightgbm.\n\n</p>\n</details>\n\n<details><summary>Code Example</summary>\n<p>\n\n```\n# ML0_GetModelData Example:\nimport pkg_resources\nimport datatable as dt\nfrom datatable import sort, f, by\nimport retrofit\nfrom retrofit import FeatureEngineering as fe\nfrom retrofit import MachineLearning as ml\n\n############################################################################################\n# CatBoost\n############################################################################################\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n    \n# Create partitioned data sets\nDataSets = fe.FE2_AutoDataParition(\n  data=data, \n  ArgsList=None, \n  DateColumnName='CalendarDateColumn', \n  PartitionType='random', \n  Ratios=[0.70,0.20,0.10], \n  ByVariables=None, \n  Processing='datatable', \n  InputFrame='datatable', \n  OutputFrame='datatable')\n\n# Collect partitioned data\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\ndel DataSets\n\n# Create catboost data sets\nDataSets = ml.ML0_GetModelData(\n  TrainData=TrainData, \n  ValidationData=ValidationData, \n  TestData=TestData, \n  ArgsList=None, \n  TargetColumnName='Leads', \n  NumericColumnNames=['XREGS1', 'XREGS2', 'XREGS3'], \n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2','MarketingSegments3','Label'], \n  TextColumnNames=None, \n  WeightColumnName=None, \n  Threads=-1, \n  Processing='catboost', \n  InputFrame='datatable')\n  \n# Collect catboost training data\ncatboost_train = DataSets['train_data']\ncatboost_validation = DataSets['validation_data']\ncatboost_test = DataSets['test_data']\n\n############################################################################################\n# XGBoost\n############################################################################################\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n    \n# Create partitioned data sets\nDataSets = fe.FE2_AutoDataParition(\n  data=data, \n  ArgsList=None, \n  DateColumnName='CalendarDateColumn', \n  PartitionType='random', \n  Ratios=[0.70,0.20,0.10], \n  ByVariables=None, \n  Processing='datatable', \n  InputFrame='datatable', \n  OutputFrame='datatable')\n\n# Collect partitioned data\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\ndel DataSets\n\n# Create xgboost data sets\nDataSets = ml.ML0_GetModelData(\n  TrainData=TrainData, \n  ValidationData=ValidationData, \n  TestData=TestData, \n  ArgsList=None, \n  TargetColumnName='Leads', \n  NumericColumnNames=['XREGS1', 'XREGS2', 'XREGS3'], \n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2','MarketingSegments3','Label'], \n  TextColumnNames=None, \n  WeightColumnName=None, \n  Threads=-1, \n  Processing='xgboost', \n  InputFrame='datatable')\n  \n# Collect xgboost training data\nxgboost_train = DataSets['train_data']\nxgboost_validation = DataSets['validation_data']\nxgboost_test = DataSets['test_data']\n\n############################################################################################\n# LightGBM\n############################################################################################\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/BenchmarkData.csv') \ndata = dt.fread(FilePath)\n    \n# Create partitioned data sets\nDataSets = fe.FE2_AutoDataParition(\n  data=data, \n  ArgsList=None, \n  DateColumnName='CalendarDateColumn', \n  PartitionType='random', \n  Ratios=[0.70,0.20,0.10], \n  ByVariables=None, \n  Processing='datatable', \n  InputFrame='datatable', \n  OutputFrame='datatable')\n\n# Collect partitioned data\nTrainData = DataSets['TrainData']\nValidationData = DataSets['ValidationData']\nTestData = DataSets['TestData']\ndel DataSets\n\n# Create lightgbm data sets\nDataSets = ml.ML0_GetModelData(\n  TrainData=TrainData, \n  ValidationData=ValidationData, \n  TestData=TestData, \n  ArgsList=None, \n  TargetColumnName='Leads', \n  NumericColumnNames=['XREGS1', 'XREGS2', 'XREGS3'], \n  CategoricalColumnNames=['MarketingSegments','MarketingSegments2','MarketingSegments3','Label'], \n  TextColumnNames=None, \n  WeightColumnName=None, \n  Threads=-1, \n  Processing='lightgbm', \n  InputFrame='datatable')\n  \n# Collect lightgbm training data\nlightgbm_train = DataSets['train_data']\nlightgbm_validation = DataSets['validation_data']\nlightgbm_test = DataSets['test_data']\n```\n\n</p>\n</details>\n\n\n</p>\n</details>\n\n\n\n### **ML1 Machine Learning: RetroFit Class**\n<p>\n\n<details><summary>Expand to view content</summary>\n<p>\n\n\n<details><summary>Class Meta Information</summary>\n<p>\n\n\n<details><summary>Class Goals</summary>\n<p>\n\n```\n####################################\n# Goals\n####################################\n\nClass Initialization\nModel Initialization\nTraining\nFeature Tuning\nGrid Tuning\nModel Scoring\nModel Evaluation\nModel Interpretation\n```\n\n</p>\n</details>\n\n<details><summary>Class Functions</summary>\n<p>\n\n```\n####################################\n# Functions\n####################################\n\nML1_Single_Train()\nML1_Single_Score()\nML1_Single_Evaluate()\nPrintAlgoArgs()\n```\n\n</p>\n</details>\n\n\n<details><summary>Class Attributes</summary>\n<p>\n\n```\n####################################\n# Attributes\n####################################\n\nself.ModelArgs = ModelArgs\nself.ModelArgsNames = [*self.ModelArgs]\nself.Runs = len(self.ModelArgs)\nself.DataSets = DataSets\nself.DataSetsNames = [*self.DataSets]\nself.ModelList = dict()\nself.ModelListNames = []\nself.FitList = dict()\nself.FitListNames = []\nself.EvaluationList = dict()\nself.EvaluationListNames = []\nself.InterpretationList = dict()\nself.InterpretationListNames = []\nself.CompareModelsList = dict()\nself.CompareModelsListNames = []\n```\n\n</p>\n</details>\n\n</p>\n</details>\n\n\n\n<details><summary>Ftrl Examples</summary>\n<p>\n\n\n<details><summary>Regression Training</summary>\n<p>\n\n```\n####################################\n# Ftrl Regression\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'Ftrl',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_1','Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_1', 'Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'Ftrl', \n  TargetType = 'Regression', \n  TrainMethod = 'Train')\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'Ftrl')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2], \n  ModelName = x.ModelListNames[0], \n  Algorithm = 'Ftrl', \n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('Ftrl')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=None)\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_Ftrl_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo='Ftrl')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>Classification Training</summary>\n<p>\n\n```\n####################################\n# Ftrl Classification\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/ClassificationData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'Ftrl',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_1','Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_1', 'Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'Ftrl', \n  TargetType = 'Classification', \n  TrainMethod = 'Train')\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'Ftrl')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'Ftrl',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('Ftrl')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=1))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_Ftrl_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo='Ftrl')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>MultiClass Training</summary>\n<p>\n\n```\n####################################\n# Ftrl MultiClass\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/MultiClassData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'Ftrl',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'Ftrl',\n  TargetType = 'MultiClass',\n  TrainMethod = 'Train')\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'Ftrl')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'Ftrl',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('Ftrl')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=1))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_Ftrl_1').names\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo='Ftrl')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n</p>\n</details>\n\n\n<details><summary>CatBoost Examples</summary>\n<p>\n\n<details><summary>Regression Training</summary>\n<p>\n\n```\n####################################\n# CatBoost Regression\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'catboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_1','Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_1', 'Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'CatBoost', \n  TargetType = 'Regression', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('CatBoost').get('AlgoArgs')['iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'CatBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2], \n  ModelName = x.ModelListNames[0],\n  Algorithm = 'CatBoost',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('CatBoost')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=None)\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_CatBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'CatBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>Classification Training</summary>\n<p>\n\n```\n####################################\n# CatBoost Classification\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/ClassificationData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'catboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_1','Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_1', 'Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'CatBoost', \n  TargetType = 'Classification', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('CatBoost').get('AlgoArgs')['iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'CatBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2], \n  ModelName = x.ModelListNames[0],\n  Algorithm = 'CatBoost',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('CatBoost')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=0))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_CatBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'CatBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>MultiClass Training</summary>\n<p>\n\n```\n####################################\n# CatBoost MultiClass\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/MultiClassData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'catboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = [z for z in list(data.names) if z not in ['Factor_2','Factor_3','Adrian']],\n  CategoricalColumnNames = ['Factor_2', 'Factor_3'],\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'CatBoost',\n  TargetType = 'MultiClass',\n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('CatBoost').get('AlgoArgs')['iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'CatBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2], \n  ModelName = x.ModelListNames[0],\n  Algorithm = 'CatBoost',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('CatBoost')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=0))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_CatBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'CatBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n</p>\n</details>\n\n\n<details><summary>XGBoost Examples</summary>\n<p>\n\n\n<details><summary>Regression Training</summary>\n<p\n\n```\n####################################\n# XGBoost Regression\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_1','Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_1','Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'xgboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'XGBoost', \n  TargetType = 'Regression', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs['XGBoost']['AlgoArgs']['num_boost_round'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(\n  ModelArgs,\n  ModelData,\n  DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'XGBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'XGBoost',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('XGBoost')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=None)\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_XGBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'XGBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>Classification Training</summary>\n<p>\n\n```\n####################################\n# XGBoost Classification\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/ClassificationData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_1','Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_1','Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'xgboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'XGBoost', \n  TargetType = 'Classification', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('XGBoost').get('AlgoArgs')['num_boost_round'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'XGBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'XGBoost',\n  NewData = None)\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('XGBoost')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=0))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_XGBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'XGBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>MultiClass Training</summary>\n<p>\n\n```\n####################################\n# XGBoost MultiClass\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/MultiClassData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'xgboost',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'XGBoost',\n  TargetType = 'MultiClass',\n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('XGBoost').get('AlgoArgs')['num_boost_round'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'XGBoost')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'XGBoost',\n  NewData = None)\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_XGBoost_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'XGBoost')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n</p>\n</details>\n\n\n<details><summary>LightGBM Examples</summary>\n<p>\n\n\n<details><summary>Regression Training</summary>\n<p>\n\n```\n####################################\n# LightGBM Regression\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/RegressionData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_1','Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_1','Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'lightgbm',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'LightGBM', \n  TargetType = 'Regression', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('LightGBM').get('AlgoArgs')['num_iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'LightGBM')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'LightGBM')\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_LightGBM_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'LightGBM')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>Classification Training</summary>\n<p>\n\n```\n####################################\n# LightGBM Classification\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/ClassificationData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Create some lags\ndata = FE.FE0_AutoLags(\n    data,\n    LagColumnNames=['Independent_Variable1', 'Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    LagPeriods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some rolling stats\ndata = FE.FE0_AutoRollStats(\n    data,\n    RollColumnNames=['Independent_Variable1','Independent_Variable2'],\n    DateColumnName='DateTime',\n    ByVariables='Factor_1',\n    MovingAvg_Periods=[1,2],\n    MovingSD_Periods=[2,3],\n    MovingMin_Periods=[1,2],\n    MovingMax_Periods=[1,2],\n    ImputeValue=-1,\n    Sort=True,\n    use_saved_args=False)\n\n# Create some diffs\ndata = FE.FE0_AutoDiff(\n    data,\n    DateColumnName='DateTime',\n    ByVariables=['Factor_1','Factor_2','Factor_3'],\n    DiffNumericVariables='Independent_Variable1',\n    DiffDateVariables=None,\n    DiffGroupVariables=None,\n    NLag1=0,\n    NLag2=1,\n    Sort=True,\n    use_saved_args=False)\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_1','Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_1','Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'lightgbm',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'LightGBM', \n  TargetType = 'Classification', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('LightGBM').get('AlgoArgs')['num_iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'LightGBM')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'LightGBM')\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('LightGBM')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=0))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_LightGBM_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'LightGBM')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n\n<details><summary>MultiClass Training</summary>\n<p>\n\n```\n####################################\n# LightGBM MultiClass\n####################################\n\n# Setup Environment\nimport pkg_resources\nimport timeit\nimport datatable as dt\nimport retrofit\nfrom retrofit import DatatableFE as dtfe\nfrom retrofit import MachineLearning as ml\n\n# Load some data\nFilePath = pkg_resources.resource_filename('retrofit', 'datasets/MultiClassData.csv') \ndata = dt.fread(FilePath)\n\n# Instantiate Feature Engineering Class\nFE = dtfe.FE()\n\n# Dummify\ndata = FE.FE1_DummyVariables(\n  data = data, \n  CategoricalColumnNames = ['Factor_2','Factor_3'],\n  use_saved_args=False)\ndata = data[:, [name not in ['Factor_2','Factor_3'] for name in data.names]]\n\n# Create Calendar Vars\ndata = FE.FE1_AutoCalendarVariables(\n    data,\n    DateColumnNames='DateTime',\n    CalendarVariables=['wday','month','quarter'],\n    use_saved_args=False)\n\n# Type conversions for modeling\ndata = FE.FE2_ColTypeConversions(\n    data,\n    Int2Float=True,\n    Bool2Float=True,\n    RemoveDateCols=True,\n    RemoveStrCols=False,\n    SkipCols=None,\n    use_saved_args=False)\n\n# Drop Text Cols (no word2vec yet)\ndata = data[:, [z for z in data.names if z not in ['Comment']]]\n\n# Create partitioned data sets\nDataFrames = FE.FE2_AutoDataPartition(\n  data, \n  DateColumnName = None, \n  PartitionType = 'random', \n  Ratios = [0.7,0.2,0.1], \n  ByVariables = None, \n  Sort = False,\n  use_saved_args = False)\n\n# Features\nFeatures = [z for z in list(data.names) if not z in ['Adrian','DateTime','Comment','Weights']]\n\n# Prepare modeling data sets\nModelData = ml.ML0_GetModelData(\n  Processing = 'lightgbm',\n  TrainData = DataFrames['TrainData'],\n  ValidationData = DataFrames['ValidationData'],\n  TestData = DataFrames['TestData'],\n  ArgsList = None,\n  TargetColumnName = 'Adrian',\n  NumericColumnNames = Features,\n  CategoricalColumnNames = None,\n  TextColumnNames = None,\n  WeightColumnName = None,\n  Threads = -1,\n  InputFrame = 'datatable')\n\n# Get args list for algorithm and target type\nModelArgs = ml.ML0_Parameters(\n  Algorithms = 'LightGBM', \n  TargetType = 'MultiClass', \n  TrainMethod = 'Train')\n\n# Update iterations to run quickly\nModelArgs.get('LightGBM').get('AlgoArgs')['num_iterations'] = 50\n\n# Initialize RetroFit\nx = ml.RetroFit(ModelArgs, ModelData, DataFrames)\n\n# Train Model\nx.ML1_Single_Train(Algorithm = 'LightGBM')\n\n# Score data\nx.ML1_Single_Score(\n  DataName = x.DataSetsNames[2],\n  ModelName = x.ModelListNames[0],\n  Algorithm = 'LightGBM')\n\n# Evaluate scored data\nmetrics = x.ML1_Single_Evaluate(\n  FitName=x.FitListNames[0],\n  TargetType=x.ModelArgs.get('LightGBM')['TargetType'],\n  ScoredDataName=x.DataSetsNames[-1],\n  ByVariables=None,\n  CostDict=dict(tpcost=0, fpcost=1, fncost=1, tncost=0))\n\n# Metrics\nmetrics.keys()\n\n# Scoring data names\nx.DataSetsNames\n\n# Scoring data\nx.DataSets.get('Scored_test_data_LightGBM_1')\n\n# Check ModelArgs Dict\nx.PrintAlgoArgs(Algo = 'LightGBM')\n\n# List of model names\nx.ModelListNames\n\n# List of model fitted names\nx.FitListNames\n```\n\n</p>\n</details>\n\n</p>\n</details>\n\n\n\n\n</p>\n</details>\n\n\n</p>\n</details>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AdrianAntico/retrofit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "retrofit",
    "package_url": "https://pypi.org/project/retrofit/",
    "platform": "",
    "project_url": "https://pypi.org/project/retrofit/",
    "project_urls": {
      "Homepage": "https://github.com/AdrianAntico/retrofit"
    },
    "release_url": "https://pypi.org/project/retrofit/0.1.7/",
    "requires_dist": [
      "datatable",
      "pandas",
      "scipy",
      "numpy",
      "polars",
      "catboost",
      "xgboost",
      "lightgbm"
    ],
    "requires_python": "",
    "summary": "AutoML, Forecasting, NLP, Image Classification, Feature Engineering, Model Evaluation, Model Interpretation, Fast Processing.",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11514806,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d571266c37affcb7f94943ee2a35f0f3a7a3a21add8db24ec12cc4b601fca91",
          "md5": "0ac3a96c3ffe0a4d8b71189b0019828b",
          "sha256": "41ba8bbe1648f248baca284b9d67bfb49e7571c4a3109f275277db1e627636b0"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ac3a96c3ffe0a4d8b71189b0019828b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9375,
        "upload_time": "2021-08-24T04:26:26",
        "upload_time_iso_8601": "2021-08-24T04:26:26.883297Z",
        "url": "https://files.pythonhosted.org/packages/8d/57/1266c37affcb7f94943ee2a35f0f3a7a3a21add8db24ec12cc4b601fca91/retrofit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ce7a645b6b8f1b3f6b38494ca596958aee6dc4c4b8f038a9711eb0d7f47ff61",
          "md5": "30da9b566eee487783bec99b663c593b",
          "sha256": "b34ebe09b4d086c2bfa0a6787fed30969a69ed46b7888fe07aaa004fce067588"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30da9b566eee487783bec99b663c593b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11966,
        "upload_time": "2021-08-24T04:26:27",
        "upload_time_iso_8601": "2021-08-24T04:26:27.847896Z",
        "url": "https://files.pythonhosted.org/packages/9c/e7/a645b6b8f1b3f6b38494ca596958aee6dc4c4b8f038a9711eb0d7f47ff61/retrofit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4824a27d39cc5a9eb8d3203add562f1c93802f00dc17d99826e518801050675c",
          "md5": "1eda94be413fb1b74bea43053d9485da",
          "sha256": "85a3c3f5449505ee0a86433d63e8968741d3846c557910907e06227989fd0669"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1eda94be413fb1b74bea43053d9485da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9346,
        "upload_time": "2021-08-24T04:43:38",
        "upload_time_iso_8601": "2021-08-24T04:43:38.815133Z",
        "url": "https://files.pythonhosted.org/packages/48/24/a27d39cc5a9eb8d3203add562f1c93802f00dc17d99826e518801050675c/retrofit-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbb55201c6892db78e8af07f22ab4a449fb0cbbb60f135b5e1d303156ba8eeb8",
          "md5": "8b39406c751274f0e877ae7cb5daf7fa",
          "sha256": "a61a7451fe1bac2cee760ec3af3d201de8e845ff2b2356ec3308166cda6af5d5"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b39406c751274f0e877ae7cb5daf7fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11912,
        "upload_time": "2021-08-24T04:43:39",
        "upload_time_iso_8601": "2021-08-24T04:43:39.628800Z",
        "url": "https://files.pythonhosted.org/packages/cb/b5/5201c6892db78e8af07f22ab4a449fb0cbbb60f135b5e1d303156ba8eeb8/retrofit-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aeda6e68840c0e362b367f1026ceaeaba3cc9c9b522d00787f575a4bcf5bd90",
          "md5": "0cb9c3a45268674ee4a6c43ca01d04af",
          "sha256": "73eac199e1632873b670c596e9420c1a4e54bf8592fdaba42dd50cc5bd605658"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cb9c3a45268674ee4a6c43ca01d04af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8794,
        "upload_time": "2021-08-24T04:49:31",
        "upload_time_iso_8601": "2021-08-24T04:49:31.233742Z",
        "url": "https://files.pythonhosted.org/packages/4a/ed/a6e68840c0e362b367f1026ceaeaba3cc9c9b522d00787f575a4bcf5bd90/retrofit-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f6cd41d91212500355b68b6ca66e45d205d67112a71a5c237a677e857584d3b",
          "md5": "380ec5202b960ad250a10cbe48f2a480",
          "sha256": "0cb1724577681fa67bac6995fdabea7163c388d8d5be5f81c35d667697fcc8f5"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "380ec5202b960ad250a10cbe48f2a480",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10777,
        "upload_time": "2021-08-24T04:49:32",
        "upload_time_iso_8601": "2021-08-24T04:49:32.161815Z",
        "url": "https://files.pythonhosted.org/packages/7f/6c/d41d91212500355b68b6ca66e45d205d67112a71a5c237a677e857584d3b/retrofit-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0949b420dcaa62ce2107234176750a5042323037faae272e6c614d2fb8e423cc",
          "md5": "4c40b9f58fd4baa1108e2c469e7b55cd",
          "sha256": "7eea26a2d0162c62077d5bb4190f73fd0403addb8fc5cf54b2c7e8c64e410978"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c40b9f58fd4baa1108e2c469e7b55cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13526,
        "upload_time": "2021-08-31T17:27:11",
        "upload_time_iso_8601": "2021-08-31T17:27:11.817666Z",
        "url": "https://files.pythonhosted.org/packages/09/49/b420dcaa62ce2107234176750a5042323037faae272e6c614d2fb8e423cc/retrofit-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02575028f20630ec0973dfca556c422bcc862e9b1d52bd77133d238cbdd93416",
          "md5": "9356322e89811778ab92397c9d599b3d",
          "sha256": "c2ad55a0d17e79f4058cace35f07323a4538e1c176d4c92b67ad72426ae81b6c"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9356322e89811778ab92397c9d599b3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14901,
        "upload_time": "2021-08-31T17:27:13",
        "upload_time_iso_8601": "2021-08-31T17:27:13.141196Z",
        "url": "https://files.pythonhosted.org/packages/02/57/5028f20630ec0973dfca556c422bcc862e9b1d52bd77133d238cbdd93416/retrofit-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e7bf8c3f8012598ce7ede07afa375b91af008d20a0ed41dd5f1f90884fcf294",
          "md5": "f75ed5ea6b7a0a93a78683cdf275312b",
          "sha256": "0a60c634a194aab81206a05fc0dcddbf96b7b862d663c7e71531c9e1172d0510"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f75ed5ea6b7a0a93a78683cdf275312b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13577,
        "upload_time": "2021-08-31T18:01:35",
        "upload_time_iso_8601": "2021-08-31T18:01:35.001269Z",
        "url": "https://files.pythonhosted.org/packages/6e/7b/f8c3f8012598ce7ede07afa375b91af008d20a0ed41dd5f1f90884fcf294/retrofit-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "203081e426bff0a2447bd191e7896891dc6899b9c06cac4bb3df8db888387062",
          "md5": "d39c504ad4ea0c749776e2df55f5f001",
          "sha256": "c6b4355705d0b060897aec4f4c28ba4e08dddb91ec5bda2b7270a560eeb39a3b"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d39c504ad4ea0c749776e2df55f5f001",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14995,
        "upload_time": "2021-08-31T18:01:35",
        "upload_time_iso_8601": "2021-08-31T18:01:35.913633Z",
        "url": "https://files.pythonhosted.org/packages/20/30/81e426bff0a2447bd191e7896891dc6899b9c06cac4bb3df8db888387062/retrofit-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "010766cfbb9077b88a1b324cfa615e43d86312cce9beac29979101f0bee1e4f7",
          "md5": "ade648fd80d6a4a5cbd1d9d910e743a3",
          "sha256": "d4de72c4183346e1f14bedbfb150653ba42f7b04ed41f2660e78a39b140e70ef"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ade648fd80d6a4a5cbd1d9d910e743a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13573,
        "upload_time": "2021-08-31T18:16:02",
        "upload_time_iso_8601": "2021-08-31T18:16:02.959171Z",
        "url": "https://files.pythonhosted.org/packages/01/07/66cfbb9077b88a1b324cfa615e43d86312cce9beac29979101f0bee1e4f7/retrofit-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60fd9c68b51b01a2a324f169de2867f8562cc1198c7b66798087afa86679fdf",
          "md5": "aec1a01c3110fb4a45a693b92ace6b40",
          "sha256": "c2988878c5dfab4ad3b8cbc95064d7717ac98f0614182b3b7860aa8148d40014"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "aec1a01c3110fb4a45a693b92ace6b40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15000,
        "upload_time": "2021-08-31T18:16:03",
        "upload_time_iso_8601": "2021-08-31T18:16:03.937922Z",
        "url": "https://files.pythonhosted.org/packages/c6/0f/d9c68b51b01a2a324f169de2867f8562cc1198c7b66798087afa86679fdf/retrofit-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "076e35ddc61db5402092921c5a8775b475fb04ee22b17acc0227f50c9e11be06",
          "md5": "53a2f85dc58327bbaf580dea494ab236",
          "sha256": "b8b488887836a387eff3775f4ea5a2f242839a59c1eac92711924c1cff7c1b3f"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53a2f85dc58327bbaf580dea494ab236",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13564,
        "upload_time": "2021-08-31T18:26:40",
        "upload_time_iso_8601": "2021-08-31T18:26:40.630873Z",
        "url": "https://files.pythonhosted.org/packages/07/6e/35ddc61db5402092921c5a8775b475fb04ee22b17acc0227f50c9e11be06/retrofit-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31adf8745c04bfb0bff567054667f13c690ae45d596431722e843db9d2290ed8",
          "md5": "5d2031e4b45444d7917f5745763a4508",
          "sha256": "2be41d0e1d04ba0c055b370d49ba519b2a6a183fdf515a5c5c3de77b8d166a8f"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5d2031e4b45444d7917f5745763a4508",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15013,
        "upload_time": "2021-08-31T18:26:41",
        "upload_time_iso_8601": "2021-08-31T18:26:41.959885Z",
        "url": "https://files.pythonhosted.org/packages/31/ad/f8745c04bfb0bff567054667f13c690ae45d596431722e843db9d2290ed8/retrofit-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d9390bdf2330a9d30d66b51762b7edbdd92165f85f36531c25c3ded5a71cd9e",
          "md5": "adcd8ebb619b8895714627580dc00abd",
          "sha256": "9e5fb4e7b7037d44571896f7c874281715a567a97500b65c06a092c29b36b618"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adcd8ebb619b8895714627580dc00abd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13684,
        "upload_time": "2021-09-01T01:41:35",
        "upload_time_iso_8601": "2021-09-01T01:41:35.498431Z",
        "url": "https://files.pythonhosted.org/packages/2d/93/90bdf2330a9d30d66b51762b7edbdd92165f85f36531c25c3ded5a71cd9e/retrofit-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f441745452b5b6c4f69c29df53e8440baa2b2d4a03d6276e265bafd5a3bdeaa",
          "md5": "7e7f60f017f9eca664d8108c7cc03518",
          "sha256": "25d92087708b58bfe3b5f7875a3bac1576a0a8cec245fe1bf1a038cafa5b5959"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7e7f60f017f9eca664d8108c7cc03518",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15141,
        "upload_time": "2021-09-01T01:41:36",
        "upload_time_iso_8601": "2021-09-01T01:41:36.400152Z",
        "url": "https://files.pythonhosted.org/packages/3f/44/1745452b5b6c4f69c29df53e8440baa2b2d4a03d6276e265bafd5a3bdeaa/retrofit-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dac7ee56016b7cb05a7eab857adcf5cf1682ae13b4543f0146c79f7b44878f1",
          "md5": "ca35970ef3a40e048499331a0295564d",
          "sha256": "96ee99a4b7aa5883d35a2bd8399087b80f60825fc90f8d73701477b207aa2ea3"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca35970ef3a40e048499331a0295564d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14464,
        "upload_time": "2021-09-03T06:39:03",
        "upload_time_iso_8601": "2021-09-03T06:39:03.520073Z",
        "url": "https://files.pythonhosted.org/packages/7d/ac/7ee56016b7cb05a7eab857adcf5cf1682ae13b4543f0146c79f7b44878f1/retrofit-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d840c8a90a3506e57d1cfe0bd56a3ab4bd867d5b3375c01a8067e9fc6e5e6b77",
          "md5": "35cca5de18cb103ded93ca8f5c91b90c",
          "sha256": "9adbb7036ffbbed75fc2c3cb8737954fa3fd1e60c9d99be126cb18e0eb55f812"
        },
        "downloads": -1,
        "filename": "retrofit-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "35cca5de18cb103ded93ca8f5c91b90c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16278,
        "upload_time": "2021-09-03T06:39:04",
        "upload_time_iso_8601": "2021-09-03T06:39:04.820228Z",
        "url": "https://files.pythonhosted.org/packages/d8/40/c8a90a3506e57d1cfe0bd56a3ab4bd867d5b3375c01a8067e9fc6e5e6b77/retrofit-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e37345d0063d160577430d23997f2ea7e10ac18a276db74c19a33f3d481ae276",
          "md5": "4e03f301037d222a387baeb57e81945c",
          "sha256": "61d34b5445626ec6052fc2ced67483fb83c9aac2038d1bd0c20cc7978a44639d"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e03f301037d222a387baeb57e81945c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14664,
        "upload_time": "2021-09-04T04:37:29",
        "upload_time_iso_8601": "2021-09-04T04:37:29.711972Z",
        "url": "https://files.pythonhosted.org/packages/e3/73/45d0063d160577430d23997f2ea7e10ac18a276db74c19a33f3d481ae276/retrofit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07e102aca6232d2b2500137dadce0f20f444af6ee9083a2a84d27aec772ecd72",
          "md5": "f4ec11583892b4f5f55e0c984459b1db",
          "sha256": "2f80eef62fb1974d7863068966707da5c0b3b0bc7d2c4d1cfbef7946fc20d0d6"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f4ec11583892b4f5f55e0c984459b1db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16828,
        "upload_time": "2021-09-04T04:37:31",
        "upload_time_iso_8601": "2021-09-04T04:37:31.789421Z",
        "url": "https://files.pythonhosted.org/packages/07/e1/02aca6232d2b2500137dadce0f20f444af6ee9083a2a84d27aec772ecd72/retrofit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb0aff1d3cad07d83e0e8c58198dd87b83cd3e3d1cafd4c3d2c8deee8f36cf04",
          "md5": "10bc9b4ce2269747a90abc9e4fa858f6",
          "sha256": "52e175102c24e04733763ca9a7417410f83642bd550fba6aeff48db6f4b1ec96"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10bc9b4ce2269747a90abc9e4fa858f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17565,
        "upload_time": "2021-09-10T21:58:45",
        "upload_time_iso_8601": "2021-09-10T21:58:45.623028Z",
        "url": "https://files.pythonhosted.org/packages/bb/0a/ff1d3cad07d83e0e8c58198dd87b83cd3e3d1cafd4c3d2c8deee8f36cf04/retrofit-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94f949681704c9db5669c14791faa44a4fadec79476441291cd14e84838b0da6",
          "md5": "628350f97d798511a208785735362514",
          "sha256": "c76c8d494eff716214093ec914b4f36bf3dd63e5f5f39cb747fa6cdb56a9d574"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "628350f97d798511a208785735362514",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20163,
        "upload_time": "2021-09-10T21:58:46",
        "upload_time_iso_8601": "2021-09-10T21:58:46.500030Z",
        "url": "https://files.pythonhosted.org/packages/94/f9/49681704c9db5669c14791faa44a4fadec79476441291cd14e84838b0da6/retrofit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77b7e52b8b0cbfe80b22ed458e9a858c2148fb633ffc3ca0c16c5e3ff4ec0eaa",
          "md5": "a15ce60cf3f89de63c725d3b893c13ce",
          "sha256": "648a6d54df729b5aeaf9449faa22ad5d4df3dde6d5fd2eddd6dac64d322c8a64"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a15ce60cf3f89de63c725d3b893c13ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20473,
        "upload_time": "2021-09-14T06:24:45",
        "upload_time_iso_8601": "2021-09-14T06:24:45.618020Z",
        "url": "https://files.pythonhosted.org/packages/77/b7/e52b8b0cbfe80b22ed458e9a858c2148fb633ffc3ca0c16c5e3ff4ec0eaa/retrofit-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a2ce9eeb7d443b09dd86244686c79d960eefc95ccf483b77374c590fe307f7a",
          "md5": "9d98d8b778a7aaafbec666e5f739b29a",
          "sha256": "4f6d60b00ceec54b139aca8a3b41d1e7074f4cbf58c8a5c574541e69d65380c4"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9d98d8b778a7aaafbec666e5f739b29a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23586,
        "upload_time": "2021-09-14T06:24:46",
        "upload_time_iso_8601": "2021-09-14T06:24:46.536365Z",
        "url": "https://files.pythonhosted.org/packages/0a/2c/e9eeb7d443b09dd86244686c79d960eefc95ccf483b77374c590fe307f7a/retrofit-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29aa8d8baa0413cae5210bb1f18af0fd2d6765fa752e153ac16d5e41c9fe71f4",
          "md5": "c988adec9e36d6d0867c981ec88d708f",
          "sha256": "f2bac3b3d2baf3da2b99ef4252f8560f59c0ff5a1c22638efa2a60f7fb244684"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c988adec9e36d6d0867c981ec88d708f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21159,
        "upload_time": "2021-09-14T21:21:58",
        "upload_time_iso_8601": "2021-09-14T21:21:58.241752Z",
        "url": "https://files.pythonhosted.org/packages/29/aa/8d8baa0413cae5210bb1f18af0fd2d6765fa752e153ac16d5e41c9fe71f4/retrofit-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7261e2df414e4b66f2d02e1968cc2251d012b208c0ce41365a1b88a2c4c87e29",
          "md5": "c0ddd4fa41ddef4d35c7a6396c2231ea",
          "sha256": "fe9741e4f2ccb8d86cf6c3f9a6f3f1dda494afa3bc24ec4bb179c5d1f07144d1"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c0ddd4fa41ddef4d35c7a6396c2231ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26734,
        "upload_time": "2021-09-14T21:21:59",
        "upload_time_iso_8601": "2021-09-14T21:21:59.852317Z",
        "url": "https://files.pythonhosted.org/packages/72/61/e2df414e4b66f2d02e1968cc2251d012b208c0ce41365a1b88a2c4c87e29/retrofit-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "631742cf0fc9d9f09a881e26655d7c73acf6716872086377904b02c4cfa54af6",
          "md5": "86be96a07a0730552bd56ab7d2f54df9",
          "sha256": "947f92c4c448bd594391c485ec85bc047dbc0de1ddb3fe0a2ffbe3ccf1f703f2"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86be96a07a0730552bd56ab7d2f54df9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21755,
        "upload_time": "2021-09-15T06:13:56",
        "upload_time_iso_8601": "2021-09-15T06:13:56.619750Z",
        "url": "https://files.pythonhosted.org/packages/63/17/42cf0fc9d9f09a881e26655d7c73acf6716872086377904b02c4cfa54af6/retrofit-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae8a34c8887b05d3fb16ad156797143403050bfa43f663237585d50dbe322ed",
          "md5": "3641c5a52e48f0eabe9050dae790491c",
          "sha256": "54aeefb3e2c3bbe9a9f5f1cbb7ce1b7517ddf69c3685ab4229fdeaa8c67c8658"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3641c5a52e48f0eabe9050dae790491c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28251,
        "upload_time": "2021-09-15T06:13:57",
        "upload_time_iso_8601": "2021-09-15T06:13:57.630453Z",
        "url": "https://files.pythonhosted.org/packages/ea/e8/a34c8887b05d3fb16ad156797143403050bfa43f663237585d50dbe322ed/retrofit-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e3d3654f0cea4c5840ba05109e59f6750a20df913126d1fb63d081833a3ed67",
          "md5": "5be1b77d3834bbfabe7986ea841cbc3c",
          "sha256": "39a705a691e662e1f22b279da6096f113d21094b02b1de5a1df26632071f1182"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5be1b77d3834bbfabe7986ea841cbc3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29363,
        "upload_time": "2021-09-20T08:00:28",
        "upload_time_iso_8601": "2021-09-20T08:00:28.533602Z",
        "url": "https://files.pythonhosted.org/packages/2e/3d/3654f0cea4c5840ba05109e59f6750a20df913126d1fb63d081833a3ed67/retrofit-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee9f76b365335424f5ec0d5ae3f4835b3e1f89530ed5aa42557094833f717b97",
          "md5": "1c807549c76e660175bfb2d4fe53b94c",
          "sha256": "a1458024e7d73f06b34e2f33399c9d4becff601599cbdbf427494ac8e86983a8"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1c807549c76e660175bfb2d4fe53b94c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37338,
        "upload_time": "2021-09-20T08:00:29",
        "upload_time_iso_8601": "2021-09-20T08:00:29.593101Z",
        "url": "https://files.pythonhosted.org/packages/ee/9f/76b365335424f5ec0d5ae3f4835b3e1f89530ed5aa42557094833f717b97/retrofit-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9efeaec13d2b0811dc57f03946ce82a92a7fb152aa020648b357208eee991dfe",
          "md5": "56a32a650cdbc2d61445734ccafee7f0",
          "sha256": "a171263b421d195316db621fcce76aa7c5fb3a95cd42af531978b08ac8805346"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56a32a650cdbc2d61445734ccafee7f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30349,
        "upload_time": "2021-09-21T07:27:58",
        "upload_time_iso_8601": "2021-09-21T07:27:58.136178Z",
        "url": "https://files.pythonhosted.org/packages/9e/fe/aec13d2b0811dc57f03946ce82a92a7fb152aa020648b357208eee991dfe/retrofit-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c22f600c43bc0d164388bb5e41d64f69f190ae4df359a41195184fb8b1a1b3f7",
          "md5": "e430a13ce1c7ad1466d450ec3a04cb34",
          "sha256": "e273e983ec00a2d9d03d65a2cffff124216fefffdb5181053f688e0154646fb6"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e430a13ce1c7ad1466d450ec3a04cb34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39270,
        "upload_time": "2021-09-21T07:27:59",
        "upload_time_iso_8601": "2021-09-21T07:27:59.087761Z",
        "url": "https://files.pythonhosted.org/packages/c2/2f/600c43bc0d164388bb5e41d64f69f190ae4df359a41195184fb8b1a1b3f7/retrofit-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c753b21f544d643ef4eeb52152bbab493df5d892a71a42e8c7569d177e5e319c",
          "md5": "abd31e16e0e14921ad37337a5ffa6215",
          "sha256": "51e029723a1e0d6eed5240987673462b5e7a963d46f3a44b055955fc21cf9eb9"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abd31e16e0e14921ad37337a5ffa6215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30422,
        "upload_time": "2021-09-22T05:21:10",
        "upload_time_iso_8601": "2021-09-22T05:21:10.951063Z",
        "url": "https://files.pythonhosted.org/packages/c7/53/b21f544d643ef4eeb52152bbab493df5d892a71a42e8c7569d177e5e319c/retrofit-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89978048062e467ed5eca5df54579e740c2cc82ed4e1c49879571a82f1bfb79",
          "md5": "c08350883252e93f4f8b1a922c9678eb",
          "sha256": "4712f95fec54189c915d63cfff962eb8f0f6586f7fab102484d6f8932e7ce02e"
        },
        "downloads": -1,
        "filename": "retrofit-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c08350883252e93f4f8b1a922c9678eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39404,
        "upload_time": "2021-09-22T05:21:11",
        "upload_time_iso_8601": "2021-09-22T05:21:11.988608Z",
        "url": "https://files.pythonhosted.org/packages/b8/99/78048062e467ed5eca5df54579e740c2cc82ed4e1c49879571a82f1bfb79/retrofit-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c753b21f544d643ef4eeb52152bbab493df5d892a71a42e8c7569d177e5e319c",
        "md5": "abd31e16e0e14921ad37337a5ffa6215",
        "sha256": "51e029723a1e0d6eed5240987673462b5e7a963d46f3a44b055955fc21cf9eb9"
      },
      "downloads": -1,
      "filename": "retrofit-0.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "abd31e16e0e14921ad37337a5ffa6215",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30422,
      "upload_time": "2021-09-22T05:21:10",
      "upload_time_iso_8601": "2021-09-22T05:21:10.951063Z",
      "url": "https://files.pythonhosted.org/packages/c7/53/b21f544d643ef4eeb52152bbab493df5d892a71a42e8c7569d177e5e319c/retrofit-0.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b89978048062e467ed5eca5df54579e740c2cc82ed4e1c49879571a82f1bfb79",
        "md5": "c08350883252e93f4f8b1a922c9678eb",
        "sha256": "4712f95fec54189c915d63cfff962eb8f0f6586f7fab102484d6f8932e7ce02e"
      },
      "downloads": -1,
      "filename": "retrofit-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c08350883252e93f4f8b1a922c9678eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39404,
      "upload_time": "2021-09-22T05:21:11",
      "upload_time_iso_8601": "2021-09-22T05:21:11.988608Z",
      "url": "https://files.pythonhosted.org/packages/b8/99/78048062e467ed5eca5df54579e740c2cc82ed4e1c49879571a82f1bfb79/retrofit-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}