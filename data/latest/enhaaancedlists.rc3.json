{
  "info": {
    "author": "Dominik Niedenzu",
    "author_email": "pyadaaah@blackward.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "The 'EnhaaancedLists' library provides **list classes** with \r\nautomatic locking mechanisms (**multithreading/processing safe-ty**),\r\n**extended / enhanced in-place capabilities** and/or\r\n**automatic type checking** mechanisms (for list elements).\r\n\r\nTogether with the 'elem' term / alias (comprised too), some of their \r\nmethods (also) allow using a **new operator notation for selecting \r\nlist elements** - closely resembling mathematical conditions.\r\n\r\nThe following just is a brief summary of the main elements - the full \r\ndocumentation is available by either the command line option '--info':\r\n\r\n```sh\r\n\t\tpython enhaaancedLists.py --info\r\n```\r\n\r\nor the python command 'help' (displaying the doc-string of the module):\r\n\r\n```python\r\n\t\timport enhaaancedLists\r\n\t\thelp(enhaaancedLists)\r\n```\r\n\r\n\r\n\r\nEnhList\r\n=======\r\n\r\n**Examples for additional capabilities** \r\n(the standard list operations work too) are:\r\n\r\n<span style=\"font-size:0.7em;\">( Note that the '&' resp. the '|' are 'abused' \r\nas 'logical and resp. logical or' in this context (and **not** 'bitwise'!) ).</span>\r\n\r\n```python\r\n\t\t#import class and aliases used\r\n\t\tfrom enhaaancedLists import EnhList, elem, single, several\r\n\r\n\t\t#convert a parameter list to an enhanced list \r\n\t\teL = EnhList(1,3,5,7)                                       #eL: [1,3,5,7]\r\n\t\t\r\n\t\t#push single as well as multiple elements into the list\r\n\t\teL.push(9)                                  #==> None       #eL: [1,3,5,7,9]\r\n\t\teL.push(11,13,15)                           #==> None       #eL: [1,3,5,7,9,11,13,15]\r\n\t\t\r\n\t\t#pop - note that push/pop implements a FIFO - in contrast to the standard list\r\n\t\teL.pop()                                    #==> 1          #eL: [3,5,7,9,11,13,15]\r\n\t\teL.pop( (elem > 3) & (elem < 11), single )  #==> 5          #eL: [3,7,9,11,13,15]\r\n\t\teL.pop( (elem > 3) & (elem < 11)         )  #==> [7,9]      #eL: [3,11,13,15]\r\n\t\t\r\n\t\t#extend the list\r\n\t\teL.extend( [7,8,9] )                        #==> None       #eL: [3,11,13,15,7,8,9]\r\n\t\teL.extend( [4,5,6], reverse=True )          #==> None       #eL: [4,5,6,3,11,13,15,7,8,9]\r\n\t\t\r\n\t\t#get items from list\r\n\t\teL[ elem >= 10         ]                    #==> [11,13,15] #eL: unchanged\r\n\t\teL[ elem >= 10, single ]                    #==> 11         #eL: unchanged\r\n\t\teL[ elem <  3,  single ]                    #==> None       #eL: unchanged\r\n\t\t\r\n\t\t#check whether list contains items\r\n\t\t( elem <  3 ) in eL                         #==> False      #eL: unchanged\r\n\t\t( elem >= 3 ) in eL                         #==> True       #eL: unchanged\r\n\t\t\r\n\t\t#set items in list                                          \r\n\t\teL = EnhList(4,5,6,3,11,13,15,7,8,9)                        #eL: [4,5,6,3,11,13,15,7,8,9]\r\n\t\teL[ elem % 2 == 1]              = elem // 2 #==> None       #eL: [4,2,6,1,5,6,7,3,8,4]\r\n\t\teL[ (elem == 6) | (elem == 8) ] = 0         #==> None       #eL: [4,2,0,1,5,0,7,3,0,4]\r\n\t\t\r\n\t\t#delete items from list\r\n\t\teL = EnhList(4,5,6,3,11,13,15,7,8,9)                        #eL: [4,5,6,3,11,13,15,7,8,9]\r\n\t\tdel eL[ elem < 12, single ]                 #==> ---        #eL: [5,6,3,11,13,15,7,8,9]\r\n\t\tdel eL[ elem > 12         ]                 #==> ---        #eL: [5,6,3,11,7,8,9]\r\n\t\t\r\n\t\teL = EnhList(1,3,5,7)                                       #eL: [1,3,5,7]\r\n\t\t#check whether all elements meet a condition\r\n\t\teL.areAll( elem % 2 == 1 )                  #==> True\r\n\t\teL.areAll( elem     >= 3 )                  #==> False\r\n\t\t\r\n\t\t#map function on elements / work with items of elements\r\n\t\t#map replaces elements, which are mapped, by the mapping result\r\n\t\teL.mapIf( lambda x: dict(a=x) )\t                            #==> None\t#eL: [{'a':1},{'a':3},{'a':5},{'a':7}]\r\n\t\teL.mapIf( lambda x: x['a'] + 1, elem['a'] > 3)              #==> None\t#eL: [{'a':1},{'a':3},6,8]\r\n\t\t\t\r\n\t\t#apply map function on elements / work on items of elements                                          \r\n\t\t#apply map does not replace elements; it modifies elements, which are apply mapped, instead\r\n\t\teL = EnhList([3],[5],[7])\t\t\t\t\t\t\t\t\t\t\t\t#eL: [[3],[5],[7]]\r\n\t\teL.applyMapIf( lambda x: list.append(x, 22) )              \t#==> None\t#eL: [[3,22],[5,22],[7,22]]\r\n\t\teL.applyMapIf( lambda x: list.append(x, 33), elem[0] > 4 ) \t#==> None\t#eL: [[3,22],[5,22,33],[7,22,33]]\r\n\t\t\r\n\t\t#get min, max, avg, median or sum of a selected property\r\n\t\teL = EnhList([3,8],[5,6],[7,4])                             #eL: [[3,8],[5,6],[7,4]]\r\n\t\teL.min(    elem[0] )                        #==> 3          #eL: [[3,8],[5,6],[7,4]]\r\n\t\teL.max(    elem[1] )                        #==> 8          #eL: [[3,8],[5,6],[7,4]]\r\n\t\teL.avg(    elem[0] )                        #==> 5.0        #eL: [[3,8],[5,6],[7,4]]\r\n\t\teL.median( elem[1] )                        #==> 6.0        #eL: [[3,8],[5,6],[7,4]]\r\n\t\teL.sum(    elem[0] )                        #==> 15         #eL: [[3,8],[5,6],[7,4]]\r\n\t\t\r\n\t\t#work with attributes of elements\r\n\t\teL = EnhList([{'a':1},{'a':3},6,8])                         #eL: [{'a':1},{'a':3},6,8]\r\n\t\tclass Attr(object):\r\n\t\t\t\t\tdef __init__(self, value):\r\n\t\t\t\t\t\t\tself.a = value\r\n\t\t\t\t\tdef __repr__(self):\r\n\t\t\t\t\t\t\treturn \".a=%s\" % self.a\r\n\t\teL.mapIf( lambda x: Attr(x), lambda x: type(x) ==  int ) \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t#==> None       #eL: [{'a':1},{'a':3},.a=6,.a=8]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t#create a list, whose elements just can be of given types (a typed list)\r\n\t\teL = EnhList(1,3,5,7, elemTypesT=(int, float))              #eL: [1,3,5,7]\r\n\t\teL.append(1.23)                             #==> None       #eL: [1,3,5,7,1.23]\r\n\t\teL.append(\"a\")                              #==> TypeMismatch exception\r\n\t\t\r\n\t\t#for the aforementioned use case, there also are some premade typed lists\r\n\t\teL = NumberList(1,3,5,7)                                    #eL: [1,3,5,7]\r\n\t\teL.append(1.23)                             #==> None       #eL: [1,3,5,7,1.23]\r\n\t\teL.append(\"a\")                              #==> TypeMismatch exception\r\n```\r\n\r\nPremade typed list classes inherited from EnhList are:\r\n\r\n- DecimalList\r\n- DictList\r\n- FloatList\r\n- IntList\r\n- ListList\r\n- LupleList\t\t(elements can be of type list or tuple)\r\n- NumberList\t(lements can be of type int, float and decimal.Decimal)\r\n- SetList\r\n- StrList\r\n- TupleList\r\n\r\n\r\n\r\nSecList\r\n=======\r\n\r\nThe 'SecList' class is a secured version of the enhanced list class 'EnhList'.  \r\n\r\nAccess to its elements has been made 'thread-safe' by wrapping the belonging\r\nmethods in a 'with' context automatically 'acquiring' / 'releasing' an\r\ninternal 'Semi/BlockingMutex' (a multithreading / multiprocessing lock).\r\n\r\n**Examples:**\r\n\r\n```python\r\n    #import class\r\n    from enhaaancedLists import SecList, elem\r\n\r\n    #convert a parameter list into a secured list \r\n    sL = SecList(1,2,3,4,5,6,7,8)\r\n   \r\n    #if then a first thread e.g. would run the following statement:\r\n    evenL = sL.pop( elem % 2 == 0 )\r\n   \r\n    #and a second thread in parallel (!!) e.g. would run the following statement:\r\n    oddL = sL.pop( elem % 2 == 1 )\r\n   \r\n    #the parallel access to said list would not result in a collission resp.\r\n    #error and the result would be:\r\n    #evenL <==> [2,4,6,8]\r\n    #oddL  <==> [1,3,5,7]\r\n    #sL    <==> [] \r\n```\r\n\r\nPremade typed list classes inherited from SecList are:\r\n\r\n- DecimalSecList\r\n- DictSecList\r\n- FloatSecList\r\n- IntSecList\r\n- ListSecList\r\n- LupleSecList\t\t(elements can be of type list or tuple)\r\n- NumberSecList\t\t(elements can be of type int, float and decimal.Decimal)\r\n- SetSecList\r\n- StrSecList\r\n- TupleSecList\r\n\r\n\r\nFurther Informations\r\n====================\r\n\r\nDetailed descriptions can be found in the doc/help-texts of the module \r\nand its classes and their methods. E.g. try:\r\n\r\n```sh\r\n    python -i\r\n    import enhaaancedLists\r\n    help(enhaaancedLists)\r\n\r\n    from enhaaancedLists import EnhList, SecList, elem\r\n    help(EnhList)\r\n    help(SecList)\r\n    help(elem)\r\n```\r\n\r\nor\r\n\r\n```sh \r\n    python enhaaancedLists.py --info\r\n    python enhaaancedLists.py --test\r\n```\r\n\r\nMore examples can be found in the source code of the selftest() function\r\nof the \"enhaaancedList.py\" library module and the methods called from there.\r\n\r\nFurther infomations and links can be found on my homepage\r\n\r\n[https://www.blackward.de](https://www.blackward.de)  \r\n\r\nHave Fun!\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.blackward.de",
    "keywords": "",
    "license": "Proprietary License",
    "maintainer": "Dominik Niedenzu",
    "maintainer_email": "",
    "name": "enhaaancedLists",
    "package_url": "https://pypi.org/project/enhaaancedLists/",
    "platform": "any platform which provides python",
    "project_url": "https://pypi.org/project/enhaaancedLists/",
    "project_urls": {
      "Homepage": "https://www.blackward.de"
    },
    "release_url": "https://pypi.org/project/enhaaancedLists/0.90/",
    "requires_dist": null,
    "requires_python": ">= 2.2",
    "summary": "(Thread-safe) list(s) with extended / enhanced in-place capabilities (e.g. conditional element selection)",
    "version": "0.90",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17449933,
  "releases": {
    "0.70": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feed5b44e7cd12c012439b05312807ff7a404b34f9286bb4a4f86b0299939e1c",
          "md5": "44bae7eed704342538940256af552186",
          "sha256": "cf19dd8759f700fe951e875e8cff022e2a5a50c4810055765dcac52dc91267be"
        },
        "downloads": -1,
        "filename": "enhaaancedLists-0.70-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44bae7eed704342538940256af552186",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 2.2",
        "size": 15192,
        "upload_time": "2021-07-06T22:23:08",
        "upload_time_iso_8601": "2021-07-06T22:23:08.093722Z",
        "url": "https://files.pythonhosted.org/packages/fe/ed/5b44e7cd12c012439b05312807ff7a404b34f9286bb4a4f86b0299939e1c/enhaaancedLists-0.70-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.75": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf04c0fd4eab7dcef7ae15ef47d9421352c48e7a512b56e50b829f270a025d4",
          "md5": "479ea8acf24bc20d5ebaefb0ed271cf2",
          "sha256": "a59852279cb0ed30334fb9f8c31bdf89477461cd6ed4e388ade35396e00b8218"
        },
        "downloads": -1,
        "filename": "enhaaancedLists-0.75-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "479ea8acf24bc20d5ebaefb0ed271cf2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 2.2",
        "size": 23468,
        "upload_time": "2021-07-17T23:17:11",
        "upload_time_iso_8601": "2021-07-17T23:17:11.980207Z",
        "url": "https://files.pythonhosted.org/packages/2c/f0/4c0fd4eab7dcef7ae15ef47d9421352c48e7a512b56e50b829f270a025d4/enhaaancedLists-0.75-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.90": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddee877c381c1b717b3ac0b21121a60b4d4afec6e5b95dd83f76cd3e1012e44b",
          "md5": "114cdb90c1f458c62e15e93980c4b951",
          "sha256": "dda098c5ee75348f3da9860f73d4f9573a93adb227b9cfc1ecb0ff68167cbdab"
        },
        "downloads": -1,
        "filename": "enhaaancedLists-0.90-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "114cdb90c1f458c62e15e93980c4b951",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 2.2",
        "size": 41059,
        "upload_time": "2023-03-26T13:35:19",
        "upload_time_iso_8601": "2023-03-26T13:35:19.937030Z",
        "url": "https://files.pythonhosted.org/packages/dd/ee/877c381c1b717b3ac0b21121a60b4d4afec6e5b95dd83f76cd3e1012e44b/enhaaancedLists-0.90-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddee877c381c1b717b3ac0b21121a60b4d4afec6e5b95dd83f76cd3e1012e44b",
        "md5": "114cdb90c1f458c62e15e93980c4b951",
        "sha256": "dda098c5ee75348f3da9860f73d4f9573a93adb227b9cfc1ecb0ff68167cbdab"
      },
      "downloads": -1,
      "filename": "enhaaancedLists-0.90-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "114cdb90c1f458c62e15e93980c4b951",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">= 2.2",
      "size": 41059,
      "upload_time": "2023-03-26T13:35:19",
      "upload_time_iso_8601": "2023-03-26T13:35:19.937030Z",
      "url": "https://files.pythonhosted.org/packages/dd/ee/877c381c1b717b3ac0b21121a60b4d4afec6e5b95dd83f76cd3e1012e44b/enhaaancedLists-0.90-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}