{
  "info": {
    "author": "Seph (Joseph) Pace",
    "author_email": "sephpace@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Neato\n\nNeato is an implementation of NEAT ([NeuroEvolution of Augmenting Topologies](http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf)).\nIt can be used to evolve simple neural networks to accomplish a specific task.\n\n## Contents\n\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n  - [Genome](#genome)\n  - [Ecosystem](#ecosystem)\n- [Examples](#examples)\n\n<a name=\"installation\"></a>\n## Installation\n\n Neato is installed using pip on the command line.\n\n ```commandline\npip install neato\n```\n\n<a name=\"getting-started\"></a>\n## Getting Started\n\n<a name=\"genome\"></a>\n### Genome\n\nGenomes are the evolvable neural networks that are the base of the NEAT algorithm. \nEach genome has three types of nodes: input, output, and hidden, and any number of\nconnections between them. A genome starts out with only input and output nodes with \nno connections.\n\n```python\nfrom neato import Genome\n\ngenome = Genome(2, 3)  # 2 input nodes and 3 output nodes\n```\n\nOnce created, genomes can be passed numpy arrays to be evaluated by the network.\n\n```python\nimport numpy as np\n\nx = np.array([0.5, 0.7])\ny = genome(x)\nprint(y)\n```\n```\nOut: [0. 0. 0.]\n```\n\nSince there are no connections, the output is all zeros. You can add connections \nmanually or randomly through mutations. Once there are connections, the outputs\nare actual, non-zero values.\n\n```python\ngenome.add_connection(0, 2)     # Connect node 0 to node 2\ngenome.add_connection(1, 4)     # Connect node 1 to node 4\ngenome.mutate_add_connection()  # Connect two random nodes\n\ny = genome(x)\nprint(y)\n```\n```\nOut: [0.04911261 0.         0.34208322]\n```\n\nNodes are numbered starting at 0 in the order that they are added to the genome.\nSince there are two inputs, 0 and 1 are inputs nodes and since there are three outputs,\n2, 3, and 4 are output nodes. Hidden nodes can be added to the genome in the following\nmanner:\n\n```python\ngenome.add_node(0)        # Add node on connection 0\ngenome.add_node(4)        # Add node on connection 4\ngenome.mutate_add_node()  # Add a node on a random connection\n\ny = genome(x)\nprint(y)\n```\n```\nOut: [0.01854924 0.         0.34208322]\n```\n\nConnections can now be added between the newly created nodes as shown below:\n\n```python\ngenome.add_connection(5, 6) # Connect hidden node 5 to hidden node 6\n\ny = genome(x)\nprint(y)\n```\n```\nOut: [0.01498559 0.         0.34208322]\n```\n\nGenomes can be evaluated as strings to see all nodes and connections.\n\n```python\nprint(genome)\n```\n```\nOut: \n```\n\n<a name=\"ecosystem\"></a>\n### Ecosystem\n\nAn ecosystem is an environment that contains a population of genomes and \nmanages them from generation to generation. Genomes within the ecosystem\ndie, reproduce, mutate, and evolve.\n\n```python\nfrom neato import Ecosystem\n\necosystem = Ecosystem()\n```\n\nOnce an ecosystem has been created, it need to be populated with genomes.\n\n```python\n# Population size: 100 | The amount of genomes in the ecosystem\n# Input size:      2   | The amount of input nodes for each genome\n# Output size:     3   | The amount of output nodes for each genome\n\necosystem.create_initial_population(100, input_size=2, output_size=3)\n```\n\nA population size will always remain constant because any genomes that are killed are\nreplaced by new genomes. Genomes in a given ecosystem will always have the same amount of input and output \nnodes, but hidden nodes and connections will vary from genome to genome.\n\nAnother way to create a population is to supply a parent genome:\n\n```python\nfrom neato import Genome\n\ngenome = Genome(2, 3)\necosystem.create_initial_population(100, parent_genome=genome)\n```\n\nIf a parent genome is given instead of input and output sizes, all genomes will be based on\nthe parent. They will have the same amount of inputs and outputs as the parent but will be mutated\nslightly. Optionally, mutations can be bypassed by setting mutate to False as follows:\n\n```python\nfrom neato import Genome\n\ngenome = Genome(2, 3)\necosystem.create_initial_population(100, parent_genome=genome, mutate=False)\n```\n\nIf an ecosystem is populated in this way, all genomes will be exact copies of the\nparent genome.\n\nOnce an population has been created, each genome can be evaluated and have a fitness \nvalue applied. Since each problem to be solved by NEAT is different, the fitness\nvalues must be applied manually by the user.\n\n```python\nimport random\n\nfor genome in ecosystem.get_population():\n    x = np.array([0.5, 0.5])\n    y = genome(x)\n    genome.fitness = random.randrange(0, 100)  # Set fitness to random value\n```\n\nThe fitness was applied randomly above, but it should be set as meaningful values\ndepending on the desired result.\n\nOnce fitness values have been assigned, the ecosystem can move on to the next\ngeneration. Genomes with lower fitness values will be killed, and the survivors\nwill reproduce to fill in their places. Mutations will be applied to the children\nin a similar manner to when the inital population was created.\n\n```python\necosystem.next_generation()\n```\n\nThe percentage of genomes that are killed with each generation can be adjusted with\nthe kill_percentage parameter.\n\n```python\n# Only kill 20% each generation\n# Default is 50%\necosystem.next_generation(kill_percentage=20)\n```\n\nOptionally, a parent genome can be specified which will cause the ecosystem to base\nthe next generation upon. In this case, no other genomes will be crossed, but copies\nof the parent will be mutated.\n\n```python\n# Get the genome with the highest fitness value\nbest_genome = ecosystem.get_best_genome()\n\n# Base the next generation on this genome\necosystem.next_generation(parent_genome=best_genome)\n```\n\nThis process repeats for as long as required. The user determines how many generations\nto reach or to what fitness value must be achieved in order to stop.\n\n<a name=\"examples\"></a>\n## Examples\n\nThe following example shows how Neato can be used to solve a simple [Gym](https://gym.openai.com/) \nenvironment called CartPole. In this environment, a pole is attached to a cart\nand the agent must move the cart back and forth to balance it.\n\n```python\nimport gym\n\nfrom neato import Ecosystem\n\nPOPULATION = 100\nGENERATIONS = 10\n\n# Set up environment\nenv = gym.make('CartPole-v1')\n\n# Set up ecosystem\necosystem = Ecosystem()\necosystem.create_initial_population(POPULATION, input_size=4, output_size=2)\n\n# Start the evolution\nfor generation in range(GENERATIONS):\n    for genome in ecosystem.get_population():\n        # Get the initial input from the environment        \n        observation = env.reset()\n\n        # Evaluate the genome until it is done\n        # When it is done is determined by the environment\n        done = False\n        while not done:\n            # Render the environment\n            env.render()\n\n            # Evaluate genome for given timestep\n            action = genome(observation).argmax()\n\n            # Evaluate reward and get next input\n            observation, reward, done, info = env.step(action)\n\n            # Apply the fitness to the genome\n            genome.fitness += reward   \n\n    # Display ecosystem info\n    print(ecosystem)\n\n    # Kill less fit genomes and cross fitter genomes\n    ecosystem.next_generation()\n\n# Close the environment\nenv.close()\n```\n\nFor this and more examples, see the [examples](https://github.com/sephpace/neato/tree/master/examples) directory.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sephpace/neato",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neato",
    "package_url": "https://pypi.org/project/neato/",
    "platform": "",
    "project_url": "https://pypi.org/project/neato/",
    "project_urls": {
      "Bug Tracker": "https://github.com/sephpace/neato/issues",
      "Homepage": "https://github.com/sephpace/neato"
    },
    "release_url": "https://pypi.org/project/neato/1.0.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.7",
    "summary": "An implementation of NEAT (NeuroEvolution of Augmenting Topologies) by Kenneth O. Stanley",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10215114,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e64da189ed8c526957b50176f7cdd7b56a8c1c628b2ddfd9684497888f006e5b",
          "md5": "5815009d2b0d01d913e0d00ed774fa9a",
          "sha256": "a89260bb2e2679d7d180da562d5f1536f4e589726dc4c2d37710e391e460075f"
        },
        "downloads": -1,
        "filename": "neato-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5815009d2b0d01d913e0d00ed774fa9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16768,
        "upload_time": "2021-04-30T01:09:53",
        "upload_time_iso_8601": "2021-04-30T01:09:53.118112Z",
        "url": "https://files.pythonhosted.org/packages/e6/4d/a189ed8c526957b50176f7cdd7b56a8c1c628b2ddfd9684497888f006e5b/neato-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bac241bd8009fbedf0a217ff48f9964aa2985a7d6bf8b5e9d5135ad97d3290a",
          "md5": "eebbdf4008add10760c6367ea1548b97",
          "sha256": "200dd134e687f4bed05695c53f65945f4dfbe4e4ec9725802a49367646643671"
        },
        "downloads": -1,
        "filename": "neato-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eebbdf4008add10760c6367ea1548b97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17795,
        "upload_time": "2021-04-30T01:09:54",
        "upload_time_iso_8601": "2021-04-30T01:09:54.596183Z",
        "url": "https://files.pythonhosted.org/packages/3b/ac/241bd8009fbedf0a217ff48f9964aa2985a7d6bf8b5e9d5135ad97d3290a/neato-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e64da189ed8c526957b50176f7cdd7b56a8c1c628b2ddfd9684497888f006e5b",
        "md5": "5815009d2b0d01d913e0d00ed774fa9a",
        "sha256": "a89260bb2e2679d7d180da562d5f1536f4e589726dc4c2d37710e391e460075f"
      },
      "downloads": -1,
      "filename": "neato-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5815009d2b0d01d913e0d00ed774fa9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16768,
      "upload_time": "2021-04-30T01:09:53",
      "upload_time_iso_8601": "2021-04-30T01:09:53.118112Z",
      "url": "https://files.pythonhosted.org/packages/e6/4d/a189ed8c526957b50176f7cdd7b56a8c1c628b2ddfd9684497888f006e5b/neato-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bac241bd8009fbedf0a217ff48f9964aa2985a7d6bf8b5e9d5135ad97d3290a",
        "md5": "eebbdf4008add10760c6367ea1548b97",
        "sha256": "200dd134e687f4bed05695c53f65945f4dfbe4e4ec9725802a49367646643671"
      },
      "downloads": -1,
      "filename": "neato-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eebbdf4008add10760c6367ea1548b97",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17795,
      "upload_time": "2021-04-30T01:09:54",
      "upload_time_iso_8601": "2021-04-30T01:09:54.596183Z",
      "url": "https://files.pythonhosted.org/packages/3b/ac/241bd8009fbedf0a217ff48f9964aa2985a7d6bf8b5e9d5135ad97d3290a/neato-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}