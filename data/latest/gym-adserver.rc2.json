{
  "info": {
    "author": "Alberto Falossi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Build Status](https://travis-ci.com/falox/gym-adserver.svg?branch=master)](https://travis-ci.com/falox/gym-adserver)\n[![codecov](https://codecov.io/gh/falox/gym-adserver/branch/master/graph/badge.svg)](https://codecov.io/gh/falox/gym-adserver)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/gym-adserver.svg)](https://pypi.python.org/pypi/gym-adserver/)\n\n# gym-adserver\n\n`gym-adserver` is an [OpenAI Gym](https://github.com/openai/gym) environment for reinforcement learning-based online advertising algorithms. `gym-adserver` is now one of the [official OpenAI environments](https://github.com/openai/gym/blob/master/docs/environments.md).\n\nThe `AdServer` environment implements a typical [multi-armed bandit scenario](https://en.wikipedia.org/wiki/Multi-armed_bandit) where an [ad server](https://en.wikipedia.org/wiki/Ad_serving) agent must select the best advertisement (ad) to be displayed in a web page.\n\nEach time an ad is selected, it is counted as one [impression](https://en.wikipedia.org/wiki/Impression_(online_media)). A displayed ad can be clicked (reward = `1`) or not (reward = `0`), depending on the interest of the user The agent must maximize the overall [click-through rate](https://en.wikipedia.org/wiki/Click-through_rate).\n\n### OpenAI Environment Attributes\n\n| Attribute | Value | Notes\n|--|--|--|\n| Action Space | Discrete(n) |  n is the number of ads to choose from\n| Observation Space| Box(0, +inf, (2, n)) | Number of impressions and clicks for each ad\n| Actions | [0...n] | Index of the selected ad\n| Rewards | 0, 1 | 1 = clicked, 0 = not clicked\n| Render Modes | 'human' | Displays the agent's performance graphically\n\n## Installation\n\nYou can download the source code and install the dependencies with:\n\n```bash\ngit clone https://github.com/falox/gym-adserver\ncd gym-adserver\npip install -e .\n```\n\nAlternatively, you can install `gym-adserver` as a [pip package](https://pypi.org/project/gym-adserver/):\n\n```bash\npip install gym-adserver\n```\n\n## Basic Usage\n\nYou can test the environment by running one of the built-in agents:\n\n```bash\npython gym_adserver/agents/ucb1_agent.py --num_ads 10 --impressions 10000\n```\n\nOr comparing multiple agents (defined in compare_agents.py):\n\n```bash\npython gym_adserver/wrappers/compare_agents.py --num_ads 10 --impressions 10000\n```\n\nThe environent will generate 10 (`num_ads`) ads with different performance rates and the agent, without prior knowledge, will learn to select the most performant ones. The simulation will last 10000 iterations (`impressions`).\n\nA window will open and show the agent's performance and the environment's state:\n\n![Performance Dashboard](https://raw.githubusercontent.com/falox/gym-adserver/master/docs/ucb1.png)\n\nThe overall CTR increases over time as the agent learns what the best actions are.\n\nDuring the initialization, the environment assigns to each ad a \"Probability\" to be clicked. Such a probability is known by the environment only and will be used to draw the rewards during the simulation. The \"Actual CTR\" is the CTR actually occurred during the simulation: with time, it approximates the probability.\n\nThe effective agent will give most impressions to the most performant ads.\n\n## Built-in Agents\n\nThe _gym_adserver/agents_ directory contains a collection of agents implementing the following strategies:\n\n- Random\n- [epsilon-Greedy](https://en.wikipedia.org/wiki/Multi-armed_bandit#Semi-uniform_strategies)\n- [Softmax](https://en.wikipedia.org/wiki/Softmax_function#Reinforcement_learning)\n- [UCB1](https://en.wikipedia.org/wiki/Monte_Carlo_tree_search#Exploration_and_exploitation)\n\nEach agent has different parameters to adjust and optimize its performance.\n\nYou can use the built-in agents as a starting point to implement your own algorithm.\n\n## Unit Tests\n\nYou can run the unit test for the environment with:\n\n```bash\npytest -v\n```\n\n## Next Steps\n\n- Extend AdServer with the concepts of _budget_ and _bid_\n- Extend AdServer to change the ad performance over time (currently the CTR is constant)\n- Implement [Q-learning](https://en.wikipedia.org/wiki/Q-learning) [agents](https://medium.com/swlh/introduction-to-q-learning-with-openai-gym-2d794da10f3d)\n- Implement a meta-agent that exploits multiple sub-agents with different algorithms\n- Implement epsilon-Greedy variants\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/falox/gym-adserver",
    "keywords": "openai,openai-gym,gym,environment,agent,rl,ads",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gym-adserver",
    "package_url": "https://pypi.org/project/gym-adserver/",
    "platform": "",
    "project_url": "https://pypi.org/project/gym-adserver/",
    "project_urls": {
      "Homepage": "https://github.com/falox/gym-adserver"
    },
    "release_url": "https://pypi.org/project/gym-adserver/1.0.2/",
    "requires_dist": [
      "gym",
      "joblib",
      "numpy",
      "matplotlib",
      "pytest",
      "pytest-cov",
      "codecov"
    ],
    "requires_python": ">=3.6",
    "summary": "An OpenAI gym environment for ad serving algorithms.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9274715,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0871dd71911336d2a998252f0b9dfa33a39e7f90512fc9108ec15e568808620d",
          "md5": "49a29b13628db67d5852a67030630323",
          "sha256": "5affd4364d94065faf6de1ac3d819777a8c9581b988e4f236061572c05b3bb5c"
        },
        "downloads": -1,
        "filename": "gym_adserver-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49a29b13628db67d5852a67030630323",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7324,
        "upload_time": "2020-09-13T07:29:11",
        "upload_time_iso_8601": "2020-09-13T07:29:11.843920Z",
        "url": "https://files.pythonhosted.org/packages/08/71/dd71911336d2a998252f0b9dfa33a39e7f90512fc9108ec15e568808620d/gym_adserver-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5de959516804015369d0055d28050806cc0a21a200e882acb6bed4e8d64853c",
          "md5": "f6f188ceb549d20d4c6c1ad43c58c27d",
          "sha256": "7811b5975f189203c8d2b6e9116c96857521a743674cd35b821787bf2265c30c"
        },
        "downloads": -1,
        "filename": "gym_adserver-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6f188ceb549d20d4c6c1ad43c58c27d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5421,
        "upload_time": "2020-09-13T07:29:13",
        "upload_time_iso_8601": "2020-09-13T07:29:13.594806Z",
        "url": "https://files.pythonhosted.org/packages/c5/de/959516804015369d0055d28050806cc0a21a200e882acb6bed4e8d64853c/gym_adserver-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64446fcf2382f5bb1f6e10b9cfbd0ab431a0460ec63f42646ad318487cecf422",
          "md5": "bdf9630f921e63de743f6f94d50e9aab",
          "sha256": "c16ffc6240fb86b663a4ea436ebf95910cdc8710ab05868864e9445a01a4f8f2"
        },
        "downloads": -1,
        "filename": "gym_adserver-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdf9630f921e63de743f6f94d50e9aab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7976,
        "upload_time": "2021-01-30T20:16:27",
        "upload_time_iso_8601": "2021-01-30T20:16:27.717145Z",
        "url": "https://files.pythonhosted.org/packages/64/44/6fcf2382f5bb1f6e10b9cfbd0ab431a0460ec63f42646ad318487cecf422/gym_adserver-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf987441d9ac3dc24933c6f4145a789e41dad4de46c6c19f649d3894c998bc6",
          "md5": "759d3b2556ef2bb9446c494267c3fbdb",
          "sha256": "ef174548a7cc30e4f49c513c7db63e2f865294aa0e43fa92cb81b587804a06e7"
        },
        "downloads": -1,
        "filename": "gym_adserver-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "759d3b2556ef2bb9446c494267c3fbdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5855,
        "upload_time": "2021-01-30T20:16:28",
        "upload_time_iso_8601": "2021-01-30T20:16:28.708058Z",
        "url": "https://files.pythonhosted.org/packages/2c/f9/87441d9ac3dc24933c6f4145a789e41dad4de46c6c19f649d3894c998bc6/gym_adserver-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64446fcf2382f5bb1f6e10b9cfbd0ab431a0460ec63f42646ad318487cecf422",
        "md5": "bdf9630f921e63de743f6f94d50e9aab",
        "sha256": "c16ffc6240fb86b663a4ea436ebf95910cdc8710ab05868864e9445a01a4f8f2"
      },
      "downloads": -1,
      "filename": "gym_adserver-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bdf9630f921e63de743f6f94d50e9aab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7976,
      "upload_time": "2021-01-30T20:16:27",
      "upload_time_iso_8601": "2021-01-30T20:16:27.717145Z",
      "url": "https://files.pythonhosted.org/packages/64/44/6fcf2382f5bb1f6e10b9cfbd0ab431a0460ec63f42646ad318487cecf422/gym_adserver-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cf987441d9ac3dc24933c6f4145a789e41dad4de46c6c19f649d3894c998bc6",
        "md5": "759d3b2556ef2bb9446c494267c3fbdb",
        "sha256": "ef174548a7cc30e4f49c513c7db63e2f865294aa0e43fa92cb81b587804a06e7"
      },
      "downloads": -1,
      "filename": "gym_adserver-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "759d3b2556ef2bb9446c494267c3fbdb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5855,
      "upload_time": "2021-01-30T20:16:28",
      "upload_time_iso_8601": "2021-01-30T20:16:28.708058Z",
      "url": "https://files.pythonhosted.org/packages/2c/f9/87441d9ac3dc24933c6f4145a789e41dad4de46c6c19f649d3894c998bc6/gym_adserver-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}