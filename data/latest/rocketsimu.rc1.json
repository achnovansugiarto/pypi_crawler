{
  "info": {
    "author": "Quix Fan @ZQWEI-Tech",
    "author_email": "qxdnfsy@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "#Rocket Simulation v1.0.3\nSimple tool for rocket motor simulation by using python，written by Quix @ZQWEI\n\n##Basic charicteristics\n1.The core algorithm were based on the original SRD software(Simple Rccket Designer)\n\n2.Interial ballistic calculation was based on RK Method, and supports the two-phase flow model\n\n3.Thrust calculation support the auto-design of the laval nozzle\n\n4.It also provide the functions to calculate the propellent burnrate from the thrust(see example 3)\n\n\n##Install\nJust use pip to install ! :D\n```\npip install rocketsimu\n```\n\n\n##License\nMIT License\n\n\n##Examples\n###Example 1:\n```python，written\nimport rocketsimu as rs\nimport rocketsimu.motorsimu as ms\nfrom rocketsimu import propellent,grain,nozzle\nimport matplotlib.pyplot as plt\n\n# 定义药柱参数\nR = 0.01  # 药柱外径\nr = 0.002  # 药柱内径\nrt = 0.002  # 喉管半径\nL = 0.05  # 药柱总长\nend_faces = 0  # 可燃端面数\n\ntotal_time = 1.5  # 计算总时间\nstep_length = 0.0001  # 计算时间步\nt_intial = 0  # 初始时间（一般为0）\np_intial = 101325  # 初始压强（一般为大气压）\ntwo_phase_model_swtich = True  # 是否打开两相流模型\nnozzle_type = 1  # 选择尾喷管模型\nerosion_ratio = 1  # 默认平均侵蚀比\n\n# ms.config_log(True)\n\npropellent_test = rs.propellent.KNSB()  # 定义燃料\ngrain_test = rs.grain.tube_grain(R, r, rt, end_faces, L, propellent_test, nozzle_type)  # 实例化药柱类\nnozzle_test=rs.nozzle.straight_nozzle(effiency=0.9)\n\nP, t = ms.pressure_calc(t_intial, p_intial, step_length, -1, grain_test, two_phase_model_swtich,\n                         erosion_ratio)  # 四阶龙格库塔法求解/自动时间步求解\nF = ms.thrust_calc(P, grain_test, nozzle_test)\nIt = ms.impulse_calc(F,t)\n\n# 展示结果\nprint(\"Impulse：\"+str(It))\nplt.plot(t,P)\nplt.xlabel(\"time/s\")\nplt.ylabel(\"pressure/MPa\")\nplt.figure()\nplt.plot(t,F)\nplt.xlabel(\"time/s\")\nplt.ylabel(\"force/N\")\nplt.show()\n```\n###Example 2:\n```python，written\nimport rocketsimu as rs\nimport rocketsimu.motorsimu as ms\nfrom rocketsimu import propellent,grain,nozzle\nimport matplotlib.pyplot as plt\n\n# 定义药柱参数\nR = 0.01  # 药柱外径\nr = 0.002  # 药柱内径\nrt = 0.002  # 喉管半径\nL = 0.05  # 药柱总长\nend_faces = 0  # 可燃端面数\n\ntotal_time = 1.5  # 计算总时间\nstep_length = 0.0001  # 计算时间步\nt_intial = 0  # 初始时间（一般为0）\np_intial = 101325  # 初始压强（一般为大气压）\ntwo_phase_model_swtich = True  # 是否打开两相流模型\nnozzle_type = 1  # 选择尾喷管模型\nerosion_ratio = 1  # 默认平均侵蚀比\n\nms.config_log(True)\n\npropellent_test = rs.propellent.KNSB()  # 定义燃料\ngrain_test = rs.grain.tube_grain(R, r, rt, end_faces, L, propellent_test, nozzle_type)  # 实例化药柱类\nlaval_nozzle_test=rs.nozzle.laval_nozzle(effiency=0.9,IsCustomized=False) # 实例化拉法尔喷管，指定为自动优化设计类型\nstraight_nozzle_test=rs.nozzle.straight_nozzle(effiency=0.9)\n\nP, t = ms.pressure_calc(t_intial, p_intial, step_length, -1, grain_test, two_phase_model_swtich,\n                         erosion_ratio)  # 四阶龙格库塔法求解/自动时间步求解\nF_laval = ms.thrust_calc(P, grain_test, laval_nozzle_test)\nF_str = ms.thrust_calc(P, grain_test, straight_nozzle_test)\nIt_laval = ms.impulse_calc(F_laval,t)\nIt_str = ms.impulse_calc(F_str,t)\n\n# 展示结果\nprint(\"Impulse  Laval vs Straight：\\r\\n\"+str(It_laval)+\" vs \"+str(It_str))\nplt.plot(t,P)\nplt.xlabel(\"time/s\")\nplt.ylabel(\"pressure/MPa\")\nplt.figure()\np1=plt.plot(t,F_laval)\np2=plt.plot(t,F_str)\nplt.xlabel(\"time/s\")\nplt.ylabel(\"force/N\")\nplt.show()\n```\n\n##Example 3:\n```python,written\nimport rocketsimu as rs\nimport rocketsimu.motorsimu as ms\nfrom rocketsimu import propellent, grain, nozzle\nimport matplotlib.pyplot as plt\n\n# 定义药柱参数\nR = 0.01  # 药柱外径\nr = 0.002  # 药柱内径\nrt = 0.002  # 喉管半径\nL = 0.05  # 药柱总长\nend_faces = 0  # 可燃端面数\n\ntotal_time = 1.5  # 计算总时间\nstep_length = 0.0001  # 计算时间步\nt_intial = 0  # 初始时间（一般为0）\np_intial = 101325  # 初始压强（一般为大气压）\ntwo_phase_model_swtich = True  # 是否打开两相流模型\nnozzle_type = 1  # 选择尾喷管模型\nerosion_ratio = 1  # 默认平均侵蚀比\n\nms.config_log(True)\n\npropellent_test = rs.propellent.KNSB()  # 定义燃料\ngrain_test = rs.grain.tube_grain(R, r, rt, end_faces, L, propellent_test, nozzle_type)  # 实例化药柱类\nnozzle_test = rs.nozzle.straight_nozzle(effiency=0.9)  # 实例化喷管\n\nP, t = ms.pressure_calc(t_intial, p_intial, step_length, -1, grain_test, two_phase_model_swtich,\n                        erosion_ratio)  # 四阶龙格库塔法求解/自动时间步求解\nF = ms.thrust_calc(P, grain_test, nozzle_test)\n\n# grain_test.pro = rs.propellent.NONE()\nP_t2p=ms.thrust2pressure(F,grain_test,nozzle_test.aeat,nozzle_test.effiency)\nburnrate_simulated, P_simulated = ms.pro_2phase_perform_calc(P_t2p, t, grain_test, propellent_test.density_gr,\n                                                             propellent_test.density_gr,\n                                                             propellent_test.k_chamber, propellent_test.cp_fraction,erosion_ratio, propellent_test.c)\n\nburnrate_real, P_real = ms.pro_burnrate_calc(propellent_test)  # 求解两相流燃料性能\n\n# 展示结果\nplt.plot(t, P)\nplt.xlabel(\"time/s\")\nplt.ylabel(\"pressure/MPa\")\nplt.figure()\nplt.plot(P_real, burnrate_real)\nplt.plot(P_simulated, burnrate_simulated)\nplt.xlabel(\"pressure/Pa\")\nplt.ylabel(\"burnrate/ms^-1\")\nplt.show()\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://zqwei-quix.ukgsdn.co.uk/simple-rocket-designer/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rocketsimu",
    "package_url": "https://pypi.org/project/rocketsimu/",
    "platform": "",
    "project_url": "https://pypi.org/project/rocketsimu/",
    "project_urls": {
      "Homepage": "https://zqwei-quix.ukgsdn.co.uk/simple-rocket-designer/"
    },
    "release_url": "https://pypi.org/project/rocketsimu/1.0.5/",
    "requires_dist": [
      "numpy",
      "scipy"
    ],
    "requires_python": "",
    "summary": "Simple tool for rocket simulation by python, the code were based on the original SRD  (Simple Rccket Designer)",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6653050,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69c2b4bd59d507d7831ea04f7d8349a3668942ca813bb041926e75ebf7f22a44",
          "md5": "d11cc69d35b221ef56539a5e81e891be",
          "sha256": "d9f59e0e7cccfb56ddd63d044ab3d13ff09e16eb75574eae86d276fa85048e5f"
        },
        "downloads": -1,
        "filename": "rocketsimu-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d11cc69d35b221ef56539a5e81e891be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9277,
        "upload_time": "2020-02-18T12:42:45",
        "upload_time_iso_8601": "2020-02-18T12:42:45.607155Z",
        "url": "https://files.pythonhosted.org/packages/69/c2/b4bd59d507d7831ea04f7d8349a3668942ca813bb041926e75ebf7f22a44/rocketsimu-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3da7755f1f7993de072dc1b5c7c08c589158743da49b87e7013be3088e6d0687",
          "md5": "c4ca71d5035ffe4cc62d01676df042e1",
          "sha256": "b47b59895547900e533557e78609e1e726500439bce392e577b1e58a621d5ec0"
        },
        "downloads": -1,
        "filename": "rocketsimu-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c4ca71d5035ffe4cc62d01676df042e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9188,
        "upload_time": "2020-02-18T12:42:47",
        "upload_time_iso_8601": "2020-02-18T12:42:47.390780Z",
        "url": "https://files.pythonhosted.org/packages/3d/a7/755f1f7993de072dc1b5c7c08c589158743da49b87e7013be3088e6d0687/rocketsimu-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69c2b4bd59d507d7831ea04f7d8349a3668942ca813bb041926e75ebf7f22a44",
        "md5": "d11cc69d35b221ef56539a5e81e891be",
        "sha256": "d9f59e0e7cccfb56ddd63d044ab3d13ff09e16eb75574eae86d276fa85048e5f"
      },
      "downloads": -1,
      "filename": "rocketsimu-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d11cc69d35b221ef56539a5e81e891be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9277,
      "upload_time": "2020-02-18T12:42:45",
      "upload_time_iso_8601": "2020-02-18T12:42:45.607155Z",
      "url": "https://files.pythonhosted.org/packages/69/c2/b4bd59d507d7831ea04f7d8349a3668942ca813bb041926e75ebf7f22a44/rocketsimu-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3da7755f1f7993de072dc1b5c7c08c589158743da49b87e7013be3088e6d0687",
        "md5": "c4ca71d5035ffe4cc62d01676df042e1",
        "sha256": "b47b59895547900e533557e78609e1e726500439bce392e577b1e58a621d5ec0"
      },
      "downloads": -1,
      "filename": "rocketsimu-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c4ca71d5035ffe4cc62d01676df042e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9188,
      "upload_time": "2020-02-18T12:42:47",
      "upload_time_iso_8601": "2020-02-18T12:42:47.390780Z",
      "url": "https://files.pythonhosted.org/packages/3d/a7/755f1f7993de072dc1b5c7c08c589158743da49b87e7013be3088e6d0687/rocketsimu-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}