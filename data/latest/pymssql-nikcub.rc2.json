{
  "info": {
    "author": "pymssql development team",
    "author_email": "pymssql@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Database",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pymssql - DB-API interface to Microsoft SQL Server\n==================================================\n\n.. image:: https://travis-ci.org/pymssql/pymssql.png?branch=master\n        :target: https://travis-ci.org/pymssql/pymssql\n\n.. image:: https://ci.appveyor.com/api/projects/status/ts4q4nptm15ac6j7/branch/master?svg=true\n        :target: https://ci.appveyor.com/project/level12/pymssql/branch/master\n\n.. image:: http://img.shields.io/pypi/dm/pymssql.svg\n        :target: https://pypi.python.org/pypi/pymssql/\n\n.. image:: http://img.shields.io/pypi/v/pymssql.svg\n        :target: https://pypi.python.org/pypi/pymssql/\n\nA simple database interface for `Python`_ that builds on top of `FreeTDS`_ to\nprovide a Python DB-API (`PEP-249`_) interface to `Microsoft SQL Server`_.\n\n.. _Microsoft SQL Server: http://www.microsoft.com/sqlserver/\n.. _Python: http://www.python.org/\n.. _PEP-249: http://www.python.org/dev/peps/pep-0249/\n.. _FreeTDS: http://www.freetds.org/\n\nDetailed information on pymssql is available on the website:\n\nhttp://pymssql.org\n\nNew development is happening on GitHub at:\n\nhttps://github.com/pymssql/pymssql\n\nThere is a Google Group for discussion at:\n\nhttps://groups.google.com/forum/?fromgroups#!forum/pymssql\n\n\nDo you use pymssql?\n-------------------\n\nCan you take a minute and fill out this survey to help us prioritize development tasks?\n\nhttps://www.surveymonkey.com/s/KMQ8BM5\n\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/pymssql/pymssql/trend.png\n   :alt: Bitdeli badge\n   :target: https://bitdeli.com/free\n\n\n\nRecent Changes\n==============\n\nVersion 2.2.0 - To be released\n==============================\n\nGeneral\n-------\n\n- Drop support for versions of FreeTDS older than 0.91.\n\nFeatures\n--------\n\n- Support for new in SQL Server 2008 ``DATE``, ``TIME`` and ``DATETIME2`` data\n  types (GH-156). The following conditions need to be additionally met so\n  values of these column types can be returned from the database as their\n  native corresponding Python data types instead of as strings:\n\n  * Underlying FreeTDS must be 0.95 or newer.\n  * TDS protocol version in use must be 7.3 or newer.\n\n  Thanks Ed Avis for the implementation. (GH-331)\n\nBug fixes\n---------\n\n- Fix ``tds_version``  ``_mssql`` connection property value for TDS version.\n  7.1 is actually 7.1 and not 8.0.\n\nVersion 2.1.3 - 2016-06-22 - Ramiro Morales\n===========================================\n\n- We now publish Linux PEP 513 manylinux wheels on PyPI.\n- Windows official binaries: Rollback changes to Windows binaries we had\n  implemented in pymssql 2.1.2; go back to using:\n\n  * A statically linked version of FreeTDS (v0.95.95)\n  * No SSL support\n\nVersion 2.1.2 - 2016-02-10 - Ramiro Morales\n===========================================\n\n.. attention:: Windows users: You need to download and install additional DLLs\n\n    pymssql version 2.1.2 includes a change in the official Windows binaries:\n    FreeTDS isn't statically linked as it happened up to release 2.1.1, as that\n    FreeTDS copy lacked SSL support.\n\n    Please see http://pymssql.org/en/latest/freetds.html#windows for futher\n    details.\n\n    We are trying to find a balance between security and convenience and will\n    be evaluating the situation for future releases. Your feedback is greatly\n    welcome.\n\nFeatures\n--------\n\n- Add ability to set TDS protocol version from pymssql when connecting to SQL\n  Server. For the remaining pymssql 2.1.x releases its default value will be 7.1\n  (GH-323)\n\n- Add Dockerfile and a Docker image and instructions on how to use it (GH-258).\n  This could be a convenient way to use pymssql without having to build stuff.\n  See http://pymssql.readthedocs.org/en/latest/intro.html#docker\n  Thanks Marc Abramowitz.\n\n- Floating point values are now accepted as Stored Procedure arguments\n  (GH-287). Thanks Runzhou Li (Leo) for the report and Bill Adams for the\n  implementation.\n\n- Send pymssql version in the appname TDS protocol login record field when the\n  application doesn't provide one (GH-354)\n\nBug fixes\n---------\n\n- Fix a couple of very common causes of segmentation faults in presence of\n  network a partition between a pymssql-based app and SQL Server (GH-147,\n  GH-271) Thanks Marc Abramowitz. See also GH-373.\n\n- Fix failures and inconsistencies in query parameter interpolation when\n  UTF-8-encoded literals are present (GH-185). Thanks Bill Adams. Also, GH-291.\n\n- Fix ``login_timeout`` parameter of ``pymssql.connect()`` (GH-318)\n\n- Fixed some cases of ``cursor.rowcont`` having a -1 value after iterating\n  over the value returned by pymssql cursor ``fetchmany()`` and ``fetchone()``\n  methods (GH-141)\n\n- Remove automatic treatment of string literals passed in queries that start\n  with ``'0x'`` as hexadecimal values (GH-286)\n\n- Fix build fatal error when using Cython >= 0.22 (GH-311)\n\nInternals\n---------\n\n- Add Appveyor hosted CI setup for running tests on Windows (GH-347)\n\n- Travis CI: Use newer, faster, container-based infrastructure. Also, test\n  against more than one FreeTDS version.\n\n- Make it possible to build official release files (sdist, wheels) on Travis &\n  AppVeyor.\n\nVersion 2.1.1 - 2014-11-25 - Ramiro Morales\n===========================================\n\nFeatures\n--------\n\n- Custom message handlers (GH-139)\n\n  The DB-Library API includes a callback mechanism so applications can provide\n  functions known as *message handlers* that get passed informative messages\n  sent by the server which then can be logged, shown to the user, etc.\n\n  ``_mssql`` now allows you to install your own *message handlers* written in\n  Python. See the ``_msssql`` examples and reference sections of the\n  documentation for more details.\n\n  Thanks Marc Abramowitz.\n\n- Compatibility with Azure\n\n  It is now possible to transparently connect to `SQL Server instances`_\n  accessible as part of the Azure_ cloud services.\n\n  .. note:: If you need to connect to Azure make sure you use FreeTDS 0.91 or\n            newer.\n\n- Customizable per-connection initialization SQL clauses (both in ``pymssql``\n  and ``_mssql``) (GH-97)\n\n  It is now possible to customize the SQL statements sent right after the\n  connection is established (e.g. ``'SET ANSI_NULLS ON;'``). Previously\n  it was a hard-coded list of queries. See the ``_mssql.MSSQLConnection``\n  documentation for more details.\n\n  Thanks Marc Abramowitz.\n\n- Added ability to handle instances of ``uuid.UUID`` passed as parameters for\n  SQL queries both in ``pymssql`` and ``_mssql``. (GH-209)\n\n  Thanks Marat Mavlyutov.\n\n- Allow using `SQL Server autocommit mode`_ from ``pymssql`` at connection\n  opening time. This allows e.g. DDL statements like ``DROP DATABASE`` to be\n  executed. (GH-210)\n\n  Thanks Marat Mavlyutov.\n\n- Documentation: Explicitly mention minimum versions supported of Python (2.6)\n  and SQL Server (2005).\n\n- Incremental enhancements to the documentation.\n\n.. _SQL Server instances: http://www.windowsazure.com/en-us/services/sql-database/\n.. _Azure: https://www.windowsazure.com/\n.. _SQL Server autocommit mode: http://msdn.microsoft.com/en-us/library/ms187878%28v=sql.105%29.aspx\n\nBug fixes\n---------\n\n- Handle errors when calling Stored Procedures via the ``.callproc()`` pymssql\n  cursor method. Now it will raise a DB-API ``DatabaseException``; previously\n  it allowed a ``_mssql.MSSQLDatabaseException`` exception to surface.\n\n- Fixes in ``tds_version`` ``_mssql`` connections property value\n\n  Made it work with TDS protocol version 7.2. (GH-211)\n\n  The value returned for TDS version 7.1 is still 8.0 for backward\n  compatibility (this is because such feature got added in times when\n  Microsoft documentation labeled the two protocol versions that followed 7.0\n  as 8.0 and 9.0; later it changed them to 7.1 and 7.2 respectively) and will\n  be corrected in a future release (2.2).\n\n- PEP 249 compliance (GH-251)\n\n  Added type constructors to increase compatibility with other libraries.\n\n  Thanks Aymeric Augustin.\n\n- pymssql: Made handling of integer SP params more robust (GH-237)\n\n- Check lower bound value when convering integer values from to Python to SQL\n  (GH-238)\n\nInternals\n---------\n\n- Completed migration of the test suite from nose to py.test.\n\n- Added a few more test cases to our suite.\n\n- Tests: Modified a couple of test cases so the full suite can be run against\n  SQL Server 2005.\n\n- Added testing of successful build of documentation to Travis CI script.\n\n- Build process: Cleanup intermediate and ad-hoc anciliary files (GH-231,\n  GH-273)\n\n- setup.py: Fixed handling of release tarballs contents so no extraneous files\n  are shipped and the documentation tree is actually included. Also, removed\n  unused code.\n\nVersion 2.1.0 - 2014-02-25 - `Marc Abramowitz <http://marc-abramowitz.com/>`_\n=============================================================================\n\nFeatures\n--------\n\n- Sphinx-based documentation (GH-149)\n\n  Read it online at http://pymssql.org/\n\n  Thanks, Ramiro Morales!\n\n  See:\n\n  * https://github.com/pymssql/pymssql/pull/149\n  * https://github.com/pymssql/pymssql/pull/162\n  * https://github.com/pymssql/pymssql/pull/164\n  * https://github.com/pymssql/pymssql/pull/165\n  * https://github.com/pymssql/pymssql/pull/166\n  * https://github.com/pymssql/pymssql/pull/167\n  * https://github.com/pymssql/pymssql/pull/169\n  * https://github.com/pymssql/pymssql/pull/174\n  * https://github.com/pymssql/pymssql/pull/175\n\n- \"Green\" support (GH-135)\n\n  Lets you use pymssql with cooperative multi-tasking systems like\n  gevent and have pymssql call a callback when it is waiting for a\n  response from the server. You can set this callback to yield to\n  another greenlet, coroutine, etc. For example, for gevent, you could\n  do::\n\n      def wait_callback(read_fileno):\n          gevent.socket.wait_read(read_fileno)\n\n      pymssql.set_wait_callback(wait_callback)\n\n  The above is useful if you're say, running a gunicorn server with the\n  gevent worker. With this callback in place, when you send a query to\n  SQL server and are waiting for a response, you can yield to other\n  greenlets and process other requests. This is super useful when you\n  have high concurrency and/or slow database queries and lets you use\n  less gunicorn worker processes and still handle high concurrency.\n\n  See https://github.com/pymssql/pymssql/pull/135\n\n- Better error messages.\n\n  E.g.: For a connection failure, instead of:\n\n      pymssql.OperationalError: (20009, 'Net-Lib error during Connection\n      refused')\n\n  the dberrstr is also included, resulting in:\n\n      pymssql.OperationalError: (20009, 'DB-Lib error message 20009,\n      severity 9:\\nUnable to connect: Adaptive Server is unavailable or\n      does not exist\\nNet-Lib error during Connection refused\\n')\n\n  See:\n  * https://github.com/pymssql/pymssql/pull/151\n\n  In the area of error messages, we also made this change:\n\n  execute: Raise ColumnsWithoutNamesError when as_dict=True and missing\n  column names (GH-160)\n\n  because the previous behavior was very confusing; instead of raising\n  an exception, we would just return row dicts with those columns\n  missing. This prompted at least one question on the mailing list\n  (https://groups.google.com/forum/?fromgroups#!topic/pymssql/JoZpmNZFtxM),\n  so we thought it was better to handle this explicitly by raising an\n  exception, so the user would understand what went wrong.\n\n  See:\n  * https://github.com/pymssql/pymssql/pull/160\n  * https://github.com/pymssql/pymssql/pull/168\n\n- Performance improvements\n\n  You are most likely to notice a difference from these when you are\n  fetching a large number of rows.\n\n  * Reworked row fetching (GH-159)\n\n    There was a rather large amount of type conversion occuring when\n    fetching a row from pymssql. The number of conversions required have\n    been cut down significantly with these changes.\n    Thanks Damien, Churchill!\n\n    See:\n    * https://github.com/pymssql/pymssql/pull/158\n    * https://github.com/pymssql/pymssql/pull/159\n\n  * Modify get_row() to use the CPython tuple API (GH-178)\n\n    This drops the previous method of building up a row tuple and switches\n    to using the CPython API, which allows you to create a correctly sized\n    tuple at the beginning and simply fill it in. This appears to offer\n    around a 10% boost when fetching rows from a table where the data is\n    already in memory.\n    Thanks Damien, Churchill!\n\n    See:\n    * https://github.com/pymssql/pymssql/pull/178\n\n- MSSQLConnection: Add `with` (context manager) support (GH-171)\n\n  This adds `with` statement support for MSSQLConnection in the `_mssql`\n  module -- e.g.::\n\n      with mssqlconn() as conn:\n          conn.execute_query(\"SELECT @@version AS version\")\n\n  We already have `with` statement support for the `pymssql` module.\n  See:\n\n  * https://github.com/pymssql/pymssql/pull/171\n\n- Allow passing in binary data (GH-179)\n\n  Use the bytesarray type added in Python 2.6 to signify that this is\n  binary data and to quote it accordingly. Also modify the handling of\n  str/bytes types checking the first 2 characters for b'0x' and insert\n  that as binary data.\n  See:\n\n  * https://github.com/pymssql/pymssql/pull/179\n\n- Add support for binding uuid.UUID instances to stored procedures input\n  params (GH-143)\n  Thanks, Ramiro Morales!\n\n  See:\n  * https://github.com/pymssql/pymssql/pull/143\n  * https://github.com/pymssql/pymssql/commit/1689c83878304f735eb38b1c63c31e210b028ea7\n\n- The version number is now stored in one place, in pymssql_version.h\n  This makes it easier to update the version number and not forget any\n  places, like I did with pymssql 2.0.1\n\n  * See https://github.com/pymssql/pymssql/commit/fd317df65fa62691c2af377e4661defb721b2699\n\n- Improved support for using py.test as test runner (GH-183)\n\n  * See: https://github.com/pymssql/pymssql/pull/183\n\n- Improved PEP-8 and pylint compliance\n\nBug Fixes\n---------\n\n- GH-142 (\"Change how ``*.pyx`` files are included in package\") - this\n  should prevent pymssql.pyx and _mssql.pyx from getting copied into the\n  root of your virtualenv. Thanks, @Arfrever!\n\n  * See: https://github.com/pymssql/pymssql/issues/142\n\n- GH-145 (\"Prevent error string growing with repeated failed connection\n  attempts.\")\n\n  See:\n\n  * https://github.com/pymssql/pymssql/issues/145\n  * https://github.com/pymssql/pymssql/pull/146\n\n- GH-151 (\"err_handler: Don't clobber dberrstr with oserrstr\")\n\n  * https://github.com/pymssql/pymssql/pull/151\n\n- GH-152 (\"_mssql.pyx: Zero init global last_msg_* vars\")\n  See: https://github.com/pymssql/pymssql/pull/152\n\n- GH-177 (\"binary columns sometimes are processed as varchar\")\n  Better mechanism for pymssql to detect that user is passing binary\n  data.\n\n  See: https://github.com/pymssql/pymssql/issues/177\n\n- buffer overflow fix (GH-182)\n\n  * See: https://github.com/pymssql/pymssql/pull/181\n  * See: https://github.com/pymssql/pymssql/pull/182\n\n- Return uniqueidentifer columns as uuid.UUID objects on Python 3\n\n\nSee `ChangeLog`_ for older history...\n\n.. _PyPI: https://pypi.python.org/pypi/pymssql/2.0.0\n.. _Travis CI: https://travis-ci.org/pymssql/pymssql\n.. _Cython: http://cython.org/\n.. _ChangeLog: https://github.com/pymssql/pymssql/blob/master/ChangeLog",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pymssql.org",
    "keywords": "mssql,SQL Server,database,DB-API",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymssql-nikcub",
    "package_url": "https://pypi.org/project/pymssql-nikcub/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pymssql-nikcub/",
    "project_urls": {
      "Homepage": "http://pymssql.org"
    },
    "release_url": "https://pypi.org/project/pymssql-nikcub/2.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "DB-API interface to Microsoft SQL Server for Python. (new Cython-based version)",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2700702,
  "releases": {
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "182245a3a02a819794047eac2ad540cafde5817e7553e4e44ff9bee0c6d84deb",
          "md5": "99c0828867a13467bcf970ad61daa5fb",
          "sha256": "b76f73c9f4932128d3214018192b1488c83a1128553da90d663fdafdbacae17a"
        },
        "downloads": -1,
        "filename": "pymssql_nikcub-2.2.0-cp27-cp27m-macosx_10_12_x86_64.whl",
        "has_sig": false,
        "md5_digest": "99c0828867a13467bcf970ad61daa5fb",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "requires_python": null,
        "size": 247554,
        "upload_time": "2017-03-12T16:25:13",
        "upload_time_iso_8601": "2017-03-12T16:25:13.490179Z",
        "url": "https://files.pythonhosted.org/packages/18/22/45a3a02a819794047eac2ad540cafde5817e7553e4e44ff9bee0c6d84deb/pymssql_nikcub-2.2.0-cp27-cp27m-macosx_10_12_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "088afac95887b4eabbd1f320d6a845151b686da899ab6d5abbd461e97f52d2aa",
          "md5": "3cc12a326ba7576439bc032070620bde",
          "sha256": "483c90f366dd1b6a20816fbefb213c9837fdd4a9677ab4832b8777332e380b14"
        },
        "downloads": -1,
        "filename": "pymssql_nikcub-2.2.0.dev0-cp27-cp27m-macosx_10_12_x86_64.whl",
        "has_sig": false,
        "md5_digest": "3cc12a326ba7576439bc032070620bde",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "requires_python": null,
        "size": 247628,
        "upload_time": "2017-03-12T16:21:06",
        "upload_time_iso_8601": "2017-03-12T16:21:06.660319Z",
        "url": "https://files.pythonhosted.org/packages/08/8a/fac95887b4eabbd1f320d6a845151b686da899ab6d5abbd461e97f52d2aa/pymssql_nikcub-2.2.0.dev0-cp27-cp27m-macosx_10_12_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "182245a3a02a819794047eac2ad540cafde5817e7553e4e44ff9bee0c6d84deb",
        "md5": "99c0828867a13467bcf970ad61daa5fb",
        "sha256": "b76f73c9f4932128d3214018192b1488c83a1128553da90d663fdafdbacae17a"
      },
      "downloads": -1,
      "filename": "pymssql_nikcub-2.2.0-cp27-cp27m-macosx_10_12_x86_64.whl",
      "has_sig": false,
      "md5_digest": "99c0828867a13467bcf970ad61daa5fb",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 247554,
      "upload_time": "2017-03-12T16:25:13",
      "upload_time_iso_8601": "2017-03-12T16:25:13.490179Z",
      "url": "https://files.pythonhosted.org/packages/18/22/45a3a02a819794047eac2ad540cafde5817e7553e4e44ff9bee0c6d84deb/pymssql_nikcub-2.2.0-cp27-cp27m-macosx_10_12_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}