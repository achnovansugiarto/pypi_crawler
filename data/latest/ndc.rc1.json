{
  "info": {
    "author": "Fabio Muratore",
    "author_email": "robo-learning@famura.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Numerical Differentiation Leveraging Convolution (ndc)\n\n[![License](https://img.shields.io/badge/license-MIT-brightgreen)](https://opensource.org/licenses/MIT)\n[![codecov](https://codecov.io/gh/famura/ndc/branch/main/graph/badge.svg?token=ESUTNFwtYY)](https://codecov.io/gh/famura/ndc)\n[![isort](https://img.shields.io/badge/imports-isort-green)](https://pycqa.github.io/isort/)\n[![codestyle](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n**What for?**\n\nDifferentiate signals stored as PyTorch tensors, e.g. measurements obtained from a device or simulation, where automatic differentiation can not be applied.\n\n**Features**\n\n* Theoretically **any order, any stencils, and any step size** (see [this Wiki page](https://en.wikipedia.org/wiki/Finite_difference_coefficient) for information). Be aware that there are numerical limits when computing the filter kernel's coefficients, e.g. small step sized and high orders lead to numerical issues.\n* Works for **multidimensional signals**, assuming that all dimensions share the same step size.\n* Computations can be executed on **CUDA**. However, this has not been tested extensively.\n* Straightforward implementation which you can easily adapt to your needs.\n\n**How?**\n\nThe idea of this small repository is to use the duality between convolution, i.e., filtering, and [numerical differentiation](https://en.wikipedia.org/wiki/Numerical_differentiation) to leverage the existing functions for 1-dimensional convolution in order to compute the (time) derivatives.\n\n**Why PyTorch?**\n\nMore often then not I received (recorded) simulation data as PyTorch tensors rather than numpy arrays.\nThus, I think it is nice to have a function to differentiate measurement signals without switching the data type or computation device.\nMoreover, the `torch.conv1d` function fits perfectly for this purpose.\n\n\n## Citing\n\nIf you use code or ideas from this repository for your projects or research, please cite it.\n```\n@misc{Muratore_ncd,\n  author = {Fabio Muratore},\n  title = {ndc - Numerical differentiation leveraging convolutions},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/famura/ndc}}\n}\n```\n\n## Installation\n\nTo install the core part of the package run\n```\npip install ndc\n```\n\nFor (local) development install the dependencies with\n```\npip install -e .[dev]\n```\n\n## Usage\n\nConsider a signal `x`, e.g. a measurement you obtained form a device. This package assumes that the signal to differentiate is of shape `(num_steps, dim_data)`\n\n```python\nimport torch\nimport ndc\n\n# Assuming you got x(t) from somewhere.\nassert isinstance(x, torch.Tensor)\nnum_steps, dim_data = x.shape \n\n# Specify the derivative. Here, the first order central derivative.\nstencils = [-1, 0, 1]\norder = 1\nstep_size = dt # should be known from your signal x(t), else use 1\npadding = True # if true, the initial and final values are repeated as often as necessary to match the  length of x \n\ndx_dt_num = ndc.differentiate_numerically(x, stencils, order, step_size, padding)\nassert dx_dt_num.device == x.device\nif padding:\n    assert dx_dt_num.shape == (num_steps, dim_data)\nelse:\n    assert dx_dt_num.shape == (num_steps - sum(s != 0 for s in stencils), dim_data)\n```\n\n\n## Contributions\n\nMaybe you want another padding mode, or you found a way to improve the CUDA support. Please feel free to leave a pull request or issue.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/famura/ndc",
    "keywords": "numerical differentiation,finite differences,convolution,signal processing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ndc",
    "package_url": "https://pypi.org/project/ndc/",
    "platform": null,
    "project_url": "https://pypi.org/project/ndc/",
    "project_urls": {
      "Bug Reports": "https://github.com/famura/ndc/issues",
      "Homepage": "https://github.com/famura/ndc",
      "Source": "https://github.com/famura/ndc"
    },
    "release_url": "https://pypi.org/project/ndc/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "Numerical differentiation leveraging convolutions based on PyTorch",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13531120,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeb615a7411c237645dc91c6047d9763d56675338af5a32226933e1f1220643e",
          "md5": "7cee7ef23415d83c21c848d9d4a2055a",
          "sha256": "a2f87f673399ce67b15fe9b20ada4f657329d3d1c6ea1094f0887790633d9443"
        },
        "downloads": -1,
        "filename": "ndc-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cee7ef23415d83c21c848d9d4a2055a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6764,
        "upload_time": "2022-04-16T09:05:50",
        "upload_time_iso_8601": "2022-04-16T09:05:50.386478Z",
        "url": "https://files.pythonhosted.org/packages/ee/b6/15a7411c237645dc91c6047d9763d56675338af5a32226933e1f1220643e/ndc-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eeb615a7411c237645dc91c6047d9763d56675338af5a32226933e1f1220643e",
        "md5": "7cee7ef23415d83c21c848d9d4a2055a",
        "sha256": "a2f87f673399ce67b15fe9b20ada4f657329d3d1c6ea1094f0887790633d9443"
      },
      "downloads": -1,
      "filename": "ndc-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7cee7ef23415d83c21c848d9d4a2055a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 6764,
      "upload_time": "2022-04-16T09:05:50",
      "upload_time_iso_8601": "2022-04-16T09:05:50.386478Z",
      "url": "https://files.pythonhosted.org/packages/ee/b6/15a7411c237645dc91c6047d9763d56675338af5a32226933e1f1220643e/ndc-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}