{
  "info": {
    "author": "lojack5",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: Implementation :: CPython",
      "Typing :: Typed"
    ],
    "description": "![tests](https://github.com/lojack5/structured/actions/workflows/tests.yml/badge.svg)\r\n[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\r\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\r\n\r\n\r\n# IFileOperation- a simple wrapper to use Windows shell file operations.\r\nThis is a very small wrapper around IFileOperation to expose methods to perform file opereration (\r\nmove, copy, rename, delete) on files using Windows shell operations.  This means these\r\noperations can be undone, files can be recycled, and you can allow users to handle name conflicts:\r\njust like when you do any of these through Windows Explorer.\r\n\r\nAt the moment this is a very young and so only exposes the file operations:\r\n- Move\r\n- Copy\r\n- Rename\r\n- Delete\r\n\r\nMore features may be added in the future, feel free to open a feature request for something\r\nspecific.\r\n\r\n\r\n## Installation:\r\n`pip install ifileoperation`\r\n\r\nAt the moment the library is tested to run on Python 3.11, but other version might work if `pywin32`\r\n and `comtypes` are available.\r\n\r\n\r\n## Usage\r\nAll of the functionality is accessed via the `FileOperator` class.  This is a scheduling context\r\nmanager. If you're familiar with IFileOperation, you'll know that you queue a bunch of operations\r\nyou wish to be performed, then order them to be executed all at once:\r\n\r\n```python\r\nfrom Pathlib import Path\r\nfrom ifileoperation import FileOperator, FileOperationFlags\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Configure for recycling, showing a prompt if the file(s) can't be recyled\r\n    # and must be deleted instead.\r\n    recycle_flags = (\r\n      # ALLOW_UNDO: for versions < Win8, ADDUNDORECORD is preferred for Win8+\r\n      FileOperationFlags.ALLOW_UNDO | FileOperationFlags.ADDUNDORECORD |\r\n      # RECYCLEONDELETE: Perform deletes as recycles\r\n      FileOperationFlags.RECYCLEONDELETE |\r\n      # WANTNUKEWARNING: If a file is too big to be recyled, show a warning that\r\n      #  it will be deleted instead\r\n      FileOperationFlags.WANTNUKEWARNING |\r\n    )\r\n    # Don't show any confirmation dialogs (except for WANTNUKEWARNING), or a UAC\r\n    # prompt if elevation is required (default behavior)\r\n    ui_flags = (\r\n      # NO_CONFIMATION: Don't show confirmation dialogs (ie, treat all dialogs\r\n      # as if 'Yes to All' was selected)\r\n      FileOperationFlags.NO_CONFIRMATION |\r\n    )\r\n    config = recycle_flags | ui_flags\r\n    with FileOperator(flags=config, commit_on_exit=True) as op:\r\n        op.delete_file('Q:/foo.txt')\r\n        op.delete_file(Path.cwd().join('bar.txt'))\r\n```\r\n\r\n\r\n## FileOperator\r\nA thin wrapper around IFileOperation, exposing the move, copy, rename, and\r\ndelete operations.  All paths can be specified as anything implementing the\r\n`os.PathLike[str]` interface: strings, `Path` objects, or your own custom\r\n`PathLike` class.  The `FileOperator` instance is a context manager: you queue\r\noperations in the `with` block, and then `commit` them or have them committed\r\nautomatically.\r\n\r\nNOTE: `FileOperator` is not reentrant.  Once you've entered the `with` block and\r\nexited, you should create a new instance to perform more operations.\r\n\r\n### Configuring:\r\nConfiguration is done via the constructor:\r\n```python\r\n__init__(self, parent=None, flags=FileOperator.DEFAULT_FLAGS, commit_on_exit=False):\r\n```\r\n- `parent`: A optional `HANDLE` to the parent that should own any dialog boxes\r\n  shown. You may also pass a `wx.Window` object, and `FileOperator` will extract\r\n  the handle for you.\r\n- `flags`: A `FileOperationFlags` instance indicating the options you want when\r\n  performing the operations.  See the Microsoft documentation on [these flags](\r\n  https://learn.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifileoperation-setoperationflags)\r\n  for more details on what each means.  These are also in the docstrings for\r\n  `FileOperationFlags`, so you can read there them as well.  Some common defaults are\r\n  provided as well:\r\n  - `FileOperator.DEFAULT_FLAGS`: This causes behavior as if the user had initiated the\r\n    file operations from within Windows Exlorer with no modifier keys pressed (Shift,\r\n    Ctrl, etc).\r\n  - `FileOperator.UNDO_FLAGS`: This sets the flags needed to allow your operation to be\r\n    undone with `Ctrl+Z`.\r\n  - `FileOperator.SEMI_SILENT_FLAGS`: This hides the progress dialog, and only shows\r\n    dialogs if user intervention is required. For example, if a name collision occurs, or\r\n    when attempting to move a file that cannot be (temporarily) due to being open in\r\n    another program, or if a file must be deleted instead of recycled.\r\n  - `FileOperator.FULL_SILENT_FLAGS`: This performs the operations fully silently, responding\r\n    to any prompts as if \"Yes to All\" or \"Continue\" was selected.  Note this does *not*\r\n    resolve other errors, and will fail if any error occurs.  The only prompt that may be shown\r\n    is a UAC prompt if elevation is required.  You can further suppress the UAC prompt with\r\n    `FileOperationFlags.REQUIREELEVATION`.\r\n- `commit_on_exit`: If set to `True`, all the queued operations will be\r\n  automatically commited as long as no exceptions occurred withing the `with`\r\n  block before exiting.  Exceptions *might* still occur during the committing\r\n  itself though!\r\n\r\n### Operations supported:\r\nThe basic file operations can be scheduled.  In these method signatures,\r\n`StrPath` is defined as `str | os.PathLike[str]`.\r\n- `move_file(source: StrPath, destination: StrPath, new_name: str | None = None)`:\r\n  Moves the file at `source` to the destination directory `destination`.  If `new_name`\r\n  is supplied, the file will also be renamed to the new name.\r\n- `move_files(sources: Iterable[StrPath], destination: StrPath, new_name: str | None = None)`:\r\n  Moves the specified files `sources` to the destination directory `destination`.  If\r\n  `new_name` is supplied, the files will all be renamed to the new name. In this case,\r\n  you probably also want to supply `FileOperationFlags.RENAMEONCOLLISION`.\r\n- `copy_file(source: StrPath, destination: StrPath, new_name: str | None = None)`:\r\n  Like move, but performs a copy instead.\r\n- `copy_files(sources: Iterable[StrPath], destination: StrPath)`:\r\n  Like move (without the rename), but performs a copy instead.\r\n- `rename_file(source: StrPath, new_name: str, allow_move: bool = True)`:\r\n  Renames a file to a new name.  Normally, `new_name` should just be the name of\r\n  the new file, without its directory.  However, if you're used to other file\r\n  APIs that let you \"rename\" a file into a different directory, `rename_file`\r\n  supports this as well.  When `allow_move` is `True`, if it is detected that\r\n  `new_name` is actually a path resolving to a different directory, this will\r\n  automatically be transformed into a `move_file` operation instead.\r\n- `rename_files(sources: Iterable[StrPath], new_name: str)`:  Renames the given\r\n  files to have the new name.  Unlike `rename_file`, you cannot rename files\r\n  into files in different directories.\r\n- `delete_file(source: StrPath)`: Deletes the target file.\r\n- `delete_files(sources: Iterable[StrPath])`: Deletes the target files.\r\n- `commit()`: Cause all the queue operations to be performed.\r\n\r\n### Post-commit attributes\r\nAfter a `commit`, additional attributes are available on the `FileOperator` instance:\r\n- `return_code`: The `HRESULT` return code from the overall operation. This is usually\r\n  not required to be inspected.\r\n- `aborted`: `True` if any of the operations were aborted / skipped.\r\n- `results`: A mapping of source filenames to destination filenames for successful\r\n  operations.  In the special case of deleted files, the destination will be `'RECYCLED'`\r\n  or `'DELETED'` respectively.\r\n\r\n### Exceptions\r\nThis library may raise any of the following exceptions:\r\n  - `NotADirectoryError`: This can happen when trying to rename a folder if a file\r\n    already exists with the same name, or attempting to move/copy to a directory\r\n    that doesn't exist.\r\n  - `IsADirectoryError`: This can happen when trying to rename a file if a folder\r\n    already exists with the same name.\r\n  - `PermissionError`: Can occur for various reasons, common examples are UAC\r\n    elevation being required, or modifying a read-only file.\r\n  - `FileExistsError`: Can occur when attempting to create a new file, when one\r\n    of the same name already exists.\r\n  - `FileNotFoundError`: Happens if the source file for an operation cannot be\r\n    found.\r\n  - `ifileoperation.IFileOperationError`: For all other errors that occur. These\r\n    are a simple wrapper around `pythoncom.com_error`, and expose an `.hresult`\r\n    attribute with the `HRESULT` that triggered the error.\r\nIn the future, more `HRESULT`s may be converted into standard library `OSError`s.\r\n\r\n\r\n## Contributing\r\nPull requests are welcome!  We use branch protection with some (minimal) tests\r\nat the moment: just formatting really. To install the dependencies needed for\r\ndevelopment, use:\r\n`pip install -r requirements-dev.txt`\r\n\r\nAnd before committing make sure to check against the tests and formatters:\r\n- `pytest`: No tests at the moment\r\n- `black ifileoperation`: Code formatting\r\n- `isort ifileoperation`: Code formatting\r\n- `flake8 ifileoperation`: Linting\r\n\r\nIFileOperation uses [semantic versioning](https://semver.org/), but if you're\r\nunsure if your changes need a version bump feel free to note that in your pull\r\nrequest and you'll get feedback!\r\n\r\nIf you're not into coding, you can open a [Bug Report or Feature Request](https://github.com/lojack5/IFileOperation/issues)\r\nand I'll look into it.\r\n\r\n\r\n## Known Issues:\r\n1. Incompatible with WINE: see: https://github.com/lojack5/IFileOperation/issues/9\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ifileoperation",
    "package_url": "https://pypi.org/project/ifileoperation/",
    "platform": null,
    "project_url": "https://pypi.org/project/ifileoperation/",
    "project_urls": {
      "Bug Tracker": "https://github.com/lojack5/IFileOperation/issues",
      "Homepage": "https://github.com/lojack5/IFileOperation"
    },
    "release_url": "https://pypi.org/project/ifileoperation/1.2.3/",
    "requires_dist": [
      "comtypes (>=1.1.14)",
      "pywin32 (>=305)"
    ],
    "requires_python": ">=3.11",
    "summary": "Python wrapper for using Win32's IFileOperation for manipulating the filesystem.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17166575,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7bafdaca1b91ef1c5421af1e7a138d127e918fbb6fe53c75d4859660bbf4bf9",
          "md5": "0a495a07ca5914d2487aa79a185fc9b5",
          "sha256": "ed1a6faec90d1a9f1161945fb2a72c4a0455d13304c8fa662360c6db0cfd077f"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a495a07ca5914d2487aa79a185fc9b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 14563,
        "upload_time": "2023-01-21T21:15:44",
        "upload_time_iso_8601": "2023-01-21T21:15:44.929936Z",
        "url": "https://files.pythonhosted.org/packages/e7/ba/fdaca1b91ef1c5421af1e7a138d127e918fbb6fe53c75d4859660bbf4bf9/ifileoperation-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df255e3a5ba9cc7d815abb5869121d766cbc832e6e57d8de845e10833530c3ae",
          "md5": "59898f532d31bb8e9f6740c2117e6ec4",
          "sha256": "ac002cd2bacd6727f304b541324c3e5619d2e46e9aa4610be1c86adbe45738f2"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "59898f532d31bb8e9f6740c2117e6ec4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 16492,
        "upload_time": "2023-01-21T21:15:46",
        "upload_time_iso_8601": "2023-01-21T21:15:46.446612Z",
        "url": "https://files.pythonhosted.org/packages/df/25/5e3a5ba9cc7d815abb5869121d766cbc832e6e57d8de845e10833530c3ae/ifileoperation-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76f17507dd0409f36c470d5115c2607f20f7555614adc6fbc9bb6d2005d8ab6e",
          "md5": "311e80bb17e1c2910a4418edf4e250fc",
          "sha256": "f0e60f17356f8eaef745bb43cb2af8cf45d5a7784ef91e435e14b676afeaaa45"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "311e80bb17e1c2910a4418edf4e250fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23273,
        "upload_time": "2023-01-24T00:49:14",
        "upload_time_iso_8601": "2023-01-24T00:49:14.746368Z",
        "url": "https://files.pythonhosted.org/packages/76/f1/7507dd0409f36c470d5115c2607f20f7555614adc6fbc9bb6d2005d8ab6e/ifileoperation-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad8e39b194bb7bdee813b1d37bff54d44874f805c666b6e837ae403f251a1f7e",
          "md5": "9e3426bb45e3d851ddaebb56c48ba230",
          "sha256": "79316fb28cbe6cb5020739fa7805811e1c11844716f7d897d7e2e69af1b4a27a"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e3426bb45e3d851ddaebb56c48ba230",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 22937,
        "upload_time": "2023-01-24T00:49:16",
        "upload_time_iso_8601": "2023-01-24T00:49:16.291027Z",
        "url": "https://files.pythonhosted.org/packages/ad/8e/39b194bb7bdee813b1d37bff54d44874f805c666b6e837ae403f251a1f7e/ifileoperation-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eff4ed00d4e1fa15f74b17d27fe1a7746a45ad3c7c2cb37499798e8f27c20083",
          "md5": "0e81a2c2b24d10054b8e859191cf41b9",
          "sha256": "5993a76d0b9a61b131bc614c8ccdb7e3e1e7943a3d0664efe33baa7d2ee76dce"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e81a2c2b24d10054b8e859191cf41b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23800,
        "upload_time": "2023-02-06T21:24:46",
        "upload_time_iso_8601": "2023-02-06T21:24:46.620952Z",
        "url": "https://files.pythonhosted.org/packages/ef/f4/ed00d4e1fa15f74b17d27fe1a7746a45ad3c7c2cb37499798e8f27c20083/ifileoperation-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9070cf1ffd61204f0acd530a02d1a934413e50523c9c43bee4d111dc549b40dd",
          "md5": "fff23dcf9986c63b8b0d1c08bce1098d",
          "sha256": "30a42d4ba5c1cdfcbe276ad33d35b5f70446751301ded121010391d56107a1cc"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fff23dcf9986c63b8b0d1c08bce1098d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23472,
        "upload_time": "2023-02-06T21:24:47",
        "upload_time_iso_8601": "2023-02-06T21:24:47.879660Z",
        "url": "https://files.pythonhosted.org/packages/90/70/cf1ffd61204f0acd530a02d1a934413e50523c9c43bee4d111dc549b40dd/ifileoperation-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "839ace6eddba02ee46016d0040c8ba6a751879336741993d5d163fd95688b5fe",
          "md5": "a714a74da2678c6c9914dc2d9c6db50c",
          "sha256": "d9824c3d1c9e493866b6026cff2d61b707a3ff8f44a67c5187f372d2c9a4f9f5"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a714a74da2678c6c9914dc2d9c6db50c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23820,
        "upload_time": "2023-02-07T00:49:18",
        "upload_time_iso_8601": "2023-02-07T00:49:18.226077Z",
        "url": "https://files.pythonhosted.org/packages/83/9a/ce6eddba02ee46016d0040c8ba6a751879336741993d5d163fd95688b5fe/ifileoperation-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c1e62f7a3e360239e162fbf6e276f9a001916ce866fc089b87dc8e41a85160a",
          "md5": "ed03bfb3190fb8d51163f54adcfa1ce5",
          "sha256": "dec21c44355a186f6baf14230b9a2475805968e6e680dc8ac7657a4ba02e2709"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed03bfb3190fb8d51163f54adcfa1ce5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23524,
        "upload_time": "2023-02-07T00:49:19",
        "upload_time_iso_8601": "2023-02-07T00:49:19.824031Z",
        "url": "https://files.pythonhosted.org/packages/3c/1e/62f7a3e360239e162fbf6e276f9a001916ce866fc089b87dc8e41a85160a/ifileoperation-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a80ce6ce0a04b57752d99ef973fac3190749a71aff7a0ecb01a2805bd160ee6",
          "md5": "7836bf63ed34825807c70e55c6441bb8",
          "sha256": "0b4c579e017a41822f3b78efd18475210495fc7c0634cf363e18eab4762a4db6"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7836bf63ed34825807c70e55c6441bb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 24021,
        "upload_time": "2023-03-05T20:19:35",
        "upload_time_iso_8601": "2023-03-05T20:19:35.791707Z",
        "url": "https://files.pythonhosted.org/packages/3a/80/ce6ce0a04b57752d99ef973fac3190749a71aff7a0ecb01a2805bd160ee6/ifileoperation-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94069a00ce682e88ee37034955102653c918cc6276bf484f0dac305509fc302f",
          "md5": "73e2bc15386e830773a062670d439f0d",
          "sha256": "d0d4d34f47c69710ef35003dc0e8e33a71c2d9d0ca6074e3c889bc279db53a3f"
        },
        "downloads": -1,
        "filename": "ifileoperation-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73e2bc15386e830773a062670d439f0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23826,
        "upload_time": "2023-03-05T20:19:37",
        "upload_time_iso_8601": "2023-03-05T20:19:37.448886Z",
        "url": "https://files.pythonhosted.org/packages/94/06/9a00ce682e88ee37034955102653c918cc6276bf484f0dac305509fc302f/ifileoperation-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a80ce6ce0a04b57752d99ef973fac3190749a71aff7a0ecb01a2805bd160ee6",
        "md5": "7836bf63ed34825807c70e55c6441bb8",
        "sha256": "0b4c579e017a41822f3b78efd18475210495fc7c0634cf363e18eab4762a4db6"
      },
      "downloads": -1,
      "filename": "ifileoperation-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7836bf63ed34825807c70e55c6441bb8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 24021,
      "upload_time": "2023-03-05T20:19:35",
      "upload_time_iso_8601": "2023-03-05T20:19:35.791707Z",
      "url": "https://files.pythonhosted.org/packages/3a/80/ce6ce0a04b57752d99ef973fac3190749a71aff7a0ecb01a2805bd160ee6/ifileoperation-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94069a00ce682e88ee37034955102653c918cc6276bf484f0dac305509fc302f",
        "md5": "73e2bc15386e830773a062670d439f0d",
        "sha256": "d0d4d34f47c69710ef35003dc0e8e33a71c2d9d0ca6074e3c889bc279db53a3f"
      },
      "downloads": -1,
      "filename": "ifileoperation-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "73e2bc15386e830773a062670d439f0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 23826,
      "upload_time": "2023-03-05T20:19:37",
      "upload_time_iso_8601": "2023-03-05T20:19:37.448886Z",
      "url": "https://files.pythonhosted.org/packages/94/06/9a00ce682e88ee37034955102653c918cc6276bf484f0dac305509fc302f/ifileoperation-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}