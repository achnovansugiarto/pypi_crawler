{
  "info": {
    "author": "JoS QUANTUM",
    "author_email": "contact@jos-quantum.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pygrnd \nis a libary of various quantum algorithms written by the Team JoS QUANTUM GmbH to support the development of Applications for quantum computing in Finance, Insurance and Energy. The framework is a collection of open source libraries that enables building quantum models and prototypes and usage of our quantum algorithms.\n\npygrnd depends on different modules: \n\n    Quantum machine learning: pennylane (pennylane.ai/)\n    Monte Carlo simulation: qiskit (qiskit.org)\n    Optimization: qiskit, dimod (docs.ocean.dwavesys.com/en/stable/)\n\n## Setup\n\n    pip install pygrnd\n\nPre-required:\n   \n    pip install qiskit\n    pip install numpy\n    pip install dimod\n    pip install dwave-greedy\n    pip install pennylane\n \n# Tutorials\n\n## Quantum Risk Modelling\n\nWorkflow to define a risk model like outlined in (https://arxiv.org/abs/2103.05475).\nBuild a Grover operator with a state for which the overall probabilty should be evaluated.\nStandard Quantum Amplitude Estimation algorithm.\nUsing QASM simulator you should not use more than 20 qubits (including the QAEqubits) on your local machine using simulator.\n\n\n    - Input risk items, instrinsic and transition probabilities\n    - List of states to estimate probabilities for the desired state\n    - Precision for the QAE\n    - Number of shots\n\n\n### Syntax\n\nMain functions:\n\n    - brm(nodes, edges, probsNodes, probsEdges, model2gate=False)\n    - brmoracle(name,PDFgenerator,pdfqubits,pdfancillas,LISTOFcontrolstrings)\n    - qae(QAEqubits, inqubits, modelinqubits, A, Q, qae2gate=False)\n    - showQAEoutput(counts,STATELIST)\n    - evaluateRiskModelMonteCarlo(nodes, edges, probsNodes, probsEdges, rounds)\n\n\n### Parameters\n    \nRisk model input:\n\n    - Risk item list e.g.  nodes = ['0','1']\n    - Correlation risk e.g. edges=[('0','1')] # correlations\n    - probsNodes={'0':0.1,'1':0.1} # intrinsic probs\n    - probsEdges={('0','1'):0.2} # transition probs\n    - output: either circuit (model2gate=False) OR gate (model2gate=True)\n\nGrover operator:\n\n    - PDFgenerator = underlying risk model (brm)\n    - pdfqubits = QAE bit resolution\n    - LISTOFcontrolstrings = string of states that we are searching the overall probability \n    \nQuantum Amplitude Estimation:\n\n    - QAEqubits: outqubits is the number of qubits to use for the output\n    - inqubits: number of risk items\n    - modelinqubits is the number of qubits A requires (this may include ancillas, ie is >= inqubits)\n    - A is a gate that generates the input to be estimated\n    - Q is the oracle (one qubit larger than A and controlled)\n    - Optional: qae2gate=False (default)\n\n### Examples\n\n    nodes=['0','1'] # risk items defition\n    edges=[('0','1')] # correlations\n\n    probsNodes={'0':0.1,'1':0.1} # intrinsic probs\n    probsEdges={('0','1'):0.2} # transition probs\n\n    name=\"test\"\n    STATELIST=[\"11\"]\n    Nshots=1000 \n    QAEqubits=6 \n\n    rm,mat = brm(RIlist,TPlist,model2gate=True)\n    ora = brmoracle(\"ora\",rm,len(RIlist),0,STATELIST)\n    QAE=qae(QAEqubits,len(RIlist),len(RIlist),rm,ora)\n    showQAEoutput(counts,STATELIST)\n\n\nClassical evaluation of risk model:\n\n    states, summe = modelProbabilities(nodes,edges,probsNodes,probsEdges)\n    probsMonteCarlo = evaluateRiskModelMonteCarlo(nodes, edges, probsNodes, probsEdges, rounds)\n\n\n## Amplitude Estimation without Phase Estimation\n\n- We have an operator A and a set of good results that have probability a in total.\n- We construct the Grover oracle G for A.\n- We construct a circuit with m calls of G in addition to one call of A and we run the circuit N times. We obtain h good results.\n- For different values of m we repeat this procedure.\n- We obtain vectors vectorN, vectorM and vectorH.\n- Use these parameters to guess the value a with maximum likelihood method.\n- The method uses a gradient descent with a random starting point and a stepSize=0.01 as default step size.\n- The method starts with rounds=10 as default number of random starting points.\n\nExample:\n\n    from pygrnd.qc.MaximumLikelihoodForQAEwoPE import loopGradientOptimizerVector\n    vectorN = [30,30,30]\n    vectorM = [0,1,2]\n    vectorH = [21, 1, 29]\n    bestTheta,bestProb = loopGradientOptimizerVector(vectorN, vectorM, vectorH, rounds=10, stepSize=0.01)\n    print(\"best guess theta=\",bestTheta)\n    print(\"best guess prob=\",bestProb)\n\n\n\n## Pattern-based Circuit optimizer\n\n### Background: Patterns\n\nA pattern is an abstract representation of a sequence of quantum gates that corresponds to the identity. The gates are denoted by a string, e.g. H or X, and the parameters are variables or concrete values. The gates act on qubits that are denoted by numbers only.\n\nAn example for a pattern:\n\n    [['CNOT', {}, [0, 1]], ['RX', {'theta': 1.571}, [1]], ['H', {}, [0]], ['RXX', {'theta': -1.571}, [0, 1]], ['H', {}, [0]], ['S', {}, [0]]\n\nFor instance, ['RXX', {'theta': -1.571}, [0, 1]] denotes a RXX gate with parameter theta set to -1.571 that acts on qubit 0 and 1.\n\nParameters can also be variables. The idea is that we would like to replace two consecutive rotations by a single one, i.e., we would like to replace R(a)R(b) by the rotation R(a+b). For two variables, we encode variable a by the list [1,0] and variable b by [0,1]. The sum is then [1,1], i.e. we have two basis elements and we allow linear combinations.\n\nThis can be rewritten in the following pattern that represents the identity:\n\n    [ ['P',{'lambda':[0,1]},[0]], ['P',{'lambda':[1,0]},[0]],['P',{'lambda':[-1,-1]},[0]]]\n\nWhen doing calculations with qiskit, the variables [1,0] and [0,1] are replaced by the concrete values 0.1 and 0.6 internally. As all reductions are checked this simplification should not raise any problems.\n\n### Background: Reduction with a pattern\n\nThe pattern-based simplification works like follows:\n- Take the original circuit and create a list of all possible candidates. A candidate is a list of gates that can be considered as a single block.\n- Take the list of patterns and try to match a part of the pattern with the candidate. The pattern is longer than the candidate.\n- If the variables in the pattern can be matched with the concrete values in the candidate, then we consider the remaining part of the pattern.\n- If the remaining part of the pattern has lower costs than the replaced candidate, then we replace it by its inverse.\n\nFor instance, the candidate [ ['P',{'lambda':0.25},[0]], ['P',{'lambda':0.35},[0]]] matches the first two gates of the pattern\n\n    [ ['P',{'lambda':[0,1]},[0]], ['P',{'lambda':[1,0]},[0]],['P',{'lambda':[-1,-1]},[0]]]\n\nwith the variable b (represented by [0,1]) set to 0.35 and variable a (represented by [1,0]) set to 0.25. The inverse of the remaining part of the pattern\nis then [ ['P',{'lambda':0.6},[0]]]. Therefore, the P gates with parameters 0.25 and 0.35 can be replaced by a single P gate with the parameter 0.6.\n\n### Pattern Generation\n\n#### Syntax\n\n    getIdentities(totalQubits, numberGates, prefixPattern, gates, params, qubits)\n\n#### Parameters\n- totalQubits: Number of qubits for our patterns, 2 or 3 work well\n- numberGates: Number of gates on the qubits, up to 5 works well\n- prefixPattern: This pattern is always attached to the front of a candidate. Useful if we want to replace gates with gates on less qubits.\n- gates: A list of strings. Each string denotes a gate type, e.g. X or H.\n- params: Same length as parameter gates. Each element is a dictionary for parameters for the corresponding gate, e.g. {'lambda':0.2} for a P gate\n- qubits: Same length as parameter gates. The number of qubits for the corresponding gates, e.g. 1 for an H gate\n\n#### Supported gates\n\nH, Z, SWAP, CNOT, CCX, CZ, S, Sdg, T, Tdg, SX, SXdg, P, RXX, GPI, GPI2, GZ, CP, RX, RY, RZ\n\n#### Syntax\n\n    reduceCircuitByPattern(qc, consideredQubits, allPatterns, costPattern)\n\n#### Parameters\n\n- qc: Quantum circuit to be reduced\n- consideredQubits: Restrict candidate creation to this number of qubits.\n- allPatterns: The pattern database we want to use.\n- costPatterns: A function that is used to compare the cost of patterns. The method uses this function to reduce the costs.\n\n#### Example\nIn notebook ``notebooks/circuitConstructor.ipynb`` there are examples of how to use the circuit decomposer and circuit optimizer.\n\n\n## Quantum machine learing\n\nQuantum machine learning functions for regression and classifiction. \n\n\n### Example: Classification\n\nIn ``notebooks/outlier_detection.ipynb`` an example for fraud detection (binary classification) based on a publicly available Kaggle data set is done.\n\n\n### Example: Forecasting (coming soon)\n\n\n### Example: Synthetic data (coming soon)\n\n\n\n## Optimization\n\nImplementations of different QUBO (Quadratic Unconstrained Binary Optimization) solver for benchmarks.\nMethods for QUBO construction and solving. Classical brute-force solver, Monte Carlo, Quantum annealing (D-Wave), simulated annealing, Quantum approximate optimization algorithm.\n\n\n### Monte Carlo random search\n\n- randomly generate solution vector\n- calculation of matrix product x^T Q x\n- iterate N times\n\nMonteCarloSolver.py\n\n#### Syntax\n    \n    r,a=MCfullsolver(Q,N)\n\n#### Parameters\n- Q: QUBO matrix as numpy array\n- N: number of runs\n- r: solution value\n- a: solution vetor\n\n#### Examples\n    \n    from pygrnd.optimize.MonteCarloSolver import *\n    Q = np.array([[10,-3,-4,-6],[-3,4,-2,-3],[-4,-2,6,-5],[-6,-3,-5,12]])\n    N=10\n    r,a=MCfullsolver(Q,N)\n    print(r,a)\n\n### Monte Carlo gradient search\n\n- randomly generate solution vector\n- map to graph structure \n- calculation of matrix product x^T Q x\n- iterate N times\n\nMonteCarloGradientSearch.py\n\n#### Syntax\n    \n    r,a=MCfullsolver(Q,N)\n\nParameters:\n\n- Q: QUBO matrix as numpy array\n- N: number of runs\n- r: solution value\n- a: solution vetor\n\nExamples:\n    \n    from pygrnd.optimize.MonteCarloGradientSearch import *\n    Q = np.array([[10,-3,-4,-6],[-3,4,-2,-3],[-4,-2,6,-5],[-6,-3,-5,12]])\n    N=10\n    r,a=MCgradientSearch(Q,10)\n    print(r,a)\n\n### Quantum Approximate Optimization Algorithm (QAOA)\n\n- input QUBO matrix as numpy array\n- build cost Hamiltonian U(gamma) using mapping x --> (x - 1) /2 (matrixConvertInv(m))\n- build mixer Hamiltonian U(beta)\n- construct one layer circuit with initial random beta, gamma values\n- execute on backend (default: Aer.get_backend('qasm_simulator'))\n- derive max count\n- calculate expectation value\n- return to optimizer\n- append layer\n- optimize betas and gammas using Nelder-Mead scipy optimizer\n- return best betas and gammas, circuit, objective value\n\nqaoa.py\n\n#### Syntax\n\nHelper functions:\n\n    num2bin(x,r)\n    allCombinations(n)\n    counts2probs(counts)\n    fidelityCounts(countsP, countsQ)\n    maxString(counts)\n    eval_solution(x,m)\n    matrixConvertInv(m)\n    addGates(qr,qc,m1,gamma)\n    qaoaLandscape(m,n,Nshots)\n\nMain functions:\n\n    vec, counts, obj, qc, prob = qaoaExp(m0,beta,gamma,Nshots,backend = Aer.get_backend('qasm_simulator'))\n    obj = multiLayerqaoaExp(m,betas,gammas,Nshots,backend = Aer.get_backend('qasm_simulator'))\n    vec, counts, obj, prob, qc = multiLayerqaoa(m,betas,gammas,Nshots,backend = Aer.get_backend('qasm_simulator'))\n\nFull workflow:\n\n    vec, counts, obj, prob, qc, res1, res2, bestBetas, bestGammas = QAOAoptimize(m,layer,Nshots,backend = Aer.get_backend('qasm_simulator'))\n\n\n#### Parameters\n\nm: QUBO matrix as numpy array\nlayer: number of layer\n\n#### Examples\n\n    layer = 10\n    Nshots = 10000\n    vec, counts, obj, prob, qc, res2 = optimise(xxs, layer,Nshots)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JoSQUANTUM/pygrnd",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygrnd",
    "package_url": "https://pypi.org/project/pygrnd/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygrnd/",
    "project_urls": {
      "Homepage": "https://github.com/JoSQUANTUM/pygrnd"
    },
    "release_url": "https://pypi.org/project/pygrnd/0.1.4/",
    "requires_dist": [
      "qiskit (>=0.32.1)",
      "numpy",
      "dimod",
      "dwave-greedy",
      "pennylane (>=0.27.0)",
      "pandas",
      "seaborn",
      "tqdm",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A python library for quantum algorithms and software",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17177510,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "152dd078a84f48bb852bf8e159eff589ecce9ae744f0b8bdff126817adda4e3f",
          "md5": "856dc21369cbd3754d0906596d39f32c",
          "sha256": "e8f24bf087b8bbba048e7e41dcf447f60c846154b915a87cf8e7d9adab22d92c"
        },
        "downloads": -1,
        "filename": "pygrnd-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "856dc21369cbd3754d0906596d39f32c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70646,
        "upload_time": "2023-03-06T16:15:58",
        "upload_time_iso_8601": "2023-03-06T16:15:58.379546Z",
        "url": "https://files.pythonhosted.org/packages/15/2d/d078a84f48bb852bf8e159eff589ecce9ae744f0b8bdff126817adda4e3f/pygrnd-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79b1c40f0cbb5c062f5c2563275fb552a230e754683351c2b7a44f3240acda41",
          "md5": "c26ec2f836648aebae147597e09415ac",
          "sha256": "0b727034ec418c278a066c33a047b86e002a1d4b73ef70b4e7c2f01d1e96dced"
        },
        "downloads": -1,
        "filename": "pygrnd-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c26ec2f836648aebae147597e09415ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62017,
        "upload_time": "2023-03-06T16:16:00",
        "upload_time_iso_8601": "2023-03-06T16:16:00.484920Z",
        "url": "https://files.pythonhosted.org/packages/79/b1/c40f0cbb5c062f5c2563275fb552a230e754683351c2b7a44f3240acda41/pygrnd-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "152dd078a84f48bb852bf8e159eff589ecce9ae744f0b8bdff126817adda4e3f",
        "md5": "856dc21369cbd3754d0906596d39f32c",
        "sha256": "e8f24bf087b8bbba048e7e41dcf447f60c846154b915a87cf8e7d9adab22d92c"
      },
      "downloads": -1,
      "filename": "pygrnd-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "856dc21369cbd3754d0906596d39f32c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 70646,
      "upload_time": "2023-03-06T16:15:58",
      "upload_time_iso_8601": "2023-03-06T16:15:58.379546Z",
      "url": "https://files.pythonhosted.org/packages/15/2d/d078a84f48bb852bf8e159eff589ecce9ae744f0b8bdff126817adda4e3f/pygrnd-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79b1c40f0cbb5c062f5c2563275fb552a230e754683351c2b7a44f3240acda41",
        "md5": "c26ec2f836648aebae147597e09415ac",
        "sha256": "0b727034ec418c278a066c33a047b86e002a1d4b73ef70b4e7c2f01d1e96dced"
      },
      "downloads": -1,
      "filename": "pygrnd-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c26ec2f836648aebae147597e09415ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 62017,
      "upload_time": "2023-03-06T16:16:00",
      "upload_time_iso_8601": "2023-03-06T16:16:00.484920Z",
      "url": "https://files.pythonhosted.org/packages/79/b1/c40f0cbb5c062f5c2563275fb552a230e754683351c2b7a44f3240acda41/pygrnd-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}