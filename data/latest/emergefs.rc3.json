{
  "info": {
    "author": "Darren Govoni",
    "author_email": "darren@elasticcode.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "<img src=\"./images/logo.png\" width=\"200\">\n\n*Serverless, object-oriented, computational file system for python*\n\n\n> emerge combines the notion of an object persistent store and service API mesh into one design as a distributed filesystem with computational features.\n\n\nWhereas with current REST/API type architectural patterns, you would do the following:\n\n- Create database schemas representing your data objects (data modeling)\n- Retrieve data from databases using separate query language (e.g. SQL) \n- Map data query results back into objects\n- Write separate code that operates on the re-hydrated objects (business logic)\n- Write separate code still that exposes said operations over a network (API)\n- Write separate code still that translates from incoming requests to said operations and said objects (HTTP)\n- And keeping everything in sync, probably writing more code to make this maintenance headache easier\n- All these transformations are slow, difficult to manage and get in the way of actual work\n\nWith emerge, you simply:\n\n- Create a custom python class that encapsulates your data and methods that operate on that data.\n- Store the objects in the emerge filesystem\n- Request those objects by their path (same as a file)\n- Run methods on retrieved objects (locally or remotely: implicit servicing)\n- Celebrate!\n\n## Benefits\n\n- No Database schemas or query languages\n- No `Impedence Mismatches` between layers\n- No visible middleware\n- No protocol hassles\n- No API scaffolding\n- Ultra fast\n- Ultra simple\n- Plain Old Python end-to-end\n- Scriptable CLI for interacting with filesystem\n\n## Usage\n\n```bash\n$ emerge\nUsage: emerge [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --debug  Debug switch\n  --help   Show this message and exit.\n\nCommands:\n  call     Call an object method\n  cat      Display contents of an object\n  code     List source code of an object\n  cp       Copy object command\n  help     Display details of an objects class\n  ls       List files in a directory\n  methods  Display available methods for an object\n  mkdir    Make directory command\n  node     Emerge node commands\n  query    Execute query method of an object\n  rm       Remove object command\n```\n## Examples\n\n```python\nfrom emerge.core.client import Client\nfrom emerge.core.objects import EmergeFile\n\n@dataclass\nclass InventoryItem(EmergeFile):\n    \"\"\" Create your own classes on-the-fly \"\"\"\n    unit_price: float = 0.0\n    quantity_on_hand: int = 0\n\n    def total_cost(self) -> float:\n        return self.unit_price * self.quantity_on_hand\n\nitem = InventoryItem(\n    id=\"widget1\",\n    name=\"widget\",\n    path=\"/inventory\",\n    unit_price=3.0,\n    quantity_on_hand=10,\n    data=\"A widget{} data\".format(1),\n)\n\nclient = Client(\"0.0.0.0\", \"5558\")  # Connect to any node\n\n# Stores item under path /inventory/widget\nclient.store(item)\n```\nExecute object methods as-a-service\n> NOTE: Method runs on the host containing the object\n```python\nclient.run(\"/inventory/widget\", \"total_cost\")\n```\nRetrieve object and run methods on it locally\n```python\nwidget = client.get(\"/inventory/widget\")\ntotal_cost = widget.total_cost()\n```\n### Browse Filesystem\nBrowse the emerge object filesystem from command line:\n```bash\n$ emerge ls\ninventory\n$ emerge ls -l \nrwxrwxrwx 1        Aug 31 2022 14:08:37  inventory \n$ emerge ls -l /inventory\nrwxrwxrwx 5.6K     Aug 31 2022 14:08:37  widget    \n$ emerge cat /inventory/widget\n{\"name\": \"widget\", \"path\": \"/inventory\", \"id\": \"widget1\", \"price\": 3.0, \"quantity\": 10, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget1 data\"}\n$ \n\n```\nListing the directory, shows the directory contents length in the size column. In this case \"1\".\nFor the widget object, the object size is shown 5.6K\n\n### Execute Remote Methods\n\nNOTE: Method executes on the server, only results are returned\n```bash\n$ emerge call /inventory/widget total_cost\n30.0\n```\n> Important to understand that the custom class `InventoryItem` with its methods was created in the client, on-the-fly and stored in emerge.\n> No code update, recompile, redeploy of the emerge network is needed.\n\n### Execute Local Methods\nNOTE: Object (including its state/data) is retrieved from the server and the method invoked in the local process\n```bash\n$ emerge call --local /inventory/widget total_cost\n30.0\n```\n\n### Execute A Method on All Objects in a Directory\nNOTE: Execution occurs on the server\n```bash\n$ emerge call /inventory total_cost\n[30.0, 434.10034997376107, 137.4442513978148, 907.5910237092307, 129.6896355950612, 705.798940493996, 589.6721640143035, 1408.5984146794274, 1722.7589088095774]\n```\n\n### Getting Help on an Object\n```bash\n$ emerge help /inventory/widget1\nHelp on InventoryItem in module __main__ object:\n\nclass InventoryItem(emerge.core.objects.EmergeFile)\n |  InventoryItem(id: str, data: str = '', name: str = '', path: str = '/', perms: str = 'rwxrwxrwx', type: str = 'file', unit_price: float = 0.0, quantity_on_hand: int = 0) -> None\n |  \n |  Class for keeping track of an item in inventory.\n |  \n |  Method resolution order:\n |      InventoryItem\n |      emerge.core.objects.EmergeFile\n |      emerge.core.objects.EmergeObject\n |      emerge.data.EmergeData\n |      persistent.Persistent\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  __eq__(self, other)\n |  \n |  __init__(self, id: str, data: str = '', name: str = '', path: str = '/', perms: str = 'rwxrwxrwx', type: str = 'file', unit_price: float = 0.0, quantity_on_hand: int = 0) -> None\n:\n```\n\n### Getting Methods of an Object \n```bash\n$ emerge methods /inventory/widget7\nrun ()\ntotal_cost () -> float\n```\n\n### Showing the Source Code of an Object\n```bash\n$ emerge code /inventory/widget1\n@dataclass\nclass InventoryItem(EmergeFile):\n    \"\"\"Class for keeping track of an item in inventory.\"\"\"\n\n    unit_price: float = 0.0\n    quantity_on_hand: int = 0\n\n    def run(self):\n        return \"total cost:{}\".format(self.total_cost())\n\n    def total_cost(self) -> float:\n        import logging\n\n        logging.debug(\"InventoryItem: total_cost executing\")\n        return self.unit_price * self.quantity_on_hand\n\n    def __str__(self):\n        import json\n\n        return json.dumps(\n            {\n                \"name\": self.name,\n                \"path\": self.path,\n                \"id\": self.id,\n                \"unit_price\": self.unit_price,\n                \"quantity_on_hand\": self.quantity_on_hand,\n                \"perms\": self.perms,\n                \"type\": self.type,\n                \"data\": self.data,\n            }\n        )\n\n\n```\n### Getting Objects\n`emerge` is a distributed and federated namespace platform serving python objects like a filesystem.\nWhen requesting an object by path, you can connect to any node in the filesystem to make this request.\nIf that node does not host the object, it will consult the broker which will have a reference to where the file path is being held and retrieve it from that node.\n\nIn the example output below, let's assume we have stored the object `/inventory/widget1` on the broker node.\nThe node at `localhost:5559` does not have knowledge of that object.\n\nWhen we attempt to ask `localhost:5559` for `/inventory/widget` it first checks its own registry for that path, if it doesn't have it, it passes the request to the broker and you get the expected result.\n\nThe second call `emerge cat /inventory/widget1` defaults to requesting the object from the broker.\n\n```bash\n$ emerge -h localhost:5559 cat /inventory/widget1\n{\"data\": \"A widget1 data\", \"date\": \"Jan 15 2023 03:00:31\", \"id\": \"widget1\", \"name\": \"widget1\", \"node\": \"\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 10, \"totalcost\": 30.0, \"type\": \"file\", \"unit_price\": 3.0, \"uuid\": \"af9720c3-01f8-43bd-b0a4-6988b0061997\"}\n$ emerge cat /inventory/widget1\n{\"data\": \"A widget1 data\", \"date\": \"Jan 15 2023 03:00:31\", \"id\": \"widget1\", \"name\": \"widget1\", \"node\": \"\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 10, \"totalcost\": 30.0, \"type\": \"file\", \"unit_price\": 3.0, \"uuid\": \"af9720c3-01f8-43bd-b0a4-6988b0061997\"}\n\n\n```\n\n### Querying the Filesystem\n\n\n#### Query With a Lambda\n`emerge` doesn't have a DSL query language, it uses `plain-old-python`! This removes a lot of layers, mappings, serializers and other complexities used between traditional SQL databases, ORMs, objects etc.\nSimpler is better!\n```python\nfrom emerge.core.client import Client\n\nclient = Client(\"0.0.0.0\", \"5558\")\n\nresults = client.search(lambda o: hasattr(o, 'unit_price') and o.unit_price < 3.5)\nprint(results)\n```\n```bash\n['{\"data\": \"A widget1 data\", \"id\": \"widget1\", \"name\": \"widget1\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 10, \"totalcost\": 0.0, \"type\": \"file\", \"unit_price\": 3.0, \"uuid\": \"c959c600-9404-4d94-b8d4-135b8e631da1\"}', \n'{\"data\": \"A widget1 data\", \"id\": \"widget1\", \"name\": \"widget1\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 10, \"totalcost\": 0.0, \"type\": \"file\", \"unit_price\": 3.0, \"uuid\": \"ec7a3450-c02e-4405-a522-55f56c48106f\"}', \n'{\"data\": \"A widget2 data\", \"id\": \"widget2\", \"name\": \"widget2\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 11, \"totalcost\": 0.0, \"type\": \"file\", \"unit_price\": 3.4092252235237934, \"uuid\": \"86b6802a-5fad-4305-95ec-ae56c7e1d1ee\"}', \n'{\"data\": \"A widget3 data\", \"id\": \"widget3\", \"name\": \"widget3\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 26, \"totalcost\": 0.0, \"type\": \"file\", \"unit_price\": 3.2701771680050653, \"uuid\": \"157676d2-80fc-4737-a895-a3ed69809fa6\"}', \n'{\"data\": \"A widget1 data\", \"id\": \"widget1\", \"name\": \"widget1\", \"path\": \"/inventory\", \"perms\": \"rwxrwxrwx\", \"quantity_on_hand\": 10, \"totalcost\": 0.0, \"type\": \"file\", \"unit_price\": 3.0, \"uuid\": \"57c2dc38-beef-461e-b77b-a736656a2a61\"}']\n\n```\n#### Using a QueryObject\n\nGiven the following object with a defined `query` method, using the `query` command will invoke the query method passing in a reference to the filesystem for the method to query.\n\n```python\n@dataclass\nclass QueryFile(EmergeFile):\n    import persistent.list\n\n    results = persistent.list.PersistentList()\n\n    def query(self, fs):\n        \"\"\"This only runs on the server and receives the filesystem object to traverse\"\"\"\n\n        self.results = []\n        for obj in fs.dir(\"/inventory\"):\n            if obj.unit_price < 15:\n                self.results.append(obj)\n\n        return [str(result) for result in self.results]\n```\nInvoke the query object\n```bash\n$ emerge query /queries/query1\n[{\"name\": \"widget1\", \"path\": \"/inventory\", \"id\": \"widget1\", \"unit_price\": 3.0, \"quantity_on_hand\": 10, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget1 data\"}, {\"name\": \"widget2\", \"path\": \"/inventory\", \"id\": \"widget2\", \"unit_price\": 14.470011665792036, \"quantity_on_hand\": 30, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget2 data\"}, {\"name\": \"widget3\", \"path\": \"/inventory\", \"id\": \"widget3\", \"unit_price\": 10.57263472290883, \"quantity_on_hand\": 13, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget3 data\"}, {\"name\": \"widget1\", \"path\": \"/inventory\", \"id\": \"widget1\", \"unit_price\": 3.0, \"quantity_on_hand\": 10, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget1 data\"}, {\"name\": \"widget2\", \"path\": \"/inventory\", \"id\": \"widget2\", \"unit_price\": 14.470011665792036, \"quantity_on_hand\": 30, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget2 data\"}, {\"name\": \"widget3\", \"path\": \"/inventory\", \"id\": \"widget3\", \"unit_price\": 10.57263472290883, \"quantity_on_hand\": 13, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget3 data\"}, {\"name\": \"widget1\", \"path\": \"/inventory\", \"id\": \"widget1\", \"unit_price\": 3.0, \"quantity_on_hand\": 10, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget1 data\"}, {\"name\": \"widget2\", \"path\": \"/inventory\", \"id\": \"widget2\", \"unit_price\": 14.470011665792036, \"quantity_on_hand\": 30, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget2 data\"}, {\"name\": \"widget3\", \"path\": \"/inventory\", \"id\": \"widget3\", \"unit_price\": 10.57263472290883, \"quantity_on_hand\": 13, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget3 data\"}, {\"name\": \"widget1\", \"path\": \"/inventory\", \"id\": \"widget1\", \"unit_price\": 3.0, \"quantity_on_hand\": 10, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget1 data\"}, {\"name\": \"widget2\", \"path\": \"/inventory\", \"id\": \"widget2\", \"unit_price\": 14.470011665792036, \"quantity_on_hand\": 30, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget2 data\"}, {\"name\": \"widget3\", \"path\": \"/inventory\", \"id\": \"widget3\", \"unit_price\": 10.57263472290883, \"quantity_on_hand\": 13, \"perms\": \"rwxrwxrwx\", \"type\": \"file\", \"data\": \"A widget3 data\"}]\n```\n\n#### Retrieving Stored Results Later\n\nThe query class may retain the results as in the example above. This way, another client can simply request the currently stored results without re-executing the query\n\n```python\nfrom emerge.core.client import Client\n\nclient = Client(\"0.0.0.0\", \"5558\")\n\n# Just retrieve the stored query object\nquery = client.getobject(\"/queries/query1\", False)\n\n# And access its data like a regular python object\nfor result in query.results:\n    print(round(result.total_cost(), 1))\n```\nOutput\n```python\n30.0\n434.1\n137.4\n30.0\n434.1\n137.4\n30.0\n434.1\n137.4\n30.0\n434.1\n137.4\n```\n### Using Object Proxies\nEmerge can proxy an object you created on-the-fly and stored in the filesystem so you can invoke methods on it directly, rather than using the `client` object to execute methods.\n```python\nfrom emerge.core.client import Client\n\nclient = Client(\"0.0.0.0\", \"5558\")\n\nwidget1 = client.proxy(\"/inventory/widget1\")\n# Invoke method on server\nprint(widget1.total_cost())\n\nwidgets = client.list(\"/inventory\")\nprint(widgets)\n\nproxies = [client.proxy(widget) for widget in widgets]\n\n# Executes each method on the server\nprint([proxy.total_cost() for proxy in proxies])\n\nquery = client.proxy(\"/queries/query1\")\n\n# Access member as if local. results is lazy loaded from the server\nfor result in query.results:\n    print(result)\n    print(round(result.total_cost(), 1))\n```\n\n### GraphQL queries\n`emerge` will automatically create the required GraphQL schemas and resolvers for your objects!\n\nGiven the following class you create an object and insert into the filesystem.\n```python\nfrom dataclasses import dataclass\n\nfrom emerge.core.client import Client\nfrom emerge.core.objects import EmergeFile\n\n\n@dataclass\nclass InventoryItem(EmergeFile):\n    \"\"\"Class for keeping track of an item in inventory.\"\"\"\n\n    unit_price: float = 0.0\n    quantity_on_hand: int = 0\n    totalcost: float = 0\n    foo: str = \"FOO\"\n\n    def run(self):\n        return \"total cost:{}\".format(self.total_cost())\n\n    def total_cost(self) -> float:\n        import logging\n\n        logging.debug(\"InventoryItem: total_cost executing\")\n        self.totalcost = self.unit_price * self.quantity_on_hand\n        return self.totalcost\n\n\nclient = Client(\"0.0.0.0\", \"5558\")\n\nitem = InventoryItem(\n    id=\"widget1\",\n    name=\"widget1\",\n    path=\"/inventory\",\n    unit_price=3.0,\n    quantity_on_hand=10,\n    data=\"A widget{} data\".format(1),\n)\nclient.store(item)\n```\nOnce `emerge` as received and stored your custom object/class it will generate the GraphQL artifacts needed to query it.\nInternally, `emerge` creates and maintains optimize indicies over your custom object fields dynamically, making it super-fast to execute queries in memory.\nThen issue a GraphQL query to find it\n```bash\n\n$ cat query1.json \nquery {\n  InventoryItem(name: \"widget1\") {\n    name\n    id\n    path\n  }\n}\n$ emerge graphql \"$(cat query1.json)\"\n{'InventoryItem': {'name': 'widget1', 'id': 'widget1', 'path': '/inventory'}}\n$ cat query3.json \nquery {\n  InventoryItemList {\n    name\n    id\n    path\n    uuid\n    totalcost\n  }\n}\n$ emerge graphql \"$(cat query3.json)\"\n{'InventoryItemList': [{'name': 'widget8', 'id': 'widget8', 'path': '/inventory', 'uuid': '3fd460a1-07a7-4a3a-8804-87ef0c4cee4f', 'totalcost': 0.0}, \n{'name': 'widget3', 'id': 'widget3', 'path': '/inventory', 'uuid': '4d7d8d2d-2811-4444-a098-ac1c652073f7', 'totalcost': 0.0}, \n{'name': 'widget9', 'id': 'widget9', 'path': '/inventory', 'uuid': '8b8c4a11-1e01-4a9f-9070-9ea31e18240d', 'totalcost': 0.0}, \n{'name': 'widget4', 'id': 'widget4', 'path': '/inventory', 'uuid': '8ba02fc6-5d59-4b03-ae2a-2f4807acb879', 'totalcost': 0.0}, \n{'name': 'query1', 'id': 'query1', 'path': '/queries', 'uuid': 'b2e188fe-e693-4338-a619-71e8d9fa6690', 'totalcost': None}, \n{'name': 'widget1', 'id': 'widget1', 'path': '/inventory', 'uuid': 'c959c600-9404-4d94-b8d4-135b8e631da1', 'totalcost': 0.0}, \n{'name': 'query1', 'id': 'query1', 'path': '/queries', 'uuid': 'd7ab0d1f-7bf7-4962-9d34-d92bb3ff7069', 'totalcost': None}\n\n```\n\n## Running a Node\n\n```bash\n$ emerge --debug node start\n2022-08-31 10:48:34,261 : root DEBUG : Debug ON\n2022-08-31 10:48:34,322 : root INFO : Starting NodeServer on port: 5558\n2022-08-31 10:48:34,322 : root DEBUG : [NodeServer] Setup...\n2022-08-31 10:48:34,322 : root DEBUG : [NodeServer] start...\n2022-08-31 10:48:34,323 : root DEBUG : Subscribed to NODE on tcp://0.0.0.0:5557\n2022-08-31 10:48:34,323 : root DEBUG : get_messages\n2022-08-31 10:48:34,323 : root DEBUG : Waiting on message\n2022-08-31 10:48:34,324 : root INFO : Z0DBFileSystem setup\n2022-08-31 10:48:34,324 : ZODB.BaseStorage DEBUG : create storage emerge.fs\n2022-08-31 10:48:34,324 : txn.139737146840640 DEBUG : new transaction\n2022-08-31 10:48:34,324 : txn.139737146840640 DEBUG : commit\n2022-08-31 10:48:34,325 : root INFO : Z0DBFileSystem start\n2022-08-31 10:48:34,325 : zerorpc.events DEBUG : bound to tcp://0.0.0.0:5558 (status=<SocketContext(bind='tcp://0.0.0.0:5558')>)\n\n```\n\n### Using Docker Compose\n`emerge` comes with a docker compose file to run a broker node and a secondary node.\n```bash\n$ make up\n$ make down\n$ make clean\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/radiantone/emerge",
    "keywords": "cli,tools,utility",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "emergefs",
    "package_url": "https://pypi.org/project/emergefs/",
    "platform": null,
    "project_url": "https://pypi.org/project/emergefs/",
    "project_urls": {
      "Homepage": "https://github.com/radiantone/emerge"
    },
    "release_url": "https://pypi.org/project/emergefs/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8.*",
    "summary": "Emerge Computational Filesystem.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17363813,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b23453f21e4a13c5626cb69d7bfb41481422f7d8d437c67f614b958487fbe60",
          "md5": "4ac63f1c3c81b6538cbd059cdcaf9597",
          "sha256": "9a3fdfd63bf579eed859532c9645ce143035f9da8f86223ef1df7ab5a3bfce45"
        },
        "downloads": -1,
        "filename": "emergefs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ac63f1c3c81b6538cbd059cdcaf9597",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 28694,
        "upload_time": "2023-03-15T17:51:28",
        "upload_time_iso_8601": "2023-03-15T17:51:28.150728Z",
        "url": "https://files.pythonhosted.org/packages/5b/23/453f21e4a13c5626cb69d7bfb41481422f7d8d437c67f614b958487fbe60/emergefs-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05d602130937deafafacf05f63fa3693b86da21f58b7aa5a94f4c2ed617f5ba6",
          "md5": "f49f915643b92d975e69ee64be9b83c2",
          "sha256": "c63a54aebb4108ab9acf0418c4325b0c0dda5f13f222a7d3e712086e6f6384bb"
        },
        "downloads": -1,
        "filename": "emergefs-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f49f915643b92d975e69ee64be9b83c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 29210,
        "upload_time": "2023-03-17T16:53:37",
        "upload_time_iso_8601": "2023-03-17T16:53:37.330000Z",
        "url": "https://files.pythonhosted.org/packages/05/d6/02130937deafafacf05f63fa3693b86da21f58b7aa5a94f4c2ed617f5ba6/emergefs-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bbf005b492e14bd449ebf2f4a3ffbe396d91a70393623b95a8e155deeb5ad92",
          "md5": "9bdabee1d7bc9f1d66eca8110bd244a6",
          "sha256": "abf3e9af574e3db4b7b65d13ccdd0203974930c830232838bcd1d779862639a4"
        },
        "downloads": -1,
        "filename": "emergefs-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9bdabee1d7bc9f1d66eca8110bd244a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 29378,
        "upload_time": "2023-03-20T13:30:22",
        "upload_time_iso_8601": "2023-03-20T13:30:22.840557Z",
        "url": "https://files.pythonhosted.org/packages/5b/bf/005b492e14bd449ebf2f4a3ffbe396d91a70393623b95a8e155deeb5ad92/emergefs-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bbf005b492e14bd449ebf2f4a3ffbe396d91a70393623b95a8e155deeb5ad92",
        "md5": "9bdabee1d7bc9f1d66eca8110bd244a6",
        "sha256": "abf3e9af574e3db4b7b65d13ccdd0203974930c830232838bcd1d779862639a4"
      },
      "downloads": -1,
      "filename": "emergefs-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9bdabee1d7bc9f1d66eca8110bd244a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.*",
      "size": 29378,
      "upload_time": "2023-03-20T13:30:22",
      "upload_time_iso_8601": "2023-03-20T13:30:22.840557Z",
      "url": "https://files.pythonhosted.org/packages/5b/bf/005b492e14bd449ebf2f4a3ffbe396d91a70393623b95a8e155deeb5ad92/emergefs-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}