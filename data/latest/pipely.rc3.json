{
  "info": {
    "author": "5x12, sergbakh, notrurs, benoitconnan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "The light pipeline library `pipely` can execute any class or any sequence of classes in any order. Install with:\n```bash\npip install pipely\n```\n\n# 1. Quick Start\n\nTo build a pipeline with executable classes, create a config `.yaml` file in the following format:\n\n```text\nsteps:\n    [step_name_1]:\n        exec: [relative path to a file]:[class to execute]\n    [step_name_2]:\n        exec: [relative path to a file]:[class to execute]\n    [step_name_3]:\n        exec: [relative path to a file]:[class to execute]\n        depends_on:\n        - [step_name_1]\n        - [step_name_2]\n```\n\n> - `[steps]` names should be unique;\n> - `depends_on` defines order and enables pipely to detect independent steps and execute them in parallel;\n> - the executable classes should have a ``__call__`` method (see example below);\n\n\n\nThen trigger the pipeline in cli:\n\n```bash\npython -m pipely from-pipeline <file.yaml> [dict.json]\n```\n\n> - `<file.yaml>` (required) is the path to a yaml config file (any format): `../../file.yaml`, or `path/to/file.yaml`, or `file.yaml`.\n> - `[dict.json]` (optional argument) is the path to a shared dictionary `json` file if value exchange between classes is needed (more in Section 1.2.)\n\n\n<!-- > - it's possible to add an argument to ``__call__``, which is used by pipely to share a dictionary between classes, thus permitting simple value transmission from class to class (see example below); -->\n\n## 1.1. Example\n\nLet's create a [test.yaml](example/test.yaml) config file:\n\n```text\nsteps:\n    a1_print:\n        exec: src/file1.py:firstA\n    a2_print:\n        exec: src/file1.py:secondA\n    final_print:\n        exec: src/file2.py:printDone\n        depends_on:\n        - a1_print\n        - a2_print\n```\n`depends_on` parameter sets the following order for pipely:\n\n1. firstly execute `a1_print` and `a2_print` in parallel\n2. and then execute `final_print`\n\nLet's look at executable classes. To use pipely, the executable classes should have a `__call__` method, as shown below (check [example/src/](example/src)):\n\n```python\n#example/src/file1.py\n\nclass firstA:\n    def run(self):\n        a = 32\n        print(a)\n\n    def __call__(self): #call method\n        self.run()\n\nclass secondA:\n    def run(self):\n        a = 12\n        print(a)\n\n    def __call__(self): #call method\n        self.run()\n```\n```python\n#example/src/file2.py\n\nclass printDone:\n    def run(self):\n        print(\"Done.\")\n\n    def __call__(self): #call method\n        self.run()\n```\n\nTo start pipely, type in cli:\n```bash\npython -m pipely from-pipeline test.yaml\n```\n\n\n## 1.2. Example w/ a shared dictionary\n\nLet's create a [`testContext.yaml`](example/testContext.yaml) config file:\n\n```text\nsteps:\n    a_first:\n        exec: src/file1_shared.py:firstA\n    a_second:\n        exec: src/file1_shared.py:secondA\n    a_sum:\n        exec: src/file2_shared.py:aSum\n        depends_on:\n        - a_first\n        - a_second\n    a_sum_print:\n        exec: src/file3_shared.py:aSumPrint\n        depends_on:\n        - a_sum\n```\n`depends_on` parameter sets the following order for pipely:\n\n1. executes `a_first` and `a_second` in parallel\n2. then executes `a_sum`, which sums up both a's in the previous steps\n3. finally executes `a_sum_print`, which prints the final result previously calculated in `a_sum`\n\nLet's look at executale classes to understand how values are transferred between them (check [example/src](/example/src) folder):\n\n```python\n#example/src/file1_shared.py\n\nclass firstA:\n    def run(self):\n        a = 32\n        self.result = a\n\n    def __call__(self, context): #include context\n        self.run()\n        context[\"a1\"] = self.result #to save into shared dictionary\n\nclass secondA:\n    def run(self):\n        a = 12\n        self.result = a\n\n    def __call__(self, context): #include context\n        self.run()\n        context[\"a2\"] = self.result #to save into shared dictionary\n```\nNow we can use previously saved values `a1` and `a2` in another class, as shown below: \n\n```python\n#example/src/file2_shared.py\n\nclass aSum:\n    def run(self, context): #include context\n        a1 = context[\"a1\"] #to extract from shared dictionary\n        a2 = context[\"a2\"] #to extract from shared dictionary\n        self.result = a1 + a2\n\n    def __call__(self, context): #include context\n        self.run(context) #to run the function\n        context[\"aSum\"] = self.result #and save into shared dictionary\n```\n\nThen trigger the pipeline in cli with an optional second argument `--context-path`, which the path to a shared dictionary [example_context.json](example/example_context.json):\n\n```bash\npython -m pipely from-pipeline testContext.yaml --context-path example_context.json\n```\n\n# 2. Imperative way\nPipely can also trigger a specific class from a specific .py file.\n\n```bash\npython -m pipely from-class <path/to/file.py>:<TestClass>\n```\n\nBelow is an example of a command that triggers a `printDone` class from [src/file4.py](example/src/file4.py) file.\n\n```bash\npython3 -m pipely from-class src/file4.py:printDone\n```\n\nIf your class needs to operate on a shared dictionary, the command `from-class` could use an optional second argument `--context-path`. This argument awaits a path to a json representing the shared dictionary.\n\n```bash\npython -m pipely from-class src/file4.py:printShared --context-path example_context.json\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/5x12/pipely/archive/{version}.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5x12/pipely",
    "keywords": "PIPELY,PIPELINE,PIPE",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipely",
    "package_url": "https://pypi.org/project/pipely/",
    "platform": null,
    "project_url": "https://pypi.org/project/pipely/",
    "project_urls": {
      "Download": "https://github.com/5x12/pipely/archive/{version}.tar.gz",
      "Homepage": "https://github.com/5x12/pipely"
    },
    "release_url": "https://pypi.org/project/pipely/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Light pipeline framework.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13302803,
  "releases": {
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a47ab04591907a69305c3eaa6395ef2f4c36c877482fec3f156a5c429151948",
          "md5": "3b748ab2484040f64a6b0829dcc35c60",
          "sha256": "1f26171469520c42ba14a71592823c36277d76298e6f46fa94fce45dd175781a"
        },
        "downloads": -1,
        "filename": "pipely-0.2.5-py3.8.egg",
        "has_sig": false,
        "md5_digest": "3b748ab2484040f64a6b0829dcc35c60",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.8",
        "size": 19029,
        "upload_time": "2022-01-14T15:52:42",
        "upload_time_iso_8601": "2022-01-14T15:52:42.489030Z",
        "url": "https://files.pythonhosted.org/packages/2a/47/ab04591907a69305c3eaa6395ef2f4c36c877482fec3f156a5c429151948/pipely-0.2.5-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9903092ae6160a0a7dc273609a92c79e1fbe7f71b2a4c092787ce4c26386f385",
          "md5": "4672b6169395689fd9826328acc448ce",
          "sha256": "1c9ef49df2b7012b2b3da4b8a50777cdadc7490a40ef71d71b72b145a9f9ca11"
        },
        "downloads": -1,
        "filename": "pipely-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4672b6169395689fd9826328acc448ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3144,
        "upload_time": "2022-01-14T15:52:44",
        "upload_time_iso_8601": "2022-01-14T15:52:44.479838Z",
        "url": "https://files.pythonhosted.org/packages/99/03/092ae6160a0a7dc273609a92c79e1fbe7f71b2a4c092787ce4c26386f385/pipely-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eaf25149c4b5a3700302449538b04cba4dcb179a7b7e75755a70ca0de7691b6",
          "md5": "0b98563ea0fa68e3e1bff1636dae0a76",
          "sha256": "645ee872dc00b6540d92070ca41a965c1ecc9c2030740b15b19af90fa1815492"
        },
        "downloads": -1,
        "filename": "pipely-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0b98563ea0fa68e3e1bff1636dae0a76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3148,
        "upload_time": "2022-01-14T16:58:30",
        "upload_time_iso_8601": "2022-01-14T16:58:30.403703Z",
        "url": "https://files.pythonhosted.org/packages/4e/af/25149c4b5a3700302449538b04cba4dcb179a7b7e75755a70ca0de7691b6/pipely-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc69e41ccad02fc62ef544ae7ad7da9935219b4f42d9c5b8a856dc92feab59a0",
          "md5": "3251d487f08bfa915b3681e47beec786",
          "sha256": "5cf5f3ccf5c34aefd4af18b0fd0599e515a8059a9b69f1d8cfe3da46bfe5bd6f"
        },
        "downloads": -1,
        "filename": "pipely-0.3.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "3251d487f08bfa915b3681e47beec786",
        "packagetype": "bdist_egg",
        "python_version": "0.3.0",
        "requires_python": ">=3.8",
        "size": 11597,
        "upload_time": "2022-03-26T15:13:56",
        "upload_time_iso_8601": "2022-03-26T15:13:56.326451Z",
        "url": "https://files.pythonhosted.org/packages/dc/69/e41ccad02fc62ef544ae7ad7da9935219b4f42d9c5b8a856dc92feab59a0/pipely-0.3.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a00ab5110b59055c5e5004f2f1cbfee072adbe132eaf8e306d71c4eee5094b35",
          "md5": "d40d32a8b2855f9b22ca31278fa58649",
          "sha256": "27daa1a2e93e331277093f7604982a1ef70e6ea8adba2afbeb3987306d7a0241"
        },
        "downloads": -1,
        "filename": "pipely-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d40d32a8b2855f9b22ca31278fa58649",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7473,
        "upload_time": "2022-03-26T15:13:58",
        "upload_time_iso_8601": "2022-03-26T15:13:58.019604Z",
        "url": "https://files.pythonhosted.org/packages/a0/0a/b5110b59055c5e5004f2f1cbfee072adbe132eaf8e306d71c4eee5094b35/pipely-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc69e41ccad02fc62ef544ae7ad7da9935219b4f42d9c5b8a856dc92feab59a0",
        "md5": "3251d487f08bfa915b3681e47beec786",
        "sha256": "5cf5f3ccf5c34aefd4af18b0fd0599e515a8059a9b69f1d8cfe3da46bfe5bd6f"
      },
      "downloads": -1,
      "filename": "pipely-0.3.0-py3.9.egg",
      "has_sig": false,
      "md5_digest": "3251d487f08bfa915b3681e47beec786",
      "packagetype": "bdist_egg",
      "python_version": "0.3.0",
      "requires_python": ">=3.8",
      "size": 11597,
      "upload_time": "2022-03-26T15:13:56",
      "upload_time_iso_8601": "2022-03-26T15:13:56.326451Z",
      "url": "https://files.pythonhosted.org/packages/dc/69/e41ccad02fc62ef544ae7ad7da9935219b4f42d9c5b8a856dc92feab59a0/pipely-0.3.0-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a00ab5110b59055c5e5004f2f1cbfee072adbe132eaf8e306d71c4eee5094b35",
        "md5": "d40d32a8b2855f9b22ca31278fa58649",
        "sha256": "27daa1a2e93e331277093f7604982a1ef70e6ea8adba2afbeb3987306d7a0241"
      },
      "downloads": -1,
      "filename": "pipely-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d40d32a8b2855f9b22ca31278fa58649",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7473,
      "upload_time": "2022-03-26T15:13:58",
      "upload_time_iso_8601": "2022-03-26T15:13:58.019604Z",
      "url": "https://files.pythonhosted.org/packages/a0/0a/b5110b59055c5e5004f2f1cbfee072adbe132eaf8e306d71c4eee5094b35/pipely-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}