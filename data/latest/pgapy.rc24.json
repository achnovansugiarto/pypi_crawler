{
  "info": {
    "author": "Ralf Schlatterbeck",
    "author_email": "rsc@runtux.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Topic :: Education",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "PGAPy: Python Wrapper for PGAPack Parallel Genetic Algorithm Library\n====================================================================\n\n.. |--| unicode:: U+2013   .. en dash\n.. |epsilon| unicode:: U+03B5 .. epsilon\n\n:Author: Ralf Schlatterbeck <rsc@runtux.com>\n\nNews\n----\n\nNews 12-2022: Add regression test and update to new upstream with\nseveral bug-fixes. Includes also some bug fixes in wrapper.\n\nNews 10-2022: Add user defined datatypes. Example in ``examples/gp`` use\nuser defined data types to implement genetic programming (we represent\nexpressions by a tree data structure). This uses the new serialization\nAPI in pgapack to transfer a Python pickle representation to peer MPI\nprocesses. Also incorporate the latest changes in pgapack which\noptimizes duplicate checking. This is of interest for large population\nsizes in the genetic programming examples. Note that the\n``gene_difference`` method has been renamed to ``gene_distance``.\n\nNews 08-2022: Epsilon-constrained optimization and a crossover variant\nthat preserves permutations (so with integer genes the gene can represent\na permutation).\n\nNews 03-2022: Attempt to make this installable on Windows. This involves\nsome workaround in the code because the visual compiler does not support\ncertain C99 constructs.\n\nNews 01-2022: This version wraps multiple evaluation with NSGA-III (note\nthe additional 'I').\n\nNews 12-2021: This version wraps multiple evaluation values from your\nobjective function: Now you can return more than one value to either use\nit for constraints (that must be fulfilled before the objective is\noptimized) or for multi-objective optimization with the Nondominated\nSorting Genetic Algorithm V.2 (NSGA-II). You can combine both,\nmulti-objective optimization and constraints.\n\nNews: This version wraps the Differential Evolution method (that's quite\nan old method but is newly implemented in pgapack).\n\nIntroduction\n------------\n\nPGAPy is a wrapper for PGAPack, the parallel genetic algorithm library\n(see `PGAPack Readme`_), a powerfull genetic algorithm library by\nD. Levine, Mathematics and Computer Science Division Argonne National\nLaboratory. The library is written in C. PGAPy wraps this library for\nuse with Python. The original PGAPack library is already quite old but\nis one of the most complete and accurate (and fast, although this is not\nmy major concern when wrapping it to python) genetic algorithm\nimplementations out there with a lot of bells and whistles for\nexperimentation. It also has shown a remarkably small number of bugs\nover the years. It supports parallel execution via the message\npassing interface MPI_ in addition to a normal \"serial\" version. That's\nwhy I wanted to use it in Python, too.\n\nTo get started you need the PGAPack library, although\nit now comes bundled with PGApy, to install a *parallel* version you\ncurrently need a pre-installed PGApack compiled for the MPI library of\nchoice. See `Installation`_ section for details.\n\nThere currently is not much documentation for PGAPy.\nYou really, absolutely need to read the documentation that comes\nwith PGAPack.\nThe PGAPack user guide is now shipped together with PGAPy. It is\ninstalled together with some examples in share/pgapy, wherever the\nPython installer decides to place this in the final installation\n(usually ``/usr/local/share`` on Linux).\n\nThe original PGAPack library can still be downloaded from the PGAPack_\nftp site, it is written in ANSI C but will probably not compile against\na recent version of MPI_. It will also not work with recent versions of\nPGAPy. Note that this version is not actively maintained. I've started a\n`PGAPack fork on github`_ where I've ported the library to the latest\nversion of the MPI_ standard and have fixed some minor inconsistencies\nin the documentation. I've also implemented some new features, notably\nenhancements in selection schemes, a new replacement strategy called\n*restricted tournament replacement* [1]_, [2]_, [4]_ and, more recently,\nthe differential evolution strategy [5]_, [6]_. In addition this version\nnow supports multi objective optimization with NSGA-II [7]_ and\nmany-objective optimization with NSGA-III [8]_, [9]_. It also supports\nthe Epsilon Constraint method [10]_.\n\nNote: When using NSGA_III replacement for multi (or many-) objective\noptimization you need to either\n\n- set reference points on the hyperplane intersecting all axes at\n  offset 1. These reference points can be obtained with the convenience\n  function ``pga.das_dennis``, it creates a regular set of reference points\n  using an algorithm originally publised by I. Das and J. E. Dennis [12]_.\n  These points are then passed as the parameter ``reference_points`` to\n  the ``PGA`` constructor.\n\n  See ``examples/dtlz2.py`` for a usage example and the user guide for\n  the bibliographic reference. The function gets the dimensionality of\n  the objective space (``num_eval`` minus ``num_constraint``) and the\n  number of partition to use.\n- Or set reference directions (in the objective space) with the\n  ``reference_directions`` parameter, number of partitions for these\n  directions with the ``refdir_partitions`` parameter (see\n  ``das_dennis`` above, this uses Das/Dennis points internally), and a\n  scale factor with the parameter ``refdir_scale``.\n\nYou can set both, these parameters are not mutually exclusive.\n\nI'm mainly testing pgapy on Linux. But I've recently made it run on\nWindows, too but I'm not very actively testing on Windows. Let me know\nif you run it on Windows, sucessfully or not sucessfully.\n\nAs mentioned above, you can find my `PGAPack fork on github`_, this\nrepository has the three upstream releases as versions in git and\ncontains some updates concerning support of newer MPI_ versions and\ndocumentation updates.  I've also included patches in the git repository\nof the Debian maintainer of the package, Dirk Eddelbuettel.\nI'm actively maintaining that branch, adding new features and bug-fixes.\n\n.. _`PGAPack Readme`:\n   https://github.com/schlatterbeck/pgapack/blob/master/README.rst\n.. _PGAPack:          http://ftp.mcs.anl.gov/pub/pgapack/\n.. _`PGAPack fork on github`: https://github.com/schlatterbeck/pgapack\n.. _MPI: http://mpi-forum.org/\n.. _`my pgapack debian package builder`:\n    https://github.com/schlatterbeck/debian-pgapack\n\nTo get you started, I've included some very simple examples in\n``examples``, e.g., ``one-max.py`` implements the \"Maxbit\" example\nsimilar to one in the PGAPack documentation. The examples were inspired\nby the book \"Genetic Algorithms in Python\" but are written from scratch\nand don't include any code from the book. The examples illustrates\nseveral points:\n\n- Your class implementing the genetic algorithm needs to inherit from\n  pga.PGA (pga is the PGAPy wrapper module).\n- You need to define an evaluation function called ``evaluate`` that\n  returns a sequence of numbers indicating the fitness of the gene given.\n  It gets the parameters ``p`` and ``pop`` that can be used to fetch allele\n  values from the gene using the ``get_allele`` method, for more details\n  refer to the PGAPack documentation. The number of evaluations returned\n  by your function is defined with the constructor parameter\n  ``num_eval``, the default for this parameter is 1. If your evaluation\n  function does not return multiple evaluations (with the default\n  setting of ``num_eval``) you can either return a one-element sequence\n  or a single return value.\n- When using multiple evaluations, these can either be used for\n  constraints (the default) or for multi-objective optimization. In the\n  latter case, the number of constraints (which by default is one less\n  than the number of evaluations set with the parameter ``num_eval``)\n  must be set to a number that leaves at least two evaluations for\n  objectives. The number of constraints can be set with the parameter\n  ``num_constraint``. When using multi-objective optimization, you need\n  one of the two replacement-types ``PGA_POPREPL_NSGA_II`` or\n  ``PGA_POPREPL_NSGA_III``, set this with the ``pop_replace_type`` parameter.\n- You *can* define additional functions overriding built-in functions\n  of the PGAPack library, illustrated by the example of\n  ``print_string``.  Note that we could call the original print_string\n  method of our PGA superclass.  In the same way you can implement,\n  e.g., your own crossover method.\n- The constructor of the class needs to define the Gene type, in the\n  examples we use int and bool built-in datatypes.\n- The length of the gene needs to be given in the constructor.\n- We often want to maximize the numbers returned by our evaluation\n  function, set the parameter ``maximize`` to False if you want to\n  minimize.\n- For non-binary genes we can define an array of init values, each entry\n  containing a sequence with lower and upper bound. The array has to\n  have the length of the gene. Note that the upper bound is *included*\n  in the range of possible values (unlike the python range operator but\n  compatible with the PGAPack definition).\n- In the constructor of the class we can add parameters of the genetic\n  algorithm. Not all parameters of PGAPack are wrapped yet, currently\n  you would need to consult the sourcecode of PGAPy to find out which\n  parameters are wrapped. In the example we define several print\n  options.\n- Finally the genetic algorithm is started with the ``run`` method.\n\nNaming conventions in PGAPy\n---------------------------\n\nWhen you extend PGAPy |--| remember not all functions of PGAPack are\nwrapped yet and you may need additional functions |--| you should stick to\nmy naming conventions when making changes.\nThe following naming conventions were used for the wrapper:\n\n- Constants of PGAPack like ``PGA_REPORT_STRING`` are used as-is in\n  uppercase. These constants can be directly imported from the wrapper\n  module. Not all constants are wrapped so far, if you need more, add\n  them to the constdef array in pgamodule.c and send_ me a patch.\n- For methods of the pga.PGA class I've removed the ``PGA`` prefix used\n  throughout PGAPack and converted the method to lowercase with\n  underscores between uppercase words in the original function name, so\n  ``PGARun`` becomes ``run``, ``PGACheckStoppingConditions`` becomes\n  ``check_stopping_conditions``. An exception of the lowercase-rule is\n  whenever a name contains \"GA\" (for \"genetic algorithm\"), So\n  ``PGASetMaxGAIterValue`` becomes ``max_GA_iter``.\n- Where possible I've made a single class method where PGAPack needs a\n  separate function for each datatype, so ``PGAGetBinaryAllele``,\n  ``PGAGetCharacterAllele``, ``PGAGetIntegerAllele``, ``PGAGetRealAllele`` all\n  become ``get_allele``. Same holds true for ``set_allele``.\n- Whenever a name in PGApack has a \"Value\" or \"Flag\" suffix, I've left\n  this out, so ``PGAGetFitnessCmaxValue`` becomes ``fitness_cmax``\n  and ``PGAGetMutationAndCrossoverFlag`` becomes\n  ``mutation_and_crossover``, the only exception to this rule is for the\n  two functions ``PGAGetMutationRealValue`` and\n  ``PGAGetMutationIntegerValue`` which become ``mutation_value`` not\n  just ``mutation``.\n- Some fields can take multiple values (they are implemented by ORing\n  integer constants, in python they are specified as a list or tuple of\n  constants). These are converted to plural (if not already plural in\n  PGApack), e.g., ``PGASetStoppingRuleType`` becomes ``stopping_rule_types``.\n- Internal method names in the wrapper program have a leading PGA\\_ |--| so\n  the class method ``set_allele`` is implemented by the C-function\n  ``PGA_set_allele`` in ``pgamodule.c``.\n\nConstructor Parameters\n----------------------\n\nPGApack has a lot of ``PGASet`` and ``PGAGet`` functions for setting\nparameters. These are reflected in constructor parameters on the one hand\nand in (typically read-only, but see below) properties of a ``PGA``\nobject on the other hand. The\nfollowing table gives an overview of all the original PGApack names and\nthe names of the python wrapper. For the PGApack name I've only listed\nthe ``PGASet`` function, in many cases there is a corresponding\n``PGAGet`` function. If a corresponding read-only property exists for a\nconstructor parameter this is indicated in the \"Prop\" column. In some\ncases properties are missing because no corresponding ``PGAGet`` function\nis implemented in PGApack, in other cases returning a numeric value that\nhas a symbolic constant in PGApy doesn't make much sense.\n\nThe properties have the same name as the constructor parameter.\nThere are Properties that don't have a corresponding constructor\nparameter, namely the ``eval_count`` property (returning the count of\nfunction evaluations), the\n``GA_iter`` property that returns the current GA generation, and the\n``mpi_rank`` property that returns the MPI rank of the current process\n(this is sorted under PGAGetRank).\n\nIn the type\ncolumn I'm listing the Python type. If the type is followed by a number,\nmore than one item of that type is specified (a sequence in Python). Some\nentries contain \"sym\", these are integer values with a symbolic constant,\nthe value \"msym\" indicates that several values denoted by a list of\nsymbolic constants can be given. A special case are the\n``PGASetRealInitRange``, ``PGASetRealInitPercent``,\n``PGASetIntegerInitRange`` functions. These take two values for *each\nallele* of the gene. In python this is a sequence of 2-tuples.\nNote that this means that you can have different ranges of allowed values\nfor each allele.\n\nThe ``num_eval`` property is special: Due to limitations of the C\nprogramming language, for multiple evaluations in C the first evaluation\nis returned as the function return-value of the ``evaluate`` function\nand all other parameters are returned in an auxiliary array. PGApack\nspecifies the number of auxiliary evaluations to be returned. In Python\nthe evaluation function can always return a sequence of evaluation\nvalues and the ``num_eval`` is one more than ``PGAGetNumAuxEval`` would\nreturn. The default for ``num_eval`` is 1.\n\nThe first two (mandatory) constructor parameters are the type of the gene\n(this takes a Python type, e.g., ``bool`` for a binary genome or ``int``\nfor an integer genome) and the length. Note that the ``string_length`` is\nimplicitly set with the ``length`` parameter. The ``string_length`` is\nalso available as the length of the ``PGA`` object using the Python\nbuilt-in ``len`` function.\n\nSome properties can now also be set *during* the run of the optimizer.\nThese currently are ``crossover_prob``, ``epsilon_exponent``,\n``multi_obj_precision``, ``p_tournament_prob``, and\n``uniform_crossover_prob``. Just assign to the member variable of\nthe optimizer (child of PGA.pga) object.\n\n==================================== ================================= ====== ====\nPGApack name                         Constructor parameter             Type   Prop\n==================================== ================================= ====== ====\n``PGASetCrossoverBoundedFlag``       ``crossover_bounded``             int    yes\n``PGASetCrossoverBounceBackFlag``    ``crossover_bounce_back``         int    yes\n``PGASetCrossoverSBXEta``            ``crossover_SBX_eta``             float  yes\n``PGASetCrossoverSBXOncePerString``  ``crossover_SBX_once_per_string`` int    yes\n``PGASetCrossoverProb``              ``crossover_prob``                float  yes\n``PGASetCrossoverType``              ``crossover_type``                sym    no\n``PGASetDEAuxFactor``                ``DE_aux_factor``                 double yes\n``PGASetDECrossoverProb``            ``DE_crossover_prob``             double yes\n``PGASetDECrossoverType``            ``DE_crossover_type``             sym    no\n``PGASetDEDither``                   ``DE_dither``                     double yes\n``PGASetDEDitherPerIndividual``      ``DE_dither_per_individual``      bool   yes\n``PGASetDEJitter``                   ``DE_jitter``                     double yes\n``PGASetDENumDiffs``                 ``DE_num_diffs``                  int    yes\n``PGASetDEProbabilityEO``            ``DE_probability_EO``             double yes\n``PGASetDEScaleFactor``              ``DE_scale_factor``               double yes\n``PGASetDEVariant``                  ``DE_variant``                    sym    yes\n``PGASetEpsilonExponent``            ``epsilon_exponent``              float  yes\n``PGASetEpsilonGeneration``          ``epsilon_generation``            int    yes\n``PGASetEpsilonTheta``               ``epsilon_theta``                 int    yes\n``PGAGetEvalCount``                  ``eval_count``                    int    yes\n``PGASetFitnessCmaxValue``           ``fitness_cmax``                  float  yes\n``PGASetFitnessMinType``             ``fitness_min_type``              sym    yes\n``PGASetFitnessType``                ``fitness_type``                  sym    yes\n``PGAIntegerSetFixedEdges``          ``fixed_edges``                          no\n``PGAIntegerSetFixedEdges``          ``fixed_edges_symmetric``         bool   no\n``PGAGetGAIterValue``                ``GA_iter``                       int    yes\n``PGASetIntegerInitPermute``         ``integer_init_permute``          int2   no\n``PGASetIntegerInitRange``           ``init``                                 no\n``PGASetMaxFitnessRank``             ``max_fitness_rank``              float  yes\n``PGASetMaxGAIterValue``             ``max_GA_iter``                   int    yes\n``PGASetMaxNoChangeValue``           ``max_no_change``                 int    no\n``PGASetMaxSimilarityValue``         ``max_similarity``                int    yes\n``PGASetMixingType``                 ``mixing_type``                   sym    no\n``PGASetMultiObjPrecision``          ``multi_obj_precision``           int    yes\n``PGASetMutationAndCrossoverFlag``   ``mutation_and_crossover``        int    yes\n``PGASetMutationBounceBackFlag``     ``mutation_bounce_back``          int    yes\n``PGASetMutationBoundedFlag``        ``mutation_bounded``              int    yes\n``PGASetMutationIntegerValue``       ``mutation_value``                int    yes\n``PGASetMutationOrCrossoverFlag``    ``mutation_or_crossover``         int    yes\n``PGASetMutationPolyEta``            ``mutation_poly_eta``             float  yes\n``PGASetMutationPolyValue``          ``mutation_poly_value``           float  yes\n``PGASetMutationProb``               ``mutation_prob``                 float  yes\n``PGASetMutationRealValue``          ``mutation_value``                float  yes\n``PGASetMutationType``               ``mutation_type``                 sym    no\n``PGASetNoDuplicatesFlag``           ``no_duplicates``                 int    no\n``PGASetNumAuxEval``                 ``num_eval``                      int    yes\n``PGASetNumConstraint``              ``num_constraint``                int    yes\n``PGASetNumReplaceValue``            ``num_replace``                   int    yes\n``PGASetPopSize``                    ``pop_size``                      int    yes\n``PGASetPopReplaceType``             ``pop_replace_type``              sym    no\n``PGASetPrintFrequencyValue``        ``print_frequency``               int    yes\n``PGASetPrintOptions``               ``print_options``                 msym   no\n``PGASetPTournamentProb``            ``p_tournament_prob``             float  yes\n``PGASetRandomizeSelect``            ``randomize_select``              int    yes\n``PGASetRandomSeed``                 ``random_seed``                   int    yes\n``PGAGetRank``                       ``mpi_rank``                      int    yes\n``PGASetRealInitRange``              ``init``                                 no\n``PGASetRealInitPercent``            ``init_percent``                         no\n``PGASetReferenceDirections``        ``refdir_partitions``             int    no\n``PGASetReferenceDirections``        ``refdir_scale``                  double no\n``PGASetReferenceDirections``        ``reference_directions``                 no\n``PGASetReferencePoints``            ``reference_points``                     no\n``PGASetRestartFlag``                ``restart``                       int    yes\n``PGASetRestartFrequencyValue``      ``restart_frequency``             int    yes\n``PGASetRTRWindowSize``              ``rtr_window_size``               int    yes\n``PGASetSelectType``                 ``select_type``                   sym    no\n``PGASetStoppingRuleType``           ``stopping_rule_types``           msym   no\n``PGASetStringLength``               ``string_length``                 int    yes\n``PGASetSumConstraintsFlag``         ``sum_constraints``               int    yes\n``PGASetTournamentSize``             ``tournament_size``               int    yes\n``PGASetTournamentWithReplacement``  ``tournament_with_replacement``   int    yes\n``PGASetTruncationProportion``       ``truncation_proportion``         float  yes\n``PGASetUniformCrossoverProb``       ``uniform_crossover_prob``        float  yes\n==================================== ================================= ====== ====\n\nNote: The mutation_or_crossover and mutation_and_crossover parameters are\ndeprecated, use mixing_type instead!\n\nPGA Object Methods\n------------------\n\nThe following are the methods that can be used during the run of the\ngenetic search. The ``run`` method is used to start the search. This can\nbe used, to, e.g., set an allele during hill-climbing in a custom\n``endofgen`` method. Note that some methods only apply to certain gene\ntypes, e.g. the ``encode_int_`` methods can only be used on binary\nalleles (they encode an integer value as a binary or gray code\nrepresentation into the gene). Other methods take or return different\ntypes depending on the type of gene, e.g. ``get_allele`` or\n``set_allele``, they call different backend functions depending on the\ngene type. With the ``set_random_seed`` method, the random number\ngenerator can be re-seeded. It is usually best to seed the generator\nonce at (before) the beginning by specifying ``random_seed`` in the\nconstructor. For further details consult the user guide.\nThe method ``get_evaluation`` will return a double for a single\nevaluation and a tuple of double for multiple evaluations (when num_eval\nis >1)\n\n============================= ================== ===========================\nMethod                        Parameters         Return\n============================= ================== ===========================\n``check_stopping_conditions``                    True if stop should occur\n``encode_int_as_binary``      *p, pop,*          None\n                              *frm, to, val*\n``encode_int_as_gray_code``   *p, pop,*          None\n                              *frm, to, val*\n``encode_real_as_binary``     *p, pop, frm, to*  None\n                              *l, u, val*\n``encode_real_as_gray_code``  *p, pop, frm, to*  None\n                              *l, u, val*\n``euclidian_distance``        *p1, pop1*         float\n                              *p2, pop2*\n``fitness``                   *pop*              None\n``get_allele``                *p, pop, index*    allele value\n``get_best_index``            *pop*              index of best string\n``get_best_report_index``     *pop, idx*         index of best eval with idx\n``get_evaluation``            *p, pop*           evaluation of *p*\n``get_evaluation_up_to_date`` *p, pop*           True if up-to-date\n``get_fitness``               *p, pop*           fitness of *p* (float)\n``get_gene``                  *p, pop*           get gene (user data types)\n``get_int_from_binary``       *p, pop, frm, to*  int\n``get_int_from_gray_code``    *p, pop, frm, to*  int\n``get_iteration``                                deprecated, use ``GA_iter``\n``get_real_from_binary``      *p, pop,*          float\n                              *frm, to, l, u*\n``get_real_from_gray_code``   *p, pop,*          float\n                              *frm, to, l, u*\n``random01``                                     float between 0 and 1\n``random_flip``               *probability*      0 or 1\n``random_gaussian``           *mean, stddev*     float\n``random_interval``           *l, r*             int between l, r\n``random_uniform``            *l, r*             float between l, r\n``run``                                          None\n``select_next_index``         *pop*              index selected individual\n``set_allele``                *p, pop, i, value* None\n``set_evaluation``            *p, pop, value*    None\n``set_evaluation_up_to_date`` *p, pop, status*   None\n``set_gene``                  *p, pop, gen*      set gene (user data types)\n``set_random_seed``           *seed*             None (use constructor!)\n============================= ================== ===========================\n\nUser-Methods\n------------\n\nPGApack has the concept of user functions. These allow customization of\ndifferent areas of a genetic algorihm. In Python they are implemented as\nmethods that can be changed in a derived class. One of the methods that\n*must* be implemented in a derived class is the ``evaluate`` function\n(although technically it is not a user function in PGApack). It\ninterprets the gene and returns an evaluation value or a sequence of\nevaluation values if you set the ``num_eval`` constructor parameter.\nPGApack computes a fitness from the raw evaluation value. For some\nmethods an up-call into the PGA class is possible, for some methods this\nis not possible (and in most cases not reasonable). Note that for the\n``stop_cond`` method, the standard check for stopping conditions can be\ncalled with::\n\n  self.check_stopping_conditions()\n\nThe following table lists the overridable methods with their parameters\n(for the function signature the first parameter *self* is omitted). Note\nthat in PGApack there are additional user functions that are needed for\nuser-defined data types which are currently not exposed in Python. In the\nfunction signatures *p* denotes the index of the individual and *pop*\ndenotes the population. If more than one individual is specified (e.g.,\nfor crossover) these can be followed by a number. For crossover *c1* and\n*c2* denote the destination individuals (children). The *propability* for\nthe mutation method is a floating-point value between 0 and 1. Remember\nto count the number of mutations that happen, and return that value for\nthe mutation method!\n\n=================== ============================== ================= =======\nMethod              Call Signature                 Return Value      Up-Call\n=================== ============================== ================= =======\n``check_duplicate`` *p1, pop1, p2, pop2*           True if dupe      no\n``stop_cond``                                      True to stop      no\n``crossover``       *p1, p2, p_pop, c1, c2, c_pop* None              no\n``endofgen``                                       None              no\n``evaluate``        *p, pop*                       sequence of float no\n``gene_distance``   *p1, pop1, p2, pop2*           float             no\n``hash``            *p, pop*                       int               no\n``initstring``      *p, pop*                       None              no\n``mutation``        *p, pop, propability*          #mutations        no\n``pre_eval``        *pop*                          None              no\n``print_string``    *file, p, pop*                 None              yes\n=================== ============================== ================= =======\n\nConstants\n---------\n\nThe following PGApack constants are available:\n\n========================== ===========================================\nConstant                   Description\n========================== ===========================================\nPGA_CROSSOVER_EDGE         Edge crossover for permutations\nPGA_CROSSOVER_ONEPT        One-point Crossover\nPGA_CROSSOVER_SBX          Simulated Binary Crossover\nPGA_CROSSOVER_TWOPT        Two-point Crossover\nPGA_CROSSOVER_UNIFORM      Uniform Crossover\nPGA_FITNESSMIN_CMAX        Map fitness by subtracting worst\nPGA_FITNESSMIN_RECIPROCAL  Map fitness via reciprocal\nPGA_FITNESS_NORMAL         Linear normalization of fitness\nPGA_FITNESS_RANKING        Linear fitness ranking\nPGA_FITNESS_RAW            Identity fitness function\nPGA_MUTATION_CONSTANT      Mutation by adding/subtracting constant\nPGA_MUTATION_GAUSSIAN      Mutation by selecting from Gaussian distribution\nPGA_MUTATION_PERMUTE       Mutation swaps two random genes\nPGA_MUTATION_POLY          Polynomial Mutation\nPGA_MUTATION_RANGE         Replace gene with uniform selection from init range\nPGA_MUTATION_UNIFORM       Mutation uniform from interval\nPGA_NEWPOP                 Symbolic constant for new population\nPGA_OLDPOP                 Symbolic constant for old population\nPGA_POPREPL_BEST           Population replacement best strings\nPGA_POPREPL_NSGA_II        Use NSGA-II replacement for multi-objective opt.\nPGA_POPREPL_NSGA_III       Use NSGA-III replacement for multi-objective opt.\nPGA_POPREPL_PAIRWISE_BEST  Compare same index in old and new population\nPGA_POPREPL_RANDOM_NOREP   Population replacement random no replacement\nPGA_POPREPL_RANDOM_REP     Population replacement random with replacement\nPGA_POPREPL_RTR            Restricted Tournament Replacement\nPGA_REPORT_AVERAGE         Report average evaluation\nPGA_REPORT_HAMMING         Report hamming distance\nPGA_REPORT_OFFLINE         Report offline\nPGA_REPORT_ONLINE          Report online\nPGA_REPORT_STRING          Report the string\nPGA_REPORT_WORST           Report the worst evaluation\nPGA_SELECT_LINEAR          Return individuals in population order\nPGA_SELECT_PROPORTIONAL    Fitness-proportional selection\nPGA_SELECT_PTOURNAMENT     Binary probabilistic tournament selection\nPGA_SELECT_SUS             Stochastic universal selection\nPGA_SELECT_TOURNAMENT      Tournament selection\nPGA_SELECT_TRUNCATION      Truncation selection\nPGA_STOP_MAXITER           Stop on max iterations\nPGA_STOP_NOCHANGE          Stop on max number of generations no change\nPGA_STOP_TOOSIMILAR        Stop when individuals too similar\n========================== ===========================================\n\nUser Defined Data Types\n-----------------------\n\nThe latest version of PGAPy features user defined data types. Just\ndefine your data type and pass it as the second parameter to the\n``PGA`` constructor. The framework will take care of serializing the\ndata when transmitting via ``MPI`` (if you're running a parallel\nversion).\n\nIf duplicate checking is enabled via the ``no_duplicates`` constructor\nparameter, your data type needs to define a ``__hash__`` method (unless\nthe python default hash method fulfills your requirements).\n\nUser defined data types do not use alleles, so the normal ``get_allele``\n(and ``set_allele``) methods are not available. Instead the full\nindividual can be retrieved with the ``get_gene`` method and set with\nthe ``set_gene`` method.\n\nWith user data types you need to define the following methods:\n\n- ``check_duplicate (self, p1, pop1, p2, pop2)`` if you enable duplicate\n  checking with the crossover parameter ``no_duplicates``. This should\n  return True when the two individuals are duplicates. Use ``get_gene``\n  to retrieve the genes for the individuals ``p1`` and ``p2`` in\n  populations ``pop1`` and ``pop2``.\n- ``crossover (self, p1, p2, ppop, c1, c2, cpop)`` for crossover\n  operation, use ``get_gene`` for getting the parent genes for the\n  parents ``p1`` and ``p2`` in generation ``ppop`` and use ``set_gene``\n  for setting the child genes ``c1`` and ``c2`` in generation ``cpop``.\n- ``initstring (self, p, pop)`` for initializing the given string, use\n  ``set_gene`` in that method for setting your object as a gene.\n- ``mutation (self, p, pop, pm)`` for the mutation operation. This\n  should return the number of mutations performed. If duplicate checking\n  is enabled, the framework will repeatedly call the mutation operator\n  for mutating a duplicate individual into another individual that is no\n  duplicate. This uses the return value of your mutation method. You\n  will enter an endless loop if your mutation operator does not\n  occasionally return an non-zero number of mutatations performed when\n  duplicate checking is enabled. The ``pm`` parameter gives the mutation\n  probability. Use ``get_gene`` for retrieving the individual to be\n  mutated and use ``set_gene`` to update this individual after mutation.\n- ``print_string (self, file, p, pop)`` to print a gene object, use\n  ``get_gene`` for retrieving the individual to be printed.\n\nFor these methods it is generally a good idea to never modify an\nindividual in-place: This individual may be repeatedly used in genetic\noperations (e.g. mutation and crossover), so when modifying it you will\nproduce erroneous results for later genetic operations. To copy a data\nstructure, python's ``deepcopy`` function in the module ``copy`` is\nusually used.\n\nIn addition to the methods above you may want to define a stopping rule\nwith a ``stop_cond`` method or override the way a hash is computed using\na ``hash`` method. The default for computing a hash is to call\n``hash (gene)`` where gene is an object of the user defined data type.\nOther methods that may be used is an ``endofgen`` method, a\n``gene_distance`` method (e.g., when using Restricted Tournament\nReplacement, with ``PGA_POPREPL_RTR``), or a ``pre_eval`` method.\n\nAn example with user defined data types is in ``examples/gp``: This\nimplements Genetic Programming with a tree data structure. Note that the\n``Node`` class in ``gp.py`` has a ``__hash__`` method that builds a hash\nover the serialization of the tree (which is the same for individuals\nwith the same tree structure).\n\n\nMissing Features\n----------------\n\nAs already mentioned, not all functions and constants of PGAPack are\nwrapped yet |--| still for many applications the given set should be\nenough. If you need additional functions, you may want to wrap these and\nsend_ me a patch.\n\nReporting Bugs\n--------------\n\nPlease use the `Sourceforge Bug Tracker`_  or the `Github Bug Tracker`_ and\n\n- give a short description of what you think is the correct behaviour\n- give a description of the observed behaviour\n- tell me exactly what you did.\n- if you can publish your source code this makes it a lot easier to\n  debug for me\n\n.. _`Sourceforge Bug Tracker`:\n    http://sourceforge.net/tracker/?group_id=152022&atid=782852\n.. _`Github Bug Tracker`:\n    https://github.com/schlatterbeck/pgapy/issues\n.. _send: mailto:rsc@runtux.com\n\nResources\n---------\n\nProject information and download from `Sourceforge main page`_\n\n.. _`Sourceforge main page`: http://sourceforge.net/projects/pgapy/\n\nor checkout from Github_\n\n.. _`Github`: http://github.com/schlatterbeck/pgapy\n\nor directly install via pypi.\n\nInstallation\n------------\n\nPGApy, as the name suggests, supports parallelizing the evaluation\nfunction of the genetic algorithm. This uses the Message Passing\nInterface (MPI_) standard.\n\nTo install a *serial* version (without parallel programming using MPI_)\nyou can simply install from pypi using ``pip``. Alternatively when you\nhave unpacked or checked out from sources you can install with::\n\n python3 setup.py install --prefix=/usr/local\n\nIf you want a parallel version using an MPI_ (Message-Passing Interface)\nlibrary you will have to install a parallel version of PGApack first.\nThe easiest way to do this is to use `my pgapack debian package builder`_\nfrom github. Clone this repository, check out the branch ``master``,\ninstall the build dependencies, they're listed in the file\n``debian/control`` and build the debian packages using::\n\n  dpkg-buildpackage -rfakeroot\n\nThis builds pgapack debian packages for *all* supported MPI libraries in\ndebian, currently these are ``mpich``, ``openmpi``, and ``lam``. In addition\nto the MPI libraries a serial version of the pgapack library is also\nbuilt. Proceed by installing the package pgapack and the MPI backend\nlibrary of choice. If you don't have a preference for an MPI library,\n``libpgapack-openmpi`` is the package that uses the Debians default\npreferences of an MPI library.\n\nOnce a parallel version of PGApack is installed, you can install PGApy\nas follows: You set environment variables for the ``PGA_PARALLEL_VARIANT``\n(one of ``mpich``, ``openmpi``, or ``lam``) and set the ``PGA_MODULE`` to\n``module_from_parallel_install``. Finally you envoke the setup, e.g.::\n\n export PGA_PARALLEL_VARIANT=openmpi\n export PGA_MODULE=module_from_parallel_install\n python3 setup.py install --prefix=/usr/local\n\nIf your MPI library is installed in a different place you should study\nthe *Extension* configurations in ``setup.py`` to come up with an\nExtension definition that fits your installation. If your installation\nis interesting to more people, feel free to submit a patch that adds\nyour Extension-configuration to the standard ``setup.py``.\n\nTesting\n-------\n\nFor testing |--| preferrably before installation you can build locally::\n\n    python3 setup.py build_ext --inplace\n\nAfter this you have a ``pga.*.so`` file in the local directory. Now you\ncan run the tests with::\n\n    python3 -m pytest test\n\nThis runs all the tests and can take a while. Note that the tests run\nmost of the examples in the ``examples`` directory with different\ncommand line parameters where available. To perform several optimization\nruns in a single (Python-) process, we must call ``MPI_Init``\n*explicitly* (and not relying on PGAPack to call it implicitly). This is\nbecause ``MPI_Init`` may be called only once per process. Calling of\n``MPI_Init`` and ``MPI_Finalize`` is handled in a fixture in\n``test/conftest.py``\n\nCoverage\n++++++++\n\nFor the python examples, the coverage can be computed with::\n\n  python3 -m pytest --cov examples test\n\nor more verbose including untested lines with::\n\n  python3 -m pytest --cov-report term-missing --cov examples test\n\nPerforming a coverage analysis for the C code in ``pgamodule.c`` is\ncurrently possible only on Linux |--| at least, since I'm developing on\nLinux this is the architecture where I've found out how to perform\ncoverage analysis including the C code.\nTo compile for coverage analysis::\n\n  export CFLAGS=-coverage\n  python3 setup.py build_ext --inplace\n\nThis will create a file ending in ``.gcno`` under the ``build`` directory,\ntypically something like ``build/temp.linux-x86_64-3.9`` when using\n``python3.9`` on the ``x86_64`` architecture. Running the tests will\ncreate statistics data files with ending ``.gcda``. These are data files\nfor the GNU profiler ``gcov``. From these, ``.html`` files can be\ngenerated that can be inspected with a browser::\n\n  lcov --capture --directory . --output-file coverage.info\n  genhtml coverage.info --output-directory coverage_out\n\nNote that the ``lcov`` program is part of the linux distribution.\n\nRunning under MPI\n+++++++++++++++++\n\nThe tests can be directly run under MPI. Note that currently the\n``--with-mpi`` option of ``pytest`` is *not* supported. This option\nasumes that the package ``mpi4py`` is used. But ``pgapy`` uses only\ncalls from pgapack, which in turn calls MPI.\n\nRunning under MPI is done using::\n\n mpirun $MPI_OPTIONS python3 -m pytest test\n\nThe ``MPI_OPTIONS`` can be, e.g.::\n\n    MPI_OPTIONS=--machinefile ~/.mpi-openmpi --np 8\n\nwhich would use a machine definition file for openmpi in your home\ndirectory and eight processes.\n\nRunning under MPI is especially useful for determining C code coverage.\nAsuming a parallel version of ``openmpi`` is installed, the code can be\ncompiled with::\n\n PGA_PARALLEL_VARIANT=openmpi\n PGA_MODULE=module_from_parallel_install\n export CFLAGS=-coverage\n python3 setup.py build_ext --inplace\n\nNote that the coverage analysis uses files in the build directory which\nneed to be present before a parallel version can be started. Otherwise\neach parallel instance would try to create the coverage files resulting\nin race conditions. Once the coverage files are in place, the coverage\nframework ensures proper locking so that no two processes write\nconcurrently to the same coverage files.\n\nCreating the coverage files is best achieved by running the tests\nwithout MPI first and then running the same version with a number of\nprocesses under MPI. Running under MPI shows that the serialization and\ndeserialization code in ``pgamodule.c`` is called.\n\nAs of this writing we get::\n\n Lines:      1423    1475    96.5 %\n Functions:   131     133    98.5 %\n\n\nReferences\n----------\n\n.. [1]  Georges Harik. Finding multiple solutions in problems of bounded\n        difficulty. IlliGAL Report 94002, Illinois Genetic Algorithm Lab,\n        May 1994.\n.. [2]  Georges R. Harik. Finding multimodal solutions using restricted\n        tournament selection. In Eshelman [3]_, pages 24–31.\n.. [3]  Larry J. Eshelman, editor. *Proceedings of the 6th International\n        Conference on Genetic Algorithms (ICGA)*. Morgan Kaufmann, July 1995.\n.. [4]  Martin Pelikan. *Hierarchical Bayesian Optimization Algorithm:\n        Toward a New Generation of Evolutionary Algorithms*, volume 170 of\n        Studies in Fuzziness and Soft Computing.  Springer, 2005.\n.. [5]  Rainer Storn and Kenneth Price. Differential evolution |--| a simple\n        and efficient heuristic for global optimization over continuous\n        spaces. *Journal of Global Optimization*, 11(4):341–359, December\n        1997.\n.. [6]  Kenneth V. Price, Rainer M. Storn, and Jouni A. Lampinen.\n        *Differential Evolution: A Practical Approach to Global\n        Optimization.*  Springer, Berlin, Heidelberg, 2005.\n.. [7]  Kalyanmoy Deb, Amrit Pratap, Sameer Agarwal, and T. Meyarivan. A\n        fast and elitist multiobjective genetic algorithm: NSGA-II. *IEEE\n        Transactions on Evolutionary Computation*, 6(2):182–197, April 2002.\n.. [8]  Kalyanmoy Deb and Himanshu Jain. An evolutionary many-objective\n        optimization algorithm using reference-point-based nondominated\n        sorting approach, part I: Solving problems with box constraints.\n        *IEEE Transactions on Evolutionary Computation*, 18(4):577–601,\n        August 2014.\n.. [9]  Himanshu Jain and Kalyanmoy Deb. An evolutionary many-objective\n        optimization algorithm using reference-point-based nondominated\n        sorting approach, part II: Handling constraints and extending to\n        an adaptive approach. *IEEE Transactions on Evolutionary\n        Computation*, 18(4):602–622, August 2014.\n.. [10] Tetsuyuki Takahama and Setsuko Sakai. Constrained optimization\n        by the |epsilon| constrained differential evolution with an\n        archive and gradient-based mutation. In [11]_.\n.. [11] *IEEE Congress on Evolutionary Computation (CEC)*. Barcelona,\n        Spain, July 2010.\n.. [12] Indraneel Das and J. E. Dennis. Normal-boundary intersection: A new\n        method for generating the pareto surface in nonlinear multicriteria\n        optimization problems. SIAM Journal on Optimization, 8(3):631–657,\n        August 1998.\n\nChanges\n-------\n\nVersion 2.1: Regression test\n\n- PGApack bug-fixes discovered during testing\n- Bug-fixes of python wrapper\n- Lots of tests with coverage of wrapper C-code > 90%\n\nVersion 2.0: User defined data types\n\n- Implement user defined data types, note that your data type can be\n  variable-size, e.g., a tree data structure. The framework takes care\n  of serializing the data type and transmitting it to a remote MPI\n  process if using a parallel version.\n- When duplicate checking is enabled with the constructor parameter\n  ``no_duplicates``, the underlying pgapack code now uses a hash table.\n  This means the effort is no longer quadratic in the population size\n  but linear.\n- Example of Genetic Programming (GP) in the ``examples/gp`` directory\n- Rename the gene_difference method to gene_distance\n\nVersion 1.8: Epsilon-constrained optimization\n\n- Epsilon-constrained optimization\n- Precision for printing evals in multi-objective optimization, use this\n  feature for making regression-test work on AMD where a floating-point\n  difference in the 16th or so decimal place made a test fail\n- Crossover for permutations\n- Version-numbers: try to match pgapack, we might still diverge in the\n  last digit, though\n\nVersion 1.2: Many-objective optimization with NSGA-III\n\n- Implement NSGA-III\n\nVersion 1.1.6: Polynomial mutation and simulated binary crossover (SBX)\n\n- Simulated binary crossover (SBX)\n- Polynomial mutation\n\nVersion 1.1.1-1.1.5: Small PGAPack updates, fixes for non-debian\n\n- Fix setup.py for non-debian systems\n- Update to latest PGAPack with small changes\n\nVersion 1.1: Add multi-objective optimization with NSGA-II\n\n- Wrap latest pgapack version 1.4\n- This add multi-objective optimization using the Nondominated Sorting\n  Genetic Algorithm version 2 (NSGA-II) by Deb et. al. This makes use of\n  the previously-introduced option to return more than one value in the\n  objective function. To use the feature you need to set the\n  num_constraint parameter to a value that leave some of the function\n  values returned by your evaluation function as objective function\n  values (and not as constraints). See example in examples/multi.py.\n\nVersion 1.0: Add constraint handling\n\n- Wrap latest pgapack version 1.3\n- This adds auxiliary evaluations. Now your evaluation function can\n  return *multiple* floating-point values as a sequence if you set the\n  num_eval parameter >1 in the constructor. Currently additional\n  evaluation values are used for constraint handling. Constraint values\n  are minimized.  Once they reach zero or a negative value they no\n  longer count: The sum of all positive constraints is the overall\n  constraint violation.  For details see paper by Deb, 2000, see user\n  guide for citation. If you're not using constraints, nothing in your\n  code needs changes.\n- This release may change the path an optimization takes. So for the\n  same seed of the random number generator you will get a different\n  result, at least if during the search there are individuals with the\n  same evaluation (and different genetic material). This is due to a\n  change of the sort function in pgapack (it switched to a stable sort\n  from the C standard library).\n\nVersion 0.9: Allow installation of parallel version\n\n- Pass argv (or sys.argv) to PGACreate\n- Add a stanza to setup.py to allow a parallel installation with a given\n  pgapack variant compiled for an MPI library. This currently needs a\n  pre-installed pgapack debian package.\n\nVersion 0.8: Bugfix in real mutation\n\n- Fix a core-dump in the latest pgapack\n\nVersion 0.7: Major changes in wrapping\n\n- Now Differential Evolution is implemented, see the minfloat example\n  and the user guide of pgapack.\n\nVersion 0.6: Major changes in wrapping\n\n- Now the wrapping uses the standard Python recommendations on how to\n  create a custom class.\n- Update documentation\n- Rename ``fitness_cmax`` (from ``fitness_cmax_value``)\n- Better error checking of parameters\n\nVersion 0.5: Bug-fix release\n\n- Now the ``setup.py`` works, previous version had an encoding problem\n- Wrap some minor new methods\n- Bug-fix in PGAPack truncation selection\n\nVersion 0.4: Bundle PGAPack\n\n- The PGAPack package is now included as a git submodule. By default we\n  build against this library\n- License fixes: The module long shipped a ``COPYING`` file that includes\n  the 2-clause BSD license. But the headers of ``setup.py`` and ``pgamodule.c``\n  still included another license. This has been corrected.\n\nVersion 0.3: Feature enhancements, Bug fixes\n\nPort to Python3, Python2 is still supported, license change.\n\n- C-Code of wrapper updated to support both, Python2 and Python3\n- Update documentation\n- Fix some memory leaks that could result when errors occurred during\n  some callback methods\n- License change: We now have the 2-clause BSD license (similar to the\n  MPICH license of PGAPack), this used to be LGPL.\n\nVersion 0.2: Feature enhancements, Bug fixes\n\n64 bit support, more PGAPack functions and attributes wrapped,\nReadme-update: Sourceforge logo, Changes chapter.\n\n- Bug-fixes for 64 bit architectures\n- More functions and attributes of PGAPack wrapped\n- Add a build-rule to ``setup.py`` to allow building for standard-install\n  of PGAPack |--| this currently needs editing of ``setup.py`` |--| should use\n  autodetect here but this would require that I set up a machine with\n  standard install of PGAPack for testing.\n- Add Sourceforge logo as required\n- Add Changes chapter for automagic releases\n- Add the ``__module__`` string to class ``PGA`` in module ``pga``. Now\n  calling:: ``help (pga)`` in python works as expected, previously no\n  help-text was given for the included module\n\nVersion 0.1: Initial freshmeat announcement\n\nPGAPy is a wrapper for PGAPack, the parallel genetic algorithm library,\na powerful genetic algorithm library. PGAPy wraps this library for use\nwith Python. Pgapack is one of the most complete and accurate genetic\nalgorithm implementations out there with a lot of features for\nexperimentation.\n\n- Initial Release",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pgapy.sourceforge.net/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PGAPy",
    "package_url": "https://pypi.org/project/PGAPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/PGAPy/",
    "project_urls": {
      "Homepage": "http://pgapy.sourceforge.net/"
    },
    "release_url": "https://pypi.org/project/PGAPy/2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for pgapack, the parallel genetic algorithm library",
    "version": "2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15986714,
  "releases": {
    "0.1": [],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86ea3444ac8e770e2be45ed4b7c0b231237ca039cc08095ccfe97f26bff3e4f4",
          "md5": "e108ad2e7f8a3739214ec6a6527b07ac",
          "sha256": "112c381b2ceffed222c96562f2eff672328d7617540be23c47d7cc8f1ab17188"
        },
        "downloads": -1,
        "filename": "PGAPy-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e108ad2e7f8a3739214ec6a6527b07ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20390,
        "upload_time": "2017-09-03T20:31:31",
        "upload_time_iso_8601": "2017-09-03T20:31:31.583173Z",
        "url": "https://files.pythonhosted.org/packages/86/ea/3444ac8e770e2be45ed4b7c0b231237ca039cc08095ccfe97f26bff3e4f4/PGAPy-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eaa8467a0058e716a6e17bfce74d18429b48bfd51fe6b6174a37e8639c91fb4",
          "md5": "a1db0db6125fb94b42b2c0881e9272e2",
          "sha256": "27c1f49267893b31fce6b43583f8d9f3883a141bff970cfdecf4fd303e03393c"
        },
        "downloads": -1,
        "filename": "PGAPy-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a1db0db6125fb94b42b2c0881e9272e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 130732,
        "upload_time": "2020-05-30T19:49:04",
        "upload_time_iso_8601": "2020-05-30T19:49:04.991551Z",
        "url": "https://files.pythonhosted.org/packages/2e/aa/8467a0058e716a6e17bfce74d18429b48bfd51fe6b6174a37e8639c91fb4/PGAPy-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a600d25c35a00755f0eb294595c397db7cc25396066502b43948ac075eb09e3",
          "md5": "5c577577ad973fa407a5f6c8bf15865e",
          "sha256": "3d11ba7d5bd484d3a81127d4f716a6ba24b0fffb5f6f00fb5ac63eeea9bc994c"
        },
        "downloads": -1,
        "filename": "PGAPy-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c577577ad973fa407a5f6c8bf15865e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 131613,
        "upload_time": "2020-06-01T08:17:29",
        "upload_time_iso_8601": "2020-06-01T08:17:29.513555Z",
        "url": "https://files.pythonhosted.org/packages/4a/60/0d25c35a00755f0eb294595c397db7cc25396066502b43948ac075eb09e3/PGAPy-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0325f56f88a62cf5ee27d0403ab2d1eb50ba793c721f664f23aa977684f26d77",
          "md5": "be34d1406a4b86568ae86ebb5e9d7a9d",
          "sha256": "30532588c3ec651bd1ae3d5b6bc4360a1381642270b808bcfd4b3a84f35b02ae"
        },
        "downloads": -1,
        "filename": "PGAPy-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "be34d1406a4b86568ae86ebb5e9d7a9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 516763,
        "upload_time": "2020-06-03T09:39:46",
        "upload_time_iso_8601": "2020-06-03T09:39:46.234039Z",
        "url": "https://files.pythonhosted.org/packages/03/25/f56f88a62cf5ee27d0403ab2d1eb50ba793c721f664f23aa977684f26d77/PGAPy-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed52cc75e93a82d4a42346204be260438c406fad929c6714549618ff0929f889",
          "md5": "63629e58c5cc0bc0552e8ca90f183800",
          "sha256": "360109086b58810e302c5c78e31188f28f60c9d9ec5b4ea99a967deaa7fc4f23"
        },
        "downloads": -1,
        "filename": "PGAPy-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "63629e58c5cc0bc0552e8ca90f183800",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 562489,
        "upload_time": "2020-09-24T15:03:52",
        "upload_time_iso_8601": "2020-09-24T15:03:52.798663Z",
        "url": "https://files.pythonhosted.org/packages/ed/52/cc75e93a82d4a42346204be260438c406fad929c6714549618ff0929f889/PGAPy-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5104872e6482569a5cb27807711b2601d7ef234ab025fc15855eaeb9c9fa4898",
          "md5": "3e1885b93fcc462d3127c936acad0679",
          "sha256": "b23fdd971d673ddb3dbab9acc83e48c034f3ebec6c605ad3122f12da836da2af"
        },
        "downloads": -1,
        "filename": "PGAPy-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3e1885b93fcc462d3127c936acad0679",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 563378,
        "upload_time": "2020-09-25T14:25:40",
        "upload_time_iso_8601": "2020-09-25T14:25:40.526785Z",
        "url": "https://files.pythonhosted.org/packages/51/04/872e6482569a5cb27807711b2601d7ef234ab025fc15855eaeb9c9fa4898/PGAPy-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40fbffecebfed0f35dedc74ea247535714d95a31341b259e919578c89edac8fa",
          "md5": "60aa8d21340252544029abfcdbf0ffeb",
          "sha256": "9ca66f724a98c0ff5d7d2976abb91cc985a575592093ce0f8f46cb25c217b791"
        },
        "downloads": -1,
        "filename": "PGAPy-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "60aa8d21340252544029abfcdbf0ffeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 568247,
        "upload_time": "2021-11-21T17:48:28",
        "upload_time_iso_8601": "2021-11-21T17:48:28.475433Z",
        "url": "https://files.pythonhosted.org/packages/40/fb/ffecebfed0f35dedc74ea247535714d95a31341b259e919578c89edac8fa/PGAPy-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1ae287d31d480c99506c708918cb6ac53c0fa9dc1a4a2b7fe1515b231d84ca6",
          "md5": "34ea3fd31e720e1b0ec716deef30945a",
          "sha256": "53c0cb3774ff32075c5357fe32909a2e7a79c909491c6e46e2cdcf92a43b0705"
        },
        "downloads": -1,
        "filename": "PGAPy-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34ea3fd31e720e1b0ec716deef30945a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 589872,
        "upload_time": "2021-12-11T17:39:07",
        "upload_time_iso_8601": "2021-12-11T17:39:07.050617Z",
        "url": "https://files.pythonhosted.org/packages/f1/ae/287d31d480c99506c708918cb6ac53c0fa9dc1a4a2b7fe1515b231d84ca6/PGAPy-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c831989c9b4dc5666471db9bed97f57edb42a2a46359e8efb797f7841ebd8e51",
          "md5": "5b41a566886daacdeae57dca5ed9942f",
          "sha256": "be9c2ab61e13e13d4e46c8d11cbeaf6463d9ba44c1ff82c139ea495eb09b33ac"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b41a566886daacdeae57dca5ed9942f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 604295,
        "upload_time": "2021-12-16T18:34:01",
        "upload_time_iso_8601": "2021-12-16T18:34:01.134645Z",
        "url": "https://files.pythonhosted.org/packages/c8/31/989c9b4dc5666471db9bed97f57edb42a2a46359e8efb797f7841ebd8e51/PGAPy-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edaab8100505fd1c58ebb576f7352018701fe514af1d4dc112dd2b10f36ffe06",
          "md5": "75a5d299748b1a9c5289b8db69beb71a",
          "sha256": "84582f4d7b312ec1049de3b8ee2ffacaa70adad90f7d14741032f9255c0b6f89"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "75a5d299748b1a9c5289b8db69beb71a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 604361,
        "upload_time": "2021-12-17T15:09:25",
        "upload_time_iso_8601": "2021-12-17T15:09:25.319340Z",
        "url": "https://files.pythonhosted.org/packages/ed/aa/b8100505fd1c58ebb576f7352018701fe514af1d4dc112dd2b10f36ffe06/PGAPy-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc4836774d8c7e41e26e4c96b9d835e686c43242768880c689240cc799edc8c5",
          "md5": "489ff1b74db913c4e59c1cfe01cde633",
          "sha256": "b3c4c63a82ec594dea7a081346c3b505c0d4a6a1d81f18563b5a8deebfa472a1"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "489ff1b74db913c4e59c1cfe01cde633",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 610186,
        "upload_time": "2021-12-24T11:11:26",
        "upload_time_iso_8601": "2021-12-24T11:11:26.933419Z",
        "url": "https://files.pythonhosted.org/packages/fc/48/36774d8c7e41e26e4c96b9d835e686c43242768880c689240cc799edc8c5/PGAPy-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06f6597a7b351f4c18187188627855a12d9ed79f2c99bc11b22db741f985a01",
          "md5": "c143f02af0b04d1f6cf1df8436fd6262",
          "sha256": "8d44f2ead9ba60306f0cfc628cc5392f75afc3c9f0aa3dd5b02bed9d8e72f90f"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c143f02af0b04d1f6cf1df8436fd6262",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 610862,
        "upload_time": "2021-12-26T10:30:49",
        "upload_time_iso_8601": "2021-12-26T10:30:49.307991Z",
        "url": "https://files.pythonhosted.org/packages/b0/6f/6597a7b351f4c18187188627855a12d9ed79f2c99bc11b22db741f985a01/PGAPy-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e8b18c39d29cdc6825ccdb86f45e04c2b868c0802c0a7b72070311befe696b1",
          "md5": "2f3cded5d0ae6bdeb9d1f37a4799e8b6",
          "sha256": "d85ed38de768860fe27910de87b693707bbfd2ba02c986e6bd58eabbcb510cf8"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2f3cded5d0ae6bdeb9d1f37a4799e8b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 611099,
        "upload_time": "2021-12-28T13:53:53",
        "upload_time_iso_8601": "2021-12-28T13:53:53.236293Z",
        "url": "https://files.pythonhosted.org/packages/3e/8b/18c39d29cdc6825ccdb86f45e04c2b868c0802c0a7b72070311befe696b1/PGAPy-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db5a919ddee68cfd7c90a8bdb3fb3391d87660706a9cf14c57b43b2716e70cc0",
          "md5": "0ed3c89090ad78aafa42d4a9ebab9abd",
          "sha256": "78a036f9cb2a047a0b15afd3b22bcdfef2f913e2f1ec89cef6de8e8b16523d04"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0ed3c89090ad78aafa42d4a9ebab9abd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 614533,
        "upload_time": "2022-01-03T17:03:27",
        "upload_time_iso_8601": "2022-01-03T17:03:27.740888Z",
        "url": "https://files.pythonhosted.org/packages/db/5a/919ddee68cfd7c90a8bdb3fb3391d87660706a9cf14c57b43b2716e70cc0/PGAPy-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00b6b707ee6cdd705ae870c188b8425f313290dab2481a80526138a81a65d9a2",
          "md5": "30d8f440b8cc4c4951dc79f5f4bcd17b",
          "sha256": "445e259794971ab64d6f4567646301b2abafda57dee33c3e083dec36968cae57"
        },
        "downloads": -1,
        "filename": "PGAPy-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "30d8f440b8cc4c4951dc79f5f4bcd17b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 625735,
        "upload_time": "2022-01-06T16:54:05",
        "upload_time_iso_8601": "2022-01-06T16:54:05.418274Z",
        "url": "https://files.pythonhosted.org/packages/00/b6/b707ee6cdd705ae870c188b8425f313290dab2481a80526138a81a65d9a2/PGAPy-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b635205353c6606da41f8428f5a40202609eafaba1ceb11880cd6828109c20",
          "md5": "1424ac54fa4ba95869732c4e4b3d1a37",
          "sha256": "d98f7ed6c3365abbd02538134b2cc9c65007ab525f9c76b9a6cdb37203bce742"
        },
        "downloads": -1,
        "filename": "PGAPy-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1424ac54fa4ba95869732c4e4b3d1a37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 696782,
        "upload_time": "2022-01-18T16:07:51",
        "upload_time_iso_8601": "2022-01-18T16:07:51.538872Z",
        "url": "https://files.pythonhosted.org/packages/d9/b6/35205353c6606da41f8428f5a40202609eafaba1ceb11880cd6828109c20/PGAPy-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e3317cccb3cff22c9a754bf4d1e52719d5bf552792544050ed7ff088e63f644",
          "md5": "24b4d2a67f63aeeaad8ec52b9b0e308f",
          "sha256": "47176dafb6f3a92beffa2f163885f8113985f8e73bdd1991e1916325d7583921"
        },
        "downloads": -1,
        "filename": "PGAPy-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24b4d2a67f63aeeaad8ec52b9b0e308f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 698393,
        "upload_time": "2022-03-17T18:12:28",
        "upload_time_iso_8601": "2022-03-17T18:12:28.142992Z",
        "url": "https://files.pythonhosted.org/packages/4e/33/17cccb3cff22c9a754bf4d1e52719d5bf552792544050ed7ff088e63f644/PGAPy-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e762445f10afd329aeb2af9cf568b1f22d43d340b76a32d908ad5c191308223e",
          "md5": "ed7290849132c546fe5d6d2fc2406696",
          "sha256": "8839cd85af1bc67816ea89d161b1ba71d0981f63febc7785c41be495c2f82505"
        },
        "downloads": -1,
        "filename": "PGAPy-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed7290849132c546fe5d6d2fc2406696",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 700123,
        "upload_time": "2022-03-27T09:01:15",
        "upload_time_iso_8601": "2022-03-27T09:01:15.994279Z",
        "url": "https://files.pythonhosted.org/packages/e7/62/445f10afd329aeb2af9cf568b1f22d43d340b76a32d908ad5c191308223e/PGAPy-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "914c3603c275ce65d0875797559d6cfb56b91f89410e0f90cf82615d23f3df25",
          "md5": "7767799f77b726ecbcbad57a3f9b834e",
          "sha256": "2091d7ea4e2696726163c15d11fc3d2445a43bd0889728b1beb6bae79311944b"
        },
        "downloads": -1,
        "filename": "PGAPy-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7767799f77b726ecbcbad57a3f9b834e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 700203,
        "upload_time": "2022-03-29T13:10:59",
        "upload_time_iso_8601": "2022-03-29T13:10:59.681163Z",
        "url": "https://files.pythonhosted.org/packages/91/4c/3603c275ce65d0875797559d6cfb56b91f89410e0f90cf82615d23f3df25/PGAPy-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b138c8da371b7b75ad50818ef834c8fa42c6df2fef6ffa6959ed135658fd2c4b",
          "md5": "4f82b22c668dcade8aa9c0037c0b44a9",
          "sha256": "f3b864f41f0346f4e69d5c95ffa6a6ec2cb831a22a2c50ffb35e197011269bb3"
        },
        "downloads": -1,
        "filename": "PGAPy-1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4f82b22c668dcade8aa9c0037c0b44a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 718318,
        "upload_time": "2022-08-28T15:01:31",
        "upload_time_iso_8601": "2022-08-28T15:01:31.127644Z",
        "url": "https://files.pythonhosted.org/packages/b1/38/c8da371b7b75ad50818ef834c8fa42c6df2fef6ffa6959ed135658fd2c4b/PGAPy-1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9360a63cb1a2c4503dc4121446d63cc066f150ae5c65f43e6154df894bb29b5d",
          "md5": "be9de83c3f36a12880bac7efa6f79017",
          "sha256": "991a74ce4930404b9ec0b5ae6ee6b5388d0b859e64b1a61d0c5b5c51a3c81643"
        },
        "downloads": -1,
        "filename": "PGAPy-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be9de83c3f36a12880bac7efa6f79017",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 599335,
        "upload_time": "2022-10-26T12:13:49",
        "upload_time_iso_8601": "2022-10-26T12:13:49.451685Z",
        "url": "https://files.pythonhosted.org/packages/93/60/a63cb1a2c4503dc4121446d63cc066f150ae5c65f43e6154df894bb29b5d/PGAPy-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29880ae49da6d988a9d20e2b94b805f07e9c37a9ff97da4e729f33f87ec7c559",
          "md5": "c8223f18ba41f1833addf220de9130e9",
          "sha256": "4d8ae191ffa701f9d27857ee111db1c84af56263aa883b44f8f354d9de1b09ba"
        },
        "downloads": -1,
        "filename": "PGAPy-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c8223f18ba41f1833addf220de9130e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 795735,
        "upload_time": "2022-12-02T20:46:43",
        "upload_time_iso_8601": "2022-12-02T20:46:43.915322Z",
        "url": "https://files.pythonhosted.org/packages/29/88/0ae49da6d988a9d20e2b94b805f07e9c37a9ff97da4e729f33f87ec7c559/PGAPy-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f67cea582fc024d08dc668d0f54f6e24d423deebf512b031a366a58e3c2a3e4",
          "md5": "6460626055a28ac1ce273dc367c66f35",
          "sha256": "991a8ee061d100fed81e04357c006fadf83a639fc0fa1258215901ee34a3e1d3"
        },
        "downloads": -1,
        "filename": "PGAPy-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6460626055a28ac1ce273dc367c66f35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 655765,
        "upload_time": "2022-12-04T16:40:05",
        "upload_time_iso_8601": "2022-12-04T16:40:05.769880Z",
        "url": "https://files.pythonhosted.org/packages/6f/67/cea582fc024d08dc668d0f54f6e24d423deebf512b031a366a58e3c2a3e4/PGAPy-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f67cea582fc024d08dc668d0f54f6e24d423deebf512b031a366a58e3c2a3e4",
        "md5": "6460626055a28ac1ce273dc367c66f35",
        "sha256": "991a8ee061d100fed81e04357c006fadf83a639fc0fa1258215901ee34a3e1d3"
      },
      "downloads": -1,
      "filename": "PGAPy-2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6460626055a28ac1ce273dc367c66f35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 655765,
      "upload_time": "2022-12-04T16:40:05",
      "upload_time_iso_8601": "2022-12-04T16:40:05.769880Z",
      "url": "https://files.pythonhosted.org/packages/6f/67/cea582fc024d08dc668d0f54f6e24d423deebf512b031a366a58e3c2a3e4/PGAPy-2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}