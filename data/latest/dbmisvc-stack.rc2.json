{
  "info": {
    "author": "HMS DBMI Technology Core",
    "author_email": "bryan_larson@hms.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: Public Domain",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# Stack\n\n#### A program for running a stack of Docker services\n\n## Purpose\n\nThis is a program to provide some convenience wrappers around common tasks\nwhen developing with a containerized stack of micro-services. The program aims\nto simplify some of the management of a local stack and make it easier to\ndevelop on an entire stack whilst running and testing it. The current version\nonly supports Docker.\n\nThe application depends on configurations defined in the base `stack.yml`\nfile for the applications that will be built.\n\n## App Properties\n\n- `repository`: This should specify the URL to the app's git repository.\n- `branch`: The particular branch to checkout when cloning the repo.\n\n## Setup\n\n0. Create your Python virtualenv and install requirements:\n`pip install -r requirements.txt`\n\n1. First step is to place any needed overrides in the `overrides/{APP}`\ndirectory. These files are what will be used to build the image that\nwill be run in the stack. Typically they closely mirror the files\nthe app uses in its production environment, but with small tweaks to\nrun locally and to interface with other local apps. This directory\nmust contain a `Dockerfile` if the app is to run off a built image.\n\n2. The next step is to clone all needed repositories into the `apps` directory.\n`dbmisvc-stack` includes some convenience commands for managing the subtree\nrepositories. Do this with one command by running `dbmisvc-stack init`.\nSee below for further details on repository management.\n\n3. Next, configure secrets. Ensure the secrets configuration is accurate in `stack.yml`. Specifically, ensure your\nAWS profile is set to the account that contains this Stack's secrets. Secrets must be fetched and persisted locally\nas `.env`, do this by running `dbmisvc-stack secrets [--force]`.\n\n4. The next step is to make sure the `docker-compose.yml` file is fully\nand accurately filled out to include the apps and their configurations.\nThis includes any volumes needed to mount the app's source within the\ncontainer. This allows for file changes to update the services\nautomatically so changes can be tested immediately. Verify current setup\nby running `dbmisvc-stack check`.\n\n5. Lastly, update the hook scripts with any extra bits of code\nneeded to run the stack. Whether you need to collect npm\ndependencies after cloning a repo or you need a database to\nbe cleared when cleaning an app, this is where custom functionality\nshould live.\n\n## Stack Commands\n\nTo check stack configurations and to ensure volume paths are correct,\nrequired images exist, etc:\n\n> `dbmisvc-stack check [<app>]`\n\nNot passing an app will iterate through all services specified in the\n`docker-compose.yml` file and check all configurations.\n\nRun the initialize command to clone all needed repositories to their\nrespective branches:\n\n> `dbmisvc-stack init`\n\nMost applications will require sensitive secrets to function and stack assumes those will be saved in AWS Secrets Manager. Be sure\nthe correct configuration is set in `stack.yml` and remote secrets will be fetched and persisted to `.env` which is automatically\nused by docker-compose as a source of environment variables for services.\n\nTo pull those secrets down from AWS by running (pass `-f` to overwrite existing `.env` file):\n\n> `dbmisvc-stack secrets [-f]`\n\nTo get the stack going, run the following command (pass `-d` to daemonize\nthe process):\n\n> `dbmisvc-stack up [-d]`\n\nIf a container needs to be rebuilt for some reason (updated requirements, etc),\nrun the following command (app is the key of the service in your `docker-compose.yml`):\n\n> `dbmisvc-stack reup <app> [--clean]`\n\nYou could instead shell into the needed container and run the requirements\nupdate command there:\n\n> `dbmisvc-stack shell <app> [-sh]`\n\nStack defaults to trying to open a bash shell, but you can default to\nsh if bash is not available.\n\nYou can also check logs on a container with a couple constraints to more\neasily find the relevant logs:\n\n> `dbmisvc-stack logs <app> [--minutes=n] [--lines=n] [-f]`\n\nYou can specify how many minutes in the past to start the log retrieval\nor the number of lines to get. You can also pass the `-f` flag to follow\nthe logs as the container runs.\n\nThis will stop and remove the container, and then start it up again. The clean\nflag will purge the existing container image and rebuild before running again.\n\nTo bring the stack down, run the following:\n\n> `dbmisvc-stack down`\n\nThis merely wraps `docker-compose down --volumes` and brings the stack down\nand removes any left-over data volumes.\n\n> `dbmisvc-stack packages [package]`\n\nThis command will attempt to build and upload the package to the PyPi\nmirror for use by the apps in the Stack. Any apps that were marked\nas dependent on this package will trigger a reinstall of that\npackage automatically when a new build is successfully registered with\nthe local PyPi mirror.\n\n\n## Git Subtree Helper Commands\n\nStack apps are included as git subtrees. Commands were added to Stack to\nwrap and simplify the commands needed to work with these repositories.\n\nBefore cloning, make sure the app exists in the `docker-compose.yml` file\nand has the required configurations, namely the repository URL. The current\n`docker-compose.yml` file illustrates how to do this with the current set\nof apps.\n\n**Git subtree commands will not run with pending changes in the working\ndirectory. Commit all changes before running subtree commands.**\n\nTo clone an existing repo into the `apps` directory:\n\n> `dbmisvc-stack clone <app> <branch>`\n\nThis will clone the repo as a subtree in the `apps` directory\n(default: {PROJECT_ROOT}/apps). If the app is already present in the\n`apps` directory, that copy will be removed and the specified branch\nwill be cloned in its place.\n\nTo pull remote changes into the local branch, use the `pull` command:\n\n> `dbmisvc-stack pull <app> <branch> [--squash]`\n\nAll commits pulled are added to the stack repository so squashing\nthe incoming commits keeps history tidy.\n\nTo create a new branch for a specified app:\n\n> `dbmisvc-stack checkout <app> -b <branch>`\n\nThis splits the subtree into the new specified branch. Commit changes\nas usual for the entire stack repository. Once an update is ready to push,\nrun the push command as usual:\n\n> `dbmisvc-stack push <app> <branch> [--squash]`\n\nThis will collect commits relevant to the particular subtree and push those\nto origin for the new branch. The `--squash` command will collapse those\ncommits into a single commit.\n\nTo get back to the base branch, checkout the branch as usual:\n\n> `dbmisvc-stack checkout <app> <branch>`\n\nThis removes the subtree entirely, and clones the specified branch in\nits place.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hms-dbmi/dbmisvc-stack.git",
    "keywords": "cli",
    "license": "BSD 2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbmisvc-stack",
    "package_url": "https://pypi.org/project/dbmisvc-stack/",
    "platform": "",
    "project_url": "https://pypi.org/project/dbmisvc-stack/",
    "project_urls": {
      "Homepage": "https://github.com/hms-dbmi/dbmisvc-stack.git"
    },
    "release_url": "https://pypi.org/project/dbmisvc-stack/1.0.1/",
    "requires_dist": [
      "boto3 (>=1.13)",
      "colorlog (>=4.0)",
      "docker (>=3.7)",
      "docopt (>=0.6)",
      "python-dateutil (>=2.6)",
      "PyYAML (>=5.1)",
      "coverage (==4.4.1) ; extra == 'dev'",
      "nose (==1.3.7) ; extra == 'dev'",
      "pytest (==3.2.1) ; extra == 'dev'",
      "pytest-cov (==2.5.1) ; extra == 'dev'",
      "pre-commit (>=2.3) ; extra == 'dev'",
      "selenium (>=3.141.0) ; extra == 'dev'",
      "splinter (>=0.13.0) ; extra == 'dev'",
      "selenium (>=3.141.0) ; extra == 'selenium'",
      "splinter (>=0.13.0) ; extra == 'selenium'",
      "coverage (==4.4.1) ; extra == 'test'",
      "nose (==1.3.7) ; extra == 'test'",
      "pytest (==3.2.1) ; extra == 'test'",
      "pytest-cov (==2.5.1) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A command line program to facilitate development on a stack of containerized services",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11231201,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eed735b50fc6762218152248356957fec45e6c8651757b4e08f3c8b4ce30932c",
          "md5": "e83ce27bccb524ffe9db5a8534141284",
          "sha256": "9ad67cc8d93a613b68f3afa27d7b8354879a770e694fb5ee47877b4458231552"
        },
        "downloads": -1,
        "filename": "dbmisvc_stack-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e83ce27bccb524ffe9db5a8534141284",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29540,
        "upload_time": "2021-03-01T11:38:50",
        "upload_time_iso_8601": "2021-03-01T11:38:50.200127Z",
        "url": "https://files.pythonhosted.org/packages/ee/d7/35b50fc6762218152248356957fec45e6c8651757b4e08f3c8b4ce30932c/dbmisvc_stack-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7cae7f4e6190267d18310327f2258acc910930b430910bd43634ec45afafc76",
          "md5": "3feefe0451cf1c8863c47cc96fe8b619",
          "sha256": "18d5af1c59bfd8799d332691385f00c3c3832938ce6e2710d827c831d4a13449"
        },
        "downloads": -1,
        "filename": "dbmisvc-stack-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3feefe0451cf1c8863c47cc96fe8b619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21934,
        "upload_time": "2021-03-01T11:38:51",
        "upload_time_iso_8601": "2021-03-01T11:38:51.196422Z",
        "url": "https://files.pythonhosted.org/packages/d7/ca/e7f4e6190267d18310327f2258acc910930b430910bd43634ec45afafc76/dbmisvc-stack-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f91d2cfe0466dac9d8dbc0a43ff69b6fab4d9ff7f6ab048bbeb2a4a6da50135",
          "md5": "a6a50039b00d785f5e0ed7c4f064e9c1",
          "sha256": "3cfba6a7e943b72930db27eb0823b0816eeabc1e7e57b45f2e5f16d29cd369d2"
        },
        "downloads": -1,
        "filename": "dbmisvc_stack-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6a50039b00d785f5e0ed7c4f064e9c1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29451,
        "upload_time": "2021-08-20T10:39:34",
        "upload_time_iso_8601": "2021-08-20T10:39:34.031288Z",
        "url": "https://files.pythonhosted.org/packages/0f/91/d2cfe0466dac9d8dbc0a43ff69b6fab4d9ff7f6ab048bbeb2a4a6da50135/dbmisvc_stack-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79455809802449d43421317be679531559fdc0a59ef87d4790589a1f0b8e41e5",
          "md5": "5f18b4b18903117f7c4fabfb0d15c653",
          "sha256": "8c71ac5a1014304458c82d39bdcb75b3b686e89ce22c591f3d9b3f6cf18d9678"
        },
        "downloads": -1,
        "filename": "dbmisvc-stack-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f18b4b18903117f7c4fabfb0d15c653",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21922,
        "upload_time": "2021-08-20T10:39:35",
        "upload_time_iso_8601": "2021-08-20T10:39:35.065433Z",
        "url": "https://files.pythonhosted.org/packages/79/45/5809802449d43421317be679531559fdc0a59ef87d4790589a1f0b8e41e5/dbmisvc-stack-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f91d2cfe0466dac9d8dbc0a43ff69b6fab4d9ff7f6ab048bbeb2a4a6da50135",
        "md5": "a6a50039b00d785f5e0ed7c4f064e9c1",
        "sha256": "3cfba6a7e943b72930db27eb0823b0816eeabc1e7e57b45f2e5f16d29cd369d2"
      },
      "downloads": -1,
      "filename": "dbmisvc_stack-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6a50039b00d785f5e0ed7c4f064e9c1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 29451,
      "upload_time": "2021-08-20T10:39:34",
      "upload_time_iso_8601": "2021-08-20T10:39:34.031288Z",
      "url": "https://files.pythonhosted.org/packages/0f/91/d2cfe0466dac9d8dbc0a43ff69b6fab4d9ff7f6ab048bbeb2a4a6da50135/dbmisvc_stack-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79455809802449d43421317be679531559fdc0a59ef87d4790589a1f0b8e41e5",
        "md5": "5f18b4b18903117f7c4fabfb0d15c653",
        "sha256": "8c71ac5a1014304458c82d39bdcb75b3b686e89ce22c591f3d9b3f6cf18d9678"
      },
      "downloads": -1,
      "filename": "dbmisvc-stack-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5f18b4b18903117f7c4fabfb0d15c653",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21922,
      "upload_time": "2021-08-20T10:39:35",
      "upload_time_iso_8601": "2021-08-20T10:39:35.065433Z",
      "url": "https://files.pythonhosted.org/packages/79/45/5809802449d43421317be679531559fdc0a59ef87d4790589a1f0b8e41e5/dbmisvc-stack-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}