{
  "info": {
    "author": "surfhawk",
    "author_email": "surfhawk@naver.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Logging",
      "Topic :: Utilities"
    ],
    "description": "# SL4P : simplest logging for your python\n\n==========\n\n\n**sl4p** is a logging library that makes it easy to introduce more production-focused logging into your python applications.    \nsl4p users need not know anything about the slightly complex built-in python logging, although sl4p uses built-in Python's logging internally.  \nQuite simply, **you can start logging right in any code with the three lines** below.\n\n```python\nfrom sl4p import *\n\nlog = sl4p.getLogger(__file__)\nlog.info(\"Hello Sl4p logger !\")\n```\n\nThen, a log file with the contents below will be created in the folder `./sl4p_logs` in the same location as your code.\n```\nINFO   | 2023.03.22-17:19:13 - embedding.py (  86) :: OPERATING TIMEZONE: +9:00\nINFO   | 2023.03.22-17:19:13 - embedding.py (  87) :: Program  @c8abb11e  started.  <<ex1.py>>\nDEBUG  | 2023.03.22-17:19:13 - embedding.py (  88) ::          @@-- argv[0] = C:\\path\\to\\your\\python\\app.py\nINFO   | 2023.03.22-17:19:13 - ex1.py   (   4) :: Hello Sl4p logger !\nINFO   | 2023.03.22-17:19:13 - embedding.py ( 105) :: Program  c8abb11e  finished  <<ex1.py>>  -----  Elapsed    0.0010 s\n```\nDon't waste your time learning logging. Just enjoy this!\n\n## Main Features\nHere are the main features that are very easy to use:\n\n**Basic**\n- Logging that can be used right away with little to no setup required (by default config)\n- ConfigFile: Single/multi-application logger settings by JSON files and python dictionary\n- **Auto purging**: log files can be divided and recorded by specified time period or filesize, and old ones can be automatically deleted.\n- **Snippet log**: Logging to separate files for specific modules or subset of your Python program package\n- **Logging in multi-threaded/multi-process** (internally, without IPC, with recording to a same file)\n- Log of program context info: Timezone info, program execution path, total program run time, etc.\n\n**Utils & Advanced**\n- **SimpleTimer**: a stopwatch logging utility that supports start and multiple checks\n- `@sl4p_time()` records the time taken for function execution (optional user tag)\n- `@sl4p_try`, `@sl4p_try_exit` automatically log traceback using Try~Except statements\n- **Profiling**: record CPU and memory usage as a separate CSV file during program life\n- **ExceptionHook**: Register your function to execute in the event of an abnormal program termination\n\n\n## Installation\nThe **'sl4p'** package can be easily installed using pip.\n```\n$ pip install sl4p\n```\n\nOr download the appropriate .whl file for your Python version from the 'dist' folder on GitHub.\n```\n$ pip install sl4p-{pkg_ver}-{py_ver}-none-any.whl\n```\n\n## Configuration (Single App)\nSl4p has key concepts of **'configuration'** and **'logging'**.  \nConfiguration decides sl4p logger's behavior including logging level, message format, logfile savedir and so on.  \nYou can use Python dictionary or .cfg Yaml file to configuring as you want. \n\nThe following table describes the available keys and their corresponding values (default values indicated with an asterisk):\n```Yaml\n# Configured example\n{\n    \"__configver__\": \"C4\",  # For .cfg Yaml file, you must specify __configver__ \n\n    \"LOG\": {\n        \"use_console_print\": true,\n        \"console_level\": \"WARNING\",\n        \n        \"logging_level\": \"DEBUG\",\n        \"logging_format\": \"basic\",\n\n        \"logfile_savedir\": \"logs\",\n        \"logfile_name\": \"EXAMPLE_1\",\n    }\n}\n```\n| Key                 | Description                                                                                                                                       | Available value (*default)                                                                                                                                  |\n|---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `use_console_print` | Whether to print log messages to the console.                                                                                                     | **Bool** (*) True, False                                                                                                                                    |\n| `console_level`     | The minimum level of logs to be printed in console.<br/> Logs below this level will not be printed. If not be assigned, follow the logging_level. | (*) \"DEBUG\", \"INFO\", \"WARNING\",  \"ERROR\", \"CRITICAL\"                                                                                                        |\n| `console_format`    | The level of detail to include in the log message in console.  If not be assigned, follow the logging_format.                                     | \"simple\", (*) \"basic\", \"detail\", \"adap\"                                                                                                                     |\n| `console_stdout`    | Whether to send console output to stdout, otherwise to stderr which is the default of logging. (Output in red text in some IDEs)                  | **Bool** True, (*) False                                                                                                                                    |\n| `logging_level`     | The minimum level of logs to be recorded.<br/> Logs below this level will not be recorded.                                                        | (*) \"DEBUG\", \"INFO\", \"WARNING\",  \"ERROR\", \"CRITICAL\"                                                                                                        |\n| `logging_format`    | The level of detail to include in the log message in file.                                                                                        | \"simple\", (*) \"basic\", \"detail\", \"adap\"                                                                                                                     |\n| `logfile_savedir`   | The absolute path to the directory where log files will be saved. <br/> The path should be in either Windows or Linux format.                     | **String** : The OS-specific folder path <br/>windows ex) \"E:\\\\\\\\Workspace\\\\\\\\sl4p_logs\\\\\\\\app-abc\" <br/> linux ex) \"/opt/my_appvar/data/sl4p_logs/app_abc\" |\n| `logfile_name`      | The prefix of the log file name for your application. <br/> Sl4p will use this prefix to identify and purge old log files.                        | **String** : OS-supported filename. <br/> ex) \"LOG.your_app_name\"                                                                                           |\nThere are many other options, see examples on Github.\n<br/>\n\n## Make logging\n\n### 1. Load your configuration\nIt is important to load your configuration before using your application. \nI recommend placing this loading config phase at the beginning of your application's main function. \nPlease note that this loading phase only needs to be executed once for the entire application package.\n\nWhen loading your configuration, you can pass your config (dict or Yaml file's path) as second parameter of getLogger().\nAdditionally, you can use the optional parameter debugprt=True to display sl4p's initialization info.\n\nHere are three ways to load your configuration:\n\n\nA. **'get-logger' style loading**\n```python\nlog = sl4p.getLogger(__file__, cfg=\"./applog.cfg\", debugprt=True)  #debugprt param is optional!\nlog.info(\"hello sl4p!\")\n```\n\nB. **'with-block' style loading**\n```python\nwith sl4p(__file__, cfg=logcfg_dict) as log:\n    log.info(\"hello sl4p!\")\n    log.error(\"Error occured! #%d\" % (400))\n    # log.error(\"Error occured! \", 400)  --> Not support this 'print()' style, Please formatting.\n```\n\nC. **How to load logger in Jupyter**  \n`__file__`, the first argument of getLogger, is used as an identifier in Snippet logging.  \nInstead, enter any string in Jupyter.\n```python\nlog = sl4p.getLogger('jupyter', cfg=logcfg_dict):\nlog.info('Hello sl4p in jupyter!')\n```\n\n<br/>\n\n### 2. Write a log message\nAfter loading your configuration, you can log messages anywhere in your application, even in another file, without passing the second parameter into getLogger.  \nHere are two ways to use logging:\n\nA. **'get-logger' style logging**\n```python\nlog = sl4p.getLogger(__file__)\nlog.debug(\"Just pass only __file__\")\n```\n\nB. **'with-block' style logging**\n```python\nwith sl4p(__file__) as log:\n    log.warning(\"warn msg! : you should not pass 2nd parameter to sl4p() after configuration completed\")\n```\n<br/>\n\nThat's it! Enjoy logging your application :)  \nRemember to load your configuration only once and log your messages everywhere.\n\n<br/>\n\n\n\n## Utils & Advanced\n\nThe 'with-block' logging feature can measure elapsed time as DEBUG log and can also include a custom tag using ##TAG_NAME##.  \nHere is an example:\n\n```python\nimport time\nwith sl4p(__file__, tag='myTag') as log:\n    time.sleep(1.0)\n    log.info('with-block time measuring and tagging feature!')\n```\nThis is the output log:\n```text\nDEBUG  | 2019.11.14-22:03:43 - example2.py #myTag @adfd08e4 started\nINFO   | 2019.11.14-22:03:44 - with-block time measuring and tagging feature!\nDEBUG  | 2019.11.14-22:03:44 - example2.py #myTag @adfd08e4 finished  ----  Elapsed    1.0001 s\n```\n<br/>\n\n**Decorator - @sl4p_time(tag={TAG_NAME})**<br/>\nYou can also use the `@l4p_time(tag={TAG_NAME})` decorator to measure the execution time of a function and log it with DEBUG level:\n```python\n@sl4p_time()  # Although you do not use tagging, l4p_time decorator must be written with () brackets.\ndef my_function1():\n    time.sleep(1.5)\n    log.error('not yet...')\n```\nThis is the output log:\n```text\nDEBUG  | 2019.11.14-22:12:43 - example3.py f`my_function1() @19f19de9 started\nERROR  | 2019.11.14-22:12:44 - not yet...\nDEBUG  | 2019.11.14-22:12:44 - example3.py f`my_function1 @19f19de9 finished  ----  Elapsed    1.5038 s\n```\n<br/>\n\n**Decorator - @sl4p_try, @sl4p_try_exit**<br/>\nyou can use the `@sl4p_try` and `@sl4p_try_exit` decorator to try-except your function and log the traceback of the exception.\n```python\n@sl4p_try\ndef take_exception():\n    a = 'ABCD' + None\n```\nThis is the output log:\n```text\nERROR  | 2019.11.14-22:12:44 - can only concatenate str (not \"NoneType\") to str\nTraceback (most recent call last):\n  File \"D:\\Devel_Workspace\\py27_9\\devel_logger\\sl4p\\decorators.py\", line 21, in wrapped\n    return func(*args, **kwargs)\n  File \"D:/Devel_Workspace/py27_9/devel_logger/example3.py\", line 15, in take_exception\n    a = 'ABCD' + None\nTypeError: can only concatenate str (not \"NoneType\") to str\n```\nRememter `@sl4p_try` will continue the program when excepted. But `@sl4p_try_exit` will terminate it.\n<br/><br/>\n\n\n## About\n### Dependencies\n* json\n* psutil\n* colorlog\n* pywin32 _(only in windows)_\n* colorama _(only in windows)_\n\n### License\nBSD 3\n\n### Getting Help / Discussion / Contributing\nRight here, please be active in this GitHub repository.  \nAll contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.  \n<br/>\n\n***\n## Release Note\n\n**(*) ver 1.4.2 :: Coloring console log (by colorlog) and add related configs, Support console stdout'**  \nver 1.4.1 :: Correct the docs, Change default config (console config has no initial values)  \nver 1.4.0 :: Layered apps-config, Support console level&format, IndLogger, Enhance stability  \nver 1.3.3linux :: excluding 'psutil' in requires for linux   \nver 1.3.3 :: override_dict bugfix (support python 3.9+)  \nver 1.3.2 :: Add log_level for SimpleTimer: logger.create_simpleTimer(), config bugfix  \nver 1.3.1 :: Add log_level for @sl4p_time decorator  \nver 1.2.0 :: Add stopwatch(SimpleTimer), Profiling stats(CPU & MEM), Recording TimeZone  \nver 1.0.1 :: Supports multi-byte msg, update config and constants / Patch debugprt, start_ts  \nver 1.0.0 :: First deployed release version  \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/surfhawk/sl4p",
    "keywords": "",
    "license": "S-BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sl4p",
    "package_url": "https://pypi.org/project/sl4p/",
    "platform": null,
    "project_url": "https://pypi.org/project/sl4p/",
    "project_urls": {
      "Homepage": "https://github.com/surfhawk/sl4p"
    },
    "release_url": "https://pypi.org/project/sl4p/1.4.2/",
    "requires_dist": [
      "psutil",
      "colorlog (==6.7.0)",
      "pywin32",
      "colorama"
    ],
    "requires_python": ">=3.0",
    "summary": "Simple logger for python. Easy configuration and Multiprocess supported.",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17473715,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aede29fd4926eb47bfa81547bf1904504d3367f8f4ea15739132bada809af9cc",
          "md5": "e2db5485076478cf22e1398fd54357b2",
          "sha256": "80c4124a8ba86c87954128561b3a891ffb68d02893c29a41c6481e938d9dba04"
        },
        "downloads": -1,
        "filename": "sl4p-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2db5485076478cf22e1398fd54357b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15567,
        "upload_time": "2022-06-13T00:02:50",
        "upload_time_iso_8601": "2022-06-13T00:02:50.076487Z",
        "url": "https://files.pythonhosted.org/packages/ae/de/29fd4926eb47bfa81547bf1904504d3367f8f4ea15739132bada809af9cc/sl4p-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aa141b36da8216f088e08c6db66181470b62c9be5a1a92b175544372a2433da",
          "md5": "c685e07e37c115e66eee61d0196718dd",
          "sha256": "b898e5bbb41d64195c0c6e8b2e5baccf2d9d4e94f41338460e5d3fa0f8897870"
        },
        "downloads": -1,
        "filename": "sl4p-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c685e07e37c115e66eee61d0196718dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16098,
        "upload_time": "2022-06-13T00:02:52",
        "upload_time_iso_8601": "2022-06-13T00:02:52.707008Z",
        "url": "https://files.pythonhosted.org/packages/8a/a1/41b36da8216f088e08c6db66181470b62c9be5a1a92b175544372a2433da/sl4p-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "040d73bcc70614ec76b89bf8fa2b974cf6f4ff43a44af3468461cc2906a33716",
          "md5": "bf6fc4ac801574a81c75aa7be530f402",
          "sha256": "56a59c4bf57557f6ca2d95e311b78fedf1d1c684a8fe5d3756bcebc8148f5be4"
        },
        "downloads": -1,
        "filename": "sl4p-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf6fc4ac801574a81c75aa7be530f402",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16181,
        "upload_time": "2022-06-13T00:02:54",
        "upload_time_iso_8601": "2022-06-13T00:02:54.899681Z",
        "url": "https://files.pythonhosted.org/packages/04/0d/73bcc70614ec76b89bf8fa2b974cf6f4ff43a44af3468461cc2906a33716/sl4p-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96732970561a85bf92f9aa2055bb1b3b75025d852dd410bc546520a64a71d38",
          "md5": "4fdfa9670a7a8a786f57e11ec7ab54b5",
          "sha256": "5b05dba0d3863f66eb4a015ccf0c666e6221f31fffa08c6a981e4f15b5ef355a"
        },
        "downloads": -1,
        "filename": "sl4p-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fdfa9670a7a8a786f57e11ec7ab54b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16259,
        "upload_time": "2022-06-13T00:02:57",
        "upload_time_iso_8601": "2022-06-13T00:02:57.417263Z",
        "url": "https://files.pythonhosted.org/packages/d9/67/32970561a85bf92f9aa2055bb1b3b75025d852dd410bc546520a64a71d38/sl4p-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e62232259fdeac9b42b0ca847a3a2b87a2daafdf5409750c1771cdac375bfd58",
          "md5": "e61892cf15c23c92eb7da49575b024e7",
          "sha256": "76e5d5fc1f7071578ae63ac3b728ac88241b7dbaff90866b62da240074ec8c0b"
        },
        "downloads": -1,
        "filename": "sl4p-1.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e61892cf15c23c92eb7da49575b024e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16522,
        "upload_time": "2022-06-13T00:02:59",
        "upload_time_iso_8601": "2022-06-13T00:02:59.109625Z",
        "url": "https://files.pythonhosted.org/packages/e6/22/32259fdeac9b42b0ca847a3a2b87a2daafdf5409750c1771cdac375bfd58/sl4p-1.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ce0fb695871b71dcdcd1fe8304bd0347dc2882a404b8fe62c05c24a7786a095",
          "md5": "d510b5f2ff2ef0eb763a12234499b964",
          "sha256": "f1b7819d50e3070f864ad8d8387f3d499f19bb8a8cff510f7ff517d8af552698"
        },
        "downloads": -1,
        "filename": "sl4p-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d510b5f2ff2ef0eb763a12234499b964",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 21693,
        "upload_time": "2023-03-23T09:48:31",
        "upload_time_iso_8601": "2023-03-23T09:48:31.751465Z",
        "url": "https://files.pythonhosted.org/packages/3c/e0/fb695871b71dcdcd1fe8304bd0347dc2882a404b8fe62c05c24a7786a095/sl4p-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e21c2316a04b9da517e43422f89a8e8a87ce268066b7bed75611844d1ea68225",
          "md5": "3366b306e53b46f199afadc102bb4fe8",
          "sha256": "1e1d00130b5aa09b6de1a0709c51087b08ed5721e56979dd847fe9b1c04f5a39"
        },
        "downloads": -1,
        "filename": "sl4p-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3366b306e53b46f199afadc102bb4fe8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 21792,
        "upload_time": "2023-03-27T10:31:15",
        "upload_time_iso_8601": "2023-03-27T10:31:15.476257Z",
        "url": "https://files.pythonhosted.org/packages/e2/1c/2316a04b9da517e43422f89a8e8a87ce268066b7bed75611844d1ea68225/sl4p-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c1bdc0a7436d6f034c75f198d296745b356e9ca4d29d53f596607abe09e6365",
          "md5": "ce7885ef7f63a58a742705a51317d381",
          "sha256": "6841bcad276d97817b6fba22b498813893580356213eb885a0d70bc11877e138"
        },
        "downloads": -1,
        "filename": "sl4p-1.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce7885ef7f63a58a742705a51317d381",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 22164,
        "upload_time": "2023-03-28T06:17:42",
        "upload_time_iso_8601": "2023-03-28T06:17:42.906882Z",
        "url": "https://files.pythonhosted.org/packages/3c/1b/dc0a7436d6f034c75f198d296745b356e9ca4d29d53f596607abe09e6365/sl4p-1.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c1bdc0a7436d6f034c75f198d296745b356e9ca4d29d53f596607abe09e6365",
        "md5": "ce7885ef7f63a58a742705a51317d381",
        "sha256": "6841bcad276d97817b6fba22b498813893580356213eb885a0d70bc11877e138"
      },
      "downloads": -1,
      "filename": "sl4p-1.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce7885ef7f63a58a742705a51317d381",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 22164,
      "upload_time": "2023-03-28T06:17:42",
      "upload_time_iso_8601": "2023-03-28T06:17:42.906882Z",
      "url": "https://files.pythonhosted.org/packages/3c/1b/dc0a7436d6f034c75f198d296745b356e9ca4d29d53f596607abe09e6365/sl4p-1.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}