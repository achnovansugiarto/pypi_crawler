{
  "info": {
    "author": "Salamander115",
    "author_email": "mjlonghurst15@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "QuickVars\r\n=========\r\n\r\n| Python 3 variable storage module centered around the in-built\r\n  ``pickle`` module.\r\n| This module contains 3 functions: \"``QuickVars.setVar()``\",\r\n  \"``QuickVars.getVar()``\", and \"``QuickVars.delVar()``\".\r\n| Though very self-explanitory, more details on each function are below.\r\n\r\nQuickVars.setVar(key, val, t = 'data')\r\n--------------------------------------\r\n\r\n::\r\n\r\n    @param key : The key param is used as the key in a Dictionary, choose your datatype\r\n                 accordingly.\r\n     \r\n    @param val : The val param takes the data stored under the key, and can be any Dictionary\r\n                 compatible value.\r\n     \r\n    @param t   : The t param chooses the file to store the key-value pair in.\r\n     \r\n    @returns   : Dictionary containing values stored in the file.\r\n\r\n    The setVar function will take a minimum of two params (key, val), and has an optional\r\n    param (t). The key-value pairs will be added to an encoded (Please note: Strictly speaking\r\n    it is not encrypted and should not be considered safe to store valuable information) JSON\r\n    file at: \"data/{Script Name Without Extension}_{t}.dat\".\r\n\r\nQuickVars.getVar(key, t = 'data')\r\n---------------------------------\r\n\r\n::\r\n\r\n    @param key : The key to search for in stored dictionary.\r\n\r\n    @param t   : The t param chooses the file to search for the key-value pair in.\r\n\r\n    @returns   : Stored Value (May be one of many data types).\r\n\r\n    The getVar function will take a minimum of one param (key), and has an optional param (t). The\r\n    function will search the chosen files dictionary for the key and return it if found, otherwise\r\n    return 'None'.\r\n\r\nQuickVars.getAllVars(t = 'data')\r\n--------------------------------\r\n\r\n::\r\n\r\n    @param t   : The t param chooses the file to get all vars from.\r\n\r\n    @returns   : All values stored in specified file\r\n\r\n    The getAllVars function will take a an optional param (t). The function will return all\r\n    values in the specified file.\r\n\r\nQuickVars.delVar(key, t = 'data')\r\n---------------------------------\r\n\r\n::\r\n\r\n    @param key : The key to remove from stored dictionary.\r\n\r\n    @param t   : The t param chooses the file to search for the key-value pair in.\r\n\r\n    @returns   : Stored Dictionary after attempting to remove indicated key.\r\n\r\n    The delVar function will take a minimum of one param (key), and has an optional param (t). The\r\n    function will search the chosen files dictionary for the key and delete it if found, returning\r\n    the dictionary.\r\n\r\nExamples\r\n========\r\n\r\n::\r\n\r\n    import QuickVars as QV\r\n\r\n    lst = []\r\n    for (i in range(20)):\r\n        lst.append(i)\r\n    QV.setVar('test', lst)\r\n    # Returns: {'test': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]}\r\n\r\n    print(QV.getVar('test'))\r\n    # Outputs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\r\n\r\n    QV.setVar('test1', '5*9.2=' + str(5*9.2))\r\n    # Returns: {'test': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 'test1': '5*9.2=46.0'}\r\n\r\n    QV.setVar('test', 'different value here!', 'foo')\r\n    # Returns: {'test': 'different value here!'}\r\n\r\n    QV.delVar('test', 'data')\r\n    # Return: {'test1': '5*9.2=46.0'}",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Salamander115/QuickVars",
    "keywords": "variables quickvars QuickVars",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QuickVars",
    "package_url": "https://pypi.org/project/QuickVars/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/QuickVars/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/Salamander115/QuickVars"
    },
    "release_url": "https://pypi.org/project/QuickVars/1.0.1b3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python Module that stores variables in a file to allow variable storage after script is terminated",
    "version": "1.0.1b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1907797,
  "releases": {
    "1.0.1b2": [
      {
        "comment_text": "Added getAllVars() function.",
        "digests": {
          "blake2b_256": "70680b05a39ddbfa5f0b922f7de998800f1d0e5c6fe0f82951647fd46f7c8e8e",
          "md5": "de29d6f48da2e6494552e9177be81a0c",
          "sha256": "cf9ccee9df14dfd5637de126049556596821eae890b9d087aafcd38dfa7788f8"
        },
        "downloads": -1,
        "filename": "QuickVars-1.0.1b3.zip",
        "has_sig": false,
        "md5_digest": "de29d6f48da2e6494552e9177be81a0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7612,
        "upload_time": "2016-01-16T21:05:55",
        "upload_time_iso_8601": "2016-01-16T21:05:55.680702Z",
        "url": "https://files.pythonhosted.org/packages/70/68/0b05a39ddbfa5f0b922f7de998800f1d0e5c6fe0f82951647fd46f7c8e8e/QuickVars-1.0.1b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1b3": []
  },
  "urls": [],
  "vulnerabilities": []
}