{
  "info": {
    "author": "Fredrik Olsson",
    "author_email": "fredrik.x.olsson@ri.se",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# marulc\n\n**M**aritime **U**npack-**L**ookup-**C**onvert\n\nA library for parsing and unparsing (future feature) of maritime message formats. Currently supports:\n\n    - NMEA0183\n    - NMEA2000\n\n\nMain features:\n\n    - Parsing NMEA0183 sentences to python dictionaries\n    - Parsing and decoding NMEA2000 binary messages to python dictionaries\n    - Support for NMEA2000 messages wrapped in NMEA0183 sentences (``--PGN``-sentences)\n    - Support for multi-packet NMEA2000 messages (fast-type messages)\n\nSince everything is parsed and decoded into regular python dictionaries, serialization to JSON format is very simple.\n\n## Definitions for parsing and decoding\nFor NMEA0183, definitions have been extracted from the class-based hierarchy of pynmea2 and copmiled into a JSON definition. It can be found [here](https://github.com/RISE-MO/marulc/blob/master/marulc/nmea0183_sentence_formatters.json). The script for extracting these definitions from the pynmea2 source code is available in the ``scripts``-folder.\n\nFor NMEA2000, definitions are identical to what is being used in the [CANBOAT](https://github.com/canboat/canboat) project. The definitions can be found [here](https://github.com/RISE-MO/marulc/blob/master/marulc/nmea2000_pgn_specifications.json).\n\n## Installation\nFrom pypi:\n```\npip install marulc\n```\n\n## Example usage\n\n**Single NMEA0183 sentence using standard sentence library**\n```python\nfrom marulc import unpack_nmea0183_message\n\nmsg_as_dict = unpack_nmea0183_message(\"$GNGGA,122203.19,5741.1549,N,01153.1748,E,4,37,0.5,4.03,M,35.78,M,,*72\")\n```\n**Single NMEA0183 sentence wrapping a N2K message using custom formatter**\n```python\nfrom marulc import NMEA0183Parser\nfrom marulc.custom_parsers.PCDIN import PCDINFormatter\n\nparser = NMEA0183Parser([PCDINFormatter()])\n\nmsg_as_dict = parser.unpack(\n    \"$PCDIN,01F201,001935D5,38,0000000B0C477CBC0C0000FFFFFFFFFFFF30007F000000000000*26\"\n)\n```\n\n**Parse from iterator**\n```python\nfrom marulc import NMEA0183Parser, parse_from_iterator\n\nexample_data = [\n    \"$YDGLL,5741.1612,N,01153.1447,E,110759.00,A,A*6B\",\n    \"$YDRMC,110759.00,A,5741.1612,N,01153.1447,E,0.0,300.0,010170,,E,A,C*72\",\n    \"$YDRPM,E,0,0.0,,A*64\",\n    \"$YDRPM,E,1,0.0,,A*65\",\n    \"$YDROT,-0.6,A*10\",\n    \"$YDHDG,0.0,0.0,E,,*3F\",\n    \"$YDHDM,0.0,M*3F\",\n    \"$YDRSA,-0.1,A,,V*48\",\n    \"$YDVTG,328.0,T,328.0,M,0.0,N,0.0,K,A*29\"\n]\n\nparser = NMEA0183Parser()\n\nfor unpacked_msg in parse_from_iterator(parser, example_data, quiet=True):\n    print(unpacked_msg)\n```\n\n**NMEA2000 frames**\n```python\nfrom marulc import NMEA2000Parser\n\nparser = NMEA2000Parser()\n\n# Unpack a single frame message\n# Note: This will only work for single-frame N2K messages. For multi-frame messages, the unpack\n# method will raise a `MultiPacketInProcessError` and expect further frames to be provided\nmsg_as_dict = parser.unpack(\"09F10D0A FF 00 00 00 FF 7F FF FF\")\n\n# For unpacking multi-frame messages, its usually better to use a `parse_from_iterator` setup, such as:\nfrom marulc import parse_from_iterator\n\nmulti_frame_message = [\n    \"09F201B7 C0 1A 01 FF FF FF FF B0\",\n    \"09F201B7 C1 81 3C 05 00 00 B0 BA\",\n    \"09F201B7 C2 1C 00 FF FF FF FF FF\",\n    \"09F201B7 C3 00 00 00 00 7F 7F FF\",\n]\n\nfor full_message in parse_from_iterator(parser, multi_frame_message, quiet=True):\n    print(full_message)\n\n```\n\n**Filter for specific messages**\n```python\nfrom marulc import NMEA0183Parser, parse_from_iterator\nfrom marulc.utils import filter_on_talker_formatter\n\nexample_data = [\n    \"$YDGLL,5741.1612,N,01153.1447,E,110759.00,A,A*6B\",\n    \"$YDRMC,110759.00,A,5741.1612,N,01153.1447,E,0.0,300.0,010170,,E,A,C*72\",\n    \"$YDRPM,E,0,0.0,,A*64\",\n    \"$YDRPM,E,1,0.0,,A*65\",\n    \"$YDROT,-0.6,A*10\",\n    \"$YDHDG,0.0,0.0,E,,*3F\",\n    \"$YDHDM,0.0,M*3F\",\n    \"$YDRSA,-0.1,A,,V*48\",\n    \"$YDVTG,328.0,T,328.0,M,0.0,N,0.0,K,A*29\"\n]\n\nparser = NMEA0183Parser()\n\niterator_all = parse_from_iterator(parser, example_data, quiet=True)\n\nrpm_sentences = list(filter(filter_on_talker_formatter(\"..RPM\"), iterator_all))\nassert len(rpm_sentences) == 2\n```\n\n**Extract specific value from specific messages**\n```python\nfrom marulc import NMEA2000Parser, parse_from_iterator\nfrom marulc.utils import filter_on_pgn, deep_get\n\nexample_data = [\n    \"08FF12C9 4A 9A 00 17 DB 00 00 00\",\n    \"08FF13C9 4A 9A 00 00 FF FF FF FF\",\n    \"08FF14C9 4A 9A 00 00 00 00 00 FF\",\n    \"09F200C9 00 57 30 FF FF 01 FF FF\",\n    \"09F205C9 00 FC FF FF FF FF 00 FF\",\n    \"09F10DE5 00 F8 FF 7F F9 FE FF FF\",\n    \"09F11365 DA AB 4B FE FF FF FF FF\",\n    \"08FF12B7 4A 9A 01 17 DB 00 00 00\",\n    \"08FF13B7 4A 9A 01 00 FF FF FF FF\",\n    \"08FF14B7 4A 9A 01 00 00 00 00 FF\",\n    \"09F200B7 01 DA 2F FF FF 01 FF FF\",\n    \"09F205B7 01 FC FF FF FF FF 00 FF\",\n]\n\nparser = NMEA2000Parser()\n\niterator_all = parse_from_iterator(parser, example_data, quiet=True)\n\nspeeds = []\nfor filtered_unpacked_msg in filter(filter_on_pgn(127488), iterator_all):\n    speed = deep_get(filtered_unpacked_msg, \"Fields\", \"speed\")\n    speeds.append(speed)\n\nassert len(speeds) == 2\n```\n\n**Extraction using JSON pointers**\nRequires the `jsonpointer` package (`pip install jsonpointer`)\n```python\nfrom jsonpointer import resolve_pointer\n\nfrom marulc import NMEA2000Parser, parse_from_iterator\nfrom marulc.utils import filter_on_pgn, deep_get\n\nexample_data = [\n    \"08FF12C9 4A 9A 00 17 DB 00 00 00\",\n    \"08FF13C9 4A 9A 00 00 FF FF FF FF\",\n    \"08FF14C9 4A 9A 00 00 00 00 00 FF\",\n    \"09F200C9 00 57 30 FF FF 01 FF FF\",\n    \"09F205C9 00 FC FF FF FF FF 00 FF\",\n    \"09F10DE5 00 F8 FF 7F F9 FE FF FF\",\n    \"09F11365 DA AB 4B FE FF FF FF FF\",\n    \"08FF12B7 4A 9A 01 17 DB 00 00 00\",\n    \"08FF13B7 4A 9A 01 00 FF FF FF FF\",\n    \"08FF14B7 4A 9A 01 00 00 00 00 FF\",\n    \"09F200B7 01 DA 2F FF FF 01 FF FF\",\n    \"09F205B7 01 FC FF FF FF FF 00 FF\",\n]\n\nparser = NMEA2000Parser()\n\niterator_all = parse_from_iterator(parser, example_data, quiet=True)\n\nspeeds = []\nfor filtered_unpacked_msg in filter(filter_on_pgn(127488), iterator_all):\n    speed = resolve_pointer(filtered_unpacked_msg, \"/Fields/speed\")\n    speeds.append(speed)\n\nassert len(speeds) == 2\n```\n\n## Development setup\nCreate a virtual environment:\n\n    python3 -m venv venv\n    source venv/bin/activate\n\nInstall the development requirements:\n\n    pip install -r requirements.txt\n\nRun the formatter and linter:\n\n    black marulc tests\n    pylint marulc\n\nRun the tests:\n\n    pytest --codeblocks\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MO-RISE/marulc",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "Fredrik Olsson",
    "maintainer_email": "fredrik.x.olsson@ri.se",
    "name": "marulc",
    "package_url": "https://pypi.org/project/marulc/",
    "platform": "",
    "project_url": "https://pypi.org/project/marulc/",
    "project_urls": {
      "Homepage": "https://github.com/MO-RISE/marulc"
    },
    "release_url": "https://pypi.org/project/marulc/0.2.0/",
    "requires_dist": [
      "bitstruct"
    ],
    "requires_python": ">=3.7",
    "summary": "Maritime Unpack-Lookup-Convert",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12130180,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ae6895a1ca09a403bece31ea7c6898a7fb4c59fd6ee1fa0d24169f4a6b0d7e1",
          "md5": "65f9f5bd87a45e98c2a2dbe9a67a6f65",
          "sha256": "ab1f07277b45c42ed0858920fa4a9041de46be6a00c4034d1fb26d5d3fb274c8"
        },
        "downloads": -1,
        "filename": "marulc-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65f9f5bd87a45e98c2a2dbe9a67a6f65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 82159,
        "upload_time": "2021-11-26T07:03:09",
        "upload_time_iso_8601": "2021-11-26T07:03:09.738260Z",
        "url": "https://files.pythonhosted.org/packages/1a/e6/895a1ca09a403bece31ea7c6898a7fb4c59fd6ee1fa0d24169f4a6b0d7e1/marulc-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20b4f0badd0290cd67703b017bf19f077e906ba42d4cde9aa9c40b73c3b0bd37",
          "md5": "a803a39f35dd19f9edfbbfa5daad01c4",
          "sha256": "4a147e383dc32e783ef26c6ba7daa914c68628dabfadc2b5c34289aeb579142a"
        },
        "downloads": -1,
        "filename": "marulc-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a803a39f35dd19f9edfbbfa5daad01c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 78971,
        "upload_time": "2021-11-26T07:03:11",
        "upload_time_iso_8601": "2021-11-26T07:03:11.251984Z",
        "url": "https://files.pythonhosted.org/packages/20/b4/f0badd0290cd67703b017bf19f077e906ba42d4cde9aa9c40b73c3b0bd37/marulc-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ae6895a1ca09a403bece31ea7c6898a7fb4c59fd6ee1fa0d24169f4a6b0d7e1",
        "md5": "65f9f5bd87a45e98c2a2dbe9a67a6f65",
        "sha256": "ab1f07277b45c42ed0858920fa4a9041de46be6a00c4034d1fb26d5d3fb274c8"
      },
      "downloads": -1,
      "filename": "marulc-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65f9f5bd87a45e98c2a2dbe9a67a6f65",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 82159,
      "upload_time": "2021-11-26T07:03:09",
      "upload_time_iso_8601": "2021-11-26T07:03:09.738260Z",
      "url": "https://files.pythonhosted.org/packages/1a/e6/895a1ca09a403bece31ea7c6898a7fb4c59fd6ee1fa0d24169f4a6b0d7e1/marulc-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20b4f0badd0290cd67703b017bf19f077e906ba42d4cde9aa9c40b73c3b0bd37",
        "md5": "a803a39f35dd19f9edfbbfa5daad01c4",
        "sha256": "4a147e383dc32e783ef26c6ba7daa914c68628dabfadc2b5c34289aeb579142a"
      },
      "downloads": -1,
      "filename": "marulc-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a803a39f35dd19f9edfbbfa5daad01c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 78971,
      "upload_time": "2021-11-26T07:03:11",
      "upload_time_iso_8601": "2021-11-26T07:03:11.251984Z",
      "url": "https://files.pythonhosted.org/packages/20/b4/f0badd0290cd67703b017bf19f077e906ba42d4cde9aa9c40b73c3b0bd37/marulc-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}