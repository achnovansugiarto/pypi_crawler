{
  "info": {
    "author": "Vladimir Grankovsky",
    "author_email": "vladi@hidoba.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nThis file is also available as `README.nb` *Mathematica* notebook that replicates all derivations and plots.\n\n# `s-curve-beta`: Efficient Python implementation of the smoothest S-curve robot motion planner ever\n\n1. It's 2022 and you're still using a trapezoid motion profile?\n2. Your robot dog is vibrating like a washing machine?\n3. Tired of the mess in the code because of the multiple piecewise time regions?\n4. Want a simple single-formula smooth motion profile?\n5. Want an S-curve implementation that literally fits in 20 lines of code?\n\nIf you answer \"yes\" to any of the above, read on.\n\nBased on the answer of Cye Waldman (https://math.stackexchange.com/a/2403818) I present this Python package to calculate the S-curve for the robot motion planning with a given maximum velocity and acceleration with a single formula.\n\nHere is the complete motion formula:\n\n$$f\\left( t, p \\right)=\\frac{1}{2}\\left[ 1+\\text{sgn} (x)\\cdot \\frac{B\\left( {1}/{2}, p+1,{t^2} \\right)}{B\\left( {1}/{2}, p+1 \\right)} \\right],$$\n\n$$motionTime(robotVmax, robotAmax,motionRange)=\\\\\nmax\\left[\\frac{2\\cdot3^{3/4}}{\\sqrt{\\pi}}\\cdot\\sqrt\\frac{motionRange}{robotAmax},\\frac{32}{5\\pi}\\cdot\\frac{motionRange}{robotVmax}\\right],$$\n\n$$position(t,robotVmax,robotAmax,motionRange)=\\\\\nmotionRange\\cdot f\\left(\\frac{2 t}{motionTime}-1,2.5\\right),$$\n\nwhere *sgn(x)* is Sign function, numerator and denominator *ùêµs* are the incomplete and complete beta functions, respectively (that's where `beta` comes from in the name), *robotVmax* is the maximum velocity, *robotAmax* is the maximum acceleration and *motionRange* is the absolute value of the motion (from start to end).\n\nHere are 2 examples of motion planning with $motionRange=2$:\n\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/plot1.png)\n\n**The motion curve always has the same shape, while horizontal and vertical scales change.** This property has the following benefits:\n\n1. The curve (function $f(t,2.5)$ for $-1\\le t \\le 1$) can be precomputed, so instead of calculating Beta functions each time it's possible to do the linear interpolation of the precomputed points. They can be programmed in a microcontroller.\n2. The code is much simpler (<20 lines).\n3. The movements appear more natural and human-like.\n\nThe disadvantages are:\n1. **The movements may take longer time to complete for large motions.**\n2. You can't simply put a linear area in the middle of the curve, that would introduce discontinuity and possibly large values in jerk.\n\n\n# Installation\n\nUsing pip (recommended):\n```\npip install s-curve-beta\n```\nFrom source:\n```\ngit clone https://github.com/hidoba/s-curve-beta.git\ncd s-curve-beta\npython setup.py install\n```\n\n# Examples\n\nCalculating robot position at given moments of time:\n```python\nimport scurvebeta as scb\n\n# motion parameters\nmax_velocity = 12\nmax_acceleration = 3\nx0 = -3\nx1 = 10\n\n# Calculate motion time\nmotionTime = scb.motionTime(max_velocity, max_acceleration, abs(x0-x1))\nprint(\"motionTime = \", motionTime, \"seconds\")\n\n# Calculate position at a given time\nt = 2.3\nprint(\"position(\",t,\") = \", scb.sCurve(t, motionTime, x0, x1))\n\n# Calculate multiple positions at given moments of time (faster, most recommended)\nimport numpy as np\nt = np.array([-1,0,1,2,3,motionTime,10])\nprint(\"position(\",t,\") = \", scb.sCurve(t, motionTime, x0, x1))\n```\n\nMaking plots:\n```python\nimport scurvebeta as scb\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plotMotion(max_velocity, max_acceleration, x0, x1):\n    motionTime = scb.motionTime(max_velocity, max_acceleration, abs(x0-x1))\n    dt = 0.08\n    t = np.arange(0,motionTime, dt)\n    pos = scb.sCurve(t, motionTime, x0, x1)\n    vel = np.diff(pos)/dt\n    acc = np.diff(vel)/dt\n    jerk = np.diff(acc)/dt\n\n    fig, axs = plt.subplots(2, 1)\n    axs[0].plot(t, pos)\n    axs[0].set_ylabel('Position')\n    axs[0].grid(True)\n\n    axs[1].plot(t[:-1], vel, label='velocity')\n    axs[1].plot(t[:-2], acc, label='acceleration')\n    axs[1].plot(t[:-3], jerk, label='jerk')\n    axs[1].axhline(y = max_acceleration, color = 'orange', linestyle = '--')\n    axs[1].axhline(y = max_velocity, color = 'blue', linestyle = '--')\n    axs[1].text(0,max_acceleration+0.15,'max_acceleration='+str(max_acceleration))\n    axs[1].text(0,max_velocity+0.15,'max_velocity='+str(max_velocity))\n    axs[1].grid(True)\n    axs[1].set_xlabel('Time')\n    axs[1].legend(handlelength=4)\n\n    fig.tight_layout()\n    plt.show()\n\n# Please note that if you need more accurate velocity / acceleration\n# you should better use the 'true' version of the function instead of the 'interpolated' one.\n# Pay attention at the jerk on the second plot, the sawteeth are because of the imprecision\n# of very small changes of the third derivative. If you just need the position,\n# interpolated function should be just fine.\nplotMotion(6, 3, -3, 10)\nplotMotion(2, 3, -3, 10)\n```\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/pyplot1.png)\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/pyplot2.png)\n\n## Interpolated vs True function\n\nBy default s-curve-beta uses an interpolated version of the *f* function (using 801 points interpolation). It's very fast if used on the arrays and it can be easily adapted for microcontrollers.\n\nYou can use the true function (requires scipy) by importing an optional `scurvebetatrue` module:\n\n```python\nfrom scurvebeta import scurvebetatrue\nprint(scurvebetatrue.sCurve_true(2.3,15,-1,5))\n\nimport scurvebeta as scb\nprint(scb.sCurve(2.3,15,-1,5))\n```\n```\n-0.8849490453964555\n-0.8849435436031998\n```\nCompare the execution speed:\n```python\nimport timeit\nfrom scurvebeta import scurvebetatrue\nimport scurvebeta as scb\nimport numpy as np\n\ndef trueFunction():\n    return scurvebetatrue.sCurve_true(2.3,15,-1,5)\n\ndef trueFunctionArray():\n    return scurvebetatrue.sCurve_true(np.arange(0,15,15/100000),15,-1,5)\n\ndef interpolatedFunction():\n    return scb.sCurve(2.3,15,-1,5)\n\ndef interpolatedFunctionArray():\n    return scb.sCurve(np.arange(0,15,15/100000),15,-1,5)\n\nprint(timeit.timeit('trueFunction()',number=100000, setup=\"from __main__ import trueFunction\"))\n# 0.4408080680000239\n\nprint(timeit.timeit('trueFunctionArray()',number=1, setup=\"from __main__ import trueFunctionArray\"))\n# 0.4047970910000913\n\nprint(timeit.timeit('interpolatedFunction()',number=100000, setup=\"from __main__ import interpolatedFunction\"))\n# 0.381616509999958\n\nprint(timeit.timeit('interpolatedFunctionArray()',number=1, setup=\"from __main__ import interpolatedFunctionArray\"))\n# 0.0019440340000755896\n```\n\nPlots with \"True\" function:\n\n```python\nimport scurvebeta as scb\nfrom scurvebeta import scurvebetatrue\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plotMotionTrue(max_velocity, max_acceleration, x0, x1):\n    motionTime = scb.motionTime(max_velocity, max_acceleration, abs(x0-x1))\n    dt = 0.005\n    t = np.arange(0,motionTime, dt)\n    pos = scurvebetatrue.sCurve_true(t, motionTime, x0, x1)\n    vel = np.diff(pos)/dt\n    acc = np.diff(vel)/dt\n    jerk = np.diff(acc)/dt\n\n    fig, axs = plt.subplots(2, 1)\n    axs[0].plot(t, pos)\n    axs[0].set_ylabel('Position')\n    axs[0].grid(True)\n\n    axs[1].plot(t[:-1], vel, label='velocity')\n    axs[1].plot(t[:-2], acc, label='acceleration')\n    axs[1].plot(t[:-3], jerk, label='jerk')\n    axs[1].axhline(y = max_acceleration, color = 'orange', linestyle = '--')\n    axs[1].axhline(y = max_velocity, color = 'blue', linestyle = '--')\n    axs[1].text(0,max_acceleration+0.15,'max_acceleration='+str(max_acceleration))\n    axs[1].text(0,max_velocity+0.15,'max_velocity='+str(max_velocity))\n    axs[1].grid(True)\n    axs[1].set_xlabel('Time')\n    axs[1].legend(handlelength=4)\n\n    fig.tight_layout()\n    plt.show()\n\nplotMotionTrue(6, 3, -3, 10)\nplotMotionTrue(2, 3, -3, 10)\n```\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/pyplot3.png)\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/pyplot4.png)\n\n# Multiple axes synchronization\n\nTo synchronize multiple axes simply calculate the maximum motion time of all axes and use it for every axis. This will minimize the maximum jerk and acceleration of the initially faster axes, decreasing the vibrations of the robot.\n\n# Derivations\n\nBelow derivations include *Mathematica* code that can be used to replicate them.\n\nThis file is also available as `README.nb` *Mathematica* notebook that replicates all derivations and plots.\n\nThe original *f* function comes from the integration of the [superparabola](https://en.wikipedia.org/wiki/Superparabola), [done](https://math.stackexchange.com/a/2403818) by Cye Waldman. We can prove that his integration is correct:\n\n```mathematica\nf[x_, p_] := \n 1/2 (1 + RealSign[x]*Beta[x^2, 1/2, p + 1]/Beta[1/2, p + 1])\n\nFullSimplify[\n Integrate[(1 - x^2)^p/Beta[1/2, 1 + p], {x, -1, t}] - f[t, p], \n Element[p, Reals] && Element[t, Reals] && 0 <= t < 1 && p > -1]\n\n (* 0 *)\n```\n## Proof that the most optimal $p$ is 2.5\n\nMy suggested value of $p$ is 2.5 which gives the lowest possible absolute jerk, let's see why.\n\nVisualizing derivatives with different values of $p$:\n\n```mathematica\nAnimate[\n Show[\n  Plot[Evaluate@Table[D[f[x, 2.5], {x, i}], {i, 0, 3}], {x, -1, 1}, \n   PlotLegends -> {\"position f(t,2.5)\", \"velocity f'(t,2.5)\", \n     \"acceleration f''(t,2.5)\", \"jerk f'''(t,2.5)\"}, \n   PlotRange -> {-11, 8}, PlotLabel -> \"p = \" ~~ ToString[param]],\n  Plot[Evaluate@Table[D[f[x, param], {x, i}], {i, 0, 3}], {x, -1, 1}, \n   PlotLegends -> (StringJoin[#, \n        \"(t,\" ~~ ToString[param] ~~ \")\"] & /@ {\"position f\", \n       \"velocity f'\", \"acceleration f''\", \"jerk f'''\"}), \n   PlotRange -> All, PlotStyle -> Dashed]\n  ],\n {param, 2.00001, 5, 0.15}]\n```\n\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/plot2.gif)\n\nCalculating largest jerks for different values of the parameter $p$:\n\n```mathematica\njerkValues[param_] := {Limit[D[f[x, param], {x, 3}], x -> 0],\n  Maximize[{D[f[x, param], {x, 3}], -1 <= x <= 1}, x][[1]]}}\n\nparamData = Table[{p, jerkValues[p]}, {p, 2.001, 3, 0.01}];\n\nListLinePlot[\n Abs[Transpose[(Outer[List, {#1}, #2][[1]] & @@@ paramData)]], \n PlotLegends -> {\"|max negative jerk| (at x=0)\", \"max positive jerk\"},\n  Epilog -> {Dashed, InfiniteLine[{2.5, 0}, {0, 1}]}, \n AxesLabel -> {\"p\", \"max jerk\"}]\n```\n\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/plot3.png)\n\nThe best value of the parameter $p$ happens to be 2.5, where the max absolute jerk is the smallest.\n\n### Discussion on $2\\le p<2.5$\n\nIt's possible to achieve **slightly lower maximum robot accelerations** at $2\\le p<2.5$:\n\n```mathematica\nparam = 2;\nShow[\n  Plot[Evaluate@Table[D[f[x, 2.5], {x, i}], {i, 0, 3}], {x, -1, 1}, PlotLegends -> {\"position f(t,2.5)\", \"velocity f'(t,2.5)\", \"acceleration f''(t,2.5)\", \"jerk f'''(t,2.5)\"}, PlotRange -> All], \n  Plot[Evaluate@Table[D[f[x, param], {x, i}], {i, 0, 3}], {x, -1, 1}, PlotLegends -> (StringJoin[#, \"(t,\" ~~ ToString[param] ~~ \")\"] & /@ {\"position f\", \"velocity f'\", \"acceleration f''\", \"jerk f'''\"}), PlotRange -> All, PlotStyle -> Dashed] \n ]\n```\n\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/plot4.png)\n\nValues of $2\\le p<2.5$ can shorten the robot motion time a little bit at the cost of increased maximum jerk hence increased robot vibrations at the beginning and at the end of the motion. I have decided not to implement this at the moment.\n\n## Rescaling function *f* for the particular motion parameters\n\n### 1. Motion time from the maximum velocity constraint\n\nMax velocity at $t=0$:\n\n```mathematica\nmaxVelocity = Limit[D[f[x, 5/2], x], x -> 0]\n```\n\n$$\\frac{16}{5 \\pi}$$\n\nWith the given maximum robot velocity *robotVmax* the shortest motion time can be derived from the equation:\n\n$$robotVmax=\\frac{2\\frac{16}{5\\pi}motionRange}{time}$$\n\nHence,\n\n$$time = \\frac{32}{5 \\pi}\\cdot\\frac{motionRange}{robotVmax}$$\n\n### 2. Motion time from the maximum acceleration constraint\n\nCalculate max acceleration at $p=2.5$:\n\n```mathematica\nFindMaximum[{D[f[x, 5/2], {x, 2}], -1 < x < 0}, x]\n\n(*{1.65399, {x -> -0.5}}*)\n```\n\nMaximum acceleration happens to be at $t=-\\frac{1}{2}$\n\n```mathematica\nD[f[x, 5/2], {x, 2}] /. x -> -1/2\n```\n\n$$\\frac{3\\sqrt3}{\\pi}$$\n\nWith the given maximum robot acceleration *robotAmax* the shortest motion time can be derived from the equation:\n\n$$\\text{robotAmax}=\\frac{4\\frac{3\\sqrt{3}}{\\pi }\\text{motionRange}}{time^2}$$\n\nHence,\n\n$$time=\\frac{2\\cdot3^{3/4}}{\\sqrt{\\pi}}\\cdot\\sqrt\\frac{motionRange}{robotAmax}$$\n\n### 3. Motion time with both constraints\n\nTo consider both maximum velocity and maximum acceleration constraints we have to take the maximum of the above motion times:\n\n$$motionTime=\nmax\\left[\\frac{2\\cdot3^{3/4}}{\\sqrt{\\pi}}\\cdot\\sqrt\\frac{motionRange}{robotAmax},\\frac{32}{5\\pi}\\cdot\\frac{motionRange}{robotVmax}\\right],$$\n\nIn the future I may add a maximum jerk constraint.\n\n### 4. Final motion position formula\n\nWe have to rescale *t* in $f(t,2.5)$ in such a way that the motion would start at $t=0$ and end at $t=motionTime$. Additionally we have to rescale the value of *f* to go from 0 to *motionRange*. After rescaling we get:\n\n$$position(t,robotAmax,motionRange)=\\\\\nmotionRange\\cdot f \\left(\\frac{2 t}{motionTime}-1,2.5 \\right)$$\n\n## Example robot motions limited by acceleration\n\n![](https://github.com/hidoba/s-curve-beta/raw/main/img/plot5.png)\n\n## License\n\nCopyright (c) 2022 Vladimir Grankovsky at Hidoba Research. This work is licensed under an Apache 2.0 license.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hidoba/s-curve-beta",
    "keywords": "S-curve,motion planning,motion,robotics,robot,motor",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "s-curve-beta",
    "package_url": "https://pypi.org/project/s-curve-beta/",
    "platform": null,
    "project_url": "https://pypi.org/project/s-curve-beta/",
    "project_urls": {
      "Homepage": "https://github.com/hidoba/s-curve-beta"
    },
    "release_url": "https://pypi.org/project/s-curve-beta/0.1.2/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Efficient Python implementation of the smoothest S-curve robot motion planner ever",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15653604,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b652f85a9f61c6ecd6a8d0b769c0bf5a631006ac3cfcfb88274066ac36bcb36",
          "md5": "388b2d9f048c04486613764cd51a1f77",
          "sha256": "94dd7a9a639b245b7292b725b246d54157f3ca5b4e7f46aa7c4a57d2f3adedd2"
        },
        "downloads": -1,
        "filename": "s_curve_beta-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "388b2d9f048c04486613764cd51a1f77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18843,
        "upload_time": "2022-11-04T01:47:53",
        "upload_time_iso_8601": "2022-11-04T01:47:53.723810Z",
        "url": "https://files.pythonhosted.org/packages/9b/65/2f85a9f61c6ecd6a8d0b769c0bf5a631006ac3cfcfb88274066ac36bcb36/s_curve_beta-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12a95b8602131d26d33d2be4a5f25de99804beb7377615ec5cd85ba0b5f3ff18",
          "md5": "cdc38f4adc4b8c4f68e942458635bfe5",
          "sha256": "8ff1f26bbe63e2a6f32927be905c19e6143c15560cc549c11927bb9740b93ae8"
        },
        "downloads": -1,
        "filename": "s-curve-beta-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cdc38f4adc4b8c4f68e942458635bfe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18970,
        "upload_time": "2022-11-04T01:47:55",
        "upload_time_iso_8601": "2022-11-04T01:47:55.936031Z",
        "url": "https://files.pythonhosted.org/packages/12/a9/5b8602131d26d33d2be4a5f25de99804beb7377615ec5cd85ba0b5f3ff18/s-curve-beta-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34070c076d26a462d9e9c793fda5abe77d3341b7deff07d1e948c780c92c38fd",
          "md5": "336e3aeb6b3b89c643b5898d1dfdf0cf",
          "sha256": "7662920b61a4ebfdbcab1fa4ac41fb0c8c6bfe306b0bcc6bde1321dd149c05b5"
        },
        "downloads": -1,
        "filename": "s_curve_beta-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "336e3aeb6b3b89c643b5898d1dfdf0cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18998,
        "upload_time": "2022-11-04T10:49:12",
        "upload_time_iso_8601": "2022-11-04T10:49:12.612328Z",
        "url": "https://files.pythonhosted.org/packages/34/07/0c076d26a462d9e9c793fda5abe77d3341b7deff07d1e948c780c92c38fd/s_curve_beta-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "948a2df4e5633eb394f5b3e933b57c66cfdc5c30f1b39e3b3d66fdb8db385502",
          "md5": "d13dbfae96853b4df10a46d34b6149b8",
          "sha256": "ed1dae682cd9162a63aae5e819852f34413309faade547744cc315901c949e14"
        },
        "downloads": -1,
        "filename": "s-curve-beta-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d13dbfae96853b4df10a46d34b6149b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19144,
        "upload_time": "2022-11-04T10:49:14",
        "upload_time_iso_8601": "2022-11-04T10:49:14.419581Z",
        "url": "https://files.pythonhosted.org/packages/94/8a/2df4e5633eb394f5b3e933b57c66cfdc5c30f1b39e3b3d66fdb8db385502/s-curve-beta-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34070c076d26a462d9e9c793fda5abe77d3341b7deff07d1e948c780c92c38fd",
        "md5": "336e3aeb6b3b89c643b5898d1dfdf0cf",
        "sha256": "7662920b61a4ebfdbcab1fa4ac41fb0c8c6bfe306b0bcc6bde1321dd149c05b5"
      },
      "downloads": -1,
      "filename": "s_curve_beta-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "336e3aeb6b3b89c643b5898d1dfdf0cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18998,
      "upload_time": "2022-11-04T10:49:12",
      "upload_time_iso_8601": "2022-11-04T10:49:12.612328Z",
      "url": "https://files.pythonhosted.org/packages/34/07/0c076d26a462d9e9c793fda5abe77d3341b7deff07d1e948c780c92c38fd/s_curve_beta-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "948a2df4e5633eb394f5b3e933b57c66cfdc5c30f1b39e3b3d66fdb8db385502",
        "md5": "d13dbfae96853b4df10a46d34b6149b8",
        "sha256": "ed1dae682cd9162a63aae5e819852f34413309faade547744cc315901c949e14"
      },
      "downloads": -1,
      "filename": "s-curve-beta-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d13dbfae96853b4df10a46d34b6149b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19144,
      "upload_time": "2022-11-04T10:49:14",
      "upload_time_iso_8601": "2022-11-04T10:49:14.419581Z",
      "url": "https://files.pythonhosted.org/packages/94/8a/2df4e5633eb394f5b3e933b57c66cfdc5c30f1b39e3b3d66fdb8db385502/s-curve-beta-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}