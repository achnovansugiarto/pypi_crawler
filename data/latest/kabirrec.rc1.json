{
  "info": {
    "author": "Seyyed Mohammad Hejazi Hoseini",
    "author_email": "smohammadhejazi78@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![KabirRec](https://drive.google.com/uc?export=view&id=1nBP3-89Hadr-BpFCgWeH_QNY8XhIr2f5 \"KabirRec\")\r\n\r\n# Overview\r\n**KabirRec** is a Python recommendation service that uses **surprise** and **scikit-learn**.\r\n\r\nIt has three main services:\r\n- Cold Start Recommendation: Recommends the most popular items\r\n- Similar Items Recommendation: Recommends similar items to the item given\r\n- User Specific Recommendation: Recommends the best items to a user based on their history.\r\n\r\n# Getting started\r\nIts easy to use each service, first you need to create the RecommendationService object. Then read your csv data. We use ml-100k which has user info, user ratings, item info. We need to specify the columns as well as each csv separators.\r\n```\r\nrecommendation_service = RecommendationService()\r\n\r\ndata_set = \"ml-100k\"\r\nrecommendation_service.read_csv_data(\r\n\tuser_info_path=\"../dataset/{}/u.user\".format(data_set),\r\n\tuser_ratings_path=\"../dataset/{}/u.data\".format(data_set),\r\n\titem_info_path=\"../dataset/{}/u.item\".format(data_set),\r\n\tuser_info_columns=[\"user_id\", \"age\", \"gender\", \"occupation\", \"zip_code\"],\r\n\tuser_ratings_columns=[\"user_id\", \"item_id\", \"rating\", \"timestamp\"],\r\n\titem_info_columns=[\"movie_id\", \"movie_title\", \"release_date\", \"video_release_date\", \"imdb_url\", \"unknown\",\r\n\t\t\t\t  \"action\", \"adventure\", \"animation\", \"children's\", \"comedy\", \"crime\", \"documentary\",\r\n\t\t\t\t  \"drama\", \"fantasy\", \"film_noir\", \"horror\", \"musical\", \"mystery\", \"romance\", \"sci-fi\",\r\n\t\t\t\t  \"thriller\", \"war\", \"western\"],\r\n\tuser_info_sep=\"|\", user_ratings_sep=\"\\t\", item_sep=\"|\"\r\n)\r\n```\r\n\r\nThen you can call on generators for services to get the service object. First call the fit function and then you can use their prediction services.\r\n## User Specific Example\r\n```\r\nuser_specific = recommendation_service.user_specific_module(options={\"verbose\": True, \"k\": 30, \"k_start\": 20, \"k_end\": 40})\r\nuser_specific.fit()\r\nuser_specific.draw_clusters_graph(\"../examples_output/user_specific_plot.png\")\r\nprediction_rating = user_specific.recommend(2, 4)\r\nprint(prediction_rating)\r\nprediction_rating = user_specific.predict_rating(1, 1)\r\nprint(prediction_rating.est)\r\n```\r\nOutput:\r\n```\r\nFitting the algorithm...\r\nFinding optimal cluster...\r\nOptimal cluster k=30 found.\r\nClustering with k=30...\r\nClustering done.\r\nBuilding tables...\r\nTables are built.\r\nFitting is done.\r\n[(1189, 'Prefontaine (1997)', 5), (1500, 'Santa with Muscles (1996)', 5), (814, 'Great Day in Harlem, A (1994)', 5), (1536, 'Aiqing wansui (1994)', 5)]\r\n3.603819651096398\r\n```\r\n![Clusters Info](https://drive.google.com/uc?export=view&id=1Fxe-WL5qYtz85ths701X4ZZzLdl0p7WL \"Clusters Info\")\r\n## Similar Item Example\r\n```\r\nsimilar_items = recommendation_service.similar_items_module(options={\"algo\": \"KNNBasic\", \"verbose\": True})\r\nsimilar_items.fit()\r\nitems = similar_items.recommend(\"Toy Story (1995)\", n=5)\r\nfor movie in items:\r\n\tprint(movie)\r\n```\r\nOutput:\r\n```\r\nFitting the algorithm...\r\nEstimating biases using als...\r\nComputing the pearson_baseline similarity matrix...\r\nDone computing similarity matrix.\r\nFitting is done.\r\nFinding 5 nearest items...\r\n5 nearest items found.\r\n(588, 'Beauty and the Beast (1991)')\r\n(174, 'Raiders of the Lost Ark (1981)')\r\n(845, 'That Thing You Do! (1996)')\r\n(71, 'Lion King, The (1994)')\r\n(928, 'Craft, The (1996)')\r\n```\r\n## Cold Start Example\r\n```\r\ncold_start = recommendation_service.cold_start_module(options={\"verbose\": True})\r\ncold_start.fit()\r\nitems = cold_start.recommend(5)\r\nfor movie in items:\r\n\tprint(movie)\r\n```\r\nOutput:\r\n```\r\nRanking items...\r\nAll items are ranked.\r\n(50, 'Star Wars (1977)', 2541)\r\n(100, 'Fargo (1996)', 2111)\r\n(181, 'Return of the Jedi (1983)', 2032)\r\n(258, 'Contact (1997)', 1936)\r\n(174, 'Raiders of the Lost Ark (1981)', 1786)\r\n```\r\n## API Server\r\n**/api_server** folder contains an API server designed to use Kabirrec as a live service. It can load database, fit the algorithm and use them live by sending HTTP request to it's different routes.\r\n\r\nEach route takes a post request with a JSON object as it's options and responds a JSON object. There are lots of options that can be used to further optimize the algorithm to your own needs but if none is given, the default setting will be applied.\r\n\r\nThese routes and their JSON options are as follows:\r\nNotes: \r\n- All the routes begin with the server name:port and then the route\r\n- All the routes require POST request.\r\n- The default value is written in parentheses.\r\n\r\nFor configuring sim_options and bsl_options please check the following [link](https://surprise.readthedocs.io/en/stable/prediction_algorithms.html# \"configuration options\").\r\n\r\nRoutes and options:\r\n- **/load-csv** : Load csv database (it should be in the format of MovieLens ml-100k)\r\n    - name: path of the database (\"ml-100k\")\r\n\t- url: path of the database (None)\r\n\t- extract: path of the database (false)\r\n\t- verbose: output logs (false)\r\n    \r\n\treturns JSON object {\"message\": \"message content\"}\r\n\r\n\r\n- **/start-coldstart** : Start ColdStart module\r\n\t- verbose: output logs (false)\r\n\r\n\treturns JSON object {\"message\": \"message content\"}\r\n\r\n\r\n- **/coldstart**: Use ColdStart module\r\n\t- n: number of item recommendations (10)\r\n\t- verbose: output logs (false)\r\n\r\n\treturns JSON object {\"items_list\": [list of popular items]}\r\n\r\n\r\n- **/start-similaritems** : Start SimilarItems module\r\n\t- algo: path of the database (\"knnbasic\")\r\n\t- k: The (max) number of neighbors to take into account for aggregation (40)\r\n\t- min_k: The minimum number of neighbors to take into account for aggregation. If there are not enough neighbors, the prediction is set to the global mean of all ratings (1)\r\n\t- sim_options: A dictionary of options for the similarity measure ({\"name\": \"pearson_baseline\", \"user_based\": False})\r\n\t- bsl_options: A dictionary of options for the baseline estimates computation. Only when algo is KNNBaseline (empty dict {})\r\n\t- verbose: output logs (false)\r\n\r\n\treturns JSON object {\"message\": \"message content\"}\r\n\r\n\r\n- **/similaritems** : Use SimilarItems module\r\n\t- item_name: name of the item (must be given)\r\n\t- n: number of item recommendations (10)\r\n\r\n\treturns JSON object {\"items_list\": [list of popular items]}\r\n\r\n\r\n- **/start-userspecific** : Start UserSpecific module\r\n\t- k: number of the manual clusters, if given k_start and k_end are not taken into account (None)\r\n\t- k_start: start number of the range to look for optimal cluster, range[k_start, k_end] (2)\r\n\t- k_end: end number of the range to look for optimal cluster, range[k_start, k_end] (number of users / 2)\r\n\t- verbose: output logs (false)\r\n\r\n\treturns JSON object {\"message\": \"message content\"}\r\n\r\n\r\n- **/userspecific** : Use UserSpecific module\r\n\t- item_name: name of the user (must be given)\r\n\t- n: number of item recommendations (10)\r\n\r\n\treturns JSON object {\"items_list\": [list of popular items]}\r\n\r\n\r\n## More Information\r\nFor more information on how to use the library, look at comments in the codes and Surprise library [website](https://surpriselib.com \"surprise library website\").\r\n\r\n# Installation\r\nYou can use pip (you'll need a C compiler and numpy library):\r\n```\r\n$ pip install kabirrec\r\n```\r\nYou can also clone the repo and build the library:\r\n```\r\n$ pip install numpy cython\r\n$ git clone https://github.com/smohammadhejazi/recommendation-as-a-service\r\n$ cd recommendation-as-a-service\r\n$ python setup.py install\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smohammadhejazi/recommendation-as-a-service",
    "keywords": "recommendation-service,recommendation-system,recommender-system",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kabirrec",
    "package_url": "https://pypi.org/project/kabirrec/",
    "platform": null,
    "project_url": "https://pypi.org/project/kabirrec/",
    "project_urls": {
      "Homepage": "https://github.com/smohammadhejazi/recommendation-as-a-service"
    },
    "release_url": "https://pypi.org/project/kabirrec/1.0.11/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A recommendation system with cold start, similar items and user specific recommendation",
    "version": "1.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16906936,
  "releases": {
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bd6ac34ea14524a65e16d91bc728e1daa3ff096870cee77130048e895843988",
          "md5": "88f93fed9bdecfbe1fe0cb2def5f703e",
          "sha256": "2f0a4004dc56054f05174af3dc5ff71e69b4204b2f4575a224235e9ff4dc72dc"
        },
        "downloads": -1,
        "filename": "kabirrec-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "88f93fed9bdecfbe1fe0cb2def5f703e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16727390,
        "upload_time": "2023-02-17T19:20:16",
        "upload_time_iso_8601": "2023-02-17T19:20:16.671979Z",
        "url": "https://files.pythonhosted.org/packages/0b/d6/ac34ea14524a65e16d91bc728e1daa3ff096870cee77130048e895843988/kabirrec-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bd6ac34ea14524a65e16d91bc728e1daa3ff096870cee77130048e895843988",
        "md5": "88f93fed9bdecfbe1fe0cb2def5f703e",
        "sha256": "2f0a4004dc56054f05174af3dc5ff71e69b4204b2f4575a224235e9ff4dc72dc"
      },
      "downloads": -1,
      "filename": "kabirrec-1.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "88f93fed9bdecfbe1fe0cb2def5f703e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16727390,
      "upload_time": "2023-02-17T19:20:16",
      "upload_time_iso_8601": "2023-02-17T19:20:16.671979Z",
      "url": "https://files.pythonhosted.org/packages/0b/d6/ac34ea14524a65e16d91bc728e1daa3ff096870cee77130048e895843988/kabirrec-1.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}