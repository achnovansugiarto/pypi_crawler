{
  "info": {
    "author": "Marius Juston",
    "author_email": "marius.juston@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Image Recognition"
    ],
    "description": "# AutoCNN\n\nThis project is an implementation of the paper [\"Automatically Designing CNN Architectures Using\nGenetic Algorithm for Image Classification\"](https://arxiv.org/pdf/1808.03818.pdf) \n\n## How it works\n\nThis is an algorithm that is able to full automatically find an optimal CNN (Convolutional Neural Network) architecture.\n\nThere are two main building blocks to this algorithm:\n### Skip Layer\n\n\n![Skip Layer Image](./images/skip_layer.jpg)\n\nEach Skip Layer comprises of:\n\nThe input first passes through:\n1. A convolution layer\n2. A batch normalization\n3. A ReLU activation layer\n4. Another convolution layer\n5. Another batch normalization layer\n\n(all of the convolution layers have a kernel size of 3x3 and a stride of 1x1, the filter size is randomly chosen as a power of 2)\n\nThe input also passes through a convolution of kernel and stride size 1x1 with a filter size being the same as the last convolution.\nThis \"reshapes\" the input in order to allow for element wise adding\n\nThe two outputs are combined in an add operation and then passed through a ReLU activation function\n\n### Pooling Layer\n\nThis is either a Max Pooling or a Average Pooling layer, the kernel and the stride size are 2x2\n\n### Layers\n\n| Layer Type         | Layer Documentation                                                                                                 |\n| :----------------: | :-----------------------------------------------------------------------------------------------------------------: |\n| Convolution        | [tf.keras.layers.Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D)                         |\n| MaxPooling         | [tf.keras.layers.MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D)                   |\n| AveragePooling     | [tf.keras.layers.AveragePooling2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/AveragePooling2D)     |\n| Activation         | [tf.keras.layers.Activation](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Activation)                 |\n| Add                | [tf.keras.layers.add](https://www.tensorflow.org/api_docs/python/tf/keras/layers/add)                               |\n| BatchNormalization | [tf.keras.layers.BatchNormalization](https://www.tensorflow.org/api_docs/python/tf/keras/layers/BatchNormalization) |\n\n### Steps\nTo do this the algorithm follows these steps:\n\n1. Create an random initial population\n2. Evaluate the fitness of the population by training the CNN\n3. Generating offsprings\n    - 2 different CNN in the population are selected using a [Binary Tournament Selection](https://en.wikipedia.org/wiki/Tournament_selection) method\n    - Given a certain probability a crossover between the two parents might happen\n        - the two CNNs are split into two and two new CNN are created by mixing the parent \"genes\"\n    -After all the new offsprings are created go through each of them and given a certain probability mutate the offspring\n        - a mutation are:\n            - add a skip layer: increases the complexity and depth of the network\n            - add a pooling layer: increases the depth but might decrease the complexity due to the nature of pooling\n            - remove a layer: reduce complexity and depth\n            - randomize a layer: changes the parameters of a layer (i.e filter size, max or mean pooling)\n4. Evaluate the offspring fitness\n5. From the offsprings and the parent population generate a new population\n    - Until N CNN have been selected:\n        - randomly select 2 CNN, add the one with the highest fitness to the list\n    - Look at if the CNN from the offspring and parent population was placed in the new population\n        - if it is not replace the worst CNN by the best\n6. Repeat step 2. \n\n### Example\n\n```python\nimport os\n\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' # Removes Tensorflow debuggin ouputs\n\nimport tensorflow as tf\n\ntf.get_logger().setLevel('INFO') # Removes Tensorflow debugging ouputs\n\nfrom auto_cnn.gan import AutoCNN\n\nimport random\n\n# Sets the random seeds to make testing more consisent\nrandom.seed(42)\ntf.random.set_seed(42)\n\n\ndef mnist_test():\n    # Loads the data as test and train \n    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n    # Puts the data in a dictionary for the algorithm to use  \n    data = {'x_train': x_train, 'y_train': y_train, 'x_test': x_test, 'y_test': y_test}\n\n    # Sets the wanted parameters  \n    a = AutoCNN(population_size=5, maximal_generation_number=4, dataset=data, epoch_number=5)\n\n    # Runs the algorithm until the maximal_generation_number has been reached\n    best_cnn = a.run()\n    print(best_cnn)\n\nif __name__ == '__main__':\n    mnist_test()\n```\n\nGiven these parameters the structure that was chosen was this:\n\n![MNIST Result](./images/mnist.jpg)\n\nCNN: 128-64\n\nScore (Test Accuracy): 0.9799000024795532\n\n## Contributing\n\nIf you have any idea on improving the performance, adding more customizations or correcting mistakes, please make a pull request or create an issue. I'd be happy to accept any contributions!\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Marius-Juston/AutoCNN",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "auto-cnn",
    "package_url": "https://pypi.org/project/auto-cnn/",
    "platform": "",
    "project_url": "https://pypi.org/project/auto-cnn/",
    "project_urls": {
      "Homepage": "https://github.com/Marius-Juston/AutoCNN"
    },
    "release_url": "https://pypi.org/project/auto-cnn/1.0/",
    "requires_dist": [
      "tensorflow (>=2.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Automatically designing CNN architectures using Genetic Algorithm for Image Classification implementation",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8730526,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f803cfe04e12ed154edc49906fb48d7fc7768b6ca514cb7d7e1823af674bbcb",
          "md5": "9b4ec15631444b6becd1cfdc3b438602",
          "sha256": "173c018d97320bcc988fe7981b194b7649df30f79782dac125f55eb70aaea5ce"
        },
        "downloads": -1,
        "filename": "auto_cnn-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b4ec15631444b6becd1cfdc3b438602",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12210,
        "upload_time": "2020-11-23T18:29:30",
        "upload_time_iso_8601": "2020-11-23T18:29:30.399482Z",
        "url": "https://files.pythonhosted.org/packages/0f/80/3cfe04e12ed154edc49906fb48d7fc7768b6ca514cb7d7e1823af674bbcb/auto_cnn-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "209e1cda91a0b36298f5f1562e1b6cf657702e1a66709742fd1e944727e4efe1",
          "md5": "5c952aa75eea01a0ecfd8bb07ba1fa31",
          "sha256": "a3c17dc16979624abf1b0bc3d939782d503d791a529c4011ef54e969d64d2331"
        },
        "downloads": -1,
        "filename": "auto_cnn-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c952aa75eea01a0ecfd8bb07ba1fa31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12190,
        "upload_time": "2020-11-23T18:29:31",
        "upload_time_iso_8601": "2020-11-23T18:29:31.358991Z",
        "url": "https://files.pythonhosted.org/packages/20/9e/1cda91a0b36298f5f1562e1b6cf657702e1a66709742fd1e944727e4efe1/auto_cnn-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f803cfe04e12ed154edc49906fb48d7fc7768b6ca514cb7d7e1823af674bbcb",
        "md5": "9b4ec15631444b6becd1cfdc3b438602",
        "sha256": "173c018d97320bcc988fe7981b194b7649df30f79782dac125f55eb70aaea5ce"
      },
      "downloads": -1,
      "filename": "auto_cnn-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b4ec15631444b6becd1cfdc3b438602",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12210,
      "upload_time": "2020-11-23T18:29:30",
      "upload_time_iso_8601": "2020-11-23T18:29:30.399482Z",
      "url": "https://files.pythonhosted.org/packages/0f/80/3cfe04e12ed154edc49906fb48d7fc7768b6ca514cb7d7e1823af674bbcb/auto_cnn-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "209e1cda91a0b36298f5f1562e1b6cf657702e1a66709742fd1e944727e4efe1",
        "md5": "5c952aa75eea01a0ecfd8bb07ba1fa31",
        "sha256": "a3c17dc16979624abf1b0bc3d939782d503d791a529c4011ef54e969d64d2331"
      },
      "downloads": -1,
      "filename": "auto_cnn-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5c952aa75eea01a0ecfd8bb07ba1fa31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12190,
      "upload_time": "2020-11-23T18:29:31",
      "upload_time_iso_8601": "2020-11-23T18:29:31.358991Z",
      "url": "https://files.pythonhosted.org/packages/20/9e/1cda91a0b36298f5f1562e1b6cf657702e1a66709742fd1e944727e4efe1/auto_cnn-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}