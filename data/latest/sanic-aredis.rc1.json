{
  "info": {
    "author": "hsz",
    "author_email": "hsz1273327@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Documentation :: Sphinx"
    ],
    "description": "\r\nsanic-aredis\r\n===============================\r\n\r\nversion: 0.0.6\r\n\r\nauthor: hsz\r\n\r\nemail: hsz1273327@gmail.com\r\n\r\nFeature\r\n----------------------\r\n* 使用python的原生协程\r\n* 使用aredis访问redis,与aredis接口基本一致\r\n* 支持多db多uri,一个应用往往使用不止一个数据库\r\n* 支持session,sanic一般都会用多个worker运行,因此基于内存的session基本是行不通的.redis刚好可以用来存session\r\n* 支持cache,用来缓存比较重的任务的结果,如果我们有的任务比较重,那么我们可以让它自己运算,然后存在redis中,\r\n* 支持channel,redis自带发布订阅模式\r\n\r\n\r\nInstall\r\n--------------------------------\r\n\r\n- ``python -m pip install sanic-aredis``\r\n\r\n\r\nUsage\r\n---------------------------------\r\n\r\n不同的功能是用不同类,但用法接近\r\n\r\n* redis,app中需要有配置`REDIS_SETTINGS`,它必须是一个由名字,uri组成的字典,也可以使用`SetConfig(app, **confs)`类方法来设置该参数\r\n* session,app中需要有配置`REDIS_SESSION_URI`,它必须是一个uri字符串,也可以使用`SetConfig(app, uri)`类方法来设置该参数\r\n* cache,app中需要有配置`REDIS_CACHE_SETTINGS`,它必须是一个由名字,uri组成的字典,也可以使用`SetConfig(app, **confs)`类方法来设置该参数\r\n* channel,app中需要有配置`REDIS_CHANNEL_SETTINGS`,它必须是一个由名字,(uri,ignore_subscribe_messages:bool)组成的字典,也可以使用`SetConfig(app, **confs)`类方法来设置该参数\r\n\r\n初始化完成后就可在app的对应的元素中访问到他们了\r\n\r\n* reids:app.redis[name]\r\n* session:app.session,也可以使用request['session']来获取\r\n* cache:app.caches[name]\r\n* channels:app.channels[name]\r\n\r\n\r\nExample\r\n-------------------------------\r\n\r\n1. redis\r\n\r\n.. code:: python\r\n\r\n    from sanic import Sanic, response\r\n    from sanic.response import json\r\n    # import aioredis\r\n    from sanic_redis import Redis,Namespace\r\n    import ujson\r\n    app = Sanic('redis_test')\r\n    #redis_pool = aredis.ConnectionPool(host='localhost', port=6379, db=0)\r\n    Redis.SetConfig(app,test=\"redis://localhost:6379/1\")\r\n    Redis(app)\r\n    appspace = Namespace(app.name)\r\n\r\n    @app.get(\"/test-my-key/<key>\")\r\n    async def handle(request,key):\r\n        val = await request.app.redis[\"test\"].get(appspace(key))\r\n        return response.text(val.decode('utf-8'))\r\n\r\n    @app.post(\"/test-my-key\")\r\n    async def handle(request):\r\n        doc = request.json\r\n        for k,v in doc.items():\r\n            await request.app.redis[\"test\"].set(appspace(k), v)\r\n        return json({\"result\":True})\r\n\r\n    if __name__ == '__main__':\r\n        app.run(host=\"0.0.0.0\", port=8000)\r\n\r\n\r\n2. session\r\n\r\n.. code:: python\r\n\r\n    from sanic import Sanic, response\r\n    from sanic.response import json,text\r\n    # import aioredis\r\n    from sanic_redis import Session\r\n    import ujson\r\n    app = Sanic('redis_session_test')\r\n\r\n    Session.SetConfig(app,\"redis://localhost:6379/1\")\r\n    Session(app)\r\n\r\n    @app.route(\"/\")\r\n    async def test(request):\r\n        # interact with the session like a normal dict\r\n        if not request['session'].get('foo'):\r\n            request['session']['foo'] = 0\r\n\r\n        request['session']['foo'] += 1\r\n        response = text(request['session']['foo'])\r\n        return response\r\n\r\n    if __name__ == \"__main__\":\r\n        app.run(host=\"0.0.0.0\", port=8000, debug=True)\r\n\r\n3. cache\r\n\r\n.. code:: python\r\n\r\n    from sanic import Sanic, response\r\n    from sanic.response import json\r\n    # import aioredis\r\n    from sanic_redis import Cache\r\n    import time\r\n\r\n    app = Sanic('redis_test')\r\n\r\n    def expensive_work(data):\r\n        \"\"\"some work that waits for io or occupy cpu\"\"\"\r\n        time.sleep(2)\r\n        return data\r\n\r\n    Cache.SetConfig(app,test_cache=\"redis://localhost:6379/1\")\r\n    Cache(app)\r\n\r\n\r\n    @app.post(\"/test-my-key\")\r\n    async def handle(request):\r\n        data = request.json\r\n        result = await request.app.caches[\"test_cache\"].set('example_key', expensive_work(data), data)\r\n        return json({\"result\":request.app.caches[\"test_cache\"]._gen_identity('example_key', data)})\r\n\r\n    @app.get(\"/test-my-key/<key>\")\r\n    async def handle(request,key):\r\n        res = await request.app.caches[\"test_cache\"].get_by_key(key)\r\n        return json(res)\r\n\r\n\r\n\r\n    if __name__ == '__main__':\r\n        app.run(host=\"0.0.0.0\", port=8000)\r\n\r\n\r\n4. channel\r\n\r\n.. code:: python\r\n\r\n    from sanic import Sanic, response\r\n    from sanic.response import json, text\r\n    # import aioredis\r\n    from sanic_redis import Broadcast\r\n    import time\r\n\r\n    app = Sanic('redis_channel_test')\r\n\r\n\r\n    Broadcast.SetConfig(app,test_channels=(\"redis://localhost:6379/1\",True))\r\n    Broadcast(app)\r\n\r\n    thread = None\r\n\r\n\r\n    def my_handler(x):\r\n        print(\"my_handler\")\r\n        print(x)\r\n\r\n\r\n    @app.listener(\"before_server_start\")\r\n    async def sub(app, loop):\r\n        await app.channels[\"test_channels\"].subscribe(my_handler)\r\n        global thread\r\n        print(\"befor\")\r\n        thread = app.channels[\"test_channels\"].sub_in_thread(daemon=True)\r\n    @app.listener(\"before_server_stop\")\r\n    async def sub_close(app, loop):\r\n        global thread\r\n        thread.stop()\r\n        print(\"after\")\r\n\r\n    @app.post(\"/test-my-key\")\r\n    async def handle(request):\r\n        data = request.json\r\n        result = await app.channels[\"test_channels\"].publish(data[\"msg\"])\r\n        return json({\"result\":'ok'})\r\n\r\n    if __name__ == '__main__':\r\n        app.run(host=\"0.0.0.0\", port=8000)\r\n\r\n5. 使用channel配合websocket\r\n\r\n服务端:\r\n\r\n.. code:: python\r\n\r\n    from sanic import Sanic\r\n    from sanic.response import file\r\n    from sanic_redis import Broadcast\r\n    import asyncio\r\n    import time\r\n    app = Sanic(\"test_ws_channel\")\r\n    Broadcast.SetConfig(app,test_channels=(\"redis://localhost:6379/1\",True))\r\n    Broadcast(app)\r\n    thread = None\r\n\r\n    @app.listener(\"before_server_start\")\r\n    async def pub(app, loop):\r\n        async def publish(client):\r\n            import time\r\n            import asyncio\r\n            while True:\r\n                await asyncio.sleep(2)\r\n                now = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\r\n                await client.publish('test message {time}'.format(time = now))\r\n        global thread\r\n        thread = app.channels[\"test_channels\"].pub_in_thread(publish,daemon=True)\r\n\r\n    @app.listener(\"after_server_stop\")\r\n    async def pub_close(app, loop):\r\n        global thread\r\n        thread.stop()\r\n        print(\"after\")\r\n\r\n    @app.route('/')\r\n    async def index(request):\r\n        return await file('websocket.html')\r\n\r\n\r\n    @app.websocket('/feed')\r\n    async def feed(request, ws):\r\n        assert app.channels[\"test_channels\"].subscribed is False\r\n        await app.channels[\"test_channels\"].subscribe()\r\n\r\n        while app.channels[\"test_channels\"].subscribed:\r\n            data = await app.channels[\"test_channels\"].get_message()\r\n            if data is not None:\r\n                await ws.send(data.get(\"data\"))\r\n\r\n    if __name__ == '__main__':\r\n        app.run(host=\"0.0.0.0\", port=7000)\r\n\r\n\r\n客户端:\r\n\r\n.. code:: html\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n            <title>WebSocket demo</title>\r\n        </head>\r\n        <body>\r\n            <script>\r\n                var ws = new WebSocket('ws://localhost:7000/feed'),\r\n                    messages = document.createElement('ul');\r\n                ws.onmessage = function (event) {\r\n                    var messages = document.getElementsByTagName('ul')[0],\r\n                        message = document.createElement('li'),\r\n                        content = document.createTextNode('Received: ' + event.data);\r\n                    message.appendChild(content);\r\n                    messages.appendChild(message);\r\n                };\r\n                document.body.appendChild(messages);\r\n            </script>\r\n        </body>\r\n    </html>\r\n\r\n\r\n\r\nTODO\r\n-------------------------------\r\n\r\n* Queue 使用list构建队列系统，使用sorted set甚至可以构建有优先级的队列系统。\r\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sanic-Extensions/sanic-redis",
    "keywords": "redis",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanic-aredis",
    "package_url": "https://pypi.org/project/sanic-aredis/",
    "platform": "",
    "project_url": "https://pypi.org/project/sanic-aredis/",
    "project_urls": {
      "Homepage": "https://github.com/Sanic-Extensions/sanic-redis"
    },
    "release_url": "https://pypi.org/project/sanic-aredis/0.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "simple tools",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3094766,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19b2b824205fbcc8a82ec34db9c510d0d26026aec8e6e2324187cd5261d886e6",
          "md5": "7edbd250ccd22b3659de4685b55b640a",
          "sha256": "19bfe33878aacd6f6fec1d2a9c36b86004414d4953ad7dc0d1b5dba7e8a40a36"
        },
        "downloads": -1,
        "filename": "sanic_aredis-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7edbd250ccd22b3659de4685b55b640a",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "requires_python": null,
        "size": 13753,
        "upload_time": "2017-08-14T05:52:24",
        "upload_time_iso_8601": "2017-08-14T05:52:24.545376Z",
        "url": "https://files.pythonhosted.org/packages/19/b2/b824205fbcc8a82ec34db9c510d0d26026aec8e6e2324187cd5261d886e6/sanic_aredis-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120faac50f36227aaca3e17069967f8d9babae289c6659f58803c9dcb6faf866",
          "md5": "d855362f6b2421054da9da7ef3c85eed",
          "sha256": "de89845f0c46ea3fe34a7455f00433ab94e3931f75148bddadcdf6f01c3230f3"
        },
        "downloads": -1,
        "filename": "sanic-aredis-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d855362f6b2421054da9da7ef3c85eed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10148,
        "upload_time": "2017-08-14T05:52:20",
        "upload_time_iso_8601": "2017-08-14T05:52:20.840673Z",
        "url": "https://files.pythonhosted.org/packages/12/0f/aac50f36227aaca3e17069967f8d9babae289c6659f58803c9dcb6faf866/sanic-aredis-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19b2b824205fbcc8a82ec34db9c510d0d26026aec8e6e2324187cd5261d886e6",
        "md5": "7edbd250ccd22b3659de4685b55b640a",
        "sha256": "19bfe33878aacd6f6fec1d2a9c36b86004414d4953ad7dc0d1b5dba7e8a40a36"
      },
      "downloads": -1,
      "filename": "sanic_aredis-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7edbd250ccd22b3659de4685b55b640a",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 13753,
      "upload_time": "2017-08-14T05:52:24",
      "upload_time_iso_8601": "2017-08-14T05:52:24.545376Z",
      "url": "https://files.pythonhosted.org/packages/19/b2/b824205fbcc8a82ec34db9c510d0d26026aec8e6e2324187cd5261d886e6/sanic_aredis-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "120faac50f36227aaca3e17069967f8d9babae289c6659f58803c9dcb6faf866",
        "md5": "d855362f6b2421054da9da7ef3c85eed",
        "sha256": "de89845f0c46ea3fe34a7455f00433ab94e3931f75148bddadcdf6f01c3230f3"
      },
      "downloads": -1,
      "filename": "sanic-aredis-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d855362f6b2421054da9da7ef3c85eed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10148,
      "upload_time": "2017-08-14T05:52:20",
      "upload_time_iso_8601": "2017-08-14T05:52:20.840673Z",
      "url": "https://files.pythonhosted.org/packages/12/0f/aac50f36227aaca3e17069967f8d9babae289c6659f58803c9dcb6faf866/sanic-aredis-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}