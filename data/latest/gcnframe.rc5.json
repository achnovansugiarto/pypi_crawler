{
  "info": {
    "author": "WANG Ruohan",
    "author_email": "ruohawang2-c@my.cityu.edu.hk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# a GP-GCN framework for genomics\nThis is a python package for genomics study with a GP-GCN (Gapped Pattern Graph Convolutional Networks) framework.\n\n![image](https://github.com/deepomicslab/GCNFrame/blob/master/GCNframework.png)\n\n# Getting started\n\n## Prerequisite\n+ cython\n+ numpy\n+ Biopython\n+ editdistance\n+ pytorch 1.7.1\n+ pytorch\\_geometric 1.7.0\n\n## Install\n```shell\npip install GCNFrame\n```\nOr\n```shell\ngit clone https://github.com/deepomicslab/GCNFrame.git\ncd GCNFrame/GCNFrame\npython setup.py build_ext --inplace\ncd ../\n```\n\n## Examples\nThe framework makes it easy to train your customized models with a few lines of codes. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1VtNE0Pk0fM9b3N_WfbKc1x2IqDu8Ny02?usp=sharing).\n```Python\n# This is an example to train a two-classes model.\nfrom GCNFrame import Biodata, GCNmodel\nimport torch\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\ndata = Biodata(fasta_file=\"example_data/nature_2017.fasta\", \n        label_file=\"example_data/lifestyle_label.txt\",\n        feature_file=\"example_data/CDD_protein_feature.txt\")\ndataset = data.encode(thread=20)\nmodel = GCNmodel.model(label_num=2, other_feature_dim=206).to(device)\nGCNmodel.train(dataset, model, weighted_sampling=True)\nGCNmodel.test(model_name=\"GCN_model.pt\", fasta_file=\"example_data/nature_2017.fasta\", feature_file=\"example_data/CDD_protein_feature.txt\")\n```\nThe output is shown bellow:\n```Output\nEncoding sequences...\nEpoch 0| Loss: 0.6335| Train accuracy: 0.7480| Validation accuracy: 0.8839\nEpoch 1| Loss: 0.5605| Train accuracy: 0.8165| Validation accuracy: 0.7032\nEpoch 2| Loss: 0.5042| Train accuracy: 0.8469| Validation accuracy: 0.8065\nEpoch 3| Loss: 0.4873| Train accuracy: 0.8344| Validation accuracy: 0.7677\nEpoch 4| Loss: 0.4559| Train accuracy: 0.8703| Validation accuracy: 0.8194\nEpoch 5| Loss: 0.4533| Train accuracy: 0.8763| Validation accuracy: 0.7806\nEpoch 6| Loss: 0.4372| Train accuracy: 0.8931| Validation accuracy: 0.8387\nEpoch 7| Loss: 0.4409| Train accuracy: 0.8842| Validation accuracy: 0.8581\nEpoch 8| Loss: 0.4357| Train accuracy: 0.8858| Validation accuracy: 0.8516\nEpoch 9| Loss: 0.4314| Train accuracy: 0.8987| Validation accuracy: 0.8387\nEpoch 10| Loss: 0.4246| Train accuracy: 0.8992| Validation accuracy: 0.8581\nEpoch 11| Loss: 0.4085| Train accuracy: 0.9180| Validation accuracy: 0.8839\nEpoch 12| Loss: 0.4071| Train accuracy: 0.9290| Validation accuracy: 0.8903\nEpoch 13| Loss: 0.4095| Train accuracy: 0.9170| Validation accuracy: 0.8839\nEpoch 14| Loss: 0.4019| Train accuracy: 0.9241| Validation accuracy: 0.8839\nEpoch 15| Loss: 0.3960| Train accuracy: 0.9342| Validation accuracy: 0.9161\n```\nThe model with best validation accuracy will be saved as GCN\\_model.pt\n\nAlso, the package provides users with functions to mine gapped patterns or motifs of more significant influence in prediction tasks.\n\n```Python\n# the pattern_contribution_score function returns a score list to record the contribution scores for the 4,096 gapped patterns. \nscore_list = pattern_contribution_score(fasta_file=\"example_data/nature_2017.fasta\",\n        label_file=\"example_data/lifestyle_label.txt\",\n        feature_file=\"example_data/CDD_protein_feature.txt\")\n```\nThe scores for the gapped-patterns will also be saved in a txt file.\n\n```Python\n# the pattern_group_contribution_score function groups similar gapped patterns and analyzes the occurrence & scores for each group.\npattern_group_contribution_score(fasta_file=\"example_data/nature_2017.fasta\", label_file=\"example_data/lifestyle_label.txt\", score_list=score_list)\n```\nThe results are saved as figures.\n![image](https://github.com/deepomicslab/GCNFrame/blob/master/pos_neg_match_grouped.png)\n![image](https://github.com/deepomicslab/GCNFrame/blob/master/pos_neg_score_grouped.png)\n\n```Python\n# the motif_contribution_score calculate the contribution score for a given motif.\nscore = motif_contribution_score(fasta_file=\"example_data/nature_2017.fasta\", label_file=\"example_data/lifestyle_label.txt\", motif=\"AAAAAATTCG\", feature_file=\"example_data/CDD_protein_feature.txt\")\nprint(\"The contribution score for AAAAAATTCG is %s.\"%score)\n```\n\n## Parameters\n###  ```class Biodata.Biodata```\n> + ```fasta_file```: The DNA sequences used for training and evaluation in fasta format.\n> + ```label_file```: The labels for the DNA sequences for training and evaluation (should have the same order as fasta_file).\n> + ```feature_file```: Other features (like gene density) for the DNA sequences for training and evaluation (should have the same order as fasta_file) (default=None).\n> + ```K```: The length of K-mer for encoding (default=3). \n> + ```d```: The number of spaced distance used for encoding (default=3).\n> + ```thread```: The number of thread used for encoding (default=10).\n\n###  ```class GCNmodel.model```\n> + ```label_num```: The number of labels.\n> + ```other_feature_dim```: The dimension for other features, 0 if not available.\n> + ```K```: The length of K-mer for encoding (default=3). \n> + ```d```: The number of spaced distance used for encoding (default=3).\n> + ```node_hidden_dim```: The size for kmer nodes after transformation(default=3).\n> + ```gcn_dim```: The size of output of SAGEConv (default=128).\n> + ```gcn_layer_num```: The number of SAGEConv layers (default=4).\n> + ```cnn_dim```: The size of output of convolutional layers (default=64).\n> + ```cnn_layer_num```: The number of convolutional layers (default=3).\n> + ```cnn_kernel_size```: The kernel size of convolutional layers (default=8).\n> + ```fc_dim```: The number of neurons for the fully connected layers (default=100).\n> + ```dropout_rate```: The dropout rate (default=0.2).\n> + ```pnode_nn```: Whether transform primary nodes (default=True).\n> + ```fnode_nn```: Whether transform target nodes (default=True).\n\n###  ```GCNmodel.train```\n> + ```learning_rate```: The learning rate for training (default=1e-4). \n> + ```batch_size```: The batch_size for training (default=64).\n> + ```epoch_n```: The number of training epoches (default=20).\n> + ```random_seed```: The random seed for train-validation split (default=111).\n> + ```val_split```: The validation size (default=0.1).\n> + ```weighted_sampling```: Whether use weighted sampling for training (default=True).\n> + ```model_name```: The saved model name (default=\"GCN_model.pt\").\n\n###  ```GCNmodel.test```\n> + ```fasta_file```: The DNA sequences used for test in fasta format. \n> + ```model_name```: The saved model name (default=\"GCN_model.pt\").\n> + ```feature_file```: Other features (like gene density) for the DNA sequences for test (should have the same order as fasta_file) (default=None).\n> + ```output_file```: The output file name (default=\"test_output.txt\").\n> + ```thread```: The number of thread used for encoding (default=10).\n> + ```K```: The length of K-mer for encoding (default=3). \n> + ```d```: The number of spaced distance used for encoding (default=3).\n\n###  ```pattern_contribution_score```\n> + ```fasta_file```: The DNA sequences used for training and evaluation in fasta format.\n> + ```label_file```: The labels for the DNA sequences for training and evaluation (should have the same order as fasta_file).\n> + ```target_label```: The label of the class being analyzed (default=1).\n> + ```model_name```: The saved model name (default=\"GCN_model.pt\").\n> + ```feature_file```: Other features (like gene density) for the DNA sequences for training and evaluation (should have the same order as fasta_file) (default=None).\n> + ```output_file```: The output file name (default=\"pattern_contribution_score.txt\").\n> + ```thread```: The number of thread used for encoding (default=10).\n> + ```K```: The length of K-mer for encoding (default=3). \n> + ```d```: The number of spaced distance used for encoding (default=3).\n\n###  ```motif_contribution_score```\n> + ```fasta_file```: The DNA sequences used for training and evaluation in fasta format.\n> + ```label_file```: The labels for the DNA sequences for training and evaluation (should have the same order as fasta_file).\n> + ```motif```: The motif to be analyzed.\n> + ```target_label```: The label of the class being analyzed (default=1).\n> + ```model_name```: The saved model name (default=\"GCN_model.pt\").\n> + ```feature_file```: Other features (like gene density) for the DNA sequences for training and evaluation (should have the same order as fasta_file) (default=None).\n> + ```thread```: The number of thread used for encoding (default=10).\n> + ```K```: The length of K-mer for encoding (default=3). \n> + ```d```: The number of spaced distance used for encoding (default=3).\n\n###  ```pattern_group_contribution_score```\n> + ```fasta_file```: The DNA sequences used for training and evaluation in fasta format.\n> + ```label_file```: The labels for the DNA sequences for training and evaluation (should have the same order as fasta_file).\n> + ```score_list```: The contribution scores of the 4,096 gapped patterns.\n> + ```target_label```: The label of the class being analyzed (default=1).\n> + ```d```: The number of spaced distance used for encoding (default=3).\n\n\n### Version history\n+ `v0.1.1`: Add contribution score functions.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deepomicslab/GCNFrame",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GCNFrame",
    "package_url": "https://pypi.org/project/GCNFrame/",
    "platform": null,
    "project_url": "https://pypi.org/project/GCNFrame/",
    "project_urls": {
      "Homepage": "https://github.com/deepomicslab/GCNFrame"
    },
    "release_url": "https://pypi.org/project/GCNFrame/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "This is a python package for genomics study with a GCN framework.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16245533,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c314fa4d330f3fc802c60ee8c005ce8cafca7b1217552858e00a188fdbe0ee4",
          "md5": "5a0a18aebbfcdfbe1f7a9d5af20b416d",
          "sha256": "cd3be06c5f02922ceb728af569ece9613d4a1bcf35fbfd9ff40e3ebd08ddb7be"
        },
        "downloads": -1,
        "filename": "GCNFrame-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5a0a18aebbfcdfbe1f7a9d5af20b416d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 176065,
        "upload_time": "2022-04-09T10:21:22",
        "upload_time_iso_8601": "2022-04-09T10:21:22.416773Z",
        "url": "https://files.pythonhosted.org/packages/5c/31/4fa4d330f3fc802c60ee8c005ce8cafca7b1217552858e00a188fdbe0ee4/GCNFrame-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "137379afb0dccf1862decccf86ef2b30736b1dd19e4148684e2aa01e725b7372",
          "md5": "4d4245f0e80f3ae30c9b1f96161e2a9d",
          "sha256": "5f7f38b840545a52db8fa5ab7701df457ae392c0b7c015de82dea14e285692b8"
        },
        "downloads": -1,
        "filename": "GCNFrame-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d4245f0e80f3ae30c9b1f96161e2a9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 176082,
        "upload_time": "2022-10-10T15:23:37",
        "upload_time_iso_8601": "2022-10-10T15:23:37.942305Z",
        "url": "https://files.pythonhosted.org/packages/13/73/79afb0dccf1862decccf86ef2b30736b1dd19e4148684e2aa01e725b7372/GCNFrame-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8d5836579db52a487157266e42fc2d5ac35bfb90266e80c0b329ea31fbea537",
          "md5": "8136f404014d52b538b53f2c451dac3a",
          "sha256": "d1b06b01e20ca87cfa161959f4999aa99801af3e05141114d16d718403525279"
        },
        "downloads": -1,
        "filename": "GCNFrame-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8136f404014d52b538b53f2c451dac3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 247849,
        "upload_time": "2022-10-11T02:48:27",
        "upload_time_iso_8601": "2022-10-11T02:48:27.112398Z",
        "url": "https://files.pythonhosted.org/packages/d8/d5/836579db52a487157266e42fc2d5ac35bfb90266e80c0b329ea31fbea537/GCNFrame-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f1e5b5185bbeb817802ab7a25a5682dcbabbc6fb9833465400ad4d5bb61cbe6",
          "md5": "6a24c4a9092b5e7562c513443ada140c",
          "sha256": "10a90db2290593460cecc5aa218a2da7df7d9ace3538cade97cc35dd5f042738"
        },
        "downloads": -1,
        "filename": "GCNFrame-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6a24c4a9092b5e7562c513443ada140c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 247898,
        "upload_time": "2022-10-11T03:34:10",
        "upload_time_iso_8601": "2022-10-11T03:34:10.882155Z",
        "url": "https://files.pythonhosted.org/packages/5f/1e/5b5185bbeb817802ab7a25a5682dcbabbc6fb9833465400ad4d5bb61cbe6/GCNFrame-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd0c9f9f119b9b5a4c0e4a068860802ee788b3ac0ab3fce15db803d25c8b90e4",
          "md5": "6a76ab656ec51a9197d20d7604b6e2fa",
          "sha256": "c98eab448cef2e44943b8189e8acd595181256b30b48dac4cfbc23961753e0b2"
        },
        "downloads": -1,
        "filename": "GCNFrame-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a76ab656ec51a9197d20d7604b6e2fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 382037,
        "upload_time": "2022-12-29T04:47:45",
        "upload_time_iso_8601": "2022-12-29T04:47:45.203543Z",
        "url": "https://files.pythonhosted.org/packages/bd/0c/9f9f119b9b5a4c0e4a068860802ee788b3ac0ab3fce15db803d25c8b90e4/GCNFrame-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd0c9f9f119b9b5a4c0e4a068860802ee788b3ac0ab3fce15db803d25c8b90e4",
        "md5": "6a76ab656ec51a9197d20d7604b6e2fa",
        "sha256": "c98eab448cef2e44943b8189e8acd595181256b30b48dac4cfbc23961753e0b2"
      },
      "downloads": -1,
      "filename": "GCNFrame-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a76ab656ec51a9197d20d7604b6e2fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 382037,
      "upload_time": "2022-12-29T04:47:45",
      "upload_time_iso_8601": "2022-12-29T04:47:45.203543Z",
      "url": "https://files.pythonhosted.org/packages/bd/0c/9f9f119b9b5a4c0e4a068860802ee788b3ac0ab3fce15db803d25c8b90e4/GCNFrame-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}