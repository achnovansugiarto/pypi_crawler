{
  "info": {
    "author": "['Nirav Lekinwala', 'Mani Bhushan']",
    "author_email": "nirav.lekinwala@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `pyGNMF`\n Python Library for Generalised Non-Negative Matrix Factorisation (GNMF)\n\nA Python implementation of GNMF method introduced in article by [Lekinwala and Bhushan](#1) in an article \"Generalised Non-Negative Matrix Factorisation for Air Pollution Source Apportionment\".\n\nAn article describing the library is submitted to SoftwareX ([Lekinwala and Bhushan, 2022](#2)).\n\n## Installation Details\n\n<!-- The package can be installed in one of the two following ways, -->\n\n<!-- ### Way - 1\n1. Clone the repository using `git clone https://github.com/niravl/pyGNMF`\n2. Go to the folder and install (preferably in a new environment) using `pip install -e .`\n\n### Way - 2  -->\n\n`pyGNMF` can be installed from [pypi](pypi.org) using the command `pip install pyGNMF`\n\n## Testing and Use\nDue to size restrictions of the GitHub, dataset used in [Lekinwala and Bhushan (2022)](#2) is not made available, however, a smaller dataset with 20 samples, 6 columns and with 3 underlying factor is included in the `test` folder.\n\nUpon installation, the test files can be downloaded by cloning the git repository using `git clone https://github.com/niravl/pyGNMF`. The test folder contains 3 files, \n1. `IllustrativeExample.mat`: Test matrix discussed in the article.\n2. `test_data_generation.py`: Python script to generate the `IllustrativeExample.mat` file, changes can be made to change the dimensions of the dataset.\n3. `test_running_method.py`: Python script which uses the `IllustrativeExample.mat` file to test different functions of  the `pyGNMF` module. \n## Details\nGNMF factorises matrix $X_{n\\times m}$ into $G_{n\\times p}$ and $F_{p\\times m}$ matrices by incorporating element-wise covariance matrix in the objective function and a user-defined number of factors ($p$).\n\n### Covariance Matrix\nThe covariance matrix ($\\Sigma$) should be of size $nm\\times nm$ which captures element-wise covariance information. Depending on the type of covariance, GNMF method can act as different methods in the literature,\n1. **Covariance Matrix as Identity**: In this case, GNMF method with multiplicative update is same as NMF method proposed by [Lee and Seung, 1999](#3).\n2. **Covariance Matrix is Diagonal Matrix**: In this case, GNMF method with multiplicative update is same as LS-NMF method ([Wang et. al., 2006](#4)).\n3. **Covariance Matrix with elements correlated along rows or columns**: In this case, GNMF method with multiplicative update is same as glsNMF method ([Plis et. al. 2011](#5)).\n4. **Covariance Matrix is Dense Matrix**: [Lekinwala and Bhushan, 2022](#1) proposes the GNMF method with multiplicative and projected gradient updates.\n\n## Package Structure of `pyGNMF`\n![plot](images/pyGNMF_package_structure_image.png)\n\n## Functions in `pyGNMF`\nFollowing are some class as part of the module.\n1. `gnmf_multiplicative_update`: There are four functions as part of this class,\n    - `update_F` : This function is used for the update of F.\n    - `update_G` : This function is used for the update of G.\n    - `objective_function` : This function is used to compute the value of objective function after each iteration.\n    - `running_method` : This function is used to run the GNMF method with multiplicative update. A user can call the function in the following way and pass required inputs. Following are the details about the inputs,\n\n    Usage: `G_updated, F_updated, objective_function = pyGNMF.gnmf_multiplicative_update.running_method(\n    X_matrix, \n    covariance, \n    option=('row_stacked', 'column_stacked'), \n    G_init='random', \n    F_init='random', \n    num_fact=None, \n    num_init=1, \n    max_iter=500000, \n    tolerance=1e-06, \n    conv_typ=('absolute', 'relative'), \n    conv_num=3)`\n    \n    where,\n    * `X_matrix` (required): Matrix to factorise into `num_fact` factors.\n    * `covariance` (required): Covariance (matrix of size $nm\\times nm$) between different the elements of $X_{n\\times m}$ Matrix.\n    * `option=('row_stacked', 'column_stacked')` (required): Option to specify how the elements of the covariance matrix ($nm\\times nm$) are stacked. If the covariance corresponds to row-stacked elements of $X$ matrix, 'row_stacked' is used else 'column_stacked' is used.  \n    * `G_init='random'` (required): Non-negative initial guess for $G$ of size $n\\times p$. If `random` keyword is used, `G_init` is generated randomly internally. \n    * `F_init='random'` (required): Non-negative initial guess for $F$ of size $p\\times m$. If `random` keyword is used, `F_init` is generated randomly internally. \n    * `num_fact=None` ($p$, required): A critical parameter for the GNMF to work i.e., the number of factors for $X$ matrix. \n    * `num_init=1` (optional): Each method can be initialised multiple times depending on value of this parameter. Default value is 1.\n    * `max_iter=500000` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations defined by value if this parameter. Default value is 500000.\n    * `tolerance=1e-06` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations. This parameter defines the tolerance value for the convergence. Default value is 1e-6.\n    * `conv_typ=('absolute', 'relative')` (optional): Each initialisation of a method under consideration will run till convergence or maximum number of iterations. This parameter defines the type of convergence i.e., `absolute` difference in the objective function value or `relative` difference in the objective function value. Default value is `relative`.\n    * `conv_num=3` (optional): Each initialisation of a method under consideration will run till convergence or till maximum number of iterations. Itf a method converges, `conv_num` parameter defines the minimum number of iteration which are required to have convergence criteria below tolerance. Default value is 3.\n2. `gnmf_projected_gradient`: There are four functions as part of the class,\n    - `update_F` : This function is used for the update of F.\n    - `update_G` : This function is used for the update of G.\n    - `objective_function` : This function is used to compute the value of objective function\n    - `running_method` : This function is used to run the method under consideration. Following are the inputs required.\n\n    Usage: `G_updated, F_updated, objective_function = gnmf_projected_gradient.running_method( X_matrix, covariance, G_init='random', F_init='random', beta=0.1, sigma=0.0001, alpha_init_G=1, alpha_init_F=1, option=('row_stacked', 'column_stacked'), num_fact=None, num_init=1, max_iter=500000, tolerance=1e-06, conv_typ=('absolute', 'relative'), conv_num=3)`\n\n    where,\n    * `X_matrix` (required): Matrix to factorise\n    * `covariance` (required): Covariance (matrix of size $nm\\times nm$) between different the elements of $X_{n\\times m}$ Matrix.\n    * `G_init='random'` (required): Non-negative Initial guess for $G$ of size $n\\times p$. If `random` keyword is used, `G_init` is generated randomly internally. \n    * `F_init='random'` (required): Non-negative Initial guess for $F$ of size $p\\times m$. If `random` keyword is used, `F_init` is generated randomly internally. \n    * `option=('row_stacked', 'column_stacked')` (required):Option to specify how the elements of the covariance matrix ($nm\\times nm$) are stacked. If the covariance corresponds to row-stacked elements of $X$ matrix, 'row_stacked' is used else 'column_stacked' is used.\n    * `beta = 0.1` (optional): $\\beta$ value used to reduce the value of initial step-length ($\\alpha$) while search for $\\alpha$ to achieve sufficient decrease. Default value is 0.1.\n    * `sigma=0.0001` (optional): User-defined parameter used in sufficient decrease\n    * `alpha_init_G=1` : Initial step-length for the update of $G$. Default value is 1.\n    * `alpha_init_F=1` : Initial step-length for the update oF $F$.\n    * `num_fact=None` ($p$, required): A critical parameter for the GNMF to work i.e., the number of factors for $X$ matrix. \n    * `num_init=1` (optional): Each method can be initialised multiple times depending on this parameter. Default value is 1.\n    * `max_iter=500000` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations defined by this parameters. Default value is 500000.\n    * `tolerance=1e-06` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations. This parameter defines the tolerance value for the convergence.\n    * `conv_typ=('absolute', 'relative')` (optional): Each initialisation of a method under consideration will run till convergence. This parameter defines the type of convergence i.e., `absolute` difference in the objective function value or `relative` difference in the objective function value. Default value is `relative`.\n    * `conv_num=3` (optional): Each initialisation of a method under consideration will run till convergence. `conv_num` parameter is used to declare convergence only if the `absolute` or `relative` difference is less than tolerance value for some iterations. Default value is 3.\n\n3. `G_updated, F_updated, objective_function = nmf_multiplicative_update`: There are two functions as part of the class,\n    - `objective_function` : This function is used to compute the value of objective function\n    - `running_method` : This function is used to run the method under consideration. Following are the inputs required.\n\n    Usage: `nmf_multiplicative_update.running_method(X_matrix, G_init='random', F_init='random', num_fact=None, num_init=1, max_iter=500000, tolerance=1e-06, conv_typ='relative', conv_num=3)`\n    \n    where,\n    * `X_matrix` (required): Matrix to factorise\n    * `G_init='random'` (required): Non-negative Initial guess for $G$ of size $n\\times p$. If `random` keyword is used, `G_init` is generated randomly internally. \n    * `F_init='random'` (required): Non-negative Initial guess for $F$ of size $p\\times m$. If `random` keyword is used, `F_init` is generated randomly internally. \n    * `num_fact=None` ($p$, required): A critical parameter for the GNMF to work i.e., the number of factors for $X$ matrix. \n    * `num_init=1` (optional): Each method can be initialised multiple times depending on this parameter. Default value is 1.\n    * `max_iter=500000` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations defined by this parameters. Default value is 500000.\n    * `tolerance=1e-06` (optional): Each initialisation of a method under consideration will run till convergence or till the maximum number of iterations. This parameter defines the tolerance value for the convergence.\n    * `conv_typ=('absolute', 'relative')` (optional): Each initialisation of a method under consideration will run till convergence. This parameter defines the type of convergence i.e., `absolute` difference in the objective function value or `relative` difference in the objective function value. Default value is `relative`.\n    * `conv_num=3` (optional): Each initialisation of a method under consideration will run till convergence. `conv_num` parameter is used to declare convergence only if the `absolute` or `relative` difference is less than tolerance value for some iterations. Default value is 3.\n\n## References\n<a id=\"1\">[1]</a> Nirav L. Lekinwala and Mani Bhushan,\n**Generalised non-negative matrix factorisation for air pollution source apportionment**\nScience of The Total Environment (2022), 156294, ISSN 0048-9697,\n[https://doi.org/10.1016/j.scitotenv.2022.156294.](https://www.sciencedirect.com/science/article/pii/S0048969722033915)\n\n<a id=\"1\">[2]</a> Nirav L. Lekinwala and Mani Bhushan,\n**`pyGNMF`: A python library for implementation of generalised non-negative matrix factorisation method**\nSoftwareX, 2022, _(Submitted)_ \n[SSRN Preprint Article Available](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4149326)\n\n<a id=\"1\">[3]</a> Lee, D. and Seung, H. \n**Learning the parts of objects by non-negative matrix factorization**\nNature (1999), 401(6755):788–791.\n[https://doi.org/10.1038/44565](https://www.nature.com/articles/44565)\n\n<a id=\"1\">[4]</a> Wang, G., Kossenkov, A. V., and Ochs, M. F.\n**LS-NMF: A modified non-negative matrix factorization algorithm utilizing uncertainty estimates.**\nBMC Bioinformatics (2006), 7(1):175.\n[https://doi.org/10.1186/1471-2105-7-175](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-7-175)\n\n<a id=\"1\">[5]</a> Plis, S.M., Potluru, V.K., Lane, T. et al. \n**Correlated Noise: How it Breaks NMF, and What to Do About it** \nJ Sign Process Syst. (2011), 65, 351–359. \n[https://doi.org/10.1007/s11265-010-0511-8](https://link.springer.com/article/10.1007/s11265-010-0511-8)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/niravl/pyGNMF",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyGNMF",
    "package_url": "https://pypi.org/project/pyGNMF/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyGNMF/",
    "project_urls": {
      "Bug Tracker": "https://github.com/niravl/pyGNMF/issues",
      "Homepage": "https://github.com/niravl/pyGNMF"
    },
    "release_url": "https://pypi.org/project/pyGNMF/1.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python implementation of Generalised Non-negative Matrix Factorisation with Multiplicative and Projected Gradient Approaches.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15150284,
  "releases": {
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d5ecce22f371f37266aaea76a7e3148109c0d8a3a701c5a64faa1f7d8d52b58",
          "md5": "44e118bb6f954ee2be0a33065cb8e098",
          "sha256": "fd3d7a907a0cc771570f1ae86208fc2b3cde97b0c3584c66ea24f08403093ecf"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44e118bb6f954ee2be0a33065cb8e098",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 4370,
        "upload_time": "2022-05-30T09:49:55",
        "upload_time_iso_8601": "2022-05-30T09:49:55.041741Z",
        "url": "https://files.pythonhosted.org/packages/0d/5e/cce22f371f37266aaea76a7e3148109c0d8a3a701c5a64faa1f7d8d52b58/pyGNMF-1.0.6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "testing"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44ccfbe82183621a623bd4d63773dcef89b177befa37a2df7d91c8fca6b759ff",
          "md5": "2cf2a4801e579527fbdf22231420ae81",
          "sha256": "46c230d442fe5a1fdb1c7b098c634e4aaa607ad3c0fdf5565ec654221f4c269e"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2cf2a4801e579527fbdf22231420ae81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5703,
        "upload_time": "2022-05-30T09:49:56",
        "upload_time_iso_8601": "2022-05-30T09:49:56.897582Z",
        "url": "https://files.pythonhosted.org/packages/44/cc/fbe82183621a623bd4d63773dcef89b177befa37a2df7d91c8fca6b759ff/pyGNMF-1.0.6.tar.gz",
        "yanked": true,
        "yanked_reason": "testing"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abe8ee0baacccba9825479c21d2d79b35b41fe1323a8f285942708e0ade577c4",
          "md5": "abb8b9b29614ece6a8dc3644195308d2",
          "sha256": "ddfd6443c14d2808d18a341fd6bc9c5c4d8594337dc51db5b9a37ab17fb53bb7"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "abb8b9b29614ece6a8dc3644195308d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13872,
        "upload_time": "2022-09-14T08:00:32",
        "upload_time_iso_8601": "2022-09-14T08:00:32.165019Z",
        "url": "https://files.pythonhosted.org/packages/ab/e8/ee0baacccba9825479c21d2d79b35b41fe1323a8f285942708e0ade577c4/pyGNMF-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daada59aca6b8382ab08fe39487339bd950691bb1f9826ef49684f80f218a284",
          "md5": "05e88f8d82e378251fbc905cead40a23",
          "sha256": "dd92ef57f6e401d888215805813fab0919aea7c9b8f8559af67c27817fa50384"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "05e88f8d82e378251fbc905cead40a23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13893,
        "upload_time": "2022-09-14T08:10:35",
        "upload_time_iso_8601": "2022-09-14T08:10:35.341397Z",
        "url": "https://files.pythonhosted.org/packages/da/ad/a59aca6b8382ab08fe39487339bd950691bb1f9826ef49684f80f218a284/pyGNMF-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f3cf67c048ca47813714d91aa9b32059fb96fe4d0db47281fcbffd926dcacc6",
          "md5": "8568108ca23ff0e2025b663f366588ca",
          "sha256": "33e977e9b3c1f81b4525f8585ca34442e92b23c5229051a557e4c66deb114f5a"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8568108ca23ff0e2025b663f366588ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13919,
        "upload_time": "2022-09-14T12:45:31",
        "upload_time_iso_8601": "2022-09-14T12:45:31.055303Z",
        "url": "https://files.pythonhosted.org/packages/8f/3c/f67c048ca47813714d91aa9b32059fb96fe4d0db47281fcbffd926dcacc6/pyGNMF-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01d8c0f0e4b6097f4cbe442209bf9104937838838c05bdc82c306fb2ccab15ff",
          "md5": "2d0c7e5b80e52b44f54c8b87cdc97687",
          "sha256": "010fa6a623c4ed9514ad65bd3538d210ab8f2e4232b66821148519bb16c4e892"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d0c7e5b80e52b44f54c8b87cdc97687",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14285,
        "upload_time": "2022-09-15T09:19:50",
        "upload_time_iso_8601": "2022-09-15T09:19:50.784864Z",
        "url": "https://files.pythonhosted.org/packages/01/d8/c0f0e4b6097f4cbe442209bf9104937838838c05bdc82c306fb2ccab15ff/pyGNMF-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb844b59e3254e20b103f27aed0ef88285c972d130d0a9b08a15748bfa61e04",
          "md5": "d0b8eea92208f8b704cc8b755d01267f",
          "sha256": "0d49bba4dfc5d2c33b0207ccef97d72c1e31b48975cd8e47ccbbcd674220a719"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d0b8eea92208f8b704cc8b755d01267f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14358,
        "upload_time": "2022-09-15T10:50:28",
        "upload_time_iso_8601": "2022-09-15T10:50:28.902800Z",
        "url": "https://files.pythonhosted.org/packages/2c/b8/44b59e3254e20b103f27aed0ef88285c972d130d0a9b08a15748bfa61e04/pyGNMF-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d71488a0533a21ec984fd523b713d9ef0057d593bd4255c6f60d392cd818660",
          "md5": "7bbef4c11fe73d71cf8c1dbd78af803a",
          "sha256": "f8926fb2faff8a2dfd88514f8c624af96422714f4ac8872a094c38b8a9dd8467"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7bbef4c11fe73d71cf8c1dbd78af803a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14362,
        "upload_time": "2022-09-20T03:52:44",
        "upload_time_iso_8601": "2022-09-20T03:52:44.569995Z",
        "url": "https://files.pythonhosted.org/packages/5d/71/488a0533a21ec984fd523b713d9ef0057d593bd4255c6f60d392cd818660/pyGNMF-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a36f282f61101819c6908bf4dae5b8c582b17668b832edd4ba997dab153230f",
          "md5": "c34edd3e3b0cb2b1ebe5e3b9c0ee3a69",
          "sha256": "fe9b03efa101b0e93874d75398531d4cf6e4f16ce87d9591ff35797ff9f946b2"
        },
        "downloads": -1,
        "filename": "pyGNMF-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c34edd3e3b0cb2b1ebe5e3b9c0ee3a69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 112476,
        "upload_time": "2022-09-20T04:10:22",
        "upload_time_iso_8601": "2022-09-20T04:10:22.005769Z",
        "url": "https://files.pythonhosted.org/packages/6a/36/f282f61101819c6908bf4dae5b8c582b17668b832edd4ba997dab153230f/pyGNMF-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a36f282f61101819c6908bf4dae5b8c582b17668b832edd4ba997dab153230f",
        "md5": "c34edd3e3b0cb2b1ebe5e3b9c0ee3a69",
        "sha256": "fe9b03efa101b0e93874d75398531d4cf6e4f16ce87d9591ff35797ff9f946b2"
      },
      "downloads": -1,
      "filename": "pyGNMF-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c34edd3e3b0cb2b1ebe5e3b9c0ee3a69",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 112476,
      "upload_time": "2022-09-20T04:10:22",
      "upload_time_iso_8601": "2022-09-20T04:10:22.005769Z",
      "url": "https://files.pythonhosted.org/packages/6a/36/f282f61101819c6908bf4dae5b8c582b17668b832edd4ba997dab153230f/pyGNMF-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}