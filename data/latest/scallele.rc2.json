{
  "info": {
    "author": "Giovanni Quinones Valdez",
    "author_email": "giovas@ucla.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# **scAllele**\n_______________________________________\n[![](https://img.shields.io/badge/scAllele-v0.0.9.3-blue)](https://test.pypi.org/project/scAllele/)\n\n[Github](https://github.com/gxiaolab/scAllele/)\n\n## **About**\n\n\nscAllele is a versatile tool to detect and analyze nucleotide variants in scRNA-seq [(Article)](https://www.science.org/doi/10.1126/sciadv.abn6398). \\\nscAllele makes use local reassembly via de-Bruijn graph to identify sequence differences and infers nucleotide variants at the read level. \\\nThe read level variant-call allows for the analysis of the role variants in the context of splicing. \nUsing mutual information, scAllele identifies allelic linkage between nucleotide variants and splicing\nisoforms.\n\n## **Table of contents**\n- [Outline](#Outline)\n- [Download](#Download)\n- [Usage](#Usage)\n\t- [Basic usage](#Basic-usage)\n\t- [Preprocessing](#Preprocessing)\n\t- [Stranded data](#Stranded-data)\n\t- [Local variant call](#Local-variant-call)\n\t- [Filtering variants](#Filtering-variants)\n\t- [Training a new classifier](#Training-a-new-classifier)\n- [Output](#Output)\n- [Debug](#Debug)\n \n_______________________________________\n\n## **Outline**\n\n| ![alt text](img/screenshot_Fig1.png) |\n|:--:|\n| *a. Illustration of the main algorithm of scAllele for variant calling. The reads and the reference genomic sequence overlapping a read cluster (RC) are decomposed into k-mers and are reasembled into a de Bruijn graph. b. Variants (green box in a) identified from the graph are then scored using a generalized linear model (GLM). The GLM was trained with different features (green box) to assign a confidence score to the variants. c. To identify allele-specific splicing (i.e., variant linkage), scAllele performs a mutual information calculation between nucleotide variants (SNVs, microindels) and intronic parts (where the ‘alleles’ are the different overlapping introns), to calculate allelic linkage of splicing isoforms.* |  \n\n_______________________________________\n\n## **Download**\n\nscAllele is available through PyPi. To download simply type:\n\n```\n$ pip install scAllele\n```\n\nThe download was tested with PyPi version >= 20.0.1\n\nIf succesful, the program is ready to use. The installation incorporates console script entrypoints to directly call scAllele:\n```\n$ scAllele\nUsage: \n\tscAllele -b <file.bam> -g <genome.fa> -o <output prefix>\nA variant caller and variant analysis tool for scRNA-seq data.\nOptions:\n  -h, --help            show this help message and exit\n  -b INPUT_BAM, --input-bam=INPUT_BAM\n                        [Required] Input bam file, (or comma-seprated list of\n                        bam files) sorted and indexed\n  -o OUTPUT_PREFIX, --output-vcf=OUTPUT_PREFIX\n                        [Required] Prefix of the output files\n  -g GENOME, --genome-file=GENOME\n                        [Required] Reference genome file (fasta format)\n  Filtering Options:\n    --AB=MINRATIOVAR    Minimum allelic ratio for the variant allele. Default:\n                        0.01\n    --AC=MINCOUNTVAR    Minimum read depth supporting the variant allele.\n                        Default: 2\n    --DP=MINCOVERAGE    Minimum read depth at the position of the variant.\n                        Default: 5\n    --min-base_position=MINREADPOS\n                        Minimum mean distance for the variant from the read\n                        ends. Default = 7\n    --min-base_quality=MINBASEQUAL\n                        Minimum mean base quality score to consider SNPs.\n                        Default = 20\n  Run Mode Options:\n    --run_mode=RUN_MODE\n                        Select <Variant_Caller> <Full> or <Training> mode.\n                        Default: Full\n    --glm_clf_name=GLM_CLASSIFIER_NAME\n                        Prefix of the GLM pickle objects with the GLM models\n  Linkage Options:\n    --link_min_count=LINK_MIN_COUNT\n                        Minimum number of common reads for linkage analysis.\n                        Default = 10\n    --link_min_mi=LINK_MIN_MI\n                        Minimum mutual information for linkage analysis.\n                        Default = 0.52\n  Advanced Options:\n    -c SEARCH_REGION, --region=SEARCH_REGION\n                        Limit search to this region (chrom:start-end or\n                        chrom). Default: All\n    -n NODES, --nodes=NODES\n                        Number of threads for parallel execution. Default = 64\n    --min-map_quality=MINMAPQ\n                        Minimum mapping quality to keep a read. Default = 40\n    --max_soft_clip=MAXSOFTCLIP\n                        Maximum length of soft-clipping allow at each end of\n                        the read. Default = 5\n    --kmer-size=KMER    k-mer size for the de-Bruijn graph assembly. Default:\n                        15\n    --strandedness=STRANDEDNESS\n                        Select from ['fr-firststrand', 'fr-secondstrand', 'fr-\n                        unstrand']. Default: 'fr-unstrand'\n    --maxSeqErrorRate=MAXSEQERRORRATE\n                        Maximum estimate of sequencing error rate. Default:\n                        0.01\n    --Ploidy=PLOIDY     Maximum ploidy to be considered. Default: 2.\n ```\n_______________________________________\n\n## **Usage**\n\n### *Basic usage*\n\nThe minimum requirements to run scAllele are:\n1. A bam file (sorted and indexed) `samtools sort file.bam file.sorted ; samtools index file.sorted.bam` \n2. A reference genome fasta file (indexed) `samtools faidx genome.fa`\n3. A prefix for the output files.\n\n```\n$ scAllele -b file.sorted.bam -g genome.fa -o path/to/output_prefix\n```\n\nUsing the provided test data: \n\n```\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/output_prefix \n```\n\n\n### *Preprocessing* \n\nscAllele only requires a bam file and a reference genome fasta file, however, in order to get optimal results it is recommended to pre-process the data:\n\n| ![alt text](img/Fig_S1.png) |\n|:--:| \n| *Recommended pipeline* |\n\n### *Stranded data*\nIf your scRNA-seq is strand-specific, then you can specify the strandedness of your data (default: non-strand specific). \\\nStrand-specific data helps resolve ambiguous alignments on overlapping genes. It also helps detect more accurate ASAS events. \\\nMost strand-specific libraries in RNA-Seq are `fr-firststrand` (second read pair is sense to the RNA). You can specify this in your command:\n```\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/output_prefix \n    --strandedness='fr-firststrand'\n```\nAlternatively, you can use the option `--strandedness=fr-secondstrand` if the first read pair is sense to the RNA.  \n\n### *Local variant call*\nBy default, scAllele searches for variants in all the regions of the transcriptome covered by reads. If you wish to search for variants in a custom genomic interval, you can do so with the `-c` option. \n```\n## Only search chromosome 21\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/output_prefix \n    -c chr21\n## Only search within these coordinates\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/output_prefix \n    -c chr21:34582111-34628004\n```\n\nscAllele will search for read clusters within these regions only. Bare in mind that it's possible to find no read clusters in the spcified region, and that, if a specified region does not contain the entirety of a gene, it may miss some ASAS events. \n\n\n### *Filtering variants* \n\nAlthough it is recommended to filter variants downstream of your analysis (via bcftools or others), it's possible to filter variants from the start. If you wish, for example, to only report variants with 3 reads supporting the alternative allele (AC) and 5 reads overall, then you can run the following command:\n\n```\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/output_prefix \n    --AC=3 \n    --DP=5\n```\n\nThe default is `AC=2 and DP=2`. \n\n### *Training a new classifier* \n\nscAllele offers the option to retrain the variant classifier. Sequencing data from different platforms or resulting from different library preparation protocols may have different error profiles. If you wish to retrain scAllele's classifier run it in training mode: \n\n```\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o path/to/new_clf \n    --run_mode='Training' \n```\n\nThis will return a feature file (`.feature_matrix.tab`) containing the variant calls and all the features used for the training of the classifier.  \nThen, run scAllele's training function. The supervised classifier will require a set of ground-truth variants to fit the model.  \n\n```\n$ scAllele_train \n    -i path/to/new_clf.feature_matrix.tab \n    -v truth.vcf \n    -g testdata/hg38.chr21.fa\n```\n\nThis will return 3 pickle objects:\n\n* path/to/new_clf.feature_matrix.tab.DELETION.glm.pickle\n* path/to/new_clf.feature_matrix.tab.INSERTION.glm.pickle\n* path/to/new_clf.feature_matrix.tab.SNP.glm.pickle\n\nFinally, to use these new classifiers to call variants run:\n\n```\n$ scAllele \n    -b testdata/gm12878.chr21.bam \n    -g testdata/hg38.chr21.fa \n    -o new_path/to/output_prefix \n    --glm_clf_name path/to/new_clf.feature_matrix.tab  \n```\n\n_____________________________________\n\n\n## **Output**\n\nscAllele generates 4 files as output:\n\n* path/to/output_prefix.vcf\n* path/to/output_prefix.mi_summary.tab\n* path/to/output_prefix.read_cluster_info.tab\n* path/to/output_prefix.intronic_parts.bed\n\n\nThe first file (**.vcf**) is a standard vcf file reporting all the nucleotide variants found. The description of the tags and values are specified in the header.\n\nThe second file (**.mi_summary.tab**) reports all the linkage events between variants or between variant and intronic part (ASAS). The mutual information and number of common reads between pairs of variants are reported. **NOTE**: All the testable linkages are presented. It is recommended to filter linkage events based on the mutual information and number of common reads as explained in the main publication.\n\nThe third file (**.read_cluster_info.tab**) reports all the read clusters identified in the file. \n\nThe fourth file (**.intronic_parts.bed**) reports the intronic parts identified together with the introns that form them. \n\n## **Debug**\n\nIf the installed version of scAllele is not the latest one, please try:\n\n```\npip install scAllele==0.0.9.3\n```\n\nIf one or more dependencies fail to install, make sure you have the latest version of pip:\n\n```\npip install --upgrade pip\n```\n\nIf the error persists, download the `requires.txt` file from this repository and install the dependencies prior to scAllele installation:\n\n```\npip install -r requires.txt\npip install -i https://test.pypi.org/simple/ scAllele==0.0.9.3\n``` \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gxiaolab/scAllele",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scAllele",
    "package_url": "https://pypi.org/project/scAllele/",
    "platform": null,
    "project_url": "https://pypi.org/project/scAllele/",
    "project_urls": {
      "Bug Tracker": "https://github.com/gxiaolab/scAllele/issues",
      "Homepage": "https://github.com/gxiaolab/scAllele"
    },
    "release_url": "https://pypi.org/project/scAllele/0.0.9.3/",
    "requires_dist": [
      "biopython",
      "glob2",
      "HTSeq",
      "multiprocess",
      "networkx (>=2.4)",
      "numpy (>=1.18.5)",
      "pandas (==1.3)",
      "pickleshare",
      "psutil",
      "pyfaidx (>=0.5.9.5)",
      "pysam (>=0.9.1)",
      "vcfpy",
      "scikit-learn (>=0.23.1)",
      "scipy",
      "statsmodels (>=0.11.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "A versatile tool for the detection and analysis of nucleotide variants in scRNA-seq",
    "version": "0.0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17187230,
  "releases": {
    "0.0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89bf7939e7ed39f9bee8e71929fac2838f27dd1a32abf87c23629cd16d9f0e69",
          "md5": "fd5fac28d13517bb9eb2a666db053456",
          "sha256": "326b17655465b89e98d0d176b669b4a9201be7e69dd7861d2dcd185f6ab07ed9"
        },
        "downloads": -1,
        "filename": "scAllele-0.0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd5fac28d13517bb9eb2a666db053456",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 48762,
        "upload_time": "2022-09-20T22:13:12",
        "upload_time_iso_8601": "2022-09-20T22:13:12.711788Z",
        "url": "https://files.pythonhosted.org/packages/89/bf/7939e7ed39f9bee8e71929fac2838f27dd1a32abf87c23629cd16d9f0e69/scAllele-0.0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a8e4db7964a88ca72822fdefbf4dddc68934aeeb759fef9a15ecd8ffbbb9e3d",
          "md5": "7027febb483852fa3efc12c933de9947",
          "sha256": "5d6aaf2b703b6d8c20875d61b954af37fc641af0c4747c35acf83e9afa6ae7cc"
        },
        "downloads": -1,
        "filename": "scAllele-0.0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7027febb483852fa3efc12c933de9947",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 47324,
        "upload_time": "2022-09-20T22:13:14",
        "upload_time_iso_8601": "2022-09-20T22:13:14.987642Z",
        "url": "https://files.pythonhosted.org/packages/6a/8e/4db7964a88ca72822fdefbf4dddc68934aeeb759fef9a15ecd8ffbbb9e3d/scAllele-0.0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "774c030ed327f4927607e9f597a60f7777deb8b88b73e3d807c0853340d76ef7",
          "md5": "a5c8b2c36a135c03d3272a4196c361b9",
          "sha256": "555b5a5fcab7be09dc8b2bf1dcbdc6db4558336ac721d755d3ffa46b6b6f746b"
        },
        "downloads": -1,
        "filename": "scAllele-0.0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5c8b2c36a135c03d3272a4196c361b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 48887,
        "upload_time": "2023-03-07T07:23:54",
        "upload_time_iso_8601": "2023-03-07T07:23:54.342922Z",
        "url": "https://files.pythonhosted.org/packages/77/4c/030ed327f4927607e9f597a60f7777deb8b88b73e3d807c0853340d76ef7/scAllele-0.0.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ab09478c6ec91821982dc22faa405980ac8d970e0494d19421e5d7f22801a37",
          "md5": "8b569b43271bcdad8b6d583af13acd70",
          "sha256": "fe0c3d8c1a4dadea52d04d64d319224edd87189195b2767b2ed9c441b16e3b3c"
        },
        "downloads": -1,
        "filename": "scAllele-0.0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8b569b43271bcdad8b6d583af13acd70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 47541,
        "upload_time": "2023-03-07T07:23:56",
        "upload_time_iso_8601": "2023-03-07T07:23:56.672255Z",
        "url": "https://files.pythonhosted.org/packages/2a/b0/9478c6ec91821982dc22faa405980ac8d970e0494d19421e5d7f22801a37/scAllele-0.0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "774c030ed327f4927607e9f597a60f7777deb8b88b73e3d807c0853340d76ef7",
        "md5": "a5c8b2c36a135c03d3272a4196c361b9",
        "sha256": "555b5a5fcab7be09dc8b2bf1dcbdc6db4558336ac721d755d3ffa46b6b6f746b"
      },
      "downloads": -1,
      "filename": "scAllele-0.0.9.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5c8b2c36a135c03d3272a4196c361b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 48887,
      "upload_time": "2023-03-07T07:23:54",
      "upload_time_iso_8601": "2023-03-07T07:23:54.342922Z",
      "url": "https://files.pythonhosted.org/packages/77/4c/030ed327f4927607e9f597a60f7777deb8b88b73e3d807c0853340d76ef7/scAllele-0.0.9.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ab09478c6ec91821982dc22faa405980ac8d970e0494d19421e5d7f22801a37",
        "md5": "8b569b43271bcdad8b6d583af13acd70",
        "sha256": "fe0c3d8c1a4dadea52d04d64d319224edd87189195b2767b2ed9c441b16e3b3c"
      },
      "downloads": -1,
      "filename": "scAllele-0.0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8b569b43271bcdad8b6d583af13acd70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 47541,
      "upload_time": "2023-03-07T07:23:56",
      "upload_time_iso_8601": "2023-03-07T07:23:56.672255Z",
      "url": "https://files.pythonhosted.org/packages/2a/b0/9478c6ec91821982dc22faa405980ac8d970e0494d19421e5d7f22801a37/scAllele-0.0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}