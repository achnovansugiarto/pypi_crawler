{
  "info": {
    "author": "Christian Safka",
    "author_email": "christiansafka@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Image 2 Vec with PyTorch\n\nMedium post on building the first version from scratch:  https://becominghuman.ai/extract-a-feature-vector-for-any-image-with-pytorch-9717561d1d4c\n\nLooking for a simpler image vector integration for your project?  Check out our free API at https://latentvector.space\n\n### Applications of image embeddings:\n - Ranking for recommender systems\n - Clustering images to different categories\n - Classification tasks\n - Image compression\n\n## Available models\n|Model name|Return vector length|\n|----|----|\n|Resnet-18|512|\n|Alexnet|4096|\n|Vgg-11|4096|\n|Densenet|1024|\n|efficientnet_b0|1280|\n|efficientnet_b1|1280|\n|efficientnet_b2|1408|\n|efficientnet_b3|1536|\n|efficientnet_b4|1792|\n|efficientnet_b5|2048|\n|efficientnet_b6|2304|\n|efficientnet_b7|2560|\n\n## Installation\n\nTested on Python 3.6 and torchvision 0.11.0 (nightly, 2021-09-25) \n\nRequires Pytorch: http://pytorch.org/\n\n```conda install -c pytorch-nightly torchvision```\n\n```pip install img2vec_pytorch```\n\n## Run test\n\n```python -m img2vec_pytorch.test_img_to_vec```\n\n## Using img2vec as a library\n```python\nfrom img2vec_pytorch import Img2Vec\nfrom PIL import Image\n\n# Initialize Img2Vec with GPU\nimg2vec = Img2Vec(cuda=True)\n\n# Read in an image (rgb format)\nimg = Image.open('test.jpg')\n# Get a vector from img2vec, returned as a torch FloatTensor\nvec = img2vec.get_vec(img, tensor=True)\n# Or submit a list\nvectors = img2vec.get_vec(list_of_PIL_images)\n```\n\n##### For running the example, you will additionally need:\n * Pillow:  ```pip install Pillow```\n * Sklearn ```pip install scikit-learn```\n\n## Running the example\n```git clone https://github.com/christiansafka/img2vec.git```\n\n```cd img2vec/example```\n\n```python test_img_similarity.py```\n\n#### Expected output\n```\nWhich filename would you like similarities for?\ncat.jpg\n0.72832 cat2.jpg\n0.641478 catdog.jpg\n0.575845 face.jpg\n0.516689 face2.jpg\n\nWhich filename would you like similarities for?\nface2.jpg\n0.668525 face.jpg\n0.516689 cat.jpg\n0.50084 cat2.jpg\n0.484863 catdog.jpg\n```\nTry adding your own photos!\n\n\n#### Img2Vec Params\n**cuda** = (True, False) &nbsp; # Run on GPU? &nbsp; &nbsp; default: False<br>\n**model** = ('resnet-18', 'alexnet', 'vgg', 'densenet') &nbsp; # Which model to use? &nbsp; &nbsp; default: 'resnet-18'<br>\n\n## Advanced users \n----\n\n### Read only file systems\n\nIf you use this library from the app running in read only environment (for example, docker container), \nspecify writable directory where app can store pre-trained models. \n\n```bash\nexport TORCH_HOME=/tmp/torch\n```\n\n### Additional Parameters\n\n**layer** = 'layer_name' or int &nbsp; # For advanced users, which layer of the model to extract the output from.&nbsp;&nbsp; default: 'avgpool' <br>\n**layer_output_size** = int &nbsp; # Size of the output of your selected layer\n\n### [Resnet-18](http://pytorch-zh.readthedocs.io/en/latest/_modules/torchvision/models/resnet.html)\nDefaults: (layer = 'avgpool', layer_output_size = 512)<br>\nLayer parameter must be an string representing the name of a  layer below\n```python\nconv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)\nbn1 = nn.BatchNorm2d(64)\nrelu = nn.ReLU(inplace=True)\nmaxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\nlayer1 = self._make_layer(block, 64, layers[0])\nlayer2 = self._make_layer(block, 128, layers[1], stride=2)\nlayer3 = self._make_layer(block, 256, layers[2], stride=2)\nlayer4 = self._make_layer(block, 512, layers[3], stride=2)\navgpool = nn.AvgPool2d(7)\nfc = nn.Linear(512 * block.expansion, num_classes)\n```\n### [Alexnet](http://pytorch-zh.readthedocs.io/en/latest/_modules/torchvision/models/alexnet.html)\nDefaults: (layer = 2, layer_output_size = 4096)<br>\nLayer parameter must be an integer representing one of the layers below\n```python\nalexnet.classifier = nn.Sequential(\n            7. nn.Dropout(),                  < - output_size = 9216\n            6. nn.Linear(256 * 6 * 6, 4096),  < - output_size = 4096\n            5. nn.ReLU(inplace=True),         < - output_size = 4096\n            4. nn.Dropout(),\t\t      < - output_size = 4096\n            3. nn.Linear(4096, 4096),\t      < - output_size = 4096\n            2. nn.ReLU(inplace=True),         < - output_size = 4096\n            1. nn.Linear(4096, num_classes),  < - output_size = 4096\n        )\n```\n\n### [Vgg](https://pytorch.org/vision/stable/_modules/torchvision/models/vgg.html)\nDefaults: (layer = 2, layer_output_size = 4096)<br>\n```python\nvgg.classifier = nn.Sequential(\n            nn.Linear(512 * 7 * 7, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n            nn.Linear(4096, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n            nn.Linear(4096, num_classes),\n        )\n```\n\n### [Densenet](https://pytorch.org/vision/stable/_modules/torchvision/models/densenet.html)\nDefaults: (layer = 1 from features, layer_output_size = 1024)<br>\n```python\ndensenet.features = nn.Sequential(OrderedDict([\n\t('conv0', nn.Conv2d(3, num_init_features, kernel_size=7, stride=2,\n\t\t\t\t\t\tpadding=3, bias=False)),\n\t('norm0', nn.BatchNorm2d(num_init_features)),\n\t('relu0', nn.ReLU(inplace=True)),\n\t('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),\n]))\n```\n\n### [EfficientNet](https://arxiv.org/abs/1905.11946)\nDefaults: (layer = 1 from features, layer_output_size = 1280 for efficientnet_b0 model)<br>\n\n\n## To-do\n- Benchmark speed and accuracy\n- Add ability to fine-tune on input data\n- Export documentation to a normal place\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/christiansafka/img2vec",
    "keywords": "img2vec image vector classification pytorch convert",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "img2vec-pytorch",
    "package_url": "https://pypi.org/project/img2vec-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/img2vec-pytorch/",
    "project_urls": {
      "Homepage": "https://github.com/christiansafka/img2vec"
    },
    "release_url": "https://pypi.org/project/img2vec-pytorch/1.0.1/",
    "requires_dist": [
      "torch",
      "torchvision",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Use pre-trained models in PyTorch to extract vector embeddings for any image",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12371335,
  "releases": {
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94e66f1e8d1918d2272c6b9b61b249bc255973f8b2aa15ed79d8e96fd7423a7a",
          "md5": "cd3d3c86116ddc118ae676dedada2758",
          "sha256": "668e2f8916b388d6bf749736a45c24dfcb541541a881b9ff71221d431275cb9a"
        },
        "downloads": -1,
        "filename": "img2vec_pytorch-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cd3d3c86116ddc118ae676dedada2758",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4187,
        "upload_time": "2019-10-09T10:51:14",
        "upload_time_iso_8601": "2019-10-09T10:51:14.630787Z",
        "url": "https://files.pythonhosted.org/packages/94/e6/6f1e8d1918d2272c6b9b61b249bc255973f8b2aa15ed79d8e96fd7423a7a/img2vec_pytorch-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0426fee404cde9f37e0521e1db9d01b05b2251f39ba924b3e8a8e1c4b91eea48",
          "md5": "59abc8002ee7f9db842a0d4db57ed5fa",
          "sha256": "78a54570bde385e0cd7ec2fc8f61442aee8d7b33a389672785a57cd2c1b039e6"
        },
        "downloads": -1,
        "filename": "img2vec_pytorch-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59abc8002ee7f9db842a0d4db57ed5fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6386,
        "upload_time": "2021-12-21T13:54:57",
        "upload_time_iso_8601": "2021-12-21T13:54:57.000630Z",
        "url": "https://files.pythonhosted.org/packages/04/26/fee404cde9f37e0521e1db9d01b05b2251f39ba924b3e8a8e1c4b91eea48/img2vec_pytorch-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af6831aedb14b9654da0e67ecc6cf23cb805f1eece08dee0e82a65114e77e101",
          "md5": "d4735b418be3ec2372eba0dc3d83081f",
          "sha256": "e7cde5bda488a2e1743ef68cc3064e6810de9aa0dd57bf68af86c91ed4a371e2"
        },
        "downloads": -1,
        "filename": "img2vec_pytorch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4735b418be3ec2372eba0dc3d83081f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5738,
        "upload_time": "2021-12-21T13:54:58",
        "upload_time_iso_8601": "2021-12-21T13:54:58.879340Z",
        "url": "https://files.pythonhosted.org/packages/af/68/31aedb14b9654da0e67ecc6cf23cb805f1eece08dee0e82a65114e77e101/img2vec_pytorch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a1230eba1aa241abf034b7dfc4f76c7b95f9d0bc8fa374fc4d69fb4f095e0be",
          "md5": "1c99cbbf2efc90de1a44b0cb8fe8c46a",
          "sha256": "b68cf9a30c8c17b0c19279f537e1dce6c78370e191414bf6589f62ae9c140adf"
        },
        "downloads": -1,
        "filename": "img2vec_pytorch-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c99cbbf2efc90de1a44b0cb8fe8c46a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6868,
        "upload_time": "2021-12-21T14:26:18",
        "upload_time_iso_8601": "2021-12-21T14:26:18.783126Z",
        "url": "https://files.pythonhosted.org/packages/8a/12/30eba1aa241abf034b7dfc4f76c7b95f9d0bc8fa374fc4d69fb4f095e0be/img2vec_pytorch-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b3f68566abae6d5f49ec3180e7402d65be94678561fd3a1f406826178cbe808",
          "md5": "d80670e9afea35c390824745b328fd31",
          "sha256": "c173b2ef8b4de673017f7cbb90d7febf48403c28d01aed47a231c3c5316d24f1"
        },
        "downloads": -1,
        "filename": "img2vec_pytorch-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d80670e9afea35c390824745b328fd31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6449,
        "upload_time": "2021-12-21T14:26:20",
        "upload_time_iso_8601": "2021-12-21T14:26:20.132908Z",
        "url": "https://files.pythonhosted.org/packages/0b/3f/68566abae6d5f49ec3180e7402d65be94678561fd3a1f406826178cbe808/img2vec_pytorch-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a1230eba1aa241abf034b7dfc4f76c7b95f9d0bc8fa374fc4d69fb4f095e0be",
        "md5": "1c99cbbf2efc90de1a44b0cb8fe8c46a",
        "sha256": "b68cf9a30c8c17b0c19279f537e1dce6c78370e191414bf6589f62ae9c140adf"
      },
      "downloads": -1,
      "filename": "img2vec_pytorch-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c99cbbf2efc90de1a44b0cb8fe8c46a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6868,
      "upload_time": "2021-12-21T14:26:18",
      "upload_time_iso_8601": "2021-12-21T14:26:18.783126Z",
      "url": "https://files.pythonhosted.org/packages/8a/12/30eba1aa241abf034b7dfc4f76c7b95f9d0bc8fa374fc4d69fb4f095e0be/img2vec_pytorch-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b3f68566abae6d5f49ec3180e7402d65be94678561fd3a1f406826178cbe808",
        "md5": "d80670e9afea35c390824745b328fd31",
        "sha256": "c173b2ef8b4de673017f7cbb90d7febf48403c28d01aed47a231c3c5316d24f1"
      },
      "downloads": -1,
      "filename": "img2vec_pytorch-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d80670e9afea35c390824745b328fd31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6449,
      "upload_time": "2021-12-21T14:26:20",
      "upload_time_iso_8601": "2021-12-21T14:26:20.132908Z",
      "url": "https://files.pythonhosted.org/packages/0b/3f/68566abae6d5f49ec3180e7402d65be94678561fd3a1f406826178cbe808/img2vec_pytorch-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}