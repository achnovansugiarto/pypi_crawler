{
  "info": {
    "author": "djipidi",
    "author_email": "djipidi.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Graphene-Django-Crud\n\nInspired by prisma-nexus and graphene-django-extras, this package transforms the\ndjango orm into a graphql API with the following features:\n\n- Expose CRUD opÃ©rations\n- Optimized queryset\n- Filtering with logical operators\n- Authentication and permissions\n- Nested mutations\n\n## Table of contents\n\n- [Graphene-Django-Crud](#graphene-django-crud)\n  - [Table of contents](#table-of-contents)\n  - [Installation](#installation)\n    - [Install with pip](#install-with-pip)\n    - [Install with source code](#install-with-source-code)\n  - [Usage](#usage)\n    - [Example](#example)\n    - [Computed Field](#computed-field)\n    - [User permissions](#user-permissions)\n    - [Filtering by user](#filtering-by-user)\n    - [Use with relay](#use-with-relay)\n    - [Extend ConnectionType](#extend-connectiontype)\n      - [Use list field](#use-list-field)\n      - [Extend ConnectionType without Relay](#extend-connectiontype-without-relay)\n      - [Extend ConnectionType with Relay](#extend-connectiontype-with-relay)\n  - [DjangoCRUDObjectType Class](#djangocrudobjecttype-class)\n    - [Meta parameters](#meta-parameters)\n      - [model](#model)\n      - [max_limit](#max_limit)\n      - [only_fields / exclude_fields](#only_fields--exclude_fields)\n      - [input_only_fields / input_exclude_fields](#input_only_fields--input_exclude_fields)\n      - [create_only_fields / create_exclude_fields](#create_only_fields--create_exclude_fields)\n      - [update_only_fields / update_exclude_fields](#update_only_fields--update_exclude_fields)\n      - [input_extend_fields](#input_extend_fields)\n      - [where_only_fields / where_exclude_fields](#where_only_fields--where_exclude_fields)\n      - [order_by_only_fields / order_by_exclude_fields](#order_by_only_fields--order_by_exclude_fields)\n      - [create_mutation / update_mutation / delete_mutation](#create_mutation--update_mutation--delete_mutation)\n      - [validator](#validator)\n      - [validator_exclude](#validator_exclude)\n      - [validator_validate_unique](#validator_validate_unique)\n    - [Graphene Fields](#graphene-fields)\n      - [ReadField](#readfield)\n      - [BatchReadField](#batchreadfield)\n      - [CreateField](#createfield)\n      - [UpdateField](#updatefield)\n      - [DeleteField](#deletefield)\n    - [Input Types](#input-types)\n      - [WhereInputType](#whereinputtype)\n      - [OrderByInputType](#orderbyinputtype)\n      - [CreateInputType](#createinputtype)\n      - [UpdateInputType](#updateinputtype)\n    - [Methods to override](#methods-to-override)\n      - [get_queryset(cls, parent, info, \\*\\*kwargs)](#get_querysetcls-parent-info-kwargs)\n      - [mutate, create, update, delete](#mutate-create-update-delete)\n      - [(Deprecated) Middleware methods before_XXX(cls, parent, info, instance, data) / after_XXX(cls, parent, info, instance, data)](#deprecated-middleware-methods-before_xxxcls-parent-info-instance-data--after_xxxcls-parent-info-instance-data)\n  - [Settings](#settings)\n    - [Customize](#customize)\n      - [DEFAULT_CONNECTION_NODES_FIELD_NAME](#default_connection_nodes_field_name)\n      - [FILE_TYPE_CONTENT_FIELD_ACTIVE](#file_type_content_field_active)\n      - [CONVERT_ENUM_FIELDS](#convert_enum_fields)\n    - [Compatibility with old version](#compatibility-with-old-version)\n      - [SCALAR_FILTERS_ADD_EQUALS_FIELD](#scalar_filters_add_equals_field)\n      - [BOOLEAN_FILTER_USE_BOOLEAN_FIELD](#boolean_filter_use_boolean_field)\n  - [Utils](#utils)\n      - [@resolver_hints(only: list\\[str\\], select_related:list\\[str\\])](#resolver_hintsonly-liststr-select_relatedliststr)\n      - [where_input_to_Q(where_input: dict) -> Q](#where_input_to_qwhere_input-dict---q)\n      - [order_by_input_to_args(order_by_input: list\\[dict\\]) -> list\\[str\\]](#order_by_input_to_argsorder_by_input-listdict---liststr)\n  - [Schema generated](#schema-generated)\n    - [Fields Mapping](#fields-mapping)\n    - [Model mutation / query fields](#model-mutation--query-fields)\n    - [Model types](#model-types)\n    - [File](#file)\n    - [FileInput](#fileinput)\n    - [Binary](#binary)\n    - [OrderEnum](#orderenum)\n    - [Scalar filters](#scalar-filters)\n\n## Installation\n\n> For the support of\n> [Multipart Request Spec](https://github.com/jaydenseric/graphql-multipart-request-spec),\n> install [graphene-file-upload](https://pypi.org/project/graphene-file-upload/)\n> according to the documentation.\n\n### Install with pip\n\nTo install graphene-django-crud, simply run this simple command in your terminal\nof choice:\n\n```\n$ pip install graphene-django-crud\n```\n\n### Install with source code\n\ngraphene-django-crud is developed on GitHub, You can either clone the public\nrepository:\n\n```\n$ git clone https://github.com/djipidi/graphene_django_crud.git\n```\n\nOnce you have a copy of the source, you can embed it in your own Python package,\nor install it into your site-packages easily:\n\n```\n$ cd graphene_django_crud\n$ python setup.py install\n```\n\n## Usage\n\nThe DjangoCRUDObjectType class project a django model into a graphene type. The\ntype has fields to exposes the CRUD operations.\n\n### Example\n\nIn this example, you will be able to project the auth django models on your\nGraphQL API and expose the CRUD operations.\n\n```python\n# schema.py\nimport graphene\nfrom graphql import GraphQLError\nfrom django.contrib.auth.models import User, Group\nfrom graphene_django_crud.types import DjangoCRUDObjectType, resolver_hints\n\nclass UserType(DjangoCRUDObjectType):\n    class Meta:\n        model = User\n        exclude_fields = (\"password\",)\n        input_exclude_fields = (\"last_login\", \"date_joined\")\n\n    full_name = graphene.String()\n\n\n    @resolver_hints(\n      only=[\"first_name\", \"last_name\"]\n    )\n    @staticmethod\n    def resolve_full_name(parent, info, **kwargs):\n        return parent.get_full_name()\n\n    @classmethod\n    def get_queryset(cls, parent, info, **kwargs):\n        if info.context.user.is_authenticated:\n            return User.objects.all()\n        else:\n            return User.objects.none()\n\n    @classmethod\n    def mutate(cls, parent, info, instance, data, *args, **kwargs):\n        if not info.context.user.is_staff:\n            raise GraphQLError('not permited, only staff user')\n\n        if \"password\" in data.keys():\n            instance.set_password(data.pop(\"password\"))\n        return super().mutate(parent, info, instance, data, *args, **kwargs)\n\nclass GroupType(DjangoCRUDObjectType):\n    class Meta:\n        model = Group\n\nclass Query(graphene.ObjectType):\n\n    me = graphene.Field(UserType)\n    user = UserType.ReadField()\n    users = UserType.BatchReadField()\n\n    group = GroupType.ReadField()\n    groups = GroupType.BatchReadField()\n\n    def resolve_me(parent, info, **kwargs):\n        if not info.context.user.is_authenticated:\n            return None\n        else:\n            return info.context.user\n\nclass Mutation(graphene.ObjectType):\n\n    user_create = UserType.CreateField()\n    user_update = UserType.UpdateField()\n    user_delete = UserType.DeleteField()\n\n    group_create = GroupType.CreateField()\n    group_update = GroupType.UpdateField()\n    group_delete = GroupType.DeleteField()\n\n```\n\nAnd get the resulting GraphQL API:\n\n<details>\n  <summary>toggle me</summary>\n\n```gql\nschema {\n  query: Query\n  mutation: Mutation\n}\n\nscalar DateTime\n\ninput DatetimeFilter {\n  equals: DateTime\n  exact: DateTime\n  in: [DateTime]\n  isnull: Boolean\n  gt: DateTime\n  gte: DateTime\n  lt: DateTime\n  lte: DateTime\n  year: IntFilter\n  month: IntFilter\n  day: IntFilter\n  weekDay: IntFilter\n  hour: IntFilter\n  minute: IntFilter\n  second: IntFilter\n}\n\ntype ErrorType {\n  field: String!\n  messages: [String!]!\n}\n\ninput GroupCreateInput {\n  name: String!\n  userSet: UserCreateNestedManyInput\n}\n\ninput GroupCreateNestedManyInput {\n  create: [GroupCreateInput]\n  connect: [GroupWhereInput]\n}\n\ninput GroupOrderByInput {\n  id: OrderEnum\n  name: OrderStringEnum\n}\n\ntype GroupType {\n  id: ID\n  name: String\n  userSet(where: UserWhereInput, orderBy: [UserOrderByInput], limit: Int, offset: Int): UserConnection\n}\n\ntype GroupConnection {\n  data: [GroupType]!\n  count: Int\n}\n\ntype GroupCreatePayload {\n  ok: Boolean\n  errors: [ErrorType]\n  result: GroupType\n}\n\ntype GroupUpdatePayload {\n  ok: Boolean\n  errors: [ErrorType]\n  result: GroupType\n}\ntype GroupDeletePayload {\n  ok: Boolean\n  errors: [ErrorType]\n}\n\ninput GroupUpdateInput {\n  name: String\n  userSet: UserUpdateNestedManyInput\n}\n\ninput GroupUpdateNestedManyInput {\n  create: [GroupCreateInput]\n  delete: [GroupWhereInput]\n  connect: [GroupWhereInput]\n  disconnect: [GroupWhereInput]\n}\n\ninput GroupWhereInput {\n  id: IdFilter\n  name: StringFilter\n  user: UserWhereInput\n  OR: [GroupWhereInput]\n  AND: [GroupWhereInput]\n  NOT: GroupWhereInput\n}\n\ninput IdFilter {\n  equals: ID\n  exact: ID\n  in: [ID]\n  isnull: Boolean\n}\n\ninput IntFilter {\n  equals: Int\n  exact: Int\n  in: [Int]\n  isnull: Boolean\n  gt: Int\n  gte: Int\n  lt: Int\n  lte: Int\n  contains: Int\n  startswith: Int\n  endswith: Int\n  regex: String\n}\n\ntype Mutation {\n  userCreate(input: UserCreateInput!): UserCreatePayload\n  userUpdate(input: UserUpdateInput!, where: UserWhereInput!): UserUpdatePayload\n  userDelete(where: UserWhereInput!): UserDeletePayload\n  groupCreate(input: GroupCreateInput!): GroupCreatePayload\n  groupUpdate(input: GroupUpdateInput!, where: GroupWhereInput!): GroupUpdatePayload\n  groupDelete(where: GroupWhereInput!): GroupDeletePayload\n}\n\nenum OrderEnum {\n  ASC\n  DESC\n}\n\nenum OrderStringEnum {\n  ASC\n  DESC\n}\n\ntype Query {\n  me: UserType\n  user(where: UserWhereInput!): UserType\n  users(where: UserWhereInput, orderBy: [UserOrderByInput], limit: Int, offset: Int): UserConnection\n  group(where: GroupWhereInput!): GroupType\n  groups(where: GroupWhereInput, orderBy: [GroupOrderByInput], limit: Int, offset: Int): GroupConnection\n}\n\ninput StringFilter {\n  equals: String\n  exact: String\n  in: [String]\n  isnull: Boolean\n  contains: String\n  startswith: String\n  endswith: String\n  regex: String\n  iexact: String\n  icontains: String\n  istartswith: String\n  iendswith: String\n}\n\ninput UserCreateInput {\n  email: String\n  firstName: String\n  groups: GroupCreateNestedManyInput\n  isActive: Boolean\n  isStaff: Boolean\n  isSuperuser: Boolean\n  lastName: String\n  password: String!\n  username: String!\n}\n\ninput UserCreateNestedManyInput {\n  create: [UserCreateInput]\n  connect: [UserWhereInput]\n}\n\ninput UserOrderByInput {\n  dateJoined: OrderEnum\n  email: OrderStringEnum\n  firstName: OrderStringEnum\n  id: OrderEnum\n  isActive: OrderEnum\n  isStaff: OrderEnum\n  isSuperuser: OrderEnum\n  lastLogin: OrderEnum\n  lastName: OrderStringEnum\n  username: OrderStringEnum\n}\n\ntype UserType {\n  id: ID\n  dateJoined: DateTime\n  email: String\n  firstName: String\n  groups(where: GroupWhereInput, orderBy: [GroupOrderByInput], limit: Int, offset: Int): GroupConnection\n  isActive: Boolean\n  isStaff: Boolean\n  isSuperuser: Boolean\n  lastLogin: DateTime\n  lastName: String\n  username: String\n  fullName: String\n}\n\ntype UserConnection {\n  data: [UserType]!\n  count: Int\n}\n\ntype UserCreatePayload {\n  ok: Boolean\n  errors: [ErrorType]\n  result: UserType\n}\n\ntype UserUpdatePayload {\n  ok: Boolean\n  errors: [ErrorType]\n  result: UserType\n}\n\ntype UserDeletePayload {\n  ok: Boolean\n  errors: [ErrorType]\n}\n\ninput UserUpdateInput {\n  email: String\n  firstName: String\n  groups: GroupUpdateNestedManyInput\n  isActive: Boolean\n  isStaff: Boolean\n  isSuperuser: Boolean\n  lastName: String\n  password: String\n  username: String\n}\n\ninput UserUpdateNestedManyInput {\n  create: [UserCreateInput]\n  delete: [UserWhereInput]\n  connect: [UserWhereInput]\n  disconnect: [UserWhereInput]\n}\n\ninput UserWhereInput {\n  id: IdFilter\n  dateJoined: DatetimeFilter\n  email: StringFilter\n  firstName: StringFilter\n  groups: GroupWhereInput\n  isActive: Boolean\n  isStaff: Boolean\n  isSuperuser: Boolean\n  lastLogin: DatetimeFilter\n  lastName: StringFilter\n  username: StringFilter\n  OR: [UserWhereInput]\n  AND: [UserWhereInput]\n  NOT: UserWhereInput\n}\n```\n\n</details>\n\nQueries example:\n\n```gql\n\nquery{\n  user(where: {id: {equals:1}}){\n    id\n    username\n    firstName\n    lastName\n  }\n}\n\n\nquery{\n  users(\n    where: {\n      OR: [\n        {isStaff: true},\n        {isSuperuser: true},\n        {groups: {name: {equals: \"admin\"}}},\n      ]\n    }\n    orderBy: [{username: ASC}],\n    limit: 100,\n    offset: 0\n  ){\n    count\n    data{\n      id\n      username\n      firstName\n      lastName\n      groups{\n        count\n        data{\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nmutation{\n  groupCreate(\n    input: {\n      name: \"admin\",\n      userSet: {\n        create: [\n          {username: \"woody\", password: \"raC4RjDU\"},\n        ],\n        connect: [\n          {id: {equals: 1}}\n        ]\n      },\n    }\n  ){\n    ok\n    result{\n      id\n      name\n      userSet{\n        count\n        data{\n          id\n          username\n        }\n      }\n    }\n  }\n}\n\n```\n\n### Computed Field\n\nYou can add computed fields using the standard Graphene API. However to optimize\nthe SQL query you must specify \"only\", \"select_related\" necessary for the\nresolver using the resolver_hints decorator\n\n```python\nclass UserType(DjangoCRUDObjectType):\n    class Meta:\n        model = User\n\n    full_name = graphene.String()\n\n    @resolver_hints(\n      only=[\"first_name\", \"last_name\"]\n    )\n    @staticmethod\n    def resolve_full_name(parent, info, **kwargs):\n        return parent.get_full_name()\n```\n\n### User permissions\n\n[The methods mutate, create, update, delete](#mutate-create-update-delete) are\ncalled for each change of model instances during mutations and nested mutations.\nThey can be used to check permissions.\n\n```python\nclass UserType(DjangoCRUDObjectType):\n    class Meta:\n        model = User\n\n    @classmethod\n    def mutate(cls, parent, info, instance, data, *args, **kwargs):\n        if not info.context.user.is_authenticated:\n            raise GraphQLError('not authorized, you must be logged in')\n        return super().mutate(parent, info, instance, data, *args, **kwargs)\n\n    @classmethod\n    def create(cls, parent, info, instance, data, *args, **kwargs):\n        if not info.context.user.has_perm(\"add_user\"):\n            raise GraphQLError('not authorized, you must have add_user permission')\n        return super().create(parent, info, instance, data, *args, **kwargs)\n\n    @classmethod\n    def update(cls, parent, info, instance, data, *args, **kwargs):\n        if not info.context.user.has_perm(\"change_user\"):\n            raise GraphQLError('not authorized, you must have change_user permission')\n        return super().update(parent, info, instance, data, *args, **kwargs)\n\n    @classmethod\n    def delete(cls, parent, info, instance, data, *args, **kwargs):\n        if not info.context.user.has_perm(\"delete_user\"):\n            raise GraphQLError('not authorized, you must have delete_user permission')\n        return super().delete(parent, info, instance, data, *args, **kwargs)\n\n```\n\n### Filtering by user\n\nTo filter based on the authenticated user, overload the get_queryset method as\nthe example\n\n```python\nclass UserType(DjangoCRUDObjectType):\n    class Meta:\n        model = User\n\n    @classmethod\n    def get_queryset(cls, parent, info, **kwargs):\n        if info.context.user.is_authenticated:\n            return User.objects.all()\n        else:\n            return User.objects.none()\n```\n\n### Use with relay\n\nThe configuration is the same as graphene-django, just add the \"relay.Node\"\ninterface.\n\n```python\n\nclass CategoryType(DjangoCRUDObjectType):\n    class Meta:\n        model = Category\n        interfaces = (relay.Node, )\n\n\nclass IngredientType(DjangoCRUDObjectType):\n    class Meta:\n        model = Ingredient\n        interfaces = (relay.Node, )\n\n\nclass Query(graphene.ObjectType):\n\n    node = relay.Node.Field()\n\n    category = CategoryType.ReadField()\n    all_categories = CategoryType.BatchReadField()\n\n    ingredient = IngredientType.ReadField()\n    all_ingredients = IngredientType.BatchReadField()\n\n```\n\nRelay.global_id as well as model id are supported to write the query using the\n\"id\" field of whereInputType.\n\n### Extend ConnectionType\n\nBy default, graphene_django_crud creates a connection type for the bachread\nrequest and the many_to_many/many_to_one relationships.\n\nthe default connection has a \"count\" field returning the count() value of the\nqueryset and a data field returning the results of the queryset.\n\n#### Use list field\n\n```python\nfrom .models import Product\nimport graphene\nfrom graphene_django_crud import DjangoCRUDObjectType\n\nclass ProductType(DjangoCRUDObjectType):\n    class Meta:\n        model = Product\n        use_connection = False\n```\n\n#### Extend ConnectionType without Relay\n\n```python\nfrom .models import Product\nfrom django.db.models import Avg\nimport graphene\nfrom graphene_django_crud import DefaultConnection, DjangoCRUDObjectType\n\nclass ConnectionWithPriceAVG(DefaultConnection):\n    class Meta:\n        abstract = True\n\n    price_avg = graphene.Float()\n\n    def resolve_price_avg(self, info):\n        return self.iterable.aggregate(Avg('price'))[\"price__avg\"]\n\nclass ProductType(DjangoCRUDObjectType):\n    class Meta:\n        model = Product\n        connection_class = ConnectionWithPriceAVG\n```\n\n#### Extend ConnectionType with Relay\n\n```python\nfrom .models import Product\nimport graphene\nfrom graphene_django_crud import DjangoCRUDObjectType\n\nclass ConnectionWithTotalCount(graphene.Connection):\n    class Meta:\n        abstract = True\n    total_count = graphene.Int()\n\n    def resolve_total_count(self, info):\n        return self.iterable.count()\n\nclass ProductType(DjangoCRUDObjectType):\n    class Meta:\n        model = Product\n        interfaces = (relay.Node, )\n        connection_class = ConnectionWithTotalCount\n```\n\n## DjangoCRUDObjectType Class\n\n> From the version v1.3.0, `DjangoGrapheneCRUD` class has been renamed to\n> `DjangoCRUDObjectType`, so the name \"DjangoGrapheneCRUD\" is deprecated.\n\n### Meta parameters\n\n#### model\n\nRequired parameter\\\nThe model used for the definition type\n\n#### max_limit\n\ndefault : `None`\\\nTo avoid too large transfers, the max_limit parameter imposes\na maximum number of return items for batchreadField and nodeField. it imposes to\nuse pagination. If the value is `None` there is no limit.\n\n#### only_fields / exclude_fields\n\nTuple of model fields to include/exclude in graphql type. Only one of the two\nparameters can be declared.\n\n#### input_only_fields / input_exclude_fields\n\nTuple of model fields to include/exclude in graphql create and update inputs\ntype. Only one of the two parameters can be declared.\n\n#### create_only_fields / create_exclude_fields\n\nTuple of model fields to include/exclude in graphql create inputs\ntype. Only one of the two parameters can be declared.\n\n#### update_only_fields / update_exclude_fields\n\nTuple of model fields to include/exclude in graphql update inputs\ntype. Only one of the two parameters can be declared.\n\n#### input_extend_fields\n\nField list to extend the create and update inputs. value must be a list of tuple\n(name: string, type: graphene.ObjectType). The parameters can be processed with\nmethods [mutate, create, update, delete](#mutate-create-update-delete)\n\nexample:\n\n```python\nclass UserType(DjangoCRUDObjectType):\n    class Meta:\n        model = User\n        input_extend_fields = (\n            (\"fullName\", graphene.String()),\n        )\n\n    @classmethod\n    def mutate(cls, parent, info, instance, data, *args, **kwargs):\n        if \"fullName\" in data.keys():\n            instance.first_name = data[\"fullName\"].split(\" \")[0]\n            instance.last_name = data[\"fullName\"].split(\" \")[1]\n        return super().mutate(parent, info, instance, data, *args, **kwargs)\n```\n\n#### where_only_fields / where_exclude_fields\n\nTuple of model fields to include/exclude in graphql where input type. Only one\nof the two parameters can be declared.\n\n#### order_by_only_fields / order_by_exclude_fields\n\nTuple of model fields to include/exclude in graphql order_by input type. Only\none of the two parameters can be declared.\n\n#### create_mutation / update_mutation / delete_mutation\n\ndefault: True\\\nActivate/deactivate the nested mutation.\n\n#### validator\n\ndefault: True\\\nActivate/deactivate the validation of the model. if the value is\nTrue, full_clean() method of model will be called before save().\n\n#### validator_exclude\n\ndefault: None\\\nThe exclude argument of full_clean() method.\n\n#### validator_validate_unique\n\ndefault: True\\\nThe validate_unique argument of full_clean() method.\n\n### Graphene Fields\n\nThe DjangoCRUDObjectType class contains configurable operation publishers that\nyou use for exposing create, read, update, and delete mutations against your\nprojected models\n\nfor mutating, relation fields may be connected with an existing record or a\nsub-create may be inlined (generally referred to as nested mutations). If the\nrelation is a List then multiple connections or sub-creates are permitted.\n\nInlined mutations are very similar to top-level ones but have the important\ndifference that the sub-create has excluded the field where supplying its\nrelation to the type of parent Object being created would normally be. This is\nbecause a sub-create forces its record to relate to the parent one.\n\n> **Warning**: By default, mutations are not atomic, specify `ATOMIC_REQUESTS`\n> or `ATOMIC_MUTATIONS` on True in your setting.py\\\n> See:\n> [Transaction with graphene-django](https://docs.graphene-python.org/projects/django/en/latest/mutations/#django-database-transactions)\n\n#### ReadField\n\nQuery field to allow clients to find one particular record at time of the\nrespective model.\n\n#### BatchReadField\n\nQuery field to allow clients to fetch multiple records at once of the respective\nmodel.\n\n#### CreateField\n\nMutation field to allow clients to create one record at time of the respective\nmodel.\n\n#### UpdateField\n\nMutation field to allow clients to update one particular record at time of the\nrespective model.\n\n#### DeleteField\n\nMutation field to allow clients to delete one particular record at time of the\nrespective model.\n\n### Input Types\n\n#### WhereInputType\n\nInput type composed of [the scalar filters](#scalar-filters) of each readable\nfields of the model. The logical operators \"OR\", \"AND\", \"NO\" are also included.\nthe returned arg can be used in queryset with function\n[where_input_to_Q](#where_input_to_qwhere_input-dict---q)\n\n#### OrderByInputType\n\nInput type composed of the orderByEnum of each readable fields of the model.\n\n#### CreateInputType\n\nInput type composed of model fields without the id. If the field is not\nnullable, the graphene field is required.\n\n#### UpdateInputType\n\nInput type composed of each fields of the model. No fields are required.\n\n### Methods to override\n\n#### get_queryset(cls, parent, info, \\*\\*kwargs)\n\n```python\n@classmethod\ndef get_queryset(cls, parent, info, **kwargs):\n    return queryset_class\n```\n\nDefault it returns \"model.objects.all()\", the overload is useful for applying\nfiltering based on user. The method is called in nested request, fetch instances\nfor mutations and subscription filter.\n\n#### mutate, create, update, delete\n\nMethods called for each mutation and nested mutation impacting the model.\nOverload this method to add preprocessing and / or overprocessing. The mutate\nmethod is called before the create, update, delete methods. The \"data\" argument\nis a dict corresponding to the graphql input argument.\n\n```python\n@classmethod\ndef mutate(cls, parent, info, instance, data, *args, **kwargs):\n    # code before save instance\n    instance = super().mutate(cls, parent, info, instance, data, *args, **kwargs)\n    # code after save instance\n    return instance\n\n@classmethod\ndef create(cls, parent, info, instance, data, *args, **kwargs):\n    # code before save instance\n    instance = super().create(cls, parent, info, instance, data, *args, **kwargs)\n    # code after save instance\n    return instance\n\n@classmethod\ndef update(cls, parent, info, instance, data, *args, **kwargs):\n    # code before save instance\n    instance = super().update(cls, parent, info, instance, data, *args, **kwargs)\n    # code after save instance\n    return instance\n\n@classmethod\ndef delete(cls, parent, info, instance, data, *args, **kwargs):\n    # code before save instance\n    instance = super().delete(cls, parent, info, instance, data, *args, **kwargs)\n    # code after save instance\n    return instance\n```\n\n#### (Deprecated) Middleware methods before_XXX(cls, parent, info, instance, data) / after_XXX(cls, parent, info, instance, data)\n\n> from the version v1.3.0, these methods are deprecated, use the methods\n> [mutate, create, update, delete](#mutate-create-update-delete)\n\n```python\n@classmethod\ndef before_mutate(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef before_create(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef before_update(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef before_delete(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef after_mutate(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef after_create(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef after_update(cls, parent, info, instance, data):\n    pass\n\n@classmethod\ndef after_delete(cls, parent, info, instance, data):\n    pass\n```\n\nMethods called before or after a mutation. The \"instance\" argument is the\ninstance of the model that goes or has been modified retrieved from the \"where\"\nargument of the mutation, or it's been created by the model constructor. The\n\"data\" argument is a dict of the \"input\" argument of the mutation. The method is\nalso called in nested mutation.\n\n## Settings\n\nGraphene-django-crud reads your configuration from a single Django setting named\nGRAPHENE_DJANGO_CRUD:\n\n```python\nGRAPHENE_DJANGO_CRUD = {\n    \"DEFAULT_CONNECTION_NODES_FIELD_NAME\": \"nodes\"\n}\n```\n\nHereâs a list of settings available in graphene-django-crud and their default\nvalues:\n\n### Customize\n\n#### DEFAULT_CONNECTION_NODES_FIELD_NAME\n\nName of node field in connection field.\\\nDefault: `'data'`\n\n#### FILE_TYPE_CONTENT_FIELD_ACTIVE\n\nAdd a content field with the content of the file. The type used is\nBinary.\\\nDefault: `False`\n\n#### CONVERT_ENUM_FIELDS\n\nEnables / disables converting fields with choices to enum fields.\\\nDefault: `True`\n\n### Compatibility with old version\n\n#### SCALAR_FILTERS_ADD_EQUALS_FIELD\n\nFrom version 1.3.0 the \"equals\" field of all scalar filters has been renamed to\n\"exact\". To keep the client compatible we can add it by set the parameter to\n`True`.\\\nDefault: `False`\n\n#### BOOLEAN_FILTER_USE_BOOLEAN_FIELD\n\nFrom version 1.3.0 the filter boolean is like the other scalar filters. To keep\nthe client compatible we can add it by set the parameter to `True`.\\\nDefault:\n`False`\n\n## Utils\n\n#### @resolver_hints(only: list\\[str\\], select_related:list\\[str\\])\n\nEach query uses \"only\", \"select_related\" and \"prefetch_related\" methods of\nqueryset to get only the necessary attributes. To extend fields, the decorator\nis necessary for the queryset builder with its arguments which model attributes\nare needed to resolve the field.\n\nshow [Computed field](#Computed-field) section for more informations\n\n#### where_input_to_Q(where_input: dict) -> Q\n\nIn order to be able to reuse where input generated, the where_input_to_Q\nfunction transforms the returned argument into a Q object\n\nexample :\n\n```python\n<model>.objects.filter(where_input_to_Q(where))\n```\n\n#### order_by_input_to_args(order_by_input: list\\[dict\\]) -> list\\[str\\]\n\nIn order to be able to reuse order_by input generated, the\norder_by_input_to_args function transforms the returned argument into args for\norder_by method of queryset.\n\nexample :\n\n```python\n<model>.objects.all().order_by(*order_by_input_to_args(order_by))\n```\n\n## Schema generated\n\n[DjangoCRUDObjectType Class](#djangocrudobjecttype-class) contains configurable\nfields that you use for projecting fields of your django model onto graphql objects. \n\n### Fields Mapping\n\n| Model field               | \\<model\\>Type       | \\<model\\>WhereInput | \\<model\\>CreateInput           | \\<model\\>UpdateInput           | \\<model\\>orderByInput |\n| ------------------------- | ------------------- | ------------------- | ------------------------------ | ------------------------------ | --------------------- |\n| AutoField                 | ID                  | IDFilter            | ID                             | ID                             | OrderEnum             |\n| BigAutoField              | ID                  | IDFilter            | ID                             | ID                             | OrderEnum             |\n| UUIDField                 | UUID                | UUIDFilter          | UUID                           | UUID                           | OrderEnum             |\n| CharField                 | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| TextField                 | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| EmailField                | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| SlugField                 | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| URLField                  | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| GenericIPAddressField     | String              | StringFilter        | String                         | String                         | OrderStringEnum       |\n| PositiveIntegerField      | Int                 | IntFilter           | Int                            | Int                            | OrderEnum             |\n| PositiveSmallIntegerField | Int                 | IntFilter           | Int                            | Int                            | OrderEnum             |\n| SmallIntegerField         | Int                 | IntFilter           | Int                            | Int                            | OrderEnum             |\n| BigIntegerField           | Int                 | IntFilter           | Int                            | Int                            | OrderEnum             |\n| IntegerField              | Int                 | IntFilter           | Int                            | Int                            | OrderEnum             |\n| BooleanField              | Boolean             | BooleanFilter       | Boolean                        | Boolean                        | OrderEnum             |\n| BinaryField               | Binary              |                     | Binary                         | Binary                         |                       |\n| DecimalField              | Float               | FloatFilter         | Float                          | Float                          | OrderEnum             |\n| FloatField                | Float               | FloatFilter         | Float                          | Float                          | OrderEnum             |\n| DurationField             | Float               | FloatFilter         | Float                          | Float                          | OrderEnum             |\n| DateField                 | Date                | DateFilter          | Date                           | Date                           | OrderEnum             |\n| DateTimeField             | DateTime            | DatetimeFilter      | DateTime                       | DateTime                       | OrderEnum             |\n| TimeField                 | Time                | TimeFilter          | Time                           | Time                           | OrderEnum             |\n| FileField                 | File                | StringFilter        | FileInput                      | FileInput                      | OrderEnum             |\n| ImageField                | File                | StringFilter        | FileInput                      | FileInput                      | OrderEnum             |\n| ForeignKey                | \\<model\\>Type       | \\<model\\>WhereInput | \\<model\\>CreateNestedInput     | \\<model\\>UpdateNestedInput     | \\<model\\>OrderByInput |\n| ManyToOneRel              | \\<model\\>Connection | \\<model\\>WhereInput | \\<model\\>CreateNestedManyInput | \\<model\\>UpdateNestedManyInput |                       |\n| OneToOneField             | \\<model\\>Type       | \\<model\\>WhereInput | \\<model\\>CreateNestedInput     | \\<model\\>UpdateNestedInput     | \\<model\\>OrderByInput |\n| OneToOneRel               | \\<model\\>Type       | \\<model\\>WhereInput | \\<model\\>CreateNestedInput     | \\<model\\>UpdateNestedInput     | \\<model\\>OrderByInput |\n| ManyToManyField           | \\<model\\>Connection | \\<model\\>WhereInput | \\<model\\>CreateNestedManyInput | \\<model\\>UpdateNestedManyInput |                       |\n| ManyToManyRel             | \\<model\\>Connection | \\<model\\>WhereInput | \\<model\\>CreateNestedManyInput | \\<model\\>UpdateNestedManyInput |                       |\n\n### Model mutation / query fields\n\n```gql\n\nquery {\n  <model>(where: <model>CreateInput!): <model>Type\n  <model_plural_name>(\n    where: <model>CreateInput\n    orderBy: [<model>orderByInput]\n    limit: Int\n    offset: Int\n  ): <model>Connection\n}\n\nmutation {\n  <model>Create(input: <model>CreateInput!): <model>CreatePayload\n  <model>Update(input: <model>UpdateInput!, where: <model>UpdateInput!): <model>UpdatePayload\n  <model>Delete(where: <model>CreateInput!): <model>DeletePayload\n}\n\n```\n\n### Model types\n\n```gql\n\ntype <model>Type {\n  ...<fields Mapping>\n}\n\ntype <model>Connection {\n  data: [<modelType>]\n  count: Int\n}\n\ntype <model>CreatePayload {\n  ok: Boolean\n  errors: [errorType]\n  result: <model>Type\n}\n\ntype <model>UpdatePayload {\n  ok: Boolean\n  errors: [errorType]\n  result: <model>Type\n}\n\ntype <model>DeletePayload {\n  ok: Boolean\n  errors: [errorType]\n}\n\ninput <model>WhereInput {\n  ...<fields Mapping>\n}\n\ninput <model>CreateInput {\n  ...<fields Mapping>\n}\n\ninput <model>UpdateInput {\n  ...<fields Mapping>\n}\n\ninput <model>OrderByInput {\n  ...<fields Mapping>\n}\n\ninput <model>CreateNestedInput {\n  create: <related_model>CreateInput\n  connect: <related_model>WhereInput\n}\n\ninput <model>CreateNestedManyInput {\n  create: [<related_model>CreateInput]\n  connect: [<related_model>WhereInput]\n}\n\ninput <model>UpdateNestedInput {\n  create: <related_model>CreateInput\n  update: <related_model>UpdateInput\n  connect: <related_model>WhereInput\n  delete: Boolean\n  disconnect: Boolean\n}\n\ninput <model>UpdateNestedManyInput {\n  create: [<related_model>CreateInput]\n  update: [<related_model>UpdateWithWhereInput]\n  connect: [<related_model>WhereInput]\n  delete: [<related_model>WhereInput]\n  disconnect: [<related_model>WhereInput]\n}\n\ninput <model>UpdateWithWhereInput {\n  where: <model>WhereInput\n  input: <model>UpdateInput\n}\n\n```\n\n### File\n\n```gql\ntype File {\n  url: String\n  size: Int\n  filename: String\n  content: Binary\n}\n```\n\nRepresents File, it's converted for models.FileField and models.ImageField. The\ncontent field is deactivated by default, set the\n[FILE_TYPE_CONTENT_FIELD_ACTIVE](#file_type_content_field_active) setting to\n`True` for activate.\n\n### FileInput\n\n```gql\ninput FileInput {\n  upload: Upload\n  filename: String\n  content: Binary\n}\n```\n\nInput type used to upload the file by giving a name and the content of the file.\nThe upload field appears if graphene-file-upload is installed, it is used to\nupload this the\n[Multipart Request Spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n\n### Binary\n\n```gql\nscalar Binary\n```\n\nRepresents `Bytes` that are base64 encoded and decoded.\n\n### OrderEnum\n\n```\nenum OrderEnum {\n  ASC\n  DESC\n}\n\nenum OrderStringEnum {\n  ASC\n  DESC\n  IASC\n  IDESC\n}\n\n```\n\n### Scalar filters\n\n```gql\n\ninput IDFilter {\n  equals: ID\n  exact: ID\n  in: [ID]\n  isnull: Boolean\n}\n\ninput BooleanFilter {\n  equals: Boolean\n  exact: Boolean\n  in: [Boolean]\n  isnull: Boolean\n}\n\ninput UUIDFilter {\n  equals: UUID\n  exact: UUID\n  in: [UUID]\n  isnull: Boolean\n}\n\ninput StringFilter {\n  equals: String\n  exact: String\n  in: [String]\n  isnull: Boolean\n  contains: String\n  startswith: String\n  endswith: String\n  regex: String\n  iexact: String\n  icontains: String\n  istartswith: String\n  iendswith: String\n}\n\ninput IntFilter {\n  equals: Int\n  exact: Int\n  in: [Int]\n  isnull: Boolean\n  gt: Int\n  gte: Int\n  lt: Int\n  lte: Int\n  contains: Int\n  startswith: Int\n  endswith: Int\n  regex: String\n}\n\ninput FloatFilter {\n  equals: Float\n  exact: Float\n  in: [Float]\n  isnull: Boolean\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  contains: Float\n  startswith: Float\n  endswith: Float\n  regex: String\n}\n\ninput TimeFilter {\n  equals: Time\n  exact: Time\n  in: [Time]\n  isnull: Boolean\n  gt: Time\n  gte: Time\n  lt: Time\n  lte: Time\n  hour: IntFilter\n  minute: IntFilter\n  second: IntFilter\n}\n\ninput DateFilter {\n  equals: Date\n  exact: Date\n  in: [Date]\n  isnull: Boolean\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  year: IntFilter\n  month: IntFilter\n  day: IntFilter\n  weekDay: IntFilter\n}\n\ninput DatetimeFilter {\n  equals: DateTime\n  exact: DateTime\n  in: [DateTime]\n  isnull: Boolean\n  gt: DateTime\n  gte: DateTime\n  lt: DateTime\n  lte: DateTime\n  year: IntFilter\n  month: IntFilter\n  day: IntFilter\n  weekDay: IntFilter\n  hour: IntFilter\n  minute: IntFilter\n  second: IntFilter\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djipidi/graphene_django_crud",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphene-django-crud",
    "package_url": "https://pypi.org/project/graphene-django-crud/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphene-django-crud/",
    "project_urls": {
      "Homepage": "https://github.com/djipidi/graphene_django_crud"
    },
    "release_url": "https://pypi.org/project/graphene-django-crud/2.0.0/",
    "requires_dist": [
      "Django (>=3.2)",
      "graphene (<4,>=3.0)",
      "graphene-django (<4,>=3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Turns the django ORM into a graphql API",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15790437,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a174e6b920c27aaf6c416b60b70431a9adbca020753c38a441346a40bcd5222c",
          "md5": "25c58103bacde14f3e207a88c82b0213",
          "sha256": "8e27bcb872a16de38ad4cc7bf3d8bec97f756256b1dae434901dc742c950df5f"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25c58103bacde14f3e207a88c82b0213",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14940,
        "upload_time": "2021-01-12T13:53:54",
        "upload_time_iso_8601": "2021-01-12T13:53:54.019558Z",
        "url": "https://files.pythonhosted.org/packages/a1/74/e6b920c27aaf6c416b60b70431a9adbca020753c38a441346a40bcd5222c/graphene-django-crud-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23f31251eba753263159ece66377203b254f7dcebd743a23130d7271b49aa238",
          "md5": "f3515e2e1a5740f68e1876dc1316b4bb",
          "sha256": "d690a29a77edb653a373b750b4f426dc6f4c3dc3f740e02c87047ef6a4f28a22"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f3515e2e1a5740f68e1876dc1316b4bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19190,
        "upload_time": "2021-01-20T08:03:37",
        "upload_time_iso_8601": "2021-01-20T08:03:37.913531Z",
        "url": "https://files.pythonhosted.org/packages/23/f3/1251eba753263159ece66377203b254f7dcebd743a23130d7271b49aa238/graphene-django-crud-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93b8184f064a9486a8b8865eb5a2b08eb5622801a62f7b53f066fdc006873bbd",
          "md5": "c2bf5389d8305e576a8642fc0c86f636",
          "sha256": "ee8a43c1e61ce8128f4125aaac78b45f40efbe304be3cec22b672eae21bf2494"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2bf5389d8305e576a8642fc0c86f636",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22384,
        "upload_time": "2021-02-04T12:13:46",
        "upload_time_iso_8601": "2021-02-04T12:13:46.166917Z",
        "url": "https://files.pythonhosted.org/packages/93/b8/184f064a9486a8b8865eb5a2b08eb5622801a62f7b53f066fdc006873bbd/graphene_django_crud-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7a294f5e26173161066c50477203251090ea95607a9bb514c2ce15c57827ece",
          "md5": "d6e5af72ce96e375b6bd9f9f9cd3259b",
          "sha256": "e11b8051f1549ca78fe6d22a2c087fbdf625662ee412e5ecbd7c09468dd15960"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d6e5af72ce96e375b6bd9f9f9cd3259b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21531,
        "upload_time": "2021-02-04T12:13:47",
        "upload_time_iso_8601": "2021-02-04T12:13:47.721785Z",
        "url": "https://files.pythonhosted.org/packages/f7/a2/94f5e26173161066c50477203251090ea95607a9bb514c2ce15c57827ece/graphene-django-crud-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b9e9da69144093e2545011786fde3fdd4ba7cb43a15b344c7ebdb2f0c1df298",
          "md5": "fce24127662736346b2a5036c067c709",
          "sha256": "4a0b6303d5b5c52e7f6f2b7fb6874087186770b61dfcb51c0fefa63045871d86"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fce24127662736346b2a5036c067c709",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28443,
        "upload_time": "2021-02-24T07:25:40",
        "upload_time_iso_8601": "2021-02-24T07:25:40.687187Z",
        "url": "https://files.pythonhosted.org/packages/3b/9e/9da69144093e2545011786fde3fdd4ba7cb43a15b344c7ebdb2f0c1df298/graphene_django_crud-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f177b66bf35852b15e9e47ed1e7868108902a133f6aeda07caa3ea02f77351d9",
          "md5": "50b25779f4a27d661b014cf8d4d8ed03",
          "sha256": "cdee8eb879418cb3a0c748a8264cd15b559e877651468181558c58edc965d487"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50b25779f4a27d661b014cf8d4d8ed03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28979,
        "upload_time": "2021-02-24T07:25:43",
        "upload_time_iso_8601": "2021-02-24T07:25:43.255033Z",
        "url": "https://files.pythonhosted.org/packages/f1/77/b66bf35852b15e9e47ed1e7868108902a133f6aeda07caa3ea02f77351d9/graphene-django-crud-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bf34842998749d8290b18992e10e38b60db78780e363552010df640a9067045",
          "md5": "a935c33df53f9ef4d46faa11f2077210",
          "sha256": "b82c03ac1b82949ac9027a6e693d58ce24943000402fd854669c023116db2342"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a935c33df53f9ef4d46faa11f2077210",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30609,
        "upload_time": "2021-03-15T14:27:24",
        "upload_time_iso_8601": "2021-03-15T14:27:24.571119Z",
        "url": "https://files.pythonhosted.org/packages/9b/f3/4842998749d8290b18992e10e38b60db78780e363552010df640a9067045/graphene_django_crud-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3ab7b56065b30f33d902ed9e2eb18fe1b20ea101095560f24ee9ed71c7d3a00",
          "md5": "dfa05d2799d727836380627455dad1c1",
          "sha256": "e401119b86de3692a48217c7f4e35ef9758ffebc5e163c46eeb05cb94e61c11a"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dfa05d2799d727836380627455dad1c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29778,
        "upload_time": "2021-03-15T14:27:26",
        "upload_time_iso_8601": "2021-03-15T14:27:26.414885Z",
        "url": "https://files.pythonhosted.org/packages/e3/ab/7b56065b30f33d902ed9e2eb18fe1b20ea101095560f24ee9ed71c7d3a00/graphene-django-crud-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b264502eac4b4b3f82956c0a6b0e751b9c30338bea3df6bf139ddbd3ea1be3d",
          "md5": "55d3c0ec60c190cce68efa92d67d9c95",
          "sha256": "c4602bbe896b6ddaf9d834c6be7eebac81f66d61d4aa4006a4af66e62f4dad02"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55d3c0ec60c190cce68efa92d67d9c95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35486,
        "upload_time": "2021-04-02T07:20:57",
        "upload_time_iso_8601": "2021-04-02T07:20:57.197247Z",
        "url": "https://files.pythonhosted.org/packages/6b/26/4502eac4b4b3f82956c0a6b0e751b9c30338bea3df6bf139ddbd3ea1be3d/graphene_django_crud-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf85b02e82f6e733f840ec082efb49ebb23130ad626635b331877e6643162216",
          "md5": "384c7f38b179ab7e6dc9d2a4b2eeac93",
          "sha256": "7ea4936173086bd1e4c67338a39d385e55493f498ef6233b7096445be2d582ba"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "384c7f38b179ab7e6dc9d2a4b2eeac93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35001,
        "upload_time": "2021-04-02T07:20:59",
        "upload_time_iso_8601": "2021-04-02T07:20:59.239080Z",
        "url": "https://files.pythonhosted.org/packages/cf/85/b02e82f6e733f840ec082efb49ebb23130ad626635b331877e6643162216/graphene-django-crud-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f0f4eb4bfcaab8ee92109bd30a5cc6eba36856c8ced4b36b07376adb8ec79d2",
          "md5": "ba459819cc40d7501c0c13d70a18d313",
          "sha256": "16ff141f44c0223c95d00df8eb6349791bab0c515a5b2f83bfa503c92e6afd6b"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba459819cc40d7501c0c13d70a18d313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37080,
        "upload_time": "2021-05-07T13:32:23",
        "upload_time_iso_8601": "2021-05-07T13:32:23.947335Z",
        "url": "https://files.pythonhosted.org/packages/8f/0f/4eb4bfcaab8ee92109bd30a5cc6eba36856c8ced4b36b07376adb8ec79d2/graphene_django_crud-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce86d8c0878380048660659e3d927d05cd08890ee76e4e6e9535561a979a1f18",
          "md5": "97813d3324aeeb2cd8370c36ef1a29f8",
          "sha256": "e9fe20078f0bfa1e05922a6e34284796d803f0b94f0426b129d75ac6bd0da019"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97813d3324aeeb2cd8370c36ef1a29f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37248,
        "upload_time": "2021-05-07T13:32:27",
        "upload_time_iso_8601": "2021-05-07T13:32:27.186781Z",
        "url": "https://files.pythonhosted.org/packages/ce/86/d8c0878380048660659e3d927d05cd08890ee76e4e6e9535561a979a1f18/graphene-django-crud-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a80f668be39759b58bc1b6234ce7ddcb24db2eb6fb99b2a751edbc0e41f51fe8",
          "md5": "7fdc050ef918646a65db468be894ccab",
          "sha256": "18c202e544ef56fb34b86a2168c1251700b44781c42989527cacbc7dd4246533"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fdc050ef918646a65db468be894ccab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37474,
        "upload_time": "2021-05-27T12:23:26",
        "upload_time_iso_8601": "2021-05-27T12:23:26.067053Z",
        "url": "https://files.pythonhosted.org/packages/a8/0f/668be39759b58bc1b6234ce7ddcb24db2eb6fb99b2a751edbc0e41f51fe8/graphene_django_crud-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af206e0bdb186bc0711d8a1e1ddee38913b778ad96d1c352304ce74d9f57e67",
          "md5": "f7273a88aeac0465fc2767601d873d94",
          "sha256": "7814f96094a3bcc492575881ff476c826ba59ea2ef49d6847820c17e083e1b07"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f7273a88aeac0465fc2767601d873d94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35739,
        "upload_time": "2021-05-27T12:23:28",
        "upload_time_iso_8601": "2021-05-27T12:23:28.181842Z",
        "url": "https://files.pythonhosted.org/packages/1a/f2/06e0bdb186bc0711d8a1e1ddee38913b778ad96d1c352304ce74d9f57e67/graphene-django-crud-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70edcb334af7136b164fc3502217870a478a92390f794cb2af1b527806cddda3",
          "md5": "69d3131bd773c5665c5df0c54dcdcde6",
          "sha256": "06ed99c187ce9801b0a8eb194caafd1f5afa0e615dcb3577faffabf44a9ec4a3"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69d3131bd773c5665c5df0c54dcdcde6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54313,
        "upload_time": "2021-06-21T08:49:57",
        "upload_time_iso_8601": "2021-06-21T08:49:57.928783Z",
        "url": "https://files.pythonhosted.org/packages/70/ed/cb334af7136b164fc3502217870a478a92390f794cb2af1b527806cddda3/graphene_django_crud-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d271d09281772b5061f887754ee959d7d5158925b10c6cd69e1d3a1e6f905d9",
          "md5": "802fbb8d532e7c9314bc9afecc0cd124",
          "sha256": "24aa8fb94d87324b4dc62d99fe41399e90abf41a163a92a0472ae3da2a076276"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "802fbb8d532e7c9314bc9afecc0cd124",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49005,
        "upload_time": "2021-06-21T08:50:00",
        "upload_time_iso_8601": "2021-06-21T08:50:00.435049Z",
        "url": "https://files.pythonhosted.org/packages/7d/27/1d09281772b5061f887754ee959d7d5158925b10c6cd69e1d3a1e6f905d9/graphene-django-crud-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb9f3a938d449d15c41a384dac1bae9aad1558e4dfc4a42d864dd0ed6323831d",
          "md5": "753f81470d7cb291df2cee236218a93a",
          "sha256": "d97fdce725fff14e049bb2fec31e0d8ec361a7271c255e739e442f814a321452"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "753f81470d7cb291df2cee236218a93a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54324,
        "upload_time": "2021-08-15T08:38:05",
        "upload_time_iso_8601": "2021-08-15T08:38:05.840227Z",
        "url": "https://files.pythonhosted.org/packages/eb/9f/3a938d449d15c41a384dac1bae9aad1558e4dfc4a42d864dd0ed6323831d/graphene_django_crud-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5707c06bbb6bcc4370cdf8070dda3be88a2d2e92577bb5e375d1ccdd74c8e87f",
          "md5": "2ebaf88dc9b0728fbf1b568d7e1ab5c0",
          "sha256": "5e68dce4be3d97e9f1d10d19a7d5b0260415dfda0c64b7dbc2956e9a446e24fd"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ebaf88dc9b0728fbf1b568d7e1ab5c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48845,
        "upload_time": "2021-08-15T08:38:08",
        "upload_time_iso_8601": "2021-08-15T08:38:08.713757Z",
        "url": "https://files.pythonhosted.org/packages/57/07/c06bbb6bcc4370cdf8070dda3be88a2d2e92577bb5e375d1ccdd74c8e87f/graphene-django-crud-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62d98bd959018b2389cefde6d5c52cd7fae50e91a62968952d1e2218645e7f8f",
          "md5": "34cc21afa5f9305d5fd501ac55897e16",
          "sha256": "64d038fe3686f1788a8f42e8555ca7699c93a6e65353cfe6bcae5be1d78fe775"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34cc21afa5f9305d5fd501ac55897e16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54332,
        "upload_time": "2021-10-04T08:49:02",
        "upload_time_iso_8601": "2021-10-04T08:49:02.016142Z",
        "url": "https://files.pythonhosted.org/packages/62/d9/8bd959018b2389cefde6d5c52cd7fae50e91a62968952d1e2218645e7f8f/graphene_django_crud-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58193e6bfc68c4a21392654b290df20a9c77cacda330e0739e165231b90bed3e",
          "md5": "ad9e7babc8745f7bb3942170d52eb1a9",
          "sha256": "71a2263d05a3b8f89d591934d10689a1fa2a8a46a3409695f03bd6b5f284f06e"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad9e7babc8745f7bb3942170d52eb1a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48890,
        "upload_time": "2021-10-04T08:49:03",
        "upload_time_iso_8601": "2021-10-04T08:49:03.991794Z",
        "url": "https://files.pythonhosted.org/packages/58/19/3e6bfc68c4a21392654b290df20a9c77cacda330e0739e165231b90bed3e/graphene-django-crud-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e0db84d9bbf3980729cc77af2132a65c0b17563a91c4c4525718a121f4e5aa4",
          "md5": "244bec1bc46fd60eced2a7ed655d4139",
          "sha256": "89fe43e3150f0a7b55ffeb117e80763ab758261ac672cb89c84600f102a2a68f"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "244bec1bc46fd60eced2a7ed655d4139",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54441,
        "upload_time": "2022-01-18T08:02:36",
        "upload_time_iso_8601": "2022-01-18T08:02:36.225856Z",
        "url": "https://files.pythonhosted.org/packages/4e/0d/b84d9bbf3980729cc77af2132a65c0b17563a91c4c4525718a121f4e5aa4/graphene_django_crud-1.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b180ba38a9f3843015a8b7ef703077adb992a734ec581e9108520e54c08ccc",
          "md5": "38ce730211ca6d8bd67ef86f2273db39",
          "sha256": "1fa5ea921626354476b05653fe6f1c083ec1b72b74f28ae566c8c8a1b094ec4c"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "38ce730211ca6d8bd67ef86f2273db39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 54568,
        "upload_time": "2022-01-18T08:02:38",
        "upload_time_iso_8601": "2022-01-18T08:02:38.044832Z",
        "url": "https://files.pythonhosted.org/packages/d9/b1/80ba38a9f3843015a8b7ef703077adb992a734ec581e9108520e54c08ccc/graphene-django-crud-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5cee088c50012814b445a7c0822cd891f05fe649c28e3a027db4dbfdecfd8ef",
          "md5": "61e6bb6bff8edec277a0c2b123edbde5",
          "sha256": "8d72c96b4d652f1c225068df83409a114b569d399afc411e42ed59307b9dcdce"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-1.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61e6bb6bff8edec277a0c2b123edbde5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 56387,
        "upload_time": "2022-02-11T09:33:36",
        "upload_time_iso_8601": "2022-02-11T09:33:36.004966Z",
        "url": "https://files.pythonhosted.org/packages/a5/ce/e088c50012814b445a7c0822cd891f05fe649c28e3a027db4dbfdecfd8ef/graphene_django_crud-1.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42f696c37208ea549c9e428fc86cf3b219594578691fcbc6d648a1072345c2dd",
          "md5": "2a098cb47f8bc2d46cadce2c4a0d3657",
          "sha256": "a12b77454ff3e190289e87c0d7e80202cc573cde536528d93ae86d4c9ed5db2f"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2a098cb47f8bc2d46cadce2c4a0d3657",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55255,
        "upload_time": "2022-02-11T09:33:40",
        "upload_time_iso_8601": "2022-02-11T09:33:40.808515Z",
        "url": "https://files.pythonhosted.org/packages/42/f6/96c37208ea549c9e428fc86cf3b219594578691fcbc6d648a1072345c2dd/graphene-django-crud-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89cbad631845d8084e84e30410c1ef56056d5758434bf7949818b5a4e2f9a1c8",
          "md5": "deca616790c28ad25bc9c5b17eb4e04a",
          "sha256": "8a4a8c5f6addb1e3eb8e2a80da37d5de4ee2e94e7b0e4d28048cadbeaa494eb1"
        },
        "downloads": -1,
        "filename": "graphene_django_crud-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "deca616790c28ad25bc9c5b17eb4e04a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84325,
        "upload_time": "2022-11-16T15:47:36",
        "upload_time_iso_8601": "2022-11-16T15:47:36.322040Z",
        "url": "https://files.pythonhosted.org/packages/89/cb/ad631845d8084e84e30410c1ef56056d5758434bf7949818b5a4e2f9a1c8/graphene_django_crud-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6852009d7fe07768c7e484158f9ee3e6199ccb22ec5da115580c2b3e8bb2632",
          "md5": "e5b6e299a7dfd2d25c432af902a3c28c",
          "sha256": "067036c761e7fce44121c87b35d30bc0a4f89c3c3043379c620d840204813d11"
        },
        "downloads": -1,
        "filename": "graphene-django-crud-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e5b6e299a7dfd2d25c432af902a3c28c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 75061,
        "upload_time": "2022-11-16T15:47:43",
        "upload_time_iso_8601": "2022-11-16T15:47:43.336802Z",
        "url": "https://files.pythonhosted.org/packages/e6/85/2009d7fe07768c7e484158f9ee3e6199ccb22ec5da115580c2b3e8bb2632/graphene-django-crud-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89cbad631845d8084e84e30410c1ef56056d5758434bf7949818b5a4e2f9a1c8",
        "md5": "deca616790c28ad25bc9c5b17eb4e04a",
        "sha256": "8a4a8c5f6addb1e3eb8e2a80da37d5de4ee2e94e7b0e4d28048cadbeaa494eb1"
      },
      "downloads": -1,
      "filename": "graphene_django_crud-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "deca616790c28ad25bc9c5b17eb4e04a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 84325,
      "upload_time": "2022-11-16T15:47:36",
      "upload_time_iso_8601": "2022-11-16T15:47:36.322040Z",
      "url": "https://files.pythonhosted.org/packages/89/cb/ad631845d8084e84e30410c1ef56056d5758434bf7949818b5a4e2f9a1c8/graphene_django_crud-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6852009d7fe07768c7e484158f9ee3e6199ccb22ec5da115580c2b3e8bb2632",
        "md5": "e5b6e299a7dfd2d25c432af902a3c28c",
        "sha256": "067036c761e7fce44121c87b35d30bc0a4f89c3c3043379c620d840204813d11"
      },
      "downloads": -1,
      "filename": "graphene-django-crud-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e5b6e299a7dfd2d25c432af902a3c28c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 75061,
      "upload_time": "2022-11-16T15:47:43",
      "upload_time_iso_8601": "2022-11-16T15:47:43.336802Z",
      "url": "https://files.pythonhosted.org/packages/e6/85/2009d7fe07768c7e484158f9ee3e6199ccb22ec5da115580c2b3e8bb2632/graphene-django-crud-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}