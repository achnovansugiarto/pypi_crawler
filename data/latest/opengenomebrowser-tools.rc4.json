{
  "info": {
    "author": "Thomas Roder",
    "author_email": "roder.thomas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# OpenGenomeBrowser Tools\n\nA set of scripts that helps to import genome data into the OpenGenomeBrowser folder structure.\n\n## Installation\n\nThis package requires at least `Python 3.9`.\n\n```bash\npip install opengenomebrowser-tools\n```\n\n## Help function\n\nAll scripts have a help function, for example:\n\n```bash\nimport_genome --help\n```\n\n## `init_folder_structure`\n\nCreates a basic OpenGenomeBrowser folders structure.\n\n<details>\n  <summary>More details:</summary>\n\nOnce the folder structure has been initiated...\n\n- use [`import_genome`](#import_genome) to add genomes to the folder structure\n- use [`download_ncbi_genome`](#download_ncbi_genome) and [`import_genome`](#import_genome) to download and add genomes from NCBI\n- when all genomes have been added, use [`init_orthofinder`](#init_orthofinder) and [`import_orthofinder`](#import_orthofinder) to calculate\n  orthologs (optional)\n\nUsage:\n\n```shell\nexport FOLDER_STRUCTURE=/path/to/folder_structure\ninit_folder_structure  # or --folder_structure_dir=/path/to/folder_structure\n```\n\n<details>\n  <summary>Result:</summary>\n\n```\n  folder_structure\n  ├── organisms\n  ├── annotations.json\n  ├── annotation-descriptions\n  │   ├── SL.tsv\n  │   ├── KO.tsv\n  │   ├── KR.tsv\n  │   ├── EC.tsv\n  │   └── GO.tsv\n  ├── orthologs\n  └── pathway-maps\n      ├── type_dictionary.json\n      └── svg\n```\n\n</details>\n\n</details>\n\n## `import_genome`\n\nImport genome-associated files into OpenGenomeBrowser folder structure, automatically generate metadata files.\n\n<details>\n  <summary>More details:</summary>\n\nIf the annotation was performed using the proper organism name, genome identifier and taxonomic information (recommended), the import is\nstraightforward because no files need to be renamed.\n\n```shell\nexport FOLDER_STRUCTURE=/path/to/folder_structure   # this directory contains the 'organisms' folder\nimport_genome --import_dir=/prokka/out/dir  # optional: add \"--organism STRAIN --genome STRAIN.1\" as sanity check\n```\n\n<details>\n  <summary>How to run prokka to get correct locus tags</summary>\n\nSuppose the desired organism name is `STRAIN`, the genome identifier is `STRAIN.1`, this is how to run prokka:\n\n```shell\nprokka \\\n  --strain STRAIN \\ \n  --locustag STRAIN.1 \\\n  --prefix STRAIN.1 \\\n  --genus Mycoplasma --species genitalium \\  # Optional. If set, this script can automatically detect the taxid.\n  --out /prokka/out/dir \\\n  assembly.fasta\n```\n\n</details>\n\n<details>\n  <summary>How to run PGAP to get correct locus tags</summary>\n\nSuppose the desired organism name is `STRAIN`, the genome identifier is `STRAIN.1`, these are the lines in PGAPs `submol.yaml` that are relevant to\nthis script:\n\n```yaml\norganism:\n  genus_species: 'Mycoplasma genitalium'  # Optional. If set, this script can automatically detect the taxid.\n  strain: 'STRAIN'\nlocus_tag_prefix: 'STRAIN.1'\nbioproject: 'PRJNA9999999'  # Optional. If set, this script can automatically add it to bioproject_accession in genome.json.\nbiosample: 'SAMN99999999'  # Optional. If set, this script can automatically add it to biosample_accession in genome.json.\npublications: # Optional. If set, this script can automatically add it to the literature_references in genome.json.\n  - publication:\n      pmid: 16397293\n```\n\n</details>\n\n### Rename files during import\n\nShould the locus tags not start with the genome identifier, the files need to be renamed accordingly. The `import_genome` command can do this\nautomatically sung the `--rename` flag.\n\n```shell\nexport FOLDER_STRUCTURE=/path/to/folder_structure   # this directory contains the 'organisms' folder\nimport_genome --import_dir=/prokka/out/dir --organism STRAIN --genome STRAIN.1 --rename\n```\n\nThe renaming is provided as-is, and was only tested on files produced by certain versions of prokka and PGAP. If there is an error, you must rename\nthe files manually (with or without the help of my [renaming scripts](#rename_-rename-locus-tags-in-genome-associated-files)) and then import them as\ndescribed in the previous section.\n\n### Required files\n\nThese files need to be in `import_dir`:\n\n- `.fna`: assembly (FASTA)\n- `.gbk`: GenBank file\n- `.gff`: General feature format file\n\nOptional files:\n\n- `.faa`: protein sequences (FASTA). If non-existent, it will automatically be generated from the `.gbk` file\n- `.ffn`: nucleotides file (FASTA). If non-existent, it will automatically be generated from the `.gbk` file\n- `.sqn`: required for submission to GenBank, not really used by OpenGenomeBrowser\n- `.emapper.annotations`: Eggnog annotation file\n- `.XX`: custom annotation file (e.g. `EC`, `.GO`, etc.; any files with a suffix of two upper case letters are detected as custom annotations)\n- `_busco.txt`: BUSCO output file, content will be added to `genome.json`\n- `genome.json`: content will be added to final `genome.json`, may be as simple as `{\"restricted\": true}`\n- `organism.json`: content will be added to final `organism.json`, may be as simple as `{\"assembly_tool\": \"PGAP\"}`\n\n<details>\n  <summary>Example result:</summary>\n\n```text\n#### folder structure ####\nfolder_structure\n└── organisms\n    └── STRAIN\n        ├── organism.json\n        └── genomes\n             └── STRAIN.1\n         \t     ├── genome.json\n         \t     ├── STRAIN.1.faa\n         \t     ├── STRAIN.1.ffn\n         \t     ├── STRAIN.1.fna\n         \t     ├── STRAIN.1.gbk\n         \t     ├── STRAIN.1.gff\n         \t     ├── STRAIN.1.sqn\n         \t     └── rest\n         \t      \t ├── PROKKA_08112021.err\n         \t      \t ├── PROKKA_08112021.fsa\n        \t      \t ├── PROKKA_08112021.log\n         \t      \t ├── PROKKA_08112021.tbl\n         \t      \t ├── PROKKA_08112021.tsv\n         \t      \t ├── PROKKA_08112021.txt\n         \t      \t └── short_summary.specific.lactobacillales_odb10.FAM3228-i1-1_busco.txt\n```\n\n</details>\n\n### Modify where files are moved to\n\nIt is possible to change where files end up in the folder structure. The behaviour is determined by a config file in json format that can be specified\nwith the --import_settings parameter or the `OGB_IMPORT_SETTINGS` environment variable.\n\n```shell\nexport OGB_IMPORT_SETTINGS=/path/to/import_config.json\n```\n\n<details>\n  <summary>These are the default settings:</summary>\n\n```text\n{\n    \"organism_template\": {},                           # use this to add metadata to all imported organism.json files, e.g. {\"restricted\": true}\n    \"genome_template\": {},                             # use this to add metadata to all imported genome.json files, e.g. {\"assembly_tool\": \"PGAP\"}\n    \"path_transformer\": {\n        \".*\\\\.fna\": \"{genome}.{suffix}\",               # all files that match the regex will end up in organisms/STRAIN/genomes/STRAIN.1/STRAIN.1.fna\n        \".*\\\\.faa\": \"{genome}.{suffix}\",\n        \".*\\\\.gbk\": \"{genome}.{suffix}\",\n        \".*\\\\.gff\": \"{genome}.{suffix}\",\n        \".*\\\\.sqn\": \"{genome}.{suffix}\",\n        \".*\\\\.ffn\": \"{genome}.{suffix}\",\n        \".*\\\\.emapper.annotations\": \"{genome}.eggnog\",\n        \".*\\\\.[A-Z]{2}\": \"{genome}.{suffix}\",\n        \"genome.md\": \"genome.md\", \n        \"organism.md\": \"../../organism.md\",            # this file will end up in /organisms/STRAIN/organism.md\n        \"genome.json\": null,                           # this file will not be copied\n        \"organism.json\": null,                         # this file will not be copied\n        \".*\": \"rest/{original_path}\"                   # this regex matches all files, thus all files that did not match any previous regex will\n                                                       #   will end up in .../STRAIN.1/rest/\n    }\n}\n```\n\n</details>\n\n<details>\n  <summary>This is an example of an alternative configuration:</summary>\n\n```text\n{\n    \"organism_template\": {},\n    \"genome_template\": {},\n    \"path_transformer\": {\n        \n        # raw reads\n        \".*fastqc?\\\\..*\": \"0_raw_reads/{original_path}\",\n        \n        # assembly\n        \".*\\\\.fna\": \"1_assembly/{genome}.{suffix}\",\n        \n        # coding sequence (CDS) calling\n        \".*\\\\.faa\": \"2_cds/{genome}.{suffix}\",\n        \".*\\\\.gbk\": \"2_cds/{genome}.{suffix}\",\n        \".*\\\\.gff\": \"2_cds/{genome}.{suffix}\",\n        \".*\\\\.ffn\": \"2_cds/{genome}.{suffix}\",\n        \".*\\\\.sqn\": \"2_cds/{genome}.{suffix}\",\n        \"PROKKA_.*\": \"2_cds/{original_path}\",\n        \n        # functional annotations\n        \".*\\\\.emapper.annotations\": \"3_annotation/{genome}.eggnog\",\n        \".*\\\\.[A-Z]{2}\": \"3_annotation/{genome}.{suffix}\",\n        \".*_busco\\\\.txt\": \"3_annotation/{original_path}\",\n        \n        # special files\n        \"genome.md\": \"genome.md\",\n        \"organism.md\": \"../../organism.md\",\n        \"genome.json\": null,\n        \"organism.json\": null,\n        \n        # rest\n        \".*\": \"rest/{original_path}\"\n    }\n}\n```\n\nResult:\n\n```text\n#### folder structure ####\nfolder_structure\n└── organisms\n    └── STRAIN\n       ├── organism.json\n       └── genomes\n             └── STRAIN.1\n                 ├── genome.json\n                 ├── 1_assembly\n                 │     └── STRAIN.1.fna\n                 ├── 2_cds\n                 │     ├── PROKKA_08112021.err\n                 │     ├── PROKKA_08112021.fsa\n                 │     ├── PROKKA_08112021.log\n                 │     ├── PROKKA_08112021.tbl\n                 │     ├── PROKKA_08112021.tsv\n                 │     ├── PROKKA_08112021.txt\n                 │     ├── STRAIN.1.faa\n                 │     ├── STRAIN.1.ffn\n                 │     ├── STRAIN.1.gbk\n                 │     ├── STRAIN.1.gff\n                 │     └── STRAIN.1.sqn\n                 └── 3_annotation\n                       └── short_summary_busco.txt\n```\n\n</details>\n\n### Add custom metadata\n\nThere are two ways to achieve this:\n\n1) Add a `organism.json` and/or `genome.json` file into `import_dir` (see [import_genome: Required files](#required-files))\n2) Set a global `organism.json` and/or `genome.json` file that is used as a basis for all future imports (\n   see [import_genome: Modify where files are moved to](#modify-where-files-are-moved-to))\n\n</details>\n\n## `rename_*`\n\nThe following scripts change the locus tags in the respective file formats.\n\n| Script                      | Purpose                                                                  |\n|-----------------------------|--------------------------------------------------------------------------|\n| `rename_fasta`              | Change locus tags of protein or nucleotide FASTA files                   |\n| `rename_genbank`            | Change locus tags of GenBank files (tested with prokka and PGAP files)   |\n| `rename_gff`                | Change locus tags of gff (general feature format) files                  |\n| `rename_eggnog`             | Change locus tags of Eggnog files (`.emapper.annotations`)               |\n| `rename_custom_annotations` | Change locus tags of custom annotations files                            |\n\n<details>\n  <summary>More details:</summary>\n\nThe syntax is always the same.\n\n```shell\nrename_fasta \\\n  --file /path/to/input.file \\\n  --out /path/to/output.file \\\n  --new_locus_tag_prefix STRAIN.2 \\\n  --old_locus_tag_prefix STRAIN.1  # optional, good as sanity check\n```\n\n</details>\n\n## `reindex_assembly`\n\nThis script changes the header of assembly FASTA (`.fna`) files.\n\n<details>\n  <summary>More details:</summary>\n\n```shell\nreindex_assembly \\\n  --file /path/to/input.file \\\n  --out /path/to/output.file \\\n  --prefix STRAIN_scf \\\n  --leading_zeroes 5  # optional\n```\n\nThis would transform a FASTA header like this `>anything here` into `>STRAIN_scf_00001`.\n\n</details>\n\n## `genbank_to_fasta`\n\nConvert GenBank to nucleotide (`.ffn`) or protein FASTA (`.faa`).\n\n<details>\n  <summary>More details:</summary>\n\nUsage:\n\n```shell\ngenbank_to_fasta \\\n  --gbk /path/to/input.gbk \\\n  --out /path/to/output.fasta \\\n  --format faa  # or ffn\n```\n\n</details>\n\n## `download_ncbi_genome`\n\nDownload genome-associated files (`.fna`, `.gbk`, `.gff`) from NCBI, rename the locus tags, and generate `.ffn` and `faa` files.\n\n<details>\n  <summary>More details:</summary>\n\nUsage:\n\n```shell\ndownload_ncbi_genome \\\n  --assembly_name GCF_005864195.1 \\\n  --out_dir /path/to/outdir \\\n  --new_locus_tag_prefix FAM3257_ \n```\n\nResult:\n\n```text\noutdir\n├── FAM3257.faa\n├── FAM3257.ffn\n├── FAM3257.fna\n├── FAM3257.gbk\n└── FAM3257.gff\n```\n\nThe next step might be to import these genomes into the OpenGenomeBrowser folder structure like this:\n\n```shell\nimport_genome --import_dir=/path/to/outdir --organism FAM3257 --genome FAM3257\n```\n\n</details>\n\n## `init_orthofinder`\n\nThis script collects the protein FASTAs in `folder_structure/OrthoFinder/fastas` and prints the command to run OrthoFinder.\n\n<details>\n  <summary>More details:</summary>\n\nUsage:\n\n```shell\nexport FOLDER_STRUCTURE=/path/to/folder_structure\ninit_orthofinder --representatives_only\n```\n\nResult:\n\n```\n  folder_structure\n  ├── ...\n  └── OrthoFinder\n      └── fastas\n          ├── GENOME1.faa\n          ├── GENOME2.faa\n          └── ...\n```\n\n</details>\n\n## `import_orthofinder`\n\nThe output of OrthoFinder needs to be processed for OpenGenomeBrowser. This script creates two files:\n\n- `annotation-descriptions/OL.tsv`: maps orthologs to the most common gene name, i.e. `OG0000005` -> `MFS transporter`\n- `orthologs/orthologs.tsv`: maps orthologs to genes, i.e. `OG0000005` -> `STRAIN1_000069, STRAIN2_000128, STRAIN2_000137`\n\n<details>\n  <summary>More details:</summary>\n\nUsage:\n\n```shell\nexport FOLDER_STRUCTURE=/path/to/folder_structure\nimport_orthofinder --which hog  # 'hog' for hierarchical orthogroups and 'og' for regular orthogroups\n```\n\nOnce these files exist, run the following command from within the OpenGenomeBrowser docker container:\n\n```shell\npython db_setup/manage_ogb.py import-orthologs\n```\n\n</details>\n\n## `update_folder_structure`\n\nFrom time to time, changes are made to the OpenGenomeBrowser folder structure. The current version of your folder structure is denoted\nin `version.json`. Use this script to upgrade to a new version.\n\n<details>\n  <summary>More details:</summary>\n\n- `1_to_2`: add `COG` to genome.json\n\n</details>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/opengenomebrowser/opengenomebrowser-tools",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opengenomebrowser-tools",
    "package_url": "https://pypi.org/project/opengenomebrowser-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/opengenomebrowser-tools/",
    "project_urls": {
      "Homepage": "https://github.com/opengenomebrowser/opengenomebrowser-tools"
    },
    "release_url": "https://pypi.org/project/opengenomebrowser-tools/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Set of scripts to aid OpenGenomeBrowser administrators import data",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15640796,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7f1d8079712b0c8e84cbe225933c946c09788119b62937e180d8bf413540910",
          "md5": "acaeb697d5045e6d58478181593a1c55",
          "sha256": "8bbe60f05651f9b4bdfe3d33adc183c5ddb322771b85ea2c04de9061efae274d"
        },
        "downloads": -1,
        "filename": "opengenomebrowser-tools-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "acaeb697d5045e6d58478181593a1c55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35712,
        "upload_time": "2022-05-10T14:06:27",
        "upload_time_iso_8601": "2022-05-10T14:06:27.152254Z",
        "url": "https://files.pythonhosted.org/packages/f7/f1/d8079712b0c8e84cbe225933c946c09788119b62937e180d8bf413540910/opengenomebrowser-tools-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c99670d68860c858a551e8d7579f956a4c8af33a4feb2f63c7cbd71c5503d771",
          "md5": "05eae46149e3127079ee2682cb69d692",
          "sha256": "fbbddf472d10f2870d0f40e8b16a6b441a585299b4102e32688d429388f6f263"
        },
        "downloads": -1,
        "filename": "opengenomebrowser-tools-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "05eae46149e3127079ee2682cb69d692",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35770,
        "upload_time": "2022-06-03T11:45:51",
        "upload_time_iso_8601": "2022-06-03T11:45:51.626564Z",
        "url": "https://files.pythonhosted.org/packages/c9/96/70d68860c858a551e8d7579f956a4c8af33a4feb2f63c7cbd71c5503d771/opengenomebrowser-tools-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a4397e78f346c5fbc85116d72eb2ba6a9fd33815c4afdce2b7c5fabd7b39fd7",
          "md5": "6b6ea75c60f2e30335df6e194f9ede59",
          "sha256": "23fee42944444b05a3b239556379746bcb7781317f4b9c74410c95603ae315aa"
        },
        "downloads": -1,
        "filename": "opengenomebrowser-tools-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6b6ea75c60f2e30335df6e194f9ede59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39067,
        "upload_time": "2022-07-28T07:38:07",
        "upload_time_iso_8601": "2022-07-28T07:38:07.230389Z",
        "url": "https://files.pythonhosted.org/packages/2a/43/97e78f346c5fbc85116d72eb2ba6a9fd33815c4afdce2b7c5fabd7b39fd7/opengenomebrowser-tools-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b261ae8e67c864d64427082c45e0f306611f70aca17f33c23cafc0718e9143",
          "md5": "66c4e97c89a167ae5ac0b5b105748b09",
          "sha256": "32e1f6df1b7bb5f4ef21b2ea7fec6c7d26ab864dbe7133e9aa8ae93be834fd82"
        },
        "downloads": -1,
        "filename": "opengenomebrowser-tools-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "66c4e97c89a167ae5ac0b5b105748b09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39487,
        "upload_time": "2022-11-03T12:42:42",
        "upload_time_iso_8601": "2022-11-03T12:42:42.993913Z",
        "url": "https://files.pythonhosted.org/packages/e5/b2/61ae8e67c864d64427082c45e0f306611f70aca17f33c23cafc0718e9143/opengenomebrowser-tools-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5b261ae8e67c864d64427082c45e0f306611f70aca17f33c23cafc0718e9143",
        "md5": "66c4e97c89a167ae5ac0b5b105748b09",
        "sha256": "32e1f6df1b7bb5f4ef21b2ea7fec6c7d26ab864dbe7133e9aa8ae93be834fd82"
      },
      "downloads": -1,
      "filename": "opengenomebrowser-tools-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "66c4e97c89a167ae5ac0b5b105748b09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39487,
      "upload_time": "2022-11-03T12:42:42",
      "upload_time_iso_8601": "2022-11-03T12:42:42.993913Z",
      "url": "https://files.pythonhosted.org/packages/e5/b2/61ae8e67c864d64427082c45e0f306611f70aca17f33c23cafc0718e9143/opengenomebrowser-tools-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}