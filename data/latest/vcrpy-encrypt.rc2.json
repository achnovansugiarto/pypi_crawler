{
  "info": {
    "author": "Carlo De Pieri",
    "author_email": "depieri.carlo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/vcrpy-encrypt)](https://pypi.org/project/vcrpy-encrypt/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/vcrpy-encrypt)](https://pypi.org/project/vcrpy-encrypt/) [![CI Status](https://img.shields.io/github/workflow/status/CarloDePieri/vcrpy-encrypt/prod?logo=github)](https://github.com/CarloDePieri/vcrpy-encrypt/actions/workflows/prod.yml) [![Coverage Status](https://coveralls.io/repos/github/CarloDePieri/vcrpy-encrypt/badge.svg?branch=main)](https://coveralls.io/github/CarloDePieri/vcrpy-encrypt?branch=main) [![Maintenance](https://img.shields.io/maintenance/yes/2021)](https://github.com/CarloDePieri/vcrpy-encrypt/)\n\nEncrypt vcrpy cassettes so they can be safely kept under version control.\n\n## Rationale\n\nSensitive data can easily end up in HTTP requests/responses during testing.\n[Vcrpy](https://vcrpy.readthedocs.io/en/latest/index.html) has\n[a way to scrub that data](https://vcrpy.readthedocs.io/en/latest/advanced.html#filter-sensitive-data-from-the-request)\nfrom its cassettes, but sometimes the tests that logged them actually need that information to pass.\n\nThis would normally result in a choice: either don't record those test cassettes or don't keep them under version\ncontrol so that they can remain local only.\n\nEnters vcrpy-encrypt: at its core it's a simple\n[vcrpy persister](https://vcrpy.readthedocs.io/en/latest/advanced.html#register-your-own-cassette-persister) that will\nencrypt cassettes before writing them to disk and decrypt them before replaying them when needed by a test. This means\nthat tests can replay cassettes with sensitive data in them AND those cassettes can now be safely kept under version\ncontrol and shared with others.\n\n## Install\n\nSimply run:\n\n```bash\npip install vcrpy-encrypt\n```\n\n## Usage\n\n### Provide a secret key\n\nA secret key is needed to encrypt cassettes. It must be a 128, a 192 or a 256 bits long `bytes` object. vcrpy-encrypt\noffers an easy way to generate a random key:\n\n```bash\npython -c \"from vcrpy_encrypt import generate_key; print(generate_key())\"\n```\n\nBy default this will result in a 128 bits key, but `generate_key` can take `128` or `192` or `256` as argument to\ngenerate a longer key.\n\nIf a specific key is preferred, it can be converted from an utf-8, 16/24/32 characters long string like this:\n\n```python\nkey = \"sixteensecretkey\".encode(\"UTF-8\")  # len(b'sixteensecretkey') == 16\n```\n\nNo matter the source, the key must be kept secret and separated from the code under version control!\n\n### Register the persister\n\nVcrpy's custom persister api needs a class reference. This class can be defined inheriting from\n`BaseEncryptedPersister` like this:\n\n```python\nfrom vcrpy_encrypt import BaseEncryptedPersister\n\nkey = ...  # recover the secret key from somewhere safe\n\nclass MyEncryptedPersister(BaseEncryptedPersister):\n    # the encryption_key field must be initialized here with the chosen key\n    encryption_key: bytes = key\n```\n\nThe encrypted persister can now be registered and used:\n\n```python\nimport vcr\nimport requests\n\n# create a custom vcr object\nmy_vcr = vcr.VCR()\n\n# register the encrypted persister into the custom vcr object\nmy_vcr.register_persister(MyEncryptedPersister)\n\n# use that custom vcr object with use_cassette\nwith my_vcr.use_cassette(\"encoded-cassette\"):\n    # this request will produce an encrypted cassette and will replay it on following runs\n    requests.get(\"https://localhost/?key=super-secret\")\n```\n\nKeep in mind that multiple vcr objects can coexists, so it's possible to use the default vcr everywhere while\nreserving the one with the encrypted persister only for requests resulting in cassettes with sensitive data.\n\n## Customization\n\nSometimes it can be handy to inspect the content of a cassette. This can be done even when using encrypted cassettes:\n\n```python\nclass MyEncryptedPersister(BaseEncryptedPersister):\n    encryption_key: bytes = key\n    should_output_clear_text_as_well = True\n```\n\nThis persister will output a clear text cassette side by side with the encrypted one. Remember to blacklist all clear\ntext cassette in the version control system! For example this will cause git to ignore all `.yaml` file inside a\ncassettes' folder (at any depth):\n\n```bash\n# file: .gitignore\n**/cassettes/**/*.yaml\n```\nClear text cassettes are only useful for human inspection: the persister will still use only the encrypted ones to\nreplay network requests.\n\nIf different cassettes file name suffix are desired, they can be customized:\n\n```python\nclass MyEncryptedPersister(BaseEncryptedPersister):\n    encryption_key: bytes = key\n    should_output_clear_text_as_well = True\n    clear_text_suffix = \".custom_clear\"\n    encoded_suffix = \".custom_enc\"\n```\n\n## Encryption performance\n\nCurrently this library is encrypting cassettes using [cryptography](https://cryptography.io/) with [AES-GCM](https://cryptography.io/en/latest/hazmat/primitives/aead/#cryptography.hazmat.primitives.ciphers.aead.AESGCM). This algorithm\nimplementation is striking a good balance between security and performance.\n\nKeep in mind that key length will have an impact on encrypt time: 128 bits keys should suffice for most use cases.\n\n## Development\n\nInstall [invoke](http://pyinvoke.org/) and [poetry](https://python-poetry.org/):\n\n```bash\npip install invoke poetry\n```\n\nNow clone the git repo:\n\n```bash\ngit clone git@github.com:CarloDePieri/vcrpy-encrypt.git\ncd vcrpy-encrypt\ninv install\n```\n\nThis will try to create a virtualenv based on `python3.7` and install there all\nproject's dependencies. If a different python version is preferred, it can be\nselected by specifying  the `--python` (`-p`) flag like this:\n\n```bash\ninv install -p python3.8\n```\n\nThe test suite can be run with commands:\n\n```bash\ninv test         # run the test suite\ninv test-spec    # run the tests while showing the output as a spec document\ninv test-cov     # run the tests suite and produce a coverage report\n```\n\nTo run the test suite against all supported python version (they must be in path!) run:\n\n```bash\ninv test-all-python-version\n```\n\nTo test the github workflow with [act](https://github.com/nektos/act):\n\n```bash\n# First you need a .secrets file - do not version control this!\necho \"repo_token: your_coveralls_token\" > .secrets\n\n# Then you can run one of these:\ninv act-prod           # test the dev workflow\ninv act-prod -c shell  # open a shell in the act container (the above must fail first!)\ninv act-prod -c clean  # stop and delete a failed act container\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CarloDePieri/vcrpy-encrypt",
    "keywords": "python,vcr,vcrpy,encrypt",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vcrpy-encrypt",
    "package_url": "https://pypi.org/project/vcrpy-encrypt/",
    "platform": "",
    "project_url": "https://pypi.org/project/vcrpy-encrypt/",
    "project_urls": {
      "Homepage": "https://github.com/CarloDePieri/vcrpy-encrypt",
      "Repository": "https://github.com/CarloDePieri/vcrpy-encrypt"
    },
    "release_url": "https://pypi.org/project/vcrpy-encrypt/0.9.1/",
    "requires_dist": [
      "cryptography (>=3.4.7,<4.0.0)",
      "vcrpy (>=4.1.1,<5.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Encrypt vcrpy cassettes so they can be safely kept under version control.",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11118633,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "169c0f92ef56f1c06f90887468f12d8c59ef26364c886f981cd1ce4e5d9f388e",
          "md5": "0d793b3ca2a4959d262029884a958b58",
          "sha256": "a1503d45306e94f8eb2132e83c4addf76c2d81cc1febb43626efb2d5816f78e0"
        },
        "downloads": -1,
        "filename": "vcrpy_encrypt-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d793b3ca2a4959d262029884a958b58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 17672,
        "upload_time": "2021-08-05T12:59:13",
        "upload_time_iso_8601": "2021-08-05T12:59:13.649954Z",
        "url": "https://files.pythonhosted.org/packages/16/9c/0f92ef56f1c06f90887468f12d8c59ef26364c886f981cd1ce4e5d9f388e/vcrpy_encrypt-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9791838f28c31ba70e6b283ae5419a3ee494339cfcae0a76c4b1dae35572eaef",
          "md5": "382cc4d8c2eca8a9b1a03b2ffca03ddd",
          "sha256": "09bb69928fe616de3cd49d70e9fa771781d90bdd614b99839c8dd6730f52f741"
        },
        "downloads": -1,
        "filename": "vcrpy-encrypt-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "382cc4d8c2eca8a9b1a03b2ffca03ddd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17853,
        "upload_time": "2021-08-05T12:59:12",
        "upload_time_iso_8601": "2021-08-05T12:59:12.314916Z",
        "url": "https://files.pythonhosted.org/packages/97/91/838f28c31ba70e6b283ae5419a3ee494339cfcae0a76c4b1dae35572eaef/vcrpy-encrypt-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ae619f3c3e6ad8f3f3620c9093cd12021e5ec21a5cbecc1143d87e01dd67b2b",
          "md5": "e1077c92ee1f17bdaa5df35dcf4d4316",
          "sha256": "e9df1158dfc41b673365fd77d42f19e21a9a394fdbe19bebec4ca25de9f8fe98"
        },
        "downloads": -1,
        "filename": "vcrpy_encrypt-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1077c92ee1f17bdaa5df35dcf4d4316",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 17680,
        "upload_time": "2021-08-07T16:49:10",
        "upload_time_iso_8601": "2021-08-07T16:49:10.641307Z",
        "url": "https://files.pythonhosted.org/packages/8a/e6/19f3c3e6ad8f3f3620c9093cd12021e5ec21a5cbecc1143d87e01dd67b2b/vcrpy_encrypt-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25af5c9d6cd04e6aee2bd4c2f52c9e91d3b36d3a282907b39ab24b216b71d4f1",
          "md5": "e3bc8cc860d19851084256bbd55b0141",
          "sha256": "58f01d79ffb037354519bca4b05c243502456949fb4b2bad845c7a3a5164ac64"
        },
        "downloads": -1,
        "filename": "vcrpy-encrypt-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e3bc8cc860d19851084256bbd55b0141",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17852,
        "upload_time": "2021-08-07T16:49:09",
        "upload_time_iso_8601": "2021-08-07T16:49:09.504763Z",
        "url": "https://files.pythonhosted.org/packages/25/af/5c9d6cd04e6aee2bd4c2f52c9e91d3b36d3a282907b39ab24b216b71d4f1/vcrpy-encrypt-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ae619f3c3e6ad8f3f3620c9093cd12021e5ec21a5cbecc1143d87e01dd67b2b",
        "md5": "e1077c92ee1f17bdaa5df35dcf4d4316",
        "sha256": "e9df1158dfc41b673365fd77d42f19e21a9a394fdbe19bebec4ca25de9f8fe98"
      },
      "downloads": -1,
      "filename": "vcrpy_encrypt-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1077c92ee1f17bdaa5df35dcf4d4316",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 17680,
      "upload_time": "2021-08-07T16:49:10",
      "upload_time_iso_8601": "2021-08-07T16:49:10.641307Z",
      "url": "https://files.pythonhosted.org/packages/8a/e6/19f3c3e6ad8f3f3620c9093cd12021e5ec21a5cbecc1143d87e01dd67b2b/vcrpy_encrypt-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25af5c9d6cd04e6aee2bd4c2f52c9e91d3b36d3a282907b39ab24b216b71d4f1",
        "md5": "e3bc8cc860d19851084256bbd55b0141",
        "sha256": "58f01d79ffb037354519bca4b05c243502456949fb4b2bad845c7a3a5164ac64"
      },
      "downloads": -1,
      "filename": "vcrpy-encrypt-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e3bc8cc860d19851084256bbd55b0141",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 17852,
      "upload_time": "2021-08-07T16:49:09",
      "upload_time_iso_8601": "2021-08-07T16:49:09.504763Z",
      "url": "https://files.pythonhosted.org/packages/25/af/5c9d6cd04e6aee2bd4c2f52c9e91d3b36d3a282907b39ab24b216b71d4f1/vcrpy-encrypt-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}