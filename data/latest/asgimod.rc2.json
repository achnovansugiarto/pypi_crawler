{
  "info": {
    "author": "Paaksing",
    "author_email": "paaksingtech@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# asgimod\n[![MIT Licensed](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/paaksing/asgimod/blob/master/LICENSE)\n\nThis package includes components and utilities that makes django \\*usable\\* in async python, such as:\n\n- Async model mixin~~s~~ (fully typed), `asgimod.mixins`.\n- Async managers and querysets (fully typed), `asgimod.db`.\n- Typed `sync_to_async` and `async_to_sync` wrappers, `asgimod.sync`.\n\n#### Package FAQ:\n\n1. Does this support foreign relation access: YES.\n2. Does this allow queryset chaining: YES.\n3. Does this allow queryset iterating, slicing and indexing: YES.\n4. Does this affect default model manager functionality: NO, because itâ€™s on another classproperty `aobjects`.\n5. Is everything TYPED: YES, with the only exception of function parameters specification on Python<3.10 since PEP 612 is being released on 3.10.\n\n#### Requirements:\n\n- Django >= 3.0\n- Python >= 3.8\n\n#### Installation:\n\n```sh\npip install asgimod\n```\n\nThe documentation uses references from these model definitions:\n\n```python\nclass Topping(AsyncMixin, models.Model):\n    name = models.CharField(max_length=30)\n\n\nclass Box(AsyncMixin, models.Model):\n    name = models.CharField(max_length=50)\n\n\nclass Price(AsyncMixin, models.Model):\n    amount = models.DecimalField(decimal_places=2, max_digits=10)\n    currency = models.CharField(max_length=16, default=\"usd\")\n\n\nclass Pizza(AsyncMixin, models.Model):\n    name = models.CharField(max_length=50)\n    toppings = models.ManyToManyField(Topping)\n    box = models.ForeignKey(Box, null=True, on_delete=models.SET_NULL)\n    price = models.OneToOneField(Price, on_delete=models.CASCADE)\n```\n\nand the following TypeVar:\n\n```python\nT = TypeVar(\"T\", bound=models.Model)\n```\n\n<br>\n\n---\n\n## Async model mixin~~s~~\n\nThis mixin adds async capabilities to the model class and instances:\n- `aobjects` full featured async manager.\n- `asave`, `adelete` async equivalents of `save` and `delete`.\n- `a(.*)` async foreign relations access.\n\n Import:\n\n```python\nfrom asgimod.mixins import AsyncMixin\n```\n\nUsage:\n\n```python\nclass SampleModel(AsyncMixin, models.Model):\n    sample_field = models.CharField(max_length=50)\n```\n\n### API Reference:\n\nExtends from `models.Model`, uses metaclass `AsyncMixinMeta` (extended from `models.ModelBase`).\n\n<br>\n\n#### _classproperty_ `aobjects` -> `AsyncManager`\nReturns an instance of `AsyncManager`. Async equivalent of `Model.objects`.\n\n<br>\n\n#### _asyncmethod_ `asave(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)` -> `None`\nAsync equivalent of `Model.save`\n\n<br>\n\n#### _asyncmethod_ `adelete(using=DEFAULT_DB_ALIAS, keep_parents=False)` -> `None`\nAsync equivalent of `Model.delete`\n\n<br>\n\n#### _getattr_ `a(.*)` -> ` Awaitable[T] | AsyncManyToOneRelatedManager | AsyncManyToManyRelatedManager`\nThere are 3 possible returns from an async foreign relation access.\n- `AsyncManyToOneRelatedManager`: Result of a reverse many to one relation access.\n- `AsyncManyToManyRelatedManager`: Result of a many to many relation access (both forward and reverse access).\n- `Awaitable[T]`: Result of a one to one relation access or a forward many to one relation access. Returns an awaitable with `T` return (`T` being the type of the foreign object).\n\nTo access a foreign relation in async mode, add the `a` prefix to your sync access attribute. Using the models defined for this documentation, examples:\n\n```python\nprice = await Price.aobjects.get(id=1)\npizza = await Pizza.aobjects.get(id=1)\nweird_pizza = await Pizza.aobjects.get(id=2)\nbacon = await Topping.aobjects.get(id=1)\nmushroom = await Topping.aobjects.get(id=2)\nmedium_box = await Box.aobjects.get(id=1)\n\n# one to one rel & forward many to one rel\nawait pizza.aprice\nawait price.apizza\nawait price.abox\n\n# reverse many to one rel\nawait medium_box.apizza_set.all().get(id=1)\nawait medium_box.apizza_set.filter(id__gt=1).order_by(\"name\").count()\nawait medium_box.apizza_set.add(weird_pizza)\nawait medium_box.apizza_set.clear()\n\n# forward many to many rel\nawait pizza.atoppings.all().exists()\nawait pizza.atoppings.add(bacon, mushroom)\nawait bacon.atoppings.filter(name__startswith=\"b\").exists()\nawait pizza.atoppings.remove(bacon)\nawait pizza.atoppings.clear()\n\n# reverse many to many rel\nawait mushroom.apizza_set.all().exists()\nawait mushroom.apizza_set.add(pizza)\nawait mushroom.apizza_set.set([pizza, weird_pizza])\n```\n\nAs you have guessed, these attributes are not defined in code, and thus they are not typed, well, here's the fix:\n\n```python\nclass Topping(AsyncMixin, models.Model):\n    name = models.CharField(max_length=30)\n    apizza_set: AsyncManyToManyRelatedManager[\"Pizza\"]\n\nclass Box(AsyncMixin, models.Model):\n    name = models.CharField(max_length=50)\n    apizza_set: AsyncManyToOneRelatedManager[\"Pizza\"]\n\nclass Price(AsyncMixin, models.Model):\n    amount = models.DecimalField(decimal_places=2, max_digits=10)\n    currency = models.CharField(max_length=16, default=\"usd\")\n    apizza: \"Pizza\"\n```\n\n<br>\n\n---\n\n## Async managers and querysets\n\nAsync equivalent managers and querysets. All async managers classes are only alias to their respective querysets classes. Such alias exists for user friendliness and better field typings. If you need other methods and attributes unique to managers, use `objects` instead.\n\nImport:\n\n```python\nfrom asgimod.db import (\n    AsyncQuerySet,\n    AsyncManyToOneRelatedQuerySet,\n    AsyncManyToManyRelatedQuerySet,\n    AsyncManager,\n    AsyncManyToOneRelatedManager,\n    AsyncManyToManyRelatedManager\n)\n```\n\n### API Reference:\n\n### _class_ `AsyncQuerySet[T]` (alias: `AsyncManager[T]`)\n\n<br>\n\n### Magic methods - Iterators & Iterables:\n\n<br>\n\n#### _asynciterator_ `__aiter__` -> `Iterable[T | Tuple | datetime | date | Any]`\nAsync iterator over an `AsyncQuerySet[T]` using `async for` syntax. The type of the item evaluated queryset depends on the query made, for return type of each query please refer to the official Django QuerySet API references.\n```python\nasync for price in Price.aobjects.filter(currency=\"usd\"):\n    self.assertEqual(price.currency, \"usd\")\n```\n\n<br>\n\n#### _getitem_ `__getitem__` -> `AsyncQuerySet[T] | Awaitable[T | Tuple | datetime | date | Any]`\nSlicing and indexing over an `AsyncQuerySet[T]` using `[]` syntax.\n\nSlicing an `AsyncQuerySet[T]` will return a new `AsyncQuerySet[T]`, slicing using steps is not allowed, as it would evaluate the internal sync `QuerySet` and raises `SynchronousOnlyOperation`.\n```python\nprices = await Price.aobjects.all()[:2].eval()\nprices = await Price.aobjects.all()[1:2].eval()\nprices = await Price.aobjects.all().order_by(\"-amount\")[1:].eval()\n```\nIndexing an `AsyncQuerySet[T]` will return an `Awaitable[T | Tuple | datetime | date | Any]` (return of the awaitable depends on the query, for return type of each query please refer to the official Django QuerySet API references).\n```python\nprice = await Price.aobjects.all()[0]\nprice = await Price.aobjects.all()[:5][0]\nprice = await Price.aobjects.filter(amount__gte=Decimal(\"9.99\"))[0]\n```\n\n<br>\n\n### Magic methods - General\n\n<br>\n\n#### _builtin_ `__repr__`\nReturns `f\"<AsyncQuerySet [...{self._cls}]>\"`.\n\n<br>\n\n#### _builtin_ `__str__`\nReturns `f\"<AsyncQuerySet [...{self._cls}]>\"`.\n\n<br>\n\n#### _builtin_ `__len__`\nRaises `NotImplementedError`, `AsyncQuerySet` does not support `__len__()`, use `.count()` instead.\n\n<br>\n\n#### _builtin_ `__bool__`\nRaises `NotImplementedError`, `AsyncQuerySet` does not support `__bool__()`, use `.exists()` instead.\n\n<br>\n\n### Magic methods - Operators\n\n<br>\n\n#### _operator_ `__and__` (`&`)\n`AsyncQuerySet[T] & AsyncQuerySet[T] -> AsyncQuerySet[T]`\n```python\n# async qs for prices amount > 19.99\nqa = Price.aobjects.filter(amount__gt=Decimal(\"2.99\"))\nqb = Price.aobjects.filter(amount__gt=Decimal(\"19.99\"))\nqs = qa & qb\n```\n\n<br>\n\n#### _operator_ `__or__` (`|`)\n`AsyncQuerySet[T] | AsyncQuerySet[T] -> AsyncQuerySet[T]`\n```python\n# async qs for prices with usd and eur currency\nqa = Price.aobjects.filter(currency=\"usd\")\nqb = Price.aobjects.filter(currency=\"eur\")\nqs = qa | qb\n```\n\n<br>\n\n### Methods for explicit evaluation of querysets\n\n<br>\n\n#### _asyncmethod_ `item(val: Union[int, Any])` -> `T | Tuple | datetime | date | Any`\nReturns the item on index `val` of an `AsyncQuerySet[T]`. This method is used by `__getitem__` internally. The return type depends on the query, for return type of each query please refer to the official Django QuerySet API references.\n\n<br>\n\n#### _asyncmethod_ `eval()` -> `List[T | Tuple | datetime | date | Any]`\nReturns the evaluated `AsyncQuerySet[T]` in a list. Equivalent of `sync_to_async(list)(qs: QuerySet[T])`. The item type of the list depends on the query, for return type of each query please refer to the official Django QuerySet API references.\n```python\ntoppings = await Topping.aobjects.all().eval()\ntoppings_start_with_B = await Topping.aobjects.filter(name__startswith=\"B\").eval()\n```\n\n<br>\n\n### Methods that returns a new `AsyncQuerySet[T]` containing the new internal `QuerySet[T]`.\n> Used for building queries. These methods are NOT async, it will not connect to the database unless evaluated by other methods or iterations. For return type and in-depth info of each method please refer to the official Django QuerySet API references.\n\n<br>\n\n#### _method_ `filter(*args, **kwargs)`\nEquivalent of `models.Manager.filter` and `QuerySet.filter`.\n\n<br>\n\n#### _method_ `exclude(*args, **kwargs)`\nEquivalent of `models.Manager.exclude` and `QuerySet.exclude`.\n\n<br>\n\n#### _method_ `annotate(*args, **kwargs)`\nEquivalent of `models.Manager.annotate` and `QuerySet.annotate`.\n\n<br>\n\n#### _method_ `alias(*args, **kwargs)`\nEquivalent of `models.Manager.alias` and `QuerySet.alias`.\n\n<br>\n\n#### _method_ `order_by(*fields)`\nEquivalent of `models.Manager.order_by` and `QuerySet.order_by`.\n\n<br>\n\n#### _method_ `reverse()`\nEquivalent of `models.Manager.reverse` and `QuerySet.reverse`.\n\n<br>\n\n#### _method_ `distinct(*fields)`\nEquivalent of `models.Manager.distinct` and `QuerySet.distinct`.\n\n<br>\n\n#### _method_ `values(*fields, **expressions)`\nEquivalent of `models.Manager.values` and `QuerySet.values`.\n\n<br>\n\n#### _method_ `values_list(*fields, flat=False, named=False)`\nEquivalent of `models.Manager.values_list` and `QuerySet.values_list`.\n\n<br>\n\n#### _method_ `dates(field, kind, order='ASC')`\nEquivalent of `models.Manager.dates` and `QuerySet.dates`.\n\n<br>\n\n#### _method_ `datetimes(field_name, kind, order='ASC', tzinfo=None, is_dst=None)`\nEquivalent of `models.Manager.datetimes` and `QuerySet.datetimes`.\n\n<br>\n\n#### _method_ `none()`\nEquivalent of `models.Manager.none` and `QuerySet.none`.\n\n<br>\n\n#### _method_ `all()`\nEquivalent of `models.Manager.all` and `QuerySet.all`.\n\n<br>\n\n#### _method_ `union(*other_qs: \"AsyncQuerySet[T]\", all=False)`\nEquivalent of `models.Manager.union` and `QuerySet.union`.\n\n<br>\n\n#### _method_ `intersection(*other_qs: \"AsyncQuerySet[T]\")`\nEquivalent of `models.Manager.intersection` and `QuerySet.intersection`.\n\n<br>\n\n#### _method_ `difference(*other_qs: \"AsyncQuerySet[T]\")`\nEquivalent of `models.Manager.difference` and `QuerySet.difference`.\n\n<br>\n\n#### _method_ `select_related(*fields)`\nEquivalent of `models.Manager.select_related` and `QuerySet.select_related`.\n\n<br>\n\n#### _method_ `prefetch_related(*lookups)`\nEquivalent of `models.Manager.prefetch_related` and `QuerySet.prefetch_related`.\n\n<br>\n\n#### _method_ `extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)`\nEquivalent of `models.Manager.extra` and `QuerySet.extra`.\n\n<br>\n\n#### _method_ `defer(*fields)`\nEquivalent of `models.Manager.defer` and `QuerySet.defer`.\n\n<br>\n\n#### _method_ `only(*fields)`\nEquivalent of `models.Manager.only` and `QuerySet.only`.\n\n<br>\n\n#### _method_ `using(alias)`\nEquivalent of `models.Manager.using` and `QuerySet.using`.\n\n<br>\n\n#### _method_ `select_for_update(nowait=False, skip_locked=False, of=(), no_key=False)`\nEquivalent of `models.Manager.select_for_update` and `QuerySet.select_for_update`.\n\n<br>\n\n#### _method_ `raw(raw_query, params=(), translations=None, using=None)`\nEquivalent of `models.Manager.raw` and `QuerySet.raw`.\n\n<br>\n\n### Methods that does NOT return a new `AsyncQuerySet[T]`.\n> These methods are async and will connect to the database. For return type and in-depth info of each method please refer to the official Django QuerySet API references.\n\n<br>\n\n#### _asyncmethod_ `get(**kwargs)`\nAsync equivalent of `models.Manager.get` and `QuerySet.get`.\n\n<br>\n\n#### _asyncmethod_ `create(**kwargs)`\nAsync equivalent of `models.Manager.create` and `QuerySet.create`.\n\n<br>\n\n#### _asyncmethod_ `get_or_create(**kwargs)`\nAsync equivalent of `models.Manager.get_or_create` and `QuerySet.get_or_create`.\n\n<br>\n\n#### _asyncmethod_ `update_or_create(defaults=None, **kwargs)`\nAsync equivalent of `models.Manager.update_or_create` and `QuerySet.update_or_create`.\n\n<br>\n\n#### _asyncmethod_ `bulk_create(objs, batch_size=None, ignore_conflicts=False)`\nAsync equivalent of `models.Manager.bulk_create` and `QuerySet.bulk_create`.\n\n<br>\n\n#### _asyncmethod_ `bulk_update(objs, fields, batch_size=None)`\nAsync equivalent of `models.Manager.bulk_update` and `QuerySet.bulk_update`.\n\n<br>\n\n#### _asyncmethod_ `count()`\nAsync equivalent of `models.Manager.count` and `QuerySet.count`.\n\n<br>\n\n#### _asyncmethod_ `in_bulk(id_list=None, *, field_name='pk')`\nAsync equivalent of `models.Manager.in_bulk` and `QuerySet.in_bulk`.\n\n<br>\n\n#### _asyncmethod_ `iterator(chunk_size=2000)`\nAsync equivalent of `models.Manager.iterator` and `QuerySet.iterator`.\n\n<br>\n\n#### _asyncmethod_ `latest(*fields)`\nAsync equivalent of `models.Manager.latest` and `QuerySet.latest`.\n\n<br>\n\n#### _asyncmethod_ `earliest(*fields)`\nAsync equivalent of `models.Manager.earliest` and `QuerySet.earliest`.\n\n<br>\n\n#### _asyncmethod_ `first()`\nAsync equivalent of `models.Manager.first` and `QuerySet.first`.\n\n<br>\n\n#### _asyncmethod_ `last()`\nAsync equivalent of `models.Manager.last` and `QuerySet.last`.\n\n<br>\n\n#### _asyncmethod_ `aggregate(*args, **kwargs)`\nAsync equivalent of `models.Manager.aggregate` and `QuerySet.aggregate`.\n\n<br>\n\n#### _asyncmethod_ `exists()`\nAsync equivalent of `models.Manager.exists` and `QuerySet.exists`.\n\n<br>\n\n#### _asyncmethod_ `update(**kwargs)`\nAsync equivalent of `models.Manager.update` and `QuerySet.update`.\n\n<br>\n\n#### _asyncmethod_ `delete()`\nAsync equivalent of `models.Manager.delete` and `QuerySet.delete`.\n\n<br>\n\n#### _asyncmethod_ `explain(format=None, **options)`\nAsync equivalent of `models.Manager.explain` and `QuerySet.explain`.\n\n<br>\n\n### _class_ `AsyncManyToOneRelatedQuerySet[T]` (alias: `AsyncManyToOneRelatedManager[T]`)\n\nExtends `AsyncQuerySet[T]`. Manager returned for reverse many-to-one foreign relation access.\n\n<br>\n\n#### _asyncmethod_ `add(*objs, bulk=True)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_reverse_many_to_one_manager.RelatedManager.add`.\n\n<br>\n\n#### _asyncmethod_ `remove(*objs, bulk=True)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_reverse_many_to_one_manager.RelatedManager.remove`.\n\n<br>\n\n#### _asyncmethod_ `clear(*, bulk=True)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_reverse_many_to_one_manager.RelatedManager.clear`.\n\n<br>\n\n#### _asyncmethod_ `set(objs, *, bulk=True, clear=False)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_reverse_many_to_one_manager.RelatedManager.set`.\n\n<br>\n\n### _class_ `AsyncManyToManyRelatedQuerySet[T]` (alias: `AsyncManyToManyRelatedManager[T]`)\n\nExtends `AsyncQuerySet[T]`. Manager returned for many-to-many foreign relation access.\n\n<br>\n\n#### _asyncmethod_ `add(*objs, through_defaults=None)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.add`.\n\n<br>\n\n#### _asyncmethod_ `create(*, through_defaults=None, **kwargs)` -> `T`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.create`.\n\n<br>\n\n#### _asyncmethod_ `get_or_create(*, through_defaults=None, **kwargs)` -> `T`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.get_or_create`.\n\n<br>\n\n#### _asyncmethod_ `update_or_create(*, through_defaults=None, **kwargs)` -> `T`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.update_or_create`.\n\n<br>\n\n#### _asyncmethod_ `remove(*objs)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.remove`.\n\n<br>\n\n#### _asyncmethod_ `clear()` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.clear`.\n\n<br>\n\n#### _asyncmethod_ `set(objs, *, clear=False, through_defaults=None)` -> `None`\nAsync equivalent of `models.fields.related_descriptors.create_forward_many_to_many_manager.RelatedManager.set`.\n\n<br>\n\n---\n\n## Typed async and sync wrappers\n\nAs of the release of this package the `sync_to_async` and `async_to_sync` wrappers on `asgiref.sync` are not typed, this package provides the typed equivalent of these wrappers:\n- If project is on python<3.10, only the return type will be typed.\n- If project is on python>=3.10, both the return type and param specs will be typed ([PEP 612](https://www.python.org/dev/peps/pep-0612/)).\n\nImport:\n\n```python\nfrom asgimod.sync import sync_to_async, async_to_sync\n```\n\nUsage: Same as `asgiref.sync`\n\n<br>\n\n---\n\n## Contribution & Development\n\nContributions are welcomed, there are uncovered test cases and probably missing features.\n\n### Typing the missing things in sync Django\n\nDjango itself is not doing well at typing, for example the sync managers are not typed, but please keep those out of the scope of this project as it's not related to async and asgi.\n\n### Running the tests\n\nA django test project was used for testing, simply run\n```sh\npython manage.py shell\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paaksing/asgimod",
    "keywords": "Django,asyncio,async",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asgimod",
    "package_url": "https://pypi.org/project/asgimod/",
    "platform": "",
    "project_url": "https://pypi.org/project/asgimod/",
    "project_urls": {
      "Homepage": "https://github.com/paaksing/asgimod"
    },
    "release_url": "https://pypi.org/project/asgimod/0.1.1/",
    "requires_dist": [
      "Django (>=3.0)"
    ],
    "requires_python": "",
    "summary": "Package to make Django *usable* in async Python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12210664,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "554a213635b15249f9f425bc7683d32901a295e21528a4b408c575adee104454",
          "md5": "33e3bbcd9deea5edfe644b55b6f54254",
          "sha256": "d588c6f33c7df8c376b0a58df4063db1699d7e32ca47d09c2b289825d779c8a3"
        },
        "downloads": -1,
        "filename": "asgimod-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33e3bbcd9deea5edfe644b55b6f54254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10338,
        "upload_time": "2021-12-04T13:22:26",
        "upload_time_iso_8601": "2021-12-04T13:22:26.153212Z",
        "url": "https://files.pythonhosted.org/packages/55/4a/213635b15249f9f425bc7683d32901a295e21528a4b408c575adee104454/asgimod-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cf37df793431cab5eb25d429f5bda54689e8cce0ffd39c8853ba25f8fe7c11d",
          "md5": "d3b0dfeeb3945992e52edd8408ef27e7",
          "sha256": "719b7a9b8df933141cb533d160a428ab6f71b5418d91bfb1399f00c22988b336"
        },
        "downloads": -1,
        "filename": "asgimod-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d3b0dfeeb3945992e52edd8408ef27e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14045,
        "upload_time": "2021-12-04T13:22:27",
        "upload_time_iso_8601": "2021-12-04T13:22:27.398733Z",
        "url": "https://files.pythonhosted.org/packages/8c/f3/7df793431cab5eb25d429f5bda54689e8cce0ffd39c8853ba25f8fe7c11d/asgimod-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70d458efc75b461727d6ff70b6f5a11bce6bb561c91ff1de70b2ddca975a30b3",
          "md5": "762be7ff92982ac8e8a6848aa94d617f",
          "sha256": "5863a708600261953512d9c6695f7225314a4ba3db5b203a473c845de03a43b4"
        },
        "downloads": -1,
        "filename": "asgimod-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "762be7ff92982ac8e8a6848aa94d617f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10550,
        "upload_time": "2021-12-04T20:47:13",
        "upload_time_iso_8601": "2021-12-04T20:47:13.887475Z",
        "url": "https://files.pythonhosted.org/packages/70/d4/58efc75b461727d6ff70b6f5a11bce6bb561c91ff1de70b2ddca975a30b3/asgimod-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68d3e729154383bdbcf919aec36f68238b99729f4aac2e6e687d5054ab947cf0",
          "md5": "7bf0e8a788b530037dc165995af9c4f3",
          "sha256": "3f4df456ef5bf76614cc5e03ac99581edf3a92bb54bd26f4a29e3446b5a8c740"
        },
        "downloads": -1,
        "filename": "asgimod-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7bf0e8a788b530037dc165995af9c4f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14513,
        "upload_time": "2021-12-04T20:47:15",
        "upload_time_iso_8601": "2021-12-04T20:47:15.410220Z",
        "url": "https://files.pythonhosted.org/packages/68/d3/e729154383bdbcf919aec36f68238b99729f4aac2e6e687d5054ab947cf0/asgimod-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70d458efc75b461727d6ff70b6f5a11bce6bb561c91ff1de70b2ddca975a30b3",
        "md5": "762be7ff92982ac8e8a6848aa94d617f",
        "sha256": "5863a708600261953512d9c6695f7225314a4ba3db5b203a473c845de03a43b4"
      },
      "downloads": -1,
      "filename": "asgimod-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "762be7ff92982ac8e8a6848aa94d617f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10550,
      "upload_time": "2021-12-04T20:47:13",
      "upload_time_iso_8601": "2021-12-04T20:47:13.887475Z",
      "url": "https://files.pythonhosted.org/packages/70/d4/58efc75b461727d6ff70b6f5a11bce6bb561c91ff1de70b2ddca975a30b3/asgimod-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68d3e729154383bdbcf919aec36f68238b99729f4aac2e6e687d5054ab947cf0",
        "md5": "7bf0e8a788b530037dc165995af9c4f3",
        "sha256": "3f4df456ef5bf76614cc5e03ac99581edf3a92bb54bd26f4a29e3446b5a8c740"
      },
      "downloads": -1,
      "filename": "asgimod-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7bf0e8a788b530037dc165995af9c4f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14513,
      "upload_time": "2021-12-04T20:47:15",
      "upload_time_iso_8601": "2021-12-04T20:47:15.410220Z",
      "url": "https://files.pythonhosted.org/packages/68/d3/e729154383bdbcf919aec36f68238b99729f4aac2e6e687d5054ab947cf0/asgimod-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}