{
  "info": {
    "author": "Kyubyong Park",
    "author_email": "kbpark.linguist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# name2nat: a Python package for nationality prediction from a name\n\n__name2nat__ is a Python package that predicts the nationality of any name written in Roman letters.\nFor example, it returns the correct output `Korean` for my name `Kyubyong Park'.\nNeedless to say, it is not possible to guess somebody's nationality 100% right from their name.\nAfter all, nationality can change, you know.\nHowever, it is also true that there is a tendency between names and nationality.\nSo it turns out statistical classifiers for this task works to some extent.\nDetails are explained below.\n\n## NaNa Dataset\n\n### Construction\nI constructed a new dataset for this project because I failed to find any available dataset that is big and comprehensive enough.\n\n* STEP 1. Downloaded and extracted the 20200601 English wiki dump (enwiki-20200601-pages-articles.xml).\n* STEP 2. Iterated all pages and collected the title and the nationality. \nI regarded the title as a person if the Category section at the bottom of each page included ... births (green rectangule),\nand identified their nationality from the most frequent nationality word in the section (red rectangules).\n<img src=\"wiki.png\" >\n* STEP 3. Randomly split the data into train/dev/test in the ratio of 8:1:1 within each nationality group.\n\n### Stats\n| Nationality | Train | Dev | Test | \n|--|--|--|--|\n|Total 1112902 | 890248 |111286|111368|\n| Afghan | 778 | 97 | 98 |\n| Albanian | 2193 | 274 | 275 |\n| Algerian | 1592 | 199 | 200 |\n| American | 241772 | 30221 | 30222 |\n| Andorran | 188 | 24 | 24 |\n| Angolan | 504 | 63 | 63 |\n| Argentine | 8926 | 1116 | 1116 |\n| Armenian | 1600 | 200 | 201 |\n| Aruban | 93 | 12 | 12 |\n| Australian | 40536 | 5067 | 5067 |\n| Austrian | 9192 | 1149 | 1149 |\n| Azerbaijani | 1331 | 166 | 167 |\n| Bahamian | 233 | 29 | 30 |\n| Bahraini | 237 | 30 | 30 |\n| Bangladeshi | 1636 | 204 | 205 |\n| Barbadian | 372 | 47 | 47 |\n| Basque | 961 | 120 | 121 |\n| Belarusian | 2338 | 292 | 293 |\n| Belgian | 7907 | 988 | 989 |\n| Belizean | 148 | 19 | 19 |\n| Beninese | 199 | 25 | 25 |\n| Bermudian | 270 | 34 | 34 |\n| Bhutanese | 144 | 18 | 18 |\n| Bolivian | 657 | 82 | 83 |\n| Bosniak | 81 | 10 | 11 |\n| Botswana | 252 | 31 | 32 |\n| Brazilian | 11234 | 1404 | 1405 |\n| Breton | 118 | 15 | 15 |\n| British | 45922 | 5740 | 5741 |\n| Bruneian | 115 | 14 | 15 |\n| Bulgarian | 3926 | 491 | 491 |\n| BurkinabÃ© | 289 | 36 | 37 |\n| Burmese | 944 | 118 | 118 |\n| Burundian | 140 | 17 | 18 |\n| Cambodian | 360 | 45 | 46 |\n| Cameroonian | 1028 | 129 | 129 |\n| Canadian | 34152 | 4269 | 4270 |\n| Catalan | 1717 | 215 | 215 |\n| Chadian | 139 | 17 | 18 |\n| Chilean | 2838 | 355 | 355 |\n| Chinese | 9494 | 1187 | 1187 |\n| Colombian | 2620 | 328 | 328 |\n| Comorian | 54 | 7 | 7 |\n| Congolese | 35 | 4 | 5 |\n| Cuban | 1938 | 242 | 243 |\n| Cypriot | 1016 | 127 | 128 |\n| Czech | 7244 | 906 | 906 |\n| Dane | 32 | 4 | 5 |\n| Djiboutian | 54 | 7 | 7 |\n| Dominican | 1580 | 198 | 198 |\n| Dutch | 14916 | 1864 | 1865 |\n| Ecuadorian | 874 | 109 | 110 |\n| Egyptian | 2776 | 347 | 348 |\n| Emirati | 621 | 78 | 78 |\n| English | 77159 | 9645 | 9645 |\n| Equatoguinean | 193 | 24 | 25 |\n| Eritrean | 133 | 17 | 17 |\n| Estonian | 2028 | 254 | 254 |\n| Ethiopian | 733 | 92 | 92 |\n| Faroese | 284 | 35 | 36 |\n| Filipino | 3928 | 491 | 491 |\n| Finn | 68 | 8 | 9 |\n| French | 40841 | 5105 | 5106 |\n| Gabonese | 180 | 23 | 23 |\n| Gambian | 220 | 28 | 28 |\n| Georgian | 262 | 33 | 33 |\n| German | 42388 | 5299 | 5299 |\n| Ghanaian | 2036 | 255 | 255 |\n| Gibraltarian | 98 | 12 | 13 |\n| Greek | 5975 | 747 | 747 |\n| Grenadian | 139 | 17 | 18 |\n| Guatemalan | 563 | 70 | 71 |\n| Guinean | 584 | 73 | 74 |\n| Guyanese | 358 | 45 | 45 |\n| Haitian | 561 | 70 | 71 |\n| Honduran | 500 | 63 | 63 |\n| Hungarian | 7220 | 903 | 903 |\n| I-Kiribati | 40 | 5 | 6 |\n| Indian | 22692 | 2836 | 2837 |\n| Indonesian | 2820 | 352 | 353 |\n| Iranian | 5010 | 626 | 627 |\n| Iraqi | 1252 | 157 | 157 |\n| Irish | 11844 | 1481 | 1481 |\n| Israeli | 5149 | 644 | 644 |\n| Italian | 29336 | 3667 | 3668 |\n| Jamaican | 1422 | 178 | 178 |\n| Japanese | 21216 | 2652 | 2652 |\n| Jordanian | 490 | 61 | 62 |\n| Kazakh | 24 | 3 | 4 |\n| Kenyan | 1609 | 201 | 202 |\n| Korean | 7896 | 987 | 988 |\n| Kuwaiti | 396 | 50 | 50 |\n| Kyrgyz | 16 | 2 | 2 |\n| Lao | 26 | 3 | 4 |\n| Latvian | 1693 | 212 | 212 |\n| Lebanese | 1246 | 156 | 156 |\n| Liberian | 294 | 37 | 37 |\n| Libyan | 271 | 34 | 34 |\n| Lithuanian | 1979 | 247 | 248 |\n| Macedonian | 1099 | 137 | 138 |\n| Malagasy | 232 | 29 | 29 |\n| Malawian | 219 | 27 | 28 |\n| Malaysian | 2582 | 323 | 323 |\n| Maldivian | 152 | 19 | 20 |\n| Malian | 385 | 48 | 49 |\n| Maltese | 663 | 83 | 83 |\n| Manx | 150 | 19 | 19 |\n| Marshallese | 32 | 4 | 4 |\n| Mauritanian | 96 | 12 | 12 |\n| Mauritian | 263 | 33 | 33 |\n| Mexican | 8648 | 1081 | 1081 |\n| Moldovan | 1000 | 125 | 125 |\n| Mongolian | 504 | 63 | 64 |\n| Montenegrin | 955 | 119 | 120 |\n| Moroccan | 1457 | 182 | 183 |\n| Mozambican | 210 | 26 | 27 |\n| Namibian | 588 | 74 | 74 |\n| Nauruan | 32 | 4 | 4 |\n| Nepalese | 773 | 97 | 97 |\n| Nicaraguan | 285 | 36 | 36 |\n| Nigerian | 4060 | 507 | 508 |\n| Nigerien | 143 | 18 | 18 |\n| Norwegian | 13512 | 1689 | 1690 |\n| Omani | 197 | 25 | 25 |\n| Pakistani | 3762 | 470 | 471 |\n| Palauan | 35 | 4 | 5 |\n| Palestinian | 528 | 66 | 66 |\n| Panamanian | 474 | 59 | 60 |\n| Paraguayan | 1012 | 127 | 127 |\n| Peruvian | 1521 | 190 | 191 |\n| Portuguese | 4734 | 592 | 592 |\n| Qatari | 548 | 68 | 69 |\n| Romanian | 6551 | 819 | 819 |\n| Russian | 21274 | 2659 | 2660 |\n| Rwandan | 269 | 34 | 34 |\n| Salvadoran | 507 | 63 | 64 |\n| Sammarinese | 198 | 25 | 25 |\n| Samoan | 596 | 75 | 75 |\n| Saudi | 1496 | 187 | 188 |\n| Senegalese | 823 | 103 | 103 |\n| Serb | 44 | 6 | 6 |\n| Singaporean | 1316 | 165 | 165 |\n| Slovak | 2867 | 358 | 359 |\n| Slovene | 88 | 11 | 12 |\n| Somali | 116 | 14 | 15 |\n| Sotho | 49 | 6 | 7 |\n| Sudanese | 348 | 44 | 44 |\n| Surinamese | 200 | 25 | 25 |\n| Swazi | 114 | 14 | 15 |\n| Syriac | 78 | 10 | 10 |\n| Syrian | 1047 | 131 | 131 |\n| Taiwanese | 1946 | 243 | 244 |\n| Tajik | 61 | 8 | 8 |\n| Tamil | 1399 | 175 | 175 |\n| Tanzanian | 627 | 78 | 79 |\n| Thai | 2747 | 343 | 344 |\n| Tibetan | 265 | 33 | 34 |\n| Togolese | 211 | 26 | 27 |\n| Tongan | 456 | 57 | 57 |\n| Tunisian | 1072 | 134 | 134 |\n| Turk | 79 | 10 | 10 |\n| Tuvaluan | 66 | 8 | 9 |\n| Ugandan | 1052 | 132 | 132 |\n| Ukrainian | 6198 | 775 | 775 |\n| Uruguayan | 2267 | 283 | 284 |\n| Uzbek | 62 | 8 | 8 |\n| Vanuatuan | 116 | 15 | 15 |\n| Venezuelan | 1937 | 242 | 243 |\n| Vietnamese | 1257 | 157 | 158 |\n| Vincentian | 8 | 1 | 1 |\n| Welsh | 5270 | 659 | 659 |\n| Yemeni | 322 | 40 | 41 |\n| Zambian | 510 | 64 | 64 |\n\n### Downloadable Link\n* You can download the dataset [here](https://www.kaggle.com/bryanpark/nana-dataset).\n\n## name2nat\n\n### Installation\n```\npip install name2nat\n```\n\n### Usage\n```\n>>> from name2nat import Name2nat\n\n>>> my_nanat = Name2nat()\n\n>>> names = [\"Donald Trump\", # American\n         \"Moon Jae-in\", # Korean\n         \"Shinzo Abe\", # Japanese\n         \"Xi Jinping\", # Chinese\n         \"Joko Widodo\", # Indonesian\n         \"Angela Merkel\", # German\n         \"Emmanuel Macron\", # French\n         \"Kyubyong Park\", # Korean\n         \"Yamamoto Yu\", # Japanese\n         \"Jing Xu\"] # Chinese\n>>> result = my_nanat(names, top_n=3)\n>>> print(result)\n# (name, [(nationality, prob), ...])\n# Note that prob of 1.0 indicates the name exists\n# in Wikipedia.\n[\n('Donald Trump', [('American', 1.0)])\n('Moon Jae-in', [('Korean', 1.0)])\n('Shinzo Abe', [('Japanese', 1.0)])\n('Xi Jinping', [('Chinese', 1.0)])\n('Joko Widodo', [('Indonesian', 1.0)])\n('Angela Merkel', [('German', 1.0)])\n('Emmanuel Macron', [('French', 1.0)])\n('Kyubyong Park', [('Korean', 0.9985014200210571), ('American', 0.000289416522718966), ('Bhutanese', 0.00025851925602182746)])\n('Yamamoto Yu', [('Japanese', 0.7050493359565735), ('Taiwanese', 0.12779785692691803), ('Chinese', 0.04263153299689293)])\n('Jing Xu', [('Chinese', 0.8626819252967834), ('Taiwanese', 0.09901007264852524), ('American', 0.022995812818408012)])\n]\n```\n\n### Training\nI use a powerful NLP library [Flair](https://github.com/flairNLP/flair) to train a text classifier model.\nA bidirectional GRU layer is employed.\n```\npython train.py\n```\n\n### Evaluation\n```\npython predict.py;\npython eval.py --gt nana/test.tgt --pred test.pred\n```\n\n### Results\n|K | Precision@K | \n|--|--|\n|1| 61310/111368=55.1|\n|2|77480/111368=69.6|\n|3|86703/111368=77.9 | \n|4|92491/111368=83.0|\n|5|96697/111368=86.8|\n\n### References\n\nIf you use this code for research, please cite:\n\n```\n@misc{park2018name2nat,\n  author = {Park, Kyubyong},\n  title = {name2nat: a Python package for nationality prediction from a name},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/Kyubyong/name2nat}}\n}\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kyubyong/name2nat",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "name2nat",
    "package_url": "https://pypi.org/project/name2nat/",
    "platform": "",
    "project_url": "https://pypi.org/project/name2nat/",
    "project_urls": {
      "Homepage": "https://github.com/Kyubyong/name2nat"
    },
    "release_url": "https://pypi.org/project/name2nat/0.5.1/",
    "requires_dist": [
      "flair"
    ],
    "requires_python": ">=3.6",
    "summary": "Nationality Prediction from Name",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7530225,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41caebee0962eae6f69533c9e0cea8f6d344ec9655a9c6c6a5face7ddc0a1081",
          "md5": "580c680207c4f9771f5559199eb8991a",
          "sha256": "cf6c45de61accfeb1d80c9ae86efd42fcf40cac481da5ab04d8a66dd7195fe94"
        },
        "downloads": -1,
        "filename": "name2nat-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "580c680207c4f9771f5559199eb8991a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26057064,
        "upload_time": "2020-06-21T23:02:33",
        "upload_time_iso_8601": "2020-06-21T23:02:33.704174Z",
        "url": "https://files.pythonhosted.org/packages/41/ca/ebee0962eae6f69533c9e0cea8f6d344ec9655a9c6c6a5face7ddc0a1081/name2nat-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94bc77afa2b473e6c2fcf04733cbba8cbfdb1bbcd099648011c5a5cbf4754367",
          "md5": "561cc321e69bb1ab18ed0b5a20e009f0",
          "sha256": "205b2a27a53122eb1427a483e5bbb4ab143915ebf0def268f544f99f7f3dfbe1"
        },
        "downloads": -1,
        "filename": "name2nat-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "561cc321e69bb1ab18ed0b5a20e009f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25817669,
        "upload_time": "2020-06-21T23:02:40",
        "upload_time_iso_8601": "2020-06-21T23:02:40.766032Z",
        "url": "https://files.pythonhosted.org/packages/94/bc/77afa2b473e6c2fcf04733cbba8cbfdb1bbcd099648011c5a5cbf4754367/name2nat-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41caebee0962eae6f69533c9e0cea8f6d344ec9655a9c6c6a5face7ddc0a1081",
        "md5": "580c680207c4f9771f5559199eb8991a",
        "sha256": "cf6c45de61accfeb1d80c9ae86efd42fcf40cac481da5ab04d8a66dd7195fe94"
      },
      "downloads": -1,
      "filename": "name2nat-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "580c680207c4f9771f5559199eb8991a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26057064,
      "upload_time": "2020-06-21T23:02:33",
      "upload_time_iso_8601": "2020-06-21T23:02:33.704174Z",
      "url": "https://files.pythonhosted.org/packages/41/ca/ebee0962eae6f69533c9e0cea8f6d344ec9655a9c6c6a5face7ddc0a1081/name2nat-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94bc77afa2b473e6c2fcf04733cbba8cbfdb1bbcd099648011c5a5cbf4754367",
        "md5": "561cc321e69bb1ab18ed0b5a20e009f0",
        "sha256": "205b2a27a53122eb1427a483e5bbb4ab143915ebf0def268f544f99f7f3dfbe1"
      },
      "downloads": -1,
      "filename": "name2nat-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "561cc321e69bb1ab18ed0b5a20e009f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25817669,
      "upload_time": "2020-06-21T23:02:40",
      "upload_time_iso_8601": "2020-06-21T23:02:40.766032Z",
      "url": "https://files.pythonhosted.org/packages/94/bc/77afa2b473e6c2fcf04733cbba8cbfdb1bbcd099648011c5a5cbf4754367/name2nat-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}