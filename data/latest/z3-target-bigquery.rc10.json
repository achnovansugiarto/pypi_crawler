{
  "info": {
    "author": "Alex Butler",
    "author_email": "butler.alex2010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "<h1 align=\"center\">Target-BigQuery</h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/z3z1ma/target-bigquery/actions/\"><img alt=\"Actions Status\" src=\"https://github.com/z3z1ma/target-bigquery/actions/workflows/ci.yml/badge.svg\"></a>\n<a href=\"https://github.com/z3z1ma/target-bigquery/blob/main/LICENSE\"><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n</p>\n\n**A rare üíé you have stumbled upon**\n\n`target-bigquery` is a Singer target for BigQuery.\n\nIt is the most versatile target for BigQuery. Extremely performant, resource efficient, and fast in all configurations enabling 20 different ingestion patterns. Denormalized variants indicate data is unpacked during load with a resultant schema in BigQuery based on the tap schema. Non-denormalized means we have a fixed schema which loads all data into an unstructured `JSON` column. They are both useful patterns. The latter allowing BigQuery to work with schemaless or rapidly changing sources such as MongoDB instantly, while the former is more performant and convenient to start modeling quickly.\n\n**Patterns** üõ† (more details below)\n\n- Batch Job, Denormalized, Overwrite\n- Batch Job, Denormalized, Upsert\n- Batch Job, Denormalized, Append\n- Batch Job, Fixed Schema, Overwrite\n- Batch Job, Fixed Schema, Append\n- GCS Staging Data Lake, Denormalized, Overwrite\n- GCS Staging Data Lake, Denormalized, Upsert\n- GCS Staging Data Lake, Denormalized, Append\n- GCS Staging Data Lake, Fixed Schema, Overwrite\n- GCS Staging Data Lake, Fixed Schema, Append\n- Storage Write API, Denormalized, Overwrite\n- Storage Write API, Denormalized, Upsert\n- Storage Write API, Denormalized, Append\n- Storage Write API, Fixed Schema, Overwrite\n- Storage Write API, Fixed Schema, Append\n- Legacy Streaming API, Denormalized, Overwrite\n- Legacy Streaming API, Denormalized, Upsert\n- Legacy Streaming API, Denormalized, Append\n- Legacy Streaming API, Fixed Schema, Overwrite\n- Legacy Streaming API, Fixed Schema, Append\n\n## Installation üìà\n\nThe package on pypi is named `z3-target-bigquery` but the executable it ships with is simply `target-bigquery`. This allows me to release work without concerns of naming conflicts on the package index.\n\n```bash\n# Use pipx or pip\npipx install z3-target-bigquery\n# Verify it is installed\ntarget-bigquery --version\n```\n\n## Features ‚ú®\n\n- Autoscaling self-healing worker pool using either threads (default) or multiprocessing, configurable by the user for the _fastest_ possible data ingestion. Particularly when leveraging colocated compute in GCP.\n- Denormalized load pattern where data is unpacked in flight into a statically typed BigQuery schema derived from the input stream json schemas.\n- Fix schema load pattern where all data is loaded into a `JSON` column which has been GA in BigQuery since mid 2022.\n- Autogenerated `VIEW` support for fixed schema load patterns which essentially overlays a statically typed schema allowing you to get the best of both worlds when using fixed schema ingestion.\n- JIT compilation of protobuf schemas allowing the Storage Write API to use a denormalized load pattern. \n- BATCH message support üòé\n\n## Load Patterns üèé\n\n- `Batch Load Job` ingestion pattern using in memory compression (fixed schema + denormalized)\n- `Storage Write API` ingestion pattern using gRPC and protocol buffers supporting both streaming and batch patterns. Capable of JIT compilation of BQ schemas to protobuf to enable denormalized loads of input structures only known at runtime. (fixed schema + denormalized üéâ)\n- `GCS Staging` ingestion pattern using in memory compression and a GCS staging layer which generates a well organized data lake which backs the data warehouse providing additional failsafes and data sources (fixed schema + denormalized)\n- `Legacy Streaming` ingestion pattern which emphasizes simplicity and fast start up / tear down. I would highly recommend the storage write API instead unless data volume is small (fixed schema + denormalized)\n\n\n**Choosing between denormalized and fixed schema (JSON support)?** üôáüèæ‚Äç‚ôÇÔ∏è\n\nThe gap between the methods is closed due in part to the target's ability to  automatically generating a `VIEW` which will unpack (or rather provide typing as a more accurate take) a JSON based ingestion source for you. Unless operating at tens of millions of rows with JSON objects containing multiple hundreds of keys, its quite performant. Particularly if accessing a small subset of keys. It does however fall off (quite hard) given enough scale as I mentioned (I've pushed it to the limits). Denormalized is recommended for high volume where the schema is fairly consistent. Fixed is recommended for lower volume, inconsistent schemas or for taps which are inherently schemaless in which case its the ideal (only...) logical pattern. Fixed schema can also be used for taps which routinely break down on BQ due to json schemas being inexpressible in a static way (ie patternProperties, additionalProperties...)\n\n\n**Old Header (still true, here for posterity)** üß™\n\nThis is the first truly unstructured sink for BigQuery leveraging the recent GA feature in BigQuery for JSON support. This allows this target to load from essentially any tap regardless of the quality or explicitness of its jsonschema. Observations in existing taps note things such as `patternProperties` used in jsonschema objects which break down on all existing BigQuery taps due to the previous need for strong typing. Also taps such as MongoDB which inherently deal with unstructured data are seamlessly enabled by this target without klutzy collection scraping of a sample of records which we _hope_ are repesentative of all documents.\n\n\nBuilt with the [Meltano Target SDK](https://sdk.meltano.com).\n\n\n## Configuration üî®\n\n### Settings\n\nFirst a valid example to give context to the below including a nested key example (denoted via a `.` in the setting path) as seen with `column_name_transforms.snake_case`\n\n```json\n{\n    \"project\": \"my-bq-project\",\n    \"method\": \"storage_write_api\",\n    \"denormalized\": true,\n    \"credentials_path\": \"...\",\n    \"dataset\": \"my_dataset\",\n    \"location\": \"us-central1\",\n    \"batch_size\": 500,\n    \"column_name_transforms\": {\n      \"snake_case\": true\n    }\n}\n```\n\n\n| Setting                                            | Required |      Default      | Description|\n|:---------------------------------------------------|:--------:|:-----------------:||\n| credentials_path                                   |  False   |       None        | The path to a gcp credentials json file. |\n| credentials_json                                   |  False   |       None        | A JSON string of your service account JSON file. |\n| project                                            |   True   |       None        | The target GCP project to materialize data into. |\n| dataset                                            |   True   |       None        | The target dataset to materialize data into. |\n| location                                           |  False   |        US         | The target dataset location to materialize data into. Applies also to the GCS bucket if using `gcs_stage` load method. |\n| batch_size                                         |  False   |        500        | The maximum number of rows to send in a single batch to the worker. This should be configured based on load method. For `storage_write_api` and `streaming_insert` it should be `<=500`, for the LoadJob sinks, it can be much higher, ie `>100,000` |\n| timeout                                            |  False   |        600        | Default timeout for batch_job and gcs_stage derived LoadJobs. |\n| fail_fast                                          |  False   |        True       | Fail the entire load job if any row fails to insert. |\n| denormalized                                       |  False   |       False       | Determines whether to denormalize the data before writing to BigQuery. A false value will write data using a fixed JSON column based schema, while a true value will write data using a dynamic schema derived from the tap. |\n| method                                             |   True   | storage_write_api | The method to use for writing to BigQuery. Must be one of `batch_job`, `storage_write_api`, `gcs_stage`, `streaming_insert` |\n| generate_view                                      |  False   |       False       | Determines whether to generate a view based on the SCHEMA message parsed from the tap. Only valid if denormalized=false meaning you are using the fixed JSON column based schema. |\n| upsert                                             |  False   |       False       | Determines if we should upsert. Defaults to false. A value of true will write to a temporary table and then merge into the target table (upsert). This requires the target table to be unique on the key properties. A value of false will write to the target table directly (append). A value of an array of strings will evaluate the strings in order using fnmatch. At the end of the array, the value of the last match will be used. If not matched, the default value is false (append). |\n| overwrite                                          |  False   |       False       | Determines if the target table should be overwritten on load. Defaults to false. A value of true will write to a temporary table and then overwrite the target table inside a transaction (so it is safe). A value of false will write to the target table directly (append). A value of an array of strings will evaluate the strings in order using fnmatch. At the end of the array, the value of the last match will be used. If not matched, the default value is false. This is mutually exclusive with the `upsert` option. If both are set, `upsert` will take precedence. |\n| dedupe_before_upsert                               |  False   |       False       | This option is only used if `upsert` is enabled for a stream. The selection criteria for the stream's candidacy is the same as upsert. If the stream is marked for deduping before upsert, we will create a _session scoped temporary table during the merge transaction to dedupe the ingested records. This is useful for streams that are not unique on the key properties during an ingest but are unique in the source system. Data lake ingestion is often a good example of this where the same unique record may exist in the lake at different points in time from different extracts. |\n| bucket                                             |  False   |       None        | The GCS bucket to use for staging data. Only used if method is gcs_stage. |\n| cluster_on_key_properties                          |  False   |         0         | Determines whether to cluster on the key properties from the tap. Defaults to false. When false, clustering will be based on _sdc_batched_at instead. |\n| partition_granularity                              |  False   |      \"month\"      | Indicates the granularity of the created table partitioning scheme which is based on `_sdc_batched_at`. By default the granularity is monthly. Must be one of: \"hour\", \"day\", \"month\", \"year\". |\n| column_name_transforms.lower                       |  False   |       None        | Lowercase column names. |\n| column_name_transforms.quote                       |  False   |       None        | Quote column names in any generated DDL. |\n| column_name_transforms.add_underscore_when_invalid |  False   |       None        | Add an underscore to the column name if it starts with a digit to make it valid. |\n| column_name_transforms.snake_case                  |  False   |       None        | Snake case all incoming column names. Does not apply to fixed schema loads but _does_ apply to the view auto-generated over them. |\n| options.storage_write_batch_mode                   |  False   |       None        | By default, we use the default stream (Committed mode) in the [storage_write_api](https://cloud.google.com/bigquery/docs/write-api) load method which results in streaming records which are immediately available and is generally fastest. If this is set to true, we will use the application created streams (pending mode) to transactionally batch data on STATE messages and at end of pipe. |\n| options.process_pool                               |  False   |       None        | By default we use an autoscaling threadpool to write to BigQuery. If set to true, we will use a process pool. |\n| options.max_workers                                |  False   |       None        | By default, each sink type has a preconfigured max worker pool limit. This sets an override for maximum number of workers in the pool. |\n| stream_maps                                        |  False   |       None        | Config object for stream maps capability. For more information check out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html). |\n| stream_map_config                                  |  False   |       None        | User-defined config values to be used within map expressions. |\n| flattening_enabled                                 |  False   |       None        | 'True' to enable schema flattening and automatically expand nested properties. |\n| flattening_max_depth                               |  False   |       None        | The max depth to flatten schemas. |\n\nA full list of supported settings and capabilities is available by running: `target-bigquery --about`\n\n### Configure using environment variables ‚úèÔ∏è\n\nThis Singer target will automatically import any environment variables within the working directory's\n`.env` if the `--config=ENV` is provided, such that config values will be considered if a matching\nenvironment variable is set either in the terminal context or in the `.env` file.\n\n### Source Authentication and Authorization üëÆüèΩ‚Äç‚ôÇÔ∏è\n\nAuthenticate via service account key file or Application Default Credentials (ADC)\nhttps://cloud.google.com/bigquery/docs/authentication\n\n## Capabilities ‚ú®\n\n* `about`\n* `stream-maps`\n* `schema-flattening`\n* `batch`\n\n## Usage üë∑‚Äç‚ôÄÔ∏è\n\nYou can easily run `target-bigquery` by itself or in a pipeline using [Meltano](https://meltano.com/).\n\n\n### Executing the Target Directly üöß\n\n```bash\ntarget-bigquery --version\ntarget-bigquery --help\n# Test using the \"Carbon Intensity\" sample:\ntap-carbon-intensity | target-bigquery --config /path/to/target-bigquery-config.json\n```\n\n## Developer Resources üë©üèº‚Äçüíª\n\n\n### Initialize your Development Environment\n\n```bash\npipx install poetry\npoetry install\n```\n\n### Create and Run Tests\n\nCreate tests within the `target_bigquery/tests` subfolder and\n  then run:\n\n```bash\npoetry run pytest\n```\n\nYou can also test the `target-bigquery` CLI interface directly using `poetry run`:\n\n```bash\npoetry run target-bigquery --help\n```\n\n### Testing with [Meltano](https://meltano.com/)\n\n_**Note:** This target will work in any Singer environment and does not require Meltano.\nExamples here are for convenience and to streamline end-to-end orchestration scenarios._\n\nNext, install Meltano (if you haven't already) and any needed plugins:\n\n```bash\n# Install meltano\npipx install meltano\n# Initialize meltano within this directory\ncd target-bigquery\nmeltano install\n```\n\nNow you can test and orchestrate using Meltano:\n\n```bash\n# Test invocation:\nmeltano invoke target-bigquery --version\n# OR run a test `elt` pipeline with the Carbon Intensity sample tap:\nmeltano elt tap-carbon-intensity target-bigquery\n```\n\n### SDK Dev Guide\n\nSee the [dev guide](https://sdk.meltano.com/en/latest/dev_guide.html) for more instructions on how to use the Meltano SDK to\ndevelop your own Singer taps and targets.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/z3z1ma/target-bigquery",
    "keywords": "ELT,BigQuery",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "z3-target-bigquery",
    "package_url": "https://pypi.org/project/z3-target-bigquery/",
    "platform": null,
    "project_url": "https://pypi.org/project/z3-target-bigquery/",
    "project_urls": {
      "Homepage": "https://github.com/z3z1ma/target-bigquery",
      "Repository": "https://github.com/z3z1ma/target-bigquery"
    },
    "release_url": "https://pypi.org/project/z3-target-bigquery/0.6.3/",
    "requires_dist": [
      "requests (>=2.25.1)",
      "singer-sdk (>=0.16.0)",
      "google-cloud-bigquery[bqstorage] (>=3.4.1,<4)",
      "orjson (>=3.7.2,<4)",
      "tenacity (>=8.0.1,<9)",
      "grpcio-tools (>=1.51.1,<2)",
      "google-cloud-storage (>=2.7.0,<3)",
      "grpcio-status (>=1.51.1,<2)"
    ],
    "requires_python": ">=3.8,<3.11",
    "summary": "z3-target-bigquery is a Singer target for BigQuery. It supports storage write, GCS, streaming, and batch load methods. Built with the Meltano SDK.",
    "version": "0.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17310443,
  "releases": {
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a410c422056687fc1c7b5d34b000519e9ee96fc5604d1597af7439dfb119cb06",
          "md5": "df852147bc34468f795470434e6031c0",
          "sha256": "181ae469d218f5d36398e4d96a86cd639edd4960dee9ca10274e74c00afc70b8"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df852147bc34468f795470434e6031c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 23753,
        "upload_time": "2023-01-20T23:32:48",
        "upload_time_iso_8601": "2023-01-20T23:32:48.942061Z",
        "url": "https://files.pythonhosted.org/packages/a4/10/c422056687fc1c7b5d34b000519e9ee96fc5604d1597af7439dfb119cb06/z3_target_bigquery-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53fed3353858f29fdefea7e3d99254b16b6b4b4f9586768409df50f58b68b2c5",
          "md5": "3f20561c8c8cb96af0f88ab398e1157a",
          "sha256": "3492d8eb7859c5d66cf1f6914e96a168d559c17c2104dad1da3ec5a89fc14434"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3f20561c8c8cb96af0f88ab398e1157a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 18936,
        "upload_time": "2023-01-20T23:32:50",
        "upload_time_iso_8601": "2023-01-20T23:32:50.839155Z",
        "url": "https://files.pythonhosted.org/packages/53/fe/d3353858f29fdefea7e3d99254b16b6b4b4f9586768409df50f58b68b2c5/z3_target_bigquery-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9e732d6bc7edb3b0b4b20f11fb31302abce415e11bb18657e4a3ecf0717c70a",
          "md5": "62dd343953a079028a6446f357a9f0b8",
          "sha256": "47a6466e00df4c678446242b3582f9ebff48d3fe5359ed430368f684c6156cbe"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62dd343953a079028a6446f357a9f0b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 32567,
        "upload_time": "2023-01-20T23:38:50",
        "upload_time_iso_8601": "2023-01-20T23:38:50.703897Z",
        "url": "https://files.pythonhosted.org/packages/f9/e7/32d6bc7edb3b0b4b20f11fb31302abce415e11bb18657e4a3ecf0717c70a/z3_target_bigquery-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a9f766f5c84f08481a0afebef5267d11b26dd336bc0379e67659dbc99396138",
          "md5": "ea2b58ce92855c9efd71d26ce5960249",
          "sha256": "38b8f59abf0c783f08e546aed5355a0ae4741237d80093dcce5287c90a24c7c6"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea2b58ce92855c9efd71d26ce5960249",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 24149,
        "upload_time": "2023-01-20T23:38:52",
        "upload_time_iso_8601": "2023-01-20T23:38:52.587842Z",
        "url": "https://files.pythonhosted.org/packages/3a/9f/766f5c84f08481a0afebef5267d11b26dd336bc0379e67659dbc99396138/z3_target_bigquery-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aab129636a69c6edbfb3994122452689ecc65b8f03589f7c36f19897b16b0c41",
          "md5": "d49c8e9b035d02921a8084c31425a01c",
          "sha256": "b0858547aa054d66f2463c72685157ed100089967865e2052fa5a9a0a194b3f6"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d49c8e9b035d02921a8084c31425a01c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 32735,
        "upload_time": "2023-01-20T23:40:38",
        "upload_time_iso_8601": "2023-01-20T23:40:38.473586Z",
        "url": "https://files.pythonhosted.org/packages/aa/b1/29636a69c6edbfb3994122452689ecc65b8f03589f7c36f19897b16b0c41/z3_target_bigquery-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1f543ad46a9066b4136d47fd4277c58f7d8773c039fdd0cc6da67a78b8d7f71",
          "md5": "22644bb09055fc4a61e5c4c081c14d63",
          "sha256": "f95f6cf6495c37c191d6e6fae3887e337d4424991bc7deac396d9f3a9b392fc5"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "22644bb09055fc4a61e5c4c081c14d63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 24510,
        "upload_time": "2023-01-20T23:40:40",
        "upload_time_iso_8601": "2023-01-20T23:40:40.488394Z",
        "url": "https://files.pythonhosted.org/packages/f1/f5/43ad46a9066b4136d47fd4277c58f7d8773c039fdd0cc6da67a78b8d7f71/z3_target_bigquery-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3c506cb2c1463f2c35f6ba63dd079103af629d606a4b6def5e68cf22edba645",
          "md5": "3b6d73168b93bd108e9d8ba57e3104de",
          "sha256": "22c5c6e67a71bdb9ed796e67521c6de3aeb8a913ce2e8d376b8adaa130252f6a"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b6d73168b93bd108e9d8ba57e3104de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 37333,
        "upload_time": "2023-01-20T23:43:42",
        "upload_time_iso_8601": "2023-01-20T23:43:42.223366Z",
        "url": "https://files.pythonhosted.org/packages/c3/c5/06cb2c1463f2c35f6ba63dd079103af629d606a4b6def5e68cf22edba645/z3_target_bigquery-0.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "478786839e6d5ab05a145d300e3c8dc919caa2d461899143d90d8685d90f49b7",
          "md5": "312fc3e77ce2953e2c3bb0a6203441f0",
          "sha256": "4a9cdfed43db0c1105758318436bda7b554b4c354bf971f7d22dcf296ea15c4c"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "312fc3e77ce2953e2c3bb0a6203441f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 28957,
        "upload_time": "2023-01-20T23:43:43",
        "upload_time_iso_8601": "2023-01-20T23:43:43.812125Z",
        "url": "https://files.pythonhosted.org/packages/47/87/86839e6d5ab05a145d300e3c8dc919caa2d461899143d90d8685d90f49b7/z3_target_bigquery-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38122b2183c8fa741a9064f699861f6f274cb42619e9854d4d21a87f526ac07",
          "md5": "a379427f61646f5a8b8598f6010b8108",
          "sha256": "04744e1d7a1b7ea516ee3aae570f2e1b78ebc26272ffc416cb7a4cc48444bcb1"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a379427f61646f5a8b8598f6010b8108",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 37253,
        "upload_time": "2023-01-25T21:32:59",
        "upload_time_iso_8601": "2023-01-25T21:32:59.921183Z",
        "url": "https://files.pythonhosted.org/packages/a3/81/22b2183c8fa741a9064f699861f6f274cb42619e9854d4d21a87f526ac07/z3_target_bigquery-0.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "675702fe8091c6951e1bd5baa7049a3ff30a372027e9600da081d4b803d93206",
          "md5": "3ed94c417fe49bd3d0094431eea260ab",
          "sha256": "ebab2b3da2f8fb75dd74d74dcd82492f6704507407c60e49e1455b5bfa8a9fc5"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3ed94c417fe49bd3d0094431eea260ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 28887,
        "upload_time": "2023-01-25T21:33:01",
        "upload_time_iso_8601": "2023-01-25T21:33:01.808184Z",
        "url": "https://files.pythonhosted.org/packages/67/57/02fe8091c6951e1bd5baa7049a3ff30a372027e9600da081d4b803d93206/z3_target_bigquery-0.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d9a020910399d7c3685fec87fa82f03d92e610a28aebb354ff552809cb7a66f",
          "md5": "db283a86313dab9b8106d911c9dd9dc1",
          "sha256": "f95472178819f15ec92fc55496b5131f111c2c16b004b2c18e2521de396e8fd1"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db283a86313dab9b8106d911c9dd9dc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 38317,
        "upload_time": "2023-01-31T10:32:49",
        "upload_time_iso_8601": "2023-01-31T10:32:49.101972Z",
        "url": "https://files.pythonhosted.org/packages/0d/9a/020910399d7c3685fec87fa82f03d92e610a28aebb354ff552809cb7a66f/z3_target_bigquery-0.5.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8b10a8c7dfd13024c1dac6cbe37497d826fa89ef60c92e1896fe9a658eaa2c7",
          "md5": "0fe73af16cbdc5b378df0566c5d177c3",
          "sha256": "a6da214b5e10448d1443682a988e5f7733c681ee50279858973907de43c596bf"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0fe73af16cbdc5b378df0566c5d177c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 30631,
        "upload_time": "2023-01-31T10:32:50",
        "upload_time_iso_8601": "2023-01-31T10:32:50.765174Z",
        "url": "https://files.pythonhosted.org/packages/f8/b1/0a8c7dfd13024c1dac6cbe37497d826fa89ef60c92e1896fe9a658eaa2c7/z3_target_bigquery-0.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5266db26816126efa13b0e8a549cad129d41f30d87f9b81d5ddc2e479851b747",
          "md5": "210f347eb420d288360f0710947eb322",
          "sha256": "d12221b715a4d07badd764e81815b167d1a261cd1c984a06b63de530b2c8d16d"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "210f347eb420d288360f0710947eb322",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 42443,
        "upload_time": "2023-02-13T01:14:14",
        "upload_time_iso_8601": "2023-02-13T01:14:14.665175Z",
        "url": "https://files.pythonhosted.org/packages/52/66/db26816126efa13b0e8a549cad129d41f30d87f9b81d5ddc2e479851b747/z3_target_bigquery-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e45bc3741fb069a7e724fad300a9a7d5709ca16d9891eb616606eb6c2abf94de",
          "md5": "146a1ba15652995f1d3ab08afd1d11c7",
          "sha256": "e33d70ea0a668db59229b753dad688442b564379a4f663fad7c54bfbbf0ca8c7"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "146a1ba15652995f1d3ab08afd1d11c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 34183,
        "upload_time": "2023-02-13T01:14:17",
        "upload_time_iso_8601": "2023-02-13T01:14:17.074881Z",
        "url": "https://files.pythonhosted.org/packages/e4/5b/c3741fb069a7e724fad300a9a7d5709ca16d9891eb616606eb6c2abf94de/z3_target_bigquery-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c7f41af09a8d4d22be37b6774b2ca521596637e3dfbc6f008ea79e002676f82",
          "md5": "5fd14d6f005bc20db38f0bb992430edd",
          "sha256": "8793a6ecaf6a8ceaab3475ccef76567b76dde8bfe5c320e01b4993efbec7c40c"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fd14d6f005bc20db38f0bb992430edd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 42468,
        "upload_time": "2023-02-13T02:09:37",
        "upload_time_iso_8601": "2023-02-13T02:09:37.523128Z",
        "url": "https://files.pythonhosted.org/packages/1c/7f/41af09a8d4d22be37b6774b2ca521596637e3dfbc6f008ea79e002676f82/z3_target_bigquery-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcac79989dab3a850ff4315c6e6ddddc158ef2bdb34929b1e51719e4baec9fb3",
          "md5": "13c0d06ef6554b128e9d97ae356ae93e",
          "sha256": "bbeb5edd1bce2c5c3234d7257cae716b5565656b86b80bbaeb03442626ef2f76"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13c0d06ef6554b128e9d97ae356ae93e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 34209,
        "upload_time": "2023-02-13T02:09:39",
        "upload_time_iso_8601": "2023-02-13T02:09:39.547470Z",
        "url": "https://files.pythonhosted.org/packages/bc/ac/79989dab3a850ff4315c6e6ddddc158ef2bdb34929b1e51719e4baec9fb3/z3_target_bigquery-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fed71ff4dda5bcab45f0634ea1a5cf4aa67ed6d26da613224fc43861408d5a2",
          "md5": "2c163e8640d0d7d372635924f92f4fdf",
          "sha256": "85703811f57533e724a71b121374676e826b058be0c5cd76fd801979e412ee31"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c163e8640d0d7d372635924f92f4fdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 42488,
        "upload_time": "2023-02-13T02:17:18",
        "upload_time_iso_8601": "2023-02-13T02:17:18.344227Z",
        "url": "https://files.pythonhosted.org/packages/6f/ed/71ff4dda5bcab45f0634ea1a5cf4aa67ed6d26da613224fc43861408d5a2/z3_target_bigquery-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81cfdcb4e1022b2327de0d1b34d248615a93523931a07eb231d01bbf0a973a39",
          "md5": "2d33722650d3707cae4b5a0802d9ac4f",
          "sha256": "10fd0a32bbb43cdb05018757bcfd3d3202cdc7ac24ba95983b732f3407c1cfa1"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d33722650d3707cae4b5a0802d9ac4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 34334,
        "upload_time": "2023-02-13T02:17:20",
        "upload_time_iso_8601": "2023-02-13T02:17:20.480707Z",
        "url": "https://files.pythonhosted.org/packages/81/cf/dcb4e1022b2327de0d1b34d248615a93523931a07eb231d01bbf0a973a39/z3_target_bigquery-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a030f2e94e135c3ce96e87f5ce34e67cb7b601234d14a709757d3353ac8e47c8",
          "md5": "2ec8795cd98d7d4a799f5c2d639465bb",
          "sha256": "2447e97876fff7970e70767811274d81215fb94036dd02a2f2022a5efdbef55e"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ec8795cd98d7d4a799f5c2d639465bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 43930,
        "upload_time": "2023-03-15T23:11:40",
        "upload_time_iso_8601": "2023-03-15T23:11:40.243771Z",
        "url": "https://files.pythonhosted.org/packages/a0/30/f2e94e135c3ce96e87f5ce34e67cb7b601234d14a709757d3353ac8e47c8/z3_target_bigquery-0.6.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9da4ab08ac8a0e31633197b44f936291f29e6dd3d7a5e418204748fee4ad0eda",
          "md5": "5a21f53df9c8554fb2e13299d92794b7",
          "sha256": "d6d82fc34fb2982aa4d26d9164c1d3f186fddec5bc79ef41787865b8f1c23e3b"
        },
        "downloads": -1,
        "filename": "z3_target_bigquery-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5a21f53df9c8554fb2e13299d92794b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 35512,
        "upload_time": "2023-03-15T23:11:42",
        "upload_time_iso_8601": "2023-03-15T23:11:42.079073Z",
        "url": "https://files.pythonhosted.org/packages/9d/a4/ab08ac8a0e31633197b44f936291f29e6dd3d7a5e418204748fee4ad0eda/z3_target_bigquery-0.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a030f2e94e135c3ce96e87f5ce34e67cb7b601234d14a709757d3353ac8e47c8",
        "md5": "2ec8795cd98d7d4a799f5c2d639465bb",
        "sha256": "2447e97876fff7970e70767811274d81215fb94036dd02a2f2022a5efdbef55e"
      },
      "downloads": -1,
      "filename": "z3_target_bigquery-0.6.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ec8795cd98d7d4a799f5c2d639465bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<3.11",
      "size": 43930,
      "upload_time": "2023-03-15T23:11:40",
      "upload_time_iso_8601": "2023-03-15T23:11:40.243771Z",
      "url": "https://files.pythonhosted.org/packages/a0/30/f2e94e135c3ce96e87f5ce34e67cb7b601234d14a709757d3353ac8e47c8/z3_target_bigquery-0.6.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9da4ab08ac8a0e31633197b44f936291f29e6dd3d7a5e418204748fee4ad0eda",
        "md5": "5a21f53df9c8554fb2e13299d92794b7",
        "sha256": "d6d82fc34fb2982aa4d26d9164c1d3f186fddec5bc79ef41787865b8f1c23e3b"
      },
      "downloads": -1,
      "filename": "z3_target_bigquery-0.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5a21f53df9c8554fb2e13299d92794b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<3.11",
      "size": 35512,
      "upload_time": "2023-03-15T23:11:42",
      "upload_time_iso_8601": "2023-03-15T23:11:42.079073Z",
      "url": "https://files.pythonhosted.org/packages/9d/a4/ab08ac8a0e31633197b44f936291f29e6dd3d7a5e418204748fee4ad0eda/z3_target_bigquery-0.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}