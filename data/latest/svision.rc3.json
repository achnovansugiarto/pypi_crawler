{
  "info": {
    "author": "Jiadong Lin, Songbo Wang",
    "author_email": "jiadong66@stu.xjtu.edu.cn, songbowang125@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "<img src=\"https://github.com/xjtu-omics/SVision/tree/master/supports/svision-logo.png\" alt=\"svision_logo\" width=\"30%\" height=\"30%\" align=center/>\n\n\nSVision is a deep learning-based structural variants caller that takes aligned reads or contigs as input. Especially, SVision implements a targeted multi-objects recognition framework, detecting and characterizing both simple and complex structural variants from three-channel similarity images.\n\n<img src=\"https://github.com/xjtu-omics/SVision/tree/master/supports/workflow.png\" alt=\"SVision workflow\" width=\"60%\" height=\"60%\" align=center/>\n\n\n## License\n\nSVision is free for non-commercial use by academic, government, and non-profit/not-for-profit institutions. A commercial version of the software is available and licensed through Xi’an Jiaotong University. \nFor more information, please contact with Jiadong Lin (jiadong324@stu.xjtu.edu.cn) or Kai Ye (kaiye@xjtu.edu.cn).\n\n## Install\n\nStep1: Create a python environment with conda\n\n```\nconda create -n svision-env python=3.6\n```\nStep2: Install required packages of specific versions\n\n```\nconda install -c anaconda pysam==0.16.0\nconda install -c conda-forge opencv==4.5.1\nconda install -c conda-forge tensorflow==1.14.0\n```\nStep3: Install SVision from PyPI\n\n```\npip install SVision\n```\n\n(Optional) Install from source code\n\n```\ngit clone https://github.com/xjtu-omics/SVision.git\ncd SVision\npython setup.py install\n```\n\n## Usage\n\n```\nSVision [parameters] -o <output path> -b <input bam path> -g <reference> -m <model path>\n```\n\nPlease check the [wiki](https://github.com/xjtu-omics/SVision/wiki) page for more usage details. \n\n#### Input/output parameters\n\n```\n-o OUT_PATH           Absolute path to output\n-b BAM_PATH           Absolute path to bam file\n-m MODEL_PATH         Absolute path to CNN predict model\n-g GENOME             Absolute path to your reference genome (.fai required in the directory)\n-n SAMPLE             Name of the BAM sample name\n```\n\n```-g``` path to the reference genome, the index file should under the same directory.\n\n```-m``` path to the pre-trained deep learning model ([download link](https://drive.google.com/drive/folders/1j74IN6kPKEx9hy3aENx3zHYPUnyYWGvj?usp=sharing)).\n\n#### General parameters\n```\n-t THREAD_NUM         Thread numbers [1]\n-s MIN_SUPPORT        Min support read number for an SV [1]\n-c CHROM              Specific region to detect, format: chr1:xxx-xxx or 1:xxx-xxx\n--hash_table          Activate hash table to align unmapped sequences\n--cluster_callset     Cluster original callset to merge uncovered event\n--report_mechanism    Report mechanisms for DEL event\n--report_graph        Report graph for events\n--contig              Activate contig mode\n```\n\n```--hash_table``` enables the image subtraction process, which is activated by default. \n\n```--report_graph``` enables the program to create the CSV graph in GFA format, which is not activated by default. \n\n```--report_mechanism``` is used to infer the formation mechansim according to the breakpoint sequence features. \nThis is still underdevelopment, which is not recommended to use for current version.\n\n```--contig``` is used for calling from assemblies, which currently uses minimap2 aligned BAM file as input.\n\n#### Other parameters\n\n```--partition_max_distsance``` maximum distance allowed of a group of feature sequences.\n\n```--cluster_max_distance``` maximum distance for feature sequence clustering. This is implemented via Scipy hierarchical clustering.\n\n```--k_size``` size of kmer used in hash-table realignment, only used when ```--hash_table``` is activated.\n\n```--min_accept``` minimum matched segment length, default is 50bp.\n\n\n## SVision output\n\n### VCF\n\nThe SV ```ID``` column is given in the format of ```a_b```, where ```b``` indicates site ```a``` contains other type of SVs. \n\nFilters used in the output.\n\n```Covered```: The entire SV is spanned by long-reads, producing the most confident calls.\n\n```Uncovered```: SV is partially spanned by long-reads, i.e. reads spanning one of the breakpoints.\n\n```Clustered```: SV is partially spanned by long-reads, but can be spanned through reads clusters.\n\nWe add extra attributes in the ```INFO``` column of VCF format for SVision detected structural variants.\n\n```BRPKS```: The CNN recognized breakpoint junctions through tMOR.\n\n```GraphID```: The graph index used to indicate the graph structure, which requires ```--report_graph``` and is obtained by calculating isomorphic graphs. \nThe ID for simple SVs is -1. \n\n```VAF```: The estimated variant allele fraction, which is calculated by DV/DR. Note that SVision does not calculate the genotypes in the current version.\n\n### CSV graph \n\n#### Graph format\n\nThe graph output requires ```--report_graph``` activated. \nThe below example is an CSV in rGFA format, which is detected by SVision at chr11:99,819,283-99,820,576 in HG00733. \nThe graph output is saved in separated files for each CSV events.\n\n```\nS\tS1\tSN:Z:chr11\tSO:i:99819338\tSR:i:0\tLN:i:2990\nS\tI0\tSN:Z:m54329U_190827_173812/140708091/ccs\tSO:i:15813\tSR:i:0\tLN:i:1113\nS\tI1\tSN:Z:m54329U_190827_173812/140708091/ccs\tSO:i:16927\tSR:i:0\tLN:i:466\nS\tI2\tSN:Z:m54329U_190827_173812/140708091/ccs\tSO:i:17400\tSR:i:0\tLN:i:377\tDP:S:S1:99820198\nS\tI3\tSN:Z:m54329U_190827_173812/140708091/ccs\tSO:i:17778\tSR:i:0\tLN:i:838\nS\tI4\tSN:Z:m54329U_190827_173812/140708091/ccs\tSO:i:18617\tSR:i:0\tLN:i:61\tDP:S:S0:99819276\nL\tS0\t+\tI0\t+\t0M\tSR:i:0\nL\tI0\t+\tI1\t+\t0M\tSR:i:0\nL\tI1\t+\tI2\t-\t0M\tSR:i:0\nL\tI2\t-\tI3\t+\t0M\tSR:i:0\nL\tI3\t+\tI4\t+\t0M\tSR:i:0\nL\tI4\t+\tS1\t+\t0M\tSR:i:0\n```\n\nBesides the information included in standard [rGFA](https://github.com/lh3/gfatools/blob/master/doc/rGFA.md) format, \nwe add another ```DP:S``` column to indicate sequence with detected origins via local realignment, \nsuch as node ```I2``` is duplicated from node ```S1```. \n\n#### Graph alignment (Experimental)\n\n**Note**: This function is not included in the current program, it is a post-processing step that tries to validate the detected CSVs. \n\nTo validate the detected CSV, we align raw HiFi reads to the mini graph (CSV graph) reported by SVision with GraphAligner.\n\n**Step1: Extract HiFi raw reads**\n\n```\nsamtools view -b HG00733.ngmlr.sorted.bam chr11:99810000-99830000 > tmp.bam\nsamtools fasta tmp.bam > tmp.fasta\n```\n\n**Step2: Align with GraphAligner**\n\nPlease check [GraphAligner](https://github.com/maickrau/GraphAligner) for the detailed usage.\n\n```\nGraphAligner -g chr11-99819283-99820576.gfa -f tmp.fasta -a aln.gaf -x vg\n```\n\nExample of CSV path supporting reads\n\n```\nm54329U_190827_173812/140708091/ccs     21668   0       21668   +       >S0>I0>I1<I2>I3>I4>S1\nm54329U_190617_231905/88145984/ccs      13612   0       13612   +       >S0>I0>I1<I2>I3>I4>S1\nm54329U_190617_231905/88145984/ccs      13612   0       13612   +       >S0>I0>I1<I2>I3>I4>S1\n```\n\n## Contact\nIf you have any questions, please feel free to contact: jiadong66@stu.xjtu.edu.cn, songbowang125@163.com",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xjtu-omics/SVision",
    "keywords": "SVision,Deep learning,Complex structural variants,Structural variants,Single moleculo sequencing",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SVision",
    "package_url": "https://pypi.org/project/SVision/",
    "platform": "",
    "project_url": "https://pypi.org/project/SVision/",
    "project_urls": {
      "Homepage": "https://github.com/xjtu-omics/SVision"
    },
    "release_url": "https://pypi.org/project/SVision/1.3.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SV/CSV callers",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15162106,
  "releases": {
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38ded61bfd39d185819d2638c278551018dbcb49c57559795156512533fdf990",
          "md5": "c740b1af24721d8d7b5ea1b6a9668ae7",
          "sha256": "4eb616a1af20b801df2118846f7d6d330d8b75103c25c7ef294b25cec9e27fa6"
        },
        "downloads": -1,
        "filename": "SVision-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c740b1af24721d8d7b5ea1b6a9668ae7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 58424,
        "upload_time": "2021-04-13T05:37:57",
        "upload_time_iso_8601": "2021-04-13T05:37:57.169537Z",
        "url": "https://files.pythonhosted.org/packages/38/de/d61bfd39d185819d2638c278551018dbcb49c57559795156512533fdf990/SVision-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85e8d95f179b1e6b18c480b6b6b8e6175582cb8f5f1e95993707f27e52abe1c5",
          "md5": "855dea2e7c80e9ab1e0d80fbf66f9093",
          "sha256": "830d915c6ead09f84fea4353312bfec908549474e26cdf6ef0183b0dbb56fb92"
        },
        "downloads": -1,
        "filename": "SVision-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "855dea2e7c80e9ab1e0d80fbf66f9093",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59080,
        "upload_time": "2021-04-13T07:13:39",
        "upload_time_iso_8601": "2021-04-13T07:13:39.022495Z",
        "url": "https://files.pythonhosted.org/packages/85/e8/d95f179b1e6b18c480b6b6b8e6175582cb8f5f1e95993707f27e52abe1c5/SVision-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "595c13da336841c2a04d9e48e47701fc86e7f68adcb5c8881c3450bbb3d1d7a2",
          "md5": "2b645794ebfd1fc3570fc35deb300b77",
          "sha256": "d8f297f47b5787bbf0c7900688b855f59c166c35e6fca8a18668b9ef74b01c89"
        },
        "downloads": -1,
        "filename": "SVision-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2b645794ebfd1fc3570fc35deb300b77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59500,
        "upload_time": "2021-05-26T02:59:47",
        "upload_time_iso_8601": "2021-05-26T02:59:47.774235Z",
        "url": "https://files.pythonhosted.org/packages/59/5c/13da336841c2a04d9e48e47701fc86e7f68adcb5c8881c3450bbb3d1d7a2/SVision-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "595c13da336841c2a04d9e48e47701fc86e7f68adcb5c8881c3450bbb3d1d7a2",
        "md5": "2b645794ebfd1fc3570fc35deb300b77",
        "sha256": "d8f297f47b5787bbf0c7900688b855f59c166c35e6fca8a18668b9ef74b01c89"
      },
      "downloads": -1,
      "filename": "SVision-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2b645794ebfd1fc3570fc35deb300b77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 59500,
      "upload_time": "2021-05-26T02:59:47",
      "upload_time_iso_8601": "2021-05-26T02:59:47.774235Z",
      "url": "https://files.pythonhosted.org/packages/59/5c/13da336841c2a04d9e48e47701fc86e7f68adcb5c8881c3450bbb3d1d7a2/SVision-1.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}