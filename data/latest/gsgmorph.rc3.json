{
  "info": {
    "author": "If and Only If (Iff) Technologies",
    "author_email": "john@qcatdavis.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# G/SG Morph\n\n## The Graph/Subgraph Isomorphism Library for Quantum Annealers\n\nG/SG Morph is an implementation of [Calude, Dinneen, and Hua's \"QUBO formulations for the graph isomorphism problem and related problems\"](https://doi.org/10.1016/j.tcs.2017.04.016) (Quantum Unconstrained Binary Optimization) QUBO's for finding graph, subgraph, and induced subgraph isomorphisms on quantum annealers.\n\nG/SG Morph also contains, with the permission of Richard Hua, a copy of his implementation of the Graph Isomorphism QUBO from his thesis [\"Adiabatic Quantum Computing with QUBO Formulations\", Appendix E](https://researchspace.auckland.ac.nz/bitstream/handle/2292/31576/whole.pdf?sequence=2&isAllowed=y) which is used for benchmarking (see \"Benchmarking\" in this README).\n\n## Installation\n\nYou can either \n\n```\npip install gsgmorph\n```\n\nor clone this repository and run the following in the folder (and your choice of python environment!):\n\n```\npip install .\n```\n\n## High Level Overview\n\nG/SG Morph consists of two modules, `matrix_form` and `pyqubo_form`, both of which contain three core functions, `graph_isomorphism()`, `subgraph_isomorphism()`, and `translate_sample()` that accomplish identical tasks but are implemented differently. \n\n`matrix_form` relies on the usage of dictionaries to provide a matrix representing the QUBO, while `pyqubo_form` uses the [PyQUBO](https://github.com/recruit-communications/pyqubo) library to express QUBOs. Note that `pyqubo_form` has been intentionally programmed to follow the math presented in Calude, Dineen, and Hua's paper as closely as possible (with minor adjustments made to satisfy Python syntax). \n\nBoth `graph_isomorphism()` and `subgraph_isomorphism()` take two [NetworkX](https://networkx.org/) graphs (a \"graph to embed\" onto a  \"target graph\") and will generate a QUBO suitable for running on a simulated annealer such as [D-Wave Neal](https://github.com/dwavesystems/dwave-neal) or actual hardware.\n\nThe above functions also return a dictionary that, in conjunction with a sample from an annelear, can be translated into a dictionary that maps nodes from the graph to embed to the target graph with the help of `translate_sample()`.\n\n`subgraph_isomorphism()` also has an additional `induced` argument that can be set to `True` indicating that you would like to generate a QUBO for the Induced Subgraph Isomorphism problem.\n\n## Examples\n\nPlease refer to the Jupyter Notebooks in the `examples` folder.\n\n* `gsgmorph_matrix_form_demo.ipynb` shows the usage of the `matrix_form` module\n* `gsgmorph_pyqubo_form_demo.ipynb` shows the usage of the `pyqubo_form` module\n\n## Benchmarking\n\nSome benchmarking was conducted against Richard Hua's graph isomorphism QUBO generator and G/SG Morph's `matrix_form` implementation using Erdos-Renyi graphs in Google Colab. The results and techniques can be found in the `Benchmarking` folder.\n\n## Contributing\n\nIf you find a bug or have an idea to improve the library, please feel free to either make an Issue or a Pull Request with your suggested changes! If you are contributing code, please do note that this library attempts to follow the [PEP-8 Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/#package-and-module-names) as well as using [Google Style Python Docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)\n\n## Credits\n\nAlthough all the QUBO formulations used come from [Calude, Dinneen, and Hua's \"QUBO formulations for the graph isomorphism problem and related problems\"](https://doi.org/10.1016/j.tcs.2017.04.016), this library would not have been possible without the following helpful sources:\n\n* [Wangfan Fu's answer to 'What is the square of summation?'](https://math.stackexchange.com/questions/329344/what-is-the-square-of-summation) on the Math Stackexchange site\n* [Dury and Matteo's code from their paper \"A QUBO formulation for qubit allocation\"](https://github.com/bdury/QUBO-for-Qubit-Allocation) [https://arxiv.org/pdf/2009.00140.pdf](https://arxiv.org/pdf/2009.00140.pdf) served as inspiration for the usage of the Python `product()` function. \n* [PyQUBO Documentation: Integration with D-Wave Ocean](https://pyqubo.readthedocs.io/en/latest/#integration-with-d-wave-ocean) for showing how to use [D-Wave Neal](https://docs.ocean.dwavesys.com/en/stable/docs_neal/sdk_index.html) with PyQUBO\n* [SilentGhost's answer to \"Reverse / invert a dictionary mapping\"](https://stackoverflow.com/a/483833)\n* [ars' answer to \"Get difference between two lists\"](https://stackoverflow.com/a/3462160)\n* [Mccreesh, Prosser, Solnon, and Trimble's paper \"When Subgraph Isomorphism is Really Hard, and Why This Matters for Graph Databases](https://hal.archives-ouvertes.fr/hal-01741928/document) for providing a graph to test the Induced Subgraph Isomorphism problem on\n* [Dan D.'s answer to \"what is diffrence between number and repeat in python timeit?\"](https://stackoverflow.com/a/56763499)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IffTech/GSG-Morph",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gsgmorph",
    "package_url": "https://pypi.org/project/gsgmorph/",
    "platform": "",
    "project_url": "https://pypi.org/project/gsgmorph/",
    "project_urls": {
      "Bug Tracker": "https://github.com/IffTech/GSG-Morph/issues",
      "Homepage": "https://github.com/IffTech/GSG-Morph"
    },
    "release_url": "https://pypi.org/project/gsgmorph/1.0.2/",
    "requires_dist": [
      "networkx",
      "pyqubo"
    ],
    "requires_python": ">=3.6",
    "summary": "The Graph/Subgraph Isomorphism Library for Quantum Annealers",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11508685,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1445b6925441a4dfed30296612fc20cff913586e40d9f38c282080c830e7c98",
          "md5": "00ce43341c53c56dc6f3cc6504e1fcda",
          "sha256": "ea04e1e2d7e0c49b8c9f4cae43870e173a5566819ac25160ce61b970da36a25e"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00ce43341c53c56dc6f3cc6504e1fcda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23893,
        "upload_time": "2021-09-21T02:18:00",
        "upload_time_iso_8601": "2021-09-21T02:18:00.507731Z",
        "url": "https://files.pythonhosted.org/packages/e1/44/5b6925441a4dfed30296612fc20cff913586e40d9f38c282080c830e7c98/gsgmorph-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b357a307917a70a82aadabb1fa3d2075b24f9e07e896d378f9837ba0dcd817c5",
          "md5": "0025889d977df9454d6392a843b86959",
          "sha256": "db3aacee6dfb240b90549ec1e358f4b07c4538aa31ec4c8451790b4654f0d77f"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0025889d977df9454d6392a843b86959",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22956,
        "upload_time": "2021-09-21T02:18:01",
        "upload_time_iso_8601": "2021-09-21T02:18:01.979632Z",
        "url": "https://files.pythonhosted.org/packages/b3/57/a307917a70a82aadabb1fa3d2075b24f9e07e896d378f9837ba0dcd817c5/gsgmorph-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df8dd873b4d79fbc521b634ac95810176ec4b11490663416100a20672f555a4",
          "md5": "05a172ba91ea4e808792ab942620780e",
          "sha256": "3711d3e765fc503e3186bc1920782aa51ba0ed9d2c6eb199c22f7a4fd4b6de19"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05a172ba91ea4e808792ab942620780e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23937,
        "upload_time": "2021-09-21T16:07:09",
        "upload_time_iso_8601": "2021-09-21T16:07:09.147049Z",
        "url": "https://files.pythonhosted.org/packages/7d/f8/dd873b4d79fbc521b634ac95810176ec4b11490663416100a20672f555a4/gsgmorph-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa1a62c08db49a33f2bf1779b6ed32da6da528df550b078a2dc05bfe565cce75",
          "md5": "2d66495a4827b9dbbaf86699014eb569",
          "sha256": "8c3be3017f53172274ae97a900bc5bdbebcf77177068039f4ef987218aecd094"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d66495a4827b9dbbaf86699014eb569",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23030,
        "upload_time": "2021-09-21T16:07:10",
        "upload_time_iso_8601": "2021-09-21T16:07:10.755080Z",
        "url": "https://files.pythonhosted.org/packages/aa/1a/62c08db49a33f2bf1779b6ed32da6da528df550b078a2dc05bfe565cce75/gsgmorph-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f321a66ffcc8aade3421ef630b5d76ec04e6e61d2a2a691ef002e986b27519a",
          "md5": "5899b8d83bd5548b584d4ce0ea709f93",
          "sha256": "2e618bebcd90046631b7ac5e608285c021b8e02e5375400c2f364a9f2304b6bf"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5899b8d83bd5548b584d4ce0ea709f93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23943,
        "upload_time": "2021-09-21T16:35:45",
        "upload_time_iso_8601": "2021-09-21T16:35:45.046797Z",
        "url": "https://files.pythonhosted.org/packages/5f/32/1a66ffcc8aade3421ef630b5d76ec04e6e61d2a2a691ef002e986b27519a/gsgmorph-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d4fc7855519f6b86b0e4e68c2cf09ff4f8233465b6bd91f619c6344fb0eab08",
          "md5": "2772b413f64342b835e2a0d67f5e5bda",
          "sha256": "50035a595d73faf2ca590e1ef78504468155a6d427ff5fdcaadf5acd646bed0a"
        },
        "downloads": -1,
        "filename": "gsgmorph-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2772b413f64342b835e2a0d67f5e5bda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23046,
        "upload_time": "2021-09-21T16:35:46",
        "upload_time_iso_8601": "2021-09-21T16:35:46.714778Z",
        "url": "https://files.pythonhosted.org/packages/7d/4f/c7855519f6b86b0e4e68c2cf09ff4f8233465b6bd91f619c6344fb0eab08/gsgmorph-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f321a66ffcc8aade3421ef630b5d76ec04e6e61d2a2a691ef002e986b27519a",
        "md5": "5899b8d83bd5548b584d4ce0ea709f93",
        "sha256": "2e618bebcd90046631b7ac5e608285c021b8e02e5375400c2f364a9f2304b6bf"
      },
      "downloads": -1,
      "filename": "gsgmorph-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5899b8d83bd5548b584d4ce0ea709f93",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23943,
      "upload_time": "2021-09-21T16:35:45",
      "upload_time_iso_8601": "2021-09-21T16:35:45.046797Z",
      "url": "https://files.pythonhosted.org/packages/5f/32/1a66ffcc8aade3421ef630b5d76ec04e6e61d2a2a691ef002e986b27519a/gsgmorph-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d4fc7855519f6b86b0e4e68c2cf09ff4f8233465b6bd91f619c6344fb0eab08",
        "md5": "2772b413f64342b835e2a0d67f5e5bda",
        "sha256": "50035a595d73faf2ca590e1ef78504468155a6d427ff5fdcaadf5acd646bed0a"
      },
      "downloads": -1,
      "filename": "gsgmorph-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2772b413f64342b835e2a0d67f5e5bda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23046,
      "upload_time": "2021-09-21T16:35:46",
      "upload_time_iso_8601": "2021-09-21T16:35:46.714778Z",
      "url": "https://files.pythonhosted.org/packages/7d/4f/c7855519f6b86b0e4e68c2cf09ff4f8233465b6bd91f619c6344fb0eab08/gsgmorph-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}