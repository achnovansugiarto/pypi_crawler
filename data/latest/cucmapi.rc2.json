{
  "info": {
    "author": "John Frauchiger",
    "author_email": "john.frauchiger@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cucmapi\n\nThe cucmapi package is inspired by Levensailor's [ciscoaxl](https://github.com/levensailor/ciscoaxl), Presidio's [ciscoris](https://github.com/PresidioCode/ciscoris), and Jonathanelscpt's [ciscocucmapi](https://github.com/jonathanelscpt/ciscocucmapi).\n\ncucmapi runs on [python-zeep](https://docs.python-zeep.org/en/master/) and offers a complete abstraction from the AXL SOAP API and XML.  \nThe package gives you access to all API calls defined in the WSDL file.  \nCurrently, only Python 3.6+ is supported.\n\nWhile not Pythonic, I chose to keep all the method names as they are defined in the AXL schema reference, instead of turning them into snake-case variants, to have a 1:1 match between the available methods in this package and Cisco's documentation; i.e. if the WSDL operation is called addSipProfile then the method is called addSipProfile, too.  \n\n## Official Cisco API Documentation\n\n- AXL: https://developer.cisco.com/docs/axl-schema-reference/\n- RisPort70 API: https://developer.cisco.com/docs/sxml/#!risport70-api-reference\n- Control Center Services API: https://developer.cisco.com/docs/sxml/#!control-center-services-api-reference\n- Log Collection API: https://developer.cisco.com/docs/sxml/#!log-collection-and-dimegetfileservice-api-reference\n- CDRonDemand API: https://developer.cisco.com/docs/sxml/#!cdrondemand-api-reference\n- PerfMon API: https://developer.cisco.com/docs/sxml/#!perfmon-api-reference\n\n## Installation\n\n```bash\ngit clone git@github.com:awetomate/cucmapi.git\n```\n\nTesting in a lab is highly recommended. You can reserve a DevNet [Sandbox](https://developer.cisco.com/site/sandbox/) free of charge!\n\n___\n\n\n## Enable AXL SOAP Service on CUCM:\n\nEnable the AXL SOAP interface\n\nBrowse to the CUCM Serviceability page on https://<IP_CUCM>/ccmservice\n\nTools > Service Activation:\n\nEnable the \"Cisco AXL Web Service\"\n![](https://pubhub.devnetcloud.com/media/axl/docs/authentication/assets/activation.png#developer.cisco.com)\n\n---\n\n## Create an AXL Service Account\n\n> Step 1 - Create an AXL User Group\n\nCUCM > User Management > User Group > Add.\n\n> Step 2 - Assign the AXL role to the group\n\nOn the top right drop down list \"Related Links\". \n\nSelect \"Assign Role to User Group\" and \n- for full Read/Write access, select:\n  \"Standard AXL API Access\" \n- for Read-Only access, select \"Standard AXL API Users\" and \"Standard AXL Read Only API Access\"\n\n> Step 3 - Create a new Application User\n\nCUCM > User Management > Application User > Add.\n\nAdd the new User Group you created in step 1 and 2 to this user.\n\n## Quick Start\n```python\nfrom cucmapi import axl, ris, ccs, log, cdr, pfm\n\nusername = \"username\"\npassword = \"supersecret\"\ncucm = \"fqdn\" #or IP address\ncucm_version = \"11.5\"\nAXL = axl(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for SOAP AXL\nRIS = ris(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for RisPort70\nCCS = ccs(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for Control Center Services\nLOG = log(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for Log Collection\nCDR = cdr(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for CDRonDemand\nPFM = pfm(username=username, password=password, cucm=cucm, cucm_version=cucm_version) # for PerfMon\n\n# get phone\nphone = AXL.getPhone(name=\"CSFjohn\")\nprint(phone.description)\n>>>\nJohns test description\n>>>\n# update phone description\nAXL.updatePhone(name=\"CSFjohn\", description=\"Johns proper phone description\")\n# verify the new description has been set\nphone = AXL.getPhone(name=\"CSFjohn\")\nprint(phone.description)\n>>>\nJohns proper phone description\n>>>\n\n# get phone registration from RIS > requires a list of devices as input and returns a list\n# if no list of subscribers is provided, all nodes in the cluster are queried\nreg = RIS.selectCmDeviceExt(devices=[\"CSFjohn\"])\nprint(reg[0].Status)\n>>>\nRegistered\n>>>\n\n# delete phone\nAXL.removePhone(name=\"CSFjohn\")\n\n# implicit \"return all\" will all available returnedTags\n# use sparingly and avoid on larger clusters (limit the returnedTags to what you need)\nall_devices = AXL.listPhone()\n\n```\n\n```python\n# Usecase Example 1: Find out if there are still some registered Cisco IP Communicators (end of support)\n\n# Step 1, get process node names, exlude the entry called 'EnterpriseWideData' \n# This is optional. If you don't provide a list of subs in step3 all nodes in the cluster are queried\nnode_names = [node.name for node in AXL.listProcessNode(returnedTags={\"name\": \"\"}) if \"Enterprise\" not in node.name]\n\n# Step 2, get a list of all Cisco IP Communicators via Thin SQL > returns list of dictionaries\ncipcs = AXL.executeSQLQuery(sql=\"SELECT name FROM device WHERE tkclass=1 and tkmodel=30016\")\ndevice_names = [ipc[\"name\"] for ipc in cipcs]\n\n# Alternative to step 2 using axl\nphone_list = AXL.listPhone(returnedTags={\"name\": \"\", \"model\": \"\"})\ndevice_names = [phone.name for phone in phone_list if \"Communicator\" in phone.model]\n\n# Step 3, find all 'Registered' devices via RIS\nregistration = RIS.selectCmDeviceExt(devices=device_names, subs=node_names, status=\"Registered\")\n# or\nregistration = RIS.selectCmDeviceExt(devices=device_names, status=\"Registered\")\n\n```\n\n```python\n# Usecase Example 2: Get services status for each node in the cluster\n\n# Step 1, get the process node names plus the nodeUsage; exlude the entry called 'EnterpriseWideData' \nnode_names = AXL.listProcessNode(returnedTags={\"name\": \"\",\"nodeUsage\": \"\"})\nnodes = [{\"name\": node.name, \"nodeUsage\": node.nodeUsage} for node in node_names if \"Enterprise\" not in node.name]\n\n# Step 2, get the services info for each of the nodes and add them to the services list\nservices = []\nfor node in nodes:\n    # create a Control Center Services client instance for each node\n    CCS = ccs(username=username, password=password, cucm=node[\"name\"], cucm_version=version)\n    # get the services for the node\n    services_status = CCS.soapGetServiceStatus()\n    # Optional: create your own custom view and replace the ReasonCodes with 'Activated/Deactivated'\n    services_clean = [\n        {\"ServerName\": node[\"name\"],\n        \"NodeType\": node[\"nodeUsage\"],\n        \"ServiceName\": s.ServiceName,\n        \"ServiceStatus\": s.ServiceStatus,\n        \"ActivationStatus\": \"Activated\" if \"Service Not Activated\" not in s.ReasonCodeString else \"Deactivated\",\n        \"StartTime\": \"\" if not s.StartTime else s.StartTime\n        } for s in services_status]\n    # add the node's services to the services list\n    services += services_clean\n\n# now you have a list of all services for each node in the cluster\nprint(services)\n>>>\n[{'ServerName': 'servernode01.domain.com',\n  'NodeType': 'Subscriber',\n  'ServiceName': 'A Cisco DB',\n  'ServiceStatus': 'Started',\n  'ActivationStatus': 'Activated',\n  'StartTime': 'Sat Nov 20 18:40:52 2021'},\n {'ServerName': 'servernode01.domain.com',\n  'NodeType': 'Subscriber',\n  'ServiceName': 'A Cisco DB Replicator',\n  'ServiceStatus': 'Started',\n  'ActivationStatus': 'Activated',\n  'StartTime': 'Sat Nov 20 18:40:53 2021'},\n {'ServerName': 'servernode01.domain.com',\n  'NodeType': 'Subscriber',\n  'ServiceName': 'Cisco AMC Service',\n  'ServiceStatus': 'Started',\n  'ActivationStatus': 'Activated',\n  'StartTime': 'Sat Nov 20 18:41:53 2021'},\n  ...\n  ]\n>>>\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awetomate/cucmapi",
    "keywords": "cisco,cucm,uc,collaboration,callmanager,axl,ris,soap",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cucmapi",
    "package_url": "https://pypi.org/project/cucmapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/cucmapi/",
    "project_urls": {
      "Homepage": "https://github.com/awetomate/cucmapi"
    },
    "release_url": "https://pypi.org/project/cucmapi/0.0.2/",
    "requires_dist": [
      "requests",
      "zeep"
    ],
    "requires_python": "<4,>=3.7",
    "summary": "Python SDK for Cisco CUCM SOAP APIs",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15323270,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f93fbcfae10bbc604f9799ddf6279b8f93a3ced37b17b03ef204fcc32c849229",
          "md5": "dcb34d81d706720b5365742b0f1de3f1",
          "sha256": "9db7ae8971654fa94d5a70fa797c9badd46933764e75999ba1c6bb28f2059246"
        },
        "downloads": -1,
        "filename": "cucmapi-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcb34d81d706720b5365742b0f1de3f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4,>=3.7",
        "size": 2381331,
        "upload_time": "2022-10-04T15:40:17",
        "upload_time_iso_8601": "2022-10-04T15:40:17.633376Z",
        "url": "https://files.pythonhosted.org/packages/f9/3f/bcfae10bbc604f9799ddf6279b8f93a3ced37b17b03ef204fcc32c849229/cucmapi-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67b1664fbf9c7eeaaa8479a6ec06b9a870200b0f758ca884575edcc4e630067a",
          "md5": "f615d9467a4f15b217d768090931b594",
          "sha256": "46fe4ee66a20202025c7a11b46fe3b433f2a01a3f0779a15772b5c438d44aa1c"
        },
        "downloads": -1,
        "filename": "cucmapi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f615d9467a4f15b217d768090931b594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4,>=3.7",
        "size": 2267979,
        "upload_time": "2022-10-04T15:40:21",
        "upload_time_iso_8601": "2022-10-04T15:40:21.471188Z",
        "url": "https://files.pythonhosted.org/packages/67/b1/664fbf9c7eeaaa8479a6ec06b9a870200b0f758ca884575edcc4e630067a/cucmapi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baaaedca8a615244546ac406fd520f9936b0bcadc7519b28b966178b004f3110",
          "md5": "7cd482252dfbff1474c961c18de7065e",
          "sha256": "cebe753de2284f6893e010251823423683ced9af6ca1caf699dc1cbd6a53b5c5"
        },
        "downloads": -1,
        "filename": "cucmapi-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cd482252dfbff1474c961c18de7065e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4,>=3.7",
        "size": 2381331,
        "upload_time": "2022-10-06T13:20:20",
        "upload_time_iso_8601": "2022-10-06T13:20:20.364172Z",
        "url": "https://files.pythonhosted.org/packages/ba/aa/edca8a615244546ac406fd520f9936b0bcadc7519b28b966178b004f3110/cucmapi-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed94e5030e5c9aeb3b041574f6b328b2dd2338de717c85d0c29cac57986af62",
          "md5": "94cd8b6707cfafaa417fe4cea7b3d22a",
          "sha256": "c04609e64602799eb50ebddcb58b3fd8d54dda35f6205dc236b14a1f0818938c"
        },
        "downloads": -1,
        "filename": "cucmapi-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94cd8b6707cfafaa417fe4cea7b3d22a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4,>=3.7",
        "size": 2267996,
        "upload_time": "2022-10-06T13:20:24",
        "upload_time_iso_8601": "2022-10-06T13:20:24.589580Z",
        "url": "https://files.pythonhosted.org/packages/ae/d9/4e5030e5c9aeb3b041574f6b328b2dd2338de717c85d0c29cac57986af62/cucmapi-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "baaaedca8a615244546ac406fd520f9936b0bcadc7519b28b966178b004f3110",
        "md5": "7cd482252dfbff1474c961c18de7065e",
        "sha256": "cebe753de2284f6893e010251823423683ced9af6ca1caf699dc1cbd6a53b5c5"
      },
      "downloads": -1,
      "filename": "cucmapi-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7cd482252dfbff1474c961c18de7065e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<4,>=3.7",
      "size": 2381331,
      "upload_time": "2022-10-06T13:20:20",
      "upload_time_iso_8601": "2022-10-06T13:20:20.364172Z",
      "url": "https://files.pythonhosted.org/packages/ba/aa/edca8a615244546ac406fd520f9936b0bcadc7519b28b966178b004f3110/cucmapi-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aed94e5030e5c9aeb3b041574f6b328b2dd2338de717c85d0c29cac57986af62",
        "md5": "94cd8b6707cfafaa417fe4cea7b3d22a",
        "sha256": "c04609e64602799eb50ebddcb58b3fd8d54dda35f6205dc236b14a1f0818938c"
      },
      "downloads": -1,
      "filename": "cucmapi-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "94cd8b6707cfafaa417fe4cea7b3d22a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<4,>=3.7",
      "size": 2267996,
      "upload_time": "2022-10-06T13:20:24",
      "upload_time_iso_8601": "2022-10-06T13:20:24.589580Z",
      "url": "https://files.pythonhosted.org/packages/ae/d9/4e5030e5c9aeb3b041574f6b328b2dd2338de717c85d0c29cac57986af62/cucmapi-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}