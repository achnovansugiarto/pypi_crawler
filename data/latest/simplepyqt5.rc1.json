{
  "info": {
    "author": "Jung Gyu Yoon",
    "author_email": "yjg30737@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# simplePyQt5\n\nThis is the package i used when i was new at PyQt5.\n\n\n\nI uploaded this to pypi for the sake of preventing dependency error of some packages. \n\n\n\n## Table of Contents\n\n* [General Info](#general-info)\n\n* [Requirements](#requirements)\n\n* [Class Overview](#class-overview)\n\n* [Setup](#setup)\n\n* [Usage](#usage)\n\n\n\n## General Info\n\nBeing able to add a couple of Qt widgets and separator at once, align them easily, no need to make layout.\n\nThis package can come in handy to someone who want to make prototype UI quick.\n\nI used it all the times when i was new at PyQt5.\n\n\n\n## Requirements\n\n* PyQt5\n\n\n\n## Class Overview\n\n* HorizontalWidget\n\n\n\nAdd widgets and separators horizontally.\n\n\n\n* VerticalWidget\n\n\n\nAdd widgets and separators vertically.\n\n\n\n* LeftRightWidget\n\n\n\nAdd some widgets left side of the widget and add the others right side.\n\nUnlike QFormLayout which only can set QLabel to the one side, You can add a bunch of other stuffs like QComboBox, QCheckBox.\n\n\n\n* TopLeftRightWidget\n\n\n\nThis module inherits LeftRightWidget.\n\nTop of this widget is LeftRightWidget and bottom part of this you can add/set a bunch of widgets such as QListWidget or separators.\n\n\n\n* TopLabelBottomWidget\n\n\n\nIf you want to add the label on the top of the TopLeftRightWidget, This is for you.\n\nUsing `setLabel(text: str)` method to set the label.\n\n\n\n* OkCancelWidget\n\n\n\nAdd Ok, Cancel buttons to bottom right of certain QDialog. Attach to parent widget like `OkCancelWidget(self)` and then add to parent widget's layout like `lay.addWidget(okCancelWidget)` then ok, cancel buttons will show up bottom right part of the widget.\n\n\n\n※ This only works in QDialog!\n\n\n\n* InsertDialog\n\n\n\nBasic dialog to insert the text. It contains QLineEdit, QPushButton. if user insert the text in QLineEdit, QPushButton will be enabled to click. If QLineEdit is empty, QPushButton will be disabled.\n\n\n\n* TableWidget\n\n\n\nAdding row items or column items much easier then usual QTableWidget. No need to make QTableWidgetItem. Header labels always be align in center.\n\nBoth horizontal and vertical headers are not visible in default. But you can use `setHorizontalHeaderLabels(lst)` to add header labels(it will set column count by amount of header labels you given at the same time, align headers as center also.). same goes to vertical one.\n\n\n\n※ Maybe i'll make this as independent package. Don't give me wrong; I won't remove this module from this package.\n\n※ A lot of things that doesn't explain will be explained. Sorry 'bout that.\n\n\n\n* StyleApplier\n\n\n\nThis module help you apply style, icon, tooltip over widgets. Style path and icon path are set to `style` and `icon` folder in your script folder by default. So if you want to use this module you have to make those two and put the css files and icon files inside them.\n\nYou can change those two paths, though.\n\n\n\n## Setup\n\n`python -m pip install simplePyQt5`\n\n\n\n## Usage\n\n* HorizontalWidget\n\n\n\nCode\n\n```python\n\n    from simplePyQt5.horizontalWidget import HorizontalWidget\n\n    ...\n\n    horizontalWidget = HorizontalWidget()\n\n    btn1 = QPushButton('btn1')\n\n    btn2 = QPushButton('btn2')\n\n    # Add two buttons horizontally, \"''\" between to buttons is separator, align parameter make widgets align\n\n    horizontalWidget.addWidgets([btn1, '', btn2], align=Qt.AlignCenter)\n\n```\n\nResult\n\n\n\n![HorizontalWidget](./examples/horizontalWidgetExample.png)\n\n\n\n* VerticalWidget\n\n\n\nCode\n\n\n\nSame as HorizontalWidget. Only difference is name.\n\n\n\nResult\n\n\n\n![VerticalWidget](./examples/verticalWidgetExample.png)\n\n\n\n* LeftRightWidget\n\n```python\n\n    from simplePyQt5.leftRightWidget import LeftRightWidget\n\n    ...\n\n    lrWidget = LeftRightWidget()\n\n    lineEdit = QLineEdit()\n\n    lineEdit.setFixedWidth(80) # Prevent width of lineEdit grow endlessly to show this modules feature\n\n    btn = QPushButton()\n\n    lrWidget.setLeftWidgets([lineEdit]) # Add lineEdit left side of the lrWidget\n\n    lrWidget.setRightWidgets([btn]) # Add btn right side of the lrWidget\n\n```\n\nResult\n\n\n\n![LeftRightWidget](./examples/leftRightWidgetExample.png)\n\n\n\n* TopLeftRightWidget\n\n\n\nAs i said this inherits LeftRightWidget so its usage is kinda simillar to LeftRightWidget.\n\n\n\nCode\n\n```python\n\n    from simplePyQt5.topLeftRightWidget import TopLeftRightWidget\n\n    ...\n\n    tlrWidget = TopLeftRightWidget()\n\n    lbl = QLabel('Files')\n\n    addBtn = QPushButton('Add')\n\n    delBtn = QPushButton('Delete')\n\n    listWidget = QListWidget()\n\n    tlrWidget.setLeftWidgets([lbl])\n\n    tlrWidget.setRightWidgets([addBtn, delBtn])\n\n    tlrWidget.addBottomWidget(listWidget)\n\n```\n\nResult\n\n\n\n![TopLeftRightWidget](./examples/topLeftRightWidgetExample.png)\n\n\n\n* StyleApplier\n\n\n\nUsing TopLeftRightWidget as showing StyleApplier's feature.\n\n\n\nCode\n\n```python\n\n    from simplePyQt5.styleApplier import StyleApplier\n\n    ...\n\n    tlrWidget = TopLeftRightWidget()\n\n    lbl = QLabel('Files')\n\n    addBtn = QPushButton()\n\n    delBtn = QPushButton()\n\n\n\n    btns = [addBtn, delBtn]\n\n    applier = StyleApplier()\n\n    applier.setCssFile('style1.css', btns) # apply css file to btns list \n\n    applier.setIconAutomatically(['add.png', 'delete.png'], btns) # apply icon files to btns list\n\n    applier.setToolTip(['Add', 'Delete'], btns) # apply tooltips to btns list\n\n\n\n    listWidget = QListWidget()\n\n    tlrWidget.setLeftWidgets([lbl])\n\n    tlrWidget.setRightWidgets([addBtn, delBtn])\n\n    tlrWidget.addBottomWidget(listWidget)\n\n```\n\nResult\n\n\n\n![StyleApplier](./examples/styleApplierExample.png)\n\n\n\nAgain, Style path and icon path are set to `style` and `icon` folder in your script folder by default. So if you want to use this module you have to make those two and put the css files and icon files inside them.\n\n\n\nYou can change those two default paths with `setStylePath` and `setIconPath` method.\n\n\n\nIf you want to apply css code itself over widgets instead of file, use `setCssCode` method.\n\n\n\nIf you want to adjust widgets' size to icons' size naturally, use `setHintSize` method.\n\n\n\n* TopLabelBottomWidget\n\n\n\nCode(Full)\n\n```python\n\nimport sys\n\n\n\nfrom PyQt5.QtWidgets import QMainWindow, QPushButton, QApplication, QListWidget, QCheckBox\n\nfrom simplePyQt5 import StyleApplier\n\nfrom simplePyQt5.topLabelBottomWidget import TopLabelBottomWidget\n\n\n\n\n\nclass MainWindow(QMainWindow):\n\n    def __init__(self):\n\n        super().__init__()\n\n        self.__initUi()\n\n\n\n    def __initUi(self):\n\n        mainWidget = TopLabelBottomWidget()\n\n        mainWidget.setLabel('Files')\n\n\n\n        allChkBox = QCheckBox('Check All')\n\n\n\n        addBtn = QPushButton()\n\n        delBtn = QPushButton()\n\n\n\n        btns = [addBtn, delBtn]\n\n        applier = StyleApplier()\n\n        applier.setCssFile('style1.css', btns)\n\n        applier.setIconAutomatically(['add.png', 'delete.png'], btns)\n\n        applier.setToolTip(['Add', 'Delete'], btns)\n\n\n\n        listWidget = QListWidget()\n\n        mainWidget.setLeftWidgets([allChkBox])\n\n        mainWidget.setRightWidgets([addBtn, delBtn])\n\n        mainWidget.addBottomWidget(listWidget)\n\n        lay = mainWidget.layout()\n\n        lay.setContentsMargins(5, 5, 5, 5)\n\n        self.setCentralWidget(mainWidget)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n\n    mainWindow = MainWindow()\n\n    mainWindow.show()\n\n    sys.exit(app.exec_())\n\n```\n\n\n\nResult\n\n\n\n![TopLabelBottomWidget](./examples/topLabelBottomWidgetExample.png)\n\n\n\n* OkCancelWidget\n\n\n\nAdd OkCancelWidget to TopLabelBottomWidget example code.\n\n\n\nCode\n\n```python\n\n        listWidget = QListWidget()\n\n        mainWidget.setLeftWidgets([allChkBox])\n\n        mainWidget.setRightWidgets([addBtn, delBtn])\n\n        mainWidget.addBottomWidget(listWidget)\n\n        \n\n        okCancelWidget = OkCancelWidget(self) # make OkCancelWidget instance\n\n        mainWidget.addBottomWidget(okCancelWidget) # attach\n\n        \n\n        lay = mainWidget.layout()\n\n        lay.setContentsMargins(5, 5, 5, 5)\n\n        self.setCentralWidget(mainWidget)\n\n```\n\nResult\n\n\n\n![OkCancelWidget](./examples/okCancelWidgetExample.png)\n\n\n\nWell, You might think result image looks quite different than the others. Because i write `lay.setContentMargins(5, 5, 5, 5)` to make it less ugly.\n\nI kinda regret that i didn't set the contents margins to other examples. Whatever.\n\n\n\n* InsertDialog\n\n\n\nCode\n\n```python\n\n\n\naddBtn = QPushButton()\n\naddBtn.clicked.connect(self.__add) # Show InsertDialog when addBtn clicked\n\ndelBtn = QPushButton()\n\n...\n\ndef __add(self):\n\n    dialog = InsertDialog() # make instance\n\n    reply = dialog.exec()\n\n    if reply == QDialog.Accepted: # if user clicked ok button in InsertDialog \n\n        print(dialog.getText()) # get the text\n\n\n\n```\n\nResult\n\n\n\n![InsertDialog](./examples/insertDialogExample.png)\n\n\n\n* TableWidget\n\n\n\nCode(Horizontal)\n\n```python\n\ntableWidget = TableWidget()\n\ntableWidget.setHorizontalHeaderLabels(['Name', 'Sex', 'Age']) # Add labels. the method overrides the setHorizontalHeaderLabels of QTableWidget.\n\ntableWidget.addData(['a', 'b', 'c'], align=Qt.AlignCenter) # Add data like this. 'a', 'b', 'c' will be added as QTableWidgetItem. One row also will be added. You can give an align option.\n\n```\n\n\n\nCode(Vertical)\n\n```python\n\ntableWidget = TableWidget()\n\ntableWidget.setVerticalHeaderLabels(['Name', 'Sex', 'Age'])\n\ntableWidget.setColumnCount(3) # You have to set column count unlike the horizontal one. Because addData do add row but not add column.\n\ntableWidget.addData(['a', 'b', 'c'], align=Qt.AlignCenter)\n\n```\n\n\n\n* Other\n\n\n\nThese classes' content margins are set to zero as default, so if you want to set the margin then\n\n```python\n\n    lrWidget = LeftRightWidget()\n\n    lay = lrWidget.layout()\n\n    lay.setContentMargins(5, 5, 5, 5)\n\n```\n\nget the widget's layout like this and set content margins or anything such as spacing.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yjg30737/simplePyQt5.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplePyQt5",
    "package_url": "https://pypi.org/project/simplePyQt5/",
    "platform": null,
    "project_url": "https://pypi.org/project/simplePyQt5/",
    "project_urls": {
      "Homepage": "https://github.com/yjg30737/simplePyQt5.git"
    },
    "release_url": "https://pypi.org/project/simplePyQt5/0.0.1/",
    "requires_dist": [
      "PyQt5 (>=5.8)"
    ],
    "requires_python": "",
    "summary": "simple PyQt5",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13815806,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63862371990e0248538cb9f84feb523ac0f8f61c5a45fbecc18db3eac1c16b61",
          "md5": "1c39eb25ad4e8a426f467247e61e6583",
          "sha256": "0731c2e54e91c363ee5fe5234632e2a4d93d244bb0e9bca1365ceaaa250e432d"
        },
        "downloads": -1,
        "filename": "simplePyQt5-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c39eb25ad4e8a426f467247e61e6583",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11776,
        "upload_time": "2022-05-14T10:35:43",
        "upload_time_iso_8601": "2022-05-14T10:35:43.292209Z",
        "url": "https://files.pythonhosted.org/packages/63/86/2371990e0248538cb9f84feb523ac0f8f61c5a45fbecc18db3eac1c16b61/simplePyQt5-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ab0f348248dc51441f07590f3aedd4722e3c40e4c73a1488ae909613297058e",
          "md5": "3f659703e29dbf970aa4a551852e5f51",
          "sha256": "e4a734ffc6ffc26bbe35e76267da70c41cc751c8c24edbbb7fa45462f039ea30"
        },
        "downloads": -1,
        "filename": "simplePyQt5-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f659703e29dbf970aa4a551852e5f51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11500,
        "upload_time": "2022-05-14T10:35:45",
        "upload_time_iso_8601": "2022-05-14T10:35:45.239452Z",
        "url": "https://files.pythonhosted.org/packages/9a/b0/f348248dc51441f07590f3aedd4722e3c40e4c73a1488ae909613297058e/simplePyQt5-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63862371990e0248538cb9f84feb523ac0f8f61c5a45fbecc18db3eac1c16b61",
        "md5": "1c39eb25ad4e8a426f467247e61e6583",
        "sha256": "0731c2e54e91c363ee5fe5234632e2a4d93d244bb0e9bca1365ceaaa250e432d"
      },
      "downloads": -1,
      "filename": "simplePyQt5-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c39eb25ad4e8a426f467247e61e6583",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11776,
      "upload_time": "2022-05-14T10:35:43",
      "upload_time_iso_8601": "2022-05-14T10:35:43.292209Z",
      "url": "https://files.pythonhosted.org/packages/63/86/2371990e0248538cb9f84feb523ac0f8f61c5a45fbecc18db3eac1c16b61/simplePyQt5-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ab0f348248dc51441f07590f3aedd4722e3c40e4c73a1488ae909613297058e",
        "md5": "3f659703e29dbf970aa4a551852e5f51",
        "sha256": "e4a734ffc6ffc26bbe35e76267da70c41cc751c8c24edbbb7fa45462f039ea30"
      },
      "downloads": -1,
      "filename": "simplePyQt5-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3f659703e29dbf970aa4a551852e5f51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11500,
      "upload_time": "2022-05-14T10:35:45",
      "upload_time_iso_8601": "2022-05-14T10:35:45.239452Z",
      "url": "https://files.pythonhosted.org/packages/9a/b0/f348248dc51441f07590f3aedd4722e3c40e4c73a1488ae909613297058e/simplePyQt5-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}