{
  "info": {
    "author": "joeferg425",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# EasyProtocol\n\n## Introduction\n\nA library for quick prototyping protocol parsing in python. Not the fastest, not the most efficient, not the coolest, but hopefully the easiest to modify and prototype with.\n\n## Quick Start\n\n### Installing\n\nFor now you have to install from source, this will be on pypi soon.\n\n- Current Method\n\n```bash\ngit clone https://github.com/joeferg425/EasyProtocol.git .\ncd EasyProtocol\npython -m pip install .\n```\n\n- Future, better method\n\n```bash\npython -m pip install easyprotocol\n```\n\n### Example 1 - Making a Parser From a List of Fields\n\n- Demo Code\n\n    Lets parse something like the following.\n\n    | Name       | Bit Count | Data Type           |\n    |:--         |:--        |:--                  |\n    | id         | 8         | 8-bit int           |\n    | data count | 16        | 16-bit unsigned int |\n    | data       | 8         | 8-bit unsigned int  |\n\n    Fixed frame definition. Nothing fancy.\n\n    ```python\n    \"\"\"Define your parser using simple python classes and familiar types.\"\"\"\n    from easyprotocol.base import ParseFieldList, hex\n    from easyprotocol.fields import Int8Field, UInt8Field, UInt16Field\n\n    # Make an instance of the modified list type and add your fields as the list items.\n    exampleParser = ParseFieldList(\n        # give the parser a name\n        name=\"ExampleParser1\",\n        # define your fields in order\n        default=[\n            # give each field a name, some standard field types are already defined.\n            Int8Field(name=\"id\"),\n            UInt16Field(name=\"count\"),\n            UInt8Field(name=\"data\"),\n        ],\n    )\n\n    # Some example data bytes to parse\n    data = b\"\\x01\\x00\\x01\\x80\"\n    print(f\"input bytes:\\t{data!r}\")\n    print(f\"input hex:\\t{hex(data)}\\n\")\n\n    # Parse the bytes\n    exampleParser.parse(data=data)\n\n    # Print the parsed data to see what we got\n    print(f\"parsed:\\t{exampleParser}\")\n    print(f\"bytes:\\t{bytes(exampleParser)!r}\")\n    print(f\"hex:\\t{exampleParser.hex_value}\\n\")\n\n    # Make a new frame from known data to send somewhere (like a socket)\n    exampleParser[0].value = 3\n    exampleParser.value = [3, 257, 127]\n    exampleParser.value = [3, 257, 127]\n    print(f\"parsed:\\t{exampleParser}\")\n    print(f\"bytes:\\t{bytes(exampleParser)!r}\")\n    print(f\"hex:\\t{exampleParser.hex_value}\\n\")\n\n    # You can access parsed elements of a ParseList by numeric index.\n    for child in exampleParser.children.values():\n        print(f'{child.name}:\\t{child.value}\\t\"{child.string_value}\"')\n    print()\n\n    # Wait, I don't really like hexadecimal\n    exampleParser.string_format = \"{}\"\n    for child in exampleParser.children.values():\n        child.string_format = \"{}\"\n\n    # Print the values again\n    exampleParser[0].value = 3\n    exampleParser.value = [3, 257, 127]\n    exampleParser.value = [3, 257, 127]\n    print(f\"parsed:\\t{exampleParser}\")\n    print(f\"bytes:\\t{bytes(exampleParser)!r}\")\n    print(f\"hex:\\t{exampleParser.hex_value}\\n\")\n    for child in exampleParser.children.values():\n        print(f'{child.name}:\\t{child.value}\\t\"{child.string_value}\"')\n    ```\n\n- Output\n\n    ```bash\n    input bytes:    b'\\x01\\x00\\x01\\x80'\n    input hex:      01 00 01 80\n\n    parsed: ExampleParser1: [id: 1, count: 0001(hex), data: 80(hex)]\n    bytes:  b'\\x01\\x00\\x01\\x80'\n    hex:    01 00 01 80\n\n    parsed: ExampleParser1: [id: 3, count: 0101(hex), data: 7F(hex)]\n    bytes:  b'\\x03\\x01\\x01\\x7f'\n    hex:    03 01 01 7F\n\n    id:     3       \"3\"\n    count:  257     \"0101(hex)\"\n    data:   127     \"7F(hex)\"\n\n    parsed: ExampleParser1: [id: 3, count: 257, data: 127]\n    bytes:  b'\\x03\\x01\\x01\\x7f'\n    hex:    03 01 01 7F\n\n    id:     3       \"3\"\n    count:  257     \"257\"\n    data:   127     \"127\"\n        ```\n\n### Example 2 - Making a Parser from a Dictionary of Fields\n\n- Demo Code\n\n    Lets parse something like the following.\n\n    | Name       | Bit Count | Data Type              |\n    |:--         |:--        |:--                     |\n    | id         | 8         | 8-bit unsigned int     |\n    | count      | 16        | 16-bit unsigned int    |\n    | data array | 8         | 8-bit unsigned int(s)  |\n\n    Variable Frame size, handles a variable length array of uint8 chunks.\n\n    ```python\n    \"\"\"Define your parser using simple python classes and familiar types.\"\"\"\n    from typing import cast\n\n    from easyprotocol.base import ParseFieldDict, ParseFieldList, hex\n    from easyprotocol.fields import Int8Field, ParseArrayField, UInt8Field, UInt16Field\n\n    # you can define your field classes before using them in a parser.\n    ident = Int8Field(name=\"id\")\n    count = UInt16Field(\n        name=\"count\",\n        # Let's modify the display of the field value\n        string_format=\"{} data items\",\n    )\n    data_array = ParseArrayField(\n        name=\"data\",\n        count=count,\n        array_item_class=UInt8Field,\n        array_item_default=0,\n    )\n\n    # Make an instance of the modified list type and add your fields as the list items.\n    exampleParser = ParseFieldDict(\n        # give the parser a name\n        name=\"ExampleParser\",\n        # define your fields in order\n        default=[\n            # give each field a name, some standard types are defined for you.\n            ident,\n            count,\n            data_array,\n        ],\n    )\n\n    # Some example data bytes to parse\n    data = b\"\\x01\\x00\\x01\\x80\"\n    print(f\"input bytes:\\t{data!r}\\n\")\n    print(f\"input hex:\\t{hex(data)}\\n\")\n\n    # Parse the bytes\n    exampleParser.parse(data=data)\n    # Print the parsed data to see what we got\n    print(f\"parsed:\\t{exampleParser}\")\n    print(f\"hex:\\t{hex(exampleParser)}\\n\")\n\n    # Make a new frame from known data to send somewhere (like a socket)\n    exampleParser[\"id\"].value = 3\n    exampleParser[\"count\"].value = 2\n    exampleParser[\"data\"].value = [\n        127,\n        UInt8Field(name=\"new data\", default=15),\n    ]\n\n    print(f\"parsed:\\t{exampleParser}\")\n    print(f\"hex:\\t{hex(exampleParser)}\\n\")\n\n    # You can access parsed elements of a ParseDict by name.\n    idField = exampleParser[ident.name]\n    dataCountField = exampleParser[count.name]\n    dataField = cast(ParseFieldList, exampleParser[data_array.name])\n\n    # The ArrayField is a list type, so children are accessed by numeric index.\n    for child in exampleParser.values():\n        print(f\"{child.name}:\\t{child.value}\\t\\t{child.bits_str}\")\n    ```\n\n- Output\n\n    ```bash\n    input bytes:    b'\\x01\\x00\\x01\\x80'\n\n    input hex:      01 00 01 80\n\n    parsed: ExampleParser: {id: 1, count: 1 data items, data: [#0: 80(hex)]}\n    hex:    01 00 01 80\n\n    parsed: ExampleParser: {id: 3, count: 2 data items, data: [#0: 7F(hex), #1: 0F(hex)]}\n    hex:    03 00 02 7F 0F\n\n    id:     3               00000011:<b\n    count:  2               0000000000000010:<b\n    data:   [<UInt8Field> #0: 7F(hex), <UInt8Field> #1: 0F(hex)]            0111111100001111:<b\n        ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easyprotocol",
    "package_url": "https://pypi.org/project/easyprotocol/",
    "platform": null,
    "project_url": "https://pypi.org/project/easyprotocol/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/easyprotocol/0.0.3/",
    "requires_dist": [
      "bitarray (>=2.6.0,<3.0.0)",
      "crc (>=2.0.0,<3.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A library for quick protocol prototyping and parsing.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16677000,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9662ce2ab5f2cc3bc40683397c13c1f408fbb1c703810c8030405eb39c7946ab",
          "md5": "e31ddec9d8d305c7f28e38efc7deb3be",
          "sha256": "e314238dbd3f09b7301b143d7533e8fed220645f846a9d7d54509e54582d2478"
        },
        "downloads": -1,
        "filename": "easyprotocol-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e31ddec9d8d305c7f28e38efc7deb3be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 38438,
        "upload_time": "2022-12-18T00:14:55",
        "upload_time_iso_8601": "2022-12-18T00:14:55.210184Z",
        "url": "https://files.pythonhosted.org/packages/96/62/ce2ab5f2cc3bc40683397c13c1f408fbb1c703810c8030405eb39c7946ab/easyprotocol-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a5085150b2a57fe1168a9fe36d373b3ae8e110128921e2ceaa1a2ccea224e08",
          "md5": "f2370a5dd4081a5e3a92a2d554c490b6",
          "sha256": "068486d21ab8f0cbdfc0902c1cd5f53c2544adbe74c82cd75f15df502afeaa7c"
        },
        "downloads": -1,
        "filename": "easyprotocol-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2370a5dd4081a5e3a92a2d554c490b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 44852,
        "upload_time": "2023-02-03T03:52:20",
        "upload_time_iso_8601": "2023-02-03T03:52:20.524937Z",
        "url": "https://files.pythonhosted.org/packages/4a/50/85150b2a57fe1168a9fe36d373b3ae8e110128921e2ceaa1a2ccea224e08/easyprotocol-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a5085150b2a57fe1168a9fe36d373b3ae8e110128921e2ceaa1a2ccea224e08",
        "md5": "f2370a5dd4081a5e3a92a2d554c490b6",
        "sha256": "068486d21ab8f0cbdfc0902c1cd5f53c2544adbe74c82cd75f15df502afeaa7c"
      },
      "downloads": -1,
      "filename": "easyprotocol-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2370a5dd4081a5e3a92a2d554c490b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 44852,
      "upload_time": "2023-02-03T03:52:20",
      "upload_time_iso_8601": "2023-02-03T03:52:20.524937Z",
      "url": "https://files.pythonhosted.org/packages/4a/50/85150b2a57fe1168a9fe36d373b3ae8e110128921e2ceaa1a2ccea224e08/easyprotocol-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}