{
  "info": {
    "author": "Darren Govoni",
    "author_email": "darren@ontrenet.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![Blazer Logo](./img/blazer-logo-tiny.svg)\n\n\nAn HPC abstraction over MPI that uses pipes and pydash primitives. Blazer will handle all the MPI orchestration behind the scenes for you. You just work strictly with data and functions. Easy!\n\n### Install\nFrom pypi\n```bash\n$ pip install blazer\n```\n\nFrom clone\n```bash\n$ git clone https://github.com/radiantone/blazer\n$ cd blazer\n$ make init install\n```\n\nNOTE: For some tests ensure you have slurm configured properly (single or muli-machine). However, using slurm is not required to use blazer.\n\n### Linting\n```bash\n$ make lint\n```\n\n### Tests\n```bash\n(venv) $ mpirun -n 2 python setup.py test\nblazer/tests/test_parallel.py::test_parallel PASSED                      [ 50%]\nblazer/tests/test_pipeline.py::test_pipeline PASSED                      [100%]\n\n============================== 2 passed in 0.48s ===============================\nctrl-c\n```\n\nor\n\n```bash\n$ ./bin/tests.sh\n```\n\n### Examples\n```python\nimport blazer\nfrom blazer.hpc.mpi import parallel, pipeline, partial as p, scatter, where, select, filter, rank, size\n\ndef calc_some(value, *args):\n    \"\"\" Do some calculations \"\"\"\n    result = { 'some': value }\n    return result\n\ndef calc_stuff(value, *args):\n    \"\"\" Do some calculations \"\"\"\n    result = { 'this': value }\n    return result\n\ndef add_date(result):\n    from datetime import datetime\n    if type(result) is dict:\n        result['date'] = str(datetime.now())\n    return result\n\ndef calc_more_stuff(result):\n    \"\"\" Do some more calculations \"\"\"\n    if type(result) is list:\n        result += [{'more':'stuff'}]\n    elif type(result) is dict:\n        result['more'] = 'stuff'\n    return result\n\nINPUT_DATA = 'that'\n\nwith blazer.begin():\n    \n    result1=parallel([ \n        p(calc_stuff, 1),\n        p(calc_stuff, 2),\n        p(calc_stuff, 3),\n        p(calc_stuff, 4),\n        p(calc_stuff, 5)\n    ])\n    blazer.print(\"PARALLEL1:\",result1)\n\n    if blazer.ROOT:\n        r = list(\n            result1\n            | where(lambda g: where(lambda g: g['this'] > 1))\n            | select(lambda g: p(calc_stuff, g['this']*2))\n        )\n        # Run the composed computation in parallel, wait for result\n        result = parallel(r)\n        blazer.print(\"PARALLEL2:\",result)\n\n    r=pipeline([\n        p(calc_stuff, 'DATA'),\n        p(pipeline, [\n            calc_some,\n            add_date\n        ]),\n        calc_stuff\n    ])\n    blazer.print(\"PIPELINE:\",r)\n\n    scatter_data = scatter(list(range(0,(size*2)+2)), calc_some)\n    blazer.print(\"SCATTER_DATA:\",scatter_data)\n\n    result = pipeline([\n        p(calc_stuff, INPUT_DATA), \n        add_date,\n        scatter_data,\n        p(parallel,[ \n            calc_some,\n            p(pipeline,[\n                calc_stuff,\n                p(parallel, [\n                    calc_some,\n                    calc_some\n                ]),\n                calc_stuff\n            ]),\n            calc_some\n        ]),\n        calc_more_stuff\n    ])\n\n    blazer.print(\"PIPELINE RESULT:\",result)\n\n    def get_data():\n        \"\"\" Data generator \"\"\"\n        for i in range(0,(size*2)):\n            yield i\n\n    result = scatter(get_data(), calc_some)\n    blazer.print(\"SCATTER:\",result)\n\n```\n\nTo run:\n```\n(venv) $ export PYTHONPATH=.\n(venv) $ mpirun -n 4 python blazer/examples/example1.py \nPARALLEL1: [{'this': 1}, {'this': 2}, {'this': 3}, {'this': 4}, {'this': 5}]\nPARALLEL2: [{'this': 4}, {'this': 6}, {'this': 2}, {'this': 8}, {'this': 10}]\nPIPELINE: {'this': {'some': ({'this': 'DATA'},), 'date': '2022-02-11 02:47:23.356461'}}\nSCATTER_DATA: [{'some': 0}, {'some': 1}, {'some': 2}, {'some': 3}, {'some': 4}, {'some': 5}, {'some': 6}, {'some': 7}, {'some': 8}, {'some': 9}, {'some': None}, {'some': None}]\nPIPELINE RESULT: [{'this': [{'this': ([{'some': 0}, {'some': 1}, {'some': 2}, {'some': 3}, {'some': 4}, {'some': 5}, {'some': 6}, {'some': 7}, {'some': 8}, {'some': 9}, {'some': None}, {'some': None}],)}, {'some': {'some': [{'some': 0}, {'some': 1}, {'some': 2}, {'some': 3}, {'some': 4}, {'some': 5}, {'some': 6}, {'some': 7}, {'some': 8}, {'some': 9}, {'some': None}, {'some': None}]}}]}, {'some': 'some'}, {'more': 'stuff'}]\n[0, 1, 2, 3, 4, 5, 6, 7]\nSCATTER: [{'some': 0}, {'some': 1}, {'some': 2}, {'some': 3}, {'some': 4}, {'some': 5}, {'some': 6}, {'some': 7}]\n```\n\nA map/reduce example\n\n```python\nimport blazer\nfrom blazer.hpc.mpi import map, reduce\n\ndef sqr(x):\n    return x * x\n\ndef add(x, y=0):\n    return x+y\n\nwith blazer.begin():\n    result = map(sqr, [1, 2, 3, 4])\n\n    blazer.print(result)\n    result = reduce(add, result)\n\n    blazer.print(result)\n```\n\nTo run:\n```\n(venv) $ export PYTHONPATH=.\n(venv) $ mpirun -n 4 python blazer/examples/example3.py \n[1, 4, 9, 16]\n30\n```\n\n#### Streaming Compute\n\nBlazer supports the notion of `streaming compute` to handle jobs where the data can't fit into memory on a single machine.\nIn this example we implement a map/reduce computation where everything is streaming from the source data through the results without loading all the data into memory.\n\n```python\n\"\"\" Streaming map/reduce example \"\"\"\nfrom itertools import groupby\nfrom random import randrange\nfrom typing import Generator\n\nimport blazer\nfrom blazer.hpc.mpi import stream\n\ndef datagen() -> Generator:\n    for i in range(0, 1000):\n        r = randrange(2)\n        v = randrange(100)\n        if r:\n            yield {\"one\": 1, \"value\": v}\n        else:\n            yield {\"zero\": 0, \"value\": v}\n\ndef key_func(k):\n    return k[\"key\"]\n\ndef map(datum):\n    datum[\"key\"] = list(datum.keys())[0]\n    return datum\n\ndef reduce(datalist):\n    from blazer.hpc.mpi import rank\n\n    _list = sorted(datalist, key=key_func)\n    grouped = groupby(_list, key_func)\n    return [{\"rank\": rank, key: list(group)} for key, group in grouped]\n\nwith blazer.begin():\n    import json\n\n    mapper = stream(datagen(), map, results=True)\n    reducer = stream(mapper, reduce, results=True)\n    if blazer.ROOT:\n        for result in reducer:\n            blazer.print(\"RESULT\", json.dumps(result, indent=4))\n```\n\n> NOTE: blazer has (currently) only been tested on `mpirun (Open MPI) 4.1.0`\n\n## Overview\n\nBlazer is a _high-performance computing_ (HPC) library that hides the complexities of a super computer's _message-passing interface_ or (MPI).\nUsers want to focus on their code and their data and not fuss with low-level API's for orchestrating results, building pipelines and running fast, parallel code. This is why blazer exists!\n\nWith blazer, a user only needs to work with simple, straightforward python. No cumbersome API's, idioms, or decorators are needed.\nThis means they can get started quicker, run faster code, and get their jobs done _faster_!\n\n### General Design\n\nBlazer is designed around the concept of computing _primitives_ or operations. Some of the primitives include:\n\n- **parallel** - For computing a list of tasks in parallel\n- **pipeline** - For computing a list of tasks in sequence, passing the results along\n- **map** - For mapping a task to a dataset\n- **reduce** - For mapping a task to a data list and computing a single result\n\nIn addition there are other primitives to help manipulate lists of tasks or data, such as:\n\n- **where** - Filter a list of tasks or data elements based on a function or lambda\n- **select** - Apply a function to each list element and return the result\n\n### Context Handlers\n\nBlazer uses convenient context handlers to control blocks of code that need to be scheduled to MPI processes behind the scenes.\nThere are two types of context handlers currently. \n\n#### MPI Context Handler\n\n`blazer.begin()` is a mandatory context that enables the MPI scheduler behind the various primitives to operate correctly.\n\n```python\n\nimport blazer\n\nblazer.begin():\n    def get_data():\n        \"\"\" Data generator \"\"\"\n        for i in range(0, (size * 2)):\n            yield i\n\n    result = scatter(get_data(), calc_some)\n    blazer.print(\"SCATTER:\", result)\n\n```\n#### GPU Context Handler\n\n`blazer.gpu()` is a context that requests (from the invisible MPI scheduler) dedicated access to a specific GPU on your MPI node fabric.\n\n```python\nimport logging\nimport blazer\nimport numpy as np\n\nfrom blazer.hpc.mpi.primitives import host, rank\nfrom numba import vectorize\nfrom timeit import default_timer as timer\n\ndef dovectors():\n\n    @vectorize(['float32(float32, float32)'], target='cuda')\n    def dopow(a, b):\n        return a ** b\n\n    vec_size = 100\n\n    a = b = np.array(np.random.sample(vec_size), dtype=np.float32)\n    c = np.zeros(vec_size, dtype=np.float32)\n\n    start = timer()\n    dopow(a, b)\n    duration = timer() - start\n    return duration\n\nwith blazer.begin(gpu=True):  # on-fabric MPI scheduler\n    with blazer.gpu() as gpu:  # on-metal GPU scheduler\n        # gpu object contains metadata about the GPU assigned\n        print(dovectors())\n```\n\n\n#### Shared Data Context Handler\n\nBlazer supports synchronizing shared data across ranks seamlessly. Here is an example of sharing a dictionary where each rank adds its own data to the dictionary and it is available to all other ranks magically!\n\n```python\nfrom random import randrange\n\nimport blazer\nfrom blazer.hpc.mpi.primitives import rank\n\nwith blazer.environment() as vars:\n    rv = randrange(10)\n    vars[\"rank\" + str(rank)] = [\n        {\"key\": randrange(10)},\n        randrange(10),\n        randrange(10),\n        randrange(10),\n    ]\n\n    print(\"RANK:\", rank, \"DATA\", vars.vars)\n\nblazer.print(vars[\"rank1\"])\n```\n\n### Cross-Cluster Supercomputing\n\nBlazer comes with a built-in design pattern for performing cross-cluster HPC. This is useful if you want to allocate compute resources on different super-computers and then build a pipeline of jobs across them. Here is a simple example using ALCF's Cooley and Theta systems (which are built into blazer).\n\n```python\nfrom blazer.hpc.alcf import cooley, thetagpu\nfrom blazer.hpc.local import parallel, pipeline, partial as p\n\n# Log into each cluster using MFA password from MobilePASS\ncooleyjob   = cooley.job(user='dgovoni', n=1, q=\"debug\", A=\"datascience\", password=True, script=\"/home/dgovoni/git/blazer/testcooley.sh\").login()       \nthetajob    = thetagpu.job(user='dgovoni', n=1, q=\"single-gpu\", A=\"datascience\", password=True, script=\"/home/dgovoni/git/blazer/testthetagpu.sh\").login()\n\ndef hello(data, *args):\n    return \"Hello \"+str(data)\n\n# Mix and match cluster compute jobs with local code tasks\n# in serial chaining\ncooleyjob(\"some data\").then(hello).then(thetajob).then(hello)\n\n# Run a cross cluster compute job\nresult = pipeline([\n    p(thetajob,\"some data2\"),\n    p(cooleyjob,\"some data1\")\n])\n\nprint(\"Done\")\n```\n\nWhen each job `.login()` method is run, it will gather the MFA login credentials for that system and then use that to schedule jobs on that system via ssh. \n\nNotice the use of the `pipeline` primitive above. It's the same primitive you would use to build your compute workflows! Composable tasks and composable super-computers.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/radiantone/blazer",
    "keywords": "hpc,parallel processing,devops,dataflow,supercomputing,workflows",
    "license": "CC0-1.0 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blazer",
    "package_url": "https://pypi.org/project/blazer/",
    "platform": null,
    "project_url": "https://pypi.org/project/blazer/",
    "project_urls": {
      "Homepage": "https://github.com/radiantone/blazer"
    },
    "release_url": "https://pypi.org/project/blazer/0.1.35/",
    "requires_dist": null,
    "requires_python": ">=3.8.*",
    "summary": "An HPC abstraction over MPI that uses pipes and pydash primitives for composable super-computing.",
    "version": "0.1.35",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13216596,
  "releases": {
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a1cd4e5164d2a5227f21347043294efb089ca60553d21f7bfb1aa2828336a2c",
          "md5": "74c33ff36ac05f725ea562d753b5e206",
          "sha256": "87d377122724fcded020faea0e415dbf6a54371b0a904864b535d61bbdce7fd7"
        },
        "downloads": -1,
        "filename": "blazer-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "74c33ff36ac05f725ea562d753b5e206",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 12935,
        "upload_time": "2022-03-01T05:03:26",
        "upload_time_iso_8601": "2022-03-01T05:03:26.224898Z",
        "url": "https://files.pythonhosted.org/packages/5a/1c/d4e5164d2a5227f21347043294efb089ca60553d21f7bfb1aa2828336a2c/blazer-0.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9e23514359f84f146cd4abb603c5282aa16a9c7be9ef9dfaaddee9f3b87c5ac",
          "md5": "302546676062741741c09f4cea497418",
          "sha256": "e0c4cf78ddc004c634be0e1a1d21dbe2fbca4083d9c3e9cdeb5ab67c391f52c8"
        },
        "downloads": -1,
        "filename": "blazer-0.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "302546676062741741c09f4cea497418",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 14199,
        "upload_time": "2022-03-01T21:16:40",
        "upload_time_iso_8601": "2022-03-01T21:16:40.613225Z",
        "url": "https://files.pythonhosted.org/packages/d9/e2/3514359f84f146cd4abb603c5282aa16a9c7be9ef9dfaaddee9f3b87c5ac/blazer-0.1.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d0f45ca2ea3798a47bf92b41f2b85e83334332b05bcc8d216ea0972c05d228b",
          "md5": "a4cd5ba0d59eef60fc31f39ad74fed6b",
          "sha256": "57fe5c36d13bdddf8fc491ed7fa67a6e63b9885f6b91c509c8240a9200d415a8"
        },
        "downloads": -1,
        "filename": "blazer-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "a4cd5ba0d59eef60fc31f39ad74fed6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 14189,
        "upload_time": "2022-03-02T12:29:55",
        "upload_time_iso_8601": "2022-03-02T12:29:55.330353Z",
        "url": "https://files.pythonhosted.org/packages/5d/0f/45ca2ea3798a47bf92b41f2b85e83334332b05bcc8d216ea0972c05d228b/blazer-0.1.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21240214af0ccf93ac8f4f11f17e0d00cbf57b32acc799e632140fdd8c76b9bc",
          "md5": "54cce2bd5880ae1588399edd9023db31",
          "sha256": "d4dd368e0678124708b84161ea5c34f9ba721bd4cc5998340c399fa6fff80b4f"
        },
        "downloads": -1,
        "filename": "blazer-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "54cce2bd5880ae1588399edd9023db31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 14210,
        "upload_time": "2022-03-02T12:33:48",
        "upload_time_iso_8601": "2022-03-02T12:33:48.745064Z",
        "url": "https://files.pythonhosted.org/packages/21/24/0214af0ccf93ac8f4f11f17e0d00cbf57b32acc799e632140fdd8c76b9bc/blazer-0.1.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89891a9f4dc4fb7c6f9f3dad054c80e14035c1f00086f20daf5729d5522aa5e2",
          "md5": "f5d84f6db53d0a40fa0b62aba19d553c",
          "sha256": "a50bd92f4e1c50c0cb3806518192833d7cd67119d10f15025d802374991af488"
        },
        "downloads": -1,
        "filename": "blazer-0.1.21.tar.gz",
        "has_sig": false,
        "md5_digest": "f5d84f6db53d0a40fa0b62aba19d553c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 19779,
        "upload_time": "2022-03-08T17:09:51",
        "upload_time_iso_8601": "2022-03-08T17:09:51.850415Z",
        "url": "https://files.pythonhosted.org/packages/89/89/1a9f4dc4fb7c6f9f3dad054c80e14035c1f00086f20daf5729d5522aa5e2/blazer-0.1.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33354379732ab311591775c928db1fc4d08edb68f2e8ce1cfb7e17947a17ca95",
          "md5": "da856fa1b83706f30891121b1529eeff",
          "sha256": "504e6b87c9de793d2f1d82b0b27ebd2595e5c7440079982de8640188b9864607"
        },
        "downloads": -1,
        "filename": "blazer-0.1.22.tar.gz",
        "has_sig": false,
        "md5_digest": "da856fa1b83706f30891121b1529eeff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 20558,
        "upload_time": "2022-03-10T12:41:43",
        "upload_time_iso_8601": "2022-03-10T12:41:43.669541Z",
        "url": "https://files.pythonhosted.org/packages/33/35/4379732ab311591775c928db1fc4d08edb68f2e8ce1cfb7e17947a17ca95/blazer-0.1.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ceecae807e1e0348535f9b6933dada3dd8d733308a2bba395b64240f349f207",
          "md5": "677b336638addf9a047c5d3d422db07a",
          "sha256": "fbc33f7f558c3c4c30907d3c02a78701e2a99b979d885940c48f8810f73a7fcf"
        },
        "downloads": -1,
        "filename": "blazer-0.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "677b336638addf9a047c5d3d422db07a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 20268,
        "upload_time": "2022-03-10T13:31:20",
        "upload_time_iso_8601": "2022-03-10T13:31:20.316475Z",
        "url": "https://files.pythonhosted.org/packages/6c/ee/cae807e1e0348535f9b6933dada3dd8d733308a2bba395b64240f349f207/blazer-0.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10f481ec4a639ff646dc52e776ab2563a03959334f8bb59d1741174b20738d34",
          "md5": "4fa8113626021195f2326325324c1610",
          "sha256": "3b08784a3d18256d81ef4a03c677f02278499efd15137623f057286648208a78"
        },
        "downloads": -1,
        "filename": "blazer-0.1.24.tar.gz",
        "has_sig": false,
        "md5_digest": "4fa8113626021195f2326325324c1610",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 20544,
        "upload_time": "2022-03-11T20:05:51",
        "upload_time_iso_8601": "2022-03-11T20:05:51.713522Z",
        "url": "https://files.pythonhosted.org/packages/10/f4/81ec4a639ff646dc52e776ab2563a03959334f8bb59d1741174b20738d34/blazer-0.1.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17dc84358eb26a22268bc21c1c300d9e2fd3f4aa1c67d60161587d3bf3e4659e",
          "md5": "85d6eb4466bf83ae3c8e0623f773b203",
          "sha256": "43c3b985c87ba0c982c4c78bdd63a7a6b208b55c60e08d9576a160c710fcff1e"
        },
        "downloads": -1,
        "filename": "blazer-0.1.25.tar.gz",
        "has_sig": false,
        "md5_digest": "85d6eb4466bf83ae3c8e0623f773b203",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 20991,
        "upload_time": "2022-03-12T22:46:08",
        "upload_time_iso_8601": "2022-03-12T22:46:08.321043Z",
        "url": "https://files.pythonhosted.org/packages/17/dc/84358eb26a22268bc21c1c300d9e2fd3f4aa1c67d60161587d3bf3e4659e/blazer-0.1.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "508965143170b01674dfda0231e8cab03c05ad29c11012a5414c4281e94ecbd8",
          "md5": "681d1eab3276a8cc50f539e6f3fc7380",
          "sha256": "3176b6fbeb8e8b9eec477292dabaeb1a96cd94eb5457a7fde7b998becc82db6d"
        },
        "downloads": -1,
        "filename": "blazer-0.1.26.tar.gz",
        "has_sig": false,
        "md5_digest": "681d1eab3276a8cc50f539e6f3fc7380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 21020,
        "upload_time": "2022-03-14T11:26:07",
        "upload_time_iso_8601": "2022-03-14T11:26:07.875025Z",
        "url": "https://files.pythonhosted.org/packages/50/89/65143170b01674dfda0231e8cab03c05ad29c11012a5414c4281e94ecbd8/blazer-0.1.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6736144bf8fcace169c68529db66e1c0ca40b9d7dce7d9f58529577e7c34135d",
          "md5": "51722dcee3bb59285701c10fe0c81d6f",
          "sha256": "6c631960afc75ee9ccae94bf2d944241e4078d07c47e282c10ae555151dd09fe"
        },
        "downloads": -1,
        "filename": "blazer-0.1.27.tar.gz",
        "has_sig": false,
        "md5_digest": "51722dcee3bb59285701c10fe0c81d6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23048,
        "upload_time": "2022-03-14T13:20:31",
        "upload_time_iso_8601": "2022-03-14T13:20:31.239545Z",
        "url": "https://files.pythonhosted.org/packages/67/36/144bf8fcace169c68529db66e1c0ca40b9d7dce7d9f58529577e7c34135d/blazer-0.1.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8099399c7806d771d4a101a6c7b044d881efac8d8ac12fc419384f55af947955",
          "md5": "9a6c616f482f1768931d44e86bf9cd84",
          "sha256": "5fe741dc1e4c0a6c98a9172717f2560a650c0cfe6822b3e56fcd5b1b50943dda"
        },
        "downloads": -1,
        "filename": "blazer-0.1.28.tar.gz",
        "has_sig": false,
        "md5_digest": "9a6c616f482f1768931d44e86bf9cd84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23450,
        "upload_time": "2022-03-15T22:13:22",
        "upload_time_iso_8601": "2022-03-15T22:13:22.255887Z",
        "url": "https://files.pythonhosted.org/packages/80/99/399c7806d771d4a101a6c7b044d881efac8d8ac12fc419384f55af947955/blazer-0.1.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f1e1d9d6e82d6060a6a2fb9c9b8384ba67ba528d3226f4e009654542c7e7532",
          "md5": "766dfeb49133a19aa25b557d981c1efa",
          "sha256": "9a214db5a14ed15260a9ca08224b5c32395f6901a4474681331915b65be93a9c"
        },
        "downloads": -1,
        "filename": "blazer-0.1.30.tar.gz",
        "has_sig": false,
        "md5_digest": "766dfeb49133a19aa25b557d981c1efa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23460,
        "upload_time": "2022-03-15T23:54:26",
        "upload_time_iso_8601": "2022-03-15T23:54:26.105325Z",
        "url": "https://files.pythonhosted.org/packages/5f/1e/1d9d6e82d6060a6a2fb9c9b8384ba67ba528d3226f4e009654542c7e7532/blazer-0.1.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4e6369a32397370117fe4d00ae094301f5e2ae5af570bc57b11194a21698231",
          "md5": "d405615c3199095d0faf6da145cad4f2",
          "sha256": "0f74563236380efdc2b829d23c53c2e3516d2a603ff1cbbad1fbdd67f1e83d38"
        },
        "downloads": -1,
        "filename": "blazer-0.1.31.tar.gz",
        "has_sig": false,
        "md5_digest": "d405615c3199095d0faf6da145cad4f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23403,
        "upload_time": "2022-03-16T09:28:11",
        "upload_time_iso_8601": "2022-03-16T09:28:11.705838Z",
        "url": "https://files.pythonhosted.org/packages/c4/e6/369a32397370117fe4d00ae094301f5e2ae5af570bc57b11194a21698231/blazer-0.1.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb841073a7c87b55a27970ebe18bdf57320bf1f1d2e3e1f381b4781f9bac7077",
          "md5": "3047ea764ec94792b85470d30d7ede7e",
          "sha256": "b1a408a82ad28ff59efd6149607f167656d1388d747ea36855158c29ce5399d0"
        },
        "downloads": -1,
        "filename": "blazer-0.1.32.tar.gz",
        "has_sig": false,
        "md5_digest": "3047ea764ec94792b85470d30d7ede7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23776,
        "upload_time": "2022-03-17T03:22:22",
        "upload_time_iso_8601": "2022-03-17T03:22:22.216127Z",
        "url": "https://files.pythonhosted.org/packages/bb/84/1073a7c87b55a27970ebe18bdf57320bf1f1d2e3e1f381b4781f9bac7077/blazer-0.1.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc0ce2f1ef34af8da6c2a7afa220236c445effbd467f74f1a6f927819bc8843d",
          "md5": "4c9de1bce2672f6afe2bd8a5e193e986",
          "sha256": "db345479907b2c1b3d9ee4f0e4db64f08060f091dce77b4e51c7c0b4730ea84d"
        },
        "downloads": -1,
        "filename": "blazer-0.1.33.tar.gz",
        "has_sig": false,
        "md5_digest": "4c9de1bce2672f6afe2bd8a5e193e986",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 23785,
        "upload_time": "2022-03-17T03:24:58",
        "upload_time_iso_8601": "2022-03-17T03:24:58.628978Z",
        "url": "https://files.pythonhosted.org/packages/bc/0c/e2f1ef34af8da6c2a7afa220236c445effbd467f74f1a6f927819bc8843d/blazer-0.1.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c63a99c6c893dc0778ce432ecf274d48dd99df548136c789e395ef58e3fd7923",
          "md5": "f92f16d0e440259217fafc28c9b5b44a",
          "sha256": "cdb605037f84e81425aedff9dfb3de63012da037fa06638ff6a821fc17d1e802"
        },
        "downloads": -1,
        "filename": "blazer-0.1.34.tar.gz",
        "has_sig": false,
        "md5_digest": "f92f16d0e440259217fafc28c9b5b44a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 25430,
        "upload_time": "2022-03-18T08:04:03",
        "upload_time_iso_8601": "2022-03-18T08:04:03.738189Z",
        "url": "https://files.pythonhosted.org/packages/c6/3a/99c6c893dc0778ce432ecf274d48dd99df548136c789e395ef58e3fd7923/blazer-0.1.34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daeb51f2bdcfaebe545dbb8bd191db6c999c70eacd97f0ea8ee29285bb5166d2",
          "md5": "bdf4ddcfbd9aa2b36d9bfb916ca1f616",
          "sha256": "5ca02bb0b9ee25c4709cf7d598d99a7a54b109e9b2ecb5c16f655860c71c4362"
        },
        "downloads": -1,
        "filename": "blazer-0.1.35.tar.gz",
        "has_sig": false,
        "md5_digest": "bdf4ddcfbd9aa2b36d9bfb916ca1f616",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.*",
        "size": 25642,
        "upload_time": "2022-03-18T13:44:58",
        "upload_time_iso_8601": "2022-03-18T13:44:58.797545Z",
        "url": "https://files.pythonhosted.org/packages/da/eb/51f2bdcfaebe545dbb8bd191db6c999c70eacd97f0ea8ee29285bb5166d2/blazer-0.1.35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "daeb51f2bdcfaebe545dbb8bd191db6c999c70eacd97f0ea8ee29285bb5166d2",
        "md5": "bdf4ddcfbd9aa2b36d9bfb916ca1f616",
        "sha256": "5ca02bb0b9ee25c4709cf7d598d99a7a54b109e9b2ecb5c16f655860c71c4362"
      },
      "downloads": -1,
      "filename": "blazer-0.1.35.tar.gz",
      "has_sig": false,
      "md5_digest": "bdf4ddcfbd9aa2b36d9bfb916ca1f616",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.*",
      "size": 25642,
      "upload_time": "2022-03-18T13:44:58",
      "upload_time_iso_8601": "2022-03-18T13:44:58.797545Z",
      "url": "https://files.pythonhosted.org/packages/da/eb/51f2bdcfaebe545dbb8bd191db6c999c70eacd97f0ea8ee29285bb5166d2/blazer-0.1.35.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}