{
  "info": {
    "author": "Timothy Allen",
    "author_email": "tallen@wharton.upenn.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django REST Framework Renderer: XLSX\n\n`drf-renderer-xlsx` provides an XLSX renderer for Django REST Framework. It uses OpenPyXL to create the spreadsheet and returns the data.\n\n# Requirements\n\nIt may work with earlier versions, but has been tested with the following:\n\n* Python >= 3.6\n* Django >= 2.2\n* Django REST Framework >= 3.6\n* OpenPyXL >= 2.4\n\n# Installation\n\n```bash\npip install drf-renderer-xlsx\n```\n\nThen add the following to your `REST_FRAMEWORK` settings:\n\n```python\n    REST_FRAMEWORK = {\n        ...\n\n        'DEFAULT_RENDERER_CLASSES': (\n            'rest_framework.renderers.JSONRenderer',\n            'rest_framework.renderers.BrowsableAPIRenderer',\n            'drf_renderer_xlsx.renderers.XLSXRenderer',\n        ),\n    }\n```\n\nTo avoid having a file streamed without a filename (which the browser will often default to the filename \"download\", with no extension), we need to use a mixin to override the `Content-Disposition` header. If no `filename` is provided, it will default to `export.xlsx`. For example:\n\n```python\nfrom rest_framework.viewsets import ReadOnlyModelViewSet\nfrom drf_renderer_xlsx.mixins import XLSXFileMixin\nfrom drf_renderer_xlsx.renderers import XLSXRenderer\n\nfrom .models import MyExampleModel\nfrom .serializers import MyExampleSerializer\n\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = (XLSXRenderer,)\n    filename = 'my_export.xlsx'\n```\n\nThe `XLSXFileMixin` also provides a `get_filename()` method which can be overridden, if you prefer to provide a filename programmatically instead of the `filename` attribute.\n\n# Configuring Styles \n\nStyles can be added to your worksheet header, column header row, and body rows, from view attributes `header`, `column_header`, `body`. Any arguments from [the OpenPyXL package](https://openpyxl.readthedocs.io/en/stable/styles.html) can be used for font, alignment, fill and border_side (border will always be all side of cell).   \n\n```python\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = (XLSXRenderer,)\n\n    column_header = {\n        'titles': [\n            \"Column_1_name\",\n            \"Column_2_name\",\n            \"Column_3_name\",\n        ],\n        'column_width': [17, 30, 17],\n        'height': 25,\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFCCFFCC',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 14,\n                'bold': True,\n                'color': 'FF000000',\n            },\n        },\n    }\n    body = {\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFCCFFCC',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 14,\n                'bold': False,\n                'color': 'FF000000',\n            }\n        },\n        'height': 40,\n    }\n```\n\nAlso you can dynamically generate style attributes in methods `get_body`, `get_header`, `get_column_header`.\n\n```python\ndef get_header(self):\n    starttime, endtime = parse_times(request=self.request)\n    datetime_format = \"%H:%M:%S %d.%m.%Y\"\n    return {\n        'tab_title': 'MyReport',\n        'header_title': 'Report from {} to {}'.format(\n            starttime.strftime(datetime_format),\n            endtime.strftime(datetime_format),\n        ),\n        'height': 45,\n        'img': 'app/images/MyLogo.png',\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFFFFFFF',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 16,\n                'bold': True,\n                'color': 'FF000000',\n            }\n        }\n    }\n```\n\nAlso you can add `color` field to your serializer and fill body rows.\n\n```python\nclass ExampleSerializer(serializers.Serializer):\n    color = serializers.SerializerMethodField()\n\n    def get_color(self, instance):\n        color_map = {'w': 'FFFFFFCC', 'a': 'FFFFCCCC'}\n        return color_map.get(instance.alarm_level, 'FFFFFFFF')\n```\n\n# Controlling XLSX headers and values\n\n## Use Serializer Field labels as header names\n\nBy default, headers will use the same 'names' as they are returned by the API. This can be changed by setting `xlsx_use_labels = True` inside your API View. \n\nInstead of using the field names, the export will use the labels as they are defined inside your Serializer. A serializer field defined as `title = serializers.CharField(label=_(\"Some title\"))` would return `Some title` instead of `title`, also supporting translations. If no label is set, it will fall back to using `title`.\n\n\n## Ignore fields\n\nBy default, all fields are exported, but you might want to exclude some fields from your export. To do so, you can set an array with fields you want to exclude: `xlsx_ignore_headers = [<excluded fields>]`.\n\nThis also works with nested fields, separated with a dot (i.e. `icon.url`).\n\n\n## Name boolean values\n\n`True` and `False` as values for boolean fields are not always the best representation and don't support translation. This can be controlled with `xlsx_boolean_labels`. \n\n`xlsx_boolean_labels = {True: _('Yes'), False: _('No')}` will replace `True` with `Yes` and `False` with `No`.\n\n\n## Format dates\n\nTo format dates differently than what DRF returns (eg. 2013-01-29T12:34:56.000000Z) `xlsx_date_format_mappings` takes a Â´dict` with the field name as its key and the date(time) format as its value:\n\n```    \nxlsx_date_format_mappings = {\n    'created_at': '%d.%m.%Y %H:%M',\n    'updated_at': '%d.%m.%Y %H:%M'\n}\n```\n\n\n## Custom mappings\n\nAssuming you have a field that returns a `dict` instead of a simple `str`, you might not want to return the whole object but only a value of it. Let's say `status` returns `{ value: 1, display: 'Active' }`. To return the `display` value in the `status` column, we can do this:\n```\nxlsx_custom_mappings = {\n    'status': 'display'\n}\n```\nA probably more common case is that you want to change how a value is formatted. `xlsx_custom_mappings` also takes functions as values. Assuming we have a field `description`, and for some strange reason want to reverse the text, we can do this:\n\n```\ndef reverse_text(val):\n    return val[::-1]\n\nxlsx_custom_mappings = {\n    'description': reverse_text\n}\n```\n\n\n# Release Notes\n\nRelease notes are [available on GitHub](https://github.com/wharton/drf-renderer-xlsx/releases).\n\n## Maintainer\n\n* [Timothy Allen](https://github.com/FlipperPA) at [The Wharton School](https://github.com/wharton)\n\nThis package is maintained by the staff of [Wharton Research Data Services](https://wrds.wharton.upenn.edu/). We are thrilled that [The Wharton School](https://www.wharton.upenn.edu/) allows us a certain amount of time to contribute to open-source projects. We add features as they are necessary for our projects, and try to keep up with Issues and Pull Requests as best we can. Due to constraints of time (our full time jobs!), Feature Requests without a Pull Request may not be implemented, but we are always open to new ideas and grateful for contributions and our package users.\n\n## Contributors (Thank You!)\n\n* [Armaan Tobaccowalla](https://github.com/ArmaanT)\n* [Davis Haupt](https://github.com/davish)\n* [Eric Wang](https://github.com/ezwang)\n* [Felipe Schmitt](https://github.com/fsschmitt)\n* [ffruit](https://github.com/frruit)\n* [Gonzalo Ayuso](https://github.com/gonzalo123)\n* [Nick Kozhenin](https://github.com/mast22)\n* [Pavel Bryantsev](https://github.com/Tigven)\n* [Pavel Tolstolytko](https://github.com/eshikvtumane)\n* [Thomas Willems](https://github.com/willtho89)\n* [Tim](https://github.com/Shin--/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wharton/drf-renderer-xlsx",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-renderer-xlsx-ko",
    "package_url": "https://pypi.org/project/drf-renderer-xlsx-ko/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-renderer-xlsx-ko/",
    "project_urls": {
      "Homepage": "https://github.com/wharton/drf-renderer-xlsx"
    },
    "release_url": "https://pypi.org/project/drf-renderer-xlsx-ko/1.0/",
    "requires_dist": [
      "djangorestframework (>=3.6)",
      "openpyxl (>=2.4)"
    ],
    "requires_python": "",
    "summary": "Django REST Framework renderer for spreadsheet (xlsx) files.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10462803,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24e5062ff31278dd2f9d7cba9776ad2c1716c23355a4489452dcc63f90cf4393",
          "md5": "8222bac3d807fd2a7988c15757196a65",
          "sha256": "ab45ceba71899e93f2028011c5b6c3a07751045239e370ce2e53533546c30bd9"
        },
        "downloads": -1,
        "filename": "drf_renderer_xlsx_ko-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8222bac3d807fd2a7988c15757196a65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9906,
        "upload_time": "2021-05-25T10:39:22",
        "upload_time_iso_8601": "2021-05-25T10:39:22.284912Z",
        "url": "https://files.pythonhosted.org/packages/24/e5/062ff31278dd2f9d7cba9776ad2c1716c23355a4489452dcc63f90cf4393/drf_renderer_xlsx_ko-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fdaeb2ecb0946617f6539bcdf5e5314215885d339db63c464cbba0d918957d1",
          "md5": "5964675b467b9258530e279834ee82a7",
          "sha256": "ba5dfab9ebe58fd4415af07ee06f03e48e0e04235abfaa3c2f68d922a4d6d529"
        },
        "downloads": -1,
        "filename": "drf-renderer-xlsx-ko-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5964675b467b9258530e279834ee82a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13217,
        "upload_time": "2021-05-25T10:39:24",
        "upload_time_iso_8601": "2021-05-25T10:39:24.527013Z",
        "url": "https://files.pythonhosted.org/packages/8f/da/eb2ecb0946617f6539bcdf5e5314215885d339db63c464cbba0d918957d1/drf-renderer-xlsx-ko-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24e5062ff31278dd2f9d7cba9776ad2c1716c23355a4489452dcc63f90cf4393",
        "md5": "8222bac3d807fd2a7988c15757196a65",
        "sha256": "ab45ceba71899e93f2028011c5b6c3a07751045239e370ce2e53533546c30bd9"
      },
      "downloads": -1,
      "filename": "drf_renderer_xlsx_ko-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8222bac3d807fd2a7988c15757196a65",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9906,
      "upload_time": "2021-05-25T10:39:22",
      "upload_time_iso_8601": "2021-05-25T10:39:22.284912Z",
      "url": "https://files.pythonhosted.org/packages/24/e5/062ff31278dd2f9d7cba9776ad2c1716c23355a4489452dcc63f90cf4393/drf_renderer_xlsx_ko-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fdaeb2ecb0946617f6539bcdf5e5314215885d339db63c464cbba0d918957d1",
        "md5": "5964675b467b9258530e279834ee82a7",
        "sha256": "ba5dfab9ebe58fd4415af07ee06f03e48e0e04235abfaa3c2f68d922a4d6d529"
      },
      "downloads": -1,
      "filename": "drf-renderer-xlsx-ko-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5964675b467b9258530e279834ee82a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13217,
      "upload_time": "2021-05-25T10:39:24",
      "upload_time_iso_8601": "2021-05-25T10:39:24.527013Z",
      "url": "https://files.pythonhosted.org/packages/8f/da/eb2ecb0946617f6539bcdf5e5314215885d339db63c464cbba0d918957d1/drf-renderer-xlsx-ko-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}