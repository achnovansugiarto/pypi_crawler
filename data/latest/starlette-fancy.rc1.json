{
  "info": {
    "author": "Xurvan",
    "author_email": "xojtaba@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# Starlette Fancy\n\nWe add two more layer on top of Starlette: \"validator\" and \"processor\".\nValidators are responsible for data validations and processors do logic of the\nweb app.\n\n## Installation\n\nTo install base package:\n\n```bash\npip install starlette-fancy\n```\n\nwe use \"pydantic\" package for \"PydanticValidator\" and \"databases\" package for\n\"DatabaseProcessor\" and to support different JSON libraries we use\n\"starlette-marshal\" package. You can install each with following commands:\n\n```bash\npip install starlette-fancy[pydantic]\npip install starlette-fancy[databases]\npip install starlette-fancy[starlette-marshal]\n```\n\nto install all packages at once:\n\n```bash\npip install starlette-marshal[full]\n```\n\n## Validators\n\nIn validator layer we receive data from a request then validate them and return\nvalidated data. Input data can come from request body, querystring and sometimes\nin could be response body.\n\nWe don't specify any library or method to validate data. One may create its own\nvalidator from the scratch. All you need to do is to inherit from \"Validator\"\nclass and then implement its ```__call__``` method.\n\nan example could be like this:\n\n```python\nclass CustomValidator(Validator):\n    async def __call__(\n            self,\n            data: Union[list, dict],\n            source: Literal[\"body\", \"query_params\"] = \"body\",\n            response: bool = False,\n            partial: bool = False,\n    ) -> dict:\n        ...\n```\n\n### PydanticValidator\n\nThere is built in validator that powered with Pydantic library. First you have\nto create models:\n\n```python\nclass PostParams(BaseModel):\n    title: str\n    slug: str\n    content: str\n    published_at: datetime\n\n\nclass PostBody(BaseModel):\n    id: Optional[UUID]\n```\n\nnow we can have a simple validator like this:\n\n```python\nclass PostValidator(PydanticValidator):\n    params_model = PostParams\n    request_model = PostBody\n```\n\n## Processors\n\nProcessor layer is after validator, and it receives validated data. In this\nlayer we write logic of our program, and we return the processed. You should\ninherit from \"Processor\" class and then override one of \"get\", \"post\", \"put\",\n\"delete\" or \"patch\" methods. Here an example:\n\n```python\nclass CustomProcessor(Processor):\n    async def get(self, validated_data: dict) -> Any:\n        return {\n            'validated_data': validated_data,\n        }\n```\n\n### DatabaseProcessor\n\nA common scenario is when we want to map an HTTP method to a database query.\nSuppose we have the following queries:\n\n```python\nINSERT_POSTS: str = '''\n    insert into posts (title, slug, content, published_at)\n    values (:title, :slug, :content, :published_at)\n    returning *\n'''\n\nSELECT_POSTS: str = '''\n    select id, title, slug, content, published_at\n    from posts\n    where true\n'''\n\nUPDATE_POSTS: str = '''\n    update posts\n    set title        = coalesce(:title, title),\n        slug         = coalesce(:slug, slug),\n        content      = coalesce(:content, content),\n        published_at = coalesce(:published_at, published_at)\n    where id = :id\n    returning *\n'''\n\nDELETE_POSTS: str = '''\n    delete\n    from posts\n    where id = :id\n    returning *\n'''\n```\n\nnow a DatabaseProcessor example is like this:\n\n```python\ndatabase: Database = Database(url=DATABASE_URL)\n\n\nclass PostProcessor(DatabaseProcessor):\n    database = database\n    insert_query = INSERT_POSTS\n    select_query = SELECT_POSTS\n    update_query = UPDATE_POSTS\n    delete_query = DELETE_POSTS\n```\n\n## Endpoints\n\nThis isn't a new thing, just normal Starlette endpoint. But we only handle\nrequest and response in this layer. We get request and pass the values to\nvalidator then receive validated data and give it to processor layer. At the end\nwe create a response with what processor returned to us.\n\nHere an example:\n\n```python\nclass CustomEndpoint(Endpoint):\n    validator: Validator\n    processor: Processor\n\n    async def get(self, request: Request) -> Response:\n        query_params: dict = dict(request.query_params)\n\n        validated_data: dict = await self.validator(\n            data=query_params,\n            source=\"query_params\",\n        )\n        processed_data: list = await self.processor.get(\n            validated_data=validated_data,\n        )\n\n        return JSONResponse(content=processed_data)\n```\n\n### CRUDEndpoint\nTo create a fast CRUD endpoint you can use this class. With \"PydanticValidator\"\nand \"DatabaseProcessor\" it's really simple:\n\n```python\nclass PostEndpoint(CRUDEndpoint):\n    validator = PostValidator()\n    processor = PostProcessor()\n```\n\nthere's a function to generate routes for our CRUD resource:\n\n```python\nroutes = generate_crud_routes('/posts', endpoint=PostEndpoint, id_type='uuid')\n```\n\n## TODO\n\n- [x] Pydantic validator\n- [ ] marshmallow validator\n- [ ] ORM processor\n- [x] database processor\n- [x] CRUD endpoint\n- [ ] gRPC endpoint\n- [ ] proxy endpoint\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xtarlette/starlette-fancy",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starlette-fancy",
    "package_url": "https://pypi.org/project/starlette-fancy/",
    "platform": "",
    "project_url": "https://pypi.org/project/starlette-fancy/",
    "project_urls": {
      "Homepage": "https://github.com/xtarlette/starlette-fancy",
      "Source": "https://github.com/xtarlette/starlette-fancy",
      "Tracker": "https://github.com/xtarlette/starlette-fancy/issues"
    },
    "release_url": "https://pypi.org/project/starlette-fancy/0.1.0/",
    "requires_dist": [
      "starlette (>=0.17)",
      "databases ; extra == 'databases'",
      "pydantic ; extra == 'full'",
      "databases ; extra == 'full'",
      "starlette-marshal ; extra == 'full'",
      "python-rapidjson ; extra == 'full'",
      "starlette-marshal ; extra == 'marshal'",
      "pydantic ; extra == 'pydantic'"
    ],
    "requires_python": ">=3.8",
    "summary": "Fancy toolkit for Starlette",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12370133,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e0a44977d7d72d046a78bca8602d4c29221ed6652f6485ae30c178ff2c2f591",
          "md5": "0d221a38d7f9f9c666a362dfafa0636d",
          "sha256": "cbc355ff4509a9422f3adb0fbc0c089433b174ca26d329f368f3b9b805f414bb"
        },
        "downloads": -1,
        "filename": "starlette_fancy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d221a38d7f9f9c666a362dfafa0636d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11742,
        "upload_time": "2021-12-21T11:42:39",
        "upload_time_iso_8601": "2021-12-21T11:42:39.515586Z",
        "url": "https://files.pythonhosted.org/packages/7e/0a/44977d7d72d046a78bca8602d4c29221ed6652f6485ae30c178ff2c2f591/starlette_fancy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7b293498e816446c6176fd6539922ee0d3a903eeece727ba81281a683c8e96f",
          "md5": "9c858fdbba7a3f9937fadeeb4fc6c1cf",
          "sha256": "07ba351474b37cbf5e6f4d32286bd38bfa54c76813e77e6dadfbb37865ad834c"
        },
        "downloads": -1,
        "filename": "starlette-fancy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c858fdbba7a3f9937fadeeb4fc6c1cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11384,
        "upload_time": "2021-12-21T11:42:41",
        "upload_time_iso_8601": "2021-12-21T11:42:41.307313Z",
        "url": "https://files.pythonhosted.org/packages/f7/b2/93498e816446c6176fd6539922ee0d3a903eeece727ba81281a683c8e96f/starlette-fancy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e0a44977d7d72d046a78bca8602d4c29221ed6652f6485ae30c178ff2c2f591",
        "md5": "0d221a38d7f9f9c666a362dfafa0636d",
        "sha256": "cbc355ff4509a9422f3adb0fbc0c089433b174ca26d329f368f3b9b805f414bb"
      },
      "downloads": -1,
      "filename": "starlette_fancy-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0d221a38d7f9f9c666a362dfafa0636d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11742,
      "upload_time": "2021-12-21T11:42:39",
      "upload_time_iso_8601": "2021-12-21T11:42:39.515586Z",
      "url": "https://files.pythonhosted.org/packages/7e/0a/44977d7d72d046a78bca8602d4c29221ed6652f6485ae30c178ff2c2f591/starlette_fancy-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7b293498e816446c6176fd6539922ee0d3a903eeece727ba81281a683c8e96f",
        "md5": "9c858fdbba7a3f9937fadeeb4fc6c1cf",
        "sha256": "07ba351474b37cbf5e6f4d32286bd38bfa54c76813e77e6dadfbb37865ad834c"
      },
      "downloads": -1,
      "filename": "starlette-fancy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9c858fdbba7a3f9937fadeeb4fc6c1cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11384,
      "upload_time": "2021-12-21T11:42:41",
      "upload_time_iso_8601": "2021-12-21T11:42:41.307313Z",
      "url": "https://files.pythonhosted.org/packages/f7/b2/93498e816446c6176fd6539922ee0d3a903eeece727ba81281a683c8e96f/starlette-fancy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}