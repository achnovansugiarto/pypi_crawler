{
  "info": {
    "author": "Whisperity",
    "author_email": "whisperity-packages@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development",
      "Topic :: System :: Shells"
    ],
    "description": "lpython: Linear Python scripts\n==============================\n\n**`lpython`** allows executing \"Python\"-ish scripts in the command line as parts of a pipeline.\n\n_Why?_ Normally, the Python binary allows executing Python script specified in the command-line, but you have to write a proper Python script:\n\n~~~~\npython3 -c 'import json\nprint(json.dumps({0: 1}))\n'\n~~~~\n\nThis may make shell history unreadable, hard to edit, etc.\n\nIn addition, accessing information in a pipe, common with most command-line tools, is convoluted.\nWhile you can easily say `some-command-generating-data | grep Foo | awk '{ print $2; }'`, doing a similar thing for data processing in Python is really hard, requiring you to open an editor, save a script file.\n\n**`lpython`** takes this need off for **quick and dirty** command-line data processing.\n\nInstallation\n------------\n\nInstall from [PyPI](http://pypi.org/project/lpython/).\nThe `lpython` entry point will be made available.\n\n~~~\n$ pip3 install lpython\n$ lpython -h\nusage: lpython [-h] [...]\n~~~\n\nOverview\n--------\n\nUse `lpython` just like you would use `sed` or `awk` in a pipe.\nAfter the optional flags, specify the code to execute:\n\n~~~~\n$ seq 1 5 | lpython 'print(int(LINE) * 2);'\n2\n4\n6\n8\n10\n~~~~\n\nLPython works by first *transcoding* the input code to real Python syntax, then *injecting* this input into a context, forming a full source code, and then running this code.\n\n### Optional arguments\n\nHelp about individual modes is printed if no code is specified:\n\n~~~~\n$ lpython -t lines\nHelp for the 'lines' mode ...\n~~~~\n\n * **`-n`**: Show the result of the transformed code, but do not execute.\n * **`-b`**: Show the result of the transformed and injected code, but do not execute.\n * **`-t XXX`**: use _`XXX`_ mode.\n\n### Passing command-line arguments\n\nCommand-line arguments to `lpython` can be passed to the running script with the **`-X`** optional argument.\nThe argument vector (list) of the invocation is available inside the script as `ARGS`.\n\n~~~~\n$ lpython -X \"username\" -X \"$(date)\" 'print(ARGS[1], ARGS[2])'\nusername \"Sun 14 Feb 2021 14:02:33\"\n~~~~\n\n\nUsage modes\n-----------\n\n### `bare` mode\n\nThe bare mode does not perform any pre-parsing or business logic.\nThis is the default mode when the standard input is a terminal, and not a pipe.\nThe variables `STDIN`, `STDOUT`, and `STDERR` alias `sys.stdin`, `sys.stdout`, and `sys.stderr`, respectively.\n\n### `lines` mode\n\nLines mode allows handling each line of the standard input.\nThis is the default mode if the standard input comes from a pipe.\nThe values are available through the `LINE` variable.\n\nThe functions `OUT` and `ERR` print the arguments verbatim to the standard output and error respectively, without adding an additional trailing newline.\n\n#### FizzBuzz\n\n~~~~\n$ seq 1 15 | lpython 'if int(LINE) % 15 == 0: print(\"Fizzbuzz\"); ' \\\n    'elif int(LINE) % 3 == 0: print(\"Fizz\");' \\\n    'elif int(LINE) % 5 == 0: print(\"Buzz\");' \\\n    'else: print(LINE); endif'\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzbuzz\n~~~~\n\n### `csv` mode\n\nThe input stream is loaded and parsed as a [CSV](http://docs.python.org/3.6/library/csv.html) file, with each row made available as `ROW`.\nThe `HEADER()` function returns `True` if the first row is in `ROW`.\nAfter the user's code is executed and the rows are transformed one by one, the resulting CSV is printed to the standard output.\n\n~~~~\n$ echo -e \"Foo,Bar,Baz\\n1,2,3\\n4,5,6\" | \\\n    lpython -t csv 'for idx, elem in enumerate(ROW): ' \\\n        'if not HEADER(): ROW[idx] = int(elem) * 10; endif; endfor;'\nFoo,Bar,Baz\n10,20,30\n40,50,60\n~~~~\n\n### `json` mode\n\nThe input stream is loaded and parsed as a [JSON](http://json.org), and made available as `DATA`.\nThis mode is aimed at implementing JSON filters and transformers.\nAfter the user's code executed, the JSON is formatted and printed to the standard output.\n\n#### JSON filter\n\n~~~~\n$ echo '[{\"Timezone\": \"Europe/London\"}, {\"Timezone\": \"America/New York\"}]' | \\\n    lpython -t json 'for rec in DATA: for k, v in dict(rec).items(): ' \\\n        'if k == \"Timezone\": split = v.split(\"/\"); ' \\\n        'rec[\"Country\"] = split[0]; rec[\"City\"] = split[1]; del rec[\"Timezone\"]; ' \\\n        'endif; endfor; endfor;'\n[{\"Country\": \"Europe\", \"City\": \"London\"}, {\"Country\": \"America\", \"City\": \"New York\"}]\n~~~~\n\nThe JSON mode also offers the `PRETTY()` function, which turns out formatted JSON output:\n\n~~~~\n$ echo '[{\"Timezone\": \"Europe/London\"}, {\"Timezone\": \"America/New York\"}]' | \\\n    lpython -t json 'for rec in DATA: for k, v in dict(rec).items(): ' \\\n        'if k == \"Timezone\": split = v.split(\"/\"); ' \\\n        'rec[\"Country\"] = split[0]; rec[\"City\"] = split[1]; del rec[\"Timezone\"]; ' \\\n        'endif; endfor; endfor; ' \\\n        'PRETTY();'\n[\n    {\n        \"City\": \"London\",\n        \"Country\": \"Europe\"\n    },\n    {\n        \"City\": \"New York\",\n        \"Country\": \"America\"\n    }\n]\n~~~~\n\n\nSyntax\n------\n\nThe code given to `lpython` is generally the same as normal Python code, except for a few key differences:\n\n * **Lines are terminated by `;` (semicolon)**, instead of a newline. Newlines still work, but the entire idea is to not deal with newlines.\n * Due to not dealing with newlines and whitespace, the indentation-based \"scoping\" is also side-stepped:\n    * Everything that would begin a scope and require indented code is instead closed with an `end___` keyword.\n    * For example: `if X: print(X); endif;`, `while True: pass; endwhile;`, `def identity(a): return a; enddef`.\n\nEverything else in-between is expected to behave as it would in Python.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/whisperity/lpython",
    "keywords": "python shell pipeline script scripting",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lpython",
    "package_url": "https://pypi.org/project/lpython/",
    "platform": "",
    "project_url": "https://pypi.org/project/lpython/",
    "project_urls": {
      "Homepage": "http://github.com/whisperity/lpython"
    },
    "release_url": "https://pypi.org/project/lpython/1.0.0a1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Linearly written Python scripts in a pipeline",
    "version": "1.0.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9446023,
  "releases": {
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5f9e8a11d34da98df054e542ebd178de5dfafc083538866031e5c7cb5ec68d4",
          "md5": "c2b9d65305fec9deceb93c6c696a9c67",
          "sha256": "c871a9a252018077e61c2ef7a78f8cf39891873dcb575fb5ceb0fb750700a192"
        },
        "downloads": -1,
        "filename": "lpython-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2b9d65305fec9deceb93c6c696a9c67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32871,
        "upload_time": "2021-02-17T17:15:45",
        "upload_time_iso_8601": "2021-02-17T17:15:45.251170Z",
        "url": "https://files.pythonhosted.org/packages/e5/f9/e8a11d34da98df054e542ebd178de5dfafc083538866031e5c7cb5ec68d4/lpython-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2d69d7d3517d867bdc4a1bd6756f75326312dd2e6e0aec37fad76e676990bcd",
          "md5": "c8935f2d286f1b931a8fc6021f810ff4",
          "sha256": "2f2f0114479e53a4f469f50117a6cd221e061715a89edf8e85bbb444a4b9ef9d"
        },
        "downloads": -1,
        "filename": "lpython-1.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "c8935f2d286f1b931a8fc6021f810ff4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15004,
        "upload_time": "2021-02-17T17:15:46",
        "upload_time_iso_8601": "2021-02-17T17:15:46.814731Z",
        "url": "https://files.pythonhosted.org/packages/b2/d6/9d7d3517d867bdc4a1bd6756f75326312dd2e6e0aec37fad76e676990bcd/lpython-1.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5f9e8a11d34da98df054e542ebd178de5dfafc083538866031e5c7cb5ec68d4",
        "md5": "c2b9d65305fec9deceb93c6c696a9c67",
        "sha256": "c871a9a252018077e61c2ef7a78f8cf39891873dcb575fb5ceb0fb750700a192"
      },
      "downloads": -1,
      "filename": "lpython-1.0.0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c2b9d65305fec9deceb93c6c696a9c67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32871,
      "upload_time": "2021-02-17T17:15:45",
      "upload_time_iso_8601": "2021-02-17T17:15:45.251170Z",
      "url": "https://files.pythonhosted.org/packages/e5/f9/e8a11d34da98df054e542ebd178de5dfafc083538866031e5c7cb5ec68d4/lpython-1.0.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2d69d7d3517d867bdc4a1bd6756f75326312dd2e6e0aec37fad76e676990bcd",
        "md5": "c8935f2d286f1b931a8fc6021f810ff4",
        "sha256": "2f2f0114479e53a4f469f50117a6cd221e061715a89edf8e85bbb444a4b9ef9d"
      },
      "downloads": -1,
      "filename": "lpython-1.0.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "c8935f2d286f1b931a8fc6021f810ff4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15004,
      "upload_time": "2021-02-17T17:15:46",
      "upload_time_iso_8601": "2021-02-17T17:15:46.814731Z",
      "url": "https://files.pythonhosted.org/packages/b2/d6/9d7d3517d867bdc4a1bd6756f75326312dd2e6e0aec37fad76e676990bcd/lpython-1.0.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}