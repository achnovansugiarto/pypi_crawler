{
  "info": {
    "author": "Vanessa R. Marcelino Jan P. Buchmann Andreas Sjödin Philip T.L.C. Clausen",
    "author_email": "vrmarcelino@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# CCMetagen\n\nCCMetagen processes sequence alignments produced with [KMA](https://bitbucket.org/genomicepidemiology/kma), which implements the ConClave sorting scheme to achieve highly accurate read mappings. The pipeline is fast enough to use the whole NCBI nt collection as reference, facilitating the inclusion of understudied organisms, such as microbial eukaryotes, in metagenome surveys. CCMetagen produces ranked taxonomic results in user-friendly formats that are ready for publication or downstream statistical analyses.\n\nIf you this tool, please cite CCMetagen and KMA:\n\n  * [Marcelino VR, Clausen PT, Buchman J, Wille M, Iredell JR, Meyer W, Lund O, Sorrell T, Holmes EC. 2019. CCMetagen: comprehensive and accurate identification of eukaryotes and prokaryotes in metagenomic data. Genome Biology. 2020 Dec;21(1):1-5.](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02014-2)\n\n  * [Clausen PT, Aarestrup FM, Lund O. 2018. Rapid and precise alignment of raw reads against redundant databases with KMA. BMC bioinformatics. 2018 Dec;19(1):307.](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2336-6)\n\nBesides the guidelines below, we also provide a tutorial to reproduce our metagenome clasisfication analyses of the microbiome of wild birds [here](https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial).\n\nThe guidelines below will guide you in using the command-line version of the CCMetagen pipeline.\n\nCCMetagen is also available as a web service at https://cge.cbs.dtu.dk/services/ccmetagen/.\nNote that we recommend using this command-line version to analyze data exceeding 1.5Gb.\n\n## Requirements and Installation\n\nMake sure you have the dependencies below installed and accessible in your $PATH.\nThe guidelines below are for Unix systems.\n\n  * If you do not have it already, download and install [Python 3.6](https://www.python.org/downloads/)\nCCMetagen requires the Python modules [pandas (>0.23)](https://pandas.pydata.org/) and [ETE3](http://etetoolkit.org/).\nThe easiest way to install these modules is via conda or pip:\n\n`conda install pandas`\n\n  * You need a C-compiler and zlib development files to install KMA:\n\n`sudo apt-get install libz-dev`\n\n  * Download and install [KMA](https://bitbucket.org/genomicepidemiology/kma):\n```\ngit clone https://bitbucket.org/genomicepidemiology/kma.git\ncd kma && make\n```\n**Note - a new version of KMA - v1.3.0 – has been released, featuring higher speed and precision. We recommend that you update KMA to v.1.3.0**\n\n\n  * [Krona](https://github.com/marbl/Krona) is required for graphs. To install Krona it in the local folder:\n```\nwget https://github.com/marbl/Krona/releases/download/v2.7/KronaTools-2.7.tar\ntar xvf KronaTools-2.7.tar \ncd  KronaTools-2.7\n./install.pl --prefix . \n```\n\n  * Then download CCMetagen and add it to your path. You have two options:\n\n**Install CCMetagen via git:**\n```\ngit clone https://github.com/vrmarcelino/CCMetagen\n```\nThis will download CCMetagen and the tutorial files.\nYou can also just download the python files from this github directory (CCMetagen.py, CCMetagen_merge.py) and the ones in the ccmetagen folder if you rather avoid downloading all other files.\n\nThen add the CCMetagen python scripts to the path, temporarily or permanently. For example:\n`PATH=$PATH<your_folder>/CCMetagen`\n\nTo update CCMetagen, go to the CCMetagen folder and type: `git pull`\n\n**Or install CCMetagen via pip:**\n```\npip install CCMetagen\n```\nThis will automatically install the necessary python packages (pandas and ete3), so you can skip that step if you use pip.\n\n\n\n## Databases\n\n**Option 1** Download the indexed (ready-to-go) nt or RefSeq database either [here](http://dx.doi.org/10.25910/5cc7cd40fca8e) or [here](http://www.cbs.dtu.dk/public/CGE/databases/CCMetagen/).\nDownload the ncbi_nt_kma.zip file (96GB zipped file, 165GB uncompressed) or the RefSeq_bf.zip (90GB zipped file)\nUnzip the database, e.g.: `unzip ncbi_nt_kma`.\nThe nt database contains the whole in NCBI nucleotide collection (of of Jan 2018), and therefore is suitable to identify a range of microorganisms, including prokaryotes and eukaryotes.\nThe RefSeq_bf database contains complete reference bacterial and fungal genomes, suitable for better known habitats such as the human gut or when trying to detect well known species.\n\n**Option 2** We have indexed a more recent version of the ncbi nucleotide collection (June 2019) that does not contain environemntal or artificial sequences. The file ncbi_nt_no_env_11jun2019.zip can be found [here](http://dx.doi.org/10.25910/5cc7cd40fca8e) and contains all ncbi nt entries excluding the descendants of environmental eukaryotes (taxid 61964), environmental prokaryotes (48479), unclassified sequences (12908) and artificial sequences (28384).\n\n**Option 3:** Build your own reference database (recommended!)\nFollow the instructions in the [KMA website](https://bitbucket.org/genomicepidemiology/kma) to index the database.\nIt is important that taxids are incorporated in sequence headers for processing with CCMetagen. Sequence headers should look like \n`>1234|sequence_description`, where 1234 is the taxid. \nWe provide scripts to rename sequences in the nt database [here](https://github.com/vrmarcelino/CCMetagen/tree/master/benchmarking/rename_nt).\n\nIf you want to use the RefSeq database, the format is similar to the one required for Kraken. The [Opiniomics blog](http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/) describes how to download sequences in an adequate format. Note that you still need to build the index with KMA: `kma_index -i refseq.fna -o refseq_indexed -NI -Sparse -` or `kma_index -i refseq.fna -o refseq_indexed -NI -Sparse TG` for faster analysis.\n\n\n## Quick Start\n\n  * First map sequence reads (or contigs) to the database with **KMA**.\n\nFor paired-end files:\n```\nkma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f\n```\n\nFor single-end files:\n```\nkma -i $SAMPLE -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and\n```\n\nIf you want to calculate abundance in reads per million (RPM) or in number of reads (fragments), or if you want to calculate the proportion of mapped reads, add the flag -ef (extended features):\n```\nkma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f -ef\n```\n\nWhere:\n\n$db is the path to the reference database\n$th is the number of threads\n$SAMPLE_R1 is the path to the mate1 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE_R2 is the path to the mate2 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE is the path to a single-end metagenome/metatranscriptome file (reads or contigs)\n\n\n  * Then run **CCMetagen**:\n```\nCCMetagen.py -i $sample_out_kma.res -o results\n```\nWhere $sample_out_kma.res is alignment results produced by KMA.\n\nNote that if you are running CCMetagen from the local folder (instead of adding it to your path), you may need to add 'python' before CCMetagen: `python CCMetagen.py -i $sample_out_kma.res -o results`\n\nDone! This will make an additional quality filter and output a text file with ranked taxonomic classifications and a krona graph file for interactive visualization.\n\nAn example of the CCMetagen output can be found [here (.csv file)](https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.csv) and [here (.html file)](https://htmlpreview.github.io/?https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.html).\n\n<img src=tutorial/figs_tutorial/krona_photo.png width=\"500\" height=\"419.64\">\n\nIn the .csv file, you will find the depth (abundance) of each match.\n\n## Abundance units\n\n**Depth can be estimated in four ways:** by counting the number of nucleotides matching the reference sequence (use flag --depth_unit nc), by applying an additional correction for template length (default in KMA and CCMetagen), by calculating depth in Reads Per Million (RPM, use flag --depth_unit rpm), or by counting the number of fragments (i.e. number of PE reads matching to teh reference sequence, use flag --depth_unit fr). If you want RPM or fragment units, you will need to suply the .mapstats file generated with KMA (which you get when running kma with the flag '-ef').\n\n\n## Balancing sensitivity and specificity\n\nYou can **adjust the stringency of the taxonomic assignments** by adjusting the minimum coverage (--coverage), the minimum abundance (--depth), and the minimum level of sequence similarity (--query_identity). Coverage is the percentage of bases in the reference sequence that is covered by the consensus sequence (your query), it can be over 100% when the consensus sequence is larger than the reference (due to insertions for example). You can also adjust the KMA settings to facilitate the identification of more distant-related taxa (see below)\n\nIf you change the default depth unit, we recommend adjusting the minimum abundance (--depth) to remove taxa found in low abundance accordingly. For example, you can use -d 200 (200 nucleotides) when using --depth_unit nc, which is similar to -d 0.2 when using the default '--depth_unit kma' option. If you choose to calculate abundances in RPM, you may want to adjust the minimum abundance according to your sequence depth.\nFor example, to calculate abundances in RPM, and filter out all matches with less than one read per million:\n\n```\nCCMetagen.py -i $sample_out_kma.res -o results -map $sample_out_kma.mapstat --depth_unit rpm --depth 1\n```\n\nIf you would like to know the **proportion of reads mapped** to each template, run kma with the '-ef' flag. This will generate a file with the '.mapstat' extension. Then provide this file to CCMetagen (-map $sample_out_kma.mapstat) and add the flag '-ef y':\n\n```\nCCMetagen.py -i $sample_out_kma.res -o results -map $sample_out_kma.mapstat -ef y\n```\nThis will filter the .mapstat file, removing the templates that did not pass CCMetagen's quality control, will add the percentage of mapped reads for each template and will output a file with extension 'stats_csv'. It will also output the overall proportion of reads mapped to these templates in the terminal. For more details about the additional columns of this file, please check [KMA's manual](https://bitbucket.org/genomicepidemiology/kma/src/master/KMAspecification.pdf).\n\nWhen working with highly complex environemnts for which reference databases are scarce (e.g. many soil and marine metagenomes), it is common to obtain a low proportion of classified reads, especially if the sequencing depth is low. For a more sensitive analysis, besides relaxing the CCMetatgen settings, you can adjust the KMA aligner settings, by for example: removing the `-and` and the `-apm f` flags, so that you can get a match even when the reference sequences are not significantly overrepresented or when only one of the PE reads maps to the template. Check the [KMA manual](https://bitbucket.org/genomicepidemiology/kma/src/master/KMAspecification.pdf) for more details. It can also be useful to build a customized reference database with additional genomes of organisms that are closely related to what you expect to find in your samples.\n\n## Understanding the ranked taxonomic output of CCMetagen:\nThe taxonomic classifications reflect the sequence similarity between query and reference sequences, according to default or user-defined similarity thresholds. For example, if a match is 97% similar to the reference sequence, the match will not get a species-level classification. If the match is 85% similar to the reference sequence, then the species, genus and family-level classifications will be 'none'.\nNote that this is different from identifications tagged as unk_x (unknown taxa). These unknowns indicate taxa where higher-rank classifications have not been defined (according to the NCBI taxonomy database), and it is unrelated to sequence similarity.\n\n\nFor a list of options to customize your analyze, type:\n```\nCCMetagen.py -h\n```\n\n  * **To get the abundance of each taxon, and/or summarize results for multiple samples, use CCMetagen_merge**:\n```\nCCMetagen_merge.py -i $CCMetagen_out\n```\n\nWhere $CCMetagen_out is the folder containing the CCMetagen taxonomic classifications.\nThe results must be in .csv format (default or '--mode text' output of CCMetagen), and these files **must end in \".ccm.csv\"**.\n\nThe flag '-t' define the taxonomic level to merge the results. The default is species-level.\n\nYou can also filter out specific taxa, at any taxonomic level:\n\nUse flag -kr to keep (k) or remove (r) taxa.\nUse flag -l to set the taxonomic level for the filtering.\nUse flag -tlist to list the taxa to keep or remove (separated by comma).\n\nEX1: Filter out bacteria: `CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria`\n\nEX2: Filter out bacteria and Metazoa: `CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria, Metazoa`\n\nEX3: Merge results at family-level, and remove Metazoa and Viridiplantae taxa at Kingdom level:\n```\nCCMetagen_merge.py -i $CCMetagen_out -t Family -kr r -l Kingdom -tlist Metazoa,Viridiplantae -o family_table\n```\n\nFor species-level filtering (where there is a space in taxa names), use quotation marks.\nEx 4: Keep only _Escherichia coli_ and _Candida albicans_:\n```\nCCMetagen_merge.py -i 05_KMetagen/ -kr k -l Species -tlist \"Escherichia coli,Candida albicans\"\n```\n\nIf you only have one sample, you can also use CMetagen_merge to get one line per taxa.\n\nTo see all options, type:\n```\nCCMetagen_merge.py -h\n```\nThis file should look like [this](https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Bird_family_table_filtered.csv).\n\n\n* **To extract sequences of a given taxon, use CCMetagen_extract_seqs**:\n\nThis script will produce a fasta file containing all reads assigned to a taxon of interest. \nEx: Generate a fasta file containing all sequences that mapped to the genus Eschericha:\n```\nCCMetagen_extract_seqs.py -iccm $CCMetagen_out -ifrag $sample_out_kma.frag -l Genus -t Eschericha\n```\n\nWhere $CCMetagen_out is the .csv file generated with CCMetagen and $sample_out_kma.frag is the .frag file generated with KMA. The frag file needs to be decompressed: `gunzip *.frag.gz`\n\nFor species-level filtering (where there is a space in taxon names), use quotation marks.\nEx: Generate a fasta file containing all sequences that mapped to _E. coli_:\n```\nCCMetagen_extract_seqs.py -iccm $CCMetagen_out -ifrag $sample_out_kma.frag -l Species -t \"Escherichia coli\"\n```\n\n\n**Check out our [tutorial](https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial) for an applied example of the CCMetagen pipeline.**\n\n\n\n## FAQs\n\n* Error taxid not found.\n  You probably need to update your local ETE3 database, which contains the taxids and lineage information:\n```\npython\nfrom ete3 import NCBITaxa\nncbi = NCBITaxa()\nncbi.update_taxonomy_database()\nquit()\n```\n\n* TypeError: concat() got an unexpected keyword argument 'sort'.\n  If you get this error, please update the python module pandas:\n```\npip install pandas --upgrade --user\n```\n\n* WARNING: no NCBI's taxid found for accession [something], this match will not get taxonomic ranks\n\n  This is not an error, this is just a warning indicating that one of your query sequences matchs to a genbank record for which the NCBI taxonomic identifier (taxid) is not known. CCMetagen therefore will not be able to assign taxonomic ranks to this match, but you will still be able to see it in the output file.\n\n* KeyError: \"['Superkingdom' 'Kingdom' 'Phylum' 'Class' 'Order' 'Family' .... ] not in index\"\n  Make sure that the output of CCMetagen ends in '.csv'.\n\n* The results of the CCMetagen_merge.py at different taxonomic levels do not sum up.\n  As explained above, this script merges all unclassified taxa at a given taxonomic level. For example, if you have 20 matches to the genus _Candida_, but only 2 matches were classified at the species level, the output of CCMetagen_merge.py -t Species (default) will only have the abundances of two classified _Candida_ species, while the others will be merged with the \"Unclassified\" taxa. The output of CCMetagen_merge.py -t Genus however will contain all 20 matches. \n  If this behaviour is undesirable, one option is to disable the similarity thresholds (use flag -off) - so that all taxonomic levels are reported regardless of their similarity to the reference sequence. Alternatively, you can cluster species at the 'Closest_match' (using the flag --tax_level Closest_match).\n\n\n## Complete option list\n\nCCMetagen:\n```\nusage: CCMetagen.py [-h] [-m MODE] -i RES_FP [-o OUTPUT_FP]\n                    [-r REFERENCE_DATABASE] [-ef EXTENDED_OUTPUT_FILE]\n                    [-du DEPTH_UNIT] [-map MAPSTAT] [-d DEPTH] [-c COVERAGE]\n                    [-q QUERY_IDENTITY] [-p PVALUE] [-st SPECIES_THRESHOLD]\n                    [-gt GENUS_THRESHOLD] [-ft FAMILY_THRESHOLD]\n                    [-ot ORDER_THRESHOLD] [-ct CLASS_THRESHOLD]\n                    [-pt PHYLUM_THRESHOLD] [-off TURN_OFF_SIM_THRESHOLDS]\n                    [--version]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODE, --mode MODE  what do you want CCMetagen to do? Valid options are\n                        'visual', 'text' or 'both': text: parses kma, filters\n                        based on quality and output a text file with taxonomic\n                        information and detailed mapping information visual:\n                        parses kma, filters based on quality and output a\n                        simplified text file and a krona html file for\n                        visualization both: outputs both text and visual file\n                        formats. Default = both\n  -i RES_FP, --res_fp RES_FP\n                        Path to the KMA result (.res file)\n  -o OUTPUT_FP, --output_fp OUTPUT_FP\n                        Path to the output file. Default = CCMetagen_out\n  -r REFERENCE_DATABASE, --reference_database REFERENCE_DATABASE\n                        Which reference database was used. Options: UNITE,\n                        RefSeq or nt. Default = nt\n  -ef EXTENDED_OUTPUT_FILE, --extended_output_file EXTENDED_OUTPUT_FILE\n                        Produce an extended output file that includes the\n                        percentage of classified reads. Options: y or n. To\n                        use this featire, you need to generate the mapstat\n                        file when required unning KMA (use flag -ef), and use\n                        it as input in CCMetagen (flag --mapstat). Default = n\n  -du DEPTH_UNIT, --depth_unit DEPTH_UNIT\n                        Desired unit for Depth(abundance) measurements.\n                        Default = kma (KMA default depth, which is the number\n                        of nucleotides overlapping each template, divided by\n                        the lengh of the template). Alternatively, you can\n                        have abundance calculated in Reads Per Million (RPM,\n                        option 'rpm'), in number of nucleotides overlaping the\n                        template (option 'nc') or in number of fragments (i.e.\n                        PE reads, option 'fr'). If you use the 'nc', 'rpm' or\n                        'fr' options, remember to change the default --depth\n                        parameter accordingly. Valid options are nc, rpm, fr\n                        and kma\n  -map MAPSTAT, --mapstat MAPSTAT\n                        Path to the mapstat file produced with KMA when using\n                        the -ef flag (.mapstat). Required when calculating\n                        abundances in RPM or in number of fragments, or when\n                        producing the extended_output_file\n  -d DEPTH, --depth DEPTH\n                        minimum sequencing depth. Default = 0.2. The unit\n                        corresponds to the one used with --depth_unit If you\n                        use --depth_unit different from the default, change\n                        this accordingly.\n  -c COVERAGE, --coverage COVERAGE\n                        Minimum coverage. Default = 20 (i.e. 20% of the\n                        reference sequence)\n  -q QUERY_IDENTITY, --query_identity QUERY_IDENTITY\n                        Minimum query identity (Phylum level). Default = 50\n  -p PVALUE, --pvalue PVALUE\n                        Minimum p-value. Default = 0.05.\n  -st SPECIES_THRESHOLD, --species_threshold SPECIES_THRESHOLD\n                        Species-level similarity threshold. Default = 98.41\n  -gt GENUS_THRESHOLD, --genus_threshold GENUS_THRESHOLD\n                        Genus-level similarity threshold. Default = 96.31\n  -ft FAMILY_THRESHOLD, --family_threshold FAMILY_THRESHOLD\n                        Family-level similarity threshold. Default = 88.51\n  -ot ORDER_THRESHOLD, --order_threshold ORDER_THRESHOLD\n                        Order-level similarity threshold. Default = 81.21\n  -ct CLASS_THRESHOLD, --class_threshold CLASS_THRESHOLD\n                        Class-level similarity threshold. Default = 80.91\n  -pt PHYLUM_THRESHOLD, --phylum_threshold PHYLUM_THRESHOLD\n                        Phylum-level similarity threshold. Default = 0 - not\n                        applied\n  -off TURN_OFF_SIM_THRESHOLDS, --turn_off_sim_thresholds TURN_OFF_SIM_THRESHOLDS\n                        Turns simularity-based filtering off. Options = y or\n                        n. Default = n\n  --version             show program's version number and exit\n ```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vrmarcelino/CCMetagen.git",
    "keywords": "bioinformatics taxonomy metagenomic classifier KMA",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CCMetagen",
    "package_url": "https://pypi.org/project/CCMetagen/",
    "platform": "",
    "project_url": "https://pypi.org/project/CCMetagen/",
    "project_urls": {
      "Homepage": "https://github.com/vrmarcelino/CCMetagen.git",
      "Preprint": "https://www.biorxiv.org/content/10.1101/641332v2",
      "Source": "https://github.com/vrmarcelino/CCMetagen.git"
    },
    "release_url": "https://pypi.org/project/CCMetagen/1.4.0/",
    "requires_dist": [
      "pandas",
      "ete3"
    ],
    "requires_python": ">=3.6",
    "summary": "Microbiome classification pipeline",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11477755,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a0e56452e1a3e3ccef3ec5922e0d563cff39daba2e26df80c5d1b5fe44439d7",
          "md5": "06e44b43fa6996b93eb27b29567eb168",
          "sha256": "b5c672084348096e63d78fd3b78e6465df0a02aa7944176145bf730ff056177c"
        },
        "downloads": -1,
        "filename": "CCMetagen-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06e44b43fa6996b93eb27b29567eb168",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29121,
        "upload_time": "2020-02-06T00:48:03",
        "upload_time_iso_8601": "2020-02-06T00:48:03.732096Z",
        "url": "https://files.pythonhosted.org/packages/9a/0e/56452e1a3e3ccef3ec5922e0d563cff39daba2e26df80c5d1b5fe44439d7/CCMetagen-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b54a166d0a7cc8caf1d1b6701d8ce3baea8189a5e0fa37dded30611df267832",
          "md5": "a59c82dca197400713568b68e231ebb6",
          "sha256": "13d738ff62d4b601f56055fe4c29fa985e563f9eb8c1d06139c470f429f9c69e"
        },
        "downloads": -1,
        "filename": "CCMetagen-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a59c82dca197400713568b68e231ebb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20981,
        "upload_time": "2020-02-06T00:48:06",
        "upload_time_iso_8601": "2020-02-06T00:48:06.311833Z",
        "url": "https://files.pythonhosted.org/packages/1b/54/a166d0a7cc8caf1d1b6701d8ce3baea8189a5e0fa37dded30611df267832/CCMetagen-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b9c29d1581672f11deca6df7d09e6f46edd888708a2cb57fe61676c28db88d5",
          "md5": "021acb7c255086c13ed4f203615e60b6",
          "sha256": "729ec79e01fe62fe851f9eb95af785eea39f9c4b96c3017b65cd2531b92eb2d9"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "021acb7c255086c13ed4f203615e60b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29496,
        "upload_time": "2020-02-20T01:27:04",
        "upload_time_iso_8601": "2020-02-20T01:27:04.837106Z",
        "url": "https://files.pythonhosted.org/packages/1b/9c/29d1581672f11deca6df7d09e6f46edd888708a2cb57fe61676c28db88d5/CCMetagen-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e09b402017f601b1950f161d7de4fd6301d57c9ccf4e5d8fcf14aee78516cc",
          "md5": "de76a7bed5e21a565583572f6cddc581",
          "sha256": "fdec41b421bdd3eea24bf49cf13f8dd5d14ec0281dcc7d699f8b9e7d69efc60a"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "de76a7bed5e21a565583572f6cddc581",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21435,
        "upload_time": "2020-02-20T01:27:06",
        "upload_time_iso_8601": "2020-02-20T01:27:06.654940Z",
        "url": "https://files.pythonhosted.org/packages/e6/e0/9b402017f601b1950f161d7de4fd6301d57c9ccf4e5d8fcf14aee78516cc/CCMetagen-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5117ce2ee1a002d486149651fae78932014c7d755f1a2ef2f738828d57a11917",
          "md5": "efb7ace3209196ac6d9c8eb9b8fd9628",
          "sha256": "d9b6446542a17f31cc55122d9c601affa4f19ea779a56055d18455d37976ceec"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efb7ace3209196ac6d9c8eb9b8fd9628",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29533,
        "upload_time": "2020-02-20T01:48:57",
        "upload_time_iso_8601": "2020-02-20T01:48:57.984719Z",
        "url": "https://files.pythonhosted.org/packages/51/17/ce2ee1a002d486149651fae78932014c7d755f1a2ef2f738828d57a11917/CCMetagen-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d5412d64c28fde77fa5120ef3eaba47a8075552e9625b2de83861835e06e698",
          "md5": "d1b2765767adf6ee0674cb2b90dc65f6",
          "sha256": "5881cd635cd940dec28ec0bd8722b9182fa55eaf81d06f473a45993f4260e34a"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d1b2765767adf6ee0674cb2b90dc65f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21425,
        "upload_time": "2020-02-20T01:48:59",
        "upload_time_iso_8601": "2020-02-20T01:48:59.817191Z",
        "url": "https://files.pythonhosted.org/packages/3d/54/12d64c28fde77fa5120ef3eaba47a8075552e9625b2de83861835e06e698/CCMetagen-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70b610cb2304fc4b3317869fa2fc373e6a2e52136428f7c8af39d8f8e6b463b2",
          "md5": "ccd4782c4784c47d587f1a2fc267f3b3",
          "sha256": "54a3faab64d2d5d5f525522b90d396c3079607e0832068158bb10c1fc62464e2"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccd4782c4784c47d587f1a2fc267f3b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29538,
        "upload_time": "2020-02-20T22:02:45",
        "upload_time_iso_8601": "2020-02-20T22:02:45.616673Z",
        "url": "https://files.pythonhosted.org/packages/70/b6/10cb2304fc4b3317869fa2fc373e6a2e52136428f7c8af39d8f8e6b463b2/CCMetagen-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cd60ba4c60428565ecabcbcc08f5e27b67d1fda1340dc471da6464aed70c1bb",
          "md5": "07209167e615e0193a0a486fad960186",
          "sha256": "1730d77cb9bb72a56a0692fbc6b43cd2d9bbe1a09f9becdcfb50b903b15d2641"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "07209167e615e0193a0a486fad960186",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21431,
        "upload_time": "2020-02-20T22:02:47",
        "upload_time_iso_8601": "2020-02-20T22:02:47.363623Z",
        "url": "https://files.pythonhosted.org/packages/1c/d6/0ba4c60428565ecabcbcc08f5e27b67d1fda1340dc471da6464aed70c1bb/CCMetagen-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4029a5ac87bb87049d9b2fdcea4d0ce56c25a0b960aa7b1c49a2637a173d9e5",
          "md5": "60d253d894c12d33ed50e676e0db3129",
          "sha256": "aaa3cbdef1c33cefd2bb7ed3ff741507090aabe986cfded2d3302cf99a72ee41"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60d253d894c12d33ed50e676e0db3129",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17554,
        "upload_time": "2020-06-13T07:32:19",
        "upload_time_iso_8601": "2020-06-13T07:32:19.070782Z",
        "url": "https://files.pythonhosted.org/packages/f4/02/9a5ac87bb87049d9b2fdcea4d0ce56c25a0b960aa7b1c49a2637a173d9e5/CCMetagen-1.2.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "package update is incomplete"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d2340ecd116e2802f55d5c44219f2a833815978965fe7e7a622a1c27d02f8c",
          "md5": "3f9c38016ae4d3dae4214bef6b72cdf0",
          "sha256": "02693b207570425fbcc8691f76f10ef0231f5c8ede3e96800fe73fabd2dd3f01"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f9c38016ae4d3dae4214bef6b72cdf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21778,
        "upload_time": "2020-06-13T07:32:20",
        "upload_time_iso_8601": "2020-06-13T07:32:20.606913Z",
        "url": "https://files.pythonhosted.org/packages/32/d2/340ecd116e2802f55d5c44219f2a833815978965fe7e7a622a1c27d02f8c/CCMetagen-1.2.0.tar.gz",
        "yanked": true,
        "yanked_reason": "package update is incomplete"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9d037f9e13724089d9842675a04159c98f1fdbcdd38bb8270d7a047ba0edda1",
          "md5": "1cceddef0f683f7235fb332a626658c1",
          "sha256": "4d18907d21a5530a4523ddee858ba28137629870010100415adcdb68eadbfb4e"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cceddef0f683f7235fb332a626658c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31282,
        "upload_time": "2020-06-16T01:31:14",
        "upload_time_iso_8601": "2020-06-16T01:31:14.425046Z",
        "url": "https://files.pythonhosted.org/packages/a9/d0/37f9e13724089d9842675a04159c98f1fdbcdd38bb8270d7a047ba0edda1/CCMetagen-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eedd35b1ac3bd38d1bc7606d30b5dd0bdd4a30a3dd3cd4279da37f3c1a87124",
          "md5": "b0698566f84d244ce06cb57cc9e43e72",
          "sha256": "be6e7d950bcd3730009eebdddb1fa665b41c5ecd903178a55b4ec46d79df6e9f"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b0698566f84d244ce06cb57cc9e43e72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23881,
        "upload_time": "2020-06-16T01:31:15",
        "upload_time_iso_8601": "2020-06-16T01:31:15.800595Z",
        "url": "https://files.pythonhosted.org/packages/9e/ed/d35b1ac3bd38d1bc7606d30b5dd0bdd4a30a3dd3cd4279da37f3c1a87124/CCMetagen-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dfcecacba65b8976be61e2d42cd818cd50f15260a50064364a88a3491bf76be",
          "md5": "00ebfbd9153b3f9b6883dd59218fa5a1",
          "sha256": "7051c83e7f867933c1cacb87416c996dc9da9121a3db13f8de51a85b3f14121c"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00ebfbd9153b3f9b6883dd59218fa5a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31432,
        "upload_time": "2020-07-15T05:20:13",
        "upload_time_iso_8601": "2020-07-15T05:20:13.730666Z",
        "url": "https://files.pythonhosted.org/packages/7d/fc/ecacba65b8976be61e2d42cd818cd50f15260a50064364a88a3491bf76be/CCMetagen-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "614b0ba80efa2b51a8a5aba3881cce422cfe6e6a57903fc17a9e03f859553a3f",
          "md5": "a139432a21dc9b745091d61f0e2fe50e",
          "sha256": "749a0770b6aedd2a5923814f9a217621a324f05bcab4502cb45feb51229d32ae"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a139432a21dc9b745091d61f0e2fe50e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24207,
        "upload_time": "2020-07-15T05:20:15",
        "upload_time_iso_8601": "2020-07-15T05:20:15.229253Z",
        "url": "https://files.pythonhosted.org/packages/61/4b/0ba80efa2b51a8a5aba3881cce422cfe6e6a57903fc17a9e03f859553a3f/CCMetagen-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dad5a644342f8dcf47f529ea364a954f88cb408e5251e84a7c5e22b07e98eed5",
          "md5": "53d680d47c35ea272cf099ba608e9d72",
          "sha256": "19962d657cabca2818bded22b727a48e6cd9622967c40b42259d1af82cd0ead2"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53d680d47c35ea272cf099ba608e9d72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32759,
        "upload_time": "2021-09-17T11:34:13",
        "upload_time_iso_8601": "2021-09-17T11:34:13.402325Z",
        "url": "https://files.pythonhosted.org/packages/da/d5/a644342f8dcf47f529ea364a954f88cb408e5251e84a7c5e22b07e98eed5/CCMetagen-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e063566189ce39f0a0b897e5a7beba19bc4f8d5d316082004c7de12799f994e9",
          "md5": "1e6db4aae9e9a7fe49e8a09d6ed15db7",
          "sha256": "e7d89b11f53a74aa873a88fb2cf7ba1e7810395d2137d17c5143cee96be5cf39"
        },
        "downloads": -1,
        "filename": "CCMetagen-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e6db4aae9e9a7fe49e8a09d6ed15db7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37568,
        "upload_time": "2021-09-17T11:34:14",
        "upload_time_iso_8601": "2021-09-17T11:34:14.522348Z",
        "url": "https://files.pythonhosted.org/packages/e0/63/566189ce39f0a0b897e5a7beba19bc4f8d5d316082004c7de12799f994e9/CCMetagen-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dad5a644342f8dcf47f529ea364a954f88cb408e5251e84a7c5e22b07e98eed5",
        "md5": "53d680d47c35ea272cf099ba608e9d72",
        "sha256": "19962d657cabca2818bded22b727a48e6cd9622967c40b42259d1af82cd0ead2"
      },
      "downloads": -1,
      "filename": "CCMetagen-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53d680d47c35ea272cf099ba608e9d72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32759,
      "upload_time": "2021-09-17T11:34:13",
      "upload_time_iso_8601": "2021-09-17T11:34:13.402325Z",
      "url": "https://files.pythonhosted.org/packages/da/d5/a644342f8dcf47f529ea364a954f88cb408e5251e84a7c5e22b07e98eed5/CCMetagen-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e063566189ce39f0a0b897e5a7beba19bc4f8d5d316082004c7de12799f994e9",
        "md5": "1e6db4aae9e9a7fe49e8a09d6ed15db7",
        "sha256": "e7d89b11f53a74aa873a88fb2cf7ba1e7810395d2137d17c5143cee96be5cf39"
      },
      "downloads": -1,
      "filename": "CCMetagen-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e6db4aae9e9a7fe49e8a09d6ed15db7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37568,
      "upload_time": "2021-09-17T11:34:14",
      "upload_time_iso_8601": "2021-09-17T11:34:14.522348Z",
      "url": "https://files.pythonhosted.org/packages/e0/63/566189ce39f0a0b897e5a7beba19bc4f8d5d316082004c7de12799f994e9/CCMetagen-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}