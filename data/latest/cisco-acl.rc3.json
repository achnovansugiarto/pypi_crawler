{
  "info": {
    "author": "",
    "author_email": "Vladimir Prusakov <vladimir.prusakovs@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Networking"
    ],
    "description": "\r\n.. image:: https://img.shields.io/pypi/v/cisco-acl.svg\r\n   :target: https://pypi.python.org/pypi/cisco-acl\r\n.. image:: https://img.shields.io/pypi/pyversions/cisco-acl.svg\r\n   :target: https://pypi.python.org/pypi/cisco-acl\r\n\r\n\r\ncisco-acl\r\n=========\r\n\r\nPython package to parse and manage Cisco ACL (Access Control List).\r\n\r\nSupported platforms:\r\n\r\n- Cisco IOS\r\n- Cisco Nexus NX-OS\r\n\r\nMain features:\r\n\r\n- Supports wildcards, converts wildcards to prefixes\r\n- Supports address groups\r\n- Represents TCP/UDP ports and IP protocols as numbers or well-known names\r\n- Converts IOS syntax to NX-OS and vice vera\r\n- Generates sequence numbers for ACEs\r\n- Looks for and removes ACEs in the shadow (rules without hits)\r\n- Groups ACEs to blocks. After sorting, the order of ACEs within a group does not change\r\n\r\n.. contents:: **Contents**\r\n    :local:\r\n\r\n\r\nAcronyms\r\n--------\r\n\r\n==========  ========================================================================================\r\nAcronym     Definition\r\n==========  ========================================================================================\r\nACL         Access Control List\r\nACE         Access Control Entry\r\nACEs        Multiple Access Control Entries\r\n==========  ========================================================================================\r\n\r\n\r\nRequirements\r\n------------\r\n\r\nPython >=3.8\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nInstall the package from pypi.org release\r\n\r\n.. code:: bash\r\n\r\n    pip install cisco-acl\r\n\r\nor install the package from github.com release\r\n\r\n.. code:: bash\r\n\r\n    pip install https://github.com/vladimirs-git/cisco-acl/archive/refs/tags/3.0.4.tar.gz\r\n\r\nor install the package from github.com repository\r\n\r\n.. code:: bash\r\n\r\n    pip install git+https://github.com/vladimirs-git/cisco-acl\r\n\r\n\r\nacls()\r\n------\r\n**cisco_acl.acls(config, kwargs)**\r\nCreates *Acl* objects based on the \"show running-config\" output.\r\nSupport address group objects.\r\nEach ACE line is treated as an independent *Ace* (default) or ACE lines can be\r\ngrouped to *AceGroup* by text in remarks (param `group_by`)\r\n\r\n=============== ============ =======================================================================\r\nParameter       Type         Description\r\n=============== ============ =======================================================================\r\nconfig          *str*        Cisco config, \"show running-config\" output\r\nplatform        *str*        Platform: \"ios\" (default), \"nxos\"\r\nnames           *List[str]*  Parses only ACLs with specified names, skips any other\r\nmax_ncwb        *int*        Max count of non-contiguous wildcard bits\r\nindent          *str*        ACE lines indentation (default \"  \")\r\nprotocol_nr     *bool*       Well-known ip protocols as numbers, True  - all ip protocols as numbers, False - well-known ip protocols as names (default)\r\nport_nr         *bool*       Well-known TCP/UDP ports as numbers, True  - all tcp/udp ports as numbers, False - well-known tcp/udp ports as names (default)\r\ngroup_by        *str*        Startswith in remark line. ACEs group, starting from the Remark, where line startswith `group_by`, will be applied to the same AceGroup, until next Remark that also startswith `group_by`\r\n=============== ============ =======================================================================\r\n\r\nReturn\r\n    List of *Acl* objects\r\n\r\n**Examples**\r\n\r\n`./examples/functions_acls.py`_\r\n\r\n\r\naces()\r\n------\r\n**cisco_acl.aces(config, kwargs)**\r\nCreates *Ace* objects based on the \"show running-config\" output\r\n\r\n=============== ============ =======================================================================\r\nParameter       Type         Description\r\n=============== ============ =======================================================================\r\nconfig          *str*        Cisco config, \"show running-config\" output\r\nplatform        *str*        Platform: \"ios\" (default), \"nxos\"\r\nmax_ncwb        *int*        Max count of non-contiguous wildcard bits\r\nprotocol_nr     *bool*       Well-known ip protocols as numbers, True  - all ip protocols as numbers, False - well-known ip protocols as names (default)\r\nport_nr         *bool*       Well-known TCP/UDP ports as numbers, True  - all tcp/udp ports as numbers, False - well-known tcp/udp ports as names (default)\r\ngroup_by        *str*        Startswith in remark line. ACEs group, starting from the Remark, where line startswith `group_by`, will be applied to the same AceGroup, until next Remark that also startswith `group_by`\r\n=============== ============ =======================================================================\r\n\r\nReturn\r\n    List of *Ace* objects\r\n\r\n**Examples**\r\n\r\n`./examples/functions_aces.py`_\r\n\r\n\r\naddrgroups()\r\n------------\r\n**cisco_acl.addrgroups(config, kwargs)**\r\nCreates *AddrGroup* objects based on the \"show running-config\" output\r\n\r\n=============== ============ =======================================================================\r\nParameter       Type         Description\r\n=============== ============ =======================================================================\r\nconfig          *str*        Cisco config, \"show running-config\" output\r\nplatform        *str*        Platform: \"ios\" (default), \"nxos\"\r\nmax_ncwb        *int*        Max count of non-contiguous wildcard bits\r\nindent          *str*        ACE lines indentation (default \"  \")\r\n=============== ============ =======================================================================\r\n\r\nReturn\r\n    List of *AddrGroup* objects\r\n\r\n\r\nrange_ports()\r\n-------------\r\n**cisco_acl.range_ports(srcports, dstports, line, platform, port_nr)**\r\nGenerates ACEs in required range of TCP/UDP source/destination ports\r\n\r\n=============== ============ =======================================================================\r\nParameter       Type         Description\r\n=============== ============ =======================================================================\r\nsrcports        *str*        Range of TCP/UDP source ports\r\ndstports        *str*        Range of TCP/UDP destination ports\r\nline            *str*        ACE pattern, on whose basis new ACEs will be generated (default \"permit tcp any any\", operator \"eq\")\r\nplatform        *str*        Platform: \"ios\" (default), \"nxos\"\r\nport_nr         *bool*       Well-known TCP/UDP ports as numbers, True  - all tcp/udp ports as numbers, False - well-known tcp/udp ports as names (default)\r\n=============== ============ =======================================================================\r\n\r\nReturn\r\n    List of newly generated ACE lines\r\n\r\n**Examples**\r\n\r\n`./examples/functions_range_ports.py`_\r\n\r\n\r\nrange_protocols()\r\n-----------------\r\n**cisco_acl.range_protocols(protocols, line, platform, protocol_nr)**\r\nGenerates ACEs in required range of IP protocols\r\n\r\n=============== ============ =======================================================================\r\nParameter       Type         Description\r\n=============== ============ =======================================================================\r\nprotocols       *str*        Range of IP protocols\r\nline            *str*        ACE pattern, on whose basis new ACEs will be generated (default \"permit ip any any\")\r\nplatform        *str*        Platform: \"ios\" (default), \"nxos\"\r\nprotocol_nr     *bool*       Well-known ip protocols as numbers, True  - all ip protocols as numbers, False - well-known ip protocols as names (default)\r\n=============== ============ =======================================================================\r\n\r\nReturn\r\n    List of newly generated ACE lines\r\n\r\n**Examples**\r\n\r\n`./examples/functions_range_protocols.py`_\r\n\r\n\r\n\r\nObjects\r\n-------\r\nDocumentation of objects for deep-code divers\r\n\r\n`./docs/objects.rst`_\r\n\r\n\r\n\r\n.. _`./examples/functions_acls.py` : ./examples/functions_acls.py\r\n.. _`./examples/functions_aces.py` : ./examples/functions_aces.py\r\n.. _`./examples/examples_addrgroups.py` : ./examples/examples_addrgroups.py\r\n.. _`./examples/functions_range_protocols.py` : ./examples/functions_range_protocols.py\r\n.. _`./examples/functions_range_ports.py` : ./examples/functions_range_ports.py\r\n\r\n.. _`./docs/acl_list_methods.rst` : ./docs/acl_list_methods.rst\r\n.. _`./docs/objects.rst` : ./docs/objects.rst\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "cisco,nexus,acl,ios,nx-os,networking,telecommunication",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cisco-acl",
    "package_url": "https://pypi.org/project/cisco-acl/",
    "platform": null,
    "project_url": "https://pypi.org/project/cisco-acl/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vladimirs-git/cisco-acl/issues",
      "Download URL": "https://github.com/vladimirs-git/cisco-acl/archive/refs/tags/3.0.4.tar.gz",
      "Homepage": "https://github.com/vladimirs-git/cisco-acl",
      "Repository": "https://github.com/vladimirs-git/cisco-acl"
    },
    "release_url": "https://pypi.org/project/cisco-acl/3.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python package to parse and manage Cisco ACL (Access Control List)",
    "version": "3.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15623075,
  "releases": {
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "617cc4f6135fcdb05332981945878b632bdcb0ba6754100bf29e91a5df8c8020",
          "md5": "094327005fc01d694c0a771d3eb7ab35",
          "sha256": "d5d99a20e555649b948f123903de0fa793c63ffce6d9e040d3148b5058681c8e"
        },
        "downloads": -1,
        "filename": "cisco_acl-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "094327005fc01d694c0a771d3eb7ab35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 48829,
        "upload_time": "2022-09-08T14:10:06",
        "upload_time_iso_8601": "2022-09-08T14:10:06.903057Z",
        "url": "https://files.pythonhosted.org/packages/61/7c/c4f6135fcdb05332981945878b632bdcb0ba6754100bf29e91a5df8c8020/cisco_acl-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ea8169b11bcaf15ebbcb7b618772a9ff409fcecc6ac718868556f23a8acccc9",
          "md5": "0f12b5946edc3c8ed765da730bc1d74e",
          "sha256": "a54278cbadf87581b36d29671b9bbee1472b7c09765422163a97b2a5f4289e52"
        },
        "downloads": -1,
        "filename": "cisco_acl-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f12b5946edc3c8ed765da730bc1d74e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 49740,
        "upload_time": "2022-10-25T10:41:16",
        "upload_time_iso_8601": "2022-10-25T10:41:16.043571Z",
        "url": "https://files.pythonhosted.org/packages/2e/a8/169b11bcaf15ebbcb7b618772a9ff409fcecc6ac718868556f23a8acccc9/cisco_acl-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8541afd6d31c9b93b7ffd76bded1f34a24ac52dd6d3cbb39931bdba74f09a91d",
          "md5": "ace9a944c8602b5ff6cc4e1af3912adc",
          "sha256": "22a29609a842f7a3cdc16203e4507774336105a6f7678b0f17279e192dcd0ad5"
        },
        "downloads": -1,
        "filename": "cisco_acl-3.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ace9a944c8602b5ff6cc4e1af3912adc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45857,
        "upload_time": "2022-11-02T07:03:41",
        "upload_time_iso_8601": "2022-11-02T07:03:41.884992Z",
        "url": "https://files.pythonhosted.org/packages/85/41/afd6d31c9b93b7ffd76bded1f34a24ac52dd6d3cbb39931bdba74f09a91d/cisco_acl-3.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8541afd6d31c9b93b7ffd76bded1f34a24ac52dd6d3cbb39931bdba74f09a91d",
        "md5": "ace9a944c8602b5ff6cc4e1af3912adc",
        "sha256": "22a29609a842f7a3cdc16203e4507774336105a6f7678b0f17279e192dcd0ad5"
      },
      "downloads": -1,
      "filename": "cisco_acl-3.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ace9a944c8602b5ff6cc4e1af3912adc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 45857,
      "upload_time": "2022-11-02T07:03:41",
      "upload_time_iso_8601": "2022-11-02T07:03:41.884992Z",
      "url": "https://files.pythonhosted.org/packages/85/41/afd6d31c9b93b7ffd76bded1f34a24ac52dd6d3cbb39931bdba74f09a91d/cisco_acl-3.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}