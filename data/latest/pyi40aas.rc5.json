{
  "info": {
    "author": "Chair of Process Control Engineering, RWTH Aachen",
    "author_email": "m.thies@plt.rwth-aachen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: Eclipse Public License 2.0 (EPL-2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyI40AAS – Python Industry 4.0 Asset Administration Shell\n\nThe PyI40AAS project aims to provide an implementation of the Asset Administration Shell (AAS) for Industry 4.0 Systems, compliant\nwith the meta model and interface specification provided in\n[the document “Details of the Asset Administration Shell” (v2.0.1)](https://www.plattform-i40.de/PI40/Redaktion/DE/Downloads/Publikation/Details-of-the-Asset-Administration-Shell-Part1.html).\n\n\n## Features\n\n* Modelling of AASs as Python objects (according to DotAAS sec. 4)\n* (De-)serialization of AAS objects into/from JSON and XML (according to DotAAS sec. 5) \n* Reading and writing of AASX package files (according to DotAAS sec. 7)\n* Storing of AAS objects in CouchDB\n* Compliance checking of AAS XML and JSON files\n\n\n### Project Structure\n\nThe PyI40AAS project provides the `aas` Python package with 5 submodules:\n\n* `aas.model`: The AAS metamodel implemented in python\n* `aas.adapter`: Adapters for various file formats and storage backends\n* `aas.compliance_tools`: Compliance checker for AAS files\n* `aas.util`: Provides utilities\n* `aas.examples`: Example data and tutorials\n\n\n## License\n\nThe PyI40AAS project is dual-licensed under the terms of the Eclipse Public License - v 2.0 and the\nApache License Version 2.0. Choose either of the two licenses that better suits your needs.\n\nSPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n\nFor more information, especially considering the licenses of included third-party works, please consult the `NOTICE`\nfile.\n\n\n## Dependencies\n\nPyI40AAS requires the following Python packages to be installed for production usage. These dependencies are listed in\n`setup.py` to be fetched automatically when installing with `pip`:\n* `python-dateutil` (BSD 3-clause License)\n* `lxml` (BSD 3-clause License, using `libxml2` under MIT License)\n* `urllib3` (MIT License)\n* `pyecma376-2` (Apache License v2.0)\n\nOptional production usage dependencies:\n* For using the Compliance Tool to validate JSON files against the JSON Schema: `jsonschema` and its\ndependencies (MIT License, Apache License, PSF License)\n\nDevelopment/testing/example dependencies (see `requirements.txt`):\n* `jsonschema` and its dependencies (MIT License, Apache License, PSF License)\n* `psutil` (BSD 3-clause License)\n\n\n## Getting Started\n\n### Installation\n\nFor production usage and building applications with PyI40AAS, we recommended installation from PyPI:\n\n```python\npip install pyi40aas\n```\n\n\n### Example\n\nThe following code example shows how to create a `Submodel` with a `Property` serialize it into an XML file using PyI40AAS:\n\nCreate a `Submodel`:\n```python\nfrom aas import model  # Import all PYI40AAS classes from the model package\n\nidentifier = model.Identifier('https://acplt.org/Simple_Submodel', model.IdentifierType.IRI)\nsubmodel = model.Submodel(identification=identifier)\n```\n\nCreate a `Property` and add it to the `Submodel`:\n```python\n# create a global reference to a semantic description of the property\nsemantic_reference = model.Reference(\n    (model.Key(\n        type_=model.KeyElements.GLOBAL_REFERENCE,\n        local=False,\n        value='http://acplt.org/Properties/SimpleProperty',\n        id_type=model.KeyType.IRI\n    ),)\n)\nproperty = model.Property(\n    id_short='ExampleProperty',  # Identifying string of the element within the submodel namespace\n    value_type=model.datatypes.String,  # Data type of the value\n    value='exampleValue',  # Value of the property\n    semantic_id=semantic_reference  # set the semantic reference\n)\nsubmodel.submodel_element.add(property)\n```\n\nSerialize the `Submodel` to XML:\n```python\nfrom aas.adapter.xml import write_aas_xml_file\n\ndata: model.DictObjectStore[model.Identifiable] = model.DictObjectStore()\ndata.add(submodel)\nwith open('Simple_Submodel.xml', 'w', encoding='utf-8') as f:\n    write_aas_xml_file(file=f, data=data)\n```\n\n\n### Examples and Tutorials\n\nFor further examples and tutorials, check out the `aas.examples`-package. Here is a quick overview:\n\n* `aas.examples.tutorial_create_simple_aas`: Creating an Asset Administration Shell with all required objects via Python\n  code\n* `aas.examples.tutorial_storage`: Manage a larger number of Asset Administration Shells in an ObjectStore and resolve\n  references\n* `aas.examples.tutorial_serialization_deserialization`: Export or import AAS objects to/from JSON and XML documents\n* `aas.examples.tutorial_aasx`: Export or import AAS objects with auxiliary files to/from AASX package files\n* `aas.examples.tutorial_backend_couchdb`: Store, manage and update AAS objects in a CouchDB database\n\n\n### Compliance Tool\n\nThe PyI40AAS project contains a compliance tool for testing xml and json files is provided in the \n`aas.compliance_tool`-package. Following functionalities are supported:\n\n* create an xml or json file compliant to the official schema containing example Asset Administration Shell elements\n* create an aasx file with xml or json files compliant to the official schema containing example Asset Administration \nShell elements\n* check if a given xml or json file is compliant to the official schema\n* check if a given xml, json or aasx file is readable even if it is not compliant to the offical schema\n* check if the data in a given xml, json or aasx file is the same as the example data\n* check if two given xml, json or aasx files contain the same Asset Administration Shell elements in any order \n\nInvoking should work with either `python -m aas.compliance_tool.cli` or (when installed correctly and PATH is set \ncorrectly) with `aas_compliance_check` on the command line.\n\nFor further usage information consider the `aas.compliance_tool`-package or invoke with \n`python -m aas.compliance_tool.cli --help` respectively `aas_compliance_check --help`.\n\n## Contributing\n\nIf you plan contributing code to the PyI40AAS project, please get in touch with us via E-Mail first: m.thies@plt.rwth-aachen.de\n\n\n### Codestyle and Testing\n\nOur code follows the [PEP 8 -- Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/).\nAdditionally, we use [PEP 484 -- Type Hints](https://www.python.org/dev/peps/pep-0484/) throughout the code to enable type checking the code.\n\nBefore submitting any changes, make sure to let `mypy` and `pycodestyle` check your code and run the unit tests with\nPython's builtin `unittest`. To install the required tools, use:\n```bash\npip install mypy pycodestyle\n```\n\nRunning all checks:\n```bash\nmypy aas test\npycodestyle --max-line-length 120 aas test\npython -m unittest\n```\n\nWe aim to cover our code with test by at least 80%. To check test coverage, you can use `coverage`:\n\n```bash\npip install coverage\ncoverage run --source aas --branch -m unittest\ncoverage report -m\n```\n\n\n### Contribute Code/Patches\n\nTBD",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.rwth-aachen.de/acplt/pyi40aas",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyi40aas",
    "package_url": "https://pypi.org/project/pyi40aas/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyi40aas/",
    "project_urls": {
      "Homepage": "https://git.rwth-aachen.de/acplt/pyi40aas"
    },
    "release_url": "https://pypi.org/project/pyi40aas/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An implementation of the Asset Administration Shell for Industry 4.0 systems",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13768680,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9385a303dbd8314dd70a74e170ad00ef787fdb109113c87b735808952bca5eae",
          "md5": "fd1a2a9b34b1c7755e6c6efbbf4f441f",
          "sha256": "5936be1771729b1f6bfd4cffac6a45e90034473c65703cb930d7fbaf4a3a9669"
        },
        "downloads": -1,
        "filename": "pyi40aas-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd1a2a9b34b1c7755e6c6efbbf4f441f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1258,
        "upload_time": "2020-03-11T11:39:10",
        "upload_time_iso_8601": "2020-03-11T11:39:10.458990Z",
        "url": "https://files.pythonhosted.org/packages/93/85/a303dbd8314dd70a74e170ad00ef787fdb109113c87b735808952bca5eae/pyi40aas-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce74436d386c1007fac94d5ca382f252629db528e974cdb299d10c212dde0261",
          "md5": "6d78a71560bc5e56a24b69fac6c8bb12",
          "sha256": "cbfa37517660c0318c959f1151db31376aaeba44a329b1e60a25e49c6cc510d9"
        },
        "downloads": -1,
        "filename": "pyi40aas-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d78a71560bc5e56a24b69fac6c8bb12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 111159,
        "upload_time": "2020-05-28T12:35:56",
        "upload_time_iso_8601": "2020-05-28T12:35:56.484637Z",
        "url": "https://files.pythonhosted.org/packages/ce/74/436d386c1007fac94d5ca382f252629db528e974cdb299d10c212dde0261/pyi40aas-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e41be88e8a4ceec7947af6203d11a7a4ae459343c17d0a510bc014e620ff75",
          "md5": "5ff3fe4814319266108cde23b546f420",
          "sha256": "17fc8447cf2c567d6ad7aeb9f9b6770f563beb0ea173fcf0127fc2c992b9197e"
        },
        "downloads": -1,
        "filename": "pyi40aas-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ff3fe4814319266108cde23b546f420",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 130852,
        "upload_time": "2020-11-10T10:48:40",
        "upload_time_iso_8601": "2020-11-10T10:48:40.914778Z",
        "url": "https://files.pythonhosted.org/packages/a2/e4/1be88e8a4ceec7947af6203d11a7a4ae459343c17d0a510bc014e620ff75/pyi40aas-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b32f7c535f9367454676e7642042ea1af49568c087cdccb242e840d5a84cd86",
          "md5": "343139f8a6bc625d428612250b99498e",
          "sha256": "dee6bb419d9fad7e112f36640cab0261e1f59a07962104713a864ff7656c13bf"
        },
        "downloads": -1,
        "filename": "pyi40aas-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "343139f8a6bc625d428612250b99498e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 132960,
        "upload_time": "2021-02-02T08:29:00",
        "upload_time_iso_8601": "2021-02-02T08:29:00.354455Z",
        "url": "https://files.pythonhosted.org/packages/4b/32/f7c535f9367454676e7642042ea1af49568c087cdccb242e840d5a84cd86/pyi40aas-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "849737baa062276495918f373e88577b8408829742fa169c66d13a21ee341ab0",
          "md5": "5b7d0faa63ce9accbd2f6c6be8a0f3cb",
          "sha256": "8cc10301f9f0d6e325ae8b3e2adedeb7b56a3b99a04ef9a4e9ac274cc54b9cbf"
        },
        "downloads": -1,
        "filename": "pyi40aas-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b7d0faa63ce9accbd2f6c6be8a0f3cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 133907,
        "upload_time": "2021-02-15T16:38:40",
        "upload_time_iso_8601": "2021-02-15T16:38:40.156645Z",
        "url": "https://files.pythonhosted.org/packages/84/97/37baa062276495918f373e88577b8408829742fa169c66d13a21ee341ab0/pyi40aas-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "849737baa062276495918f373e88577b8408829742fa169c66d13a21ee341ab0",
        "md5": "5b7d0faa63ce9accbd2f6c6be8a0f3cb",
        "sha256": "8cc10301f9f0d6e325ae8b3e2adedeb7b56a3b99a04ef9a4e9ac274cc54b9cbf"
      },
      "downloads": -1,
      "filename": "pyi40aas-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5b7d0faa63ce9accbd2f6c6be8a0f3cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 133907,
      "upload_time": "2021-02-15T16:38:40",
      "upload_time_iso_8601": "2021-02-15T16:38:40.156645Z",
      "url": "https://files.pythonhosted.org/packages/84/97/37baa062276495918f373e88577b8408829742fa169c66d13a21ee341ab0/pyi40aas-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}