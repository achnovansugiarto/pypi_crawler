{
  "info": {
    "author": "",
    "author_email": "Leonardo Corona Garza <leocoronag@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# spotifyatlas\n\n### A pythonic wrapper for the Spotify web API.\n\nBy Leonardo - UmActually\n\n`spotifyatlas` is a straightforward library meant to simplify the process of interacting with **Spotify's web API**. Whether you are trying to programmatically access Spotify features like **search queries**, or automate user tasks like **modifying your playlists**, spotifyatlas has tools for the job. All in a clean, object-oriented style.\n\nMost of the package's functionality is included in the ``SpotifyAPI`` class, which only needs to be initialized with the **credentials** of your client application. This codebase was originally used to retrieve track details for **[Discord bots](https://github.com/UmActually/Papanatas)**, so most of the functions, as of now, revolve around playlists, albums, top tracks of artists, and whatnot.\n\n## Basic Usage\n\n_Refer to the [Installation](#installation) section for information on how to install the package with `pip`._\n\nThe first step to interact with the Spotify API is to register a new **application** in the **[Spotify for Developers](https://developer.spotify.com/dashboard/)** page. Worry not: this process is completely free for any Spotify user (with an account).\n\n### Quick Start\n\nWith that out of the way, go ahead and initialize a new `SpotifyAPI` object with the credentials of your app (client ID and client secret):\n\n```python\nfrom spotifyatlas import SpotifyAPI\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n```\n\nIf you wish to retrieve the **tracks and/or details** of anything in Spotify, the universal `get()` method many times will get you covered.\n\nTry it by pasting the share link of your favorite playlist. It will return a `Playlist` object. the playlist tracks are located in the `tracks` attribute, and you can also access tracks **by index**, as shown below.\n\n```python\nfrom spotifyatlas import SpotifyAPI\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\nplaylist = spoti.get('https://open.spotify.com/playlist/6xTnvRqIKptVfgcT8gN4Bb')\n\nprint(playlist.tracks)\n# [<Track name='Goliath' artist='The Mars Volta' id='3bi3Ycf0ZlRHvSg0IxlMwM'>, ... ]\n\nfirst_track = playlist[0]  # the same as playlist.tracks[0]  \nprint(first_track)\n# Goliath - The Mars Volta\n```\n\nA `Track` contains the `name`, `artist`, `album` and `id` of a song. And, as you saw above, `print(track)` will format a track as `'<name> - <artist>'`. You can neatly list the contents of your playlist like this:\n\n```python\nfor i, track in enumerate(playlist, 1):\n    print(i, '-', track)\n# 1 - Goliath - The Mars Volta\n# 2 - Juicy - 2005 Remaster - The Notorious B.I.G.\n# 3 - O Peso da Cruz - Supercombo\n# 4 - Count The People (feat. Jessie Reyez & T-Pain) - Jacob Collier\n# 5 - Touch - Shura\n# ...\n```\n\nSimilar to `Playlist` and `Track`, you can also find `Album`, `Artist` and `User` structures. *Every one of these is connected to each other* by **attributes**. For example, `track.artist.image_url` will return the image url of the artist of a track, and so will `track.album.tracks[0].artist.image_url`. I confidently assume you won't do it the second way. The increased amount of API requests will take its toll on performance.\n\n### Getting\n\nThe following methods offer the same functionality as `get()`, although with a *specific return value*:\n\n- `get_playlist()` for public playlists.\n\n- `get_track()` for tracks.\n\n- `get_artist()` for artists and their top 10 tracks.\n\n- `get_album()` for albums.\n\n- `get_user()` for users.\n\nThey all require the `url` or the ID of the element as the first argument.\n\n### Searching\n\nNot everything demands you having the link of the item at hand. To perform **searches**, you can use the following methods:\n\n- `search()` to search normally, with the option to specify result types.\n\n```python\nresult = spoti.search('susanne sundfor')\ntop_artist_result = result.artists[0]\nprint(top_artist_result.name)\n# Susanne Sundf√∏r\n\nresult = spoti.search('ok human')\ntop_album_result = result.albums[0]\nprint(top_album_result.tracks)\n# [<Track name='All My Favorite Songs' artist='Weezer' id='6zVhXpiYbJhLJWmLGV9k1r'>, ... ]\n```\n\n- `im_feeling_lucky()` if you know in advance exactly what you are looking for. It is essentially the same as `search()` but returns directly the top result of the specified type.\n\n```python\nfrom spotifyatlas import ResultType\nresult = spoti.im_feeling_lucky('quevedo biza', ResultType.TRACK)\nprint(result)\n# Quevedo: Bzrp Music Sessions, Vol. 52 - Bizarrap\n```\n\n- The standalone function `spotifyatlas.advanced_search()` can generate a more [powerful search query](https://support.spotify.com/us/article/search/) that the user can then pass to either of the search methods (or even paste to their actual Spotify client).\n\n```python\nfrom spotifyatlas import ResultType, Genre, advanced_search\n\noverkill_query = advanced_search(\n    'juanes',\n    album='metallica',\n    year=2021,\n    genre=Genre.ROCK\n)\n\nresult = spoti.im_feeling_lucky(overkill_query, ResultType.TRACK)\nprint(result)\n# Enter Sandman - Juanes\n```\n\n### User Functionality\n\nThese other methods require **user consent**, and thus will result in the **browser** opening for the authorization of your application to act on behalf of the user:\n\n- `get_me()` for details of your own profile.\n\n- `get_private_playlist()` for private playlists you own.\n\n- `create_playlist()` to make a new empty playlist in your library.\n\n- `add_to_playlist()` to add a batch of `Track`s to a playlist.\n\n- `duplicate_playlist()` to duplicate a playlist in your library.\n\n- `clear_playlist()` to remove all the contents of a playlist.\n\n- `rearrange_playlist()` to change the position of a range of tracks.\n\nThe last five functions are also available as **methods** of the `Playlist` class. This enables some handy shortcuts like the ones seen in [More Examples](#more-examples).\n\n> Note: authorizing the application in the Spotify authorization page requires a **redirection** page to go to. This library will temporarily **host a local page** on http://localhost:8000 whenever needed. Thus, you **will need to add this URL** to the allowed redirection URLs on the dashboard of your application in the **[Spotify for Developers](https://developer.spotify.com/dashboard/)** site.\n\nThe complete list of parameters/arguments of a function can be found in its documentation.\n\n---\n\n## Installation\n\nTo install spotifyatlas, use **pip** in the terminal:\n\n**Windows**\n```commandline\npip install spotifyatlas\n```\n\n**macOS / Linux**\n```commandline\npython3 -m pip install spotifyatlas\n```\n\n---\n\n## More Examples\n\nFor the inquisitive user, here are some more code examples out the top of my head:\n\n### 1. Rearrange the tracks of a playlist by artist, alphabetically\n\n```python\nfrom spotifyatlas import SpotifyAPI\n\n\ndef artist_sort_key(track):  \n    return track.artist.name.lower()  \n    # If you want to hierarchically sort by artist, AND album,  \n    # AND track, use this:\n    # return (\n    #     track.artist.name.lower(),\n    #     track.album.name.lower(),\n    #     track.name.lower())\n\n\nMY_PLAYLIST = '<my-playlist-link>'\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n\nplaylist = spoti.get_playlist(MY_PLAYLIST)  \ntracks = playlist.tracks  \ntracks.sort(key=artist_sort_key)  \n  \n# make_copy makes a backup of the playlist in your library  \n# before removing its contents.  \nplaylist.clear(make_copy=True)  \nplaylist.add(tracks)\n```\n\n### 2. Find the songs that two playlists have in common, and create a playlist with them\n\n```python\nfrom spotifyatlas import SpotifyAPI\n\nMY_PLAYLIST = '<my-playlist-link>'\nMY_FRIENDS_PLAYLIST = '<my-friends-playlist-link>'\n\nspoti = SpotifyAPI('<my-client-id>', '<my-client-secret>')\n\nplaylist1 = spoti.get(MY_PLAYLIST)\nplaylist2 = spoti.get(MY_FRIENDS_PLAYLIST)\n\n# Set theory!!!  \ncommon_tracks = set(playlist1).intersection(set(playlist2))  \nfor i, track in enumerate(common_tracks, 1):  \n    print(i, '-', track)  \n  \nblend = spoti.create_playlist(  \n    name=f'{playlist1.owner.name} + {playlist2.owner.name}',  \n    description='I am a blend, I swear')  \n\nblend.add(list(common_tracks))\n```\n\n---\n\n## Who Is This Package For\n\nI've created `spotifyatlas` to encourage music lovers and programmers alike, to draw on the elegance of Python automation and **scripting**. If you stumbled upon this package while looking for a way to **extend the user capabilities** in Spotify beyond the user interface, then you are in the right place.\n\nIf instead you are looking for an API wrapper for use in a Python **web application**, maybe this package is not the right choice. For starters, the library's functionality is **not asynchronous** (not yet, at least). Perhaps this is okay for a couple of simple tasks, though. And also, as of now, the way I implemented authorization flow is not compatible with a web app (it literally opens a localhost page). This means it would only work with functions that do not require user auth.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "spotify,api,wrapper,web,requests",
    "license": "Copyright (c) 2023 Leonardo Corona Garza  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spotifyatlas",
    "package_url": "https://pypi.org/project/spotifyatlas/",
    "platform": null,
    "project_url": "https://pypi.org/project/spotifyatlas/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/spotifyatlas/1.0.0/",
    "requires_dist": [
      "requests (>=2.25.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "A pythonic wrapper for the Spotify web API.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16542474,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec4e1cefcfc053e75ceecb7d04a572861cd5f9762ffbe577c34cbbc455f06063",
          "md5": "583a01a3c8d11ff059403f8b4dd34f67",
          "sha256": "bfab9b489612a0ec9e23dbd6b099f4eff87db414c347e329a5ca367a24f2415b"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "583a01a3c8d11ff059403f8b4dd34f67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14371,
        "upload_time": "2022-12-26T17:15:57",
        "upload_time_iso_8601": "2022-12-26T17:15:57.945889Z",
        "url": "https://files.pythonhosted.org/packages/ec/4e/1cefcfc053e75ceecb7d04a572861cd5f9762ffbe577c34cbbc455f06063/spotifyatlas-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5dfa07de66090b08d2ee316a24f6b485ebb332875a768cca5a890075972973d",
          "md5": "a0c406715493f5c6551c6f6ff8c4530a",
          "sha256": "ec5c5112afcf7cec0814e9325ff9636ec977a294adeae37895b2bf1e6ea18907"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0c406715493f5c6551c6f6ff8c4530a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13952,
        "upload_time": "2022-12-26T17:15:59",
        "upload_time_iso_8601": "2022-12-26T17:15:59.742199Z",
        "url": "https://files.pythonhosted.org/packages/e5/df/a07de66090b08d2ee316a24f6b485ebb332875a768cca5a890075972973d/spotifyatlas-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc5b1cf85df4fab3a5fe93abeaf6b7987ea112abbb4596783c3bc7e79f841905",
          "md5": "9b865bee8f1abbf1b4e026f33faf5491",
          "sha256": "8209b9f5907edffeed3bbfc91b44d27e3c256adf618e02bde13b04b6292c37f7"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b865bee8f1abbf1b4e026f33faf5491",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15031,
        "upload_time": "2023-01-15T20:32:43",
        "upload_time_iso_8601": "2023-01-15T20:32:43.910522Z",
        "url": "https://files.pythonhosted.org/packages/bc/5b/1cf85df4fab3a5fe93abeaf6b7987ea112abbb4596783c3bc7e79f841905/spotifyatlas-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b8665aca11b9f25d43b95b1a93675c510d4376f001cf43e070011ac5fd9f112",
          "md5": "6f1710571f98d225d5b4d6f25c328ead",
          "sha256": "a20d81368c4af825649a57fec07815ef6f68e50ed73361560d230db0969ec482"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f1710571f98d225d5b4d6f25c328ead",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14748,
        "upload_time": "2023-01-15T20:32:45",
        "upload_time_iso_8601": "2023-01-15T20:32:45.999488Z",
        "url": "https://files.pythonhosted.org/packages/5b/86/65aca11b9f25d43b95b1a93675c510d4376f001cf43e070011ac5fd9f112/spotifyatlas-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "538fb4c4a892baef3090896915cbb0e8e6d52b387b5691ce03b8e9aced3de0cb",
          "md5": "f605d9074d55b2ed8a7b4c5b806c68c8",
          "sha256": "0adf998ac940fd23c014e6b9ca41f5181fc2ccf3c695b2f51d3566fea4e8c7cb"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f605d9074d55b2ed8a7b4c5b806c68c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20968,
        "upload_time": "2023-01-17T09:16:24",
        "upload_time_iso_8601": "2023-01-17T09:16:24.134899Z",
        "url": "https://files.pythonhosted.org/packages/53/8f/b4c4a892baef3090896915cbb0e8e6d52b387b5691ce03b8e9aced3de0cb/spotifyatlas-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a79e72a61b3db135e5e20435551d00b714caee33a737cd14334f25a14afc59",
          "md5": "534f5b91dbef74470b0d62dd4fb4b13b",
          "sha256": "52ac75540b85ff12187b50b5dc1fb813663e52420c0eef07bad51dbab7422673"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "534f5b91dbef74470b0d62dd4fb4b13b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20704,
        "upload_time": "2023-01-17T09:16:27",
        "upload_time_iso_8601": "2023-01-17T09:16:27.117545Z",
        "url": "https://files.pythonhosted.org/packages/a5/a7/9e72a61b3db135e5e20435551d00b714caee33a737cd14334f25a14afc59/spotifyatlas-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b7a55579d06c62f1f3bad024419891eefe7cfed11cfcb43b5a84dbdd990115",
          "md5": "0edabd4261bdb3940cad18563b34e061",
          "sha256": "8ca5bb64f173c9cea04a83c2798c8b091f11786962727265793bdbfeb3d4940b"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0edabd4261bdb3940cad18563b34e061",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21606,
        "upload_time": "2023-01-18T00:01:45",
        "upload_time_iso_8601": "2023-01-18T00:01:45.607871Z",
        "url": "https://files.pythonhosted.org/packages/24/b7/a55579d06c62f1f3bad024419891eefe7cfed11cfcb43b5a84dbdd990115/spotifyatlas-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5ad029d9392459e8d98d868884ada41932ceddbb31c8c4d43beec6daa3f2b32",
          "md5": "55521fef489823641621264e4114ce53",
          "sha256": "e811c7aff8b7e01c0bdc3ff21979ffe2a761a0d2b64a2563d5a6f3108727d3bc"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "55521fef489823641621264e4114ce53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21385,
        "upload_time": "2023-01-18T00:01:48",
        "upload_time_iso_8601": "2023-01-18T00:01:48.884958Z",
        "url": "https://files.pythonhosted.org/packages/d5/ad/029d9392459e8d98d868884ada41932ceddbb31c8c4d43beec6daa3f2b32/spotifyatlas-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b6e6a5b3eef7b9a6ce937ba0a1a8bb75f4599820e3e48f8c9706354ff47217c",
          "md5": "062769c432d478a684f6270e7150907b",
          "sha256": "45042279549a6a461267a42a78c11f3b275f267a0a17f4d4034c57cd76bdd54a"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "062769c432d478a684f6270e7150907b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21624,
        "upload_time": "2023-01-18T08:33:43",
        "upload_time_iso_8601": "2023-01-18T08:33:43.931288Z",
        "url": "https://files.pythonhosted.org/packages/8b/6e/6a5b3eef7b9a6ce937ba0a1a8bb75f4599820e3e48f8c9706354ff47217c/spotifyatlas-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ec0a6fa80e8774daad52373cd1fa90dd9bfed69fad103116f5c318c8b041ea4",
          "md5": "8f7889bfb65c5f0a30138cfaaad26f7e",
          "sha256": "e7e159cc540fae898c43c9399881e758420b8c67132020ddd554757359e32a9e"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f7889bfb65c5f0a30138cfaaad26f7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21400,
        "upload_time": "2023-01-18T08:33:48",
        "upload_time_iso_8601": "2023-01-18T08:33:48.183506Z",
        "url": "https://files.pythonhosted.org/packages/5e/c0/a6fa80e8774daad52373cd1fa90dd9bfed69fad103116f5c318c8b041ea4/spotifyatlas-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e151883aa5b300b55922bf72bca0a34e8d1b18340133828217e02dd7d5b671bc",
          "md5": "e4beedd455848b835de35ddec39b7252",
          "sha256": "ff4e6645f6b5cb230f4c2b4e5ac007cb992e85c64c9aadbda318e4ad8b8716e3"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4beedd455848b835de35ddec39b7252",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21794,
        "upload_time": "2023-01-19T03:51:49",
        "upload_time_iso_8601": "2023-01-19T03:51:49.324987Z",
        "url": "https://files.pythonhosted.org/packages/e1/51/883aa5b300b55922bf72bca0a34e8d1b18340133828217e02dd7d5b671bc/spotifyatlas-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "528a64a01dfb742a57c8cac219bcc8cbe68b0550fb803c89070eb5150c0b99f3",
          "md5": "f0d7e5829e4ace0a2cbe6be48f9f0320",
          "sha256": "1b31b5f1a28a583768a147b777297a706bf81deaf58adad86cd5fb884b3ce36c"
        },
        "downloads": -1,
        "filename": "spotifyatlas-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f0d7e5829e4ace0a2cbe6be48f9f0320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21704,
        "upload_time": "2023-01-19T03:51:54",
        "upload_time_iso_8601": "2023-01-19T03:51:54.715763Z",
        "url": "https://files.pythonhosted.org/packages/52/8a/64a01dfb742a57c8cac219bcc8cbe68b0550fb803c89070eb5150c0b99f3/spotifyatlas-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4e4187f1aca8b0cfabc323540b743adcf3b9d46b972673da52e27e5d5862507",
          "md5": "24b6d6db08fb8b97a3c70b14b4f4aee7",
          "sha256": "4023443f1beb0cef4592b1c6fc0755e64d09568dd7635a3a02a682a1df6205f7"
        },
        "downloads": -1,
        "filename": "spotifyatlas-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24b6d6db08fb8b97a3c70b14b4f4aee7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25145,
        "upload_time": "2023-01-24T06:03:25",
        "upload_time_iso_8601": "2023-01-24T06:03:25.850265Z",
        "url": "https://files.pythonhosted.org/packages/e4/e4/187f1aca8b0cfabc323540b743adcf3b9d46b972673da52e27e5d5862507/spotifyatlas-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eea4941524914857645f433054aed88f62de96e827fd2470460f703ab0f4b459",
          "md5": "81779434bbf5ccd5f7c240dc652cdfa9",
          "sha256": "e5db4dcc7e2f4a65b63fb84fef33ea3544480e43cc62d4fbad79875c0d81368f"
        },
        "downloads": -1,
        "filename": "spotifyatlas-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81779434bbf5ccd5f7c240dc652cdfa9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25897,
        "upload_time": "2023-01-24T06:03:31",
        "upload_time_iso_8601": "2023-01-24T06:03:31.163459Z",
        "url": "https://files.pythonhosted.org/packages/ee/a4/941524914857645f433054aed88f62de96e827fd2470460f703ab0f4b459/spotifyatlas-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4e4187f1aca8b0cfabc323540b743adcf3b9d46b972673da52e27e5d5862507",
        "md5": "24b6d6db08fb8b97a3c70b14b4f4aee7",
        "sha256": "4023443f1beb0cef4592b1c6fc0755e64d09568dd7635a3a02a682a1df6205f7"
      },
      "downloads": -1,
      "filename": "spotifyatlas-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24b6d6db08fb8b97a3c70b14b4f4aee7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25145,
      "upload_time": "2023-01-24T06:03:25",
      "upload_time_iso_8601": "2023-01-24T06:03:25.850265Z",
      "url": "https://files.pythonhosted.org/packages/e4/e4/187f1aca8b0cfabc323540b743adcf3b9d46b972673da52e27e5d5862507/spotifyatlas-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eea4941524914857645f433054aed88f62de96e827fd2470460f703ab0f4b459",
        "md5": "81779434bbf5ccd5f7c240dc652cdfa9",
        "sha256": "e5db4dcc7e2f4a65b63fb84fef33ea3544480e43cc62d4fbad79875c0d81368f"
      },
      "downloads": -1,
      "filename": "spotifyatlas-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "81779434bbf5ccd5f7c240dc652cdfa9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 25897,
      "upload_time": "2023-01-24T06:03:31",
      "upload_time_iso_8601": "2023-01-24T06:03:31.163459Z",
      "url": "https://files.pythonhosted.org/packages/ee/a4/941524914857645f433054aed88f62de96e827fd2470460f703ab0f4b459/spotifyatlas-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}