{
  "info": {
    "author": "Cem Aksoylar",
    "author_email": "caksoylar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# `keymap-drawer`\n\nParse QMK & ZMK keymaps and draw them in vector graphics (SVG) format, with support for visualizing hold-taps and combos that are commonly used with smaller keyboards.\n\nAvailable as a [command-line tool](#command-line-tool-installation) or a [web application](https://caksoylar.github.io/keymap-drawer).\n\n![Example keymap](https://caksoylar.github.io/keymap-drawer/3x5.rot.svg)\n\n## Features\n\n- Draw keymap representations consisting of multiple layers, hold-tap keys and combos\n  - Uses a human-editable YAML format for specifying the keymap\n  - Non-adjacent or 3+ key combos can be visualized by specifying its positioning relative to the keys, with automatically drawn dendrons to keys\n- Bootstrap the YAML representation by automatically parsing QMK or ZMK keymap files\n- Arbitrary physical keyboard layouts (with rotated keys!) supported, along with parametrized ortho layouts\n- Both parsing and drawing are customizable with a config file, see [\"Customization\" section](#customization)\n\nSee examples in [the live web demo](https://caksoylar.github.io/keymap-drawer) for example inputs and outputs.\n\nCompared to to visual editors like [KLE](http://www.keyboard-layout-editor.com/), `keymap-drawer` takes a more programmatic approach.\nIt also decouples the physical keyboard layout from the keymap (i.e., layer and combo definitions) and provides the tooling to bootstrap it quickly from existing firmware configuration.\n\n## Usage\n\n### Try it as a web application\n\nYou can try the keymap parsing and drawing functionalities with a [Streamlit](https://streamlit.io) web application available at https://caksoylar.github.io/keymap-drawer.\nBelow instructions mostly apply for the web interface, where subcommands and option flags are mapped to different widgets in the UX.\n\n### Command-line tool installation\n\nThe recommended way to install `keymap-drawer` is through [pipx](https://pypa.github.io/pipx/), which sets up an isolated environment and installs the application with a single command:\n\n```sh\npipx install keymap-drawer\n```\n\nThis will make the `keymap` command available in your `PATH` to use:\n\n```sh\nkeymap --help\n```\n\nAlternatively, you can `pip install keymap-drawer` in a virtual environment or install into your user install directory with `pip install --user keymap-drawer`.\nSee [the development section](#development) for instructions to install from source.\n\n### Bootstrapping your keymap representation\n\n**`keymap parse`** command helps to parse an existing QMK or ZMK keymap file into the keymap YAML representation the `draw` command uses to generate SVGs.\n`-c`/`--columns` is an optional parameter that specifies the total number of columns in the keymap to better reorganize output layers.\n\n- **QMK**: Only json-format keymaps are supported, which can be exported from [QMK Configurator](https://config.qmk.fm/), converted from `keymap.c` via `qmk c2json`, or from a VIA backup json via `qmk via2json`:\n\n  ```sh\n  qmk c2json ~/qmk_firmware/keyboards/ferris/keymaps/username/keymap.c | keymap parse -c 10 -q - >sweep_keymap.yaml\n  ```\n\n  Due to current limitations of the `keymap.json` format, combos and `#define`'d layer names will not be present in the parsing output.\n  However you can manually specify layer names using the layer names parameter, e.g. `keymap parse --layer-names Base Sym Nav ...`.\n\n- **ZMK**: `.keymap` files are used for parsing. These will be preprocessed similar to the ZMK build system, so `#define`'s and `#include`s will be expanded.\n\n  ```sh\n  keymap parse -c 10 -z ~/zmk-config/config/cradio.keymap >sweep_keymap.yaml\n  ```\n\n  Currently combos, hold-taps (including custom ones), layer names and sticky keys (`&sk`/`&sl`) can be determined via parsing.\n  For layer names, the value of the `label` property will take precedence over the layer's node name if provided.\n\n  > **Warning**\n  >\n  > Parsing rules currently require that your keymap have nodes named `keymap` and `combos` that are nested one level-deep from the root.\n  > (These conditions hold for most keymaps by convention.)\n\nAs an alternative to parsing, you can also check out the [examples](examples/) to find a layout similar to yours to use as a starting point.\n\n### Tweaking the produced keymap representation\n\nWhile the parsing step aims to create a decent starting point, you will likely want to make certain tweaks to the produced keymap representation.\nPlease refer to [the keymap schema specification](KEYMAP_SPEC.md) while making changes:\n\n0. (If starting from a QMK keymap) Add combo definitions using key position indices.\n1. Tweak the display form of parsed keys, e.g., replacing `&bootloader` with `BOOT`. (See [the customization section](#customization) to modify parser's behavior.)\n2. If you have combos between non-adjacent keys or 3+ key positions, add `align` and/or `offset` properties in order to position them better\n3. Add or modify `type` specifiers for certain keys, like `\"ghost\"` for keys optional to the layout\n\nIt might be beneficial to start by `draw`'ing the current representation and iterate over these changes, especially for tweaking combo positioning.\n\n> **Note**\n>\n> If you need to re-parse a firmware file after it was changed, you can provide the previous parse output that you tweaked to the\n> parse command via `keymap parse -b old_keymap.yaml ... >new_keymap.yaml` and the tool will try to preserve your manual tweaks.\n\n### Producing the SVG\n\nFinal step is to produce the SVG representation using the **`keymap draw`** command.\nHowever to do that, we need to specify the physical layout of the keyboard, i.e., how many keys there are, where each key is positioned etc.\n\nIf you produced your keymap YAML through `keymap parse`, it will have tried to guess the proper layout in the `layout` field of your keymap.\nIf you like you can tweak the field value according to the [spec](KEYMAP_SPEC.md#layout), then finally call the draw command:\n\n```sh\nkeymap draw sweep_keymap.yaml >sweep_keymap.ortho.svg\n```\n\nAnd you are done! You can render the SVG on your browser or use a tool like [CairoSVG](https://cairosvg.org/) or [Inkscape](https://inkscape.org/) to export to a different format.\n\n> **Note**\n>\n> If you like you can override the layout specification on the command line.\n> For instance you can provide a QMK keyboard name with `-q`/`--qmk-keyboard` and layout with `-l`/`--qmk-layout`,\n> or an ortho layout with `-o`/`--ortho-layout` (using YAML syntax for the value). See `keymap draw --help` for details.\n\n## Customization\n\nBoth parsing and drawing can be customized using a configuration file passed to the `keymap` executable.\nThis allows you to, for instance, change the default keycode-to-symbol mappings while parsing, or change font sizes, colors etc. while drawing the SVG.\n\nStart by dumping the default configuration settings to a file:\n\n```sh\nkeymap dump-config >my_config.yaml\n```\n\nThen, edit the file to change the settings, referring to comments in [config.py](keymap_drawer/config.py).\nYou can then pass this file to either `draw` and `parse` subcommands with the `-c`/`--config` argument (note the location before the subcommand):\n\n```sh\nkeymap -c my_config.yaml parse [...] >my_keymap.yaml\nkeymap -c my_config.yaml draw [...] my_keymap.yaml >my_keymap.svg\n```\n\nSince configuration classes are [Pydantic settings](https://docs.pydantic.dev/usage/settings/) they can also be overridden by environment variables with a `KEYMAP_` prefix:\n\n```sh\nKEYMAP_raw_binding_map='{\"&bootloader\": \"BOOT\"}' keymap parse -z zmk-config/config/cradio.keymap >cradio.yaml\n```\n\nDrawing parameters that are specified in the `draw_config` field can also be overridden in [the keymap YAML](KEYMAP_SPEC.md#draw_config).\n\n## Development\n\nThis project requires Python 3.10+ and uses [Poetry](https://python-poetry.org/) for packaging.\n\nTo get started, [install Poetry](https://python-poetry.org/docs/#installation), clone this repo, then install dependencies with the `poetry` command:\n\n```sh\ngit clone https://github.com/caksoylar/keymap-drawer.git\ncd keymap-drawer\npoetry install  # --with dev,lsp,streamlit optional dependencies\n```\n\n`poetry shell` will activate a virtual environment with the `keymap_drawer` module in Python path and `keymap` executable available.\nChanges you make in the source code will be reflected when using the module or the command.\n\nIf you prefer not to use Poetry, you can get an editable install with `pip install --editable .` inside the `keymap-drawer` folder.\n\n## Related projects\n\n- [@nickcoutsos's ZMK keymap editor](https://github.com/nickcoutsos/keymap-editor)\n- [The original `keymap`](https://github.com/callum-oakley/keymap/)\n- [@jbarr21's keymap parser](https://github.com/jbarr21/keymap-display)\n- [@leiserfg's ZMK parser](https://github.com/leiserfg/zmk-config/tree/master/parser)\n- [Keymapviz](https://github.com/yskoht/keymapviz)\n\n# Keymap YAML specification\n\nThis page documents the YAML-format keymap representation that is output by `keymap parse` and used by `keymap draw`.\n\nAt the root, three key values are expected, which are detailed in respective sections. A typical keymap will have the following structure:\n\n```yaml\nlayout:      # physical layout specs, optional\n  ...\nlayers:      # ordered mapping of layer name to contents\n  layer_1:   # list of (lists of) key specs\n    - [Q, W, ...]\n    ...\n  layer_2:\n    ...\ncombos:      # list of combo specs, optional\n  - ...\ndraw_config: # config overrides for drawing, optional\n  - ...\n```\n\n## `layout`\n\nThis field provides information about the physical layout of the keyboard, i.e., the location and sizes of individual keys.\n`keymap-drawer` understands two types of physical layout descriptions:\n\n1. **QMK `info.json` `layout` specification**:\n   This is the [official QMK format](https://docs.qmk.fm/#/reference_info_json?id=layout-format) for physical key descriptions\n   that every `info.json` file in the QMK firmware repository uses. `keymap-drawer` only uses the `x`, `y`, `r`, `rx` and `ry` fields.\n   Note that `keymap-editor` utilizes [the same format](https://github.com/nickcoutsos/keymap-editor/wiki/Defining-keyboard-layouts) for `info.json`.\n\n   QMK spec also lets you specify multiple \"layouts\" per keyboard corresponding to different layout macros to support physical variations.\n\n   You can also create your own physical layout definitions in QMK format to use with `keymap-drawer`, which accepts JSONs with the official schema that\n   has layouts listed under the `layout` key, or one that directly consists of a list of key specs as a shortcut. A few options to generate it are:\n\n   - Using the interactive [Keymap Layout Helper](https://nickcoutsos.github.io/keymap-layout-tools/) by @nickcoutsos[^1]\n   - Using a [KLE-to-QMK converter](https://qmk.fm/converter/) (which doesn't support key rotation unlike the other two options)\n   - [This handy script by @crides](https://gist.github.com/crides/6d12d1033368e24873b0142941311e5d)\n     that can auto-generate a `keymap-drawer`-compatible `info.json` definition directly from KiCad PCB files\n\n2. **Parametrized ortholinear layouts**:\n   This lets you specify parameters to automatically generate a split or non-split ortholinear layout.\n\n[^1]:\n    Note that the behavior of the layout helper and `keymap-drawer` differs for rotated keys when omitting `rx`, `ry` parameters --\n    `keymap-drawer` assumes rotation around the key center and layout helper assumes rotation around the top left of the key.\n    For this reason I'd recommend explicitly specifying `rx`, `ry` fields if `r` is specified.\n\nFollowing physical layout parameters can be specified either in the command line or under this field definition as key-value pairs:\n\n- **`qmk_keyboard`** (equivalent to `-k`/`--qmk-keyboard` on the command line):\n  Specifies the keyboard name to use with QMK `info.json` format layout definition, retrieved from following sources in order of preference:\n  - `<keyboard>.json` (with `/`'s in `<keyboard>` replaced by `@`) under [`resources/qmk_layouts`](/resources/qmk_layouts/), if it exists\n  - [QMK keyboard metadata API](https://docs.qmk.fm/#/configurator_architecture?id=keyboard-metadata) that [QMK Configurator](https://config.qmk.fm) also uses\n- **`qmk_info_json`** (equivalent to `-j`/`--qmk-info-json` on the command line):\n  Specifies the path to a local QMK format `info.json` file to use\n- **`qmk_layout`** (equivalent to `-l`/`--qmk-layout` on the command line):\n  Specifies the layout macro to be used for the QMK keyboard, defaults to first one specified if not used --\n  should be used alongside one of the above two options\n- **`ortho_layout`** (equivalent to `-o`/`--ortho-layout` on the command line):\n  Specifies a mapping of parameters to values to generate an ortholinear physical layout, with schema:\n\n  | field name   | type                     | default value | description                                                                                              |\n  | ------------ | ------------------------ | ------------- | -------------------------------------------------------------------------------------------------------- |\n  | `split`      | `bool`                   | `False`       | whether the layout is a split keyboard or not, affects a few other options below                         |\n  | `rows`       | `int`                    | required      | how many rows are in the keyboard, excluding the thumb row if split                                      |\n  | `columns`    | `int`                    | required      | how many columns are in the keyboard, only applies to one half if split                                  |\n  | `thumbs`     | `int \\| \"MIT\" \\| \"2x2u\"` | `0`           | the number thumb keys per half if split; for non-splits can only take special values `MIT` or `2x2u`[^2] |\n  | `drop_pinky` | `bool`                   | `False`       | whether the pinky (outermost) columns have one fewer key, N/A for non-splits                             |\n  | `drop_inner` | `bool`                   | `False`       | whether the inner index (innermost) columns have one fewer key, N/A for non-splits                       |\n\n[^2]: Corresponding to bottom row arrangements of a single `2u` key, or two neighboring `2u` keys, respectively.\n\n**Hint**: You can use the [QMK Configurator](https://config.qmk.fm/) to search for `qmk_keyboard` and `qmk_layout` values, and preview the physical layout.\n\n> **Note**\n>\n> If these parameters are specified in both command line and under the `layout` section, the former will take precedence.\n\n## `layers`\n\nThis field is an ordered mapping of layer names to a list of `LayoutKey` specs that represent the keys on that layer.\nA `LayoutKey` can be defined with either a string value or with a mapping with the following fields:\n\n| field name (alias) | type  | default value | description                                                                                                                                                                                                                        |\n| ------------------ | ----- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tap` (`t`)        | `str` | `\"\"`          | the tap action of a key, drawn on the center of the key; spaces will be converted to line breaks[^3]                                                                                                                               |\n| `hold` (`h`)       | `str` | `\"\"`          | the hold action of a key, drawn on the bottom of the key                                                                                                                                                                           |\n| `shifted` (`s`)    | `str` | `\"\"`          | the \"shifted\" action of a key, drawn on the top of the key                                                                                                                                                                         |\n| `type`             | `str` | `\"\"`          | the styling of the key that corresponds to the [SVG class](keymap_drawer/config.py#L62)[^4]. predefined types are `held` (a red shading to denote held down keys) and `ghost` (a gray shading to denote optional keys in a layout) |\n\n[^3]: You can prevent line breaks by using double spaces `\"  \"` to denote a single non-breaking space.\n[^4]: Text styling can be overridden in the SVG config using the `\"tap\"`, `\"hold\"` and `\"shifted\"` classes if desired.\n\nUsing a string value such as `\"A\"` for a key spec is equivalent to defining a mapping with only the tap field, i.e., `{tap: \"A\"}`.\nIt is meant to be used as a shortcut for keys that do not need `hold` or `type` fields.\n\n`layers` field also flattens any lists that are contained in its value: This allows you to semantically divide keys to \"rows,\" if you prefer to do so.\nThe two layers in the following example are functionally identical:\n\n```yaml\nlayers:\n  flat_layer: [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", { t: \"0\", h: Fn }]\n  nested_layer:\n    - [\"7\", \"8\", \"9\"]\n    - [\"4\", \"5\", \"6\"]\n    - [\"1\", \"2\", \"3\"]\n    - { t: \"0\", h: Fn }\n```\n\n## `combos`\n\nThis is an optional field that contains a list of combo specs, each of which is a mapping that can have the following fields:\n\n| field name (alias)    | type                                              | default value | description                                                                                                                                                                       |\n| --------------------- | ------------------------------------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `key_positions` (`p`) | `list[int]`                                       | required      | list of key indices that trigger the combo[^5]                                                                                                                                    |\n| `key` (`k`)           | `LayoutKey`[^6]                                   | required      | key produced by the combo when triggered, `type` field will be ignored                                                                                                            |\n| `layers` (`l`)        | `list[str]`                                       | `[]`[^7]      | list of layers the combo can trigger on, specified using layer names in `layers` field                                                                                            |\n| `align` (`a`)         | `\"mid\" \\| \"top\" \\| \"bottom\" \\| \"left\" \\| \"right\"` | `\"mid\"`       | where to draw the combo: `mid` draws on the mid-point of triggering keys' center coordinates, or to the `top`/`bottom`/`left`/`right` of the triggering keys                      |\n| `offset` (`o`)        | `float`                                           | `0.0`         | additional offset to `top`/`bottom`/`left`/`right` positioning, specified in units of key width/height: useful for combos that would otherwise overlap                            |\n| `dendron` (`d`)       | `null \\| bool`                                    | `null`        | whether to draw dendrons going from combo to triggering key coordinates, default is to draw for non-`mid` alignments and draw for `mid` if key coordinates are far from the combo |\n| `type`                | `str`                                             | `\"combo\"`     | the styling of the key that corresponds to the [SVG class](keymap_drawer/config.py#L62), see `LayoutKey` definition above                                                         |\n\n[^5]: Key indices start from `0` on the first key position and increase by columns and then rows, corresponding to their ordering in the `layers` field. This matches the `key-positions` property in ZMK combo definitions.\n[^6]: Just like for keys in a layer under the `layers` field, `key` field can be specified with a string value as a shortcut, or a mapping (where the `type` field will be ignored).\n[^7]: The default value of empty list corresponds to all layers in the keymap, similar to the `layers` property in ZMK.\n\n## `draw_config`\n\nThis optional field lets you override [config parameters](README.md#customization) for SVG drawing.\nThis way you can specify drawing configuration for a specific layout and store in the keymap specification.\nIt is a mapping from field names in [`DrawConfig` class](keymap_drawer/config.py) to values.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/caksoylar/keymap-drawer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keymap-drawer",
    "package_url": "https://pypi.org/project/keymap-drawer/",
    "platform": null,
    "project_url": "https://pypi.org/project/keymap-drawer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/caksoylar/keymap-drawer/issues",
      "Homepage": "https://github.com/caksoylar/keymap-drawer",
      "Repository": "https://github.com/caksoylar/keymap-drawer"
    },
    "release_url": "https://pypi.org/project/keymap-drawer/0.6.0/",
    "requires_dist": [
      "pydantic (>=1.10.2,<2.0.0)",
      "pcpp (>=1.30,<2.0)",
      "pyparsing (>=3.0.9,<4.0.0)",
      "pyyaml (>=6.0,<7.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "A module and CLI tool to help parse and draw keyboard layouts.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17369366,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14269cbc9e8591c2bc3802274fb67478a39333c7e17105921510647cdf4a36db",
          "md5": "d1af11b51cf157b5e320ed83ca0360f3",
          "sha256": "18a139710419caef9e981e85b9e015e98afbf9ff469cb9e8635fdfde8074753a"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1af11b51cf157b5e320ed83ca0360f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 7270,
        "upload_time": "2023-01-30T21:25:53",
        "upload_time_iso_8601": "2023-01-30T21:25:53.806914Z",
        "url": "https://files.pythonhosted.org/packages/14/26/9cbc9e8591c2bc3802274fb67478a39333c7e17105921510647cdf4a36db/keymap_drawer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "056c7a09aaf9d5ad45cce13ff0e7bec8219f3358d64491b64498f0cd34d42093",
          "md5": "e5935b55ccd6f1e30c7ac076702c7daa",
          "sha256": "d266cb26d368d1b3ffab111d93f050025a60d15c825fd11d35caec502a86a5b3"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5935b55ccd6f1e30c7ac076702c7daa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 23096,
        "upload_time": "2023-01-30T21:40:37",
        "upload_time_iso_8601": "2023-01-30T21:40:37.127145Z",
        "url": "https://files.pythonhosted.org/packages/05/6c/7a09aaf9d5ad45cce13ff0e7bec8219f3358d64491b64498f0cd34d42093/keymap_drawer-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f747a56255683a75b4046a1c8eb0e1a8cca87a41c40b99f5d8f1062b44d68862",
          "md5": "670ff30857440eeff6f2ad1006cdb917",
          "sha256": "2f8fd7777bb337f8ee2a9b39acfa757c0c15dd47badff6647f1f2fd5099a3c2f"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "670ff30857440eeff6f2ad1006cdb917",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 23096,
        "upload_time": "2023-01-31T01:08:44",
        "upload_time_iso_8601": "2023-01-31T01:08:44.627103Z",
        "url": "https://files.pythonhosted.org/packages/f7/47/a56255683a75b4046a1c8eb0e1a8cca87a41c40b99f5d8f1062b44d68862/keymap_drawer-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "599602933f169c88cc6e431d8176efc4176ae164b55d2a92cc880aa0b14d80b8",
          "md5": "48135fd8e6f3efe64d66730435ba726b",
          "sha256": "3427f026071780918212cf30e3d8ac336c2ac9d74a7bd67a3387b9978bcc0c16"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48135fd8e6f3efe64d66730435ba726b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 23095,
        "upload_time": "2023-01-31T04:48:29",
        "upload_time_iso_8601": "2023-01-31T04:48:29.108579Z",
        "url": "https://files.pythonhosted.org/packages/59/96/02933f169c88cc6e431d8176efc4176ae164b55d2a92cc880aa0b14d80b8/keymap_drawer-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b90855f70c69ed282a9f5731c65838d221c21c9a9d6f59c472e9f298b4b1b32",
          "md5": "5f35c48a53d9590859cfe1084d14f7b2",
          "sha256": "755111f4d656adb9eaf6bc1288cd0f1cde19034863d42630dcc6ad6c7050f118"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f35c48a53d9590859cfe1084d14f7b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 23777,
        "upload_time": "2023-02-06T22:12:00",
        "upload_time_iso_8601": "2023-02-06T22:12:00.530592Z",
        "url": "https://files.pythonhosted.org/packages/3b/90/855f70c69ed282a9f5731c65838d221c21c9a9d6f59c472e9f298b4b1b32/keymap_drawer-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b6e953a8b366fd7422c2550c0286b2eea081704b1d669f25b74898cd9bdfae8",
          "md5": "79ba874724dad0bf9fe7528201f39a0a",
          "sha256": "af1dfe99ea3acf527ec93ba2e380a0e0a4dbae483620e4c5519f132e14031b26"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79ba874724dad0bf9fe7528201f39a0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 24549,
        "upload_time": "2023-02-20T00:57:47",
        "upload_time_iso_8601": "2023-02-20T00:57:47.308769Z",
        "url": "https://files.pythonhosted.org/packages/0b/6e/953a8b366fd7422c2550c0286b2eea081704b1d669f25b74898cd9bdfae8/keymap_drawer-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48f06bc8bb1ff60aba1985c5556367347fd04cb6dfaa8dd730c230eac6e9e754",
          "md5": "b9716fa409aa31c3eb111fb78148d553",
          "sha256": "9a4c83ad0602d0b469d1849cc6c48467b897d737606f422089fdc03d94edb904"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9716fa409aa31c3eb111fb78148d553",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 24864,
        "upload_time": "2023-02-23T05:13:20",
        "upload_time_iso_8601": "2023-02-23T05:13:20.046112Z",
        "url": "https://files.pythonhosted.org/packages/48/f0/6bc8bb1ff60aba1985c5556367347fd04cb6dfaa8dd730c230eac6e9e754/keymap_drawer-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82a53e97aa37b3ed7eb0140c5a40b57c0579e5d1e5edd74f607f7385f39b2bcb",
          "md5": "0511511299e505f0ce83c32594eeed86",
          "sha256": "8db2f160f574b2323b0c68a5fe933301165968a3fed32fb7d50b1de7fe2e13cc"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0511511299e505f0ce83c32594eeed86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 35748,
        "upload_time": "2023-03-07T01:31:57",
        "upload_time_iso_8601": "2023-03-07T01:31:57.431075Z",
        "url": "https://files.pythonhosted.org/packages/82/a5/3e97aa37b3ed7eb0140c5a40b57c0579e5d1e5edd74f607f7385f39b2bcb/keymap_drawer-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f9270da186051201d7ab6a21c3cd6fab2b28595dfe445358bce260863d7c67b",
          "md5": "8ce320c3ffc898987199b13dd9cc6904",
          "sha256": "ee9fbec10166ff78a0e1d151da1badefab540a2d0375035c97705275c1863867"
        },
        "downloads": -1,
        "filename": "keymap_drawer-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ce320c3ffc898987199b13dd9cc6904",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 41100,
        "upload_time": "2023-03-20T20:38:05",
        "upload_time_iso_8601": "2023-03-20T20:38:05.454434Z",
        "url": "https://files.pythonhosted.org/packages/6f/92/70da186051201d7ab6a21c3cd6fab2b28595dfe445358bce260863d7c67b/keymap_drawer-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f9270da186051201d7ab6a21c3cd6fab2b28595dfe445358bce260863d7c67b",
        "md5": "8ce320c3ffc898987199b13dd9cc6904",
        "sha256": "ee9fbec10166ff78a0e1d151da1badefab540a2d0375035c97705275c1863867"
      },
      "downloads": -1,
      "filename": "keymap_drawer-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ce320c3ffc898987199b13dd9cc6904",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 41100,
      "upload_time": "2023-03-20T20:38:05",
      "upload_time_iso_8601": "2023-03-20T20:38:05.454434Z",
      "url": "https://files.pythonhosted.org/packages/6f/92/70da186051201d7ab6a21c3cd6fab2b28595dfe445358bce260863d7c67b/keymap_drawer-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}