{
  "info": {
    "author": "",
    "author_email": "Adrian Cederberg <adrn.cederberg123@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Environment :: MacOS X",
      "Framework :: Hypothesis",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Why Should I Use This?\n================================================================\n\nThis project is very helpful for projects that have large \nconfiguration files, nested configuration files, or if you\njust don't like writing large ``.env`` files. It is also worth\nnoting that due to the backwards compatability between ``YAML``\nand ``JSON`` that this will also parse ``JSON`` configuration.\n\nFor instance, the following settings \n\n..\n  .. literal_include:: ./examples/__init__.py\n\n  could parse the following ``YAML`` :\n\n  .. literal_include:: ./examples/example.yaml\n\n  or equivelently the less readable ``env`` file:\n\n  .. literal_include:: ./tests/example.env\n\n\nThis can also be helpful when writing out (variables for ) helm \ncharts, pipelines of various sorts, and other ``YAML`` assets. \nIn such a context, it may be necessary to write an ``ENV`` file \nin line with your continuous integration or deployment variables.\nHowever, this can be rather cumbersome due to escape sequences:\n\n.. code:: yaml\n\n  # Example pipeline with env settings\n  # The configuration built is compatable with ``./examples/__init__.py``\n\n  ...\n  pipelines:\n    default:\n      - step:\n          name: Create settings for subsequent steps\n          caches: pip\n          script:\n            - |\n              export MYFISTSETTING=\"1\"\n              export MYDATABASESETTINGS=\"{\n                \\\"host\\\" : \\\"localhost\\\",\n                \\\"port\\\" : \\\"27017\\\",\n                \\\"username\\\" : \\\"some\\\",\n                \\\"password\\\" : \\\"dude\\\"\n              }\"\n            - echo \"MYFISTSETTING=$MYFISTSETTING\" > .env\n            - echo \"MYDATABASESETTINGS=$MYDATABASESETTINGS\" >> .env\n          artifacts:\n            - .env\n\n\nThe script section of the above bitbucket pipeline may be \nreplaced with something less horible to edit:\n\n.. code:: yaml\n\n  ...\n  script:\n    - |\n      ENVYAMLCONTENT=\"{\n        myFistSetting: 1\n        myDatabaseSettings:\n          host: localhost\n          port: 27017\n          username: some\n          password: dude\n      }\"\n    - echo $ENVYAMLCONTENT > .env\n  ...\n  \n\nthis may not make the strongest case due to the brevity of the \nsettings themselves. But when the settings are many layers deep,\nit is clear that writing ``YAML`` is preferable.\n  \n\nExamples, Usage, and Installation\n================================================================\n\nInstall using ``pip``:\n\n.. code:: bash\n\n  pip install yaml-settings-pydantic\n\nthen import into your current project settings and modify your\nconfiguration:\n\n.. code:: python\n\n  from yaml_settings_pydantic import create_settings_yaml\n  from pydantic import BaseModel\n  from pydantic.env_settings import BaseSettings, SettingsSourceCallable\n\n\n  class SomeNestedSettings(BaseModel) :\n\n    ...\n\n\n  class MySettings(BaseSettings):\n\n    class Config :\n\n      env_settings_yaml = create_settings_yaml(\n        \"./path/to_my.yaml\"\n      )\n\n\n      @classmethod\n      def customise_sources(\n          cls,\n          init_settings: SettingsSourceCallable,\n          env_settings: SettingsSourceCallable,\n          file_secret_settings: SettingsSourceCallable,\n      ):\n          return (\n              init_settings,\n              env_settings,\n              file_secret_settings,\n              cls.env_yaml_settings,\n          )\n\n    mySetting: str\n\nFinally it is useful to note that ``create_settings_yaml`` can accept\nmultiple files as input (all such inputs must deserialize to ``dict``)\nand reload them on every call of ``env_settings_yaml`` or just on the\norigonal call using the ``reload`` parameter:\n\n.. code:: python\n\n  ...\n  env_settings_yaml = create_settings_yaml(\n    \"./path/to/yaml_1.yaml\",\n    \"./path/to_my.yaml\",\n    reload = True\n  )\n  ...\n\nIn this instance the values from ``./path/to_my.yaml`` will take \nprecedence over the ``YAML`` provided earlier. That is, the\nlater in the input list the path appears, the more its variables\nare prefered.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "env,config,pydantic,settings,pydantic-settings,yaml,json,yaml-settings-pydantic",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yaml-settings-pydantic",
    "package_url": "https://pypi.org/project/yaml-settings-pydantic/",
    "platform": null,
    "project_url": "https://pypi.org/project/yaml-settings-pydantic/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/yaml-settings-pydantic/0.0.0/",
    "requires_dist": [
      "pydantic",
      "pyyaml",
      "build ; extra == 'ci'",
      "twine ; extra == 'ci'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool to easily load (many) JSON/YAML files as pydantic settings.",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16164107,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8666407ddb1db60b9b60ee59b6e58462f5652f3a54521e0bc427b9059977a370",
          "md5": "edc49fffb43eff3b009df9cc6c76a663",
          "sha256": "c47c756108b0721daf3eadab705e67c89e2d744f741c9f2b2d38171d23dab8d3"
        },
        "downloads": -1,
        "filename": "yaml_settings_pydantic-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edc49fffb43eff3b009df9cc6c76a663",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5493,
        "upload_time": "2022-12-20T17:32:24",
        "upload_time_iso_8601": "2022-12-20T17:32:24.880936Z",
        "url": "https://files.pythonhosted.org/packages/86/66/407ddb1db60b9b60ee59b6e58462f5652f3a54521e0bc427b9059977a370/yaml_settings_pydantic-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7a322663db6163516a4be546382b3edf96df9ac351f14bd677eddc0a12a1e52",
          "md5": "c8c60ffef0fca35414f75821b094c62e",
          "sha256": "9f8d828646bebcbc5ad0543f9655851e38124693b89599b17e0048e84a7bb46c"
        },
        "downloads": -1,
        "filename": "yaml-settings-pydantic-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8c60ffef0fca35414f75821b094c62e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5988,
        "upload_time": "2022-12-20T17:32:27",
        "upload_time_iso_8601": "2022-12-20T17:32:27.060712Z",
        "url": "https://files.pythonhosted.org/packages/f7/a3/22663db6163516a4be546382b3edf96df9ac351f14bd677eddc0a12a1e52/yaml-settings-pydantic-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8666407ddb1db60b9b60ee59b6e58462f5652f3a54521e0bc427b9059977a370",
        "md5": "edc49fffb43eff3b009df9cc6c76a663",
        "sha256": "c47c756108b0721daf3eadab705e67c89e2d744f741c9f2b2d38171d23dab8d3"
      },
      "downloads": -1,
      "filename": "yaml_settings_pydantic-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "edc49fffb43eff3b009df9cc6c76a663",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5493,
      "upload_time": "2022-12-20T17:32:24",
      "upload_time_iso_8601": "2022-12-20T17:32:24.880936Z",
      "url": "https://files.pythonhosted.org/packages/86/66/407ddb1db60b9b60ee59b6e58462f5652f3a54521e0bc427b9059977a370/yaml_settings_pydantic-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7a322663db6163516a4be546382b3edf96df9ac351f14bd677eddc0a12a1e52",
        "md5": "c8c60ffef0fca35414f75821b094c62e",
        "sha256": "9f8d828646bebcbc5ad0543f9655851e38124693b89599b17e0048e84a7bb46c"
      },
      "downloads": -1,
      "filename": "yaml-settings-pydantic-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8c60ffef0fca35414f75821b094c62e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5988,
      "upload_time": "2022-12-20T17:32:27",
      "upload_time_iso_8601": "2022-12-20T17:32:27.060712Z",
      "url": "https://files.pythonhosted.org/packages/f7/a3/22663db6163516a4be546382b3edf96df9ac351f14bd677eddc0a12a1e52/yaml-settings-pydantic-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}