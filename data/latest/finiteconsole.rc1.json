{
  "info": {
    "author": "Cyrille Kossyguine",
    "author_email": "lambda_man@outlook.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# FiniteConsole\nA way to simplify development of CLI applications.\n## Getting started\nThis module is based on the finite state machine pattern. It may be logic to represent \na list of options in the terminal (a page) as a state. So the other lists of \noptions (pages) are the other states. The program can be represented as an \noriented graph with mappings from one state to another one.  \nFurther the terms \"menu\" and \"option\" are interchangeable with the terms \n\"state\" and \"mapping\".\n### Create the program\nUse the `Program` class to create the program object which is singleton. You can \ninitialize the program with a `Menu` or append it later.\n```python\nfrom FiniteConsole import Program, Menu\n\np = Program()  # Empty\np.init_menu = Menu('main')\n\np.drop()\np = Program(Menu('initial'))\n```\nThe program can be dropped with the `drop` method.\n### Define a state (a menu)\nThe states are instances of `Menu` class.  \nThe constructor takes a required parameter `id_` which is its id. **It must be unique \nfor a whole program!**\n```python\nfrom FiniteConsole import Menu\n\nmain_menu = Menu('main')\n```\nAfter you have created the `Program` instance, all new `Menu` instances \nwill be appended to the program automatically.\n```python\nfrom FiniteConsole import Program, Menu\n\np = Program(Menu('main'))\nMenu(1)\nMenu('another_one')\nprint(p.menus)\n# {'main': <Menu object...>, '1': <Menu object...>, 'another_one': <Menu object...>}\n```\nThe second parameter `action` is a function, basically it is None. It means the \nstate is not finite.  \nFinite states do something and then returns to the precedent state.\n```python\nimport sys\nfrom FiniteConsole import Menu\n\nmain_menu = Menu('main')\nexit_menu = Menu('exit', lambda: sys.exit())\n```\nIf the program state changes on \"exit\", the function will be executed.  \nParameters are passed to the function via `args` and `kwargs` attributes of \nthe program, they are cleared at every loop iteration. Returned value is in the\n`result` attribute of the program, it is conserved until the function returns a \nnew value.\n```python\nfrom FiniteConsole import Program, Menu\n\nfinite = Menu('calc', lambda x: x*x)\np = Program(finite)\np.start_loop()  # E.g. as a thread\np.args = [5]\n...\nprint(p.result)\n# 25\n```\nTo remove states use `remove_menus` method of the `Program` instance. You can \npass either `str` containing ids or `Menu` instances.\n### Append a mapping (an option)\nUse `append_options` of `Menu` instance to append options to the menu. \nIt takes `Option` object, which parameters are `inp` - input name, \n`out` - output name, `description` - text for CLI.\n```python\nimport sys\nfrom FiniteConsole import Menu, Option\n\nmain_menu = Menu('main').append_options(\n    Option('1', 'exit', 'Quit'),\n    Option('2', 'do_stuff_1', 'Amazing stuff'),\n    Option('yes', 'Another menu', 'Go to another menu, etc.')\n)\n```\nTo remove options use `remove_options` method of a `Menu` instance.\n### Run\nJust use `start_loop` and `stop_loop` methods to run and stop the program.  \nIf your graph has faults, e.g. options leading nowhere, you will see report about \nthese faults in the CLI. \n## Extensions\nYou can change representation of options and input method. \n### Render\nRedefine the method `render` of the `Menu` class. It is responsible for CLI \npresentation of menus.\n### Input for mapper\nRedefine the method `read_input` of the `Menu` class. It is responsible for getting \nof a new input for mapping. The returned value must be a `str` with id of a new \nstate.\n## Example\n```python\nimport sys\nfrom FiniteConsole import Menu, Option, Program\n\n\ndef func():\n    x = float(input('Enter a number: '))\n    print(x*x)\n\n\nmain_menu = Menu('main').append_options(\n    Option('0', 'exit', 'Quit'),  # Finite\n    Option('1', 'stuff_1', 'Square'),  # Finite\n    Option('3', 'submenu', 'Go to another menu')\n)\np = Program(main_menu)\n\nMenu('submenu').append_options(Option('back', 'main', 'Go back'))\n\n# Finite states\nMenu('exit', lambda: sys.exit())\nMenu('stuff_1', func)\n\n\np.start_loop()\n```\nAnd yes. You can change program's comportment while runtime: append other menus, \noptions, etc.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyrillelamal/FiniteConsole",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "FiniteConsole",
    "package_url": "https://pypi.org/project/FiniteConsole/",
    "platform": "",
    "project_url": "https://pypi.org/project/FiniteConsole/",
    "project_urls": {
      "Homepage": "https://github.com/cyrillelamal/FiniteConsole"
    },
    "release_url": "https://pypi.org/project/FiniteConsole/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A way to simplify development of CLI applications",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6262184,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "946d6687dfbcde9d157ed236798088d4202f38135d9b18f7b4568b42fb738ba9",
          "md5": "2751d87b15ae27017aa87e67b5dfabf0",
          "sha256": "bccf324bdc685b685c324bedc24fd69dc19c6ed9d0d7f64b5dee4c1cd0996848"
        },
        "downloads": -1,
        "filename": "FiniteConsole-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2751d87b15ae27017aa87e67b5dfabf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6400,
        "upload_time": "2019-12-08T13:56:22",
        "upload_time_iso_8601": "2019-12-08T13:56:22.434384Z",
        "url": "https://files.pythonhosted.org/packages/94/6d/6687dfbcde9d157ed236798088d4202f38135d9b18f7b4568b42fb738ba9/FiniteConsole-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9f896875c308123934a04f2556d927ca8a4c73f5b4fe38e2368e776cb4badda",
          "md5": "e02433b54bcdade3fe2a9c85c915f603",
          "sha256": "953ec23330d45d9484c22b098f3f972ac47464546ae9e52c091c6d5484bbf51d"
        },
        "downloads": -1,
        "filename": "FiniteConsole-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e02433b54bcdade3fe2a9c85c915f603",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5134,
        "upload_time": "2019-12-08T13:56:24",
        "upload_time_iso_8601": "2019-12-08T13:56:24.909890Z",
        "url": "https://files.pythonhosted.org/packages/f9/f8/96875c308123934a04f2556d927ca8a4c73f5b4fe38e2368e776cb4badda/FiniteConsole-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "946d6687dfbcde9d157ed236798088d4202f38135d9b18f7b4568b42fb738ba9",
        "md5": "2751d87b15ae27017aa87e67b5dfabf0",
        "sha256": "bccf324bdc685b685c324bedc24fd69dc19c6ed9d0d7f64b5dee4c1cd0996848"
      },
      "downloads": -1,
      "filename": "FiniteConsole-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2751d87b15ae27017aa87e67b5dfabf0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6400,
      "upload_time": "2019-12-08T13:56:22",
      "upload_time_iso_8601": "2019-12-08T13:56:22.434384Z",
      "url": "https://files.pythonhosted.org/packages/94/6d/6687dfbcde9d157ed236798088d4202f38135d9b18f7b4568b42fb738ba9/FiniteConsole-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9f896875c308123934a04f2556d927ca8a4c73f5b4fe38e2368e776cb4badda",
        "md5": "e02433b54bcdade3fe2a9c85c915f603",
        "sha256": "953ec23330d45d9484c22b098f3f972ac47464546ae9e52c091c6d5484bbf51d"
      },
      "downloads": -1,
      "filename": "FiniteConsole-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e02433b54bcdade3fe2a9c85c915f603",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5134,
      "upload_time": "2019-12-08T13:56:24",
      "upload_time_iso_8601": "2019-12-08T13:56:24.909890Z",
      "url": "https://files.pythonhosted.org/packages/f9/f8/96875c308123934a04f2556d927ca8a4c73f5b4fe38e2368e776cb4badda/FiniteConsole-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}