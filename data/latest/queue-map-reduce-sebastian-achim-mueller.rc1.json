{
  "info": {
    "author": "Sebastian Achim Mueller",
    "author_email": "sebastian-achim.mueller@mpi-hd.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Clustering",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "===========================\nqueue map reduce for python\n===========================\n\n|TravisBuildStatus| |PyPIStatus| |BlackStyle|\n\nQueues for batch-jobs distribute your compute-tasks over multiple machines in parallel. This pool maps your tasks onto a queue and reduces the results.\n\n.. code:: python\n\n    import queue_map_reduce as qmr\n\n    pool = qmr.Pool()\n    results = pool.map(sum, [[1, 2], [2, 3], [4, 5], ])\n\nA drop-in-replacement for builtins' ``map()``, and ``multiprocessing.Pool()``'s ``map()``.\n\nRequirements\n============\n\n- Programs ``qsub``, ``qstat``, and ``qdel`` are required to submit, monitor, and delete queue-jobs.\n\n- Your ``func(task)`` must be part of an importable python module.\n\n- Your ``tasks`` and their ``results`` must be able to serialize using pickle.\n\n- Both worker-nodes and process-node can read and write from and to a common path in the file-system.\n\nQueue flavor\n------------\nTested flavors are:\n\n- Sun Grid Engine (SGE) 8.1.9\n\nFeatures\n========\n- Respects fair-share, i.e. slots are only occupied when the compute is done.\n\n- No spawning of additional threads. Neither on the process-node, nor on the worker-nodes.\n\n- No need for databases or web-servers.\n\n- Queue-jobs with error-state ``'E'`` can be deleted, and resubmitted until your predefined upper limit is reached.\n\n- Can bundle tasks on worker-nodes to avoid start-up-overhead with many small tasks.\n\nAlternatives\n============\nWhen you do not share resources with other users, and when you have some administrative power you might want to use one of these:\n\n- Dask_ has a ``job_queue`` which also supports other flavors such as PBS, SLURM.\n\n- pyABC.sge_ has a ``sge.map()`` very much like our one.\n\n- ipyparallel_\n\nInner workings\n==============\n- ``map()`` makes a ``work_dir`` because the mapping and reducing takes place in the file-system. You can set ``work_dir`` manually to make sure both worker-nodes and process-node can reach it.\n\n- ``map()`` serializes your ``tasks`` using ``pickle`` into separate files in ``work_dir/{ichunk:09d}.pkl``.\n\n- ``map()`` reads all environment-variables in its process.\n\n- ``map()`` creates the worker-node-script in ``work_dir/worker_node_script.py``. It contains and exports the process' environment-variables into the batch-job's context. It reads the chunk of tasks in ``work_dir/{ichunk:09d}.pkl``, imports and runs your ``func(task)``, and finally writes the result back to ``work_dir/{ichunk:09d}.pkl.out``.\n\n- ``map()`` submits queue-jobs. The ``stdout`` and ``stderr`` of the tasks are written to ``work_dir/{ichunk:09d}.pkl.o`` and ``work_dir/{ichunk:09d}.pkl.e`` respectively. By default, ``shutil.which(\"python\")`` is used to process the worker-node-script.\n\n- When all queue-jobs are submitted, ``map()`` monitors their progress. In case a queue-job runs into an error-state (``'E'`` by default) the job wFill be deleted and resubmitted until a maximum number of resubmissions is reached.\n\n- When no more queue-jobs are running or pending, ``map()`` will reduce the results from ``work_dir/{ichunk:09d}.pkl.out``.\n\n- In case of non zero ``stderr`` in any task, a missing result, or on the user's request, the ``work_dir`` will be kept for inspection. Otherwise its removed.\n\nWording\n-------\n\n- ``task`` is a valid input to ``func``. The ``tasks`` are the actual payload to be processed.\n\n- ``iterable`` is an iterable (list) of ``tasks``. It is the naming adopted from ``multiprocessing.Pool.map``.\n\n- ``itask`` is the index of a ``task`` in ``iterable``.\n\n- ``chunk`` is a chunk of ``tasks`` which is processed on a worker-node in serial.\n\n- ``ichunk`` is the index of a chunk. It is used to create the chunks's filenames such as ``work_dir/{ichunk:09d}.pkl``.\n\n- `queue-job` is what we submitt into the queue. Each queue-job processes the tasks in a single chunk in series.\n\n- ``JB_job_number`` is assigned to a queue-job by the queue-system for its own book-keeping.\n\n- ``JB_name`` is assigned to a queue-job by our ``map()``. It is composed of our ``map()``'s session-id, and ``ichunk``. E.g. ``\"q\"%Y-%m-%dT%H:%M:%S\"#{ichunk:09d}\"``\n\nEnvironment Variables\n---------------------\nAll the user's environment-variables in the process where ``map()`` is called will be exported in the queue-job's context.\n\nThe worker-node-script sets the environment-variables. We do not use ``qsub``'s argument ``-V`` because on some clusters this will not set all variables. Apparently some administrators fear security issues when using ``qsub -V`` to set ``LD_LIBRARY_PATH``.\n\nTesting\n=======\n\n.. code:: bash\n\n    py.test -s .\n\ndummy queue\n-----------\nTo test our ``map()`` we provide a dummy ``qsub``, ``qstat``, and ``qdel``.\nThese are individual ``python``-scripts which all act on a common state-file in ``tests/resources/dummy_queue_state.json`` in order to fake the sun-grid-engine's queue.\n\n- ``dummy_qsub.py`` only appends queue-jobs to the list of pending jobs in the state-file.\n\n- ``dummy_qdel.py`` only removes queue-jobs from the state-file.\n\n- ``dummy_qstat.py`` does move the queue-jobs from the pending to the running list, and does trigger the actual processing of the jobs. Each time ``dummy_qstat.py`` is called it performs a single action on the state-file. So it must be called multiple times to process all jobs. It can intentionally bring jobs into the error-state when this is set in the state-file.\n\nBefore running the dummy-queue, its state-file must be initialized:\n\n.. code:: python\n\n    from queue_map_reduce import dummy_queue\n\n    dummy_queue.init_queue_state(\n        path=\"tests/resources/dummy_queue_state.json\"\n    )\n\nWhen testing our ``map()`` you set its arguments ``qsub_path``, ``qdel_path``, and ``qstat_path`` to point to the dummy-queue.\n\nSee ``tests/test_full_chain_with_dummy_qsub.py``.\n\nBecause of the global state-file, only one instance of dummy_queue must run at a time.\n\n.. |TravisBuildStatus| image:: https://travis-ci.org/cherenkov-plenoscope/queue_map_reduce.svg?branch=master\n   :target: https://travis-ci.org/cherenkov-plenoscope/queue_map_reduce\n\n.. |PyPIStatus| image:: https://badge.fury.io/py/queue_map_reduce_sebastian-achim-mueller.svg\n   :target: https://pypi.org/project/queue-map-reduce-relleums\n\n.. |BlackStyle| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. _Dask: https://docs.dask.org/en/latest/\n\n.. _pyABC.sge: https://pyabc.readthedocs.io/en/latest/api_sge.html\n\n.. _ipyparallel: https://ipyparallel.readthedocs.io/en/latest/index.html\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cherenkov-plenoscope/queue_map_reduce",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "queue-map-reduce-sebastian-achim-mueller",
    "package_url": "https://pypi.org/project/queue-map-reduce-sebastian-achim-mueller/",
    "platform": null,
    "project_url": "https://pypi.org/project/queue-map-reduce-sebastian-achim-mueller/",
    "project_urls": {
      "Homepage": "https://github.com/cherenkov-plenoscope/queue_map_reduce"
    },
    "release_url": "https://pypi.org/project/queue-map-reduce-sebastian-achim-mueller/1.1.1/",
    "requires_dist": [
      "qstat (>=0.0.5)"
    ],
    "requires_python": ">=3",
    "summary": "Map and reduce for batch-jobs in distributed computing.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15523816,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42f5d91c973ee51c24187e35979576b68584d2c1988a0724fdfec1a03da9bbc2",
          "md5": "6e545436cbfbf5e985980c59ff079504",
          "sha256": "2972b881426d101da9d5337850ec33d34e0812f233d78ea7eecc7fabaddf9817"
        },
        "downloads": -1,
        "filename": "queue_map_reduce_sebastian_achim_mueller-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e545436cbfbf5e985980c59ff079504",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 17711,
        "upload_time": "2022-10-25T14:24:26",
        "upload_time_iso_8601": "2022-10-25T14:24:26.097677Z",
        "url": "https://files.pythonhosted.org/packages/42/f5/d91c973ee51c24187e35979576b68584d2c1988a0724fdfec1a03da9bbc2/queue_map_reduce_sebastian_achim_mueller-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e5ce02276702628e67842914be909b593cd2bc32beddffb0f35bc5b7043ef5b",
          "md5": "9c7fb7ffb302d9a22cba0ce96e6c5c19",
          "sha256": "e8c61fce1523dcf8e55f455b79447ae9b4ceee00695897b4dbef4ee4cc5296f1"
        },
        "downloads": -1,
        "filename": "queue_map_reduce_sebastian-achim-mueller-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c7fb7ffb302d9a22cba0ce96e6c5c19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15739,
        "upload_time": "2022-10-25T14:24:28",
        "upload_time_iso_8601": "2022-10-25T14:24:28.464936Z",
        "url": "https://files.pythonhosted.org/packages/1e/5c/e02276702628e67842914be909b593cd2bc32beddffb0f35bc5b7043ef5b/queue_map_reduce_sebastian-achim-mueller-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42f5d91c973ee51c24187e35979576b68584d2c1988a0724fdfec1a03da9bbc2",
        "md5": "6e545436cbfbf5e985980c59ff079504",
        "sha256": "2972b881426d101da9d5337850ec33d34e0812f233d78ea7eecc7fabaddf9817"
      },
      "downloads": -1,
      "filename": "queue_map_reduce_sebastian_achim_mueller-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e545436cbfbf5e985980c59ff079504",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 17711,
      "upload_time": "2022-10-25T14:24:26",
      "upload_time_iso_8601": "2022-10-25T14:24:26.097677Z",
      "url": "https://files.pythonhosted.org/packages/42/f5/d91c973ee51c24187e35979576b68584d2c1988a0724fdfec1a03da9bbc2/queue_map_reduce_sebastian_achim_mueller-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e5ce02276702628e67842914be909b593cd2bc32beddffb0f35bc5b7043ef5b",
        "md5": "9c7fb7ffb302d9a22cba0ce96e6c5c19",
        "sha256": "e8c61fce1523dcf8e55f455b79447ae9b4ceee00695897b4dbef4ee4cc5296f1"
      },
      "downloads": -1,
      "filename": "queue_map_reduce_sebastian-achim-mueller-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9c7fb7ffb302d9a22cba0ce96e6c5c19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 15739,
      "upload_time": "2022-10-25T14:24:28",
      "upload_time_iso_8601": "2022-10-25T14:24:28.464936Z",
      "url": "https://files.pythonhosted.org/packages/1e/5c/e02276702628e67842914be909b593cd2bc32beddffb0f35bc5b7043ef5b/queue_map_reduce_sebastian-achim-mueller-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}