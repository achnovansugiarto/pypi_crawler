{
  "info": {
    "author": "Serhii Orkivskyi",
    "author_email": "2blesteve@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# PyObjectDict\r\n\r\n## Python dictionaries for more convenient use\r\n\r\n![](https://img.shields.io/badge/license-MIT-green)\r\n\r\n<br />\r\n\r\n### Overview\r\n\r\n**The problem**\r\n\r\nWhen it comes to the Python `dict` syntax, what makes it clanky and annoying is the need to always pass keys as strings and use square brackets when accessing a `dict`'s value:\r\n```\r\nx = {'a': 1, 'b': 2}\r\nvalue = x['b'] # we have to write square brackets and use strings inside them\r\n```\r\n\r\nIt is made quite concise in JavaScript language where all you need is access your value through the dot syntax like the following:\r\n```\r\nx = {'a': 1, 'b': 2}\r\nvalue = x.b // no need to use square brackets or strings!\r\n```\r\n\r\n**The solution**\r\nThis simple package introduces a new Python `dict` object which has some similarities to the JavaScript object in terms of dot syntax.\r\nThe object is called `PyObjectDict`.\r\n\r\n\r\n### How to use\r\n\r\nimport the package and try to initialize your PyObjectDict in a preferred way:\r\n```\r\nfrom object_dict import PyObjectDict\r\n\r\na = PyObjectDict({'a': 2, 'b': 3, 'c': 10, 'd': 8})\r\nb = PyObjectDict.form(**{'a': 2, 'b': 3, 'c': 4, 'g': 8})\r\n```\r\n\r\n*Note:* `PyObjectDict` constructor works with types: `dict`, `OrderedDict`, and `PyObjectDict` (to create a copy)\r\n\r\nyou may add new attributes to the object by simply using the dot syntax:\r\n```\r\na.e = 1\r\na.f = 1\r\na.g = 1\r\na.h = 1\r\na.i = 1\r\n```\r\n\r\nyou may then easily access any attribute by using:\r\n```\r\nprint(a.a) # will print 2\r\nprint(a.e) # will print 1\r\n```\r\n\r\nThe `PyObjectDict` also exposes a lot of additional convenience methods as well as standard `dict` methods.\r\nThey are listed in the table above and an example of their usage can be seen below it.\r\n\r\n<br />\r\n<br />\r\n\r\n### Methods of PyObjectDict\r\n\r\n| Name              | Parameters                        | Return value                                | Description                                                                                                                               |\r\n| -------------     | -------------                     |-------------                                | -------------                                                                                                                             |\r\n| `length`          | -                                 | `int`                                       | returns the lenght of the dictionary                                                                                                      |\r\n| `keys`            | -                                 | `list`                                      | returns the list of keys of the dictionary                                                                                                |\r\n| `items`           | -                                 | `list` of `tuple`s                          | returns the list of tuples containing key, value pairs of each item in the dicrionary                                                     |\r\n| `iteritems`       | -                                 | `iterator`                                  | iterator for `items` method                                                                                                               |\r\n| `values`          | -                                 | `list`                                      | returns the list of values of the dictionary                                                                                              |\r\n| `update`          | `other` (`PyObjectDict`)            | `None`                                      | updates one `PyObjectDict` with the other (merges them) in place. Returns nothing                                                           |\r\n| `get`             | `key` (`str`), `default` (`None`) | type of `key` or type of `default` parameter| returns value of the `key` if key exists or `default` parameter (which is`None` by default)                                               |\r\n| `add`             | `other` (`PyObjectDict`)            | `PyObjectDict`                                | merges two `PyObjectDict`s and returns a merged copy                                                                                        |\r\n| `add_each_value`  | `other` (`PyObjectDict`)            | `PyObjectDict`                                | merges the keys of two `PyObjectDict`s and adds the corresponding key values together. returns a merged copy                                |\r\n| `sub`             | `other` (`PyObjectDict`)            | `PyObjectDict`                                | subtracts one `PyObjectDict` from another and returns a copy containing not intersecting keys of the first `PyObjectDict` with their values   |\r\n| `sub_each_value`  | `other` (`PyObjectDict`)            | `PyObjectDict`                                | subtracts the values of the corresponding keys of the first `PyObjectDict` from the second one. Returns a copy                              |\r\n| `sub_by_value`    | `other` (`PyObjectDict`)            | `PyObjectDict`                                | the same as `sub` but subtraction happens by the unique `key: value` pairs not just the unique keys                                       |\r\n\r\n<br />\r\n\r\n### Operators of PyObjectDict\r\n\r\n| Name              | Parameters                | Return value  | Description                                                                                           |\r\n| -------------     | -------------             |-------------  | -------------                                                                                         |\r\n| `+`               | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `add` method                                                                              |\r\n| `+=`              | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `add` method but assigns the result to the `PyObjectDict` to the left side of the operator  |\r\n| `\\|`              | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `add` method                                                                              |\r\n| `\\|=`             | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `+=` operator                                                                             |\r\n| `-`               | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `sub` method                                                                              |\r\n| `-=`              | `other` (`PyObjectDict`)    | `PyObjectDict`  | the same as `sub` method but assigns the result to the `PyObjectDict` to the left side of the operator  |\r\n\r\n<br />\r\n\r\n### Dunder methods of PyObjectDict\r\n\r\n| Name              | Parameters    | Return value  | Description                                           |\r\n| -------------     | ------------- |-------------  | -------------                                         |\r\n| `len`             | -             | `int`         | returns the lenght of the dictionary                  |\r\n| `str`             | -             | `str`         | returns the string representation of the dicrionary   |\r\n\r\n<br />\r\n\r\n### Constructors of PyObjectDict\r\n\r\n| Name              | Parameters    | Return value  | Description                                                                                       |\r\n| -------------     | ------------- |-------------  | -------------                                                                                     |\r\n| `PyObjectDict`      | -             | `PyObjectDict`  | creates an `PyObjectDict` from `dict`, `OrderedDict`, or `PyObjectDict` (copy)                        |\r\n| `PyObjectDict.from` | -             | `PyObjectDict`  | creates an `PyObjectDict` from the key value pairs that are successively passed to the constructor  |\r\n\r\n\r\n<br />\r\n<br />\r\n\r\n### An Example of Usage\r\n\r\n```\r\nfrom pyobjectdict import PyObjectDict\r\n\r\na = PyObjectDict({'a': 2, 'b': 3, 'c': 10, 'd': 8})\r\nb = PyObjectDict.form(**{'a': 2, 'b': 3, 'c': 4, 'g': 8})\r\n\r\nprint('a:', a)\r\nprint('b:', b)\r\n\r\nc = a.sub_by_value(b)\r\nprint('c:', c)\r\n\r\nprint('c.length():', c.length())\r\nprint('c.keys():', c.keys())\r\nprint('c.items():', c.items())\r\nprint('c.iteritems():', list(c.iteritems()))\r\nprint('c.values():', c.values())\r\nprint('c.update(PyObjectDict({\"a\": 1, \"b\": 2, \"c\": 3})):', c.update(PyObjectDict({'a': 1, 'b': 2, 'c': 3})))\r\nprint('c.update(PyObjectDict({\"a\": 1, \"b\": 2, \"c\": 3})):', c.update(PyObjectDict({'a': 1, 'b': 2, 'c': 3})))\r\n\r\nprint('iteratibng over c:')\r\nfor k in c:\r\n    print('key: ', k)\r\n\r\n\r\nprint('a + b:', a + b)\r\nprint('a | b:', a | b)\r\nprint('a.add(b):', a.add(b))\r\nprint('a.add_each_value(b):', a.add_each_value(b))\r\na.update(b)\r\nprint('a after a.update(b):', a)\r\n\r\na.cc = 12\r\nb.cc = 12\r\nprint('a after adding \"cc\": 12:', a)\r\nprint('b after adding \"cc\": 12:', b)\r\n\r\nprint('a - b:', a - b)\r\nprint('a.sub(b):', a.sub(b))\r\nprint('a.sub_by_value(b):', a.sub_by_value(b))\r\nprint('a.sub_each_value(b):', a.sub_each_value(b))\r\n\r\na += b\r\nprint('a after a += b:', a)\r\na -= b\r\nprint('a after a -= b:', a)\r\na |= b\r\nprint('a after a |= b', a)\r\n```\r\nThe result of the code above will be:\r\n\r\n```\r\na: PyObjectDict({'a': 2, 'b': 3, 'c': 10, 'd': 8})\r\nb: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'g': 8})\r\nc: PyObjectDict({'c': 10, 'd': 8})\r\nc.length(): 2\r\nc.keys(): ['c', 'd']\r\nc.items(): [('c', 10), ('d', 8)]\r\nlist(c.iteritems()): [('c', 10), ('d', 8)]\r\nc.values(): [10, 8]\r\nc.update(PyObjectDict({\"a\": 1, \"b\": 2, \"c\": 3})): None\r\nc.update(PyObjectDict({\"a\": 1, \"b\": 2, \"c\": 3})): None\r\niteratibng over c:\r\nkey:  c\r\nkey:  d\r\nkey:  a\r\nkey:  b\r\na + b: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8})\r\na | b: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8})\r\na.add(b): PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8})\r\na.add_each_value(b): PyObjectDict({'a': 4, 'b': 6, 'c': 14, 'd': 8})\r\na after a.update(b): PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8})\r\na after adding \"cc\": 12: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8, 'cc': 12})\r\nb after adding \"cc\": 12: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'g': 8, 'cc': 12})\r\na - b: PyObjectDict({'d': 8})\r\na.sub(b): PyObjectDict({'d': 8})\r\na.sub_by_value(b): PyObjectDict({'d': 8})\r\na.sub_each_value(b): PyObjectDict({'a': 0, 'b': 0, 'c': 0, 'd': 8, 'g': 0, 'cc': 0})\r\na after a += b: PyObjectDict({'a': 2, 'b': 3, 'c': 4, 'd': 8, 'g': 8, 'cc': 12})\r\na after a -= b: PyObjectDict({'d': 8})\r\na after a |= b PyObjectDict({'d': 8, 'a': 2, 'b': 3, 'c': 4, 'g': 8, 'cc': 12})\r\n```\r\n\r\n### Notes\r\n\r\nRemember that in JavaScripts objects it is possible to access a non-existing attribute and receve an `undefined` value.\r\nHowever, since Python has no concept of `undefined` and checking for `None` could be missleading (+ the limitations of Python objects), you cannot access an unexisting attribute of `PyObjectDict` without triggering an `AttributeError` exception. Alternatively you can use `get` method as in standard Python dicts to check if the attribute exists before accessing it.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/keptt/pyobjectdict/archive/refs/tags/1.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keptt/pyobjectdict",
    "keywords": "dict,objectdict,pyobjectdict,dot syntax,object,pyobject,js-like,js",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyobjectdict",
    "package_url": "https://pypi.org/project/pyobjectdict/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyobjectdict/",
    "project_urls": {
      "Download": "https://github.com/keptt/pyobjectdict/archive/refs/tags/1.0.1.tar.gz",
      "Homepage": "https://github.com/keptt/pyobjectdict"
    },
    "release_url": "https://pypi.org/project/pyobjectdict/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package provides a js-like dictionary object with a more convenient support of dot syntax plus a few additional methods",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10452974,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fb3804dd56493942e89efada5841a682deb828f091cc0cb7babce99d6651d85",
          "md5": "c6c9a72fd5636dae6a25ad39d40e35d3",
          "sha256": "069b25cdcab0b227f5767bb204ad574fec13bf579f6a2279acf33f65e468c7d9"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c6c9a72fd5636dae6a25ad39d40e35d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2244,
        "upload_time": "2021-05-24T09:17:01",
        "upload_time_iso_8601": "2021-05-24T09:17:01.708847Z",
        "url": "https://files.pythonhosted.org/packages/2f/b3/804dd56493942e89efada5841a682deb828f091cc0cb7babce99d6651d85/pyobjectdict-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e690f18582800c4104d9632f0633caeccd99e91703ae38b30fa02f7a440f0325",
          "md5": "abd53dadc8f8dd3a0f9b20e87e677484",
          "sha256": "1c97cab1d0c2415cc545d4d95c5e58521df1d9a8bd0b08fb773b66200641f757"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "abd53dadc8f8dd3a0f9b20e87e677484",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6455,
        "upload_time": "2021-05-24T09:47:25",
        "upload_time_iso_8601": "2021-05-24T09:47:25.751097Z",
        "url": "https://files.pythonhosted.org/packages/e6/90/f18582800c4104d9632f0633caeccd99e91703ae38b30fa02f7a440f0325/pyobjectdict-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.post0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101cff779e55fd66143a45cf97f25d3c94cb2b1c62c09f6fe8e7ff4f9b78a04e",
          "md5": "6e82f840190e4805a1d46e49268c57f5",
          "sha256": "144a8c563e32e7476db3d53e2bd661017afa7bb87cd88db2a9b0518d5c3bb2c6"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.1.post0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e82f840190e4805a1d46e49268c57f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6512,
        "upload_time": "2021-05-24T10:31:52",
        "upload_time_iso_8601": "2021-05-24T10:31:52.647231Z",
        "url": "https://files.pythonhosted.org/packages/10/1c/ff779e55fd66143a45cf97f25d3c94cb2b1c62c09f6fe8e7ff4f9b78a04e/pyobjectdict-1.0.1.post0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bec120881c357c83acfcde5041aa8cb19edee34e7c0d4e6a834e58387d0dbe9a",
          "md5": "9a0e351fb23686fe25b61776d5d75b39",
          "sha256": "fe188a068c1dbc3a288a5885949a7364327bacbe078a030e68c5c3df6798965b"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a0e351fb23686fe25b61776d5d75b39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6503,
        "upload_time": "2021-05-24T10:33:25",
        "upload_time_iso_8601": "2021-05-24T10:33:25.961943Z",
        "url": "https://files.pythonhosted.org/packages/be/c1/20881c357c83acfcde5041aa8cb19edee34e7c0d4e6a834e58387d0dbe9a/pyobjectdict-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b57d06a032de46cefe08b3effbe392a9b5b6fc1d8b13ac8aa29ae55288eb5eb",
          "md5": "c90e2b27af79121a91341f8fdde781d2",
          "sha256": "c3f3659117c3214278b5b5069950a34ea4e5a8201c4f1a7f3db44925b184b247"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c90e2b27af79121a91341f8fdde781d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6411,
        "upload_time": "2021-05-24T10:40:36",
        "upload_time_iso_8601": "2021-05-24T10:40:36.728802Z",
        "url": "https://files.pythonhosted.org/packages/1b/57/d06a032de46cefe08b3effbe392a9b5b6fc1d8b13ac8aa29ae55288eb5eb/pyobjectdict-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "563c9b41671ee27b8b791761cd2efa7b4e43d8957b23c03020537f7be839d9f4",
          "md5": "6cc825e7823e35234a9ffff54e39109d",
          "sha256": "6247f4cc412e4ec59bfeaedbc54a701b6decab07e15d652baae81d4c4fa2db31"
        },
        "downloads": -1,
        "filename": "pyobjectdict-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6cc825e7823e35234a9ffff54e39109d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6430,
        "upload_time": "2021-05-24T10:52:32",
        "upload_time_iso_8601": "2021-05-24T10:52:32.437299Z",
        "url": "https://files.pythonhosted.org/packages/56/3c/9b41671ee27b8b791761cd2efa7b4e43d8957b23c03020537f7be839d9f4/pyobjectdict-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "563c9b41671ee27b8b791761cd2efa7b4e43d8957b23c03020537f7be839d9f4",
        "md5": "6cc825e7823e35234a9ffff54e39109d",
        "sha256": "6247f4cc412e4ec59bfeaedbc54a701b6decab07e15d652baae81d4c4fa2db31"
      },
      "downloads": -1,
      "filename": "pyobjectdict-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6cc825e7823e35234a9ffff54e39109d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6430,
      "upload_time": "2021-05-24T10:52:32",
      "upload_time_iso_8601": "2021-05-24T10:52:32.437299Z",
      "url": "https://files.pythonhosted.org/packages/56/3c/9b41671ee27b8b791761cd2efa7b4e43d8957b23c03020537f7be839d9f4/pyobjectdict-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}