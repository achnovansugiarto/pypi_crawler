{
  "info": {
    "author": "Souvik Pratiher",
    "author_email": "spratiher9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<a href=\"https://ibb.co/gZdDQ7S\"><img src=\"https://i.ibb.co/d4tQXcP/Valido.png\" alt=\"Valido\" border=\"0\"></a>\n\n# Valido ðŸŒ©\n\nPySpark âš¡ dataframe workflow âš’ validator\n\n![PyPI](https://img.shields.io/pypi/v/valido)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/valido)\n![test](https://github.com/Spratiher9/Valido/workflows/Valido/badge.svg)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Description\n\nIn projects using PySpark, it's very common to have functions that take Spark DataFrames as input or produce them as\noutput. It's hard to figure out quickly what these DataFrames contain. This library offers simple decorators to annotate\nyour functions so that they document themselves and that documentation is kept up-to-date by validating the input and\noutput on runtime.\n\nFor example,\n\n```python\n@df_in(columns=[\"Brand\", \"Price\"])  # the function expects a DataFrame as input parameter with columns Brand and Price\n@df_out(columns=[\"Brand\", \"Price\"])  # the function will return a DataFrame with columns Brand and Price\ndef filter_cars(car_df):\n    # before this code is executed, the input DataFrame is validated according to the above decorator\n    # filter some cars..\n    return filtered_cars_df\n```\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Contributing](#contributing)\n* [Tests](#tests)\n* [License](#license)\n\n## Installation\n\nInstall with your favorite Python dependency manager (_pip_) like\n\n```sh\npip install valido\n```\n\n## Usage\n\nStart by importing the needed decorators:\n\n```python\nfrom valido import df_in, df_out\n```\n\nTo check a DataFrame input to a function, annotate the function with `@df_in`. For example the following function\nexpects to get a DataFrame with columns `Brand` and `Price`:\n\n```python\n@df_in(columns=[\"Brand\", \"Price\"])\ndef process_cars(car_df):\n# do stuff with cars\n```\n\nIf your function takes multiple arguments, specify the field to be checked with it's `name`:\n\n```python\n@df_in(name=\"car_df\", columns=[\"Brand\", \"Price\"])\ndef process_cars(year, style, car_df):\n# do stuff with cars\n```\n\n_Note:_\nSince this will evaluate it at runtime please use named arguments in the function call like this:\n```\nprocess_cars(year = 2021, style = \"Mazda\", car_df = mydf)\n```\n\nTo check that a function returns a DataFrame with specific columns, use `@df_out` decorator:\n\n```python\n@df_out(columns=[\"Brand\", \"Price\"])\ndef get_all_cars():\n    # get those cars\n    return all_cars_df\n```\n\nIn case one of the listed columns is missing from the DataFrame, a helpful assertion error is thrown:\n\n```shell\nAssertionError(\"Column Price missing from DataFrame. Got columns: ['Brand']\")\n```\n\nTo check both input and output, just use both annotations on the same function:\n\n```python\n@df_in(columns=[\"Brand\", \"Price\"])\n@df_out(columns=[\"Brand\", \"Price\"])\ndef filter_cars(car_df):\n    # filter some cars\n    return filtered_cars_df\n```\n\nIf you want to also check the data types of each column, you can replace the column array:\n\n```python\ncolumns = [\"Brand\", \"Price\"]\n```\n\nwith a dict:\n\n```python\ncolumns = {\"Brand\": \"string\", \"Price\": \"int\"}\n```\n\nThis will not only check that the specified columns are found from the DataFrame but also that their `dtype` is the\nexpected. In case of a wrong `dtype`, an error message similar to following will explain the mismatch:\n\n```shell\nAssertionError(\"Column Price has wrong dtype. Was int, expected double\")\n```\n\nYou can enable strict-mode for both `@df_in` and `@df_out`. This will raise an error if the DataFrame contains columns\nnot defined in the annotation:\n\n```python\n@df_in(columns=[\"Brand\"], strict=True)\ndef process_cars(car_df):\n# do stuff with cars\n```\n\nwill raise an error when `car_df` contains columns `[\"Brand\", \"Price\"]`:\n\n```shell\nAssertionError: DataFrame contained unexpected column(s): Price\n```\n\nTo quickly check what the incoming and outgoing dataframes contain, you can add a `@df_log` annotation to the function.\nFor example adding `@df_log` to the above `filter_cars` function will product log lines:\n\n```shell\nFunction filter_cars parameters contained a DataFrame: columns: ['Brand', 'Price']\nFunction filter_cars returned a DataFrame: columns: ['Brand', 'Price']\n```\n\nor with `@df_log(include_dtypes=True)` you get:\n\n```shell\nFunction filter_cars parameters contained a DataFrame: columns: ['Brand', 'Price'] with dtypes ['object', 'int64']\nFunction filter_cars returned a DataFrame: columns: ['Brand', 'Price'] with dtypes ['object', 'int64']\n```\n\n_Note_:\n`@df_log(include_dtypes=True)` also takes the `name` parameter like `df_in` for the multi-param functions validation\n\n## Contributing\n\nContributions are accepted. Include tests in PR's.\n\n## Development\n\nTo run the tests, clone the repository, install dependencies with _pip_ and run tests with _PyTest_:\n\n```shell\npython -m pytest --import-mode=append tests/\n```\n\n## License\n\nBSD 3-Clause License\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "valido",
    "package_url": "https://pypi.org/project/valido/",
    "platform": "",
    "project_url": "https://pypi.org/project/valido/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/valido/0.1.0/",
    "requires_dist": [
      "atomicwrites",
      "attrs",
      "colorama",
      "iniconfig",
      "numpy",
      "packaging",
      "pandas",
      "pluggy",
      "py",
      "py4j",
      "pyparsing",
      "pyspark",
      "pytest",
      "pytest-mock",
      "python-dateutil",
      "pytz",
      "six",
      "toml"
    ],
    "requires_python": ">=3.8",
    "summary": "PySpark dataframes based workflow validator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12348538,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6ff9249408a0ba912242c9d7dd3553afb573211e85bc6c1ffab513876b59648",
          "md5": "d95a06297622736d066a4d687c0fd588",
          "sha256": "ee42e569f12b5602e550af566d5bd300d6616e2dde5395907ac75f7d2ba8e4b3"
        },
        "downloads": -1,
        "filename": "valido-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d95a06297622736d066a4d687c0fd588",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7798,
        "upload_time": "2021-12-18T15:28:43",
        "upload_time_iso_8601": "2021-12-18T15:28:43.007476Z",
        "url": "https://files.pythonhosted.org/packages/f6/ff/9249408a0ba912242c9d7dd3553afb573211e85bc6c1ffab513876b59648/valido-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30c999b08eec74e4eb6e75dcb78e7106e04e5ca6b8146fc51aaeae13483f5422",
          "md5": "d736f2c7b3d1736f0b596d1a7aef6628",
          "sha256": "1eba63815920e3a2058872ab80d69b98b26566feed1d4cca7ff9cc1642ef37e3"
        },
        "downloads": -1,
        "filename": "valido-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d736f2c7b3d1736f0b596d1a7aef6628",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8727,
        "upload_time": "2021-12-18T15:28:45",
        "upload_time_iso_8601": "2021-12-18T15:28:45.865093Z",
        "url": "https://files.pythonhosted.org/packages/30/c9/99b08eec74e4eb6e75dcb78e7106e04e5ca6b8146fc51aaeae13483f5422/valido-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6ff9249408a0ba912242c9d7dd3553afb573211e85bc6c1ffab513876b59648",
        "md5": "d95a06297622736d066a4d687c0fd588",
        "sha256": "ee42e569f12b5602e550af566d5bd300d6616e2dde5395907ac75f7d2ba8e4b3"
      },
      "downloads": -1,
      "filename": "valido-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d95a06297622736d066a4d687c0fd588",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7798,
      "upload_time": "2021-12-18T15:28:43",
      "upload_time_iso_8601": "2021-12-18T15:28:43.007476Z",
      "url": "https://files.pythonhosted.org/packages/f6/ff/9249408a0ba912242c9d7dd3553afb573211e85bc6c1ffab513876b59648/valido-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30c999b08eec74e4eb6e75dcb78e7106e04e5ca6b8146fc51aaeae13483f5422",
        "md5": "d736f2c7b3d1736f0b596d1a7aef6628",
        "sha256": "1eba63815920e3a2058872ab80d69b98b26566feed1d4cca7ff9cc1642ef37e3"
      },
      "downloads": -1,
      "filename": "valido-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d736f2c7b3d1736f0b596d1a7aef6628",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8727,
      "upload_time": "2021-12-18T15:28:45",
      "upload_time_iso_8601": "2021-12-18T15:28:45.865093Z",
      "url": "https://files.pythonhosted.org/packages/30/c9/99b08eec74e4eb6e75dcb78e7106e04e5ca6b8146fc51aaeae13483f5422/valido-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}