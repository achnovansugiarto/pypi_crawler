{
  "info": {
    "author": "Arjunsingh Yadav, Manish Magnani, Devesh Ratthour",
    "author_email": "arjunsinghyadav@fynd.com, manishmagnani@gofynd.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Async HTTP / SOAP / FTP Request Library\n\nThis library provides the functionality to make async API calls via HTTP / SOAP / FTP protocols via a config.\n\n### Installation\n```pip install asyncio-requests ```\n\n## HTTP\n\n* Uses aiohttp internally\n* Has an inbuilt circuit breaker\n* Currently supports infinite nested depth of pre and post processors\n* Retry Functionality\n* Exceptions can be contributed in the utilities, and you can use your own exceptions in the circuit breaker config as well.\n* Direct File Upload functionality.\n\nParams -\n\n<table>\n  <tbody>\n    <tr>\n      <th class=\"Title\" align=\"center\">Param</th>\n      <th class=\"Title\" align=\"center\">Data Type</th>\n      <th class=\"Title\" align=\"center\">Optional/Required</th>\n      <th class=\"Title\" align=\"center\">Help</th>\n    </tr>\n    <tr>\n      <td align=\"center\">url</td>\n      <td align=\"center\">Str</td>\n      <td align=\"center\">Required</td>\n      <td align=\"center\">URL to be hit</td>\n    </tr>\n    <tr>\n      <td align=\"center\">data</td>\n      <td align=\"center\">Dict</td>\n      <td align=\"center\">Optional</td>\n      <td align=\"center\">data to be sent. It can be dict or str. If dict, it will be dumped via ujson.dumps method</td>\n    </tr>\n    <tr>\n      <td align=\"center\">auth</td>\n      <td align=\"center\">auth object</td>\n      <td align=\"center\">Optional</td>\n      <td align=\"center\">Auth param is expected to be an auth object of your choice which is accepted by aiohttp. Eg - aiohttp.BasicAuth(username, password)</td>\n    </tr>\n    <tr>\n      <td align=\"center\">protocol</td>\n      <td align=\"center\">Str</td>\n      <td align=\"center\">Required</td>\n      <td align=\"center\">(HTTP/HTTPS/SOAP/FTP)</td>\n    </tr>\n    <tr>\n      <td align=\"center\">pre_processor_config</td>\n      <td align=\"center\">Dict</td>\n      <td align=\"center\">Optional</td>\n      <td>\n        <ul>\n          <li>pre processor indicates an action (file download/api call or anything) to be done before making the actual API call.</li>\n          <li>Takes async callable object which is executed before making the actual API call - Required</li>\n          <li>Params dictionary where key is parameter to the callable object passed in pre processor and values is parameter value</li>\n          <li>The callable object/function can be used from the utilities folder which is contributed by all or your own function address.</li>\n          <li>You can nest the whole API. Eg - you can pass the address of asyncio_requests.request function too. The response will be a nested one. (Explained via example down)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\">post_processor_config</td>\n      <td align=\"center\">Dict</td>\n      <td align=\"center\">Optional</td>\n      <td>\n        <ul>\n          <li>post processor indicates an action (file download or delete file or api call or anything) to be done post making the actual API call.</li>\n          <li>function: Takes async callable object/function address which is executed after making request - Required</li>\n          <li>Params: Takes dictionary where key is parameter to the callable object/function passed in pre-processor and values is parameter value</li>\n          <li>similar to pre-processor, difference being this is executed after making an API call.</li>\n          <li>Eg - if you want to send the data of a file in the API call and the file needs to be downloaded. You can have a file download pre-processor function and have a file deletion post processor function.</li>\n        </ul>\n      </td>\n    </tr>\n    <tr aria-rowspan=\"12\">\n      <td align=\"center\">protocol_info</td>\n      <td align=\"center\">Dict</td>\n      <td align=\"center\">Required</td>\n      <td>\n        <ul>\n          <li>request_type - Str. Required. GET/PUT/POST/PATCH/DELETE/OPTIONS</li>\n          <li>timeout -      Int. Optional. Default HTTP timeout is 15 seconds. Can be overridden if specified.</li>\n          <li>certificate -  Tuple(str, str)  Optional. Used for SSL certificates and expected in the format Tuple('certificate path', 'certificate key path')</li>\n          <li>verify_ssl -   Boolean. Optional. SSL is enabled by default</li>\n          <li>cookies -      Str. Optional</li>\n          <li>headers -      Dict. Required</li>\n          <li>trace_config - List[tracer_callable_object] Optional. default tracer is aiohttp.TraceConfig() - Optional</li>\n          <li>\n            http_file_upload_config: Dict use this only if you want to send file in request. If you use this config then only file will be sent in request - Optional\n            <ul>\n              <li>local_filepath: machine file path for file to be sent in request</li>\n              <li>file_key: The key in which the file data is to be sent</li>\n            </ul>\n          </li>serialization: serializer callable object. Optional. If you want to use any json serializer then you can pass here default is ujson.dumps.</li>\n          <li>circuit_breaker_config - Dict - Optional\n            <ul>\n              <li>maximum_failures - Int. Optional. maximum failures you want to allow for request default is 5</li>\n              <li>timeout - Int Optional. seconds timeout you want to keep for request default is 60 seconds</li>\n              <li>retry_config - Dict - Optional\n                <ul>\n                  <li>name - Str required</li>\n                  <li>allowed_retries - Int. Required this is for how many retries you want to perform</li>\n                  <li>retriable_exceptions - List[<callable object of exception>]. Optional. list of exception types indicating which exceptions can cause a retry. If None every exception is considered retriable</li>\n                  <li>abortable_exceptions - List[<callable object of exception>]. Optional. list of exception types indicating which exceptions should abort failsafe run immediately and be propagated out of failsafe. If None, no exception is considered abortable.</li>\n                  <li>on_retries_exhausted - callable object. Optional. callable/function_address which will be invoked on retry exhausted event</li>\n                  <li>on_failed_attempt - callable object. Optional. callable/function_address that will be invoked on a failed attempt event</li>\n                  <li>on_abort - callable object. Optional. callable that will be invoked on an abort event</li>\n                  <li>delay - Int Optional. seconds of delay between retries default is 0.</li> \n                  <li>max_delay - Int Optional. seconds of max delay between retries default 0</li>\n                  <li>jitter: Boolean Optional. False when you want to keep the wait between calls constant else True</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nDefaults - \n* By default, circuit breaker is not enabled and is activated only if provided with its config.\n* By default, retry is not enabled and is activated only if provided with its config.\n* Default Request tracer is enabled which provides the traces of the whole request wrt data chunks, dns cache hit etc.\n* In case of user specific request tracer, a list of request tracer objects is expected which will override the default tracer.\n* Default serialization is via ujson and can be overwritten by specifying one\n* SSL is enabled by default\n\n \n\n### How to Use\n* Design the http request payload as per below format\n* Mock url - https://api.fyndx1.de/masquerader/v1/aio-request-test/post is live and open for use.\n\n```python\nimport aiohttp\nfrom asyncio_requests.asyncio_request import request\n\nawait request(\n    url=\"URL FOR REQUEST\",  # str <Required>\n    data={\n        \"key\": \"val\"\n    } or \"\",  # Data to be sent in body as dict or str,\n    auth=aiohttp.BasicAuth('username', 'password'),  # This auth object is to be made by the user itself as there are n number of\n    # auth mechanisms to add to. Eg - auth=aiohttp.BasicAuth(username, password). Its an Optional field.\n    protocol=\"REQUEST PROTOCOL\",  # str <Required> (HTTP/HTTPS)\n    protocol_info={\n        \"request_type\": \"GET\",  # str <Required>\n        \"timeout\": 15,  # int <Optional> Default - 15\n        \"certificate\": ('', ''),  # Tuple(str, str) <Optional>,\n        \"verify_ssl\": True,  # Boolean <Optional>,\n        \"cookies\": \"\",  # str <Optional>,\n        \"headers\": {},  # dict <Optional>,\n        \"http_file_upload_config\": {\n            # optional Include only if you want call api with file. If this is included api body will have only file\n            \"local_filepath\": \"required\",  # File path to be sent\n            \"file_key\": \"required\",  # File to be sent on which key in request body\n            \"file_upload_chunk_size\": \"optional\" # size of stream if streaming upload is required\n            # After making API if you want to delete file then add value as True default is false.\n        },\n        \"http_file_download_config\": {\n          \"download_filepath\": \"required\" # In case file downloads, location to which file is stored\n          \"file_download_chunk_size\": \"optional\" # chunk size of a stream.\n        }\n        \"circuit_breaker_config\": {  # Optional\n            \"maximum_failures\": int,  # Optional Failures allowed\n            \"timeout\": int,  # Optional time in seconds\n            \"retry_config\": {  # Optional Include this if you want retry API calls if failed on first time\n                \"name\": str,  # Required Any name\n                \"allowed_retries\": int,  # Required number of retries you want to make \n                \"retriable_exceptions\": [<callable object>] # Optional\n                \"abortable_exceptions\": [<callable object>] # Optional\n                \"on_retries_exhausted\": <callable object>, # Optional callable that will be invoked on a retries exhausted event,\n                \"on_failed_attempt\": <callable object>, # Optional callable that will be invoked on a failed attempt event,\n                \"on_abort\": <callable object>, # Optional callable that will be invoked on an abort event,\n            \"delay\": int, # seconds of delay between retries Optional default 0,\n            \"max_delay\": int, # seconds of max delay between retries Optional default 0,\n        \"jitter\": bool # Boolean Optional,\n            }\n        }\n    },\n    pre_processor_config = {  # Optional\n        \"function\": <callable object>,  # Required function that you want to call before http call\n        \"params\": {  # Optional\n            \"param1\": \"value1\" # Params you want to pass in function\n        }\n    },\n    post_processor_config = {  # Optional\n        \"function\": <callable object>,  # Required function that you want to call after http call \n        \"params\": {\n            \"param1\": \"value1\" # Params you want to pass in function\n        }\n    }\n)\n```\n\n* **Basic HTTP POST call**\n```python\nfrom asyncio_requests.asyncio_request import request\n\n\nresult = await request(\n    url=\"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n    data={\n        \"first_name\": \"Joy\",\n        \"last_name\": \"Pandey\",\n        \"gender\": \"M\"\n    },\n    protocol=\"HTTPS\",\n    protocol_info={\n        \"request_type\": \"POST\"\n    }\n)\n\n### Response\n\"\"\"\n{\n  'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n  'payload': {\n    'first_name': 'Joy',\n    'last_name': 'Pandey',\n    'gender': 'M'\n  },\n  'external_call_request_time': '2022-02-17 17:25:03.930531+05:30',\n  'text': '',\n  'error_message': '',\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Date': 'Thu, 17 Feb 2022 11:55:04 GMT',\n      'Content-Type': 'application/json',\n      'Content-Length': '57',\n      'Connection': 'keep-alive',\n      'X-Fynd-Trace-Id': '78ca02ff444ae5855e856c5f3d769364'\n    },\n    'cookies': {\n      \n    },\n    'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'json': {\n      'method': 'POST',\n      'status': True,\n      'error_message': None\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 287753.868594354,\n        'is_redirect': False,\n        'on_connection_create_start': 0.0002811980084516108,\n        'on_dns_cache_miss': 0.002910615992732346,\n        'on_dns_resolvehost_start': 0.0029266909696161747,\n        'on_dns_resolvehost_end': 0.04894679499557242,\n        'on_connection_create_end': 0.15098483895417303,\n        'on_request_chunk_sent': 0.15202936198329553,\n        'on_request_end': 0.2799108889885247\n      }\n    ]\n  }\n}\n\"\"\"\n```\n\n* **API call with circuit breaker and custom exceptions**\n```python\nfrom asyncio_requests.asyncio_request import request\n\n\nclass HTTPRequestFailedException(Exception):\n    pass\n\n\nclass CustomException(Exception):\n    pass\n\n\ndef retry_exhausted_actions():\n    print(\"All retries exhausted. API call failed.\")\n    \n    \ndef request_attempt_failed_actions():\n    print(\"API call failed.\")\n    \n    \ndef request_abort_actions():\n    print(\"API call aborted\")\n\n\nresult = await request(\n    url=\"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n    data={\n        \"first_name\": \"Joy\",\n        \"last_name\": \"Pandey\",\n        \"gender\": \"M\"\n    },\n    protocol=\"HTTPS\",\n    protocol_info={\n        \"request_type\": \"POST\",\n        \"circuit_breaker_config\": {\n            \"maximum_failures\": 5,\n            \"timeout\": 15,\n            \"retry_config\": {\n                \"name\": \"retry_masquerader\",\n                \"allowed_retries\": 5,\n                \"retriable_exceptions\": [HTTPRequestFailedException],\n                \"abortable_exceptions\": [CustomException],\n                \"on_retries_exhausted\": retry_exhausted_actions,\n                \"on_failed_attempt\": request_attempt_failed_actions,\n                \"on_abort\": request_abort_actions,\n                \"delay\": 5,\n                \"max_delay\": 300,\n                \"jitter\": True\n            }\n        }\n    }\n)\n\n### Value of result\n\"\"\"\n{\n  'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n  'payload': {\n    'first_name': 'Joy',\n    'last_name': 'Pandey',\n    'gender': 'M'\n  },\n  'external_call_request_time': '2022-02-18 12:57:20.762713+05:30',\n  'text': '',\n  'error_message': '',\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Date': 'Fri, 18 Feb 2022 07:27:21 GMT',\n      'Content-Type': 'application/json',\n      'Content-Length': '57',\n      'Connection': 'keep-alive',\n      'X-Fynd-Trace-Id': '390cd5e9f4b1f179d5d711ca7bc83ec3'\n    },\n    'cookies': {\n      \n    },\n    'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'json': {\n      'method': 'POST',\n      'status': True,\n      'error_message': None\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 352622.180567606,\n        'is_redirect': False,\n        'on_connection_create_start': 0.0009668020065873861,\n        'on_dns_cache_miss': 0.07304156001191586,\n        'on_dns_resolvehost_start': 0.07307461701566353,\n        'on_dns_resolvehost_end': 0.31564718199661,\n        'on_connection_create_end': 0.5526716759777628,\n        'on_request_chunk_sent': 0.5531467269756831,\n        'on_request_end': 0.6851100819767453\n      }\n    ]\n  }\n}\n\"\"\"\n```\n\n* **API with pre and post processor enabled with circuit breaker and retries.**\n```python\nfrom asyncio_requests.asyncio_request import request\nfrom typing import Dict, Text\n\n\nasync def make_request_payload(response: Dict, first_name: Text, last_name: Text, gender: Text):\n    response[\"payload\"] = {\n        \"first_name\": first_name,\n        \"last_name\": last_name,\n        \"gender\": gender\n    }\n\n\nasync def print_response_recieved_from_api(response: Dict, text: Text):\n    print(f\"{text}{response['api_response']}\")\n\n\nresult = await request(\n    url=\"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n    protocol=\"HTTPS\",\n    protocol_info={\n        \"request_type\": \"POST\",\n        \"circuit_breaker_config\": {\n            \"timeout\": 150,\n            \"retry_config\": {\n                \"name\": \"api_retry\",\n                \"allowed_retries\": 4\n            }\n        }\n    },\n    pre_processor_config={\n        \"function\": make_request_payload,\n        \"params\": {\n            \"first_name\": \"Joy\",\n            \"last_name\": \"Pandey\",\n            \"gender\": \"M\"\n        }\n    },\n    post_processor_config={\n        \"function\": print_response_recieved_from_api,\n        \"params\": {\n            \"text\": \"Response received from API: \"\n        }\n    }\n)\n\n### Response\n### The pre and post processor keys have no values in response since they were just print statements. Had they been API calls, the value would have been different.\n### The print statements will be printed in the shell if run but won't have its resemblence in the response.\n\"\"\"\n{\n  'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n  'payload': {\n    'first_name': 'Joy',\n    'last_name': 'Pandey',\n    'gender': 'M'\n  },\n  'external_call_request_time': '2022-02-17 17:33:35.508376+05:30',\n  'text': '',\n  'error_message': '',\n  'pre_processor_response': None,\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Date': 'Thu, 17 Feb 2022 12:03:35 GMT',\n      'Content-Type': 'application/json',\n      'Content-Length': '57',\n      'Connection': 'keep-alive',\n      'X-Fynd-Trace-Id': '8903eeb30ed218385631d3b52d04b38e'\n    },\n    'cookies': {\n      \n    },\n    'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'json': {\n      'method': 'POST',\n      'status': True,\n      'error_message': None\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 288265.446420053,\n        'is_redirect': False,\n        'on_connection_create_start': 0.00028238497907295823,\n        'on_dns_cache_miss': 0.0028724189614877105,\n        'on_dns_resolvehost_start': 0.002888173970859498,\n        'on_dns_resolvehost_end': 0.09302646096330136,\n        'on_connection_create_end': 0.2075990799930878,\n        'on_request_chunk_sent': 0.20890663599129766,\n        'on_request_end': 0.319920428970363\n      }\n    ]\n  },\n  'post_processor_response': None\n}\n\"\"\"\n```\n\n* **Having separate API call in pre-processor.**\n* This is usually the case wherein we want to report some data before making the actual API call\n```python\nfrom asyncio_requests.asyncio_request import request\n\nresult = await request(\n    url=\"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n    data={\n        \"first_name\": \"Joy\",\n        \"last_name\": \"Pandey\",\n        \"gender\": \"M\"\n    },\n    protocol=\"HTTPS\",\n    protocol_info={\n        \"request_type\": \"POST\"\n    },\n    pre_processor_config={\n        \"function\": request,\n        \"async_enabled\": True,\n        \"params\": {\n            \"url\": \"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n            \"data\": {\n                \"first_name\": \"Joy\",\n                \"last_name\": \"Pandey\",\n                \"Gender\": \"M\"\n            },\n            \"protocol\": \"HTTP\",\n            \"protocol_info\": {\n                \"request_type\": \"POST\"\n            }\n        }\n    }\n)\n\n### Value of result\n\"\"\"\n{\n  'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n  'payload': {\n    'first_name': 'Joy',\n    'last_name': 'Pandey',\n    'gender': 'M'\n  },\n  'external_call_request_time': '2022-02-18 13:26:35.575362+05:30',\n  'text': '',\n  'error_message': '',\n  'pre_processor_response': {\n    'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n    'payload': {\n      'first_name': 'Joy',\n      'last_name': 'Pandey',\n      'Gender': 'M'\n    },\n    'external_call_request_time': '2022-02-18 13:26:35.575469+05:30',\n    'text': '',\n    'error_message': '',\n    'api_response': {\n      'status_code': 200,\n      'headers': {\n        'Date': 'Fri, 18 Feb 2022 07:56:36 GMT',\n        'Content-Type': 'application/json',\n        'Content-Length': '57',\n        'Connection': 'keep-alive',\n        'X-Fynd-Trace-Id': 'ae2703a4c82e8f917c53faded0688717'\n      },\n      'cookies': {},\n      'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'json': {\n        'method': 'POST',\n        'status': True,\n        'error_message': None\n      },\n      'request_tracer': [\n        {\n          'on_request_start': 354376.993160197,\n          'is_redirect': False,\n          'on_connection_create_start': 0.00041024398524314165,\n          'on_dns_cache_miss': 0.004407248983625323,\n          'on_dns_resolvehost_start': 0.0044287089840509,\n          'on_dns_resolvehost_end': 0.32443026901455596,\n          'on_connection_create_end': 0.44923901598667726,\n          'on_request_chunk_sent': 0.449799319030717,\n          'on_request_end': 0.5300842020078562\n        }\n      ]\n    }\n  },\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Date': 'Fri, 18 Feb 2022 07:56:36 GMT',\n      'Content-Type': 'application/json',\n      'Content-Length': '57',\n      'Connection': 'keep-alive',\n      'X-Fynd-Trace-Id': 'ddb370fbf58999c359fe384b547446c9'\n    },\n    'cookies': {},\n    'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'json': {\n      'method': 'POST',\n      'status': True,\n      'error_message': None\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 354377.524928869,\n        'is_redirect': False,\n        'on_connection_create_start': 0.000421632023062557,\n        'on_dns_cache_miss': 0.00067474803654477,\n        'on_dns_resolvehost_start': 0.0006999420002102852,\n        'on_dns_resolvehost_end': 0.002583371999207884,\n        'on_connection_create_end': 0.09995210904162377,\n        'on_request_chunk_sent': 0.10060718702152371,\n        'on_request_end': 0.2261603070073761\n      }\n    ]\n  }\n}\n\"\"\"\n```\n\n* **API call with nested pre and post processors**\n* Here the pre processor(parent) has another pre-processor(child) within it.\n* The response will include all the nested responses in the same fashion as that of the config set\n* The actual flow would be (child pre-processor -> parent pre-processor -> main API call -> parent post-processor -> child post processor)\n* response format will be this way -\n```\n    parent pre-processor response\n        child pre processor response\n            child's child pre preprocesor response\n                infinite nesting...\n    \n    main api call response\n    \n    parent post-processor response\n        child post processor response\n            child's child post preprocesor response\n                infinite nesting...\n```\n\n```python\nfrom asyncio_requests.asyncio_request import request\n\n\nasync def test_fun(*args, **kwargs):\n    return {\"text\": \"final res\"}\n\n\nresult = await request(\n    url=\"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n    data={\n        \"first_name\": \"Joy\",\n        \"last_name\": \"Pandey\",\n        \"Gender\": \"M\"\n    },\n    protocol=\"HTTP\",\n    protocol_info={\n        \"request_type\": \"POST\",\n        \"circuit_breaker_config\": {\n            \"timeout\": 150,\n            \"retry_config\": {\n                \"name\": \"asdf\",\n                \"allowed_retries\": 1\n            }\n        }\n    },\n    pre_processor_config={\n        \"function\": request,\n        \"async_enabled\": True,\n        \"params\": {\n            \"url\": \"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n            \"data\": {\n                \"first_name\": \"Joy\",\n                \"last_name\": \"Pandey\",\n                \"Gender\": \"M\"\n            },\n            \"protocol\": \"HTTP\",\n            \"protocol_info\": {\n                \"request_type\": \"POST\",\n                \"circuit_breaker_config\": {\n                    \"retry_config\": {\n                        \"name\": \"asdf\",\n                        \"allowed_retries\": 5\n                    }\n                },\n            },\n            \"pre_processor_config\": {\n                \"function\": test_fun,\n                \"async_enabled\": True,\n                \"params\": {\n                    \"url\": \"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n                    \"data\": {\n                        \"first_name\": \"Joy\",\n                        \"last_name\": \"Pandey\",\n                        \"Gender\": \"M\"\n                    },\n                    \"protocol\": \"HTTP\",\n                    \"protocol_info\": {\n                        \"request_type\": \"POST\",\n                        \"circuit_breaker_config\": {\n                            \"retry_config\": {\n                                \"name\": \"asdf\",\n                                \"allowed_retries\": 5\n                            }\n                        },\n                    }\n                }\n            }\n        }\n    },\n    post_processor_config={\n        \"function\": request,\n        \"async_enabled\": True,\n        \"params\": {\n            \"url\": \"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n            \"data\": {\n                \"first_name\": \"Joy\",\n                \"last_name\": \"Pandey\",\n                \"Gender\": \"M\"\n            },\n            \"protocol\": \"HTTP\",\n            \"protocol_info\": {\n                \"request_type\": \"POST\",\n                \"circuit_breaker_config\": {\n                    \"retry_config\": {\n                        \"name\": \"asdf\",\n                        \"allowed_retries\": 5\n                    }\n                },\n            },\n            \"post_processor_config\": {\n                \"function\": test_fun,\n                \"async_enabled\": True,\n                \"params\": {\n                    \"url\": \"https://api.fyndx1.de/masquerader/v1/aio-request-test/post\",\n                    \"data\": {\n                        \"first_name\": \"Joy\",\n                        \"last_name\": \"Pandey\",\n                        \"Gender\": \"M\"\n                    },\n                    \"protocol\": \"HTTP\",\n                    \"protocol_info\": {\n                        \"request_type\": \"POST\",\n                        \"circuit_breaker_config\": {\n                            \"retry_config\": {\n                                \"name\": \"asdf\",\n                                \"allowed_retries\": 5\n                            }\n                        },\n                    }\n                }\n            }\n        }\n    }\n)\n\n### Response\n\"\"\"\n{\n  'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n  'payload': {\n    'first_name': 'Joy',\n    'last_name': 'Pandey',\n    'Gender': 'M'\n  },\n  'external_call_request_time': '2022-02-17 17:22:01.383304+05:30',\n  'text': '',\n  'error_message': '',\n  'pre_processor_response': {\n    'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n    'payload': {\n      'first_name': 'Joy',\n      'last_name': 'Pandey',\n      'Gender': 'M'\n    },\n    'external_call_request_time': '2022-02-17 17:22:01.383358+05:30',\n    'text': '',\n    'error_message': '',\n    'pre_processor_response': {\n      'text': 'final res'\n    },\n    'api_response': {\n      'status_code': 200,\n      'headers': {\n        'Date': 'Thu, 17 Feb 2022 11:52:01 GMT',\n        'Content-Type': 'application/json',\n        'Content-Length': '57',\n        'Connection': 'keep-alive',\n        'X-Fynd-Trace-Id': 'b1a3111270067ae160eeaf9971b04cc5'\n      },\n      'cookies': {\n        \n      },\n      'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'json': {\n        'method': 'POST',\n        'status': True,\n        'error_message': None\n      },\n      'request_tracer': [\n        {\n          'on_request_start': 287571.321608293,\n          'is_redirect': False,\n          'on_connection_create_start': 0.00031328899785876274,\n          'on_dns_cache_miss': 0.0029667950002476573,\n          'on_dns_resolvehost_start': 0.0029829980339854956,\n          'on_dns_resolvehost_end': 0.0064852479845285416,\n          'on_connection_create_end': 0.08529951400123537,\n          'on_request_chunk_sent': 0.0858444279874675,\n          'on_request_end': 0.1671372150303796\n        }\n      ]\n    }\n  },\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Date': 'Thu, 17 Feb 2022 11:52:01 GMT',\n      'Content-Type': 'application/json',\n      'Content-Length': '57',\n      'Connection': 'keep-alive',\n      'X-Fynd-Trace-Id': '3340481533a6511b15952cabb4c144bb'\n    },\n    'cookies': {\n      \n    },\n    'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n    'json': {\n      'method': 'POST',\n      'status': True,\n      'error_message': None\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 287571.490459029,\n        'is_redirect': False,\n        'on_connection_create_start': 0.0006432340014725924,\n        'on_dns_cache_miss': 0.00104641099460423,\n        'on_dns_resolvehost_start': 0.001091104990337044,\n        'on_dns_resolvehost_end': 0.0037200640072114766,\n        'on_connection_create_end': 0.10335264401510358,\n        'on_request_chunk_sent': 0.10410607699304819,\n        'on_request_end': 0.18950222100829706\n      }\n    ]\n  },\n  'post_processor_response': {\n    'url': 'https://api.fyndx1.de/masquerader/v1/aio-request-test/post',\n    'payload': {\n      'first_name': 'Joy',\n      'last_name': 'Pandey',\n      'Gender': 'M'\n    },\n    'external_call_request_time': '2022-02-17 17:22:01.743288+05:30',\n    'text': '',\n    'error_message': '',\n    'api_response': {\n      'status_code': 200,\n      'headers': {\n        'Date': 'Thu, 17 Feb 2022 11:52:02 GMT',\n        'Content-Type': 'application/json',\n        'Content-Length': '57',\n        'Connection': 'keep-alive',\n        'X-Fynd-Trace-Id': 'a0304896aabbc394894d442fa27a5c3e'\n      },\n      'cookies': {\n        \n      },\n      'content': b'{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'text': '{\"method\": \"POST\", \"status\": true, \"error_message\": null}',\n      'json': {\n        'method': 'POST',\n        'status': True,\n        'error_message': None\n      },\n      'request_tracer': [\n        {\n          'on_request_start': 287571.681455504,\n          'is_redirect': False,\n          'on_connection_create_start': 0.00041248503839597106,\n          'on_dns_cache_miss': 0.0006613450241275132,\n          'on_dns_resolvehost_start': 0.0006853759987279773,\n          'on_dns_resolvehost_end': 0.0024919320130720735,\n          'on_connection_create_end': 0.08381915499921888,\n          'on_request_chunk_sent': 0.08448734600096941,\n          'on_request_end': 0.5899507160065696\n        }\n      ]\n    },\n    'post_processor_response': {\n      'text': 'final res'\n    }\n  }\n}\n\"\"\"\n```\n\n* **API call to send a file**\n* Here we are downloading a file in the pre-processor. If the file is already present in the system then you can avoid that pre-processor and directly mention the file address in the local_file_path variable.\n* The file can be downloaded by using the existing pre processor function in the utilities.\n* The Utilities dir has a function that supports file download via url/aws s3.\n* The Utilities dir also has a function to delete a file. If you want to delete teh file post making the API call, use this in the post processor.\n* If you have some other way around to download the file, just pass that function address in the pre processor and include the file address in the local_file_path variable.\n\n```python\nfrom asyncio_requests.asyncio_request import request\nfrom asyncio_requests.utils.http_file_upload_config import download_file_from_url, delete_local_file_path\n\n\nlocal_file_path = \"/tmp/test.pdf\"\nresult = await request(\n    url=\"http://localhost:5000/api/v1/test/aio-request-files\",\n    protocol=\"HTTPS\",\n    protocol_info={\n        \"request_type\": \"POST\",\n        \"http_file_upload_config\": {\n            \"local_filepath\": local_file_path,\n            \"file_key\": \"file\"\n        }\n    },\n    pre_processor_config={\n        \"function\": download_file_from_url,\n        \"params\": {\n            \"file_download_path\": \"https://didukhn.github.io/homepage/assets/img/photo.jpg\",\n            \"local_filepath\": local_file_path\n        }\n    },\n    post_processor_config={\n        \"function\": delete_local_file_path,\n        \"params\": {\n            \"local_filepath\": local_file_path\n        }\n    }\n)\n\n### Response\n\"\"\"\n{\n  'url': 'http://localhost:5000/api/v1/test/aio-request-files',\n  'payload': {\n    \n  },\n  'external_call_request_time': '2022-02-17 17:13:03.231826+05:30',\n  'text': '',\n  'error_message': '',\n  'pre_processor_response': None,\n  'api_response': {\n    'status_code': 200,\n    'headers': {\n      'Connection': 'close',\n      'Content-Length': '29',\n      'Content-Type': 'application/json'\n    },\n    'cookies': {\n      \n    },\n    'content': b'{\"success\":true,\"message\":\"\"}',\n    'text': '{\"success\":true,\"message\":\"\"}',\n    'json': {\n      'success': True,\n      'message': ''\n    },\n    'request_tracer': [\n      {\n        'on_request_start': 287033.4935145,\n        'is_redirect': False,\n        'on_connection_create_start': 0.0021707930136471987,\n        'on_dns_cache_miss': 0.002449413004796952,\n        'on_dns_resolvehost_start': 0.002480961033143103,\n        'on_dns_resolvehost_end': 0.003233974042814225,\n        'on_connection_create_end': 0.0042467640014365315,\n        'on_request_chunk_sent': 0.0064254660392180085,\n        'on_request_end': 0.1773580180015415\n      }\n    ]\n  },\n  'post_processor_response': None\n}\n\"\"\"\n```\n\n**Utilities Included**\n* Download a file from AWS S3\n* Download a file from public url\n* Delete a local file on system\n\n\n## FTP\n\n* Uses aioftp internally to implement FTP/FTPS.\n* Added functionality of circuit breaker, pre and post processor configs same as http.\n* Can Leverage all the ftp commands provided by aioftp library.\n* By Default used FTP protocol can use FTPS if ssl config is enabled.\n\n\n# How to use.\n\n```python\nimport aiohttp\nfrom asyncio_requests.asyncio_request import request\n\nawait request(\n    url=\"Server Ip\",  # Ip/url or ftp server <Required>\n    auth=aiohttp.BasicAuth('username', 'password'),  # The username and ip of the ftp server, to be sent as aiohttp.BasicAuth object <Required>\n    protocol=\"FTP\",  # str <Required> (FTP)\n    protocol_info={\n        \"port\": 21, # default is 21 <Optional>\n        \"command\": \"download\", # generic ftp commands like download, upload, remove <Required>\n        \"server_path\": \"/tmp/temp.pdf\", # path from where to get/remove or upload file on server.\n        \"client_path\": \"\", # path where file is downloaded/uploaded to. <optional>\n        \"timeout\": 30 # <Optional>\n        \"verify_ssl\": False # default is False <Optional>\n        \"certificate\" \"\" # required if verify_ssl is True\n        \"circuit_breaker_config\": {  # Optional\n            \"maximum_failures\": int,  # Optional Failures allowed\n            \"timeout\": int,  # Optional time in seconds\n            \"retry_config\": {  # Optional Include this if you want retry calls if failed on first time\n                \"name\": str,  # Required Any name\n                \"allowed_retries\": int,  # Required number of retries you want to make\n                \"retriable_exceptions\": [<callable object>] # Optional\n                \"abortable_exceptions\": [<callable object>] # Optional\n                \"on_retries_exhausted\": <callable object>, # Optional callable that will be invoked on a retries exhausted event,\n                \"on_failed_attempt\": <callable object>, # Optional callable that will be invoked on a failed attempt event,\n                \"on_abort\": <callable object>, # Optional callable that will be invoked on an abort event,\n            \"delay\": int, # seconds of delay between retries Optional default 0,\n            \"max_delay\": int, # seconds of max delay between retries Optional default 0,\n            \"jitter\": bool # Boolean Optional,\n          }\n      }\n    },\n    pre_processor_config = {  # Optional\n        \"function\": <callable object>,  # Required function that you want to call before ftp call\n        \"params\": {  # Optional\n            \"param1\": \"value1\" # Params you want to pass in function\n        }\n    },\n    post_processor_config = {  # Optional\n        \"function\": <callable object>,  # Required function that you want to call after ftp call\n        \"params\": {\n            \"param1\": \"value1\" # Params you want to pass in function\n        }\n    }\n)\n```\n\n# Sample FTP Call.\n\n```python\nimport aiohttp\nfrom asyncio_requests.asyncio_request import request\nfrom asyncio_requests.utils.http_file_upload_config import download_file_from_url\n\nlocal_path = \"/tmp/temp.png\"\nawait request(\n    url = \"localhost\",\n    auth = aiohttp.BasicAuth(\"use\",\"pswd\"),\n    protocol = \"FTP\",\n    protocol_info = {\n        \"port\": 21,\n        \"command\": \"upload\",\n        \"server_path\": \"/home/resources/logo.png\",\n        \"client_path\": local_path,\n        \"circuit_breaker_config\": {\n            \"timeout\": 150,\n            \"retry_config\": {\n                \"name\": \"api_retry\",\n                \"allowed_retries\": 4\n            }\n        }\n    },\n    pre_processor_config = {\n        \"function\": download_file_from_s3,\n          \"params\": {\n            \"file_download_path\": \"https://[bucket_name].s3.amazonaws.com/logo.png\",\n            \"local_filepath\": local_path\n          }\n    }\n)\n\n## Resonse\n\"\"\"\n{'api_response': True,\n 'error_message': '',\n 'external_call_request_time': '2022-05-13 19:07:35.775706+05:30',\n 'file': '/home/resources/logo.png',\n 'file_stats': {'modify': '20220513190700',\n                'size': '29304',\n                'type': 'file',\n                'unix.group': '1000',\n                'unix.links': '1',\n                'unix.mode': 436,\n                'unix.owner': '1000'},\n 'mode': 'upload',\n 'payload': {'success': True},\n 'pre_processor_response': None,\n 'text': '',\n 'url': 'localhost'}\n\n\"\"\"\n\n```\n\n\n## SOAP\n(upcoming)\n\n\n### Generating Distribution Archives\n\n```bash\npython3 -m pip install --upgrade setuptools wheel\npython3 setup.py sdist bdist_wheel\n```\nThis command should output a lot of text and once completed should generate two files in the `dist` directory.\n\n## Open Source contribution \n\nYou can add utilities that can be used by others. \n\nEg - Contributing a function that accepts certain params and downloads a file via AWS S3.\nThis function can be used by other developers in the pre/post processor to download the file before or after making the API call.\n\n**Make sure to add the utility in the utilities section in the readme wrt protocol.**\n\n### Generating New Tags/Release\n\n - Check the code with flake8, mypy, bandit, pytest before submitting a PR\n - Update version in [setup.py](setup.py)\n - Update version in [docs/source/conf.py](docs/source/conf.py)\n - Update version in README.md section\n - Send a PR, and after it gets merged to master create a tag from master in the format `vX.Y`\n   - `X` - Major Release (Breaking Changes)\n   - `Y` - Minor Release\n \n\n**To know more about the developer, here's a quote to find him out -** \n```Anton died so we could live```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/gofynd/aio-requests/archive/refs/tags/v2.7.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gofynd/asyncio-requests",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncio-requests",
    "package_url": "https://pypi.org/project/asyncio-requests/",
    "platform": null,
    "project_url": "https://pypi.org/project/asyncio-requests/",
    "project_urls": {
      "Download": "https://github.com/gofynd/aio-requests/archive/refs/tags/v2.7.3.tar.gz",
      "Homepage": "https://github.com/gofynd/asyncio-requests"
    },
    "release_url": "https://pypi.org/project/asyncio-requests/2.7.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Any microservice will be able to use the “asyncio_requests” can make an async request(HTTP/SOAP/XML/FTP/redis) with the given payload to given address",
    "version": "2.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16276771,
  "releases": {
    "0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "093659d2f68d9deb18b4ffa67a354e9122e8f8995d67a27879f91910fa336d33",
          "md5": "ebac790ceed0b5085706e4d8e5c5b9bd",
          "sha256": "3b25ab3b7ceb1faeb8bc0f3b8b77181ba66197b0fa6d8000b7ca4c11d9f69c35"
        },
        "downloads": -1,
        "filename": "asyncio-requests-0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "ebac790ceed0b5085706e4d8e5c5b9bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30992,
        "upload_time": "2022-02-24T07:54:28",
        "upload_time_iso_8601": "2022-02-24T07:54:28.974955Z",
        "url": "https://files.pythonhosted.org/packages/09/36/59d2f68d9deb18b4ffa67a354e9122e8f8995d67a27879f91910fa336d33/asyncio-requests-0.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d38180e86c234681b760607604897a59e25c3f15c53c629fd70eb82b16e2ca9a",
          "md5": "098a1a601d13a356fd23ea69c7e99309",
          "sha256": "1e8196489d69c8c65405977b9fdce6dd6d1bbe5c6f236c01822e6cb46f67a031"
        },
        "downloads": -1,
        "filename": "asyncio-requests-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "098a1a601d13a356fd23ea69c7e99309",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31117,
        "upload_time": "2022-02-27T05:42:29",
        "upload_time_iso_8601": "2022-02-27T05:42:29.360206Z",
        "url": "https://files.pythonhosted.org/packages/d3/81/80e86c234681b760607604897a59e25c3f15c53c629fd70eb82b16e2ca9a/asyncio-requests-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8169aebc3feca589859a549fd0b36fcb98f4b4261170c1da001aa557ce2cbcbc",
          "md5": "3fb89c49492eb087663549dffdf42943",
          "sha256": "ccbb06b2211a4118276e465226bb352630043d5c585b1b604a5c89bd5be06305"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fb89c49492eb087663549dffdf42943",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33474,
        "upload_time": "2022-06-13T10:17:24",
        "upload_time_iso_8601": "2022-06-13T10:17:24.689190Z",
        "url": "https://files.pythonhosted.org/packages/81/69/aebc3feca589859a549fd0b36fcb98f4b4261170c1da001aa557ce2cbcbc/asyncio-requests-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "553886bb03227b931c67ac28d6269d169255028182b9f435a1361127119fbc9d",
          "md5": "de5092e58e0e87d4f2f349b4ad010f97",
          "sha256": "8aee5ac803b58c96fc372069c8c4c5d4248acda64b1433d0acdde2554d54d2a8"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de5092e58e0e87d4f2f349b4ad010f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33511,
        "upload_time": "2022-07-09T10:52:35",
        "upload_time_iso_8601": "2022-07-09T10:52:35.455238Z",
        "url": "https://files.pythonhosted.org/packages/55/38/86bb03227b931c67ac28d6269d169255028182b9f435a1361127119fbc9d/asyncio-requests-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a99904b716399e96ac28c6d07f1d4ab1e02e2451e3ebd8a082e3aff3b6360ab4",
          "md5": "2fb3e721006d82ca9cdcebcc783a14bf",
          "sha256": "ab384808e26fc2d4e0c5eb88e8aa2f0c6cdbf16953521d729f49723fd6eb6517"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2fb3e721006d82ca9cdcebcc783a14bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34189,
        "upload_time": "2022-07-11T05:59:07",
        "upload_time_iso_8601": "2022-07-11T05:59:07.306465Z",
        "url": "https://files.pythonhosted.org/packages/a9/99/04b716399e96ac28c6d07f1d4ab1e02e2451e3ebd8a082e3aff3b6360ab4/asyncio-requests-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c562ac9754fdb775d5615ac4d4d467f006e57e2890c148115003764099db55",
          "md5": "40922c5bfe96e7bc9069940cfdfd06c3",
          "sha256": "c0de53a1c592b860296215c2106aa83980cd87f5c2ac96b74f5503342b54f393"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "40922c5bfe96e7bc9069940cfdfd06c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34183,
        "upload_time": "2022-07-11T08:33:35",
        "upload_time_iso_8601": "2022-07-11T08:33:35.030690Z",
        "url": "https://files.pythonhosted.org/packages/a8/c5/62ac9754fdb775d5615ac4d4d467f006e57e2890c148115003764099db55/asyncio-requests-2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c71ccd26cf33f2fed312e7c154e09f3bc19cd91b4fd6c26de105d18947c9db35",
          "md5": "3cf7653aaffde7eb9cc3d574538d8a35",
          "sha256": "7a2b4248f563c9033d490bf8de69c38e3d0b8da2231bf826c1b462897c8087e1"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3cf7653aaffde7eb9cc3d574538d8a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34200,
        "upload_time": "2022-07-11T09:19:06",
        "upload_time_iso_8601": "2022-07-11T09:19:06.783500Z",
        "url": "https://files.pythonhosted.org/packages/c7/1c/cd26cf33f2fed312e7c154e09f3bc19cd91b4fd6c26de105d18947c9db35/asyncio-requests-2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aba1d709c80d606c1c3c546e6f1a725220cd471902fe772ace60af6f5028bbe",
          "md5": "54ef5e1ea0fe18a9c9ca0d5d6e41ae8d",
          "sha256": "d4e3fd922fda14bc31d4ec6177ab0fa095d47946dec21e95dc72b59c9d37bb95"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "54ef5e1ea0fe18a9c9ca0d5d6e41ae8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34228,
        "upload_time": "2022-07-12T08:47:31",
        "upload_time_iso_8601": "2022-07-12T08:47:31.356229Z",
        "url": "https://files.pythonhosted.org/packages/1a/ba/1d709c80d606c1c3c546e6f1a725220cd471902fe772ace60af6f5028bbe/asyncio-requests-2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6abd5e2e721a066eda15161e8049693ab12be08911f59e3b6538ac770f71de8",
          "md5": "90ff8470aae193ace5aba220bfc06f26",
          "sha256": "052482dbbc801bea15fc79a24a6910444053fbd9378c759d47937a34f01cd2df"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "90ff8470aae193ace5aba220bfc06f26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34235,
        "upload_time": "2022-08-26T14:20:54",
        "upload_time_iso_8601": "2022-08-26T14:20:54.606485Z",
        "url": "https://files.pythonhosted.org/packages/d6/ab/d5e2e721a066eda15161e8049693ab12be08911f59e3b6538ac770f71de8/asyncio-requests-2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7a3da5be139e260eb878b95aad2f2bf86ac28a9cb8d6d37f90e6c1f99a277ae",
          "md5": "825845ee43c12aa15d5a29d625b6df95",
          "sha256": "89a218f4320953846c7a6353a45762dde87579d3d9f0777988687ace7439ecf4"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "825845ee43c12aa15d5a29d625b6df95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34256,
        "upload_time": "2022-08-30T13:58:31",
        "upload_time_iso_8601": "2022-08-30T13:58:31.355500Z",
        "url": "https://files.pythonhosted.org/packages/b7/a3/da5be139e260eb878b95aad2f2bf86ac28a9cb8d6d37f90e6c1f99a277ae/asyncio-requests-2.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5e248e5227babcce24e22716e3ec273d2fc54e603281d3729388974092f1401",
          "md5": "7563aa23c5a0bfbb03d9e266ca668fbe",
          "sha256": "43def3bef42da16da82b9912360b244f23d7d06827bc6709e5e306826aec6754"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7563aa23c5a0bfbb03d9e266ca668fbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35155,
        "upload_time": "2022-12-08T06:01:41",
        "upload_time_iso_8601": "2022-12-08T06:01:41.916405Z",
        "url": "https://files.pythonhosted.org/packages/d5/e2/48e5227babcce24e22716e3ec273d2fc54e603281d3729388974092f1401/asyncio-requests-2.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "442e925a6f687f6fb1e7e5ae0d5b67db76f3be1ce363772861bfcbfa9541870b",
          "md5": "3fe5c3b085ba83bfda1078cec863b2f7",
          "sha256": "09eec7932da2c814e2421dc44c67d19692c40bbfc3b6aef6512fd51953773423"
        },
        "downloads": -1,
        "filename": "asyncio-requests-2.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fe5c3b085ba83bfda1078cec863b2f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35549,
        "upload_time": "2023-01-02T06:16:15",
        "upload_time_iso_8601": "2023-01-02T06:16:15.364834Z",
        "url": "https://files.pythonhosted.org/packages/44/2e/925a6f687f6fb1e7e5ae0d5b67db76f3be1ce363772861bfcbfa9541870b/asyncio-requests-2.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "442e925a6f687f6fb1e7e5ae0d5b67db76f3be1ce363772861bfcbfa9541870b",
        "md5": "3fe5c3b085ba83bfda1078cec863b2f7",
        "sha256": "09eec7932da2c814e2421dc44c67d19692c40bbfc3b6aef6512fd51953773423"
      },
      "downloads": -1,
      "filename": "asyncio-requests-2.7.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3fe5c3b085ba83bfda1078cec863b2f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35549,
      "upload_time": "2023-01-02T06:16:15",
      "upload_time_iso_8601": "2023-01-02T06:16:15.364834Z",
      "url": "https://files.pythonhosted.org/packages/44/2e/925a6f687f6fb1e7e5ae0d5b67db76f3be1ce363772861bfcbfa9541870b/asyncio-requests-2.7.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}