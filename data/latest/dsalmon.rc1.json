{
  "info": {
    "author": "Alexander Hartl",
    "author_email": "alexander.hartl@tuwien.ac.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering"
    ],
    "description": "dSalmon\n=======\n\n.. image:: https://img.shields.io/github/license/CN-TU/dSalmon.svg\n   :target: https://github.com/CN-TU/dSalmon/blob/master/LICENSE\n   :alt: License\n   \n.. image:: https://readthedocs.org/projects/dsalmon/badge/?version=latest\n   :target: https://dsalmon.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\ndSalmon (**D**\\ ata **S**\\ tream **A**\\ nalysis A\\ **l**\\ gorith\\ **m**\\ s f\\ **o**\\ r the Impatie\\ **n**\\ t) is a framework for analyzing data streams. Implementation of the core algorithms is done in C++, focusing on superior processing speed and allowing even vast amounts of data to be processed. Python bindings are provided to allow seamless integration in data science development.\n\nInstallation\n------------\ndSalmon can be installed using ``pip`` by running\n\n.. code-block:: sh\n\n    pip3 install git+https://github.com/CN-TU/dSalmon\n\n\nOutlier Detectors\n-----------------\n\ndSalmon provides several algorithms for detecting outliers in data streams. Usage is easiest using the Python interface, which provides an interface similar to the algorithms from scikit-learn. The following example performs k-nearest neighbor outlier detection with a window size of 100 samples.\n\n.. code-block:: python\n\n    from dSalmon import outlier\n    import pandas\n    X = pandas.read_csv('my_dataset.csv')\n    detector = outlier.SWKNN(window=100,k=5)\n    outlier_scores = detector.fit_predict(X)\n    print ('Outlier scores: ', outlier_scores)\n\nIndividual rows of the passed data are processed sequentially. Hence, while being substantially faster, the above code provides similar results as the following example.\n\n.. code-block:: python\n\n    from dSalmon import outlier\n    import pandas\n    X = pandas.read_csv('my_dataset.csv')\n    detector = outlier.SWKNN(window=100,k=5)\n    outlier_scores = [ detector.fit_predict(X.iloc[i,:]) for i in range(len(X)) ]\n    print ('Outlier scores: ', outlier_scores)\n\nM-Tree Usage\n------------\ndSalmon uses an M-Tree for several of its algorithms. An M-Tree is a spatial indexing data structure for metric spaces, allowing fast nearest-neighbor and range queries. The benefit of an M-Tree compared to, e.g., a KD-Tree or Ball-Tree is that insertion, updating and removal of points is fast after having built the tree.\n\nFor the development of custom algorithms, an M-Tree interface is provided for Python.\nA point within a tree can be accessed either via ``tree[k]`` using the point's key ``k``, or via ``tree.ix[i]`` using the point's index ``i``. Keys can be arbitrary integers and are returned by ``insert()``, ``knn()`` and\n``neighbors()``. Indices are integers in the range ``0...len(tree)``, sorted according to the points' keys in ascending order.\n\nKNN queries can be performed using the ``knn()`` function and range queries can be performed using the ``neighbors()`` function.\n\nThe following example shows how to modify points within a tree and how to find nearest neighbors.\n\n.. code-block:: python\n\n    from dSalmon.trees import MTree\n    import numpy as np\n\n    tree = MTree()\n\n    # insert a point [1,2,3,4] with key 5\n    tree[5] = [1,2,3,4]\n\n    # insert some random test data\n    X = np.random.rand(1000,4)\n    inserted_keys = tree.insert(X)\n\n    # delete every second point\n    del tree.ix[::2]\n\n    # Set the coordinates of the point with the lowest key\n    tree.ix[0] = [0,0,0,0]\n\n    # find the 3 nearest neighbors to [0.5, 0.5, 0.5, 0.5]\n    neighbor_keys, neighbor_distances, _ = tree.knn([.5,.5,.5,.5], k=3)\n    print ('Neighbor keys:', neighbor_keys)\n    print ('Neighbor distances:', neighbor_distances)\n\n    # find all neighbors to [0.5, 0.5, 0.5, 0.5] within a radius of 0.2\n    neighbor_keys, neighbor_distances, _ = tree.neighbors([.5,.5,.5,.5], radius=0.2)\n    print ('Neighbor keys:', neighbor_keys)\n    print ('Neighbor distances:', neighbor_distances)\n\n\nExtending dSalmon\n-----------------\n\ndSalmon uses `SWIG <http://www.swig.org/>`_ for generating wrapper code for the C++ core algorithms and instantiates single and double precision floating point variants of each algorithm.\n\nArchitecture\n^^^^^^^^^^^^\n\nThe ``cpp`` folder contains the code for the C++ core algorithms, which might be used directly by C++ projects.\n\nWhen using dSalmon from Python, the C++ algorithms are wrapped by the interfaces in the SWIG folder. These wrapper functions are translated to a Python interface and have the main purpose of providing an interface which can easily be parsed by SWIG.\n\nFinally, the ``python`` folder contains the Python interface invoking the Python interface provided by SWIG.\n\nRebuilding\n^^^^^^^^^^\n\nWhen adding new algorithms or modifying the interface, the SWIG wrappers have to be rebuilt. To this end, SWIG has to be installed and a ``pip`` package can be created and installed  using\n\n.. code-block:: sh\n\n    make && pip3 install dSalmon.tar.xz\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CN-TU/dSalmon",
    "keywords": "",
    "license": "LGPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dSalmon",
    "package_url": "https://pypi.org/project/dSalmon/",
    "platform": "",
    "project_url": "https://pypi.org/project/dSalmon/",
    "project_urls": {
      "Documentation": "https://dSalmon.readthedocs.io",
      "Homepage": "https://github.com/CN-TU/dSalmon",
      "Source": "https://github.com/CN-TU/dSalmon",
      "Tracker": "https://github.com/CN-TU/dSalmon/issues"
    },
    "release_url": "https://pypi.org/project/dSalmon/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "dSalmon is a framework for analyzing data streams",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11934313,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694ee0bf7b4515d56b3af01cdc9ccd67baa6c99f50b50fe8a09bbe5176c95e3b",
          "md5": "a07716858bfcd2232f1ed3b52b5a447a",
          "sha256": "dabe252dbba9d8eb6bfcd3017ec9848adbcc996f95e26b6a2288d9fea6d2fb42"
        },
        "downloads": -1,
        "filename": "dSalmon-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a07716858bfcd2232f1ed3b52b5a447a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 1413350,
        "upload_time": "2021-11-05T08:51:53",
        "upload_time_iso_8601": "2021-11-05T08:51:53.078557Z",
        "url": "https://files.pythonhosted.org/packages/69/4e/e0bf7b4515d56b3af01cdc9ccd67baa6c99f50b50fe8a09bbe5176c95e3b/dSalmon-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "694ee0bf7b4515d56b3af01cdc9ccd67baa6c99f50b50fe8a09bbe5176c95e3b",
        "md5": "a07716858bfcd2232f1ed3b52b5a447a",
        "sha256": "dabe252dbba9d8eb6bfcd3017ec9848adbcc996f95e26b6a2288d9fea6d2fb42"
      },
      "downloads": -1,
      "filename": "dSalmon-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a07716858bfcd2232f1ed3b52b5a447a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 1413350,
      "upload_time": "2021-11-05T08:51:53",
      "upload_time_iso_8601": "2021-11-05T08:51:53.078557Z",
      "url": "https://files.pythonhosted.org/packages/69/4e/e0bf7b4515d56b3af01cdc9ccd67baa6c99f50b50fe8a09bbe5176c95e3b/dSalmon-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}