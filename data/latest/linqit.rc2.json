{
  "info": {
    "author": "Avi Lumelsky",
    "author_email": "noticetheg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Linqit!\nExtends python's list builtin with fun, robust functionality - .NET's Language Integrated Queries (Linq) and more.<br>\nWrite clean code with powerful syntax.<br><br>\n```shell script\npip install linqit\n```\nStop using loops, complex conditions, list comperhension and filters.<br>\nDoesn't it looks better? <br>\n```python\nfrom seven_dwwarfs import Grumpy, Happy, Sleepy, Bashful, Sneezy, Dopey, Doc\nfrom linqit import List\n\n# Go ahead and fill the list with whatever you want... like a list of <Programmer> objects.\nprogrammers = List()\nAvi = type(\"Avi\", (), {})\nelon_musk = Entrepreneur(talented=True)\n\n# Then play:\nlast_hot_pizza_slice = (\n    programmers.where(lambda e: e.experience > 15)\n    .except_for(elon_musk)\n    .of_type(Avi)\n    .take(3)  # [<Avi>, <Avi>, <Avi>]\n    .select(lambda avi: avi.lunch)  # [<Pizza>, <Pizza>, <Pizza>]\n    .where(lambda p: p.is_hot() and p.origin != \"Pizza Hut\")\n    .last()  # <Pizza>\n    .slices.last()  # <PizzaSlice>\n)\n\n# What do you think?\n```\n\nWe all use multiple aggregations in our code, while multiple filters/comprehensions are not pythonic at all.<br>\nThe whole idea is is to use it for nested, multiple filters/modifications :).<br>\nSome of the methods might look ridiculous for a single calls, comparing to the regular python syntax.<br>\nHere are some use cases: <br>\n\n#### Methods:\n```\nall\nany\nconcat\ncontains\ndistinct\nexcept_for\nfirst\nget_by_attr\nintersect\nlast\nselect\nskip\ntake\nwhere\nof_type\n```\n#### Properties:\n```\nsum\nmin\nmax\navg\nsorted\n```\n\n## Deeper - Let's play with a list of people, a custom type.\n```python\nimport List\n\nclass Person():\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return 'Person(name=\"{}\", age={})'.format(self.name, self.age)\n\n\n# Creating a list of people\navi, bill, bob, harry = Person('Avi', 23), Person('Bill', 41), Person('Bob', 77), Person('Harry', 55)\n\npeople = List(avi, bill, bob, harry)\n```\n\n## Use LINQ selections, write cleaner code\n```python\nold_people = people.where(lambda p: p.age > 23) # It's a joke! :) [<Person name=\"Bill\" age=\"41\">, <Person name=\"Bob\" age=\"77\">, <Person name=\"Harry\" age=\"55\">]\nold_people.first()                                              # <Person name=\"Bill\" age=\"41\">\nold_people.last()                                               # <Person name=\"Harry\" age=\"55\">\nold_people.any(lambda p: p.name.lower().startswith('b'))        # True\nold_people.where(age=55)                         # [<Person name=\"Harry\" age=\"55\">]\nold_people.skip(3).any()                                        # False\nold_people.skip(2).first()                                      # <Person name=\"Harry\" age=\"55\">\n\n# Isn't it better than \"for\", \"if\", \"else\", \"filter\", \"map\" and list comprehensions in the middle of your code?\n\n```\n## More selections\n```python\nnew_kids_in_town = [Person('Chris', 18), Person('Danny', 16), Person('John', 17)]\npeople += new_kids_in_town # Also works: people = people.concat(new_kids_in_town)\n\nteenagers = people.where(lambda p: 20 >= p.age >= 13)\ndanny = teenagers.first(lambda t: t.name == 'Danny')            # <Person name=\"Danny\" age=\"16\">\noldest_teen = teenagers.order_by(lambda t: t.age).last()                                  # <Person name=\"John\" age=\"17\">\n```\n\n## Let's make python more dynamic\n```python\nnames = people.name                                             # ['Avi', 'Bill', 'Bob', 'Harry', 'Chris', 'John']\nages = people.age                                               # [23, 41, 77, 55, 18, 17]\nteenagers_names = teenagers.name                                # ['Chris', 'Danny', 'John']\nteenagers_names.take(2).except_for(lambda n: n == 'Danny')      # ['Chris']\nteenagers.age.min                                               # 16\nteenagers.age.avg                                               # 17\nteenagers.age.max                                               # 18\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avilum/linqit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linqit",
    "package_url": "https://pypi.org/project/linqit/",
    "platform": "",
    "project_url": "https://pypi.org/project/linqit/",
    "project_urls": {
      "Homepage": "https://github.com/avilum/linqit"
    },
    "release_url": "https://pypi.org/project/linqit/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=2.7,>=3.6",
    "summary": "Extends python's list builtin with fun, robust functionality - .NET's Language Integrated Queries (Linq) and more. Write clean code with powerful syntax.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10546822,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fabd8c290522943a73cd805766599743bc1794963b6638e502ae1dafd77d935",
          "md5": "abecb775c936c87c1a41b7e8ccdbad5b",
          "sha256": "45aa7788d32977ec4be97a922be3773ed28253c2f3483435d36859830f5e0996"
        },
        "downloads": -1,
        "filename": "linqit-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abecb775c936c87c1a41b7e8ccdbad5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7,>=3.6",
        "size": 11152,
        "upload_time": "2020-11-04T16:13:58",
        "upload_time_iso_8601": "2020-11-04T16:13:58.278782Z",
        "url": "https://files.pythonhosted.org/packages/4f/ab/d8c290522943a73cd805766599743bc1794963b6638e502ae1dafd77d935/linqit-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "447b3b64473dbcca1bcd552ad80cc9ba48c8044e01612797d75bed9354581a09",
          "md5": "fc1cbd05719597149757381e0aeff072",
          "sha256": "a440115b6a3e8b0ca70350d479381fa9d4a997c5b61996445856ba0aa143b133"
        },
        "downloads": -1,
        "filename": "linqit-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc1cbd05719597149757381e0aeff072",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7,>=3.6",
        "size": 11760,
        "upload_time": "2021-06-03T09:21:36",
        "upload_time_iso_8601": "2021-06-03T09:21:36.385525Z",
        "url": "https://files.pythonhosted.org/packages/44/7b/3b64473dbcca1bcd552ad80cc9ba48c8044e01612797d75bed9354581a09/linqit-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6060610b4b0cecb8e8ac3af3941e7b0d7fc54148d512b5da75a3e6b36c4e0563",
          "md5": "eda55c32e4a62d1050f3893fcaafcdbd",
          "sha256": "9bf4eab4a2f9fe7a9352bef98d44cb2a1f7509ce17ddc083d541e703326156fa"
        },
        "downloads": -1,
        "filename": "linqit-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "eda55c32e4a62d1050f3893fcaafcdbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7,>=3.6",
        "size": 11052,
        "upload_time": "2021-06-03T09:21:37",
        "upload_time_iso_8601": "2021-06-03T09:21:37.709858Z",
        "url": "https://files.pythonhosted.org/packages/60/60/610b4b0cecb8e8ac3af3941e7b0d7fc54148d512b5da75a3e6b36c4e0563/linqit-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "447b3b64473dbcca1bcd552ad80cc9ba48c8044e01612797d75bed9354581a09",
        "md5": "fc1cbd05719597149757381e0aeff072",
        "sha256": "a440115b6a3e8b0ca70350d479381fa9d4a997c5b61996445856ba0aa143b133"
      },
      "downloads": -1,
      "filename": "linqit-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc1cbd05719597149757381e0aeff072",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7,>=3.6",
      "size": 11760,
      "upload_time": "2021-06-03T09:21:36",
      "upload_time_iso_8601": "2021-06-03T09:21:36.385525Z",
      "url": "https://files.pythonhosted.org/packages/44/7b/3b64473dbcca1bcd552ad80cc9ba48c8044e01612797d75bed9354581a09/linqit-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6060610b4b0cecb8e8ac3af3941e7b0d7fc54148d512b5da75a3e6b36c4e0563",
        "md5": "eda55c32e4a62d1050f3893fcaafcdbd",
        "sha256": "9bf4eab4a2f9fe7a9352bef98d44cb2a1f7509ce17ddc083d541e703326156fa"
      },
      "downloads": -1,
      "filename": "linqit-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "eda55c32e4a62d1050f3893fcaafcdbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7,>=3.6",
      "size": 11052,
      "upload_time": "2021-06-03T09:21:37",
      "upload_time_iso_8601": "2021-06-03T09:21:37.709858Z",
      "url": "https://files.pythonhosted.org/packages/60/60/610b4b0cecb8e8ac3af3941e7b0d7fc54148d512b5da75a3e6b36c4e0563/linqit-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}