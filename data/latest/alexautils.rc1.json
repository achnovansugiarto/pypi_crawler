{
  "info": {
    "author": "Jai Miles",
    "author_email": "jaimiles23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# AlexaUtils\n\nAlexaUtils is a PyPI with utility classes and functions to supplement the Python AWS SDK for Alexa skill development. \n\n\n## Installation\n- Python 3.6 +\n- ask-sdk-core == 1.11.0\n\nTo install Alexa Utils, use pip:\n```\npip install alexautils\n```\n\n\n## Imports\nBy default, the following classes and functions are imported:\n\n_Classes_\n- SlotUtils\n- Pauser\n\n_Functions_\n- logger, log_func_names, log_all\n- linear_nlg\n\nThe smml_tags module is not imported by default. \nPer convention, this module should be imported separately as ssml:\n```python\n>>> import alexautils.ssml_tags as ssml\n>>> ssml.MW_EXCITED.format(\"Hi!\")\n```\n\n\n## Contents\n\n\n### SlotUtils\nUtility class with methods to retrieve slots from user utterance.\n\n#### get_slot_val_by_name(handler_input, slot_name: str) -> str:\n\nReturns slot value for slot_name name\n\n#### get_all_slot_values(handler_input) -> list:\n\nReturns all slot.values from user utterance\n\n#### get_first_slot_value(handler_input) -> str:\n\nReturns first slot value from captured values.\n\n#### get_resolved_value(handler_input, slot_name: str) -> str:\n\nReturns resolved value for the slot.\n\n\n### Pauser\nUtility class to create pauses in speech response.\n\n#### get_pause(pause_length: float = 1) -> str:\n\nReturns pause speech for passed length.\n\n#### get_p_for_msg_len(message: str) -> str:\n\nReturns pause with duration based on message length.\n\n#### get_p_level(level: float) -> str:\n\nReturns pause length dependent on the level passed.\n\nRandom variation included for more fluid UX.\n| Standard levels   |   Pause length (seconds) |\n| :-- | :-- |\n|   1   |   0.35    |\n|   2   |   0.70    |\n|   3   |   1.05    |\n|   4   |   1.40    |\n|   5   |   1.75    |\n\n\n#### make_ms_pause_level_list(*args) -> list:\n\nReturns list of the arguments to be added to speech_list.\n\nTransforms all int/float args into p_levels then adds to the list.\n\n\n### linear_nlg\n*linear_nlg(tuple_message_clause: tuple, str_joiner: str = ' ') -> str*\n\nReturns message constructed from tuple message clause.\n\nConstructs the message with different methods per data type.\n\n|   Data type   |   Method |\n| :- | :- |\n|   Tuple/list  |   random.choice() | \n|   str |   append  |\n|   int |   Pauser.get_p_level()    |\n\n\nlinear_nlg is a naive natural language generation (NLG) to interact with the user. \nThe method transforms linearly connected sentence chunks (e.g., clauses, parts of speech, etc.) into speech responses.\n\nConsider the following arbitrary noun phrase:\n\n\"The red dog\"\n\nThis phrase can be parsed into 3 separate chunks:\n\n\"The\": determiner\n\"red\": colour adjective\n\"dog\": animal noun\nIn this example, the determiner, adjective, and noun have no effect on the meaning of the response. \nWe can use naive NLG to create an arbitrary noun phrase. This skill's NLG method would sample from the following three message tuples (MT). \nA single item is sampled from each message tuple to create the noun phrase (DET, JJ, NN).\n\n```python\nMT_DET = (\n    \"The\",\n    \"A\",\n)\nMT_COLOUR_JJ = (\n    \"red\",\n    \"blue\",\n    \"yellow\",\n)\nMT_ANIMAL_NN = (\n    \"dog\",\n    \"cat\",\n)\n```\n\nThis NLG method requires careful consideration of sentence structure and semantics to avoid unnatural responses. \nHowever, successful implementation increases response variety multiplicatively. \nThe speech construction for the above noun phrase yields 12 response permutations.\n\n```python\n>>> test = [MT_DET, MT_COLOUR_JJ, MT_ANIMAL_NN]\n>>> naive_nlg(test)\n\"The red dog\"\n>>> naive_nlg(test)\n\"A yellow cat\"\n```\n\n\n### Logs\n#### logger\n\nlog_level set by Lambda environment variable `log_level`\n\n#### def log_func_name(func, *args, **kwargs):\n\nDecorator to log.debug the function name.\n\n#### log_all(*args, log_level: int = 10) -> None:\n\nLogs all arguments at log_level keyword.\n\n### ssml_tags\nAlexa's voice user interface uses Speech Synthesis Markup Language to control the speech output. SSML reference available [here](https://developer.amazon.com/en-US/docs/alexa/custom-skills/speech-synthesis-markup-language-ssml-reference.html)\n\nSSML are implemented as individual text wrappers so that wrappers can be applied to separate phrases, e.g.:\n\n```python\nMW_EXCITED_MED.format(\"Oh No!\") + \"Don't throw that away, please.\"\n```\n\nNOTE:\nMay like to implement a class with dictionary structure to access SSML levels.\nReference [pyssml](https://github.com/sumsted/pyssml/blob/master/pyssml/PySSML.py)\n\n\n\nv0.0.1 - initial commit \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaimiles23/Alexa-Utils",
    "keywords": "Alexa,ssml,ask sdk",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alexautils",
    "package_url": "https://pypi.org/project/alexautils/",
    "platform": "",
    "project_url": "https://pypi.org/project/alexautils/",
    "project_urls": {
      "Homepage": "https://github.com/jaimiles23/Alexa-Utils"
    },
    "release_url": "https://pypi.org/project/alexautils/0.0.1/",
    "requires_dist": [
      "ask-sdk-core (==1.11.0)"
    ],
    "requires_python": "",
    "summary": "Utility methods to supplement Python ASK SDK",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7956927,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afa97bec2f37810adeca5e24cb9725130e77f66bed8c422f9b4f5b82192d2198",
          "md5": "09734d5f56096fe417ef664c9a560637",
          "sha256": "5c8e634c6c6170ba752354fe7a4db4c839cdb79e303e9f938fe20fe77f4f699b"
        },
        "downloads": -1,
        "filename": "alexautils-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09734d5f56096fe417ef664c9a560637",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9873,
        "upload_time": "2020-08-14T00:44:13",
        "upload_time_iso_8601": "2020-08-14T00:44:13.585535Z",
        "url": "https://files.pythonhosted.org/packages/af/a9/7bec2f37810adeca5e24cb9725130e77f66bed8c422f9b4f5b82192d2198/alexautils-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "446b8700045108d32c3c56245633407a39757e97f401b38f7b3b8d241650be7e",
          "md5": "f226e8793490472a3586c9c436a2bdea",
          "sha256": "15401bd4f48b2afef31096e3650df221c741e5208bf37ee36b57d9faa707e441"
        },
        "downloads": -1,
        "filename": "alexautils-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f226e8793490472a3586c9c436a2bdea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8172,
        "upload_time": "2020-08-14T00:44:16",
        "upload_time_iso_8601": "2020-08-14T00:44:16.170159Z",
        "url": "https://files.pythonhosted.org/packages/44/6b/8700045108d32c3c56245633407a39757e97f401b38f7b3b8d241650be7e/alexautils-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afa97bec2f37810adeca5e24cb9725130e77f66bed8c422f9b4f5b82192d2198",
        "md5": "09734d5f56096fe417ef664c9a560637",
        "sha256": "5c8e634c6c6170ba752354fe7a4db4c839cdb79e303e9f938fe20fe77f4f699b"
      },
      "downloads": -1,
      "filename": "alexautils-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09734d5f56096fe417ef664c9a560637",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9873,
      "upload_time": "2020-08-14T00:44:13",
      "upload_time_iso_8601": "2020-08-14T00:44:13.585535Z",
      "url": "https://files.pythonhosted.org/packages/af/a9/7bec2f37810adeca5e24cb9725130e77f66bed8c422f9b4f5b82192d2198/alexautils-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "446b8700045108d32c3c56245633407a39757e97f401b38f7b3b8d241650be7e",
        "md5": "f226e8793490472a3586c9c436a2bdea",
        "sha256": "15401bd4f48b2afef31096e3650df221c741e5208bf37ee36b57d9faa707e441"
      },
      "downloads": -1,
      "filename": "alexautils-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f226e8793490472a3586c9c436a2bdea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8172,
      "upload_time": "2020-08-14T00:44:16",
      "upload_time_iso_8601": "2020-08-14T00:44:16.170159Z",
      "url": "https://files.pythonhosted.org/packages/44/6b/8700045108d32c3c56245633407a39757e97f401b38f7b3b8d241650be7e/alexautils-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}