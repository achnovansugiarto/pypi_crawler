{
  "info": {
    "author": "Juliarty",
    "author_email": "sirrzk.09@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n\nDownload dataset:\n   1. Use Kaggle public API (https://www.kaggle.com/docs/api). \n   2. Type the following commands:\n      - cd ml_project/data/raw\n      - kaggle datasets download -d cherngs/heart-disease-cleveland-uci\n      - unzip heart-disease-cleveland-uci.zip \n      - rm heart-disease-cleveland-uci.zip\n\n\nRUN train with default config:\n```\n   cd ml_project\n   python -m ml_project.pipelines.train_pipeline\n```\n\nRUN train with overrode config (all pipelines' configs are in configs/train_pipelines folder):\n```\n   cd ml_project\n   python -m ml_project.pipelines.train_pipeline +train_pipelines=forest_train_pipeline\n```\n\nRun predict with default config:\n```\n    cd ml_project\n    python -m ml_project.pipelines.predict_pipeline\n```\nRUN tests:\n```\n   cd ml_project\n   pytest\n```\n\nАрхитектурные решения:\n- Проект ml-project представляет собой пакет Python. Структура пакета (заимствована стуктура cookiecutter-data-science):\n```\n├── __init__.py\n├── README.md         \n├── data\n│   └── raw            <- Исходный датасет\n│\n├── notebooks          <- Результаты анализа данных и прототипы.\n│   └── EDA.ipynb\n│\n├── configs            <- Конфигурации проекта в формате .yaml\n│   ├── train_pipelines      <- Измененные default конфигурации train пайплайнов\n│   ├── features\n│   ├── model\n│   ├── preprocessing\n│   ├── split\n│   ├── default_train_pipeline.yaml\n│   └── default_predict_pipeline.yaml\n│   \n├── requirements.txt  \n│\n├── outputs            <- Все артефакты создаваемые пайплайнами (модели, метрики, используемые конфигурационные файлы).  \n│   ├── train\n│   └── inference\n└── ml_project                <- Исходный код.\n    ├── __init__.py    \n    ├── tests\n    └── pipelines\n        ├── __init__.py\n        ├── train_pipeline.py   \n        ├── predict_pipeline.py \n        │\n        ├── data           <- Модули, содержащие код для предобработки данных.\n        │   ├── __init__.py\n        │   ├── features_params.py   <- Класс для конфигурации (Выделяемые из датасета признаки).\n        │   ├── split_params.py      <- Класс для конфигурации (Размеры тренировочного и тестого датасетов).\n        │   └── make_dataset.py      <- Создание датафрейма, разбиение на тренировочные и тестовые данные.\n        │\n        ├── preprocessing       <-  Содержит трансформеры для подготовки данных.\n        │   ├── __init__.py\n        │   ├── preprocessing_params.py     <- Класс для конфигурации (Параметры трансформера).\n        │   └── transformers.py\n        │\n        └── models      <- Обучение, использовние и конфигурирование модели.\n            ├── __init__.py\n            ├── model_params.py   <- Класс для конфигурации (Параметры модели).\n            ├── predict_model.py  \n            └── train_model.py    \n```\n- Для тренировки модели и использования обученной модели созданы соответствующие пайплайны (ml_project/pipelines).\n- Проект имеет модульную структуру (за каждую часть пайплайна отвечает определенный пакет).\n- Для конфигурирования использована hydra.\n- Данные скачиваются с Google Drive.\n- Артефакты сохраняются в папке outputs/train, outputs/inference.\n- Для тестирования пайплайнов генерируются данные приближенные к реальным: \n  - категориальные\n  - числовые (с дискретными и непрерывными распределенями) в пределах минимальных и максимальных значений\n\n1. В описании к пулл реквесту описаны основные \"архитектурные\" и тактические решения. (1/1)\n2. В пулл-реквесте проведена самооценка (1/1)\n3. Выполнено EDA и прототипирование. Нет скрипта (1/2)\n4. Написана функция/класс для тренировки модели, вызов оформлен как утилита командной строки, записана в readme инструкция по запуску (3/3)\n5. Написана функция/класс predict (вызов оформлен как утилита командной строки), которая примет на вход артефакт/ы от обучения, \n   тестовую выборку (без меток) и запишет предикт по заданному пути, инструкция по вызову записана в readme (3/3)\n6. Проект имеет модульную структуру. Описание структуры проекта в README.md (2/2)\n7. Использованы логгеры (2/2)\n   - Используется модуль logging в основных модулях (пайплайны, обучение, получение датасета).\n   - Настройки модуля - измененнные настройки логгера hydra (вывод в файл и в консоль).\n   - Логи подсвечиваются в консоли.\n8. Написаны тесты на отдельные модули и на прогон обучения и predict. (3/3)\n   - Для всех модулей и пайплайнов есть тесты. (framework pytest)\n   - В CI отображается отчёт о покрытии (общее покрытие строк 93 %). \n9. Для тестов генерируются синтетические данные, приближенные к реальным. (2/2)\n   - Данные генерируются дискретные (категориальные признаки, 'age' и т.д.) и непрерывные с равномерным распределением.\n   - Все данные генерируются в пределах их минимальных и максимыльных значений.\n   - Используются для тестирования как train, так и predict пайплайнов.\n10. Обучение модели конфигурируется с помощью конфигов yaml. (3/3) \n    Есть две конфигурации (отличаются модели, признаки и параметры разбиения на train, test):\n    - configs/default_train_pipeline.yaml\n    - configs/pipelines/forest_train_pipeline.yaml\n11. Используются датаклассы для сущностей из конфига, а не голые dict (2/2)\n    - Все датакслассы конфигов находятся в директориях с соответствующими модулями.\n    - Имена классов модулей содержащих датаклассы конфигов с суффиксом '_params'.\n12. Напишите кастомный трансформер и протестируйте его (3/3)\n    - Реализовано два кастомных трансформера (IdentityTransformer, OneHotTransformer)\n    - OneHotTransformer осуществляет one-hot кодирование категориальных признаков \n      и рескейлинг числовых признаков.\n    - Реализованы тесты на случайном датасете.\n13. В проекте зафиксированы все зависимости (1/1)\n14. Настроен CI для прогона тестов, линтера на основе github actions (3/3).\n\nДополнительные баллы:\n1. Используется hydra для конфигурирования (3 балла)\n2. Mlflow (Не используется: 0 баллов)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/made-ml-in-prod-2022/juliarty",
    "keywords": "homework ml in prod",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-in-prod-juliarty-ml-project-1",
    "package_url": "https://pypi.org/project/ml-in-prod-juliarty-ml-project-1/",
    "platform": null,
    "project_url": "https://pypi.org/project/ml-in-prod-juliarty-ml-project-1/",
    "project_urls": {
      "Bug Reports": "https://github.com/made-ml-in-prod-2022/juliarty/issues",
      "Homepage": "https://github.com/made-ml-in-prod-2022/juliarty",
      "Source": "https://github.com/made-ml-in-prod-2022/juliarty/"
    },
    "release_url": "https://pypi.org/project/ml-in-prod-juliarty-ml-project-1/0.2.0/",
    "requires_dist": [
      "pyyaml (==6.0)",
      "marshmallow-dataclass (==8.5.8)",
      "pandas (~=1.4.2)",
      "scikit-learn (~=1.0.2)",
      "numpy (~=1.22.3)",
      "omegaconf (~=2.1.2)",
      "hydra-core (==1.1.2)",
      "hydra-colorlog (==1.1.0)",
      "pytest (~=7.1.2)",
      "gdown (==4.4.0)"
    ],
    "requires_python": ">=3.8, <4",
    "summary": "That is a homework project",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13968017,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2274c25581e6828f7e6297cf03b616175b614383f63e0640c5baea794fa0650b",
          "md5": "9d5778531bef854fb6e629c7892c105e",
          "sha256": "c4d41074e39e8d17d1566e6d2f6b2fc226c42aabb16c1de690792c19f9df782e"
        },
        "downloads": -1,
        "filename": "ml_in_prod_juliarty_ml_project_1-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d5778531bef854fb6e629c7892c105e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 35622,
        "upload_time": "2022-05-28T19:06:37",
        "upload_time_iso_8601": "2022-05-28T19:06:37.393730Z",
        "url": "https://files.pythonhosted.org/packages/22/74/c25581e6828f7e6297cf03b616175b614383f63e0640c5baea794fa0650b/ml_in_prod_juliarty_ml_project_1-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1103f8291325deab2eaa8dd5294b8bc6daa52063d706c0537be320764fc1a0cd",
          "md5": "bd046e51c3f86c6bcf39a09ed606e474",
          "sha256": "75c2bb8f983c15d1d63ae9ca4b90d5fb787c9b8fe571def62c78b85dbfe7f246"
        },
        "downloads": -1,
        "filename": "ml_in_prod_juliarty_ml_project_1-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd046e51c3f86c6bcf39a09ed606e474",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 53263,
        "upload_time": "2022-05-29T09:09:35",
        "upload_time_iso_8601": "2022-05-29T09:09:35.781741Z",
        "url": "https://files.pythonhosted.org/packages/11/03/f8291325deab2eaa8dd5294b8bc6daa52063d706c0537be320764fc1a0cd/ml_in_prod_juliarty_ml_project_1-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1103f8291325deab2eaa8dd5294b8bc6daa52063d706c0537be320764fc1a0cd",
        "md5": "bd046e51c3f86c6bcf39a09ed606e474",
        "sha256": "75c2bb8f983c15d1d63ae9ca4b90d5fb787c9b8fe571def62c78b85dbfe7f246"
      },
      "downloads": -1,
      "filename": "ml_in_prod_juliarty_ml_project_1-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd046e51c3f86c6bcf39a09ed606e474",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8, <4",
      "size": 53263,
      "upload_time": "2022-05-29T09:09:35",
      "upload_time_iso_8601": "2022-05-29T09:09:35.781741Z",
      "url": "https://files.pythonhosted.org/packages/11/03/f8291325deab2eaa8dd5294b8bc6daa52063d706c0537be320764fc1a0cd/ml_in_prod_juliarty_ml_project_1-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}