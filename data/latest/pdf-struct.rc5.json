{
  "info": {
    "author": "Yuta Koreeda",
    "author_email": "yuta.koreeda@hal.hitachi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# pdf-struct: Logical structure analysis for visually structured documents\n\nThis is a tool for extracting fine-grained logical structures (such as boundaries and their hierarchies) from visually structured documents (VSDs) such as PDFs.\npdf-struct is easily customizable to different types of VSDs and it significantly outperformed baselines in identifying different structures in VSDs.\nFor example, our system obtained a paragraph boundary detection F1 score of 0.953 which is significantly better than a popular PDF-to-text tool with an F1 score of 0.739.\nPlease note that current pdf-struct has several limitations:\n\n* It is intended for single-column documents. It does not suport multi-column documents.\n* Published models are trained on contracts. It may work on general documents, but it has not been tested. Nevertheless, you can train your own model using a corpus of your choice.\n\nDetails of pdf-struct can be found in our [paper](https://aclanthology.org/2021.nllp-1.15/) that was published in \"Natural Legal Language Processing Workshop 2021\".\nYou can find the dataset for reproducing the paper [here](https://stanfordnlp.github.io/pdf-struct-dataset/).\n\n## Basic Usage\n\nThis program runs on Python 3 (tested on 3.8.5).\nInstall pdf-struct:\n\n```\npip install pdf-struct\n```\n\n### CLI\n\n```\npdf-struct predict --model PDFContractEnFeatureExtractor ${PATH_TO_PDF_FILE}\n```\n\nYou may choose a pretrained model from https://github.com/stanfordnlp/pdf-struct-models .\nPlease refer `pdf-struct predict --help` for full options.\n\n### Python Interface\n\n`pdf-struct` provides a Python interface for inline prediction, too:\n\n```python\nimport pdf_struct\n\n\npdf_struct.predict(\n  format='paragraphs',\n  in_path=path_to_pdf_file,\n  model='PDFContractEnFeatureExtractor'\n)\n```\n\nYou can refer `pdf-struct predict --help` for the options, as it is basically what is used internally by CLI.\n\n## Advanced Usage\n\nThis section explains the way to create your own dataset and to train your own models.\n\n### Prerequisite\n\nTo install dependencies, run:\n\n```bash\npip install -r requirements.txt\n```\n\n### Getting data ready\n\nFirst, place your raw documents in a directory of your choice.\nThey must have following extensions:\n\n* `*.pdf`: PDF files with embedded text. PDF without embedded text (i.e. those that require OCR) or two columns PDF is not supported.\n* `*.txt`: Plain text files that are visually structured with spaces/line breaks.\n* `*.hocr`: HOCR files.\n\nYou may handle HTML files by turning them into PDF files:\n\n```bash\nfind my_input_directory/ -type f | \\\n  grep -P 'html$|htm$|HTML$|HTM$' | \\\n  while read f; do \\\n    chrome --headless --disable-gpu --print-to-pdf-no-header --print-to-pdf=\"data/raw/`basename $f`.pdf\" \"$f\"; \\\n  done\n```\n\n\n### Creating TSV files for annotation\n\nCreate TSV file for annotation. \n\n```bash\npdf-struct init-dataset ${FILE_TYPE} ${RAW_DOCUMENTS_DIR} ${OUTPUT_DIR}\n```\n\nwhere `${FILE_TYPE}` should be one of `pdf`, `txt` or `hocr`.\n\nThis will output tsv files to `${OUTPUT_DIR}`.\n\n### Annotating TSV files\n\nAnnotate TSV files that were geenerated with `init-dataset` command.\n\nEach line of TSV file is organized as following:\n\n```\ntext<tab>pointer<tab>label\n```\n\n`text` is extracted text from the input document. It should roughly correspond to a line in the document.\n\n`label` (default empty) denotes the transition relationship between that line and the next line.\nIt should be one of following:\n\n* c(continuous): Next line is part of a same paragraph\n* a(ddress): Next line is part of a same paragraph BUT the line break is meaningful. This is intended to be used for things like addresses.\n* b(lock): Next line is a start of a new paragraph BUT in within the same \"block\"\n* s(ame level): Next line is a start of a new block (thus a new paragraph)\n* d(rop): Next line is a start of a new block (thus a new paragraph) that is a child of the current block\n* e(limine): The current line should be deleted\n* x (excluded): The current line should be excluded both from training and evaluation\n    - In our experiments, we removed things like temporal two column lines, signatures, titles etc.\n\nIn the annotation, we introduced a concept `block`. This is intended for a case where we want to distinguish listings and paragraphs.\ne.g.,\n\n```\nEach party must:\n\n    1. Blah blah blah ....\n    blah blah blah....\n      Blah blah blah....\n    blah blah blah....\n\n    2. Blah blah blah...\n```\n\nHere, a new paragraph within `1.` at the fifth line is definately meaningful and it should not be treated in the same way as the start of `2.` at the eighth line.\nWe say that relationship between the forth and fith lines (i.e. label for the forth line) is `b`.\n\nThat being said, we currently treat b and s label in the same way.\nIn fact some other labels are merged in the training/evaluation:\n\n* `c` and `a` will be merged\n* `b` and `s` will be merged\n* `c`, `b`, `d` and `s` with a pointer is merged\n\n`pointer` (default 0) is introduced when the hierarchy goes up.\nIt should be used along with `c`, `b`, `d` or `s`.\nWe use pointer along with different labels, because we have some oocasions where we see rise in hierarchy AND the line being a continous paragraph or a different paragraph.\n\ne.g.,\n\n```\nBlah blah blah...:<tab>0<tab>d\n  a. Blah blah blah...<tab>0<tab>s\n  b. Blah blah blah...<tab>-1<tab>s\nBlah blah blah...:<tab>0<tab>d\n  1. Blah blah blah...<tab>0<tab>d\n    a) Blah blah blah...<tab>0<tab>c\n     blah blah blah...<tab>0<tab>s\n    b) Blah blah blah...<tab>5<tab>c\n    but this does not include ...<tab>5<tab>s\n                       PAGE 1/2<tab>0<tab>e\n  2. Blah blah blah...<tab>0<tab>d\n```\n\nAs you can see, eighth line use a pointer along with `c` because the nineth line is actually a continous paragraph from the fifth line.\nPointers are 1-indexed (starts from 1) and 0 denotes no pointer.\nA pointer can be set to `-1` to return to the most upper hierarchy.\nThe last line should be annotated with pointer `-1` and label `s` (though it is ignored internally).\n\n### Evaluating models\n\nYou can run experiments with following command:\n\n```bash\npdf-struct evaluate ${FILE_TYPE} ${FEATURE_EXTRACTOR_NAME} ${RAW_DOCUMENTS_DIR} ${ANNOTATED_DOCUMENTS_DIR}\n```\n\nRefer `pdf-struct evaluate --help` for the list of the feature extractors.\nThis will run k-folds cross validation over the data.\n\n### Training models\n\nYou can train a new model on your dataset.\n\n```bash\npdf-struct train ${FILE_TYPE} ${FEATURE_EXTRACTOR_NAME} ${RAW_DOCUMENTS_DIR} ${ANNOTATED_DOCUMENTS_DIR} ${MODEL_OUTPUT_PATH}\n```\n\nYou can then feed `${MODEL_OUTPUT_PATH}` to `--path` option of `pdf-struct predict`.\n\n## Customizing feature extractor\n\nYou can easily implement your own feature extractor.\nAll feature extractors inherit from `pdf_struct.core.feature_extractor.BaseFeatureExtractor`.\nA child class of `BaseFeatureExtractor` has to implement feature extracting functions.\nA feature extractor class will be instantiated for each document and each feature extracting function will be called for each pair of consecutive lines of the input document.\n\n```\nfrom typing import List, Optional\n\nimport numpy as np\n\nfrom pdf_struct.core.feature_extractor import BaseFeatureExtractor, \\\n    single_input_feature, pairwise_feature\nfrom pdf_struct.loader.pdf import TextBox\nfrom pdf_struct import loader\nfrom pdf_struct.core import transition_labels\nfrom pdf_struct.core.export import to_tree\nfrom pdf_struct.core.predictor import train_classifiers, \\\n    predict_with_classifiers\n\n\nclass MinimalPDFFeatureExtractor(BaseFeatureExtractor):\n    def __init__(self, text_boxes: List[TextBox]):\n        '''This class is instantiated for each document.\n        The constructor receives text_boxes which is basically all the\n        lines of the input document.\n        You can calculate document-specific global constants here to use\n        in the actual feature extraction.\n\n        text_boxes is list of objects all of which inherit from\n        `pdf_struct.core.document.TextBlock`. This will be\n        `pdf_struct.loader.pdf.TextBox` if you choose `pdf` in `pdf-struct train`\n        or `pdf_struct.loader.text.TextLine` if you choose `text`.\n        '''\n        bboxes = np.array(\n            [tb.bbox for tb in text_boxes])\n        page_top = bboxes[:, 3].max()\n        page_bottom = bboxes[:, 1].min()\n        self.header_thresh = \\\n            page_top - 0.15 * (page_top - page_bottom)\n\n    @single_input_feature([1])\n    def header_region(self, tb: Optional[TextBox]):\n        '''A member function with `@single_input_feature` will be called\n        for each pair of consecutive text blocks. For each pair, such function\n        will be applied to text blocks whose indices are specified in the argument.\n        `1` means the line means the first of the pair and `2` means the latter\n        `0` is the line before `1` and `3` means the line after `2`.\n        The function should return `bool`, `int` or `float`. It can also return\n        dict (keys will be appended to the function name to create feature names)\n        or list (numbers will be automatically appended).\n        tb can be `None` when it is outside the document region (specifying `3`\n        will results in `None` towards the end of the document).\n\n        Here, we are classifying whether the first line is in a header region\n        as this can be a strong clue when determining the relationship between\n        the pair.\n        '''\n        return bool(tb.bbox[3] > self.header_thresh)\n\n    @pairwise_feature([(0, 1), (1, 2)])\n    def page_change(self, tb1: Optional[TextBox], tb2: Optional[TextBox]):\n        '''Same as `@single_input_feature` but works on pair of text blocks\n        as specified in its argument.\n        '''\n        if tb1 is None or tb2 is None:\n           return True\n        return tb1.page != tb2.page\n\n\n\nannos = transition_labels.load_annos('./path-to-anno-dir')\n\nFILE_TYPE = 'pdf'\ndocuments = loader.modules[FILE_TYPE].load_from_directory('./path-to-raw-file-dir', annos)\nassert len(documents) > 0\n\ndocuments = [MinimalPDFFeatureExtractor.append_features_to_document(document)\n             for document in documents]\n\nclf, clf_ptr = train_classifiers(documents)\n\n# Now make predictions\ndocument = loader.modules[FILE_TYPE].load_document('./path-to-pdf.pdf', None, None)\ndocument = MinimalPDFFeatureExtractor.append_features_to_document(document)\n\npred = predict_with_classifiers(clf, clf_ptr, [document])[0]\nprint(to_tree(pred))\n```\n\nExamples of feature extractors can be found in `pdf_struct.feature_extractors`.\nYou can also inhert from any of the existing feature extractors so that you do not need to copy-and-paste the whole class.\n\n## Citing\n\nIf you used our work for your academic publication, please cite our work:\n\n```\n@inproceedings{koreeda-manning-2021-capturing,\n    title = \"Capturing Logical Structure of Visually Structured Documents with Multimodal Transition Parser\",\n    author = \"Koreeda, Yuta  and\n      Manning, Christopher\",\n    booktitle = \"Proceedings of the Natural Legal Language Processing Workshop 2021\",\n    month = nov,\n    year = \"2021\",\n    address = \"Punta Cana, Dominican Republic\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2021.nllp-1.15\",\n    doi = \"10.18653/v1/2021.nllp-1.15\",\n    pages = \"144--154\"\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stanfordnlp/pdf-struct",
    "keywords": "",
    "license": "Apache",
    "maintainer": "Yuta Koreeda",
    "maintainer_email": "yuta.koreeda@hal.hitachi.com",
    "name": "pdf-struct",
    "package_url": "https://pypi.org/project/pdf-struct/",
    "platform": null,
    "project_url": "https://pypi.org/project/pdf-struct/",
    "project_urls": {
      "Homepage": "https://github.com/stanfordnlp/pdf-struct"
    },
    "release_url": "https://pypi.org/project/pdf-struct/0.3.4/",
    "requires_dist": [
      "click (==8.1.3)",
      "numpy (==1.23.1)",
      "pdfminer.six (==20220524)",
      "regex (==2022.7.25)",
      "torch (==1.9.0)",
      "tqdm (==4.48.0)",
      "transformers (==4.9.1)",
      "scikit-learn (==1.1.2)",
      "joblib (==1.0.0)",
      "editdistance (==0.5.3)",
      "beautifulsoup4 (==4.11.1)",
      "sentencepiece (==0.1.96)",
      "wheel",
      "twine"
    ],
    "requires_python": "",
    "summary": "Logical structure analysis of visually structured documents.",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14818939,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af53b82e5271643e1b1002eca72d26dec998b3b7794d281cd0ff48172f5d8516",
          "md5": "c354a16f510ff7e2630b9ad83a02bdf0",
          "sha256": "d144f994795ccd72b2d3b2be9167e6365b66044128fb7ab7c0e0d91ad2a59427"
        },
        "downloads": -1,
        "filename": "pdf_struct-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c354a16f510ff7e2630b9ad83a02bdf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61239,
        "upload_time": "2021-11-08T04:43:15",
        "upload_time_iso_8601": "2021-11-08T04:43:15.274616Z",
        "url": "https://files.pythonhosted.org/packages/af/53/b82e5271643e1b1002eca72d26dec998b3b7794d281cd0ff48172f5d8516/pdf_struct-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c361fd0167aebe5ba83793942731a5550dc70bcce360afab6c38316953393c",
          "md5": "1ae7ca6ef4a474de634c53d4af7eb388",
          "sha256": "85e12d0a6f043df90ec087278d93b874758fe2922b72ac8b7c71f0864ecd6de9"
        },
        "downloads": -1,
        "filename": "pdf-struct-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ae7ca6ef4a474de634c53d4af7eb388",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42001,
        "upload_time": "2021-11-08T04:43:16",
        "upload_time_iso_8601": "2021-11-08T04:43:16.957671Z",
        "url": "https://files.pythonhosted.org/packages/32/c3/61fd0167aebe5ba83793942731a5550dc70bcce360afab6c38316953393c/pdf-struct-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1398910ed46ad24c95a1d7183edb0d9abd8a23462b4b893e90072c1d223ac1b",
          "md5": "6a18d4bfc0c810cf2e9f2adb0aab1d28",
          "sha256": "247bea53dd03796fb573a2ebf5ba3f1f1cb06d89deb19fa14a177fb79869f4a0"
        },
        "downloads": -1,
        "filename": "pdf_struct-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a18d4bfc0c810cf2e9f2adb0aab1d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61294,
        "upload_time": "2021-11-09T12:52:15",
        "upload_time_iso_8601": "2021-11-09T12:52:15.267713Z",
        "url": "https://files.pythonhosted.org/packages/a1/39/8910ed46ad24c95a1d7183edb0d9abd8a23462b4b893e90072c1d223ac1b/pdf_struct-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26619fe95444346c911b6ba5939a9bd9a25bb24b49a1a6381d614a738e2fa013",
          "md5": "d782a7a0d48ff681180ae52f4dce0687",
          "sha256": "8ef8f33d556c91b9a75ac8b9333de7623b784dfe73e48621dde8e67a04a8d938"
        },
        "downloads": -1,
        "filename": "pdf-struct-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d782a7a0d48ff681180ae52f4dce0687",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42037,
        "upload_time": "2021-11-09T12:52:16",
        "upload_time_iso_8601": "2021-11-09T12:52:16.841456Z",
        "url": "https://files.pythonhosted.org/packages/26/61/9fe95444346c911b6ba5939a9bd9a25bb24b49a1a6381d614a738e2fa013/pdf-struct-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6007fac56c5c1bbef0cb1347b89dc4c8be68b4200cbb89b13af49b5ae0f739ce",
          "md5": "9b03f59fea8aa8246e50928730db0c4b",
          "sha256": "288de3cb9f65ff70f2d2273fafac95545284918201e6158fbc7005a6f101c59b"
        },
        "downloads": -1,
        "filename": "pdf_struct-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b03f59fea8aa8246e50928730db0c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61430,
        "upload_time": "2021-12-01T02:35:58",
        "upload_time_iso_8601": "2021-12-01T02:35:58.256037Z",
        "url": "https://files.pythonhosted.org/packages/60/07/fac56c5c1bbef0cb1347b89dc4c8be68b4200cbb89b13af49b5ae0f739ce/pdf_struct-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25e459acb0d0c65387693453e0b07f3dbdc74f995b5cfb4ffb412cdef3eaa90c",
          "md5": "5bc4604d5ea4ca4efc6166edcdac4e5e",
          "sha256": "5204f49d460004f7a7e611d61cfe7bbcfbf7b821563df2007f16922df5b93813"
        },
        "downloads": -1,
        "filename": "pdf-struct-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5bc4604d5ea4ca4efc6166edcdac4e5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42190,
        "upload_time": "2021-12-01T02:35:59",
        "upload_time_iso_8601": "2021-12-01T02:35:59.841557Z",
        "url": "https://files.pythonhosted.org/packages/25/e4/59acb0d0c65387693453e0b07f3dbdc74f995b5cfb4ffb412cdef3eaa90c/pdf-struct-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9309f01cf9bf48197a2b8401a68f9d5bd0130864557f8f17589f55bb00b7fb18",
          "md5": "5ad0196e85bfd6ac634ed43308142e11",
          "sha256": "df94b7341fbc744c87c0ae86797476bc3eb7ce12d28b273b74e8d84ef4764c0b"
        },
        "downloads": -1,
        "filename": "pdf_struct-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ad0196e85bfd6ac634ed43308142e11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61499,
        "upload_time": "2021-12-01T04:44:32",
        "upload_time_iso_8601": "2021-12-01T04:44:32.182892Z",
        "url": "https://files.pythonhosted.org/packages/93/09/f01cf9bf48197a2b8401a68f9d5bd0130864557f8f17589f55bb00b7fb18/pdf_struct-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abb4cef59aae0cc105aa049a4fb0ee282888889746f0dc6ab0122eb6d7cc7730",
          "md5": "10131d779918ceb399569f5a6ddfa47d",
          "sha256": "2b6aa0fd9c8a07e77533949dde4ba77510a781b5f9f90994a18e523be7e03348"
        },
        "downloads": -1,
        "filename": "pdf-struct-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "10131d779918ceb399569f5a6ddfa47d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42247,
        "upload_time": "2021-12-01T04:44:33",
        "upload_time_iso_8601": "2021-12-01T04:44:33.550857Z",
        "url": "https://files.pythonhosted.org/packages/ab/b4/cef59aae0cc105aa049a4fb0ee282888889746f0dc6ab0122eb6d7cc7730/pdf-struct-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "265c622b0afa9f14638519952db6a6ca4fa29f36577733b16b4bc80a8e76e552",
          "md5": "ce56b6cf9dfff94b9528b3bb0c64d46b",
          "sha256": "e91eb0023bd0864e962f6318b4a88a1c4afe07d0d74161b26abc12a8756b9310"
        },
        "downloads": -1,
        "filename": "pdf_struct-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce56b6cf9dfff94b9528b3bb0c64d46b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 63255,
        "upload_time": "2022-08-20T01:16:10",
        "upload_time_iso_8601": "2022-08-20T01:16:10.973869Z",
        "url": "https://files.pythonhosted.org/packages/26/5c/622b0afa9f14638519952db6a6ca4fa29f36577733b16b4bc80a8e76e552/pdf_struct-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "231b53bcbb3951ba8deb182f00cbb89ef09147411ab75e2ce52f4f4fa24a1009",
          "md5": "12e9c3e8d0d528045df58ce8951037c0",
          "sha256": "7ac21b87f2239ab295c288bd787658f5b6ac2c2b545f04c3beebe2acecc4680c"
        },
        "downloads": -1,
        "filename": "pdf-struct-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "12e9c3e8d0d528045df58ce8951037c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46086,
        "upload_time": "2022-08-20T01:16:13",
        "upload_time_iso_8601": "2022-08-20T01:16:13.221716Z",
        "url": "https://files.pythonhosted.org/packages/23/1b/53bcbb3951ba8deb182f00cbb89ef09147411ab75e2ce52f4f4fa24a1009/pdf-struct-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "265c622b0afa9f14638519952db6a6ca4fa29f36577733b16b4bc80a8e76e552",
        "md5": "ce56b6cf9dfff94b9528b3bb0c64d46b",
        "sha256": "e91eb0023bd0864e962f6318b4a88a1c4afe07d0d74161b26abc12a8756b9310"
      },
      "downloads": -1,
      "filename": "pdf_struct-0.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce56b6cf9dfff94b9528b3bb0c64d46b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 63255,
      "upload_time": "2022-08-20T01:16:10",
      "upload_time_iso_8601": "2022-08-20T01:16:10.973869Z",
      "url": "https://files.pythonhosted.org/packages/26/5c/622b0afa9f14638519952db6a6ca4fa29f36577733b16b4bc80a8e76e552/pdf_struct-0.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "231b53bcbb3951ba8deb182f00cbb89ef09147411ab75e2ce52f4f4fa24a1009",
        "md5": "12e9c3e8d0d528045df58ce8951037c0",
        "sha256": "7ac21b87f2239ab295c288bd787658f5b6ac2c2b545f04c3beebe2acecc4680c"
      },
      "downloads": -1,
      "filename": "pdf-struct-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "12e9c3e8d0d528045df58ce8951037c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46086,
      "upload_time": "2022-08-20T01:16:13",
      "upload_time_iso_8601": "2022-08-20T01:16:13.221716Z",
      "url": "https://files.pythonhosted.org/packages/23/1b/53bcbb3951ba8deb182f00cbb89ef09147411ab75e2ce52f4f4fa24a1009/pdf-struct-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}