{
  "info": {
    "author": "Andrej Virgovic",
    "author_email": "virgovica@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Installation\n1. install python3.6 or higher for your OS\n2. [install](https://www.linode.com/docs/development/version-control/how-to-install-git-on-linux-mac-and-windows/) git \n3. install btc_hd_wallet:\n\na.) via pypi \n`pip install btc_hd_wallet`\n\nb.) from source\n```shell script\n# clone btc-hd-wallet repository\ngit clone https://github.com/scgbckbone/btc-hd-wallet.git\n# change directory to project root\ncd btc-hd-wallet\n# create virtual environment\npython3 -m venv btc-hd-wallet\n# activate virtual environment\nsource btc-hd-wallet/bin/activate\n# upgrade pip, setuptools and wheel (optional)\npip install -U pip setuptools wheel\n# install project\npython setup.py install\n# run unittests (optional)\npython setup.py test\n```\n\n# Base Wallet\n```python3\nfrom btc_hd_wallet import BaseWallet\n\n# many ways how to initialize BaseWallet object\n# 1. totally new wallet\n# this will generate new mainnet wallet with 24 words mnemonic\nw = BaseWallet.new_wallet()\n\n# you can also generate testnet wallet with different length mnemonic\nw = BaseWallet.new_wallet(mnemonic_length=12, testnet=True)\nassert len(w.mnemonic.split(\" \")) == 12 and w.testnet\n\n# you can also secure your wallet with optional passphrase\nw = BaseWallet.new_wallet(mnemonic_length=18, password=\"optional_secret_pwd\")\nassert len(w.mnemonic.split(\" \")) == 18 and not w.testnet and w.password == \"optional_secret_pwd\"\n\n# 2. from entropy hex string \nw = BaseWallet.from_entropy_hex(\n    entropy_hex=\"064338c5a50fcf96436142e164e005be3d0a51cb7bcc6050a6d0798e863c5b44\"\n)\n\n# testnet with password\nw = BaseWallet.from_entropy_hex(\n    entropy_hex=\"1e0479633a5c856b88a78b1977d3c214\",\n    password=\"optional_super_secret_password\",\n    testnet=True\n)\n\n# 3. from bip39 seed hex\nw = BaseWallet.from_bip39_seed_hex(\n    bip39_seed=\"353cc8f20663196c2181b462e5d5d1a62192521b7604a578f87a3224a7ea9df91925c7e5b399094d996a2951acb1a95eba44b8293a5218bb6d964ba1def5f501\",\n    testnet=True\n)\nassert w.mnemonic is None and w.password is None\n\n# 4. from mnemonic\nw = BaseWallet.from_mnemonic(\n    mnemonic=\"bulk cat flee input sign remind card vapor bonus salon vacuum cinnamon\",\n    password=\"optional_secret_pwd\",\n    testnet=False\n)\n\n# 5. from extended key\nw = BaseWallet.from_extended_key(\n    extended_key=\"xprv9s21ZrQH143K2n9ryKS5EXxvQaNSbCxrVHSUigxG9ywY6GVQYsrk6n8e9j6m9z9LvBULFnSyjcLFxbG6WtXoeYRF19f1FY23nni39XSLPWm\"\n)\n\n# here you can also create watch only wallet from extended pub key\n# for instance: generate wallet offline, derive external chain extended pub key\new = BaseWallet.from_extended_key(\n    extended_key=\"xpub6BvTr9tVPEDEDQ12sR7Ty4tVGnNGfDEeDg7dgmNkYzr3QXLS9amBxYHWRBbCJ2uD1RpVXZNkqXji2u3YE1bKxR7g6TUpxxB7C3Cx76i6wHL\"\n)\n# this will pass just fine as wallet loaded from extended public key is warch only\nassert ew.watch_only == True \n\n# 'ew' represents wallet which has as its master key external chain of \n# hundredth account of bip84 purpose bitcoin mainnet wallet (m/84'/0'/100'/0) \n# create generator\nbip84_gen = ew.address_generator(node=ew.master)\n\n# generate addresses\nnext(bip84_gen)\n\n# yields tuple of path and address \n> (\"m/84'/0'/100'/0/0\", \"bc1qqv548euf07gx0h87d4sjczn65t8wnlv5jshp0z\")\n```\n\n# Paper Wallet\n```python3\nfrom btc_hd_wallet import PaperWallet\nw = PaperWallet.new_wallet()\n\n# to display paper wallet in console\nw.pprint()\n\n# get python dictionary repsresentation of paper wallte\njson_dct = w.generate()\n\n# get json serialized string representation of paper wallet\njson_str = w.json(indent=4)\n\n# wasabi import file format (inspired by ColdCard)\nfile_path = \"/home/john/wasabi0.json\"\nw.export_wasabi(file_path=file_path)\n```\n\n# Private and Public keys\n```python3\nfrom btc_hd_wallet import PrivateKey, PublicKey\n\n# initialize private key object from secret exponent\nsk = PrivateKey(sec_exp=61513215313213513843213)\n\n# from wif format\nsk = PrivateKey.from_wif(\"KxNH4NuQoDJjA9LwvHXn5KBTDPSG9YeoA7RBed2LwLRNqd1Tc4Wv\")\n\n# from byte sequence\nsk = PrivateKey.parse(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15&X\\xc0\\xe3\\xee\\\\\\r$bU\\x18')\n\n# secret exponent\nsecret_exponent = sk.sec_exp\n# to wif\nwif_str = sk.wif(testnet=False)\n# to bytes\nsk_bytes = bytes(sk)\n\n\n# to access corresponding public key\npk = sk.K\n\n# RIPEMD160(SHA256) of public key\nh160 = pk.h160()\n\n# p2pkh testnet address\np2pkh = pk.address(addr_type=\"p2pkh\", testnet=True) \n\n# p2wpkh address (p2wpkh is default 'addr_type')\np2wpkh = pk.address()\n\n# SEC encoding (bytes)\nsec = pk.sec()\n\n# elliptic curve point\npoint = pk.point\n\n# public key can also be parsed from sec\nsec_str = \"030975d7fc3e27bcb3d37dd83a84f5ae2f48cec392e781e35ec849142bcc6e2cce\"\npk = PublicKey.parse(bytes.fromhex(sec_str))\n\n# or from ecdsa Point or PointJacobi\npk = PublicKey.from_point(point)\n```\n\n# Bip39 related methods\n```python3\nfrom btc_hd_wallet import (\n    bip39_seed_from_mnemonic, mnemonic_from_entropy_bits, mnemonic_from_entropy\n)\n\n# mnemonic from number of entropy bits (allowed entropy bits 128,160,192,224,256)\nmenmonic = mnemonic_from_entropy_bits(entropy_bits=256)\n\n# mnemonic from entropy hex\nmnemonic = mnemonic_from_entropy(\"0a84d45bb74a0d80c144f9ad765c3b9edc40a8dbb5c053c0930ef040992036d2\")\n\n# create bip39 seed from mnemonic\nseed = bip39_seed_from_mnemonic(mnemonic=mnemonic)\n\n# or with optional password\nseed = bip39_seed_from_mnemonic(mnemonic=mnemonic, password=\"secret\")\n```\n\n# Script\n```python3\nfrom io import BytesIO\nfrom btc_hd_wallet import BaseWallet\nfrom btc_hd_wallet import (\n    Script, p2wsh_script, p2wpkh_script, p2sh_script, p2pkh_script\n)\n\n# you can parse script hex\nscript_hex = \"1976a9148ca70d5eda840e9fb5d38234ae948dfad1d266d788ac\"\nscript = Script.parse(BytesIO(bytes.fromhex(script_hex)))\nstr(script)\n> OP_DUP OP_HASH160 8ca70d5eda840e9fb5d38234ae948dfad1d266d7 OP_EQUALVERIFY OP_CHECKSIG\n\n# script can be raw serialized\nscript.raw_serialize()\n\n# or it can be serialized with length prepended\nscript.serialize()\n\n# or creating script pubkeys from wallet\nw = BaseWallet.new_wallet()\n# derive some child node to use (I'll go with bip84)\nnode = w.by_path(\"m/84'/0'/100'/0/0\")\nhash160_pub_key = node.public_key.h160()\nscript = p2wpkh_script(hash160_pub_key)\nstr(script)\n> OP_0 8ca70d5eda840e9fb5d38234ae948dfad1d266d7\n```\n\n# Bip85\n```python3\nfrom btc_hd_wallet import BIP85DeterministicEntropy\n\nxprv = \"xprv9s21ZrQH143K2n9ryKS5EXxvQaNSbCxrVHSUigxG9ywY6GVQYsrk6n8e9j6m9z9LvBULFnSyjcLFxbG6WtXoeYRF19f1FY23nni39XSLPWm\"\n# create new deterministic entropy object from extended private key\nbip85 = BIP85DeterministicEntropy.from_xprv(xprv=xprv)\n\n# bip39 mnemonic\nbip85.bip39_mnemonic(word_count=24, index=0)\n> lift boost vague vanish occur stamp eagle twice kite pause sunny execute defy grocery mercy assist volume venture subject analyst fiscal lecture connect bunker\nbip85.bip39_mnemonic(word_count=12, index=0)\n> good brave hunt license deliver conduct more dutch donkey green skill gauge\nbip85.bip39_mnemonic(word_count=15, index=1)\n> vessel nerve buzz wife good ski sock walnut crew toward team vast dynamic parade candy\n\n# wallet import format (WIF)\nbip85.wif(index=0)\n> 'KyxeP1pijLmtKZv8ry7d3tbNsq3XDeGgN99Mqi2Gn2Kx6WwPr2wC'\nbip85.wif(index=1)\n> 'KxsrnifkxsZTBeP52VxHzZGawyUSULBi1trHrJhU7ndQxkTXguFJ'\n\n# extended private key (XPRV)\nbip85.xprv(index=0)\n> 'xprv9s21ZrQH143K2SrZ37WGmQ4TcqHbcAxy7tfuoVNZBxnd7huX6XuD2UZBUuXVfrZjjtw5X3B9JgUvoVegVALTeTXWsiUSK9F4FWXFZLfZVzV'\nbip85.xprv(index=1)\n> 'xprv9s21ZrQH143K4RPx2iS7FecFHCUiC4CA2x4PqY6rtqjgqpxqWNcTxK88oRDyiZf8WiTLA6GWwR7BSoFkjjNSEx4wAgGq7nnxukd2FJP7AKH'\n\n# hex\nbip85.hex(index=0)\n> '78ebebfc701429f60ab4540168950c8fc9db5d275324545e7512f9e23b1fcd42'\nbip85.hex(num_bytes=64, index=0)\n> '2205163efb2ae4e78609b4a7410e9a4856f673b04dd0af7ce9851a9f2f7883c854f76a3e1cf639c217adde4956604dcdd853104dfcb93751856e3e13dcb9ab35'\n\n# bip85 is also available in BaseWallet class as its attribute\nfrom btc_hd_wallet.base_wallet import BaseWallet\n\nw = BaseWallet.new_wallet()\ntype(w.bip85) == BIP85DeterministicEntropy\n> True\n```\n\n# Documentation\nSphinx documentation is located in the `docs` subdirectory. \nRun `make html` from there to create html documentation from docstrings.\nDocumentation html is available in `docs/build/html/index.html`\n\ndependency: Sphinx\n```shell script\npip install Sphinx\n```\n\n## Roadmap:\nThis project is Work In Progress\n1. basic HD paper wallet generator supporting bip32, bip44, bip49, bip84, slip132 (Multi-signature P2WSH in P2SH, Multi-signature P2WSH)\n2. storage\n3. network calls \n4. (to be decided)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/scgbckbone/btc-hd-wallet",
    "keywords": "bitcoin,btc,hierarchical deterministic wallet,BIP32,BIP85,BIP39",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "btc-hd-wallet",
    "package_url": "https://pypi.org/project/btc-hd-wallet/",
    "platform": "",
    "project_url": "https://pypi.org/project/btc-hd-wallet/",
    "project_urls": {
      "Homepage": "https://github.com/scgbckbone/btc-hd-wallet"
    },
    "release_url": "https://pypi.org/project/btc-hd-wallet/0.1.1/",
    "requires_dist": [
      "ecdsa (>=0.15)"
    ],
    "requires_python": "",
    "summary": "Bitcoin HD paper wallet implementation.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7952222,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e512e33c12fc04887544fba01fea2bf795cf3a0067f13572e2e94ed2d5252504",
          "md5": "fcef922572f6074339514f902e8c5cf1",
          "sha256": "eddc50dfc2d3beea021989ef422deebe5d1d052869f37c9926ef667b2a3a0098"
        },
        "downloads": -1,
        "filename": "btc_hd_wallet-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcef922572f6074339514f902e8c5cf1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35877,
        "upload_time": "2020-08-13T11:52:29",
        "upload_time_iso_8601": "2020-08-13T11:52:29.592741Z",
        "url": "https://files.pythonhosted.org/packages/e5/12/e33c12fc04887544fba01fea2bf795cf3a0067f13572e2e94ed2d5252504/btc_hd_wallet-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53232aab05ffd82dc2fb3bb1600b1d95589655f168021abbcdf4c1f77859ac11",
          "md5": "e79921787b959ef7e17abed12141b642",
          "sha256": "715759c2e257b2219021bfdbd29abe2c15e2d1d5827038d49a38a37fe0fae596"
        },
        "downloads": -1,
        "filename": "btc_hd_wallet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e79921787b959ef7e17abed12141b642",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32752,
        "upload_time": "2020-08-13T11:52:31",
        "upload_time_iso_8601": "2020-08-13T11:52:31.869202Z",
        "url": "https://files.pythonhosted.org/packages/53/23/2aab05ffd82dc2fb3bb1600b1d95589655f168021abbcdf4c1f77859ac11/btc_hd_wallet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9077fde8f692171f98e8109f9baf46e1c89318ef4741bfd0f8a08f2eb1eb61e0",
          "md5": "721d87a137b3a758fce6863bf7479038",
          "sha256": "10bfa6fc75c557f7a43bd488e717e3fc1b27bf05726b9f1ede63d6f67eb48a71"
        },
        "downloads": -1,
        "filename": "btc_hd_wallet-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "721d87a137b3a758fce6863bf7479038",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35967,
        "upload_time": "2020-08-13T13:01:19",
        "upload_time_iso_8601": "2020-08-13T13:01:19.896192Z",
        "url": "https://files.pythonhosted.org/packages/90/77/fde8f692171f98e8109f9baf46e1c89318ef4741bfd0f8a08f2eb1eb61e0/btc_hd_wallet-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96a1e4a77c324d99e5b3235bb762a966cf58d10cdf1035dad812e3041d1c4399",
          "md5": "76de6664c40d5408f98ae8d5fddbdacd",
          "sha256": "2fd7c1ef9d2b6a1cd0a8ea03c558da2c698448ecdde59203fb51bf1863a6d45d"
        },
        "downloads": -1,
        "filename": "btc_hd_wallet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "76de6664c40d5408f98ae8d5fddbdacd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32892,
        "upload_time": "2020-08-13T13:01:21",
        "upload_time_iso_8601": "2020-08-13T13:01:21.186788Z",
        "url": "https://files.pythonhosted.org/packages/96/a1/e4a77c324d99e5b3235bb762a966cf58d10cdf1035dad812e3041d1c4399/btc_hd_wallet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9077fde8f692171f98e8109f9baf46e1c89318ef4741bfd0f8a08f2eb1eb61e0",
        "md5": "721d87a137b3a758fce6863bf7479038",
        "sha256": "10bfa6fc75c557f7a43bd488e717e3fc1b27bf05726b9f1ede63d6f67eb48a71"
      },
      "downloads": -1,
      "filename": "btc_hd_wallet-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "721d87a137b3a758fce6863bf7479038",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 35967,
      "upload_time": "2020-08-13T13:01:19",
      "upload_time_iso_8601": "2020-08-13T13:01:19.896192Z",
      "url": "https://files.pythonhosted.org/packages/90/77/fde8f692171f98e8109f9baf46e1c89318ef4741bfd0f8a08f2eb1eb61e0/btc_hd_wallet-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96a1e4a77c324d99e5b3235bb762a966cf58d10cdf1035dad812e3041d1c4399",
        "md5": "76de6664c40d5408f98ae8d5fddbdacd",
        "sha256": "2fd7c1ef9d2b6a1cd0a8ea03c558da2c698448ecdde59203fb51bf1863a6d45d"
      },
      "downloads": -1,
      "filename": "btc_hd_wallet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "76de6664c40d5408f98ae8d5fddbdacd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32892,
      "upload_time": "2020-08-13T13:01:21",
      "upload_time_iso_8601": "2020-08-13T13:01:21.186788Z",
      "url": "https://files.pythonhosted.org/packages/96/a1/e4a77c324d99e5b3235bb762a966cf58d10cdf1035dad812e3041d1c4399/btc_hd_wallet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}