{
  "info": {
    "author": "Shekn Itrch",
    "author_email": "cgproggame@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Python Path Finder module\n\nIt placed on the ```python``` folder of the repo. This folder contains:\n\n* main module ```pathfinder```\n* some examples\n* small PySide6 application for exploring navigation meshes\n\n### How to use\n\nTo install:\n\n```\npip install pynavmesh\n```\n\nTo baking navigation mesh:\n\n```\nfrom pathfinder import navmesh_baker as nmb\n# create baker object\nbaker = nmb.NavmeshBaker()\n# add geometry, for example a simple plane\n# the first array contains vertex positions, the second array contains polygons of the geometry\nbaker.add_geometry([(-4.0, 0.0, -4.0), (-4.0, 0.0, 4.0), (4.0, 0.0, 4.0), (4.0, 0.0, -4.0)], [[0, 1, 2, 3]])\n# bake navigation mesh\nbaker.bake()\n# obtain polygonal description of the mesh\nvertices, polygons = baker.get_polygonization()\n```\n\n```baker.bake()``` can accept several parameters. The most important of them are:\n* ```cell_size``` is a voxel size, used for rasterization input polygons\n* ```cell_height``` is a vozel height\n* ```agent_height``` suppositional agent size\n* ```agent_radius``` suppositional agent radius\n\nThe following parameters define walkable areas:  ```agent_max_climb```, ```agent_max_slope```.\n\nOther parameters define polygonization settings:\n* ```region_min_size``` islands with less area will be ignored\n* ```region_merge_size```\n* ```edge_max_len``` maximum length of polygon edges\n* ```edge_max_error```\n* ```verts_per_poly``` define maximum number of corners in polygons (if this value is equal, for eaxmple, to 3, then all polygons will be triangles)\n* ```detail_sample_distance```\n* ```detail_sample_maximum_error```\n\nTo store generated navigation mesh to the file you can use one of two functions:\n* ```baker.save_to_text(file_path)``` to save polygonal description of the navigation mesh into simple text file\n* ```baker.save_to_binary(file_path)``` to save polygonal description of the navigation mesh into binary file with the same structure\n\nTo load navigation mesh data from file you can use similar functions from ```pathfinder``` module:\n* ```read_from_text(file_path)```\n* ```read_from_binary(file_path)```\n\nBoth functions return 2-tuple ```(vertices, polygons)```, where ```vertices``` is array of 3-tuples with vertex coordinates, ```polygons``` is array of integer arrays with polygon vertex indices.\n\nTo create path finder object:\n\n```\nimport pathfinder as pf\npathfinder = pf.PathFinder(vertices, polygons)\n```\n* ```vertices``` is an array of the form ```[(x1, y1, z1), (x2, y2, z2), ...]``` and contains vertex coordinates\n* ```polygons``` is an array of the form ```[[p11, p12, ..., p1n1], [p21, p22, p23, ..., p2n2], ...]```, where each array is a sequence of vertices, which form the polygon. Each ```pij``` is an integer - the index of the vertex in the ```vertices``` array\n\nTo find the path in the navigation mesh simply call\n\n```\npath = pathfinder.search_path(start, finish)\n```\n\n```start``` and ```finish``` are tuples with coordinates. It return the array ```path```, which contains the sequence of corners of it linear segments.\n\nFor using agents collision avoidance it needs more detail setup. When creating ```pathfinder``` object you can setup additional parameters:\n* ```neighbor_dist``` - search distance for other agents\n* ```max_neighbors``` - how many agents considered fir collision avoidance\n* ```time_horizon``` and ```time_horizon_obst``` - how close (in relative time) the agent should be to the other agent or collider to avoid it\n* ```max_speed``` - maximum agent speed\n* ```agent_radius``` - the default agent radius. This value used for building collisions (in the navigation mesh boundary) for agents\n* ```update_path_find``` - how often (the interval in seconds) the system recalculate path for agents\n* ```continuous_moving``` - should agents move after they achieve the target point or not\n* ```move_agents``` - if ```True``` then the system move agent by internal algorithm, in other case it only calculate velocities\n\nHow the agents collision avoidance works:\n* If ```vertices``` or ```polygons``` arrays are ```None``` then the system skip building navigation mesh and in this case it allows to simulate agents in infinite 2d-plane\n* Implemented RVO2 algorithm assume that agent move in the plane XZ. Navigation mesh can be on different height level, but all velocities calculations use only the first (X) and third (Z) coordinates.\n* It's possible to use original RVO2 compiled python module. The repository contains ```binary_rvo``` folder. Copy *.pyd file from this folder with specific python version to ```\\pathfinder\\pyrvo\\``` folder and in ```__init__.py``` file set ```IMPORT_BINARY = True```. Binary version is faster but does not allows to delete agents from simulations.\n\nTo add agent into simulation\n\n```\npathfinder.add_agent(position, radius, speed)\n```\n\nwhere ```position``` is 3-tuple of floats. This method returns the id of the new agent, his name. All agents have different unique ids.\n\nTo delete the agent from simulation\n\n```\npathfinder.delete_agent(agent_id)\n```\n\nTo set the agent destination point\n\n```\npathfinder.set_agent_destination(agent_id, position)\n```\n\n\n### Examples\n\n```baker_examples.py``` contains some basic examples, where we load some geometry into baker and generate corresponding navigation mesh.\n\n```bvh_examples.py``` contains small benchmark for testing the speed of using bvh in the navigation mesh object. It create grid of square polygons, sample random positions and find the index of the closest polygon to each position.\n\n```graph_examples.py``` contains examples for creating graphs and using A* algorithm for finding the shortest path in it. One of them creates grid-like graph with randomly erased edges and find path between random vertices. The result is plotted by using ```matplotlib```.\n\n![Graph example](../images/graph_01.png?raw=true)\n\n```navmesh_examples.py``` contains some examples, which demonstrates, how to create navigation mesh from raw data and how to find the path between points. There is an example, where navigation mesh created by using raw data from the text file.\n\n```rvo_examples.py``` contains examples how to use raw RVO simulation and also as a sub-object of the ```PathFinder```.\n\n### Exploring application\n\nThis application based on [Navmesh Explorer](https://github.com/Tugcga/Navmesh-Explorer). Allows to load navigation mesh data from text file, add and remove agents from this navigation mesh and move it from start to end points. Two files ```level_triangles.txt``` and ```level_polygons.txt``` are examples of text files, which supported by application. If the navigation mesh is triangulated, then the file should contains only two rows. The first one contains plain array of vertex coordinates (divided by spaces), the second row contains plain array of triangle vertex indexes. If the navigation mesh defined by polygonal description, then the file should contains three rows. The first one contains vertex coordinates, the second one - the sequence of polygon corners, and the third one - sizes of polygons.\n\n![Application example](../images/app_01.png?raw=true)\n\nIn some cases the path is not optimal. It depends on polygon decomposition. Here is an example.\n\n![Application example](../images/app_02.png?raw=true)\n\nStart and finish points are in top and bottom polygons. At first step the algorithm finds the shortest path between these two polygons. But the mesh is symmetric, and that's why there are two equal paths - at the left side and at the right side. The algorithm select one of them (at the right side), and form result path by connecting it with input points. So, it produce non-optimal result.\n\n### NavmeshBaker API\n\n```\nbaker = NavmeshBaker()\n```\n\nCreate a baker object.\n\n```\nbaker.add_geometry(vertices: List[Tuple[float, float, float], polygons: List[List[int]])\n```\n\nAdd input polygonal data to the baker. ```vertices``` is an array of 3-tuples with vertex positions, ```polygons``` is array of integer arrays with polygon indexes. If you need add several meshes to the baker, you can call this method several times with different arguments. Polygon indices should be the same as tuples indices in in ```vertices``` array.\n\n```\nbaker.bake()\n```\n\nGenerate navigation mesh polygonal description.\n\n```\nbaker.get_polygonization()\n```\n\nReturn polygonal description of the baked navigation mesh as 2-tuple ```(vertices, polygons)```.\n\n```\nbaker.save_to_binary(file_path: str)\n```\n\nSave navigation mesh polygonal description into binary file.\n\n```\nbaker.save_to_text(file_path: str)\n```\n\nSave navigation mesh polygonal description into text file.\n\n### PathFinder API\n\n```\npathfinder = PathFinder(vertices: Optional[List[Tuple[float, float, float]]] = None, \n\t\t\t\t\t\tpolygons: Optional[List[List[int]]] = None,\n\t\t\t\t\t\tneighbor_dist: float = 1.5,\n\t\t\t\t\t\tmax_neighbors: int = 5,\n\t\t\t\t\t\ttime_horizon: float = 1.5,\n\t\t\t\t\t\ttime_horizon_obst: float = 2.0,\n\t\t\t\t\t\tmax_speed: float = 10.0,\n\t\t\t\t\t\tagent_radius: float = 0.2,\n\t\t\t\t\t\tupdate_path_find: float = 1.0,\n\t\t\t\t\t\tcontinuous_moving: bool = False,\n\t\t\t\t\t\tmove_agents: bool = True)\n```\n\nCreate a new pathfinder object. ```vertices``` and ```polygons``` used for navigation mesh and obstacles in RVO. Other parameters used for RVO. If ```continuous_moving``` is ```True``` then all agents always try to go to the destination points. Even the are already achieve it. If ```move_agents``` is ```False``` then each ```update()``` method call does not change agents positions, but only recalculate an optimal velocities.\n\n```\npathfinder.add_agent(position: Tuple[float, float, float], radius: float, speed: float)\n```\n\nAdd new agent to the RVO simulation. Return an id of the new agent.\n\n```\npathfinder.delete_agent(agent_id: int)\n```\n\nRemove agent from the simulation. Actual remove process start before ```update()``` method call.\n\n```\npathfinder.set_agent_destination(agent_id, position: Tuple[float, float, float])\n```\n\nSet the target position for the agent. The pathfinder object find the shortest path from the current agent position to the destination point and start move the agent along this path.\n\n```\npathfinder.get_all_agents_positions()\n```\n\nReturn an array with positions of all agents in the simulation. Positions are 2d and contains only X and Z coordinates.\n\n```\npathfinder.get_all_agents_paths()\n```\n\nReturn an array with paths of all agents in the simulation.\n\n```\npathfinder.get_all_agents_activities()\n```\n\nReturn an array with ```True/False``` values for all agents in the simulation. ```False``` value means that corresponding agent does not move, because it comes to the final target of the path, or path is not defined.\n\n```\npathfinder.get_agents_id()\n```\n\nReturn agent ids. Use the same order as in ```get_all_agents_positions()```, ```get_all_agents_paths()``` and ```get_all_agents_activities()```.\n\n```\npathfinder.get_agents_count()\n```\n\nReturn total agent count in RVO simulation.\n\n```\npathfinder.get_active_agents_count()\n```\n\nReturn the number of active agents.\n\n```\npathfinder.get_default_agent_radius()\n```\n\nReturn default agent radius.\n\n```\npathfinder.get_agent_position(agent_id: int)\n```\n\nReturn position of an agent with a given id.\n\n\n```\npathfinder.get_agent_path(agent_id: int)\n```\n\nReturn move path for the given agent.\n\n```\npathfinder.update_time()\n```\n\nSimply increase internal timer.\n\n```\npathfinder.update()\n```\n\nUpdate RVO simulation. If ```move_agents = True``` then also change agent positions. The actual move shift values depends on agent speeds, calculated velocities and time between current call and previous ```update()``` or ```update_time()``` methods.\n\n```\npathfinder.search_path(start: Tuple[float, float, float], finish: Tuple[float, float, float])\n```\n\nReturn shortest path between start and finish point in the navigation mesh. If navigation mesh is not defined, then return the straight segment between start and finish positions.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tugcga/Path-Finder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynavmesh",
    "package_url": "https://pypi.org/project/pynavmesh/",
    "platform": null,
    "project_url": "https://pypi.org/project/pynavmesh/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Tugcga/Path-Finder/issues",
      "Homepage": "https://github.com/Tugcga/Path-Finder"
    },
    "release_url": "https://pypi.org/project/pynavmesh/1.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python implementation of path finding algorithm in navigation meshes",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15190325,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afe620d9ed6999330de2c083dbe2d23aeb3a509e818a000ca58cd8299a87da43",
          "md5": "b2fcad9591175245e96425e9fccd7d10",
          "sha256": "1b632a92b721152a7cca809c19148b26dd58d9e971067cae2d935eb15d4eb4cf"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2fcad9591175245e96425e9fccd7d10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13435,
        "upload_time": "2021-12-19T13:55:25",
        "upload_time_iso_8601": "2021-12-19T13:55:25.539814Z",
        "url": "https://files.pythonhosted.org/packages/af/e6/20d9ed6999330de2c083dbe2d23aeb3a509e818a000ca58cd8299a87da43/pynavmesh-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d39180ed587cc58d43257b8c6b1ef1e98a32acce039555e21b6a26b2864c34",
          "md5": "5cd8291b9058a46e728b1e41a1de9efa",
          "sha256": "04b6d9ed3d462efb2c6486fd0e7a55ee039ac4077f485b6fcd82284946b4a375"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5cd8291b9058a46e728b1e41a1de9efa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15626,
        "upload_time": "2021-12-19T13:55:27",
        "upload_time_iso_8601": "2021-12-19T13:55:27.199305Z",
        "url": "https://files.pythonhosted.org/packages/15/d3/9180ed587cc58d43257b8c6b1ef1e98a32acce039555e21b6a26b2864c34/pynavmesh-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33d9b83599ab4223925158a56d17f6b507655b42e4d74a94dd42fe22b8703f24",
          "md5": "56c98ee146781c9a27a25ad538b04542",
          "sha256": "e29b43faab63e752102d4690b1acd6ed403ead9893354954bf2b80fe283d8388"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56c98ee146781c9a27a25ad538b04542",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11061,
        "upload_time": "2021-12-23T06:11:32",
        "upload_time_iso_8601": "2021-12-23T06:11:32.723878Z",
        "url": "https://files.pythonhosted.org/packages/33/d9/b83599ab4223925158a56d17f6b507655b42e4d74a94dd42fe22b8703f24/pynavmesh-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1b8aceede7203344dec616aebd01134afcaf40fe5d4cd2f661f6da96e0ce357",
          "md5": "b8d9df95ce55cef5c5142603c7a28a45",
          "sha256": "f0b4c77c2ea296c64c78bfffc5ed99067f0ab352511545d044ece79077de6091"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8d9df95ce55cef5c5142603c7a28a45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13954,
        "upload_time": "2021-12-23T06:11:34",
        "upload_time_iso_8601": "2021-12-23T06:11:34.720890Z",
        "url": "https://files.pythonhosted.org/packages/b1/b8/aceede7203344dec616aebd01134afcaf40fe5d4cd2f661f6da96e0ce357/pynavmesh-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93028804faf5cf7e88c030d813b619d771f270e21b16f4d4c1c03b9127320afd",
          "md5": "d531d6acff894e45ea616062bd71658b",
          "sha256": "712a4d0b8c40e3c957e0cd9d08362e90f30aab8e443eaef9cf8abf74c73e6900"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d531d6acff894e45ea616062bd71658b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12045,
        "upload_time": "2021-12-23T06:21:34",
        "upload_time_iso_8601": "2021-12-23T06:21:34.364475Z",
        "url": "https://files.pythonhosted.org/packages/93/02/8804faf5cf7e88c030d813b619d771f270e21b16f4d4c1c03b9127320afd/pynavmesh-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9efd465ac293b9131bafeaee2c19917c3de09719f8efe0a6c4155163788e2e53",
          "md5": "5d77bcafad27d0f7bd23b6236f9abf16",
          "sha256": "b217693fef5e216ccdc4f91fa553dedb996e239cf01998b719bf72ba6cb8ecaa"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d77bcafad27d0f7bd23b6236f9abf16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11853,
        "upload_time": "2021-12-23T06:21:35",
        "upload_time_iso_8601": "2021-12-23T06:21:35.432891Z",
        "url": "https://files.pythonhosted.org/packages/9e/fd/465ac293b9131bafeaee2c19917c3de09719f8efe0a6c4155163788e2e53/pynavmesh-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5e3b7af35308e91855e6eb9516fb0002a633037f1436535c9348f63382070c9",
          "md5": "32614ba1feb45338959bcbcdd79cf141",
          "sha256": "e2deab483d408cfcae7ab7fc015b2f6ccd4de6d927e130e83767372de3201492"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32614ba1feb45338959bcbcdd79cf141",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26152,
        "upload_time": "2022-01-01T16:19:17",
        "upload_time_iso_8601": "2022-01-01T16:19:17.463320Z",
        "url": "https://files.pythonhosted.org/packages/f5/e3/b7af35308e91855e6eb9516fb0002a633037f1436535c9348f63382070c9/pynavmesh-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e2ca6feef1b8e931f159b2dfcefd4b79d25719eaa5a91481a4e80836bd68e7d",
          "md5": "0e6f778f22e90591406308e63a6593c1",
          "sha256": "34d70e560eab6db7fb3d42f3a10dbfd00d72ffb98d68342a6b348b845ca7e9e4"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0e6f778f22e90591406308e63a6593c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25211,
        "upload_time": "2022-01-01T16:19:18",
        "upload_time_iso_8601": "2022-01-01T16:19:18.460979Z",
        "url": "https://files.pythonhosted.org/packages/3e/2c/a6feef1b8e931f159b2dfcefd4b79d25719eaa5a91481a4e80836bd68e7d/pynavmesh-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35d9d28c8e542fbf680ee1572548f5e761350e5b12221767425648081d269d71",
          "md5": "b1d84aedbbcc4f42c3a6db995b4974b9",
          "sha256": "be401504671d02fa1f46d1c153bd187074696e4043c70f3ae84a8924be604dda"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1d84aedbbcc4f42c3a6db995b4974b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26980,
        "upload_time": "2022-01-02T10:47:20",
        "upload_time_iso_8601": "2022-01-02T10:47:20.212526Z",
        "url": "https://files.pythonhosted.org/packages/35/d9/d28c8e542fbf680ee1572548f5e761350e5b12221767425648081d269d71/pynavmesh-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b446dc4c7ba6a9965cf7476ec39d7f788f907a7425bf9b120f223532720c1d",
          "md5": "e8c733076c96fd7af86d94e3dd9f47c3",
          "sha256": "6bee25849051bc4621cd31cf61b51341ad5f331502c977667a84eb3ca3356a31"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8c733076c96fd7af86d94e3dd9f47c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26752,
        "upload_time": "2022-01-02T10:47:21",
        "upload_time_iso_8601": "2022-01-02T10:47:21.788690Z",
        "url": "https://files.pythonhosted.org/packages/54/b4/46dc4c7ba6a9965cf7476ec39d7f788f907a7425bf9b120f223532720c1d/pynavmesh-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45e6a0b7627812a8eb6bedca8dd8d3562f799c079c55a62a91762d914af0dea5",
          "md5": "8385e4d6e20a10cd6691b3723c725cf4",
          "sha256": "e94beb611bedd625f5f725d631b35fbe6b9b52ca80268c5d91c8fcb999023a46"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8385e4d6e20a10cd6691b3723c725cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27009,
        "upload_time": "2022-01-02T16:52:29",
        "upload_time_iso_8601": "2022-01-02T16:52:29.483945Z",
        "url": "https://files.pythonhosted.org/packages/45/e6/a0b7627812a8eb6bedca8dd8d3562f799c079c55a62a91762d914af0dea5/pynavmesh-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d47314cabec80bb32efca58f289115da0e67eca1d8cf02399ed4c69e400b8561",
          "md5": "005fdad6da8d252c1ef37d031031f2ce",
          "sha256": "ec7d18953262430fd46a15ad363e77d883b9f9422d0ad874cf403566deb2d1bb"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "005fdad6da8d252c1ef37d031031f2ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26822,
        "upload_time": "2022-01-02T16:52:30",
        "upload_time_iso_8601": "2022-01-02T16:52:30.511564Z",
        "url": "https://files.pythonhosted.org/packages/d4/73/14cabec80bb32efca58f289115da0e67eca1d8cf02399ed4c69e400b8561/pynavmesh-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e476083b6ee45d8dc299d1a915255a84329930c40bc62cd4d65f49371ccc9b9b",
          "md5": "4b325d75798ff0ad68382053b63a7dd8",
          "sha256": "e3f1eaf60ddb24655869eeb47ad6af29276c4b12e7ad3b3643597b612b031943"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b325d75798ff0ad68382053b63a7dd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 62838,
        "upload_time": "2022-02-10T13:43:48",
        "upload_time_iso_8601": "2022-02-10T13:43:48.356891Z",
        "url": "https://files.pythonhosted.org/packages/e4/76/083b6ee45d8dc299d1a915255a84329930c40bc62cd4d65f49371ccc9b9b/pynavmesh-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80e1b409a7bcb0731a6a2177ceaa3f5d8cc60eb92e2c6ad8ebc23c82b7ef140c",
          "md5": "3dd89a7d97f4291754fc1bd4cb330c84",
          "sha256": "3876fd0247ade391f8fab7c4e7c2334a3b8e903e0952c366c7b8a307a6ed30a0"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3dd89a7d97f4291754fc1bd4cb330c84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59595,
        "upload_time": "2022-02-10T13:43:50",
        "upload_time_iso_8601": "2022-02-10T13:43:50.127519Z",
        "url": "https://files.pythonhosted.org/packages/80/e1/b409a7bcb0731a6a2177ceaa3f5d8cc60eb92e2c6ad8ebc23c82b7ef140c/pynavmesh-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aa5e6dc87e3a237a2dc6c79a6a7b758dd224f7f39d54169545343954d52b3d9",
          "md5": "f15c91bba7ef7e6c1478d91dd07dd3bc",
          "sha256": "a19e4c8ed8bf3f1585291d4bf5d3feab5a0d280350b8600ede251de549abbae5"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f15c91bba7ef7e6c1478d91dd07dd3bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 62802,
        "upload_time": "2022-02-15T13:04:05",
        "upload_time_iso_8601": "2022-02-15T13:04:05.568423Z",
        "url": "https://files.pythonhosted.org/packages/9a/a5/e6dc87e3a237a2dc6c79a6a7b758dd224f7f39d54169545343954d52b3d9/pynavmesh-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2841331f21a5221512d63e94eadaa60cc32bfd7613665a26bf75c77ea4650d",
          "md5": "3604c9086d8e0033fb296a2f9b757eac",
          "sha256": "1c9633fe97e545361199809084319b331f3ec44534733038be1b8787dde57776"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3604c9086d8e0033fb296a2f9b757eac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59545,
        "upload_time": "2022-02-15T13:04:08",
        "upload_time_iso_8601": "2022-02-15T13:04:08.130193Z",
        "url": "https://files.pythonhosted.org/packages/5e/28/41331f21a5221512d63e94eadaa60cc32bfd7613665a26bf75c77ea4650d/pynavmesh-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60406bcc50a00de8bc68573819da00ac9af17bdce6c3c4bcf5ef71b90fe6035",
          "md5": "30727ede071c29fb19c2236f384fcdd7",
          "sha256": "a73ebd2891c5831368cd728d85bc94e92f05080ccc3bab13286daa75587b276b"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30727ede071c29fb19c2236f384fcdd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 62783,
        "upload_time": "2022-09-02T13:35:01",
        "upload_time_iso_8601": "2022-09-02T13:35:01.385784Z",
        "url": "https://files.pythonhosted.org/packages/c6/04/06bcc50a00de8bc68573819da00ac9af17bdce6c3c4bcf5ef71b90fe6035/pynavmesh-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c6f36ea0ed8545baffb3cf9a4d97a081be30ab7602433a2fa7a887907820bcf",
          "md5": "0c954d1a13ea4d032e1797c79017c9b8",
          "sha256": "5bea1b7f9c4921fa4c2cb86fc5dd5fc56ebfcf664117df1e5cae53bae6de6da8"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0c954d1a13ea4d032e1797c79017c9b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59769,
        "upload_time": "2022-09-02T13:35:05",
        "upload_time_iso_8601": "2022-09-02T13:35:05.026553Z",
        "url": "https://files.pythonhosted.org/packages/1c/6f/36ea0ed8545baffb3cf9a4d97a081be30ab7602433a2fa7a887907820bcf/pynavmesh-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9029ec8b0b90579397983346195417813582ae69c13549e6607b5eef7c80bba3",
          "md5": "4edecd998b6e8569411d77e31637acbc",
          "sha256": "24b8afcc1c3c413cabed5533ca07378413ca4dce39ace80b03c8c764c604fb35"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4edecd998b6e8569411d77e31637acbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69638,
        "upload_time": "2022-09-23T12:50:54",
        "upload_time_iso_8601": "2022-09-23T12:50:54.640669Z",
        "url": "https://files.pythonhosted.org/packages/90/29/ec8b0b90579397983346195417813582ae69c13549e6607b5eef7c80bba3/pynavmesh-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc4d9677e5b4410686c498345ab64d71bcaab11ba09f7f7825b2fd1d6a58f93a",
          "md5": "7d247465c1fdefd81251141e4ea328c9",
          "sha256": "b62935f622282b26a96d95e863ce88150c67f188194ea8a7f4f8f7e1cb35b6ec"
        },
        "downloads": -1,
        "filename": "pynavmesh-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d247465c1fdefd81251141e4ea328c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 65184,
        "upload_time": "2022-09-23T12:50:58",
        "upload_time_iso_8601": "2022-09-23T12:50:58.495335Z",
        "url": "https://files.pythonhosted.org/packages/bc/4d/9677e5b4410686c498345ab64d71bcaab11ba09f7f7825b2fd1d6a58f93a/pynavmesh-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9029ec8b0b90579397983346195417813582ae69c13549e6607b5eef7c80bba3",
        "md5": "4edecd998b6e8569411d77e31637acbc",
        "sha256": "24b8afcc1c3c413cabed5533ca07378413ca4dce39ace80b03c8c764c604fb35"
      },
      "downloads": -1,
      "filename": "pynavmesh-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4edecd998b6e8569411d77e31637acbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 69638,
      "upload_time": "2022-09-23T12:50:54",
      "upload_time_iso_8601": "2022-09-23T12:50:54.640669Z",
      "url": "https://files.pythonhosted.org/packages/90/29/ec8b0b90579397983346195417813582ae69c13549e6607b5eef7c80bba3/pynavmesh-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc4d9677e5b4410686c498345ab64d71bcaab11ba09f7f7825b2fd1d6a58f93a",
        "md5": "7d247465c1fdefd81251141e4ea328c9",
        "sha256": "b62935f622282b26a96d95e863ce88150c67f188194ea8a7f4f8f7e1cb35b6ec"
      },
      "downloads": -1,
      "filename": "pynavmesh-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7d247465c1fdefd81251141e4ea328c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 65184,
      "upload_time": "2022-09-23T12:50:58",
      "upload_time_iso_8601": "2022-09-23T12:50:58.495335Z",
      "url": "https://files.pythonhosted.org/packages/bc/4d/9677e5b4410686c498345ab64d71bcaab11ba09f7f7825b2fd1d6a58f93a/pynavmesh-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}