{
  "info": {
    "author": "Erik Drysdale",
    "author_email": "erikinwest@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# trialML: Preparing a machine learning model for a statistical trial\n\n`trialML` is a `python` package designed to help researchers and practioners prepare their machine learning models for a statistical trial to establish a lower-bound on model performance. Specifically, this package helps to calibrating the operating threshold of a binary classifier and carry out a power analysis. A more formal description of these techniques can be found in the corresponding [arXiv paper]().\n\n## Features\n\nThe main modules from `trialML` can be called in with one line of code: `from trialML import trial, power`. Their key methods are outlined below, and are described with more detail by the docstrings (e.g. `help('trialML.trial.classification')`). \n\n1. `trial.classification(gamma, m, alpha)`: determine optimal threshold and calculate power of future trial\n    1. `statistic(y, s, threshold, pval=..)`: return the performance measure for a given threshold (and possibly p-value from null hypothesis)\n    2. `learn_threshold(y, s, method='..')`: calibrate the opearting threshold to obtain at least `gamma` 1-`alpha`% of the time.\n    3. `calculate_power(spread, n_trial, threshold)`: estimate power for a given trial sample size and null hypothesis margin (spread). Threshold can be provided to estimate percent of samples that are class-specific.\n2. `power.twosided_classification(m1, m2, alpha)`: estimate performance measure and power range (confidence interval) for two performance measures: `m1` and `m2`.\n    1. `set_threshold(y, s, gamma1)`: Set the threshold to get a performance level of `gamma1` for the first performance measure `m1`.\n    2. `statistic_CI(y, s, threshold)`: Get the (1-`alpha`) confidence interval for the empirical values of `m1` and `m2`.\n    3. `statistic_pval(y, s, gamma0)`: Get the p-value on trial data for a given null hypothesis.\n\n## How to use\n\nThe code block below shows how to calibrate a classifier for toy example of a classifier trained on random data. For more detailed examples wiht real data, please see the [tutorials](https://github.com/ErikinBC/trialML/tree/main/trialML/tutorials) folder.\n\n```python\n# Load modules\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom trialML.trial import classification\n\n## (1) Train a model and obtain scores on a test set\nnp.random.seed(1)\nn, p = 150, 10\nk1, k2 = 50, 100\nX, y = np.random.randn(n, p), np.random.binomial(1, 0.5, n)\nX_train, y_train, X_test, y_test = X[:k1], y[:k1], X[k1:k2], y[k1:k2]\nmdl = LogisticRegression(penalty='none', solver='lbfgs')\nmdl.fit(X=X_train, y=y_train)\n# test set scores\ns_test = mdl.predict_proba(X_test)[:,1]\ns_test = np.log(s_test / (1-s_test))  # logit transform\n\n## (2) Calibrate operating threshold to achieve 50% sensitivity, 95% of the time\ngamma = 0.5  # performance measure target\nalpha = 0.05  # type-I error rate for threshold selection\nm = 'sensitivity'  # currently supports sensitivity/specificity/precision\n\n# Set up statistical tool\ncalibration = classification(gamma=gamma, alpha=alpha, m=m)\n# Learn threshold\ncalibration.learn_threshold(y=y_test, s=s_test, method='percentile', n_bs=1000, seed=1)\n# Observe test-set performance\ngamma_hat_test = calibration.statistic(y=y_test, s=s_test, threshold=calibration.threshold_hat)\nprint('Empirical sensitivity on test-set: %0.1f%%' % (100*gamma_hat_test))\n\n## (3) Estimate power for trial data\nX_trial, y_trial = X[k1:], y[k1:]\nn_trial = len(X_trial)\ngamma0 = 0.45\nspread = gamma - gamma0\n\ncalibration.calculate_power(spread, n_trial, threshold=calibration.threshold_hat)\nprint('Expected trial power for a %0.1f%% margin is at least %0.1f%%' % (100*spread, 100*calibration.power_hat))\n\n## (4) Run trial\ns_trial = mdl.predict_proba(X_trial)[:,1]\ns_trial = np.log(s_trial / (1-s_trial))  # logit transform\ngamma_trial, pval_trial = calibration.statistic(y=y_trial, s=s_trial, gamma0=gamma0, threshold=calibration.threshold_hat)\nprint('Trial sensitivity: %0.1f%%, trial null-hypothesis: %0.1f%%, trial p-value: %0.5f' % (100*gamma_trial, 100*gamma0, pval_trial))\n```\n\n## How to install\n\n`trialML` is available on [PyPI](https://pypi.org/project/trialML/) can be installed in one line: `pip install trialML`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ErikinBC/trialML",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trialML",
    "package_url": "https://pypi.org/project/trialML/",
    "platform": null,
    "project_url": "https://pypi.org/project/trialML/",
    "project_urls": {
      "Homepage": "https://github.com/ErikinBC/trialML"
    },
    "release_url": "https://pypi.org/project/trialML/0.1.0/",
    "requires_dist": [
      "numpy",
      "pandas"
    ],
    "requires_python": "",
    "summary": "trialML package",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13210013,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b4faad31c6e941f903bbea93e4428bf2ac9361e9cfca0e6b36c13dd19c0263a",
          "md5": "87dca0ec4b1e8d5fd0646a5647611ec0",
          "sha256": "6590f6cb178cd1722bffb671c34ca31cace571516f346b67d3ee03f93c1aec86"
        },
        "downloads": -1,
        "filename": "trialML-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87dca0ec4b1e8d5fd0646a5647611ec0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43980,
        "upload_time": "2022-03-17T22:51:22",
        "upload_time_iso_8601": "2022-03-17T22:51:22.852181Z",
        "url": "https://files.pythonhosted.org/packages/4b/4f/aad31c6e941f903bbea93e4428bf2ac9361e9cfca0e6b36c13dd19c0263a/trialML-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b4faad31c6e941f903bbea93e4428bf2ac9361e9cfca0e6b36c13dd19c0263a",
        "md5": "87dca0ec4b1e8d5fd0646a5647611ec0",
        "sha256": "6590f6cb178cd1722bffb671c34ca31cace571516f346b67d3ee03f93c1aec86"
      },
      "downloads": -1,
      "filename": "trialML-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87dca0ec4b1e8d5fd0646a5647611ec0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 43980,
      "upload_time": "2022-03-17T22:51:22",
      "upload_time_iso_8601": "2022-03-17T22:51:22.852181Z",
      "url": "https://files.pythonhosted.org/packages/4b/4f/aad31c6e941f903bbea93e4428bf2ac9361e9cfca0e6b36c13dd19c0263a/trialML-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}