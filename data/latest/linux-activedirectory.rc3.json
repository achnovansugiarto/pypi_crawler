{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: System :: Systems Administration",
      "Topic :: System :: Systems Administration :: Authentication/Directory",
      "Topic :: System :: Systems Administration :: Authentication/Directory :: LDAP"
    ],
    "description": "\n# Description  \nThis is a wrapper around python-ldap that attempts to create a more convenient way to perform basic Active Directory (although it will likely work for other LDAP compliant directories) tasks from a Linux machine.  \n\nSome tasks that are supported: Creating, reading, updating and deleting users, ous, groups and computers, add/removing users from groups, moving objects to different OUs, resetting passwords (LDAPS required), recursive group membership checking, set/modify account expiration, testing authentication credentials against the DC, and others.  \n\n# Create Connection  \nCreate an LDAP connection object. Note that without LDAPS you can't create/change user passwords.  \n\ndomain: the domain of the directory, is appended to usernames during bind and used as the server if server is not supplied.  \nserver: the LDAP server (ip or host) to connect to  \nldaps: Whether or not to attempt to setup LDAPS  \nread_only: will skip over actions that make changes and only perform get operations.  \n```  \nld = LDAPWrapper(domain=\"localhost.com\", user=settings['user'],    \n  passw=settings['password'], server=settings['server'],    \n  ldaps=True,    \n  read_only=False)  \n```  \n\n# Users  \n## Create  \n```  \n\nusername = \"bob1\"  \nuser = {    \n  \"samAccountName\": username,    \n  \"cn\": username,    \n  \"givenName\": username,    \n  \"sn\": \"last\",    \n  \"password\": \"superRSecurePa@ssvv0rd\",    \n  \"title\": \"Test Title\",    \n  \"displayname\": \"name name\",    \n  \"department\": \"department\",    \n\"description\": \"descrasdfasd fasdf asd fsadf sad\" }  \nuser1 = ld.create_user(ou=ou, user_attrs=user1_attrs)  \nprint(user1.samAccountName)  \n```  \n\n## Read / Search  \n```  \n# some helper paramaters so you can quickly query common attributes  \nld.get_user(sam=user1.samAccountName)  \nld.get_user(title=\"*Manager*\")  # \nld.get_user(department=\"finance\")  \n\n# Specify your own attributes to search by with a dictionary  \nsearch_attributes = { \"someLdapAttribute\":\"Some VAlue\", \"someOtherAttr\":\"Some other Value\"}  \n# if there are additional attributes that aren't normally returned return_attributes = [\"FetchNonDefaultAttribute\",\"AnotherAttribute\"]  \nresults = ld.get_user(search_attrs=search_attributes,   \n                            properties=return_attributes)  \n# 0th index is the first user that matched the query, 1st is the second, and so on. \nresults[0].samAccountName \nresults[0].title  \nresults[0].FetchNonDefaultAttribute \nresults[0].AnotherAttribute\n```\n\nget_user always returns a list, if there are matches, items will be User objects. The user object's attributes are set based on the attributes that were fetched from the query.\n\n## Update\n```\n# get User objects\nuser = results[0]\nmanager = results[1]\n\n# Helper functions for common attributues\nuser.set_email(\"bob@bob.com\")\nuser.set_manager(manager)\nuser.set_manager(None)\nuser.set_name(first=\"Bob\", last=\"Jackson\")\nuser.set_description(\"This is my new description\")\nuser.append_description(\"->Add to end of existing description\")  \nuser.prepend_description(\"Add to beginning of existing description<-\")\nuser.set_office(\"office\")\nuser.set_phone(\"phone\")  \nuser.set_initials(\"initials\")  \nuser.set_title(\"title\")  \nuser.set_department(\"department\")  \nuser.set_company(\"company\")\n\n# But you can set any arbitrary attribute\nuser.set_attr(\"attributeName\", \"Some value\")\n\n# the User object attributes are kepted local, changes made are not \n#   reflected in the local object until after the object is 'refreshed'. \n#   refresh the object to get the latest attributes from the LDAP server.\nuser = user1.refresh()\n\nou = ou_results[0] # See OU section if you need info on getting OU objects\nuser.move(ou)\nuser = user.refresh() # important to refresh after moves as the DN changes. \n```\n\n\n## Delete\n```\nuser = results[0]\nuser.delete_object() # this will prompt for confirmation\nuser.delete_object(confirm=True) # this will not prompt for input\n```\n\n# Groups\n\n## Create\n```\nou = ou_results[0] # See OU section if you need info on getting OU objects\n\nld.create_group(name=\"name2\", description=\"desc2\", parent_ou=ou)  \n```\n\n## Read/Search\n```\ngroup_search_results = ld.get_group(\"name*\") # wildcard *, always returns array\ngroup = group_search_results[0]\nmembers = group.members # a list of DNs from the member attribute, no extra queries\nmembers = group.fetch_members() # by default, does no recursion, returns an array of User/Group objects\n\n# will go up to 99 groups deep and flatten things to a single dimension list of its members. \n# IE: Groups are replaced by their users as 'members' in the root group membership list, \n#     recursion does not result in arrays of arrays. \nrecursed_members = group.fetch_members(recursion_depth=99)  # This results in extra server queries.\n```\n\n## Update\n```\nuser = results[0]\ngroup = ld.get_group(\"group name\")[0]\ngroup.add_member(user)\ngroup = group.refresh()\ngroup.members # = [<user object just added>]\ngroup.remove_member(user)\ngroup.fetch_members() # = []\n```\n\n## Delete\n```\ngroup = ld.get_group(\"group name\")[0]\ngroup.delete_obejct()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linux-activedirectory",
    "package_url": "https://pypi.org/project/linux-activedirectory/",
    "platform": "",
    "project_url": "https://pypi.org/project/linux-activedirectory/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/linux-activedirectory/0.0.12/",
    "requires_dist": [
      "python-ldap (~=3.3)",
      "pyOpenSSL (~=19.1)",
      "colorama (==0.4.3) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "An LDAP wrapper designed to allow basic Active Directory automation from Linux",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8130226,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036bdbecac7198dd487f633d63e9d77951aa8f5b23972c6a8b5e16fcc176718c",
          "md5": "fb7c8aab1821a4fbfa7730373f047004",
          "sha256": "75917e9e7e5372588e54863064ddc4b45d72466ccbef1fdb6527e82c78d35535"
        },
        "downloads": -1,
        "filename": "linux_activedirectory-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb7c8aab1821a4fbfa7730373f047004",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41251,
        "upload_time": "2020-09-07T14:06:13",
        "upload_time_iso_8601": "2020-09-07T14:06:13.154371Z",
        "url": "https://files.pythonhosted.org/packages/03/6b/dbecac7198dd487f633d63e9d77951aa8f5b23972c6a8b5e16fcc176718c/linux_activedirectory-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6bbb9deb85159c2c6cd8b87cad50f56c06ec770207992917cd9bfd52c505c3f",
          "md5": "f653f5522c4b8f4c748e13a35fcae461",
          "sha256": "1d8f85931c90292f81bb81c80c7a958c43ebc25c2318629b8e93a7839e54b7cb"
        },
        "downloads": -1,
        "filename": "linux_activedirectory-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f653f5522c4b8f4c748e13a35fcae461",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42238,
        "upload_time": "2020-09-07T14:08:50",
        "upload_time_iso_8601": "2020-09-07T14:08:50.154208Z",
        "url": "https://files.pythonhosted.org/packages/d6/bb/b9deb85159c2c6cd8b87cad50f56c06ec770207992917cd9bfd52c505c3f/linux_activedirectory-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a147e906f419ad1b5c57ee4b5745ac075ac99693c30ae4cd4841474623fec17",
          "md5": "d37a341579055608e8d5ed2746ea9a28",
          "sha256": "e42792d53ed16d2c2aaa2b1261b307b0c2dce67a8359006a01b304afa0fde125"
        },
        "downloads": -1,
        "filename": "linux_activedirectory-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d37a341579055608e8d5ed2746ea9a28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42252,
        "upload_time": "2020-09-07T14:21:02",
        "upload_time_iso_8601": "2020-09-07T14:21:02.053691Z",
        "url": "https://files.pythonhosted.org/packages/5a/14/7e906f419ad1b5c57ee4b5745ac075ac99693c30ae4cd4841474623fec17/linux_activedirectory-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a147e906f419ad1b5c57ee4b5745ac075ac99693c30ae4cd4841474623fec17",
        "md5": "d37a341579055608e8d5ed2746ea9a28",
        "sha256": "e42792d53ed16d2c2aaa2b1261b307b0c2dce67a8359006a01b304afa0fde125"
      },
      "downloads": -1,
      "filename": "linux_activedirectory-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d37a341579055608e8d5ed2746ea9a28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42252,
      "upload_time": "2020-09-07T14:21:02",
      "upload_time_iso_8601": "2020-09-07T14:21:02.053691Z",
      "url": "https://files.pythonhosted.org/packages/5a/14/7e906f419ad1b5c57ee4b5745ac075ac99693c30ae4cd4841474623fec17/linux_activedirectory-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}