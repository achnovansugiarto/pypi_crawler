{
  "info": {
    "author": "Ask Solem",
    "author_email": "ask@celeryproject.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Networking"
    ],
    "description": ".. _kombu-index:\n\n========================================\n kombu - Messaging library for Python\n========================================\n\n:Version: 3.0.37\n\n`Kombu` is a messaging library for Python.\n\nThe aim of `Kombu` is to make messaging in Python as easy as possible by\nproviding an idiomatic high-level interface for the AMQ protocol, and also\nprovide proven and tested solutions to common messaging problems.\n\n`AMQP`_ is the Advanced Message Queuing Protocol, an open standard protocol\nfor message orientation, queuing, routing, reliability and security,\nfor which the `RabbitMQ`_ messaging server is the most popular implementation.\n\nFeatures\n========\n\n* Allows application authors to support several message server\n  solutions by using pluggable transports.\n\n    * AMQP transport using the `py-amqp`_, `librabbitmq`_, or `qpid-python`_ client libraries.\n\n    * High performance AMQP transport written in C - when using `librabbitmq`_\n\n      This is automatically enabled if librabbitmq is installed::\n\n        $ pip install librabbitmq\n\n    * Virtual transports makes it really easy to add support for non-AMQP\n      transports.  There is already built-in support for `Redis`_,\n      `Beanstalk`_, `Amazon SQS`_, `CouchDB`_, `MongoDB`_, `ZeroMQ`_,\n      `ZooKeeper`_, `SoftLayer MQ`_ and `Pyro`_.\n\n    * You can also use the SQLAlchemy and Django ORM transports to\n      use a database as the broker.\n\n    * In-memory transport for unit testing.\n\n* Supports automatic encoding, serialization and compression of message\n  payloads.\n\n* Consistent exception handling across transports.\n\n* The ability to ensure that an operation is performed by gracefully\n  handling connection and channel errors.\n\n* Several annoyances with `amqplib`_ has been fixed, like supporting\n  timeouts and the ability to wait for events on more than one channel.\n\n* Projects already using `carrot`_ can easily be ported by using\n  a compatibility layer.\n\nFor an introduction to AMQP you should read the article `Rabbits and warrens`_,\nand the `Wikipedia article about AMQP`_.\n\n.. _`RabbitMQ`: http://www.rabbitmq.com/\n.. _`AMQP`: http://amqp.org\n.. _`py-amqp`: http://pypi.python.org/pypi/amqp/\n.. _`qpid-python`: http://pypi.python.org/pypi/qpid-python/\n.. _`Redis`: http://code.google.com/p/redis/\n.. _`Amazon SQS`: http://aws.amazon.com/sqs/\n.. _`MongoDB`: http://www.mongodb.org/\n.. _`CouchDB`: http://couchdb.apache.org/\n.. _`ZeroMQ`: http://zeromq.org/\n.. _`Zookeeper`: https://zookeeper.apache.org/\n.. _`Beanstalk`: http://kr.github.com/beanstalkd/\n.. _`Rabbits and warrens`: http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/\n.. _`amqplib`: http://barryp.org/software/py-amqplib/\n.. _`Wikipedia article about AMQP`: http://en.wikipedia.org/wiki/AMQP\n.. _`carrot`: http://pypi.python.org/pypi/carrot/\n.. _`librabbitmq`: http://pypi.python.org/pypi/librabbitmq\n.. _`Pyro`: http://pythonhosting.org/Pyro\n.. _`SoftLayer MQ`: http://www.softlayer.com/services/additional/message-queue\n\n\n.. _transport-comparison:\n\nTransport Comparison\n====================\n\n+---------------+----------+------------+------------+---------------+\n| **Client**    | **Type** | **Direct** | **Topic**  | **Fanout**    |\n+---------------+----------+------------+------------+---------------+\n| *amqp*        | Native   | Yes        | Yes        | Yes           |\n+---------------+----------+------------+------------+---------------+\n| *qpid*        | Native   | Yes        | Yes        | Yes           |\n+---------------+----------+------------+------------+---------------+\n| *redis*       | Virtual  | Yes        | Yes        | Yes (PUB/SUB) |\n+---------------+----------+------------+------------+---------------+\n| *mongodb*     | Virtual  | Yes        | Yes        | Yes           |\n+---------------+----------+------------+------------+---------------+\n| *beanstalk*   | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *SQS*         | Virtual  | Yes        | Yes [#f1]_ | Yes [#f2]_    |\n+---------------+----------+------------+------------+---------------+\n| *couchdb*     | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *zookeeper*   | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *in-memory*   | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *django*      | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *sqlalchemy*  | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n| *SLMQ*        | Virtual  | Yes        | Yes [#f1]_ | No            |\n+---------------+----------+------------+------------+---------------+\n\n\n.. [#f1] Declarations only kept in memory, so exchanges/queues\n         must be declared by all clients that needs them.\n\n.. [#f2] Fanout supported via storing routing tables in SimpleDB.\n         Disabled by default, but can be enabled by using the\n         ``supports_fanout`` transport option.\n\n\nDocumentation\n-------------\n\nKombu is using Sphinx, and the latest documentation can be found here:\n\n    https://kombu.readthedocs.io/\n\nQuick overview\n--------------\n\n::\n\n    from kombu import Connection, Exchange, Queue\n\n    media_exchange = Exchange('media', 'direct', durable=True)\n    video_queue = Queue('video', exchange=media_exchange, routing_key='video')\n\n    def process_media(body, message):\n        print body\n        message.ack()\n\n    # connections\n    with Connection('amqp://guest:guest@localhost//') as conn:\n\n        # produce\n        producer = conn.Producer(serializer='json')\n        producer.publish({'name': '/tmp/lolcat1.avi', 'size': 1301013},\n                          exchange=media_exchange, routing_key='video',\n                          declare=[video_queue])\n\n        # the declare above, makes sure the video queue is declared\n        # so that the messages can be delivered.\n        # It's a best practice in Kombu to have both publishers and\n        # consumers declare the queue.  You can also declare the\n        # queue manually using:\n        #     video_queue(conn).declare()\n\n        # consume\n        with conn.Consumer(video_queue, callbacks=[process_media]) as consumer:\n            # Process messages and handle events on all channels\n            while True:\n                conn.drain_events()\n\n    # Consume from several queues on the same channel:\n    video_queue = Queue('video', exchange=media_exchange, key='video')\n    image_queue = Queue('image', exchange=media_exchange, key='image')\n\n    with connection.Consumer([video_queue, image_queue],\n                             callbacks=[process_media]) as consumer:\n        while True:\n            connection.drain_events()\n\n\nOr handle channels manually::\n\n    with connection.channel() as channel:\n        producer = Producer(channel, ...)\n        consumer = Producer(channel)\n\n\nAll objects can be used outside of with statements too,\njust remember to close the objects after use::\n\n    from kombu import Connection, Consumer, Producer\n\n    connection = Connection()\n        # ...\n    connection.release()\n\n    consumer = Consumer(channel_or_connection, ...)\n    consumer.register_callback(my_callback)\n    consumer.consume()\n        # ....\n    consumer.cancel()\n\n\n`Exchange` and `Queue` are simply declarations that can be pickled\nand used in configuration files etc.\n\nThey also support operations, but to do so they need to be bound\nto a channel.\n\nBinding exchanges and queues to a connection will make it use\nthat connections default channel.\n\n::\n\n    >>> exchange = Exchange('tasks', 'direct')\n\n    >>> connection = Connection()\n    >>> bound_exchange = exchange(connection)\n    >>> bound_exchange.delete()\n\n    # the original exchange is not affected, and stays unbound.\n    >>> exchange.delete()\n    raise NotBoundError: Can't call delete on Exchange not bound to\n        a channel.\n\nInstallation\n============\n\nYou can install `Kombu` either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`,::\n\n    $ pip install kombu\n\nTo install using `easy_install`,::\n\n    $ easy_install kombu\n\nIf you have downloaded a source tarball you can install it\nby doing the following,::\n\n    $ python setup.py build\n    # python setup.py install # as root\n\n\nTerminology\n===========\n\nThere are some concepts you should be familiar with before starting:\n\n    * Producers\n\n        Producers sends messages to an exchange.\n\n    * Exchanges\n\n        Messages are sent to exchanges. Exchanges are named and can be\n        configured to use one of several routing algorithms. The exchange\n        routes the messages to consumers by matching the routing key in the\n        message with the routing key the consumer provides when binding to\n        the exchange.\n\n    * Consumers\n\n        Consumers declares a queue, binds it to a exchange and receives\n        messages from it.\n\n    * Queues\n\n        Queues receive messages sent to exchanges. The queues are declared\n        by consumers.\n\n    * Routing keys\n\n        Every message has a routing key.  The interpretation of the routing\n        key depends on the exchange type. There are four default exchange\n        types defined by the AMQP standard, and vendors can define custom\n        types (so see your vendors manual for details).\n\n        These are the default exchange types defined by AMQP/0.8:\n\n            * Direct exchange\n\n                Matches if the routing key property of the message and\n                the `routing_key` attribute of the consumer are identical.\n\n            * Fan-out exchange\n\n                Always matches, even if the binding does not have a routing\n                key.\n\n            * Topic exchange\n\n                Matches the routing key property of the message by a primitive\n                pattern matching scheme. The message routing key then consists\n                of words separated by dots (`\".\"`, like domain names), and\n                two special characters are available; star (`\"*\"`) and hash\n                (`\"#\"`). The star matches any word, and the hash matches\n                zero or more words. For example `\"*.stock.#\"` matches the\n                routing keys `\"usd.stock\"` and `\"eur.stock.db\"` but not\n                `\"stock.nasdaq\"`.\n\nGetting Help\n============\n\nMailing list\n------------\n\nJoin the `carrot-users`_ mailing list.\n\n.. _`carrot-users`: http://groups.google.com/group/carrot-users/\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at http://github.com/celery/kombu/issues/\n\nContributing\n============\n\nDevelopment of `Kombu` happens at Github: http://github.com/celery/kombu\n\nYou are highly encouraged to participate in the development. If you don't\nlike Github (for some reason) you're welcome to send regular patches.\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the `LICENSE`\nfile in the top distribution directory for the full license text.\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/celery/kombu/trend.png\n    :alt: Bitdeli badge\n    :target: https://bitdeli.com/free\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://kombu.readthedocs.io",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alauda-kombu",
    "package_url": "https://pypi.org/project/alauda-kombu/",
    "platform": "any",
    "project_url": "https://pypi.org/project/alauda-kombu/",
    "project_urls": {
      "Homepage": "https://kombu.readthedocs.io"
    },
    "release_url": "https://pypi.org/project/alauda-kombu/3.0.38/",
    "requires_dist": [
      "anyjson (>=0.3.3)",
      "amqp (<2.0,>=1.4.9)",
      "importlib; python_version==\"2.6\"",
      "ordereddict; python_version==\"2.6\"",
      "beanstalkc; extra == 'beanstalk'",
      "couchdb; extra == 'couchdb'",
      "librabbitmq (>=1.6.1); extra == 'librabbitmq'",
      "pymongo (>=2.6.2); extra == 'mongodb'",
      "msgpack-python (>=0.4.7); extra == 'msgpack'",
      "pyro4; extra == 'pyro'",
      "qpid-python (>=0.26); extra == 'qpid'",
      "qpid-tools (>=0.26); extra == 'qpid'",
      "redis (>=2.10.3); extra == 'redis'",
      "redis (>=2.10.3); extra == 'redis-cluster'",
      "alauda-redis-py-cluster (==1.3.4); extra == 'redis-cluster'",
      "softlayer-messaging (>=1.0.3); extra == 'slmq'",
      "sqlalchemy; extra == 'sqlalchemy'",
      "boto (>=2.13.3); extra == 'sqs'",
      "PyYAML (>=3.10); extra == 'yaml'",
      "pyzmq (>=13.1.0); extra == 'zeromq'",
      "kazoo (>=1.3.1); extra == 'zookeeper'"
    ],
    "requires_python": "",
    "summary": "Messaging library for Python",
    "version": "3.0.38",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3952794,
  "releases": {
    "3.0.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54fd715d701fc3c8fbb5f64071ac049a2921230bebaca79dafb2dfbd840f4d2b",
          "md5": "9a4af29abcd7ba2a2fd23a9204c0526d",
          "sha256": "39fe1ed16c487236e863c29ce2cfa198c1a1582a77d0903be2d58299b1513131"
        },
        "downloads": -1,
        "filename": "alauda-kombu-3.0.37.tar.gz",
        "has_sig": false,
        "md5_digest": "9a4af29abcd7ba2a2fd23a9204c0526d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 403232,
        "upload_time": "2017-06-22T06:48:20",
        "upload_time_iso_8601": "2017-06-22T06:48:20.982445Z",
        "url": "https://files.pythonhosted.org/packages/54/fd/715d701fc3c8fbb5f64071ac049a2921230bebaca79dafb2dfbd840f4d2b/alauda-kombu-3.0.37.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88965cd920e22fa88292404a4a22985c1dc9644b8876e0d97c0d25438e4a4372",
          "md5": "6e007e7a0b819711dc52fab8dd0635eb",
          "sha256": "eae3ea071980c41a4d53f6bda0633e7f9ce52544ba07669950ce4dd4f8af1f14"
        },
        "downloads": -1,
        "filename": "alauda_kombu-3.0.38-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e007e7a0b819711dc52fab8dd0635eb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 253987,
        "upload_time": "2018-06-12T05:26:47",
        "upload_time_iso_8601": "2018-06-12T05:26:47.985274Z",
        "url": "https://files.pythonhosted.org/packages/88/96/5cd920e22fa88292404a4a22985c1dc9644b8876e0d97c0d25438e4a4372/alauda_kombu-3.0.38-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bea44c3c50963bc4207627b107ee95acf1f7a2bdb5f1c88e14f425600a16244",
          "md5": "0a85bd60e95eff0825c94ffd95c013cf",
          "sha256": "c6545d3d6359c1cc4f3cbc8466c144e103099b6570d73ccb987f26c8dafec62f"
        },
        "downloads": -1,
        "filename": "alauda-kombu-3.0.38.tar.gz",
        "has_sig": false,
        "md5_digest": "0a85bd60e95eff0825c94ffd95c013cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 434227,
        "upload_time": "2018-06-12T05:26:50",
        "upload_time_iso_8601": "2018-06-12T05:26:50.746030Z",
        "url": "https://files.pythonhosted.org/packages/6b/ea/44c3c50963bc4207627b107ee95acf1f7a2bdb5f1c88e14f425600a16244/alauda-kombu-3.0.38.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88965cd920e22fa88292404a4a22985c1dc9644b8876e0d97c0d25438e4a4372",
        "md5": "6e007e7a0b819711dc52fab8dd0635eb",
        "sha256": "eae3ea071980c41a4d53f6bda0633e7f9ce52544ba07669950ce4dd4f8af1f14"
      },
      "downloads": -1,
      "filename": "alauda_kombu-3.0.38-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e007e7a0b819711dc52fab8dd0635eb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 253987,
      "upload_time": "2018-06-12T05:26:47",
      "upload_time_iso_8601": "2018-06-12T05:26:47.985274Z",
      "url": "https://files.pythonhosted.org/packages/88/96/5cd920e22fa88292404a4a22985c1dc9644b8876e0d97c0d25438e4a4372/alauda_kombu-3.0.38-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bea44c3c50963bc4207627b107ee95acf1f7a2bdb5f1c88e14f425600a16244",
        "md5": "0a85bd60e95eff0825c94ffd95c013cf",
        "sha256": "c6545d3d6359c1cc4f3cbc8466c144e103099b6570d73ccb987f26c8dafec62f"
      },
      "downloads": -1,
      "filename": "alauda-kombu-3.0.38.tar.gz",
      "has_sig": false,
      "md5_digest": "0a85bd60e95eff0825c94ffd95c013cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 434227,
      "upload_time": "2018-06-12T05:26:50",
      "upload_time_iso_8601": "2018-06-12T05:26:50.746030Z",
      "url": "https://files.pythonhosted.org/packages/6b/ea/44c3c50963bc4207627b107ee95acf1f7a2bdb5f1c88e14f425600a16244/alauda-kombu-3.0.38.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}