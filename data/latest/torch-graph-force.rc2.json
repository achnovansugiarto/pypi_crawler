{
  "info": {
    "author": "",
    "author_email": "Tin Nguyen <trung.tin.nguyen0309@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# torch-graph-force [WIP]\n\nA PyTorch-based library for embedding large graphs to low-dimensional space using force-directed layouts with GPU acceleration.\n\nThe aim of this project is to speed up the process of obtaining low-dimensional layouts for large graphs, especially with GPU acceleration.\n\n## Install\n\n- Install PyTorch (follow [official instructions](https://pytorch.org/get-started/locally))\n- Install `torch-graph-force`:\n```shell\npip install git+https://github.com/tintn/torch-graph-force.git\n```\n\n## Usage\n\n### Create `GraphDataset` for The Graph.\n\nThe dataset can be created from a dataframe, an edgelist or Networkx Graph using `from_pandas_dataframe`, `from_edgelist`, or `from_networkx` respectively. `from_pandas_dataframe` is the recommended way as it's more efficient compared to other methods.\n\nIf the node IDs are consecutive integers starting from 0, the dataset can be constructed with a dataframe for edges and the number of nodes:\n\n```python\nimport pandas as pd\nimport torch_graph_force\n\n# The first argument is a dataframe of edges with at least two columns for source and target nodes.\n# By default, column names \"source\", \"target\" and \"weight\" are taken as source nodes, target nodes and edge weights.\ndf = pd.DataFrame([[0, 1], [1, 2], [2, 3]], columns=['source', 'target'])\n# Having a column for edge weights is optional. If the column for edge weights does not exist, 1.0 will be used for all edges.\n# The second argument is the number of nodes in case the node IDs are consecutive integers starting from 0.\nn_nodes = 4\n# Create a GraphDataset for the graph\nds = torch_graph_force.from_pandas_dataframe(\n    df, n_nodes\n)\n```\n\nIf the node IDs are not consecutive integers, a list of node IDs must be provided:\n```python\nimport pandas as pd\nimport torch_graph_force\n\ndf = pd.DataFrame([[\"A\", \"B\"], [\"B\", \"C\"], [\"C\", \"D\"]], columns=['source', 'target'])\n# Order of the nodes in \"nodes\" is used to map the node IDs to node indices.\nnodes = [\"A\", \"B\", \"C\", \"D\"]\n\nds = torch_graph_force.from_pandas_dataframe(\n    df, nodes\n)\n# the dataset's order follows the order of the provided list of nodes. In this example, calling  ds[0] will return the data for node \"A\" and ds[1] for node \"B\"\n# List of nodes can be access with ds.nodes\nprint(ds.nodes)\n```\n### Compute Graph Layout\n\nOnce having the graph dataset ready, we can feed the dataset to `spring_layout` to compute the graph layout.\n\n```python\n\npos = torch_graph_force.spring_layout(\n    ds\n)\n# pos is a numpy array of size (n_nodes, n_dim)\n# each row represents the position of a node with corresponding index\nprint(pos)\n# if node IDs are not consecutive integers, the nodes' positions can be obtained from the node list\nnode_pos = {nid: pos[idx] for idx, nid in enumerate(ds.nodes)}\n```\n\nOptional arguments for `spring_layout`:\n- `batch_size`: number of nodes to process in a batch. Larger batch size usually speeds up the processing, but it consumes more memory. (default: 64)\n- `iterations`: Maximum number of iterations taken. (default: 50)\n- `num_workers`: number of workers to fetch data from GraphDataset. If device is \"cuda\", `num_workers` must be 0. (default: 0)\n- `device`: the device to store the graph and the layout model. If None, it's \"cuda\" if cuda is available otherwise \"cpu\". (default: None)\n- `iteration_progress`: monitor the progress of each iteration, it's useful for large graph. (default: False)\n- `layout_config`: additional config for the layout model. (default: {})\n\nThe layout model has some parameters with default values:\n```python\ndefault_layout_config = {\n    # Tensor of shape (n_nodes, ndim) for initial positions\n    \"pos\": None,\n    # Optimal distance between nodes\n    \"k\": None,\n    # Dimension of the layout\n    \"ndim\": 2,\n    # Threshold for relative error in node position changes.\n    \"threshold\": 1e-4,\n}\n```\n\nUse the `layout_config` argument to change the parameters if needed. The example below provides intial positions for the layout model:\n```python\nn_nodes = len(ds)\nn_dim = 2\n# Generate initial positions for the nodes\ninit_pos = np.random.rand(n_nodes, n_dim)\npos = torch_graph_force.spring_layout(\n    ds,\n    layout_config={\"pos\": init_pos}\n)\n```\n## Benchmarks\n\nThe implementation from `torch-graph-force` **without GPU acceleration** is 1.5x faster than Networkx's implementation.\n\n![CPU Benchmark](/assets/cpu-benchmark.jpg)\n\nGPU accelerated `torch-graph-force` can compute layouts of graphs with 100k nodes within minutes. The benchmark was conducted with Tesla P100.\n\n![GPU Benchmark](/assets/gpu-benchmark.jpg)\n\nCode for the benchmarks can be found [here](/torch_graph_force/benchmark.py)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "graph,layout,force-directed,pytorch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-graph-force",
    "package_url": "https://pypi.org/project/torch-graph-force/",
    "platform": null,
    "project_url": "https://pypi.org/project/torch-graph-force/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/torch-graph-force/0.1.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "pandas",
      "networkx",
      "tqdm"
    ],
    "requires_python": ">=3.8",
    "summary": "Force-directed layouts for Large Graphs with GPU acceleration",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16175173,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4671f5f717c3b7c3c0fa0109123bdd8874d50903463182b8206f39dfb68b1e9",
          "md5": "bfa4109544490f420cb49053f73f37fb",
          "sha256": "6bb3942c559db78877fee9a1b0fc441c576ff223a0374d1373d6a129677c3570"
        },
        "downloads": -1,
        "filename": "torch_graph_force-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfa4109544490f420cb49053f73f37fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9523,
        "upload_time": "2022-12-21T11:56:04",
        "upload_time_iso_8601": "2022-12-21T11:56:04.976801Z",
        "url": "https://files.pythonhosted.org/packages/a4/67/1f5f717c3b7c3c0fa0109123bdd8874d50903463182b8206f39dfb68b1e9/torch_graph_force-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d89dfd1410b70ab784668f7662f078d94f8811e53c37069d4a188c7c89ceff0",
          "md5": "7f52a953b1c3dfa124d0cfcdd2b1a305",
          "sha256": "f7c9447e40afc5b78b1f62f4dd4edc779c338b33f0b1572e44c79a79233ff5d4"
        },
        "downloads": -1,
        "filename": "torch_graph_force-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f52a953b1c3dfa124d0cfcdd2b1a305",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9673,
        "upload_time": "2022-12-21T11:56:06",
        "upload_time_iso_8601": "2022-12-21T11:56:06.671768Z",
        "url": "https://files.pythonhosted.org/packages/8d/89/dfd1410b70ab784668f7662f078d94f8811e53c37069d4a188c7c89ceff0/torch_graph_force-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "022456f29ab8e1b896d9fdc09096ce4698a86001504fc2c31376a30c0907690b",
          "md5": "07dd4374484daf3d8acef2e0a1d61851",
          "sha256": "125f06f8e915f93ad77cf7fcc6463e17f4b70530baf36f465118a29f9e355ed5"
        },
        "downloads": -1,
        "filename": "torch_graph_force-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07dd4374484daf3d8acef2e0a1d61851",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10387,
        "upload_time": "2022-12-21T16:13:45",
        "upload_time_iso_8601": "2022-12-21T16:13:45.481185Z",
        "url": "https://files.pythonhosted.org/packages/02/24/56f29ab8e1b896d9fdc09096ce4698a86001504fc2c31376a30c0907690b/torch_graph_force-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "157cf9d2f1c8ad55311181de5b7fe46e4e45218618b3a1eab1bccef095193a2a",
          "md5": "bdf7d47fed2ea05c5998ae719e3d610a",
          "sha256": "373ac784fc1b0a0956e94182532d894a14c34e020fa7e78976f3c6b30db11225"
        },
        "downloads": -1,
        "filename": "torch_graph_force-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bdf7d47fed2ea05c5998ae719e3d610a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10397,
        "upload_time": "2022-12-21T16:13:46",
        "upload_time_iso_8601": "2022-12-21T16:13:46.813765Z",
        "url": "https://files.pythonhosted.org/packages/15/7c/f9d2f1c8ad55311181de5b7fe46e4e45218618b3a1eab1bccef095193a2a/torch_graph_force-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "022456f29ab8e1b896d9fdc09096ce4698a86001504fc2c31376a30c0907690b",
        "md5": "07dd4374484daf3d8acef2e0a1d61851",
        "sha256": "125f06f8e915f93ad77cf7fcc6463e17f4b70530baf36f465118a29f9e355ed5"
      },
      "downloads": -1,
      "filename": "torch_graph_force-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07dd4374484daf3d8acef2e0a1d61851",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10387,
      "upload_time": "2022-12-21T16:13:45",
      "upload_time_iso_8601": "2022-12-21T16:13:45.481185Z",
      "url": "https://files.pythonhosted.org/packages/02/24/56f29ab8e1b896d9fdc09096ce4698a86001504fc2c31376a30c0907690b/torch_graph_force-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "157cf9d2f1c8ad55311181de5b7fe46e4e45218618b3a1eab1bccef095193a2a",
        "md5": "bdf7d47fed2ea05c5998ae719e3d610a",
        "sha256": "373ac784fc1b0a0956e94182532d894a14c34e020fa7e78976f3c6b30db11225"
      },
      "downloads": -1,
      "filename": "torch_graph_force-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bdf7d47fed2ea05c5998ae719e3d610a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10397,
      "upload_time": "2022-12-21T16:13:46",
      "upload_time_iso_8601": "2022-12-21T16:13:46.813765Z",
      "url": "https://files.pythonhosted.org/packages/15/7c/f9d2f1c8ad55311181de5b7fe46e4e45218618b3a1eab1bccef095193a2a/torch_graph_force-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}