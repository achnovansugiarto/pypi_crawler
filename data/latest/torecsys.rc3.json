{
  "info": {
    "author": "Jasper Li",
    "author_email": "jasper_liwaiyin@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# ToR[e]cSys\r\n\r\n--------------------------------------------------------------------------------\r\n\r\n## News\r\n\r\nIt is happy to know the new package of [Tensorflow Recommenders](https://www.tensorflow.org/recommenders).\r\n\r\n--------------------------------------------------------------------------------\r\n\r\nToR[e]cSys is a PyTorch Framework to implement recommendation system algorithms, including but not limited to click-through-rate (CTR) prediction, learning-to-ranking (LTR), and Matrix/Tensor Embedding. The project objective is to develop a ecosystem to experiment, share, reproduce, and deploy in real world in a smooth and easy way (Hope it can be done).\r\n\r\n- [Installation](#installation)\r\n- [Implemented Models](#implemented-models)\r\n- [Documentation](#documentation)\r\n- [Getting Started](#getting-started)\r\n- [Examples](#examples)\r\n- [Authors](#authors)\r\n- [License](#license)\r\n\r\n## Installation\r\n\r\nTBU\r\n\r\n## Documentation\r\n\r\nThe complete documentation for ToR[e]cSys is available via [ReadTheDocs website](https://torecsys.readthedocs.io/en/latest/). \\\r\nThank you for ReadTheDocs! You are the best!\r\n\r\n## Implemented Models\r\n\r\n### 1. Subsampling\r\n\r\n| Model Name | Research Paper | Year |\r\n| ---------- | -------------- | ---- |\r\n| Word2Vec   | [Omer Levy et al, 2015. Improving Distributional Similarity with Lessons Learned from Word Embeddings](https://levyomer.files.wordpress.com/2015/03/improving-distributional-similarity-tacl-2015.pdf) | 2015 |\r\n\r\n### 2. Negative Sampling\r\n\r\n| Model Name | Research Paper | Year |\r\n| ---------- | -------------- | ---- |\r\n| TBU        |                |      |\r\n\r\n### 3. Click through Rate (CTR) Model\r\n\r\n| Model Name | Research Paper | Year |\r\n| ---------- | -------------- | ---- |\r\n| [Logistic Regression](torecsys/models/ctr/logistic_regression.py) | / | / |\r\n| [Factorization Machine](torecsys/models/ctr/factorization_machine.py) | [Steffen Rendle, 2010. Factorization Machine](https://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf) | 2010 |\r\n| [Factorization Machine Support Neural Network](torecsys/models/ctr/factorization_machine_supported_neural_network.py) | [Weinan Zhang et al, 2016. Deep Learning over Multi-field Categorical Data: A Case Study on User Response Prediction](https://arxiv.org/abs/1601.02376) | 2016 |\r\n| [Field-Aware Factorization Machine](torecsys/models/ctr/field_aware_factorization_machine.py) | [Yuchin Juan et al, 2016. Field-aware Factorization Machines for CTR Prediction](https://www.csie.ntu.edu.tw/~cjlin/papers/ffm.pdf) | 2016 |\r\n| [Product Neural Network](torecsys/models/ctr/product_neural_network.py) | [Yanru QU et al, 2016. Product-based Neural Networks for User Response Prediction](https://arxiv.org/abs/1611.00144) | 2016 |\r\n| [Attentional Factorization Machine](torecsys/models/ctr/attentional_factorization_machine.py) | [Jun Xiao et al, 2017. Attentional Factorization Machines: Learning the Weight of Feature Interactions via Attention Networks](https://arxiv.org/abs/1708.04617) | 2017 |\r\n| [Deep and Cross Network](torecsys/models/ctr/deep_and_cross_network.py) | [Ruoxi Wang et al, 2017. Deep & Cross Network for Ad Click Predictions](https://arxiv.org/abs/1708.05123) | 2017 |\r\n| [Deep Factorization Machine](torecsys/models/ctr/deep_fm.py) | [Huifeng Guo et al, 2017. DeepFM: A Factorization-Machine based Neural Network for CTR Prediction](https://arxiv.org/abs/1703.04247) | 2017 |\r\n| [Neural Collaborative Filtering](torecsys/models/ctr/neural_collaborative_filtering.py) | [Xiangnan He et al, 2017. Neural Collaborative Filtering](https://arxiv.org/abs/1708.05031) | 2017 |\r\n| [Neural Factorization Machine](torecsys/models/ctr/neural_factorization_machine.py) | [Xiangnan He et al, 2017. Neural Factorization Machines for Sparse Predictive Analytics](https://arxiv.org/abs/1708.05027) | 2017 |\r\n| [eXtreme Deep Factorization Machine](torecsys/models/ctr/xdeep_fm.py) | [Jianxun Lian et al, 2018. xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems](https://arxiv.org/abs/1803.05170.pdf) | 2018 |\r\n| [Deep Field-Aware Factorization Machine](torecsys/models/ctr/deep_ffm.py) | [Junlin Zhang et al, 2019. FAT-DeepFFM: Field Attentive Deep Field-aware Factorization Machine](https://arxiv.org/abs/1905.06336) | 2019 |\r\n| [Deep Matching Correlation Prediction](torecsys/models/ctr/deep_mcp.py) | [Wentao Ouyang et al, 2019. Representation Learning-Assisted Click-Through Rate Prediction](https://arxiv.org/pdf/1906.04365.pdf) | 2019 |\r\n| [Deep Session Interest Network](torecsys/models/ctr/deep_session_interest_network.py) | [Yufei Feng et al, 2019. Deep Session Interest Network for Click-Through Rate Prediction](https://arxiv.org/abs/1905.06482) | 2019 |\r\n| [Elaborated Entire Space Supervised Multi Task Model](torecsys/models/ctr/elaborated_entire_space_supervised_multi_task.py) | [Hong Wen et al, 2019. Conversion Rate Prediction via Post-Click Behaviour Modeling](https://arxiv.org/abs/1910.07099) | 2019 |\r\n| [Entire Space Multi Task Model](torecsys/models/ctr/entire_space_multi_task.py) | [Xiao Ma et al, 2019. Entire Space Multi-Task Model: An Effective Approach for Estimating Post-Click Conversion Rate](https://arxiv.org/abs/1804.07931) | 2019 |\r\n| [Field Attentive Deep Field Aware Factorization Machine](torecsys/models/ctr/fat_deep_ffm.py) | [Junlin Zhang et al, 2019. FAT-DeepFFM: Field Attentive Deep Field-aware Factorization Machine](https://arxiv.org/abs/1905.06336)  | 2019 |\r\n| [Position-bias aware learning framework](torecsys/models/ctr/position_bias_aware_learning_framework.py) | [Huifeng Guo et al, 2019. PAL: a position-bias aware learning framework for CTR prediction in live recommender systems](https://dl.acm.org/citation.cfm?id=3347033&dl=ACM&coll=DL) | 2019 |\r\n\r\n### 4. Embedding Model\r\n\r\n| Model Name | Research Paper | Year |\r\n| ---------- | -------------- | ---- |\r\n| [Matrix Factorization](torecsys/models/emb/matrix_factorization.py) | / | / |\r\n| [Starspace](torecsys/models/emb/starspace.py)| [Ledell Wu et al, 2017 StarSpace: Embed All The Things!](https://arxiv.org/abs/1709.03856) | 2017 |\r\n\r\n### 5. Learning-to-Rank (LTR) Model\r\n\r\n| Model Name | Research Paper | Year |\r\n| ---------- | -------------- | ---- |\r\n| [Personalized Re-ranking Model](torecsys/models/ltr/personalized_reranking.py) | [Changhua Pei et al, 2019. Personalized Re-ranking for Recommendation](https://arxiv.org/abs/1904.06813) | 2019 |\r\n\r\n## Getting Started\r\n\r\nThere are several ways using ToR[e]cSys to develop a Recommendation System. Before talking about them, we first need to discuss about components of ToR[e]cSys.\r\n\r\nA model in ToR[e]cSys is constructed by two parts mainly: inputs and model, and they will be wrapped into a sequential module ([torecsys.models.sequential](https://github.com/p768lwy3/torecsys/blob/master/torecsys/models/sequential.py)) to be trained by Trainer ([torecsys.trainer.Trainer](https://github.com/p768lwy3/torecsys/blob/master/torecsys/trainer/trainer.py)). \\\r\n\r\nFor inputs module ([torecsys.inputs](https://github.com/p768lwy3/torecsys/tree/master/torecsys/inputs)), it will handle most kinds of inputs in recommendation system, like categorical features, images, etc, with several kinds of methods, including token embedding, pre-trained image models, etc.\r\n\r\nFor models module ([torecsys.models](https://github.com/p768lwy3/torecsys/tree/master/torecsys/models)), it will implement some famous models in recommendation system, like Factorization Machine family. I hope I can make the library rich. To construct a model in the module, in addition to the modules implemented in [PyTorch](https://pytorch.org/docs/stable/nn.html), I will also implement some layers in [torecsys.layers](https://github.com/p768lwy3/torecsys/tree/master/torecsys/layers) which are called by models usually.\r\n\r\nAfter the explanation of ToR[e]cSys, let's move on to the `Getting Started`. We can use ToR[e]cSys in the following ways:\r\n\r\n1. Run by command-line (In development)\r\n\r\n    ```bash\r\n> torecsys build --inputs_config='{}' \\\r\n--model_config='{\"method\":\"FM\", \"embed_size\": 8, \"num_fields\": 2}' \\\r\n--regularizer_config='{\"weight_decay\": 0.1}' \\\r\n--criterion_config='{\"method\": \"MSELoss\"}' \\\r\n--optimizer_config='{\"method\": \"SGD\", \"lr\": \"0.01\"}' \\\r\n...\r\n    ```\r\n\r\n2. Run by class method\r\n\r\n    ```python\r\nimport torecsys as trs\r\n\r\n# build trainer by class method\r\ntrainer = trs.trainer.Trainer() \\\r\n    .bind_objective(\"CTR\") \\\r\n    .set_inputs() \\\r\n    .set_model(method=\"FM\", embed_size=8, num_fields=2) \\\r\n    .set_sequential() \\\r\n    .set_regularizer(weight_decay=0.1) \\\r\n    .build_criterion(method=\"MSELoss\") \\\r\n    .build_optimizer(method=\"SGD\", lr=\"0.01\") \\\r\n    .build_loader(name=\"train\", ...) \\\r\n    .build_loader(name=\"eval\", ...) \\\r\n    .set_targets_name(\"labels\") \\\r\n    .set_max_num_epochs(10) \\\r\n    .use_cuda()\r\n\r\n# start to fit the model\r\ntrainer.fit()\r\n    ```\r\n\r\n3. Run like PyTorch Module\r\n\r\n    ```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport torecsys as trs\r\n\r\n# some codes here\r\ninputs = trs.inputs.InputsWrapper(schema=schema)\r\nmodel = trs.models.FactorizationMachineModel(embed_size=8, num_fields=2)\r\n\r\nfor i in range(epochs):\r\n    optimizer.zero_grad()\r\n    outputs = model(**inputs(batches))\r\n    loss = criterion(outputs, labels)\r\n    loss.backward()\r\n    optimizer.step()\r\n    ```\r\n\r\n(In development) You can anyone you like to train a Recommender System and serve it in the following ways:\r\n\r\n1. Run by command-line\r\n\r\n    ```bash\r\n    > torecsys serve --load_from='{}'\r\n    ```\r\n\r\n2. Run by class method\r\n\r\n    ```python\r\nimport torecsys as trs\r\n\r\nserving = trs.serving.Model() \\\r\n    .load_from(filepath=filepath)\r\n    .run()\r\n    ```\r\n\r\n3. Serve it yourself\r\n\r\n    ```python\r\nfrom flask import Flask, request\r\nimport torecsys as trs\r\n\r\nmodel = trs.serving.Model() \\\r\n    .load_from(filepath=filepath)\r\n\r\n@app.route(\"/predict\")\r\ndef predict():\r\n    args = request.json\r\n    inference = model.predict(args)\r\n    return inference, 200\r\n\r\nif __name__ == \"__main__\":\r\n    app.run()\r\n    ```\r\n\r\nFor further details, please refer to the [example](https://github.com/p768lwy3/torecsys/tree/master/example) in repository or read the [documentation](https://torecsys.readthedocs.io/en/latest/). Hope you enjoy~\r\n\r\n## Examples\r\n\r\nTBU\r\n\r\n### Sample Codes\r\n\r\nTBU\r\n\r\n### Sample of Experiments\r\n\r\nTBU\r\n\r\n## Authors\r\n\r\n- [Jasper Li](https://github.com/p768lwy3) - Developer\r\n\r\n## License\r\n\r\nToR[e]cSys is MIT-style licensed, as found in the LICENSE file.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/p768lwy3/torecsys",
    "keywords": "recsys recommendersystem recommendationsystem machinelearning deeplearning research ctr clickthroughrate",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torecsys",
    "package_url": "https://pypi.org/project/torecsys/",
    "platform": "",
    "project_url": "https://pypi.org/project/torecsys/",
    "project_urls": {
      "Bug Tracker": "https://github.com/p768lwy3/torecsys/issues",
      "Documentation": "https://torecsys.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/p768lwy3/torecsys",
      "Source": "https://github.com/p768lwy3/torecsys"
    },
    "release_url": "https://pypi.org/project/torecsys/0.0.1.dev2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "ToR[e]cSys is a PyTorch Framework to implement recommendation system algorithms, including but not limited to click-through-rate (CTR) prediction, learning-to-ranking (LTR), and Matrix/Tensor Embedding. The project objective is to develop a ecosystem to experiment, share, reproduce, and deploy in real world in a smooth and easy way.",
    "version": "0.0.1.dev2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10472689,
  "releases": {
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82db9e9b6b64eb7dae9e9538bb6f8c7370eb7c280f6ed9801cc90df3e4aec95b",
          "md5": "e23ed63bf0621d114ecf67fcc33cc0fc",
          "sha256": "e9740c9bb1a52ded4ed34cdccbeac8676ae4265e7f8eac47ebf996b533ed944c"
        },
        "downloads": -1,
        "filename": "torecsys-0.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e23ed63bf0621d114ecf67fcc33cc0fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 81856,
        "upload_time": "2021-05-25T05:56:37",
        "upload_time_iso_8601": "2021-05-25T05:56:37.576431Z",
        "url": "https://files.pythonhosted.org/packages/82/db/9e9b6b64eb7dae9e9538bb6f8c7370eb7c280f6ed9801cc90df3e4aec95b/torecsys-0.0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83bd5319f55f9d367d5931386e5719b7967ae0ede8da87745c7ad1d5f5f53971",
          "md5": "983c9f1b06e92e54d04dead15c2a2a26",
          "sha256": "b4aae42af1e09b58b0b4f0650336273b5ebfbd42e330759b2828fcbda9e9e3d4"
        },
        "downloads": -1,
        "filename": "torecsys-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "983c9f1b06e92e54d04dead15c2a2a26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 81867,
        "upload_time": "2021-05-26T05:14:29",
        "upload_time_iso_8601": "2021-05-26T05:14:29.565031Z",
        "url": "https://files.pythonhosted.org/packages/83/bd/5319f55f9d367d5931386e5719b7967ae0ede8da87745c7ad1d5f5f53971/torecsys-0.0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45b4fd9cfec8ed74dec66eaa7b5e8e741cdc83190eac649390a2aa63b8cfe022",
          "md5": "f067cb8c1ae005c43b0de5787ef03ade",
          "sha256": "83d99b046247cdcb90f9df443e23eaefa95930b91932937ea00935f698d7215f"
        },
        "downloads": -1,
        "filename": "torecsys-0.0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "f067cb8c1ae005c43b0de5787ef03ade",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82241,
        "upload_time": "2021-05-26T05:42:59",
        "upload_time_iso_8601": "2021-05-26T05:42:59.284559Z",
        "url": "https://files.pythonhosted.org/packages/45/b4/fd9cfec8ed74dec66eaa7b5e8e741cdc83190eac649390a2aa63b8cfe022/torecsys-0.0.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45b4fd9cfec8ed74dec66eaa7b5e8e741cdc83190eac649390a2aa63b8cfe022",
        "md5": "f067cb8c1ae005c43b0de5787ef03ade",
        "sha256": "83d99b046247cdcb90f9df443e23eaefa95930b91932937ea00935f698d7215f"
      },
      "downloads": -1,
      "filename": "torecsys-0.0.1.dev2.tar.gz",
      "has_sig": false,
      "md5_digest": "f067cb8c1ae005c43b0de5787ef03ade",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 82241,
      "upload_time": "2021-05-26T05:42:59",
      "upload_time_iso_8601": "2021-05-26T05:42:59.284559Z",
      "url": "https://files.pythonhosted.org/packages/45/b4/fd9cfec8ed74dec66eaa7b5e8e741cdc83190eac649390a2aa63b8cfe022/torecsys-0.0.1.dev2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}