{
  "info": {
    "author": "Jordan Taylor",
    "author_email": "jt2006@bath.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GridWorld Continuous\n\nA simple continuous gridworld environment constructor.\n\n## Usage\n\n```python\nfrom   gridworld_continuous.envs   import FourRooms\nfrom   gridworld_continuous.events import SquareGold\n\ngold   = SquareGold(loc = (9.5, 9.5))\nevents = [gold]\n\nenv    = FourRooms(events = events)\n\nenv.render()\n```\n<p align=\"center\">\n  <img src=\"demo/four-rooms.png\" alt=\"animated\" style=\"height:480px\"/>\n</p>\n\n<br>\n<br>\n\n### Demo Function\n\n<br>\n\n```python\nfrom matplotlib import pyplot as plt, animation\n\ndef animate(configs, interval = 50):\n    \"\"\"helper function to create demo animations\"\"\"\n    \n    fig, ax = plt.subplots()\n\n    _, ax, objects, patches = env.render(ax = ax)\n\n    count  = 0\n    def func(i):\n        nonlocal count\n        env.set_config(*configs[i])\n        ax.clear()\n        env.render(ax = ax)\n        fig.canvas.draw()\n\n        if i:\n            ax.set_xlabel(info)\n            count += configs[i][2]['correction'] is not None\n        \n        if count:\n            ax.set_title(f'hit wall {count} times')\n\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n    plt.close()\n\n    anim = animation.FuncAnimation(fig, func, len(configs), interval = interval)\n\n    return anim\n```\n<br><br>\n\n### Moving towards goal until termination\n\n<br>\n\n```python\nimport numpy as np\n\nnp.random.seed(12)\n\nstate    = env.reset()\nterminal = env.terminal\nconfigs  = [env.get_config()]\n\nwhile not terminal:\n    action = np.clip(gold.loc - state, -0.05, 0.05)\n    reward, state, terminal, info = env.step(action)\n    configs.append(env.get_config())\n    \nanim = animate(configs)\n\nanim.save('four-rooms-get-gold.gif')\n```\n\n<p align=\"center\">\n  <img src=\"demo/four-rooms-get-gold.gif\" alt=\"animated\" />\n</p>\n\n<br>\n\nUpon reaching the gold state, the final `info` value is:\n\n```{'correction': None, 'flag': 'gold'}```\n\nThe `info` dictionary will always contain two entries:\n\n  + correction : an array which needed to be added to the action array to ensure we do not go into a wall\n  + flag : a string which indicates which special object we may have collided with or `None`\n\n\n<br><br>\n\n### Moving towards a wall\n\n<br>\n\n```python\nnp.random.seed(12)\n\nstate   = env.reset()\nconfigs = [env.get_config()]\n\ncount = 0\nwhile count < 20:\n    reward, state, terminal, info = env.step((-0.05, 0.02))\n    configs.append(env.get_config())\n    count += info['correction'] is not None\n    \nanim = animate(configs, interval = 100)\n\nanim.save('four-rooms-to-wall.gif')\n```\n<br>\n<p align=\"center\">\n  <img src=\"demo/four-rooms-to-wall.gif\" alt=\"animated\" />\n</p>\n\n<br><br>\n\n## Multi-Goal condition\n\n<br>\n\nSuppose we would like two gold locations and termination only happens when both are collected. When a special state is reached, it's flag is appended to a list of flags within the environment. By creating our own terminal function, we can use the list of flags to determine when we have reached a terminal condition. In the below example, we need to have reached two states collecting the flag 'gold' twice.\n\n<br>\n\n```python\ndef terminal_func(flags):\n    return flags.count('gold') == 2\n\nlocs    = [(9.5, 9.5), (2, 2)]\nevents  = [SquareGold(loc = loc) for loc in locs]\ninitial = (8.9, 8.9)\n\nenv     = FourRooms(events = events, initial_states = [initial], terminal_func = terminal_func)\n\nenv.reset()\n\n# two subplots for before and after gold collection\nfig, ax = plt.subplots(1, 2, figsize = (12, 5))\n\n# before gold collection\nenv.render(ax[0])\n\n# step into gold location and confirm not a terminal state\naction = (0.4, 0.4)\nreward, state, terminal, info = env.step(action)\n\n# after gold collection\nenv.render(ax[1])\n\nsup = fig.suptitle(f'reward = {reward}\\nstate = {state}\\nterminal = {terminal}\\ninfo = {info}', y = 1.15)\n\n# remove ticks\nfor axes in ax:\n    axes.set_xticks([])\n    axes.set_yticks([])\n\nax[0].set_title(f'state = {initial}\\naction = {action}')\nax[1].set_title(f'state = {tuple(env.state)}\\n')\n```\n\n<br>\n<p align=\"center\">\n  <img src=\"demo/four-rooms-first-gold.png\" alt=\"animated\" style=\"height:480px\"/>\n</p>\n\n<br><br>\n\n## Custom Layout\n\n<br>\n\nUsers can create custom layouts by creating their own layout in string. Walls are denoted with the '#' character.\n\n<br>\n\n```python\nfrom gridworld_continuous.env import BaseEnv\n\ncustom = \"\"\"\n#############\n#     #     #\n#     #     #\n#     #     #\n#     #     #\n#           #\n#############\n\"\"\"\n\nenv = BaseEnv(custom)\n\nenv.render()\n\nplt.savefig('custom.png', dpi = 400)\n```\n\n<p align=\"center\">\n  <img src=\"demo/custom.png\" alt=\"animated\" style=\"height:480px\"/>\n</p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jordan-wei-taylor/continuous-gridworld",
    "keywords": "",
    "license": "Copyright (c) 2022, Jordan Wei Taylor All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gridworld-continuous",
    "package_url": "https://pypi.org/project/gridworld-continuous/",
    "platform": null,
    "project_url": "https://pypi.org/project/gridworld-continuous/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jordan-wei-taylor/continuous-gridworld/issues",
      "Homepage": "https://github.com/jordan-wei-taylor/continuous-gridworld"
    },
    "release_url": "https://pypi.org/project/gridworld-continuous/0.0.1/",
    "requires_dist": [
      "matplotlib (>=3.5.2)",
      "numpy (>=1.22.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple implementation of a continuous GridWorld",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13820875,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c52528d0ad6cdc9bbfeea2dcb8380c2a5f239b00038a0bb1d18c41880c5a0c8d",
          "md5": "c53cb6d50488c3ab51f16f2a8ffa9c33",
          "sha256": "d9669a3a221499c9de4a04c92998b330b5c47f5214821d1b52016b98f7976dc4"
        },
        "downloads": -1,
        "filename": "gridworld_continuous-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c53cb6d50488c3ab51f16f2a8ffa9c33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10045,
        "upload_time": "2022-05-15T10:09:55",
        "upload_time_iso_8601": "2022-05-15T10:09:55.529819Z",
        "url": "https://files.pythonhosted.org/packages/c5/25/28d0ad6cdc9bbfeea2dcb8380c2a5f239b00038a0bb1d18c41880c5a0c8d/gridworld_continuous-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98d9891d4abaa81b48f76c66056ae9222b7b00634f33ec4d77651853ad14b0a2",
          "md5": "2997c02c75cc7f7cd82b0825c617b7b3",
          "sha256": "af59caa15ac67e483c50888a8cb964fd7e359ea12b3cbf28f459294cd5397b33"
        },
        "downloads": -1,
        "filename": "gridworld-continuous-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2997c02c75cc7f7cd82b0825c617b7b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10334,
        "upload_time": "2022-05-15T10:09:57",
        "upload_time_iso_8601": "2022-05-15T10:09:57.462026Z",
        "url": "https://files.pythonhosted.org/packages/98/d9/891d4abaa81b48f76c66056ae9222b7b00634f33ec4d77651853ad14b0a2/gridworld-continuous-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c52528d0ad6cdc9bbfeea2dcb8380c2a5f239b00038a0bb1d18c41880c5a0c8d",
        "md5": "c53cb6d50488c3ab51f16f2a8ffa9c33",
        "sha256": "d9669a3a221499c9de4a04c92998b330b5c47f5214821d1b52016b98f7976dc4"
      },
      "downloads": -1,
      "filename": "gridworld_continuous-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c53cb6d50488c3ab51f16f2a8ffa9c33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10045,
      "upload_time": "2022-05-15T10:09:55",
      "upload_time_iso_8601": "2022-05-15T10:09:55.529819Z",
      "url": "https://files.pythonhosted.org/packages/c5/25/28d0ad6cdc9bbfeea2dcb8380c2a5f239b00038a0bb1d18c41880c5a0c8d/gridworld_continuous-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98d9891d4abaa81b48f76c66056ae9222b7b00634f33ec4d77651853ad14b0a2",
        "md5": "2997c02c75cc7f7cd82b0825c617b7b3",
        "sha256": "af59caa15ac67e483c50888a8cb964fd7e359ea12b3cbf28f459294cd5397b33"
      },
      "downloads": -1,
      "filename": "gridworld-continuous-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2997c02c75cc7f7cd82b0825c617b7b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10334,
      "upload_time": "2022-05-15T10:09:57",
      "upload_time_iso_8601": "2022-05-15T10:09:57.462026Z",
      "url": "https://files.pythonhosted.org/packages/98/d9/891d4abaa81b48f76c66056ae9222b7b00634f33ec4d77651853ad14b0a2/gridworld-continuous-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}