{
  "info": {
    "author": "Miguel Carcamo",
    "author_email": "miguel.carcamo@manchester.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CS-ROMER\n*Compressed Sensing ROtation MEasure Reconstruction*\n\nCompressed sensing reconstruction framework for Faraday depth spectra. \nPlease feel free to open an issue if you spot a bug. This is an open source project, and therefore you can fork, make changes and submit a [pull request](https://github.com/miguelcarcamov/csromer/pulls) of any of your additions and modifications.\n\n- This paper explains what is [Faraday rotation measure synthesis](https://www.aanda.org/articles/aa/abs/2005/39/aa2990-05/aa2990-05.html)\n- Wikipedia information about [Faraday effect](https://en.wikipedia.org/wiki/Faraday_effect)\n## Features\n- Simulation of Faraday depth sources\n- Subtraction of Galactic RM\n- Reconstruction of Faraday depth sources from linearly polarized data\n- Reconstruction of Faraday depth sources using Compressed Sensing\n- More than 100 wavelet filters provided by `Pywavelets`\n\n\nThis code will run in a Python >= 3.9.7 environment with all the packages installed (see `requirements.txt` file).\n\n## Citing \nThe paper of this software is under submission but if you use it you can cite it as:\n\n```\n@misc{https://doi.org/10.48550/arxiv.2205.01413,\n  doi = {10.48550/ARXIV.2205.01413},\n  \n  url = {https://arxiv.org/abs/2205.01413},\n  \n  author = {CÃ¡rcamo, Miguel and Scaife, Anna M. M. and Alexander, Emma L. and Leahy, J. Patrick},\n  \n  keywords = {Instrumentation and Methods for Astrophysics (astro-ph.IM), Astrophysics of Galaxies (astro-ph.GA), FOS: Physical sciences, FOS: Physical sciences},\n  \n  title = {CS-ROMER: A novel compressed sensing framework for Faraday depth reconstruction},\n  \n  publisher = {arXiv},\n  \n  year = {2022},\n  \n  copyright = {arXiv.org perpetual, non-exclusive license}\n}\n```\n## Installation\nThe software can be installed as a python package locally or using Pypi\n### Locally\n`pip install -e .`\n### From Pypi\n`pip install csromer`\n### From Github\n`pip install -U git+https://github.com/miguelcarcamov/csromer.git`\n## Simulate Faraday sources directly in frequency space\nCS-ROMER is able to simulate Faraday depth spectra directly in wavelength-squared space. The classes `FaradayThinSource` and `FaradayThickSource` inherit directly from `Dataset`, and therefore you can directly use them as an input to your reconstruction.\n### Thin sources\n```python\nimport numpy as np\nfrom csromer.simulation import FaradayThinSource\n# Let's create an evenly spaced frequency vector from 1.008 to 2.031 GHz (JVLA setup) \nnu = np.linspace(start=1.008e9, stop=2.031e9, num=1000)\n# Let's say that the peak polarized intensity will be 0.0035 mJy/beam with a spectral index = 1.0\npeak_thinsource = 0.0035\n# The Faraday source will be positioned at phi_0 = -200 rad/m^2\nthinsource = FaradayThinSource(nu=nu, s_nu=peak_thinsource, phi_gal=-200, spectral_idx=1.0)\n```\n### Thick sources\n```python\nimport numpy as np\nfrom csromer.simulation import FaradayThickSource\n# Let's create an evenly spaced frequency vector from 1.008 to 2.031 GHz (JVLA setup) \nnu = np.linspace(start=1.008e9, stop=2.031e9, num=1000)\n# Let's say that the peak polarized intensity will be 0.0035 mJy/beam with a spectral index = 1.0\npeak_thicksource = 0.0035\n# The Faraday source will be positioned at phi_0 = 200 rad/m^2 and will have a width of 140 rad/m^2\nthicksource = FaradayThickSource(nu=nu, s_nu=peak_thicksource, phi_fg=140, phi_center=200, spectral_idx=1.0)\n```\n\n### Simulate\nOnce you have set your source parameters, you can call the `simulate()` function as\n```python\nthinsource.simulate()\nthicksource.simulate()\n```\nThis call will simulate the linealy polarized emission and it will assign the data to the `data` attribute.\n\n### Mixed sources\nA thin+thick or mixed source is simply a superposition/sum of a thin source and thick source. Therefore we have overriden the `+` operator in order to sum these two objects.\n```python\nmixedsource = thinsource + thicksource\n```\nThe result will be a `FaradaySource` object.\n\n### Remove frequency channels randomly as if you were doing RFI flagging\nThe framework also allows you to randomly remove data with the function `remove_channels` to simulate RFI flagging\n```python\n# Let's say that we want to randomly remove 20% of the data\nmixedsource.remove_channels(0.2)\n```\n### Adding noise to your simulations\nIf we want to add random Gaussian noise to our simulation we can simply call the function `apply_noise`\n```python\n# Let's add Gaussian random noise with mean 0 and standard deviation equal \n# to 20% the peak of the signal.\nsigma = 0.2*mixedsource.s_nu\nmixedsource.apply_noise(sigma)\n```\n## Reconstruct 1D Faraday sources\nTo illustrate how to reconstruct Faraday depth signals with CS-ROMER first we will reconstruct the mixed source that we have just constructed\n### Dirty Faraday depth spectra\n```python\nfrom csromer.reconstruction import Parameter\nfrom csromer.transformers import DFT1D\n# We first need to initialize the parameter object that will contain our Faraday depth\n# data either in Faraday-depth space or in wavelet space\nparameter = Parameter()\n# We calculate the cellsize in Faraday depth space using an oversampling factor of 8\n# Here parameter.data is set as a complex array of zeros\nparameter.calculate_cellsize(dataset=mixedsource, oversampling=8)\n# We instantiate our discrete Fourier transform\ndft = DFT1D(dataset=mixedsource, parameter=parameter)\n# We calculate the dirty Faraday depth spectra\nF_dirty = dft.backward(mixedsource.data)\n```\n### Reconstruct simulated data\n```python\nfrom csromer.transformers import NUFFT1D\n# We instantiate our non-uniform FFT\nnufft = NUFFT1D(dataset=mixedsource, parameter=parameter, solve=True)\n# At this point we can use either the parameter data set with zeros or we can \n# use the dirty Faraday depth spectra\nparameter.data = F_dirty\nparameter.complex_data_to_real() # We convert the complex data to real\n# You can set the L1 lambda regularization manually or estimate it as\nlambda_l1 = np.sqrt(mixedsource.m + 2*np.sqrt(mixedsource.m)) * np.sqrt(2) * np.mean(mixedsource.sigma)\n```\n### Objective function\n```python\nfrom csromer.objectivefunction import L1, Chi2\nfrom csromer.objectivefunction import OFunction\n# We instantiate each part of our objective function \nchi2 = Chi2(dft_obj=nufft, wavelet=None) # chi-squared\nl1 = L1(reg=lambda_l1) # L1-norm regularization\n\nF_obj = OFunction([chi2, l1]) # Whole objective function\nf_obj = OFunction([chi2]) # Only chi-squared\ng_obj = OFunction([l1]) # Just regularizations\n```\n### Optimization algorithm\nOne of the ways to optimize the objective function is to use the FISTA algorithm.\n```python\nfrom csromer.optimization import FISTA\n# We instantiate our FISTA object as\nopt = FISTA(guess_param=parameter, F_obj=F_obj, fx=chi2, gx=g_obj, noise=mixedsource.theo_noise, verbose=False)\n# We run the optimization algorithm\nobj, X = opt.run()\nX.real_data_to_complex() # We convert the data back to complex when the optimization finishes\n```\nThis returns the objective function value `obj` and `X`a `Parameter` instance object. Therefore in this case `X.data` will hold the reconstructed Faraday depth spectra.\nAt this point you can also access to the model and residual data in wavelength-squared as `mixedsource.model_data` and `mixedsource.residual`, respectively. You can calculate the residuals in Faraday depth space by using the DFT object as\n```python\nF_residual = dft.backward(mixedsource.residual)\n```\n\n### Using discrete or undecimated wavelets\nCS-ROMER has about 100 filters to user with discrete wavelet transforms or undecimated wavelet transforms. We use the `Pywavelets` package, for more information please refer to [PyWavelets](https://pywavelets.readthedocs.io/en/latest/index.html). To use the wavelets in cs-romer you can do:\n```python\nfrom csromer.dictionaries import DiscreteWavelet, UndecimatedWavelet\n# This line instantiates a discrete wavelet\nwav = DiscreteWavelet(wavelet_name=\"coif3\", mode=\"periodization\", append_signal=False)\n# This line instantiates an undecimated wavelet\nwav = UndecimatedWavelet(wavelet_name=\"sym2\", mode=\"periodization\", append_signal=True)\n```\nThe `append_signal` parameter plugs the Faraday depth spectrum to your coefficients resulting in redundancy in your coefficients. If you just want the wavelet coefficients then set `append_signal=False`.\nAt this point our parameter object data needs to be our coefficients and not our Faraday depth spectra, therefore, we do\n```python\nparameter.data = F_dirty # Suppose that you set your parameter data with your dirty Faraday depth spectrum\nparameter.complex_data_to_real() # We convert the data to real\n# Here we do a wavelet decomposition of our Faraday depth space\n# We set the coefficients of the decomposition as our parameter data\nparameter.data = wav.decompose(parameter.data)\n# Don't forget to change your chi-squared\nchi2 = Chi2(dft_obj=nufft, wavelet=wav)\n```\nYou might have noticed that at the end of the optimization we will end up with fitted coefficients instead of a Faraday depth spectrum.\nTherefore, we need to reconstruct the Faraday depth spectrum from our coefficients doing\n```python\nX.data = wav.reconstruct(X.data) # We reconstruct the Faraday depth spectrum from coefficients\nX.real_data_to_complex() # We convert the real Faraday depth spectrum into complex\n```\n### Reconstruct a real line of sight data\nTo reconstruct real data your main script should follow the same workflow. The only difference is that you need to instantiate a `Dataset` object.\n```python\nfrom csromer.base import Dataset\n# nu is the irregular spaced frequency\n# data is the polarized emission\n# sigma is the error per channel (this can be an array of ones or rms calculation per image channel)\n# alpha is the spectral index at this line of sight\ndataset = Dataset(nu=nu, data=data, sigma=sigma, spectral_idx=alpha)\n```\n### Subtracting the Milky Way RM contribution\nWe use [S. Hutschenreuter et al.](https://www.aanda.org/articles/aa/full_html/2022/01/aa40486-21/aa40486-21.html) Faraday sky HealPIX image to subtract the galactic RM contribution at a certain position of the sky using the object `FaradaySky`.\nNote that you can omit this step, and subtract any RM value that you might find appropiate.\n```python\nfrom csromer.faraday_sky import FaradaySky\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as un\n\nf_sky = FaradaySky()\ncoord = SkyCoord(ra=173.694*un.deg, dec=48.957*un.deg, frame=\"fk5\")\ngal_mean, gal_std = f_sky.galactic_rm(coord.ra, coord.dec, frame=\"fk5\")\ndataset.subtract_galacticrm(gal_mean.value)\n```\n## Reconstruct a cube\nWe warn the users that not all framework functions are yet implemented to work with data cubes. Therefore, we need to use `numpy` broadcasting and the package `joblib`.\n```\n\n```\n\n## Contact\nPlease if you have any problem, issue or you catch a bug using this software please use the [issues tab](https://github.com/miguelcarcamov/csromer/issues) if you have a common question or you look for any help please use the [discussions tab](https://github.com/miguelcarcamov/csromer/discussions).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/miguelcarcamov/csromer",
    "keywords": "",
    "license": "GNU GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "csromer",
    "package_url": "https://pypi.org/project/csromer/",
    "platform": null,
    "project_url": "https://pypi.org/project/csromer/",
    "project_urls": {
      "Homepage": "https://github.com/miguelcarcamov/csromer"
    },
    "release_url": "https://pypi.org/project/csromer/0.0.2/",
    "requires_dist": [
      "proxmin (>=0.6.11)",
      "PyWavelets (>=1.1.1)",
      "matplotlib (>=3.4.2)",
      "prox-tv (>=3.2.1)",
      "numpy (>=1.20.3)",
      "pynufft (>=2021.2.0)",
      "scipy (>=1.6.3)",
      "astropy (>=4.2.1)",
      "joblib (>=1.0.1)",
      "astroquery (>=0.4.4)",
      "h5py (>=3.1.0)",
      "astropy-healpix (>=0.6)"
    ],
    "requires_python": "",
    "summary": "Compressed Sensing Rotation Measure Reconstructor",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13856382,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e32ea6d60806f38513cf9f75ba9654b314bbec0fe316b403484778126b5c136c",
          "md5": "7696525069dec41218bfebb86ed06a5e",
          "sha256": "bb03587bf186fd2790873c7492d3fa955aba5efd0d620c91964cf264dffa851a"
        },
        "downloads": -1,
        "filename": "csromer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7696525069dec41218bfebb86ed06a5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17717,
        "upload_time": "2022-05-18T11:09:57",
        "upload_time_iso_8601": "2022-05-18T11:09:57.164975Z",
        "url": "https://files.pythonhosted.org/packages/e3/2e/a6d60806f38513cf9f75ba9654b314bbec0fe316b403484778126b5c136c/csromer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "969a3d97b3ae14456c2491d8d38303907a71d6ae34610a07bbf9333e0545cd29",
          "md5": "9c5fe01dd7f1f62d926cbb58250b975f",
          "sha256": "64192d2ce3425e9e483907e3f6436e342c33d870693f00842ce387e1da06f410"
        },
        "downloads": -1,
        "filename": "csromer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c5fe01dd7f1f62d926cbb58250b975f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17911,
        "upload_time": "2022-05-18T11:09:59",
        "upload_time_iso_8601": "2022-05-18T11:09:59.749622Z",
        "url": "https://files.pythonhosted.org/packages/96/9a/3d97b3ae14456c2491d8d38303907a71d6ae34610a07bbf9333e0545cd29/csromer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66105e509a3c7de7e7b8e644f2ebb76c4d6339038b3036b54b19687f76ee2904",
          "md5": "77483049897e5fd30cb918d13462eb6e",
          "sha256": "1a5697c51108afad7dee79b88e596951e56a72d59e3da704f3e11b8e60b0f267"
        },
        "downloads": -1,
        "filename": "csromer-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77483049897e5fd30cb918d13462eb6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17720,
        "upload_time": "2022-05-18T18:26:55",
        "upload_time_iso_8601": "2022-05-18T18:26:55.251876Z",
        "url": "https://files.pythonhosted.org/packages/66/10/5e509a3c7de7e7b8e644f2ebb76c4d6339038b3036b54b19687f76ee2904/csromer-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef078ea5920b81951fffd1e0286f44657bf22d3fef79f20d51ba7afba9e6e5c7",
          "md5": "7a972012f5cb7a1daecb2a19688904d6",
          "sha256": "8865caa1d040bd85c57587a38e713b4958b5944d67031277ac4a0d447d38c3ff"
        },
        "downloads": -1,
        "filename": "csromer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a972012f5cb7a1daecb2a19688904d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18046,
        "upload_time": "2022-05-18T18:26:57",
        "upload_time_iso_8601": "2022-05-18T18:26:57.615280Z",
        "url": "https://files.pythonhosted.org/packages/ef/07/8ea5920b81951fffd1e0286f44657bf22d3fef79f20d51ba7afba9e6e5c7/csromer-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66105e509a3c7de7e7b8e644f2ebb76c4d6339038b3036b54b19687f76ee2904",
        "md5": "77483049897e5fd30cb918d13462eb6e",
        "sha256": "1a5697c51108afad7dee79b88e596951e56a72d59e3da704f3e11b8e60b0f267"
      },
      "downloads": -1,
      "filename": "csromer-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77483049897e5fd30cb918d13462eb6e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17720,
      "upload_time": "2022-05-18T18:26:55",
      "upload_time_iso_8601": "2022-05-18T18:26:55.251876Z",
      "url": "https://files.pythonhosted.org/packages/66/10/5e509a3c7de7e7b8e644f2ebb76c4d6339038b3036b54b19687f76ee2904/csromer-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef078ea5920b81951fffd1e0286f44657bf22d3fef79f20d51ba7afba9e6e5c7",
        "md5": "7a972012f5cb7a1daecb2a19688904d6",
        "sha256": "8865caa1d040bd85c57587a38e713b4958b5944d67031277ac4a0d447d38c3ff"
      },
      "downloads": -1,
      "filename": "csromer-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7a972012f5cb7a1daecb2a19688904d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18046,
      "upload_time": "2022-05-18T18:26:57",
      "upload_time_iso_8601": "2022-05-18T18:26:57.615280Z",
      "url": "https://files.pythonhosted.org/packages/ef/07/8ea5920b81951fffd1e0286f44657bf22d3fef79f20d51ba7afba9e6e5c7/csromer-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}