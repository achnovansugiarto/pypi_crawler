{
  "info": {
    "author": "Duncan Blythe",
    "author_email": "firstnamelastname@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# torchapply\nApply a torch model to some datapoints. \n\nHere's an example:\n\n```python\nimport torch\nfrom torch import tensor\n\n\nclass Main(torch.nn.Module):\n    def __init__(self, model_0, model_1):\n        super().__init__()\n        self.model_0 = model_0\n        self.model_1 = model_1\n        self.dictionary = {'apple': 0, 'orange': 1, 'pear': 2}\n\n    def preprocess(self, arg):\n        return [\n            {\n                'a': {'b': self.dictionary[arg[0]['a']['b']]},\n                'c': self.dictionary[arg[0]['c']]\n            },\n            torch.tensor([self.dictionary[x] for x in arg[1]])\n        ]\n\n    def forward(self, args):\n        return self.model_0(args[0]), self.model_1(args[1])\n      \n    def postprocess(self, arg):\n        total = [arg[0]['a']['b'].sum(), arg[0]['c'].sum(), arg[1].sum()]\n        return {'score': sum(total), 'decision': sum(total) > 0}\n        \n\nclass ModelA(torch.nn.Module):\n    def forward(self, args):\n        return {'b': torch.randn(args['b'].shape[0], 10)}\n\n\nclass ModelC(torch.nn.Module):\n    def forward(self, args):\n        return torch.randn(args.shape[0], 10)\n\n\nclass Model1(torch.nn.Module):\n    def forward(self, args):\n        return torch.randn(args.shape[0], 10)\n\n\nclass Model0(torch.nn.Module):\n    def __init__(self, model_a, model_c):\n        super().__init__()\n        self.model_a = model_a\n        self.model_c = model_c\n\n    def forward(self, args):\n        return {'a': self.model_a(args['a']), 'c': self.model_c(args['c'])}\n\n\nmodel = Main(\n    model_0=Model0(\n        model_a=ModelA(),\n        model_c=ModelC()\n    ),\n    model_1=Model1()\n)\n```\n\nApply to a single datapoint:\n\n```python\nfrom torchapply import apply_model\n\napply_model(\n   model, \n   ({'a': {'b': 'orange'}, 'c': 'pear'}, ('apple', 'apple')),\n   single=True\n)\n```\n\nApply to multiple datapoints:\n\n```python\nfrom torchapply import apply_model\n\napply_model(\n    model,\n    [({'a': {'b': 'orange'}, 'c': 'pear'}, ('apple', 'apple')) for _ in range(10)],\n    single=False\n)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blythed/torchapply",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchapply",
    "package_url": "https://pypi.org/project/torchapply/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchapply/",
    "project_urls": {
      "Homepage": "https://github.com/blythed/torchapply"
    },
    "release_url": "https://pypi.org/project/torchapply/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Apply a torch model to a single or multiple datapoints.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15119018,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab4cf20cd36361118fdd50f5a7bdc2eeb6989b3072bfd490e9275fdc45cce233",
          "md5": "a5f0cfc943d6aec9768641755e4b1e23",
          "sha256": "93a8bb7978df25a1b7f63af4c45a9228c995dff03eb8e0db4ffefaf5331c203d"
        },
        "downloads": -1,
        "filename": "torchapply-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a5f0cfc943d6aec9768641755e4b1e23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3719,
        "upload_time": "2022-09-16T14:29:38",
        "upload_time_iso_8601": "2022-09-16T14:29:38.685460Z",
        "url": "https://files.pythonhosted.org/packages/ab/4c/f20cd36361118fdd50f5a7bdc2eeb6989b3072bfd490e9275fdc45cce233/torchapply-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b234486290453064f96d51ad4bb6405c022cbb4a3325e8cbb8db5936845cf51",
          "md5": "38eeece5a30aee9387db135b8540025e",
          "sha256": "590ba358a23394f002b5e9bd8e4a890a42c22e2f9d310f3b80f742c8c5189d0a"
        },
        "downloads": -1,
        "filename": "torchapply-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "38eeece5a30aee9387db135b8540025e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4224,
        "upload_time": "2022-09-16T14:41:59",
        "upload_time_iso_8601": "2022-09-16T14:41:59.570211Z",
        "url": "https://files.pythonhosted.org/packages/8b/23/4486290453064f96d51ad4bb6405c022cbb4a3325e8cbb8db5936845cf51/torchapply-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0793c808e5d39643702420ff2d4a0a3ab03731c5d38b1d636854683c857607e",
          "md5": "fa6c6e59191e28fc15a786bd0407cccb",
          "sha256": "9dd96796ab827acde21b1d0af223cba53fdef68228c8de3af373a6fdffb25490"
        },
        "downloads": -1,
        "filename": "torchapply-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fa6c6e59191e28fc15a786bd0407cccb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4229,
        "upload_time": "2022-09-16T14:56:25",
        "upload_time_iso_8601": "2022-09-16T14:56:25.974578Z",
        "url": "https://files.pythonhosted.org/packages/c0/79/3c808e5d39643702420ff2d4a0a3ab03731c5d38b1d636854683c857607e/torchapply-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0793c808e5d39643702420ff2d4a0a3ab03731c5d38b1d636854683c857607e",
        "md5": "fa6c6e59191e28fc15a786bd0407cccb",
        "sha256": "9dd96796ab827acde21b1d0af223cba53fdef68228c8de3af373a6fdffb25490"
      },
      "downloads": -1,
      "filename": "torchapply-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fa6c6e59191e28fc15a786bd0407cccb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4229,
      "upload_time": "2022-09-16T14:56:25",
      "upload_time_iso_8601": "2022-09-16T14:56:25.974578Z",
      "url": "https://files.pythonhosted.org/packages/c0/79/3c808e5d39643702420ff2d4a0a3ab03731c5d38b1d636854683c857607e/torchapply-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}