{
  "info": {
    "author": "Nic Wanavit (fork)",
    "author_email": "nwanavit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "========\nPynamoDB\n========\n\n.. image:: https://img.shields.io/pypi/v/pynamodb.svg\n    :target: https://pypi.python.org/pypi/pynamodb/\n.. image:: https://img.shields.io/conda/vn/conda-forge/pynamodb.svg\n    :target: https://anaconda.org/conda-forge/pynamodb\n.. image:: https://github.com/pynamodb/PynamoDB/workflows/Tests/badge.svg\n    :target: https://github.com/pynamodb/PynamoDB/actions\n.. image:: https://img.shields.io/coveralls/pynamodb/PynamoDB/master.svg\n    :target: https://coveralls.io/github/pynamodb/PynamoDB\n\nA Pythonic interface for Amazon's `DynamoDB <https://aws.amazon.com/dynamodb/>`_.\n\nDynamoDB is a great NoSQL service provided by Amazon, but the API is verbose.\nPynamoDB presents you with a simple, elegant API.\n\nUseful links:\n\n* See the full documentation at https://pynamodb.readthedocs.io/\n* Ask questions in the `GitHub issues <https://github.com/pynamodb/PynamoDB/issues>`_\n* See release notes at https://pynamodb.readthedocs.io/en/latest/release_notes.html\n\nInstallation\n============\nFrom PyPi::\n\n    $ pip install pynamodb\n\nFrom GitHub::\n\n    $ pip install git+https://github.com/pynamodb/PynamoDB#egg=pynamodb\n\nFrom conda-forge::\n\n    $ conda install -c conda-forge pynamodb\n\n\nBasic Usage\n===========\n\nCreate a model that describes your DynamoDB table.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n\n    class UserModel(Model):\n        \"\"\"\n        A DynamoDB User\n        \"\"\"\n        class Meta:\n            table_name = \"dynamodb-user\"\n        email = UnicodeAttribute(null=True)\n        first_name = UnicodeAttribute(range_key=True)\n        last_name = UnicodeAttribute(hash_key=True)\n\nPynamoDB allows you to create the table if needed (it must exist before you can use it!):\n\n.. code-block:: python\n\n    UserModel.create_table(read_capacity_units=1, write_capacity_units=1)\n\nCreate a new user:\n\n.. code-block:: python\n\n    user = UserModel(\"John\", \"Denver\")\n    user.email = \"djohn@company.org\"\n    user.save()\n\nNow, search your table for all users with a last name of 'Denver' and whose\nfirst name begins with 'J':\n\n.. code-block:: python\n\n    for user in UserModel.query(\"Denver\", UserModel.first_name.startswith(\"J\")):\n        print(user.first_name)\n\nExamples of ways to query your table with filter conditions:\n\n.. code-block:: python\n\n    for user in UserModel.query(\"Denver\", UserModel.email==\"djohn@company.org\"):\n        print(user.first_name)\n\nRetrieve an existing user:\n\n.. code-block:: python\n\n    try:\n        user = UserModel.get(\"John\", \"Denver\")\n        print(user)\n    except UserModel.DoesNotExist:\n        print(\"User does not exist\")\n\nUpgrade Warning\n===============\n\nThe behavior of 'UnicodeSetAttribute' has changed in backwards-incompatible ways\nas of the 1.6.0 and 3.0.1 releases of PynamoDB.\n\nSee `UnicodeSetAttribute upgrade docs <https://pynamodb.readthedocs.io/en/latest/release_notes.html>`_\nfor detailed instructions on how to safely perform the upgrade.\n\nAdvanced Usage\n==============\nDax usage\n\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.indexes import GlobalSecondaryIndex, AllProjection\n    from pynamodb.attributes import NumberAttribute, UnicodeAttribute\n\n    class UserModel(Model):\n        \"\"\"\n        A DynamoDB User\n        \"\"\"\n        class Meta:\n            table_name = \"dynamodb-user\"\n            dax_read_endpoints = ['xxxx:8111']\n            dax_write_endpoints = ['xxxx:8111']\n        email = UnicodeAttribute(null=True)\n        first_name = UnicodeAttribute(range_key=True)\n        last_name = UnicodeAttribute(hash_key=True)\n\nWant to use indexes? No problem:\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.indexes import GlobalSecondaryIndex, AllProjection\n    from pynamodb.attributes import NumberAttribute, UnicodeAttribute\n\n    class ViewIndex(GlobalSecondaryIndex):\n        class Meta:\n            read_capacity_units = 2\n            write_capacity_units = 1\n            projection = AllProjection()\n        view = NumberAttribute(default=0, hash_key=True)\n\n    class TestModel(Model):\n        class Meta:\n            table_name = \"TestModel\"\n        forum = UnicodeAttribute(hash_key=True)\n        thread = UnicodeAttribute(range_key=True)\n        view = NumberAttribute(default=0)\n        view_index = ViewIndex()\n\nNow query the index for all items with 0 views:\n\n.. code-block:: python\n\n    for item in TestModel.view_index.query(0):\n        print(\"Item queried from index: {0}\".format(item))\n\nIt's really that simple.\n\n\nWant to use DynamoDB local? Just add a ``host`` name attribute and specify your local server.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n\n    class UserModel(Model):\n        \"\"\"\n        A DynamoDB User\n        \"\"\"\n        class Meta:\n            table_name = \"dynamodb-user\"\n            host = \"http://localhost:8000\"\n        email = UnicodeAttribute(null=True)\n        first_name = UnicodeAttribute(range_key=True)\n        last_name = UnicodeAttribute(hash_key=True)\n\nWant to enable streams on a table? Just add a ``stream_view_type`` name attribute and specify\nthe type of data you'd like to stream.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n    from pynamodb.constants import STREAM_NEW_AND_OLD_IMAGE\n\n    class AnimalModel(Model):\n        \"\"\"\n        A DynamoDB Animal\n        \"\"\"\n        class Meta:\n            table_name = \"dynamodb-user\"\n            host = \"http://localhost:8000\"\n            stream_view_type = STREAM_NEW_AND_OLD_IMAGE\n        type = UnicodeAttribute(null=True)\n        name = UnicodeAttribute(range_key=True)\n        id = UnicodeAttribute(hash_key=True)\n\nFeatures\n========\n\n* Python >= 3.7 support\n* An ORM-like interface with query and scan filters\n* Compatible with DynamoDB Local\n* Supports the entire DynamoDB API\n* Support for Unicode, Binary, JSON, Number, Set, and UTC Datetime attributes\n* Support for Global and Local Secondary Indexes\n* Provides iterators for working with queries, scans, that are automatically paginated\n* Automatic pagination for bulk operations\n* Complex queries\n* Batch operations with automatic pagination\n* Iterators for working with Query and Scan operations\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thanakijwanavit/PynamoDB",
    "keywords": "python dynamodb amazon dax",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynamodb-dax-test",
    "package_url": "https://pypi.org/project/pynamodb-dax-test/",
    "platform": null,
    "project_url": "https://pypi.org/project/pynamodb-dax-test/",
    "project_urls": {
      "Homepage": "https://github.com/thanakijwanavit/PynamoDB"
    },
    "release_url": "https://pypi.org/project/pynamodb-dax-test/6.0a0/",
    "requires_dist": [
      "botocore (>=1.12.54)",
      "python-dateutil (<3.0.0,>=2.1)",
      "amazon-dax-client (>=1.1.7typing-extensions>=4) ; python_version < \"3.11\"",
      "blinker (<2.0,>=1.3) ; extra == 'signals'"
    ],
    "requires_python": "",
    "summary": "fork to pynamodb for supporting dax",
    "version": "6.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16741676,
  "releases": {
    "6.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7a595e42cfae60a5af21db2b873a3cdaa3e4954b3ffbf627966726df4167699",
          "md5": "e4cc798f1abb73869dcadaa999b923dd",
          "sha256": "337eaa347abb1dc7378f5ee100020cc35223b4fd26b2a9a24f3f52e3c063f958"
        },
        "downloads": -1,
        "filename": "pynamodb_dax_test-6.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4cc798f1abb73869dcadaa999b923dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 128840,
        "upload_time": "2023-02-08T03:33:23",
        "upload_time_iso_8601": "2023-02-08T03:33:23.404619Z",
        "url": "https://files.pythonhosted.org/packages/b7/a5/95e42cfae60a5af21db2b873a3cdaa3e4954b3ffbf627966726df4167699/pynamodb_dax_test-6.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab2f4e0657ee045543bc0e035880844ea9e9748d018c2bba3d883087f37334f8",
          "md5": "bc142eac898134d84f45f96815b7bb5d",
          "sha256": "6726c8db26c0af3a88aff355d8b79aaa9d8dde495d6b2c7c96f0b222b9af2cdc"
        },
        "downloads": -1,
        "filename": "pynamodb-dax-test-6.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc142eac898134d84f45f96815b7bb5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 114931,
        "upload_time": "2023-02-08T03:33:25",
        "upload_time_iso_8601": "2023-02-08T03:33:25.908694Z",
        "url": "https://files.pythonhosted.org/packages/ab/2f/4e0657ee045543bc0e035880844ea9e9748d018c2bba3d883087f37334f8/pynamodb-dax-test-6.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7a595e42cfae60a5af21db2b873a3cdaa3e4954b3ffbf627966726df4167699",
        "md5": "e4cc798f1abb73869dcadaa999b923dd",
        "sha256": "337eaa347abb1dc7378f5ee100020cc35223b4fd26b2a9a24f3f52e3c063f958"
      },
      "downloads": -1,
      "filename": "pynamodb_dax_test-6.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4cc798f1abb73869dcadaa999b923dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 128840,
      "upload_time": "2023-02-08T03:33:23",
      "upload_time_iso_8601": "2023-02-08T03:33:23.404619Z",
      "url": "https://files.pythonhosted.org/packages/b7/a5/95e42cfae60a5af21db2b873a3cdaa3e4954b3ffbf627966726df4167699/pynamodb_dax_test-6.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab2f4e0657ee045543bc0e035880844ea9e9748d018c2bba3d883087f37334f8",
        "md5": "bc142eac898134d84f45f96815b7bb5d",
        "sha256": "6726c8db26c0af3a88aff355d8b79aaa9d8dde495d6b2c7c96f0b222b9af2cdc"
      },
      "downloads": -1,
      "filename": "pynamodb-dax-test-6.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc142eac898134d84f45f96815b7bb5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 114931,
      "upload_time": "2023-02-08T03:33:25",
      "upload_time_iso_8601": "2023-02-08T03:33:25.908694Z",
      "url": "https://files.pythonhosted.org/packages/ab/2f/4e0657ee045543bc0e035880844ea9e9748d018c2bba3d883087f37334f8/pynamodb-dax-test-6.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}