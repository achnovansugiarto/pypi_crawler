{
  "info": {
    "author": "Benjamin F. Maier",
    "author_email": "contact@benmaier.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": ".. image:: https://github.com/benmaier/epipack/raw/master/img/logo_12_lila_medium.png\n   :alt: logo\n\nFast prototyping of epidemiological models based on reaction equations.\nAnalyze the ODEs analytically or numerically, or run/animate stochastic\nsimulations on networks/well-mixed systems.\n\n-  repository: https://github.com/benmaier/epipack/\n-  documentation: http://epipack.benmaier.org/\n\n.. code:: python\n\n   import epipack as epk\n   from epipack.vis import visualize\n   import netwulf as nw\n\n   network, _, __ = nw.load('cookbook/readme_vis/MHRN.json')\n   N = len(network['nodes'])\n   links = [ (l['source'], l['target'], 1.0) for l in network['links'] ]\n\n   S, I, R = list(\"SIR\")\n   model = epk.StochasticEpiModel([S,I,R],N,links)\\\n               .set_link_transmission_processes([ (I, S, 1.0, I, I) ])\\\n               .set_node_transition_processes([ (I, 1.0, R) ])\\\n               .set_random_initial_conditions({ S: N-5, I: 5 })\n\n   visualize(model, network, sampling_dt=0.1)\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/SIR_example.gif\n   :alt: sir-example\n\nIdea\n----\n\nSimple compartmental models of infectious diseases are useful to\ninvestigate effects of certain processes on disease dissemination. Using\npen and paper, quickly adding/removing compartments and transition\nprocesses is easy, yet the analytical and numerical analysis or\nstochastic simulations can be tedious to set up and debug—especially\nwhen the model changes (even slightly). ``epipack`` aims at streamlining\nthis process such that all the analysis steps can be performed in an\nefficient manner, simply by defining processes based on reaction\nequations. ``epipack`` provides three main base classes to accomodate\ndifferent problems.\n\n-  ``EpiModel``: Define a model based on transition, birth, death,\n   fission, fusion, or transmission reactions, integrate the ordinary\n   differential equations (ODEs) of the corresponding well-mixed system\n   numerically or simulate it using Gillespie's algorithm. Process rates\n   can be numerical functions of time and the system state.\n-  ``SymbolicEpiModel``: Define a model based on transition, birth,\n   death, fission, fusion, or transmission reactions. Obtain the ODEs,\n   fixed points, Jacobian, and the Jacobian's eigenvalues at fixed\n   points as symbolic expressions. Process rates can be symbolic\n   expressions of time and the system state. Set numerical parameter\n   values and integrate the ODEs numerically or simulate the stochastic\n   systems using Gillespie's algorithm.\n-  ``StochasticEpiModel``: Define a model based on node transition and\n   link transmission reactions. Add conditional link transmission\n   reactions. Simulate your model on any (un-/)directed, (un-/)weighted\n   static/temporal network, or in a well-mixed system.\n\nAdditionally, epipack provides a visualization framework to animate\nstochastic simulations on networks, lattices, well-mixed systems, or\nreaction-diffusion systems based on ``MatrixEpiModel``.\n\nCheck out the `Example <#examples>`__ section for some demos.\n\nNote that the internal simulation algorithm for network simulations is\nbased on the following paper:\n\n\"Efficient sampling of spreading processes on complex networks using a\ncomposition and rejection algorithm\", G.St-Onge, J.-G. Young, L.\nHébert-Dufresne, and L. J. Dubé, Comput. Phys. Commun. 240, 30-37\n(2019), http://arxiv.org/abs/1808.05859.\n\nInstall\n-------\n\n.. code:: bash\n\n   pip install epipack\n\n``epipack`` was developed and tested for\n\n-  Python 3.6\n-  Python 3.7\n-  Python 3.8\n\nSo far, the package's functionality was tested on Mac OS X and CentOS\nonly.\n\nDependencies\n------------\n\n``epipack`` directly depends on the following packages which will be\ninstalled by ``pip`` during the installation process\n\n-  ``numpy>=1.17``\n-  ``scipy>=1.3``\n-  ``sympy==1.6``\n-  ``pyglet<1.6``\n-  ``matplotlib>=3.0.0``\n-  ``ipython>=7.14.0``\n-  ``ipywidgets>=7.5.1``\n\nPlease note that **fast network simulations are only available if you\ninstall**\n\n-  ``SamplableSet==2.0``\n   (`SamplableSet <http://github.com/gstonge/SamplableSet>`__)\n\n**manually** (pip won't do it for you).\n\nDocumentation\n-------------\n\nThe full documentation is available at\n`epipack.benmaier.org <http://epipack.benmaier.org>`__.\n\nChangelog\n---------\n\nChanges are logged in a `separate\nfile <https://github.com/benmaier/epipack/blob/master/CHANGELOG.md>`__.\n\nLicense\n-------\n\nThis project is licensed under the `MIT\nLicense <https://github.com/benmaier/epipack/blob/master/LICENSE>`__.\nNote that this excludes any images/pictures/figures shown here or in the\ndocumentation.\n\nContributing\n------------\n\nIf you want to contribute to this project, please make sure to read the\n`code of\nconduct <https://github.com/benmaier/epipack/blob/master/CODE_OF_CONDUCT.md>`__\nand the `contributing\nguidelines <https://github.com/benmaier/epipack/blob/master/CONTRIBUTING.md>`__.\nIn case you're wondering about what to contribute, we're always\ncollecting ideas of what we want to implement next in the `outlook\nnotes <https://github.com/benmaier/epipack/blob/master/OUTLOOK.md>`__.\n\n|Contributor Covenant|\n\nExamples\n--------\n\nLet's define an SIRS model with infection rate ``eta``, recovery rate\n``rho``, and waning immunity rate ``omega`` and analyze the system\n\nPure Numeric Models\n~~~~~~~~~~~~~~~~~~~\n\nBasic Definition (EpiModel)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDefine a pure numeric model with ``EpiModel``. Integrate the ODEs or\nsimulate the system stochastically.\n\n.. code:: python\n\n   from epipack import EpiModel\n   import matplotlib.pyplot as plt\n   import numpy as np\n\n   S, I, R = list(\"SIR\")\n   N = 1000\n\n   SIRS = EpiModel([S,I,R],N)\\\n       .set_processes([\n           #### transmission process ####\n           # S + I (eta=2.5/d)-> I + I\n           (S, I, 2.5, I, I),\n\n           #### transition processes ####\n           # I (rho=1/d)-> R\n           # R (omega=1/14d)-> S\n           (I, 1, R),\n           (R, 1/14, S),\n       ])\\\n       .set_initial_conditions({S:N-10, I:10})\n\n   t = np.linspace(0,40,1000) \n   result_int = SIRS.integrate(t)\n   t_sim, result_sim = SIRS.simulate(t[-1])\n\n   for C in SIRS.compartments:\n       plt.plot(t, result_int[C])\n       plt.plot(t_sim, result_sim[C])\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/numeric_model.png\n   :alt: numeric-model\n\nFunctional Rates\n^^^^^^^^^^^^^^^^\n\nIt's also straight-forward to define temporally varying (functional)\nrates.\n\n.. code:: python\n\n   import numpy as np\n   from epipack import SISModel\n\n   N = 100\n   recovery_rate = 1.0\n\n   def infection_rate(t, y, *args, **kwargs):\n       return 3 + np.sin(2*np.pi*t/100)\n\n   SIS = SISModel(\n               infection_rate=infection_rate, \n               recovery_rate=recovery_rate,\n               initial_population_size=N\n               )\\\n           .set_initial_conditions({\n               'S': 90,\n               'I': 10,\n           })\n\n   t = np.arange(200)\n   result_int = SIS.integrate(t)\n   t_sim, result_sim = SIS.simulate(199)\n\n   for C in SIS.compartments:\n       plt.plot(t_sim, result_sim[C])\n       plt.plot(t, result_int[C])\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/numeric_model_time_varying_rate.png\n   :alt: numeric-model-time-varying\n\nSymbolic Models\n~~~~~~~~~~~~~~~\n\nBasic Definition\n^^^^^^^^^^^^^^^^\n\nSymbolic models are more powerful because they can do the same as the\npure numeric models while also offering the possibility to do analytical\nevaluations\n\n.. code:: python\n\n   from epipack import SymbolicEpiModel\n   import sympy as sy\n\n   S, I, R, eta, rho, omega = sy.symbols(\"S I R eta rho omega\")\n\n   SIRS = SymbolicEpiModel([S,I,R])\\\n       .set_processes([\n           (S, I, eta, I, I),\n           (I, rho, R),\n           (R, omega, S),\n       ])    \n\nAnalytical Evaluations\n^^^^^^^^^^^^^^^^^^^^^^\n\nPrint the ODE system in a Jupyter notebook\n\n.. code:: python\n\n   >>> SIRS.ODEs_jupyter()\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/ODEs.png\n   :alt: ODEs\n\nGet the Jacobian\n\n.. code:: python\n\n   >>> SIRS.jacobian()\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/jacobian.png\n   :alt: Jacobian\n\nFind the fixed points\n\n.. code:: python\n\n   >>> SIRS.find_fixed_points()\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/fixed_points.png\n   :alt: fixedpoints\n\nGet the eigenvalues at the disease-free state in order to find the\nepidemic threshold\n\n.. code:: python\n\n   >>> SIRS.get_eigenvalues_at_disease_free_state()\n   {-omega: 1, eta - rho: 1, 0: 1}\n\nNumerical Evaluations\n^^^^^^^^^^^^^^^^^^^^^\n\nSet numerical parameter values and integrate the ODEs numerically\n\n.. code:: python\n\n   >>> SIRS.set_parameter_values({eta: 2.5, rho: 1.0, omega:1/14})\n   >>> t = np.linspace(0,40,1000)\n   >>> result = SIRS.integrate(t)\n\nIf set up as\n\n.. code:: python\n\n   >>> N = 10000\n   >>> SIRS = SymbolicEpiModel([S,I,R],N)\n\nthe system can simulated directly.\n\n.. code:: python\n\n   >>> t_sim, result_sim = SIRS.simulate(40)\n\nTemporally Varying Rates\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nLet's set up some temporally varying rates\n\n.. code:: python\n\n   from epipack import SymbolicEpiModel\n   import sympy as sy\n\n   S, I, R, eta, rho, omega, t, T = \\\n           sy.symbols(\"S I R eta rho omega t T\")\n\n   N = 1000\n   SIRS = SymbolicEpiModel([S,I,R],N)\\\n       .set_processes([\n           (S, I, 2+sy.cos(2*sy.pi*t/T), I, I),\n           (I, rho, R),\n           (R, omega, S),\n       ])  \n\n   SIRS.ODEs_jupyter()\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/SIRS-forced-ODEs.png\n   :alt: SIRS-forced-ODEs\n\nNow we can integrate the ODEs or simulate the system using Gillespie's\nSSA for inhomogeneous Poisson processes.\n\n.. code:: python\n\n   import numpy as np\n\n   SIRS.set_parameter_values({\n       rho : 1,\n       omega : 1/14,\n       T : 100,\n   })\n   SIRS.set_initial_conditions({S:N-100, I:100})\n   _t = np.linspace(0,200,1000)\n   result = SIRS.integrate(_t)\n   t_sim, result_sim = SIRS.simulate(max(_t))\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/symbolic_model_time_varying_rate.png\n   :alt: SIRS-forced-results\n\nInteractive Analyses\n^^^^^^^^^^^^^^^^^^^^\n\n``epipack`` offers a classs called ``InteractiveIntegrator`` that allows\nan interactive exploration of a system in a Jupyter notebook.\n\nMake sure to first run\n\n.. code:: bash\n\n   %matplotlib widget\n\nin a cell.\n\n.. code:: python\n\n   from epipack import SymbolicEpiModel\n   from epipack.interactive import InteractiveIntegrator, Range, LogRange\n   import sympy\n\n   S, I, R, R0, tau, omega = sympy.symbols(\"S I R R_0 tau omega\")\n\n   I0 = 0.01\n   model = SymbolicEpiModel([S,I,R])\\\n                .set_processes([\n                       (S, I, R0/tau, I, I),\n                       (I, 1/tau, R),\n                       (R, omega, S),\n                   ])\\\n                .set_initial_conditions({S:1-I0, I:I0})\n\n   # define a log slider, a linear slider and a constant value\n   parameters = {\n       R0: LogRange(min=0.1,max=10,step_count=1000),\n       tau: Range(min=0.1,max=10,value=8.0),\n       omega: 1/14\n   }\n\n   t = np.logspace(-3,2,1000)\n   InteractiveIntegrator(model, parameters, t, figsize=(4,4))\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/interactive.gif\n   :alt: interactive\n\nPure Stochastic Models\n~~~~~~~~~~~~~~~~~~~~~~\n\nOn a Network\n^^^^^^^^^^^^\n\nLet's simulate an SIRS system on a random graph (using the parameter\ndefinitions above).\n\n.. code:: python\n\n   from epipack import StochasticEpiModel\n   import networkx as nx\n\n   k0 = 50\n   R0 = 2.5\n   rho = 1\n   eta = R0 * rho / k0\n   omega = 1/14\n   N = int(1e4)\n   edges = [ (e[0], e[1], 1.0) for e in \\\n             nx.fast_gnp_random_graph(N,k0/(N-1)).edges() ]\n\n   SIRS = StochasticEpiModel(\n               compartments=list('SIR'),\n               N=N,\n               edge_weight_tuples=edges\n               )\\\n           .set_link_transmission_processes([\n               ('I', 'S', eta, 'I', 'I'),\n           ])\\\n           .set_node_transition_processes([\n               ('I', rho, 'R'),\n               ('R', omega, 'S'),\n           ])\\        \n           .set_random_initial_conditions({\n                                           'S': N-100,\n                                           'I': 100\n                                          })\n   t_s, result_s = SIRS.simulate(40)\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/network_simulation.png\n   :alt: network-simulation\n\nVisualize\n^^^^^^^^^\n\nLikewise, it's straight-forward to visualize this system\n\n.. code:: python\n\n   >>> from epipack.vis import visualize\n   >>> from epipack.networks import get_random_layout\n   >>> layouted_network = get_random_layout(N, edges)\n   >>> visualize(SIRS, layouted_network, sampling_dt=0.1, config={'draw_links': False})\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/SIRS_visualization.gif\n   :alt: sirs-example\n\nOn a Lattice\n^^^^^^^^^^^^\n\nA lattice is nothing but a network, we can use ``get_grid_layout`` and\n``get_2D_lattice_links`` to set up a visualization.\n\n.. code:: python\n\n   from epipack.vis import visualize\n   from epipack import (\n       StochasticSIRModel, \n       get_2D_lattice_links, \n       get_grid_layout\n   )\n\n   # define links and network layout\n   N_side = 100\n   N = N_side**2\n   links = get_2D_lattice_links(N_side, periodic=True, diagonal_links=True)\n   lattice = get_grid_layout(N)\n\n   # define model\n   R0 = 3; recovery_rate = 1/8\n   model = StochasticSIRModel(N,R0,recovery_rate,\n                              edge_weight_tuples=links)\n   model.set_random_initial_conditions({'I':20,'S':N-20})\n\n   sampling_dt = 1\n\n   visualize(model,lattice,sampling_dt,\n           config={\n                    'draw_nodes_as_rectangles':True,\n                    'draw_links':False,\n                  }\n             )\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/SIR_lattice_vis.gif\n   :alt: sir-lattice\n\nReaction-Diffusion Models\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSince reaction-diffusion systems in discrete space can be interpreted as\nbeing based on reaction equations, we can set those up using\n``epipack``'s framework.\n\nCheckout the docs on `Reaction-Diffusion\nSystems <http://epipack.benmaier.org/tutorial/reaction_diffusion.html>`__.\n\nEvery node in a network is associated with a compartment and we're using\n``MatrixEpiModel`` because it's faster than ``EpiModel``.\n\n.. code:: python\n\n   from epipack import MatrixEpiModel\n\n   N = 100\n   base_compartments = list(\"SIR\")\n   compartments = [ (node, C) for node in range(N) for C in base_compartments ]\n   model = MatrixEpiModel(compartments)\n\nNow, we define both epidemiological and movement processes on a\nhypothetical list ``links``.\n\n.. code:: python\n\n   infection_rate = 2\n   recovery_rate = 1\n   mobility_rate = 0.1\n\n   quadratic_processes = []\n   linear_processes = []\n\n   for node in range(N):\n       quadratic_processes.append(\n               (  (node, \"S\"), (node, \"I\"), infection_rate, (node, \"I\"), (node, \"I\") ),\n           )\n\n       linear_processes.append(\n                 ( (node, \"I\"), recovery_rate, (node, \"R\") ) \n           )\n\n   for u, v, w in links:\n       for C in base_compartments:\n\n           linear_processes.extend([\n                     ( (u, C), w*mobility_rate, (v, C) ),\n                     ( (v, C), w*mobility_rate, (u, C) ),\n               ])\n\n.. image:: https://github.com/benmaier/epipack/raw/master/img/reac_diff_lattice.gif\n   :alt: reac-diff-lattice\n\nDev notes\n---------\n\nFork this repository, clone it, and install it in dev mode.\n\n.. code:: bash\n\n   git clone git@github.com:YOURUSERNAME/epipack.git\n   make\n\nIf you want to upload to PyPI, first convert the new ``README.md`` to\n``README.rst``\n\n.. code:: bash\n\n   make readme\n\nIt will give you warnings about bad ``.rst``-syntax. Fix those errors in\n``README.rst``. Then wrap the whole thing\n\n.. code:: bash\n\n   make pypi\n\nIt will probably give you more warnings about ``.rst``-syntax. Fix those\nuntil the warnings disappear. Then do\n\n.. code:: bash\n\n   make upload\n\n.. |Contributor Covenant| image:: https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg\n   :target: code-of-conduct.md",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benmaier/epipack",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "epipack",
    "package_url": "https://pypi.org/project/epipack/",
    "platform": "",
    "project_url": "https://pypi.org/project/epipack/",
    "project_urls": {
      "Bug Reports": "https://github.com/benmaier/epipack/issues",
      "Contributing Statement": "https://github.com/benmaier/epipack/blob/master/CONTRIBUTING.md",
      "Documentation": "http://epipack.benmaier.org",
      "Homepage": "https://github.com/benmaier/epipack",
      "PyPI": "https://pypi.org/project/epipack/",
      "Source": "https://github.com/benmaier/epipack/"
    },
    "release_url": "https://pypi.org/project/epipack/0.1.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Fast prototyping of epidemiological models based on reaction equations. Analyze the ODEs analytically or numerically, or run stochastic simulations on networks/well-mixed systems.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10594376,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2870126057a88272b73c115f4f6110565a281a28c51da2aa51fb3cac8fe27fe0",
          "md5": "ba04ca3a94aac6c9eea871906267c4b4",
          "sha256": "720982235568f075f5236876b23257a4aef00bc870639e81a54353843ffd4422"
        },
        "downloads": -1,
        "filename": "epipack-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba04ca3a94aac6c9eea871906267c4b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 82438,
        "upload_time": "2020-10-22T15:24:10",
        "upload_time_iso_8601": "2020-10-22T15:24:10.748944Z",
        "url": "https://files.pythonhosted.org/packages/28/70/126057a88272b73c115f4f6110565a281a28c51da2aa51fb3cac8fe27fe0/epipack-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b109490db56996bc4a4aa1aabf02911397796dba75c496e71610fb6d78522e1b",
          "md5": "3254917b09db54c012633e17b5943ee5",
          "sha256": "885fc3e952aa4e700892ecae3ff8146b4b9d86acba4b9a18734fb84627502bc5"
        },
        "downloads": -1,
        "filename": "epipack-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3254917b09db54c012633e17b5943ee5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 85779,
        "upload_time": "2021-04-01T08:02:14",
        "upload_time_iso_8601": "2021-04-01T08:02:14.046784Z",
        "url": "https://files.pythonhosted.org/packages/b1/09/490db56996bc4a4aa1aabf02911397796dba75c496e71610fb6d78522e1b/epipack-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae1f9b10a1fcdeac116be125aebcbf08e1ccd6de6e60aa81519863eccb252932",
          "md5": "3e2e7abaa03739ab908115846e9bb0b8",
          "sha256": "5e85350fce508c74470c8139fd1d4e164d6bd9bf1c96ad2bb8d2c94c488d28ec"
        },
        "downloads": -1,
        "filename": "epipack-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3e2e7abaa03739ab908115846e9bb0b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 85688,
        "upload_time": "2021-04-07T08:11:35",
        "upload_time_iso_8601": "2021-04-07T08:11:35.532099Z",
        "url": "https://files.pythonhosted.org/packages/ae/1f/9b10a1fcdeac116be125aebcbf08e1ccd6de6e60aa81519863eccb252932/epipack-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7f708101d3fe2c95982bd455c385b4e695761d8522a8b9b01449ee62968f67e",
          "md5": "e2b928a4ac13bc9880776758da11b499",
          "sha256": "08cc8291f36991c80230c8bb56451b8c8996e9e12628969fa28c23097b2d206d"
        },
        "downloads": -1,
        "filename": "epipack-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e2b928a4ac13bc9880776758da11b499",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92671,
        "upload_time": "2021-05-18T17:14:47",
        "upload_time_iso_8601": "2021-05-18T17:14:47.855704Z",
        "url": "https://files.pythonhosted.org/packages/d7/f7/08101d3fe2c95982bd455c385b4e695761d8522a8b9b01449ee62968f67e/epipack-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ffe9763fdaa2f5c14d217a2fa9be0d4e506cf7ef1f9fe9c401d209d0fbd2a66",
          "md5": "1de0468d88232f17365bf91f7d039131",
          "sha256": "398b8cd08121eb4955afa871723847ab28de57d6d9e98d496fa7ad903c734d52"
        },
        "downloads": -1,
        "filename": "epipack-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1de0468d88232f17365bf91f7d039131",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 93426,
        "upload_time": "2021-06-08T21:32:22",
        "upload_time_iso_8601": "2021-06-08T21:32:22.893522Z",
        "url": "https://files.pythonhosted.org/packages/4f/fe/9763fdaa2f5c14d217a2fa9be0d4e506cf7ef1f9fe9c401d209d0fbd2a66/epipack-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ffe9763fdaa2f5c14d217a2fa9be0d4e506cf7ef1f9fe9c401d209d0fbd2a66",
        "md5": "1de0468d88232f17365bf91f7d039131",
        "sha256": "398b8cd08121eb4955afa871723847ab28de57d6d9e98d496fa7ad903c734d52"
      },
      "downloads": -1,
      "filename": "epipack-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1de0468d88232f17365bf91f7d039131",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 93426,
      "upload_time": "2021-06-08T21:32:22",
      "upload_time_iso_8601": "2021-06-08T21:32:22.893522Z",
      "url": "https://files.pythonhosted.org/packages/4f/fe/9763fdaa2f5c14d217a2fa9be0d4e506cf7ef1f9fe9c401d209d0fbd2a66/epipack-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}