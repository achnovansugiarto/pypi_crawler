{
  "info": {
    "author": "Tom Wiesing",
    "author_email": "tkw01536@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "GitManager\n==========\n\n|Build Status| |PyPI version|\n\nA script that can handle multiple Git repositories locally. Written in\nPython, supports version 3.5 and upwards.\n\nInstallation\n------------\n\nMake sure python is installed, then run\n\n.. code:: bash\n\n    # install from a clone of the repository\n    python setup.py install\n\nor\n\n.. code:: bash\n\n    # install from PyPi\n    pip install git_manager\n\nto install the package. This will make it available by running\n:code:`git-manager` (or :code:`git manager`).\n\nConfiguration\n-------------\n\nGit Manager can be configured through its configuration file. In order,\nit looks for the configuration file in the following locations:\n\n1. :code:`$GIT_MANAGER_CONFIG` (if set)\n2. :code:`~/.config/.gitmanager/config` (or\n   :code:`$XDG_CONFIG_HOME/.gitmanager/config` if set)\n3. :code:`~/.gitmanager`\n\nThe configuration file is parsed line-by-line and declares which\nrepositories are under GitManager control. It consists of three\ndifferent types of directives:\n\n1. **Root Line** Configure the root folder to clone repositories to\n   automatically. Starts with two hashes, then sets the folder relative\n   to the users home directory. For example:\n\n   .. code:: text\n\n       ## /opt/repositories\n\n2. **Comments** Anything starting with a “#” will be treated as a\n   comment. The same goes for empty (or whitespace-only) lines.\n3. **Repository instruction** To declare a repository write\n   :code:`REPOSITORY_URL  [FOLDER]`. This declares that the repository\n   from `REPOSITORY_URL` should be cloned into the folder `FOLDER`.\n   In case the folder is omitted, the ‘humanish’ part of the URI will be\n   taken automatically. All folder paths by default are relative to the\n   users home folder, but this can be changed with the instruction\n   below. Example:\n\n   .. code:: text\n\n      # makes the git/git repository available locally\n      # in the folder ~/Projects/git\n      https://github.com/git/git Projects/git\n\n      # makes the GitManager repository available\n      # in the folder ~/GitManager\n      https://github.com/tkw1536/GitManager\n\n4. **Group Instruction** In the case where multiple repositories should\n   be cloned into the same folder, it is inconvenient to always give the\n   full path to that folder in the configuration file. For this reason\n   GitManager supports the concept of a group. A group can be started by\n   prefixing a line with the “>” character. A group takes one argument.\n   A path to a folder all repositories should be cloned into. This is\n   best illustrated in the form of an example:\n\n   .. code:: text\n\n      # We can create a group to store all our atom-related projects.\n      # All repositories are automatically available in the ~/AtomProjects\n      # folder.\n      > AtomProjects\n        https://github.com/atom/atom\n        https://github.com/atom/markdown-preview\n\n      # makes the GitManager repository available\n      # in the folder ~/GitManager\n      https://github.com/tkw1536/GitManager\n\n   Groups completely support nesting. A sub-groups path and\n   pattern for origin are relative to the parent group. To create a\n   sub-group, add another “>” character in front of the line.\n\nAn example configuration file can be found in the file\n`config_example <config_example>`__.\n\nInstalling Repositories Locally\n-------------------------------\n\nSetup\n~~~~~\n\n.. image:: examples/setup.gif\n\nUse :code:`git-manager setup [pattern]` to clone repositories in the config file to the local disk. \nUse the optional pattern argument to restrict the reposiories to install. \n\nClone\n~~~~~\n\n.. image:: examples/clone.gif\n\nUse :code:`git-manager clone [--save] url` to automatically clone a repository into a location determined by the URL. \nUse the :code:`--save` flag to automatically update the config file. \n\n\nReconfigure\n~~~~~~~~~~~\n\n.. image:: examples/reconfigure.gif\n\nUse :code:`git-manager reconfigure` to automatically add repositories found in folder and it's subdirectories to the configuration file. \n\n\nViewing Local Repositories\n--------------------------\n\nList\n~~~~\n\n.. image:: examples/ls.gif\n\nUse :code:`git-manager ls [pattern]` to list local repositories. \nUse the optional pattern argument to restrict the repositories to list. \n\nStatus\n~~~~~~\n\n.. image:: examples/status.gif\n\nUse :code:`git-manager status [pattern]` to show the status of local repositories.  \nUse the optional pattern argument to restrict the repositories to check. \n\nState\n~~~~~~\n\n.. image:: examples/state.gif\n\nUse :code:`git-manager state [pattern]` to compare local repositories with their remote counterpart. \nUse the optional pattern argument to restrict the repositories to check. \n\nUpdating Local Repositories\n---------------------------\n\nPull\n~~~~\n\n.. image:: examples/pull.gif\n\nUse :code:`git-manager pull [pattern]` to run :code:`git pull` on all repositories installed locally. \nUse the optional pattern argument to restrict the repositories to pull. \n\nFetch\n~~~~~\n\nUse :code:`git-manager fetch [pattern] [args...]` to run :code:`git fetch` on all repositories installed locally. \nUse the optional pattern argument to restrict the repositories to fetch. \nUse the optional remaining arguments to pass further arguments to the fetch command. \n\nPush\n~~~~\n\nUse :code:`git-manager push [pattern]` to run :code:`git push` on all repositories installed locally. \nUse the optional pattern argument to restrict the repositories to pull. \n\nGC\n~~~\n\nUse :code:`git-manager gc [pattern] [args...]` to run :code:`git gc` on all repositories installed locally. \nUse the optional pattern argument to restrict the repositories to garbage collect. \nUse the optional remaining arguments to pass further arguments to the gc command. \n\nRepository Patterns\n-------------------\n\nSome commands optionally accept the :code:`pattern` argument. This can be\nused to filter repository by their name.\n\nRepository patterns are simple `glob-like` pattern matches on\nstandardized remote URLs. They can also be normal glob patterns on full\nURLs.\n\nFor example:\n\n+--------------------------+------------------------------------------+\n| Pattern                  | Examples                                 |\n+==========================+==========================================+\n| :code:`world`            | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`https://github.com/hello/world`   |\n+--------------------------+------------------------------------------+\n| :code:`hello/*`          | :code:`git@github.com:hello/earth.git`,  |\n|                          | :code:`git@github.com:hello/mars.git`    |\n+--------------------------+------------------------------------------+\n| :code:`hello/m*`         | :code:`git@github.com:hello/mars.git`,   |\n|                          | :code:`git@github.com:hello/mercury.git` |\n+--------------------------+------------------------------------------+\n| :code:`github.com/*/*`   | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`git@github.com:bye/world.git`     |\n+--------------------------+------------------------------------------+\n| :code:`github.com/hello` | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`git@github.com:hello/mars.git`    |\n+--------------------------+------------------------------------------+\n\nDevelopment and Testing\n-----------------------\n\nThis project is unit tested with a high coverage rate. The tests can be\nrun with:\n\n.. code:: bash\n\n    nosetests --with-coverage --cover-package GitManager\n\nTests are automatically run on Travis CI after every commit.\n\nLicense\n-------\n\n::\n\n    The MIT License (MIT)\n\n    Copyright (c) 2016-18 Tom Wiesing\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n\n.. |Build Status| image:: https://travis-ci.org/tkw1536/GitManager.svg?branch=master\n   :target: https://travis-ci.org/tkw1536/GitManager\n.. |PyPI version| image:: https://badge.fury.io/py/git_manager.svg\n   :target: https://pypi.python.org/pypi/git_manager\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tkw1536/GitManager",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git_manager",
    "package_url": "https://pypi.org/project/git_manager/",
    "platform": "",
    "project_url": "https://pypi.org/project/git_manager/",
    "project_urls": {
      "Homepage": "https://github.com/tkw1536/GitManager"
    },
    "release_url": "https://pypi.org/project/git_manager/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manages multiple git repositories",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3838916,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb9a3c3bf030851d6f7a5bf4e75068a1334b653d379968beb85cad93b7789cfe",
          "md5": "9351319495e9f4d1f43b640fb502a71b",
          "sha256": "546fe391da3f87699a62847d13aad63a65aba02104710534e132176fcd0f6ba8"
        },
        "downloads": -1,
        "filename": "git_manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9351319495e9f4d1f43b640fb502a71b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19593,
        "upload_time": "2017-11-16T19:30:40",
        "upload_time_iso_8601": "2017-11-16T19:30:40.787918Z",
        "url": "https://files.pythonhosted.org/packages/bb/9a/3c3bf030851d6f7a5bf4e75068a1334b653d379968beb85cad93b7789cfe/git_manager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c92d13829455497563a799c6d35bbb517c5e686d3192466bcd819a3e29c02ca7",
          "md5": "1702535c8adee1750b56227f8720bec2",
          "sha256": "cb38f1260d214ab34814b41e964050e91ccf1c30abbb026936fff2368d18601e"
        },
        "downloads": -1,
        "filename": "git_manager-0.1.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "1702535c8adee1750b56227f8720bec2",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 61360,
        "upload_time": "2018-05-06T17:19:17",
        "upload_time_iso_8601": "2018-05-06T17:19:17.863871Z",
        "url": "https://files.pythonhosted.org/packages/c9/2d/13829455497563a799c6d35bbb517c5e686d3192466bcd819a3e29c02ca7/git_manager-0.1.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bf31df9c1bd9699838a217599956c2272b735f8ed675a2211e708f1817767b6",
          "md5": "420089f57a9cd2d1a7d2295c6a865f33",
          "sha256": "d283794eb6150d038d82cd9404dcd372939a6f022a91df18c4a6511b7b935897"
        },
        "downloads": -1,
        "filename": "git_manager-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "420089f57a9cd2d1a7d2295c6a865f33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19938,
        "upload_time": "2017-11-17T09:12:30",
        "upload_time_iso_8601": "2017-11-17T09:12:30.646464Z",
        "url": "https://files.pythonhosted.org/packages/4b/f3/1df9c1bd9699838a217599956c2272b735f8ed675a2211e708f1817767b6/git_manager-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94af39cdddec137c2769cd4285d718c5595eb43f27530bc74fdcbdd5bc8cf200",
          "md5": "038f61be0820a50b32d0a5b01168a848",
          "sha256": "65adf712b1248661d82d0363ca5e8b1b9e0743b292922df81636ae814583310c"
        },
        "downloads": -1,
        "filename": "git_manager-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "038f61be0820a50b32d0a5b01168a848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32313,
        "upload_time": "2018-05-06T17:19:16",
        "upload_time_iso_8601": "2018-05-06T17:19:16.216924Z",
        "url": "https://files.pythonhosted.org/packages/94/af/39cdddec137c2769cd4285d718c5595eb43f27530bc74fdcbdd5bc8cf200/git_manager-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97876485d70309f1ddca91735b9372e3d66173e7ceb2e1b86d358aa6925fce2e",
          "md5": "0df77451ac1415a2ba8e09ca4494a38a",
          "sha256": "13873592d4b82823896b04e7ca6db6afaa7b0e2c56cf9c98667117f7b8c2ba11"
        },
        "downloads": -1,
        "filename": "git_manager-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0df77451ac1415a2ba8e09ca4494a38a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20296,
        "upload_time": "2018-05-06T17:19:19",
        "upload_time_iso_8601": "2018-05-06T17:19:19.196779Z",
        "url": "https://files.pythonhosted.org/packages/97/87/6485d70309f1ddca91735b9372e3d66173e7ceb2e1b86d358aa6925fce2e/git_manager-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94af39cdddec137c2769cd4285d718c5595eb43f27530bc74fdcbdd5bc8cf200",
        "md5": "038f61be0820a50b32d0a5b01168a848",
        "sha256": "65adf712b1248661d82d0363ca5e8b1b9e0743b292922df81636ae814583310c"
      },
      "downloads": -1,
      "filename": "git_manager-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "038f61be0820a50b32d0a5b01168a848",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32313,
      "upload_time": "2018-05-06T17:19:16",
      "upload_time_iso_8601": "2018-05-06T17:19:16.216924Z",
      "url": "https://files.pythonhosted.org/packages/94/af/39cdddec137c2769cd4285d718c5595eb43f27530bc74fdcbdd5bc8cf200/git_manager-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97876485d70309f1ddca91735b9372e3d66173e7ceb2e1b86d358aa6925fce2e",
        "md5": "0df77451ac1415a2ba8e09ca4494a38a",
        "sha256": "13873592d4b82823896b04e7ca6db6afaa7b0e2c56cf9c98667117f7b8c2ba11"
      },
      "downloads": -1,
      "filename": "git_manager-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0df77451ac1415a2ba8e09ca4494a38a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20296,
      "upload_time": "2018-05-06T17:19:19",
      "upload_time_iso_8601": "2018-05-06T17:19:19.196779Z",
      "url": "https://files.pythonhosted.org/packages/97/87/6485d70309f1ddca91735b9372e3d66173e7ceb2e1b86d358aa6925fce2e/git_manager-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}