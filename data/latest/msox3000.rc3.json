{
  "info": {
    "author": "Stephen Goadhouse",
    "author_email": "sgoadhouse@virginia.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# msox3000\nControl of HP/Agilent/Keysight MSO-X/DSO-X 3000A Oscilloscope through python via PyVisa\n\nUsing my previous work on dcps as a guide, this is intended to be a\ngeneric package to control various Oscilloscopes. However, it is\nexpected that very few oscilloscopes share the same commands so start\noff as a python Class specifically for the MSO-X/DSO-X 3000A\nOscilloscope. So will start targeted toward that family of\noscilloscope with a common SCPI.py Class. If it proves useful for\nother oscilloscopes, then will create a new project but at least this\none would have started with that in mind.\n\nIt may also work on the MSO-X/DSO-X 2000A oscilloscope\nbut I have not looked into the differences to know for sure. Try it\nout and let me know.\n\nLike dcps, this will use the brilliant PyVISA python package along\nwith the PyVisa-PY access mode which eliminates the need for the (very\nbuggy) VISA library to be installed on your computer. \n\n# Installation\nTo install the msox3000 package, run the command:\n\n```\npython setup.py install\n```\n\nAlternatively, can add a path to this package to the environment\nvariable PYTHONPATH or even add the path to it at the start of your\npython script. Use your favorite web search engine to find out more\ndetails. If you follow this route, you will need to also install all\nof the dependant packages which are shown below under Requirements.\n\nEven better, msox3000 is on PyPi. So\nyou can simply use the following and the required dependancies should\nget installed for you:\n\n```\npip install msox3000\n```\n\n## Requirements\n* [python](http://www.python.org/)\n   * pyvisa no longer supports python 2.7+ so neither does this package - use older version of MSOX3000 if need python 2.7+\n* [pyvisa 1.11.3](https://pyvisa.readthedocs.io/en/stable/)\n* [pyvisa-py 0.5.1](https://pyvisa-py.readthedocs.io/en/latest/) \n* [argparse](https://docs.python.org/3/library/argparse.html) \n* [quantiphy 2.3.0](http://quantiphy.readthedocs.io/en/stable/) \n\nWith the use of pyvisa-py, should not have to install the National\nInstruments VISA driver.\n\n## Features\n\nThis code is not an exhaustive coverage of all available commands and\nqueries of the oscilloscopes. The features that do exist are mainly\nones that improve productivity like grabbing a screen hardcopy\ndirectly to an image file on a computer with a descriptive name. This\neliminates the need to save to a USB stick with no descriptive name,\nkeep track of which hardcopy is which and then eventually take the USB\ndrive to a computer to download and attempt to figure out which\nhardcopy is which. Likewise, I have never bothered to use signal\nlabels because the oscilloscope interface for adding the labels was\nprimitive and impractical. With this code, can now easily send labels\nfrom the computer which are easy to create and update.\n\nCurrently, this is a list of the features that are supported so far:\n\n* The only supported channels are the analog channels, '1', '2', etc., as well as 'POD1' for digital 0-7 and 'POD2' for digital 8-15\n* Reading of all available single channel measurements \n* Reading of all available DVM measurements \n* Installing measurements to statistics display\n* Reading data from statistics display\n* Screen Hardcopy to PNG image file\n* Reading actual waveform data to a csv file including for 'POD1' and 'POD2'\n* Saving oscilloscope setup to a file\n* Loading oscilloscope setup from saved file\n* Issuing Autoscale for channel(s) for all analog as well as 'POD1' and 'POD2' \n* Screen Annotation\n* Channel Labels for only the analog channels\n\nIt is expected that new interfaces will be added over time to control\nand automate the oscilloscope. The key features that would be good to\nadd next are: support for Digital/Math/etc. channels, run/stop\ncontrol, trigger setup, horizontal and vertical scale control, zoom\ncontrol\n\n## Channels\nAlmost all functions require a target channel. Once a channel is passed into a function, the object will remember it and make it the default for all subsequence function calls that do not supply a channel. The channel value is a string or can also be a list of strings, in the case of setupAutoscale(). Currently, the valid channel values are:\n* '1' for analog channel 1\n* '2' for analog channel 2\n* '3' for analog channel 3 if it exists on the oscilloscope\n* '4' for analog channel 4 if it exists on the oscilloscope\n* 'POD1' for the grouping of digital channels 0-7 on a MSO model\n* 'POD2' for the grouping of digital channels 8-15 on a MSO model\n\n## Usage and Examples\nThe code is a basic class for controlling and accessing the\nsupported oscilloscopes.\n\nThe examples are written to access the oscilloscope over\nethernet/TCPIP. So the examples need to know the IP address of your\nspecific oscilloscope. Also, PyVISA can support other access\nmechanisms, like USB. So the examples must be edited to use the\nresource string or VISA descriptor of your particular\ndevice. Alternatively, you can set an environment variable, MSOX3000\\_IP to\nthe desired resource string before running the code. If not using\nethernet to access your device, search online for the proper resource\nstring needed to access your device.\n\nFor more detailed examples, see:\n\n```\noscope.py -h\n```\n\nA basic example that installs a few measurements to the statistics\ndisplay, adds some annotations and signal labels and then saves a\nhardcopy to a file.\n\n```python\n# Lookup environment variable MSOX3000_IP and use it as the resource\n# name or use the TCPIP0 string if the environment variable does\n# not exist\nfrom msox3000 import MSOX3000\nfrom os import environ\nresource = environ.get('MSOX3000_IP', 'TCPIP0::172.16.2.13::INSTR')\n\n# create your visa instrument\ninstr = MSOX3000(resource)\ninstr.open()\n\n# set to channel 1\n#\n# NOTE: can pass channel to each method or just set it\n# once and it becomes the default for all following calls. If pass the\n# channel to a Class method call, it will become the default for\n# following method calls.\ninstr.channel = '1'\n\n# Enable output of channel, if it is not already enabled\nif not instr.isOutputOn():\n    instr.outputOn()\n\n# Install measurements to display in statistics display and also\n# return their current values here\nprint('Ch. {} Settings: {:6.4e} V  PW {:6.4e} s\\n'.\n          format(instr.channel, instr.measureVoltAverage(install=True),\n                     instr.measurePosPulseWidth(install=True)))\n\n# Add an annotation to the screen before hardcopy\ninstr.annotateColor(\"CH{}\".format(instr.channel))\ninstr.annotate('{}\\\\n{} {}'.format('Example of Annotation','for Channel',instr.channel))\n\n# Change label of the channel to \"MySig\"\ninstr.channelLabel('MySig')\n\n# Make sure the statistics display is showing for the hardcopy\ninstr._instWrite(\"SYSTem:MENU MEASure\")\ninstr._instWrite(\"MEASure:STATistics:DISPlay ON\")\n\n## Save a hardcopy of the screen to file 'outfile.png'\ninstr.hardcopy('outfile.png')\n\n# Change label back to the default and turn it off\ninstr.channelLabel('{}'.format(instr.channel))\ninstr.channelLabelOff()\n\n# Turn off the annotation\ninstr.annotateOff()\n\n# turn off the channel\ninstr.outputOff()\n\n# return to LOCAL mode\ninstr.setLocal()\n\ninstr.close()\n```\n\n## Taking it Further\nThis implements a small subset of available commands.\n\nFor information on what is possible for the HP/Agilent/Keysight MSO-X/DSO-X\n3000A, see the\n[Keysight InfiniiVision\n3000 X-Series Oscilloscopes Programming Guide](https://www.keysight.com/upload/cmc_upload/All/3000_series_prog_guide.pdf)\n\nFor what is possible with general instruments that adhere to the\nIEEE 488 SCPI specification, like the MSO-X 3000A, see the\n[SCPI 1999 Specification](http://www.ivifoundation.org/docs/scpi-99.pdf)\nand the\n[SCPI Wikipedia](https://en.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments) entry.\n\n## Contact\nPlease send bug reports or feedback to Stephen Goadhouse\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sgoadhouse/msox3000",
    "keywords": "HP,Agilent,Keysight,MSO3000,MSOX3000,DSO3000,DSOX3000PyVISA,VISA,SCPI,INSTRUMENT",
    "license": "MIT",
    "maintainer": "Stephen Goadhouse",
    "maintainer_email": "sgoadhouse@virginia.edu",
    "name": "msox3000",
    "package_url": "https://pypi.org/project/msox3000/",
    "platform": "",
    "project_url": "https://pypi.org/project/msox3000/",
    "project_urls": {
      "Homepage": "https://github.com/sgoadhouse/msox3000"
    },
    "release_url": "https://pypi.org/project/msox3000/0.4.0/",
    "requires_dist": [
      "pyvisa (>=1.11.3)",
      "pyvisa-py (>=0.5.1)",
      "argparse",
      "QuantiPhy (>=2.3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Control of HP/Agilent/Keysight MSO-X/DSO-X 3000A Oscilloscope through python via PyVisa",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9045812,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e40731ef1424587d60352aca5cf12eef33a32c87679d633525fc3e4a682199",
          "md5": "c68b559cdfcf96d189a467e3051d1e55",
          "sha256": "13fc8378d68922b67477a4ee8022e7ed5760fe272e0ff91d0a54afd1ccfd2435"
        },
        "downloads": -1,
        "filename": "msox3000-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c68b559cdfcf96d189a467e3051d1e55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17129,
        "upload_time": "2018-07-18T19:36:57",
        "upload_time_iso_8601": "2018-07-18T19:36:57.383739Z",
        "url": "https://files.pythonhosted.org/packages/a7/e4/0731ef1424587d60352aca5cf12eef33a32c87679d633525fc3e4a682199/msox3000-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65b671c02d37fd3ef19e9d720624aed046df30a9496ff07714a14f50ab8dac91",
          "md5": "3ebfd3baf6da696b85cf205cfd8ceb68",
          "sha256": "befe59204a1c8189a7d21e4baa7bddb1bac44889b73d7d065b306aa81df6303f"
        },
        "downloads": -1,
        "filename": "msox3000-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ebfd3baf6da696b85cf205cfd8ceb68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19534,
        "upload_time": "2018-07-18T19:36:58",
        "upload_time_iso_8601": "2018-07-18T19:36:58.553306Z",
        "url": "https://files.pythonhosted.org/packages/65/b6/71c02d37fd3ef19e9d720624aed046df30a9496ff07714a14f50ab8dac91/msox3000-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b6ff67a21635e71458d1564a3235cdf42a3e07682652b911793feea579a0e4d",
          "md5": "41b3520399f61258c1e200fe4cc9bbec",
          "sha256": "4b23bf37a312473c97610a45a7544cfc1d0759b75b2fc37ee9c8b35ab670e2fd"
        },
        "downloads": -1,
        "filename": "msox3000-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41b3520399f61258c1e200fe4cc9bbec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17631,
        "upload_time": "2018-07-18T22:30:55",
        "upload_time_iso_8601": "2018-07-18T22:30:55.663085Z",
        "url": "https://files.pythonhosted.org/packages/9b/6f/f67a21635e71458d1564a3235cdf42a3e07682652b911793feea579a0e4d/msox3000-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "348b46e5153121d3f090e9ea01cb7f4c9e1b6c1ea78c0fc366f64de2bfaba544",
          "md5": "6347572fd2121b930867c47b7c9422d3",
          "sha256": "be1bd85c4ea066d3045aac7e8aed314c4ccfadb2703b302c6d59cff67ebd9578"
        },
        "downloads": -1,
        "filename": "msox3000-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6347572fd2121b930867c47b7c9422d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20613,
        "upload_time": "2018-07-18T22:30:56",
        "upload_time_iso_8601": "2018-07-18T22:30:56.661174Z",
        "url": "https://files.pythonhosted.org/packages/34/8b/46e5153121d3f090e9ea01cb7f4c9e1b6c1ea78c0fc366f64de2bfaba544/msox3000-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95f5b972332e64b371d17dcf49949b96e929c64eaf9716f158e9bac64172a7d4",
          "md5": "7472a53119765247a936af95ad256889",
          "sha256": "b9717a03d7074004ac695191ae878b921e893eb7520032658ccf0bc2c1bc390e"
        },
        "downloads": -1,
        "filename": "msox3000-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7472a53119765247a936af95ad256889",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20482,
        "upload_time": "2021-01-04T04:07:49",
        "upload_time_iso_8601": "2021-01-04T04:07:49.998953Z",
        "url": "https://files.pythonhosted.org/packages/95/f5/b972332e64b371d17dcf49949b96e929c64eaf9716f158e9bac64172a7d4/msox3000-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6489b239261361f7c1b4c09abd4d33eb760a24352860443a10a3268362760b4",
          "md5": "98ce90f2699fec65146390902db0022d",
          "sha256": "f27581686cb8ef5f657726548abdbf2067b6fb149a41d63a29e0523623cca0d6"
        },
        "downloads": -1,
        "filename": "msox3000-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98ce90f2699fec65146390902db0022d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26247,
        "upload_time": "2021-01-04T04:07:51",
        "upload_time_iso_8601": "2021-01-04T04:07:51.246422Z",
        "url": "https://files.pythonhosted.org/packages/f6/48/9b239261361f7c1b4c09abd4d33eb760a24352860443a10a3268362760b4/msox3000-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95f5b972332e64b371d17dcf49949b96e929c64eaf9716f158e9bac64172a7d4",
        "md5": "7472a53119765247a936af95ad256889",
        "sha256": "b9717a03d7074004ac695191ae878b921e893eb7520032658ccf0bc2c1bc390e"
      },
      "downloads": -1,
      "filename": "msox3000-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7472a53119765247a936af95ad256889",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20482,
      "upload_time": "2021-01-04T04:07:49",
      "upload_time_iso_8601": "2021-01-04T04:07:49.998953Z",
      "url": "https://files.pythonhosted.org/packages/95/f5/b972332e64b371d17dcf49949b96e929c64eaf9716f158e9bac64172a7d4/msox3000-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6489b239261361f7c1b4c09abd4d33eb760a24352860443a10a3268362760b4",
        "md5": "98ce90f2699fec65146390902db0022d",
        "sha256": "f27581686cb8ef5f657726548abdbf2067b6fb149a41d63a29e0523623cca0d6"
      },
      "downloads": -1,
      "filename": "msox3000-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "98ce90f2699fec65146390902db0022d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26247,
      "upload_time": "2021-01-04T04:07:51",
      "upload_time_iso_8601": "2021-01-04T04:07:51.246422Z",
      "url": "https://files.pythonhosted.org/packages/f6/48/9b239261361f7c1b4c09abd4d33eb760a24352860443a10a3268362760b4/msox3000-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}