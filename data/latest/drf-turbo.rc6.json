{
  "info": {
    "author": "Michael Gendy",
    "author_email": "mngback@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "=========\ndrf-turbo\n=========\n\n\n.. image:: https://img.shields.io/pypi/v/drf-turbo.svg\n        :target: https://pypi.python.org/pypi/drf-turbo\n\n.. image:: https://img.shields.io/travis/Mng-dev-ai/drf-turbo.svg\n        :target: https://travis-ci.com/Mng-dev-ai/drf-turbo\n\n.. image:: https://readthedocs.org/projects/drf-turbo/badge/?version=latest\n        :target: https://drf-turbo.readthedocs.io/en/latest/?version=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/Mng-dev-ai/drf-turbo/shield.svg\n     :target: https://pyup.io/repos/github/Mng-dev-ai/drf-turbo/\n     :alt: Updates\n\n.. image:: https://pepy.tech/badge/drf-turbo/\n     :target: https://pepy.tech/project/drf-turbo/\n     :alt: Downloads\n\n\nOverview\n------------\ndrf-turbo is a drop-in serializer for Django REST Framework (DRF). drf-turbo serializers run around 7.75 times faster\nthan what what you get from DRF's packaged serializer.\n\n**NOTE**: It is written in Cython, which is required to build this package.\n\n\nRequirements\n------------\n\n* Django\n\n* Django REST Framework\n\n* Cython\n\n* forbiddenfruit\n\n* pyyaml(OpenAPI)\n\n* uritemplate(OpenAPI)\n\n* djangorestframework-simplejwt(OpenAPI)\n\n\nInstallation\n------------\n\n.. code-block:: console\n\n    $ pip install drf-turbo\n\nTo install Cython on MacOS `via Brew <https://formulae.brew.sh/formula/cython>`_:\n\n.. code-block:: console\n\n    $ brew install cython\n\nPerformance\n-----------\n`drf-turbo` serialization, deserialization and validation performance averages 86% faster than DRF's standard serializer.\n\nFor more details, visit the `benchmarks section <https://drf-turbo.readthedocs.io/en/latest/performance.html>`_ of the docs.\n\nDocumentation & Support\n-----------------------\nDocumentation for the project is available at https://drf-turbo.readthedocs.io.\n\nFor questions and support, use github issues\n\nExamples\n========\n\nDeclaring Serializers\n---------------------\n.. code-block:: python\n\n   from datetime import datetime\n   from django.utils.timezone import now\n   import drf_turbo as dt\n\n    class User:\n        def __init__(self, username, email,created=None):\n            self.username = username\n            self.email = email\n            self.created = created or datetime.now()\n\n    user = User(username='test' , email='test@example.com')\n\n\n\n    class UserSerializer(dt.Serializer):\n        username = dt.StrField(max_length=50)\n        email = dt.EmailField()\n        created = dt.DateTimeField()\n\n\nSerializing objects\n-------------------\n\n.. code-block:: python\n\n\n   serializer = UserSerializer(user)\n   serializer.data\n\n    # {'username': 'test', 'email': 'test@example.com', 'created': '2021-11-04T22:49:01.981127Z'}\n\n\nDeserializing objects\n---------------------\n\n.. code-block:: python\n\n    data = {'username':'new_test','email':'test2@example.com','created':now()}\n    serializer = UserSerializer(data=data)\n    serializer.is_valid()\n    # True\n    serializer.validated_data\n    # {'username': 'new_test', 'email': 'test2@example.com', 'created': datetime.datetime(2021, 11, 12, 6, 10, 44, 85118)}}\n\nValidation\n----------\n\n.. code-block:: python\n\n    serializer = UserSerializer(data={'email': 'test'})\n    serializer.is_valid()\n    # False\n    serializer.errors\n    # {'username': ['This field is required.'], 'email': ['Enter a valid email address.'],'created': ['This field is required.']}\n\n\nField-level validation\n----------------------\n\n.. code-block:: python\n\n    import drf_turbo as dt\n\n    class UserSerializer(dt.Serializer):\n        username = dt.StrField(max_length=50)\n\n        def validate_username(self, value):\n            if 'test' not in value.lower():\n                raise dt.ValidationError(\"test must be in username\")\n            return value\n\nObject-level validation\n-----------------------\n\n.. code-block:: python\n\n    import drf_turbo as dt\n\n    class CampaignSerializer(dt.Serializer):\n        start_date = dt.DateTimeField()\n        end_date = dt.DateTimeField()\n\n        def validate(self, data):\n            if data['start_date'] > data['end_date']:\n                raise dt.ValidationError(\"start_date must occur before end_date\")\n            return data\n\nNested Serializers\n------------------\n.. code-block:: python\n\n   from datetime import datetime\n   from django.utils.timezone import now\n   import drf_turbo as dt\n\n    class User:\n        def __init__(self, username, email,created=None):\n            self.username = username\n            self.email = email\n            self.created = created or datetime.now()\n\n    user = User(username='test' , email='test@example.com')\n\n    class UserSerializer(dt.Serializer):\n        username = dt.StrField(max_length=50)\n        email = dt.EmailField()\n        created = dt.DateTimeField()\n\n    class Profile :\n        def __init__(self, age=25):\n            self.age = age\n            self.user = user\n\n    profile = Profile()\n\n\n    class ProfileSerializer(dt.Serializer):\n        age = dt.IntField()\n        user = UserSerializer()\n\n\n    serializer = ProfileSerializer(profile)\n    serializer.data\n\n    # {'age' : 25 , 'user' : {'username': 'test', 'email': 'test@example.com', 'created': '2021-11-04T22:49:01.981127Z'}}\n\n\nFiltering Output\n----------------\n\ndrf-turbo provides option to enclude or exclude fields from serializer using ``only`` or ``exclude`` keywords.\n\n.. code-block:: python\n\n    serializer = UserSerializer(user,only=('id','username'))\n\n    or\n\n    serializer = ProfileSerializer(profile,exclude=('id','user__email'))\n\n    or\n\n    http://127.0.0.1:8000/user/?only=id,username\n\n\nRequired Fields\n---------------\n\nMake a field required by passing required=True. An error will be raised if the the value is missing from data during Deserializing.\n\nFor example:\n\n.. code-block:: python\n\n    class UserSerializer(dt.Serializer):\n\n        username = dt.StrField(required=True,error_messages={\"required\":\"no username\"})\n\n\n\nSpecifying Defaults\n-------------------\n\nIt will be used for the field if no input value is supplied.\n\n\nFor example:\n\n.. code-block:: python\n\n    from datetime import datetime\n\n    class UserSerializer(dt.Serializer):\n\n        birthdate = dt.DateTimeField(default=datetime(2021, 11, 05))\n\n\n\n\nModelSerializer\n---------------\n\nMapping serializer to Django model definitions.\n\nFeatures :\n\n    * It will automatically generate a set of fields for you, based on the model.\n    * It will automatically generate validators for the serializer.\n    * It includes simple default implementations of .create() and .update().\n\n.. code-block:: python\n\n    class UserSerializer(dt.ModelSerializer):\n\n        class Meta :\n            model = User\n            fields = ('id','username','email')\n\nYou can also set the fields attribute to the special value ``__all__``  to indicate that all fields in the model should be used.\n\nFor example:\n\n.. code-block:: python\n\n    class UserSerializer(dt.ModelSerializer):\n\n        class Meta :\n            model = User\n            fields = '__all__'\n\nYou can set the exclude attribute to a list of fields to be excluded from the serializer.\n\nFor example:\n\n.. code-block:: python\n\n    class UserSerializer(dt.ModelSerializer):\n\n        class Meta :\n            model = User\n            exclude = ('email',)\n\n\nRead&Write only fields\n----------------------\n\n.. code-block:: python\n\n    class UserSerializer(dt.ModelSerializer):\n        class Meta:\n            model = User\n            fields = ('id', 'username', 'password','password_confirmation')\n            read_only_fields = ('username')\n            write_only_fields = ('password','password_confirmation')\n\n\nOpenApi(Swagger)\n----------------\n\nAdd drf-turbo to installed apps in ``settings.py``\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        # ALL YOUR APPS\n        'drf_turbo',\n    ]\n\n\nand then register our openapi AutoSchema with DRF.\n\n.. code:: python\n\n    REST_FRAMEWORK = {\n        # YOUR SETTINGS\n        'DEFAULT_SCHEMA_CLASS': 'drf_turbo.openapi.AutoSchema',\n    }\n\n\nand finally add these lines in ``urls.py``\n\n.. code:: python\n\n    from django.views.generic import TemplateView\n    from rest_framework.schemas import get_schema_view as schema_view\n    from drf_turbo.openapi import SchemaGenerator\n\n    urlpatterns = [\n        # YOUR PATTERNS\n \tpath('openapi', schema_view(\n            title=\"Your Project\",\n            description=\"API for all things â€¦\",\n            version=\"1.0.0\",\n            generator_class=SchemaGenerator,\n            public=True,\n        ), name='openapi-schema'),\n        path('docs/', TemplateView.as_view(\n            template_name='docs.html',\n            extra_context={'schema_url':'openapi-schema'}\n        ), name='swagger-ui'),\n    ]\n\nNow go to http://127.0.0.1:8000/docs\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\nLicense\n------------\n* Free software: MIT license\n\n\n=======\nHistory\n=======\n\n0.1.0 (2021-11-10)\n------------------\n\n* First release on PyPI.\n\n\n0.1.2 (2021-11-11)\n------------------\n\n* performance improvments\n\n\n0.1.3 (2021-11-12)\n------------------\n\n* fix override error messages\n\n\n0.1.5 (2021-11-21)\n------------------\n\n* fix get_attribute on related field issue\n\n0.1.6 (2022-05-29)\n------------------\n* clean project\n* drop support for renderers,parsers, and responses\n* remove deprecated methods\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Mng-dev-ai/drf-turbo",
    "keywords": "drf_turbo",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-turbo",
    "package_url": "https://pypi.org/project/drf-turbo/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-turbo/",
    "project_urls": {
      "Homepage": "https://github.com/Mng-dev-ai/drf-turbo"
    },
    "release_url": "https://pypi.org/project/drf-turbo/0.1.6/",
    "requires_dist": [
      "forbiddenfruit (>=0.1.4)",
      "djangorestframework (>=3.12.4)",
      "pyyaml (<5.4,>=5.3.1)",
      "uritemplate (>=4.1.1)",
      "cython (>=0.29.30)",
      "djangorestframework-simplejwt (>=5.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "An alternative serializer implementation for REST framework written in cython built for speed.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13967050,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "147ff4df8a400206c5c690155565b0b92187f7069b64b03b6cec0b7231425d8e",
          "md5": "bec20c6f7d93756bc33244c4cfb2bb88",
          "sha256": "a767712599aac087f5c131ed270e72c64285d75985920cbbf9970b3da5129ba1"
        },
        "downloads": -1,
        "filename": "drf-turbo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bec20c6f7d93756bc33244c4cfb2bb88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 713423,
        "upload_time": "2021-11-10T14:55:59",
        "upload_time_iso_8601": "2021-11-10T14:55:59.586512Z",
        "url": "https://files.pythonhosted.org/packages/14/7f/f4df8a400206c5c690155565b0b92187f7069b64b03b6cec0b7231425d8e/drf-turbo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fabe3fd20fab6257e43ed4bf6e41905dde3dd3e518548b6c7009bd7e769d559b",
          "md5": "a39f9e5f8431954e5c614fc371854763",
          "sha256": "c1f9f7fa4905c5a1651051546a4a99c63ca9705edab24302d45d20126ecb7eea"
        },
        "downloads": -1,
        "filename": "drf-turbo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a39f9e5f8431954e5c614fc371854763",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 720411,
        "upload_time": "2021-11-12T01:21:44",
        "upload_time_iso_8601": "2021-11-12T01:21:44.609931Z",
        "url": "https://files.pythonhosted.org/packages/fa/be/3fd20fab6257e43ed4bf6e41905dde3dd3e518548b6c7009bd7e769d559b/drf-turbo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d129a118e1942c61e567ceffccfbf4463dad42b6dcd6ba27ae2ce431da572e49",
          "md5": "3fd5a2246c20f99f9241947d7feb97c3",
          "sha256": "adba384cba6084445a3812811d380baebc94d132626de0a83e82349ac27b0093"
        },
        "downloads": -1,
        "filename": "drf-turbo-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd5a2246c20f99f9241947d7feb97c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 720593,
        "upload_time": "2021-11-12T05:16:18",
        "upload_time_iso_8601": "2021-11-12T05:16:18.407686Z",
        "url": "https://files.pythonhosted.org/packages/d1/29/a118e1942c61e567ceffccfbf4463dad42b6dcd6ba27ae2ce431da572e49/drf-turbo-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98d168e1b50cad655b1d0ba1a248038bdd7183b683772426bcd431d6edd10f55",
          "md5": "200fe1164419973621788cd9d3c96697",
          "sha256": "47e3f8ebe028015caa161c668dc95882d00606bc56d12a3355d5805a0b7020b1"
        },
        "downloads": -1,
        "filename": "drf-turbo-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "200fe1164419973621788cd9d3c96697",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 606305,
        "upload_time": "2021-11-21T19:07:30",
        "upload_time_iso_8601": "2021-11-21T19:07:30.935570Z",
        "url": "https://files.pythonhosted.org/packages/98/d1/68e1b50cad655b1d0ba1a248038bdd7183b683772426bcd431d6edd10f55/drf-turbo-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f45e3c6f2836331283996de782f49b2d452ce8704a539b89c29b04869ca9dd5",
          "md5": "79c00f44135acf0e5b618a4c5a20fa47",
          "sha256": "b87b29dcc22967aa01ba7cdcf30b91299a2b5cf0b6b2f7633c9f086d7c5d0f84"
        },
        "downloads": -1,
        "filename": "drf-turbo-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "79c00f44135acf0e5b618a4c5a20fa47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 716980,
        "upload_time": "2021-11-21T19:24:21",
        "upload_time_iso_8601": "2021-11-21T19:24:21.494144Z",
        "url": "https://files.pythonhosted.org/packages/6f/45/e3c6f2836331283996de782f49b2d452ce8704a539b89c29b04869ca9dd5/drf-turbo-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5dea626e2ae5a385d4ef3466e4077c3226f45197a0303acac7e4801af10e6ae",
          "md5": "e8aa968750e0719c9f07b8319bbf90e2",
          "sha256": "3d46a61718c841575c03d561c66214a4e5d82609e17e1a77510411bdedce13d3"
        },
        "downloads": -1,
        "filename": "drf_turbo-0.1.6-cp310-cp310-macosx_12_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "e8aa968750e0719c9f07b8319bbf90e2",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 1174137,
        "upload_time": "2022-05-29T04:00:07",
        "upload_time_iso_8601": "2022-05-29T04:00:07.305116Z",
        "url": "https://files.pythonhosted.org/packages/c5/de/a626e2ae5a385d4ef3466e4077c3226f45197a0303acac7e4801af10e6ae/drf_turbo-0.1.6-cp310-cp310-macosx_12_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5dea626e2ae5a385d4ef3466e4077c3226f45197a0303acac7e4801af10e6ae",
        "md5": "e8aa968750e0719c9f07b8319bbf90e2",
        "sha256": "3d46a61718c841575c03d561c66214a4e5d82609e17e1a77510411bdedce13d3"
      },
      "downloads": -1,
      "filename": "drf_turbo-0.1.6-cp310-cp310-macosx_12_0_arm64.whl",
      "has_sig": false,
      "md5_digest": "e8aa968750e0719c9f07b8319bbf90e2",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.6",
      "size": 1174137,
      "upload_time": "2022-05-29T04:00:07",
      "upload_time_iso_8601": "2022-05-29T04:00:07.305116Z",
      "url": "https://files.pythonhosted.org/packages/c5/de/a626e2ae5a385d4ef3466e4077c3226f45197a0303acac7e4801af10e6ae/drf_turbo-0.1.6-cp310-cp310-macosx_12_0_arm64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}