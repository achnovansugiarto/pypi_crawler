{
  "info": {
    "author": "appenps",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Module adapapi\n==============\n\nClasses\n-------\n\n`Appen(api_key)`\n:   \n\n    ### Methods\n\n    `bonus_contributor(self, job_id, worker_id, amount_in_cents)`\n    :   Max at one time is $20.00 or 2000 cents\n        \n        Args:\n            job_id (int): ADAP Job ID\n            worker_id (int): ADAP Contributor ID\n            amount_in_cents (int): Amount in cents. The max amount to bonus per API request is $20.00. Function will split out your amount in max $20.00 chunks + remainder if more than $20.00 is to be bonused.\n\n    `delete_unit(self, job_id, unit_id)`\n    :   Units cannot be deleted from a running or paused job.\n        \n        Args:\n            job_id (int): ADAP job ID\n            unit_id (int): ADAP Unit ID\n\n    `deprecate_job(self, job_id)`\n    :   Deprecating an ADAP job.\n        \n        Args:\n            job_id (int): ADAP job ID\n\n    `download_jobid(self, job_id, reporttype, to_csv=False)`\n    :   Recommended to regenerate report first. Downloads ADAP report to DataFrame object or CSV file.\n        \n        Args:\n            job_id (int): ADAP Job ID\n            reporttype (str): ADAP report type -- full, aggregated, json, gold_report, workset, source\n            to_csv (bool): True if report should be saved to CSV, False if report to output as DataFrame object\n        \n        Returns:\n            Pandas dataframe: Pandas dataframe of report\n\n    `download_jobid_list(self, list_job_ids, reporttype, outfile_concat=False)`\n    :   Download reports from a list of job IDs\n        \n        Args:\n            list_job_ids (list): list of job IDs\n            reporttype (str): ADAP report type -- full, aggregated, json, gold_report, workset, source\n            outfile_concat (boolean): Option to concat all of the downloaded reports into one Pandas dataframe. Default is set to False.\n        \n        Returns:\n            Pandas dataframe: Dependent on outfile_concat flag, will return concatenated dataframe of all listed job IDs\n\n    `duplicate_job(self, job_id, include_uploaded_rows=False, include_tq=False)`\n    :   Duplicate ADAP job\n        \n        Args:\n            job_id (int): ADAP Job ID\n            include_uploaded_rows (bool): Flag to include previously uploaded rows. Includes test questions if present. Default set to False. \n            include_tq (bool): Flag to include test questions only.\n        \n        Returns:\n            int: New ADAP Job ID\n    \n    `get_all_jobs(self):\n        \"\"\"Retrieves list of all jobs. \n        More information https://developer.appen.com/#tag/Account-Info/paths/~1jobs.json/get\n\n        Returns:\n            list: List of all jobs.\n        \"\"\"\n\n    `filter_jobs_by_tag(self, tag)`\n    :   Retrieves list of job IDs with associated tag. \n        More information https://developer.appen.com/#tag/Account-Info/paths/~1jobs.json/get\n        \n        Args:\n            tag (str): For multiple tags, delimit by comma. eg. 'tag1, tag2'\n        \n        Returns:\n            list: List of job IDs with tag\n\n    `filter_jobs_by_title(self, title):\n        \"\"\"Retrieves list of job IDs with associated title.\n        More information https://developer.appen.com/#tag/Account-Info/paths/~1jobs.json/get\n        \n        Args:\n            title (str): keywords to search for in job title\n        \n        Returns:\n            list: List of jobs with title\n        \"\"\"\n\n    `filter_jobs_by_copied_from(self, copied_from):\n        \"\"\"Retrieves list of job IDs with associated copied_from job_id.\n        More information https://developer.appen.com/#tag/Account-Info/paths/~1jobs.json/get\n        \n        Args:\n            copied_from (int): fileter jobs by the job id they were copied from\n        \n        Returns:\n            list: List of jobs copied from  the copied_from_id\n\n    `get_unit_state(self, job_id, unit_id)`\n    :   Retrieves current unit state within job\n        \n        Args:\n            job_id (int): ADAP Job ID\n            unit_id (int): ADAP Unit ID\n        \n        Returns:\n            dict: Dictionary containing _unit_id and _unit_state\n\n    `get_unit_state_row(self, job_id, row)`\n    :   Retrieves current unit state within job. To be used when row data needs to be returned.\n        \n        Args:\n            job_id (int): ADAP Job ID\n            row (Pandas Series or dictionary): Row from ADAP report \n        \n        Returns:\n            dict: Dictionary containing all data within row and _unit_state\n\n    `internal_launch(self, job_id, units_to_launch)`\n    :   Launching job internally\n        \n        Args:\n            job_id (int): ADAP Job ID\n            units_to_launch (int or str): Provide number of units to launch OR use \"all\" to launch all units.\n        \n        Returns:\n            int: Number of units launched\n\n    `job_json(self, job_id)`\n    :   Get job json\n        \n        Args:\n            job_id (int): ADAP Job ID\n        \n        Returns:\n            dict: Job JSON\n\n    `job_summary(self, job_id)`\n    :   Getting job stats\n        \n        Args:\n            job_id (int): ADAP Job ID\n        \n        Returns:\n            dict: Returns golden_units, all_units, ordered_units, completed_units_estimate, needed_judgments, all_judgments, tainted_judgments, completed_gold_estimate, completed_non_gold_estimate\n\n    `regenerate_jobid(self, job_id, reporttype)`\n    :   Regenerates ADAP job\n        \n        Args:\n            job_id (int_or_list): ADAP Job ID. If a list of job IDs provided, will regenerate them sequentially\n            reporttype (str): ADAP report type -- full, aggregated, json, gold_report, workset, source\n\n    `split_column(self, job_id, columnname, character)`\n    :   Corresponds to the \"Split Column\" button in platform UI. This operation will split the contents of a column on a certain character, transforming strings into arrays of strings.\n        \n        Args:\n            job_id (int): ADAP Job ID\n            columnname (str): Column name\n            character (str): Delimiting character\n\n    `tag_add(self, job_id, tag)`\n    :   Adding new tags. https://developer.appen.com/#tag/Manage-Job-Settings/paths/~1jobs~1{job_id}~1tags/post\n        \n        Args:\n            job_id (int): ADAP Job ID\n            tag (str): For multiple tags, delimit by comma. eg. 'tag1, tag2'\n\n    `tag_get(self, job_id)`\n    :   Tagging jobs. https://developer.appen.com/#tag/Manage-Job-Settings/paths/~1jobs~1{job_id}~1tags/post\n        \n        Args:\n            job_id (int): ADAP Job ID\n        \n        Returns:\n            list: List of tags attached to ADAP Job\n\n    `tag_replace(self, job_id, tag)`\n    :   Replacing existing tags with new tags. https://developer.appen.com/#tag/Manage-Job-Settings/paths/~1jobs~1{job_id}~1tags/post\n        \n        Args:\n            job_id (int): ADAP Job ID\n            tag (str): For multiple tags, delimit by comma. eg. 'tag1, tag2'\n\n    `unit_json(self, job_id, unit_id)`\n    :   Get unit json\n        \n        Args:\n            job_id (int): ADAP Job ID\n            unit_id (int): ADAP Unit ID\n        \n        Returns:\n            dict: Unit JSON\n\n    `update_job_json(self, job_id, indict)`\n    :   Updating job settings\n        \n        Args:\n            job_id (int): ADAP Job ID\n            indict (dict): Dictionary of items to update within job json\n\n    `update_unit_state(self, job_id, unit_id, state)`\n    :   Updating unit state\n        \n        Args:\n            job_id (int): ADAP job ID\n            unit_id (int): ADAP Unit ID\n            state (str): One of the following -- new, golden, finalized, canceled, deleted\n\n    `upload(self, data_to_upload, job_id=None)`\n    :   Uploads CSV (specify path), list of dictionaries, a single dictionary, or DataFrame. If no job ID is specified, a new job will be created.\n        \n        Args:\n            data_to_upload (pd.DataFrame_or_str_or_list_or_dict): DataFrame object, path to CSV file, list of dictionaries, or single dictionary\n            job_id (int): ADAP Job ID. If None then a new job will be created\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adapapi",
    "package_url": "https://pypi.org/project/adapapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/adapapi/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/adapapi/0.1.0/",
    "requires_dist": [
      "requests",
      "pandas",
      "glog"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "A simple Python package using Appen API",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16475091,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2403ba8f37ff26a1a8a4ef1c46e1ffcabfb2894951bb5896757fe749aad76026",
          "md5": "749699e031e59925de0349728e9c2c15",
          "sha256": "4a7ed823e2b8b080e39db5984071278a7a3a31d2377d75e4ee9cf0f1d9e6df13"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "749699e031e59925de0349728e9c2c15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 5778,
        "upload_time": "2021-02-08T23:24:14",
        "upload_time_iso_8601": "2021-02-08T23:24:14.236689Z",
        "url": "https://files.pythonhosted.org/packages/24/03/ba8f37ff26a1a8a4ef1c46e1ffcabfb2894951bb5896757fe749aad76026/adapapi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e650ef3f2e6b941bbfc74ab826dbd25ec0f303e592a31210bff201670f0f44b",
          "md5": "4e54c0db87681d5b4cdd36bc469009d7",
          "sha256": "73a48f3e89382470601183547eedd43eb780275830fce49e2e83ef6ed0e885e6"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4e54c0db87681d5b4cdd36bc469009d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 5832,
        "upload_time": "2021-02-10T17:47:17",
        "upload_time_iso_8601": "2021-02-10T17:47:17.429643Z",
        "url": "https://files.pythonhosted.org/packages/5e/65/0ef3f2e6b941bbfc74ab826dbd25ec0f303e592a31210bff201670f0f44b/adapapi-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1079d18a93f1fa64c01105c63185c1e7e8bc77f9daf7acc069afb0fa1d18ebeb",
          "md5": "afd1d668a411960222bdf1d1b6dc2db2",
          "sha256": "f30d48015153fd88a7ad992f9ad7c573f3f97c224ccabaef51dc3a1d228da394"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "afd1d668a411960222bdf1d1b6dc2db2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 5927,
        "upload_time": "2021-02-17T23:05:30",
        "upload_time_iso_8601": "2021-02-17T23:05:30.220325Z",
        "url": "https://files.pythonhosted.org/packages/10/79/d18a93f1fa64c01105c63185c1e7e8bc77f9daf7acc069afb0fa1d18ebeb/adapapi-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a093f231a91a9624b810480ab3ea1a77bcaf7ce5a2455a73e1db2ed82adb4b",
          "md5": "e47c18364cdad220907ea4a26cf8596d",
          "sha256": "bf0992e762ce009a1b42c5160943e3aaaa71d679fcbcc915114c89d9c7628712"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e47c18364cdad220907ea4a26cf8596d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6146,
        "upload_time": "2021-03-03T23:41:23",
        "upload_time_iso_8601": "2021-03-03T23:41:23.625543Z",
        "url": "https://files.pythonhosted.org/packages/97/a0/93f231a91a9624b810480ab3ea1a77bcaf7ce5a2455a73e1db2ed82adb4b/adapapi-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120e7e8777d657ba8d0a100e858cadd71fc55e62082c922720fc08b2b40b7453",
          "md5": "943832e4e770b71cbfffdadef755f1c9",
          "sha256": "3e10bf52b6ef322932614013ee8227a1ed95d6413bd9c19f9505c52c6f9d9b7d"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "943832e4e770b71cbfffdadef755f1c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6196,
        "upload_time": "2021-03-16T23:27:48",
        "upload_time_iso_8601": "2021-03-16T23:27:48.659284Z",
        "url": "https://files.pythonhosted.org/packages/12/0e/7e8777d657ba8d0a100e858cadd71fc55e62082c922720fc08b2b40b7453/adapapi-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2aeb6df974e1857758ef09cc20cff13c935f8d9ad8f66c116a69fe79e6e796d",
          "md5": "04dc571504334845a4435bf4dc692c77",
          "sha256": "33ba5af674940c93b3e9da4f52832a9095164d76f64ddd28344885f283069965"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04dc571504334845a4435bf4dc692c77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 6775,
        "upload_time": "2022-06-01T22:11:40",
        "upload_time_iso_8601": "2022-06-01T22:11:40.216042Z",
        "url": "https://files.pythonhosted.org/packages/f2/ae/b6df974e1857758ef09cc20cff13c935f8d9ad8f66c116a69fe79e6e796d/adapapi-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f87840fef033b22ed09eca03074bef0c8548cc4dacdd68a7d2801af596052180",
          "md5": "fef4935cd7aa77ee1f5d0ce396627592",
          "sha256": "9631ee5c311f15573c0eae7bfc5ac0796ca958aa7a80223e50c96d3be6e5a0ce"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fef4935cd7aa77ee1f5d0ce396627592",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6760,
        "upload_time": "2022-06-01T22:11:41",
        "upload_time_iso_8601": "2022-06-01T22:11:41.716005Z",
        "url": "https://files.pythonhosted.org/packages/f8/78/40fef033b22ed09eca03074bef0c8548cc4dacdd68a7d2801af596052180/adapapi-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94a18da31d460457a45d4389f444f4c56347d464dcb7a0b76c6a056736f5fd8a",
          "md5": "14e85fd3baeffce8077234ed59aa895e",
          "sha256": "7d5a9260437a1826d283752b1a755e21603900a0b27441757df9579f2ca60841"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14e85fd3baeffce8077234ed59aa895e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 8636,
        "upload_time": "2022-06-01T23:18:05",
        "upload_time_iso_8601": "2022-06-01T23:18:05.001767Z",
        "url": "https://files.pythonhosted.org/packages/94/a1/8da31d460457a45d4389f444f4c56347d464dcb7a0b76c6a056736f5fd8a/adapapi-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea63f5cdbe58985ca91e89dbf68e1636ad9dc43dfe64c86cbb853bc9c51cf54f",
          "md5": "b081fd08b5d6604f5f6d6bbcade75d27",
          "sha256": "afec92d4c8a96821f786aec5b66db9c2f66f22cf8b54b6c2af23b63e4794a09b"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "b081fd08b5d6604f5f6d6bbcade75d27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 8034,
        "upload_time": "2022-06-01T23:18:07",
        "upload_time_iso_8601": "2022-06-01T23:18:07.030667Z",
        "url": "https://files.pythonhosted.org/packages/ea/63/f5cdbe58985ca91e89dbf68e1636ad9dc43dfe64c86cbb853bc9c51cf54f/adapapi-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b61a52ba3875c6a9a921bfeb63d54fb73585ab311bfa5b1f08b1d5c0d8f493a",
          "md5": "ba74f2e1bc27518f004ae7ef7d9fdd27",
          "sha256": "16c30b81fefa62f75d759bb781fa43f43660f25aeff72a67b7f199896321d73a"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba74f2e1bc27518f004ae7ef7d9fdd27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 9076,
        "upload_time": "2022-12-15T17:01:25",
        "upload_time_iso_8601": "2022-12-15T17:01:25.394085Z",
        "url": "https://files.pythonhosted.org/packages/8b/61/a52ba3875c6a9a921bfeb63d54fb73585ab311bfa5b1f08b1d5c0d8f493a/adapapi-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a168c635a9b8af000fd19151e8ee10c6fa809bb51da8199b0440d3655301de9",
          "md5": "f24ad9edebab3d2ff49345d509eb10ee",
          "sha256": "cf314031357aaf8d5fa89aa277de55eb08a2206525f585eabcb0be98238e121c"
        },
        "downloads": -1,
        "filename": "adapapi-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f24ad9edebab3d2ff49345d509eb10ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 8845,
        "upload_time": "2022-12-15T17:01:26",
        "upload_time_iso_8601": "2022-12-15T17:01:26.747192Z",
        "url": "https://files.pythonhosted.org/packages/4a/16/8c635a9b8af000fd19151e8ee10c6fa809bb51da8199b0440d3655301de9/adapapi-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "427b4810cb00f602307b724ff5bc88ab9605c6ed56a94d786cf544ef91f6f81e",
          "md5": "731a5205bab7ed3de8037b56edffe944",
          "sha256": "19d3c0bd96891e6d195d7ec6e454490a45e94d55473890434fc741c799312ec3"
        },
        "downloads": -1,
        "filename": "adapapi-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "731a5205bab7ed3de8037b56edffe944",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 9406,
        "upload_time": "2023-01-18T18:05:42",
        "upload_time_iso_8601": "2023-01-18T18:05:42.008903Z",
        "url": "https://files.pythonhosted.org/packages/42/7b/4810cb00f602307b724ff5bc88ab9605c6ed56a94d786cf544ef91f6f81e/adapapi-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89a2c93a117a40df13022ccbe1b3928dd3171ca7b05963755efc5a6408e89345",
          "md5": "0f7df1ede677437a3fdce8a0e7380dc9",
          "sha256": "e00277052447ba2560193cb3475626e1113fb4789dad3d93c9fcd6dbaade0396"
        },
        "downloads": -1,
        "filename": "adapapi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f7df1ede677437a3fdce8a0e7380dc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 9604,
        "upload_time": "2023-01-18T18:05:43",
        "upload_time_iso_8601": "2023-01-18T18:05:43.545047Z",
        "url": "https://files.pythonhosted.org/packages/89/a2/c93a117a40df13022ccbe1b3928dd3171ca7b05963755efc5a6408e89345/adapapi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "427b4810cb00f602307b724ff5bc88ab9605c6ed56a94d786cf544ef91f6f81e",
        "md5": "731a5205bab7ed3de8037b56edffe944",
        "sha256": "19d3c0bd96891e6d195d7ec6e454490a45e94d55473890434fc741c799312ec3"
      },
      "downloads": -1,
      "filename": "adapapi-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "731a5205bab7ed3de8037b56edffe944",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 9406,
      "upload_time": "2023-01-18T18:05:42",
      "upload_time_iso_8601": "2023-01-18T18:05:42.008903Z",
      "url": "https://files.pythonhosted.org/packages/42/7b/4810cb00f602307b724ff5bc88ab9605c6ed56a94d786cf544ef91f6f81e/adapapi-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89a2c93a117a40df13022ccbe1b3928dd3171ca7b05963755efc5a6408e89345",
        "md5": "0f7df1ede677437a3fdce8a0e7380dc9",
        "sha256": "e00277052447ba2560193cb3475626e1113fb4789dad3d93c9fcd6dbaade0396"
      },
      "downloads": -1,
      "filename": "adapapi-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f7df1ede677437a3fdce8a0e7380dc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 9604,
      "upload_time": "2023-01-18T18:05:43",
      "upload_time_iso_8601": "2023-01-18T18:05:43.545047Z",
      "url": "https://files.pythonhosted.org/packages/89/a2/c93a117a40df13022ccbe1b3928dd3171ca7b05963755efc5a6408e89345/adapapi-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}