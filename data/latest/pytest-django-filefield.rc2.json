{
  "info": {
    "author": null,
    "author_email": "Mikhail Bulash <scaryspiderpig@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Testing"
    ],
    "description": "pytest-django-filefield\n=======================\nPatch the storage of your models' `FileField`s effortlessly.  \nBest served with `pytest-django` and your own fixtures.\n\nInstall and enable the plugin:\n```bash\npip install pytest-django-filefield\n```\n\nRoll your fixture:\n```python\n# conftest.py\nfrom django.core.files import storage\nfrom django.db import models\n\n@pytest.fixture\ndef fake_storage(monkeypatch, tmp_path) \n    storage = storage.FileSystemStorage(location=tmp_path)\n    monkeypatch.setattr(models.FileField, \"storage\", storage)\n    return storage\n```\nHave it scoped however you want, or just mark as `autouse=True` and forget about it.\n\n\nThis simple hack is packaged as a pytest plugin to make it work with `pytest-django`, because there is [no simpler way to inject custom code before it calls `django.setup()`](https://pytest-django.readthedocs.io/en/latest/configuring_django.html#changing-your-app-before-django-gets-set-up).\n\n\n## Do I even need this?\nThere's a good chance that you don't! But let's first recap on some of the ways to patch the storage, given a model somewhat like below: \n\n```python\nclass Contract(models.Model):\n    document = models.FileField(storage=DocumentStorage())\n```\n\n### Just patch the field\n`storage` is an instance attribute of each `FileField`, so the most straightforward and robust way would be to just find the field instance and patch the attribute: \n\n```python\ndef test_document_upload(monkeypatch, my_fake_storage):\n    document_field = Contract._meta.get_field_by_name(\"document\")[0]\n    monkeypatch.setattr(document_field, \"storage\", my_fake_storage)\n\n    upload_contract_document()\n\n    assert_results(my_fake_storage)\n```\n\nThe requirement here is that you know which fields of which models should be patched, and make sure to get it right for corresponding tests. This could become quite noisy and/or tedious to maintain. However, the approach is beneficial if there is quite a number of different storages, especially different storages used within the same model.\n\nIf the project uses a single storage for everything, or just a handful of them, such flexibility might be overkill.\n\n### Define a different storage for tests\nExtract the name of the storage class into `settings.py`, use a different settings file for tests (which you should anyway) with a different value there. This way the storage is replaced before Django is even initialized.\n\n```python\n# settings.py\nDOCUMENT_STORAGE = 'myapp.storages.DocumentStorage'\n\n# settings_test.py\nDOCUMENT_STORAGE = 'myapp.tests.storages.FakeDocumentStorage'\n```\n\n```python\n# models.py\nclass Contract(models.Model):\n    document = models.FileField(\n        storage=import_string(settings.DOCUMENT_STORAGE)()\n    )\n\n# tests/test_contract.py\ndef test_document_upload():\n    document_field = Contract._meta.get_field_by_name(\"document\")[0]\n\n    upload_contract_document()\n\n    assert_results(document_field.storage)\n```\nPatching not required, each field still has its own instance of a test storage, but all the objects using that field share the same storage for the whole test session. Which is already good enough and you may just stop here!\n\n### Patch all the storages, with configurable scope\nThis is what the plugin enables. It replaces `FileField().storage`, which is normally an instance attribute, with a property of the same name. A property is defined in a class, so this forces all the `\"storage\"` attribute lookups to be done on a class. You now don't have to hunt down every `FileField` instance and can just patch the class property instead.\n\nThe drawback is that any and all `FileField`s are patched for duration of the fixture's scope. Since the narrowest scope is `function`, this may (only) be a problem if a single test needs to check the behaviours of multiple storages in isolation.   \n\n### Summary\nAs always, choose what works best for your specific project!\n\n| | Manual patch | Storage from settings | This plugin |\n|-|-|-|-|\n| function-scoped storage      | x |   | x |\n| field-scoped storage         | x |   |   |\n| no model changes required    | x |   | x |\n| low/no maintenance           |   | x | x |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "pytest-django-filefield",
    "package_url": "https://pypi.org/project/pytest-django-filefield/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-django-filefield/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pytest-django-filefield/0.1.2/",
    "requires_dist": [
      "pytest >= 5.2"
    ],
    "requires_python": null,
    "summary": "Replaces FileField.storage with something you can patch globally.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13761838,
  "releases": {
    "0.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3de12fc03d14f0095c9a770585c8f6bfe942c64cc490e2fd7f18d4e1b0387f10",
          "md5": "e013afaa051385fdbcaa542dc8e2f4bc",
          "sha256": "bb680f014335af7130b235c26d920c511a8f3eb48fa2d47099a67d67b12fc660"
        },
        "downloads": -1,
        "filename": "pytest_django_filefield-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e013afaa051385fdbcaa542dc8e2f4bc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3803,
        "upload_time": "2022-05-06T09:21:11",
        "upload_time_iso_8601": "2022-05-06T09:21:11.054068Z",
        "url": "https://files.pythonhosted.org/packages/3d/e1/2fc03d14f0095c9a770585c8f6bfe942c64cc490e2fd7f18d4e1b0387f10/pytest_django_filefield-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "386f8f44ee3526fd60a980e3e696b390201f5a4412cb0f7949c3a7000c9aa461",
          "md5": "4dbafa9c60ce08b2db2bff3106f3aac5",
          "sha256": "3e93cd627482c285cbe8edfc73f2c96b1cb6ff97c0ee671261d98a6b0b92f5bd"
        },
        "downloads": -1,
        "filename": "pytest-django-filefield-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4dbafa9c60ce08b2db2bff3106f3aac5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3811,
        "upload_time": "2022-05-06T09:21:12",
        "upload_time_iso_8601": "2022-05-06T09:21:12.918013Z",
        "url": "https://files.pythonhosted.org/packages/38/6f/8f44ee3526fd60a980e3e696b390201f5a4412cb0f7949c3a7000c9aa461/pytest-django-filefield-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ae35e1006235106fd843d009fed201c63b9f06e297fd1a33aeb13c6bce8d5f20",
          "md5": "934024ef755f18edb000b4b9861c63e2",
          "sha256": "e6f948968f5bcb8ceecd0a3f1275970bc5cb9febec2a0b827d056febce42f1ae"
        },
        "downloads": -1,
        "filename": "pytest_django_filefield-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "934024ef755f18edb000b4b9861c63e2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3770,
        "upload_time": "2022-05-09T18:30:04",
        "upload_time_iso_8601": "2022-05-09T18:30:04.226490Z",
        "url": "https://files.pythonhosted.org/packages/ae/35/e1006235106fd843d009fed201c63b9f06e297fd1a33aeb13c6bce8d5f20/pytest_django_filefield-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b749b9de3c8efa0d278ad01cb6e2cc3395848c1d7eda1baa98ab25e4953842d6",
          "md5": "7f8303af2afc2c439d64a8481bb34207",
          "sha256": "29cacacfeecf2a8166e1f79de8980c5babf0677dbe04f49e9509d798e722a84d"
        },
        "downloads": -1,
        "filename": "pytest-django-filefield-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f8303af2afc2c439d64a8481bb34207",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3802,
        "upload_time": "2022-05-09T18:30:06",
        "upload_time_iso_8601": "2022-05-09T18:30:06.311339Z",
        "url": "https://files.pythonhosted.org/packages/b7/49/b9de3c8efa0d278ad01cb6e2cc3395848c1d7eda1baa98ab25e4953842d6/pytest-django-filefield-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "ae35e1006235106fd843d009fed201c63b9f06e297fd1a33aeb13c6bce8d5f20",
        "md5": "934024ef755f18edb000b4b9861c63e2",
        "sha256": "e6f948968f5bcb8ceecd0a3f1275970bc5cb9febec2a0b827d056febce42f1ae"
      },
      "downloads": -1,
      "filename": "pytest_django_filefield-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "934024ef755f18edb000b4b9861c63e2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 3770,
      "upload_time": "2022-05-09T18:30:04",
      "upload_time_iso_8601": "2022-05-09T18:30:04.226490Z",
      "url": "https://files.pythonhosted.org/packages/ae/35/e1006235106fd843d009fed201c63b9f06e297fd1a33aeb13c6bce8d5f20/pytest_django_filefield-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b749b9de3c8efa0d278ad01cb6e2cc3395848c1d7eda1baa98ab25e4953842d6",
        "md5": "7f8303af2afc2c439d64a8481bb34207",
        "sha256": "29cacacfeecf2a8166e1f79de8980c5babf0677dbe04f49e9509d798e722a84d"
      },
      "downloads": -1,
      "filename": "pytest-django-filefield-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7f8303af2afc2c439d64a8481bb34207",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3802,
      "upload_time": "2022-05-09T18:30:06",
      "upload_time_iso_8601": "2022-05-09T18:30:06.311339Z",
      "url": "https://files.pythonhosted.org/packages/b7/49/b9de3c8efa0d278ad01cb6e2cc3395848c1d7eda1baa98ab25e4953842d6/pytest-django-filefield-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}