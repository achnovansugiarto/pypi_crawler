{
  "info": {
    "author": "Michael Büsch",
    "author_email": "m@bues.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: MicroPython",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "# BME-280 sensor device driver with Micropython and Linux support (I2C + SPI)\n\n[Project website](https://bues.ch/)\n\n[Git repository](https://bues.ch/cgit/bme280-upy.git)\n\nThis driver runs on Micropython and on regular Python (e.g. Raspberry Pi or other Linux devices).\n\nIt has support for both I2C and SPI bus.\n\n# Example: I2C\n\n    import bme280\n\n    try:\n        # Connect to BME-280 via I2C-0 hardware with default pinning:\n        bme = bme280.BME280(i2cBus=0)\n\n        # Alternatively:\n        # Connect to BME-280 via I2C-0 hardware with custom pinning (not supported by all microcontrollers):\n        #bme = bme280.BME280(i2cBus={ \"index\": 0, \"scl\": 1, \"sda\": 0 })\n\n        # Alternatively:\n        # Connect to BME-280 via software I2C with custom pinning (not supported by all microcontrollers):\n        #bme = bme280.BME280(i2cBus={ \"scl\": 1, \"sda\": 0 })\n\n        # Alternatively:\n        # Connect to BME-280 via pre-initialized Micropython bus object:\n        #bme = bme280.BME280(i2cBus=machine.I2C(0, ...))\n\n        # Synchronously trigger a MODE_FORCED conversion and return the result.\n        temperature, humidity, pressure = bme.readForced(filter=bme280.FILTER_2,\n                                                         tempOversampling=bme280.OVSMPL_4,\n                                                         humidityOversampling=bme280.OVSMPL_4,\n                                                         pressureOversampling=bme280.OVSMPL_4)\n\n        # See help(bme280.BME280) for documentation and more methods.\n\n        # Print the result.\n        print(f\"{temperature:.1f} *C; {humidity * 100:.1f} % rel. hum.; {pressure / 100:.1f} hPa\")\n\n    except bme280.BME280Error as e:\n        print(f\"BME280 error: {e}\")\n\n# Example: SPI\n\n    import bme280\n\n    try:\n        # Connect to BME-280 via SPI-0 hardware with default pinning and pin 5 as chip select:\n        bme = bme280.BME280(spiBus=0, spiCS=5)\n\n        # Alternatively:\n        # Connect to BME-280 via SPI-0 hardware with custom pinning (not supported by all microcontrollers):\n        #bme = bme280.BME280(spiBus={ \"index\": 0, \"sck\": 1, \"mosi\": 2, \"miso\": 3 }, spiCS=5)\n\n        # Alternatively:\n        # Connect to BME-280 via software SPI with custom pinning (not supported by all microcontrollers):\n        #bme = bme280.BME280(spiBus={ \"sck\": 1, \"mosi\": 2, \"miso\": 3 }, spiCS=5)\n\n        # Alternatively:\n        # Connect to BME-280 via pre-initialized Micropython bus object:\n        #bme = bme280.BME280(spiBus=machine.SPI(0, ...), spiCS=machine.Pin(5, ...))\n\n        # Synchronously trigger a MODE_FORCED conversion and return the result.\n        temperature, humidity, pressure = bme.readForced(filter=bme280.FILTER_2,\n                                                         tempOversampling=bme280.OVSMPL_4,\n                                                         humidityOversampling=bme280.OVSMPL_4,\n                                                         pressureOversampling=bme280.OVSMPL_4)\n\n        # See help(bme280.BME280) for documentation and more methods.\n\n        # Print the result.\n        print(f\"{temperature:.1f} *C; {humidity * 100:.1f} % rel. hum.; {pressure / 100:.1f} hPa\")\n\n    except bme280.BME280Error as e:\n        print(f\"BME280 error: {e}\")\n\n# Example: Context Manager\n\nThe BME280 instance can also be used as Context Manager (Python `with` statement).\n\n    import bme280\n\n    try:\n        with bme280.BME280(i2cBus=0) as bme:\n            temperature, humidity, pressure = bme.readForced(filter=bme280.FILTER_2,\n                                                             tempOversampling=bme280.OVSMPL_4,\n                                                             humidityOversampling=bme280.OVSMPL_4,\n                                                             pressureOversampling=bme280.OVSMPL_4)\n            # ...\n    except bme280.BME280Error as e:\n        print(f\"BME280 error: {e}\")\n\n# Example: Normal mode\n\nThe driver also supports normal mode, where the bme280 does all measurements on its own in the background.\nSee the datasheet for more information about normal mode.\n\n    import bme280\n\n    try:\n        with bme280.BME280(i2cBus=0) as bme:\n            # Start in normal mode with specified measurement interval (standby time).\n            bme.start(mode=bme280.MODE_NORMAL,\n                      standbyTime=bme280.T_SB_10ms,\n                      filter=bme280.FILTER_2,\n                      tempOversampling=bme280.OVSMPL_4,\n                      humidityOversampling=bme280.OVSMPL_4,\n                      pressureOversampling=bme280.OVSMPL_4)\n\n            while True:\n                # Read the most recent values from the device.\n                temperature, humidity, pressure = bme.read()\n\n                # ... do something else here and let the bme280 run measurements in the mean time.\n\n    except bme280.BME280Error as e:\n        print(f\"BME280 error: {e}\")\n\n# License\n\nCopyright (c) 2020-2022 Michael Büsch <m@bues.ch>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bues.ch/",
    "keywords": "Micropython BME280 SPI I2C Raspberry-Pi",
    "license": "GNU General Public License v2 or later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bme280-upy",
    "package_url": "https://pypi.org/project/bme280-upy/",
    "platform": null,
    "project_url": "https://pypi.org/project/bme280-upy/",
    "project_urls": {
      "Homepage": "https://bues.ch/"
    },
    "release_url": "https://pypi.org/project/bme280-upy/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "BME-280 sensor device driver with Micropython and Linux support (I2C + SPI)",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14976175,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c635e95a625a8ce18788d40c73041b1c7bdaec9abe8963734237f20be642aba",
          "md5": "3ccb7f4ad7e9008be2316d479ef086ec",
          "sha256": "ca9399b8dd380665c6d0135d78d3d70194830c5f17a5b2cf1348b36921e76ea1"
        },
        "downloads": -1,
        "filename": "bme280-upy-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "3ccb7f4ad7e9008be2316d479ef086ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15984,
        "upload_time": "2022-07-10T14:26:03",
        "upload_time_iso_8601": "2022-07-10T14:26:03.637626Z",
        "url": "https://files.pythonhosted.org/packages/5c/63/5e95a625a8ce18788d40c73041b1c7bdaec9abe8963734237f20be642aba/bme280-upy-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f24d66fc160c625c55fc594cf13a1714aef65a79d56eaaac9fb8da125454543",
          "md5": "aabdd263bbd54e726acafbac4c5d4395",
          "sha256": "479ac61ce2760193300e05a1eab40f4ae30829d5eb409b304285ddfdca84ace7"
        },
        "downloads": -1,
        "filename": "bme280-upy-2.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "aabdd263bbd54e726acafbac4c5d4395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21916,
        "upload_time": "2022-09-02T16:13:01",
        "upload_time_iso_8601": "2022-09-02T16:13:01.711069Z",
        "url": "https://files.pythonhosted.org/packages/7f/24/d66fc160c625c55fc594cf13a1714aef65a79d56eaaac9fb8da125454543/bme280-upy-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f24d66fc160c625c55fc594cf13a1714aef65a79d56eaaac9fb8da125454543",
        "md5": "aabdd263bbd54e726acafbac4c5d4395",
        "sha256": "479ac61ce2760193300e05a1eab40f4ae30829d5eb409b304285ddfdca84ace7"
      },
      "downloads": -1,
      "filename": "bme280-upy-2.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "aabdd263bbd54e726acafbac4c5d4395",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21916,
      "upload_time": "2022-09-02T16:13:01",
      "upload_time_iso_8601": "2022-09-02T16:13:01.711069Z",
      "url": "https://files.pythonhosted.org/packages/7f/24/d66fc160c625c55fc594cf13a1714aef65a79d56eaaac9fb8da125454543/bme280-upy-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}