{
  "info": {
    "author": "massquantity",
    "author_email": "jinxin_madie@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# LibRecommender\n\n## Overview\n\n**LibRecommender** is an easy-to-use recommender system focused on end-to-end recommendation. The main features are:\n\n+ Implemented a number of popular recommendation algorithms such as SVD++, DeepFM, BPR etc, [see full algorithm list](#references).\n+ A hybrid recommender system, which allows user to use either collaborative-filtering or content-based features or both. New features can be used on the fly.\n+ Low memory usage, automatically convert categorical and multi-value categorical features to sparse representation.\n+ Support training for both explicit and implicit datasets, and negative sampling can be used for implicit dataset.\n+ Making use of Cython or Tensorflow for high-speed model training.\n+ Provide end-to-end workflow, i.e. data handling / preprocessing -> model training -> evaluate -> serving.\n+ Support cold-start prediction and recommendation.\n+ Provide unified and friendly API for all algorithms. Easy to retrain model with new users/items.\n\n\n\n## Usage\n\n#### _pure collaborative-filtering example_ : \n\n```python\nimport numpy as np\nimport pandas as pd\nfrom libreco.data import random_split, DatasetPure\nfrom libreco.algorithms import SVDpp  # pure data, algorithm SVD++\nfrom libreco.evaluation import evaluate\n\ndata = pd.read_csv(\"examples/sample_data/sample_movielens_rating.dat\", sep=\"::\",\n                   names=[\"user\", \"item\", \"label\", \"time\"])\n\n# split whole data into three folds for training, evaluating and testing\ntrain_data, eval_data, test_data = random_split(data, multi_ratios=[0.8, 0.1, 0.1])\n\ntrain_data, data_info = DatasetPure.build_trainset(train_data)\neval_data = DatasetPure.build_evalset(eval_data)\ntest_data = DatasetPure.build_testset(test_data)\nprint(data_info)   # n_users: 5894, n_items: 3253, data sparsity: 0.4172 %\n\nsvdpp = SVDpp(task=\"rating\", data_info=data_info, embed_size=16, n_epochs=3, lr=0.001,\n              reg=None, batch_size=256)\n# monitor metrics on eval_data during training\nsvdpp.fit(train_data, verbose=2, eval_data=eval_data, metrics=[\"rmse\", \"mae\", \"r2\"])\n\n# do final evaluation on test data\nprint(\"evaluate_result: \", evaluate(model=svdpp, data=test_data,\n                                    metrics=[\"rmse\", \"mae\"]))\n# predict preference of user 2211 to item 110\nprint(\"prediction: \", svdpp.predict(user=2211, item=110))\n# recommend 7 items for user 2211\nprint(\"recommendation: \", svdpp.recommend_user(user=2211, n_rec=7))\n\n# cold-start prediction\nprint(\"cold prediction: \", svdpp.predict(user=\"ccc\", item=\"not item\",\n                                         cold_start=\"average\"))\n# cold-start recommendation\nprint(\"cold recommendation: \", svdpp.recommend_user(user=\"are we good?\",\n                                                    n_rec=7,\n                                                    cold_start=\"popular\"))\n```\n\n#### _include features example_ : \n\n```python\nimport numpy as np\nimport pandas as pd\nfrom libreco.data import split_by_ratio_chrono, DatasetFeat\nfrom libreco.algorithms import YouTubeRanking  # feat data, algorithm YouTubeRanking\n\ndata = pd.read_csv(\"examples/sample_data/sample_movielens_merged.csv\", sep=\",\", header=0)\ndata[\"label\"] = 1  # convert to implicit data and do negative sampling afterwards\n\n# split into train and test data based on time\ntrain_data, test_data = split_by_ratio_chrono(data, test_size=0.2)\n\n# specify complete columns information\nsparse_col = [\"sex\", \"occupation\", \"genre1\", \"genre2\", \"genre3\"]\ndense_col = [\"age\"]\nuser_col = [\"sex\", \"age\", \"occupation\"]\nitem_col = [\"genre1\", \"genre2\", \"genre3\"]\n\ntrain_data, data_info = DatasetFeat.build_trainset(\n    train_data, user_col, item_col, sparse_col, dense_col\n)\ntest_data = DatasetFeat.build_testset(test_data)\ntrain_data.build_negative_samples(data_info)  # sample negative items for each record\ntest_data.build_negative_samples(data_info)\nprint(data_info)  # n_users: 5962, n_items: 3226, data sparsity: 0.4185 %\n\nytb_ranking = YouTubeRanking(task=\"ranking\", data_info=data_info, embed_size=16,\n                             n_epochs=3, lr=1e-4, batch_size=512, use_bn=True,\n                             hidden_units=\"128,64,32\")\nytb_ranking.fit(train_data, verbose=2, shuffle=True, eval_data=test_data,\n                metrics=[\"loss\", \"roc_auc\", \"precision\", \"recall\", \"map\", \"ndcg\"])\n\n# predict preference of user 2211 to item 110\nprint(\"prediction: \", ytb_ranking.predict(user=2211, item=110))\n# recommend 7 items for user 2211\nprint(\"recommendation(id, probability): \", ytb_ranking.recommend_user(user=2211, n_rec=7))\n\n# cold-start prediction\nprint(\"cold prediction: \", ytb_ranking.predict(user=\"ccc\", item=\"not item\",\n                                               cold_start=\"average\"))\n# cold-start recommendation\nprint(\"cold recommendation: \", ytb_ranking.recommend_user(user=\"are we good?\",\n                                                          n_rec=7,\n                                                          cold_start=\"popular\"))\n```\n\n### For more examples and usages, see [User Guide](https://github.com/massquantity/LibRecommender/tree/master/examples#user-guide)\n\n\n\n## Data Format\n\nJUST normal data format, each line represents a sample. One thing is important, the model assumes that `user`, `item`, and `label` column index are 0, 1, and 2, respectively. You may wish to change the column order if that's not the case. Take for Example, the `movielens-1m` dataset:\n\n> 1::1193::5::978300760<br>\n> 1::661::3::978302109<br>\n> 1::914::3::978301968<br>\n> 1::3408::4::978300275\n\nBesides, if you want to use some other meta features (e.g., age, sex, category etc.),  you need to tell the model which columns are [`sparse_col, dense_col, user_col, item_col`], which means all features must be in a same table. See above `YouTubeRanking` for example.\n\n**Also note that your data should not contain missing values.**\n\n\n\n## Serving\n\nFor how to serve a trained model in LibRecommender, see [Serving Guide](<https://github.com/massquantity/LibRecommender/tree/master/serving>) .\n\n\n\n## Installation & Dependencies \n\nFrom pypi : &nbsp;\n\n```shell\n$ pip install LibRecommender==0.6.6\n```\n\nTo build from source, you 'll first need [Cython](<https://cython.org/>) and [Numpy](<https://numpy.org/>):\n\n```shell\n$ # pip install numpy cython\n$ git clone https://github.com/massquantity/LibRecommender.git\n$ cd LibRecommender\n$ python setup.py install\n```\n\nIf you encounter problems installing from pypi, try installing Cython first. However, in case that none of above method works, one can use a limited version of the library, which will not include algorithms implemented by Cython, i.e. UserCF, ItemCF and ALS.\n\n```shell\n$ pip install LibRecommender-limited==0.6.6\n```\n\n#### Basic Dependencies in `libreco`:\n\n- Python >= 3.6\n- tensorflow >= 1.14\n- numpy >= 1.15.4\n- pandas >= 0.23.4\n- scipy >= 1.2.1\n- scikit-learn >= 0.20.0\n- gensim>=3.6.0\n- tqdm >= 4.46.0\n- [hnswlib](https://github.com/nmslib/hnswlib)\n\n`LibRecommender` is tested under tensorflow 1.14 and 2.3. If you encounter any problem during running, feel free to open an issue.\n\n#### Optional Serving Dependencies:\n\n+ flask >= 1.0.0\n+ requests >= 2.22.0\n+ [redis](<https://redis.io/>) == 3.0.6\n+ [redis-py](https://github.com/andymccurdy/redis-py) >= 3.3.5\n+ [faiss](https://github.com/facebookresearch/faiss) == 1.5.2\n+ [Tensorflow Serving](<https://github.com/tensorflow/serving>)\n\n\n\n## References\n\n|     Algorithm     | Category | Paper                                                        |\n| :---------------: | :------: | :----------------------------------------------------------- |\n| userCF / itemCF |   pure   | [Item-Based Collaborative Filtering Recommendation Algorithms](http://www.ra.ethz.ch/cdstore/www10/papers/pdf/p519.pdf) |\n|        SVD        |   pure   | [Matrix Factorization Techniques for Recommender Systems](https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf) |\n|      SVD ++       |   pure   | [Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model](https://dl.acm.org/citation.cfm?id=1401944) |\n|        ALS        |   pure   | 1. [Matrix Completion via Alternating Least Square(ALS)](https://stanford.edu/~rezab/classes/cme323/S15/notes/lec14.pdf) / <br>2. [Collaborative Filtering for Implicit Feedback Datasets](http://yifanhu.net/PUB/cf.pdf) / <br>3. [Applications of the Conjugate Gradient Method for Implicit Feedback Collaborative Filtering](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.379.6473&rep=rep1&type=pdf) |\n|        NCF        |   pure   | [Neural Collaborative Filtering](https://arxiv.org/pdf/1708.05031.pdf) |\n|        BPR        |   pure   | [BPR: Bayesian Personalized Ranking from Implicit Feedback](https://arxiv.org/ftp/arxiv/papers/1205/1205.2618.pdf) |\n|    Wide & Deep    |   feat   | [Wide & Deep Learning for Recommender Systems](https://arxiv.org/pdf/1606.07792.pdf) |\n|        FM         |   feat   | [Factorization Machines](https://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf) |\n|      DeepFM       |   feat   | [DeepFM: A Factorization-Machine based Neural Network for CTR Prediction](https://arxiv.org/pdf/1703.04247.pdf) |\n|   YouTubeMatch  YouTubeRanking |   feat, seq   | [Deep Neural Networks for YouTube Recommendations](<https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45530.pdf>) |\n| AutoInt | feat | [AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks](https://arxiv.org/pdf/1810.11921.pdf) |\n|        DIN        |   feat, seq   | [Deep Interest Network for Click-Through Rate Prediction](https://arxiv.org/pdf/1706.06978.pdf) |\n| Item2Vec | pure, seq | [Item2Vec: Neural Item Embedding for Collaborative Filtering](https://arxiv.org/pdf/1603.04259.pdf) |\n| RNN4Rec / GRU4Rec | pure, seq | [Session-based Recommendations with Recurrent Neural Networks](https://arxiv.org/pdf/1511.06939.pdf) |\n| Caser | pure, seq | [Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding](https://arxiv.org/pdf/1809.07426.pdf) |\n| WaveNet | pure, seq | [WaveNet: A Generative Model for Raw Audio](https://arxiv.org/pdf/1609.03499.pdf) |\n\n> `pure` means collaborative-filtering algorithms which only use behavior data,  `feat` means other features can be included, `seq` means sequence or graph algorithms.\n\n## License\n\n#### MIT\n\n<br>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/massquantity/LibRecommender",
    "keywords": "Matrix Factorization,Collaborative Filtering,Content-Based,Recommender System,Deep Learning,Data Mining",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LibRecommender-limited",
    "package_url": "https://pypi.org/project/LibRecommender-limited/",
    "platform": "",
    "project_url": "https://pypi.org/project/LibRecommender-limited/",
    "project_urls": {
      "Homepage": "https://github.com/massquantity/LibRecommender"
    },
    "release_url": "https://pypi.org/project/LibRecommender-limited/0.6.6.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collaborative-filtering and content-based recommender system for both explicit and implicit datasets.",
    "version": "0.6.6.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10500008,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "546ed4275a782c539e26aa72771cd622a6143626955de14ce9f4c7905f4f3412",
          "md5": "616e89122d7482fe5ecb45c751d51d6f",
          "sha256": "05116175ccad91bd6c306f00f441ad920329a1b89e4f38437bf89730663fe89d"
        },
        "downloads": -1,
        "filename": "LibRecommender-limited-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "616e89122d7482fe5ecb45c751d51d6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75535,
        "upload_time": "2021-05-28T14:29:31",
        "upload_time_iso_8601": "2021-05-28T14:29:31.422453Z",
        "url": "https://files.pythonhosted.org/packages/54/6e/d4275a782c539e26aa72771cd622a6143626955de14ce9f4c7905f4f3412/LibRecommender-limited-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79008455b4799e6ca8059a3628d429bee9ca6b89dd683b3b289307130beac408",
          "md5": "27ca6bb5f48042c8b6698368a5e5dc6c",
          "sha256": "ea50a656e7a1e077ea7a204d688eb420f5556e9d0384bcdb5469eb6e723206cb"
        },
        "downloads": -1,
        "filename": "LibRecommender-limited-0.6.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "27ca6bb5f48042c8b6698368a5e5dc6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 469509,
        "upload_time": "2021-05-28T14:13:51",
        "upload_time_iso_8601": "2021-05-28T14:13:51.148039Z",
        "url": "https://files.pythonhosted.org/packages/79/00/8455b4799e6ca8059a3628d429bee9ca6b89dd683b3b289307130beac408/LibRecommender-limited-0.6.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8954bc629598bd405d0ffd68d19a677eededac1605a4fb4c1c0c0c1cca9abb37",
          "md5": "e63b229a23529da4cdddc1910c989739",
          "sha256": "e17e2a97e1d6e7f96e465740fb65dce7f98ddb8eed63bba0858fb4e88642e58a"
        },
        "downloads": -1,
        "filename": "LibRecommender-limited-0.6.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e63b229a23529da4cdddc1910c989739",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75630,
        "upload_time": "2021-05-28T14:24:44",
        "upload_time_iso_8601": "2021-05-28T14:24:44.224103Z",
        "url": "https://files.pythonhosted.org/packages/89/54/bc629598bd405d0ffd68d19a677eededac1605a4fb4c1c0c0c1cca9abb37/LibRecommender-limited-0.6.6.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8954bc629598bd405d0ffd68d19a677eededac1605a4fb4c1c0c0c1cca9abb37",
        "md5": "e63b229a23529da4cdddc1910c989739",
        "sha256": "e17e2a97e1d6e7f96e465740fb65dce7f98ddb8eed63bba0858fb4e88642e58a"
      },
      "downloads": -1,
      "filename": "LibRecommender-limited-0.6.6.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e63b229a23529da4cdddc1910c989739",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 75630,
      "upload_time": "2021-05-28T14:24:44",
      "upload_time_iso_8601": "2021-05-28T14:24:44.224103Z",
      "url": "https://files.pythonhosted.org/packages/89/54/bc629598bd405d0ffd68d19a677eededac1605a4fb4c1c0c0c1cca9abb37/LibRecommender-limited-0.6.6.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}