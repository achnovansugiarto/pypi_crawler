{
  "info": {
    "author": "DISI UniBo NLP",
    "author_email": "disi.unibo.nlp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<h1 align=\"center\">nlg-metricverse üåå</h1>\n\n<table align=\"center\">\n    <tr>\n        <td align=\"left\">üöÄ Spaceship</td>\n        <td align=\"left\">\n          <a href=\"https://pypi.org/project/nlg-metricverse\"><img src=\"https://img.shields.io/pypi/v/nlg-metricverse?color=blue\" alt=\"PyPI\"></a>\n          <a href=\"https://pypi.org/project/nlg-metricverse\"><img src=\"https://img.shields.io/pypi/pyversions/nlg-metricverse\" alt=\"Python versions\"></a>\n          <a href=\"https://www.python.org/\"><img src=\"https://img.shields.io/badge/Made%20with-Python-1f425f.svg?color=purple&logo=python&logoColor=FFF800\" alt=\"Made with Python\"></a>\n          <br>\n          <a href=\"https://github.com/disi-unibo-nlp/nlg-metricverse/actions\"><img alt=\"Build status\" src=\"https://github.com/disi-unibo-nlp/nlg-metricverse/actions/workflows/ci.yml/badge.svg\"></a>\n          <a href=\"https://github.com/disi-unibo-nlp/nlg-metricverse/issues\"><img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues/disi-unibo-nlp/nlg-metricverse.svg\"></a>\n        </td>\n    </tr>\n    <tr>\n        <td align=\"left\">üë®‚ÄçüöÄ Astronauts</td>\n        <td align=\"left\">\n          <a href=\"https://github.com/disi-unibo-nlp/nlg-metricverse/\"><img src=\"https://badges.frapsoft.com/os/v1/open-source.svg?v=103\" alt=\"Open Source Love svg1\"></a>\n          <a href=\"https://github.com/disi-unibo-nlp/nlg-metricverse/blob/main/LICENSE\"><img alt=\"License: MIT\" src=\"https://img.shields.io/pypi/l/nlg-metricverse\"></a>\n          <a href=\"https://GitHub.com/Nthakur20/StrapDown.js/graphs/commit-activity\"><img src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" alt=\"Maintenance\"></a>\n        </td>\n    </tr>\n    <tr>\n        <td align=\"left\">üõ∞Ô∏è Training Program</td>\n        <td align=\"left\">\n          <a href=\"\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a>\n        </td>\n    </tr>\n    <tr>\n        <td align=\"left\">üìï Operating Manual</td>\n        <td align=\"left\">\n            <a href=\"https://aclanthology.org/2022.coling-1.306/\">COLING22 Long Paper</a>\n        </td>\n    </tr>\n</table>\n\n<br>\n\n> One NLG evaluation library to rule them all\n\n<p align=\"center\">\n  <img src=\"./figures/nlgmetricverse_banner.png\" title=\"nlg-metricverse\" alt=\"\">\n</p>\n\n### Explore the universe of Natural Language Generation (NLG) evaluation metrics.\nNLG Metricverse is an end-to-end Python library for NLG evaluation, devised to provide a living unified codebase for fast application, analysis, comparison, visualization, and prototyping of automatic metrics.\n* Spures the adoption of newly proposed metrics, unleashing their potential\n* Reduces the implementational burden, allowing users to easily move from papers to practical applications.\n* Increases comparability and replicability of NLG research.\n* Provides content-rich metric cards and static/interactive visualization tools to improve metric understanding and scoring interpretation.\n\n## Tables Of Contents\n- [Motivations](#-motivations)\n- [Available Metrics](#-available-metrics-and-supported-features)\n- [Installation](#-installation)\n    - [Explore on Hugging Face Spaces](#explore-on-hugging-face-spaces)\n- [Quickstart](#-quickstart)\n    - [Metric Selection](#metric-selection)\n        - [Metric Documentation](#metric-documentation)\n        - [Metric Filtering](#metric-filtering)\n    - [Metric Usage](#metric-usage)\n        - [Prediction-Reference Cardinality](#prediction-reference-cardinality)\n        - [Scorer Application](#scorer-application)\n        - [Metric-specific Parameters](#metric-specific-parameters)\n        - [Outputs](#outputs)\n- [Code Style](#code-style)\n- [Custom Metrics](#-custom-metrics)\n- [Contributing](#-contributing)\n- [Contact](#-contact)\n- [License](#license)\n\n\n## üí° Motivations\n* üìñ As Natural Language Generation (NLG) models are getting better over time, accurately evaluating them is becoming an increasingly pressing priority, asking researchers to deal with semantics, different plausible targets, and multiple intrinsic quality dimensions (e.g., informativeness, fluency, factuality).\n* ü§ñ Task examples: machine translation, abstractive question answering, single/multi-document summarization, data-to-text, chatbots, image/video captioning, etc.\n* üìå Human evaluation is often the best indicator of the quality of a system. However, designing crowd sourcing experiments is an expensive and high-latency process, which does not easily fit in a daily model development pipeline. Therefore, NLG researchers commonly use automatic evaluation metrics, which provide an acceptable proxy for quality and are very cheap to compute.\n* üìå NLG metrics automatically compute a holistic or dimension-specific score, an acceptable proxy for effectiveness and efficiency. However, they are becoming an important bottleneck for research in the field. As we know, areas can stagnate due to poor metrics, and we believe that you shouldn't feel confined to the most traditional overlap-based techniques like ROUGE.\n* üí° If you're working on an established problem, you'll feel pressure from readers to be conservative and use the metrics that have already been tested for the same task. However, this might be a compelling pressure. Our view is that NLP engineers should enrich their evaluation toolkits with multiple metrics capturing different textual properties, being free to argue against cultural norms and motivate new ones, also exploring the latest contributions focused on semantics.\n* ‚ò† New NLG metrics are constantly being proposed to top-tier venue conferences, but their implementation remains disrupted, with distinct environments, properties, settings, benchmarks, and features‚Äîmaking them difficult to compare or apply.\n* ‚ò† The absence of a collective and continuously updated repository discourages the use of modern solutions and slows their understanding.\n* üéØ NLG Metricverse implements a large number of prominent evaluation metrics in NLG, seeking to articulate the textual properties they encode (e.g., fluency, grammatical correctness, informativeness), tasks, and limits. Understanding, using, and examining a metric has never been easier.\n\n\n## ü™ê Available Metrics and Supported Features\nNLG Metricverse supports 38 diverse evaluation metrics overall (last update: October 12, 2022). The code for these metrics will be progressively released in the coming weeks.\n\nSome libraries have already tried to make an integrated environment. To our best knowledge, [NLGEval](https://github.com/Maluuba/nlg-eval), [HugginFace Datasets](https://huggingface.co/docs/datasets/index), [Evaluate](https://huggingface.co/docs/evaluate/index), [Torch-Metrics](https://torchmetrics.readthedocs.io/en/stable/), and [Jury](https://github.com/obss/jury) are the only resources available.\nHowever, none of them possess all the properties listed below: (i) large number of heterogeneous NLG metrics, (ii) concurrent computation of more metrics at once, (iii) support for multiple references and/or predictions, (iv) meta-evaluation, and (v) visualization.\n\nThe following table summarizes the discrepancies between NLG Metricverse and related work.\n\n| | NLG-Metricverse | NLGEval | Datasets | Evaluate | TorchMetrics | Jury |\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\n| #NLG-specific metrics | 38 + Datasets | 8 | 22 | 22 | 13 | 19 + Datasets |\n| More metrics at once | :white_check_mark: | :x: | :x: | :white_check_mark: | :x: | :white_check_mark: |\n| Multiple refs/preds | :white_check_mark: | :white_check_mark: | :x: | :x: | :x: | :white_check_mark: |\n| Meta-evaluation | :white_check_mark: | :x: | :x: | :x: | :x: | :x: |\n| Visualization | :white_check_mark: | :x: | :x: | :x: | :x: | :x: |\n\nüîç [Complete comparison and supported metrics](https://github.com/disi-unibo-nlp/nlg-metricverse/blob/main/comparison.md) \n\n\n## üîå Installation\nInstall from PyPI repository\n```\npip install nlg-metricverse\n```\nor build from source\n```\ngit clone https://github.com/disi-unibo-nlp/nlg-metricverse.git\ncd nlg-metricverse\npip install -v .\n```\n\n#### Explore on Hugging Face Spaces\nThe **Spaces** edition of NLG Metricverse will be launched soon. Check it out here:\n[![](./figures/spaces.png)](https://huggingface.co/spaces/disi-unibo-nlp/nlg-metricverse)\n\n## üöÄ Quickstart\n\nIt is only <b>two lines of code</b> to evaluate generated outputs: <b>(i)</b> instantiate your scorer by selecting the desired metric(s) and <b>(ii)</b> apply it!\n\n### Metric Selection\nSpecify the metrics you want to use on instantiation,\n```python\n# If you specify more metrics, each of them will be applyied on your data (allowing for a fast prediction/efficiency comparison)\nscorer = NLGMetricverse(metrics=[\"bleu\", \"rouge\"])\n```\nor directly import metrics from `nlgmetricverse.metrics` as classes, then instantiate and use them as desired.\n```python\nfrom nlgmetricverse.metrics import BertScore\n\nscorer = BertScore.construct()\n```\nYou can seemlessly access both `nlgmetricverse` and HuggingFace `datasets` metrics through `nlgmetricverse.load_metric`.\nNLG Metricverse falls back to `datasets` implementation of metrics for the ones that are currently not supported; you can see the metrics available for `datasets` on [datasets/metrics](https://github.com/huggingface/datasets/tree/master/metrics). \n```python\nbleu = NLGMetricverse.load_metric(\"bleu\")\n# metrics not available in `nlgmetricverse` but in `datasets`\nwer = NLGMetricverse.load_metric(\"competition_math\") # It falls back to `datasets` package with a warning\n```\nNote: if a selected metric requires specific packages, you'll be invited to install them (e.g., \"bertscore\" ‚Üí `pip install bertscore`).\n\n\n### Metric Usage\n\n#### Prediction-Reference Cardinality\n\n‚ò† NLG evaluation is very challenging also because the relationships between candidate and reference texts tend to be one-to-many or many-to-many. An artificial text predicted by a model might have multiple human references (i.e., there is more than one effective way to say most things), as well as a model can generate multiple distinct outputs. Such cardinality is crucial, but official implementations tend to neglect it. We do not.\n\n<i>1:1</i>. One prediction, one reference ([p<sub>1</sub>, ..., p<sub>n</sub>] and [r<sub>1</sub>, ..., r<sub>n</sub>] syntax).\n```python\npredictions = [\"Evaluating artificial text has never been so simple\", \"the cat is on the mat\"]\nreferences = [\"Evaluating artificial text is not difficult\", \"The cat is playing on the mat.\"]\n```\n<i>1:M</i>. One prediction, many references ([p<sub>1</sub>, ..., p<sub>n</sub>] and [[r<sub>11</sub>, ..., r<sub>1m</sub>], ..., [r<sub>n1</sub>, ..., r<sub>nm</sub>]] syntax)\n```python\npredictions = [\"Evaluating artificial text has never been so simple\", \"the cat is on the mat\"]\nreferences = [\n    [\"Evaluating artificial text is not difficult\", \"Evaluating artificial text is simple\"],\n    [\"The cat is playing on the mat.\", \"The cat plays on the mat.\"]\n]\n```\n<i>K:M</i>. Many predictions, many references ([[p<sub>11</sub>, ..., p<sub>1k</sub>], ..., [p<sub>n1</sub>, ..., p<sub>nk</sub>]] and [[r<sub>11</sub>, ..., r<sub>1m</sub>], ..., [r<sub>n1</sub>, ..., r<sub>nm</sub>]] syntax). This is helpful for language models with a decoding strategy focused on diversity (e.g., beam search, temperature sampling).\n```python\npredictions = [\n    [\"Evaluating artificial text has never been so simple\", \"The evaluation of automatically generated text is simple.\"],\n    [\"the cat is on the mat\", \"the cat likes playing on the mat\"]\n]\nreferences = [\n    [\"Evaluating artificial text is not difficult\", \"Evaluating artificial text is simple\"],\n    [\"The cat is playing on the mat.\", \"The cat plays on the mat.\"]\n]\n```\n\n#### Scorer Application\n```python\nscores = scorer(predictions, references)\n```\nThe `scorer` automatically selects the proper strategy for applying the selected metric(s) depending on the input format. In any case, if a prediction needs to be compared against multiple references, you can customize the reduction function to use (e.g., `reduce_fn=max` chooses the prediction-reference pair with the highest score for each of the N items in the dataset).\n```python\nscores = scorer.compute(predictions, references, reduce_fn=\"max\")\n```\n\n#### Metric-specific Parameters\nAdditional metric-specific parameters can be specified on instantiation.\n```python\nmetrics = [\n    load_metric(\"bleu\", resulting_name=\"bleu_1\", compute_kwargs={\"max_order\": 1}),\n    load_metric(\"bleu\", resulting_name=\"bleu_2\", compute_kwargs={\"max_order\": 2}),\n    load_metric(\"bertscore\", resulting_name=\"bertscore_1\", compute_kwargs={\"model_type\": \"microsoft/deberta-large-mnli\", \"idf\": True}),\n    load_metric(\"rouge\")]\nscorer = NLGMetricverse(metrics=metrics)\n```\n\n### Code Style\nTo check the code style,\n```\npython tests/run_code_style.py check\n```\nTo format the codebase,\n```\npython tests/run_code_style.py format\n```\n\n## üé® Custom Metrics\nYou can use custom metrics by inheriting `nlgmetricverse.metrics.Metric`.\nYou can see current metrics implemented on NLG Metricverse from [nlgmetricverse/metrics](https://github.com/disi-unibo-nlp/nlg-metricverse/tree/main/nlgmetricverse/metrics).\nNLG Metricverse itself uses `datasets.Metric` as a base class to drive its own base class as `nlgmetricverse.metrics.Metric`. The interface is similar; however, NLG Metricverse makes the metrics to take a unified input type by handling metric-specific inputs and allowing multiple cardinalities (1:1, 1:M, K:M).\nFor implementing custom metrics, both base classes can be used but we strongly recommend using `nlgmetricverse.metrics.Metric` for its advantages.\n```python\nfrom nlgmetricverse.metrics import MetricForLanguageGeneration\n\nclass CustomMetric(MetricForLanguageGeneration):\n    def _compute_single_pred_single_ref(\n        self, predictions, references, reduce_fn = None, **kwargs\n    ):\n        raise NotImplementedError\n\n    def _compute_single_pred_multi_ref(\n        self, predictions, references, reduce_fn = None, **kwargs\n    ):\n        raise NotImplementedError\n\n    def _compute_multi_pred_multi_ref(\n            self, predictions, references, reduce_fn = None, **kwargs\n    ):\n        raise NotImplementedError\n```\nFor more details, have a look at base metric implementation [nlgmetricverse.metrics.Metric](./nlgmetricverse/metrics/_core/base.py)\n\n## üôå Contributing\nThanks go to all these wonderful collaborations for their contribution towards the NLG Metricverse library:\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://giacomofrisoni.github.io/\"><img src=\"https://github.com/giacomofrisoni.png\" width=\"100px;\" alt=\"\"/><br /><sub><b>Giacomo Frisoni</b></sub></a></td>\n    <td align=\"center\"><a href=\"https://andreazammarchi3.github.io/\"><img src=\"https://github.com/andreazammarchi3.png\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrea Zammarchi</b></sub></a></td>\n    <td align=\"center\"><img src=\"https://github.com/marcoavagnano98.png\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marco Avagnano</b></sub></td>\n</table>\n\n> We are hoping that the open-source community will help us edit the code and make it better!\n> Don't hesitate to open issues and contribute the fix/improvement! We can guide you if you're not sure where to start but want to help us out ü•á.\n> In order to contribute a change to our code base, please submit a pull request (PR) via GitHub and someone from our team will go over it and accept it.\n\n> If you have troubles, suggestions, or ideas, the [Discussion](https://github.com/disi-unibo-nlp/nlg-metricverse/discussions) board might have some relevant information. If not, you can post your questions there üí¨üó®.\n\n## ‚úâ Contact\nContact person: Giacomo Frisoni, [giacomo.frisoni@unibo.it](mailto:giacomo.frisoni@unibo.it).\nThis research work has been conducted within the Department of Computer Science and Engineering, University of Bologna, Italy.\n\n## License\n\nThe code is released under the [MIT License](LICENSE). It should not be used to promote or profit from violence, hate, and division, environmental destruction, abuse of human rights, or the destruction of people's physical and mental health.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/disi-unibo-nlp/nlg-metricverse/archive/refs/tags/0.9.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/disi-unibo-nlp/nlg-metricverse",
    "keywords": "natural-language-processing natural-language-generation nlg-evaluation metrics language-models visualization python pytorch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nlg-metricverse",
    "package_url": "https://pypi.org/project/nlg-metricverse/",
    "platform": null,
    "project_url": "https://pypi.org/project/nlg-metricverse/",
    "project_urls": {
      "Download": "https://github.com/disi-unibo-nlp/nlg-metricverse/archive/refs/tags/0.9.6.tar.gz",
      "Homepage": "https://github.com/disi-unibo-nlp/nlg-metricverse"
    },
    "release_url": "https://pypi.org/project/nlg-metricverse/0.9.6/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An End-to-End Library for Evaluating Natural Language Generation.",
    "version": "0.9.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15842642,
  "releases": {
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8112145a9f0c4521d5356e788c2422afaa61c01c45454c73df858b2c33eeba5e",
          "md5": "44dab738ad539dff62170a6ce64bc99b",
          "sha256": "4b0890d08ccf7135a307fc778887e809c146cce85064b2e94cee4584a70528ba"
        },
        "downloads": -1,
        "filename": "nlg-metricverse-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "44dab738ad539dff62170a6ce64bc99b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 108815,
        "upload_time": "2022-11-17T16:23:11",
        "upload_time_iso_8601": "2022-11-17T16:23:11.407657Z",
        "url": "https://files.pythonhosted.org/packages/81/12/145a9f0c4521d5356e788c2422afaa61c01c45454c73df858b2c33eeba5e/nlg-metricverse-0.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f713aed102e3f532007748ce343659e97be7683d0052c58b383e5428ab6ebe86",
          "md5": "d3e6667da193794177ba9c2bcabb23bc",
          "sha256": "72e740869ee34df1ce8a3f6efef47c907fb78c9fe9e268088c1af9796a9d63fb"
        },
        "downloads": -1,
        "filename": "nlg-metricverse-0.9.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d3e6667da193794177ba9c2bcabb23bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 107373,
        "upload_time": "2022-11-21T16:03:58",
        "upload_time_iso_8601": "2022-11-21T16:03:58.319403Z",
        "url": "https://files.pythonhosted.org/packages/f7/13/aed102e3f532007748ce343659e97be7683d0052c58b383e5428ab6ebe86/nlg-metricverse-0.9.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f713aed102e3f532007748ce343659e97be7683d0052c58b383e5428ab6ebe86",
        "md5": "d3e6667da193794177ba9c2bcabb23bc",
        "sha256": "72e740869ee34df1ce8a3f6efef47c907fb78c9fe9e268088c1af9796a9d63fb"
      },
      "downloads": -1,
      "filename": "nlg-metricverse-0.9.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d3e6667da193794177ba9c2bcabb23bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 107373,
      "upload_time": "2022-11-21T16:03:58",
      "upload_time_iso_8601": "2022-11-21T16:03:58.319403Z",
      "url": "https://files.pythonhosted.org/packages/f7/13/aed102e3f532007748ce343659e97be7683d0052c58b383e5428ab6ebe86/nlg-metricverse-0.9.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}