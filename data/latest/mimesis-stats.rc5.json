{
  "info": {
    "author": "Jonathon Mellor",
    "author_email": "mellorjonathon1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mimesis_stats\n\nThis package exists to extend the capabilities of [mimesis](https://mimesis.readthedocs.io/index.html) for use in statistical data pipelines.\n\n`mimesis` provides _fast_ fake data generation, and comes with a wide range of [data providers, formats, structures and localised options](https://mimesis.readthedocs.io/api.html). In addition, it provides a [schema structure](https://mimesis.readthedocs.io/getting_started.html#schema-and-fields) which makes data generation for data frames very easy. Before using this package it is recommended to become familiar with the basics of `mimesis` fake data generation, such as through this [getting started page](https://mimesis.readthedocs.io/getting_started.html).\n\nDue to the extensibility, custom data providers can be created for use within the framework. This `mimesis_stats` package aims to use the framework for use in statistical pipelines, particularly for generating dummy data for surveys.\n\nHowever, `mimesis` data generation / providers have two primary limitations this package extension addresses:\n\n* Uni-variable - each data provider method produces a single value. Often in practice there are dependencies and relationships between different variables / columns.\n* Limited in statistical properties - `mimesis` draws samples using a uniform distribution. Real distributions are often weighted, or have specific properties (such as a gaussian)\n\n`mimesis_stats` uses a `StatsSchema` object that allows multiple variables related to one another to be created using methods from `MultiVariable`.\n\n`mimesis_stats` adds data providers for: discrete choice distributions, as well as the ability to pass in custom functions, such as those from `numpy` or `scipy`, or user defined functions.\n\nTo see an example use case of this package scroll to the bottom of this document in the \"Working with pandas\" section.\n\n# mimesis_stats providers\n\nThe package contains two supplementary providers, the main object of generating `mimesis` data. One for producing discrete / continuous distributions and the other for dependent multi-variable samples.\n\n## Distribution\n\nIdeal for generating categorical data with `Distribution.discrete_distribution()` or a numerical variable using `Distribution.generic_distribution()` with a user defined or `numpy/scipy` function.\n\n_All_ `mimesis_stats` providers have `null_prop` and `null_value` arguments to add in missing at random null values. For multi-variable producers this is done by passing in a list of propritionas and missing values corresponding to each variable made.\n\n### Categorical\n\nGeneral use for discrete distributions, the main addition from base `mimesis` are the weighting and null options.\n\n```python console\n>>> from mimesis_stats.providers.distribution import Distribution\n>>> Distribution.distrete_distribution(\n...     population=[\"First\", \"Second\", \"Third\"],\n...     weights=[0.01, 0.01, 0.98]\n... )\n\"Third\"\n>>> Distribution.distrete_distribution(\n...     population=[\"Apple\", \"Banana\"],\n...     weights=[0.5, 0.5],\n...     null_prop=1.0,\n...     null_value=None\n... )\nNone\n```\n\n## MultiVariable\n\nThis provider allows multiple variables dependent or related to each other to be created through one provider call.\n\nIn practice, produced dictionary key-value pairs can be separated into different variables.\n\n```python console\n>>> from mimesis_stats.providers.multivariable import MultiVariable\n>>> MultiVariable.dependent_variables(\n...     variable_names=[\"consent\", \"favourite_fruit\"],\n...     options=[(\"Yes\", \"Lemon\"), (\"No\", None)],\n...     weights=[0.7, 0.3]\n... )\n{\"consent\": \"Yes\", \"favourit_fruit\": \"Lemon\")\n```\n\nWithin the possible combinations other provider calls can be made to extend the complexity of generation.\n\n```python console\n>>> from mimesis_stats.providers.multivariable import MultiVariable\n>>> from mimesis import Food\n>>> MultiVariable.dependent_variables(\n...     variable_names=[\"consent\", \"favourite_fruit\"],\n...     options=[(\"Yes\", Food.fruit()), (\"No\", None)],\n...     weights=[0.9, 0.1]\n... )\n{\"consent\": \"Yes\", \"favourit_fruit\": \"Banana\")\n```\n\n# StatsSchema\n\nFor generating samples of many variables consistently it is recommended to use a schema. `mimesis` has a `Schema` object, however, in order to fully take advantage of the seeding and multi-variable nature of the `mimesis_stats.providers` approaches `StatsSchema` should be used instead to define a schema.\n\nA `StatsSchema` object requies a `schema` to be passed to it.\n\nA `schema`/`schema_blueprint` is a `lambda` function that contains the code to generate each variable when called.\n\nTo define a `schema_blueprint` a `StatsField` (equivalent to `Field` from `mimesis`) needs to be declared. This sets a seed and a location basis for providers.\n\nThe `schema_blueprint` is then passed to the `StatsSchema` to define the generator.\n\nExample `mimesis_stats` schema:\n\n```python console\n>>> from mimesis_stats.stats_schema import StatsField, StatsSchema\n>>> from numpy.random import pareto\n>>> field = StatsField(seed=42)\n>>> schema_blueprint = lambda: {\n...     \"name\": field(\"person.full_name\"),\n...     \"salary\": field(\"generic_distribution\", func=pareto, a=3)\n... }\n>>> schema = StatsSchema(schema=schema_blueprint)\n>>> schema.create(iterations=1)\n[{'name': 'Annika Reilly', 'salary': 0.16932036645405568}]\n>>> schema.create(iterations=2)\n[{'name': 'Hank Day', 'salary': 1.7274682836709054},\n{'name': 'Crystle Osborn', 'salary': 0.5510238033601347}]\n```\n\n## Working with pandas\n\nStandard use of the package will be with a dataframe.\n\nThe code snippets below outline the suggested approach for generating a dataframe of random data, such as a survey responses.\n\nConsider the following basic survey.\n\nWe collect the following information:\n\n* An ID code identifying each respondant - `\"ID\"`\n* Their email address - `\"email\"`\n* Their occupation - `\"occupation\"`\n* Whether they are a parent or not - `\"parent\"`\n* How important they think schools are when buying a house (out of 10) - `\"school_importance\"`\n\nThe `# fmt: off/on` lines stop the `black` formatter changing the schema blueprint.\n\n```python\nimport pandas as pd\nfrom mimesis_stats.stats_schema import StatsField, StatsSchema\nfrom scipy.stats import truncnorm\n\n# Define parameters of truncated normal\nlower = 0\nupper = 10\nmu_true = 7\nmu_false = 4\nsigma = 2.5\n\nfield = StatsField(seed=42)\n\n# fmt: off\nschema_blueprint = lambda: {\n    \"ID\": field(\"random.custom_code\", mask='SCHL#####', digit=\"#\"),\n    \"email\": field(\"person.email\"),\n    \"occupation\": field(\"person.occupation\"),\n    \"parent_school_importance\": field(\n        \"dependent_variables\",\n        variable_names=[\"parent\", \"school_importance\"],\n        options=[\n            (True, round(truncnorm.rvs(a=(lower-mu_true)/sigma, b=(upper-mu_true)/sigma,\n                                    loc=mu_true, scale=sigma))),\n            (False, round(truncnorm.rvs(a=(lower-mu_false)/sigma, b=(upper-mu_false)/sigma,\n                                    loc=mu_false, scale=sigma)))\n        ],\n        weights=[0.3, 0.7],\n    )\n}\n# fmt: on\n\nschema = StatsSchema(schema_blueprint)\n\ndf = pd.DataFrame(schema.create(iterations=1000))\nprint(df.head())\n```\nOutput:\n```s\n          ID                       email           occupation  parent  school_importance\n0  SCHL60227   pyoses1812@protonmail.com             Milklady   False                  8\n1  SCHL68040        dreep1871@yandex.com        Choreographer    True                  7\n2  SCHL25016  killing1844@protonmail.com            Scientist   False                  7\n3  SCHL52580         brach1847@gmail.com  Leaflet Distributor   False                  0\n4  SCHL86319     cyrenaic1813@yandex.com         Yacht Master    True                  9\n```\n\n```python\n# Check the summary stats of the two distributions\n# (remember mean of sample != mean of generation parameter due to truncation)\nparent_breakdown = df.groupby(\"parent\").agg([\"min\", \"max\", \"median\", \"mean\"])\n\nprint(parent_breakdown)\n```\nOutput:\n```s\n       school_importance\n                     min max median      mean\nparent\nFalse                  0  10      4  4.219477\nTrue                   0  10      7  6.432692\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/jonathonmellor/mimesis-stats/archive/refs/tags/v0.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jonathonmellor/mimesis-stats",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mimesis-stats",
    "package_url": "https://pypi.org/project/mimesis-stats/",
    "platform": "",
    "project_url": "https://pypi.org/project/mimesis-stats/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jonathonmellor/mimesis-stats/issues",
      "Download": "https://github.com/jonathonmellor/mimesis-stats/archive/refs/tags/v0.1.1.tar.gz",
      "Homepage": "https://github.com/jonathonmellor/mimesis-stats"
    },
    "release_url": "https://pypi.org/project/mimesis-stats/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.8",
    "summary": "Extension of mimesis library for data generation with statistical properties",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11554978,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d71b38614d5af8a1f0625e9854fc0c6199d4eb82c0e89782593ba9276396f3",
          "md5": "cffc759f90c5cde854afa1c211111e35",
          "sha256": "250e4f4dc8c13b98ec69b932853a3111caf4f8df599283eac5787785841f6b32"
        },
        "downloads": -1,
        "filename": "mimesis_stats-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cffc759f90c5cde854afa1c211111e35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.6.8",
        "size": 5141,
        "upload_time": "2021-09-22T18:57:55",
        "upload_time_iso_8601": "2021-09-22T18:57:55.751512Z",
        "url": "https://files.pythonhosted.org/packages/b4/d7/1b38614d5af8a1f0625e9854fc0c6199d4eb82c0e89782593ba9276396f3/mimesis_stats-0.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "Failed install"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc860a18f6baad520562c9079239ca3489a3733a757c568d37b48773a7cb796b",
          "md5": "861efdec57042270b6bde900f77256dd",
          "sha256": "d69d2ce55299dd522e537c56e13cf3b04bf9f703f66c63e6aa0a76d4874411ed"
        },
        "downloads": -1,
        "filename": "mimesis_stats-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "861efdec57042270b6bde900f77256dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 5227,
        "upload_time": "2021-09-23T21:55:17",
        "upload_time_iso_8601": "2021-09-23T21:55:17.074880Z",
        "url": "https://files.pythonhosted.org/packages/fc/86/0a18f6baad520562c9079239ca3489a3733a757c568d37b48773a7cb796b/mimesis_stats-0.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "Failed install "
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f47a75762f806bc44e5a33dce90b28b3ff9dab7045e6f16efcc615de877b14bc",
          "md5": "1c433a3681011c19e07c806ab99858bc",
          "sha256": "ecac5a0b1490d8c785df68490c38394d71273762434f1c922fd90ea643da97c6"
        },
        "downloads": -1,
        "filename": "mimesis_stats-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1c433a3681011c19e07c806ab99858bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 5288,
        "upload_time": "2021-09-23T22:18:21",
        "upload_time_iso_8601": "2021-09-23T22:18:21.532834Z",
        "url": "https://files.pythonhosted.org/packages/f4/7a/75762f806bc44e5a33dce90b28b3ff9dab7045e6f16efcc615de877b14bc/mimesis_stats-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": "Failed install"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec2c76f32eb7a7c1014864d6661eb7a22d8ecd5fbd540932e0b03cc3a065e038",
          "md5": "aaed569393bb75f2fe7ec5d7476d39e4",
          "sha256": "c373f1ecb1233727a100e7789dd64989addcfe508c38e29c5a82a9cdaf40b66a"
        },
        "downloads": -1,
        "filename": "mimesis_stats-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaed569393bb75f2fe7ec5d7476d39e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 5230,
        "upload_time": "2021-09-23T22:23:35",
        "upload_time_iso_8601": "2021-09-23T22:23:35.053965Z",
        "url": "https://files.pythonhosted.org/packages/ec/2c/76f32eb7a7c1014864d6661eb7a22d8ecd5fbd540932e0b03cc3a065e038/mimesis_stats-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75f097beb600970cf8be8084a244d4aebeb16a5758230fad56f95f71cf428cec",
          "md5": "30b07967fb96a92e0f7a24f20f012588",
          "sha256": "ad89254bbc97d2fd566608599493b777589b42c4a8c860eed5da97cbb2cd5bca"
        },
        "downloads": -1,
        "filename": "mimesis_stats-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30b07967fb96a92e0f7a24f20f012588",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 6000,
        "upload_time": "2021-09-23T22:36:44",
        "upload_time_iso_8601": "2021-09-23T22:36:44.251216Z",
        "url": "https://files.pythonhosted.org/packages/75/f0/97beb600970cf8be8084a244d4aebeb16a5758230fad56f95f71cf428cec/mimesis_stats-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75f097beb600970cf8be8084a244d4aebeb16a5758230fad56f95f71cf428cec",
        "md5": "30b07967fb96a92e0f7a24f20f012588",
        "sha256": "ad89254bbc97d2fd566608599493b777589b42c4a8c860eed5da97cbb2cd5bca"
      },
      "downloads": -1,
      "filename": "mimesis_stats-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "30b07967fb96a92e0f7a24f20f012588",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.8",
      "size": 6000,
      "upload_time": "2021-09-23T22:36:44",
      "upload_time_iso_8601": "2021-09-23T22:36:44.251216Z",
      "url": "https://files.pythonhosted.org/packages/75/f0/97beb600970cf8be8084a244d4aebeb16a5758230fad56f95f71cf428cec/mimesis_stats-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}