{
  "info": {
    "author": "GroundWork Renewables",
    "author_email": "pypi@grndwork.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![GroundView](https://user-images.githubusercontent.com/7266242/151395564-54000ba1-f7a4-4ea8-84b4-66367e14cc90.png)\n\n# Groundwork API Client\n\nAPI client for [GroundWork Renewables](https://grndwork.com)\n\n\n## Installation\n\nJavaScript:\n```\n$ npm install @grndwork/api-client\n```\n\nPython:\n```\n$ pip install grndwork-api-client\n```\n\n## Usage\n\nJavaScript:\n```js\nimport {createClient} from '@grndwork/api-client';\n\nconst client = createClient();\n```\n\nPython:\n```py\nfrom grndwork_api_client import create_client\n\nclient = create_client()\n```\n\nIn order to access https://api.grndwork.com you must first obtain a refresh token from GroundWork Renewables.\n\nThe path to this file can be provided to the client using the `GROUNDWORK_TOKEN_PATH` environment variable.\n\nOr the subject and token values from this file can be provided using the `GROUNDWORK_SUBJECT` and `GROUNDWORK_TOKEN` environment variables.\n\nWhen providing subject and token values `GROUNDWORK_TOKEN_PATH` must not be set.\n\n### Javascript Client\n\nFor methods that return lists, the javascript client returns a custom async iterable. You can consume this using:\n\n```js\nfor await (const station of client.getStations()) {\n  ...\n}\n```\n\nor\n\n```js\nconst stations = await client.getStations().toArray();\n```\n\n### Python Client\n\nFor methods that return lists, the python client returns a standard iterator. You can consume this using:\n\n```py\nfor station in client.get_stations():\n  ...\n```\n\nor\n\n```py\nstations = list(client.get_stations())\n```\n\n## API\n\n### Get Stations\n\nJavaScript:\n```typescript\nclient.getStations(query?: GetStationsQuery, pageSize: number = 100): IterableResponse<Station>\n```\n\nPython:\n```py\nclient.get_stations(query: GetStationsQuery = None, *, page_size: int = 100) -> Iterator[Station]\n```\n\nTakes an optional get stations query object as an argument and returns an array of stations.\n\n#### Get Stations Query Parameters\n\n  | Param | Type | Description |\n  |---|---|---|\n  | station | string | Only return stations with UUID, name, or name matching pattern |\n  | site | string | Only return stations for site with UUID, name, or name matching pattern |\n  | client | string | Only return stations for client with UUID, name, or name matching pattern |\n  | limit | number | Only return a limited number of stations |\n  | offset | number | Number of stations to skip over before returning results |\n\n##### Pattern Matching\n\nParameters that support patterns can use a wildcard `*` at the beginning and/or end of the string.\n\nPattern matching is case insensitive.\n\nFor example:\n\nJavaScript:\n```js\nconst stations = await client.getStations({station: 'Test*'}).toArray();\n```\n\nPython:\n```py\nstations = list(client.get_stations({'station': 'Test*'}))\n```\n\n\nWould return all stations whose name starts with `Test`.\n\n##### Page Size\n\nYou can set an optional page size to control the number of stations returned per request from the API.\n( min: 1, max: 100, default: 100 )\n\nJavaScript:\n```js\nconst stations = await client.getStations({}, 50).toArray();\n```\n\nPython:\n```py\nstations = list(client.get_stations({}, page_size=50))\n```\n\n#### Return Values\n\nStations are returned in alphabetical order by station name.\n\n##### Sample Output\n\n```json\n[\n  {\n    \"client_uuid\": \"286dfd7a-9bfa-41f4-a5d0-87cb62fac452\",\n    \"client_full_name\": \"TestClient\",\n    \"client_short_name\": \"TEST\",\n    \"site_uuid\": \"007bb682-476e-4844-b67c-82ece91a9b09\",\n    \"site_full_name\": \"TestSite\",\n    \"station_uuid\": \"9a8ebbee-ddd1-4071-b17f-356f42867b5e\",\n    \"station_full_name\": \"TestStation\",\n    \"description\": \"\",\n    \"latitude\": 0,\n    \"longitude\": 0,\n    \"altitude\": 0,\n    \"timezone_offset\": -5,\n    \"start_timestamp\": \"2020-01-01 00:00:00\",\n    \"end_timestamp\": \"2020-12-31 23:59:59\",\n    \"data_file_prefix\": \"Test_\",\n    \"data_files\": [\n      {\n        \"filename\": \"Test_OneMin.dat\",\n        \"is_stale\": false,\n        \"headers\": {\n          \"columns\": [\"Ambient_Temp\"],\n          \"units\": [\"Deg_C\"],\n          \"processing\": [\"Avg\"]\n        }\n      }\n    ]\n  }\n]\n```\n\n### Get Data\n\nJavaScript:\n```typescript\nclient.getData(query?: GetDataQuery, pageSize: number = 100): IterableResponse<DataFile>\n```\n\nPython:\n```py\nclient.get_data(query: GetDataQuery = None, *, page_size: int = 100) -> Iterator[DataFile]\n```\n\nTakes an optional get data query object as an argument and returns an array of data files.\n\n#### Get Data Query Parameters\n\n  | Param | Type | Description |\n  |---|---|---|\n  | filename | string | Only return data files with name or name matching pattern |\n  | station | string | Only return data files for station with UUID, name, or name matching pattern |\n  | site | string | Only return data files for site with UUID, name, or name matching pattern |\n  | client | string | Only return data files for client with UUID, name, or name matching pattern |\n  | limit | number | Only return a limited number of files |\n  | offset | number | Number of files to skip over before returning results |\n  | records_limit | number | Number of records to return per file ( min: 0, max: 1500, default: 0 ) |\n  | records_before | timestamp | Only return records at or before timestamp ( format: `yyyy-mm-dd hh:mm:ss` ) |\n  | records_after | timestamp | Only return records at or after timestamp ( format: `yyyy-mm-dd hh:mm:ss` ) |\n\n##### Pattern Matching\n\nParameters that support patterns can use a wildcard `*` at the beginning and/or end of the string.\n\nPattern matching is case insensitive.\n\nFor example:\n\nJavaScript:\n```js\nconst dataFiles = await client.getData({filename: '*_OneMin.dat'}).toArray();\n```\n\nPython:\n```py\ndata_files = list(client.get_data({'filename': '*_OneMin.dat'}))\n```\n\nWould return all one minute data files.\n\n##### Page Size\n\nYou can set an optional page size to control the number of files returned per request from the API.\n( min: 1, max: 100, default: 100 )\n\nJavaScript:\n```js\nconst dataFiles = await client.getData({}, 50).toArray();\n```\n\nPython:\n```py\ndata_files = list(client.get_data({}, page_size=50))\n```\n\n#### Return Values\n\nData files are returned in alphabetical order by filename.\n\nWhen `records_limit` is included in the query, records are returned in reverse chronological order starting at the most recent timestamp.\nWhen `records_limit` is greater then 1, only a single data file will be returned per request ( equivalent to page size of 1 ).\n\nFor example:\n\nJavaScript:\n```js\nconst dataFiles = await client.getData({limit: 1, records_limit: 100}).toArray();\n```\n\nPython:\n```py\ndata_files = list(client.get_data({'limit': 1, 'records_limit': 100}))\n```\n\nWould return the most recent 100 records from the first file alphabetically.\n\n##### Sample Output\n\n```json\n[\n  {\n    \"source\": \"station:9a8ebbee-ddd1-4071-b17f-356f42867b5e\",\n    \"filename\": \"Test_OneMin.dat\",\n    \"is_stale\": false,\n    \"headers\": {\n      \"columns\": [\"Ambient_Temp\"],\n      \"units\": [\"Deg_C\"],\n      \"processing\": [\"Avg\"]\n    },\n    \"records\": [\n      {\n        \"timestamp\": \"2020-01-01 00:00:00\",\n        \"record_num\": 1000,\n        \"data\": {\n          \"Ambient_Temp\": 50\n        }\n      }\n    ]\n  }\n]\n```\n\n### Post Data\n\nJavaScript:\n```typescript\nclient.postData(payload: PostDataPayload): Promise<void>\n```\n\nPython:\n```py\nclient.post_data(payload: PostDataPayload) -> None\n```\n\nTakes a post data payload object as an argument and uploads it to the cloud.\n\n#### Post Data Payload\n\n  | Param | Type | Description |\n  |---|---|---|\n  | source | string | The station that collected the data |\n  | files | Array<DataFile> | Array of data files ( min length: 1, max length: 20 ) |\n  | files[].filename | string | Filename using the format `<client prefix>_<station>_<OneMin|Hourly|Meta>.dat` |\n  | files[].headers | DataFileHeaders | Optional headers for the file |\n  | files[].headers.meta | Record<string, string> | User defined meta data for the file |\n  | files[].headers.columns | Array<string> | Array of column names matching the data keys |\n  | files[].headers.units | Array<string> | Array of units for the columns |\n  | files[].headers.processing | Array<string> | Array of processing used for column data (Min, Max, Avg) |\n  | files[].records | Array<DataRecord> | Array of data records for file ( max length: 100 combined across all files ) |\n  | files[].records[].timestamp | timestamp | The timestamp of the data record in UTC ( format: `yyyy-mm-dd hh:mm:ss` ) |\n  | files[].records[].record_num | number | Positive sequential number for records in file |\n  | files[].records[].data | Record<string, any> | Data for record, keys should match `header.columns` |\n  | overwrite | boolean | Whether to overwrite existing data records when timestamps match |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GroundWorkRenewables/grndwork-api-client",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grndwork-api-client",
    "package_url": "https://pypi.org/project/grndwork-api-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/grndwork-api-client/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GroundWorkRenewables/grndwork-api-client/issues",
      "Homepage": "https://github.com/GroundWorkRenewables/grndwork-api-client"
    },
    "release_url": "https://pypi.org/project/grndwork-api-client/1.0.0a7/",
    "requires_dist": [
      "pyjwt (~=2.4)",
      "requests (~=2.27)"
    ],
    "requires_python": ">=3.9",
    "summary": "Groundwork API Client",
    "version": "1.0.0a7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14165272,
  "releases": {
    "1.0.0a6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99b174b17f81f7a23b70248c1d99f6cb8dc3b4af5a8a331cc29ddaa9f8c04662",
          "md5": "852e8c7bca67677723d6c708d2123ad1",
          "sha256": "2e46b60d59a4e9ced428e3410c4be5a6b077666a741a1838f7eda5b476700f44"
        },
        "downloads": -1,
        "filename": "grndwork_api_client-1.0.0a6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "852e8c7bca67677723d6c708d2123ad1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9722,
        "upload_time": "2022-06-17T01:37:38",
        "upload_time_iso_8601": "2022-06-17T01:37:38.696331Z",
        "url": "https://files.pythonhosted.org/packages/99/b1/74b17f81f7a23b70248c1d99f6cb8dc3b4af5a8a331cc29ddaa9f8c04662/grndwork_api_client-1.0.0a6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ce556d0586752e71a1d0cc7b80366dc0f2dbe2be032f47b1eaa68d8ec577f82",
          "md5": "a33c1842de9a31ed244fe13dae759ebb",
          "sha256": "07e772908a0b2034a48536b143a354679d84021707077ffa7136298ff57dedd6"
        },
        "downloads": -1,
        "filename": "grndwork-api-client-1.0.0a6.tar.gz",
        "has_sig": false,
        "md5_digest": "a33c1842de9a31ed244fe13dae759ebb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9868,
        "upload_time": "2022-06-17T01:37:40",
        "upload_time_iso_8601": "2022-06-17T01:37:40.907396Z",
        "url": "https://files.pythonhosted.org/packages/8c/e5/56d0586752e71a1d0cc7b80366dc0f2dbe2be032f47b1eaa68d8ec577f82/grndwork-api-client-1.0.0a6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4af688849ea375af123c3bc55e88e5080bfd50a3bbc3029ef37869082659e783",
          "md5": "e2abd12658b8475763a286cc70b81a96",
          "sha256": "42d8b9233eebcef7f68d1e57ab5bc8da708d78d9d31c6280e5553ff3bf0e8778"
        },
        "downloads": -1,
        "filename": "grndwork_api_client-1.0.0a7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2abd12658b8475763a286cc70b81a96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9808,
        "upload_time": "2022-06-17T17:17:05",
        "upload_time_iso_8601": "2022-06-17T17:17:05.844636Z",
        "url": "https://files.pythonhosted.org/packages/4a/f6/88849ea375af123c3bc55e88e5080bfd50a3bbc3029ef37869082659e783/grndwork_api_client-1.0.0a7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "525a1d92f0f4ad52e2e86d529a17fd346f42a0dc1ea6060e464bf76fc7c84933",
          "md5": "7d733edd867b2a88c0551c73b86ffbdf",
          "sha256": "dfd3784f0c9d56328599d2a0487b85feaba3e298e30ea638d84f1f7c7ffd7f0a"
        },
        "downloads": -1,
        "filename": "grndwork-api-client-1.0.0a7.tar.gz",
        "has_sig": false,
        "md5_digest": "7d733edd867b2a88c0551c73b86ffbdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10030,
        "upload_time": "2022-06-17T17:17:07",
        "upload_time_iso_8601": "2022-06-17T17:17:07.850971Z",
        "url": "https://files.pythonhosted.org/packages/52/5a/1d92f0f4ad52e2e86d529a17fd346f42a0dc1ea6060e464bf76fc7c84933/grndwork-api-client-1.0.0a7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4af688849ea375af123c3bc55e88e5080bfd50a3bbc3029ef37869082659e783",
        "md5": "e2abd12658b8475763a286cc70b81a96",
        "sha256": "42d8b9233eebcef7f68d1e57ab5bc8da708d78d9d31c6280e5553ff3bf0e8778"
      },
      "downloads": -1,
      "filename": "grndwork_api_client-1.0.0a7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2abd12658b8475763a286cc70b81a96",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 9808,
      "upload_time": "2022-06-17T17:17:05",
      "upload_time_iso_8601": "2022-06-17T17:17:05.844636Z",
      "url": "https://files.pythonhosted.org/packages/4a/f6/88849ea375af123c3bc55e88e5080bfd50a3bbc3029ef37869082659e783/grndwork_api_client-1.0.0a7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "525a1d92f0f4ad52e2e86d529a17fd346f42a0dc1ea6060e464bf76fc7c84933",
        "md5": "7d733edd867b2a88c0551c73b86ffbdf",
        "sha256": "dfd3784f0c9d56328599d2a0487b85feaba3e298e30ea638d84f1f7c7ffd7f0a"
      },
      "downloads": -1,
      "filename": "grndwork-api-client-1.0.0a7.tar.gz",
      "has_sig": false,
      "md5_digest": "7d733edd867b2a88c0551c73b86ffbdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 10030,
      "upload_time": "2022-06-17T17:17:07",
      "upload_time_iso_8601": "2022-06-17T17:17:07.850971Z",
      "url": "https://files.pythonhosted.org/packages/52/5a/1d92f0f4ad52e2e86d529a17fd346f42a0dc1ea6060e464bf76fc7c84933/grndwork-api-client-1.0.0a7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}