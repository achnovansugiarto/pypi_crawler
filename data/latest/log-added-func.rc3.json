{
  "info": {
    "author": "YCKAO",
    "author_email": "kao0983326221@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# log_added_func\r\n* 可以在程式碼中間插入想要的log，或者直接把裝飾器放在函數前，其會自動記錄其輸入和輸出資訊。\r\n\r\n## Getting Started\r\n* 輸出的log會自動存取其log時間、file_name、func_name。 \r\n* 輸出內容：\r\n```\r\n%(asctime)s $ %(levelname)-10s $(mem_percent) $%(threadName)s $ %(filename)s $ %(funcName)s $ %(message)s\r\n```\r\n* 客製化log：在想要的地方下Log，可以設定等級。 \r\n* 通用型log：用裝飾器包裝，可以將該func運行error列印出來，也會列印輸入的參數和輸出的值。\r\n* log的存放位置：當前執行的檔案目錄\r\n   > ./logs_dir/ \r\n\r\n  \r\n# Installing：\r\npip install log_added_func\r\n* 相依套件\r\n  * concurrent-log-handler\r\n  * psutil\r\n  * pywin32 (If you are using Mac or Linux, ignore this key point.)\r\n\r\n# Examples\r\n範例1:class內有錯誤raise的log\r\n```python\r\nfrom log_added_func import log\r\nfrom log_added_func import log_decorator\r\n\r\nclass Calculator():\r\n    def __init__(self, first=0, second=0):\r\n        self.first = first\r\n        self.second = second\r\n\r\n        # Initializing logger object to write custom logs\r\n        self.logger_obj = log.get_logger()\r\n\r\n    # let self.logger_obj remove from __dict__, it will not pickle.\r\n    def __getstate__(self):\r\n        d = dict(self.__dict__)\r\n        del d['logger_obj']\r\n        return d\r\n\r\n    def __setstate__(self, d):\r\n        self.__dict__.update(d)  # I *think* this is a safe way to do it\r\n\r\n    @log_decorator.log_decorator()\r\n    def add(self, third=0, fourth=0):\r\n        # writing custom logs specific to function, outside of log decorator, if needed\r\n        self.logger_obj.critical(\"Add function custom log, outside decorator\")\r\n        self.logger_obj.error(\"Add function custom log, outside decorator\")\r\n        self.logger_obj.warning(\"Add function custom log, outside decorator\")\r\n        self.logger_obj.info(\"Add function custom log, outside decorator\")\r\n        self.logger_obj.debug(\"Add function custom log, outside decorator\")\r\n\r\n        try:\r\n            return self.first + self.second + third + fourth\r\n        except:\r\n            raise\r\n\r\n    @log_decorator.log_decorator()\r\n    def divide(self):\r\n        self.logger_obj.info(\"Divide function custom log, outside decorator\")\r\n        try:\r\n            return self.first / self.second\r\n        except:\r\n            raise\r\n        \r\n        \r\nif __name__ == '__main__':\r\n    calculator = Calculator(5, 0)\r\n    calculator.add(third=2,fourth=3)\r\n    calculator.divide()\r\n```\r\n* 輸出\r\n> 2023-01-11 12:19:42,012 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Arguments: <__main__.Calculator object at 0x000001969ABF2200>, third=2, fourth=3 - Begin function  \r\n> 2023-01-11 12:19:42,017 $ CRITICAL   $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,021 $ ERROR      $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,025 $ WARNING    $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,029 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,033 $ DEBUG      $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,038 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Returned: - End function 10  \r\n> 2023-01-11 12:19:42,042 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ divide $ Arguments: <__main__.Calculator object at 0x000001969ABF2200> - Begin function  \r\n> 2023-01-11 12:19:42,046 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ divide $ Divide function custom log, outside decorator  \r\n> 2023-01-11 12:19:42,050 $ ERROR      $ 64.6 $MainThread $ calculator_sample.py $ divide $ Exception: division by zero  \r\n\r\n\r\n範例2: 多進程放log，並且修改log檔名為test_log.log\r\n```python\r\nimport multiprocessing as mp\r\nfrom log_added_func import log\r\nfrom log_added_func import log_decorator\r\n\r\n@log_decorator.log_decorator()\r\ndef task(num):\r\n    logger_obj = log.get_logger(log_file_name='test_log')\r\n    print('This is Process: ', num)\r\n    logger_obj.info(f\"This is Process: {num}\")\r\n\r\n\r\nif __name__=='__main__':\r\n    num_process = 5\r\n    process_list = []\r\n    for i in range(num_process):\r\n        process_list.append(mp.Process(target=task, args=(i,)))\r\n        process_list[i].start()\r\n\r\n    for i in range(num_process):\r\n        process_list[i].join()\r\n```\r\n* 輸出\r\n> 2023-01-11 12:23:49,417 $ INFO       $ 64.7 $MainThread $ multiprocess_sample.py $ task $ This is Process: 1  \r\n> 2023-01-11 12:23:49,416 $ INFO       $ 64.7 $MainThread $ multiprocess_sample.py $ task $ This is Process: 0  \r\n> 2023-01-11 12:23:49,423 $ INFO       $ 64.7 $MainThread $ multiprocess_sample.py $ task $ This is Process: 2  \r\n> 2023-01-11 12:23:49,425 $ INFO       $ 64.7 $MainThread $ multiprocess_sample.py $ task $ This is Process: 3  \r\n> 2023-01-11 12:23:49,433 $ INFO       $ 64.7 $MainThread $ multiprocess_sample.py $ task $ This is Process: 4\r\n\r\n## 客製化log\r\n1. 載入：\r\n```python\r\nfrom log_added_func import log\r\nfrom log_added_func import log_decorator\r\n```\r\n3. 初始化：\r\n```python\r\nlogger_obj = log.get_logger()\r\n```\r\n4. 在想要的地方放log： \r\n```python\r\nlogger_obj.info(\"Add function custom log, outside decorator\")\r\n```\r\n5. log輸出範例：\r\n    > 2023-01-11 12:19:42,029 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Add function custom log, outside decorator  \r\n6. 設定等級：\r\n    - 可以設定debug < info < warning < error < critical\r\n    - 範例：logger_obj.warning(\"Add function custom log, outside decorator\")\r\n   \r\n## 通用型log\r\n1. 載入：\r\n```python\r\nfrom log_added_func import log\r\nfrom log_added_func import log_decorator\r\n```\r\n2. 在想要的method放:\r\n```python\r\n@log_decorator.log_decorator()\r\ndef smaple():\r\n    pass\r\n```\r\n3. log輸出範例:\r\n   > 2023-01-11 12:19:42,012 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Arguments: <__main__.Calculator object at 0x000001969ABF2200>, third=2, fourth=3 - Begin function  \r\n   > 2023-01-11 12:19:42,038 $ INFO       $ 64.6 $MainThread $ calculator_sample.py $ add $ Returned: - End function 10  \r\n4. 在通用型的其log等級會自動戴入，規則如下：\r\n   - 沒有Error的正常都會是INFO等級。\r\n   - 若有except則會是ERRPR等級\r\n\r\n## 其他說明\r\n1. 可以設定log單檔儲存的大小\r\n    - 1 * 1024 * 1024 = 1MB\r\n    - ConcurrentRotatingFileHandler(logPath, maxBytes=50 * 1024 * 1024, backupCount=2)  \r\n2. log存放的位置\r\n    - window: c:\\\\logs_dir\\\\\r\n    - linux: ./logs_dir/ # 當前目錄\r\n    - 若要修改可以在log.py的get_logger調整\r\n3. log檔案名稱\r\n    - 預設:main_log\r\n    - 客製化:在初始化時設定get_logger(log_file_name=<font color=red>\"sample_name_log\"</font>)\r\n    - 通用型:@log_decorator.log_decorator(log_file_name=<font color=red>\"sample_name_log\"</font>)\r\n4. log以資料夾存放\r\n    - 預設:無資料夾\r\n    - 若要依資料夾分類log也可以對get_logger下參數log_sub_dir\r\n5. log也可以用類似print的方式show在terminal\r\n    - 只要參數DEBUG_flag設為True即可，預設:False\r\n    - 客製化:在初始化時設定get_logger(<font color=red>DEBUG_flag=True</font>)\r\n    - 通用型：@log_decorator.log_decorator(<font color=red>DEBUG_flag=True</font>)\r\n6. log的等級寫入說明\r\n   - 預設會寫入所有等級(debug < info < warning < error < critical)\r\n   - 若要只寫入部分，可以將參數set_level設為想要的等級，e.g.設為\"warning\"那就是warning、error、critical才會寫入\r\n   - 客製化:在初始化時設定get_logger(<font color=red>set_level=\"warning\"</font>)\r\n   - 通用型：@log_decorator.log_decorator(<font color=red>set_level=\"warning\"</font>)\r\n\r\n## TODO\r\n- 目前不會show實例化的class名稱\r\n\r\n## other\r\n- pickle包裝logger會有問題 # 在calculator.py有解決範例\r\n    - https://stackoverflow.com/questions/2999638/how-to-stop-attributes-from-being-pickled-in-python\r\n- 多進程會有logging同時讀寫問題: # 理論上已經透過ConcurrentRotatingFileHandler解決\r\n    - https://www.qnjslm.com/ITHelp/996.html\r\n    - https://stackoverflow.com/questions/22459850/permissionerror-when-using-python-3-3-4-and-rotatingfilehandler\r\n    - https://blog.gdyshi.top/2018/06/27/logging_multiprocess/\r\n    - https://www.programmersought.com/article/43941158027/\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YCkao5888/log_added_func.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "log-added-func",
    "package_url": "https://pypi.org/project/log-added-func/",
    "platform": null,
    "project_url": "https://pypi.org/project/log-added-func/",
    "project_urls": {
      "Homepage": "https://github.com/YCkao5888/log_added_func.git"
    },
    "release_url": "https://pypi.org/project/log-added-func/0.1.6/",
    "requires_dist": [
      "concurrent-log-handler",
      "psutil"
    ],
    "requires_python": ">=3",
    "summary": "log can be inserted at the desired location.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17235278,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ed7efbb75962bd94c08683b3ac41c5f9a9324c5d002e72123fafddc929b34bd",
          "md5": "5dff09bcee57912a8a801da4fca1bd3c",
          "sha256": "e467a26e01502d7672b884041fe5dc6c0edb54bbf1ade2628a4b850cf0d61650"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5dff09bcee57912a8a801da4fca1bd3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7328,
        "upload_time": "2023-01-11T08:51:55",
        "upload_time_iso_8601": "2023-01-11T08:51:55.666439Z",
        "url": "https://files.pythonhosted.org/packages/8e/d7/efbb75962bd94c08683b3ac41c5f9a9324c5d002e72123fafddc929b34bd/log_added_func-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1378806e149e88be204ed20ab6bd933450e84218ba8f28937f3330948bb03a6",
          "md5": "4524e918b6deba54acbba57182272b1e",
          "sha256": "1c55fe8a69b6c77f36572dd9b14ffd68503cf2c1c6a0234da7e4c6508a67c074"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4524e918b6deba54acbba57182272b1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 6971,
        "upload_time": "2023-01-11T08:51:57",
        "upload_time_iso_8601": "2023-01-11T08:51:57.581400Z",
        "url": "https://files.pythonhosted.org/packages/d1/37/8806e149e88be204ed20ab6bd933450e84218ba8f28937f3330948bb03a6/log_added_func-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efbcf53115a46b5d86f0a79c33e4f2e49e7d4e03fc0e1ab4f8031db643b1ab5",
          "md5": "fd6a19571d0039b1b2bf62b2ce52a637",
          "sha256": "b9ca9f004f0bd58b1ca2681a15d80c1c5bd611adb161877bfa332a1751363c0e"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd6a19571d0039b1b2bf62b2ce52a637",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7381,
        "upload_time": "2023-01-16T09:50:22",
        "upload_time_iso_8601": "2023-01-16T09:50:22.208298Z",
        "url": "https://files.pythonhosted.org/packages/7e/fb/cf53115a46b5d86f0a79c33e4f2e49e7d4e03fc0e1ab4f8031db643b1ab5/log_added_func-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05eef0b0f7d64cc7b5f2582db154a302096b0b222ae2a0f5f8674d6c681e4e59",
          "md5": "4ba03985c32a3fc0a965e5419e4e7410",
          "sha256": "6be3d9800e960dcbc48b6ec9e162088347e8b23ac12733d98d557a85078f610b"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4ba03985c32a3fc0a965e5419e4e7410",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7050,
        "upload_time": "2023-01-16T09:50:25",
        "upload_time_iso_8601": "2023-01-16T09:50:25.221621Z",
        "url": "https://files.pythonhosted.org/packages/05/ee/f0b0f7d64cc7b5f2582db154a302096b0b222ae2a0f5f8674d6c681e4e59/log_added_func-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57d8a3b890fb1e8c16d8ee526dbd0edffe712c72dfc3123e0a35deda2af8de8e",
          "md5": "0a48b1584c0520ea06a0772d2f94e716",
          "sha256": "b1f824c30b6094812fe111dd581c80f4b94b0e6d4411d4c3bdb7c148758734d6"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a48b1584c0520ea06a0772d2f94e716",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7814,
        "upload_time": "2023-03-10T06:47:36",
        "upload_time_iso_8601": "2023-03-10T06:47:36.287514Z",
        "url": "https://files.pythonhosted.org/packages/57/d8/a3b890fb1e8c16d8ee526dbd0edffe712c72dfc3123e0a35deda2af8de8e/log_added_func-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfec8fd2e96a8de25de9537d02457d18afdc00a4513a077edd4fd68d014efc6b",
          "md5": "ba8123ff5eff525d5ee9f76975584ca3",
          "sha256": "46e4fda97cb463551ddb6563ef6e5aa46d5929e73a2b1c7204b264eecfa3749d"
        },
        "downloads": -1,
        "filename": "log_added_func-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ba8123ff5eff525d5ee9f76975584ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7466,
        "upload_time": "2023-03-10T06:47:41",
        "upload_time_iso_8601": "2023-03-10T06:47:41.389844Z",
        "url": "https://files.pythonhosted.org/packages/bf/ec/8fd2e96a8de25de9537d02457d18afdc00a4513a077edd4fd68d014efc6b/log_added_func-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57d8a3b890fb1e8c16d8ee526dbd0edffe712c72dfc3123e0a35deda2af8de8e",
        "md5": "0a48b1584c0520ea06a0772d2f94e716",
        "sha256": "b1f824c30b6094812fe111dd581c80f4b94b0e6d4411d4c3bdb7c148758734d6"
      },
      "downloads": -1,
      "filename": "log_added_func-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a48b1584c0520ea06a0772d2f94e716",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 7814,
      "upload_time": "2023-03-10T06:47:36",
      "upload_time_iso_8601": "2023-03-10T06:47:36.287514Z",
      "url": "https://files.pythonhosted.org/packages/57/d8/a3b890fb1e8c16d8ee526dbd0edffe712c72dfc3123e0a35deda2af8de8e/log_added_func-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfec8fd2e96a8de25de9537d02457d18afdc00a4513a077edd4fd68d014efc6b",
        "md5": "ba8123ff5eff525d5ee9f76975584ca3",
        "sha256": "46e4fda97cb463551ddb6563ef6e5aa46d5929e73a2b1c7204b264eecfa3749d"
      },
      "downloads": -1,
      "filename": "log_added_func-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "ba8123ff5eff525d5ee9f76975584ca3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7466,
      "upload_time": "2023-03-10T06:47:41",
      "upload_time_iso_8601": "2023-03-10T06:47:41.389844Z",
      "url": "https://files.pythonhosted.org/packages/bf/ec/8fd2e96a8de25de9537d02457d18afdc00a4513a077edd4fd68d014efc6b/log_added_func-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}