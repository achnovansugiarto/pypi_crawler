{
  "info": {
    "author": "Badr Ouali",
    "author_email": "badr.ouali@microfocus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Database"
    ],
    "description": "<p align=\"center\">\n<img src='https://raw.githubusercontent.com/vertica/Vertica-ML-Python/master/img/logo.png' width=\"180px\">\n</p>\n\n# Vertica-ML-Python\n\nThe documentation is available at:<br>\nhttps://github.com/vertica/Vertica-ML-Python/blob/master/documentation.pdf <br><br>\nOr directly in the Wiki at:<br>\nhttps://github.com/vertica/Vertica-ML-Python/wiki\n<br><br>\n(c) Copyright [2018-2020] Micro Focus or one of its affiliates. \nLicensed under the Apache License, Version 2.0 (the \"License\");\nYou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n<br>\nhttp://www.apache.org/licenses/LICENSE-2.0\n<br>\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n<br><br>\n&#9888; If you want to contribute, send a mail to <a href=\"mailto:badr.ouali@microfocus.com\">badr.ouali@microfocus.com</a>\n<br><br>\nVertica-ML-Python is a Python library that exposes sci-kit like functionality to conduct data science projects on data stored in Vertica, thus taking advantage Vertica’s speed and built-in analytics and machine learning capabilities. It supports the entire data science life cycle, uses a ‘pipeline’ mechanism to sequentialize data transformation operation (called Virtual Dataframe), and offers multiple graphical rendering possibilities.\n<br><br>\nThe 'Big Data' (Tb of data) is now one of the main topics in the Data Science World. Data Scientists are now very important for any organisation. Becoming Data-Driven is mandatory to survive. Vertica is the first real analytic columnar Database and is still the fastest in the market. However, SQL is not enough flexible to be very popular for Data Scientists. Python flexibility is priceless and provides to any user a very nice experience. The level of abstraction is so high that it is enough to think about a function to notice that it already exists. Many Data Science APIs were created during the last 15 years and were directly adopted by the Data Science community (examples: pandas and scikit-learn). However, Python is only working in-memory for a single node process. Even if some famous highly distributed programming languages exist to face this challenge, they are still in-memory and most of the time they can not process on all the data. Besides, moving the data can become very expensive. Data Scientists must also find a way to deploy their data preparation and their models. We are far away from easiness and the entire process can become time expensive. \n<br><br>\nThe idea behind VERTICA ML PYTHON is simple: Combining the Scalability of VERTICA with the Flexibility of Python to give to the community what they need *Bringing the logic to the data and not the opposite*. This version 1.0 is the work of 3 years of new ideas and improvement.\n<br><br>\nMain Advantages:\n<ul>\n <li> easy Data Exploration.</li>\n <li> easy Data Preparation.</li>\n <li> easy Data Modeling.</li>\n <li> easy Model Evaluation.</li>\n <li> easy Model Deployment.</li>\n <li> most of what pandas.Dataframe can do, vertica_ml_python.vDataframe can do (and even much more)</li>\n <li> easy ML model creation and evaluation.</li>\n <li> many scikit functions and algorithms are available (and scalable!).</li>\n</ul>\n\nAll information related to the API can be found at: <br>\n\nhttps://github.com/vertica/Vertica-ML-Python/\n\n## Python Version\n\n<b>vertica-ml-python</b> works with at least:\n<ul>\n\t<li> <b>Vertica: </b> => 9.1 (with previous versions, some functions and algorithms may not be available)\n\t<li> <b>Python Version: </b> => 3.6 - [version 3.5 may works]\n\t<li> <b>Python Modules needed for Rendering Capabilities: </b> matplotlib (=> 3.0) - [other versions of matplotlib may work], numpy (=> 1.9) - [other versions of numpy may work]\n\t<li> <b>Other Python Modules: </b> Except to get rendering capabilities, VERTICA ML Python uses only built-in libraries (statistics, random, math, time and os)\n</ul>\n\n## Standard Libraries\n\n<b>vertica-ml-python</b> library is only using the standard Python libraries such as <b>matplotlib</b>, <b>numpy</b>... \nOther libraries can be used as <b>anytree</b> for tree visualization or <b>sqlparse</b> for SQL indentation but they are optional.\n\n## Installation\nTo install <b>vertica-ml-python</b>, you can use the pip command:\n```shell\nroot@ubuntu:~$ pip3 install vertica_ml_python\n```\nOr you can get a copy of the source by cloning from the Vertica-ML-Python github project and install with:\n```shell\nroot@ubuntu:~$ python3 setup.py install\n```\nYou can also drag and drop the <b>vertica_ml_python</b> folder in the <b>site-package</b> folder of the Python framework. In the MAC environment, you can find it in: <br> <b>/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages</b> <br>\n\nAnother way is to call the library from where it is located. <br>\n\nYou can then import each library element using the usual Python syntax.\n```python\n# to import the vDataframe\nfrom vertica_ml_python import vDataframe\n# to import the Logistic Regression\nfrom vertica_ml_python.learn.linear_model import LogisticRegression\n```\n\nEverything is well detailed in the following documentation.\n\n## Connection to the Database\n\nThis step is useless if <b>vertica-python</b> or <b>pyodbc</b> is already installed and you have a DSN in your machine. With this configuration, you do not need to manually create a cursor. It is possible to create a vDataframe using directly the DSN (<b>dsn</b> parameter of the vDataframe).\n\n### ODBC\n\nTo connect to the database, the user can use an ODBC connection to the Vertica database. <b>vertica-python</b> and <b>pyodbc</b> provide a cursor that will point to the database. It will be used by the <b>vertica-ml-python</b> to create all the different objects.\n```python\n#\n# vertica_python\n#\nimport vertica_python\n\n# Connection using all the DSN information\nconn_info = {'host': \"10.211.55.14\", 'port': 5433, 'user': \"dbadmin\", 'password': \"XxX\", 'database': \"testdb\"}\ncur = vertica_python.connect(** conn_info).cursor()\n\n# Connection using directly the DSN\nfrom vertica_ml_python.utilities import to_vertica_python_format # This function will parse the odbc.ini file\ndsn = \"VerticaDSN\"\ncur = vertica_python.connect(** to_vertica_python_format(dsn)).cursor()\n\n#\n# pyodbc\n#\nimport pyodbc\n\n# Connection using all the DSN information\ndriver = \"/Library/Vertica/ODBC/lib/libverticaodbc.dylib\"\nserver = \"10.211.55.14\"\ndatabase = \"testdb\"\nport = \"5433\"\nuid = \"dbadmin\"\npwd = \"XxX\"\ndsn = (\"DRIVER={}; SERVER={}; DATABASE={}; PORT={}; UID={}; PWD={};\").format(driver, server, database, port, uid, pwd)\ncur = pyodbc.connect(dsn).cursor()\n\n# Connection using directly the DSN\ndsn = (\"DSN=VerticaDSN\")\ncur = pyodbc.connect(dsn).cursor()\n```\n\n### JDBC\n\nThe user can also use a JDBC connection to the Vertica Database. \n```python\nimport jaydebeapi\n\n# Vertica Server Details\ndatabase = \"testdb\"\nhostname = \"10.211.55.14\"\nport = \"5433\"\nuid = \"dbadmin\"\npwd = \"XxX\"\n\n# Vertica JDBC class name\njdbc_driver_name = \"com.vertica.jdbc.Driver\"\n\n# Vertica JDBC driver path\njdbc_driver_loc = \"/Library/Vertica/JDBC/vertica-jdbc-9.3.1-0.jar\"\n\n# JDBC connection string\nconnection_string = 'jdbc:vertica://' + hostname + ':' + port + '/' + database\nurl = '{}:user={};password={}'.format(connection_string, uid, pwd)\nconn = jaydebeapi.connect(jdbc_driver_name, connection_string, {'user': uid, 'password': pwd}, jars = jdbc_driver_loc)\ncur = conn.cursor()\n```\n\n## Quick Start\n\nInstall the library using the <b>pip</b> command:\n```shell\nroot@ubuntu:~$ pip3 install vertica_ml_python\n```\nInstall <b>vertica_python</b> or <b>pyodbc</b> to build a DB cursor:\n```shell\nroot@ubuntu:~$ pip3 install vertica_python\n```\nCreate a vertica cursor\n```python\nfrom vertica_ml_python.utilities import vertica_cursor\ncur = vertica_cursor(\"VerticaDSN\")\n```\nCreate the Virtual Dataframe of your relation:\n```python\nfrom vertica_ml_python import vDataframe\nvdf = vDataframe(\"my_relation\", cursor = cur)\n```\nIf you don't have data to play, you can easily load well known datasets\n```python\nfrom vertica_ml_python.learn.datasets import load_titanic\nvdf = load_titanic(cursor = cur)\n```\nYou can now play with the data...\n```python\nvdf.describe()\n\n# Output\n               min       25%        50%        75%   \nage           0.33      21.0       28.0       39.0   \nbody           1.0     79.25      160.5      257.5   \nfare           0.0    7.8958    14.4542    31.3875   \nparch          0.0       0.0        0.0        0.0   \npclass         1.0       1.0        3.0        3.0   \nsibsp          0.0       0.0        0.0        1.0   \nsurvived       0.0       0.0        0.0        1.0   \n                   max    unique  \nage               80.0        96  \nbody             328.0       118  \nfare          512.3292       277  \nparch              9.0         8  \npclass             3.0         3  \nsibsp              8.0         7  \nsurvived           1.0         2 \n```\n\nYou can also print the SQL code generation using the <b>sql_on_off</b> method.\n\n```python\nvdf.sql_on_off()\nvdf.describe()\n\n# Output\n## Compute the descriptive statistics of all the numerical columns ##\n\nSELECT \n  SUMMARIZE_NUMCOL(\"age\",\"body\",\"survived\",\"pclass\",\"parch\",\"fare\",\"sibsp\") OVER ()\nFROM public.titanic\n```\n\nWith Vertica ML Python, it is now possible to solve a ML problem with four lines of code (two if we don't consider the libraries loading).\n\n```python\nfrom vertica_ml_python.learn.model_selection import cross_validate\nfrom vertica_ml_python.learn.ensemble import RandomForestClassifier\n\n# Data Preparation\nvdf[\"sex\"].label_encode()[\"boat\"].fillna(method = \"0ifnull\")[\"name\"].str_extract(' ([A-Za-z]+)\\.').eval(\"family_size\", expr = \"parch + sibsp + 1\").drop(columns = [\"cabin\", \"body\", \"ticket\", \"home.dest\"])[\"fare\"].fill_outliers().fillna().to_db(\"titanic_clean\")\n\n# Model Evaluation\ncross_validate(RandomForestClassifier(\"rf_titanic\", cur, max_leaf_nodes = 100, n_estimators = 30), \"titanic_clean\", [\"age\", \"family_size\", \"sex\", \"pclass\", \"fare\", \"boat\"], \"survived\", cutoff = 0.35)\n\n# Output\n                           auc               prc_auc   \n1-fold      0.9877114427860691    0.9530465915039339   \n2-fold      0.9965555014605642    0.7676485351425721   \n3-fold      0.9927239216549301    0.6419135521132449   \navg             0.992330288634        0.787536226253   \nstd           0.00362128464093         0.12779562393   \n                     accuracy              log_loss   \n1-fold      0.971291866028708    0.0502052541223871   \n2-fold      0.983253588516746    0.0298167751798457   \n3-fold      0.964824120603015    0.0392745694400433   \navg            0.973123191716       0.0397655329141   \nstd           0.0076344236729      0.00833079837099   \n                     precision                recall   \n1-fold                    0.96                  0.96   \n2-fold      0.9556962025316456                   1.0   \n3-fold      0.9647887323943662    0.9383561643835616   \navg             0.960161644975        0.966118721461   \nstd           0.00371376912311        0.025535200301   \n                      f1-score                   mcc   \n1-fold      0.9687259282082884    0.9376119402985075   \n2-fold      0.9867172675521821    0.9646971010878469   \n3-fold      0.9588020287309097    0.9240569687684576   \navg              0.97141507483        0.942122003385   \nstd            0.0115538960753       0.0168949813163   \n                  informedness            markedness   \n1-fold      0.9376119402985075    0.9376119402985075   \n2-fold      0.9737827715355807    0.9556962025316456   \n3-fold      0.9185148945422918    0.9296324823943662   \navg             0.943303202125        0.940980208408   \nstd            0.0229190954261       0.0109037699717   \n                           csi  \n1-fold      0.9230769230769231  \n2-fold      0.9556962025316456  \n3-fold      0.9072847682119205  \navg             0.928685964607  \nstd            0.0201579224026\n```\n\nHappy Playing ! &#128540;\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vertica/Vertica-ML-Python",
    "keywords": "vertica python ml data science machine learning statistics database",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vertica-ml-python",
    "package_url": "https://pypi.org/project/vertica-ml-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/vertica-ml-python/",
    "project_urls": {
      "Homepage": "https://github.com/vertica/Vertica-ML-Python"
    },
    "release_url": "https://pypi.org/project/vertica-ml-python/1.0b0/",
    "requires_dist": [
      "matplotlib (>=2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Vertica-ML-Python simplifies data exploration, data cleaning and machine learning in Vertica.",
    "version": "1.0b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7217826,
  "releases": {
    "1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e91d42ff30f0b99ec5fe952ff23fed59cfcfdd84c5f67d92d8dced5fec9efbf",
          "md5": "c8df2e6b5294c2c367ef37ccac22884a",
          "sha256": "188d6a24af04bfee7c60379806b3ac3e781714a7ed52e81db4be60aea9f64332"
        },
        "downloads": -1,
        "filename": "vertica_ml_python-1.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8df2e6b5294c2c367ef37ccac22884a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 417159,
        "upload_time": "2020-05-11T19:02:23",
        "upload_time_iso_8601": "2020-05-11T19:02:23.492052Z",
        "url": "https://files.pythonhosted.org/packages/9e/91/d42ff30f0b99ec5fe952ff23fed59cfcfdd84c5f67d92d8dced5fec9efbf/vertica_ml_python-1.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c08d20805f1475cb5f6797dd5c2ad68447754cea3133f332230abe84af02a99d",
          "md5": "f2ee8f8cfdb110fd68af02b5ced8731b",
          "sha256": "c476f1dd388eaa601b2cbb3cfa1804a85a56701edca4e8fb93525cb844513b69"
        },
        "downloads": -1,
        "filename": "vertica_ml_python-1.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2ee8f8cfdb110fd68af02b5ced8731b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 384689,
        "upload_time": "2020-05-11T19:02:25",
        "upload_time_iso_8601": "2020-05-11T19:02:25.646778Z",
        "url": "https://files.pythonhosted.org/packages/c0/8d/20805f1475cb5f6797dd5c2ad68447754cea3133f332230abe84af02a99d/vertica_ml_python-1.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e91d42ff30f0b99ec5fe952ff23fed59cfcfdd84c5f67d92d8dced5fec9efbf",
        "md5": "c8df2e6b5294c2c367ef37ccac22884a",
        "sha256": "188d6a24af04bfee7c60379806b3ac3e781714a7ed52e81db4be60aea9f64332"
      },
      "downloads": -1,
      "filename": "vertica_ml_python-1.0b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8df2e6b5294c2c367ef37ccac22884a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 417159,
      "upload_time": "2020-05-11T19:02:23",
      "upload_time_iso_8601": "2020-05-11T19:02:23.492052Z",
      "url": "https://files.pythonhosted.org/packages/9e/91/d42ff30f0b99ec5fe952ff23fed59cfcfdd84c5f67d92d8dced5fec9efbf/vertica_ml_python-1.0b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c08d20805f1475cb5f6797dd5c2ad68447754cea3133f332230abe84af02a99d",
        "md5": "f2ee8f8cfdb110fd68af02b5ced8731b",
        "sha256": "c476f1dd388eaa601b2cbb3cfa1804a85a56701edca4e8fb93525cb844513b69"
      },
      "downloads": -1,
      "filename": "vertica_ml_python-1.0b0.tar.gz",
      "has_sig": false,
      "md5_digest": "f2ee8f8cfdb110fd68af02b5ced8731b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 384689,
      "upload_time": "2020-05-11T19:02:25",
      "upload_time_iso_8601": "2020-05-11T19:02:25.646778Z",
      "url": "https://files.pythonhosted.org/packages/c0/8d/20805f1475cb5f6797dd5c2ad68447754cea3133f332230abe84af02a99d/vertica_ml_python-1.0b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}