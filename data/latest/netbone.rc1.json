{
  "info": {
    "author": "Ali Yassin",
    "author_email": "aliyassin4@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# NetBone\n\nNetBone is a Python library for extracting network backbones from simple weighted networks.\n\n## Features\n\n- Extract network backbones from simple weighted networks\n- Contains six statistical methods for extracting backbones\n- Contains seven structural methods for extracting backbones\n- Includes three filters for extracting the backbone: boolean filter, threshold filter, and fraction filter\n- Built-in methods for comparing backbones with each other\n- Option to use custom comparison methods\n- Visualization tools to display the results of the comparison\n\n\n## Installation\n\nInstall the latest version of NetBone:\n```\npip install netbone\n```\nor\n```\npip install git+https://gitlab.liris.cnrs.fr/coregraphie/netbone\n```\n\n\n## Usage/Examples\n\n### Apply a backbone extraction method\nThe methods of netbone takes a networkx graph or a dataframe as an input.\n#### Statistical backbone extraction methods\n```\nimport netbone as nb\n\ngt = nb.global_threshold(G)\ndf = nb.disparity(G)\nnc = nb.noise_corrected(G)\nml = nb.marginal_likelihood(G)\necm = nb.ecm(G)\nlans = nb.lans(G)\n```\n#### Structural backbone extraction methods\n```\nimport netbone as nb\n\nmsp = nb.maximum_spanning_tree(G)\nds = nb.doubly_stochastic(G)\nhss = nb.high_salience_skeleton(G)\nhb = nb.h_backbone(G)\nmd = nb.metric_distance_backbone(G)\numd = nb.ultrametric_distance_backbone(G)\n\n# we pass the fraction of nodes to be preserved since the this method is recursive\nmod = nb.modularity_backbone(G, 0.3)\n```\n### Preview the assigned scores or p-values\n```\ndf_values = df.to_dataframe()\n\n# preview the dataframe\ndf_values\n\n|    |  source | target |  p_value | weight |\n|----|---------|--------|----------|--------|\n| 0  |    0    |    1   |   0.30   |    4   |\n| 1  |    0    |    2   |   0.22   |    5   |\n| 2  |    0    |    3   |   0.40   |    3   |\n| 3  |    0    |    4   |   0.39   |    3   |\n| 4  |    0    |    5   |   0.48   |    3   |\n| .. |   ...   |   ...  |   ...    |  ...   |\n```\n\n### Filtering and extracting the backbone\nNetbone offers three types of filters:\n\n#### Fraction Filter\nThis filter extracts a backbone with a particular fraction of edges utilizing the p-values or scores. The methods that can use this filter are:\n- global_threshold\n- disparity\n- noise_corrected\n- marginal_likelihood\n- ecm\n- lans\n- doubly_stochastic\n- high_salience_skeleton\n\n```\nfrom netbone.Filters import fraction_filter\ndf_fraction = fraction_filter(df, 0.3)\n```\n\n#### Threshold Filter\nThis filter extracts a backbone given a particular threshold utilizing the p-values or scores. The methods that can use this filter are:\n- global_threshold\n- disparity\n- noise_corrected\n- marginal_likelihood\n- ecm\n- lans\n- doubly_stochastic\n- high_salience_skeleton\n\n```\nfrom netbone.Filters import threshold_filter\ndf_fraction = threshold_filter(df, 0.05)\n```\n\n#### Boolean Filter\nThis filter is extracts a single backbone by the definition of the applies methods. The methods that can use this filter are:\n- maximum_spanning_tree\n- h_backbone\n- metric_distance_backbone\n- ultrametric_distance_backbone\n- doubly_stochastic\n- high_salience_skeleton\n- modularity_backbone\n\n```\nfrom netbone.Filters import boolean_filter\nmsp_backbone = boolean_filter(msp)\n```\n\n### Comparing the backbon extraction methods\nNetBone provides the Compare module that allows for easy comparison of backbone extraction methods. First we create a Compare instance and set the original network.\n```\nfrom netbone.Compare import Compare\n\n# create a comparison instance \ncompare = Compare()\n\n# set the original network\ng = nx.karate_club_graph()\ncompare.set_network(g)\n```\nThen we apply the backbone extraciton methods and add them.\n```\n# apply the methods \ndf = nb.disparity(g)\nnc = nb.noise_corrected(g)\n\n# add the applied methods to be compared \ncompare.add_backbone(df)\ncompare.add_backbone(nc)\n```\nThen we set the filter to be applied in the comparison\n```\nfrom netbone.Filters import fraction_filter\n\n# set the filter\ncompare.set_filter(fraction_filter, 0.2)\n```\n\nNow we are ready to compare the extracted backbones. NetBone offers three different comparison functions:\n#### Comparing Properties\nThis function extracts the backbones for each method given a filter and a set of properties. We can add built-in properties function from the Measures module:\n```\nfrom netbone.Measures import weight_fraction, edge_fraction\n\n# add the properties functions\ncompare.add_property(\"Edge Fraction\", edge_fraction)\ncompare.add_property(\"Weight Fraction\", weight_fraction)\n```\nor we can define our custom property function and add it:\n```\n# define a new property function and add it\ndef node_fraction(original, backbone):\n    return len(backbone.nodes())/ len(network.nodes())\n\n# add the defined function giving it a name\ncompare.add_property(\"Node Fraction\", node_fraction)\n```\n\nNow everything is setup we can compute the properties and preview them:\n```\nresults = compare.properties()\n\n# preview the results\nresults\n\n|                | Original | Noise Corrected Filter | Disparity Filter |\n|----------------|----------|------------------------|------------------|\n|Edge Fraction   |   1.0    |      0.192308          |     0.192308     |\n|Node Fraction   |   1.0    |      0.588235          |     0.470588     |\n|Weight Fraction |   1.0    |      0.233766          |     0.303030     |\n```\n\nFinally we can use the plot_radar function from the Visulaization module to plot the results in a radar plot:\n```\nfrom netbone.Visualize import plot_radar\n\n# visualize the results\nplot_radar(results, title='Karate Club Network')    \n```\n![alt text](images/Karate-Club-Network-props.png)\n\n\n\n#### Comparing Properties Progression\nThis function extracts the backbones for each method given a filter and a set of values(fractions or p-values), the it computes the progress of each added property as the given values changes(fraction or p-value).\n```\n\n# define the array of fractions\nfractions = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n\n# compute the properties progression and preview them:\nresults = compare.properties_progression(fractions)\n\n# preview the results of a property\nresults['Node Fraction']\n\n|Fraction of Edges | Noise Corrected Filter | Disparity Filter |\n|------------------|------------------------|------------------|                     \n|        0.1       |        0.323           |       0.323      |\n|        0.2       |        0.588           |       0.470      |  \n|        0.3       |        0.852           |       0.617      |\n|        0.4       |        0.970           |       0.764      |\n|        0.5       |        1.000           |       0.794      |\n|        0.6       |        1.000           |       0.882      |\n|        0.7       |        1.000           |       0.941      |\n|        0.8       |        1.000           |       1.000      |\n|        0.9       |        1.000           |       1.000      |\n|        1.0       |        1.000           |       1.000      |\n\n```\nFinally we can use the plot_props function from the Visulaization module to plot the results for each property:\n\n```\nfrom netbone.Visualize import plot_props\n\n# visualize the results\nplot_props(results, 'Karate Club Network')\n```\n\n![alt text](images/Karate-Club-Network-Node-Fraction.png)\n\n\n\n\n#### Comparing Distributions\nThis function extracts the backbones for each method given a filter, then it extract the values given a function and prepares these values to plot increasing or decreasing cumulative distribution. We can use built-in functions from the Measures module that retun a set of values such as the weights:\n```\nfrom netbone.Measures import weights\n\n# apply the function for each backbone\nresults = compare.cumulative_distribution('Weight', weights)\n\n```\nor we can define our custom function and add use it:\n```\ndef degrees(network):\n    return list(dict(network.degree()).values())\n\n# apply the function for each backbone\nresults = compare.cumulative_distribution('Degree', degrees)\n```\n\nNow we can use the plot_distribution function from the Visulaization module to plot the results:\n```\nfrom netbone.Visualize import plot_distribution\n\n# visualize the results\nplot_distribution(results, title='Karate Club Network')  \n```\n\n![alt text](images/Karate-Club-Network-dist.png)\n\n## Credits\nThis project includes code from the following sources:\n\n[ECM filter](https://github.com/deklanw/maxent_graph ),\n[Noise Corrected, Doubly Stochastic, High Salience Skeleton](https://www.michelecoscia.com/?page_id=287),\n[Marginal Likelihood](https://github.com/naviddianati/GraphPruning),\n[Metric Distance, Ultrametric Distance](https://github.com/rionbr/distanceclosure)\n## Contributing\n\nContributions are always welcome!\n\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.liris.cnrs.fr/coregraphie/netbone",
    "keywords": "backbone network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NetBone",
    "package_url": "https://pypi.org/project/NetBone/",
    "platform": null,
    "project_url": "https://pypi.org/project/NetBone/",
    "project_urls": {
      "Homepage": "https://gitlab.liris.cnrs.fr/coregraphie/netbone"
    },
    "release_url": "https://pypi.org/project/NetBone/0.17/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python package for extracting network backbones from simple weighted networks",
    "version": "0.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17404538,
  "releases": {
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4cfd535fc5261222df7c2da19e6ad488fd45280ac3e765d13212a31f91a26c1",
          "md5": "3d8d2908731f5b872a7068c7e0814326",
          "sha256": "23c50e0b4648d22f781378f51418ac7845d710aeca848ff8380d26cae66466c8"
        },
        "downloads": -1,
        "filename": "NetBone-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "3d8d2908731f5b872a7068c7e0814326",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34014,
        "upload_time": "2023-03-21T08:32:23",
        "upload_time_iso_8601": "2023-03-21T08:32:23.622865Z",
        "url": "https://files.pythonhosted.org/packages/f4/cf/d535fc5261222df7c2da19e6ad488fd45280ac3e765d13212a31f91a26c1/NetBone-0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4cfd535fc5261222df7c2da19e6ad488fd45280ac3e765d13212a31f91a26c1",
        "md5": "3d8d2908731f5b872a7068c7e0814326",
        "sha256": "23c50e0b4648d22f781378f51418ac7845d710aeca848ff8380d26cae66466c8"
      },
      "downloads": -1,
      "filename": "NetBone-0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "3d8d2908731f5b872a7068c7e0814326",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34014,
      "upload_time": "2023-03-21T08:32:23",
      "upload_time_iso_8601": "2023-03-21T08:32:23.622865Z",
      "url": "https://files.pythonhosted.org/packages/f4/cf/d535fc5261222df7c2da19e6ad488fd45280ac3e765d13212a31f91a26c1/NetBone-0.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}