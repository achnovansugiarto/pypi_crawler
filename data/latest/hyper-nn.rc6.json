{
  "info": {
    "author": "Shyam Sudhakaran",
    "author_email": "shyamsnair@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# hyper-nn -- Easy Hypernetworks in Pytorch and Flax\n[![PyPi version](https://badgen.net/pypi/v/hyper-nn/)](https://pypi.org/project/hyper-nn)\n\n\n**Note: This library is experimental and currently under development - the flax implementations in particular are far from perfect and can be improved. If you have any suggestions on how to improve this library, please open a github issue or feel free to reach out directly!**\n\n`hyper-nn` gives users with the ability to create easily customizable [Hypernetworks](https://arxiv.org/abs/1609.09106) for almost any generic `torch.nn.Module` from [Pytorch](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) and `flax.linen.Module` from [Flax](https://flax.readthedocs.io/en/latest/flax.linen.html). Our Hypernetwork objects are also `torch.nn.Modules` and `flax.linen.Modules`, allowing for easy integration with existing systems. For Pytorch, we make use of the amazing library [`functorch`](https://github.com/pytorch/functorch)\n\n<p align=\"center\">Generating Policy Weights for Lunar Lander</p>\n\n<p float=\"left\">\n  <img width=\"54%\" src=\"https://raw.githubusercontent.com/shyamsn97/hyper-nn/main/images/torch_lunar_lander.gif\">\n  <img width=\"45%\" src=\"https://raw.githubusercontent.com/shyamsn97/hyper-nn/main/images/LunarLanderWeights.png\">\n</p>\n\n<br></br>\n\n<p align=\"center\">Dynamic Weights for each character in a name generator</p>\n\n<p float=\"center\" align=\"center\">\n  <img width=\"100%\" src=\"https://raw.githubusercontent.com/shyamsn97/hyper-nn/main/images/DynamicWeights.png\">\n</p>\n\n---\n\n\n## Install\n`hyper-nn` tested on python 3.8+\n\n#### Installing with pip\n```bash\n$ pip install hyper-nn\n```\n\n#### Installing from source\n```bash\n$ git clone git@github.com:shyamsn97/hyper-nn.git\n$ cd hyper-nn\n$ python setup.py install\n```\n\nFor gpu functionality with Jax, you will need to follow the instructions [here](https://github.com/google/jax#installation)\n\n---\n## What are Hypernetworks?\n[Hypernetworks](https://arxiv.org/abs/1609.09106), simply put, are neural networks that generate parameters for another neural network. They can be incredibly powerful, being able to represent large networks while using only a fraction of their parameters.\n\nHypernetworks generally come in two variants, static or dynamic. Static Hypernetworks have a fixed or learned embedding and weight generator that outputs the target networksâ€™ weights deterministically. Dynamic Hypernetworks instead receive inputs and use them to generate dynamic weights.\n\n<p align=\"center\">\n  <img width=\"75%\" src=\"https://raw.githubusercontent.com/shyamsn97/hyper-nn/main/images/dynamic_hypernetwork.drawio.svg\">\n</p>\n`hyper-nn` allows you to design Hypernetworks with flexibility and ease, all you have to do is implement the `generate_params` method, which outputs a parameter vector. We also include basic versions of this, composed of two linear components:\n\n- `embedding_module` that holds information about layers(s) in the target network, or more generally a chunk of the target networks weights. By default this outputs a matrix of size `num_embeddings x embedding_dim`\n- `weight_generator`, which takes in the embedding and outputs a flat parameter vector for the target network. By default this module outputs chunks in the size of `weight_chunk_dim`, which is calculated automatically as `num_target_parameters // num_embeddings`.\n\n\nBoth `embedding_module` and `weight_generator` are represented as `torch.nn.Module` and `flax.linen.Module` objects. a `Module` can be passed in as `custom_embedding_module` or `custom_weight_generator`, or it can be defined in the methods `make_embedding_module` or `make_weight_generator`. \n\nThe `generate_params` method feeds the output from `embedding_module` into `weight_generator` to output the target parameters.\n\nThe `forward` method takes in a list of inputs and uses the generated parameters to calculate the output. This method acts as the main method for both jax and torch hypernetworks\n\n### [Torch Hypernetwork](hypernn/torch/hypernet.py#L81)\n```python\n...\n  def make_embedding_module(self) -> nn.Module:\n      return nn.Embedding(self.num_embeddings, self.embedding_dim)\n\n  def make_weight_generator(self) -> nn.Module:\n      return nn.Linear(self.embedding_dim, self.weight_chunk_dim)\n\n  def generate_params(self, *args, **kwargs) -> Tuple[torch.Tensor, Dict[str, Any]]:\n      embedding = self.embedding_module(\n          torch.arange(self.num_embeddings, device=self.device)\n      )\n      generated_params = self.weight_generator(embedding).view(-1)\n      return generated_params, {\"embedding\": embedding}\n\n  def target_forward(\n      self,\n      *args,\n      generated_params: torch.Tensor,\n      assert_parameter_shapes: bool = True,\n      **kwargs,\n  ) -> torch.Tensor:\n      if assert_parameter_shapes:\n          self.assert_parameter_shapes(generated_params)\n\n      return self.target_network(generated_params, *args, **kwargs)\n\n  def forward(\n      self,\n      *args,\n      generated_params: Optional[torch.Tensor] = None,\n      has_aux: bool = False,\n      assert_parameter_shapes: bool = True,\n      generate_params_kwargs: Dict[str, Any] = {},\n      **kwargs,\n  ):\n      \"\"\"\n      Main method for creating / using generated parameters and passing in input into the target network\n\n      Args:\n          generated_params (Optional[torch.Tensor], optional): Generated parameters of the target network. If not provided, the hypernetwork will generate the parameters. Defaults to None.\n          has_aux (bool, optional): If True, return the auxiliary output from generate_params method. Defaults to False.\n          assert_parameter_shapes (bool, optional): If True, raise an error if generated_params does not have shape (num_target_parameters,). Defaults to True.\n          generate_params_kwargs (Dict[str, Any], optional): kwargs to be passed to generate_params method\n          *args, *kwargs, arguments to be passed into the target network (also gets passed into generate_params)\n      Returns:\n          output (torch.Tensor) | (torch.Tensor, Dict[str, torch.Tensor]): returns output from target network and optionally auxiliary output.\n      \"\"\"\n      aux_output = {}\n      if generated_params is None:\n          generated_params, aux_output = self.generate_params(\n              *args, **kwargs, **generate_params_kwargs\n          )\n\n      if has_aux:\n          return (\n              self.target_forward(\n                  *args,\n                  generated_params=generated_params,\n                  assert_parameter_shapes=assert_parameter_shapes,\n                  **kwargs,\n              ),\n              generated_params,\n              aux_output,\n          )\n      return self.target_forward(\n          *args,\n          generated_params=generated_params,\n          assert_parameter_shapes=assert_parameter_shapes,\n          **kwargs,\n      )\n\n...\n```\n### [Flax Hypernetwork](hypernn/jax/hypernet.py#L76)\n```python\n...\n  def make_embedding_module(self):\n      return nn.Embed(\n          self.num_embeddings,\n          self.embedding_dim,\n          embedding_init=jax.nn.initializers.uniform(),\n      )\n\n  def make_weight_generator(self):\n      return nn.Dense(self.weight_chunk_dim)\n\n  def generate_params(self, *args, **kwargs) -> Tuple[jnp.array, Dict[str, Any]]:\n      embedding = self.embedding_module(jnp.arange(0, self.num_embeddings))\n      generated_params = self.weight_generator(embedding).reshape(-1)\n      return generated_params, {\"embedding\": embedding}\n\n  def target_forward(\n      self,\n      *args,\n      generated_params: jnp.array,\n      assert_parameter_shapes: bool = True,\n      **kwargs,\n  ) -> jnp.array:\n\n      if assert_parameter_shapes:\n          self.assert_parameter_shapes(generated_params)\n\n      param_tree = create_param_tree(\n          generated_params, self.target_weight_shapes, self.target_treedef\n      )\n\n      return self.target_network.apply(param_tree, *args, **kwargs)\n\n  def forward(\n      self,\n      *args,\n      generated_params: Optional[jnp.array] = None,\n      has_aux: bool = False,\n      assert_parameter_shapes: bool = True,\n      generate_params_kwargs: Dict[str, Any] = {},\n      **kwargs,\n  ) -> Tuple[jnp.array, List[jnp.array]]:\n      \"\"\"\n      Main method for creating / using generated parameters and passing in input into the target network\n\n      Args:\n          generated_params (Optional[jnp.array], optional): Generated parameters of the target network. If not provided, the hypernetwork will generate the parameters. Defaults to None.\n          has_aux (bool, optional): If True, return the auxiliary output from generate_params method. Defaults to False.\n          assert_parameter_shapes (bool, optional): If True, raise an error if generated_params does not have shape (num_target_parameters,). Defaults to True.\n          generate_params_kwargs (Dict[str, Any], optional): kwargs to be passed to generate_params method\n\n      Returns:\n          output (torch.Tensor) | (jnp.array, Dict[str, jnp.array]): returns output from target network and optionally auxiliary output.\n      \"\"\"\n      aux_output = {}\n      if generated_params is None:\n          generated_params, aux_output = self.generate_params(\n              *args, **kwargs, **generate_params_kwargs\n          )\n\n      if has_aux:\n          return (\n              self.target_forward(\n                  *args,\n                  generated_params=generated_params,\n                  assert_parameter_shapes=assert_parameter_shapes,\n                  **kwargs,\n              ),\n              generated_params,\n              aux_output,\n          )\n      return self.target_forward(\n          *args,\n          generated_params=generated_params,\n          assert_parameter_shapes=assert_parameter_shapes,\n          **kwargs,\n      )\n\n...\n```\n\n---\n## Quick Usage\n\nfor detailed examples see [notebooks](notebooks/)\n- [Generating weights for a CNN on MNIST](notebooks/mnist/)\n- [Lunar Lander Reinforce (Vanilla Policy Gradient)](notebooks/reinforce/)\n- [Dynamic Hypernetworks for name generation](notebooks/dynamic_hypernetworks/)\n\n\nThe main classes to use are `TorchHyperNetwork` and `JaxHyperNetwork` and those that inherit them. Instead of constructing them directly, use the `from_target` method, shown below. After this you can use the hypernetwork exactly like any other `nn.Module`!\n\n`hyper-nn` also makes it easy to create Dynamic Hypernetworks that use inputs to create target weights. Basic implementations (both < 100 lines) are provided with `JaxDynamicHyperNetwork` and `TorchDynamicHyperNetwork`, which use an rnn and current input to generate weights.\n\nTo create hypernetworks, its easier to use the `from_target` method instead of instantiating it directly because some parameters are calculated automatically for you.\n\n### Pytorch\n```python\nimport torch\nimport torch.nn as nn\n\nfrom hypernn.torch import TorchHyperNetwork, TorchLinearHyperNetwork, TorchDynamicHyperNetwork\n\n# any module\ntarget_network = nn.Sequential(\n    nn.Linear(32, 64),\n    nn.ReLU(),\n    nn.Linear(64, 32)\n)\n\nEMBEDDING_DIM = 4\nNUM_EMBEDDINGS = 32\n\nhypernetwork = TorchLinearHyperNetwork(\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS\n)\n\n# now we can use the hypernetwork like any other nn.Module\ninp = torch.zeros((1, 32))\n\n# by default we only output what we'd expect from the target network\noutput = hypernetwork(inp)\n\n# return aux_output\noutput, generated_params, aux_output = hypernetwork(inp, has_aux=True)\n\n# generate params separately\ngenerated_params, aux_output = hypernetwork.generate_params()\noutput = hypernetwork(inp, generated_params=generated_params)\n\n\n### Dynamic Hypernetwork\n\ndynamic_hypernetwork = TorchDynamicHyperNetwork(\n    input_dim = 32,\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS\n)\n\noutput = dynamic_hypernetwork(inp, generate_params_kwargs=dict(x=inp))\n\n# by default we only output what we'd expect from the target network\noutput = dynamic_hypernetwork(inp, generate_params_kwargs=dict(x=inp, hidden_state=torch.zeros((1,32))))\n\n```\n\n### Jax\n```python\nimport flax.linen as nn\nimport jax.numpy as jnp\nfrom jax import random\n\nfrom hypernn.jax import JaxHyperNetwork, JaxLinearHyperNetwork, JaxDynamicHyperNetwork\n\n# any module\ntarget_network = nn.Sequential(\n    [\n        nn.Dense(64),\n        nn.relu,\n        nn.Dense(32)\n    ]\n)\n\nEMBEDDING_DIM = 4\nNUM_EMBEDDINGS = 32\n\nhypernetwork = JaxLinearHyperNetwork.from_target(\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS,\n    inputs=jnp.zeros((1, 32)) # jax needs this to initialize target weights\n)\n\n# now we can use the hypernetwork like any other nn.Module\ninp = jnp.zeros((1, 32))\nkey = random.PRNGKey(0)\nhypernetwork_params = hypernetwork.init(key, inp) # flax needs to initialize hypernetwork parameters first\n\n# by default we only output what we'd expect from the target network\noutput = hypernetwork.apply(hypernetwork_params, inp)\n\n# return aux_output\noutput, generated_params, aux_output = hypernetwork.apply(hypernetwork_params, inp, has_aux=True)\n\n# generate params separately\ngenerated_params, aux_output = hypernetwork.apply(hypernetwork_params, method=hypernetwork.generate_params)\n\noutput = hypernetwork.apply(hypernetwork_params, inp, generated_params=generated_params)\n\n\n### Dynamic Hypernetwork\n\ndynamic_hypernetwork = JaxDynamicHyperNetwork.from_target(\n    input_dim = 32,\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS,\n    inputs=jnp.zeros((1, 32)) # jax needs this to initialize target weights\n)\ndynamic_hypernetwork_params = dynamic_hypernetwork.init(key, inp, generate_params_kwargs=dict(x=inp, hidden_state=jnp.zeros((1,32)))) # flax needs to initialize hypernetwork parameters first\n\n# by default we only output what we'd expect from the target network\noutput = dynamic_hypernetwork.apply(dynamic_hypernetwork_params, inp, generate_params_kwargs=dict(x=inp, hidden_state=jnp.zeros((1,32))))\n\n# by default we only output what we'd expect from the target network\noutput = dynamic_hypernetwork.apply(dynamic_hypernetwork_params, inp, generate_params_kwargs=dict(x=inp, hidden_state=jnp.zeros((1,32))))\n\n```\n\n## Customizing Hypernetworks\n`hyper-nn` makes it easy to customize and create more complex hypernetworks.\n\nThe main components to modify are the methods `generate_params`. This allows for complete control over how the hypernetwork generates parameters\n\nFor example, here we extend the linear hypernetwork which uses components `embedding_module` and `weight_generator`. We implement a hypernetwork that could be useful in a multi task setting, where a one hot encoded class embedding is concatenated to every row in the embedding matrix outputted by the `embedding_module`. In addition, we override both our `make_embedding_module` and `make_weight_generator` methods to output customized modules. This whole class implementation is under 50 lines of code!\n\n```python\nfrom typing import Optional, Iterable, Any, Tuple, Dict\nimport torch\nimport torch.nn as nn\n# static hypernetwork\nfrom hypernn.torch import TorchHyperNetwork\nfrom hypernn.torch.utils import get_weight_chunk_dims\n\nclass MultiTaskHypernetwork(TorchHyperNetwork):\n    def __init__(\n        self,\n        num_tasks: int,\n        target_network: nn.Module,\n        num_target_parameters: Optional[int] = None,\n        embedding_dim: int = 100,\n        num_embeddings: int = 3,\n        weight_chunk_dim: Optional[int] = None,\n    ):\n        super().__init__(\n                    target_network = target_network,\n                    num_target_parameters = num_target_parameters,\n                )\n        self.num_tasks = num_tasks\n        self.embedding_dim = embedding_dim\n        self.num_embeddings = num_embeddings\n        self.weight_chunk_dim = weight_chunk_dim\n        if weight_chunk_dim is None:\n            self.weight_chunk_dim = get_weight_chunk_dims(\n                self.num_target_parameters, num_embeddings\n            )\n        self.embedding_module = self.make_embedding_module()\n        self.weight_generator = self.make_weight_generator()        \n\n    def make_embedding_module(self) -> nn.Module:\n        embedding = nn.Embedding(self.num_embeddings, 8)\n        return nn.Sequential(\n            embedding,\n            nn.Tanh(),\n            nn.Linear(8, self.embedding_dim),\n            nn.Tanh(),\n        )\n\n    def make_weight_generator(self) -> nn.Module:\n        return nn.Sequential(\n            nn.Linear(self.embedding_dim + self.num_tasks, 32),\n            nn.Tanh(),\n            nn.Linear(32, self.weight_chunk_dim)\n        )\n\n    def generate_params(\n        self, one_hot_task_embedding: torch.Tensor\n    ) -> Tuple[torch.Tensor, Dict[str, Any]]:\n        embedding = self.embedding_module(\n            torch.arange(self.num_embeddings, device=self.device)\n        )\n        one_hot_task_embedding = one_hot_task_embedding.repeat(self.num_embeddings, 1) # repeat to concat to embedding\n        concatenated = torch.cat((embedding, one_hot_task_embedding), dim=-1)\n        generated_params = self.weight_generator(concatenated).view(-1)\n        return generated_params, {\"embedding\": embedding}\n\n# usage\ntarget_network = nn.Sequential(\n    nn.Linear(32, 64),\n    nn.ReLU(),\n    nn.Linear(64, 32)\n)\n\nNUM_TASKS = 4\nEMBEDDING_DIM = 4\nNUM_EMBEDDINGS = 32\n\nhypernetwork = MultiTaskHypernetwork(\n    num_tasks = NUM_TASKS,\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS\n)\ninp = torch.zeros((1, 32))\none_hot_task_embedding = torch.tensor([0.0,0.0,1.0,0.0]).view((1,4))\n\nout = hypernetwork(inp, generate_params_kwargs=dict(one_hot_task_embedding=one_hot_task_embedding))\n```\n\n---\n## Advanced: Using vmap for batching operations\nThis is useful when dealing with dynamic hypernetworks that generate different params depending on inputs.\n\n### Pytorch\n```python\nimport torch.nn as nn\nfrom functorch import vmap\n\n# dynamic hypernetwork\nfrom hypernn.torch import TorchDynamicHyperNetwork\n\n# any module\ntarget_network = nn.Sequential(\n    nn.Linear(8, 256),\n    nn.ReLU(),\n    nn.Linear(256, 32)\n)\n\nEMBEDDING_DIM = 4\nNUM_EMBEDDINGS = 32\n\n# conditioned on input to generate param vector\nhypernetwork = TorchDynamicHyperNetwork(\n    target_network = target_network,\n    embedding_dim = EMBEDDING_DIM,\n    num_embeddings = NUM_EMBEDDINGS,\n    input_dim = 8\n)\n\n# batch of 10 inputs\ninp = torch.randn((10, 1, 8))\n\n# use with a for loop\noutputs = []\nfor i in range(10):\n    outputs.append(hypernetwork(inp[i], generate_params_kwargs=dict(x=inp[i])))\noutputs = torch.stack(outputs)\nassert outputs.size() == (10, 1, 32)\n\n# using vmap\nfrom typing import Dict, Any\n\ndef forward(\n    generated_params,\n    *args,\n    has_aux: bool = False,\n    assert_parameter_shapes: bool = True,\n    generate_params_kwargs: Dict[str, Any] = {},\n    **kwargs\n):\n    return hypernetwork.forward(*args,\n                                generated_params=generated_params,\n                                has_aux=has_aux,\n                                assert_parameter_shapes=assert_parameter_shapes,\n                                generate_params_kwargs=generate_params_kwargs,\n                                **kwargs)\n\ngenerated_vmap_params, aux_output = vmap(hypernetwork.generate_params)(inp)\noutputs = vmap(forward)(generated_vmap_params, inp)\n\nassert outputs.size() == (10, 1, 32)\n```\n## Future Plans\nHere's a list of some stuff that will hopefully be added to the library. If anyone has other suggestions, please reach out / create an issue!\n\n- [x] MNIST example\n- [x] Lunar Lander Example\n- [x] Dynamic Hypernetwork Example\n- [x] Multi-task Hypernetwork Example\n- [ ] Dedicated documentation website\n- [ ] Efficient batching for DynamicJaxHypernetwork\n- [ ] Implementation of [HyperTransformer](https://arxiv.org/abs/2201.04182)\n- [ ] Implementation of [Recomposing the Reinforcement Learning Building Blocks with Hypernetworks](https://arxiv.org/abs/2106.06842)\n- [ ] Implementation of [Goal-Conditioned Generators of Deep Policies\n](https://arxiv.org/abs/2207.01570)\n\n\n---\n## Citing hyper-nn\n\nIf you use this software in your publications, please cite it by using the following BibTeX entry.\n\n```bibtex\n@misc{sudhakaran2022,\n  author = {Sudhakaran, Shyam Sudhakaran},\n  title = {hyper-nn},\n  howpublished = {\\url{https://github.com/shyamsn97/hyper-nn}},\n  year = {2022},\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shyamsn97/hyper-nn",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hyper-nn",
    "package_url": "https://pypi.org/project/hyper-nn/",
    "platform": null,
    "project_url": "https://pypi.org/project/hyper-nn/",
    "project_urls": {
      "Homepage": "https://github.com/shyamsn97/hyper-nn"
    },
    "release_url": "https://pypi.org/project/hyper-nn/0.2.2/",
    "requires_dist": [
      "numpy",
      "torch",
      "flax",
      "jax"
    ],
    "requires_python": "",
    "summary": "Easy hypernetworks in Pytorch and Flax",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16241699,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "707b961a6beaddd494148b92f7b95da3a5a49ef5882026c70e2528477cbf4d67",
          "md5": "4195ca03373162b99978242fdd31d811",
          "sha256": "a39f9610333238ddb1e79b5a9d2bcd5343d7724790f27c8ef93c1d70475dda60"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "4195ca03373162b99978242fdd31d811",
        "packagetype": "bdist_egg",
        "python_version": "0.1.0",
        "requires_python": null,
        "size": 7516,
        "upload_time": "2022-05-31T02:25:47",
        "upload_time_iso_8601": "2022-05-31T02:25:47.692500Z",
        "url": "https://files.pythonhosted.org/packages/70/7b/961a6beaddd494148b92f7b95da3a5a49ef5882026c70e2528477cbf4d67/hyper_nn-0.1.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8692dfce1a8d4a18aeb21c5698d4d7b4cdab99e0216b9863c83ae5eb9f159f63",
          "md5": "d745aadb2ab25386dd724208da6a8049",
          "sha256": "c5851b159db5683d8a115eee3761591ce89b40328ef39b1ffa0dbd21cc2a99d3"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d745aadb2ab25386dd724208da6a8049",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6668,
        "upload_time": "2022-05-31T02:25:43",
        "upload_time_iso_8601": "2022-05-31T02:25:43.936159Z",
        "url": "https://files.pythonhosted.org/packages/86/92/dfce1a8d4a18aeb21c5698d4d7b4cdab99e0216b9863c83ae5eb9f159f63/hyper_nn-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "659421a691e17a23310a3331cc01ed8c90671404490ccec7892b93dfccc77714",
          "md5": "2df59c063923003616f3338c5f031d04",
          "sha256": "608e2b346059d6c85e2ae11024fe0a5a9d33c50771cd3fe4b79f311ff16e7fb5"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2df59c063923003616f3338c5f031d04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6050,
        "upload_time": "2022-05-31T02:25:45",
        "upload_time_iso_8601": "2022-05-31T02:25:45.722048Z",
        "url": "https://files.pythonhosted.org/packages/65/94/21a691e17a23310a3331cc01ed8c90671404490ccec7892b93dfccc77714/hyper-nn-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99fe638f29f3a9c0157245e5fb181d756faa137cb1bbd80a6bd16b18aa2ce954",
          "md5": "84dc76817dde139d404676193c2fec32",
          "sha256": "a96de8a18c0e83e7250b07782ee72fe66ed2b717f3d9f4e790eff593973e0c5c"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "84dc76817dde139d404676193c2fec32",
        "packagetype": "bdist_egg",
        "python_version": "0.1.1",
        "requires_python": null,
        "size": 25617,
        "upload_time": "2022-05-31T21:11:17",
        "upload_time_iso_8601": "2022-05-31T21:11:17.667763Z",
        "url": "https://files.pythonhosted.org/packages/99/fe/638f29f3a9c0157245e5fb181d756faa137cb1bbd80a6bd16b18aa2ce954/hyper_nn-0.1.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca356e2b9830322045a642bad8836d524bb3ce9a4c28836db84db966f3e253c7",
          "md5": "76f27e346a69005865ae425e98c4ec2b",
          "sha256": "43ceb684016e3677de00a11730882f91c807030ac978048c5d48f5b87c054c10"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76f27e346a69005865ae425e98c4ec2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13259,
        "upload_time": "2022-05-31T21:11:13",
        "upload_time_iso_8601": "2022-05-31T21:11:13.100418Z",
        "url": "https://files.pythonhosted.org/packages/ca/35/6e2b9830322045a642bad8836d524bb3ce9a4c28836db84db966f3e253c7/hyper_nn-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e2b6136128736ade199bf595a23b959e34ab6241b51c418cf5c410fa96d6f8b",
          "md5": "96a38599bfba125a88046bbc316448a9",
          "sha256": "902dc435107eca9da20e8fca00cb84debba53c788f2f4a684a76f55c152b86e6"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "96a38599bfba125a88046bbc316448a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9471,
        "upload_time": "2022-05-31T21:11:15",
        "upload_time_iso_8601": "2022-05-31T21:11:15.468891Z",
        "url": "https://files.pythonhosted.org/packages/4e/2b/6136128736ade199bf595a23b959e34ab6241b51c418cf5c410fa96d6f8b/hyper-nn-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "807165731cc9f8d77b505679c5877b7976b948626f181eb0c7e8b2ba2b66f633",
          "md5": "0c1525e62dae82046149e3908088175d",
          "sha256": "1909ba4226da5849b2add0470e367e16aa3d62957bb84ba56ab6140c291f11ca"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "0c1525e62dae82046149e3908088175d",
        "packagetype": "bdist_egg",
        "python_version": "0.1.2",
        "requires_python": null,
        "size": 26025,
        "upload_time": "2022-05-31T21:55:44",
        "upload_time_iso_8601": "2022-05-31T21:55:44.957518Z",
        "url": "https://files.pythonhosted.org/packages/80/71/65731cc9f8d77b505679c5877b7976b948626f181eb0c7e8b2ba2b66f633/hyper_nn-0.1.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4876dc9c3d93879449b0823d66810fbf4774be0134ce5cf2b07db56f5b9ca9",
          "md5": "86994ab303202d625c40f4b13f9db04d",
          "sha256": "1a072a31e0dee1105286128efb493151d38f4b4882a01c61bc0334d729ed5011"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86994ab303202d625c40f4b13f9db04d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13657,
        "upload_time": "2022-05-31T21:55:41",
        "upload_time_iso_8601": "2022-05-31T21:55:41.056230Z",
        "url": "https://files.pythonhosted.org/packages/1b/48/76dc9c3d93879449b0823d66810fbf4774be0134ce5cf2b07db56f5b9ca9/hyper_nn-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d2dc5009a46553b10b3cc008fbef5b9f50140800c25537124e0c0c04ca9fe12",
          "md5": "3a9d139e22fa409d1a8e3a2ad583031f",
          "sha256": "ff2afde26054e461a8baf9a10a22566afaf88e04c550c2f6b6157d1fa5fb414c"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3a9d139e22fa409d1a8e3a2ad583031f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9908,
        "upload_time": "2022-05-31T21:55:42",
        "upload_time_iso_8601": "2022-05-31T21:55:42.988885Z",
        "url": "https://files.pythonhosted.org/packages/9d/2d/c5009a46553b10b3cc008fbef5b9f50140800c25537124e0c0c04ca9fe12/hyper-nn-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4517eba604732f3f4af7f30c8b237f0cd17f8d114c777b6d220d4b9d72edf6a3",
          "md5": "75e7d73cf1f64a57b223b0e43783e2df",
          "sha256": "698ae4c9ec5a76315d16bbb4443d78714d5be68daeb1488f8d9795e6bae416c1"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.3-py3.9.egg",
        "has_sig": false,
        "md5_digest": "75e7d73cf1f64a57b223b0e43783e2df",
        "packagetype": "bdist_egg",
        "python_version": "0.1.3",
        "requires_python": null,
        "size": 28338,
        "upload_time": "2022-08-11T20:13:34",
        "upload_time_iso_8601": "2022-08-11T20:13:34.436996Z",
        "url": "https://files.pythonhosted.org/packages/45/17/eba604732f3f4af7f30c8b237f0cd17f8d114c777b6d220d4b9d72edf6a3/hyper_nn-0.1.3-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "367ea7c4228aeaa8600b67896b6f2c5feb0c152f66abf97e6b78a5511608886f",
          "md5": "54e2531b0cb41d0ff777cac551d52cb2",
          "sha256": "9efa508a2aaaf17a7b505cd6355ef063295f38c053339e1e90edf5cf08cd1d2e"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54e2531b0cb41d0ff777cac551d52cb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15298,
        "upload_time": "2022-08-11T20:13:30",
        "upload_time_iso_8601": "2022-08-11T20:13:30.238368Z",
        "url": "https://files.pythonhosted.org/packages/36/7e/a7c4228aeaa8600b67896b6f2c5feb0c152f66abf97e6b78a5511608886f/hyper_nn-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b167d2276bf49aaec050557f7eef5406df1c73aec46acd7a852c270aee79c45",
          "md5": "db08d92bdf9202b4eee161f82b454bad",
          "sha256": "6e0541add63db39abf7c041b069b0462f29cb1648a2a978c431cbc3aa882a533"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "db08d92bdf9202b4eee161f82b454bad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12007,
        "upload_time": "2022-08-11T20:13:32",
        "upload_time_iso_8601": "2022-08-11T20:13:32.425121Z",
        "url": "https://files.pythonhosted.org/packages/2b/16/7d2276bf49aaec050557f7eef5406df1c73aec46acd7a852c270aee79c45/hyper-nn-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eee58d36e1be41c10d0c16a40af9f037e68c5b17fc8e675ce52d166e7be26fe7",
          "md5": "b2428228af39fb5c90d34687fe043d48",
          "sha256": "78ae7f60ba37543bdfdac275b1b2724a365c3fda59adaa06acd92cdc733bc6fa"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.2.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "b2428228af39fb5c90d34687fe043d48",
        "packagetype": "bdist_egg",
        "python_version": "0.2.0",
        "requires_python": null,
        "size": 28620,
        "upload_time": "2022-11-02T00:17:54",
        "upload_time_iso_8601": "2022-11-02T00:17:54.983072Z",
        "url": "https://files.pythonhosted.org/packages/ee/e5/8d36e1be41c10d0c16a40af9f037e68c5b17fc8e675ce52d166e7be26fe7/hyper_nn-0.2.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a712801cee0394bc3925159b4dcfd081650d2aeeb94d7ff4507e87d0b1ad136",
          "md5": "26786d9de74dc94149cc9198fe0edda9",
          "sha256": "3ab3d20e3eef5adb33664e74b5b20ee525612f3bf9a1429161d065ef27a9cd44"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26786d9de74dc94149cc9198fe0edda9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15497,
        "upload_time": "2022-11-02T00:17:51",
        "upload_time_iso_8601": "2022-11-02T00:17:51.383509Z",
        "url": "https://files.pythonhosted.org/packages/5a/71/2801cee0394bc3925159b4dcfd081650d2aeeb94d7ff4507e87d0b1ad136/hyper_nn-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b22f1b47e4eb356ca3a72c3afc5b144c8cc442d29ec3a3288dc97007ecc5011",
          "md5": "98d75d83ab5800f386ae003e9203efbe",
          "sha256": "ca1ea5f3a9d360611f30c9c53e480729720bee87577facbdbb4cb37e061506e5"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98d75d83ab5800f386ae003e9203efbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12289,
        "upload_time": "2022-11-02T00:17:53",
        "upload_time_iso_8601": "2022-11-02T00:17:53.111936Z",
        "url": "https://files.pythonhosted.org/packages/2b/22/f1b47e4eb356ca3a72c3afc5b144c8cc442d29ec3a3288dc97007ecc5011/hyper-nn-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8691a39c8aa0143b5000195f0e51a836506f9db57845f3f01626342f3ff032ae",
          "md5": "36d3b9d3c1419b446f4ec06307496b05",
          "sha256": "cbe5baf170907ca3384bc9b17dfc3222cccaa0b8cfdc452aea89f958dceda50f"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.2.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "36d3b9d3c1419b446f4ec06307496b05",
        "packagetype": "bdist_egg",
        "python_version": "0.2.2",
        "requires_python": null,
        "size": 34036,
        "upload_time": "2022-12-28T21:46:05",
        "upload_time_iso_8601": "2022-12-28T21:46:05.849772Z",
        "url": "https://files.pythonhosted.org/packages/86/91/a39c8aa0143b5000195f0e51a836506f9db57845f3f01626342f3ff032ae/hyper_nn-0.2.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "840ddf732a43b8eb752269751b3e0a1299bef2e25ba42ce5fc638cc943e6873b",
          "md5": "643bf2744dee74ab7864560d28ff2e76",
          "sha256": "cfc0eefacc97bdabc3f5ae831ce915e637c683904e73277042405c7dede640f5"
        },
        "downloads": -1,
        "filename": "hyper_nn-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "643bf2744dee74ab7864560d28ff2e76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17775,
        "upload_time": "2022-12-28T21:46:01",
        "upload_time_iso_8601": "2022-12-28T21:46:01.899666Z",
        "url": "https://files.pythonhosted.org/packages/84/0d/df732a43b8eb752269751b3e0a1299bef2e25ba42ce5fc638cc943e6873b/hyper_nn-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27a4eca5d3c9b55850b2da904afff085acbec300460a3626d43ed116deace06e",
          "md5": "f7ab23d6596dce8f5f5e86a0abe14f31",
          "sha256": "4a88eee75b94bf90246b06ab0f19d08d2673316f5550d8147b5ac41919ac7e09"
        },
        "downloads": -1,
        "filename": "hyper-nn-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f7ab23d6596dce8f5f5e86a0abe14f31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12802,
        "upload_time": "2022-12-28T21:46:03",
        "upload_time_iso_8601": "2022-12-28T21:46:03.946124Z",
        "url": "https://files.pythonhosted.org/packages/27/a4/eca5d3c9b55850b2da904afff085acbec300460a3626d43ed116deace06e/hyper-nn-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8691a39c8aa0143b5000195f0e51a836506f9db57845f3f01626342f3ff032ae",
        "md5": "36d3b9d3c1419b446f4ec06307496b05",
        "sha256": "cbe5baf170907ca3384bc9b17dfc3222cccaa0b8cfdc452aea89f958dceda50f"
      },
      "downloads": -1,
      "filename": "hyper_nn-0.2.2-py3.9.egg",
      "has_sig": false,
      "md5_digest": "36d3b9d3c1419b446f4ec06307496b05",
      "packagetype": "bdist_egg",
      "python_version": "0.2.2",
      "requires_python": null,
      "size": 34036,
      "upload_time": "2022-12-28T21:46:05",
      "upload_time_iso_8601": "2022-12-28T21:46:05.849772Z",
      "url": "https://files.pythonhosted.org/packages/86/91/a39c8aa0143b5000195f0e51a836506f9db57845f3f01626342f3ff032ae/hyper_nn-0.2.2-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "840ddf732a43b8eb752269751b3e0a1299bef2e25ba42ce5fc638cc943e6873b",
        "md5": "643bf2744dee74ab7864560d28ff2e76",
        "sha256": "cfc0eefacc97bdabc3f5ae831ce915e637c683904e73277042405c7dede640f5"
      },
      "downloads": -1,
      "filename": "hyper_nn-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "643bf2744dee74ab7864560d28ff2e76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17775,
      "upload_time": "2022-12-28T21:46:01",
      "upload_time_iso_8601": "2022-12-28T21:46:01.899666Z",
      "url": "https://files.pythonhosted.org/packages/84/0d/df732a43b8eb752269751b3e0a1299bef2e25ba42ce5fc638cc943e6873b/hyper_nn-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27a4eca5d3c9b55850b2da904afff085acbec300460a3626d43ed116deace06e",
        "md5": "f7ab23d6596dce8f5f5e86a0abe14f31",
        "sha256": "4a88eee75b94bf90246b06ab0f19d08d2673316f5550d8147b5ac41919ac7e09"
      },
      "downloads": -1,
      "filename": "hyper-nn-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f7ab23d6596dce8f5f5e86a0abe14f31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12802,
      "upload_time": "2022-12-28T21:46:03",
      "upload_time_iso_8601": "2022-12-28T21:46:03.946124Z",
      "url": "https://files.pythonhosted.org/packages/27/a4/eca5d3c9b55850b2da904afff085acbec300460a3626d43ed116deace06e/hyper-nn-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}