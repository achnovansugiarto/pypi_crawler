{
  "info": {
    "author": "Truera Inc",
    "author_email": "all@truera.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Welcome to Netlens!\n\nLibrary containing attribution and interpretation methods for deep nets.\n\n# Installation\n\nThese installation instructions assume that you have conda installed and added to your path.\n\n0. Create a virtual environment (or modify an existing one).\n```\nconda create -n \"<my_name>\" python=3.7  # Skip if using existing environment.\nconda activate <my_name>\n```\n\n1. Install dependencies.\n```\nconda install tensorflow-gpu=1  # Or whatever backend you're using.\nconda install keras             # Or whatever backend you're using.\nconda install matplotlib        # For visualizations.\nconda install scikit-learn      # To get LFW dataset.\n```\n\n1. Install the netlens repo\n```\npip install netlens\n```\n\n# Overview\n\n## Backends\n\nThe `netlens` library supports several common machine learning libraries, including Keras, Pytorch, and TensorFlow.\n\nIn order to set the backend to the backend of your choice, use the `NETLENS_BACKEND` flag, e.g., to use the Keras backend, the following code could be used before NetLens imports:\n\n```python\nimport os\nos.environ['NETLENS_BACKEND'] = 'keras'\n```\n\n## Attributions\n\n### Model Wrappers\n\nIn order to support a wide variety of backends with different interfaces for their respective models, NetLens uses its own `Model` class which provides a general model interface to simplify the implementation of the API functions.\nA model wrapper class exists for backend's model that converts a model in the respective backend's format to the general NetLens `Model` interface.\nThe wrappers are found in the `models` module, and any model defined using Keras, Pytorch, or Tensorflow should be wrapped with the appropriate wrapper before being used with the other API functions that require a model -- *all other NetLens functionalities expect models to be an instance of `netlens.models.Model`.*\n\nFor example,\n\n```python\nwrapped_model = KerasModel(model_defined_via_keras)\n```\n\n### Attribution Methods\n\nAttribution methods, in the most general sense, allow us to quantify the contribution of particular variables in a model towards a particular behavior of the model.\nIn many cases, for example, this may simply measure the effect each input variable has on the output of the network.\n\nAttribution methods extend the `AttributionMethod` class, and many concrete instances are found in the `attribution` module.\n\nOnce an attribution method has been instantiated, its main function is its `attributions` method, which takes an `np.Array` of batched instances, where each instance matches the shape of the *input* to the model the attribution method was instantiated with.\n\nSee the *method comparison* demo for further information on the different types of attribution methods, their uses, and their relationships with one another.\n\n### Slices, Quantities, and Distributions\n\nIn order to obtain a high degree of flexibility in the types of attributions that can be produced, we implement *Internal Influence*, which is parameterized by a *slice*, *quantity of interest*, and *distribution of interest*, explained below.\n\nThe *slice* essentially defines a layer to use for internal attributions.\nThe slice for the `InternalInfluence` method can be specified by an instance of the `Slice` class in the `slices` module.\nA `Slice` object specifies two layers: (1) the layer of the variables that we are calculating attribution *for* (e.g., the input layer), and (2) the layer whose output defines our *quantity of interest* (e.g., the output layer, see below for more on quantities of interest).\n\nThe *quantity of interest* (QoI) essentially defines the model behavior we would like to explain using attributions.\nThe QoI is a function of the model's output at some layer.\nFor example, it may select the confidence score for a particular class.\nIn its most general form, the QoI can be pecified by an implementation of the `QoI` class in the `quantities` module.\nSeveral common default implementations are provided in this module as well.\n\nThe *distribution of interest* (DoI) essentially specifies for which points surrounding each instance the calculated attribution should be valid.\nThe distribution can be specified via an implementation of the `DoI` class in the `distributions` module, which is a function taking an input instance and producing a list of input points to aggregate attribution over.\nA few common default distributions implementing the `DoI` class can be found in the `distributions` module. \n\nSee the *parameterization demo* for further explanations of the purpose of these parameters and examples of their usage.\n\n## Visualizations\n\nIn order to interpret the attributions produced by an `AttributionMethod`, a few useful visualizers are provided in the `visualizations` module.\nWhile the interface of each visualizer varies slightly, in general, the visualizers are a function taking an `np.Array` representing the attributions returned from an `AttributionMethod` and producing an image that can be used to interpret the attributions.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netlens",
    "package_url": "https://pypi.org/project/netlens/",
    "platform": "",
    "project_url": "https://pypi.org/project/netlens/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/netlens/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Library containing attribution and interpretation methods for deep nets.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8673526,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9855d5a54f6c63ebc12786ed29822dab6d90427d5ccbd13d7e509f6843ce83e9",
          "md5": "c9f1c88f0b6e905f9a7f53c847b9ff99",
          "sha256": "e5b1a9d04876380fdfa2f3ddeef9f05c49f65e7778f54c4a1fe92fd3c08e2a79"
        },
        "downloads": -1,
        "filename": "netlens-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9f1c88f0b6e905f9a7f53c847b9ff99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 60820,
        "upload_time": "2020-11-16T21:53:15",
        "upload_time_iso_8601": "2020-11-16T21:53:15.215827Z",
        "url": "https://files.pythonhosted.org/packages/98/55/d5a54f6c63ebc12786ed29822dab6d90427d5ccbd13d7e509f6843ce83e9/netlens-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9855d5a54f6c63ebc12786ed29822dab6d90427d5ccbd13d7e509f6843ce83e9",
        "md5": "c9f1c88f0b6e905f9a7f53c847b9ff99",
        "sha256": "e5b1a9d04876380fdfa2f3ddeef9f05c49f65e7778f54c4a1fe92fd3c08e2a79"
      },
      "downloads": -1,
      "filename": "netlens-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9f1c88f0b6e905f9a7f53c847b9ff99",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 60820,
      "upload_time": "2020-11-16T21:53:15",
      "upload_time_iso_8601": "2020-11-16T21:53:15.215827Z",
      "url": "https://files.pythonhosted.org/packages/98/55/d5a54f6c63ebc12786ed29822dab6d90427d5ccbd13d7e509f6843ce83e9/netlens-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}