{
  "info": {
    "author": "",
    "author_email": "Hubert Tarnacki <hubert.tarnacki@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Filesystems"
    ],
    "description": "# PathTraverser\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nBecause traversing through files and directories in Python should be as easy and fun as in Groovy.\n\n\n## Installation\n\n```bash\n$ pip install --user --upgrade PathTraverser\n```\n\n## Usage\n\n### Basic example of simple iteration over files and directories\n```python\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser('.') as paths:\n>>>    for _ in paths:\n>>>        print(str(_))\n```\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(Path.cwd()) as paths:\n>>>    for _ in paths:\n>>>        print(str(_))\n```\nIterated root path can be of type string or pathlib.Path and can be relative or absolute\n\n### We can iterate multiple times over the same Traverser\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(Path.cwd()) as paths:\n>>>    for _ in paths:\n>>>        print(str(_))\n>>>    for _ in paths:\n>>>        print(str(_))\n```\n\n### We can nest multiple Traversers\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(Path.cwd()) as paths:\n>>>     for _ in paths:\n>>>         if _ == Path.cwd() / 'docs':\n>>>             with Traverser(_) as docs:\n>>>                 for doc in docs:\n>>>                     print(str(doc))\n>>>             break\n```\n\n### We can filter iterated paths by exact name\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         namefilter='d.mp4'\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can filter iterated paths by regexp name\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         namefilter=re.compile(r'.*\\.mp4')\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can filter iterated paths by extension\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         extfilter='txt'\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can limit max depth of iteration\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         maxdepth=0\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can set min depth of iteration\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         mindepth=2\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can filter different types of files\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser, PathTypes\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathtype=PathTypes.FILE) as files:\n>>>     for _ in files:\n>>>         print(str(_))\n```\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser, PathTypes\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathtype=PathTypes.DIRECTORY) as dirs:\n>>>     for _ in dirs:\n>>>         print(str(_))\n```\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser, PathTypes\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathtype=PathTypes.LINK) as links:\n>>>     for _ in links:\n>>>         print(str(_))\n```\n\n### We can build custom complex filters\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathfilter=lambda _: 'dog' in _.name) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\nFirst argument of path filter is positional and mandatory and is of type pathlib.Path. It means: current path to check\n\nPath filter can also have any of following optional key word arguments:\n- ```rel```: relative form of current path against root path (of type pathlib.Path)\n- ```root```: root path (of type pathlib.Path)\n- ```depth```: current iteration depth (of type int)\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathfilter=lambda _, rel: rel.parts[0] in {'sub2', 'sub3'}\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathfilter=lambda _, depth: depth < 1\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>> from PathTraverser.PathUtils import starts_with\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         pathfilter=lambda _, root: starts_with(_, root / 'sub1')\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can use multiple filters at once\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser, PathTypes\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         extfilter='txt',\n>>>         pathtype=PathTypes.FILE,\n>>>         pathfilter=lambda _, rel: rel.parts[0] in {'sub2', 'sub3'}\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can exclude iterated paths by exact name\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         exclude_namefilter='d.mp4'\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can exclude iterated paths by regexp name\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         exclude_namefilter=re.compile(r'.*\\.mp4')\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can exclude iterated paths by extension\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         exclude_extfilter='txt'\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can build custom complex exclude filters\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         exclude_pathfilter=lambda _: 'dog' in _.name) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\nArguments for exclude_pathfilter are the same as described for pathfilter\n\n### We can mix filters and exclude filters together\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser, PathTypes\n>>>\n>>> with Traverser(\n>>>         Path.cwd(),\n>>>         extfilter='txt',\n>>>         pathtype=PathTypes.FILE,\n>>>         pathfilter=lambda _, rel: rel.parts[0] in {'sub2', 'sub3'},\n>>>         exclude_namefilter='d.txt'\n>>> ) as paths:\n>>>     for _ in paths:\n>>>         print(str(_))\n```\n\n### We can dynamically instruct Traverser to skip visiting hierarchies of some subdirectories. It means Traverser will not step down into skipped directories and will not iterate over contents of such directories\n```python\n>>> from pathlib import Path\n>>> from PathTraverser import Traverser\n>>>\n>>> with Traverser(Path.cwd()) as paths:\n>>>     for _ in paths:\n>>>         if paths.depth == 0 and _.is_dir() and _.name == 'x':\n>>>             paths.skipsubtree(_)  # do not enter 'x' directory and do not traverse its content\n>>>             continue\n>>>         print(str(_))\n```\nSkipping subtrees is done by ```def skipsubtree(self, *names: Union[Path, str]) -> 'Traverser'``` method which is part of a Traverser object.\n\nPlease notice another usefull Traverser property that is used in this example: ```Traverser.depth``` which means depth of current iteration\n\n### Traverser constructor has following input parameters\n```\nroot: Union[Path, str]                                  -> root path\npathtype: PathTypes                                     -> path typ filter\nmindepth: int = 0                                       -> min depth filter\nmaxdepth: int = None                                    -> max depth filter\npathfilter: Callable = None                             -> complex path filter\nnamefilter: Union[re.Pattern, str] = None               -> name filter\nextfilter: str = None                                   -> extension filter\nexclude_pathfilter: Callable = None                     -> exclude complex path filter\nexclude_namefilter: Union[re.Pattern, str] = None       -> exclude name filter\nexclude_extfilter: str = None                           -> exclude extension filter\nfollowlinks: bool = True                                -> do follow symbolic links to subdirectories during traversing?\nonerror: Callable = None                                -> by default errors from the os.scandir() call are ignored. If optional arg 'onerror' is specified, it should be a function; it will be called with one argument, an OSError instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the filename attribute of the exception object\n\n```\n\n### Traverser object has some usefull read only properties\n- ```root```: root directory being iterated (it points to a directory provided by user during instantiation of Traverser object)\n- ```depth```: depth of current iteration\n\n\n### This project provides also some usefull utilities as an extension to pathlib.Path built in functionality\n- ```first(path)```: returns first part of a given path (return type is pathlib.Path)\n- ```last(path)```: returns last part of a given path (return type is pathlib.Path)\n- ```part_count(path)```: returns number of path parts of a given path (return type is int)\n- ```starts_with(path_a, path_b)```: check if path_b is parent to path_a. The comparison is done by comparing individual parts of the paths, not by comparing the characters of the simple string representation of the paths. Please note that no path resolution/normalization is done automatically when performing this function. Normalization should be performed by the user if necessary (return type is bool)\n\n\n```python\n>>> from pathlib import Path\n>>> from PathTraverser.PathUtils import first, last, part_count, starts_with\n>>>\n>>> first(Path('a/b/c')).name == 'a'\n>>> last(Path('a/b/c')).name == 'c'\n>>> part_count(Path('a/b/c')) == 3\n>>> starts_with(Path('a/b/c/d'), Path('a/b/c')) == True\n>>> starts_with(Path('a/b/c/d2'), Path('a/b/c/d')) == False\n\n```\n\nWe can also import this path utilities in the form of monkey patching of original pathlib.Path class:\n```python\n>>> from PathTraverser.PathUtils import Path  # this import executes also monkey patching of pathlib.Path\n>>>\n>>> Path('a/b/c').first.name == 'a'\n>>> Path('a/b/c').last.name == 'c'\n>>> Path('a/b/c').part_count == 3\n>>> Path('a/b/c/d').starts_with(Path('a/b/c')) == True\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/htarnacki/PathTraverser",
    "keywords": "traverse walk list files directories dirs filesystem path paths",
    "license": "MIT License\n        \n        Copyright (c) 2023 htarnacki\n        \n        Permission is hereby granted, free of charge, to any person obtaining a copy\n        of this software and associated documentation files (the \"Software\"), to deal\n        in the Software without restriction, including without limitation the rights\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n        copies of the Software, and to permit persons to whom the Software is\n        furnished to do so, subject to the following conditions:\n        \n        The above copyright notice and this permission notice shall be included in all\n        copies or substantial portions of the Software.\n        \n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n        SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "Hubert Tarnacki <hubert.tarnacki@gmail.com>",
    "name": "pathtraverser",
    "package_url": "https://pypi.org/project/pathtraverser/",
    "platform": null,
    "project_url": "https://pypi.org/project/pathtraverser/",
    "project_urls": {
      "Bug tracker": "https://github.com/htarnacki/PathTraverser/issues",
      "Homepage": "https://github.com/htarnacki/PathTraverser",
      "Repository": "https://github.com/htarnacki/PathTraverser"
    },
    "release_url": "https://pypi.org/project/pathtraverser/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Traversing files and directories in Python easily",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973403,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14eedb904b5eb40c4d37645b1fbc17abcaa870ed0e5d4068543d0809e37c91b8",
          "md5": "d73262247abc50708dd23168cfdf3b4f",
          "sha256": "639a670abcfc34ba8b5f0308d0544252f99655d31b2a287ca6f02c946dcc7570"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d73262247abc50708dd23168cfdf3b4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5462,
        "upload_time": "2023-02-20T20:45:59",
        "upload_time_iso_8601": "2023-02-20T20:45:59.979028Z",
        "url": "https://files.pythonhosted.org/packages/14/ee/db904b5eb40c4d37645b1fbc17abcaa870ed0e5d4068543d0809e37c91b8/PathTraverser-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4e137c619b16a146484f2b43d7df46b3c46a90b08947c0b87072cb6c5fae593",
          "md5": "dca51af8a5aa2ff6372c056a83290068",
          "sha256": "70a76b2477235176c7279c79330a570d7027161eae37dee7b08564b2a952ae62"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dca51af8a5aa2ff6372c056a83290068",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4285,
        "upload_time": "2023-02-20T20:46:01",
        "upload_time_iso_8601": "2023-02-20T20:46:01.351654Z",
        "url": "https://files.pythonhosted.org/packages/c4/e1/37c619b16a146484f2b43d7df46b3c46a90b08947c0b87072cb6c5fae593/PathTraverser-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "713c13a8d2064ac811ceaf074b21192d2181faed5ce4a003e6d0c4d6bf5210ff",
          "md5": "7d758ea4e3888bf5e6c0a4c74730bf03",
          "sha256": "84b7a864e3e2002348f3bd2587601c0deaa38f27e8bb5c713e63083d47534e2c"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d758ea4e3888bf5e6c0a4c74730bf03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5459,
        "upload_time": "2023-02-20T20:47:20",
        "upload_time_iso_8601": "2023-02-20T20:47:20.904489Z",
        "url": "https://files.pythonhosted.org/packages/71/3c/13a8d2064ac811ceaf074b21192d2181faed5ce4a003e6d0c4d6bf5210ff/PathTraverser-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d978cbe5a508100f7d29a539efaea1bb3861a401fbf33225fffc4ed63d787a",
          "md5": "bce209fdae47f017bf560fde3ed9d6a5",
          "sha256": "b1be40d67bcfb8378e03865b38d0dc43e374311ee52caae8ea65f974d0008799"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bce209fdae47f017bf560fde3ed9d6a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4288,
        "upload_time": "2023-02-20T20:47:22",
        "upload_time_iso_8601": "2023-02-20T20:47:22.225253Z",
        "url": "https://files.pythonhosted.org/packages/b0/d9/78cbe5a508100f7d29a539efaea1bb3861a401fbf33225fffc4ed63d787a/PathTraverser-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92fb1eaa8bd5b83bd5878d31829478045cc5784fbe949aa3ec90f2d3f9cc83ea",
          "md5": "8ab70f0400dcd40a0a3f5de61f48dad8",
          "sha256": "cbcef5defea56c35c577f55259367dc1e4d95411fd6ab372f402539415edeac8"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ab70f0400dcd40a0a3f5de61f48dad8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5488,
        "upload_time": "2023-02-20T20:52:45",
        "upload_time_iso_8601": "2023-02-20T20:52:45.565418Z",
        "url": "https://files.pythonhosted.org/packages/92/fb/1eaa8bd5b83bd5878d31829478045cc5784fbe949aa3ec90f2d3f9cc83ea/PathTraverser-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec60e873228c8061f897d03b82db21a597cc28d911e87d781c5e5944833c6939",
          "md5": "e74121924306678994dec2188162efb6",
          "sha256": "ebcddd944deb4a00780e8257eaaa0a228f0a5123a7be1d9668fa05a9a618d021"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e74121924306678994dec2188162efb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4287,
        "upload_time": "2023-02-20T20:52:47",
        "upload_time_iso_8601": "2023-02-20T20:52:47.122425Z",
        "url": "https://files.pythonhosted.org/packages/ec/60/e873228c8061f897d03b82db21a597cc28d911e87d781c5e5944833c6939/PathTraverser-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1dcfc14d04e7a0c297de4edaf4f129a5ca99c5d0e1643416198de9ddecbcdb5",
          "md5": "5249a9a06a2eab3ff3c8597a90ab1ece",
          "sha256": "ae12fa385b8b10a6efff05ba9666813f50adb358b58c953efb4c40a409959375"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5249a9a06a2eab3ff3c8597a90ab1ece",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7811,
        "upload_time": "2023-02-21T15:00:50",
        "upload_time_iso_8601": "2023-02-21T15:00:50.723252Z",
        "url": "https://files.pythonhosted.org/packages/b1/dc/fc14d04e7a0c297de4edaf4f129a5ca99c5d0e1643416198de9ddecbcdb5/PathTraverser-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9473a155c71efb2b731bdd8f0d6a843152c663a4100db4f7e457bca442a54475",
          "md5": "7785e83290c06a33531ee9c9d6ed11ca",
          "sha256": "e6dff23335faebff6088f7774209d51bfaf9397ea9070c9074a55eaf0572cefd"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7785e83290c06a33531ee9c9d6ed11ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8765,
        "upload_time": "2023-02-21T15:00:52",
        "upload_time_iso_8601": "2023-02-21T15:00:52.432311Z",
        "url": "https://files.pythonhosted.org/packages/94/73/a155c71efb2b731bdd8f0d6a843152c663a4100db4f7e457bca442a54475/PathTraverser-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f580cf89b047f7398c0ff9a39a09f3001b7dcfca73a6f0350c34d4141ba290",
          "md5": "012dbcd84624d0f7947c7af8a5d6f553",
          "sha256": "c35aaa07ad50031c57756d323074bfb1d466677041749b4b444f33e1a0b302e1"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "012dbcd84624d0f7947c7af8a5d6f553",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7813,
        "upload_time": "2023-02-21T15:04:32",
        "upload_time_iso_8601": "2023-02-21T15:04:32.441406Z",
        "url": "https://files.pythonhosted.org/packages/80/f5/80cf89b047f7398c0ff9a39a09f3001b7dcfca73a6f0350c34d4141ba290/PathTraverser-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0db0840d076b14f8b23e8de72a01eb7d53cdbe1c82072d3bf1d1b44bb32645c",
          "md5": "062ae1ca0bfe7ccc40366ea75b0cd572",
          "sha256": "fb665c55f21322f8af61ae6e153e95a5f05c7520c92910cb2693e10f2512c397"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "062ae1ca0bfe7ccc40366ea75b0cd572",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8766,
        "upload_time": "2023-02-21T15:04:34",
        "upload_time_iso_8601": "2023-02-21T15:04:34.475704Z",
        "url": "https://files.pythonhosted.org/packages/c0/db/0840d076b14f8b23e8de72a01eb7d53cdbe1c82072d3bf1d1b44bb32645c/PathTraverser-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96a36d0ac19b0b461128abf0447922c827f34af4094969a95ee14b3c32244dff",
          "md5": "5305b9e1fdd38a2d0414f40ece827541",
          "sha256": "dad59b18ca3e70b170bb8ccbce62889498c43b8cff3af9002d0b04a65bd2eefd"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5305b9e1fdd38a2d0414f40ece827541",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7818,
        "upload_time": "2023-02-22T09:02:44",
        "upload_time_iso_8601": "2023-02-22T09:02:44.692053Z",
        "url": "https://files.pythonhosted.org/packages/96/a3/6d0ac19b0b461128abf0447922c827f34af4094969a95ee14b3c32244dff/PathTraverser-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d92b765c4d57311d355d9f45bdfe72a843397442a40494c4fbb25f514afa7c8e",
          "md5": "3207483633bc5244e960d5e4f573a518",
          "sha256": "c2edc47812a14caacb28de71d7d2a64b19ab287a6114607a6f0acae3ca9d4a45"
        },
        "downloads": -1,
        "filename": "PathTraverser-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3207483633bc5244e960d5e4f573a518",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8781,
        "upload_time": "2023-02-22T09:02:46",
        "upload_time_iso_8601": "2023-02-22T09:02:46.650223Z",
        "url": "https://files.pythonhosted.org/packages/d9/2b/765c4d57311d355d9f45bdfe72a843397442a40494c4fbb25f514afa7c8e/PathTraverser-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96a36d0ac19b0b461128abf0447922c827f34af4094969a95ee14b3c32244dff",
        "md5": "5305b9e1fdd38a2d0414f40ece827541",
        "sha256": "dad59b18ca3e70b170bb8ccbce62889498c43b8cff3af9002d0b04a65bd2eefd"
      },
      "downloads": -1,
      "filename": "PathTraverser-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5305b9e1fdd38a2d0414f40ece827541",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7818,
      "upload_time": "2023-02-22T09:02:44",
      "upload_time_iso_8601": "2023-02-22T09:02:44.692053Z",
      "url": "https://files.pythonhosted.org/packages/96/a3/6d0ac19b0b461128abf0447922c827f34af4094969a95ee14b3c32244dff/PathTraverser-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d92b765c4d57311d355d9f45bdfe72a843397442a40494c4fbb25f514afa7c8e",
        "md5": "3207483633bc5244e960d5e4f573a518",
        "sha256": "c2edc47812a14caacb28de71d7d2a64b19ab287a6114607a6f0acae3ca9d4a45"
      },
      "downloads": -1,
      "filename": "PathTraverser-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "3207483633bc5244e960d5e4f573a518",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8781,
      "upload_time": "2023-02-22T09:02:46",
      "upload_time_iso_8601": "2023-02-22T09:02:46.650223Z",
      "url": "https://files.pythonhosted.org/packages/d9/2b/765c4d57311d355d9f45bdfe72a843397442a40494c4fbb25f514afa7c8e/PathTraverser-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}