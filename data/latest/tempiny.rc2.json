{
  "info": {
    "author": "Léo Flaventin Hauchecorne",
    "author_email": "hl037.prog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Other Scripting Engines",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "\n# Introduction\n\nTempiny is a tiny and really simple template engine.\n\nThe main feature is to be able to execute arbitrary python code inside the template,\nwhich makes it really powerful for code generation for example.\n\nSee the skbs project to have a sense of what it can achieve !\n\n\n# Install\n\nSimply pip install it :\n\n    pip install tempiny\n\n# Template syntax\n\nFirst an example to demonstrate all its features :\n\n\n    This text will be printed as it is\n    \n    Lines starting with '##' (or a user-configured prefix) are python code.\n    \n    ## a=5 # this won't be printed\n    ## # this is a comment in the python script. Won't be printed.\n    \n    if/else/for/while/with/try/except etc blocks don't need indentation. Instead, a line containing only '## -' marks the block end.\n    \n    ## for i in range(a) :\n    ##   b = a + 1 # you may indent\n    ## c = a +2 # or not, still in the for block.\n    This text will be printed 5 times (a = {{a}}) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    ##   for j in range(3) :\n    You can also nest loops\n    ##   -\n    ## # ↑ end of inner loop\n    ## -\n    ## # end of outer loop\n    \n    Expression can be as complex you want as long as they are valid python expression returning something that can be transformed to a string :\n    {{ \";\".join( str(i) + f' - {a=},{b=},{c=}' for i in range(2)) }}\n\n\nwill be output as :\n\n    This text will be printed as it is\n    \n    Lines starting with '##' (or a user-configured prefix) are python code.\n    \n    \n    if/else/for/while/with/try/except etc blocks don't need indentation. Instead, a line containing only '## -' marks the block end.\n   \n    This text will be printed 5 times (a = 5) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    You can also nest loops\n    You can also nest loops\n    You can also nest loops\n    This text will be printed 5 times (a = 5) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    You can also nest loops\n    You can also nest loops\n    You can also nest loops\n    This text will be printed 5 times (a = 5) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    You can also nest loops\n    You can also nest loops\n    You can also nest loops\n    This text will be printed 5 times (a = 5) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    You can also nest loops\n    You can also nest loops\n    You can also nest loops\n    This text will be printed 5 times (a = 5) Btw, between a double brace (2 '{'), you can put expression that will be converted to str, and printed instead.\n    To escape it, The prefered way is to declare variables containing the tokens (as done in skbs)\n    You can also nest loops\n    You can also nest loops\n    You can also nest loops\n   \n   Expression can be as complex you want as long as they are valid python expression returning something that can be transformed to a string :\n   0 - a=5,b=6,c=7;1 - a=5,b=6,c=7\n\n\nBasically, there are 3 contexts : \n\n## Code context\n\nEach line starting by the code prefix (specified in `plugin.py`, or '##' by default) is basically python code except for the block delimitation :\nin python, the indentation level delimits a block while with tempiny, for practical use, indentation doesn't matter, and a block is ended by a single dash ( \"-\" ).\n\nExample : \n\n    ## a = 5\n    ## for i in range(a) :\n    ##   b = 2 + i\n    ##   # Do come stuff\n    ## c=3 # this is still in the for\n    ## -\n    ## # end of the for\n\n\nAny python code is allowed. This is the reason you should use templates **only from trusted sources**.\n\n## Text context\n\nAny line that doesn't start with the code prefix is \"text\", and will be output as is each time the execution flow reaches it.\nBasically, you can imagine (by the way, this is actually how it is implemented...) each Text context is like a call to `print` \n\nFor example, the following : \n\n    This is a text\n    ## for i in range(3):\n    To see\n    ## -\n    how it works\n\nWill output : \n\n    This is a test\n    To see\n    To see\n    To see\n    how it works\n\n## Expression context\n\nInside a Text context, you may want to print an expression (for example a variable value or the result of a python call etc.)\nYou can do it by surrounding it with the expression delimiters (specified in `plugin.py` or '{{' and '}}' by default).\nIt will be replaced by the expression value at the time of execution. Example:\n\n    ## for i in range(3)\n    Item number {{i}}\n    ## -\n\nWill print :\n\n    Item number 0\n    Item number 1\n    Item number 2\n\nAny python expression is allowed.\n\nOnce again, you should only execute trusted templates.\n\n# API\n\n    from tempiny import Tempiny # import tempiny\n\nThere are 3 built-in dialects:\n\n    Tempiny.C  = dict(stmt_line_start=r'//#', begin_expr='{{', end_expr='}}')\n    Tempiny.PY = dict(stmt_line_start=r'##', begin_expr='{{', end_expr='}}')\n    Tempiny.TEX = dict(stmt_line_start=r'%#', begin_expr='<<', end_expr='>>')\n\nTo configure a Tempiny instance :\n\n    T = Tempiny(\n      stmt_line_start=PY['stmt_line_start'], # Code prefix. \n      begin_expr=PY['begin_expr'], # Expression delimiter (begin)\n      end_expr=PY['end_expr'] # Expression delimiter (end)\n    )\n\nNote that you can use any string for these tokens.\n\n`Tempiny.compile(self, f:Iterable[str], filename='<template>', default_globals={}, default_locals=None) -> Template`:\nThis method compiles a template. `f` should be an iterable of strings (an open file is ok). `default_globals` is a dict\nyou can provide to have a default global scope when calling the template. You should probably leave `default_locals`\nto None except if you know what you are doing.\n\nExample :\n\n    with open('test_template', 'r') as f:\n      template = T.compile(f, 'test_template')\n\n\n`Template.__call__(self, out_stream, _globals={}, _locals=None) -> (dict, Exception)`\nThis method permits to call the template, outputting in `out_stream` (it should at least have a `write(s:str)` method.\nYou can provide a global scope (it will be shallow-copied before entering the template) through `_globals` to \npass values to the template. You can also provide a local scope through `_locals`, but it can lead to unexpected\nbehaviour (not defined errors inside function or list-comprehension). Except if you know what to do, let it None, it\nwill contain the same content as the globals.\nIt returns the new locals (to retrieve names defined or modified from the template), and None if no exception occurred,\nor the exception if one raised.\n\nExample:\n\n    with open('result', 'w') as f:\n      template(f, {'author': 'Léo Flaventin Hauchecorne', 'date' : 2016})\n\n    \n# License Notice\n\nTempiny is a tiny template engine\nCopyright © 2016-2020 Léo Flaventin Hauchecorne\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hl037/tempiny",
    "keywords": "",
    "license": "LGPLv2.1+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tempiny",
    "package_url": "https://pypi.org/project/tempiny/",
    "platform": "",
    "project_url": "https://pypi.org/project/tempiny/",
    "project_urls": {
      "Homepage": "https://github.com/hl037/tempiny"
    },
    "release_url": "https://pypi.org/project/tempiny/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tiny template engine",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12126822,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "677c3091a1755d9bb2e26aef592d699e9b0a4f7c700e5d5ed19d8435c709feb1",
          "md5": "75cfd4435e0631ee5262fe8311d2315b",
          "sha256": "8a825484ba5ff375e5ec39ac9a3767a8ff8fe177adbee630613f32918a5f7f4a"
        },
        "downloads": -1,
        "filename": "tempiny-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75cfd4435e0631ee5262fe8311d2315b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14479,
        "upload_time": "2020-08-24T23:04:22",
        "upload_time_iso_8601": "2020-08-24T23:04:22.843144Z",
        "url": "https://files.pythonhosted.org/packages/67/7c/3091a1755d9bb2e26aef592d699e9b0a4f7c700e5d5ed19d8435c709feb1/tempiny-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2beb89054bdd5cac3472417469b15112bcd794ae96dd63851bc34b44d1fe3342",
          "md5": "4aca8f96471e896896ccae4c4f974d73",
          "sha256": "32266132e1e190b99b9f60bf7c671003ba9ae94588b4e1848105447c4251e2d8"
        },
        "downloads": -1,
        "filename": "tempiny-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4aca8f96471e896896ccae4c4f974d73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6298,
        "upload_time": "2020-08-24T23:04:25",
        "upload_time_iso_8601": "2020-08-24T23:04:25.270786Z",
        "url": "https://files.pythonhosted.org/packages/2b/eb/89054bdd5cac3472417469b15112bcd794ae96dd63851bc34b44d1fe3342/tempiny-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42cbd7863e8904e4548ea8e6d031f4aae5f709360fbf9c2aa6fa5af87ccec8a9",
          "md5": "eefe7097e4b3f7e45346a817ed647915",
          "sha256": "d5b172800d8ddd0d8fd8d0a1ed77dad1604eaeb99255409c099d942ee747a2fd"
        },
        "downloads": -1,
        "filename": "tempiny-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eefe7097e4b3f7e45346a817ed647915",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14782,
        "upload_time": "2021-11-25T23:19:16",
        "upload_time_iso_8601": "2021-11-25T23:19:16.314399Z",
        "url": "https://files.pythonhosted.org/packages/42/cb/d7863e8904e4548ea8e6d031f4aae5f709360fbf9c2aa6fa5af87ccec8a9/tempiny-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6581134b4eb223745c4e86031ada02c3415e8c733df282bf05c0188c7c8916ff",
          "md5": "1a8dffa25cfcbfe0e0e6cadd6f3bf5f6",
          "sha256": "5797d2587580f8c63b2964d1f59da850bdfa6784bac9e90b8ad38e61289073a7"
        },
        "downloads": -1,
        "filename": "tempiny-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a8dffa25cfcbfe0e0e6cadd6f3bf5f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14644,
        "upload_time": "2021-11-25T23:19:18",
        "upload_time_iso_8601": "2021-11-25T23:19:18.357034Z",
        "url": "https://files.pythonhosted.org/packages/65/81/134b4eb223745c4e86031ada02c3415e8c733df282bf05c0188c7c8916ff/tempiny-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42cbd7863e8904e4548ea8e6d031f4aae5f709360fbf9c2aa6fa5af87ccec8a9",
        "md5": "eefe7097e4b3f7e45346a817ed647915",
        "sha256": "d5b172800d8ddd0d8fd8d0a1ed77dad1604eaeb99255409c099d942ee747a2fd"
      },
      "downloads": -1,
      "filename": "tempiny-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eefe7097e4b3f7e45346a817ed647915",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14782,
      "upload_time": "2021-11-25T23:19:16",
      "upload_time_iso_8601": "2021-11-25T23:19:16.314399Z",
      "url": "https://files.pythonhosted.org/packages/42/cb/d7863e8904e4548ea8e6d031f4aae5f709360fbf9c2aa6fa5af87ccec8a9/tempiny-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6581134b4eb223745c4e86031ada02c3415e8c733df282bf05c0188c7c8916ff",
        "md5": "1a8dffa25cfcbfe0e0e6cadd6f3bf5f6",
        "sha256": "5797d2587580f8c63b2964d1f59da850bdfa6784bac9e90b8ad38e61289073a7"
      },
      "downloads": -1,
      "filename": "tempiny-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1a8dffa25cfcbfe0e0e6cadd6f3bf5f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14644,
      "upload_time": "2021-11-25T23:19:18",
      "upload_time_iso_8601": "2021-11-25T23:19:18.357034Z",
      "url": "https://files.pythonhosted.org/packages/65/81/134b4eb223745c4e86031ada02c3415e8c733df282bf05c0188c7c8916ff/tempiny-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}