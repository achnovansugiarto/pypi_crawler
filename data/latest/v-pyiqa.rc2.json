{
  "info": {
    "author": "Chaofeng Chen",
    "author_email": "chaofenghust@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "description": "# PyTorch Toolbox for Image Quality Assessment\n\nAn IQA toolbox with pure python and pytorch. Please refer to [Awesome-Image-Quality-Assessment](https://github.com/chaofengc/Awesome-Image-Quality-Assessment) for a comprehensive survey of IQA methods, as well as download links for IQA datasets.\n\n<a href=\"https://colab.research.google.com/drive/14J3KoyrjJ6R531DsdOy5Bza5xfeMODi6?usp=sharing\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"google colab logo\"></a> \n[![PyPI](https://img.shields.io/pypi/v/pyiqa)](https://pypi.org/project/pyiqa/)\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=chaofengc/IQA-PyTorch) \n[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/chaofengc/Awesome-Image-Quality-Assessment)\n[![Citation](https://img.shields.io/badge/Citation-bibtex-green)](https://github.com/chaofengc/IQA-PyTorch/blob/main/README.md#bookmark_tabs-citation)\n\n![demo](demo.gif)\n\n- [:open_book: Introduction](#open_book-introduction)\n- [:zap: Quick Start](#zap-quick-start)\n  - [Dependencies and Installation](#dependencies-and-installation)\n  - [Basic Usage](#basic-usage)\n- [:hammer_and_wrench: Train](#hammer_and_wrench-train)\n  - [Dataset Preparation](#dataset-preparation)\n  - [Example Train Script](#example-train-script)\n- [:1st_place_medal: Benchmark Performances and Model Zoo](#1st_place_medal-benchmark-performances-and-model-zoo)\n  - [Results Calibration](#results-calibration)\n  - [Performance Evaluation Protocol](#performance-evaluation-protocol)\n  - [Benchmark Performance with Provided Script](#benchmark-performance-with-provided-script)\n\n## :open_book: Introduction\n\nThis is a image quality assessment toolbox with **pure python and pytorch**. We provide reimplementation of many mainstream full reference (FR) and no reference (NR) metrics (results are calibrated with official matlab scripts if exist). **With GPU acceleration, most of our implementations are much faster than Matlab.** Below are details of supported methods and datasets in this project.\n\n<details open>\n<summary>Supported methods and datasets:</summary>\n\n<table>\n<tr><td>\n\n| FR Method                | Backward           |\n| ------------------------ | ------------------ |\n| AHIQ                     | :white_check_mark: |\n| PieAPP                   | :white_check_mark: |\n| LPIPS                    | :white_check_mark: |\n| DISTS                    | :white_check_mark: |\n| WaDIQaM                  | :white_check_mark: |\n| CKDN<sup>[1](#fn1)</sup> | :white_check_mark: |\n| FSIM                     | :white_check_mark: |\n| SSIM                     | :white_check_mark: |\n| MS-SSIM                  | :white_check_mark: |\n| CW-SSIM                  | :white_check_mark: |\n| PSNR                     | :white_check_mark: |\n| VIF                      | :white_check_mark: |\n| GMSD                     | :white_check_mark: |\n| NLPD                     | :white_check_mark: |\n| VSI                      | :white_check_mark: |\n| MAD                      | :white_check_mark: |\n\n</td><td>\n\n| NR Method                    | Backward                 |\n| ---------------------------- | ------------------------ |\n| FID                          | :heavy_multiplication_x: |\n| MANIQA                       | :white_check_mark:       |\n| MUSIQ                        | :white_check_mark:       |\n| DBCNN                        | :white_check_mark:       |\n| PaQ-2-PiQ                    | :white_check_mark:       |\n| HyperIQA                     | :white_check_mark:       |\n| NIMA                         | :white_check_mark:       |\n| WaDIQaM                      | :white_check_mark:       |\n| CNNIQA                       | :white_check_mark:       |\n| NRQM(Ma)<sup>[2](#fn2)</sup> | :heavy_multiplication_x: |\n| PI(Perceptual Index)         | :heavy_multiplication_x: |\n| BRISQUE                      | :white_check_mark:       |\n| ILNIQE                       | :white_check_mark:       |\n| NIQE                         | :white_check_mark:       |\n\n<!-- | HOSA                         | :hourglass_flowing_sand: | -->\n\n</td><td>\n\n| Dataset          | Type         |\n| ---------------- | ------------ |\n| FLIVE(PaQ-2-PiQ) | NR           |\n| SPAQ             | NR/mobile    |\n| AVA              | NR/Aesthetic |\n| PIPAL            | FR           |\n| BAPPS            | FR           |\n| PieAPP           | FR           |\n| KADID-10k        | FR           |\n| KonIQ-10k(++)    | NR           |\n| LIVEChallenge    | NR           |\n| LIVEM            | FR           |\n| LIVE             | FR           |\n| TID2013          | FR           |\n| TID2008          | FR           |\n| CSIQ             | FR           |\n\n</td></tr>\n</table>\n\n<a name=\"fn1\">[1]</a> This method use distorted image as reference. Please refer to the paper for details.<br>\n<a name=\"fn2\">[2]</a> Currently, only naive random forest regression is implemented and **does not** support backward.\n\n</details>\n\n---\n\n### :triangular_flag_on_post: Updates/Changelog\n\n- **Sep 1, 2022**. 1) Add pretrained models for MANIQA and AHIQ. 2) Add dataset interface for pieapp and PIPAL.\n- **June 3, 2022**. Add FID metric. See [clean-fid](https://github.com/GaParmar/clean-fid) for more details.\n- **March 11, 2022**. Add pretrained DBCNN, NIMA, and official model of PieAPP, paq2piq.\n- [**More**](docs/history_changelog.md)\n\n---\n\n### :hourglass_flowing_sand: TODO List\n\n- :white_large_square: Add pretrained models on different datasets.\n\n---\n\n## :zap: Quick Start\n\n### Dependencies and Installation\n- Ubuntu >= 18.04\n- Python >= 3.8\n- Pytorch >= 1.10\n- CUDA >= 10.2 (if use GPU)\n```\n# Install with pip\npip install pyiqa\n\n# Install latest github version\npip uninstall pyiqa # if have older version installed already \npip install git+https://github.com/chaofengc/IQA-PyTorch.git\n\n# Install with git clone\ngit clone https://github.com/chaofengc/IQA-PyTorch.git\ncd IQA-PyTorch\npip install -r requirements.txt\npython setup.py develop\n```\n\n### Basic Usage \n\n```\nimport pyiqa\nimport torch\n\n# list all available metrics\nprint(pyiqa.list_models())\n\n# create metric with default setting\niqa_metric = pyiqa.create_metric('lpips', device=torch.device('cuda'))\n# Note that gradient propagation is disabled by default. set as_loss=True to enable it as a loss function.\niqa_loss = pyiqa.create_metric('lpips', device=torch.device('cuda'), as_loss=True)\n\n# create metric with custom setting\niqa_metric = pyiqa.create_metric('psnr', test_y_channel=True, color_space='ycbcr').to(device)\n\n# check if lower better or higher better\nprint(iqa_metric.lower_better)\n\n# example for iqa score inference\n# Tensor inputs, img_tensor_x/y: (N, 3, H, W), RGB, 0 ~ 1\nscore_fr = iqa_metric(img_tensor_x, img_tensor_y)\nscore_nr = iqa_metric(img_tensor_x)\n\n# img path as inputs.\nscore_fr = iqa_metric('./ResultsCalibra/dist_dir/I03.bmp', './ResultsCalibra/ref_dir/I03.bmp')\n\n# For FID metric, use directory or precomputed statistics as inputs\n# refer to clean-fid for more details: https://github.com/GaParmar/clean-fid\nfid_metric = pyiqa.create_metric('fid')\nscore = fid_metric('./ResultsCalibra/dist_dir/', './ResultsCalibra/ref_dir')\nscore = fid_metric('./ResultsCalibra/dist_dir/', dataset_name=\"FFHQ\", dataset_res=1024, dataset_split=\"trainval70k\")\n```\n\n\n#### Example Test script\n\nExample test script with input directory/images and reference directory/images. \n```\n# example for FR metric with dirs\npython inference_iqa.py -m LPIPS[or lpips] -i ./ResultsCalibra/dist_dir[dist_img] -r ./ResultsCalibra/ref_dir[ref_img]\n\n# example for NR metric with single image\npython inference_iqa.py -m brisque -i ./ResultsCalibra/dist_dir/I03.bmp\n```\n\n\n## :hammer_and_wrench: Train\n\n### Dataset Preparation\n\n- You only need to unzip downloaded datasets from official website without any extra operation. And then make soft links of these dataset folder under `datasets/` folder. Download links are provided in [Awesome-Image-Quality-Assessment](https://github.com/chaofengc/Awesome-Image-Quality-Assessment).\n- We provide common interface to load these datasets with the prepared meta information files and train/val/test split files, which can be downloaded from [download_link](https://github.com/chaofengc/IQA-PyTorch/releases/download/v0.1-weights/data_info_files.tgz) and extract them to `datasets/` folder.\n\nYou may also use the following commands:\n\n```\nmkdir datasets && cd datasets\n\n# make soft links of your dataset\nln -sf your/dataset/path datasetname\n\n# download meta info files and train split files\nwget https://github.com/chaofengc/IQA-PyTorch/releases/download/v0.1-weights/data_info_files.tgz\ntar -xvf data_info_files.tgz\n```\n\nExamples to specific dataset options can be found in `./options/default_dataset_opt.yml`. Details of the dataloader inferface and meta information files can be found in [Dataset Preparation](docs/Dataset_Preparation.md)\n\n### Example Train Script\n\nExample to train DBCNN on LIVEChallenge dataset\n```\n# train for single experiment\npython pyiqa/train.py -opt options/train/DBCNN/train_DBCNN.yml\n\n# train N splits for small datasets\npython pyiqa/train_nsplits.py -opt options/train/DBCNN/train_DBCNN.yml\n```\n\n## :1st_place_medal: Benchmark Performances and Model Zoo\n\n### Results Calibration\n\nPlease refer to the [results calibration](./ResultsCalibra/ResultsCalibra.md) to verify the correctness of the python implementations compared with official scripts in matlab or python.\n\n### Performance Evaluation Protocol\n\n**We use official models for evaluation if available.** Otherwise, we use the following settings to train and evaluate different models for simplicity and consistency:\n\n| Metric Type | Train | Test | Results | \n| --- | --- | --- | --- |\n| FR | KADID-10k | CSIQ, LIVE, TID2008, TID2013 | [FR benchmark results](tests/FR_benchmark_results.csv) |\n| NR | KonIQ-10k | LIVEC, KonIQ-10k (official split), TID2013 | [NR benchmark results](tests/NR_benchmark_results.csv) |\n| Aesthetic IQA | AVA | AVA (official split)| [IAA benchmark results](tests/IAA_benchmark_results.csv) |\n\nBasically, we use the largest existing datasets for training, and cross dataset evaluation performance for fair comparison. The following models do not provide official weights, and are retrained by our scripts:\n\n| Metric Type | Model Names |\n| --- | --- | \n| FR |  |\n| NR | `dbcnn` |\n| Aesthetic IQA | `nima`, `nima-vgg16-ava` |\n\nNotes:\n- Due to optimized training process, performance of some retrained approaches may be higher than original paper.\n- Results of KonIQ-10k, AVA are both tested with official split.\n- NIMA is only applicable to AVA dataset now. We use `inception_resnet_v2` for default `nima`.\n- MUSIQ is not included in the IAA benchmark because we do not have train/split information of the official model.\n\n### Benchmark Performance with Provided Script\n\nHere is an example script to get performance benchmark on different datasets:\n```\n# NOTE: this script will test ALL specified metrics on ALL specified datasets\n# Test default metrics on default datasets\npython benchmark_results.py -m psnr ssim -d csiq tid2013 tid2008\n\n# Test with your own options\npython benchmark_results.py -m psnr --data_opt options/example_benchmark_data_opts.yml\n\npython benchmark_results.py --metric_opt options/example_benchmark_metric_opts.yml tid2013 tid2008\n\npython benchmark_results.py --metric_opt options/example_benchmark_metric_opts.yml --data_opt options/example_benchmark_data_opts.yml\n```\n\n## :beers: Contribution\n\nAny contributions to this repository are greatly appreciated. Please follow the [contribution instructions](docs/Instruction.md) for contribution guidance.\n\n## :scroll: License\n\nThis work is licensed under a [NTU S-Lab License](https://github.com/chaofengc/IQA-PyTorch/blob/main/LICENSE_NTU-S-Lab) and <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n## :bookmark_tabs: Citation\n\nIf you find our codes helpful to your research, please consider to use the following citation:\n\n```\n@misc{pyiqa,\n  title={{IQA-PyTorch}: PyTorch Toolbox for Image Quality Assessment},\n  author={Chaofeng Chen and Jiadi Mo},\n  year={2022},\n  howpublished = \"[Online]. Available: \\url{https://github.com/chaofengc/IQA-PyTorch}\"\n}\n```\n\n## :heart: Acknowledgement\n\nThe code architecture is borrowed from [BasicSR](https://github.com/xinntao/BasicSR). Several implementations are taken from: [IQA-optimization](https://github.com/dingkeyan93/IQA-optimization), [Image-Quality-Assessment-Toolbox](https://github.com/RyanXingQL/Image-Quality-Assessment-Toolbox), [piq](https://github.com/photosynthesis-team/piq), [piqa](https://github.com/francois-rozet/piqa), [clean-fid](https://github.com/GaParmar/clean-fid)\n\nWe also thanks the following public repositories: [MUSIQ](https://github.com/google-research/google-research/tree/master/musiq), [DBCNN](https://github.com/zwx8981/DBCNN-PyTorch), [NIMA](https://github.com/kentsyx/Neural-IMage-Assessment), [HyperIQA](https://github.com/SSL92/hyperIQA), [CNNIQA](https://github.com/lidq92/CNNIQA), [WaDIQaM](https://github.com/lidq92/WaDIQaM), [PieAPP](https://github.com/prashnani/PerceptualImageError), [paq2piq](https://github.com/baidut/paq2piq), [MANIQA](https://github.com/IIGROUP/MANIQA) \n\n## :e-mail: Contact\n\nIf you have any questions, please email `chaofenghust@gmail.com`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chaofengc/IQA-PyTorch",
    "keywords": "image quality assessment,pytorch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "v-pyiqa",
    "package_url": "https://pypi.org/project/v-pyiqa/",
    "platform": null,
    "project_url": "https://pypi.org/project/v-pyiqa/",
    "project_urls": {
      "Homepage": "https://github.com/chaofengc/IQA-PyTorch"
    },
    "release_url": "https://pypi.org/project/v-pyiqa/0.1.5/",
    "requires_dist": [
      "addict",
      "future",
      "numpy",
      "opencv-python-headless",
      "torch (>=1.9)",
      "torchvision (>=0.9)",
      "Pillow",
      "pyyaml",
      "requests",
      "scipy",
      "timm",
      "tqdm",
      "yapf",
      "einops",
      "lmdb ; extra == 'train'",
      "pandas ; extra == 'train'",
      "imgaug ; extra == 'train'"
    ],
    "requires_python": ">=3.6",
    "summary": "PyTorch Toolbox for Image Quality Assessment",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15980150,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4213f4f4fd994012ab0271cdb1cb1e0c76bf50c2296a9152354f7b8e14a9a477",
          "md5": "174a4bf9a399195e23a408a511660200",
          "sha256": "e83cdc66683ede39f3deaf53bb38c9c77ed88c775dfb2bd6f0f24a8baec168dd"
        },
        "downloads": -1,
        "filename": "v_pyiqa-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "174a4bf9a399195e23a408a511660200",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 191146,
        "upload_time": "2022-10-22T09:23:43",
        "upload_time_iso_8601": "2022-10-22T09:23:43.450573Z",
        "url": "https://files.pythonhosted.org/packages/42/13/f4f4fd994012ab0271cdb1cb1e0c76bf50c2296a9152354f7b8e14a9a477/v_pyiqa-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b83a9bd54f4ade191058dfda3265832e65af7117cf8c683db702935ecc305dc2",
          "md5": "f7f039685143c95247310f228680499a",
          "sha256": "3120afc6c8df7307c8f2ab85447164e5c51dbedcbecf30e19e8b30d9e309df87"
        },
        "downloads": -1,
        "filename": "v-pyiqa-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f7f039685143c95247310f228680499a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 152593,
        "upload_time": "2022-10-22T09:23:45",
        "upload_time_iso_8601": "2022-10-22T09:23:45.308581Z",
        "url": "https://files.pythonhosted.org/packages/b8/3a/9bd54f4ade191058dfda3265832e65af7117cf8c683db702935ecc305dc2/v-pyiqa-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29ac6fd0ef5abab175737f197f3b6669f791af700c1366869c034713847c79f2",
          "md5": "62bd06a4d6539ad15e7a758ba562560f",
          "sha256": "ab51e79d96f7aeae2bce6377cde89ccf4f7d262505ab99f7b9b491981ced2648"
        },
        "downloads": -1,
        "filename": "v_pyiqa-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62bd06a4d6539ad15e7a758ba562560f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 192167,
        "upload_time": "2022-12-03T17:37:19",
        "upload_time_iso_8601": "2022-12-03T17:37:19.160023Z",
        "url": "https://files.pythonhosted.org/packages/29/ac/6fd0ef5abab175737f197f3b6669f791af700c1366869c034713847c79f2/v_pyiqa-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3b5c3c19d94b573afa41ec091f1828c80d0680b3541262d55f3c4ec1533ce5f",
          "md5": "b2b7a000c28818f92858e22d2eb3e492",
          "sha256": "95947fd78465c30817d7d9247e26cbffbe7da31f0424153a110f259bea656092"
        },
        "downloads": -1,
        "filename": "v-pyiqa-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b2b7a000c28818f92858e22d2eb3e492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 154268,
        "upload_time": "2022-12-03T17:37:20",
        "upload_time_iso_8601": "2022-12-03T17:37:20.952150Z",
        "url": "https://files.pythonhosted.org/packages/d3/b5/c3c19d94b573afa41ec091f1828c80d0680b3541262d55f3c4ec1533ce5f/v-pyiqa-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29ac6fd0ef5abab175737f197f3b6669f791af700c1366869c034713847c79f2",
        "md5": "62bd06a4d6539ad15e7a758ba562560f",
        "sha256": "ab51e79d96f7aeae2bce6377cde89ccf4f7d262505ab99f7b9b491981ced2648"
      },
      "downloads": -1,
      "filename": "v_pyiqa-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62bd06a4d6539ad15e7a758ba562560f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 192167,
      "upload_time": "2022-12-03T17:37:19",
      "upload_time_iso_8601": "2022-12-03T17:37:19.160023Z",
      "url": "https://files.pythonhosted.org/packages/29/ac/6fd0ef5abab175737f197f3b6669f791af700c1366869c034713847c79f2/v_pyiqa-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3b5c3c19d94b573afa41ec091f1828c80d0680b3541262d55f3c4ec1533ce5f",
        "md5": "b2b7a000c28818f92858e22d2eb3e492",
        "sha256": "95947fd78465c30817d7d9247e26cbffbe7da31f0424153a110f259bea656092"
      },
      "downloads": -1,
      "filename": "v-pyiqa-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b2b7a000c28818f92858e22d2eb3e492",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 154268,
      "upload_time": "2022-12-03T17:37:20",
      "upload_time_iso_8601": "2022-12-03T17:37:20.952150Z",
      "url": "https://files.pythonhosted.org/packages/d3/b5/c3c19d94b573afa41ec091f1828c80d0680b3541262d55f3c4ec1533ce5f/v-pyiqa-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}