{
  "info": {
    "author": "Yanchao Liu",
    "author_email": "yanchaoliu@wayne.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: GPU :: NVIDIA CUDA",
      "Environment :: GPU :: NVIDIA CUDA :: 12",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# Description\r\n\r\nBuild random forests for large data sets using CUDA. \r\nThis is the GPU-enabled version of [brif](URL 'https://pypi.org/project/brif/'). \r\nThe same program is available on [CRAN](URL 'https://cran.r-project.org/web/packages/brif/index.html') for R users. \r\n\r\n# Build from source\r\n\r\n## Prerequisites\r\n\r\nAn Nvidia graphics / compute card must be present and the [CUDA Toolkit](URL 'https://developer.nvidia.com/cuda-toolkit') must be installed. \r\n\r\nFor Windows, Microsoft Visual Studio [Build Tools for C++](URL 'https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2022') must be installed. For Linux and MacOS, some C++ build tool chain (e.g., gcc) is required.  \r\n\r\nPython [build](URL 'https://pypa-build.readthedocs.io/en/stable/') is required, can be installed via\r\n\r\n```bash\r\npip install build\r\n```\r\n\r\nThe pandas and numpy packages are required, can be installed via\r\n\r\n```bash\r\npip install pandas numpy\r\n```\r\n\r\n## Build and install on Windows\r\n\r\nClone (or download as zip and extract) this project to a local directory. \r\n\r\nSearch in the Windows search bar and run as administrator the \"x64 Native Tools Command Prompt for VS 2022\". \r\nIn the command window thus opened, cd into the project root directory, and run\r\n\r\n```bash\r\nmkdir build\r\ncd build\r\ncmake ../\r\n```\r\n\r\nIf successful, the file cubrif.sln (among other files) will be generated, then run\r\n\r\n```bash\r\nMSBuild.exe cubrif.sln /p:Configuration=Release\r\n```\r\n\r\nIf successful, several files will be created in the Release subfolder. Important ones include cubrif.lib, cubrif.dll and cubrif_main.exe. cubrif.lib will be used in building python package, cubrif.dll will be used in runtime, and cubrif_main.exe is a standalone executable.  \r\n\r\nCopy cubrif.lib to the project root directory:\r\n\r\n```bash\r\ncopy Release\\cubrif.lib ..\\\r\n```\r\n\r\nNow go back to the project root and build the Python package, as follows\r\n\r\n```bash\r\ncd ..\r\npython -m build\r\n```\r\n\r\nIf successful, the package, e.g., cubrif-1.4.0.tar.gz, will be create in the dist subfolder. \r\n\r\nInstall the package by\r\n\r\n```bash\r\npip install dist/cubrif-1.4.0.tar.gz\r\n```\r\n\r\nTo use the package, the cubrif.dll must be visible to python, for example:\r\n\r\n```python\r\nimport os\r\nos.add_dll_directory(\"C:/path/to/project/build/Release\")\r\nfrom cubrif import cubrif\r\n```\r\n\r\n## Build and install on Ubuntu\r\n\r\nThe build process is similar, but use 'make' instead of MSBuild.exe, and the dynamic library file generated will be libcubrif.so instead of cubrif.dll.\r\n\r\n```bash\r\nmkdir build\r\ncd build\r\ncmake ../\r\nmake\r\ncp libcubrif.so ../\r\ncd ..\r\npython3 -m build\r\npip install dist/cubrif-1.4.0.tar.gz\r\n```\r\n\r\nIn the above step, if \"python3 -m build\" does not work, use the equivalent command \r\n```bash\r\npython3 setup.py sdist bdist_wheel\r\n```\r\n\r\nTo use the package, the *libcubrif.so* must be visible to python. Either copy libcubrif.so to usr/lib or use os.add_dll_directory() as described above. For example,\r\n\r\n```bash\r\nsudo cp libcubrif.so /usr/lib\r\n```\r\n\r\nor in python,\r\n\r\n```python\r\nimport os\r\nos.add_dll_directory(\"C:/path/to/project/build/Release\")\r\n```\r\n\r\n\r\n# Usage Examples\r\n\r\n```python\r\nfrom cubrif import cubrif\r\nimport pandas as pd\r\n\r\n# Create a brif object with default parameters.\r\nbf = cubrif.cubrif()  \r\n\r\n# Display the current parameter values. \r\nbf.get_param()  \r\n\r\n# To change certain parameter values, e.g.:\r\nbf.set_param({'ntrees':10, 'nthreads':2, 'GPU':1})  \r\n\r\n# Or simply:\r\nbf.ntrees = 50\r\n\r\n# Load input data frame. Data must be a pandas data frame with appropriate headers.\r\ndf = pd.read_csv(\"auto.csv\")\r\n\r\n# Train the model\r\nbf.fit(df, 'origin')  # specify the target column name\r\n\r\n# Or equivalently\r\nbf.fit(df, 7)  # specify the target column index\r\n\r\n# Make predictions \r\n# The target variable column must be excluded, and all other columns should appear in the same order as in training\r\n# Here, predict the first 10 rows of df\r\npred_labels = bf.predict(df.iloc[0:10, 0:7], type='class')  # return a list containing the predicted class labels\r\npred_scores = bf.predict(df.iloc[0:10, 0:7], type='score')  # return a data frame containing predicted probabilities by class\r\n\r\n# Note: for a regression problem (i.e., when the response variable is numeric type), the predict function will always return a list containing the predicted values\r\n\r\n```\r\n\r\n# Parameters\r\n**tmp_preddata**\r\na character string specifying a filename to save the temporary scoring data. Default is \"tmp_brif_preddata.txt\".\r\n\r\n**n_numeric_cuts**\t\r\nan integer value indicating the maximum number of split points to generate for each numeric variable.\r\n\r\n**n_integer_cuts**\t\r\nan integer value indicating the maximum number of split points to generate for each integer variable.\r\n\r\n**max_integer_classes**\r\nan integer value. If the target variable is integer and has more than max_integer_classes unique values in the training data, then the target variable will be grouped into max_integer_classes bins. If the target variable is numeric, then the smaller of max_integer_classes and the number of unique values number of bins will be created on the target variables and the regression problem will be solved as a classification problem.\r\n\r\n**max_depth**\r\nan integer specifying the maximum depth of each tree. Maximum is 40.\r\n\r\n**min_node_size**\t\r\nan integer specifying the minimum number of training cases a leaf node must contain.\r\n\r\n**ntrees**\r\nan integer specifying the number of trees in the forest.\r\n\r\n**ps**\r\nan integer indicating the number of predictors to sample at each node split. Default is 0, meaning to use sqrt(p), where p is the number of predictors in the input.\r\n\r\n**max_factor_levels**\r\nan integer. If any factor variables has more than max_factor_levels, the program stops and prompts the user to increase the value of this parameter if the too-many-level factor is indeed intended.\r\n\r\n**seed**\r\na positive integer, random number generator seed.\r\n\r\n**nthreads**\r\nan integer specifying the number of threads used by the program. This parameter takes effect only on systems supporting OpenMP.\r\n\r\n**blocksize**\r\nan integer specifying the CUDA thread block size. Must be a multiple of 64, and no more than 1024. \r\n\r\n**GPU**\r\nan integer (0, 1 or 2). 0: Do not use the GPU (for small datasets, e.g., less than 100,000 rows, using GPU is slower). 1: Force use the GPU. 2: Use GPU to evaluate splits only when the node size is greater than or equal to n_lb_GPU. \r\n\r\n**n_lb_GPU**\r\nan integer specifying the threshold number of rows in the training data to use GPU for training. This parameter takes effect only when GPU = 2. \r\n\r\n**vote_method**\r\nan integer (0 or 1) specifying the voting method in prediction. 0: each leaf contributes the raw count and an average is taken on the sum over all leaves; 1: each leaf contributes an intra-node fraction which is then averaged over all leaves with equal weight.\r\n\r\n**na_numeric**\r\na numeric value, substitute for 'nan' in numeric variables.\r\n\r\n**na_integer**\r\nan integer value, substitute for 'nan' in integer variables.\r\n\r\n**na_factor**\r\na character string, substitute for missing values in factor variables. \r\n\r\n**type**\r\na character string indicating the return content of the predict function. For a classification problem, \"score\" means the by-class probabilities and \"class\" means the class labels (i.e., the target variable levels). For regression, the predicted values are returned. This is a parameter for the predict function, not an attribute of the brif object. \r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/cubrif/",
    "keywords": "random forest,classification,regression,prediction",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cubrif",
    "package_url": "https://pypi.org/project/cubrif/",
    "platform": null,
    "project_url": "https://pypi.org/project/cubrif/",
    "project_urls": {
      "Homepage": "https://pypi.org/project/cubrif/"
    },
    "release_url": "https://pypi.org/project/cubrif/1.4.3/",
    "requires_dist": [
      "numpy",
      "pandas"
    ],
    "requires_python": ">=3.5",
    "summary": "Build random forests using CUDA GPU.",
    "version": "1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16432300,
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef2619761d5c42a893afc93bb794b4e3810f8c3f394ada53176267b01e50c84b",
          "md5": "5cc53861dba3b5c08e10bc272664b7e1",
          "sha256": "ac644fa22a5a4d23c9ddc635b4402c4437f4fe57bc6ad391260d2703247186b1"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.0-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5cc53861dba3b5c08e10bc272664b7e1",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.5",
        "size": 15547,
        "upload_time": "2023-01-13T03:01:20",
        "upload_time_iso_8601": "2023-01-13T03:01:20.190265Z",
        "url": "https://files.pythonhosted.org/packages/ef/26/19761d5c42a893afc93bb794b4e3810f8c3f394ada53176267b01e50c84b/cubrif-1.4.0-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "112b5c48633ba0e515f02c05aa137edbf44b4f9e3257b65e85ce84de5f35f834",
          "md5": "c11f9af2672f9701255c6d3b1b188f22",
          "sha256": "490db266e84dc873c72f362184a4c910b1b5a4357eb82033cf66f9331288ea07"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c11f9af2672f9701255c6d3b1b188f22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18117,
        "upload_time": "2023-01-13T03:01:22",
        "upload_time_iso_8601": "2023-01-13T03:01:22.037413Z",
        "url": "https://files.pythonhosted.org/packages/11/2b/5c48633ba0e515f02c05aa137edbf44b4f9e3257b65e85ce84de5f35f834/cubrif-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f73eb3c85076d8dce64f63dc940c56a60ad129e2dc8fdede378cebcb055b578",
          "md5": "0135670a0f336861e5692c830dd12fd2",
          "sha256": "fd2dffd5a49451c21c7ec6c83c7693033fdee3b06f39165f1e802fbce426d66a"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.1-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "0135670a0f336861e5692c830dd12fd2",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.5",
        "size": 16140,
        "upload_time": "2023-01-13T03:10:10",
        "upload_time_iso_8601": "2023-01-13T03:10:10.977873Z",
        "url": "https://files.pythonhosted.org/packages/0f/73/eb3c85076d8dce64f63dc940c56a60ad129e2dc8fdede378cebcb055b578/cubrif-1.4.1-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75fdb1b04dbed5e139cb466d32ba01ea1c14b8ea13112e67bc4606896da8d575",
          "md5": "c2a985933b0010c70e3e732f3c733ea7",
          "sha256": "c2735c6f40c004d17c52dd88e86385257028f4ce25095876955117e40b125cdb"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2a985933b0010c70e3e732f3c733ea7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19341,
        "upload_time": "2023-01-13T03:10:12",
        "upload_time_iso_8601": "2023-01-13T03:10:12.779228Z",
        "url": "https://files.pythonhosted.org/packages/75/fd/b1b04dbed5e139cb466d32ba01ea1c14b8ea13112e67bc4606896da8d575/cubrif-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bf2083891eeb11361ab7a6638d5cae3e8bed4cd65fc8ddb0f0ced0a975610df",
          "md5": "a0376800834ebf452543730f3f295af1",
          "sha256": "1c52624ca907cab14d624e2ebdbd501a4192210c56bc086e6e083303b565844b"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.2-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a0376800834ebf452543730f3f295af1",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.5",
        "size": 16145,
        "upload_time": "2023-01-14T20:23:25",
        "upload_time_iso_8601": "2023-01-14T20:23:25.889659Z",
        "url": "https://files.pythonhosted.org/packages/6b/f2/083891eeb11361ab7a6638d5cae3e8bed4cd65fc8ddb0f0ced0a975610df/cubrif-1.4.2-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15077cb92fb36659eeff1a7e8cb2b65e8c3ce6ec988e9b6c5c72c49cee0d4f40",
          "md5": "2b70ef0326023e586a8a84b617c4dd82",
          "sha256": "104393c1e10946f321d60ea937d9dbe59ff3eb56412e7f2b9633ac1a435150e3"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b70ef0326023e586a8a84b617c4dd82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19342,
        "upload_time": "2023-01-14T20:23:27",
        "upload_time_iso_8601": "2023-01-14T20:23:27.755764Z",
        "url": "https://files.pythonhosted.org/packages/15/07/7cb92fb36659eeff1a7e8cb2b65e8c3ce6ec988e9b6c5c72c49cee0d4f40/cubrif-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cd6b0d4afdc65ee2f315c8a8b6e283541520c263ac10b4c49f261d5497cde6f",
          "md5": "6da5615e8a94c24b16dcc21f8bdc4f0a",
          "sha256": "adda85d3583c50d00fd20f60172215e75c619f3c7a90822f9287baa9cfd64674"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.3-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "6da5615e8a94c24b16dcc21f8bdc4f0a",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.5",
        "size": 16144,
        "upload_time": "2023-01-15T01:04:32",
        "upload_time_iso_8601": "2023-01-15T01:04:32.833871Z",
        "url": "https://files.pythonhosted.org/packages/9c/d6/b0d4afdc65ee2f315c8a8b6e283541520c263ac10b4c49f261d5497cde6f/cubrif-1.4.3-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7bc3316619fb2e4983e3519a0cd634ce10adf1e573491b4476c65d2d07ecebf",
          "md5": "dea997d571d209a022cb6b2f0a6b86ca",
          "sha256": "b236aef7f0c5c3eac69142a9add002637a29d518e820580bf5e5c7eb4dbe6228"
        },
        "downloads": -1,
        "filename": "cubrif-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dea997d571d209a022cb6b2f0a6b86ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19348,
        "upload_time": "2023-01-15T01:04:34",
        "upload_time_iso_8601": "2023-01-15T01:04:34.641819Z",
        "url": "https://files.pythonhosted.org/packages/d7/bc/3316619fb2e4983e3519a0cd634ce10adf1e573491b4476c65d2d07ecebf/cubrif-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cd6b0d4afdc65ee2f315c8a8b6e283541520c263ac10b4c49f261d5497cde6f",
        "md5": "6da5615e8a94c24b16dcc21f8bdc4f0a",
        "sha256": "adda85d3583c50d00fd20f60172215e75c619f3c7a90822f9287baa9cfd64674"
      },
      "downloads": -1,
      "filename": "cubrif-1.4.3-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "6da5615e8a94c24b16dcc21f8bdc4f0a",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.5",
      "size": 16144,
      "upload_time": "2023-01-15T01:04:32",
      "upload_time_iso_8601": "2023-01-15T01:04:32.833871Z",
      "url": "https://files.pythonhosted.org/packages/9c/d6/b0d4afdc65ee2f315c8a8b6e283541520c263ac10b4c49f261d5497cde6f/cubrif-1.4.3-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7bc3316619fb2e4983e3519a0cd634ce10adf1e573491b4476c65d2d07ecebf",
        "md5": "dea997d571d209a022cb6b2f0a6b86ca",
        "sha256": "b236aef7f0c5c3eac69142a9add002637a29d518e820580bf5e5c7eb4dbe6228"
      },
      "downloads": -1,
      "filename": "cubrif-1.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "dea997d571d209a022cb6b2f0a6b86ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 19348,
      "upload_time": "2023-01-15T01:04:34",
      "upload_time_iso_8601": "2023-01-15T01:04:34.641819Z",
      "url": "https://files.pythonhosted.org/packages/d7/bc/3316619fb2e4983e3519a0cd634ce10adf1e573491b4476c65d2d07ecebf/cubrif-1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}