{
  "info": {
    "author": "Bogdan Sandoi",
    "author_email": "bogdan.sandoi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DictGest - Python Dictionary Ingestion\n![](https://github.com/bmsan/DictGest/blob/main/docs/source/dictgest_logo.jpg)\n\n[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=bmsan_DictGest&metric=reliability_rating)](https://sonarcloud.io/summary/new_code?id=bmsan_DictGest)\n[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=bmsan_DictGest&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=bmsan_DictGest)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=bmsan_DictGest&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=bmsan_DictGest)\n[![Code Coverage](https://codecov.io/gh/bmsan/dictgest/branch/main/graph/badge.svg?token=WHTIAW8C85)](https://codecov.io/gh/bmsan/dictgest)\n[![CI status](https://github.com/bmsan/dictgest/workflows/CI/badge.svg)](https://github.com/bmsan/dictgest/actions?queryworkflow%3ACI+event%3Apush+branch%3Amain)\n[![Docs](https://readthedocs.org/projects/dictgest/badge/?version=latest)](https://readthedocs.org/projects/dictgest)\n![MYPY](https://img.shields.io/badge/mypy-type%20checked-green)\n![Pylint](https://img.shields.io/badge/Pylint-10.00/10-green)\n[![Discord](https://img.shields.io/discord/981859018836426752?label=Discord%20chat&style=flat)](https://discord.gg/yBb99rxBUZ)\n\n\n- [DictGest - Python Dictionary Ingestion](#dictgest---python-dictionary-ingestion)\n- [Description](#description)\n- [Examples](#examples)\n  - [Example 1: Trivial Example - Handling Extra parameters](#example-1-trivial-example---handling-extra-parameters)\n  - [Example 2: Data mapping renaming & rerouting](#example-2-data-mapping-renaming--rerouting)\n  - [Example 3: Data type enforcing](#example-3-data-type-enforcing)\n  - [Example 4: Custom Data extraction/conversion for a specific field](#example-4-custom-data-extractionconversion-for-a-specific-field)\n  - [Example 5: Custom Data conversion for a specific type](#example-5-custom-data-conversion-for-a-specific-type)\n  - [Example 6: Populating the same structure from multiple different dict formats (multiple APIs)](#example-6-populating-the-same-structure-from-multiple-different-dict-formats-multiple-apis)\n  - [Example 8: Populating from a 2D Table](#example-8-populating-from-a-2d-table)\n    - [Transposing data](#transposing-data)\n    - [Mapping one table row to target type](#mapping-one-table-row-to-target-type)\n  - [Installing](#installing)\n  - [Contributing](#contributing)\n  - [Support](#support)\n  - [License](#license)\n  - [Acknowledgements](#acknowledgements)\n\n# Description\n\nWhen interacting with external REST APIs or with external configuration files we usually do not have control \nover the received data structure/format.\n\n`DictGest` makes ingesting dictionary data into python objects(dataclasss objects included) easy when the dictionary data doesn't match 1 to 1 with the Python class:\n  - The dictionary might have extra fields that are of no interest\n  - The keys names in the dictionary do not match the class attribute names\n  - The structure of nested dictionaries does not match the class structure\n  - The data types in the dictionary do not match data types of the target class\n\n# Examples\n\n## Example 1: Trivial Example - Handling Extra parameters\nThe first most basic and trivial example is ingesting a dictionary that has extra data not of interest\n\n```python\nfrom dictgest import from_dict\n```\n\n![](https://github.com/bmsan/DictGest/blob/main/docs/source/ex1.png?raw=true)\n\n```python\ncar = from_dict(Car, dict_data)\n```\n\n## Example 2: Data mapping renaming & rerouting\nThe keys names in the source dictionary might not match the destionation class attribute names. \nAlso the source dictionary might have a nested structure different than our desired structure.\n\n```python\nfrom typing import Annotated\nfrom dataclasses import dataclass\nfrom dictgest import from_dict, Path\n```\n\n\n![](https://github.com/bmsan/DictGest/blob/main/docs/source/ex2.png?raw=true)\n\n```python\narticle = from_dict(Article, news_api_data)\nmeta = from_dict(ArticleMeta, news_api_data)\nstats = from_dict(ArticleStats, news_api_data)\n```\n\nThe full working example can be found in the [examples folder](https://github.com/bmsan/DictGest/blob/main/examples/news_example.py)\n\nThere can be cases where Annotating the type hints of the target class is not desired by the user or when mapping to multiple APIs might be required.\nFor these cases look at examples 6 & 7 for an alternate solution.\n\n## Example 3: Data type enforcing\n\nSometimes the data coming from external sources might have different datatypes than what we desire. `dictgen` can do type conversion for you.\n\n\n\n```py\nfrom dataclasses import dataclass\nfrom dictgest import from_dict, typecast \n\n@typecast # Makes the class type convertable when encountered as typing hint\n@dataclass # The dataclass is just an example, it could have an normal class\nclass Measurment:\n    temp: float\n    humidity: float\n\n\nclass Sensor:\n    def __init__(\n        self, name: str, location: str, uptime: float, readings: list[Measurment]\n    ):\n        ...\n```\n\n![](https://github.com/bmsan/DictGest/blob/main/docs/source/ex3.png?raw=true)\n\nThe conversions shown above were enabled by setting the `@typecast` decorator for the targetted classes.\n\nThe full working example can be found in the [examples folder](https://github.com/bmsan/DictGest/blob/main/examples/typeconvert_example.py)\n\n\n\n## Example 4: Custom Data extraction/conversion for a specific field\nSometimes we might want to apply custom transforms to some fields when extracting the data from the dictionary.\nIn this example we want to read the total number of votes, but in the dictionary source we only have two partial values: the positive and negative number of votes.\n\nWe apply a custom transform to get our desired data, using the `extractor`  argument of `dictgest.Path`\n\n```py\nfrom typing import Annotated\nfrom dictgest import Path, from_dict\n\n\ndef extract_votes(data):\n    # creating a new value from two individual fields and converting them\n    return int(data[\"positive\"]) + int(data[\"negative\"])\n\n\nclass Votes:\n    def __init__(\n        self,\n        title,\n        total_votes: Annotated[int, Path(\"details/votes\", extractor=extract_votes)],\n    ):\n        ...\n\narticle_data = {\n    \"title\": \"Python 4.0 will...\",\n    \"details\": {\"votes\": {\"positive\": \"245\", \"negative\": \"30\"}},\n}\n\n\nvotes = from_dict(Votes, article_data)\n\n```\n\nThe full working example can be found in the [examples folder](https://github.com/bmsan/DictGest/blob/main/examples/extract_example.py)\n\n\n\n## Example 5: Custom Data conversion for a specific type\n\nIn some cases we might want to employ a custom conversion for a certain datatype.\n\n```py\nfrom dataclasses import dataclass\nfrom dictgest import default_convertor, from_dict\n\n# Get any already registered bool convertor\ndefault_bool_conv = default_convertor.get_convertor(bool)\n\n# create a custom converter\ndef custom_bool_conv(val):\n    if val == \"oups\":\n        return False\n\n    # Let the other cases be treated as before\n    return default_bool_conv(val)\n\n\n# register the custom converter for bool\ndefault_convertor.register(bool, custom_bool_conv)\n\n\n@dataclass\nclass Result:\n    finished: bool\n    notified: bool\n\n\nresult = from_dict(Result, {\"finished\": True, \"notified\": \"oups\"})\nprint(result)\n\n```\n\n## Example 6: Populating the same structure from multiple different dict formats (multiple APIs)\n\nThere are cases where you might read information from multiple heterogenous APIs and you might want to convert them all to the same structure.\n\nPreviously we have annotated fields( using typing.Annotation hint ) with Path eg: ` name: Annotated[str, Path('article')] `. This works well for a single conversion mapping.\n\nFor this current scenario we are going to decouple the class from the Routing.\n\nPreviously single mapping scenario:\n```py\n@dataclass\nclass Article:\n    author: str\n    title: Annotated[str, Path(\"headline\")]\n    content: Annotated[str, Path(\"details/content\")]\n\n```\n\n\nBut now we have 2 API news sources\n\n```py\ndata_from_api1 = {\n    \"author\": \"H.O. Ward\"\n    \"headline\" : \"Top 10 Python extensions\", \n    \"other_fields\" : ...,\n    \"details\": {\n        \"content\": \"Here are the top 10...\",\n        \"other_fields\": ...\n         }\n    }\n\ndata_from_api2 = {\n    \"author\": \"G.O. Gu\" \n    \"news_title\" : \"Vscode gets a new facelift\", \n    \"other_fields\" : ...,\n    \"full_article\": \"Yesterday a new version ...\",\n    }\n\n\n}\n```\n\nWe are going to use `dictgest.Route` to define multiple standalone routes.\n\nOur previous example becomes:\n```py\n@dataclass\nclass Article:\n    author: str\n    title: str # Path annotations are decoupled\n    content: str\n\n# Routing equivalent to previous example\narticle_api1 = Route(title=\"headline\", content=\"details/content\")\n\n# New Routing for a new dict structure\narticle_api2 = Route(title=\"news_title\", content=\"full_article\")\n\n\narticle1 = from_dict(Article, data_from_api1, routing=article_api1)\narticle2 = from_dict(Article, data_from_api2, routing=article_api2)\n```\n\n\nThe full working example can be found in the [examples folder](https://github.com/bmsan/DictGest/blob/main/examples/news_multi_example.py)\n\n\n## Example 8: Populating from a 2D Table\nSometimes when querying databases/external APIs the reponse might be in a form of a 2D Table (a list of lists)\n\n```py\n    header = [\"humidity\", \"temperatures\", \"timestamps\"]\n    table_data = [\n        [0.4, 7.4, \"1Dec2022\"],\n        ...\n        [0.6, 5.4, \"21Dec2022\"],\n    ]\n```\nAnd our desired target structure could look like this:\n\n```py\n   @dataclass\n    class SenzorData:\n            timestamps: list[datetime.datetime]\n            temperatures: list[float]\n            humidity: list[float]\n```\n\nIn this example we would like each data column to be  treated as a field of the target type.\nTo ingest our data into our target type we can use `table_to_item` following:\n\n```py\n    import dictgest as dg\n\n    result = dg.table_to_item(SenzorData, table_data, header)\n```\n\n### Transposing data\nThe operation can be also be performed row wise by using the `transpose = True` flag.\nSo given\n```py\n    header = [\"humidity\", \"temperatures\", \"timestamps\"]\n    table_data_transposed = [\n        # rows are switched with columns\n        [0.4, ..., 0.6],\n        [5.4, ..., 7.4]\n        [\"1Dec2022\", ..., \"21Dec2022\"],\n    ]\n\n    result = dg.table_to_item(SenzorData, table_data_transposed, header, transpose=True)\n```\n\n### Mapping one table row to target type\nWe might not want to convert the whole table into a specific data type but map each row/column to a specific datatype.\n\n```py\n#Unlike SenzorData defined previously SenzorDataPoint holds information only for a single specific time.\n   @dataclass\n    class SenzorDataPoint:\n            timestamp: datetime.datetime\n            temperature: float\n            humidity: float\n```\n\nFor this `table_to_items` can be used\n\n```\n    result = dg.table_to_item(SenzorDataPoint, table_data, header)\n\n    result = dg.table_to_item(SenzorDataPoint, table_data_transposed, header, transpose=True)\n```\n\n\n\n## Installing \n\n```\npip install dictgest\n```\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n## Support\n\nReach out to the maintainer at one of the following places:\n- [Github issues](https://github.com/bmsan/DictGest/issues)\n- [Discord](https://discord.gg/yBb99rxBUZ)\n\n\n## License\n\nThis project is licensed under the **MIT license**. Feel free to edit and distribute this template as you like.\n\nSee [LICENSE](LICENSE) for more information.\n\n## Acknowledgements\n\n- Thanks [Dan Oneata](https://github.com/danoneata) for the discussions related to usecases and API.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bmsan/DictGest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dictgest",
    "package_url": "https://pypi.org/project/dictgest/",
    "platform": null,
    "project_url": "https://pypi.org/project/dictgest/",
    "project_urls": {
      "Homepage": "https://github.com/bmsan/DictGest"
    },
    "release_url": "https://pypi.org/project/dictgest/0.4.0/",
    "requires_dist": [
      "python-dateutil (>=2.8.2)",
      "setuptools (>=45.2.0)"
    ],
    "requires_python": ">=3.9",
    "summary": "Advanced dictionary ingestion into python objects",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15518926,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9827e3c4e2986a7412850d69480851d8365ed183956db8244010a68105992f1",
          "md5": "5821c97dd6d65c12a4f771325ed806fa",
          "sha256": "06bdeb1478cac98d67dd66fba09111260cf8f842443c739f980641a90af39893"
        },
        "downloads": -1,
        "filename": "dictgest-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5821c97dd6d65c12a4f771325ed806fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7045,
        "upload_time": "2022-06-03T18:22:59",
        "upload_time_iso_8601": "2022-06-03T18:22:59.836388Z",
        "url": "https://files.pythonhosted.org/packages/f9/82/7e3c4e2986a7412850d69480851d8365ed183956db8244010a68105992f1/dictgest-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "174e1d836cfa324362bc5f46ed0cada9d5934485eab7393a20b842ed7ee8bca1",
          "md5": "705944333eeb2e302cf0cb0edbc51ef4",
          "sha256": "9edfdfe58433a6d524c5960cdb74879e1f819708cc43573ca18ea57f0ae6e7c1"
        },
        "downloads": -1,
        "filename": "dictgest-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "705944333eeb2e302cf0cb0edbc51ef4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6404,
        "upload_time": "2022-06-03T18:23:01",
        "upload_time_iso_8601": "2022-06-03T18:23:01.598711Z",
        "url": "https://files.pythonhosted.org/packages/17/4e/1d836cfa324362bc5f46ed0cada9d5934485eab7393a20b842ed7ee8bca1/dictgest-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2033f50b118abc6e8288ebab99c53c489e2163494d3e2a9dd0095c6b07cd721d",
          "md5": "de9b82a0f6c4d04ad5b91d53f7fff186",
          "sha256": "7870e6dce3a482a3c100dd508415457d1f353fc9354918032b721fd7f71a015d"
        },
        "downloads": -1,
        "filename": "dictgest-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de9b82a0f6c4d04ad5b91d53f7fff186",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 8311,
        "upload_time": "2022-06-05T08:56:19",
        "upload_time_iso_8601": "2022-06-05T08:56:19.147788Z",
        "url": "https://files.pythonhosted.org/packages/20/33/f50b118abc6e8288ebab99c53c489e2163494d3e2a9dd0095c6b07cd721d/dictgest-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0752e4f24187167a5bbe6996b6decec7aa6068fa7d4a225d143867cff3d7de09",
          "md5": "afae813f97a55233183da4289eeda028",
          "sha256": "24632f243103b6bb7770de84b5b1c18d241170379f3ca0f76bd79290584c5f46"
        },
        "downloads": -1,
        "filename": "dictgest-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "afae813f97a55233183da4289eeda028",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 7602,
        "upload_time": "2022-06-05T08:56:21",
        "upload_time_iso_8601": "2022-06-05T08:56:21.705914Z",
        "url": "https://files.pythonhosted.org/packages/07/52/e4f24187167a5bbe6996b6decec7aa6068fa7d4a225d143867cff3d7de09/dictgest-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae7f14237572bf64e00139824178d8164a03323cd27bad0133a510232269b4c2",
          "md5": "464fec0b22b50c9d737df3fe73f41f32",
          "sha256": "bbe0baeedadc89aede716e5a51f3aacf40cf9b6c7de79e0127602d0523037d8b"
        },
        "downloads": -1,
        "filename": "dictgest-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "464fec0b22b50c9d737df3fe73f41f32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12338,
        "upload_time": "2022-06-12T20:09:30",
        "upload_time_iso_8601": "2022-06-12T20:09:30.948180Z",
        "url": "https://files.pythonhosted.org/packages/ae/7f/14237572bf64e00139824178d8164a03323cd27bad0133a510232269b4c2/dictgest-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dd36916d4147c4d308d670394275fcba1efc3abfac66d6eb0182d081f1766f6",
          "md5": "0c49020a31ce7a574d53d1dcf361d4a5",
          "sha256": "5fad2ce1478d6a5cf7ce26ecf018b2bd81c87c75926238761f38c49b0af093cc"
        },
        "downloads": -1,
        "filename": "dictgest-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c49020a31ce7a574d53d1dcf361d4a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14121,
        "upload_time": "2022-06-12T20:09:32",
        "upload_time_iso_8601": "2022-06-12T20:09:32.632894Z",
        "url": "https://files.pythonhosted.org/packages/8d/d3/6916d4147c4d308d670394275fcba1efc3abfac66d6eb0182d081f1766f6/dictgest-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e7de652ad140e3885f898fffdb65d4d3851f99435e472797c93f65a1554f3c0",
          "md5": "fad62b3c1e2f76001bb2a8418ee2ec7b",
          "sha256": "4e6743fb15d9c0bb8a8eeb376bfd51e12e6e89bb2b75fc2e19a3e5da0d32a461"
        },
        "downloads": -1,
        "filename": "dictgest-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fad62b3c1e2f76001bb2a8418ee2ec7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13535,
        "upload_time": "2022-10-25T06:17:04",
        "upload_time_iso_8601": "2022-10-25T06:17:04.543456Z",
        "url": "https://files.pythonhosted.org/packages/5e/7d/e652ad140e3885f898fffdb65d4d3851f99435e472797c93f65a1554f3c0/dictgest-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d4e2ce27b17f51b80c3fd74b57d8ec32b2e061c35604cec8b7f8e1d4537610",
          "md5": "97e0fb1838fafffffebe5edd26ecc561",
          "sha256": "5e5fd02b3aeb60058a46948564dba964b81e57e46e0261024de0575425fbf73d"
        },
        "downloads": -1,
        "filename": "dictgest-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97e0fb1838fafffffebe5edd26ecc561",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 15834,
        "upload_time": "2022-10-25T06:17:06",
        "upload_time_iso_8601": "2022-10-25T06:17:06.675432Z",
        "url": "https://files.pythonhosted.org/packages/b4/d4/e2ce27b17f51b80c3fd74b57d8ec32b2e061c35604cec8b7f8e1d4537610/dictgest-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e7de652ad140e3885f898fffdb65d4d3851f99435e472797c93f65a1554f3c0",
        "md5": "fad62b3c1e2f76001bb2a8418ee2ec7b",
        "sha256": "4e6743fb15d9c0bb8a8eeb376bfd51e12e6e89bb2b75fc2e19a3e5da0d32a461"
      },
      "downloads": -1,
      "filename": "dictgest-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fad62b3c1e2f76001bb2a8418ee2ec7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 13535,
      "upload_time": "2022-10-25T06:17:04",
      "upload_time_iso_8601": "2022-10-25T06:17:04.543456Z",
      "url": "https://files.pythonhosted.org/packages/5e/7d/e652ad140e3885f898fffdb65d4d3851f99435e472797c93f65a1554f3c0/dictgest-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4d4e2ce27b17f51b80c3fd74b57d8ec32b2e061c35604cec8b7f8e1d4537610",
        "md5": "97e0fb1838fafffffebe5edd26ecc561",
        "sha256": "5e5fd02b3aeb60058a46948564dba964b81e57e46e0261024de0575425fbf73d"
      },
      "downloads": -1,
      "filename": "dictgest-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "97e0fb1838fafffffebe5edd26ecc561",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 15834,
      "upload_time": "2022-10-25T06:17:06",
      "upload_time_iso_8601": "2022-10-25T06:17:06.675432Z",
      "url": "https://files.pythonhosted.org/packages/b4/d4/e2ce27b17f51b80c3fd74b57d8ec32b2e061c35604cec8b7f8e1d4537610/dictgest-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}