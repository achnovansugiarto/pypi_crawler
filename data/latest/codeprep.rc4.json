{
  "info": {
    "author": "Hlib Babii",
    "author_email": "hlibbabii@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Pre-processors"
    ],
    "description": "<!--\nSPDX-FileCopyrightText: 2020 Hlib Babii <hlibbabii@gmail.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Codeprep\n\n[![Build Status](https://travis-ci.org/giganticode/codeprep.svg?branch=master)](https://travis-ci.org/giganticode/codeprep)\n[![Maintainability](https://api.codeclimate.com/v1/badges/64c9b107bc09fdb1b3b1/maintainability)](https://codeclimate.com/github/giganticode/codeprep/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/64c9b107bc09fdb1b3b1/test_coverage)](https://codeclimate.com/github/giganticode/codeprep/test_coverage)\n[![PyPI version fury.io](https://badge.fury.io/py/codeprep.svg)](https://pypi.python.org/pypi/codeprep/)\n\n**This is a tool for preprocessing source code corpora according to a specified vocabulary modeling choice.**\n\nSupported modeling choices are: \n* Splitting algorithm (no identifier splitting, camel-case splitting, snake-case splitting, BPE (byte-pair-encoding), \nnumber-splitting, ronin: http://joss.theoj.org/papers/10.21105/joss.00653); \n* Number of merges if using BPE; \n* Ignoring/preserving string literals; \n* Ignoring/preserving comments; \n* Preserving case/lowercasing;\n* Preserving/ignoring newlines and tabs.\n* applying/not applying stemming after basic splitting \n\n# Getting started\n\nMake sure you have python >= 3.6 installed in your system; pip, setuptools and wheel are up to date.\n```bash\npython --version\npython -m pip install --upgrade pip setuptools wheel\n```\n\nInstall **codeprep** lib:\n```bash\npip install codeprep\n```\n\nIn order to run the **ronin** algorithm, you will have to additionally install Spiral module (https://github.com/casics/spiral/):\n```bash\npip install git+https://github.com/casics/spiral.git\n```\n\nThe tool can be used **as a python library** as well as a standalone module runnable with a **CLI**. \nYou can pass the path to the dataset or the text itself to be preprocessed. When using Python API for the former option \nyou need to import methods from `codeprep.api.text` module, for the latter - from `codeprep.api.corpus`.\nBelow you can see the general patterns of usage.\n\n\nPython API\n```python\n>>> import codeprep.api.text as cp\n>>> cp.<commmand>('Some code to be split')\n```\n\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.<commmand>('/path/to/the/dataset')\n```\n\nCLI\n```bash\ncodeprep <commmand> \"Some code to be split\"\n```\n\n```bash\ncodeprep <commmand> --path /path/to/the/dataset\n```\n\n\nHereafter we will demonstrate the usage as a python library. The CLI is analogous to the python API. You can find the documentation about how to use it [here](codeprep/cli/spec.py). \n\n## Usage examples\n\n### Basic splitting \nTokenization + CamelCase- and snake_case- splitting:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     Überraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code)\n['void', '<w>', 'test', '_', 'Word', 'Ueberraschung', 'Printer', '</w>', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', '<w>', 'print', 'Word', '</w>', '(', '\"', '\\t', '.', '.', '.', '\\t', 'Überraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n\n### Tokenize but don't split identifiers\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     Überraschung\");\n...     }\n... }'''\n>>> cp.nosplit(input_code)\n['void', 'test_WordUeberraschungPrinter', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '345e', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', 'printWord', '(', '\"', '\\t', '.', '.', '.', '\\t', 'Überraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n\n### BPE (Byte-Pair encoding)\n\nThe following code does **camelCase-** and **snake_case-** splitting and applies **bpe with 10k merges** on top:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     Überraschung\");\n...     }\n... }'''\n>>> cp.bpe(input_code, bpe_codes_id='10k')\n['v', 'oid</t>', 'test_', 'Word', 'U', 'eb', 'err', 'as', 'ch', 'un', 'g', 'Print', 'er</t>', '(</t>', ')</t>', '{</t>', '\\n', \n'\\t', 'i', 'f</t>', '(</t>', 'e', 'ps</t>', '></t>', '=</t>', '0</t>', '.</t>', '34', '5', 'e</t>', '+</t>', '4</t>', ')</t>', '{</t>', '/</t>', '/</t>', 'FIX', 'M', 'E</t>',  '\\n', \n'\\t', '\\t', 'print', 'Word</t>', '(</t>', '\"</t>', '\\t', '.</t>', '.</t>', '.</t>', '\\t', 'Ü', 'b', 'err', 'as', 'ch', 'un', 'g</t>', '\"</t>', ')</t>', ';</t>', '\\n', \n'\\t', '}</t>', '\\n', \n'}</t>']\n```\n\n**codeprep** by default does BPE using bpe codes leaned on [the Github Java Corpus](http://groups.inf.ed.ac.uk/cup/javaGithub/). The argument `bpe_codes_id='10k'` tells the **codeprep** tool to use 10,000 bpe merges. \nOther possible values are `1k` and `5k` (1,000 and 5,000 merges respectively). Please refer to section [Learning custom BPE codes](#Learning-custom-BPE-codes) to train custom bpe codes.\n\n**For other commands and options like `chars`, `--split-numbers`, `--ronin`, `--stem`, please refer to the [docs](codeprep/cli/spec.py)**.\n\n## Calculate vocabulary \nSet `calc_vocab` param to `True` when calling a preprocessing method to calculate the vocabulary of the preprocessed corpus, e.g.:\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.basic('/path/to/train/on', calc_vocab=True)\n...\nVocab is available at /path/to/vocab\n```\n\n## Learning custom BPE codes\nIf you don't want to use, pre-trained BPE codes, it's possible to train custom ones. For example, to train 10,000 merges on the corpus located at the path `/path/to/train/on`, the following command should be run (only CLI):\n\n```bash\ncodeprep learn-bpe 10000 -p /path/to/train/on --id custom-bpe-codes \n```\n\nNow it is possible to do bpe splitting by running the bpe command with the number of merges from 0 to 10,000 (for example with 3500 merges):\n\n```bash\ncodeprep bpe custom-bpe-codes-3500 -p /path/to/preprocess \n```\n\nBefore bpe codes are trained, the [basic preprocessing](#basic-splitting) is done, which can also be tuned with arguments described in section [Tweaking preprocessing](#tweaking-preprocessing).\n\n\n## Additional options\n### Tweaking preprocessing\nYou can pass the following parameters with a `True` value (default values for all of them are False), to tweak the way the imput is preprocessed:\n\n * `no_str` - replace strings with <string> placeholders.\n * `no_com` - replace comments with <comment> placeholders.\n * `no_spaces` - remove newlines and tabs.\n * `no_unicode` - replace words containing non-ascii characters with <non-en> placeholders.\n * `no_case` - lowercase words and encode information about case in <Cap> <CAP> tokens.\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     Überraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code, no_spaces=True, no_unicode=True, no_case=True, no_com=True, no_str=True)\n['void', '<w>', 'test', '_', '<Cap>', 'word', '<Cap>', 'ueberraschung', '<Cap>', 'printer', '</w>', '(', ')', '{', \n'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', '<CAPS>', 'fixme', \n'<w>', 'print', '<Cap>', 'word', '</w>', '(', '\"', '.', '.', '.', '<Cap>', '<non-en>', '\"', ')', ';', \n'}', \n'}']\n```\n\nSimilar params can be specified as switches `--no-str`, `--no-com`, `--no-spaces`, `--no-unicode`, `--no-case` in CLI commands.\n\n### Specifying the language\nUnless explicitely specified, **codeprep** will assume the language is java. To make sure the input is preprocessed as intended, it is always **highly recommended** to specify it:\n```python\nimport codeprep.api.text as cp\n>>> cp.bpe(\"volatile\", '1k')\n['volatile']\n>>> cp.bpe(\"volatile\", '1k', extension=\"py\")\n['v', 'ol', 'a', 'ti', 'le</t>']\n# Since 'volatile' is a keyword in java, it is represented as one token unlike in python \n# where it is pretty rare when used as an identifier and therefore represented as multiple subtokens.\n```\n\nWhen preprocessing a corpus, `codeprep` identifies the language based on the file extension. If you want only files with (a) certain extension(s) to be preprocessed, you can specify --ext param \n```bash\ncodeprep basic --path /path/to/be/preprocessed --ext \"java\"\n\n# or if you want to pre-process multiple types of files: \ncodeprep basic --path /path/to/be/preprocessed --ext \"java|c|py|js\"\n```\n### Miscellaneous\nYou can specify the path to where the preprocessed corpus will be written:\n```bash\ncodeprep basic --path /path/to/preprocess --output-path /path/to/output\n```\n\nTo print logs with log level DEBUG and higher to stdout:\n```bash\ncodeprep basic --path /path/to/preprocess --verbose\n```\n\n## Getting Help\nTo get help on commands and options:\n\n```bash\ncodeprep --help\n```\n\n## Paper\n\nThis library was build to run experiments for our paper accepted at ICSE 2020: [Big Code != Big Vocabulary: Open-Vocabulary Models for Source Code](https://arxiv.org/pdf/2003.07914.pdf)\n\nIf you you the library or the results, please cite the paper:\n\n ```\n @article{karampatsis2020big,\n  title={Big Code!= Big Vocabulary: Open-Vocabulary Models for Source Code},\n  author={Karampatsis, Rafael-Michael and Babii, Hlib and Robbes, Romain and Sutton, Charles and Janes, Andrea},\n  journal={arXiv preprint arXiv:2003.07914},\n  year={2020}\n}\n ```\n\n\n# Advanced\n\n### Caching\n\nWhen preprocessing a dataset, **codeprep** first parses source code and converts it into internal representation, \nwhich is after that converted to a preprocessed dataset depending on provided parameters. The intermediate \nrepresentation is cached, so that when the same dataset is pre-processed again with different parameters,\n**codeprep** (providing no changes have been made to the dataset) would use the cache rather than parsing \nthe source code again.\n\nTo store the cache, **codeprep** uses a directory speecified by `$XDG_CACHE_HOME/codeprep/<codeprep_version>` variable if its value is set, \n`$HOME/.cache/codeprep/<codeprep_version>` otherwise.\n\nRemoving the cache will not change the final result, however, will result in slower pre-processing.\n\n# Releases\n\n## 1.0.3\n- Add more flixibility with versions of dependencies\n\n## 1.0.1\n- Fix training custom bpe codes (Thanks to @mir-am)\n- Fix corpus pre-processing on Windows\n\n## 1.0.0\n- DOI assigned\n\n## 1.0.0-alpha.12\n- Bugfixes and minor improvements\n\n## 1.0.0-alpha.11 (NOT backward compatible with 1.0.0-alpha.10)\n\n- Include token types in the metadata\n- Expand on token type hierarchy\n- Make possible to return full token index in the iterator\n\n## 1.0.0-alpha.10 (NOT backward compatible with 1.0.0-alpha.9)\n\n- Add boundaries of comments to pre-processing metadata\n- Add Windows and OSx support\n- Switch from unittest to pytest+doctest\n- Bugfixes related to literal presentation of tokens on the disk\n- Bugfixes related to adding </t> to mark the end of a full token\n\n## 1.0.0-alpha.9 (NOT backward compatible with 1.0.0-alpha.7)\n\n- Add `get_corpus_size()` method to `PreprocessedCorpus` class\n- Do BPE splitting without splitting by convention first\n- Use </t> to mark the last sub-token of a token\n- Replacing non-ascii sequences with a special char\n- Follow symlinks when reading a dataset\n- make possible to preserve case when doing stemming\n- Bugfixes\n\n## 1.0.0-alpha.7 (NOT backward compatible with 1.0.0-alpha.6)\n\n- Store version in `codeprep.__version__`\n- implement `--full-strings` and `--max-str-length` options\n- replace `ronin` method/command wit`--ronin` option and apply ronin algorithm on word level instead of full identifier level\n- if `split_numbers` option is set to `True`, split numbers not only in code but also in strings and comments\n- change placeholder values to more human-readable\n- improve logging displaying\n- Bugfixes\n\n## 1.0.0-alpha.6\n\nInitial PyPI release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/giganticode/codeprep",
    "keywords": "big large data source code corpus machine learning pre-processing nlp",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "codeprep",
    "package_url": "https://pypi.org/project/codeprep/",
    "platform": "",
    "project_url": "https://pypi.org/project/codeprep/",
    "project_urls": {
      "Homepage": "http://github.com/giganticode/codeprep"
    },
    "release_url": "https://pypi.org/project/codeprep/1.0.5/",
    "requires_dist": [
      "appdirs (<2,>=1.4)",
      "dill (<0.4,>=0.3.1.1)",
      "docopt (<0.7,>=0.6.2)",
      "docopt-subcommands (<4,>=3.0.0)",
      "jsons (<2,>=1.0)",
      "nltk (<4,>=3.4.5)",
      "Pygments (<3,>=2.5.2)",
      "PyYAML (<6,>=5.1)",
      "regex (<=2020.5.14,>=2019.11.1)",
      "tqdm (<5,>=4.39)"
    ],
    "requires_python": ">=3.6",
    "summary": "A toolkit for pre-processing large source code corpora",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10131813,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb790f4145c16abc6c4c51c0a4e726aeb7095a738b76fa98ffe9010e6586cdbe",
          "md5": "4191626afb57722abd2af87479abc661",
          "sha256": "8cb61ef5eb73f4442a779b6c17f526e91e7d11b159d6bbec8bd06f63ec106ac8"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4191626afb57722abd2af87479abc661",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 252052,
        "upload_time": "2020-01-24T16:00:23",
        "upload_time_iso_8601": "2020-01-24T16:00:23.751439Z",
        "url": "https://files.pythonhosted.org/packages/eb/79/0f4145c16abc6c4c51c0a4e726aeb7095a738b76fa98ffe9010e6586cdbe/codeprep-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e52916765fcc1763b84f259dc517a2c98f827787e36c14948b749cab9a04c5d7",
          "md5": "8da0210974cafbfc29f1a3a3ac3cecee",
          "sha256": "fe0d5f3357424a41b4500f41e2fe5ef9138e84930c6e5d914e9f81b455a06cd0"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8da0210974cafbfc29f1a3a3ac3cecee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 227823,
        "upload_time": "2020-01-24T16:00:27",
        "upload_time_iso_8601": "2020-01-24T16:00:27.503661Z",
        "url": "https://files.pythonhosted.org/packages/e5/29/16765fcc1763b84f259dc517a2c98f827787e36c14948b749cab9a04c5d7/codeprep-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f83c895263bf5604bff43f424c0140efedfffc18a2c7820e4feac9863c28d7d",
          "md5": "981b184b0cbaae28991c089855e3db8a",
          "sha256": "e686afc549604e3045b136b5459d21e21f3058c7085ace9c6329704ff9d07b5a"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "981b184b0cbaae28991c089855e3db8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 252544,
        "upload_time": "2020-03-18T18:40:41",
        "upload_time_iso_8601": "2020-03-18T18:40:41.175252Z",
        "url": "https://files.pythonhosted.org/packages/9f/83/c895263bf5604bff43f424c0140efedfffc18a2c7820e4feac9863c28d7d/codeprep-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bf8244ebaf2bafbcf75b37dd7127c6ffba97badb5f4e89864ab6e4e8c4b4876",
          "md5": "a36ec9da7e13b13bf1f479952fd8cb41",
          "sha256": "d47360b2e4320356d8cfa9a65a51583bda7a956379950c66161ecb49f59b2728"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a36ec9da7e13b13bf1f479952fd8cb41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 228589,
        "upload_time": "2020-03-18T18:40:43",
        "upload_time_iso_8601": "2020-03-18T18:40:43.353748Z",
        "url": "https://files.pythonhosted.org/packages/7b/f8/244ebaf2bafbcf75b37dd7127c6ffba97badb5f4e89864ab6e4e8c4b4876/codeprep-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40ac55543fcb656235ba8c7f96484fe84ab7b48f4c8f366536ed5fb07bce6557",
          "md5": "bd193a8005531d7e32142bb921ec419a",
          "sha256": "482d8508eb473ac2884899bbcc08ea91edffda7a98e7e48fd9f87ff796fbbc93"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd193a8005531d7e32142bb921ec419a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 252835,
        "upload_time": "2020-05-20T10:16:21",
        "upload_time_iso_8601": "2020-05-20T10:16:21.217208Z",
        "url": "https://files.pythonhosted.org/packages/40/ac/55543fcb656235ba8c7f96484fe84ab7b48f4c8f366536ed5fb07bce6557/codeprep-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a8cde2b43fd5a3029b62b9bb4d124b724934d12390bc682161d6e82ba19d2ae",
          "md5": "645a3b9467ee716617079005ef905c86",
          "sha256": "6d205e03b4f20484983575a7cedd6a038d310fac7d74b1cfad82f9a5aad82c31"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "645a3b9467ee716617079005ef905c86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 223280,
        "upload_time": "2020-05-20T10:16:23",
        "upload_time_iso_8601": "2020-05-20T10:16:23.661129Z",
        "url": "https://files.pythonhosted.org/packages/7a/8c/de2b43fd5a3029b62b9bb4d124b724934d12390bc682161d6e82ba19d2ae/codeprep-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b66b9c803d4b84c440b1b0390b1a662fc001b86fc45bf5224d9f03a8f849c2",
          "md5": "3bee7ed88c2ce4df797ed1b4fd8f2fc1",
          "sha256": "00e45aab633c708cf97fe0d47c8a9ffe5e838dfd5620f8665f760cf8e7f22379"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bee7ed88c2ce4df797ed1b4fd8f2fc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 266418,
        "upload_time": "2021-04-21T18:12:05",
        "upload_time_iso_8601": "2021-04-21T18:12:05.877227Z",
        "url": "https://files.pythonhosted.org/packages/d9/b6/6b9c803d4b84c440b1b0390b1a662fc001b86fc45bf5224d9f03a8f849c2/codeprep-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96bc7173da67225c970e1d48c4e7411dbfe63b1779fc792d0ef7209e893bb734",
          "md5": "472e2b871fde00d57d1a2ef4b0dc73d7",
          "sha256": "b296f625dc20509e1585f1f7ec07b97ac39f9451bb33c5ca1aaa53256e4c1958"
        },
        "downloads": -1,
        "filename": "codeprep-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "472e2b871fde00d57d1a2ef4b0dc73d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 227162,
        "upload_time": "2021-04-21T18:12:07",
        "upload_time_iso_8601": "2021-04-21T18:12:07.722785Z",
        "url": "https://files.pythonhosted.org/packages/96/bc/7173da67225c970e1d48c4e7411dbfe63b1779fc792d0ef7209e893bb734/codeprep-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9b66b9c803d4b84c440b1b0390b1a662fc001b86fc45bf5224d9f03a8f849c2",
        "md5": "3bee7ed88c2ce4df797ed1b4fd8f2fc1",
        "sha256": "00e45aab633c708cf97fe0d47c8a9ffe5e838dfd5620f8665f760cf8e7f22379"
      },
      "downloads": -1,
      "filename": "codeprep-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3bee7ed88c2ce4df797ed1b4fd8f2fc1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 266418,
      "upload_time": "2021-04-21T18:12:05",
      "upload_time_iso_8601": "2021-04-21T18:12:05.877227Z",
      "url": "https://files.pythonhosted.org/packages/d9/b6/6b9c803d4b84c440b1b0390b1a662fc001b86fc45bf5224d9f03a8f849c2/codeprep-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96bc7173da67225c970e1d48c4e7411dbfe63b1779fc792d0ef7209e893bb734",
        "md5": "472e2b871fde00d57d1a2ef4b0dc73d7",
        "sha256": "b296f625dc20509e1585f1f7ec07b97ac39f9451bb33c5ca1aaa53256e4c1958"
      },
      "downloads": -1,
      "filename": "codeprep-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "472e2b871fde00d57d1a2ef4b0dc73d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 227162,
      "upload_time": "2021-04-21T18:12:07",
      "upload_time_iso_8601": "2021-04-21T18:12:07.722785Z",
      "url": "https://files.pythonhosted.org/packages/96/bc/7173da67225c970e1d48c4e7411dbfe63b1779fc792d0ef7209e893bb734/codeprep-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}