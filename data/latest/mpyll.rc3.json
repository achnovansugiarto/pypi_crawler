{
  "info": {
    "author": "Mehdi",
    "author_email": "ydhm@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mpyll\n\nmpyll is a package for easy task parallelization across CPU threads.\n\n## Installation\n\n```python\npip install mpyll\n```\n\n## Usage\n\nmpyll logic is as follows:\n\n1. Identify the data on which to parallelize computation. The data should be \n   stored in a list.\n2. Define the task: a python function that takes as input a list of\n   data elements and performs the desired task. This is the parallelized task; \n   instances of this function are to be running in CPU threads.\n3. Define an eventual post processing function that takes as input a list of\n   data and returns the final result, if any.\n\n### Example\n\nLet's take as an example the estimation of Pi through Monte Carlo:\n\n```python\nimport numpy as np\nfrom mpyll import parallelize\n\n# First, we define the data on which we would like to parallelize computation.\nr = 1.\nm = 10 ** 6\nX = np.random.uniform(-r, r, size = m)\nY = np.random.uniform(-r, r, size = m)\ndata = [(X[i], Y[i]) for i in range(m)]\n\n# Second, we define the task to be parallelized.\n# It takes as input the data (a list) as well as other arguments, if any, \n# and it returns a result. If it is a procedure, then it does not return.\ndef count_in_circle_points(data, r, m):\n    a = np.array(data) # matrix, each row contains a point coordinates\n    d = np.sqrt(np.sum(a ** 2, axis = 1)) # distance to the origin\n    in_circle = d <= r # an array, True if distance <= radius, False otherwise\n    return np.sum(in_circle) \n\n# Finally, we define a post processor.\ndef estimate_pi(data, m):\n    pi_estimation = 4 * np.sum(data) / m\n    return pi_estimation\n\npi_estimation = parallelize(task = count_in_circle_points, \n                            data = data, data_shuffle = False, \n                            post_processor = estimate_pi, \n                            n_jobs = -1, \n                            # task arguments\n                            count_in_circle_points_r = r, \n                            count_in_circle_points_m = m,\n                            # post processor arguments\n                            estimate_pi_m = m)\n```\n### API\n\n```\nparallelize(task, \n            data, \n            shuffle_data = False, \n            post_processor = None,\n            n_jobs = -1,\n            *args,\n            **kwargs)\n\nParallelize a task that returns a value\n\nParameters\n----------\ntask: function\n  The task to be parallelized.\ndata: list\n  The data on which the parallelization is performed.\nshuffle_data: boolean\n  shuffle data before processing. Sometimes the data are not identically\n  distributed, which could cause some threads to be overloaded compared to \n  others.\npost_processor: function\n  A function that runs after all threads terminate.\nn_jobs: int\n  The number of threads to be used. Specify -1 to use all CPU threads.\n\nOther Parameters\n----------------\nOther parameters could be passed to `task` and `post_processor`. The argument\nname should start with the name of the task or the post processor, followed \nby an underscore and the name of the argument.\n\nReturns\n-------\nIf a post processor is specified, then this function returns what is returned\nby the post processor, otherwise, it returns a list of the objects returned by\neach thread.\n```\n\n## License\n\nGNU General Public License v3\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/mhdy/mpyll",
    "keywords": "parallel parallelization multiprocessing",
    "license": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mpyll",
    "package_url": "https://pypi.org/project/mpyll/",
    "platform": "",
    "project_url": "https://pypi.org/project/mpyll/",
    "project_urls": {
      "Homepage": "https://gitlab.com/mhdy/mpyll"
    },
    "release_url": "https://pypi.org/project/mpyll/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package for easy task parallelization across CPU threads",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7021728,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abeec4604c7149bd32c491aa5e381e5074eced308559aa7866059d3f58b565ca",
          "md5": "05d0ca91a5a3e03f08ac4af6c3841e77",
          "sha256": "e5cc02aeab5c9dbc695ba18dd5755f42c02ea8bf950f509ac08e19e2795da5df"
        },
        "downloads": -1,
        "filename": "mpyll-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05d0ca91a5a3e03f08ac4af6c3841e77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16195,
        "upload_time": "2020-04-06T02:16:28",
        "upload_time_iso_8601": "2020-04-06T02:16:28.869320Z",
        "url": "https://files.pythonhosted.org/packages/ab/ee/c4604c7149bd32c491aa5e381e5074eced308559aa7866059d3f58b565ca/mpyll-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d8c68d31f058b949072727f50f246e783482c553c5fe3f59c3fa632a86c0ea",
          "md5": "6ce6e6d2d995fbf5451225ae49b22dca",
          "sha256": "ecc62e9da5ec2e54bbefe7892fc1bbc27fb597c67a81a09a1991a4cdf0ab9830"
        },
        "downloads": -1,
        "filename": "mpyll-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ce6e6d2d995fbf5451225ae49b22dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16015,
        "upload_time": "2020-04-06T02:16:30",
        "upload_time_iso_8601": "2020-04-06T02:16:30.676538Z",
        "url": "https://files.pythonhosted.org/packages/28/d8/c68d31f058b949072727f50f246e783482c553c5fe3f59c3fa632a86c0ea/mpyll-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f96ab8aa6bbeb78e9f5d67db43243ee63f9f751b6b68c868330e779b898f3d53",
          "md5": "0a59b5f008f08cbd82df8e8673a77786",
          "sha256": "b289bfbb332c3023fe00a6336a55a6a6d7c2635eda4375a860e42f63ec809dd1"
        },
        "downloads": -1,
        "filename": "mpyll-0.1b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a59b5f008f08cbd82df8e8673a77786",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16417,
        "upload_time": "2020-02-24T03:02:00",
        "upload_time_iso_8601": "2020-02-24T03:02:00.510751Z",
        "url": "https://files.pythonhosted.org/packages/f9/6a/b8aa6bbeb78e9f5d67db43243ee63f9f751b6b68c868330e779b898f3d53/mpyll-0.1b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4beb85c1add3bdc6e447781969a438a2c02bfc7e32427273caa30ada3cc5108c",
          "md5": "15fd12838684cc26af968dbeddd1a8dd",
          "sha256": "ffdf79df14398bd8b579fff7a3046c6faa36a3029dcf8ce859796f1f702b70ce"
        },
        "downloads": -1,
        "filename": "mpyll-0.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "15fd12838684cc26af968dbeddd1a8dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16171,
        "upload_time": "2020-02-24T03:02:02",
        "upload_time_iso_8601": "2020-02-24T03:02:02.183747Z",
        "url": "https://files.pythonhosted.org/packages/4b/eb/85c1add3bdc6e447781969a438a2c02bfc7e32427273caa30ada3cc5108c/mpyll-0.1b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4002219c428b5eb46f0adb4902386753e3924127b6299e05ac61a8ab8b210f77",
          "md5": "312e0b70946b20d8eab14587813f7bfd",
          "sha256": "0e48186a4a84f89f917c2c7c4f099544f713374eb55d05b674e03ac4dbd47145"
        },
        "downloads": -1,
        "filename": "mpyll-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "312e0b70946b20d8eab14587813f7bfd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16217,
        "upload_time": "2020-04-15T02:54:14",
        "upload_time_iso_8601": "2020-04-15T02:54:14.202796Z",
        "url": "https://files.pythonhosted.org/packages/40/02/219c428b5eb46f0adb4902386753e3924127b6299e05ac61a8ab8b210f77/mpyll-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4002219c428b5eb46f0adb4902386753e3924127b6299e05ac61a8ab8b210f77",
        "md5": "312e0b70946b20d8eab14587813f7bfd",
        "sha256": "0e48186a4a84f89f917c2c7c4f099544f713374eb55d05b674e03ac4dbd47145"
      },
      "downloads": -1,
      "filename": "mpyll-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "312e0b70946b20d8eab14587813f7bfd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16217,
      "upload_time": "2020-04-15T02:54:14",
      "upload_time_iso_8601": "2020-04-15T02:54:14.202796Z",
      "url": "https://files.pythonhosted.org/packages/40/02/219c428b5eb46f0adb4902386753e3924127b6299e05ac61a8ab8b210f77/mpyll-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}