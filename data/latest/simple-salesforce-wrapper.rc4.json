{
  "info": {
    "author": "Iqbal Talaat",
    "author_email": "iqbaltalaat@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "*************************\nSimple Salesforce Wrapper\n*************************\n\nSimple Salesforce is a basic Salesforce.com REST API client built for Python 2.6, 2.7, 3.3 and 3.4. The goal is to provide a very low-level interface to the REST Resource and APEX API, returning a dictionary of the API JSON response.\n\nSimple Salesforce wrapper is a small wrapper, that does not do much except adds reconnection upon session expiry and handles the SOAP call for converting a Lead to a Contact\n\nYou can find out more regarding the format of the results in the `Official Salesforce.com REST API Documentation`_\n\n.. _Official Salesforce.com REST API Documentation: http://www.salesforce.com/us/developer/docs/api_rest/index.htm\n\n99% of the Documentation is plagiarized from simple-salesforce. This module does not do much, it just serves me well.\nSimple Salesforce is available here: https://github.com/simple-salesforce/simple-salesforce\n\nSpecial thanks to Pavol Bujna to help make this work after 4 years of inactivity :-)\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip3 install simple_salesforce_wrapper\n\nExamples\n--------------------------\nThere are two ways to gain access to Salesforce\n\nThe first is to simply pass the domain of your Salesforce instance and an access token straight to ``Salesforce()``\n\nFor example:\n\n.. code-block:: python\n\n    from simple_salesforce import Salesforce\n    sf = Salesforce(instance='na1.salesforce.com', session_id='')\n\nIf you have the full URL of your instance (perhaps including the schema, as is included in the OAuth2 request process), you can pass that in instead using ``instance_url``:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(instance_url='https://na1.salesforce.com', session_id='')\n\nThere are also three means of authentication, one that uses username, password and security token; one that uses IP filtering, username, password  and organizationId; and the other that uses a private key to sign a JWT.\n\nTo login using the security token method, simply include the Salesforce method and pass in your Salesforce username, password and token (this is usually provided when you change your password):\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(username='myemail@example.com', password='password', security_token='token')\n\nTo login using IP-whitelist Organization ID method, simply use your Salesforce username, password and organizationId:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(password='password', username='myemail@example.com', organizationId='OrgId')\n\nTo login using the JWT method, use your Salesforce username, consumer key from your app, and private key:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(username='myemail@example.com', consumer_key='XYZ', privatekey_file='filename.key')\n\nIf you'd like to enter a sandbox, simply add ``domain='test'`` to your ``Salesforce()`` call.\n\nFor example:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', domain='test')\n\nNote that specifying if you want to use a domain is only necessary if you are using the built-in username/password/security token authentication and is used exclusively during the authentication step.\n\nIf you'd like to keep track where your API calls are coming from, simply add ``client_id='My App'`` to your ``Salesforce()`` call.\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import Salesforce\n    sf = Salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', client_id='My App', domain='test')\n\nIf you view the API calls in your Salesforce instance by Client Id it will be prefixed with ``RestForce/``, for example ``RestForce/My App``.\n\nWhen instantiating a `Salesforce` object, it's also possible to include an\ninstance of `requests.Session`. This is to allow for specialized\nsession handling not otherwise exposed by simple_salesforce.\n\nFor example:\n\n.. code-block:: python\n\n   from simple_salesforce_wrapper import Salesforce\n   import requests\n\n   session = requests.Session()\n   # manipulate the session instance (optional)\n   sf = Salesforce(\n      username='user@example.com', password='password', organizationId='OrgId',\n      session=session)\n\nRecord Management\n--------------------------\n\nTo create a new 'Contact' in Salesforce:\n\n.. code-block:: python\n\n    sf.Contact.create({'LastName':'Smith','Email':'example@example.com'})\n\nThis will return a dictionary such as ``{u'errors': [], u'id': u'003e0000003GuNXAA0', u'success': True}``\n\nTo get a dictionary with all the information regarding that record, use:\n\n.. code-block:: python\n\n    contact = sf.Contact.get('003e0000003GuNXAA0')\n\nTo get a dictionary with all the information regarding that record, using a **custom** field that was defined as External ID:\n\n.. code-block:: python\n\n    contact = sf.Contact.get_by_custom_id('My_Custom_ID__c', '22')\n\nTo change that contact's last name from 'Smith' to 'Jones' and add a first name of 'John' use:\n\n.. code-block:: python\n\n    sf.Contact.update('003e0000003GuNXAA0',{'LastName': 'Jones', 'FirstName': 'John'})\n\nTo delete the contact:\n\n.. code-block:: python\n\n    sf.Contact.delete('003e0000003GuNXAA0')\n\nTo retrieve a list of Contact records deleted over the past 10 days (datetimes are required to be in UTC):\n\n.. code-block:: python\n\n    import pytz\n    import datetime\n    end = datetime.datetime.now(pytz.UTC)  # we need to use UTC as salesforce API requires this!\n    sf.Contact.deleted(end - datetime.timedelta(days=10), end)\n\nTo retrieve a list of Contact records updated over the past 10 days (datetimes are required to be in UTC):\n\n.. code-block:: python\n\n    import pytz\n    import datetime\n    end = datetime.datetime.now(pytz.UTC) # we need to use UTC as salesforce API requires this\n    sf.Contact.updated(end - datetime.timedelta(days=10), end)\n\nNote that Update, Delete and Upsert actions return the associated `Salesforce HTTP Status Code`_\n\nUse the same format to create any record, including 'Account', 'Opportunity', and 'Lead'.\nMake sure to have all the required fields for any entry. The `Salesforce API`_ has all objects found under 'Reference -> Standard Objects' and the required fields can be found there.\n\n.. _Salesforce HTTP Status Code: http://www.salesforce.com/us/developer/docs/api_rest/Content/errorcodes.htm\n.. _Salesforce API: https://www.salesforce.com/developer/docs/api/\n\nQueries\n--------------------------\n\nIt's also possible to write select queries in Salesforce Object Query Language (SOQL) and search queries in Salesforce Object Search Language (SOSL).\n\nSOQL queries are done via:\n\n.. code-block:: python\n\n    sf.query(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\n\nIf, due to an especially large result, Salesforce adds a ``nextRecordsUrl`` to your query result, such as ``\"nextRecordsUrl\" : \"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\"``, you can pull the additional results with either the ID or the full URL (if using the full URL, you must pass 'True' as your second argument)\n\n.. code-block:: python\n\n    sf.query_more(\"01gD0000002HU6KIAW-2000\")\n    sf.query_more(\"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\", True)\n\nAs a convenience, to retrieve all of the results in a single local method call use\n\n.. code-block:: python\n\n    sf.query_all(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\n\nWhile ``query_all`` materializes the whole result into a Python list, ``query_all_iter`` returns an iterator, which allows you to lazily process each element separately\n\n.. code-block:: python\n\n    data = sf.query_all_iter(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\n    for row in data:\n      process(row)\n\nValues used in SOQL queries can be quoted and escaped using ``format_soql``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE LastName = {}\", \"Jones\"))\n    sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE LastName = {last_name}\", last_name=\"Jones\"))\n    sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE LastName IN {names}\", names=[\"Smith\", \"Jones\"]))\n\nTo skip quoting and escaping for one value while still using the format string, use ``:literal``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE Income > {:literal}\", \"USD100\"))\n\nTo escape a substring used in a LIKE expression while being able to use % around it, use ``:like``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE Name LIKE '{:like}%'\", \"Jones\"))\n\nSOSL queries are done via:\n\n.. code-block:: python\n\n    sf.search(\"FIND {Jones}\")\n\nThere is also 'Quick Search', which inserts your query inside the {} in the SOSL syntax. Be careful, there is no escaping!\n\n.. code-block:: python\n\n    sf.quick_search(\"Jones\")\n\nSearch and Quick Search return ``None`` if there are no records, otherwise they return a dictionary of search results.\n\nMore details about syntax is available on the `Salesforce Query Language Documentation Developer Website`_\n\n.. _Salesforce Query Language Documentation Developer Website: http://www.salesforce.com/us/developer/docs/soql_sosl/index.htm\n\nLead Conversion\n---------------\n\n.. code-block:: python\n\n    (convert_success, convert_response) = sf.convert_lead(lead_id=lead_sfid, account_id=account_sfid)\n\nConvert Lead returns a tuple containing a boolean status and a convert_response.\nIf convert_success is True then so is convert_response is the contact ID\nIf convert_success is False then so is convert_response is the error code e.g. CANNOT_UPDATE_CONVERTED_LEAD\n\nOther Options\n--------------------------\n\nTo insert or update (upsert) a record using an external ID, use:\n\n.. code-block:: python\n\n    sf.Contact.upsert('customExtIdField__c/11999',{'LastName': 'Smith','Email': 'smith@example.com'})\n\nTo format an external ID that could contain non-URL-safe characters, use:\n\n.. code-block:: python\n\n    external_id = format_external_id('customExtIdField__c', 'this/that & the other')\n\nTo retrieve basic metadata use:\n\n.. code-block:: python\n\n    sf.Contact.metadata()\n\nTo retrieve a description of the object, use:\n\n.. code-block:: python\n\n    sf.Contact.describe()\n\nTo retrieve a description of the record layout of an object by its record layout unique id, use:\n\n.. code-block:: python\n\n    sf.Contact.describe_layout('39wmxcw9r23r492')\n\nTo retrieve a list of top level description of instance metadata, user:\n\n.. code-block:: python\n\n    sf.describe()\n\n    for x in sf.describe()[\"sobjects\"]:\n      print x[\"label\"]\n\n\nUsing Bulk\n--------------------------\n\nYou can use this library to access Bulk API functions. The data element can be a list of records of any size and by default batch sizes are 10,000 records and run in parrallel concurrency mode. To set the batch size for insert, upsert, delete, hard_delete, and update use the batch_size argument. To set the concurrency mode for the salesforce job the use_serial argument can be set to use_serial=True.\n\nCreate new records:\n\n.. code-block:: python\n\n    data = [\n          {'LastName':'Smith','Email':'example@example.com'},\n          {'LastName':'Jones','Email':'test@test.com'}\n        ]\n\n    sf.bulk.Contact.insert(data,batch_size=10000,use_serial=True)\n\nUpdate existing records:\n\n.. code-block:: python\n\n    data = [\n          {'Id': '0000000000AAAAA', 'Email': 'examplenew@example.com'},\n          {'Id': '0000000000BBBBB', 'Email': 'testnew@test.com'}\n        ]\n\n    sf.bulk.Contact.update(data,batch_size=10000,use_serial=True)\n\nUpsert records:\n\n.. code-block:: python\n\n    data = [\n          {'Id': '0000000000AAAAA', 'Email': 'examplenew2@example.com'},\n          {'Email': 'foo@foo.com'}\n        ]\n\n    sf.bulk.Contact.upsert(data, 'Id', batch_size=10000, use_serial=True)\n\n\nQuery records:\n\n.. code-block:: python\n\n    query = 'SELECT Id, Name FROM Account LIMIT 10'\n\n    sf.bulk.Account.query(query)\n\nTo retrieve large amounts of data, use\n\n.. code-block:: python\n\n    query = 'SELECT Id, Name FROM Account'\n\n    # generator on the results page\n    fetch_results = sf.bulk.Account.query(query, lazy_operation=True)\n\n    # the generator provides the list of results for every call to next()\n    all_results = []\n    for list_results in fetch_results:\n      all_results.extend(list_results)\n\nQuery all records:\n\nQueryAll will return records that have been deleted because of a merge or delete. QueryAll will also return information about archived Task and Event records.\n\n.. code-block:: python\n\n    query = 'SELECT Id, Name FROM Account LIMIT 10'\n\n    sf.bulk.Account.query_all(query)\n\nTo retrieve large amounts of data, use\n\n.. code-block:: python\n\n    query = 'SELECT Id, Name FROM Account'\n\n    # generator on the results page\n    fetch_results = sf.bulk.Account.query_all(query, lazy_operation=True)\n\n    # the generator provides the list of results for every call to next()\n    all_results = []\n    for list_results in fetch_results:\n      all_results.extend(list_results)\n\nDelete records (soft deletion):\n\n.. code-block:: python\n\n    data = [{'Id': '0000000000AAAAA'}]\n\n    sf.bulk.Contact.delete(data,batch_size=10000,use_serial=True)\n\nHard deletion:\n\n.. code-block:: python\n\n    data = [{'Id': '0000000000BBBBB'}]\n\n    sf.bulk.Contact.hard_delete(data,batch_size=10000,use_serial=True)\n\n\nUsing Apex\n--------------------------\n\nYou can also use this library to call custom Apex methods:\n\n.. code-block:: python\n\n    payload = {\n      \"activity\": [\n        {\"user\": \"12345\", \"action\": \"update page\", \"time\": \"2014-04-21T13:00:15Z\"}\n      ]\n    }\n    result = sf.apexecute('User/Activity', method='POST', data=payload)\n\nThis would call the endpoint ``https://<instance>.salesforce.com/services/apexrest/User/Activity`` with ``data=`` as\nthe body content encoded with ``json.dumps``\n\nYou can read more about Apex on the `Force.com Apex Code Developer's Guide`_\n\n.. _Force.com Apex Code Developer's Guide: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_dev_guide.htm\n\nAdditional Features\n--------------------------\n\nThere are a few helper classes that are used internally and available to you.\n\nIncluded in them are ``SalesforceLogin``, which takes in a username, password, security token, optional version and optional domain and returns a tuple of ``(session_id, sf_instance)`` where `session_id` is the session ID to use for authentication to Salesforce and ``sf_instance`` is the domain of the instance of Salesforce to use for the session.\n\nFor example, to use SalesforceLogin for a sandbox account you'd use:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import SalesforceLogin\n    session_id, instance = SalesforceLogin(\n        username='myemail@example.com.sandbox',\n        password='password',\n        security_token='token',\n        domain='test')\n\nSimply leave off the final domain if you do not wish to use a sandbox.\n\nAlso exposed is the ``SFType`` class, which is used internally by the ``__getattr__()`` method in the ``Salesforce()`` class and represents a specific SObject type. ``SFType`` requires ``object_name`` (i.e. ``Contact``), ``session_id`` (an authentication ID), ``sf_instance`` (hostname of your Salesforce instance), and an optional ``sf_version``\n\nTo add a Contact using the default version of the API you'd use:\n\n.. code-block:: python\n\n    from simple_salesforce_wrapper import SFType\n    contact = SFType('Contact','sesssionid','na1.salesforce.com')\n    contact.create({'LastName':'Smith','Email':'example@example.com'})\n\nTo use a proxy server between your client and the SalesForce endpoint, use the proxies argument when creating SalesForce object.\nThe proxy argument is the same as what requests uses, a map of scheme to proxy URL:\n\n.. code-block:: python\n\n    proxies = {\n      \"http\": \"http://10.10.1.10:3128\",\n      \"https\": \"http://10.10.1.10:1080\",\n    }\n    SalesForce(instance='na1.salesforce.com', session_id='', proxies=proxies)\n\nAll results are returned as JSON converted OrderedDict to preserve order of keys from REST responses.\n\nHelpful Datetime Resources\n--------------------------\nA list of helpful resources when working with datetime/dates from Salesforce\n\nConvert SFDC Datetime to Datetime or Date object\n.. code-block:: python\n\n    import datetime\n    # Formatting to SFDC datetime\n    formatted_datetime =  datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%f%z\")\n\n    #Formatting to SFDC date\n    formatted_date = datetime.strptime(x, \"%Y-%m-%d\")\n\nHelpful Pandas Resources\n--------------------------\nA list of helpful resources when working with Pandas and simple-salesforce\n\nGenerate list for SFDC Query \"IN\" operations from a Pandas Dataframe\n\n.. code-block:: python\n\n import pandas as pd\n\n df = pd.DataFrame([{'Id':1},{'Id':2},{'Id':3}])\n    def dataframe_to_sfdc_list(df,column):\n      df_list = df[column].unique()\n      df_list = [str(x) for x in df_list]\n      df_list = ','.join(\"'\"+item+\"'\" for item in df_list)\n      return df_list\n\n   sf.query(format_soql(\"SELECT Id, Email FROM Contact WHERE Id IN ({})\", dataframe_to_sfdc_list(df,column)))\n\nGenerate Pandas Dataframe from SFDC API Query (ex.query,query_all)\n\n.. code-block:: python\n\n   import pandas as pd\n\n   sf.query(\"SELECT Id, Email FROM Contact\")\n\n   df = pd.DataFrame(data['records']).drop(['attributes'],axis=1)\n\nGenerate Pandas Dataframe from SFDC Bulk API Query (ex.bulk.Account.query)\n\n.. code-block:: python\n\n   import pandas as pd\n\n   sf.bulk.Account.query(\"SELECT Id, Email FROM Contact\")\n   df = pd.DataFrame.from_dict(data,orient='columns').drop('attributes',axis=1)\n\nLicense\n--------------------------\n\nThis package is released under an open source Apache 2.0 license like https://github.com/simple-salesforce/simple-salesforce\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/afrobeard/simple-salesforce-wrapper",
    "keywords": "python salesforce salesforce.com",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-salesforce-wrapper",
    "package_url": "https://pypi.org/project/simple-salesforce-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/simple-salesforce-wrapper/",
    "project_urls": {
      "Homepage": "https://github.com/afrobeard/simple-salesforce-wrapper"
    },
    "release_url": "https://pypi.org/project/simple-salesforce-wrapper/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple Salesforce is a basic Salesforce.com REST API client. The goal is to provide a very low-level interface to the API, returning an ordered dictionary of the API JSON response.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11025744,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6426072e55431118f9b5ef24347c9fc0a1bf515989eee9d4e646a12ee0335fc1",
          "md5": "4c90fbd3b94b089b48aaa52e22bd9b0f",
          "sha256": "428abad44d115e489bdc254592e6506886feae2972f61a5a75cf905980177adf"
        },
        "downloads": -1,
        "filename": "simple-salesforce-wrapper-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c90fbd3b94b089b48aaa52e22bd9b0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10087,
        "upload_time": "2017-08-18T04:44:10",
        "upload_time_iso_8601": "2017-08-18T04:44:10.361887Z",
        "url": "https://files.pythonhosted.org/packages/64/26/072e55431118f9b5ef24347c9fc0a1bf515989eee9d4e646a12ee0335fc1/simple-salesforce-wrapper-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0687ade896b919d7cc70f9d28882e6392445f700e122a38b2f27f125e94a0474",
          "md5": "0548de31f113d68c6480bf1e8afa67af",
          "sha256": "b6bdca5c700eff728921d93abd3b58651ba5e9ebdd62a05da0d0033341bfad33"
        },
        "downloads": -1,
        "filename": "simple_salesforce_wrapper-0.3.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "0548de31f113d68c6480bf1e8afa67af",
        "packagetype": "bdist_egg",
        "python_version": "0.3.0",
        "requires_python": null,
        "size": 22104,
        "upload_time": "2021-07-18T01:54:08",
        "upload_time_iso_8601": "2021-07-18T01:54:08.490048Z",
        "url": "https://files.pythonhosted.org/packages/06/87/ade896b919d7cc70f9d28882e6392445f700e122a38b2f27f125e94a0474/simple_salesforce_wrapper-0.3.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41db449523b6dbd4de3f1245cddb3efbc82a966da515961e2edd9d82982724ce",
          "md5": "6c5a7614ce7ed19d8b490e4024061842",
          "sha256": "2f8e46cc9e5cdfd047fe2de2b8476d5f4fb524d8f9f7eb2ca21332b7bfa93034"
        },
        "downloads": -1,
        "filename": "simple-salesforce-wrapper-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c5a7614ce7ed19d8b490e4024061842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15913,
        "upload_time": "2021-07-18T01:54:06",
        "upload_time_iso_8601": "2021-07-18T01:54:06.217544Z",
        "url": "https://files.pythonhosted.org/packages/41/db/449523b6dbd4de3f1245cddb3efbc82a966da515961e2edd9d82982724ce/simple-salesforce-wrapper-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3017e9313d682fac4c66f633941d32b6b082ca34b4a66a61588eead4f4dcd885",
          "md5": "e45754be88d1a0948157b4d78f0716d0",
          "sha256": "cfdc4933d744fe14eed781fb26885a4e3a0a1500b4eb7aea47796b7dc70d8738"
        },
        "downloads": -1,
        "filename": "simple-salesforce-wrapper-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e45754be88d1a0948157b4d78f0716d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15836,
        "upload_time": "2021-07-25T10:09:24",
        "upload_time_iso_8601": "2021-07-25T10:09:24.803408Z",
        "url": "https://files.pythonhosted.org/packages/30/17/e9313d682fac4c66f633941d32b6b082ca34b4a66a61588eead4f4dcd885/simple-salesforce-wrapper-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a89825e84f68dea56a14909192bc942c22a7e445769fd5cc11891aaaf025dc8",
          "md5": "12df69a294a9f9fcc7841a253543e5e9",
          "sha256": "93c463dc4616ebe19f4e0853964c1d6cc0b1c270a45ce6c59427b400692de814"
        },
        "downloads": -1,
        "filename": "simple-salesforce-wrapper-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "12df69a294a9f9fcc7841a253543e5e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15937,
        "upload_time": "2021-07-28T10:00:13",
        "upload_time_iso_8601": "2021-07-28T10:00:13.274791Z",
        "url": "https://files.pythonhosted.org/packages/9a/89/825e84f68dea56a14909192bc942c22a7e445769fd5cc11891aaaf025dc8/simple-salesforce-wrapper-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a89825e84f68dea56a14909192bc942c22a7e445769fd5cc11891aaaf025dc8",
        "md5": "12df69a294a9f9fcc7841a253543e5e9",
        "sha256": "93c463dc4616ebe19f4e0853964c1d6cc0b1c270a45ce6c59427b400692de814"
      },
      "downloads": -1,
      "filename": "simple-salesforce-wrapper-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "12df69a294a9f9fcc7841a253543e5e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15937,
      "upload_time": "2021-07-28T10:00:13",
      "upload_time_iso_8601": "2021-07-28T10:00:13.274791Z",
      "url": "https://files.pythonhosted.org/packages/9a/89/825e84f68dea56a14909192bc942c22a7e445769fd5cc11891aaaf025dc8/simple-salesforce-wrapper-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}