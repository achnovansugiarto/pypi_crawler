{
  "info": {
    "author": "Filipi N. Silva",
    "author_email": "filipi@iu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Robustness Modularity\nSmall utility to calculate the robustness modularity, information modularity\nand modularity difference.\n\n## License\nThe software is distributed under the [MIT license](LICENSE.md).\n  \n## Authors\n  * Filipi N. Silva <filsilva@iu.edu>\n  * Santo Fortunato <santo@iu.edu>\n\n## Dependencies\nRobustness Modularity requires the following dependencies:\n  \n  * [Python 3.6+](https://www.python.org/downloads/)\n  * [Numpy](http://www.numpy.org/)\n  * [graph-tool](https://graph-tool.skewed.de)\n  * [louvain](https://pypi.org/project/louvain/)\n  * [python-igraph](https://igraph.org/python/)\n\nExcept for `graph-tool` all the other packages can be installed using pip:\n```bash\npip install -r requirements.txt\n```\n\nTo install `graph-tool` follow the instructions in the [graph-tool documentation](https://git.skewed.de/count0/graph-tool/-/wikis/installation-instructions).\n\nWe recommend to install it using [conda](https://conda.io/):\n```bash\nconda install -c conda-forge graph-tool\n```\n\n## Installation\nAfter installing `graph-tool` dependency, the tool can be installed using pip:\n\n```bash\npip install RModularity\n```\n\nor from source:\n```bash\npip git+https://github.com/filipinascimento/RModularity.git\n```\n\n## Usage\nWe provide three networks for testing in the `SampleNetworks` folder.\nA full usage example can be found in `example.py`.\n\nFirst import the `RModularity` module:\n```python\nimport RModularity\n```\n\nFor this example we will be using `igraph` to load the sample networks and\n`pathlib` to deal with the paths:\n```python\nimport igraph as ig\nfrom pathlib import Path\n```\n\nWhen multiprocessing is enabled, the all the calculations need to be done\nin the main process, thus use `if __name__ == '__main__':`. Let's load a\nnetwork from the `SampleNetworks` folder and define some paths:\n```python\nif __name__ == '__main__':\n    networkName = \"road-euroroad\"\n    # networkName = \"LFR_mu0.1\"\n    # networkName = \"LFR_mu1.0\"\n    \n    outputSuffix = \"\"\n    figurePath = Path(\"Figures\")\n    figurePath.mkdir(parents=True, exist_ok=True)\n\n    g = ig.Graph.Read_GML(str(Path(\"SampleNetworks\")/(\"%s.gml\" % networkName)))\n```\n\nYou can calculate the approximated robustness modularity using the `RModularityFast` function, which implements the fast Monte-Carlo algorithm.\n```python\n    Q_rA = RModularity.RModularityFast(\n        g.vcount(), # Number of nodes\n        g.get_edgelist(), # Edges list\n        g.is_directed(), # Directed or not\n        )\n    print(\"Q_rA = \", Q_rA)\n```\n\nYou can use the `RModularity` function to calculate the robustness modularity without approximations:\n```python\n    Q_r, probabilities, TPRCurve, \\\n     DLCurvesTrivial, DLCurvesDetected = RModularity.RModularity(\n         g.vcount(), # Number of nodes\n         g.get_edgelist(), # Edges list\n         g.is_directed(), # Directed or not\n         outputCurves=True,\n         )\n\n    print(\"Q_r = \", Q_r)\n```\nBy setting `outputCurves` to `True`, the Trivial Partition Ratio (TPR) and the description lengths of the detected and trivial partitions will be returned.\n\nModularity difference (Q_diff) can be calculated using the `modularityDifference` function:\n```python\n    Q_diff = RModularity.modularityDifference(\n        g.vcount(),\n        g.get_edgelist(),\n        g.is_directed()\n    )\n```\n\nInformation modularity can be calculated using the `informationModularity`\nfunction:\n```python\n    Q_DL = RModularity.informationModularity(\n        g.vcount(),\n        g.get_edgelist(),\n        g.is_directed()\n    )\n    print(\"Q_DL = \", Q_DL)\n```\n\nHere we also illustrate how to generate the TPR and Description lengths plots.\nFirst let's import a few extra packages\n```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpl_patches\n```\n\nLet's calculate average and std for the curves:\n```python\n    avgDLCurvesTrivial = np.mean(DLCurvesTrivial, axis=1)\n    avgDLCurvesDetected = np.mean(DLCurvesDetected, axis=1)\n    stdDLCurvesTrivial = np.std(DLCurvesTrivial, axis=1)\n    stdDLCurvesDetected = np.std(DLCurvesDetected, axis=1)\n\n    diffDLCurves = (DLCurvesTrivial-DLCurvesDetected) / DLCurvesTrivial\n    avgDiffDLCurves = np.mean(diffDLCurves, axis=1)\n    stdDiffDLCurves = np.std(diffDLCurves, axis=1)\n```\n\nNow let's plot the TPR curve:\n```python\n    fig = plt.figure(figsize=(3*1.61803398875, 3))\n    ax = plt.axes((0.2, 0.2, 0.70, 0.70), facecolor='w')\n    nodeCount = g.vcount()\n    averageDegree = np.mean(g.degree())\n    TPRArea = Q_r\n    trivialRatios = TPRCurve\n    ax.plot(probabilities, trivialRatios, color=\"#262626\", lw=2.0)\n    ax.fill_between(probabilities, trivialRatios, 1, color=\"#E8EAEA\")\n    ax.set_xlabel(\"$p$\")\n    ax.set_ylabel(\"TPR\")\n    ax.set_title(networkName)\n    ax.set_xlim(-0.00, 1.02)\n    ax.set_ylim(-0.020, 1.020)\n    handles = [mpl_patches.Rectangle((0, 0), 1, 1, fc=\"white\", ec=\"white\",\n                                     lw=0, alpha=0)] * 3\n    labels = []\n    labels.append(\"$N$ = %d\" % nodeCount)\n    labels.append(\"$\\\\langle k\\\\rangle$ = %.2f\" % averageDegree)\n    labels.append(\"$Q_{r}$ = %.2f\" % TPRArea)\n\n    ax.legend(handles, labels, loc='best',\n              fancybox=False, framealpha=0,\n              handlelength=0, handletextpad=0)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    for axis in ['bottom', 'left']:\n        ax.spines[axis].set_linewidth(1.5)\n    ax.tick_params(width=1.5)\n    fig.savefig(figurePath/(\"TPR_%s%s.pdf\" % (networkName, outputSuffix)))\n    plt.close(fig)\n```\n\nNow let's plot the description length curve:\n```python\n    fig = plt.figure(figsize=(3*1.61803398875, 3))\n    ax = plt.axes((0.2, 0.2, 0.70, 0.70), facecolor='w')\n    ax.plot(probabilities, avgDLCurvesDetected, lw=2.0, label=\"Detected\")\n    ax.fill_between(probabilities, avgDLCurvesDetected-stdDLCurvesDetected,\n                    avgDLCurvesDetected+stdDLCurvesDetected, alpha=0.2)\n\n    ax.plot(probabilities, avgDLCurvesTrivial, lw=2.0, label=\"Trivial\")\n    ax.fill_between(probabilities, avgDLCurvesTrivial-stdDLCurvesTrivial,\n                    avgDLCurvesTrivial+stdDLCurvesTrivial, alpha=0.2)\n\n    ax.set_xlabel(\"$p$\")\n    ax.set_ylabel(\"DL\")\n    ax.set_title(networkName)\n    ax.set_xlim(-0.00, 1.02)\n\n    ax.legend()\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    for axis in ['bottom', 'left']:\n        ax.spines[axis].set_linewidth(1.5)\n    ax.tick_params(width=1.5)\n    fig.savefig(figurePath/(\"DL_%s%s.pdf\" % (networkName, outputSuffix)))\n    plt.close(fig)\n```\n\nAnd finally, let's plot the information modularity along `p`:\n```python\n    fig = plt.figure(figsize=(3*1.61803398875, 3))\n    ax = plt.axes((0.2, 0.2, 0.70, 0.70), facecolor='w')\n    ax.plot(probabilities, avgDiffDLCurves, lw=2.0, label=\"Detected\")\n    ax.fill_between(probabilities, avgDiffDLCurves-stdDiffDLCurves,\n                    avgDiffDLCurves+stdDiffDLCurves, alpha=0.2)\n\n    ax.set_xlabel(\"$p$\")\n    ax.set_ylabel(\"$Q_\\mathrm{DL}$\")\n    ax.set_title(networkName)\n    ax.set_xlim(-0.00, 1.02)\n\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    for axis in ['bottom', 'left']:\n        ax.spines[axis].set_linewidth(1.5)\n    ax.tick_params(width=1.5)\n    fig.savefig(figurePath/(\"DLDiff_%s%s.pdf\" % (networkName, outputSuffix)))\n    plt.close(fig)\n```\n\nPlease refer to the next section for more details on how to use this library.\n\n\n## Full API documentation\n\n### <kbd>function</kbd> `RModularityFast`\n```python\nRModularity(\n    nodeCount,\n    edges,\n    directed=False,\n    perturbationCount=48,\n    detectionTrials=1,\n    showProgress=True,\n    useMultiprocessing=True,\n    useCoarseStep = True,\n    fineError=0.01,\n    coarseError = 0.02,\n    minSimilarTrials=2,\n)\n```\n\nComputes the approximated Robustness Modularity of a network\nusing a Monte-Carlo approach. Note that this approach can not\nprocude the curves of TPR.\n\nParameters \n  * `nodeCount` : `int`  \n    The number of nodes in the network.\n  * `edges` : list of tuples  \n    A list of the edges in the network.\n  * `directed` : `int`, optional  \n    Whether the network is directed or not.\n  * `perturbationCount` : `int`, optional  \n    The number of perturbations to perform.  (defaults to 25)\n  * `detectionTrials` : `int`, optional  \n    The number of times to perform community  detection for each perturbed network. (defaults to 1)\n  * `rewireResolution` : `int`, optional  \n    The number values points for the rewire  probabilities (from 0 to 1) to calculate  the Trivial Partition Ratio (TPR) curves  and Robustness Modularity. (defaults to 51)\n  * `showProgress` : `bool`, optional  \n    Shows a progress bar if enabled.  (defaults to True)\n  * `useMultiprocessing`: `bool`, optional  \n    Uses parallel processing to calculate  Rmodularity.  (defaults to True)\n  * `useCoarseStep`: `bool`, optional\n    Finds the plateal region using a binary search before applying\n    the Monte-Carlo approach. (defaults to True)\n  * `fineError`: `float`, optional\n    Error tolerance for the fine step. (defaults to 0.01)\n  * `coarseError`: `float`, optional\n      Error tolerance for the coarse step. (defaults to 0.02)\n  * `minSimilarTrials`: `int`, optional\n      The minimum number of similar trials to perform before \n      stopping the Monte-Carlo approach.(defaults to 2)\n\nReturns \n  * `float` if `outputCurves` is `False`  \n    The Robustness Modularity of the network.\n\n\n---\n\n### <kbd>function</kbd> `RModularity`\n```python\nRModularity(\n    nodeCount,\n    edges,\n    directed=False,\n    perturbationCount=25,\n    detectionTrials=1,\n    rewireResolution=51,\n    outputCurves=False,\n    showProgress=True,\n    useMultiprocessing=True\n)\n```\n\nComputes the Robustness Modularity of a network. \n\nParameters \n  * `nodeCount` : `int`  \n    The number of nodes in the network.\n  * `edges` : list of tuples  \n    A list of the edges in the network.\n  * `directed` : `int`, optional  \n    Whether the network is directed or not.\n  * `perturbationCount` : `int`, optional  \n    The number of perturbations to perform.  (defaults to 25)\n  * `detectionTrials` : `int`, optional  \n    The number of times to perform community  detection for each perturbed network. (defaults to 1)\n  * `rewireResolution` : `int`, optional  \n    The number values points for the rewire  probabilities (from 0 to 1) to calculate  the Trivial Partition Ratio (TPR) curves  and Robustness Modularity.(defaults to 51)\n  * `outputCurves` : `bool`, optional  \nWhether to save the TPR and DL curves. (defaults to False)\n  * `showProgress` : `bool`, optional  \nShows a progress bar if enabled.  (defaults to True)\n  * `useMultiprocessing`: `bool`, optional  \n    Uses parallel processing to calculate  Rmodularity.  (defaults to True)\n\nReturns \n  * `float` if `outputCurves` is `False`  \n    The Robustness Modularity of the network.\n  * `(float, np.array dim=1, np.array dim=1, np.array dim=2, np.array dim=2)` if `outputCurves` is `True`  \n    Returns a tuple of 4 values containing the Robustness Modularity, the rewire probabilities, the TPR curves, and the Description lenghts for the detected and trivial partitions. \n\n\n---\n\n### <kbd>function</kbd> `modularityDifference`\n\n```python\nmodularityDifference(\n    nodeCount,\n    edges,\n    directed=False,\n    detectionTrials=100,\n    nullmodelCount=100,\n    detectionTrialsNullModel=10,\n    showProgress=True,\n    useMultiprocessing=True\n)\n```\n\nComputes the Modularity Difference of a network. \n\nParameters \n  * `nodeCount` : `int`  \n    The number of nodes in the network.\n  * `edges` : list of tuples  \n    A list of the edges in the network.\n  * `directed` : `int`, optional  \n    Whether the network is directed or not.\n  * `detectionTrials` : `int`, optional  \n    The number of times to perform community detection for the input network  (defaults to 100)\n  * `nullmodelCount` : `int`, optional  \n    The number of realizations of the null-model (configuration model) used to calculate the null-model modularity. (defaults to 100)\n  * `detectionTrialsNullModel` : `int`, optional  \n    The number of times to perform community detection for each perturbed network  (defaults to 10)\n  * `showProgress` : `bool`, optional  \nShows a progress bar if enabled.  (defaults to True)\n  * `useMultiprocessing`: `bool`, optional  \n    Uses parallel processing to calculate  Rmodularity.  (defaults to True)\n\nReturns \n  * `float`  \n    The Modularity Difference of the network.\n    \n\n### <kbd>function</kbd> `informationModularity`\n\n```python\ninformationModularity(nodeCount, edges, directed=False)\n```\n\nComputes the Information Modularity of a network. \n\nParameters \n  * `nodeCount` : `int`  \n    The number of nodes in the network.\n  * `edges` : list of tuples  \n    A list of the edges in the network.\n  * `directed` : `int`, optional  \n    Whether the network is directed or not.\n\nReturns \n  * `float`  \n    The Information Modularity of the network.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/filipinascimento/RModularity",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RModularity",
    "package_url": "https://pypi.org/project/RModularity/",
    "platform": "",
    "project_url": "https://pypi.org/project/RModularity/",
    "project_urls": {
      "Homepage": "https://github.com/filipinascimento/RModularity"
    },
    "release_url": "https://pypi.org/project/RModularity/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Python library to calculate Robustness modularity of networks",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14298949,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7cd27460ce0ba662158c285e63f463a697cc180d2393b02df3214bcdf2ad9d0",
          "md5": "3666e64e212416d033a4c4eb0b2946c3",
          "sha256": "c2acb9ad3037c1b443f727a708ff723ba70614b94f3f7207250f987054e67224"
        },
        "downloads": -1,
        "filename": "RModularity-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3666e64e212416d033a4c4eb0b2946c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22685,
        "upload_time": "2021-10-03T17:10:49",
        "upload_time_iso_8601": "2021-10-03T17:10:49.125594Z",
        "url": "https://files.pythonhosted.org/packages/c7/cd/27460ce0ba662158c285e63f463a697cc180d2393b02df3214bcdf2ad9d0/RModularity-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e5139bfc37637f8807faea74b4c86a481b152d924a67aeb74526b0a91278a92",
          "md5": "ce863e881ca47e1416b1d4cd61cf2928",
          "sha256": "d44c7c8da81a4829ce6b44512482e69c4fc01e5de1a6337b2c823f59634ac6f6"
        },
        "downloads": -1,
        "filename": "RModularity-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce863e881ca47e1416b1d4cd61cf2928",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22749,
        "upload_time": "2021-10-04T00:34:04",
        "upload_time_iso_8601": "2021-10-04T00:34:04.023170Z",
        "url": "https://files.pythonhosted.org/packages/6e/51/39bfc37637f8807faea74b4c86a481b152d924a67aeb74526b0a91278a92/RModularity-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a21dee253e35d2c7ed890cfa2176dac759dcfbde7215b91b192506dfd5e7d9",
          "md5": "742f1ab056e3014cf22b162b5e3d57e9",
          "sha256": "fd06a7c08e427b5e4e460e2f73afe5c382ce36f48e36eca0822cab2a1b0ea363"
        },
        "downloads": -1,
        "filename": "RModularity-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "742f1ab056e3014cf22b162b5e3d57e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12205,
        "upload_time": "2022-06-30T18:10:39",
        "upload_time_iso_8601": "2022-06-30T18:10:39.089308Z",
        "url": "https://files.pythonhosted.org/packages/76/a2/1dee253e35d2c7ed890cfa2176dac759dcfbde7215b91b192506dfd5e7d9/RModularity-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8252aa36b1c11e005441ad48184bfce920724165e0434470da42e7d101436e1a",
          "md5": "954fad15e34179f33c69d2b2fa927728",
          "sha256": "0e9630c754dd0cf873004d72567253c3c00b68939e47efa7f71e7e018d2e9089"
        },
        "downloads": -1,
        "filename": "RModularity-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "954fad15e34179f33c69d2b2fa927728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11946,
        "upload_time": "2022-01-31T10:20:52",
        "upload_time_iso_8601": "2022-01-31T10:20:52.342216Z",
        "url": "https://files.pythonhosted.org/packages/82/52/aa36b1c11e005441ad48184bfce920724165e0434470da42e7d101436e1a/RModularity-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8252aa36b1c11e005441ad48184bfce920724165e0434470da42e7d101436e1a",
        "md5": "954fad15e34179f33c69d2b2fa927728",
        "sha256": "0e9630c754dd0cf873004d72567253c3c00b68939e47efa7f71e7e018d2e9089"
      },
      "downloads": -1,
      "filename": "RModularity-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "954fad15e34179f33c69d2b2fa927728",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 11946,
      "upload_time": "2022-01-31T10:20:52",
      "upload_time_iso_8601": "2022-01-31T10:20:52.342216Z",
      "url": "https://files.pythonhosted.org/packages/82/52/aa36b1c11e005441ad48184bfce920724165e0434470da42e7d101436e1a/RModularity-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}