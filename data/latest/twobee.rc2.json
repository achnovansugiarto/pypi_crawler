{
  "info": {
    "author": "Dave Pearson",
    "author_email": "davep@davep.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Terminals",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# twobee\n\n[![PyPI version](https://badge.fury.io/py/twobee.svg)](https://badge.fury.io/py/twobee)\n\n[![View a YouTube video of twobee in action](https://raw.githubusercontent.com/davep/twobee/main/img/twobee.png)](https://www.youtube.com/watch?v=ccrRB4sDixU)\n\n[View the code in action on YouTube](https://www.youtube.com/watch?v=ccrRB4sDixU)\n\n## Introduction\n\n`twobee` is sort of two things rolled into one: it's a Python-based [2bit\nfile](https://genome.ucsc.edu/FAQ/FAQformat.html#format7) reading library,\nwrapped in a [Textual](https://textual.textualize.io/) UI to provide a (for\nnow anyway) very simple viewer. It is, it has to be said, of very little\nutility. I'm mostly writing it as a proof-of concept and as another way to\ntest some of the performance edges and use cases of Textual.\n\nAlso... I wanted a test project to get to know the Textual [line\nAPI](https://textual.textualize.io/guide/widgets/#line-api) and this seemed\nlike a good fit.\n\n## Installing\n\nThe package can be installed with `pip` or related tools, for example:\n\n```sh\n$ pip install twobee\n```\n\nAs well as the library (which I'll give some minimal documentation for below\n-- hopefully more comprehensive documentation will follow eventually), a\ncommand is also installed called `twobee`. This can be used load up and view\nthe contents of a 2bit file.\n\n## It's early days\n\nThis is a very early release of this code, it's still very much a work in\nprogress. This means things may change and break; it's also sitting atop\nTextual which is, of course, still undergoing rapid development. As much as\npossible I'll try and ensure that it's always working with the latest stable\nrelease of Textual.\n\nAlso, because it's early days... while I love the collaborative aspect of\nFOSS, I'm highly unlikely to be accepting any non-trivial PRs at the moment.\nDeveloping this is a learning exercise for me, it's a hobby project, and\nit's also something to help me further test Textual (disclaimer for those\nwho may not have gathered, I am employed by\n[Textualize](https://www.textualize.io/)).\n\nOn the other hand: I'm *very* open to feedback and suggestions so don't\nhesitate to engage with me in Discussions, or if it's a bug,in Issues. I\ncan't and won't promise that I'll take everything on board (see above about\nhobby project, etc), but helpful input should help make this as useful as\npossible in the longer term.\n\n## The library\n\nWhile I've not written this package to provide a 2bit-reading library, I\nwanted to write one anyway (I've written one in [Common\nLisp](https://github.com/davep/org-davep-2bit), and one in [Emacs\nLisp](https://github.com/davep/2bit.el), it felt only right I should write\none in Python too). So, on the off chance someone else may want to mess with\nthis...\n\nThe library is designed so that there will be different ways of accessing a\n2bit file, but for the moment there is just the option to load from a local\nfile. To do this you want a `TwoBitFileReader`:\n\n```python\n>>> from twobee import TwoBitFileReader\n```\n\nthen it can be used to open a file:\n\n```python\n>>> hg38 = TwoBitFileReader( \"hg38.2bit\" )\n```\n\nThe property `sequences` contains all of the sequences names contained in\nthe file, for example:\n\n```python\n>>> [ seq for seq in hg38.sequences if \"_\" not in seq ]\n[\n    'chr1',\n    'chr10',\n    'chr11',\n    'chr12',\n    'chr13',\n    'chr14',\n    'chr15',\n    'chr16',\n    'chr17',\n    'chr18',\n    'chr19',\n    'chr2',\n    'chr20',\n    'chr21',\n    'chr22',\n    'chr3',\n    'chr4',\n    'chr5',\n    'chr6',\n    'chr7',\n    'chr8',\n    'chr9',\n    'chrM',\n    'chrX',\n    'chrY'\n]\n```\n\nThe reader object itself can be used as an iterator too:\n\n```python\n>>> [ seq for seq in hg38 if \"_\" not in seq ]\n[\n    'chr1',\n    'chr10',\n    'chr11',\n    'chr12',\n    'chr13',\n    'chr14',\n    'chr15',\n    'chr16',\n    'chr17',\n    'chr18',\n    'chr19',\n    'chr2',\n    'chr20',\n    'chr21',\n    'chr22',\n    'chr3',\n    'chr4',\n    'chr5',\n    'chr6',\n    'chr7',\n    'chr8',\n    'chr9',\n    'chrM',\n    'chrX',\n    'chrY'\n]\n```\n\nThe reader can then be used like an array to get a particular sequence, for\nexample:\n\n```python\n>>> chrX = hg38[ \"chrX\" ]\n>>> chrX\nTwoBitSequence('chrX', dna_file_location=781826420, dna_size=156040895, len(n_blocks)=34, len(mask_blocks)=189177)\n```\n\nThe `TwoBitSequence` that is returned can then be used in a similar way to\nget a collection of bases. For example:\n\n```python\n>>> chrX[ 10000:10010 ]\nTwoBitBases('chrX:10000..10010', bases='CTAACCCTAA')\n```\n\nThere are a few convenience methods and the like on `TwoBitBases` to make it\neasy to work with, with a bunch more to come as I get time to tinker.\n\n## TODO\n\nLots. Lots and lots. I will be hacking on this more.\n\n[//]: # (README.md ends here)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davep/twobee",
    "keywords": "terminal,library,2bit,dna,bioinformatics,viewer",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "Dave Pearson",
    "maintainer_email": "davep@davep.org",
    "name": "twobee",
    "package_url": "https://pypi.org/project/twobee/",
    "platform": null,
    "project_url": "https://pypi.org/project/twobee/",
    "project_urls": {
      "Discussions": "https://github.com/davep/twobee/discussions",
      "Documentation": "https://github.com/davep/twobee/blob/main/README.md",
      "Homepage": "https://github.com/davep/twobee",
      "Issues": "https://github.com/davep/twobee/issues",
      "Source": "https://github.com/davep/twobee"
    },
    "release_url": "https://pypi.org/project/twobee/0.0.2/",
    "requires_dist": [
      "textual (==0.13.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple 2bit file viewer and reader library, built for and with Textual.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17205505,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92a8c174702a159c553a536b4d6a220cec30fdb46852dcf1fe94040263c15c33",
          "md5": "a9ce2112039d105cf21af5f5828c5f11",
          "sha256": "df212552032929260e347e265cbbf28391a49e4b73f0d544a452e58371fd879b"
        },
        "downloads": -1,
        "filename": "twobee-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9ce2112039d105cf21af5f5828c5f11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16955,
        "upload_time": "2023-03-02T21:45:17",
        "upload_time_iso_8601": "2023-03-02T21:45:17.794958Z",
        "url": "https://files.pythonhosted.org/packages/92/a8/c174702a159c553a536b4d6a220cec30fdb46852dcf1fe94040263c15c33/twobee-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d937077cc137f4da569272a67e8c629b392254077bf469b5585fb48fed8317",
          "md5": "96ec2c44c85ff7bc2d9fe9fbf7f7d904",
          "sha256": "068fe99c13389388da38eb73662a1d4e7f5b9f59453bd9746d69f1cc682e486d"
        },
        "downloads": -1,
        "filename": "twobee-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96ec2c44c85ff7bc2d9fe9fbf7f7d904",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17779,
        "upload_time": "2023-03-08T10:57:30",
        "upload_time_iso_8601": "2023-03-08T10:57:30.655497Z",
        "url": "https://files.pythonhosted.org/packages/b0/d9/37077cc137f4da569272a67e8c629b392254077bf469b5585fb48fed8317/twobee-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d937077cc137f4da569272a67e8c629b392254077bf469b5585fb48fed8317",
        "md5": "96ec2c44c85ff7bc2d9fe9fbf7f7d904",
        "sha256": "068fe99c13389388da38eb73662a1d4e7f5b9f59453bd9746d69f1cc682e486d"
      },
      "downloads": -1,
      "filename": "twobee-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96ec2c44c85ff7bc2d9fe9fbf7f7d904",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17779,
      "upload_time": "2023-03-08T10:57:30",
      "upload_time_iso_8601": "2023-03-08T10:57:30.655497Z",
      "url": "https://files.pythonhosted.org/packages/b0/d9/37077cc137f4da569272a67e8c629b392254077bf469b5585fb48fed8317/twobee-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}