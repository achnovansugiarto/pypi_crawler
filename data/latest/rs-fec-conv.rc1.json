{
  "info": {
    "author": "Benjamin Roepken <broepken57@hotmail.com>",
    "author_email": "Benjamin Roepken <broepken57@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# rs_fec_conv\r\n\r\n[![PyPi](https://img.shields.io/pypi/v/rs_fec_conv.svg?style=flat-square)](https://pypi.org/project/rs_fec_conv/)\r\n[![Docs](https://readthedocs.org/projects/rs_fec_conv/badge/?version=latest)](http://rs_fec_conv.readthedocs.io/en/latest/?badge=latest)\r\n\r\n## Getting Started\r\nThe package rs_fec_conv is a rust binding built with [pyo3](https://github.com/PyO3/pyo3).\r\nrs_fec_conv is intended to be used in parallel with the \r\n[scikit-dsp-comm](https://github.com/mwickert/scikit-dsp-comm) package.\r\nThe rust binding improve the processing time of the conv_encoder and viterbi_decoder algorithms.\r\n\r\n### Rust Install\r\nRust is not needed on the system to execute the binaries since the functions are already pre-compiled.\r\nAlthough, [Rust](https://www.rust-lang.org/tools/install) can be downloaded online or \r\ninstalled on Windows Subsystem for Linux.\r\n\r\n```bash\r\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\r\n```\r\n### Package Requirements\r\nThis package requires Python 3.7.x.\r\n\r\n### rs_fec_conv Install\r\nYou can download the package rs_fec_conv from PyPi [PyPi](https://pypi.org/project/rs_fec_conv/),\r\nor by the command\r\n```bash\r\npip install rs_fec_conv\r\n``` \r\n\r\nNote: The preferred method is to download from PyPi. \r\nIf downloading directly from GitHub you will need to install Rust prior.\r\n\r\n### Results\r\n| BEP Simulation (EbN0=4,100000 bits)  G, depth | Python Time (sec) | Rust Time (sec) | Rust Speed Factor Increase |\r\n| --------------------------------------------- | ----------------- | --------------- | -------------------------- |\r\n| ('111', '101'), 10            | 39.88       | 0.79      | 50.24      |\r\n| ('11111','11011','10101'), 25 | 675.00      | 21.32     | 31.66      |\r\n| ('1111001','1011011'), 25     | 217.02      | 9.27      | 23.41      |\r\n\r\n\r\n## Tutorial\r\n\r\n### Convolutional Encoder\r\nThe function conv_encoder_rs can be implemented\r\n\r\n```bash\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport sk_dsp_comm.rs_fec_conv as rs_fec\r\n\r\n# Generate random data\r\nN = 20\r\nx = randint(0,2,N)\r\n\r\n# Initialize fec_conv object with either G length 2 or 3\r\nG =('111','101')\r\n# G = ('11110111','11011001','10010101')\r\ncc1 = rs_fec.fec_conv(G,10)\r\nstate = '00'\r\n\r\n# Convolutionally Encode Signal\r\ny,state = cc1.conv_encoder(x,state)\r\n\r\n# Plot input signal\r\nsubplot(211)\r\nstem(x)\r\nxlabel('Number of Samples')\r\nylabel('x')\r\ntitle('Input Signal')\r\n\r\n# Plot convolutionally encoded signal\r\nsubplot(212)\r\nstem(y)\r\nxlabel('Number of Samples')\r\nylabel('y')\r\ntitle('Convolutionally Encoded Signal')\r\ntight_layout()\r\nsavefig('conv_enc.png')\r\n```\r\n\r\n![Convolutionally Encoded Signal](https://github.com/grayfox57/rs_fec_conv/blob/master/conv_enc.png)\r\n\r\n### Viterbi Decoder\r\nThe function viterbi_decoder_rs can be implemented by\r\n```bash\r\n# Viterbi decode\r\nz = cc1.viterbi_decoder(y.astype(int), 'hard', 3)\r\n\r\n# Plot input signal\r\nsubplot(211)\r\nstem(x[:11])\r\nxlabel('Number of Samples')\r\nylabel('x')\r\ntitle('Input Signal')\r\nxlim([0,10])\r\n\r\n# Plot viterbi decoded signal\r\nsubplot(212)\r\nstem(z)\r\nxlabel('Number of Samples')\r\nylabel('z')\r\ntitle('Viterbi decoded Signal')\r\nxlim([0,10])\r\ntight_layout()\r\nsavefig('viterbi_dec.png')\r\n```\r\n\r\n![Viterbi Decoded Signal](https://github.com/grayfox57/rs_fec_conv/blob/master/viterbi_dec.png)\r\n\r\nSince there is no channel noise added to the signal the Viterbi decoded signal results\r\nin no bit errors from the original signal.   \r\n\r\n### Channel Simulation\r\nA simulation using AWGN can be done using by integrating with other functions provided \r\nin the scikit-dsp-comm toolbox\r\n```bash\r\n# Soft decision rate 1/2 simulation\r\nN_bits_per_frame = 100000\r\nEbN0 = 4\r\ntotal_bit_errors = 0\r\ntotal_bit_count = 0\r\ncc1 = rs_fec.fec_conv(('11101','10011'),25)\r\n\r\n# Encode with shift register starting state of '0000'\r\nstate = '0000'\r\nwhile total_bit_errors < 100:\r\n\t# Create 100000 random 0/1 bits\r\n\tx = randint(0,2,N_bits_per_frame)\r\n\ty,state = cc1.conv_encoder(x,state)\r\n\r\n\t# Add channel noise to bits, include antipodal level shift to [-1,1]\r\n\t# Channel SNR is 3 dB less for rate 1/2\r\n\tyn_soft = dc.cpx_AWGN(2*y-1,EbN0-3,1) \r\n\tyn_hard = ((np.sign(yn_soft.real)+1)/2).astype(int)\r\n\tz = cc1.viterbi_decoder(yn_hard,'hard')\r\n\r\n\t# Count bit errors\r\n\tbit_count, bit_errors = dc.bit_errors(x,z)\r\n\ttotal_bit_errors += bit_errors\r\n\ttotal_bit_count += bit_count\r\n\tprint('Bits Received = %d, Bit errors = %d, BEP = %1.2e' %\\\r\n\t\t  (total_bit_count, total_bit_errors,\\\r\n\t\t   total_bit_errors/total_bit_count))\r\n\r\nprint('*****************************************************')\r\nprint('Bits Received = %d, Bit errors = %d, BEP = %1.2e' %\\\r\n\t  (total_bit_count, total_bit_errors,\\\r\n\t   total_bit_errors/total_bit_count))\r\n```\r\n   \r\nRate 1/2 Object\r\n\r\nkmax =  0, taumax = 0\r\n\r\nBits Received = 99976, Bit errors = 845, BEP = 8.45e-03\r\n\r\n*****************************************************\r\n\r\nBits Received = 99976, Bit errors = 845, BEP = 8.45e-03",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rs-fec-conv",
    "package_url": "https://pypi.org/project/rs-fec-conv/",
    "platform": "",
    "project_url": "https://pypi.org/project/rs-fec-conv/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/rs-fec-conv/0.4.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Convolutional Encoder and Viterbi Decoder built with Rust bindings for integration with Python",
    "version": "0.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7380291,
  "releases": {
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5cdc2d4c03e56211cb654577b93eda176fbeb671c1ecce3f42950e371c7d03c",
          "md5": "4ee7f1768913209291d5c768a25cafb2",
          "sha256": "ee1e379ee30f4a3e35ea7af031f203daae43d3c47399e9cdb25e8e266fa9c697"
        },
        "downloads": -1,
        "filename": "rs_fec_conv-0.4.5-cp37-cp37m-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4ee7f1768913209291d5c768a25cafb2",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 399783,
        "upload_time": "2020-06-02T17:17:48",
        "upload_time_iso_8601": "2020-06-02T17:17:48.827785Z",
        "url": "https://files.pythonhosted.org/packages/a5/cd/c2d4c03e56211cb654577b93eda176fbeb671c1ecce3f42950e371c7d03c/rs_fec_conv-0.4.5-cp37-cp37m-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abc7a8d181792618ae3073f61c1a5f178722ac22549fda0c4e3c850d4e5f4de8",
          "md5": "38e082f9efb8fdb0fe4713e84676a970",
          "sha256": "992b6dd6ccbafeafd1b5462a42d69df50d1e9d6c31977e7518f835fab128117a"
        },
        "downloads": -1,
        "filename": "rs_fec_conv-0.4.5-cp37-cp37m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "38e082f9efb8fdb0fe4713e84676a970",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 163430,
        "upload_time": "2020-03-30T16:45:46",
        "upload_time_iso_8601": "2020-03-30T16:45:46.483603Z",
        "url": "https://files.pythonhosted.org/packages/ab/c7/a8d181792618ae3073f61c1a5f178722ac22549fda0c4e3c850d4e5f4de8/rs_fec_conv-0.4.5-cp37-cp37m-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26b912a5dc63cada9b23fa3f713e5735701db6efdc94bf8145bfb55b27cb3149",
          "md5": "0860d942a1638e964d4cc05834115470",
          "sha256": "b17da03664597a84b8aea48b4f15baff36316f14358447269d6b5a93f71d2967"
        },
        "downloads": -1,
        "filename": "rs_fec_conv-0.4.5-cp37-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "0860d942a1638e964d4cc05834115470",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 178326,
        "upload_time": "2020-03-28T19:43:31",
        "upload_time_iso_8601": "2020-03-28T19:43:31.101963Z",
        "url": "https://files.pythonhosted.org/packages/26/b9/12a5dc63cada9b23fa3f713e5735701db6efdc94bf8145bfb55b27cb3149/rs_fec_conv-0.4.5-cp37-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5cdc2d4c03e56211cb654577b93eda176fbeb671c1ecce3f42950e371c7d03c",
        "md5": "4ee7f1768913209291d5c768a25cafb2",
        "sha256": "ee1e379ee30f4a3e35ea7af031f203daae43d3c47399e9cdb25e8e266fa9c697"
      },
      "downloads": -1,
      "filename": "rs_fec_conv-0.4.5-cp37-cp37m-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4ee7f1768913209291d5c768a25cafb2",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 399783,
      "upload_time": "2020-06-02T17:17:48",
      "upload_time_iso_8601": "2020-06-02T17:17:48.827785Z",
      "url": "https://files.pythonhosted.org/packages/a5/cd/c2d4c03e56211cb654577b93eda176fbeb671c1ecce3f42950e371c7d03c/rs_fec_conv-0.4.5-cp37-cp37m-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abc7a8d181792618ae3073f61c1a5f178722ac22549fda0c4e3c850d4e5f4de8",
        "md5": "38e082f9efb8fdb0fe4713e84676a970",
        "sha256": "992b6dd6ccbafeafd1b5462a42d69df50d1e9d6c31977e7518f835fab128117a"
      },
      "downloads": -1,
      "filename": "rs_fec_conv-0.4.5-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "38e082f9efb8fdb0fe4713e84676a970",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 163430,
      "upload_time": "2020-03-30T16:45:46",
      "upload_time_iso_8601": "2020-03-30T16:45:46.483603Z",
      "url": "https://files.pythonhosted.org/packages/ab/c7/a8d181792618ae3073f61c1a5f178722ac22549fda0c4e3c850d4e5f4de8/rs_fec_conv-0.4.5-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26b912a5dc63cada9b23fa3f713e5735701db6efdc94bf8145bfb55b27cb3149",
        "md5": "0860d942a1638e964d4cc05834115470",
        "sha256": "b17da03664597a84b8aea48b4f15baff36316f14358447269d6b5a93f71d2967"
      },
      "downloads": -1,
      "filename": "rs_fec_conv-0.4.5-cp37-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0860d942a1638e964d4cc05834115470",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 178326,
      "upload_time": "2020-03-28T19:43:31",
      "upload_time_iso_8601": "2020-03-28T19:43:31.101963Z",
      "url": "https://files.pythonhosted.org/packages/26/b9/12a5dc63cada9b23fa3f713e5735701db6efdc94bf8145bfb55b27cb3149/rs_fec_conv-0.4.5-cp37-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}