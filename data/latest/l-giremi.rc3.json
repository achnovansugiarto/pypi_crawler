{
  "info": {
    "author": "Zhiheng Liu",
    "author_email": "wolfsonliu@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# L-GIREMI\n\n[![](https://img.shields.io/badge/version-v0.1.11-blue)](https://pypi.org/project/l-giremi/)\n\nL-GIREMI (Long-read Genome-independent Identification of RNA Editing by Mutual Information) is a method for identification of RNA editing sites from long-read RNA-seq data.\n\n## Requirement\n\nThe L-GIREMI software was developed with python3 on Linux, which\ndemands several python packages.\n\n* python3.5+: with sys, argparse, re, logging, functools, collections,\n  multiprocessing.\n* [scikit-learn](https://scikit-learn.org): 0.20+\n* [scipy](https://www.scipy.org): 1.5+\n* [numpy](https://numpy.org): 1.10+\n* [pandas](https://pandas.pydata.org): 1.0+\n* [pysam](https://pysam.readthedocs.io): 0.16+\n\nAnd the analysis with L-GIREMI also needs additional software:\n* [samtools](http://www.htslib.org)\n* [bcftools](http://www.htslib.org)\n* [bgzip](http://www.htslib.org)\n* [tabix](http://www.htslib.org)\n* [minimap2](https://github.com/lh3/minimap2)\n\n### Installation\n\nIt's recommended to install the software into a virtual environment.\n\nCreate virtual environment:\n\n```{bash}\nconda create -n l_giremi\nconda activate l_giremi\n```\n\nOr:\n\n```{bash}\nvirtualenv l_giremi\nsource bin/activate\n```\n\n\n#### From github\n\nDownload from github:\n\n```{bash}\ngit clone https://github.com/gxiaolab/L-GIREMI\ncd L-GIREMI\n```\n\nInstall the package:\n\n```{bash}\npython setup.py install\n```\n\n#### From pip\n\n```{bash}\npip install l-giremi\n```\n\n### Reference data\n\nUsers should make sure to use reference files with the same assembly\nversion and the same chromosome naming convention in all the\nprocesses.\n\n#### Genome fasta file\n\nL-GIREMI requires a genome fasta file as input. For the human genome,\nthe fasta file can be obtained from\n[UCSC](https://hgdownload.cse.ucsc.edu/goldenpath/hg38/chromosomes/)\nor [NCBI](https://www.ncbi.nlm.nih.gov/genome/guide/human/). The fasta\nfile should include sequences from all the chromosomes.\n\n\n#### SNP vcf file\n\nL-GIREMI will use a SNP vcf file to get putative heterozygous SNPs. A\nvcf of dbSNP is acceptable. Alternatively, the users can provide a\nsample-specific SNP vcf file, if available. The vcf file should be\nconverted into the bcf format, sorted, and indexed.\n\nThe following is an example flow to obtain dbSNP vcf and convert the\ndbSNP chromosome names into UCSC format.\n\n\n```{bash}\nwget \"https://ftp.ncbi.nih.gov/snp/latest_release/VCF/GCF_000001405.38.gz\"\n\nwget \"https://ftp.ncbi.nih.gov/snp/latest_release/VCF/GCF_000001405.38.gz.md5\"\n\nmd5sum -c GCF_000001405.38.gz.md5\n\nwget \"https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.28_GRCh38.p13/GCA_000001405.28_GRCh38.p13_assembly_report.txt\"\n\negrep -v \"^#\" GCA_000001405.28_GRCh38.p13_assembly_report.txt | cut -f 7,10 | tr \"\\t\" \" \" > GRCh38-to-hg38.map\n\nbcftools annotate --rename-chrs GRCh38-to-hg38.map GCF_000001405.38.gz -Ob -o dbsnp.38.hg38.bcf\n\nbcftools index dbsnp.38.hg38.bcf\n```\n\n#### Gene annotation gtf\n\nA gene annotation gtf is required for L-GIREMI, which can be obtained\nfrom [gencode](https://www.gencodegenes.org/human/). The gtf file\nshould be sorted, zipped, and indexed.\n\n\nThe following is an example flow to prepare the gtf file:\n\n```{bash}\n(grep ^\"#\" gencode.v37.annotation.gtf; \\\n    grep -v ^\"#\" gencode.v37.annotation.gtf | \\\n    sort -k1,1 -k4,4n) | \\\n    bgzip > gencode.v37.annotation.sorted.gtf.gz\n\ntabix -p gff gencode.v37.annotation.sorted.gtf.gz\n```\n\n#### Simple repeat region table\n\n\nA table containing annotated simple repeats is used by L-GIREMI to\npre-filter sites. It can be obtained from [UCSC table\nbrowser](http://genome.ucsc.edu/cgi-bin/hgTables). The table format\nshould be: chromosome, start, end. No header is needed for the file.\n\n## Usage\n\n```{bash}\nusage: l-giremi [-h] -b BAM_FILE [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX] [-t THREAD] --genome_fasta GENOME_FASTA\n                  --snp_bcf SNP_BCF --repeat_txt REPEAT_TXT --annotation_gtf ANNOTATION_GTF\n                  [--mapq_threshold MAPQ_THRESHOLD] [--min_allele_count MIN_ALLELE_COUNT]\n                  [--gene_padding GENE_PADDING] [--exon_padding EXON_PADDING] [--min_rc_cov MIN_RC_COV]\n                  [--homopoly_length HOMOPOLY_LENGTH] [--min_AB MIN_AB] [--min_AC MIN_AC]\n                  [--min_het_snp_ratio MIN_HET_SNP_RATIO] [--max_het_snp_ratio MAX_HET_SNP_RATIO]\n                  [--mi_min_common_read MI_MIN_COMMON_READ] [--mi_min_read MI_MIN_READ] [--mip_threshold MIP_THRESHOLD]\n\nL-GIREMI (Long-read Genome-independent Identification of RNA Editing by Mutual Information)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, sorted and indexed\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  -t THREAD, --thread THREAD\n                        cores to be used\n  --genome_fasta GENOME_FASTA\n                        path of genome fasta file\n  --snp_bcf SNP_BCF     path of dbSNP bcf file\n  --repeat_txt REPEAT_TXT\n                        path of txt file of simple repeats [chromosom, start, end] (0 based)\n  --annotation_gtf ANNOTATION_GTF\n                        gtf (gz and tabix indexed) file of genome annotation (gencode)\n  --mapq_threshold MAPQ_THRESHOLD\n                        Min MAPQ to be considered in bam file (default: 20)\n  --min_allele_count MIN_ALLELE_COUNT\n                        Min allele read count (default: 2)\n  --drop_non_spliced_read DROP_NON_SPLICED_READ\n                        Drop non spliced reads (default: True)\n  --min_dist_from_splice MIN_DIST_FROM_SPLICE\n                        Drop sites within the distance from splice junctions (default: 4)\n  --gene_padding GENE_PADDING\n                        expand the range when searching gene gtf (default: 500)\n  --exon_padding EXON_PADDING\n                        expand the range when searching exon gtf (default: 10)\n  --min_rc_cov MIN_RC_COV\n                        min coverage of read cluster to be considered (default: 2)\n  --homopoly_length HOMOPOLY_LENGTH\n                        left and right sequence length to be searched for the homopoly around sites (default: 5)\n  --min_AB MIN_AB       Min mismatch ratio to be considered (default: 0.1)\n  --min_AC MIN_AC       Min mismatch read count to be considered (default: 3)\n  --min_het_snp_ratio MIN_HET_SNP_RATIO\n                        Min ratio to be considered as heterogenous SNPs (default: 0.35)\n  --max_het_snp_ratio MAX_HET_SNP_RATIO\n                        Max ratio to be considered as heterogenous SNPs (default: 0.65)\n  --mi_min_common_read MI_MIN_COMMON_READ\n                        Min common read for site pairs to calculate MI (default: 6)\n  --mi_min_read MI_MIN_READ\n                        Min read for a variant of a site in a site pair to calculate MI (default: 1)\n  --mip_threshold MIP_THRESHOLD\n                        MI p value threshold to be used to separate RNA editing sites (default: 0.05)\n```\n\n## Analysis process\n\nOnce the following files are available (see above):\n* reference FASTA file: for example hg38 fasta.\n* SNP VCF file: dbSNP VCF file (the chromosome names should be agreed\n  with the reference FASTA file), or known SNP VCF file for teh\n  sample.\n* genome annotation GTF file: with exon annotation and gene\n  annotation, for example GENCODE gtf file.\n\nFirst, align the long-read RNA-seq fastq file using\n[minimap2](https://github.com/lh3/minimap2) with cs tag, which is\nrequired by `l-giremi`.\n\n```{bash}\nminimap2 -t 8 -ax splice -uf \\\n         --secondary=no -N 5 --cs \\\n         -o SAM_FILE GENOME_FILE FASTQ_FILE\n```\n\nThen, remove the unmapped and non-uniquely mapped reads from the SAM\nfile, and sort it into an indexed BAM file.\n\n```{bash}\nsamtools view -O BAM -F 2052 -h $SAM_FILE | \\\n    samtools sort -O BAM -@ 7 -o $BAM_FILE -\n\nsamtools index $BAM_FILE\n```\n\nNext, run `l-giremi`.\n\n```{bash}\nl-giremi \\\n    -t 8 \\\n    --bam_file $BAM_FILE \\\n    --output_prefix $OUTPREFIX \\\n    --genome_fasta $GENOME_FILE \\\n    --snp_bcf $SNP_FILE \\\n    --repeat_txt $REPEAT_FILE \\\n    --annotation_gtf $GTF_FILE \\\n    --chromosomes chr1 chr2 chr3 chr4 \\\n    chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 \\\n    chr13 chr14 chr15 chr16 chr17 chr18 chr19 \\\n    chr20 chr21 chr22 chrX chrY\n```\n\n## Output\n\n`l-giremi` generates several output files:\n\n* corrected read strand files: the files are stored as `$OUTPREFIX.strand`.\n  columns:\n  1. read_name: the read name.\n  2. seq_strand: original read mapping strand.\n  3. read_strand: corrected read strand.\n* site position files: stored as `$OUTPREFIX.site`.\n  columns:\n  1. chromosome: chromosome name.\n  2. pos: position on the chromosome, 0-based.\n  3. ref: sequence of reference genome, strandless.\n  4. snp: SNP mark, 0 for not found overlapping with input SNP\n     annotations, 1 for overlapping with input SNP annotations.\n* mutual information files: stored as `$OUTPREFIX.mi`.\n  columns:\n  1. type: het_snp, for mismatch sites that overlapping with SNP\n     annotations and with mismatch ratio satisfying the\n     parameters. mimatch for other types.\n  2. chromosome: chromosome name.\n  3. pos: position on the chromosome, 0-based.\n  4. strand: strand of the mismatch sites.\n  5. change_type: the mismatch type, [ref]>[alt].\n  6. mi: site mutual information.\n  7. n: n sites pairs for the calculation of site mutual information.\n  8. pairs: the names of the paired sites.\n  9. jakarta: Jakarta index for each site pairs.\n  10. mis: mutual information for each site pairs.\n  11. mi_cov: mutual information read coverage.\n  12. mip: emperical p value of the MI\n* mismatch score file: stored as `$OUTPREFIX.score`.\n  columns:\n  1. type: het_snp, for mismatch sites that overlapping with SNP\n     annotations and with mismatch ratio satisfying the\n     parameters. mimatch for other types.\n  2. chromosome: chromosome name.\n  3. pos: position on the chromosome, 0-based.\n  4. strand: strand of the mismatch sites.\n  5. change_type: the mismatch type, [ref]>[alt].\n  6. read_count: the read count for the mismatch.\n  7. depth: the total read count for the site.\n  8. ratio: the mismatch ratio.\n  9. up_seq: a 5' nucleotide ahead of the mismatch sites.\n  10. down_seq: a 3' nucleotide after the mismatch sites.\n  11. score: RNA editing score by the GLM model.\n* score performance file: stored as `$OUTPREFIX.score_performance`.\n  columns:\n  1. score: score from mismatch score file\n  2. tp: true positive count, the number of sites with score larger\n     than or equal to the score in the line used as positive training\n     data\n  3. fp: false positive count, the number of sites with score larger\n     than or equal to the score in the line used as negative training\n     data\n  4. fn: false negative count, the number of sites with score smaller\n     than the score in the line used as positive training data\n  5. tn: true negative count, the number of sites with score smaller\n     than the score in the line used as negative training data\n  6. precision: tp / (tp + fp)\n  7. recall: tp / (tp + fn)\n  8. f1: 2 * (precision * recall) / (precision + recall)\n  9. sensitivity: tp / (tp + fn)\n  10. specificity: tn / (tn + fp)\n  11. tpr: true positive rate, tp / (tp + fn)\n  12. fpr: false positive rate, fp / (fp + tn)\n  13. max_f1: bool, indicating the max f1\n\n## Useful scripts\n\nThere are also some useful scripts provided with the main l-giremi\ncode.\n\n### `get_aei`\n\n`get_aei` is used for the calculation of Alu Editing Index (AEI)\nfrom long-read RNA-seq data [(Roth et al., 2019)][1]. Calculation of\nAEI neads the read strand files (output of `l-giremi`), the genome\nfasta file, a txt file with Alu locations, and the SNP BCF reference.\n\n```{bash}\nusage: get_aei [-h] -b BAM_FILE --strand_file STRAND_FILE [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX]\n                  --genome_fasta GENOME_FASTA --snp_bcf SNP_BCF --alu_txt ALU_TXT [-t THREAD]\n\nCalculate AEI from bam file, both in read level and Alu level\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, with cs tags, sorted and indexed\n  --strand_file STRAND_FILE\n                        corrrect strand file for reads, generated by the L-GIREMI\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  --genome_fasta GENOME_FASTA\n                        path of genome fasta file\n  --snp_bcf SNP_BCF     path of dbSNP bcf file\n  --alu_txt ALU_TXT     path of bed file of simple repeats [chromosom, start, end, name] (0 based)\n  -t THREAD, --thread THREAD\n                        cores to be used\n```\n\n### `get_read_site`\n\n`get_read_site` output a table that has the read name, genomic\nposition, and the nucleotide of the position on the read. Running the\nscript requires a file that provides the genomic position of sites\nthat are interested.\n\n```{bash}\nusage: get_read_site [-h] -s SITE_FILE -b BAM_FILE [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX]\n                        [--mapq_threshold MAPQ_THRESHOLD] [-t THREAD]\n\nGet read and site information from bam file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SITE_FILE, --site_file SITE_FILE\n                        input site file: [chromosome, pos], without header, separated by tab\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, with cs tags, sorted and indexed\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  --mapq_threshold MAPQ_THRESHOLD\n                        Min MAPQ to be considered in bam file (default: 20)\n  -t THREAD, --thread THREAD\n                        cores to be used\n```\n\n### `get_read_mismatch`\n\n`get_read_mismatch` is similar to `get_read_site`, except that\nit only outputs the read name and the mismatched sites, without matched\nsites. `get_read_mismatch` also requires a file that provides the\ngenomic position of sites that are interested.\n\n```{bash}\nusage: get_read_mismatch [-h] -s SITE_FILE -b BAM_FILE [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX]\n                            [--mapq_threshold MAPQ_THRESHOLD] [-t THREAD]\n\nGet read and mismatch site information from bam file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SITE_FILE, --site_file SITE_FILE\n                        input site file: [chromosome, pos], without header, separated by tab\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, with cs tags, sorted and indexed\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  --mapq_threshold MAPQ_THRESHOLD\n                        Min MAPQ to be considered in bam file (default: 20)\n  -t THREAD, --thread THREAD\n                        cores to be used\n```\n\n### `get_read_splice`\n\n`get_read_splice` outputs read names and the splicing sites\ndetected by minimap2 in the reads.\n\n```{bash}\nusage: get_read_splice [-h] -b BAM_FILE [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX]\n                          [--mapq_threshold MAPQ_THRESHOLD] [-t THREAD]\n\nGet read and splice sites from bam file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, with cs tags, sorted and indexed\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  --mapq_threshold MAPQ_THRESHOLD\n                        Min MAPQ to be considered in bam file (default: 20)\n  -t THREAD, --thread THREAD\n                        cores to be used\n```\n\n### `correct_splice_site`\n\nSince the raw splice sites detected in the long-read RNA-seq data may\nnot be accurate, a correction procedure is needed [(Wyman and Mortazavi, 2019)][2]. `correct_splice_site` adopted similar correction strategies with TranscriptClean. The correction needs a GTF annotation file.\n\n\n```{bash}\nusage: correct_splice_site [-h] -s SPLICE_FILE --annotation_gtf ANNOTATION_GTF\n                              [-c [CHROMOSOMES ...]] [-o OUTPUT_PREFIX] [--window WINDOW]\n\nCorrect splice sites by gtf file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SPLICE_FILE, --splice_file SPLICE_FILE\n                        input splice file [read_name, chromosome, pos, type] with column names\n  --annotation_gtf ANNOTATION_GTF\n                        gtf (gz and tabix indexed) file of genome annotation (gencode)\n  -c [CHROMOSOMES ...], --chromosomes [CHROMOSOMES ...]\n                        chromosomes to be analyzed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  --window WINDOW       window to be considered as the same splice site (default: 10)\n```\n\n### `calculate_site_splice_mi`\n\n`calculate_site_splice_mi` can calculate the mutual information for\nmismatched sites (RNA editing sites or SNPs) and splicing sites.\n\n```{bash}\nusage: calculate_site_splice_mi [-h] [-m READ_SITE] [-s READ_SPLICE] [-o OUTPUT_PREFIX]\n\ncalculate the mutual information of mismatch site and splice site pairs\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m READ_SITE, --read_site READ_SITE\n                        read-site file: [read_name, chromosome, pos, seq]\n  -s READ_SPLICE, --read_splice READ_SPLICE\n                        corrected read-splice file: [read_name, chromosome, pos, type, corrected_pos,\n                        annotation]\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n```\n\n### `split_bam_by_site`\n\n`split_bam_by_site` can fetch reads that cover one genomic location\nand save the reads into separate SAM files by the location, which can\nbe used in IGV ploting.\n\n```{bash}\nusage: split_bam_by_site [-h] -b BAM_FILE [-o OUTPUT_PREFIX] [-c CHROMOSOME] [-p POS]\n\nSave reads that cover one position into separated SAM files by the genomic location\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BAM_FILE, --bam_file BAM_FILE\n                        input bam file, with cs tags, sorted and indexed\n  -o OUTPUT_PREFIX, --output_prefix OUTPUT_PREFIX\n                        prefix of output file\n  -c CHROMOSOME, --chromosome CHROMOSOME\n  -p POS, --pos POS\n```\n\n***\n\n[1]: <http://www.nature.com/articles/s41592-019-0610-9> \"Roth, S.H., Levanon, E.Y., and Eisenberg, E. (2019). Genome-wide quantification of ADAR adenosine-to-inosine RNA editing activity. Nat Methods 16, 1131–1138.\"\n[2]: <https://academic.oup.com/bioinformatics/article/35/2/340/5038460> \"Wyman, D., and Mortazavi, A. (2019). TranscriptClean: variant-aware correction of indels, mismatches and splice junctions in long-read transcripts. Bioinformatics 35, 340–342.\"",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gxiaolab/L-GIREMI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "l-giremi",
    "package_url": "https://pypi.org/project/l-giremi/",
    "platform": null,
    "project_url": "https://pypi.org/project/l-giremi/",
    "project_urls": {
      "Homepage": "https://github.com/gxiaolab/L-GIREMI"
    },
    "release_url": "https://pypi.org/project/l-giremi/0.1.11/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a software for analysis of RNA editing sites from long-read RNA-seq data",
    "version": "0.1.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13254374,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "219d53c955ec20ab3a83b36ea5a64f1843894bf1ada842ae98c066fcf47b3846",
          "md5": "35c5946dc7cc6b8d0211503df0847de7",
          "sha256": "dcf622e7a81d68a387f8d082714cb54f098a3e8d358fbb8ee03450aa42cba359"
        },
        "downloads": -1,
        "filename": "l-giremi-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "35c5946dc7cc6b8d0211503df0847de7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41086,
        "upload_time": "2022-03-22T18:43:20",
        "upload_time_iso_8601": "2022-03-22T18:43:20.969258Z",
        "url": "https://files.pythonhosted.org/packages/21/9d/53c955ec20ab3a83b36ea5a64f1843894bf1ada842ae98c066fcf47b3846/l-giremi-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af48d91d2ddd5562b9faaba37618bfcb6893c9cb007809535f11e61f3bdab2a",
          "md5": "927c5304d514bfda9b4b2ee952d5f4d1",
          "sha256": "da9aec42d9e4f54c8489900bb7289dcb56c4c29a4d0c3cdabaadb6d670663cb9"
        },
        "downloads": -1,
        "filename": "l-giremi-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "927c5304d514bfda9b4b2ee952d5f4d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40936,
        "upload_time": "2022-03-22T20:32:24",
        "upload_time_iso_8601": "2022-03-22T20:32:24.082886Z",
        "url": "https://files.pythonhosted.org/packages/6a/f4/8d91d2ddd5562b9faaba37618bfcb6893c9cb007809535f11e61f3bdab2a/l-giremi-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "942ea8f174a941bf24c950f162e1cee8168854bcd0c75f83f361e2035da93ed7",
          "md5": "767c789ccf9e114c9624dcd5bb1ec593",
          "sha256": "b9baa781172de35d8845c76dcdfb44eb454c94a94a12c8ebac9ebc694f0c866a"
        },
        "downloads": -1,
        "filename": "l_giremi-0.1.8-py3.9.egg",
        "has_sig": false,
        "md5_digest": "767c789ccf9e114c9624dcd5bb1ec593",
        "packagetype": "bdist_egg",
        "python_version": "0.1.8",
        "requires_python": ">=3.6",
        "size": 28568,
        "upload_time": "2021-11-19T18:31:08",
        "upload_time_iso_8601": "2021-11-19T18:31:08.006017Z",
        "url": "https://files.pythonhosted.org/packages/94/2e/a8f174a941bf24c950f162e1cee8168854bcd0c75f83f361e2035da93ed7/l_giremi-0.1.8-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d313c5e6da219161b1a03184539642daaf83a84e7c683738b808e27b0667741",
          "md5": "7f6faf6f96f312adf4fcba68fd4b09d6",
          "sha256": "79cc85a727864b2e7a137632db7fc180de144d7571f0e9808804c0bd3e3a57a9"
        },
        "downloads": -1,
        "filename": "l-giremi-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7f6faf6f96f312adf4fcba68fd4b09d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38254,
        "upload_time": "2021-11-19T20:21:00",
        "upload_time_iso_8601": "2021-11-19T20:21:00.473068Z",
        "url": "https://files.pythonhosted.org/packages/5d/31/3c5e6da219161b1a03184539642daaf83a84e7c683738b808e27b0667741/l-giremi-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6af48d91d2ddd5562b9faaba37618bfcb6893c9cb007809535f11e61f3bdab2a",
        "md5": "927c5304d514bfda9b4b2ee952d5f4d1",
        "sha256": "da9aec42d9e4f54c8489900bb7289dcb56c4c29a4d0c3cdabaadb6d670663cb9"
      },
      "downloads": -1,
      "filename": "l-giremi-0.1.11.tar.gz",
      "has_sig": false,
      "md5_digest": "927c5304d514bfda9b4b2ee952d5f4d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40936,
      "upload_time": "2022-03-22T20:32:24",
      "upload_time_iso_8601": "2022-03-22T20:32:24.082886Z",
      "url": "https://files.pythonhosted.org/packages/6a/f4/8d91d2ddd5562b9faaba37618bfcb6893c9cb007809535f11e61f3bdab2a/l-giremi-0.1.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}