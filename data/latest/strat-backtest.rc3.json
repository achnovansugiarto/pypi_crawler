{
  "info": {
    "author": "Dhruv",
    "author_email": "dsamdani@asu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Strategy Backtest\n\nStrategy Backtest is a **python** program built with **pandas** that backtests various strategies\n\n**Example Plot**:\n![](https://raw.githubusercontent.com/dhruvsamdani/strat-backtest/main/strat_backtest/Graphs/data.png \"Example Graph\")\n\n**Stats**\n\n```bash\n                                                Stats\nTicker                                           AAPL\nStart Time                        2013-01-02 00:00:00\nEnd Time                          2022-05-20 00:00:00\nStart Amount                                     5000\nEnd Amount                                  83708.247\nAverage Hold Time                   156 days 13:30:00\nAverage Losses                              -7242.993\nAverage Profits                              12216.62\nBiggest Loss                               -31825.015\nBiggest Win                                 50857.595\nCompound Annual Growth Rate (%)                36.766\nMax Drawdown (%)                               -49.13\nAverage Drawdown (%)                          -11.827\nNet Profit                                  78708.247\nProfit Factor                                   2.811\nRisk Reward                                     0.071\nSharpe Ratio                                    1.051\nVolatility Annualized (% change)                0.454\nBeta                                            0.209\nAlpha                                          15.265\nR-Squared                                       0.565\n```\n\n## How it Works:\n\nThe strategy backtest framework works by pulling data from the yahoo finance api (unofficial) or allowing the user to supply their own data. The user can create their own strategy or use one of the provided ones. A strategy is created by making indicators that manipulate the data. For example there is a crossover strategy that compares a fast SMA (20 day) and a slow SMA (100 day).\n\nThe data is then entered into pandas DataFrames and then a strategy can be made with a manipulation of the DataFrame data. After the strategy is created it the strategy can be backtested on market stock data. It can also be plotted and the orders that the strategy makes, and the strategy metrics can also be displayed.\n\n## Dependencies:\n\n- **Python 3.8+**\n- [Numpy](https://github.com/numpy/numpy)\n- [Pandas](https://github.com/pandas-dev/pandas)\n- [Yahoo Finance](https://github.com/ranaroussi/yfinance)\n- [PRAW](https://praw.readthedocs.io/en/stable/) [^1]\n- [Pytest](https://github.com/pytest-dev/pytest) [^2]\n\n[^1]: Not necessary if the reddit component is not being used\n[^2]: Only needed if building new features\n\n```bash\npip install numpy\npip install pandas\npip install yfinance\npip install praw\npip install pytest\n```\n\n## Installation:\n\n```bash\npip install strat-backtest\n```\n\n### From Source\n\nClone the github repo to the folder where the backtest is going to be run. Once all the dependencies are met the program can be implemented correctly. For a quicker installation download the backtest folder and then follow usage instructions[^3]\n\n[^3]: If you want to plot the data make sure to also download the `graph_colors` folder which contains the customizations for the graphs\n\n## Usage:\n\n```python\nfrom strat_backtest.backtest import Backtest, download_data, load_data\nfrom strat_backtest.backtest.custom_strats import MA_Cross_Strat, Ten_Percent_Strat\n# Download data for tickers\n# download_data('AAPL', 'MSFT', 'TSLA').AAPL.to_csv(\"./data/aapl.csv\")\n\n# Load data from a directory\ndata = load_data(\"./data\")[\"aapl\"].last(\"10Y\")\n\n# Initialize backtest and run strategy\nbacktest = Backtest(5000, \"AAPL\", MA_Cross_Strat, input_data=data, fast=20, lagging=100)\noutput = backtest.run()\n```\n\n### Optimize Strategy\n\n```python\nbacktest = Backtest(5000, \"AAPL\", MA_Cross_Strat, input_data=data, fast=20, lagging=100)\n\noptimal_nums, net_worth = backtest.optimize(\n    init_state=[10, 60],\n    fast=[36, 42, 2],\n    lagging=[40, 210, 10],\n    opt_type=\"grid_search\",\n    common_stock=True,\n)\n\n# Outputs the optimized numbers for the algorithm\nprint(optimal_nums, net_worth)\n```\n\n### Plot Strategy against S&P500\n\n```python\n# Plotting\nbacktest.strat.plot_data(\n    ((output[[\"net_worth\", \"SP500\"]].last(\"10Y\").pct_change() + 1).cumprod() * 100)\n    - 100,\n    title=\"Percent return of Crossover strategy against time\",\n    ylabel=\"Percent Returns\",\n    color=\"LIGHT\",\n)\n# Graph will be stored in ./Graphs\n```\n\n### Access Metrics\n\n```python\n# metrics for the backtest\nbacktest = Backtest(...)\n\n# print output to stdout if output is marked True\nstats = backtest.metrics(output=False)\n\n```\n\n### Download Data\n\n```python\n# Download data for tickers\n# Comes as a dictionary of dataframes of OHLCV data\ndata = download_data('AAPL', 'MSFT', 'TSLA')\n\n# Access data for individual ticker\naapl = data.AAPL\n\n# For Example:\n# data.MSFT\n# data.TSLA\n\n# Store data in a csv\naapl.to_csv(\"./data/aapl.csv\")\n\n```\n\n### Order History\n\n```python\n# Orders\n\n# Get orders (have to convert to dataframe for easy access)\norders = backtest.strat.orders\norders.to_df().to_csv(\"orders.csv\")\n```\n\n### Common Stocks via Reddit\n\nINI setup if using ini for information\n\nSAMPLE CONFIG INI\n\n```ini\n[REDDIT]\nAPI_KEY = <api key (app id)>\nSECRET = <secret>\nUSER_AGENT = <user agent>\n```\n\nPython setup\n\n```python\nrc = common_stock.RedditConfig('APP_ID', 'SECRET', 'USER_AGENT')\n```\n\n### Pytest\n\nFrom root directory of project run\n\n```bash\npython -m pytest\n```\n\n## Work in Progress\n\n1. Add more strategies\n2. Adapt code to work with **options**\n3. ~~Make script to analyze other sources of data to get better insight into which stocks to backtest~~\n4. ~~Add more stats~~\n5. Add more items so framework is more robust\n6. Rewrite and improve documentation\n7. **Maybe:** _Add algotrading bot to program_\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dhruvsamdani/strat-backtest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strat-backtest",
    "package_url": "https://pypi.org/project/strat-backtest/",
    "platform": null,
    "project_url": "https://pypi.org/project/strat-backtest/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dhruvsamdani/strat-backtest/issues",
      "Homepage": "https://github.com/dhruvsamdani/strat-backtest"
    },
    "release_url": "https://pypi.org/project/strat-backtest/0.0.3/",
    "requires_dist": [
      "numpy",
      "pandas",
      "yfinance",
      "praw",
      "pytest",
      "matplotlib"
    ],
    "requires_python": ">=3.8",
    "summary": "Financial program that backtests a strategy (custom or predefined) on stock data",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14462891,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "486f409018948b2a6b9a3da09b2ad48cd735c69c908c33c0307f44b276c2b5f9",
          "md5": "a941c8454c2be9a034e9d20a045d3e85",
          "sha256": "45c2dc0c316fff40289061fb083f746af55339da5e1c64447b39a71de196dd96"
        },
        "downloads": -1,
        "filename": "strat_backtest-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a941c8454c2be9a034e9d20a045d3e85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1665139,
        "upload_time": "2022-07-14T00:41:04",
        "upload_time_iso_8601": "2022-07-14T00:41:04.138805Z",
        "url": "https://files.pythonhosted.org/packages/48/6f/409018948b2a6b9a3da09b2ad48cd735c69c908c33c0307f44b276c2b5f9/strat_backtest-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bab559c401b803dd3c5c583365a2cb2b2e00f50f0d39367644ac789bfa5a4c6",
          "md5": "3b3241ff4a988ecd73803133345661c3",
          "sha256": "98322d66a4c2d1001251a541e8e9a6eda981f82a276e04a5b867bd5c504c536f"
        },
        "downloads": -1,
        "filename": "strat-backtest-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b3241ff4a988ecd73803133345661c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 1661315,
        "upload_time": "2022-07-14T00:41:08",
        "upload_time_iso_8601": "2022-07-14T00:41:08.014406Z",
        "url": "https://files.pythonhosted.org/packages/9b/ab/559c401b803dd3c5c583365a2cb2b2e00f50f0d39367644ac789bfa5a4c6/strat-backtest-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "239fd17d3aa823357c33c12ff91794fe93446f2aea1782f032b68e852378513a",
          "md5": "6168a841cff69bb7f97f9997e3f0887d",
          "sha256": "2c01c28c5f3b27b0e9156572c3df852dfd0f0aa6f1e4318051f8e6d4d14be04f"
        },
        "downloads": -1,
        "filename": "strat_backtest-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6168a841cff69bb7f97f9997e3f0887d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1665168,
        "upload_time": "2022-07-14T21:31:04",
        "upload_time_iso_8601": "2022-07-14T21:31:04.167510Z",
        "url": "https://files.pythonhosted.org/packages/23/9f/d17d3aa823357c33c12ff91794fe93446f2aea1782f032b68e852378513a/strat_backtest-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a658266d9f9a8eb5ef71bae31da889c72018feec16a66e229150de636bb67da",
          "md5": "ad9c5ec265591b080544fd40b7cbd603",
          "sha256": "495a56f03f0f45f9714d1d4de7859168e0ab3f427d6ad5bbfa8cd9c57915c6bc"
        },
        "downloads": -1,
        "filename": "strat-backtest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad9c5ec265591b080544fd40b7cbd603",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 1661469,
        "upload_time": "2022-07-14T21:31:07",
        "upload_time_iso_8601": "2022-07-14T21:31:07.916883Z",
        "url": "https://files.pythonhosted.org/packages/3a/65/8266d9f9a8eb5ef71bae31da889c72018feec16a66e229150de636bb67da/strat-backtest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ac3c5516df0b4960a66c7c966e798a29e0acc3e619c6aa740493e9492570bd9",
          "md5": "01ed05226b5de141d2f9f36610f2ca04",
          "sha256": "a29b5db2902024d088da5def82b5224f9d9ce5b7e990de9f6fb3768ef33a702e"
        },
        "downloads": -1,
        "filename": "strat_backtest-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01ed05226b5de141d2f9f36610f2ca04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1665303,
        "upload_time": "2022-07-17T21:49:32",
        "upload_time_iso_8601": "2022-07-17T21:49:32.887884Z",
        "url": "https://files.pythonhosted.org/packages/1a/c3/c5516df0b4960a66c7c966e798a29e0acc3e619c6aa740493e9492570bd9/strat_backtest-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f668c6b58ce17a060f6356baf26841c37fffc6ae69bf9bb67705df6d5b7e0980",
          "md5": "a49f439a49a161eabc8594b5b7c23cfe",
          "sha256": "664feee6729cf961da386f244c4ab5f421f67561201e2b4f82306d0a199e12f3"
        },
        "downloads": -1,
        "filename": "strat-backtest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a49f439a49a161eabc8594b5b7c23cfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 1661591,
        "upload_time": "2022-07-17T21:49:36",
        "upload_time_iso_8601": "2022-07-17T21:49:36.423693Z",
        "url": "https://files.pythonhosted.org/packages/f6/68/c6b58ce17a060f6356baf26841c37fffc6ae69bf9bb67705df6d5b7e0980/strat-backtest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ac3c5516df0b4960a66c7c966e798a29e0acc3e619c6aa740493e9492570bd9",
        "md5": "01ed05226b5de141d2f9f36610f2ca04",
        "sha256": "a29b5db2902024d088da5def82b5224f9d9ce5b7e990de9f6fb3768ef33a702e"
      },
      "downloads": -1,
      "filename": "strat_backtest-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01ed05226b5de141d2f9f36610f2ca04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 1665303,
      "upload_time": "2022-07-17T21:49:32",
      "upload_time_iso_8601": "2022-07-17T21:49:32.887884Z",
      "url": "https://files.pythonhosted.org/packages/1a/c3/c5516df0b4960a66c7c966e798a29e0acc3e619c6aa740493e9492570bd9/strat_backtest-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f668c6b58ce17a060f6356baf26841c37fffc6ae69bf9bb67705df6d5b7e0980",
        "md5": "a49f439a49a161eabc8594b5b7c23cfe",
        "sha256": "664feee6729cf961da386f244c4ab5f421f67561201e2b4f82306d0a199e12f3"
      },
      "downloads": -1,
      "filename": "strat-backtest-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a49f439a49a161eabc8594b5b7c23cfe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 1661591,
      "upload_time": "2022-07-17T21:49:36",
      "upload_time_iso_8601": "2022-07-17T21:49:36.423693Z",
      "url": "https://files.pythonhosted.org/packages/f6/68/c6b58ce17a060f6356baf26841c37fffc6ae69bf9bb67705df6d5b7e0980/strat-backtest-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}