{
  "info": {
    "author": "Egor Gvo",
    "author_email": "work.egvo@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Sberbank signature verification using async cryptography\n\nThe code of keys generation and message signing and signature verification is universal, \nit is not only Sberbank-compatible. You can use it for your own purposes. \nHowever there is a `sberbank_tools` module that consist sberbank-specific functions.\n\nThe repo is open for pull requests. The author will be glad to hear some good feedback from you.\n\n## Python version\n\nPython version that has been used while coding is 3.8. Other versions has not been tested but they might work.\n\n## Installation\n\n```bash\npip install -i sberbank_callback_async_cryptography\n```\n\n## Flask example\n\n```python\nimport os\nfrom dotenv import load_dotenv\n\nfrom flask import request\nfrom flask_restful import Resource\nfrom sb_async_cryptography.sberbank_tools import verify_signature, params_get_checksum\nfrom sb_async_cryptography.signature import public_key_import_from_x509_certificate_file\n\nload_dotenv()\nSBERBANK_PUBLIC_KEY_FILE = os.getenv('SBERBANK_PUBLIC_KEY_FILE')\npub_key = public_key_import_from_x509_certificate_file(SBERBANK_PUBLIC_KEY_FILE)\n\n\nclass Notification(Resource):\n\n    def get(self):\n        \"\"\"Status change notification from Sberbank\"\"\"\n        params = request.args\n        signature = params_get_checksum(params)\n        if not verify_signature(pub_key, signature, params):\n            return {\"errors\": \"Signature verification failed.\"}, 400\n\n        # some other code here\n```\n\n## FastAPI example\n\n```python\nimport os\nfrom dotenv import load_dotenv\n\nfrom fastapi import Request\nfrom sb_async_cryptography.sberbank_tools import verify_signature, params_get_checksum\nfrom sb_async_cryptography.signature import public_key_import_from_x509_certificate_file\nfrom starlette.responses import JSONResponse\n\nload_dotenv()\nSBERBANK_PUBLIC_KEY_FILE = os.getenv('SBERBANK_PUBLIC_KEY_FILE')\npub_key = public_key_import_from_x509_certificate_file(SBERBANK_PUBLIC_KEY_FILE)\n\n\nasync def notification(request: Request):\n    \"\"\"Status change notification from Sberbank\"\"\"\n    params = dict(request.query_params)\n    signature = params_get_checksum(params)\n    if not verify_signature(pub_key, signature, params):\n        return JSONResponse(status_code=400, content={\"errors\": \"Signature verification failed.\"})\n\n    # some other code here\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/egorgvo/sberbank_callback_async_cryptography",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sberbank-async-cryptography",
    "package_url": "https://pypi.org/project/sberbank-async-cryptography/",
    "platform": "",
    "project_url": "https://pypi.org/project/sberbank-async-cryptography/",
    "project_urls": {
      "Homepage": "https://github.com/egorgvo/sberbank_callback_async_cryptography"
    },
    "release_url": "https://pypi.org/project/sberbank-async-cryptography/1.0.0/",
    "requires_dist": [
      "pycryptodomex (==3.9.8)",
      "cryptography (==3.0)"
    ],
    "requires_python": "",
    "summary": "Python implementation of Sberbank signature verification (using async cryptography).",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8037089,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8198e49432eddf9ab578c3acc994d475355754b49e57cb8279a40cc60bdab74",
          "md5": "f3430dd0982c4993d7d2a3d3bffeafdf",
          "sha256": "71f158ecd682d19261c8769360127107412a5c0227590babacf55caa7ecb58f8"
        },
        "downloads": -1,
        "filename": "sberbank_async_cryptography-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3430dd0982c4993d7d2a3d3bffeafdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5271,
        "upload_time": "2020-08-25T17:20:20",
        "upload_time_iso_8601": "2020-08-25T17:20:20.109790Z",
        "url": "https://files.pythonhosted.org/packages/d8/19/8e49432eddf9ab578c3acc994d475355754b49e57cb8279a40cc60bdab74/sberbank_async_cryptography-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2126372b8f58da6d135e7fac80e057abbc98e49a1b436a051bbfeefdac6b9566",
          "md5": "750715b5fc79284eeb07ce4cde150419",
          "sha256": "e1c5ae9a83ec2b611220f20edcaef3b55e64326b8ec0104234bdbdc22ac32403"
        },
        "downloads": -1,
        "filename": "sberbank-async-cryptography-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "750715b5fc79284eeb07ce4cde150419",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4508,
        "upload_time": "2020-08-25T17:20:23",
        "upload_time_iso_8601": "2020-08-25T17:20:23.703712Z",
        "url": "https://files.pythonhosted.org/packages/21/26/372b8f58da6d135e7fac80e057abbc98e49a1b436a051bbfeefdac6b9566/sberbank-async-cryptography-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8198e49432eddf9ab578c3acc994d475355754b49e57cb8279a40cc60bdab74",
        "md5": "f3430dd0982c4993d7d2a3d3bffeafdf",
        "sha256": "71f158ecd682d19261c8769360127107412a5c0227590babacf55caa7ecb58f8"
      },
      "downloads": -1,
      "filename": "sberbank_async_cryptography-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f3430dd0982c4993d7d2a3d3bffeafdf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5271,
      "upload_time": "2020-08-25T17:20:20",
      "upload_time_iso_8601": "2020-08-25T17:20:20.109790Z",
      "url": "https://files.pythonhosted.org/packages/d8/19/8e49432eddf9ab578c3acc994d475355754b49e57cb8279a40cc60bdab74/sberbank_async_cryptography-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2126372b8f58da6d135e7fac80e057abbc98e49a1b436a051bbfeefdac6b9566",
        "md5": "750715b5fc79284eeb07ce4cde150419",
        "sha256": "e1c5ae9a83ec2b611220f20edcaef3b55e64326b8ec0104234bdbdc22ac32403"
      },
      "downloads": -1,
      "filename": "sberbank-async-cryptography-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "750715b5fc79284eeb07ce4cde150419",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4508,
      "upload_time": "2020-08-25T17:20:23",
      "upload_time_iso_8601": "2020-08-25T17:20:23.703712Z",
      "url": "https://files.pythonhosted.org/packages/21/26/372b8f58da6d135e7fac80e057abbc98e49a1b436a051bbfeefdac6b9566/sberbank-async-cryptography-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}