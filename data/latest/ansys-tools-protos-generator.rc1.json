{
  "info": {
    "author": "ANSYS, Inc.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "PyAnsys Protos Generator Packaging Tool\n=======================================\n\nThis package allows you to automatically generate a python package\nfrom proto files stored according to gRPC proto file conventions.\n\nInstallation\n------------\n\nInstall the python packaging tool with:\n\n.. code::\n\n   pip install ansys-tools-protos-generator\n\n\nUsage\n-----\nOnce installed, this package can be run directly from the command line with:\n\n.. code::\n\n   python -m ansys.tools.protos_generator <directory-containing-protosfiles>\n\nThe ``protos-samples`` directory contains a simple sample service\ncontaining the following directory structure.\n\n::\n\n   ─ansys\n   │   ├───api\n   │   │   ├───sample\n   │   │   │   ├───v1\n   │   │   │   │   ├───sample.proto\n   │   │   │   │   └───VERSION\n\nRunning:\n\n.. code::\n\n   python -m ansys.tools.protos_generator ansys/api/sample-example/v1\n\nWill generate the following python package:\n\n::\n\n   dist/ansys-api-sample-v1-0.5.3.tar.gz\n\nThis package can then be installed via:\n\n.. code::\n\n   pip install dist/ansys-api-sample-v1-0.5.3.tar.gz\n\nOr uploaded to pypi with:\n\n.. code::\n\n   twine upload dist/ansys-api-sample-v1-0.5.3.tar.gz\n\nContact alexander.kaszynski@ansys.com for the token and credentials to\nupload to pypi under the pyansys account.\n\n\nNon-Default Directory\n~~~~~~~~~~~~~~~~~~~~~\nYou can change the default directory to a non-default directory with:\n\n.. code::\n\n   python -m ansys.tools.protos_generator <protosfiles_path> <outdir>\n\nFor more details, run:\n\n.. code::\n\n   python -m ansys.tools.protos_generator -h\n\n\nRun from within Python\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can run this within python with:\n\n.. code:: python\n\n   from ansys.tools.protos_generator.generator import package_protos\n   protosfiles_path = 'proto-samples/ansys/api/sample/v1/'\n   outdir = 'C:/tmp'  # or Linux: '/tmp'\n   dist_file = package_protos(protosfiles_path, outdir)\n\n\nAnsys gRPC Directory Structure - Standards\n------------------------------------------\n\nIn the gRPC proto file naming and directory convention see (`gRPC\nstandards <https://grpc.io/docs/>`__), each module is placed in a\ndirectory tree that contains the origin of the module.  The origin of\nall modules should be ``ansys``, followed by ``api``, followed by\n``<product/service>``.\n\nFor example\n\n::\n\n   ─ansys\n   │   ├───api\n   │   │   ├───<product/service>\n   │   │   │   ├───v1\n   │   │   │   │   └───service.proto\n   │   │   │   │   └───other_service.proto\n   │   │   │   │   └───VERSION\n\nThis convention follows the `gRPC standards <https://grpc.io/docs/>`__\nexcept for the ``VERSION`` file containing a single `semantic version\n<https://semver.org/>`_ string.  Due to the complexity of Ansys\nservices, the ``vX`` version cannot be used to fully describe state of\nthe version of the service.  For example, if the service were to add a\nsingle message to a service, we need a way of tracking that in the\nversion of our auto-generated gRPC interface files and packages.  Hence\na semantic version.\n\nThere are other advantages to having a semantic version, namely that\npython packages containing the autogenerated gRPC interface files will\nalso have this version.  This will give any downstream dependencies\nthe ability to depend on a compatible API.  For example, if higher\nlevel package requires a certain version of autogenerated gRPC\npackage:\n\n::\n\n   ansys.<product>.<feature>==0.2.0 depends on ansys.api.<product>.v1==0.8.0\n   ansys.<product>.<feature>==0.3.0 depends on ansys.api.<product>.v1==0.9.0\n\nThis way, you can maintain backwards compatibility with various\nversions of a product for the entire dependency chain without\nencountering forwards/backwards compatibility issues.\n\nNote that we still use ``vX``.  This is required by Google gRPC APIs\nand affords us the ability to expose two APIs similtaniously from a\ngRPC service.  For example, both a ``v1`` and ``v2`` could be exposed\nsimiltaniously from a service, each with their own semantic version to\ndescribe the granular state of that API.\n\nThis will be handled manually by creating a new directory containing\nthe next version of the API you choose to expose.\n\n::\n\n   ─ansys\n   │   ├───api\n   │   │   ├───sample\n   │   │   │   ├───v1\n   │   │   │   │   ├───sample.proto\n   │   │   │   │   └───VERSION\n   │   │   │   ├───v2\n   │   │   │   │   ├───sample.proto\n   │   │   │   │   └───VERSION\n\n\nFor all other questions regarding gRPC standards, please reference\n`gRPC Documentation <https://grpc.io/docs/>`__, `gRPC Motivation and\nDesign Principles <https://grpc.io/blog/principles/>`_, and `API\nDesign Guide <https://cloud.google.com/apis/design>`_.\n\n\nDevelopment\n-----------\nRun unit testing with:\n\n.. code::\n\n   git clone https://github.com/pyansys/pyansys-protos-generator.git\n   cd pyansys-protos-generator\n   pip install -e .\n   pip install requirements_test.txt\n   pytest -v",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyansys/pyansys-protos-generator/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Alexander Kaszynski",
    "maintainer_email": "alexander.kaszynski@ansys.com",
    "name": "ansys-tools-protos-generator",
    "package_url": "https://pypi.org/project/ansys-tools-protos-generator/",
    "platform": "",
    "project_url": "https://pypi.org/project/ansys-tools-protos-generator/",
    "project_urls": {
      "Homepage": "https://github.com/pyansys/pyansys-protos-generator/"
    },
    "release_url": "https://pypi.org/project/ansys-tools-protos-generator/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "PyAnsys Protos Generator Packaging Tool",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11031047,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de59e68d66d027d68c2e2fd4feb72f5d613605ef282f36ee302b82c46f6ebf14",
          "md5": "a76a68ca59a2b0636051511dada77547",
          "sha256": "4e69a03155cd6ab73b80bfb39ab9ae3596ddb74d62a6200ca4272b2678f1818c"
        },
        "downloads": -1,
        "filename": "ansys-tools-protos-generator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a76a68ca59a2b0636051511dada77547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9894,
        "upload_time": "2021-07-28T20:02:48",
        "upload_time_iso_8601": "2021-07-28T20:02:48.535542Z",
        "url": "https://files.pythonhosted.org/packages/de/59/e68d66d027d68c2e2fd4feb72f5d613605ef282f36ee302b82c46f6ebf14/ansys-tools-protos-generator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de59e68d66d027d68c2e2fd4feb72f5d613605ef282f36ee302b82c46f6ebf14",
        "md5": "a76a68ca59a2b0636051511dada77547",
        "sha256": "4e69a03155cd6ab73b80bfb39ab9ae3596ddb74d62a6200ca4272b2678f1818c"
      },
      "downloads": -1,
      "filename": "ansys-tools-protos-generator-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a76a68ca59a2b0636051511dada77547",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 9894,
      "upload_time": "2021-07-28T20:02:48",
      "upload_time_iso_8601": "2021-07-28T20:02:48.535542Z",
      "url": "https://files.pythonhosted.org/packages/de/59/e68d66d027d68c2e2fd4feb72f5d613605ef282f36ee302b82c46f6ebf14/ansys-tools-protos-generator-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}