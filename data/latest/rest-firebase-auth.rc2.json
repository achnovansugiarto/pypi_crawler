{
  "info": {
    "author": "Rahul Khairnar",
    "author_email": "rahulkhairnarr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# DRF Firebase Auth\n\n## Credit\nInspired from https://github.com/garyburgmann/drf-firebase-auth \n\n## Requirements\n\n\n* Python (tested with 2.7, 3.6)\n* Django\n* Django Rest Framework\n\n\n\n## Installation\n\n```\n$ pip install rest_firebase_auth\n```\n\nAdd the application to your project's `INSTALLED_APPS` in `settings.py`.\n\n```\nINSTALLED_APPS = [\n    ...\n    'rest_firebase_auth',\n]\n```\n\nIn your project's `settings.py`, add this to the `REST_FRAMEWORK` configuration. Note that if you want to retain access to the browsable API for locally created users, then you will probably want to keep `rest_framework.authentication.SessionAuthentication` too.\n\n\n```\nREST_FRAMEWORK = {\n  ...\n  'DEFAULT_AUTHENTICATION_CLASSES': [\n    ...\n    'rest_framework.authentication.SessionAuthentication',\n    'rest_firebase_auth.authentication.FirebaseAuthentication',\n  ]\n}\n```\n\n\nThe `drf_firebase_auth` application comes with the following settings as default, which can be overridden in your project's `settings.py` file. Make sure to nest them within `REST_FIREBASE_AUTH` as below:\n\n\n```\nREST_FIREBASE_AUTH = {\n    # path to JSON file with firebase secrets\n    'FIREBASE_SERVICE_ACCOUNT_KEY': '',\n    # allow creation of new local user in db\n    'FIREBASE_CREATE_LOCAL_USER': True,\n    # attempt to split firebase user.display_name and set local user\n    # first_name and last_name\n    'FIREBASE_ATTEMPT_CREATE_WITH_DISPLAY_NAME': True,\n    # commonly JWT or Bearer (e.g. JWT <token>)\n    'FIREBASE_AUTH_HEADER_PREFIX': 'JWT',\n    # verify that JWT has not been revoked\n    'FIREBASE_CHECK_JWT_REVOKED': True,\n    # require that firebase user.email_verified is True\n    'FIREBASE_AUTH_EMAIL_VERIFICATION': False\n}\n```\n\nYou can get away with leaving all the settings as default except for `FIREBASE_SERVICE_ACCOUNT_KEY`, which is obviously required. As a minimum, you will need to set this in your project's `settings.py`. This must be the JSON service account key that you receive from the Firebase console for your application.\n\n```\n...\nREST_FIREBASE_AUTH = {\n    'FIREBASE_SERVICE_ACCOUNT_KEY': 'project/config/firebase.json'\n}\n```\n\nNow that you have configured the application, run the migrations so that the Firebase data can be stored.\n\n```\n$ ./manage.py migrate rest_firebase_auth\n```\n\nAll you need to do now is have your client code handle the Firebase popup/redirect authentication flow, retrieve the idToken from the currentUser (Firebase explains this flow well in their docs: `https://firebase.google.com/docs/auth/admin/verify-id-tokens`), and then use the idToken for the user in an `Authorization` header in requests to your API.\n\n```\nJWT <token>\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rahulkhairnarr/rest_firebase_auth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rest-firebase-auth",
    "package_url": "https://pypi.org/project/rest-firebase-auth/",
    "platform": "",
    "project_url": "https://pypi.org/project/rest-firebase-auth/",
    "project_urls": {
      "Homepage": "https://github.com/rahulkhairnarr/rest_firebase_auth"
    },
    "release_url": "https://pypi.org/project/rest-firebase-auth/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom Django Rest Framework authentication backend for parsing Firebase uid tokens and storing as local users.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12979789,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce0b99f49744b08c3564993a8e94ec4aa5c2727c5acb20eb0e4206f899a28439",
          "md5": "6ebca46c3c5bfa421bd76e5bd973f7e8",
          "sha256": "f0d5071c994c2c5b5d00ee6670ea1e43e66ae24a2f3dac591483cc25c3dbb506"
        },
        "downloads": -1,
        "filename": "rest_firebase_auth-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ebca46c3c5bfa421bd76e5bd973f7e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6786,
        "upload_time": "2020-06-13T18:16:21",
        "upload_time_iso_8601": "2020-06-13T18:16:21.169407Z",
        "url": "https://files.pythonhosted.org/packages/ce/0b/99f49744b08c3564993a8e94ec4aa5c2727c5acb20eb0e4206f899a28439/rest_firebase_auth-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61c0d05d538762d5cf71f521d7916386ff4ab4ebcffa9d0a7a4904da140d4ca3",
          "md5": "7bc506fc400af8026cf86387c7575cac",
          "sha256": "60cb25cf42aac381270a658409c4b490eeafff81719070828bde05e13c93912a"
        },
        "downloads": -1,
        "filename": "rest_firebase_auth-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7bc506fc400af8026cf86387c7575cac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6790,
        "upload_time": "2020-06-13T18:36:12",
        "upload_time_iso_8601": "2020-06-13T18:36:12.467979Z",
        "url": "https://files.pythonhosted.org/packages/61/c0/d05d538762d5cf71f521d7916386ff4ab4ebcffa9d0a7a4904da140d4ca3/rest_firebase_auth-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61c0d05d538762d5cf71f521d7916386ff4ab4ebcffa9d0a7a4904da140d4ca3",
        "md5": "7bc506fc400af8026cf86387c7575cac",
        "sha256": "60cb25cf42aac381270a658409c4b490eeafff81719070828bde05e13c93912a"
      },
      "downloads": -1,
      "filename": "rest_firebase_auth-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7bc506fc400af8026cf86387c7575cac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6790,
      "upload_time": "2020-06-13T18:36:12",
      "upload_time_iso_8601": "2020-06-13T18:36:12.467979Z",
      "url": "https://files.pythonhosted.org/packages/61/c0/d05d538762d5cf71f521d7916386ff4ab4ebcffa9d0a7a4904da140d4ca3/rest_firebase_auth-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}