{
  "info": {
    "author": "Tim O'Donnell",
    "author_email": "timodonnell@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![Build Status](https://travis-ci.com/openvax/phipkit.svg?branch=main)](https://travis-ci.com/openvax/phipkit)\n\n# phipkit\nPhIP-seq data analysis toolkit\n\nThis package implements a data analysis workflow for processing the results of\nphage immunoprecipitation sequencing ([PhIP-Seq](https://en.wikipedia.org/wiki/PhIP-Seq]))\nexperiments.\n\nThis workflow gets you from a matrix\nof read counts to a list of potential epitopes for each sample. Downstream\nanalyses (not implemented here) may use these epitopes in case vs.\ncontrol comparisons or other analyses appropriate to the study.\n\n\n\n## Installation\n\nAll dependencies except BLAST (required by `phipkit-blast` command) can be\ninstalled by pip:\n\n```\n$ pip install phipkit\n```\n\nor from a checkout of the repo:\n\n```\n$ pip install .\n```\n\nIn order to run the `phipkit-blast` command, you will need the BLAST commands\n`blastp` and `makeblastdb` in your PATH. I recommend installing BLAST using\nbioconda. After [setting up bioconda](https://bioconda.github.io/user/install.html#set-up-channels),\nyou can just run:\n\n```\nconda install blast\n```\n\nThis package has been tested using BLAST versions 2.6.0 and 2.10.1. Most likely\nany recent version will work.\n\nYou can run the phipkit unit tests with:\n\n```\n$ pip install pytest\n$ pytest\n```\n\n\n## Assumptions and data requirements\n\nKey assumptions for our analysis approach:\n* Your PhIP-seq run included several (ideally 5 or more)\n\"beads-only\" negative control wells, i.e. wells without any antibody added.\n* Your PhIP-seq library was designed by tiling source proteins\nwith *overlapping* peptides, i.e. each position in the source protein is covered\nby more than one phage clone  \n\nTo use this package, you will need three things:\n* A library annotation file (CSV) giving the amino acid insert sequence (peptide) for each clone\n* A reference proteome (FASTA) giving the amino acid sequences of the full-length\nproteins that the library covers \n* A sample x clones matrix (CSV) of read counts for your experiment. This can be generated\nfor example using the [phip-stat](https://github.com/lasersonlab/phip-stat) package.\n\n\nNote: in most cases where a CSV file is expected, you can also also pass a\ntab-separated file (TSV), or a bzip2-compressed CSV or TSV. \n\n\n## Example analysis\n\nWe will walk through analyzing a toy synthetic PhIP-seq dataset. First go\ninto the example-data directory:\n\n```\n$ cd example-data\n```\n\n### Step 1. Blast PhIP-seq library against itself\n\nYou only need to do this once for each PhIP-seq library you run. If you mix\nlibraries in a single run, I recommend running this command on the combined\nmixture of libraries.\n\nTo blast phage clone sequences against themselves, run:\n\n```\n$ phipkit-blast annotations.csv --out blast.all_against_all.csv\n```\n\nExample results: [blast.all_against_all.csv](example-data/blast.all_against_all.csv).\n\nThe first argument is your library annotation file. This is expected to\nhave phage clone names on the first column, and another column named `seq_aa`\nthat gives the amino acid sequence of the peptide. This column name can be\nchanged; see `phipkit-blast -h`.\n\nRunning this on a real library can be quite slow. I usually run it overnight.\nPassing '--blast-parameter num_threads 4' can speed this up (the default is 1\nthread).\n\n\n### Step 2. Blast PhIP-seq library against reference proteome\n\nThere's a second blast step that you also need to do only once per library. Here\nwe blast the library against a set of full length protein sequences (referred\nto as \"antigens\" later).\n\n```\n$ phipkit-blast annotations.csv --reference proteins.fasta --out blast.reference.csv\n```\n\nExample results: [blast.reference.csv](example-data/blast.reference.csv).\n\nThe proteins you use here should roughly correspond to the \nproteins used originally to generate the PhIP-seq library. They don't have to\nexactly match though. For example, for an autoantigen PhIP-seq library,\nit's reasonable to use the current\n[human proteome](https://www.uniprot.org/proteomes/UP000005640) from Uniprot.\n\n\n### Step 3. Calculate scores\n\nThis step is independent of the two BLAST steps. It calculates \"scores\" that\ncapture enrichment over beads-only negative controls. The results are conceptually\nanalogous to the z-scores introduced in [Yuan et al 2018](https://www.biorxiv.org/content/10.1101/285916v1),\nalthough a different model is used based on a robust fit of a Poisson\ndistribution. See [score.py](phipkit/score.py) for the implementation. \n\n```\n$ phipkit-score counts.csv --out scores.csv\n```\n\nExample results: [scores.csv](example-data/scores.csv).\n\n\n### Step 4. Call hits\n\nThis step identifies phage clones (actually pairs of phage clones with\noverlapping sequences) that have high enough scores to be called hits.\n\nOur method for hit calling uses only the relative ranking of the scores, not the\nvalues themselves. You can therefore use any alternate scoring method you like,\nas long as clones with higher read counts have higher scores. The method is\nimplemented in [call_hits.py](phipkit/call_hits.py).\n\n```\n$ phipkit-call-hits blast.all_against_all.csv scores.csv --counts counts.csv --fdr 0.1 --out hits.csv\n```\n\nExample results: [hits.csv](example-data/hits.csv).\n\n\n### Step 5. Call antigens\n\nThis step looks for regions of source proteins that have multiple overlapping\nhits. It's implemented in [call_antigens.py](phipkit/call_antigens.py).\n\n```\n$ phipkit-call-antigens blast.reference.csv hits.csv --out antigens.csv\n```\n\nExample results: [antigens.csv](example-data/antigens.csv).\n\n\n### Step 6 (optional). Plot antigen calls\n\nSome rudimentary plotting support is also available.\n\n```\n$ phipkit-plot-antigens blast.reference.csv hits.csv antigens.csv --out antigens.pdf\n```\n\nExample results: [antigens.pdf](example-data/antigens.pdf).\n\n## Contributing\nPRs with bugfixes or new functionality are welcome. Before embarking on a major\nchange, please file an issue.\n\nTo push a new release to PyPI:\n* Make sure the package version specified in [`__init__.py`](https://github.com/timodonnell/yabul/blob/main/yabul/__init__.py)\nis a new version greater than what's on [PyPI](https://pypi.org/project/yabul/).\n* Tag a new release on GitHub matching this version\n\nTravis should deploy the release to PyPI automatically.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openvax/phipkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phipkit",
    "package_url": "https://pypi.org/project/phipkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/phipkit/",
    "project_urls": {
      "Bug Tracker": "https://github.com/openvax/phipkit/issues",
      "Homepage": "https://github.com/openvax/phipkit"
    },
    "release_url": "https://pypi.org/project/phipkit/0.0.1/",
    "requires_dist": [
      "pandas",
      "dna-features-viewer",
      "tqdm",
      "statsmodels",
      "seaborn"
    ],
    "requires_python": ">=3.3",
    "summary": "PhIP-seq analysis library",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9690248,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1a5bcdd8ab493926e155e749bfa6bb6be9491194b1c851f2d1a5dc1f4d54ae4",
          "md5": "a931eb8c41095c14f4e4a628f90c2058",
          "sha256": "8dde65b208ff897f93183cda0c13fe309dca493a733397494f63b71ed0c0b59e"
        },
        "downloads": -1,
        "filename": "phipkit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a931eb8c41095c14f4e4a628f90c2058",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 25712,
        "upload_time": "2021-03-06T18:48:16",
        "upload_time_iso_8601": "2021-03-06T18:48:16.866861Z",
        "url": "https://files.pythonhosted.org/packages/f1/a5/bcdd8ab493926e155e749bfa6bb6be9491194b1c851f2d1a5dc1f4d54ae4/phipkit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57e068014f1e52fdc74ac701322376baf767b22383f72f6a30c9519aa4c81bdd",
          "md5": "06846d3997e3cf92c0d11c1a50d2de8c",
          "sha256": "eab51a010fd22cab1ee8976d6e946af34bf294bd8ccafc6690efee37820adcf1"
        },
        "downloads": -1,
        "filename": "phipkit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06846d3997e3cf92c0d11c1a50d2de8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 27279,
        "upload_time": "2021-03-06T18:48:17",
        "upload_time_iso_8601": "2021-03-06T18:48:17.806328Z",
        "url": "https://files.pythonhosted.org/packages/57/e0/68014f1e52fdc74ac701322376baf767b22383f72f6a30c9519aa4c81bdd/phipkit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1a5bcdd8ab493926e155e749bfa6bb6be9491194b1c851f2d1a5dc1f4d54ae4",
        "md5": "a931eb8c41095c14f4e4a628f90c2058",
        "sha256": "8dde65b208ff897f93183cda0c13fe309dca493a733397494f63b71ed0c0b59e"
      },
      "downloads": -1,
      "filename": "phipkit-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a931eb8c41095c14f4e4a628f90c2058",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.3",
      "size": 25712,
      "upload_time": "2021-03-06T18:48:16",
      "upload_time_iso_8601": "2021-03-06T18:48:16.866861Z",
      "url": "https://files.pythonhosted.org/packages/f1/a5/bcdd8ab493926e155e749bfa6bb6be9491194b1c851f2d1a5dc1f4d54ae4/phipkit-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57e068014f1e52fdc74ac701322376baf767b22383f72f6a30c9519aa4c81bdd",
        "md5": "06846d3997e3cf92c0d11c1a50d2de8c",
        "sha256": "eab51a010fd22cab1ee8976d6e946af34bf294bd8ccafc6690efee37820adcf1"
      },
      "downloads": -1,
      "filename": "phipkit-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "06846d3997e3cf92c0d11c1a50d2de8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.3",
      "size": 27279,
      "upload_time": "2021-03-06T18:48:17",
      "upload_time_iso_8601": "2021-03-06T18:48:17.806328Z",
      "url": "https://files.pythonhosted.org/packages/57/e0/68014f1e52fdc74ac701322376baf767b22383f72f6a30c9519aa4c81bdd/phipkit-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}