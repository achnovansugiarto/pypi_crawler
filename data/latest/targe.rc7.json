{
  "info": {
    "author": "Dawid Kraczkowski",
    "author_email": "dawid.kraczkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Targe\nPowerful and flexible authorization library utilizing policy system that reflects your domain.\n\n\n## Installation\n\nWith pip:\n```\npip install targe\n```\n\nor with poetry\n\n```\npoetry add targe\n```\n\n## Quick start\n\n```python\nfrom targe import Auth, ActorProvider, Actor, Policy\nfrom targe.errors import AccessDeniedError\n\n\n# This will provide actor for auth mechanism\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        return Actor(actor_id)\n\n\n# Initialise auth class\nauth = Auth(MyActorProvider())\n\n# Retrieves and authorizes actor by its id\nauth.authorize(\"actor_id\")\n\n\n# `auth.guard` decorator assigns auth scope to a function and\n# protects it from non-authorized access\n@auth.guard(scope=\"protected\")\ndef protect_this() -> None:\n    ...  # code that should be protected by auth\n\n\ntry:\n    protect_this()\nexcept AccessDeniedError:\n    ...  # this will fail as actor has no access to scope `protected`\n\nauth.actor.policies.append(Policy.allow(\"protected\"))  # add `protected` scope to actor policies\nprotect_this()  # now this works\n```\n\n## Features\n\n### Customisable and flexible policy system\nPolicy system in **Targe** is not limited to specific keywords like `read`, `write`, `create`, etc. \nInstead it uses scopes, scopes can hold any value that makes sense in your application's domain \nlike `salads : eat`. To increase flexibility and control over your domain **Targe** allows for defining dynamic\nscopes that can point to specific data in your application.\n\n### Minimal, close to 0 learning curve\nIf you already have some experience with other `acl` or `authorization` libraries there is \nalmost 0 learning curve. In order to start using the library you only need to learn these 5 methods:\n- `Auth.guard`\n- `Auth.guard_after`\n- `Policy.allow`\n- `Policy.deny`\n- `ActorProvider.get_actor`\n\n### Built-in audit log\nEverytime guarded function is executed library creates a log entry. This log entries can be persisted\nand used later on to understand who, when, how and what has changed within your application.\n\n### Elegant and easy to use interface\nYou don't have to write complex `if` statements asserting whether user has given role or policy. \nAll of that happens automatically in one small `@guard` decorator, which can be attached to \nany function/method within your codebase and easily removed if needed. \n\n# Usage\n\n## Execution flow\n\nThe following diagram is a high level representation of the execution flow:\n\n![Execution Flow](./docs/targe@2x-2.png)\n\n\nWhen protected function gets called, `targe.Auth` class is checking whether `actor` is accessible \n(`targe.Auth.init` is responsible for providing valid instance of `targe.Actor`). \n\nIf for some reason `actor` is not accessible (`Auth.init` was not called or `targe.ActorProvider` has failed) \n`UnauthorizedError` exception is raised. \n\nWhen `actor` is present, library will attempt to resolve `scope` and assert whether `actor` has required\npolicy or access to given scope. Once this is done library will automatically generate an audit log, \nwhich can be persisted in database for future reference.\n\nFinally, if actor has sufficient rights guarded function is executed, otherwise `targe.AccessDeniedError` is raised.\n\n## Actor\nActor represents authenticated user in your application. Other important characteristics of an actor are:\n- an actor aggregates permissions and roles\n- an actor encapsulates its state and may act upon its change  \n- actor knows whether is can access given scope\n- actor's id is referenced in audit log  \n- actor can be extended further to encapsulate your application logic \n\n### Creating new actor\n\n```python\nfrom targe import Actor\n\nmy_actor = Actor(\"actor_id\")\n```\n\n### Assigning policies\n\n```python\nfrom targe import Actor, Policy\n\nmy_actor = Actor(\"actor_id\")\n\n# assign policies \nmy_actor.policies.append(Policy.allow(\"articles : update\"))\n```\n\n> Note: whitespaces in scope are irrelevant, both `articles:update`, `articles : update`\n> are equal from the library points of view.\n\n### Assigning roles\n\n```python\nfrom targe import Actor, Policy, Role\n\nmy_actor = Actor(\"actor_id\")\n\n# simple role\nuser_manager = Role(\"user_manager\")\nuser_manager.policies.append(Policy.allow(\"user:*\"))\n\n# assign role\nmy_actor.roles.append(user_manager)\n```\n\n### Providing an actor to auth system\nBy default, auth system does not know who is your actor and what it can do. \n\nTo provide information about your actor, you have to implement `targe.ActorProvider` protocol, \nplease consider the following example:\n\n```python\nfrom targe import ActorProvider, Actor, Auth\n\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        ...  # you can query your database or do other relevant task to factory your instance of `targe.Actor`\n        return Actor(actor_id)\n\n\n# now we have to just instantiate auth and pass instance of our ActorProvider implementation\nauth = Auth(MyActorProvider())\n\n# The following line will cause auth system to use `MyActorProvider.get_actor` method.\nauth.authorize(\"actor_id\")\n```\n\n## Policies\n\n**Policy** is an object representing logical rule that can either allow or deny accessing\ncertain areas in your application. \nOnce policies are created they can ba attached to a role, or a user to ensure fine-grained\naccess control.\n\nPolicies contain `scopes` and `effect`. The first ones holds an information how data is \nbeing accessed within your application (`read`, `write`, `update`, `etc`), the latter ones \ntell whether scope is accessible or not.\n\nYou can define a policy like in the example below:\n```python\nfrom targe import Policy\n\npolicy = Policy.allow(scope=\"articles : update\")\n```\n\n### Scopes\n\nScope is a string representing a logical boundary within your application in which data is being \naccessed and/or manipulated. This string must follow the pattern [a-zA-Z][a-zA-Z0-9-_]*, whitespaces are ignored.\nCharacters like: `:`, `,`, `*` are allowed in the scope, but they have specific meaning:\n\n- `:` is used to build namespaced scopes\n- `,` is used to match multiple scope sections\n- `*` is used for pattern matching expressions\n\nScopes can be used in policies and in guarded functions. Use scopes in policies to set rules for existing logical \nboundaries in our application. To define those boundaries scopes must be provided in `Auth.guard` decorator, which\ndecorates given function or method.\n\nThe following is a list of valid policy scopes:\n```\narticles\narticles : update\narticles : update : article_id\narticles : create, upate, delete\narticles : *\narticles : meta : set-*\narticles : meta : *Name\narticles : update : * : tags\n```\n\n#### Pattern matching\n\nLet's review the following code snippet which defines multiple policies:\n\n```python\nfrom targe import Policy\n\nPolicy.allow(\"article : meta : setKeywords\")\nPolicy.allow(\"article : meta : setVersion\")\nPolicy.allow(\"article : meta : setCategory\")\nPolicy.allow(\"article : meta : getKeywords\")\nPolicy.allow(\"article : meta : getVersion\")\nPolicy.allow(\"article : meta : getCategory\")\n```\n\nIt is quite repetitive task which can be simplified by using pattern matching in policy's scopes:\n\n```python\nfrom targe import Policy\n\nPolicy.allow(\"article : meta : set*\")\nPolicy.allow(\"article : meta : get*\")\n```\n\nAn asterisk at the end of each scope tells **Targe** to use pattern matching mechanism. \nFirst policy might be interpreted as \"match all the scopes which start with `article` namespace followed by `meta` \nnamespace followed by namespace that starts with a `set` word\". Second one is very similar but last namespace \nhas to start with `get` word instead. \n\nHere are some examples to help you understand how pattern matching works:\n```\narticle : *\n```\nMatch all scopes that start with article namespace.\n```\narticle : * : id\n```\nMatch all scopes that start with an `article`, has `any` namespace after that and ends with a `id`.\n```\narticle : *Name\n```\nMatch all scopes that start with an `article` namespace and are followed by namespace that ends with `Name`\n\nLet's now go back last time to our example that we simplified with pattern matching. This can be simplified \neven further with grouping. Let's consider the following code snippet:\n\n```python\nfrom targe import Policy\n\nPolicy.allow(\"article : meta : set*, get*\")\n```\n\nNow with the above policy we can match all the scopes that were presented at the beginning of this chapter.\n\n## Roles\n\nRole is a collection of policies with a unique name. Roles can be also \nused to build Role-based access control (RBAC), which is a simplified mechanism\nfor regulating access to part of your application based on the roles of an individual actor.\n\nThe following is an example code, where `user_manager` role is defined:\n\n```python\nfrom targe import Role, Policy\n\nrole = Role(\"user_manager\")\n\n# You can also attach policies to a role, but it is not needed in RBAC scenario\nrole.policies.append(Policy.allow(\"user : create, update, delete, read\"))\n```\n\n> Role names must follow [a-z][a-z0-9_-]+ pattern. Role name is also its identifier, \n> thus they should be unique across your application.\n\n## Guarding function\n\nProtecting function from unauthorized access is one of the **Targe**'s main objectives.\n\nWe can protect function from unauthorized execution in two styles:\n- acl based style\n- rbac style\n\nUse rbac style in scenarios where you have to just assert if actor has given role, use acl based style in other cases.\nACL based style is not only giving you more control over your resources but also automatically enables audit log. \n\n### Guarding function - rbac style example\n\nTo protect function from unauthorized execution use `Auth.guard(rbac=[...])` decorator with `rbac` argument. The `rbac`\nargument accepts list of strings where each string is a role name that is required in to execute annotated function.\n\n> If more than one role is passed in the `rbac` argument, this means actor has to own all the required roles\n> to execute annotated function.\n\n```python\nfrom targe import ActorProvider, Actor, Auth\nfrom targe.errors import AccessDeniedError\n\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        return Actor(actor_id)\n\n\nauth = Auth(MyActorProvider())\n\nauth.authorize(\"actor_id\")\n\n\n@auth.guard(roles=[\"user_manager\"])  # Here we use `Auth.guard` decorator to protect `create_user` function\ndef create_user() -> None:\n    ...\n\n\ntry:\n    create_user()\nexcept AccessDeniedError:\n    print(\"`create_user` is protected from unauthorized access.\")\n```\n\n> Keep in mind you can still take advantage of audit log in rbac mode, \n> the only requirement is to provide `scope` argument in `Auth.guard` decorator.\n\n### Guarding function - acl style example\n\n```python\nfrom targe import ActorProvider, Actor, Auth\nfrom targe.errors import AccessDeniedError\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        return Actor(actor_id)\n    \nauth = Auth(MyActorProvider())\n\nauth.authorize(\"actor_id\")\n\n@auth.guard(scope=\"user : create\") \ndef create_user() -> None:\n    ...\n\ntry:\n    create_user()\nexcept AccessDeniedError:\n    print(\"`create_user` is protected from unauthorized access.\") \n```\n\n#### Dynamic scopes\n\nSometimes you might run in scenarios where you would like to limit access to given entity\nor group of entities. In the scenarios like that dynamic scopes might come in handy. \nDynamic scope contains placeholders for values held by arguments passed to guarded function.\nEverytime function is being called placeholders are replaced with corresponding values.\n\n```python\nfrom targe import ActorProvider, Actor, Auth, Policy\nfrom targe.errors import AccessDeniedError\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        # lest initialize actor and allow access to `articles:update:allowed_id` scope.\n        actor = Actor(actor_id)\n        actor.policies.append(Policy.allow(\"articles:update:allowed_id\"))\n        \n        return actor\n    \nauth = Auth(MyActorProvider())\n\nauth.authorize(\"actor_id\")\n\nclass Article:\n    def __init__(self, article_id: str, body: str):\n        self.article_id = article_id\n        self.body = body\n\n# Here we define dynamic scope that holds reference to function's parameter `article` \n# and tries to access its property `article_id`\n@auth.guard(scope=\"article : update : { article.article_id }\") \ndef update_article(article: Article) -> None:\n    print(\"article updated\")\n\n# the following attempt will fail as actor has access only to `article:update:allowed_id` scope\ntry:\n    update_article(Article(\"other_id\", \"Lorem Ipsum\"))\nexcept AccessDeniedError:\n    print(\"`update_article` is protected from unauthorized access.\") \n\n# this line will succeed\nupdate_article(Article(\"allowed_id\", \"Lorem Ipsum\"))\n```\n\n### Overriding function guarding mechanism\n\nYou can override default behavior of guard mechanism in scenarios when it denies access to guarded\nfunction. In order to do that pass a callable object to `Auth` initializer, like below:\n\n```python\nfrom targe import ActorProvider, Actor, Auth\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        return Actor(actor_id)\n    \ndef on_guard(actor: Actor, scope: str) -> bool:\n    if scope == \"user:create\":\n        return True\n    \n    return False\n    \nauth = Auth(MyActorProvider(), on_guard=on_guard)\nauth.authorize(\"actor_id\")\n\n@auth.guard(scope=\"user:create\") \ndef create_user() -> None:\n    ...\n\ncreate_user()\n```\n\nCallable object must return `bool` value (`True` in order to allow access, `False` to deny access) and accept two parameters:\n- `actor: targe.Actor` - an actor that is currently authorized in the system\n- `scope: str` - scope assigned to guarded function\n\n\n## Audit log\n\nAudit log might be useful if you need to track actor's activities in your application.\nBy default, all actor's actions against guarded functions are automatically recorded and stored\nin memory as long as `scope` attribute is provided in the `Auth.guard` decorator. \n\n> `InMemoryAuditStore` class is a default in-memory implementation of `AuditStore` protocol, which\n> is instantiated by `Auth` class if no other implementation is provided.\n\n\n### AuditEntry structure\n\n`targe.AuditEntry` is a representation of a single actor's action against guarded function in your application.\n\nEach audit entry contains the following information:\n- **`entry_id`**: `str` - unique identifier 16 characters long\n- **`actor_id`**: `str` - id of authenticated actor may reference to a user in your application\n- **`scope`**: `str` - scope in which function was executed, defined in guard decorator\n- **`status`**: `targe.AuditStatus` - tells whether execution of a guarded function was successful or not\n- **`created_on`**: `datetime.datetime` - the time when action was initialized\n\n### Persisting audit log\n\nAs we already discussed by default audit log is stored only in the memory, this behaviour \ncan be simply amended by implementing `targe.AuditStore` protocol and passing instance\nof new implementation into `targe.Auth`'s initializer:\n\n```python\nfrom targe import AuditStore, AuditEntry, Auth, ActorProvider, Actor\nimport sqlite3\n\n\nclass MyActorProvider(ActorProvider):\n    def get_actor(self, actor_id: str) -> Actor:\n        return Actor(actor_id)\n\n    \nclass MyAuditStore(AuditStore):\n    def __init__(self, connection: sqlite3.Connection):\n        self.connection = connection\n        \n    def append(self, log: AuditEntry) -> None:\n        query = self.connection.cursor()\n        query.execute(\n            \"INSERT INTO audit_log VALUES(?, ?, ?, ?, ?)\",\n            (\n                log.entry_id,\n                log.actor_id,\n                log.scope,\n                log.status,\n                log.created_on\n             )\n        )\n        \ndb_connection = sqlite3.connect(\"audit_log.db\")\nauth = Auth(actor_provider=MyActorProvider(), audit_store=MyAuditStore(db_connection))\nauth.authorize(\"actor_id\")\n...\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kodemore/targe",
    "keywords": "authorization,acl,rbac,policy,auth,role,permissions",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "targe",
    "package_url": "https://pypi.org/project/targe/",
    "platform": "",
    "project_url": "https://pypi.org/project/targe/",
    "project_urls": {
      "Documentation": "https://github.com/kodemore/targe",
      "Homepage": "https://github.com/kodemore/targe",
      "Repository": "https://github.com/kodemore/targe"
    },
    "release_url": "https://pypi.org/project/targe/0.3.3/",
    "requires_dist": [
      "gid (>=1.0.1,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Powerful and flexible policy based authorization library.",
    "version": "0.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12099211,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a260e4a5d29c7b392562262d0f5c3825f5e7f71ee1fee679e9134f38682b3de",
          "md5": "39332906346a4759bbd855266501da38",
          "sha256": "c97a2ef9a63263988e4aca0a0702248f958dbf47839d77f14fdf89b4f5ad37b2"
        },
        "downloads": -1,
        "filename": "targe-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39332906346a4759bbd855266501da38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 11800,
        "upload_time": "2021-09-16T17:53:52",
        "upload_time_iso_8601": "2021-09-16T17:53:52.624520Z",
        "url": "https://files.pythonhosted.org/packages/4a/26/0e4a5d29c7b392562262d0f5c3825f5e7f71ee1fee679e9134f38682b3de/targe-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dca4a9c59c5dba08d8d1134da674b1d53863e2ff24435327331bfcc07a9c530",
          "md5": "e49c2d6f858ee5b4de0eeebbe0c4f11d",
          "sha256": "5fdeb34551d8bae79844bf0f91ea656af1c1851d88cb495278c4c0095a158d45"
        },
        "downloads": -1,
        "filename": "targe-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e49c2d6f858ee5b4de0eeebbe0c4f11d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 14637,
        "upload_time": "2021-09-16T17:53:54",
        "upload_time_iso_8601": "2021-09-16T17:53:54.059045Z",
        "url": "https://files.pythonhosted.org/packages/2d/ca/4a9c59c5dba08d8d1134da674b1d53863e2ff24435327331bfcc07a9c530/targe-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e45a15418b5036847fee27c5b1c1174648ee99f1f20362d102e3ec4d6f29ce6b",
          "md5": "c1234b5e900c03a63e8dcafac195d459",
          "sha256": "c30b81a871ab9a3d45303e6a4633decec73cdc6d3153017e79383464fcf9f1a1"
        },
        "downloads": -1,
        "filename": "targe-0.1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1234b5e900c03a63e8dcafac195d459",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 11823,
        "upload_time": "2021-09-16T17:49:47",
        "upload_time_iso_8601": "2021-09-16T17:49:47.924658Z",
        "url": "https://files.pythonhosted.org/packages/e4/5a/15418b5036847fee27c5b1c1174648ee99f1f20362d102e3ec4d6f29ce6b/targe-0.1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ecc3f52aa811f208b972edb0d321adcdf57b20108eeee2d04aa10ed16286e04",
          "md5": "8b82e0a48b56ab09e1349b66e4814b11",
          "sha256": "ad316b4fef03359a77206a987b6da20ed729e0fe5ceb9bf107ffd99ca643948a"
        },
        "downloads": -1,
        "filename": "targe-0.1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "8b82e0a48b56ab09e1349b66e4814b11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 14632,
        "upload_time": "2021-09-16T17:49:49",
        "upload_time_iso_8601": "2021-09-16T17:49:49.808318Z",
        "url": "https://files.pythonhosted.org/packages/1e/cc/3f52aa811f208b972edb0d321adcdf57b20108eeee2d04aa10ed16286e04/targe-0.1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1cd9a59d1ac79be4db452c5959e7bfe76b5e2dc014a7a556899020162c95fc9",
          "md5": "6b81c90bc288b3e596735935679dca5a",
          "sha256": "e1896ce9a9258d30ea599cc823d0f1fe12d5dd71e347b3b44396c13c3e1f6411"
        },
        "downloads": -1,
        "filename": "targe-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b81c90bc288b3e596735935679dca5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13497,
        "upload_time": "2021-11-12T22:44:15",
        "upload_time_iso_8601": "2021-11-12T22:44:15.082951Z",
        "url": "https://files.pythonhosted.org/packages/b1/cd/9a59d1ac79be4db452c5959e7bfe76b5e2dc014a7a556899020162c95fc9/targe-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d08da0ff3285758ca440e08996ecea695b88bc723d2355daf50b67d15d6fbfe1",
          "md5": "81572b347409ca7c55dbd033150dfd29",
          "sha256": "a3c81f181aa93df820c7fa739e783cc0125a0c7ca37c3ef3d22378620801c330"
        },
        "downloads": -1,
        "filename": "targe-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81572b347409ca7c55dbd033150dfd29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 17610,
        "upload_time": "2021-11-12T22:44:16",
        "upload_time_iso_8601": "2021-11-12T22:44:16.268490Z",
        "url": "https://files.pythonhosted.org/packages/d0/8d/a0ff3285758ca440e08996ecea695b88bc723d2355daf50b67d15d6fbfe1/targe-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "674103132fa50150be93753beee9392dcdee3d103c76593d8c09684037b20e0a",
          "md5": "f91388b2a929cf670c363b06a05cebab",
          "sha256": "ce1b78561e17445d867210b4a364023543bf27fde4907be77709fd7c0db10d78"
        },
        "downloads": -1,
        "filename": "targe-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f91388b2a929cf670c363b06a05cebab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13519,
        "upload_time": "2021-11-13T20:08:52",
        "upload_time_iso_8601": "2021-11-13T20:08:52.318555Z",
        "url": "https://files.pythonhosted.org/packages/67/41/03132fa50150be93753beee9392dcdee3d103c76593d8c09684037b20e0a/targe-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "222cb75bf07d9659724dd0858701f6a0c1ba1e80c91a8ea0dd8a781d418ffb55",
          "md5": "e3f1d221d92824ec59b75a7bc2b4fc5c",
          "sha256": "3594817495321c766ef1f7683781b7ae7f220ecde17a335e6bd85993a520e39f"
        },
        "downloads": -1,
        "filename": "targe-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3f1d221d92824ec59b75a7bc2b4fc5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 17641,
        "upload_time": "2021-11-13T20:08:53",
        "upload_time_iso_8601": "2021-11-13T20:08:53.470926Z",
        "url": "https://files.pythonhosted.org/packages/22/2c/b75bf07d9659724dd0858701f6a0c1ba1e80c91a8ea0dd8a781d418ffb55/targe-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62a99e1c3a0acc2b3c0184821f5d3034b1858c87e6467c5bdc85b0f32182a365",
          "md5": "6ba8bf356e03e447bb974f1bef727c14",
          "sha256": "6735fd4a2a45734bf485a79db35758610c835653a1fe649bb3d8b9cae4db459d"
        },
        "downloads": -1,
        "filename": "targe-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ba8bf356e03e447bb974f1bef727c14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13507,
        "upload_time": "2021-11-15T07:02:59",
        "upload_time_iso_8601": "2021-11-15T07:02:59.432884Z",
        "url": "https://files.pythonhosted.org/packages/62/a9/9e1c3a0acc2b3c0184821f5d3034b1858c87e6467c5bdc85b0f32182a365/targe-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "201e87847a60487df10440b903b2c0d256144d564ace71e6313e06ec9cd1864a",
          "md5": "f6ce7373b210fd213907cc4c2207d648",
          "sha256": "6f4b17700b5f4f069ec2e0b3d561ee5ade44b90724bb9bc77734a11ebd1bf880"
        },
        "downloads": -1,
        "filename": "targe-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6ce7373b210fd213907cc4c2207d648",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 17631,
        "upload_time": "2021-11-15T07:03:00",
        "upload_time_iso_8601": "2021-11-15T07:03:00.957591Z",
        "url": "https://files.pythonhosted.org/packages/20/1e/87847a60487df10440b903b2c0d256144d564ace71e6313e06ec9cd1864a/targe-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46763efd5a32d4d6752fdac290e8e310e3c3cf2ae1b128365fab9ce82c195cf0",
          "md5": "3fb97adfdd95271226b36c008c3b0a19",
          "sha256": "de8fc5925269981f766ef5a4e70a064aaed193555d6af7a9cc87fa9f22fa4792"
        },
        "downloads": -1,
        "filename": "targe-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fb97adfdd95271226b36c008c3b0a19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13526,
        "upload_time": "2021-11-16T05:30:09",
        "upload_time_iso_8601": "2021-11-16T05:30:09.127199Z",
        "url": "https://files.pythonhosted.org/packages/46/76/3efd5a32d4d6752fdac290e8e310e3c3cf2ae1b128365fab9ce82c195cf0/targe-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75723b756d1d5b13ed2509404e27f4cfb26222cedd116c782b644e66a2c3282e",
          "md5": "f19c4448efa4c3e9869d05e30b9a8800",
          "sha256": "e2dc5e9983b4ab3bfb0aae26ea0dee554c6ed734c65787c8ccb0bfb5a9cb267b"
        },
        "downloads": -1,
        "filename": "targe-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f19c4448efa4c3e9869d05e30b9a8800",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 17656,
        "upload_time": "2021-11-16T05:30:10",
        "upload_time_iso_8601": "2021-11-16T05:30:10.687263Z",
        "url": "https://files.pythonhosted.org/packages/75/72/3b756d1d5b13ed2509404e27f4cfb26222cedd116c782b644e66a2c3282e/targe-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f7ac9af9561f6034efb6f1e266a3cd6a93a3b531c576263989a34588c58d38",
          "md5": "cd35a6e33e525e984979a50e869e38b9",
          "sha256": "3f403d65c28fbd0c95ef868eddb16d08622b0ed288434be5de626a4f328491e9"
        },
        "downloads": -1,
        "filename": "targe-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd35a6e33e525e984979a50e869e38b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13528,
        "upload_time": "2021-11-23T06:27:58",
        "upload_time_iso_8601": "2021-11-23T06:27:58.512273Z",
        "url": "https://files.pythonhosted.org/packages/21/f7/ac9af9561f6034efb6f1e266a3cd6a93a3b531c576263989a34588c58d38/targe-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83773c964babf74fe4b3e2067011a45623c1e104d199891261d90be58f49b97d",
          "md5": "10b8258e961ef46477bf3f3007d13e62",
          "sha256": "89d4c030ad0d419db021dcd1d3e96672c646108e857940766b53d0d81485face"
        },
        "downloads": -1,
        "filename": "targe-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "10b8258e961ef46477bf3f3007d13e62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 17652,
        "upload_time": "2021-11-23T06:28:00",
        "upload_time_iso_8601": "2021-11-23T06:28:00.061926Z",
        "url": "https://files.pythonhosted.org/packages/83/77/3c964babf74fe4b3e2067011a45623c1e104d199891261d90be58f49b97d/targe-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21f7ac9af9561f6034efb6f1e266a3cd6a93a3b531c576263989a34588c58d38",
        "md5": "cd35a6e33e525e984979a50e869e38b9",
        "sha256": "3f403d65c28fbd0c95ef868eddb16d08622b0ed288434be5de626a4f328491e9"
      },
      "downloads": -1,
      "filename": "targe-0.3.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd35a6e33e525e984979a50e869e38b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 13528,
      "upload_time": "2021-11-23T06:27:58",
      "upload_time_iso_8601": "2021-11-23T06:27:58.512273Z",
      "url": "https://files.pythonhosted.org/packages/21/f7/ac9af9561f6034efb6f1e266a3cd6a93a3b531c576263989a34588c58d38/targe-0.3.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83773c964babf74fe4b3e2067011a45623c1e104d199891261d90be58f49b97d",
        "md5": "10b8258e961ef46477bf3f3007d13e62",
        "sha256": "89d4c030ad0d419db021dcd1d3e96672c646108e857940766b53d0d81485face"
      },
      "downloads": -1,
      "filename": "targe-0.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "10b8258e961ef46477bf3f3007d13e62",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 17652,
      "upload_time": "2021-11-23T06:28:00",
      "upload_time_iso_8601": "2021-11-23T06:28:00.061926Z",
      "url": "https://files.pythonhosted.org/packages/83/77/3c964babf74fe4b3e2067011a45623c1e104d199891261d90be58f49b97d/targe-0.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}