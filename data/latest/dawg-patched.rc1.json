{
  "info": {
    "author": "Taketomo Isazawa",
    "author_email": "taketomo.isazawa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "DAWG-patched\n============\n\nDAWG library patched so that it will install on newer versions of Python.\n\n.. image:: https://travis-ci.org/pytries/DAWG.png?branch=master\n    :target: https://travis-ci.org/pytries/DAWG\n\nThis package provides DAWG(DAFSA_)-based dictionary-like\nread-only objects for Python (2.x and 3.x).\n\nString data in a DAWG may take 200x less memory than in\na standard Python dict and the raw lookup speed is comparable;\nit also provides fast advanced methods like prefix search.\n\n.. _DAFSA: https://en.wikipedia.org/wiki/Deterministic_acyclic_finite_state_automaton\n\n* Docs: https://dawg.readthedocs.org\n* Source code: https://github.com/pytries/DAWG\n* Issue tracker: https://github.com/pytries/DAWG/issues\n\nLicense\n=======\n\nWrapper code is licensed under MIT License.\nBundled `dawgdic`_ C++ library is licensed under BSD license.\nBundled libb64_ is Public Domain.\n\n.. _dawgdic: https://code.google.com/p/dawgdic/\n.. _libb64: http://libb64.sourceforge.net/\n\n\n\nChanges\n=======\n\n0.8.0 (2020-02-19)\n------------------\n\n* Python 3.8 support is added\n* Python 3.2, 3.3 and 3.4 support is dropped\n* Extension is rebuilt with Cython 0.29.15\n\n0.7.8 (2015-04-18)\n------------------\n\n* extra type annotations are added to make the code a bit faster;\n* mercurial mirror at bitbucket is dropped;\n* wrapper is rebuilt with Cython 0.22.\n\n0.7.7 (2014-11-19)\n------------------\n\n* ``DAWG.b_prefixes`` method for avoiding utf8 encoding/decoding\n  (thanks Ikuya Yamada);\n* wrapper is rebuilt with Cython 0.21.1.\n\n0.7.6 (2014-08-10)\n------------------\n\n* Wrapper is rebuilt with Cython 0.20.2 to fix some issues.\n\n0.7.5 (2014-06-05)\n------------------\n\n* Switched to setuptools;\n* some wheels are uploaded to pypi.\n\n0.7.4 (2014-05-29)\n------------------\n\n* Fixed a bug in DAWG building: input should be sorted according to its\n  binary representation.\n\n0.7.3 (2014-05-29)\n------------------\n\n* Wrapper is rebuilt with Cython 0.21dev;\n* Python 3.4 compatibility is verified.\n\n0.7.2 (2013-10-03)\n------------------\n\n* ``has_keys_with_prefix(prefix)`` method (thanks\n  `Matt Hickford <https://github.com/matt-hickford>`_)\n\n0.7.1 (2013-05-25)\n------------------\n\n- Extension is rebuilt with Cython 0.19.1;\n- fixed segfault that happened on lookup from incorrectly loaded DAWG\n  (thanks Alex Moiseenko).\n\n0.7 (2013-04-05)\n----------------\n\n- IntCompletionDAWG\n\n0.6.1 (2013-03-23)\n------------------\n\n- Installation issues in environments with LC_ALL=C are fixed;\n- PyPy is officially unsupported now (use DAWG-Python_ with PyPy).\n\n.. _DAWG-Python: https://github.com/pytries/DAWG-Python\n\n0.6 (2013-03-22)\n----------------\n\n- many thread-safety bugs are fixed (at the cost of slowing library down).\n\n0.5.5 (2013-02-19)\n------------------\n\n- fix installation under PyPy (note: DAWG is slow under PyPy\n  and may have bugs).\n\n0.5.4 (2013-02-14)\n------------------\n\n- small tweaks for docstrings;\n- the extension is rebuilt using Cython 0.18.\n\n0.5.3 (2013-01-03)\n------------------\n\n- small improvements to ``.compile_replaces`` method;\n- benchmarks for ``.similar_items`` method;\n- the extension is rebuilt with Cython pre-0.18; this made\n  ``.prefixes`` and ``.iterprefixes`` methods faster\n  (up to 6x in some cases).\n\n0.5.2 (2013-01-02)\n------------------\n\n- tests are included in source distribution;\n- benchmark results in README was nonrepresentative because of my\n  broken (slow) Python 3.2 install;\n- installation is fixed under Python 3.x with ``LC_ALL=C`` (thanks\n  Jakub Wilk).\n\n0.5.1 (2012-10-11)\n------------------\n\n- better error reporting while building DAWGs;\n- ``__contains__`` is fixed for keys with zero bytes;\n- ``dawg.Error`` exception class;\n- building of ``BytesDAWG`` and ``RecordDAWG`` fails instead of\n  producing incorrect results if some of the keys has unsupported characters.\n\n\n0.5 (2012-10-08)\n----------------\n\nThe storage scheme of ``BytesDAWG`` and ``RecordDAWG`` is changed in\nthis release in order to provide the alphabetical ordering of items.\n\nThis is a backwards-incompatible release. In order to read ``BytesDAWG`` or\n``RecordDAWG`` created with previous versions of DAWG use ``payload_separator``\nconstructor argument::\n\n    >>> BytesDAWG(payload_separator=b'\\xff').load('old.dawg')\n\n\n0.4.1 (2012-10-01)\n------------------\n\n- Segfaults with empty DAWGs are fixed by updating dawgdic to latest svn.\n\n0.4 (2012-09-26)\n----------------\n\n- ``iterkeys``, ``iteritems`` and ``iterprefixes`` methods\n  (thanks Dan Blanchard).\n\n0.3.2 (2012-09-24)\n------------------\n\n- ``prefixes`` method for finding all prefixes of a given key.\n\n0.3.1 (2012-09-20)\n------------------\n\n- bundled dawgdic C++ library is updated to the latest version.\n\n0.3 (2012-09-13)\n----------------\n\n- ``similar_keys``, ``similar_items`` and ``similar_item_values`` methods\n  for more permissive lookups (they may be useful e.g. for umlaut handling);\n- ``load`` method returns self;\n- Python 3.3 support.\n\n0.2 (2012-09-08)\n----------------\n\nGreatly improved memory usage for DAWGs loaded with ``load`` method.\n\nThere is currently a bug somewhere in a wrapper so DAWGs loaded with\n``read()`` method or unpickled DAWGs uses 3x-4x memory compared to DAWGs\nloaded with ``load()`` method. ``load()`` is fixed in this release but\nother methods are not.\n\n0.1 (2012-09-08)\n----------------\n\nInitial release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ti250/DAWG-patched",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DAWG-Patched",
    "package_url": "https://pypi.org/project/DAWG-Patched/",
    "platform": "",
    "project_url": "https://pypi.org/project/DAWG-Patched/",
    "project_urls": {
      "Homepage": "https://github.com/ti250/DAWG-patched"
    },
    "release_url": "https://pypi.org/project/DAWG-Patched/0.9.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast and memory efficient DAWG (DAFSA) for Python",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12387609,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0bc2ada889d28ebf0d3be0ba3142a5cdc8417f83e05002d7c2325a44f864ce2",
          "md5": "7b93d1be496a1ca3e51c37a4bef80394",
          "sha256": "954e990044322b8dd17a6c44e38d8ab17930e93a2c53a55898d8cf71a0ab96a4"
        },
        "downloads": -1,
        "filename": "DAWG-Patched-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b93d1be496a1ca3e51c37a4bef80394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 376839,
        "upload_time": "2021-12-23T07:37:52",
        "upload_time_iso_8601": "2021-12-23T07:37:52.457092Z",
        "url": "https://files.pythonhosted.org/packages/f0/bc/2ada889d28ebf0d3be0ba3142a5cdc8417f83e05002d7c2325a44f864ce2/DAWG-Patched-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0bc2ada889d28ebf0d3be0ba3142a5cdc8417f83e05002d7c2325a44f864ce2",
        "md5": "7b93d1be496a1ca3e51c37a4bef80394",
        "sha256": "954e990044322b8dd17a6c44e38d8ab17930e93a2c53a55898d8cf71a0ab96a4"
      },
      "downloads": -1,
      "filename": "DAWG-Patched-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b93d1be496a1ca3e51c37a4bef80394",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 376839,
      "upload_time": "2021-12-23T07:37:52",
      "upload_time_iso_8601": "2021-12-23T07:37:52.457092Z",
      "url": "https://files.pythonhosted.org/packages/f0/bc/2ada889d28ebf0d3be0ba3142a5cdc8417f83e05002d7c2325a44f864ce2/DAWG-Patched-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}