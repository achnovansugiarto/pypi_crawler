{
  "info": {
    "author": "tandemdude",
    "author_email": "tandemdude1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# PySEL\n\nThe Python Simple Expression Language (PySEL) is a simple but powerful expression language that supports\nmanipulation and creation of basic python literals (`str`, `float`, `int`) using a majority of the available\noperators, but also offers notable features such as attribute/property accessors and method invocation, as well\nas a global scope at runtime in which you can inject any python object.\n\nThis is somewhat influenced by the \n[Spring Expression Language (SpEL)](https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html),\nwidely used by the Spring portfolio.\n\n## Installation\n\nPySEL can be installed using pip:\n\n```shell\n$ pip install pysel-lang\n```\n\n## Feature Overview\n\nThe expression language supports the following functionality:\n\n- Literal expressions\n- Logical, relational and mathematical operators\n- Attribute/property access\n- Method invocation\n- Getitem (list indexing, slicing, dict accessing, etc)\n- Ternary operator\n- Environment value substitution\n\n## Expression Evaluation\n\nPySEL provides a utility class, `Expression` to allow you to run a valid expression in very few lines of code.\n\nFor example, the following expression, when evaluated, would return a string literal with value `Hello World!`:\n\n```python\n>>> import pysel\n>>> exp = pysel.Expression(\"'Hello World!'\")\n```\n\nTo evaluate any expression, call the `evaluate()` method of the `Expression` object:\n\n```python\n>>> import pysel\n>>> exp = pysel.Expression(\"'Hello World!\")\n>>> exp.evaluate()\n'Hello World!'\n```\n\nYou can also pass a mapping containing the execution environment for the expression. Any keys contained in the\nenvironment can be accessed from within an expression using an identifier - the name of the key:\n\n```python\n>>> import pysel\n>>> exp = pysel.Expression(\"foo\")\n>>> exp.evaluate({\"foo\": \"bar\"})\n'bar'\n```\n\nIf you do not wish to evaluate the expression immediately but would still like to know if it is syntactically valid,\nyou can call the `to_ast()` method of the `Expression` class. This will parse and validate the expression and return\nthe root node of the created abstract syntax tree.\n\nInvalid Expression:\n```python\n>>> import pysel\n>>> exp = pysel.Expression(\"'foo\")  # Invalid due to unclosed quotes\n>>> exp.to_ast()\nTraceback (most recent call last):\n  ...\n    raise errors.ExpressionSyntaxError(\npysel.errors.ExpressionSyntaxError: Unexpected EOF while parsing\n    \"'foo\"\n     ^   \n```\n\nValid Expression:\n```python\n>>> import pysel\n>>> exp = pysel.Expression(\"'foo'\")\n>>> exp.to_ast()\nLiteral('foo')\n```\n\n## Language Reference\n\n### Literals\n\nPySEL currently supports three different types of literals - string literals, integer literals, and float literals.\n\nA string literal is any set of characters surrounded by a matching pair of quotes. Quotes can be either single quotation\nmarks (`'`) or double quotation marks (`\"`). You can also include quotation marks in the string by escaping them using\na backslash:\n\n```python\n>>> pysel.Expression(\"'foo'\").evaluate()\n'foo'\n>>> pysel.Expression('\"foo\"').evaluate()\n'foo'\n>>> pysel.Expression(\"'foo\\\\'s'\").evaluate()\n\"foo's\"\n```\n\nAn integer literal is any set of consecutive digits (`0-9`). Unlike Python, PySEL allows integer literals to begin\nwith a `0` digit:\n\n```python\n>>> pysel.Expression(\"1234\").evaluate()\n1234\n>>> pysel.Expression(\"01234\").evaluate()\n1234\n```\n\nA float literal is any set of consecutive digits `0-9` followed by a dot `.`. Float literals can also optionally\ninclude digits after the decimal place - if none are specified, e.g. `2.` then the number will still parse correctly:\n\n```python\n>>> pysel.Expression(\"1.5\").evaluate()\n1.5\n>>> pysel.Expression(\"1.\").evaluate()\n1.0\n```\n\n### Logical, relational and mathematical operators\n\nThe logical operators that are supported are `&&` (`and`), `||` (`or`) and `!` (`not`). Their use is shown below:\n\n```python\n# --- NOT ---\n>>> pysel.Expression(\"!foo\").evaluate({\"foo\": True})\nFalse\n>>> pysel.Expression(\"!foo\").evaluate({\"foo\": False})\nTrue\n# --- AND ---\n>>> pysel.Expression(\"foo && bar\").evaluate({\"foo\": True, \"bar\": False})\nFalse\n>>> pysel.Expression(\"foo && bar\").evaluate({\"foo\": True, \"bar\": True})\nTrue\n# --- OR ---\n>>> pysel.Expression(\"foo || bar\").evaluate({\"foo\": False, \"bar\": False})\nFalse\n>>> pysel.Expression(\"foo || bar\").evaluate({\"foo\": False, \"bar\": True})\nTrue\n```\n\nThe relational operators that are supported are `==`, `!=`, `>`, `<`, `>=`, and `<=` - all using standard operator\nnotation:\n\n```python\n>>> pysel.Expression(\"2 == 2\").evaluate()\nTrue\n>>> pysel.Expression(\"2 < 5\").evaluate()\nTrue\n>>> pysel.Expression(\"2 != 2\").evaluate()\nFalse\n...\n```\n\nPySEL supports all the same mathematical operators supported by Python, excluding the bitwise operators (for now).\nOperator precedence follows the order specified in the \"Operator Precedence\" section.\n\n```python\n>>> pysel.Expression(\"2 + 2\").evaluate()\n4\n>>> pysel.Expression(\"2 * 3\").evaluate()\n6\n>>> pysel.Expression(\"5 // 2\").evaluate()\n2\n...\n```\n\n### Attribute/property access\n\nAttribute access in PySEL functions identically to that of Python - using the `.` operator:\n\n```python\n>>> pysel.Expression(\"'foo'.__class__\").evaluate()\n<class 'str'>\n```\n\nYou can also chain attribute accessors to an unlimited depth, as with python:\n\n```python\n>>> pysel.Expression(\"'foo'.__class__.__name__\").evaluate()\n'str'\n```\n\n### Method invocation\n\nAs with attribute access, methods are invoked identically to the way you would using Python:\n\n```python\n>>> pysel.Expression(\"str()\").evaluate()\n''\n```\n\nPySEL also supports calling methods with an infinite number of arguments - however you should note that all\narguments will be passed **positionally**. Keyword arguments are not implemented:\n\n```python\n>>> pysel.Expression(\"str(10)\").evaluate()\n'10'\n```\n\n### Getitem (indexing, slicing, dict accessing)\n\nPySEL's syntax for this is completely identical to Python's. A pair of square brackets immediately following any\nexpression are intepreted as a call to `object.__getitem__`, as with Python. This allows you to perform indexing,\nslicing, and dictionary accessing as you would normally:\n\n```python\n>>> pysel.Expression(\"'foobar'[0]\").evaluate()\n'f'\n>>> pysel.Expression(\"'foobar'[::-1]\").evaluate()\n'raboof'\n>>> pysel.Expression(\"dict['foo']\").evaluate({\"dict\": {\"foo\": \"bar\"}})\n'bar'\n```\n\n### Ternary operator\n\nPySEL supports the standard ternary operator found in many other languages including but not limited\nto: C, JS, Java, etc. \n\nThe syntax is: `condition ? when_true : when_false`.\n\nThis is functionally equivalent to:\n```python\nwhen_true if some_condition else when_false\n```\n\nExample:\n```python\n>>> pysel.Expression(\"cond ? 'foo' : 'bar'\").evaluate({\"cond\": True})\n'foo'\n>>> pysel.Expression(\"cond ? 'foo' : 'bar'\").evaluate({\"cond\": False})\n'bar'\n```\n\n### Environment value substitution\n\nAs you may have seen in the previous sections, PySEL allows values to be substituted in place of identifiers in\nany given expression. When calling `Expression.evaluate()`, you can optionally pass a mapping of identifier name\nto value which will be accessible from the expression when it is run:\n\n```python\n>>> pysel.Expression(\"foo\").evaluate({\"foo\": \"bar\"})\n'bar'\n```\n\nThe default environment contains four identifiers - `str`, `int`, `float` and `bool` - which are intended to be used\nfor casting values to different types within expressions, but of course you can use them for whatever you wish.\n\nIf you pass a mapping to the `evaluate` method, and some of the identifier names conflict with the ones mentioned above,\nthen the default identifiers will be overridden with the value that you passed:\n\n```python\n>>> pysel.Expression(\"str\").evaluate()\n<class 'str'>\n>>> pysel.Expression(\"str\").evaluate({\"str\": \"foo\"})\n'foo'\n```\n\n## Operator Precedence\n\n- Literals, parentheses\n- Accessor (`.`, i.e. `foo.bar`)\n- Method call (i.e. `foo()`), getitem (i.e. `'foo'[0]`)\n- `**` (exponent)\n- Unary `-`, `+`\n- `*`, `/`, `//`, `%`\n- Binary `-`, `+`\n- `==`, `!=`, `>`, `<`, `>=`, `<=`\n- `!`\n- `&&`\n- `||`\n- Ternary (i.e. `expr ? expr : expr`)\n\n## Grammar Specification\n\nNote that this does not cover operator precedence, see the above section for that information.\n\nThe below is written using [Extended Backus-Naur form](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form):\n\n```ebnf\nall characters = ? All characters valid in a python string ?;\n\nletter = ? All characters in set [a-zA-Z] ?;\n\ndigit = ? All characters in set [0-9] ?;\n\nunop = \"-\" | \"+\" | \"!\";\n\nbinop = \"==\" | \"!=\" | \">\" | \"<\" | \">=\" | \"<=\" | \"&&\" | \"||\" |\n        \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"//\" | \"**\";\n\nint = { digit };\n\nfloat = int, \".\" [, int];\n\nstr = (\"'\" [, { all characters - \"'\" | \"\\'\" }], \"'\") |\n        ('\"' [, { all characters - '\"' | '\\\"' }], '\"');\n\nexpr = int | str | float | expr binop expr | unop expr | ternary | identifier | accessor | methodcall | getitem;\n\nternary = expr, \"?\", expr, \":\", expr;\n\nidentifier = (letter | \"_\") [, { letter | digit | \"_\" }];\n\naccessor = expr, \".\", identifier;\n\nmethodcall = expr, \"(\", expr [, { \",\", expr }], \")\";\n\nslice = [expr, ] \":\" [, expr] [, \":\" [expr]]\n\ngetitem = expr \"[\", slice | expr, \"]\"\n```\n\n# TODO\n\n- Docstrings\n- Doc generation\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tandemdude/pysel",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysel-lang",
    "package_url": "https://pypi.org/project/pysel-lang/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysel-lang/",
    "project_urls": {
      "Homepage": "https://github.com/tandemdude/pysel"
    },
    "release_url": "https://pypi.org/project/pysel-lang/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8.0,<3.11",
    "summary": "A simple but powerful embedded expression language for Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14936953,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "967f7414c75cb930d3f56795cd670122d1b162e2b11ef85829d2b30dd7f188de",
          "md5": "0ec0c0147b53f3909c29eb040346ad80",
          "sha256": "1da10f7a56c9f4bfb0ce73ef23219644bf4b3759d87c83376df5751e45fa1862"
        },
        "downloads": -1,
        "filename": "pysel_lang-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ec0c0147b53f3909c29eb040346ad80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0,<3.11",
        "size": 14857,
        "upload_time": "2022-08-27T12:21:11",
        "upload_time_iso_8601": "2022-08-27T12:21:11.460410Z",
        "url": "https://files.pythonhosted.org/packages/96/7f/7414c75cb930d3f56795cd670122d1b162e2b11ef85829d2b30dd7f188de/pysel_lang-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "827d3bcad40ca0b427bd65b87e928297479b3753757656ce8bd4fdb4f2e56d8c",
          "md5": "0b104fa82957c8ccc19889161a703e9a",
          "sha256": "45191ecb70974b483403b4fb8d8b33817e1ca236d01c00a25a8069e4e855a6bf"
        },
        "downloads": -1,
        "filename": "pysel-lang-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b104fa82957c8ccc19889161a703e9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0,<3.11",
        "size": 14701,
        "upload_time": "2022-08-27T12:21:13",
        "upload_time_iso_8601": "2022-08-27T12:21:13.363297Z",
        "url": "https://files.pythonhosted.org/packages/82/7d/3bcad40ca0b427bd65b87e928297479b3753757656ce8bd4fdb4f2e56d8c/pysel-lang-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d57374f81702c0ba79994627cac95b761f464d50b26290f091a4ae2b83a54bfd",
          "md5": "8f2f1eec3674f46120191d5b64aee0be",
          "sha256": "9038db4d6aff9781c438cd435e1e0db725a66af1534fa2318f553734542a0c29"
        },
        "downloads": -1,
        "filename": "pysel_lang-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f2f1eec3674f46120191d5b64aee0be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0,<3.11",
        "size": 14920,
        "upload_time": "2022-08-30T15:31:45",
        "upload_time_iso_8601": "2022-08-30T15:31:45.801730Z",
        "url": "https://files.pythonhosted.org/packages/d5/73/74f81702c0ba79994627cac95b761f464d50b26290f091a4ae2b83a54bfd/pysel_lang-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d18de3e14ba452f1d304bf33fab89d83277d85b62d2b5eb40cbff5f70f5bbfe",
          "md5": "f23042dfa0d056b9f2f7baed4cacc0ad",
          "sha256": "a0c55c36c31f1e99d2aadd932dccb1e05bfb3d2b59e77e073945605a7ec0bf85"
        },
        "downloads": -1,
        "filename": "pysel-lang-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f23042dfa0d056b9f2f7baed4cacc0ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0,<3.11",
        "size": 14833,
        "upload_time": "2022-08-30T15:31:48",
        "upload_time_iso_8601": "2022-08-30T15:31:48.497110Z",
        "url": "https://files.pythonhosted.org/packages/9d/18/de3e14ba452f1d304bf33fab89d83277d85b62d2b5eb40cbff5f70f5bbfe/pysel-lang-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d57374f81702c0ba79994627cac95b761f464d50b26290f091a4ae2b83a54bfd",
        "md5": "8f2f1eec3674f46120191d5b64aee0be",
        "sha256": "9038db4d6aff9781c438cd435e1e0db725a66af1534fa2318f553734542a0c29"
      },
      "downloads": -1,
      "filename": "pysel_lang-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f2f1eec3674f46120191d5b64aee0be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0,<3.11",
      "size": 14920,
      "upload_time": "2022-08-30T15:31:45",
      "upload_time_iso_8601": "2022-08-30T15:31:45.801730Z",
      "url": "https://files.pythonhosted.org/packages/d5/73/74f81702c0ba79994627cac95b761f464d50b26290f091a4ae2b83a54bfd/pysel_lang-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d18de3e14ba452f1d304bf33fab89d83277d85b62d2b5eb40cbff5f70f5bbfe",
        "md5": "f23042dfa0d056b9f2f7baed4cacc0ad",
        "sha256": "a0c55c36c31f1e99d2aadd932dccb1e05bfb3d2b59e77e073945605a7ec0bf85"
      },
      "downloads": -1,
      "filename": "pysel-lang-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f23042dfa0d056b9f2f7baed4cacc0ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0,<3.11",
      "size": 14833,
      "upload_time": "2022-08-30T15:31:48",
      "upload_time_iso_8601": "2022-08-30T15:31:48.497110Z",
      "url": "https://files.pythonhosted.org/packages/9d/18/de3e14ba452f1d304bf33fab89d83277d85b62d2b5eb40cbff5f70f5bbfe/pysel-lang-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}