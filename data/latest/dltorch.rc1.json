{
  "info": {
    "author": "Junbo Zhao",
    "author_email": "zhaojb17@mails.tsinghua.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## DLtorch: An Extensible Deep Learning Framework based on Pytorch\n\n## Introduction\nWith the rapid development of deep learning technology in the field of artificial intelligence, \na series of deep learning frameworks, such as TensorFlow, Jittor, Pytorch, have been born. \nAmong which, pytorch as a rising star, has the advantages of python-like syntax and ease of network construction.\nHowever, using the native pytorch framework to train a deep neural network (DNN) still requires a lot of codes and work. \nFor this reason, we developed DLtorch, an extensible deep learning framework based on pytorch, to quickly implement DNN algorithms.\n\n### Components of a DNN training system\nGenerally, a typical DNN training system, can be categorized into components below. \nAnd in DLtorch framework, the interface between these components is somehow well-defined.\n```\nComponents:\n  -- dataset             The dataset to train and test on.\n  -- criterion           Crierion used for training.\n  -- model               Neural network.\n  -- optimizer           Define how to optimize the parameters of a network.\n  -- lr_scheduler        Define how to adjust the learning rate while training.\n  -- objective           Define the loss, accuracy, reward and other statistics while training.\n  -- trainer             Define how to train a model.\n```\nFlow of DLtorch is shown below.\n![Flow](flow.png)\n\n## Install\nUsing a virtual python environment is encouraged. For example, with Anaconda, you could run `conda create -n DLtorch python==3.7.3 pip` first.\n* Supported python versions: 3.6, 3.7\n* Supported Pytorch versions: >=1.0.0, <1.5.0\nTo install `DLtorch`, run `pip install DLtorch` directly or `python setup.py build && python setup.py install` after cloning this project.\n\n## Usage\nAfter installation, you can run `DLtorch --help` to see what sub-commands are available.\nOutput of an example run (version 1.0.0):\n```\nUsage: DLtorch [OPTIONS] COMMAND [ARGS]...\n\n  The DLtorch framework command line interface.\n\nOptions:\n  --version                Show the version and exit.\n  --local_rank  INTEGER    The rank of this process  [default: -1]\n  --help                   Show this message and exit.\n\nCommands:\n  components               Show All The Registered Components\n  test                     Test Model\n  train                    Train Model\n```\n\n### Run DNN Training\nYou can run `DLtorch train --help` to see how to train a model.\nOutput of an example run (version 1.0.0):\n```\nUsage: DLtorch [OPTIONS] COMMAND [ARGS]...\n\n  Train model\n\nOptions:\n  --seed INTEGER           The random seed to run training\n  --load  TEXT             The directory to load checkpoint (If not given, train from scratch)\n  --traindir TEXT          The directory to save checkpoints (If not given, nothing will be saved)\n  --device [cpu|cuda]      cpu or cuda [default: cuda]\n  --gpus  TEXT             Gpus to use [default: 0]\n  --register_file TEXT     Register_file\n  --save-every INTEGER     Number of epochs to save once\n  --help                   Show this message and exit.\n```\nTry training a ResNet-18 net on cifar10 from scratch, the results (including configuration backup, training log, checkpoints, statistics, training curves) will be saved in `<TRAIN_DIR>`). Nothing will be saved if `<TRAIN_DIR>` isn't given.\n\n```\nDLtorch train examples/cifar10_basic.yaml --gpus 0 --seed 123 --save-every <SAVE_EVERY> --train-dir <TRAIN_DIR>\n```\n\n### Run DNN Testing\nYou can run `DLtorch test --help` to see how to test a model.\nOutput of an example run (version 1.0.0):\n```\nUsage: DLtorch [OPTIONS] COMMAND [ARGS]...\n\n  Test model\n\nOptions:\n  --seed INTEGER           The random seed to run testing\n  --load  TEXT             The directory to load checkpoint\n  --testdir TEXT           The directory to save log and configuration\n  --device [cpu|cuda]      cpu or cuda [default: cuda]\n  --gpus  TEXT             Gpus to use [default: 0]\n  --dataset TEXT           Datasets to test on [default: test]\n  --register_file TEXT     Register_file\n  --help                   Show this message and exit.\n```\nTry testing a pretrained resnet-18 net on cifar10, the results (including configuration backup, testing log) will be saved in `<TEST_DIR>`). Nothing will be saved if `<TEST_DIR>` isn't given.\n\n```\nDLtorch test examples/cifar10_basic.yaml --gpus 0 --load <CHECKPOINT_DIR> --dataset test --device cuda --testdir <TEST_DIR>\n```\n\n### Show DLtorch Registered Components\nOnly components registered by DLtorch framework can be used while training and testing. Components registered in our framework include those supported by Pytorch and those implemented by us. \nRun `DLtorch components` to see what components are implemented.\n```\nUsage: DLtorch components [OPTIONS]\n\n  Show All The Registered Components\n\nOptions:\n  --register_file TEXT  Register_file\n  --help                Show this message and exit.\n```\n\n### Components Registeration\nDLtorch framework itself only support components implemented in our framework and Pytorch. To use new designed components, they have to be registered into DLtorch before using.\nIn command line, we provide a registeration interface `--register_file`. To use new components, it must be defined in a python file. And a function named `register`, in which components are rigistered into DLtorch, must be provided in it.\nWe provide APIs for registering different components as below. Details can be seen in our code.\n\n```\nDLtorch.components.regist_Criterion  # Regist a criterion\nDLtorch.components.regist_scheduler  # Regist a learning rate scheduler\nDLtorch.components.regist_model      # Regist a model\nDLtorch.components.regist_objective  # Regist an objective (subclass \"BaseObjective\")\nDLtorch.components.regist_optimizer  # Regist an optimizer\nDLtorch.components.regist_trainer    # Regist a trainer (subclass \"BaseFinalTrainer\")\n```\n\nFor examples, try training a ResNet-18 net on cifar10 from scratch using a new designed component `ExampleNewObjective` defined and registed in `examples/example_new_objective.py`.\n\n```\nDLtorch train examples/register_example.yaml --gpus 0 --seed 123 --save-every <SAVE_EVERY> --train-dir <TRAIN_DIR> --register_file examples/example_new_objective.py \n```\n\n### Adversarial Attack & Adversarial Training\nWe implement adversarial attack and adversarial training in our framework. It's split into two parts: adversarial example generator and adversarial objective. Currently, we only support FGSM and PGD attack. You can implement your own by subclassing `BaseAdvGenerator` and `ClassificationAdversarialObjective`. Welcome to fork us and share your implementation.\n\nTry adversarially training a resnet-18 net on cifar10 with PGD method.\n\n```\nDLtorch test examples/cifar10_adv.yaml --gpus 0 --seed 123 --save-every <SAVE_EVERY> --train-dir <TRAIN_DIR>\n```\n\n### Notation\n* At present, DLtorch framework only support CNN. Welcome to help improve this framework, whether it's contributing code or proposing improvement plans. \n* Due to developer's level limitation, there may be bugs in the code. If you encounter, please contact to resolve.\n\n### Acknowlegdements\nOur implementation refers to the codes in repositories below. Thanks for their help.\n* [DARTS](https://github.com/quark0/darts)\n* [awnas](https://github.com/walkerning/aw_nas)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zhaojb17/DLtorch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DLtorch",
    "package_url": "https://pypi.org/project/DLtorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/DLtorch/",
    "project_urls": {
      "Homepage": "https://github.com/zhaojb17/DLtorch"
    },
    "release_url": "https://pypi.org/project/DLtorch/1.0.0/",
    "requires_dist": [
      "torch (<1.5.0,>=1.0.0)",
      "torchvision (>=0.4.0)",
      "numpy",
      "click",
      "matplotlib",
      "torchviz"
    ],
    "requires_python": "",
    "summary": "Deep Learning Framework based on Pytorch",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8061349,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa4ac0a671504d9ba74a1ea35b1e1e046494a9a6ef750728b29cd394650f7e49",
          "md5": "48d52ab361aa6ec0d32d6614cce0d4b0",
          "sha256": "c7c2eea222924d60b9552ea94022f460779fdeb2b493e460cd3a0c2e26a1baea"
        },
        "downloads": -1,
        "filename": "DLtorch-1.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "48d52ab361aa6ec0d32d6614cce0d4b0",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 78922,
        "upload_time": "2020-08-28T14:54:24",
        "upload_time_iso_8601": "2020-08-28T14:54:24.847969Z",
        "url": "https://files.pythonhosted.org/packages/aa/4a/c0a671504d9ba74a1ea35b1e1e046494a9a6ef750728b29cd394650f7e49/DLtorch-1.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f24c2e31cc0a3e09677cd6c4afb16f927c9371d9ae5c308ad9c4cdc749086562",
          "md5": "2653688ac02ef97f800771e8da2cfcae",
          "sha256": "19bbac78e65be4926c9e8faf225520b1060689f367a52692b43f61ee2951622f"
        },
        "downloads": -1,
        "filename": "DLtorch-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2653688ac02ef97f800771e8da2cfcae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36031,
        "upload_time": "2020-08-28T14:54:22",
        "upload_time_iso_8601": "2020-08-28T14:54:22.194572Z",
        "url": "https://files.pythonhosted.org/packages/f2/4c/2e31cc0a3e09677cd6c4afb16f927c9371d9ae5c308ad9c4cdc749086562/DLtorch-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6be74b1b89a874571c9324b5afd5620e684f495fccd93997a2f41a658dab4eca",
          "md5": "e8be5ee47f445ae653b51d274ccdb92f",
          "sha256": "2cdac54ffb3ac96dfcab7ece432a7f7db81a54bdbf94d29133fcf2e3e44015ff"
        },
        "downloads": -1,
        "filename": "DLtorch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8be5ee47f445ae653b51d274ccdb92f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19507,
        "upload_time": "2020-08-28T14:54:26",
        "upload_time_iso_8601": "2020-08-28T14:54:26.385530Z",
        "url": "https://files.pythonhosted.org/packages/6b/e7/4b1b89a874571c9324b5afd5620e684f495fccd93997a2f41a658dab4eca/DLtorch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa4ac0a671504d9ba74a1ea35b1e1e046494a9a6ef750728b29cd394650f7e49",
        "md5": "48d52ab361aa6ec0d32d6614cce0d4b0",
        "sha256": "c7c2eea222924d60b9552ea94022f460779fdeb2b493e460cd3a0c2e26a1baea"
      },
      "downloads": -1,
      "filename": "DLtorch-1.0.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "48d52ab361aa6ec0d32d6614cce0d4b0",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 78922,
      "upload_time": "2020-08-28T14:54:24",
      "upload_time_iso_8601": "2020-08-28T14:54:24.847969Z",
      "url": "https://files.pythonhosted.org/packages/aa/4a/c0a671504d9ba74a1ea35b1e1e046494a9a6ef750728b29cd394650f7e49/DLtorch-1.0.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f24c2e31cc0a3e09677cd6c4afb16f927c9371d9ae5c308ad9c4cdc749086562",
        "md5": "2653688ac02ef97f800771e8da2cfcae",
        "sha256": "19bbac78e65be4926c9e8faf225520b1060689f367a52692b43f61ee2951622f"
      },
      "downloads": -1,
      "filename": "DLtorch-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2653688ac02ef97f800771e8da2cfcae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36031,
      "upload_time": "2020-08-28T14:54:22",
      "upload_time_iso_8601": "2020-08-28T14:54:22.194572Z",
      "url": "https://files.pythonhosted.org/packages/f2/4c/2e31cc0a3e09677cd6c4afb16f927c9371d9ae5c308ad9c4cdc749086562/DLtorch-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6be74b1b89a874571c9324b5afd5620e684f495fccd93997a2f41a658dab4eca",
        "md5": "e8be5ee47f445ae653b51d274ccdb92f",
        "sha256": "2cdac54ffb3ac96dfcab7ece432a7f7db81a54bdbf94d29133fcf2e3e44015ff"
      },
      "downloads": -1,
      "filename": "DLtorch-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e8be5ee47f445ae653b51d274ccdb92f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19507,
      "upload_time": "2020-08-28T14:54:26",
      "upload_time_iso_8601": "2020-08-28T14:54:26.385530Z",
      "url": "https://files.pythonhosted.org/packages/6b/e7/4b1b89a874571c9324b5afd5620e684f495fccd93997a2f41a658dab4eca/DLtorch-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}