{
  "info": {
    "author": "mFabrik Research Oy",
    "author_email": "info@mfabrik.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. contents:: :depth: 2\n\nIntroduction\n============\n\nEasy Template (collective.easytemplate) products brings easy dynamic texts to Plone. \nYou don't need to create full blown product just for few dynamic pages anymore - \nthe most simplest things can be typed straight from the visual editor.\n\nTemplating is a way to add simple programming logic to text output. \nThis products adds or enhances templating supports on various parts\nof Plone site.\n\nMotivation \n----------\n\nPlone lacks out of the box support for custom, extensible, \ntemplating support for content editors.\n\nUse cases\n---------\n\nPossible use cases are e.g.\n\n* Use unfiltered HTML on page body (<script> et. al)\n\n* Adding dynamic listings and tables on pages, like news listing\n\n* Adding dynamic email bodies, titles and receivers in content rules actions\n\n* Adding generated content to content rule action emails\n\n* Show different text to logged in and anonymous users\n\n* Creating a simple text portlet dynamically\n\n\nExample\n-------\n\nThe following example demostrates how text in Templated Document edit mode gets translated to generated HTML snippet in the view mode.\n\nYou write in Kupu::\n\n  Hello user!\n  \n  Please select one course from below:\n  \n  {{ list_folder(\"courses\") }}\n \nwill result to the output:\n\n  Hello user!\n  \n  Please select one course from below:\n  \n  * `Math <http://example.example>`_\n  \n  * `Marketing <http://example.example>`_\n  \n  * `Chemistry <http://example.example>`_\n\n `More information and examples <http://opensourcehacker.com/2009/07/30/putting-views-like-sitemap-into-plone-content-tree-using-easy-template-add-on/>`_.\n\nInstallation \n------------\n\nAdd to your buildout::\n\n\teggs = \n\t\tcollective.easytemplate\n\t\t\n\tzcml = \n\t\tcollective.easytemplate\n\t\nRun Add-on product installer for *Easy Template* product.\n\ncollective.easytemplate depends on `collective.templateengines <http://pypi.python.org/pypi?%3Aaction=pkg_edit&name=collective.templateengines>`_\nand `Jinja2 <http://pypi.python.org/pypi/Jinja2>`_ template engine. \n\nSecurity notice\n----------------\n\nBecause collective.easytemplate allows entering unsafe HTML, like <script> on the pages by default,\nits creation is limited to the users with Manager role. \n\nRunning unit tests\n------------------\n\nPython eggs Cheetah, Jinja2 and Products.LinguaPlone must be installed in order to run all unit tests.\n  \nAuthors\n-------\n\n* `Mikko Ohtamaa, opensourcehacker.com <http://opensourcehacker.com>`_ \n\n* Hans-Peter Locher [mr_savage]\n\n* [jensens]\n\nSponsorship\n------------\n\nThe development of this product was sponsored by `London School of Marketing <http://londonschoolofmarketing.com>`_.\n\n\n\n\nAbout the template engine backends\n==================================\n\nBy default, Jinja 2 template engine is used. \nPlease refer to `Jinja 2 documentation <http://jinja.pocoo.org/2/documentation/templates>`_\nfor syntax. This syntax is very easy non-XML syntax resembling Django templates.\n\nEasy syntax means that for the basic usage, no HTML knowledge is needed.\nYou can use template logic in both the HTML source code and visual editor views. \n\nTemplate engine is switchable in the application code. Besides Jinja, \nDjango and Cheetah engines are supported by `collective.templateengines <http://pypi.python.org/pypi?%3Aaction=pkg_edit&name=collective.templateengines>`_\nbackend. \n\nOnly on Jinja engine Zope security is supported. Other template \nengines do not provide compatible sandboxes.\n\nTemplated elements\n==================\n\nEasy Template product makes it possible to use templates in the following places.\n\nDocument\n--------\n\nUse Templated Document content type to add scriptable Plone pages.\n\nThis content item has a tab *Template* which allows you to adjust advanced\ntemplate properties:\n\n- *Show errors*: After checking this option the error messages will be available\n  to the user regardless whether he/she is admin\n \n- *Unfiltered template*: A field for raw HTML code input. This code is not \n  scrambled or filtered by WYSIWYG editing or HTML filtering functions.\n  \nYou can debug the template code by seeing the direct template engine output\nby appending */testTemplate* to the object url. It will return \nplain text view what the cooked template has eaten.\n\nFields and widgets\n------------------\n\n*collective.easytemplate.fields.TemplatedTextField* allows you to edit \ntemplated document code in Kupu and template is run in view mode. \nIt acts as replacement for Archetypes's TextField() for your custom content types.\n\nPortlets\n--------\n\nUse Templated Portlet portlet to add scripts to your portlets. Templated Portlet is based on `\n\nEnter the template code in the visual editor. Raw HTML editing is not yet supported here.\n\nPortlets have TALES *Expression* field to determine whether\nportlets should be visible or not. This allows showing\nand hiding portlets conditionally.\n\nThis is useful for special cases like\n\n* Showing portlets by language\n\n* Showing portlets for specific users only\n\n* Showing portlers for certain time\n\n* etc.\n\n`Read more how to write expressions here <http://plonemanual.twinapex.fi/content/expressions.html>`_.  \n\nEmail\n-----\n\nUse Templated Mail Action to add scripting to your content rules based outgoing email messages.\n\nTemplate expansion is available in all the fields: *recipients*, *subject* and *message*. You can dynamically\nlook up the receiver email based on the context object - it doesn't need to be a fixed address.\n\nBelow is an advanced example how to define templated outgoing email which is triggered from a workflow action.\n\nprofiles/defaul/contentrules.xml::\n\n\t<?xml version=\"1.0\"?>\n\t<contentrules>\n\t\t\n\t <rule name=\"email_local_coordinator_about_local_user_approval\" title=\"Send email to LC when new LU needs approval\"\n\t    description=\"Send email to local coordinators that management has approved new member to their center and local coordinator actions are needed\"\n\t    enabled=\"True\" event=\"Products.CMFCore.interfaces.IActionSucceededEvent\"\n\t    stop-after=\"False\">\n\t  <conditions>\n\t   <condition type=\"plone.conditions.WorkflowTransition\">\n\t    <property name=\"wf_transitions\">\n\t     <element>my_workflow_transition_id_here</element>\n\t    </property>\n\t   </condition>\n\t  </conditions>\n\t  <actions>\n\t\t\n\t   <action type=\"collective.easytemplate.actions.Mail\">\n\t    <property name=\"source\">{{ portal.getProperty('email_from_address') }}</property>\n\t    <property name=\"message\">\n\tNew local user {{ title }} needs approval.\n\t\n\tPlease approve local user at\n\t\n\t{{ context.absolute_url() }}\n\t\n\t    </property>\n\t    <property name=\"recipients\">{{ context.getTheReceiverEmailAddressFromTheContextSomehow() }}</property>\n\t    <property name=\"subject\">New local user {{ title }} needs approval</property>\n\t   </action>   \n\t  </actions>\n\t </rule>\n\t \n\t\n\t<assignment\n\t    location=\"/\"\n\t    name=\"email_local_coordinator_about_local_user_approval\"\n\t    enabled=\"True\"\n\t    bubbles=\"True\"\n\t    />\t\n\t\n\t\n\t</contentrules>\n\nThen sample unit testing code to test this::\n\n\tfrom zope.component import getUtility, getMultiAdapter, getSiteManager\n\tfrom Products.MailHost.interfaces import IMailHost\n\tfrom Products.SecureMailHost.SecureMailHost import SecureMailHost\n\n\tclass DummySecureMailHost(SecureMailHost):\n\t    meta_type = 'Dummy secure Mail Host'\n\t    def __init__(self, id):\n\t        self.id = id\n\t        self.sent = []\n\t        \n\t        self.mto = None\n\t\n\t    def _send(self, mfrom, mto, messageText, debug=False):        \n\t        self.sent.append(messageText)\n\t        self.mto = mto\n\n\t...\n\t\n\tclass BaseTestCase:\n\t    \"\"\"We use this base class for all the tests in this package. If necessary,\n\t    we can put common utility or setup code in here.\n\t    \n\t    Mix-in class, also include FunctionalTestCase or PloneTestCase.\n\t    \"\"\"\n\t    \n\t    def afterSetUp(self):\n\t\t\t...        \n\t        self.loginAsPortalOwner()\n\t        sm = getSiteManager(self.portal)\n\t        sm.unregisterUtility(provided=IMailHost)\n\t        self.dummyMailHost = DummySecureMailHost('dMailhost')\n\t        sm.manage_changeProperties({'email_from_address': 'moo@isthemasteofuniverse.com'})\n\t        sm.registerUtility(self.dummyMailHost, IMailHost)\n\t        ...\n\n\t\tdef test_my_email_on_workflow_transition(self):\n\t\t\tself.workflow = self.portal.portal_workflow\n\t\t\tself.portal.invokeFactory(\"MyContentType\", \"myobject\")\n\t\t\tmyobject = self.portal.myobject\n\t\t\t\n\t\t\tself.dummyMailHost.sent = []\n\t\t\t                \n\t\t\tself.workflow.doActionFor(myobject, \"my_workflow_transition_id_here\")        \n\t\t\treview_state = self.workflow.getInfoFor(myobject, 'review_state')\n\t\t\tself.assertEqual(review_state, \"my_new_workflow_state\")\n\t\t\t        \t        \n\t\t\t# Check that the email has been send\n\t\t\tself.assertEqual(len(self.dummyMailHost.sent), 1) # Outgoing emails increased by one\n\t\t\t\n\t\t\tself.assertEqual(self.dummyMailHost.mto, [\"receiver@dummy.host\"])\t\t\t\n\t\t\t...\n\n\n\n\n\nSecurity\n========\n\nBy default, template functions are limited to the current user priviledges - \nthis means that output may vary depending on which user you have logged in.\nThe user should not be able to escape Zope sandbox. \n\nHowever, some tags are not totally secure (escapes viewing priviledges)\nand you might want to disable them on multi-user production site.\n\nSecurity is not guaranteed for this product. For sites with high security requirements,\nplease consult the author.\n\nSecurity unit tests are available `here <https://svn.plone.org/svn/collective/collective.easytemplate/trunk/collective/easytemplate/tests/test_jinja_zope_security.py>`_.\n\nTemplate authoring guide\n========================\n\nThis document describes available variables and functions in \nEasy Template elements. Some example template snippets are included.\n\nThe default Jinja backend exposes tags as functions. Since Jinja\nmakes clear distinction between variables and functions, you need to add () \nafter tags to render them.\n\nTemplate context\n================\n\nTemplate context holds the top level variables you have available in \nyour template. \n\nVariables are defined in `context/plone.py <https://dev.plone.org/collective/browser/collective.templateengines/trunk/collective/templateengines/context/plone.py>`_ \nsource code file.\n\ncontext variable\n----------------\n\nPlone uses `subsystem called Archetypes <http://plone.org/products/archetypes>`_ to define content types.\nContent types are constructed from fields defined in the schema. All the default Plone content types\n(documents, folders, events, news, etc.) are Archetypes based.\n\nArchetypes based objects are exposed \"as is\" to the template engine in the *context* variable.\nOther context variable functions are defined by Python classes running the object.\n\nYou can call getXXX accessor functions to query  individual fields values. The exposed fields are \ndefined in the schema source code of Archetypes object.\n\nExamples below.\n\nPrint content title::\n\n   {{ context.Title().decode(\"utf-8\") }}\n   \nPrint document body text (HTML)::\n   \n   {{ context.getBody() }} \n   \nGet the URL of the current object::\n\n   {{ context.absolute_url() }}\n\nIf you have a write access to the object you can even set values in the template, though this is \nnot very useful::\n\n   {{ context.setTitle('Moo the novel') }}\n \nUnicode and UTF-8\n------------------\n\nJinja, like Python 2.x software usual, assumes all strings are either ASCII or Unicode.\n\nIf you are outputting text which\n\n* contains international characters\n\n* is known to be UTF-8\n\nyou must decode the input text in your template. For Plone, the following is known to be UTF-8\n\n* All Archetypes text field accessors like Title(), Description() return UTF-8 bytestrings\n\n* portal_catalog entries like Title, Description reflect directly Archetypes values and contain UTF-8 bytestrings\n\n* For other strings, consult Plone source code \n\nTo output such text the decode must be performed. You can do this by directly calling decode()\nmethod of Python bytecode strings.\n\nFor function like accessors::\n\n    {{ context.Title().decode(\"utf-8\") }}\n    \nFor catalog brain data::\n\n    {{ brain.Title.decode(\"utf-8\") }}\n        \nOtherwise you will see something like this when international characters are encountered::\n\n        Traceback (innermost last):\n          Module collective.templateengines.utils, line 104, in wrapExceptions\n          Module collective.templateengines.backends.jinja, line 104, in applier\n          Module jinja2.environment, line 705, in render\n          Module <template>, line 3, in top-level template code\n        UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 1: ordinal not in range(128)\n        \n.. note ::\n\n        As always, there is an exception to the rule. Content rule emails use UTF-8 \n        internally and in them variables must not be decoded.        \n\t\nTraversing\n----------\n\nTraversing is a mechanism to look up objects in Zope's object graph.\n\nTo access the other objects beside the current Template Document you can traverse\nin the folder hierarchy using Zope's traversing mechanism.\n\nGet the parent folder::\n\n  {{ context.aq_parent }} \n  \nFolder content objects can be traversed using the object id.\n  \nGet the sister page in the current folder which has URL id 'sister'::\n\n  {{ context.aq_parent.sister }}\n\nportal\n------\n\nPortal is the root Plone object of your site. You can use it as a traversing\nstart point to query other objects on your site. E.g.\n\nSome of available methods are described in IPortal interface.\n\nTo access the top level news folder::\n\n   {{ portal.news }}\n   \nportal_state\n------------\n\nportal_state stores information about the current state of the system. Tells things like if the user is logged\nin, navigation base, portal title, active language and so on.\n\nThis object implements `IPortalState <https://svn.plone.org/svn/plone/plone.app.layout/trunk/plone/app/layout/globals/interfaces.py>`_ interface.\n\nExample how to separate output for anonymous and logged in users::\n\n\t{% if portal_state.anonymous() %}\n\t\tanon\n\t{% else %}\n\t\tlogged in\n\t{% endif %}\n   \nuser\n----\n\nUser variable holds the current user security information. \n\nThis implements `Basic user <http://api.plone.org/Plone/3.0/public/products/PluggableAuthService/AccessControl.User.BasicUser-class.html>`_ interface.\n\nThe most useful feature is getting the current username via getUserName().\n\n\nmember\n------\n\nUser membership information. This information depends on the used \nmember backend (Plone default, LDAP, SQL, custom...).\n\nportal_url\n----------\n\nportal_url returns the current portal root url when called.\n\nExample::\n\n\t<a href=\"{{ portal_url() }}\">Home</a>\n\t\nTags\n====\n\nTags are custom functions you are able to use in your templates. \nThey provide an easy way to extend templates with your own Python functions.\nTags are registered in tagconfig.py file in the collective.easytemplate package.\n\nEasy Template comes with several useful tags out of the box and they are explained below.\n\nexplore\n-------\n\nDump object methods and variables for developer consumption.\n\n**Warning**. This tag is not multiuser safe.\nYou want to disable this tag on production site, since it is a read priviledge escalation.\n\nExplore tag helps you to build scripts by exposing the variables and methods insde the objects.\nIt prints a tabular output of available methods and variables.\n\n**Parameters**:\n\n*object*: Object to explore\n\nShow the guts of current Templated Document object::\n\n\t{{ explore(context) }}\n\t\nShow what we have available in the portal root::\n\n\t{{ explore(portal) }}\n\t\nShow what was returned by a function which returns a list - take the first element::\n\n\t{{ explore(query({\"portal_type\":\"Folder})[0]) }}\n\n\nquery\n-----\n\nReturn site objects based on search criteria.\n\nQuery returns the list of site objects as returned by portal_catalog\nsearch. The objects are catalog brains: dictionaries containing \nmetadata ids as key.\n\nSee ZMI portal_catalog tool for avaiable query index and returned metadata fields.\n\nKey-value pairs are taken as the parameters and they are directly passed to \nthe portal_catalog search.\n\nThe output is limited by the current user permissions.\n\n**Parameters**:\n\n- *searchParameters*: Python dictionary of portal_catalog query parameters. index->query mappings. Bad index id does not seem to raise any kind of an error.\n\n**Return value**:\n\n- List of ZCatalog brain objects. Brain objects have methods getURL, getPath and getObject and dictionary look up for catalog metadata columns.\n\n**Examples**\n\nReturn the three most fresh News Item objects sorted by date::\n\n\t{{ query({\"portal_type\":\"News Item\",\"sort_on\":\"Date\",\"sort_order\":\"reverse\",\"sort_limit\":3,\"review_state\":\"published\"}) }}\n\t\nReturn items in a particular folder::\n\n\t{{ query({path={\"query\" : \"/folder\", depth: 0}}) }}\n\t\t\n\t\nFor more information about possible query formats see `this old document <http://www.zope.org/Documentation/Books/ZopeBook/2_6Edition/SearchingZCatalog.stx>`_.\n\nview\n----\n\nRender a browser:page based view. If there is no registered view for id, return a placeholder string.\n\nParameter *name*: View id, as it appears in browser/configure.zcml.\n\nParameter *function*: Optional. View instance method name to be called. If omitted, __call__() is used.\n\nExample (render sitemap)::\n\n   {{ view(\"sitemap_view\", \"createSiteMap\") }}\n\n\nviewlet\n-------\n\nRender a viewlet. \n\nParameter *name*: Viewlet id as it appears on portal_view_customizations ZMI page.\n\nExample::\n\n   {{ viewlet(\"portal.logo\") }}\n\nprovider\n--------\n\nThis is equivalent of TAL provider expressin which is used to render viewlet and portlet managers.\n\nTo render all the left column portlets call::\n\n\t{{ provider(\"plone.leftcolumn\") }}\n\nrss_feed\n--------\n\nThe function reads RSS feed. You can iterate manually through entries\nand format the output. This is mostly suitable when dealing with HTML\nsource code.\n\n**Parameters**\n\n- *url*: URL to RSS or RSS\n\n- *cache_timeout*: Optional, default value 60. Seconds how often the HTTP GET request should be performed.\n\n**Return**\n\n- List of dictionaries with following keys: *title*, *summary*, *url*, *updated* and *friendly_date*.\n\nExample (raw HTML edit)::\n\n\t{% for entry rss_feed(\"http://blog.redinnovation.com/feed/\") %}\n\t\t<p>\n\t\t\t<b>Title:</b> \t\n\t\t\t<span>{{ entry.title }}\n\t\t</p>\n\t\t\n\t\t<p>\n\t\t\t<b>Summary:</b> \t\n\t\t\t<span>{{ entry.summary }}\n\t\t</p>\t\t\n\t{% endfor %}\n\t\nplone.app.portlets.rss.RSSFeed is used as the RSS reader backend.\n\t\nlist_folder\n-----------\n\nList folder content and return the output as <ul> tag. Mostly suitable for \nsimple folder output generating. \n\nThe formatting options offered here are not particular powerful. \nYou might want to use query() tag for more powerful output formatting.\n\n**Parameters**\n\n- *folder*: The path to the listed folder. Same as the URI path on the site.\n\n- *title*: Render this title for the listing as a subheading\n\n- *filters*: portal_catalog query parameters to be applied for the output. See query() below for examples.\n\n- *exclude_self*: If True do not render context Templated Document in the outpput\n\n- *extra_items*: String of comma separated entries of URIs which are outside the target folder, but should be appended to the listing.\n\n**Example (create a course module listing from a course folder)**::\n\n\t{{ list_folder(\"courses/marketing/cim-professional-certificate-in-marketing\", title=\"Other modules in this course:\", filters={ \"portal_type\" : \"Module\"}) }}\n\t\nlatest_news\n-----------\n\nRender list of latest published news from the site. Uses *collective.easytemplate.tags/latest_news.pt* template.\n\nlatest_news also serves as an example how to drop a custom view into the visual editor.\n\n**Parameters**\n\n- *count*: How many items are rendered\n\n**Example**::\n\n\t{{ latest_news(3) }}\n\n\ntranslate\n---------\n\nTranslation catalog look up with an message id. \n\nTranslates the message to another language. The function assumes \nthe translation is available in gettext po files.\n\n**Parameters**\n\n- *message*: gettext msgid to translate\n\n- *domain*: gettext domain where the message belongs, optional, defaults to \"plone\"\n\n- *language*: target language code, e.g. fi, optional, defaults to the currently selected language\n\n- *default*: The default value to be displayed if the msgid is missing for the selected language\n\n**Return**\n\n- translated string\n\nExamples::\n\n\t{{ translate(\"missing_id\", default=\"Foobar\")  }}\n\t\n\t{{ translate(\"box_more_news_link\", \"plone\", \"fi\")  }}\n\t\n\t\nFor available default Plone msgids, see `PloneTranslations product source <https://dev.plone.org/collective/browser/PloneTranslations/trunk/i18n>`_\n\t\ncurrent_language\n----------------\n\nGet the current language for the user.\n\nThis enables conditional showing based on the language.\n\n**Parameters**\n\n- No parameters\n\n**Return**\n\n- The current language code as a string, e.g. \"fi\"\n\nExample::\n\n\t{% if current_language() == \"fi\" %}\n\t\tPaivaa\n\t{% else %}\n\t\tHello\n\t{% endif %}\n\n\nAdvanced examples\n=================\n\nNews & blog table\n-----------------\n\nThe following snippet will create a table with two columns. The\nleft column is filled with a summary and link to all published news on the site.\nThe right column is filled with links to external blog entries, taken from \na RSS feed. The news query is language sensitive - only news for the \ncurrent active language are shown.\n\nBoth columns are limited to three entries.\n\nThe text is translated and when the default Plone translation catalogs\nlack suitable msgids, a custom translation catalog *twinapex* is used.\n\nThis example must be put into unfiltered template input box,\nsince Kupu seems to insert unwanted &nbsp; characters into the code.\n\nExample::\n\n\t<table class=\"front-page two-column\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td class=\"column-2\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t<a href=\"{{ portal_url() }}/news\">\n\t\t\t\t\t\t\t{{ translate(\"news\", \"twinapex\") }}\t\t\t\t\t\t\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h2>\t\t\t\t\t\n\t\t\t\t\t{% for item in query({\"portal_type\":\"News Item\", \"review_state\" : \"published\", \"sort_on\":\"Date\", \"sort_order\":\"reverse\", \"sort_limit\":3}) %}\n\t\t\t\t\t\t<div class=\"fp-item\">\n\t\t\t\t\t\t\t<a href=\"{{ item.getURL() }}\">{{ item.Title }}</a>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{{ item.Description }}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<p class=\"timestamp\">{{ item.Date }}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endfor %}\n\t\t\t\t\t\n\t\t\t\t\t<p class=\"more\">\n\t\t\t\t\t\t<a class=\"more\" href=\"{{ portal_url() }}/news\">\n\t\t\t\t\t\t\t{{ translate(\"box_more_news_link\", default=\"More news...\") }}\n\t\t\t\t\t\t</a>\t\t\t\t\n\t\t\t\t\t</p>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"column-2\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t<a href=\"{{ portal_url() }}/news\">\n\t\t\t\t\t\t\t{{ translate(\"blog\", \"twinapex\") }}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h2>\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t{% for item in rss_feed(\"http://blog.redinnovation.com/feed/\")[0:3] %}\n\t\t\t\t\t\t<div class=\"fp-item\">\n\t\t\t\t\t\t\t<a href=\"{{ item.url }}\">{{ item.title }}</a>\n\t\t\t\t\t\t\t<p class=\"timestamp\">{{ item.friendly_date }}</p>\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endfor %}\n\t\n\t\t\t\t\t<p class=\"more\">\n\t\t\t\t\t\t<a class=\"more\" href=\"http://blog.twinapex.fi\">\n\t\t\t\t\t\t\t{{ translate(\"box_morelink\", default=\"More...\") }}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\nDebugging tips\n--------------\n\nIf the template compilation fails you might have made copy-paste errors.\nPlease view the template in raw HTML mode to track down the errors:\n\n* HTML tags inside a template expression\n\n* Hard line breaks inside a template expression\n\n\nRegistering new tags\n====================\n\nIf you want to add your template functions \nyou must add them to collective.easytemplate.tagconfig module (note:\nin the future Zope configuration directives and ZCML can be used\nto register the tags).\n\nAll tags implement collective.templateengine.interfaces.ITag interface.\n\nFor example code, see the existing tags in collective.easytemplate.tags package.\n\nExample how to register a custom tag (run in your product's initialize() method)::\n\n\tfrom collective.easytemplate import tagconfig\n\t\n\tfrom myproducts import MyTag\n\t\n\ttagconfig.tags.append(MyTag())",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://plone.org/products/easy-template",
    "keywords": "plone cheetah jinja template kupu scripting dynamic page html",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "collective.easytemplate",
    "package_url": "https://pypi.org/project/collective.easytemplate/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/collective.easytemplate/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://plone.org/products/easy-template"
    },
    "release_url": "https://pypi.org/project/collective.easytemplate/0.8.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Dynamic HTML generation and scripting of pages, content rules, portlets and emails",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2340227,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74929ef239b499f8a3c6400550a1309f169c4fa4225a5a115215749ce4f915de",
          "md5": "c6313e285ae09f5237a4a42970cd8643",
          "sha256": "b321fa3048c1052a337a6f5b506cea8fe7ba4e69440ec18668efeed3556c6a54"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.1-py2.5.egg",
        "has_sig": false,
        "md5_digest": "c6313e285ae09f5237a4a42970cd8643",
        "packagetype": "bdist_egg",
        "python_version": "2.5",
        "requires_python": null,
        "size": 25906,
        "upload_time": "2008-07-17T00:05:44",
        "upload_time_iso_8601": "2008-07-17T00:05:44Z",
        "url": "https://files.pythonhosted.org/packages/74/92/9ef239b499f8a3c6400550a1309f169c4fa4225a5a115215749ce4f915de/collective.easytemplate-0.1-py2.5.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef16c54ae42a65568a03353dd7d708ecc5fc3828167b6e918133fe283fb71cbb",
          "md5": "e8a012ee01d3a56c6484dc306c5089dc",
          "sha256": "deb0a619dd8d58b4b6fa86a693bc59e3389c9d6bcb1d8ae91467065056957079"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8a012ee01d3a56c6484dc306c5089dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11957,
        "upload_time": "2008-07-17T00:05:44",
        "upload_time_iso_8601": "2008-07-17T00:05:44Z",
        "url": "https://files.pythonhosted.org/packages/ef/16/c54ae42a65568a03353dd7d708ecc5fc3828167b6e918133fe283fb71cbb/collective.easytemplate-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31b9862d49491e3d18ea2ee114206050cf18a2606d1a2b3412c6de214356318f",
          "md5": "7a60727248f7f8fd0ed7925129894a14",
          "sha256": "eada0be9cf2659f9a4db5149a57c8d96635b8cdf215c063caf7688b6c109d733"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a60727248f7f8fd0ed7925129894a14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17272,
        "upload_time": "2008-11-09T21:07:42",
        "upload_time_iso_8601": "2008-11-09T21:07:42Z",
        "url": "https://files.pythonhosted.org/packages/31/b9/862d49491e3d18ea2ee114206050cf18a2606d1a2b3412c6de214356318f/collective.easytemplate-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4978d5c7f6078a519374ee5daf466cc0ebad466daf81858ee1eadabed4c09756",
          "md5": "e131d18ab70c3e85990a924cc296c5e6",
          "sha256": "d6c3df508c865087281c78ebf5bf2ce00a27d838e30fa4d8d6e498723c86aa0e"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e131d18ab70c3e85990a924cc296c5e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28576,
        "upload_time": "2008-11-24T11:44:28",
        "upload_time_iso_8601": "2008-11-24T11:44:28Z",
        "url": "https://files.pythonhosted.org/packages/49/78/d5c7f6078a519374ee5daf466cc0ebad466daf81858ee1eadabed4c09756/collective.easytemplate-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81919409cfd21495a642b421fd74218151fc8c594bb2b15372ecaee2839d9e59",
          "md5": "22f09f05ca051c76a328e81c0573a134",
          "sha256": "577c73c86ab750f6be55682ab35eabca9aff2c42e5f17f2179ca79aa20e4ce18"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "22f09f05ca051c76a328e81c0573a134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56304,
        "upload_time": "2009-04-07T04:11:21",
        "upload_time_iso_8601": "2009-04-07T04:11:21.727391Z",
        "url": "https://files.pythonhosted.org/packages/81/91/9409cfd21495a642b421fd74218151fc8c594bb2b15372ecaee2839d9e59/collective.easytemplate-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc4392d8edf7b80d68b7b5ee8e37a1b507d61ad2332c5a4ebaad7ec6ceb77b5",
          "md5": "6cc0d668358f89893b8e5804c7efa49a",
          "sha256": "736a7d45ffa4d4f0b79fedb39f313df5445890df4a085841ecc3aa3c076b5060"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6cc0d668358f89893b8e5804c7efa49a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60409,
        "upload_time": "2009-04-29T05:08:24",
        "upload_time_iso_8601": "2009-04-29T05:08:24.019619Z",
        "url": "https://files.pythonhosted.org/packages/5d/c4/392d8edf7b80d68b7b5ee8e37a1b507d61ad2332c5a4ebaad7ec6ceb77b5/collective.easytemplate-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f57df73117ab1edda23e221d7d68fe5a049bcd0a8636338616dc6c84697892d",
          "md5": "f427093b7b8f654b320d96c55683cabd",
          "sha256": "1e6c9ee5019114761bdf6b6aeb65ef30a47b0abb7fc48ced817c9bd859947c13"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f427093b7b8f654b320d96c55683cabd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65219,
        "upload_time": "2012-02-07T22:09:10",
        "upload_time_iso_8601": "2012-02-07T22:09:10.005037Z",
        "url": "https://files.pythonhosted.org/packages/7f/57/df73117ab1edda23e221d7d68fe5a049bcd0a8636338616dc6c84697892d/collective.easytemplate-0.7.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "664db757568a0b25d67ba40d3303cc2fd32db5d5d11c89bb6470559f083c683f",
          "md5": "c9903e67f3662b665d90be374e949669",
          "sha256": "e3d9679d62fc2d2cfada1588f881108ccde8b31135647866d46fa5dac1fe88de"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c9903e67f3662b665d90be374e949669",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61129,
        "upload_time": "2009-08-07T12:26:24",
        "upload_time_iso_8601": "2009-08-07T12:26:24.751228Z",
        "url": "https://files.pythonhosted.org/packages/66/4d/b757568a0b25d67ba40d3303cc2fd32db5d5d11c89bb6470559f083c683f/collective.easytemplate-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9be93fdc54ea0ac1b6e118396ac92c1a29fd94c1109d9f86afe65bc825c923",
          "md5": "3fddd563d1c993f2b3f6b2f6e65634a9",
          "sha256": "37b53cbf4f4976824b69b805e138eae2268a31d4080cbdb0505de225ec62a571"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3fddd563d1c993f2b3f6b2f6e65634a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47988,
        "upload_time": "2009-10-07T10:10:28",
        "upload_time_iso_8601": "2009-10-07T10:10:28.699688Z",
        "url": "https://files.pythonhosted.org/packages/ab/9b/e93fdc54ea0ac1b6e118396ac92c1a29fd94c1109d9f86afe65bc825c923/collective.easytemplate-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f2209152b00d8867c479ff9e13fd9ecd4023f21d52eedb78ab953582a9db422",
          "md5": "7dfad372fbe6c99e4b079720edf3994a",
          "sha256": "7a8b9a6fa3bd890b18f236d77115bdc63465fdecf9cad977c4712f8d18af5d8c"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7dfad372fbe6c99e4b079720edf3994a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60089,
        "upload_time": "2009-10-18T11:00:19",
        "upload_time_iso_8601": "2009-10-18T11:00:19.155558Z",
        "url": "https://files.pythonhosted.org/packages/2f/22/09152b00d8867c479ff9e13fd9ecd4023f21d52eedb78ab953582a9db422/collective.easytemplate-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dff60b2fa344dbe0f660ac8386b85813c2e657a81df83152815f89faff718906",
          "md5": "0d3b1ad32921267c3a0607b4777289b1",
          "sha256": "a40ed3b6a28c10f99148aa7eb733bcc2cdabe2b67d64888b287f0c5578577ded"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0d3b1ad32921267c3a0607b4777289b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60232,
        "upload_time": "2010-03-16T08:25:00",
        "upload_time_iso_8601": "2010-03-16T08:25:00.852026Z",
        "url": "https://files.pythonhosted.org/packages/df/f6/0b2fa344dbe0f660ac8386b85813c2e657a81df83152815f89faff718906/collective.easytemplate-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d57d25f8b7c5bcb26c1836cd195971cd971439ee03f24cc283792cdcdd66116c",
          "md5": "78f143f5254c7c253613e16f820f3c6f",
          "sha256": "dcec177a4dd5a9e1dee5061eb92e8465ff30930afe265f56065c335623d1638c"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "78f143f5254c7c253613e16f820f3c6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56635,
        "upload_time": "2010-03-25T15:56:17",
        "upload_time_iso_8601": "2010-03-25T15:56:17.354215Z",
        "url": "https://files.pythonhosted.org/packages/d5/7d/25f8b7c5bcb26c1836cd195971cd971439ee03f24cc283792cdcdd66116c/collective.easytemplate-0.7.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2815f176eb273bd26e6165e6b8fa8c98807d2fb9c00e8ef51c4ce0e0a2023cd",
          "md5": "964c824defea84d05428d54545fd7e0d",
          "sha256": "a4aff7feb93e8d084b6768215d69b382483b44e254c053c58e2b787c6289949b"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "964c824defea84d05428d54545fd7e0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57431,
        "upload_time": "2010-09-09T16:07:46",
        "upload_time_iso_8601": "2010-09-09T16:07:46.292058Z",
        "url": "https://files.pythonhosted.org/packages/c2/81/5f176eb273bd26e6165e6b8fa8c98807d2fb9c00e8ef51c4ce0e0a2023cd/collective.easytemplate-0.7.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ad5d360fdab44e6f0f38c2b54e43a9dec0944cac211d4734c5a31a607747f5b",
          "md5": "67aec889c6e18eb4fac72c0132492013",
          "sha256": "e82be4e1033191a26e2d9c4b4cdf280c3e9f6d37b0743d82e524a3028bdcdfeb"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.7.9.zip",
        "has_sig": false,
        "md5_digest": "67aec889c6e18eb4fac72c0132492013",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98932,
        "upload_time": "2011-06-16T23:32:30",
        "upload_time_iso_8601": "2011-06-16T23:32:30.039180Z",
        "url": "https://files.pythonhosted.org/packages/9a/d5/d360fdab44e6f0f38c2b54e43a9dec0944cac211d4734c5a31a607747f5b/collective.easytemplate-0.7.9.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a39977667e5095629090b9c44b89907111dd49500e7c819e9c35da475f13cfd",
          "md5": "d052b43c160bcdfb295d6e21cffbb0b9",
          "sha256": "7a0c630afa600ba1d8081e5d989e05060c051e059dbea9ce81ca2d8b69b5c8b3"
        },
        "downloads": -1,
        "filename": "collective.easytemplate-0.8.0.zip",
        "has_sig": false,
        "md5_digest": "d052b43c160bcdfb295d6e21cffbb0b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 106577,
        "upload_time": "2013-05-07T10:49:29",
        "upload_time_iso_8601": "2013-05-07T10:49:29.592111Z",
        "url": "https://files.pythonhosted.org/packages/7a/39/977667e5095629090b9c44b89907111dd49500e7c819e9c35da475f13cfd/collective.easytemplate-0.8.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a39977667e5095629090b9c44b89907111dd49500e7c819e9c35da475f13cfd",
        "md5": "d052b43c160bcdfb295d6e21cffbb0b9",
        "sha256": "7a0c630afa600ba1d8081e5d989e05060c051e059dbea9ce81ca2d8b69b5c8b3"
      },
      "downloads": -1,
      "filename": "collective.easytemplate-0.8.0.zip",
      "has_sig": false,
      "md5_digest": "d052b43c160bcdfb295d6e21cffbb0b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 106577,
      "upload_time": "2013-05-07T10:49:29",
      "upload_time_iso_8601": "2013-05-07T10:49:29.592111Z",
      "url": "https://files.pythonhosted.org/packages/7a/39/977667e5095629090b9c44b89907111dd49500e7c819e9c35da475f13cfd/collective.easytemplate-0.8.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}