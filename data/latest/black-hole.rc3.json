{
  "info": {
    "author": "liuhao1024",
    "author_email": "edve@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================\nblack-hole\n================\n\n\n安装\n------------\n\n可以::\n\n    easy_install black-hole\n\n或者::\n\n    pip install black-hole\n\n\n概览\n--------\n\n**blackhole(黑洞)** 是一个增强的、友好的时间处理库，目的是为了解放程序员的生产力。\n在python中有太多处理时间的库，datetime/date/time/calendar等等。需要记的细节太多，选择困难。\n而blackhole就是解决这个的青霉素。从各种麻烦的转换中解脱出来。\n只需记住 **Blackhole对象** 和 **ben()** 、 **tslice()** 、 **cronwalk()** 这几个主要的api即可。\n\n\n用法\n-----\n在blackhole中，核心对象是 **Blackhole对象** 。\n\n**ben()** 函数用来便捷获取Blackhole对象.::\n\n    不带参数默认是当前时间\n    >> ben()#shortcut of blackhole.now()\n    参数是时间戳\n    >> ben(timestamp)\n    参数是时间字符串\n    >> ben(timestr)\n    参数是datetime对象\n    >> ben(datetime)\n    参数是Blackhole对象\n    >> ben(blackhole)\n    显式指明格式\n    >> ben('2013-01-01','%Y-%m-%d')\n    datetime-like的构造器\n    >> ben(year=2013,month=2,day=8,hour=7)\n\n也就是说，只要把能表达时间的东西塞给ben()就行了。\n值得一说的是ben(timestr)中通过一个词法解析的东西，使得timestr可以很灵活。大体规则是，如果缺少年月日信息，则默认用当前时间的年月日；如果缺少时分秒信息，则默认是0::\n\n    >> ben('2013,1,1') == ben('2013-01,01') == ben('2013 1 01') == ben('2013-01-01 00:00:00')\n    True\n    >> ben('2013,1,1 19:23') == ben('2013-01-01 19:23:00')\n    True\n    >> now = datetime.now()\n    >> ben('19:23').year == now.year\n    True\n    >> ben('19:23').month == now.month\n    True\n    >> ben('19:23').day == now.day\n    True\n    >> ben('19:23').hour,ben('19:23').minute,ben('19:23').second\n    (19,23,0)\n\n**Blackhole对象** ，通过这个对象，可以方便的获取各个时间属性和操作::\n\n    >> bh = ben('2013,1,1 13:14:15')\n    >> bh\n    <blackhole object (2013-01-01 13:14:15)>\n    >> bh.year,bh.month,bh.day,bh.hour,bh.minute,bh.second,bh.microsecond\n    (2013, 1, 1, 13, 14, 15, 0)\n    >> bh.timestamp#还能直接获取timestamp\n    1357017255.0\n\n    #便捷的获取常用的sql格式\n    >> bh.sql\n    '2013-01-01 13:14:15'\n    >> bh.sqldate\n    '2013-01-01'\n    >> bh.sqltime\n    '13:14:15'\n\n    #进行增量变换(shift是原地操作，而shifted返回一个新的对象)\n    >> bh.shifted(day=1,minute=-2)\n    <blackhole object (2013-01-02 13:12:15)>\n    >> bh.hour=23\n    >> bh\n    <blackhole object (2013-01-01 23:14:15)>\n\n    >> bh.floor('hour'),bh.ceil('hour')\n    (<blackhole object (2013-01-01 23:00:00)>, <blackhole object (2013-01-01 23:59:59.999999)>)\n    >> bh.floor('year'),bh.ceil('year')\n    (<blackhole object (2013-01-01 00:00:00)>, <blackhole object (2013-12-31 23:59:59.999999)>)\n    >> bh.round(30*60)\n    <blackhole object (2013-01-01 23:00:00)>\n    >> bh.roundfloor(30*60)\n    <blackhole object (2013-01-01 23:00:00)>\n\n    #重载符号\n    >> bh3 = blackhole(year=2013,month=2,day=27,hour=0)\n    >> bh4 = blackhole(year=2013,month=3,day=1,hour=0)\n    >> bh3==bh4\n    False\n    >> bh3<bh4\n    True\n    >> bh3>bh4\n    False\n    >> bh4-bh3\n    datetime.timedelta(2)\n\n    #mock当前时间，这样就测试的时候就不用改时间，直接mock给当前时间加上个偏移量就行了\n    #比如我要把时间往后推一天\n    >> ben()\n    <blackhole object (2014-05-06 12:04:07.113000)>\n    >> blackhole.mock(day=1)\n    >> ben()\n    <blackhole object (2014-05-07 12:04:38.064000)>\n    >> ben()\n    <blackhole object (2014-05-07 12:04:44.319000)>\n    >> blackhole.unmock()\n    >> ben()\n    <blackhole object (2014-05-06 12:05:19.003000)>\n\n    #其它\n    >> bh\n    <blackhole object (2013-01-01 23:14:15)>\n    >> bh.raw()\n    datetime.datetime(2013, 1, 1, 23, 14, 15)\n    >> bh.clone()\n    <blackhole object (2013-01-01 23:14:15)>\n    >> bh.replace(day=2)\n    >> bh\n    <blackhole object (2013-01-02 23:14:15)>\n    >> bh.days_in_month\n    31\n    >> bh.is_today()\n    False\n    >> bh.is_past_date()\n    True\n    >> bh.is_future_date()\n    False\n    >> bh.strftime('%Y/%m/%d')\n    '2013/01/02'\n    >> blackhole.strptime('20130203','%Y%m%d')\n    <blackhole object (2013-02-03 00:00:00)>\n\n**tslice** ,受内置函数xrange启发，用于获取一个时间序列。\n\n格式是::\n\n    tslice(unit,start=None,end=None,step=1,count=None) -> generator of blackhole object\n    unit in ['year', 'month', 'day', 'hour', 'minute', 'second', 'microsecond']\n\n跟xrange一样，step可以是负数。如果start为空，则默认是当前时间。\n\n示例::\n\n    >> list(tslice('day','2013-01-01','2013-01-04'))\n    [<blackhole object (2013-01-01 00:00:00)>,\n    <blackhole object (2013-01-02 00:00:00)>,\n    <blackhole object (2013-01-03 00:00:00)>]\n\n    >> list(tslice('day','2013-01-04','2013-01-01',step=-1))\n    [<blackhole object (2013-01-04 00:00:00)>,\n    <blackhole object (2013-01-03 00:00:00)>,\n    <blackhole object (2013-01-02 00:00:00)>]\n\n    >> list(tslice('day','2013-01-04','2013-01-31',step=3,count=2))\n    [<blackhole object (2013-01-04 00:00:00)>,\n    <blackhole object (2013-01-07 00:00:00)>]\n\n    >> list(tslice('year',start='2013-01-04',count=2))\n    [<blackhole object (2013-01-04 00:00:00)>,\n    <blackhole object (2014-01-04 00:00:00)>]\n\n    >> list(tslice('minute',start='2013-01-04',count=2))\n    [<blackhole object (2013-01-04 00:00:00)>,\n    <blackhole object (2013-01-04 00:01:00)>]\n\n\n**cronwalk** ,用于对crontab表达式进行演算，得到下一个执行的时间。\n\n格式::\n\n    cronwalk(expr,base=None)# 如果base为空，默认是当前时间。\n\n示例::\n\n    >> c = iter(cronwalk('0 6 * * *',base='2013-02-03'))\n    >> next(c)\n    <blackhole object (2013-02-03 06:00:00)>\n    >> next(c)\n    <blackhole object (2013-02-04 06:00:00)>\n\n    >> c = iter(cronwalk('0 23-7/2 * * *',base='2013-02-03 08:30:00'))\n    >> next(c)\n    <blackhole object (2013-02-03 23:00:00)>\n    >> next(c)\n    <blackhole object (2013-02-04 01:00:00)>\n\n**timediff** ,用于计算距离下个指定时间还有多久，比如有个活动是每天20:00:00开始的，要计算距离活动开始还有多久::\n\n    >> timediff('20:00:00',factor=86400,base='19:30:00')\n    1800\n    >> timediff('20:00:00',factor=86400,base='21:30:00')\n    81000\n\n\nChangelog\n---------\n**0.0.3**\n\n* Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/liuhao1024/black-hole",
    "keywords": "datetime,calendar,time",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "black-hole",
    "package_url": "https://pypi.org/project/black-hole/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/black-hole/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/liuhao1024/black-hole"
    },
    "release_url": "https://pypi.org/project/black-hole/0.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "一个增强时间管理库",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2553235,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b910616a01bd5fd883c711a65d84a890727a482afabf620a0ee9ac8609659429",
          "md5": "563d62d7079ab1a45f728e24cd07e5a9",
          "sha256": "7968ecb321c48d319619669f5cdf956a1d0451b0878bfc733e197e517666a7b1"
        },
        "downloads": -1,
        "filename": "black-hole-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "563d62d7079ab1a45f728e24cd07e5a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16110,
        "upload_time": "2016-12-30T03:13:09",
        "upload_time_iso_8601": "2016-12-30T03:13:09.082844Z",
        "url": "https://files.pythonhosted.org/packages/b9/10/616a01bd5fd883c711a65d84a890727a482afabf620a0ee9ac8609659429/black-hole-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38d11c24a1e2a438c5bf7bba30eeaab770de7f7b6f40385a938ec73b15fe7f8",
          "md5": "633e12b56ce193681ca98a4ca6a7d804",
          "sha256": "9af0401800c63d7e570c81c8d1e02ec39a136b0100b7896df1736e17d336d6b4"
        },
        "downloads": -1,
        "filename": "black-hole-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "633e12b56ce193681ca98a4ca6a7d804",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16104,
        "upload_time": "2016-12-30T04:08:44",
        "upload_time_iso_8601": "2016-12-30T04:08:44.776356Z",
        "url": "https://files.pythonhosted.org/packages/a3/8d/11c24a1e2a438c5bf7bba30eeaab770de7f7b6f40385a938ec73b15fe7f8/black-hole-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e907440a35b9fc51fc1c3dd083e1ebac4006da330838a89a6df4c2d8f4a29fbd",
          "md5": "92ef2be4dadeb137b265b9bbc65df43a",
          "sha256": "33e50754daae24f7f463ee3439cababb3e715f11e9ee2127ccad10a8de0bfbf9"
        },
        "downloads": -1,
        "filename": "black-hole-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "92ef2be4dadeb137b265b9bbc65df43a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15798,
        "upload_time": "2017-01-04T08:55:46",
        "upload_time_iso_8601": "2017-01-04T08:55:46.381728Z",
        "url": "https://files.pythonhosted.org/packages/e9/07/440a35b9fc51fc1c3dd083e1ebac4006da330838a89a6df4c2d8f4a29fbd/black-hole-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e907440a35b9fc51fc1c3dd083e1ebac4006da330838a89a6df4c2d8f4a29fbd",
        "md5": "92ef2be4dadeb137b265b9bbc65df43a",
        "sha256": "33e50754daae24f7f463ee3439cababb3e715f11e9ee2127ccad10a8de0bfbf9"
      },
      "downloads": -1,
      "filename": "black-hole-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "92ef2be4dadeb137b265b9bbc65df43a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15798,
      "upload_time": "2017-01-04T08:55:46",
      "upload_time_iso_8601": "2017-01-04T08:55:46.381728Z",
      "url": "https://files.pythonhosted.org/packages/e9/07/440a35b9fc51fc1c3dd083e1ebac4006da330838a89a6df4c2d8f4a29fbd/black-hole-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}