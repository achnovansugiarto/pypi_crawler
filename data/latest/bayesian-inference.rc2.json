{
  "info": {
    "author": "Berat Cankar",
    "author_email": "berat.cankar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Bayesian Inference\n[![Build Status](https://travis-ci.com/yakuza8/bayesian-inference.svg?branch=master)](https://travis-ci.com/yakuza8/bayesian-inference)\n[![codecov](https://codecov.io/gh/yakuza8/bayesian-inference/branch/master/graph/badge.svg)](https://codecov.io/gh/yakuza8/bayesian-inference)\n\n## Project Description\nProbabilistic reasoning module on `Bayesian Networks` where the dependencies between variables are\nrepresented as links among nodes on the `directed acyclic graph`. Even we could infer any probability\nin the knowledge world via full joint distribution, we can optimize this calculation by independence\nand conditional independence. \n\nIn current implementation, one can define properties of the network as follows:\n* Each node represents a single random variable\n* Links between nodes represent direct effect on each other such as if `random variable X` has link\nto `random variable Y`, then there is a conditional probability relation between them. \n* There is no cycle in the network and that makes the network `Directed Acyclic Graph`\n\n### Entities\nUsable entities available in the project are listed below which are `NetworkNode` and `BayesianNetwork`.\nThere is a simple network configuration as dictionary format below and entities will be explained with\nrespect to example network.\n\n```python\n>>> from bayesian_inference import BayesianNetwork, InputParser\n>>>\n>>> BURGLARY = \"Burglary\"\n>>> EARTHQUAKE = \"Earthquake\"\n>>> ALARM = \"Alarm\"\n>>> JOHN_CALLS = \"JohnCalls\"\n>>> MARRY_CALLS = \"MaryCalls\"\n>>> \n>>> sample_network = {\n...     BURGLARY: {\n...         \"predecessors\": [], \"random_variables\": [\"t\", \"f\"], \"probabilities\": {\n...             \"(t)\": 0.001, \"(f)\": 0.999\n...         }\n...     }, EARTHQUAKE: {\n...         \"predecessors\": [], \"random_variables\": [\"t\", \"f\"], \"probabilities\": {\n...             \"(t)\": 0.002, \"(f)\": 0.998\n...         }\n...     }, ALARM: {\n...         \"predecessors\": [BURGLARY, EARTHQUAKE], \"random_variables\": [\"t\", \"f\"], \"probabilities\": {\n...             \"(f,f,f)\": 0.999, \"(f,f,t)\": 0.001, \"(f,t,f)\": 0.71, \"(f,t,t)\": 0.29, \"(t,f,f)\": 0.06,\n...             \"(t,f,t)\": 0.94, \"(t,t,f)\": 0.05, \"(t,t,t)\": 0.95\n...         }\n...     }, JOHN_CALLS: {\n...         \"predecessors\": [ALARM], \"random_variables\": [\"t\", \"f\"], \"probabilities\": {\n...             \"(f,f)\": 0.95, \"(f,t)\": 0.05, \"(t,f)\": 0.10, \"(t,t)\": 0.90\n...         }\n...     }, MARRY_CALLS: {\n...         \"predecessors\": [ALARM], \"random_variables\": [\"t\", \"f\"], \"probabilities\": {\n...             \"(f,f)\": 0.99, \"(f,t)\": 0.01, \"(t,f)\": 0.30, \"(t,t)\": 0.70\n...         }\n...     }\n... }\n>>> network = BayesianNetwork(initial_network=InputParser.from_dict(sample_network))\n```\n\n#### Network Node\nSingle unit in the network representing a random variable in the uncertain world.\nIt has the following fields expected by constructor:\n* node_name: Random variable name which will be the node name in the network\n* random_variables: List of available values of random variable in string format\n* predecessors: Parents of the random variable in the network as a list of string where each item\nis the name of parent random variable\n* probabilities: Probability list of the random variable described as conditional probabilities\n* all_random_variables: List of lists of strings representing random variable values respectively\nparents of the node and the values of current node\n\nSingle node can be represented with the following representation:\n\n```python\n>>> from bayesian_inference import NetworkNode\n>>> node = eval(NetworkNode('Alarm', ['t', 'f'], ['Burglary', 'Earthquake'], {'(f,f,f)': 0.999, '(f,f,t)': 0.001, '(f,t,f)': 0.71, '(f,t,t)': 0.29, '(t,f,f)': 0.06, '(t,f,t)': 0.94, '(t,t,f)': 0.05, '(t,t,t)': 0.95}, [['t', 'f'], ['t', 'f'], ['t', 'f']]))\n>>> print(node)\n| Burglary   | Earthquake   |   P(Alarm=t) |   P(Alarm=f) |\n|------------|--------------|--------------|--------------|\n| t          | t            |        0.95  |        0.05  |\n| t          | f            |        0.94  |        0.06  |\n| f          | t            |        0.29  |        0.71  |\n| f          | f            |        0.001 |        0.999 |\n```\n\n**Note:** It is important that you need to provide probability dictionary of `NetworkNode` as explained\nin the following example. Let's have node named `X` and parents as `[A, B, C]`, then you need to have all\nprobability keys as `(value_a,value_b,value_c,value_x)` where no whitespace between commas and value are\nlisted order of parents and node itself if you want to create node from yourself.\nIf you parse with `InputParser`, then it goes over keys and removes whitespaces to make them as expected format. \n\n#### Bayesian Network\nBayesian network structure that keeps `Directed Acyclic Graph` inside and encapsulates `NetworkNode` instances\nThe structure has an instance of [NetworkX](https://github.com/networkx/networkx) DiGraph. Network can be created\nwith initial node list. Also, one can add and remove node to the network at runtime. From probability perspective,\none can query exact inference of probability from Bayesian network. Also, one can control independence property of\nnodes in the graph with `is_independent` method of `BayesianNetwork`. `D-separation principle` is applied for\ndeciding whether the nodes are independent or not where additionally one can provide evidence variable list for\nchecking the independence property while verification of conditional independence. \n\n```python\n>>> # Network initiated above\n>>> from bayesian_inference import NetworkNode\n>>> node1 = NetworkNode(node_name='B', predecessors=['A'], random_variables=[], probabilities={}, all_random_variables=[])\n>>> node2 = NetworkNode(node_name='C', predecessors=['B'], random_variables=[], probabilities={}, all_random_variables=[])\n>>> \n>>> # Adding node to network, Method expects network node directly\n>>> network.add_node(node1)\n>>> network.add_node(node2)\n>>> \n>>> # Removal of node from network. Method expects node name to remove\n>>> network.remove_node(node2.node_name)\n>>>\n>>> # Query exact inference from network, details of queries will be explained in next sections\n>>> network.P('Burglary | JohnCalls = t, MaryCalls = t')\n{\"{'Burglary': 't'}\": 0.28417183536439294, \"{'Burglary': 'f'}\": 0.7158281646356072}\n>>> network.P('JohnCalls = t, MaryCalls = t, Alarm = t,  Burglary = f, Earthquake = f')\n0.0006281112599999999\n>>> \n>>> # Independence check\n>>> network.is_independent('JohnCalls', 'MaryCalls')\n>>> False\n>>> network.is_independent('JohnCalls', 'MaryCalls', evidence_variables=['Alarm'])\n>>> True\n```\n\n### Expected form of probabilistic query\nThere is a query parser module under `probability` package that makes query for Bayesian network that\ncan be conditional or full joint probability. The form/structure of query should be following regex.\nOne can reach visual representation of regex from [this link](https://regexper.com/#%28%3F%3A%28%5Cs*%5Cw%2B%5Cs*%29%28%3F%3A%3D%28%5Cs*%5Cw%2B%5Cs*%29%29%3F%29%28%3F%3A%2C%28%3F%3A%28%5Cs*%5Cw%2B%5Cs*%29%28%3F%3A%3D%28%5Cs*%5Cw%2B%5Cs*%29%29%3F%29%29*%28%3F%3A%5Cs*%5C%7C%5Cs*%28%3F%3A%28%5Cs*%5Cw%2B%5Cs*%29%3D%28%5Cs*%5Cw%2B%5Cs*%29%29%28%3F%3A%2C%28%3F%3A%28%5Cs*%5Cw%2B%5Cs*%29%3D%28%5Cs*%5Cw%2B%5Cs*%29%29%29*%29%3F).\n\n```python\n>>> WORD = r'(\\s*\\w+\\s*)'\n>>> NON_VALUED_GROUP = rf'(?:{WORD}(?:={WORD})?)'\n>>> VALUED_GROUP = rf'(?:{WORD}={WORD})'\n>>> QUERY_VARIABLES = rf'{NON_VALUED_GROUP}(?:,{NON_VALUED_GROUP})*'\n>>> EVIDENCE_VARIABLES = rf'{VALUED_GROUP}(?:,{VALUED_GROUP})*'\n>>> QUERY = rf'{QUERY_VARIABLES}(?:\\s*\\|\\s*{EVIDENCE_VARIABLES})?'\n>>> QUERY\n'(?:(\\s*\\w+\\s*)(?:=(\\s*\\w+\\s*))?)(?:,(?:(\\s*\\w+\\s*)(?:=(\\s*\\w+\\s*))?))*(?:\\s*\\|\\s*(?:(\\s*\\w+\\s*)=(\\s*\\w+\\s*))(?:,(?:(\\s*\\w+\\s*)=(\\s*\\w+\\s*)))*)?'\n```\n\n#### Textual meaning of query format is\n* There should be at least one `Valued` or `Non-valued` query parameter.\n    * Valued: Alarm=True\n    * Non-valued: Alarm (No value assigned)\n* There can be conditional/posterior probability section after `|` (pipe) symbol optionally.\n* All the valued and non-valued should be separated by `,` (comma) symbol.\n\n#### Examples\n```python\nfrom bayesian_inference import query_parser\n>>> # Valid queries\n>>> query_parser('A, B, C')[0]\nTrue\n>>> query_parser('A, B=b, C')[0]\nTrue\n>>> query_parser('A=1, B, C')[0]\nTrue\n>>> query_parser('A, B, C=2')[0]\nTrue\n>>> query_parser('A=1, B=2, C=3')[0]\nTrue\n>>> query_parser('A, B, C | D=d')[0]\nTrue\n>>> query_parser('A=1, B=2, C=2 | D=d')[0]\nTrue\n>>> query_parser('A, B=2, C | D=d, E=5')[0]\nTrue\n>>> # Invalid queries (It is expected that all evidence variables should have value)\n>>> query_parser('A, B, C | D')[0]\nFalse\n>>> query_parser('A, B=b, C | D')[0]\nFalse\n>>> query_parser('A=1, B, C | D')[0]\nFalse\n```\n\n#### Validations\n1. Variable uniqueness validation: No repeated random variable should exist in the query. \n2. **[Optional]** Contextual name/value validation: If `expected_symbol_and_values` parameter is provided,\n`query_parser` checks names of parsed random variables and validates their values if parsed variable has\nvalue.\n\n### Input Format and Parsing\nThe input format will be explained nearby how you can import them into code. You can directly parse\njson file to get list of `NetworkNode` where keys are node/random variable name and values is an\nobject of expected values to create node instance.\n\nExpected fields are:\n* predecessors: List of names of parents of the node where they will be search in the json\n* random_variables: Values for the random variable that are list of string \n* probabilities: Probabilities of the node explained under `NetworkNode` section.\n\nOne can obtain list of nodes by reading json from file with `parse` method of `InputParser` or \nreading dict and map them to network node with `from_dict` method of `InputParser`. The same\nexpectations are hold here defined for json format.\n\n**Note:** Necessary validations are done for parsing nodes so that if there is an unexpected\nvalue for input by raising corresponding exception.\n\n#### Example Input Format\n```json\n{\n    \"Burglary\": {\n        \"predecessors\": [],\n        \"random_variables\": [\n            \"t\",\n            \"f\"\n        ],\n        \"probabilities\": {\n            \"(t)\": 0.001,\n            \"(f)\": 0.999\n        }\n    },\n    \"Earthquake\": {\n        \"predecessors\": [],\n        \"random_variables\": [\n            \"t\",\n            \"f\"\n        ],\n        \"probabilities\": {\n            \"(t)\": 0.002,\n            \"(f)\": 0.998\n        }\n    },\n    \"Alarm\": {\n        \"predecessors\": [\n            \"Burglary\",\n            \"Earthquake\"\n        ],\n        \"random_variables\": [\n            \"t\",\n            \"f\"\n        ],\n        \"probabilities\": {\n            \"(f,f,f)\": 0.999,\n            \"(f,f,t)\": 0.001,\n            \"(f,t,f)\": 0.71,\n            \"(f,t,t)\": 0.29,\n            \"(t,f,f)\": 0.06,\n            \"(t,f,t)\": 0.94,\n            \"(t,t,f)\": 0.05,\n            \"(t,t,t)\": 0.95\n        }\n    },\n    \"JohnCalls\": {\n        \"predecessors\": [\n            \"Alarm\"\n        ],\n        \"random_variables\": [\n            \"t\",\n            \"f\"\n        ],\n        \"probabilities\": {\n            \"(f,f)\": 0.95,\n            \"(f,t)\": 0.05,\n            \"(t,f)\": 0.1,\n            \"(t,t)\": 0.9\n        }\n    },\n    \"MaryCalls\": {\n        \"predecessors\": [\n            \"Alarm\"\n        ],\n        \"random_variables\": [\n            \"t\",\n            \"f\"\n        ],\n        \"probabilities\": {\n            \"(f,f)\": 0.99,\n            \"(f,t)\": 0.01,\n            \"(t,f)\": 0.3,\n            \"(t,t)\": 0.7\n        }\n    }\n}\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yakuza8/bayesian-inference",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bayesian-inference",
    "package_url": "https://pypi.org/project/bayesian-inference/",
    "platform": "",
    "project_url": "https://pypi.org/project/bayesian-inference/",
    "project_urls": {
      "Homepage": "https://github.com/yakuza8/bayesian-inference"
    },
    "release_url": "https://pypi.org/project/bayesian-inference/1.0.2/",
    "requires_dist": [
      "coverage (~=5.2)",
      "tabulate (~=0.8.7)",
      "networkx (~=2.4)"
    ],
    "requires_python": ">=3.7.3",
    "summary": "Bayesian Inference library over network",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8021086,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748e5709b59d1484ae1e29c08d88b2eca8603f80e546ee7612beef23c15ae82f",
          "md5": "e93569400f39ed391e055e575a98e434",
          "sha256": "6496a7e5ee844ecb8492527620362b9809ec7bd21a45a4be70b70dec5db38134"
        },
        "downloads": -1,
        "filename": "bayesian_inference-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e93569400f39ed391e055e575a98e434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 23296,
        "upload_time": "2020-07-20T18:31:57",
        "upload_time_iso_8601": "2020-07-20T18:31:57.083941Z",
        "url": "https://files.pythonhosted.org/packages/74/8e/5709b59d1484ae1e29c08d88b2eca8603f80e546ee7612beef23c15ae82f/bayesian_inference-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d779e039c08296a1630b5ea7455ffaed5bbbe3b432ef9fbd19cd5ab9c5a6bf",
          "md5": "38708daf090958dfcf337fbaa1c5cb12",
          "sha256": "60c1c08afd582848d2dc385b275bdfd9852943587131c771982cba0420f36d1d"
        },
        "downloads": -1,
        "filename": "bayesian-inference-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "38708daf090958dfcf337fbaa1c5cb12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 21877,
        "upload_time": "2020-07-20T18:31:59",
        "upload_time_iso_8601": "2020-07-20T18:31:59.430780Z",
        "url": "https://files.pythonhosted.org/packages/e2/d7/79e039c08296a1630b5ea7455ffaed5bbbe3b432ef9fbd19cd5ab9c5a6bf/bayesian-inference-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f4dd8ba6971c02bee80debd6b32d0cb6c2ce1f4d97c643430f599be74ff7d1",
          "md5": "c76fb2022dd23dc484237f294acceee7",
          "sha256": "f306b2d6918f9fbcd5bf693ae6f8b0d426e387a3d4183f88474f8df9247cceef"
        },
        "downloads": -1,
        "filename": "bayesian_inference-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c76fb2022dd23dc484237f294acceee7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 24297,
        "upload_time": "2020-08-23T09:10:36",
        "upload_time_iso_8601": "2020-08-23T09:10:36.976671Z",
        "url": "https://files.pythonhosted.org/packages/07/f4/dd8ba6971c02bee80debd6b32d0cb6c2ce1f4d97c643430f599be74ff7d1/bayesian_inference-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d799a49f638212baa2370bb5a30da653cddeaea32f49947cf6a9299939f1c26d",
          "md5": "5bfe092a125ad5bbfa4c728791396af9",
          "sha256": "d3114b239e4b3e8cb2d6e17de7e356b7f35a2a74f57f09cef2bb9442ccc307be"
        },
        "downloads": -1,
        "filename": "bayesian-inference-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5bfe092a125ad5bbfa4c728791396af9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 23036,
        "upload_time": "2020-08-23T09:10:38",
        "upload_time_iso_8601": "2020-08-23T09:10:38.843884Z",
        "url": "https://files.pythonhosted.org/packages/d7/99/a49f638212baa2370bb5a30da653cddeaea32f49947cf6a9299939f1c26d/bayesian-inference-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07f4dd8ba6971c02bee80debd6b32d0cb6c2ce1f4d97c643430f599be74ff7d1",
        "md5": "c76fb2022dd23dc484237f294acceee7",
        "sha256": "f306b2d6918f9fbcd5bf693ae6f8b0d426e387a3d4183f88474f8df9247cceef"
      },
      "downloads": -1,
      "filename": "bayesian_inference-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c76fb2022dd23dc484237f294acceee7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.3",
      "size": 24297,
      "upload_time": "2020-08-23T09:10:36",
      "upload_time_iso_8601": "2020-08-23T09:10:36.976671Z",
      "url": "https://files.pythonhosted.org/packages/07/f4/dd8ba6971c02bee80debd6b32d0cb6c2ce1f4d97c643430f599be74ff7d1/bayesian_inference-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d799a49f638212baa2370bb5a30da653cddeaea32f49947cf6a9299939f1c26d",
        "md5": "5bfe092a125ad5bbfa4c728791396af9",
        "sha256": "d3114b239e4b3e8cb2d6e17de7e356b7f35a2a74f57f09cef2bb9442ccc307be"
      },
      "downloads": -1,
      "filename": "bayesian-inference-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5bfe092a125ad5bbfa4c728791396af9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.3",
      "size": 23036,
      "upload_time": "2020-08-23T09:10:38",
      "upload_time_iso_8601": "2020-08-23T09:10:38.843884Z",
      "url": "https://files.pythonhosted.org/packages/d7/99/a49f638212baa2370bb5a30da653cddeaea32f49947cf6a9299939f1c26d/bayesian-inference-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}