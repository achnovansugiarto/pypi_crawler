{
  "info": {
    "author": "Maximilian Schaller, Goran Banjac, Bartolomeo Stellato, Steven Diamond, Akshay Agrawal, Stephen Boyd",
    "author_email": "mschall@stanford.edu, goranbanjac1989@gmail.com, bstellato@princeton.edu, diamond@cs.stanford.edu, akshayka@cs.stanford.edu, boyd@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# CVXPYgen - Code generation with CVXPY\n\nCVXPYgen takes a convex optimization problem family modeled with CVXPY and generates a custom solver implementation in C.\nThis generated solver is specific to the problem family and accepts different parameter values.\nIn particular, this solver is suitable for deployment on embedded systems.\nIn addition, CVXPYgen creates a Python wrapper for prototyping and desktop (non-embedded) applications.\n\nAn overview of CVXPYgen can be found in our [manuscript](https://web.stanford.edu/~boyd/papers/cvxpygen.html).\n\nCVXPYgen accepts CVXPY problems that are compliant with [Disciplined Convex Programming (DCP)](https://www.cvxpy.org/tutorial/dcp/index.html).\nDCP is a system for constructing mathematical expressions with known curvature from a given library of base functions. \nCVXPY uses DCP to ensure that the specified optimization problems are convex.\nIn addition, problems need to be modeled according to [Disciplined Parametrized Programming (DPP)](https://www.cvxpy.org/tutorial/advanced/index.html#disciplined-parametrized-programming).\nSolving a DPP-compliant problem repeatedly for different values of the parameters can be much faster than repeatedly solving a new problem.\n\nFor now, CVXPYgen is a separate module, until it will be integrated into CVXPY.\nAs of today, CVXPYgen works with linear, quadratic, and second-order cone programs.\n\nThis package has similar functionality as the package [cvxpy_codegen](https://github.com/moehle/cvxpy_codegen),\nwhich appears to be unsupported.\n\n**Important: When generating code with the ECOS solver, the generated code is licensed \nunder the [GNU General Public License v3.0](https://github.com/embotech/ecos/blob/develop/COPYING).**\n\n## Installation\n\n1. Install `cvxpygen` (on Windows preferably with **Python 3.9**).\n    ```\n    pip install cvxpygen\n    ```\n   \n\n2. On Linux or Mac, install the [GCC compiler](https://gcc.gnu.org).\n   On Windows, install [Microsoft Visual Studio](https://visualstudio.microsoft.com/downloads/) \n   with the 'Desktop development with C++' workload.\n   CVXPYgen is tested with Visual Studio 2019 and 2022, older versions might work as well.\n   \n\n3. *Optional:* If you wish to use the example notebooks located in [``examples/``](https://github.com/cvxgrp/cvxpygen/blob/master/examples/), \n   install ``ipykernel``, ``jupyter``, ``matplotlib``, and register a new kernel spec with Jupyter.\n    ```\n   pip install ipykernel jupyter matplotlib\n   ipython kernel install --user --name=cvxpygen\n   ```\n    \n## Example\n\nWe define a simple 'nonnegative least squares' problem, generate code for it, and solve the problem with example parameter values.\n\n### 1. Generate Code\n\nLet's step through the first part of [``examples/main.py``](https://github.com/cvxgrp/cvxpygen/blob/master/examples/main.py).\nDefine a convex optimization problem the way you are used to with CVXPY.\nEverything that is described as ``cp.Parameter()`` is assumed to be changing between multiple solves.\nFor constant properties, use ``cp.Constant()``.\n\n```python\nimport cvxpy as cp\n\nm, n = 3, 2\nx = cp.Variable(n, name='x')\nA = cp.Parameter((m, n), name='A', sparsity=[(0, 0), (0, 1), (1, 1)])\nb = cp.Parameter(m, name='b')\nproblem = cp.Problem(cp.Minimize(cp.sum_squares(A @ x - b)), [x >= 0])\n```\n\nSpecify the `name` attribute for variables and parameters to recognize them after generating code.\nThe attribute `sparsity` is a list of 2-tuples that indicate the coordinates of nonzero entries of matrix `A`.\nParameter sparsity is only taken into account for matrices.\n\nAssign parameter values and test-solve.\n\n```python\nimport numpy as np\n\nnp.random.seed(0)\nA.value = np.zeros((m, n))\nA.value[0, 0] = np.random.randn()\nA.value[0, 1] = np.random.randn()\nA.value[1, 1] = np.random.randn()\nb.value = np.random.randn(m)\nproblem.solve()\n```\n\nGenerating C code for this problem is as simple as,\n\n```python\nfrom cvxpygen import cpg\n\ncpg.generate_code(problem, code_dir='nonneg_LS', solver='SCS')\n```\n\nwhere the generated code is stored inside `nonneg_LS` and the `SCS` solver is used. \nNext to the positional argument `problem`, all keyword arguments for the `generate_code()` method are summarized below.\n\n| Argument         | Meaning       | Default       |\n| -------------    | ------------- | ------------- |\n| `code_dir`       | directory for code to be stored in                                 | `'CPG_code'` |\n| `solver`         | canonical solver to generate code with                             | CVXPY default |\n| `unroll`         | unroll loops in canonicalization code                              | `False` |\n| `prefix`         | prefix for unique code symbols when dealing with multiple problems | `''`\n| `wrapper`        | compile Python wrapper for CVXPY interface                         | `True` |\n\nYou can find an overview of the code generation result in `nonneg_LS/README.html`.\n\n### 2. Solve & Compare\n\nAs summarized in the second part of [``examples/main.py``](https://github.com/cvxgrp/cvxpygen/blob/master/examples/main.py), after assigning parameter values, you can solve the problem both conventionally and via the generated code, which is wrapped inside the custom CVXPY solve method ``cpg_solve``.\n\n```python\nimport time\nimport sys\n\n# import extension module and register custom CVXPY solve method\nfrom nonneg_LS.cpg_solver import cpg_solve\nproblem.register_solve('cpg', cpg_solve)\n\n# solve problem conventionally\nt0 = time.time()\nval = problem.solve(solver='SCS')\nt1 = time.time()\nsys.stdout.write('\\nCVXPY\\nSolve time: %.3f ms\\n' % (1000*(t1-t0)))\nsys.stdout.write('Primal solution: x = [%.6f, %.6f]\\n' % tuple(x.value))\nsys.stdout.write('Dual solution: d0 = [%.6f, %.6f]\\n' % tuple(problem.constraints[0].dual_value))\nsys.stdout.write('Objective function value: %.6f\\n' % val)\n\n# solve problem with C code via python wrapper\nt0 = time.time()\nval = problem.solve(method='cpg', updated_params=['A', 'b'], verbose=False)\nt1 = time.time()\nsys.stdout.write('\\nCVXPYgen\\nSolve time: %.3f ms\\n' % (1000 * (t1 - t0)))\nsys.stdout.write('Primal solution: x = [%.6f, %.6f]\\n' % tuple(x.value))\nsys.stdout.write('Dual solution: d0 = [%.6f, %.6f]\\n' % tuple(problem.constraints[0].dual_value))\nsys.stdout.write('Objective function value: %.6f\\n' % val)\n```\n\nThe argument `updated_params` specifies which user-defined parameter values are new.\nIf the argument is omitted, all parameter values are assumed to be new.\nIf only a subset of the user-defined parameters have new values, use this argument to speed up the solver.\n\n**Most solver settings can be specified as keyword arguments** like without code generation. \nHere, we use `verbose=False` to suppress printing.\nThe list of changeable settings differs by solver and is documented in `<code_dir>/README.html` after code generation.\n\nComparing the standard and codegen methods for this example, both the solutions and objective values are close.\nEspecially for smaller problems like this, the new solve method ``'cpg'`` is significantly faster than solving without code generation.\n\n### 3. Executable\n\nIn the C code, all of your parameters and variables are stored as vectors via Fortran-style flattening (vertical index moves fastest).\nFor example, the `(i, j)`-th entry of the original matrix with height `h` will be the `i+j*h`-th entry of the flattened matrix in C.\nFor sparse *parameters*, i.e. matrices, the `k`-th entry of the C array is the `k`-th nonzero entry encountered when proceeding\nthrough the parameter column by column.\n\nBefore compiling the example executable, make sure that ``CMake 3.5`` or newer is installed.\n\nOn Unix platforms, run the following commands in your terminal to compile and run the program:\n\n```bash\ncd nonneg_LS/c/build\ncmake ..\ncmake --build . --target cpg_example\n./cpg_example\n```\n\nOn Windows, type:\n\n```bash\ncd nonneg_LS\\c\\build\ncmake ..\ncmake --build . --target cpg_example --config release\nRelease\\cpg_example\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cvxgrp/cvxpygen",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cvxpygen",
    "package_url": "https://pypi.org/project/cvxpygen/",
    "platform": null,
    "project_url": "https://pypi.org/project/cvxpygen/",
    "project_urls": {
      "Homepage": "https://github.com/cvxgrp/cvxpygen"
    },
    "release_url": "https://pypi.org/project/cvxpygen/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Code generation with CVXPY",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17548634,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e9675f2da97f77e616dd6ab20fffaaf7196fa0595e6f64aa031f27e1a0a7b55",
          "md5": "c7a9569aff6e16840c7a3d1c89490bf9",
          "sha256": "69e7b862a3702b0111cffb2163e117c847f354836027d3e0f3c50fa8fd16d51c"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7a9569aff6e16840c7a3d1c89490bf9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 393768,
        "upload_time": "2022-02-24T20:45:06",
        "upload_time_iso_8601": "2022-02-24T20:45:06.341551Z",
        "url": "https://files.pythonhosted.org/packages/4e/96/75f2da97f77e616dd6ab20fffaaf7196fa0595e6f64aa031f27e1a0a7b55/cvxpygen-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ad5c26be3e281e1dbee8a45c205f8de9060c245a6b51bd2a576d31f9ba9e176",
          "md5": "a47ee86fd741b41fdc56d2afdda921fe",
          "sha256": "37b5ce709c3efba7f725750cab37414ded44776bda414b8da8cb975c1fbed3b7"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a47ee86fd741b41fdc56d2afdda921fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 393860,
        "upload_time": "2022-02-25T22:09:28",
        "upload_time_iso_8601": "2022-02-25T22:09:28.499686Z",
        "url": "https://files.pythonhosted.org/packages/4a/d5/c26be3e281e1dbee8a45c205f8de9060c245a6b51bd2a576d31f9ba9e176/cvxpygen-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb0040becca293daf14c468c67b1620095b20f4b0eb1d9d5e21602049349a93d",
          "md5": "d6b20935cedde945ee9a43e7837d49e6",
          "sha256": "a16ffb64ed93c3e5394949be7ea8803f7966c81de9de5180106fd45601d0b007"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b20935cedde945ee9a43e7837d49e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 393763,
        "upload_time": "2022-02-28T21:32:20",
        "upload_time_iso_8601": "2022-02-28T21:32:20.155377Z",
        "url": "https://files.pythonhosted.org/packages/fb/00/40becca293daf14c468c67b1620095b20f4b0eb1d9d5e21602049349a93d/cvxpygen-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "246db4cb2bc7807993d8edb73adc793f05682e1d714f069c2705f51c23cd9f2e",
          "md5": "d71def373018ada7aac505a5abd8177e",
          "sha256": "2751c1a848ecdbdc98df7f2d716ec97680bddc516f82681ae033cbfc99c2d271"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d71def373018ada7aac505a5abd8177e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 393919,
        "upload_time": "2022-03-01T20:54:04",
        "upload_time_iso_8601": "2022-03-01T20:54:04.243888Z",
        "url": "https://files.pythonhosted.org/packages/24/6d/b4cb2bc7807993d8edb73adc793f05682e1d714f069c2705f51c23cd9f2e/cvxpygen-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85a3743fc76af61cb59bddba4ed9bc2f9cc8542d75e8fc591ee57d609d924ca3",
          "md5": "a68b5a8942b340747c4cc7b71c26a34e",
          "sha256": "2a45642477214aec6142a1fa78b4720a2fb43942603a6a90dddf497ddbe1971f"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a68b5a8942b340747c4cc7b71c26a34e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 394277,
        "upload_time": "2022-03-11T20:34:44",
        "upload_time_iso_8601": "2022-03-11T20:34:44.073682Z",
        "url": "https://files.pythonhosted.org/packages/85/a3/743fc76af61cb59bddba4ed9bc2f9cc8542d75e8fc591ee57d609d924ca3/cvxpygen-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5914f70e6aa74ec640a35e6f27352ee4ed0088b6ef86cfb93728f7b09d0c95e0",
          "md5": "5c7d81eb6433430fb279944ea8087875",
          "sha256": "c02ed8d1fdce160db8889a63c4bd95d717a00838e8e7377f4ed77cef0c64e69d"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c7d81eb6433430fb279944ea8087875",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 394479,
        "upload_time": "2022-03-18T03:26:55",
        "upload_time_iso_8601": "2022-03-18T03:26:55.807062Z",
        "url": "https://files.pythonhosted.org/packages/59/14/f70e6aa74ec640a35e6f27352ee4ed0088b6ef86cfb93728f7b09d0c95e0/cvxpygen-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeab63a5b9c0a91163ccc17893378c97055a234074a1cd9421f49c4fd61fb672",
          "md5": "cbda1e484c723e8dc5115c9c839608a6",
          "sha256": "3558af39ad989fade18e38280c05d1fc0b1b2d694d5f91443a6409f4b9ce50e8"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cbda1e484c723e8dc5115c9c839608a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 394769,
        "upload_time": "2022-09-10T09:43:34",
        "upload_time_iso_8601": "2022-09-10T09:43:34.467989Z",
        "url": "https://files.pythonhosted.org/packages/ae/ab/63a5b9c0a91163ccc17893378c97055a234074a1cd9421f49c4fd61fb672/cvxpygen-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f24a5ea4c1da56c664ea6705e4b66422e439612d11e2052a35b19c1f03bc235b",
          "md5": "b61fc8aa9d3bf280475405cc23b800da",
          "sha256": "6e22bf377aec5cab869554a8fb95a6c2d386ae275529c8147fa3547442f2bbc5"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b61fc8aa9d3bf280475405cc23b800da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 394909,
        "upload_time": "2023-01-23T08:39:35",
        "upload_time_iso_8601": "2023-01-23T08:39:35.155016Z",
        "url": "https://files.pythonhosted.org/packages/f2/4a/5ea4c1da56c664ea6705e4b66422e439612d11e2052a35b19c1f03bc235b/cvxpygen-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d77c5953e2352d0caa9953c75328c4eed51d58f8234ba22189ca568d8e686cc",
          "md5": "01e5f8140f90ace8d4f37498d0fcb78a",
          "sha256": "1ae937fc9881d78d56e3f34d72e5a7bbca9cb12108740e59f6a5dccb11e0fc6d"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "01e5f8140f90ace8d4f37498d0fcb78a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 395063,
        "upload_time": "2023-04-02T14:53:41",
        "upload_time_iso_8601": "2023-04-02T14:53:41.355321Z",
        "url": "https://files.pythonhosted.org/packages/7d/77/c5953e2352d0caa9953c75328c4eed51d58f8234ba22189ca568d8e686cc/cvxpygen-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27d542ec712d2ce2d4c4e2e78d1e3b8949b9f1cefc7adb56b551ea3013749921",
          "md5": "d150e4fa4a96f11a1181fc08a3836436",
          "sha256": "6ddcccc0fba953b8dceb0b43b1d356736621ae09418866a952d02da169d041e3"
        },
        "downloads": -1,
        "filename": "cvxpygen-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d150e4fa4a96f11a1181fc08a3836436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 397775,
        "upload_time": "2023-04-02T15:37:57",
        "upload_time_iso_8601": "2023-04-02T15:37:57.974514Z",
        "url": "https://files.pythonhosted.org/packages/27/d5/42ec712d2ce2d4c4e2e78d1e3b8949b9f1cefc7adb56b551ea3013749921/cvxpygen-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27d542ec712d2ce2d4c4e2e78d1e3b8949b9f1cefc7adb56b551ea3013749921",
        "md5": "d150e4fa4a96f11a1181fc08a3836436",
        "sha256": "6ddcccc0fba953b8dceb0b43b1d356736621ae09418866a952d02da169d041e3"
      },
      "downloads": -1,
      "filename": "cvxpygen-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d150e4fa4a96f11a1181fc08a3836436",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 397775,
      "upload_time": "2023-04-02T15:37:57",
      "upload_time_iso_8601": "2023-04-02T15:37:57.974514Z",
      "url": "https://files.pythonhosted.org/packages/27/d5/42ec712d2ce2d4c4e2e78d1e3b8949b9f1cefc7adb56b551ea3013749921/cvxpygen-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}