{
  "info": {
    "author": "Ashwin",
    "author_email": "imashwin02@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MovieRecEngine\n\nMovieRecEngine be an abbreviation of Movie Recommendation Engine. This is a simple collaborative filtering based library using Pytorch Sequential Neural Network to make your Movie Recommendation System easy.\n\n*This library is in very early-stage currently! So, there might be remarkable changes.*\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install MovieRecEngine.\n\n```bash\npip install MovieRecEngine\n```\n## Description\n\nMovieRecEngine uses collaborative filtering to find similarities between users and items simultaneously to provide recommendations. This allows for serendipitous recommendations; that is, collaborative filtering models can recommend an item to user A based on the interests of a similar user B. Furthermore, the embeddings can be learned automatically, without relying on hand-engineering of features. \n\nMovieRecEngine uses pyptorch sequential Neural Networks to train a model that can predict users rating for an unseen movie based on his/her past interests/ratings provided. \n\nMovieRecEngine, uses [tez](https://pypi.org/project/tez/) simple pytorch trainer that supports cpu and gpu training.\n\n## How to use MovieRecEngine\n\n* To train a model using MovieRecEngine, define a Dataset that contains columns \"userId\", \"movieId\", \"ratings\". Example [Train sample](https://github.com/MrR0b0t-23/MovieRecEngine/blob/main/Examples/Train_Sample.csv)\n* Create a object for ```Train ``` class in MovieRecEngine library with parameters trainDatasetPath, userLabelEncoderPath, movieLabelEncoderPath, validDatasetSize, trainBatchSize, validBatchSize, device, nEpochs, trainedModelPath, randomState.\n* Train the model by calling ```train``` function in ```Train``` class.\n\n* To predict user movie ratings using MovieRecEngine, define a Dataset that contains columns \"userId\", \"movieId\", \"ratings\". Example [Predict sample](https://github.com/MrR0b0t-23/MovieRecEngine/blob/main/Examples/Predict_Sample.csv)\n\n*NOTE: \"userId\" needs to contain 1 unique userId.*\n* Create a object for ```Predict ``` class in MovieRecEngine library with parameters datasetPath, userLabelEncoderPath, movieLabelEncoderPath, trainedModelPath, predictBatchSize, device.\n* Predict user movie ratings by calling ```predict``` function in ```Predict ``` class.\n\n## Parameters\n\n1. ```Train``` class: \n- trainDatasetPath ==> Path for your training Dataset.\n- userLabelEncoderPath ==> Path in which you want to save user Label Encoder (this will be used in your prediction)\n- movieLabelEncoderPath ==> Path in which you want to save movie Label Encoder (this will be used your prediction)\n- validDatasetSize ==> Test size for train_test_split \n- trainBatchSize ==> The number of train samples to work through before updating the internal model parameters.\n- validBatchSize ==> The number of test samples to work through before updating the internal model parameters.\n- device ==> Device in which you want to train your model 'cuda' or 'cpu'. Default 'cpu'. \n- nEpochs ==> The number times that the learning algorithm will work through the entire training dataset.\n- trainedModelPath ==> Path to save your trained model (this will be used in your prediction)\n- randomState ==> Random State values for train_test_split\n\n2. ```Predict``` class:\n\n- datasetPath ==> Path for your prediction Dataset.\n- userLabelEncoderPath ==> Path in which you saved user Label Encoder (while training)\n- movieLabelEncoderPath ==>  Path in which you saved movie Label Encoder (while training)\n- trainedModelPath ==>  Path in which you saved Trained model (while training)\n- predictBatchSize ==> The number of prediction samples to work\n- device ==> Device in which you want to train your model 'cuda' or 'cpu'. Default 'cpu'.\n\n## Contributing\n\nCurrently, we are not accepting any pull requests! All PRs will be closed. If you want a feature or something doesn't work, please create an [issue](https://github.com/MrR0b0t-23/MovieRecEngine/issues).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrR0b0t-23/MovieRecEngine",
    "keywords": "Movie Recommendation Engine,Deep Learning,Movie Recommendation System,Collabative Filtering,Recommendation,MovieRecEngine,Pytorch Recommendation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MovieRecEngine",
    "package_url": "https://pypi.org/project/MovieRecEngine/",
    "platform": "",
    "project_url": "https://pypi.org/project/MovieRecEngine/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MrR0b0t-23/MovieRecEngine/issues",
      "Homepage": "https://github.com/MrR0b0t-23/MovieRecEngine"
    },
    "release_url": "https://pypi.org/project/MovieRecEngine/0.1.1/",
    "requires_dist": [
      "torch (>=1.6.0)",
      "tez (>=0.1.2)",
      "pandas (>=1.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "MovieRecEngine is a simple collaborative filtering based library using Pytorch Sequential Neural Network to make prediction of user ratings for an unseen movie based on his/her past interests/ratings provided.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9964064,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea54623a34cf472bfe2ab4158a9322505eb8f3048e4c49f1e4305301386bdf30",
          "md5": "6c5bb3f45ee125325561a1122b0aa178",
          "sha256": "258d36722b4b61b12c1c0c98c3d84dc2c66feb715a2d2a88ebd7dc2d27c0839f"
        },
        "downloads": -1,
        "filename": "MovieRecEngine-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c5bb3f45ee125325561a1122b0aa178",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5501,
        "upload_time": "2021-04-03T07:43:27",
        "upload_time_iso_8601": "2021-04-03T07:43:27.106401Z",
        "url": "https://files.pythonhosted.org/packages/ea/54/623a34cf472bfe2ab4158a9322505eb8f3048e4c49f1e4305301386bdf30/MovieRecEngine-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5346bfdd38c52e13dcf2d3f365ce28638d9c2d74548695766bd1800a8cdbd17",
          "md5": "4bde9d96f2b33975b4e3b08c27c06bfc",
          "sha256": "5897d90859273c60860a1dc77d3b571e0ca13f0c90a11663dd8f35a57ee71ac3"
        },
        "downloads": -1,
        "filename": "MovieRecEngine-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bde9d96f2b33975b4e3b08c27c06bfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4831,
        "upload_time": "2021-04-03T07:43:28",
        "upload_time_iso_8601": "2021-04-03T07:43:28.506833Z",
        "url": "https://files.pythonhosted.org/packages/d5/34/6bfdd38c52e13dcf2d3f365ce28638d9c2d74548695766bd1800a8cdbd17/MovieRecEngine-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea54623a34cf472bfe2ab4158a9322505eb8f3048e4c49f1e4305301386bdf30",
        "md5": "6c5bb3f45ee125325561a1122b0aa178",
        "sha256": "258d36722b4b61b12c1c0c98c3d84dc2c66feb715a2d2a88ebd7dc2d27c0839f"
      },
      "downloads": -1,
      "filename": "MovieRecEngine-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c5bb3f45ee125325561a1122b0aa178",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5501,
      "upload_time": "2021-04-03T07:43:27",
      "upload_time_iso_8601": "2021-04-03T07:43:27.106401Z",
      "url": "https://files.pythonhosted.org/packages/ea/54/623a34cf472bfe2ab4158a9322505eb8f3048e4c49f1e4305301386bdf30/MovieRecEngine-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5346bfdd38c52e13dcf2d3f365ce28638d9c2d74548695766bd1800a8cdbd17",
        "md5": "4bde9d96f2b33975b4e3b08c27c06bfc",
        "sha256": "5897d90859273c60860a1dc77d3b571e0ca13f0c90a11663dd8f35a57ee71ac3"
      },
      "downloads": -1,
      "filename": "MovieRecEngine-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4bde9d96f2b33975b4e3b08c27c06bfc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4831,
      "upload_time": "2021-04-03T07:43:28",
      "upload_time_iso_8601": "2021-04-03T07:43:28.506833Z",
      "url": "https://files.pythonhosted.org/packages/d5/34/6bfdd38c52e13dcf2d3f365ce28638d9c2d74548695766bd1800a8cdbd17/MovieRecEngine-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}