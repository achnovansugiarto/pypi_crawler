{
  "info": {
    "author": "",
    "author_email": "Jason Thomale <jason.thomale@unt.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Mocking"
    ],
    "description": "fauxdoc\n=======\n\n[![Build Status](https://github.com/unt-libraries/fauxdoc/actions/workflows/do-checks-and-tests.yml/badge.svg?branch=main)](https://github.com/unt-libraries/fauxdoc/actions)\n\n* [About](#about)\n* [Installation](#installation)\n* [Basic Usage](#basic-usage)\n* [Contributing](#contributing)\n* [License](#license)\n\n## About\n\n*`fauxdoc`* is designed to help you efficiently generate fake (faux) record or document (doc) data conforming to bespoke requirements.\n\nFauxdoc is tested with Python versions 3.7 and above, including 3.11. It has almost no external requirements: if you are using Python 3.7, it requires typing_extensions and importlib_metadata to provide features that were added in 3.8. Otherwise, it requires nothing but the standard library.\n\n### Why not Faker or Mimesis?\n\n[Faker](https://faker.readthedocs.io) and [Mimesis](https://mimesis.name) are established tools for generating fake data, and they are way more \"batteries included\" than Fauxdoc. Why not just implement a set of custom data providers for one of these?\n\n#### Dynamically Generating Bespoke Data\n\nWhereas other libraries make it dead simple to produce values that recognizably correspond to real-world items or properties (colors, names, addresses, etc.), Fauxdoc helps you dial in on patterns or features that may only pertain to your use case. This is helpful if you're trying to test something specific, like forcing certain sets of edge cases.\n\nFauxdoc began as part of a utility for helping test and benchmark configurations for particular Solr collections. We wanted to test search performance by producing text that shared certain features of a live collection, such as using specific alphabets; having word, phrase, and/or sentence lengths (etc.) within certain limits; and having specific terms occur in certain specific distributions. And we wanted to be able to simulate facets by choosing data values from a finite list of random terms that would produce a term distribution similar to the real data. Even with Faker or Mimesis, we would have had to build most of this from scratch, anyway.\n\n#### Field / Schema / Document-Set Control\n\nOther libraries mostly focus on generating values in isolation, but Fauxdoc facilitates having more control at the `Field` and `Schema` levels. For example, when generating documents to use to benchmark Solr, we found that we wanted to be able to do things like control uniqueness on a per-field basis, control uniqueness across an entire document set, generate data based on values in other fields, and have better control over multi-valued fields.\n\n#### Performant Extensibility\n\nWe wrote Fauxdoc knowing that we'd be using it to generate hundreds of thousands or millions of fake Solr documents at one time, so performance was a concern. However, Fauxdoc is also meant to be highly extensible, and it's easy for extensibility to come at the expense of performance. So, Fauxdoc classes are designed to allow performant extensibility. You generally have a choice: you can implement something as (e.g.) a wrapper that's conceptually simple but a bit slower, or you can implement the same feature using a custom class, with lower-level methods that are faster but a little less simple. It just depends on your use case and where you need the extra performance.\n\nThe built-in data providers (called `Emitters`) are designed to be as fast as we could make them. Their performance is roughly comparable to Mimesis', although this is an apples-to-oranges comparison. Like Mimesis, they are much faster than Faker.\n\n[Top](#top)\n\n\n## Installation\n\nInstall the latest published version of fauxdoc with:\n\n```\npython -m pip install fauxdoc\n```\n\nSee [Contributing](#contributing) for the recommended installation process if you want to develop on fauxdoc. \n\n[Top](#top)\n\n\n## Basic Usage\n\n### Emitters\n\nConceptually, `Emitters` are like Faker or Mimesis `Providers`. They are the objects that output your data values: simply instantiate one and then call it. If you need multiple values at once, you can supply an integer when calling.\n\n```python\nfrom fauxdoc import emitters\nmyrandom = emitters.Choice(['a', 'b', 'c'], weights=[45, 45, 10])\n\nmyrandom()\n# 'b'\n\nmyrandom(10)\n# ['a', 'b', 'a', 'c', 'b', 'b', 'a', 'a', 'a', 'b'] \n```\n\nSeveral emitter types are provided in `fauxdoc.emitters` that have general behavior and options. Above, the `Choice` emitter chooses randomly between multiple values, with optional weights and parameters to control uniqueness.\n\nFor more complex behavior, you can of course create your own Emitter classes using `fauxdoc.emitter.Emitter` as your base class. Mixins are provided in `fauxdoc.mixins` for standard ways of doing things (such as randomization).\n\n### Fields\n\nEach `Field` wraps an emitter instance and provides options to gate the output and/or generate multiple values. These options are themselves implemented as emitters. As with emitter instances, you also call a field instance to output values.\n\n```python\nfrom fauxdoc import emitters, profile\n\nuser_tags = ['adventure', 'yellow', 'awesome', 'food', 'action films']\nuser_tags_field = profile.Field(\n  'user_tags',\n  emitters.Choice(user_tags, replace_only_after_call=True),\n  gate=emitters.chance(0.8),\n  repeat=emitters.poisson_choice(range(1, 6), mu=3)\n)\n\nuser_tags_field()\n# ['action films', 'food', 'yellow']\n\nuser_tags_field()\n# ['adventure', 'yellow', 'awesome', 'food']\n\nuser_tags_field()\n# ['yellow', 'awesome', 'food']\n\nuser_tags_field()\n# ['food', 'adventure', 'awesome', 'yellow']\n\nuser_tags_field()\n# \n```\n\n### Schema\n\nYour `Schema` is a specific collection of field instances. Calling the schema instance generates data representing one full document (returned as a dictionary).\n\n```python\nimport itertools\nfrom fauxdoc import emitters, profile, dtrange\n\nENGLISH = emitters.make_alphabet([(ord('a'), ord('z'))])\nGENRES = ['Science', 'Literature', 'Medicine', 'Fiction', 'Television']\n\nmyschema = profile.Schema(\n  profile.Field('id', emitters.Iterative(lambda: itertools.count(1))),\n  profile.Field(\n    'title',\n    emitters.WrapOne(\n      emitters.Text(\n        numwords_emitter=emitters.poisson_choice(range(1, 10), mu=2),\n        word_emitter=emitters.Word(\n          length_emitter=emitters.poisson_choice(range(1, 10), mu=5),\n          alphabet_emitter=emitters.Choice(ENGLISH)\n        )\n      ),\n      lambda title: title.capitalize()\n    )\n  ),\n  profile.Field('doc_type', emitters.Choice(['report', 'article', 'book'])),\n  profile.Field('date_created', emitters.Choice(dtrange.dtrange('1950-01-01', '2025-01-01'))),\n  profile.Field(\n    'genres',\n    emitters.Choice(GENRES, replace_only_after_call=True),\n    gate=emitters.chance(0.5),\n    repeat=emitters.poisson_choice(range(1, 3), mu=1)\n  )\n)\n\nmyschema()\n# {\n#   'id': 1,\n#   'title': 'Dvcoqh zbuaba',\n#   'doc_type': 'book',\n#   'date_created': datetime.date(1951, 8, 15),\n#   'genres': ['Medicine', 'Fiction']\n# }\n\nmyschema()\n# {\n#   'id': 2,\n#   'title': 'Dird',\n#   'doc_type': 'report',\n#   'date_created': datetime.date(1998, 4, 6),\n#   'genres': ['Fiction']\n# }\n\nmyschema()\n# {\n#   'id': 3,\n#   'title': 'Wvlptqk',\n#   'doc_type': 'book',\n#   'date_created': datetime.date(1977, 12, 10),\n#   'genres': None\n# }\n\nmyschema()\n# {\n#   'id': 4,\n#   'title': 'Tnhkez',\n#   'doc_type': 'article',\n#   'date_created': datetime.date(1988, 1, 22),\n#   'genres': None\n# }\n\nmyschema()\n# {\n#   'id': 5,\n#   'title': 'Ld gudv lnaxx',\n#   'doc_type': 'article',\n#   'date_created': datetime.date(1989, 9, 30),\n#   'genres': ['Medicine']\n# }\n```\n\n### Generating Data Based on Other Fields\n\nFor complex schemas, you may find generating values for each field in isolation to be too limiting. Fauxdoc allows you to create emitters that can access values generated in other fields. You can also create hidden fields, allowing you to generate a normalized or collective data value and then pull it into the appropriate de-normalized fields.\n\n```python\nimport itertools\nfrom fauxdoc import emitter, emitters, profile\n\ndef item_data_generator():\n  for num in itertools.count(1):\n    yield {\n      'item_id': num,\n      'barcode': 2000000000 + num\n    }\n\nmyschema = profile.Schema(\n  # This field is hidden. It generates data for 1 to 10 \"items\" that\n  # the other fields then pull from.\n  profile.Field(\n    '__all_items',\n    emitters.Iterative(item_data_generator),\n    repeat=emitters.poisson_choice(range(1, 10), mu=3),\n    hide=True,\n  )\n)\n\nmyschema.add_fields(\n  profile.Field(\n    'display_items',\n    emitters.BasedOnFields(\n      myschema.fields['__all_items'],\n      lambda items: items[:3]\n    )\n  ),\n  profile.Field(\n    'more_items',\n    emitters.BasedOnFields(\n      myschema.fields['__all_items'],\n      lambda items: items[3:] if len(items) > 3 else None\n    )\n  ),\n  profile.Field(\n    'has_more_items',\n    emitters.BasedOnFields(\n      myschema.fields['__all_items'],\n      lambda items: bool(len(items) > 3)\n    )\n  ),\n  profile.Field(\n    'item_ids',\n    emitters.BasedOnFields(\n      myschema.fields['__all_items'],\n      lambda items: [i['item_id'] for i in items]\n    )\n  ),\n  profile.Field(\n    'item_barcodes',\n    emitters.BasedOnFields(\n      myschema.fields['__all_items'],\n      lambda items: [i['barcode'] for i in items]\n    )\n  )\n)\n\nmyschema()\n# {\n#   'display_items': [\n#     {'item_id': 1, 'barcode': 2000000001}\n#   ],\n#   'more_items': None,\n#   'has_more_items': False,\n#   'item_ids': [1],\n#   'item_barcodes': [2000000001]\n# }\n\nmyschema()\n# {\n#   'display_items': [\n#     {'item_id': 2, 'barcode': 2000000002},\n#     {'item_id': 3, 'barcode': 2000000003},\n#     {'item_id': 4, 'barcode': 2000000004}\n#   ],\n#   'more_items': [\n#     {'item_id': 5, 'barcode': 2000000005}\n#   ],\n#   'has_more_items': True,\n#   'item_ids': [2, 3, 4, 5],\n#   'item_barcodes': [2000000002, 2000000003, 2000000004, 2000000005]\n# }\n```\n\n[Top](#top)\n\n\n## Contributing\n\n### Installing for Development and Testing\n\nFork the project on GitHub and then clone it locally:\n\n```bash\ngit clone https://github.com/[your-github-account]/fauxdoc.git\n```\n\nAll dependency and build information is defined in `pyproject.toml` and follows [PEP 621](https://peps.python.org/pep-0621/). From the fauxdoc root directory, you can install it as an editable project into your development environment with:\n\n```bash\npython -m pip install -e .[dev]\n```\n\n(The `[dev]` ensures it includes the optional development dependencies, namely pytest.)\n\n\n### Running Tests\n\nRun the full test suite in your active environment by invoking:\n\n```bash\npytest\n```\n\nfrom the fauxdoc root directory.\n\n\n#### Tox\n\nBecause this is a library, it needs to be tested against all supported environments for each update, not just one development environment. The tool we use for this is [tox](https://tox.wiki/en/latest/).\n\nRather than use a separate `tox.ini` file, I've opted to put the tox configuration directly in `pyproject.toml` (under the `[tool.tox]` table). There, I've defined several environments: flake8, pylint, and each of py37 through py311 using both the oldest possible dependencies and newest possible dependencies. When you run tox, you can target a specific environment, a specific list of environments, or all of them.\n\nWhen tox runs, it automatically builds each virtual environment it needs, and then it runs whatever commands it needs within that environment (for linting, or testing, etc.). All you have to do is expose all the necessary Python binaries on the path, and tox will pick the correct one. My preferred way to manage this is with [pyenv](https://github.com/pyenv/pyenv) + [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv).\n\nFor example: Install these tools along with the Python versions you want to test against. Then:\n\n1. Create an environment with tox installed. E.g.:\n    ```\n    pyenv virtualenv 3.10.8 tox-3.10.8\n    pyenv activate\n    python -m pip install tox\n    ```\n2. In the fauxdoc project repository root, create a file called `.python-version`. Add all of the Python versions you want to use, e.g., 3.7 to 3.11. For 3.10, use your `tox-3.10.8`. This should look something like this:\n    ```\n    3.7.15\n    3.8.15\n    3.9.15\n    tox-3.10.8\n    3.11.0\n    ```\n4. If `tox-3.10.8` is still activated, issue a `pyenv deactivate` command so that pyenv picks up what's in the file. (A manually-activated environment overrides anything set in a `.python-version` file.)\n5. At this point you should have all five environments active at once in that directory. When you run `tox`, the tox in your `tox-3.10.8` environment will run, and it will pick up the appropriate binaries automatically (`python3.7` through `python3.11`) since they're all on the path.\n\nNow you can just invoke tox to run linters and all the tests against all the environments:\n\n```bash\ntox\n```\n\nOr just run linters:\n\n```bash\ntox -e flake8,pylint_critical\n```\n\nOr run tests against a list of specific environments:\n\n```bash\ntox -e py39-oldest,py39-newest\n```\n\n[Top](#top)\n\n\n## License\n\nSee the [LICENSE](LICENSE) file.\n\n[Top](#top)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "data,fake,mock,faux,Solr,databases,models,fixtures,faker,testing,benchmarking,records,documents",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fauxdoc",
    "package_url": "https://pypi.org/project/fauxdoc/",
    "platform": null,
    "project_url": "https://pypi.org/project/fauxdoc/",
    "project_urls": {
      "Changelog": "https://github.com/unt-libraries/fauxdoc/blob/main/CHANGELOG.md",
      "Homepage": "https://github.com/unt-libraries/fauxdoc",
      "Repository": "https://github.com/unt-libraries/fauxdoc"
    },
    "release_url": "https://pypi.org/project/fauxdoc/1.1.0/",
    "requires_dist": [
      "typing-extensions (>=3.6.5) ; python_version == \"3.7\"",
      "importlib-metadata (>=2.0.0) ; python_version == \"3.7\"",
      "pytest (>=3.8.0) ; (python_version < \"3.10\") and extra == 'dev'",
      "pytest (>=6.2.4) ; (python_version >= \"3.10\") and extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Python package for generating fake (faux) record or document (doc) data conforming to bespoke requirements.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17072602,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "467a03747ad13a1dfde9ef889e7267b47e3c8e557701a13fd24fb3d8f4c43417",
          "md5": "f60b6a118fd1a21e4a5c7d10d9b4c86b",
          "sha256": "15774610bade76683cb26cd77ef6fe52b95ea25b6ed3e970381c7924e857d2cb"
        },
        "downloads": -1,
        "filename": "fauxdoc-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f60b6a118fd1a21e4a5c7d10d9b4c86b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 38313,
        "upload_time": "2022-11-02T21:38:56",
        "upload_time_iso_8601": "2022-11-02T21:38:56.374707Z",
        "url": "https://files.pythonhosted.org/packages/46/7a/03747ad13a1dfde9ef889e7267b47e3c8e557701a13fd24fb3d8f4c43417/fauxdoc-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e27930d99d05133485782310945666e3a33c2f0d87486524da6e84497044824a",
          "md5": "3481d0f9cd719f636af19d13430bc621",
          "sha256": "69280964d9d8f7183a3b4549410633328e0dcad378a5a08d87423035c66c8129"
        },
        "downloads": -1,
        "filename": "fauxdoc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3481d0f9cd719f636af19d13430bc621",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 53967,
        "upload_time": "2022-11-02T21:38:57",
        "upload_time_iso_8601": "2022-11-02T21:38:57.756443Z",
        "url": "https://files.pythonhosted.org/packages/e2/79/30d99d05133485782310945666e3a33c2f0d87486524da6e84497044824a/fauxdoc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6043bcb089fbd9f30087689ddee07e6ed2eaec9a65ea7390e5e55ecd7a0912f",
          "md5": "8e89fb81857ba590aeb01cfb4afaae43",
          "sha256": "f31ef535cc3efeea38820b0098a068b8d52480e125e8dc12fe896ad4a6eeafc7"
        },
        "downloads": -1,
        "filename": "fauxdoc-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e89fb81857ba590aeb01cfb4afaae43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 46690,
        "upload_time": "2023-02-27T21:21:27",
        "upload_time_iso_8601": "2023-02-27T21:21:27.028394Z",
        "url": "https://files.pythonhosted.org/packages/b6/04/3bcb089fbd9f30087689ddee07e6ed2eaec9a65ea7390e5e55ecd7a0912f/fauxdoc-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3171e06668db256adb701697cae686dd98c78b31c35d82d9673b9d191d5d1b10",
          "md5": "236e38c053eb6c215a8ff03794f594ec",
          "sha256": "76ef7f32f92e6fcf38bbc8bcfc44480f35273b96669b3685504ff234d4c674e5"
        },
        "downloads": -1,
        "filename": "fauxdoc-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "236e38c053eb6c215a8ff03794f594ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 73240,
        "upload_time": "2023-02-27T21:21:28",
        "upload_time_iso_8601": "2023-02-27T21:21:28.275332Z",
        "url": "https://files.pythonhosted.org/packages/31/71/e06668db256adb701697cae686dd98c78b31c35d82d9673b9d191d5d1b10/fauxdoc-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6043bcb089fbd9f30087689ddee07e6ed2eaec9a65ea7390e5e55ecd7a0912f",
        "md5": "8e89fb81857ba590aeb01cfb4afaae43",
        "sha256": "f31ef535cc3efeea38820b0098a068b8d52480e125e8dc12fe896ad4a6eeafc7"
      },
      "downloads": -1,
      "filename": "fauxdoc-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e89fb81857ba590aeb01cfb4afaae43",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 46690,
      "upload_time": "2023-02-27T21:21:27",
      "upload_time_iso_8601": "2023-02-27T21:21:27.028394Z",
      "url": "https://files.pythonhosted.org/packages/b6/04/3bcb089fbd9f30087689ddee07e6ed2eaec9a65ea7390e5e55ecd7a0912f/fauxdoc-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3171e06668db256adb701697cae686dd98c78b31c35d82d9673b9d191d5d1b10",
        "md5": "236e38c053eb6c215a8ff03794f594ec",
        "sha256": "76ef7f32f92e6fcf38bbc8bcfc44480f35273b96669b3685504ff234d4c674e5"
      },
      "downloads": -1,
      "filename": "fauxdoc-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "236e38c053eb6c215a8ff03794f594ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 73240,
      "upload_time": "2023-02-27T21:21:28",
      "upload_time_iso_8601": "2023-02-27T21:21:28.275332Z",
      "url": "https://files.pythonhosted.org/packages/31/71/e06668db256adb701697cae686dd98c78b31c35d82d9673b9d191d5d1b10/fauxdoc-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}