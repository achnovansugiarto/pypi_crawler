{
  "info": {
    "author": "Luka Sosiashvili",
    "author_email": "luksosiashvili@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyxcelFrame\n\nTools for more specialized interactions between the Pandas DataFrames and the Excel worksheets.\n\n## Install\n\n`pip install pyxcelframe`\n\n## Usage\n\n### Examples\n\nLet's suppose that we have an Excel file named **\"numbers.xlsx\"** with the sheet\nnamed **\"Dictionary\"** in which we would like to insert the ___pandas.DataFrame___.\n\n\nImport ___pandas___ and create an example ___DataFrame___ (which will be inserted into the Excel worksheet):\n\n```python\nimport pandas as pd\n\n\nex = {\n    'Num': [1, 2, 3, 4],\n    'AfterFirstBlankCol': 'AfterFirstBlank',\n    'Descr': ['One', 'Two', 'Three', 'Four'],\n    'AfterSecondBlankCol': 'AfterSecondBlank.',\n    'Squared': [1, 4, 9, 16],\n    'Binary:': ['1', '10', '11', '100']\n}\n\ndf = pd.DataFrame(ex)\n```\n\n- Import ___openpyxl.load_workbook___ and open **numbers.xlsx** - Our Excel workbook;\n- Get - **Dictionary** our desired sheet:\n\n```python\nfrom openpyxl import load_workbook\n\n\nworkbook = load_workbook('numbers.xlsx')\nworksheet = workbook['Dictionary']\n```\n#### Functions\n\n##### 1. `column_last_row(worksheet, column_name)`\n\n- If we had to get the last non-empty row in coolumn __A__ of Excel worksheet called __Dictionary__ and if we definitely knew that there would not be more than __10000__ row records in that column:\n\n\n_NOTE: By default `count_from` will be __1048576__, because that number is the total amount of the rows in an Excel worksheet._\n```python\nfrom pyxcelframe import column_last_row\n\n\ncolumn_last_row(worksheet=worksheet, column_name=['A'], count_from=10000)\n```\n\n##### 2. `copy_cell_style(cell_src, cell_dst)`\n\n- Let's say, we have a cell in Excel __Dictionary__ worksheet that we would like to copy the style from,\nand it is __O3__;\n- Let __O4__ be our destination cell:\n\n_NOTE: If we wanted to copy that style to more than one cell, we would simply use the loop\ndepending on the locations of the destination cells._\n\n```python\nfrom pyxcelframe import copy_cell_style\n\n\ncopy_cell_style(cell_src=worksheet['O3'], cell_dst=worksheet['O4'])\n```\n\n##### 3. `sheet_to_sheet(filename_sheetname_src, filename_sheetname_dst, calculated)`\n\n- Let's say that we have two Excel files, and we need specific sheet from one file\nto be completely copied to another file's specific sheet;\n- `filename_sheetname_src` is the parameter for one file -> sheet the data\nto be copied from ___(tuple(['FILENAME_SRC', 'SHEETNAME_SRC']))___;\n- `worksheet_dst` is the parameter for the destination ___Worksheet___ the data\nto be copied to ___(openpyxl.worksheet.worksheet.Worksheet)___;\n- Let's assume that we have __file_src.xlsx__ as src file and for `worksheet_src` we can\nuse its __CopyThisSheet__ sheet.\n- We can use __output.xlsx__ -> __CopyToThisSheet__ sheet as the destination worksheet, for which\nwe already declared the ___Workbook___ object above.\n\n_NOTE: We are assuming that we need all the formulas (where available) from the source sheet, not calculated data, so we set `calculated` parameter to __False__._\n\n```python\nfrom pyxcelframe import sheet_to_sheet\n\n\nworksheet_to = workbook['CopyToThisSheet']\n\nsheet_to_sheet(filename_sheetname_src=('file_src.xlsx', 'CopyThisSheet'),\n               worksheet_dst=worksheet_to,\n               calculated=False)\n```\n\n##### 4. `insert_frame(worksheet, dataframe, col_range, row_range, num_str_cols, skip_cols, headers)`\n\n- From our package ___pyxcelframe___ import function ___insert_frame___;\n- Insert `ex` - ___DataFrame___ into our sheet twice - with and without conditions:\n\n```python\nfrom pyxcelframe import insert_frame\n\n\n# 1 - Simple insertion\ninsert_frame(worksheet=worksheet, dataframe=df)\n\n# 2 - Insertion with some conditions\ninsert_frame(worksheet=worksheet,\n             dataframe=df,\n             col_range=(3, 0),\n             row_range=(6, 8),\n             num_str_cols=['I'],\n             skip_cols=['D', 'F'],\n             headers=True)\n```\n\nIn the first insertion, we did not give our function any arguments, which means the ___DataFrame___\n`ex` will be inserted into the __Dictionary__ sheet in the area __A1:F4__ (without the headers).\n\nHowever, with the second insertion we define some conditions:\n\n- `col_range=(3, 0)` - This means that insertion will be started at the Excel column with the\nindex 3 (column __C__) and will not be stopped until the very end, since we gave 0 as the\nsecond element of the tuple\n\n- `row_range=(6, 8)` - Only in between these rows (in Excel) will the ___DataFrame___ data be inserted,\nwhich means that only the first row (since the `headers` is set to _True_) from `ex` will be inserted into the sheet\n\n- `num_str_cols=['F']` - Another condition here is to not convert _Binary_ column values to int.\nIf we count, this column will be inserted in the Excel column __F__, so we tell the function to leave\nthe values in it as string\n\n- `skip_cols=['D', 'F']` - __D__ and __F__ columns in Excel will be skipped and since our worksheet\nwas blank in the beginning, these columns will be blank (that is why I named the columns in the\n___DataFrame___ related names)\n\n- `headers=True` - This time, the ___DataFrame___ columns will be inserted, too, so the overall\ninsertion area would be __C6:J8__\n\n##### 5. `insert_columns(worksheet, dataframe, columns_dict, row_range, num_str_cols, headers)`\n\n- From our package ___pyxcelframe___ import function ___insert_columns___;\n- Insert `ex` - ___DataFrame___ into our sheet according to the `cols_dict` - ___Dict___ which contains the `ex` ___DataFrame's___ column names as the keys and the `worksheet` Excel ___Worksheet's___ column names as the values:\n\n_NOTE: Only those columns that are included as the `cols_dict` keys will be inserted into the `worksheet` from the `ex` ___DataFrame___; Also, all the other parameters are similar to the parameters of the `insert_frame` function, so we will only be giving the required arguments for this example._\n\n```python\nfrom pyxcelframe import insert_columns\n\n\n# Column \"Num\" of the `ex` DataFrame will be\n# inserted to the \"I\" column of the `worksheet`\n# \"Descr\" to \"J\"\n# \"Squared\" to \"L\"\ncols_dict = {\n    \"Num\": \"I\",\n    \"Descr\": \"J\",\n    \"Squared\": \"L\"\n}\n\ninsert_columns(worksheet=worksheet,\n               dataframe=df,\n               columns_dict=cols_dict)\n```\n\n- Finally, let's save our changes to a new Excel file:\n\n```python\nworkbook.save('output.xlsx')\n```\n\n###### For the really detailed description of the parameters, please see `__doc__` attribute of the above functions.\n\n#### Full Code\n\n```python\nimport pandas as pd\nfrom openpyxl import load_workbook\nfrom pyxcelframe import copy_cell_style, \\\n                        insert_frame, \\\n                        insert_columns, \\\n                        sheet_to_sheet, \\\n                        column_last_row\n\n\nex = {\n    'Num': [1, 2, 3, 4],\n    'AfterFirstBlankCol': 'AfterFirstBlank',\n    'Descr': ['One', 'Two', 'Three', 'Four'],\n    'AfterSecondBlankCol': 'AfterSecondBlank.',\n    'Squared': [1, 4, 9, 16],\n    'Binary:': ['1', '10', '11', '100']\n}\n\ndf = pd.DataFrame(ex)\n\nworkbook = load_workbook('numbers.xlsx')\nworksheet = workbook['Dictionary']\n\n# Column \"Num\" of the `ex` DataFrame will be\n# inserted to the \"I\" column of the `worksheet`\n# \"Descr\" to \"J\"\n# \"Squared\" to \"L\"\ncols_dict = {\n    \"Num\": \"I\",\n    \"Descr\": \"J\",\n    \"Squared\": \"L\"\n}\n\n\n# Get the last non-empty row of the specific column\ncolumn_last_row(worksheet=worksheet, column_name=['A'], count_from=10000)\n\n\n# Copy the cell style\ncopy_cell_style(cell_src=worksheet['O3'], cell_dst=worksheet['O4'])\n\n\n# Copy the entire sheet\nworksheet_to = workbook['CopyToThisSheet']\n\nsheet_to_sheet(filename_sheetname_src=('file_src.xlsx', 'CopyThisSheet'),\n               worksheet_dst=worksheet_to,\n               calculated=False)\n\n\n# Insert DataFrame into the sheet\n\n## 1 - Simple insertion\ninsert_frame(worksheet=worksheet, dataframe=df)\n\n## 2 - Insertion with some conditions\ninsert_frame(worksheet=worksheet,\n             dataframe=df,\n             col_range=(3, 0),\n             row_range=(6, 8),\n             num_str_cols=['I'],\n             skip_cols=['D', 'F'],\n             headers=True)\n\n## 3 - Insertion according to the `cols_dict` dictionary\ninsert_columns(worksheet=worksheet,\n               dataframe=df,\n               columns_dict=cols_dict)\n\n\nworkbook.save('output.xlsx')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lukasanukvari/pyxcelframe",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyxcelframe",
    "package_url": "https://pypi.org/project/pyxcelframe/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyxcelframe/",
    "project_urls": {
      "Homepage": "https://github.com/lukasanukvari/pyxcelframe"
    },
    "release_url": "https://pypi.org/project/pyxcelframe/1.6/",
    "requires_dist": [
      "pandas",
      "openpyxl"
    ],
    "requires_python": ">=3.8",
    "summary": "Useful tool for more specialized interactions between the Pandas DataFrames and the Excel worksheets",
    "version": "1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13153112,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d7ed702199347903b5ba5e59f07ee34177bdd335289761644d46eac79d9ae64",
          "md5": "44b070209b5a89e09f5c55cbd9811249",
          "sha256": "ed5d119d449ee7aac9e597962c5b279dfcd72a2f5a2f32d2609f577f52cee6db"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44b070209b5a89e09f5c55cbd9811249",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6665,
        "upload_time": "2022-02-16T03:22:47",
        "upload_time_iso_8601": "2022-02-16T03:22:47.141627Z",
        "url": "https://files.pythonhosted.org/packages/3d/7e/d702199347903b5ba5e59f07ee34177bdd335289761644d46eac79d9ae64/pyxcelframe-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfe4e502e43e3d9a3284274c18bb1afa27cb80cde56675509b415c46f67066e9",
          "md5": "24c09a7d2d0126170c68ec0845c20b93",
          "sha256": "755f381226dab29ed6eca147ce3a29102058925fdf674a888f07ebf41f7baa0b"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24c09a7d2d0126170c68ec0845c20b93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7181,
        "upload_time": "2022-02-16T03:22:49",
        "upload_time_iso_8601": "2022-02-16T03:22:49.104427Z",
        "url": "https://files.pythonhosted.org/packages/df/e4/e502e43e3d9a3284274c18bb1afa27cb80cde56675509b415c46f67066e9/pyxcelframe-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dcc729a5f402ac6dcf31d94cb24a5f7a3d001b7acb0ad5b37a8934d6baa8e84",
          "md5": "5cfd9cd4ec4fb3a3a6ffe9ea045e6198",
          "sha256": "a5e0b4ea5861f9d6792149afe82a5eb7b8531072502899f0c99e1e6606001db6"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cfd9cd4ec4fb3a3a6ffe9ea045e6198",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6793,
        "upload_time": "2022-02-17T20:06:54",
        "upload_time_iso_8601": "2022-02-17T20:06:54.788608Z",
        "url": "https://files.pythonhosted.org/packages/8d/cc/729a5f402ac6dcf31d94cb24a5f7a3d001b7acb0ad5b37a8934d6baa8e84/pyxcelframe-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95297922c81319f3de93d787adf831fd769798efd6c2a2ce167bfa93cbc25380",
          "md5": "07ceeb123bf70703661ae1f2fc81ceb7",
          "sha256": "b752923dc670eae8a8d77af1a89e704b114348d7b615fcc1478c2de8ca5abe0a"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07ceeb123bf70703661ae1f2fc81ceb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7286,
        "upload_time": "2022-02-17T20:06:57",
        "upload_time_iso_8601": "2022-02-17T20:06:57.173837Z",
        "url": "https://files.pythonhosted.org/packages/95/29/7922c81319f3de93d787adf831fd769798efd6c2a2ce167bfa93cbc25380/pyxcelframe-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42cda877617cfa8dd3812cc81ba7e946a32fba9df3ac293f736db51721c5877e",
          "md5": "eb0dcdc1f0b707b61c88fadb179bcd60",
          "sha256": "af667f8663bccadab898d209fc33f8944953b12b7df27c5d382fdcbb2ccfa1c5"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb0dcdc1f0b707b61c88fadb179bcd60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7364,
        "upload_time": "2022-03-11T00:53:43",
        "upload_time_iso_8601": "2022-03-11T00:53:43.431144Z",
        "url": "https://files.pythonhosted.org/packages/42/cd/a877617cfa8dd3812cc81ba7e946a32fba9df3ac293f736db51721c5877e/pyxcelframe-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4c5cb3c0de19ef04a418732a747bd5b6dd88e58621e35aa0c602327b45725b8",
          "md5": "9477b6fb1b9b60994e7877bf69eb8889",
          "sha256": "b2cbf2bd9d2df0d8b47151a78198376e56a8f0bb753f663c56f33c80bf7136bb"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9477b6fb1b9b60994e7877bf69eb8889",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8074,
        "upload_time": "2022-03-11T00:53:45",
        "upload_time_iso_8601": "2022-03-11T00:53:45.237410Z",
        "url": "https://files.pythonhosted.org/packages/b4/c5/cb3c0de19ef04a418732a747bd5b6dd88e58621e35aa0c602327b45725b8/pyxcelframe-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70e5ec96ec67b979760eda6cfedf80979a22dc628dc541c63789cd5d16c9725c",
          "md5": "8b299fcbe49c52c79b474de9f0ef10c9",
          "sha256": "b22acaca8f156bde4f21d8cb590f0148856321428e2852ec4555d82fd4e943b2"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b299fcbe49c52c79b474de9f0ef10c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7371,
        "upload_time": "2022-03-11T21:04:40",
        "upload_time_iso_8601": "2022-03-11T21:04:40.437368Z",
        "url": "https://files.pythonhosted.org/packages/70/e5/ec96ec67b979760eda6cfedf80979a22dc628dc541c63789cd5d16c9725c/pyxcelframe-1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e339a20ab9740a19b1febe79e4d70248cea87a1d517a1728e7d50aa552310f82",
          "md5": "339970336874eb914e35ca9136c69db1",
          "sha256": "c977a6d41ae6249a305ff7aa508ca84d1de6484c8d592b81dc6f53a1fb81565c"
        },
        "downloads": -1,
        "filename": "pyxcelframe-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "339970336874eb914e35ca9136c69db1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8085,
        "upload_time": "2022-03-11T21:04:42",
        "upload_time_iso_8601": "2022-03-11T21:04:42.652701Z",
        "url": "https://files.pythonhosted.org/packages/e3/39/a20ab9740a19b1febe79e4d70248cea87a1d517a1728e7d50aa552310f82/pyxcelframe-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70e5ec96ec67b979760eda6cfedf80979a22dc628dc541c63789cd5d16c9725c",
        "md5": "8b299fcbe49c52c79b474de9f0ef10c9",
        "sha256": "b22acaca8f156bde4f21d8cb590f0148856321428e2852ec4555d82fd4e943b2"
      },
      "downloads": -1,
      "filename": "pyxcelframe-1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8b299fcbe49c52c79b474de9f0ef10c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7371,
      "upload_time": "2022-03-11T21:04:40",
      "upload_time_iso_8601": "2022-03-11T21:04:40.437368Z",
      "url": "https://files.pythonhosted.org/packages/70/e5/ec96ec67b979760eda6cfedf80979a22dc628dc541c63789cd5d16c9725c/pyxcelframe-1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e339a20ab9740a19b1febe79e4d70248cea87a1d517a1728e7d50aa552310f82",
        "md5": "339970336874eb914e35ca9136c69db1",
        "sha256": "c977a6d41ae6249a305ff7aa508ca84d1de6484c8d592b81dc6f53a1fb81565c"
      },
      "downloads": -1,
      "filename": "pyxcelframe-1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "339970336874eb914e35ca9136c69db1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8085,
      "upload_time": "2022-03-11T21:04:42",
      "upload_time_iso_8601": "2022-03-11T21:04:42.652701Z",
      "url": "https://files.pythonhosted.org/packages/e3/39/a20ab9740a19b1febe79e4d70248cea87a1d517a1728e7d50aa552310f82/pyxcelframe-1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}