{
  "info": {
    "author": "CoC12",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Dynamic Form\n\nDjango Dynamic Form は、ユーザーによるフォームの入力、選択、変更などのイベントを検知し、\n各フィールドの表示/非表示、有効/無効の切り替えや選択肢の変更などのフォームの最新化を行います。\n\n## Installation\n\n1. `'dynamic_form'` を `INSTALLED_APPS` に追加します。\n\n   ```python\n   INSTALLED_APPS = [\n       ...\n       'dynamic_form',\n   ]\n   ```\n\n2. dynamic_form の URLconf をプロジェクトの `urls.py` に追加します。\n\n   ```python\n   urlpatterns = [\n       ...\n       path('', include('dynamic_form.urls')),\n   ]\n   ```\n\n3. HTML に script タグを追加します。\n\n   ```html\n   {% load static %}\n   <script type=\"text/javascript\" src=\"{% static 'dynamic_form/js/dynamic-form.js' %}\"></script>\n   ```\n\n## Quick start\n\n1. フォーム に `DynamicFormMixin` を継承させます。\n\n    ```python\n    from django import forms\n    from dynamic_form.forms import DynamicFormMixin\n\n\n    class TestForm(DynamicFormMixin, forms.Form):\n        ...\n    ```\n\n2. `settings.py` にフォームへの`.(ドット)`区切りのモジュールパスと、フォームを一意に特定する文字列を定義します。\n\n    ```python\n    DYNAMIC_FORM = {\n        'FORM_KEYS': {\n            'sample_app.forms.TestForm': 'test_form',\n        },\n    }\n    ```\n\n3. フォーム最新化のトリガーとなるフィールドに、data 属性 `data-ddf-trigger` を追加します。\n属性値にはイベントの種類を表す`TriggerEventTypes`クラスのメンバー値を指定します。\n詳細は[TriggerEventTypes](#triggereventtypes)をご覧ください。\n\n    ```python\n    from dynamic_form.types import TriggerEventTypes\n\n\n    class TestForm(DynamicFormMixin, forms.Form):\n        age = forms.IntegerField(\n            label='年齢',\n            widget=forms.NumberInput(\n                attrs={\n                    'data-ddf-trigger': TriggerEventTypes.BLUR,\n                }\n            )\n        )\n    ```\n\n4. 表示/非表示、有効/無効の切り替えなど、フィールドに対する制御を定義します。\n詳細は[フィールド制御メソッド](#フィールド制御メソッド)をご覧ください。\n\n    ```python\n    class TestForm(DynamicFormMixin, forms.Form):\n        age = forms.IntegerField(\n            label='年齢',\n            widget=forms.NumberInput(\n                attrs={\n                    'data-ddf-trigger': TriggerEventTypes.BLUR,\n                }\n            )\n        )\n        consent = forms.BooleanField(\n            label='保護者同意',\n            help_text='未成年の場合は保護者の同意が必要です。',\n        )\n\n        def is_hidden_consent(self):\n            age = self.data.get('age', '')\n            return int(age) >= 20 if age.isdigit() else True\n    ```\n\n5. ビューでフォームを生成し、`render_form()` メソッドの戻り値をテンプレートに渡します。\nテンプレートに渡された `render_form()` メソッドの戻り値を`form`タグで囲み、`method` を `POST` にします。\n\n    ```python\n    class TestView(TemplateView):\n        template_name = 'test_view.html'\n\n        def get(self, request, *args, **kwargs):\n            form = TestForm()\n            context = {\n                'test_form': form.render_form(),\n            }\n            return self.render_to_response(context)\n    ```\n\n    test_view.html\n\n    ```html\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ test_form }}\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    ```\n\n## Documentation\n\n### **DynamicFormMixin**\n\n#### クラス変数\n\n* form_template\n\n    フォームの表示はテンプレートファイルによりカスタマイズできます。\n    このテンプレートには `form` タグを含めません。\n    カスタマイズしたテンプレートファイルは `form_template` で指定します。\n\n    ```python\n    class TestForm(DynamicFormMixin, forms.Form):\n        form_template = 'sample_app/sample_form.html'\n    ```\n\n    sample_app/sample_form.html\n\n    ```html\n    {% for field in form.visible_fields %}\n        <div class=\"form-row\">\n            <div class=\"form-label\">\n                {{ field.label }}\n            </div>\n            <div class=\"form-field\">\n                {{ field }}\n            </div>\n            {% if field.errors %}\n            <div class=\"form-error\">\n                {{ field.errors }}\n            </div>\n            {% endif %}\n        </div>\n    {% endfor %}\n    ```\n\n* do_dynamic_validate\n\n    フォーム最新化のときに、バリデーションを実施するかを指定します。\n    デフォルトは `False` です。\n\n    ```python\n    class TestForm(DynamicFormMixin, forms.Form):\n        do_dynamic_validate = True\n    ```\n\n#### フィールド制御メソッド\n\nフィールド制御メソッドは、各フィールドの表示/非表示、有効/無効の切り替えや選択肢の変更などを制御します。\n制御が必要なフィールドの、必要なメソッドのみを定義します。\nフォームの入力内容は `self.data` からアクセスできますが、未入力のフィールドなど値が `self.data` に含まれない可能性を考慮する必要があります。\n\n制御できる項目は以下のとおりです。\n\n* is_hidden_<field_name>()\n\n    フィールドを非表示にするかの真偽値を返します。\n    `True` を返した場合、フィールドの `required` が `False` に、 ウィジェットが `django.forms.HiddenInput` となります。\n\n* is_disabled_<field_name>()\n\n    フィールドを無効にするかの真偽値を返します。\n    `True` を返した場合、フィールドの `disabled` が `True` に、 `required` が `False` となります。\n\n* is_required_<field_name>()\n\n    フィールドを必須にするかの真偽値を返します。\n    `True` を返した場合、フィールドの `required` が `True` となります。\n\n* set_queryset_<field_name>()\n\n    フィールドに設定する `queryset` を返します。 `ModelChoiceField` に対して使用します。\n\n    ```python\n    def set_queryset_task(self):\n        selected_member = self.data.get('member')\n        return Task.objects.filter(id=selected_member)\n    ```\n\n* set_choices_<field_name>()\n\n    フィールドに設定する `choices` を返します。 `ChoiceField` に対して使用します。\n\n    ```python\n    def set_choices_fruits(self):\n        return [\n            (1, 'apple'),\n            (2, 'banana'),\n            (3, 'melon'),\n        ]\n    ```\n\n### **TriggerEventTypes**\n\nTriggerEventTypesでは、フォーム最新化のトリガーとなるイベントを定義しています。\nフィールドの `data-ddf-trigger` 属性の属性値に指定します。\n\n* BLUR\n\n    フィールドから `blur` イベントが発生した場合にフォームを最新化します。\n\n* CHANGE\n\n    フィールドから `change` イベントが発生した場合にフォームを最新化します。\n\n* CLICK\n\n    フィールドから `click` イベントが発生した場合にフォームを最新化します。\n\n* DOUBLE_CLICK\n\n    フィールドから `dblclick` イベントが発生した場合にフォームを最新化します。\n\n* INPUT\n\n    フィールドから `input` イベントが発生した場合にフォームを最新化します。\n\n* KEY_UP\n\n    フィールドから `keyup` イベントが発生した場合にフォームを最新化します。\n\n* KEY_DOWN\n\n    フィールドから `keydown` イベントが発生した場合にフォームを最新化します。\n\n* SELECT\n\n    フィールドから `select` イベントが発生した場合にフォームを最新化します。\n\n\n### **Settings**\n\nDjango Dynamic Form の設定は `DYNAMIC_FORM` という名前で指定します。\n\n```python\nDYNAMIC_FORM = {\n    'FORM_KEYS': {\n        'sample_app.forms.TestForm': 'test_form',\n    },\n}\n```\n\n* FORM_KEYS\n\n    フォームへの`.(ドット)`区切りのモジュールパスと、フォームを一意に特定する文字列を定義します。\n    この文字列はHTML上に `data-form-key` 属性の属性値として設定されます。\n\n    モジュールパスは `__class__.__module__` と `__class__.__name__` を`.(ドット)`区切りで連結した文字列です。\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CoC12/django-dynamic-form",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dynamic-form",
    "package_url": "https://pypi.org/project/django-dynamic-form/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-dynamic-form/",
    "project_urls": {
      "Homepage": "https://github.com/CoC12/django-dynamic-form"
    },
    "release_url": "https://pypi.org/project/django-dynamic-form/0.1/",
    "requires_dist": [
      "Django (>=3.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Dynamic update for Django form.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14032473,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b50842a0653b1edb7d93b0d9fc3e027e5e0f23bb25f8f75e953df99d7f704c",
          "md5": "eaf234d78087acfb177228e130ac960a",
          "sha256": "94f7c2be1d02447e544c3cbc88495ef32558bc2e76aea73f1bd3d7e13bd9dfd9"
        },
        "downloads": -1,
        "filename": "django_dynamic_form-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eaf234d78087acfb177228e130ac960a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9713,
        "upload_time": "2022-06-04T16:10:17",
        "upload_time_iso_8601": "2022-06-04T16:10:17.797905Z",
        "url": "https://files.pythonhosted.org/packages/f9/b5/0842a0653b1edb7d93b0d9fc3e027e5e0f23bb25f8f75e953df99d7f704c/django_dynamic_form-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34d378d2b5459a732f7e13e78e0383c961735555767a0549c0b6316c5617c223",
          "md5": "0178070142282736c981b878ae9abb75",
          "sha256": "3013de9c0286cf3ae24b9f30b96453ae9e19e6f12ea633873543688dc20cdd3c"
        },
        "downloads": -1,
        "filename": "django-dynamic-form-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0178070142282736c981b878ae9abb75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8514,
        "upload_time": "2022-06-04T16:10:20",
        "upload_time_iso_8601": "2022-06-04T16:10:20.333435Z",
        "url": "https://files.pythonhosted.org/packages/34/d3/78d2b5459a732f7e13e78e0383c961735555767a0549c0b6316c5617c223/django-dynamic-form-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9b50842a0653b1edb7d93b0d9fc3e027e5e0f23bb25f8f75e953df99d7f704c",
        "md5": "eaf234d78087acfb177228e130ac960a",
        "sha256": "94f7c2be1d02447e544c3cbc88495ef32558bc2e76aea73f1bd3d7e13bd9dfd9"
      },
      "downloads": -1,
      "filename": "django_dynamic_form-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaf234d78087acfb177228e130ac960a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9713,
      "upload_time": "2022-06-04T16:10:17",
      "upload_time_iso_8601": "2022-06-04T16:10:17.797905Z",
      "url": "https://files.pythonhosted.org/packages/f9/b5/0842a0653b1edb7d93b0d9fc3e027e5e0f23bb25f8f75e953df99d7f704c/django_dynamic_form-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34d378d2b5459a732f7e13e78e0383c961735555767a0549c0b6316c5617c223",
        "md5": "0178070142282736c981b878ae9abb75",
        "sha256": "3013de9c0286cf3ae24b9f30b96453ae9e19e6f12ea633873543688dc20cdd3c"
      },
      "downloads": -1,
      "filename": "django-dynamic-form-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0178070142282736c981b878ae9abb75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8514,
      "upload_time": "2022-06-04T16:10:20",
      "upload_time_iso_8601": "2022-06-04T16:10:20.333435Z",
      "url": "https://files.pythonhosted.org/packages/34/d3/78d2b5459a732f7e13e78e0383c961735555767a0549c0b6316c5617c223/django-dynamic-form-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}