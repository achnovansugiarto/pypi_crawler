{
  "info": {
    "author": "Alessandro Campolo",
    "author_email": "campoloalex@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LiquidCrystal_I2C-linux\nThis repository is a python port of the Arduino [LiquidCrystal_I2C](https://gitlab.informatika.org/IF3111-2017-K01-01/arduino/-/tree/e226a48d5cb3735b7fa6f08e3169188495677fe6/Arduino-LiquidCrystal-I2C-library-master) library.\n\nWith this library you can connect your I2C lcd to your linux box (using available GPIOs, but also via the I2C pins of your [VGA port](https://dave.cheney.net/tag/hd44780)) and control it like you did with the C++ library.\n\n# Table of Contents\n1. [Supported devices](#supported-devices)\n2. [Installation](#Installation)\n3. [Implementation](#Implementation)\n   - [Getting Started](#getting-started)\n      - [Basic commands](#basic-commands)\n      - [Other commands](#other-commands)\n   - [Systemd](#systemd)\n4. [Contributions](#contributions)\n5. [Thanks](#thanks)\n\n# Supported devices\nThis library by default will handle most common type of character lcds based on the Hitachi HD44780 with PCF8574 I2C backpack:\n\n40x2, 20x4, 20x2, 16x2, 16x1 (type 2), 16x4\n\ndisplays not supported by this:\n- 16x1 (type 1), This uses a discontigous memory for the single line\n(It's not particularly difficult to make it work, but you have to use it as an 8x2 display)\n- 40x4 is dual 40x2 displays using dual E signals which is not supported\n\nSee here for further explanation of lcd memory addressing:\nhttp://web.alfredstate.edu/weimandn/lcd/lcd_addressing/lcd_addressing_index.html\n\n\n# Installation\n0. Use `raspi-config` to enable the I2C interface (only for Raspberry Pi and similar boards)\n\n1. Enable i2c kernel module\n  ```sh\n  sudo modprobe i2c-dev\n  ```\n\n2. Add your user to i2c group\n  ```sh\n  sudo usermod -a -G i2c $(whoami)\n  ```\n  To apply group change, depending on the case, you may need to:\n  - Close and reopen your terminal window (if you are in a desktop environment)\n  - Log-out and log-in again in your tty session (if you use a computer without a desktop environment)\n  - Restart your ssh session (if you are connected to a remote device, maybe a Raspberry)\n\n3. List all available I2C buses\n  ```sh\n  ls /dev/i2c-*\n  ```\n\n4. Scan for devices on the first bus\n  ```sh\n  i2cdetect -y 0\n  ```\n\n5. Connect your device\n\n6. Scan again the same bus and look for new devices. If you see a new device you're done, otherwise repeat from step 4, scanning the other available buses until you find your device. (each bus corresponds to a physical connection so, if you change the device, you don't need to scan all the buses)<br>If you still can't find it try checking the cables and trying again.\n\n7. Installing the library\n  ```sh\n  python3 -m pip install liquidcrystal_i2c-linux\n  ```\n\n# Implementation\n## Getting Started\n### Basic commands:\n- **Initialization**\n  ```python\n  from liquidcrystal_i2c import LCD\n  ```\n  Initialize the lcd using bus and address you found before.<br>\n  If cols and rows are not specified, library assumes 16x2.<br>\n  ```python\n  lcd = LCD(bus=1, addr=0x3e, cols=16, rows=2)\n  ```\n  At this point the lcd is already cleared and the cursor set to home, so we don't need to call lcd.clear() and lcd.home() again.<br>\n  However when you need to clear all and place the cursor at 0,0 use:\n  ```python\n  lcd.clear()\n  lcd.home()\n  ```\n- **Printing**<br>\n  Place the cursor where you want to print (remember numbers start from zero so 0 will be the first column/row).\n  ```python\n  lcd.setCursor(3,1)\n  lcd.print(\"Hello, world!\")\n  ```\n- **Printing special characters**<br>\n  Thanks to [The Raspberry Pi guy](https://github.com/the-raspberry-pi-guy)'s [library](https://github.com/the-raspberry-pi-guy/lcd) we have two methods to print special characters:\n  \n  1. classic LiquidCrystal_I2C way\n  ```python\n  lcd.setCursor(2,1)\n  lcd.write(0xF7) #prints Ï€ symbol\n  ```\n  2. new The Raspberry Pi guy's way\n  ```python\n  lcd.setCursor(2,1)\n  lcd.printExt(\"Hello {0xF7}\")\n  ```\n  Warning: if you use this method with string `format` you need to escape the placeholder using double curly brackets.\n  ```python\n  lcd.setCursor(2,1)\n  lcd.printExt(\"Hello {{0xF7}} = {0}\".format(3.14))\n  ```\n- **Printing custom characters**<br>\n  The HD44780 allows to define 8 custom characters that you can load in CGRAM and call like any other special character.\n  The 8 character slots are numbered from 0 to 7, their placeholders are obviously `{0x00},{0x01},{0x02},{0x03},{0x04},{0x05},{0x06},{0x07}`.\n  ```python\n  # define custom character bitmap\n  # you can design the character using https://maxpromer.github.io/LCD-Character-Creator/ but keep in mind that byte definitions are different between C++ and Python\n  custom_char_cpu = [\n    0b01010,\n    0b11111,\n    0b10001,\n    0b10101,\n    0b10001,\n    0b11111,\n    0b01010,\n    0b00000\n  ]\n  # now it's time to load the character\n  # we will use slot 3\n  lcd.createChar(3, custom_char_cpu)\n  # print the character as all special characters\n  lcd.setCursor(0,0)\n  lcd.printExt(\"This is a CPU: {0x03}\")\n  ```\n### Other commands:\n- Turn backlight on/off\n  ```python\n  lcd.backlight()\n  lcd.noBacklight()\n  ```\n- Show/hide cursor\n  ```python\n  lcd.cursor()\n  lcd.noCursor()\n  ```\n- Turn cursor blinking on/off (needs cursor to be enabled)\n  ```python\n  lcd.blink()\n  lcd.noBlink()\n  ```\n- Show hide all text\n  ```python\n  lcd.display()\n  lcd.noDisplay()\n  ```\n- Scroll the entire display by one place left/right without resending strings\n  ```python\n  lcd.scrollDisplayLeft()\n  lcd.scrollDisplayRight()\n  ```\n- Set autoscroll on/off\n  ```python\n  lcd.autoscroll()\n  lcd.noAutoscroll()\n  ```\n- Set writing direction\n  ```python\n  lcd.leftToRight()\n  lcd.rightToLeft()\n  ```\n\n## Systemd\nUse the following procedure to run any LCD Python script as a (systemd) service:\n\n1. Create a new unit file in `/lib/systemd/system/` called `i2c-lcd.service`:\n   ```sh\n   sudo nano /lib/systemd/system/i2c-lcd.service\n   ```\n\n2. Copy and paste the following in the new unit file:\n   ```sh\n   [Unit]\n   Description=Python script for an hd44780 LCD\n\n   [Service]\n   Type=simple\n   ## Edit the following according to the script permissions\n   User=<YOUR-USERNAME>\n   #Group=users\n\n   ## Edit the following with the full path to your script\n   ExecStart=/usr/bin/python3 /path/to/script.py\n\n   Restart=always\n   RestartSec=5\n\n   KillMode=process\n   KillSignal=SIGINT\n\n   [Install]\n   WantedBy=multi-user.target\n   ```\n\n3. Enable the service and start it:\n   ```sh\n   sudo systemctl enable i2c-lcd.service\n   sudo systemctl start i2c-lcd.service\n   ```\n\n4. Check that the LCD is displaying the correct information; otherwise, check the service status:\n   ```sh\n   systemctl status i2c-lcd.service\n   ```\n\n# Thanks\nI'd like to thank the creators of the C++ library for their awesome work, and [The Raspberry Pi guy](https://github.com/the-raspberry-pi-guy) for the `printExt` function, derived from his [`lcd_display_extended_string`](https://github.com/the-raspberry-pi-guy/lcd/blob/master/drivers/i2c_dev.py).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a13ssandr0/liquidcrystal_i2c-linux",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "liquidcrystal-i2c-linux",
    "package_url": "https://pypi.org/project/liquidcrystal-i2c-linux/",
    "platform": "",
    "project_url": "https://pypi.org/project/liquidcrystal-i2c-linux/",
    "project_urls": {
      "Bug Tracker": "https://github.com/a13ssandr0/liquidcrystal_i2c-linux/issues",
      "Homepage": "https://github.com/a13ssandr0/liquidcrystal_i2c-linux"
    },
    "release_url": "https://pypi.org/project/liquidcrystal-i2c-linux/1.0.0/",
    "requires_dist": [
      "smbus"
    ],
    "requires_python": "",
    "summary": "Python port of the LiquidCrystal_I2C C++ library for Hitachi HD44780",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12560257,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbab27c9daf23fad447c6d75ecbfa14ba3df143d0af4290271e4bdd85734d921",
          "md5": "068cd97c5005c52663908bb3060b83ac",
          "sha256": "f7c6aceb1bb144747fad9ce1b04ed963a35b527e356bd7feccea166e2991b16c"
        },
        "downloads": -1,
        "filename": "liquidcrystal_i2c_linux-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "068cd97c5005c52663908bb3060b83ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8026,
        "upload_time": "2022-01-13T10:59:38",
        "upload_time_iso_8601": "2022-01-13T10:59:38.155991Z",
        "url": "https://files.pythonhosted.org/packages/fb/ab/27c9daf23fad447c6d75ecbfa14ba3df143d0af4290271e4bdd85734d921/liquidcrystal_i2c_linux-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0e84eae21025b3b3dfdf61b48868f8e0a9807dada0eade7dfb312e0dd8557f7",
          "md5": "b5d3ee34ad4ab04ce5153104e506b0c8",
          "sha256": "5bfa59b6c8c55971cd68ec8e1fe31832fb364cf9d9ce8e64cbc399def6983e5c"
        },
        "downloads": -1,
        "filename": "liquidcrystal_i2c-linux-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5d3ee34ad4ab04ce5153104e506b0c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7675,
        "upload_time": "2022-01-13T10:59:39",
        "upload_time_iso_8601": "2022-01-13T10:59:39.471723Z",
        "url": "https://files.pythonhosted.org/packages/a0/e8/4eae21025b3b3dfdf61b48868f8e0a9807dada0eade7dfb312e0dd8557f7/liquidcrystal_i2c-linux-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbab27c9daf23fad447c6d75ecbfa14ba3df143d0af4290271e4bdd85734d921",
        "md5": "068cd97c5005c52663908bb3060b83ac",
        "sha256": "f7c6aceb1bb144747fad9ce1b04ed963a35b527e356bd7feccea166e2991b16c"
      },
      "downloads": -1,
      "filename": "liquidcrystal_i2c_linux-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "068cd97c5005c52663908bb3060b83ac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8026,
      "upload_time": "2022-01-13T10:59:38",
      "upload_time_iso_8601": "2022-01-13T10:59:38.155991Z",
      "url": "https://files.pythonhosted.org/packages/fb/ab/27c9daf23fad447c6d75ecbfa14ba3df143d0af4290271e4bdd85734d921/liquidcrystal_i2c_linux-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0e84eae21025b3b3dfdf61b48868f8e0a9807dada0eade7dfb312e0dd8557f7",
        "md5": "b5d3ee34ad4ab04ce5153104e506b0c8",
        "sha256": "5bfa59b6c8c55971cd68ec8e1fe31832fb364cf9d9ce8e64cbc399def6983e5c"
      },
      "downloads": -1,
      "filename": "liquidcrystal_i2c-linux-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b5d3ee34ad4ab04ce5153104e506b0c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7675,
      "upload_time": "2022-01-13T10:59:39",
      "upload_time_iso_8601": "2022-01-13T10:59:39.471723Z",
      "url": "https://files.pythonhosted.org/packages/a0/e8/4eae21025b3b3dfdf61b48868f8e0a9807dada0eade7dfb312e0dd8557f7/liquidcrystal_i2c-linux-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}