{
  "info": {
    "author": "竹永康",
    "author_email": "<gqylpy@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "[<img alt=\"LOGO\" src=\"http://www.gqylpy.com/static/img/favicon.ico\" height=\"21\" width=\"21\"/>](http://www.gqylpy.com)\n[![Release](https://img.shields.io/github/release/gqylpy/funccache.svg?style=flat-square\")](https://github.com/gqylpy/funccache/releases/latest)\n[![Python Versions](https://img.shields.io/pypi/pyversions/funccache)](https://pypi.org/project/funccache)\n[![License](https://img.shields.io/pypi/l/funccache)](https://github.com/gqylpy/funccache/blob/master/LICENSE)\n[![Downloads](https://pepy.tech/badge/funccache/month)](https://pepy.tech/project/funccache)\n\n# funccache\n\n> 如其名，`funccache` 实现函数缓存功能，由 GQYLPY 团队研发的一个框架，可缓存某个函数或某个类中定义的所有方法的返回值。\n> \n> > _你的程序中有一个函数会被多次调用，并且返回值不变，你会怎么做？为提高代码效率，你会先调用一次该函数并把返回值存到一个变量，之后就使用这个变量，而不是重复调用函数。是这样吗？你已经很不错了。但现在，我们要传授你一种比之更简明的方案，使用 `funccache` 模块直接缓存函数返回值。_\n> \n> `funccache` 有两种使用方式：当做元类使用，将缓存其元类实例中定义的所有方法的返回值；当做装饰器使用，将缓存被装饰函数的返回值。\n\n<kbd>pip3 install funccache</kbd>\n\n###### 缓存类中方法的返回值\n\n```python\nimport funccache\n\nclass Alpha(metaclass=funccache):\n    ...\n```\n此时，类 `Alpha` 中定义的所有方法以及`property`属性，在被其实例调用一次后，返回值都将被缓存，缓存在 `__cache_pool__` 属性中。此后的每次调用，只要参数不变，都是直接从 `__cache_pool__` 中取值，不会重复执行相关代码，大幅减少程序功耗并提高代码可读性。\n\n上述缓存功能默认只作用于单个实例，每个实例都有自己的 `__cache_pool__` 属性，若希望 `Alpha` 的所有实例共享同一份缓存，可启用 `__shared_instance_cache__` 属性：\n```python\nclass Alpha(metaclass=funccache):\n    __shared_instance_cache__ = True\n```\n设置类属性 `__shared_instance_cache__ = True` 后，属性 `__cache_pool__` 将被创建在 `Alpha` 类中，而不是 `Alpha` 的每个实例中。\n\n若希望某个方法或`property`不被缓存，可将其加入到 `__not_cache__` 列表中：\n\n```python\nclass Alpha(metaclass=funccache):\n    __not_cache__ = [method_obj_or_method_name, ...]\n```\n另外，`Alpha` 的子类也拥有上述缓存功能。\n\n###### 缓存函数返回值\n\n```python\nimport funccache\n\n@funccache\ndef alpha():\n    ...\n```\n此时，函数 `alpha` 在被调用一次后，其返回值将被缓存。此后的每次调用，只要参数不变，都是直接从缓存中取值，而不会重复执行 `alpha` 函数。\n\n装饰器的用法亦可获得单例类，只要实例化参数一致：\n```python\n@funccache\nclass Alpha:\n    ...\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://gqylpy.com",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "funccache",
    "package_url": "https://pypi.org/project/funccache/",
    "platform": null,
    "project_url": "https://pypi.org/project/funccache/",
    "project_urls": {
      "Homepage": "http://gqylpy.com",
      "Source": "https://github.com/gqylpy/funccache"
    },
    "release_url": "https://pypi.org/project/funccache/1.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "如其名，它实现缓存功能，可缓存某个函数或某个类中定义的所有方法的返回值。",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17350894,
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f02ceac4ff8b5c90650871f1b35a9b5bb7f6838016a30f51bdd70ddd90ad03",
          "md5": "e5bac4027cfb5cdb5e84af25bf8ef498",
          "sha256": "043d3c6328190e2dc62ac2502d23171d14071f15e277ec18c74d0f731c5711b4"
        },
        "downloads": -1,
        "filename": "funccache-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5bac4027cfb5cdb5e84af25bf8ef498",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 10084,
        "upload_time": "2023-03-19T04:20:16",
        "upload_time_iso_8601": "2023-03-19T04:20:16.539797Z",
        "url": "https://files.pythonhosted.org/packages/a8/f0/2ceac4ff8b5c90650871f1b35a9b5bb7f6838016a30f51bdd70ddd90ad03/funccache-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6a3e5b2709f43ddda0a21f7ca625aa3cba5dddedcb50748fdd18c4df2fc1e84",
          "md5": "505846d8f9f290482aaef4a469b61594",
          "sha256": "3b121226f96e2b1a915444f04a4276e50605dbbd66bed95fccfb0d56d243ecd3"
        },
        "downloads": -1,
        "filename": "funccache-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "505846d8f9f290482aaef4a469b61594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 9123,
        "upload_time": "2023-03-19T04:20:18",
        "upload_time_iso_8601": "2023-03-19T04:20:18.388872Z",
        "url": "https://files.pythonhosted.org/packages/f6/a3/e5b2709f43ddda0a21f7ca625aa3cba5dddedcb50748fdd18c4df2fc1e84/funccache-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8f02ceac4ff8b5c90650871f1b35a9b5bb7f6838016a30f51bdd70ddd90ad03",
        "md5": "e5bac4027cfb5cdb5e84af25bf8ef498",
        "sha256": "043d3c6328190e2dc62ac2502d23171d14071f15e277ec18c74d0f731c5711b4"
      },
      "downloads": -1,
      "filename": "funccache-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e5bac4027cfb5cdb5e84af25bf8ef498",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 10084,
      "upload_time": "2023-03-19T04:20:16",
      "upload_time_iso_8601": "2023-03-19T04:20:16.539797Z",
      "url": "https://files.pythonhosted.org/packages/a8/f0/2ceac4ff8b5c90650871f1b35a9b5bb7f6838016a30f51bdd70ddd90ad03/funccache-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6a3e5b2709f43ddda0a21f7ca625aa3cba5dddedcb50748fdd18c4df2fc1e84",
        "md5": "505846d8f9f290482aaef4a469b61594",
        "sha256": "3b121226f96e2b1a915444f04a4276e50605dbbd66bed95fccfb0d56d243ecd3"
      },
      "downloads": -1,
      "filename": "funccache-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "505846d8f9f290482aaef4a469b61594",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 9123,
      "upload_time": "2023-03-19T04:20:18",
      "upload_time_iso_8601": "2023-03-19T04:20:18.388872Z",
      "url": "https://files.pythonhosted.org/packages/f6/a3/e5b2709f43ddda0a21f7ca625aa3cba5dddedcb50748fdd18c4df2fc1e84/funccache-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}