{
  "info": {
    "author": "Nikhar",
    "author_email": "nikhar1210@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Pset 1\n\n[![Build Status](https://travis-ci.com/nikhar1210/2021sp-pset-1-nikhar1210.svg?token=KHso3oCAx2mNdEPGhupD&branch=master)](https://travis-ci.com/nikhar1210/2021sp-pset-1-nikhar1210)\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/29b3ba78ffcc1de8d664/maintainability)](https://codeclimate.com/repos/601e40518d954701b6006271/maintainability)\n\n[![Test Coverage](https://api.codeclimate.com/v1/badges/29b3ba78ffcc1de8d664/test_coverage)](https://codeclimate.com/repos/601e40518d954701b6006271/test_coverage)\n\n## Objectives\n\nIn this problem set you will:\n\n* Use [Pipenv](https://pipenv.pypa.io/en/latest/) to build and manage your\napplication\n\n* Further explore CI/CD, pulling data from AWS S3 and performing an analysis\n\n* Use decorators and context managers to implement an atomic write and pset\nsubmission\n\n* Dip your toes into hashing and parquet, which will be important in many of\nour problem sets\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Before you begin...](#before-you-begin)\n  - [Document code and read documentation](#document-code-and-read-documentation)\n  - [Docker shortcut](#docker-shortcut)\n  - [Pipenv](#pipenv)\n    - [Installation](#installation)\n    - [Usage](#usage)\n      - [Debugging pipenv installs](#debugging-pipenv-installs)\n      - [Pipenv inside docker](#pipenv-inside-docker)\n  - [Credentials and data](#credentials-and-data)\n    - [Using `awscli`](#using-awscli)\n      - [Installation (via pipenv)](#installation-via-pipenv)\n    - [Configure `awscli` locally](#configure-awscli-locally)\n      - [Make a .env (pronounced \"dotenv\") file](#make-a-env-pronounced-dotenv-file)\n        - [Caveats](#caveats)\n      - [Global config](#global-config)\n    - [Copy the data locally](#copy-the-data-locally)\n    - [Set the Travis environment variables](#set-the-travis-environment-variables)\n- [Problems](#problems)\n  - [Canvas helpers](#canvas-helpers)\n  - [Hashed strings](#hashed-strings)\n    - [Implement a standardized string hash](#implement-a-standardized-string-hash)\n    - [Salt and Pepper](#salt-and-pepper)\n  - [Atomic writes](#atomic-writes)\n    - [Implement an atomic write](#implement-an-atomic-write)\n  - [Parquet](#parquet)\n  - [Your main script and submission context manager](#your-main-script-and-submission-context-manager)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Before you begin...\n\n***Add your Build and Code Climate badges*** to the top of this README, using the\nmarkdown template for your master branch.  If you  are not using Travis,\nreplace with a build badge for the appropriate service.\n\n### Document code and read documentation\n\nFor some problems we have provided starter code. Please look carefully at the\ndoc strings and follow all input and output specifications.\n\nFor other problems, we might ask you to create new functions, please document\nthem using doc strings! Documentation factors into the \"python quality\" portion\nof your grade.\n\n### Docker shortcut\n\nSee [drun_app](./drun_app):\n\n```bash\ndocker-compose build\n./drun_app python # Equivalent to docker-compose run app python\n```\n\n### Pipenv\n\nThis pset will require dependencies.  Rather than using a requirements.txt, we\nwill use [pipenv](https://pipenv.readthedocs.io/en/latest/) to give us a pure,\nrepeatable, application environment.\n\n#### Installation\n\nIf you are using the Docker environment, you should be good to go.  Mac/windows\nusers should [install\npipenv](https://pipenv.readthedocs.io/en/latest/#install-pipenv-today) into\ntheir main python environment as instructed.  If you need a new python\nenvironment, you can use a base\n[conda](https://docs.conda.io/en/latest/miniconda.html) installation.  See\nCanvas for instructions.\n\n```bash\npipenv install --dev\npipenv run python some_python_file\n```\n\nIf you get a TypeError, see [this\nissue](https://github.com/pypa/pipenv/issues/3363)\n\n#### Usage\n\nRather than `python some_file.py`, you should run `pipenv run python\nsome_file.py` or `pipenv shell` etc\n\n***Never*** pip install something!  Instead you should `pipenv install pandas`\n*or `pipenv install --dev pytest`.  Use `--dev` if your app only needs the\n*dependency for development, not to actually do it's job.\n\nYou should ***avoid*** installing \"IDE apps\" like ipython or black into your\nPipenv environment - if you don't need it during CI or for the code to work, it\nshould not be an application dependency.\n\nPycharm [works great with\npipenv](https://www.jetbrains.com/help/pycharm/pipenv.html)\n\nBe sure to commit any changes to your [Pipfile](./Pipfile) and\n[Pipfile.lock](./Pipfile.lock)!\n\n##### Debugging pipenv installs\n\nIf a pipenv install fails, it can be hard to see what the root cause is.  Try\nthese tips:\n\n1. Ensure you don't have a bad package in your Pipfile (pipenv sometimes adds\nthem even if the install fails).  You can manually delete lines for packages you\ndon't want.\n\n2. Try verbose mode, with `pipenv install -v ...`.\n\n3. Try manually installing with `pip install ...` or `pip install -v ...`. This\nwill often show you the 'real' error.  If it works, don't forget to `pipenv\ninstall ...` to ensure the dep is tracked appropriately\n\n##### Pipenv inside docker\n\nBecause of the way docker freezes the operating system, installing a new package\nwithin docker is a two-step process:\n\n```bash\ndocker-compose build\n\n# Now i want a new thing\n./drun_app pipenv install pandas # Updates pipfile, but does not rebuild image\n# running ./drun_app python -c \"import pandas\" will fail!\n\n# Rebuild\ndocker-compose build\n./drun_app python -c \"import pandas\" # Now this works\n```\n\n### Credentials and data\n\nGit should be for code, not data, so we've created an S3 bucket for problem set\nfile distribution.  For this problem set, we've uploaded a data set of your\nanswers to the \"experience demographics\" quiz that you should have completed in\nthe first week. In order to access the data in S3, we need to install and\nconfigure `awscli` both for running the code locally and running our tests in\nTravis.\n\nYou should have created an IAM key in your AWS account.  DO NOT SHARE THE SECRET\nKEY WITH ANYONE. It gives anyone access to the S3 bucket.  It must not be\ncommitted to your code.\n\nFor more reference on security, see [Travis Best\nPractices](https://docs.travis-ci.com/user/best-practices-security/#recommendations-on-how-to-avoid-leaking-secrets-to-build-logs)\nand [Removing Sensitive\nData](https://help.github.com/articles/removing-sensitive-data-from-a-repository/).\n\n#### Using `awscli`\n\nAWS provides a [CLI\ntool](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html)\nthat helps interact with the many different services they offer.\n\n##### Installation (via pipenv)\n\nWe have already installed `awscli` into your pipenv.  It is available within the\npipenv shell and the docker container via the same mechanism.\n\n```bash\npipenv run aws --help\n./drun_app aws --help\n```\n\n#### Configure `awscli` locally\n\nNow\n[configure](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n`awscli` to access the S3 bucket.  You have a few options for how to do so:\n\n1. Make a .env file for you pset\n2. Globally configure your client (not recommended)\n3. Manually manage environment variables\n\nNote that, regardless of the option, ***your code does not change*** - the code\nassumes it is running in a pre-configured environment.  In fact, your code will\nlikely be configured differently on your machine vs on Travis.\n\nPersonally, for local development, I find using [named\nprofiles](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)\n(eg, `AWS_PROFILE=csci_student`) the easiest, since you can configure once on\nyour system and then just indicate the profile for each pset.  You will likely\nneed to provide the raw credentials in CI/CD.\n\n##### Make a .env (pronounced \"dotenv\") file\n\nCreate a [.env](.env) file that looks something like this:\n\n```\nAWS_PROFILE=XXX\nAWS_ACCESS_KEY_ID=XXXX\nAWS_SECRET_ACCESS_KEY=XXX\nOTHER_ENV_VAR=...\n```\n\nThe `.env` file should be in your root project directory, the same directory as\nthis README.\n\n***DO NOT*** commit this file to the repo (it's already in your\n[.gitignore](.gitignore))\n\nBoth docker and pipenv will automatically inject these variables into your\nenvironment!  Whenever you need new env variables, add them to a dotenv. You\n***DO NOT*** need to install any additional modules (notably `python-dotenv`) in\norder for this to work.\n\nSee env refs for\n[docker](https://docs.docker.com/compose/environment-variables/) and\n[pipenv](https://pipenv.readthedocs.io/en/latest/advanced/#automatic-loading-of-env)\nfor more details.\n\n###### Caveats\n\nBeware some small 'gotchas' with dotenv files:\n\n* Pycharm does not load them directly, even if using a pipenv interpreter.  You\ncan install plugins to accomplish this, or manually add the env variables to\nPycharm's run configuration.  Try not to add them to the pytest run config!\n\n* If using `pipenv shell` or a docker shell, changes to the dotenv will not be\nloaded until you exit and restart the shell\n\n##### Global config\n\nAccording to the\n[documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\nthe easiest way is:\n\n```bash\naws configure\nAWS Access Key ID [None]: ACCESS_KEY\nAWS Secret Access Key [None]: SECRET_KEY\nDefault region name [None]:\nDefault output format [None]:\n```\n\nHowever, this is not generally recommended, if you want to use a special AWS key\njust for this class.  It is more secure to create a dedicated IAM user/key with\nno permissions except those needed for this course.\n\nThere are other, more complicated, configurations outlined in the documentation.\nFeel free to use a solution using environment variables, a credentials file, a\nprofile, etc.\n\n#### Copy the data locally\n\nRead the [Makefile](Makefile) and [.travis.yml](./.travis.yml) to see how to\ncopy the data locally.\n\nNote that we are using a [Requestor\nPays](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)\nbucket.  You are responsible for usage charges.\n\nYou should now have a new folder called `data` in your root directory with the\ndata we'll use for this problem set. You can find more details breaking down\nthis command at the [S3 Documentation\nSite](https://docs.aws.amazon.com/cli/latest/reference/s3/cp.html).\n\n#### Set the Travis environment variables\n\nThis is Advanced Python for Data Science, so of course we also want to automate\nour tests and pset using CI/CD.  Unfortunately, we can't upload our .env or run\n`aws configure` and interactively enter the credentials for the Travis builds,\nso we have to configure Travis to use the access credentials without\ncompromising the credentials in our git repo.\n\nWe've provided a working `.travis.yml` configuration that only requires the AWS\ncredentials when running on the master branch, but you will still need to the\nfinal step of adding the variables for your specific pset repository.\n\nTo add environment variables to your Travis environment, you can use of the\nfollowing options:\n\n* Navigating to the settings, eg https://travis-ci.com/csci-e-29/YOUR_PSET_REPO/settings\n* The [Travis CLI](https://github.com/travis-ci/travis.rb)\n* encrypting into the `.travis.yml` as instructed [here](https://docs.travis-ci.com/user/environment-variables/#defining-encrypted-variables-in-travisyml).\n\nPreferably, you should only make your 'prod' credentials available on your\nmaster branch: [Travis\nSettings](https://docs.travis-ci.com/user/environment-variables/#defining-variables-in-repository-settings)\n\nYou can chose the method you think is most appropriate.  Our only requirement is\nthat ***THE KEYS SHOULD NOT BE COMMITTED TO YOUR REPO IN PLAIN TEXT ANYWHERE***.\n\nFor more information, check out the [Travis Documentation on Environment\nVariables](https://docs.travis-ci.com/user/environment-variables/)\n\n__*IMPORTANT*__: If you find yourself getting stuck or running into issues,\nplease post on Piazza and ask for help.  We've provided most of the instructions\nnecessary for this step and do not want you spinning your wheels too long just\ntrying to download the data.\n\n## Problems\n\n### Canvas helpers\n\nNote the module [pset_1/canvas.py](src/pset1/canvas.py).  As you complete this\nproblem set, think about anything you do which is a generalized utility for\nCanvas (eg, you might want to reuse in your next psets).  Write those functions\nin this module for now.\n\nYou should stick with using\n[canvasapi](https://canvasapi.readthedocs.io/en/stable/) (unless you find\nsomething better!).  Use the python code to help you understand the API!\n\nExample functions you may want to write here:\n\n* Get an active canvas course by name (`-> canvasapi.course.Course`).  Note the\nmany helper functions on the `Course` class.\n\n* Get an assignment or quiz by name (`canvasapi.assignment.Assignment` and\n`canvasapi.quiz.Quiz`).  Note that every quiz is also an assignment, with\n`is_quiz=True` and `quiz_id` properties.\n\n* Take a quiz or submit an assignment (at least the generalizable parts).\n\n### Hashed strings\n\nIt can be extremely useful to\n[hash](https://en.wikipedia.org/wiki/Cryptographic_hash_function) a string or\nother data for various reasons - to distribute/partition it, to anonymize it, or\notherwise conceal the content.\n\n#### Implement a standardized string hash\n\nUse `sha256` as the backbone algorithm from\n[hashlib](https://docs.python.org/3/library/hashlib.html). Hashlib is part of\nthe Python standard library, so you do not have to install it in order to import\nit into your modules.\n\nA `salt` is a prefix that may be added to increase the randomness or otherwise\nchange the outcome.  It may be a `str` or `bytes` string, or empty.\n\nImplement it in [hash_str.py](src/pset1/hash_str.py), where the return value is the\n`.digest()` of the hash, as a `bytes` array:\n\n```python\ndef hash_str(some_val: Union[str, bytes], salt: Union[str, bytes] = \"\") -> bytes:\n    \"\"\"Converts strings to hash digest\n\n    See: https://en.wikipedia.org/wiki/Salt_(cryptography)\n\n    :param some_val: thing to hash, can be str or bytes\n    :param salt: Add randomness to the hashing, can be str or bytes\n    :return: sha256 hash digest of some_val with salt, type bytes\n    \"\"\"\n```\n\nNote you will need to\n[encode](https://docs.python.org/3/library/stdtypes.html#str.encode) string\nvalues into bytes (use `.encode()`!).\n\nAs an example, `hash_str('world!', salt='hello, ').hex()[:6] == '68e656'`\n\nNote that if we ever ask you for a bytes value in Canvas, the expectation is the\nhexadecimal representation as illustrated above.\n\n#### Salt and Pepper\n\nNote, however, that hashing isn't very secure without a secure salt.  We can\ntake raw `bytes` to get something with more entropy than standard text provides.\n\nLet's designate an environment variable, `CSCI_SALT`, which will contain\n[hex-encoded](https://en.wikipedia.org/wiki/Hexadecimal) bytes (be careful here\n- `'68e656'.encode()` is not treating the input as hexadecimal!).\n\nImplement the function `pset_1.hash_str.get_csci_salt`\nwhich pulls and decodes an environment variable.  In Canvas, you will be given a\nrandom salt taken from [random.org](http://random.org) for real security.\n\nAdditionally, we will add a per-course\n[pepper](https://en.wikipedia.org/wiki/Pepper_(cryptography)), which we will\ndefine as the UUID of the current canvas course.  You will fetch this from the\nCanvas API.  Implement the function `get_csci_pepper`.  This will be added to\nthe salt to form the final 'salt' used for secure hashing.\n\n(Note, the author is not a master cryptographer!  We may be abusing the terms\n'salt' and 'pepper')\n\n### Atomic writes\n\nUse the module `pset_1.io`.  We will implement an atomic writer.\n\nAtomic writes are used to ensure we never have an incomplete file output.\nBasically, they perform the operations:\n\n1. Create a temporary file which is unique (possibly involving a random file\n   name)\n2. Allow the code to take its sweet time writing to the file\n3. Rename the file to the target destination name.\n\nIf the target and temporary file are on the same filesystem, the rename\noperation is ***atomic*** - that is, it can only completely succeed or fail\nentirely, and you can never be left with a bad file state.\n\nSee notes in\n[Luigi](https://luigi.readthedocs.io/en/stable/luigi_patterns.html#atomic-writes-problem)\nand the [Thanksgiving\nBug](https://www.arashrouhani.com/luigi-budapest-bi-oct-2015/#/21)\n\n#### Implement an atomic write\n\nStart with the following in [io.py](src/pset1/io.py):\n\n```python\n@contextmanager\ndef atomic_write(file: Union[str, os.PathLike], mode: str=\"w\", as_file: bool=True, **kwargs) -> ContextManager:\n    \"\"\"Write a file atomically\n\n    :param file: str or :class:`os.PathLike` target to write\n\n    :param bool as_file:  if True, the yielded object is a :class:File.\n        (eg, what you get with `open(...)`).  Otherwise, it will be the\n        temporary file path string\n\n    :param kwargs: anything else needed to open the file\n\n    :raises: FileExistsError if target exists\n\n    Example::\n\n        with atomic_write(\"hello.txt\") as f:\n            f.write(\"world!\")\n\n    \"\"\"\n    ...\n```\n\n Key considerations:\n\n * You can use [tempfile](https://docs.python.org/3.6/library/tempfile.html),\n   write to the same directory as the target, or both.\n   What are the tradeoffs? Add code comments for anything critical\n * Ensure the file does not already exist before you begin writing\n * Ensure the file is deleted if the writing code fails\n * Ensure the temporary file has the same extension(s) as the target.  This is\n   important for any code that may infer something from the path (for example,\n   extensions can have multiple periods such as `.tar.gz`).\n * If the writing code fails and you try again, the temp file should be new -\n   you don't want the context to reopen the same temp file.\n * Others?\n\n Ensure these considerations are reflected in your unit tests!\n\n***Every file written in this class must be written atomically, via this\nfunction or otherwise.***\n\n### Parquet\n\nExcel is a very poor file format compared to modern column stores.\nIn [__main__.py](src/pset1/__main__.py) use\n[Parquet via Pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#parquet)\nto transform the provided excel file into a better format.\n\nThe user id is already hashed for you in this file.  However, you should set the\nindex to the user ID and sort by that value before writing.\n\nThe new file should keep the same name, but with the extension changed to\n`.parquet`. The new file should otherwise keep the same path as the original\nfile.\n\nEnsure you use your atomic write (consider using `as_file=False` with\n`.to_parquet`).  If the file exists already, you do not need to write it out\nagain.\n\nIn [__main__.py](src/pset1/__main__.py) read back ***just the hashed id column***\nand print it. ***DO NOT*** read the entire data set!\n\n### Your main script and submission context manager\n\nImplement top level execution in [pset_1/\\__main__.py](src/pset1/__main__.py) to\nshow your work, answer the submission quiz, and submit the assignment to Canvas\nvia CI/CD.  It can be invoked with `python -m pset_1`.\n\nTake a look at the `submit.py` from Pset 0.  You must submit the same metadata\nalong with your submission.  Copy over any relevant code into one or more\nmodules in this pset.  Think about how you can improve or generalize the code.\n\nIn addition to any other improvements you make, you should rewrite the\nsubmission (`try...finally`) using a context manager.  Think about what args you\nshould pass to enter the context, and what context object you might want to\nyield:\n\n```python\nwith pset_submission(...) as ...:\n    ...\n```\n\nEnsure the assignment is NOT submitted if the quiz submission fails!\n\nWe will use this construct for all future psets, so try to maximize the amount\nof generic pset work that gets done in the context manager!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nikhar1210",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pset1nik",
    "package_url": "https://pypi.org/project/pset1nik/",
    "platform": "",
    "project_url": "https://pypi.org/project/pset1nik/",
    "project_urls": {
      "Homepage": "https://github.com/nikhar1210"
    },
    "release_url": "https://pypi.org/project/pset1nik/0.1.4/",
    "requires_dist": [
      "xlrd (==1.2.0)",
      "canvasapi (>=2.1.0)",
      "environs (>=9.3.1)",
      "awscli (>=1.19.12)"
    ],
    "requires_python": "",
    "summary": "pset1 test",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9492297,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faaa0831407c0da4c9b4f2b87f58730b6c6e6bd7deed95b811e76c4557ce992f",
          "md5": "3ec5649f02895371de84b0bf37e35a7a",
          "sha256": "167db485c1a35fa765ad1c997e075251979fde700d21a035a153d31d373ef060"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ec5649f02895371de84b0bf37e35a7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11986,
        "upload_time": "2021-02-22T06:15:01",
        "upload_time_iso_8601": "2021-02-22T06:15:01.864217Z",
        "url": "https://files.pythonhosted.org/packages/fa/aa/0831407c0da4c9b4f2b87f58730b6c6e6bd7deed95b811e76c4557ce992f/pset1nik-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3df6a10355f46b6fe99f9f5ad8e4251fed29aeb7e691954cac9a0afa6cad9007",
          "md5": "e00c75eb34402d7336def96538bbda52",
          "sha256": "37944a3648f41c4a331717cda35caee2957563879f5603a3182972c1564f6c64"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e00c75eb34402d7336def96538bbda52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32413,
        "upload_time": "2021-02-22T06:15:03",
        "upload_time_iso_8601": "2021-02-22T06:15:03.513269Z",
        "url": "https://files.pythonhosted.org/packages/3d/f6/a10355f46b6fe99f9f5ad8e4251fed29aeb7e691954cac9a0afa6cad9007/pset1nik-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b856f4aac0355e8fbd4b62a0bb678fa8e6b5a2ca7ac0e8de57549a4817cd0cde",
          "md5": "b014137e405bd0547c2a41c7dd78d636",
          "sha256": "b85c71c28228f21be64955fc6c3d13665df9f20312a28d8e9f729644ae3c75af"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b014137e405bd0547c2a41c7dd78d636",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16599,
        "upload_time": "2021-02-22T20:10:34",
        "upload_time_iso_8601": "2021-02-22T20:10:34.258723Z",
        "url": "https://files.pythonhosted.org/packages/b8/56/f4aac0355e8fbd4b62a0bb678fa8e6b5a2ca7ac0e8de57549a4817cd0cde/pset1nik-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26a4361eeb9d7e53de3a725d733393e42aacacf674170c603ae659dcfbe4dc0f",
          "md5": "4b86caeac939c41f2b90d7814a154032",
          "sha256": "cd67c241e58258e3ca296eefdcb2ba1510714c9c87328062d109cb51e94f996f"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b86caeac939c41f2b90d7814a154032",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42722,
        "upload_time": "2021-02-22T20:10:36",
        "upload_time_iso_8601": "2021-02-22T20:10:36.338335Z",
        "url": "https://files.pythonhosted.org/packages/26/a4/361eeb9d7e53de3a725d733393e42aacacf674170c603ae659dcfbe4dc0f/pset1nik-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca8d99dc863a365307b3b35c8505a1f72e0850f424dbca9266e9ab2eb778f4bf",
          "md5": "1127e274dea1ce29b6302e86d64d20c8",
          "sha256": "f7b07ad265f4dcbe783296ab03ca82f58dd4192af35e85b254c4b3a8bed2ab94"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1127e274dea1ce29b6302e86d64d20c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16601,
        "upload_time": "2021-02-22T20:52:24",
        "upload_time_iso_8601": "2021-02-22T20:52:24.018787Z",
        "url": "https://files.pythonhosted.org/packages/ca/8d/99dc863a365307b3b35c8505a1f72e0850f424dbca9266e9ab2eb778f4bf/pset1nik-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5fc52fa2790385e0d1b3c09cc6374e38df9b919df0c392c6a294aff3ca415b4",
          "md5": "e1500fec477dbd3567d154cd56df52d0",
          "sha256": "c585086b8db63beac9f714b8f05d9d3f0d55e837a08efd32f1e384d79cce3fd6"
        },
        "downloads": -1,
        "filename": "pset1nik-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e1500fec477dbd3567d154cd56df52d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42728,
        "upload_time": "2021-02-22T20:52:25",
        "upload_time_iso_8601": "2021-02-22T20:52:25.670782Z",
        "url": "https://files.pythonhosted.org/packages/e5/fc/52fa2790385e0d1b3c09cc6374e38df9b919df0c392c6a294aff3ca415b4/pset1nik-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca8d99dc863a365307b3b35c8505a1f72e0850f424dbca9266e9ab2eb778f4bf",
        "md5": "1127e274dea1ce29b6302e86d64d20c8",
        "sha256": "f7b07ad265f4dcbe783296ab03ca82f58dd4192af35e85b254c4b3a8bed2ab94"
      },
      "downloads": -1,
      "filename": "pset1nik-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1127e274dea1ce29b6302e86d64d20c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16601,
      "upload_time": "2021-02-22T20:52:24",
      "upload_time_iso_8601": "2021-02-22T20:52:24.018787Z",
      "url": "https://files.pythonhosted.org/packages/ca/8d/99dc863a365307b3b35c8505a1f72e0850f424dbca9266e9ab2eb778f4bf/pset1nik-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5fc52fa2790385e0d1b3c09cc6374e38df9b919df0c392c6a294aff3ca415b4",
        "md5": "e1500fec477dbd3567d154cd56df52d0",
        "sha256": "c585086b8db63beac9f714b8f05d9d3f0d55e837a08efd32f1e384d79cce3fd6"
      },
      "downloads": -1,
      "filename": "pset1nik-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e1500fec477dbd3567d154cd56df52d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42728,
      "upload_time": "2021-02-22T20:52:25",
      "upload_time_iso_8601": "2021-02-22T20:52:25.670782Z",
      "url": "https://files.pythonhosted.org/packages/e5/fc/52fa2790385e0d1b3c09cc6374e38df9b919df0c392c6a294aff3ca415b4/pset1nik-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}