{
  "info": {
    "author": "Scott Persinger",
    "author_email": "scottpersinger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pgwarehouse - quickly sync Postgres data to your cloud warehouse\n\n## Introduction\n\nPostgres is an amazing, general purpose OLTP database. But it's not designed for heavy analytic (OLAP) usage. Analytic queries are much better served by a columnar store database like Snowflake or Clickhouse.\n\nThis package allows you to easily sync data from a Postgres database into a local or cloud data warehouse (currently [Snowflake](https://docs.snowflake.com/), [ClickHouse](https://clickhouse-docs.vercel.app/docs/en/intro), or [DuckDB](https://duckdb.org/docs/)). You can perform a one-time sync operation, or run periodic incremental syncs to keep your warehouse up to date.\n\n## Features\n\n* High performance by using `COPY` to move lots of data efficiently. `pgwarehouse` can easily sync hundreds of millions of rows of data (tens of GB) per hour.\n* Supports multiple update strategies for immutable or mutable tables.\n* Easy to configure and run.\n\n## Installation\n\n    pip install pgwarehouse\n\nNow you need to configure credentials for your **Postgres** source and the warehouse destination.\n\nYou can place Postgres credentials either in your config file or in your environment. If using the environment you need to set these variables:\n\n    PGHOST\n    PGDATABASE\n    PGUSER\n    PGPASSWORD\n    PGSCHEMA (defaults to 'public')\n\n## Creating a config file\n\nRun this command to create a template config file:\n\n    pgwarehouse init\n\nThis will create a local `pgwarehouse_conf.yaml` file. Now you can edit your Postgres credentials in the `postgres` stanza of the config file:\n\n    postgres:\n        pghost: (defaults to $PGHOST)\n        pgdatabase: (defaults to $PGDATABASE\n        pguser: (defaults to $PGUSER)\n        pgpassword: (defaults to $PGPASSWORD)\n        pgschema: (defaults to 'public')\n\n## Specifying the warehouse credentials\n\nAgain you can use the environment or the config file. Set these sets of vars in your env:\n\n    CLICKHOUSE_HOST\n    CLICKHOUSE_DATABASE\n    CLICKHOUSE_USER\n    CLICKHOUSE_PWD\n\nor\n\n    SNOWSQL_ACCOUNT\n    SNOWSQL_DATABASE\n    SNOWSQL_SCHEMA\n    SNOWSQL_WAREHOUSE\n    SNOWSQL_USER\n    SNOWSQL_PWD\n\nor\n\n    DUCKDB_PATH (path to the duckdb database file)\n\n(The Snowflake parameters are the same as those for the [SnowSQL](https://docs.snowflake.com/en/user-guide/snowsql-start)\nCLI tool. The `SNOWSQL_ACCOUNT` value should be your \"account identifier\".)\n\nor set these values in the `warehouse` stanza in the config file:\n\n    warehouse:\n        backend: (clickhouse|snowflake)\n        clickhouse_host: \n        clickhouse_database: \n        clickhouse_user:\n        clickhouse_password:\n        --or--\n        snowsql_account:\n        snowsql_database:\n        snowsql_schema:\n        snowsql_warehouse:\n        snowsql_user:\n        snowsql_pwd:\n        --or--\n        duckdb_path:\n\n# Usage\n\nOnce the credentials are configured you can start syncing data. Start by listing tables from the Postgres database:\n\n    pgwarehouse list\n\nAnd you can see which tables exist so far in the warehouse:\n\n    pgwarehouse listwh\n    \nNow use `sync` to sync a table (eg. the 'users' table):\n\n    pgwarehouse sync users\n\nData will be downloaded from the Postgres database into CSV files on the local machine, and then those files will be uploaded to the warehouse. Running `pgwarehouse listwh` will show the new table.\n\n## Updating a table\n\nAfter the initial sync has run, you can update the warehouse table with new records by running `sync` again:\n\n    pgwarehouse sync users\n\nSee [update strategies](#table-update-strategies) for different ways to update your table on each sync.\n\n## Syncing multiple tables\n\nThere are two ways to manage multiple tables. The first is just to pass `all` in place of the table name:\n\n    pgwarehouse sync all\n\nThis will attempt to sync ALL tables from Postgres into the warehouse. This could take a while!\n\nThe other way is to specify the `tables` list in the config file:\n\n    tables:\n        - users\n        - charges\n        - logs\n\nNow when you specify `sync all` the tool will use the list of tables specified in the config file.\n\n**Pro tip!** You can add the `max_records` settings to your `postgres` configuration to limit the number\nof records copied per table. This can be useful for testing the initial sync in case you have some\nlarge tables. Set this value to something reasonable (like 10000) and then try syncrhonizing all\ntables to make sure they copy properly. Once you have verified the tables in the warehouse then you\ncan remove this setting, drop any large tables, and then copy them in full (just run `sync all` again).\n\n## Table update strategies\n\n#### New Records Only (default)\nThe default update strategy is \"new records only\". This is done by selecting records with a greater value\nfor their primary id column than the greatest value currently in the warehouse. This strategy is simple\nand quick, but only works for monotonically incrementing primary keys, and only finds new records.\n\n#### Reload each time\nAnother supported strategy is \"reload each time\". This is the simplest strategy and we simply reload the\nentire table every time we sync. This strategy should be fine for small-ish tables (like <10m rows).\n\n#### Last Modified\nFinally, if your table has a `last modified` column then you can use the \"all modifications strategy\".\nIn this case all records with a `last modified` timestamp greater than the maximum value found in the\nwarehouse will be selected and \"upserted\" into the warehouse. Records that are already present\n(via matching the primary key) will be updated, and new records will be inserted.\n\n* The Snowflake backend uses the [MERGE](https://docs.snowflake.com/en/sql-reference/sql/merge) operation. \n* The Clickhouse backend uses `ALTER TABLE .. DELETE` to remove matching records and then `INSERT` to insert the new values.\n\n### What about deletes?\n\nThere is no simple way to capture deletes - you have to reload the entire table. A common pattern is\nto apply new records on a daily basis, and reload the entire table every week to remove deleted records.\n\n### What if my table has no primary key?\n\nAll the update strategies except \"reload each time\" require your table to have a primary key column.\n\n## Specifying update strategy at the command line\n\n    pgwarehouse sync <table>   (defaults to NEW RECORDS)\n    pgwarehouse sync <table> last_modified=<last modified column>   (MODIFIED RECORDS)\n    pgwarehouse reload <table> (reloads the whole table)\n\n## Specifying update strategy in the config file\n\nYou can configure the update strategy selectively for each table in the config file. To do so,\nspecify the table as a nested dictionary with options:\n\n    tables:\n        - accounts\n        - users:\n            reload: true\n        - orders:\n            last_modified: updated_at\n        - shoppers\n            last_modified: update_time\n            reload: sun\n        - original_orders:\n            skip: true\n\nIn this example:\n\n* `accounts` will have new records only applied at each sync\n* `users` will be reloaded completely on each sync\n* `orders` will have modified records (found by the 'updated_at' column) applied on each sync\n* `shoppers` will have modified records applied on each sync, except for any sync\nwhich happens on Sunday, in which case the entire table will be reloaded.\n* `original_orders` will be skipped entirely\n\nThe `reload` argument can take 3 forms:\n\n    reload: true    - reload the table every sync\n    reload: [sun,mon,tue,wed,thur,fri]  - reload if the sync occurs on this day of the week\n    reload: 1-31    - reload if the sync occurs on this numeric day of the month (don't use 31!)\n\n## Scheduling regular data syncs\n\n`pgwarehouse` does not including any scheduling itself, you will need an external trigger like\n`cron`, [Heroku Scheduler](https://devcenter.heroku.com/articles/scheduler), or a K8s\n[CronJob](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/).\n\nWhen running, the tool will need access to local storage - potentially a lot if you are synchronizing\nbig tables. But nothing needs to persist between sync runs (except the config file) - the tool \nonly relies on state it can query from Postgres or the warehouse.\n\n## Troubleshooting\n\nSometimes when you are testing things out it can be helpful to do the sync in two phases:\n1)download the data, 2)upload the data. You can use `extract` and `load` for this:\n\n    pgwarehouse extract <table>     - only downloads data\n    pgwarehouse load <table>        - loads the data into the warehouse\n\nWhen the `extract` process runs, its stores data in `./pgw_data/<table name>_data`. As\nfiles are uploaded they are moved into an `archive` subdirectory. When the **next sync**\nruns then this archive directory will be cleaned up. This allows you to go examine\nthe CSV downloaded data in case the upload fails for some reason. \n\n## Limitations\n\nColumn type mapping today is [very limited](https://github.com/scottpersinger/pgwarehouse/blob/a20dc316bbdbc78317cfdd796216a847919d8755/pgwarehouse/snowflake_backend.py). More esoteric column types like JSON or ARRAY are simply\nmapped as VARCHAR columns. Some of these types are supported in the warehouse and could be\nimplemented more accurately.\n\nComposite primary keys (using multiple columns) have limited support. Today they will only work\nwith the RELOAD strategy.\n\nNon-numeric primary key types (like UUIDs) probably won't work unless they have a good lexigraphic\nsort that supports a `>` where clause.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pgwarehouse",
    "package_url": "https://pypi.org/project/pgwarehouse/",
    "platform": null,
    "project_url": "https://pypi.org/project/pgwarehouse/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pgwarehouse/0.1.3/",
    "requires_dist": [
      "pyyaml (>=6.0,<7.0)",
      "python-dotenv (>=1.0.0,<2.0.0)",
      "clickhouse-driver (>=0.2.5,<0.3.0)",
      "psycopg2 (>=2.9.5,<3.0.0)",
      "snowflake-connector-python (>=3.0.1,<4.0.0)",
      "tabulate (>=0.9.0,<0.10.0)",
      "testing-postgresql (>=1.3.0,<2.0.0)",
      "pytest (>=7.2.2,<8.0.0)",
      "duckdb (>=0.7.1,<0.8.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "Easily sync your Postgres database to your data warehouse.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17371402,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "974d00b15b69c5d88f0650fbd414f302b9574860805206935d041619ecb1200b",
          "md5": "e751c6dc3a7ee2f0e1fecb6963d35a45",
          "sha256": "df9cd59ca3a7b3ea47d468e05c6418beb671b64f30eefc9fec87249060e25441"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e751c6dc3a7ee2f0e1fecb6963d35a45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 58241,
        "upload_time": "2023-03-12T23:30:55",
        "upload_time_iso_8601": "2023-03-12T23:30:55.244167Z",
        "url": "https://files.pythonhosted.org/packages/97/4d/00b15b69c5d88f0650fbd414f302b9574860805206935d041619ecb1200b/pgwarehouse-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04aec9734afaa1f82f7b50140627bcc5cb8f17cd554b247fbd43bf7923be1b99",
          "md5": "1fff66311d30d3560147494cc93dad8e",
          "sha256": "d0f6e3e4957a848f8f2a5005006c0057aef572dc761cac7f03fe4b465f4955f0"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1fff66311d30d3560147494cc93dad8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 59321,
        "upload_time": "2023-03-12T23:30:56",
        "upload_time_iso_8601": "2023-03-12T23:30:56.930140Z",
        "url": "https://files.pythonhosted.org/packages/04/ae/c9734afaa1f82f7b50140627bcc5cb8f17cd554b247fbd43bf7923be1b99/pgwarehouse-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08448411ec37c9615a319c11308be505237e7fe7a222119a036153ca31e27473",
          "md5": "18953d2b47e852a96206217c8268ad26",
          "sha256": "1ab28817fa055df090c74a0fe30b9d26e7fd9bedc0e83da84a562fd9c070f68d"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18953d2b47e852a96206217c8268ad26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 60240,
        "upload_time": "2023-03-14T04:44:48",
        "upload_time_iso_8601": "2023-03-14T04:44:48.770699Z",
        "url": "https://files.pythonhosted.org/packages/08/44/8411ec37c9615a319c11308be505237e7fe7a222119a036153ca31e27473/pgwarehouse-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d56978a26224948e14d7db30832cf3cdeec7c01f89598890e1f4b38b39babaf",
          "md5": "cdce5575e93f28e198c282d3cccd857c",
          "sha256": "c3ebd33dcf70563841c430b6cf6cf51e262ac5ef1a925bcd3cfb127772b94a92"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cdce5575e93f28e198c282d3cccd857c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 61018,
        "upload_time": "2023-03-14T04:44:50",
        "upload_time_iso_8601": "2023-03-14T04:44:50.752021Z",
        "url": "https://files.pythonhosted.org/packages/2d/56/978a26224948e14d7db30832cf3cdeec7c01f89598890e1f4b38b39babaf/pgwarehouse-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07cc79f020921c2ab27384f40ab25770bf065b49737455db131363aa51dc877e",
          "md5": "16d4142448730f1d500ed268d3d9a592",
          "sha256": "a48faedb9cc9294db9e0b544925d2ce0500f1b53ea9908d767b8be8afdb244e7"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16d4142448730f1d500ed268d3d9a592",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 61871,
        "upload_time": "2023-03-21T00:21:58",
        "upload_time_iso_8601": "2023-03-21T00:21:58.835785Z",
        "url": "https://files.pythonhosted.org/packages/07/cc/79f020921c2ab27384f40ab25770bf065b49737455db131363aa51dc877e/pgwarehouse-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbedaca74fb61e56ae8247fa75620643922d9fd662062f8e6f3df6d2419bf97c",
          "md5": "83ae024c2cdcee50caef11c171f3c7bf",
          "sha256": "4decbfdb293e62add9ac3b7d42643529622153aec6a6a35a1a89cadbd53c97b3"
        },
        "downloads": -1,
        "filename": "pgwarehouse-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "83ae024c2cdcee50caef11c171f3c7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 61479,
        "upload_time": "2023-03-21T00:22:00",
        "upload_time_iso_8601": "2023-03-21T00:22:00.350047Z",
        "url": "https://files.pythonhosted.org/packages/cb/ed/aca74fb61e56ae8247fa75620643922d9fd662062f8e6f3df6d2419bf97c/pgwarehouse-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07cc79f020921c2ab27384f40ab25770bf065b49737455db131363aa51dc877e",
        "md5": "16d4142448730f1d500ed268d3d9a592",
        "sha256": "a48faedb9cc9294db9e0b544925d2ce0500f1b53ea9908d767b8be8afdb244e7"
      },
      "downloads": -1,
      "filename": "pgwarehouse-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16d4142448730f1d500ed268d3d9a592",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 61871,
      "upload_time": "2023-03-21T00:21:58",
      "upload_time_iso_8601": "2023-03-21T00:21:58.835785Z",
      "url": "https://files.pythonhosted.org/packages/07/cc/79f020921c2ab27384f40ab25770bf065b49737455db131363aa51dc877e/pgwarehouse-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbedaca74fb61e56ae8247fa75620643922d9fd662062f8e6f3df6d2419bf97c",
        "md5": "83ae024c2cdcee50caef11c171f3c7bf",
        "sha256": "4decbfdb293e62add9ac3b7d42643529622153aec6a6a35a1a89cadbd53c97b3"
      },
      "downloads": -1,
      "filename": "pgwarehouse-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "83ae024c2cdcee50caef11c171f3c7bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 61479,
      "upload_time": "2023-03-21T00:22:00",
      "upload_time_iso_8601": "2023-03-21T00:22:00.350047Z",
      "url": "https://files.pythonhosted.org/packages/cb/ed/aca74fb61e56ae8247fa75620643922d9fd662062f8e6f3df6d2419bf97c/pgwarehouse-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}