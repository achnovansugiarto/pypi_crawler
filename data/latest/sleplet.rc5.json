{
  "info": {
    "author": "",
    "author_email": "\"Patrick J. Roddy\" <patrickjamesroddy@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Scientific/Engineering :: Visualization",
      "Typing :: Typed"
    ],
    "description": "# SLEPLET\n\n[![PyPI](https://badge.fury.io/py/sleplet.svg)](https://pypi.org/project/sleplet)\n[![Python](https://img.shields.io/pypi/pyversions/sleplet)](https://www.python.org)\n[![Documentation](https://github.com/astro-informatics/sleplet/actions/workflows/documentation.yml/badge.svg)](https://astro-informatics.github.io/sleplet)\n[![Zenodo](https://zenodo.org/badge/DOI/10.5281/zenodo.7268074.svg)](https://doi.org/10.5281/zenodo.7268074)\n[![Test](https://github.com/astro-informatics/sleplet/actions/workflows/test.yml/badge.svg)](https://github.com/astro-informatics/sleplet/actions/workflows/test.yml)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\n`SLEPLET` is a Python package for the construction of Slepian wavelets in the\nspherical and manifold (via meshes) settings. The API of `SLEPLET` has been\ndesigned in an object-orientated manner and is easily extendible. Upon\ninstallation, `SLEPLET` comes with two command line interfaces - `sphere` and\n`mesh` - which allows one to easily generate plots on the sphere and a set of\nmeshes using `plotly`.\n\n## Installation\n\nThe recommended way to install `SLEPLET` is via\n[pip](https://pypi.org/project/pip/)\n\n```sh\npip install sleplet\n```\n\nTo install the latest development version of `SLEPLET` clone this repository\nand run\n\n```sh\npip install -e .\n```\n\nThis will install two scripts `sphere` and `mesh` which can be used to generate\nthe figures in [the figure section](#paper-figures).\n\n## Bandlimit\n\nThe bandlimit is set as `L` throughout the code and the CLIs. The default value\nis set to `L=16` and the figures created in [the figure section](#paper-figures)\nall use `L=128`. The pre-computed data exists on\n[Zenodo](https://doi.org/10.5281/zenodo.7767698) for powers of two up to `L=128`.\nOther values will be computed when running the appropriate code (and saved for\nfuture use). Note that beyond `L=32` the code can be slow due to the\ndifficulties of computing the Slepian matrix prior to the eigendecomposition, as\nsuch it is recommended to stick to the powers of two up to `L=128`.\n\n## Environment Variables\n\n- `NCPU`: sets the number of cores to use\n\nWhen it comes to selecting a Slepian region the order precedence is\n[polar cap region](https://doi.org/10.1111/j.1365-246X.2006.03065.x) >\n[limited latitude longitude region](https://doi.org/10.1109/TSP.2016.2646668) >\narbitrary region, [as seen in the code](https://github.com/astro-informatics/sleplet/blob/main/src/sleplet/utils/region.py). The\ndefault region is the `south_america` arbitrary region.\n\n- `POLAR_GAP`\n  - for a Slepian `polar cap region`, when set in conjunction with `THETA_MAX` but without the other `PHI`/`THETA` variables\n- `THETA_MAX`\n  - for a Slepian `polar cap region`, when set without the other `PHI`/`THETA` variables\n  - for a Slepian `limited latitude longitude region`\n- `THETA_MIN`\n  - for a Slepian `limited latitude longitude region`\n- `PHI_MAX`\n  - for a Slepian `limited latitude longitude region`\n- `PHI_MIN`\n  - for a Slepian `limited latitude longitude region`\n- `SLEPIAN_MASK`\n  - for an arbitrary Slepian region, currently `africa`/`south_america` supported\n\n## Paper Figures\n\nTo recreate the figures from the below papers, one may use the CLI or the API.\nFor those which don't use the `mesh` or `sphere` CLIs, the relevant API code\nisn't provided as it is contained within the [examples folder](https://github.com/astro-informatics/sleplet/tree/main/examples).\n\n### Sifting Convolution on the Sphere\n\n[![Sifting Convolution on the Sphere](https://img.shields.io/badge/DOI-10.1109/LSP.2021.3050961-pink.svg)](https://dx.doi.org/10.1109/LSP.2021.3050961)\n\n#### Fig. 1\n\n```sh\nfor ell in $(seq 2 -1 1); do\n    sphere harmonic_gaussian -a 0.75 -b 0.125 -e ${ell} 1 -L 128 -m translate -o\ndone\n```\n\n```python\nimport numpy as np\nimport pyssht as ssht\n\nfrom sleplet.functions.flm.harmonic_gaussian import HarmonicGaussian\nfrom sleplet.plotting.create_plot_sphere import Plot\n\nfor ell in range(2, 0, -1):\n    f = HarmonicGaussian(L=128, l_sigma=10**ell, m_sigma=10)\n    flm = f.translate(alpha=0.75 * np.pi, beta=0.125 * np.pi)\n    f_sphere = ssht.inverse(flm, f.L, Method=\"MWSS\")\n    Plot(f_sphere, f.L, f\"fig_1_ell_{ell}\", annotations=[]).execute()\n```\n\n#### Fig. 2\n\n```sh\nsphere earth -L 128\n```\n\n```python\nimport pyssht as ssht\n\nfrom sleplet.functions.flm.earth import Earth\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.harmonic_methods import rotate_earth_to_south_america\n\nf = Earth(L=128)\nflm = rotate_earth_to_south_america(f.coefficients, f.L)\nf_sphere = ssht.inverse(flm, f.L, Method=\"MWSS\")\nPlot(f_sphere, f.L, \"fig_2\").execute()\n```\n\n#### Fig. 3\n\n```sh\nfor ell in $(seq 2 -1 1); do\n    sphere harmonic_gaussian -c earth -e ${ell} 1 -L 128\ndone\n```\n\n```python\nimport pyssht as ssht\n\nfrom sleplet.functions.flm.earth import Earth\nfrom sleplet.functions.flm.harmonic_gaussian import HarmonicGaussian\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.harmonic_methods import rotate_earth_to_south_america\n\nfor ell in range(2, 0, -1):\n    f = HarmonicGaussian(L=128, l_sigma=10**ell, m_sigma=10)\n    g = Earth(L=128)\n    flm = f.convolve(f.coefficients, g.coefficients.conj())\n    flm_rot = rotate_earth_to_south_america(flm, f.L)\n    f_sphere = ssht.inverse(flm_rot, f.L, Method=\"MWSS\")\n    Plot(f_sphere, f.L, f\"fig_3_ell_{ell}\").execute()\n```\n\n### Slepian Scale-Discretised Wavelets on the Sphere\n\n[![Slepian Scale-Discretised Wavelets on the Sphere](https://img.shields.io/badge/DOI-10.1109/TSP.2022.3233309-pink.svg)](https://dx.doi.org/10.1109/TSP.2022.3233309)\n\n#### Fig. 2\n\n```sh\npython -m examples.arbitrary.south_america.tiling_south_america\n```\n\n#### Fig. 3\n\n```sh\nexport SLEPIAN_MASK = \"south_america\"\n# a\nsphere earth -L 128 -s 2 -u\n# b\nsphere slepian_south_america -L 128 -s 2 -u\n```\n\n```python\nimport pyssht as ssht\n\nfrom sleplet.functions.flm.earth import Earth\nfrom sleplet.functions.fp.slepian_south_america import SlepianSouthAmerica\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.harmonic_methods import rotate_earth_to_south_america\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\n# a\nf = Earth(L=128, smoothing=2)\nflm = rotate_earth_to_south_america(f.coefficients, f.L)\nf_sphere = ssht.inverse(flm, f.L, Method=\"MWSS\")\nPlot(f_sphere, f.L, \"fig_3_a\", normalise=False).execute()\n# b\nregion = Region(mask_name=\"south_america\")\ng = SlepianSouthAmerica(L=128, region=region, smoothing=2)\ng_sphere = slepian_inverse(g.coefficients, g.L, g.slepian)\nPlot(g_sphere, g.L, \"fig_3_b\", normalise=False, region=g.region).execute()\n```\n\n#### Fig. 4\n\n```sh\nexport SLEPIAN_MASK = \"south_america\"\nfor p in 0 9 24 49 99 199; do\n    sphere slepian -e ${p} -L 128 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian import Slepian\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"south_america\")\nfor p in [0, 9, 24, 49, 99, 199]:\n    f = Slepian(L=128, region=region, rank=p)\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_4_p_{p}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 5\n\n```sh\npython -m examples.arbitrary.south_america.eigenvalues_south_america\n```\n\n#### Fig. 6\n\n```sh\nexport SLEPIAN_MASK = \"south_america\"\n# a\nsphere slepian_wavelets -L 128 -u\n# b-f\nfor j in $(seq 0 4); do\n    sphere slepian_wavelets -e 3 2 ${j} -L 128 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_wavelets import SlepianWavelets\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"south_america\")\nfor j in [None, *list(range(5))]:\n    f = SlepianWavelets(L=128, region=region, B=3, j_min=2, j=j)\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_6_j_{j}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 7\n\n```sh\nexport SLEPIAN_MASK = \"south_america\"\n# a\nsphere slepian_wavelet_coefficients_south_america -L 128 -s 2 -u\n# b-f\nfor j in $(seq 0 4); do\n    sphere slepian_wavelet_coefficients_south_america -e 3 2 ${j} -L 128 -s 2 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_wavelet_coefficients_south_america import (\n    SlepianWaveletCoefficientsSouthAmerica,\n)\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"south_america\")\nfor j in [None, *list(range(5))]:\n    f = SlepianWaveletCoefficientsSouthAmerica(\n        L=128, region=region, B=3, j_min=2, j=j, smoothing=2\n    )\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_7_j_{j}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 8\n\n```sh\nexport SLEPIAN_MASK = \"south_america\"\n# a\nsphere slepian_south_america -L 128 -n -10 -s 2 -u\n# b-d\nfor s in 2 3 5; do\n    python -m examples.arbitrary.south_america.denoising_slepian_south_america -n -10 -s ${s}\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_south_america import SlepianSouthAmerica\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.scripts.plotting_on_sphere import compute_amplitude_for_noisy_plots\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\n# a\nregion = Region(mask_name=\"south_america\")\nf = SlepianSouthAmerica(L=128, region=region, noise=-10, smoothing=2)\nf_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\namplitude = compute_amplitude_for_noisy_plots(f)\nPlot(\n    f_sphere, f.L, \"fig_8_a\", amplitude=amplitude, normalise=False, region=f.region\n).execute()\n```\n\n#### Fig. 9\n\n```sh\nexport SLEPIAN_MASK = \"africa\"\n# a\nsphere earth -L 128 -s 2 -u -v africa\n# b\nsphere slepian_africa -L 128 -s 2 -u\n```\n\n```python\nimport pyssht as ssht\n\nfrom sleplet.functions.flm.earth import Earth\nfrom sleplet.functions.fp.slepian_africa import SlepianAfrica\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.harmonic_methods import rotate_earth_to_africa\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\n# a\nf = Earth(L=128, smoothing=2)\nflm = rotate_earth_to_africa(f.coefficients, f.L)\nf_sphere = ssht.inverse(flm, f.L, Method=\"MWSS\")\nPlot(f_sphere, f.L, \"fig_9_a\", normalise=False).execute()\n# b\nregion = Region(mask_name=\"africa\")\ng = SlepianAfrica(L=128, region=region, smoothing=2)\ng_sphere = slepian_inverse(g.coefficients, g.L, g.slepian)\nPlot(g_sphere, g.L, \"fig_9_b\", normalise=False, region=g.region).execute()\n```\n\n#### Fig. 10\n\n```sh\npython -m examples.arbitrary.africa.eigenvalues_africa\n```\n\n#### Fig. 11\n\n```sh\nexport SLEPIAN_MASK = \"africa\"\nfor p in 0 9 24 49 99 199; do\n    sphere slepian -e ${p} -L 128 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian import Slepian\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"africa\")\nfor p in [0, 9, 24, 49, 99, 199]:\n    f = Slepian(L=128, region=region, rank=p)\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_11_p{p}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 12\n\n```sh\nexport SLEPIAN_MASK = \"africa\"\n# a\nsphere slepian_wavelets -L 128 -u\n# b\nfor j in $(seq 0 5); do\n    sphere slepian_wavelets -e 3 2 ${j} -L 128 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_wavelets import SlepianWavelets\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"africa\")\nfor j in [None, *list(range(6))]:\n    f = SlepianWavelets(L=128, region=region, B=3, j_min=2, j=j)\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_12_j_{j}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 13\n\n```sh\nexport SLEPIAN_MASK = \"africa\"\n# a\nsphere slepian_wavelet_coefficients_africa -L 128 -s 2 -u\n# b\nfor j in $(seq 0 5); do\n    sphere slepian_wavelet_coefficients_africa -e 3 2 ${j} -L 128 -s 2 -u\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_wavelet_coefficients_africa import (\n    SlepianWaveletCoefficientsAfrica,\n)\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\nregion = Region(mask_name=\"africa\")\nfor j in [None, *list(range(6))]:\n    f = SlepianWaveletCoefficientsAfrica(\n        L=128, region=region, B=3, j_min=2, j=j, smoothing=2\n    )\n    f_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\n    Plot(f_sphere, f.L, f\"fig_13_j_{j}\", normalise=False, region=f.region).execute()\n```\n\n#### Fig. 14\n\n```sh\nexport SLEPIAN_MASK = \"africa\"\n# a\nsphere slepian_africa -L 128 -n -10 -s 2 -u\n# b-d\nfor s in 2 3 5; do\n    python -m examples.arbitrary.africa.denoising_slepian_africa -n -10 -s ${s}\ndone\n```\n\n```python\nfrom sleplet.functions.fp.slepian_africa import SlepianAfrica\nfrom sleplet.plotting.create_plot_sphere import Plot\nfrom sleplet.scripts.plotting_on_sphere import compute_amplitude_for_noisy_plots\nfrom sleplet.utils.region import Region\nfrom sleplet.utils.slepian_methods import slepian_inverse\n\n# a\nregion = Region(mask_name=\"africa\")\nf = SlepianAfrica(L=128, region=region, noise=-10, smoothing=2)\nf_sphere = slepian_inverse(f.coefficients, f.L, f.slepian)\namplitude = compute_amplitude_for_noisy_plots(f)\nPlot(\n    f_sphere, f.L, \"fig_14_a\", amplitude=amplitude, normalise=False, region=f.region\n).execute()\n```\n\n### Slepian Scale-Discretised Wavelets on Manifolds\n\n[![Slepian Scale-Discretised Wavelets on Manifolds](https://img.shields.io/badge/DOI-10.48550/arXiv.2302.06006-pink.svg)](https://doi.org/10.48550/arXiv.2302.06006)\n\n#### Fig. 2\n\n```sh\nfor r in $(seq 2 9); do\n    mesh homer -e ${r} -u\ndone\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.harmonic_coefficients.mesh_basis_functions import MeshBasisFunctions\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.utils.harmonic_methods import mesh_inverse\n\nmesh = Mesh(\"homer\")\nfor r in range(2, 10):\n    f = MeshBasisFunctions(mesh, rank=r)\n    f_mesh = mesh_inverse(f.mesh, f.coefficients)\n    Plot(mesh, f\"fig_2_r_{r}\", f_mesh, normalise=False).execute()\n```\n\n#### Fig. 4\n\n```sh\npython -m examples.mesh.mesh_tiling homer\n```\n\n#### Fig. 5\n\n```sh\npython -m examples.mesh.mesh_region homer\n```\n\n#### Fig. 6\n\n```sh\nfor p in 0 9 24 49 99 199; do\n    mesh homer -m slepian_functions -e ${p} -u -z\ndone\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.slepian_coefficients.mesh_slepian_functions import (\n    MeshSlepianFunctions,\n)\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.utils.slepian_methods import slepian_mesh_inverse\n\nmesh = Mesh(\"homer\", zoom=True)\nfor p in [0, 9, 24, 49, 99, 199]:\n    f = MeshSlepianFunctions(mesh, rank=p)\n    f_mesh = slepian_mesh_inverse(f.mesh_slepian, f.coefficients)\n    Plot(mesh, f\"fig_6_p_{p}\", f_mesh, normalise=False, region=True).execute()\n```\n\n#### Fig. 7\n\n```sh\npython -m examples.mesh.mesh_slepian_eigenvalues homer\n```\n\n#### Fig. 8\n\n```sh\n# a\nmesh homer -m slepian_wavelets -u -z\n# b-f\nfor j in $(seq 0 4); do\n    mesh homer -e 3 2 ${j} -m slepian_wavelets -u -z\ndone\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.slepian_coefficients.mesh_slepian_wavelets import (\n    MeshSlepianWavelets,\n)\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.utils.slepian_methods import slepian_mesh_inverse\n\nmesh = Mesh(\"homer\", zoom=True)\nfor j in [None, *list(range(5))]:\n    f = MeshSlepianWavelets(mesh, B=3, j_min=2, j=j)\n    f_mesh = slepian_mesh_inverse(f.mesh_slepian, f.coefficients)\n    Plot(mesh, f\"fig_8_j_{j}\", f_mesh, normalise=False, region=True).execute()\n```\n\n#### Fig. 9\n\n```sh\nmesh homer -m field -u\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.harmonic_coefficients.mesh_field import MeshField\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.utils.harmonic_methods import mesh_inverse\n\nmesh = Mesh(\"homer\")\nf = MeshField(mesh)\nf_mesh = mesh_inverse(f.mesh, f.coefficients)\nPlot(mesh, \"fig_9\", f_mesh, normalise=False).execute()\n```\n\n#### Fig. 10\n\n```sh\n# a\nmesh homer -m slepian_wavelet_coefficients -u -z\n# b-f\nfor j in $(seq 0 4); do\n    mesh homer -e 3 2 ${j} -m slepian_wavelet_coefficients -u -z\ndone\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.slepian_coefficients.mesh_slepian_wavelet_coefficients import (\n    MeshSlepianWaveletCoefficients,\n)\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.utils.slepian_methods import slepian_mesh_inverse\n\nmesh = Mesh(\"homer\", zoom=True)\nfor j in [None, *list(range(5))]:\n    f = MeshSlepianWaveletCoefficients(mesh, B=3, j_min=2, j=j)\n    f_mesh = slepian_mesh_inverse(f.mesh_slepian, f.coefficients)\n    Plot(mesh, f\"fig_10_j_{j}\", f_mesh, normalise=False, region=True).execute()\n```\n\n#### Fig. 11\n\n```sh\n# a\nmesh homer -m slepian_field -u -z\n# b\nmesh homer -m slepian_field -n -5 -u -z\n# c\npython -m examples.mesh.denoising_slepian_mesh homer -n -5 -s 2\n```\n\n```python\nfrom sleplet.meshes.classes.mesh import Mesh\nfrom sleplet.meshes.slepian_coefficients.mesh_slepian_field import (\n    MeshSlepianField,\n)\nfrom sleplet.plotting.create_plot_mesh import Plot\nfrom sleplet.scripts.plotting_on_mesh import compute_amplitude_for_noisy_plots\nfrom sleplet.utils.slepian_methods import slepian_mesh_inverse\n\nmesh = Mesh(\"homer\", zoom=True)\n# a\nf = MeshSlepianField(mesh)\nf_mesh = slepian_mesh_inverse(f.mesh_slepian, f.coefficients)\nPlot(mesh, \"fig_11_a\", f_mesh, normalise=False, region=True).execute()\n# b\ng = MeshSlepianField(mesh, noise=-5)\ng_mesh = slepian_mesh_inverse(g.mesh_slepian, g.coefficients)\namplitude = compute_amplitude_for_noisy_plots(g)\nPlot(\n    mesh, \"fig_11_b\", g_mesh, amplitude=amplitude, normalise=False, region=True\n).execute()\n```\n\n#### Fig. 12\n\n```sh\nfor f in cheetah dragon bird teapot cube; do\n    python -m examples.mesh.mesh_region ${f}\ndone\n```\n\n#### Tab. 1\n\n```sh\npython -m examples.mesh.produce_table\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "manifolds,python,slepian-functions,sphere,wavelets",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sleplet",
    "package_url": "https://pypi.org/project/sleplet/",
    "platform": null,
    "project_url": "https://pypi.org/project/sleplet/",
    "project_urls": {
      "Bug Tracker": "https://github.com/astro-informatics/sleplet/issues",
      "Documentation": "https://astro-informatics.github.io/sleplet",
      "Download": "https://pypi.org/project/sleplet",
      "Homepage": "https://github.com/astro-informatics/sleplet",
      "Source Code": "https://github.com/astro-informatics/sleplet"
    },
    "release_url": "https://pypi.org/project/sleplet/1.1.4/",
    "requires_dist": [
      "cmocean (>=2.0.0)",
      "gmpy2 (>=2.1.5)",
      "hypothesis (>=6.67.1)",
      "kaleido (>=0.2.1)",
      "libigl (>=2.4.1)",
      "matplotlib (>=3.6.3)",
      "multiprocess (>=0.70.14)",
      "numba (>=0.56.4)",
      "numpy (>=1.23.5)",
      "pandas (>=1.5.3)",
      "plotly (>=5.13.0)",
      "pooch (>=1.7.0)",
      "pydantic (>=1.10.4)",
      "pys2let (>=2.2.4)",
      "pyssht (>=1.5.1)",
      "scipy (>=1.10.0)",
      "seaborn (>=0.12.2)",
      "tomli (>=2.0.1)",
      "tqdm (>=4.65.0)",
      "black ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ruff ; extra == 'dev'",
      "rundoc ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "pdoc3 ; extra == 'docs'"
    ],
    "requires_python": ">=3.10",
    "summary": "Slepian scale-discretised wavelets in Python",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17462694,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb7550723977b0ae6a1ad428e0fe8d23440723f477c850e97da033f8cdcd656",
          "md5": "6026d2836cd263a41e69cbadb44bc80a",
          "sha256": "7bd4274a9d93446c055d7f8bfdddfdc34ec34b1a0daa7637d07025904107431d"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6026d2836cd263a41e69cbadb44bc80a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 379410,
        "upload_time": "2023-03-27T14:25:40",
        "upload_time_iso_8601": "2023-03-27T14:25:40.066487Z",
        "url": "https://files.pythonhosted.org/packages/5b/b7/550723977b0ae6a1ad428e0fe8d23440723f477c850e97da033f8cdcd656/sleplet-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af63fe8c5e8088f144e42aae7f70e76fddd94a0f3a208fa5d71b4856757f7261",
          "md5": "a25ac85115f8bb3b3a98eb550b7d723b",
          "sha256": "94cc48071052799bd2796dcd62afc66741555b44d51f512173cf826658164876"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a25ac85115f8bb3b3a98eb550b7d723b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 361214,
        "upload_time": "2023-03-27T14:25:41",
        "upload_time_iso_8601": "2023-03-27T14:25:41.754668Z",
        "url": "https://files.pythonhosted.org/packages/af/63/fe8c5e8088f144e42aae7f70e76fddd94a0f3a208fa5d71b4856757f7261/sleplet-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c6c0b73862758429036a9943f9413406f043a736cef56d6c00d4755d77eeb54",
          "md5": "053f8a5c984a5efdedcc16d07586d53a",
          "sha256": "a33bd1d53b6163958e5f5fea57b8c49679fe2c196909005bafa091ea4abd894e"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "053f8a5c984a5efdedcc16d07586d53a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 379437,
        "upload_time": "2023-03-27T14:34:19",
        "upload_time_iso_8601": "2023-03-27T14:34:19.432899Z",
        "url": "https://files.pythonhosted.org/packages/7c/6c/0b73862758429036a9943f9413406f043a736cef56d6c00d4755d77eeb54/sleplet-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e633ed1afc0a05611ed2911455817f7db162588d6ca0d2d7498851ccc7ce80fa",
          "md5": "f6d7c1a654158a1d1884c4f0d1ceb9a9",
          "sha256": "54825146158175d1ae995f1907f99afc82077ee17bd91d33b313051678101007"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6d7c1a654158a1d1884c4f0d1ceb9a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 361315,
        "upload_time": "2023-03-27T14:34:21",
        "upload_time_iso_8601": "2023-03-27T14:34:21.877983Z",
        "url": "https://files.pythonhosted.org/packages/e6/33/ed1afc0a05611ed2911455817f7db162588d6ca0d2d7498851ccc7ce80fa/sleplet-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb6906d85f9dd744e8bb5a6bfd6b5c5cb8e415320ba2c7ccc64cce471fba47b6",
          "md5": "d10b8c28e0581447abd9ec0000771be8",
          "sha256": "c59ed90eeed1e05bc33fdc217505f28054049dff63d634d16de82abe7f9184ae"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d10b8c28e0581447abd9ec0000771be8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 379440,
        "upload_time": "2023-03-27T14:38:19",
        "upload_time_iso_8601": "2023-03-27T14:38:19.643786Z",
        "url": "https://files.pythonhosted.org/packages/cb/69/06d85f9dd744e8bb5a6bfd6b5c5cb8e415320ba2c7ccc64cce471fba47b6/sleplet-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab75f3777014998ef6eab86a9a277a30286147d7b94063f70c8a83ee29ca8fc9",
          "md5": "f1a195f2c8a64dcfa377ecd76bc6a199",
          "sha256": "721917e7f9c47699016fd6f0192c576129d00c50540bb28a748749ea3de36ac9"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f1a195f2c8a64dcfa377ecd76bc6a199",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 361282,
        "upload_time": "2023-03-27T14:38:21",
        "upload_time_iso_8601": "2023-03-27T14:38:21.673039Z",
        "url": "https://files.pythonhosted.org/packages/ab/75/f3777014998ef6eab86a9a277a30286147d7b94063f70c8a83ee29ca8fc9/sleplet-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "221024b404794016b1c2e96c1155c7db9ab1f0de285e9232da59676a4053d721",
          "md5": "250d839af697a11dd0546e39a21a63e9",
          "sha256": "72b96d7c01f42060cd5817ba8931094df9eb20c933e96f31155502fe1d6fccf6"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "250d839af697a11dd0546e39a21a63e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 379453,
        "upload_time": "2023-03-27T14:45:59",
        "upload_time_iso_8601": "2023-03-27T14:45:59.505284Z",
        "url": "https://files.pythonhosted.org/packages/22/10/24b404794016b1c2e96c1155c7db9ab1f0de285e9232da59676a4053d721/sleplet-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3867e39516162ddd568714952100c578e90e73db91d599858e88f7814bde138d",
          "md5": "f3bf831ecc965f7a42f1274a79f81029",
          "sha256": "eb21fc4fbe339e90876eab28fab2583d917e799a3b0849eee834c5d615288be4"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f3bf831ecc965f7a42f1274a79f81029",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 361338,
        "upload_time": "2023-03-27T14:46:02",
        "upload_time_iso_8601": "2023-03-27T14:46:02.079700Z",
        "url": "https://files.pythonhosted.org/packages/38/67/e39516162ddd568714952100c578e90e73db91d599858e88f7814bde138d/sleplet-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3e9c8248821d2249a02e9c33e43bd1c45b59b9f70ab221459589ddb393fb117",
          "md5": "c8baccd86685c2dc0217d34f8f95f535",
          "sha256": "d90d45f4b667c35167e68449ba62e91f370e9b69e00c62f4bec2b7e499bbdd29"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8baccd86685c2dc0217d34f8f95f535",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 379423,
        "upload_time": "2023-03-27T15:07:27",
        "upload_time_iso_8601": "2023-03-27T15:07:27.771459Z",
        "url": "https://files.pythonhosted.org/packages/e3/e9/c8248821d2249a02e9c33e43bd1c45b59b9f70ab221459589ddb393fb117/sleplet-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "835ac14597a22903fd82d64d901067df2c48334a5ee6e01f7891288bf97d0c90",
          "md5": "407017bd029195073ccf461c51ffd865",
          "sha256": "452f8e69c6e6a28e8b1c3877284af944b4eab4ad2e1c61545583e82dc4593a8b"
        },
        "downloads": -1,
        "filename": "sleplet-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "407017bd029195073ccf461c51ffd865",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 361266,
        "upload_time": "2023-03-27T15:07:30",
        "upload_time_iso_8601": "2023-03-27T15:07:30.631555Z",
        "url": "https://files.pythonhosted.org/packages/83/5a/c14597a22903fd82d64d901067df2c48334a5ee6e01f7891288bf97d0c90/sleplet-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3e9c8248821d2249a02e9c33e43bd1c45b59b9f70ab221459589ddb393fb117",
        "md5": "c8baccd86685c2dc0217d34f8f95f535",
        "sha256": "d90d45f4b667c35167e68449ba62e91f370e9b69e00c62f4bec2b7e499bbdd29"
      },
      "downloads": -1,
      "filename": "sleplet-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8baccd86685c2dc0217d34f8f95f535",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 379423,
      "upload_time": "2023-03-27T15:07:27",
      "upload_time_iso_8601": "2023-03-27T15:07:27.771459Z",
      "url": "https://files.pythonhosted.org/packages/e3/e9/c8248821d2249a02e9c33e43bd1c45b59b9f70ab221459589ddb393fb117/sleplet-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "835ac14597a22903fd82d64d901067df2c48334a5ee6e01f7891288bf97d0c90",
        "md5": "407017bd029195073ccf461c51ffd865",
        "sha256": "452f8e69c6e6a28e8b1c3877284af944b4eab4ad2e1c61545583e82dc4593a8b"
      },
      "downloads": -1,
      "filename": "sleplet-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "407017bd029195073ccf461c51ffd865",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 361266,
      "upload_time": "2023-03-27T15:07:30",
      "upload_time_iso_8601": "2023-03-27T15:07:30.631555Z",
      "url": "https://files.pythonhosted.org/packages/83/5a/c14597a22903fd82d64d901067df2c48334a5ee6e01f7891288bf97d0c90/sleplet-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}