{
  "info": {
    "author": "Konrad Weihmann",
    "author_email": "Gonzalo Fern√°ndez <gonzalo.fdez06@gmail.com>, Konrad Weihmann <kweihmann@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\n# NOTE: This is an edited version of multimetric, that allows you use this module in a programmatically way, it's not intended to replace the original CLI module, and I won't update more this package. For more info, see the original package\r\n\r\n### Usage\r\n\r\n```\r\nfrom multimetricprog import calculator\r\n\r\ncalculator.calculate('''\r\nprint(\"your python code\")\r\n''')\r\n\r\n```\r\n\r\nreturns\r\n\r\n```\r\n{\r\n  \"files\": {\r\n    \"fp.py\": {\r\n      \"comment_ratio\": 0.0,\r\n      \"cyclomatic_complexity\": 2,\r\n      \"fanout_external\": 0,\r\n      \"fanout_internal\": 0,\r\n      \"halstead_bugprop\": 0.004643856189774725,\r\n      \"halstead_difficulty\": 1.3333333333333333,\r\n      \"halstead_effort\": 18.575424759098897,\r\n      \"halstead_timerequired\": 1.0319680421721609,\r\n      \"halstead_volume\": 13.931568569324174,\r\n      \"lang\": [\r\n        \"Python\"\r\n      ],\r\n      \"loc\": 1,\r\n      \"operands_sum\": 4,\r\n      \"operands_uniq\": 3,\r\n      \"operators_sum\": 2,\r\n      \"operators_uniq\": 2\r\n    }\r\n  },\r\n  \"overall\": {\r\n    \"comment_ratio\": 0.0,\r\n    \"cyclomatic_complexity\": 2,\r\n    \"fanout_external\": 0,\r\n    \"fanout_internal\": 0,\r\n    \"halstead_bugprop\": 0.004643856189774725,\r\n    \"halstead_difficulty\": 1.3333333333333333,\r\n    \"halstead_effort\": 18.575424759098897,\r\n    \"halstead_timerequired\": 1.0319680421721609,\r\n    \"halstead_volume\": 13.931568569324174,\r\n    \"loc\": 1,\r\n    \"maintainability_index\": 100,\r\n    \"operands_sum\": 4,\r\n    \"operands_uniq\": 3,\r\n    \"operators_sum\": 2,\r\n    \"operators_uniq\": 2,\r\n    \"pylint\": 100.0,\r\n    \"tiobe\": 99.32835820895522,\r\n    \"tiobe_compiler\": 100.0,\r\n    \"tiobe_complexity\": 95.5223880597015,\r\n    \"tiobe_coverage\": 100.0,\r\n    \"tiobe_duplication\": 100.0,\r\n    \"tiobe_fanout\": 100.0,\r\n    \"tiobe_functional\": 100.0,\r\n    \"tiobe_security\": 100.0,\r\n    \"tiobe_standard\": 100.0\r\n  },\r\n  \"stats\": {\r\n    \"max\": {\r\n      \"comment_ratio\": 0.0,\r\n      \"cyclomatic_complexity\": 2,\r\n      \"fanout_external\": 0,\r\n      \"fanout_internal\": 0,\r\n      \"halstead_bugprop\": 0.004643856189774725,\r\n      \"halstead_difficulty\": 1.3333333333333333,\r\n      \"halstead_effort\": 18.575424759098897,\r\n      \"halstead_timerequired\": 1.0319680421721609,\r\n      \"halstead_volume\": 13.931568569324174,\r\n      \"loc\": 1,\r\n      \"operands_sum\": 4,\r\n      \"operands_uniq\": 3,\r\n      \"operators_sum\": 2,\r\n      \"operators_uniq\": 2\r\n    },\r\n    \"mean\": {\r\n      \"comment_ratio\": 0.0,\r\n      \"cyclomatic_complexity\": 2,\r\n      \"fanout_external\": 0,\r\n      \"fanout_internal\": 0,\r\n      \"halstead_bugprop\": 0.004643856189774725,\r\n      \"halstead_difficulty\": 1.3333333333333333,\r\n      \"halstead_effort\": 18.575424759098897,\r\n      \"halstead_timerequired\": 1.0319680421721609,\r\n      \"halstead_volume\": 13.931568569324174,\r\n      \"loc\": 1,\r\n      \"operands_sum\": 4,\r\n      \"operands_uniq\": 3,\r\n      \"operators_sum\": 2,\r\n      \"operators_uniq\": 2\r\n    },\r\n    \"median\": {\r\n      \"comment_ratio\": 0.0,\r\n      \"cyclomatic_complexity\": 2,\r\n      \"fanout_external\": 0,\r\n      \"fanout_internal\": 0,\r\n      \"halstead_bugprop\": 0.004643856189774725,\r\n      \"halstead_difficulty\": 1.3333333333333333,\r\n      \"halstead_effort\": 18.575424759098897,\r\n      \"halstead_timerequired\": 1.0319680421721609,\r\n      \"halstead_volume\": 13.931568569324174,\r\n      \"loc\": 1,\r\n      \"operands_sum\": 4,\r\n      \"operands_uniq\": 3,\r\n      \"operators_sum\": 2,\r\n      \"operators_uniq\": 2\r\n    },\r\n    \"min\": {\r\n      \"comment_ratio\": 0.0,\r\n      \"cyclomatic_complexity\": 2,\r\n      \"fanout_external\": 0,\r\n      \"fanout_internal\": 0,\r\n      \"halstead_bugprop\": 0.004643856189774725,\r\n      \"halstead_difficulty\": 1.3333333333333333,\r\n      \"halstead_effort\": 18.575424759098897,\r\n      \"halstead_timerequired\": 1.0319680421721609,\r\n      \"halstead_volume\": 13.931568569324174,\r\n      \"loc\": 1,\r\n      \"operands_sum\": 4,\r\n      \"operands_uniq\": 3,\r\n      \"operators_sum\": 2,\r\n      \"operators_uniq\": 2\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Notes\r\n\r\nBy default, the filename \"fp.py\" is hardcoded in order to make the module work, if you're interested, you can fork this and make a better version for this module (also, a better README.md).\r\n\r\n#### Item structure\r\n\r\n| item                  | description                                    | range    | recommendation |\r\n| --------------------- | ---------------------------------------------- | -------- | -------------- |\r\n| comment_ratio         | Comment to Code percentage                     | 0..100   | > 30.0         |\r\n| cyclomatic_complexity | Cyclomatic complexity according to McCabe      | 0..(inf) | < 10           |\r\n| fanout_external       | Number imports from out of tree modules        | 0..(inf) |                |\r\n| fanout_internal       | Number imports from same source tree modules   | 0..(inf) |                |\r\n| halstead_bugprop      | Number of delivered bugs according to Halstead | 0..(inf) | < 0.05         |\r\n| halstead_difficulty   | Difficulty according to Halstead               | 0..(inf) |                |\r\n| halstead_effort       | Effort according to Halstead                   | 0..(inf) |                |\r\n| halstead_timerequired | Time required to program according to Halstead | 0..(inf) |                |\r\n| halstead_volume       | Volume according to Halstead                   | 0..(inf) |                |\r\n| lang                  | list of identified programming languages       | list     |                |\r\n| loc                   | Lines of code                                  | 1..(inf) |                |\r\n| maintainability_index | Maintainability index                          | 0..100   | > 80.0         |\r\n| operands_sum          | Number of used operands                        | 1..(inf) |                |\r\n| operands_uniq         | Number of unique used operands                 | 1..(inf) |                |\r\n| operators_sum         | Number of used operators                       | 1..(inf) |                |\r\n| operators_uniq        | Number of unique used operators                | 1..(inf) |                |\r\n| pylint                | General quality score according to pylint      | 0..100   | > 80.0         |\r\n| tiobe_compiler        | Compiler warnings score according to TIOBE     | 0..100   | > 90.0         |\r\n| tiobe_complexity      | Complexity according to TIOBE                  | 0..100   | > 80.0         |\r\n| tiobe_coverage        | Coverage according to TIOBE                    | 0..100   | > 80.0         |\r\n| tiobe_duplication     | Code duplications score according to TIOBE     | 0..100   | > 80.0         |\r\n| tiobe_fanout          | Fan-Out score according to TIOBE               | 0..100   | > 80.0         |\r\n| tiobe_functional      | Functional defect score according to TIOBE     | 0..100   | > 90.0         |\r\n| tiobe_security        | Security score according to TIOBE              | 0..100   | > 90.0         |\r\n| tiobe_standard        | Language standard score according to TIOBE     | 0..100   | > 80.0         |\r\n| tiobe                 | General quality score according to TIOBE       | 0..100   | > 80.0         |\r\n\r\n#### Statistics\r\n\r\nThe item `stats` contains in addition to the above mentioned the following items, which by themselves contain all the items mentioned at [Item structure](#item-structure)\r\n\r\n* `max` = the maximum value of all items of the metric\r\n* `mean` = statistical mean over all items of the metric\r\n* `median` = statistical median over all items of the metric\r\n* `min` = the minimum value of all items of the metric\r\n* `sd` = standard deviation over all items of the metric\r\n\r\n## Further reading\r\n\r\n* [Pygments](http://pygments.org/)\r\n\r\n## Bugs & Contribution\r\n\r\nFeel free to create issues or pull requests\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/priv-kweihmann/multimetricprog",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "multimetricprog-VadokDev",
    "package_url": "https://pypi.org/project/multimetricprog-VadokDev/",
    "platform": null,
    "project_url": "https://pypi.org/project/multimetricprog-VadokDev/",
    "project_urls": {
      "Bug Tracker": "https://github.com/priv-kweihmann/multimetricprog/issues",
      "Homepage": "https://github.com/priv-kweihmann/multimetricprog"
    },
    "release_url": "https://pypi.org/project/multimetricprog-VadokDev/0.0.1/",
    "requires_dist": [
      "chardet (>=3.0.0)",
      "pygments (>=2.5.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Calculate code metrics in various languages",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16059436,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b7cca6e7eac89a93162ad921ef662f5b237d350aa73bc8d5188ca6a51fc11a1",
          "md5": "52760e8fed628e82630327b2cbf26a79",
          "sha256": "d4855992b40a96a4f62816dc94b6722da3fcaa86fcea0ce50bcc042a2ebd426a"
        },
        "downloads": -1,
        "filename": "multimetricprog_VadokDev-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52760e8fed628e82630327b2cbf26a79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23214,
        "upload_time": "2022-12-10T17:44:50",
        "upload_time_iso_8601": "2022-12-10T17:44:50.369570Z",
        "url": "https://files.pythonhosted.org/packages/9b/7c/ca6e7eac89a93162ad921ef662f5b237d350aa73bc8d5188ca6a51fc11a1/multimetricprog_VadokDev-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9064f35e4fd148bf01e4ae55742a080f0caa98d368e26eb733e136596a125640",
          "md5": "fd60b8019eeaf97fc47a23f7f21238d8",
          "sha256": "cced88265621439526362e474cf4d85333ae1fe8a0183e3c32f0173617367555"
        },
        "downloads": -1,
        "filename": "multimetricprog_VadokDev-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd60b8019eeaf97fc47a23f7f21238d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16287,
        "upload_time": "2022-12-10T17:44:54",
        "upload_time_iso_8601": "2022-12-10T17:44:54.469638Z",
        "url": "https://files.pythonhosted.org/packages/90/64/f35e4fd148bf01e4ae55742a080f0caa98d368e26eb733e136596a125640/multimetricprog_VadokDev-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b7cca6e7eac89a93162ad921ef662f5b237d350aa73bc8d5188ca6a51fc11a1",
        "md5": "52760e8fed628e82630327b2cbf26a79",
        "sha256": "d4855992b40a96a4f62816dc94b6722da3fcaa86fcea0ce50bcc042a2ebd426a"
      },
      "downloads": -1,
      "filename": "multimetricprog_VadokDev-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "52760e8fed628e82630327b2cbf26a79",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23214,
      "upload_time": "2022-12-10T17:44:50",
      "upload_time_iso_8601": "2022-12-10T17:44:50.369570Z",
      "url": "https://files.pythonhosted.org/packages/9b/7c/ca6e7eac89a93162ad921ef662f5b237d350aa73bc8d5188ca6a51fc11a1/multimetricprog_VadokDev-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9064f35e4fd148bf01e4ae55742a080f0caa98d368e26eb733e136596a125640",
        "md5": "fd60b8019eeaf97fc47a23f7f21238d8",
        "sha256": "cced88265621439526362e474cf4d85333ae1fe8a0183e3c32f0173617367555"
      },
      "downloads": -1,
      "filename": "multimetricprog_VadokDev-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fd60b8019eeaf97fc47a23f7f21238d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16287,
      "upload_time": "2022-12-10T17:44:54",
      "upload_time_iso_8601": "2022-12-10T17:44:54.469638Z",
      "url": "https://files.pythonhosted.org/packages/90/64/f35e4fd148bf01e4ae55742a080f0caa98d368e26eb733e136596a125640/multimetricprog_VadokDev-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}