{
  "info": {
    "author": "Fatih IRDAY",
    "author_email": "fatihirday@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "FTHelper V0.1\n---\n\nFTHelper is a package developed for dictionary and list operations.\n\n```python\nfrom fthelper import *\n# or\nfrom fthelper import Arr, Str\n```\n\n# Dictionary and list methods (Arr)\n\n---\n\n### <span style=\"color:#006dad\">Array Column</span>\n\nReturns the values from a single column of the dictionary, identified by the column name\n\n```python\nmyList = [\n    {\n        'name': 'fatih',\n        'surname': 'irday'\n    },\n    {\n        'name': 'tugba',\n        'surname': 'irday'\n    },\n    {\n        'name': 'tunahan',\n        'surname': 'irday'\n    }\n]\n\nresult = Arr.column(arr=myList, key='name')\n# ['fatih', 'tugba', 'tunahan']\n\n\ndevelopers = [\n    {'developer': {'id': 1, 'name': 'Rasmus', 'surname': 'LERDORF'}},\n    {'developer': {'id': 2, 'name': 'Guido van', 'surname': 'ROSSUM'}},\n    {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}},\n]\nresult = Arr.column(arr=developers, key='developer.surname')\n\n# ['LERDORF', 'ROSSUM', 'IRDAY']\n```\n\n### <span style=\"color:#006dad\">Selectors</span>\n\nShifts the selected value of the list off and returns it.\n\n#### first\n\n```python\nmyList = [2, 4, 6, 8, 10]\nresult = Arr.first(arr=myList)\n# 2\n```\n\n#### last\n\n```python\nresult = Arr.last(arr=myList)\n# 10\n```\n\n#### Single get\n\n```python\nsingle = {'local': 100, 'poc': 200, 'product': 300}\nresult = Arr.get(single, 'poc')\n# 200\n\ntree = {'products': {'desk': {'price': 100}, 'ask': {'price': 120}}}\nresult = Arr.get(tree, 'products.desk.price')\n# 100\n\ndevelopers = [\n    {'developer': {'id': 1, 'name': 'Rasmus', 'surname': 'LERDORF'}},\n    {'developer': {'id': 2, 'name': 'Guido van', 'surname': 'ROSSUM'}},\n    {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}},\n]\nresult = Arr.get(arr=developers, key_path='developer.name')\n# ['Rasmus', 'Guido van', 'Fatih']\n```\n\n### <span style=\"color:#006dad\">Combine</span>\n\nCreates a dictionary by using the values from the keys list as keys, and the values from the values listed as the\ncorresponding values.\n\n```python\nkeys = ['a', 'b', 'c']\nvals = (1, 2, 3)\n\nresult = Arr.combine(keys, vals)\n# {'a': 1, 'b': 2, 'c': 3}\n```\n\n### <span style=\"color:#006dad\">Divide</span>\n\nDivides dictionary into keys and values\n\n```python\nkeyList, ValueList = Arr.divide({\n    'name': 'tunahan',\n    'surname': 'irday'\n})\n# ['name', 'surname']\n# ['tunahan', 'irday']\n```\n\n### <span style=\"color:#006dad\">Have an item (Has)</span>\n\nHave an item in the dictionary\n\n```python\nsingle = {'local': 100, 'poc': 200, 'product': 300}\nresult = Arr.has(single, 'poc')\n# True\n\nresult = Arr.has(single, 'demo')\n# False\n\ntree = {'products': {'desk': {'price': 100}, 'ask': {'price': 120}}}\nresult = Arr.has(tree, 'products.desk.price')\n# True\n\nresult = Arr.has(tree, 'products.desk.prices')\n# False\n\ndevelopers = [\n    {'developer': {'id': 1, 'name': 'Rasmus', 'surname': 'LERDORF'}},\n    {'developer': {'id': 2, 'name': 'Guido van', 'surname': 'ROSSUM'}},\n    {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}},\n]\nresult = Arr.has(arr=developers, key_path='developer.name')\n# True\n\nresult = Arr.has(arr=developers, key_path='developer.language')\n# False\n```\n\n### <span style=\"color:#006dad\">Only</span>\n\nGetting dictionary list from dictionaries\n\n```python\nsingle = {'name': 'Desk', 'price': 100, 'orders': 10}\nresult = Arr.only(single, ['name', 'price'])\n# {'name': 'Desk', 'price': 100}\n```\n\n### <span style=\"color:#006dad\">Pluck</span>\n\nThe `pluck` method retrieves all of the values for a given key:\n\n```python\nmyList = [\n    {\n        'name': 'fatih',\n        'surname': 'irday'\n    },\n    {\n        'name': 'tugba',\n        'surname': 'irday'\n    },\n    {\n        'name': 'tunahan',\n        'surname': 'irday'\n    }\n]\n\nr = Arr.pluck(myList, keys='name')\n# ['fatih', 'tugba', 'tunahan']\n\nr = Arr.pluck(myList, keys='name', vals='surname')\n# {'fatih': 'irday', 'tugba': 'irday', 'tunahan': 'irday'}\n\n\nmultiple = [\n    {'developer': {'id': 1, 'name': 'Rasmus', 'surname': 'LERDORF'}},\n    {'developer': {'id': 2, 'name': 'Guido van', 'surname': 'ROSSUM'}},\n    {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}},\n]\n\nr = Arr.pluck(multiple, keys='developer.id', vals='developer.name')\n# {1: 'Rasmus', 2: 'Guido van', 3: 'Fatih'}\n\nr = Arr.pluck(multiple, keys='developer.id')\n# {1: None, 2: None, 3: None}\n\nr = Arr.pluck(multiple, vals='developer.name')\n# ['Rasmus', 'Guido van', 'Fatih']\n```\n\n### <span style=\"color:#006dad\">Prepend</span>\n\nAdd items to the top of the list\n\n```python\nr = Arr.prepend(['a', 'b', 'c'], 'd')\n['d', 'a', 'b', 'c']\n```\n\n### <span style=\"color:#006dad\">Exists</span>\n\nUsed to search dictionaries or list\n\n```python\nr = Arr.exists(['a', 'b', 'c'], search='c')\n# True\n\nmyDict = {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}\nr = Arr.exists(myDict, search='Fatih')\n# True\n\n\ndevelopers = [\n    {'developer': {'id': 1, 'name': 'Rasmus', 'surname': 'LERDORF'}},\n    {'developer': {'id': 2, 'name': 'Guido van', 'surname': 'ROSSUM'}},\n    {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}},\n]\nr = Arr.exists(developers, search='Guido van', key='developer.name')\n# True\n\n\nmyDict = {'developer': {'id': 3, 'name': 'Fatih', 'surname': 'IRDAY'}}\nr = Arr.keyExists(myDict, 'developer')\n# True\n\nr = Arr.keyExists(myDict, 'developer.id')\n# True\n```\n\n### <span style=\"color:#006dad\">Random</span>\n\nFetches a random item from the list\n\n```python\nr = Arr.random(['a', 'b', 'c'])\n# b\n```\n\n### <span style=\"color:#006dad\">Wrap</span>\n\nThe `wrap` method wraps the given value in an list or dictionary.\n\n```python\nr = Arr.wrap(None)\n# []\n\nr = Arr.wrap()\n# []\n\nr = Arr.wrap('demo')\n# ['demo']\n\nr = Arr.wrap('developer.name.first', 'fatih')\n# {'developer': {'name': {'first': 'fatih'}}}\n```\n\n### <span style=\"color:#006dad\">Array Filter</span>\n\nfilters empty and none values in the list.\n\n```python\nff = ['', None, 14, 'qwe']\nr = Arr.array_filter(ff)\n# [14, 'qwe']\n```\n\n<br />\n\n\n# String methods (Str)\n\n---\n\n### <span style=\"color:#006dad\">Random</span>\n\nCreates a string of the specified length. Runs as 16 characters if length is not specified\n\n```python\nresult = Str.random()\n# lQCcgS8V3fRfpjS4\n\nresult = Str.random(20)\n# KLzXIkwNstlEs97oZuLd\n```\n\n\n\n### <span style=\"color:#006dad\">Limit</span>\n\nThe `limit` method truncates the given string to the specified length. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string\n\n```python\nresult = Str.limit('Perfectly balanced, as all things should be.', 9)\n# Perfectly\n\nresult = Str.limit('Perfectly balanced, as all things should be.', 9, '!..')\n# Perfectly!..\n```\n\n\n\n### <span style=\"color:#006dad\">Words</span>\n\nThe `words` method limits the number of words in a string. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string\n\n```python\nresult = Str.limit('Perfectly balanced, as all things should be.', 9)\n# Perfectly\n\nresult = Str.limit('Perfectly balanced, as all things should be.', 9, '!..')\n# Perfectly!..\n```\n\n\n\n### <span style=\"color:#006dad\">String Cases</span>\n\nStringCase methods convert the given string to the desired StringCase\n\n* kebab case\n* camel case\n* pascal case\n* snake case\n\n```python\nresult = Str.kebabcase('fatih irday')\n# fatih-irday\n\nresult = Str.camelcase('fatih irday')\n# fatihIrday\n\nresult = Str.pascalcase('fatih irday')\n# FatihIrday\n\nresult = Str.snakecase('fatih irday')\n# fatih_irday\n```\n\n\n\n### <span style=\"color:#006dad\">isStr</span>\n\nThe `isStr` method determines if a given string matches a given pattern\n\n```python\nresult = Str.isStr('13')\n# True\n\nresult = Str.isStr(13)\n# False\n```\n\n\n\n### <span style=\"color:#006dad\">isAscii</span>\n\nThe `isAscii` method determines if a given ASCII matches a given pattern\n\n```python\nresult = Str.isAscii('ascii code'.encode())\n# True\n\nresult = Str.isAscii('ascii code')\n# False\n```\n\n\n\n### <span style=\"color:#006dad\">isEmpty</span>\n\nThe `isEmpty` method determines if the given string is empty\n\n```python\nresult = Str.isEmpty('string')\n# False\n\nresult = Str.isEmpty(13)\n# False\n\nresult = Str.isEmpty(None)\n# True\n\nresult = Str.isEmpty('')\n# True\n```\n\n\n\n### <span style=\"color:#006dad\">Start</span>\n\nThe `start` method adds a single instance of the given value to a string if it does not already start with that value\n\n```python\nresult = Str.start('this/string', '/')\n# /this/string\n\nresult = Str.start('/this/string', '/')\n# /this/string\n```\n\n\n<br />\n\n## Fluent strings (Str.of)\n\nFluent strings provide a more fluent, object-oriented interface for working with string values, allowing you to chain multiple string operations together using a more readable syntax compared to traditional string operations.\n\n\n### <span style=\"color:#006dad\">Append</span>\n\nThe `append` method appends the given values to the string\n\n```python\nof = Str.of('Fatih').append(' Irday')\nof.getValue()\n# Fatih Irday\n```\n\n### <span style=\"color:#006dad\">Prepend</span>\n\nThe `prepend` method prepends the given values onto the string\n\n```python\nof = Str.of('Fatih Irday').prepend('Person : ')\nof.getValue()\n# Person : Fatih Irday\n```\n\n### <span style=\"color:#006dad\">Replace</span>\n\nThe `replace` method replaces a given string within the string\n\n```python\nof = Str.of('Python 2.x, Python version 2').replace('2', '3')\nof.getValue()\n# Person : Python 3.x, Python version 3\n```\n\n### <span style=\"color:#006dad\">Replace First</span>\n\nThe `replaceFirst` method replaces the first occurrence of a given value in a string\n\n```python\nof = Str.of('Python 2.x, Python version 2').replaceFirst('2', '3')\nof.getValue()\n# Person : Python 3.x, Python version 2\n```\n\n### <span style=\"color:#006dad\">Replace Last</span>\n\nThe `replaceLast` method replaces the last occurrence of a given value in a string\n\n```python\nof = Str.of('Python 2.x, Python version 2').replaceLast('2', '3')\nof.getValue()\n# Person : Python 2.x, Python version 3\n```\n\n### <span style=\"color:#006dad\">Replace List</span>\n\nThe `replaceList` method replaces a given value in the string sequentially using a list\n\n```python\nof = Str.of('Python ?.x and ?.x').replaceList('?', ['3.6', '3.9'])\nof.getValue()\n# Python 3.6.x and 3.9.x\n```\n\n### <span style=\"color:#006dad\">Replace Matches</span>\n\nThe `replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string\n\n```python\nof = Str.of('(+1) 501-555-1000').replaceMatches(\"[^A-Za-z0-9]\", '')\nof.getValue()\n# 15015551000\n```\n\n### <span style=\"color:#006dad\">After</span>\n\nThe `after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string\n\n```python\nof = Str.of('This is my name').after('is')\nof.getValue()\n# ' is my name'\n```\n\n### <span style=\"color:#006dad\">After Last</span>\n\nThe `afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string\n\n```python\nof = Str.of('This is my name').afterLast('is')\nof.getValue()\n# ' my name'\n```\n\n### <span style=\"color:#006dad\">Before</span>\n\nThe `before` method returns everything before the given value in a string\n\n```python\nof = Str.of('This is my name').before('is')\nof.getValue()\n# ' Th'\n```\n\n### <span style=\"color:#006dad\">Before Last</span>\n\nThe `beforeLast` method returns everything before the last occurrence of the given value in a string\n\n```python\nof = Str.of('This is my name').beforeLast('is')\nof.getValue()\n# ' This'\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/fatihirday/fthelper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fthelper",
    "package_url": "https://pypi.org/project/fthelper/",
    "platform": "",
    "project_url": "https://pypi.org/project/fthelper/",
    "project_urls": {
      "Homepage": "https://gitlab.com/fatihirday/fthelper"
    },
    "release_url": "https://pypi.org/project/fthelper/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Dict, list and string helper package",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9076587,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a5cc7652b788b8571462e17b461b93d4cb647e1ff7baff91540ffd1e03c80dc",
          "md5": "db53b0660fd6b9903b2ef976308f557c",
          "sha256": "820a0054c8b9747b877d3f821e636d5cae46bd00a02061c96eab534f84f22306"
        },
        "downloads": -1,
        "filename": "fthelper-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "db53b0660fd6b9903b2ef976308f557c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8311,
        "upload_time": "2021-01-07T11:48:10",
        "upload_time_iso_8601": "2021-01-07T11:48:10.575165Z",
        "url": "https://files.pythonhosted.org/packages/2a/5c/c7652b788b8571462e17b461b93d4cb647e1ff7baff91540ffd1e03c80dc/fthelper-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a5cc7652b788b8571462e17b461b93d4cb647e1ff7baff91540ffd1e03c80dc",
        "md5": "db53b0660fd6b9903b2ef976308f557c",
        "sha256": "820a0054c8b9747b877d3f821e636d5cae46bd00a02061c96eab534f84f22306"
      },
      "downloads": -1,
      "filename": "fthelper-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "db53b0660fd6b9903b2ef976308f557c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8311,
      "upload_time": "2021-01-07T11:48:10",
      "upload_time_iso_8601": "2021-01-07T11:48:10.575165Z",
      "url": "https://files.pythonhosted.org/packages/2a/5c/c7652b788b8571462e17b461b93d4cb647e1ff7baff91540ffd1e03c80dc/fthelper-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}