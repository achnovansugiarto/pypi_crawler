{
  "info": {
    "author": "Pavel Panchekha",
    "author_email": "pavpanchekha@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python :: 2.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Multiple Dispatch and Inquisitive Types for Python\n==================================================\n\n``typed.py`` implements multimethods (also known as multiple dispatch) for\nPython. However, instead of basing the types used for dispatch on the\nstandard Python class system, ``typed.py`` uses a method called `inquisitive\ntypes`.\n\nDiving In\n---------\n\nStart off by importing the ``typed`` module; you don't need anything besides\nthat. ::\n\n    from typed import *\n\nSome of the names in the typed module may conflict with names you yourself use:\n``typed``, ``typedef``, ``restrict``, ``fn``, ``from_pytype``, and ``eq``. If\nso, take special care to eliminate shadowing.\n\nNow then, let's write a function::\n\n    @typed(String, String)\n    def combine(a, b):\n        return a + b\n\nThis function will require both arguments to be strings::\n\n    >>> combine(\"adsf\", \"adsf\")\n    'asdfasdf'\n    >>> combine(1, 2)\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"typed/specialize.py\", line 108, in __call__\n        return self.match(args)[1](*args)\n    File \"typed/specialize.py\", line 103, in match\n        raise TypedError(\"No matches\", self, [x[0] for x in self.sigs])\n    typed.specialize.TypedError: No matches for function <typed function combine at 0xb733a4ec>. Alternatives:\n            (<Type String>, <Type String>)\n\nScary looking error, huh? Note that it tells you the alternative signatures.\n\nAnyway, let's define another variant to this function::\n\n    @typed(String, Integer)\n    def combine(a, n):\n        return a + str(n)\n\nAnd, we can use it normally::\n\n    >>> combine(\"asdf\", 12)\n    'asdf12'\n    >>> combine(\"asdf\", \"asdf\")\n    'asdfasdf'\n\nYay, both signatures work!\n\nThe builtin types include:\n\n    - ``Object`` (anything at all, not just things that inherit from\n      ``object``)\n    - ``Complex`` (``complex``, ``float``, or and integral type)\n    - ``Real`` (``float`` or an integral type)\n    - ``Integer`` (``int`` or ``long``; an integral type)\n    - ``Boolean`` (``bool``)\n    - ``String`` (guess!)\n    - ``Type`` (An inquisitive type)\n    - ``PyType`` (A python class or type)\n    - ``Tuple`` (A tuple of any length or type)\n    - ``List`` (A list of any type) and ``List(T)`` (A list of type ``T``\n      elements)\n    - ``Dict`` (A dict of any type to any type), ``Dict(T)`` (A list where all\n      keys have type ``T``), and ``Dict(K, V)`` (A dict with keys of type ``K``\n      and values of type ``V``)\n    - ``OneOf(*x)`` (Type of things equal to one of the elements of ``x``)\n\nWhat are Inquisitive Types?\n---------------------------\n\nAn inquisitive type is defined by two properties: `is` and `sub`. I'll skip the\nsecond for now, but `is` (which in Python is the method ``is_`` of a type) just\ntakes an object and tells you if that object is an instance of the given type.\nFor example, the `is` method for ``Object`` is simply::\n\n    def is(self, x):\n        return True\n\nBecause, after all, everything is an object. Not that `a priori`, objects have\nno type; one can only ask a type if an object is an instance. This is why they\nare called `inquisitive`: you always have to ask if you want to know if an object\nis an instance of something.\n\nNow, what about that `sub` method I mentioned? This is the analog of\n``issubclass`` for inquisitive types: it takes another type, and tells you if\nthe given type is a subclass of it. For example, the one for ``Object`` is::\n\n    def sub(self, X):\n        if X == self:\n            return True\n        else:\n            return False\n\nThese subclass relations are used to determine which method to call if a\nfunction has, for example, two implementations with signatures ``Integer,\nInteger`` and ``Real, Real``: clearly you want the one with ``Integer``\\ s to\nbe called if possible; and it is, because ``Integer.sub(Real)`` returns\n``True``.\n\nNow, the nice thing is that this allows you to construct more complex types\neasily, using `type functions`. Don't worry, the concept is easy: it's a\nfunction that takes a type and returns a type. For example, consider the\nfunction ``restrict``. ``restrict(T, f, name)`` takes a type ``T`` and returns\na type that only says things are instances if they are instances of that type,\n*and* satisfy the function ``f``. The ``name`` just names the resulting type.\nSo, for example::\n\n    >>> EvenInt = restrict(Integer, lambda x: x % 2 == 0, \"EvenInt\")\n    <type EvenInt>\n    >>> isinstance(4, EvenInt)\n    True\n    >>> isinstance(3, EvenInt)\n    False\n\nSome other type functions are built in to ``typed.py``. ``fn(f)`` is another way\nof saying ``restrict(Object, f)``. ``typedef(T, name)`` copies the type ``T``\nand renames it (sometimes useful if you use type functions to construct types).\n``eq(x)`` creates a new type whose only instance is ``x``; it's equivalent to\n``OneOf(x)``. Finally, ``from_pytype`` is a compatibility feature, taking any\nPython type and returning a new inquisitive type.\n\nFurthermore, a few useful type functions have nice operator syntax. For example::\n\n    >>> isinstance((3, 4), Integer * Integer)\n    True\n    >>> isinstance((\"foo\", \"bar\", \"baz\"), String ** 3)\n    True\n    >>> isinstance(5, Integer < 3)\n    False\n    >>> isinstance(7, Integer > -2)\n    True\n    >>> isinstance(\"a\", eq(\"a\") | eq(\"b\"))\n    True\n    >>> map(lambda x: isinstance(x, Integer | String), [1, \"a\", 17.3, \"17.3\", True])\n    [True, True, False, True, False]\n    >>> isinstance(12, (3 < Integer) < 17)\n    True\n\nNote that in the last example, you *must* place parentheses around one of the\ntwo comparisons. It doesn't matter which one; this is simply a fault of Python's\nsyntax.\n\nUse in APIs\n-----------\n\nOne can use ``typed.py`` for simple type checking::\n\n    @typed(Real)\n    def sqrt(x):\n        ...\n\nOr, you can use it to dispatch based on type::\n\n    @typed(Real)\n    def sqrt(x):\n        import math\n        return math.sqrt(x)\n\n    @typed(Complex)\n    def sqrt(x):\n        import cmath\n        return cmath.sqrt(x)\n\nYou can eliminate boring conditional checks::\n\n    @typed(Integer < 10000)\n    def is_prime(x):\n        return do_bruteforce(x)\n\n    @typed(Integer)\n    def is_prime(x):\n        return elliptic_curve_primality_test(x)\n\nYou can also dispatch, because these are inquisitive types, on specifics of the\narguments::\n\n    @typed(restrict(String, lambda x: x.startswith(\"http\")))\n    def download(x):\n        import urllib\n        return urllib.urlopen(x).read()\n\n    @typed(restrict(String, lambda x: x.startswith(\"ftp\")))\n    def download(x):\n        import ftplib\n        f = ftplib.FTP(dir)\n        return f.getwelcome()\n\nFinally, you can combine these to make those strings you ask people to pass to\nidentify things to do type-safe::\n\n    Color = typedef(OneOf(\"green\", \"yellow\", \"red\"), \"Color\")\n\n    @typed(Banana, Color)\n    def eat(b, color):\n        if color == \"green\":\n            print \"Hold on\"\n        elif color == \"yellow\":\n            print \"Go ahead\"\n        elif color == \"red\":\n            print \"Where the **** did you get that banana?\" # -- Mitch Hedburg\n\nAdmittedly, in that last example, you'd probably write three methods and use\n``eq`` to create types corresponding to each color.\n\nLastly, you can now create singletons that are easy to use: just use ``eq``\nconstructors on a string.\n\nType Types and so on\n--------------------\n\n::\n\n    >>> isinstance(Integer, Type)\n    True\n\nSee, types can have types (it's like metatypes, only it makes sense!). In fact,\nit actually gets a bit spookier, because::\n\n    >>> isinstance(Type, Type)\n    True\n\nIt's ``Type``\\ s all the way down! ::\n\n    >>> isinstance(Object, Object)\n    True\n\nUntil you hit the ``Object``\\ s, that is.\n\nA Short Note on Covariance\n--------------------------\n\n::\n\n    >>> a = [1, 2, 3]\n    >>> isinstance(a, List(Integer))\n    True\n    >>> isinstance(a, List(Complex))\n    True\n    >>> a[1] = \"asdf\"\n    >>> isinstance(a, List(Integer))\n    False\n\n``List``\\ s (and ``Dict``\\ ionaries) covary with their contained types. This\nraises the usual endless troubles. Cry me a river. Or, better yet, deal with it.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/typed.py/",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "typed.py",
    "package_url": "https://pypi.org/project/typed.py/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/typed.py/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/typed.py/"
    },
    "release_url": "https://pypi.org/project/typed.py/1.0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Inquisitive types and multiple dispatch, now for Python!",
    "version": "1.0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 746263,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff063223689b03a5f32145dddabd6d56dcad108996688dc9412abc21fe89ac7e",
          "md5": "c14bc8db7d21001268206ddb6cb1a353",
          "sha256": "b5262f7c7c2d22d520ee9cb845c543dce1b04e37fcc69b80282910f47a7bb67d"
        },
        "downloads": -1,
        "filename": "typed.py-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c14bc8db7d21001268206ddb6cb1a353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7402,
        "upload_time": "2010-06-26T06:01:01",
        "upload_time_iso_8601": "2010-06-26T06:01:01.624611Z",
        "url": "https://files.pythonhosted.org/packages/ff/06/3223689b03a5f32145dddabd6d56dcad108996688dc9412abc21fe89ac7e/typed.py-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb68af886c4c05d396ca75d4a132400cc5806ada0e2eed8febe869204ff13983",
          "md5": "ba09d0d774423c830e8b6cd3c2bc6441",
          "sha256": "c8a72e252de9fd9eedaacc1c20016183e5016ba9ee3d1a107dab8f56b6544ff1"
        },
        "downloads": -1,
        "filename": "typed.py-1.0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ba09d0d774423c830e8b6cd3c2bc6441",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7411,
        "upload_time": "2010-06-26T06:05:31",
        "upload_time_iso_8601": "2010-06-26T06:05:31.400664Z",
        "url": "https://files.pythonhosted.org/packages/bb/68/af886c4c05d396ca75d4a132400cc5806ada0e2eed8febe869204ff13983/typed.py-1.0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb68af886c4c05d396ca75d4a132400cc5806ada0e2eed8febe869204ff13983",
        "md5": "ba09d0d774423c830e8b6cd3c2bc6441",
        "sha256": "c8a72e252de9fd9eedaacc1c20016183e5016ba9ee3d1a107dab8f56b6544ff1"
      },
      "downloads": -1,
      "filename": "typed.py-1.0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ba09d0d774423c830e8b6cd3c2bc6441",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7411,
      "upload_time": "2010-06-26T06:05:31",
      "upload_time_iso_8601": "2010-06-26T06:05:31.400664Z",
      "url": "https://files.pythonhosted.org/packages/bb/68/af886c4c05d396ca75d4a132400cc5806ada0e2eed8febe869204ff13983/typed.py-1.0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}