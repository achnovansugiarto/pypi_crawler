{
  "info": {
    "author": "Benjamin F. Maier",
    "author_email": "contact@benmaier.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "cQuadTree\n=========\n\nInfinite jest with your favorite space-dividing trees. Fork from this\nC++-codebase: https://github.com/benmaier/BarnesHutTree/\n\n-  repository: https://github.com/benmaier/cQuadTree/\n\n.. code:: python\n\n   >>> from cQuadTree import QuadTree\n   >>> points = [\n   ...             (1.0, 2.0),\n   ...             (0.1, 10.0),\n   ...             (0.5, 7.4),\n   ...             (6.0, 0.7),\n   ...          ]\n   >>> T = QuadTree(points)\n   >>> T\n   QuadTree(\n       geom=Extent(left=0.1,bottom=0.7,width=9.3,height=9.3),\n       current_data_quadrant=-1,\n       is_leaf=False,\n       number_of_contained_points=4,\n       center_of_mass=Point(x=1.9,y=5.025),\n       total_mass=4,\n       total_mass_position=Point(x=7.6,y=20.1),\n       number_of_occupied_subtrees=3\n   )\n   >>> print(T)\n   +- CM = 1.9, 5.025; M = 4; n = 4\n   | +- (nw) CM = 0.3, 8.7; M = 2; n = 2\n   | | +- (nw) 1 (0.1, 10)\n   | | +- (sw) 2 (0.5, 7.4)\n   | +- (se) 3 (6, 0.7)\n   | +- (sw) 0 (1, 2)\n\nInstall\n-------\n\nYour machine needs to have a C++11-compatible compiler installed.\n\n.. code:: bash\n\n   pip install cQuadTree\n\nSo far, the package's functionality was tested on Mac OS X and CentOS\nonly.\n\nDependencies\n------------\n\n``cQuadTree`` directly depends on the following packages which will be\ninstalled by ``pip`` during the installation process\n\n-  ``numpy>=1.20``\n\nDocumentation\n-------------\n\nBuild the tree\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import numpy as np\n   from cQuadTree import QuadTree\n   points = np.random.rand(100,2).tolist()\n   T = QuadTree(points)\n\nExplore the tree recursively\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs an example, here's a recursive function that collects all internal\nnode boxes and leaf's points\n\n.. code:: python\n\n   def get_points_and_boxes(quadtree):\n       points = []\n       boxes = []\n       if quadtree.is_leaf():\n           points.append(quadtree.this_pos)\n       boxes.append(quadtree.geom)\n       for tree in quadtree.get_subtrees():\n           _points, _boxes = get_points_and_boxes(tree)\n           points.extend(_points)\n           boxes.extend(_boxes)\n\n       return points, boxes\n\nCompute the force on a point\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> T.compute_force(point=(0.,0.001),theta=1.0) # default is theta=0.5\n   (0.117681690892212, 0.20856460584929215)\n\nGet all distances to a point\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNote that per default, distances of value zero will be disregarded. If\nyou want to include those, set ``ignore_zero_distance=False`` in the\nfunction call.\n\n.. code:: python\n\n   >>> T.get_distances_to((0.,0),theta=1) # default is theta=0.2\n   [(8.705170877128145, 2), (6.040695324215583, 1), (2.23606797749979, 1)]\n\nThe first number is the distance to the query point, the second is the\nnumber of points that lie at this approximate distance to the query\npoint.\n\nGet all distances between pairs of points in a list and points in the tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> T.get_distances_to_points(points,theta=1)\n   [(6.7364679172397155, 2), (5.166236541235796, 1), (2.630589287593181, 1), (11.013627921806693, 1), (8.050465825031493, 1), (2.630589287593181, 1), (8.668333173107735, 1), (5.4230987451825, 1), (9.822932352408825, 2), (5.166236541235796, 1)]\n\nGet all pairwise distances between points in the tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> T.get_pairwise_distances(theta=1.0)\n   [(2.630589287593181, 1), (11.013627921806693, 1), (8.050465825031493, 1), (2.630589287593181, 1), (8.668333173107735, 1), (5.4230987451825, 1), (9.822932352408825, 2), (5.166236541235796, 1), (6.7364679172397155, 2), (5.166236541235796, 1)]\n\nBuild a distance histogram from distance counts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from cQuadTree import histogram\n   dists, counts = zip(*T.get_pairwise_distances(theta=1.0))\n   bin_edges = np.logspace(-4,1/2,101,base=2)\n   pdf, _ = histogram(dists, counts, bin_edges)\n\nPlot tree as boxes and points\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from cQuadTree import get_points_and_boxes\n   from cQuadTree.plot import plot_box_tree\n\n   plot_box_tree(*get_points_and_boxes(T))\n\n.. image:: https://github.com/benmaier/cQuadTree/blob/main/img/boxtree.png?raw=true\n   :alt: Box representation of tree\n\nDocstrings\n~~~~~~~~~~\n\nQuadTree\n^^^^^^^^\n\n.. code:: python\n\n   Help on class QuadTree in module _cQuadTree:\n\n   class QuadTree(pybind11_builtins.pybind11_object)\n    |  A QuadTree.\n    |\n    |  Method resolution order:\n    |      QuadTree\n    |      pybind11_builtins.pybind11_object\n    |      builtins.object\n    |\n    |  Methods defined here:\n    |\n    |  __init__(...)\n    |      __init__(*args, **kwargs)\n    |      Overloaded function.\n    |\n    |      1. __init__(self: _cQuadTree.QuadTree) -> None\n    |\n    |      Initialize an empty tree.\n    |\n    |      2. __init__(self: _cQuadTree.QuadTree, position_pairs: List[Tuple[float, float]], force_square: bool = True) -> None\n    |\n    |      Initialize a tree given a list of positions.\n    |\n    |      3. __init__(self: _cQuadTree.QuadTree, position_pairs: List[Tuple[float, float]], masses: List[float], force_square: bool = True) -> None\n    |\n    |      Initialize a tree given a list of positions and a list of corresponding masses.\n    |\n    |  __repr__(...)\n    |      __repr__(self: _cQuadTree.QuadTree) -> str\n    |\n    |      Get string representation of object\n    |\n    |  __str__(...)\n    |      __str__(self: _cQuadTree.QuadTree) -> str\n    |\n    |      Get a string representation of the full tree\n    |\n    |  compute_force(...)\n    |      compute_force(self: _cQuadTree.QuadTree, point: Tuple[float, float], theta: float = 0.5) -> Tuple[float, float]\n    |\n    |\n    |      Compute the force on a single point using the Barnes-Hut-Algorithm\n    |      with cutoff parameter :math:`\\theta`.\n    |\n    |      Parameters\n    |      ----------\n    |      point : 2-tuple of float\n    |          Point in plane on which to compute the total force\n    |      theta : float, default = 0.5\n    |          If the distance between the point and the current internal node's\n    |          center of mass is smaller than :math:`\\theta` times the diameter\n    |          of the internal node's extent (box), the algorithm will treat\n    |          all children of this node as a giant point mass located at the\n    |          center of mass of this internal node.\n    |\n    |      Returns\n    |      -------\n    |      force : 2-tuple of float\n    |          Evaluated force vector\n    |\n    |  get_distances_to(...)\n    |      get_distances_to(self: _cQuadTree.QuadTree, point: Tuple[float, float], theta: float = 0.2, ignore_zero_distance: bool = True, tree: _cQuadTree.QuadTree = None) -> List[Tuple[float, int]]\n    |\n    |\n    |      Compute distances of point masses and mass clusters to a single point\n    |      using the Barnes-Hut-Algorithm with cutoff parameter :math:`\\theta`.\n    |\n    |      Parameters\n    |      ----------\n    |      point : 2-tuple of float\n    |          Points in the plane to which to measure the distances\n    |      theta : float, default = 0.2\n    |          If the distance between the point and the current internal node's\n    |          center of mass is smaller than :math:`\\theta` times the diameter\n    |          of the internal node's extent (box), the algorithm will treat\n    |          all children of this node as a giant point mass located at the\n    |          center of mass of this internal node.\n    |      ignore_zero_distance : bool, default = True\n    |          If the distance is zero, do or do not include this result in\n    |          the ``distance_counts``-list.\n    |\n    |      Returns\n    |      -------\n    |      distance_counts : list of 2-tuple of double, int\n    |          An item of this list is a distance-count pair,\n    |          the first entry of the tuple containing a distance\n    |          to the query point and the second entry being the\n    |          number of points that lie at that approximate distance\n    |          to the query point, such that it will look like this\n    |\n    |          .. code:: python\n    |\n    |              [\n    |                  (0.2, 1),\n    |                  (0.1, 1),\n    |                  (1.5, 32),\n    |                  ...\n    |              ]\n    |\n    |  get_distances_to_points(...)\n    |      get_distances_to_points(self: _cQuadTree.QuadTree, points: List[Tuple[float, float]], theta: float = 0.2, ignore_zero_distance: bool = True, tree: _cQuadTree.QuadTree = None) -> List[Tuple[float, int]]\n    |\n    |\n    |      Compute distances of point masses and mass clusters to a list of points\n    |      using the Barnes-Hut-Algorithm with cutoff parameter :math:`\\theta`.\n    |\n    |      Parameters\n    |      ----------\n    |      points : 2-tuple of float\n    |          List of points in the plane to which to measure the distances\n    |      theta : float, default = 0.2\n    |          If the distance between the point and the current internal node's\n    |          center of mass is smaller than :math:`\\theta` times the diameter\n    |          of the internal node's extent (box), the algorithm will treat\n    |          all children of this node as a giant point mass located at the\n    |          center of mass of this internal node.\n    |      ignore_zero_distance : bool, default = True\n    |          If the distance is zero, do or do not include this result in\n    |          the ``distance_counts``-list.\n    |\n    |      Returns\n    |      -------\n    |      distance_counts : list of 2-tuple of double, int\n    |          An item of this list is a distance-count pair,\n    |          the first entry of the tuple containing a distance\n    |          to the query point and the second entry being the\n    |          number of points that lie at that approximate distance\n    |          to the query point, such that it will look like this\n    |\n    |          .. code:: python\n    |\n    |              [\n    |                  (0.2, 1),\n    |                  (0.1, 1),\n    |                  (1.5, 32),\n    |                  ...\n    |              ]\n    |\n    |  get_pairwise_distances(...)\n    |      get_pairwise_distances(self: _cQuadTree.QuadTree, theta: float = 0.2, ignore_zero_distance: bool = True) ->\n   List[Tuple[float, int]]\n    |\n    |\n    |      Compute distances between pairs of points and point clusters\n    |      of a tree using the Barnes-Hut-Algorithm with cutoff parameter\n    |      :math:`\\theta`.\n    |\n    |      Iterates over points by querying the tree recursively, which\n    |      might take longer than simply externally iterating over a list of points\n    |      if they're known.\n    |\n    |      Parameters\n    |      ----------\n    |      theta : float, default = 0.2\n    |          If the distance between the point and the current internal node's\n    |          center of mass is smaller than :math:`\\theta` times the diameter\n    |          of the internal node's extent (box), the algorithm will treat\n    |          all children of this node as a giant point mass located at the\n    |          center of mass of this internal node.\n    |      ignore_zero_distance : bool, default = True\n    |          If the distance is zero, do or do not include this result in\n    |          the ``distance_counts``-list.\n    |\n    |      Returns\n    |      -------\n    |      distance_counts : list of 2-tuple of double, int\n    |          An item of this list is a distance-count pair,\n    |          the first entry of the tuple containing a distance\n    |          to the query point and the second entry being the\n    |          number of points that lie at that approximate distance\n    |          to the query point, such that it will look like this\n    |\n    |          .. code:: python\n    |\n    |              [\n    |                  (0.2, 1),\n    |                  (0.1, 1),\n    |                  (1.5, 32),\n    |                  ...\n    |              ]\n    |\n    |  get_subtree(...)\n    |      get_subtree(self: _cQuadTree.QuadTree, arg0: int) -> _cQuadTree.QuadTree\n    |\n    |      Get subtree 0<=i<=3.\n    |\n    |  get_subtrees(...)\n    |      get_subtrees(self: _cQuadTree.QuadTree) -> List[_cQuadTree.QuadTree]\n    |\n    |      Get a list of all of this node's children that contain data.\n    |\n    |  is_leaf(...)\n    |      is_leaf(self: _cQuadTree.QuadTree) -> bool\n    |\n    |      Whether or not this node is a leaf.\n    |\n    |  ----------------------------------------------------------------------\n    |  Data descriptors defined here:\n    |\n    |  center_of_mass\n    |      Mass-weighted mean position of all points contained in this internal node.\n    |\n    |  current_data_quadrant\n    |      Quadrant of the parent geometry the data of this tree resides in.\n    |\n    |  geom\n    |      Extent of box this tree represents.\n    |\n    |  number_of_contained_points\n    |      Number of points contained in this internal node.\n    |\n    |  parent\n    |      The parent of this internal node.\n    |\n    |  this_id\n    |      Data index of the point contained in this leaf.\n    |\n    |  this_mass\n    |      Mass the point contained in this leaf.\n    |\n    |  this_pos\n    |      Position of the point contained in this leaf.\n    |\n    |  total_mass\n    |      Total mass of all points contained in this internal node.\n    |\n    |  total_mass_position\n    |      Sum of product of mass and position of all points contained in this internal node.\n    |\n\nExtent\n^^^^^^\n\n.. code:: python\n\n   class Extent(pybind11_builtins.pybind11_object)\n    |  A rectangular geometry.\n    |\n    |  Method resolution order:\n    |      Extent\n    |      pybind11_builtins.pybind11_object\n    |      builtins.object\n    |\n    |  Methods defined here:\n    |\n    |  __init__(...)\n    |      __init__(*args, **kwargs)\n    |      Overloaded function.\n    |\n    |      1. __init__(self: _cQuadTree.Extent) -> None\n    |\n    |      Initializes a zero-dimensional box.\n    |\n    |      2. __init__(self: _cQuadTree.Extent, left: float, bottom: float, width: float, height: float) -> None\n    |\n    |      Initialize with position of bottom left corner, as well as width and height.\n    |\n    |  __repr__(...)\n    |      __repr__(self: _cQuadTree.Extent) -> str\n    |\n    |      Get string representation of object\n    |\n    |  b(...)\n    |      b(self: _cQuadTree.Extent) -> float\n    |\n    |  bottom(...)\n    |      bottom(self: _cQuadTree.Extent) -> float\n    |\n    |  h(...)\n    |      h(self: _cQuadTree.Extent) -> float\n    |\n    |  height(...)\n    |      height(self: _cQuadTree.Extent) -> float\n    |\n    |  l(...)\n    |      l(self: _cQuadTree.Extent) -> float\n    |\n    |  left(...)\n    |      left(self: _cQuadTree.Extent) -> float\n    |\n    |  w(...)\n    |      w(self: _cQuadTree.Extent) -> float\n    |\n    |  width(...)\n    |      width(self: _cQuadTree.Extent) -> float\n\nPoint\n^^^^^\n\n.. code:: python\n\n   class Point(pybind11_builtins.pybind11_object)\n    |  Minimal 2D-vector implementation based on code by openFrameworks\n    |\n    |  Method resolution order:\n    |      Point\n    |      pybind11_builtins.pybind11_object\n    |      builtins.object\n    |\n    |  Methods defined here:\n    |\n    |  __init__(...)\n    |      __init__(*args, **kwargs)\n    |      Overloaded function.\n    |\n    |      1. __init__(self: _cQuadTree.Point) -> None\n    |\n    |      2. __init__(self: _cQuadTree.Point, x: float, y: float) -> None\n    |\n    |      Initialize with coordinates\n    |\n    |  __repr__(...)\n    |      __repr__(self: _cQuadTree.Point) -> str\n    |\n    |      Get string representation of object\n    |\n    |  length(...)\n    |      length(self: _cQuadTree.Point) -> float\n    |\n    |      Get the length of the vector\n    |\n    |  ----------------------------------------------------------------------\n    |  Data descriptors defined here:\n    |\n    |  x\n    |\n    |  y\n\nHistogram\n^^^^^^^^^\n\n.. code:: python\n\n   >>> from cQuadTree import histogram\n   >>> help(histogram)\n\n   histogram(data, counts, bin_edges, density=True)\n       Returns a histogram from distance count data\n       received from a tree.\n\n       Parameters\n       ==========\n       data : numpy.ndarray of float\n           Distances\n       counts : numpy.ndarray of int\n           Corresponding counts of distances in ``data``.\n       bin_edges : numpy.ndarray\n           Edges of bins for which the histogram should be computed\n       density : boolean, default = True\n           Whether or not to make the histogram a probability density\n\n       Returns\n       =======\n       hist : numpy.ndarray\n           Either count of data in bins, or pdf, will have length\n           ``len(bin_edges)-1``.\n       bin_edges : numpy.ndarray\n           The used bin edges\n\nGet points and boxes\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   >>> from cQuadTree.utils import get_points_and_boxes\n   >>> help(get_points_and_boxes)\n\n   get_points_and_boxes(quadtree)\n       Returns two lists, one filled with \"Extent\" objects\n       representing the boxes of the tree that are occupied,\n       the other one contains the points that are located at\n       the leaf nodes\n\n       Parameters\n       ==========\n       quadtree : :class:`_cQuadTree.QuadTree`\n           Self-explanatory, no?\n\n       Returns\n       =======\n       points : list of :class:`_cQuadTree.Point`\n           Points located at the leaves ot the tree\n       boxes : list of :class:`_cQuadTree.Extent`\n           The boxes that internal tree nodes represent\n\nPlot boxes\n~~~~~~~~~~\n\n.. code:: python\n\n   >>> from cQuadTree.plot import plot_box_tree\n   >>> help(plot_box_tree)\n\n   plot_box_tree(list_of_points, list_of_boxes, ax=None, box_kwargs={}, point_kwargs={})\n       Plot a graphical representation of the tree as boxes and points on a matplotlib.Axes.\n\n       Use with data obtained from :func:`cQuadTree.utils.get_points_and_boxes`.\n\nChangelog\n---------\n\nChanges are logged in a `separate\nfile <https://github.com/benmaier/cQuadTree/blob/main/CHANGELOG.md>`__.\n\nLicense\n-------\n\nThis project is licensed under the `MIT\nLicense <https://github.com/benmaier/cQuadTree/blob/main/LICENSE>`__.\nNote that this excludes any images/pictures/figures shown here or in the\ndocumentation.\n\nContributing\n------------\n\nIf you want to contribute to this project, please make sure to read the\n`code of\nconduct <https://github.com/benmaier/cQuadTree/blob/main/CODE_OF_CONDUCT.md>`__\nand the `contributing\nguidelines <https://github.com/benmaier/cQuadTree/blob/main/CONTRIBUTING.md>`__.\nIn case you're wondering about what to contribute, we're always\ncollecting ideas of what we want to implement next in the `outlook\nnotes <https://github.com/benmaier/cQuadTree/blob/main/OUTLOOK.md>`__.\n\n|Contributor Covenant|\n\nDev notes\n---------\n\nFork this repository, clone it, and install it in dev mode.\n\n.. code:: bash\n\n   git clone git@github.com:YOURUSERNAME/cQuadTree.git\n   make\n\nIf you want to upload to PyPI, first convert the new ``README.md`` to\n``README.rst``\n\n.. code:: bash\n\n   make readme\n\nIt will give you warnings about bad ``.rst``-syntax. Fix those errors in\n``README.rst``. Then wrap the whole thing\n\n.. code:: bash\n\n   make pypi\n\nIt will probably give you more warnings about ``.rst``-syntax. Fix those\nuntil the warnings disappear. Then do\n\n.. code:: bash\n\n   make upload\n\n.. |Contributor Covenant| image:: https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg\n   :target: code-of-conduct.md\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benmaier/cQuadTree",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cQuadTree",
    "package_url": "https://pypi.org/project/cQuadTree/",
    "platform": null,
    "project_url": "https://pypi.org/project/cQuadTree/",
    "project_urls": {
      "Bug Reports": "https://github.com/benmaier/cQuadTree/issues",
      "Contributing Statement": "https://github.com/benmaier/cQuadTree/blob/master/CONTRIBUTING.md",
      "Documentation": "https://github.com/benmaier/cQuadTree",
      "Homepage": "https://github.com/benmaier/cQuadTree",
      "PyPI": "https://pypi.org/project/cQuadTree/",
      "Source": "https://github.com/benmaier/cQuadTree/"
    },
    "release_url": "https://pypi.org/project/cQuadTree/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python API to a C++-implementation of a BarnesHutTree/QuadTree",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16020295,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb59588cbe9fd59b4bf17888f76db11a3010590949db1333ba12c3cc18ee7328",
          "md5": "3d55cc31e610ab8b35922fe12b0bf817",
          "sha256": "16e4f89771f3330d7b318bdb752884ad824d03de60e2bf6b7f105743a0b2f33a"
        },
        "downloads": -1,
        "filename": "cQuadTree-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d55cc31e610ab8b35922fe12b0bf817",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16231,
        "upload_time": "2022-12-07T12:38:20",
        "upload_time_iso_8601": "2022-12-07T12:38:20.568497Z",
        "url": "https://files.pythonhosted.org/packages/eb/59/588cbe9fd59b4bf17888f76db11a3010590949db1333ba12c3cc18ee7328/cQuadTree-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45b25f2b8697d90456199a36931cc961e5a00afc6a5deaedd572974b63c14fc7",
          "md5": "ff007f8395c562b767d9f428f352da82",
          "sha256": "68d593514cf4acbd2ea3c87dddd08bf7f73ff387723ef9df89565f963627c0e9"
        },
        "downloads": -1,
        "filename": "cQuadTree-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff007f8395c562b767d9f428f352da82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16231,
        "upload_time": "2022-12-07T12:42:01",
        "upload_time_iso_8601": "2022-12-07T12:42:01.100896Z",
        "url": "https://files.pythonhosted.org/packages/45/b2/5f2b8697d90456199a36931cc961e5a00afc6a5deaedd572974b63c14fc7/cQuadTree-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e8cdc39668f2bbae82ff82c7d988f542cddf5fc35bfd81934a73b961c23ab25",
          "md5": "94b8f160028230bef7cf36947d080ae8",
          "sha256": "b531cd25f89b9491b0bf62752568fbb384a92beacb015aa6956ce4a9b68ab54c"
        },
        "downloads": -1,
        "filename": "cQuadTree-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94b8f160028230bef7cf36947d080ae8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22364,
        "upload_time": "2022-12-07T12:44:43",
        "upload_time_iso_8601": "2022-12-07T12:44:43.810382Z",
        "url": "https://files.pythonhosted.org/packages/0e/8c/dc39668f2bbae82ff82c7d988f542cddf5fc35bfd81934a73b961c23ab25/cQuadTree-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e8cdc39668f2bbae82ff82c7d988f542cddf5fc35bfd81934a73b961c23ab25",
        "md5": "94b8f160028230bef7cf36947d080ae8",
        "sha256": "b531cd25f89b9491b0bf62752568fbb384a92beacb015aa6956ce4a9b68ab54c"
      },
      "downloads": -1,
      "filename": "cQuadTree-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "94b8f160028230bef7cf36947d080ae8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22364,
      "upload_time": "2022-12-07T12:44:43",
      "upload_time_iso_8601": "2022-12-07T12:44:43.810382Z",
      "url": "https://files.pythonhosted.org/packages/0e/8c/dc39668f2bbae82ff82c7d988f542cddf5fc35bfd81934a73b961c23ab25/cQuadTree-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}