{
  "info": {
    "author": "",
    "author_email": "Cerbeyra Dev Team <supporto@cerbeyra.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Welcome to Cerbeyra API Client’s documentation!\r\n\r\nThis library provides a high level interface for interacting with Cerbeyra’s APIs and retrieving cyber-threat’s\r\ninformation from them. Through such API’s, it is possible to get clues regarding vulnerability assessments, cyber\r\nfeeds, governance, threat intelligence and much more.\r\n\r\nTo use the Cerbeyra’s API you need to start with the creation of a CerbeyraApi object. IN order to do that you must have\r\naccess to your account's username and password. \r\n\r\nOnce a CerbeyraApi has been instantiated, you may start using the python object for requesting Cerbeyra’s resources and\r\ngetting responses over HTTP protocol. All the HTTP Cerbeyra’s responses are encapsulated in classes specifically\r\ndesigned to facilitate their manipulation.\r\n\r\n## Getting started:\r\n\r\nFirst install the package\r\n\r\n\r\n```shell\r\npython -m pip install cerbeyra-api\r\n# or\r\npip install cerbeyra-api\r\n```\r\n\r\n### Simple Usage\r\n\r\n```python\r\n# Usage as a Cerbeyra Client\r\nfrom cerbeyra import CerbeyraApi\r\n\r\nwith CerbeyraApi(username='my@email.it', password='my-password') as ca:\r\n    ci = ca.get_cerbeyra_index()\r\nprint(f\"Your Cerbeyra Index is {ci.index} ({ci.risk_level})\")\r\n\r\n# ouput:\r\n# Successfully connected to https://areaclienti.cerbeyra.com\r\n# Your Cerbeyra Index is B (medium)\r\n\r\n####################################################\r\n\r\n# Use as Ubiqum Client\r\nfrom cerbeyra import UbiqumApi\r\n\r\nwith UbiqumApi(username='my@email.it', password='my-password') as ca:\r\n    ci = ca.get_ubiqum_index()\r\nprint(f\"Your Ubiqum Index is {ci.index} ({ci.risk_level})\")\r\n\r\n# ouput:\r\n# Successfully connected to https://areaclienti.ubiqum.ch\r\n# Your Ubiqum Index is B (medium)\r\n```\r\n\r\n\r\n# API \r\n\r\n### get_cerbeyra_index(client_id: int = None) -> CerbeyraIndex\r\n\r\nReturns the *Cerbeyra Index* of the logged user.\r\n*For Partners Only:* you can specify the client_id to obtain the Cerbeyra Index of a specific client. \r\n\r\n```python\r\nclass CerbeyraIndex:\r\n    index: str\r\n    risk_level: str\r\n    explain: dict\r\n```\r\n\r\n#### get_ubiqum_index(client_id:int None) -> UbiqumIndex\r\n\r\nAs a Ubiqum Client, you can create a **UbiqumApi** instance to access the API at the proper endpoint\r\n\r\n\r\n\r\n### get_report_network(columns: list[str] = None, client_id: int = None) -> NetworkReport\r\n\r\nGets the list of every vulnerability detected on your account on every network host. \r\nEach vulnerability information (e.g., host, threat, solution, vulnerability description) is collected in a va_item.VAItem object as key-value pair.\r\nYou can select a list of columns using the Enum class : types.NetworkReportFields, otherwise the API will return a default set of column.\r\n\r\n*For Partners Only:* you can specify a client_id to obtain the information about one of your client.\r\n\r\n```python\r\nclass NetworkReport:\r\n    def iterate_entries(self) -> Generator[VAItem, Any, None]:\r\n        # provides a generator over report entries.\r\n    def group_by_threat(self) -> Dict[str, List[VAItem]]:\r\n        # groups report items that have the same threat level. \r\n    def get_distinct_hosts(self) -> Set[str]:\r\n        # gets the list of all scanned network hosts.\r\n    def count_by_threat(self) -> Dict[str, int]:\r\n        # counts the number of report items for each threat level.\r\n    def save_csv(self, path):\r\n        # saves the network report in a .csv file.\r\n    def save_xls(self, path):\r\n        # saves the network report in a .xls file\r\n\r\nclass VAItem(dict):\r\n    def get_field(self, name: str) -> str | None:\r\n        # gets a report item value based on its field name.\r\n\r\nclass NetworkReportFields(Enum):\r\n    asset = 'asset'\r\n    host = 'host'\r\n    hostname = 'hostname'\r\n    vulnerability = 'vulnerability'\r\n    description = 'description'\r\n    threat = 'threat'\r\n    solution = 'solution'\r\n    vuln_id = 'vuln_id'\r\n    last_detection = 'last_detection'\r\n    first_detection = 'first_detection'\r\n    protocol = 'protocol'\r\n    port = 'port'\r\n    cvss = 'cvss'\r\n    summary = 'summary'\r\n    insight = 'insight'\r\n    impact = 'impact'\r\n    affected = 'affected'\r\n    references = 'references'\r\n```\r\n\r\n### get_report_web(columns: list[str] = None, client_id: int = None) -> WebReport\r\n\r\nGets the list of every vulnerability detected on your account on every web host. \r\nEach vulnerability information (e.g., host, threat, solution, vulnerability description) is collected in a va_item.VAItem object as key-value pair.\r\nYou can select a list of columns using the Enum class : types.WebReportFields, otherwise the API will return a default set of column.\r\n\r\n*For Partners Only:* you can specify a client_id to obtain the information about one of your client.\r\n\r\n```python\r\nclass WebReport:\r\n    def iterate_entries(self) -> Generator[VAItem, Any, None]:\r\n        # provides a generator over report entries.\r\n    def group_by_threat(self) -> Dict[str, List[VAItem]]:\r\n        # groups report items that have the same threat level. \r\n    def get_distinct_hosts(self) -> Set[str]:\r\n        # gets the list of all scanned web hosts.\r\n    def get_distinct_urls(self) -> Set[str]:\r\n        # gets the list of all scanned web urls.\r\n    def count_by_threat(self) -> Dict[str, int]:\r\n        # counts the number of report items for each threat level. \r\n    def save_csv(self, path):\r\n        # saves the web report in a .csv file.\r\n    def save_xls(self, path):\r\n        # saves the web report in a .xls file\r\n\r\nclass VAItem(dict):\r\n   def get_field(self, name: str) -> str | None:\r\n     # gets a report item value based on its field name.\r\n\r\nclass WebReportFields(Enum):\r\n    asset = 'asset'\r\n    host = 'host'\r\n    hostname = 'hostname'\r\n    vulnerability = 'vulnerability'\r\n    description = 'description'\r\n    threat = 'threat'\r\n    solution = 'solution'\r\n    vuln_id = 'vuln_id'\r\n    last_detection = 'last_detection'\r\n    first_detection = 'first_detection'\r\n    other = 'other'\r\n    param = 'param'\r\n    attack = 'attack'\r\n    evidence = 'evidence'\r\n    response = 'response'\r\n    request = 'request',\r\n    family = 'family'\r\n    url = 'url'\r\n    method = 'method'\r\n```\r\n\r\n\r\n### get_all_clients() -> List[Client]\r\n\r\n*For Partners Only:* gets the list of all clients.\r\n\r\n```python\r\nclass Client:\r\n    client_id: int\r\n    name: str\r\n    surname: str\r\n    email: str\r\n    company: str\r\n    active: bool\r\n    expiration_date: str = None\r\n```\r\n\r\n### get_all_probes(status: str = None) -> List[Probe]\r\n\r\n*For Partners Only:* gets the list of all probes. \r\nYou can specify a status *(ALIVE, WARNING, DANGER)* to filter away the probes you are not interested in.\r\n\r\n```python\r\nclass Probe:\r\n    name: str\r\n    probe_id: str\r\n    status: IoTStatus\r\n    last_update: str\r\n    client: Client\r\n\r\nclass IoTStatus(Enum):\r\n    ALIVE = 'ALIVE'\r\n    WARNING = 'WARNING'\r\n    DANGER = 'DANGER'\r\n```\r\n\r\n### get_all_sensors(status: str = None) -> List[Sensor]\r\n\r\n*For Partners Only:* gets the list of all IoT sensors. \r\nYou can specify a status *(ALIVE, WARNING, DANGER)* to filter away the sensors you are not interested in.\r\n\r\n```python\r\nclass Sensor:\r\n    name: str\r\n    probe_gateway: str\r\n    status: IoTStatus\r\n    alarm: str\r\n    last_update: str\r\n    client: Client\r\n    thresholds: list = None\r\n\r\nclass IoTStatus(Enum):\r\n    ALIVE = 'ALIVE'\r\n    WARNING = 'WARNING'\r\n    DANGER = 'DANGER'\r\n```\r\n\r\n\r\n\r\n## A typical use case would be\r\n\r\n```python\r\nfrom cerbeyra import CerbeyraApi\r\nfrom cerbeyra.src.types import NetworkReportFields, WebReportFields\r\n\r\nusername = \"your_cerbeyra_username\"\r\npassword = \"your_cerbeyra_password\"\r\nnetwork_columns = [NetworkReportFields.host.value, NetworkReportFields.threat.value]\r\nwith CerbeyraApi(username=username, password=password) as cerbeyra_api:\r\n   clients = cerbeyra_api.get_all_clients()\r\n   for client in clients:\r\n       net_report = cerbeyra_api.get_report_network(columns=network_columns, client_id=client.client_id)\r\n       csv_path=f\"/path/to/report/cilent_{client.client_id}.csv\"\r\n       net_report.save_csv(csv_path)\r\n       # email_report_to(email=client.email, path=csv_path)\r\n```\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cerbeyra-api",
    "package_url": "https://pypi.org/project/cerbeyra-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/cerbeyra-api/",
    "project_urls": {
      "Homepage": "https://cerbeyra.com"
    },
    "release_url": "https://pypi.org/project/cerbeyra-api/1.0b0/",
    "requires_dist": [
      "openpyxl (>=3.0.10)",
      "requests (>=2.28.2)"
    ],
    "requires_python": ">=3.9",
    "summary": "The Ultimate Client for the Cerbeyra's API. Ubiqum's too.",
    "version": "1.0b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16682716,
  "releases": {
    "1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86205558ffa9f7bfe8f5fb00e699a3c4141daa7a95d1cb603225a3a7e81bfbb7",
          "md5": "2bfae2c60565dc7c389481677cd6d3c6",
          "sha256": "dd38419c4019849e35db5f4abaff99b4eab4cf6f319905f35983b79f692d4d7e"
        },
        "downloads": -1,
        "filename": "cerbeyra_api-1.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bfae2c60565dc7c389481677cd6d3c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 30321,
        "upload_time": "2023-02-03T14:50:32",
        "upload_time_iso_8601": "2023-02-03T14:50:32.857607Z",
        "url": "https://files.pythonhosted.org/packages/86/20/5558ffa9f7bfe8f5fb00e699a3c4141daa7a95d1cb603225a3a7e81bfbb7/cerbeyra_api-1.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "298c06f275edaad700a28bed627118e82488c1bff0d97dad8aac28238e055595",
          "md5": "83be9bd3d7366aaf561dba019f398d87",
          "sha256": "190bb5f0b54635d70b2a58a481823b8aeb7b3a51e0a209e5ed286fb0592d83a6"
        },
        "downloads": -1,
        "filename": "cerbeyra-api-1.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "83be9bd3d7366aaf561dba019f398d87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 27102,
        "upload_time": "2023-02-03T14:50:34",
        "upload_time_iso_8601": "2023-02-03T14:50:34.750677Z",
        "url": "https://files.pythonhosted.org/packages/29/8c/06f275edaad700a28bed627118e82488c1bff0d97dad8aac28238e055595/cerbeyra-api-1.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86205558ffa9f7bfe8f5fb00e699a3c4141daa7a95d1cb603225a3a7e81bfbb7",
        "md5": "2bfae2c60565dc7c389481677cd6d3c6",
        "sha256": "dd38419c4019849e35db5f4abaff99b4eab4cf6f319905f35983b79f692d4d7e"
      },
      "downloads": -1,
      "filename": "cerbeyra_api-1.0b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bfae2c60565dc7c389481677cd6d3c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 30321,
      "upload_time": "2023-02-03T14:50:32",
      "upload_time_iso_8601": "2023-02-03T14:50:32.857607Z",
      "url": "https://files.pythonhosted.org/packages/86/20/5558ffa9f7bfe8f5fb00e699a3c4141daa7a95d1cb603225a3a7e81bfbb7/cerbeyra_api-1.0b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "298c06f275edaad700a28bed627118e82488c1bff0d97dad8aac28238e055595",
        "md5": "83be9bd3d7366aaf561dba019f398d87",
        "sha256": "190bb5f0b54635d70b2a58a481823b8aeb7b3a51e0a209e5ed286fb0592d83a6"
      },
      "downloads": -1,
      "filename": "cerbeyra-api-1.0b0.tar.gz",
      "has_sig": false,
      "md5_digest": "83be9bd3d7366aaf561dba019f398d87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 27102,
      "upload_time": "2023-02-03T14:50:34",
      "upload_time_iso_8601": "2023-02-03T14:50:34.750677Z",
      "url": "https://files.pythonhosted.org/packages/29/8c/06f275edaad700a28bed627118e82488c1bff0d97dad8aac28238e055595/cerbeyra-api-1.0b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}