{
  "info": {
    "author": "suchoi",
    "author_email": "su.choi@niccompany.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# customized KoNLPy\n\n한국어 자연어처리를 할 수 있는 파이썬 패키지, KoNLPy의 customized version입니다. \n\ncustomized_KoNLPy는 확실히 알고 있는 단어들에 대해서는 라이브러리를 거치지 않고 주어진 어절을 아는 단어들로 토크나이징 / 품사판별을 하는 기능을 제공합니다. 이를 위해 template 기반 토크나이징을 수행합니다.\n\n    사전: {'아이오아이': 'Noun', '는': 'Josa'}\n    탬플릿: Noun + Josa\n\n위와 같은 단어 리스트와 탬플릿이 있다면 '아이오아이는' 이라는 어절은 [('아이오아이', 'Noun'), ('는', 'Josa')]로 분리됩니다.\n\n## Install\n\n    $ git clone https://github.com/lovit/customized_konlpy.git\n\n    $ pip install customized_konlpy\n\n### Requires\n\n- JPype >= 0.6.1\n- KoNLPy >= 0.4.4\n\n## Usage\n\n### Part of speech tagging\n\nKoNLPy와 동일하게 Twitter.pos(phrase)를 입력합니다. 각 어절별로 사용자 사전에 알려진 단어가 인식되면 customized_tagger로 어절을 분리하며, 사용자 사전에 알려지지 않은 단어로 구성된 어절은 트위터 형태소 분석기로 처리합니다. \n\n```python\ntwitter.pos('우리아이오아이는 이뻐요')\n```\n\n    [('우리', 'Noun'), ('아이오', 'Noun'), ('아이', 'Noun'), ('는', 'Josa'), ('이뻐', 'Adjective'), ('요', 'Eomi')] \n\n'아이오아이'가 알려진 단어가 아니었기 때문에 트위터 분석기에서 단어를 제대로 인식하지 못합니다. 아래의 사용자 사전으로 단어 추가를 한 뒤 동일한 작업을 수행하면 아래와 같은 결과를 얻을 수 있습니다. \n\n```python\ntwitter.pos('우리아이오아이는 이뻐요')\n``` \n\n    [('우리', 'Modifier'), ('아이오아이', 'Noun'), ('는', 'Josa'), ('이뻐', 'Adjective'), ('요', 'Eomi')]\n\n```python\ntwitter.pos('트와이스tt는 좋아요')\n```\n    [('트와이스', 'Noun'), ('tt', 'Noun'), ('는', 'Josa'), ('좋', 'Adjective'), ('아요', 'Eomi')]\n\n### Add words to dictioanry\n\nckonlpy.tag의 Twitter는 add_dictionary를 통하여 str 혹은 list of str 형식의 사용자 사전을 추가할 수 있습니다. \n\n```python\nfrom ckonlpy.tag import Twitter\n\ntwitter.add_dictionary('아이오아이', 'Noun')\ntwitter.add_dictionary(['트와이스', 'tt'], 'Noun')\n```\n\n트위터 한국어 분석기에서 이용하지 않는 품사 (단어 클래스)를 추가하고 싶을 경우에는 반드시 force=True로 설정해야 합니다. \n\n```python\ntwitter.add_dictionary('lovit', 'Name', force=True)\n```\n\n### Add template to customized tagger\n\n현재 사용중인 탬플릿 기반 토크나이저는 코드 사용 중 탬플릿을 추가할 수 있습니다. 현재 사용중인 탬플릿의 리스트는 아래처럼 확인할 수 있습니다. \n\n```python\ntwitter.template_tagger.templates\n```\n\n    [('Noun', 'Josa'), ('Modifier', 'Noun'), ('Modifier', 'Noun', 'Josa')]\n\n탬플릿은 tuple of str 형식으로 입력합니다. \n\n```python\ntwitter.template_tagger.add_a_template(('Noun', 'Noun', 'Josa'))\n```\n\n### Set templates tagger selector\n\nTemplates를 이용하여도 후보가 여러 개 나올 수 있습니다. 여러 개 후보 중에서 best 를 선택하는 함수를 직접 디자인 할 수 도 있습니다. 이처럼 몇 개의 점수 기준을 만들고, 각 기준의 weight를 부여하는 방식은 트위터 분석기에서 이용하는 방식인데, 직관적이고 튜닝 가능해서 매우 좋은 방식이라 생각합니다.\n\n```python\nmy_weights = [\n    ('num_nouns', -0.1),\n    ('num_words', -0.2),\n    ('no_noun', -1),\n    ('len_sum_of_nouns', 0.2)\n]\n\ndef my_evaluate_function(candidate):\n    num_nouns = len([word for word, pos, begin, e in candidate if pos == 'Noun'])\n    num_words = len(candidate)\n    has_no_nouns = (num_nouns == 0)\n    len_sum_of_nouns = 0 if has_no_nouns else sum(\n        (len(word) for word, pos, _, _ in candidate if pos == 'Noun'))\n\n    scores = (num_nouns, num_words, has_no_nouns, len_sum_of_nouns)\n    score = sum((score * weight for score, (_, weight) in zip(scores, my_weights)))\n    return score\n```\n\n위의 예제처럼 my_weights 와 my_evaluate_function 함수를 정의하여 twitter.set_evaluator()에 입력하면, 해당 함수 기준으로 best candidate를 선택합니다.\n\n```python\ntwitter.set_evaluator(my_weights, my_evaluate_function)\n```\n\n### Postprocessor\n\npasswords, stopwords, passtags, 단어 치환을 위한 후처리를 할 수 있습니다. \n\npasswords 에 등록된 단어, (단어, 품사)만 출력됩니다.\n\n```python\nfrom ckonlpy.tag import Postprocessor\n\npasswords = {'아이오아이', ('정말', 'Noun')}\npostprocessor = Postprocessor(twitter, passwords = passwords)\npostprocessor.pos('우리아이오아이는 정말 이뻐요')\n# [('아이오아이', 'Noun'), ('정말', 'Noun')]\n```\n\nstopwords 에 등록된 단어, (단어, 품사)는 출력되지 않습니다. \n\n```python\nstopwords = {'는'}\npostprocessor = Postprocessor(twitter, stopwords = stopwords)\npostprocessor.pos('우리아이오아이는 정말 이뻐요')\n# [('우리', 'Modifier'), ('아이오아이', 'Noun'), ('정말', 'Noun'), ('이뻐', 'Adjective'), ('요', 'Eomi')]\n```\n\n특정 품사를 지정하면, 해당 품사만 출력됩니다. \n\n```python\npasstags = {'Noun'}\npostprocessor = Postprocessor(twitter, passtags = passtags)\npostprocessor.pos('우리아이오아이는 정말 이뻐요')\n# [('아이오아이', 'Noun'), ('정말', 'Noun')]\n```\n\n치환할 단어, (단어, 품사)를 dict 형식으로 정의하면 tag 에서 단어가 치환되어 출력됩니다.\n\n```python\nreplace = {'아이오아이': '아이돌', ('이뻐', 'Adjective'): '예쁘다'}\npostprocessor = Postprocessor(twitter, replace = replace)\npostprocessor.pos('우리아이오아이는 정말 이뻐요')\n# [('우리', 'Modifier'), ('아이돌', 'Noun'), ('는', 'Josa'), ('정말', 'Noun'), ('예쁘다', 'Adjective'), ('요', 'Eomi')]\n```\n\n연속된 단어를 하나의 단어루 묶기 위해서 nested tuple 이나 tuple of str 형식의 ngram 을 입력할 수 있습니다. tuple of str 의 형식으로 입력된 ngram 은 Noun 으로 인식됩니다.\n\n```python\nngrams = [(('미스', '함무라비'), 'Noun'), ('바람', '의', '나라')]\npostprocessor = Postprocessor(twitter, ngrams = ngrams)\npostprocessor.pos('미스 함무라비는 재밌는 드라마입니다')\n# [('미스 - 함무라비', 'Noun'), ('는', 'Josa'), ('재밌는', 'Adjective'), ('드라마', 'Noun'), ('입니', 'Adjective'), ('다', 'Eomi')]\n```\n\n### Loading wordset\n\nutils 에는 stopwords, passwords, replace word pair 를 파일로 저장하였을 경우, 이를 손쉽게 불러오는 함수가 있습니다.\n\nload_wordset 은 set of str 혹은 set of tuple 을 return 합니다. 예시의 passwords.txt 의 내용은 아래와 같습니다. 단어의 품사는 한 칸 띄어쓰기로 구분합니다. stopwords.txt 도 동일한 포멧입니다.\n\n    아이오아이\n    아이오아이 Noun\n    공연\n\nload_wordset 을 이용하는 예시코드 입니다.\n\n```python\nfrom ckonlpy.utils import load_wordset\n\npasswords = load_wordset('./passwords.txt')\nprint(passwords) # {('아이오아이', 'Noun'), '아이오아이', '공연'}\n\nstopwords = load_wordset('./stopwords.txt')\nprint(stopwords) # {'은', '는', ('이', 'Josa')}\n```\n\n치환할 단어쌍은 tap 구분이 되어있습니다. 치환될 단어에 품사 태그가 있을 경우 한 칸 띄어쓰기로 구분합니다.\n\n    str\\tstr\n    str str\\tstr\n\n아래는 replacewords.txt 의 예시입니다.\n\n    아빠\t아버지\n    엄마 Noun\t어머니\n\nload_replace_wordpair 을 이용하는 예시코드 입니다.\n\n```python\nfrom ckonlpy.utils import load_replace_wordpair\n\nreplace = load_replace_wordpair('./replacewords.txt')\nprint(replace) # {'아빠': '아버지', ('엄마', 'Noun'): '어머니'}\n```\n\nngram 단어들의 각 단어는 한 칸 띄어쓰기로, ngram 의 품사는 tap 으로 구분되어 있습니다.\n\n    str str\n    str str\\tstr\n\n아래는 ngrams.txt 의 예시입니다.\n\n    바람 의 나라\n    미스 함무라비\tNoun\n\nload_ngram 을 이용하는 예시코드 입니다.\n\n```python\nfrom ckonlpy.utils import load_ngram\n\nngrams = load_ngram('./ngrams.txt')\nprint(ngrams) # [('바람', '의', '나라'), (('미스', '함무라비'), 'Noun')]\n```\n\n## 0.0.6+ vs 0.0.5x\n\n0.0.5x 에서의 변수와 함수의 이름, 변수의 타입 일부를 변경하였습니다.\n\n| 변경 전 | 변경 후 |\n| --- | --- |\n| ckonlpy.tag.Twitter._loaded_twitter_default_dictionary | ckonlpy.tag.Twitter.use_twitter_dictionary |\n| ckonlpy.tag.Twitter._dictionary | ckonlpy.tag.Twitter.dictionary |\n| ckonlpy.tag.Twitter._customized_tagger | ckonlpy.tag.Twitter.template_tagger |\n| ckonlpy.tag.Postprocessor.tag | ckonlpy.tag.Postprocessor.pos |\n| ckonlpy.custom_tag.SimpleSelector | ckonlpy.custom_tag.SimpleEvalator |\n| ckonlpy.custom_tag.SimpleSelector.score | ckonlpy.custom_tag.SimpleEvalator.evaluate |\n| ckonlpy.tag.Twitter.set_selector | ckonlpy.tag.AbstractTagger.set_evaluator |\n| ckonlpy.custom_tag.SimpleSelector.weight | ckonlpy.custom_tag.SimpleEvaluator.weight |\n\n| 변경 후 | 변경 이유 |\n| --- | --- |\n| ckonlpy.tag.Twitter.use_twitter_dictionary | konlpy.tag.Twitter 의 사전 사용 유무 |\n| ckonlpy.tag.Twitter.dictionary | public 으로 변환하였습니다 |\n| ckonlpy.tag.Twitter.template_tagger | Template 기반으로 작동하는 tagger 임을 명시하고, public 으로 변환하였습니다 |\n| ckonlpy.tag.Postprocessor.pos | 기본 tagger 의 결과를 후처리하는 기능이기 때문에 동일한 함수명으로 통일하였습니다 |\n| ckonlpy.custom_tag.SimpleEvalator | 클래스 이름을 Selector 에서 Evaluator 로 변경하였습니다 |\n| ckonlpy.custom_tag.SimpleEvalator.evaluate | 품사열 후보의 점수 계산 부분을 score --> evaluate 로 함수명을 변경하였습니다 |\n| ckonlpy.tag.AbstractTagger.set_evaluator | 품사열 후보의 점수 계산 함수를 설정하는 함수의 이름을 변경하였습니다. 해당 함수는 ckonlpy.tag.Twitter 에서 ckonlpy.tag.AbstractTagger 로 이동하였습니다 |\n| ckonlpy.custom_tag.SimpleEvaluator.weight | {str:float} 형식의 weight 를 [(str, float)] 형식으로 변경하였습니다 |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/whfh3900/ats_ckonlpy.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ats-ckonlpy",
    "package_url": "https://pypi.org/project/ats-ckonlpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/ats-ckonlpy/",
    "project_urls": {
      "Homepage": "https://github.com/whfh3900/ats_ckonlpy.git"
    },
    "release_url": "https://pypi.org/project/ats-ckonlpy/0.0.2/",
    "requires_dist": [
      "Jpype1 (>=0.6.1)",
      "konlpy (>=0.4.4)"
    ],
    "requires_python": "",
    "summary": "KoNLPy wrapping package",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15332665,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89cbe306aeaa423ca1ef404cbb8928f33d3eb9a12e3035a383ce1ce3a0e871ee",
          "md5": "47c94c24db8440a4001788ed97ceeefa",
          "sha256": "5c2b2eb9bc5ceeee66b658ed5d1bd3e5d56fd1f4461bf5513036ed8812a9814e"
        },
        "downloads": -1,
        "filename": "ats_ckonlpy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47c94c24db8440a4001788ed97ceeefa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1039989,
        "upload_time": "2022-10-07T09:13:08",
        "upload_time_iso_8601": "2022-10-07T09:13:08.597040Z",
        "url": "https://files.pythonhosted.org/packages/89/cb/e306aeaa423ca1ef404cbb8928f33d3eb9a12e3035a383ce1ce3a0e871ee/ats_ckonlpy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc28d16dd7f62ba4da26dcfd670684f907d8daaeecf8dbd3fecb5fa5f38a2195",
          "md5": "f5fe80d0bfab708e740d275a568e5c61",
          "sha256": "d078aa5cd1329ea0073ee9752d5e0fb455c702b5ed6a68e08936f2117a9a5f47"
        },
        "downloads": -1,
        "filename": "ats_ckonlpy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f5fe80d0bfab708e740d275a568e5c61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1037703,
        "upload_time": "2022-10-07T09:13:13",
        "upload_time_iso_8601": "2022-10-07T09:13:13.460178Z",
        "url": "https://files.pythonhosted.org/packages/bc/28/d16dd7f62ba4da26dcfd670684f907d8daaeecf8dbd3fecb5fa5f38a2195/ats_ckonlpy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89cbe306aeaa423ca1ef404cbb8928f33d3eb9a12e3035a383ce1ce3a0e871ee",
        "md5": "47c94c24db8440a4001788ed97ceeefa",
        "sha256": "5c2b2eb9bc5ceeee66b658ed5d1bd3e5d56fd1f4461bf5513036ed8812a9814e"
      },
      "downloads": -1,
      "filename": "ats_ckonlpy-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47c94c24db8440a4001788ed97ceeefa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1039989,
      "upload_time": "2022-10-07T09:13:08",
      "upload_time_iso_8601": "2022-10-07T09:13:08.597040Z",
      "url": "https://files.pythonhosted.org/packages/89/cb/e306aeaa423ca1ef404cbb8928f33d3eb9a12e3035a383ce1ce3a0e871ee/ats_ckonlpy-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc28d16dd7f62ba4da26dcfd670684f907d8daaeecf8dbd3fecb5fa5f38a2195",
        "md5": "f5fe80d0bfab708e740d275a568e5c61",
        "sha256": "d078aa5cd1329ea0073ee9752d5e0fb455c702b5ed6a68e08936f2117a9a5f47"
      },
      "downloads": -1,
      "filename": "ats_ckonlpy-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f5fe80d0bfab708e740d275a568e5c61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1037703,
      "upload_time": "2022-10-07T09:13:13",
      "upload_time_iso_8601": "2022-10-07T09:13:13.460178Z",
      "url": "https://files.pythonhosted.org/packages/bc/28/d16dd7f62ba4da26dcfd670684f907d8daaeecf8dbd3fecb5fa5f38a2195/ats_ckonlpy-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}