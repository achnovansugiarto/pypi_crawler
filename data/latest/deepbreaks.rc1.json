{
  "info": {
    "author": "Mahdi Baghbanzadeh",
    "author_email": "mbagh@gwu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# deepBreaks #\n![](https://github.com/omicsEye/deepbreaks/blob/master/img/fig1_overview.png?raw=True)\n---\n\n***deepBreaks*** , a computational method, aims to identify important\nchanges in association with the phenotype of interest\nusing multi-alignment sequencing data from a population.\n\n**Key features:**\n\n* **Generality:** *deepBreaks* is a new computational tool for identifying genomic regions and genetic variants\nsignificantly associated with phenotypes of interest.\n* **Validation:** A comprehensive evaluation of deepBreaks performance using synthetic \ndata generation with known ground truth for genotype-phenotype association testing.\n* **Interpretation:** Rather than checking all possible mutations (breaks), _deepBreaks_ prioritizes only statistically\n  promising candidate mutations.\n* **Elegance:** User-friendly, open-source software allowing for high-quality visualization\nand statistical tests. \n* **Optimization:** Since sequence data are often very high volume (next-generation DNA sequencing reads typically \nin the millions), all modules have been written and benchmarked for computing time.\n* **Documentation:** Open-source GitHub repository of code complete with tutorials and a wide range of\nreal-world applications.\n\n---\n**Citation:**\n\nMahdi Baghbanzadeh, Tyson Dawson, Bahar Sayoldin, Todd H. Oakley, Keith A. Crandall, Ali Rahnavard (2023).\n**_deepBreaks_: a machine learning tool for identifying and prioritizing genotype-phenotype associations**\n, https://github.com/omicsEye/deeBreaks/.\n\n---\n\n# deepBreaks user manual #\n\n## Contents ##\n\n* [Features](#features)\n* [deepBreaks](#deepBreaks)\n    * [Installation](#installation)\n      * [Windows Linux Mac](#Windows-Linux-Mac)\n      * [Apple M1/M2 MAC](#apple-m1m2-mac)\n* [Getting Started with deepBreaks](#getting-started-with-deepBreaks)\n    * [Test deepBreaks](#test-omeClust)\n    * [Options](#options) \n    * [Input](#input)\n    * [Output](#output)\n    * [Demo](#demo)\n    * [Tutorial](#tutorial)\n* [Applications](#applications)\n  * [*deepBreaks* identifies amino acids associated with color sensitivity](#opsin)\n  * [Novel insights of niche associations in the oral microbiome](#hmp)\n  * [*deepBreaks* reveals important SARS-CoV-2 regions associated with Alpha and Delta variants](#covid)\n  * [*deepBreaks* identifies HIV regions with potentially important functions](#hiv)\n* [Support](#support)\n------------------------------------------------------------------------------------------------------------------------------\n# Features #\n1. Generic software that can handle any kind of sequencing data and phenotypes\n2. One place to do all analysis and producing high-quality visualizations\n3. Optimized computation\n4. User-friendly software\n5. Provides a predictive power of most discriminative positions in a sequencing data\n# DeepBreaks #\n\n## Installation ##\n* First install *conda*  \nGo to the [Anaconda website](https://www.anaconda.com/) and download the latest version for your operating system.  \n* For Windows users: do not forget to add `conda` to your system `path`\n* Second is to check for conda availability  \nopen a terminal (or command line for Windows users) and run:\n```\nconda --version\n```\nit should out put something like:\n```\nconda 4.9.2\n```\nif not, you must make *conda* available to your system for further steps.\nif you have problems adding conda to PATH, you can find instructions\n[here](https://docs.anaconda.com/anaconda/user-guide/faq/).  \n\n### Windows Linux Mac ###\nIf you are using an **Apple M1/M2 MAC** please go to the [Apple M1/M2 MAC](#apple-m1m2-mac) for installation\ninstructions.  \nIf you have a working conda on your system, you can safely skip to step three.  \nIf you are using windows, please make sure you have both git and Microsoft Visual C++ 14.0 or greater installed.\ninstall [git](https://gitforwindows.org/)\n[Microsoft C++ build tools](https://visualstudio.microsoft.com/visual-cpp-build-tools/)\nIn case you face issues with this step, [this link](https://github.com/pycaret/pycaret/issues/1254) may help you.\n1) Create a new conda environment (let's call it deepBreaks_env) with the following command:\n```\nconda create --name deepBreaks_env python=3.9\n```\n2) Activate your conda environment:\n```commandline\nconda activate deepBreaks_env \n```\n3) Install *deepBreaks*:\ninstall with pip:\n```commandline\npip install deepBreaks\n```\nor you can directly install if from GitHub:\n```commandline\npython -m pip install git+https://github.com/omicsEye/deepbreaks\n```\n### Apple M1/M2 MAC ###\n1) Update/install Xcode Command Line Tools\n  ```commandline\n  xcode-select --install\n  ```\n2) Install [Brew](https://brew.sh/index_fr)\n  ```commandline\n  /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n  ```\n3) Install libraries for brew\n  ```commandline\n  brew install cmake libomp\n  ```\n4) Install miniforge\n  ```commandline\n  brew install miniforge\n  ```\n5) Close the current terminal and open a new terminal\n6) Create a new conda environment (let's call it deepBreaks_env) with the following command:\n  ```commandline\n  conda create --name deepBreaks_env python=3.9\n  ```\n7) Activate the conda environment\n  ```commandline\n  conda activate deepBreaks_env\n  ```\n8) Install packages from Conda\n  ```commandline\n  conda install lightgbm\n  pip install xgboost\n  ```\n9) Finally, install *deepBreaks*:\ninstall with pip:\n```commandline\npip install deepBreaks\n```\nor you can directly install if from GitHub:\n```commandline\npython -m pip install git+https://github.com/omicsEye/deepbreaks\n```\n-----------------------------------------------------------------------------------------------------------------------\n\n# Getting Started with deepBreaks #\n\n## Test deepBreaks ##\n\nTo test if deepBreaks is installed correctly, you may run the following command in the terminal:\n\n```#!cmd\ndeepBreaks -h\n```\nWhich yields deepBreaks command line options.\n```commandline\nusage: deepBreaks [-h] --seqfile SEQFILE --seqtype SEQTYPE --meta_data META_DATA --metavar\n                  METAVAR [--gap GAP] --anatype {reg,cl}\n                  [--distance_metric {correlation,hamming,jaccard,normalized_mutual_info_score,adjusted_mutual_info_score,adjusted_rand_score}]\n                  [--fraction FRACTION] [--redundant_threshold REDUNDANT_THRESHOLD]\n                  [--distance_threshold DISTANCE_THRESHOLD] [--top_models TOP_MODELS] [--plot]\n                  [--write]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --seqfile SEQFILE, -sf SEQFILE\n                        files contains the sequences\n  --seqtype SEQTYPE, -st SEQTYPE\n                        type of sequence: 'nu' for nucleotides or 'aa' for amino-acid\n  --meta_data META_DATA, -md META_DATA\n                        files contains the meta data\n  --metavar METAVAR, -mv METAVAR\n                        name of the meta var (response variable)\n  --gap GAP, -gp GAP    Threshold to drop positions that have GAPs above this proportion.\n                        Default value is 0.7 and it means that the positions that 70% or more\n                        GAPs will be dropped from the analysis.\n  --anatype {reg,cl}, -a {reg,cl}\n                        type of analysis\n  --distance_metric {correlation,hamming,jaccard,normalized_mutual_info_score,adjusted_mutual_info_score,adjusted_rand_score}, -dm {correlation,hamming,jaccard,normalized_mutual_info_score,adjusted_mutual_info_score,adjusted_rand_score}\n                        distance metric. Default is correlation.\n  --fraction FRACTION, -fr FRACTION\n                        fraction of main data to run\n  --redundant_threshold REDUNDANT_THRESHOLD, -rt REDUNDANT_THRESHOLD\n                        threshold for the p-value of the statistical tests to drop redundant\n                        features. Defaultvalue is 0.25\n  --distance_threshold DISTANCE_THRESHOLD, -dth DISTANCE_THRESHOLD\n                        threshold for the distance between positions to put them in clusters.\n                        features with distances <= than the threshold will be grouped together.\n                        Default values is 0.3\n  --top_models TOP_MODELS, -tm TOP_MODELS\n                        number of top models to consider for merging the results. Default value\n                        is 5\n  --plot                plot all the individual positions that are statistically\n                        significant.Depending on your data, this process may produce many\n                        plots.\n  --write               During reading the fasta file we delete the positions that have GAPs\n                        over a certain threshold that can be changed in the `gap_threshold`\n                        argumentin the `read_data` function. As this may change the whole FASTA\n                        file, you maywant to save the FASTA file after this cleaning step.\n```\n\n\n## Options ##\n\n```\n$ deepBreaks -h\n```\n## Input ##\n1. `--seqfile` or `-sf` PATH to a sequence data file\n2. `--seqtype` or `-st` sequence type, values are `amino-acid` and `nu` for nucleotides\n3. `--meta_data` or `-md` PATH to metadata file\n4. `--metavar` or `-mv` name of the meta variable\n5. `--anatype` or `-a` analysis type, options are `reg` for regression and `cl` for classification\n6. `--fraction` or `-fr` fraction of the main data (sequence positions) to run. it is optional, \nbut you can enter a value between 0 and 1 to sample from the main data set.\n7. `--redundant_threshold` or `-rt` threshold for the p-value of the statistical \ntests to drop redundant features. Default value is 0.25.\n8. `--distance_threshold` or `-dth` threshold for the distance between positions to put them in clusters. \nfeatures with distances <= than the threshold will be grouped together. Default values is 0.3.\n9. `--top_models` or `-tm` number of top models to consider for merging the results. Default value is 3\n10. `--plot` plot all the individual positions that are statistically significant. \nDepending on your data, this process may produce many plots.\n11. `--gap` or `-gp` Threshold to drop positions that have GAPs above this proportion. \nDefault value is 0.7, and it means that the positions that 70% or more GAPs will be dropped from the analysis.\n12. `--write` During reading the fasta file we delete the positions that have GAPs over a  certain threshold that can \nbe changed in the `gap_threshold` argument in the `read_data` function. As this may change the whole FASTA file,\nyou may want to save the FASTA file after this cleaning step.\n\n## Output ##  \n1. correlated positions. We group all the colinear positions together.\n2. models summary. list of models and their performance metrics.\n3. plot of the feature importance of the top models in *modelName_dpi.png* format.\n4. csv files of feature importance based on top models containing, feature, importance, relative importance, \ngroup of the position (we group all the colinear positions together)\n5. plots and csv file of average of feature importance of top models.\n6. box plot (regression) or stacked bar plot (classification) for top positions of each model.\n7. pickle files of the plots\n\n## Demo ##\n```commandline\ndeepBreaks -sf PATH_TO_SEQUENCE.FASTA -st aa -md PATH_TO_META_DATA.tsv -mv\n META_VARIABLE_NAME -a reg  -dth 0.15 --plot --write\n```\n\n## Tutorial ##\nMultiple detailed jupyter notebook of _deepBreaks_ implementation are available in the\n[examples](https://github.com/omicsEye/deepbreaks/tree/master/examples) and the\nrequired data for the examples are also available in the\n[data](https://github.com/omicsEye/deepbreaks/tree/master/data) directory.  \n\nFor the `deepBreaks.models.model_compare` function, these are the available models by default:\n* Regression:\n```python\nmodels = {\n            'rf': RandomForestRegressor(n_jobs=-1, random_state=123),\n            'Adaboost': AdaBoostRegressor(random_state=123),\n            'et': ExtraTreesRegressor(n_jobs=-1, random_state=123),\n            'gbc': GradientBoostingRegressor(random_state=123),\n            'dt': DecisionTreeRegressor(random_state=123),\n            'lr': LinearRegression(n_jobs=-1),\n            'Lasso': Lasso(random_state=123),\n            'LassoLars': LassoLars(random_state=123),\n            'BayesianRidge': BayesianRidge(),\n            'HubR': HuberRegressor(),\n            'xgb': XGBRegressor(n_jobs=-1, random_state=123),\n            'lgbm': LGBMRegressor(n_jobs=-1, random_state=123)\n        }\n```\n * Classification:\n```python\nmodels = {\n            'rf': RandomForestClassifier(n_jobs=-1, random_state=123),\n            'Adaboost': AdaBoostClassifier(random_state=123),\n            'et': ExtraTreesClassifier(n_jobs=-1, random_state=123),\n            'lg': LogisticRegression(n_jobs=-1, random_state=123),\n            'gbc': GradientBoostingClassifier(random_state=123),\n            'dt': DecisionTreeClassifier(random_state=123),\n            'xgb': XGBClassifier(n_jobs=-1, random_state=123),\n            'lgbm': LGBMClassifier(n_jobs=-1, random_state=123)\n        }\n```\nThe default metrics for evaluation are:\n* Regression:\n```python\nscores = {'R2': 'r2',\n          'MAE': 'neg_mean_absolute_error',\n          'MSE': 'neg_mean_squared_error',\n          'RMSE': 'neg_root_mean_squared_error',\n          'MAPE': 'neg_mean_absolute_percentage_error'\n          }\n```\n * Classification:\n```python\nscores = {'Accuracy': 'accuracy',\n          'AUC': 'roc_auc_ovr',\n          'F1': 'f1_macro',\n          'Recall': 'recall_macro',\n          'Precision': 'precision_macro'\n          }\n```\nTo get the ful list of available metrics, you can use:\n```python\nfrom sklearn import metrics\nprint(metrics.SCORERS.keys())\n```\nThe default search parameters for the models are:\n```python\nparams = {\n        'rf': {\n            'max_depth': [4, 6, 8],\n            'n_estimators': [500, 1000]\n        },\n        'Adaboost': {\n            'learning_rate': [0.01, 0.05],\n            'n_estimators': [50, 100]\n        },\n        'et': {\n            'max_depth': [4, 6, 8],\n            'n_estimators': [500, 1000]\n        },\n        'dt': {\n            'max_depth': [4, 6, 8]\n        },\n        'Lasso': {\n            'alpha': [0.5, 1, 3]\n        },\n        'LassoLars': {\n            'alpha': [0.5, 1, 3]\n        }\n    }\n```\n**Attention:** The names of models in the provided `dict` are the same with the names in the `dict` provided \nfor the `params`. If the name from the models `dict` does not match, the default `sklearn` parameters for that model\nis then used.  For example, `model_compare` uses the `xgboost` with default hyperparameters.  \n\nTo use the `deepBreaks.models.model_compare` function with default parameters:\n```python\nimport deepBreaks.models as ml\nana_type = 'reg'  # assume that we are running a regression analysis\ntrained_models = ml.model_compare(X_train, y_train, ana_type,\n                  cv=10, select_top=5,\n                  models=None, scores=None,\n                  params=None, sort_by=None,\n                  n_positions=None,\n                  grouped_features=None,\n                  report_dir='.')\n```\nTo use a new set of `models`, `params`, or `metrics` you can define them in a `dict`:\n```python\nimport deepBreaks.models as ml\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\n        \nana_type = 'reg'  # assume that we are running a regression analysis\n\n# define a new set of models\nmodels = {'rf': RandomForestRegressor(n_jobs=-1, random_state=123),\n          'Adaboost': AdaBoostRegressor(random_state=123),\n          'et': ExtraTreesRegressor(n_jobs=-1, random_state=123)\n          }\n\n# define a new set of params.\nparams = {\n        'rf': {\n            'max_depth': [3, 5],\n            'n_estimators': [100]\n        },\n        'Adaboost': {\n            'learning_rate': [0.01, 0.05, 0.1],\n            'n_estimators': [50]\n        }\n    }\n\n'''\nSince we do not define a set of parameters for the model \"et\", it will fit with\ndefault parameters\n'''\n# change the set of metrics\nscores = {'R2': 'r2',\n          'MAE': 'neg_mean_absolute_error',\n          'MSE': 'neg_mean_squared_error'\n          }\n\ntrained_models = ml.model_compare(X_train, y_train, ana_type,\n                  cv=10, select_top=5,\n                  models=models, scores=scores,\n                  params=params, sort_by='MAE', # sort the models by \"MAE\" values\n                  n_positions=None,\n                  grouped_features=None,\n                  report_dir='.')\n```\n\n# Applications #\nHere we try to use the **_deepBreaks_** on different datasets and elaborate on the results.\n\n<h2 id=\"opsin\">\n<i>deepBreaks</i> identifies amino acids associated with color sensitivity\n</h2>\n\n![Opsins](https://github.com/omicsEye/deepbreaks/blob/master/img/lite_mar/figure.png?raw=True)  \n\nOpsins are genes involved in light sensitivity and vision, and when coupled with a light-reactive chromophore, the\nabsorbance of the resulting photopigment dictates physiological phenotypes like color sensitivity. We analyzed the \namino acid sequence of rod opsins because previously published mutagenesis work established mechanistic connections\nbetween 12 specific amino acid sites and phenotypes [Yokoyama et al. (2008)](https://doi.org/10.1073/pnas.0802426105). \nTherefore, we hypothesized that machine learning approaches could predict known associations between amino acid sites \nand absorbance phenotypes. We identified opsins expressed in\nrod cells of vertebrates (mainly marine fishes) with absorption spectra measurements (λmax, the wavelength with the\nhighest absorption). The dataset contains 175 samples of opsin sequences. We next applied deepBreaks on this\ndataset to find the most important sites contributing to the variations of λmax. \nThis [Jupyter Notebook](https://github.com/omicsEye/deepbreaks/blob/master/examples/continuous_phenotype.ipynb) \nillustrates the steps.\n\n\n<h2 id=\"hmp\">\nNovel insights of niche associations in the oral microbiome\n</h2>\n\n![hmp](https://github.com/omicsEye/deepbreaks/blob/master/img/hmp/hmp.png?raw=True)  \nMicrobial species tend to adapt at the genome level to the niche in which they live. We hypothesize \nthat genes with essential functions change based on where microbial species live. Here we use microbial strain \nrepresentatives from stool metagenomics data of healthy adults from the\n[Human Microbiome Project](https://doi.org/10.1038/nature11234). The input for deepBreaks consists of 1) an MSA file\nwith 1006 rows, each a representative strain of a specific microbial species, here Haemophilus parainfluenzae, with\n49839 lengths; and 2) labels for deepBreaks prediction are body sites from which samples were collected. \nThis [Jupyter Notebook](https://github.com/omicsEye/deepbreaks/blob/master/examples/discrete_phenotype.ipynb)\nillustrates the steps.\n\n\n<h2 id=\"covid\">\n<i>deepBreaks</i> reveals important SARS-CoV-2 regions associated with Alpha and Delta variants\n</h2>\n\n![sarscov2](https://github.com/omicsEye/deepbreaks/blob/master/img/sars_cov2/sarscov2.png?raw=True)\nVariants occur with new mutations in the virus genome. Most mutations in the SARS-CoV-2 genome do not affect the\nfunctioning of the virus. However, mutations in the spike protein of SARS-CoV-2, which binds to receptors on cells \nlining the inside of the human nose, may make the virus easier to spread or affect how well vaccines protect people. \nWe are going to study the mutations in the spike protein of the sequences of Alpha (B.1.1.7): the first variant of \nconcern described in the United Kingdom (UK) in late December 2020 and Delta (B.1.617.2): first reported in India in\nDecember 2020. We used the publicly available data from the [GSAID](https://gisaid.org/) and obtained 900 sequences\nof spike protein region of Alpha (450 samples) and Delta (450 samples) variants. Then, we used deepBreaks to analyze \nthe data and find the most important (predictive) positions in these sequences in terms of classifying the variants. \nThis\n[Jupyter Notebook](https://github.com/omicsEye/deepbreaks/blob/master/examples/discrete_phenotype_SARS_Cov2_variants.ipynb) \nillustrates the steps.\n\n\n<h2 id=\"hiv\">\n<i>deepBreaks</i> identifies HIV regions with potentially important functions\n</h2>\n\n![sarscov2](https://github.com/omicsEye/deepbreaks/blob/master/img/HIV/HIV3.png?raw=True)\nSubtypes of the human immunodeficiency virus type 1 (HIV-1) group M are different in the envelope (Env) glycoproteins \nof the virus. These parts of the virus are displayed on the surface of the virion and are targets for both neutralizing\nantibody and cell-mediated immune responses. The third hypervariable domain (V3) of HIV-1 gp120 is a cysteine-bounded\nloop structure usually composed of 105 nucleotides and labeled as the base (nu 1:26 and 75:105), stem\n(nu 27:44 and 54:74), and turn (nu 45:53) regions [Lynch et al. (2009)](https://doi.org/10.1089%2Faid.2008.0219) .\nAmong all of the hyper-variable regions in gp120 (V1-V5), V3 is playing the main role in the virus infectivity\n[Felsövályi et al. (2006)](https://doi.org/10.1089%2Faid.2006.22.703). \nHere we useare using deepBreaks to identify important regions in the V3 loop that are important in terms of associating\nthe V3 sequences V3 to subtypes B and C. We used the [Los Alamos HIV Database](www.hiv.lanl.gov) to gather the \nnucleotide sequences of the V3 loop of subtypes B and C. \nThis [Jupyter Notebook](https://github.com/omicsEye/deepbreaks/blob/master/examples/discrete_phenotype_HIV.ipynb) \nillustrates the steps.\n\n# Support #\n\n* Please submit your questions or issues with the software at\n[Issues tracker](https://github.com/omicsEye/deepBreaks/issues).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/omicsEye/deepBreaks",
    "keywords": "machine learning,genomics,sequencing data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deepBreaks",
    "package_url": "https://pypi.org/project/deepBreaks/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/deepBreaks/",
    "project_urls": {
      "Homepage": "http://github.com/omicsEye/deepBreaks"
    },
    "release_url": "https://pypi.org/project/deepBreaks/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "deepBreaks: a machine learning tool for identifying and prioritizing genotype-phenotype associations",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16636953,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0e125a61b982eb255052acab4deec86f112ba031cd85d814cf829240048edf2",
          "md5": "d4b511795cea2206f02852865f4bf0fc",
          "sha256": "650452f4dd628d4ca096c67e2d27f9852d66a86b8c2a66202099625190705982"
        },
        "downloads": -1,
        "filename": "deepBreaks-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4b511795cea2206f02852865f4bf0fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30650,
        "upload_time": "2023-01-31T16:39:20",
        "upload_time_iso_8601": "2023-01-31T16:39:20.727995Z",
        "url": "https://files.pythonhosted.org/packages/c0/e1/25a61b982eb255052acab4deec86f112ba031cd85d814cf829240048edf2/deepBreaks-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0e125a61b982eb255052acab4deec86f112ba031cd85d814cf829240048edf2",
        "md5": "d4b511795cea2206f02852865f4bf0fc",
        "sha256": "650452f4dd628d4ca096c67e2d27f9852d66a86b8c2a66202099625190705982"
      },
      "downloads": -1,
      "filename": "deepBreaks-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d4b511795cea2206f02852865f4bf0fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30650,
      "upload_time": "2023-01-31T16:39:20",
      "upload_time_iso_8601": "2023-01-31T16:39:20.727995Z",
      "url": "https://files.pythonhosted.org/packages/c0/e1/25a61b982eb255052acab4deec86f112ba031cd85d814cf829240048edf2/deepBreaks-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}