{
  "info": {
    "author": "Olivier Vincent",
    "author_email": "ovinc.py@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# About\n\n**oclock** is a Python 3 package. Its main goal is to provide a simple way to create timed loops with constant time intervals and no drift. It also provides various other timing tools and a GUI time.\n\n### Timed loops\n\nNo drift, timed loops are based on the `Timer` class,\n- either using the `checkpt()` method at a location in a for/while loop acting as a reference point to maintain constant duration from one loop to the next,\n- or using the `@loop` or `@interactiveloop` decorators that use `Timer` and `checkpt()` in the background.\n\nThe timing (interval) and execution (pause/stop etc.) can be modified in real time thanks to cancellable sleeping times.\n\n### Other tools\n\n- `Event`: class mimicking `threading.Event()` but with much better sleeping time accuracy.\n- `Countdown`: a class that starts a GUI countdown timer.\n- `parse_time()` function: returns a `datetime.timedelta` from a time string (e.g. `':2:25'`).\n- `measure_time()` and `measure_duration()` functions: are context managers for measuring time and execution times / time uncertainty of encapsulated commands.\n- Note that the `Timer` class can also be used as a regular chronometer with its methods `pause()`, `resume()`, `stop()` etc.\n\n# Quick start\n\n## Install\n\n```bash\npip install oclock\n```\n\n## Timed Loops\n\nThe `Timer` class is mostly designed to create loops of constant duration without drift, while allowing immediate modification/cancellation (sleep time interruption) in threaded environments. It can also be used as a regular chronometer.\n\nBelow are some peudo-code quick-start examples. For complete, working examples, see:\n- *Examples.ipynb* notebook (https://github.com/ovinc/oclock/blob/master/Example.ipynb)\n- *example.py* script (https://github.com/ovinc/oclock/blob/master/example.py)\n\n\n### Constant-duration loops\n\nThe most basic use of the `Timer()` class in Python code to create a loop of constant duration is:\n```python\nfrom oclock import Timer\ntimer = Timer(interval=2)  # Loops will be of total duration 2 seconds\nwhile condition:\n    my_function()  # can be of any duration between 0 and 2 seconds\n    timer.checkpt()\n```\nThe `checkpt()` method waits the adequate amount of time to make the loop of constant duration, without drift (using a target regularly spaced in time); `condition` can include timer methods and attributes, e.g. `timer.elapsed_time < max_time`.\n\nNote that if *my_function()* takes longer to execute than the required time interval, the Timer class does not try to compensate the extra time by making the next loop shorter. It just aims at making the total duration of the next loop be the requested interval again (see *Behavior when interval is exceeded* section below).\n\nThe same behavior can be achieved using the `@loop` decorator:\n```python\nfrom oclock import loop\ntimer = Timer(interval=2)  # Loops will be of total duration 2 seconds\n@loop(timer)\ndef my_function():\n    ...\n```\nThen, calling `my_function()` will execute the contents of the function in a repeated manner.\n\nThe `@loop` execution exits automatically if the timer is stopped.\nThus, It is useful to include a condition in `my_function` to exit the loop when needed, e.g.\n```python\nif timer.elapsed_time > t_max:\n    timer.stop()\n```\n\n### Interactive modification/cancellation\n\nThe timer is also modifiable (change time interval) and cancellable in real time (i.e. even when the timer is in a `checkpt()` waiting phase). To do so, it must be accessed by another thread that runs concurrently. For example:\n\n```python\nfrom oclock import Timer\nfrom threading import Thread\n\ndef user_input(timer):\n    \"\"\"Threaded command line input to change time interval or exit timer.\"\"\"\n    while not timer.is_stopped:\n        a = input()\n        try:\n            dt = float(a)\n        except ValueError:  # immediately cancel timer & exit all loops/threads\n            timer.stop()\n        else:               # immediately change interval to input value\n            timer.interval = dt\n\ntimer = Timer(interval=2)\nThread(target=user_input, args=(exit_event, timer)).start()\n\nwhile not timer.is_stopped:\n    my_function()\n    timer.checkpt()\n```\nDuring operation, the `Timer` object can be paused, resumed, stopped and reset using the corresponding `Timer` methods (see *Regular Timer* paragraph below). The *oclock* module also provides a simple command line interface to create a timed loop for a function and interact with it dynamically using the `@interactiveloop` decorator:\n```python\nfrom oclock import interactiveloop\n@interactiveloop(interval=2)\ndef my_function():\n    ...\n```\nNow when `my_function()` is called, an interactive CLI thread starts at the same time where the user can pause/resume/reset/stop the timer in real time, change its interval, and print timing information.\n\n### Regular Timer\n\nAlthough not its main purpose, the `Timer` class can be used as a regular chronometer with the following methods (no need to be in a threaded environment, although the methods below whould work and be cancellable in a threaded environment):\n\n```python\nfrom oclock import Timer\n\n# The timer starts counting time immediately upon instantiation.\ntimer = Timer()\n\n# Temporarily pause, then resume timer\ntimer.pause()\ntimer.resume()\n\n# Stop and restart timer completely\ntimer.stop()\ntimer.reset()  # note: can be called without calling stop() first\n\n# At any time, the elapsed time and total pause duration can be accessed with\ntimer.elapsed_time\ntimer.pause_time\ntimer.total_time  # sum of the two other times\n```\n\n**Important Note**: Do not use the `checkpt()` method after a `pause()` call if not in a threaded environment, this will cause the program to be in a perpetual waiting state. In a threaded environment, call `resume()` to unpause.\n\n### Details\n\nSee *Timer Class details* section below for all methods, properties and attributes and the *Development* section below for accuracy information.\n\n\n## Event class\n\nThe `oclock.Event` class mimicks `threading.Event` (https://docs.python.org/3/library/threading.html#event-objects) but provides much better sleep time accuracy.\n\nAvailable methods are the same as for `threading.Event`:\n- `set()`\n- `clear()`\n- `is_set()`\n- `wait()`\n\n\nBelow are comments from Chris D. who originally posted the code for this class on StackOverflow (see *Contributors* at the end of this file):\n\n> Internally, it uses a combination of a time.sleep() loop and a busy loop for greatly increased precision. The sleep loop runs in a separate thread so that the blocking wait() call in the main thread can still be immediately interrupted. When the set() method is called, the sleep thread should terminate shortly afterwards. Also, in order to minimize CPU utilization, I made sure that the busy loop will never run for more than 3 milliseconds.\n\n\n## Countdown GUI\n\nA simple graphical countdown timer based on the `Timer` class. It can be used either as a python main program from a shell, or as a function in Python code or console.\n\n![](https://raw.githubusercontent.com/ovinc/oclock/master/media/countdown.gif)\n\nFrom a terminal:\n```bash\npython -m oclock 1:45:00   # start timer of duration 1 hour 45 minutes\npython -m oclock 1:45:     # exactly the same as above\npython -m oclock 00:02:00  # start 2-minute timer\npython -m oclock :2:       # exactly the same as above\npython -m oclock 00:00:05  # start 5-second timer\npython -m oclock ::5       # exactly the same as above\n```\n\nIn python:\n```python\nfrom oclock import Countdown\nCountdown('1:45:')         # start timer of duration 1 hour 45 minutes\n```\n(the inputs are of the same format as from the terminal, see above).\n\nWhen countdown is finished, 'Done' is displayed for 5 seconds in the GUI while the console displays *Countdown finished* and emits a sound. Then the time passed since the end of countdown is displayed as a negative value in red. The program stops when the GUI window is closed.\n\n## Parse time function\n\nThe `parse_time()` function is used in the argument parsing of the countdown GUI from a terminal (see above). It transforms a string in the form `'h:m:s'` into a `datetime.timedelta` object. Inputs of the form e.g. `'::5'` or `:2:`, `'3:30:'` are acceptable for 5 seconds, 2 minutes, and 3.5 hours, respectively.\n```python\n>>> parse_time(':2:30')\ndatetime.timedelta(seconds=150)\n```\n\n## Context managers to record timing of commands\n\nThe `measure_time()` function is a context manager that saves the timing info of the encapsulated commands. This can be e.g. used in scientific experiments to get the time and time uncertainty associated with a measurement.\n```python\nfrom oclock import measure_time, measure_duration\n\n# ----------------------------------------------------------------------------\n# Examples where one just wants to get timing info ---------------------------\n# ----------------------------------------------------------------------------\n\nwith measure_time() as timing:\n    my_function()\nprint(timing)\n\n# Out: {'time (unix)': 1604780958.0705943, 'dt (s)': 0.6218999624252319}\n\n# (dt (s) is half the total duration. To get the total duration instead, do:)\n\nwith measure_duration() as duration:\n    my_function()\nprint(duration)\n\n# Out: {'duration (s)': 1.1689763555421325}\n\n# ----------------------------------------------------------------------------\n# Example where the timing info is directly added to a data dictionary -------\n# ----------------------------------------------------------------------------\n\nwith measure_time() as data:\n    measurement = my_function()  # returns e.g. 3.618\n    data['measurement'] = measurement\nprint(data)\n\n# Out: {'measurement': 3.618,\n#       'time (unix)': 1604780958.0705943,\n#       'dt (s)': 0.6218999624252319}\n```\n\n\n# Timer Class details\n\n## Instantiation\n\n```python\nfrom oclock import Timer\ntimer = Timer(interval=1, name='Timer', warnings=False, precise=False)\n```\n\nParameters:\n- `interval` (float): timer interval in seconds\n- `name` (str): optional name for description purposes (repr and warnings)\n- `warnings` (bool): If True, prints warning when time interval exceeded\n- `precise` (bool) if True, increase time precision (useful for Windows)\n\n*Note:* The `precise=True` option uses a custom `Event` class to replace `threading.Event`, originally written by Chris D. (see below).\n\n## Methods\n\n```python\ntimer.checkpt()  # Reference point for constant-duration loops, see above\n\ntimer.pause()    # Immediately pause timer and put checkpt() in waiting phase\ntimer.resume()   # Restart the elapsed time counter and unlock checkpt()\n\ntimer.stop()     # Stop counting time and exit checkpt()\ntimer.reset()    # Stop and restart timer immediately\n```\n\n## Properties (settable)\n\n```python\ntimer.interval       # get interval (in s)\ntimer.interval += 1  # increase interval by 1 second\ntimer.interval = 10  # set interval to 10 seconds.\n\ntimer.warnings          # get current status of warnings\ntimer.warnings = True   # activate warnings if time between checkpts too short\n\ntimer.name                      # optional name (for repr and warnings)\ntimer.name = 'Countdown timer'  # (can also be set during instantiation)\n```\n\n## Attributes (read-only)\n\n```python\n# Most useful attributes\ntimer.elapsed_time  # Time in seconds since init or last reset\ntimer.pause_time    # total time (in s) the timer has been paused.\ntimer.total_time    # Sum of the last two\n```\n\n## Background attributes and methods\n(mostly for development)\n```python\ntimer.now()                 # Reference time used by all methods\ntimer.start_time            # Ref. time corresponding to start/reset of timer\ntimer.next_checkpt_release  # Ref. time at which next checkpt waittime is over\ntimer.interval_exceeded     # (bool) True if loop contents take longer to execute than requested interval\n```\n\n## Notes\n\n- As mentioned previously, methods (and interval setting) take effect immediately, even if the timer is in a waiting phase.\n\n- After calling `pause()`, the `checkpt()` command blocks until `resume()` is called, however in the current version after `stop()` the `checkpt()` becomes non-blocking (equivalent to a `pass`), so that all following lines will be executed immediately and without any waiting time (i.e. as fast as possible if within a loop), until `timer.reset()` is called again. This means that it is useful to pin the condition of the loop to the stopping of the timer (see examples).\n\n\n## Timer accuracy\n\nSee *performance.py* file of the module for functions to test the behavior and accuracy of the timer. In particular:\n```python\nfrom oclock.performance import performance_test\nperformance_test(dt=0.01, nloops=1000, fmax=0.99, plot=True, warnings=False, precise=True)\n```\ntests the timing on 1000 loops of requested duration 0.01 second (10ms), using within the loop a function sleeping for a random amount of time between 0 and 0.99 dt (with `plot=True` option to see the results on a *matplotlib* graph, and `warnings=False` to not have a printed warning when the execution time of the nested commands exceed the target duration of the loop); `precise=True` uses the timer in precise mode.\n\nThe *AccuracyTests.md* file gathers some accuracy results in Unix and Windows environments. In summary:\n\n- with **Unix**, time fluctuations are < 0.5 ms with the regular timer, and on the order of 0.01 ms (standard deviation) with the precise timer\n\n- with **Windows**, the regular timer fails quickly as frame rate is increased, due to fluctuations in the ~ 10 ms range. However the precise timer performs even better than in Unix, with fluctuations of less than 0.01 ms (standard deviation).\n\n\n## Behavior when interval is exceeded\n\nAs explained above, it the contents of the loop take longer to execute than the requested time interval, the Timer simply moves on to the next loop but does not try to compensate for the extra time by making the next loop shorter:\n\n![](https://raw.githubusercontent.com/ovinc/oclock/master/media/img/timer_interval_exceeded.png)\n\n\n\n# Development\n\nInstall the package by cloning the GitHub repo (https://github.com/ovinc/oclock.git) and install in editable mode from the root of the repo:\n```\npip install -e .\n```\n\n## Testing\n\nPackage requirements to run the tests:\n- pytest\n- numpy\n\nGeneral testing is done with *pytest* (from the root of the repository):\n```bash\npytest\n```\n(**Note**: close the interactive countdown window at the end of the pytest run to finish the test.)\n\nAdditional testing of interactive command line for real-time timer control can be done by running the example file from the root of the repository.\n```bash\npython -m example\n```\n\nSee also *Accuracy Test* paragraph above to run performance tests for constant-duration loops with the `Timer` class.\n\n## Contributing\n\nIssues and Pull requests must be submitted on GitHub (https://github.com/ovinc/oclock) with commits (preferably squashed into a single commit) in branch *authors*.\n\nVersion number is automatically extracted from git tag using *setuptools_scm*. Git tags are added by the repo's maintainer.\n\n# Requirements\n\nPython 3.x\n\n(Tests only made from python 3.5 to python 3.9 included)\n\n\n# Author\n\nOlivier Vincent\n\n(ovinc.py@gmail.com)\n\n# Contributors\n\nThe `oclock.Event` class was originally written by Chris D.\n\n(https://stackoverflow.com/questions/48984512/making-a-timer-timeout-inaccuracy-of-threading-event-wait-python-3-6)\n\n\n# License\n\nGNU GPLv3, see *LICENSE* file\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ovinc/oclock",
    "keywords": "timing,loops,constant duration,cancellable,modifiable,countdown,context manager,gui",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oclock",
    "package_url": "https://pypi.org/project/oclock/",
    "platform": "",
    "project_url": "https://pypi.org/project/oclock/",
    "project_urls": {
      "Homepage": "https://github.com/ovinc/oclock"
    },
    "release_url": "https://pypi.org/project/oclock/1.3.0/",
    "requires_dist": [
      "importlib-metadata"
    ],
    "requires_python": ">=3.5",
    "summary": "Tools for timed, no-drift loops of constant duration, and other misc. timing tools (GUI countdown, context managers etc.)",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9225507,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeb6220eeba2da1e8c9e206ba78a41e8e9177169c81b2be40b84ddbf710e33d6",
          "md5": "de0468c8cca2d4f68d7aaab84f6f47ea",
          "sha256": "5d34b0e43d3366ef2a3cafc0400367217122b0beb29af7360e46fcd4ee27ea02"
        },
        "downloads": -1,
        "filename": "oclock-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de0468c8cca2d4f68d7aaab84f6f47ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11551,
        "upload_time": "2020-12-31T13:13:21",
        "upload_time_iso_8601": "2020-12-31T13:13:21.676132Z",
        "url": "https://files.pythonhosted.org/packages/ee/b6/220eeba2da1e8c9e206ba78a41e8e9177169c81b2be40b84ddbf710e33d6/oclock-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21822062f0c7c6b9eb056d1c05d70aeeea43eb25a9cca116f5b6cd02eb9cc19f",
          "md5": "8492b38cbacef3d83b21d1e3f3892c06",
          "sha256": "d48c0c3a6b71987af30c563d919d81dd550b76836145dd7f00b55b98f0c8f744"
        },
        "downloads": -1,
        "filename": "oclock-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8492b38cbacef3d83b21d1e3f3892c06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14662,
        "upload_time": "2020-12-31T13:13:23",
        "upload_time_iso_8601": "2020-12-31T13:13:23.063164Z",
        "url": "https://files.pythonhosted.org/packages/21/82/2062f0c7c6b9eb056d1c05d70aeeea43eb25a9cca116f5b6cd02eb9cc19f/oclock-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b0874127c32f3ea1d6d7c00637f18732d274e093e99518d9dfae528b3a7205e",
          "md5": "bf28c1f60fbb87180fa407ccf5ccfac7",
          "sha256": "19104c23fdf6c1bca19ad9ee5572a25f12d7be79851e392c654b8da7a4d4cf53"
        },
        "downloads": -1,
        "filename": "oclock-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf28c1f60fbb87180fa407ccf5ccfac7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12042,
        "upload_time": "2021-01-01T14:10:58",
        "upload_time_iso_8601": "2021-01-01T14:10:58.131110Z",
        "url": "https://files.pythonhosted.org/packages/7b/08/74127c32f3ea1d6d7c00637f18732d274e093e99518d9dfae528b3a7205e/oclock-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71f4ecd0d3b437f303a1d09702467c0e6b2f359d063f0c89d4b131b510c80568",
          "md5": "cc377331de217b7fc2cd24e844b6a1af",
          "sha256": "12b2cdd18671039530a242e3e07ca5edf77887fb173d5c59a3a4f2c247ab9f22"
        },
        "downloads": -1,
        "filename": "oclock-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc377331de217b7fc2cd24e844b6a1af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15544,
        "upload_time": "2021-01-01T14:11:00",
        "upload_time_iso_8601": "2021-01-01T14:11:00.010654Z",
        "url": "https://files.pythonhosted.org/packages/71/f4/ecd0d3b437f303a1d09702467c0e6b2f359d063f0c89d4b131b510c80568/oclock-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4efa1ceefe1249a0ea5d88e632b310ff9a93246e156dcad3fe2fef1d59527b5",
          "md5": "576e8ef0a6f6ee2bf87ba6c63f7f3ee0",
          "sha256": "ce4eee03460e41eeccd9d91edd41760bd1623d238719568e5e3292893c505382"
        },
        "downloads": -1,
        "filename": "oclock-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "576e8ef0a6f6ee2bf87ba6c63f7f3ee0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 16033,
        "upload_time": "2021-01-06T10:38:30",
        "upload_time_iso_8601": "2021-01-06T10:38:30.578239Z",
        "url": "https://files.pythonhosted.org/packages/c4/ef/a1ceefe1249a0ea5d88e632b310ff9a93246e156dcad3fe2fef1d59527b5/oclock-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c848253e4d8861e62394359bd77a685052dbacd57b80e0277ea83e134c510d3e",
          "md5": "6973d7f761cd4df5a9e334fa8ae29cc9",
          "sha256": "bb822fa57aaa7221fadf6825497cc0a9e41c3946cdd40c85ec4acccee5582ee4"
        },
        "downloads": -1,
        "filename": "oclock-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6973d7f761cd4df5a9e334fa8ae29cc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 509642,
        "upload_time": "2021-01-06T10:40:03",
        "upload_time_iso_8601": "2021-01-06T10:40:03.876502Z",
        "url": "https://files.pythonhosted.org/packages/c8/48/253e4d8861e62394359bd77a685052dbacd57b80e0277ea83e134c510d3e/oclock-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab45fc843e22678011b8f1d93b72662041eea62a58448c8d6e060cc526199cb9",
          "md5": "37885504fab11caddd3f37d3d23d6803",
          "sha256": "66adab8841b006bc5c7d59b978f9db6ceeeac64607d9a30d59cc9bba9bb41747"
        },
        "downloads": -1,
        "filename": "oclock-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37885504fab11caddd3f37d3d23d6803",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 16076,
        "upload_time": "2021-01-12T18:15:50",
        "upload_time_iso_8601": "2021-01-12T18:15:50.850906Z",
        "url": "https://files.pythonhosted.org/packages/ab/45/fc843e22678011b8f1d93b72662041eea62a58448c8d6e060cc526199cb9/oclock-1.2.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Python dependency info inadequate (should be 3.8+ due to importlib.metadata use)"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4974a91e0add5567cabf8fa87b5c0a25490f5d292ed61ae78494e533813df90",
          "md5": "4fab6e10c8d1300fdcef35a12a8acdeb",
          "sha256": "0db18483e3a645e9239739730edb2c42fb11981d221b810dda79e1a38d1bca97"
        },
        "downloads": -1,
        "filename": "oclock-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4fab6e10c8d1300fdcef35a12a8acdeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 509707,
        "upload_time": "2021-01-12T18:15:55",
        "upload_time_iso_8601": "2021-01-12T18:15:55.375045Z",
        "url": "https://files.pythonhosted.org/packages/a4/97/4a91e0add5567cabf8fa87b5c0a25490f5d292ed61ae78494e533813df90/oclock-1.2.1.tar.gz",
        "yanked": true,
        "yanked_reason": "Python dependency info inadequate (should be 3.8+ due to importlib.metadata use)"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fcc1fcc40af18ec7e43d8ac61ca5c732946b75360ee47b3806cf69f1df7ff46",
          "md5": "d00072aafbe0db7d0adcff2ca71cb734",
          "sha256": "c58bcb2ccfb42ea574b3967947a87e098dbf86bc8d20d914ada94bb294d765ce"
        },
        "downloads": -1,
        "filename": "oclock-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d00072aafbe0db7d0adcff2ca71cb734",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 16319,
        "upload_time": "2021-01-19T15:31:21",
        "upload_time_iso_8601": "2021-01-19T15:31:21.258785Z",
        "url": "https://files.pythonhosted.org/packages/9f/cc/1fcc40af18ec7e43d8ac61ca5c732946b75360ee47b3806cf69f1df7ff46/oclock-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "307b1de456e73876baeeff82078fb7db7960563b41b30550cb7e85cbae7573a5",
          "md5": "eaa18789760dc65b23ea496ef165d82e",
          "sha256": "272270aad971529cf8b6bd5e2ff2ce685f7025cf6e0619d63860860b1df27eda"
        },
        "downloads": -1,
        "filename": "oclock-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eaa18789760dc65b23ea496ef165d82e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 510217,
        "upload_time": "2021-01-19T15:31:27",
        "upload_time_iso_8601": "2021-01-19T15:31:27.566449Z",
        "url": "https://files.pythonhosted.org/packages/30/7b/1de456e73876baeeff82078fb7db7960563b41b30550cb7e85cbae7573a5/oclock-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efcdcd0ca084e3cc035799da1891303fbfafc3f7cd68cfe21e56388b06de3dca",
          "md5": "ad145a848dd8304804cd7fdc87a8bc2c",
          "sha256": "fb8c0ee31be0c2616a47db298334a7234c58067121e45109b84578b4a3f2876e"
        },
        "downloads": -1,
        "filename": "oclock-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad145a848dd8304804cd7fdc87a8bc2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 32058,
        "upload_time": "2021-01-25T17:00:42",
        "upload_time_iso_8601": "2021-01-25T17:00:42.616319Z",
        "url": "https://files.pythonhosted.org/packages/ef/cd/cd0ca084e3cc035799da1891303fbfafc3f7cd68cfe21e56388b06de3dca/oclock-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96b60788713dfb8206fa56fdeb9b855a434b1e9858d74e47bac054761d202774",
          "md5": "14413962013f4f472ca93ccfb2b3eed8",
          "sha256": "986ed9657fe06313dfd58c6a637c2b075803c69ec9ee4a3fbc644b4a29f1d2e9"
        },
        "downloads": -1,
        "filename": "oclock-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "14413962013f4f472ca93ccfb2b3eed8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 882830,
        "upload_time": "2021-01-25T17:00:46",
        "upload_time_iso_8601": "2021-01-25T17:00:46.968926Z",
        "url": "https://files.pythonhosted.org/packages/96/b6/0788713dfb8206fa56fdeb9b855a434b1e9858d74e47bac054761d202774/oclock-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efcdcd0ca084e3cc035799da1891303fbfafc3f7cd68cfe21e56388b06de3dca",
        "md5": "ad145a848dd8304804cd7fdc87a8bc2c",
        "sha256": "fb8c0ee31be0c2616a47db298334a7234c58067121e45109b84578b4a3f2876e"
      },
      "downloads": -1,
      "filename": "oclock-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad145a848dd8304804cd7fdc87a8bc2c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 32058,
      "upload_time": "2021-01-25T17:00:42",
      "upload_time_iso_8601": "2021-01-25T17:00:42.616319Z",
      "url": "https://files.pythonhosted.org/packages/ef/cd/cd0ca084e3cc035799da1891303fbfafc3f7cd68cfe21e56388b06de3dca/oclock-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96b60788713dfb8206fa56fdeb9b855a434b1e9858d74e47bac054761d202774",
        "md5": "14413962013f4f472ca93ccfb2b3eed8",
        "sha256": "986ed9657fe06313dfd58c6a637c2b075803c69ec9ee4a3fbc644b4a29f1d2e9"
      },
      "downloads": -1,
      "filename": "oclock-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "14413962013f4f472ca93ccfb2b3eed8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 882830,
      "upload_time": "2021-01-25T17:00:46",
      "upload_time_iso_8601": "2021-01-25T17:00:46.968926Z",
      "url": "https://files.pythonhosted.org/packages/96/b6/0788713dfb8206fa56fdeb9b855a434b1e9858d74e47bac054761d202774/oclock-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}