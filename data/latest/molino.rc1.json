{
  "info": {
    "author": "Benjamín Martínez Mateos",
    "author_email": "xaamin@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Molino\n\nMolino provides a presentation and transformation layer for complex data output, the like found in\nRESTful APIs. Think of this as a view layer for your Database.\n\nWhen building an API it is common for people to just grab stuff from the database and expose to the http client. This might be passable for \"trivial\" APIs but if they are in use by the public, or used by mobile applications then this will quickly lead to inconsistent output.\n\n## Goals\n\n* Create a protective \"barrier\" between source data and output, so schema changes do not affect users\n* Systematic type-casting of data, to avoid `foreach` ing through and casting everything\n* Include (a.k.a embedding, nesting or side-loading) relationships for complex data structures\n* Support the pagination of data results, for small and large data sets alike\n* Generally ease the subtle complexities of outputting data in a non-trivial API\n\n## Install\n\n\n``` bash\npip install molino\n```\n\n## Simple Example\n\nFor the sake of simplicity, this example has been put together as one simple\nroute function. In reality, you would create dedicated Transformer classes for\neach model. But we will get there, let's first have a look at this:\n\n```python\nfrom molino import Forge\n\nusers = User.all()\n\ndata = Forge.make() \\\n  .collection(users, lambda user: {\n    'firstname': user['first_name'],\n    'lastname': user['last_name']\n  }) \\\n  .json()\n```\n\nYou may notice a few things here: First, we can import `Forge`, and then call a method `collection` on it. This method is called a\n[resources](#resources) and we will cover it in the next section. We pass our\ndata to this method along with a [transformer](#transformers). In return, we get\nthe transformed data back.\n\n\n## Resources\n\nResources are objects that represent data and have knowledge of a “Transformer”.\nThere are two types of resources:\n\n- **Item** - A singular resource, probably one entry in a data store\n- **Collection** - A collection of resources\n\nThe resource accepts a dictionary object or an array as the first argument, representing\nthe data that should be transformed. The second argument is the transformer used\nfor this resource.\n\n## Transformers\n\nThe simplest transformer you can write is a callback transformer. Just return a dictionary\nobject that maps your data.\n\n```python\nusers = User.all()\n\ndata = Forge.make() \\\n  .collection(users, lambda user: {\n    'firstname': user['first_name'],\n    'lastname': user['last_name']\n  }) \\\n  .json()\n```\n\nBut let's be honest, this is not what you want. And we would agree with you, so\nlet's have a look at transformer classes.\n\n\n### Transformer Classes\n\nThe recommended way to use transformers is to create a transformer class. This\nallows the transformer to be easily reused in multiple places.\n\n#### Creating a Transformer\n\nCreate the class yourself, you just have to make sure that the class extends\n`TransformerAbstract` and implements at least a `transform` method.\n\n```python\nfrom molino import TransformerAbstract\n\nclass UserTransformer(TransformerAbstract):\n  def transform(self, model):\n    return {\n      id: model.id,\n      firstname: model.first_name,\n      lastname: model.last_name\n    }\n```\n\n*Note:* A transformer can also return a primitive type, like a string or a\nnumber, instead of an object. But keep in mind that including additional data,\nas covered in the next section, only work when an object is returned.\n\n\n#### Using the Transformer\n\nOnce the transformer class is defined, it can be passed to the resource as the\nsecond argument.\n\n```python\nusers = User.all()\n\ndata = Forge.make() \\\n  .collection(users, UserTransformer()) \\\n  .json()\n```\n\nYou have to pass a reference to the transformer class\ndirectly.\n\n*Note:* Passing the transformer as the second argument will terminate the fluent\ninterface. If you want to chain more methods after the call to `collection` or\n`item` you should only pass the first argument and then use the `with_transformer`\nmethod to define the transformer. See [Fluent Interface](#fluent-interface)\n\n#### Default Includes\n\nIncludes defined in the `default_includes` will always be included in the\nreturned data.\n\nYou have to specify the name of the include by returning an array of all\nincludes from the `default_includes`. Then you create an additional method\nfor each include, named like in the example: `include{Name}`.\n\nThe include method returns a new resource, that can either be an `item` or a\n`collection`.  See [Resources](#resources).\n\n```python\nclass BookTransformer(TransformerAbstract):\n  default_includes = [\n    'author'\n  ]\n\n  def transform(self, book):\n    return {\n      id: book.id,\n      title: book.title,\n      year: book.yr\n    }\n\n  def include_author(self, book)\n    return self.item(book.author, AuthorTransformer())\n\n```\n\n*Note:* If you want to use snake_case property names, you would still name the\ninclude function in camelCase, but list it under `default_includes` in snake_case.\n\n#### Available Include\n\nAn `available_includes` is almost the same as a `default_includes`, except it is not\nincluded by default.\n\n```python\nclass BookTransformer(TransformerAbstract):\n  available_includes = [\n    'author'\n  ]\n\n  def transform(self, book):\n    return {\n      id: book.id,\n      title: book.title,\n      year: book.yr\n    }\n\n  def include_author(self, book):\n    return self.item(book.relationships.author, AuthorTransformer())\n```\n\nTo include this resource Forge calls the `include_author()` method before transforming.\n\n```python\nreturn Forge.make() \\\n  .item(book, BookTransformer()) \\\n  .include('author') \\\n  .json()\n```\n\nThese includes can be nested with dot notation too, to include resources within\nother resources.\n\n```python\nreturn Forge.make() \\\n  .item(book, BookTransformer()) \\\n  .include('author,publisher.something') \\\n  .json()\n```\n\n## Eager Loading\n\nWhen you include additional models in your transformer be sure to eager load\nthese relations as this can quickly turn into n+1 database queries. If you have\ndefault_includes you should load them with your initial query. Forge is framework agnostic, so it will not try to load related data.\n\n## Metadata\n\nSometimes you need to add just a little bit of extra information about your\nmodel or response. For these situations, we have the `meta` method.\n\n```python\nusers = User.all()\n\nreturn Forge.make() \\\n  .collection(users, UserTransformer) \\\n  .meta({\n    access: 'limited'\n  }) \\\n  .json()\n```\n\nHow this data is added to the response is dependent on the\n[Serializer](#serializers).\n\n\n### DataSerializer\n\nThis serializer adds the `data` namespace to all of its items:\n\n```python\n# Item\n{\n  data: {\n    foo: 'bar',\n    included: {\n      data: {\n        name: 'test'\n      }\n    }\n  }\n}\n\n# Collection\n{\n  data: [\n    {\n      foo: bar\n    },\n    {...}\n  ]\n}\n```\n\nThe advantage over the `PlainSerializer` is that it does not conflict with meta\nand pagination:\n\n```python\n# Item with meta\n{\n  data: {\n    foo: 'bar'\n  },\n  meta: {\n    ...\n  }\n}\n\n# Collection\n{\n  data: [\n    {...}\n  ],\n  meta: {...},\n  pagination: {...}\n}\n```\n\n\n### SLDataSerializer\n\nThis serializer works similarly to the DataSerializer, but it only adds the\n`data` namespace on the first level.\n\n```python\n# Item\n{\n  data: {\n    foo: 'bar',\n    included: {\n      name: 'test'\n    }\n  }\n}\n```\n\n\n## Fluent Interface\n\nForge has a fluent interface for all the setter methods. This means you can\nchain method calls which makes the API more readable. The following methods are\navailable on `Forge.make()`\n(see below).\n\n**Chainable methods:**\n- `collection(data)`\n- `item(data)`\n- `null(data)`\n- `paginate(data)`\n- `meta(metadata)`\n- `include(includes)`\n- `transformer(transformer)`\n- `variant(variant)`\n- `serializer(serializer)`\n- `including(includes)` (alias for `include`)\n- `with_meta(metadata)` (alias for `meta`)\n- `with_transformer(transformer)` (alias for `transformer`)\n- `with_variant(variant)` (alias for `variant`)\n- `with_serializer(serializer)` (alias for `serializer`)\n\n**Terminating methods:**\n- `json()`\n\n## Contributing\n\nAll contibutions are welcome\n\n## License\n\nThe MIT License (MIT).\n\n## Credits\n\nSpecial thanks to the creator(s) of [Fractal], a PHP API transformer that was\nthe main inspiration for this package.\n\n[Fractal]: https://fractal.thephpleague.com\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xaamin/data-forge",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "molino",
    "package_url": "https://pypi.org/project/molino/",
    "platform": null,
    "project_url": "https://pypi.org/project/molino/",
    "project_urls": {
      "Homepage": "https://github.com/xaamin/data-forge"
    },
    "release_url": "https://pypi.org/project/molino/0.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Presentation and transformation layer for complex data output",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14705162,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f3aee7ffe001635f91ca9ee935ea7c9e6f96ecd8beca5c2966dedccb5f2940a",
          "md5": "89d33faf5f6e571774207795b6e5fdd4",
          "sha256": "1bb99540abe78d43731c0ea021e133d36e9e4c70ce8fa0ae4a38f6a97be6c300"
        },
        "downloads": -1,
        "filename": "molino-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89d33faf5f6e571774207795b6e5fdd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 20056,
        "upload_time": "2022-08-09T17:44:17",
        "upload_time_iso_8601": "2022-08-09T17:44:17.890473Z",
        "url": "https://files.pythonhosted.org/packages/5f/3a/ee7ffe001635f91ca9ee935ea7c9e6f96ecd8beca5c2966dedccb5f2940a/molino-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6de6bb60e74e8dcd5092a02c7454bcd6d597ee012f0dbb34b8ca561c19e5490",
          "md5": "c5775fb176c6e6378baf1079e55dc48e",
          "sha256": "533e3c9c3cfa942490f11552db2026e0c5ef0ba85707a13698d8dab6f92f01c0"
        },
        "downloads": -1,
        "filename": "molino-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c5775fb176c6e6378baf1079e55dc48e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 19175,
        "upload_time": "2022-08-09T17:44:20",
        "upload_time_iso_8601": "2022-08-09T17:44:20.791402Z",
        "url": "https://files.pythonhosted.org/packages/f6/de/6bb60e74e8dcd5092a02c7454bcd6d597ee012f0dbb34b8ca561c19e5490/molino-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f3aee7ffe001635f91ca9ee935ea7c9e6f96ecd8beca5c2966dedccb5f2940a",
        "md5": "89d33faf5f6e571774207795b6e5fdd4",
        "sha256": "1bb99540abe78d43731c0ea021e133d36e9e4c70ce8fa0ae4a38f6a97be6c300"
      },
      "downloads": -1,
      "filename": "molino-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89d33faf5f6e571774207795b6e5fdd4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 20056,
      "upload_time": "2022-08-09T17:44:17",
      "upload_time_iso_8601": "2022-08-09T17:44:17.890473Z",
      "url": "https://files.pythonhosted.org/packages/5f/3a/ee7ffe001635f91ca9ee935ea7c9e6f96ecd8beca5c2966dedccb5f2940a/molino-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6de6bb60e74e8dcd5092a02c7454bcd6d597ee012f0dbb34b8ca561c19e5490",
        "md5": "c5775fb176c6e6378baf1079e55dc48e",
        "sha256": "533e3c9c3cfa942490f11552db2026e0c5ef0ba85707a13698d8dab6f92f01c0"
      },
      "downloads": -1,
      "filename": "molino-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c5775fb176c6e6378baf1079e55dc48e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 19175,
      "upload_time": "2022-08-09T17:44:20",
      "upload_time_iso_8601": "2022-08-09T17:44:20.791402Z",
      "url": "https://files.pythonhosted.org/packages/f6/de/6bb60e74e8dcd5092a02c7454bcd6d597ee012f0dbb34b8ca561c19e5490/molino-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}