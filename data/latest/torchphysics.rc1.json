{
  "info": {
    "author": "Nick Heilenkötter, Tom Freudenberg",
    "author_email": "nick7@uni-bremen.de, tomfre@uni-bremen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python"
    ],
    "description": "==============\nTorchPhysics\n==============\n\nTorchPhysics is a Python library of (mesh-free) deep learning methods to solve differential equations.\nYou can use TorchPhysics e.g. to\n\n- solve ordinary and partial differential equations \n- train a neural network to approximate solutions for different parameters\n- solve inverse problems and interpolate external data\n\nThe following approaches are implemented using high-level concepts to make their usage as easy \nas possible:\n\n- physics-informed neural networks (PINN) [1]_\n- QRes [2]_\n- the Deep Ritz method [3]_\n- DeepONets [4]_ and Physics-Informed DeepONets [5]_\n\nWe aim to also include further implementations in the future.\n\n\nTorchPhysics is build upon the machine learning library PyTorch_. \n\n.. _PyTorch: https://pytorch.org/\n\nFeatures\n========\nThe Goal of this library is to create a basic framework that can be used in many\ndifferent applications and with different deep learning methods.\nTo this end, TorchPhysics aims at a:\n\n- modular and expandable structure\n- easy to understand code and clean documentation\n- intuitive and compact way to transfer the mathematical problem into code\n- reliable and well tested code basis \n\nSome built-in features are:\n\n- mesh free domain generation. With pre implemented domain types: \n  *Point, Interval, Parallelogram, Circle, Triangle and Sphere*\n- loading external created objects, thanks to a soft dependency on Trimesh_  \n  and Shapely_\n- creating complex domains with the boolean operators *Union*, *Cut* and *Intersection* \n  and higher dimensional objects over the Cartesian product\n- allowing interdependence of different domains, e.g. creating moving domains\n- different point sampling methods for every domain:\n  *RandomUniform, Grid, Gaussian, Latin hypercube, Adaptive* and some more for specific domains\n- different operators to easily define a differential equation\n- pre implemented fully connected neural network and easy implementation\n  of additional model structures \n- sequentially or parallel evaluation/training of different neural networks\n- normalization layers and adaptive weights [6]_ to speed up the training process\n- powerful and versatile training thanks to `PyTorch Lightning`_\n  \n  - many options for optimizers and learning rate control\n  - monitoring the loss of individual conditions while training \n\n\n.. _Trimesh: https://github.com/mikedh/trimesh\n.. _Shapely: https://github.com/shapely/shapely\n.. _`PyTorch Lightning`: https://www.pytorchlightning.ai/\n\n\nGetting Started\n===============\nTo learn the functionality and usage of TorchPhysics we recommend\nto have a look at the following sections:\n\n- `Tutorial: Understanding the structure of TorchPhysics`_\n- `Examples: Different applications with detailed explanations`_\n- Documentation_\n\n.. _`Tutorial: Understanding the structure of TorchPhysics`: https://torchphysics.readthedocs.io/en/latest/tutorial/tutorial_start.html\n.. _`Examples: Different applications with detailed explanations`: https://github.com/boschresearch/torchphysics/tree/main/examples\n.. _Documentation: https://torchphysics.readthedocs.io/en/latest/api/modules.html\n\n\nInstallation\n============\nTorchPhysics can be installed by using:\n\n.. code-block:: python\n\n  pip install git+https://github.com/boschresearch/torchphysics\n\nIf you want to change or add something to the code. You should first copy the repository and install\nit locally:\n\n.. code-block:: python\n\n  git clone https://github.com/boschresearch/torchphysics \n  pip install .\n\n\nAbout\n=====\nTorchPhysics was originally developed by Nick Heilenkötter and Tom Freudenberg, \nas part of a `seminar project`_ at the `University of Bremen`_, in cooperation with the `Robert Bosch GmbH`_. \nSpecial thanks belong to Felix Hildebrand, Uwe Iben, Daniel Christopher Kreuter and Johannes Mueller,\nat the Robert Bosch GmbH, for support and supervision while creating this library.\n\n.. _`seminar project`: http://www.math.uni-bremen.de/zetem/cms/detail.php?template=modellierungsseminar\n.. _`University of Bremen`: https://www.uni-bremen.de/en/\n.. _`Robert Bosch GmbH`: https://www.bosch.de/en/\n\nContribute\n==========\nIf you are missing a feature or detect a bug or unexpected behaviour while using this library, feel free to open\nan issue or a pull request in GitHub_ or contact the authors. Since we developed the code as a student project\nduring a seminar, we cannot guarantee every feature to work properly. However, we are happy about all contributions\nsince we aim to develop a reliable code basis and extend the library to include other approaches.\n\n.. _GitHub: https://github.com/boschresearch/torchphysics\n\nLicense\n=======\nTorchPhysics uses an Apache License, see the LICENSE_ file.\n\n.. _LICENSE: https://github.com/boschresearch/torchphysics/blob/main/LICENSE.txt\n\n\nBibliography\n============\n.. [1] Raissi, Perdikaris und Karniadakis, “Physics-informed neuralnetworks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations”, 2019.\n.. [2] Bu and Karpatne, “Quadratic Residual Networks: A New Class of Neural Networks for Solving Forward and Inverse Problems in Physics Involving PDEs”, 2021\n.. [3] E and Yu, \"The Deep Ritz method: A deep learning-based numerical algorithm for solving variational problems\", 2017\n.. [4] Lu, Jin and Karniadakis, “DeepONet: Learning nonlinear operators for identifying differential equations based on the universal approximation theorem of operators”, 2020\n.. [5] Wang, Wang and Perdikaris, “Learning the solution operator of parametric partial differential equations with physics-informed DeepOnets”, 2021\n.. [6] McClenny und Braga-Neto, “Self-Adaptive Physics-Informed NeuralNetworks using a Soft Attention Mechanism”, 2020\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boschresearch/torchphysics",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchphysics",
    "package_url": "https://pypi.org/project/torchphysics/",
    "platform": "any",
    "project_url": "https://pypi.org/project/torchphysics/",
    "project_urls": {
      "Changelog": "https://github.com/boschresearch/torchphysics/blob/main/CHANGELOG.rst",
      "Documentation": "https://torchphysics.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/boschresearch/torchphysics",
      "Source": "https://github.com/boschresearch/torchphysics"
    },
    "release_url": "https://pypi.org/project/torchphysics/1.0.0/",
    "requires_dist": [
      "torch (<2.0.0,>=1.7.1)",
      "pytorch-lightning (<2.0.0,>=1.3.4)",
      "numpy (>=1.20.2)",
      "matplotlib (>=3.0.0)",
      "scipy (>=1.6.3)",
      "importlib-metadata ; python_version < \"3.8\"",
      "trimesh (>=3.9.19) ; extra == 'all'",
      "shapely (>=1.7.1) ; extra == 'all'",
      "rtree (>=0.9.7) ; extra == 'all'",
      "networkx (>=2.5.1) ; extra == 'all'",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "PyTorch implementation of Deep Learning methods to solve differential equations",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17493916,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc757a86f4c670ab8c393a1f94b1c2aed040241b69a3206c6cf78967d0a059e7",
          "md5": "71cbb2f9ed90820f183160051d64b3b1",
          "sha256": "913ec0b0e7e7ed8d195c9248c0c107963b93a6464b427ee1814ec9e10413be9d"
        },
        "downloads": -1,
        "filename": "torchphysics-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71cbb2f9ed90820f183160051d64b3b1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 124201,
        "upload_time": "2023-03-29T13:03:18",
        "upload_time_iso_8601": "2023-03-29T13:03:18.032461Z",
        "url": "https://files.pythonhosted.org/packages/bc/75/7a86f4c670ab8c393a1f94b1c2aed040241b69a3206c6cf78967d0a059e7/torchphysics-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b44a79339e8d959c5b460c51fa4f600839be74f92869800a9a4af1d31ad2125",
          "md5": "34db8319612d909b756e0e8d66b74214",
          "sha256": "78ae281198aea982015e8925561f1d55a534722160c77181fcb5c124a3d83b2e"
        },
        "downloads": -1,
        "filename": "torchphysics-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34db8319612d909b756e0e8d66b74214",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7075628,
        "upload_time": "2023-03-29T13:03:21",
        "upload_time_iso_8601": "2023-03-29T13:03:21.659463Z",
        "url": "https://files.pythonhosted.org/packages/6b/44/a79339e8d959c5b460c51fa4f600839be74f92869800a9a4af1d31ad2125/torchphysics-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc757a86f4c670ab8c393a1f94b1c2aed040241b69a3206c6cf78967d0a059e7",
        "md5": "71cbb2f9ed90820f183160051d64b3b1",
        "sha256": "913ec0b0e7e7ed8d195c9248c0c107963b93a6464b427ee1814ec9e10413be9d"
      },
      "downloads": -1,
      "filename": "torchphysics-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "71cbb2f9ed90820f183160051d64b3b1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 124201,
      "upload_time": "2023-03-29T13:03:18",
      "upload_time_iso_8601": "2023-03-29T13:03:18.032461Z",
      "url": "https://files.pythonhosted.org/packages/bc/75/7a86f4c670ab8c393a1f94b1c2aed040241b69a3206c6cf78967d0a059e7/torchphysics-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b44a79339e8d959c5b460c51fa4f600839be74f92869800a9a4af1d31ad2125",
        "md5": "34db8319612d909b756e0e8d66b74214",
        "sha256": "78ae281198aea982015e8925561f1d55a534722160c77181fcb5c124a3d83b2e"
      },
      "downloads": -1,
      "filename": "torchphysics-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34db8319612d909b756e0e8d66b74214",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7075628,
      "upload_time": "2023-03-29T13:03:21",
      "upload_time_iso_8601": "2023-03-29T13:03:21.659463Z",
      "url": "https://files.pythonhosted.org/packages/6b/44/a79339e8d959c5b460c51fa4f600839be74f92869800a9a4af1d31ad2125/torchphysics-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}