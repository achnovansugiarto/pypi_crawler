{
  "info": {
    "author": "Tyler Christiansen",
    "author_email": "code@tylerc.me",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# capirca-xlate\n\n`capirca-xlate` is a library for writing network ACL policies in YAML\nformat and converting them to the [`capirca`][capirca] format for\nplatform-specific ACL generation.  It will take an ACL policy like this:\n\n```yaml\n---\n\nname: \"allowtointernet\"\ncomment: |\n  Denies all traffic to internal IPs except established tcp replies.\n  Also denies access to certain public allocations.\n\n  Ideal for some internal lab/testing types of subnets that are\n  not well trusted, but allowing internal users to access.\n\n  Apply to ingress interface (to filter traffic coming from lab)\ntargets:\n  - platform: cisconx\n    options:\n      - extended\naces:\n  - name: accept-dhcp comment: Optional - allow forwarding of DHCP requests.\n    destination_ports:\n      - DHCP\n    protocols:\n      - udp\n    action: accept\n  - name: accept-to-honestdns {\n    comment: Allow name resolution using honestdns.\n    destination_addresses:\n      - GOOGLE_DNS\n    destination_ports:\n      - DNS\n    protocols:\n      - udp\n    action: accept\n  - name: accept-tcp-replies\n    comment: Allow tcp replies to internal hosts.\n    destination_addresses:\n      - INTERNAL\n    protocols:\n      - tcp\n    options:\n      - tcp-established\n    action: accept\n  - name: deny-to-internal\n    comment: Deny access to rfc1918/internal.\n    destination_addresses:\n      - INTERNAL\n    action: deny\n  - name: deny-to-specific_hosts\n    comment: Deny access to specified public.\n    destination_addresses:\n      - WEB_SERVERS\n      - MAIL_SERVERS\n    action: deny\n  - name: default-permit\n    comment: Allow what's left.\n    action: accept\n```\n\nAnd transform it into the `capirca` `ply` format below:\n\n```\nheader {\n  comment:: \"Denies all traffic to internal IPs except established tcp replies.\"\n  comment:: \"Also denies access to certain public allocations.\"\n  \n  comment:: \"Ideal for some internal lab/testing types of subnets that are\"\n  comment:: \"not well trusted, but allowing internal users to access.\"\n  \n  comment:: \"Apply to ingress interface (to filter traffic coming from lab)\"\n  \n  target:: cisconx allowtointernet extended\n}\n\nterm accept-dhcp {\n  comment:: \"Optional - allow forwarding of DHCP requests.\"\n  destination-port:: DHCP\n  protocol:: udp\n  action:: accept\n}\nterm accept-to-honestdns { {\n  comment:: \"Allow name resolution using honestdns.\"\n  destination-address:: GOOGLE_DNS\n  destination-port:: DNS\n  protocol:: udp\n  action:: accept\n}\nterm accept-tcp-replies {\n  comment:: \"Allow tcp replies to internal hosts.\"\n  destination-address:: INTERNAL\n  protocol:: tcp\n  option:: tcp-established\n  action:: accept\n}\nterm deny-to-internal {\n  comment:: \"Deny access to rfc1918/internal.\"\n  destination-address:: INTERNAL\n  action:: deny\n}\nterm deny-to-specific_hosts {\n  comment:: \"Deny access to specified public.\"\n  destination-address:: WEB_SERVERS MAIL_SERVERS\n  action:: deny\n}\nterm default-permit {\n  comment:: \"Allow what's left.\"\n  action:: accept\n}\n```\n\n## Usage\n\nUsing `capirca_xlate` is straightforward.  There are two functions\nfor loading data and three functions for generating `ply`-formatted\npolicies/definitions.  The below is a complete example.\n\n```python\nfrom pathlib import Path\n\nimport capirca_xlate.xlate\n\nacl = capirca_xlate.xlate.load_acl(Path('example_acl.yml'))\ndefinitions = capirca_xlate.xlate.load_def(Path('example_def.yml'))\n\nprint(capirca_xlate.xlate.xlate_net(definitions))\nprint(capirca_xlate.xlate.xlate_svc(definitions))\nprint(capirca_xlate.xlate.xlate_acl(acl))\n```\n\nYou can look at the `acl_schema.yaml` and `definitions_schema.yaml`\nfiles in this repo to get a better sense of how to structure your data.\nThese schemas are updated when the code is updated.\n\n## Project State and Reasoning\n\nAt this time, all functionality should be considered **alpha**.  This\nis currently a library, not an end-user CLI tool.  It can be used to\ncreate an end-user CLI tool, but because policies can be arranged and\ndescribed in a wide variety of ways, the focus for now is on providing\nthe library to manage your own policies the way you want/need.\n\nThis library very heavily leverages types.  It does this to ensure\ndefinitions and policies will be rendered to something valid.  For\nexample, it will prevent you from generating the following:\n\n```\nDNS = 53/udp\nHTTP = 80/tcp\nALL = DNS\n      HTTP\n      SSH\n```\n\nThis is _technically_ valid syntax, but because there is no definition\nof `SSH`, `capirca` will ultimately fail to generate the ACL.\nAdditionally, IPv4 and IPv6 addresses must be valid network addresses in\nCIDR notation, because this is what `capirca` expects.  Other\nvalidations exist, too, such as ensuring you don't typo\n`tcp-established` as an `options`.  Finally, it is opinionated in the\nits data is structured.  The structure of the data is not a 1:1 mapping\nof `capirca`.  For example, in the `capirca` `ply` format, multiple\nreferences to addresses are simply separated by a blank space (` `).\nHowever, this library expects multiple addresses to be unique items in a\nlist.\n\nEverything in this library is exposed for the developer.  Althougth the\nprimary intent is to allow for translating between a YAML-based spec and\nthe official `ply` spec, the data is modeled with classes exposed in\nsuch a way that the original source of the data is largely irrelevant.\nFor example, you could write code that fetched the source data from a\nSQL data base, then created the necessary objects (`ACL` and\n`Definitions`) with the appropriate fields, then pass those objects to\nthe template rendering functions (`capirca_xlate.xlate.xlate_acl()`, \n`capirca_xlate.xlate.xlate_net()`, and\n`capirca_xlate.xlate.xlate_svc()`) and get the `ply`-formatted string\nback.\n\nThe `xlate_*` functions return the `capirca` `ply` format back as a\nstring.  They do not write to disk.  This is to enable flexibility for\ndevelopers to programmatically leverage tools such as `capirca_xlate`,\n`capirca`, and `nornir` or `netmiko` for full end-to-end ACL automation\nwithout needing to repeatedly read from and write to disk.\n\n## Feature Support\n\n`capirca` has a wide variety of options and features, some of which are\nplatform-specific.  `capirca_xlate` does not support all of these.  It\ncurrently supports common features and options, but not vendor- or\nplatform-specific features, such as `from-zone` and `to-zone`.\n\n## TODO\n\n* Add a license\n* Add tests\n* Add more examples\n* Show examples of non-YAML source data\n* Show examples of integrating with [`nornir`][nornir]\n\n[capirca]: https://github.com/google/capirca\n[nornir]: https://github.com/nornir-automation/nornir",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "capirca-xlate",
    "package_url": "https://pypi.org/project/capirca-xlate/",
    "platform": null,
    "project_url": "https://pypi.org/project/capirca-xlate/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/capirca-xlate/0.1.1/",
    "requires_dist": [
      "ruamel.yaml (>=0.17,<0.18)",
      "Jinja2 (>=3.1,<4.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17076352,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94e618f249e3fcfebbf5336194cbfddefd85206632c203086f6d8e8abdebcb8b",
          "md5": "70bb951778b7e92a2894f1ffffa8c692",
          "sha256": "c6742c64fafb60347c98a7215653173ca22b36f40294e04aa11e80d1cc91f0fa"
        },
        "downloads": -1,
        "filename": "capirca_xlate-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70bb951778b7e92a2894f1ffffa8c692",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 7078,
        "upload_time": "2023-02-28T01:56:27",
        "upload_time_iso_8601": "2023-02-28T01:56:27.975706Z",
        "url": "https://files.pythonhosted.org/packages/94/e6/18f249e3fcfebbf5336194cbfddefd85206632c203086f6d8e8abdebcb8b/capirca_xlate-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eda730967aa08ded7f296f43470f3096209aade9d4e059455ffca8e5cb1055c",
          "md5": "ae3e50b836ee27486931f76fad913116",
          "sha256": "d66d72a60fc2cb8e606ab5f31955a241d14d3903a6ff36b7ddfef20a4b6d9c91"
        },
        "downloads": -1,
        "filename": "capirca_xlate-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae3e50b836ee27486931f76fad913116",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 5975,
        "upload_time": "2023-02-28T01:56:29",
        "upload_time_iso_8601": "2023-02-28T01:56:29.319472Z",
        "url": "https://files.pythonhosted.org/packages/6e/da/730967aa08ded7f296f43470f3096209aade9d4e059455ffca8e5cb1055c/capirca_xlate-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94e618f249e3fcfebbf5336194cbfddefd85206632c203086f6d8e8abdebcb8b",
        "md5": "70bb951778b7e92a2894f1ffffa8c692",
        "sha256": "c6742c64fafb60347c98a7215653173ca22b36f40294e04aa11e80d1cc91f0fa"
      },
      "downloads": -1,
      "filename": "capirca_xlate-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70bb951778b7e92a2894f1ffffa8c692",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 7078,
      "upload_time": "2023-02-28T01:56:27",
      "upload_time_iso_8601": "2023-02-28T01:56:27.975706Z",
      "url": "https://files.pythonhosted.org/packages/94/e6/18f249e3fcfebbf5336194cbfddefd85206632c203086f6d8e8abdebcb8b/capirca_xlate-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6eda730967aa08ded7f296f43470f3096209aade9d4e059455ffca8e5cb1055c",
        "md5": "ae3e50b836ee27486931f76fad913116",
        "sha256": "d66d72a60fc2cb8e606ab5f31955a241d14d3903a6ff36b7ddfef20a4b6d9c91"
      },
      "downloads": -1,
      "filename": "capirca_xlate-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae3e50b836ee27486931f76fad913116",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 5975,
      "upload_time": "2023-02-28T01:56:29",
      "upload_time_iso_8601": "2023-02-28T01:56:29.319472Z",
      "url": "https://files.pythonhosted.org/packages/6e/da/730967aa08ded7f296f43470f3096209aade9d4e059455ffca8e5cb1055c/capirca_xlate-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}