{
  "info": {
    "author": "Red Balloon Security",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Topic :: Software Development"
    ],
    "description": "# leetconfig\n\n## Introduction\n\n`leetconfig` is a package for parsing and aggregating structured configs from multiple\nsources, including CLI, YAML, and environment variables. The general workflow is:\n\n1. Define the structure of the config, including detailed information about each option (such as\n   name, type, help text, etc.). Each option is a [`ConfigEntry`](#configentry), and a group of\n   these is a [`ConfigGroup`](#configgroup).\n2. Define an aggregator for the config, including what sources to look at (only parse CLI, parse CLI\n   and environment variables, parse only YAML, etc.). The aggregator is a\n   [`ConfigParser`](#configparser), and the sources are represented by\n   [`ConfigFormat`](#configformat-and-source).\n3. At runtime, extract structured config options from the specified sources.\n\n## `ConfigParser`\n\nThe `ConfigParser` is the top-level object that aggregates all of the options for an application,\nalong with information about where to find the values for those options. It also provides an entry\npoint to extract and parse all of the values.\n\n### `ConfigParser` Example\n\nLet's begin by saving the following code in `leetconfig_readme.py`.\n\n```python\nfrom leetconfig.parser import ConfigParser\n\nmy_app_parser = ConfigParser(\n    \"cool_application\",\n    \"a very cool application\",\n    sources=[],\n    groups=[],\n    entries=[],\n)\n\nmy_app_parser.extract()\n```\n\nThere are no config options yet, but we already have some functionality. If we run this script with\n`--help`, we see:\n\n```\n$  python3 leetconfig_readme.py --help\nusage: cool application [--help] [--show-config]\n\na very cool application\n\nConfiguration sources (ordered by priority):\n  CLI:\n    Parse config values from the command line arguments.\n\nConfiguration options:\n```\n\nThis confirms that we have not yet defined any config options. To add config options,\n[`ConfigEntry`](#configentry)s, [`ConfigGroup`](#configgroup)s, and/or\n[`ConfigNamespace`](#confignamespace)s must be defined.\n\n## `ConfigEntry`\n\nA `ConfigEntry` is the basic unit of this package. Each `ConfigEntry` defines a single config\noption. All config entries must have a parser (a [`ConfigEntryConverter`](#configentryconverter)\nimplementation), a help string, and at least one name. An entry may also have several other flags,\nlike `is_positional` or `is_required`. Default values and static lists of choices can also be set\nfor each entry.\n\nNote that if the name of a `ConfigEntry` contains any underscores `_`, these are converted to dashes\n`-` when parsing from the command line.\n\n### `ConfigEntryConverter`\n\nConfig options come in a wide variety of formats, so each config entry must define how to\ndeserialize its options from a raw string. This is done via the `ConfigEntryConverter`\nimplementation.\n\nA `ConfigEntryConverter` is a parser that deserializes an entry's value from string values, and vice\nversa. The raw string is parsed from the source (like CLI or YAML) for each config entry and then\nfed to the `ConfigEntryConverter` that is set as the `parser` for that respective config entry.\n\nIncluded in this package are many predefined converters such as `IntegerConfigEntryConverter`,\nor `EnumConfigEntryConverter`. Each expects the raw string to be of a\ncertain form, and each outputs an instance of the relevant type (`int` or `enum`, respectively).\n\nConverters can be nested. For example: The `ArrayConfigEntryConverter` creates lists of arbitrary\ntypes. How does it know how to parse each element of the list? Well, the constructor for this class\nexpects to be passed a parser that will be called for each element of the list. In this way one can\nparse lists of `int`s, `enum`s, `float`s, etc.\n\n### `ConfigEntry` and `ConfigEntryConverter` Example\n\n```python\nfrom leetconfig.parser import ConfigParser\nfrom leetconfig.entry import ConfigEntry\nfrom leetconfig.entry_converter import StringConfigEntryConverter, IntegerConfigEntryConverter\n\nhostname_config = ConfigEntry(\n    \"hostname\",\n    short_names=\"hn\",\n    parser=StringConfigEntryConverter(),\n    help=\"The host to connect to the server\",\n    is_required=True,\n)  # type: ConfigEntry[str]\nport_config = ConfigEntry(\n    \"port\",\n    short_names=\"p\",\n    parser=IntegerConfigEntryConverter(),\n    help=\"The port to connect to the server\",\n    is_required=True,\n)  # type: ConfigEntry[int]\n\nconnect_retries_config = ConfigEntry(\n    \"connect_retries\",\n    short_names=\"cr\",\n    parser=IntegerConfigEntryConverter(),\n    help=\"Max retries when attempting to connect to the server (default 0)\",\n    is_required=False,\n    default=0,\n)  # type: ConfigEntry[int]\n\n\nmy_app_parser = ConfigParser(\n    \"cool_application\",\n    \"a very cool application\",\n    sources=[],\n    groups=[],\n    entries=[hostname_config, port_config, connect_retries_config],\n)\n\nmy_app_parser.extract()\nhostname = hostname_config.get_value()\nport = port_config.get_value()\nconnect_retries = connect_retries_config.get_value()\n\nprint(hostname, port, connect_retries)\n```\n\nWhen the preceding code is saved in `leetconfig_readme.py` and then run, it returns the following:\n\n```\n$  python3 leetconfig_readme.py --help\nusage: cool_application [--help] [--show-config] --hostname VAL --port VAL\n                        [--connect-retries VAL]\n\nvery cool\n\nConfiguration sources (ordered by priority):\n  CLI:\n    Parse config values from the command line arguments.\n\nConfiguration options:\n  hostname, hn: string\n      The host to connect to the server\n  port, p: integer\n      The port to connect to the server\n  connect_retries, cr: [integer]\n      Max retries when attempting to connect to the server (default 0)\n        (default: 0)\n$  python3 leetconfig_readme.py --hostname localhost --port 1337\nlocalhost 1337 0\n```\n\n## `ConfigGroup`\n\nA `ConfigGroup` aggregates related config entries together. For example, the options from the\nprevious example can be bundled into a basic server-client `ConfigGroup` with three config entries\nnamed `hostname`, `port`, and `connect-retries`:\n\n```python\nclass ServerClientConfigGroup(ConfigGroup):\n    def __init__(self):\n        self.hostname = ConfigEntry(\n            \"hostname\",\n            short_names=\"hn\",\n            parser=StringConfigEntryConverter(),\n            help=\"The host to connect to the server\",\n            is_required=True,\n        )  # type: ConfigEntry[str]\n        self.port = ConfigEntry(\n            \"port\",\n            short_names=\"p\",\n            parser=IntegerConfigEntryConverter(),\n            help=\"The port to connect to the server\",\n            is_required=True,\n        )  # type: ConfigEntry[int]\n        self.connect_retries = ConfigEntry(\n            \"connect_retries\",\n            short_names=\"cr\",\n            parser=IntegerConfigEntryConverter(),\n            help=\"Max retries when attempting to connect to the server (default 0)\",\n            is_required=False,\n            default=0,\n        )  # type: ConfigEntry[int]\n        super(ServerClientConfigGroup, self).__init__(\n            entries=[self.hostname, self.port, self.connect_retries],\n        )\n```\n\nGroups can be nested. A `ConfigGroup` can contain other `ConfigGroup`s as well as `ConfigEntry`s.\nThis allows config groups to compose into a larger config group. For example, we can combine the\n`ServerClientConfigGroup` with a `PasswordAuthenticationConfigGroup` group into a\n`ServerClientLoginConfigGroup` with five config entries named `hostname`,\n`port`, `connect-retries`, `username`, `password`:\n\n```python\nclass PasswordAuthenticationConfigGroup(ConfigGroup):\n    def __init__(self):\n        self.username = ConfigEntry(\n            \"username\",\n            short_names=\"u\",\n            parser=StringConfigEntryConverter(),\n            help=\"The username to authenticate with the service\",\n            is_required=True,\n        )  # type: ConfigEntry[str]\n        self.password = ConfigEntry(\n            \"password\",\n            short_names=\"pw\",\n            parser=StringConfigEntryConverter(),\n            help=\"The password to authenticate with the service\",\n            is_required=True,\n        )  # type: ConfigEntry[str]\n        super(PasswordAuthenticationConfigGroup, self).__init__(\n            entries=[self.username, self.password],\n        )\n\n\nclass ServerClientLoginConfigGroup(ConfigGroup):\n    def __init__(self):\n        self.server = ServerClientConfigGroup()\n        self.authentication = PasswordAuthenticationConfigGroup()\n        super(ServerClientLoginConfigGroup, self).__init__(\n            groups=[self.server, self.authentication],\n        )\n```\n\n### `ConfigNamespace`\n\nA `ConfigNamespace` is a special case of `ConfigGroup` and can be used the same ways. The only\ndifference is that the `ConfigEntry`s are also grouped under a namespace, so that the group can\nbe distinguished from other groups or entries. This is useful for when there are multiple similar\nbut distinct configs. For example, one could have multiple\n`ServerClientLoginConfigGroup` groups for different services that an\napplication relies on, and separate them via namespaces:\n\n```python\nclass MyApplicationConfigDefinition(ConfigGroup):\n    def __init__(self):\n        super(MyApplicationConfigDefinition, self).__init__(\n            groups=[\n                ConfigNamespace(\n                    \"redis\",\n                    \"r\",\n                    groups=[ServerClientLoginConfigGroup()]\n                ),\n                ConfigNamespace(\n                    \"git\",\n                    \"g\",\n                    groups=[ServerClientLoginConfigGroup()]\n                ),\n            ],\n        )\n```\n\nThis group has ten config entries. They are named: `redis-hostname`, `redis-port`,\n`redis-connect-retries`, `redis-username`, `redis-password`, ` git-hostname`, `git-port`,\n`git-connect-retries`, `git-username`, `git-password`.\n\nNotice that the namespace is prepended to each config entry, making it uniquely identifiable.\nWithout the ability to create a namespace (a name string), separate `ConfigEntries` would have to\nbe defined for the Redis port and the Git port in order to distinguish those arguments.\n`ConfigNamespace`s can thus help reduce duplicated code.\n\nWe could simplify the example shown above by making\n`ServerClientLoginConfigGroup` a namespace from the beginning:\n\n```python\nclass ServerClientLoginConfigGroup(ConfigNamespace):\n    def __init__(\n        self,\n        service_name,  # type: str\n        service_short_name,  # type: str\n    ):\n        self.server = ServerClientConfigGroup()\n        self.authentication = PasswordAuthenticationConfigGroup()\n        super(ServerClientLoginConfigGroup, self).__init__(\n            service_name, service_short_name, groups=[self.server, self.authentication],\n        )\n\nclass MyApplicationConfigDefinition(ConfigGroup):\n    def __init__(self):\n        super(MyApplicationConfigDefinition, self).__init__(\n            groups=[\n                ServerClientLoginConfigGroup(\"redis\", \"r\"),\n                ServerClientLoginConfigGroup(\"git\", \"g\"),\n            ],\n        )\n```\n\nThis results in the same ten config entries as before.\n\n### `ConfigGroup` and `ConfigNamespace` Example\n\nVery similar implementations of the above definitions of `ServerClientConfigGroup`\nand `PasswordAuthenticationConfigGroup` are already built into `leetconfig` as\n`ServerClientConfigDefinition` and `PasswordAuthenticationConfigDefinition`. Using those,\nthe full previous `ConfigGroup` example could be written as:\n\n```python\nfrom leetconfig.parser import ConfigParser\nfrom leetconfig.group import ConfigGroup\nfrom leetconfig.namespace import ConfigNamespace\nfrom leetconfig.definitions.server_client import ServerClientConfigDefinition\nfrom leetconfig.definitions.authentication import PasswordAuthenticationConfigDefinition\n\nclass ServerClientLoginConfigGroup(ConfigNamespace):\n    def __init__(\n        self,\n        service_name,  # type: str\n        service_short_name,  # type: str\n    ):\n        self.server = ServerClientConfigDefinition(service_name)\n        self.authentication = PasswordAuthenticationConfigDefinition(service_name, is_required=True)\n        super(ServerClientLoginConfigGroup, self).__init__(\n            service_name, service_short_name, groups=[self.server, self.authentication],\n        )\n\n    def export(self):\n        return self.server.export(), self.authentication.export()\n\nclass MyApplicationConfigDefinition(ConfigGroup):\n    def __init__(self):\n        self.redis_config = ServerClientLoginConfigGroup(\"redis\", \"r\")\n        self.git_config = ServerClientLoginConfigGroup(\"git\", \"g\")\n        super(MyApplicationConfigDefinition, self).__init__(\n            groups=[self.redis_config, self.git_config],\n        )\n\nmy_app_config = MyApplicationConfigDefinition()\nmy_app_parser = ConfigParser(\n    \"cool_application\",\n    \"a very cool application\",\n    sources=[],\n    groups=[my_app_config],\n    entries=[],\n)\n\nmy_app_parser.extract()\nredis_options = my_app_config.redis_config.export()\ngit_options = my_app_config.git_config.export()\n```\n\nNotice the `export` method we've added, and that `ServerClientConfigDefinition` and\n`PasswordAuthenticationConfigDefinition` also have this method. This is a common pattern to extract\nconfig options in a convenient form factor, such as a dataclass.\n\nRunning with `--help` we get:\n\n```\n$  python3 leetconfig_readme.py --help\nusage: cool_application [--help] [--show-config] --redis-hostname VAL\n                        --redis-port VAL [--redis-connect-retries VAL]\n                        --redis-username VAL --redis-password VAL\n                        --git-hostname VAL --git-port VAL\n                        [--git-connect-retries VAL] --git-username VAL\n                        --git-password VAL\n\na very cool application\n\nConfiguration sources (ordered by priority):\n  CLI:\n    Parse config values from the command line arguments.\n\nConfiguration options:\n  redis:\n    hostname, redis_hostname, rhn: string\n        The host to connect to the redis server\n    port, redis_port, rp: integer\n        The port to connect to the redis server\n    connect_retries, redis_connect_retries, rcr: [integer]\n        Max retries when attempting to connect to the redis server (default 0)\n          (default: 0)\n    username, redis_username, ru: [string]\n        The username to authenticate with the redis service\n    password, redis_password, rpw: [string]\n        The password to authenticate with the redis service\n  git:\n    hostname, git_hostname, ghn: string\n        The host to connect to the git server\n    port, git_port, gp: integer\n        The port to connect to the git server\n    connect_retries, git_connect_retries, gcr: [integer]\n        Max retries when attempting to connect to the git server (default 0)\n          (default: 0)\n    username, git_username, gu: [string]\n        The username to authenticate with the git service\n    password, git_password, gpw: [string]\n        The password to authenticate with the git service\n```\n\nSo far, this is a complete and usable config definition. It is annoying to type out all of the flags\nevery time though, so next we will instead parse these options from a config file.\n\n## `ConfigFormat` and `sources`\n\nThe role of the `ConfigFormat` is to do the intial extraction of config option values before feeding\neach individual option to the `ConfigEntryConverter`s to be deserialized. These raw values are\nparsed from a source, such CLI arguments. Three main `ConfigFormat` implementations exist:\n\n- `CLIConfigFormat`\n\n  Read config options from `sys.args` using the `argparse` library. This source is always enabled by\n  default in every `ConfigParser`. (This can be disabled with `force_no_cli` flag to `ConfigParser`\n  constructor.)\n\n- `YAMLConfigFormat`\n\n  Read config options from one or more YAML config files. The paths to these files are \n  constructed inone of two ways:\n\n  1. The `YAMLConfigFormat` is instantiated with one or more file names to find, and optionally with\n     a list of search directories to check. If no directories are supplied, the current working\n     directory and `/etc/leetconfig/` are searched by default. Every file in one of the \n     search\n     directories whose name matches a filename will be read. A dictionary of key-value pairs is\n     aggregated across all opened files and then passed to the `ConfigEntryConverter`s for\n     deserialization.\n\n  2. An option `--yaml-config-path` is added to the CLI arguments, so a user can specify an absolute\n     or relative path to a config file. This option is always available in the CLI when a\n     `ConfigParser` is using `YAMLConfigFormat`, even if `force_no_cli` is set!\n\n- `EnvironmentConfigFormat`\n\n  Reads config options from the OS environment variables.\n\n\n### `ConfigFormat` Example\n\nConsider the following code, saved to `leetconfig_readme.py`:\n\n```python\nfrom leetconfig.parser import ConfigParser\nfrom leetconfig.group import ConfigGroup\nfrom leetconfig.namespace import ConfigNamespace\nfrom leetconfig.definitions.server_client import ServerClientConfigDefinition\nfrom leetconfig.definitions.authentication import PasswordAuthenticationConfigDefinition\nfrom leetconfig.format.file_yaml import YAMLConfigFormat\n\nclass ServerClientLoginConfigGroup(ConfigNamespace):\n    def __init__(\n        self,\n        service_name,  # type: str\n        service_short_name,  # type: str\n    ):\n        self.server = ServerClientConfigDefinition(service_name)\n        self.authentication = PasswordAuthenticationConfigDefinition(service_name, is_required=True)\n        super(ServerClientLoginConfigGroup, self).__init__(\n            service_name, service_short_name, groups=[self.server, self.authentication],\n        )\n\n    def export(self):\n        return self.server.export(), self.authentication.export()\n\nclass MyApplicationConfigDefinition(ConfigGroup):\n    def __init__(self):\n        self.redis_config = ServerClientLoginConfigGroup(\"redis\", \"r\")\n        self.git_config = ServerClientLoginConfigGroup(\"git\", \"g\")\n        super(MyApplicationConfigDefinition, self).__init__(\n            groups=[self.redis_config, self.git_config],\n        )\n\nmy_app_config = MyApplicationConfigDefinition()\nmy_app_parser = ConfigParser(\n    \"cool_application\",\n    \"a very cool application\",\n    sources=[YAMLConfigFormat(\"cool_application.config.yaml\")],  # This is new!\n    groups=[my_app_config],\n    entries=[],\n)\n\nmy_app_parser.extract()\nredis_options = my_app_config.redis_config.export()\ngit_options = my_app_config.git_config.export()\n\n```\n\nWhen run, notice that there is an additional valid option listed in `--help`:\n\n```\n$  python3 leetconfig_readme.py --help\nusage: cool_application [--help] [--show-config] --redis-hostname VAL\n                        --redis-port VAL [--redis-connect-retries VAL]\n                        --redis-username VAL --redis-password VAL\n                        --git-hostname VAL --git-port VAL\n                        [--git-connect-retries VAL] --git-username VAL\n                        --git-password VAL\n                        [--yaml-config-path [VAL [VAL ...]]]\n\na very cool application\n\nConfiguration sources (ordered by priority):\n  CLI:\n    Parse config values from the command line arguments.\n  YAML:\n    Parse config values from file(s) named cool_application.config.yaml in the\n      current working directory.\n[ ... ]\n```\n\nA populated a YAML config file `cool_application.config.yaml` in that path might look like:\n\n```\nredis:\n  hostname: localhost\n  port: 1111\n  username: cooluser\n  password: \"me0w!\"\ngit:\n  hostname: localhost\n  port: 2222\n  username: cooluser\n  password: \"m3ow?\"\n```\n\nAlternatively, we could give the file an arbitrary name and pass its path with the\n`--yaml-config-path` option. We could also define multiple config files, perhaps one for local\nand one for remote services. Then, we could pass the local config file when we are testing locally\nand, when we are ready to hit the remote services, we can change the entire configuration of the\nprogram by simply passing in a different config file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/redballoonsecurity/leetconfig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "leetconfig",
    "package_url": "https://pypi.org/project/leetconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/leetconfig/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/redballoonsecurity/leetconfig/-/issues",
      "Homepage": "https://gitlab.com/redballoonsecurity/leetconfig"
    },
    "release_url": "https://pypi.org/project/leetconfig/0.0.1/",
    "requires_dist": [
      "pyyaml (==5.4)",
      "structlog (~=20.1.0)",
      "enum34 ; python_version < \"3.4\"",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "mypy ; (python_version >= \"3.5\") and extra == 'test'",
      "types-PyYAML (==5.4) ; (python_version >= \"3.5\") and extra == 'test'"
    ],
    "requires_python": ">=3.7, <=3.8",
    "summary": "Reusable configuration definition for a Python application.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12315226,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edba2b9d978104cd2e652c8049ff03c0ed3ece02dba1f4046282531c66f87708",
          "md5": "62469ac1bb465d4d175182d202a74ef9",
          "sha256": "7007f7505be02bc8aa99571007b38aebab3dcd7d103577b897180103b0f9330e"
        },
        "downloads": -1,
        "filename": "leetconfig-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62469ac1bb465d4d175182d202a74ef9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <=3.8",
        "size": 29081,
        "upload_time": "2021-12-14T04:34:39",
        "upload_time_iso_8601": "2021-12-14T04:34:39.260589Z",
        "url": "https://files.pythonhosted.org/packages/ed/ba/2b9d978104cd2e652c8049ff03c0ed3ece02dba1f4046282531c66f87708/leetconfig-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c2c8fee3a5024988cedf931bc36f49806306b84435c839491cad5dae7dbf28",
          "md5": "f7a9f1db3b4e08770bb3ff2be1303587",
          "sha256": "ffab022738d0013a3689cd2a46ee3e513f83d9a88cc7f1a9d412bf1a7543b3b7"
        },
        "downloads": -1,
        "filename": "leetconfig-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7a9f1db3b4e08770bb3ff2be1303587",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <=3.8",
        "size": 26109,
        "upload_time": "2021-12-14T04:34:40",
        "upload_time_iso_8601": "2021-12-14T04:34:40.636328Z",
        "url": "https://files.pythonhosted.org/packages/45/c2/c8fee3a5024988cedf931bc36f49806306b84435c839491cad5dae7dbf28/leetconfig-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edba2b9d978104cd2e652c8049ff03c0ed3ece02dba1f4046282531c66f87708",
        "md5": "62469ac1bb465d4d175182d202a74ef9",
        "sha256": "7007f7505be02bc8aa99571007b38aebab3dcd7d103577b897180103b0f9330e"
      },
      "downloads": -1,
      "filename": "leetconfig-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62469ac1bb465d4d175182d202a74ef9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <=3.8",
      "size": 29081,
      "upload_time": "2021-12-14T04:34:39",
      "upload_time_iso_8601": "2021-12-14T04:34:39.260589Z",
      "url": "https://files.pythonhosted.org/packages/ed/ba/2b9d978104cd2e652c8049ff03c0ed3ece02dba1f4046282531c66f87708/leetconfig-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45c2c8fee3a5024988cedf931bc36f49806306b84435c839491cad5dae7dbf28",
        "md5": "f7a9f1db3b4e08770bb3ff2be1303587",
        "sha256": "ffab022738d0013a3689cd2a46ee3e513f83d9a88cc7f1a9d412bf1a7543b3b7"
      },
      "downloads": -1,
      "filename": "leetconfig-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f7a9f1db3b4e08770bb3ff2be1303587",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <=3.8",
      "size": 26109,
      "upload_time": "2021-12-14T04:34:40",
      "upload_time_iso_8601": "2021-12-14T04:34:40.636328Z",
      "url": "https://files.pythonhosted.org/packages/45/c2/c8fee3a5024988cedf931bc36f49806306b84435c839491cad5dae7dbf28/leetconfig-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}