{
  "info": {
    "author": "",
    "author_email": "Gennaro Nolano <nolanogenn@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# trie\n\nThis repository is dedicated to my implementation of trie structures for Python. This was mainly developed to handle vocabulary search.  \n\nA trie is a type of tree data structure, where each node identifies a string, and edges between nodes represent individual characters. Given a vocabulary, two nodes $n_1$ and $n_2$ are connected by an edge $c_1$ only if $n_1+c_1$ = $n_2$. The resulting structure can traversed depth-first to optimize search in the given vocabulary. \n\n\nOur trie structure is initialized as follows:\n```\nfrom trie.trie import Trie\n\nT = Trie()\n```\n\nOnce it is initialized, our structure has only a `_root_` node, which will represent the starting point of all the following nodes. The root node can be accessed through `T.root`, and it cannot have any parent node.\n\nA node is represented by a simple object with a string value (usually a single character), a depth, an identifier, a parent and a list of children. Only the value is needed to initialize a basic node, as follows:\n```\na = Node('a')\n# this node represents the letter 'a'\n```\n## Adding Nodes\n\nNodes can then be inserted in two different ways:\n\n1. manually by using the function `T.add\\_node(parent_node, child_node)`\n\n```\nT.add_node(T.root, a)\n\n```\nthis will automatically assign the correct depth to the child node, give it an unique identifier, and update its parent node. Furthermore, the children list for `T.root` are updated as well.\n\n2. automatically using the function `T.insert_string(string)`. In this case, the module will look for the string in the current trie, and the it will insert all the characters that are not present in the structure\n\n```\nT.insert_string('alba')\n#since the string 'a' is already present in the trie, this function will add nodes representing the strings 'al', 'alb', and 'alba'.\n\n```\n\n## Searching for Strings\n\nYou can look for a specific string by using the function `T.search(string)`, which will traverse the trie depth-first and will return the deepest node it can find given the query string. If the node is terminal (i.e., it does not have any children of its own) the string was found successfully.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2018 The Python Packaging Authority  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trie-gnolano",
    "package_url": "https://pypi.org/project/trie-gnolano/",
    "platform": null,
    "project_url": "https://pypi.org/project/trie-gnolano/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Nolanogenn/trie/issues",
      "Homepage": "https://github.com/Nolanogenn/trie"
    },
    "release_url": "https://pypi.org/project/trie-gnolano/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A small package for trie structures",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14330521,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4711933da7c14d01087b881dedf7b0c90299f4e2f5a8ee202e6a37d5690a93a",
          "md5": "f173988d7471e0a036dfd68170993ac5",
          "sha256": "0474989c90ed8461c4abf6588d4afa7de216f9e9d99e47e08a3ae87bbb592e43"
        },
        "downloads": -1,
        "filename": "trie_gnolano-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f173988d7471e0a036dfd68170993ac5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5015,
        "upload_time": "2022-07-04T13:28:29",
        "upload_time_iso_8601": "2022-07-04T13:28:29.168850Z",
        "url": "https://files.pythonhosted.org/packages/a4/71/1933da7c14d01087b881dedf7b0c90299f4e2f5a8ee202e6a37d5690a93a/trie_gnolano-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d813a785ad7fffbe86001ceae80dafef5e4906aa82653690215426bdbd6ac89f",
          "md5": "8e2a1f15aee94e0356ad5138d371be27",
          "sha256": "bd94cfbbf6134d166904e60cc80cf30a6fc01389e3bc13eae9956f1a97ff3169"
        },
        "downloads": -1,
        "filename": "trie_gnolano-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e2a1f15aee94e0356ad5138d371be27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3583,
        "upload_time": "2022-07-04T13:28:31",
        "upload_time_iso_8601": "2022-07-04T13:28:31.120902Z",
        "url": "https://files.pythonhosted.org/packages/d8/13/a785ad7fffbe86001ceae80dafef5e4906aa82653690215426bdbd6ac89f/trie_gnolano-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4711933da7c14d01087b881dedf7b0c90299f4e2f5a8ee202e6a37d5690a93a",
        "md5": "f173988d7471e0a036dfd68170993ac5",
        "sha256": "0474989c90ed8461c4abf6588d4afa7de216f9e9d99e47e08a3ae87bbb592e43"
      },
      "downloads": -1,
      "filename": "trie_gnolano-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f173988d7471e0a036dfd68170993ac5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5015,
      "upload_time": "2022-07-04T13:28:29",
      "upload_time_iso_8601": "2022-07-04T13:28:29.168850Z",
      "url": "https://files.pythonhosted.org/packages/a4/71/1933da7c14d01087b881dedf7b0c90299f4e2f5a8ee202e6a37d5690a93a/trie_gnolano-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d813a785ad7fffbe86001ceae80dafef5e4906aa82653690215426bdbd6ac89f",
        "md5": "8e2a1f15aee94e0356ad5138d371be27",
        "sha256": "bd94cfbbf6134d166904e60cc80cf30a6fc01389e3bc13eae9956f1a97ff3169"
      },
      "downloads": -1,
      "filename": "trie_gnolano-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8e2a1f15aee94e0356ad5138d371be27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 3583,
      "upload_time": "2022-07-04T13:28:31",
      "upload_time_iso_8601": "2022-07-04T13:28:31.120902Z",
      "url": "https://files.pythonhosted.org/packages/d8/13/a785ad7fffbe86001ceae80dafef5e4906aa82653690215426bdbd6ac89f/trie_gnolano-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}