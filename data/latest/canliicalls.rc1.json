{
  "info": {
    "author": "Simon Wallace",
    "author_email": "simonwallace@osgoode.yorku.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Education",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Call CanLii\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n[CanLii](www.canlii.org) is an indispensable research tool for lawyers,\nlaw students, judges, adjudicators, and researchers. Largely funded by\nCanadian lawyers, it is the international gold standard when it comes to\nthe free and open access to law.\n\nWith an intuitive and beautiful interface, researchers use CanLii to\nlook up an individual case or statute, read it, see what cites it, and\nsee what it cites.\n\n<div class=\"column-margin\">\n\n<figure>\n<img src=\"images/computer.jpg\"\ndata-fig-alt=\"&quot;Computer calls a database,&quot; AI artist (2022)\"\nalt=\"“Computer calls a database,” AI artist (2022)\" />\n<figcaption aria-hidden=\"true\">“Computer calls a database,” AI artist\n(2022)</figcaption>\n</figure>\n\n</div>\n\nSome legal researchers and social scientists require bulk access to\nlegal data for their projects. Fortunately, CanLii provides an\n[API](https://github.com/canlii/API_documentation/blob/master/EN.md)\nthat allows (limited) programmatic access to its databases. Too few\nlegal researchers, however, know how to use and interact with APIs.\n\nThis library’s purpose is simple: make it easier to use CanLii’s APIs.\nMore than that, I demonstrate how easy it is to use code to facilitate\naspects of legal research. Use the library, but look at its source code\nand see if it inspires you to do more. **You can do this!**\n\n## Install\n\n``` sh\npip install canliicalls\n```\n\nor\n\n``` sh\nconda install canliicalls\n```\n\nthen:\n\n``` sh\nfrom canliicalls.caller import *\n```\n\n## Usage\n\n### Get and use your secret API key\n\nTo use CanLii’s API, you need your own secret access key. Applying for a\nkey is simple. Just send a request through the [Canlii feedback\nform](https://www.canlii.org/en/feedback/feedback.html).\n\nOnce you have your API key, the rest is easy. First, enter your secret\nAPI key and, second, enter your preferred language (‘en’ or ‘fr’). Then\ncall the object.\n\n``` python\napi = 'MY SECRET API KEY' #this will look like lots of numbers and letters\nlanguage = 'en'\n\nmy_caller = Caller(api, language)\n```\n\n## A sample research project\n\nTo see how to use the library, let’s do a simple research project and\nfigure out what statutes a recent Supreme Court of Canada case cites to.\nTo do this, we need to figure out where CanLii stores the case and the\ncase name.\n\n### Lookup CanLii database names\n\nFirst, let’s get a list of CanLii database names.\n\n``` python\nmy_caller.list_tribunals()\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>databaseId</th>\n      <th>jurisdiction</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>qccdoooq</td>\n      <td>qc</td>\n      <td>Conseil de discipline de l'Ordre des opticiens...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>qcoaciq</td>\n      <td>qc</td>\n      <td>Comité de discipline de l'organisme d'autorégl...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>skqb</td>\n      <td>sk</td>\n      <td>Court of King's Bench for Saskatchewan</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>onsc</td>\n      <td>on</td>\n      <td>Superior Court of Justice</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>abmgb</td>\n      <td>ab</td>\n      <td>Alberta Municipal Government Board</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>357</th>\n      <td>ytrto</td>\n      <td>yk</td>\n      <td>Yukon Residential Tenancies Office</td>\n    </tr>\n    <tr>\n      <th>358</th>\n      <td>nbsec</td>\n      <td>nb</td>\n      <td>Financial and Consumer Services Tribunal</td>\n    </tr>\n    <tr>\n      <th>359</th>\n      <td>onbcc</td>\n      <td>on</td>\n      <td>Building Code Commission</td>\n    </tr>\n    <tr>\n      <th>360</th>\n      <td>exchc-cech</td>\n      <td>ca</td>\n      <td>Exchequer Court of Canada</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>nttc</td>\n      <td>nt</td>\n      <td>Territorial Court of the Northwest Territories</td>\n    </tr>\n  </tbody>\n</table>\n<p>362 rows × 3 columns</p>\n</div>\n\nWe can do a few things from here. First, if you want to save this as an\nexcel or a csv file, that’s easy!\n\n``` python\nmy_caller.list_tribunals().to_csv('CanLii_tribunal_list.csv')\n```\n\nOr you can search directly for the Supreme Court of Canada’s database\nID.\n\n``` python\ndf = my_caller.list_tribunals()\ndf[df['name'] == 'Supreme Court of Canada']\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>databaseId</th>\n      <th>jurisdiction</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>90</th>\n      <td>csc-scc</td>\n      <td>ca</td>\n      <td>Supreme Court of Canada</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n### Find recent decisions by the SCC\n\nGreat! Now that we have the database ID for SCC cases, we can zero in on\na recent case. To list individual cases from the database, we call a\ndifferent function.\n\nThis function has a few paramaters. You can decide whether you want the\nresults in ascending or descending chronological order (defaults to\ndescending) and how many results you want the API to return (defaults to\n100).\n\n``` python\nmy_caller.list_decisions(databaseId='csc-scc', offset=0, resultCount=10)\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>caseId</th>\n      <th>title</th>\n      <th>citation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022scc34</td>\n      <td>R. v. Schneider</td>\n      <td>2022 SCC 34 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022scc33</td>\n      <td>R. v. Kirkpatrick</td>\n      <td>2022 SCC 33 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022scc32</td>\n      <td>R. v. Lafrance</td>\n      <td>2022 SCC 32 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022scc31</td>\n      <td>R. v. Sundman</td>\n      <td>2022 SCC 31 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2022scc30</td>\n      <td>Society of Composers, Authors and Music Publis...</td>\n      <td>2022 SCC 30 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2022scc29</td>\n      <td>Law Society of Saskatchewan v. Abrametz</td>\n      <td>2022 SCC 29 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2022scc28</td>\n      <td>R. v. J.J.</td>\n      <td>2022 SCC 28 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2022scc27</td>\n      <td>British Columbia (Attorney General) v. Council...</td>\n      <td>2022 SCC 27 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2022scc26</td>\n      <td>Canada (Attorney General) v. Collins Family Trust</td>\n      <td>2022 SCC 26 (CanLII)</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2022scc25</td>\n      <td>R. v. Goforth</td>\n      <td>2022 SCC 25 (CanLII)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n### Search for case metadata\n\nWe can look up the metadata for any case. Let’s see what the fifth case\ndown is about.\n\n``` python\nmy_caller.case_metadata(databaseId='csc-scc', caseId='2022scc30')\n```\n\n    databaseId                                                  csc-scc\n    caseId                                                    2022scc30\n    url                                       https://canlii.ca/t/jqgw0\n    title             Society of Composers, Authors and Music Publis...\n    citation                                       2022 SCC 30 (CanLII)\n    language                                                         en\n    docketNumber                                                  39418\n    decisionDate                                             2022-07-15\n    keywords          technological neutrality — available for on-de...\n    topics                                                             \n    concatenatedId                                        2022csc-scc30\n    dtype: object\n\n### Check to see what legislation the Court cites\n\nInteresting! This case is interesting, I wonder what statutory\nprovisions in cites?\n\n``` python\nmy_caller.case_cites_of_legislation(databaseId='csc-scc', caseId='2022scc30')\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>databaseId</th>\n      <th>legislationId</th>\n      <th>title</th>\n      <th>citation</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cas</td>\n      <td>rsc-1985-c-c-42</td>\n      <td>Copyright Act</td>\n      <td>RSC 1985, c C-42</td>\n      <td>STATUTE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>caa</td>\n      <td>sc-2012-c-20</td>\n      <td>Copyright Modernization Act</td>\n      <td>SC 2012, c 20</td>\n      <td>ANNUAL_STATUTE</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nOnly two! Even though the [full\njudgement](https://www.canlii.org/en/ca/scc/doc/2022/2022scc30/2022scc30.html?autocompleteStr=2022%20SCC%2030&autocompletePos=1)\nis long, this looks right.\n\n## Using loops\n\nThis program is designed to support queries at scale. You can, for\nexample, retrieve all of the keywords for the last ten SCC decisions.\n\nFirst, request a dataframe of the last ten decisions.\n\n``` python\ndf = my_caller.list_decisions(databaseId='csc-scc', offset=0, resultCount=10)\ndf\n```\n\nSecond, loop over the dataframe and make a separate call for the\nkeywords of each case.\n\n``` python\nfor index,row in df.iterrows():\n    case = df.loc[index,'caseId']\n    print(f'Keywords for {case}.')\n    print(my_caller.case_metadata(databaseId='csc-scc', caseId=case)['keywords'])\n    print('---')\n```\n\n    Keywords for 2022scc34.\n    brother — overheard — jury — evidence — probative value\n    ---\n    Keywords for 2022scc33.\n    stare decisis — sexual activity — precedent — without a condom — sex\n    ---\n    Keywords for 2022scc32.\n    police — detainee — detention — interview — encounter\n    ---\n    Keywords for 2022scc31.\n    unlawful confinement — degree murder — domination — truck — temporal-causal connection\n    ---\n    Keywords for 2022scc30.\n    technological neutrality — available for on-demand streaming — work — royalties — works\n    ---\n    Keywords for 2022scc29.\n    abuse — inordinate delay — process — stay — prejudice\n    ---\n    Keywords for 2022scc28.\n    record screening regime — complainants — privacy — evidence — defence\n    ---\n    Keywords for 2022scc27.\n    well-developed factual setting — public interest standing — access to justice — disabilities — legality\n    ---\n    Keywords for 2022scc26.\n    tax — rescission — taxpayer — rectification — mistake\n    ---\n    Keywords for 2022scc25.\n    jury — unlawfully causing bodily harm — necessaries — mens rea requirement — marked departure\n    ---\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simon-lawyer/canliicalls",
    "keywords": "nbdev jupyter notebook python",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "canliicalls",
    "package_url": "https://pypi.org/project/canliicalls/",
    "platform": null,
    "project_url": "https://pypi.org/project/canliicalls/",
    "project_urls": {
      "Homepage": "https://github.com/simon-lawyer/canliicalls"
    },
    "release_url": "https://pypi.org/project/canliicalls/0.0.1/",
    "requires_dist": [
      "fastcore",
      "pandas",
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "Interact with CanLII programmatically",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15415239,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7edd18389574a01ee6aef53fba2963c3ba5b5d47b287e30971e27384a344c5b",
          "md5": "fddfd77a2cbbd9f3ab81b1badb8ef841",
          "sha256": "55b785c0d408f10ee78f6c815f692e1be04ca84ddc26c430b33362cf4bf5ae24"
        },
        "downloads": -1,
        "filename": "canliicalls-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fddfd77a2cbbd9f3ab81b1badb8ef841",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11093,
        "upload_time": "2022-10-14T18:28:34",
        "upload_time_iso_8601": "2022-10-14T18:28:34.339970Z",
        "url": "https://files.pythonhosted.org/packages/d7/ed/d18389574a01ee6aef53fba2963c3ba5b5d47b287e30971e27384a344c5b/canliicalls-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8ba45ef245cd3a16fe59a3b282df497c98270541e7b307aeb795b0718077fc5",
          "md5": "1b46fbda637b888fd78e3176bda65741",
          "sha256": "403d9769acbb055cce26bacb32be327b0a919c201dcb2e700c02d2f964ab91dc"
        },
        "downloads": -1,
        "filename": "canliicalls-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b46fbda637b888fd78e3176bda65741",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12093,
        "upload_time": "2022-10-14T18:28:36",
        "upload_time_iso_8601": "2022-10-14T18:28:36.115116Z",
        "url": "https://files.pythonhosted.org/packages/e8/ba/45ef245cd3a16fe59a3b282df497c98270541e7b307aeb795b0718077fc5/canliicalls-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7edd18389574a01ee6aef53fba2963c3ba5b5d47b287e30971e27384a344c5b",
        "md5": "fddfd77a2cbbd9f3ab81b1badb8ef841",
        "sha256": "55b785c0d408f10ee78f6c815f692e1be04ca84ddc26c430b33362cf4bf5ae24"
      },
      "downloads": -1,
      "filename": "canliicalls-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fddfd77a2cbbd9f3ab81b1badb8ef841",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11093,
      "upload_time": "2022-10-14T18:28:34",
      "upload_time_iso_8601": "2022-10-14T18:28:34.339970Z",
      "url": "https://files.pythonhosted.org/packages/d7/ed/d18389574a01ee6aef53fba2963c3ba5b5d47b287e30971e27384a344c5b/canliicalls-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8ba45ef245cd3a16fe59a3b282df497c98270541e7b307aeb795b0718077fc5",
        "md5": "1b46fbda637b888fd78e3176bda65741",
        "sha256": "403d9769acbb055cce26bacb32be327b0a919c201dcb2e700c02d2f964ab91dc"
      },
      "downloads": -1,
      "filename": "canliicalls-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b46fbda637b888fd78e3176bda65741",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12093,
      "upload_time": "2022-10-14T18:28:36",
      "upload_time_iso_8601": "2022-10-14T18:28:36.115116Z",
      "url": "https://files.pythonhosted.org/packages/e8/ba/45ef245cd3a16fe59a3b282df497c98270541e7b307aeb795b0718077fc5/canliicalls-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}