{
  "info": {
    "author": "Andrius Mikonis",
    "author_email": "andrius@noia.network",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# NOIA-SDK\nNOIA Platform SDK allows you to manage NOIA networks. \n\nThis Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:\n\n- API version: 0.1.0\n- Package version: 0.1.0\n- Build package: io.swagger.codegen.v3.generators.python.PythonClientCodegen\n\n## Requirements.\n\nPython 3.6+\n\n## Installation & Usage\n### pip install\n\nThe latest package can be installed from PyPi:\n\n```sh\npip install noia-sdk\n```\n\nThen import the package:\n```python\nimport noia_sdk \n```\n\n## Getting Started\n\nPlease follow the [installation procedure](#installation--usage) and then run the following:\n\n```python\nfrom __future__ import print_function\nimport time\nimport noia_sdk\nfrom noia_sdk.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\ncode = 'code_example' # str | Account deletion code (received by mail).\n\ntry:\n    api_response = api_instance.delete_account(code)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->delete_account: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | Email verification code (received by mail).\n\ntry:\n    api_response = api_instance.deprecated_verify_email(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->deprecated_verify_email: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nip = 'ip_example' # str | \n\ntry:\n    api_response = api_instance.geo_ip(ip)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->geo_ip: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.local(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->local: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.pair_latency_test_report(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->pair_latency_test_report: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = [noia_sdk.UserPairLatencyTestReportObject()] # list[UserPairLatencyTestReportObject] | \n\ntry:\n    api_response = api_instance.pair_latency_test_report_bulk(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->pair_latency_test_report_bulk: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.pair_speedtest_report(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->pair_speedtest_report: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.provider_attach(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->provider_attach: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.provider_detach(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->provider_detach: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.provider_login(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->provider_login: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \nattach = noia_sdk.AutoAttach() # AutoAttach |  (optional)\n\ntry:\n    api_response = api_instance.provider_register(body, attach=attach)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->provider_register: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nrefresh_token = 'refresh_token_example' # str | \n\ntry:\n    api_response = api_instance.refresh(refresh_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->refresh: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \nref = noia_sdk.MailBodyTemplates() # MailBodyTemplates |  (optional)\n\ntry:\n    api_response = api_instance.register(body, ref=ref)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->register: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.reset_password(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->reset_password: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nref = noia_sdk.MailBodyTemplates() # MailBodyTemplates |  (optional)\n\ntry:\n    api_response = api_instance.set_delete_account_code(ref=ref)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->set_delete_account_code: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \nref = noia_sdk.MailBodyTemplates() # MailBodyTemplates |  (optional)\n\ntry:\n    api_response = api_instance.set_reset_password_code(body, ref=ref)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->set_reset_password_code: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \nref = noia_sdk.MailBodyTemplates() # MailBodyTemplates |  (optional)\n\ntry:\n    api_response = api_instance.set_verify_email_code(body, ref=ref)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->set_verify_email_code: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.speedtest_report(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->speedtest_report: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\n\ntry:\n    api_response = api_instance.user()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \nref = noia_sdk.MailBodyTemplates() # MailBodyTemplates |  (optional)\n\ntry:\n    api_response = api_instance.user_change_email(body, ref=ref)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_change_email: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_instance.user_change_password(body)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_change_password: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_instance.user_destroy(body)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_destroy: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nbody = NULL # dict(str, object) | \n\ntry:\n    api_response = api_instance.user_hosts_create(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_hosts_create: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\nid = 1.2 # float | \n\ntry:\n    api_response = api_instance.user_hosts_destroy(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_hosts_destroy: %s\\n\" % e)\n\n# Configure API key authorization: jwt\nconfiguration = noia_sdk.Configuration()\nconfiguration.api_key['Authorization'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\n\ntry:\n    api_response = api_instance.user_hosts_index()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->user_hosts_index: %s\\n\" % e)\n\n# create an instance of the API class\napi_instance = noia_sdk.AuthApi(noia_sdk.ApiClient(configuration))\ncode = 'code_example' # str | Email verification code (received by mail).\n\ntry:\n    api_response = api_instance.verify_email(code)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AuthApi->verify_email: %s\\n\" % e)\n```\n\n## Command line tool usage\n\nIn order to be able to perform operations with platform API keys, networks, connections or edges you can use `noiactl` utility.\nFirst you must set proper environment variables:\n\n```sh\n$ export NOIA_API_SERVER={NOIA API URL}\n$ export NOIA_TOKEN={the API authorization token}\n```\n\nIn case you have a registered user on the platform you can retrieve the API token using this command(deprecated):\n\n```sh\n$ noiactl login {user name} {password}\n{your API authorization token}\n```\n\nYou can omit `{password}` on the command line, then the utility will ask you to type the password.\n\nIn case you are using SSO to login to the platform the API authorization token can be retrieved from the Platform itself.\n\nOr you can set the `NOIA_TOKEN` environment variable like this(Set `NOIA_API_SERVER` to the server address and `NOIA_TOKEN` to empty value before that):\n\n```sh\nexport NOIA_TOKEN=`noiactl login {user name} {password}`\n```\n\nYou can learn about the types of actions this utility can perform by running:\n\n```sh\n$ noiactl --help\nUsage: noiactl [OPTIONS] COMMAND [ARGS]...\n\n  NOIA NETWORKS cli tool\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  configure-networks  Configure networks using a configuration YAML file.\n  create-api-key      Create a API key\n  create-connections  Create connections between endpoints.\n  create-network      Create a network.\n  delete-api-key      Delete API key either by name or by id.\n  delete-connection   Deletes a connection\n  delete-network      Deletes a NOIA network.\n  export-networks     Exports existing networks to configuration YAML file.\n  get-api-keys        List all API keys\n  get-connections     Retrieves network connections\n  get-endpoints       List all endpoints\n  get-networks        List all networks\n  get-topology        Retrieves networks topology\n  login               Login with username and password.\n```\n\n## Exporting and configuring networks\n\nIt is possible to export existing networks using `noiactl export-networks` command which will output existing networks configuration to stdout\nin a YAML format.\nThis configuration can be passed to `noiactl configure-networks {infrastructure.yaml}` to create networks and connections.\n\nBelow you can find a sample configuration file for different types of networks:\n\n```yaml\n---\n# Create point-to-point connections\nname: interconnect\n# Network topology is mandaroty. Values: P2P, P2M, MESH\ntopology: p2p\n# Network state is mandatory. Values: present, absent\nstate: present\nuse_sdn: false\n# Connections to create\nconnections:\n  # Endpoint can be refferred to by name and by id\n  endpoint-1:\n    # state is present by default\n    state: present\n    # type is endpoint by default. Values: endpoint, tag, id\n    type: endpoint\n    # services specifies what services to enable for given endpoint\n    services: \n    - nginx\n    # id has precedence before name when type is endpoint\n    id: 123\n    connect_to:\n      endpoint-2:\n        type: endpoint\n        services: \n        - postgre\n  3:\n    connect_to:\n      endpoint-4:\n        type: endpoint\n    state: present\n    type: id\n  endpoint-5:\n    connect_to:\n      6:\n        type: id\n    state: absent\n    type: endpoint\n\n---\n# Connect mqtt server with iot devices \nname: iot-network\nstate: present\nuse_sdn: false\ntopology: p2m\nconnections:\n  mqtt-server-name.com:\n    type: endpoint\n    connect_to:\n      # Will connect mqtt server with all the endpoints tagged as \"iot-devices\"\n      iot-devices:\n        state: present\n        type: tag\n\n---\n# Create DNS servers mesh network \nname: dns-mesh\nstate: present\nuse_sdn: true\ntopology: mesh\nconnections:\n  # Will create a mesh network using endpoints tagged as \"dns-servers\"\n  dns-servers:\n    state: present\n    type: tag\n\n---\n# Delete a network\nname: old-iot-network\ntopology: mesh\nstate: absent\n```\n\n## Documentation for API Endpoints\n\nAll URIs are relative to */*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*AuthApi* | [**delete_account**](docs/AuthApi.md#delete_account) | **GET** /api/auth/delete-account/{code} | \n*AuthApi* | [**deprecated_verify_email**](docs/AuthApi.md#deprecated_verify_email) | **POST** /api/auth/verify-email | \n*AuthApi* | [**geo_ip**](docs/AuthApi.md#geo_ip) | **GET** /api/auth/{ip}/geoip | \n*AuthApi* | [**local**](docs/AuthApi.md#local) | **POST** /api/auth/local/login | \n*AuthApi* | [**pair_latency_test_report**](docs/AuthApi.md#pair_latency_test_report) | **POST** /api/auth/pair-latency-test-report | \n*AuthApi* | [**pair_latency_test_report_bulk**](docs/AuthApi.md#pair_latency_test_report_bulk) | **POST** /api/auth/pair-latency-test-report/bulk | \n*AuthApi* | [**pair_speedtest_report**](docs/AuthApi.md#pair_speedtest_report) | **POST** /api/auth/pair-speedtest-report | \n*AuthApi* | [**provider_attach**](docs/AuthApi.md#provider_attach) | **POST** /api/auth/provider/attach | \n*AuthApi* | [**provider_detach**](docs/AuthApi.md#provider_detach) | **POST** /api/auth/provider/detach | \n*AuthApi* | [**provider_login**](docs/AuthApi.md#provider_login) | **POST** /api/auth/provider/login | \n*AuthApi* | [**provider_register**](docs/AuthApi.md#provider_register) | **POST** /api/auth/provider/register | \n*AuthApi* | [**refresh**](docs/AuthApi.md#refresh) | **POST** /api/auth/refresh-token | \n*AuthApi* | [**register**](docs/AuthApi.md#register) | **POST** /api/auth/register | \n*AuthApi* | [**reset_password**](docs/AuthApi.md#reset_password) | **POST** /api/auth/reset-password | \n*AuthApi* | [**set_delete_account_code**](docs/AuthApi.md#set_delete_account_code) | **POST** /api/auth/send-delete-account-link | \n*AuthApi* | [**set_reset_password_code**](docs/AuthApi.md#set_reset_password_code) | **POST** /api/auth/send-reset-password-link | \n*AuthApi* | [**set_verify_email_code**](docs/AuthApi.md#set_verify_email_code) | **POST** /api/auth/send-verify-email-link | \n*AuthApi* | [**speedtest_report**](docs/AuthApi.md#speedtest_report) | **POST** /api/auth/speedtest-report | \n*AuthApi* | [**user**](docs/AuthApi.md#user) | **GET** /api/auth/user | \n*AuthApi* | [**user_change_email**](docs/AuthApi.md#user_change_email) | **POST** /api/auth/user/change-email | \n*AuthApi* | [**user_change_password**](docs/AuthApi.md#user_change_password) | **POST** /api/auth/user/change-password | \n*AuthApi* | [**user_destroy**](docs/AuthApi.md#user_destroy) | **POST** /api/auth/user/delete | \n*AuthApi* | [**user_hosts_create**](docs/AuthApi.md#user_hosts_create) | **POST** /api/auth/user/hosts | \n*AuthApi* | [**user_hosts_destroy**](docs/AuthApi.md#user_hosts_destroy) | **DELETE** /api/auth/user/hosts/{id} | \n*AuthApi* | [**user_hosts_index**](docs/AuthApi.md#user_hosts_index) | **GET** /api/auth/user/hosts | \n*AuthApi* | [**verify_email**](docs/AuthApi.md#verify_email) | **GET** /api/auth/verify-email/{code} | \n*PlatformApi* | [**config**](docs/PlatformApi.md#config) | **GET** /api/platform/admin/agent/{agent_id}/config | \n*PlatformApi* | [**create_agent_group**](docs/PlatformApi.md#create_agent_group) | **POST** /api/platform/network/{network_id}/agent-groups/{group_name} | \n*PlatformApi* | [**create_api_key**](docs/PlatformApi.md#create_api_key) | **POST** /api/platform/api-keys | \n*PlatformApi* | [**create_connections**](docs/PlatformApi.md#create_connections) | **POST** /api/platform/connections | \n*PlatformApi* | [**create_network**](docs/PlatformApi.md#create_network) | **POST** /api/platform/networks | \n*PlatformApi* | [**create_network_agents**](docs/PlatformApi.md#create_network_agents) | **POST** /api/platform/network/{network_id}/agents | \n*PlatformApi* | [**delete_agents**](docs/PlatformApi.md#delete_agents) | **DELETE** /api/platform/agents/{agent_id} | \n*PlatformApi* | [**delete_api_key**](docs/PlatformApi.md#delete_api_key) | **DELETE** /api/platform/api-keys/{api_key_id} | \n*PlatformApi* | [**delete_connection**](docs/PlatformApi.md#delete_connection) | **DELETE** /api/platform/connections/{connection_id} | \n*PlatformApi* | [**delete_networks**](docs/PlatformApi.md#delete_networks) | **DELETE** /api/platform/networks/{network_id} | \n*PlatformApi* | [**delete_networks_agent**](docs/PlatformApi.md#delete_networks_agent) | **DELETE** /api/platform/networks/{network_id}/agents/{agent_id} | \n*PlatformApi* | [**find_all_name_id_pairs_by_user_id**](docs/PlatformApi.md#find_all_name_id_pairs_by_user_id) | **GET** /api/platform/agents/id-name-pairs | \n*PlatformApi* | [**get_agent_services_with_subnets**](docs/PlatformApi.md#get_agent_services_with_subnets) | **GET** /api/platform/agent-services | \n*PlatformApi* | [**get_connection_services**](docs/PlatformApi.md#get_connection_services) | **GET** /api/platform/connection-services | \n*PlatformApi* | [**get_network_info**](docs/PlatformApi.md#get_network_info) | **GET** /api/platform/network/{network_id}/info | \n*PlatformApi* | [**index_agents**](docs/PlatformApi.md#index_agents) | **GET** /api/platform/agents | \n*PlatformApi* | [**index_api_key**](docs/PlatformApi.md#index_api_key) | **GET** /api/platform/api-keys | \n*PlatformApi* | [**index_connections**](docs/PlatformApi.md#index_connections) | **GET** /api/platform/connections | \n*PlatformApi* | [**index_networks**](docs/PlatformApi.md#index_networks) | **GET** /api/platform/networks | \n*PlatformApi* | [**patch_agents**](docs/PlatformApi.md#patch_agents) | **PATCH** /api/platform/agents/{agent_id} | \n*PlatformApi* | [**remove_agent_group**](docs/PlatformApi.md#remove_agent_group) | **DELETE** /api/platform/network/agent-groups/{group_id} | \n*PlatformApi* | [**remove_network_agents**](docs/PlatformApi.md#remove_network_agents) | **DELETE** /api/platform/network/{network_id}/agents | \n*PlatformApi* | [**save_logs_read_timestamp**](docs/PlatformApi.md#save_logs_read_timestamp) | **POST** /api/platform/logs-reads-timestamp | \n*PlatformApi* | [**topology_networks**](docs/PlatformApi.md#topology_networks) | **GET** /api/platform/networks/topology | \n*PlatformApi* | [**update_agent_group**](docs/PlatformApi.md#update_agent_group) | **PUT** /api/platform/network/agent-groups/{group_id} | \n*PlatformApi* | [**update_agent_services_subnets_status**](docs/PlatformApi.md#update_agent_services_subnets_status) | **POST** /api/platform/agent-services-subnets | \n*PlatformApi* | [**update_api_key**](docs/PlatformApi.md#update_api_key) | **PATCH** /api/platform/api-keys/{api_key_id} | \n*PlatformApi* | [**update_connection_services**](docs/PlatformApi.md#update_connection_services) | **POST** /api/platform/connection-services | \n\n\n## Documentation For Authorization\n\n\n## jwt\n\n- **Type**: API key\n- **API key parameter name**: Authorization\n- **Location**: HTTP header\n\n\n## Author\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/noianetwork-team/noia-sdk-python/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "noia-sdk",
    "package_url": "https://pypi.org/project/noia-sdk/",
    "platform": "any",
    "project_url": "https://pypi.org/project/noia-sdk/",
    "project_urls": {
      "Homepage": "https://gitlab.com/noianetwork-team/noia-sdk-python/"
    },
    "release_url": "https://pypi.org/project/noia-sdk/0.1.1/",
    "requires_dist": [
      "certifi (>=14.05.14)",
      "six (>=1.10)",
      "python-dateutil (>=2.5.3)",
      "setuptools (>=21.0.0)",
      "urllib3 (>=1.15.1)",
      "click (>=7.1.0)",
      "prettytable",
      "pyyaml",
      "dataclasses"
    ],
    "requires_python": ">=3.6",
    "summary": "NOIA Python SDK",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8859107,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02a901beb8d1ec53efc9991c0e5e47d9629715322a8f54f217b407cc24c3cc69",
          "md5": "d62e690006d77c442739a5336b456ae1",
          "sha256": "5f4eb728a5e76415bce7d5a36963ccf6a62403c228bd2ab55c283291de5057f9"
        },
        "downloads": -1,
        "filename": "noia_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d62e690006d77c442739a5336b456ae1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 392217,
        "upload_time": "2020-12-01T14:01:15",
        "upload_time_iso_8601": "2020-12-01T14:01:15.673442Z",
        "url": "https://files.pythonhosted.org/packages/02/a9/01beb8d1ec53efc9991c0e5e47d9629715322a8f54f217b407cc24c3cc69/noia_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5718a89dd7d1f851730012d7d84fe3f8ad2e8323caed9774791eb15e84889fd7",
          "md5": "4687aa3847d0ae1e056a3740478a780a",
          "sha256": "e1908107e6a291b38e6c6a97cffc3d7176cc7deeb7da8a7f30383d6ee89dc86d"
        },
        "downloads": -1,
        "filename": "noia-sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4687aa3847d0ae1e056a3740478a780a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 123901,
        "upload_time": "2020-12-01T14:01:17",
        "upload_time_iso_8601": "2020-12-01T14:01:17.942163Z",
        "url": "https://files.pythonhosted.org/packages/57/18/a89dd7d1f851730012d7d84fe3f8ad2e8323caed9774791eb15e84889fd7/noia-sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39fa687535824833da3591f210a05cf58263b652d53e70bde02f682ab2da51a7",
          "md5": "89935bc5a1fda7445a09860c649e1e40",
          "sha256": "dbb551b988d365ded8a888e7ca09d779eda63d33109bf580173d6a886a2a534e"
        },
        "downloads": -1,
        "filename": "noia_sdk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89935bc5a1fda7445a09860c649e1e40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 392213,
        "upload_time": "2020-12-09T13:53:13",
        "upload_time_iso_8601": "2020-12-09T13:53:13.076371Z",
        "url": "https://files.pythonhosted.org/packages/39/fa/687535824833da3591f210a05cf58263b652d53e70bde02f682ab2da51a7/noia_sdk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6adf3ec627fd8b4602952cfe4faa2b97235481d2551c542f59e858767343423",
          "md5": "fb9ab6d29472e8373469b9751bb3d77c",
          "sha256": "8fa60d3b8995f3e753d0361f3065d8d8858acfad1874467eff76d44184d96389"
        },
        "downloads": -1,
        "filename": "noia-sdk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb9ab6d29472e8373469b9751bb3d77c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 123911,
        "upload_time": "2020-12-09T13:53:14",
        "upload_time_iso_8601": "2020-12-09T13:53:14.989077Z",
        "url": "https://files.pythonhosted.org/packages/c6/ad/f3ec627fd8b4602952cfe4faa2b97235481d2551c542f59e858767343423/noia-sdk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39fa687535824833da3591f210a05cf58263b652d53e70bde02f682ab2da51a7",
        "md5": "89935bc5a1fda7445a09860c649e1e40",
        "sha256": "dbb551b988d365ded8a888e7ca09d779eda63d33109bf580173d6a886a2a534e"
      },
      "downloads": -1,
      "filename": "noia_sdk-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89935bc5a1fda7445a09860c649e1e40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 392213,
      "upload_time": "2020-12-09T13:53:13",
      "upload_time_iso_8601": "2020-12-09T13:53:13.076371Z",
      "url": "https://files.pythonhosted.org/packages/39/fa/687535824833da3591f210a05cf58263b652d53e70bde02f682ab2da51a7/noia_sdk-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6adf3ec627fd8b4602952cfe4faa2b97235481d2551c542f59e858767343423",
        "md5": "fb9ab6d29472e8373469b9751bb3d77c",
        "sha256": "8fa60d3b8995f3e753d0361f3065d8d8858acfad1874467eff76d44184d96389"
      },
      "downloads": -1,
      "filename": "noia-sdk-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fb9ab6d29472e8373469b9751bb3d77c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 123911,
      "upload_time": "2020-12-09T13:53:14",
      "upload_time_iso_8601": "2020-12-09T13:53:14.989077Z",
      "url": "https://files.pythonhosted.org/packages/c6/ad/f3ec627fd8b4602952cfe4faa2b97235481d2551c542f59e858767343423/noia-sdk-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}