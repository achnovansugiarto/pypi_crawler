{
  "info": {
    "author": "Mike Lee",
    "author_email": "random.deviate@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Other Audience",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Basic",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Games/Entertainment",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "Interprets a generalised subset of 1975 Altair/Microsoft BASIC, sufficient to\nrun programs from:\n\n* David H. Ahl and Steve North, _BASIC Computer Games_, Workman (1978)\n* David H. Ahl and Steve North, _More BASIC Computer Games_, Workman (1980)\n\nThese contain many famous listings of historical interest, including early\nexamples of machine learning, natural language processing, artificial\nintelligence, cellular automata, and Wumpus hunting.\nA selection is included with the package (see below).\n\nRequires Python 3.9 or higher (for importlib), and a carriage-return capable\nterminal (IDLE isn't).\n\n\n\n# Usage\n\nTo load and run the bundled 'Wumpus' program:\n\n    import brassica\n    brassica.run('wumpus')\n\nTo list the loaded program:\n\n    brassica.list_program()\n\nTo load and run your own program:\n\n    brassica.run('myprogram.bas')\n\nTo rerun the last program without reloading it:\n\n    brassica.run()\n\nTo list which lines of the loaded program have not yet had all of their\nstatements successfully run (development tool):\n\n    brassica.not_run()\n\nTo load and run the bundled 'Camel' program in teletype mode:\n\n    brassica.run('camel', 20, 300, True)\n\n\n\n# Bundled Programs\n\nThe following titles, from the above two books, are included in the package:\n\n|Title|Authors, Contributors, and Creators|\n|-----|-----------------------------------|\n|_Animal_|Arthur Luehrmann, Nathan Teichholtz, Steve North|\n|_Camel_|The Heath Users Group|\n|_Chase_|Mac Oglesby, Bill Cotter, Arnold Loveridge|\n|_Eliza_|Jeff Shrager, Steve North, Joseph Weizenbaum|\n|_Even Wins_|Eric Peters|\n|_Flip_|John S. James|\n|_Four in a Row_|James L. Murphy, Howard Wexler, Ned Strongin|\n|_Guess-It_|Gerard Kierman, Rufus Isaacs|\n|_Hammurabi_|David H. Ahl, Doug Dyment, Mabel Addis, William McKay|\n|_Hexapawn_|R. A. Kaapke, Jeff Dalton, Steve North, Martin Gardner, Donald Michie|\n|_Inkblot_|Scott Costello|\n|_Life_|Clark Baker, Steve North, John Conway, Martin Gardner|\n|_Maze_|Richard Schaal, Jack Hauber|\n|_Not One_|Robert Puopolo, John Scarne|\n|_Sea Battle_|Vincent Erikson, Steve North|\n|_Super Star Trek_|Robert Leedon, David H. Ahl, Mike Mayfield, Mary Cole, John Gorders|\n|_Wumpus_|Gregory Yob|\n\n\n\n# Guide to Brassica BASIC\n\n[[PDF version]](https://cran.r-project.org/package=brassica/vignettes/BASIC.pdf)\n\n## Lines\n\nLine numbers label branching destinations, but are not strictly necessary\nelsewhere.\nBlank lines, numbered or not, are allowed.\nLines beginning with `#` are comments.\nColons separate multiple statements on the same line.\nThe presence or absence of horizontal whitespace makes no difference anywhere\noutside of string literals, `DATA` values, and line numbers.\nAside from the names of variables and user-defined functions, the interpreter is\ncase-insensitive.\n\n    # infinite loop\n    100\n    110 let x = x + 1\n        go to 100 : REM unnumbered line\n\n\n## Variables\n\nLegitimate names consist of a letter followed by zero or more alphanumeric\ncharacters, possibly followed by a data-type indicator (`%` or `$`), possibly\nfollowed by array subscripts.\nNames are case-sensitive, not limited to two characters, and may not contain\nreserved words (`TO`, `INT`, etc.).\nArrays of character strings are supported.\nThe six variables below are distinct and may coexist.\nSubscripts begin from zero.\nAll BASIC variables are global in scope.\nVariables may be referenced without prior definition, in which case numbers are\ninitialised to `0`, and strings to `\"\"`.\nReferencing an undimensioned array `DIM`s it as `0` - `10` (inclusive) on each\nsubscript.\n\n    X             A numerical scalar.\n    X%            An integer-constrained scalar (signed).\n    X$            A character string.\n    X(10)         A scalar element of a one-dimensional numerical array.\n    X%(4,6)       A scalar element of a two-dimensional integer array.\n    X$(0,0,0)     One string of a three-dimensional array of strings.\n\n\n## Operators\n\nIn decreasing order of precedence:\n\n    (...)               Bracketing (including functions).\n    ^                   Exponentiation.\n    unary + -           Identity and negation.\n    * /                 Multiplication and division.\n    \\                   Integer division.\n    MOD                 Modulo.\n    + -                 Addition and subtraction.\n    = <> < <= > >=      Relational operators.\n    NOT                 Bitwise logical NOT.\n    AND                 Bitwise logical AND.\n    OR                  Bitwise logical OR.\n    XOR                 Bitwise logical XOR.\n\nOperators of equal precedence, such as the six relationals (equal to, not equal\nto, less than, less than or equal to, greater than, greater than or equal to),\nare applied in left-to-right order.\nThe equivalence operator is a single `=`, which is also used for the assignment\noperator immediately after an expressed or implied `LET`.\nWhitespace is ignored; be wary of `X OR` and `T OR` (use parentheses).\nConsecutive operators need not be separated by parentheses, but see below.\n\nLogically false relations evaluate to `0`, true relations to `-1`.\nThere is no short-circuiting.\nRelational operations are allowed between strings, and are case-insensitive\n(hence, `\"a\" = \"A\"`, while `ASC(\"a\") <> ASC(\"A\")`).\nAddition of strings performs concatenation.\n\nOperands of bitwise operators are truncated to integers before the operator is\napplied.\n`NOT(X%) = -(X% + 1)`.\n\nOperands of `\\` and `MOD` are truncated to integers before the operator is\napplied.\nResults from `\\` are then rounded to the nearest integer towards zero.\nHence, `-2\\3 = 0 = 2\\3`, as opposed to `INT(-2/3) = -1`.\nThe modulo operator is subsequently defined via\n\n    A MOD B = INT(A) - INT(B) * (A\\B)\n\nIf an alternative definition is required, perhaps a generalisation to\nfloating-point values, use something like:\n\n    DEF FNMO(A,B) = A - B * INT(A/B)\n\nThe unary negation (`-`) and logical NOT (`NOT`) operators imply a bracketing\nextending to (not around) the next operator of lower precedence.\nThe unary identity (`+`) operator acts only on the value to its immediate right.\nIn effect, the unaries act as functions.\nHence;\n\n    A^B^C = A^+B^C = (A^B)^C\n\nwhile\n\n    A^--B^C = A^-(-(B^C)) = A^(B^C)\n\nand\n\n    A * NOT B + NOT C + NOT D + E AND F\n      = A * NOT(B + NOT(C + NOT(D + E))) AND F\n      = A * ((NOT B) - (NOT C) + (NOT D) - E) AND F\n\n(This is the behaviour of Commodore BASIC v2.)\n\n## Commands\n\nAll BASIC statements begin with a command keyword.\nThe absence of an overt keyword implies `LET`.\n\n#### CLEAR\nDeletes all variables, arrays, and user-defined functions.\nMay be followed by a positive number, which is ignored.\n\n#### DATA\nLists constant values for `READ`ing.\n\n    DATA 3, 4.5E-2, REM, A B C, \" D,:E \"\n    REM two numbers and three strings\n\n#### DEF FN\nDefines a custom function.\n`FN` forms the beginning of its (case-sensitive) name, which must end with\nthe appropriate return-type indicator (`$`, `%`, or none).\n\n    DEF FNA(X) = X + C\n    def fnc$(a$,n) = mid$(a$,n,1)\n    PRINT FNA(7) fnc$(\"ABC\",2)\n\n#### DELAY\nSuspends execution for a time.\n(Replaces delay loops.)\n\n    DELAY 2   :REM waits two seconds\n\n#### DIM\nSpecifies the domain of an array variable's subscripts.\nEach subscript runs from zero to its specified limit (with both extremes\nincluded).\n\n    DIM A$(5), X(2,6)\n    REM X has 3 * 7 = 21 elements\n\n#### END\nTerminates execution quietly.\n\n#### FOR ... TO ... STEP\nBegins a loop, iterating over some (non-array) variable.\nThe expression between `FOR` and `TO` is an implied `LET`, defining the\niterator.\nThe `STEP` (increment) is optional, and defaults to `1`.\nThe termination threshold, appearing after `TO`, is locked-in as a constant\nwhen the loop is initiated.\n\n    X=3: FOR I=1 TO X: PRINT I: X=10: NEXT\n    REM prints 1, 2, 3.\n\nBecause the loop-termination condition is only tested at the bottom (by the\n`NEXT`), loops always execute at least once.\n\n    FOR I = 9 TO 5 STEP +2: PRINT I: NEXT\n    REM this prints 9.\n\nBeginning a new loop terminates any prior loop over the same iterator within the\nsame subroutine (see `GOSUB`).\nTermination of a loop also terminates any loops nested within it.\n\n    FOR I=1 TO 3: FOR J=1 TO 3: FOR I=1 TO 3\n    NEXT I: NEXT J\n    REM next-without-for error at the 'NEXT J'\n\n#### GOSUB\nBranches to a new subroutine.\nThe destination must be a constant literal line number.\nWhile variables have global scope, loops are only visible within the subroutine\nthey were initiated in.\n```\n100 FOR I=1 TO 3: GOSUB 200\n200 NEXT :REM next-without-for error here\n```\n```\n10 REM this prints 1 2 5 6 8\n20 FOR I=1 TO 8: PRINT I;\n30 IF I=2 THEN GOSUB 50\n40 NEXT I: PRINT: END\n50 FOR I=5 TO 6: PRINT I;: NEXT I\n60 RETURN\n```\n\n#### GOTO\nBranches to a line number.\nThe destination must be a constant literal.\nThe word `GO` is reserved by BASIC in its own right.\n\n    GOTO 840\n\n#### IF ... GOTO\nConditional branching.\nIf the condition is true, execution jumps to the specified line.\nOtherwise, execution continues with the next line.\nNon-zero numbers and non-empty strings are considered true.\n\n    IF X > 5 GOTO 1000\n\n#### IF ... THEN\nConditional execution.\nIf the condition is true, execution continues along the same line.\nIf the condition is false, execution moves to the next line.\nNon-zero numbers and non-empty strings are considered true.\n```\nIF X > 5 THEN 1000 :REM same as IF - GOTO\n```\n```\n10 REM GOTO does the work of ELSE\n20 IF A$ THEN X=X+1: GOSUB 500: GOTO 40\n30 X=0: B$=\"Z\"\n40 REM line 30 is the ELSE block\n```\n\n#### IF ... THEN ... ELSE\nConditional execution.\nIf the condition is true, the statement before `ELSE` is executed.\nIf the condition is false, the statement after `ELSE` is executed.\nIn either case, execution proceeds to any further statements on the line.\nWhen statements are nested, `THEN`s and `ELSE`s are paired in the same manner\nas opening and closing parentheses.\n```\nIF X THEN PRINT \"T\" ELSE PRINT \"F\": A = 1\nREM AS is assigned in either case\n```\n```\nIF X THEN IF Y THEN 700 ELSE 800: B = 2\nREM the ELSE is paired with the second THEN\nREM the B statement is unreachable\n```\n\n#### INPUT\nAccepts input from the terminal.\nThe user is automatically re-prompted on entering the wrong type or number of\ncomma-separated values.\n(To enter a string with a comma in it, wrap it in double quotes.)\n\n    INPUT           :REM just waits for enter\n    INPUT X(4),Y$   :REM expects two values\n\nAn optional string-literal prompt can be printed.\nIt must be followed by either a semicolon (append the usual question mark) or a\ncomma (no question mark).\n\n    INPUT \"Coordinates\";X,Y\n    INPUT \"[press enter]\",\n\n#### LET\nAssigns a value to a variable.\nThe keyword is optional.\nThe data types of value and variable must match.\nNon-integer numbers are floored when necessary.\n\n    LET A$ = \"Hi!\"  :REM assigns \"Hi!\" to A$\n    X = \"A\" = \"a\"   :REM assigns -1 to X\n    N%(2.3) = 4.9   :REM assigns 4 to N%(2)\n\n#### NEXT\nBottom of a loop.\nIncrements the iteration variable by the `STEP` defined when the loop was\ninitiated.\nIf the variable then exceeds the termination threshold, the loop terminates and\nexecution continues onward.\nOtherwise, execution returns to the top of the loop.\nIf the iteration variable is not stated, `NEXT` applies to the most recent\nloop.\nWhen the `STEP` is non-negative, 'exceeds' means 'is greater than'.\nWhen the `STEP` is negative, 'exceeds' means 'is less than'.\nTerminating a loop also terminates any nested loop.\nSee `FOR` and `GOSUB`.\n\n    FOR I = 8 TO 3 STEP -2: NEXT\n    FOR J = -5 TO -2: FOR K = 1 TO 3: NEXT K,J\n    REM at this point, I = 1, J = -1, K = 4\n\n#### ON ... GOSUB\nBranches to the *n*th of a list of subroutines.\nIf *n* should be zero, or exceed the number of subroutines, no branch is made,\nand execution continues with the next statement.\n\n    N = 2: ON N GOSUB 1000, 2000, 3000\n    REM branches to the subroutine at line 2000\n\n#### ON ... GOTO\nBranches to the *n*th of a list of destinations.\nIf *n* should be zero, or exceed the number of destinations, no branch is made,\nand execution continues with the next statement.\n\n    ON INT(3*RND(1)+1) GOTO 500, 600, 700\n    REM goes to one of these three lines\n\n#### PRINT\nSends visible output to the terminal.\nNumbers are printed with a trailing space.\nPositive numbers also have a leading space (in lieu of a negative number's\nsign).\n(Use `STR$` and `MID$` to suppress these.)\nThe width of the terminal is divided into 'print zones' of 14 spaces each.\nConsider:\n\n    PRINT A;BTAB(16)CHR$(34)SPC(4)\":\",C D$E $;\n\nThe first semicolon separates `A` from `B`, so we don't get the value of\n`AB`.\nNo semicolon is needed after `B`, since the reserved word `TAB` cannot\nbe part of a variable's name.\n`TAB(16)` moves the cursor to terminal-column 16, where `CHR$(34)` prints\na double-quote.\n`SPC(4)` moves the cursor four more spaces to the right, where a colon is\nprinted.\nThe comma then moves the cursor to the beginning of the next print zone, where\nthe values of `CD$` and `E$` are printed.\n(Whitespace is ignored, including within keywords.)\nThe final semicolon says _not_ to print a newline at the end.\n\nAlso, while\n\n    PRINT A-B;\"X\"+\"Y\";-C\n\nprints the value of `A-B`, followed by the concatenated string `XY`, followed\nby the value of `-C`, the output is no different in the absence of the\nsemicolons and plus sign.\n(Since the minus operator does not apply to strings, `\"Y\"-C` is understood as\ntwo separate terms.)\n\n`TAB`, `SPC` and comma are rapid operations, in that they take essentially\nno time even when teletypewriter-effect options are active.\nThey do not overprint existing text.\nThis is in contrast to printing spaces, which does take time, and does\noverprint.\nCursor positioning and text-wrapping will be inaccurate when special characters,\nsuch as a bell or tab, have been printed to the line.\n\n#### READ\nAssigns the next `DATA` value to a variable. See `RESTORE`.\n\n    READ X,Y$  :REM read a number and a string\n\n#### REM\nA remark; the rest of the line is a comment.\n\n#### RESTORE\nAllows `DATA` to be `READ` again.\n\n    RESTORE      :REM re-READ from the beginning\n    RESTORE 600  :REM re-READ data from line 600\n\n#### RETURN\nReturns from a subroutine (to the point of `GOSUB`).\n\n#### STOP\nTerminates execution with a break message.\n\n\n## Functions\n\n|Function|Return Value|\n|--------|------------|\n|`ABS(X)`|Absolute value of `X`.|\n|`ASC(X$)`|ASCII code of the first character of `X$`.|\n|`ATN(X)`|Arctangent of `X`.|\n|`CHR$(X)`|The character with ASCII value `X`.|\n|`COS(X)`|Cosine of `X`.|\n|`EXP(X)`|Natural exponential function of `X`.|\n|`INT(X)`|Greatest integer less than or equal to `X` (floor function).|\n|`LEFT$(X$,N)`|The leftmost `N` characters of `X$`.|\n|`LEN(X$)`|The length, in characters, of `X$`.|\n|`LOG(X)`|Natural logarithm of `X`.|\n|`MID$(X$,I,N)`|An `N`-character substring of `X$`, starting from the `I`th (or all characters from the `I`th onward, if `N` is omitted).|\n|`INSTR(N,X$,Y$)`|The position of the first occurrence of string `Y$` within string `X$`, not coming before the `N`th character (or the first, if `N` is omitted). Returns `0` when `X$` is empty, or when `Y$` does not appear.|\n|`POS(1)`|Current position of the cursor across the console (the leftmost column is numbered zero).|\n|`RND(X)`|A variate from the standard uniform distribution. Use `X > 0` for a new variate (`X = 1` is the conventional choice), or `X = 0` for the previous one. Use `X < 0` to seed the generator with `INT(X)`. Note that `RND(-1)` on its own is a syntax error; use `A = RND(-1)`, or similar.|\n|`RIGHT$(X$,N)`|The rightmost `N` characters of `X$`.|\n|`SGN(X)`|Sign (signum) function of `X`.|\n|`SIN(X)`|Sine of `X`.|\n|`SPC(X)`|Advances the cursor `X` spaces to the right (or left, if `X` is negative). Can only be used within `PRINT` statements.|\n|`SQR(X)`|Square root of `X`.|\n|`STR$(X)`|Converts `X` to character-string representation. This has a leading space when `X >= 0`.|\n|`STRING$(N,X$)`|Concatenates `N` copies of `X$` (or `N` spaces, should `X$` be omitted).|\n|`SYST(1)`|Current system date-time, in seconds.|\n|`TAB(X)`|Positions the cursor at column `X` (or `-X` spaces in from the right margin, if `X` is negative). Can only be used within `PRINT` statements. Does nothing when the cursor is already at or beyond the requested position.|\n|`TAN(X)`|Tangent of `X`.|\n|`TTW(1)`|Width of the terminal, in characters. This is normally one less than that of the parent terminal within which it is running.|\n|`VAL(X$)`|Converts `X$` to the numerical value it represents (the reverse of `STR$`).|\n\nThe value of the dummy argument to \\ib{POS}, \\ib{SYST}, and \\ib{TTW} must be\neither `1` or `0`.\n`POS` and `TAB` will be inaccurate when special characters (\\a, \\b, \\t, etc.)\nhave been printed since the last carriage return.\n\n\n## Identities\n\nFunctions on the left are not implemented directly.\nSubstitute expressions from the right.\n\n    PI          =   3.1416\n    LOGN(X)     =   LOG(X)/LOG(N)\n    SEC(X)      =   1/COS(X)\n    CSC(X)      =   1/SIN(X)\n    COT(X)      =   1/TAN(X)\n    ARCSIN(X)   =   ATN(X/SQR(1-X*X))\n    ARCCOS(X)   =   1.5708-ATN(X/SQR(1-X*X)\n    ARCSEC(X)   =   1.5708*SGN((X)-1)+ATN(SQR(X*X-1))\n    ARCCSC(X)   =   1.5708*(SGN(X)-1)+ATN(1/SQR(X*X-1))\n    ARCCOT(X)   =   1.5708-ATN(X)\n    SINH(X)     =   (EXP(X)-EXP(-X))/2\n    COSH(X)     =   (EXP(X)+EXP(-X))/2\n    TANH(X)     =   1-2*EXP(-X)/(EXP(X)+EXP(-X))\n    SECH(X)     =   2/(EXP(X)+EXP(-X))\n    CSCH(X)     =   2/(EXP(X)-EXP(-X))\n    COTH(X)     =   1+2*EXP(-X)/(EXP(X)-EXP(-X))\n    ARSINH(X)   =   LOG(X+SQR(X*X+1))\n    ARCOSH(X)   =   LOG(X+SQR(X*X-1))\n    ARTANH(X)   =   LOG((1+X)/(1-X))/2\n    ARSECH(X)   =   LOG((SQR(1-X*X)+1)/X)\n    ARCSCH(X)   =   LOG((SQR(1+X*X)*SGN(X)+1)/X)\n    ARCOTH(X)   =   LOG((X+1)/(X-1))/2\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brassica",
    "package_url": "https://pypi.org/project/brassica/",
    "platform": null,
    "project_url": "https://pypi.org/project/brassica/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/brassica/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Interpreter for 1975 Altair/Microsoft BASIC",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15504894,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11907732cfc636853c3ca2cc5c8e4a1df20e3277005e296e051489a398908036",
          "md5": "52757f56e49e9df8049258bf68e462a4",
          "sha256": "f11e9ef77ebadd55a27548337060604c6c511fa1d6c17ad2f26798e83a05ea06"
        },
        "downloads": -1,
        "filename": "brassica-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52757f56e49e9df8049258bf68e462a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 85961,
        "upload_time": "2022-08-13T04:57:46",
        "upload_time_iso_8601": "2022-08-13T04:57:46.443194Z",
        "url": "https://files.pythonhosted.org/packages/11/90/7732cfc636853c3ca2cc5c8e4a1df20e3277005e296e051489a398908036/brassica-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "doc omissions (licence, readme) "
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a6cf4c2cf0eb601581a6d47de8ca63072f0f9b2c2b58ce3ee9c2c77246f4cef",
          "md5": "c03ef96136f5e57904606ec7f13b76c7",
          "sha256": "fc67d57235e059a09ffd08dbe13d0bdf9feed797163e5412ee67ac3c6d9bc8a8"
        },
        "downloads": -1,
        "filename": "brassica-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c03ef96136f5e57904606ec7f13b76c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 87070,
        "upload_time": "2022-08-13T04:57:51",
        "upload_time_iso_8601": "2022-08-13T04:57:51.443474Z",
        "url": "https://files.pythonhosted.org/packages/9a/6c/f4c2cf0eb601581a6d47de8ca63072f0f9b2c2b58ce3ee9c2c77246f4cef/brassica-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "doc omissions (licence, readme) "
      }
    ],
    "1.0.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "047a022b50ba69e0ceab309e708764bd308dc7d9cfb3481b9ca6229a93dac07d",
          "md5": "e702ec127c15e89a93a8f63e0cb2b7c6",
          "sha256": "f26115f3bc66cb81f7d6a2665161477b714f3104d9dd1f8c43a467ea43e1e1ba"
        },
        "downloads": -1,
        "filename": "brassica-1.0.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e702ec127c15e89a93a8f63e0cb2b7c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 98857,
        "upload_time": "2022-08-15T21:28:31",
        "upload_time_iso_8601": "2022-08-15T21:28:31.328596Z",
        "url": "https://files.pythonhosted.org/packages/04/7a/022b50ba69e0ceab309e708764bd308dc7d9cfb3481b9ca6229a93dac07d/brassica-1.0.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c444dea4bb35a733f3f9bf55a85a97ab8c5bce0e41be2c54f4040d465e1f9196",
          "md5": "25adb7ac3401847e2a499c4c3c9e3b31",
          "sha256": "9f02547d88acf209073e61da62dea16b3c3b3cc325ba990947e7f0332540def9"
        },
        "downloads": -1,
        "filename": "brassica-1.0.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "25adb7ac3401847e2a499c4c3c9e3b31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 99903,
        "upload_time": "2022-08-15T21:28:36",
        "upload_time_iso_8601": "2022-08-15T21:28:36.479040Z",
        "url": "https://files.pythonhosted.org/packages/c4/44/dea4bb35a733f3f9bf55a85a97ab8c5bce0e41be2c54f4040d465e1f9196/brassica-1.0.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8e60a9868c924694968f44ad4fc55542c8c83ca23ad129463c5572bb3a9204",
          "md5": "b887b8dd0ab12a36d8c27ad0c3b2e79e",
          "sha256": "6f4129e9f696f94ed7f2abcdde31df7eacae181fe8feeed3f778f4598f16a085"
        },
        "downloads": -1,
        "filename": "brassica-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b887b8dd0ab12a36d8c27ad0c3b2e79e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 104812,
        "upload_time": "2022-09-12T23:11:37",
        "upload_time_iso_8601": "2022-09-12T23:11:37.064802Z",
        "url": "https://files.pythonhosted.org/packages/5d/8e/60a9868c924694968f44ad4fc55542c8c83ca23ad129463c5572bb3a9204/brassica-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "618b276a3f3e37bfc8bf01099692c1f08c41ebc4fb69abdf8a3289d3cb5b352c",
          "md5": "50d41e5c773269bbec61a839f6aeeb0e",
          "sha256": "c4119a7ad112f5e06c015e1dc85175db5ac7a1c158cb27e267121eab27255948"
        },
        "downloads": -1,
        "filename": "brassica-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50d41e5c773269bbec61a839f6aeeb0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 106284,
        "upload_time": "2022-09-12T23:11:42",
        "upload_time_iso_8601": "2022-09-12T23:11:42.473911Z",
        "url": "https://files.pythonhosted.org/packages/61/8b/276a3f3e37bfc8bf01099692c1f08c41ebc4fb69abdf8a3289d3cb5b352c/brassica-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f08411db9c1221fd93cc98f8d1cad189016097b2aca364e07f90005e9bcad78b",
          "md5": "95acca4685c7cf67be23c035185aa37c",
          "sha256": "1bbd80907c067bebc72a3bd4d481918fbd28cf4ae6ae3b56fd30803a1e760b32"
        },
        "downloads": -1,
        "filename": "brassica-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95acca4685c7cf67be23c035185aa37c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 146629,
        "upload_time": "2022-10-24T01:56:35",
        "upload_time_iso_8601": "2022-10-24T01:56:35.944182Z",
        "url": "https://files.pythonhosted.org/packages/f0/84/11db9c1221fd93cc98f8d1cad189016097b2aca364e07f90005e9bcad78b/brassica-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b88112133ebd4c5abc53e7ce8a37799e21520701a1614e90b1d9751ceae5354",
          "md5": "8eea3a08eca5920cc28cd7216203c9b4",
          "sha256": "8a27a635b798b550e6bdc2cd6b0665fbd5ba20f2f2b084205e3b1e25ce1cbeac"
        },
        "downloads": -1,
        "filename": "brassica-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8eea3a08eca5920cc28cd7216203c9b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 119222,
        "upload_time": "2022-10-24T01:56:40",
        "upload_time_iso_8601": "2022-10-24T01:56:40.636575Z",
        "url": "https://files.pythonhosted.org/packages/7b/88/112133ebd4c5abc53e7ce8a37799e21520701a1614e90b1d9751ceae5354/brassica-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f08411db9c1221fd93cc98f8d1cad189016097b2aca364e07f90005e9bcad78b",
        "md5": "95acca4685c7cf67be23c035185aa37c",
        "sha256": "1bbd80907c067bebc72a3bd4d481918fbd28cf4ae6ae3b56fd30803a1e760b32"
      },
      "downloads": -1,
      "filename": "brassica-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95acca4685c7cf67be23c035185aa37c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 146629,
      "upload_time": "2022-10-24T01:56:35",
      "upload_time_iso_8601": "2022-10-24T01:56:35.944182Z",
      "url": "https://files.pythonhosted.org/packages/f0/84/11db9c1221fd93cc98f8d1cad189016097b2aca364e07f90005e9bcad78b/brassica-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b88112133ebd4c5abc53e7ce8a37799e21520701a1614e90b1d9751ceae5354",
        "md5": "8eea3a08eca5920cc28cd7216203c9b4",
        "sha256": "8a27a635b798b550e6bdc2cd6b0665fbd5ba20f2f2b084205e3b1e25ce1cbeac"
      },
      "downloads": -1,
      "filename": "brassica-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8eea3a08eca5920cc28cd7216203c9b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 119222,
      "upload_time": "2022-10-24T01:56:40",
      "upload_time_iso_8601": "2022-10-24T01:56:40.636575Z",
      "url": "https://files.pythonhosted.org/packages/7b/88/112133ebd4c5abc53e7ce8a37799e21520701a1614e90b1d9751ceae5354/brassica-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}