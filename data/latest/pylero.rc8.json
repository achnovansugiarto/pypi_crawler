{
  "info": {
    "author": "pylero Developers",
    "author_email": "dno-tools@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Pylero\n\nWelcome to Pylero, the Python wrapper for the Polarion WSDL API. The Pylero\nwrapper enables native python access to Polarion objects and functionality\nusing object oriented structure and functionality. This allows the developers to\nuse Pylero in a natural fashion without being concerned about the Polarion\ndetails.\n\nAll Pylero objects inherit from BasePolarion. The objects used in the library\nare all generated from the SOAP factory class, using the python-suds library.\nThe Pylero class attributes are generated dynamically as properties, based on\na mapping dict between the pylero naming convention and the Polarion attribute\nnames.\n\nThe use of properties allows the pylero object attributes to be virtual with no\nneed for syncing between them and the Polarion objects they are based on.\n\nThe Polarion WSDL API does not implement validation/verification of data passed\nin, so the Pylero library takes care of this itself. All enums are validated\nbefore being sent to the server and raise an error if not using a valid value.\nA number of workflow implementations are also included, for example when\ncreating a Document, it automatically creates the Heading work item at the same\ntime.\n\nPolarion Work Items are configured per installation, to give native workitem\nobjects (such as TestCase), the library connects to the Polarion server,\ndownloads the list of workitems and creates them.\n\n## Installation\n-----------------------------\n\n### Install from Pypi\n\nPylero package have been published to Pypi:\n\n`https://pypi.org/project/pylero/`\n\nInstall Pylero Pypi package with:\n\n`$ pip install pylero`\n\nBy default the latest package and dependencies will be installed.\n\n### Install from repo\n\nPylero is located in a git repository and can be cloned from:\n\n`$ git clone https://github.com/RedHatQE/pylero.git`\n\nFrom the root of the project, run:\n\n`$ pip install .`\n\n### Build pip package\n\nAfter cloned the repo and in the dir:\n\n`$ python -m build`\n\nboth wheel and bdist format will be built and the package could be found under\ndist directory.\n\nThen both files could be used to install the package with pip install locally.\n\nPylero must be configured (see next section) before it can be used.\n\n## Configuration\n-----------------\n\nA configuration file must be filled out, which must be located either in the\ncurrent dir (the dir where the script is executed from) named **.pylero** or in\nthe user's home dir **~/.pylero**\n\nDefault settings are stored in **LIBDIR/pylero.cfg**. This file should not\nbe modified, as it will be overwritten with any future updates.  Certificates\nshould be verified automatically, but if they aren't, you can add the path to\nyour CA to the cert_path config option.  These are the configurable values:\n\n```\n    [webservice]\n    url=https://{your polarion web URL}/polarion\n    svn_repo=https://{your polarion web URL}/repo\n    user={your username}\n    password={your password}\n    token={your personal access token}\n    default_project={your default project}\n    #cert_path=/dir/with/certs\n    #disable_manual_auth=False\n```\n\nIf the token is given it will be used for login by default, else if both user and\npassword are given the password will be used for login, else if user is provided\nand password value is blank, it will prompt you for a password, else if none of\nthem are provided it will prompt you for the token to login and access any of the\npylero objects.\n\nThese can also be overridden with the following environment variables:\n```\n    POLARION_URL\n    POLARION_REPO\n    POLARION_USERNAME\n    POLARION_PASSWORD\n    POLARION_TOKEN\n    POLARION_TIMEOUT\n    POLARION_PROJECT\n    POLARION_CERT_PATH\n    POLARION_DISABLE_MANUAL_AUTH\n```\n\n## Requirements\n----------------\nThe install_requires attribute in setup.py installs the following requirements:\n```\n    suds; python_version < '3.0'\n    suds-py3; python_version >= '3.0'\n    click\n    readline; python_version <= '3.6'\n```\n\n## Usage\n---------\nThere is a pylero script installed that opens a python shell with all the\nobjects in the library already loaded:\n\n```\n    $ pylero\n    >>> tr = TestRun(\"example\", project_id=\"project_name\")\n```\n\nAlternatively, you can open a python shell and import the objects that you want\nto use:\n\n```\n    $ python\n    Python 2.6.6 (r266:84292, Nov 21 2013, 10:50:32)\n    [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from pylero.test_run import TestRun\n    >>> tr = TestRun(\"example\", project_id=\"project_name\")\n```\n\n## Examples\n------------\n```python\nimport datetime\nfrom pylero.test_run import TestRun\nfrom pylero.test_record import TestRecord\nfrom pylero.work_item import TestCase, Requirement\nfrom pylero.document import Document\n\n# Creating a Test Run Template:\ntr = TestRun.create_template(\"myproj\",\n                             \"Static Query Test\",\n                             parent_template_id=\"Empty\",\n                             select_test_cases_by=\"staticQueryResult\",\n                             query=\"type:testcase AND status:approved\")\n\n# Creating a Test Run:\ntr = TestRun.create(\"myproj\", \"My Test Run\", \"Static Query Test\")\n\n# changing status\ntr.status = \"inprogress\"\n\n# getting and changing a custom attribute in TestRun\narch = tr.get_custom_field(\"arch\")\narch = \"i386\"\ntr.set_custom_field(\"arch\", arch)\n\n# saving the data to the server\ntr.update()\n\n# Adding a test record\ntr.add_test_record_by_fields(test_case_id=\"MYPROJ-1813\",\n                             test_result=\"passed\",\n                             test_comment=\"went smoothly\",\n                             executed_by=\"user1\",\n                             executed=datetime.datetime.now(),\n                             duration=10.50,\n                             defect_work_item_id=\"MYPROJ-1824\")\n\n# Getting specific WorkItems\ntc = TestCase(project_id=\"myproj\", work_item_id=\"MYPROJ-2015\")\nreq = Requirement(project_id=\"myproj\", work_item_id=\"MYPROJ-2019\")\n\n# Getting required custom fields for specific Work Items\nreqs = TestCase.custom_fields(\"myproj\")[1]\n# returns [u'caseimportance', u'caselevel', u'caseautomation', u'caseposneg']\n\nreqs = Requirement.custom_fields(\"myproj\")[1]\n# returns [u'reqtype']\n\n# Getting the valid values for the custom enumerations\ntc.get_valid_field_values(\"caseimportance\")\n# returns [critical, high, medium, low]\n\n# Creating a specific Work Item\ntc = TestCase.create(\"myproj\",\n                     \"Title\",\n                     \"Description\",\n                     caseimportance=\"high\",\n                     caselevel=\"component\",\n                     caseautomation=\"notautomated\",\n                     caseposneg=\"positive\")\n\n# Note if the custom required fields are not specified, an exception will be raised\n# Custom field for work items are accessed like regular attributes\ntc.caseimportance = \"critical\"\n\n# to save changes\ntc.update()\n\n# Creating a document\ndoc = Document.create(\"myproj\", \"Testing\", \"API doc\", \"The API Document\",\n                      [\"testcase\"])\n# Adding a Functional Test Case work item to the document\nwi = TestCase()\nwi.tcmscaseid = \"12345\"\nwi.title = \"[GUI] Host Network QoS-'named'\"\nwi.author = \"user1\"\nwi.tcmscategory = \"Functional\"\nwi.caseimportance = \"critical\"\nwi.status = \"proposed\"\nwi.setup = \"DC/Cluster/Host\"\nwi.teardown = \"\"\"\nProceed with the VM Network QoS paradigm, that is creating Network QoS\nentities that can be shared between different networks - let's refer to this\nas \"\"named\"\" QoS. This QoS entities are created via DC> QoS > Host Network\"\n\"\"\"\nsteps = TestSteps()\nsteps.keys = [\"step\", \"expectedResult\"]\nstep1 = TestStep()\nstep1.values = [\"This is step 1\", \"Step 1 expected result\"]\nstep2 = TestStep()\nstep2.values = [\"This is step 2\", \"Step 2 expected result\"]\narr_step = [step1, step2]\nsteps.steps = arr_step\nwi.test_steps = steps\nwi.caseautomation = \"notautomated\"\nwi.caseposneg = \"positive\"\nwi.caselevel = \"component\"\nnew_wi = doc.create_work_item(None, wi)\n\n# Getting a list of documents in a space.\ndocs = Document.get_documents(proj=\"myproj\", space=\"Testing\")\n\n# Create template from document\nTestRun.create_template(\"myproj\",\n                        \"tpl_tp_12071\",\n                        select_test_cases_by=\"staticLiveDoc\",\n                        doc_with_space=\"Testing/tp_12071\")\n\n# create a test run based on the template\ntr = TestRun.create(\"myproj\", \"tp_12071_1\", \"tpl_tp_12071\")\n\n# process a record\nrec = tr.records[0]\nrec.duration = \"10.0\"\nrec.executed_by = \"user1\"\nrec.executed = datetime.datetime.now()\nrec.result = \"passed\"\nwi = _WorkItem(uri=rec.test_case_id)\nsteps = wi.get_test_steps()\nres1 = TestStepResult()\nres1.comment = \"This is the 1st result\"\nres1.result = \"passed\"\nres2 = TestStepResult()\nres2.comment = \"This is the 2nd result\"\nres2.result = \"failed\"\nrec.test_step_results = [res1, res2]\ntr.add_test_record_by_object(rec)\n\n# update the test record status\ntr.status = \"inprogress\"\ntr.update()\n\n# Adding a linked Item\n# TestCase MYPROJ-2828 verifies Requirement MYPROJ-11\ntc = TestCase(project_id=\"MYPROJ\", work_item_id=\"MYPROJ-2828\")\ntc.add_linked_item(\"MYPROJ-11\", \"verifies\")\n\n# Verify it on both objects:\ntc = TestCase(project_id=\"myproj\", work_item_id=\"MYPROJ-2828\")\nfor linked in tc.linked_work_items:\n    print \"%s - %s\" % (linked.work_item_id, linked.role)\n\nreq = Requirement(project_id=\"myproj\", work_item_id=\"MYPROJ-11\")\nfor linked in req.linked_work_items_derived:\n    print \"%s - %s\" % (linked.work_item_id, linked.role)\n```\n\n## Before you commit\n\nIn order to ensure you are able to pass the GitHub CI build, it is recommended that you run the following commands in the base of your pylero directory\n\n``` python\n$ pip install pre-commit\n$ pre-commit autoupdate && pre-commit run -a\n```\n\nPre-commit will ensure that the changes you made are not in violation of PEP8 standards and automatically apply black fixes.\n\nWe recommend `black` to automatically fix any pre-commit failures.\n\n``` python\n$ pip install black\n$ black <edited_file.py>\n```\n\n## Fedora RPM package build\n\n### Tito\n\n[Tito](https://github.com/rpm-software-management/tito) is a tool for managing RPM based projects using git for their source code repository.\n\nThe tito config dir is [.tito](./.tito)\n\nTo create a new tag and automaticlly update pylero.spec with all changelog:\n\n`$ tito tag`\n\nAfter tag need push the tag:\n\n`git push --follow-tags`\n\nAfter tag been pushed a new Copr build will be automatically triggered.\n\n### Copr\n\nFedora [Copr](https://copr.fedorainfracloud.org/) Build System help make building and managing third party package repositories easy.\n\nEach pylero new release will trigger new copr build to fedora-all, EPEL8 and EPEL9.\n\nThe build is triggered by webhook defined in the project configuration.\n\nThe build project on Copr is [pylero](https://copr.fedorainfracloud.org/coprs/waynesun20/pylero/).\n\nCheck the target rpm package in the build to test locally.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RedHatQE/pylero",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylero",
    "package_url": "https://pypi.org/project/pylero/",
    "platform": null,
    "project_url": "https://pypi.org/project/pylero/",
    "project_urls": {
      "Homepage": "https://github.com/RedHatQE/pylero"
    },
    "release_url": "https://pypi.org/project/pylero/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python SDK for Polarion",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17289517,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ec08ee35acb86676aea207dd7aa64251b5e3f48951db422e96d8c7e01bb871a",
          "md5": "3845ee09564c7514441bf7c5d5d5ff67",
          "sha256": "33dfdc651cb52ba3a84007e04d535b5ae1ec04e3894d3543e7700f115b2d1209"
        },
        "downloads": -1,
        "filename": "pylero-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3845ee09564c7514441bf7c5d5d5ff67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97357,
        "upload_time": "2022-05-24T15:32:57",
        "upload_time_iso_8601": "2022-05-24T15:32:57.231443Z",
        "url": "https://files.pythonhosted.org/packages/3e/c0/8ee35acb86676aea207dd7aa64251b5e3f48951db422e96d8c7e01bb871a/pylero-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f6c9752c8dd8e3d949abd0d24bcd26726dc7ce6d2574caac4f3db095bbc5c71",
          "md5": "7c9265c6a808ba02963581ceb29444a2",
          "sha256": "7e706d7f8e3bddb33bf787fdb924903524efd3f19739c387694b3fc41f5b4524"
        },
        "downloads": -1,
        "filename": "pylero-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c9265c6a808ba02963581ceb29444a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97558,
        "upload_time": "2022-05-25T21:31:21",
        "upload_time_iso_8601": "2022-05-25T21:31:21.668201Z",
        "url": "https://files.pythonhosted.org/packages/4f/6c/9752c8dd8e3d949abd0d24bcd26726dc7ce6d2574caac4f3db095bbc5c71/pylero-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6d2433ba252eb67fd536f92f9e2856a0ecff6931ee0efb8caf5e703f4df4db2",
          "md5": "a06ec5c2e92d144b5e8c2d8d83bc7e41",
          "sha256": "5ce1e3012f1932ba2cc25e633d8ef90e373a502ce6fc46517ab069bbf3f9f105"
        },
        "downloads": -1,
        "filename": "pylero-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a06ec5c2e92d144b5e8c2d8d83bc7e41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70337,
        "upload_time": "2022-08-03T18:45:41",
        "upload_time_iso_8601": "2022-08-03T18:45:41.657766Z",
        "url": "https://files.pythonhosted.org/packages/f6/d2/433ba252eb67fd536f92f9e2856a0ecff6931ee0efb8caf5e703f4df4db2/pylero-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6e150709e0b9a408958a515ac7d34f20044ed1f17fe54d901bab5691a85a88d",
          "md5": "a10ff1d1f5411d70468e5080f5f792b2",
          "sha256": "7f22e056d4b4e912f9feafde0dbf2612fbde33303df7f3844e5e04b3325e9663"
        },
        "downloads": -1,
        "filename": "pylero-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a10ff1d1f5411d70468e5080f5f792b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 423739,
        "upload_time": "2022-09-21T14:37:44",
        "upload_time_iso_8601": "2022-09-21T14:37:44.589076Z",
        "url": "https://files.pythonhosted.org/packages/c6/e1/50709e0b9a408958a515ac7d34f20044ed1f17fe54d901bab5691a85a88d/pylero-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d4b0653aaf6f014d1dea3cb775a45b9d39ac6f7deb32cb3f3310639b2eb9f3b",
          "md5": "954d4e8ddad18a7b8522d4b0b4b9350a",
          "sha256": "b55a7711f5b020322d9759d6521b1ae66510aefaa712335a12fb252e16bb5b8b"
        },
        "downloads": -1,
        "filename": "pylero-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "954d4e8ddad18a7b8522d4b0b4b9350a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 424589,
        "upload_time": "2022-12-22T11:13:29",
        "upload_time_iso_8601": "2022-12-22T11:13:29.555289Z",
        "url": "https://files.pythonhosted.org/packages/4d/4b/0653aaf6f014d1dea3cb775a45b9d39ac6f7deb32cb3f3310639b2eb9f3b/pylero-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf75153d19f044b1e3c9dcc09988367c0af2c21abdb5e58100ef9e41cd4d8ef0",
          "md5": "d8dfa9680d0eedd4352ccc6e41087e57",
          "sha256": "aee81ba86b777241ba8efc5bd9f5124591ed4531c1d5a732ac3f0d21d03ee6eb"
        },
        "downloads": -1,
        "filename": "pylero-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d8dfa9680d0eedd4352ccc6e41087e57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 336349,
        "upload_time": "2023-02-17T14:49:30",
        "upload_time_iso_8601": "2023-02-17T14:49:30.417701Z",
        "url": "https://files.pythonhosted.org/packages/cf/75/153d19f044b1e3c9dcc09988367c0af2c21abdb5e58100ef9e41cd4d8ef0/pylero-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecc4b7274df4eeeeeab7e0043a4dffa661f6021d30f5ead57ef13854e3430e21",
          "md5": "d654fbe7b33f176591ce08d25b3a679f",
          "sha256": "0b93425c05b4f6e778b53137aaab8a348d3b5412173a07294c05f1bf165c3327"
        },
        "downloads": -1,
        "filename": "pylero-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d654fbe7b33f176591ce08d25b3a679f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 336196,
        "upload_time": "2023-02-23T16:33:33",
        "upload_time_iso_8601": "2023-02-23T16:33:33.856736Z",
        "url": "https://files.pythonhosted.org/packages/ec/c4/b7274df4eeeeeab7e0043a4dffa661f6021d30f5ead57ef13854e3430e21/pylero-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e8187ef99f790aa03d1736524de6bb8c2df072e37680f9308ba7a00f6aa3b03",
          "md5": "0ba68f17732c03acfbf710dd674402ce",
          "sha256": "a41e3cc73e8787846fbfde49495c3e03dca3183e074edf9249ea2437961704e4"
        },
        "downloads": -1,
        "filename": "pylero-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0ba68f17732c03acfbf710dd674402ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 337681,
        "upload_time": "2023-03-14T15:41:33",
        "upload_time_iso_8601": "2023-03-14T15:41:33.942854Z",
        "url": "https://files.pythonhosted.org/packages/6e/81/87ef99f790aa03d1736524de6bb8c2df072e37680f9308ba7a00f6aa3b03/pylero-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e8187ef99f790aa03d1736524de6bb8c2df072e37680f9308ba7a00f6aa3b03",
        "md5": "0ba68f17732c03acfbf710dd674402ce",
        "sha256": "a41e3cc73e8787846fbfde49495c3e03dca3183e074edf9249ea2437961704e4"
      },
      "downloads": -1,
      "filename": "pylero-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "0ba68f17732c03acfbf710dd674402ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 337681,
      "upload_time": "2023-03-14T15:41:33",
      "upload_time_iso_8601": "2023-03-14T15:41:33.942854Z",
      "url": "https://files.pythonhosted.org/packages/6e/81/87ef99f790aa03d1736524de6bb8c2df072e37680f9308ba7a00f6aa3b03/pylero-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}