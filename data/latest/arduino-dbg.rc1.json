{
  "info": {
    "author": "Aaron Kimball",
    "author_email": "akimball83@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "Arduino debugger\n================\n\nThis is a console debugger for use with sketches running on an embedded Arduino system.\nAfter uploading your sketch to the Arduino, you can connect the serial port to your\ncomputer and debug your running sketch with this application.\n\n![debugger\nscreenshot](https://raw.githubusercontent.com/kimballa/arduino-dbg/main/doc/dbg-screenshot.png)\n\nYou must include a small debugging library (`dbg.cpp` and `PyArduinoDebug.h`) available at\nhttps://github.com/kimballa/PyArduinoDebug in your application. \n\n* Arduino IDE users can include the `PyArduinoDebug` library in their sketch dependencies.\n* If compiling with a Makefile, you should `#include <PyArduinoDebug.h>` and link with\n  `libPyArduinoDebug.a` to enable debugging your sketch.\n\nYou will find instructions in `PyArduinoDebug.h` on the API for creating unconditional\nand assertion-based breakpoints, and emitting debug and trace messages.\n\nSetup\n-----\n\n* Install this debugger and its dependencies with: `pip install .`\n* If not already installed, install `binutils` through your OS package manager.\n* Clone and build the [Arduino library](https://github.com/kimballa/PyArduinoDebug) with\n  `make install`.\n* Follow instructions in `PyArduinoDebug.h` to include in your application.\n* Run `arduino-dbg` to launch the debug console. Use `-h` to see CLI options.\n* Set your Arduino platform: e.g.: `set arduino.platform = uno`\n* Use the `help` command at the prompt to see available capabilities.\n\nUsage\n-----\n\nTypical usage is something like:\n\n```\narduino-dbg -f /path/to/sketch.elf -p /dev/ttyACM0\n```\n\n(Assuming your Arduino's USB serial port connection is on `ttyACM0`.)\n\nIf you run the `break` command or press `^C` within the debugger, it will pause the\nrunning sketch so you can interrogate or set the values of variables (`print someglobal`),\nsee a `backtrace`, etc. Programmatic breakpoints can be selectively toggled on and off\nwith `breakpoint enable` and `breakpoint disable`. New breakpoints can be created from\nthe debugger at runtime only on platforms like the ARM Cortex-M4 which support\nmonitor-mode debugging. On AVR CPUs, you are restricted to breakpoints added statically\nin the source code.\n\nWithin the debugger, you can save a dump of the system registers and memory with `dump\n<filename>`. With this dump file and the compiled ELF file of your sketch, you can then\nperform offline debugging later with `arduino-dbg -d /path/to/filename.dump`, or by\nrunning `load /path/to/filename.dump` within the debugger.\n\nThe dump file will retain the filename of your sketch's ELF file. If you move it to a\ndifferent location, you can open the ELF file with `open /path/to/my.elf` within the\ndebugger after running the `load` command.\n\nThere are several additional commands. Typing `help` will list available commands in the\ndebugger. Type `help <command>` to see usage information for each specific command.\n\nType `quit`, `exit`, or `\\q` to quit the debugger.\n\nArduino platforms\n-----------------\n\nYou should specify what Arduino platform you are using with the `set` command. e.g.:\n\n```\nset arduino.platform = uno\n```\n\nThe available platforms are:\n\n* `feather_m4`\n* `leonardo`\n* `uno`\n\nYou can see an up-to-date list of supported Arduino platforms with the `list platforms`\ncommand. The `list architectures` command will display supported CPU architectures.\n\nBy default the platform is `auto`, and the debugger will attempt to auto-detect your CPU.\nYou can force auto-detection with:\n\n```\nset arduino.platform = auto\n```\n\nPlease open an issue if you are interested in support for additional platforms. At the\ntime of this writing, the debugger has the ability to support AVR- and ARM-based\nplatforms; each new cpu or platform in these families just requires a new configuration file\nto be added and tested.\n\nType `set` to see more configuration variables you can modify. Once set, configuration is\nsaved to `~/.arduino_dbg.conf` and reused in future sessions. You can delete this file and\nrestart the debugger to reinitialize the default configuration.\n\nCPU-assisted debugger support\n-----------------------------\n\nThis debugger can perform useful functions on any Arduino with a USB-serial connection.\nThe debugger service can be activated by breakpoints introduced with the `BREAK()` macro\nor by issuing the `break` (`^C`) command within the debugger prompt.\n\nBeyond that, for CPUs that support \"monitor-mode debugging\" (where debug events trigger an\nIRQ which can be handled with onboard software, rather than requiring control by an\nexternal JTAG debugger), such as the ARM SAMD51-based Cortex-M4, used in the Adafruit\nFeather-M4 platform, this debugger can also take advantage of CPU-assisted debugging\nfeatures such as single-stepping with the `step` (`\\s`) command, or using the ability to\ncreate new breakpoints or watchpoints dynamically at run-time.\n\nOn such platforms, the ARM `BKPT` opcode will also properly enter the debugger service.\n\nLicense\n=======\n\nThis project is licensed under the BSD 3-Clause license. See LICENSE.txt for complete details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kimballa/arduino-dbg",
    "keywords": "Arduino,debugger",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "arduino-dbg",
    "package_url": "https://pypi.org/project/arduino-dbg/",
    "platform": null,
    "project_url": "https://pypi.org/project/arduino-dbg/",
    "project_urls": {
      "Homepage": "https://github.com/kimballa/arduino-dbg"
    },
    "release_url": "https://pypi.org/project/arduino-dbg/0.2.0/",
    "requires_dist": [
      "pyelftools (>=0.27)",
      "pyserial (>=3.5)",
      "sortedcontainers (>=2.4.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Interactive debugger for Arduino device sketches",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13232315,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e067d5c55f966597d47d51cdfaad96622de52e2371072c89842dd92269af7d55",
          "md5": "bef10b5cba47054397d159b91724b915",
          "sha256": "42be7f61012ba2502ecbc265c4a11a057349fad276af605027439423f46277fb"
        },
        "downloads": -1,
        "filename": "arduino_dbg-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bef10b5cba47054397d159b91724b915",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 154875,
        "upload_time": "2022-03-20T20:50:33",
        "upload_time_iso_8601": "2022-03-20T20:50:33.964548Z",
        "url": "https://files.pythonhosted.org/packages/e0/67/d5c55f966597d47d51cdfaad96622de52e2371072c89842dd92269af7d55/arduino_dbg-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30561b82ec5f313c4cb491264838409bd91120937408c0ba4ce2f4708e5d206b",
          "md5": "78fb2f53340ff0cc8129077f506ed2b8",
          "sha256": "2798b7971139d7cacc893bfac4c790d5218026473afc14e9a07b931a953f2583"
        },
        "downloads": -1,
        "filename": "arduino-dbg-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78fb2f53340ff0cc8129077f506ed2b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 881514,
        "upload_time": "2022-03-20T20:50:35",
        "upload_time_iso_8601": "2022-03-20T20:50:35.931425Z",
        "url": "https://files.pythonhosted.org/packages/30/56/1b82ec5f313c4cb491264838409bd91120937408c0ba4ce2f4708e5d206b/arduino-dbg-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e067d5c55f966597d47d51cdfaad96622de52e2371072c89842dd92269af7d55",
        "md5": "bef10b5cba47054397d159b91724b915",
        "sha256": "42be7f61012ba2502ecbc265c4a11a057349fad276af605027439423f46277fb"
      },
      "downloads": -1,
      "filename": "arduino_dbg-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bef10b5cba47054397d159b91724b915",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 154875,
      "upload_time": "2022-03-20T20:50:33",
      "upload_time_iso_8601": "2022-03-20T20:50:33.964548Z",
      "url": "https://files.pythonhosted.org/packages/e0/67/d5c55f966597d47d51cdfaad96622de52e2371072c89842dd92269af7d55/arduino_dbg-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30561b82ec5f313c4cb491264838409bd91120937408c0ba4ce2f4708e5d206b",
        "md5": "78fb2f53340ff0cc8129077f506ed2b8",
        "sha256": "2798b7971139d7cacc893bfac4c790d5218026473afc14e9a07b931a953f2583"
      },
      "downloads": -1,
      "filename": "arduino-dbg-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "78fb2f53340ff0cc8129077f506ed2b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 881514,
      "upload_time": "2022-03-20T20:50:35",
      "upload_time_iso_8601": "2022-03-20T20:50:35.931425Z",
      "url": "https://files.pythonhosted.org/packages/30/56/1b82ec5f313c4cb491264838409bd91120937408c0ba4ce2f4708e5d206b/arduino-dbg-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}