{
  "info": {
    "author": "Norman Kr√§mer",
    "author_email": "kraemer.norman@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "olap.xmla\n=========\n\nThis package is meant for accessing xmla datasources - see\nhttp://en.wikipedia.org/wiki/XML\\_for\\_Analysis\n\nBuilding\n-\n\nIn this directory, run:\n\n    python setup.py build\n\nTesting\n-\n\nTests are done against the Mondrian, SSAS XMLA providers. The\ntestsDiscover module tests behavior with different XMLA providers with\nthe Discover command while testsExecute does the same with the Execute\ncommand. Note that you likely need to modify the sources if you want to\ntest yourself since they contain specifics (namely the location of the\nservices and names of the data sources).\n\nExample\n-\n\nHere is an example how to use it:\n\n```python\n\n    import olap.xmla.xmla as xmla\n    p = xmla.XMLAProvider()\n    # mondrian\n    c = p.connect(location=\"http://localhost:8080/mondrian/xmla\")\n\n    # or ssas - note that thhis needs setup on an iis\n    # also you'll probably need to authenticate using kerberos\n    # from requests_kerberos import HTTPKerberosAuth\n    # c = p.connect(location=\"https://my-as-server/olap/msmdpump.dll\", \n    #               sslverify=\"/path/to/my/as-servers-ca-cert.pem\", auth=HTTPKerberosAuth())\n\n    # getting info about provided data\n    print(c.getDatasources())\n    print(c.getMDSchemaCubes())\n    # for ssas a catalog is needed, so the call would be like\n    # get a catalogname from a call to c.getDBSchemaCatalogs()\n    # c.getMDSchemaCubes(properties={\"Catalog\":\"a catalogname\"})\n\n    # execute a MDX (working against the foodmart sample catalog of mondrian)\n    cmd= \"\"\"\n    select {[Measures].ALLMEMBERS} * {[Time].[1997].[Q2].children} on columns, \n    [Gender].[Gender].ALLMEMBERS on rows \n    from [Sales]\n    \"\"\"\n\n    res = c.Execute(cmd, Catalog=\"FoodMart\")\n    #return only the Value property from the cells\n    res.getSlice(properties=\"Value\")\n    # or two props\n    res.getSlice(properties=[\"Value\", \"FmtValue\"]) \n\n    # to return some subcube from the result you can\n    # return all\n    res.getSlice()\n    # just the 4th column\n    res.getSlice(Axis0=3) \n    # same as above, SlicerAxis is ignored\n    res.getSlice(Axis0=3, SlicerAxis=0) \n    # return the data sliced at the 2nd and 3rd row\n    res.getSlice(Axis1=[1,2]) \n    # return the data sliced at the 2nd and 3rd row and at the 4th column\n    res.getSlice(Axis0=3, Axis1=[1,2]) \n```\n\nUsing the procedural interface:\n```python\n\n    import olap.xmla.xmla as xmla\n\n    p = xmla.XMLAProvider()\n    c = p.connect(location=\"http://localhost:8080/mondrian/xmla\")\n    s = c.getOLAPSource()\n\n    # import olap.interfaces as oi\n    # oi.IOLAPSource.providedBy(s) == True\n\n    s.getCatalogs()\n    s.getCatalog(\"FoodMart\").getCubes()\n    s.getCatalog(\"FoodMart\").getCube(\"HR\").getDimensions()\n    s.getCatalog(\"FoodMart\").getCube(\"HR\").getDimension(\"[Department]\").\\\n    getMembers()\n    s.getCatalog(\"FoodMart\").getCube(\"HR\").getDimension(\"[Department]\").\\\n    getMember(\"[Department].[14]\")\n\n    cmd= \"\"\"\n    select {[Measures].ALLMEMBERS} * {[Time].[1997].[Q2].children} on columns, \n    [Gender].[Gender].ALLMEMBERS on rows \n    from [Sales]\n    \"\"\"\n    res=s.getCatalog(\"FoodMart\").query(cmd)\n    res.getSlice()\n```\n\nNote\n-\n\nThe contained vs.wsdl originates from the following package:\nhttp://www.microsoft.com/en-us/download/confirmation.aspx?id=9388 and\nwas subsequently modified (which parameters go in the soap header) to\nwork with the zeep.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/may-day/olap",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netas-xmla-with-dax",
    "package_url": "https://pypi.org/project/netas-xmla-with-dax/",
    "platform": "",
    "project_url": "https://pypi.org/project/netas-xmla-with-dax/",
    "project_urls": {
      "Homepage": "https://github.com/may-day/olap"
    },
    "release_url": "https://pypi.org/project/netas-xmla-with-dax/0.8.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Access olap data sources through xmla",
    "version": "0.8.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8812046,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c159b2459711d7462df9d0a0665e2f34d07d00417e68abe937e4dbb43f35032",
          "md5": "003588876000db46ee5a8c7e2de2cac9",
          "sha256": "4a365bcd420b4efa22766665b43f760b728e3c0bbcd2cd39219e7f648d2d8371"
        },
        "downloads": -1,
        "filename": "netas-xmla-with-dax-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "003588876000db46ee5a8c7e2de2cac9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 386333,
        "upload_time": "2020-12-03T12:29:22",
        "upload_time_iso_8601": "2020-12-03T12:29:22.771684Z",
        "url": "https://files.pythonhosted.org/packages/6c/15/9b2459711d7462df9d0a0665e2f34d07d00417e68abe937e4dbb43f35032/netas-xmla-with-dax-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee48bd35a9ce8acc0bcc1851994703f8aaf3d41e450d3adca57656ab7cf5c64",
          "md5": "68bfb6c05d9328139369927e9b42792e",
          "sha256": "fa8b743b974053d80dce941b63611804bdb0e43a519d4a12b4c15ceb639620fe"
        },
        "downloads": -1,
        "filename": "netas-xmla-with-dax-0.8.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68bfb6c05d9328139369927e9b42792e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 386350,
        "upload_time": "2020-12-03T14:47:14",
        "upload_time_iso_8601": "2020-12-03T14:47:14.118146Z",
        "url": "https://files.pythonhosted.org/packages/0e/e4/8bd35a9ce8acc0bcc1851994703f8aaf3d41e450d3adca57656ab7cf5c64/netas-xmla-with-dax-0.8.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ee48bd35a9ce8acc0bcc1851994703f8aaf3d41e450d3adca57656ab7cf5c64",
        "md5": "68bfb6c05d9328139369927e9b42792e",
        "sha256": "fa8b743b974053d80dce941b63611804bdb0e43a519d4a12b4c15ceb639620fe"
      },
      "downloads": -1,
      "filename": "netas-xmla-with-dax-0.8.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "68bfb6c05d9328139369927e9b42792e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 386350,
      "upload_time": "2020-12-03T14:47:14",
      "upload_time_iso_8601": "2020-12-03T14:47:14.118146Z",
      "url": "https://files.pythonhosted.org/packages/0e/e4/8bd35a9ce8acc0bcc1851994703f8aaf3d41e450d3adca57656ab7cf5c64/netas-xmla-with-dax-0.8.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}