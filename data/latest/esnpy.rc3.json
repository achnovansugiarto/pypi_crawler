{
  "info": {
    "author": "",
    "author_email": "Théo BL <biasutto.t@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# esnpy\n\n`esnpy` is an out-of-the-box framework to experiment around ESN and DeepESN.  \nModels have been implemented in pure NumPy/SciPy, so there is no need for a powerful GPU, or any esoteric requirements. \n\nRight now, the focus is on batch training, and feedback loops have not been taken into account.  \nBut feel free to open a ticket a discuss about anything you need, features you want, or even help !\n\nNote from the author: *`esnpy` is a small projet I initiated during my master intership, and have recently cleaned up. I might keep working on it for fun, but If you want/need a more robust framework, [ReservoirPy](https://github.com/reservoirpy/reservoirpy) might be the one you're searching for ;)*\n\n## Getting Started\n\n### Installation\n\n**From PyPI**\n```bash\npip install esnpy\n```\n\n**From source**\n```bash\npip install git+https://github.com/NiziL/esnpy#egg=esnpy\n```\nUse `github.com/NiziL/esnpy@<tag or branch>#egg=esnpy` to install from a specific branch or tag instead of main.\n\n### Quickstart\n\n```python\nimport esnpy\n\nreservoir_builder = createBuilder()\ntrainer = createTrainer()\nwarmup, data, target = loadData()\n\n# create the echo state network\nesn = esnpy.ESN(reservoir_builder.build(), trainer)\n# train it\nesn.fit(warmup, data, target)\n# test it\npredictions = esnpy.transform(data)\nprint(f\"error: {compute_err(target, predictions)}\")\n```\n\n#### `ESN` and `DeepESN`\n\nYou can create your ESN with `esnpy.ESN`. \nThe constructor needs a `esnpy.Reservoir` and an implementation of `esnpy.train.Trainer`. \n\n`esnpy.DeepESN` doesn't differ a lot, it just expect a list of `Reservoir` and have an optional parameters `mask` to specify from which reservoirs the `Trainer` should learn. The size of `mask` and `reservoirs` must be the same. \n\nThen, simply call `fit` function by passing some warm up and training data with the related targets.  \nOnce trained, run predictions using `transform`.\n\n#### `Reservoir` and `ReservoirBuilder`\n\nA `Reservoir` can easily be initialized using the `ReservoirBuilder` dataclass.  \nFor convenience, the configuration class is also a builder, exposing a `build()` method.\nThis method has an optional `seed` parameter used to make deterministic initialization, and so to ease the comparaison of two identical reservoirs.\n\n| Parameters    | Type                     | Description                                  | Default   |\n|---------------|--------------------------|----------------------------------------------|-----------|\n| input_size    | `int`                    | Size of input vectors                        |           |\n| size          | `int`                    | Number of units in the reservoir             |           |\n| leaky         | `float`                  | Leaky parameter of the reservoir             |           |\n| fn            | `Callable`               | Activation function of the reservoir         | `np.tanh` |\n| input_bias    | `bool`                   | Enable the usage of a bias in the input      | `True`    |\n| input_init    | `esnpy.init.Initializer` | Define how to initialize the input weights   |           |\n| input_tuners  | `list[esnpy.tune.Tuner]` | Define how to tune the input weights         | `[]`      |\n| intern_init   | `esnpy.init.Initializer` | Define how to intialize the internal weights |           |\n| intern_tuners | `list[esnpy.init.Tuner]` | Define how to tune the internal weights      | `[]`      |\n\n#### `Initializer` and `Tuner` \n\n`esnpy.init.Initializer` and `esnpy.tune.Tuner` are the abstract base classes used to setup the input and internal weights of a reservoir.\n\n`Initializer` is defined by a `init() -> Matrix` function. \n`esnpy` provides implementations of initializer for both uniform and gaussian distribution of weights, and for both dense and sparse matrix.\n\n`Tuner` is defined by a `init(matrix : Matrix) -> Matrix` function, which can be used to modify the weights after initialization.\nFor example, `esnpy` provides a `SpectralRadiusTuner` to change the spectral radius of a weights matrix.\n\n#### `Trainer`\n\n`esnpy.train.Trainer` is responsible to create the output weights matrix from the training data and targets.  \nIt is defined by a `train(inputs: Matrix, data: Matrix, target: Matrix) -> Matrix` function.\n\n`esnpy` provides a `RidgeTrainer` to compute the output weights using a ridge regression. \nThis trainer has three parameters : one float, the regularization parameter's weight `alpha`, and two optionals boolean (default to true) `use_bias` and `use_input` to control if we should use a bias and the input to compute the readout weights.\n\n## Code Examples \n\nWant to see some code in action ? Take a look at the `examples/` directory:\n- `MackeyGlass/` demonstrates how to learn to predict a time series,\n- `TrajectoryClassification/` demonstrates how to learn to classify 2D trajectories.\n\n## Bibliography\n\nBased on:\n- *The \"echo state\" approach to analysing and training recurrent neural networks* by Herbert Jaeger ([pdf](https://www.ai.rug.nl/minds/uploads/EchoStatesTechRep.pdf)),\n- *A pratical guide to applying Echo State Networks* by Mantas Lukoševičius ([pdf](https://www.ai.rug.nl/minds/uploads/PracticalESN.pdf)),\n- *Design of deep echo state networks* by Claudio Gallicchio and al ([link](https://www.sciencedirect.com/science/article/pii/S0893608018302223)),\n- *Deep echo state network (DeepESN): A brief survey* by Claudio Gallicchio and Alessio Micheli ([pdf](https://arxiv.org/pdf/1712.04323.pdf)).\n\nSpecial thanks to Mantas Lukoševičius for his [minimal ESN example](https://mantas.info/wp/wp-content/uploads/simple_esn/minimalESN.py), which greatly helped me to get started with reservoir computing.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "machine learning,neural networks,echo state network",
    "license": "The MIT License (MIT)  Copyright (c) 2015  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "esnpy",
    "package_url": "https://pypi.org/project/esnpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/esnpy/",
    "project_urls": {
      "GitHub": "https://github.com/NiziL/esnpy"
    },
    "release_url": "https://pypi.org/project/esnpy/0.3.0/",
    "requires_dist": [
      "numpy (>=1.23.0)",
      "scipy (>=1.9.3)",
      "sphinx ; extra == 'doc'",
      "sphinx-pyproject ; extra == 'doc'",
      "black ; extra == 'lint'",
      "flake8 ; extra == 'lint'"
    ],
    "requires_python": ">=3.9",
    "summary": "Out-of-the-box framework for Echo State Networks",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16331257,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d7bf3f1192cc26e9b57757214034fc84d54d755e172f3cc0530040de513288e",
          "md5": "ac1b829c7bdf84558667ea0c59f34d3d",
          "sha256": "abf5e9b34a01a174e4623973ae56640481bc938e1c51d8319cd77802ccf114c3"
        },
        "downloads": -1,
        "filename": "esnpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac1b829c7bdf84558667ea0c59f34d3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 8762,
        "upload_time": "2022-12-07T14:10:32",
        "upload_time_iso_8601": "2022-12-07T14:10:32.186975Z",
        "url": "https://files.pythonhosted.org/packages/0d/7b/f3f1192cc26e9b57757214034fc84d54d755e172f3cc0530040de513288e/esnpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4433ce478c95250370542ed1fb1f677bf884dac3848fba9e1c8c463cae51e02a",
          "md5": "2900e36518ef931e9273b19d3edde869",
          "sha256": "c20f3a2a57dec33db6f28bc7638d0ec007f1ef8b02a8b1a25912c7e2d538d98b"
        },
        "downloads": -1,
        "filename": "esnpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2900e36518ef931e9273b19d3edde869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9642,
        "upload_time": "2022-12-07T14:10:33",
        "upload_time_iso_8601": "2022-12-07T14:10:33.514880Z",
        "url": "https://files.pythonhosted.org/packages/44/33/ce478c95250370542ed1fb1f677bf884dac3848fba9e1c8c463cae51e02a/esnpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5ad7afed8bb7ea3ab96456e96af1f7c72bc0490144482c06138452ce50666a4",
          "md5": "9a445b60901868c566d62cffce98b624",
          "sha256": "1d72f239491dbcb742f9de59a054748f8446d7bd702ced0a29bf8f2e5bbfbf87"
        },
        "downloads": -1,
        "filename": "esnpy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a445b60901868c566d62cffce98b624",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 8819,
        "upload_time": "2022-12-11T15:38:26",
        "upload_time_iso_8601": "2022-12-11T15:38:26.936397Z",
        "url": "https://files.pythonhosted.org/packages/c5/ad/7afed8bb7ea3ab96456e96af1f7c72bc0490144482c06138452ce50666a4/esnpy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adb0659d07ee539d3696665f30a217eca68180e17ebe6d697b4b2f17b68e439e",
          "md5": "743004fe4a0ee872af3f1870a840c907",
          "sha256": "de93c4fac28e282dd050a0213a22c0c215f501e147494fb4ca3341cfc3de7cec"
        },
        "downloads": -1,
        "filename": "esnpy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "743004fe4a0ee872af3f1870a840c907",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9799,
        "upload_time": "2022-12-11T15:38:28",
        "upload_time_iso_8601": "2022-12-11T15:38:28.804966Z",
        "url": "https://files.pythonhosted.org/packages/ad/b0/659d07ee539d3696665f30a217eca68180e17ebe6d697b4b2f17b68e439e/esnpy-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b9f4e65f48f7ae682874c28a66c41b6083aa821c6383e665ccb36fa90b15d1",
          "md5": "df3e5b9619488e7e5a063137cab90365",
          "sha256": "6a68027e67c413fc9372aa1e86ae4b3f2812e616c9dd7eb5deb8128b7e3f57df"
        },
        "downloads": -1,
        "filename": "esnpy-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df3e5b9619488e7e5a063137cab90365",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9251,
        "upload_time": "2023-01-06T14:21:58",
        "upload_time_iso_8601": "2023-01-06T14:21:58.643234Z",
        "url": "https://files.pythonhosted.org/packages/02/b9/f4e65f48f7ae682874c28a66c41b6083aa821c6383e665ccb36fa90b15d1/esnpy-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14cab06459358a2302c3235fd6af217c9efeba9d186cbc2b4a9505668f7c3704",
          "md5": "806fc51010bc6a1d851ddc00d698fd63",
          "sha256": "a21005564e1f9cfcdaf32738d22fa508bc8384c9935354d1d46f457be745adc0"
        },
        "downloads": -1,
        "filename": "esnpy-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "806fc51010bc6a1d851ddc00d698fd63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10430,
        "upload_time": "2023-01-06T14:21:59",
        "upload_time_iso_8601": "2023-01-06T14:21:59.923463Z",
        "url": "https://files.pythonhosted.org/packages/14/ca/b06459358a2302c3235fd6af217c9efeba9d186cbc2b4a9505668f7c3704/esnpy-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02b9f4e65f48f7ae682874c28a66c41b6083aa821c6383e665ccb36fa90b15d1",
        "md5": "df3e5b9619488e7e5a063137cab90365",
        "sha256": "6a68027e67c413fc9372aa1e86ae4b3f2812e616c9dd7eb5deb8128b7e3f57df"
      },
      "downloads": -1,
      "filename": "esnpy-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df3e5b9619488e7e5a063137cab90365",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 9251,
      "upload_time": "2023-01-06T14:21:58",
      "upload_time_iso_8601": "2023-01-06T14:21:58.643234Z",
      "url": "https://files.pythonhosted.org/packages/02/b9/f4e65f48f7ae682874c28a66c41b6083aa821c6383e665ccb36fa90b15d1/esnpy-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14cab06459358a2302c3235fd6af217c9efeba9d186cbc2b4a9505668f7c3704",
        "md5": "806fc51010bc6a1d851ddc00d698fd63",
        "sha256": "a21005564e1f9cfcdaf32738d22fa508bc8384c9935354d1d46f457be745adc0"
      },
      "downloads": -1,
      "filename": "esnpy-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "806fc51010bc6a1d851ddc00d698fd63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 10430,
      "upload_time": "2023-01-06T14:21:59",
      "upload_time_iso_8601": "2023-01-06T14:21:59.923463Z",
      "url": "https://files.pythonhosted.org/packages/14/ca/b06459358a2302c3235fd6af217c9efeba9d186cbc2b4a9505668f7c3704/esnpy-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}