{
  "info": {
    "author": "Philipp Schiele, Eric Luxenberg, Stephen Boyd",
    "author_email": "philipp.schiele@stat.uni-muenchen.de, ericlux@stanford.edu, boyd@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# DSP -  Disciplined Saddle Programming\n[![build](https://github.com/cvxgrp/dsp/actions/workflows/build.yml/badge.svg)](https://github.com/cvxgrp/dsp/actions/workflows/build.yml)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=dsp&metric=coverage)](https://sonarcloud.io/summary/new_code?id=dsp)\n\nA CVXPY extension for Disciplined Saddle Programming.\nDSP allows solving convex-concave saddle point problems, and more generally\nconvex optimization problems we refer to as _saddle problems_, which include the partial\nsupremum or infimum of convex-concave saddle functions.\nSaddle functions are functions that are (jointly) convex in a subset of their\narguments, and (jointly) concave in the remaining arguments.\nA detailed description of the underlying method is given in our [accompanying paper](https://arxiv.org/abs/2301.13427).\n\n## Installation\n\nThe DSP package can be installed using pip as follows\n```bash\npip install dsp-cvxpy\n```\nThe DSP package requires CVXPY 1.3 or later.\n\n## Minimal example\n\nThe following example creates and solves a simple saddle point problem known as a matrix game.\nA saddle point problem is created by specifying an objective and a list of constraints.\nHere, the objective is $f(x, y) = x^TCy$, which is simultaneously minimized over $x$ and maximized over $y$.\nThe resulting saddle point is an optimal mixed strategy for both players in the matrix game.\nEach component is explained below in more detail.\n\n```python\nimport dsp\nimport cvxpy as cp\nimport numpy as np\n\nx = cp.Variable(2)\ny = cp.Variable(2)\nC = np.array([[1, 2], [3, 1]])\n\nf = dsp.inner(x, C @ y)\nobj = dsp.MinimizeMaximize(f)\n\nconstraints = [x >= 0, cp.sum(x) == 1, y >= 0, cp.sum(y) == 1]\nprob = dsp.SaddlePointProblem(obj, constraints)\nprob.solve()  # solves the problem\n\nprob.value  # 1.6666666666666667\nx.value  # array([0.66666667, 0.33333333])\ny.value  # array([0.33333333, 0.66666667])\n```\n\n## New atoms\nIn DSP, saddle functions are created from atoms. Each atom represents a saddle function, with the convention being\nthat the first argument is the convex argument and the second argument is the concave argument.\n\n- `inner(x, y)`  \nThe inner product $x^Ty$, with both arguments affine.\n- `saddle_inner(Fx, Gy)`  \nThe inner product $F(x)^TG(y)$, with $F$ convex and nonnegative, and $G$ concave. If $G$ is not nonnegative, a constraint\n$G \\geq 0$ is added.\n- `weighted_norm2(x, y)`  \nThe weighted $\\ell_2$ norm $\\left(\\sum_i y_i x_i^2\\right)^{1/2}$. Here too, a constraint $y \\geq 0$ is added if $y$ is not\nnonnegative.\n- `weighted_log_sum_exp(x, y)`\nThe weighted log-sum-exp function $\\log\\left(\\sum_i y_i \\exp(x_i)\\right)$. Again a constraint $y \\geq 0$ is added if $y$ is not\nnonnegative.\n- `quasidef_quad_form(x, y, P, Q, S)`  \nFor a positive semidefinite matrix $P$ and a negative semidefinite matrix $S$, this atom represents the function\n\n$$\nf(x,y) = \\left[\\begin{array}{c} x \\\\\\\\ y \\end{array}\\right]^T\n\\left[\\begin{array}{cc} P & S \\\\\\\\ S^T & Q \\end{array}\\right]\n\\left[\\begin{array}{c} x \\\\\\\\ y \\end{array}\\right].\n$$\n- `saddle_quad_form(x, Y)`  \nThe quadratic form $x^TYx$, where $Y$ a positive semindefinite matrix.\n\n## Calculus rules\nSaddle functions can be scaled and composed by addition. DCP convex expressions are treated as saddle functions with\nno concave arguments, and DCP concave expressions are treated as saddle functions with no convex arguments.\nWhen adding two saddle functions, a variable may not appear as a convex variable in one expression and as a concave\nvariable in the other expression.\n\n## Saddle point problems\nTo create a saddle point problem, a `MinimizeMaximize` object is created first, which represents the objective function,\nusing\n```python\nobj = dsp.MinimizeMaximize(f)\n```\nwhere `f` is a DSP-compliant expression.\n\nThe syntax for specifying saddle point problems is\n```python\nproblem = dsp.SaddlePointProblem(obj, constraints, cvx_vars, ccv_vars)\n```\nwhere `obj` is the `MinimizeMaximize` object, `constraints` is a list of constraints, and `cvx_vars` and `ccv_vars` are\nlists of variables to be minimized and maximized over, respectively.\n\nEach constraint must be DCP, and can only involve variables that are either convex or concave.\nWhen the role of a variable can be inferred, it can be omitted from the list of convex or concave variables.\nThe role can be inferred either from a saddle atom, a DCP atom that is convex or concave, but not affine, or from a\nconstraint, when a variable appears in a constraint that involves variables with known roles.\n\nNevertheless, specifying the role of each variable can add clarity to the problem formulation, and is especially\nuseful for debugging.\n\nTo solve the problem, call `problem.solve()`. This returns the optimal saddle value, which is also stored in the\nproblem's `value` attribute. Further all `value` attribute of the variables are populated with their optimal values.\n\n## Saddle extremum functions\nA saddle extremum function has one of the forms\n\n$$\nG(x) = \\sup_{y \\in \\mathcal{Y}} f(x,y) \\quad \\text{or} \\quad\nH(y) = \\inf_{x \\in \\mathcal{X}} f(x,y),\n$$\n\nwhere $f$ is a saddle function, and $\\mathcal{X}$ and $\\mathcal{Y}$ are convex.\nSince the functions only depend on $x$ or $y$, respectively, the other variables have to be declared as\n`LocalVariable`s. Any `LocalVariable` can only be used in one saddle extremum function. The syntax for\ncreating a saddle extremum function is\n```python\ndsp.saddle_max(f, constraints)\ndsp.saddle_min(f, constraints)\n```\nwhere `f` is a DSP-compliant scalar saddle function, and `constraints` is a list of constraints, which can\nonly involve `LocalVariable`s. DSP-compliant saddle extremum functions are DCP-convex or DCP-concave, respectively,\nand as such can be used in DCP optimization problems.\n\nAn example of a saddle extremum function is\n```python\n# Creating variables\nx = cp.Variable(2)\n\n# Creating local variables\ny_loc = dsp.LocalVariable(2)\n\n# Convex in x, concave in y_loc\nf = dsp.saddle_inner(C @ x, y_loc)\n\n# maximizes over y_loc\nG = dsp.saddle_max(f, [y_loc >= 0, cp.sum(y_loc) == 1])\n```\n\n## Saddle problems\nA saddle problem is a convex optimization problem that involves saddle extremum functions. Any DCP convex optimization\ncan include saddle extremum functions when they are DSP-compliant. Using the saddle extremum function `G` from above,\nwe can solve the following problem:\n```python\nprob = cp.Problem(cp.Minimize(G), [x >= 0, cp.sum(x) == 1])\nprob.solve() # solving the problem\n\nprob.value # 1.6666666666666667\nx.value # array([0.66666667, 0.33333333])\n```\n\n## Citation\nIf you want to reference DSP in your research, please consider citing us by using the following BibTeX:\n\n```BibTeX\n@misc{schiele2023dsp,\n  title = {Disciplined Saddle Programming},\n  author = {Schiele, Philipp and Luxenberg, Eric and Boyd, Stephen},\n  year = {2023},\n  doi = {10.48550/arXiv.2301.13427},\n  url = {https://arxiv.org/abs/2301.13427},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cvxgrp/dsp",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsp-cvxpy",
    "package_url": "https://pypi.org/project/dsp-cvxpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/dsp-cvxpy/",
    "project_urls": {
      "Homepage": "https://github.com/cvxgrp/dsp"
    },
    "release_url": "https://pypi.org/project/dsp-cvxpy/0.1.0/",
    "requires_dist": [
      "cvxpy (>=1.3)",
      "numpy",
      "scipy",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Disciplined Saddle Programming",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17195225,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07003d78b9b698ee80ce26917c472a6b338be927de899ea5eed636bf2365bf38",
          "md5": "8fbedcb5c6a05252e65b9ba26d311710",
          "sha256": "1b4ff8ad24752cc3b7fe9b05480f355f16a0d3fd1bc776de51d2cd29d396a7b4"
        },
        "downloads": -1,
        "filename": "dsp_cvxpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fbedcb5c6a05252e65b9ba26d311710",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46726,
        "upload_time": "2023-03-06T11:55:02",
        "upload_time_iso_8601": "2023-03-06T11:55:02.399833Z",
        "url": "https://files.pythonhosted.org/packages/07/00/3d78b9b698ee80ce26917c472a6b338be927de899ea5eed636bf2365bf38/dsp_cvxpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "982a611a100336fa09de12c961e6e56c682e708ea087d64c404af07ba39de7f6",
          "md5": "c73110849bef3e62f89e10d502ab651e",
          "sha256": "6392d5e9b84394e110999e86524e3ad1f8ff8d2ceb64eeff6c9b4a908263734a"
        },
        "downloads": -1,
        "filename": "dsp-cvxpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c73110849bef3e62f89e10d502ab651e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40060,
        "upload_time": "2023-03-06T11:55:04",
        "upload_time_iso_8601": "2023-03-06T11:55:04.292378Z",
        "url": "https://files.pythonhosted.org/packages/98/2a/611a100336fa09de12c961e6e56c682e708ea087d64c404af07ba39de7f6/dsp-cvxpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07003d78b9b698ee80ce26917c472a6b338be927de899ea5eed636bf2365bf38",
        "md5": "8fbedcb5c6a05252e65b9ba26d311710",
        "sha256": "1b4ff8ad24752cc3b7fe9b05480f355f16a0d3fd1bc776de51d2cd29d396a7b4"
      },
      "downloads": -1,
      "filename": "dsp_cvxpy-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fbedcb5c6a05252e65b9ba26d311710",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 46726,
      "upload_time": "2023-03-06T11:55:02",
      "upload_time_iso_8601": "2023-03-06T11:55:02.399833Z",
      "url": "https://files.pythonhosted.org/packages/07/00/3d78b9b698ee80ce26917c472a6b338be927de899ea5eed636bf2365bf38/dsp_cvxpy-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "982a611a100336fa09de12c961e6e56c682e708ea087d64c404af07ba39de7f6",
        "md5": "c73110849bef3e62f89e10d502ab651e",
        "sha256": "6392d5e9b84394e110999e86524e3ad1f8ff8d2ceb64eeff6c9b4a908263734a"
      },
      "downloads": -1,
      "filename": "dsp-cvxpy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c73110849bef3e62f89e10d502ab651e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40060,
      "upload_time": "2023-03-06T11:55:04",
      "upload_time_iso_8601": "2023-03-06T11:55:04.292378Z",
      "url": "https://files.pythonhosted.org/packages/98/2a/611a100336fa09de12c961e6e56c682e708ea087d64c404af07ba39de7f6/dsp-cvxpy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}