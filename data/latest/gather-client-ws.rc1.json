{
  "info": {
    "author": "Anderson de Sousa Lima",
    "author_email": "anderson.sl93@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Gather WebSocket Client\n=======================\n\nInstallation\n------------\n\n::\n\n   pip install gather-client-ws\n\nDocumentation\n-------------\n\nAuth\n~~~~\n\nGenerate your ``API_KEY`` here: https://gather.town/apiKeys\n\nBasic Usage\n~~~~~~~~~~~\n\n.. code:: python\n\n   import asyncio\n\n   from gather_client_ws import GatherClient\n\n\n   async def producer(client):\n       await client.set_text_status(\"new status text\")\n       await client.set_emoji_status(\"üòÅ\")\n\n\n   async def main():\n       client = GatherClient(api_key=API_KEY, space_id=SPACE_ID)\n       await client.run(producer)\n\n\n   asyncio.run(main())\n\n   # Output\n   [2023-03-19 22:44:57,340][INFO] Connected to wss://engine-a00a0.aaa0-.prod.do.gather.town:443/\n   [2023-03-19 22:44:57,637][INFO] Connected as user USER_ID\n\nAdding extra args and kwargs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import asyncio\n\n   from gather_client_ws import GatherClient\n\n\n   async def producer(client, *args, **kwargs):\n       await client.set_text_status(\"new status text\")\n       await client.set_emoji_status(\"üòÅ\")\n       print(args)\n       print(kwargs)\n\n\n   async def main():\n       client = GatherClient(api_key=API_KEY, space_id=SPACE_ID)\n       await client.run(producer, 'arg', k='kwarg')\n\n\n   asyncio.run(main())\n\n   # Output\n   [2023-03-19 22:44:57,340][INFO] Connected to wss://engine-a00a0.aaa0-.prod.do.gather.town:443/\n   [2023-03-19 22:44:57,637][INFO] Connected as user USER_ID\n   ('arg',)\n   {'k': 'kwarg'}\n\nServer response callback\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA callback function can be defined, this function will receive the\n``client`` and the ``ServerClientBatch`` message:\n\n.. code:: python\n\n   ...\n\n   async def callback(client, server_response):\n       for event in server_response.events:\n           print(event.WhichOneof(\"event\"))\n\n\n   async def producer(client):\n       await asyncio.sleep(30)  # hold the connection for 30 seconds\n\n\n   async def main():\n       client = GatherClient(api_key=API_KEY, space_id=SPACE_ID, callback=callback)\n       await client.run(producer)\n\n\n   asyncio.run(main())\n\n   # Output\n   [2023-03-19 22:56:33,840][INFO] Connected to wss://engine-a00a0.aaa0-.prod.do.gather.town:443/\n   [2023-03-19 22:56:34,351][INFO] Connected as user USER_ID\n   transactionStatus\n   transactionStatus\n   serverHeartbeat\n   serverHeartbeat\n   serverHeartbeat\n\nLogger level\n~~~~~~~~~~~~\n\nIt is possible to define the client log level.\n\n.. code:: python\n\n   import logging\n\n   ...\n\n   async def main():\n       client = GatherClient(api_key=API_KEY, space_id=SPACE_ID, log_level=logging.DEBUG)\n       await client.run(producer)\n\n\n   asyncio.run(main())\n\n   # Output\n   [2023-03-19 23:01:08,274][INFO] Connected to wss://engine-a00a0.aaa0-a.prod.do.gather.town:443/\n   [2023-03-19 23:01:08,581][INFO] Connected as user USER_ID\n   [2023-03-19 23:01:08,582][DEBUG] Receiving messages        \n   [2023-03-19 23:01:08,582][DEBUG] Heartbeat sent            \n   [2023-03-19 23:01:08,743][DEBUG] Message received: events {\n     transactionStatus {\n       txnId: 3675756270\n       succeeded: true  \n     }                  \n   }                    \n   events {             \n     transactionStatus {\n       txnId: 226152914\n       succeeded: true\n     }\n   }\n\n   [2023-03-19 23:01:18,514][DEBUG] Message received: events {                                   \n     serverHeartbeat {                                                                           \n       lastRTT: 4240423196                                                                       \n     }                                                                                           \n   }\n\nActions\n~~~~~~~\n\nListing the available actions:\n\n.. code:: python\n\n   ...\n   print(client.available_actions)\n   # Output\n   ['client_heartbeat', 'client_backup_heartbeat', 'update_subscriptions', 'move', 'set_affiliation', 'set_status', 'spotlight', 'ring', 'ban', 'kick', 'set_impassable', 'chat', 'interact', 'enter_whisper', 'leave_whisper', 'set_emoji_status', 'actively_speaking', 'set_name', 'set_text_status', 'teleport', 'exit', 'enter', 'set_work_condition', 'respawn', 'spawn', 'ghost', 'init', 'set_outfit_string', 'shoot_confetti', 'set_event_status', 'set_in_conversation', 'set_current_desk', 'set_current_area', 'set_image_pointer', 'set_go_kart_id', 'map_set_dimensions', 'map_set_collisions', 'map_set_background_image_path', 'map_set_foreground_image_path', 'map_set_sprites', 'map_set_spawns', 'map_set_spaces', 'map_set_portals', 'map_set_announcer', 'map_set_assets', 'map_set_objects', 'map_set_name', 'map_set_mute_on_entry', 'map_set_use_drawn_b_g', 'map_set_walls', 'map_set_floors', 'map_set_areas', 'map_add_object', 'map_delete_object', 'map_set_spawn', 'set_is_alone', 'map_set_mini_map_image_path', 'map_set_enabled_chats', 'map_set_description', 'map_set_decoration', 'map_set_tutorial_tasks', 'play_sound', 'map_set_script', 'set_is_mobile', 'set_screen_pointer', 'set_emote_v2', 'set_focus_mode_end_time', 'map_delete_object_by_id', 'custom_action', 'block', 'set_item_string', 'trigger_item', 'notify', 'set_follow_target', 'request_to_lead', 'enter_portal', 'set_manual_video_src', 'set_subtitle', 'player_updates_session', 'map_move_object', 'chat_message_updated', 'fx_shake_object', 'fx_shake_camera', 'register_command', 'send_command', 'speaker_updates_session', 'add_inventory_item', 'remove_inventory_item', 'set_vehicle_id', 'set_speed_modifier', 'high_five', 'update_space_items', 'stop_sound', 'hip_to_be_square', 'craft', 'trigger_inventory_item', 'set_allow_screen_pointer', 'precompute_enter', 'request_mute', 'set_desk_info', 'map_set_nooks', 'request_to_join_nook', 'update_nook_permission', 'wave', 'set_pronouns', 'set_title', 'set_timezone', 'set_phone', 'set_description', 'set_profile_image_url', 'set_personal_image_url', 'set_away', 'set_city', 'set_country', 'set_start_date', 'start_recording']\n\nAccessing the basic documentation of each action:\n\n.. code:: python\n\n   ...\n   print(client.set_text_status.__doc__)\n   # Output\n   set_text_status\n   Args:\n           text_status (str)\n           target_id (str)\n\nOR\n\n.. code:: python\n\n   help(client.craft)\n   # Output\n   Help on method method in module gather_client_ws.actions:\n\n   async method(*args, **kwargs) method of gather_client_ws.client.GatherClient instance\n       craft\n       Args:\n               inputs (InputsEntry)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyanderson/gather-client-ws",
    "keywords": "gather,gather-town,websocket",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gather-client-ws",
    "package_url": "https://pypi.org/project/gather-client-ws/",
    "platform": null,
    "project_url": "https://pypi.org/project/gather-client-ws/",
    "project_urls": {
      "Homepage": "https://github.com/pyanderson/gather-client-ws"
    },
    "release_url": "https://pypi.org/project/gather-client-ws/0.0.3/",
    "requires_dist": [
      "tapioca-gather (<1)",
      "protobuf (==4.22.1)",
      "websockets (==10.4)"
    ],
    "requires_python": "",
    "summary": "Gather WebSocket service client",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17452880,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "018e7102dbd63d55d1d53097485867c157725e3c37940dfe3eb2b5a25048af13",
          "md5": "5f7f7202c9cbd72043fee6d6dedcdd69",
          "sha256": "f8cc5f8297f07ad529a77f5c6ff1d3235d7933fe328300335898149c5188021e"
        },
        "downloads": -1,
        "filename": "gather_client_ws-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f7f7202c9cbd72043fee6d6dedcdd69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34327,
        "upload_time": "2023-03-25T23:56:53",
        "upload_time_iso_8601": "2023-03-25T23:56:53.303783Z",
        "url": "https://files.pythonhosted.org/packages/01/8e/7102dbd63d55d1d53097485867c157725e3c37940dfe3eb2b5a25048af13/gather_client_ws-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e34067a4f24c0a64f12ca80bade05d59e828f69316ac9e7c3b510d96445f4d81",
          "md5": "12d5f0fe29c94061f6d9122112913735",
          "sha256": "156a2dcd7d70157fee4fde3307b60c207e62da397ba90fc9e880d293220831d5"
        },
        "downloads": -1,
        "filename": "gather-client-ws-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "12d5f0fe29c94061f6d9122112913735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36118,
        "upload_time": "2023-03-25T23:56:55",
        "upload_time_iso_8601": "2023-03-25T23:56:55.244549Z",
        "url": "https://files.pythonhosted.org/packages/e3/40/67a4f24c0a64f12ca80bade05d59e828f69316ac9e7c3b510d96445f4d81/gather-client-ws-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "018e7102dbd63d55d1d53097485867c157725e3c37940dfe3eb2b5a25048af13",
        "md5": "5f7f7202c9cbd72043fee6d6dedcdd69",
        "sha256": "f8cc5f8297f07ad529a77f5c6ff1d3235d7933fe328300335898149c5188021e"
      },
      "downloads": -1,
      "filename": "gather_client_ws-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f7f7202c9cbd72043fee6d6dedcdd69",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34327,
      "upload_time": "2023-03-25T23:56:53",
      "upload_time_iso_8601": "2023-03-25T23:56:53.303783Z",
      "url": "https://files.pythonhosted.org/packages/01/8e/7102dbd63d55d1d53097485867c157725e3c37940dfe3eb2b5a25048af13/gather_client_ws-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e34067a4f24c0a64f12ca80bade05d59e828f69316ac9e7c3b510d96445f4d81",
        "md5": "12d5f0fe29c94061f6d9122112913735",
        "sha256": "156a2dcd7d70157fee4fde3307b60c207e62da397ba90fc9e880d293220831d5"
      },
      "downloads": -1,
      "filename": "gather-client-ws-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "12d5f0fe29c94061f6d9122112913735",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36118,
      "upload_time": "2023-03-25T23:56:55",
      "upload_time_iso_8601": "2023-03-25T23:56:55.244549Z",
      "url": "https://files.pythonhosted.org/packages/e3/40/67a4f24c0a64f12ca80bade05d59e828f69316ac9e7c3b510d96445f4d81/gather-client-ws-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}