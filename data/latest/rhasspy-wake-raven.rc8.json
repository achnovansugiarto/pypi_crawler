{
  "info": {
    "author": "Michael Hansen",
    "author_email": "mike@rhasspy.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Rhasspy Raven Wakeword System\n\nWakeword detector based on the [Snips Personal Wake Word Detector](https://medium.com/snips-ai/machine-learning-on-voice-a-gentle-introduction-with-snips-personal-wake-word-detector-133bd6fb568e).\n\nThe underlying implementation of Raven heavily borrows from [node-personal-wakeword](https://github.com/mathquis/node-personal-wakeword) by [mathquis](https://github.com/mathquis).\n\n## Dependencies\n\n* Python 3.7\n* `python-speech-features` for [MFCC](https://python-speech-features.readthedocs.io/en/latest/) computation\n* `rhasspy-silence` for [silence detection](https://github.com/rhasspy/rhasspy-silence)\n* Scientific libraries\n    * `sudo apt-get install liblapack3 libatlas-base-dev`\n\n## Installation\n\n```sh\n$ git clone https://github.com/rhasspy/rhasspy-wake-raven.git\n$ cd rhasspy-wake-raven\n$ ./configure\n$ make\n$ make install\n```\n\n## Recording Templates\n\nRecord at least 3 WAV templates with your wake word:\n\n```sh\n$ arecord -r 16000 -f S16_LE -c 1 -t raw | \\\n    bin/rhasspy-wake-raven --record keyword-dir/\n```\n\nFollow the prompts and speak your wake word. When you've recorded at least 3 examples, hit CTRL+C to exit. Your WAV templates will have silence automatically trimmed, and will be saved in the directory `keyword-dir/`. Add a format string after the directory name to control the file names:\n\n```sh\n$ arecord -r 16000 -f S16_LE -c 1 -t raw | \\\n    bin/rhasspy-wake-raven --record keyword-dir/ 'keyword-{n:02d}.wav'\n```\n\nThe format string will receive the 0-based index `n` for each example.\n\nIf you want to manually record WAV templates, trim silence off the front and back and make sure to export them as 16-bit 16Khz mono WAV files.\n\n## Running\n\nAfter recording your WAV templates in a directory, run:\n\n```sh\n$ arecord -r 16000 -f S16_LE -c 1 -t raw | \\\n    bin/rhasspy-wake-raven --keyword <WAV_DIR> ...\n```\n\nwhere `<WAV_DIR>` contains the WAV templates. You may add as many keywords as you'd like, though this will use additional CPU. It's recommended you use `--average-templates` to keep CPU usage down.\n\nSome settings can be specified per-keyword:\n\n```sh\n$ arecord -r 16000 -f S16_LE -c 1 -t raw | \\\n    bin/rhasspy-wake-raven \\\n      --keyword keyword1/ name=my-keyword1 probability-threshold=0.45 minimum-matches=2 \\\n      --keyword keyword2/ name=my-keyword2 probability-threshold=0.55 average-templates=true\n```\n\nIf not set, `probability-threshold=`, etc. fall back on the values supplied to `--probability-threshold`, etc.\n\nAdd `--debug` to the command line to get more information about the underlying computation on each audio frame.\n\n### Example\n\nUsing the example files for \"okay rhasspy\":\n\n```sh\n$ arecord -r 16000 -f S16_LE -c 1 -t raw | \\\n    bin/rhasspy-wake-raven --keyword etc/okay-rhasspy/\n```\n\nThis requires at least 1 of the 3 WAV templates to match before output like this is printed:\n\n```json\n{\"keyword\": \"okay-rhasspy\", \"template\": \"etc/okay-rhasspy/okay-rhasspy-00.wav\", \"detect_seconds\": 2.7488508224487305, \"detect_timestamp\": 1594996988.638912, \"raven\": {\"probability\": 0.45637207995699963, \"distance\": 0.25849045215799454, \"probability_threshold\": 0.5, \"distance_threshold\": 0.22, \"tick\": 1, \"matches\": 2, \"match_seconds\": 0.005367016012314707}}\n```\n\nUse `--minimum-matches` to change how many templates must match for a detection to occur or `--average-templates` to combine all WAV templates into a single template (reduces CPU usage). Adjust the sensitivity with `--probability-threshold` which sets the lower bound of the detection probability (default is 0.5).\n\n## Output\n\nRaven outputs a line of JSON when the wake word is detected. Fields are:\n\n* `keyword` - name of keyword or directory\n* `template` - path to WAV file template\n* `detect_seconds` - seconds after start of program when detection occurred\n* `detect_timestamp` - timestamp when detection occurred (using `time.time()`)\n* `raven`\n    * `probability` - detection probability\n    * `probability_threshold` - range of probabilities for detection\n    * `distance` - normalized dynamic time warping distance\n    * `distance_threshold` - distance threshold used for comparison\n    * `matches` - number of WAV templates that matched\n    * `match_seconds` - seconds taken for dynamic time warping calculations\n    * `tick` - monotonic counter incremented for each detection\n\n## Testing\n\nYou can test how well Raven works on a set of sample WAV files:\n\n```sh\n$ PATH=$PWD/bin:$PATH test-raven.py --test-directory /path/to/samples/ --keyword /path/to/templates/\n```\n\nThis will run up to 10 parallel instances of Raven (change with `--test-workers`) and output a JSON report with detection information and summary statistics like:\n\n```json\n{\n  \"positive\": [...],\n  \"negative\": [...],\n  \"summary\": {\n    \"true_positives\": 14,\n    \"false_positives\": 0,\n    \"true_negatives\": 40,\n    \"false_negatives\": 7,\n    \"precision\": 1.0,\n    \"recall\": 0.6666666666666666,\n    \"f1_score\": 0.8\n}\n```\n\nAny additional command-line arguments are passed to Raven (e.g., `--minimum-matches`).\n\n## Command-Line Interface\n\n```\nusage: rhasspy-wake-raven [-h] [--keyword KEYWORD [KEYWORD ...]]\n                          [--chunk-size CHUNK_SIZE]\n                          [--record RECORD [RECORD ...]]\n                          [--probability-threshold PROBABILITY_THRESHOLD]\n                          [--distance-threshold DISTANCE_THRESHOLD]\n                          [--minimum-matches MINIMUM_MATCHES]\n                          [--refractory-seconds REFRACTORY_SECONDS]\n                          [--print-all-matches]\n                          [--window-shift-seconds WINDOW_SHIFT_SECONDS]\n                          [--dtw-window-size DTW_WINDOW_SIZE]\n                          [--vad-sensitivity {1,2,3}]\n                          [--current-threshold CURRENT_THRESHOLD]\n                          [--max-energy MAX_ENERGY]\n                          [--max-current-ratio-threshold MAX_CURRENT_RATIO_THRESHOLD]\n                          [--silence-method {vad_only,ratio_only,current_only,vad_and_ratio,vad_and_current,all}]\n                          [--average-templates] [--exit-count EXIT_COUNT]\n                          [--read-entire-input]\n                          [--max-chunks-in-queue MAX_CHUNKS_IN_QUEUE]\n                          [--skip-probability-threshold SKIP_PROBABILITY_THRESHOLD]\n                          [--failed-matches-to-refractory FAILED_MATCHES_TO_REFRACTORY]\n                          [--debug]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --keyword KEYWORD [KEYWORD ...]\n                        Directory with WAV templates and settings (setting-\n                        name=value)\n  --chunk-size CHUNK_SIZE\n                        Number of bytes to read at a time from standard in\n                        (default: 1920)\n  --record RECORD [RECORD ...]\n                        Record example templates to a directory, optionally\n                        with given name format (e.g., 'my-\n                        keyword-{n:02d}.wav')\n  --probability-threshold PROBABILITY_THRESHOLD\n                        Probability above which detection occurs (default:\n                        0.5)\n  --distance-threshold DISTANCE_THRESHOLD\n                        Normalized dynamic time warping distance threshold for\n                        template matching (default: 0.22)\n  --minimum-matches MINIMUM_MATCHES\n                        Number of templates that must match to produce output\n                        (default: 1)\n  --refractory-seconds REFRACTORY_SECONDS\n                        Seconds before wake word can be activated again\n                        (default: 2)\n  --print-all-matches   Print JSON for all matching templates instead of just\n                        the first one\n  --window-shift-seconds WINDOW_SHIFT_SECONDS\n                        Seconds to shift sliding time window on audio buffer\n                        (default: 0.02)\n  --dtw-window-size DTW_WINDOW_SIZE\n                        Size of band around slanted diagonal during dynamic\n                        time warping calculation (default: 5)\n  --vad-sensitivity {1,2,3}\n                        Webrtcvad VAD sensitivity (1-3)\n  --current-threshold CURRENT_THRESHOLD\n                        Debiased energy threshold of current audio frame\n  --max-energy MAX_ENERGY\n                        Fixed maximum energy for ratio calculation (default:\n                        observed)\n  --max-current-ratio-threshold MAX_CURRENT_RATIO_THRESHOLD\n                        Threshold of ratio between max energy and current\n                        audio frame\n  --silence-method {vad_only,ratio_only,current_only,vad_and_ratio,vad_and_current,all}\n                        Method for detecting silence\n  --average-templates   Average wakeword templates together to reduce number\n                        of calculations\n  --exit-count EXIT_COUNT\n                        Exit after some number of detections (default: never)\n  --read-entire-input   Read entire audio input at start and exit after\n                        processing\n  --max-chunks-in-queue MAX_CHUNKS_IN_QUEUE\n                        Maximum number of audio chunks waiting for processing\n                        before being dropped\n  --skip-probability-threshold SKIP_PROBABILITY_THRESHOLD\n                        Skip additional template calculations if probability\n                        is below this threshold\n  --failed-matches-to-refractory FAILED_MATCHES_TO_REFRACTORY\n                        Number of failed template matches before entering\n                        refractory period (default: disabled)\n  --debug               Print DEBUG messages to the console\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rhasspy/rhasspy-wake-raven",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rhasspy-wake-raven",
    "package_url": "https://pypi.org/project/rhasspy-wake-raven/",
    "platform": "",
    "project_url": "https://pypi.org/project/rhasspy-wake-raven/",
    "project_urls": {
      "Homepage": "https://github.com/rhasspy/rhasspy-wake-raven"
    },
    "release_url": "https://pypi.org/project/rhasspy-wake-raven/0.5.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9950197,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "171c0766a287b0f6103652fd4490480664a4b60311e7e998376a8911dd76757b",
          "md5": "ef9ad842d3f078c63e4f310e45dc9e3f",
          "sha256": "d4ef51480ea40edcdb6df40ced9660b80776f6c240ceb54fed2eb6e8c9a0f02f"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef9ad842d3f078c63e4f310e45dc9e3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6174,
        "upload_time": "2020-07-16T20:32:03",
        "upload_time_iso_8601": "2020-07-16T20:32:03.650158Z",
        "url": "https://files.pythonhosted.org/packages/17/1c/0766a287b0f6103652fd4490480664a4b60311e7e998376a8911dd76757b/rhasspy-wake-raven-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b506a87732bc8b6278a47144b1314230f1eff039a57611a21ea2c1c7f4f6f7d",
          "md5": "d33239f5234e4b6e209614a3252397ff",
          "sha256": "621be2a5aca9daacf374e38f442aeb59c265e86c850285facf447c2fcdbec741"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d33239f5234e4b6e209614a3252397ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8562,
        "upload_time": "2020-07-17T17:41:01",
        "upload_time_iso_8601": "2020-07-17T17:41:01.462092Z",
        "url": "https://files.pythonhosted.org/packages/9b/50/6a87732bc8b6278a47144b1314230f1eff039a57611a21ea2c1c7f4f6f7d/rhasspy-wake-raven-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc87cb56972c6c3b4c3595a00f430321772b0479ab9a52c02e8663eb5f57cf71",
          "md5": "2c313ab8f2a69792e19348a75b817a37",
          "sha256": "cc6bd9b1bffe37f0933325f336800bf6c58ad28d34f1794358e0a487c250eea8"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c313ab8f2a69792e19348a75b817a37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12132,
        "upload_time": "2020-07-22T15:25:41",
        "upload_time_iso_8601": "2020-07-22T15:25:41.324730Z",
        "url": "https://files.pythonhosted.org/packages/bc/87/cb56972c6c3b4c3595a00f430321772b0479ab9a52c02e8663eb5f57cf71/rhasspy-wake-raven-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de2963568021ef3f70cfff8ba3fca4534bb3c0d376197f3b39149ff2456b5c29",
          "md5": "0cfbc3377be3696e6f8736cc3017bad6",
          "sha256": "7bcbf014384e5e5421f500bbf363affa88b4257ce86ee4291514d5a06a3aee1c"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0cfbc3377be3696e6f8736cc3017bad6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12135,
        "upload_time": "2020-07-22T15:34:41",
        "upload_time_iso_8601": "2020-07-22T15:34:41.560509Z",
        "url": "https://files.pythonhosted.org/packages/de/29/63568021ef3f70cfff8ba3fca4534bb3c0d376197f3b39149ff2456b5c29/rhasspy-wake-raven-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ab97064cd09e8d94e3ee7ba192757e4983126978334fb96ffa54f792e5a842",
          "md5": "24d678d03e6e0a4a383b161b2e0f2805",
          "sha256": "fed51bb0ef49d99f098abb6724152875da6d0e4445e1c0b396085197424c4f15"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24d678d03e6e0a4a383b161b2e0f2805",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12600,
        "upload_time": "2020-07-23T17:31:48",
        "upload_time_iso_8601": "2020-07-23T17:31:48.975573Z",
        "url": "https://files.pythonhosted.org/packages/51/ab/97064cd09e8d94e3ee7ba192757e4983126978334fb96ffa54f792e5a842/rhasspy-wake-raven-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09b5ca74d263b122811ced71a7b00a522b9c012ecec65fd10cfe59db23a90e80",
          "md5": "10614ffb8077059215c41ef823d01286",
          "sha256": "b492f047cf2f5e42e8ff1acc233451624b3921d8c6684edd40d94970573721aa"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10614ffb8077059215c41ef823d01286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15019,
        "upload_time": "2020-07-30T18:41:52",
        "upload_time_iso_8601": "2020-07-30T18:41:52.823318Z",
        "url": "https://files.pythonhosted.org/packages/09/b5/ca74d263b122811ced71a7b00a522b9c012ecec65fd10cfe59db23a90e80/rhasspy-wake-raven-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e96bafd7f12184bf3d955b799b2c331a08773f435d32241ec0317771ae4335a",
          "md5": "94ea9da4d56ed3bde1f989e2ade216ae",
          "sha256": "b3921b9eddfcd4dcbc26dfa566844f89aeb6be2a29ca05ae3ef4ea6eec778fd9"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "94ea9da4d56ed3bde1f989e2ade216ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15256,
        "upload_time": "2020-10-10T18:11:47",
        "upload_time_iso_8601": "2020-10-10T18:11:47.830784Z",
        "url": "https://files.pythonhosted.org/packages/9e/96/bafd7f12184bf3d955b799b2c331a08773f435d32241ec0317771ae4335a/rhasspy-wake-raven-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c185d6ef75c65f18006d63a23f5d4ac09bcd7633d5f982d6fc3658a47aa61c5",
          "md5": "2842ec80193d16d3e32ef175290d32be",
          "sha256": "40313868e13b68bdef54184a73f5ef2bd7293cd3d9568fd5db442bb31826f4df"
        },
        "downloads": -1,
        "filename": "rhasspy-wake-raven-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2842ec80193d16d3e32ef175290d32be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15269,
        "upload_time": "2021-04-01T19:13:15",
        "upload_time_iso_8601": "2021-04-01T19:13:15.844519Z",
        "url": "https://files.pythonhosted.org/packages/0c/18/5d6ef75c65f18006d63a23f5d4ac09bcd7633d5f982d6fc3658a47aa61c5/rhasspy-wake-raven-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c185d6ef75c65f18006d63a23f5d4ac09bcd7633d5f982d6fc3658a47aa61c5",
        "md5": "2842ec80193d16d3e32ef175290d32be",
        "sha256": "40313868e13b68bdef54184a73f5ef2bd7293cd3d9568fd5db442bb31826f4df"
      },
      "downloads": -1,
      "filename": "rhasspy-wake-raven-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2842ec80193d16d3e32ef175290d32be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15269,
      "upload_time": "2021-04-01T19:13:15",
      "upload_time_iso_8601": "2021-04-01T19:13:15.844519Z",
      "url": "https://files.pythonhosted.org/packages/0c/18/5d6ef75c65f18006d63a23f5d4ac09bcd7633d5f982d6fc3658a47aa61c5/rhasspy-wake-raven-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}