{
  "info": {
    "author": "Konstantinos Fragkiadakis",
    "author_email": "fconstantinos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Monitoring"
    ],
    "description": "# logmonitor\nA simple log monitor application that parses an actively written log and outputs useful statistics.\n\n# Installation:\nSimply run:\n\n````\npip install logmonitor\n````\n\nFor a quick check you can try printing the version number:\n\n````\nlogmonitor -v\n0.0.7a1\n````\nAlternatively, you can build it and then install it as shown below\n\n# Build\n\nYou can download the source code from here:\nhttps://pypi.org/project/logmonitor/\n\nOr here (latest source)\nhttps://github.com/FConstantinos/logmonitor\n\nGo into the root of the source code directory. To create a source distribution:\n\n````\npython setup.py sdist\n````\n\nTo create a pure python wheels build distribution:\n\n````\npython setup.py bdist_wheel\n````\n\nNote that universal wheels and platform wheels are not supported, since this project is pure python 3. For more\ninformation on the different ways to build the package, check:\n\nhttps://packaging.python.org/guides/distributing-packages-using-setuptools/#packaging-your-project\n\n# Tests\nTo run the tests, you need to have **pytest** and log-generator installed:\n\n````\npip install pytest, log-generator\n````\n\nAfterwards, you can go to the *test/* folder and run:\n\n````\npytest\n````\n\n# Usage\n\nAt a high level, **logmonitor** follows an actively written Common Log Format log file and displays useful statistics at\na specific time interval defined by the user. For the given interval, some of the statistics displayed are as follows:\n * The three website sections with the most hits and their number of hits.\n   * If there are less than three sections, all sections are printed.\n * Moving average of the number of hits per second.\n * Moving variance of the number of hits per second.\n\nAdditionally, an alert event is displayed if a user defined threshold of hits per second is exceeded for a user\ndefined period of time, to warn the user of high traffic. A timestamp is generated for this event. When traffic\ngoes back to normal, a message is displayed, informing the user that the alert is now off along with a timestamp\nfor when that happened. The alert can also trigger when the user-defined window has not had time to grow to the\ndefined size (i.e before the running time of the application has reached the length of the window).\n\nTo change the alert threshold during runtime, press 'a' followed by the new threshold in hits per second and then hit\nEnter. For example:\n\n````\na20<enter>\n````\n\nwill change the threshold to 20 hits per second average before an alert is triggered.\n\nTo quit the application, press 'q' and then hit Enter.\n\nSome assumptions on the log entry traffic:\n * Log entries can be written asynchronously and potentially out of order.\n * Log entries with timestamps indicating a future time beyond the application's current time will be discarded.\n * Log entries with timestamps indicating a past time below the monitoring and alert threshold time windows will be\n discarded.\n * Log entries that do not conform to the Common Log Format will be discarded.\n\nNew web resources (and therefore sections) can be added dynamically; they will be parsed from the log as new entries are\nbeing written.\n\nFor more information on the Common Log Format you can check here:\n\nhttps://en.wikipedia.org/wiki/Common_Log_Format\n\n````\nusage: __init__.py [-h] [-l LOGFILE] [-u UPDATE_INTERVAL]\n                   [-a ALERT_REQUEST_THRESHOLD] [-o ALERT_SWITCH_ON_THRESHOLD]\n                   [-v]\n\nLog monitoring application. Press 'q' followed by 'Enter' to quit.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LOGFILE, --logfile LOGFILE\n                        Logfile to monitor. Application will exit if it\n                        doesn't exist Default: /tmp/access.log\n  -u UPDATE_INTERVAL, --update-interval UPDATE_INTERVAL\n                        Monitor update interval in seconds. Default: 10 Min: 1\n                        Max: None\n  -a ALERT_REQUEST_THRESHOLD, --alert-request-threshold ALERT_REQUEST_THRESHOLD\n                        Average number of requests per second that will cause\n                        alert if sustained for more than the alert switch-on\n                        threshold. Overrideable. To override it, press 'a'\n                        followed by the new threshold in seconds and then hit\n                        enter during runtime. Default: 10 Min: 1 Max: None\n  -o ALERT_SWITCH_ON_THRESHOLD, --alert-switch-on-threshold ALERT_SWITCH_ON_THRESHOLD\n                        Alert switch-on threshold in seconds. Alert will turn\n                        on if the average number of requests surpasses the\n                        average request threshold for the duration of the\n                        switch-on threshold. Otherwise, alert will be turned\n                        off Default: 120 Min: 1 Max: None\n  -v, --version         Version number\n````\n\n# Example\n\nFor this example, we will use **log-generator**, a configurable log generator that is developed here:\n\nhttps://pypi.org/project/log-generator/\n\nIn short, the log generator is given a configuration .yaml file that outlines the types of logs to be generated, the\ngeneration frequency and the output file. One thing to notice is that this log-generator is not perfect; Although, for\nexample, it can be configured to generate 5 log entries per second, in reality it misses some seconds, as can be\nseen from its own log, much more so when the log entries per second increase. However, for the purposes of this example,\nit is not a concern as long as the traffic is at good enough levels to cause the monitor to react appropriately. \n\nWe will perform a simple example. We will run the log generator with a 5 entries per second traffic generation:\n````\ncostas@costas-ThinkPad-Edge-E545:~/tests/logmonitor$ log-generator log_schema_slow.yaml \n2020-09-27 15:55:47,014 INFO     Starting normal execution\n2020-09-27 15:55:47,056 INFO     Loaded:  log_schema_slow.yaml\n2020-09-27 15:55:48,099 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:49,220 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:50,370 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:51,497 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:52,613 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:53,762 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:54,879 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:56,017 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:57,133 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:58,261 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:55:59,395 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:56:00,542 INFO     Writing    5 logs for \"Apache General Access\" (./access.log)\n...\n...\n````\n\nWe will then run **logmonitor** with a monitoring interval of 10 seconds, an alert interval of 10 seconds, and an\nalert threshold of 10 hits per second. We don't expect any alerts to trigger (but we do expect lower than 5 hits per\nsecond averages due to the generator's drift):\n\n````\nlogmonitor -l access.log -o 10\n***** Statistics for interval: 2020-09-27 15:56:51 to 2020-09-27 15:56:51 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0\nvariance (hits per second): 0\n\n***** Statistics for interval: 2020-09-27 15:56:51 to 2020-09-27 15:57:01 *****\nthree most common section hits: [('customers', 10), ('users', 5), ('collectors', 5)]\ntotal hits: 40\naverage (hits per second): 4.0\nvariance (hits per second): 4.0\n\n***** Statistics for interval: 2020-09-27 15:57:01 to 2020-09-27 15:57:11 *****\nthree most common section hits: [('users', 7), ('customers', 7), ('collectors', 5)]\ntotal hits: 45\naverage (hits per second): 4.5\nvariance (hits per second): 2.25\n...\n...\n\n````\n\nWe stop the log-generator and we expect the displayed statistics to go back to zero:\n\n````\n***** Statistics for interval: 2020-09-27 15:58:21 to 2020-09-27 15:58:31 *****\nthree most common section hits: [('fieldsets', 8), ('lists', 5), ('customers', 5)]\ntotal hits: 45\naverage (hits per second): 4.5\nvariance (hits per second): 2.25\n\n***** Statistics for interval: 2020-09-27 15:58:31 to 2020-09-27 15:58:41 *****\nthree most common section hits: [('collectors', 5), ('lists', 5), ('parsers', 5)]\ntotal hits: 35\naverage (hits per second): 3.5\nvariance (hits per second): 5.25\n\n***** Statistics for interval: 2020-09-27 15:58:41 to 2020-09-27 15:58:51 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0.0\nvariance (hits per second): 0.0\n\n***** Statistics for interval: 2020-09-27 15:58:51 to 2020-09-27 15:59:01 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0.0\nvariance (hits per second): 0.0\n...\n...\n````\n\nWe start a faster generator at 20 hits per second (in reality, about 13 hits per second): \n\n````\ncostas@costas-ThinkPad-Edge-E545:~/tests/logmonitor$ log-generator log_schema_fast.yaml \n2020-09-27 15:59:54,559 INFO     Starting normal execution\n2020-09-27 15:59:54,601 INFO     Loaded:  log_schema_fast.yaml\n2020-09-27 15:59:55,644 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:59:57,087 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n2020-09-27 15:59:58,630 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n2020-09-27 16:00:00,104 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n2020-09-27 16:00:01,608 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n2020-09-27 16:00:03,078 INFO     Writing   20 logs for \"Apache General Access\" (./access.log)\n...\n...\n````\n\nWe expect the monitor's alert to trigger after at most 10 seconds:\n\n````\n***** Statistics for interval: 2020-09-27 15:59:41 to 2020-09-27 15:59:51 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0.0\nvariance (hits per second): 0.0\n\n***** Statistics for interval: 2020-09-27 15:59:51 to 2020-09-27 16:00:01 *****\nthree most common section hits: [('alerts', 16), ('events', 13), ('lists', 11)]\ntotal hits: 89\naverage (hits per second): 8.9\nvariance (hits per second): 88.88999999999999\n\nALERT ON: High traffic generated an alert - average (hits per second over --alert-switch-on-threshold period) = 12.0, triggered at 2020-09-27 16:00:03\n***** Statistics for interval: 2020-09-27 16:00:01 to 2020-09-27 16:00:11 *****\nthree most common section hits: [('alerts', 19), ('parsers', 18), ('lists', 18)]\ntotal hits: 120\naverage (hits per second): 12.0\nvariance (hits per second): 96.0\n\n***** Statistics for interval: 2020-09-27 16:00:11 to 2020-09-27 16:00:21 *****\nthree most common section hits: [('users', 22), ('events', 17), ('alerts', 16)]\ntotal hits: 120\naverage (hits per second): 12.0\nvariance (hits per second): 96.0\n...\n...\n````\n\nWe proceed to stop the log-generator. We expect the displayed traffic to go back to zero again and the alert to stop:\n\n````\n***** Statistics for interval: 2020-09-27 16:01:41 to 2020-09-27 16:01:51 *****\nthree most common section hits: [('playbooks', 18), ('collectors', 16), ('customers', 15)]\ntotal hits: 132\naverage (hits per second): 13.2\nvariance (hits per second): 80.16000000000003\n\nALERT OFF: Traffic back to normal after an alert, normalized at 2020-09-27 16:01:57\n***** Statistics for interval: 2020-09-27 16:01:51 to 2020-09-27 16:02:01 *****\nthree most common section hits: [('parsers', 8), ('playbooks', 7), ('lists', 6)]\ntotal hits: 40\naverage (hits per second): 4.0\nvariance (hits per second): 64.0\n\n***** Statistics for interval: 2020-09-27 16:02:01 to 2020-09-27 16:02:11 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0.0\nvariance (hits per second): 0.0\n\n***** Statistics for interval: 2020-09-27 16:02:11 to 2020-09-27 16:02:21 *****\nthree most common section hits: []\ntotal hits: 0\naverage (hits per second): 0.0\nvariance (hits per second): 0.0\n...\n...\n```` \n\n# Ideas for Future Work:\n * More tests need to be added. Unfortunately, time constraints did not allow for more.\n * The time intervals have a slow imperceptible drift of a few milliseconds due to the threaded\n   nature of the application. This can and should be amended.\n * Extend or suppress, or add new monitoring intervals during runtime\n * Design alert as a hysteretic system; currently, the alert has no cool-down and therefore can go ON or OFF within\n   seconds. This will be confusing, especially for a log file that is being written to with high variability in hits per\n   second (too many hits at a time, too little at the next second). The fact that the alert triggers on the moving\n   average of a period doesn't matter because that moving average can change between seconds from above the threshold to\n   bellow, depending on the hit values added/evicted. Therefore alerts would need to be triggered with a certain delay.\n * Expand to follow multiple logs.\n * Expand for multiple alerts on multiple statistics (hits per second, failed HTTP requests, traffic spikes/lows etc)\n * Expand to follow multiple time intervals\n * Currently, each moving statistics interval has its own dedicated memory for the traffic samples it follows. Ideally\n   , we would like those memories to overlap, since a time window of two minutes shares the traffic samples of a time\n   window of one minute\n * Display numbers of successful/unsuccessful HTTP requests\n * Display traffic spikes (for example when hits during a second are above two times the standard deviation)\n * Security: Make sure that log file parsing does not exceed memory/computing resources dues to malevolent entries.\n * Object oriented design needs more sophistication once requirements are more robust.\n * Batch update *TimeSeriesMovingStats* data structures instead of adding new entries one by one.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FConstantinos/logmonitor",
    "keywords": "logging,monitoring,development",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logmonitor",
    "package_url": "https://pypi.org/project/logmonitor/",
    "platform": "any",
    "project_url": "https://pypi.org/project/logmonitor/",
    "project_urls": {
      "Bug Reports": "https://github.com/FConstantinos/logmonitor/issues",
      "Homepage": "https://github.com/FConstantinos/logmonitor",
      "Source": "https://github.com/FConstantinos/logmonitor/"
    },
    "release_url": "https://pypi.org/project/logmonitor/0.0.7a1/",
    "requires_dist": [
      "sh",
      "apachelogs",
      "pytest ; extra == 'dev'",
      "log-generator ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "pytest ; extra == 'test'",
      "log-generator ; extra == 'test'"
    ],
    "requires_python": ">=3.6.9, <4",
    "summary": "A simple log monitor application that parses an actively written log and outputs useful statistics.",
    "version": "0.0.7a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8284953,
  "releases": {
    "0.0.7a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f069f6237f2133f7b9808f6035f0dfe8f1e87c38465726b64ed6ac87724afb00",
          "md5": "42c5e2a7bec7b359ca83d907b6f8f431",
          "sha256": "02ad71842310f2937ba4a67306701e14436088d6021de800ef67d87ec1097fc5"
        },
        "downloads": -1,
        "filename": "logmonitor-0.0.7a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42c5e2a7bec7b359ca83d907b6f8f431",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.9, <4",
        "size": 10367,
        "upload_time": "2020-09-27T20:51:44",
        "upload_time_iso_8601": "2020-09-27T20:51:44.661992Z",
        "url": "https://files.pythonhosted.org/packages/f0/69/f6237f2133f7b9808f6035f0dfe8f1e87c38465726b64ed6ac87724afb00/logmonitor-0.0.7a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7421ebada60dd7aec0d0259604a5a2ddb3ab9feecde035cbcb5a46b6e0ac54b",
          "md5": "56734e7fc2936e36522720a54d043070",
          "sha256": "342925b121b0f1cacafbda96cd26d5d3cd2622dac3b107935769db6ec267fdc5"
        },
        "downloads": -1,
        "filename": "logmonitor-0.0.7a1.tar.gz",
        "has_sig": false,
        "md5_digest": "56734e7fc2936e36522720a54d043070",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.9, <4",
        "size": 19724,
        "upload_time": "2020-09-27T20:51:46",
        "upload_time_iso_8601": "2020-09-27T20:51:46.052340Z",
        "url": "https://files.pythonhosted.org/packages/d7/42/1ebada60dd7aec0d0259604a5a2ddb3ab9feecde035cbcb5a46b6e0ac54b/logmonitor-0.0.7a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f069f6237f2133f7b9808f6035f0dfe8f1e87c38465726b64ed6ac87724afb00",
        "md5": "42c5e2a7bec7b359ca83d907b6f8f431",
        "sha256": "02ad71842310f2937ba4a67306701e14436088d6021de800ef67d87ec1097fc5"
      },
      "downloads": -1,
      "filename": "logmonitor-0.0.7a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42c5e2a7bec7b359ca83d907b6f8f431",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.9, <4",
      "size": 10367,
      "upload_time": "2020-09-27T20:51:44",
      "upload_time_iso_8601": "2020-09-27T20:51:44.661992Z",
      "url": "https://files.pythonhosted.org/packages/f0/69/f6237f2133f7b9808f6035f0dfe8f1e87c38465726b64ed6ac87724afb00/logmonitor-0.0.7a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7421ebada60dd7aec0d0259604a5a2ddb3ab9feecde035cbcb5a46b6e0ac54b",
        "md5": "56734e7fc2936e36522720a54d043070",
        "sha256": "342925b121b0f1cacafbda96cd26d5d3cd2622dac3b107935769db6ec267fdc5"
      },
      "downloads": -1,
      "filename": "logmonitor-0.0.7a1.tar.gz",
      "has_sig": false,
      "md5_digest": "56734e7fc2936e36522720a54d043070",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.9, <4",
      "size": 19724,
      "upload_time": "2020-09-27T20:51:46",
      "upload_time_iso_8601": "2020-09-27T20:51:46.052340Z",
      "url": "https://files.pythonhosted.org/packages/d7/42/1ebada60dd7aec0d0259604a5a2ddb3ab9feecde035cbcb5a46b6e0ac54b/logmonitor-0.0.7a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}