{
  "info": {
    "author": "Armin Friedl",
    "author_email": "dev@friedl.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![Build Status](https://drone.friedl.net/api/badges/incubator/bytetrie/status.svg)](https://drone.friedl.net/incubator/bytetrie)\n\n# Bytetrie\nA fast, dependency-free, self-compressing trie with radix 256 in pure python.\n\n![](https://git.friedl.net/incubator/bytetrie/raw/branch/master/trie.png)\n\nBytetrie allows fast prefix search in a large corpus of keys. Each key can be\nassociated with arbitrary data. It features fast lookup times at the cost of\nexpensive insertion. A Bytetrie is best used if it can be pre-filled with data.\nHowever, due to its in-band compression it can be also used for on-the-fly\nupdates.\n\n## Keys\nKeys are byte strings. Therefore, each node in the trie can have up to 256\nchildren (the radix). Keys do work well with utf-8 and other encodings as long\nas the encoding is consistent and deterministic. That is, grapheme clusters\nare always encoded to the same byte sequence -- even if the standard allows for\nambiguity. Usually that's a non-issue as long as the same encoder is used for\ninsertion and lookup.\n\nSince prefix search in unicode strings is one of the most common use-cases of\nbytetrie, a unicode layer on top of bytetrie is [planned](https://git.friedl.net/incubator/bytetrie/raw/branch/master/TODO.md).\n\n## Data\nBytetrie can associate arbitrary python objects with keys. Data (or rather a\nreference thereof) is kept in-tree. No further processing is done.\n\nIn addition, bytrie allows multi-valued tries. Every key is then associated with\na sequence of arbitrary objects.\n\n## Performance\nDespite being in pure python bytetrie is _fast_. Sifting through the full\n[geonames](http://download.geonames.org/export/dump/) \"allCountries\" dataset for\nplaces starting with `Vienna` takes a mere 512µs. That's not even a\nmillisecond for searching through 12,041,359 places. For comparison, a warmed-up\nripgrep search through the same dataset takes three orders of magnitude (400ms)\nlonger on the same machine.\n\nOn the downside, building the trie takes about 20 minutes and considerable\nmemory. Also, the performance is mostly trumped by the time it takes to collect\nterminal nodes. The higher up the trie the search ends (and hence the more\nresults the prefix search yields) the longer it takes. There are several\nlow-hanging fruits left and further performance improvements are in the\n[pipeline](https://git.friedl.net/incubator/bytetrie/raw/branch/master/TODO.md).\n\n## Dependencies\nNone. That's the point.\n\n# Getting started\nInstall bytetrie via [pip](https://pip.pypa.io/en/stable/quickstart/).\n```\npip install -U bytetrie\n```\n\nThe public interface is `ByteTrie` with the two methods `insert` and `find`.\nFind returns a list of `Terminals` from which the `key` and the `value` of the\nnode can be retrieved.\n\n```python\nfrom bytetrie import ByteTrie\n\nt = ByteTrie(multi_value=True)\nt.insert(b\"Hallo\", \"Dutch\")\nt.insert(b\"Hello\", \"English\")\nt.insert(b\"Hug\", \"Gaelic\")\nt.insert(b\"Hallo\", \"German\")\nt.insert(\"Hē\".encode(\"utf-8\"), \"Hindi\")\nt.insert(\"Halló\".encode(\"utf-8\"), \"Icelandic\")\nt.insert(b\"Hej\", \"Polish\")\nt.insert(b\"Hei\", \"Romanian\")\nt.insert(b\"Hujambo\", \"Swahili\")\nt.insert(b\"Hej\", \"Swedish\")\nt.insert(b\"Helo\", \"Welsh\")\n\nprint(\"Where to say 'Hi' with 'He'?\") \nprint(f\"{[(n.key(), n.value()) for n in t.find(b'He')]}\")\n# [(b'Hei', ['Romanian']), (b'Hej', ['Swedish', 'Polish']), (b'Helo', ['Welsh']), (b'Hello', ['English'])]\n\nprint(\"Where to say 'Hi' with 'Ha'?\") \nprint(f\"{[(n.key().decode(), n.value()) for n in t.find(b'Ha')]}\")\n# [('Halló', ['Icelandic']), ('Hallo', ['German', 'Dutch'])]\n\nprint(\"Where to say 'Hi' with 'Hē'?\") \nprint(f\"Say 'Hi' with utf-8: {[(n.key().decode(), n.value()) for n in t.find('Hē'.encode())]}\")\n# [('Hē', ['Hindi'])]\n```\n\n# Contribute\nIf you want to contribute to `bytetrie` feel free to send patches to\ndev[at]friedl[dot]net. Alternatviely, you can issue a pull request on GitHub\nwhich will be cherry picked into my tree. If you plan significant long-term\ncontributions drop me a mail for access to the incubator repository.\n\n# Github Users\nIf you are visiting this repository on GitHub, you are on a mirror of\nhttps://git.friedl.net/incubator/bytetrie. This mirror is regularily updated\nwith my other GitHub mirrors.\n\nLike with my other incubator projects, once I consider `bytetrie` reasonable\nstable the main tree will move to GitHub.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.friedl.net/incubator/bytetrie",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bytetrie",
    "package_url": "https://pypi.org/project/bytetrie/",
    "platform": "",
    "project_url": "https://pypi.org/project/bytetrie/",
    "project_urls": {
      "Homepage": "https://git.friedl.net/incubator/bytetrie"
    },
    "release_url": "https://pypi.org/project/bytetrie/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A self-compressing, dependency-free radix trie",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8390609,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a693264c4e3c8814b4057760c6c1acea2f7cde3f302930e58f198476bbca118",
          "md5": "0abbc432562d0c6bb8278d52e6c6a809",
          "sha256": "1704d9171921bc693599bdbc28a0431f8ee968ec60bf8a8f78bb398f09d06de4"
        },
        "downloads": -1,
        "filename": "bytetrie-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0abbc432562d0c6bb8278d52e6c6a809",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7891,
        "upload_time": "2020-10-12T05:10:01",
        "upload_time_iso_8601": "2020-10-12T05:10:01.904822Z",
        "url": "https://files.pythonhosted.org/packages/7a/69/3264c4e3c8814b4057760c6c1acea2f7cde3f302930e58f198476bbca118/bytetrie-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "589d5bde2642a576f9823d9f83728e1d09552094b98ac00af07c90146c94397d",
          "md5": "d6bfb70cc64c009eb5007c2fe494b147",
          "sha256": "bfc17587534b5431c38d2323dd2c8d053b3c28392b61599c8153ae37167f6f1c"
        },
        "downloads": -1,
        "filename": "bytetrie-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d6bfb70cc64c009eb5007c2fe494b147",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7369,
        "upload_time": "2020-10-12T05:10:03",
        "upload_time_iso_8601": "2020-10-12T05:10:03.221669Z",
        "url": "https://files.pythonhosted.org/packages/58/9d/5bde2642a576f9823d9f83728e1d09552094b98ac00af07c90146c94397d/bytetrie-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a693264c4e3c8814b4057760c6c1acea2f7cde3f302930e58f198476bbca118",
        "md5": "0abbc432562d0c6bb8278d52e6c6a809",
        "sha256": "1704d9171921bc693599bdbc28a0431f8ee968ec60bf8a8f78bb398f09d06de4"
      },
      "downloads": -1,
      "filename": "bytetrie-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0abbc432562d0c6bb8278d52e6c6a809",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7891,
      "upload_time": "2020-10-12T05:10:01",
      "upload_time_iso_8601": "2020-10-12T05:10:01.904822Z",
      "url": "https://files.pythonhosted.org/packages/7a/69/3264c4e3c8814b4057760c6c1acea2f7cde3f302930e58f198476bbca118/bytetrie-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "589d5bde2642a576f9823d9f83728e1d09552094b98ac00af07c90146c94397d",
        "md5": "d6bfb70cc64c009eb5007c2fe494b147",
        "sha256": "bfc17587534b5431c38d2323dd2c8d053b3c28392b61599c8153ae37167f6f1c"
      },
      "downloads": -1,
      "filename": "bytetrie-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d6bfb70cc64c009eb5007c2fe494b147",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7369,
      "upload_time": "2020-10-12T05:10:03",
      "upload_time_iso_8601": "2020-10-12T05:10:03.221669Z",
      "url": "https://files.pythonhosted.org/packages/58/9d/5bde2642a576f9823d9f83728e1d09552094b98ac00af07c90146c94397d/bytetrie-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}