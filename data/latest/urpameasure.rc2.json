{
  "info": {
    "author": "anerold",
    "author_email": "support@ultimaterpa.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# urpameasure\nEasy measure for UltimateRPA\n\nCan be used with Management Console and Sydesk\n\n## Basic usage\nThe urpameasure module provides higher order functionality for sending measurements with UltimateRPA robots. It encapsulates classes for working with both measurement variants - Management Console and Sydesk.\n\n### Working with Management Console\nFirst, we need to create the Measurement object\n```python\nimport urpameasure\n\nMeasurement = urpameasure.Console()\n```\n\nthen we can start adding metrics we want to measure\n```python\nMeasurement.add(\"login\", default_name=\"01 Login Measurement\")\nMeasurement.add(\"processed\", default_unit=\"%\")\nMeasurement.add(\"time\", default_unit=\"seconds\")\n```\n\nlastly, all there is to do is to write the measurements. Login and time measurements can be written via decorator\n```python\n@Measurement.measure_login(\"login\")\ndef login():\n    pass\n\n@Measurement.measure_time(\"time\")\ndef main():\n    login()\n    for i in range(1, 101):\n        measurement.write(\"processed\", value=i)\n```\n\n### Working with Sydesk\nWorking with Sydesk is almost same as working with Console. Only differences are in arguments the measurement accepts.\nAll possible arguments are described in [Documentation](#Documentation) section of this document\n```python\nimport urpameasure\n\nMeasurement = urpameasure.Sydesk(\"/path/to/dir\")\n\nMeasurement.add(\"some measurement\", \"SYDESK_SOURCE_ID\")\nMeasurement.add(\"another measurement\", \"ANOTHER_SYDESK_SOURCE_ID\", default_description=\"foo bar\")\n\nMeasurement.write(\"some measurement\", value=5)\nMeasurement.write(\"another measurement\", value=2, expiration=5)\n```\n\n## Documentation\nThe module has two main classes: `Console` and `Sydesk` for working with Management Console and Sydesk respectively.\nBoth classes are very similar. They differ only in measurement values that can be written with them.\n\n### Class Console\nCreating instance:\n```python\nimport urpameasure\n\nMeasurement = urpameasure.Console()\n```\n\nAdding metrics:\n```python\nMeasurement.add(\n    \"measure id\"\n    default_status=urpameasure.INFO,\n    default_name=\"01 My measurement\",\n    default_value=0,\n    default_unit=\"%\",\n    default_tolerance=0,\n    default_description=\"this is a measurement\",\n    default_precision=2,\n    strict_mode=True,\n)\n```\nArgs starting with `default_` are default values used as clear state (see `measurement.clear()`) or values to be written with `measurement.write()` if not provided\n- `id` (str): unique id of this measurement\n- `default_status` (str, optional): status to be written to Console. Defaults to urpameasure.NONE.\n- `default_name` (str, optional): name to be written to Console. Defaults to \"0 Unnamed measurement\".\n- `default_value` (Optional[float], optional): value to be written to Console. Defaults to None.\n- `default_unit` (str, optional): unit to be written to Console. Defaults to \"\".\n- `default_tolerance` (float, optional): tolerance to be written to Console. Defaults to 0.\n- `default_description` (Optional[str], optional): description to be written to Console. Defaults to None.\n- `default_precision` (Optional[int], optional): precision to be written to Console. Defaults to None.\n- `strict_mode` (bool, optional): `defalut_name` must start with a digit if enabled. Defaults to True.\n\nWriting measurement:\n```python\nMeasurement.write(\n    \"measure id\",\n    status=urpameasure.SUCCESS,\n    name=\"a02 Some measurement\",\n    value=99.5,\n    unit=\"%\",\n    tolerance=2,\n    description=\"foo bar\",\n    precision=2,\n    strict_mode=False,\n)\n```\nIf some of the keyword args are not provided, `default_xxxx` which was specified with `measurement.add()` call will be used\n- `id` ([type]): Unique id of this measurement\n- `status` (Optional[str], optional): status to be written to Console. self.measurements[id][\"default_status\"] is used if not provided.\n- `name` (Optional[str], optional): name to be written to Console. self.measurements[id][\"default_name\"] is used if not provided.\n- `value` (Optional[float], optional): value to be written to Console. self.measurements[id][\"default_value\"] is used if not provided.\n- `unit` (str, optional): unit to be written to Console. self.measurements[id][\"default_unit\"] is used if not provided.\n- `tolerance` (Optional[float], optional): tolerance to be written to Console. self.measurements[id][\"default_tolerance\"] is used if not provided.\n- `description` (Optional[str], optional): description to be written to Console. self.measurements[id][\"default_description\"] is used if not provided.\n- `precision` (Optional[int], optional): precision to be written to Console. self.measurements[id][\"default_precision\"] is used if not provided.\n- `strict_mode` (bool, optional): `name` must start with a digit if enabled. Defaults to True.\n\nClearing measurement:\n```python\nMeasurement.clear(\"measure id\")\n```\nThis method call will set all measurement values to `default_xxxx` values which were specified with `measurement.add()` call\n\nClearing all measurements\n```python\nMeasurement.clear_all()\n```\nIterates over all measurements and sets their values to `default_xxxx`\n\nChange default value of a measurement:\n```python\nMeasurement.edit_default_value(\"measure id\", \"default_description\", \"Edited default description\")\n```\n\nMeasure time decorator:\n```python\n# first define measurement for sending time\nMeasurement.add(\"09 time\", default_unit=\"minutes\")\n\n# then decorate a function you want to measure time of execution of\n@Measurement.measure_time(\"09 time\", time_unit=urpameasure.MINUTES)\ndef main():\n    pass\n```\nNote: do not confuse `default_unit` with `time_unit`:\n- `default_unit` is string that is displayed in the Management Console frontend\n- `time_unit` is unit to be used for time conversion inside the urpameasure module. Defaults to urpameasure.SECONDS\n\nMeasure login decorator:\n```python\n@Measurement.measure_login(\"01 login\")\ndef login():\n    pass\n```\nSends value 100 - SUCCESS if execution of function `login()` finishes.\nSends value 0 - ERROR if exception is raised during execution of function `login()`\n\n`measure_login()` decorator has two optional keyword argumensts:\n- error_status - defaults to urpameasure.ERROR (status to be displayed if login value is 0)\n- success_status - defaults to urpameasure.SUCCESS (status to be displayed if login value is 100)\n\n\n### Class Sydesk\nCreating instance:\n```python\nimport urpameasure\n\nMeasurement = urpameasure.Sydesk(\"/path/to/directory\")\n```\n\nAdding metrics:\n```python\nMeasurement.add(\n    \"measure id\"\n    \"source id\"\n    default_value=0,\n    default_expiration=60 * 60,\n    default_description=\"this is a measurement\"\n)\n```\n- `id` (str): Unique id of this measurement\n- `source_id` (str): String Data source ID in SyDesk\n- `default_value` (float): Value to be written to Sydesk. Defaults to 0\n- `default_expiration` (int): Expiration of the measurement in Sydesk in seconds. Defaults to 3600\n- `default_description` (Optional[str], optional): Description of the measurement. Defaults to None.\n\nWriting measurement:\n```python\nMeasurement.write(\n    \"measure id\"\n    value=1.5,\n    expiration=2,\n    description=\"foo bar\"\n)\n```\n- `id` (str): Unique id of this measurement\n- `value` (float, optional): Value to be written to Sydesk. self.measurements[id][\"default_value\"] is used if not provided. Defaults to 0\n- `expiration` (int, optional): Expiration of the measurement in Sydesk in seconds. self.measurements[id][\"default_expiration\"] is used if not provided. Defaults to 0.\n- `description` ([type], optional): Description of the measurement. self.measurements[id][\"default_description\"] is used if not provided. Defaults to None.\n\nClearing measurement:\n```python\nMeasurement.clear(\"measure id\")\n```\nThis method call will set all measurement values to `default_xxxx` values which were specified with `measurement.add()` call\n\nClearing all measurements\n```python\nMeasurement.clear_all()\n```\nIterates over all measurements and sets their values to `default_xxxx`\n\nChange default value of a measurement:\n```python\nMeasurement.edit_default_value(\"measure id\", \"default_value\", 100)\n```\n\nMeasure time decorator:\n```python\n# first define measurement for sending time\nMeasurement.add(\"time\", \"source id\")\n\n# then decorate a function you want to measure time of execution of\n@Measurement.measure_time(\"time\")\ndef main():\n    pass\n```\n\nMeasure login decorator:\n```python\n@Measurement.measure_login(\"login\", expiration=0, description=\"time measurement\")\ndef login():\n    pass\n```\nkeyword arguments `expiration` ad `description` are optional. They default to `0` and `None` respectively\n\n## Examples\n### Usage with Management Console\n```python\nimport urpa\nimport urpameasure\n\n# create Console class instance\nMeasurement = urpameasure.Console()\n# add all desired metrics\nMeasurement.add(\"login\", default_name=\"01 App login\")\nMeasurement.add(\n    \"app_navigation\",\n    default_status=urpameasure.ERROR,\n    default_name=\"02 App Navigation\",\n    default_value=0,\n    default_unit=\"%\",\n    default_tolerance=0,\n    default_description=\"Keeps track of navigation steps trough the app\",\n    default_precision=2\n)\nMeasurement.add(\"records_done\", default_status=urpameasure.INFO, default_name=\"03 Percentage done\", default_unit=\"%\")\n# turn off strict mode so we can use default_name that doesn't start with a digit\nMeasurement.add(\"time\", default_name=\"Time elapsed\", strcit_mode=False)\n\n\n@Measurement.measure_login(\"login\")\ndef login(app):\n    app.find_first(\"Login\").send_mouse_click()\n\n\n@Measurement.measure_time(\"time\")\ndef main():\n    # Clear all measurements. `default_xxxx` values defined with Measure.add() method call will be used\n    Measurement.clear_all()\n    # Write a measurement to Management Console. All arguments that are not supplied will use values defined with Measure.add() method call\n    Measurement.write(\"app_navigation\", value=0)\n    app = urpa.open_app(1234)\n    # Update a measurement and override some of its default values\n    Measurement.write(\"app_navigation\", value=50, description=\"App opened\")\n    login(app)\n    Measurement.write(\"app_navigation\", value=100, status=urpameasure.SUCCESS)\n    for record_index in range(1, 101):\n        # do some work here\n        Measurement.write(\"records_done\", value=record_index, description=f\"Records remaining: {100 - record_index}\")\n    # We can clear only one measurement at a time\n    Measurement.clear(\"app_navigation\")\n    # We can edit some of its default values that are used as a clear state\n    Measurement.edit_default_value(\"app_navigation\", \"default_unit\", \"Procenta\")\n    Measurement.clear(\"app_navigation\")\n```\n\n### Take more control over login and time function decorators - Management Console\n```python\n# We can override statuses which by default are SUCCESS for value 100, ERROR for value 0 and NONE for values other than 0 and 100\n# Values 0 and 100 are implicitly written by this function decorator (0: exception was raised, 100: exception was not raised)\n@Measurement.measure_login(\"login\", error_status=urpameasure.WARNING, success_status=urpameasure.INFO)\ndef login(app):\n    # We can write arbitrary value to login measure to hint some other state than success/error\n    Measurement.write(\"login\", value=50, status=urpameasure.NONE, description=\"The robot did not attempt login yet\")\n    app.find_first(\"Login\").send_mouse_click()\n\n\n# Time units can be urpameasure.SECONDS, urpameasure.MINUTES, urpameasure.HOURS\n# The time conversion is done automaticaly based on this value\n@Measurement.measure_time(\"time\", time_units=urpameasure.MINUTES, status=urpameasure.NONE)\ndef main():\n    pass\n```\n\n### Take more control over login and time function decorators - Sydesk\n```python\n# We can override expiration and description\n@Measurement.measure_login(\"login\", expiration=2, description=\"A login success measurement\")\ndef login(app):\n    app.find_first(\"Login\").send_mouse_click()\n\n\n@Measurement.measure_time(\"time\", expiration=2, description=\"A time measurement\")\ndef main():\n    pass\n```\n\n## Custom Errors\n- `MeasurementIdExistsError` - Raised when user tries to add another measurement with id that already exists\n- `InvalidMeasurementIdError` - Raised when user tries to access a measurement with id that does not exist\n- `SourceIdTooLongError` - Only for Sydesk: raised when user tries to define source_id longer than 32 characters\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ultimaterpa/urpameasure",
    "keywords": "Robotic Process Automation,RPA,UltimateRPA,measurement",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "urpameasure",
    "package_url": "https://pypi.org/project/urpameasure/",
    "platform": null,
    "project_url": "https://pypi.org/project/urpameasure/",
    "project_urls": {
      "Homepage": "https://github.com/ultimaterpa/urpameasure"
    },
    "release_url": "https://pypi.org/project/urpameasure/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Module containing wrapper classes for sending measurements with Management Console and Sydesk used with UltimateRPA robots",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14539879,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c37c95db8dad1a4930c2a729de3d62e776d565814af5f57b909e97a3cb3b4265",
          "md5": "ea531270ffb333d1cd87c113b821641b",
          "sha256": "1783bcf0b864ae85f445f8fe99437b83a1ce7887f0887ee1429487382295dfda"
        },
        "downloads": -1,
        "filename": "urpameasure-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea531270ffb333d1cd87c113b821641b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12857,
        "upload_time": "2022-07-25T11:02:55",
        "upload_time_iso_8601": "2022-07-25T11:02:55.391625Z",
        "url": "https://files.pythonhosted.org/packages/c3/7c/95db8dad1a4930c2a729de3d62e776d565814af5f57b909e97a3cb3b4265/urpameasure-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca7bcfaa881d2db3834449f4c95a147be709b667f59911a24fe9d431dd56122e",
          "md5": "0eb73ddb131860c066431db9178f930c",
          "sha256": "ee418ab1d72a93bcbc7c4d15497ab729de1a060ae5e571605d755c14530aae10"
        },
        "downloads": -1,
        "filename": "urpameasure-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0eb73ddb131860c066431db9178f930c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13204,
        "upload_time": "2022-07-25T11:02:57",
        "upload_time_iso_8601": "2022-07-25T11:02:57.700526Z",
        "url": "https://files.pythonhosted.org/packages/ca/7b/cfaa881d2db3834449f4c95a147be709b667f59911a24fe9d431dd56122e/urpameasure-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5cf389fdff923b920500daf61173626db07e47d7d622fdefb34d8c87ce22d6",
          "md5": "013267f64cdf89c732a9aff76cdb1927",
          "sha256": "cf87809bc54e883464d0ddb5c8177194db6f4859800736cc46a33ed6adee5aeb"
        },
        "downloads": -1,
        "filename": "urpameasure-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "013267f64cdf89c732a9aff76cdb1927",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12846,
        "upload_time": "2022-07-25T11:17:32",
        "upload_time_iso_8601": "2022-07-25T11:17:32.254267Z",
        "url": "https://files.pythonhosted.org/packages/3a/5c/f389fdff923b920500daf61173626db07e47d7d622fdefb34d8c87ce22d6/urpameasure-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc72d57db0aed106bee65788d8ccdf3a878bdc1ded551f166dde47bd80dc011b",
          "md5": "e2ca0aa35579b8fbedc7c087005625be",
          "sha256": "0a0043f6de79d85324acb8609d8e759a69cd665eab788e9098c0525f1353224a"
        },
        "downloads": -1,
        "filename": "urpameasure-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e2ca0aa35579b8fbedc7c087005625be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13179,
        "upload_time": "2022-07-25T11:17:34",
        "upload_time_iso_8601": "2022-07-25T11:17:34.382461Z",
        "url": "https://files.pythonhosted.org/packages/fc/72/d57db0aed106bee65788d8ccdf3a878bdc1ded551f166dde47bd80dc011b/urpameasure-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a5cf389fdff923b920500daf61173626db07e47d7d622fdefb34d8c87ce22d6",
        "md5": "013267f64cdf89c732a9aff76cdb1927",
        "sha256": "cf87809bc54e883464d0ddb5c8177194db6f4859800736cc46a33ed6adee5aeb"
      },
      "downloads": -1,
      "filename": "urpameasure-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "013267f64cdf89c732a9aff76cdb1927",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12846,
      "upload_time": "2022-07-25T11:17:32",
      "upload_time_iso_8601": "2022-07-25T11:17:32.254267Z",
      "url": "https://files.pythonhosted.org/packages/3a/5c/f389fdff923b920500daf61173626db07e47d7d622fdefb34d8c87ce22d6/urpameasure-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc72d57db0aed106bee65788d8ccdf3a878bdc1ded551f166dde47bd80dc011b",
        "md5": "e2ca0aa35579b8fbedc7c087005625be",
        "sha256": "0a0043f6de79d85324acb8609d8e759a69cd665eab788e9098c0525f1353224a"
      },
      "downloads": -1,
      "filename": "urpameasure-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e2ca0aa35579b8fbedc7c087005625be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13179,
      "upload_time": "2022-07-25T11:17:34",
      "upload_time_iso_8601": "2022-07-25T11:17:34.382461Z",
      "url": "https://files.pythonhosted.org/packages/fc/72/d57db0aed106bee65788d8ccdf3a878bdc1ded551f166dde47bd80dc011b/urpameasure-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}