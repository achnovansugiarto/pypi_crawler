{
  "info": {
    "author": "Lariel Fernandes",
    "author_email": "lariel.c2.fernandes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# Flaggery\n\nFeature flag management framework for serving rollouts, ab-tests and feature groups.\n\n**Table of contents:**\n - [Installation](#installation)\n - [Starting the API Server](#starting-the-api-server)\n - [Rest API Reference](#rest-api-reference)\n - [Configuring the API Server](#configuring-the-api-server)\n - [Quickstart Guide](#quickstart-guide)\n - [Entities Guide](#entities-guide)\n   - [Subjects](#subjects)\n   - [Buckets](#buckets)\n   - [Features and Variants](#features-and-variants)\n   - [Rollouts](#rollouts)\n   - [AB Tests](#ab-tests)\n   - [Groups and Overrides](#groups-and-overrides)\n\n## Installation\n\n```bash\npip install flaggery\n```\n\n## Starting the API Server\n\n```bash\nflaggery --host <host> --port <port>\n```\n\n<a id=\"rest-reference\"></a>\n## Rest API Reference\n\nTo access the API documentation,\nfirst start the API server and then open\n[http://{hostname}:{port}/docs](http://localhost/docs)\nin your browser.\n\n<a id=\"configuration\"></a>\n## Configuring the API server\n\nThe API server can be configured by setting the following environment variables:\n\n| Variable                     | Required | Default | Description                                                                                                                                                                                                                                                                                                                                                                                                                              |\n|------------------------------|----------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `FLAGGERY_DB_URL`            | Yes      | None    | SQLAlchemy compatible connection URL for an existing database.<br><br>Depending on which database you use, you might also need to install database-specific Python clients (e.g.: psycopg2 for PostgreSQL)                                                                                                                                                                                                                               |\n| `FLAGGERY_DB_AUTO_UPGRADE`   | No       | False   | If True, database will be migrated to the latest schema on server startup.                                                                                                                                                                                                                                                                                                                                                               |\n| `FLAGGERY_ADMIN_MODE`        | No       | False   | If True, all endpoints are available. <br> <br> If false, the server goes on a limited read-only mode, in which all endpoints are locked except for `GET /v1/subject/flags` <br> <br> For both security and performance reasons, it is recommended to deploy a single replica of the server in admin mode, which can only be accessed by admins, and many replicas in limited read-only mode, which can be accessed by clients at scale. |\n| `FLAGGERY_ENABLE_PROMETHEUS` | No       | False   | If True, prometheus metrics route is exposed at `/metrics`                                                                                                                                                                                                                                                                                                                                                                               |\n\n<a id=\"quickstart\"></a>\n## Quickstart Guide\n\nA basic workflow with Flaggery Python API (same operations also available in the Rest API)\n\n```python\nfrom flaggery.core import Flaggery\n\n# Create connection\nflaggery = Flaggery.from_db_url(\"postgresql+psycopg2://<user>:<pswd>@<host>:<port>/<db>\")\n\n# Migrate database to the latest schema\nflaggery.upgrade_db()\n\n# Allocate buckets (i.e.: partitions of subjects) \nflaggery.increase_buckets(10)\n\n# Add subjects (i.e.: could be users/accounts/clients)\nfor _id in range(100):\n    # Subjects have weight (i.e.: estimate of traffic/workload/demand/contract size)\n    flaggery.add_subject(_id, weight=random.randint(1, 10))\n# Subjects are automatically allocated into buckets by a weight balancing algorithm\n\n# Create a feature flag\nflaggery.add_feature(\"foobar\")\n\n# Create some variants of this feature\nflaggery.add_variant(\"A\", \"foobar\")\nflaggery.add_variant(\"B\", \"foobar\")\n\n# Make the feature disabled by default\nflaggery.add_disabling_variant(\"foobar\", make_default=True)\n\n# Set up a rollout of variant A\nflaggery.add_rollout(\"A\", \"foobar\")\n\n# Push the rollout proportion to 10% (it starts at 0%)\nflaggery.set_rollout_proportion(\"foobar\", proportion=0.1)\n\n# Now, the subjects getting variant 'A' of feature 'foobar'\n# amount to approximately 10% of all subjects' weight\ntotal_weight, weight_of_A = 0, 0\nfor subject_id in range(100):\n    with flaggery.get_subject(subject_id) as subject:\n        total_weight += subject.weight\n        if flaggery.get_subject_variants(subject_id)[\"foobar\"] == \"A\":\n            weight_of_A += subject.weight\nprint(\"Weight of variant 'A': %.2f%%\" % (100 * weight_of_A / total_weight))\n            \n# Create a user group\nflaggery.add_group(\"friends\")\n\n# Add a subject to the group\nflaggery.add_subject_to_group(42, \"friends\")\n\n# Configure a group override\nflaggery.add_group_override(\"friends\", \"foobar\", \"B\")\n\n# Now, subject 42 gets variant 'B' of feature 'foobar', regardless of rollout or default behaviour\nassert flaggery.get_subject_variants(42) == {\"foobar\": \"B\"}\n\n# Set up an AB-test on feature 'foobar'\nflaggery.add_abtest(\n    test_name=\"my_test\",\n    start=datetime(2024, 4, 1),\n    end=datetime(2024, 4, 12),\n    groups={\n        \"control\": {\"foobar\": \"__DISABLE__\"},\n        \"experiment\": {\"foobar\": \"B\"},\n    },\n    proportions=[0.8, 0.2]  # 80% control, 20% experiment\n)\n# Because the proportions sum up to 1, every bucket will be allocated to either one group or the other.\n# This means that during the test period, the rollout of 10% of 'A' will have no effect.\n# As always, group overrides have precedence, so subject 42 will still get 'B' regardless of its assigned test group.\n```\n\n<a id=\"entities-guide\"></a>\n## Entities Guide\n\n### Subjects\nSubjects may represent users, accounts, clients or something else.\nEach subject has a weight,\nwhich represents an estimate of the expected traffic,\ndemand or workload expected from that subject.\n\nFor an application with thousands of individual users,\nit makes sense to treat each user as a subject with weight 1.\nOn the other hand, for a B2B application where each user is an employee of\na client company, it makes sense to treat each client as a subject\nwith weight proportional to the contract size or number of purchased licenses.\n\n### Buckets\nBuckets contain subjects and can be assigned to rollouts or ab-tests.\nAll subjects inside the same bucket have access to the same feature variants.\nWe try to distribute subjects in a way that all buckets have roughly the same weight.\n\nThe system starts with zero buckets, so buckets must be increased before subjects are added.\nAs a rule of thumb, 10 buckets are good if you have a few hundreds of unit-weight subjects,\nwhile 100 buckets should be enough if you have more than that.\n\n### Features and Variants\nA feature is a named functionality of your application.\nA variant of that feature is a named implementation of the respective functionality\n(e.g.: if \"sorting\" is a feature, then \"bubble-sort\" and \"quick-sort\" are variants of it).\n\nA feature may have a default variant, which may also be a disabling variant.\n\nA disabling variant is a special type of variant that tells your application that\nno implementation of that feature is to be used.\nThe name `__DISABLE__` is reserved for this type of variant.\n\nWhen determining which variant of a feature a subject should get,\nthe order of resolution is:\n1. **None**\n2. **Default variant:** If that feature has a default variant\n3. **Rolled-out variant:** If a rollout of that feature exists and the subject's bucket was assigned\n4. **Variant in AB-testing group:** If a test of that feature is currently live\n5. **Variant overrides:** If the subject is in a group that overrides that feature \n\n### Rollouts\nA rollout is the serving of a feature variant to a proportion (i.e.: percentage) of the application traffic.\n\nA feature can only have one rollout at a time,\nalthough the chosen variant for that feature's rollout can be changed at any time.\n\nWhen a rollout is created, its proportion is always 0%.\nWhen its increased, more buckets are assigned to it.\nWhen its decreased, previously assigned bucket are unassigned.\n\nThe effective weight of a rollout is the sum of the weights of the assigned buckets.\nIt might deviate a bit from `proportion * total_weight` because of eventual bucket imbalances,\nalthough a rollout of 100% will always cover all buckets, as will a rollout of 0% cover zero buckets.\n\nRollouts take precedence over default variants in the subject's variants resolution,\nif the subject is in one of the assigned buckets.\n\n### AB Tests\nAn AB test is a structured, time-bound experiment\nin which certain features are affected differently for each test-group.\nUsually, a control group gets the stable or baseline variants of each feature\n(the ones which have been previously validated),\nwhile one or more experimental groups get each a different combination of feature variants.\n\nEach test-group has a proportion (i.e.: desired percentage of traffic weight).\nAll proportions must sum up to 1, so that every bucket is assigned to one of the groups.\n\nConcurrent tests affecting the same feature(s) are forbidden.\n\nAB-tests are considered after rollouts and default variants\nin the subject's variants resolution,\nso they take precedence over everything else except for group overrides.\n\n### Groups and Overrides\nA group is an arbitrary, custom-defined collection of subjects.\nIt may be configured to override certain features with certain variants.\n\nThis is useful when an under-development feature variant must be exposed only\nto a certain group of users, like the product designers, developers or beta testers.\n\nThe group override is the last step in the subject variant's resolution,\nso a subject will get the overriden variant regardless of defaults, rollouts and ab-tests.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/lariel.fernandes/flaggery",
    "keywords": "",
    "license": "CDDL-1.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flaggery",
    "package_url": "https://pypi.org/project/flaggery/",
    "platform": null,
    "project_url": "https://pypi.org/project/flaggery/",
    "project_urls": {
      "Homepage": "https://gitlab.com/lariel.fernandes/flaggery",
      "Repository": "https://gitlab.com/lariel.fernandes/flaggery"
    },
    "release_url": "https://pypi.org/project/flaggery/0.2.1/",
    "requires_dist": [
      "alembic (>=1.9.4,<2.0.0)",
      "cassandra-driver (>=3.25.0,<4.0.0)",
      "fastapi (>=0.92.0,<0.93.0)",
      "gunicorn (>=20.1.0,<21.0.0)",
      "jinja2 (>=3.1.2,<4.0.0)",
      "loguru (>=0.6.0,<0.7.0)",
      "merge-args (>=0.1.5,<0.2.0)",
      "prometheus-fastapi-instrumentator (>=5.11.1,<6.0.0)",
      "pydantic (>=1.10.5,<2.0.0)",
      "pyyaml (>=6.0,<7.0)",
      "sqlalchemy (>=2.0.4,<3.0.0)",
      "uvicorn (>=0.20.0,<0.21.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Feature flag management framework for serving rollouts, ab-tests and feature groups",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17325434,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7da7186ae5cd9a276801af4df809e9176c1fa3d417fdb0b3543101361a42efd",
          "md5": "717a816f6da0a0e5e9fb20ff1df5b965",
          "sha256": "36ec2c89897b14f93642841dce3b54132abff130782861213d95604c88d5c7d5"
        },
        "downloads": -1,
        "filename": "flaggery-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "717a816f6da0a0e5e9fb20ff1df5b965",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 23081,
        "upload_time": "2023-03-13T20:59:28",
        "upload_time_iso_8601": "2023-03-13T20:59:28.845405Z",
        "url": "https://files.pythonhosted.org/packages/b7/da/7186ae5cd9a276801af4df809e9176c1fa3d417fdb0b3543101361a42efd/flaggery-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81521f13b2b71e8b770553b150823ad7e7462d3056326d36390f48d662c4f3b6",
          "md5": "6dd84dcffc1126ffff4e29069c37e424",
          "sha256": "ea53c6b8fd32b7c9df792283c71b315153ab380b41b6877f49a38c47d593fd34"
        },
        "downloads": -1,
        "filename": "flaggery-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dd84dcffc1126ffff4e29069c37e424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 31888,
        "upload_time": "2023-03-16T16:07:20",
        "upload_time_iso_8601": "2023-03-16T16:07:20.978747Z",
        "url": "https://files.pythonhosted.org/packages/81/52/1f13b2b71e8b770553b150823ad7e7462d3056326d36390f48d662c4f3b6/flaggery-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b23658a36c2b7ff8ec4023b00e159f35218f59beba84a24776df101bed3be87",
          "md5": "17ff9fa07570cc72394b245b5ea431a9",
          "sha256": "fa545153a80e47b1ac3a32d0f6aa4992c4c2bf47fdb435e90fa4901374146622"
        },
        "downloads": -1,
        "filename": "flaggery-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17ff9fa07570cc72394b245b5ea431a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 32169,
        "upload_time": "2023-03-16T22:51:35",
        "upload_time_iso_8601": "2023-03-16T22:51:35.477419Z",
        "url": "https://files.pythonhosted.org/packages/7b/23/658a36c2b7ff8ec4023b00e159f35218f59beba84a24776df101bed3be87/flaggery-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b23658a36c2b7ff8ec4023b00e159f35218f59beba84a24776df101bed3be87",
        "md5": "17ff9fa07570cc72394b245b5ea431a9",
        "sha256": "fa545153a80e47b1ac3a32d0f6aa4992c4c2bf47fdb435e90fa4901374146622"
      },
      "downloads": -1,
      "filename": "flaggery-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "17ff9fa07570cc72394b245b5ea431a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 32169,
      "upload_time": "2023-03-16T22:51:35",
      "upload_time_iso_8601": "2023-03-16T22:51:35.477419Z",
      "url": "https://files.pythonhosted.org/packages/7b/23/658a36c2b7ff8ec4023b00e159f35218f59beba84a24776df101bed3be87/flaggery-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}