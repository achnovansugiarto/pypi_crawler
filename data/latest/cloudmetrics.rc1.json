{
  "info": {
    "author": "Leif Denby, Martin Janssens",
    "author_email": "l.c.denby@leeds.ac.uk, martin.janssens@wur.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# cloudmetrics\n\n[![cloudmetrics](https://github.com/cloudsci/cloudmetrics/actions/workflows/python-package-conda.yml/badge.svg)](https://github.com/cloudsci/cloudmetrics/actions/workflows/python-package-conda.yml)\n\nThe `cloudmetrics` package contains python routines to compute metrics\nfrom 2D cloud fields to characterise cloud patterns in these fields. Most\nmethods operate on a `cloud-mask` (i.e. a boolean true-false field)\nindicating where clouds exist, some work on individually labelled (with a\nunique integer ID) cloud objects (which can be produced from a cloud-mask) and\nfinally some work on 2D cloud scalar-fields (defining for example the\ncloud-liquid water or cloud-top height).\n\n> **NOTE**: the `cloudmetrics` package contained in this repository is\n> refactored from work published in [Janssens et al\n> 2021](https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2020GL091001),\n> this was done to make the routines implemented more accessible by external\n> tools and to ensure consistency. Not all functionality has been retained or\n> fully refactored, in particular functionality to allow for bulk-processing of\n> input files is in the\n> [cloudmetrics-pipline](https://github.com/cloudsci/cloudmetrics-pipeline)\n> package. Progress on the refactoring can be followed in issue\n> https://github.com/cloudsci/cloudmetrics/issues/20. The version published in\n> Janssens et al 2021 is [available tagged as version\n> v0.1.0](https://github.com/cloudsci/cloudmetrics/tree/v0.1.0).\n\n## Implemented metrics\n\nThe table below gives an overview over which metrics are avaiable in the\n`cloudmetrics` package and what input each metric takes.\n\n\n| function within `cloudmetrics`     | `mask`   | `object_labels` | `scalar_field` |\n| ---------------------------------- | -------- | --------------- | -------------- |\n| `mask.cloud_fraction`              | ✔️        |                 |                |\n| `mask.fractal_dimension`           | ✔️        |                 |                |\n| `mask.open_sky`                    | ✔️        |                 |                |\n| `mask.orientation`                 | ✔️        |                 |                |\n| `mask.network_nn_dist`             | TODO     |                 |                |\n| `mask.cop`                         | ✔️†       | ✔️               |                |\n| `mask.csd`                         | TODO     | TODO            |                |\n| `objects.iorg`                     | ✔️†       | ✔️               |                |\n| `objects.max_length_scale`         | ✔️†       | ✔️               |                |\n| `objects.mean_eccentricity`        | ✔️†       | ✔️               |                |\n| `objects.mean_length_scale`        | ✔️†       | ✔️               |                |\n| `objects.mean_perimeter_length`    | ✔️†       | ✔️               |                |\n| `objects.rdf`                      | TODO     | TODO            |                |\n| `objects.scai`                     | ✔️†       | ✔️               |                |\n| `scalar.spectral_anisotropy` #1    |          |                 | ✔️              |\n| `scalar.spectral_length_median`#1  |          |                 | ✔️              |\n| `scalar.spectral_length_moment,`#1 |          |                 | ✔️              |\n| `scalar.spectral_slope`#1          |          |                 | ✔️              |\n| `scalar.spectral_slope_binned`#1   |          |                 | ✔️              |\n| `scalar.woi1`                      |          |                 | ✔️              |\n| `scalar.woi2`                      |          |                 | ✔️              |\n| `scalar.woi3`                      |          |                 | ✔️              |\n| `scalar.mean`                      | optional |                 | ✔️              |\n| `scalar.var`                       | optional |                 | ✔️              |\n| `scalar.skew`                      | optional |                 | ✔️              |\n| `scalar.kurtosis`                  | optional |                 | ✔️              |\n\n†: for convenience object-based scalars are also made avaiable to operate\ndirectly on masks, for example `objects.max_length_scale(object_labels=...)`\ncan be called with a mask as `mask.max_object_length_scale(mask=...)` and\n`objects.iorg(object_labels=...)` can be called with\n`mask.iorg_objects(mask=...)`.\n\n#1: spectral metrics currently operate on the relevant power spectral densities,\nwhich must first be computed:\n```\nwavenumbers, psd_1d_radial, psd_1d_azimuthal = scalar.compute_spectra(...)\nspectral_length_moment = scalar.spectral_length_moment(wavenumbers, psd_1d_radial)\n```\nAlternatively, all spectral metrics can be computed simultaneously following the\nstandard convention with `spectral_metrics = scalar.compute_all_spectral(scalar_field)`.\nneed refactoring to take `scalar_field` as input\n\n# Installation\n\nTo install the most recent version of `cloudmetrics` from pypi you can use `pip`:\n\n```bash\n$> pip install cloudmetrics\n```\n\nIf you plan to add/modify `cloudmetrics` (contribution via pull-requests are\nvery welcome!) you should check out the [development\nnotes](https://github.com/cloudsci/cloudmetrics/blob/master/docs/developing.md)\nfor how to get set up with a local copy of the codebase.\n\n# Usage\n\nTo use the `cloudmetrics` package simply import `cloudmetrics` and use the\nmetric function you are interested in:\n\n```python\nimport cloudmetrics\n\niorg = cloudmetrics.iorg_objects(mask=da_cloudmask)\n```\n\nAs you can see in the table above the metrics are organised by the input they\ntake, either object masks, labelled-object arrays and/or 2D scalar fields you\nwant to perform reductions on.\n\n*Note on periodic domains*: internally `cloudmetrics` represents objects on\nperiodic domains by doubling the xy-size of any input mask provided, and moving\nany objects that straddle the boundary to ensure they are spatially contiguous.\nThis means that all functions which take 2D arrays of object-labels as input\nassume that all labelled objects are spatially contiguous and that the provided\ninput is actually `2*nx x 2*ny` (for an actual input domain spanning `nx` by\n`nx`). All metric functions that operate on masks handle the domain-doubling\ninternally and so do not require any modification to the masks before calling.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cloudsci/cloudmetrics",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cloudmetrics",
    "package_url": "https://pypi.org/project/cloudmetrics/",
    "platform": null,
    "project_url": "https://pypi.org/project/cloudmetrics/",
    "project_urls": {
      "Homepage": "https://github.com/cloudsci/cloudmetrics"
    },
    "release_url": "https://pypi.org/project/cloudmetrics/0.2.0/",
    "requires_dist": [
      "scipy (>=1.4.1)",
      "PyWavelets (>=1.1.1)",
      "hilbertcurve (>=2.0.5)",
      "scikit-image (>=0.16.2)",
      "scikit-learn (>=0.22.1)",
      "matplotlib (>=3.1.3)",
      "seaborn (>=0.10.0)",
      "pytest ; extra == 'dev'",
      "nbval ; extra == 'dev'",
      "nb-black ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "pytest ; extra == 'test'",
      "nbval ; extra == 'test'",
      "nb-black ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Cloud pattern metrics toolkit",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14880882,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0f6984b8d3f90fb0d138966a3d76131e9535ab71c2ea574cbcf13bb479c5294",
          "md5": "fa642a204498daea8225553461ca4221",
          "sha256": "1118f0a46f6d0c0a6ad6fea98360c27a5960d7321df6940cbda4c261595e7123"
        },
        "downloads": -1,
        "filename": "cloudmetrics-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa642a204498daea8225553461ca4221",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41987,
        "upload_time": "2022-08-25T15:09:53",
        "upload_time_iso_8601": "2022-08-25T15:09:53.929848Z",
        "url": "https://files.pythonhosted.org/packages/b0/f6/984b8d3f90fb0d138966a3d76131e9535ab71c2ea574cbcf13bb479c5294/cloudmetrics-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0f6984b8d3f90fb0d138966a3d76131e9535ab71c2ea574cbcf13bb479c5294",
        "md5": "fa642a204498daea8225553461ca4221",
        "sha256": "1118f0a46f6d0c0a6ad6fea98360c27a5960d7321df6940cbda4c261595e7123"
      },
      "downloads": -1,
      "filename": "cloudmetrics-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa642a204498daea8225553461ca4221",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41987,
      "upload_time": "2022-08-25T15:09:53",
      "upload_time_iso_8601": "2022-08-25T15:09:53.929848Z",
      "url": "https://files.pythonhosted.org/packages/b0/f6/984b8d3f90fb0d138966a3d76131e9535ab71c2ea574cbcf13bb479c5294/cloudmetrics-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}