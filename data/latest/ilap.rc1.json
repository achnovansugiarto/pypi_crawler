{
  "info": {
    "author": "Scott K. Hansen",
    "author_email": "skh@bgu.ac.il",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **ilap** : Python Tools for Numerical Inversion of the Laplace Transform\n\n## Overview\n\nThe **ilap** package implements the Fixed Talbot method for numerical inversion of the Laplace transform outlined by Abate and Valko (2004). Implementation is from scratch, based on the mathematical derivation presented in the paper.\n\nTwo functions are exposed, both of which implement the same functionality, but each using a different backend.\n\n- **invert(_lt_, _t_)** takes the name, _lt_, of some function of a single variable, **lt(_s_)**,  defining a Laplace transform with Laplace variable _s_, and a specified scalar (integer or float), _t_, representing the time at which the transform is to be inverted. It returns a float, representing the approximate value of the inverse transform at time _t_. The implementation uses Numpy or pure Python for all its numerics, and should accept essentially any function **lt**, regardless of the libraries used in its definition.\n\n- **invert_mp(_lt_, _t_)** operates the same way as **invert(_lt_, _t_)**, but it uses the mpmath arbitrary-precision library for its numerics. Because the numerical inversion of the Laplace transform is an ill-conditioned inverse problem, it is often necessary to use more than double precision to obtain useful results, and I recommend using this version if possible. The disadvantage of this method is that the mpmath library cannot work gracefully with Numpy/Scipy/Python math module functions: the transform **lt** _must_ be defined using only math functions defined in the mpmath module (most functions you could want are available), and basic Python arithmetic operations. **invert_mp** uses the currently set decimal precision of the mpmath module, which can be adjusted as needed before making a call to **invert_mp**. See the [mpmath documentation](https://mpmath.org/doc/current/) for more details.\n\n## Usage Example\n\nThis example demonstrates numerical inversion of a Laplace-domain analytical solution to the advection-dispersion equation using both inversion methods, and comparing the results with a time-domain analytical solution:\n\n    from ilap import invert, invert_mp\n    from matplotlib.pyplot import plot, legend, show, title, xlabel, ylabel\n    import mpmath as mpm\n    import numpy as np\n    from numpy import fromiter, float64, linspace, vectorize\n\n    #DEFINE LAPLACE TRANSFORMS FOR ADE AND TARGET SOLUTION\n    def L(alpha, d, v):\n        return d**2/(2*alpha*v)\n\n    def M(d, v):\n        return d/v \n\n    #Laplace transform using numpy functions\n    def phi_trans(s, d, alpha, v): \n        def ig_trans(s, L, M):\n            return np.exp(L/M - np.sqrt(L/M**2+ 2*s)/np.sqrt(1/L))\n        return ig_trans(s, L(alpha, d, v), M(d, v))\n\n    #Laplace transform using mpmath functions\n    def phi_trans_mp(s, d, alpha, v): \n        def ig_trans(s, L, M):\n            return mpm.exp(L/M - mpm.sqrt(L/M**2+ 2*s)/mpm.sqrt(1/L))\n        return ig_trans(s, L(alpha, d, v), M(d, v))\n\n    #Target analytic solution\n    def phi_direct(t, d, alpha, v): \n        def ig_direct(t, L, M):\n            return np.sqrt(L/(2*np.pi*t**3))*np.exp(-L*(t-M)**2/(2*M**2*t))\n        return ig_direct(t, L(alpha, d, v), M(d, v))\n\n    #PHYSICAL PARAMETERS\n    d = 1.5         #distance [m]\n    alpha = 3e-2    #dispersivity [m]\n    v = 0.53e-3     #velocity [m/s]\n    v_t = linspace(1, 7000, num=100) #times [s]\n    \n    #PLOTTING\n    #Plot target solution\n    df = vectorize(lambda t: phi_direct(t, d, alpha, v))\n    v_PDF = df(v_t)\n    plot(v_t, v_PDF, 'ks', markerfacecolor='none', ms=6, markeredgecolor='darkolivegreen', label=\"Exact solution\")\n\n    #Plot numerical inversion via invert()\n    lt = lambda s: phi_trans(s, d, alpha, v)\n    v_PDFt = fromiter(map(lambda t: invert(lt,t), v_t), dtype=float64)\n    plot(v_t, v_PDFt, lw=2, color=\"navy\", label=\"Solution via invert()\")\n\n    #Plot numerical inversion\n    lt = lambda s: phi_trans_mp(s, d, alpha, v)\n    v_PDFt = fromiter(map(lambda t: invert_mp(lt,t), v_t), dtype=float64)\n    plot(v_t, v_PDFt, ls=(0, (3, 3)), lw=2, color=\"goldenrod\", label=\"Solution via invert_mp()\")\n\n    #Format the plot area\n    xlabel(\"Time\")\n    ylabel(\"Probability density\")\n    title(\"Test of ilap module inversion methods on ADE solution\")\n    legend()\n    show()\n\n## Reference\n\nAbate, J. and P. P. Valko, 2004. Multi-precision Laplace transform inversion. _International Journal for Numerical\nMethods in Engineering_, 60(5), 979. doi:10.1002/nme.995.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/scottkalevhansen/ilap",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ilap",
    "package_url": "https://pypi.org/project/ilap/",
    "platform": "",
    "project_url": "https://pypi.org/project/ilap/",
    "project_urls": {
      "Homepage": "https://gitlab.com/scottkalevhansen/ilap"
    },
    "release_url": "https://pypi.org/project/ilap/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Numerical Laplace transform inversion tools",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11222562,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fb89e394e71437e50b1bb4265aeea3793e0f1e98eab4f583effe67d18cf8a9f",
          "md5": "20f92690e8ea4345b2325434d96e32b6",
          "sha256": "e0cd0fde0fd2e7ff3e3977256052ecee187687bdb2bb4d88c4c4adfe81571a9a"
        },
        "downloads": -1,
        "filename": "ilap-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20f92690e8ea4345b2325434d96e32b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6528,
        "upload_time": "2021-08-19T14:32:51",
        "upload_time_iso_8601": "2021-08-19T14:32:51.836586Z",
        "url": "https://files.pythonhosted.org/packages/6f/b8/9e394e71437e50b1bb4265aeea3793e0f1e98eab4f583effe67d18cf8a9f/ilap-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fb89e394e71437e50b1bb4265aeea3793e0f1e98eab4f583effe67d18cf8a9f",
        "md5": "20f92690e8ea4345b2325434d96e32b6",
        "sha256": "e0cd0fde0fd2e7ff3e3977256052ecee187687bdb2bb4d88c4c4adfe81571a9a"
      },
      "downloads": -1,
      "filename": "ilap-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "20f92690e8ea4345b2325434d96e32b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6528,
      "upload_time": "2021-08-19T14:32:51",
      "upload_time_iso_8601": "2021-08-19T14:32:51.836586Z",
      "url": "https://files.pythonhosted.org/packages/6f/b8/9e394e71437e50b1bb4265aeea3793e0f1e98eab4f583effe67d18cf8a9f/ilap-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}