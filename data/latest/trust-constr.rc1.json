{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# trust-constr\n\ntrust-constr optimization algorithm from the SciPy project that was originally implemented by [Antonio Horta Ribeiro](https://github.com/antonior92). This is a version of the trust-constr algorithm that does not depend on the rest of SciPy. The only dependency is NumPy. The goal is to have a version of the trust-constr algorithm that can run within the Pyodide environment.\n\n# Examples Using trust-constr\n\nSince the trust-constr algorithm was extracted from the `scipy.optimize` library, it uses the [same interface](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize) as `scipy.optimize.minimize`. The main different is that everything is imported from `trust_constr` rather than from `scipy.optimize`. The other difference is that the only optimization method available is 'trust-const'. The examples below show how to use trust-constr with a variety of different types of constraints.\n\n\n```python\nimport numpy as np\nfrom trust_constr import minimize, NonlinearConstraint, LinearConstraint, Bounds, check_grad\n```\n\n## Example 1: Nonlinear Inequality Constraint with Variable Bounds\nExample 15.1 from [1]\n\nSolve:\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/28fdfb7a1d96af9198fc716e27c095ae.svg?invert_in_darkmode\" align=middle width=276.69084134999997pt height=42.80407395pt/></p>\nSubject to:\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/fdf4422614269144ef7f80731ca33e4a.svg?invert_in_darkmode\" align=middle width=159.27210584999997pt height=32.990165999999995pt/></p>\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/565e576a78a7b581fe3c9ecf27b229d3.svg?invert_in_darkmode\" align=middle width=39.5318286pt height=12.82874835pt/></p>\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/224ba9af64deada0cfd312a4fea665df.svg?invert_in_darkmode\" align=middle width=38.78604675pt height=13.789957499999998pt/></p>\n\nSolution: <p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/babd0d08a2217bc8ce1f60222e098e93.svg?invert_in_darkmode\" align=middle width=155.03058119999997pt height=16.438356pt/></p>\n\n\nFirst solve without defining gradient (finite difference gradient will be used):\n\n\n```python\ndef objective(x):\n    return 0.5*(x[0]-2)**2+0.5*(x[1]-0.5)**2\n\ndef ineq_constraint(x):\n    return 1/(x[0]+1)-x[1]-0.25\n\n# Use np.inf of -np.inf to define a single sided constraint\n# If there are more than one constraint, that constraints will \n# be a list containing all of the constraints\nconstraints = NonlinearConstraint(ineq_constraint, 0, np.inf)\n\n# set bounds on the variables\n# only a lower bound is needed so the upper bound for both variables is set to np.inf\nbounds = Bounds([0,0], [np.inf, np.inf])\n\n# define starting point for optimization\nx0 = np.array([5.0, 1.0])\n\nres = minimize(objective, x0, bounds=bounds, constraints=constraints)\n\nprint(\"Solution =\", res.x)\nprint(f\"Obtained using {res.nfev} objective function evaluations.\")\n```\n\n    Solution = [1.95282327 0.08865882]\n    Obtained using 42 objective function evaluations.\n\n\nNow define the gradient for objective and constraint and check gradients:\n\n\n```python\ndef objective_gradient(x):\n    return np.array([(x[0]-2), (x[1]-0.5)])\n\ndef ineq_gradient(x):\n    return np.array([-1/((x[0]+1)**2), -1])\n\n# check analytical gradients against finite difference gradient\n# an incorrect analytical gradient is a common cause for lack of convergence to a true minimum\nfor x in np.random.uniform(low=[0,0], high=[10,10], size=(5,2)):\n    print(\"objective difference: \", check_grad(objective, objective_gradient, x))\n    print(\"constraint difference:\", check_grad(ineq_constraint, ineq_gradient, x))\n\n\n```\n\n    objective difference:  7.24810320719611e-08\n    constraint difference: 2.1805555505335916e-08\n    objective difference:  1.5409355031965243e-08\n    constraint difference: 1.8387489794657874e-10\n    objective difference:  8.16340974645582e-08\n    constraint difference: 2.2211865402521624e-08\n    objective difference:  1.51975085661403e-07\n    constraint difference: 5.070987015715067e-10\n    objective difference:  1.7113557964841567e-07\n    constraint difference: 4.981334539820581e-08\n\n\nFinally, minimize using the gradient functions that were just test:\n\n\n```python\nconstraints = NonlinearConstraint(ineq_constraint, 0, np.inf, jac=ineq_gradient)\n\nres = minimize(objective, x0, jac=objective_gradient, bounds=bounds, constraints=constraints)\n\nprint(\"Solution =\", res.x)\nprint(f\"Obtained using {res.nfev} objective function evaluations.\")\n```\n\n    Solution = [1.95282328 0.08865881]\n    Obtained using 14 objective function evaluations.\n\n\n## Example 2: Nonlinear Equality Constraint\nExample 15.2 from [1]\n\nSolve:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/2fee2fcbc6493f2dfed3044b1532bbbe.svg?invert_in_darkmode\" align=middle width=82.19939475pt height=26.303252249999996pt/></p>\n\nSubject to:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/3bedd9434e5c8c145c46787c6cd9af74.svg?invert_in_darkmode\" align=middle width=124.1169798pt height=18.312383099999998pt/></p>\n\nSolution:\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/6e7b6b6a241ed9fb63a931886262f6a4.svg?invert_in_darkmode\" align=middle width=96.58287705pt height=16.438356pt/></p>\n\n\n\n\n```python\nobjective2 = lambda x: x[0]**2 + x[1]**2\nobjective2_gradient = lambda x: np.array([2*x[0], 2*x[1]])\n\neq_constraint = lambda x: (x[0]-1)**3 - x[1]**2\neq_gradient = lambda x: np.array([3*(x[0]-1)**2, -2*x[1]]) \n\n# Make the upper and lower bound both zero to define an equality constraint\nconstraints = NonlinearConstraint(eq_constraint, 0, 0, jac=eq_gradient) \n\nx0 = np.array([5, 2])\n\nres = minimize(objective2, x0, jac=objective2_gradient, constraints=constraints)\n\nprint(\"Solution =\", res.x)\nprint(f\"Obtained using {res.nfev} objective function evaluations.\")\n```\n\n    Solution = [9.99966899e-01 3.36074169e-09]\n    Obtained using 181 objective function evaluations.\n\n\n## Example 3: Linear Constraint\nExample problem from [2]\n\nSolve:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/224a59c0b33c11009e0b5de29effd0e4.svg?invert_in_darkmode\" align=middle width=202.6216566pt height=29.654885699999998pt/></p>\n\nSubject to:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/278cd1acde20484153c1e2b358a714e0.svg?invert_in_darkmode\" align=middle width=76.49143425pt height=13.789957499999998pt/></p>\n\n\nSolution:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/313de0b35c1215a65b80c1a3a53e9d32.svg?invert_in_darkmode\" align=middle width=171.4689999pt height=16.438356pt/></p>\n\n\n```python\nobjective3 = lambda x: 100.0*(x[1] - x[0]**2)**2.0 + (1 - x[0])**2\n\nobjective3_gradient = lambda x: np.array([-400*(x[1]-x[0]**2)*x[0]-2*(1-x[0]),\n                                          200*(x[1]-x[0]**2)])\n\n# define the linear constraint\nA = np.array([[1,2]])\nconstraints = LinearConstraint(A, [-np.inf], [1])\n\nx0 = np.array([-1, 2])\n\nres = minimize(objective3, x0, jac=objective3_gradient, constraints=constraints)\n\nprint(\"Solution =\", res.x)\nprint(f\"Obtained using {res.nfev} objective function evaluations.\")\n```\n\n    Solution = [0.50220246 0.24889838]\n    Obtained using 45 objective function evaluations.\n\n\n## Example 4: Unconstrained Optimization\nExample problem from [3]\n\nSolve:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/68eac75e5d74e3f0cbaf01f89339a552.svg?invert_in_darkmode\" align=middle width=308.680977pt height=49.9887465pt/></p>\n\nSolution for <img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/9aad22a1f10eb2f672ffc52c46eac498.svg?invert_in_darkmode\" align=middle width=45.13680929999999pt height=22.465723500000017pt/>:\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/mgreminger/trust-constr/1849afa5af222a69e25679b5336a48e6b58a2853/svgs/2320eb38cb2a4f6c8ab1fe49826b4749.svg?invert_in_darkmode\" align=middle width=83.9495745pt height=16.438356pt/></p>\n\n\n\n```python\ndef rosenbrock_function(x):\n    result = 0\n\n    for i in range(len(x) - 1):\n        result += 100 * (x[i + 1] - x[i] ** 2) ** 2 + (1 - x[i]) ** 2\n\n    return result\n\nx0 = np.array([0.1, -0.5, -5.0])\n\nres = minimize(rosenbrock_function, x0)\n\nprint(\"Solution =\", res.x)\nprint(f\"Obtained using {res.nfev} objective function evaluations.\")\n```\n\n    Solution = [0.99999729 0.99999458 0.99998915]\n    Obtained using 224 objective function evaluations.\n\n\n## References\n[1] Nocedal, Jorge, and Stephen J. Wright. *Numerical Optimization*. 2nd ed. Springer Series in Operations Research. New York: Springer, 2006.\n\n[2] https://www.mathworks.com/help/optim/ug/fmincon.html\n\n[3] https://en.wikipedia.org/wiki/Rosenbrock_function\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgreminger/trust-constr",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trust-constr",
    "package_url": "https://pypi.org/project/trust-constr/",
    "platform": "",
    "project_url": "https://pypi.org/project/trust-constr/",
    "project_urls": {
      "Homepage": "https://github.com/mgreminger/trust-constr"
    },
    "release_url": "https://pypi.org/project/trust-constr/1.0.0/",
    "requires_dist": [
      "numpy (>=1.16.5)"
    ],
    "requires_python": ">=3.7",
    "summary": "trust-constr optimization algorithm from the SciPy project.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9236341,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65fd3514f4bd4f94a0d16ff7143256c73dacb58fd9e08154f9cab4dd8981a8b9",
          "md5": "5a903a1193a4d05f62003bddfddfe60c",
          "sha256": "108e994b9bbf60195f277a45b6a5d45d59d8b8b17b1c53539a9fc710fac78d94"
        },
        "downloads": -1,
        "filename": "trust_constr-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a903a1193a4d05f62003bddfddfe60c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 92930,
        "upload_time": "2021-01-26T19:14:51",
        "upload_time_iso_8601": "2021-01-26T19:14:51.624714Z",
        "url": "https://files.pythonhosted.org/packages/65/fd/3514f4bd4f94a0d16ff7143256c73dacb58fd9e08154f9cab4dd8981a8b9/trust_constr-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81f06eb0de8b32b3b31b0d179a898c5b21db387ade27609cc94b1d6ec1f10b61",
          "md5": "96ef35b9db1b824761be8b784d552833",
          "sha256": "e79e5330caa229ee69714faf5e6968e6e33a384d3e439a6ebbc4852f4b5e2731"
        },
        "downloads": -1,
        "filename": "trust-constr-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96ef35b9db1b824761be8b784d552833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 86967,
        "upload_time": "2021-01-26T19:14:53",
        "upload_time_iso_8601": "2021-01-26T19:14:53.289152Z",
        "url": "https://files.pythonhosted.org/packages/81/f0/6eb0de8b32b3b31b0d179a898c5b21db387ade27609cc94b1d6ec1f10b61/trust-constr-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65fd3514f4bd4f94a0d16ff7143256c73dacb58fd9e08154f9cab4dd8981a8b9",
        "md5": "5a903a1193a4d05f62003bddfddfe60c",
        "sha256": "108e994b9bbf60195f277a45b6a5d45d59d8b8b17b1c53539a9fc710fac78d94"
      },
      "downloads": -1,
      "filename": "trust_constr-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a903a1193a4d05f62003bddfddfe60c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 92930,
      "upload_time": "2021-01-26T19:14:51",
      "upload_time_iso_8601": "2021-01-26T19:14:51.624714Z",
      "url": "https://files.pythonhosted.org/packages/65/fd/3514f4bd4f94a0d16ff7143256c73dacb58fd9e08154f9cab4dd8981a8b9/trust_constr-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81f06eb0de8b32b3b31b0d179a898c5b21db387ade27609cc94b1d6ec1f10b61",
        "md5": "96ef35b9db1b824761be8b784d552833",
        "sha256": "e79e5330caa229ee69714faf5e6968e6e33a384d3e439a6ebbc4852f4b5e2731"
      },
      "downloads": -1,
      "filename": "trust-constr-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "96ef35b9db1b824761be8b784d552833",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 86967,
      "upload_time": "2021-01-26T19:14:53",
      "upload_time_iso_8601": "2021-01-26T19:14:53.289152Z",
      "url": "https://files.pythonhosted.org/packages/81/f0/6eb0de8b32b3b31b0d179a898c5b21db387ade27609cc94b1d6ec1f10b61/trust-constr-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}