{
  "info": {
    "author": "Xander Rudelis",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "Find the package here: https://pypi.org/project/pytrait/\n\nPyTrait\n=======\n\nDo you like Python, but think that multiple inheritance is a bit too flexible? Are you\nlooking for a more constrained way to define interfaces and re-use code?\n\nTry using PyTraits!\n\nWe provide three metaclasses that aid writing code for shared behavior separately from\nconcrete types. For the most part, `Trait`s define interfaces, `Struct`s define state,\nand `Impl`s define implementation. `Trait`s must be defined before any `Impl`s which\nimplement them, and `Impl`s must be defined before the `Struct`s that use them.\n\nSee examples under `examples/`.\n\n\nTraits\n------\n\nTraits are abstract base classes (ABCs). There's really not much else to say, except\nthat these ABCs are always implemented in `Impl` classes, which themselves have no\nabstract methods, but are not concrete classes; instead an `Impl` is associated with\nanother type that it bestows implementation upon. This would be either a concrete class\n(always a `Struct`) or all such concrete classes implementing a given `Trait`.\n\n\n    from pytrait import Trait, abstractmethod    \n\n    class MyTrait(metaclass=Trait):\n        @abstractmethod\n        def my_method(self) -> str:\n            pass\n\n\nStructs\n-------\n\nPython has _dataclasses_, and they're great. We're using them internally for our\nStructs, so whenever you see `metaclass=Struct`, the class is also a dataclass.\nDon't get confused with the existing Python module `struct` -- that one is lower-case.\n\n\n    from pytrait import Struct\n\n    class MyStruct(metaclass=Struct):\n        my_message: str = \"this is a dataclass\"\n\n        def __post_init__(self):\n            assert my_message == \"this is a dataclass\"\n\n\nImpls\n-----\n\n`Impl`s bring together `Trait`s and `Struct`s. They represent the implementation details\nthat satisfy one particular interface.\n\nWhy isn't the implementation just all together under the `Struct`? Organization,\nmostly. Also, \"blanket\" `Impl`s can provide implementation for any `Struct` implementing\na given `Trait`, so `Impl`s allow for greater code re-use.\n\n`Impl`s have to indicate which `Struct`s they bestow implementation upon. You can\nfollow a strict naming convention, like `ImplMyTraitForMyStruct`. This is sufficient.\nOr, you can use any name you want so long as you also provide a keyword argument\n`target=\"StructName\"` alongside the `metaclass` argument.\n\n\n    from pytrait import Impl\n\n    class MyImpl(MyTrait, metaclass=Impl, target=\"MyStruct\"):\n        ...\n\nor equivalently,\n\n\n    from pytrait import Impl\n\n    class ImplMyTraitForMyStruct(MyTrait, metaclass=Impl):\n        ...\n\nThis is used to automate the list of implementations for `MyStruct`; you don't need to\nexplicitly list any superclasses of `MyStruct`, just based on the `Impl` name it will\ninherit from all relevant `Impl`s.\n\n\nFAQ\n===\n\n\nThis reminds me of another programming language\n-----------------------------------------------\n\nThat is not a question, but you have indeed figured me out. This way of organizing\nPython code was heavily inspired by the Rust programming language. But beyond being an\nimitation, it's a testament to how powerful Python is. My philosophy is that if\nyou're not using the flexibility of Python to limit yourself, you're not making use of\nthe full flexibility of Python.\n\n\nWhat doesn't work?\n------------------\n\nA Struct can't have traits with overlapping method names. Rust can solve this\nwith its \"fully qualified syntax\", or by type constraints, but Python will\nby default only resolve to the method from the first listed superclass (see\nPython's \"Method Resolution Order\").\n\nI don't think there's any easy way around this, because in Python there's no clear way\nto choose which implementation to use based on type annotation. If you _really_ want to\nlet a `Struct` implement two traits that have the same method name, you can always wrap\nyour class definition in a try block and catch the `MultipleImplementationError`. Maybe\nyou can find a way to make it work.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xrudelis/pytrait",
    "keywords": "trait,traits",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytrait",
    "package_url": "https://pypi.org/project/pytrait/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytrait/",
    "project_urls": {
      "Homepage": "https://github.com/xrudelis/pytrait"
    },
    "release_url": "https://pypi.org/project/pytrait/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "Rust-like traits for Python3",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12089359,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ca0098efc9a561db8c2ab68364976155cbfc5aa7a8f995ad173820e949beb7",
          "md5": "95e60e752561c7333407a688ff336167",
          "sha256": "b13f79163c740abad29d7362d63f841f8019b0ddb71d7bb48a41aa287a7eb426"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95e60e752561c7333407a688ff336167",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 10853,
        "upload_time": "2021-11-21T19:56:34",
        "upload_time_iso_8601": "2021-11-21T19:56:34.484860Z",
        "url": "https://files.pythonhosted.org/packages/d9/ca/0098efc9a561db8c2ab68364976155cbfc5aa7a8f995ad173820e949beb7/pytrait-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8609dfd9d77c2721e76217cac80593f1a2abe5f59eab8c3681ccbd0e9af1c16",
          "md5": "e519f52a63134bb82b41c6aa3604e499",
          "sha256": "be1893a582ecf65d5cd7cb4049d8e7bbedc26316cb888232a61450b10bbed837"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e519f52a63134bb82b41c6aa3604e499",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 9735,
        "upload_time": "2021-11-21T19:56:35",
        "upload_time_iso_8601": "2021-11-21T19:56:35.981997Z",
        "url": "https://files.pythonhosted.org/packages/e8/60/9dfd9d77c2721e76217cac80593f1a2abe5f59eab8c3681ccbd0e9af1c16/pytrait-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c085c3520afd3fbb5bab4ee374857728f887131df853f98dcb35fff78ea2af3",
          "md5": "34963caa9f03ec0a4c76a73099e456ba",
          "sha256": "6451cac2a50415a27edaab8d446fa5b5a5f080f753444db65cfa649dbd3acad1"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34963caa9f03ec0a4c76a73099e456ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 11292,
        "upload_time": "2021-11-21T23:13:13",
        "upload_time_iso_8601": "2021-11-21T23:13:13.968199Z",
        "url": "https://files.pythonhosted.org/packages/8c/08/5c3520afd3fbb5bab4ee374857728f887131df853f98dcb35fff78ea2af3/pytrait-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2909cb0821e3ffbaff0e8935289852afe7bad553f897d7b85f96a64f12994c0a",
          "md5": "18faa2c3a22b46fc373c2631cb9a2747",
          "sha256": "a1880e6956ba1afaa0b845d41cfdcd9bca56a10fa695fbbc94141b4e03f58e5d"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "18faa2c3a22b46fc373c2631cb9a2747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 12365,
        "upload_time": "2021-11-21T23:13:15",
        "upload_time_iso_8601": "2021-11-21T23:13:15.882241Z",
        "url": "https://files.pythonhosted.org/packages/29/09/cb0821e3ffbaff0e8935289852afe7bad553f897d7b85f96a64f12994c0a/pytrait-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56d631ebedf797b5bb334e1f767fd70302086f7e3908ccbca9c0103631feda10",
          "md5": "b02530a2efe398ce695481bfc17f96a0",
          "sha256": "0e7b4cd09742f51f3e6fff8a61606b73dfa29f3e2201ee3a1043ecc89ea51085"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b02530a2efe398ce695481bfc17f96a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 11837,
        "upload_time": "2021-11-22T07:41:26",
        "upload_time_iso_8601": "2021-11-22T07:41:26.169495Z",
        "url": "https://files.pythonhosted.org/packages/56/d6/31ebedf797b5bb334e1f767fd70302086f7e3908ccbca9c0103631feda10/pytrait-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58097675ac8b4e451b7608f490f2cc3b05c7dcbf22346f2257942eb0458cfa02",
          "md5": "a7d3e1e74ef9b38ea544bf1934ca06cf",
          "sha256": "5d71b00af2a400496d5c3354ded97679dca12ce1a1926de4240129363053dd2a"
        },
        "downloads": -1,
        "filename": "pytrait-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a7d3e1e74ef9b38ea544bf1934ca06cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 12794,
        "upload_time": "2021-11-22T07:41:28",
        "upload_time_iso_8601": "2021-11-22T07:41:28.483570Z",
        "url": "https://files.pythonhosted.org/packages/58/09/7675ac8b4e451b7608f490f2cc3b05c7dcbf22346f2257942eb0458cfa02/pytrait-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56d631ebedf797b5bb334e1f767fd70302086f7e3908ccbca9c0103631feda10",
        "md5": "b02530a2efe398ce695481bfc17f96a0",
        "sha256": "0e7b4cd09742f51f3e6fff8a61606b73dfa29f3e2201ee3a1043ecc89ea51085"
      },
      "downloads": -1,
      "filename": "pytrait-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b02530a2efe398ce695481bfc17f96a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 11837,
      "upload_time": "2021-11-22T07:41:26",
      "upload_time_iso_8601": "2021-11-22T07:41:26.169495Z",
      "url": "https://files.pythonhosted.org/packages/56/d6/31ebedf797b5bb334e1f767fd70302086f7e3908ccbca9c0103631feda10/pytrait-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58097675ac8b4e451b7608f490f2cc3b05c7dcbf22346f2257942eb0458cfa02",
        "md5": "a7d3e1e74ef9b38ea544bf1934ca06cf",
        "sha256": "5d71b00af2a400496d5c3354ded97679dca12ce1a1926de4240129363053dd2a"
      },
      "downloads": -1,
      "filename": "pytrait-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a7d3e1e74ef9b38ea544bf1934ca06cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 12794,
      "upload_time": "2021-11-22T07:41:28",
      "upload_time_iso_8601": "2021-11-22T07:41:28.483570Z",
      "url": "https://files.pythonhosted.org/packages/58/09/7675ac8b4e451b7608f490f2cc3b05c7dcbf22346f2257942eb0458cfa02/pytrait-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}