{
  "info": {
    "author": "Donald Cross",
    "author_email": "cosinekitty@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Astronomy Engine (Python)\n\nThis is the complete programming reference for the Python version of\nAstronomy Engine. Supports Python 3. Does NOT support Python 2.\nSee the [home page](https://github.com/cosinekitty/astronomy) for more info.\n\n---\n\n## Quick Start\n\n[![pypi](https://img.shields.io/pypi/v/astronomy-engine)](https://pypi.org/project/astronomy-engine/)\n\nTo include Astronomy Engine in your own Python program,\nyou can use the [astronomy-engine](https://pypi.org/project/astronomy-engine/) package:\n\n```\npip install astronomy-engine\n```\n\nAlternatively, you can copy the file [astronomy/astronomy.py](astronomy/astronomy.py)\ninto your project directory.\n\nWith either approach, add the following line toward the top of your program:\n\n```python\nimport astronomy\n```\n\n\nTo get started quickly, here are some [examples](../../demo/python/).\n\n---\n\n## Contents\n\n- [Topic Index](#topics)\n- [Constants](#constants)\n- [Classes](#classes)\n- [Enumerated Types](#enumerations)\n- [Error Types](#errors)\n- [Functions](#functions)\n\n---\n\n<a name=\"topics\"></a>\n## Topic Index\n\n### Position of Sun, Moon, and planets\n\n| Function | Description |\n| -------- | ----------- |\n| [HelioVector](#HelioVector) | Calculates body position vector with respect to the center of the Sun. |\n| [GeoVector](#GeoVector)     | Calculates body position vector with respect to the center of the Earth. |\n| [Equator](#Equator)         | Calculates right ascension and declination. |\n| [Ecliptic](#Ecliptic)       | Converts J2000 mean equator (EQJ) coordinates to true ecliptic of date (ECT) coordinates. |\n| [EclipticLongitude](#EclipticLongitude) | Calculates true ecliptic of date (ECT) longitude for a body. |\n| [Horizon](#Horizon)         | Calculates horizontal coordinates (azimuth, altitude) for a given observer on the Earth. |\n| [PairLongitude](#PairLongitude) | Calculates the difference in apparent ecliptic longitude between two bodies, as seen from the Earth. |\n| [BaryState](#BaryState) | Calculates the barycentric position and velocity vectors of the Sun or a planet. |\n\n### Geographic helper functions\n\n| Function | Description |\n| -------- | ----------- |\n| [ObserverVector](#ObserverVector) | Calculates a vector from the center of the Earth to an observer on the Earth's surface. |\n| [VectorObserver](#VectorObserver) | Calculates the geographic coordinates for a geocentric equatorial vector. |\n\n### Rise, set, and culmination times\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchRiseSet](#SearchRiseSet) | Finds time of rise or set for a body as seen by an observer on the Earth. |\n| [SearchAltitude](#SearchAltitude) | Finds time when a body reaches a given altitude above or below the horizon. Useful for finding civil, nautical, or astronomical twilight. |\n| [SearchHourAngle](#SearchHourAngle) | Finds when body reaches a given hour angle for an observer on the Earth. Hour angle = 0 finds culmination, the highest point in the sky. |\n\n### Moon phases\n\n| Function | Description |\n| -------- | ----------- |\n| [MoonPhase](#MoonPhase) | Determines the Moon's phase expressed as an ecliptic longitude. |\n| [SearchMoonPhase](#SearchMoonPhase) | Finds the next instance of the Moon reaching a specific ecliptic longitude separation from the Sun. |\n| [SearchMoonQuarter](#SearchMoonQuarter) | Finds the first quarter moon phase after a given date and time. |\n| [NextMoonQuarter](#NextMoonQuarter) | Finds the next quarter moon phase after a previous one that has been found. |\n\n### Eclipses and Transits\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchLunarEclipse](#SearchLunarEclipse) | Search for the first lunar eclipse after a given date. |\n| [NextLunarEclipse](#NextLunarEclipse) | Continue searching for more lunar eclipses. |\n| [SearchGlobalSolarEclipse](#SearchGlobalSolarEclipse) | Search for the first solar eclipse after a given date that is visible anywhere on the Earth. |\n| [NextGlobalSolarEclipse](#NextGlobalSolarEclipse) | Continue searching for solar eclipses visible anywhere on the Earth. |\n| [SearchLocalSolarEclipse](#SearchLocalSolarEclipse) | Search for the first solar eclipse after a given date that is visible at a particular location on the Earth. |\n| [NextLocalSolarEclipse](#NextLocalSolarEclipse) | Continue searching for solar eclipses visible at a particular location on the Earth. |\n| [SearchTransit](#SearchTransit) | Search for the next transit of Mercury or Venus. |\n| [NextTransit](#NextTransit) | Continue searching for transits of Mercury or Venus. |\n\n### Lunar perigee and apogee\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchLunarApsis](#SearchLunarApsis) | Finds the next perigee or apogee of the Moon after a specified date. |\n| [NextLunarApsis](#NextLunarApsis) | Given an already-found apsis, finds the next perigee or apogee of the Moon. |\n\n### Planet perihelion and aphelion\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchPlanetApsis](#SearchPlanetApsis) | Finds the next perihelion or aphelion of a planet after a specified date. |\n| [NextPlanetApsis](#NextPlanetApsis) | Given an already-found apsis, finds the next perihelion or aphelion of a planet. |\n\n### Visual magnitude and elongation\n\n| Function | Description |\n| -------- | ----------- |\n| [Illumination](#Illumination) | Calculates visual magnitude and phase angle of bodies as seen from the Earth. |\n| [SearchPeakMagnitude](#SearchPeakMagnitude) | Searches for the date and time Venus will next appear brightest as seen from the Earth. |\n| [AngleFromSun](#AngleFromSun) | Returns full angle seen from Earth between body and Sun. |\n| [Elongation](#Elongation) | Calculates ecliptic longitude angle between a body and the Sun, as seen from the Earth. |\n| [SearchMaxElongation](#SearchMaxElongation) | Searches for the next maximum elongation event for Mercury or Venus that occurs after the given date. |\n\n### Oppositions and conjunctions\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchRelativeLongitude](#SearchRelativeLongitude) | Finds oppositions and conjunctions of planets. |\n\n### Equinoxes, solstices, and apparent solar motion\n\n| Function | Description |\n| -------- | ----------- |\n| [SearchSunLongitude](#SearchSunLongitude) | Finds the next time the Sun reaches a specified apparent ecliptic longitude in the *true equator of date* system. |\n| [Seasons](#Seasons) | Finds the equinoxes and solstices for a given calendar year. |\n| [SunPosition](#SunPosition) | Calculates the Sun's apparent true ecliptic of date (ECT) coordinates as seen from the Earth. |\n\n### Coordinate transforms\n\nThe following orientation systems are supported.\nAstronomy Engine can convert a vector from any of these orientations to any of the others.\nIt also allows converting from a vector to spherical (angular) coordinates and back,\nwithin a given orientation. Note the 3-letter codes for each of the orientation systems;\nthese are used in function and type names.\n\n- **EQJ = J2000 Mean Equator**: Uses the Earth's mean equator (corrected for precession but ignoring nutation) on January 1, 2000, at noon UTC. This moment in time is called J2000.\n- **EQD = True Equator of Date**: Uses the Earth's equator on a given date and time, adjusted for precession and nutation.\n- **ECL = J2000 Mean Ecliptic**: Uses the plane of the Earth's orbit around the Sun at J2000. The x-axis is referenced against the J2000 mean equinox.\n- **ECT = True Ecliptic of Date**: Uses the true (corrected for precession and nutation) orbital plane of the Earth on the given date. The x-axis is referenced against the true equinox for that date.\n- **HOR = Horizontal**: Uses the viewpoint of an observer at a specific location on the Earth at a given date and time.\n- **GAL = Galactic**: Based on the IAU 1958 definition of galactic coordinates.\n\n| Function | Description |\n| -------- | ----------- |\n| [RotateVector](#RotateVector) | Applies a rotation matrix to a vector, yielding a vector in another orientation system. |\n| [InverseRotation](#InverseRotation) | Given a rotation matrix, finds the inverse rotation matrix that does the opposite transformation. |\n| [CombineRotation](#CombineRotation) | Given two rotation matrices, returns a rotation matrix that combines them into a net transformation. |\n| [IdentityMatrix](#IdentityMatrix) | Returns a 3x3 identity matrix, which can be used to form other rotation matrices. |\n| [Pivot](#Pivot) | Transforms a rotation matrix by pivoting it around a given axis by a given angle. |\n| [VectorFromSphere](#VectorFromSphere) | Converts spherical coordinates to Cartesian coordinates. |\n| [SphereFromVector](#SphereFromVector) | Converts Cartesian coordinates to spherical coordinates. |\n| [EquatorFromVector](#EquatorFromVector) | Given an equatorial vector, calculates equatorial angular coordinates. |\n| [VectorFromHorizon](#VectorFromHorizon) | Given apparent angular horizontal coordinates, calculates horizontal vector. |\n| [HorizonFromVector](#HorizonFromVector) | Given a vector in horizontal orientation, calculates horizontal angular coordinates. |\n| [Rotation_EQD_EQJ](#Rotation_EQD_EQJ) | Calculates a rotation matrix from true equator of date (EQD) to J2000 mean equator (EQJ). |\n| [Rotation_EQD_ECT](#Rotation_EQD_ECT) | Calculates a rotation matrix from true equator of date (EQD) to true ecliptic of date (ECT). |\n| [Rotation_EQD_ECL](#Rotation_EQD_ECL) | Calculates a rotation matrix from true equator of date (EQD) to J2000 mean ecliptic (ECL). |\n| [Rotation_EQD_HOR](#Rotation_EQD_HOR) | Calculates a rotation matrix from true equator of date (EQD) to horizontal (HOR). |\n| [Rotation_EQJ_EQD](#Rotation_EQJ_EQD) | Calculates a rotation matrix from J2000 mean equator (EQJ) to true equator of date (EQD). |\n| [Rotation_EQJ_ECT](#Rotation_EQJ_ECT) | Calculates a rotation matrix from J2000 mean equator (EQJ) to J2000 mean ecliptic (ECL). |\n| [Rotation_EQJ_ECL](#Rotation_EQJ_ECL) | Calculates a rotation matrix from J2000 mean equator (EQJ) to J2000 mean ecliptic (ECL). |\n| [Rotation_EQJ_HOR](#Rotation_EQJ_HOR) | Calculates a rotation matrix from J2000 mean equator (EQJ) to horizontal (HOR). |\n| [Rotation_ECT_EQD](#Rotation_ECT_EQD) | Calculates a rotation matrix from true ecliptic of date (ECT) to true equator of date (EQD). |\n| [Rotation_ECT_EQJ](#Rotation_ECT_EQJ) | Calculates a rotation matrix from true ecliptic of date (ECT) J2000 mean equator (EQJ). |\n| [Rotation_ECL_EQD](#Rotation_ECL_EQD) | Calculates a rotation matrix from J2000 mean ecliptic (ECL) to true equator of date (EQD). |\n| [Rotation_ECL_EQJ](#Rotation_ECL_EQJ) | Calculates a rotation matrix from J2000 mean ecliptic (ECL) to J2000 mean equator (EQJ). |\n| [Rotation_ECL_HOR](#Rotation_ECL_HOR) | Calculates a rotation matrix from J2000 mean ecliptic (ECL) to horizontal (HOR). |\n| [Rotation_HOR_EQD](#Rotation_HOR_EQD) | Calculates a rotation matrix from horizontal (HOR) to true equator of date (EQD). |\n| [Rotation_HOR_EQJ](#Rotation_HOR_EQJ) | Calculates a rotation matrix from horizontal (HOR) to J2000 equatorial (EQJ). |\n| [Rotation_HOR_ECL](#Rotation_HOR_ECL) | Calculates a rotation matrix from horizontal (HOR) to J2000 mean ecliptic (ECL). |\n| [Rotation_EQJ_GAL](#Rotation_EQJ_GAL) | Calculates a rotation matrix from J2000 mean equator (EQJ) to galactic (GAL). |\n| [Rotation_GAL_EQJ](#Rotation_GAL_EQJ) | Calculates a rotation matrix from galactic (GAL) to J2000 mean equator (EQJ). |\n\n### Gravitational simulation of small bodies\n\nAstronomy Engine provides a [GravitySimulator](#GravitySimulator) class\nthat allows you to model the trajectories of one or more small bodies like asteroids,\ncomets, or coasting spacecraft. If you know an initial position vector\nand velocity vector for a small body, the gravity simulator can incrementally\nsimulate the pull of gravity on it from the Sun and planets, to calculate its\nmovement through the Solar System.\n\n---\n\n---\n\n<a name=\"constants\"></a>\n## Constants\nThe following numeric constants are exported by the `astronomy` module.\nThey may be of use for unit conversion.\nNote: For the other supported programming languages, Astronomy Engine defines\nhelper constants `DEG2RAD` and `RAD2DEG` to convert between angular degrees and radians.\nHowever, because Python defines the [angular conversion functions](https://docs.python.org/3/library/math.html#angular-conversion)\n`math.degrees()` and `math.radians()`, they are not needed in the Python version.\n\n---\n\n<a name=\"AU_PER_LY\"></a>\n### `AU_PER_LY = 63241.07708807546`\n\n**The number of astronomical units in one light-year.**\n\n---\n\n<a name=\"CALLISTO_RADIUS_KM\"></a>\n### `CALLISTO_RADIUS_KM = 2410.3`\n\n**The mean radius of Jupiter's moon Callisto, expressed in kilometers.**\n\n---\n\n<a name=\"C_AUDAY\"></a>\n### `C_AUDAY = 173.1446326846693`\n\n**The speed of light expressed in astronomical units per day.**\n\n---\n\n<a name=\"EUROPA_RADIUS_KM\"></a>\n### `EUROPA_RADIUS_KM = 1560.8`\n\n**The mean radius of Jupiter's moon Europa, expressed in kilometers.**\n\n---\n\n<a name=\"GANYMEDE_RADIUS_KM\"></a>\n### `GANYMEDE_RADIUS_KM = 2631.2`\n\n**The mean radius of Jupiter's moon Ganymede, expressed in kilometers.**\n\n---\n\n<a name=\"IO_RADIUS_KM\"></a>\n### `IO_RADIUS_KM = 1821.6`\n\n**The mean radius of Jupiter's moon Io, expressed in kilometers.**\n\n---\n\n<a name=\"JUPITER_EQUATORIAL_RADIUS_KM\"></a>\n### `JUPITER_EQUATORIAL_RADIUS_KM = 71492.0`\n\n**The equatorial radius of Jupiter, expressed in kilometers.**\n\n---\n\n<a name=\"JUPITER_MEAN_RADIUS_KM\"></a>\n### `JUPITER_MEAN_RADIUS_KM = 69911.0`\n\n**The volumetric mean radius of Jupiter, expressed in kilometers.**\n\n---\n\n<a name=\"JUPITER_POLAR_RADIUS_KM\"></a>\n### `JUPITER_POLAR_RADIUS_KM = 66854.0`\n\n**The polar radius of Jupiter, expressed in kilometers.**\n\n---\n\n<a name=\"KM_PER_AU\"></a>\n### `KM_PER_AU = 1.4959787069098932e+8`\n\n**The number of kilometers per astronomical unit.**\n\n---\n\n<a name=\"classes\"></a>\n## Classes\n\n---\n\n<a name=\"Apsis\"></a>\n### class Apsis\n\n**An event where a satellite is closest to or farthest from the body it orbits.**\n\nFor the Moon orbiting the Earth, or a planet orbiting the Sun, an *apsis* is an\nevent where the orbiting body reaches its closest or farthest point from the primary body.\nThe closest approach is called *pericenter* and the farthest point is *apocenter*.\nMore specific terminology is common for particular orbiting bodies.\nThe Moon's closest approach to the Earth is called *perigee* and its furthest\npoint is called *apogee*. The closest approach of a planet to the Sun is called\n*perihelion* and the furthest point is called *aphelion*.\nThis data structure is returned by [`SearchLunarApsis`](#SearchLunarApsis) and [`NextLunarApsis`](#NextLunarApsis)\nto iterate through consecutive alternating perigees and apogees.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the apsis. |\n| [`ApsisKind`](#ApsisKind) | `kind` | Whether this is a pericenter or apocenter event. |\n| `float` | `dist_au` | The distance between the centers of the bodies in astronomical units. |\n| `float` | `dist_km` | The distance between the centers of the bodies in kilometers. |\n\n---\n\n<a name=\"AtmosphereInfo\"></a>\n### class AtmosphereInfo\n\n**Information about idealized atmospheric variables at a given elevation.**\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `pressure` | Atmospheric pressure in pascals. |\n| `float` | `temperature` | Atmospheric temperature in kelvins. |\n| `float` | `density` | Atmospheric densitive relative to sea level. |\n\n---\n\n<a name=\"AxisInfo\"></a>\n### class AxisInfo\n\n**Information about a body's rotation axis at a given time.**\n\nThis structure is returned by [`RotationAxis`](#RotationAxis) to report\nthe orientation of a body's rotation axis at a given moment in time.\nThe axis is specified by the direction in space that the body's north pole\npoints, using angular equatorial coordinates in the J2000 system (EQJ).\nThus `ra` is the right ascension, and `dec` is the declination, of the\nbody's north pole vector at the given moment in time. The north pole\nof a body is defined as the pole that lies on the north side of the\n[Solar System's invariable plane](https://en.wikipedia.org/wiki/Invariable_plane),\nregardless of the body's direction of rotation.\nThe `spin` field indicates the angular position of a prime meridian\narbitrarily recommended for the body by the International Astronomical\nUnion (IAU).\nThe fields `ra`, `dec`, and `spin` correspond to the variables\nα0, δ0, and W, respectively, from\n[Report of the IAU Working Group on Cartographic Coordinates and Rotational Elements: 2015](https://astropedia.astrogeology.usgs.gov/download/Docs/WGCCRE/WGCCRE2015reprint.pdf).\nThe field `north` is a unit vector pointing in the direction of the body's north pole.\nIt is expressed in the J2000 mean equator system (EQJ).\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `ra` | The J2000 right ascension of the body's north pole direction, in sidereal hours. |\n| `float` | `dec` | The J2000 declination of the body's north pole direction, in degrees. |\n| `float` | `spin` | Rotation angle of the body's prime meridian, in degrees. |\n| [`Vector`](#Vector) | `north` | A J2000 dimensionless unit vector pointing in the direction of the body's north pole. |\n\n---\n\n<a name=\"ConstellationInfo\"></a>\n### class ConstellationInfo\n\n**Reports the constellation that a given celestial point lies within.**\n\nThe [`Constellation`](#Constellation) function returns a `ConstellationInfo` object\nto report which constellation corresponds with a given point in the sky.\nConstellations are defined with respect to the B1875 equatorial system\nper IAU standard. Although the `Constellation` function requires J2000 equatorial\ncoordinates as input, the returned object contains converted B1875 coordinates for reference.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `string` | `symbol` | 3-character mnemonic symbol for the constellation, e.g. \"Ori\". |\n| `string` | `name` | Full name of constellation, e.g. \"Orion\". |\n| `float` | `ra1875` | Right ascension expressed in B1875 coordinates. |\n| `float` | `dec1875` | Declination expressed in B1875 coordinates. |\n\n---\n\n<a name=\"EclipseEvent\"></a>\n### class EclipseEvent\n\n**Holds a time and the observed altitude of the Sun at that time.**\n\nWhen reporting a solar eclipse observed at a specific location on the Earth\n(a \"local\" solar eclipse), a series of events occur. In addition\nto the time of each event, it is important to know the altitude of the Sun,\nbecause each event may be invisible to the observer if the Sun is below\nthe horizon.\nIf `altitude` is negative, the event is theoretical only; it would be\nvisible if the Earth were transparent, but the observer cannot actually see it.\nIf `altitude` is positive but less than a few degrees, visibility will be impaired by\natmospheric interference (sunrise or sunset conditions).\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the event. |\n| `float` | `altitude` | The angular altitude of the center of the Sun above/below the horizon, at `time`, corrected for atmospheric refraction and expressed in degrees. |\n\n---\n\n<a name=\"EclipticCoordinates\"></a>\n### class EclipticCoordinates\n\n**Ecliptic angular and Cartesian coordinates.**\n\nCoordinates of a celestial body as seen from the center of the Sun (heliocentric),\noriented with respect to the plane of the Earth's orbit around the Sun (the ecliptic).\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `vec` | Ecliptic cartesian vector with the following components: x: in the direction of the equinox along the ecliptic plane. y: Cartesian y-coordinate: in the ecliptic plane 90 degrees prograde from the equinox. z: Cartesian z-coordinate: perpendicular to the ecliptic plane. Positive is north. |\n| `float` | `elat` | Latitude in degrees north (positive) or south (negative) of the ecliptic plane. |\n| `float` | `elon` | Longitude in degrees around the ecliptic plane prograde from the equinox. |\n\n---\n\n<a name=\"ElongationEvent\"></a>\n### class ElongationEvent\n\n**Contains information about the visibility of a celestial body at a given date and time.**\n\nSee the [`Elongation`](#Elongation) function for more detailed information about the members of this class.\nSee also [`SearchMaxElongation`](#SearchMaxElongation) for how to search for maximum elongation events.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n| [`Visibility`](#Visibility) | `visibility` | Whether the body is best seen in the morning or the evening. |\n| `float` | `elongation` | The angle in degrees between the body and the Sun, as seen from the Earth. |\n| `float` | `ecliptic_separation` | The difference between the ecliptic longitudes of the body and the Sun, as seen from the Earth. |\n\n---\n\n<a name=\"Equatorial\"></a>\n### class Equatorial\n\n**Equatorial angular coordinates**\n\nCoordinates of a celestial body as seen from the Earth.\nCan be geocentric or topocentric, depending on context.\nThe coordinates are oriented with respect to the Earth's\nequator projected onto the sky.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `ra` | Right ascension in sidereal hours. |\n| `float` | `dec` | Declination in degrees. |\n| `float` | `dist` | Distance to the celestial body in AU. |\n| [`Vector`](#Vector) | `vec` | The equatorial coordinates in cartesian form, using AU distance units. x = direction of the March equinox, y = direction of the June solstice, z = north. |\n\n---\n\n<a name=\"GlobalSolarEclipseInfo\"></a>\n### class GlobalSolarEclipseInfo\n\n**Reports the time and geographic location of the peak of a solar eclipse.**\n\nReturned by [`SearchGlobalSolarEclipse`](#SearchGlobalSolarEclipse) or [`NextGlobalSolarEclipse`](#NextGlobalSolarEclipse)\nto report information about a solar eclipse event.\nThe eclipse is classified as partial, annular, or total, depending on the\nmaximum amount of the Sun's disc obscured, as seen at the peak location\non the surface of the Earth.\nThe `kind` field thus holds `EclipseKind.Partial`, `EclipseKind.Annular`, or `EclipseKind.Total`.\nA total eclipse is when the peak observer sees the Sun completely blocked by the Moon.\nAn annular eclipse is like a total eclipse, but the Moon is too far from the Earth's surface\nto completely block the Sun; instead, the Sun takes on a ring-shaped appearance.\nA partial eclipse is when the Moon blocks part of the Sun's disc, but nobody on the Earth\nobserves either a total or annular eclipse.\nIf `kind` is `EclipseKind.Total` or `EclipseKind.Annular`, the `latitude` and `longitude`\nfields give the geographic coordinates of the center of the Moon's shadow projected\nonto the daytime side of the Earth at the instant of the eclipse's peak.\nIf `kind` has any other value, `latitude` and `longitude` are undefined and should\nnot be used.\nFor total or annular eclipses, the `obscuration` field holds the fraction (0, 1]\nof the Sun's apparent disc area that is blocked from view by the Moon's silhouette,\nas seen by an observer located at the geographic coordinates `latitude`, `longitude`\nat the darkest time `peak`. The value will always be 1 for total eclipses, and less than\n1 for annular eclipses.\nFor partial eclipses, `obscuration` holds the value `None`.\nThis is because there is little practical use for an obscuration value of\na partial eclipse without supplying a particular observation location.\nDevelopers who wish to find an obscuration value for partial solar eclipses should therefore use\n[`SearchLocalSolarEclipse`](#SearchLocalSolarEclipse) and provide the geographic coordinates of an observer.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`EclipseKind`](#EclipseKind) | `kind` | The type of solar eclipse: `EclipseKind.Partial`, `EclipseKind.Annular`, or `EclipseKind.Total`. |\n| `float` or `None` | `obscuration` | The peak fraction of the Sun's apparent disc area obscured by the Moon (total and annular eclipses only). |\n| [`Time`](#Time) | `peak` | The date and time when the solar eclipse is darkest. This is the instant when the axis of the Moon's shadow cone passes closest to the Earth's center. |\n| `float` | `distance` | The distance between the Sun/Moon shadow axis and the center of the Earth, in kilometers. |\n| `float` | `latitude` | The geographic latitude at the center of the peak eclipse shadow. |\n| `float` | `longitude` | The geographic longitude at the center of the peak eclipse shadow. |\n\n---\n\n<a name=\"GravitySimulator\"></a>\n### class GravitySimulator\n\n**A simulation of zero or more small bodies moving through the Solar System.**\n\nThis class calculates the movement of arbitrary small bodies,\nsuch as asteroids or comets, that move through the Solar System.\nIt does so by calculating the gravitational forces on the bodies\nfrom the Sun and planets. The user of this class supplies a\nlist of initial positions and velocities for the small bodies.\nThen the class can update the positions and velocities over small\ntime steps.\n\n#### member functions\n\n<a name=\"GravitySimulator.__init__\"></a>\n### GravitySimulator.__init__(self, originBody: [`Body`](#Body), time: [`Time`](#Time), bodyStates: List\\[[`StateVector`](#StateVector)\\]) &#8594; None\n\n**Creates a gravity simulation object.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `originBody` | Specifies the origin of the reference frame. All position vectors and velocity vectors will use `originBody` as the origin of the coordinate system. This origin applies to all the input vectors provided in the `bodyStates` parameter of this function, along with all output vectors returned by [`GravitySimulator.Update`](#GravitySimulator.Update). Most callers will want to provide one of the following: `Body.Sun` for heliocentric coordinates, `Body.SSB` for solar system barycentric coordinates, or `Body.Earth` for geocentric coordinates. Note that the gravity simulator does not correct for light travel time; all state vectors are tied to a Newtonian \"instantaneous\" time. |\n| [`Time`](#Time) | `time` | The initial time at which to start the simulation. |\n| [`StateVector`](#StateVector)`[]` | `bodyStates` | An array of zero or more initial state vectors (positions and velocities) of the small bodies to be simulated. The caller must know the positions and velocities of the small bodies at an initial moment in time. Their positions and velocities are expressed with respect to `originBody`, using J2000 mean equator orientation (EQJ). Positions are expressed in astronomical units (AU). Velocities are expressed in AU/day. All the times embedded within the state vectors must exactly match `time`, or this constructor will throw an exception. |\n\n<a name=\"GravitySimulator.GetTime\"></a>\n### GravitySimulator.GetTime(self) &#8594; [`Time`](#Time)\n\n**The time represented by the current step of the gravity simulation.**\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"GravitySimulator.OriginBody\"></a>\n### GravitySimulator.OriginBody(self) &#8594; [`Body`](#Body)\n\n**The origin of the reference frame. See constructor for more info.**\n\n**Returns**: [`Body`](#Body)\n\n<a name=\"GravitySimulator.SolarSystemBodyState\"></a>\n### GravitySimulator.SolarSystemBodyState(self, body: [`Body`](#Body)) &#8594; [`StateVector`](#StateVector)\n\n**Get the position and velocity of a Solar System body included in the simulation.**\n\nIn order to simulate the movement of small bodies through the Solar System,\nthe simulator needs to calculate the state vectors for the Sun and planets.\nIf an application wants to know the positions of one or more of the planets\nin addition to the small bodies, this function provides a way to obtain\ntheir state vectors. This is provided for the sake of efficiency, to avoid\nredundant calculations.\nThe state vector is returned relative to the position and velocity\nof the `originBody` parameter that was passed to this object's constructor.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The Sun, Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, or Neptune. |\n\n**Returns**: [`StateVector`](#StateVector)\nThe state vector of the requested Solar System body.\n\n<a name=\"GravitySimulator.Swap\"></a>\n### GravitySimulator.Swap(self) &#8594; None\n\n**Exchange the current time step with the previous time step.**\n\nSometimes it is helpful to \"explore\" various times near a given\nsimulation time step, while repeatedly returning to the original\ntime step. For example, when backdating a position for light travel\ntime, the caller may wish to repeatedly try different amounts of\nbackdating. When the backdating solver has converged, the caller\nwants to leave the simulation in its original state.\nThis function allows a single \"undo\" of a simulation, and does so\nvery efficiently.\nUsually this function will be called immediately after a matching\ncall to [`GravitySimulator.Update`](#GravitySimulator.Update). It has the effect of rolling\nback the most recent update. If called twice in a row, it reverts\nthe swap and thus has no net effect.\nThe constructor initializes the current state and previous\nstate to be identical. Both states represent the `time` parameter that was\npassed into the constructor. Therefore, `Swap` will\nhave no effect from the caller's point of view when passed a simulator\nthat has not yet been updated by a call to [`GravitySimulator.Update`](#GravitySimulator.Update).\n\n<a name=\"GravitySimulator.Update\"></a>\n### GravitySimulator.Update(self, time: [`Time`](#Time)) &#8594; List\\[[`StateVector`](#StateVector)\\]\n\n**Advances the gravity simulation by a small time step.**\n\nUpdates the simulation of the user-supplied small bodies\nto the time indicated by the `time` parameter.\nReturns an array of state vectors for the simulated bodies.\nThe array is in the same order as the original array that\nwas used to construct this simulator object.\nThe positions and velocities in the returned array are\nreferenced to the `originBody` that was used to construct\nthis simulator.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | A time that is a small increment away from the current simulation time. It is up to the developer to figure out an appropriate time increment. Depending on the trajectories, a smaller or larger increment may be needed for the desired accuracy. Some experimentation may be needed. Generally, bodies that stay in the outer Solar System and move slowly can use larger time steps. Bodies that pass into the inner Solar System and move faster will need a smaller time step to maintain accuracy. The `time` value may be after or before the current simulation time to move forward or backward in time. |\n\n**Returns**: [`StateVector`](#StateVector)`[]`\nAn array of state vectors, one for each small body.\n\n---\n\n<a name=\"HorizontalCoordinates\"></a>\n### class HorizontalCoordinates\n\n**Coordinates of a celestial body as seen by a topocentric observer.**\n\nContains horizontal and equatorial coordinates as seen by an observer\non or near the surface of the Earth (a topocentric observer).\nAll coordinates are optionally corrected for atmospheric refraction.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `azimuth` | The compass direction laterally around the observer's horizon, measured in degrees. North is 0 degrees, east is 90 degrees, south is 180 degrees, etc. |\n| `float` | `altitude` | The angle in degrees above (positive) or below (negative) the observer's horizon. |\n| `float` | `ra` | The right ascension in sidereal hours. |\n| `float` | `dec` | The declination in degrees. |\n\n---\n\n<a name=\"HourAngleEvent\"></a>\n### class HourAngleEvent\n\n**Information about a celestial body crossing a specific hour angle.**\n\nReturned by the function [`SearchHourAngle`](#SearchHourAngle) to report information about\na celestial body crossing a certain hour angle as seen by a specified topocentric observer.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time when the body crosses the specified hour angle. |\n| [`HorizontalCoordinates`](#HorizontalCoordinates) | `hor` | Apparent coordinates of the body at the time it crosses the specified hour angle. |\n\n---\n\n<a name=\"IlluminationInfo\"></a>\n### class IlluminationInfo\n\n**Information about the brightness and illuminated shape of a celestial body.**\n\nReturned by functions [`Illumination`](#Illumination) and [`SearchPeakMagnitude`](#SearchPeakMagnitude)\nto report the visual magnitude and illuminated fraction of a celestial\nbody at a given date and time.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n| `float` | `mag` | The visual magnitude of the body. Smaller values are brighter. |\n| `float` | `phase_angle` | The angle in degrees between the Sun and the Earth, as seen from the body. Indicates the body's phase as seen from the Earth. |\n| `float` | `phase_fraction` | A value in the range [0.0, 1.0] indicating what fraction of the body's apparent disc is illuminated, as seen from the Earth. |\n| `float` | `helio_dist` | The distance between the Sun and the body at the observation time, in AU. |\n| `dist` | `geo_dist` | The distance between the Earth and the both at the observation time, in AU. |\n| [`Vector`](#Vector) | `hc` | The body's heliocentric vector. |\n| [`Vector`](#Vector) | `gc` | The body's geocentric vector. |\n| `float` | `ring_tilt` | For Saturn, the tilt angle in degrees of its rings as seen from Earth. When the `ring_tilt` is very close to 0, it means the rings are edge-on as seen from observers on the Earth, and are thus very difficult to see. For bodies other than Saturn, `ring_tilt` is `None`. |\n\n---\n\n<a name=\"JupiterMoonsInfo\"></a>\n### class JupiterMoonsInfo\n\n**Holds the positions and velocities of Jupiter's major 4 moons.**\n\nThe [`JupiterMoons`](#JupiterMoons) function returns an object of this type\nto report position and velocity vectors for Jupiter's largest 4 moons\nIo, Europa, Ganymede, and Callisto. Each position vector is relative\nto the center of Jupiter. Both position and velocity are oriented in\nthe EQJ system (that is, using Earth's equator at the J2000 epoch).\nThe positions are expressed in astronomical units (AU),\nand the velocities in AU/day.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`StateVector`](#StateVector) | `io` | The position and velocity of Jupiter's moon Io. |\n| [`StateVector`](#StateVector) | `europa` | The position and velocity of Jupiter's moon Europa. |\n| [`StateVector`](#StateVector) | `ganymede` | The position and velocity of Jupiter's moon Ganymede. |\n| [`StateVector`](#StateVector) | `callisto` | The position and velocity of Jupiter's moon Callisto. |\n\n---\n\n<a name=\"LibrationInfo\"></a>\n### class LibrationInfo\n\n**Lunar libration angles, returned by [`Libration`](#Libration).**\n\nContains lunar libration angles and lunar position information\nfor a given moment in time. See [`Libration`](#Libration) for more details.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `elat` | Sub-Earth libration ecliptic latitude angle, in degrees. |\n| `float` | `elon` | Sub-Earth libration ecliptic longitude angle, in degrees. |\n| `float` | `mlat` | Moon's geocentric ecliptic latitude, in degrees. |\n| `float` | `mlon` | Moon's geocentric ecliptic longitude, in degrees. |\n| `float` | `dist_km` | Distance between the centers of the Earth and Moon in kilometers. |\n| `float` | `diam_deg` | The apparent angular diameter of the Moon as seen from the center of the Earth. |\n\n---\n\n<a name=\"LocalSolarEclipseInfo\"></a>\n### class LocalSolarEclipseInfo\n\n**Information about a solar eclipse as seen by an observer at a given time and geographic location.**\n\nReturned by [`SearchLocalSolarEclipse`](#SearchLocalSolarEclipse) or [`NextLocalSolarEclipse`](#NextLocalSolarEclipse)\nto report information about a solar eclipse as seen at a given geographic location.\nWhen a solar eclipse is found, it is classified as partial, annular, or total.\nThe `kind` field thus holds `EclipseKind.Partial`, `EclipseKind.Annular`, or `EclipseKind.Total`.\nA partial solar eclipse is when the Moon does not line up directly enough with the Sun\nto completely block the Sun's light from reaching the observer.\nAn annular eclipse occurs when the Moon's disc is completely visible against the Sun\nbut the Moon is too far away to completely block the Sun's light; this leaves the\nSun with a ring-like appearance.\nA total eclipse occurs when the Moon is close enough to the Earth and aligned with the\nSun just right to completely block all sunlight from reaching the observer.\nThe `obscuration` field reports what fraction of the Sun's disc appears blocked\nby the Moon when viewed by the observer at the peak eclipse time.\nThis is a value that ranges from 0 (no blockage) to 1 (total eclipse).\nThe obscuration value will be between 0 and 1 for partial eclipses and annular eclipses.\nThe value will be exactly 1 for total eclipses. Obscuration gives an indication\nof how dark the eclipse appears.\nThere are 5 \"event\" fields, each of which contains a time and a solar altitude.\nField `peak` holds the date and time of the center of the eclipse, when it is at its peak.\nThe fields `partial_begin` and `partial_end` are always set, and indicate when\nthe eclipse begins/ends. If the eclipse reaches totality or becomes annular,\n`total_begin` and `total_end` indicate when the total/annular phase begins/ends.\nWhen an event field is valid, the caller must also check its `altitude` field to\nsee whether the Sun is above the horizon at the time indicated by the `time` field.\nSee [`EclipseEvent`](#EclipseEvent) for more information.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`EclipseKind`](#EclipseKind) | `kind` | The type of solar eclipse: `EclipseKind.Partial`, `EclipseKind.Annular`, or `EclipseKind.Total`. |\n| `float` | `obscuration` | The fraction of the Sun's apparent disc area obscured by the Moon at the eclipse peak. |\n| [`EclipseEvent`](#EclipseEvent) | `partial_begin` | The time and Sun altitude at the beginning of the eclipse. |\n| [`EclipseEvent`](#EclipseEvent) or `None` | `total_begin` | If this is an annular or a total eclipse, the time and Sun altitude when annular/total phase begins; otherwise `None`. |\n| [`EclipseEvent`](#EclipseEvent) | `peak` | The time and Sun altitude when the eclipse reaches its peak. |\n| [`EclipseEvent`](#EclipseEvent) or `None` | `total_end` | If this is an annular or a total eclipse, the time and Sun altitude when annular/total phase ends; otherwise `None`. |\n| [`EclipseEvent`](#EclipseEvent) | `partial_end` | The time and Sun altitude at the end of the eclipse. |\n\n---\n\n<a name=\"LunarEclipseInfo\"></a>\n### class LunarEclipseInfo\n\n**Returns information about a lunar eclipse.**\n\nReturned by [`SearchLunarEclipse`](#SearchLunarEclipse) or [`NextLunarEclipse`](#NextLunarEclipse)\nto report information about a lunar eclipse event.\nWhen a lunar eclipse is found, it is classified as penumbral, partial, or total.\nPenumbral eclipses are difficult to observe, because the Moon is only slightly dimmed\nby the Earth's penumbra; no part of the Moon touches the Earth's umbra.\nPartial eclipses occur when part, but not all, of the Moon touches the Earth's umbra.\nTotal eclipses occur when the entire Moon passes into the Earth's umbra.\nThe `kind` field thus holds one of the values `EclipseKind.Penumbral`, `EclipseKind.Partial`,\nor `EclipseKind.Total`, depending on the kind of lunar eclipse found.\nThe `obscuration` field holds a value in the range [0, 1] that indicates what fraction\nof the Moon's apparent disc area is covered by the Earth's umbra at the eclipse's peak.\nThis indicates how dark the peak eclipse appears. For penumbral eclipses, the obscuration\nis 0, because the Moon does not pass through the Earth's umbra. For partial eclipses,\nthe obscuration is somewhere between 0 and 1. For total lunar eclipses, the obscuration is 1.\nField `peak` holds the date and time of the peak of the eclipse, when it is at its peak.\nFields `sd_penum`, `sd_partial`, and `sd_total` hold the semi-duration of each phase\nof the eclipse, which is half of the amount of time the eclipse spends in each\nphase (expressed in minutes), or 0 if the eclipse never reaches that phase.\nBy converting from minutes to days, and subtracting/adding with `peak`, the caller\nmay determine the date and time of the beginning/end of each eclipse phase.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`EclipseKind`](#EclipseKind) | `kind` | The type of lunar eclipse found. |\n| `float` | `obscuration` | The peak fraction of the Moon's apparent disc that is covered by the Earth's umbra. |\n| [`Time`](#Time) | `peak` | The time of the eclipse at its peak. |\n| `float` | `sd_penum` | The semi-duration of the penumbral phase in minutes. |\n| `float` | `sd_partial` | The semi-duration of the penumbral phase in minutes, or 0.0 if none. |\n| `float` | `sd_total` | The semi-duration of the penumbral phase in minutes, or 0.0 if none. |\n\n---\n\n<a name=\"MoonQuarter\"></a>\n### class MoonQuarter\n\n**A lunar quarter event along with its date and time.**\n\nAn object of this type represents one of the four major\nlunar phases that appear on calendars:\nnew moon, first quarter, full moon, or third quarter.\nAlong with the `quarter` attribute that specifies the\ntype of quarter, it contains a `time` field that indicates\nwhen the lunar quarter event happens.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `int` | `quarter` | 0=new moon, 1=first quarter, 2=full moon, 3=third quarter. |\n| [`Time`](#Time) | `time` | The date and time of the lunar quarter. |\n\n---\n\n<a name=\"NodeEventInfo\"></a>\n### class NodeEventInfo\n\n**Information about an ascending or descending node of a body.**\n\nThis object is returned by [`SearchMoonNode`](#SearchMoonNode) and [`NextMoonNode`](#NextMoonNode)\nto report information about the center of the Moon passing through the ecliptic plane.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`NodeEventKind`](#NodeEventKind) | `kind` | Whether the node is ascending (south to north) or descending (north to south). |\n| [`Time`](#Time) | `time` | The time when the body passes through the ecliptic plane. |\n\n---\n\n<a name=\"Observer\"></a>\n### class Observer\n\n**Represents the geographic location of an observer on the surface of the Earth.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `latitude` | Geographic latitude in degrees north of the equator. |\n| `float` | `longitude` | Geographic longitude in degrees east of the prime meridian at Greenwich, England. |\n| `float` | `height` | Elevation above sea level in meters. |\n\n---\n\n<a name=\"PositionFunction\"></a>\n### class PositionFunction\n\n**A function for which to solve a light-travel time problem.**\n\nThis abstract class defines the contract for wrapping a\nposition vector as a function of time. A class derived from\n`PositionFunction` must define a `Position` method that\nreturns a position vector for a given time.\nThe function [`CorrectLightTravel`](#CorrectLightTravel) solves a generalized\nproblem of deducing how far in the past light must have\nleft a target object to be seen by an observer at a\nspecified time. It is passed an instance of `PositionFunction`\nthat expresses a relative position vector function.\n\n#### member functions\n\n<a name=\"PositionFunction.Position\"></a>\n### PositionFunction.Position(self, time: [`Time`](#Time)) &#8594; [`Vector`](#Vector)\n\n**Returns a relative position vector for a given time.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The time at which to evaluate a relative position vector. |\n\n**Returns**: [`Vector`](#Vector)\n\n---\n\n<a name=\"RotationMatrix\"></a>\n### class RotationMatrix\n\nContains a rotation matrix that can be used to transform one\ncoordinate system into another.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float[3][3]` | `rot` | A normalized 3x3 rotation matrix. |\n\n---\n\n<a name=\"SeasonInfo\"></a>\n### class SeasonInfo\n\n**The dates and times of changes of season for a given calendar year.**\n\nCall [`Seasons`](#Seasons) to calculate this data structure for a given year.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `mar_equinox` | The date and time of the March equinox for the specified year. |\n| [`Time`](#Time) | `jun_solstice` | The date and time of the June solstice for the specified year. |\n| [`Time`](#Time) | `sep_equinox` | The date and time of the September equinox for the specified year. |\n| [`Time`](#Time) | `dec_solstice` | The date and time of the December solstice for the specified year. |\n\n---\n\n<a name=\"Spherical\"></a>\n### class Spherical\n\n**Holds spherical coordinates: latitude, longitude, distance.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `lat` | The latitude angle: -90..+90 degrees. |\n| `float` | `lon` | The longitude angle: 0..360 degrees. |\n| `float` | `dist` | Distance in AU. |\n\n---\n\n<a name=\"StateVector\"></a>\n### class StateVector\n\n**A combination of a position vector, a velocity vector, and a time.**\n\nThe position (x, y, z) is measured in astronomical units (AU).\nThe velocity (vx, vy, vz) is measured in AU/day.\nThe coordinate system varies and depends on context.\nThe state vector also includes a time stamp.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `x` | The x-coordinate of the position, measured in AU. |\n| `float` | `y` | The y-coordinate of the position, measured in AU. |\n| `float` | `z` | The z-coordinate of the position, measured in AU. |\n| `float` | `vx` | The x-component of the velocity, measured in AU/day. |\n| `float` | `vy` | The y-component of the velocity, measured in AU/day. |\n| `float` | `vz` | The z-component of the velocity, measured in AU/day. |\n| [`Time`](#Time) | `t` | The date and time at which the position and velocity vectors are valid. |\n\n#### member functions\n\n<a name=\"StateVector.Position\"></a>\n### StateVector.Position(self) &#8594; [`Vector`](#Vector)\n\nExtracts a position vector from this state vector.\n\n<a name=\"StateVector.Velocity\"></a>\n### StateVector.Velocity(self) &#8594; [`Vector`](#Vector)\n\nExtracts a velocity vector from this state vector.\n\n---\n\n<a name=\"Time\"></a>\n### class Time\n\n**Represents a date and time used for performing astronomy calculations.**\n\nAll calculations performed by Astronomy Engine are based on\ndates and times represented by `Time` objects.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `ut` | UT1/UTC number of days since noon on January 1, 2000. See the `ut` attribute of this class for more details. |\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `ut` | The floating point number of days of Universal Time since noon UTC January 1, 2000. Astronomy Engine approximates UTC and UT1 as being the same thing, although they are not exactly equivalent; UTC and UT1 can disagree by up to 0.9 seconds. This approximation is sufficient for the accuracy requirements of Astronomy Engine. Universal Time Coordinate (UTC) is the international standard for legal and civil timekeeping and replaces the older Greenwich Mean Time (GMT) standard. UTC is kept in sync with unpredictable observed changes in the Earth's rotation by occasionally adding leap seconds as needed. UT1 is an idealized time scale based on observed rotation of the Earth, which gradually slows down in an unpredictable way over time, due to tidal drag by the Moon and Sun, large scale weather events like hurricanes, and internal seismic and convection effects. Conceptually, UT1 drifts from atomic time continuously and erratically, whereas UTC is adjusted by a scheduled whole number of leap seconds as needed. The value in `ut` is appropriate for any calculation involving the Earth's rotation, such as calculating rise/set times, culumination, and anything involving apparent sidereal time. Before the era of atomic timekeeping, days based on the Earth's rotation were often known as *mean solar days*. |\n| `float` | `tt` | Terrestrial Time days since noon on January 1, 2000. Terrestrial Time is an atomic time scale defined as a number of days since noon on January 1, 2000. In this system, days are not based on Earth rotations, but instead by the number of elapsed [SI seconds](https://physics.nist.gov/cuu/Units/second.html) divided by 86400. Unlike `ut`, `tt` increases uniformly without adjustments for changes in the Earth's rotation. The value in `tt` is used for calculations of movements not involving the Earth's rotation, such as the orbits of planets around the Sun, or the Moon around the Earth. Historically, Terrestrial Time has also been known by the term *Ephemeris Time* (ET). |\n\n#### member functions\n\n<a name=\"Time.AddDays\"></a>\n### Time.AddDays(self, days: float) &#8594; [`Time`](#Time)\n\n**Calculates the sum or difference of a [`Time`](#Time) with a specified real-valued number of days.**\n\nSometimes we need to adjust a given [`Time`](#Time) value by a certain amount of time.\nThis function adds the given real number of days in `days` to the date and time\nin the calling object.\nMore precisely, the result's Universal Time field `ut` is exactly adjusted by `days`\nand the Terrestrial Time field `tt` is adjusted for the resulting UTC date and time,\nusing a best-fit piecewise polynomial model devised by\n[Espenak and Meeus](https://eclipse.gsfc.nasa.gov/SEhelp/deltatpoly2004.html).\nThe value of the calling object is not modified. This function creates a brand new\n[`Time`](#Time) object and returns it.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `days` | A floating point number of days by which to adjust `time`. May be negative, 0, or positive. |\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"Time.Calendar\"></a>\n### Time.Calendar(self) &#8594; Tuple\\[int, int, int, int, int, float\\]\n\n**Returns a tuple of the form (year, month, day, hour, minute, second).**\n\nThis is a convenience method for converting a `Time` value into\nits Gregorian calendar date/time representation.\nUnlike the built-in `datetime` class, this method can represent\ndates over a nearly 2 million year range: the years -999999 to +999999.\n\n<a name=\"Time.FromTerrestrialTime\"></a>\n### Time.FromTerrestrialTime(tt: float) &#8594; [`Time`](#Time)\n\n**Creates a [`Time`](#Time) object from a Terrestrial Time day value.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `tt` | The number of days after the J2000 epoch. |\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"Time.Make\"></a>\n### Time.Make(year: int, month: int, day: int, hour: int, minute: int, second: float) &#8594; [`Time`](#Time)\n\n**Creates a [`Time`](#Time) object from a UTC calendar date and time.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `int` | `year` | The UTC year value, e.g. 2019. |\n| `int` | `month` | The UTC month in the range 1..12. |\n| `int` | `day` | The UTC day of the month, in the range 1..31. |\n| `int` | `hour` | The UTC hour, in the range 0..23. |\n| `int` | `minute` | The UTC minute, in the range 0..59. |\n| `float` | `second` | The real-valued UTC second, in the range [0, 60). |\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"Time.Now\"></a>\n### Time.Now() &#8594; [`Time`](#Time)\n\n**Returns the computer's current date and time in the form of a [`Time`](#Time) object.**\n\nUses the computer's system clock to find the current UTC date and time.\nConverts that date and time to a [`Time`](#Time) value and returns the result.\nCallers can pass this value to other Astronomy Engine functions to\ncalculate current observational conditions.\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"Time.Parse\"></a>\n### Time.Parse(text: str) &#8594; [`Time`](#Time)\n\n**Creates a [`Time`](#Time) object from a string of the form 'yyyy-mm-ddThh:mm:ss.sssZ'**\n\nParses a UTC date and time from a string and returns a [`Time`](#Time) object.\nPermits a subset of ISO 8601 format.\nThe year, month, and day are required.\nHours, minutes, seconds, and fractions of a second are optional.\nIf time is specified, there must be a 'T' between the date and the time\nand a 'Z' at the end of the time.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `string` | `text` | A string of the following formats: `yyyy-mm-dd` `yyyy-mm-ddThh:mmZ` `yyyy-mm-ddThh:mm:ssZ` `yyyy-mm-ddThh:mm:ss.sssZ` |\n\n**Returns**: [`Time`](#Time)\n\n<a name=\"Time.Utc\"></a>\n### Time.Utc(self) &#8594; datetime.datetime\n\n**Returns the UTC date and time as a `datetime` object.**\n\nUses the standard [`datetime`](https://docs.python.org/3/library/datetime.html) class\nto represent the date and time in this Time object.\n\n**Returns**: `datetime`\n\n---\n\n<a name=\"TransitInfo\"></a>\n### class TransitInfo\n\n**Information about a transit of Mercury or Venus, as seen from the Earth.**\n\nReturned by [`SearchTransit`](#SearchTransit) or [`NextTransit`](#NextTransit) to report\ninformation about a transit of Mercury or Venus.\nA transit is when Mercury or Venus passes between the Sun and Earth so that\nthe other planet is seen in silhouette against the Sun.\nThe calculations are performed from the point of view of a geocentric observer.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `start` | The date and time at the beginning of the transit. This is the moment the planet first becomes visible against the Sun in its background. |\n| [`Time`](#Time) | `peak` | When the planet is most aligned with the Sun, as seen from the Earth. |\n| [`Time`](#Time) | `finish` | The date and time at the end of the transit. This is the moment the planet is last seen against the Sun in its background. |\n| `float` | `separation` | The minimum angular separation, in arcminutes, between the centers of the Sun and the planet. This angle pertains to the time stored in `peak`. |\n\n---\n\n<a name=\"Vector\"></a>\n### class Vector\n\n**A Cartesian vector with 3 space coordinates and 1 time coordinate.**\n\nThe vector's space coordinates are measured in astronomical units (AU).\nThe coordinate system varies and depends on context.\nThe vector also includes a time stamp.\n\n| Type | Attribute | Description |\n| --- | --- | --- |\n| `float` | `x` | The x-coordinate of the vector, measured in AU. |\n| `float` | `y` | The y-coordinate of the vector, measured in AU. |\n| `float` | `z` | The z-coordinate of the vector, measured in AU. |\n| [`Time`](#Time) | `t` | The date and time at which the coordinate is valid. |\n\n#### member functions\n\n<a name=\"Vector.Length\"></a>\n### Vector.Length(self) &#8594; float\n\nReturns the length of the vector in AU.\n\n<a name=\"Vector.format\"></a>\n### Vector.format(self, coord_format: str) &#8594; str\n\nReturns a custom format string representation of the vector.\n\n---\n\n<a name=\"enumerations\"></a>\n## Enumerated Types\n\n---\n\n<a name=\"ApsisKind\"></a>\n### enum ApsisKind\n\n**Represents whether a satellite is at a closest or farthest point in its orbit.**\n\nAn apsis is a point in a satellite's orbit that is closest to,\nor farthest from, the body it orbits (its primary).\n`ApsisKind` is an enumerated type that indicates which of these\ntwo cases applies to a particular apsis event.\n\n| Value | Description |\n| --- | --- |\n| `Pericenter` | The satellite is at its closest point to its primary. |\n| `Apocenter` | The satellite is at its farthest point from its primary. |\n| `Invalid` | A placeholder for an undefined, unknown, or invalid apsis. |\n\n---\n\n<a name=\"Body\"></a>\n### enum Body\n\n**The celestial bodies supported by Astronomy Engine calculations.**\n\n| Value | Description |\n| --- | --- |\n| `Invalid` | An unknown, invalid, or undefined celestial body. |\n| `Mercury` | The planet Mercury. |\n| `Venus` | The planet Venus. |\n| `Earth` | The planet Earth. |\n| `Mars` | The planet Mars. |\n| `Jupiter` | The planet Jupiter. |\n| `Saturn` | The planet Saturn. |\n| `Uranus` | The planet Uranus. |\n| `Neptune` | The planet Neptune. |\n| `Pluto` | The planet Pluto. |\n| `Sun` | The Sun. |\n| `Moon` | The Earth's moon. |\n| `EMB` | The Earth/Moon Barycenter. |\n| `SSB` | The Solar System Barycenter. |\n| `Star1` | User-defined star 1. |\n| `Star2` | User-defined star 2. |\n| `Star3` | User-defined star 3. |\n| `Star4` | User-defined star 4. |\n| `Star5` | User-defined star 5. |\n| `Star6` | User-defined star 6. |\n| `Star7` | User-defined star 7. |\n| `Star8` | User-defined star 8. |\n\n---\n\n<a name=\"Direction\"></a>\n### enum Direction\n\n**Indicates whether a body is rising above or setting below the horizon.**\n\nSpecifies the direction of a rising or setting event for a body.\nFor example, `Direction.Rise` is used to find sunrise times,\nand `Direction.Set` is used to find sunset times.\n\n| Value | Description |\n| --- | --- |\n| `Rise` | First appearance of a body as it rises above the horizon. |\n| `Set` | Last appearance of a body as it sinks below the horizon. |\n\n---\n\n<a name=\"EclipseKind\"></a>\n### enum EclipseKind\n\n**The different kinds of lunar/solar eclipses.**\n\n| Value | Description |\n| --- | --- |\n| `Invalid` | No eclipse found. |\n| `Penumbral` | A penumbral lunar eclipse. (Never used for a solar eclipse.) |\n| `Partial` | A partial lunar/solar eclipse. |\n| `Annular` | An annular solar eclipse. (Never used for a lunar eclipse.) |\n| `Total` | A total lunar/solar eclipse. |\n\n---\n\n<a name=\"NodeEventKind\"></a>\n### enum NodeEventKind\n\n**Indicates whether a crossing through the ecliptic plane is ascending or descending.**\n\n| Value | Description |\n| --- | --- |\n| `Invalid` | A placeholder for an invalid or undefined node. |\n| `Ascending` | indicates a body passing through the ecliptic plane from south to north. |\n| `Descending` | indicates a body passing through the ecliptic plane from north to south. |\n\n---\n\n<a name=\"Refraction\"></a>\n### enum Refraction\n\n**Selects if/how to correct for atmospheric refraction.**\n\nSome functions allow enabling or disabling atmospheric refraction\nfor the calculated apparent position of a celestial body\nas seen by an observer on the surface of the Earth.\n\n| Value | Description |\n| --- | --- |\n| `Airless` | No atmospheric refraction correction. |\n| `Normal` | Recommended correction for standard atmospheric refraction. |\n| `JplHorizons` | Used only for compatibility testing with JPL Horizons online tool. |\n\n---\n\n<a name=\"Visibility\"></a>\n### enum Visibility\n\n**Indicates whether a body (especially Mercury or Venus) is best seen in the morning or evening.**\n\n| Value | Description |\n| --- | --- |\n| `Morning` | The body is best visible in the morning, before sunrise. |\n| `Evening` | The body is best visible in the evening, after sunset. |\n\n---\n\n<a name=\"errors\"></a>\n## Error Types\n\n---\n\n<a name=\"BadVectorError\"></a>\n### BadVectorError\n\nA vector magnitude is too small to have a direction in space.\n\n---\n\n<a name=\"DateTimeFormatError\"></a>\n### DateTimeFormatError\n\nThe syntax of a UTC date/time string was not valid, or it contains invalid values.\n\n---\n\n<a name=\"EarthNotAllowedError\"></a>\n### EarthNotAllowedError\n\nThe Earth is not allowed as the celestial body in this calculation.\n\n---\n\n<a name=\"Error\"></a>\n### Error\n\nIndicates an error in an astronomical calculation.\n\n---\n\n<a name=\"InternalError\"></a>\n### InternalError\n\n**An internal error occured that should be reported as a bug.**\n\nIndicates an unexpected and unrecoverable condition occurred.\nIf you encounter this error using Astronomy Engine, it would be very\nhelpful to report it at the [Issues](https://github.com/cosinekitty/astronomy/issues)\npage on GitHub. Please include a copy of the stack trace, along with a description\nof how to reproduce the error. This will help improve the quality of\nAstronomy Engine for everyone! (Thank you in advance from the author.)\n\n---\n\n<a name=\"InvalidBodyError\"></a>\n### InvalidBodyError\n\nThe celestial body is not allowed for this calculation.\n\n---\n\n<a name=\"NoConvergeError\"></a>\n### NoConvergeError\n\n**A numeric solver did not converge.**\n\nIndicates that there was a failure of a numeric solver to converge.\nIf you encounter this error using Astronomy Engine, it would be very\nhelpful to report it at the [Issues](https://github.com/cosinekitty/astronomy/issues)\npage on GitHub. Please include a copy of the stack trace, along with a description\nof how to reproduce the error. This will help improve the quality of\nAstronomy Engine for everyone! (Thank you in advance from the author.)\n\n---\n\n<a name=\"functions\"></a>\n## Functions\n\n---\n\n<a name=\"AngleBetween\"></a>\n### AngleBetween(a: [`Vector`](#Vector), b: [`Vector`](#Vector)) &#8594; float\n\n**Calculates the angle in degrees between two vectors.**\n\nGiven a pair of vectors, this function returns the angle in degrees\nbetween the two vectors in 3D space.\nThe angle is measured in the plane that contains both vectors.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `a` | The first of a pair of vectors between which to measure an angle. |\n| [`Vector`](#Vector) | `b` | The second of a pair of vectors between which to measure an angle. |\n\n**Returns**: `float`\nThe angle between the two vectors expressed in degrees.\nThe value is in the range [0, 180].\n\n---\n\n<a name=\"AngleFromSun\"></a>\n### AngleFromSun(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; float\n\n**Returns the angle between the given body and the Sun, as seen from the Earth.**\n\nThis function calculates the angular separation between the given body and the Sun,\nas seen from the center of the Earth. This angle is helpful for determining how\neasy it is to see the body away from the glare of the Sun.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body whose angle from the Sun is to be measured. Not allowed to be `Body.Earth`. |\n| [`Time`](#Time) | `time` | The time at which the observation is made. |\n\n**Returns**: `float`\nA numeric value indicating the angle in degrees between the Sun\nand the specified body as seen from the center of the Earth.\n\n---\n\n<a name=\"Atmosphere\"></a>\n### Atmosphere(elevationMeters: float) &#8594; [`AtmosphereInfo`](#AtmosphereInfo)\n\n**Calculates U.S. Standard Atmosphere (1976) variables as a function of elevation.**\n\nThis function calculates idealized values of pressure, temperature, and density\nusing the U.S. Standard Atmosphere (1976) model.\n1. COESA, U.S. Standard Atmosphere, 1976, U.S. Government Printing Office, Washington, DC, 1976.\n2. Jursa, A. S., Ed., Handbook of Geophysics and the Space Environment, Air Force Geophysics Laboratory, 1985.\nSee:\nhttps://hbcp.chemnetbase.com/faces/documents/14_12/14_12_0001.xhtml\nhttps://ntrs.nasa.gov/api/citations/19770009539/downloads/19770009539.pdf\nhttps://www.ngdc.noaa.gov/stp/space-weather/online-publications/miscellaneous/us-standard-atmosphere-1976/us-standard-atmosphere_st76-1562_noaa.pdf\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `elevationMeters` | The elevation above sea level at which to calculate atmospheric variables. Must be in the range -500 to +100000, or an exception will occur. |\n\n**Returns**: [`AtmosphereInfo`](#AtmosphereInfo)\n\n---\n\n<a name=\"BackdatePosition\"></a>\n### BackdatePosition(time: [`Time`](#Time), observerBody: [`Body`](#Body), targetBody: [`Body`](#Body), aberration: bool) &#8594; [`Vector`](#Vector)\n\n**Solve for light travel time correction of apparent position.**\n\nWhen observing a distant object, for example Jupiter as seen from Earth,\nthe amount of time it takes for light to travel from the object to the\nobserver can significantly affect the object's apparent position.\nThis function solves the light travel time correction for the apparent\nrelative position vector of a target body as seen by an observer body\nat a given observation time.\nFor geocentric calculations, [`GeoVector`](#GeoVector) also includes light\ntravel time correction, but the time `t` embedded in its returned vector\nrefers to the observation time, not the backdated time that light left\nthe observed body. Thus `BackdatePosition` provides direct\naccess to the light departure time for callers that need it.\nFor a more generalized light travel correction solver, see [`CorrectLightTravel`](#CorrectLightTravel).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The time of observation. |\n| [`Body`](#Body) | `observerBody` | The body to be used as the observation location. |\n| [`Body`](#Body) | `targetBody` | The body to be observed. |\n| `bool` | `aberration` | `True` to correct for aberration, or `False` to leave uncorrected. |\n\n**Returns**: [`Vector`](#Vector)\nThe position vector at the solved backdated time.\nIts `t` field holds the time that light left the observed\nbody to arrive at the observer at the observation time.\n\n---\n\n<a name=\"BaryState\"></a>\n### BaryState(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`StateVector`](#StateVector)\n\n**Calculates barycentric position and velocity vectors for the given body.**\n\nGiven a body and a time, calculates the barycentric position and velocity\nvectors for the center of that body at that time.\nThe vectors are expressed in J2000 mean equator coordinates (EQJ).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body whose barycentric state vector is to be calculated. Supported values are `Body.Sun`, `Body.SSB`, `Body.Moon`, `Body.EMB`, and all planets: `Body.Mercury`, `Body.Venus`, `Body.Earth`, `Body.Mars`, `Body.Jupiter`, `Body.Saturn`, `Body.Uranus`, `Body.Neptune`, `Body.Pluto`. |\n| [`Time`](#Time) | `time` | The date and time for which to calculate position and velocity. |\n\n**Returns**: [`StateVector`](#StateVector)\nAn object that contains barycentric position and velocity vectors.\n\n---\n\n<a name=\"BodyCode\"></a>\n### BodyCode(name: str) &#8594; [`Body`](#Body)\n\n**Finds the Body enumeration value, given the name of a body.**\n\n```\n>>> astronomy.BodyCode('Mars')\n<Body.Mars: 3>\n```\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `str` | `name` | The common English name of a supported celestial body. |\n\n**Returns**: [`Body`](#Body)\nIf `name` is a valid body name, returns the enumeration\nvalue associated with that body.\nOtherwise, returns `Body.Invalid`.\n\n---\n\n<a name=\"CombineRotation\"></a>\n### CombineRotation(a: [`RotationMatrix`](#RotationMatrix), b: [`RotationMatrix`](#RotationMatrix)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Creates a rotation based on applying one rotation followed by another.**\n\nGiven two rotation matrices, returns a combined rotation matrix that is\nequivalent to rotating based on the first matrix, followed by the second.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`RotationMatrix`](#RotationMatrix) | `a` | The first rotation to apply. |\n| [`RotationMatrix`](#RotationMatrix) | `b` | The second rotation to apply. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nThe combined rotation matrix.\n\n---\n\n<a name=\"Constellation\"></a>\n### Constellation(ra: float, dec: float) &#8594; [`ConstellationInfo`](#ConstellationInfo)\n\n**Determines the constellation that contains the given point in the sky.**\n\nGiven J2000 equatorial (EQJ) coordinates of a point in the sky, determines the\nconstellation that contains that point.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `ra` | The right ascension (RA) of a point in the sky, using the J2000 equatorial system. |\n| `float` | `dec` | The declination (DEC) of a point in the sky, using the J2000 equatorial system. |\n\n**Returns**: [`ConstellationInfo`](#ConstellationInfo)\nA structure that contains the 3-letter abbreviation and full name\nof the constellation that contains the given (ra,dec), along with\nthe converted B1875 (ra,dec) for that point.\n\n---\n\n<a name=\"CorrectLightTravel\"></a>\n### CorrectLightTravel(func: [`PositionFunction`](#PositionFunction), time: [`Time`](#Time)) &#8594; [`Vector`](#Vector)\n\n**Solve for light travel time of a vector function.**\n\nWhen observing a distant object, for example Jupiter as seen from Earth,\nthe amount of time it takes for light to travel from the object to the\nobserver can significantly affect the object's apparent position.\nThis function is a generic solver that figures out how long in the\npast light must have left the observed object to reach the observer\nat the specified observation time. It uses [`PositionFunction`](#PositionFunction)\nto express an arbitrary position vector as a function of time.\nThis function repeatedly calls `func.Position`, passing a series of time\nestimates in the past. Then `func.Position` must return a relative state vector between\nthe observer and the target. `CorrectLightTravel` keeps calling\n`func.Position` with more and more refined estimates of the time light must have\nleft the target to arrive at the observer.\nFor common use cases, it is simpler to use [`BackdatePosition`](#BackdatePosition)\nfor calculating the light travel time correction of one body observing another body.\nFor geocentric calculations, [`GeoVector`](#GeoVector) also backdates the returned\nposition vector for light travel time, only it returns the observation time in\nthe returned vector's `t` field rather than the backdated time.\ntime : Time\n    The observation time for which to solve for light travel delay.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`PositionFunction`](#PositionFunction) | `func` | An arbitrary position vector as a function of time. |\n\n**Returns**: [`Vector`](#Vector)\nThe position vector at the solved backdated time.\nThe `t` field holds the time that light left the observed\nbody to arrive at the observer at the observation time.\n\n---\n\n<a name=\"DefineStar\"></a>\n### DefineStar(body: [`Body`](#Body), ra: float, dec: float, distanceLightYears: float) &#8594; None\n\n**Assign equatorial coordinates to a user-defined star.**\n\nSome Astronomy Engine functions allow their `body` parameter to\nbe a user-defined fixed point in the sky, loosely called a \"star\".\nThis function assigns a right ascension, declination, and distance\nto one of the eight user-defined stars `Body.Star1`..`Body.Star8`.\nStars are not valid until defined. Once defined, they retain their\ndefinition until re-defined by another call to `DefineStar`.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | One of the eight user-defined star identifiers: `Body.Star1`, `Body.Star2`, ..., `Body.Star8`. |\n| `float` | `ra` | The right ascension to be assigned to the star, expressed in J2000 equatorial coordinates (EQJ). The value is in units of sidereal hours, and must be within the half-open range [0, 24). |\n| `float` | `dec` | The declination to be assigned to the star, expressed in J2000 equatorial coordinates (EQJ). The value is in units of degrees north (positive) or south (negative) of the J2000 equator, and must be within the closed range [-90, +90]. |\n| `float` | `distanceLightYears` | The distance between the star and the Sun, expressed in light-years. This value is used to calculate the tiny parallax shift as seen by an observer on Earth. If you don't know the distance to the star, using a large value like 1000 will generally work well. The minimum allowed distance is 1 light-year, which is required to provide certain internal optimizations. |\n\n---\n\n<a name=\"DeltaT_EspenakMeeus\"></a>\n### DeltaT_EspenakMeeus(ut: float) &#8594; float\n\n**The default Delta T function used by Astronomy Engine.**\n\nEspenak and Meeus use a series of piecewise polynomials to\napproximate DeltaT of the Earth in their \"Five Millennium Canon of Solar Eclipses\".\nSee: https://eclipse.gsfc.nasa.gov/SEhelp/deltatpoly2004.html\nThis is the default Delta T function used by Astronomy Engine.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `ut` | The floating point number of days since noon UTC on January 1, 2000. |\n\n**Returns**: `float`\nThe estimated difference TT-UT on the given date, expressed in seconds.\n\n---\n\n<a name=\"Ecliptic\"></a>\n### Ecliptic(eqj: [`Vector`](#Vector)) &#8594; [`EclipticCoordinates`](#EclipticCoordinates)\n\n**Converts a J2000 mean equator (EQJ) vector to a true ecliptic of date (ETC) vector and angles.**\n\nGiven coordinates relative to the Earth's equator at J2000 (the instant of noon UTC\non 1 January 2000), this function converts those coordinates to true ecliptic coordinates of date,\nwhich are relative to the plane of the Earth's orbit around the Sun.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `eqj` | Equatorial coordinates in the J2000 frame of reference. You can call [`GeoVector`](#GeoVector) to obtain suitable equatorial coordinates. |\n\n**Returns**: [`EclipticCoordinates`](#EclipticCoordinates)\nSpherical and vector coordinates expressed in true ecliptic coordinates of date (ECT).\n\n---\n\n<a name=\"EclipticGeoMoon\"></a>\n### EclipticGeoMoon(time: [`Time`](#Time)) &#8594; [`Spherical`](#Spherical)\n\n**Calculates spherical ecliptic geocentric position of the Moon.**\n\nGiven a time of observation, calculates the Moon's geocentric position\nin ecliptic spherical coordinates. Provides the ecliptic latitude and\nlongitude in degrees, and the geocentric distance in astronomical units (AU).\nThe ecliptic angles are measured in \"ECT\": relative to the true ecliptic plane and\nequatorial plane at the specified time. This means the Earth's equator\nis corrected for precession and nutation, and the plane of the Earth's\norbit is corrected for gradual obliquity drift.\nThis algorithm is based on the Nautical Almanac Office's *Improved Lunar Ephemeris* of 1954,\nwhich in turn derives from E. W. Brown's lunar theories from the early twentieth century.\nIt is adapted from Turbo Pascal code from the book\n[Astronomy on the Personal Computer](https://www.springer.com/us/book/9783540672210)\nby Montenbruck and Pfleger.\nTo calculate a J2000 mean equator vector instead, use [`GeoMoon`](#GeoMoon).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the Moon's position. |\n\n**Returns**: [`Spherical`](#Spherical)\nThe Moon's position as a distance, ecliptic latitude, and ecliptic longitude.\n\n---\n\n<a name=\"EclipticLongitude\"></a>\n### EclipticLongitude(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; float\n\n**Calculates heliocentric ecliptic longitude of a body.**\n\nThis function calculates the angle around the plane of the Earth's orbit\nof a celestial body, as seen from the center of the Sun.\nThe angle is measured prograde (in the direction of the Earth's orbit around the Sun)\nin degrees from the true equinox of date. The ecliptic longitude is always in the range [0, 360).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | A body other than the Sun. |\n| [`Time`](#Time) | `time` | The date and time at which the body's ecliptic longitude is to be calculated. |\n\n**Returns**: `float`\nAn angular value in degrees indicating the ecliptic longitude of the body.\n\n---\n\n<a name=\"Elongation\"></a>\n### Elongation(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`ElongationEvent`](#ElongationEvent)\n\n**Determines visibility of a celestial body relative to the Sun, as seen from the Earth.**\n\nThis function returns an [`ElongationEvent`](#ElongationEvent) object, which provides the following\ninformation about the given celestial body at the given time:\n- `visibility` is an enumerated type that specifies whether the body is more\n  easily seen in the morning before sunrise, or in the evening after sunset.\n- `elongation` is the angle in degrees between two vectors: one from the center\n  of the Earth to the center of the Sun, the other from the center of the Earth\n  to the center of the specified body. This angle indicates how far away the body\n  is from the glare of the Sun. The elongation angle is always in the range [0, 180].\n- `ecliptic_separation` is the absolute value of the difference between the body's\n  ecliptic longitude and the Sun's ecliptic longitude, both as seen from the center\n  of the Earth. This angle measures around the plane of the Earth's orbit, and ignores\n  how far above or below that plane the body is.\n  The ecliptic separation is measured in degrees and is always in the range [0, 180].\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body whose visibility is to be calculated. |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n\n**Returns**: [`ElongationEvent`](#ElongationEvent)\n\n---\n\n<a name=\"Equator\"></a>\n### Equator(body: [`Body`](#Body), time: [`Time`](#Time), observer: [`Observer`](#Observer), ofdate: bool, aberration: bool) &#8594; [`Equatorial`](#Equatorial)\n\n**Calculates equatorial coordinates of a celestial body as seen by an observer on the Earth's surface.**\n\nCalculates topocentric equatorial coordinates in one of two different systems:\nJ2000 or true-equator-of-date, depending on the value of the `ofdate` parameter.\nEquatorial coordinates include right ascension, declination, and distance in astronomical units.\nThis function corrects for light travel time: it adjusts the apparent location\nof the observed body based on how long it takes for light to travel from the body to the Earth.\nThis function corrects for *topocentric parallax*, meaning that it adjusts for the\nangular shift depending on where the observer is located on the Earth. This is most\nsignificant for the Moon, because it is so close to the Earth. However, parallax corection\nhas a small effect on the apparent positions of other bodies.\nCorrection for aberration is optional, using the `aberration` parameter.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body to be observed. Not allowed to be `Body.Earth`. |\n| [`Time`](#Time) | `time` | The date and time at which the observation takes place. |\n| [`Observer`](#Observer) | `observer` | A location on or near the surface of the Earth. |\n| `bool` | `ofdate` | Selects the date of the Earth's equator in which to express the equatorial coordinates. If `True`, returns coordinates using the equator and equinox of date. If `False`, returns coordinates converted to the J2000 system. |\n| `bool` | `aberration` | If `True`, corrects for aberration of light based on the motion of the Earth with respect to the heliocentric origin. If `False`, does not correct for aberration. |\n\n**Returns**: [`Equatorial`](#Equatorial)\nEquatorial coordinates in the specified frame of reference.\n\n---\n\n<a name=\"EquatorFromVector\"></a>\n### EquatorFromVector(vec: [`Vector`](#Vector)) &#8594; [`Equatorial`](#Equatorial)\n\n**Given an equatorial vector, calculates equatorial angular coordinates.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `vec` | A vector in an equatorial coordinate system. |\n\n**Returns**: [`Equatorial`](#Equatorial)\nAngular coordinates expressed in the same equatorial system as `vec`.\n\n---\n\n<a name=\"GeoEmbState\"></a>\n### GeoEmbState(time: [`Time`](#Time)) &#8594; [`StateVector`](#StateVector)\n\n**Calculates the geocentric position and velocity of the Earth/Moon barycenter.**\n\nGiven a time of observation, calculates the geocentric position and velocity vectors\nof the Earth/Moon barycenter (EMB).\nThe position (x, y, z) components are expressed in AU (astronomical units).\nThe velocity (vx, vy, vz) components are expressed in AU/day.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the EMB's geocentric state. |\n\n**Returns**: [`StateVector`](#StateVector)\nThe EMB's position and velocity vectors in J2000 equatorial coordinates.\n\n---\n\n<a name=\"GeoMoon\"></a>\n### GeoMoon(time: [`Time`](#Time)) &#8594; [`Vector`](#Vector)\n\n**Calculates equatorial geocentric position of the Moon at a given time.**\n\nGiven a time of observation, calculates the Moon's position as a vector.\nThe vector gives the location of the Moon's center relative to the Earth's center\nwith x-, y-, and z-components measured in astronomical units.\nThe coordinates are oriented with respect to the Earth's equator at the J2000 epoch.\nIn Astronomy Engine, this orientation is called EQJ.\nThis algorithm is based on the Nautical Almanac Office's *Improved Lunar Ephemeris* of 1954,\nwhich in turn derives from E. W. Brown's lunar theories from the early twentieth century.\nIt is adapted from Turbo Pascal code from the book\n[Astronomy on the Personal Computer](https://www.springer.com/us/book/9783540672210)\nby Montenbruck and Pfleger.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the Moon's position. |\n\n**Returns**: [`Vector`](#Vector)\nThe Moon's position as a vector in J2000 Cartesian equatorial coordinates (EQJ).\n\n---\n\n<a name=\"GeoMoonState\"></a>\n### GeoMoonState(time: [`Time`](#Time)) &#8594; [`StateVector`](#StateVector)\n\n**Calculates equatorial geocentric position and velocity of the Moon at a given time.**\n\nGiven a time of observation, calculates the Moon's position and velocity vectors.\nThe position and velocity are of the Moon's center relative to the Earth's center.\nThe position (x, y, z) components are expressed in AU (astronomical units).\nThe velocity (vx, vy, vz) components are expressed in AU/day.\nThe coordinates are oriented with respect to the Earth's equator at the J2000 epoch.\nIn Astronomy Engine, this orientation is called EQJ.\nIf you need the Moon's position only, and not its velocity,\nit is much more efficient to use [`GeoMoon`](#GeoMoon) instead.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the Moon's position and velocity. |\n\n**Returns**: [`StateVector`](#StateVector)\nThe Moon's position and velocity vectors in J2000 equatorial coordinates (EQJ).\n\n---\n\n<a name=\"GeoVector\"></a>\n### GeoVector(body: [`Body`](#Body), time: [`Time`](#Time), aberration: bool) &#8594; [`Vector`](#Vector)\n\n**Calculates geocentric Cartesian coordinates of a body in the J2000 equatorial system.**\n\nThis function calculates the position of the given celestial body as a vector,\nusing the center of the Earth as the origin.  The result is expressed as a Cartesian\nvector in the J2000 equatorial system: the coordinates are based on the mean equator\nof the Earth at noon UTC on 1 January 2000.\nIf given an invalid value for `body`, this function will raise an exception.\nUnlike [`HelioVector`](#HelioVector), this function corrects for light travel time.\nThis means the position of the body is \"back-dated\" by the amount of time it takes\nlight to travel from that body to an observer on the Earth.\nAlso, the position can optionally be corrected for\n[aberration](https://en.wikipedia.org/wiki/Aberration_of_light), an effect\ncausing the apparent direction of the body to be shifted due to transverse\nmovement of the Earth with respect to the rays of light coming from that body.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | A body for which to calculate a heliocentric position: the Sun, Moon, or any of the planets. |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the position. |\n| `bool` | `aberration` | A boolean value indicating whether to correct for aberration. |\n\n**Returns**: [`Vector`](#Vector)\nA geocentric position vector of the center of the given body.\n\n---\n\n<a name=\"HelioDistance\"></a>\n### HelioDistance(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; float\n\n**Calculates the distance between a body and the Sun at a given time.**\n\nGiven a date and time, this function calculates the distance between\nthe center of `body` and the center of the Sun.\nFor the planets Mercury through Neptune, this function is significantly\nmore efficient than calling [`HelioVector`](#HelioVector) followed by taking the length\nof the resulting vector.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | A body for which to calculate a heliocentric distance: the Sun, Moon, any of the planets, or a user-defined star. |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the heliocentric distance. |\n\n**Returns**: `float`\nThe heliocentric distance in AU.\n\n---\n\n<a name=\"HelioState\"></a>\n### HelioState(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`StateVector`](#StateVector)\n\n**Calculates heliocentric position and velocity vectors for the given body.**\n\nGiven a body and a time, calculates the position and velocity\nvectors for the center of that body at that time, relative to the center of the Sun.\nThe vectors are expressed in J2000 mean equator coordinates (EQJ).\nIf you need the position vector only, it is more efficient to call [`HelioVector`](#HelioVector).\nThe Sun's center is a non-inertial frame of reference. In other words, the Sun\nexperiences acceleration due to gravitational forces, mostly from the larger\nplanets (Jupiter, Saturn, Uranus, and Neptune). If you want to calculate momentum,\nkinetic energy, or other quantities that require a non-accelerating frame\nof reference, consider using [`BaryState`](#BaryState) instead.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body whose heliocentric state vector is to be calculated. Supported values are `Body.Sun`, `Body.SSB`, `Body.Moon`, `Body.EMB`, and all planets: `Body.Mercury`, `Body.Venus`, `Body.Earth`, `Body.Mars`, `Body.Jupiter`, `Body.Saturn`, `Body.Uranus`, `Body.Neptune`, `Body.Pluto`. Also allowed to be a user-defined star created by [`DefineStar`](#DefineStar). |\n| [`Time`](#Time) | `time` | The date and time for which to calculate position and velocity. |\n\n**Returns**: [`StateVector`](#StateVector)\nAn object that contains heliocentric position and velocity vectors.\n\n---\n\n<a name=\"HelioVector\"></a>\n### HelioVector(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`Vector`](#Vector)\n\n**Calculates heliocentric Cartesian coordinates of a body in the J2000 equatorial system.**\n\nThis function calculates the position of the given celestial body as a vector,\nusing the center of the Sun as the origin.  The result is expressed as a Cartesian\nvector in the J2000 equatorial system: the coordinates are based on the mean equator\nof the Earth at noon UTC on 1 January 2000.\nThe position is not corrected for light travel time or aberration.\nThis is different from the behavior of [`GeoVector`](#GeoVector).\nIf given an invalid value for `body`, this function raises an exception.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The celestial body whose heliocentric position is to be calculated: The Sun, Moon, EMB, SSB, or any of the planets. Also allowed to be a user-defined star created by [`DefineStar`](#DefineStar). |\n| [`Time`](#Time) | `time` | The time at which to calculate the heliocentric position. |\n\n**Returns**: [`Vector`](#Vector)\nA heliocentric position vector of the center of the given body\nat the given time.\n\n---\n\n<a name=\"Horizon\"></a>\n### Horizon(time: [`Time`](#Time), observer: [`Observer`](#Observer), ra: float, dec: float, refraction: [`Refraction`](#Refraction)) &#8594; [`HorizontalCoordinates`](#HorizontalCoordinates)\n\n**Calculates the apparent location of a body relative to the local horizon of an observer on the Earth.**\n\nGiven a date and time, the geographic location of an observer on the Earth, and\nequatorial coordinates (right ascension and declination) of a celestial body,\nthis function returns horizontal coordinates (azimuth and altitude angles) for the body\nrelative to the horizon at the geographic location.\nThe right ascension `ra` and declination `dec` passed in must be *equator of date*\ncoordinates, based on the Earth's true equator at the date and time of the observation.\nOtherwise the resulting horizontal coordinates will be inaccurate.\nEquator of date coordinates can be obtained by calling [`Equator`](#Equator), passing in\n`True` as its `ofdate` parameter. It is also recommended to enable\naberration correction by passing in `True` for the `aberration` parameter.\nThis function optionally corrects for atmospheric refraction.\nFor most uses, it is recommended to pass `Refraction.Normal` in the `refraction` parameter to\ncorrect for optical lensing of the Earth's atmosphere that causes objects\nto appear somewhat higher above the horizon than they actually are.\nHowever, callers may choose to avoid this correction by passing in `Refraction.Airless`.\nIf refraction correction is enabled, the azimuth, altitude, right ascension, and declination\nin the [`HorizontalCoordinates`](#HorizontalCoordinates) object returned by this function will all be corrected for refraction.\nIf refraction is disabled, none of these four coordinates will be corrected; in that case,\nthe right ascension and declination in the returned object will be numerically identical\nto the respective `ra` and `dec` values passed in.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to find horizontal coordinates. |\n| [`Observer`](#Observer) | `observer` | The location of the observer for which to find horizontal coordinates. |\n| `float` | `ra` | Right ascension in sidereal hours of the celestial object, referred to the mean equinox of date for the J2000 epoch. |\n| `float` | `dec` | Declination in degrees of the celestial object, referred to the mean equator of date for the J2000 epoch. Positive values are north of the celestial equator and negative values are south of it. |\n| [`Refraction`](#Refraction) | `refraction` | The option for selecting whether to correct for atmospheric lensing. If `Refraction.Normal`, a well-behaved refraction model is used. If `Refraction.Airless`, no refraction correct is performed. `Refraction.JplHorizons` is used only for compatibility testing with the JPL Horizons online tool. |\n\n**Returns**: [`HorizontalCoordinates`](#HorizontalCoordinates)\nThe horizontal coordinates (altitude and azimuth), along with\nequatorial coordinates (right ascension and declination), all\noptionally corrected for atmospheric refraction. See remarks above\nfor more details.\n\n---\n\n<a name=\"HorizonFromVector\"></a>\n### HorizonFromVector(vector: [`Vector`](#Vector), refraction: [`Refraction`](#Refraction)) &#8594; [`Spherical`](#Spherical)\n\n**Converts Cartesian coordinates to horizontal coordinates.**\n\nGiven a horizontal Cartesian vector, returns horizontal azimuth and altitude.\n*IMPORTANT:* This function differs from `SphereFromVector` in two ways:\n- `SphereFromVector` returns a `lon` value that represents azimuth defined counterclockwise\n  from north (e.g., west = +90), but this function represents a clockwise rotation\n  (e.g., east = +90). The difference is because `SphereFromVector` is intended\n  to preserve the vector \"right-hand rule\", while this function defines azimuth in a more\n  traditional way as used in navigation and cartography.\n- This function optionally corrects for atmospheric refraction, while `SphereFromVector` does not.\nThe returned object contains the azimuth in `lon`.\nIt is measured in degrees clockwise from north: east = +90 degrees, west = +270 degrees.\nThe altitude is stored in `lat`.\nThe distance to the observed object is stored in `dist`,\nand is expressed in astronomical units (AU).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `vector` | Cartesian vector to be converted to horizontal angular coordinates. |\n| [`Refraction`](#Refraction) | `refraction` | See comments in the [`RefractionAngle`](#RefractionAngle) function. |\n\n---\n\n<a name=\"HourAngle\"></a>\n### HourAngle(body: [`Body`](#Body), time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; float\n\n**Finds the hour angle of a body for a given observer and time.**\n\nThe *hour angle* of a celestial body indicates its position in the sky with respect\nto the Earth's rotation. The hour angle depends on the location of the observer on the Earth.\nThe hour angle is 0 when the body's center reaches its highest angle above the horizon in a given day.\nThe hour angle increases by 1 unit for every sidereal hour that passes after that point, up\nto 24 sidereal hours when it reaches the highest point again. So the hour angle indicates\nthe number of hours that have passed since the most recent time that the body has culminated,\nor reached its highest point.\nThis function returns the hour angle of the body as seen at the given time and geogrpahic location.\nThe hour angle is a number in the half-open range [0, 24).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The body whose observed hour angle is to be found. |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n| [`Observer`](#Observer) | `observer` | The geographic location where the observation takes place. |\n\n**Returns**: `float`\n\n---\n\n<a name=\"IdentityMatrix\"></a>\n### IdentityMatrix() &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Creates an identity rotation matrix.**\n\nReturns a rotation matrix that has no effect on orientation.\nThis matrix can be the starting point for other operations,\nsuch as using a series of calls to [`Pivot`](#Pivot) to\ncreate a custom rotation matrix.\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nThe identity rotation matrix.\n\n---\n\n<a name=\"Illumination\"></a>\n### Illumination(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`IlluminationInfo`](#IlluminationInfo)\n\n**Finds visual magnitude, phase angle, and other illumination information about a celestial body.**\n\nThis function calculates information about how bright a celestial body appears from the Earth,\nreported as visual magnitude, which is a smaller (or even negative) number for brighter objects,\nand a larger number for dimmer objects.\nFor bodies other than the Sun, it reports a phase angle, which is the angle in degrees between\nthe Sun and the Earth, as seen from the center of the body. Phase angle indicates what fraction\nof the body appears illuminated as seen from the Earth. For example, when the phase angle is\nnear zero, it means the body appears \"full\" as seen from the Earth.  A phase angle approaching\n180 degrees means the body appears as a thin crescent as seen from the Earth.  A phase angle\nof 90 degrees means the body appears \"half full\".\nFor the Sun, the phase angle is always reported as 0; the Sun emits light rather than reflecting it,\nso it doesn't have a phase angle.\nWhen the body is Saturn, the returned object contains a field `ring_tilt` that holds\nthe tilt angle in degrees of Saturn's rings as seen from the Earth. A value of 0 means\nthe rings appear edge-on, and are thus nearly invisible from the Earth. The `ring_tilt` holds\n0 for all bodies other than Saturn.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The Sun, Moon, or any planet other than the Earth. |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n\n**Returns**: [`IlluminationInfo`](#IlluminationInfo)\n\n---\n\n<a name=\"InverseRefractionAngle\"></a>\n### InverseRefractionAngle(refraction: [`Refraction`](#Refraction), bent_altitude: float) &#8594; float\n\n**Calculates the inverse of an atmospheric refraction angle.**\n\nGiven an observed altitude angle that includes atmospheric refraction,\ncalculates the negative angular correction to obtain the unrefracted\naltitude. This is useful for cases where observed horizontal\ncoordinates are to be converted to another orientation system,\nbut refraction first must be removed from the observed position.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Refraction`](#Refraction) | `refraction` | `Refraction.Normal` - corrects for atmospheric refraction (recommended). `Refraction.Airless` - no correction is performed. `Refraction.JplHorizons` - For JPL Horizons compatibility testing only. |\n| `float` | `bent_altitude` | The apparent altitude that includes atmospheric refraction. |\n\n**Returns**: `float`\nThe angular adjustment in degrees, to be added to the\naltitude angle to correct for atmospheric lensing.\nThis will be less than or equal to zero.\n\n---\n\n<a name=\"InverseRotation\"></a>\n### InverseRotation(rotation: [`RotationMatrix`](#RotationMatrix)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates the inverse of a rotation matrix.**\n\nGiven a rotation matrix that performs some coordinate transform,\nthis function returns the matrix that reverses that transform.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`RotationMatrix`](#RotationMatrix) | `rotation` | The rotation matrix to be inverted. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nThe inverse rotation matrix.\n\n---\n\n<a name=\"JupiterMoons\"></a>\n### JupiterMoons(time: [`Time`](#Time)) &#8594; [`JupiterMoonsInfo`](#JupiterMoonsInfo)\n\n**Calculates jovicentric positions and velocities of Jupiter's largest 4 moons.**\n\nCalculates position and velocity vectors for Jupiter's moons\nIo, Europa, Ganymede, and Callisto, at the given date and time.\nThe vectors are jovicentric (relative to the center of Jupiter).\nTheir orientation is the Earth's equatorial system at the J2000 epoch (EQJ).\nThe position components are expressed in astronomical units (AU), and the\nvelocity components are in AU/day.\nTo convert to heliocentric vectors, call [`HelioVector`](#HelioVector)\nwith `Body.Jupiter` to get Jupiter's heliocentric position, then\nadd the jovicentric vectors. Likewise, you can call [`GeoVector`](#GeoVector)\nto convert to geocentric vectors.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate Jupiter's moons. |\n\n**Returns**: [`JupiterMoonsInfo`](#JupiterMoonsInfo)\nThe positions and velocities of Jupiter's 4 largest moons.\n\n---\n\n<a name=\"LagrangePoint\"></a>\n### LagrangePoint(point: int, time: [`Time`](#Time), major_body: [`Body`](#Body), minor_body: [`Body`](#Body)) &#8594; [`StateVector`](#StateVector)\n\n**Calculates one of the 5 Lagrange points for a pair of co-orbiting bodies.**\n\nGiven a more massive \"major\" body and a much less massive \"minor\" body,\ncalculates one of the five Lagrange points in relation to the minor body's\norbit around the major body. The parameter `point` is an integer that\nselects the Lagrange point as follows:\n1 = the Lagrange point between the major body and minor body.\n2 = the Lagrange point on the far side of the minor body.\n3 = the Lagrange point on the far side of the major body.\n4 = the Lagrange point 60 degrees ahead of the minor body's orbital position.\n5 = the Lagrange point 60 degrees behind the minor body's orbital position.\nThe function returns the state vector for the selected Lagrange point\nin J2000 mean equator coordinates (EQJ), with respect to the center of the\nmajor body.\nTo calculate Sun/Earth Lagrange points, pass in `Body.Sun` for `major_body`\nand `Body.EMB` (Earth/Moon barycenter) for `minor_body`.\nFor Lagrange points of the Sun and any other planet, pass in just that planet\n(e.g. `Body.Jupiter`) for `minor_body`.\nTo calculate Earth/Moon Lagrange points, pass in `Body.Earth` and `Body.Moon`\nfor the major and minor bodies respectively.\nIn some cases, it may be more efficient to call [`LagrangePointFast`](#LagrangePointFast),\nespecially when the state vectors have already been calculated, or are needed\nfor some other purpose.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `int` | `point` | An integer 1..5 that selects which of the Lagrange points to calculate. |\n| [`Time`](#Time) | `time` | The time for which the Lagrange point is to be calculated. |\n| [`Body`](#Body) | `major_body` | The more massive of the co-orbiting bodies: `Body.Sun` or `Body.Earth`. |\n| [`Body`](#Body) | `minor_body` | The less massive of the co-orbiting bodies. See main remarks. |\n\n**Returns**: [`StateVector`](#StateVector)\nThe position and velocity of the selected Lagrange point with respect to the major body's center.\n\n---\n\n<a name=\"LagrangePointFast\"></a>\n### LagrangePointFast(point: int, major_state: [`StateVector`](#StateVector), major_mass: float, minor_state: [`StateVector`](#StateVector), minor_mass: float) &#8594; [`StateVector`](#StateVector)\n\n**Calculates one of the 5 Lagrange points from body masses and state vectors.**\n\nGiven a more massive \"major\" body and a much less massive \"minor\" body,\ncalculates one of the five Lagrange points in relation to the minor body's\norbit around the major body. The parameter `point` is an integer that\nselects the Lagrange point as follows:\n1 = the Lagrange point between the major body and minor body.\n2 = the Lagrange point on the far side of the minor body.\n3 = the Lagrange point on the far side of the major body.\n4 = the Lagrange point 60 degrees ahead of the minor body's orbital position.\n5 = the Lagrange point 60 degrees behind the minor body's orbital position.\nThe caller passes in the state vector and mass for both bodies.\nThe state vectors can be in any orientation and frame of reference.\nThe body masses are expressed as GM products, where G = the universal\ngravitation constant and M = the body's mass. Thus the units for\n`major_mass` and `minor_mass` must be au^3/day^2.\nUse [`MassProduct`](#MassProduct) to obtain GM values for various solar system bodies.\nThe function returns the state vector for the selected Lagrange point\nusing the same orientation as the state vector parameters `major_state` and `minor_state`,\nand the position and velocity components are with respect to the major body's center.\nConsider calling [`LagrangePoint`](#LagrangePoint), instead of this function, for simpler usage in most cases.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `int` | `point` | An integer 1..5 that selects which of the Lagrange points to calculate. |\n| [`StateVector`](#StateVector) | `major_state` | The state vector of the major (more massive) of the pair of bodies. |\n| `float` | `major_mass` | The mass product GM of the major body. |\n| [`StateVector`](#StateVector) | `minor_state` | The state vector of the minor (less massive) of the pair of bodies. |\n| `float` | `minor_mass` | The mass product GM of the minor body. |\n\n**Returns**: [`StateVector`](#StateVector)\nThe position and velocity of the selected Lagrange point with respect to the major body's center.\n\n---\n\n<a name=\"Libration\"></a>\n### Libration(time: [`Time`](#Time)) &#8594; [`LibrationInfo`](#LibrationInfo)\n\n**Calculates the Moon's libration angles at a given moment in time.**\n\nLibration is an observed back-and-forth wobble of the portion of the\nMoon visible from the Earth. It is caused by the imperfect tidal locking\nof the Moon's fixed rotation rate, compared to its variable angular speed\nof orbit around the Earth.\nThis function calculates a pair of perpendicular libration angles,\none representing rotation of the Moon in ecliptic longitude `elon`, the other\nin ecliptic latitude `elat`, both relative to the Moon's mean Earth-facing position.\nThis function also returns the geocentric position of the Moon\nexpressed in ecliptic longitude `mlon`, ecliptic latitude `mlat`, the\ndistance `dist_km` between the centers of the Earth and Moon expressed in kilometers,\nand the apparent angular diameter of the Moon `diam_deg`.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the Moon's libration angles. |\n\n**Returns**: [`LibrationInfo`](#LibrationInfo)\n\n---\n\n<a name=\"MassProduct\"></a>\n### MassProduct(body: [`Body`](#Body)) &#8594; float\n\n**Returns the product of mass and universal gravitational constant of a Solar System body.**\n\nFor problems involving the gravitational interactions of Solar System bodies,\nit is helpful to know the product GM, where G = the universal gravitational constant\nand M = the mass of the body. In practice, GM is known to a higher precision than\neither G or M alone, and thus using the product results in the most accurate results.\nThis function returns the product GM in the units au^3/day^2.\nThe values come from page 10 of a\n[JPL memorandum regarding the DE405/LE405 ephemeris](https://web.archive.org/web/20120220062549/http://iau-comm4.jpl.nasa.gov/de405iom/de405iom.pdf).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The body for which to find the GM product. Allowed to be the Sun, Moon, EMB (Earth/Moon Barycenter), or any planet. Any other value will cause an exception to be thrown. |\n\n**Returns**: `float`\nThe mass product of the given body in au^3/day^2.\n\n---\n\n<a name=\"MoonPhase\"></a>\n### MoonPhase(time: [`Time`](#Time)) &#8594; float\n\n**Returns the Moon's phase as an angle from 0 to 360 degrees.**\n\nThis function determines the phase of the Moon using its apparent\necliptic longitude relative to the Sun, as seen from the center of the Earth.\nCertain values of the angle have conventional definitions:\n- 0 = new moon\n- 90 = first quarter\n- 180 = full moon\n- 270 = third quarter\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n\n**Returns**: `float`\n\n---\n\n<a name=\"NextGlobalSolarEclipse\"></a>\n### NextGlobalSolarEclipse(prevEclipseTime: [`Time`](#Time)) &#8594; [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo)\n\n**Searches for the next global solar eclipse in a series.**\n\nAfter using [`SearchGlobalSolarEclipse`](#SearchGlobalSolarEclipse) to find the first solar eclipse\nin a series, you can call this function to find the next consecutive solar eclipse.\nPass in the `peak` value from the [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo) returned by the\nprevious call to `SearchGlobalSolarEclipse` or `NextGlobalSolarEclipse`\nto find the next solar eclipse.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `prevEclipseTime` | A date and time near a new moon. Solar eclipse search will start at the next new moon. |\n\n**Returns**: [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo)\n\n---\n\n<a name=\"NextLocalSolarEclipse\"></a>\n### NextLocalSolarEclipse(prevEclipseTime: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo)\n\n**Searches for the next local solar eclipse in a series.**\n\nAfter using [`SearchLocalSolarEclipse`](#SearchLocalSolarEclipse) to find the first solar eclipse\nin a series, you can call this function to find the next consecutive solar eclipse.\nPass in the `peak` value from the [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo) returned by the\nprevious call to `SearchLocalSolarEclipse` or `NextLocalSolarEclipse`\nto find the next solar eclipse.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `prevEclipseTime` | A date and time near a new moon. Solar eclipse search will start at the next new moon. |\n| [`Observer`](#Observer) | `observer` | The geographic location of the observer. |\n\n**Returns**: [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo)\n\n---\n\n<a name=\"NextLunarApsis\"></a>\n### NextLunarApsis(apsis: [`Apsis`](#Apsis)) &#8594; [`Apsis`](#Apsis)\n\n**Finds the next lunar perigee or apogee in a series.**\n\nThis function requires an [`Apsis`](#Apsis) value obtained from a call to\n[`SearchLunarApsis`](#SearchLunarApsis) or `NextLunarApsis`.\nGiven an apogee event, this function finds the next perigee event,\nand vice versa.\nSee [`SearchLunarApsis`](#SearchLunarApsis) for more details.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Apsis`](#Apsis) | `apsis` |  |\n\n**Returns**: [`Apsis`](#Apsis)\n\n---\n\n<a name=\"NextLunarEclipse\"></a>\n### NextLunarEclipse(prevEclipseTime: [`Time`](#Time)) &#8594; [`LunarEclipseInfo`](#LunarEclipseInfo)\n\n**Searches for the next lunar eclipse in a series.**\n\n After using [`SearchLunarEclipse`](#SearchLunarEclipse) to find the first lunar eclipse\n in a series, you can call this function to find the next consecutive lunar eclipse.\n Pass in the `peak` value from the [`LunarEclipseInfo`](#LunarEclipseInfo) returned by the\n previous call to `SearchLunarEclipse` or `NextLunarEclipse`\n to find the next lunar eclipse.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `prevEclipseTime` | A date and time near a full moon. Lunar eclipse search will start at the next full moon. |\n\n**Returns**: [`LunarEclipseInfo`](#LunarEclipseInfo)\n\n---\n\n<a name=\"NextMoonNode\"></a>\n### NextMoonNode(prevNode: [`NodeEventInfo`](#NodeEventInfo)) &#8594; [`NodeEventInfo`](#NodeEventInfo)\n\n**Searches for the next time when the Moon's center crosses through the ecliptic plane.**\n\nCall [`SearchMoonNode`](#SearchMoonNode) to find the first of a series of nodes.\nThen call `NextMoonNode` to find as many more consecutive nodes as desired.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`NodeEventInfo`](#NodeEventInfo) | `prevNode` | The previous node find from calling [`SearchMoonNode`](#SearchMoonNode) or `NextMoonNode`. |\n\n**Returns**: [`NodeEventInfo`](#NodeEventInfo)\n\n---\n\n<a name=\"NextMoonQuarter\"></a>\n### NextMoonQuarter(mq: [`MoonQuarter`](#MoonQuarter)) &#8594; [`MoonQuarter`](#MoonQuarter)\n\n**Continues searching for lunar quarters from a previous search.**\n\nAfter calling [`SearchMoonQuarter`](#SearchMoonQuarter), this function can be called\none or more times to continue finding consecutive lunar quarters.\nThis function finds the next consecutive moon quarter event after\nthe one passed in as the parameter `mq`.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`MoonQuarter`](#MoonQuarter) | `mq` | A value returned by a prior call to [`SearchMoonQuarter`](#SearchMoonQuarter) or [`NextMoonQuarter`](#NextMoonQuarter). |\n\n**Returns**: [`MoonQuarter`](#MoonQuarter)\n\n---\n\n<a name=\"NextPlanetApsis\"></a>\n### NextPlanetApsis(body: [`Body`](#Body), apsis: [`Apsis`](#Apsis)) &#8594; [`Apsis`](#Apsis)\n\n**Finds the next planetary perihelion or aphelion event in a series.**\n\nThis function requires an [`Apsis`](#Apsis) value obtained from a call\nto [`SearchPlanetApsis`](#SearchPlanetApsis) or `NextPlanetApsis`.\nGiven an aphelion event, this function finds the next perihelion event, and vice versa.\nSee [`SearchPlanetApsis`](#SearchPlanetApsis) for more details.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The planet for which to find the next perihelion/aphelion event. Not allowed to be `Body.Sun` or `Body.Moon`. Must match the body passed into the call that produced the `apsis` parameter. |\n| [`Apsis`](#Apsis) | `apsis` | An apsis event obtained from a call to [`SearchPlanetApsis`](#SearchPlanetApsis) or `NextPlanetApsis`. |\n\n**Returns**: [`Apsis`](#Apsis)\n\n---\n\n<a name=\"NextTransit\"></a>\n### NextTransit(body: [`Body`](#Body), prevTransitTime: [`Time`](#Time)) &#8594; [`TransitInfo`](#TransitInfo)\n\n**Searches for another transit of Mercury or Venus.**\n\nAfter calling [`SearchTransit`](#SearchTransit) to find a transit of Mercury or Venus,\nthis function finds the next transit after that.\nKeep calling this function as many times as you want to keep finding more transits.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The planet whose transit is to be found. Must be `Body.Mercury` or `Body.Venus`. |\n| [`Time`](#Time) | `prevTransitTime` | A date and time near the previous transit. |\n\n**Returns**: [`TransitInfo`](#TransitInfo)\n\n---\n\n<a name=\"ObserverGravity\"></a>\n### ObserverGravity(latitude: float, height: float) &#8594; float\n\n**Calculates the gravitational acceleration experienced by an observer on the Earth.**\n\nThis function implements the WGS 84 Ellipsoidal Gravity Formula.\nThe result is a combination of inward gravitational acceleration\nwith outward centrifugal acceleration, as experienced by an observer\nin the Earth's rotating frame of reference.\nThe resulting value increases toward the Earth's poles and decreases\ntoward the equator, consistent with changes of the weight measured\nby a spring scale of a fixed mass moved to different latitudes and heights\non the Earth.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `latitude` | The latitude of the observer in degrees north or south of the equator. By formula symmetry, positive latitudes give the same answer as negative latitudes, so the sign does not matter. |\n| `float` | `height` | The height above the sea level geoid in meters. No range checking is done; however, accuracy is only valid in the range 0 to 100000 meters. |\n\n**Returns**: `float`\nThe effective gravitational acceleration expressed in meters per second squared [m/s^2].\n\n---\n\n<a name=\"ObserverState\"></a>\n### ObserverState(time: [`Time`](#Time), observer: [`Observer`](#Observer), ofdate: bool) &#8594; [`StateVector`](#StateVector)\n\n**Calculates geocentric equatorial position and velocity of an observer on the surface of the Earth.**\n\nThis function calculates position and velocity vectors of an observer\non or near the surface of the Earth, expressed in equatorial\ncoordinates. It takes into account the rotation of the Earth at the given\ntime, along with the given latitude, longitude, and elevation of the observer.\nThe caller may pass `ofdate` as `True` to return coordinates relative to the Earth's\nequator at the specified time, or `False` to use the J2000 equator.\nThe returned position vector has components expressed in astronomical units (AU).\nTo convert to kilometers, multiply the `x`, `y`, and `z` values by\nthe constant value [`KM_PER_AU`](#KM_PER_AU).\nThe returned velocity vector has components expressed in AU/day.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the observer's position and velocity vectors. |\n| [`Observer`](#Observer) | `observer` | The geographic location of a point on or near the surface of the Earth. |\n| `bool` | `ofdate` | Selects the date of the Earth's equator in which to express the equatorial coordinates. The caller may pass `False` to use the orientation of the Earth's equator at noon UTC on January 1, 2000, in which case this function corrects for precession and nutation of the Earth as it was at the moment specified by the `time` parameter. Or the caller may pass `True` to use the Earth's equator at `time` as the orientation. |\n\n**Returns**: [`StateVector`](#StateVector)\nAn equatorial position vector and velocity vector relative to the center of the Earth.\n\n---\n\n<a name=\"ObserverVector\"></a>\n### ObserverVector(time: [`Time`](#Time), observer: [`Observer`](#Observer), ofdate: bool) &#8594; [`Vector`](#Vector)\n\n**Calculates geocentric equatorial coordinates of an observer on the surface of the Earth.**\n\nThis function calculates a vector from the center of the Earth to\na point on or near the surface of the Earth, expressed in equatorial\ncoordinates. It takes into account the rotation of the Earth at the given\ntime, along with the given latitude, longitude, and elevation of the observer.\nThe caller may pass `ofdate` as `True` to return coordinates relative to the Earth's\nequator at the specified time, or `False` to use the J2000 equator.\nThe returned vector has components expressed in astronomical units (AU).\nTo convert to kilometers, multiply the `x`, `y`, and `z` values by\nthe constant value [`KM_PER_AU`](#KM_PER_AU).\nThe inverse of this function is also available: [`VectorObserver`](#VectorObserver).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the observer's position vector. |\n| [`Observer`](#Observer) | `observer` | The geographic location of a point on or near the surface of the Earth. |\n| `bool` | `ofdate` | Selects the date of the Earth's equator in which to express the equatorial coordinates. The caller may pass `False` to use the orientation of the Earth's equator at noon UTC on January 1, 2000, in which case this function corrects for precession and nutation of the Earth as it was at the moment specified by the `time` parameter. Or the caller may pass `True` to use the Earth's equator at `time` as the orientation. |\n\n**Returns**: [`Vector`](#Vector)\nAn equatorial vector from the center of the Earth to the specified location\non (or near) the Earth's surface.\n\n---\n\n<a name=\"PairLongitude\"></a>\n### PairLongitude(body1: [`Body`](#Body), body2: [`Body`](#Body), time: [`Time`](#Time)) &#8594; float\n\n**Returns one body's ecliptic longitude with respect to another, as seen from the Earth.**\n\nThis function determines where one body appears around the ecliptic plane\n(the plane of the Earth's orbit around the Sun) as seen from the Earth,\nrelative to the another body's apparent position.\nThe function returns an angle in the half-open range [0, 360) degrees.\nThe value is the ecliptic longitude of `body1` relative to the ecliptic\nlongitude of `body2`.\nThe angle is 0 when the two bodies are at the same ecliptic longitude\nas seen from the Earth. The angle increases in the prograde direction\n(the direction that the planets orbit the Sun and the Moon orbits the Earth).\nWhen the angle is 180 degrees, it means the two bodies appear on opposite sides\nof the sky for an Earthly observer.\nNeither `body1` nor `body2` is allowed to be `Body.Earth`.\nIf this happens, the function throws an exception.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body1` | The first body, whose longitude is to be found relative to the second body. |\n| [`Body`](#Body) | `body2` | The second body, relative to which the longitude of the first body is to be found. |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n\n**Returns**: `float`\nAn angle in degrees in the range [0, 360).\n\n---\n\n<a name=\"Pivot\"></a>\n### Pivot(rotation: [`RotationMatrix`](#RotationMatrix), axis: int, angle: float) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Re-orients a rotation matrix by pivoting it by an angle around one of its axes.**\n\nGiven a rotation matrix, a selected coordinate axis, and an angle in degrees,\nthis function pivots the rotation matrix by that angle around that coordinate axis.\nFor example, if you have rotation matrix that converts ecliptic coordinates (ECL)\nto horizontal coordinates (HOR), but you really want to convert ECL to the orientation\nof a telescope camera pointed at a given body, you can use `Pivot` twice:\n(1) pivot around the zenith axis by the body's azimuth, then (2) pivot around the\nwestern axis by the body's altitude angle. The resulting rotation matrix will then\nreorient ECL coordinates to the orientation of your telescope camera.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`RotationMatrix`](#RotationMatrix) | `rotation` | The input rotation matrix. |\n| `int` | `axis` | An integer that selects which coordinate axis to rotate around: 0 = x, 1 = y, 2 = z. Any other value will cause an exception. |\n| `float` | `angle` | An angle in degrees indicating the amount of rotation around the specified axis. Positive angles indicate rotation counterclockwise as seen from the positive direction along that axis, looking towards the origin point of the orientation system. Any finite number of degrees is allowed, but best precision will result from keeping `angle` in the range [-360, +360]. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA pivoted matrix object.\n\n---\n\n<a name=\"PlanetOrbitalPeriod\"></a>\n### PlanetOrbitalPeriod(body: [`Body`](#Body)) &#8594; float\n\n**Returns the average number of days it takes for a planet to orbit the Sun.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | One of the planets: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune, or Pluto. |\n\n**Returns**: `float`\nThe mean orbital period of the body in days.\n\n---\n\n<a name=\"RefractionAngle\"></a>\n### RefractionAngle(refraction: [`Refraction`](#Refraction), altitude: float) &#8594; float\n\n**Calculates the amount of \"lift\" to an altitude angle caused by atmospheric refraction.**\n\nGiven an altitude angle and a refraction option, calculates\nthe amount of \"lift\" caused by atmospheric refraction.\nThis is the number of degrees higher in the sky an object appears\ndue to lensing of the Earth's atmosphere.\nThis function works best near sea level.\nTo correct for higher elevations, call [`Atmosphere`](#Atmosphere) for that\nelevation and multiply the refraction angle by the resulting relative density.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Refraction`](#Refraction) | `refraction` | The option for selecting whether to correct for atmospheric lensing. If `Refraction.Normal`, a well-behaved refraction model is used. If `Refraction.Airless`, no refraction correct is performed. `Refraction.JplHorizons` is used only for compatibility testing with the JPL Horizons online tool. Any other value raises an exception. |\n| `float` | `altitude` | The number of degrees above (positive) or below (negative) the horizon an object is, before being corrected for refraction. |\n\n**Returns**: `float`\nThe number of additional degrees of altitude an object appears\nto have, due to atmospheric refraction, depending on the\noption selected by the `refraction` parameter.\n\n---\n\n<a name=\"RotateState\"></a>\n### RotateState(rotation: [`RotationMatrix`](#RotationMatrix), state: [`StateVector`](#StateVector)) &#8594; [`StateVector`](#StateVector)\n\n**Applies a rotation to a state vector, yielding a rotated state vector.**\n\nThis function transforms a state vector in one orientation to a\nstate vector in another orientation. Both the position and velocity\nvectors are rotated the same way.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`RotationMatrix`](#RotationMatrix) | `rotation` | A rotation matrix that specifies how the orientation of the vector is to be changed. |\n| [`StateVector`](#StateVector) | `state` | The state vector whose orientation is to be changed. |\n\n**Returns**: [`StateVector`](#StateVector)\nA state vector in the orientation specified by `rotation`.\n\n---\n\n<a name=\"RotateVector\"></a>\n### RotateVector(rotation: [`RotationMatrix`](#RotationMatrix), vector: [`Vector`](#Vector)) &#8594; [`Vector`](#Vector)\n\n**Applies a rotation to a vector, yielding a rotated vector.**\n\nThis function transforms a vector in one orientation to a vector\nin another orientation.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`RotationMatrix`](#RotationMatrix) | `rotation` | A rotation matrix that specifies how the orientation of the vector is to be changed. |\n| [`Vector`](#Vector) | `vector` | The vector whose orientation is to be changed. |\n\n**Returns**: [`Vector`](#Vector)\nA vector in the orientation specified by `rotation`.\n\n---\n\n<a name=\"RotationAxis\"></a>\n### RotationAxis(body: [`Body`](#Body), time: [`Time`](#Time)) &#8594; [`AxisInfo`](#AxisInfo)\n\n**Calculates information about a body's rotation axis at a given time.**\n\nCalculates the orientation of a body's rotation axis, along with\nthe rotation angle of its prime meridian, at a given moment in time.\nThis function uses formulas standardized by the IAU Working Group\non Cartographics and Rotational Elements 2015 report, as described\nin the following document:\nhttps://astropedia.astrogeology.usgs.gov/download/Docs/WGCCRE/WGCCRE2015reprint.pdf\nSee [`AxisInfo`](#AxisInfo) for more detailed information.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | One of the following values: `Body.Sun`, `Body.Moon`, `Body.Mercury`, `Body.Venus`, `Body.Earth`, `Body.Mars`, `Body.Jupiter`, `Body.Saturn`, `Body.Uranus`, `Body.Neptune`, `Body.Pluto`. |\n| [`Time`](#Time) | `time` | The time at which to calculate the body's rotation axis. |\n\n**Returns**: [`AxisInfo`](#AxisInfo)\nThe body's north pole direction and angle of its prime meridian.\n\n---\n\n<a name=\"Rotation_ECL_EQD\"></a>\n### Rotation_ECL_EQD(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean ecliptic (ECL) to equatorial of-date (EQD).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: ECL = ecliptic system, using equator at J2000 epoch.\nTarget: EQD = equatorial system, using equator of date.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the desired equator. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts ECL to EQD.\n\n---\n\n<a name=\"Rotation_ECL_EQJ\"></a>\n### Rotation_ECL_EQJ() &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean ecliptic (ECL) to J2000 mean equator (EQJ).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: ECL = ecliptic system, using equator at J2000 epoch.\nTarget: EQJ = equatorial system, using equator at J2000 epoch.\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts ECL to EQJ.\n\n---\n\n<a name=\"Rotation_ECL_HOR\"></a>\n### Rotation_ECL_HOR(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean ecliptic (ECL) to horizontal (HOR).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: ECL = ecliptic system, using equator at J2000 epoch.\nTarget: HOR = horizontal system.\nUse [`HorizonFromVector`](#HorizonFromVector) to convert the return value\nto a traditional altitude/azimuth pair.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the desired horizontal orientation. |\n| [`Observer`](#Observer) | `observer` | A location near the Earth's mean sea level that defines the observer's horizon. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts ECL to HOR at `time` and for `observer`.\nThe components of the horizontal vector are:\nx = north, y = west, z = zenith (straight up from the observer).\nThese components are chosen so that the \"right-hand rule\" works for the vector\nand so that north represents the direction where azimuth = 0.\n\n---\n\n<a name=\"Rotation_ECT_EQD\"></a>\n### Rotation_ECT_EQD(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from true ecliptic of date (ECT) to equator of date (EQD).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: ECT = true ecliptic of date.\nTarget: EQD = equator of date.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the ecliptic/equator conversion. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts ECT to EQD.\n\n---\n\n<a name=\"Rotation_ECT_EQJ\"></a>\n### Rotation_ECT_EQJ(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from true ecliptic of date (ECT) to J2000 mean equator (EQJ).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: ECT = ecliptic system, using true equinox of the specified date/time.\nTarget: EQJ = equatorial system, using equator at J2000 epoch.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator defines the target orientation. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts ECT to EQJ at `time`.\n\n---\n\n<a name=\"Rotation_EQD_ECL\"></a>\n### Rotation_EQD_ECL(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from equatorial of-date (EQD) to J2000 mean ecliptic (ECL).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQD = equatorial system, using equator of date.\nTarget: ECL = ecliptic system, using equator at J2000 epoch.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the source equator. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQD to ECL.\n\n---\n\n<a name=\"Rotation_EQD_ECT\"></a>\n### Rotation_EQD_ECT(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from equator of date (EQD) to true ecliptic of date (ECT).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQD = equator of date.\nTarget: ECT = true ecliptic of date.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the equator/ecliptic conversion. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQD to ECT.\n\n---\n\n<a name=\"Rotation_EQD_EQJ\"></a>\n### Rotation_EQD_EQJ(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from equatorial of-date (EQD) to J2000 mean equator (EQJ).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQD = equatorial system, using equator of the specified date/time.\nTarget: EQJ = equatorial system, using equator at J2000 epoch.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator defines the source orientation. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQD at `time` to EQJ.\n\n---\n\n<a name=\"Rotation_EQD_HOR\"></a>\n### Rotation_EQD_HOR(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from equatorial of-date (EQD) to horizontal (HOR).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQD = equatorial system, using equator of the specified date/time.\nTarget: HOR = horizontal system.\nUse [`HorizonFromVector`](#HorizonFromVector) to convert the return value\nto a traditional altitude/azimuth pair.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator applies. |\n| [`Observer`](#Observer) | `observer` | A location near the Earth's mean sea level that defines the observer's location. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQD to HOR at `time` and for `observer`.\nThe components of the horizontal vector are:\nx = north, y = west, z = zenith (straight up from the observer).\nThese components are chosen so that the \"right-hand rule\" works for the vector\nand so that north represents the direction where azimuth = 0.\n\n---\n\n<a name=\"Rotation_EQJ_ECL\"></a>\n### Rotation_EQJ_ECL() &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean equator (EQJ) to J2000 mean ecliptic (ECL).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQJ = equatorial system, using equator at J2000 epoch.\nTarget: ECL = ecliptic system, using equator at J2000 epoch.\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQJ to ECL.\n\n---\n\n<a name=\"Rotation_EQJ_ECT\"></a>\n### Rotation_EQJ_ECT(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean equator (EQJ) to true ecliptic of date (ECT).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQJ = equatorial system, using equator at J2000 epoch.\nTarget: ECT = ecliptic system, using true equinox of the specified date/time.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator defines the target orientation. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQJ to ECT at `time`.\n\n---\n\n<a name=\"Rotation_EQJ_EQD\"></a>\n### Rotation_EQJ_EQD(time: [`Time`](#Time)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean equator (EQJ) to equatorial of-date (EQD).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQJ = equatorial system, using equator at J2000 epoch.\nTarget: EQD = equatorial system, using equator of the specified date/time.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator defines the target orientation. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQJ to EQD at `time`.\n\n---\n\n<a name=\"Rotation_EQJ_GAL\"></a>\n### Rotation_EQJ_GAL() &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean equator (EQJ) to galactic (GAL).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQJ = equatorial system, using the equator at the J2000 epoch.\nTarget: GAL = galactic system (IAU 1958 definition).\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQJ to GAL.\n\n---\n\n<a name=\"Rotation_EQJ_HOR\"></a>\n### Rotation_EQJ_HOR(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from J2000 mean equator (EQJ) to horizontal (HOR).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: EQJ = equatorial system, using the equator at the J2000 epoch.\nTarget: HOR = horizontal system.\nUse [`HorizonFromVector`](#HorizonFromVector) to convert the return value to\na traditional altitude/azimuth pair.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the desired horizontal orientation. |\n| [`Observer`](#Observer) | `observer` | A location near the Earth's mean sea level that defines the observer's horizon. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts EQJ to HOR at `time` and for `observer`.\nThe components of the horizontal vector are:\nx = north, y = west, z = zenith (straight up from the observer).\nThese components are chosen so that the \"right-hand rule\" works for the vector\nand so that north represents the direction where azimuth = 0.\n\n---\n\n<a name=\"Rotation_GAL_EQJ\"></a>\n### Rotation_GAL_EQJ() &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from galactic (GAL) to J2000 mean equator (EQJ).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: GAL = galactic system (IAU 1958 definition).\nTarget: EQJ = equatorial system, using the equator at the J2000 epoch.\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts GAL to EQJ.\n\n---\n\n<a name=\"Rotation_HOR_ECL\"></a>\n### Rotation_HOR_ECL(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from horizontal (HOR) to J2000 mean ecliptic (ECL).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: HOR = horizontal system.\nTarget: ECL = ecliptic system, using equator at J2000 epoch.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the horizontal observation. |\n| [`Observer`](#Observer) | `observer` | The location of the horizontal observer. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts HOR to ECL.\n\n---\n\n<a name=\"Rotation_HOR_EQD\"></a>\n### Rotation_HOR_EQD(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from horizontal (HOR) to equatorial of-date (EQD).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: HOR = horizontal system (x=North, y=West, z=Zenith).\nTarget: EQD = equatorial system, using equator of the specified date/time.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time at which the Earth's equator applies. |\n| [`Observer`](#Observer) | `observer` | A location near the Earth's mean sea level that defines the observer's horizon. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts HOR to EQD at `time` and for `observer`.\n\n---\n\n<a name=\"Rotation_HOR_EQJ\"></a>\n### Rotation_HOR_EQJ(time: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`RotationMatrix`](#RotationMatrix)\n\n**Calculates a rotation matrix from horizontal (HOR) to J2000 equatorial (EQJ).**\n\nThis is one of the family of functions that returns a rotation matrix\nfor converting from one orientation to another.\nSource: HOR = horizontal system (x=North, y=West, z=Zenith).\nTarget: EQJ = equatorial system, using equator at the J2000 epoch.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time of the observation. |\n| [`Observer`](#Observer) | `observer` | A location near the Earth's mean sea level that define's the observer's horizon. |\n\n**Returns**: [`RotationMatrix`](#RotationMatrix)\nA rotation matrix that converts HOR to EQJ at `time` and for `observer`.\n\n---\n\n<a name=\"Search\"></a>\n### Search(func: Callable\\[\\[Any, [`Time`](#Time)\\], float\\], context: object, t1: [`Time`](#Time), t2: [`Time`](#Time), dt_tolerance_seconds: float) &#8594; Optional\\[[`Time`](#Time)\\]\n\n**Searches for a time at which a function's value increases through zero.**\n\nCertain astronomy calculations involve finding a time when an event occurs.\nOften such events can be defined as the root of a function:\nthe time at which the function's value becomes zero.\n`Search` finds the *ascending root* of a function: the time at which\nthe function's value becomes zero while having a positive slope. That is, as time increases,\nthe function transitions from a negative value, through zero at a specific moment,\nto a positive value later. The goal of the search is to find that specific moment.\nThe search function is specified by two parameters: `func` and `context`.\nThe `func` parameter is a function itself that accepts a time\nand a context containing any other arguments needed to evaluate the function.\nThe `context` parameter supplies that context for the given search.\nAs an example, a caller may wish to find the moment a celestial body reaches a certain\necliptic longitude. In that case, the caller might create a type (class, tuple, whatever)\nthat contains a [`Body`](#Body) member to specify the body and a numeric value to hold the target longitude.\nA different function might use a completely different context type.\nEvery time it is called, `func` returns a `float` value or it raises an exception.\nIf `func` raises an exception, the search immediately fails and the exception is\npropagated back to the caller.\nOtherwise, the search proceeds until it either finds the ascending root or fails for some reason.\nThe search calls `func` repeatedly to rapidly narrow in on any ascending\nroot within the time window specified by `t1` and `t2`. The search never\nreports a solution outside this time window.\n`Search` uses a combination of bisection and quadratic interpolation\nto minimize the number of function calls. However, it is critical that the\nsupplied time window be small enough that there cannot be more than one root\n(ascedning or descending) within it; otherwise the search can fail.\nBeyond that, it helps to make the time window as small as possible, ideally\nsuch that the function itself resembles a smooth parabolic curve within that window.\nIf an ascending root is not found, or more than one root\n(ascending and/or descending) exists within the window `t1`..`t2`,\n`Search` will return `None` to indicate a normal search failure.\nIf the search does not converge within 20 iterations, it will raise\nan [`Error`](#Error) exception.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `function(context, Time)` | `func` | A function that takes an arbitrary context parameter and a [`Time`](#Time) parameter. Returns a float value.  See remarks above for more details. |\n| `object` | `context` | An arbitrary data structure needed to be passed to the function `func` every time it is called. |\n| `float` | `t1` | The lower time bound of the search window. See remarks above for more details. |\n| `float` | `t2` | The upper time bound of the search window. See remarks above for more details. |\n| `float` | `dt_tolerance_seconds` | Specifies an amount of time in seconds within which a bounded ascending root is considered accurate enough to stop. A typical value is 1 second. |\n\n**Returns**: [`Time`](#Time) or `None`\nIf the search is successful, returns a #Time object that is within\n`dt_tolerance_seconds` of an ascending root.\nIn this case, the returned time value will always be within the\ninclusive range [`t1`, `t2`].\nIf there is no ascending root, or there is more than one ascending root,\nthe function returns `None`.\n\n---\n\n<a name=\"SearchAltitude\"></a>\n### SearchAltitude(body: [`Body`](#Body), observer: [`Observer`](#Observer), direction: [`Direction`](#Direction), startTime: [`Time`](#Time), limitDays: float, altitude: float) &#8594; Optional\\[[`Time`](#Time)\\]\n\n**Finds the next time the center of a body passes through a given altitude.**\n\nFinds when the center of the given body ascends or descends through a given\naltitude angle, as seen by an observer at the specified location on the Earth.\nBy using the appropriate combination of `direction` and `altitude` parameters,\nthis function can be used to find when civil, nautical, or astronomical twilight\nbegins (dawn) or ends (dusk).\nCivil dawn begins before sunrise when the Sun ascends through 6 degrees below\nthe horizon. To find civil dawn, pass `Direction.Rise` for `direction` and -6 for `altitude`.\nCivil dusk ends after sunset when the Sun descends through 6 degrees below the horizon.\nTo find civil dusk, pass `Direction.Set` for `direction` and -6 for `altitude`.\nNautical twilight is similar to civil twilight, only the `altitude` value should be -12 degrees.\nAstronomical twilight uses -18 degrees as the `altitude` value.\nBy convention for twilight time calculations, the altitude is not corrected for\natmospheric refraction. This is because the target altitudes are below the horizon,\nand refraction is not directly observable.\n`SearchAltitude` is not intended to find rise/set times of a body for two reasons:\n(1) Rise/set times of the Sun or Moon are defined by their topmost visible portion, not their centers.\n(2) Rise/set times are affected significantly by atmospheric refraction.\nTherefore, it is better to use [`SearchRiseSet`](#SearchRiseSet) to find rise/set times, which\ncorrects for both of these considerations.\n`SearchAltitude` will not work reliably for altitudes at or near the body's\nmaximum or minimum altitudes. To find the time a body reaches minimum or maximum altitude\nangles, use [`SearchHourAngle`](#SearchHourAngle).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The Sun, Moon, any planet other than the Earth, or a user-defined star that was created by a call to [`DefineStar`](#DefineStar). |\n| [`Observer`](#Observer) | `observer` | The location where observation takes place. |\n| [`Direction`](#Direction) | `direction` | Either `Direction.Rise` to find an ascending altitude event or `Direction.Set` to find a descending altitude event. |\n| [`Time`](#Time) | `startTime` | The date and time at which to start the search. |\n| `float` | `limitDays` | Limits how many days to search for the body reaching the altitude angle, and defines the direction in time to search. When `limitDays` is positive, the search is performed into the future, after `startTime`. When negative, the search is performed into the past, before `startTime`. To limit the search to the same day, you can use a value of 1 day. In cases where you want to find the altitude event no matter how far in the future (for example, for an observer near the south pole), you can pass in a larger value like 365. |\n| `float` | `altitude` | The desired altitude angle of the body's center above (positive) or below (negative) the observer's local horizon, expressed in degrees. Must be in the range [-90, +90]. |\n\n**Returns**: [`Time`](#Time) or `None`\nIf the altitude event time is found within the specified time window,\nthis function returns that time. Otherwise, it returns `None`.\n\n---\n\n<a name=\"SearchGlobalSolarEclipse\"></a>\n### SearchGlobalSolarEclipse(startTime: [`Time`](#Time)) &#8594; [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo)\n\n**Searches for a solar eclipse visible anywhere on the Earth's surface.**\n\nThis function finds the first solar eclipse that occurs after `startTime`.\nA solar eclipse may be partial, annular, or total.\nSee [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo) for more information.\nTo find a series of solar eclipses, call this function once,\nthen keep calling [`NextGlobalSolarEclipse`](#NextGlobalSolarEclipse) as many times as desired,\npassing in the `peak` value returned from the previous call.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for a solar eclipse. |\n\n**Returns**: [`GlobalSolarEclipseInfo`](#GlobalSolarEclipseInfo)\n\n---\n\n<a name=\"SearchHourAngle\"></a>\n### SearchHourAngle(body: [`Body`](#Body), observer: [`Observer`](#Observer), hourAngle: float, startTime: [`Time`](#Time), direction: int = 1) &#8594; [`HourAngleEvent`](#HourAngleEvent)\n\n**Searches for the time when the center of a body reaches a specified hour angle as seen by an observer on the Earth.**\n\nThe *hour angle* of a celestial body indicates its position in the sky with respect\nto the Earth's rotation. The hour angle depends on the location of the observer on the Earth.\nThe hour angle is 0 when the body's center reaches its highest angle above the horizon in a given day.\nThe hour angle increases by 1 unit for every sidereal hour that passes after that point, up\nto 24 sidereal hours when it reaches the highest point again. So the hour angle indicates\nthe number of hours that have passed since the most recent time that the body has culminated,\nor reached its highest point.\nThis function searches for the next time a celestial body reaches the given hour angle\nafter the date and time specified by `startTime`.\nTo find when a body culminates, pass 0 for `hourAngle`.\nTo find when a body reaches its lowest point in the sky, pass 12 for `hourAngle`.\nNote that, especially close to the Earth's poles, a body as seen on a given day\nmay always be above the horizon or always below the horizon, so the caller cannot\nassume that a culminating object is visible nor that an object is below the horizon\nat its minimum altitude.\nOn success, the function reports the date and time, along with the horizontal coordinates\nof the body at that time, as seen by the given observer.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The Sun, Moon, any planet other than the Earth, or a user-defined star that was created by a call to [`DefineStar`](#DefineStar). |\n| [`Observer`](#Observer) | `observer` | Indicates a location on or near the surface of the Earth where the observer is located. |\n| `float` | `hourAngle` | An hour angle value in the range [0.0, 24.0) indicating the number of sidereal hours after the body's most recent culmination. |\n| [`Time`](#Time) | `startTime` | The date and time at which to start the search. |\n| `int` | `direction` | The direction in time to perform the search: a positive value searches forward in time, a negative value searches backward in time. The function throws an exception if `direction` is zero. |\n\n**Returns**: [`HourAngleEvent`](#HourAngleEvent)\n\n---\n\n<a name=\"SearchLocalSolarEclipse\"></a>\n### SearchLocalSolarEclipse(startTime: [`Time`](#Time), observer: [`Observer`](#Observer)) &#8594; [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo)\n\nSearches for a solar eclipse visible at a specific location on the Earth's surface.\nThis function finds the first solar eclipse that occurs after `startTime`.\nA solar eclipse may be partial, annular, or total.\nSee [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo) for more information.\nTo find a series of solar eclipses, call this function once,\nthen keep calling [`NextLocalSolarEclipse`](#NextLocalSolarEclipse) as many times as desired,\npassing in the `peak` value returned from the previous call.\nIMPORTANT: An eclipse reported by this function might be partly or\ncompletely invisible to the observer due to the time of day.\nSee [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo) for more information about this topic.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for a solar eclipse. |\n| [`Observer`](#Observer) | `observer` | The geographic location of the observer. |\n\n**Returns**: [`LocalSolarEclipseInfo`](#LocalSolarEclipseInfo)\n\n---\n\n<a name=\"SearchLunarApsis\"></a>\n### SearchLunarApsis(startTime: [`Time`](#Time)) &#8594; [`Apsis`](#Apsis)\n\n**Finds the time of the first lunar apogee or perigee after the given time.**\n\nGiven a date and time to start the search in `startTime`, this function finds\nthe next date and time that the center of the Moon reaches the closest or\nfarthest point in its orbit with respect to the center of the Earth, whichever\ncomes first after `startTime`.  The return value (of type [`Apsis`](#Apsis)) also\ncontains an indicator of whether the event is apogee or perigee.\nThe closest point is called *perigee* and the farthest point is called *apogee*.\nThe word *apsis* refers to either event.\nTo iterate through consecutive alternating perigee and apogee events,\ncall [`SearchLunarApsis`](#SearchLunarApsis) once, then use the return value to call [`NextLunarApsis`](#NextLunarApsis).\nAfter that, keep feeding the previous return value from `NextLunarApsis` into\nanother call of `NextLunarApsis` as many times as desired.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time at which to start searching for the next perigee or apogee. |\n\n**Returns**: [`Apsis`](#Apsis)\n\n---\n\n<a name=\"SearchLunarEclipse\"></a>\n### SearchLunarEclipse(startTime: [`Time`](#Time)) &#8594; [`LunarEclipseInfo`](#LunarEclipseInfo)\n\n**Searches for a lunar eclipse.**\n\nThis function finds the first lunar eclipse that occurs after `startTime`.\nA lunar eclipse may be penumbral, partial, or total.\nSee [`LunarEclipseInfo`](#LunarEclipseInfo) for more information.\nTo find a series of lunar eclipses, call this function once,\nthen keep calling [`NextLunarEclipse`](#NextLunarEclipse) as many times as desired,\npassing in the `peak` value returned from the previous call.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for a lunar eclipse. |\n\n**Returns**: [`LunarEclipseInfo`](#LunarEclipseInfo)\n\n---\n\n<a name=\"SearchMaxElongation\"></a>\n### SearchMaxElongation(body: [`Body`](#Body), startTime: [`Time`](#Time)) &#8594; Optional\\[[`ElongationEvent`](#ElongationEvent)\\]\n\n**Finds a date and time when Mercury or Venus reaches its maximum angle from the Sun as seen from the Earth.**\n\nMercury and Venus are are often difficult to observe because they are closer to the Sun than the Earth is.\nMercury especially is almost always impossible to see because it gets lost in the Sun's glare.\nThe best opportunities for spotting Mercury, and the best opportunities for viewing Venus through\na telescope without atmospheric interference, are when these planets reach maximum elongation.\nThese are events where the planets reach the maximum angle from the Sun as seen from the Earth.\nThis function solves for those times, reporting the next maximum elongation event's date and time,\nthe elongation value itself, the relative longitude with the Sun, and whether the planet is best\nobserved in the morning or evening. See [`ElongationEvent`](#ElongationEvent) for more details about the returned object.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | Either `Body.Mercury` or `Body.Venus`. Any other value will result in an exception. To find the best viewing opportunities for planets farther from the Sun than the Earth is (Mars through Pluto), use [`SearchRelativeLongitude`](#SearchRelativeLongitude) to find the next opposition event. |\n| [`Time`](#Time) | `startTime` | The date and time at which to begin the search. The maximum elongation event found will always be the first one that occurs after this date and time. |\n\n**Returns**: [`ElongationEvent`](#ElongationEvent)\n\n---\n\n<a name=\"SearchMoonNode\"></a>\n### SearchMoonNode(startTime: [`Time`](#Time)) &#8594; [`NodeEventInfo`](#NodeEventInfo)\n\n**Searches for a time when the Moon's center crosses through the ecliptic plane.**\n\nSearches for the first ascending or descending node of the Moon after `startTime`.\nAn ascending node is when the Moon's center passes through the ecliptic plane\n(the plane of the Earth's orbit around the Sun) from south to north.\nA descending node is when the Moon's center passes through the ecliptic plane\nfrom north to south. Nodes indicate possible times of solar or lunar eclipses,\nif the Moon also happens to be in the correct phase (new or full, respectively).\nCall `SearchMoonNode` to find the first of a series of nodes.\nThen call [`NextMoonNode`](#NextMoonNode) to find as many more consecutive nodes as desired.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for an ascending or descending node of the Moon. |\n\n**Returns**: [`NodeEventInfo`](#NodeEventInfo)\n\n---\n\n<a name=\"SearchMoonPhase\"></a>\n### SearchMoonPhase(targetLon: float, startTime: [`Time`](#Time), limitDays: float) &#8594; Optional\\[[`Time`](#Time)\\]\n\n**Searches for the time that the Moon reaches a specified phase.**\n\nLunar phases are conventionally defined in terms of the Moon's geocentric ecliptic\nlongitude with respect to the Sun's geocentric ecliptic longitude.\nWhen the Moon and the Sun have the same longitude, that is defined as a new moon.\nWhen their longitudes are 180 degrees apart, that is defined as a full moon.\nThis function searches for any value of the lunar phase expressed as an\nangle in degrees in the range [0, 360).\nIf you want to iterate through lunar quarters (new moon, first quarter, full moon, third quarter)\nit is much easier to call the functions [`SearchMoonQuarter`](#SearchMoonQuarter) and [`NextMoonQuarter`](#NextMoonQuarter).\nThis function is useful for finding general phase angles outside those four quarters.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `targetLon` | The difference in geocentric longitude between the Sun and Moon that specifies the lunar phase being sought. This can be any value in the range [0, 360).  Certain values have conventional names: 0 = new moon, 90 = first quarter, 180 = full moon, 270 = third quarter. |\n| [`Time`](#Time) | `startTime` | The beginning of the time window in which to search for the Moon reaching the specified phase. |\n| `float` | `limitDays` | The number of days away from `startTime` that limits the time window for the search. If the value is negative, the search is performed into the past from `startTime`. Otherwise, the search is performed into the future from `startTime`. |\n\n**Returns**: [`Time`](#Time) or `None`\n\n---\n\n<a name=\"SearchMoonQuarter\"></a>\n### SearchMoonQuarter(startTime: [`Time`](#Time)) &#8594; [`MoonQuarter`](#MoonQuarter)\n\n**Finds the first lunar quarter after the specified date and time.**\n\nA lunar quarter is one of the following four lunar phase events:\nnew moon, first quarter, full moon, third quarter.\nThis function finds the lunar quarter that happens soonest\nafter the specified date and time.\nTo continue iterating through consecutive lunar quarters, call this function once,\nfollowed by calls to [`NextMoonQuarter`](#NextMoonQuarter) as many times as desired.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `startTime` | The date and time at which to start the search. |\n\n**Returns**: [`MoonQuarter`](#MoonQuarter)\n\n---\n\n<a name=\"SearchPeakMagnitude\"></a>\n### SearchPeakMagnitude(body: [`Body`](#Body), startTime: [`Time`](#Time)) &#8594; [`IlluminationInfo`](#IlluminationInfo)\n\n**Searches for the date and time Venus will next appear brightest as seen from the Earth.**\n\nThis function searches for the date and time Venus appears brightest as seen from the Earth.\nCurrently only Venus is supported for the `body` parameter, though this could change in the future.\nMercury's peak magnitude occurs at superior conjunction, when it is virtually impossible to see\nfrom the Earth, so peak magnitude events have little practical value for that planet.\nPlanets other than Venus and Mercury reach peak magnitude at opposition, which can\nbe found using [`SearchRelativeLongitude`](#SearchRelativeLongitude).\nThe Moon reaches peak magnitude at full moon, which can be found using\n[`SearchMoonQuarter`](#SearchMoonQuarter) or [`SearchMoonPhase`](#SearchMoonPhase).\nThe Sun reaches peak magnitude at perihelion, which occurs each year in January.\nHowever, the difference is minor and has little practical value.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | Currently only `Body.Venus` is allowed. Any other value results in an exception. See remarks above for more details. |\n| [`Time`](#Time) | `startTime` | The date and time to start searching for the next peak magnitude event. |\n\n**Returns**: [`IlluminationInfo`](#IlluminationInfo)\n\n---\n\n<a name=\"SearchPlanetApsis\"></a>\n### SearchPlanetApsis(body: [`Body`](#Body), startTime: [`Time`](#Time)) &#8594; [`Apsis`](#Apsis)\n\n**Finds the next planet perihelion or aphelion, after a given time.**\n\nGiven a date and time to start the search in `startTime`, this function finds the\nnext date and time that the center of the specified planet reaches the closest or farthest point\nin its orbit with respect to the center of the Sun, whichever comes first after `startTime`.\nThe closest point is called *perihelion* and the farthest point is called *aphelion*.\nThe word *apsis* refers to either event.\nTo iterate through consecutive alternating perihelion and aphelion events,\ncall `SearchPlanetApsis` once, then use the return value to call [`NextPlanetApsis`](#NextPlanetApsis).\nAfter that, keep feeding the previous return value from `NextPlanetApsis`\ninto another call of `NextPlanetApsis` as many times as desired.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The planet for which to find the next perihelion/aphelion event. Not allowed to be `Body.Sun` or `Body.Moon`. |\n| [`Time`](#Time) | `startTime` | The date and time at which to start searching for the next perihelion or aphelion. |\n\n**Returns**: [`Apsis`](#Apsis)\n\n---\n\n<a name=\"SearchRelativeLongitude\"></a>\n### SearchRelativeLongitude(body: [`Body`](#Body), targetRelLon: float, startTime: [`Time`](#Time)) &#8594; [`Time`](#Time)\n\n**Searches for when the Earth and another planet are separated by a certain ecliptic longitude.**\n\nSearches for the time when the Earth and another planet are separated by a specified angle\nin ecliptic longitude, as seen from the Sun.\nA relative longitude is the angle between two bodies measured in the plane of the\nEarth's orbit (the ecliptic plane). The distance of the bodies above or below the ecliptic\nplane is ignored. If you imagine the shadow of the body cast onto the ecliptic plane,\nand the angle measured around that plane from one body to the other in the direction\nthe planets orbit the Sun, you will get an angle somewhere between 0 and 360 degrees.\nThis is the relative longitude.\nGiven a planet other than the Earth in `body` and a time to start the search in `startTime`,\nthis function searches for the next time that the relative longitude measured from the\nplanet to the Earth is `targetRelLon`.\nCertain astronomical events are defined in terms of relative longitude between\nthe Earth and another planet:\n- When the relative longitude is 0 degrees, it means both planets are in the same\n  direction from the Sun. For planets that orbit closer to the Sun (Mercury and Venus),\n  this is known as *inferior conjunction*, a time when the other planet becomes very\n  difficult to see because of being lost in the Sun's glare.\n  (The only exception is in the rare event of a transit, when we see the silhouette\n  of the planet passing between the Earth and the Sun.)\n- When the relative longitude is 0 degrees and the other planet orbits farther from the Sun,\n  this is known as *opposition*. Opposition is when the planet is closest to the Earth,\n  and also when it is visible for most of the night, so it is considered the best time\n  to observe the planet.\n- When the relative longitude is 180 degrees, it means the other planet is on the opposite\n  side of the Sun from the Earth.  This is called *superior conjunction*.  Like inferior\n  conjunction, the planet is very difficult to see from the Earth.\n  Superior conjunction is possible for any planet other than the Earth.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | A planet other than the Earth. If `body` is not a planet, or if it is `Body.Earth`, an error occurs. |\n| `float` | `targetRelLon` | The desired relative longitude, expressed in degrees. Must be in the range [0, 360). |\n| [`Time`](#Time) | `startTime` | The date and time at which to begin the search. |\n\n**Returns**: [`Time`](#Time)\nThe date and time of the relative longitude event.\n\n---\n\n<a name=\"SearchRiseSet\"></a>\n### SearchRiseSet(body: [`Body`](#Body), observer: [`Observer`](#Observer), direction: [`Direction`](#Direction), startTime: [`Time`](#Time), limitDays: float, metersAboveGround: float = 0.0) &#8594; Optional\\[[`Time`](#Time)\\]\n\n**Searches for the next time a celestial body rises or sets as seen by an observer on the Earth.**\n\nThis function finds the next rise or set time of the Sun, Moon, or planet other than the Earth.\nRise time is when the body first starts to be visible above the horizon.\nFor example, sunrise is the moment that the top of the Sun first appears to peek above the horizon.\nSet time is the moment when the body appears to vanish below the horizon.\nTherefore, this function adjusts for the apparent angular radius of the observed body\n(significant only for the Sun and Moon).\nThis function corrects for typical atmospheric refraction, which causes celestial\nbodies to appear higher above the horizon than they would if the Earth had no atmosphere.\nIt also adjusts for the apparent angular radius of the observed body (significant only for the Sun and Moon).\nAstronomy Engine uses a correction of 34 arcminutes. Real-world refraction varies based\non air temperature, pressure, and humidity; such weather-based conditions are outside\nthe scope of Astronomy Engine.\nNote that rise or set may not occur in every 24 hour period.\nFor example, near the Earth's poles, there are long periods of time where\nthe Sun stays below the horizon, never rising.\nAlso, it is possible for the Moon to rise just before midnight but not set during the subsequent 24-hour day.\nThis is because the Moon sets nearly an hour later each day due to orbiting the Earth a\nsignificant amount during each rotation of the Earth.\nTherefore callers must not assume that the function will always succeed.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The Sun, Moon, any planet other than the Earth, or a user-defined star that was created by a call to [`DefineStar`](#DefineStar). |\n| [`Observer`](#Observer) | `observer` | The location where observation takes place. |\n| [`Direction`](#Direction) | `direction` | Either `Direction.Rise` to find a rise time or `Direction.Set` to find a set time. |\n| [`Time`](#Time) | `startTime` | The date and time at which to start the search. |\n| `float` | `limitDays` | Limits how many days to search for a rise or set time, and defines the direction in time to search. When `limitDays` is positive, the search is performed into the future, after `startTime`. When negative, the search is performed into the past, before `startTime`. To limit a rise or set time to the same day, you can use a value of 1 day. In cases where you want to find the next rise or set time no matter how far in the future (for example, for an observer near the south pole), you can pass in a larger value like 365. |\n| `float` | `metersAboveGround` | Default value = 0.0. Usually the observer is located at ground level. Then this parameter should be zero. But if the observer is significantly higher than ground level, for example in an airplane, this parameter should be a positive number indicating how far above the ground the observer is. An exception occurs if `metersAboveGround` is negative. |\n\n**Returns**: [`Time`](#Time) or `None`\nIf the rise or set time is found within the specified time window,\nthis function returns that time. Otherwise, it returns `None`.\n\n---\n\n<a name=\"SearchSunLongitude\"></a>\n### SearchSunLongitude(targetLon: float, startTime: [`Time`](#Time), limitDays: float) &#8594; Optional\\[[`Time`](#Time)\\]\n\n**Searches for the time when the Sun reaches an apparent ecliptic longitude as seen from the Earth.**\n\nThis function finds the moment in time, if any exists in the given time window,\nthat the center of the Sun reaches a specific ecliptic longitude as seen from the center of the Earth.\nThis function can be used to determine equinoxes and solstices.\nHowever, it is usually more convenient and efficient to call [`Seasons`](#Seasons)\nto calculate all equinoxes and solstices for a given calendar year.\nThe function searches the window of time specified by `startTime` and `startTime+limitDays`.\nThe search will return `None` if the Sun never reaches the longitude `targetLon` or\nif the window is so large that the longitude ranges more than 180 degrees within it.\nIt is recommended to keep the window smaller than 10 days when possible.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `float` | `targetLon` | The desired ecliptic longitude in degrees, relative to the true equinox of date. This may be any value in the range [0, 360), although certain values have conventional meanings: 0 = March equinox, 90 = June solstice, 180 = September equinox, 270 = December solstice. |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for the desired longitude event. |\n| `float` | `limitDays` | The real-valued number of days, which when added to `startTime`, limits the range of time over which the search looks. It is recommended to keep this value between 1 and 10 days. See remarks above for more details. |\n\n**Returns**: [`Time`](#Time) or `None`\n\n---\n\n<a name=\"SearchTransit\"></a>\n### SearchTransit(body: [`Body`](#Body), startTime: [`Time`](#Time)) &#8594; [`TransitInfo`](#TransitInfo)\n\n**Searches for the first transit of Mercury or Venus after a given date.**\n\nFinds the first transit of Mercury or Venus after a specified date.\nA transit is when an inferior planet passes between the Sun and the Earth\nso that the silhouette of the planet is visible against the Sun in the background.\nTo continue the search, pass the `finish` time in the returned structure to\n[`NextTransit`](#NextTransit).\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Body`](#Body) | `body` | The planet whose transit is to be found. Must be `Body.Mercury` or `Body.Venus`. |\n| [`Time`](#Time) | `startTime` | The date and time for starting the search for a transit. |\n\n**Returns**: [`TransitInfo`](#TransitInfo)\n\n---\n\n<a name=\"Seasons\"></a>\n### Seasons(year: int) &#8594; [`SeasonInfo`](#SeasonInfo)\n\n**Finds both equinoxes and both solstices for a given calendar year.**\n\nThe changes of seasons are defined by solstices and equinoxes.\nGiven a calendar year number, this function calculates the\nMarch and September equinoxes and the June and December solstices.\nThe equinoxes are the moments twice each year when the plane of the\nEarth's equator passes through the center of the Sun. In other words,\nthe Sun's declination is zero at both equinoxes.\nThe March equinox defines the beginning of spring in the northern hemisphere\nand the beginning of autumn in the southern hemisphere.\nThe September equinox defines the beginning of autumn in the northern hemisphere\nand the beginning of spring in the southern hemisphere.\nThe solstices are the moments twice each year when one of the Earth's poles\nis most tilted toward the Sun. More precisely, the Sun's declination reaches\nits minimum value at the December solstice, which defines the beginning of\nwinter in the northern hemisphere and the beginning of summer in the southern\nhemisphere. The Sun's declination reaches its maximum value at the June solstice,\nwhich defines the beginning of summer in the northern hemisphere and the beginning\nof winter in the southern hemisphere.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| `int` | `year` | The calendar year number for which to calculate equinoxes and solstices. The value may be any integer, but only the years 1800 through 2100 have been validated for accuracy: unit testing against data from the United States Naval Observatory confirms that all equinoxes and solstices for that range of years are within 2 minutes of the correct time. |\n\n**Returns**: [`SeasonInfo`](#SeasonInfo)\n\n---\n\n<a name=\"SiderealTime\"></a>\n### SiderealTime(time: [`Time`](#Time)) &#8594; float\n\n**Calculates Greenwich Apparent Sidereal Time (GAST).**\n\nGiven a date and time, this function calculates the rotation of the\nEarth, represented by the equatorial angle of the Greenwich prime meridian\nwith respect to distant stars (not the Sun, which moves relative to background\nstars by almost one degree per day).\nThis angle is called Greenwich Apparent Sidereal Time (GAST).\nGAST is measured in sidereal hours in the half-open range [0, 24).\nWhen GAST = 0, it means the prime meridian is aligned with the of-date equinox,\ncorrected at that time for precession and nutation of the Earth's axis.\nIn this context, the \"equinox\" is the direction in space where the Earth's\norbital plane (the ecliptic) intersects with the plane of the Earth's equator,\nat the location on the Earth's orbit of the (seasonal) March equinox.\nAs the Earth rotates, GAST increases from 0 up to 24 sidereal hours,\nthen starts over at 0.\nTo convert to degrees, multiply the return value by 15.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to find GAST. As an optimization, this function caches the sidereal time value in `time`, unless it has already been cached, in which case the cached value is reused. |\n\n**Returns**: `float`\nGAST expressed in sidereal hours.\n\n---\n\n<a name=\"SphereFromVector\"></a>\n### SphereFromVector(vector: [`Vector`](#Vector)) &#8594; [`Spherical`](#Spherical)\n\n**Converts Cartesian coordinates to spherical coordinates.**\n\nGiven a Cartesian vector, returns latitude, longitude, and distance.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `vector` | Cartesian vector to be converted to spherical coordinates. |\n\n**Returns**: [`Spherical`](#Spherical)\nSpherical coordinates that are equivalent to the given vector.\n\n---\n\n<a name=\"SunPosition\"></a>\n### SunPosition(time: [`Time`](#Time)) &#8594; [`EclipticCoordinates`](#EclipticCoordinates)\n\n**Calculates geocentric ecliptic coordinates for the Sun.**\n\nThis function calculates the position of the Sun as seen from the Earth.\nThe returned value includes both Cartesian and spherical coordinates.\nThe x-coordinate and longitude values in the returned object are based\non the *true equinox of date*: one of two points in the sky where the instantaneous\nplane of the Earth's equator at the given date and time (the *equatorial plane*)\nintersects with the plane of the Earth's orbit around the Sun (the *ecliptic plane*).\nBy convention, the apparent location of the Sun at the March equinox is chosen\nas the longitude origin and x-axis direction, instead of the one for September.\n`SunPosition` corrects for precession and nutation of the Earth's axis\nin order to obtain the exact equatorial plane at the given time.\nThis function can be used for calculating changes of seasons: equinoxes and solstices.\nIn fact, the function [`Seasons`](#Seasons) does use this function for that purpose.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Time`](#Time) | `time` | The date and time for which to calculate the Sun's position. |\n\n**Returns**: [`EclipticCoordinates`](#EclipticCoordinates)\nThe ecliptic coordinates of the Sun using the Earth's true equator of date.\n\n---\n\n<a name=\"VectorFromHorizon\"></a>\n### VectorFromHorizon(sphere: [`Spherical`](#Spherical), time: [`Time`](#Time), refraction: [`Refraction`](#Refraction)) &#8594; [`Vector`](#Vector)\n\n**Given apparent angular horizontal coordinates in `sphere`, calculate horizontal vector.**\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Spherical`](#Spherical) | `sphere` | A structure that contains apparent horizontal coordinates: `lat` holds the refracted altitude angle, `lon` holds the azimuth in degrees clockwise from north, and `dist` holds the distance from the observer to the object in AU. |\n| [`Time`](#Time) | `time` | The date and time of the observation. This is needed because the returned vector object requires a valid time value when passed to certain other functions. |\n| [`Refraction`](#Refraction) | `refraction` | See remarks in function [`RefractionAngle`](#RefractionAngle). |\n\n**Returns**: [`Vector`](#Vector)\nA vector in the horizontal system: `x` = north, `y` = west, and `z` = zenith (up).\n\n---\n\n<a name=\"VectorFromSphere\"></a>\n### VectorFromSphere(sphere: [`Spherical`](#Spherical), time: [`Time`](#Time)) &#8594; [`Vector`](#Vector)\n\n**Converts spherical coordinates to Cartesian coordinates.**\n\nGiven spherical coordinates and a time at which they are valid,\nreturns a vector of Cartesian coordinates. The returned value\nincludes the time, as required by all `Time` objects.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Spherical`](#Spherical) | `sphere` | Spherical coordinates to be converted. |\n| [`Time`](#Time) | `time` | The time that should be included in the returned vector. |\n\n**Returns**: [`Vector`](#Vector)\nThe vector form of the supplied spherical coordinates.\n\n---\n\n<a name=\"VectorObserver\"></a>\n### VectorObserver(vector: [`Vector`](#Vector), ofdate: bool) &#8594; [`Observer`](#Observer)\n\n**Calculates the geographic location corresponding to an equatorial vector.**\n\nThis is the inverse function of [`ObserverVector`](#ObserverVector).\nGiven a geocentric equatorial vector, it returns the geographic\nlatitude, longitude, and elevation for that vector.\n\n| Type | Parameter | Description |\n| --- | --- | --- |\n| [`Vector`](#Vector) | `vector` | The geocentric equatorial position vector for which to find geographic coordinates. The components are expressed in astronomical units (AU). The time `vector.t` determines the Earth's rotation. |\n| `bool` | `ofdate` | Selects the date of the Earth's equator in which `vector` is expressed. The caller may pass `False` to use the orientation of the Earth's equator at noon UTC on January 1, 2000, in which case this function corrects for precession and nutation of the Earth as it was at the moment specified by the the time `vector.t`. Or the caller may pass `True` to use the Earth's equator at `vector.t` as the orientation. |\n\n**Returns**: [`Observer`](#Observer)\nThe geographic latitude, longitude, and elevation above sea level\nthat corresponds to the given equatorial vector.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cosinekitty/astronomy",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2019-2022 Don Cross <cosinekitty@gmail.com>  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "astronomy-engine",
    "package_url": "https://pypi.org/project/astronomy-engine/",
    "platform": null,
    "project_url": "https://pypi.org/project/astronomy-engine/",
    "project_urls": {
      "Homepage": "https://github.com/cosinekitty/astronomy"
    },
    "release_url": "https://pypi.org/project/astronomy-engine/2.1.17/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Astronomy calculation for Sun, Moon, and planets.",
    "version": "2.1.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17280555,
  "releases": {
    "2.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76134b4cd5fa8be2af90ba51a6d8a0ffd8450ff893ad2be3e2dfa090680e6640",
          "md5": "dd0bde86392673b708f3bb5d20055003",
          "sha256": "02363103f08206211bb78f1bce5b728e85681ba6b8a1da606ee5e692588d5d65"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd0bde86392673b708f3bb5d20055003",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32645,
        "upload_time": "2022-01-11T01:33:31",
        "upload_time_iso_8601": "2022-01-11T01:33:31.955840Z",
        "url": "https://files.pythonhosted.org/packages/76/13/4b4cd5fa8be2af90ba51a6d8a0ffd8450ff893ad2be3e2dfa090680e6640/astronomy_engine-2.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67375a52c3737a8cee9a86f22bfda6f15daa6a6736dd00ec607c3345d11e5e8b",
          "md5": "0be8f418c697986bb3a192092e59c27a",
          "sha256": "cc859886630cc7cfaca004251e3294c480461912dba9bc46b2a6ceb4169232d0"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "0be8f418c697986bb3a192092e59c27a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90277,
        "upload_time": "2022-01-11T01:33:36",
        "upload_time_iso_8601": "2022-01-11T01:33:36.446467Z",
        "url": "https://files.pythonhosted.org/packages/67/37/5a52c3737a8cee9a86f22bfda6f15daa6a6736dd00ec607c3345d11e5e8b/astronomy-engine-2.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d88abbd1bfe20b677664f9ed7c81ca621164a64950941fd716301411b59d21b",
          "md5": "15a27135f41ef1bd89d571b0c9c655a3",
          "sha256": "129b68afc72ff967f9c6cf59679c061ed5a6854bdce88442fb95d887be4001db"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15a27135f41ef1bd89d571b0c9c655a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33353,
        "upload_time": "2022-02-07T02:05:08",
        "upload_time_iso_8601": "2022-02-07T02:05:08.849670Z",
        "url": "https://files.pythonhosted.org/packages/2d/88/abbd1bfe20b677664f9ed7c81ca621164a64950941fd716301411b59d21b/astronomy_engine-2.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48ee2c74bff22490444b0fbae3c6de6118cfd4cad759207993c76fa44b302fec",
          "md5": "6b480f79571755857a32577a339a250d",
          "sha256": "5b4f5457cac23f0db3686f08868db3ee4039d39ba6a8168ace4c54ef2ca3497b"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "6b480f79571755857a32577a339a250d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92384,
        "upload_time": "2022-02-07T02:05:10",
        "upload_time_iso_8601": "2022-02-07T02:05:10.997779Z",
        "url": "https://files.pythonhosted.org/packages/48/ee/2c74bff22490444b0fbae3c6de6118cfd4cad759207993c76fa44b302fec/astronomy-engine-2.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f8ffdfd3daa231318668ba2f212b6bfe487c54e176ddbb365360f8efd8bdf21",
          "md5": "277f4e238e5d70780fca615d5dc44c2d",
          "sha256": "e507a0b52ddb8d831c8b27c2bc4e38f9863c9ba5e21d93ce88e012b6ae856f2a"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "277f4e238e5d70780fca615d5dc44c2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34587,
        "upload_time": "2022-03-14T08:40:34",
        "upload_time_iso_8601": "2022-03-14T08:40:34.514162Z",
        "url": "https://files.pythonhosted.org/packages/0f/8f/fdfd3daa231318668ba2f212b6bfe487c54e176ddbb365360f8efd8bdf21/astronomy_engine-2.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "095804109014dcb9072a65c96c1b876750d1bcd0dca9546d6e70bb19501f74c5",
          "md5": "ce282fda4b969617d9ff94aaee00adfc",
          "sha256": "61b3600f141da0aea9ed347bda407182983c06ecaac84210545b749020bf0171"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "ce282fda4b969617d9ff94aaee00adfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96091,
        "upload_time": "2022-03-14T08:40:37",
        "upload_time_iso_8601": "2022-03-14T08:40:37.448749Z",
        "url": "https://files.pythonhosted.org/packages/09/58/04109014dcb9072a65c96c1b876750d1bcd0dca9546d6e70bb19501f74c5/astronomy-engine-2.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9af559bc7d27dc082186759784ac3c92e6a61652c1f0a24dc961eb9d8877fac",
          "md5": "f05d56438cf6f819e8443cab678c5c81",
          "sha256": "5a388528d0f94b127be434ab5478812fe06a8fe67fd6484cb380dfc2a8d42bdc"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f05d56438cf6f819e8443cab678c5c81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34586,
        "upload_time": "2022-03-14T09:08:04",
        "upload_time_iso_8601": "2022-03-14T09:08:04.943890Z",
        "url": "https://files.pythonhosted.org/packages/e9/af/559bc7d27dc082186759784ac3c92e6a61652c1f0a24dc961eb9d8877fac/astronomy_engine-2.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "061b3d5407a0cc9408058d565032502e150a8d07ab06797b483cfb687ffa97a7",
          "md5": "365d55d3081deda422d86a7232f29056",
          "sha256": "f8e43416d71108f622e24d1677a8b7d5115017097b43d89e28ad518b6b7adaa7"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "365d55d3081deda422d86a7232f29056",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96090,
        "upload_time": "2022-03-14T09:08:07",
        "upload_time_iso_8601": "2022-03-14T09:08:07.476801Z",
        "url": "https://files.pythonhosted.org/packages/06/1b/3d5407a0cc9408058d565032502e150a8d07ab06797b483cfb687ffa97a7/astronomy-engine-2.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c11808e610b17adf9af4c5d57f7d31009cefdb45073377ff9dfbaf4f5fb90527",
          "md5": "098d45f7667be8257a38a1373ae207d5",
          "sha256": "6e673baf505fdff070b1640171c98321d4d9ac4470096149205d04bca29a17ee"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "098d45f7667be8257a38a1373ae207d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132516,
        "upload_time": "2022-03-20T15:29:17",
        "upload_time_iso_8601": "2022-03-20T15:29:17.720488Z",
        "url": "https://files.pythonhosted.org/packages/c1/18/08e610b17adf9af4c5d57f7d31009cefdb45073377ff9dfbaf4f5fb90527/astronomy_engine-2.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57b86a142c5f1e6cbe57410722b68a9d30e5b65a661bdc03e4a9dbe71093f80b",
          "md5": "8137f81180e3cc3db4dfcc51152ad4ca",
          "sha256": "0056764e7472dbd9982f5b7865b2fd5aec05b4915492435c24f5163b2a68a9fc"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "8137f81180e3cc3db4dfcc51152ad4ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 194017,
        "upload_time": "2022-03-20T15:29:27",
        "upload_time_iso_8601": "2022-03-20T15:29:27.033749Z",
        "url": "https://files.pythonhosted.org/packages/57/b8/6a142c5f1e6cbe57410722b68a9d30e5b65a661bdc03e4a9dbe71093f80b/astronomy-engine-2.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "025b1b90cdc8561038bda04245e2495314dfec3a5f8dd369d7679168c065178f",
          "md5": "44290c370165a929784de953012db423",
          "sha256": "f50fefff5ae33f9e3a6696189030be372f68c562e57ec316dc81e9a57d48a976"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44290c370165a929784de953012db423",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132348,
        "upload_time": "2022-03-20T17:36:47",
        "upload_time_iso_8601": "2022-03-20T17:36:47.269151Z",
        "url": "https://files.pythonhosted.org/packages/02/5b/1b90cdc8561038bda04245e2495314dfec3a5f8dd369d7679168c065178f/astronomy_engine-2.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a75f1516e6548ceea62ba7fe3fa12b2d47ab3ba219e3b5ee65fab744aa77e7c",
          "md5": "9c0e6a2212e5568183d17e613072223a",
          "sha256": "137e716f6be93b9f1e6895ec5fb382979500d4ad6fb5b8e47cd1041861ea9b97"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "9c0e6a2212e5568183d17e613072223a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 193984,
        "upload_time": "2022-03-20T17:36:49",
        "upload_time_iso_8601": "2022-03-20T17:36:49.730646Z",
        "url": "https://files.pythonhosted.org/packages/2a/75/f1516e6548ceea62ba7fe3fa12b2d47ab3ba219e3b5ee65fab744aa77e7c/astronomy-engine-2.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1b7301e4663366e8f86fc645d9a5c4cc614c1f737bab74c6b9c6aab54804b37",
          "md5": "1c02248d87d309fc3f11fa5c1e346611",
          "sha256": "e4e43b4088bde74451eba622ea6213079d6bbb8d6c4468da41f8408a38caaecf"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c02248d87d309fc3f11fa5c1e346611",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132665,
        "upload_time": "2022-03-20T18:16:41",
        "upload_time_iso_8601": "2022-03-20T18:16:41.286506Z",
        "url": "https://files.pythonhosted.org/packages/d1/b7/301e4663366e8f86fc645d9a5c4cc614c1f737bab74c6b9c6aab54804b37/astronomy_engine-2.0.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f71ffb31ef7dc64b0daf1a698e38d2791541938027794c9658d896a9fd73e2a5",
          "md5": "719072d07a1c8338a6c84afa2f23a8da",
          "sha256": "7cf3996c49c1bc963291548a8fd54d89a4e6784b80fae0ffc5b64926d2945113"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "719072d07a1c8338a6c84afa2f23a8da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 194092,
        "upload_time": "2022-03-20T18:16:44",
        "upload_time_iso_8601": "2022-03-20T18:16:44.672255Z",
        "url": "https://files.pythonhosted.org/packages/f7/1f/fb31ef7dc64b0daf1a698e38d2791541938027794c9658d896a9fd73e2a5/astronomy-engine-2.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a74d4662974d4bc910e961979396965448eeed8f5b7d67955f331d783836f862",
          "md5": "cef7cc8d5a3d037d4fd1e8d53822caba",
          "sha256": "adecda2f46b5c76e3b0bc89e3a73b7f9992473b9350c16fc09dbd4ee9fe3b12e"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.0.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cef7cc8d5a3d037d4fd1e8d53822caba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132769,
        "upload_time": "2022-03-20T21:23:13",
        "upload_time_iso_8601": "2022-03-20T21:23:13.335130Z",
        "url": "https://files.pythonhosted.org/packages/a7/4d/4662974d4bc910e961979396965448eeed8f5b7d67955f331d783836f862/astronomy_engine-2.0.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7af19bc157a2d6f58293f2f7903e430c9de1561c6f09fbba3268a8a039e3b8a5",
          "md5": "afd1e1ba5b4f3ef71a007575ed2c97d3",
          "sha256": "752f58bc1e84d3ee9104d5c0a7c78c742387d7f23134778b4cdf8dd9508cc820"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "afd1e1ba5b4f3ef71a007575ed2c97d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 194422,
        "upload_time": "2022-03-20T21:23:15",
        "upload_time_iso_8601": "2022-03-20T21:23:15.909922Z",
        "url": "https://files.pythonhosted.org/packages/7a/f1/9bc157a2d6f58293f2f7903e430c9de1561c6f09fbba3268a8a039e3b8a5/astronomy-engine-2.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daf07c4b001442e06a20ea78d7f504d8fde451af90b48400f3ae3e5a0a487706",
          "md5": "ebcd45c5be2b9e30c509b6e8f8ae9fe2",
          "sha256": "90e9173a788e8b9410da0849b191239d3d58c4d33aca9a27b965f95e26f106c8"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebcd45c5be2b9e30c509b6e8f8ae9fe2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 133958,
        "upload_time": "2022-05-06T02:05:01",
        "upload_time_iso_8601": "2022-05-06T02:05:01.471764Z",
        "url": "https://files.pythonhosted.org/packages/da/f0/7c4b001442e06a20ea78d7f504d8fde451af90b48400f3ae3e5a0a487706/astronomy_engine-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f937fe6cb03b1a00603fe3bf6e34c8e60e1b6c7824ff8b9cd70884a1a258eb",
          "md5": "45cd2a0283350a7156f0b77161a4069a",
          "sha256": "b87bee55baaa262bd3db2c4f1da74b77c13d1e582dacccca229e88cefb3a7b47"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45cd2a0283350a7156f0b77161a4069a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 195568,
        "upload_time": "2022-05-06T02:05:04",
        "upload_time_iso_8601": "2022-05-06T02:05:04.142100Z",
        "url": "https://files.pythonhosted.org/packages/53/f9/37fe6cb03b1a00603fe3bf6e34c8e60e1b6c7824ff8b9cd70884a1a258eb/astronomy-engine-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "854c4873b54f7e56372ee8b9df1bedd2a573f1da72547398c641eaaee2cc5792",
          "md5": "e7c41613326b5fe0751a59ec737ea6eb",
          "sha256": "50dd9a60ceade000ca5014573eb117b38f42e011f2f022d72a7e64a1e3ec3db7"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7c41613326b5fe0751a59ec737ea6eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 139867,
        "upload_time": "2022-05-26T01:40:03",
        "upload_time_iso_8601": "2022-05-26T01:40:03.556253Z",
        "url": "https://files.pythonhosted.org/packages/85/4c/4873b54f7e56372ee8b9df1bedd2a573f1da72547398c641eaaee2cc5792/astronomy_engine-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bab3f43450c02c7a6c52dde4609e78149680a877be614ca7ef4e2f9b5581c50d",
          "md5": "2371b2c193ad510642a1e7f79230bace",
          "sha256": "da9d48259dc117fa616d341cdc7000ae4ebb08fb46d43cf5421abda190a430d6"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2371b2c193ad510642a1e7f79230bace",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 205004,
        "upload_time": "2022-05-26T01:40:06",
        "upload_time_iso_8601": "2022-05-26T01:40:06.408252Z",
        "url": "https://files.pythonhosted.org/packages/ba/b3/f43450c02c7a6c52dde4609e78149680a877be614ca7ef4e2f9b5581c50d/astronomy-engine-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36b97a57b52f41d17fc14de32007b2e9d2a0b9359bf974b4f2ec4898cc618bf8",
          "md5": "8b9a3954f6d601ec377d85a64f0441a4",
          "sha256": "b48992e068c465bfefbd0113ce21b1cdab7e2eca37372122059273435698bb54"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b9a3954f6d601ec377d85a64f0441a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 146268,
        "upload_time": "2022-11-14T19:30:01",
        "upload_time_iso_8601": "2022-11-14T19:30:01.557941Z",
        "url": "https://files.pythonhosted.org/packages/36/b9/7a57b52f41d17fc14de32007b2e9d2a0b9359bf974b4f2ec4898cc618bf8/astronomy_engine-2.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f903f34c326ace6f552d9e013eabd48981d70ebee73fac028d0b46fa0acc29a6",
          "md5": "18bdfea7769d545599592a7db8142ccd",
          "sha256": "7167ecdeab744e8b9968e1072fdd797dd33c3d12c85a25e50801b6db8c3c6c0e"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "18bdfea7769d545599592a7db8142ccd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 214933,
        "upload_time": "2022-11-14T19:30:04",
        "upload_time_iso_8601": "2022-11-14T19:30:04.568467Z",
        "url": "https://files.pythonhosted.org/packages/f9/03/f34c326ace6f552d9e013eabd48981d70ebee73fac028d0b46fa0acc29a6/astronomy-engine-2.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c6b294528e24f5b3537ef9a0a566579d4516c7194abd414926455f6d2fc09e6",
          "md5": "556c42b93de7c7f85506c2fc3de8c3d2",
          "sha256": "d4f902731151548cf0666d66291715d048b4ed2d6898e1ade25eb63a0b76c9fc"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "556c42b93de7c7f85506c2fc3de8c3d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 148445,
        "upload_time": "2022-11-23T17:55:45",
        "upload_time_iso_8601": "2022-11-23T17:55:45.017217Z",
        "url": "https://files.pythonhosted.org/packages/8c/6b/294528e24f5b3537ef9a0a566579d4516c7194abd414926455f6d2fc09e6/astronomy_engine-2.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58a377f59eebd27483d6014dc52e6393469a5dab1e2884b0993a1fd9baab6bb9",
          "md5": "731fe3bd14bb1d407e04e479f3141b97",
          "sha256": "4f39bef6af9a7e08a161ae07fffc8cb381789cf9d33b18732672728df02a50fe"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "731fe3bd14bb1d407e04e479f3141b97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 218355,
        "upload_time": "2022-11-23T17:55:47",
        "upload_time_iso_8601": "2022-11-23T17:55:47.842685Z",
        "url": "https://files.pythonhosted.org/packages/58/a3/77f59eebd27483d6014dc52e6393469a5dab1e2884b0993a1fd9baab6bb9/astronomy-engine-2.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b3120222203d541c3caa51e6b1ce3d569a6297995d09df200e8fc304fd63e8",
          "md5": "7e5ae8750911505031f643c8ab9de2cc",
          "sha256": "46f55131f0159b1b81192faf71e911988914165c74fcb0aba077ea1435646719"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e5ae8750911505031f643c8ab9de2cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 148890,
        "upload_time": "2022-12-11T17:00:11",
        "upload_time_iso_8601": "2022-12-11T17:00:11.973868Z",
        "url": "https://files.pythonhosted.org/packages/02/b3/120222203d541c3caa51e6b1ce3d569a6297995d09df200e8fc304fd63e8/astronomy_engine-2.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec33cbd1c91ecab8e666f26506af263334e1f69c45703dcf5db28cc001d493e1",
          "md5": "f753dbd2e4aa0dd84b12591b474c01e1",
          "sha256": "d50e07117f7968b26860b4a2ebffae55f9f0236963e28c1d755eed14914dc474"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "f753dbd2e4aa0dd84b12591b474c01e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 220473,
        "upload_time": "2022-12-11T17:00:15",
        "upload_time_iso_8601": "2022-12-11T17:00:15.162974Z",
        "url": "https://files.pythonhosted.org/packages/ec/33/cbd1c91ecab8e666f26506af263334e1f69c45703dcf5db28cc001d493e1/astronomy-engine-2.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "904f2909b9af4e82d71d4a2ffc3429ca4a880ec31b7ad78b60f570813c27de6c",
          "md5": "11b90c809613ae08a3fb6a76345d961a",
          "sha256": "d74f31ae0422a723116e0b459c802f0e78d98002f340f81d120221700539bac9"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11b90c809613ae08a3fb6a76345d961a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 149384,
        "upload_time": "2023-02-13T03:20:48",
        "upload_time_iso_8601": "2023-02-13T03:20:48.973390Z",
        "url": "https://files.pythonhosted.org/packages/90/4f/2909b9af4e82d71d4a2ffc3429ca4a880ec31b7ad78b60f570813c27de6c/astronomy_engine-2.1.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abade4a0340106ae59fe1c8f59beedeeced2cfff4402c291846df8401e8942b7",
          "md5": "bac5c2584b5d0c6e2a3620d7a6dfd53f",
          "sha256": "cfa4297e9a04fb69e0cade0286ffd16c16c8ef5b34894729ec774b5e1f7f7e36"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "bac5c2584b5d0c6e2a3620d7a6dfd53f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 221674,
        "upload_time": "2023-02-13T03:20:51",
        "upload_time_iso_8601": "2023-02-13T03:20:51.323960Z",
        "url": "https://files.pythonhosted.org/packages/ab/ad/e4a0340106ae59fe1c8f59beedeeced2cfff4402c291846df8401e8942b7/astronomy-engine-2.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72e1c246e2235c40c6b737d165af228b9bf0cff2e5f11622c09d154fe43fc8d9",
          "md5": "cc91ea92220faa3a2ed93c638656c85b",
          "sha256": "2c9ec2aaa60a34c493b8874a8c19fac42a5e08c6ff4027d6099933d2a9895efe"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc91ea92220faa3a2ed93c638656c85b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 152510,
        "upload_time": "2023-02-21T23:12:56",
        "upload_time_iso_8601": "2023-02-21T23:12:56.433893Z",
        "url": "https://files.pythonhosted.org/packages/72/e1/c246e2235c40c6b737d165af228b9bf0cff2e5f11622c09d154fe43fc8d9/astronomy_engine-2.1.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd505670c123949f626c67e0f28511245934e19c2388bd056861101441088dd4",
          "md5": "6b70110450dbde035b18ca864804d97d",
          "sha256": "082b581db937a9d5285d1e5c6eea17e56c8fbcff81daf8522959663cf9a19ac3"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "6b70110450dbde035b18ca864804d97d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 226601,
        "upload_time": "2023-02-21T23:12:58",
        "upload_time_iso_8601": "2023-02-21T23:12:58.847638Z",
        "url": "https://files.pythonhosted.org/packages/cd/50/5670c123949f626c67e0f28511245934e19c2388bd056861101441088dd4/astronomy-engine-2.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b80dc65ca570c8106acd117bff7c955171ccf1468411b128cc4f6efdc7b78821",
          "md5": "b81ef692d2f2f84504a988b6a9042639",
          "sha256": "fce56b699386e6b88486a7537228cac122752ed984ea06c4724b8f42df46d2e7"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b81ef692d2f2f84504a988b6a9042639",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 152971,
        "upload_time": "2023-02-27T00:20:09",
        "upload_time_iso_8601": "2023-02-27T00:20:09.587049Z",
        "url": "https://files.pythonhosted.org/packages/b8/0d/c65ca570c8106acd117bff7c955171ccf1468411b128cc4f6efdc7b78821/astronomy_engine-2.1.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a4d0b9fc6c002fe98612f9b461c0014acdd6e9f008b8198fa125695e4050838",
          "md5": "a456381faaad395d9543e2aaf72f24c7",
          "sha256": "0523637ec9d5db7621644b023a0ba7d3c3ebd6bf7dc81042e5594e7a7232abfb"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "a456381faaad395d9543e2aaf72f24c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 227465,
        "upload_time": "2023-02-27T00:20:11",
        "upload_time_iso_8601": "2023-02-27T00:20:11.759534Z",
        "url": "https://files.pythonhosted.org/packages/3a/4d/0b9fc6c002fe98612f9b461c0014acdd6e9f008b8198fa125695e4050838/astronomy-engine-2.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7782ad317141803252b9bbcbf941d166db4854ebd64892efe804acc975b76b8c",
          "md5": "3c7a5e8d1ee1d3284ad8e8177671cd30",
          "sha256": "02b071e7a2b974a2300ef4d81fb40770fdb6e920c7114d90049dcb9ad74098db"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c7a5e8d1ee1d3284ad8e8177671cd30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 155415,
        "upload_time": "2023-03-14T02:20:36",
        "upload_time_iso_8601": "2023-03-14T02:20:36.852889Z",
        "url": "https://files.pythonhosted.org/packages/77/82/ad317141803252b9bbcbf941d166db4854ebd64892efe804acc975b76b8c/astronomy_engine-2.1.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0388b050b15543d9b9e3807c4694c94267ea76d661d023981e0a008feaa25d",
          "md5": "d90daa65f80a43d911bd0adef159b650",
          "sha256": "2b50f2c0e57b64e1fcc38d357be60ec07046287cf899a5b69949d41ede587c71"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "d90daa65f80a43d911bd0adef159b650",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 231371,
        "upload_time": "2023-03-14T02:20:39",
        "upload_time_iso_8601": "2023-03-14T02:20:39.167491Z",
        "url": "https://files.pythonhosted.org/packages/5e/03/88b050b15543d9b9e3807c4694c94267ea76d661d023981e0a008feaa25d/astronomy-engine-2.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdf0d904da9672f2a3a4ad89e606fc8679fec609f68f994d61bf334e80889e51",
          "md5": "95699a4b69b3fda73c182c6734998733",
          "sha256": "250f42132a83b68962cf90f49e8bc132deb0e9d1239e19b720b533e3da72f23e"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95699a4b69b3fda73c182c6734998733",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 142287,
        "upload_time": "2022-06-02T00:26:24",
        "upload_time_iso_8601": "2022-06-02T00:26:24.501716Z",
        "url": "https://files.pythonhosted.org/packages/cd/f0/d904da9672f2a3a4ad89e606fc8679fec609f68f994d61bf334e80889e51/astronomy_engine-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d89e8e60981014988d1ee7e7a70e780fc1be6f6146392f1582947294ed8e8597",
          "md5": "e996bff8acccd02310a2ab825afaaf51",
          "sha256": "f4fbaaff2f2ec065620e62b1d2fb40aff3e6d35ff1c98baff82df78779f05438"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e996bff8acccd02310a2ab825afaaf51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 209241,
        "upload_time": "2022-06-02T00:26:26",
        "upload_time_iso_8601": "2022-06-02T00:26:26.775835Z",
        "url": "https://files.pythonhosted.org/packages/d8/9e/8e60981014988d1ee7e7a70e780fc1be6f6146392f1582947294ed8e8597/astronomy-engine-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad3d5e231987149e3dc1b6f404829bb9f8d4f726742b331d9326af850dd5cdb6",
          "md5": "8e971b0695827382bd05dfa493c12969",
          "sha256": "54880c4a12699713db8a35ce5bca9607feb046c24337a205ebffb04b2c4d13ba"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e971b0695827382bd05dfa493c12969",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 142307,
        "upload_time": "2022-09-22T16:31:18",
        "upload_time_iso_8601": "2022-09-22T16:31:18.847451Z",
        "url": "https://files.pythonhosted.org/packages/ad/3d/5e231987149e3dc1b6f404829bb9f8d4f726742b331d9326af850dd5cdb6/astronomy_engine-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f275f37415b8ff639842aa903638a17927d6ea7a41e84906f6d41ee5332862",
          "md5": "e091fb514b7cf2ad25fdbe2de9cfd9f7",
          "sha256": "42b8ef269d3107f4f10e85ec3ebf5594c85c02d4274abbd80cc1ca7d80b92e88"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e091fb514b7cf2ad25fdbe2de9cfd9f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 209307,
        "upload_time": "2022-09-22T16:31:22",
        "upload_time_iso_8601": "2022-09-22T16:31:22.073095Z",
        "url": "https://files.pythonhosted.org/packages/53/f2/75f37415b8ff639842aa903638a17927d6ea7a41e84906f6d41ee5332862/astronomy-engine-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b78273abb9acdaf78ea8e75706ae5e5fd586a1c79ba56ad20ca4e0a9e3dc25",
          "md5": "a2a2360a96d830c090f03676b5d2683a",
          "sha256": "16063c1a4ea7a84b65f86d7129d6ea0c394e0c8b9ff7bdc8aea5603e330badd1"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2a2360a96d830c090f03676b5d2683a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 143136,
        "upload_time": "2022-10-03T02:24:48",
        "upload_time_iso_8601": "2022-10-03T02:24:48.521131Z",
        "url": "https://files.pythonhosted.org/packages/c5/b7/8273abb9acdaf78ea8e75706ae5e5fd586a1c79ba56ad20ca4e0a9e3dc25/astronomy_engine-2.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc6af9a96079262c3be88b59082d60fe55743cbbfb0643dbe68ddfdd8fcb3b4b",
          "md5": "d67246d18c31f21447bfd274149f5b61",
          "sha256": "df4ec69828a65147ddb7eeb6a7c21d092e36e38dfced294b5a7f3228f9e888a7"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d67246d18c31f21447bfd274149f5b61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 210418,
        "upload_time": "2022-10-03T02:24:53",
        "upload_time_iso_8601": "2022-10-03T02:24:53.394211Z",
        "url": "https://files.pythonhosted.org/packages/cc/6a/f9a96079262c3be88b59082d60fe55743cbbfb0643dbe68ddfdd8fcb3b4b/astronomy-engine-2.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d1b3bb19a6c7fa634a869121f7c33e33cbb5c2dd1c9311dbbb4eae7ea22fcb3",
          "md5": "1933e0e241e64a6fef2b647592d51274",
          "sha256": "850d96714e0a060ae3e56c03f58909d28faac47404a65f7cb9538eb49b63ce48"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1933e0e241e64a6fef2b647592d51274",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 143542,
        "upload_time": "2022-10-07T02:17:17",
        "upload_time_iso_8601": "2022-10-07T02:17:17.319759Z",
        "url": "https://files.pythonhosted.org/packages/6d/1b/3bb19a6c7fa634a869121f7c33e33cbb5c2dd1c9311dbbb4eae7ea22fcb3/astronomy_engine-2.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "870a82a83522a267d766c5c0918428ad9f9b79cf756943ccfb7b7fd2ea7b31e7",
          "md5": "079f1fef25f8fec784d8908bd1e7f25e",
          "sha256": "ab0c422789a3989a5fa4921449f3dbb53472bebbbcffd5f6fe616c95914a227d"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "079f1fef25f8fec784d8908bd1e7f25e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 210794,
        "upload_time": "2022-10-07T02:17:20",
        "upload_time_iso_8601": "2022-10-07T02:17:20.414460Z",
        "url": "https://files.pythonhosted.org/packages/87/0a/82a83522a267d766c5c0918428ad9f9b79cf756943ccfb7b7fd2ea7b31e7/astronomy-engine-2.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8491c9a1d0210a270ac6111ae449c090a72dd7e70859ddb380a4d915b91c3910",
          "md5": "5653d01304db82f41f3f0989c25a4d80",
          "sha256": "54eaa124455ee39f15c7e6fdb2e35b2eb2e72959d386397ea3775d0af99eb490"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5653d01304db82f41f3f0989c25a4d80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145384,
        "upload_time": "2022-10-20T23:58:34",
        "upload_time_iso_8601": "2022-10-20T23:58:34.764027Z",
        "url": "https://files.pythonhosted.org/packages/84/91/c9a1d0210a270ac6111ae449c090a72dd7e70859ddb380a4d915b91c3910/astronomy_engine-2.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67549499146cc1210573071fb9a2234ae28e0faf31d92c5eb2507d275894ce35",
          "md5": "9d01ffafaa70df01c071477b0ff6ae98",
          "sha256": "c9719df6d9716bf36e0b6555be35edac66b544c9eaaaaaa6c4544e1b0d57684c"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9d01ffafaa70df01c071477b0ff6ae98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 213843,
        "upload_time": "2022-10-20T23:58:37",
        "upload_time_iso_8601": "2022-10-20T23:58:37.906393Z",
        "url": "https://files.pythonhosted.org/packages/67/54/9499146cc1210573071fb9a2234ae28e0faf31d92c5eb2507d275894ce35/astronomy-engine-2.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a4b9f76b5efaa4ae055f6142b051dcebb733f3a5ca5ce86cb9cf9fc3f28c3f2",
          "md5": "de940f510dda1ce490df4aae2be98e34",
          "sha256": "5e8cbee934c358c4b58212bdc589cbdd0abd575f44557fd2ff7bc598a9205e5c"
        },
        "downloads": -1,
        "filename": "astronomy_engine-2.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de940f510dda1ce490df4aae2be98e34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145592,
        "upload_time": "2022-11-01T23:43:16",
        "upload_time_iso_8601": "2022-11-01T23:43:16.418726Z",
        "url": "https://files.pythonhosted.org/packages/7a/4b/9f76b5efaa4ae055f6142b051dcebb733f3a5ca5ce86cb9cf9fc3f28c3f2/astronomy_engine-2.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "587592e6ffffd6e51b8fbefe9995a6414ede8daa67aeb0ecc939d637aa4ca3d5",
          "md5": "0fcb774694dd8cdb05bf1b45393bf204",
          "sha256": "5668eb9235c5a232947bb0b510dd3abb5e7aa6ca5a5c3dad9b281908f4c8818a"
        },
        "downloads": -1,
        "filename": "astronomy-engine-2.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0fcb774694dd8cdb05bf1b45393bf204",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 214252,
        "upload_time": "2022-11-01T23:43:18",
        "upload_time_iso_8601": "2022-11-01T23:43:18.788002Z",
        "url": "https://files.pythonhosted.org/packages/58/75/92e6ffffd6e51b8fbefe9995a6414ede8daa67aeb0ecc939d637aa4ca3d5/astronomy-engine-2.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7782ad317141803252b9bbcbf941d166db4854ebd64892efe804acc975b76b8c",
        "md5": "3c7a5e8d1ee1d3284ad8e8177671cd30",
        "sha256": "02b071e7a2b974a2300ef4d81fb40770fdb6e920c7114d90049dcb9ad74098db"
      },
      "downloads": -1,
      "filename": "astronomy_engine-2.1.17-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c7a5e8d1ee1d3284ad8e8177671cd30",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 155415,
      "upload_time": "2023-03-14T02:20:36",
      "upload_time_iso_8601": "2023-03-14T02:20:36.852889Z",
      "url": "https://files.pythonhosted.org/packages/77/82/ad317141803252b9bbcbf941d166db4854ebd64892efe804acc975b76b8c/astronomy_engine-2.1.17-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e0388b050b15543d9b9e3807c4694c94267ea76d661d023981e0a008feaa25d",
        "md5": "d90daa65f80a43d911bd0adef159b650",
        "sha256": "2b50f2c0e57b64e1fcc38d357be60ec07046287cf899a5b69949d41ede587c71"
      },
      "downloads": -1,
      "filename": "astronomy-engine-2.1.17.tar.gz",
      "has_sig": false,
      "md5_digest": "d90daa65f80a43d911bd0adef159b650",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 231371,
      "upload_time": "2023-03-14T02:20:39",
      "upload_time_iso_8601": "2023-03-14T02:20:39.167491Z",
      "url": "https://files.pythonhosted.org/packages/5e/03/88b050b15543d9b9e3807c4694c94267ea76d661d023981e0a008feaa25d/astronomy-engine-2.1.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}