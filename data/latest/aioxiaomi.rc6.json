{
  "info": {
    "author": "Fran√ßois Wautier",
    "author_email": "francois@wautier.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# aioxiaomi\n\naioxiaomi is a Python 3/asyncio library to control Xiaomi Yeelight LED lightbulbs over your LAN.\n\n[![PyPI version fury.io](https://badge.fury.io/py/aioxiaomi.svg)](https://pypi.pyt\n                                                                   hon.org/pypi/aioiotprov)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson\n                                                                    .mit-licen)\n[![GITHUB-BADGE](https://github.com/frawau/aioiotprov/workflows/black/badge.svg)](h\n                                                                                  ttps://github.com/psf/black)\n\n# Installation\n\nWe are on PyPi so\n\n     pip3 install aioxiaomi\nor\n     python3 -m pip install aioxiaomi\n\n\n\n# How to use\n\nEssentially, you create an object with at least 2 methods:\n\n    - register\n    - unregister\n\nYou then start the XiaomiDiscovery task in asyncio with a callback that will create and .activate() any new bulb.\nUpon connection with the bulb, it will register itself with the parent. All the method communicating with the bulb\ncan be passed a callback function to react to the bulb response. The callback should take 2 parameters:\n\n    - a light object\n    - the response message\n\nCheckout __main__.py to see how it works.\n\n\nIn essence, the test program is this\n\n    class bulbs():\n    \"\"\" A simple class with a register and  unregister methods\n    \"\"\"\n        def __init__(self):\n            self.bulbs=[]\n            self.pending_bulbs = []\n\n        def register(self,bulb):\n            self.bulbs.append(bulb)\n            try:\n                self.pending_bulbs.remove(bulb)\n            except:\n                pass\n\n        def unregister(self,bulb):\n            idx=0\n            for x in list([ y.bulb_id for y in self.bulbs]):\n                if x == bulb.bulb_id:\n                    del(self.bulbs[idx])\n                    break\n                idx+=1\n\n        def new_bulb(self, sender, **kwargs):\n            newbulb = aiox.XiaomiBulb(aio.get_event_loop(),kwargs['headers'],self)\n            found = False\n            for x in self.bulbs:\n                if x.bulb_id == newbulb.bulb_id:\n                    found = True\n                    break\n            if not found:\n                for x in self.pending_bulbs:\n                    if x.bulb_id == newbulb.bulb_id:\n                        found = True\n                        break\n            if not found:\n                newbulb.activate()\n            else:\n                del(newbulb)\n\n\n    def readin():\n    \"\"\"Reading from stdin and displaying menu\"\"\"\n\n        selection = sys.stdin.readline().strip(\"\\n\")\n        DoSomething()\n\n    MyBulbs= bulbs()\n    loop = aio.get_event_loop()\n    coro = aiox.start_xiaomi_discovery(MyBulbs.new_bulb)\n    transp, server = loop.run_until_complete(coro)\n    try:\n        loop.add_reader(sys.stdin,readin)\n        server.broadcast(2)\n        loop.run_forever()\n    except:\n        pass\n    finally:\n        server.cancel()\n        loop.remove_reader(sys.stdin)\n        loop.close()\n\n\nOther things worth noting:\n\n    - Whilst XiaomiDiscover uses UDP broadcast, the bulbs are\n      connected with Unicast TCP\n\n    - Xiaomi allows only about 1 command per second per connection. To counter that,\n      one can start more than one connection to a bulb. There is a limit of\n      4 connections per bulb, but given that there can only be 144 command per minute\n      per bulb, only 2 connections can be handled without starting to overload the bulb.\n      Use .set_connection(x) before activate to set the number of connections\n\n    - aioxiaomi ensure that there is at most 1 command per second per connection. To do so\n      it keeps a buffer of messages and pace the sending (using round-robin if there is more\n      then one connection). The buffer can thus become quite big. To control this, one can\n      specify a maximum buffer length and what to do with messages that comes when the buffer\n      is full. Use set_queue_limit(length,policy) to control.\n                length is the maximum number of commands waiting to be sent\n                policy defines what to do with the extra packets:\n                    drop: just drop them\n                    head: queue them but discard the head of the queue\n                    random: queue the message then discard a random element of the queue\n                    adapt: switch to the so-called \"music mode\" and dump all the messages.\n                           After 5 secs inactivity, the \"music mode\" is cancelled\n\n    - The socket connecting to a bulb is not closed unless the bulb is deemed to have\n      gone the way of the Dodo.\n\n    - I only have \"Color\" model, so I could not test with other types\n      of bulbs\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/frawau/aioxiaomi",
    "keywords": "yeelight,light,automation,xiaomi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioxiaomi",
    "package_url": "https://pypi.org/project/aioxiaomi/",
    "platform": "",
    "project_url": "https://pypi.org/project/aioxiaomi/",
    "project_urls": {
      "Homepage": "http://github.com/frawau/aioxiaomi"
    },
    "release_url": "https://pypi.org/project/aioxiaomi/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API for local communication with Xiaomi devices over a LAN with asyncio.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8016714,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a9f3e089d0aec72da6174e12c1385b4f0194db022d54962e7e6e2c398f958e",
          "md5": "340e15b352e3e1bbaeececa053559897",
          "sha256": "41ecb561c6114baf57b6a03bf8d6c6d38dfc0f3f1273a235f4c7867ae0822a0d"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "340e15b352e3e1bbaeececa053559897",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12839,
        "upload_time": "2017-12-09T05:43:34",
        "upload_time_iso_8601": "2017-12-09T05:43:34.072282Z",
        "url": "https://files.pythonhosted.org/packages/59/a9/f3e089d0aec72da6174e12c1385b4f0194db022d54962e7e6e2c398f958e/aioxiaomi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3475d55bde0e8fa32bf8e29ecd4357ddfa58b4d1a79ceec2e9081d0c21f4b3e",
          "md5": "b5f0c9567efeb3bbd6ddfced6fa00cf5",
          "sha256": "604939d3be54a5aa05108e614eb899e49607636b3e15f963a429356f77ca041c"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5f0c9567efeb3bbd6ddfced6fa00cf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13129,
        "upload_time": "2017-12-11T07:59:43",
        "upload_time_iso_8601": "2017-12-11T07:59:43.474828Z",
        "url": "https://files.pythonhosted.org/packages/f3/47/5d55bde0e8fa32bf8e29ecd4357ddfa58b4d1a79ceec2e9081d0c21f4b3e/aioxiaomi-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ab56beb0e9ca4070503763959933265165bd314039cba63e4e018d2b1e7b9f",
          "md5": "82ca9e6625518373d9f57602b748449a",
          "sha256": "371fb0d7d61076e8a06a7c87f70c97541c598631d13db196a75c98027d529566"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "82ca9e6625518373d9f57602b748449a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13160,
        "upload_time": "2017-12-11T16:10:29",
        "upload_time_iso_8601": "2017-12-11T16:10:29.951268Z",
        "url": "https://files.pythonhosted.org/packages/d8/ab/56beb0e9ca4070503763959933265165bd314039cba63e4e018d2b1e7b9f/aioxiaomi-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7f54d8bf6c8c2399e0e3e972a2631021d179f8f4721ac6ddc43ef6418d87df0",
          "md5": "3bc556e3264284d8ed5b82255efda0b9",
          "sha256": "6d05ddec7fdda39b4806e59f68165a2dfd0186779ebe1c36e4f27d280d024717"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3bc556e3264284d8ed5b82255efda0b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13168,
        "upload_time": "2017-12-12T07:34:37",
        "upload_time_iso_8601": "2017-12-12T07:34:37.896612Z",
        "url": "https://files.pythonhosted.org/packages/b7/f5/4d8bf6c8c2399e0e3e972a2631021d179f8f4721ac6ddc43ef6418d87df0/aioxiaomi-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b4ec58376113ebd758e73c4a2fb93003e2f4b10498dc6ea6a29e80ca17e843c",
          "md5": "775167750698cf1b1daf0e7e9967d270",
          "sha256": "b6408527e42d2dde7fc7df613d215f505ba15dfec3235a37ce05e89910c158e6"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "775167750698cf1b1daf0e7e9967d270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13189,
        "upload_time": "2018-09-18T05:28:20",
        "upload_time_iso_8601": "2018-09-18T05:28:20.219674Z",
        "url": "https://files.pythonhosted.org/packages/0b/4e/c58376113ebd758e73c4a2fb93003e2f4b10498dc6ea6a29e80ca17e843c/aioxiaomi-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e95e91138a1d003d070a2b638cce7cbf16864eaba419371c3707e39c383a2cb6",
          "md5": "6049ee62585025a686ee99258e41fafc",
          "sha256": "f749e3ec9836c460bf99049c5c9c17a787d094ed0a56df25e32239c92c9c2bb6"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6049ee62585025a686ee99258e41fafc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17815,
        "upload_time": "2020-08-22T07:57:37",
        "upload_time_iso_8601": "2020-08-22T07:57:37.310537Z",
        "url": "https://files.pythonhosted.org/packages/e9/5e/91138a1d003d070a2b638cce7cbf16864eaba419371c3707e39c383a2cb6/aioxiaomi-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a3f70add5561d755f626901317806661f8ace64e667f2575e45213073ae0d78",
          "md5": "fbfe66101ec0ec28d2b4f6989a674d49",
          "sha256": "2284f674d5722deea24e9cdaaf7775f131a8af09999f00c498553df20473b95e"
        },
        "downloads": -1,
        "filename": "aioxiaomi-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fbfe66101ec0ec28d2b4f6989a674d49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17572,
        "upload_time": "2020-08-22T07:57:38",
        "upload_time_iso_8601": "2020-08-22T07:57:38.962784Z",
        "url": "https://files.pythonhosted.org/packages/1a/3f/70add5561d755f626901317806661f8ace64e667f2575e45213073ae0d78/aioxiaomi-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e95e91138a1d003d070a2b638cce7cbf16864eaba419371c3707e39c383a2cb6",
        "md5": "6049ee62585025a686ee99258e41fafc",
        "sha256": "f749e3ec9836c460bf99049c5c9c17a787d094ed0a56df25e32239c92c9c2bb6"
      },
      "downloads": -1,
      "filename": "aioxiaomi-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6049ee62585025a686ee99258e41fafc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17815,
      "upload_time": "2020-08-22T07:57:37",
      "upload_time_iso_8601": "2020-08-22T07:57:37.310537Z",
      "url": "https://files.pythonhosted.org/packages/e9/5e/91138a1d003d070a2b638cce7cbf16864eaba419371c3707e39c383a2cb6/aioxiaomi-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a3f70add5561d755f626901317806661f8ace64e667f2575e45213073ae0d78",
        "md5": "fbfe66101ec0ec28d2b4f6989a674d49",
        "sha256": "2284f674d5722deea24e9cdaaf7775f131a8af09999f00c498553df20473b95e"
      },
      "downloads": -1,
      "filename": "aioxiaomi-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "fbfe66101ec0ec28d2b4f6989a674d49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17572,
      "upload_time": "2020-08-22T07:57:38",
      "upload_time_iso_8601": "2020-08-22T07:57:38.962784Z",
      "url": "https://files.pythonhosted.org/packages/1a/3f/70add5561d755f626901317806661f8ace64e667f2575e45213073ae0d78/aioxiaomi-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}