{
  "info": {
    "author": "Johannes Zieres",
    "author_email": "johannes.zieres@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CLCR\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n## The CLCR approach\nTo improve the completeness of draft genome assemblies we created the tool CLCR, which stands for\nCorrection of Low Coverage Regions. The tool provides functions for short indel detection\nand correction in high coverage genome assemblies, in the form of error detection in typically \nerror prone assembly regions with a significantly lower read coverage. The detection\nof frameshifts is implemented by the integration of the alignment tool Diamond in combination with \nthe usage of a protein database with the sequences of closely related organisms.\nThe frameshift detection by Diamond is followed by the localization of the frameshifts in the\nunderlying genome in combination with extensive filter heuristics to avoid false correction.\nReading frames that are disturbed by frameshift mutations, putatively caused by a sequencing error,\nare locally healed by the insertion of Nâ€™s in the assembly.\n\n## Installation\nCLCR can be retrieved as a PyPI package, it requires a Python version of 3.7 or higher and a \n[Diamond](https://github.com/bbuchfink/diamond) installation is mandatory. \n\nThe program can be installed with the following command: <br />\n```\n# Install pip, if nescessary\nsudo apt update\nsudo apt install python3-pip\n\n# Update pip\npip install --upgrade pip\n\n# Install CLCR\npip install clcr\n```\nIf there are problems with that, the code can be directly cloned from github:\n```\n# Install git, if nescessary\nsudo apt install git-all\n\n# Clone CLCR code from github\ngit clone https://github.com/Johannes-Zi/CLCR.git\n\n# Move to the cloned directory\npip install .\n# Or manually add the program to PATH when there are problems with pip\n```\n## Quickstart\n### Query creation with *clcr.query_creation*\nThe first step is the creation of the query sequences for the Diamond \nblastx runs. For this, the function detects the regions with low read coverages in a given pbc (per base coverage) file. The\nsequences of the detected regions are extracted from the handed over assembly and stored as .fasta query\nfiles in the query_files directory of the handed over project. The query_files directory will be\noverwritten! A log file with run information and a original_low_cov_regions.tsv with the original detected\nlow coverage regions before the merging step are stored at the storage_files dir. <br /> \n<br />\n*ATTENTION!*: old query directory and DIAMOND output directory of current project dir is overwritten as preparation for a new cluster run!\n<br /> \n<br /> \nThere are three mandatory arguments required:\n* genome assembly\n* the matching per base coverage file\n* project directory for the CLCR run\n\nThere are the following options:\n```\n  -h, --help            show the help message and exit\n\nrequired arguments:\n  -p PROJECT_DIR, --project_dir PROJECT_DIR\n                        Path of the project directory\n                        \n  -c COV_FILE_PATH, --cov_file_path COV_FILE_PATH\n                        Path of the coverage file\n                        \n  -a ASSEMBLY_FILE, --assembly_file ASSEMBLY_FILE\n                        Path of the assembly file\n\noptional arguments:\n  --low_cov_start LOW_COV_START\n                        Threshold for detecting a low cov region\n                        \n  --low_cov_end LOW_COV_END\n                        Threshold for ending a low cov region\n                        \n  --min_query_len MIN_QUERY_LEN\n                        Minimum query length\n                        \n  --queries_per_file QUERIES_PER_FILE\n                        Queries sequences per query file\n                        \n  --verbose             Run information is print in the command line\n```\n\n### Diamond cluster run *clcr.cluster_run*\nAfter the query files are created, the next step is to perform the\nDiamond blastx searches against a protein database with the sequences \nof closely related organisms. This can be done locally on a single computer, \nor on a computer cluster. The usage of a cluster is highly recommended, the CLCR \nworkflow has to be manually adapted to this. The *clcr.cluster_run* function creates a slurm-file for the Diamond blastx \ncluster run of the handed over CLCR project. \nThe jobs are started automatically on the cluster, when the --auto_run parameter is activated. \nThe slurm log files are stored in the slurm_files dir, a log file for the CLCR run is stored in \nthe storage_files dir.<br />\n<br />\n*ATTENTION!*: Use this function only when your cluster supports slurm and adapt the slurm file manually \nto your local circumstances! (In this case auto submission is not recommended!)\n<br />\n<br />\nThere are the following options:\n```\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  -p PROJECT_DIR, --project_dir PROJECT_DIR\n                        Path of the project directory\n                        \n  -c PROTEIN_DATABASE, --protein_database PROTEIN_DATABASE\n                        Path of the protein database\n\noptional arguments:\n  --auto_run [AUTO_RUN]\n                        Activate automatic slurm job submission, when parameter is True.\n  \n  --verbose             Run information is print in the command line\n```\n\n### Creation of healed assembly version *clcr.assembly_healing*\nThe last step in the analysis is the creation of an adapted assembly\nversion. For this the detected frameshifts in the Diamond\nblastx output are evaluated, extensively filtered and used to created a adapted assembly version with\nlocally healed reading frames. The healed assembly version is stored in the healed_assembly dir, and log\nfile for the CLCR run is stored in the storage_files dir.\n<br />\n<br />\nThere are the following options:\n```\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  -p PROJECT_DIR, --project_dir PROJECT_DIR\n                        Path of the project directory\n                        \n  -c UNHEALED_ASSEMBLY, --unhealed_assembly UNHEALED_ASSEMBLY\n                        Path of the original unhealed assembly file\n\noptional arguments:\n  --dynamic_threshold_dist DYNAMIC_THRESHOLD_DIST\n                        The max_detect_distance defines the distance from a detected frameshift position to\n                        the original low cov. region, where a frameshift is still considered and not\n                        excluded in the further analysis.\n                        \n  --verbose             Run information is print in the command line\n```\n\n## Contact\nFor error reports, questions, comments or suggestions contact us via [email](mailto:johannes.zieres@gmail.com)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Johannes-Zi/CLCR",
    "keywords": "",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CLCR",
    "package_url": "https://pypi.org/project/CLCR/",
    "platform": null,
    "project_url": "https://pypi.org/project/CLCR/",
    "project_urls": {
      "Homepage": "https://github.com/Johannes-Zi/CLCR"
    },
    "release_url": "https://pypi.org/project/CLCR/1.0.0/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Tool fo low coverage region correction",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13981200,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db7bd57604614bdb3fbf4b683e8f7088c3c3c54e79e46e98cae26ca8e602b5df",
          "md5": "377e0a8a667dcf6dcb7441f0282a7ecb",
          "sha256": "d599b215b839bdabc2ee4aa7c0fd17e651e891c586ee7693b2aa09d8812011a0"
        },
        "downloads": -1,
        "filename": "CLCR-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "377e0a8a667dcf6dcb7441f0282a7ecb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 73797,
        "upload_time": "2022-05-30T19:45:00",
        "upload_time_iso_8601": "2022-05-30T19:45:00.143149Z",
        "url": "https://files.pythonhosted.org/packages/db/7b/d57604614bdb3fbf4b683e8f7088c3c3c54e79e46e98cae26ca8e602b5df/CLCR-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c75f4e11b116af3fd2a5a4377c9c897ba96a4ae408ea36de69486cd0ad758da",
          "md5": "45cf8fe9dc65197bd2e6ea6df6482be7",
          "sha256": "40501c2f2a75698704019686b65cad51053d6e93399772adf83fa7b6bdd307a7"
        },
        "downloads": -1,
        "filename": "CLCR-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45cf8fe9dc65197bd2e6ea6df6482be7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 69657,
        "upload_time": "2022-05-30T19:45:01",
        "upload_time_iso_8601": "2022-05-30T19:45:01.964885Z",
        "url": "https://files.pythonhosted.org/packages/8c/75/f4e11b116af3fd2a5a4377c9c897ba96a4ae408ea36de69486cd0ad758da/CLCR-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db7bd57604614bdb3fbf4b683e8f7088c3c3c54e79e46e98cae26ca8e602b5df",
        "md5": "377e0a8a667dcf6dcb7441f0282a7ecb",
        "sha256": "d599b215b839bdabc2ee4aa7c0fd17e651e891c586ee7693b2aa09d8812011a0"
      },
      "downloads": -1,
      "filename": "CLCR-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "377e0a8a667dcf6dcb7441f0282a7ecb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 73797,
      "upload_time": "2022-05-30T19:45:00",
      "upload_time_iso_8601": "2022-05-30T19:45:00.143149Z",
      "url": "https://files.pythonhosted.org/packages/db/7b/d57604614bdb3fbf4b683e8f7088c3c3c54e79e46e98cae26ca8e602b5df/CLCR-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c75f4e11b116af3fd2a5a4377c9c897ba96a4ae408ea36de69486cd0ad758da",
        "md5": "45cf8fe9dc65197bd2e6ea6df6482be7",
        "sha256": "40501c2f2a75698704019686b65cad51053d6e93399772adf83fa7b6bdd307a7"
      },
      "downloads": -1,
      "filename": "CLCR-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "45cf8fe9dc65197bd2e6ea6df6482be7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 69657,
      "upload_time": "2022-05-30T19:45:01",
      "upload_time_iso_8601": "2022-05-30T19:45:01.964885Z",
      "url": "https://files.pythonhosted.org/packages/8c/75/f4e11b116af3fd2a5a4377c9c897ba96a4ae408ea36de69486cd0ad758da/CLCR-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}