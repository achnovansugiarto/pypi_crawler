{
  "info": {
    "author": "linxiaohui, yiyuezhuo",
    "author_email": "yiyuezhuo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# MTCNN-onnx-runtime\n\nAdapted from [linxiaohui/mtcnn-opencv](https://github.com/linxiaohui/mtcnn-opencv).  Modifications include uses of onnx runtime as inference backend and provide a raw output API. Maybe this package should be a fork but I have already had a [forked version](https://github.com/yiyuezhuo/mtcnn-opencv) to address [another problem](https://github.com/linxiaohui/mtcnn-opencv), so I made a new package.\n\nMTCNN Face Detector using ONNX-runtime OpenCV, no reqiurement for tensorflow/pytorch.\n\n## INSTALLATION\nSelect one method from below:\n\n   * `pip install mtcnn-onnxruntime`: Use existing onnxruntime version in environment to run, if no onnxruntime is in the environment, `opencv` will be used as backend.\n   * `pip install mtcnn-onnxruntime[cpu]`: Install `mtcnn-onnxruntime` with `onnxruntime`\n   * `pip install mtcnn-onnxruntime[gpu]`: Install `mtcnn-onnxruntime` with `onnxruntime-gpu`\n\n## USAGE\n```python\n\nimport cv2\nfrom mtcnn_ort import MTCNN\n\ndetector = MTCNN()\ntest_pic = \"t.jpg\"\n\nimage = cv2.cvtColor(cv2.imread(test_pic), cv2.COLOR_BGR2RGB)\nresult = detector.detect_faces(image)\n\n# Result is an array with all the bounding boxes detected. Show the first.\nprint(result)\n\"\"\"\n[{'box': [60, 0, 314, 356],\n  'confidence': 0.9993509650230408,\n  'keypoints': {'left_eye': (136, 71),\n   'right_eye': (289, 58),\n   'nose': (218, 148),\n   'mouth_left': (162, 243),\n   'mouth_right': (290, 228)}}]\n\"\"\"\n\ndetector.detect_faces_raw(image)\n\"\"\"\n(array([[ 60.58798278, -66.81823712, 374.15868253, 356.04121107,\n           0.99935097]]),\n array([[136.35648 ],\n        [289.0994  ],\n        [218.10023 ],\n        [162.28156 ],\n        [290.98242 ],\n        [ 71.76702 ],\n        [ 58.487453],\n        [148.75732 ],\n        [243.27672 ],\n        [228.3274  ]], dtype=float32))\n\"\"\"\n\n```\n\nIllustration:\n\n```python\n\nimport cv2\n\nif len(result) > 0:\n    bounding_box = result[0][\"box\"]\n    keypoints = result[0]['keypoints']\n    \n    cv2.rectangle(image,\n                  (bounding_box[0], bounding_box[1]),\n                  (bounding_box[0] + bounding_box[2], bounding_box[1] + bounding_box[3]),\n                  (0,155,255),\n                  2)\n    \n    cv2.circle(image,(keypoints['left_eye']), 2, (0,155,255), 2)\n    cv2.circle(image,(keypoints['right_eye']), 2, (0,155,255), 2)\n    cv2.circle(image,(keypoints['nose']), 2, (0,155,255), 2)\n    cv2.circle(image,(keypoints['mouth_left']), 2, (0,155,255), 2)\n    cv2.circle(image,(keypoints['mouth_right']), 2, (0,155,255), 2)\n    \n    cv2.imwrite(\"result.jpg\", cv2.cvtColor(image, cv2.COLOR_RGB2BGR))\n\n# Generate labeled images\nwith open(test_pic, \"rb\") as fp:\n    marked_data = detector.mark_faces(fp.read())\nwith open(\"marked.jpg\", \"wb\") as fp:\n    fp.write(marked_data)\n\n```\n\nWarped patch (then face recognition SOTA [ArcFace](https://github.com/deepinsight/insightface)) can consume it (otherwise, if one just use bounding box, what some models such as UltraNet can only make, the performance will significantly compromised.).\n\n```python\n\nfrom skimage import transform as trans\nimport numpy as np\n\nimage = cv2.cvtColor(cv2.imread(test_pic), cv2.COLOR_BGR2RGB)\n\nsrc = np.array([\n            [30.2946, 51.6963],\n            [65.5318, 51.5014],\n            [48.0252, 71.7366],\n            [33.5493, 92.3655],\n            [62.7299, 92.2041]], dtype=np.float32)\nsrc[:, 0] += 8.0\n\nlandmark5 = detector.detect_faces_raw(image)[1].reshape(2, 5).T\ntform = trans.SimilarityTransform()\ntform.estimate(landmark5, src)\nM = tform.params[0:2, :]\nimg = cv2.warpAffine(image, M, (112, 112),\n                        borderValue=0.0)\ncv2.imwrite(\"warped.jpg\", cv2.cvtColor(img, cv2.COLOR_RGB2BGR))\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yiyuezhuo/mtcnn-onnxruntime",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mtcnn-onnxruntime",
    "package_url": "https://pypi.org/project/mtcnn-onnxruntime/",
    "platform": "",
    "project_url": "https://pypi.org/project/mtcnn-onnxruntime/",
    "project_urls": {
      "Homepage": "https://github.com/yiyuezhuo/mtcnn-onnxruntime"
    },
    "release_url": "https://pypi.org/project/mtcnn-onnxruntime/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "MTCNN face detection using onnx runtime or OpenCV",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10127233,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9f6e67afcbd69fe9f144f2b4d92c14a4eeb36d161e82a6a6a4a0dc98e4a9f30",
          "md5": "bedbbb3ed754ab3eadde5c865ee6cdbe",
          "sha256": "cf040107b1291431cbc198efd76109a68a8dc1e3fc2c1f67bbfd4c1a02469c32"
        },
        "downloads": -1,
        "filename": "mtcnn-onnxruntime-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bedbbb3ed754ab3eadde5c865ee6cdbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1865234,
        "upload_time": "2021-04-21T09:49:36",
        "upload_time_iso_8601": "2021-04-21T09:49:36.117230Z",
        "url": "https://files.pythonhosted.org/packages/c9/f6/e67afcbd69fe9f144f2b4d92c14a4eeb36d161e82a6a6a4a0dc98e4a9f30/mtcnn-onnxruntime-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9f6e67afcbd69fe9f144f2b4d92c14a4eeb36d161e82a6a6a4a0dc98e4a9f30",
        "md5": "bedbbb3ed754ab3eadde5c865ee6cdbe",
        "sha256": "cf040107b1291431cbc198efd76109a68a8dc1e3fc2c1f67bbfd4c1a02469c32"
      },
      "downloads": -1,
      "filename": "mtcnn-onnxruntime-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bedbbb3ed754ab3eadde5c865ee6cdbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1865234,
      "upload_time": "2021-04-21T09:49:36",
      "upload_time_iso_8601": "2021-04-21T09:49:36.117230Z",
      "url": "https://files.pythonhosted.org/packages/c9/f6/e67afcbd69fe9f144f2b4d92c14a4eeb36d161e82a6a6a4a0dc98e4a9f30/mtcnn-onnxruntime-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}