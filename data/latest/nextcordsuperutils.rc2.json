{
  "info": {
    "author": "Custom",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "<h1 align=\"center\">nextcordSuperUtils</h1>\n<h1 align=\"center\">(updated fork of discordSuperUtils)</h1>\n\n<p align=\"center\">\n  <a href=\"https://codefactor.io/repository/github/Cu3t0m/nextcordSuperUtils/\"><img src=\"https://img.shields.io/codefactor/grade/github/Cu3t0m/nextcordSuperUtils?style=flat-square\" /></a>\n  <a href=\"https://nextcord.gg/zhwcpTBBeC\"><img src=\"https://img.shields.io/nextcord/863388828734586880?logo=nextcord&color=blue&style=flat-square\" /></a>\n  <a href=\"https://pepy.tech/project/nextcordSuperUtils\"><img src=\"https://img.shields.io/pypi/dm/nextcordSuperUtils?color=green&style=flat-square\" /></a>\n  <a href=\"https://pypi.org/project/nextcordSuperUtils/\"><img src=\"https://img.shields.io/pypi/v/nextcordSuperUtils?style=flat-square\" /></a>\n  <a href=\"\"><img src=\"https://img.shields.io/pypi/l/nextcordSuperUtils?style=flat-square\" /></a>\n  <a href=\"https://github.com/psf/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square\">\n    <br/>\n  <a href=\"https://nextcordSuperUtils.gitbook.io/nextcordSuperUtils/\">Documentation</a>\n  <a href=\"https://nextcordsuperutils.readthedocs.io/en/latest/\">Secondary Documentation</a>\n</p>\n\n<p align=\"center\">\n   A modern python module including many useful features that make nextcord bot programming extremely easy.\n    <br/>\n   <b>The documentation is not done. if you have any questions, feel free to ask them in our <a href=\"https://discord.gg/zhwcpTBBeC\">nextcord server.</a></b>\n</p>\n\nFeatures\n-------------\n\n\n- Very easy to use and user-friendly.\n- Object Oriented.\n- Modern Leveling Manager.\n- Modern Music/Audio playing manager. [Lavalink and FFmpeg support]\n- Modern Async Database Manager (SQLite, MongoDB, PostgreSQL, MySQL, MariaDB).\n- Modern Paginator.\n- Modern Reaction Manager.\n- Modern Economy Manager.\n- Modern Image Manager (PIL).\n- Modern Invite Tracker.\n- Modern Command Hinter.\n- Modern FiveM Server Parser.\n- Modern Birthday Manager.\n- Modern Prefix Manager.\n- Includes easy to use convertors.\n- Modern spotify client that is optimized for player fetching.\n- Modern Punishment Manager (Kick, Ban, Infractions, Mutes)\n- Modern Template Manager.\n- Modern CogManager that supports usage of managers in nextcord cogs.\n- Modern MessageFilter and AntiSpam.\n- Customizable ModMail Manager\n- Modern Youtube client that is optimized for player fetching.\n- And many more!\n(MORE COMING SOON!)\n\nInstallation\n--------------\n\nInstalling nextcordSuperUtils is very easy.\n\n```sh\npython -m pip install nextcordSuperUtils\n```\n\nExamples\n--------------\n\n### Leveling Example (With Role Manager) ###\n\n```py\nimport nextcord\nfrom nextcord.ext import commands\n\nimport nextcordSuperUtils\n\nbot = commands.Bot(command_prefix=\"-\", intents=nextcord.Intents.all())\nLevelingManager = nextcordSuperUtils.LevelingManager(bot, award_role=True)\nImageManager = (\n    nextcordSuperUtils.ImageManager()\n)  # LevelingManager uses ImageManager to create the rank command.\n\n\n@bot.event\nasync def on_ready():\n    database = nextcordSuperUtils.DatabaseManager.connect(...)\n    await LevelingManager.connect_to_database(database, [\"xp\", \"roles\", \"role_list\"])\n\n    print(\"Leveling manager is ready.\", bot.user)\n\n\n@LevelingManager.event()\nasync def on_level_up(message, member_data, roles):\n    await message.reply(\n        f\"You are now level {await member_data.level()}\"\n        + (f\", you have received the {roles[0]}\" f\" role.\" if roles else \"\")\n    )\n\n\n@bot.command()\nasync def rank(ctx):\n    member_data = await LevelingManager.get_account(ctx.author)\n\n    if not member_data:\n        await ctx.send(f\"I am still creating your account! please wait a few seconds.\")\n        return\n\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\n    member = [x for x in guild_leaderboard if x.member == ctx.author.id]\n\n    image = await ImageManager.create_leveling_profile(\n        ctx.author,\n        member_data,\n        nextcordSuperUtils.Backgrounds.GALAXY,\n        (127, 255, 0),\n        guild_leaderboard.index(member[0]) + 1 if member else -1,\n        outline=5,\n    )\n    await ctx.send(file=image)\n\n\n@bot.command()\nasync def set_roles(ctx, interval: int, *roles: nextcord.Role):\n    await LevelingManager.set_interval(ctx.guild, interval)\n    await LevelingManager.set_roles(ctx.guild, roles)\n\n    await ctx.send(\n        f\"Successfully set the interval to {interval} and role list to {', '.join(role.name for role in roles)}\"\n    )\n\n\n@bot.command()\nasync def leaderboard(ctx):\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\n    formatted_leaderboard = [\n        f\"Member: {x.member}, XP: {await x.xp()}\" for x in guild_leaderboard\n    ]\n\n    await nextcordSuperUtils.PageManager(\n        ctx,\n        nextcordSuperUtils.generate_embeds(\n            formatted_leaderboard,\n            title=\"Leveling Leaderboard\",\n            fields=25,\n            description=f\"Leaderboard of {ctx.guild}\",\n        ),\n    ).run()\n\n\nbot.run(\"token\")\n```\n\n![Leveling Manager Example](https://media.giphy.com/media/ey1Iv2HlYYLPy0bm9p/giphy.gif)\n\n### Playing Example ### \n\n```py\nfrom math import floor\n\nfrom nextcord.ext import commands\n\nimport nextcordSuperUtils\nfrom nextcordSuperUtils import MusicManager\nimport nextcord\n\nclient_id = \"\"\nclient_secret = \"\"\n\nbot = commands.Bot(command_prefix=\"-\", intents=nextcord.Intents.all())\n# MusicManager = MusicManager(bot, spotify_support=False)\n\n\nMusicManager = MusicManager(\n    bot, client_id=client_id, client_secret=client_secret, spotify_support=True\n)\n\n\n# if using spotify support use this instead ^^^\n\n\n@MusicManager.event()\nasync def on_music_error(ctx, error):\n    raise error  # add your error handling here! Errors are listed in the documentation.\n\n\n@MusicManager.event()\nasync def on_queue_end(ctx):\n    print(f\"The queue has ended in {ctx}\")\n    # You could wait and check activity, etc...\n\n\n@MusicManager.event()\nasync def on_inactivity_disconnect(ctx):\n    print(f\"I have left {ctx} due to inactivity..\")\n\n\n@MusicManager.event()\nasync def on_play(ctx, player):\n    await ctx.send(f\"Playing {player}\")\n\n\n@bot.event\nasync def on_ready():\n    # database = nextcordSuperUtils.DatabaseManager.connect(...)\n    # await MusicManager.connect_to_database(database, [\"playlists\"])\n\n    print(\"Music manager is ready.\", bot.user)\n\n\n@bot.command()\nasync def leave(ctx):\n    if await MusicManager.leave(ctx):\n        await ctx.send(\"Left Voice Channel\")\n\n\n@bot.command()\nasync def np(ctx):\n    if player := await MusicManager.now_playing(ctx):\n        duration_played = await MusicManager.get_player_played_duration(ctx, player)\n        # You can format it, of course.\n\n        await ctx.send(\n            f\"Currently playing: {player}, \\n\"\n            f\"Duration: {duration_played}/{player.duration}\"\n        )\n\n\n@bot.command()\nasync def join(ctx):\n    if await MusicManager.join(ctx):\n        await ctx.send(\"Joined Voice Channel\")\n\n\n@bot.group(invoke_without_command=True)\nasync def playlists(ctx, user: nextcord.User):\n    user_playlists = await MusicManager.get_user_playlists(user)\n\n    formatted_playlists = [\n        f\"ID: '{user_playlist.id}'\\nTitle: '{user_playlist.playlist.title}'\\nTotal Songs: {len(user_playlist.playlist.songs)}\"\n        for user_playlist in user_playlists\n    ]\n\n    embeds = nextcordSuperUtils.generate_embeds(\n        formatted_playlists,\n        f\"Playlists of {user}\",\n        f\"Shows {user.mention}'s playlists.\",\n        25,\n        string_format=\"{}\",\n    )\n\n    page_manager = nextcordSuperUtils.PageManager(ctx, embeds, public=True)\n    await page_manager.run()\n\n\n@playlists.command()\nasync def add(ctx, url: str):\n    added_playlist = await MusicManager.add_playlist(ctx.author, url)\n\n    if not added_playlist:\n        await ctx.send(\"Playlist URL not found!\")\n        return\n\n    await ctx.send(f\"Playlist added with ID {added_playlist.id}\")\n\n\n@playlists.command()\nasync def play(ctx, playlist_id: str):\n    # This command is just an example, and not something you should do.\n    # The saved playlist system is supposed to provide fast, easy and simple playing, and the user should not look for\n    # the right playlist id before playing, as that defeats the whole point.\n    # Instead of playing using a playlist id, I recommend playing using indexes.\n    # Please, if you are playing using indexes, find the playlist id you need by getting all the user's playlists\n    # and then finding the id from there.\n    # Find the user's playlists using MusicManager.get_user_playlists(ctx.author, partial=True).\n    # Make sure partial is True to speed up the fetching progress (incase you want to access the playlist data,\n    # you can set it to False, of course).\n    # Using these playlists, find the id the user wants, and play it (or whatever else you want to do with it).\n    # Be creative!\n\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\n\n    if not user_playlist:\n        await ctx.send(\"That playlist does not exist!\")\n        return\n\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\n        await MusicManager.join(ctx)\n\n    async with ctx.typing():\n        players = await MusicManager.create_playlist_players(\n            user_playlist.playlist, ctx.author\n        )\n\n    if players:\n        if await MusicManager.queue_add(\n            players=players, ctx=ctx\n        ) and not await MusicManager.play(ctx):\n            await ctx.send(f\"Added playlist {user_playlist.playlist.title}\")\n\n    else:\n        await ctx.send(\"Query not found.\")\n\n\n@playlists.command()\nasync def remove(ctx, playlist_id: str):\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\n\n    if not user_playlist:\n        await ctx.send(f\"Playlist with id {playlist_id} is not found.\")\n        return\n\n    await user_playlist.delete()\n    await ctx.send(f\"Playlist {user_playlist.playlist.title} has been deleted\")\n\n\n@bot.command()\nasync def play(ctx, *, query: str):\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\n        await MusicManager.join(ctx)\n\n    async with ctx.typing():\n        players = await MusicManager.create_player(query, ctx.author)\n\n    if players:\n        if await MusicManager.queue_add(\n            players=players, ctx=ctx\n        ) and not await MusicManager.play(ctx):\n            await ctx.send(\"Added to queue\")\n\n    else:\n        await ctx.send(\"Query not found.\")\n\n\n@bot.command()\nasync def lyrics(ctx, query: str = None):\n    if response := await MusicManager.lyrics(ctx, query):\n        title, author, query_lyrics = response\n\n        splitted = query_lyrics.split(\"\\n\")\n        res = []\n        current = \"\"\n        for i, split in enumerate(splitted):\n            if len(splitted) <= i + 1 or len(current) + len(splitted[i + 1]) > 1024:\n                res.append(current)\n                current = \"\"\n                continue\n            current += split + \"\\n\"\n\n        page_manager = nextcordSuperUtils.PageManager(\n            ctx,\n            [\n                nextcord.Embed(\n                    title=f\"Lyrics for '{title}' by '{author}', (Page {i + 1}/{len(res)})\",\n                    description=x,\n                )\n                for i, x in enumerate(res)\n            ],\n            public=True,\n        )\n        await page_manager.run()\n    else:\n        await ctx.send(\"No lyrics found.\")\n\n\n@bot.command()\nasync def pause(ctx):\n    if await MusicManager.pause(ctx):\n        await ctx.send(\"Player paused.\")\n\n\n@bot.command()\nasync def resume(ctx):\n    if await MusicManager.resume(ctx):\n        await ctx.send(\"Player resumed.\")\n\n\n@bot.command()\nasync def volume(ctx, volume: int):\n    await MusicManager.volume(ctx, volume)\n\n\n@bot.command()\nasync def loop(ctx):\n    is_loop = await MusicManager.loop(ctx)\n\n    if is_loop is not None:\n        await ctx.send(f\"Looping toggled to {is_loop}\")\n\n\n@bot.command()\nasync def shuffle(ctx):\n    is_shuffle = await MusicManager.shuffle(ctx)\n\n    if is_shuffle is not None:\n        await ctx.send(f\"Shuffle toggled to {is_shuffle}\")\n\n\n@bot.command()\nasync def autoplay(ctx):\n    is_autoplay = await MusicManager.autoplay(ctx)\n\n    if is_autoplay is not None:\n        await ctx.send(f\"Autoplay toggled to {is_autoplay}\")\n\n\n@bot.command()\nasync def queueloop(ctx):\n    is_loop = await MusicManager.queueloop(ctx)\n\n    if is_loop is not None:\n        await ctx.send(f\"Queue looping toggled to {is_loop}\")\n\n\n@bot.command()\nasync def complete_queue(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_queue = [\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\\n\"\n            f\"Position: {i - ctx_queue.pos}\"\n            for i, x in enumerate(ctx_queue.queue)\n        ]\n\n        num_of_fields = 25\n\n        embeds = nextcordSuperUtils.generate_embeds(\n            formatted_queue,\n            \"Complete Song Queue\",\n            \"Shows the complete song queue.\",\n            num_of_fields,\n            string_format=\"{}\",\n        )\n\n        page_manager = nextcordSuperUtils.PageManager(\n            ctx, embeds, public=True, index=floor(ctx_queue.pos / 25)\n        )\n        await page_manager.run()\n\n\n@bot.command()\nasync def goto(ctx, position: int):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        new_pos = ctx_queue.pos + position\n        if not 0 <= new_pos < len(ctx_queue.queue):\n            await ctx.send(\"Position is out of bounds.\")\n            return\n\n        await MusicManager.goto(ctx, new_pos)\n        await ctx.send(f\"Moved to position {position}\")\n\n\n@bot.command()\nasync def history(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_history = [\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\"\n            for x in ctx_queue.history\n        ]\n\n        embeds = nextcordSuperUtils.generate_embeds(\n            formatted_history,\n            \"Song History\",\n            \"Shows all played songs\",\n            25,\n            string_format=\"{}\",\n        )\n\n        page_manager = nextcordSuperUtils.PageManager(ctx, embeds, public=True)\n        await page_manager.run()\n\n\n@bot.command()\nasync def skip(ctx, index: int = None):\n    await MusicManager.skip(ctx, index)\n\n\n@bot.command()\nasync def queue(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_queue = [\n            f\"Title: '{x.title}\\nRequester: {x.requester and x.requester.mention}\"\n            for x in ctx_queue.queue[ctx_queue.pos + 1 :]\n        ]\n\n        embeds = nextcordSuperUtils.generate_embeds(\n            formatted_queue,\n            \"Queue\",\n            f\"Now Playing: {await MusicManager.now_playing(ctx)}\",\n            25,\n            string_format=\"{}\",\n        )\n\n        page_manager = nextcordSuperUtils.PageManager(ctx, embeds, public=True)\n        await page_manager.run()\n\n\n@bot.command()\nasync def rewind(ctx, index: int = None):\n    await MusicManager.previous(ctx, index, no_autoplay=True)\n\n\n@bot.command()\nasync def ls(ctx):\n    if queue := await MusicManager.get_queue(ctx):\n        loop = queue.loop\n        loop_status = None\n\n        if loop == nextcordSuperUtils.Loops.LOOP:\n            loop_status = \"Looping enabled.\"\n\n        elif loop == nextcordSuperUtils.Loops.QUEUE_LOOP:\n            loop_status = \"Queue looping enabled.\"\n\n        elif loop == nextcordSuperUtils.Loops.NO_LOOP:\n            loop_status = \"No loop enabled.\"\n\n        if loop_status:\n            await ctx.send(loop_status)\n\n\n@bot.command()\nasync def move(ctx, player_index: int, index: int):\n    await MusicManager.move(ctx, player_index, index)\n\n\nbot.run(\"token\")\n```\n\n![MusicManager Example](https://media.giphy.com/media/SF6K0zIVHl6RCQ0Aqk/giphy.gif)\n\nMore examples are listed in the examples folder.\n\nKnown Issues\n--------------\n\n- Removing an animated emoji wont be recognized as a reaction role, as it shows up as not animated for some reason, breaking the reaction matcher. (nextcord API Related)\n- Leveling might call the on_level_up event multiple times, resulting in duplicate messages, caused by duplicate records in the leveling table. (Fixed)\n\nSupport\n--------------\n\n- **[Support Server](https://nextcord.gg/zhwcpTBBeC)**\n- **[Documentation](https://nextcordSuperUtils.gitbook.io/nextcordSuperUtils/)**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Cu3t0m/nextcordsuperutils/archive/refs/tags/v0.3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Cu3t0m/nextcord-super-utils",
    "keywords": "nextcord,easy,nextcord.py,music,download,links,images,videos,audio,bot,paginator,economy,reaction,reaction roles,database,database manager",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nextcordSuperUtils",
    "package_url": "https://pypi.org/project/nextcordSuperUtils/",
    "platform": "",
    "project_url": "https://pypi.org/project/nextcordSuperUtils/",
    "project_urls": {
      "Download": "https://github.com/Cu3t0m/nextcordsuperutils/archive/refs/tags/v0.3.0.tar.gz",
      "Homepage": "https://github.com/Cu3t0m/nextcord-super-utils"
    },
    "release_url": "https://pypi.org/project/nextcordSuperUtils/0.3.1/",
    "requires_dist": [
      "nextcord.py",
      "Pillow",
      "requests",
      "spotipy",
      "aiosqlite",
      "motor",
      "aiopg",
      "aiomysql",
      "nextcord-components",
      "pytz",
      "wavelink",
      "youtube-dl"
    ],
    "requires_python": "",
    "summary": "Discord Bot Development made easy!",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12390635,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "151788e9089241037c878fb3d9f05a2f9c04766f15fc1faaf0341c23948bf827",
          "md5": "d01e30119fdd836a16daa1f5a958ea88",
          "sha256": "4ee6ffbbedca4df8e9ba410f13bc2f41a799f92a948d4c2cdf91ddbd30abec4a"
        },
        "downloads": -1,
        "filename": "nextcordSuperUtils-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d01e30119fdd836a16daa1f5a958ea88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55619,
        "upload_time": "2021-12-23T14:27:23",
        "upload_time_iso_8601": "2021-12-23T14:27:23.780903Z",
        "url": "https://files.pythonhosted.org/packages/15/17/88e9089241037c878fb3d9f05a2f9c04766f15fc1faaf0341c23948bf827/nextcordSuperUtils-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d8ef50919efb523d2530e3e8fa30254a0126d0204d042d3ed93b208e8bbef69",
          "md5": "9282be8d7aa4440315a09b92127763bf",
          "sha256": "09520129c7fb0b01aae5781bb0f75e8ad7ae33e4f279860213674e96894e3408"
        },
        "downloads": -1,
        "filename": "nextcordSuperUtils-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9282be8d7aa4440315a09b92127763bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50003,
        "upload_time": "2021-12-23T14:27:26",
        "upload_time_iso_8601": "2021-12-23T14:27:26.067328Z",
        "url": "https://files.pythonhosted.org/packages/1d/8e/f50919efb523d2530e3e8fa30254a0126d0204d042d3ed93b208e8bbef69/nextcordSuperUtils-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92f96c7c2d8a1ee96649ca4efb2c672c544e9ec735bef576cc2e8345c681fb89",
          "md5": "4d55114a51b451120ece8b9938d40607",
          "sha256": "06b86f8f644223a490190688eb1faaff2b76fc2ae3c0bfd77dffa93712495c0f"
        },
        "downloads": -1,
        "filename": "nextcordSuperUtils-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d55114a51b451120ece8b9938d40607",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55633,
        "upload_time": "2021-12-23T14:46:34",
        "upload_time_iso_8601": "2021-12-23T14:46:34.983477Z",
        "url": "https://files.pythonhosted.org/packages/92/f9/6c7c2d8a1ee96649ca4efb2c672c544e9ec735bef576cc2e8345c681fb89/nextcordSuperUtils-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697d4cab2414958706231926642998e45098734f4802d484a446965a96adbd3e",
          "md5": "cf187401321a400c82363c2449831a7a",
          "sha256": "1ad10548ccd5838473d2eb0c967006dcaa5a74fb6d81863b77d3509475939721"
        },
        "downloads": -1,
        "filename": "nextcordSuperUtils-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cf187401321a400c82363c2449831a7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49968,
        "upload_time": "2021-12-23T14:46:37",
        "upload_time_iso_8601": "2021-12-23T14:46:37.221018Z",
        "url": "https://files.pythonhosted.org/packages/69/7d/4cab2414958706231926642998e45098734f4802d484a446965a96adbd3e/nextcordSuperUtils-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92f96c7c2d8a1ee96649ca4efb2c672c544e9ec735bef576cc2e8345c681fb89",
        "md5": "4d55114a51b451120ece8b9938d40607",
        "sha256": "06b86f8f644223a490190688eb1faaff2b76fc2ae3c0bfd77dffa93712495c0f"
      },
      "downloads": -1,
      "filename": "nextcordSuperUtils-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d55114a51b451120ece8b9938d40607",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 55633,
      "upload_time": "2021-12-23T14:46:34",
      "upload_time_iso_8601": "2021-12-23T14:46:34.983477Z",
      "url": "https://files.pythonhosted.org/packages/92/f9/6c7c2d8a1ee96649ca4efb2c672c544e9ec735bef576cc2e8345c681fb89/nextcordSuperUtils-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "697d4cab2414958706231926642998e45098734f4802d484a446965a96adbd3e",
        "md5": "cf187401321a400c82363c2449831a7a",
        "sha256": "1ad10548ccd5838473d2eb0c967006dcaa5a74fb6d81863b77d3509475939721"
      },
      "downloads": -1,
      "filename": "nextcordSuperUtils-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cf187401321a400c82363c2449831a7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49968,
      "upload_time": "2021-12-23T14:46:37",
      "upload_time_iso_8601": "2021-12-23T14:46:37.221018Z",
      "url": "https://files.pythonhosted.org/packages/69/7d/4cab2414958706231926642998e45098734f4802d484a446965a96adbd3e/nextcordSuperUtils-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}