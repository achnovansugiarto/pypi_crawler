{
  "info": {
    "author": "Joseph TOUZET",
    "author_email": "joseph.touzet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "A library to compute N-D convolutions, transposed convolutions and recursive convolution in pytorch, using `Linear` filter or arbitrary functions as filter. It also gives the option of automaticly finding convolution parameters to match a desired output shape.\n\n# Instalation\n\nUse `pip3 install torchConvNd`\n\n# Documentation\n\n## convNd\n```python\nconvNd(x, weight, kernel, stride=1, dilation=1, padding=0, bias=None, padding_mode='constant', padding_value=0)\n```\n\nN-Dimensional convolution.\n\n#### *Inputs* :\n\n__x__ : `torch.tensor` of shape `(batch_size, C_in, *shape)`.\n\n__Weight__ : `torch.tensor` of size `(C_in * kernel[0] * kernel[1] * ...kernel[n_dims], C_out)`.\n\n__kernel__ : array-like or int, kernel size of the convolution.\n\n__stride__ : array-like or int, stride length of the convolution.\n\n__dilation__ : array-like or int, dilation of the convolution.\n\n__padding__ : `None`, array-like or int, padding size.\n\n__bias__ : `None` or `torch.tensor` of size `(C_out, )`.\n\n__padding\\_mode__,  __padding\\_value__: see [`pad`](#pad).\n\n#### _Outputs_ :\n\n__out__ : `torch.tensor` of shape `(batch_size, C_out, *shape_out)`.\n\n## ConvNd\n```python\nConvNd(in_channels, out_channels, kernel, stride=1, dilation=1, padding=0, bias=False, padding_mode='constant', padding_value=0)\n```\n\nEquivalent of [`convNd`](#convNd) as a `torch.nn.Module` class.\n\n#### *Inputs* :\n\n__in\\_channels__ : int, number of in channels.\n\n__out\\_channels__ : int, number of out channels.\n\n__bias__ : boolean, controls the usage or not of biases.\n\n__kernel__, __stride__, __dilation__, __padding__, __padding\\_mode__,  __padding\\_value__: Same as in [`convNd`](#convNd).\n\n## convTransposeNd\n```python\nconvTransposeNd(x, weight, kernel, stride=1, dilation=1, padding=0, bias=None, padding_mode='constant', padding_value=0)\n```\n\nTransposed convolution (using [`repeat_intereleave`](https://pytorch.org/docs/stable/torch.html#torch.repeat_interleave)).\n\n#### *Inputs* :\n\n__x__ : `torch.tensor` of shape `(batch_size, C_in, *shape)`.\n\n__Weight__ : `torch.tensor` of size `(C_in * kernel[0] * kernel[1] * ...kernel[n_dims], C_out)`.\n\n__kernel__ : array-like or int, kernel size of the transposed convolution.\n\n__stride__ : array-like or int, stride length of the transposed convolution.\n\n__dilation__ : array-like or int, dilation of the convolution.\n\n__padding__ : `None`, array-like or int, padding size.\n\n__bias__ : `None` or `torch.tensor` of size `(C_out, )`.\n\n__padding\\_mode__,  __padding\\_value__: see [`pad`](#pad).\n\n#### _Outputs_ :\n\n__out__ : `torch.tensor` of shape `(batch_size, *shape_out)`.\n\n## ConvTransposeNd\n```python\nConvTransposeNd(in_channels, out_channels, kernel, stride=1, dilation=1, padding=0, bias=None, padding_mode='constant', padding_value=0)\n```\n\nEquivalent of [`convTransposeNd`](#convTransposeNd) as a `torch.nn.Module` class.\n\n#### *Inputs* :\n\n__in\\_channels__ : int, number of in channels.\n\n__out\\_channels__ : int, number of out channels.\n\n__bias__ : boolean, controls the usage or not of biases.\n\n__kernel__, __stride__, __dilation__, __padding__, __padding\\_mode__,  __padding\\_value__: Same as in [`convTransposeNd`](#convTransposeNd).\n\n\n## convNdFunc\n```python\nconvNdFunc(x, func, kernel, stride=1, padding=0, stride_transpose=1, padding_mode='constant', padding_value=0, *args)\n```\n\nEquivalent of [`convNd`](#convNd) using an arbitrary filter `func`.\n\n#### *Inputs* :\n\n__x__ : `torch.tensor` of shape `(batch_size, C_in, *shape)`.\n\n__func__ : function, taking a `torch.tensor` of shape `(batch_size, C_in, *kernel)` and outputs a `torch.tensor` of shape `(batch_size, C_out)`.\n\n__kernel__ : array-like or int, kernel size of the  convolution.\n\n__stride__ : array-like or int, stride length of the convolution.\n\n__dilation__ : array-like or int, dilation of the convolution.\n\n__padding__ : `None`, array-like or int, padding size.\n\n__stride\\_transpose__ : array-like or int, equivalent to `stride` in [`convTransposeNd`](#convTransposeNd).\n\n__padding\\_mode__,  __padding\\_value__: see [`pad`](#pad).\n\n__*args__: additional arguments to pass to `func`.\n\n#### _Outputs_ :\n\n__out__ : `torch.tensor` of shape `(batch_size, *shape_out)`.\n\n__*(additional returns)__ : any additional returns of `func`.\n\n## ConvNdFunc\n```python\nConvNdFunc(func, kernel, stride=1, padding=0, padding_mode='constant', padding_value=0)\n```\n\nEquivalent of [`convNdFunc`](#convNdFunc) as a `torch.nn.Module` class.\n\n#### *Inputs* :\n\n__func__, __kernel__, __stride__, __dilation__, __padding__, __stride\\_transpose__, __padding\\_mode__, __padding\\_value__ : Same as in [`convNdFunc`](#convNdFunc).\n\n# torchConvNd.Utils\n\n## listify\n```python\nlistify(x, dims=1)\n```\n\nTransform `x` to an iterable if it is not.\n\n#### *Inputs* :\n\n__x__ : array like or non iterable object (or string), object to listify.\n\n__dims__ : int, array size to obtain.\n\n#### _Outputs_ :\n\n__out__ :  array like, listified version of x.\n\n## convShape\n```python\nconvShape(input_shape, kernel, stride=1, dilation=1, padding=0, stride_transpose=1)\n```\n\nCompute the ouput shape of a convolution.\n\n#### *Inputs* :\n\n__input\\_shape__ : array-like or int, shape of the input tensor.\n\n__kernel__ : array-like or int, kernel size of the convolution.\n\n__stride__ : array-like or int, stride length of the convolution.\n\n__dilation__ : array-like or int, dilation of the convolution.\n\n__padding__ : `None`, array-like or int, padding size.\n\n__stride\\_transpose__ : array-like or int, equivalent to `stride` in [`convTransposeNd`](#convTransposeNd).\n\n#### _Outputs_ :\n\n__shape__ : array-like or int, predicted output shape of the convolution.\n\n## autoShape\n```python\nautoShape(input_shape, kernel, output_shape, max_dilation=3)\n```\n\nCompute the optimal parameters `stride`, `dilation`, `padding` and `stride_transpose` to match `output_shape`.\n\n#### *Inputs* :\n\n__input\\_shape__ : array-like or int, shape of the input tensor.\n\n__kernel__ : array-like or int, kernel size of the  convolution.\n\n__output\\_shape__ : array-like or int, target shape of the convolution.\n\n__max\\_dilation__ : array-like or int, maximum value of dialtion.\n\n#### _Outputs_ :\n\n__kernel__ : array-like or int, `listified(kernel, len(input_shape))` if `input_shape` is a list, else `kernel`.\n\n__stride__ : array-like or int, stride length of the convolution.\n\n__dilation__ : array-like or int, dilation of the convolution.\n\n__padding__ : array-like or int, padding size.\n\n__stride\\_transpose__ : array-like or int, equivalent to `stride` in [`convTransposeNd`](#convTransposeNd).\n\n## pad\n```python\npad(x, padding, padding_mode='constant', padding_value=0)\n```\n\nBased on [torch.nn.functional.pad](https://pytorch.org/docs/stable/nn.functional.html#pad).\n\n#### *Inputs* :\n\n__x__ :  `torch.tensor`, input tensor.\n\n__padding__ : array-like or int, size of the padding (identical on each size).\n\n__padding\\_mode__ : 'constant', 'reflect', 'replicate' or 'circular', see [torch.nn.functional.pad](https://pytorch.org/docs/stable/nn.functional.html#pad).\n\n__padding\\_value__ : float, value to pad with if `padding_mode` id 'constant'.\n\n#### _Outputs_ :\n\n__out__ :  `torch.tensor`, paded tensor.\n\n## Pad\n```python\nPad(padding, padding_mode='constant', padding_value=0)\n```\n\nEquivalent of [`pad`](#pad) which returns a function.\n\n#### *Inputs* :\n\n__padding__, __padding\\_mode__, __padding\\_value__ : same as with [`pad`](#pad)\n\n## view\n```python\nview(x, kernel, stride=1)\n```\n\nGenerate a view (for a convolution) with parameters `kernel` and `stride`.\n\n#### *Inputs* :\n\n__x__ :  `torch.tensor`, input tensor.\n\n__kernel__ : array-like or int, kernel size of the convolution.\n\n__stride__ : array-like or int, stride length of the convolution.\n\n#### *Outputs* :\n\n__out__ :  `torch.tensor`, strided tensor.\n\n## View\n```python\nView(kernel, stride=1)\n```\n\nEquivalent of [`view`](#view) which returns a function.\n\n#### *Inputs* :\n\n__kernel__, __stride__ : same as in [`view`](#view).\n\n## Flatten\n```python\nFlatten()\n```\n\nA `torch.nn.Module` class that takes a tensor of shape `(N, i, j, k...)` and reshape it to `(N, i*j*k*...)`.\n\n## Reshape\n```python\nReshape(shape)\n```\n\nA `torch.nn.Module` class that takes a tensor of shape `(N, i)` and reshape it to `(N, *shape)`.\n\n#### *Inputs* :\n\n__shape__ : array-like or int, shape to obtain.\n\n## Clip\n```python\nClip(shape)\n```\n\nA `torch.nn.Module` that takes a slice of a tensor of size `shape` (in the center).\n\n#### *Inputs* :\n\n__shape__ : array-like or int, shape to obtain (doesn't affect an axis where `shape=-1`).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jolatechno/torchConvNd",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchConvNd",
    "package_url": "https://pypi.org/project/torchConvNd/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchConvNd/",
    "project_urls": {
      "Homepage": "https://github.com/jolatechno/torchConvNd"
    },
    "release_url": "https://pypi.org/project/torchConvNd/0.2.0/",
    "requires_dist": [
      "numpy (>=1.18.0)",
      "torch (>=1.3.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "a library to create convolution from any torch network",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6516605,
  "releases": {
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d68c54975c1dfbc39eae89a17dea49ccb5f581c0fd8a0dc20da097b6d3d8850",
          "md5": "83344bc6514513aaae680646ddb51a04",
          "sha256": "2d3c65f3e61183d728ae2417e7f52479ed8721044ea9a4b9a738ceff28c064af"
        },
        "downloads": -1,
        "filename": "torchConvNd-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83344bc6514513aaae680646ddb51a04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21052,
        "upload_time": "2020-01-15T19:04:58",
        "upload_time_iso_8601": "2020-01-15T19:04:58.883549Z",
        "url": "https://files.pythonhosted.org/packages/6d/68/c54975c1dfbc39eae89a17dea49ccb5f581c0fd8a0dc20da097b6d3d8850/torchConvNd-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bada6a7f2ace69459f6d9869715451d16079f9e3c89821cf93055fa172ebc1e1",
          "md5": "dbd600a53d661010046e22bc5ea5b90c",
          "sha256": "fc407ec6ba4f36c3dce509795e4e27d03f2ad72985c1429a06200333a518e580"
        },
        "downloads": -1,
        "filename": "torchConvNd-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "dbd600a53d661010046e22bc5ea5b90c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6499,
        "upload_time": "2020-01-15T19:05:00",
        "upload_time_iso_8601": "2020-01-15T19:05:00.593357Z",
        "url": "https://files.pythonhosted.org/packages/ba/da/6a7f2ace69459f6d9869715451d16079f9e3c89821cf93055fa172ebc1e1/torchConvNd-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47806973e60c0da1ceea31b5b538c5a34f4a0b0e845d463f3dea49cfabc6d627",
          "md5": "9a1975ce38fe0281655fe448a8a0458c",
          "sha256": "093cd2d70a926867785f3fb1ac36da2373c0526f0d7d517924035fe781b75020"
        },
        "downloads": -1,
        "filename": "torchConvNd-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a1975ce38fe0281655fe448a8a0458c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21018,
        "upload_time": "2020-01-24T22:37:02",
        "upload_time_iso_8601": "2020-01-24T22:37:02.285445Z",
        "url": "https://files.pythonhosted.org/packages/47/80/6973e60c0da1ceea31b5b538c5a34f4a0b0e845d463f3dea49cfabc6d627/torchConvNd-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea9b73f0d25f2ff6305c482a78e593cdb89dd0435c69dc6a9083e0a0f8a2cb29",
          "md5": "aaa66358588626a541a515663eded722",
          "sha256": "9f0fa648f82ebd504222cf58b86b3400ba0b2509f37a36df060af319f0456a85"
        },
        "downloads": -1,
        "filename": "torchConvNd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaa66358588626a541a515663eded722",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6016,
        "upload_time": "2020-01-24T22:37:04",
        "upload_time_iso_8601": "2020-01-24T22:37:04.594694Z",
        "url": "https://files.pythonhosted.org/packages/ea/9b/73f0d25f2ff6305c482a78e593cdb89dd0435c69dc6a9083e0a0f8a2cb29/torchConvNd-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47806973e60c0da1ceea31b5b538c5a34f4a0b0e845d463f3dea49cfabc6d627",
        "md5": "9a1975ce38fe0281655fe448a8a0458c",
        "sha256": "093cd2d70a926867785f3fb1ac36da2373c0526f0d7d517924035fe781b75020"
      },
      "downloads": -1,
      "filename": "torchConvNd-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a1975ce38fe0281655fe448a8a0458c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21018,
      "upload_time": "2020-01-24T22:37:02",
      "upload_time_iso_8601": "2020-01-24T22:37:02.285445Z",
      "url": "https://files.pythonhosted.org/packages/47/80/6973e60c0da1ceea31b5b538c5a34f4a0b0e845d463f3dea49cfabc6d627/torchConvNd-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea9b73f0d25f2ff6305c482a78e593cdb89dd0435c69dc6a9083e0a0f8a2cb29",
        "md5": "aaa66358588626a541a515663eded722",
        "sha256": "9f0fa648f82ebd504222cf58b86b3400ba0b2509f37a36df060af319f0456a85"
      },
      "downloads": -1,
      "filename": "torchConvNd-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aaa66358588626a541a515663eded722",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6016,
      "upload_time": "2020-01-24T22:37:04",
      "upload_time_iso_8601": "2020-01-24T22:37:04.594694Z",
      "url": "https://files.pythonhosted.org/packages/ea/9b/73f0d25f2ff6305c482a78e593cdb89dd0435c69dc6a9083e0a0f8a2cb29/torchConvNd-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}