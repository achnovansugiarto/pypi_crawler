{
  "info": {
    "author": "Andreas Maier",
    "author_email": "andreas.r.maier@gmx.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Yagot - Yet Another Garbage Object Tracker for Python\n=====================================================\n\n.. image:: https://img.shields.io/pypi/v/yagot.svg\n    :target: https://pypi.python.org/pypi/yagot/\n    :alt: Version on Pypi\n\n.. image:: https://travis-ci.org/andy-maier/python-yagot.svg?branch=master\n    :target: https://travis-ci.org/andy-maier/python-yagot/branches\n    :alt: Travis test status (master)\n\n.. image:: https://ci.appveyor.com/api/projects/status/ebqjx5ei8kqc1mf1/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/andy-maier/python-yagot/history\n    :alt: Appveyor test status (master)\n\n.. image:: https://readthedocs.org/projects/yagot/badge/?version=latest\n    :target: https://readthedocs.org/projects/yagot/builds/\n    :alt: Docs build status (master)\n\n.. image:: https://coveralls.io/repos/github/andy-maier/python-yagot/badge.svg?branch=master\n    :target: https://coveralls.io/github/andy-maier/python-yagot?branch=master\n    :alt: Test coverage (master)\n\n\nOverview\n--------\n\nYagot (Yet Another Garbage Object Tracker) is a tool for Python developers to\nhelp find issues with garbage collection and memory leaks:\n\n* It can determine the set of *collected objects* caused by a function or\n  method.\n\n  Collected objects are objects Python could not immediately release when they\n  became unreachable and that were eventually released by the Python garbage\n  collector. Frequently this is caused by the presence of circular references\n  into which the object to be released is involved. The garbage collector is\n  designed to handle circular references when releasing objects.\n\n  Collected objects are not a problem per se, but they can contribute to\n  large memory use and can often be eliminated.\n\n* It can determine the set of *uncollectable objects* caused by a function or\n  method.\n\n  Uncollectable objects are objects Python was unable to release during garbage\n  collection, even when running a full collection (i.e. on all generations of\n  the Python generational garbage collector).\n\n  Uncollectable objects remain allocated in the last generation of the garbage\n  collector. On each run on its last generation, the garbage collector attempts\n  to release these objects. It seems to be rare that these continued attempts\n  eventually succeed, so these objects can basically be considered memory leaks.\n\nSee section\n`Background`_\nfor more detailed explanations about object release in Python.\n\nYagot is simple to use in either of the following ways:\n\n* It provides a `pytest`_ plugin named ``yagot`` that detects collected and\n  uncollectable objects caused by the test cases. This detection is enabled by\n  specifying command line options or environment variables and does not require\n  modifying the test cases.\n\n* It provides a Python decorator named\n  `garbage_checked`_\n  that detects collected and uncollectable objects caused by the decorated\n  function or method. This allows using Yagot independent of any test framework\n  or with other test frameworks such as `nose`_ or `unittest`_.\n\nYagot works with a normal (non-debug) build of Python.\n\n.. _pytest: https://docs.pytest.org/\n.. _nose: https://nose.readthedocs.io/\n.. _unittest: https://docs.python.org/3/library/unittest.html\n.. _garbage_checked: https://yagot.readthedocs.io/en/latest/apiref.html#yagot.garbage_checked\n.. _Background: https://yagot.readthedocs.io/en/latest/background.html#Background\n\n\nInstallation\n------------\n\nTo install the latest released version of the yagot package into your active\nPython environment:\n\n.. code-block:: bash\n\n    $ pip install yagot\n\nThis will also install any prerequisite Python packages.\n\nFor more details and alternative ways to install, see `Installation`_.\n\n.. _Installation: https://yagot.readthedocs.io/en/latest/intro.html#installation\n\n\nUsage\n-----\n\nHere is an example of how to use Yagot to detect collected objects caused by\npytest test cases using the command line options provided by the\nyagot pytest plugin:\n\n.. code-block:: text\n\n    $ cat examples/test_1.py\n    def test_selfref_dict():\n        d1 = dict()\n        d1['self'] = d1\n\n    $ pytest examples --yagot -k test_1.py\n    ===================================== test session starts ======================================\n    platform darwin -- Python 3.7.5, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\n    rootdir: /Users/maiera/PycharmProjects/yagot/python-yagot\n    plugins: cov-2.8.1, yagot-0.1.0.dev1\n    yagot: Checking for collected and uncollectable objects, ignoring types: (none)\n    collected 2 items / 1 deselected / 1 selected\n\n    examples/test_1.py .E                                                                    [100%]\n\n    ============================================ ERRORS ============================================\n    ____________________________ ERROR at teardown of test_selfref_dict ____________________________\n\n    item = <Function test_selfref_dict>\n\n        def pytest_runtest_teardown(item):\n            \"\"\"\n            py.test hook that is called when tearing down a test item.\n\n            We use this hook to stop tracking and check the track result.\n            \"\"\"\n            config = item.config\n            enabled = config.getvalue('yagot')\n            if enabled:\n                import yagot\n                tracker = yagot.GarbageTracker.get_tracker()\n                tracker.stop()\n                location = \"{file}::{func}\". \\\n                    format(file=item.location[0], func=item.name)\n    >           assert not tracker.garbage, tracker.assert_message(location)\n    E           AssertionError:\n    E             There were 1 collected or uncollectable object(s) caused by function examples/test_1.py::test_selfref_dict:\n    E\n    E             1: <class 'dict'> object at 0x10df6ceb0:\n    E             {'self': <Recursive reference to dict object at 0x10df6ceb0>}\n    E\n    E           assert not [{'self': {'self': {'self': {'self': {'self': {...}}}}}}]\n    E            +  where [{'self': {'self': {'self': {'self': {'self': {...}}}}}}] = <yagot._garbagetracker.GarbageTracker object at 0x10df15f10>.garbage\n\n    yagot_pytest/plugin.py:148: AssertionError\n    =========================== 1 passed, 1 deselected, 1 error in 0.07s ===========================\n\nHere is an example of how to use Yagot to detect collected objects caused by a\nfunction using the\n``garbage_checked``\ndecorator on the function.\nThe yagot pytest plugin is loaded in this example and it presence is reported\nby pytest, but it is not used:\n\n.. code-block:: text\n\n    $ cat examples/test_2.py\n    import yagot\n\n    @yagot.garbage_checked()\n    def test_selfref_dict():\n        d1 = dict()\n        d1['self'] = d1\n\n    $ pytest examples -k test_2.py\n    ===================================== test session starts ======================================\n    platform darwin -- Python 3.7.5, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\n    rootdir: /Users/maiera/PycharmProjects/yagot/python-yagot\n    plugins: cov-2.8.1, yagot-0.1.0.dev1\n    collected 2 items / 1 deselected / 1 selected\n\n    examples/test_2.py F                                                                     [100%]\n\n    =========================================== FAILURES ===========================================\n    ______________________________________ test_selfref_dict _______________________________________\n\n    args = (), kwargs = {}, tracker = <yagot._garbagetracker.GarbageTracker object at 0x1078853d0>\n    ret = None, location = 'test_2::test_selfref_dict'\n    @py_assert1 = [{'self': {'self': {'self': {'self': {'self': {...}}}}}}], @py_assert3 = False\n    @py_format4 = \"\\n~There were 1 collected or uncollectable object(s) caused by function test_2::test_selfref_dict:\\n~\\n~1: <class 'di...elf': {'self': {'self': {'self': {...}}}}}}] = <yagot._garbagetracker.GarbageTracker object at 0x1078853d0>.garbage\\n}\"\n\n        @functools.wraps(func)\n        def wrapper_garbage_checked(*args, **kwargs):\n            \"Wrapper function for the garbage_checked decorator\"\n            tracker = GarbageTracker.get_tracker()\n            tracker.enable(leaks_only=leaks_only)\n            tracker.start()\n            tracker.ignore_types(type_list=ignore_types)\n            ret = func(*args, **kwargs)  # The decorated function\n            tracker.stop()\n            location = \"{module}::{function}\".format(\n                module=func.__module__, function=func.__name__)\n    >       assert not tracker.garbage, tracker.assert_message(location)\n    E       AssertionError:\n    E         There were 1 collected or uncollectable object(s) caused by function test_2::test_selfref_dict:\n    E\n    E         1: <class 'dict'> object at 0x1078843c0:\n    E         {'self': <Recursive reference to dict object at 0x1078843c0>}\n    E\n    E       assert not [{'self': {'self': {'self': {'self': {'self': {...}}}}}}]\n    E        +  where [{'self': {'self': {'self': {'self': {'self': {...}}}}}}] = <yagot._garbagetracker.GarbageTracker object at 0x1078853d0>.garbage\n\n    yagot/_decorators.py:67: AssertionError\n    =============================== 1 failed, 1 deselected in 0.07s ================================\n\nIn both usages, Yagot reports that there was one collected or uncollectable\nobject caused by the test function. The assertion message\nprovides some details about that object. In this case, we can see that the\nobject is a ``dict`` object, and that its 'self' item references back to the\nsame ``dict`` object, so there was a circular reference that caused the object\nto become a collectable object.\n\nThat circular reference is simple enough for the Python garbage collector to\nbreak it up, so this object does not become uncollectable.\n\nThe failure location and source code shown by pytest is the wrapper function of\nthe ``garbage_checked`` decorator and the ``pytest_runtest_teardown`` function\nsince this is where it is detected. The decorated function or pytest test case\nthat caused the objects to be created is reported in the assertion message\nusing a \"module::function\" notation.\n\nKnowing the test function ``test_selfref_dict()`` that caused the object to\nbecome a collectable object is a good start for identifying the problem code,\nand in our example case it is easy to do because the test function is simple\nenough. If the test function is too complex to identify the culprit, it can be\nsplit into multiple simpler test functions, or new test functions can be added\nto check out specific types of objects that were used.\n\nAs an exercise, test the standard ``dict`` class and the\n``collections.OrderedDict`` class by creating empty dictionaries. You will find\nthat on CPython 2.7, ``collections.OrderedDict`` causes collected objects (see\n`issue9825 <https://bugs.python.org/issue9825>`_).\n\nThe ``garbage_checked`` decorator can be combined with any other decorators in any\norder. Note that it always tracks the next inner function, so unless you want\nto track what garbage other decorators create, you want to have it directly on\nthe test function, as the innermost decorator, like in the following example:\n\n.. code-block:: python\n\n    import pytest\n    import yagot\n\n    @pytest.mark.parametrize('parm2', [ ... ])\n    @pytest.mark.parametrize('parm1', [ ... ])\n    @yagot.garbage_checked()\n    def test_something(parm1, parm2):\n        pass  # some test code\n\n\nDocumentation\n-------------\n\n* `Documentation <https://yagot.readthedocs.io/en/latest/>`_\n\n\nChange History\n--------------\n\n* `Change history <https://yagot.readthedocs.io/en/latest/changes.html>`_\n\n\nContributing\n------------\n\nFor information on how to contribute to the Yagot project, see\n`Contributing <https://yagot.readthedocs.io/en/latest/development.html#contributing>`_.\n\n\nLicense\n-------\n\nThe Yagot project is provided under the\n`Apache Software License 2.0 <https://raw.githubusercontent.com/andy-maier/python-yagot/master/LICENSE>`_.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andy-maier/python-yagot",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "Andreas Maier",
    "maintainer_email": "andreas.r.maier@gmx.de",
    "name": "yagot",
    "package_url": "https://pypi.org/project/yagot/",
    "platform": "any",
    "project_url": "https://pypi.org/project/yagot/",
    "project_urls": {
      "Bug Tracker": "https://github.com/andy-maier/python-yagot/issues",
      "Documentation": "https://yagot.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/andy-maier/python-yagot",
      "Source Code": "https://github.com/andy-maier/python-yagot"
    },
    "release_url": "https://pypi.org/project/yagot/0.5.0/",
    "requires_dist": [
      "six (>=1.10.0)"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "Yet Another Garbage Object Tracker for Python",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6767824,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1df5d28fd65671c253a8e60e944d5c6e0a5d49844f34f033c22cd4e240483633",
          "md5": "b891cf95b5d2363e3e511bdf9d3be352",
          "sha256": "8de15b3850ed244ab722cf9db21fd6c85ef42df710783ef11859e3d41d31118b"
        },
        "downloads": -1,
        "filename": "yagot-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b891cf95b5d2363e3e511bdf9d3be352",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "size": 16886,
        "upload_time": "2020-03-07T13:07:50",
        "upload_time_iso_8601": "2020-03-07T13:07:50.544178Z",
        "url": "https://files.pythonhosted.org/packages/1d/f5/d28fd65671c253a8e60e944d5c6e0a5d49844f34f033c22cd4e240483633/yagot-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ecf08b5d889463600eecadfea41d70ca36003fffb1ad7a3db35ff4617fed968",
          "md5": "1e95a3d733b26c08a262a19238ee6d08",
          "sha256": "d3377c59469772a6f1457acd604f92373c0ad627e5066a2e8983c12fa7387a3c"
        },
        "downloads": -1,
        "filename": "yagot-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e95a3d733b26c08a262a19238ee6d08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "size": 19483,
        "upload_time": "2020-03-07T13:07:53",
        "upload_time_iso_8601": "2020-03-07T13:07:53.261743Z",
        "url": "https://files.pythonhosted.org/packages/3e/cf/08b5d889463600eecadfea41d70ca36003fffb1ad7a3db35ff4617fed968/yagot-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1df5d28fd65671c253a8e60e944d5c6e0a5d49844f34f033c22cd4e240483633",
        "md5": "b891cf95b5d2363e3e511bdf9d3be352",
        "sha256": "8de15b3850ed244ab722cf9db21fd6c85ef42df710783ef11859e3d41d31118b"
      },
      "downloads": -1,
      "filename": "yagot-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b891cf95b5d2363e3e511bdf9d3be352",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 16886,
      "upload_time": "2020-03-07T13:07:50",
      "upload_time_iso_8601": "2020-03-07T13:07:50.544178Z",
      "url": "https://files.pythonhosted.org/packages/1d/f5/d28fd65671c253a8e60e944d5c6e0a5d49844f34f033c22cd4e240483633/yagot-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ecf08b5d889463600eecadfea41d70ca36003fffb1ad7a3db35ff4617fed968",
        "md5": "1e95a3d733b26c08a262a19238ee6d08",
        "sha256": "d3377c59469772a6f1457acd604f92373c0ad627e5066a2e8983c12fa7387a3c"
      },
      "downloads": -1,
      "filename": "yagot-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e95a3d733b26c08a262a19238ee6d08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 19483,
      "upload_time": "2020-03-07T13:07:53",
      "upload_time_iso_8601": "2020-03-07T13:07:53.261743Z",
      "url": "https://files.pythonhosted.org/packages/3e/cf/08b5d889463600eecadfea41d70ca36003fffb1ad7a3db35ff4617fed968/yagot-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}