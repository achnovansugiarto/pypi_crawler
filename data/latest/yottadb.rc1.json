{
  "info": {
    "author": "YottaDB LLC",
    "author_email": "info@yottadb.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# YDBPython\n\nYDBPython provides a Pythonic API for accessing YottaDB databases.\n\n## Requirements\n\n1. Ubuntu Server 20.04 (or similar)\n2. Python > 3.6 (f-string and type annotation used), including the `python3-dev` package that contains `Python.h`\n3. libffi\n4. YottaDB 1.34 or later\n\n## Installation\n\n1. Install Ubuntu Server 20.04\n2. Install YottaDB per the [Quick Start](https://docs.yottadb.com/MultiLangProgGuide/MultiLangProgGuide.html#quick-start) guide instructions or from [source](https://gitlab.com/YottaDB/DB/YDB)\n3. Install prerequisites:\n\t* Ubuntu/Debian: `sudo apt install python3-dev python3-setuptools libffi-dev pkg-config`\n\t* RHEL/CentOS: `yum install gcc python3 python3-setuptools python3-devel libffi-devel pkg-config`\n\t* Arch Linux: `sudo yay -Sy python-{setuptools,pip} libffi pkg-config`\n4. Set environment variables\n\t1. Set YottaDB environment variables: `source $(pkg-config --variable=prefix yottadb)/ydb_env_set`\n\t2. *Optional*: If YottaDB is built with Address Sanitization (ASAN) enabled, `LD_PRELOAD` and `ASAN_OPTIONS` must be set:\n\t\t* `export ASAN_OPTIONS=\"detect_leaks=0:disable_coredump=0:unmap_shadow_on_exit=1:abort_on_error=1\"`\n\t\t* `export LD_PRELOAD=$(gcc -print-file-name=libasan.so)`\n5. Install:\n\t* *Option 1*: From PyPI:\n\t\t* *Option 1*: Install in `venv`:\n\t\t\t1. Enter directory where install is desired, e.g. `cd my-python-project`\n\t\t\t2. Install the `python3-venv` package:\n\t\t\t\t* Ubuntu/Debian: `sudo apt install python3-venv`\n\t\t\t\t* RHEL/CentOS: `sudo yum install python3-virtualenv`\n\t\t\t\t* Arch Linux: `sudo yay -Sy install python3-virtualenv`\n\t\t\t3. Create venv: `python3 -m venv .venv`\n\t\t\t4. Activate venv: `source .venv/bin/activate`\n\t\t\t5. Install into venv: `pip install yottadb`\n\t\t* *Option 2*: Install to user:\n\t\t\t* `pip3 install yottadb --user`\n\t\t* *Option 3*: Install globally:\n\t\t\t* `sudo -E pip3 install yottadb`\n\t* *Option 2*: From source:\n\t\t1. Get the code: `git clone https://gitlab.com/YottaDB/Lang/YDBPython.git`\n\t\t2. Enter code directory `cd YDBPython/`\n\t\t3. Run `setup.py` to install:\n\t\t\t* *Option 1*: Install in `venv`:\n\t\t\t\t1. Install the python3-venv package:\n\t\t\t\t\t* Ubuntu/Debian: `sudo apt install python3-venv`\n\t\t\t\t\t* RHEL/CentOS: `sudo yum install python3-virtualenv`\n\t\t\t\t\t* Arch Linux: `sudo yay -Sy install python3-virtualenv`\n\t\t\t\t2. Create `venv`: `python3 -m venv .venv`\n\t\t\t\t3. Activate `venv`: `source .venv/bin/activate`\n\t\t\t\t4. Install into `venv`: `python setup.py install`\n\t\t\t* *Option 2*: Install to user:\n\t\t\t\t* `python3 setup.py install --user`\n\t\t\t* *Option 3*: Install globally (not suggested):\n\t\t\t\t* `sudo -E python3 setup.py install`\n\n## Testing\n\nTo run YDBPython's test suite with a YDBPython source installation:\n\n1. Enter YDBPython directory containing code repository, e.g. `cd YDBPython/`\n2. Install `pytest`, `pytest-order`, and `psutil`\n\t1. If `pip` for `python3` is not installed do so:\n\t\t* Ubuntu/Debian: `sudo apt install python3-pip`\n\t\t* RHEL/CentOS: `sudo yum install python3-pip`\n\t\t* Arch Linux: `sudo yay -Sy install python3-pip`\n\t2. Use `pip` to install `pytest`, `pytest-order`, `psutil`\n\t\t* *Option 1*: install into `venv`\n\t\t\t1. Activate `venv` if it is not already: `source .venv/bin/activate`\n\t\t\t2. Install: `pip install pytest pytest-order psutil`\n\t\t* *Option 2*: install for user: `pip3 install --user pytest pytest-order psutil`\n\t\t* *Option 3*: install globally (not suggested): `sudo pip3 install pytest pytest-order psutil`\n3. Run the tests:\n\t* *Option 1*: in `venv`: `python -m pytest`\n\t* *Option 2*: with user or global installation: `python3 -m pytest`\n4. *Optional*: Cleanup between tests:\n\t* When making changes to code between test runs, some cleanup may be needed to prevent new changes being ignored due to Python caching. To clean up these files: `for artifact in $(cat .gitignore); do rm -rf $artifact; done`. Note that this will delete all files listed in `.gitignore`, including core files. If these or any other such files need to be retained, move or rename them before running the aforementioned command.\n\n# Basic Example Usage\n\n```python\nimport yottadb\n\n# Create Key objects for conveniently accessing and manipulating database nodes\nkey1 = yottadb.Key('^hello')  # Create a key referencing the global variable '^hello'\n\nprint(f\"{key1}: {key1.value}\")  # Display current value of '^hello'\nkey1.value = b'Hello world!'  # Set '^hello' to 'Hello world!'\nprint(f\"{key1}: {key1.value}\")\n\nkey2 = yottadb.Key('^hello')['cowboy']  # Add a 'cowboy' subscript to the global variable '^hello', creating a new key\nkey2.value = 'Howdy partner!'  # Set '^hello('cowboy') to 'Howdy partner!'\nprint(f\"{key2}: {key2.value}\")\n\nkey3 = yottadb.Key('^hello')['chinese']  # Add a second subscript to '^hello', creating a third key\nkey3.value = bytes('你好世界!', encoding=\"utf-8\")  # The value can be set to anything that can be encoded to `bytes`\nprint(key3, str(key3.value, encoding=\"utf-8\"))  # Returned values are `bytes` objects, and so may need to be encoded\n\nfor subscript in key1.subscripts:  # Loop through all the subscripts of a key\n    sub_key = key1[subscript]\n    print(f\"{sub_key}: {sub_key.value}\")\n\nkey1.delete_node()  # Delete the value of '^hello', but not any of its child nodes\n\nprint(f\"{key1}: {key1.value}\")  # No value is printed\nfor subscript in key1.subscripts:  # The values of the child nodes are still in the database\n    sub_key = key1[subscript]\n    print(f\"{sub_key}: {sub_key.value}\")\n\nkey1.value = 'Hello world!'   # Reset the value of '^hello'\nprint(f\"{key1}: {key1.value}\")  # Prints the value\nkey1.delete_tree() # Delete both the value at the '^hello' node and all of it's children\nprint(f\"{key1}: {key1.value}\")  # Prints no value\nfor subscript in key1.subscripts:  # Loop terminates immediately and displays no subscripts\n    sub_key = key1[subscript]\n    print(sub_key, sub_key.value)\n\n# Database transactions are also available\n@yottadb.transaction\ndef simple_transaction(value):\n    # Set values directly with the set() function\n    yottadb.set('test1', value=value)  # Set the local variable 'test1' to the given value\n    yottadb.set('test2', value=value)  # Set the local variable 'test2' to the given value\n    condition_a = False\n    condition_b = False\n    if condition_a:\n        # When a yottadb.YDBTPRollback exception is raised YottaDB will rollback the transaction\n        # and then propagate the exception to the calling code.\n        raise yottadb.YDBTPRollback(\"reason for the rollback\")\n    elif condition_b:\n        # When a yottadb.YDBTPRestart exception is raised YottaDB will call the transaction again.\n        # Warning: This code is intentionally simplistic. An infinite loop will occur\n        #           if yottadb.YDBTPRestart is continually raised\n        raise yottadb.YDBTPRestart()\n    else:\n        return yottadb.YDB_OK  # Success, transaction will be committed\n\n\nsimple_transaction(b'test', db)\nprint(f\"{db[b'test1']}: {db[b'test1'].value}\")\nprint(f\"{db[b'test2']}: {db[b'test2'].value}\")\n```\n\n# Frequently Asked Questions\n\n## Does YDBPython support multi-threading?\n\nNo, YDBPython does not support multithreading. This is due to the limitations of the Python Global Interpreter Lock for CPU-intensive multithreading. For background, see the following resources:\n+ Python documentation: [Thread State and the Global Interpreter Lock](https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock)\n+ [Python's GIL - A Hurdle to Multithreaded Program](https://medium.com/python-features/pythons-gil-a-hurdle-to-multithreaded-program-d04ad9c1a63)\n+ [Grok the GIL: How to write fast and thread-safe Python](https://opensource.com/article/17/4/grok-gil)\n+ YDBPython GitLab discussion: [Issue #7](https://gitlab.com/YottaDB/Lang/YDBPython/-/issues/7)\n\nAccordingly, the Python `threading` and `multithreading` should be avoided when developing applications with YDBPython. However, YDBPython does support multiprocessing and may be safely used with the Python `multiprocessing` library for parallelism. For an example of `multiprocessing` usage, see `tests/test_threeenp1.py`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://yottadb.com",
    "keywords": "",
    "license": "GNU Affero General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yottadb",
    "package_url": "https://pypi.org/project/yottadb/",
    "platform": "",
    "project_url": "https://pypi.org/project/yottadb/",
    "project_urls": {
      "Documentation": "https://docs.yottadb.com/MultiLangProgGuide/pythonprogram.html",
      "Homepage": "https://yottadb.com",
      "Issue Tracker": "https://gitlab.com/YottaDB/Lang/YDBPython/-/issues",
      "Source Code": "https://gitlab.com/YottaDB/Lang/YDBPython"
    },
    "release_url": "https://pypi.org/project/yottadb/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Pythonic API for accessing YottaDB databases.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13000391,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2140d86820719a69b00f64749a38f2f00105cb598fed493ef4fd6b6c6d022f86",
          "md5": "4073cd147fd839e05fd4f2cd78316f4e",
          "sha256": "404634764a2ce1dc9d6b66f30decefea20b06b973a2b1723cbb26afdcba89470"
        },
        "downloads": -1,
        "filename": "yottadb-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4073cd147fd839e05fd4f2cd78316f4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39734,
        "upload_time": "2022-02-24T21:17:17",
        "upload_time_iso_8601": "2022-02-24T21:17:17.320536Z",
        "url": "https://files.pythonhosted.org/packages/21/40/d86820719a69b00f64749a38f2f00105cb598fed493ef4fd6b6c6d022f86/yottadb-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2140d86820719a69b00f64749a38f2f00105cb598fed493ef4fd6b6c6d022f86",
        "md5": "4073cd147fd839e05fd4f2cd78316f4e",
        "sha256": "404634764a2ce1dc9d6b66f30decefea20b06b973a2b1723cbb26afdcba89470"
      },
      "downloads": -1,
      "filename": "yottadb-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4073cd147fd839e05fd4f2cd78316f4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39734,
      "upload_time": "2022-02-24T21:17:17",
      "upload_time_iso_8601": "2022-02-24T21:17:17.320536Z",
      "url": "https://files.pythonhosted.org/packages/21/40/d86820719a69b00f64749a38f2f00105cb598fed493ef4fd6b6c6d022f86/yottadb-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}