{
  "info": {
    "author": "Tom Moran",
    "author_email": "tommorancodes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pycachu\n\nAn interactive cache that saves user-submitted credentials and tokens in a yaml file, and passwords in the OS keychain using the keyring module\n\n## Install\n\n```\npip install pycachuser\n```\n\n## Getting Started\n\nOnce you have imported the module:\n```\nimport pycachu\n```\n\nYou can create a cache. This should always be the first step.\n\n```\ncache = pycachu.Cache(\"file_name\")\n```\n\nThis will create a yaml file with the specified name. The file will be created at your current directory location by default, but you can specify a path also:\n\n```\ncache = pycachu.Cache(\"file_name\", path=\"~/\")\n```\n\nNOTE: The trialing / is not added for you,make sure to include it on the path.\n\n## Getting a token\n\nWhen you wish to grab a token, just use the following:\n\n```\ntoken = cache.get_token(\"key\")\n```\n\nThe token will be requested by the user at runtime then saved to the cache yaml file. On running a second time, the token will be grabbed directly from the cache with no user input.\n\nThis creates a Token object. You can grab the token with .token\n\n```\nprint(token.token)\n```\n\nYou can specify your own terminal output for the user, and hide the user input:\n\n```\ntoken = pycachu.Token(cache, \"key\", user_prompt=\"Submit the token: \", hide_input=True)\n```\n\nAll kwargs to the Token initiator are carried in Cache.get_token(). This is just a demonstration of the other (more convoluted) method for creating a Token.\n\n## Getting a credential\n\nWhen you wish to grab a credential, just use the following:\n\n```\ncredential = cache.get_credential(\"key\")\n```\n\nThe user will then be asked for the username and password, if already not saved in the cache. The password will be stored in the OS keychain using Keyring.\n\nThis creates a Credential object. You can grab the credentials with .username and .password.\n\n```\nprint(credential.username, credential.password)\n```\n\nYou can specify your own terminal output for the name and password, and hide the username input (the password input is hidden by default):\n\n```\ncredential = pycachu.Credential(\n    cache,\n    \"key\",\n    username_prompt=\"Submit the username: \",\n    password_prompt=\"And now the password: \",\n    hide_username=True,\n    hide_password=False,\n)\n```\n\nAll kwargs to the Credential initiator are carried in Cache.get_credential(). This is just a demonstration of the other (more convoluted) method for creating a Credential.\n\n## Oh no! My token/credential didn't work\n\nRaise a cache error to remove the cache object from the cache\n\n```\ntoken1.error()\nraise pycachu.CacheTokenError(token2)\n\ncredential1.error()\nraise pycachu.CacheCredentialError(credential2)\n```\n\nThis will raise an exception and also remove the token/credential from the cache to be re-entered on next runtime.\n\nIf you don't want to raise an Exception, both object have a remove() function:\n\n```\ntoken.remove()\ncredential.remove()\n```\n\n## Validators\n\nValidators are also imported, these are used to match the input to a set regular expression. By default all inputs use the `pycachu.validators.NotEmpty()` but you can specify any of the other validators, or create your own Validator class.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/atommoran/pycachu",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycachuser",
    "package_url": "https://pypi.org/project/pycachuser/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycachuser/",
    "project_urls": {
      "Bug Tracker": "https://github.com/atommoran/pycachu/issues",
      "Homepage": "https://github.com/atommoran/pycachu"
    },
    "release_url": "https://pypi.org/project/pycachuser/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Grabs and stores credentials in a human-readable yaml file, with passwords saved using the keyring module",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11655573,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3846a16a9d63191cf0176f84a4e193fd8df50bf2a316ac822ced75dd17d1fa50",
          "md5": "8dbfd2a1dfb7a3f7919a5ddda4eb1a28",
          "sha256": "832e074049526b518093ec99137b11a7ff0011855c3e4bfd1781b92600fa28bb"
        },
        "downloads": -1,
        "filename": "pycachuser-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dbfd2a1dfb7a3f7919a5ddda4eb1a28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6709,
        "upload_time": "2021-10-07T15:05:20",
        "upload_time_iso_8601": "2021-10-07T15:05:20.165364Z",
        "url": "https://files.pythonhosted.org/packages/38/46/a16a9d63191cf0176f84a4e193fd8df50bf2a316ac822ced75dd17d1fa50/pycachuser-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfd3584eaa39f6112ae7d5d0951601302cfc0a7902defbf3c048b0e27638ddc9",
          "md5": "db20ce07d5621b5afd1f0558dc869c15",
          "sha256": "85e83e7131d639996b45291fc5850e57e6578a914a2f9a95b921b74cb202d096"
        },
        "downloads": -1,
        "filename": "pycachuser-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "db20ce07d5621b5afd1f0558dc869c15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7305,
        "upload_time": "2021-10-07T15:05:21",
        "upload_time_iso_8601": "2021-10-07T15:05:21.661086Z",
        "url": "https://files.pythonhosted.org/packages/df/d3/584eaa39f6112ae7d5d0951601302cfc0a7902defbf3c048b0e27638ddc9/pycachuser-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c55f1decf7a1120be3120a471fbf81fd3c553cca3ae7bed3106cdb658670b0e",
          "md5": "df1ed6053b2f38b427ccb874f15feb3f",
          "sha256": "7f5711805105329a8328aebe3de98e15a24da7d6f6d94274a3777144180700fc"
        },
        "downloads": -1,
        "filename": "pycachuser-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df1ed6053b2f38b427ccb874f15feb3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6817,
        "upload_time": "2021-10-07T15:15:17",
        "upload_time_iso_8601": "2021-10-07T15:15:17.436989Z",
        "url": "https://files.pythonhosted.org/packages/8c/55/f1decf7a1120be3120a471fbf81fd3c553cca3ae7bed3106cdb658670b0e/pycachuser-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0538f96adab578e9bc56930e0e93f5212944d0d952b1e4df50189720cd3a1a4",
          "md5": "d3b619576098376ed10ad96836144cde",
          "sha256": "5a82342af5636c51be43f20e1151b362604b73c9335951b27f47dfdb0b6e3071"
        },
        "downloads": -1,
        "filename": "pycachuser-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d3b619576098376ed10ad96836144cde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7434,
        "upload_time": "2021-10-07T15:15:18",
        "upload_time_iso_8601": "2021-10-07T15:15:18.877262Z",
        "url": "https://files.pythonhosted.org/packages/b0/53/8f96adab578e9bc56930e0e93f5212944d0d952b1e4df50189720cd3a1a4/pycachuser-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c55f1decf7a1120be3120a471fbf81fd3c553cca3ae7bed3106cdb658670b0e",
        "md5": "df1ed6053b2f38b427ccb874f15feb3f",
        "sha256": "7f5711805105329a8328aebe3de98e15a24da7d6f6d94274a3777144180700fc"
      },
      "downloads": -1,
      "filename": "pycachuser-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df1ed6053b2f38b427ccb874f15feb3f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6817,
      "upload_time": "2021-10-07T15:15:17",
      "upload_time_iso_8601": "2021-10-07T15:15:17.436989Z",
      "url": "https://files.pythonhosted.org/packages/8c/55/f1decf7a1120be3120a471fbf81fd3c553cca3ae7bed3106cdb658670b0e/pycachuser-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0538f96adab578e9bc56930e0e93f5212944d0d952b1e4df50189720cd3a1a4",
        "md5": "d3b619576098376ed10ad96836144cde",
        "sha256": "5a82342af5636c51be43f20e1151b362604b73c9335951b27f47dfdb0b6e3071"
      },
      "downloads": -1,
      "filename": "pycachuser-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d3b619576098376ed10ad96836144cde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7434,
      "upload_time": "2021-10-07T15:15:18",
      "upload_time_iso_8601": "2021-10-07T15:15:18.877262Z",
      "url": "https://files.pythonhosted.org/packages/b0/53/8f96adab578e9bc56930e0e93f5212944d0d952b1e4df50189720cd3a1a4/pycachuser-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}