{
  "info": {
    "author": "BNI API",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\nBNI API SDK - Python\n===============\nThis is the Official Python API client / library for BNI API. \nPlease visit [Digital Services](https://digitalservices.bni.co.id/en/) for more information about our product and visit our documentation page at [API Documentation](https://digitalservices.bni.co.id/documentation/public/en) for more technical details.\n\n## 1. Installation\n\n### 1.1 Using PyPI\n\n```\npip install bnipython\n```\n\n### 1.2 Manual Installation\n\nIf you are not using PyPI, you can clone or [download](https://github.com/bni-api/bnipython/archive/refs/heads/main.zip) this repository.\nThen import from bnipython folder. Or run Pip install from the repo folder.\n\n```\npip install .\n```\n\n### 1.3 Using PyPI Install Third Party\n\n```\npip install requests\npip install pyOpenSSL\npip install pytz\n```\n\n## 2. Usage\n\n### 2.1 Choose an API Product\n\nWe have 2 API products you can use:\n- [One Gate Payment](#22A-snap) - A solution for a company to integrate its application / system with banking transaction services. [documentation](https://digitalservices.bni.co.id/en/api-one-gate-payment)\n- [Snap BI](https://apidevportal.bi.go.id/snap/info) - Integrate with SNAP BI [documentation](https://apidevportal.bi.go.id/snap/api-services)\n\n\n### 2.2 Client Initialization and Configuration\n\nGet your client key and server key from [Menu - Applications](https://digitalservices.bni.co.id/en/profile-menu/apps)\nCreate API client object\n\n```python\nfrom bnipython import BNIClient\n# Create Core API instance\nclient = BNIClient({\n  'env': False,\n  'clientId': '{your-client-id}',\n  'clientSecret': '{your-client-secret}',\n  'apiKey': '{your-api-key}',\n  'apiSecret': '{your-api-secret}',\n  'appName': '{your-app-name}'\n})\n```\n\n### 2.2.A One Gate Payment\n\nCreate `One Gate Payment` class object\n```python\nfrom bnipython import BNIClient, OneGatePayment\n\n# Create Client instance\nclient = BNIClient({\n  'env': False,\n  'clientId': '{your-client-id}',\n  'clientSecret': '{your-client-secret}',\n  'apiKey': '{your-api-key}',\n  'apiSecret': '{your-api-secret}',\n  'appName': '{your-app-name}'\n})\n\nogp = OneGatePayment(client)\n```\n\nAvailable methods for `One Gate Payment` class\n#### Get Balance\n```python\n# return as Object\nres = ogp.getBalance({\n  'accountNo': '113183203'\n})\n```\n\n#### Get In House Inquiry\n```python\n# return as Object\ngetInHouseInquiry = ogp.getInHouseInquiry({\n  'accountNo': '113183203'\n})\n```\n\n#### Do Payment\n```python\n# return as Object\ndoPayment = ogp.doPayment({\n  'customerReferenceNumber': '20170227000000000020', # max 20 char client defined reference number\n  'paymentMethod': '0', # 0: In-house (intra BNI), 1: RTGS transfer, 2: Kliring transfer\n  'debitAccountNo': '113183203',\n  'creditAccountNo': '115471119',\n  'valueDate': '20170227000000000',\n  'valueCurrency': 'IDR',\n  'valueAmount': '100500',\n  'remark': '', # optional\n  'beneficiaryEmailAddress': 'mail@example.com', # optional\n  'beneficiaryName': 'Mr. X', # optional max 50 char (mandatory if paymentMethod 1 / 2)\n  'beneficiaryAddress1': 'Jakarta', # optional max 50 char (mandatory if paymentMethod 1 / 2)\n  'beneficiaryAddress2': '', # optional max 50 char\n  'destinationBankCode': '', # optional (mandatory if paymentMethod 1 / 2)\n  'chargingModelId': 'OUR' # OUR: fee will be paid by sender (default), BEN: fee will be paid by beneficary, SHA: fee divided\n})\n```\n\n#### Get Payment Status\n```python\n# return as Object\ngetPaymentStatus = ogp.getPaymentStatus({\n  'customerReferenceNumber': '20170227000000000020' # max 20 char client defined reference number\n})\n```\n\n#### Get Inter Bank Inquiry\n```python\n# return as Object\ngetInterBankInquiry = ogp.getInterBankInquiry({\n  'customerReferenceNumber': '20170227000000000021', # max 20 char client defined reference number\n  'accountNum': '113183203',\n  'destinationBankCode': '014',\n  'destinationAccountNum': '3333333333'\n})\n```\n\n#### Get Inter Bank Payment\n```python\n# return as Object\ngetInterBankPayment = ogp.getInterBankPayment({\n  'customerReferenceNumber': '20170227000000000021', # max 20 char client defined reference number\n  'amount': '100500',\n  'destinationAccountNum': '3333333333',\n  'destinationAccountName': 'BENEFICIARY NAME 1 UNTIL HERE1BENEFICIARY NAME 2(OPT) UNTIL HERE2',\n  'destinationBankCode': '014',\n  'destinationBankName': 'BCA',\n  'accountNum': '115471119',\n  'retrievalReffNum': '100000000024' # refference number for Interbank Transaction\n})\n```\n\n#### Hold Amount\n```python\n# return as Object\nholdAmount = ogp.holdAmount({\n  'customerReferenceNumber': '20170504153218296', # max 20 char client defined reference number\n  'amount': '12007',\n  'accountNo': '0115476151',\n  'detail': '' # optional\n})\n```\n\n#### Hold Amount Release\n```python\n# return as Object\nholdAmountRelease = ogp.holdAmountRelease({\n  'customerReferenceNumber': '20170504153218296', # max 20 char client defined reference number\n  'amount': '12007',\n  'accountNo': '0115476151',\n  'bankReference': '513668', # journal number. you can get this value from hold amount response\n  'holdTransactionDate': '31052010' # the date when you do the hold transaction\n})\n```\n\n### 2.2.B Snap BI\n\nCreate `Snap BI` class object\n```python\nfrom bnipython import BNIClient, SnapBI\n\n# Create Client instance\nclient = BNIClient({\n  'env': False,\n  'clientId': '{your-client-id}',\n  'clientSecret': '{your-client-secret}',\n  'apiKey': '{your-api-key}',\n  'apiSecret': '{your-api-secret}',\n  'appName': '{your-app-name}'\n})\n\nsnap = SnapBI(self.client, { \n  'privateKeyPath': '{your-rsa-private-key-path}', \n  'channelId': '{your-channel-id}' \n})\n```\n\nAvailable methods for `Snap BI` class\n#### Balance Inquiry\n```python\n# return as Object\nbalanceInquiry = snap.balanceInquiry({\n  'partnerReferenceNo': '202010290000000000002', # optional\n  'accountNo': '0115476117'\n})\n```\n\n#### Bank Statement\n```python\n# return as Object\nbankStatement = snap.bankStatement({\n  'partnerReferenceNo': '202010290000000000002', # optional\n  'accountNo': '0115476117',\n  'fromDateTime': '2010-01-01T12:08:56+07:00', # optional\n  'toDateTime': '2011-01-01T12:08:56+07:00' # optional\n})\n```\n\n#### Internal Account Inquiry\n```python\n# return as Object\ninternalAccountInquiry = snap.internalAccountInquiry({\n  'partnerReferenceNo': '2020102900000000000001', # optional\n  'beneficiaryAccountNo': '0115476151'\n})\n```\n\n#### Transaction Status Inquiry\n```python\n# return as Object\ntransactionStatusInquiry = snap.transactionStatusInquiry({\n  'originalPartnerReferenceNo': '20211213100434', # optional\n  'originalReferenceNo': '20211220141520', # transaction reference number\n  'originalExternalId': '20211220141520', # optional\n  'serviceCode': '36', # SNAP BI service code\n  'transactionDate': '2021-12-20',\n  'amount': {\n    'value': '12500',\n    'currency': 'IDR'\n  },\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n```\n\n#### Transfer Intra Bank\n```python\n# return as Object\ntransferIntraBank = snap.transferIntraBank({\n  'partnerReferenceNo': '202201911020300006', # transaction reference number\n  'amount': {\n    'value': '12500',\n    'currency': 'IDR'\n  },\n  'beneficiaryAccountNo': '0115476117',\n  'beneficiaryEmail': 'mail@example.com', # optional\n  'currency': 'IDR', # optional\n  'customerReference': '14045', # optional\n  'feeType': 'OUR', # OUR: fee will be paid by sender (default), BEN: fee will be paid by beneficary, SHA: fee divided\n  'remark': '', # optional\n  'sourceAccountNo': '0115476151',\n  'transactionDate': '2021-12-13',\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n```\n\n#### Transfer RTGS\n```python\n# return as Object\n'transferRTGS' = snap.transferRTGS({\n  'partnerReferenceNo': '202201911020300011', # transaction reference number\n  'amount': {\n    'value': '150005001',\n    'currency': 'IDR'\n  },\n  'beneficiaryAccountName': 'IKO',\n  'beneficiaryAccountNo': '\"3333333333',\n  'beneficiaryAccountAddress': 'Jakarta Barat', # optional\n  'beneficiaryBankCode': 'CENAIDJA',\n  'beneficiaryBankName': 'PT. BANK CENTRAL ASIA Tbk.', # optional\n  'beneficiaryCustomerResidence': '1',\n  'beneficiaryCustomerType': '1',\n  'beneficiaryEmail': 'mail@example.com', # optional\n  'currency': 'IDR', # optional\n  'customerReference': '202201911020300006',\n  'feeType': 'OUR', # OUR: fee will be paid by sender (default), BEN: fee will be paid by beneficary, SHA: fee divided\n  'kodePos': '12550', # optional\n  'recieverPhone': '08123456789', # optional\n  'remark': '', # optional\n  'senderCustomerResidence': '1', # optional\n  'senderCustomerType': '1', # optional\n  'senderPhone': '08123456789', # optional\n  'sourceAccountNo': '0115476151',\n  'transactionDate': '2022-01-25',\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n```\n\n#### Transfer SKNBI\n```python\n# return as Object\ntransferSKNBI = snap.transferSKNBI({\n  'partnerReferenceNo': '202201911020300012', # transaction reference number\n  'amount': {\n    'value': '150005001',\n    'currency': 'IDR'\n  },\n  'beneficiaryAccountName': 'SAN',\n  'beneficiaryAccountNo': '3333333333',\n  'beneficiaryAddress': 'Jakarta Barat', # optional\n  'beneficiaryBankCode': '0140397',\n  'beneficiaryBankName': 'PT. BANK CENTRAL ASIA Tbk.', # optional\n  'beneficiaryCustomerResidence': '1',\n  'beneficiaryCustomerType': '1',\n  'beneficiaryEmail': 'mail@example.com', # optional\n  'currency': 'IDR', # optional\n  'customerReference': '202201911020300006',\n  'feeType': 'OUR', # OUR: fee will be paid by sender (default), BEN: fee will be paid by beneficary, SHA: fee divided\n  'kodePos': '12550', # optional\n  'recieverPhone': '08123456789', # optional\n  'remark': '', # optional\n  'senderCustomerResidence': '1', # optional\n  'senderCustomerType': '1', # optional\n  'senderPhone': '08123456789', # optional\n  'sourceAccountNo': '0115476151',\n  'transactionDate': '2022-01-25',\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n```\n\n#### External Account Inquiry\n```python\n# return as Object\nexternalAccountInquiry = snap.externalAccountInquiry({\n  'beneficiaryBankCode': '002',\n  'beneficiaryAccountNo': '888801000157508',\n  'partnerReferenceNo': '2020102900000000000001', # optional\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n```\n\n#### Transfer Inter Bank\n```python\n# return as Object\ntransferInterBank = snap.transferInterBank({\n  'partnerReferenceNo': '2020102900000000000001', # transaction reference number\n  'amount': {\n    'value': '12345678',\n    'currency': 'IDR'\n  },\n  'beneficiaryAccountName': 'Yories Yolanda',\n  'beneficiaryAccountNo': '888801000003301',\n  'beneficiaryAddress': 'Palembang', # optional\n  'beneficiaryBankCode': '002',\n  'beneficiaryBankName': 'Bank BRI', # optional\n  'beneficiaryEmail': 'mail@example.com', # optional\n  'currency': 'IDR', # optional\n  'customerReference': '10052019', # optional\n  'sourceAccountNo': '888801000157508',\n  'transactionDate': '2019-07-03T12:08:56+07:00',\n  'feeType': 'OUR', # OUR: fee will be paid by sender (default), BEN: fee will be paid by beneficary, SHA: fee divided\n  'additionalInfo': {\n    'deviceId': '123456', # optional\n    'channel': 'mobilephone' # optional\n  }\n})\n\n```\n\n## Get help\n\n* [Digital Services](https://digitalservices.bni.co.id/en/)\n* [API documentation](https://digitalservices.bni.co.id/documentation/public/en)\n* [Stackoverflow](https://stackoverflow.com/users/19817167/bni-api-management)\n* Can't find answer you looking for? email to [apisupport@bni.co.id](mailto:apisupport@bni.co.id)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bni-api/bni-python/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bnipython",
    "package_url": "https://pypi.org/project/bnipython/",
    "platform": null,
    "project_url": "https://pypi.org/project/bnipython/",
    "project_urls": {
      "Homepage": "https://github.com/bni-api/bni-python/"
    },
    "release_url": "https://pypi.org/project/bnipython/0.5.0/",
    "requires_dist": [
      "requests (>=2.25.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "Official  BNI API SDK for Python",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15763870,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63f4869b23ab8b0c95ef08cc5ffe4236dad64b8ea53ecafcfaf4172f8c145201",
          "md5": "c25bdeec3ba37f14e29be1ad21748f5c",
          "sha256": "add7973e514c4fcff2e734e2add3d37d0aa0931d07d0020d57581fa7db80d67f"
        },
        "downloads": -1,
        "filename": "bnipython-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c25bdeec3ba37f14e29be1ad21748f5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12954,
        "upload_time": "2022-09-12T17:33:21",
        "upload_time_iso_8601": "2022-09-12T17:33:21.058642Z",
        "url": "https://files.pythonhosted.org/packages/63/f4/869b23ab8b0c95ef08cc5ffe4236dad64b8ea53ecafcfaf4172f8c145201/bnipython-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6e42597b3dedbcad3c87784749d70c5fe7d819bf25eee385631acb0dca43417",
          "md5": "3a80b8a27ece8a9fd39d95a1fde875f8",
          "sha256": "f2e6806084e205a85659c529624f821a7b90910e2ada26ff6681e248cef38256"
        },
        "downloads": -1,
        "filename": "bnipython-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a80b8a27ece8a9fd39d95a1fde875f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 12295,
        "upload_time": "2022-11-14T15:37:59",
        "upload_time_iso_8601": "2022-11-14T15:37:59.160739Z",
        "url": "https://files.pythonhosted.org/packages/f6/e4/2597b3dedbcad3c87784749d70c5fe7d819bf25eee385631acb0dca43417/bnipython-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "044dbb0f2037cf42c2d272b4429bcc95ac0ec73d9e00e5183b3432c41449ae88",
          "md5": "c5734333858e153dd68e3777bbedf6cf",
          "sha256": "2414b32f6169f0682e8d8e3c1433b5bb11f34d21a3f0374a9f8928a6c6dbb900"
        },
        "downloads": -1,
        "filename": "bnipython-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c5734333858e153dd68e3777bbedf6cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13193,
        "upload_time": "2022-11-14T15:38:03",
        "upload_time_iso_8601": "2022-11-14T15:38:03.630650Z",
        "url": "https://files.pythonhosted.org/packages/04/4d/bb0f2037cf42c2d272b4429bcc95ac0ec73d9e00e5183b3432c41449ae88/bnipython-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c42c9ccd16a9498227cf683a17bfe7ef96e56a94b1731c3c7fd89c058c822dc7",
          "md5": "f950e30bd60202bd32039ef17ed9551e",
          "sha256": "82672c8d97dd47222d31f572a0769fa429d956d6ba19885781ff1f21ba9659f1"
        },
        "downloads": -1,
        "filename": "bnipython-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f950e30bd60202bd32039ef17ed9551e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 12293,
        "upload_time": "2022-11-14T15:33:51",
        "upload_time_iso_8601": "2022-11-14T15:33:51.725781Z",
        "url": "https://files.pythonhosted.org/packages/c4/2c/9ccd16a9498227cf683a17bfe7ef96e56a94b1731c3c7fd89c058c822dc7/bnipython-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feeb1f592456a914bcba4c547313449f805880d1ccdd6e906613cd04e7d8c376",
          "md5": "58a5afd0de630334ef1b8ac7c82b9c04",
          "sha256": "d4ddc27493e1e0f4b459b8bfd93abf068f5b036918c943a3f611ac261f1ca421"
        },
        "downloads": -1,
        "filename": "bnipython-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "58a5afd0de630334ef1b8ac7c82b9c04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13199,
        "upload_time": "2022-11-14T15:33:54",
        "upload_time_iso_8601": "2022-11-14T15:33:54.744650Z",
        "url": "https://files.pythonhosted.org/packages/fe/eb/1f592456a914bcba4c547313449f805880d1ccdd6e906613cd04e7d8c376/bnipython-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c42c9ccd16a9498227cf683a17bfe7ef96e56a94b1731c3c7fd89c058c822dc7",
        "md5": "f950e30bd60202bd32039ef17ed9551e",
        "sha256": "82672c8d97dd47222d31f572a0769fa429d956d6ba19885781ff1f21ba9659f1"
      },
      "downloads": -1,
      "filename": "bnipython-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f950e30bd60202bd32039ef17ed9551e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 12293,
      "upload_time": "2022-11-14T15:33:51",
      "upload_time_iso_8601": "2022-11-14T15:33:51.725781Z",
      "url": "https://files.pythonhosted.org/packages/c4/2c/9ccd16a9498227cf683a17bfe7ef96e56a94b1731c3c7fd89c058c822dc7/bnipython-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "feeb1f592456a914bcba4c547313449f805880d1ccdd6e906613cd04e7d8c376",
        "md5": "58a5afd0de630334ef1b8ac7c82b9c04",
        "sha256": "d4ddc27493e1e0f4b459b8bfd93abf068f5b036918c943a3f611ac261f1ca421"
      },
      "downloads": -1,
      "filename": "bnipython-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "58a5afd0de630334ef1b8ac7c82b9c04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 13199,
      "upload_time": "2022-11-14T15:33:54",
      "upload_time_iso_8601": "2022-11-14T15:33:54.744650Z",
      "url": "https://files.pythonhosted.org/packages/fe/eb/1f592456a914bcba4c547313449f805880d1ccdd6e906613cd04e7d8c376/bnipython-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}