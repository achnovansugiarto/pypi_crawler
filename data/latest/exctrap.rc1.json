{
  "info": {
    "author": "Isaac To",
    "author_email": "isaac.to@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# exctrap: Trap exceptions for retry\n\nIt is not uncommon to have Python code that requires exceptions to be\ntrapped, with the code triggering it retried, e.g., to handle\ntemporary network or host failures when fetching web resources.  There\nare quite a few Python packages that provide this functionality.  Or\nactually, two functionalities: (1) trapping the exception, and (2)\nretrying the triggering code upon failure.\n\nTypically, they work in the level of function: the code that needs to\nbe retried is written as a function, and it is either wrapped within a\ncontext manager or passed to a retry function so that the function is\ninvoked repeatedly until it succeeds or fail sufficiently many times.\nIn this way, the two functionalities are packed into one function or\ncontext manager for the user.\n\nWe take a slightly different approach: the two functionalities are\nseparated into two entities: a context manager that traps exception,\nand a function that returns the context manager.  We argue that this\nleads to neater code.\n\n## Recipe\n\nThis provides most of what we normally need.\n\n    for etrapper in exctrap.trial():\n        with etrapper:\n            # Do whatever that may fail.\n        # Will reach here whether or not an exception is raised.\n        # If you want to reraise the exception here, use etrapper.reraise().\n    # If retry fails, the last exception is reraised so this is not reached.\n\n## Options\n\nThe `trial()` function provides all the options.  These include:\n\n  * `num_tries`: Maximum number of trials, if the code keeps raising\n    exceptions for this many tries the exception is reraised without\n    further retry.\n  * `retry_period`: Number of seconds to wait between tries (adjusted\n    by `period_noise`).\n  * `period_noise`: Add or subtract at most this fraction of the\n    `retry_period` to get the actual amount of seconds to sleep.\n  * `etypes`: Exception types to trap.  By default, trap all\n    exceptions derived from `Exception`.  This is passed to the\n    constructor of `ExcTrapper` when creating exception trappers.\n\nNote that this does not require any function to be created for the\ncode needs to be exception-proof.  Experience shows that code can be a\nlot more neat as a result: the code can access the required variables\nmuch more easily when it does not sit within a separate global\nfunction or an inner function.\n\n## Implementation\n\nThe \"etrapper\" is the context manager which traps exceptions when\nrunning under the \"with\" statement.  This is done simply by recording\nexceptions in the trapper object, and returning True to swallow it, in\nthe `__exit__` function.  If needed, the exception can be asked to be\n`reraised()`.\n\nThe `trial()` function provides the retry logic and create exception\ntrappers.  Because the exception would be trapped in the trapper, all\ntrial needs to do is to check whether an exception is trapped, and\ndecide whether to retry or reraise.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/isaacto/exctrap",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exctrap",
    "package_url": "https://pypi.org/project/exctrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/exctrap/",
    "project_urls": {
      "Homepage": "https://github.com/isaacto/exctrap"
    },
    "release_url": "https://pypi.org/project/exctrap/0.1/",
    "requires_dist": null,
    "requires_python": "~=3.7",
    "summary": "Exception trap",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12420841,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce0ffbadc02eebf41fd666e900adfbd5c474abb3b55c2e0cd551983dfc8b760",
          "md5": "36c9041b01bf8b0cb2cf1be31bc753e6",
          "sha256": "fcf0624edcbfcd6aa70fa9301bbe9b363e50a4cf138b229204395f5b3761ce47"
        },
        "downloads": -1,
        "filename": "exctrap-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36c9041b01bf8b0cb2cf1be31bc753e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 5008,
        "upload_time": "2021-12-28T08:20:09",
        "upload_time_iso_8601": "2021-12-28T08:20:09.883026Z",
        "url": "https://files.pythonhosted.org/packages/fc/e0/ffbadc02eebf41fd666e900adfbd5c474abb3b55c2e0cd551983dfc8b760/exctrap-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ac19ebf17b2a60de82bf516c97cefe95b81278e700f71663ca92391c4fecd6",
          "md5": "af85ac76d774849979a0d45e9231ccc3",
          "sha256": "2ccb53dcd8eb154e19c622e59fbe7a1de3b7daf27a2f8d54ef83ddc25d6e1db2"
        },
        "downloads": -1,
        "filename": "exctrap-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af85ac76d774849979a0d45e9231ccc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 3766,
        "upload_time": "2021-12-28T08:20:11",
        "upload_time_iso_8601": "2021-12-28T08:20:11.638285Z",
        "url": "https://files.pythonhosted.org/packages/60/ac/19ebf17b2a60de82bf516c97cefe95b81278e700f71663ca92391c4fecd6/exctrap-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce0ffbadc02eebf41fd666e900adfbd5c474abb3b55c2e0cd551983dfc8b760",
        "md5": "36c9041b01bf8b0cb2cf1be31bc753e6",
        "sha256": "fcf0624edcbfcd6aa70fa9301bbe9b363e50a4cf138b229204395f5b3761ce47"
      },
      "downloads": -1,
      "filename": "exctrap-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36c9041b01bf8b0cb2cf1be31bc753e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 5008,
      "upload_time": "2021-12-28T08:20:09",
      "upload_time_iso_8601": "2021-12-28T08:20:09.883026Z",
      "url": "https://files.pythonhosted.org/packages/fc/e0/ffbadc02eebf41fd666e900adfbd5c474abb3b55c2e0cd551983dfc8b760/exctrap-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60ac19ebf17b2a60de82bf516c97cefe95b81278e700f71663ca92391c4fecd6",
        "md5": "af85ac76d774849979a0d45e9231ccc3",
        "sha256": "2ccb53dcd8eb154e19c622e59fbe7a1de3b7daf27a2f8d54ef83ddc25d6e1db2"
      },
      "downloads": -1,
      "filename": "exctrap-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "af85ac76d774849979a0d45e9231ccc3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 3766,
      "upload_time": "2021-12-28T08:20:11",
      "upload_time_iso_8601": "2021-12-28T08:20:11.638285Z",
      "url": "https://files.pythonhosted.org/packages/60/ac/19ebf17b2a60de82bf516c97cefe95b81278e700f71663ca92391c4fecd6/exctrap-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}