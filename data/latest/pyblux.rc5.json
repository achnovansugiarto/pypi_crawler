{
  "info": {
    "author": "Bertin Nono",
    "author_email": "bertin.nono@delta.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "<div align=\"center\">\n  <img src=\"https://pyblux-images.s3.amazonaws.com/logo.png\"><br>\n</div>\n\n# pyblux: A suite of fast, easy-to-use, and intuitive Python ETL utilities.\n\n![PyPI Latest Release](https://img.shields.io/pypi/v/pyblux.svg)\n[![Package Status](https://img.shields.io/pypi/status/pyblux.svg)](https://pypi.org/project/pyblux/)\n\n\n## What is it?\n> **pyblux** is a Python package that provides a suite of ETL utilities built to make the interactions with databases in the cloud as well as on-premise fast, easy and intuitive.\n\n### Features\n+ Support multiple databases, including Postgres, MySql, MS SQL, SQLIte, Teradata and Oracle.\n+ The `get_engine` method makes it easy to connect to databases in a simple and intuitive manner.\n+ `Blux.sql` method from the `Blux` class helps run fast queries. It Povides output results as namedtuple or dictionary and it supports parameterised queries and in-flight transformation of data. \n+ `Logger` class helps setup logging via log file or console.\n+ `send_teams_notification` method provides an easy way to send alerts to a MS Teams channel via an [incoming webhook](https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook).\n+ `send_email` method helps to send email with HTML content\n+ Helpful error messages display the failed query SQL\n+ [DBAPI2 specification](https://www.python.org/dev/peps/pep-0249/) was used in order to simplify coding for queries on relational database systems using Python.\n\n## Where to get it\nThe source code is currently hosted on GitHub at:\nhttps://github.com/bertin.nono/pyblux\n\nBinary installers for the latest released version are available at the [Python\nPackage Index (PyPI)](https://pypi.org/project/pyblux)\n\n```sh\n# or PyPI\npip install pyblux\n``` \n\n## pyblux provides support for the databases below:\n\n+ [Teradata](###get_engine)\n+ [PostgreSQL](###get_engine)\n+ [MySQL and MariaDB](###get_engine)\n+ [SQLite](###get_engine)\n+ [Oracle](###get_engine)\n+ [Microsoft SQL Server](###get_engine)\n\n## Dependencies\n\nDepending on the use case, the database package should be installed.\n\n+ [Teradata](https://pypi.org/project/teradatasqlalchemy/) :  Install the Teradata SQL Driver Dialect for SQLAlchemy\n```\npip install teradatasqlalchemy\n```\n+ [PostgreSQL](https://pypi.org/project/psycopg2/): Install Psycopg which is the most popular PostgreSQL database adapter for the Python programming language.\n```\npip install psycopg2-binary\n```\n+ [MySQL and MariaDB](https://pypi.org/project/PyMySQL/): Install the Pure Python MySQL Driver\n```\npip install PyMySQL\n```\n+ [SQLite]: No install required\n+ [Oracle](https://pypi.org/project/cx-Oracle/): Intall cx_Oracle which is a Python extension module that enables access to Oracle Database.\n\n```\npip install cx-Oracle\n```\n+ [Microsoft SQL Server](https://pypi.org/project/pyodbc/): Install the pyodbc which is an open source Python module that makes accessing ODBC databases simple.\n```\npip install pyodbc\n```\n\n### Documentation\n\n + [Classes](#classes)\n + [Methods](#methods)\n + [References](#references)\n\n# Classes \n\n+ ### **Blux:** \nEstablishes a connection engine to a database system referenced by the dialect attribute run fast queries.\n\n**Note:** The `dialect` is the system SQLAlchemy uses to communicate with various types of [DBAPI](https://docs.sqlalchemy.org/en/14/dialects/index.html#term-Fully-tested-in-CI) implementations and databases. \n\n```buildoutcfg\nclass Blux:\n    \"\"\"\n    This class connects to a local database session using the db `dialect` library.\n    \"\"\"\n\n    def __init__(self, engine=None,dialect=None):\n        \"\"\"\n        Args:\n            engine (str): Database connection engine.\n            dialect (str): database system name(postgres, oracle, teradata,...)\n        Note: Database Connection package must be installed in order to use this backend.\n        \"\"\"\n        self.engine = engine\n        self._dialect = dialect\n\n        self.__errlimit = 1\n        self.__warnings = []\n        self.__errors = []\n        self.__logons = []\n```\n**Example:**\n\n```python\ntable_list = \"\"\"SELECT table_schema, table_name FROM information_schema.tables\"\"\"\npostgres_engine = get_engine(dialect='PG', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\nblux= Blux(engine=postgres_engine, dialect='postgres')\ndataframe = blux.sql(query=table_list)\ntable = 'test'\ndatabase = 'postgres'\n#load dataframe to table\nblux.sql(dataframe=dataframe,database=database,table=table, dialect='postgres')\n```\n\n\n+ ### **Logger:** \nprovides a custom logging handler called `logger`. Helps Debug SQL and monitor progress with logging.\n```python\nclass Logger:\n    \"\"\"\n    This class connects to a local database session using the db `connnection` library.\n    \"\"\"\n\n    def __init__(self, logname:str, filename:str, level=logging.INFO, console:bool=True):\n        \"\"\"\n        Args:\n            logname (str): Logger Name.\n            filename (str): log file path \n            level (str): Logger Level (DEBUG, INFO, WARNING, ERROR)\n            console (cool): print to console\n        \"\"\"\n        self._logname = logname\n        self._filename = filename\n        self._level = level\n        self._console = console\n```\n\n**Example:**\n```python\nimport logging\nfrom pyblux import logger\n\npyblux_logger = Logger(logname=ETL.NAME, filename=log_file,level=logging.INFO, console=True)\nlogger=pyblux_logger.logger( verbose=True)\n```\n\nOutput from a call for `get_engine` will look like:\n```\n2021-07-07 15:06:22,411 get_engine: \n2021-07-07 15:06:22,413 get_engine: \n2021-07-07 15:06:22,416 get_engine: \n```\n\n# Methods:\n\n+ ### **get_engine:** \nCreates a database connection engine.\n\n```buildoutcfg\nget_engine(user:str,password:str,host:str,port:int,database:str,dialect:str,verbose:bool=False,parameter:str=None,raw_engine:bool=True,logger:Callable=print)\n```\nDatabase connection details are defined by `get_engine` objects (see below).\n\n**Example:**\n```python\nimport pandas\nfrom pyblux.utils import get_engine\nfrom pyblux.blux import Blux\n\noracle_engine = get_engine(dialect='oracle', host=\"localhost\", port=1521,database=\"mydata\", user=\"oracle_user\", password=\"123\")\n\nteradata_engine = get_engine(dialect='mssql', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_engine = get_engine(dialect='mysql', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_engine = get_engine(dialect='teradata', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_engine = get_engine(dialect='postgres', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\n```\n### Passwords\n\nIt is best practice for Database passwords to be stored in environment variables.\nThis can be done on the command line via:\n\n+ `export password=secret-password` on Linux\n+ `set password=secret-password` on Windows\n\nOr in a Python terminal via:\n\n```python\nimport os\nos.environ['password'] = 'secret-password'\n```\nNo password is required for SQLite databases.\n\n+ `When URL that includes the password contains` [Password conatains special characters](https://docs.sqlalchemy.org/en/14/core/engines.html)\n\n**Example:** \nConnection_String = postgresql+psycopg2://user:p@ssword%to%encode@hosturl/defaultdb\nThe above password encoded using urllib.parse:\n```import urllib.parse\n   pwd=urllib.parse.quote_plus(\"p@ssword%to%encode\")\n   print(pwd)\n   Connection_String = postgresql+psycopg2://user:urllib.parse.quote_plus(\"p@ssword%to%encode\")@hosturl/defaultdb\n```\n\n+ ### **get_connection:** \nGets a regular database connection.\n```buildoutcfg\nget_connection(user:str,password:str,host:str,port:int,database:str,dialect:str,verbose:bool=False,parameter:str=None,logger:Callable=print):\n    \"\"\"\n    Get a regular connection for Teradata , Oracle, Aurora/Postgres, Aurora/MySql/MariaDB, SQLite, and  Microsoft SQL Server\n    Returns\n    -------\n    Connection Object\n    \"\"\"\n```\n**Example:**\n```python\nfrom pyblux.utils import get_connection\n\noracle_conn = get_connection(dialect='oracle', host=\"localhost\", port=1521,database=\"mydata\", user=\"oracle_user\", password=\"123\")\n\nteradata_conn = get_connection(dialect='mssql', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_conn = get_connection(dialect='mysql', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_conn = get_connection(dialect='teradata', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\npostgres_conn = get_connection(dialect='postgres', host=\"localhost\", port=5432, database=\"mydata\", user=\"postgres_user\", password=\"123\")\n\n```\n\n+ ### **create_table_from_dataframe:** \nCreates table from a dataframe attributes and fastload data into in it.\n\n```buildoutcfg\ncreate_table_from_dataframe(dataframe:pd.DataFrame=None,table:str=None,Blux:Blux=None,verbose:bool=False,logger:Callable=print)\n```\n\n+ ### **is_exist:** \nChecks is a table or view exist.\n\n```buildoutcfg\nis_exist(table:str='', Blux:Blux=None,verbose:bool=False,logger:Callable=print)\n```\n+ ### **drop_table:** \nChecks is a table or view exist and then drops it if it exists.\n\n```buildoutcfg\ndrop_table(table:str=None,Blux:Blux=None,verbose:bool=False,logger:Callable=print)\n```\n\n\n+ ### **send_teams_notifications:** \nSend a Card to a MS Teams Channel\n\n```buildoutcfg\nsend_teams_notification ( hookurl: str, title: str='' , text: str='', message: str ='', status: str ='', error_message: str='', activitySubtitle: str='', activityText: str='')\n```\n\n+ ### **send_email:** \nSend an HTML formated email that can include a dataframe\n\n```buildoutcfg\nsend_email(server:str, port:int,sender: str, receivers: list, subject: str, body_text: str, attachment: any = None,df: pd.DataFrame = None)\n```\n\n### Maintainers:\n\n+ Bertin Nono  \n\n\n### Development status\n\nStable \n\n### Licence\n\nMIT\n\n\n## References\n\n+ [psycopg2](http://initd.org/psycopg/docs/cursor.html)\n+ [cx_Oracle](https://cx-oracle.readthedocs.io/en/latest/cursor.html)\n+ [sqlalchemy](https://docs.sqlalchemy.org/en/14/core/engines.html)\n \n\nChange Log\n==========\n\n(09/12/2021)\n-------------------\n- Initial Release",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/pyblux",
    "keywords": "etl,database,postgres,aurora,Oracle,Microsoft,Teams",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyblux",
    "package_url": "https://pypi.org/project/pyblux/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyblux/",
    "project_urls": {
      "Code": "https://github.com/pyblux/pyblux",
      "Documentation": "https://github.com/pyblux/pyblux#readme",
      "Download": "https://pypi.org/project/pyblux/",
      "Homepage": "https://pypi.org/project/pyblux",
      "Issue Tracker": "https://github.com/pyblux/pyblux/issues"
    },
    "release_url": "https://pypi.org/project/pyblux/0.0.5/",
    "requires_dist": null,
    "requires_python": ">= 3.6",
    "summary": "A Powerful suite of fast and intuitive Python ETL utilities",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11470336,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ce75f3e1292ecd83443429b38ca260ed5d951c2d5405a8fff5b37b9e0ba9c0b",
          "md5": "5bcc7bbea159323e5b95b5edfb2b732f",
          "sha256": "f44c73247594b39a4dd7a2029118fd4ccd8679a63159fe572e5d53547c135b87"
        },
        "downloads": -1,
        "filename": "pyblux-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5bcc7bbea159323e5b95b5edfb2b732f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 14033,
        "upload_time": "2021-09-13T04:17:50",
        "upload_time_iso_8601": "2021-09-13T04:17:50.751296Z",
        "url": "https://files.pythonhosted.org/packages/8c/e7/5f3e1292ecd83443429b38ca260ed5d951c2d5405a8fff5b37b9e0ba9c0b/pyblux-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be4f455f8686d99bddec00cc27fe971ea9425b94facc5de0379784f05f172e8",
          "md5": "bdd7990e4bbd8c8d8c78b65eb293e5c4",
          "sha256": "5bb09ee457c46d298abeade2dae03860991fb99529b115d8191118c17fffcd9b"
        },
        "downloads": -1,
        "filename": "pyblux-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd7990e4bbd8c8d8c78b65eb293e5c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 14043,
        "upload_time": "2021-09-13T04:31:44",
        "upload_time_iso_8601": "2021-09-13T04:31:44.146990Z",
        "url": "https://files.pythonhosted.org/packages/3b/e4/f455f8686d99bddec00cc27fe971ea9425b94facc5de0379784f05f172e8/pyblux-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ae740a3e4ef78ea94216f30f90c2534d217f66c366e45bc2777f6acbd4e2601",
          "md5": "6f63896048c4e6578b4f684add45b562",
          "sha256": "1d8c6adc356b1c4f2069ad3093859fe1bd4de1ad7db76f7f8296290b1a65a6c8"
        },
        "downloads": -1,
        "filename": "pyblux-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6f63896048c4e6578b4f684add45b562",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 13965,
        "upload_time": "2021-09-13T04:37:19",
        "upload_time_iso_8601": "2021-09-13T04:37:19.793587Z",
        "url": "https://files.pythonhosted.org/packages/7a/e7/40a3e4ef78ea94216f30f90c2534d217f66c366e45bc2777f6acbd4e2601/pyblux-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc6ada6710e2e24f4d85744dd87656725baf0ebb45e4390fb5d1b2015760631c",
          "md5": "20ced71b234d4b25ca072461c3b4677f",
          "sha256": "41ed123bb9a3d17c43947d647a5b3e9d19b6900376ddee6f0cdcb7f6a2bc3534"
        },
        "downloads": -1,
        "filename": "pyblux-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "20ced71b234d4b25ca072461c3b4677f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 13973,
        "upload_time": "2021-09-13T04:57:54",
        "upload_time_iso_8601": "2021-09-13T04:57:54.092336Z",
        "url": "https://files.pythonhosted.org/packages/bc/6a/da6710e2e24f4d85744dd87656725baf0ebb45e4390fb5d1b2015760631c/pyblux-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60f5edba9577d0826a5042819f73c1daddaf38f4ca7e4e7a4f40286733e0a79a",
          "md5": "6c83f37a1d6c627467c59f0e7c7d76c0",
          "sha256": "3480e1d564f23211cb63049ef033aeaaac13ef493ac5853dce1aec81fc5a8fba"
        },
        "downloads": -1,
        "filename": "pyblux-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6c83f37a1d6c627467c59f0e7c7d76c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 13978,
        "upload_time": "2021-09-16T18:18:49",
        "upload_time_iso_8601": "2021-09-16T18:18:49.003832Z",
        "url": "https://files.pythonhosted.org/packages/60/f5/edba9577d0826a5042819f73c1daddaf38f4ca7e4e7a4f40286733e0a79a/pyblux-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60f5edba9577d0826a5042819f73c1daddaf38f4ca7e4e7a4f40286733e0a79a",
        "md5": "6c83f37a1d6c627467c59f0e7c7d76c0",
        "sha256": "3480e1d564f23211cb63049ef033aeaaac13ef493ac5853dce1aec81fc5a8fba"
      },
      "downloads": -1,
      "filename": "pyblux-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6c83f37a1d6c627467c59f0e7c7d76c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 13978,
      "upload_time": "2021-09-16T18:18:49",
      "upload_time_iso_8601": "2021-09-16T18:18:49.003832Z",
      "url": "https://files.pythonhosted.org/packages/60/f5/edba9577d0826a5042819f73c1daddaf38f4ca7e4e7a4f40286733e0a79a/pyblux-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}