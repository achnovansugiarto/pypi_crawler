{
  "info": {
    "author": "Thomas Findlay",
    "author_email": "findlaytel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pytorch-convo\n A package to automatically set up simple convolutional neural networks in pytorch.\n \n[![Downloads](https://pepy.tech/badge/pytorch-convo)](https://pepy.tech/project/pytorch-convo)\n[![PyPi version](https://badgen.net/pypi/v/pytorch-convo/)](https://pypi.com/project/pytorch-convo)\n \n## `convo.make_convolutions()`\n\nThis is the only function exported by this one-module package, intended to make designing 'quick and dirty'\nconvolutional sub-networks easy and quick!\n\nGive it the shapes and activations you want, it'll give you a network taking your `in_shape` to your `out_shape`\nin `n_layers` steps.\n\nThe solver is currently a little shaky, and may fail or be slow for larger input sizes and numbers of layers.\n\n### Signature:\n```python\nconvo.make_convolutions(\n\t\t    in_shape, out_shape, n_layers, kernel_size=None, stride=None,\n            \t    padding_mode=\"zeros\", dilation=1, bias=True, \n            \t    activation=nn.ReLU, pool_type=\"max\", norm_type=None, \n\t\t    module_list=False, cache=True\n\t\t    ) -> torch.nn.Sequential or torch.nn.ModuleList\n```\n\n### Args:\n\n- `in_shape`: A tuple of ints specifying the shape of the input to the convolutional\nsystem. `(C, X, [Y], [Z])`\n\n- `out_shape`: A tuple with the same shape as in_shape, specifying the desired\noutput shape. \n\n- `n_layers`: int, the number of convolutional layers in the system.\n\n- `kernel_size`: None, int, tuple of int (one int per layer) or tuple of tuples of int\n (shape \\[n_layers, n_spatial_dims], one int per dimension per layer). The kernel size\n for each convolutional filter. See PyTorch docs for more detail. None means the solver will\n find an appropriate value itself.\n \n- `stride`: None, int, tuple of int (one int per layer) or tuple of tuples of int\n (shape \\[n_layers, n_spatial_dims], one int per dimension per layer). The stride\n of each convolutional filter. See PyTorch docs for more detail. None means the solver will\n find an appropriate value itself.\n \n- `padding_mode`: one of 'zeros', 'reflect', 'replicate' or 'circular'. Default: 'zeros'.\n\tThe type of padding used where neccessary. See PyTorch docs for more detail.\n\t\n- `dilation`: None, int, tuple of int (one int per layer) or tuple of tuples of int\n (shape \\[n_layers, n_spatial_dims], one int per dimension per layer). The dilation for each \n convolutional filter. See PyTorch docs for more detail. None means the solver will\n find an appropriate value itself.\n \n- `bias`: Bool or array of Bool. Whether the convolutional layers will use a bias tensor or not.\n\n- `activation`: None or class inheriting torch.nn.Module. One instance of this type will be \nadded after each convolutional layer. n.b. this needs to be a class object, NOT an instance\nthat class (`activation=nn.ReLU` and not `activation=nn.ReLU()`).\n\n- `pool_type`: 'max' or 'avg'. Default 'max'. Indicates whether MaxPool or AvgPool layers will be used.\n\n- `norm_type`: None or 'batch'. Default None. Indicates whether BatchNorm layers will be added after\neach pooling layer. In the future other norm types will be implemented.\n\n- `module_list`: Bool. Whether the returned object will be an instance of `torch.nn.Sequential`\nor `torch.nn.ModuleList`.\n\n- `cache`: Bool. Whether or not to use the caching system to check whether a solution has already\nbeen generated for the given parameters.\n\n### Returns:\n\nA system of (`n_layers` of) convolutional, activation, pooling and (optionally) norm layers \ntaking an input of shape `(batch_size, *in_shape)` and returning a result of shape `(batch_size, *out_shape)`.\nThese layers are contained in a `torch.nn.Sequential` object or a `torch.nn.ModuleList` if specified by the\n`module_list` argument.\n\n## Using convo\n\nCurrently, convo is in the testing phase and has been released in alpha on PyPI. You will find bugs so please make PRs or post issues\nhere so I can get them squashed.\n\n*Also check out my other baby, QutiePy - a python quantum computing library.*\n\n### Installing pytorch-convo\n\nThe package can be installed with `pip`:\n```\npip install pytorch-convo\n```\nand imported with:\n```python\nfrom convo import make_convolutions\n```\n\n### Example\n\nBelow is an example of how to use `make_convolutions` to automate convolution parameter calculations and\nkeep network definitions tidy. Remember, if you want to check the parameters `make_convolutions` has suggested,\njust `print` the resulting `nn.Sequential` or `nn.ModuleList` for a nice representation of the subnetwork in the console.\n\n```python\nimport torch.nn as nn\nfrom torch import flatten\nimport convo\n\nclass MyCNN(nn.Module):\n\tdef __init__(self):\n\t\tsuper(MyCNN, self).__init__()\n\t\tself.conv_subnet = convo.make_convolutions([3, 256, 256], [100, 1, 1], 3)\n\t\t## Uncomment the following to inspect the subnet params:\n\t\t# print(self.conv_subnet)\n\t\tself.flatten = nn.Flatten()\n\t\tself.full_conn = nn.Linear(100, 1)\n\t\tself.activation = nn.Sigmoid()\n\t\n\tdef forward(self, batch):\n\t\t# batch has shape [BATCH_SIZE, 3, 256, 256]\n\t\tflat = self.flattten(self.conv_subnet(batch))\n\t\toutput = self.activation(self.full_conn(flat))\n```\n\n### Tips and Tricks\n\n- The argument `activation` can be any `nn.Module` subtype and therefore can be an `nn.Sequential` of several layers, so long as these layers do not change the shape of the\ntensor passed to `forward` as this will mess up the shape solver (in its current state at least :) ).\n\n## TODO:\n- Make proper docs.\n- Test, test, test...\n- Automate testing.\n- Add more norm layer types.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/franklinscudder/pytorch-convo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autoconvo",
    "package_url": "https://pypi.org/project/autoconvo/",
    "platform": "",
    "project_url": "https://pypi.org/project/autoconvo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/franklinscudder/pytorch-convo/issues",
      "Homepage": "https://github.com/franklinscudder/pytorch-convo"
    },
    "release_url": "https://pypi.org/project/autoconvo/0.0.6/",
    "requires_dist": [
      "torch",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A package to automatically set up simple convolutional neural networks in PyTorch.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11512252,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf30d159abb927657b98d7942e868c6977a82def345a8fc840adfb3c5e931abc",
          "md5": "b9db4138c2dfa813ebcb4022380d77cd",
          "sha256": "9e00bdd4779a78bbe776310e03c94bc0e768fa326cc737c5e32243634360669d"
        },
        "downloads": -1,
        "filename": "autoconvo-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9db4138c2dfa813ebcb4022380d77cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9183,
        "upload_time": "2021-09-21T21:55:02",
        "upload_time_iso_8601": "2021-09-21T21:55:02.703276Z",
        "url": "https://files.pythonhosted.org/packages/cf/30/d159abb927657b98d7942e868c6977a82def345a8fc840adfb3c5e931abc/autoconvo-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a71ee8345911ba7d5f33ed4f072a263e469ddf080e932ec733b738b7660483",
          "md5": "4865df5e032c0b5bc20928bd0429daf6",
          "sha256": "8c806b796b7b35f05a4c6905bbe8e0447ecc9f66a83c7c9f63efb2240728593d"
        },
        "downloads": -1,
        "filename": "autoconvo-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4865df5e032c0b5bc20928bd0429daf6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10157,
        "upload_time": "2021-09-21T21:55:04",
        "upload_time_iso_8601": "2021-09-21T21:55:04.718040Z",
        "url": "https://files.pythonhosted.org/packages/d5/a7/1ee8345911ba7d5f33ed4f072a263e469ddf080e932ec733b738b7660483/autoconvo-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf30d159abb927657b98d7942e868c6977a82def345a8fc840adfb3c5e931abc",
        "md5": "b9db4138c2dfa813ebcb4022380d77cd",
        "sha256": "9e00bdd4779a78bbe776310e03c94bc0e768fa326cc737c5e32243634360669d"
      },
      "downloads": -1,
      "filename": "autoconvo-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b9db4138c2dfa813ebcb4022380d77cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9183,
      "upload_time": "2021-09-21T21:55:02",
      "upload_time_iso_8601": "2021-09-21T21:55:02.703276Z",
      "url": "https://files.pythonhosted.org/packages/cf/30/d159abb927657b98d7942e868c6977a82def345a8fc840adfb3c5e931abc/autoconvo-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5a71ee8345911ba7d5f33ed4f072a263e469ddf080e932ec733b738b7660483",
        "md5": "4865df5e032c0b5bc20928bd0429daf6",
        "sha256": "8c806b796b7b35f05a4c6905bbe8e0447ecc9f66a83c7c9f63efb2240728593d"
      },
      "downloads": -1,
      "filename": "autoconvo-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4865df5e032c0b5bc20928bd0429daf6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10157,
      "upload_time": "2021-09-21T21:55:04",
      "upload_time_iso_8601": "2021-09-21T21:55:04.718040Z",
      "url": "https://files.pythonhosted.org/packages/d5/a7/1ee8345911ba7d5f33ed4f072a263e469ddf080e932ec733b738b7660483/autoconvo-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}