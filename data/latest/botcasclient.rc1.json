{
  "info": {
    "author": "gunville",
    "author_email": "rk13088@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Bottle",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## botCasSP - A CAS Client for Bottle Web Apps\n\n### Description\n**botCasSP** is a [CAS (Central Authentication Service)]() client module for [Bottle web framework]() applications.  The **CasSP** instance allows bottle apps to be CAS Service Providers (SP's), authenticating users to a CAS server, and use any assertions the CAS server provides within the client session.\n\n**CAS** is a [legacy single sign-on (SSO) protocol](), still in not uncommon use, especially in academia. CAS uses back channel verification and is simple to add to applications.\n\n### botCasSP Getting started\n\n```python\nfrom botCasSP import CasSP\nfrom BottleSession import BottleSession\nfrom bottle import Bottle\n\nfrom config import sess_config, cas_config\napp = Bottle()\nses = BottleSession(*sess_config)\ncas_config ={\n  'cas_server_base_url': 'https://cas.example.com/cas/',\n  'cas_attr_list' : ['sn', 'givenName', 'uid', 'groups']\n\n}\ncasc = CasSP(app=app, config=cas_config)\n\n@app.route('/login')\n@casc.require_login\ndef hello():\n    return f'Hello {request.session['username']}'\n\n@app.route('/bobAndAlice')\n@casc.require_user(['bob','alice'])\ndef only():\n    return 'Hello bob or alice'\n\n@app.route('/sysadmins')\n@casc.require_attr('groups': ['sysadmin', 'netadmin'])\ndef admins():\n    return \"Hello admin\"\n\n@app.route('/logoff')\ndef bye():\n    if casc.is_authenticated:\n        casc.initiate_logoff(next=request.url)\n    return 'bye'\n\nif __name__ == '__main__':\n    app.run()\n```\n**botCasSP** uses [BottleSessions]() for session management. Install **BottleSessions** before **CasSP**. (BottleSessions is based on **Pallets project** *cachelib*, providing numerous caching back-ends including filesystem, redis, and memcached back-ends.)\n\nAt the minimum (cas v1) the CAS server will just authenticate the user. Most v1 and all v2/v3 servers provide the username. With **botCasSP** this can be accessed as `request.session.get('username')` or `casc.my_username`. \n\nOther Information provided with CAS v2/v3 server authentication is matched against the `cas_attr_list` in the configuration. Attributes with matching names are added to the users session. This is `['sn', 'givenName', 'uid', 'groups']` in the example. If the CAS servers provides these attributes, they are included in the users session and are accessible in a `dict` as `request.session['attributes']` or `casc.my_attrs`. \n\nThe `username` and `attributes` data are available both to views and to any middleware installed in the request stack after *BottleSessions*.  This data can be used by Bottle apps to pre-populate forms, used for identifcation to other systems, etc.\n\n### botCasSP CasSP Class\n**botCasSP** is the module, **CasSP** is the class implementing *CAS Service Provider* function.\n#### CasSP Class Signature:\n```python\nfrom botCasSP import CasSP\n\ncasc = CasSP(app=app, \n        config=cas_config, \n        sess_username='username', \n        sess_attr='attributes', logger=None, \n        )\n```\n#### CasSP Parameters and Configuration:\n**app:**\n* **Required:** the Bottle app instance\n\n**sess_username='username':**\n* **Optional:** Name of the session entry to contain username (default: `username` as in `session['username']`) It's unlikely this needs to be changed.\n\n**sess_attr='attributes':**\n* **Optional:** Name of the session entry to contain assertion attributes (default: `attributes` as in `session['attributes']['email']`)  It's unlikely this needs to be changed.\n\n**config={}:**\n* **Required:** A Python `dict` of CAS configuration parameters. The most important is the base url and the attribute list:\n\n  * **`cas_server_base_url`** : API base URL of the CAS server **(required)** Typically this is in the form of https://cas.example.org/cas/. CasSP builds out the remainder of the server API from the base url.\n\n  * **`cas_version`** : CAS protocol version: `v1`, `v2`, or `v3` (default: `v2`) There isn't much benefit to v3, and v1 generally only provides the username.\n\n  * **`cas_attr_list`** : Python `list` of attributes. These are the assertions from a v2 or v3 server to be kept in a users session from a successful CAS validation response.\n    * *e.g.* ['email', 'sn', 'givenname', 'groups']\n    * It's up to the CAS server to provide parameters.\n    * *default* is [ ]\n  > Example cas_config\n    ```python\n    cas_config = {\n        \"cas_server_base_url\": \"https://cas.example.com/cas\",\n        \"cas_attr_list\" : [\"sn\", \"given\", \"email\",\"groups\", \"dept\"]\n    }\n    ```\n\n**logger=None:**\n* **Optional:** Python `logger` object. CasSP defaults logging to `stderr` if no logger is provided.\n\n\n#### Properties:\n\n**`casc.is_authenticated`** : `True` if the current session is authenticated.\n**`casc.my_username`** Returns username or `None` if not authenticated.\n**`casc.my_attrs`** Returns `dict` of retrieved attrs or {} if not authenticated.\n\n#### Methods:\n\n##### Login management\n**`casc.initiate_login(next,**kwargs) => redirect`**\n* Returns SAML (302) redirect to the CAS server to authenticate via username/password or SSO.\n* `next=None` - URL to redirect after login completed (optional)\n* Use this in your login view, or decorate with `@casc.require_login` - it does the same thing.\n\n**`casc.initiate_logout(next) => redirect | str`**\n* Initiate Logout from iDP by redirecting to the CAS servers logout.\n* `next=None` - URL to redirect after logout completed (optional) Some CAS servers ignore this.\n\n**`casc._finish_login() => Response | str`**\n  * **route:** *`/casc/finish`*\n  * Standard service ticket endpoint from `casc.initiate_login()`\n  * Validates the ticket and runs login hooks\n  * Construct user session data from validation response.\n  * redirects user to route that triggered the login.\n\n##### Login Hooks Decorator\n\n**`@casc.add_login_hook`** or\n**`casc.add_login_hook(f)`**\n  * Decorates a function `f` that runs after SAML authentication is completed\n  * each login hook is run in order of additon\n  * data can be updated before being added to the session with login_hooks\n```python\n@casc.add_login_hook\ndef my_login_hook(username, attributes):\n    \n    # massage or transform attributes\n    username = username.tolower()\n    \n    # standaradize naming\n    attributes['surname'] = attributes['sn']\n    del attributes['sn']\n    \n    # supplement data from other sources\n    attributes['graph'] = get_graph_data_api(username)\n    \n    # raise exception to thwart login \n    if attributes['affiliation'] != 'employee': \n        raise Exception('Employees only')\n    \n    # return both username and attributes for the next hook to use.\n    return username, attributes\n```\n##### View Decorators\n**`@casc.login_required`** or\n**`casc.login_required(f)`**\n  * route decorator\n  * Decorates a view function `f` to require unauthenticated users to login.\n  * After authentication the user is redirected to the view that initaited the login.\n  * Order after @app.route decorators:\n```python\n@app.route('/login')\n@casc.login_required\ndef myview():\n    return 'All logged in!'\n```\n\n**`@casc.require_user(user_or_list)`** or\n**`casc.require_user(f, user_or_list)`**\n  * Decorates a function `f` to require session user to be listed\n  * a single user or a list of users can be provided\n  * Returns *403 Unauthorized* if session username is not in the list\n  * Order after @app.route decorators:\n```python\n@app.route('/onlybob')\n@casc.require_user('bob')\ndef view():\n    return 'Hi bob'\n\n@app.route('/boboralice')\n@casc.require_user(['bob', 'alice'])\ndef view2():\n    return 'Hi alice or bob'\n```\n**`@casc.require_attr(attr, value)`** or\n**`casc.require_user(f, attr, value)`**\n  * Decorates a function `f` to require session to have attr with value listed\n  * a single attribute value or a list of values can be provided\n  * Returns *403 Unauthorized* if session does not have the required attr/value.\n  * Order after @app.route decorators:\n```python\n@app.route('/dbstuff')\n@casc.require_attr('role', 'dba')\ndef dba_view():\n    ...\n\n@app.route('/infrastructure')\n@casc.require_attr('groups', ['sysadmin', 'netadmin','storageadmin', 'cloudadmin'])\ndef infra_view():\n    ...\n```\n##### Proxy Mode Methods \nThese are helpers for assembling a CAS proxy service, allowing an SP to request resources from another CAS server on a users behalf. \n\n**`casc.get_proxy_session(service, resource_urn)`**\n  * Acquire and authorize a proxy ticket for `resource_urn` via `service`\n  * Returns a [Python Requests]() `Session` object or `None` for application use.\n  * **Requests** `Session` object will have any of the service cookies for the `resource_urn`\n  * `resource_urn` is optional (will use service)\n\n**`casc.acquire_proxy_ticket(service)`**\n  * Returns Proxy Ticket for a `service`\n  * `proxy_api` mode only.\n\n**`casc.service_proxy()`**\n  * **route:**  *`/casc/proxy`* \n  * Available only in `proxy_api` mode.\n  * Returns redirect for service with attached proxy_ticket\n  * route front end for `casc.acquire_proxy_ticket`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Glocktober/botCasClient",
    "keywords": "'bottle CAS plugin'",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "botCasClient",
    "package_url": "https://pypi.org/project/botCasClient/",
    "platform": "",
    "project_url": "https://pypi.org/project/botCasClient/",
    "project_urls": {
      "Homepage": "https://github.com/Glocktober/botCasClient",
      "overview": "https://github.com/Glocktober/botCasClient/blob/main/README.md",
      "repo": "https://github.com/Glocktober/botCasClient"
    },
    "release_url": "https://pypi.org/project/botCasClient/21.9.22/",
    "requires_dist": [
      "bottle (>=0.12.0)",
      "BottleSessions (>=21.09.01)",
      "defusedxml (>=0.7.1)",
      "requests (>=2.20.0)",
      "jinja2 (>=3.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "CAS Client (SP) for Bottle",
    "version": "21.9.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11512608,
  "releases": {
    "21.9.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "465beee699e07ad6e9dfa80f1e1fa9acbf82bfc60d532b812b9c3a3663badd20",
          "md5": "552e1b6d43a0edd24c21e50f03e3541a",
          "sha256": "eb826687363c12331cae25ca9944912d6302f024f89ef1f7fef3495809417462"
        },
        "downloads": -1,
        "filename": "botCasClient-21.9.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "552e1b6d43a0edd24c21e50f03e3541a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14318,
        "upload_time": "2021-09-21T22:43:18",
        "upload_time_iso_8601": "2021-09-21T22:43:18.286343Z",
        "url": "https://files.pythonhosted.org/packages/46/5b/eee699e07ad6e9dfa80f1e1fa9acbf82bfc60d532b812b9c3a3663badd20/botCasClient-21.9.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "465beee699e07ad6e9dfa80f1e1fa9acbf82bfc60d532b812b9c3a3663badd20",
        "md5": "552e1b6d43a0edd24c21e50f03e3541a",
        "sha256": "eb826687363c12331cae25ca9944912d6302f024f89ef1f7fef3495809417462"
      },
      "downloads": -1,
      "filename": "botCasClient-21.9.22-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "552e1b6d43a0edd24c21e50f03e3541a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14318,
      "upload_time": "2021-09-21T22:43:18",
      "upload_time_iso_8601": "2021-09-21T22:43:18.286343Z",
      "url": "https://files.pythonhosted.org/packages/46/5b/eee699e07ad6e9dfa80f1e1fa9acbf82bfc60d532b812b9c3a3663badd20/botCasClient-21.9.22-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}