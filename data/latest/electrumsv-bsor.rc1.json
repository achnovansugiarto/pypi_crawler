{
  "info": {
    "author": "Roger Taylor",
    "author_email": "roger.taylor.email@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# The `electrumsv-bsor` package\n\nTokenized have developed a serialisation format that encodes in Bitcoin script object\nrepresentation, or BSOR for short. This package uses the test files from\n[Tokenized's project](https://github.com/tokenized/pkg/tree/p2p/bsor) in order to verify\nthat it can both convert a binary representation to a decoded object, and to convert that decoded\nobject back to the same binary representation.\n\nThis package loosely follows the standard `dump`/`dumps`/`load`/`loads` API that standard library\nmodules like [json](https://docs.python.org/3/library/json.html) and\n[pickle](https://docs.python.org/3/library/pickle.html) provide, although there are some extra\nrequirements for this package due to the need to the way data structures are defined.\n\n## The package API\n\n* `electrumsv_bsor.dump(object, stream, structure_metadata)`\n* `data: bytes = electrumsv_bsor.dump(object, structure_metadata)`\n* `object = electrumsv_bsor.load(stream, definition, class_reference)`\n* `object = electrumsv_bsor.loads(data, definition, class_reference)`\n\nFor now, the nuances of how to use this are best observed in the test files.\n\n## Structure markup in Python\n\nThe `structure_metadata` is how the encoder and decoder works out how to encode or decode\ndifferent types of objects. For non-structures like `PublicKey` they generally already provide\nencoding and decoding methods directly to and from the desired encoding data type. For structures\nlike `XTestSubStruct` these must meet the definition requirements and considered a special\nserialisation `OBJECT` data type.\n\n```python\n    structure_metadata: dict[str, tuple[Any, Any, FieldType]] = {\n        \"PublicKey\": (PublicKey.from_bytes, lambda instance: instance.to_bytes, FieldType.BYTES),\n        \"XTestSubStruct\": (XTestSubStruct, None, FieldType.OBJECT),\n    }\n```\n\nStructures define their own BSOR encoding format and this is done using the standard library\n[dataclasses](https://docs.python.org/3/library/dataclasses.html) module.\n\n```python\n@dataclass\nclass XTestStructSimple:\n    IntField: int = field(metadata={ \"bsor_id\": 1 })\n    StringField: str = field(metadata={ \"bsor_id\": 2 })\n    IntZeroField: int = field(metadata={ \"bsor_id\": 3 })\n    SubStruct: XTestSubStruct = field(metadata={ \"bsor_id\": 4     })\n    BinaryField: bytes = field(metadata={ \"bsor_id\": 5 })\n    IntPointerField1: int | None = field(metadata={ \"bsor_id\": 6 })\n    IntPointerField2: int | None = field(metadata={ \"bsor_id\": 7 })\n    PublicKeyField: PublicKey = field(metadata={ \"bsor_id\": 8  })\n    ArrayStringPtrField: list[str|None] = field(metadata={ \"bsor_id\": 25 })\n```\n\nEach defined field in the structure must have a field identifier (`bsor_id` in the data classes\n`metadata`) that matches the same value in any other definitions of the same structure in other\nprojects. The type of the field is drawn from the Python typing annotations, for example, in the\ncase of the `IntField` field it is `int`.\n\nOther supported metadata entries are:\n\n* `bsor_length` is used for fixed lengths of fields, whether string, bytes, lists or other types.\n* `bsor_type` can be provided for fields with `float` annotation, and may be either\n  `FieldType.FLOAT` or `FieldType.DOUBLE`.\n\nGo pointer equivalence is considered to represented by `Optional` Python values and are indicated\nwith use of the `| None` Python type annotation.\n\n## Warning\n\nAny use of this package is best preceded with test data that exercises the structures to be used\nfor all variations.\n\n## Implementation notes\n\nThere are various things that need testing and further work and are not hit by the test files\nborrowed from the Tokenized project:\n\n* `bsor_type` values are not actually tested in the test data, and it is possible that decoding\n  of `FieldType.DOUBLE` values does not work. Encoding does not check this metadata field yet.\n* `bsor_length` likely has a lot of edge cases that are not covered and may not even be\n  representable in the current structures (lists of fixed length strings for instance).\n\nThe Python [dataclasses](https://docs.python.org/3/library/dataclasses.html) standard module keeps\ntype names in string format, which means there is no way of matching the type names to the classes\nbeing referred to. This is what the `structure_metadata` dictionary provides coverage of, both\nstructures and encoded data types can be declared by the given `dataclasses` type name in this\ndictionary.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/electrumsv/electrumsv-bsor",
    "keywords": "",
    "license": "Open BSV License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "electrumsv-bsor",
    "package_url": "https://pypi.org/project/electrumsv-bsor/",
    "platform": null,
    "project_url": "https://pypi.org/project/electrumsv-bsor/",
    "project_urls": {
      "Homepage": "https://github.com/electrumsv/electrumsv-bsor"
    },
    "release_url": "https://pypi.org/project/electrumsv-bsor/0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A BSOR encoding/decoding library.",
    "version": "0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14678107,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9b19c3eaee6421b6b1c5ce46134ca50a658c7f07083e40ce1e1fbe0547e99be",
          "md5": "dadbfa8bb1c9591cf015cac3f5312910",
          "sha256": "061abcb622195a22065802439cdcfbba9b5cd822a65647f5c979b0e76704da55"
        },
        "downloads": -1,
        "filename": "electrumsv_bsor-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dadbfa8bb1c9591cf015cac3f5312910",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8710,
        "upload_time": "2022-08-07T05:31:08",
        "upload_time_iso_8601": "2022-08-07T05:31:08.626799Z",
        "url": "https://files.pythonhosted.org/packages/c9/b1/9c3eaee6421b6b1c5ce46134ca50a658c7f07083e40ce1e1fbe0547e99be/electrumsv_bsor-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "902e251b67ab34724376866a559a932ad6f788a0787008cec910bfc25ca45896",
          "md5": "36790f629f4b7b96bf9b91edeee25bfa",
          "sha256": "a18a6ebbd2b3d1bcb8346924d6b4c66d157a0ffe90aaf5e4f97a52266987ce14"
        },
        "downloads": -1,
        "filename": "electrumsv-bsor-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "36790f629f4b7b96bf9b91edeee25bfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8278,
        "upload_time": "2022-08-07T05:31:10",
        "upload_time_iso_8601": "2022-08-07T05:31:10.855135Z",
        "url": "https://files.pythonhosted.org/packages/90/2e/251b67ab34724376866a559a932ad6f788a0787008cec910bfc25ca45896/electrumsv-bsor-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9b19c3eaee6421b6b1c5ce46134ca50a658c7f07083e40ce1e1fbe0547e99be",
        "md5": "dadbfa8bb1c9591cf015cac3f5312910",
        "sha256": "061abcb622195a22065802439cdcfbba9b5cd822a65647f5c979b0e76704da55"
      },
      "downloads": -1,
      "filename": "electrumsv_bsor-0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dadbfa8bb1c9591cf015cac3f5312910",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8710,
      "upload_time": "2022-08-07T05:31:08",
      "upload_time_iso_8601": "2022-08-07T05:31:08.626799Z",
      "url": "https://files.pythonhosted.org/packages/c9/b1/9c3eaee6421b6b1c5ce46134ca50a658c7f07083e40ce1e1fbe0547e99be/electrumsv_bsor-0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "902e251b67ab34724376866a559a932ad6f788a0787008cec910bfc25ca45896",
        "md5": "36790f629f4b7b96bf9b91edeee25bfa",
        "sha256": "a18a6ebbd2b3d1bcb8346924d6b4c66d157a0ffe90aaf5e4f97a52266987ce14"
      },
      "downloads": -1,
      "filename": "electrumsv-bsor-0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "36790f629f4b7b96bf9b91edeee25bfa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8278,
      "upload_time": "2022-08-07T05:31:10",
      "upload_time_iso_8601": "2022-08-07T05:31:10.855135Z",
      "url": "https://files.pythonhosted.org/packages/90/2e/251b67ab34724376866a559a932ad6f788a0787008cec910bfc25ca45896/electrumsv-bsor-0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}