{
  "info": {
    "author": "vavarachen",
    "author_email": "vavarachen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "# CSFalcon-Client\nPython API client wrapper for CrowdStrike Falcon Query API.\n\n# Features\n- Retrieve prevention policy details\n- Search for falcon agents\n- Retrieve falcon agent details\n- Contain host (RTR)\n\n# References\n- [CrowdStrike Falcon Swagger UI](https://assets.falcon.crowdstrike.com/support/api/swagger.html#/oauth2/oauth2AccessToken)\n- [Falcon oAuth2 Token API](https://falcon.crowdstrike.com/support/documentation/93/oauth2-auth-token-apis)\n- [CrowdStrike OAuth2-Based APIs](https://falcon.crowdstrike.com/support/documentation/46/crowdstrike-oauth2-based-apis)\n- [Host and host group management APIs](https://falcon.crowdstrike.com/support/documentation/84/host-and-host-group-management-apis)\n- [Detection and Prevention Policy APIs](https://falcon.crowdstrike.com/support/documentation/85/detection-and-prevention-policies-apis)\n- [Real Time Response APIs](https://falcon.crowdstrike.com/support/documentation/90/real-time-response-apis)\n\n# Install\n```shell script\npip install falcon-client\n```\n\n# Configuration file\n```ini\n[falcon]\nclient_id = 4uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nclient_key = bAt1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n# HTTP Interception Proxy\n;proxy_host = localhost\n;proxy_port = 8080\n```\n\n# Examples\n## Initialize client\n```python\ntry:\n    # default config ~/.crowdstrike/csfalcon.ini\n    fc = falcon_client.FalconClient()\n    # fc = falcon_client.FalconClient(config_file_path='~/csfalcon.ini')\n    # fc = FalconClient.basic(client_id='',\n    #                         client_key='',\n    #                         proxy_host='localhost', proxy_port=8080)\nexcept Exception as err:\n    sys.exit(err)\nelse:\n    fc.login()\n    print(fc)\n```\n\n## Retrieve prevention policy details\n```python\n# POLICY DETAILS\nprint(\"Prevention Policies\")\nfor result in fc.prevention_policies_details(ids=None):\n    print(json.dumps(result, indent=2))\n```\n\n## Device Scroll\nSearch for hosts in your environment by platform, hostname, IP, and other criteria with continuous pagination capability (based on offset pointer which expires after 2 minutes with no maximum limit)\n```python\nprint(\"DEVICE SCROLL\")\nhosts_resp = fc.device_scroll(limit=10, fql_filter='platform_name: \"Linux\" +first_seen: >= \"2020-12-11T00:00:00Z\"')\nfor host in hosts_resp:\n    print(json.dumps(host, indent=2))\n```\n\n## Device Search\nSearch for hosts in your environment by platform, hostname, IP, and other criteria.\n\nDevice Search supports the same options as Device Scroll. The only difference between Device Search and Device Scroll is their pagination and response limit:\n- Device Search: Standard pagination (page number, page size) up to 150,000 devices\n- Device Scroll: Continuous pagination (based on an offset pointer) with no maximum limit\n```python\nprint(\"DEVICE SEARCH\")\nhosts_resp = fc.device_search(limit=10, fql_filter='platform_name: \"Windows\"',  q=\"dubai\")\n# hosts_resp = fc.device_search(limit=10, q=\"rooster\")\nfor host in hosts_resp:\n    print(json.dumps(host, indent=2))\n```\n\n## Device Details\nGet details on one or more hosts by providing agent IDs (AID).\n```python\n# find host AIDs\nhosts_resp = fc.device_search(limit=10, q=\"rooster\")\naids = set()\nfor host in hosts_resp:\n    aids.update(host)\n\n# Get details for each AID\nhost_details = fc.device_details(aids)\nfor host in host_details:\n    print(json.dumps(host, indent=2))\n```\n\n## Device Containment\nContain or lift containment on a specified host. When contained, a host can only communicate with the CrowdStrike cloud and any IPs specified in your containment policy.\n```python\n# DEVICE CONTAINMENT\naids = set(['7983795a198d40xxxxxxxxxx418aa385', 'fb8456dfe15xxxxxxxxxxxc9893e1a06'])\nprint(\"DEVICE CONTAINMENT\")\nfor hosts in fc.device_details(list(aids)):\n    for host in hosts:\n        print(json.dumps(host['hostname'], indent=2))\nsuccess, fail, err = fc.lift_containment(list(aids))\nprint(f\"Success: {success}\")\nprint(f\"Failure: {fail}\")\nprint(f\"Errors: {err}\")\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vavarachen/CSFalcon-Client.git",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "falcon-client",
    "package_url": "https://pypi.org/project/falcon-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/falcon-client/",
    "project_urls": {
      "Homepage": "https://github.com/vavarachen/CSFalcon-Client.git"
    },
    "release_url": "https://pypi.org/project/falcon-client/0.0.7/",
    "requires_dist": [
      "requests (<3.0.0,>=2.6.0)",
      "requests"
    ],
    "requires_python": "",
    "summary": "A python client to interact with CrowdStrike Falcon API.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9118100,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf1137ce54709dafc81d5098f5779d97dd17c40f6eee48af96bef863150131a5",
          "md5": "e2eed32444af5c4a6c69723dc68d8a22",
          "sha256": "e90c4e969b41db2bd1b247bb87dd5fc4c5da8efe0baa5208f7c0e4e4592c86b0"
        },
        "downloads": -1,
        "filename": "falcon_client-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2eed32444af5c4a6c69723dc68d8a22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13511,
        "upload_time": "2021-01-12T21:57:48",
        "upload_time_iso_8601": "2021-01-12T21:57:48.944218Z",
        "url": "https://files.pythonhosted.org/packages/bf/11/37ce54709dafc81d5098f5779d97dd17c40f6eee48af96bef863150131a5/falcon_client-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf1137ce54709dafc81d5098f5779d97dd17c40f6eee48af96bef863150131a5",
        "md5": "e2eed32444af5c4a6c69723dc68d8a22",
        "sha256": "e90c4e969b41db2bd1b247bb87dd5fc4c5da8efe0baa5208f7c0e4e4592c86b0"
      },
      "downloads": -1,
      "filename": "falcon_client-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2eed32444af5c4a6c69723dc68d8a22",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13511,
      "upload_time": "2021-01-12T21:57:48",
      "upload_time_iso_8601": "2021-01-12T21:57:48.944218Z",
      "url": "https://files.pythonhosted.org/packages/bf/11/37ce54709dafc81d5098f5779d97dd17c40f6eee48af96bef863150131a5/falcon_client-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}