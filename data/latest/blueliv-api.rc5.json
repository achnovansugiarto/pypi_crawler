{
  "info": {
    "author": "Román Ramírez",
    "author_email": "rramirez@rootedcon.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Blueliv\nThis is Blueliv's Python3 API encapsulation.\n\nYou can fin all the details related to this API in https://community.blueliv.com/#!/docs/consumer (you will need to register for the Community edition) and, naturally, request a token code for the API.\n\nOnce registered and with a valid token, you can perform several actions on the Community sandbox and Threat Intel platform, from searching IoCs, sparks, tags... to publishing throught the API.\n\nYou may use token in two ways:\n\n- In an explicit way, passing the token in the class constructor (for example, `SparksRequest(token=token)`)\n- In an implicit way setting the environment variable (`BLUELIV_API_TOKEN='your token'`)\n\nThe implicit way is added to be able to deal with the package in contexts where environment variables are used to change the behaviour of applications and resources. For example, in docker containers, Heroku, etc.\n\n\n## Structure\n\nHere you will find a description of the classes and methods you may take advantage of.\n\n### blueliv.core\n\nThis is the base module and classes to vertebrate real actions. It is not a pure interfaces module because there exist some implementations that are common for all the subclasses and submodels (for example, .request or .search).\n\n\n#### BluelivRequest\n\nThis is the base class for all the requests we can perform against the platform. It is not typical for you to use directly this base class, as most relevant logic is embed onto subclasses (CrawlerRequest, IocsRequest, ...).\n\n```\nclass BluelivRequest(BASERequestModel):\n```\n\n### blueliv.crawl\n\nThis is the module where Crawl classes are set. The Blueliv crawler lets you extract IOCs from the given URL or String.\n\n```\nclass CrawlerRequest(BluelivRequest):\n```\n\nThe use is as easy as:\n\n```\nfrom blueliv.crawl import CrawlerRequest\n\ncrawler = CrawlerRequest()\ncrawler.crawl(term='mafia', is_text=True)\n```\n\n### blueliv.iocs\n\nThis is the module where IoCs classes are set. The most relevant functions here are listing IoC types, finding IoCs in your sparks timeline and in the discover timeline.  \n\n```\nclass IocsRequest(BluelivRequest):\n```\n\nTo list types:\n\n```\nfrom blueliv.iocs import IocsRequest\n\niocs = IocsRequest()\niocs.types()\n```\n\nFinding IoCs in your timeline:\n\n```\nfrom blueliv.iocs import IocsRequest\n\niocs = IocsRequest()\niocs.timeline(limit=0, since_id=0)\n```\n\nFinding IoCs in the discover stream:\n\n```\nfrom blueliv.iocs import IocsRequest\n\niocs = IocsRequest()\niocs.discover(limit=0, since_id=0)\n```\n\n### blueliv.malwares\n\nThis is the module where Malwares operations can be performed. You can list malwares, show details about a specific one or, even, _upload_:  \n\n```\nclass MalwaresRequest(BluelivRequest):\n```\n\nTo list:\n\n```\nfrom blueliv.malwares import MalwaresRequest\n\nmalwares = MalwaresRequest()\nmalwares.list(page=0, pageSize=0)\n```\n\nShow details for a malware id:\n\n```\nfrom blueliv.malwares import MalwaresRequest\n\nmalwares = MalwaresRequest()\nmalwares.show(malware_id=1234)\n```\n\nUpload a sample to the Community sandbox:\n\n```\nfrom blueliv.malwares import MalwaresRequest\n\niocs = MalwaresRequest()\niocs.upload(filename='/tmp/malware.xxx')\n```\n\n_In future versions the io.BytesIO api will be implemented to let developers pass binary array as parameter instead of a filename._\n\n\n### blueliv.sparks\n\nSparks are posts in the Community stream that may have information, IoCs and tags attached. Wiht this module you can take advantage of several capabilities in your (and in other's) spark-streams.  \n\n```\nclass SparksRequest(BluelivRequest):\n```\n\nTo get a spakr by id:\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nsparks.get(spark_id=1234)\n```\n\nTo retrieve from your timeline:\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nsparks.timeline(limit=0, since_id=0)\n```\n\nIn the discover stream:\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nsparks.discover(limit=0, since_id=0)\n```\n\nRetrieve IoCs from a specific spark id:\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nsparks.iocs(spark_id=1234, limit=0, since_id=0)\n```\n\nand, _publish_ to the spark stream, in your timeline:\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nsparks.publish(title='My test spark',\n               description='Description should be detailed',\n               tlp='green',\n               source_urls=...,\n               source_malware_id=...,\n               tags=...,\n               iocs=...):\n```\n\n### blueliv.tags\n\nHere you can play with tags associated with the other categories.  \n\n```\nclass TagsRequest(BluelivRequest):\n```\n\nTo list all known tags:\n\n```\nfrom blueliv.tags import TagsRequest\n\ntags = TagsRequest()\ntags.list()\n```\n\nList sparks associated with a tag slug:\n\n```\nfrom blueliv.tags import TagsRequest\n\ntags = TagsRequest()\ntags.list_sparks(tag_slug='mafia', limit=0, since_id=0)\n```\n\nList IoCs associated with a tag slug:\n\n```\nfrom blueliv.tags import TagsRequest\n\ntags = TagsRequest()\ntags.list_iocs(tag_slug='mafia', limit=0, since_id=0)\n```\n\n### blueliv.users\n\nAnd, finally, you can get information related to specific users in the platform.  \n\n```\nclass UsersRequest(BluelivRequest):\n```\n\nTo list **your own** information:\n\n```\nfrom blueliv.users import UsersRequest\n\nusers = UsersRequest()\nusers.me()\n```\n\nList sparks associated with an user:\n\n```\nfrom blueliv.users import UsersRequest\n\nusers = UsersRequest()\nusers.list_sparks(username='rramirez', limit=0, since_id=0)\n```\n\nList IoCs associated with an user:\n\n```\nfrom blueliv.users import UsersRequest\n\nusers = UsersRequest()\nusers.list_iocs(username='rramirez', limit=0, since_id=0)\n```\n\n## Search\n\nThe Blueliv's API includes several powerful search capabilities that we have include in the core base class (*blueliv.core.BASERequestModel.search(...)*).\n\nThis is a decision oriented to save lines of code avoiding a re-implementation in every class. Within this inherited \"search\" method, the caller class is checked and the search API request is performed properly.\n\nSo, if you want to search for sparks, iocs or tags (what is supported right now):\n\n```\nfrom blueliv.iocs import IocsRequest\n\niocs = IocsRequest()\nresult = iocs.search(search_term='my term', tag='my tag', limit=0, since_id=0)\n```\n\n```\nfrom blueliv.sparks import SparksRequest\n\nsparks = SparksRequest()\nresult = sparks.search(search_term='my term', tag='my tag', limit=0, since_id=0, as_json=True)\n```\n\nIn this case, as_json was True so the result will be a list of dicts. If as_json is False, it will return a JSON-formatted string.\n\n\n```\nfrom blueliv.tags import TagsRequest\n\ntags = TagsRequest()\ntags.search(search_term='my tag')\n```\n\n\n\n## Created and upload to PyPi\n\nThis package was created using PyPi/pip configuration options through setup.py. The following command:\n\n`$ python3 setup.py sdist bdist_wheel`\n\nWill create both the source-dist package and the WHL (Zip compressed) one. But to upload to PyPi you only need the source generated by:\n\n`$ python3 setup.py sdist`\n\nThe upload process is simplified through the `twine` tool:\n\n`$ twine upload dist/*`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patowc/blueliv",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blueliv-api",
    "package_url": "https://pypi.org/project/blueliv-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/blueliv-api/",
    "project_urls": {
      "Homepage": "https://github.com/patowc/blueliv"
    },
    "release_url": "https://pypi.org/project/blueliv-api/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Blueliv's API encapsulation",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8576741,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b09dc3123adb337b602ff4c40709aad8ca14d1f3eef5e38f6ecc6841d5c88a5",
          "md5": "2992f8d599355ef3b824df62bfbb8e79",
          "sha256": "2f6a5639dac13eeba7239118e0dfa6c5e6ae591d037b905fc138b2c461b52c8b"
        },
        "downloads": -1,
        "filename": "blueliv-api-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2992f8d599355ef3b824df62bfbb8e79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15384,
        "upload_time": "2020-06-12T11:28:10",
        "upload_time_iso_8601": "2020-06-12T11:28:10.896042Z",
        "url": "https://files.pythonhosted.org/packages/8b/09/dc3123adb337b602ff4c40709aad8ca14d1f3eef5e38f6ecc6841d5c88a5/blueliv-api-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8e9c2f9f1e295a6d2f34a343a33ee7641eba8fdcb37a943f021d41350b1e8fe",
          "md5": "3d7a08a17b2022f96f4a82d4dd4a0192",
          "sha256": "27d1d2b0104ecd92088bec95b09fc60320ea52c8bb8ed8e053a327651df2f5e5"
        },
        "downloads": -1,
        "filename": "blueliv-api-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d7a08a17b2022f96f4a82d4dd4a0192",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16109,
        "upload_time": "2020-07-13T08:59:40",
        "upload_time_iso_8601": "2020-07-13T08:59:40.465424Z",
        "url": "https://files.pythonhosted.org/packages/f8/e9/c2f9f1e295a6d2f34a343a33ee7641eba8fdcb37a943f021d41350b1e8fe/blueliv-api-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd277c0d6026566a7b1ae3c5def60167f4617b498bcad10f48ed03b1aa20fd2",
          "md5": "9e77a363d4cfd99895b7d8b2dc975d86",
          "sha256": "a6c72b931f8919c3e875631cdc08a0f0b0e672055b8c0363e32f272354bdd683"
        },
        "downloads": -1,
        "filename": "blueliv-api-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e77a363d4cfd99895b7d8b2dc975d86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16092,
        "upload_time": "2020-07-14T07:02:35",
        "upload_time_iso_8601": "2020-07-14T07:02:35.562904Z",
        "url": "https://files.pythonhosted.org/packages/1d/d2/77c0d6026566a7b1ae3c5def60167f4617b498bcad10f48ed03b1aa20fd2/blueliv-api-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c02863d2373d613798898ac2b2ec2dc328aa4da0c71f4a50a492d08ee749b6ce",
          "md5": "2df8203b607e4ed548031effb9f73f76",
          "sha256": "cd697a65f51d641db62baba949eea4dcf29e8db9599c39fc70d35e2ea7932452"
        },
        "downloads": -1,
        "filename": "blueliv-api-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2df8203b607e4ed548031effb9f73f76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16314,
        "upload_time": "2020-11-04T07:09:22",
        "upload_time_iso_8601": "2020-11-04T07:09:22.532106Z",
        "url": "https://files.pythonhosted.org/packages/c0/28/63d2373d613798898ac2b2ec2dc328aa4da0c71f4a50a492d08ee749b6ce/blueliv-api-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62b40e227188422d1710547bd6f679a1097fbbc248857fd58b3b22a9e905d275",
          "md5": "6b19fded1c92e5e3803162ccb87af8c1",
          "sha256": "c855b811e75ff6e91e12573b5f5294e7b2a8dcd129f9fd45b61681f938687573"
        },
        "downloads": -1,
        "filename": "blueliv-api-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6b19fded1c92e5e3803162ccb87af8c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16359,
        "upload_time": "2020-11-04T07:32:48",
        "upload_time_iso_8601": "2020-11-04T07:32:48.839083Z",
        "url": "https://files.pythonhosted.org/packages/62/b4/0e227188422d1710547bd6f679a1097fbbc248857fd58b3b22a9e905d275/blueliv-api-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b40e227188422d1710547bd6f679a1097fbbc248857fd58b3b22a9e905d275",
        "md5": "6b19fded1c92e5e3803162ccb87af8c1",
        "sha256": "c855b811e75ff6e91e12573b5f5294e7b2a8dcd129f9fd45b61681f938687573"
      },
      "downloads": -1,
      "filename": "blueliv-api-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6b19fded1c92e5e3803162ccb87af8c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16359,
      "upload_time": "2020-11-04T07:32:48",
      "upload_time_iso_8601": "2020-11-04T07:32:48.839083Z",
      "url": "https://files.pythonhosted.org/packages/62/b4/0e227188422d1710547bd6f679a1097fbbc248857fd58b3b22a9e905d275/blueliv-api-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}