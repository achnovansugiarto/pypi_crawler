{
  "info": {
    "author": "",
    "author_email": "murilo-henrique060 <henrique.henryconde@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Cartesian Plane\n Provides a cartesian plane canvas able to move and zooming in pygame.\n\n## Key topics\n\n- [Cartesian Plane](#cartesian-plane)\n  - [Key topics](#key-topics)\n  - [Overview](#overview)\n- [Install](#install)\n- [CartesianPlane](#cartesianplane)\n  - [plane_to_screen()](#plane_to_screen)\n  - [screen_to_plane()](#screen_to_plane)\n  - [scale()](#scale)\n  - [debug](#debug)\n  - [event_handling()](#event_handling)\n  - [update()](#update)\n  - [Circle](#circle)\n  - [Rectangle](#rectangle)\n  - [Line](#line)\n  - [Path](#path)\n    - [add_points()](#add_points)\n  - [draw](#draw)\n    - [circle()](#circle-1)\n    - [rect()](#rect)\n    - [line()](#line-1)\n- [Example codes](#example-codes)\n  - [Objects.py](#objectspy)\n  - [Senoid.py](#senoidpy)\n- [Todo:](#todo)\n\n## Overview\n\nWith this module you can use cartesian cordinates to draw forms and create objects in a cartesian plane. Which is useful for simple 2D graphics.\n\n# Install\n\n    pip install cartesian-plane\n\n# CartesianPlane\n\n    cartesian_plane = CartesianPlane(screen)\n\n\nCreates a [CartesianPlane](#cartesianplane) canvas.\n\n**Arguments:**\n\n* screen: pygame screen - The screen where the canvas will be drawn.\n\nReturns a [CartesianPlane](#cartesianplane) object.\n\n## plane_to_screen()\n\n    screen_pos = cartesian_plane.plane_to_screen(point)\n\nConverts a cartesian point to a screen position.\n\n**Arguments:**\n\n* point: (x, y) | [x, y] - The cartesian point to convert.\n\nReturns returns a screen position as a list [x, y].\n\n## screen_to_plane()\n\n    cartesian_point = cartesian_plane.screen_to_plane(screen_pos)\n\nConverts a screen position to a cartesian point.\n\n**Arguments:**\n\n* screen_pos: (x, y) | [x, y] - The screen position to convert.\n\nReturns a cartesian point as a list [x, y].\n\n## scale()\n\n    scaled_dimention = cartesian_plane.scale(dimension)\n\nScales a dimension to the current zoom level.\n\n**Arguments:**\n\n* dimension: int | float - The dimension to scale.\n\nReturns a scaled dimension.\n\n## debug\n\n    cartesian_plane.debug(name1=value1, name2=value2, ...)\n\nAdd debug information to the Cartesian Plane. On each [update()](#update) call, the debug information will be drawn.\n\n## event_handling()\n\n    for event in pygame.event.get():\n        # event handling\n        ...\n\n        cartesian_plane.event_handling(event)\n\nThis function is used on the event loop. It will handle the events of move and zooming the Cartesian Plane.\n\n## update()\n\n    cartesian_plane.update()\n\nupdates the Cartesian Plane and draws the objects.\n\n## Circle\n\n    circle = Circle(plane, color, center, radius, width)\n\nCreates a [Circle](#circle) object. The circle is automated drawn on each call of the [update()](#update) function.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the circle will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the circle.\n* center: (x, y) | [x, y] - The center of the circle.\n* radius: int | float - The radius of the circle.\n* width: optional, int - The width of the circle. 0 to fill. default to 0.\n\n## Rectangle\n\n    rect = Rect(plane, color, rect, width)\n\nCreates a [Rectangle](#rectangle) object. The rectangle is automated drawn on each call of the [update()](#update) function.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the rectangle will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the rectangle.\n* rect: (x, y, width, height) | [x, y, width, height] - The rectangle.\n* width: optional, int - The width of the rectangle. 0 to fill. default to 0.\n\n## Line\n\n    line = Line(plane, color, start, end, width)\n\nCreates a [Line](#line) object. The line is automated drawn on each call of the [update()](#update) function.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the line will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the line.\n* start: (x, y) | [x, y] - The start of the line.\n* end: (x, y) | [x, y] - The end of the line.\n* width: optional, int - The width of the line. default to 1.\n\n## Path\n\n    path = Path(plane, color, *points, length = 100)\n\nCreates a [Path](#path) object. The path is automated drawn on each call of the [update()](#update) function.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the path will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the path.\n* points: (x, y) | [x, y] - The points of the path.\n* length: optional, int - The max length of the path. 0 or less to unlimited lenght (not recommended). default to 1000.\n\n### add_points()\n\n    path.add_points(*points)\n\nadds points to the path.\n\n**Arguments:**\n\n* points: (x, y) | [x, y] - The points to add.\n\n## draw\n\nThis class is used to draw a shape on the screen.\n\n### circle()\n\n    draw.circle(plane, color, center, radius, width)\n\nDraws a circle on the screen.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the circle will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the circle.\n* center: (x, y) | [x, y] - The center of the circle.\n* width: optional, int - The width of the circle. 0 to fill. default to 0.\n\n### rect()\n\n    draw.rect(plane, color, rect, width)\n\nDraws a rectangle on the screen.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the rectangle will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the rectangle.\n* rect: (x, y, width, height) | [x, y, width, height] - The rectangle.\n* width: optional, int - The width of the rectangle. 0 to fill. default to 0.\n\n### line()\n\n    draw.line(plane, color, start, end, width)\n\nDraws a line on the screen.\n\n**Arguments:**\n\n* plane: [CartesianPlane](#cartesianplane) - The Cartesian Plane where the line will be drawn.\n* color: (r, g, b) | (r, g, b, a) - The color of the line.\n* start: (x, y) | [x, y] - The start of the line.\n* end: (x, y) | [x, y] - The end of the line.\n* width: optional, int - The width of the line. default to 1.\n\n# Example codes\n\n## Objects.py\n\n```python\n# Objects.py\n\nimport pygame\nimport cartesianPlane\n\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nYELLOW = (255, 255, 0)\n\n# Set up the window\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Cartesian Plane')\nclock = pygame.time.Clock()\n\nplane = cartesianPlane.CartesianPlane(screen)\n\ncircle = cartesianPlane.Circle(plane, RED, (0, 0), 10)\nrect = cartesianPlane.Rect(plane, GREEN, [20, 10, 10, 10])\nline = cartesianPlane.Line(plane, BLUE, [40, 0], [10, 10])\npath = cartesianPlane.Path(plane, YELLOW, [0, 0], [10, 10], [20, 20])\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT or event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            pygame.quit()\n            quit()\n\n        plane.event_handling(event)\n\n    plane.debug(\n        fps=f'{clock.get_fps():.1f}'\n    )\n\n    # Update the plane\n    plane.update()\n\n    cartesianPlane.draw.circle(plane, GREEN, (15, 15), 1)\n    cartesianPlane.draw.rect(plane, BLUE, (25, 25, 10, 10), 1)\n    cartesianPlane.draw.line(plane, YELLOW, (35, 35), (45, 45))\n\n    clock.tick()\n\n    # Update the screen\n    pygame.display.update()\n```\n\n## Senoid.py\n\n```python\n# Senoid.py\nimport pygame\nimport cartesianPlane\nfrom math import sin\n\nRED = (255, 0, 0)\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Senoid')\nclock = pygame.time.Clock()\n\nplane = cartesianPlane.CartesianPlane(screen)\n\nsenoid = cartesianPlane.Path(plane, RED, [0, 0], length=0)\n\nx = 0\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT or event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n            pygame.quit()\n            quit()\n\n        plane.event_handling(event)\n\n    plane.debug(\n        fps=f'{clock.get_fps():.1f}',\n        points=len(senoid.path)\n    )\n\n    # Update the plane\n    plane.update()\n\n    clock.tick(60)\n\n    senoid.add_points([x * 100, sin(x) * 100])\n\n    x += 0.01\n\n    # Update the screen\n    pygame.display.update()\n```\n\n# Todo:\n\n* add a layer system to the canvas\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "cartesian plane,pygame,canvas",
    "license": "MIT License Copyright (c) 2022 Murilo Henrique Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cartesian-plane",
    "package_url": "https://pypi.org/project/cartesian-plane/",
    "platform": null,
    "project_url": "https://pypi.org/project/cartesian-plane/",
    "project_urls": {
      "Homepage": "https://github.com/murilo-henrique060/Cartesian-Plane"
    },
    "release_url": "https://pypi.org/project/cartesian-plane/1.0.1/",
    "requires_dist": [
      "pygame (>=2.1.2)"
    ],
    "requires_python": ">=3.10",
    "summary": "Provides a cartesian plane canvas able to move and zooming in pygame.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14543928,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b36eb01bae2e83b27c44361afa4f3c971d237df01c83642041daab596a3bf50",
          "md5": "e79d6083a37d48c2cd8e628dd42b5195",
          "sha256": "cb202706bf357ef93cab87ac097c5bd2088369f318d377ec022b860e0622117a"
        },
        "downloads": -1,
        "filename": "cartesian_plane-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e79d6083a37d48c2cd8e628dd42b5195",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 5284,
        "upload_time": "2022-07-24T21:21:17",
        "upload_time_iso_8601": "2022-07-24T21:21:17.074260Z",
        "url": "https://files.pythonhosted.org/packages/6b/36/eb01bae2e83b27c44361afa4f3c971d237df01c83642041daab596a3bf50/cartesian_plane-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27f481938700791cfe8a6431cec56fc7c28d948ee13c461df0c632972fbee24c",
          "md5": "fdb6a3b4c49b280ec0db76853cd86572",
          "sha256": "6c69a8a6ed4626afb39ebe42cf4462df694d0bb7a8e9558a8cbfd25188c72e28"
        },
        "downloads": -1,
        "filename": "cartesian-plane-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fdb6a3b4c49b280ec0db76853cd86572",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 4518,
        "upload_time": "2022-07-24T21:21:19",
        "upload_time_iso_8601": "2022-07-24T21:21:19.134332Z",
        "url": "https://files.pythonhosted.org/packages/27/f4/81938700791cfe8a6431cec56fc7c28d948ee13c461df0c632972fbee24c/cartesian-plane-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d8bea0d7532386e9d4a4220f85079248c532349a590da5af811a9aca055ea04",
          "md5": "89975f6496327d41cbbd44f6ba6b41fe",
          "sha256": "2472311d17cbcf2a9579f1be8c230c33fa0b119bc319f4e6827bd25a302feff5"
        },
        "downloads": -1,
        "filename": "cartesian_plane-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89975f6496327d41cbbd44f6ba6b41fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 8047,
        "upload_time": "2022-07-25T17:35:16",
        "upload_time_iso_8601": "2022-07-25T17:35:16.976765Z",
        "url": "https://files.pythonhosted.org/packages/7d/8b/ea0d7532386e9d4a4220f85079248c532349a590da5af811a9aca055ea04/cartesian_plane-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a870880b74369e911e64e5413d2b1819299ca0d137c153603e30f577257e0de",
          "md5": "3f8a120f8a086c6517636dcccad95dbe",
          "sha256": "544b42a2bca7974a0f238eb2b9b7231396e6b1f355e7e8243c6bf9585ec67f76"
        },
        "downloads": -1,
        "filename": "cartesian-plane-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f8a120f8a086c6517636dcccad95dbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 10216,
        "upload_time": "2022-07-25T17:35:19",
        "upload_time_iso_8601": "2022-07-25T17:35:19.368883Z",
        "url": "https://files.pythonhosted.org/packages/9a/87/0880b74369e911e64e5413d2b1819299ca0d137c153603e30f577257e0de/cartesian-plane-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d8bea0d7532386e9d4a4220f85079248c532349a590da5af811a9aca055ea04",
        "md5": "89975f6496327d41cbbd44f6ba6b41fe",
        "sha256": "2472311d17cbcf2a9579f1be8c230c33fa0b119bc319f4e6827bd25a302feff5"
      },
      "downloads": -1,
      "filename": "cartesian_plane-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89975f6496327d41cbbd44f6ba6b41fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 8047,
      "upload_time": "2022-07-25T17:35:16",
      "upload_time_iso_8601": "2022-07-25T17:35:16.976765Z",
      "url": "https://files.pythonhosted.org/packages/7d/8b/ea0d7532386e9d4a4220f85079248c532349a590da5af811a9aca055ea04/cartesian_plane-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a870880b74369e911e64e5413d2b1819299ca0d137c153603e30f577257e0de",
        "md5": "3f8a120f8a086c6517636dcccad95dbe",
        "sha256": "544b42a2bca7974a0f238eb2b9b7231396e6b1f355e7e8243c6bf9585ec67f76"
      },
      "downloads": -1,
      "filename": "cartesian-plane-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3f8a120f8a086c6517636dcccad95dbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 10216,
      "upload_time": "2022-07-25T17:35:19",
      "upload_time_iso_8601": "2022-07-25T17:35:19.368883Z",
      "url": "https://files.pythonhosted.org/packages/9a/87/0880b74369e911e64e5413d2b1819299ca0d137c153603e30f577257e0de/cartesian-plane-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}