{
  "info": {
    "author": "John Thorvald Wodder II",
    "author_email": "lineinfile@varonathe.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Text Processing",
      "Typing :: Typed"
    ],
    "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: Project Status: Active â€” The project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://github.com/jwodder/lineinfile/workflows/Test/badge.svg?branch=master\n    :target: https://github.com/jwodder/lineinfile/actions?workflow=Test\n    :alt: CI Status\n\n.. image:: https://codecov.io/gh/jwodder/lineinfile/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/lineinfile\n\n.. image:: https://img.shields.io/pypi/pyversions/lineinfile.svg\n    :target: https://pypi.org/project/lineinfile/\n\n.. image:: https://img.shields.io/github/license/jwodder/lineinfile.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: MIT License\n\n`GitHub <https://github.com/jwodder/lineinfile>`_\n| `PyPI <https://pypi.org/project/lineinfile/>`_\n| `Issues <https://github.com/jwodder/lineinfile/issues>`_\n| `Changelog <https://github.com/jwodder/lineinfile/blob/master/CHANGELOG.md>`_\n\nInspired by (but not affiliated with) `the Ansible module of the same name`__,\n``lineinfile`` provides a command and library for adding a line to a file if\nit's not already there and for removing lines matching a pattern from a file.\nThere are options for using a regex to find a line to update or to determine\nwhich line to insert before or after.  There are options for backing up the\nmodified file with a custom file extension and for treating a nonexistent file\nas though it's just empty.  There's even an option for determining the line to\ninsert based on capturing groups in the matching regex.\n\n__ https://docs.ansible.com/ansible/latest/collections/ansible/builtin/\n   lineinfile_module.html\n\nUnlike the Ansible module, this package does not perform any management of file\nattributes; those must be set externally.\n\n\nInstallation\n============\n``lineinfile`` requires Python 3.6 or higher.  Just use `pip\n<https://pip.pypa.io>`_ for Python 3 (You have pip, right?) to install\n``lineinfile`` and its dependencies::\n\n    python3 -m pip install lineinfile\n\n\nExamples\n========\n\nA crude ``.ini``-file updater: Set ``theoption`` to ``value``, and if no\nsetting for ``theoption`` is found in the file, add one after the line\n\"``[thesection]``\":\n\n.. code:: console\n\n    $ lineinfile add \\\n        --after-first \"^\\[thesection\\]$\" \\\n        -e \"^theoption\\s*=\" \\\n        \"theoption = thevalue\" \\\n        settings.ini\n\nThe equivalent operation in Python:\n\n.. code:: python\n\n    from lineinfile import AfterFirst, add_line_to_file\n\n    add_line_to_file(\n        \"settings.ini\",\n        \"theoption = thevalue\",\n        regexp=r\"^theoption\\s*=\",\n        inserter=AfterFirst(r\"^\\[thesection\\]$\"),\n    )\n\nReplace the first instance of \"``foo = ...``\" with \"``foo = 'bar'``\",\npreserving indentation, and create a backup of the file with the extension\n``.bak``, even if no changes were made:\n\n.. code:: console\n\n    $ lineinfile add \\\n        -e \"^(\\s*)foo\\s*=\" \\\n        --backrefs \\\n        --match-first \\\n        --backup-always -i.bak \\\n        \"\\1foo = 'bar'\" \\\n        file.py\n\nThe equivalent operation in Python:\n\n.. code:: python\n\n    from lineinfile import ALWAYS, add_line_to_file\n\n    add_line_to_file(\n        \"file.py\",\n        r\"\\1foo = 'bar'\",\n        regexp=r\"^(\\s*)foo\\s*=\",\n        backrefs=True,\n        match_first=True,\n        backup=ALWAYS,\n        backup_ext=\".bak\",\n    )\n\n\nCommand-Line Usage\n==================\n\nThe ``lineinfile`` command has two subcommands, ``add`` and ``remove``.\n\n``add``\n-------\n\n::\n\n    lineinfile add [<options>] <line> [<file>]\n    lineinfile add [<options>] -L <line> [<file>]\n\nAdd the given ``line`` (after expanding backslash escapes) to the file if it is\nnot already present.  If a `Python regular expression`_ is given with the\n``-e``/``--regexp`` option and it matches any lines in the file, ``line`` will\nreplace the last matching line (or the first matching line, if\n``--match-first`` is given).  If the regular expression does not match any\nlines (or no regular expression is specified) and ``line`` is not found in the\nfile, the line is inserted at the end of the file by default; this can be\nchanged with the ``--after-first``, ``--after-last``, ``--before-first``,\n``--before-last``, and ``--bof`` options.\n\nIf no file name is given on the command line, input is read from standard\ninput, and the result is written to standard output.  It is an error to specify\nany of the ``--backup-changed``, ``--backup-always``, ``--backup-ext``, or\n``--create`` options when no file is given.\n\n.. _Python regular expression: https://docs.python.org/3/library/re.html\n                               #regular-expression-syntax\n\nOptions\n```````\n\n-a REGEX, --after-first REGEX\n                            If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` after the first line that\n                            matches the regular expression ``REGEX``, or at the\n                            end of the file if no line matches ``REGEX``.\n\n-A REGEX, --after-last REGEX\n                            If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` after the last line that\n                            matches the regular expression ``REGEX``, or at the\n                            end of the file if no line matches ``REGEX``.\n\n-b REGEX, --before-first REGEX\n                            If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` before the first line\n                            that matches the regular expression ``REGEX``, or\n                            at the end of the file if no line matches\n                            ``REGEX``.\n\n-B REGEX, --before-last REGEX\n                            If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` before the last line that\n                            matches the regular expression ``REGEX``, or at the\n                            end of the file if no line matches ``REGEX``.\n\n--bof                       If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` at the beginning of the\n                            file.\n\n--eof                       If neither ``line`` nor ``--regexp`` is found in\n                            the file, insert ``line`` at the end of the file.\n                            This is the default.\n\n-e REGEX, --regexp REGEX    If the given regular expression matches any lines\n                            in the file, replace the last matching line (or\n                            first, if ``--match-first`` is given) with\n                            ``line``.\n\n--backrefs                  If ``--regexp`` matches, the capturing groups in\n                            the regular expression are used to expand any\n                            ``\\n``, ``\\g<n>``, or ``\\g<name>`` backreferences\n                            in ``line``, and the resulting string replaces the\n                            matched line in the input.\n\n                            If ``--regexp`` does not match, the input is left\n                            unchanged.\n\n                            It is an error to specify this option without\n                            ``--regexp``.\n\n--backup, --backup-changed  If the input file is modified, create a backup of\n                            the original file.  The backup will have the\n                            extension specified with ``--backup-ext`` (or ``~``\n                            if no extension is specified) appended to its\n                            filename.\n\n--backup-always             Create a backup of the original file regardless of\n                            whether or not it's modified.  The backup will have\n                            the extension specified with ``--backup-ext`` (or\n                            ``~`` if no extension is specified) appended to its\n                            filename.\n\n-i EXT, --backup-ext EXT    Create a backup of the input file with ``EXT``\n                            added to the end of the filename.  Implies\n                            ``--backup-changed`` if neither it nor\n                            ``--backup-always`` is also given.\n\n-c, --create                If the input file does not exist, pretend it's\n                            empty instead of erroring, and create it with the\n                            results of the operation.  No backup file will be\n                            created for a nonexistent file, regardless of the\n                            other options.\n\n                            If the input file does not exist and no changes are\n                            made (because ``--backrefs`` was specified and\n                            ``--regexp`` didn't match), the file will not be\n                            created.\n\n-L LINE, --line LINE        Use ``LINE`` as the line to insert.  This option is\n                            useful when ``LINE`` begins with a hyphen.\n\n-m, --match-first           If ``--regexp`` matches, replace the first matching\n                            line with ``line``.\n\n-M, --match-last            If ``--regexp`` matches, replace the last matching\n                            line with ``line``.  This is the default.\n\n-o FILE, --outfile FILE     Write the resulting file contents to ``FILE``\n                            instead of modifying the input file.\n\n                            It is an error to specify this option with any of\n                            ``--backup-changed``, ``--backup-always``, or\n                            ``--backup-ext``.\n\n\n``remove``\n----------\n\n::\n\n    lineinfile remove [<options>] <regexp> [<file>]\n    lineinfile remove [<options>] -e <regexp> [<file>]\n\nDelete all lines from the given file that match the given `Python regular\nexpression`_.\n\nIf no file name is given on the command line, input is read from standard\ninput, and the result is written to standard output.  It is an error to specify\nany of the ``--backup-changed``, ``--backup-always``, or ``--backup-ext``\noptions when no file is given.\n\nOptions\n```````\n\n--backup, --backup-changed  If the input file is modified, create a backup of\n                            the original file.  The backup will have the\n                            extension specified with ``--backup-ext`` (or ``~``\n                            if no extension is specified) appended to its\n                            filename.\n\n--backup-always             Create a backup of the original file regardless of\n                            whether or not it's modified.  The backup will have\n                            the extension specified with ``--backup-ext`` (or\n                            ``~`` if no extension is specified) appended to its\n                            filename.\n\n-i EXT, --backup-ext EXT    Create a backup of the input file with ``EXT``\n                            added to the end of the filename.  Implies\n                            ``--backup-changed`` if neither it nor\n                            ``--backup-always`` is also given.\n\n-e REGEX, --regexp REGEX    Delete all lines that match ``REGEX``.  This option\n                            is useful when ``REGEX`` begins with a hyphen.\n\n-o FILE, --outfile FILE     Write the resulting file contents to ``FILE``\n                            instead of modifying the input file.\n\n                            It is an error to specify this option with any of\n                            ``--backup-changed``, ``--backup-always``, or\n                            ``--backup-ext``.\n\n\nLibrary API\n===========\n\nNote that all regular expression matching is done with the ``Pattern.search()``\nmethod, i.e., it is not anchored at the start of the line.  In order to force a\nregular expression to start matching at the beginning of a line, prefix it with\n``^`` or ``\\A``.\n\n.. code:: python\n\n    lineinfile.add_line_to_file(\n        filepath: Union[str, bytes, os.PathLike[str], os.PathLike[bytes]],\n        line: str,\n        regexp: Optional[Union[str, re.Pattern[str]]] = None,\n        inserter: Optional[Inserter] = None,\n        match_first: bool = False,\n        backrefs: bool = False,\n        backup: Optional[BackupWhen] = None,\n        backup_ext: Optional[str] = None,\n        create: bool = False,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n    ) -> bool\n\nAdd the given ``line`` to the file at ``filepath`` if it is not already\npresent.  Returns ``True`` if the file is modified.  If ``regexp`` is set to a\nregular expression (either a string or a compiled pattern object) and it\nmatches any lines in the file, ``line`` will replace the last matching line (or\nthe first matching line, if ``match_first=True``).  If the regular expression\ndoes not match any lines (or no regular expression is specified) and ``line``\nis not found in the file, the line is inserted at the end of the file by\ndefault; this can be changed by passing the appropriate object as the\n``inserter`` argument; see \"Inserters_\" below.\n\nWhen ``backrefs`` is true, if ``regexp`` matches, the capturing groups in the\nregular expression are used to expand any ``\\n``, ``\\g<n>``, or ``\\g<name>``\nbackreferences in ``line``, and the resulting string replaces the matched line\nin the input.  If ``backrefs`` is true and ``regexp`` does not match, the file\nis left unchanged.  It is an error to set ``backrefs`` to true without also\nsetting ``regexp``.\n\nWhen ``backup`` is set to ``lineinfile.CHANGED``, a backup of the file's\noriginal contents is created if the file is modified.  When ``backup`` is set\nto ``lineinfile.ALWAYS``, a backup is always created, regardless of whether the\nfile is modified.  The name of the backup file will be the same as the\noriginal, with the value of ``backup_ext`` (default: ``~``) appended.\n\nIf ``create`` is true and ``filepath`` does not exist, pretend it's empty\ninstead of erroring, and create it with the results of the operation.  No\nbackup file will ever be created for a nonexistent file.  If ``filepath`` does\nnot exist and no changes are made (because ``backrefs`` was set and ``regexp``\ndidn't match), the file will not be created.\n\n\n.. code:: python\n\n    lineinfile.remove_lines_from_file(\n        filepath: Union[str, bytes, os.PathLike[str], os.PathLike[bytes]],\n        regexp: Union[str, re.Pattern[str]],\n        backup: Optional[BackupWhen] = None,\n        backup_ext: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n    ) -> bool\n\nDelete all lines from the file at ``filepath`` that match the regular\nexpression ``regexp`` (either a string or a compiled pattern object).  Returns\n``True`` if the file is modified.\n\nWhen ``backup`` is set to ``lineinfile.CHANGED``, a backup of the file's\noriginal contents is created if the file is modified.  When ``backup`` is set\nto ``lineinfile.ALWAYS``, a backup is always created, regardless of whether the\nfile is modified.  The name of the backup file will be the same as the\noriginal, with the value of ``backup_ext`` (default: ``~``) appended.\n\n\n.. code:: python\n\n    lineinfile.add_line_to_string(\n        s: str,\n        line: str,\n        regexp: Optional[Union[str, re.Pattern[str]]] = None,\n        inserter: Optional[Inserter] = None,\n        match_first: bool = False,\n        backrefs: bool = False,\n    ) -> str\n\nAdd the given ``line`` to the string ``s`` if it is not already present and\nreturn the result.  If ``regexp`` is set to a regular expression (either a\nstring or a compiled pattern object) and it matches any lines in the input,\n``line`` will replace the last matching line (or the first matching line, if\n``match_first=True``).  If the regular expression does not match any lines (or\nno regular expression is specified) and ``line`` is not found in the input, the\nline is inserted at the end of the input by default; this can be changed by\npassing the appropriate object as the ``inserter`` argument; see \"Inserters_\"\nbelow.\n\nWhen ``backrefs`` is true, if ``regexp`` matches, the capturing groups in the\nregular expression are used to expand any ``\\n``, ``\\g<n>``, or ``\\g<name>``\nbackreferences in ``line``, and the resulting string replaces the matched line\nin the input.  If ``backrefs`` is true and ``regexp`` does not match, the input\nis left unchanged.  It is an error to set ``backrefs`` to true without also\nsetting ``regexp``.\n\n\n.. code:: python\n\n    lineinfile.remove_lines_from_string(\n        s: str,\n        regexp: Union[str, re.Pattern[str]],\n    ) -> str\n\nDelete all lines from the string ``s`` that match the regular expression\n``regexp`` (either a string or a compiled pattern object) and return the\nresult.\n\n\nInserters\n---------\n\nInserters are objects used by the ``add_line_*`` functions to determine the\nlocation at which to insert ``line`` when it is not found in the input and the\n``regexp`` argument, if set, doesn't match any lines.\n\n``lineinfile`` provides the following inserter classes:\n\n``AtBOF()``\n    Always inserts the line at the beginning of the file\n\n``AtEOF()``\n    Always inserts the line at the end of the file\n\n``AfterFirst(regexp)``\n    Inserts the line after the first input line that matches the given regular\n    expression (either a string or a compiled pattern object), or at the end of\n    the file if no line matches.\n\n``AfterLast(regexp)``\n    Inserts the line after the last input line that matches the given regular\n    expression (either a string or a compiled pattern object), or at the end of\n    the file if no line matches.\n\n``BeforeFirst(regexp)``\n    Inserts the line before the first input line that matches the given regular\n    expression (either a string or a compiled pattern object), or at the end of\n    the file if no line matches.\n\n``BeforeLast(regexp)``\n    Inserts the line before the last input line that matches the given regular\n    expression (either a string or a compiled pattern object), or at the end of\n    the file if no line matches.\n\n\nHandling of Line Endings\n========================\n\n``lineinfile`` operates on files using Python's universal newlines mode, in\nwhich all LF (``\\n``), CR LF (``\\r\\n``), and CR (``\\r``) sequences in a file\nare converted to just LF when read into a Python string, and LF is in turn\nconverted to the operating system's native line separator when written back to\ndisk.\n\nIn the majority of cases, this allows you to use ``$`` in regular expressions\nand have it always match the end of an input line, regardless of what line\nending the line had on disk.  However, when using ``add_line_to_string()`` or\n``remove_lines_from_string()`` with a string with non-LF line separators,\nthings can get tricky.  ``lineinfile`` follows the following rules regarding\nline separators:\n\n- Lines are terminated by LF, CR, and CR LF only.\n\n- When an ``add_line_*`` function compares a ``line`` argument against a line\n  in the input, the line ending is stripped from both lines.  This is a\n  deviation from Ansible's behavior, where only the input line is stripped.\n\n- When matching an input line against ``regexp`` or an inserter, line endings\n  are not stripped.  Note that a regex like ``r\"foo$\"`` will not match a line\n  that ends with a non-LF line ending, so this can result in patterns not\n  matching where you might naÃ¯vely expect them to match.\n\n- When adding a line to the end of a file, if the file does not end with a line\n  ending already, an LF is appended before adding the line.\n\n- When adding ``line`` to a document (either as a new line or replacing a\n  pre-existing line), LF is appended to the line if it does not already end\n  with a line separator; any line ending on the line being replaced (if any) is\n  ignored (If you want to preserve it, use backrefs).  If the only difference\n  between the resulting ``line`` and the line it's replacing is the line\n  ending, the replacement still occurs, the line ending is modified, and the\n  document is changed.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jwodder/lineinfile",
    "keywords": "add line,edit,ensure line,insert line,regexp,remove line,sed",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lineinfile",
    "package_url": "https://pypi.org/project/lineinfile/",
    "platform": "",
    "project_url": "https://pypi.org/project/lineinfile/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jwodder/lineinfile/issues",
      "Homepage": "https://github.com/jwodder/lineinfile",
      "Source Code": "https://github.com/jwodder/lineinfile"
    },
    "release_url": "https://pypi.org/project/lineinfile/0.4.0/",
    "requires_dist": [
      "click (>=7.0)"
    ],
    "requires_python": "~=3.6",
    "summary": "Add & remove lines in files by regex",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10334364,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc42e6bb124bfc989a86ebbc12ecb6862ba97718ea02d1318d832fecb7dd01f5",
          "md5": "2a71f447a2030d6c6858746478c29444",
          "sha256": "531d5dc460c44178418db8b21c9d17bec4f7d1bf60465f0271a419127dde7341"
        },
        "downloads": -1,
        "filename": "lineinfile-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a71f447a2030d6c6858746478c29444",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 12949,
        "upload_time": "2020-12-17T00:51:33",
        "upload_time_iso_8601": "2020-12-17T00:51:33.136994Z",
        "url": "https://files.pythonhosted.org/packages/cc/42/e6bb124bfc989a86ebbc12ecb6862ba97718ea02d1318d832fecb7dd01f5/lineinfile-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2ffa97c748abcc9cd71598f4baf5b56d367adf2dda51f41c230e7e367dd80fc",
          "md5": "26b8970e03c058fdb1ea2ade30a959d1",
          "sha256": "585784526e13181de554234b0fd0ad91269dae44682cbf5239fd48aaf150fa94"
        },
        "downloads": -1,
        "filename": "lineinfile-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "26b8970e03c058fdb1ea2ade30a959d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 26487,
        "upload_time": "2020-12-17T00:51:34",
        "upload_time_iso_8601": "2020-12-17T00:51:34.845797Z",
        "url": "https://files.pythonhosted.org/packages/e2/ff/a97c748abcc9cd71598f4baf5b56d367adf2dda51f41c230e7e367dd80fc/lineinfile-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eddabf2d4e1f8db92774299da14000e31e81f6000d1c04dc3ea9b21b7fbbd5e1",
          "md5": "213dbecb8dc5603e81e41b46b96c5e2f",
          "sha256": "2971df9dbca0d22696803da3b1225142e7a1f1eb1f2cbaa6567726f9aa3659b9"
        },
        "downloads": -1,
        "filename": "lineinfile-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "213dbecb8dc5603e81e41b46b96c5e2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 13393,
        "upload_time": "2020-12-21T15:05:56",
        "upload_time_iso_8601": "2020-12-21T15:05:56.759698Z",
        "url": "https://files.pythonhosted.org/packages/ed/da/bf2d4e1f8db92774299da14000e31e81f6000d1c04dc3ea9b21b7fbbd5e1/lineinfile-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0367a6f562a09a6a61f8e3331611e9f0197fc6447a4e8a481cc1a087a67b6803",
          "md5": "5aeb3397b35fb91f754574147cb0d941",
          "sha256": "51695121053ab2d42849dc330143c82cdbc2d13f89f7e3dee20ec503b4ac0521"
        },
        "downloads": -1,
        "filename": "lineinfile-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5aeb3397b35fb91f754574147cb0d941",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 29057,
        "upload_time": "2020-12-21T15:05:58",
        "upload_time_iso_8601": "2020-12-21T15:05:58.031452Z",
        "url": "https://files.pythonhosted.org/packages/03/67/a6f562a09a6a61f8e3331611e9f0197fc6447a4e8a481cc1a087a67b6803/lineinfile-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c18511a69e1fb643113af31a3ac34e2f75a50dbe7d54410eecd769ac5803c6e0",
          "md5": "6dcea1cb5be773915af0b3fcc45bb287",
          "sha256": "e470f87cbf50843d50f01e7c824245fb61c9354442c9c4ded12c95dd12da4006"
        },
        "downloads": -1,
        "filename": "lineinfile-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dcea1cb5be773915af0b3fcc45bb287",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 13541,
        "upload_time": "2020-12-27T19:56:59",
        "upload_time_iso_8601": "2020-12-27T19:56:59.698400Z",
        "url": "https://files.pythonhosted.org/packages/c1/85/11a69e1fb643113af31a3ac34e2f75a50dbe7d54410eecd769ac5803c6e0/lineinfile-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f3232c777d7a293a9d230f17394407889880bce4b28386920fe6125edba8a7a",
          "md5": "4d784c03a2ca620264f77c3d8b0eb59c",
          "sha256": "479f991ba22b29bfba46188e1129b41867c7df102f78e583fbe05f271364a8ca"
        },
        "downloads": -1,
        "filename": "lineinfile-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d784c03a2ca620264f77c3d8b0eb59c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 30683,
        "upload_time": "2020-12-27T19:57:01",
        "upload_time_iso_8601": "2020-12-27T19:57:01.058742Z",
        "url": "https://files.pythonhosted.org/packages/5f/32/32c777d7a293a9d230f17394407889880bce4b28386920fe6125edba8a7a/lineinfile-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "494246f948e4c7fd23865cdd9659d6ab1dd726fac778e1bc20d9040df4d68f89",
          "md5": "6d83b74aa5a780bbe6708eb9e8a09518",
          "sha256": "3e4ca3215eb34c2843d769afbfea75a9e47dea7f97c118e4f81557f02be5ed48"
        },
        "downloads": -1,
        "filename": "lineinfile-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d83b74aa5a780bbe6708eb9e8a09518",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 13613,
        "upload_time": "2021-05-12T14:47:10",
        "upload_time_iso_8601": "2021-05-12T14:47:10.365323Z",
        "url": "https://files.pythonhosted.org/packages/49/42/46f948e4c7fd23865cdd9659d6ab1dd726fac778e1bc20d9040df4d68f89/lineinfile-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03398351150dcf835b425f78b59ed6daca2363b39f6afac3003928ef838571c7",
          "md5": "108dc85951f4eab602fc66738189fe77",
          "sha256": "b300df2da429065e81568f335bc78ac16c323296e3da65eee3b790e48d26d747"
        },
        "downloads": -1,
        "filename": "lineinfile-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "108dc85951f4eab602fc66738189fe77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 30858,
        "upload_time": "2021-05-12T14:47:11",
        "upload_time_iso_8601": "2021-05-12T14:47:11.553978Z",
        "url": "https://files.pythonhosted.org/packages/03/39/8351150dcf835b425f78b59ed6daca2363b39f6afac3003928ef838571c7/lineinfile-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "494246f948e4c7fd23865cdd9659d6ab1dd726fac778e1bc20d9040df4d68f89",
        "md5": "6d83b74aa5a780bbe6708eb9e8a09518",
        "sha256": "3e4ca3215eb34c2843d769afbfea75a9e47dea7f97c118e4f81557f02be5ed48"
      },
      "downloads": -1,
      "filename": "lineinfile-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d83b74aa5a780bbe6708eb9e8a09518",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 13613,
      "upload_time": "2021-05-12T14:47:10",
      "upload_time_iso_8601": "2021-05-12T14:47:10.365323Z",
      "url": "https://files.pythonhosted.org/packages/49/42/46f948e4c7fd23865cdd9659d6ab1dd726fac778e1bc20d9040df4d68f89/lineinfile-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03398351150dcf835b425f78b59ed6daca2363b39f6afac3003928ef838571c7",
        "md5": "108dc85951f4eab602fc66738189fe77",
        "sha256": "b300df2da429065e81568f335bc78ac16c323296e3da65eee3b790e48d26d747"
      },
      "downloads": -1,
      "filename": "lineinfile-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "108dc85951f4eab602fc66738189fe77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 30858,
      "upload_time": "2021-05-12T14:47:11",
      "upload_time_iso_8601": "2021-05-12T14:47:11.553978Z",
      "url": "https://files.pythonhosted.org/packages/03/39/8351150dcf835b425f78b59ed6daca2363b39f6afac3003928ef838571c7/lineinfile-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}