{
  "info": {
    "author": "ra1nty",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Multimedia :: Graphics :: Capture",
      "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture"
    ],
    "description": "# **DXcam**\n> ***Fastest Python Screenshot for Windows***\n```python\nimport dxcam\ncamera = dxcam.create()\ncamera.grab()\n```\n\n## Introduction\nDXcam is a Python high-performance screenshot library for Windows using Desktop Duplication API. Capable of 240Hz+ capturing. It was originally built as a part of deep learning pipeline for FPS games to perform better than existed python solutions ([python-mss](https://github.com/BoboTiG/python-mss), [D3DShot](https://github.com/SerpentAI/D3DShot/)). \n\nCompared to these existed solutions, DXcam provides:\n- Way faster screen capturing speed (> 240Hz)\n- Capturing of Direct3D exclusive full-screen application without interrupting, even when alt+tab.\n- Automatic handling of scaled / stretched resolution.\n- Accurate FPS targeting when in capturing mode, makes it suitable for Video output. \n- Seamless integration with NumPy, OpenCV, PyTorch, etc.\n\n> ***Contributions are welcome!***\n\n## Installation\n### From TestPyPI:\n```bash\npip install dxcam\n```\n### From source:\n```bash\npip install --editable .\n```\n\n## Usage\nIn DXCam, each output (monitor) is asscociated to a ```DXCamera``` instance.\nTo create a DXCamera instance:\n```python\nimport dxcam\ncamera = dxcam.create()  # returns a DXCamera instance on primary monitor\n```\n### Screenshot\nFor screenshot, simply use ```.grab```:\n```python\nframe = camera.grab()\n```\nThe returned ```frame``` will be a ```numpy.ndarray``` in the shape of ```(Height,  Width, 3[RGB])```. This is the default and the only supported format (**for now**). It is worth noting that ```.grab``` will return ```None``` if there is no new frame since the last time you called ```.grab```. Usually it means there's nothing new to render since last time (E.g. You are idling).\n\nTo view the captured screenshot:\n```python\nfrom PIL import Image\nImage.fromarray(frame).show()\n```\nTo screenshot a specific region, use the ```region``` parameter: it takes ```tuple[int, int, int, int]``` as the left, top, right, bottom coordinates of the bounding box. Similar to [PIL.ImageGrab.grab](https://pillow.readthedocs.io/en/stable/reference/ImageGrab.html).\n```python\nleft, top = (1920 - 640) // 2, (1080 - 640) // 2\nright, bottom = left + 640, top + 640\nregion = (left, top, right, bottom)\nframe = camera.grab(region=region)  # numpy.ndarray of size (640x640x3) -> (HXWXC)\n```\nThe above code will take a screenshot of the center ```640x640``` portion of a ```1920x1080``` monitor.\n### Screen Capture\nTo start a screen capture, simply use ```.start```: the capture will be started in a separated thread, default at 60Hz. Use ```.stop``` to stop the capture.\n```python\ncamera.start(region=(left, top, right, bottom))  # Optional argument to capture a region\ncamera.is_capturing  # True\n# ... Do Something\ncamera.stop()\ncamera.is_capturing  # False\n```\n### Consume the Screen Capture Data\nWhile the ```DXCamera``` instance is in capture mode, you can use ```.get_latest_frame``` to get the latest frame in the frame buffer:\n```python\ncamera.start()\nfor i in range(1000):\n    image = camera.get_latest_frame()  # Will block until new frame available\ncamera.stop()\n```\nNotice that ```.get_latest_frame``` by default will block until there is a new frame available since the last call to ```.get_latest_frame```. To change this behavior, use ```video_mode=True```.\n\n## Advanced Usage and Remarks\n### Multiple monitors / GPUs\n```python\ncam1 = dxcam.create(device_idx=0, output_idx=0)\ncam2 = dxcam.create(device_idx=0, output_idx=1)\ncam3 = dxcam.create(device_idx=1, output_idx=1)\nimg1 = cam1.grab()\nimg2 = cam2.grab()\nimg2 = cam3.grab()\n```\nThe above code creates three ```DXCamera``` instances for: ```[monitor0, GPU0], [monitor1, GPU0], [monitor1, GPU1]```, and subsequently takes three full-screen screenshots. (cross GPU untested, but I hope it works.) To get a complete list of devices and outputs:\n```pycon\n>>> import dxcam\n>>> dxcam.device_info()\n'Device[0]:<Device Name:NVIDIA GeForce RTX 3090 Dedicated VRAM:24348Mb VendorId:4318>\\n'\n>>> dxcam.output_info()\n'Device[0] Output[0]: Res:(1920, 1080) Rot:0 Primary:True\\nDevice[0] Output[1]: Res:(1920, 1080) Rot:0 Primary:False\\n'\n```\n\n### Output Format\nYou can specify the output color mode upon creation of the DXCamera instance:\n```python\ndxcam.create(output_idx=0, output_color=\"BGRA\")\n```\nWe currently support \"RGB\", \"RGBA\", \"BGR\", \"BGRA\", \"GRAY\", with \"GRAY being the gray scale. As for the data format, ```DXCamera``` only supports ```numpy.ndarray```  in shape of ```(Height, Width, Channels)``` right now. ***We will soon add support for other output formats.***\n\n### Video Buffer\nThe captured frames will be insert into a fixed-size ring buffer, and when the buffer is full the newest frame will replace the oldest frame. You can specify the max buffer length (defualt to 64) using the argument ```max_buffer_len``` upon creation of the ```DXCamera``` instance. \n```python\ncamera = dxcam.create(max_buffer_len=512)\n```\n***Note:  Right now to consume frames during capturing there is only `get_latest_frame` available which assume the user to process frames in a LIFO pattern. This is a read-only action and won't pop the processed frame from the buffer. we will make changes to support various of consuming pattern soon.***\n\n### Target FPS\nTo make ```DXCamera``` capture close to the user specified ```target_fps```, we used the undocumented ```CREATE_WAITABLE_TIMER_HIGH_RESOLUTION ``` flag to create a Windows [Waitable Timer Object](https://docs.microsoft.com/en-us/windows/win32/sync/waitable-timer-objects). This is far more accurate (+/- 1ms) than Python (<3.11) ```time.sleep``` (min resolution 16ms). The implementation is done through ```ctypes``` creating a perodic timer. Python 3.11 used a similar approach[^2]. \n```python\ncamera.start(target_fps=120)  # Should not be made greater than 160.\n```\nHowever, due to Windows itself is a preemptive OS[^1] and the overhead of Python calls, the target FPS can not be guarenteed accurate when greater than 160. (See Benchmarks)\n\n\n### Video Mode\nThe default behavior of ```.get_latest_frame``` only put newly rendered frame in the buffer, which suits the usage scenario of a object detection/machine learning pipeline. However, when recording a video that is not ideal since we aim to get the frames at a constant framerate: When the ```video_mode=True``` is specified when calling ```.start``` method of a ```DXCamera``` instance, the frame buffer will be feeded at the target fps, using the last frame if there is no new frame available. For example, the following code output a 5-second, 120Hz screen capture:\n```python\ntarget_fps = 120\ncamera = dxcam.create(output_idx=0, output_color=\"BGR\")\ncamera.start(target_fps=target_fps, video_mode=True)\nwriter = cv2.VideoWriter(\n    \"video.mp4\", cv2.VideoWriter_fourcc(*\"mp4v\"), target_fps, (1920, 1080)\n)\nfor i in range(600):\n    writer.write(camera.get_latest_frame())\ncamera.stop()\nwriter.release()\n```\n> You can do interesting stuff with libraries like ```pyav``` and ```pynput```: see examples/instant_replay.py for a ghetto implementation of instant replay using hot-keys\n\n\n### Safely Releasing of Resource\nUpon calling ```.release``` on a DXCamera instance, it will stop any active capturing, free the buffer and release the duplicator and staging resource. Upon calling ```.stop()```, DXCamera will stop the active capture and free the frame buffer. If you want to manually recreate a ```DXCamera``` instance on the same output with different parameters, you can also manully delete it:\n```python\ncamera1 = dxcam.create(output_idx=0, output_color=\"BGR\")\ncamera2 = dxcam.create(output_idx=0)  # Not allowed, camera1 will be returned\ncamera1 is camera2  # True\ndel camera1\ndel camera2\ncamera2 = dxcam.create(output_idx=0)  # Allowed\n```\n\n## Benchmarks\n### For Max FPS Capability:\n```python\nstart_time, fps = time.perf_counter(), 0\ncam = dxcam.create()\nstart = time.perf_counter()\nwhile fps < 1000:\n    frame = cam.grab()\n    if frame is not None:  # New frame\n        fps += 1\nend_time = time.perf_counter() - start_time\nprint(f\"{title}: {fps/end_time}\")\n```\nWhen using a similar logistic (only captured new frame counts), ```DXCam, python-mss, D3DShot``` benchmarked as follow:\n\n|             | DXcam  | python-mss | D3DShot |\n|-------------|--------|------------|---------|\n| Average FPS | 238.79 :checkered_flag: | 75.87      | 118.36  |\n| Std Dev     | 1.25   | 0.5447     | 0.3224   |\n\nThe benchmark is across 5 runs, with a light-moderate usage on my PC (5900X + 3090; Chrome ~30tabs, VS Code opened, etc.), I used the [Blur Buster UFO test](https://www.testufo.com/framerates#count=5&background=stars&pps=960) to constantly render 240 fps on my monitor (Zowie 2546K). DXcam captured almost every frame rendered.\n\n### For Targeting FPS:\n```python\ncamera = dxcam.create(output_idx=0)\ncamera.start(target_fps=60)\nfor i in range(1000):\n    image = camera.get_latest_frame()\ncamera.stop()\n```\n|   (Target)\\\\(mean,std)          | DXcam  | python-mss | D3DShot |\n|-------------  |--------                 |------------|---------|\n| 60fps         | 61.71, 0.26 :checkered_flag: | N/A     | 47.11, 1.33  |\n| 30fps         | 30.08, 0.02 :checkered_flag:  | N/A     | 21.24, 0.17  |\n\n## Work Referenced\n[D3DShot](https://github.com/SerpentAI/D3DShot/) : DXcam borrows the ctypes header directly from the no-longer maintained D3DShot.\n\n[OBS Studio](https://github.com/obsproject/obs-studio) : Learned a lot from it.\n\n\n[^1]: <https://en.wikipedia.org/wiki/Preemption_(computing)> Preemption (computing)\n\n[^2]: <https://github.com/python/cpython/issues/65501> bpo-21302: time.sleep() uses waitable timer on Windows\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ra1nty/DXcam",
    "keywords": "screen,screenshot,screencapture,screengrab,windows",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dxcam",
    "package_url": "https://pypi.org/project/dxcam/",
    "platform": null,
    "project_url": "https://pypi.org/project/dxcam/",
    "project_urls": {
      "Homepage": "https://github.com/ra1nty/DXcam",
      "Source": "https://github.com/ra1nty/DXcam",
      "Tracker": "https://github.com/ra1nty/DXcam/issues"
    },
    "release_url": "https://pypi.org/project/dxcam/0.0.5/",
    "requires_dist": [
      "numpy",
      "opencv-python",
      "comtypes"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python high-performance screenshot library for Windows use Desktop Duplication API",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14990591,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b12a734b2e9700708beedaa12984a09f7f2544b507ff5da10c39955e4a7bf0e2",
          "md5": "083cb25ca27e1559cf33918a792426f4",
          "sha256": "c992fef7c381000e970b4564d265925f0cead4eae10489e79b2c1e7b250ebd86"
        },
        "downloads": -1,
        "filename": "dxcam-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "083cb25ca27e1559cf33918a792426f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20838,
        "upload_time": "2022-09-04T21:17:13",
        "upload_time_iso_8601": "2022-09-04T21:17:13.903761Z",
        "url": "https://files.pythonhosted.org/packages/b1/2a/734b2e9700708beedaa12984a09f7f2544b507ff5da10c39955e4a7bf0e2/dxcam-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c27acfb31883047ffb6fc5cb4bdc5db17651d6009261033809fc04fcbc628b4",
          "md5": "a2f4df6adc11505bf5411ad93bbbed51",
          "sha256": "1078d205f096b9d6911c39985ac9298b6fce837bc50e38327bf4600661f5b34c"
        },
        "downloads": -1,
        "filename": "dxcam-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a2f4df6adc11505bf5411ad93bbbed51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21127,
        "upload_time": "2022-09-04T21:17:15",
        "upload_time_iso_8601": "2022-09-04T21:17:15.626163Z",
        "url": "https://files.pythonhosted.org/packages/1c/27/acfb31883047ffb6fc5cb4bdc5db17651d6009261033809fc04fcbc628b4/dxcam-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b12a734b2e9700708beedaa12984a09f7f2544b507ff5da10c39955e4a7bf0e2",
        "md5": "083cb25ca27e1559cf33918a792426f4",
        "sha256": "c992fef7c381000e970b4564d265925f0cead4eae10489e79b2c1e7b250ebd86"
      },
      "downloads": -1,
      "filename": "dxcam-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "083cb25ca27e1559cf33918a792426f4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 20838,
      "upload_time": "2022-09-04T21:17:13",
      "upload_time_iso_8601": "2022-09-04T21:17:13.903761Z",
      "url": "https://files.pythonhosted.org/packages/b1/2a/734b2e9700708beedaa12984a09f7f2544b507ff5da10c39955e4a7bf0e2/dxcam-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c27acfb31883047ffb6fc5cb4bdc5db17651d6009261033809fc04fcbc628b4",
        "md5": "a2f4df6adc11505bf5411ad93bbbed51",
        "sha256": "1078d205f096b9d6911c39985ac9298b6fce837bc50e38327bf4600661f5b34c"
      },
      "downloads": -1,
      "filename": "dxcam-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a2f4df6adc11505bf5411ad93bbbed51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21127,
      "upload_time": "2022-09-04T21:17:15",
      "upload_time_iso_8601": "2022-09-04T21:17:15.626163Z",
      "url": "https://files.pythonhosted.org/packages/1c/27/acfb31883047ffb6fc5cb4bdc5db17651d6009261033809fc04fcbc628b4/dxcam-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}