{
  "info": {
    "author": "Jacob Morris",
    "author_email": "blendingjake@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Utilities"
    ],
    "description": "# JTools\n\n>JTools is a robust library for interacting with JSON-like objects:\n>providing the ability to quickly query, format, and filter JSON-like data.\n\n>JTools is available in Python and JavaScript and consists of three main components:\n\n* `Query`: Extract and transform the values of nested fields.\n  * `Query(\"data.timestamp.$parse_timestamp.$time_part('year')\").many(items)`\n* `Filter`: Combine the querying capabilities of `Query` with the ability\n to define filtering conditions to find just the elements you want.\n  * `Filter(Key(\"data.timestamp.$parse_timestamp.$time_part('year')\").gt(2015)).many(data)`\n* `Formatter`: Take multiple queries and format them into a string\n  * `Formatter(\"Item @data.id was released in @data.timestamp.$parse_timestamp.$time_part('year')\").single(data[0])`\n\nJTools exists in two different langauges with almost identical names and capabilities to allow you to move between the packages seamlessly. \n\n## Python - [jtools](https://pypi.org/project/jtools/)\n\n## JavaScript - [@blending_jake/jtools](https://www.npmjs.com/package/@blending_jake/jtools)\n>Written in TypeScript and distributed as an ES6 style module with type\ndeclaration files. \n\n### Differences\n\n * In JTools-Py, the `==` and `===` filter operators will behave the same, as well as `!=` and `!==`. \n * JTools-Py uses the `datetime` package for time related queries, while JavaScript uses `moment`\n * JTools-Py replicates JavaScript's lack of differentiation between `item[0]` and `item[\"0\"]` by default. \n However, this can be changed in the Python version by setting `Query(..., convert_ints=False)`. \n If that argument is set to `False` in Python, then `item.0` would work on `{\"item\": {\"0\": ...}}`, \n but not on `{\"item\": {0: ...}}`. The JavaScript version essentially always has `convert_ints=True`.\n\n## Recent Changes\n * `2.0.0`\n   * Numerous new language features\n     * Support for arithmetic in arguments. The supported operators are\n     `-`, `+`, `*`, `/`, `//` (floor division), `**` (exponentiation), and `%`. The operators can be used any\n     place a value is valid within an argument, such as `$special(14000 * 2)`, `$special(@value // 2)`,\n     `$special([1, 1+1, 1+2])`. The order of operations follows typical precedence, and arithmetic \n     can be nested in `()`.\n     * Support for keyword arguments:`$index(\"value\", fallback=12)`\n     * Whitespace is allowed in a lot more places in a query now, which is very helpful since both\n      JavaScript and Python support multi-line strings.\n   * Performance increase for cases were a `Query` field doesn't have any specials. A faster parsing\n   method can be used for about a 40x performance increase in creating the `Query` object. Note, this\n   just speeds up `Query` creation and not the speed of `.single()`, `.many()`, etc.\n   * Added functionality so that `Filter` values can be queries.\n     * Using JSON: `{ field: <field>, operator: <op>, value: { query: <value query> } }`\n     * Using `Key`: `Key(<field>).<op>(Key(<value_query>))`\n     * For example: `Key(\"tag.tag1\").gt(Key(\"tag.tag2\"))`\n   * Four new filters: `subset`, `!subset`, `superset`, `!superset`. These should be read \n   `field value <op> filter value`, so `subset` means all of the values returned from the field query\n   are in the filter value, which allows better filtering when both the field query and value are iterable.\n   * Many new specials\n     * `$key_of_min_value` - Gets the key of the min value in an dict/map/object\n     * `$key_of_max_value` - Gets the key of the max value in an dict/map/object\n     * `$time_part(part) -> int` - Get a specific part of a datetime/moment object. Valid values for `part` are as follows:\n       * 'millisecond'\n       * 'second'\n       * 'minute' - Starting from 0\n       * 'hour' - Starting from 0\n       * 'day' - Day of month, starting from 1\n       * 'month' - Month of year, starting from 1\n       * 'year'\n       * 'dayOfWeek' - Value in 0-6, corresponding to Monday-Sunday\n       * 'dayOfYear' - Day of year, starting from 1\n     * `$min` and `$max`\n     * `$arith(op, arg_value)` - Perform an arithmetic operation on the current value. `op` can be\n     any of the support [math operators](#math-operators). \n     * `$lowercase`, `$uppercase`, and `$titlecase`\n     * `$filter(field, op, value, single=true)` OR `$filter({<filter>}, single=true)` OR \n     `$filter([<filters>], single=true)` - Allow a single value or list of values to be filtered.\n     The filters should be formatted that same way they are for `Filter`.\n     * `$pipeline(pipeline)` - Apply multiple specials to value in a given order. Can be very useful\n     when used in conjunction with `$map` to apply multiple specials at once. `pipeline` must be of format:\n```\n[\n    <special>\n\n    OR\n\n    [<special>, arg1, arg2, ..., (optional) map/object/dict of keyword arguments],\n    ...\n]\n\nfor example\n\n$pipeline([\n    ['index', 'balance'],\n    ['range', 1],\n    ['replace', {'old': ',', 'new': ''}],\n    ['float']\n])\n\nis the same as\n$index(\"balance\").$range(1).$replace(old=\",\", new=\"\").$float\n```\n   * Updates to old specials\n     * `$index(i, fallback=null, extended=false)` - added `extended` argument to allow\n     `$index` to support any valid JQL query for `i` if `extended=true`\n   * Bug fixes\n     * Fixed issue with filters not shortcutting properly\n     * Fixed Python issue with `$print`\n     * Fixed issues with `$fallback` with `Filter` and `Formatter`\n     * Fixed issue causing an error when trying to use an integer value in\n     `$sort` and `$group_by`\n\n## Glossary\n * [`Installation`](#installation)\n * [`Quickstart`](#quickstart)\n * [`JQL`](#jql)\n   * [`Arguments`](#arguments)\n   * [`Math Operators`](#math-operators)\n * [`Query`](#query)\n   * [`Context`](#context)\n   * [`Specials`](#specials)\n * [`Filter`](#filter)\n   * [`Key`](#key)\n   * [`Condition`](#condition)\n * [`Formatter`](#formatter)\n * [`Performance`](#performance)\n * [`Changelog`](#changelog)\n\n## Installation\n\n### Python\n`pip install jtools`\n```python\n# import\nfrom jtools import Query, Filter, Key, Condition, Formatter\n```\n\n### JavaScript\n`npm i @blending_jake/jtools`\n```javascript\n// import\nimport { Query, Filter, Key, Condition, Formatter } from \"@blending_jake/jtools\";\n```\n\n## Quickstart\n```python\nfrom jtools import Query\n# sort by nested timestamp field by month\nq = Query(\"meta.timestamp.$parse_timestamp.$time_part('month')\")\ndata = [ ... ]\nsorted_data = sorted(data, key=q.single)\n```\n\n## `JQL`\n>`JQL` or the `JSON Query Language` is a custom built query language for `JTools` which supports powerful features\n>like accessing nested fields, transforming values, and even using nested queries as arguments. \n>The basic format of the language is: \n```\n(<field> | $<special>) (. (<field> | $<special>))*\nEX: 'data', 'data.timestamp', 'data.$split', '$split.0'\n```\n### field\nA field is just a value that can be used as an index, like a string or integer key for a map/dict or an integer for an array. JavaScript has very loose type-checking between strings\nand integers, so either can essentially work in place of the other when indexing.\n\nFields can only contain the following characters: `[-a-zA-Z0-9_]`. However, fields with prohibited characters can still\nbe indexed by using the `$index` special, so to index `range[0]` use `$index(\"range[0]\")`.\n\n### $special\nA special is a function that is applied to the value that has been queried so far. There is a complete list of specials\n[here](#specials). These specials can be passed arguments, which is one of the most powerful features\nof `JQL`.\n\n#### Arguments\nArguments can be passed into specials as a positional or keyword arguments. Positional arguments\nmust come first and are denoted using the standard notation in most programming languages:\n`$special(arg1, arg2, ...)`. Keyword arguments must come after any positional arguments and\ncan be used to specify a specific argument to set the value for: \n`$special(arg1, name1=arg2, name2=arg3, ...)`. Keyword arguments can be used to make it clear\nwhat argument you are setting - improving readability, or can be used to skip arguments which\nhave default values. \n\nFor example, the index special has the following definition:\n`$index(key, fallback=null, extended=false)`. If you want to use a JQL query for `key`, then you need\nto set `extended=true`. You can either write `$index(key, null, true)`, or you can skip the \nfallback argument and write `$index(key, extended=true)`. Using keyword arguments might not save many \ncharacters if the the special has few arguments, but can still greatly improve readability.\n\nIt is important to note that arguments, and the parenthesis surrounding them can be left\ncompletely off of a special if the default argument values are acceptable or there are no\narguments - so a query like `data.$values.$max.$divide(@data.$values.$sum)` can be written\nwhere most of the parenthesis and arguments are just left off.\n\n##### value\nArguments are considered `values` and must be one of the following types.\n```\nMath Expression\n[] or [<value>(, <value>)*] - List\n{} or {<value>(, <value>)*} - Set\n{:} or {<key>: <value>(, <key>: <value>)*} - Map/Dict/Object (see below for <key> spec)\nInteger\nFloat\nString w/ '' or \"\"\ntrue\nfalse\nnull\n@<query> - Yep! Nested queries!\n\nMath Expression:\n    Operators listed below\n    Operands must be one of: Integer, Float, or @<query>\n\n<key>:\n    Math Expression\n    @<query>    \n    Integer\n    Float\n    String\n    true\n    false\n    null\n``` \nAs shown above, values and queries can be nested, so `[[1, 2], [\"bob\"], {\"Ann\", 'Ralph'}, {'key': 4, 23: 5}]`\nis valid. Additionally, the support for nesting queries is extremely powerful and allows for queries like:\n`item.tag.$lookup(@table.colors)`, which, for `{\"item\": {\"tag\": \"product\"}, \"table\": {\"colors\": {\"product\": \"red\"}}}`\nresults in `\"red\"`\n\nBasic math expressions are supported in arguments and, subsequently, nested values.\nThe supported operators are listed below and follow normal arithmetic precedence with\nthe order of evaluation from first -> last being: `()`, `**`, ` *  and / and // and %`,\n`+ and -`.\n\nThe operands for math expressions are limited to numbers (Float and Integer) and nested\nqueries.\n\nMath expressions can be nested in other values, for example: \n`$special([ 1, @value, @value**2, @value**3 ])`\n\n##### Math Operators\n* `+`\n* `-`\n* `*`\n* `/`\n* `//` - Floor division, aka `Math.floor(a / b)`\n* `%` - Mod operator\n* `**` - Exponentiation, aka `Math.pow(a, b)` or `a^b`\n* `()` - Parenthesis can be use to change precedence and/or improve readability\n\n\n## Query\n>`Query` takes the power of `JQL` and puts it into practice querying and transforming values\n>in JSON-like data. \n\n### `Query(query, fallback=null, [convert_ints=true (if Python)])`\n* `query`: `str | List[str]` The field or fields to query\n* `fallback`: The value that will result if a non-existent field is queried\n* `convert_ints`: Whether or not to convert any digit-only fields to integers\n\n#### `.single(item, context={})`\n* `item`: The item to query\n* `context`: See [`Context`](#context) for more details\n\n>Take a single item and query it using the query(ies) provided\n>\n>`Query(field).single(...) -> result`\n>\n>`Query([field, field, ...]).single(...) -> [result, result, ...]`\n\n#### `.many(items, context={})`\n* `items`: The items to query\n* `context`: See [`Context`](#context) for more details\n\n>Take a list of items, and query each item using the query(ies) provided\n>\n>`Query(field).many(...) -> [result, result, ...]`\n>\n>`Query([field, field, ...]).many(...) -> [[result, result, ...], [result, result, ...], ...]`\n\n### Notes\n * More specials can be added by using the class method `.register_special()` \n like so: `Query.register_special(<name>, <func>, <argDef> [if JavaScript])`. The function should be formatted as such: \n  ```python\n # Python\nlambda value, *args, context: ...\n ```\n ```javascript\n// JavaScript\n(value, context, args) => { ... }\n ```\nWhere `value` is the current query value, and `context` is the current context.\n\n#### Registering a special in JavaScript\nRegistering a special works differently in JavaScript because the language does not support keyword arguments. To get\naround this, an argument definition should be provided whenever the special is registered. The argument definition\nshould be formatted:\n```javascript\n[\n    '<argument name>' | { 'name': '<argument name>', [ 'default': <default value> ] }\n]\n```\nThe argument definition allows you to state what the name of each parameter is, and allows a default value to be provided. \nAdditionally, '$args' and '$kwargs' can be placed in the argument definition to capture a variable number of positional \narguments or keyword arguments, respectively. \n\nEach registered special function is then passed an object, `args`, which is `{ <argument name>: <argument value>, ... }`.\nThe keys '$args' and '$kwargs' capture the variable number of positional and keyword arguments, respectively. \n\nSome example argument definitions and usages:\n```javascript\nQuery.register_special('index', (value, context, args) => {\n    // use args.key, args.fallback, and args.extended to access arguments\n}, [ 'key', { name: 'fallback', default: null }, { name: 'extended', default: false } ])\n\nQuery.register_special('filter', (value, context, args) => {\n    // args.$args is an array of any positional arguments\n    // args.single must be specified as a keyword argument (as it's after $args)\n}, [ '$args', { name: 'single', default: false } ])\n\nQuery.register_special('update', (value, context, args) => {\n    // args.$kwargs is an object of any captured key->value pairs\n    return { ...value, ...args.$kwargs };\n}, [ '$kwargs' ])\n```\n\n#### Context\n>Context is a way of putting temporary variables into the query search space.\n\n##### How do I add something to `context`?\n 1. Manually introduce values through `.single(..., context)` or `.many(..., context)`.\n 2. Use the `$store_as()` special to place a value in the current context for later use\n\n##### How do I access something in `context`?\n 1. Any top-level field name is first looked for on the current item, then in `context`. Note, top-level means\n it is the main query in a `Query` string, or it follows an `@`, either as an argument or in a `Formatter` string.\n 2. It is important to note that fields on the current item will shadow fields in the context, so make sure to use unique field names.\n\n##### Ok, but give me an example.\n```python\n# Python\ncontext = {\n  \"NOW\": time.time()\n}\n\nQuery(\"NOW.$subtract(@meta.timestamp).$divide(86400).$round.$suffix(' Days Ago')\").single({ ... }, context)\n```\n```javascript\n// JavaScript\nconst context = {\n  NOW: Date.now() / 1000\n}\n\nnew Query(\"NOW.$subtract(@meta.timestamp).$divide(86400).$round.$suffix(' Days Ago')\").single({ ... }, context)\n```\n\n#### Specials\nGeneral\n  * `$inject(value: any) -> any`: Inject a value into the query\n  * `$length -> int`\n  * `$lookup(lookup: dict, fallback=null) -> any`: Lookup the current value in the provided map/dict \n  * `$store_as(name: string) -> any`: Store the current query value in the current context for later use in the query. This does not \n   change the underlying data being queried.\n  * `$pipeline(pipeline) -> any`: Take a value and run it through multiple specials. Can be used in conjunction\n  with `$map` or `$value_map` to apply a series of transformations across a list of values. `pipeline` must\n  be a list where each value is:\n    * `string` - Name of special\n    * `[string, *args]` - Name + positional arguments\n    * `[string, dict of keyword args]` - Name + dict/map/object of keyword arguments\n    * `[string, *args, dict of keyword args]` - Name + positional arguments +\n    dict/map/object of keyword arguments\n```python\n# Python\nQuery(\"\"\"\n    meta    \n    .timestamp\n    .$pipeline([\n        ['divide', 1000],\n        'parse_timestamp',\n        ['time_part', 'year']\n    ])\n\"\"\")\n```\n  * `$print -> any`: Print the current query value before continuing to pass that value along\n  * `$filter(field, op, value, single=true)` OR `$filter({<filter>}, single=true)` OR \n     `$filter([<filters>], single=true)`: Allow a single value or list of values to be filtered.\n     The filters should be formatted that same way they are for `Filter`. `single` can only be supplied\n     as a keyword argument.\n\nDict/Maps/Objects\n  * `$items -> List[[any, any]]`\n  * `$keys -> List[any]`\n  * `$key_of_max_value(just_key=true) -> any | [any, any]`: Find the key of the max value in a dict/object/map. If\n  `just_key=true`, then just the value of the key will be returned. Otherwise, the `[key, value`] will be\n  returned.\n  * `$key_of_min_value(just_key=true) -> any | [any, any]`: Find the key of the min value in a dict/object/map. If\n  `just_key=true`, then just the value of the key will be returned. Otherwise, the `[key, value`] will be\n  returned.\n  * `$wildcard(nxt, just_field=true) -> List[any]`: On a given map or list, go through all values and see if `nxt` is\n  a defined field. If it is, then return just the value of `nxt` on that item, if `just_field=true`, or the entire \n  item otherwise. This special allows a nested field to be extracted across multiple items where it it present. \n  For example: \n```python\n# Python\ndata = {\n  \"a\": {\"tag\": \"run\"},\n  \"b\": {\"tag\": \"to-do\", \"other\": \"task\"},\n  \"meta\": None\n}\nQuery('$wildcard(\"tag\")').single(data)  # => [\"run\", \"to-do\"]\nQuery('$wildcard(\"tag\", false)').single(data) # => [{\"tag\": \"run\"}, {\"tag\": \"to-do\", \"other\": \"task\"}]\n```\n```javascript\n// JavaScript\nlet data = {\n  \"a\": {\"tag\": \"run\"},\n  \"b\": {\"tag\": \"to-do\", \"other\": \"task\"},\n  \"meta\": null\n}\nnew Query('$wildcard(\"tag\")').single(data)  // => [\"run\", \"to-do\"]\nnew Query('$wildcard(\"tag\", false)').single(data) // => [{\"tag\": \"run\"}, {\"tag\": \"to-do\", \"other\": \"task\"}]\n```\n * `$values -> List[any]`\n * `$value_map(special, duplicate=true, *args, **kwargs): Dict[any: any]`: Go through the values on the current item in the query, applying a special\n to each one in-place. If `duplicate=true`, then the original value will not be modified. Similar to:\n ```python\n# Python\nfor key in value:\n    value[key] = SPECIALS[special](value[key], *args, **kwargs)\n ```\n ```javascript\n // JavaScript\nObject.keys(value).forEach(key => {\n    value[key] = SPECIALS[special](value[key], ...args, ...kwargs);\n});\n ```\n\nType Conversions\n  * `$dict -> Dict[any: any]`: Take an incoming list of `(key, value)` pairs and make a map/dict/object out of them.\n  * `$fallback(fallback) -> value or fallback`: If the value is `null`, then it will be replaced with `fallback`.\n  * `$float -> float`\n  * `$int -> int`\n  * `$not -> bool`: Returns `not value` or `!value`\n  * `$set -> set`\n  * `$string -> str`\n  * `$ternary(if_true, if_false, strict=false) -> any`: Return `if_true` if the value is `truish`, otherwise,\n  return `if_false`. Pass `true` for `strict` if the value must be `true` and not just `truish`.\n\nDatetime \n  * `$parse_timestamp -> datetime or moment`: Take a Unix timestamp in seconds and return a corresponding datetime/moment object\n  * `$strftime(fmt=\"%Y-%m-%dT%H:%M:%SZ\" or \"YYYY-MM-DD[T]HH:mm:ss[Z]\") -> string`: Format a datetime/moment object as a string using `fmt`. Refer to [datetime](#https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) or \n  [moment](#https://momentjs.com/docs/#/parsing/string-format/) for formatting instructions\n  * `$strptime(fmt=null) -> datetime or moment`: Parse a datetime string and return a corresponding datetime/moment object.\n  If `fmt=None`, then standard formats will be tried. Refer to [datetime](#https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) or \n  [moment](#https://momentjs.com/docs/#/parsing/string-format/) for formatting instructions\n  * `$timestamp -> int`: Dump a datetime/moment object to a UTC timestamp as the number of seconds since the Unix Epoch\n  * `$time_part(part) -> int`: Take a `datetime` or `moment` value and get a specific part of\n  the date. `part` can be:\n    * `millisecond`\n    * `second`\n    * `minute`\n    * `hour`\n    * `day`\n    * `month`\n    * `year`\n    * `dayOfWeek`\n    * `dayOfYear`\n\nMath / Numbers\n  * `$abs(num) -> number`\n  * `$add(num) -> number`\n  * `$arith(op, arg_value) -> number`: Take the value and use it as the first operand of an\n  expression with the specified math operator. `op` can be any of the [math operators](#math-operators).\n  The expression will be `value op arg_value`. \n  * `$distance(other) -> float`: Euler distance in N-dimensions\n  * `$divide(num) -> number`\n  * `$math(attr, ...args) -> any`: Returns `math[attr](value, ...args)`, which can be used for\n  operations like `floor`, `cos`, `sin`, `min`, etc. See the [Python Docs](#https://docs.python.org/3/library/math.html) \n  for valid `attr` values in Python and the [JavaScript Docs](#https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) \n  for valid `attr` values in JavaScript.\n  * `$multiply(num) -> number`\n  * `$pow(num) -> number`\n  * `$round(n=2) -> number`\n  * `$subtract(num) -> number`\n\nStrings\n  * `$lowercase -> string`\n  * `$prefix(prefix) -> string`: Prefix the value with the specified string\n  * `$replace(old, new) -> string`: Replace all occurrences of a string \n  * `$split(on=\" \") -> List[string]`: Split a string\n  * `$strip -> string`: Strip leading and trailing whitespace\n  * `$suffix(suffix) -> string`: Concatenate a string to the end of the value\n  * `$titlecase -> string`\n  * `$trim(length=50, suffix=\"...\") -> string`: Trim the length of a string\n  * `$wrap(prefix, suffix) -> string`: Wrap a string with a prefix and suffix. Combines features of above two specials.\n  * `$uppercase -> string`\n\nLists\n  * `$group_by(key=\"\", count=false) -> Dict[any: any[] | int]`: Take an incoming list and group the values \n  by the specified key. Any valid JQL query or integer can be used for the key. `\"\"` means the value itself. \n  The result by default will be keys to a list of values. However, if `count=true`, then the result will be keys \n  to the number of elements in that group.\n  * `$index(key, fallback=null, extended=false) -> any`: Index the current piece of data either using\n  a string or index key, or a full JQL query if `extended=true`. If the index is invalid, then `fallback` will\n  be returned. If `extended=false` and `key` is an integer, then a negative key can be used to index from the\n  end of the array.\n  * `$join(sep=\", \") -> string`: Join a list using the specified separator\n  * `$join_arg(arg: List[any], sep=\", \")`: Similar to `$join` except this operates on an argument instead of the query value.\n  Essentially a shortened form of `$inject(arg).$join(sep)`.\n  * `$map(special, *args, **kwargs) -> List[any]`: Apply `special` to every element in the \n  value. Arguments can be passed through to the special being used.\n  * `$max -> number`: Find the max value in the list\n  * `$min -> number`: Find the min value in the list\n  * `$sum -> number`: Return the sum of the items in the value\n  * `$range(start, end=null) -> List[any]`: Get a sublist. Defaults to `value.slice(start)` or `value[start:]`, \n  but an end value can be specified. Negative indices are allowed. \n  * `$remove_nulls -> List[any]`: Remove any values that are `None` if Python, or `null` and `undefined` if JavaScript\n  * `$sort(key=\"\", reverse=false) -> List[any]`: Sort an incoming list of values by a given key which can be any valid JQL query\n  or an integer. By default, `key=\"\"` means the top-level value will be sorted on.\n\n Attributes\n  * `$attr(attr) -> any`: Access an attribute of the given object, implemented as `getattr(value, attr)` and `value[attr]`\n  * `$call(func, *args, **kwargs) -> any`: Call a function that is on the current value, implemented as `getattr(value, func)(*args)` and `value[func](...args)`\n\n\n## Filter\n>`Filter` takes the power of `JQL` and combines it with \n>filtering conditions to allow lists of items to be filtered down to just those of \n>interest. The filters can be manually built, or the `Key` and `Condition` classes can \n>be used to simplify your code.\n\n### `new Filter(filters, [convert_ints=true (if Python)], empty_filters_response=true, missing_field_response=false)`\n * `filters`: `Condition | List[dict]` The filters to apply to any data. If `List[dict]`, then the\n filters should be formatted as shown below.\n```\n[\n    {\"field\": <field>, \"operator\": <op>, \"value\": <value>},\n\n    OR\n\n    {\"or\": <nested outer structure>},\n\n    OR\n\n    {\"not\": <nested outer structure>},\n\n    ...\n]\n<field>: any valid `JQL` query\n<op>: See list below\n<value>: Any valid value for the operator, or \n    { \"query\": <JQL query> } to have a value which is a query\n``` \n * `convert_ints`: `bool` Corresponds with the argument with the same name in `Query`. Determines\n whether digit only fields are treated as integers or strings. Defaults to `true`.\n * `empty_filters_response`: `bool` Determines what gets returned when no filters are supplied.\n * `missing_field_response`: `bool` Determines the result of a filter where the field could not be found.\n\nFilters are evaluated in order and short-cutting can be used to avoid executing filters.\nFor example, a `present` operator can be used before trying to access or manipulate a field.\nAdditionally, the `$fallback` special can be used to the same effect in certain cases.\n\n#### `.single(item, context={})`\n * `context`: See [`Context`](#context) for more details\n>Take a single item and determine whether it satisfies the filters or not\n>\n>`Filter(filters).single(...) -> boolean`\n\n#### `.many(items, context={})`\n * `context`: See [`Context`](#context) for more details\n>Take a list of items, and returns only those which satisfy the filters. Note, `Filter.many()` introduces `INDEX` into\nthe query namespace. Allowing items to be filtered by their 0-based index.\n>\n>`Filter(filters).many(...) -> [result, result, ...]`\n\n### Notes\n```\n{\"or\": [ \n    [ {filter1}, {filter2} ], \n    {filter3} \n]} === (filter1 AND filter2) OR filter3\n``` \n>Nesting in an `or` will cause those filters\n>to be `AND'd` and then everything in the toplevel of that `or` will be `OR'd`.\n\nOperators:\n * `>`\n * `<`\n * `>=`\n * `<=`\n * `==`\n * `!=`\n * `===`\n * `!==`\n * `in`: `<field> in <value>`\n * `!in`\n * `contains`: `<value> in <field>`\n * `!contains`\n * `subset`: `x in <value> for x in <field>`\n * `!subset`: `exists x in <field> such that x not in <value>`\n * `superset`: `x in <field> for x in <value>`\n * `!superser`: `exists x in <value> such that x not in <field>`\n * `interval`: `<field> in interval [value[0], value[1]]` (closed/inclusive interval)\n * `!interval`: `<field> not in interval [value[0], value[1]]` \n * `startswith`\n * `endswith`\n * `present`\n * `!present`\n\n\n#### Key\n>Intended to simplify having to write `{\"field\": <field>, \"operator\": <operator>, \"value\": value}` \n>a lot. The basic usage is: `Key(<field>).<op>(<value>)`, or for the first six \n>operators, the actual Python operators can be used, so `Key(<field>) <op> <value>`.\n>For example: `Key(\"meta.id\").eq(12)` is the same as `Key(\"meta.id\") == 12`,\n>which is the same as `{\"field\": \"meta.id\", \"operator\": \"==\", \"value\": 12}`.\n\n>To use a filter where the value is a query itself, use `Key(<field>)` as the value.\n>For example: `Key(\"tags.tag1\").gt(Key(\"tag.tag2\"))`.\n\n>The table below describes all of the functions which map to the underlying conditions. \n>Additionally, several other methods are provided to simplify certain aspects of \n>building filters and conditions:\n\n* `Key(field).is_true()`: Same as `Key(field).seq(true)`\n* `Key(field).is_false()`: Same as `Key(field).seq(false)`\n* `Key(field).is_null()`: Same as `Key(field).seq(null)`\n* `Key(field).op(operator).value(value)`: Same as `Key(field).<op>(value)`. Can be used for times when\nyou want to construct a filter and the operator is dynamic.\n\nOperators: \n\n| underlying operator | `Key` function | `Python` operator |\n| ------------------- | -------- | -------- |\n| `>` | `gt` | `>` | \n| `<` | `lt` | `<` | \n| `<=` | `lte` | `<=` | \n| `>=` | `gte` | `>=` | \n| `==` | `eq` | `==` | \n| `!=` | `ne` | `!=` | \n| `===` | `seq` | N/A |\n| `!==` | `sne` | N/A\n| `in` | `in_` | N/A | \n| `!in` | `nin` | N/A | \n| `contains` | `contains` | N/A | \n| `!contains` | `not_contains` | N/A | \n| `subset` | `subset` | N/A | \n| `!subset` | `not_subset` | N/A | \n| `superset` | `superset` | N/A | \n| `!superset` | `not_superset` | N/A | \n| `interval` | `interval` | N/A |\n| `!interval` | `not_interval` | N/A |\n| `startswith` | `startswith` | N/A | \n| `endswith` | `endswith` | N/A | \n| `present` | `present` | N/A | \n| `!present` | `not_present` | N/A | \n\n#### Condition\n>Intended to be used in combination with `Key` to make creating filters\n>easier than manually creating the `JSON`. There are three conditions supported:\n>`and`, `or`, and `not`. They can be manually accessed via `and_(...conditions)`, `or_(...conditions)`, and `not_()`.\n>\n>The conditions can also be accessed through the overloaded operators `&`, `|`, and `~`, respectively, if in Python. \n>**Caution: `&` and `|` bind tighter than the comparisons operators and `~` binds the tightest**\n>\n>`Key(\"first_name\") == \"John\" | Key(\"first_name\") == \"Bill\"` is actually\n`(Key(\"first_name\") == (\"John\" | Key(\"first_name\"))) == \"Bill\"`, not\n`(Key(\"first_name\") == \"John\") | (Key(\"first_name\") == \"Bill\")`\n\n##### `Condition.ander(cond1, cond2, *conditions)`\n>AND two or more conditions together\n\n##### `Condition.orer(cond1, cond2, *conditions)`\n>OR two or more conditions together\n\n##### `.and_(*conditions)`\n>AND the current condition with multiple other conditions\n\n##### `.or_(*conditions)`\n>OR the current condition with multiple other conditions\n\n##### `.not_()`\n>NOT the current condition\n\n##### `.clone(deep=false)`\n>Clone the current condition. If deep, then all aspects will be duplicated.\n\n##### `.traverse(callback, on_duplicate=false) -> Condition`\n>Traverse through all of the filters in the current condition, calling `callback(filter)` with each one.\n>`on_duplicate` indicates whether the current condition is iterated over, or a duplicate.\n>Whatever condition was iterated over will be returned.\n\n##### `.to_list() -> list`\n>Return a list of filters/conditions for this condition\n\n##### `Condition.from_list(conditions) -> Condition`\n>Take a list of filters/conditions and make a Condition object out of it\n\nExamples\n```python\n# Python\nKey(\"state\").eq(\"Texas\") | Key(\"city\").eq(\"New York\")\n\n(Key(\"gender\") == \"male\") & (Key(\"age\") >= 18) & (Key(\"selective_service\") == False)\n\nKey('creation_time.$parse_timestamp.$attr(\"year\")').lt(2005).or_(\n    Key('creation_time.$parse_timestamp.$attr(\"year\")').gt(2015)\n).and_(\n    Key(\"product_id\") == 15\n)\n# (year < 2005 OR year > 2015) AND product_id == 15\n```\n\n```javascript\n// JavaScript\nKey('creation_time.$parse_timestamp.$call(\"year\")').lt(2005).or_(\n    Key('creation_time.$parse_timestamp.$call(\"year\")').gt(2015)\n).and_(\n    Key(\"product_id\").seq(15)\n);\n```\n\n## Formatter\n> `Formatter` allows fields to be queried from an object and then formatted\n>into a string. Any queries in a format string should be prefixed with `@` and any valid `JQL` query can be used. For example, \n>`new Formatter('Name: @name}').single({\"name\": \"John Smith\"})` results in\n>`Name: John Smith`.\n\n### `Formatter(spec, fallback=\"<missing>\", [convert_ints=true (if Python)])`\n * `spec`: `str` The format string\n * `fallback`: `str` The value that will be used in the formatted string if a query could not be performed. For example, if the field `missing` does exist, then the query `\"Age: @missing\"` will result in `\"Age: <missing>\"`\n * `convert_ints`: `bool` Whether digit-only fields get treated as integers or strings\n\n#### `.single(item, context={})`\n * `context`: See [`Context`](#context) for more details\n> Return a formatted string or the fallback value if the query fails\n\n#### `.many(items, context={})`\n * `context`: See [`Context`](#context) for more details\n> Return a list of formatted strings or the fallback value.\n\n### Notes\n>The differences between `Query` and `Formatter` are:\n * `Query` can return a value of any type, `Formatter` just returns strings\n * `Formatter` supports multiple queries, end-to-end, `Query` does not\n * All queries must be prefixed with `@` with `Formatter`, not just when used as an argument like with `Query`\n * Both support all the features of `JQL`\n * `Query` actually can theoretically do everything `Formatter` does by using `$prefix`, `$suffix`, and `$string`. \n For example, `'@name @age'` -> `'name.$suffix(\" \").$suffix(@age)'`. However, the latter is much longer than the former\n\nExample (flattening operations):\n\n```python\n# Python\nerrors = {\n    \"errors\": {\n        \"Process Error\": \"Could not communicate with the subprocess\",\n        \"Connection Error\": \"Could not connect with the database instance\"\n    }\n}\n\nFormatter('Errors: \\n@errors.$items.$map(\"join\", \": \\\\n\\\\t\").$join(\"\\\\n\")').single(errors)\n# Errors:\n# Process Error: \n#   Could not communicate with the subprocess\n# Connection Error: \n#   Could not connect with the database instance\n```\n\n```javascript\n// JavaScript\nconst errors = {\n    errors: {\n        \"Process Error\": \"Could not communicate with the subprocess\",\n        \"Connection Error\": \"Could not connect with the database instance\"\n    }\n};\n\nnew Formatter('Erros: @errors.$items.$map(\"join\", \": \\\\n\\\\t\").$join(\"\\\\n\")}').single(errors);\n// Errors: \n// Process Error: \n//   Could not communicate with the subprocess\n// Connection Error: \n//   Could not connect with the database instance\n```\n>The above example shows a powerful usage of flattening `errors` into its items,\n>then joining each item; splitting the error name and message between lines, then\n>joining all the errors together.\n\nExample (nested replacement):\n\n```python\n# Python\nitem = {\n    \"x1\": 1,\n    \"y1\": 1,\n    \"x2\": 12,\n    \"y2\": 54\n}\n\nFormatter(\n    \"Midpoint: [@x2.$subtract(@x1).$divide(2), @y2.$subtract(@y1).$divide(2)]\"\n)\n# Midpoint: [5.5, 26.5]\n```\n\n```javascript\n// JavaScript\nconst item = {\n    x1: 1,\n    y1: 1,\n    x2: 12,\n    y2: 54\n};\n\nnew Formatter(\n    \"Midpoint: [@x2.$subtract(@x1).$divide(2), @y2.$subtract(@y1).$divide(2)]\"\n).single(item);\n// Midpoint: [5.5, 26.5]\n```\n\n\n## Performance\n>There are several ways to increase the performance of querying, filtering, and formatting. The performance gains can be had\n>by limiting the amount of times a query string has to be parsed. This means that using a `Query`,\n>`Filter`, or `Formatter` object multiple times will be faster then creating a new object every time. \n\nExamples:\n```python\n# Python\n# slower\nfor item in items:\n    f = Query(\"timestamp.$parse_timestamp\").single(item)\n    # do other stuff\n\n# faster\nquery = Query(\"timestamp.$parse_timestamp\")\nfor item in items:\n    f = query.single(item)\n    # do other stuff\n```\n\n```javascript\n// JavaScript\n// slower\nitems.forEach(item => {\n  let f = new Query(\"timestamp.$parse_timestamp\").single(item);\n  // do other stuff\n});\n\n// faster\nconst query = new Query(\"timestamp.$parse_timestamp\");\nitems.forEach(item => {\n  let f = query.single(item);\n  // do other stuff\n});\n```\n\n>Across 10,000 runs:\n* Python\n   * reusing `Query` can improve performance by 302x\n   * reusing `Filter` can improve performance by 132x\n   * reusing `Formatter` can improve performance by 377x.\n* JavaScript\n   * reusing `Query` can improve performance by 192\n   * reusing `Filter` can improve performance by 120x\n   * reusing `Formatter` can improve performance by 210x.\n\n## Changelog\n * `1.1.5`\n   * Unify `README` between Python and JavaScript versions\n   * Expand documentation\n\n * `1.1.4`\n   * Added `$value_map`, which allows the values on an map/dict/object to be modified with a special, either in-place\n   or on a duplicate\n   * Exposed `context` so additional fields can manually be put into the current query space. This was already \n   being used by `$store_as`. `context` can be passed to any `.single()` or `.many()` call.\n   * Additionally, `Filter.many()` is now placing `INDEX` into the query space to allow\n   items to be filtered by their 0-based index\n   * Exposed many of the internal TypeScript types\n\n * `1.1.3`\n   * Changed the behavior of `new Query(\"\")`, from returning the fallback value, to returning the source data element itself.\n  For example, `new Query(\"\").single(data) === data`.\n   * Added `SpecialNotFoundError`, which is raised when an invalid special is queried. Can be imported as \n  `import { SpecialNotFoundError } from \"@blending_jake/jtools\";`\n   * Added new specials\n     * `$store_as(name)` Store the current query value in the current context for later use in the query. This does not \n   change the underlying data being queried.\n     * `$group_by(key=\"\", count=false)` Take an incoming list and group the values by the specified key.\n   Any valid JQL query can be used for the key, so `\"\"` means the value itself. The result by default will be\n   keys to a list of values. However, if `count=true`, then the result will be keys to the number of elements with each \n   key.\n     * `$sort(key=\"\", reverse=false)` Sort an incoming list of values by a given key which can be any valid JQL query.\n   By default, `key=\"\"` means the top-level value will be sorted on.\n     * `$dict` Take an incoming list of `(key, value)` pairs and make a dict out of them.\n     * `$join_arg(arg, sep=', ')` Similar to `$join` except this operates on an argument instead of the query value.\n   Essentially a shortened form of `$inject(arg).$join(sep)`.\n   * Changed the underlying special function definition to now include the keyword argument `context`. This argument is \n  implemented to only be accessed by name to avoid collision if the user provides too many arguments in their query. \n  The purpose of the context is to support specials adding values temporarily to the data\n  namespace of the query, like `$store_as` does.\n\n * `1.1.2`\n   * Version `1.1.1` was skipped to keep on track with `JTools-Py`\n   * Catch and handle `Extraneous Input Error`\n   * Change `JQL` so that field and special names must only contain `[-a-zA-Z0-9_]`. `$index` can be used to get fields\n   with prohibited characters. The change was to support more formatting use-cases, like `Age: @age, DOB: @dob`, which \n   previously would have failed because the `,` would have been considered part of the field name.\n   * Change `Formatter` so that `fallback` is just a string that is substituted for invalid queries, instead of being\n   the entire return value. Previously, `\"Age: @missing\"` would result in `None`, now it results in `\"Age: <missing>\"`.\n   This change allows for better debugging as it becomes clear exactly which queries are failing.\n   * Add function docstrings\n\n * `1.1.0`\n   * Rename `Getter` to `Query` to more accurately describe what the class does\n   * Migrate queries to use `JQL`\n     * The migration opens the door to nested queries in `Query`, allowing queries, prefixed with `@` to be used\n     as arguments to specials, or even as values in the supported argument data structures\n     * Special arguments are no longer parsed as `JSON`, allowing features like sets, query nesting, and support\n     for single and double quoted strings.\n     * Formatter no longer uses `{{}}` to surround queries. Instead, all queries must be prefixed with `@`, so\n     `\"{{name}} {{age}}\"` -> `\"@name @age\"`. `@@` must be used to get a literal `@` in a formatted string:\n     `\"bob@@gmail.com\"` -> `\"bob@gmail.com\"`\n     * Formatter got about a 2x performance boost\n   * Added `$wrap(prefix, suffix)` to combine `$prefix` and `$suffix`\n   * Added `$remove_nulls`\n   * Added `$lookup(map, fallback=None)`\n   * Added `$wildcard(next, just_value=True)`, which allows level of nesting to be \"skipped\", such that a list\n   of sub-values where `next` is present\n   * Added a `fallback` argument to `$index`\n   * Added `$print` to display the current value in the query\n   * Added `$inject` to allow any valid argument value to be injected into the query to be\n  accessed and transformed by subsequent fields and specials\n\n * `1.0.6`\n   * Migrate to TypeScript, so a declaration file is now included in the distribution\n   * Add this `README`\n   * Add `===` and `!==` filters for strict equality checking. The methods `seq` and `sne` have\n   been added to `Key` to correspond with the new filters.\n   * Rename `null` -> `!present` and `!null` -> `present`. Corresponding methods have been renamed\n   to `not_present` and `present`. This filter will catch values that are `null` or `undefined`.\n   * Make membership filters (`in`, `contains`, `!in` and `!contains`) work properly with \n   strings, arrays, associative arrays, and sets.\n   * Remove `$datetime`. See below for replacement.\n   * Add `$call` and `$attr` for calling a function and accessing an attribute. Can be used to replace\n   `$datetime` functionality.\n   * Remove `Formatter.format` and add `Formatter.single` and `Formatter.many` to be consistent across\n   other classes and support formatting arrays of items.\n   * Add more tests to increase coverage and do basic performance testing\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BlendingJake/JTools-Py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jtools",
    "package_url": "https://pypi.org/project/jtools/",
    "platform": "",
    "project_url": "https://pypi.org/project/jtools/",
    "project_urls": {
      "Homepage": "https://github.com/BlendingJake/JTools-Py"
    },
    "release_url": "https://pypi.org/project/jtools/2.0.0/",
    "requires_dist": [
      "python-dateutil (>=2)",
      "antlr4-python3-runtime (>=4.8)"
    ],
    "requires_python": ">=3.5",
    "summary": "A Python module that aids filtering, formatting, and transforming JSON-like objects",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8437262,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14fe7ecfe96452a62898e50c9c0802bf9e2906fbb809f8d93fb6087256686913",
          "md5": "b067bda353d8b2d3a47feffe20c60a46",
          "sha256": "8cbb1e30347159fec3a68dab4e4edc654de403644a26909b661668c0a561e22e"
        },
        "downloads": -1,
        "filename": "jtools-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b067bda353d8b2d3a47feffe20c60a46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10366,
        "upload_time": "2020-01-20T01:48:50",
        "upload_time_iso_8601": "2020-01-20T01:48:50.638783Z",
        "url": "https://files.pythonhosted.org/packages/14/fe/7ecfe96452a62898e50c9c0802bf9e2906fbb809f8d93fb6087256686913/jtools-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4763e063ca230ba8b50ad7e98e3a6a50447a0c6c79cb988e526e3a29707f6756",
          "md5": "004a863fd0059c55df0805ab073a6184",
          "sha256": "af4851e11a62a60494546f35a66b341a1f24f8cc0cbf69b0aa30931a4a7988dd"
        },
        "downloads": -1,
        "filename": "jtools-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "004a863fd0059c55df0805ab073a6184",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13095,
        "upload_time": "2020-01-20T01:48:53",
        "upload_time_iso_8601": "2020-01-20T01:48:53.148884Z",
        "url": "https://files.pythonhosted.org/packages/47/63/e063ca230ba8b50ad7e98e3a6a50447a0c6c79cb988e526e3a29707f6756/jtools-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "476053c38aa9de3528639aaae8b3e6d4d1866081c0d82080a220db64f8e1a412",
          "md5": "da60b963f74a60d888427d7beafc6abe",
          "sha256": "e61361aaf022dd17f2044c312ca938caf88a846129c5ebbdddaaa9f4fae76be0"
        },
        "downloads": -1,
        "filename": "jtools-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da60b963f74a60d888427d7beafc6abe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11351,
        "upload_time": "2020-01-22T01:54:05",
        "upload_time_iso_8601": "2020-01-22T01:54:05.670138Z",
        "url": "https://files.pythonhosted.org/packages/47/60/53c38aa9de3528639aaae8b3e6d4d1866081c0d82080a220db64f8e1a412/jtools-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41c55aedc73dd1135b8e58e81ef71ca99bdde87b63a1fa54681d4eda194dc326",
          "md5": "de7f01ca3da65631b60a5e2ae4710418",
          "sha256": "0030c1f1765706e5f7ccdc50bb5c11b9a2c6c11a9130367d0cb89d70cb740663"
        },
        "downloads": -1,
        "filename": "jtools-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de7f01ca3da65631b60a5e2ae4710418",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14570,
        "upload_time": "2020-01-22T01:54:09",
        "upload_time_iso_8601": "2020-01-22T01:54:09.238474Z",
        "url": "https://files.pythonhosted.org/packages/41/c5/5aedc73dd1135b8e58e81ef71ca99bdde87b63a1fa54681d4eda194dc326/jtools-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a6bf64d53fbe7ea4bcf3543561188da302ac271f9074dd83b63d42eb7c92c3c",
          "md5": "170bed79008afdea7c3ba636359491b0",
          "sha256": "6eb8d41536e0722305ee93ddeb13750d13a53fd65d04782bcca7833f7b0ddeb5"
        },
        "downloads": -1,
        "filename": "jtools-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "170bed79008afdea7c3ba636359491b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11986,
        "upload_time": "2020-01-23T00:47:58",
        "upload_time_iso_8601": "2020-01-23T00:47:58.499822Z",
        "url": "https://files.pythonhosted.org/packages/2a/6b/f64d53fbe7ea4bcf3543561188da302ac271f9074dd83b63d42eb7c92c3c/jtools-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb3d3b5bf0555aadf40c84ac3dffb27b46b7e8a15c39cafd2ade6f3b64582c35",
          "md5": "76b8d0cb25e0869d23186aec9bc5fd48",
          "sha256": "a9d320d1b30abceefd70df91d92669dbb7c608bfbab280afbda81e912ca2eb17"
        },
        "downloads": -1,
        "filename": "jtools-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "76b8d0cb25e0869d23186aec9bc5fd48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15509,
        "upload_time": "2020-01-23T00:47:59",
        "upload_time_iso_8601": "2020-01-23T00:47:59.803623Z",
        "url": "https://files.pythonhosted.org/packages/cb/3d/3b5bf0555aadf40c84ac3dffb27b46b7e8a15c39cafd2ade6f3b64582c35/jtools-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a98baba5c9682b811f456b8e7952f0efe737238972ddfb1b802d06f790c8a26",
          "md5": "658f374deb1f9e18513d2e9d085adea5",
          "sha256": "0d90937930c71e72ebe2c7ada199432f335314ce3de79fc8886dcdfa1c5d3ce7"
        },
        "downloads": -1,
        "filename": "jtools-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "658f374deb1f9e18513d2e9d085adea5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 13116,
        "upload_time": "2020-02-04T02:09:50",
        "upload_time_iso_8601": "2020-02-04T02:09:50.337723Z",
        "url": "https://files.pythonhosted.org/packages/7a/98/baba5c9682b811f456b8e7952f0efe737238972ddfb1b802d06f790c8a26/jtools-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba2cef0627cf0694723524b83f940dc477c9b4d6f87ee4bf84c89db2c72f85af",
          "md5": "4681febc4f627f51dbc9efe4f314ea9b",
          "sha256": "446eebc8f2cd97c4d7efcd1171dc3880e8b217389d448aff89a2656d17aff4d6"
        },
        "downloads": -1,
        "filename": "jtools-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4681febc4f627f51dbc9efe4f314ea9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 17864,
        "upload_time": "2020-02-04T02:09:51",
        "upload_time_iso_8601": "2020-02-04T02:09:51.432094Z",
        "url": "https://files.pythonhosted.org/packages/ba/2c/ef0627cf0694723524b83f940dc477c9b4d6f87ee4bf84c89db2c72f85af/jtools-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f4226f77db549defdad975ea48c7c38b1d623c881a2dfe2256d85585f833e63",
          "md5": "475220b502584cc737730a1d5c93dd4d",
          "sha256": "ae44a74da51103a2e93e81830d9c35d9cf87ea30e59db19003db4fbc109b7695"
        },
        "downloads": -1,
        "filename": "jtools-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "475220b502584cc737730a1d5c93dd4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15501,
        "upload_time": "2020-02-18T00:50:07",
        "upload_time_iso_8601": "2020-02-18T00:50:07.700462Z",
        "url": "https://files.pythonhosted.org/packages/7f/42/26f77db549defdad975ea48c7c38b1d623c881a2dfe2256d85585f833e63/jtools-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da143d17dda701015b93bf79317dce4916fab8041243f63b6b0f6e286ba38dad",
          "md5": "94dcbfcdc870a11d80b349ddb93bd7c8",
          "sha256": "524c8fb943cd6e761ab4f7ebdf0aa6217e08d6a5ba97ddae2625a7399abf34e5"
        },
        "downloads": -1,
        "filename": "jtools-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "94dcbfcdc870a11d80b349ddb93bd7c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19427,
        "upload_time": "2020-02-18T00:50:08",
        "upload_time_iso_8601": "2020-02-18T00:50:08.974882Z",
        "url": "https://files.pythonhosted.org/packages/da/14/3d17dda701015b93bf79317dce4916fab8041243f63b6b0f6e286ba38dad/jtools-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a36503a2fd2b49f0c8b6fafe839fc9bb96e7bc39634f8d18e7f942f79fd2cbf",
          "md5": "a51db29217e031702ffeb8208dc0fca1",
          "sha256": "f88081d0fea66d3be55942eb74bb0326fd42a510ebc7ef90ed10cb4f773b6eca"
        },
        "downloads": -1,
        "filename": "jtools-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a51db29217e031702ffeb8208dc0fca1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20892,
        "upload_time": "2020-02-23T01:07:18",
        "upload_time_iso_8601": "2020-02-23T01:07:18.516035Z",
        "url": "https://files.pythonhosted.org/packages/6a/36/503a2fd2b49f0c8b6fafe839fc9bb96e7bc39634f8d18e7f942f79fd2cbf/jtools-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532be4c66d07a9b3381b6417dd4feee67385b87a030406e39ed86f499eadef53",
          "md5": "579a0c4e8e309c18e956636945e92066",
          "sha256": "4e5211241c955daa07c36461a4e4fb2375d0dd12be4efb148fa85c6aaa439bb5"
        },
        "downloads": -1,
        "filename": "jtools-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "579a0c4e8e309c18e956636945e92066",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 24958,
        "upload_time": "2020-02-23T01:07:19",
        "upload_time_iso_8601": "2020-02-23T01:07:19.895155Z",
        "url": "https://files.pythonhosted.org/packages/53/2b/e4c66d07a9b3381b6417dd4feee67385b87a030406e39ed86f499eadef53/jtools-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6e0781f149c67e5056a818abdda8683656dd33c67a4680482fe194b6333f8d6",
          "md5": "b25328ee7a5c0a514d70dd15bdf4dc33",
          "sha256": "9e61a6c9bfcc73a8ea2efc6be897935a15c6b9c0c4c31506cffbbc7e8e4ab238"
        },
        "downloads": -1,
        "filename": "jtools-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b25328ee7a5c0a514d70dd15bdf4dc33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 37858,
        "upload_time": "2020-03-13T17:52:37",
        "upload_time_iso_8601": "2020-03-13T17:52:37.481555Z",
        "url": "https://files.pythonhosted.org/packages/c6/e0/781f149c67e5056a818abdda8683656dd33c67a4680482fe194b6333f8d6/jtools-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fa511011d984f29720fad1ca4af30dd8552f4e0711d65007537509d0575da17",
          "md5": "83eaaf25ef5dd1746185d198c0f328d4",
          "sha256": "6bbfe82c9c7a784a2ddd943c813f542a6ab55aa4275dd70a8520d7401a17547a"
        },
        "downloads": -1,
        "filename": "jtools-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "83eaaf25ef5dd1746185d198c0f328d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 41336,
        "upload_time": "2020-03-13T17:52:39",
        "upload_time_iso_8601": "2020-03-13T17:52:39.051737Z",
        "url": "https://files.pythonhosted.org/packages/0f/a5/11011d984f29720fad1ca4af30dd8552f4e0711d65007537509d0575da17/jtools-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8323c1665573c75cfcc695f5ef57683b322a4a4327865c06c46f0e7475f3694b",
          "md5": "5c359489e816791bcfe92b65e1cc5bdb",
          "sha256": "6cea4501ca6dec3360d656e9f16e383cf79d030421a4ec746368b2f94c1c2d38"
        },
        "downloads": -1,
        "filename": "jtools-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c359489e816791bcfe92b65e1cc5bdb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38502,
        "upload_time": "2020-03-21T15:10:44",
        "upload_time_iso_8601": "2020-03-21T15:10:44.692238Z",
        "url": "https://files.pythonhosted.org/packages/83/23/c1665573c75cfcc695f5ef57683b322a4a4327865c06c46f0e7475f3694b/jtools-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9953c17adaa58fad57aef4a87f4c53a76983fcf8c8f5f4185bb67d59d6f3ec6",
          "md5": "87d62e5e62680e79f3b64118ba949fce",
          "sha256": "5f8a978863cf5ca0b6eca0486a9b76ee40c7649708c4df1c62c0693460a3951e"
        },
        "downloads": -1,
        "filename": "jtools-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87d62e5e62680e79f3b64118ba949fce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 43134,
        "upload_time": "2020-03-21T15:10:45",
        "upload_time_iso_8601": "2020-03-21T15:10:45.733481Z",
        "url": "https://files.pythonhosted.org/packages/a9/95/3c17adaa58fad57aef4a87f4c53a76983fcf8c8f5f4185bb67d59d6f3ec6/jtools-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0adaa5a75f104c7e63794c38797ba75745dc53e93fba650c9dfd659b2fa87f7d",
          "md5": "2a4918f581def90596097e5d72dab62e",
          "sha256": "e19745972cdac87dffdab5615732cee44c329b639a18f29c6559e729a18fafb0"
        },
        "downloads": -1,
        "filename": "jtools-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a4918f581def90596097e5d72dab62e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38669,
        "upload_time": "2020-03-22T18:10:09",
        "upload_time_iso_8601": "2020-03-22T18:10:09.559210Z",
        "url": "https://files.pythonhosted.org/packages/0a/da/a5a75f104c7e63794c38797ba75745dc53e93fba650c9dfd659b2fa87f7d/jtools-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8d8fc920dc05ad51b41c1cad4c3970729a1034c307522b30350b16247df743",
          "md5": "3e0c1bdf4a1d25a73a0bf89ba421321c",
          "sha256": "ca6413e1650ab27bf8bc3cc165a8e75624d341d020855003a602df3d050cdb74"
        },
        "downloads": -1,
        "filename": "jtools-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3e0c1bdf4a1d25a73a0bf89ba421321c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 43421,
        "upload_time": "2020-03-22T18:10:10",
        "upload_time_iso_8601": "2020-03-22T18:10:10.882323Z",
        "url": "https://files.pythonhosted.org/packages/5d/8d/8fc920dc05ad51b41c1cad4c3970729a1034c307522b30350b16247df743/jtools-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb72bbb78779c284cfcbd06cc69cfd1524cf6377eb1b75632c279252cdb4cb2b",
          "md5": "6946642976ab311376dc4c7c9a26ea9b",
          "sha256": "fd10f2d7067f1178572f6e7b024b9567202091b1bdaa416c4f8d4f5be34fd2a9"
        },
        "downloads": -1,
        "filename": "jtools-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6946642976ab311376dc4c7c9a26ea9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 40643,
        "upload_time": "2020-03-30T00:12:43",
        "upload_time_iso_8601": "2020-03-30T00:12:43.970701Z",
        "url": "https://files.pythonhosted.org/packages/cb/72/bbb78779c284cfcbd06cc69cfd1524cf6377eb1b75632c279252cdb4cb2b/jtools-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddd1eeb99df8467ab441dfcde2c2bd286c5e291c3a1b85ab7ebbca417659aaaf",
          "md5": "ad6af21e7dcbd217eeb75e50359fa9bf",
          "sha256": "b836c5996e1813ba6f0893e392bd6205b7a477ed327ef2545d01490349186330"
        },
        "downloads": -1,
        "filename": "jtools-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ad6af21e7dcbd217eeb75e50359fa9bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45371,
        "upload_time": "2020-03-30T00:12:45",
        "upload_time_iso_8601": "2020-03-30T00:12:45.925525Z",
        "url": "https://files.pythonhosted.org/packages/dd/d1/eeb99df8467ab441dfcde2c2bd286c5e291c3a1b85ab7ebbca417659aaaf/jtools-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "576c21a1331488aa4a24690ff6777824290e52e225d5488b8a8ccad4400b28b7",
          "md5": "3173f3d57cb3c896f3066e9a04952026",
          "sha256": "bb84ae1f1184d9e230474a0d3246d2093a6afe05e7a2fb08877c72d420dbaa16"
        },
        "downloads": -1,
        "filename": "jtools-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3173f3d57cb3c896f3066e9a04952026",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 42845,
        "upload_time": "2020-05-10T23:55:03",
        "upload_time_iso_8601": "2020-05-10T23:55:03.761621Z",
        "url": "https://files.pythonhosted.org/packages/57/6c/21a1331488aa4a24690ff6777824290e52e225d5488b8a8ccad4400b28b7/jtools-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f2661abc9896a1403ef5d2b86747c792f36c116fa2ddf7c2d1c7ad10ada8c5b",
          "md5": "78848207da35771fb46fafc98e4c3567",
          "sha256": "15c9e37c744bd5687904eeac5140311fe1d0ef115f09f1d4a4f8f12afd777614"
        },
        "downloads": -1,
        "filename": "jtools-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "78848207da35771fb46fafc98e4c3567",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 53223,
        "upload_time": "2020-05-10T23:55:07",
        "upload_time_iso_8601": "2020-05-10T23:55:07.133307Z",
        "url": "https://files.pythonhosted.org/packages/6f/26/61abc9896a1403ef5d2b86747c792f36c116fa2ddf7c2d1c7ad10ada8c5b/jtools-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59f89863b122358bce3b389a36b487217c0381926196056ee56cfe93398badbe",
          "md5": "ce03c62f161cc8281b869b2d70fa464d",
          "sha256": "0dda3a40709e15efb21de5275a291eb8d6f49cc51b2678c77d38f20d9f14b1f4"
        },
        "downloads": -1,
        "filename": "jtools-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce03c62f161cc8281b869b2d70fa464d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 56325,
        "upload_time": "2020-10-18T01:04:42",
        "upload_time_iso_8601": "2020-10-18T01:04:42.910891Z",
        "url": "https://files.pythonhosted.org/packages/59/f8/9863b122358bce3b389a36b487217c0381926196056ee56cfe93398badbe/jtools-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66c30b9e0960234f68b719e620e963fb00a0af1c4e50b8d39b50727c422574ae",
          "md5": "6dee6ea78d208349e0eb65ad797a3aa8",
          "sha256": "58fe31d4b69e84a861ca645f75bf1c13cee73dca6de11b12e8aaceef7b9ed1be"
        },
        "downloads": -1,
        "filename": "jtools-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dee6ea78d208349e0eb65ad797a3aa8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 77242,
        "upload_time": "2020-10-18T01:04:44",
        "upload_time_iso_8601": "2020-10-18T01:04:44.523364Z",
        "url": "https://files.pythonhosted.org/packages/66/c3/0b9e0960234f68b719e620e963fb00a0af1c4e50b8d39b50727c422574ae/jtools-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59f89863b122358bce3b389a36b487217c0381926196056ee56cfe93398badbe",
        "md5": "ce03c62f161cc8281b869b2d70fa464d",
        "sha256": "0dda3a40709e15efb21de5275a291eb8d6f49cc51b2678c77d38f20d9f14b1f4"
      },
      "downloads": -1,
      "filename": "jtools-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce03c62f161cc8281b869b2d70fa464d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 56325,
      "upload_time": "2020-10-18T01:04:42",
      "upload_time_iso_8601": "2020-10-18T01:04:42.910891Z",
      "url": "https://files.pythonhosted.org/packages/59/f8/9863b122358bce3b389a36b487217c0381926196056ee56cfe93398badbe/jtools-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66c30b9e0960234f68b719e620e963fb00a0af1c4e50b8d39b50727c422574ae",
        "md5": "6dee6ea78d208349e0eb65ad797a3aa8",
        "sha256": "58fe31d4b69e84a861ca645f75bf1c13cee73dca6de11b12e8aaceef7b9ed1be"
      },
      "downloads": -1,
      "filename": "jtools-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6dee6ea78d208349e0eb65ad797a3aa8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 77242,
      "upload_time": "2020-10-18T01:04:44",
      "upload_time_iso_8601": "2020-10-18T01:04:44.523364Z",
      "url": "https://files.pythonhosted.org/packages/66/c3/0b9e0960234f68b719e620e963fb00a0af1c4e50b8d39b50727c422574ae/jtools-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}