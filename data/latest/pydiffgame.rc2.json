{
  "info": {
    "author": "Dr. Aviran Sadon, Joshua Shay Kricheli and Prof. Gera Weiss",
    "author_email": "Joshua Shay Kricheli <skricheli2@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n    <img alt=\"Logo\" src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/images/logo.png\"/>\n</p>\n\n  * [What is this?](#what-is-this)\n  * [Local Installation](#local-installation)\n  * [Input Parameters](#input-parameters)\n  * [Tutorial](#tutorial)\n  * [Acknowledgments](#acknowledgments)\n\n# What is this?\n\n[`PyDiffGame`](https://github.com/krichelj/PyDiffGame) is a Python implementation of a Nash Equilibrium solution to Differential Games, based on a reduction of Game Hamilton-Bellman-Jacobi (GHJB) equations to Game Algebraic and Differential Riccati equations, associated with Multi-Objective Dynamical Control Systems\\\nThe method relies on the formulation given in:\n\n - The thesis work \"_Differential Games for Compositional Handling of Competing Control Tasks_\"\n   ([Research Gate](https://www.researchgate.net/publication/359819808_Differential_Games_for_Compositional_Handling_of_Competing_Control_Tasks))\n\n - The conference article \"_Composition of Dynamic Control Objectives Based on Differential Games_\" \n([IEEE](https://ieeexplore.ieee.org/document/9480269) | \n[Research Gate](https://www.researchgate.net/publication/353452024_Composition_of_Dynamic_Control_Objectives_Based_on_Differential_Games))\n\nIf you use this work, please cite our paper:\n```\n@conference{med_paper,  \n  author={Kricheli, Joshua Shay and Sadon, Aviran and Arogeti, Shai and Regev, Shimon and Weiss, Gera},\n  booktitle={29th Mediterranean Conference on Control and Automation (MED)}, \n  title={{Composition of Dynamic Control Objectives Based on Differential Games}}, \n  year={2021},\n  pages={298-304},\n  doi={10.1109/MED51440.2021.9480269}}\n```\n\n# Installation\n\nTo install this package run this from the command prompt:\n```\npip install PyDiffGame\n```\n\nThe package was tested for Python >= 3.10, along with the listed packages versions in [`requirments.txt`](https://github.com/krichelj/PyDiffGame/blob/master/requirements.txt)\n\n# Input Parameters\n\nThe package defines an abstract class [`PyDiffGame.py`](https://github.com/krichelj/PyDiffGame/blob/master/src/PyDiffGame/PyDiffGame.py). An object of this class represents an instance of differential game.\nThe input parameters to instantiate a `PyDiffGame` object are:\n\n* `A` : `np.array` of shape $(n,n)$\n>System dynamics matrix\n* `B` : `np.array` of shape( $n,\\sum_{i=1}^N m_i$ ), optional\n>Input matrix for all virtual control objectives\n* `Bs` : `Sequence` of `np.array` objects of len $(N)$, each array $B_i$ of shape $(n,m_i)$, optional\n>Input matrices for each virtual control objective\n* `Qs` : `Sequence` of `np.array` objects of len $(N)$, each array $Q_i$ of shape $(n,n)$, optional\n>State weight matrices for each virtual control objective\n* `Rs` : `Sequence` of `np.array` objects of len $(N)$, each array $R_i$ of shape $(m_i,m_i)$, optional\n>Input weight matrices for each virtual control objective\n* `Ms` : `Sequence` of `np.array` objects of len $(N)$, each array $M_i$ of shape $(m_i,m)$, optional\n>Decomposition matrices for each virtual control objective\n* `objectives` : `Sequence` of `Objective` objects of len $(N)$, each $O_i$ specifying $Q_i, R_i$ and $M_i$, optional\n>Desired objectives for the game\n* `x_0` : `np.array` of len $(n)$, optional\n>Initial state vector\n* `x_T` : `np.array` of len $(n)$, optional\n>Final state vector, in case of signal tracking\n* `T_f` : positive `float`, optional\n>System dynamics horizon. Should be given in the case of finite horizon\n* `P_f` : `list` of `np.array` objects of len $(N)$, each array $P_{f_i}$ of shape $(n,n)$, optional, default = uncoupled solution of `scipy's solve_are`\n>\n>Final condition for the Riccati equation array. Should be given in the case of finite horizon\n* `state_variables_names` : `Sequence` of `str` objects of len $(N)$, optional\n>The state variables' names to display when plotting\n* `show_legend` : `boolean`, optional\n>Indicates whether to display a legend in the plots\n* `state_variables_names` : `Sequence` of `str` objects of len $(n)$, optional\n>The state variables' names to display\n* `epsilon_x` : `float` in the interval $(0,1)$, optional\n>Numerical convergence threshold for the state vector of the system\n* `epsilon_P` : `float` in the interval $(0,1)$, optional\n>Numerical convergence threshold for the matrices P_i\n* `L` : positive `int`, optional\n>Number of data points\n* `eta` : positive `int`, optional\n>The number of last matrix norms to consider for convergence\n* `debug` : `boolean`, optional\n>Indicates whether to display debug information\n\n\n# Tutorial\n\nTo demonstrate the use of the package, we provide a few running examples.\nConsider the following system of masses and springs:\n\n\n<p align=\"center\">\n    <img align=top src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/src/PyDiffGame/examples/figures/2/two_masses_tikz.png\" width=\"797\" height=\"130\"/>\n</p>\n\nThe performance of the system under the use of the suggested method is compared with that of a Linear Quadratic Regulator (LQR). For that purpose, class named [`PyDiffGameLQRComparison`](https://github.com/krichelj/PyDiffGame/blob/master/src/PyDiffGame/PyDiffGameLQRComparison.py) is defined. A comparison of a system should subclass this class.\nAs an example, for the masses and springs system, consider the following instantiation of an [`MassesWithSpringsComparison`](https://github.com/krichelj/PyDiffGame/blob/master/src/PyDiffGame/examples/MassesWithSpringsComparison.py) object:\n\n```python\nimport numpy as np\nfrom PyDiffGame.examples.MassesWithSpringsComparison import MassesWithSpringsComparison\n\nN = 2\nk = 10\nm = 50\nr = 1\nepsilon_x = 10e-8\nepsilon_P = 10e-8\nq = [[500, 2000], [500, 250]]\n\nx_0 = np.array([10 * i for i in range(1, N + 1)] + [0] * N)\nx_T = x_0 * 10 if N == 2 else np.array([(10 * i) ** 3 for i in range(1, N + 1)] + [0] * N)\nT_f = 25\n\nmasses_with_springs = MassesWithSpringsComparison(N=N,\n                                                  m=m,\n                                                  k=k,\n                                                  q=q,\n                                                  r=r,\n                                                  x_0=x_0,\n                                                  x_T=x_T,\n                                                  T_f=T_f,\n                                                  epsilon_x=epsilon_x,\n                                                  epsilon_P=epsilon_P)\n```\n\nConsider the constructor of the class `MassesWithSpringsComparison`:\n\n```python\nimport numpy as np\nfrom typing import Sequence, Optional\n\nfrom PyDiffGame.PyDiffGame import PyDiffGame\nfrom PyDiffGame.PyDiffGameLQRComparison import PyDiffGameLQRComparison\nfrom PyDiffGame.Objective import GameObjective, LQRObjective\n\n\nclass MassesWithSpringsComparison(PyDiffGameLQRComparison):\n    def __init__(self,\n                 N: int,\n                 m: float,\n                 k: float,\n                 q: float | Sequence[float] | Sequence[Sequence[float]],\n                 r: float,\n                 Ms: Optional[Sequence[np.array]] = None,\n                 x_0: Optional[np.array] = None,\n                 x_T: Optional[np.array] = None,\n                 T_f: Optional[float] = None,\n                 epsilon_x: Optional[float] = PyDiffGame.epsilon_x_default,\n                 epsilon_P: Optional[float] = PyDiffGame.epsilon_P_default,\n                 L: Optional[int] = PyDiffGame.L_default,\n                 eta: Optional[int] = PyDiffGame.eta_default):\n        I_N = np.eye(N)\n        Z_N = np.zeros((N, N))\n\n        M_masses = m * I_N\n        K = k * (2 * I_N - np.array([[int(abs(i - j) == 1) for j in range(N)] for i in range(N)]))\n        M_masses_inv = np.linalg.inv(M_masses)\n\n        M_inv_K = M_masses_inv @ K\n\n        if Ms is None:\n            eigenvectors = np.linalg.eig(M_inv_K)[1]\n            Ms = [eigenvector.reshape(1, N) for eigenvector in eigenvectors]\n\n        A = np.block([[Z_N, I_N],\n                      [-M_inv_K, Z_N]])\n        B = np.block([[Z_N],\n                      [M_masses_inv]])\n\n        Qs = [np.diag([0.0] * i + [q] + [0.0] * (N - 1) + [q] + [0.0] * (N - i - 1))\n              if isinstance(q, (int, float)) else\n              np.diag([0.0] * i + [q[i]] + [0.0] * (N - 1) + [q[i]] + [0.0] * (N - i - 1)) for i in range(N)]\n\n        M = np.concatenate(Ms,\n                           axis=0)\n\n        assert np.all(np.abs(np.linalg.inv(M) - M.T) < 10e-12)\n\n        Q_mat = np.kron(a=np.eye(2),\n                        b=M)\n\n        Qs = [Q_mat.T @ Q @ Q_mat for Q in Qs]\n\n        Rs = [np.array([r])] * N\n        R_lqr = 1 / 4 * r * I_N\n        Q_lqr = q * np.eye(2 * N) if isinstance(q, (int, float)) else np.diag(2 * q)\n\n        state_variables_names = ['x_{' + str(i) + '}' for i in range(1, N + 1)] + \\\n                                ['\\\\dot{x}_{' + str(i) + '}' for i in range(1, N + 1)]\n        args = {'A': A,\n                'B': B,\n                'x_0': x_0,\n                'x_T': x_T,\n                'T_f': T_f,\n                'state_variables_names': state_variables_names,\n                'epsilon_x': epsilon_x,\n                'epsilon_P': epsilon_P,\n                'L': L,\n                'eta': eta}\n\n        lqr_objective = [LQRObjective(Q=Q_lqr,\n                                      R_ii=R_lqr)]\n        game_objectives = [GameObjective(Q=Q,\n                                         R_ii=R,\n                                         M_i=M_i) for Q, R, M_i in zip(Qs, Rs, Ms)]\n        games_objectives = [lqr_objective,\n                            game_objectives]\n\n        super().__init__(args=args,\n                         M=M,\n                         games_objectives=games_objectives,\n                         continuous=True)\n```\n\nFinally, consider calling the `masses_with_springs` object as follows:\n\n```python\noutput_variables_names = ['$\\\\frac{x_1 + x_2}{\\\\sqrt{2}}$',\n                          '$\\\\frac{x_2 - x_1}{\\\\sqrt{2}}$',\n                          '$\\\\frac{\\\\dot{x}_1 + \\\\dot{x}_2}{\\\\sqrt{2}}$',\n                          '$\\\\frac{\\\\dot{x}_2 - \\\\dot{x}_1}{\\\\sqrt{2}}$']\n\nmasses_with_springs(plot_state_spaces=True,\n                    plot_Mx=True,\n                    output_variables_names=output_variables_names,\n                    save_figure=True)\n```\n\nRefer \nThis will result in the following plot that compares the two systems performance for a differential game vs an LQR:\n\n<p align=\"center\">\n    <img align=top src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/src/PyDiffGame/examples/figures/2/2-players_large_1.png\" width=\"400\" height=\"300\"/>\n    <img align=top src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/src/PyDiffGame/examples/figures/2/LQR_large_1.png\" width=\"400\" height=\"300\"/>\n</p>\n\n\nAnd when tweaking the weights by setting\n\n```python\nqs = [[500, 5000]]\n```\n\nwe have: \n\n<p align=\"center\">\n    <img align=top src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/src/PyDiffGame/examples/figures/2/2-players_large_2.png\" width=\"400\" height=\"300\"/>\n    <img align=top src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/src/PyDiffGame/examples/figures/2/LQR_large_2.png\" width=\"400\" height=\"300\"/>\n</p>\n\n\n# Acknowledgments\n\nThis research was supported in part by the Helmsley Charitable Trust through the Agricultural, Biological and Cognitive Robotics Initiative and by the Marcus Endowment Fund both at Ben-Gurion University of the Negev, Israel.\nThis research was also supported by The Israeli Smart Transportation Research Center (ISTRC) by The Technion and Bar-Ilan Universities, Israel.\n\n<p align=\"center\">\n    <a href=\"https://istrc.net.technion.ac.il/\">\n    <img src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/images/Logo_ISTRC_Green_English.png\" width=\"180\"  alt=\"\"/>\n    </a>\n&emsp;\n&emsp;\n&emsp;\n&emsp;\n<a href=\"https://in.bgu.ac.il/en/Pages/default.aspx\">\n<img src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/images/BGU-logo-round.png\" width=\"150\"  alt=\"\"/>\n</a>\n&emsp;\n&emsp;\n&emsp;\n&emsp;\n<a href=\"https://in.bgu.ac.il/en/robotics/Pages/default.aspx\">\n<img src=\"https://raw.githubusercontent.com/krichelj/PyDiffGame/master/images/logo_abc.png\" width=\"180\"  alt=\"\"/>\n</a>\n</p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://shaykricheli.com/PyDiffGame/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDiffGame",
    "package_url": "https://pypi.org/project/PyDiffGame/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyDiffGame/",
    "project_urls": {
      "Bug Tracker": "https://github.com/krichelj/PyDiffGame/issues",
      "Homepage": "https://shaykricheli.com/PyDiffGame/"
    },
    "release_url": "https://pypi.org/project/PyDiffGame/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "PyDiffGame is a Python implementation of a Nash Equilibrium solution to Differential Games, based on a reduction of Game Hamilton-Bellman-Jacobi (GHJB) equations to Game Algebraic and Differential Riccati equations, associated with Multi-Objective Dynamical Control Systems",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17080398,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86bf54dda2ad8a65e255317db5cb8ebc4db68386d10dd03cb3921b9d59f65297",
          "md5": "276928708dc868d56cdddfdda8e70506",
          "sha256": "2661b026b1165daaf0f8c93514c8bed20497d43815987e66fadb91ccba90553d"
        },
        "downloads": -1,
        "filename": "PyDiffGame-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "276928708dc868d56cdddfdda8e70506",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25064,
        "upload_time": "2023-02-28T09:49:31",
        "upload_time_iso_8601": "2023-02-28T09:49:31.779211Z",
        "url": "https://files.pythonhosted.org/packages/86/bf/54dda2ad8a65e255317db5cb8ebc4db68386d10dd03cb3921b9d59f65297/PyDiffGame-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09a73bb550996822b2517f5eb546da515bc2ca2824373f16d5fefbd8a0ae387b",
          "md5": "2d5de072372e058886200f533e82b785",
          "sha256": "14a3ba83de93c1bb570338c2f36b7f432dde6b51173566f89b8b2675eb21c433"
        },
        "downloads": -1,
        "filename": "PyDiffGame-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d5de072372e058886200f533e82b785",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25277,
        "upload_time": "2023-02-28T09:49:34",
        "upload_time_iso_8601": "2023-02-28T09:49:34.032214Z",
        "url": "https://files.pythonhosted.org/packages/09/a7/3bb550996822b2517f5eb546da515bc2ca2824373f16d5fefbd8a0ae387b/PyDiffGame-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dda4a85314e4810a1a71d3dbf5e13535a8e69e56d15b859a1d8b9bbff83c258f",
          "md5": "1938c5d7cb336625c1f6ae8c7861ab6d",
          "sha256": "2f9968eac111c693aa16ff2ef5125246d9bd71e8061c39768c218445a7c3931a"
        },
        "downloads": -1,
        "filename": "PyDiffGame-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1938c5d7cb336625c1f6ae8c7861ab6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25058,
        "upload_time": "2023-02-28T10:49:10",
        "upload_time_iso_8601": "2023-02-28T10:49:10.832918Z",
        "url": "https://files.pythonhosted.org/packages/dd/a4/a85314e4810a1a71d3dbf5e13535a8e69e56d15b859a1d8b9bbff83c258f/PyDiffGame-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f1809299ff2fd084f376c07132a46abf0ad490124842114c45890e19a37767",
          "md5": "552f6a898d6c09fb3ef2168b5d0b55d8",
          "sha256": "da0cdc2d22c938f068f86e7624249084ff7fbd6ec3e81c8af82907ecba25e781"
        },
        "downloads": -1,
        "filename": "PyDiffGame-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "552f6a898d6c09fb3ef2168b5d0b55d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25271,
        "upload_time": "2023-02-28T10:49:13",
        "upload_time_iso_8601": "2023-02-28T10:49:13.107754Z",
        "url": "https://files.pythonhosted.org/packages/53/f1/809299ff2fd084f376c07132a46abf0ad490124842114c45890e19a37767/PyDiffGame-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dda4a85314e4810a1a71d3dbf5e13535a8e69e56d15b859a1d8b9bbff83c258f",
        "md5": "1938c5d7cb336625c1f6ae8c7861ab6d",
        "sha256": "2f9968eac111c693aa16ff2ef5125246d9bd71e8061c39768c218445a7c3931a"
      },
      "downloads": -1,
      "filename": "PyDiffGame-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1938c5d7cb336625c1f6ae8c7861ab6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25058,
      "upload_time": "2023-02-28T10:49:10",
      "upload_time_iso_8601": "2023-02-28T10:49:10.832918Z",
      "url": "https://files.pythonhosted.org/packages/dd/a4/a85314e4810a1a71d3dbf5e13535a8e69e56d15b859a1d8b9bbff83c258f/PyDiffGame-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53f1809299ff2fd084f376c07132a46abf0ad490124842114c45890e19a37767",
        "md5": "552f6a898d6c09fb3ef2168b5d0b55d8",
        "sha256": "da0cdc2d22c938f068f86e7624249084ff7fbd6ec3e81c8af82907ecba25e781"
      },
      "downloads": -1,
      "filename": "PyDiffGame-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "552f6a898d6c09fb3ef2168b5d0b55d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 25271,
      "upload_time": "2023-02-28T10:49:13",
      "upload_time_iso_8601": "2023-02-28T10:49:13.107754Z",
      "url": "https://files.pythonhosted.org/packages/53/f1/809299ff2fd084f376c07132a46abf0ad490124842114c45890e19a37767/PyDiffGame-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}