{
  "info": {
    "author": "Saul Dominguez",
    "author_email": "saulydominguez@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div align=\"center\">\n  <h1 align=\"center\">gql_schema_codegen</h1>\n  <h4 align=\"center\">Easily generate Python typings from a GrapqhQL schema.</h4>\n</div>\n\n<div align=\"center\">\n  <a align=\"center\" href=\"https://github.com/sauldom102?tab=followers\">\n    <img src=\"https://img.shields.io/github/followers/sauldom102?label=Follow%20%40sauldom102&style=social\" />\n  </a>\n</div>\n\n<br />\n\nLet's go straight to the point, here you can see a very simple input schema content and its corresponding output:\n\n<details>\n<summary><b>Input GraphQL schema</b></summary>\n\n```graphql\nschema {\n  query: Query\n  mutation: Mutation\n}\n\nenum UserType {\n  STAFF\n  ADMIN\n}\n\ntype User {\n  id: ID!\n  email: String\n  username: String!\n  first_name: String!\n  last_name: String!\n  full_name: String!\n  dob: String @date(format: \"%Y-%m-%d\")\n  type: UserType!\n  people: [String]\n}\n\ntype Query {\n  me: User!\n}\n\ninput SignUpInput {\n  email: String!\n  username: String!\n  first_name: String!\n  last_name: String!\n  password: String!\n}\n\ninput LoginInput {\n  identifier: String!\n  password: String!\n}\n\ntype Mutation {\n  login(input: LoginInput!): User!\n  signUp(input: SignUpInput!): User!\n  logout: Boolean\n}\n```\n</details>\n\n<details>\n  <summary><b>Output Python typings</b></summary>\n\n```python\nfrom enum import Enum\nfrom typing import ClassVar, List, Optional, TypedDict\n\n\nUserType = Enum('UserType', 'STAFF ADMIN')\n\n\nUser = TypedDict('User', {\n  'id': str,\n  'email': Optional[str],\n  'username': str,\n  'first_name': str,\n  'last_name': str,\n  'full_name': str,\n  'dob': Optional[str],\n  'type': 'UserType',\n  'people': Optional[List[str]],\n})\n\n\nQuery = TypedDict('Query', {\n  'me': 'MeQueryResult',\n})\n\n\nMeQueryResult = ClassVar['User']\n\n\nMutation = TypedDict('Mutation', {\n  'login': 'LoginMutationResult',\n  'signUp': 'SignUpMutationResult',\n  'logout': 'LogoutMutationResult',\n})\n\n\nLoginParams = TypedDict('LoginParams', {\n  'input': 'LoginInput',\n})\n\n\nLoginMutationResult = ClassVar['User']\n\n\nSignUpParams = TypedDict('SignUpParams', {\n  'input': 'SignUpInput',\n})\n\n\nSignUpMutationResult = ClassVar['User']\n\n\nLogoutMutationResult = bool\n\n\nSignUpInput = TypedDict('SignUpInput', {\n  'email': str,\n  'username': str,\n  'first_name': str,\n  'last_name': str,\n  'password': str,\n})\n\n\nLoginInput = TypedDict('LoginInput', {\n  'identifier': str,\n  'password': str,\n})\n```\n</details>\n\nThere are some more complex examples available under [tests](tests) if you are curious about how accurate is this tool.\n\n## Motivation\n\nWhile I was trying out [Ariadne](https://ariadnegraphql.org/) (a library for implementing GraphQL servers using schema-first approach) and writing the resolvers for the queries and mutations that I defined in my GraphQL schema, I was missing the ability to define the types for the params and the return values.\nI hope this library helps some devs to write better typed resolvers for their projects, while keeping the resolvers code synced with the schema definition.\n\n<details>\n  <summary><b>Ariadne example with typed resolvers</b></summary>\n  \n  ```python\nfrom typing_extensions import Unpack\nfrom graphql import GraphQLResolveInfo\nfrom ..snapshots.test_schema import LoginParams, LoginMutationResult, MeQueryResult, SignUpParams, SignUpMutationResult, LogoutMutationResult, User, UserType\nfrom ariadne import QueryType, MutationType\n\n\nmocked_user: User = {\n    'id': '1',\n    'email': 'saulydominguez@gmail.com',\n    'dob': '28/05/1999',\n    'first_name': 'Saul',\n    'last_name': 'Dominguez',\n    'full_name': 'Saul Dominguez',\n    'username': 'saulydominguez',\n    'people': [],\n    'type': UserType.ADMIN\n}\n\nquery = QueryType()\n\n\n@query.field('me')\ndef resolve_me(obj, info: GraphQLResolveInfo) -> MeQueryResult:\n    # implementation to obtain current user\n    return mocked_user\n\n\nmutation = MutationType()\n\n\n@mutation.field('login')\ndef resolve_login(_, info: GraphQLResolveInfo, **params: Unpack[LoginParams]) -> LoginMutationResult:\n    _input = params['input']\n    # you can use typed _input var down here\n\n    # login implementation\n    return mocked_user\n\n\n@mutation.field('signUp')\ndef resolve_sign_up(_, info: GraphQLResolveInfo, **params: Unpack[SignUpParams]) -> SignUpMutationResult:\n    # login implementation\n    return mocked_user\n\n\n@mutation.field('logout')\ndef resolve_logout(_, info: GraphQLResolveInfo) -> LogoutMutationResult:\n    # logout implementation\n    return True\n```\n</details>\n\n\n## Installation\n\nYou can easily install it via pip:\n\n```bash\n$ pip install gql_schema_codegen\n```\n\n## Usage\n\nThree use cases depending on where the GraphQL schema is defined:\n\n### 1. Generate types from a single schema file\n\nThis is the simplest case, you have just a single file with all the types declared there.\n\n```bash\n$ python -m gql_schema_codegen -p ./schema.graphql -t ./schema_types.py\n```\n\n###  2. Generate types from a remote GraphQL server\n\nYou have deployed a GraphQL server with introspection enabled, you can just provide a link to that server and this tool will do its job.\n\n```bash\n$ python -m gql_schema_codegen -u https://gitlab.com/api/graphql -t ./schema_types.py\n```\n\n⚠️ For now, it only works with public schemas, without any authentication required. I will be adding support for this soon.\n\n###  3. Generate types from different schema files in a directory\n\nIt's a common thing that you don't have your schema definition centralized in a single file but in multiple ones instead, if that's your case you can provide that directory path where all the graphql/gql files are located and this tool will find them and merge them into a single schema to process it later on.\n\n```bash\n$ python -m gql_schema_codegen -p ./dir_with_gql_types -t ./schema_types.py\n```\n\nIf you just need more info about how to run it:\n\n```bash\n$ python -m gql_schema_codegen --help\nusage: __main__.py [-h] [--schema-path SCHEMA_PATH] [--schema-url SCHEMA_URL] [--to-path TO_PATH] [--config-file CONFIG_FILE]\n\nGenerate python file with types from a GraphQL schema file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --schema-path SCHEMA_PATH, -p SCHEMA_PATH\n                        path of the schema file (default: schema.graphql)\n  --schema-url SCHEMA_URL, -u SCHEMA_URL\n                        url of the schema\n  --to-path TO_PATH, -t TO_PATH\n                        wanted output file path (default: schema_types.py)\n  --config-file CONFIG_FILE, -c CONFIG_FILE\n                        path of the config file in yaml format (default: gql_schema_codegen.config.yml)\n```\n\n\n#### Custom scalars support\n\nBy default, scalars found in your schema will be generated as `Any`, if you already know the types for these scalars you can create a custom config file and define these types there:\n\n```yaml\nscalars:\n  DateTime: str\n  Time: str\n  BigInt: int\n  BoardID: int\n  Duration: DesignFields\n```\n\nNotice how you can also set another type from your schema (or a Python class) as custom value for your scalar.\n\n## Tests\n\nThey are simple snapshot tests, they work by comparing the output with the expected output, each test corresponds to a file stored under `tests/snapshots`.\nYou will find different tests declared in the `tests` directory.\nIf you want to run them you need to install the [`pytest-snapshot`](https://pypi.org/project/pytest-snapshot/) module first. Then, you can run them with:\n\n```bash\n$ pytest --snapshot-update\n```\n\nYou can also run a specific test this way:\n\n```bash\n$ pytest --snapshot-update -k \"test_pokeapi_schema_snapshot\"\n```\n\n##  Contribution\n\nFeel free to open some issues and/or pull requests if you want to participate in the development of this module, either just by proposing changes or by actively participating with code. At the moment of writing this, I have at least a couple of ideas planned to improve the way this generator works. ✨\n\n## Support\n\nIf you like the work I do and want to support me, you can do it below:\n\n<a href=\"https://www.buymeacoffee.com/sauldom102\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\n##  License\n\nMIT\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sauldom102/gql_schema_codegen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gql-schema-codegen",
    "package_url": "https://pypi.org/project/gql-schema-codegen/",
    "platform": null,
    "project_url": "https://pypi.org/project/gql-schema-codegen/",
    "project_urls": {
      "Homepage": "https://github.com/sauldom102/gql_schema_codegen"
    },
    "release_url": "https://pypi.org/project/gql-schema-codegen/1.0.1/",
    "requires_dist": [
      "graphql-core (==3.2.0)",
      "graphqlclient (==0.2.4)",
      "argparse (==1.4.0)",
      "pytest-snapshot (==0.8.1)",
      "pytest (==7.1.1)",
      "PyYAML (==6.0)"
    ],
    "requires_python": "",
    "summary": "A module to generate Python typings from a GrapqhQL schema",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13324878,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e80bbd29aed8fe0c3a8a7947ccd5ad6065a3ea778e9702f3101eb1139e4542a3",
          "md5": "c87ea026c39e2aa7b0e84b4b38df5558",
          "sha256": "b7c39ab588a8146797d83c20515e537d59a1b07a20cadf7bdf7b3d9abdc780c3"
        },
        "downloads": -1,
        "filename": "gql_schema_codegen-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c87ea026c39e2aa7b0e84b4b38df5558",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16465,
        "upload_time": "2022-03-26T18:51:07",
        "upload_time_iso_8601": "2022-03-26T18:51:07.866661Z",
        "url": "https://files.pythonhosted.org/packages/e8/0b/bd29aed8fe0c3a8a7947ccd5ad6065a3ea778e9702f3101eb1139e4542a3/gql_schema_codegen-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b643b04bead710ada2470cfa66b810dbc932b13a3ea29cc2d3ce24668327e247",
          "md5": "9b1fea5fc4a71f9de1941a8540dbc9f5",
          "sha256": "37e171dfe6e78e2b72ae1b4ed8a5d554f7cc4c82b09bd31db8338eee0e677eb0"
        },
        "downloads": -1,
        "filename": "gql_schema_codegen-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9b1fea5fc4a71f9de1941a8540dbc9f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15341,
        "upload_time": "2022-03-26T18:51:10",
        "upload_time_iso_8601": "2022-03-26T18:51:10.198674Z",
        "url": "https://files.pythonhosted.org/packages/b6/43/b04bead710ada2470cfa66b810dbc932b13a3ea29cc2d3ce24668327e247/gql_schema_codegen-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff06c2eb2df124b31a9f19e7df33106c2f716ec4807fda30c09f4c07dbd89eaf",
          "md5": "136b75e4bee724ad708a1c5434b27a29",
          "sha256": "71cf8047097f6d0b118cfc5aaf2ba357d491ed2990995a886aec76d18b1ab7ce"
        },
        "downloads": -1,
        "filename": "gql_schema_codegen-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "136b75e4bee724ad708a1c5434b27a29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16498,
        "upload_time": "2022-03-28T17:48:13",
        "upload_time_iso_8601": "2022-03-28T17:48:13.507266Z",
        "url": "https://files.pythonhosted.org/packages/ff/06/c2eb2df124b31a9f19e7df33106c2f716ec4807fda30c09f4c07dbd89eaf/gql_schema_codegen-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d3e2336f3a3d6faa3ef975abb5ecccdc999c4670ebb3dca3e52ed346be3aff6",
          "md5": "dc36632dda4e0266194d02ddd1757a99",
          "sha256": "63773ab261ef7b68a7e258f29fa0a9d8e43b50eb85c00b7d032a674cc7f2ac16"
        },
        "downloads": -1,
        "filename": "gql_schema_codegen-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc36632dda4e0266194d02ddd1757a99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15184,
        "upload_time": "2022-03-28T17:48:15",
        "upload_time_iso_8601": "2022-03-28T17:48:15.464348Z",
        "url": "https://files.pythonhosted.org/packages/2d/3e/2336f3a3d6faa3ef975abb5ecccdc999c4670ebb3dca3e52ed346be3aff6/gql_schema_codegen-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff06c2eb2df124b31a9f19e7df33106c2f716ec4807fda30c09f4c07dbd89eaf",
        "md5": "136b75e4bee724ad708a1c5434b27a29",
        "sha256": "71cf8047097f6d0b118cfc5aaf2ba357d491ed2990995a886aec76d18b1ab7ce"
      },
      "downloads": -1,
      "filename": "gql_schema_codegen-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "136b75e4bee724ad708a1c5434b27a29",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16498,
      "upload_time": "2022-03-28T17:48:13",
      "upload_time_iso_8601": "2022-03-28T17:48:13.507266Z",
      "url": "https://files.pythonhosted.org/packages/ff/06/c2eb2df124b31a9f19e7df33106c2f716ec4807fda30c09f4c07dbd89eaf/gql_schema_codegen-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d3e2336f3a3d6faa3ef975abb5ecccdc999c4670ebb3dca3e52ed346be3aff6",
        "md5": "dc36632dda4e0266194d02ddd1757a99",
        "sha256": "63773ab261ef7b68a7e258f29fa0a9d8e43b50eb85c00b7d032a674cc7f2ac16"
      },
      "downloads": -1,
      "filename": "gql_schema_codegen-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dc36632dda4e0266194d02ddd1757a99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15184,
      "upload_time": "2022-03-28T17:48:15",
      "upload_time_iso_8601": "2022-03-28T17:48:15.464348Z",
      "url": "https://files.pythonhosted.org/packages/2d/3e/2336f3a3d6faa3ef975abb5ecccdc999c4670ebb3dca3e52ed346be3aff6/gql_schema_codegen-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}