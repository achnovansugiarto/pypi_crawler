{
  "info": {
    "author": "OnlyDust",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent"
    ],
    "description": "<div align=\"center\">\n  <h1 align=\"center\">Cairo Streams</h1>\n  <p align=\"center\">\n    <a href=\"https://discord.gg/onlydust\">\n        <img src=\"https://img.shields.io/badge/Discord-6666FF?style=for-the-badge&logo=discord&logoColor=white\">\n    </a>\n    <a href=\"https://twitter.com/intent/follow?screen_name=onlydust_xyz\">\n        <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?style=for-the-badge&logo=twitter&logoColor=white\">\n    </a>       \n  </p>\n  \n  <h3 align=\"center\">Array stream library written in pure Cairo</h3>\n</div>\n\n---\n\n> ### ⚠️ WARNING! ⚠️\n>\n> This repo contains highly experimental code.\n> Expect rapid iteration.\n> **Use at your own risk.**\n\n\n## Installation\n\n### If you are using [Protostar](https://docs.swmansion.com/protostar/)\n\n```bash\nprotostar install https://github.com/onlydustxyz/cairo-streams\n```\n\n### If you are using [StarkNet with a Python env](https://starknet.io/docs/quickstart.html) or [Nile](https://github.com/OpenZeppelin/nile)\n\n```bash\npip install onlydust-cairo-streams\n```\n\n## Usage\n\nTo import the library in a cairo file, add this line:\n\n```cairo\nfrom onlydust.stream.default_implementation import stream\n```\n\n## Default implementations\n\n### foreach\n\nThe foreach() method executes a provided function once for each array element.\n\nSignature:\n```cairo\nfunc foreach(function : codeoffset, array_len : felt, array : felt*)\n```\n\nThe provided function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(index : felt, element : felt*)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nfunc test_foreach{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : felt*) = alloc()\n    assert array[0] = 1\n    assert array[1] = 1\n    assert array[2] = 1\n    assert array[3] = 7\n\n    stream.foreach(do_something, 4, array)\n\n    return ()\nend\n\nfunc do_something{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(index : felt, el : felt*):\n    ...\n    return ()\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_foreach.cairo) for a full working example.\n</details>\n\n### foreach_struct\n\nThe foreach_struct() method executes a provided function once for each array element. Unlike foreach(), the array can be an array of structs.\n\nSignature:\n```cairo\nfunc foreach_struct(function : codeoffset, array_len : felt, array : felt*, element_size : felt)\n```\n\nAssuming the struct is named `Foo`, the provided function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(index : felt, el : Foo*)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nstruct Foo:\n    member x : felt\n    member y : felt\nend\n\nfunc test_foreach_struct{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : Foo*) = alloc()\n    assert array[0] = Foo(1, 10)\n    assert array[1] = Foo(1, 10)\n    assert array[2] = Foo(2, 20)\n    assert array[3] = Foo(7, 70)\n\n    stream.foreach_struct(do_something, 4, array, Foo.SIZE)\n\n    return ()\nend\n\nfunc do_something{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(el : Foo*):\n    ...\n    return ()\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_foreach.cairo) for a full working example.\n</details>\n\n### filter\n\nThe filter() method executes a \"filtering\" callback function on each element of the array and keep only the elements that match.\n\nSignature:\n```cairo\nfunc filter(function : codeoffset, array_len : felt, array : felt*) -> (filtered_array_len : felt, filtered_array : felt*)\n```\n\nThe callback function must return `0` or `1` and must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(el : felt) -> (keep : felt)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nfunc test_filter{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : felt*) = alloc()\n    assert array[0] = 1\n    assert array[1] = 2\n    assert array[2] = 8\n    assert array[3] = 7\n\n    let (local filtered_array_len : felt, filtered_array : felt*) = stream.filter(\n        keep_even, 4, array\n    )\n\n    assert 2 = filtered_array_len\n    assert 2 = filtered_array[0]\n    assert 8 = filtered_array[1]\n\n    return ()\nend\n\nfunc keep_even{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(el : felt) -> (\n    keep : felt\n):\n    let (_, rest) = unsigned_div_rem(el, 2)\n    return (1 - rest)\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_filter.cairo) for a full working example.\n</details>\n\n\n### filter_struct\n\nThe filter_struct() method executes a \"filtering\" callback function on each element of the array and keep only the elements that match.\nUnlike filter(), the array can be an array of structs.\n\nSignature:\n```cairo\nfunc filter_struct(function : codeoffset, array_len : felt, array : felt*, element_size : felt) -> (filtered_array_len : felt, filtered_array : felt*)\n```\n\nAssuming the struct is named `Foo`, the callback function must return `0` or `1` and must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(el : Foo*) -> (keep : felt)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nstruct Foo:\n    member x : felt\n    member y : felt\nend\n\nfunc test_filter_struct{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : Foo*) = alloc()\n    assert array[0] = Foo(1, 1)\n    assert array[1] = Foo(1, 0)\n    assert array[2] = Foo(2, 8)\n    assert array[3] = Foo(7, 4)\n\n    let (local filtered_array_len : felt, filtered_array : Foo*) = stream.filter_struct(\n        keep_even_foo, 4, array, Foo.SIZE\n    )\n\n    assert 2 = filtered_array_len\n    assert Foo(1, 1) = filtered_array[0]\n    assert Foo(2, 8) = filtered_array[1]\n\n    return ()\nend\n\nfunc keep_even_foo{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\n    el : Foo*\n) -> (keep : felt):\n    tempvar sum = el.x + el.y\n    let (_, rest) = unsigned_div_rem(sum, 2)\n    return (1 - rest)\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_filter.cairo) for a full working example.\n</details>\n\n\n### map\n\nThe map() method executes a \"mapping\" callback function on each element of the array and store the returned value in-place of the processed element.\n\nSignature:\n```cairo\nfunc map(function : codeoffset, array_len : felt, array : felt*) -> (mapped_array : felt*)\n```\n\nThe callback function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(value : felt) -> (result : felt)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nfunc test_map{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : felt*) = alloc()\n    assert array[0] = 1\n    assert array[1] = 2\n    assert array[2] = 3\n    assert array[3] = 4\n\n    let (array) = stream.map(double, 4, array)\n\n    assert 2 = array[0]\n    assert 4 = array[1]\n    assert 6 = array[2]\n    assert 8 = array[3]\n\n    return ()\nend\n\nfunc double{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(value : felt) -> (\n    result : felt\n):\n    return (result=value * 2)\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_map.cairo) for a full working example.\n</details>\n\n\n### map_struct\n\nThe map_struct() method executes a \"mapping\" callback function on each element of the array and store the returned value in-place of the processed element.\nUnlike map(), the array can be an array of structs.\n\nSignature:\n```cairo\nfunc map_struct(function : codeoffset, array_len : felt, array : felt*, element_size : felt) -> (mapped_array : felt*)\n```\n\nThe callback function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(foo : Foo*) -> (result : Foo*)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nstruct Foo:\n    member x : felt\n    member y : felt\nend\n\nfunc test_map_struct{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : Foo*) = alloc()\n    assert array[0] = Foo(1, 10)\n    assert array[1] = Foo(2, 20)\n    assert array[2] = Foo(3, 30)\n    assert array[3] = Foo(4, 40)\n\n    let (local array : Foo*) = stream.map_struct(double_foo, 4, array, Foo.SIZE)\n\n    assert Foo(2, 20) = array[0]\n    assert Foo(4, 40) = array[1]\n    assert Foo(6, 60) = array[2]\n    assert Foo(8, 80) = array[3]\n\n    return ()\nend\n\nfunc double_foo{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(foo : Foo*) -> (\n    result : Foo*\n):\n    return (new Foo(foo.x * 2, foo.y * 2))\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_map.cairo) for a full working example.\n</details>\n\n\n### reduce\n\nThe reduce() method executes a \"reducer\" callback function on each element of the array.\n\nSignature:\n```cairo\nfunc reduce(function : codeoffset, array_len : felt, array : felt*) -> (res : felt)\n```\n\nThe callback function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(initial_value : felt, el : felt) -> (res : felt)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nfunc test_reduce{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n\n    let (local array : felt*) = alloc()\n    assert array[0] = 1\n    assert array[1] = 1\n    assert array[2] = 1\n    assert array[3] = 7\n\n    let (res) = stream.reduce(sum, 4, array)\n    assert res = 10\n\n    # Reading a storage var will fail if builtins haven't been properly updated\n    let (dummy) = dumb.read()\n\n    return ()\nend\n\nfunc sum{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\n    initial_value : felt, el : felt\n) -> (res : felt):\n    let res = initial_value + el\n    return (res)\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_reduce.cairo) for a full working example.\n</details>\n\n\n### reduce_struct\n\nThe reduce_struct() method executes a \"reducer\" callback function on each element of the array. Unlike reduce(), the array can be an array of structs.\n\nSignature:\n```cairo\nfunc reduce_struct(function : codeoffset, array_len : felt, array : felt*, element_size : felt) -> (res : felt*)\n```\n\nAssuming the struct is named `Foo`, the callback function must have this signature exactly (including implicit params):\n```cairo\nfunc whatever{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(initial_value : Foo*, element : Foo*) -> (res : Foo*)\n```\n\n<details>\n  <summary>Example</summary>\n\n```cairo\nstruct Foo:\n    member x : felt\n    member y : felt\nend\n\nfunc test_reduce_struct{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}():\n    alloc_locals\n    let (local array : Foo*) = alloc()\n    assert array[0] = Foo(1, 10)\n    assert array[1] = Foo(1, 10)\n    assert array[2] = Foo(2, 20)\n    assert array[3] = Foo(7, 70)\n\n    let (res : Foo*) = stream.reduce_struct(\n        function=sum_foo, array_len=4, array=array, element_size=Foo.SIZE\n    )\n    assert 11 = res.x\n    assert 110 = res.y\n\n    # Reading a storage var will fail if builtins haven't been properly updated\n    let (dummy) = dumb.read()\n\n    return ()\nend\n\nfunc sum_foo{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\n    initial_value : Foo*, element : Foo*\n) -> (res : Foo*):\n    return (new Foo(initial_value.x + element.x, initial_value.y + element.y))\nend\n```\n\nLook [here](./src/onlydust/stream/tests/test_reduce.cairo) for a full working example.\n</details>\n\n\n## Custom implementations\n\nYou can implement your own functions, with custom implicit arguments, using the generic functions provided by the library:\n\n```cairo\nfrom onlydust.stream.generic import generic\n```\n\nTo see implementation examples, the best is to look at the [default implementations](./src/onlydust/stream/default_implementation.cairo).\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/onlydustxyz/cairo-streams",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "onlydust-cairo-streams",
    "package_url": "https://pypi.org/project/onlydust-cairo-streams/",
    "platform": "any",
    "project_url": "https://pypi.org/project/onlydust-cairo-streams/",
    "project_urls": {
      "Homepage": "https://github.com/onlydustxyz/cairo-streams"
    },
    "release_url": "https://pypi.org/project/onlydust-cairo-streams/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Array stream library written in pure Cairo",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13998535,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "772021e814778554aab0919999019883321e570aa4b3b2743e8551f18eda81a8",
          "md5": "b4ecbe4bde7b2ae12f8d12499483ded4",
          "sha256": "d5af8902d8c21e3bdc44c45fc8aa04995a7e289c4202d0bd92d057c34bfdbc20"
        },
        "downloads": -1,
        "filename": "onlydust_cairo_streams-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4ecbe4bde7b2ae12f8d12499483ded4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14716,
        "upload_time": "2022-06-01T09:57:00",
        "upload_time_iso_8601": "2022-06-01T09:57:00.218222Z",
        "url": "https://files.pythonhosted.org/packages/77/20/21e814778554aab0919999019883321e570aa4b3b2743e8551f18eda81a8/onlydust_cairo_streams-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36c2ce1ef4721734adf330a10c6fc70c405722630d5cdb8e4a3f8fc85e739f69",
          "md5": "d1687da50ef96886018610a7b4956da1",
          "sha256": "50b6385ab1b9178e7d236d06dde834366169bcac61bc8c4d43f60c29b779c6fd"
        },
        "downloads": -1,
        "filename": "onlydust-cairo-streams-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d1687da50ef96886018610a7b4956da1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10621,
        "upload_time": "2022-06-01T09:57:01",
        "upload_time_iso_8601": "2022-06-01T09:57:01.919263Z",
        "url": "https://files.pythonhosted.org/packages/36/c2/ce1ef4721734adf330a10c6fc70c405722630d5cdb8e4a3f8fc85e739f69/onlydust-cairo-streams-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "772021e814778554aab0919999019883321e570aa4b3b2743e8551f18eda81a8",
        "md5": "b4ecbe4bde7b2ae12f8d12499483ded4",
        "sha256": "d5af8902d8c21e3bdc44c45fc8aa04995a7e289c4202d0bd92d057c34bfdbc20"
      },
      "downloads": -1,
      "filename": "onlydust_cairo_streams-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4ecbe4bde7b2ae12f8d12499483ded4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14716,
      "upload_time": "2022-06-01T09:57:00",
      "upload_time_iso_8601": "2022-06-01T09:57:00.218222Z",
      "url": "https://files.pythonhosted.org/packages/77/20/21e814778554aab0919999019883321e570aa4b3b2743e8551f18eda81a8/onlydust_cairo_streams-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36c2ce1ef4721734adf330a10c6fc70c405722630d5cdb8e4a3f8fc85e739f69",
        "md5": "d1687da50ef96886018610a7b4956da1",
        "sha256": "50b6385ab1b9178e7d236d06dde834366169bcac61bc8c4d43f60c29b779c6fd"
      },
      "downloads": -1,
      "filename": "onlydust-cairo-streams-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d1687da50ef96886018610a7b4956da1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10621,
      "upload_time": "2022-06-01T09:57:01",
      "upload_time_iso_8601": "2022-06-01T09:57:01.919263Z",
      "url": "https://files.pythonhosted.org/packages/36/c2/ce1ef4721734adf330a10c6fc70c405722630d5cdb8e4a3f8fc85e739f69/onlydust-cairo-streams-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}