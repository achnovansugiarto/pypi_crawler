{
  "info": {
    "author": "Antonio Silletti, Elio Musacchio, Roberta Sallustio",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "<p align=\"center\">\r\n    <img src=\"https://user-images.githubusercontent.com/26851363/172485577-be6993ef-47c3-4b3c-9187-4988f6c44d94.svg\" alt=\"ClayRS logo\" style=\"width:75%;\"/>\r\n</p>\r\n\r\n\r\n# ClayRS\r\n\r\n[![Build Status](https://github.com/swapUniba/ClayRS/actions/workflows/testing_pipeline.yml/badge.svg)](https://github.com/swapUniba/ClayRS/actions/workflows/testing_pipeline.yml)&nbsp;&nbsp;\r\n[![Docs](https://github.com/swapUniba/ClayRS/actions/workflows/docs_building.yml/badge.svg)](https://swapuniba.github.io/ClayRS/)&nbsp;&nbsp;\r\n[![codecov](https://codecov.io/gh/swapUniba/ClayRS/branch/master/graph/badge.svg?token=dftmT3QD8D)](https://codecov.io/gh/swapUniba/ClayRS)&nbsp;&nbsp;\r\n[![Python versions](https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9-blue)](https://www.python.org/downloads/)\r\n\r\n\r\n***ClayRS*** is a python framework for (mainly) content-based recommender systems which allows you to perform several operations, starting from a raw representation of users and items to building and evaluating a recommender system. It also supports graph-based recommendation with feature selection algorithms and graph manipulation methods.\r\n\r\nThe framework has three main modules, which you can also use individually:\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://user-images.githubusercontent.com/26851363/164490523-00d60efd-7b17-4d20-872a-28eaf2323b03.png\" alt=\"ClayRS\" style=\"width:75%;\"/>\r\n</p>\r\n\r\nGiven a raw source, the ***Content Analyzer***:\r\n* Creates and serializes contents,\r\n* Using the chosen configuration\r\n\r\nThe ***RecSys*** module allows to:\r\n* Instantiate a recommender system\r\n    * *Using items and users serialized by the Content Analyzer*\r\n* Make score *prediction* or *recommend* items for the active user(s)\r\n\r\nThe ***EvalModel*** has the task of evaluating a recommender system, using several state-of-the-art metrics\r\n\r\nCode examples for all three modules will follow in the *Usage* section\r\n\r\n## Installation\r\n*ClayRS* requires Python **3.7** or later, while package dependencies are in `requirements.txt` and are all installable\r\nvia `pip`, as *ClayRS* itself.\r\n\r\nTo install it execute the following command:\r\n\r\n``\r\npip install clayrs\r\n``\r\n\r\n## Usage\r\n\r\n### Content Analyzer\r\nThe first thing to do is to import the Content Analyzer module\r\n* We will access its methods and classes via dot notation\r\n```python\r\nimport clayrs.content_analyzer as ca\r\n```\r\n\r\nThen, let's point to the source containing raw information to process\r\n```python\r\nraw_source = ca.JSONFile('items_info.json')\r\n```\r\n\r\nWe can now start building the configuration for the items\r\n\r\n* Note that same operations that can be specified for *items*, could be also specified for *users*, via the\r\n`ca.UserAnalyzerConfig` class\r\n\r\n```python\r\n# Configuration of item representation\r\nmovies_ca_config = ca.ItemAnalyzerConfig(\r\n    source=raw_source,\r\n    id='movielens_id',  # id which uniquely identifies each item\r\n    output_directory='movies_codified/'  # where items complexly represented will be stored\r\n)\r\n```\r\n\r\nLet's represent the *plot* field of each content with a TfIdf representation\r\n\r\n* Since the `preprocessing` parameter has been specified, then each field is first preprocessed with the specified\r\noperations\r\n```python\r\nmovies_ca_config.add_single_config(\r\n    'plot',\r\n    ca.FieldConfig(ca.SkLearnTfIdf(),\r\n                   preprocessing=ca.NLTK(stopwords_removal=True,\r\n                                         lemmatization=True),\r\n                   id='tfidf')  # Custom id\r\n)\r\n```\r\n\r\nTo finalize the Content Analyzer part, let's instantiate the `ContentAnalyzer` class by passing the built configuration\r\nand by calling its `fit()` method\r\n\r\n* The items will be created with the specified representations and serialized\r\n```python\r\nca.ContentAnalyzer(movies_ca_config).fit()\r\n```\r\n\r\n### RecSys\r\nSimilarly above, we must first import the RecSys module\r\n```python\r\nimport clayrs.recsys as rs\r\n```\r\n\r\nThen we load the rating frame from a TSV file\r\n\r\n* In this case in our file the first three columns are user_id, item_id, score in this order\r\n  * If your file has a different structure you must specify how to map the column via parameters, check documentation\r\n  for more\r\n\r\n```python\r\nratings = ca.Ratings(ca.CSVFile('ratings.tsv', separator='\\t'))\r\n```\r\n\r\nLet's split with the KFold technique the loaded rating frame into train set and test set\r\n\r\n* since `n_splits=2`, train_list will contain two *train_sets* and test_list will contain two *test_sets*\r\n```python\r\ntrain_list, test_list = rs.KFoldPartitioning(n_splits=2).split_all(ratings)\r\n```\r\n\r\nIn order to recommend items to users, we must choose an algorithm to use\r\n\r\n* In this case we are using the `CentroidVector` algorithm which will work by using the first representation\r\nspecified for the *plot* field\r\n* You can freely choose which representation to use among all representation codified for the fields in the Content\r\nAnalyzer phase\r\n* \r\n```python\r\ncentroid_vec = rs.CentroidVector(\r\n    {'plot': 'tfidf'},\r\n  \r\n    similarity=rs.CosineSimilarity()\r\n)\r\n```\r\n\r\nLet's now compute the top-10 ranking for each user of the train set\r\n* By default the candidate items are those in the test set of the user, but you can change this behaviour with the\r\n`methodology` parameter\r\n\r\nSince we used the kfold technique, we iterate over the train sets and test sets\r\n```python\r\nresult_list = []\r\n\r\nfor train_set, test_set in zip(train_list, test_list):\r\n  \r\n  cbrs = rs.ContentBasedRS(centroid_vec, train_set, 'movies_codified/')\r\n  rank = cbrs.fit_rank(test_set, n_recs=10)\r\n\r\n  result_list.append(rank)\r\n```\r\n\r\n### EvalModel\r\nSimilarly to the Content Analyzer and RecSys module, we must first import the evaluation module\r\n```python\r\nimport clayrs.evaluation as eva\r\n```\r\n\r\nThe Evaluation module needs the following parameters:\r\n\r\n*   A list of computed rank/predictions (in case multiple splits must be evaluated)\r\n*   A list of truths (in case multiple splits must be evaluated)\r\n*   List of metrics to compute\r\n\r\nObviously the list of computed rank/predictions and list of truths must have the same length,\r\nand the rank/prediction in position <img src=\"https://render.githubusercontent.com/render/math?math=i\"> will be compared\r\nwith the truth at position <img src=\"https://render.githubusercontent.com/render/math?math=i\">\r\n\r\n```python\r\nem = eva.EvalModel(\r\n    pred_list=result_list,\r\n    truth_list=test_list,\r\n    metric_list=[\r\n        eva.NDCG(),\r\n        eva.Precision(),\r\n        eva.RecallAtK(k=5)\r\n    ]\r\n)\r\n```\r\n\r\nThen simply call the `fit()` method of the instantiated object\r\n* It will return two pandas DataFrame: the first one contains the metrics aggregated for the system,\r\nwhile the second contains the metrics computed for each user (where possible)\r\n\r\n```python\r\nsys_result, users_result =  em.fit()\r\n```\r\n\r\nNote that the EvalModel is able to compute evaluation of recommendations generated by other tools/frameworks, check\r\ndocumentation for more\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/swapUniba/ClayRS",
    "keywords": "recommender system,cbrs,evaluation,recsys",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clayrs",
    "package_url": "https://pypi.org/project/clayrs/",
    "platform": null,
    "project_url": "https://pypi.org/project/clayrs/",
    "project_urls": {
      "Homepage": "https://github.com/swapUniba/ClayRS"
    },
    "release_url": "https://pypi.org/project/clayrs/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Complexly represent contents, build recommender systems, evaluate them. All in one place!",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17244636,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70633a0bac03931f084bacef147c6b4107fdb96acbe28d8e0f7e62f1873856db",
          "md5": "ca94c88e99833819bcba821144536a73",
          "sha256": "1fbe0b513c5b048052477376289565450a7f508bd4539f75056ea6f6a22f6bcc"
        },
        "downloads": -1,
        "filename": "clayrs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca94c88e99833819bcba821144536a73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 209536,
        "upload_time": "2022-07-01T18:18:53",
        "upload_time_iso_8601": "2022-07-01T18:18:53.859186Z",
        "url": "https://files.pythonhosted.org/packages/70/63/3a0bac03931f084bacef147c6b4107fdb96acbe28d8e0f7e62f1873856db/clayrs-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19206e60fbd3409541f94d45defb61cfc4597217b04f8b3ca9c938eb3731dc84",
          "md5": "bf70b414ab969e0f3a9e188715db84df",
          "sha256": "e0494b1d19ad94a59d3902e818cd5fddd2856dddfcae23c85895feb87d2e13fe"
        },
        "downloads": -1,
        "filename": "clayrs-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bf70b414ab969e0f3a9e188715db84df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 209622,
        "upload_time": "2022-07-01T18:56:56",
        "upload_time_iso_8601": "2022-07-01T18:56:56.454896Z",
        "url": "https://files.pythonhosted.org/packages/19/20/6e60fbd3409541f94d45defb61cfc4597217b04f8b3ca9c938eb3731dc84/clayrs-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a374ba01ff019773f733c1b531c0033e8e20a31facb07561d3489330df37809b",
          "md5": "f6ae2a643a2993a276c0ede87a85875a",
          "sha256": "b7e38a1292ffa49f83131d980bf0923d2642d8a5d3496263d799c0f43debb163"
        },
        "downloads": -1,
        "filename": "clayrs-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f6ae2a643a2993a276c0ede87a85875a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 209755,
        "upload_time": "2022-07-27T08:47:04",
        "upload_time_iso_8601": "2022-07-27T08:47:04.250981Z",
        "url": "https://files.pythonhosted.org/packages/a3/74/ba01ff019773f733c1b531c0033e8e20a31facb07561d3489330df37809b/clayrs-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15ac2e77c40f82992723edaaa30db2975c40fb5231712810f5620932b5804fa9",
          "md5": "22e9073c63ca37fd9c0c41a9c6400211",
          "sha256": "3c054c9dcd6d943a0ef64381432bc498f75eb65fb7cfcce1a75b22f29595b8f3"
        },
        "downloads": -1,
        "filename": "clayrs-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22e9073c63ca37fd9c0c41a9c6400211",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 213931,
        "upload_time": "2022-09-20T11:38:25",
        "upload_time_iso_8601": "2022-09-20T11:38:25.697649Z",
        "url": "https://files.pythonhosted.org/packages/15/ac/2e77c40f82992723edaaa30db2975c40fb5231712810f5620932b5804fa9/clayrs-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da0c6b42aa960e34098761a3b04f02c313391701dbb201d8eb8e0c90698a65a5",
          "md5": "1265ce218922547d56aee1769a968b49",
          "sha256": "e35178dc835831ebd427ca94ece294ca944dff20e9c4683d7f9eafebfacbb845"
        },
        "downloads": -1,
        "filename": "clayrs-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1265ce218922547d56aee1769a968b49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 213996,
        "upload_time": "2022-09-20T14:39:17",
        "upload_time_iso_8601": "2022-09-20T14:39:17.484847Z",
        "url": "https://files.pythonhosted.org/packages/da/0c/6b42aa960e34098761a3b04f02c313391701dbb201d8eb8e0c90698a65a5/clayrs-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "094a1d64bbec797c74b378e005bb15383baacfff879eb26aba6209321bb7fd5c",
          "md5": "bee172df16e02e7e3b0a09f68c49a586",
          "sha256": "a1d27185b19b08ac43aaacaad6dfcf0a093bf2dbb3289657e296f65a2a3bc0b5"
        },
        "downloads": -1,
        "filename": "clayrs-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bee172df16e02e7e3b0a09f68c49a586",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 222785,
        "upload_time": "2022-10-18T23:12:56",
        "upload_time_iso_8601": "2022-10-18T23:12:56.425443Z",
        "url": "https://files.pythonhosted.org/packages/09/4a/1d64bbec797c74b378e005bb15383baacfff879eb26aba6209321bb7fd5c/clayrs-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4f80a4d88ec3a3a075851579d652253ce1244255e0229791e342ef3d802ad50",
          "md5": "060e35ff8f2ed9c8864a192344f27eae",
          "sha256": "d45a04c1d10a209fc0aa7b927b88402475876ebe7b4f0992e51ab26ab0dbaf71"
        },
        "downloads": -1,
        "filename": "clayrs-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "060e35ff8f2ed9c8864a192344f27eae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 222531,
        "upload_time": "2022-11-22T11:51:56",
        "upload_time_iso_8601": "2022-11-22T11:51:56.849337Z",
        "url": "https://files.pythonhosted.org/packages/d4/f8/0a4d88ec3a3a075851579d652253ce1244255e0229791e342ef3d802ad50/clayrs-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c820aeb05f314d581af284b74db33efe863d738b5794ad57ce6ff7741ee7817a",
          "md5": "65ee7831b6583ef85b4b4f810d8aeff1",
          "sha256": "5156a80f98f41dc1679c93e42f84c13c97599c461c64879efd5a7c0e8beb89ce"
        },
        "downloads": -1,
        "filename": "clayrs-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65ee7831b6583ef85b4b4f810d8aeff1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 225858,
        "upload_time": "2022-11-30T17:28:56",
        "upload_time_iso_8601": "2022-11-30T17:28:56.994777Z",
        "url": "https://files.pythonhosted.org/packages/c8/20/aeb05f314d581af284b74db33efe863d738b5794ad57ce6ff7741ee7817a/clayrs-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c820aeb05f314d581af284b74db33efe863d738b5794ad57ce6ff7741ee7817a",
        "md5": "65ee7831b6583ef85b4b4f810d8aeff1",
        "sha256": "5156a80f98f41dc1679c93e42f84c13c97599c461c64879efd5a7c0e8beb89ce"
      },
      "downloads": -1,
      "filename": "clayrs-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65ee7831b6583ef85b4b4f810d8aeff1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 225858,
      "upload_time": "2022-11-30T17:28:56",
      "upload_time_iso_8601": "2022-11-30T17:28:56.994777Z",
      "url": "https://files.pythonhosted.org/packages/c8/20/aeb05f314d581af284b74db33efe863d738b5794ad57ce6ff7741ee7817a/clayrs-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}