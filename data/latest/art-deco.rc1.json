{
  "info": {
    "author": "Cristian Matache",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Art Deco\r\n\r\n[//]: # \"add-your-build-status-badge-here\"\r\n\r\n[![Python package CI](https://github.com/cristianmatache/art-deco/actions/workflows/ci.yml/badge.svg)](https://github.com/cristianmatache/art-deco/actions/workflows/ci.yml)\r\n[![powered_by_alpha_build](https://img.shields.io/badge/Powered%20by%20-AlphaBuild-lightblue?style=flat&logo=CMake&logoColor=lightblue)\r\n](https://github.com/cristianmatache/alpha-build)\r\n[![Python 3.8+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)\r\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\r\n![pylint Score](https://mperlet.github.io/pybadge/badges/10.svg)\r\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\r\n\r\n## Description\r\n\r\nArt Deco is a library that, via decorators, makes complex processing of function/method arguments effortless.\r\nUse cases for `art_deco` include, but are not limited to:\r\n\r\n- data validation (e.g., validating the inputs of a function)\r\n- input conversion (e.g., type coercion based on type annotations)\r\n- deserializing / parsing (e.g., parse JSONs or decode MessagePack into Python objects based on type annotations)\r\n- caching\r\n\r\nThat is, this library shines when one needs to build a decorator that processes inputs based on:\r\nthe _inspected signature_ of the function arguments (e.g., needs access to argument names, type annotations,\r\ndefault values), or _runtime information_ like discerning whether an argument was called positionally or as a keyword,\r\nas part of a variable argument (i.e., `*args`, `**kwargs`) etc.\r\n\r\nTherefore, it works like a charm in conjunction with any data validation library (e.g.,\r\n`cerberus`, `pandera`) or any library that consumes data from the external world - network, Excel etc.\r\n(e.g., `flask`, `plotly dash`, `pyxll`, `xlwings`).\r\n\r\nMoreover, `art_deco` handles several Python language constructs:\r\n\r\n- functions, regular methods, static methods, class methods\r\n- sync and `async`\r\n- metaclasses and classes (regular classes, `dataclasses`, `attrs` classes, `pydantic` models and data classes)\r\n- variable arguments (i.e., `*args`, `**kwargs`)\r\n- positional only, keyword only arguments\r\n\r\nand provides:\r\n\r\n- `art_deco.core`: a fundamental layer based on which one can implement any argument processing logic.\r\n- `art_deco.hack_args`: a convenient, pre-packaged argument processor implemented on top of `art_deco.core`.\r\n\r\n## Getting Started\r\n\r\n### Installation\r\n\r\n```bash\r\npip install art_deco\r\n```\r\n\r\n### Hacking function arguments\r\n\r\nTo illustrate what can be achieved, let's start with a few toy usages of `art_deco.hack_args`.\r\n\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom art_deco.hack_args import marks\r\nfrom art_deco.hack_args.processor import hack_args\r\n\r\n@marks.arg_hacker\r\ndef hack_x(x: int | float | str) -> str:\r\n    \"\"\"Function used for data validation and type coercion.\"\"\"\r\n    assert float(x) < 100, f'Validation failed: {x} must be < 100'\r\n    return str(x) if isinstance(x, (int, float)) else x\r\n\r\n@hack_args({'x': hack_x})\r\ndef func(x):\r\n    \"\"\"Function with a processed argument.\"\"\"\r\n    return x\r\n\r\nassert func('1') == func(1) == '1'\r\n# func(200) ----> Errors with AssertionError, thanks to data validation\r\n```\r\n\r\nthe same thing can be achieved via the `Annotated` type hint:\r\n\r\n```python\r\nfrom typing_extensions import Annotated\r\n\r\n@hack_args()\r\ndef func(x: Annotated[str, hack_x]) -> str:\r\n    \"\"\"Function with a processed argument.\"\"\"\r\n    return x\r\n```\r\n\r\nTo validate more than one argument at a time:\r\n\r\n```python\r\nfrom art_deco.core.arg_processors.api import Context\r\n\r\n\r\n@marks.wide_validator\r\ndef validate_x_y(_: Context, x: str, y: str) -> None:\r\n  \"\"\"Validate 2 arguments.\"\"\"\r\n  # Context is an internal concept that allows users to use static information like the inspected signature or\r\n  # default values, as well as call runtime information like what arguments were called positionally.\r\n  if x.startswith('1'):\r\n    assert y.startswith('2'), f'Validation failed: {x} starts with 1, but {y} does not start with 2'\r\n\r\n\r\n@hack_args({'x': hack_x, 'y': hack_x, ('x', 'y'): validate_x_y})\r\ndef func(x, y):\r\n  \"\"\"Function with 2 processed arguments.\"\"\"\r\n  return f'x={x}, y={y}'\r\n\r\n\r\n# Similarly we could use `Annotated`\r\n@hack_args()\r\ndef func(x: Annotated[str, hack_x, validate_x_y], y: Annotated[str, hack_x, validate_x_y]) -> str:\r\n  \"\"\"Function with 2 processed arguments.\"\"\"\r\n  return f'x={x}, y={y}'\r\n```\r\n\r\n### Implementing a new argument processor\r\n\r\nIn `art_deco.core`, there are 2 types of argument processors:\r\n\r\n- **static:** initialized once, at function definition time, arguments to be processed are determined once as well,\r\n  while the actual argument processing happens every time the decorated function is called.\r\n- **dynamic:** initialized every time the decorated function is called, arguments to be processed and the actual\r\n  argument processing happen every time the decorated functions is called.\r\n\r\nLet's look at a static example, since a dynamic processor would have a nearly identical interface.\r\n\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom typing import Any, Mapping\r\n\r\nfrom art_deco.core.arg_processors.api import ArgNames, Context, MultiArgValidateFunc\r\nfrom art_deco.core.arg_processors.static_decorator import static_process_args\r\nfrom art_deco.core.specs.static_arg_specs import StaticArgSpecs\r\nfrom art_deco.core.specs.dynamic_arg_specs import DynamicArgSpec\r\n\r\nclass SimpleCastingProcessor:\r\n    def __init__(self, static_args: StaticArgSpecs) -> None:\r\n        self.static_args = static_args\r\n        self.hacks: dict[str, Any] = {}\r\n        for arg in static_args.args:\r\n            if arg.has_annotation:\r\n                self.hacks[arg.name] = arg.annotation\r\n\r\n    def should_process_arg(self, arg: str) -> bool:\r\n        \"\"\"Hook function called to determine whether to process an argument or not, always by name.\"\"\"\r\n        return arg in self.hacks\r\n\r\n    def process_arg(self, arg: DynamicArgSpec, _: Context) -> Any:\r\n        \"\"\"This function specifies how to actually process the argument.\"\"\"\r\n        if arg.is_default:  # If the value is the default one, do not run any casting\r\n            return arg.value\r\n        return self.hacks[arg.name](arg.value)  # Get the annotation for the argument name and coerce the supplied value\r\n\r\n    def get_wide_checks(self) -> Mapping[ArgNames, MultiArgValidateFunc]:  # No logic for \"wide\" checks.\r\n        return {}\r\n\r\n\r\n@static_process_args(SimpleCastingProcessor)\r\ndef coercion(x: int, y: float) -> float:\r\n    return x + y\r\n\r\nassert coercion('1', '2') == 3\r\nassert coercion('1', 2) == 3\r\nassert coercion(1, 2) == 3\r\n```\r\n\r\n## Development\r\n\r\nRead [CONTRIBUTING.md](CONTRIBUTING.md).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "art-deco",
    "package_url": "https://pypi.org/project/art-deco/",
    "platform": null,
    "project_url": "https://pypi.org/project/art-deco/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/art-deco/0.0.1/",
    "requires_dist": [
      "wrapt",
      "typing-extensions"
    ],
    "requires_python": ">=3.7",
    "summary": "Via decorators, make complex processing of function or method arguments effortless.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16177112,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f1838375ef818871f3c52172040ac6798f706d1486d5f4ce0cb39d8e9c576c",
          "md5": "f8eac839f391ee7f9067719abb4839c6",
          "sha256": "d78d5c309d95f36bdf4a168637b66afeb5ec7e922f95238db59292e3f869e781"
        },
        "downloads": -1,
        "filename": "art_deco-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8eac839f391ee7f9067719abb4839c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17939,
        "upload_time": "2022-12-21T20:31:18",
        "upload_time_iso_8601": "2022-12-21T20:31:18.751280Z",
        "url": "https://files.pythonhosted.org/packages/c0/f1/838375ef818871f3c52172040ac6798f706d1486d5f4ce0cb39d8e9c576c/art_deco-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6ca50b242d2a8f9a9862618bcfe89cf6ad9e91721ebaa7764c7be9003a012e1",
          "md5": "6f132bdbb29e7d63be6f93fe420527fc",
          "sha256": "0222e3983bd1df0aa59d8d1048b6f2e59ab0e589d6b0172ba94865f691b3fd9e"
        },
        "downloads": -1,
        "filename": "art_deco-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f132bdbb29e7d63be6f93fe420527fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15446,
        "upload_time": "2022-12-21T20:31:20",
        "upload_time_iso_8601": "2022-12-21T20:31:20.736324Z",
        "url": "https://files.pythonhosted.org/packages/e6/ca/50b242d2a8f9a9862618bcfe89cf6ad9e91721ebaa7764c7be9003a012e1/art_deco-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0f1838375ef818871f3c52172040ac6798f706d1486d5f4ce0cb39d8e9c576c",
        "md5": "f8eac839f391ee7f9067719abb4839c6",
        "sha256": "d78d5c309d95f36bdf4a168637b66afeb5ec7e922f95238db59292e3f869e781"
      },
      "downloads": -1,
      "filename": "art_deco-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f8eac839f391ee7f9067719abb4839c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17939,
      "upload_time": "2022-12-21T20:31:18",
      "upload_time_iso_8601": "2022-12-21T20:31:18.751280Z",
      "url": "https://files.pythonhosted.org/packages/c0/f1/838375ef818871f3c52172040ac6798f706d1486d5f4ce0cb39d8e9c576c/art_deco-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6ca50b242d2a8f9a9862618bcfe89cf6ad9e91721ebaa7764c7be9003a012e1",
        "md5": "6f132bdbb29e7d63be6f93fe420527fc",
        "sha256": "0222e3983bd1df0aa59d8d1048b6f2e59ab0e589d6b0172ba94865f691b3fd9e"
      },
      "downloads": -1,
      "filename": "art_deco-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6f132bdbb29e7d63be6f93fe420527fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15446,
      "upload_time": "2022-12-21T20:31:20",
      "upload_time_iso_8601": "2022-12-21T20:31:20.736324Z",
      "url": "https://files.pythonhosted.org/packages/e6/ca/50b242d2a8f9a9862618bcfe89cf6ad9e91721ebaa7764c7be9003a012e1/art_deco-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}