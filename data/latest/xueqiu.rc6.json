{
  "info": {
    "author": "1dot75cm",
    "author_email": "sensor.wen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "# xueqiu\na humanize XueQiu API wrappers.\n\n## Installation\n\n1.First, you need to install some basic components.\n- [git-scm](https://www.git-scm.com/download/)\n- [python3](https://www.python.org/downloads/)\n- [nodejs](https://nodejs.org/en/download/current/) (needs `node` command in the PATH variable)\n\n2.And then, install [Google Chrome Browser](https://www.google.cn/chrome/?standalone=1&platform=win64&extra=stablechannel) and [Chrome Driver](http://chromedriver.chromium.org/).\n\n```sh\n> copy chromedriver.exe %LOCALAPPDATA%\\Programs\\Python\\Python37-32\\\n```\n\n3.Finally, install `xueqiu` via `pip`.\n\n```sh\n$ pip install xueqiu  # OR git+https://github.com/1dot75cm/xueqiu@master\n$ pip install git+https://github.com/1dot75cm/browsercookie@master\n$ python3 -m xueqiu\nxueqiu x.y.z - A humanize XueQiu API wrappers.\n\n:copyright: (c) 2019 by 1dot75cm.\n:license: MIT, see LICENSE for more details.\n```\n\nenjoy!!!\n\n## Quick start\n\nExample:\n\n```python\n>>> news = xueqiu.news()  # watch the news\n>>> news\n{'list': [<xueqiu.Post 为何价值投资长期有效[https://xueqiu.com/8291461932/120351059]>,\n  <xueqiu.Post 韬蕴资本CEO温晓东怒斥贾跃亭：怎就一个[https://xueqiu.com/2095268812/120483699]>,\n  <xueqiu.Post 增持与回购20190122-201901[https://xueqiu.com/9206540776/120458648]>,\n  <xueqiu.Post 医药研发外包为什么这么红?(上)[https://xueqiu.com/1472391509/120481662]>,\n  <xueqiu.Post 医药大赛道之大分子生物药（下）[https://xueqiu.com/1472391509/120482094]>,\n  <xueqiu.Post 增强型指数基金，到底“强”在哪里？[https://xueqiu.com/8082119199/120480761]>,\n  <xueqiu.Post 价值投资不需要概率思维吗？—与董宝珍先生[https://xueqiu.com/3555476733/120245234]>,\n  <xueqiu.Post 邓晓峰的投资观[https://xueqiu.com/7649503965/120430145]>,\n  <xueqiu.Post 复利无敌：买入一只股票看这四点[https://xueqiu.com/1876906471/120479202]>,\n  <xueqiu.Post 再论安全边际[https://xueqiu.com/4465952737/120453192]>],\n 'next_max_id': 20323343}\n>>> p = news['list'][0]\n>>> \"{} {} 赞{} 评论{} 转发{} {}\".format(p.title, p.user.name, p.like_count,\n                                        p.reply_count, p.retweet_count, p.target)\n'为何价值投资长期有效 房杨凯的投资世界 赞9 评论11 转发9 https://xueqiu.com/8291461932/120351059'\n>>> p.user.get_posts()  # get user's article\n>>> p.user.posts\n{'count': 622,\n 'page': 1,\n 'maxpage': 63,\n 'list': [<xueqiu.Post [https://xueqiu.com/8291461932/120497097]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120491351]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120487476]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120487448]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120486037]>,\n  <xueqiu.Post 腾讯游戏帝国的护城河还在吗？[https://xueqiu.com/8291461932/120485596]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120473933]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120434054]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120434037]>,\n  <xueqiu.Post [https://xueqiu.com/8291461932/120434020]>]}\n>>> p.user.posts['list'][0].text  # content\n'回复@A8天道酬勤: 这个问题应该放在买之前。//@A8天道酬勤:回复@房杨凯的投资世界:假如花旗银行做假账，聂夫还会不会持有？'\n>>> p.user.posts['list'][0].like()  # like this (need login)\n```\n\n## API\n\n### User class\n\nA user class that contains user-related methods.\n\n*User object attributes:*\n\n- `id` - user id.\n- `profile` - user's profile url.\n- `name` - user name.\n- `city` - city, for example '上海'.\n- `description` - user description.\n- `friends_count` - the number of user's friends.\n- `followers_count` - the number of user's fans.\n- `posts_count` - the number of user's post.\n- `stocks_count` - the number of stocks.\n- `friends` - use to save `User` object for friends.\n- `followers` - use the save `User` object for fans.\n- `posts` - use the save `Post` object for post.\n- `articles` - use the save `Post` object for user's article.\n- `favorites` - use the save `Post` object for favorite articles.\n- `stocks` - use the save `Stock` object for favorite stocks.\n- `hot_stocks` - use the save `Stock` object for the current hot stocks.\n\n*User object methods:*\n\n- `get_friends(page: int = 1)` - get your friends and save to `self.friends`.\n- `get_followers(page: int = 1)` - get your fans and save to `self.followers`.\n- `get_posts(page: int = 1, count: int = 10)` - get your posts and save to `self.posts`.\n- `get_articles(page: int = 1, count: int = 10)` - get your articles and save to `self.articles`.\n- `get_favorites(page: int = 1, count: int = 20)` - get your favorite posts and save to `self.favorites`.\n- `get_stocks(mkt: int = 1, count: int = 1000)` - get your stocks and save to `self.stocks`.\n- `get_hot_stocks(mkt: int = 10, time_range: str = \"hour\", count: int = 10)` - get hottest stocks.\n    - :param `mkt`: (optional) market type, default is `10`.\n        - value: 全球`10` 沪深`12` 港股`13` 美股`11`\n    - :param `time_range`: (optional) hottest stocks by time range, default is `hour`.\n        - value: `hour`, `day`\n    - :param `count`: (optional) the number of results, default is `10`.\n\n- `send_verification_code(phone: int)` - send verification code to your phone. **Note**: only 5 times a day.\n- `login(uid: str = '', passwd: str = '', login_type: str = 'phone')` - user login by password or verification code. If the cookie cache exists, load it first and return. Otherwise, login and save the cookie to file (Linux `~/.xueqiu/cookie` or Windows).\n    - :param `uid`: your username or phone number.\n    - :param `passwd`: your password or verification code.\n    - :param `login_type`: (optional) login type, default is `phone`.\n        - value: `password`, `phone`\n\n- `load_cookie()` - load cookies from local file or browser(chrome or firefox). You can login your account on the chrome browser, then execute `load_cookie()`, and now login successfully.\n\nExample:\n```python\n>>> u = User(2478797769)\n>>> u.name\n\"红利基金\"\n>>> u.get_posts()\n>>> u.posts['list'][0].title\n'【你了解红利基金吗】红利基金（501029）热问快答！（12.31）'\n>>> u.get_favorites()\n>>> u.favorites['list'][0].title\n'2018年A股大数据盘点：30张图尽览市场热点'\n```\n\n### Post class\n\nA post class that contains post-related methods.\n\n*Post object attributes:*\n\n- `id` - post id.\n- `user` - post authors. a `User` class object.\n- `created_at` - created time. a `Arrow` class object.\n- `target` - post url.\n- `view_count` - view count.\n- `reply_count` - reply count.\n- `retweet_count` - retweet count.\n- `fav_count` - favorites count.\n- `like_count` - like count.\n- `title` - post title.\n- `text` - post content.\n- `full_text` - the full content of the article.\n- `comments` - use the save `Comment` object for post.\n\n*Post object methods:*\n\n- `get_content()` - get article content and save to `self.full_text`.\n- `get_comments(page: int = 1, count: int = 20, asc: str = 'false')` - get article comments and save to `self.comments`.\n- `like()` - like the article. (require login)\n- `unlike()` - unlike the article. (require login)\n- `favorite()` - favorite the article. (require login)\n- `unfavorite()` - unfavorite the article. (require login)\n\nExample:\n```python\n>>> p = Post('2478797769/78869335')\n>>> p.user.name\n\"红利基金\"\n>>> p.created_at.format(\"YYYY-MM-DD\")\n\"2016-12-13\"\n>>> p.title\n'【你了解红利基金吗】红利基金（501029）热问快答！（12.31）'\n>>> p.target\n\"https://xueqiu.com/2478797769/78869335\"\n>>> p.get_content()\n>>> p.full_text\n'目录：\\n一、\\n华宝标普中国A股红利机会指数证券投资基金\\n......'\n>>> p.get_comments()\n>>> p.comments['list'][-1].text\n'为什么成份股中有很多次新股？百思不得其解'\n```\n\n### Comment class\n\nA comment class that contains comment-related methods.\n\n*Comment object attributes:*\n\n- `id` - comment id.\n- `user` - comment authors. a `User` class object.\n- `post` - comment on an article. a `Post` class object.\n- `created_at` - created time. a `Arrow` class object.\n- `like_count` - like count.\n- `text` - comment content.\n\n*Comment object methods:*\n\n- `like()` - like the comment. (require login)\n- `unlike()` - unlike the comment. (require login)\n\nExample:\n```python\n>>> p = Post('2478797769/78869335')\n>>> p.get_comments()\n>>> c = p.comments['list'][0]\n>>> c.user.name\n'红利基金'\n>>> c.text\n'回复@孙浩云: 怎么可能....2018年跌幅为24.54%，较主流指数跌幅较小。不知道您50%多是哪儿看来的呢'\n```\n\n### Selector class\n\nThe `Selector` class implements a stock filter.\n\n*Selector object attributes:*\n\n- `market` - market string, default is `SH`.\n    - value: `SH`, `HK`, `US`\n- `queries` - include default parameters with selector.\n\n*Selector object methods:*\n\n- `url()` - return a selector url string.\n- `help(range: str = \"base\", show: str = \"text\")` - show selector parameters.\n    - :param `range`: (optional) parameters range, default is `base`.\n        value:\n        - SH: industries, areas, base, ball, quota, finan_rate, stock_data,\n              profit_sheet, balance_sheet, cash_sheet\n        - HK: industries, base, ball, quota\n        - US: industries, base, ball, quota, grow,\n              profit_sheet, balance_sheet, cash_sheet\n    - :param `show`: (optional) output help or return generator, default is `text`.\n        - value: `text`, `keys`\n- `scope(exchange: str = '', indcode: str = '', areacode: str = '')` - set stock selector scope.\n    - :param `exchange`: (optional) set A-share exchange market, default is `None`.\n        - value: `SH`, `SZ` or `None`\n    - :param `indcode`: (optional) set industry code, default is `None`. please see `self.help('industries')`\n    - :param `areacode`: (optional) set area code, default is `None`. please see `self.help('areas')`\n- `param(*args, **kwargs)` - set stock selector paramters.\n    - :param `*args`: (optional) set parameters key, default value is `ALL`.\n        for example, the `self.param('pb', 'mc')` will be set `pb=ALL&mc=ALL` params.\n    - :param `**kwargs`: (optional) set parameters key and value.\n        for example, the `self.param('pettm'=0_30)` will be set `pettm=0_30` param.\n- `orderby(key: str = 'symbol')` - stock selector results are sorted by field.\n    - :param `key`: the results are sorted by the `key`, default is `symbol`.\n            the key parameters can be viewed through `self.help('base')`.\n- `order(ord: str = 'desc')` - set stock selector results are sorted.\n    - :param `ord`: the ascending and descending order, default is `desc`.\n        - value: `asc`, `desc`\n- `page(page: int = 1)` - set stock selector results page number.\n- `count(size: int = 10)` - the number of stock selector results.\n- `run()` - sends a stock screener request and return `[Stock class]` list.\n\nExample:\n```python\n>>> s = Selector(\"SH\")\n# scope 深市，房地产，浙江地区\n# param 筛选总市值，18年3季度ROE 0-30%\n# orderby 按市值排序\n# order 升序排列\n# page 第2页\n# count 每页2个\n>>> result = s.scope('SZ','K70','CN330000').param('mc', roediluted_20180930='0_30').orderby('mc').order('asc').page(2).count(2).run()\n>>> result['list']\n[<xueqiu.Stock 荣安地产[SZ000517]>, <xueqiu.Stock 滨江集团[SZ002244]>]\n```\n\n### Stock class\n\nA stock class that contains stock-related methods.\n\n*Stock object attributes:*\n\nbase\n- `symbol` - stock symbol.\n- `code` - stock code.\n- `name` - stock name.\n- `current` - current price.\n- `current_year_percent` - current year return.\n- `percent` - change rate.\n- `chg` - change amount.\n- `open` - price today.\n- `last_close` - last close.\n- `high` - highest.\n- `low` - lowest.\n- `avg_price` - average price.\n- `volume` - trading volume.\n- `amount` - amount.\n- `turnover_rate` - turnover rate.\n- `amplitude` - amplitude.\n- `market_capital` - market capital.\n- `float_market_capital` - float market capital.\n- `total_shares` - total shares.\n- `float_shares` - float shares.\n- `currency` - currency unit.\n- `exchange` - stock exchange.\n- `issue_date` - launch date. a `Arrow` class object.\n\nextend\n- `limit_up` - stock limit up.\n- `limit_down` - stock limit down.\n- `high52w` - the highest of the fifty-two weeks.\n- `low52w` - the lowest of the fifty-two weeks.\n- `volume_ratio` - volume ratio.\n- `pe_lyr` - pe lyr.\n- `pe_ttm` - pe ttm.\n- `pe_forecast` - pe forecast.\n- `pb` - price/book value ratio.\n- `eps` - earnings per share.\n- `bps` - net asset value per share.\n- `dividend` - stock dividend.\n- `dividend_yield` - stock dividend yield.\n- `profit` - net profit.\n- `profit_forecast` - profit forecast.\n- `profit_four` - profit last four quarters.\n\nothers\n- `time` - current time. a `Arrow` class object.\n- `posts` - used to the save `Post` object for stock.\n- `followers` - used to the save `User` object for stock's fans.\n- `prousers` - used to the save `User` object for stock's professional users.\n- `popstocks` - pop stocks.\n- `industries` - industry stocks.\n- `history` - stock history.\n\n*Stock object methods:*\n\n- `refresh(dt: dict = {})` - get current stock data and update `self.time`.\n- `get_posts(page: int = 1, count: int = 20, sort: str = \"time\", source: str = \"all\")` - get stock posts and save to `self.posts`.\n    - :param `page`: (optional) page number, default is `1`.\n    - :param `count`: (optional) the number of results, default is `20`.\n    - :param `sort`: (optional) order type, default is `time`.\n        - value: `time`最新, `reply`评论, `relevance`默认\n    - :param `source`: (optional) source of the results, default is `all`.\n        - value: `all`, `user`讨论, `news`新闻, `notice`公告, `trans`交易\n- `get_followers(page: int = 1, count: int = 15)` - get stock fans and save to `self.followers`.\n    - :param `page`: (optional) page number, default is `1`.\n    - :param `count`: (optional) the number of results, default is `15`.\n- `get_prousers(count: int = 5)` - get stock professional users and save to `self.prousers`.\n- `get_popstocks(count: int = 8)` - get pop stocks and save to `self.popstocks`.\n- `get_industry_stocks(count: int = 8)` - get industry stocks and save to `self.industries`.\n- `get_histories(begin: str = '-1m', end: str = arrow.now(), period: str = 'day')` - get stock history data and save to `self.history`.\n    - :param `begin`: the start date of the results.\n        - value: -1w -2w -1m -3m -6m -1y -2y -3y -5y cyear issue or YYYY-MM-DD\n    - :param `end`: (optional) the end date of the results, default is `now`.\n    - :param `period`: (optional) set date period, default is `day`.\n        - value: day week month quarter year 120m 60m 30m 15m 5m 1m\n- `income(quarter: str = 'all', count: int = 12, lang: str = 'cn')` - get stock income sheet.\n- `balance(quarter: str = 'all', count: int = 12, lang: str = 'cn')` - get stock balance sheet.\n- `cash_flow(quarter: str = 'all', count: int = 12, lang: str = 'cn')` - get stock cash flow sheet.\n\nExample:\n```python\n>>> s = Stock(\"SH601318\")\n>>> s.symbol\n\"SH601318\"\n>>> s.name\n\"中国平安\"\n>>> s.market_capital\n1119664786363.0\n>>> s.issue_date.format(\"YYYY-MM-DD\")\n\"2007-02-28\"\n>>> s.refresh()  # update stock data\n>>> s.get_posts()\n{'count': 188745,\n 'page': 1,\n 'maxpage': 100,\n 'list': [<xueqiu.Post [https://xueqiu.com/1566609429/120543602]>,\n  <xueqiu.Post [https://xueqiu.com/1083048635/120542397]>,\n  <xueqiu.Post [https://xueqiu.com/6376335219/120542355]>,\n  <xueqiu.Post [https://xueqiu.com/8335420516/120542213]>,\n  <xueqiu.Post [https://xueqiu.com/2706248223/120542082]>,\n  <xueqiu.Post [https://xueqiu.com/4298761680/120542015]>,\n  <xueqiu.Post [https://xueqiu.com/2856403580/120541995]>,\n  <xueqiu.Post [https://xueqiu.com/6122867052/120541786]>,\n  <xueqiu.Post [https://xueqiu.com/1083048635/120541288]>,\n  <xueqiu.Post [https://xueqiu.com/9598902646/120541255]>]}\n>>> s.get_popstocks()\n>>> s.popstocks\n[<xueqiu.Stock 招商银行[SH600036]>,\n <xueqiu.Stock 兴业银行[SH601166]>,\n <xueqiu.Stock 民生银行[SH600016]>,\n <xueqiu.Stock 贵州茅台[SH600519]>,\n <xueqiu.Stock 苏宁易购[SZ002024]>,\n <xueqiu.Stock 万科A[SZ000002]>,\n <xueqiu.Stock 腾讯控股[00700]>,\n <xueqiu.Stock 中绿[02988]>]\n>>> s.get_industry_stocks()\n>>> s.industries\n{'industryname': '非银金融',\n 'list': [<xueqiu.Stock 九鼎投资[SH600053]>,\n  <xueqiu.Stock 华林证券[SZ002945]>,\n  <xueqiu.Stock 爱建集团[SH600643]>,\n  <xueqiu.Stock 中航资本[SH600705]>,\n  <xueqiu.Stock 华铁科技[SH603300]>,\n  <xueqiu.Stock 民生控股[SZ000416]>,\n  <xueqiu.Stock 熊猫金控[SH600599]>,\n  <xueqiu.Stock 宏源证券[SZ000562]>]}\n>>> s.get_histories('2019-01-07','2019-01-11')\n>>> s.history.iloc[:,0:8]\ndate           volume   open   high    low  close   chg  percent  turnoverrate\n2019-01-07   76593007  57.09  57.17  55.90  56.30 -0.29    -0.51          0.70\n2019-01-08   55992092  56.05  56.09  55.20  55.80 -0.50    -0.89          0.51\n2019-01-09   81914613  56.20  57.60  55.96  56.95  1.15     2.06          0.75\n2019-01-10   67328223  56.87  57.82  56.55  57.50  0.55     0.97          0.61\n2019-01-11   45756973  58.00  58.29  57.50  58.07  0.57     0.99          0.42\n>>> s.history.iloc[:,8:17]\ndate            ma5    ma10     ma20     ma30      pe     pb        ps       pcf  market_capital\n2019-01-07   55.970  56.885  59.2520  60.7143  10.073  1.949  1.051972  3.536000    1.029178e+12\n2019-01-08   55.910  56.631  58.8920  60.4863   9.984  1.932  1.042629  3.504597    1.020037e+12\n2019-01-09   56.264  56.501  58.6305  60.2780  10.190  1.972  1.064117  3.576824    1.041060e+12\n2019-01-10   56.628  56.430  58.3970  60.0910  10.288  1.991  1.074394  3.611368    1.051114e+12\n2019-01-11   56.924  56.507  58.1775  59.9010  10.390  2.011  1.085044  3.647167    1.061534e+12\n>>> s.get_histories('-1w')\n>>> s.history.iloc[:,0:8]\ndate           volume   open   high    low  close   chg  percent  turnoverrate\n2019-01-24   44940618  59.61  60.52  59.22  60.43  0.94     1.58          0.41\n2019-01-25   67245911  60.50  61.78  60.43  61.29  0.86     1.42          0.62\n2019-01-28   58164884  61.80  62.41  61.20  61.52  0.23     0.38          0.53\n2019-01-29   39519294  61.38  61.90  60.98  61.65  0.13     0.21          0.36\n2019-01-30   31000323  60.88  61.86  60.78  61.25 -0.40    -0.65          0.27\n>>> s.get_histories('-1y')\n>>> s.history[['pe','pb','ps']].describe()\n               pe          pb          ps\ncount  243.000000  243.000000  243.000000\nmean    11.840588    2.273996    1.217041\nstd      1.357489    0.215217    0.110052\nmin      9.728900    1.911000    1.031044\n25%     10.849450    2.143200    1.150554\n50%     11.504900    2.237300    1.197700\n75%     12.628600    2.345200    1.251150\nmax     15.596700    2.935400    1.559700\n>>> s.income()[['净利润','营业总收入']]\nreport_name  净利润        营业总收入\n2018Q3       8.948900e+10  7.504560e+11\n2018Q2       6.477000e+10  5.348140e+11\n2018Q1       2.895100e+10  3.104520e+11\n2017Q4       9.997800e+10  8.908820e+11\n...\n>>> s.balance()[['资产合计','负债合计']]\nreport_name  资产合计      负债合计\n2018Q3       6.910935e+12  6.260499e+12\n2018Q2       6.851431e+12  6.216339e+12\n2018Q1       6.725766e+12  6.108353e+12\n2017Q4       6.493075e+12  5.905158e+12\n...\n>>> s.cash_flow()['经营活动现金流量净额']\nreport_name  经营活动现金流量净额\n2018Q3    1.775950e+11\n2018Q2    1.616070e+11\n2018Q1    1.398670e+11\n2017Q4    1.212830e+11\n...\n```\n\n### Fund class\n\nA fund class that contains fund-related methods.\n\n*Fund object attributes:*\n\n- `fund_nav` - fund net value.\n- `fund_nav_guess` - estimate value.\n- `fund_nav_premium` - fund nav premium rate.\n- `fund_history` - fund history.\n- `fund_stocks` - component stocks.\n- `fund_weight` - stocks weight.\n\n*Fund object methods:*\n\n- `get_fund_stocks(year: str = \"\", mouth: str = \"12\")` - get fund's stocks from `天天基金`.\n- `get_fund_nav()` - get fund nav.\n- `get_fund_histories(page: int = 1, size: int = 90)` - get history fund nav.\n- `calc_premium()` - calculate fund premium.\n- `refresh_all()` - refresh all of the fund stock objects.\n\nExample:\n```python\n>>> f = Fund('501301')\n>>> f.symbol\n\"SH501301\"\n>>> f.fund_nav\n['2019-01-29', 1.1311, 1.1311, '-0.47%']\n>>> f.get_fund_stocks()\n>>> f.fund_stocks\n       stocks          weight\n0      中国移动[00941]  0.1082\n1      工商银行[01398]  0.0975\n2      腾讯控股[00700]  0.0970\n3      建设银行[00939]  0.0932\n4      中国平安[02318]  0.0922\n5      中国银行[03988]  0.0642\n6   中国海洋石油[00883]  0.0522\n7      中国石化[00386]  0.0343\n8      中国人寿[02628]  0.0297\n9      招商银行[03968]  0.0267\n>>> list(f.fund_stocks.weight)\n[0.1082, 0.0975, 0.097, 0.0932, 0.0922, 0.0642, 0.0522, 0.0343, 0.0297, 0.0267]\n>>> f.get_fund_histories('2019-01-07','2019-01-11')\n>>> f.fund_history\ndate           nav    cnav percent\n2019-01-07  1.0743  1.0743    0.70\n2019-01-08  1.0679  1.0679   -0.60\n2019-01-09  1.0949  1.0949    2.53\n2019-01-10  1.0944  1.0944   -0.05\n2019-01-11  1.0964  1.0964    0.18\n>>> f.get_fund_histories('-1w')\ndate           nav    cnav percent\n2019-01-25  1.1413  1.1413    2.02\n2019-01-28  1.1364  1.1364   -0.43\n2019-01-29  1.1311  1.1311   -0.47\n2019-01-30  1.1379  1.1379    0.60\n2019-01-31  1.1475  1.1475    0.84\n```\n\n### get_all_funds function\n\nExample:\n```python\n>>> df = get_all_funds()\n>>> df.groupby(by='type').count()\ntype       code  name\nETF-场内    171   171\nQDII        171   171\nQDII-ETF     10    10\nQDII-指数    83    83\n保本型       52    52\n债券型     1613  1613\n债券指数     69    69\n其他创新      2     2\n分级杠杆    132   132\n固定收益    132   132\n定开债券    657   657\n混合-FOF     40    40\n混合型     3167  3167\n理财型      116   116\n联接基金    194   194\n股票型      373   373\n股票指数    462   462\n货币型      665   665\n>>> df[df['code'].str.contains('^510')].head()\n        code          name        type\n7319  510010  交银上证180治理ETF  ETF-场内\n7320  510020  博时上证超大盘ETF   ETF-场内\n7321  510030  华宝上证180价值ETF  ETF-场内\n7322  510050  华夏上证50ETF       ETF-场内\n7323  510060  工银上证央企50ETF   ETF-场内\n>>> df[df['name'].str.contains('恒生')].head()\n        code          name            type\n54    000071  华夏恒生ETF联接A        QDII-指数\n58    000075  华夏恒生ETF联接现汇     QDII-指数\n59    000076  华夏恒生ETF联接现钞     QDII-指数\n761   000948  华夏沪港通恒生ETF联接A  QDII-指数\n919   001149  汇丰晋信恒生龙头指数C   股票指数\n```\n\n### get_all_funds_ranking function\n\nExample:\n```python\n>>> df = get_all_funds_ranking(fund_type='fof')  # 开放式基金排行\n>>> df.head()[['code','name','issue_date','nav','current_year']]\n   code    name                      issue_date  nav     current_year\n0  005220  海富通聚优精选混合(FOF)   2017-11-06  0.8277  0.050781\n1  006306  泰达宏利泰和平衡养老(FOF) 2018-10-25  1.0099  0.020513\n2  006042  上投摩根尚睿混合(FOF)     2018-08-15  0.9931  0.011613\n3  005222  泰达宏利全能混合(FOF)C    2017-11-02  0.9803  0.015644\n4  005221  泰达宏利全能混合(FOF)A    2017-11-02  0.9850  0.015883\n>>> df = get_all_funds_ranking(fund_type='ct')  # 场内基金排行\n>>> df.tail()[['code','name','issue_date','nav','-1year','current_year']]\n     code    name                      issue_date  nav    -1year     current_year\n419  150197  国泰国证有色金属行业分级B 2015-03-30  0.3411 -0.715443  -0.038349\n420  150294  南方中证高铁产业指数分级B 2015-06-10  0.4018 -0.543043  -0.057697\n421  150308  富国中证体育产业指数分级B 2015-06-25  0.8470 -0.663614  -0.055753\n422  150264  华宝中证1000指数分级B     2015-06-04  0.3436 -0.661696   0.031840\n423  512590  浦银安盛中证高股息ETF     2019-01-29  1.0032       NaN        NaN\n```\n\n### get_economic function\n\nExample:\n```python\n>>> get_economic()  # 获取经济指标\n{'中国人民银行利率': '1083',\n '中国季度国内生产总值(GDP)年率': '461',\n '中国规模以上工业增加值年率': '462',\n '中国官方制造业采购经理人指数(PMI)': '594',\n '中国财新制造业采购经理人指数(PMI)': '753',\n '中国失业率': '1793',\n '中国贸易帐 (美元)': '466',\n '中国台湾利率决议': '1117',\n......\n>>> get_economic(search='美国')  # 获取经济指标 - 美国\n{'美国失业率': '300',\n '美国总统选举': '371',\n '美国ADP就业人数': '1',\n '美国ISM制造业PMI': '173',\n '美国零售销售月率': '256',\n '美国营建许可总数': '25',\n '美国ISM非制造业PMI': '176',\n '美国核心零售销售月率': '63',\n......\n>>> df = get_economic('中国财新制造业采购经理人指数(PMI)')  # 获取财新PMI\n>>> df.tail()\ndate        actual actual_state  forecast  revised\n2018-09-30    50.0         down      50.5      NaN\n2018-11-01    50.1           up      49.9      NaN\n2018-12-03    50.2           up      50.1      NaN\n2019-01-02    49.7         down      50.3      NaN\n2019-02-01    48.3         down      49.5      NaN\n>>> df.to_excel('output.xls')  # 导出excel\n```\n\n### get_economic_of_china function\n\nExample:\n```python\n>>> get_economic_of_china(search='总人口')\n[{'id': 'A01050201', 'name': '民族自治地方总人口数'},\n {'id': 'A030301', 'name': '年末总人口'},\n {'id': 'A030501', 'name': '人口普查总人口'},\n {'id': 'A030508', 'name': '人口普查0-14岁人口占总人口比重'},\n......\n>>> df = get_economic_of_china('A030101,A030102,A030103', time_period='1949-')\n>>> df.to_period('A').tail()\n   年末总人口  男性人口  女性人口\n1953  58796.0  30468.0  28328.0\n1952  57482.0  29833.0  27649.0\n1951  56300.0  29231.0  27069.0\n1950  55196.0  28669.0  26527.0\n1949  54167.0  28145.0  26022.0\n>>> get_economic_of_china(category='month', search='居民消费价格指数')\n[{'id': 'A01010101', 'name': '居民消费价格指数(上年同月=100)'},\n {'id': 'A01010102', 'name': '食品烟酒类居民消费价格指数(上年同月=100)'},\n {'id': 'A01010103', 'name': '衣着类居民消费价格指数(上年同月=100)'},\n {'id': 'A01010104', 'name': '居住类居民消费价格指数(上年同月=100)'},\n......\n>>> get_economic_of_china(\"A01010101\", category='month').to_period('M')\n    居民消费价格指数(上年同月=100)\n2018-12  101.860698\n2018-11  102.175041\n2018-10  102.543151\n2018-09  102.472394\n......\n>>> get_economic_of_china(category='month_by_state', search='region')\n[{'id': '110000', 'name': '北京市'},\n {'id': '120000', 'name': '天津市'},\n {'id': '130000', 'name': '河北省'},\n {'id': '140000', 'name': '山西省'},\n......\n>>> get_economic_of_china(\"A03010101\", region='210000,130000', category='month_by_state').to_period('M')\n        辽宁省  河北省\n2018-12  333.6  381.0\n2018-11  311.0  398.3\n2018-10  274.3  429.2\n2018-09  273.5  456.2\n......\n```\n\n### get_data_invest function\n\nExample:\n```python\n>>> get_data_invest(query='BABA')\n[['941155', '阿里巴巴', 'BABA', '纽约'],\n ['940993', 'Baba Farid Sugar Mills Ltd', 'BABA', '巴基斯坦卡拉奇'],\n ['986306', '阿里巴巴', 'BABAUSD', '瑞士'],\n ['987353', 'Baba Arts Ltd', 'BART', '孟买BSE'],\n>>> get_data_invest('941155', '-1y').head()\ndate        close    open    high     low         vol\n2018-03-05  181.60  179.41  181.95  177.07  15656661.0\n2018-03-06  187.37  185.19  188.01  184.82  17856088.0\n2018-03-07  189.05  184.37  189.07  184.32  13728910.0\n2018-03-08  187.18  189.05  190.23  186.57  14331400.0\n2018-03-09  190.55  189.64  190.70  188.01  14208356.0\n```\n\n### get_data_yahoo function\n\nExample:\n```python\n>>> get_data_yahoo('BABA', '-1y').head()\nDate        High        Low         Open        Close       Volume    Adj Close\n2018-02-22  190.740005  187.770004  190.199997  188.750000  12282800  188.750000\n2018-02-23  193.404999  189.949997  190.179993  193.289993  16937300  193.289993\n2018-02-26  195.149994  190.649994  194.460007  194.190002  19463100  194.190002\n2018-02-27  193.567001  187.210007  192.589996  188.259995  23218500  188.259995\n2018-02-28  188.240005  185.000000  187.250000  186.139999  19367600  186.139999\n```\n\n### get_quota_yahoo function\n\nExample:\n```python\n>>> get_quote_yahoo('BABA')[['marketCap','price']]\n         marketCap   price\nBABA  458608476160  176.92\n```\n\n### get_stock_margin function\n\nExample:\n```python\n>>> get_stock_margin()[['收盘-沪深300','涨跌幅','融资余额','融资净买入额']]\ntdate       收盘-沪深300  涨跌幅   融资余额   融资净买入额\n2019-02-21  3442.7056   -0.267146  751770477596  3751230646\n2019-02-20  3451.9273    0.358166  748019246950  4533629289\n2019-02-19  3439.6078   -0.178104  743485617661  5998280511\n2019-02-18  3445.7448    3.206037  737487337150  5113256902\n...\n>>> get_stock_margin(mkt_type='sh')[['收盘-沪深300','涨跌幅','融资余额','融资净买入额']]\ntdate       收盘-沪深300  涨跌幅   融资余额   融资净买入额\n2019-02-22  2804.2262    1.905116  461954859629  2720050470\n2019-02-21  2751.8012   -0.341070  459234809159  2049990278\n2019-02-20  2761.2189    0.202239  457184818881  1992074891\n2019-02-19  2755.6459    0.046809  455192743990  3286343033\n...\n>>> get_stock_margin(code='601318')[['收盘-沪深300','涨跌幅','融资余额','融资净买入额']]\ntdate       收盘-沪深300  涨跌幅   融资余额   融资净买入额\n2019-02-22  67.02     2.4927  19272743520  -159641891\n2019-02-21  65.39    -0.7438  19432385411  -50054160\n2019-02-20  65.88     0.3045  19482439571   12374039\n2019-02-19  65.68     0.5973  19470065532   169750461\n```\n\n### get_hsgt_history function\n\nExample:\n```python\n>>> shgt = get_hsgt_history(mkt_type='shgt', begin='-1m')  # 沪股通(北) 近1月\n>>> shgt[['当日资金流入','当日余额','当日成交净买额','领涨股','指数','涨跌幅']]\nDetailDate  当日资金流入  当日余额  当日成交净买额  领涨股  指数  涨跌幅\n2019-02-22  3965.00  48035.00  3589.82  华安证券  2804.23  0.019053\n2019-02-21  1718.56  50281.44  1473.51  豫光金铅  2751.80 -0.003412\n2019-02-20  3228.57  48771.43  2933.49  鼎立股份  2761.22  0.002021\n2019-02-19  1418.11  50581.89  1259.40  宏图高科  2755.65  0.000468\n...\n>>> hksh = get_hsgt_history(mkt_type='hksh', begin='-1m')  # 港股通(沪) 近1月\n>>> hksh[['当日资金流入','当日余额','当日成交净买额','领涨股','指数','涨跌幅']]\nDetailDate  当日资金流入  当日余额  当日成交净买额  领涨股  指数   涨跌幅\n2019-02-22  798      41202      186.64   华虹半导体  28816.30  0.006510\n2019-02-21  -581     42581     -1122.04   南京熊猫  28629.92  0.004064\n2019-02-20  -599     42599     -1166.03   中国燃气  28514.05  0.010129\n2019-02-19  -741     42741     -1223.02   嘉里物流  28228.13 -0.004194\n...\n```\n\n### get_hsgt_top10 function\n\nExample:\n```python\n>>> get_hsgt_top10(mkt_type='shgt',date='2019-02-22')  # 沪股通成交额top10\nRank  Code  Name   Close  ChangePercent  HGTJME  HGTMRJE  HGTMCJE    HGTCJJE\n1  601318  中国平安 67.02  2.4927   353346111  738675531  385329420  1124004951\n2  600030  中信证券 22.43  10.0049 -207273453  319115930  526389383   845505313\n3  600519  贵州茅台 726.01 0.7997   254156043  448239518  194083475   642322993\n4  600036  招商银行 30.63  1.8285   346146568  402323371   56176803   458500174\n...\n```\n\n### get_hsgt_holding function\n\nExample:\n```python\n>>> hold = get_hsgt_holding(mkt_type='north', date='2019-02-22')  # 北向持股\n>>> hold[['代码','名称','持股市值','持股数量','持股占A股比例']]\nHDDATE        代码     名称    持股市值        持股数量   持股占A股比例\n2019-02-22  600519   贵州茅台  8.517306e+10   117316644     9.18\n2019-02-22  601318   中国平安  5.141756e+10   767197321     6.85\n2019-02-22  000333   美的集团  4.714754e+10  1033710522    15.52\n2019-02-22  600276   恒瑞医药  3.194746e+10   481862195    12.95\n...\n>>> hold = get_hsgt_holding(code='601318', date='2019-02-22')  # 个股持股，最多近1月数据\n>>> hold[['代码','名称','持股市值','持股数量','持股占A股比例']]\nHDDATE        代码     名称    持股市值      持股数量   持股占A股比例\n2019-02-22  601318  中国平安  5.141756e+10  767197321     6.85\n2019-02-21  601318  中国平安  4.981185e+10  761765628     6.80\n2019-02-20  601318  中国平安  4.991939e+10  757732051     6.80\n2019-02-19  601318  中国平安  4.943077e+10  752600092     6.72\n...\n```\n\n### BaiduIndex class\n\nExample:\n```python\n>>> BaiduIndex.cookie = \"cookie string\"  # OR load cookie from browsers\n>>> idx = BaiduIndex()\n>>> idx.search('股票,基金', begin='-3m', area='上海').tail()\ndate        股票   基金\n2019-02-18  1722  778\n2019-02-19  2117  837\n2019-02-20  1879  782\n2019-02-21  1933  760\n2019-02-22  2097  779\n>>> idx.search('股票,基金', begin='-2q', index='feed', area='广州').head()\ndate        股票     基金\n2018-08-23  221807  16838\n2018-08-24  196099  11339\n2018-08-25  185960  16346\n2018-08-26  137134  12206\n2018-08-27  180028  28195\n>>> idx.region_distribution('股票', '-6w')  # 地域分布\n{\n  '股票': {\n    'city': {'514': 1000, '57': 962, '138': 677, '94': 663, ....},\n    'prov': {'913': 1000, '917': 693, '916': 555, '911': 498, ....},\n    'period': '2019-01-23|2019-02-22'\n  }\n}\n>>> idx.social_attribute('股票', '-15d')  # 人群属性\n{\n  '股票': {\n    'age': {'1': '2', '2': '11', '3': '45', '4': '32', '5': '10'},\n    'sex': {'F': '23', 'M': '77'}\n  }\n}\n```\n\n### search function\n\n- `search(query: str = \"\", query_type: str = \"stock\", symbol: str = \"\", count: int = 10, page: int = 1, sort: str = \"time\", source: str = \"user\")` - Sends a search request.\n    - :param `query`: query string.\n    - :param `query_type`: (optional) type of the query request, default is `stock`.\n        - value: stock, post, user\n    - :param `symbol`: (optional) the stock symbol.\n    - :param `count`: (optional) the number of results, default is `20`.\n    - :param `page`: (optional) page number, default is `1`.\n    - :param `sort`: (optional) order type, default is `time`.\n        - value: time最新, reply评论, relevance默认\n    - :param `source`: (optional) source of the results, default is `user`.\n        - value: all, user讨论, news新闻, notice公告, trans交易\n    - :return: a list of :class:`Object <instance_id>` objects. Object class: Stock, Post or User\n    - :rtype: list([ins1, ins2, ...])\n\n### news function\n\n- `news(category: int = -1, count: int = 10, max_id: int = -1)` - Get news.\n    - :param `category`: (optional) type of the news, default is `-1`.\n        - value: 头条-1, 今日话题0, 直播6, 沪深105, 港股102, 美股101, 基金104, 私募113, 房产111, 汽车114, 保险110\n    - :param `count`: (optional) the number of results, default is `10`.\n    - :param `max_id`: (optional) the max id of news, default is `-1`.\n    - :return: a list of :class:`Post <instance_id>` objects.\n    - :rtype: list([post1, post2, ...])\n\n### utils module\n\nThis module contains some utils.\n\n- `get_cookies()` - load cookies from local file, browser and selenium. return a `LWPCookieJar` class object.\n- `get_session()` - get the requests session.\n- `clean_html(tree: str)` - clean html.\n- `check_symbol(code: str)` - check stock symbol.\n- `exrate(date: str = \"\", code: str = \"USD\")` - get the monetary exchange rate by date.\n    - code: \n```python\n{'USD':'美元','EUR':'欧元','JPY':'日元','HKD':'港元','GBP':'英镑','AUD':'澳大利亚元',\n 'NZD':'新西兰元','SGD':'新加坡元','CHF':'瑞士法郎','CAD':'加拿大元','MYR':'马来西亚林吉特',\n 'RUB':'俄罗斯卢布','ZAR':'南非兰特','KRW':'韩元','AED':'阿联酋迪拉姆','SAR':'沙特里亚尔',\n 'HUF':'匈牙利福林','PLN':'波兰兹罗提','DKK':'丹麦克朗','SEK':'瑞典克朗','NOK':'挪威克朗',\n 'TRY':'土耳其里拉','MXN':'墨西哥比索','THB':'泰铢'}\n```\n- `exusd(date: str = \"\")` - only for `USD`.\n- `exhkd(date: str = \"\")` - only for `HKD`.\n\nExample:\n```python\n>>> CJ = get_cookies()\n>>> sess = get_session()\n>>> clean_html(\"<span>hello.</span>\")\nhello.\n>>> check_symbol(601318)\n\"SH601318\"\n>>> exrate(\"2019-01-10\", \"EUR\")\n[7.8765, 7.8443]\n>>> exusd(date=\"2019-01-10\")\n[6.816, 6.8526]\n>>> exhkd(\"2019-01-10\")\n[0.86959, 0.87419]\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/1dot75cm/xueqiu",
    "keywords": "xueqiu,snowball,stock,api,api client,wrappers",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xueqiu",
    "package_url": "https://pypi.org/project/xueqiu/",
    "platform": "any",
    "project_url": "https://pypi.org/project/xueqiu/",
    "project_urls": {
      "Homepage": "https://github.com/1dot75cm/xueqiu"
    },
    "release_url": "https://pypi.org/project/xueqiu/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A humanize XueQiu API wrappers.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5139208,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4da2f938e2007767ddbd9ab1abc4264be7176b87685b7dbd9205c662a61b33f7",
          "md5": "c74edde111e360f6de84a18148d90167",
          "sha256": "0a7d0eb1dbd2a943c82b77045e51c03c38d1608d80e1123e2b4a8045c0e155b6"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c74edde111e360f6de84a18148d90167",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16190,
        "upload_time": "2019-01-29T16:08:22",
        "upload_time_iso_8601": "2019-01-29T16:08:22.463304Z",
        "url": "https://files.pythonhosted.org/packages/4d/a2/f938e2007767ddbd9ab1abc4264be7176b87685b7dbd9205c662a61b33f7/xueqiu-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bcce14cfada7ce32bbd2ff03dab59c24d06dd62500bdba7de0901dcea811e5a",
          "md5": "b84e5a4514088e7f4ae796e7cf6a84f7",
          "sha256": "98ea7a0b18e4e92c40fdc9f67b8e05735378538aef28c800b1c09543d8a2b99c"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b84e5a4514088e7f4ae796e7cf6a84f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15578,
        "upload_time": "2019-01-29T16:08:25",
        "upload_time_iso_8601": "2019-01-29T16:08:25.257255Z",
        "url": "https://files.pythonhosted.org/packages/5b/cc/e14cfada7ce32bbd2ff03dab59c24d06dd62500bdba7de0901dcea811e5a/xueqiu-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f63a5cdab27cacda78c241d542ae7b8bbe6f301d033f5e87c640ba6aebe4cb1d",
          "md5": "201a6a541218c76045e4d1bc8840368b",
          "sha256": "115576735c03ad81926176e3e99f842446fdefd7f3fdf18d7312e0770bc6dc65"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "201a6a541218c76045e4d1bc8840368b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23623,
        "upload_time": "2019-01-30T11:35:04",
        "upload_time_iso_8601": "2019-01-30T11:35:04.170083Z",
        "url": "https://files.pythonhosted.org/packages/f6/3a/5cdab27cacda78c241d542ae7b8bbe6f301d033f5e87c640ba6aebe4cb1d/xueqiu-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99ec5659321696f38646a392aac3d743a607a76a3d2e85c4f07d115d33222c16",
          "md5": "2c7ebb438e633490572dc1992a7bd619",
          "sha256": "59b366b8729591feeeac616561e529383537c1ab63f1985ea075f60f498902a0"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c7ebb438e633490572dc1992a7bd619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30675,
        "upload_time": "2019-01-30T11:35:06",
        "upload_time_iso_8601": "2019-01-30T11:35:06.914960Z",
        "url": "https://files.pythonhosted.org/packages/99/ec/5659321696f38646a392aac3d743a607a76a3d2e85c4f07d115d33222c16/xueqiu-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bfc73b87e0b23dffa63c8653f000ab6cedf003f45bcdbb0331c9aebe24ce351",
          "md5": "7635cec96442429e730e72954b5e2f6a",
          "sha256": "b6a5371aac71044dd0277fcb64fb852e1fb65798517b6f9dd6d4f08c7680df17"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7635cec96442429e730e72954b5e2f6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30528,
        "upload_time": "2019-02-13T10:10:20",
        "upload_time_iso_8601": "2019-02-13T10:10:20.500177Z",
        "url": "https://files.pythonhosted.org/packages/5b/fc/73b87e0b23dffa63c8653f000ab6cedf003f45bcdbb0331c9aebe24ce351/xueqiu-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eab1b0d6f653f08465d3638edffc528471036b290279f8a1e1d4382747ed442",
          "md5": "551144bebd6f872139cdd713ed9d4fc4",
          "sha256": "8ff278d72536ad8a33a5c2af03a5a9d39fba3e4d6a3005469ffa368585004b95"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "551144bebd6f872139cdd713ed9d4fc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44298,
        "upload_time": "2019-02-13T10:10:22",
        "upload_time_iso_8601": "2019-02-13T10:10:22.424301Z",
        "url": "https://files.pythonhosted.org/packages/3e/ab/1b0d6f653f08465d3638edffc528471036b290279f8a1e1d4382747ed442/xueqiu-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06b052211ab955f86f48ac2c2f83858063aa8c137a886f3f584e4a127dc53e72",
          "md5": "3aaf691f3ad9ebaeb6ef99777be01303",
          "sha256": "c55e2d7f537e8305de6a8b7e347518feae540b7670c5e3e3d42447b8e00f5853"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3aaf691f3ad9ebaeb6ef99777be01303",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53366,
        "upload_time": "2019-02-25T18:14:08",
        "upload_time_iso_8601": "2019-02-25T18:14:08.808071Z",
        "url": "https://files.pythonhosted.org/packages/06/b0/52211ab955f86f48ac2c2f83858063aa8c137a886f3f584e4a127dc53e72/xueqiu-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f680b0c36e71543014958499a492374fe69cfee0a7b51e59f3c31b144a4ce48",
          "md5": "b3006e9f202fdfca2d67545a7ffc71cf",
          "sha256": "b50c726eb4e6957d63b0be70d3964412f31bd90d266814592e90475eca513cd5"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b3006e9f202fdfca2d67545a7ffc71cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75125,
        "upload_time": "2019-02-25T18:14:11",
        "upload_time_iso_8601": "2019-02-25T18:14:11.194649Z",
        "url": "https://files.pythonhosted.org/packages/3f/68/0b0c36e71543014958499a492374fe69cfee0a7b51e59f3c31b144a4ce48/xueqiu-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b2e00b8c329e95dd45dcb0969ff62c93e84809034910f0c61da80cabd457808",
          "md5": "cb916f1a89891195cf10e966ec1ec96f",
          "sha256": "8d918be8704e64d502cbc37e8bbf2191535b6734973d1c7d407b29542a8a77ac"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb916f1a89891195cf10e966ec1ec96f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75219,
        "upload_time": "2019-02-27T11:42:07",
        "upload_time_iso_8601": "2019-02-27T11:42:07.766208Z",
        "url": "https://files.pythonhosted.org/packages/4b/2e/00b8c329e95dd45dcb0969ff62c93e84809034910f0c61da80cabd457808/xueqiu-0.1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdd1f33598490c413bb2a2b6afe4d96415657d2667fbadabd3ed4195460ea4ac",
          "md5": "d66754f551a4dffa522a834e2d290671",
          "sha256": "39a56dfa48a313354c8db6bc918b7e51a5d1c0bf36d8e08269d91fc59c69fe5f"
        },
        "downloads": -1,
        "filename": "xueqiu-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d66754f551a4dffa522a834e2d290671",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1431342,
        "upload_time": "2019-04-13T21:31:13",
        "upload_time_iso_8601": "2019-04-13T21:31:13.735150Z",
        "url": "https://files.pythonhosted.org/packages/fd/d1/f33598490c413bb2a2b6afe4d96415657d2667fbadabd3ed4195460ea4ac/xueqiu-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdd1f33598490c413bb2a2b6afe4d96415657d2667fbadabd3ed4195460ea4ac",
        "md5": "d66754f551a4dffa522a834e2d290671",
        "sha256": "39a56dfa48a313354c8db6bc918b7e51a5d1c0bf36d8e08269d91fc59c69fe5f"
      },
      "downloads": -1,
      "filename": "xueqiu-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d66754f551a4dffa522a834e2d290671",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1431342,
      "upload_time": "2019-04-13T21:31:13",
      "upload_time_iso_8601": "2019-04-13T21:31:13.735150Z",
      "url": "https://files.pythonhosted.org/packages/fd/d1/f33598490c413bb2a2b6afe4d96415657d2667fbadabd3ed4195460ea4ac/xueqiu-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}