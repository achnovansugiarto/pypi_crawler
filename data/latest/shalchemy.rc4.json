{
  "info": {
    "author": "Payton Yao",
    "author_email": "payton.yao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "Shalchemy\n=========\n\nConveniently call upon binaries from Python as if you were in sh.\n\n\n.. code:: python\n\n    from shalchemy import sh, run, bin\n    from shalchemy.bin import cat, curl, grep\n \n    if cat('/etc/hosts') | grep('localhost'):\n        sh.run(curl('example.com') > 'file.txt')\n        for line in cat('file.txt'):\n            print(line)\n        sh.run(bin.rm('file.txt'))\n\nNote that none of these are Python functions. We just call the system binaries using ``subprocess`` and do an unhealthy amount of magic to tie everything together.\n\nInstallation\n============\n\n::\n\n    $> pip install shalchemy\n\nTutorial\n========\n\nYou create expressions by chaining ``shalchemy.sh`` instances together.\n\n.. code:: python\n\n    import shalchemy\n    ps_aux = shalchemy.sh('ps', 'aux')\n    grep = shalchemy.sh('grep', 'python')\n    piped_expression = ps_aux | grep\n\nThese expressions on their own don't immediately run the underlying executables. They are evaluated in these three circumstances:\n\n- They are passed to ``sqlalchemy.sh.run``\n- They are converted to a ``bool``, ``bytes``, ``str``, or ``int``\n- They are iterated over\n\nDuring the evaluation phase, subprocesses are created, files are opened, and things are piped together with Linux magic. The Python process blocks until everything is finished. Once all the processes are done, things are cleaned up, and the correct data type is provided to the user.\n\nMethods of Execution\n====================\n\nThe different methods of evaluation do different things:\n\nEvaluating through ``sh.run`` will run the command and dump its output to stdout and stderr. The return value of ``sh.run`` will be the exit code of the command.\n\nConverting to ``bytes``, ``str``, or ``int`` will run the command, capture its output, and parse it into the corresponding data type.\n\nConverting to a ``bool`` will run the command, dump its output to stdout/stderr, then return True if the exit code was 0 and False otherwise.\n\nIterating over the expression will run it, capture the standard output, parse it as a string, then split the string by newlines.\n\nIf you want both the exit code and the stdout, you should pipe the stdout into an ``io.StringIO`` and use ``sh.run``.\n\n\nPipes and Redirects\n===================\n\nshalchemy expressions support pipes ``|`` and redirects (``<``, ``>``, ``>>``) for stdout.\n\nSadly, Python doesn't support overloading the ``2>`` operation for stderr. But because we are crazy, we used ``>=`` instead!\n\n.. code:: python\n\n    from shalchemy import sh\n    from sqlalchemy.bin import rm\n    sh.run(((rm('nonexistent_file') > 'log.txt') >= '&1')\n    sh.run(((rm('nonexistent_file2') >> 'log.txt') >= 'errors.txt')\n\nThere are also issues with Python's operator precedence and chaining. That is, ``1 < x < 3`` expands to ``1 < x and x < 3`` which is not very sh-friendly.\n\nIf you're going to do any sort of complex redirect chaining, it might be best to use the ``in_``, ``out_`` and ``err_`` methods.\n\n.. code:: python\n\n    from shalchemy import sh\n    from sqlalchemy.bin import rm\n    sh.run(rm('nonexistent_file').in_('input.txt').out_('log.txt', append=True).err_('&1'))\n\n\nArguments\n=========\n\n``shalchemy.sh`` is used to create expressions. Calling it creates an internal ``CommandExpression``. These ``CommandExpressions`` hold arguments and curry them. You can also access their attributes to naturally generate curried expressions for subcommands. As a result, these four different python lines will create the same ``CommandExpression``:\n\n.. code:: python\n\n    from shalchemy import sh\n    from shalchemy.bin import git\n    expr1 = sh('git', 'show', '.')\n    expr2 = sh(['git', 'show', '.'])\n    expr3 = git('show', '.')\n    expr4 = git.show('.')\n    expr5 = sh('git show .')  # Special\n\nThere is something special about ``expr5`` that should be noted. If `sh` (or any ``CommandExpression``) receives a single string as the only argument, it will assume that you wanted to type a sh-compatible string and it'll automatically tokenize it for you using ``shlex``.\n\nIn other words, ``sh('git show .')`` will create the Command ``sh(['git', 'show', '.'])``. If you don't like the automatic tokenization, you can explicitly provide a list with a single string inside like ``sh(['git show .'])``. Note that this second version will attempt to search your ``$PATH`` for a binary named ``\"git\\ show\\ .\"`` which is almost always not what anybody wants. Just a small warning for this special automatic tokenization thing that might become a gotcha one day.\n\nshalchemy.bin\n=============\n\nThe ``shalchemy.bin`` module is a magic module that wraps whatever you want to import in ``shalchemy.sh`` in a straightforward way. Importing ``grep`` from ``sqlalchemy.bin`` will just give you the result of ``sh('grep')``\n\nMultiple commands\n=================\n\nshalchemy does not currently (and probably never will) support multiple commands chained with ``&&`` like sh does.\n\n\nPython IO Redirects\n===================\n\nshalchemy supports redirects directly from standard Python io objects. That means this is fully supported:\n\n.. code:: python\n\n    from io import StringIO\n    from shalchemy import sh\n    from shalchemy.bin import cat\n    sh.run(cat < StringIO('my string'))\n\nProcess Substitutions\n=====================\n\nProcess substitution is a technique to make the output of a command\nlook like a file to the receiving process. One very common use of\nthis is when using the diff command. Suppose you wanted to diff the\nfile you have on disk with something on the internet. Normally, you\nwould do:\n\n.. code:: sh\n\n    curl example.com/file.txt > tempfile.txt\n    diff file.txt tempfile.txt\n    rm tempfile.txt\n\nBut actually you can do:\n\n.. code:: sh\n\n    diff file.txt <(curl example.com/file.txt)\n\nThe ``<(command)`` syntax makes sh create a temporary file in /dev/fd/xxxx. This\nis called Process Substitution.\n\nThe way you do the same with shalchemy is:\n\n.. code:: python\n\n    diff('file.txt', curl('example.com/file.txt').read_sub())\n\nOnce an expression's `read_sub` method is called, the result is a\nProcessSubstituteExpression which can no longer be composed with\nother expressions. It can only be used as an argument directly to\nother commands.\n\n.. code:: python\n\n    from io import StringIO\n    from shalchemy import sh\n    from shalchemy.bin import cat\n    sh.run(cat < StringIO('my string'))\n\nThere is also a ``write_sub`` equivalent to sh's ``>(expr)``.\n\n.. code:: python\n\n    sh.run(\n        cat('/usr/share/dict/words') |\n        bin.tee(\n            (cat > './words1.txt').write_sub(),\n            (cat > './words2.txt').write_sub(),\n        ) > '/dev/null'\n    )\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mechaform/shalchemy",
    "keywords": "sh shell bash",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shalchemy",
    "package_url": "https://pypi.org/project/shalchemy/",
    "platform": "",
    "project_url": "https://pypi.org/project/shalchemy/",
    "project_urls": {
      "Homepage": "https://github.com/mechaform/shalchemy"
    },
    "release_url": "https://pypi.org/project/shalchemy/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A shell scripting toolkit for Python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13041865,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "275ffc81a4a62eb1bdc2294c00f9b333046f0e15494919b7f10e16b4ce077031",
          "md5": "0723cb88d3a2ba33907340bf2ca53b04",
          "sha256": "f593ee699fdafe2047c2776e5d13da6a382fd24646b4294911bb49ad6ce1b8cd"
        },
        "downloads": -1,
        "filename": "shalchemy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0723cb88d3a2ba33907340bf2ca53b04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9829,
        "upload_time": "2022-02-07T10:49:02",
        "upload_time_iso_8601": "2022-02-07T10:49:02.072396Z",
        "url": "https://files.pythonhosted.org/packages/27/5f/fc81a4a62eb1bdc2294c00f9b333046f0e15494919b7f10e16b4ce077031/shalchemy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac8b6046ad4e441bebdb8409119821c505a502e1f52af0013e137072372daf35",
          "md5": "4756a11ffbacef29d7c2cbc74e4bef2e",
          "sha256": "f9ffbf371e4c45d68f0d57bcee77b70d3675ea20600209a5af86c9ad4c4cb8b9"
        },
        "downloads": -1,
        "filename": "shalchemy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4756a11ffbacef29d7c2cbc74e4bef2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9916,
        "upload_time": "2022-02-07T10:42:22",
        "upload_time_iso_8601": "2022-02-07T10:42:22.756018Z",
        "url": "https://files.pythonhosted.org/packages/ac/8b/6046ad4e441bebdb8409119821c505a502e1f52af0013e137072372daf35/shalchemy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "742c7ee35c2d5bf547ad7a12bf3bf40e9bd40fc6fb8d58c249487edb2ba9dffa",
          "md5": "18d9bd63b2560dfe63d701070bac7ba7",
          "sha256": "48b6fa58468d4c6e0e6c37479f87a8b1dba4282b2ceb0f16b545c9d25f07454a"
        },
        "downloads": -1,
        "filename": "shalchemy-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18d9bd63b2560dfe63d701070bac7ba7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18427,
        "upload_time": "2022-02-20T19:42:56",
        "upload_time_iso_8601": "2022-02-20T19:42:56.267639Z",
        "url": "https://files.pythonhosted.org/packages/74/2c/7ee35c2d5bf547ad7a12bf3bf40e9bd40fc6fb8d58c249487edb2ba9dffa/shalchemy-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ca9c7c77577242f728d124d04016768d6a1975415094c0c9b19a74da50b9133",
          "md5": "47975b9ad12b6e573144128392a2d62b",
          "sha256": "b20bba4eb181c74ca2b9c803c6f3311e6a8eb18078ceae3145833d982dbbd066"
        },
        "downloads": -1,
        "filename": "shalchemy-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47975b9ad12b6e573144128392a2d62b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16282,
        "upload_time": "2022-02-20T19:42:59",
        "upload_time_iso_8601": "2022-02-20T19:42:59.124677Z",
        "url": "https://files.pythonhosted.org/packages/7c/a9/c7c77577242f728d124d04016768d6a1975415094c0c9b19a74da50b9133/shalchemy-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53411229f23353c3c11606d131b1b5546b13c830db02171de98422bd1b949511",
          "md5": "c0b20289f0377775aaa4f918b64048e2",
          "sha256": "00a666c36c0b036c47ddfa1f2653747a37455e53844b40b79342289d117c5f85"
        },
        "downloads": -1,
        "filename": "shalchemy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0b20289f0377775aaa4f918b64048e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19214,
        "upload_time": "2022-03-01T04:48:44",
        "upload_time_iso_8601": "2022-03-01T04:48:44.092822Z",
        "url": "https://files.pythonhosted.org/packages/53/41/1229f23353c3c11606d131b1b5546b13c830db02171de98422bd1b949511/shalchemy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8fc04adc4f6dfc06e62b85f9c70f4d9dc8ec24e45e4a0faa629735aab4c3a4",
          "md5": "2d116c182439d528a74b6ca45e71b2d8",
          "sha256": "d060d44e26209cdc13476a28eab1e4f23af6f7ee114c0a36a51ddaadbae37bef"
        },
        "downloads": -1,
        "filename": "shalchemy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d116c182439d528a74b6ca45e71b2d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17478,
        "upload_time": "2022-03-01T04:48:48",
        "upload_time_iso_8601": "2022-03-01T04:48:48.964768Z",
        "url": "https://files.pythonhosted.org/packages/ab/8f/c04adc4f6dfc06e62b85f9c70f4d9dc8ec24e45e4a0faa629735aab4c3a4/shalchemy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad5b65f283319676050631d13c393082af7c76eaf2a0b5f01fceeee1f8003328",
          "md5": "adbf1e5cffb0fc6669a24e6abef3225e",
          "sha256": "d58b5eda150011e41a904381fe4ed512737d5830bde1b04da0bbef207188540c"
        },
        "downloads": -1,
        "filename": "shalchemy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adbf1e5cffb0fc6669a24e6abef3225e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19457,
        "upload_time": "2022-03-01T05:21:05",
        "upload_time_iso_8601": "2022-03-01T05:21:05.387930Z",
        "url": "https://files.pythonhosted.org/packages/ad/5b/65f283319676050631d13c393082af7c76eaf2a0b5f01fceeee1f8003328/shalchemy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60fcad64b25f7c3f9ff1e73626ceab1377808b8962f12f271b83a1c8e51d7f04",
          "md5": "beba1b41004d3da74988b04f7fa4a63d",
          "sha256": "47936a7cce012f0ceab0e08c120534ebcd6560f71eee78d004e6665aa15dc462"
        },
        "downloads": -1,
        "filename": "shalchemy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "beba1b41004d3da74988b04f7fa4a63d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17940,
        "upload_time": "2022-03-01T05:21:11",
        "upload_time_iso_8601": "2022-03-01T05:21:11.499167Z",
        "url": "https://files.pythonhosted.org/packages/60/fc/ad64b25f7c3f9ff1e73626ceab1377808b8962f12f271b83a1c8e51d7f04/shalchemy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad5b65f283319676050631d13c393082af7c76eaf2a0b5f01fceeee1f8003328",
        "md5": "adbf1e5cffb0fc6669a24e6abef3225e",
        "sha256": "d58b5eda150011e41a904381fe4ed512737d5830bde1b04da0bbef207188540c"
      },
      "downloads": -1,
      "filename": "shalchemy-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "adbf1e5cffb0fc6669a24e6abef3225e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19457,
      "upload_time": "2022-03-01T05:21:05",
      "upload_time_iso_8601": "2022-03-01T05:21:05.387930Z",
      "url": "https://files.pythonhosted.org/packages/ad/5b/65f283319676050631d13c393082af7c76eaf2a0b5f01fceeee1f8003328/shalchemy-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60fcad64b25f7c3f9ff1e73626ceab1377808b8962f12f271b83a1c8e51d7f04",
        "md5": "beba1b41004d3da74988b04f7fa4a63d",
        "sha256": "47936a7cce012f0ceab0e08c120534ebcd6560f71eee78d004e6665aa15dc462"
      },
      "downloads": -1,
      "filename": "shalchemy-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "beba1b41004d3da74988b04f7fa4a63d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17940,
      "upload_time": "2022-03-01T05:21:11",
      "upload_time_iso_8601": "2022-03-01T05:21:11.499167Z",
      "url": "https://files.pythonhosted.org/packages/60/fc/ad64b25f7c3f9ff1e73626ceab1377808b8962f12f271b83a1c8e51d7f04/shalchemy-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}