{
  "info": {
    "author": "Evgeny Fedoruk, Radware",
    "author_email": "evgenyf@radware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: OpenStack",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7"
    ],
    "description": ".. image:: http://www.radappliances.com/images/radware-logo.gif\n\n================================================\nNeutron LBaaS Radware driver for Openstack Rocky\n================================================\n\nThis Radware driver is the LBaaS v2 service provider driver for openstack ROCKY release.\n\n\n***********************************************************\nActivate and configure Radware's LBaaS v2 service provider:\n***********************************************************\n\n- Install the radware_nlbaas_v2_rocky_driver package by executing the following command (use sudo if needed):\n\n\t.. code-block:: python\n\n\t\tpip install radware_nlbaas_v2_rocky_driver\n\n- Open the neutron configuration file named neutron_lbaas.conf. Under *[service_providers]* section, next to already defined providers, add a new line, declaring the Radware LOADBALANCER v2 provider. The neutron service provider configuration line format consists of three identifiers delimited by a colon:\n\n\t- The service name, for LBaaS v2 service it's LOADBALANCERV2.\n\t- The service provider name, in the example we will use \"rdwr\"\n\t- The service provider driver FQN. *radware_nlbaas_v2_rocky_driver.radware_lbaas_driver.RadwareLBaaSV2Driver* is the driver class FQN\n\n\t.. code-block:: python\n\n\t\tservice_provider = LOADBALANCERV2:rdwr:radware_nlbaas_v2_rocky_driver.radware_lbaas_driver.RadwareLBaaSV2Driver\n\n\tYou may add the \":default\" at the end of the line for making this service provider a default service provider.\n\tFor a reference:\n\n\t.. code-block:: python\n\n\t\tservice_provider = LOADBALANCERV2:rdwr:radware_nlbaas_v2_rocky_driver.radware_lbaas_driver.RadwareLBaaSV2Driver:default\n\n\t**Note: There may be only one default service provider.**\n\n- In neutron_lbaas.conf file, add a new section where driver's configuration parameters will be set.\n\tThe name of the section should be radware_lbaas_driver, alike the driver's python module name.\n\tAdd driver's parameters under this section, for a reference:\n\n\t.. code-block:: python\n\n\t\t[radware_lbaas_driver]\n\t\tvdirect_address = 192.168.10.20\n\n\tSee all possible parameters description in this README.rst file\n\n- The service provider configuation for Radware driver may also be defined in a proprietary configuration file.\n\tYou may create this file under two possible locations: \"/etc/radware\" and \"/etc/neutron\".\n\tThe order matters here. If configuration file was found under first location, second location will be skipped.\n\tThe name of the file should be like the driver python package name followed by \".conf\",\n\tin our case - \"radware_lbaas_driver.conf\".\n\n\t**Note:Pay attention to the configuration file permissions and owner, the file should have read permissions for neutron user.**\n\n\tThe name of the section should be [DEFAULT].\n\tAdd driver's parameters under the DEFAULT section, for a reference:\n\n\t.. code-block:: python\n\n\t\t[DEFAULT]\n\t\tvdirect_address = 192.168.10.20\n\n\tSee all possible parameters description in this README.rst file\n\n\n- Restart the neutron-server service\n\t\n**********************************\nUsing Radware's LBaaS v2 provider:\n**********************************\n\nFor LB creation with Radware provider specify the radware provider in lbaas-loadbalancer-create CLI command.\nFor example, if the name of the radware provider is **rdwr**, provider configuration\nline in neutron configuration file will be:\n\n.. code-block:: python\n\n\tservice_provider = LOADBALANCERV2:rdwr:radware_nlbaas_v2_rocky_driver.radware_lbaas_driver.RadwareLBaaSV2Driver:default\n\n\nCLI command will be:\n\n.. code-block:: python\n\n\tneutron lbaas-loadbalancer-create --provider rdwr ...\n\n\n************************************************\nDriver's configuration parameters specification:\n************************************************\n\nFollowing is a list of all driver configuration parameters.\nThe only mandatory parameter is vdirect_address. Other parameters have default values\n\n* *vdirect_address*: The primary / standalone vDirect server IP address. **This parameter is mandatory**.\n* *ha_secondary_address*:  The secondary vDirect server IP address when vDirect HA pair is used.\n* *vdirect_user*: The vDirect server user name, the default is root.\n* *vdirect_password*: The vDirect server user password, the default is radware.\n* *port*: The vDirect server port. The default is the default vDirect server HTTPS port 2189.\n* *ssl*: Use HTTPS for vDirect server connections, the default is True. If False is set, HTTP connections will be used.\n* *ssl_verify_context*: Verify SSL certificates on HTTPS connections. the default is True. \n* *timeout*: vDirect server HTTP[S] connection timeout, the default is 5000 milliseconds.\n* *base_uri*: vDirect server REST API base uri, the default is ''.\n* *service_adc_type*: ADC service type. Options are: VA or VX, the default is VA.\n* *service_ha_pair*: Enables or disables ADC service HA-pair, the default is False.\n* *configure_allowed_address_pairs*: configure specific allowed address pairs on VIP and PIP ports, in addition to a general CIDR allowed address pair configuration, the default is False.\n* *service_throughput*: Service throughput, the default is 1000.\n* *service_ssl_throughput*: Service SSL throughput, the default is 100.\n* *service_compression_throughput*: Service compression throughput, the default is 100.\n* *service_cache*: The size of ADC service cache, the default is 20.\n* *service_resource_pool_ids*: The list of vDirect server's resource pools to use for ADC service provissioning, the default is empty.\n* *service_isl_vlan*: A required VLAN for the interswitch link to use, the default is -1.\n* *service_session_mirroring_enabled*: Enable or disable Alteon interswitch link for stateful session failover the default is False.\n\n\n***********************************************************************\nCreating another Radware service provider with different configuration:\n***********************************************************************\n\nSince no flavoring mechanism is currently available for service providers and driver FQN is unique,\nanother Radware driver may be created and set as another LBAAS v2 service provider in neutron.\n\nThis driver package already contains an example python module called **another_lbaas_driver**.\nThose are the steps to create and configure another Radware LBaaS v2 service provider with different configuration:\n\n- The **radware_nlbaas_v2_rocky_driver** package contains following modules:\n\n\t- *__init__.py*\n\t- *conig.py*\n\t- *exceptions.py*\n\t- *rest_client.py*\n\t- *base_driver.py*\n\t- *radware_lbaas_driver.py*\n\t- *another_lbaas_driver.py*\n\n- Create a new python module which will contain your new driver class.\n\n\tFor example, the name will be *\"another_lbaas_driver\"*.\n\tThe driver class should be implemented by following rules:\n\n\t* It should import the **radware_lbaas_driver** module and inherit from **radware_lbaas_driver.RadwareLBaaSV2Driver** class.\n\t* the **__init__** function should get the plugin as parameter and call the base class **__init__** function with the plugin and the module **__name__** attribute.\n\n\tExample of *another_lbaas_driver.py* module file:\n\n\t.. code-block:: python\n\n\t\timport radware_lbaas_driver\n\n\n\t\tclass AnotherRadwareLBaaSV2Driver(radware_lbaas_driver.RadwareLBaaSV2Driver):\n\t\t\tdef __init__(self, plugin):\n\t\t\t\tradware_lbaas_driver.RadwareLBaaSV2Driver.__init__(self, plugin, __name__)\n\n- Configure the new driver as another LBaaS v2 service provider in neutron configuration file\n\n\tThe service provider configuration line for this driver will be:\n\n\t.. code-block:: python\n\n\t\tservice_provider = LOADBALANCERV2:another_rdwr:radware_nlbaas_v2_rocky_driver.another_lbaas_driver.AnotherRadwareLBaaSV2Driver\n\n\tThe service provider configuration parameter for this driver will be, for example:\n\n\t\t.. code-block:: python\n\t\t   \n\t\t\t[another_lbaas_driver]\n\t\t\tvdirect_address = 192.168.10.20\n\t\t\tservice_adc_type = VX\n\t\t\tservice_ha_pair = true\n\t\t\tssl_verify_context = false\n\t\t\n\tYou can, of course, define provider's configuration in a proprietary configuration file like was described above.\n\tThe name of the file should be like the driver python package name followed by \".conf\",\n\tin our case - \"radware_lbaas_driver.conf\"\n\tIn this case the name of the configuration file should be like the driver python package name followed by \".conf\",\n\t- \"another_lbaas_driver.conf\"\n\n\tThe LB creation CLI command for creating a new LB with this new provider will be:\n\n\t.. code-block:: python\n\n\t\tneutron lbaas-loadbalancer-create --provider another_rdwr ...\n\n\t**After changing the service providers configuration in neutron configuration file, neutron server service restart is needed.**\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/radware_nlbaas_v2_rocky_driver",
    "keywords": "radware",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "radware_nlbaas_v2_rocky_driver",
    "package_url": "https://pypi.org/project/radware_nlbaas_v2_rocky_driver/",
    "platform": "",
    "project_url": "https://pypi.org/project/radware_nlbaas_v2_rocky_driver/",
    "project_urls": {
      "Homepage": "https://pypi.python.org/pypi/radware_nlbaas_v2_rocky_driver"
    },
    "release_url": "https://pypi.org/project/radware_nlbaas_v2_rocky_driver/4.7.0.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Neutron LBaaS Radware driver for Openstack Rocky",
    "version": "4.7.0.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4893255,
  "releases": {
    "4.7.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2a7bd3a3a453597e9cd0ca82bb2d3433725db983f815b972e26fd27f9ff6caa",
          "md5": "1dc61a3883fa71b773a131d81ccdcbd8",
          "sha256": "7fbe039fdbd594f591d2f49a6cfcd7c9b91767dd59727bcb18ca3c731c75074e"
        },
        "downloads": -1,
        "filename": "radware_nlbaas_v2_rocky_driver-4.7.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "1dc61a3883fa71b773a131d81ccdcbd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23512,
        "upload_time": "2019-01-23T12:59:26",
        "upload_time_iso_8601": "2019-01-23T12:59:26.867003Z",
        "url": "https://files.pythonhosted.org/packages/e2/a7/bd3a3a453597e9cd0ca82bb2d3433725db983f815b972e26fd27f9ff6caa/radware_nlbaas_v2_rocky_driver-4.7.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.7.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5cc3cc5e51d274730e7ea72f63e7b4b476a903b94c56169f26577f3b6415ca1",
          "md5": "a4f8b4506a8fc4ee48c3ba10292fca7f",
          "sha256": "597975fd406c4abfb368e3f5e7957ecebba4ba8ffd0222689a3acb12369ca22a"
        },
        "downloads": -1,
        "filename": "radware_nlbaas_v2_rocky_driver-4.7.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "a4f8b4506a8fc4ee48c3ba10292fca7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24408,
        "upload_time": "2019-03-04T07:58:48",
        "upload_time_iso_8601": "2019-03-04T07:58:48.207501Z",
        "url": "https://files.pythonhosted.org/packages/a5/cc/3cc5e51d274730e7ea72f63e7b4b476a903b94c56169f26577f3b6415ca1/radware_nlbaas_v2_rocky_driver-4.7.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5cc3cc5e51d274730e7ea72f63e7b4b476a903b94c56169f26577f3b6415ca1",
        "md5": "a4f8b4506a8fc4ee48c3ba10292fca7f",
        "sha256": "597975fd406c4abfb368e3f5e7957ecebba4ba8ffd0222689a3acb12369ca22a"
      },
      "downloads": -1,
      "filename": "radware_nlbaas_v2_rocky_driver-4.7.0.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "a4f8b4506a8fc4ee48c3ba10292fca7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24408,
      "upload_time": "2019-03-04T07:58:48",
      "upload_time_iso_8601": "2019-03-04T07:58:48.207501Z",
      "url": "https://files.pythonhosted.org/packages/a5/cc/3cc5e51d274730e7ea72f63e7b4b476a903b94c56169f26577f3b6415ca1/radware_nlbaas_v2_rocky_driver-4.7.0.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}