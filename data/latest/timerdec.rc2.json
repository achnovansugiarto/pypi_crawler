{
  "info": {
    "author": "Matteo Ferrabone",
    "author_email": "matteo.ferrabone@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# timerdec\nSimple decorators for measuring Python methods execution time. \nMethods are called a configurable number of times (4 by default), and statistics are printed at the end of execution.\n\n## API\n\n### Decorators\n\nThere are two decorators available, timerdec and timerdec_always. The difference between the two is that timerdec_always is always executed, while timerdec is executed only if a decorated method is specifically requested at runtime by setting the TIMERDEC_METHODS environment variable as explained below.\n\n#### Decorators Code Example\n\n```python\nfrom timerdec.decorators import timerdec, timerdec_always, nowdec\nfrom timerdec.snapshots import now\nimport time\nimport numpy as np\n\n#We can require timing information collection for function r at run time.\n@timerdec()\ndef r(size1, size2):\n    return np.random.rand(size1, size2)\n\nclass cl():\n    def __init__(self):\n        pass\n\n    #We can require timing information collection for method f at run time. A progress bar will be printed\n\n    @timerdec(progress=True)\n    def f(self):\n        a = r(1000, 1000)\n        b = r(1000, 1000)\n        c = np.dot(a,b)\n\n    #Timing information will always be collected for this method. Method is run 1000 times\n    @timerdec_always(1000)\n    def dummy(self, a):\n        pass\n\nc = cl()\n\ndef do():\n    c.f()\n    c.dummy(a=\"dummy data\")\n\nnow('before do')\ndo()\nnow('after do')\n\n\ndef ultima(s):\n    time.sleep(1)\n    return s\n\n\n\n#We can also wrap function calls\nres1 = timerdec_always()(ultima)(\"Hello!\")\nprint(res1)\n\n#Subsequent calls of functions with inline (non decorator) wrapping will not be object of measures\nres2 = ultima('Bye!')\nprint(res2)\n\nvec = np.zeros((1000,1000))\n\nnow()\n\n#It is possible to inline wrap object methods as well\nres3 =  timerdec_always()(vec.astype)(np.uint8)\n\nnow()\n\n\n```\n\n#### Execution and Configuration\n\nOn execution, statistics are collected and results are printed at the end of execution. Fore each measured methid there will be a line containin wall clock time average and variance, user, system, children user and children system time. \n\nIf no environment variable is set, timerdec will collect information only for the methods decorated with timerdec_always.\n``` shell\npython3 test.py\n```\nwhich outputs:\n```\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ndarray.astype           : 1.33E-03 4.33E-06 (2.50E-03, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ultima                   : 1.00E+00 2.21E-07 (0.00E+00, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method cl.dummy                 : 2.54E-07 3.38E-15 (2.00E-05, 0.00E+00 0.00E+00, 0.00E+00). Reps: 1000\n\n```\n\nThe TIMERDEC_METHODS can be set including a list of semicolon separated method names.\n``` shell\nTIMERDEC_METHODS=\"cl.f;r\"   python3 test.py\n```\n```\n100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:04<00:00,  1.04s/it]\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ndarray.astype           : 8.41E-04 4.00E-07 (0.00E+00, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ultima                   : 1.00E+00 8.45E-09 (0.00E+00, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method cl.dummy                 : 3.12E-07 4.43E-14 (3.00E-05, 0.00E+00 0.00E+00, 0.00E+00). Reps: 1000\nAvg time and std dev (usr, sys, usr_child, sys_child) for method cl.f                     : 6.21E-01 1.91E-04 (5.97E-01, 2.00E-02 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method r                        : 8.21E-03 2.43E-05 (6.25E-03, 2.50E-03 0.00E+00, 0.00E+00). Reps: 32\n\n\n```\n\nTo avoid benchmarking the same method many times, set the variable TIMERDEC_RERUN to false:\n``` shell\nTIMERDEC_METHODS=\"cl.f;r\" TIMERDEC_RERUN=false   python3 test.py\n```\n```\n100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:04<00:00,  1.04s/it]\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ndarray.astype           : 8.41E-04 4.00E-07 (0.00E+00, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method ultima                   : 1.00E+00 8.45E-09 (0.00E+00, 0.00E+00 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method cl.dummy                 : 3.12E-07 4.43E-14 (3.00E-05, 0.00E+00 0.00E+00, 0.00E+00). Reps: 1000\nAvg time and std dev (usr, sys, usr_child, sys_child) for method cl.f                     : 6.21E-01 1.91E-04 (5.97E-01, 2.00E-02 0.00E+00, 0.00E+00). Reps: 4\nAvg time and std dev (usr, sys, usr_child, sys_child) for method r                        : 8.21E-03 2.43E-05 (6.25E-03, 2.50E-03 0.00E+00, 0.00E+00). Reps: 32\n\n\n```\n\n\n### Snapshots\n\nTo evaluate the time taken btween two points in the code, the now() method in module timerdec.snapshots is provided.\n\n```python\nimport time\nfrom timerdec.snapshots import now\n\ndef do():\n    now()\n    time.sleep(3)\n    now()\n\ndo()\n\n```\n\nWill print time from startup and from previous call to now itself:\n\n```python\nTime at <stdin>:2:do             : 3.41271E+01.\nTime at <stdin>:4:do             : 3.71351E+01. Since previous call to self: 3.00798E+00\n\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/desmoteo/timerdec",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timerdec",
    "package_url": "https://pypi.org/project/timerdec/",
    "platform": "",
    "project_url": "https://pypi.org/project/timerdec/",
    "project_urls": {
      "Homepage": "https://github.com/desmoteo/timerdec"
    },
    "release_url": "https://pypi.org/project/timerdec/0.0.4/",
    "requires_dist": [
      "psutil",
      "tqdm"
    ],
    "requires_python": ">=3.6",
    "summary": "Simple decorators for measuring Python methods execution time",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8730582,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42aa043c0db71cf5f8149a0e6903f9d807fbb6c7175cf407563ce110bea8b94b",
          "md5": "434113169188beb6877d6dca2c310366",
          "sha256": "3eb93af0c2964155616f5f136bf0b653bd9917ee4b7723f0abba839d0d898741"
        },
        "downloads": -1,
        "filename": "timerdec-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "434113169188beb6877d6dca2c310366",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4492,
        "upload_time": "2020-11-10T00:20:45",
        "upload_time_iso_8601": "2020-11-10T00:20:45.451255Z",
        "url": "https://files.pythonhosted.org/packages/42/aa/043c0db71cf5f8149a0e6903f9d807fbb6c7175cf407563ce110bea8b94b/timerdec-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21a4c0b773b40f8f6df4dd6d58e0c4eb99cb93a78a70091a7ef310517d1c4a53",
          "md5": "cd81bea9816008db31e271c8253d97ba",
          "sha256": "ee73c195b689ba5626911dfe03e2b2f787dec2eb7507a4540783055529ca7ad7"
        },
        "downloads": -1,
        "filename": "timerdec-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd81bea9816008db31e271c8253d97ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6386,
        "upload_time": "2020-11-23T18:35:18",
        "upload_time_iso_8601": "2020-11-23T18:35:18.047775Z",
        "url": "https://files.pythonhosted.org/packages/21/a4/c0b773b40f8f6df4dd6d58e0c4eb99cb93a78a70091a7ef310517d1c4a53/timerdec-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21a4c0b773b40f8f6df4dd6d58e0c4eb99cb93a78a70091a7ef310517d1c4a53",
        "md5": "cd81bea9816008db31e271c8253d97ba",
        "sha256": "ee73c195b689ba5626911dfe03e2b2f787dec2eb7507a4540783055529ca7ad7"
      },
      "downloads": -1,
      "filename": "timerdec-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd81bea9816008db31e271c8253d97ba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6386,
      "upload_time": "2020-11-23T18:35:18",
      "upload_time_iso_8601": "2020-11-23T18:35:18.047775Z",
      "url": "https://files.pythonhosted.org/packages/21/a4/c0b773b40f8f6df4dd6d58e0c4eb99cb93a78a70091a7ef310517d1c4a53/timerdec-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}