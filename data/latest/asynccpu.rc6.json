{
  "info": {
    "author": "Yukihiko Shinoda",
    "author_email": "yuk.hik.future@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# Asynchronous CPU\n\n[![Test](https://github.com/yukihiko-shinoda/asynccpu/workflows/Test/badge.svg)](https://github.com/yukihiko-shinoda/asynccpu/actions?query=workflow%3ATest)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/897e1ce2259cf3479da8/test_coverage)](https://codeclimate.com/github/yukihiko-shinoda/asynccpu/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/897e1ce2259cf3479da8/maintainability)](https://codeclimate.com/github/yukihiko-shinoda/asynccpu/maintainability)\n[![Code Climate technical debt](https://img.shields.io/codeclimate/tech-debt/yukihiko-shinoda/asynccpu)](https://codeclimate.com/github/yukihiko-shinoda/asynccpu)\n[![Updates](https://pyup.io/repos/github/yukihiko-shinoda/asynccpu/shield.svg)](https://pyup.io/repos/github/yukihiko-shinoda/asynccpu/)\n[![Python versions](https://img.shields.io/pypi/pyversions/asynccpu.svg)](https://pypi.org/project/asynccpu)\n[![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2Fyukihiko-shinoda%2Fasynccpu)](http://twitter.com/share?text=Asynchronous%20CPU&url=https://pypi.org/project/asynccpu/&hashtags=python)\n\nSupports async / await pattern for CPU-bound operations.\n\n## Advantage\n\n1. Support async / await pattern for CPU-bound operations\n2. Free from handling event loop\n\n### 1. Support async / await pattern for CPU-bound operations\n\nThe async / await syntax makes asynchronous code as:\n\n- Simple\n- Readable\n\nThis syntax is not only for I/O-bound but also CPU-bound operations.\nThis package supports [`Coroutine`] function to run in [`ProcessPoolExecutor`] and returns [`Awaitable`] object.\n\n### 2. Free from handling event loop\n\n[`asyncio`] is focusing not CPU-bound but I/O-bound operations.\nHigh-level APIs of [`asyncio`] doesn't support CPU-bound operations\nsince it works based on not [`ProcessPoolExecutor`] but [`ThreadPoolExecutor`].\nWhen we want to run CPU-bound operations concurrently with [`asyncio`],\nwe need to use Low-level APIs which need finer control over the event loop behavior.\n\nApplication developers should typically use the High-level [`asyncio`] functions, such as asyncio.run(),\nand should rarely need to reference Low-level APIs, such as the Event Loop object or call its methods.\n\nSee: [Event Loop — Python 3 documentation](https://docs.python.org/3/library/asyncio-eventloop.html)\n\n## Quickstart\n\n### 1. Install\n\n```console\npip install asynccpu\n```\n\n### 2. Implement\n\nThis package provides `ProcessTaskPoolExecutor` extends [`ProcessPoolExecutor`],\nAnd its instance has the method: `create_process_task()`.\n\nEx:\n\n```python\nimport asyncio\nfrom asynccpu import ProcessTaskPoolExecutor\n\n\nasync def process_cpu_bound(task_id):\n    \"\"\"\n    CPU-bound operations will block the event loop:\n    in general it is preferable to run them in a process pool.\n    \"\"\"\n    return f\"task_id: {task_id}, result: {sum(i * i for i in range(10 ** 7))}\"\n\n\nwith ProcessTaskPoolExecutor(max_workers=3, cancel_tasks_when_shutdown=True) as executor:\n    awaitables = {executor.create_process_task(process_cpu_bound, x) for x in range(10)}\n    results = await asyncio.gather(*awaitables)\n    for result in results:\n        print(result)\n```\n\n### Note\n\nThe argument of [`Coroutine`] requires not \"raw [`Coroutine`] object\" but \"[`Coroutine`] function\"\nsince raw [`Coroutine`] object is not picklable.\n\nThis specification is depend on the one of Python [`multiprocessing`] package:\n\n[multiprocessing — Process-based parallelism]\n\n> Note When an object is put on a queue, the object is pickled\n> and a background thread later flushes the pickled data to an underlying pipe.\n\n<!-- markdownlint-disable-next-line no-inline-html -->\nSee: [Answer: Python multiprocessing PicklingError: Can't pickle <type 'function'> - Stack Overflow]\n\n<!-- markdownlint-disable no-trailing-punctuation -->\n## How do I...\n<!-- markdownlint-enable no-trailing-punctuation -->\n\n<!-- markdownlint-disable no-trailing-punctuation -->\n### Capture log from subprocess?\n<!-- markdownlint-enable no-trailing-punctuation -->\n\nEx:\n\n```python\nimport asyncio\nimport multiprocessing\nfrom logging import DEBUG, Formatter, StreamHandler, getLogger, handlers\nfrom asynccpu import ProcessTaskPoolExecutor\n\n\ndef listener_configurer():\n    console_handler = StreamHandler()\n    console_handler.setFormatter(Formatter(\"[%(levelname)s/%(processName)s] %(message)s\"))\n    # Key Point 4\n    return handlers.QueueListener(queue, console_handler)\n\n\ndef worker_configurer():\n    root_logger = getLogger()\n    root_logger.setLevel(DEBUG)\n\n\nwith multiprocessing.Manager() as manager:\n    # Key Point 2\n    queue = manager.Queue()\n    listener = listener_configurer()\n    listener.start()\n    with ProcessTaskPoolExecutor(\n        max_workers=3,\n        cancel_tasks_when_shutdown=True,\n        # Key Point 1\n        queue=queue,\n        # Key Point 3\n        configurer=worker_configurer\n    ) as executor:\n        futures = {executor.create_process_task(process_cpu_bound, x) for x in range(10)}\n        return await asyncio.gather(*futures)\n    listener.stop()\n```\n\nThis implementation is based on following document:\n\n[Logging to a single file from multiple processes | Logging Cookbook — Python 3 documentation]\n\n#### Key Points\n\n1. Inject *special* [`queue.Queue`] object into subprocess\n2. Create *special* [`queue.Queue`] object via [`multiprocessing.Manager`]\n3. Inject configurer to configure logger for Windows\n4. Consider to use [`logging.handlers.QueueListener`]\n\n##### 1. Inject *special* `queue.Queue` object into subprocess\n\nWe can capture logs from subprocess via [`queue.Queue`] object.\n[`logging.handlers.QueueHandler`] is often used for multi-threaded, multi-process code logging.\n\nSee: [Logging Cookbook — Python 3 documentation]\n\n`ProcessTaskPoolExecutor` automatically set `queue` argument into root logger as [`logging.handlers.QueueHandler`] if `queue` argument is set.\n\n##### 2. Create *special* [`queue.Queue`] object via [`multiprocessing.Manager`]\n\nWe have to create [`queue.Queue`] object via [`multiprocessing.Manager`] due to limitation of [`ProcessPoolExecutor`] running inside,\notherwise, following error raised when refer queue argument in child process:\n\n```console\nRuntimeError: Queue objects should only be shared between processes through inheritance\n```\n\n[`multiprocessing.Manager`] instantiates *special* [`queue.Queue`] object (*Proxy Object*).\n\nSee:\n\n- [Using concurrent.futures.ProcessPoolExecutor | Logging Cookbook — Python 3 documentation]\n- [Proxy Objects | multiprocessing — Process-based parallelism — Python 3 documentation]\n\n##### 3. Inject configurer to configure logger for Windows\n\nOn POSIX, subprocess will share loging configuration with parent process by process fork semantics.\nOn Windows you can't rely on fork semantics,\nso each process requires to run the logging configuration code when it starts.\n\n`ProcessTaskPoolExecutor` will automatically execute `configurer` argument\nbefore starting [`Coroutine`] function.\n\nThis design is based on following document:\n\n[Logging to a single file from multiple processes | Logging Cookbook — Python 3 documentation]\n\nFor instance, this allows us to set log level in subprocess on Windows.\n\nNote that configuring root logger in subprocess seems to effect parent process on POSIX.\n\n##### 4. Consider to use [`logging.handlers.QueueListener`]\n\nWe don't have to create an implementation on the Listener process from scratch, we can use it right away with [`logging.handlers.QueueListener`].\n\n## Credits\n\nThis package was created with [Cookiecutter] and the [yukihiko-shinoda/cookiecutter-pypackage] project template.\n\n[`Coroutine`]: https://docs.python.org/3/library/asyncio-task.html#coroutines\n[`ProcessPoolExecutor`]: https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor\n[`Awaitable`]: https://docs.python.org/3/library/asyncio-task.html#awaitables\n[`asyncio`]: https://docs.python.org/3/library/asyncio.html\n[`ThreadPoolExecutor`]: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor\n[`multiprocessing`]: https://docs.python.org/3/library/multiprocessing.html\n[multiprocessing — Process-based parallelism]: https://docs.python.org/3/library/multiprocessing.html\n<!-- markdownlint-disable-next-line no-inline-html -->\n[Answer: Python multiprocessing PicklingError: Can't pickle <type 'function'> - Stack Overflow]: https://stackoverflow.com/a/8805244/12721873\n[Logging to a single file from multiple processes | Logging Cookbook — Python 3 documentation]: https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes\n[`queue.Queue`]: (https://docs.python.org/3/library/queue.html#queue.Queue)\n[`multiprocessing.Manager`]: https://docs.python.org/3/library/multiprocessing.html#managers\n[`logging.handlers.QueueListener`]: https://docs.python.org/3/library/logging.handlers.html#queuelistener\n[`logging.handlers.QueueHandler`]: https://docs.python.org/3/library/logging.handlers.html#queuehandler\n[Logging Cookbook — Python 3 documentation]: https://docs.python.org/3/howto/logging-cookbook.html\n[Using concurrent.futures.ProcessPoolExecutor | Logging Cookbook — Python 3 documentation]: https://docs.python.org/3/howto/logging-cookbook.html#using-concurrent-futures-processpoolexecutor\n[Proxy Objects | multiprocessing — Process-based parallelism — Python 3 documentation]: https://docs.python.org/3/library/multiprocessing.html#multiprocessing-proxy-objects\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[yukihiko-shinoda/cookiecutter-pypackage]: https://github.com/audreyr/cookiecutter-pypackage\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yukihiko-shinoda/asynccpu",
    "keywords": "asynccpu",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asynccpu",
    "package_url": "https://pypi.org/project/asynccpu/",
    "platform": "",
    "project_url": "https://pypi.org/project/asynccpu/",
    "project_urls": {
      "Homepage": "https://github.com/yukihiko-shinoda/asynccpu"
    },
    "release_url": "https://pypi.org/project/asynccpu/1.2.2/",
    "requires_dist": [
      "psutil"
    ],
    "requires_python": ">=3.8",
    "summary": "Supports async / await pattern for CPU-bound operations.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11185453,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e357ff31bccd875985fa6d9579cfba11c5d796ff2c27244ed7196b00cf15b126",
          "md5": "d0bdb14231d1da79f613d2b2a1453855",
          "sha256": "6b856aa6133a4ded3d775e9508b256b73a37995de40fceda1c7aaed6b3a846fb"
        },
        "downloads": -1,
        "filename": "asynccpu-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0bdb14231d1da79f613d2b2a1453855",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14524,
        "upload_time": "2021-02-23T11:38:01",
        "upload_time_iso_8601": "2021-02-23T11:38:01.798626Z",
        "url": "https://files.pythonhosted.org/packages/e3/57/ff31bccd875985fa6d9579cfba11c5d796ff2c27244ed7196b00cf15b126/asynccpu-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49d40ca6636f9323990c0c62db15a4a692ebf066c592beb0b44f22158d100728",
          "md5": "c0eb40cd91754fbd71da33dd9e8451c4",
          "sha256": "ea21de1400408edb88462a9b7f0c4aa6500531c0898b6b355b62d2b11f332920"
        },
        "downloads": -1,
        "filename": "asynccpu-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c0eb40cd91754fbd71da33dd9e8451c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13535,
        "upload_time": "2021-02-23T11:38:02",
        "upload_time_iso_8601": "2021-02-23T11:38:02.846778Z",
        "url": "https://files.pythonhosted.org/packages/49/d4/0ca6636f9323990c0c62db15a4a692ebf066c592beb0b44f22158d100728/asynccpu-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80bf1f359ffb18c1a4348d263d1700fb0ca9fe52641f38d8b14eb8b0d134411b",
          "md5": "8cc93a5cdc9f96108860ae762e9050e3",
          "sha256": "306c8d101fca2196af2d14a5a7ff4e6b8d305fb21e721fe57b737a1bfc49f77f"
        },
        "downloads": -1,
        "filename": "asynccpu-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cc93a5cdc9f96108860ae762e9050e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6489,
        "upload_time": "2021-03-14T02:28:08",
        "upload_time_iso_8601": "2021-03-14T02:28:08.725865Z",
        "url": "https://files.pythonhosted.org/packages/80/bf/1f359ffb18c1a4348d263d1700fb0ca9fe52641f38d8b14eb8b0d134411b/asynccpu-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81042411837e71c13d65ee6f8cf5516a740e0922506be5ecb381b762ed63fb14",
          "md5": "d2b979e909dc3c0bd6b3ac85fc2baae8",
          "sha256": "14cc3cadd25efb127932040df7e6b98fce92d1f0ec59eb5c018c1c1cba388f37"
        },
        "downloads": -1,
        "filename": "asynccpu-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2b979e909dc3c0bd6b3ac85fc2baae8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8490,
        "upload_time": "2021-03-14T02:28:09",
        "upload_time_iso_8601": "2021-03-14T02:28:09.715171Z",
        "url": "https://files.pythonhosted.org/packages/81/04/2411837e71c13d65ee6f8cf5516a740e0922506be5ecb381b762ed63fb14/asynccpu-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d87b36728ccd5a910c8fc9ed72cbd40ead0272eebf684b4ad7ad431ffc9156f",
          "md5": "dbd89862e8f0652a5229722ef38804c1",
          "sha256": "2567f506ea2d53af57fb87b1e11bdc75a5eda62a3de766506f575eebaf2cbd0a"
        },
        "downloads": -1,
        "filename": "asynccpu-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbd89862e8f0652a5229722ef38804c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7716,
        "upload_time": "2021-03-14T06:58:45",
        "upload_time_iso_8601": "2021-03-14T06:58:45.655654Z",
        "url": "https://files.pythonhosted.org/packages/7d/87/b36728ccd5a910c8fc9ed72cbd40ead0272eebf684b4ad7ad431ffc9156f/asynccpu-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5add33b3c98d25950f46ba084b8744f953f716a842e102e67c42448d7d644c23",
          "md5": "4358e5fc02c4fda41e843c20bf2a8556",
          "sha256": "69e51e57e8528c9a8a06de19cab4d48e1de9b2b237b7951941d7f13229dc5d33"
        },
        "downloads": -1,
        "filename": "asynccpu-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4358e5fc02c4fda41e843c20bf2a8556",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11088,
        "upload_time": "2021-03-14T06:58:46",
        "upload_time_iso_8601": "2021-03-14T06:58:46.574793Z",
        "url": "https://files.pythonhosted.org/packages/5a/dd/33b3c98d25950f46ba084b8744f953f716a842e102e67c42448d7d644c23/asynccpu-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5224eb093ef78f40584ef1656c00301f1644c87f91717e745f48539593cc3f2f",
          "md5": "d1856a68f8ce264956095cb5d3b52a43",
          "sha256": "a0cfb5e84a34ce58ac34a3080c8ae30c76405836b36de18b6d3e48eba41cbaa5"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1856a68f8ce264956095cb5d3b52a43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12652,
        "upload_time": "2021-08-13T14:20:02",
        "upload_time_iso_8601": "2021-08-13T14:20:02.937161Z",
        "url": "https://files.pythonhosted.org/packages/52/24/eb093ef78f40584ef1656c00301f1644c87f91717e745f48539593cc3f2f/asynccpu-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74d565d33d0f31784c932527d358aab77a82135f9382cd1d76bd8d735e1cd5b4",
          "md5": "c84944f885c68692a46845d1be17fa64",
          "sha256": "29ed457af03729c24ea1152174ee5abd30d8eabcd5bc9e4d52c21946fec64139"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c84944f885c68692a46845d1be17fa64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15771,
        "upload_time": "2021-08-13T14:20:04",
        "upload_time_iso_8601": "2021-08-13T14:20:04.498353Z",
        "url": "https://files.pythonhosted.org/packages/74/d5/65d33d0f31784c932527d358aab77a82135f9382cd1d76bd8d735e1cd5b4/asynccpu-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f66d6db81b7469a698a8d573bec1c79442b561de3226e9261df4a68ddbe6ee1",
          "md5": "d934cb69fc7b5e9a5506e510fe7a6545",
          "sha256": "0b532737078d6b983943ae3864be766931ba9b70d49e9fcafc8be000eba772e0"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d934cb69fc7b5e9a5506e510fe7a6545",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12637,
        "upload_time": "2021-08-14T16:37:14",
        "upload_time_iso_8601": "2021-08-14T16:37:14.332437Z",
        "url": "https://files.pythonhosted.org/packages/0f/66/d6db81b7469a698a8d573bec1c79442b561de3226e9261df4a68ddbe6ee1/asynccpu-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e873d4b68446290c027d0fea42f05998ac668d01c591085bb9745b68d79d551e",
          "md5": "b409f3cc94cbfe43a418d3beae5e3e59",
          "sha256": "39e277e88883ccd0ac2359bd54ada023cd0db912eb29e3d64d1160c7b9c9fead"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b409f3cc94cbfe43a418d3beae5e3e59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15749,
        "upload_time": "2021-08-14T16:37:15",
        "upload_time_iso_8601": "2021-08-14T16:37:15.389984Z",
        "url": "https://files.pythonhosted.org/packages/e8/73/d4b68446290c027d0fea42f05998ac668d01c591085bb9745b68d79d551e/asynccpu-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b521849dea858c1465bccfd4b66dd9d48bd4d015c58fcf09c05f486dfd729e3",
          "md5": "14a04720a8dfea1d5271212cea5ab81e",
          "sha256": "e65698416e7461b02a72d2ffcd2992f32aed597239eeb93e90a108bc4e4624cc"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14a04720a8dfea1d5271212cea5ab81e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12833,
        "upload_time": "2021-08-15T21:25:08",
        "upload_time_iso_8601": "2021-08-15T21:25:08.969308Z",
        "url": "https://files.pythonhosted.org/packages/6b/52/1849dea858c1465bccfd4b66dd9d48bd4d015c58fcf09c05f486dfd729e3/asynccpu-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02ed1a9f210db261ee3fd3620d5bca5707f768b9696901cbb79d45607d92b272",
          "md5": "9cebe70df3940a464518894809b29e58",
          "sha256": "fe5f758a28e72eca906b4c05a7e9df7ee0496ae6caa9299665664bc662aaa82d"
        },
        "downloads": -1,
        "filename": "asynccpu-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9cebe70df3940a464518894809b29e58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15942,
        "upload_time": "2021-08-15T21:25:10",
        "upload_time_iso_8601": "2021-08-15T21:25:10.317223Z",
        "url": "https://files.pythonhosted.org/packages/02/ed/1a9f210db261ee3fd3620d5bca5707f768b9696901cbb79d45607d92b272/asynccpu-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b521849dea858c1465bccfd4b66dd9d48bd4d015c58fcf09c05f486dfd729e3",
        "md5": "14a04720a8dfea1d5271212cea5ab81e",
        "sha256": "e65698416e7461b02a72d2ffcd2992f32aed597239eeb93e90a108bc4e4624cc"
      },
      "downloads": -1,
      "filename": "asynccpu-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14a04720a8dfea1d5271212cea5ab81e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12833,
      "upload_time": "2021-08-15T21:25:08",
      "upload_time_iso_8601": "2021-08-15T21:25:08.969308Z",
      "url": "https://files.pythonhosted.org/packages/6b/52/1849dea858c1465bccfd4b66dd9d48bd4d015c58fcf09c05f486dfd729e3/asynccpu-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02ed1a9f210db261ee3fd3620d5bca5707f768b9696901cbb79d45607d92b272",
        "md5": "9cebe70df3940a464518894809b29e58",
        "sha256": "fe5f758a28e72eca906b4c05a7e9df7ee0496ae6caa9299665664bc662aaa82d"
      },
      "downloads": -1,
      "filename": "asynccpu-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9cebe70df3940a464518894809b29e58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 15942,
      "upload_time": "2021-08-15T21:25:10",
      "upload_time_iso_8601": "2021-08-15T21:25:10.317223Z",
      "url": "https://files.pythonhosted.org/packages/02/ed/1a9f210db261ee3fd3620d5bca5707f768b9696901cbb79d45607d92b272/asynccpu-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}