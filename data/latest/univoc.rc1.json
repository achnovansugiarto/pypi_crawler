{
  "info": {
    "author": "Benjamin van Niekerk",
    "author_email": "benjamin.l.van.niekerk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Towards Achieving Robust Universal Neural Vocoding\n\nA PyTorch implementation of [Towards Achieving Robust Universal Neural Vocoding](https://arxiv.org/abs/1811.06292).\nAudio samples can be found [here](https://bshall.github.io/UniversalVocoding/).\n\n<div align=\"center\">\n    <img width=\"788\" height=\"508\" alt=\"Architecture of the vocoder.\" \n      src=\"https://github.com/bshall/UniversalVocoding/raw/master/univoc.png\"><br>\n    <sup><strong>Fig 1:</strong>Architecture of the vocoder.</sup>\n</div>\n\n## Quick Start\n\nEnsure you have Python 3.6 and PyTorch 1.7 or greater installed. Then install the package with:\n```\npip install univoc\n```\n\n## Example Usage\n\n```python\nimport torch\nimport soundfile as sf\nfrom univoc import Vocoder\n\n# download pretrained weights (and optionally move to GPU)\nvocoder = Vocoder.from_pretrained(\n    \"https://github.com/bshall/UniversalVocoding/releases/download/v0.2/univoc-ljspeech-7mtpaq.pt\"\n).cuda()\n\n# load log-Mel spectrogram from file or tts\nmel = ...\n\n# generate waveform\nwith torch.no_grad():\n    wav, sr = vocoder.generate(mel)\n\n# save output\nsf.write(\"path/to/save.wav\", wav, sr)\n```\n\n## Train from Scratch\n\n1. Clone the repo:\n```\ngit clone https://github.com/bshall/UniversalVocoding\ncd ./UniversalVocoding\n```\n2. Install requirements:\n```\npip install -r requirements.txt\n```\n3. Download and extract the [LJ-Speech dataset](https://keithito.com/LJ-Speech-Dataset/):\n```\nwget https://data.keithito.com/data/speech/LJSpeech-1.1.tar.bz2\ntar -xvjf LJSpeech-1.1.tar.bz2\n```\n4. Download the train split [here](https://github.com/bshall/UniversalVocoding/releases/tag/v0.2) and extract it in the root directory of the repo. \n5. Extract Mel spectrograms and preprocess audio:\n```\npython preprocess.py in_dir=path/to/LJSpeech-1.1 out_dir=datasets/LJSpeech-1.1\n```\n6. Train the model:\n```\npython train.py checkpoint_dir=ljspeech dataset_dir=datasets/LJSpeech-1.1\n```\n\n## Pretrained Models\n\nPretrained weights for the 10-bit LJ-Speech model are available [here](https://github.com/bshall/UniversalVocoding/releases/tag/v0.2).\n\n## Notable Differences from the Paper\n\n1. Trained on 16kHz audio from a single speaker. For an older version trained on 102 different speakers form the [ZeroSpeech 2019: TTS without T](https://zerospeech.com/2019/) English dataset click [here](https://github.com/bshall/UniversalVocoding/releases/tag/v0.1).\n2. Uses an embedding layer instead of one-hot encoding.\n\n### Acknowlegements\n\n- https://github.com/fatchord/WaveRNN\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bshall/UniversalVocoding",
    "keywords": "Speech Synthesis,Neural Vocoder,Text-to-Speech,PyTorch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "univoc",
    "package_url": "https://pypi.org/project/univoc/",
    "platform": "",
    "project_url": "https://pypi.org/project/univoc/",
    "project_urls": {
      "Homepage": "https://github.com/bshall/UniversalVocoding",
      "Samples": "https://bshall.github.io/UniversalVocoding/",
      "Source": "https://github.com/bshall/UniversalVocoding"
    },
    "release_url": "https://pypi.org/project/univoc/0.2.1/",
    "requires_dist": [
      "librosa (>=0.8.0)",
      "numpy (>=1.18.0)",
      "tqdm (>=4.41)",
      "requests",
      "importlib-resources",
      "omegaconf (>=2.0.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "A PyTorch implementation of Towards Achieving Robust Universal Neural Vocoding.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8651310,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36ec116f007d024b56484083cbaf3b659767ffa9cc42d279f27ca8c07deda6e3",
          "md5": "515b8e568c18eceddda5e78ece4c71d4",
          "sha256": "1b4749f396f2ad32616b5bb2e2ffdf84593dd63093fa115e492b7f604a5ba322"
        },
        "downloads": -1,
        "filename": "univoc-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "515b8e568c18eceddda5e78ece4c71d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6463,
        "upload_time": "2020-11-13T14:09:32",
        "upload_time_iso_8601": "2020-11-13T14:09:32.086306Z",
        "url": "https://files.pythonhosted.org/packages/36/ec/116f007d024b56484083cbaf3b659767ffa9cc42d279f27ca8c07deda6e3/univoc-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddd3a8e8a655dfed558bc45c45320dbde6917eb2041b43c9aa948988b27dce3e",
          "md5": "0e340c32375f599f6f5a7e875ecc3439",
          "sha256": "41895f808d58ba31f61c954c2f1c8a251c1f057fe2ac48d05227fe8518117c4e"
        },
        "downloads": -1,
        "filename": "univoc-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e340c32375f599f6f5a7e875ecc3439",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6421,
        "upload_time": "2020-11-13T14:09:33",
        "upload_time_iso_8601": "2020-11-13T14:09:33.628166Z",
        "url": "https://files.pythonhosted.org/packages/dd/d3/a8e8a655dfed558bc45c45320dbde6917eb2041b43c9aa948988b27dce3e/univoc-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36ec116f007d024b56484083cbaf3b659767ffa9cc42d279f27ca8c07deda6e3",
        "md5": "515b8e568c18eceddda5e78ece4c71d4",
        "sha256": "1b4749f396f2ad32616b5bb2e2ffdf84593dd63093fa115e492b7f604a5ba322"
      },
      "downloads": -1,
      "filename": "univoc-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "515b8e568c18eceddda5e78ece4c71d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6463,
      "upload_time": "2020-11-13T14:09:32",
      "upload_time_iso_8601": "2020-11-13T14:09:32.086306Z",
      "url": "https://files.pythonhosted.org/packages/36/ec/116f007d024b56484083cbaf3b659767ffa9cc42d279f27ca8c07deda6e3/univoc-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddd3a8e8a655dfed558bc45c45320dbde6917eb2041b43c9aa948988b27dce3e",
        "md5": "0e340c32375f599f6f5a7e875ecc3439",
        "sha256": "41895f808d58ba31f61c954c2f1c8a251c1f057fe2ac48d05227fe8518117c4e"
      },
      "downloads": -1,
      "filename": "univoc-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e340c32375f599f6f5a7e875ecc3439",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6421,
      "upload_time": "2020-11-13T14:09:33",
      "upload_time_iso_8601": "2020-11-13T14:09:33.628166Z",
      "url": "https://files.pythonhosted.org/packages/dd/d3/a8e8a655dfed558bc45c45320dbde6917eb2041b43c9aa948988b27dce3e/univoc-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}