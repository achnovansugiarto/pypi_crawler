{
  "info": {
    "author": "Brian Robertson",
    "author_email": "brian@fulso.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div align=\"center\">\n<a class=\"badge\" href=\"https://github.com/fulso-me/cdhelm\"><img src=\"https://img.shields.io/badge/-Github-blue\" alt=\"Github\"></a>\n<a class=\"badge\" href=\"https://pypi.org/project/cdhelm/\"><img src=\"https://img.shields.io/badge/-PyPI-blue\" alt=\"PyPI\"></a>\n</div>\n\n# Why\n\nI still have two fundamental problems with using helm now that tiller is gone.\nThe first is that it sometimes requires you to put secrets in config files.\nThere's no good universal way to specify my manifests with shared secrets\nwithout having them show up in my repositories. The second is that there's no\ngood way to manage global variables within a massive project. Sure it's\npossible with subcharts, but I've found it gets really messy really quickly.\n\nI like using cdk8s for my own images and deployments. I think it's clean and\neasy way to follow best practices, and with the help of jedi and autocompletion\nit's super easy to write things that you know will work right.\n\n# Installing\n\n`pipenv install cdhelm` to add cdhelm to your Pipfile.\n\n`from cdhelm import Helm` in your cdk8s file.\n\n# Workflow\n\nThis library allows you to specify a helm chart within cdk8s. It's pretty\nflexible with how it lets you organize your project. \n\nYou can define a Helm object like so:\n\n``` python\nprometheus = Helm(\n    name=\"prometheus\",\n    repo=\"https://kubernetes-charts.storage.googleapis.com\",\n    chart=\"prometheus\",\n    version=\"11.12.0\",\n    namespace=\"monitoring,\n    path=\".charts\",\n)\n```\n\n`namespace` defaults to `default` and `path` defaults to `.charts`. Otherwise\neverything else is required. `version` is explicitly required because I can't\nthink of a reason you should ever rely on `latest` implicitly.\n\nThis returns a Helm object that you can interact with. Creating the object\npulls the chart to `path` and populates `object.values` with the default values\nfile. The is currently no option to not pull the whole chart.\n\n## Adding values\n\nYou can specify new values either through a values file like with normal helm charts.\n\n``` python\nprometheus.updateFile(\"configs/prometheus.yaml\")\n```\n\nOr you can specify new values through a python dictionary corrisponding to the values file.\n\n\n``` python\nprometheus_conf = {\n    \"alertmanager\": {\n        \"baseURL\": \"https://alert.\" + mydomain\n    },\n    \"server\": {\n        \"baseURL\": \"https://prom.\" + mydomain\n    },\n}\nprometheus.update(prometheus_conf)\n```\n\nBoth actions only update exactly what is specified so it's possible to use both\ntogether even on variables within the same scope.\n\n## Extracting values or working entirely within cdk8s\n\nIt is possible to create a cdk8s chart from the Helm object. This chart will\nbake in the current values. Please update your values before returning a chart.\n\n``` python\nmonitoring_app = App(outdir=dist + \"monitoring\")\nprometheus_chart = prometheus.Chart(monitoring_app, \"prometheus\")\n```\n\nYou can use this to pass along information from the chart such as services and\nports to other parts of your code. This is a good way to interface different\nparts of your server without hardcoding values. You may synth the app the chart\nis a part of and work with helm as though it's just another part of your cdk8s\nimplementation. Every part of the chart will be rendered out using `helm template`.\n\n``` python\nmonitoring_app.synth()\n```\n\n## Working outside of cdk8s\n\nIt is also possible to keep the benefits of having helm specified in your cdk8s\ncode while still letting helm do its thing. You can have cdk8s write out a\n`values.yaml` file so you can manage helm manually.  `render()` will overwrite\nthe default rendered values path.\n\n``` python\nprometheus.render(\"helm/myvalues.yaml\")\n```\n\nOr you can have cdk8s render out a helper script to the specified folder to\nwork with exactly the version and values you already specified.\n\n``` python\nprometheus.write_controls(\"_charts\")\n```\n\nThe rendered script should work with any helm command that works with a\nspecific chart. Use `-h` with the chart to see a help printout.\n\n```\nAll commands will be given the following options when applicable:\n  --namespace monitoring\n  --repo https://kubernetes-charts.storage.googleapis.com\n  --version 11.12.0\n  --values /home/myhome/myproject/.charts/prometheus-11.12.0/prometheus/rendered-values.yaml\n  [NAME] => prometheus\n  [CHART] => prometheus\n  [RELEASE] => prometheus\n\nAll other given options will be appended\nUse -h as an appended option for any helm command\n\nAvailable Helm commands:\n  help\n  history\n  install\n  rollback\n  show all\n  show chart\n  show readme\n  show values\n  status\n  template\n  test\n  uninstall\n  upgrade\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fulso-me/cdhelm",
    "keywords": "cdk8s helm kubernetes k8s",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cdhelm",
    "package_url": "https://pypi.org/project/cdhelm/",
    "platform": "",
    "project_url": "https://pypi.org/project/cdhelm/",
    "project_urls": {
      "Homepage": "https://github.com/fulso-me/cdhelm"
    },
    "release_url": "https://pypi.org/project/cdhelm/0.1.4/",
    "requires_dist": [
      "cdk8s",
      "pyyaml"
    ],
    "requires_python": ">=3.6",
    "summary": "Helm interface in cdk8s",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8336185,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f4743f9fca98da5066580a20c9be9b71e31ec696fa13d4a9caa317ac1f29206",
          "md5": "1d9927b2b8e0cc61a5de78d4b3c9f655",
          "sha256": "0e495feb20c34eb8b3f78068037eab261e2bc155402c8cf23fc9f62f5201749b"
        },
        "downloads": -1,
        "filename": "cdhelm-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d9927b2b8e0cc61a5de78d4b3c9f655",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8433,
        "upload_time": "2020-10-04T09:41:21",
        "upload_time_iso_8601": "2020-10-04T09:41:21.009901Z",
        "url": "https://files.pythonhosted.org/packages/3f/47/43f9fca98da5066580a20c9be9b71e31ec696fa13d4a9caa317ac1f29206/cdhelm-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a14e8da08acd1a51806b4295cfdeec23e81c974d43dff0e79e753d3dd573b2c2",
          "md5": "704bf4eba843fb0ef3981259dda3a3d4",
          "sha256": "8d72d8180baa6baed1b3b888ba2d8500f55ed93031c7a23cbd9cb560aaf837bc"
        },
        "downloads": -1,
        "filename": "cdhelm-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "704bf4eba843fb0ef3981259dda3a3d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5706,
        "upload_time": "2020-10-04T09:41:22",
        "upload_time_iso_8601": "2020-10-04T09:41:22.125853Z",
        "url": "https://files.pythonhosted.org/packages/a1/4e/8da08acd1a51806b4295cfdeec23e81c974d43dff0e79e753d3dd573b2c2/cdhelm-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f4743f9fca98da5066580a20c9be9b71e31ec696fa13d4a9caa317ac1f29206",
        "md5": "1d9927b2b8e0cc61a5de78d4b3c9f655",
        "sha256": "0e495feb20c34eb8b3f78068037eab261e2bc155402c8cf23fc9f62f5201749b"
      },
      "downloads": -1,
      "filename": "cdhelm-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d9927b2b8e0cc61a5de78d4b3c9f655",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8433,
      "upload_time": "2020-10-04T09:41:21",
      "upload_time_iso_8601": "2020-10-04T09:41:21.009901Z",
      "url": "https://files.pythonhosted.org/packages/3f/47/43f9fca98da5066580a20c9be9b71e31ec696fa13d4a9caa317ac1f29206/cdhelm-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a14e8da08acd1a51806b4295cfdeec23e81c974d43dff0e79e753d3dd573b2c2",
        "md5": "704bf4eba843fb0ef3981259dda3a3d4",
        "sha256": "8d72d8180baa6baed1b3b888ba2d8500f55ed93031c7a23cbd9cb560aaf837bc"
      },
      "downloads": -1,
      "filename": "cdhelm-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "704bf4eba843fb0ef3981259dda3a3d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5706,
      "upload_time": "2020-10-04T09:41:22",
      "upload_time_iso_8601": "2020-10-04T09:41:22.125853Z",
      "url": "https://files.pythonhosted.org/packages/a1/4e/8da08acd1a51806b4295cfdeec23e81c974d43dff0e79e753d3dd573b2c2/cdhelm-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}