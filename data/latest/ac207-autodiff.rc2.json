{
  "info": {
    "author": "Xuliang Guo, Kamran Ahmed, Van Anh Le, Hanwen Cui",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# cs107-FinalProject - Group #32\n## Members: Xuliang Guo, Kamran Ahmed, Van Anh Le, Hanwen Cui\n\n[![codecov](https://codecov.io/gh/cs107-XKVH/cs107-FinalProject/branch/main/graph/badge.svg?token=SAQEVYPUXC)](https://codecov.io/gh/cs107-XKVH/cs107-FinalProject)\n\n## Broader Impacts and Inclusivity\n\n### Broader Impacts\nVirtually all machine learning and AI algorithms can be attributed to solving optimization problems during the training process. While automatic differentiation does not direct broader impacts, its extensive use as an intermediate step in these algorithms forces us to consider the broader impact of our package. First of all, our package will be contributing to biases against African-American and other underrepresented minorities that current ML models used in the criminal justice system or hiring processes are already imposing. Second, any errors in our calculations could lead to misspecified models and erroneous predictions with significant impacts to downstream users. These impacts are especially grave in safety-critical settings such as healthcare, where a model that utilizes a faulty AD library could misdiagnose a patient or suggest sub-optimal treatments. \n\n### Inclusivity\nWhile our codebase is technically available and open for anyone to contribute through our GitHub repository, there are technical barriers that might prevent certain groups from participating in this process. Any contributors would need to have working knowledge of git version control and principles of software development. This precludes people from rural communities, communities of color, or poor urban communities, who are less likely to receive formal and rigorous training in computer science. Even at the college level, CS curricula are not homogenous and concepts such as git version control might not be taught at every school. Furthermore, users from other disciplines who rely on optimization and AD might be discouraged by the initial fixed cost of learning a complicated system such as git.\n\nAny developer who wants to contribute to our codebase can make a new branch and create a pull request. Pull requests will then be reviewed by one or many members of our team, depending on the extent of contribution. In order to make this process more inclusive, we could include a step-by-step guide on our repository that provides explicit direction on how to work with git and the expected best-practices that we hope they would follow.\n\n## How to install\nWe recommend creating a virtual environment rather than installing in the base environment:\n```\npython3 -m venv autodiff-env\nsource autodiff/bin/activate\n```\n\nOur package can be installed from Github or PyPI. We also include source distribution files and wheels under Releases.\n\nYou can install ac207-autodiff via `pip` with:\n```\npip install ac207-autodiff\n```\n\n## Basic usage\nDetailed descriptions about classes, methods, and operations can be found in our [API reference](https://cs107-xkvh.github.io/).\n\nOur automatic differentiation package’s default behavior uses forward mode. You can import this as follows:\n```python\nimport autodiff as ad\n```\n\nIf you would like to use reverse mode, please explicitly import it as:\n```python\nimport autodiff.reverse as ad\n```\n\n### Forward mode\nThe properties of a dual number lend itself nicely to a straightforward implementation of forward mode automatic differentiation. Briefly, we use dual numbers as our core data structure (`ad.Dual`). The value and derivative can be stored as the real and “dual” part of the dual number, respectively.\n\nWe provide support for:\n- Most arithmetic and comparison operations\n- Elementary operations such as trigonometric functions, square root, logarithmic, logistic, and exponential functions, among others.\n\n**Univariate functions**\n```python\n>>> import autodiff as ad\n>>> x = ad.Dual(2)\n>>> f = 7 * (x ** 3) + 3 * x\n>>> print(f\"Function value: {f.val}, derivative: {f.der}\")\nFunction value: 62, derivative: [87.]\n```\n\n**Multivariate functions**\n```python\n>>> import autodiff as ad\n>>> x, y = ad.Dual.from_array([2, 4]) # helper static method\n>>> f = 7 * (x ** 3) + 3 * y\n>>> print(f\"Function value: {f.val}, derivative: {f.der}\")\nFunction value: 68, derivative: [84. 3.]\n```\n\n**Vector functions**\n```python\n>>> import autodiff as ad\n>>> def f(x, y, z): # Vector function mapping 3 inputs to 2 outputs.\n...    f1 = 7 * (x ** 3) + 3 * y\n...    f2 = y / x + z ** 2\n...    return (f1, f2)\n...\n>>> x, y, z = ad.Dual.from_array([2, 4, 6])\n>>> f1, f2 = f(x, y, z)\n>>> print(f\"f1 value: {f1.val}, derivative: {f1.der}\")\nf1 value: 68, derivative: [84.  3.  0.]\n>>> print(f\"f2 value: {f2.val}, derivative: {f2.der}\")\nf2 value: 38.0, derivative: [-1.   0.5 12. ]\n```\n\n**Elementary operations**\n```python\n>>> import autodiff as ad\n>>> x, y = ad.Dual.from_array([2, 4])\n>>> f = ad.exp(x) + y\n>>> print(f\"Function value: {f.val:.4f}, \" \\\n... \t\t \"derivative: [{f.der[0]:.4f} {f.der[1]:.4f}]\")\nFunction value: 11.3891, derivative: [7.3891 1.0]\n```\n\n### Reverse mode\nNote that these are contained within the `autodiff.reverse` module. \n\nExplicitly import it as:\n```python\n>>> import autodiff.reverse as ad\n```\n\n`ad.Node` is the primary data structure for reverse mode automatic differentiation. The process of evaluating derivatives in reverse mode consists of two passes, forward pass and reverse pass. During the forward pass, we calculate the primal values and the local gradient of child nodes with respect of each parent node in the computational graph. In the reverse pass, we recursively calculate the gradients.\n\nReverse mode only evalates the function at the specified values. To calculate the gradient with respect to each input, you have to explicitly call `Node.grad()`. Examples can be found below.\n\n**Univariate function**\n\nThe derivative of the function is not stored within the function object, but rather is computed on the fly when `x.grad()` is called.\n```python\n>>> import autodiff.reverse as ad\n>>> x = ad.Node(2)\n>>> f = 7 * (x ** 3) + 3 * x\n>>> grad = x.grad() # compute gradient\n>>> print(f\"Function value: {f.val}, derivative w.r.t x = {grad}\")\nFunction value: 62, derivative w.r.t x = 87.0\n```\n\nNote that to reuse the `x` variable again, without accumulating gradients you must call `ad.Node.zero_grad(x)`. A more detailed example can be found below when using vector functions.\n\n**Multivariate functions**\n```python\n>>> import autodiff.reverse as ad\n>>> x = ad.Node(2)\n>>> y = ad.Node(4)\n>>> f = 7 * (x ** 3) + 3 * y\n>>> grad = [x.grad(), y.grad()] # explicitly compute all gradients w.r.t. x and y\n>>> print(f\"Function value: {f.val}, derivative: {grad}\")\nFunction value: 68, derivative: [84.0, 3.0]\n```\n\n**Vector functions**\n```python\n>>> import autodiff.reverse as ad\n>>> x, y, z = ad.Node.from_array([2, 4, 6])\n>>> def f(x, y, z): # Vector function mapping 3 inputs to 2 outputs\n...     f1 = 7 * (x ** 3) + 3 * y\n...     f1_grad = [x.grad(), y.grad(), z.grad()] # compute gradient w.r.t. all inputs, before computing f2\n...     ad.Node.zero_grad(x, y, z)  # must be called before computing f2, otherwise gradients will accumulate\n...     f2 = y / x + z ** 2\n...     f2_grad = [x.grad(), y.grad(), z.grad()]\n...     return f1, f1_grad, f2, f2_grad\n>>> f1, f1_grad, f2, f2_grad = f(x, y, z)\n>>> print(f\"First function value: {f1.val}, derivative: {f1_grad}\")\nFirst function value: 68, derivative: [84.0, 3.0, 1.0]\n>>> print(f\"Second function value: {f2.val}, derivative: {f2_grad}\")\nSecond function value: 38.0, derivative: [-1.0, 0.5, 12.0]\n```\n\n**Elementary operations**\n\nWe allow users to import overloaded elementary functions (sine, cosine, tangent, exponential, log, sqrt) to perform operations on Nodes.\n```python\n>>> import autodiff.reverse as ad\n>>> x, y = ad.Node.from_array([2, 4])\n>>> f = ad.exp(x) + y\n>>> grad = [x.grad(), y.grad()]\n>>> print(f\"Function value: {f.val:.4f}, derivative: [{grad[0]:.4f} {grad[1]:.4}]\")\nFunction value: 11.3891, derivative: [7.3891 1.0]\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cs107-XKVH/cs107-FinalProject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ac207-autodiff",
    "package_url": "https://pypi.org/project/ac207-autodiff/",
    "platform": "",
    "project_url": "https://pypi.org/project/ac207-autodiff/",
    "project_urls": {
      "Homepage": "https://github.com/cs107-XKVH/cs107-FinalProject"
    },
    "release_url": "https://pypi.org/project/ac207-autodiff/0.1.0/",
    "requires_dist": [
      "numpy (>=1.21.4)"
    ],
    "requires_python": ">=3.8",
    "summary": "An automatic differentiation package.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12241065,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f629ad2254cc3156b3fc1c9a6fca04068a0177df7b9df7cc5ba721081c358dd9",
          "md5": "a72a1f9b73b883b365fa19956f80815d",
          "sha256": "99641fb4fd9ac77ef684827cecdcd9ddb6d0c6d0b07affdf2e52ed13c55ef640"
        },
        "downloads": -1,
        "filename": "ac207_autodiff-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a72a1f9b73b883b365fa19956f80815d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9138,
        "upload_time": "2021-12-04T20:28:07",
        "upload_time_iso_8601": "2021-12-04T20:28:07.838924Z",
        "url": "https://files.pythonhosted.org/packages/f6/29/ad2254cc3156b3fc1c9a6fca04068a0177df7b9df7cc5ba721081c358dd9/ac207_autodiff-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f4ada0a1d74096936f45b0f6b91dd6f3244d411d41da6c0fb9decffc45506f7",
          "md5": "28b4ceeb06ef17906e58a5f6d2ae026f",
          "sha256": "ef8fc0855fdc76ed9121b6c3bf626e6145f5ae080de54fd5bc87d811dfea0c66"
        },
        "downloads": -1,
        "filename": "ac207_autodiff-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28b4ceeb06ef17906e58a5f6d2ae026f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7307,
        "upload_time": "2021-12-04T20:28:09",
        "upload_time_iso_8601": "2021-12-04T20:28:09.432024Z",
        "url": "https://files.pythonhosted.org/packages/3f/4a/da0a1d74096936f45b0f6b91dd6f3244d411d41da6c0fb9decffc45506f7/ac207_autodiff-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ff8f1afaad12c8828c01dccd92aa3443eabfb64e9860bed781e8fc2f29f6f8",
          "md5": "603d207042b44619ac90fee25b4fe529",
          "sha256": "7dc094bfbdf5898f105c6da708796b78f4d712c20540b753fa066d8720ccde14"
        },
        "downloads": -1,
        "filename": "ac207_autodiff-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "603d207042b44619ac90fee25b4fe529",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15763,
        "upload_time": "2021-12-08T02:54:12",
        "upload_time_iso_8601": "2021-12-08T02:54:12.086673Z",
        "url": "https://files.pythonhosted.org/packages/b3/ff/8f1afaad12c8828c01dccd92aa3443eabfb64e9860bed781e8fc2f29f6f8/ac207_autodiff-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39b3e0e9a2d8ee8956bf759d1de335a7c29e8c9a5a661cce2ccf4090bc7239a9",
          "md5": "640554bcd12bac1396edb7bc7dd09fb2",
          "sha256": "a21cf46ae3bd983b43b3f28ae27b820d68673ff2960052dca3aa76d8bcaff14e"
        },
        "downloads": -1,
        "filename": "ac207_autodiff-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "640554bcd12bac1396edb7bc7dd09fb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14293,
        "upload_time": "2021-12-08T02:54:14",
        "upload_time_iso_8601": "2021-12-08T02:54:14.400506Z",
        "url": "https://files.pythonhosted.org/packages/39/b3/e0e9a2d8ee8956bf759d1de335a7c29e8c9a5a661cce2ccf4090bc7239a9/ac207_autodiff-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3ff8f1afaad12c8828c01dccd92aa3443eabfb64e9860bed781e8fc2f29f6f8",
        "md5": "603d207042b44619ac90fee25b4fe529",
        "sha256": "7dc094bfbdf5898f105c6da708796b78f4d712c20540b753fa066d8720ccde14"
      },
      "downloads": -1,
      "filename": "ac207_autodiff-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "603d207042b44619ac90fee25b4fe529",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 15763,
      "upload_time": "2021-12-08T02:54:12",
      "upload_time_iso_8601": "2021-12-08T02:54:12.086673Z",
      "url": "https://files.pythonhosted.org/packages/b3/ff/8f1afaad12c8828c01dccd92aa3443eabfb64e9860bed781e8fc2f29f6f8/ac207_autodiff-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39b3e0e9a2d8ee8956bf759d1de335a7c29e8c9a5a661cce2ccf4090bc7239a9",
        "md5": "640554bcd12bac1396edb7bc7dd09fb2",
        "sha256": "a21cf46ae3bd983b43b3f28ae27b820d68673ff2960052dca3aa76d8bcaff14e"
      },
      "downloads": -1,
      "filename": "ac207_autodiff-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "640554bcd12bac1396edb7bc7dd09fb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14293,
      "upload_time": "2021-12-08T02:54:14",
      "upload_time_iso_8601": "2021-12-08T02:54:14.400506Z",
      "url": "https://files.pythonhosted.org/packages/39/b3/e0e9a2d8ee8956bf759d1de335a7c29e8c9a5a661cce2ccf4090bc7239a9/ac207_autodiff-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}