{
  "info": {
    "author": "cdadevs",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CDA Python\n\nThis library sits on top of the machine generated\n[CDA Python Client](https://github.com/CancerDataAggregator/cda-service-python-client) and offers some syntactic\nsugar to make it more pleasant to query the CDA.\n\n---\n## Read The Docs\n[CDA Read The Docs](https://cda.readthedocs.io/en/latest/)\n\n---\n# Launch in Binder\n\nTo try out the example notebook in [MyBinder.org](https://mybinder.org/)\nwithout having to install anything, just click on the logo below. This will\nlaunch a Jupyter Notebook instance with our example notebook ready to run.\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CancerDataAggregator/cda-python/HEAD?filepath=/notebooks/example.ipynb)\n\n## For Testers use this Binder\n\nClick on the logo below. This will\nlaunch a Jupyter Notebook instance with our example notebook ready to run.\n\n[![MyBinder.org](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CancerDataAggregator/cda-python/integration)\n\nInstall the CDA Python library locally:\n\n1. Download and install docker click this [link](https://www.docker.com/products/docker-desktop) or copy url https://www.docker.com/products/docker-desktop to your Browser\n2. Open Terminal or PowerShell a and navigate to cda-python folder then we will run a docker command\n   - `docker compose up --build`\n3. Open a Browser to this url http://localhost:8888 and you are up and running.\n\n   - **To change the Port** edit the `.env` file NOTEBOOK_PORT\n\n4. To Stop the container from running return to the terminal where the cdapython project is on your keyboard you will click **Control C to stop** the container .\n\nTo delete the container use this command in the cdapython project directory.\n\n- `docker compose down`\n\n### Pip install\n\nAlternatively, CDA Python can be installed using `pip`. However, this requires python >= 3.6 on your system. To check your version at the command-line run `python -V`. To update your version you can download from [https://www.python.org/downloads/]('https://www.python.org/downloads/') additional python installation help can be found [here]('https://realpython.com/installing-python/'). Once you have the proper python version, you can run CDA using:\n\n`pip install git+https://github.com/CancerDataAggregator/cda-python.git`\n\n**NOTE: We recommend the docker method because pip installation can be a bit more cumbersome, and will not be as closely monitored as the docker installation.**\n\n# Basics\n\nWe will now show you the basic structure of `CDA python` through the use of the most commands:\n\n- `columns()`: show all available columns in the table,\n- `unique_terms()`: for a given column show all unique terms,\n- `Q`: Executes this query on the public CDA server, and\n- `Q.sql`: allows you to enter SQL style queries.\n- `query` : allows you to write long form Q statments with out chaining\n\n(Also see example [IPython notebook](example.ipynb))\n\n```\nfrom cdapython import Q, columns, unique_terms\n\n\ncolumns() # List column names eg:\n# ['days_to_birth',\n#  'race',\n#  'sex',\n#  'ethnicity',\n#  'id',\n#  'ResearchSubject',\n#  'ResearchSubject.Diagnosis',\n#  'ResearchSubject.Diagnosis.morphology',\n#  'ResearchSubject.Diagnosis.tumor_stage',\n#  'ResearchSubject.Diagnosis.tumor_grade',\n#  'ResearchSubject.Diagnosis.Treatment',\n#  'ResearchSubject.Diagnosis.Treatment.type',\n#  'ResearchSubject.Diagnosis.Treatment.outcome',\n\n\nunique_terms(\"ResearchSubject.primary_disease_type\") # List unique terms for this column eg:\n# [None,\n#  'Acinar Cell Neoplasms',\n#  'Adenomas and Adenocarcinomas',\n#  'Adnexal and Skin Appendage Neoplasms',\n#  'Basal Cell Neoplasms',\n#  'Blood Vessel Tumors',\n#  'Breast Invasive Carcinoma',\n#  'Chromophobe Renal Cell Carcinoma',\n#  'Chronic Myeloproliferative Disorders',\n#  'Clear Cell Renal Cell Carcinoma',\n#  'Colon Adenocarcinoma',\n# ...\n\nq1 = Q('ResearchSubject.primary_disease_type = \"Adenomas and Adenocarcinomas\"')\nr = q1.run()                                 # Executes this query on the public CDA server\n\n# r = q1.run(host=\"http://localhost:8080\")   # Executes on local instance of CDA server\n# r = q1.run(limit=2)                        # Limit to two results per page\n\n\nr.sql   # Return SQL string used to generate the query e.g.\n# \"SELECT * FROM gdc-bq-sample.cda_mvp.v1, UNNEST(ResearchSubject) AS _ResearchSubject WHERE (_ResearchSubject.primary_disease_type = 'Adenomas and Adenocarcinomas')\"\n\nprint(r) # Prints some brief information about the result page eg:\n#\n# Query: SELECT * FROM gdc-bq-sample.cda_mvp.v1, UNNEST(ResearchSubject) AS _ResearchSubject WHERE (_ResearchSubject.# primary_disease_type = 'Adenomas and Adenocarcinomas')\n# Offset: 0\n# Limit: 2\n# Count: 2\n# More pages: Yes\n\n\nr[0] # Returns nth result of this page as a Python dict e.g.\n#\n# {'days_to_birth': None,\n#  'race': None,\n#  'sex': None,\n#  'ethnicity': None,\n#  'id': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#  'ResearchSubject': [{'Diagnosis': [],\n#    'Specimen': [],\n#    'associated_project': 'CGCI-HTMCP-CC',\n#    'id': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#    'primary_disease_type': 'Adenomas and Adenocarcinomas',\n#    'identifier': [{'system': 'GDC',\n#      'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#    'primary_disease_site': 'Cervix uteri'}],\n#  'Diagnosis': [],\n#  'Specimen': [],\n#  'associated_project': 'CGCI-HTMCP-CC',\n#  'primary_disease_type': 'Adenomas and Adenocarcinomas',\n#  'identifier': [{'system': 'GDC',\n#    'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#  'primary_disease_site': 'Cervix uteri'}\n\n\nr.pretty_print(0) # Prints the nth result nicely\n#\n# { 'Diagnosis': [],\n#   'ResearchSubject': [ { 'Diagnosis': [],\n#                          'Specimen': [],\n#                          'associated_project': 'CGCI-HTMCP-CC',\n#                          'id': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#                          'identifier': [ { 'system': 'GDC',\n#                                            'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#                          'primary_disease_site': 'Cervix uteri',\n#                          'primary_disease_type': 'Adenomas and '\n#                                                  'Adenocarcinomas'}],\n#   'Specimen': [],\n#   'associated_project': 'CGCI-HTMCP-CC',\n#   'days_to_birth': None,\n#   'ethnicity': None,\n#   'id': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#   'identifier': [ { 'system': 'GDC',\n#                     'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#   'primary_disease_site': 'Cervix uteri',\n#   'primary_disease_type': 'Adenomas and Adenocarcinomas',\n#   'race': None,\n#   'sex': None}\n\n\nr2 = r.next_page()  # Fetches the next page of results\n\nprint(r2)\n\n# Query: SELECT * FROM gdc-bq-sample.cda_mvp.v1, UNNEST(ResearchSubject) AS _ResearchSubject WHERE (_ResearchSubject.# primary_disease_type = 'Adenomas and Adenocarcinomas')\n# Offset: 2\n# Limit: 2\n# Count: 2\n# More pages: Yes\n\nr1 = Q.sql(\"\"\"\nSELECT\n*\nFROM gdc-bq-sample.cda_mvp.v1, UNNEST(ResearchSubject) AS _ResearchSubject\nWHERE (_ResearchSubject.primary_disease_type = 'Adenomas and Adenocarcinomas')\n\"\"\")\n\nr1.pretty_print(0)\n#\n#{ 'Diagnosis': [],\n#  'ResearchSubject': [ { 'Diagnosis': [],\n#                         'Specimen': [],\n#                         'associated_project': 'CGCI-HTMCP-CC',\n#                         'id': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#                         'identifier': [ { 'system': 'GDC',\n#                                           'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#                         'primary_disease_site': 'Cervix uteri',\n#                         'primary_disease_type': 'Adenomas and '\n#                                                 'Adenocarcinomas'}],\n#  'Specimen': [],\n#  'associated_project': 'CGCI-HTMCP-CC',\n#  'days_to_birth': None,\n#  'ethnicity': None,\n#  'id': 'HTMCP-03-06-02177',\n#  'id_1': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3',\n#  'identifier': [ { 'system': 'GDC',\n#                    'value': '4d54f72c-e8ac-44a7-8ab9-9f20001750b3'}],\n#  'primary_disease_site': 'Cervix uteri',\n#  'primary_disease_type': 'Adenomas and Adenocarcinomas',\n#  'race': None,\n#  'sex': None}\n\n\nquery('ResearchSubject.identifier.system = \"GDC\" FROM ResearchSubject.primary_disease_type = \"Ovarian Serous Cystadenocarcinoma\" AND ResearchSubject.identifier.system = \"PDC\"')\nresult = q1.run()\n```\n\n# Comparison operators\n\nThe following comparsion operators can be used with the `Q` command:\n\n| operator | Description                                        | Q.sql required? |\n| -------- | -------------------------------------------------- | --------------- |\n| =        | condition equals                                   | no              |\n| !=       | condition is not equal                             | no              |\n| <        | condition is less than                             | no              |\n| >        | condition is greater than                          | no              |\n| <=       | condition is less than or equal to                 | no              |\n| >=       | condition is less than or equal to                 | no              |\n| like     | similar to = but always wildcards ('%', '\\_', etc) | yes             |\n| in       | compares to a set                                  | yes             |\n\nadditionally, more complex SQL can be used with the `Q.sql` command.\n\n# A simple query\n\n> Select data from TCGA-OV project, with donors over age 50\n\n## Quick form\n\n```\nfrom cdapython import Q\n\nq1 = Q('ResearchSubject.Diagnosis.age_at_diagnosis > 50*365')\nq2 = Q('ResearchSubject.associated_project = \"TCGA-OV\"')\n\nq = q1.AND(q2)\nr = q.run()\n\nprint(r)\n\n# Query: SELECT * FROM gdc-bq-sample.cda_mvp.v1, UNNEST(ResearchSubject) AS _ResearchSubject, UNNEST(_ResearchSubject.Diagnosis) AS # _Diagnosis WHERE ((_Diagnosis.age_at_diagnosis > 50*365) AND (_ResearchSubject.associated_project = 'TCGA-OV'))\n# Offset: 0\n# Limit: 1000\n# Count: 461\n# More pages: No\n\nr.pretty_print(2)\n# { 'Diagnosis': [ { 'Treatment': [ { 'outcome': None,\n#                                     'type': 'Radiation Therapy, NOS'},\n#                                   { 'outcome': None,\n#                                     'type': 'Pharmaceutical Therapy, NOS'}],\n#                    'age_at_diagnosis': 28779,\n#                    'id': 'dc8af98b-03cb-5817-84fa-d86a7f2df8c6',\n#                    'morphology': '8441/3',\n#                    'primary_diagnosis': 'Serous cystadenocarcinoma, NOS',\n#                    'tumor_grade': 'not reported',\n#                    'tumor_stage': 'not reported'}],\n#   'ResearchSubject': [ { 'Diagnosis': [ { 'Treatment': [ { 'outcome': None,\n#                                                            'type': 'Radiation '\n#                                                                    'Therapy, '\n#                                                                    'NOS'},\n#                                                          { 'outcome': None,\n#                                                            'type': 'Pharmaceutical '\n#                                                                    'Therapy, '\n#                                                                    'NOS'}],\n#                                           'age_at_diagnosis': 28779,\n#                                           'id': 'dc8af98b-03cb-5817-84fa-d86a7f2df8c6',\n#                                           'morphology': '8441/3',\n#                                           'primary_diagnosis': 'Serous '\n#                                                                'cystadenocarcinoma, '\n#                                                                'NOS',\n#                                           'tumor_grade': 'not reported',\n#                                           'tumor_stage': 'not reported'}],\n# ...\n\n```\n\nAny given part of a query is expressed as a string of three parts separated by spaces:\n\n```\nQ('ResearchSubject.associated_project = \"TCGA-OV\"')\n```\n\nThe first part is interpreted as a column name, the second as a comparator and\nthe third part as a value. If the value is a string, it needs to be put in\nquotes.\n\n## Detailed form\n\nFor cases where there may be ambiguity in the quoting, or the right side of the\ncomparison is another column, the detailed form should be used. Here the three\nparts of a query are explicity split apart.\n\n```\nfrom cdapython import Q, Col, Quoted\n\nq1 = Q(Col('ResearchSubject.Diagnosis.age_at_diagnosis'), '>=', 50 * 365)\nq2 = Q(Col('ResearchSubject.associated_project'), '=', Quoted('TCGA-OV'))\n```\n\n# Pointing to a custom CDA instance\n\n`.run()` will execute the query on the public CDA API (`https://cda.cda-dev.broadinstitute.org/api/cda/v1/`).\n\n`.run(\"http://localhost:8080\")` will execute the query on a CDA server running at\n`http://localhost:8080`.\n\n# Quick Explanation on UNNEST usage in BigQuery\n\nUsing Q in the CDA client will echo the generated SQL statement that may contain multiple `UNNEST` inclusions\nwhen including a dot(.) structure which may need a quick explanation.\nUNNEST is similar to unwind in which embedded data structures must be flattend to appear in a table or Excel file.\nNote; The following call using the SQL endpoint is not the preferred method to execute a nested attribute query in BigQuery.\nThe Q language DSL abstracts the required unnesting that exists in a Record. In BigQuery, structures must be represented in an UNNEST syntax such that:\n`A.B.C.D` must be unwound to `SELECT (_C.D)` in the following fashion:\n\n```\nSELECT (_C.D)\nfrom TABLE, UNNEST(A) AS _A, UNNEST(_A.B) as _B, UNNEST(_B.C) as _C\n```\n\n`ResearchSubject.Specimen.source_material_type` represents a complex record that needs to unwound in SQL syntax to be queried on properly when using SQL.\n\n```\nSELECT DISTINCT(_Specimen.source_material_type)\nFROM gdc-bq-sample.cda_mvp.v3,\nUNNEST(ResearchSubject) AS _ResearchSubject,\nUNNEST(_ResearchSubject.Specimen) AS _Specimen\n```\n\n# Developer setup\nPython 3.7 or higher installed\n\ngit clone the repo\n\n``` bash\ngit clone https://github.com/CancerDataAggregator/cda-python.git\n```\n\n\nopen a terminal or powershell and navigate to cloned directory\n\nexample:\n\n``` bash\ncd cda-python\n````\n\nin the cda-python folder create a virtual environment\nusing\n\n```python\npython3 -m venv venv\n```\n\nand activate the environment by using\nfor the mac and push enter\n```bash\nsource ./venv/bin/activate\n```\nand for windows in powershell and push enter\n```\n.\\venv\\Scripts\\activate\n```\nnote to stop using venv type\n```bash\ndeactivate\n```\n### Project dependencies\nIn your virtual environment install  project requirements\nUse pip to install the Python dependencies:\n```\npip install -r requirements.txt\npip install -r requirements-dev.txt\n```\n\n### Using pip-tools\nIn your virtual environment install\n```bash\npip install pip-tools\n```\nwe will use pip-tools to keep track of our dependencies and our requirements.in\n\nCommands\n```bash\npip-compile\n ```\nwill build requirements.txt from our setup.py and requirements.in and lockdown the requirements.txt\n\n### Update requirements\njust add dependency to the requirements.in and run\n```bash\npip-compile\n```\n## cdapython local dev\nto install the cdapython Library when you are working on the package locally as a dev\nmake sure you are in the main cdapython folder from you git clone and in your terminal\nnavigate to the folder then use `ls` or `DIR` to see the files make sure you see the setup.py file.\nthe setup.py file is used to tell pip\n-e editable install so yo can update files\n`pip install -e .`\n## Note For runing pytest\nthere is a global_setting.py here you can change the host server\n\n\n\n\n# Note\n\nThis is the spiritual successor of the\n[Query Translator Prototype](https://github.com/CancerDataAggregator/translator-prototype)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cdapython",
    "package_url": "https://pypi.org/project/cdapython/",
    "platform": null,
    "project_url": "https://pypi.org/project/cdapython/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/cdapython/2022.6.22/",
    "requires_dist": [
      "tdparser (==1.1.6)",
      "numpy (==1.21.5)",
      "wheel (==0.36.2)",
      "urllib3 (==1.26.8)",
      "rich (==12.0.1)",
      "matplotlib (==3.5.1)",
      "typing-extensions (==4.2.0)",
      "pandas (>=1.3.5,<2.0.0); python_version == \"3.7\" or python_version == \"3.11\"",
      "ipywidgets (==7.7.0)",
      "python-dotenv (==0.18.0)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "2022.6.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14213404,
  "releases": {
    "2022.6.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb48017a02bda12bfba0093cf8b6c49cfd2ca4d9ea1187b59fbb148ac138e0a7",
          "md5": "b148b8e014322489b9681e6c049dc1fd",
          "sha256": "1c6e5239e719feaac1e2ea044ff6a8e914ad57311bbbf206bc286a0563516a0e"
        },
        "downloads": -1,
        "filename": "cdapython-2022.6.21-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b148b8e014322489b9681e6c049dc1fd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "==3.7.1",
        "size": 39543,
        "upload_time": "2022-06-22T15:15:35",
        "upload_time_iso_8601": "2022-06-22T15:15:35.432829Z",
        "url": "https://files.pythonhosted.org/packages/eb/48/017a02bda12bfba0093cf8b6c49cfd2ca4d9ea1187b59fbb148ac138e0a7/cdapython-2022.6.21-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8dc4d7a5ca74a623f8d53ba2104f8f12bf9bda3b258ddca197437274b3f4a54",
          "md5": "676f6c515b7b1f76f78cfda592520070",
          "sha256": "679d5ba1decbee197f685961e0e886687d639e910b762bef74648f7b82801f9f"
        },
        "downloads": -1,
        "filename": "cdapython-2022.6.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "676f6c515b7b1f76f78cfda592520070",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.7.1",
        "size": 39512,
        "upload_time": "2022-06-22T14:57:25",
        "upload_time_iso_8601": "2022-06-22T14:57:25.047193Z",
        "url": "https://files.pythonhosted.org/packages/b8/dc/4d7a5ca74a623f8d53ba2104f8f12bf9bda3b258ddca197437274b3f4a54/cdapython-2022.6.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a63043e5a2ae895beefafd92a1cacb5bf4cd36a14576a00087eef9e9c692838c",
          "md5": "4b1086502756c6308f0fa6ef884a5ebd",
          "sha256": "fb3c1f316cee7486f6e4598a89a9a8a9f76df3187da836f603c6da72d5d6cbc7"
        },
        "downloads": -1,
        "filename": "cdapython-2022.6.21.tar.gz",
        "has_sig": false,
        "md5_digest": "4b1086502756c6308f0fa6ef884a5ebd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.7.1",
        "size": 35439,
        "upload_time": "2022-06-22T14:57:27",
        "upload_time_iso_8601": "2022-06-22T14:57:27.300004Z",
        "url": "https://files.pythonhosted.org/packages/a6/30/43e5a2ae895beefafd92a1cacb5bf4cd36a14576a00087eef9e9c692838c/cdapython-2022.6.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.6.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2bd31c84074332d618f6e619b68ef9b86d03a550ca6b4b02e060d5f45dd72f3",
          "md5": "ac7ea527b75c5d4230d0b539e9097089",
          "sha256": "cbc27a28d9d133fef954360fa5e8ac58dd77c2ceb77775376f7872e6d17d152e"
        },
        "downloads": -1,
        "filename": "cdapython-2022.6.22-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac7ea527b75c5d4230d0b539e9097089",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 39543,
        "upload_time": "2022-06-22T15:38:22",
        "upload_time_iso_8601": "2022-06-22T15:38:22.182856Z",
        "url": "https://files.pythonhosted.org/packages/c2/bd/31c84074332d618f6e619b68ef9b86d03a550ca6b4b02e060d5f45dd72f3/cdapython-2022.6.22-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d627629fe74b85c87093d8808a9816136a7420e5f0734706e0892a31191577",
          "md5": "6a25ae378b656a52e5b9ae909e1d6f2b",
          "sha256": "169c8121fbf5e1c1fea551eafb6eeacbb158c6cd9c496f6e70c8623ebd3ce64a"
        },
        "downloads": -1,
        "filename": "cdapython-2022.6.22.tar.gz",
        "has_sig": false,
        "md5_digest": "6a25ae378b656a52e5b9ae909e1d6f2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35458,
        "upload_time": "2022-06-22T15:38:24",
        "upload_time_iso_8601": "2022-06-22T15:38:24.276938Z",
        "url": "https://files.pythonhosted.org/packages/e7/d6/27629fe74b85c87093d8808a9816136a7420e5f0734706e0892a31191577/cdapython-2022.6.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2bd31c84074332d618f6e619b68ef9b86d03a550ca6b4b02e060d5f45dd72f3",
        "md5": "ac7ea527b75c5d4230d0b539e9097089",
        "sha256": "cbc27a28d9d133fef954360fa5e8ac58dd77c2ceb77775376f7872e6d17d152e"
      },
      "downloads": -1,
      "filename": "cdapython-2022.6.22-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac7ea527b75c5d4230d0b539e9097089",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 39543,
      "upload_time": "2022-06-22T15:38:22",
      "upload_time_iso_8601": "2022-06-22T15:38:22.182856Z",
      "url": "https://files.pythonhosted.org/packages/c2/bd/31c84074332d618f6e619b68ef9b86d03a550ca6b4b02e060d5f45dd72f3/cdapython-2022.6.22-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7d627629fe74b85c87093d8808a9816136a7420e5f0734706e0892a31191577",
        "md5": "6a25ae378b656a52e5b9ae909e1d6f2b",
        "sha256": "169c8121fbf5e1c1fea551eafb6eeacbb158c6cd9c496f6e70c8623ebd3ce64a"
      },
      "downloads": -1,
      "filename": "cdapython-2022.6.22.tar.gz",
      "has_sig": false,
      "md5_digest": "6a25ae378b656a52e5b9ae909e1d6f2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35458,
      "upload_time": "2022-06-22T15:38:24",
      "upload_time_iso_8601": "2022-06-22T15:38:24.276938Z",
      "url": "https://files.pythonhosted.org/packages/e7/d6/27629fe74b85c87093d8808a9816136a7420e5f0734706e0892a31191577/cdapython-2022.6.22.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}