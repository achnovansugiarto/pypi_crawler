{
  "info": {
    "author": "Gregor von Laszewski",
    "author_email": "laszewski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Cloudmesh Pi Burner for SD Cards\n\n**WARNING:** *This program is designed for a **Raspberry Pi**. Instructions \nto use **Linux** and macOS are included in the FAQ. If you want to help us port \nto any other OSes, such as Windows 10, please contact laszewski@gmail.com*\n\n[![image](https://travis-ci.com/cloudmesh/cloudmesh-pi-burn.svg?branch=main)](https://travis-ci.com/github/cloudmesh/cloudmesh-pi-burn)\n[![image](https://img.shields.io/pypi/pyversions/cloudmesh-pi-burn.svg)](https://pypi.org/project/cloudmesh-pi-burn)\n[![image](https://img.shields.io/pypi/v/cloudmesh-pi-burn.svg)](https://pypi.org/project/cloudmesh-pi-burn/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\n<!--TOC-->\n\n- [Cloudmesh Pi Burner for SD Cards](#cloudmesh-pi-burner-for-sd-cards)\n  - [1. Introduction](#1-introduction)\n  - [2. Nomenclature](#2-nomenclature)\n  - [3. Quickstarts](#3-quickstarts)\n  - [4. Setup for Bridged WiFi](#4-setup-for-bridged-wifi)\n    - [4.1 Requirements](#41-requirements)\n    - [4.2 Manager Pi](#42-manager-pi)\n    - [4.3 Burning Multiple SD Cards with a Single Burner](#43-burning-multiple-sd-cards-with-a-single-burner)\n    - [4.4 Connecting Pis to the Internet via Bridge](#44-connecting-pis-to-the-internet-via-bridge)\n  - [5. Set up of the SSH keys and SSH tunnel](#5-set-up-of-the-ssh-keys-and-ssh-tunnel)\n  - [6. Manual Pages](#6-manual-pages)\n    - [6.1 Manual Page for the `burn` command](#61-manual-page-for-the-burn-command)\n    - [6.2 Manual Page for the `bridge` command](#62-manual-page-for-the-bridge-command)\n    - [6.3 Manual Page for the `host` command](#63-manual-page-for-the-host-command)\n    - [6.4 Manual Page for the `pi` command](#64-manual-page-for-the-pi-command)\n    - [6.4 Manual Page for the `ssh` command](#64-manual-page-for-the-ssh-command)\n  - [7. FAQ and Hints](#7-faq-and-hints)\n    - [7.1 Quickstart for a Setup of a cluster from macOS or Linux with no burning on a PI.](#71-quickstart-for-a-setup-of-a-cluster-from-macos-or-linux-with-no-burning-on-a-pi)\n    - [7.2 Quickstart for Using a Pi to Burn a Cluster Using Inventory](#72-quickstart-for-using-a-pi-to-burn-a-cluster-using-inventory)\n    - [7.3 Can I use the LEDs on the PI Motherboard?](#73-can-i-use-the-leds-on-the-pi-motherboard)\n    - [7.4 How can I use pycharm, to edit files or access files in general from my Laptop on the PI?](#74-how-can-i-use-pycharm-to-edit-files-or-access-files-in-general-from-my-laptop-on-the-pi)\n    - [7.5 How can I enhance the `get` script?](#75-how-can-i-enhance-the-get-script)\n    - [7.6 Can I use a Mesh Network for the setup?](#76-can-i-use-a-mesh-network-for-the-setup)\n    - [7.7 Can I use cms burn on Linux?](#77-can-i-use-cms-burn-on-linux)\n    - [7.8 What packages do I need to run the info command on macOS](#78-what-packages-do-i-need-to-run-the-info-command-on-macos)\n    - [7.9 Are there any unit tests?](#79-are-there-any-unit-tests)\n    - [7.10 Using Pi Imager to setup a Manager Pi with headless access](#710-using-pi-imager-to-setup-a-manager-pi-with-headless-access)\n    - [7.11 Single Card Burning](#711-single-card-burning)\n    - [7.12 How to update firmware?](#712-how-to-update-firmware)\n    - [7.13 Alternatives](#713-alternatives)\n    - [7.14 How do I scann for WIFI networks?](#714-how-do-i-scann-for-wifi-networks)\n    - [7.15 What is the status of the implementation?](#715-what-is-the-status-of-the-implementation)\n    - [7.16 I run into a Kernal Panic on my burned Pi. What do I do?](#716-i-run-into-a-kernal-panic-on-my-burned-pi-what-do-i-do)\n    - [7.17 How do I enable password login?](#717-how-do-i-enable-password-login)\n    - [7.18 How do I use SDCard externers with different voltage?](#718-how-do-i-use-sdcard-externers-with-different-voltage)\n    - [7.19 How do I get the latest image if a new image was released?](#719-how-do-i-get-the-latest-image-if-a-new-image-was-released)\n  - [8. How can I contribute Contributing](#8-how-can-i-contribute-contributing)\n\n<!--TOC-->\n\n## 1. Introduction\n\n`cms burn` is a program to burn many SD cards for the preparation of\nbuilding clusters with Raspberry Pi's. It allows users to create\nreadily bootable SD cards that have the network configured and contain a\npublic ssh key from your machine that you then use to login into the\nPIs after boot. Thus, little setup is needed for a cluster after boot. Another\nunique feature is that you can burn multiple cards in a row, each with\ntheir individual setup such as hostnames and ipadresses.\n\n\n## 2. Nomenclature\n\n* Commands proceeded with `pi@managerpi:$` are to be executed on the\n  Raspberry Pi with the name `managerpi`.\n\n* Commands with `(ENV3) pi@managerpi:$` are to be executed in a virtual ENV\n  using Python 3 on the Raspberry Pi with the name managerpi\n\n## 3. Quickstarts\n\nWe provide the following quickstarts:\n\n1. [Quickstart to burn worker SD Cards on a PI via an inventory](#72-quickstart-for-using-a-pi-to-burn-a-cluster-using-inventory)\n2. [Quickstart to burn all cards on  macOS or Linux vi the cluster command](#71-quickstart-for-a-setup-of-a-cluster-from-macos-or-linux-with-no-burning-on-a-pi)\n\n   On macOS this requires you have write access for ext4 which requires the\n   purchase of additional software. If you do not lke to do this see the\n   solution discussed in 1.\n\nHowever before you do the Quickstarts we encourage you to look at other \nfeatures we provide.   \n\n## 4. Setup for Bridged WiFi\n\nTo provide you with a glimpse of what you can do with cms burn, we\nhave provided this quickstart guide that will create one manager PI and\nseveral workers.\n\nThis setup is intended for those who have restricted access to their\nnetwork (ie. cannot access router controls).  For example, those\non campus WiFis or regulated apartment WiFis.\n\nFigure 1 describes our network configuration. We have 5\nRaspberry Pi 4s: 1 manager and 4 workers. We have WiFi access, but we\ndo not necessarily have wired access or access to the router's controls.\n\nWe also have a network switch, where the manager and workers can\ncommunicate locally, but we will configure the manager to provide\ninternet access to devices on the network switch via a \"network\nbridge\".\n\n![](https://github.com/cloudmesh/cloudmesh-pi-burn/raw/main/images/network-bridge.png)\n\nFigure 1: Pi Cluster setup with bridge network\n\n### 4.1 Requirements\n\nFor the quickstart we have the following hardware requirements:\n\n* SD Cards and Raspberry Pis\n\n* You will need an SD card reader/writer (USB-A) to burn new cards. We\n  recommend that you buy a USB 3.0 SDCard reader/writer as they are\n  significantly faster and you can reuse them on PI'4s. Make sure to\n  get an adapter if your normal computer only supports USB-C\n\n* You will need a Raspberry Pi cluster. Detailed information about\n  parts are provided at our\n  [Web page](https://cloudmesh.github.io/pi/docs/hardware/parts/).\n\n### 4.2 Manager Pi\n\nFirst we need to configure the Manager Pi\n\n**Step 0.** Burn Manager Pi SD Card\n\nUsing [Raspberry Pi imager](https://www.raspberrypi.org/software/),\n  burn an SD card with *Raspberry Pi OS (32-bit) with desktop and\n  recommended applications*. You may use your normal system to burn\n  such a card including Windows, macOS, or Linux.\n\nYou will then want a method of accessing this manager Pi. You may\neither use SSH (recommended) from the command line or a monitor to use the desktop environment (easiest)\nto access it. We highly recommend\n[changing the password](https://www.raspberrypi.org/documentation/linux/usage/users.md)\non the Pi as soon as you have access. This is because the pi is\ninitialized with default user `pi` and default password\n`raspberry`. This is critical if you are on a shared network where\nanyone can attempt to access your pi.\n\n> Monitor Desktop Environment: You will need a monitor, keyboard, and\n> mouse. This is the easiest approach as Raspberry Pi OS provides a\n> very nice user interface with an easy-to-follow setup process for\n> connecting to WiFi and other such tasks.\n\n> SSH Environment: You may consider enabling SSH access to your Pi so\n> that you may access the file system from your preferred machine.\n\n> Headless Configuration: See section 3 of\n> [enabling ssh](https://www.raspberrypi.org/documentation/remote-access/ssh/)\n> for instructions on how to enable SSH headlessly. Similarly,\n> [how to enable WiFi headlessly](https://raspberrypi.stackexchange.com/questions/10251/prepare-sd-card-for-wifi-on-headless-pi).\n> Additionally you can check out the FAQ for step-by-step\n> instructions.\n> [Using Pi Imager to setup a Manager Pi with headless access](#using-pi-imager-to-setup-a-manager-pi-with-headless-access).\n\n> Update the firmware: See the FAQ [How to update firmware?](#712-how-to-update-firmware)\n\n**Step 1.** Installing Cloudmesh on the Manager Pi\n\nOpen a new terminal screen on the Manager Pi. Here we assume the\nhostname is `managerpi`. However, this is of no importance in relation\nto the topics of this guide.\n\nUpdate pip. The simple curl command below will generate an ssh-key,\nupdate your system, and install cloudmesh.\n\n```\npi@managerpi:~ $ pip install pip -U\npi@managerpi:~ $ curl -Ls http://cloudmesh.github.io/get/pi | sh -                \n```\n\nThis will take a moment...\n\n**Step 2.** Reboot\n\nThe installation script updates your system. Reboot for effect.\n\n```\npi@managerpi:~ $ sudo reboot\n```\n\n**Step 3.** Download the latest Raspberry Pi Lite OS\n\nThe following command will download the latest images for Raspberry\nLite OS.\n\n```\n(ENV3) pi@managerpi:~ $ cms burn image get latest-lite\n```\n\nWe can verify our image's downloaded with the following.\n\n```\n(ENV3) pi@managerpi:~ $ cms burn image ls\n```\n\n> **Note.** For our cluster we use light, but if you like \n> to use other versions please see this note.\n> We can use the following command to list the current\n> Raspberry Pi OS versions (full and lite)\n>\n> ```\n> (ENV3) pi@managerpi:~ $ cms burn image versions --refresh\n> ```\n>\n> This will list the Tags and Types of each available OS. We can then\n> modify the `image get` command for versions we are interested in. For\n> example,\n>\n> ```\n> (ENV3) pi@managerpi:~ $ cms burn image get full-2020-05-28\n> ```\n\n\n**Step 4**. Setup SD Card Writer\n\nPlug your SD Card Writer into the Pi. Ensure you have an SD Card\ninserted into your writer. Run the following command to find the path\nto your SD Card.\n\n```\n(ENV3) pi@managerpi:~ $ cms burn info\n...\n# ----------------------------------------------------------------------\n# SD Cards Found\n# ----------------------------------------------------------------------\n\n+----------+----------------------+----------+-----------+-------+------------------+---------+-----------+-----------+\n| Path     | Info                 | Readable | Formatted | Empty | Size             | Aaccess | Removable | Writeable |\n+----------+----------------------+----------+-----------+-------+------------------+---------+-----------+-----------+\n| /dev/sda | Generic Mass-Storage | True     | True      | False | 64.1 GB/59.7 GiB | True    | True      |           |\n+----------+----------------------+----------+-----------+-------+------------------+---------+-----------+-----------+\n```\n\n> `cms burn info` has other useful information, but for the purposes\n> of this guide we omit it.\n\nWe can see from the information displayed that our SD card's path is\n`/dev/sda`. Of course, this may vary. \n\n### 4.3 Burning Multiple SD Cards with a Single Burner\n\n**Step 0.** Ensure the first SD card is inserted into the burner.\n\nWe can run `cms burn info` again as we did above to verify our SD \nCard is connected.\n\n**Step 1.** Burning the Cards\n\n`cms burn` supports parameterized hostnames that allow automatic incrementation\nof numbers.\n\nFor example, `red00[1-2]` is interpreted by cms burn as `[red001, red002]`.\nSimilarly, `red[a-c]` is interpreted by cms burn as `[reda, redb, redc]`.\n\nWe can burn 2 SD cards as follows:\n\n**!! WARNING VERIFY THE DEVICE IS CORRECT. REFER TO CMS BURN !!**\n\n```\n(ENV3) pi@managerpi:~ $ cms burn create --hostname=red00[1-4] --ip=10.1.1.[2-5] --device=/dev/sda --tag=latest-lite\n```\n\nThe user will be prompted to swap the SD cards after each card burn if \nthere are still remaining cards to burn.\n\n**Step 2.** Boot the cluster\n\nAfter all cards are burned. Turn off the cluster, insert the cards, and turn \nthe cluster back on.\n\nWe can now proceed to the next section where we configure our bridge.\n\n### 4.4 Connecting Pis to the Internet via Bridge\n\nFigure 1 depicts how the network is set up with the help of the bridge\ncommand.\n\n![](https://github.com/cloudmesh/cloudmesh-pi-burn/raw/main/images/network-bridge.png)\n\nFigure 1: Networking Bridge\n\n**Step 0.** Review and Setup\n\nAt this point, we assume that you have used `cms burn` to create all SD\ncards for the Pi's with static IP addresses in the subnet range\n`10.1.1.0/24` (excluding `10.1.1.1`. See step 1 for details)\n\nWe are also continuing to use `managerpi` (which is where we burn the\nworker SD cards).\n\nWe will now use `cms bridge` to connect the worker Pis to the\ninternet. Let us again reference the diagram of our network setup. You\nshould now begin connecting your Pis via the network switch\n(unmanaged or managed) if you have not done so already. Ensure that\n`managerpi` is also connected to the network switch.\n\nWe assign the eth0 interface of the `managerpi` to be 10.1.1.1, and it \nacts as the default gateway for the workers. The workers' IPs were set \nduring the create command.\n\n**Step 1.** Configuring our Bridge\n\nWe can easily create our bridge as follows. \n\n```\n(ENV3) pi@managerpi:~ $ cms bridge create --interface='wlan0'\n```\n\nWe should now reboot.\n\n```\n(ENV3) pi@managerpi:~ $ sudo reboot\n```\n\n> Note the `--interface` option indicates the interface used by the\n> manager pi to access the internet.  In this case, since we are using\n> WiFi, it is likely `wlan0`. Other options such as `eth0` and `eth1`\n> exist for ethernet connections.\n\n**Step 2.** Verifying internet connection \n\nWe should now be able to see our workers. \n\n```\narp -a\n```\n\nNote it may take a few minutes for them to populate in the neighbor table. If \nyou want to speed this up try to ping them individually.\n\n```\nping red002\n```\n\nAt this point, our workers should have internet access. Let us SSH\ninto one and ping google.com to verify. Ensure you have booted your\nworkers and connected them to the same network switch as the manager.\n\n```\n(ENV3) pi@managerpi:~ $ ssh red002\n\npi@red002:~ $ ping google.com\nPING google.com (142.250.64.238) 56(84) bytes of data.\n64 bytes from mia07s57-in-f14.1e100.net (142.250.64.238): icmp_seq=1 ttl=106 time=48.2 ms\n64 bytes from mia07s57-in-f14.1e100.net (142.250.64.238): icmp_seq=2 ttl=106 time=48.3 ms\n64 bytes from mia07s57-in-f14.1e100.net (142.250.64.238): icmp_seq=3 ttl=106 time=47.9 ms\n64 bytes from mia07s57-in-f14.1e100.net (142.250.64.238): icmp_seq=4 ttl=106 time=47.10 ms\n64 bytes from mia07s57-in-f14.1e100.net (142.250.64.238): icmp_seq=5 ttl=106 time=48.5 ms\n^C\n--- google.com `ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 9ms\nrtt min/avg/max/mdev = 47.924/48.169/48.511/0.291 ms\n```\n\nNote how we are able to omit the pi user and .local extension. We have\nsuccessfully configured our bridge. Our pis are now ready to cluster.\n\n## 5. Set up of the SSH keys and SSH tunnel\n\nOne important aspect of a cluster is to setup authentication via ssh\nin a convenient way, so we can easily login from the laptop to each of\nthe PI workers and the PI manager. Furthermore, we like to be able to\nlogin from the PI manager to each of the workers. In addition, we like\nto be able to login between the workers.\n\nWe have chosen a very simple setup while relying on ssh tunnel.\n\nTo simplify the setup of this we have developed a command `cms host`\nthat gathers and scatters keys onto all machines, as well as sets up\nthe tunnels.\n\nIt is essential that the key on the laptop must not be password\nless. This is also valid for any machine that is directly added to the\nnetwork such as in the mesh network.\n\nTo avoid password less keys we recommend you to use `ssh-add` \nor `ssh-keychain` which will ask you for one.\n\nThe manual page for `cms host` is provided in the Manual Pages\nsection.\n\n**Step 1.** On the manager create ssh keys for each of the workers.\n\n```\n(ENV3) pi@managerpi:~ $ cms host key create red00[1-3]\n```\n\n**Step 2.** On the manager gather the worker, manager, and your laptop\npublic ssh keys into a file.\n\n```\n(ENV3) pi@managerpi:~ $ cms host key gather red00[1-3],you@yourlaptop.local ~/.ssh/authorized_keys\n```\n\n**Step 3.** On the manager scatter the public keys to all the workers\nand manager ~/.ssh/authorized_hosts file\n\n```\n(ENV3) pi@managerpi:~ $ cms host key scatter red00[1-3],localhost ~/.ssh/authorized_keys\n```\n\n**Step 4.** Remove undeeded keys.txt file\n\n```\n(ENV3) pi@managerpi:~ $ rm keys.txt\n```\n\n**Step 5.** Verify SSH reachability from worker to manager and worker to worker.\n\n```\n(ENV3) pi@managerpi:~ $ ssh red001\npi@red001:~ $ ssh managerpi.local\n```\n\nTODO: BUG: The workers still currently still need to use .local after names. This \nwill be resolved by the inventory create update.\n\n```\n(ENV3) pi@managerpi:~ $ exit\npi@red001:~ $ ssh red002.local\npi@red002:~ $ exit\npi@red001:~ $ exit\n```\n\n**Step 6.** (For Bridge setup) Create SSH tunnels on the manager \nto enable ssh access from your laptop to the workers\n\nFor now, we manually install autossh, to test the new cms host tunnel\nprogram. Later we add it to the main manager setup script.\n\n```\n(ENV3) pi@managerpi:~ $ yes y | sudo apt install autossh\n(ENV3) pi@managerpi:~ $ cms host tunnel create red00[1-3]\n```\n\n**Step 7.** (For Bridge setup) Copy the specified command output to \nyour `~/.ssh/config` file on your laptop\n\n```\nhost tunnel create red00[1-3]\n\nUsing wlan0 IP = 192.168.1.17\nUsing cluster hostname = managerpi\n\nTunnels created.\n\nPlease place the following in your remote machine's (i.e. laptop)\n`~/.ssh/config` file to alias simple ssh access (i.e. `ssh red001`).\n\n# ----------------------------------------------------------------------\n# copy to ~/.ssh/config on remote host (i.e laptop)\n# ----------------------------------------------------------------------\n\nHost red001\n     HostName managerpi.local\n     User pi\n     Port 8001\n\nHost red002\n     HostName managerpi.local\n     User pi\n     Port 8002\n\nHost red003\n     HostName managerpi.local\n     User pi\n     Port 8003\n```\n\n> Note: We will in the future provide an addition to the command so you \n> can remove and add\n> them directly from the command line\n> \n> ```\n> cms host tunnel config create red00[1-3]\n> cms host tunnel config delete red00[1-3]\n> ```\n\n**Step 8.** (For Bridge setup) Verify SSH reachability from the laptop\n  to workers\n\n```\nyou@yourlaptop:~ $ ssh red001\n```\n\n**Step 9.** Shutdown or reboot your entire cluster using the commands below.\n\n```\nyou@yourlaptop:~ $ cms host shutdown red,red00[1-3]\n```\n\n```\nyou@yourlaptop:~ $ cms host reboot red,red00[1-3]\n```\n\n## 6. Manual Pages\n\n### 6.1 Manual Page for the `burn` command\n\nNote to execute the command on the command line you have to type in\n`cms burn` and not just `burn`.\n\n<!--MANUAL-BURN-->\n```\n  burn gui [--hostname=HOSTNAME]\n           [--ip=IP]\n           [--ssid=SSID]\n           [--wifipassword=PSK]\n           [--bs=BLOCKSIZE]\n           [--dryrun]\n           [--no_diagram]\n  burn ubuntu NAMES [--inventory=INVENTORY] [--ssid=SSID] [-f]\n  [--wifipassword=PSK] [-v] --device=DEVICE [--country=COUNTRY]\n  [--upgrade]\n  burn raspberry NAMES --device=DEVICE\n                      [--inventory=INVENTORY]\n                      [--ssid=SSID]\n                      [--wifipassword=PSK]\n                      [--country=COUNTRY]\n                      [--password=PASSWORD]\n                      [-v]\n                      [-f]\n  burn firmware check\n  burn firmware update\n  burn install\n  burn load --device=DEVICE\n  burn format --device=DEVICE\n  burn imager [TAG...]\n  burn mount [--device=DEVICE] [--os=OS]\n  burn unmount [--device=DEVICE] [--os=OS]\n  burn network list [--ip=IP] [--used]\n  burn network\n  burn info [--device=DEVICE]\n  burn image versions [--details] [--refresh] [--yaml]\n  burn image ls\n  burn image delete [--image=IMAGE]\n  burn image get [--url=URL] [TAG...]\n  burn backup [--device=DEVICE] [--to=DESTINATION]\n  burn copy [--device=DEVICE] [--from=DESTINATION]\n  burn shrink [--image=IMAGE]\n  burn cluster --device=DEVICE --hostname=HOSTNAME\n               [--burning=BURNING]\n               [--ip=IP]\n               [--ssid=SSID]\n               [--wifipassword=PSK]\n               [--bs=BLOCKSIZE]\n               [--os=OS]\n               [-y]\n               [--imaged]\n               [--set_passwd]\n  burn create [--image=IMAGE]\n              [--device=DEVICE]\n              [--burning=BURNING]\n              [--hostname=HOSTNAME]\n              [--ip=IP]\n              [--sshkey=KEY]\n              [--blocksize=BLOCKSIZE]\n              [--passwd=PASSWD]\n              [--ssid=SSID]\n              [--wifipassword=PSK]\n              [--format]\n              [--tag=TAG]\n              [--inventory=INVENTORY]\n              [--name=NAME]\n              [-y]\n  burn sdcard [TAG...] [--device=DEVICE] [-y]\n  burn set [--hostname=HOSTNAME]\n           [--ip=IP]\n           [--key=KEY]\n           [--keyboard=COUNTRY]\n           [--cmdline=CMDLINE]\n  burn enable ssh\n  burn wifi --ssid=SSID [--passwd=PASSWD] [--country=COUNTRY]\n  burn check [--device=DEVICE]\n  burn mac --hostname=HOSTNAME\n\n\n\nOptions:\n  -h --help              Show this screen.\n  --version              Show version.\n  --image=IMAGE          The image filename,\n                         e.g. 2019-09-26-raspbian-buster.img\n  --device=DEVICE        The device, e.g. /dev/sdX\n  --hostname=HOSTNAME    The hostnames of the cluster\n  --ip=IP                The IP addresses of the cluster\n  --key=KEY              The name of the SSH key file\n  --blocksize=BLOCKSIZE  The blocksise to burn [default: 4M]\n  --burning=BURNING      The hosts to be burned\n\nArguments:\n   TAG                   Keyword tags to identify an image\n\nFiles:\n  This is not fully thought through and needs to be documented\n  ~/.cloudmesh/images\n    Location where the images will be stored for reuse\n\nDescription:\n    cms burn create --inventory=INVENTORY --device=DEVICE --name=NAME\n\n        Will refer to a specified cloudmesh inventory file (see cms help inventory).\n        Will search the configurations for NAME inside of INVENTORY and will burn\n        to DEVICE. Supports parameter expansion.\n\n    cms burn create --passwd=PASSWD\n\n         if the passwd flag is added the default password is\n         queried from the commandline and added to all SDCards\n\n         if the flag is omitted login via the password is\n         disabled and only login via the sshkey is allowed\n\n  Network\n\n    cms burn network list\n\n        Lists the ip addresses that are on the same network\n\n         +------------+---------------+----------+-----------+\n         | Name       | IP            | Status   | Latency   |\n         |------------+---------------+----------+-----------|\n         | Router     | 192.168.1.1   | up       | 0.0092s   |\n         | iPhone     | 192.168.1.4   | up       | 0.061s    |\n         | red01      | 192.168.1.46  | up       | 0.0077s   |\n         | laptop     | 192.168.1.78  | up       | 0.058s    |\n         | unkown     | 192.168.1.126 | up       | 0.14s     |\n         | red03      | 192.168.1.158 | up       | 0.0037s   |\n         | red02      | 192.168.1.199 | up       | 0.0046s   |\n         | red        | 192.168.1.249 | up       | 0.00021s  |\n         +------------+----------------+----------+-----------+\n\n    cms burn network list [--used]\n\n        Lists the used ip addresses as a comma separated parameter\n        list\n\n           192.168.50.1,192.168.50.4,...\n\n    cms burn network address\n\n        Lists the own network address\n\n         +---------+----------------+----------------+\n         | Label   | Local          | Broadcast      |\n         |---------+----------------+----------------|\n         | wlan0   | 192.168.1.12   | 192.168.1.255  |\n         +---------+----------------+----------------+\n\n    cms burn firmware check\n\n        Checks if the firmware on the Pi is up to date\n\n    cms burn firmware update\n\n        Checks and updates the firmware on the Pi\n\n    cms burn install\n\n        Installs a program to shrink img files. THis is\n        useful, after you created a backup to make the\n        backup smaller and allow faster burning in case of\n        recovery\n\n        This command is not supported on MacOS\n\n    cms burn load --device=DEVICE\n\n        Loads the sdcard into the USB drive. Thi sis similar to\n        loading a cdrom drive. It s the opposite to eject\n\n    cms burn format --device=DEVICE\n\n        Formats the SDCard in the specified device. Be\n        careful it is the correct device.  cms burn info\n        will help you to identifying it\n\n    cms burn mount [--device=DEVICE] [--os=OS]\n\n        Mounts the file systems available on the SDCard\n\n    cms burn unmount [--device=DEVICE] [--os=OS]\n\n        Unmounts the mounted file systems from the SDCard\n\n    cms burn info [--device=DEVICE]\n\n        Provides useful information about the SDCard\n\n    cms burn image versions [--refresh] [--yaml]\n\n        The images that you like to burn onto your SDCard\n        can be cached locally with the image command.  The\n        available images for the PI can be found when\n        using the --refresh option. If you do not specify\n        it it reads a copy of the image list from our\n        cache\n\n    cms burn image ls\n\n        Lists all downloaded images in our cache. You can\n        download them with the cms burn image get command\n\n    cms burn image delete [--image=IMAGE]\n\n        Deletes the specified image. The name can be found\n        with the image ls command\n\n    cms burn image get [--url=URL] [TAG...]\n\n        Downloads a specific image or the latest\n        image. The tag are a number of words separated by\n        a space that must occur in the tag that you find\n        in the versions command\n\n    cms burn backup [--device=DEVICE] [--to=DESTINATION]\n\n        This command requires you to install pishrink previously with\n\n            cms burn install\n\n        Backs up a SDCard to the given location.\n\n    cms burn copy [--device=DEVICE] [--from=DESTINATION]\n\n        Copies the file form the destination on the SDCard\n        this is the same as the SDCard command. we will in\n        future remove one\n\n    cms burn shrink [--image=IMAGE]\n\n        Shrinks the size of a backup or image file that\n        is on your local file system. It can only be used\n        for .img files\n\n       This command is not supported on MacOS.\n\n    cms burn create [--image=IMAGE]\n                    [--device=DEVICE]\n                    [--hostname=HOSTNAME]\n                    [--ip=IP]\n                    [--sshkey=KEY]\n                    [--blocksize=BLOCKSIZE]\n                    [--passwd=PASSWD]\n                    [--ssid=SSID]\n                    [--wifipassword=PSK]\n                    [--format]\n\n        This command  not only can format the SDCard, but\n        also initializes it with specific values\n\n    cms burn sdcard [TAG...] [--device=DEVICE]\n\n        this burns the sd card, see also copy and create\n\n    cms burn set [--hostname=HOSTNAME]\n                 [--ip=IP]\n                 [--key=KEY]\n                 [--mount=MOUNTPOINT]\n                 [--keyboard=COUNTRY]\n                 [--cmdline=CMDLINE]\n\n        Sets specific values on the sdcard after it\n        has ben created with the create, copy or sdcard\n        command\n\n        a --ssh is missing from this command\n\n    cms burn enable ssh [--mount=MOUNTPOINT]\n\n        Enables the ssh server once it is booted\n\n    cms burn wifi --ssid=SSID [--passwd=PASSWD] [--country=COUNTRY]\n\n        Sets the wifi ssid and password after the card\n        is created, copied, or the sdcard is used.\n\n        The option country option expects an ISO 3166-1\n        two digit country code. The default is \"US\" and\n        the option not required if suitable. See\n        https://en.wikipedia.org/wiki/ISO_3166-1 for other\n        countries.\n\n    cms burn check [--device=DEVICE]\n\n        Lists the parameters that were set\n        with the set or create command\n\nExamples: ( \\ is not shown)\n\n   > cms burn create --image=2019-09-26-raspbian-buster-lite\n   >                 --device=/dev/mmcblk0\n   >                 --hostname=red[5-7]\n   >                 --ip=192.168.1.[5-7]\n   >                 --sshkey=id_rsa\n\n   > cms burn image get latest\n\n   > cms burn image get https://downloads.raspberrypi.org/\n   >   raspbian_lite/images/\n   >   raspbian_lite-2018-10-11/2018-10-09-raspbian-stretch-lite.zip\n\n   > cms burn image delete 2019-09-26-raspbian-buster-lite\n\n```\n<!--MANUAL-BURN-->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 6.2 Manual Page for the `bridge` command\n\nNote to execute the command on the commandline you have to type in\n`cms bridge` and not just `bridge`.\n\n<!--MANUAL-BRIDGE-->\n```\n  bridge create [--interface=INTERFACE] [--ip=IP] [--dns=NAMESERVER]\n\nOptions:\n  --interface=INTERFACE  The interface name [default: eth1]\n                         You can also specify wlan0 if you want\n                         to bridge through WIFI on the manager\n                         eth0 requires a USB to WIFI adapter\n\n  --ip=IP  The ip address to assign on the eth0 interface,\n           ie. the listening interface [default: 10.1.1.1]\n\n  --dns=NAMESERVER  The ip address of a nameserver to set\n                    statically. For example, --dns=8.8.8.8,8.8.4.4\n                    will use the google nameservers\n\nDescription:\n\n  Command used to set up a bride so that all nodes route the traffic\n  trough the manager PI.\n\n  bridge create [--interface=INTERFACE] [--ip=IP] [--dns=NAMESERVER]\n      creates the bridge on the current device.\n      A reboot is required.\n```\n<!--MANUAL-BRIDGE-->\n\n\n\n\n\n### 6.3 Manual Page for the `host` command\n\nNote to execute the command on the commandline you have to type in\n`cms host` and not jsut `host`.\n\n<!--MANUAL-HOST-->\n```\n    host scp NAMES SOURCE DESTINATION [--dryrun]\n    host ssh NAMES COMMAND [--dryrun] [--output=FORMAT]\n    host config NAMES [IPS] [--user=USER] [--key=PUBLIC]\n    host check NAMES [--user=USER] [--key=PUBLIC]\n    host key create NAMES [--user=USER] [--dryrun] [--output=FORMAT]\n    host key list NAMES [--output=FORMAT]\n    host key gather NAMES [--authorized_keys] [FILE]\n    host key scatter NAMES FILE [--user=USER]\n    host key add NAMES FILE\n    host key delete NAMES FILE\n    host tunnel create NAMES [--port=PORT]\n    host mac NAMES [--eth] [--wlan] [--output=FORMAT]\n    host setup WORKERS [LAPTOP]\n    host shutdown NAMES\n    host reboot NAMES\n    host adduser NAMES USER\n    host passwd NAMES USER\n    host addsudo NAMES USER\n    host deluser NAMES USER\n    host config proxy PROXY NAMES [--append]\n\n\nThis command does some useful things.\n\nArguments:\n    FILE   a file name\n\nOptions:\n    --dryrun   shows what would be done but does not execute\n    --output=FORMAT  the format of the output\n    --port=PORT starting local port for tunnel assignment\n\nDescription:\n\n    host scp NAMES SOURCE DESTINATION\n\n      TBD\n\n    host ssh NAMES COMMAND\n\n      runs the command on all specified hosts\n      Example:\n           ssh red[01-10] \"uname -a\"\n\n    host key create NAMES\n      create a ~/.ssh/id_rsa and id_rsa.pub on all hosts specified\n      Example:\n          ssh key create \"red[01-10]\"\n\n    host key list NAMES\n\n      list all id_rsa.pub keys from all hosts specifed\n       Example:\n           ssh key list red[01-10]\n\n    host key gather HOSTS FILE\n\n      gathers all keys from file FILE including the one from localhost.\n\n          ssh key gather \"red[01-10]\" keys.txt\n\n    host key scatter HOSTS FILE [--user=USER]\n\n      copies all keys from file FILE to authorized_keys on all hosts,\n      but also makes sure that the users ~/.ssh/id_rsa.pub key is in\n      the file. If provided the optional user, it will add the keys to\n      that user's .ssh directory. This is often required when\n      adding a new user in which case HOSTS should still a sudo\n      user with ssh currently enabled.\n\n      1) adds ~/.id_rsa.pub to the FILE only if its not already in it\n      2) removes all duplicated keys\n\n      Example:\n          ssh key scatter \"red[01-10]\"\n          ssh key scatter pi@red[01-10] keys.txt --user=alice\n\n    host key add NAMES FILE\n\n      Adds all keys in FILE into the authorized_keys of NAMES.\n\n      Example:\n          cms host key add worker001 ~/.ssh/id_rsa.pub\n\n    host key delete NAMES FILE\n\n      Deletes all keys in fILE from authorized_keys of NAMES if they exist.\n\n      Example\n          cms host key delete worker001 ~/.ssh/id_rsa.pub\n\n    host key scp NAMES FILE\n\n      copies all keys from file FILE to authorized_keys on all hosts\n      but also makes sure that the users ~/.ssh/id_rsa.pub key is in\n      the file and removes duplicates, e.g. it calls fix before upload\n\n      Example:\n          ssh key list red[01-10] > pubkeys.txt\n          ssh key scp red[01-10] pubkeys.txt\n\n    host config NAMES IPS [--user=USER] [--key=PUBLIC]\n\n      generates an ssh config file tempalte that can be added to your\n      .ssh/config file\n\n      Example:\n          cms host config \"red,red[01-03]\" \"198.168.1.[1-4]\" --user=pi\n\n    host check NAMES [--user=USER] [--key=PUBLIC]\n\n      This command is used to test if you can login to the specified\n      hosts. It executes the hostname command and compares it.\n      It provides a table  with a sucess column\n\n      cms host check \"red,red[01-03]\"\n\n          +-------+---------+--------+\n          | host  | success | stdout |\n          +-------+---------+--------+\n          | red   | True    | red    |\n          | red01 | True    | red01  |\n          | red02 | True    | red02  |\n          | red03 | True    | red03  |\n          +-------+---------+--------+\n\n    host tunnel create NAMES [--port=PORT]\n\n      This command is used to create a persistent local port\n      forward on the host to permit ssh tunnelling from the wlan to\n      the physical network (eth). This registers an autossh service in\n      systemd with the defualt port starting at 8001.\n\n      Example:\n          cms host tunnel create red00[1-3]\n\n    host mac NAMES\n\n      returns the list of mac addresses of the named pis.\n\n    host setup WORKERS [LAPTOP]\n\n      Executes the following steps\n\n          cms bridge create --interface='wlan0'\n          cms host key create red00[1-3]\n          cms host key gather red00[1-3],you@yourlaptop.local keys.txt\n          cms host key scatter red00[1-3],localhost keys.txt\n          rm keys.txt\n          cms host tunnel create red00[1-3]\n\n    host shutdown NAMES\n\n      Shutsdown NAMES with `sudo shutdown -h now`. If localhost in\n      names, it is shutdown last.\n\n    host reboot NAMES\n\n      Reboots NAMES with `sudo reboot`. If localhost in names,\n      it is rebooted last.\n\n    host adduser NAMES USER\n\n      Adds a user with user name USER to the hosts identified by\n      NAMES. Password is disabled, see host passwd to enable.\n\n    host addsudo NAMES USER\n\n      Adds sudo rights to USER at NAMES\n\n    host passwd NAMES USER\n\n      Changes the password for USER at NAMES\n\n    host deluser NAMES USER\n\n      Deleted USER from NAMES. Home directory will be removed.\n\n    host config proxy PROXY NAMES\n\n      This adds to your ~/.ssh/config file a ProxyJump\n      configuration to reach NAMES via PROXY. This is useful when\n      the PROXY is acting as a network bridge for NAMES to your\n      current device.\n\n      Example:\n          cms host config proxy pi@red.lcaol red00[1-2]\n```\n<!--MANUAL-HOST-->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 6.4 Manual Page for the `pi` command\n\nNote to execute the command on the command line you have to type in\n`cms pi` and not just `pi`.\n\nThere is some very usefull aditional information about how to use the\nLED and temperature monitoring programs at\n\n* <https://github.com/cloudmesh/cloudmesh-pi-cluster/blob/main/README.md>\n\n<!--MANUAL-PI-->\n```\n  pi led reset [NAMES]\n  pi led (red|green) VALUE\n  pi led (red|green) VALUE NAMES [--user=USER]\n  pi led list NAMES [--user=USER]\n  pi led blink (red|green) NAMES [--user=USER] [--rate=SECONDS]\n  pi led sequence (red|green) NAMES [--user=USER] [--rate=SECONDS]\n  pi temp NAMES [--rate=SECONDS] [--user=USER] [--output=FORMAT]\n  pi free NAMES [--rate=SECONDS] [--user=USER] [--output=FORMAT]\n  pi load NAMES [--rate=SECONDS] [--user=USER] [--output=FORMAT]\n  pi wifi SSID [PASSWORD] [--dryrun]\n  pi script list SERVICE [--details]\n  pi script list SERVICE NAMES\n  pi script list\n\nArguments:\n    NAMES       The hostnames in parameterized form\n    VALUE       The Values are on, off, 0, 1\n    USER        The user name for a login\n    SSID        The ssid of your WIfi\n    PASSWORD    The assword for the WIFI\n\n  Options:\n     -v               verbose mode\n     --output=OUTPUT  the format in which this list is given\n                      formats includes cat, table, json, yaml,\n                      dict. If cat is used, it is just print\n     --user=USER      the user name\n     --rate=SECONDS   repeats the quere given by the rate in seconds\n\nDescription:\n\n      This command allows to set the leds on the PI board and return\n      information about the PIs such as temperature, memory space and\n      load. It also allows to set the wifi for the PI.\n\n      The most important part of this command is that it executes it not\n      only on ome pi but multiple. The hostnames are defined by a parameterized\n      notation. red0[1-2] results in red01 and red02.\n\n      The script command are not yet completed and is under development\n\n      The script commands can be used as an alternative to shell scripts.\n      They are predefined scripts that can be run easily vai the command\n      The script commands are listing details. This is useful as they are\n      distributed with the cloudmesh shell. Thus no additional files are\n      needed.\n\n      At this time we do not define any predefined scripts.\n\n\n  Examples:\n\n      This command switches on and off the LEDs of the specified\n      PIs. If the hostname is omitted. It is assumed that the\n      code is executed on a PI and its LED are set. To list the\n      PIs LED status you can use the list command\n\n      cms pi led list  \"red,red[01-03]\"\n\n          lists the LED status of the given hosts\n\n      cms pi led red off  \"red,red[01-03]\"\n\n          switches off the led of the given PIs\n\n      cms pi led red on  \"red,red[01-03]\"\n\n          switches on the led of the given PIs\n\n      cms pi led red blink  \"red,red[01-03]\"\n\n          switches on and off the led of the given PIs\n\n      cms pi led red sequence  \"red,red[01-03]\"\n\n          goes in sequential order and switches on and off\n          the led of the given PIs\n\n      To showcase information about temperature free space an load\n      you can ues\n\n          pi temp \"red,red[01-03]\"\n          pi free \"red,red[01-03]\"\n          pi load \"red,red[01-03]\"\n\n      To set the WIFI use (where SSID is your ssid). The command\n      requires a reboot to activate the WIfi.\n\n          pi wifi SSID\n\n      The script commands are not yet implemented\n\n          pi script list SERVICE [--details]\n          pi script list SERVICE NAMES\n          pi script list\n\n```\n<!--MANUAL-PI-->\n\n\n\n\n\n\n### 6.4 Manual Page for the `ssh` command\n\nNote to execute the command on the command line you have to type in\n`cms ssh` and not just `ssh`.\n\nTHis command is used to easily add and remove entries to the `~/.ssh/config`\nfile via the commandline\n\n<!--MANUAL-SSH-->\n```\n    ssh config list [--output=OUTPUT]\n    ssh config add NAME IP [USER] [KEY]\n    ssh config delete NAME\n\nArguments:\n  NAME        Name or ip of the machine to log in\n  list        Lists the machines that are registered and\n              the commands to login to them\n  PARAMETERS  Register te resource and add the given\n              parameters to the ssh config file.  if the\n              resource exists, it will be overwritten. The\n              information will be written in /.ssh/config\n  USER        The username for the ssh resource\n  KEY         The location of the public keye used for\n              authentication to the host\n\nOptions:\n   --output=OUTPUT   the format in which this list is given\n                     formats includes cat, table, json, yaml,\n                     dict. If cat is used, it is just printed as\n                     is. [default: table]\n\nDescription:\n    ssh config list\n        lists the hostsnames that are present in the ~/.ssh/config file\n\n    ssh config add NAME IP [USER] [KEY]\n        registers a host i ~/.ssh/config file\n        Parameters are attribute=value pairs\n\n    ssh config delete NAME\n        deletes the named host from the ssh config file\n\nExamples:\n\n     ssh config add blue 192.168.1.245 gregor\n\n         Adds the following to the !/.ssh/config file\n\n         Host blue\n              HostName 192.168.1.245\n              User gergor\n              IdentityFile ~/.ssh/id_rsa.pub\n\n```\n<!--MANUAL-SSH-->\n\n\n\n\n\n\n\n\n\n## 7. FAQ and Hints\n\nHere, we provide some useful FAQs and hints.\n\n### 7.1 Quickstart for a Setup of a cluster from macOS or Linux with no burning on a PI.\n\nThis will setup the same cluster seen in [Quickstart for Bridged WiFi](#quickstart-for-bridged-wifi). Pi imager and a manual manager pi setup \nis not required using this method. It will use the latest Pi OS \nimages, full for master, and lite for workers.\n\n#### 7.1.1 Prerequisites\n\n* We recommend Python 3.8.2 Python or newer.\n* We recommend pip version 21.0.0 or newer\n* You have a private and public ssh key named ~/.ssh/id_rsa and ~/.\n  ssh/id_rsa.pub\n* macOS dependencies [What packages do I need to run the info command on macOS](#what-packages-do-i-need-to-run-the-info-command-on-macos)  \n\n#### 7.1.2 Install Cloudmesh\n\nCreate a Python virtual environment `ENV3` in which to install cloudmesh. \nThis will keep cloudmesh and its dependencies separate from your default \nenvironment. \n\nAlways make sure to `source` this environment when working with cloudmesh.\n\n```\nyou@laptop:~ $ python -m venv ~/ENV3\nyou@laptop:~ $ source ~/ENV3/bin/activate \n(ENV3) you@laptop:~ $ mkdir cm\n(ENV3) you@laptop:~ $ cd cm\n(ENV3) you@laptop:~/cm $ pip install cloudmesh-installer\n(ENV3) you@laptop:~/cm $ cloudmesh-installer get pi \n```\n\n#### 7.1.3 Create a Cluster\n\nHere, we demonstarte how to burn 1 manager and 2 worker SD Cards. The \nmanager is called red, the workers are red001 and red002.\n\n**Step 1.** Identify the SD card device\n\nPlug in a sd card reader with sd card to the laptop and identify the device.\nIn Linux it is /dev/sdX in macOS it is /dev/diskX.\n\n```\n(ENV3) you@laptop:~ $ cms burn info \n```\n\n```\n# ----------------------------------------------------------------------\n# SD Cards Found\n# ----------------------------------------------------------------------\n\n+----------+----------------------------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------+\n| Path     | Info                                         | Formatted   | Size             | Plugged-in   | Readable   | Empty   | Access   | Removable   | Writeable   |\n|----------+----------------------------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------|\n| /dev/diskX | Generic- USB3.0 CRW-SD/MS 1.00 PQ: 0 ANSI: 6 | True        | \n64.1 GB/59.7 GiB | True         | True       | False   | True     | True        | True        |\n+----------+----------------------------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------+\n\n```\n\n**Step 2.** Burn the SD cards \n\nYou will be prompted to input your wifi password for your SSID when runing the \ncommand below.\n\n```\n(ENV3) you@laptop:~ $ cms burn cluster --device=/dev/diskX --hostname=\"red,red00[1-2]\" --ssid=SSID\n```\n\n**Step 3.** Boot the cluster and complete setup of cloudmesh and all ssh \naccess\n\nPlug in the SD Cards in the PI's and start them up. It will take at least 60 \nseconds for them to boot for the first time.\n\nNow login to the manager with \n\n```\n(ENV3) you@laptop:~ $ ssh pi@red.local\n```\n\nOn the manager you call the follwoing commands\n\n```\npi@red:~ $ curl -Ls http://cloudmesh.github.io/get/pi | sh -\npi@red:~ $ sudo reboot\n(ENV3) pi@red:~ $ cms host setup red00[1-2] you@laptop.local \n```\n\nCopy the specified command output to your ~/.ssh/config file on your laptop. \nW weill soon have a command that will add them for you without using an editor.\n\n```\n# ----------------------------------------------------------------------\n# copy to ~/.ssh/config on remote host (i.e laptop)\n# ----------------------------------------------------------------------\n\nHost red\n     HostName red.local\n     User pi\n\nHost red001\n     HostName red.local\n     User pi\n     Port 8001\n\nHost red002\n     HostName red.local\n     User pi\n     Port 8002\n\n```\n\nLet us test by running a command from the laptop to get the Pis' \ntemperatures.\n\n```\n(ENV3) you@laptop:~ $ cms pi temp red,red00[1-2]              \npi temp red,red00[1-2]\n+--------+--------+-------+----------------------------+\n| host   |    cpu |   gpu | date                       |\n|--------+--------+-------+----------------------------|\n| red    | 50.147 |  50.1 | 2021-02-18 21:10:05.942494 |\n| red001 | 51.608 |  51.6 | 2021-02-18 21:10:06.153189 |\n| red002 | 45.764 |  45.7 | 2021-02-18 21:10:06.163067 |\n+--------+--------+-------+----------------------------+\n\n```\n\n<a name=\"clustermac\"></a>\n\n### 7.2 Quickstart for Using a Pi to Burn a Cluster Using Inventory\n\nIn this guide, we will show how you can configure a Cloudmesh Inventory to\neasily burn a cluster of SD cards as well as configure the current Pi as the\nmanager if desired.\n\nWe will follow the same network setup as the Bridged Wifi explained in a\nprevious section (see Figure 1).\n\nThe requirements for this guide are the same as the [Quickstart for Bridged WiFi](#quickstart-for-bridged-wifi).\n\n#### 7.2.1 Initial Manager Setup\n\nEnsure you have burned an SD card from your laptop using [Raspberry Pi\nImager](#https://www.raspberrypi.org/software/). Ensure you burn the card with\n**Raspberry Pi OS 32-bit with desktop and recommended applications**. This will\nserve as our manager.\n\nOnce you have burned your manager card, plug this into a Raspberry Pi. Connect\nthis Pi to a keyboard, mouse, and monitor and boot. Walk through the initial\nsetup prompt to rename your Pi's hostname to `managerpi` as well as connect to\nWifi. You should also change your password in doing so.\n\nIf you are logged in via SSH, you may accomplish the above with `sudo\nraspi-config`. For more information on setups, see [Manager Pi\nSetup](#32-manager-pi)\n\nFrom here, we assume your Pi hostname is `managerpi`.\n\nOnce you have gone through this, you may install cloudmesh and configure your\nsystem with the following:\n\n```\npi@managerpi:~ $ curl -Ls http://cloudmesh.github.io/get/pi | sh -\n```\n\nReboot after this script\n\n```\npi@managerpi:~ $ sudo reboot\n```\n\n#### 7.2.2 Creating our inventory\n\nFor this guide, we will create two workers for `managerpi`. We can do this as\nfollows:\n\n```\n(ENV3) pi@managerpi:~ $ cms inventory create --manager=managerpi --workers=red00[2-3] --ip=10.1.1.1,10.1.1.[2-3]  --inventory=\"cluster.yaml\" --keyfile=~/.ssh/id_rsa.pub latest-lite\n```\n\nWe can then use the following to list the entries of our inventory.\n\n```\n(ENV3) pi@managerpi:~ $ cms inventory list --inventory=cluster.yaml\ninventory list --inventory=cluster.yaml\n+-----------+-----------+------+-------------+---------+-------+---------+----------+----------+-----+---------+--------+---------+-------------+-------------------+----------+\n| host      | name      | type | tag         | cluster | label | service | services | ip       | dns | project | owners | comment | description | keyfile           | status   |\n+-----------+-----------+------+-------------+---------+-------+---------+----------+----------+-----+---------+--------+---------+-------------+-------------------+----------+\n| managerpi | managerpi |      | latest-lite | cluster |       | manager |          | 10.1.1.1 |     |         |        |         |             | ~/.ssh/id_rsa.pub | inactive |\n| red002 | red002 |      | latest-lite | cluster |       | worker  |          | 10.1.1.2 |     |         |        |         |             | ~/.ssh/id_rsa.pub | inactive |\n| red003 | red003 |      | latest-lite | cluster |       | worker  |          | 10.1.1.3 |     |         |        |         |             | ~/.ssh/id_rsa.pub | inactive |\n+-----------+-----------+------+-------------+---------+-------+---------+----------+----------+-----+---------+--------+---------+-------------+-------------------+----------+\n```\n\n#### 7.2.3 Burning SD Cards using Inventory\n\nFirst, verify that you have plugged in your SD card writer with an SD card into\nthe `managerpi`. For this guide, we will simply use one SD card burner to burn\nboth SD cards.\n\nVerify your SD card is detected with the following:\n\n```\n(ENV3) pi@managerpi:~ $ cms burn info\n# ----------------------------------------------------------------------\n# SD Cards Found\n# ----------------------------------------------------------------------\n\n+----------+------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------+\n| Path     | Info                   | Formatted   | Size             | Plugged-in   | Readable   | Empty   | Access   | Removable   | Writeable   |\n|----------+------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------|\n| /dev/sdb | Generic STORAGE DEVICE | True        | 64.1 GB/59.7 GiB | True         | True       | False   | True     | True        | True        |\n+----------+------------------------+-------------+------------------+--------------+------------+---------+----------+-------------+-------------+\n```\n> Some information has been ommitted from cms burn info for simplicity\n\nNote your device. In our case, it is `/dev/sdb`. Of course, on your machine it may vary. \n\nWe can now burn our cards as follows:\n\n```\n(ENV3) pi@managerpi:~ $ cms burn create --inventory=cluster.yaml --name=managerpi,red00[2-3] --device=/dev/sdb\n\nManager hostname is the same as this system's hostname. Is this intended? (Y/n) Y\nDo you wish to configure this system as a WiFi bridge? A restart is required after this command terminates (Y/n) Y\n\n# Cut out output of burn command for simplicity\n\nINFO: Burned card 1\n\nINFO: Please remove the card\n\nSlot /dev/sdb needs to be reused. Do you wish to continue? [y/n] y\nInsert next card and press enter...\n\n# Cut out output of burn command for simplicity\n\nINFO: Burned card 2\n\nINFO: Please remove the card\n\nINFO: You burned 2 SD Cards\nDone :)\n```\n\nNote that in this example, the hostname of the manager passed into `cms burn\ncreate` is the same as the current system's hostname. This is intentnional (as\nindicated by our `Y` choice) and we are also configuring the `managerpi` as a\nbridge (as indicated by our `)\n\nWe must now reboot the manager.\n\n```\n(ENV3) pi@managerpi:~ $ sudo reboot\n```\n\n#### 7.2.4 Booting Up Workers and Verifying Connection\n\nInsert the burned worker cards into the worker Pis and boot.\n\nWith the following command, you can verify connection to your workers:\n\n```\n(ENV3) pi@managerpi:~ $ cms pi temp red002\npi temp red002\n+--------+--------+-------+----------------------------+\n| host   |    cpu |   gpu | date                       |\n|--------+--------+-------+----------------------------|\n| red002 | 37.485 |  37.4 | 2021-02-20 00:47:19.212921 |\n+--------+--------+-------+----------------------------+\n```\n\n### 7.3 Can I use the LEDs on the PI Motherboard?\n\nTypically this LED is used to communicate some system-related\ninformation. However `cms pi` can control it to switch status on\nand off. This is helpful if you like to showcase a particular state\nin the PI. Please look at the manual page. An example is\n\n```bash\n$ cms pi led red off HOSTNAME\n```\n\nthat when executed on the PI (on which you also must have cms\ninstalled you switch the red LED off. For more options see the\nmanual page\n\n\n### 7.4 How can I use pycharm, to edit files or access files in general from my Laptop on the PI?\n\nThis is easily possible with the help of SSHFS. To install it we\nrefer you to See also: <https://github.com/libfuse/sshfs> SSHFS: add\nthe manager to `.ssh/config` on the local machine\n\nLet us assume you like to edit files on a PI that you named `red`\n\nPlease create a `./.ssh/config file that contains the following:\n\n```\n Host red\n      HostName xxx.xxx.xxx.xxx\n      User pi\n      IdentityFile ~/.ssh/id_rsa.pub\n```\n\nNow let us create a directory in which we mount the remote PI directories in our \ncase we mount the directory cm\n\n```\nmkdir redcm\nsshfs red:/home/pi/cm  redcm -o auto_cache\n```\n\nTo unmount the filesystem use on LInux\n\n```\n$ fusermount -u redcm\n```\n\nand on macOS\n\n```\numount redcm\n```\n\nIf you need other directories, pleas apply  our strategy accordingly\n\n### 7.5 How can I enhance the `get` script?\n\nInstead of using the link\n\n* <http://cloudmesh.github.io/get/pi>\n\nplease use\n\n* <https://raw.githubusercontent.com/cloudmesh/get/main/pi>\n\nThis allows us to test also modifications to the get script before we\npush them to the official community repository.\n\nYou can create a pull request at\n\n* <https://github.com/cloudmesh/get/blob/main/pi/index.html>\n\n### 7.6 Can I use a Mesh Network for the setup?\n\nThis section is still under development.\n\nIn case you have a Mesh Network, the setup can typically be even more\nsimple as we can attach the unmanaged router directly to a Mesh\nnode via a network cable. In that case, the node is directly connected\nto the internet and uses the DHCP feature from the Mesh router (see\nFigure 2).\n\n![](https://github.com/cloudmesh/cloudmesh-pi-burn/raw/main/images/network-mesh.png)\n\nFigure 2: Networking with Mesh network\n\nYou will not need the bridge command to setup the network.\n\n### 7.7 Can I use cms burn on Linux?\n\nNot everything is supported.\n\nTo download the latest Raspberry Pi OS Lite image use\n\n```\ncms burn image get latest-lite\n```\n\nTo see what SDCard writers you have attached, you can use the command\n\n```\ncms burn info\n```\n\nIt will issue a probe of USB devices and see if SDCards can be found.\n\nIdentify the `/dev/sdX`, where X is a letter such as b,c,d, ... It\nwill likely never be sda.\n\nTo test it use\n\n```\nsudo apt-get install pv\ncms burn info\ncms burn sdcard --dev=/dev/sdX\ncms burn mount --device=/dev/sdX\ncms burn enable ssh\ncms burn unmount\n```\n\nTake the SDCard into the PI and set it up there as documented.\n\nFor the full features, please use `cms burn create` instead of\n`cms burn sdcard`\n\n\n### 7.8 What packages do I need to run the info command on macOS\n\n```\nbrew install libusb\n```\n\n**Access to ext4**: For the more advanced features of `burn` you will\nneed full write access to the ext4 partition on your SDCard that is\ncreated when you burn it. Unfortunately, the tools that used to be\nfreely available seem no longer to work properly, so you could use\n[extFS for Mac by Paragon Software](https://www.paragon-software.com/us/home/extfs-mac/)\nwhich does cost $40 for a license.\n\nFor this reason, we recommend that you first set up the manager PI and\ndo all burning on the manager PI.\n\n### 7.9 Are there any unit tests?\n\nAs `cms burn` may delete and format files and disks/SD Cards during unit\ntesting users are supposed to first review the tests before running\nthem. Please look at the source and see if you can run a test.\n\nWe have the following tests:\n\n* `pytest -v --capture=no tests/test_01_image.py`\n\n  * This test removes files from ~/.cloudmesh/cmburn/images\n  * See also:\n  [test_01_image.py](https://github.com/cloudmesh/cloudmesh-pi-burn/blob/main/tests/test_01_image.py)\n\n* TODO: add the other tests\n\n### 7.10 Using Pi Imager to setup a Manager Pi with headless access\n\nThis FAQ will provide step-by-step instructions for burning and accessing a \nheadless manager pi. We include instructions for either wifi access to \nthe pi or local ethernet connection.\n\nIf you have restricted WIFI that requires you to register you \ndevices MAC address via a web browser (such as a campus or\nhotel wifi access page), you might not be able to continue\nwith a headless setup. In this case, we recommend that you use your\nLaptop as a \"hotspot\" and connect the PI to it.\n\nThis FAQ references instructions from\n<https://www.raspberrypi.org/documentation/remote-access/ssh/> and\n<https://www.raspberrypi.org/documentation/configuration/wireless/headless.md>\n\n**Step 1.**\n\nDownload and install the Pi Imager software from raspberrypi.org <https://www.\nraspberrypi.org/software/>.\n\n**Step 2.**\n\nLaunch the Pi Imager software, insert a SD card reader and SD card into \nyour laptop.\n\n**Step 3.**\n\nChoose the OS in the Pi Imager interface. We will use **Raspberry Pi OS \n(32-BIT) with the Raspberry Pi desktop.\n\n**Step 4.**\n\nChoose the SD card in the Pi Imager interface. If you do not see an SD card \nand a reader is plugged into your laptop, remove and re-insert the sd card \nreader.\n\n**Step 5.**\n\nPush the 'Write' button and confirm the settings to burn the OS to your SD card.\nYou may need to put in the SUDO password to burn the card. This will take \nsome time. USB 3.0 devices are faster than USB 2.0. Make sure your cable is \nUSB 3.0 as well. \n\n**Step 6.**\n\nMount the SD card. This can be accomplished easily in Linux by unplugging \nand replugging in the device. On Pi and Linux you should see the boot \npartition at **/media/$USER/boot** (where user is you username) and on \nMacOS at **/Volumes/boot**. I will use Linux for the example. Substitute as \nrequired for MacOS.\n\n**Step 7.**\n\nEnable SSH access to the SD card. At the command prompt\n\n```\nyou@yourlaptop:~ $ cd /media/$USER/boot\nyou@yourlaptop:~ $ touch /media/$USER/boot/ssh\n```\n\nThis creates an empty file named ssh in the boot partition. On the first boot, \nthis enables the SSH service, and then an empty ssh file will be \nautomatically deleted.\n\n**Step 8.**\n\nIf you only have wireless access to your Pi. You need to setup the wireless \nconfiguration. \n\nIf you have restricted WIFI that requires you to register you \ndevices MAC address via a web browser (think hotel wifi access page), you \nmight not be able to continue with a headless setup.\n\nOtherwise, you can continue without this step if you have ethernet\naccess between your laptop and pi (either via switch or direct\ncable). After plugging into a shared switch with the Pi, or directly\nto it, you will need to make sure you see a link local address on your\nethernet port on your laptop. It should look something\nlike 169.254.X.X. If you do not see this investigate how to setup a\nlink local ip on your OS.\n\n```\nyou@yourlaptop:/media/$USER/boot $ nano /media/$USER/boot/wpa_supplicant.conf\n\n#Insert this into the file and save (CTRL-X, Y, Enter).\n\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=<Insert 2 letter ISO 3166-1 country code here e.g. US>\n\nnetwork={\n ssid=\"<Name of your wireless LAN>\"\n psk=\"<Password for your wireless LAN>\"\n}\n```\n\n**Step 9.**\n\nUnmount and eject the SD card. \n\n```\nyou@yourlaptop:~ $ sudo umount /media/$USER/boot\nyou@yourlaptop:~ $ sudo umount /media/$USER/rootfs\n```\n\n**Step 10.**\n\nBoot a pi with the SD card. Wait a few minutes and try to access it via SSH. \nUse the Raspi OS default username \"pi\" and \"raspberry\".\n\n```\nyou@yourlaptop:~ $ ssh pi@raspberrypi.local\n```\n\n**Step 11.**\n\nChange the password.\n\n```\npi@raspberrypi:~ $ passwd\n```\n\n**Step 12.**\n\nChange the hostname on the pi.\n\n```\npi@raspberrypi:~ $ sudo raspi-config\n<1. System Options>\n<S4 Hostname>\nenter\nmanagerpi\n<Finish>\nWould you like to reboot?\n<Yes>\n```\n\n**Step 13.**\n\nWait a minute or two and reconnect. Now using the new hostname.\n\n```\nyou@yourlaptop:~ $ ssh pi@managerpi.local\n```\n\n**Step 14.**\n\nYou are all done. You are ready to proceed with [Quickstart for Bridged \nWiFi](#quickstart-for-bridged-wifi). You will now witness the magic of how \ncms burn automates this process for you. \n\n```\npi@managerpi:~ $ \n```\n\n### 7.11 Single Card Burning\n\nStep 0. Ensure the SD card is inserted.\n\nWe can run `cms burn info` again as we did above to verify our \nSD card is connected.\n\nStep 1. Burning the SD Card\n\nChoose a hostname for your card. We will use `red001` with ip\n`10.1.1.2`. The IP address `10.1.1.1` is reserved for the burner pi\n(ie. `managerpi`).\n\n> Note we are using the subnet `10.1.1.0/24` in this guide. We\n> currently recommend you do the same, otherwise the WiFi bridge will\n> not configure correctly. We will change this in the future to\n> support other\n> [Private IP Ranges](https://www.arin.net/reference/research/statistics/address_filters/)\n\n**!! WARNING VERIFY THE DEVICE IS CORRECT. REFER TO CMS BURN !!**\n\n```\n(ENV3) pi@managerpi:~ $ cms burn create --hostname=red001 --ip=10.1.1.2 --device=/dev/sda --tag=latest-lite\n```\n\nWait for the card to burn. Once the process is complete, it is safe \nto remove the SD card.\n\nWe can now proceed to [the bridge setup](#connecting-pis-to-the-internet-via-bridge )\n\n### 7.12 How to update firmware?\n\nTo update the firmware reference the [raspi documentation](#https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md) \n\nOr follow the simple instructions below.\n\n```\npi@managerpi:~ $ sudo apt update\npi@managerpi:~ $ sudo apt full-upgrade\npi@managerpi:~ $ sudo reboot\npi@managerpi:~ $ sudo rpi-eeprom-update -a\npi@managerpi:~ $ sudo reboot\n```\n\n### 7.13 Alternatives\n\nThere are several alternatives to make the setup easier:\n\n* Using Ansible after you have created the SDCards via PIImager. This however \n  requires still the discovery of the hosts on the network and additional steps.\n* PiBakery can burn cards while allowing startup scripts and naming hosts. \n  Although the GUI is nice it is also a limiting factor as each card should have \n  a different hostname\n* Using DHCP to get IP addresses automatically. This is a solution we also used but\n  do not present here\n* PXE or network booting which allows you to boot from the network. For larger PI \n  clusters this requires multiple Servers so that the network is not overwhelmed. \n  Starting the cluster takes much longer.\n\n### 7.14 How do I scann for WIFI networks?\n\n```\nsudo iwlist wlan0 scan\n```\n\n\n### 7.15 What is the status of the implementation?\n\n| Feature         | PI    | Ubuntu | Mac   | Windows |\n| --------------- | ----- | ------ | ----- | ------- |\n| image versions  |    +  |    +   |    +  |         |\n| image ls        |    +  |    +   |    +  |         |\n| image delete    |    +  |    +   |    +  |         |\n| image get       |    +  |    +   |    +  |         |\n| info            |    +  |    +   |    +  |         |\n| network         |    +  |    +   |       |         |\n| backup          |    +  |    +   |    +  |         |\n| copy            |    +  |    +   |       |         |\n| shrink install  |    +  |    +   |       |         |\n| shrink          |    +  |    +   |       |         |\n| sdcard          |    +  |    +   |    +  |         |\n| mount           |    +  |    +   |    +  |         |\n| unmount         |    +  |    +   |    +  |         |\n| enable ssh      |    +  |    +   |    +  |         |\n| wifi            |    +  |    +   |    +  |         |\n| set             |    +  |    +   |    +  |         |\n| create          |  TODO |   (1)  |   (1) |         |\n| cluster         |    NA |    +   |    +  |         |\n| check           |    +  |    +   |    +  |         |\n| format          |    +  |    +   |    +  |         |\n| cluster         |   NA  |    +   |    +  |         | \n| firmware        |    +  |   NA   |   NA  | NA      |\n| inventory       |       |        |       |         |\n\n* (1)  use the `cluster` command instead \n* for macOS, only the image commands have unit tests\n* firmware does not have a unit test\n* empty = not yet implemented or teste, an implementation could be provided by \n  the community\n* - = broken\n* NA = Not applicable for this OS\n\n* TODO1 = todo for boot fs, rootfs not supported\n\n### 7.16 I run into a Kernal Panic on my burned Pi. What do I do?\n\nOccassionally, one may run into an error similar to the following:\n\n```\nKernel panic-not syncing: VFS: unable to mount root fs on unknown-block(179,2)\n```\n\nSee [here](https://raspberrypi.stackexchange.com/questions/40854/kernel-panic-not-syncing-vfs-unable-to-mount-root-fs-on-unknown-block179-6) for more information on this bug.\n\nThis error has been reported in the past. A simple reburn using `cms burn`\ntends to resolve the issue.\n\n### 7.17 How do I enable password login?\n\nThe option `--set_passwd` in `cms burn cluster` enables you to securely enter a\npassword to prevent the password disable.\n\nThe option `[--passwd=PASSWD]` is used with `cms burn create` todo the same\nthing. Note entering the passwd in the command is optional.If empty you will be\nprompted.\n\n### 7.18 How do I use SDCard externers with different voltage?\n\n\nBecauase I am using and sd card extender, I need to set a cmdline argument to\nforce 3.3V SD card operation.\n\nYou can set an arbitray command line argument with\n\n```\ncms burn set --cmdline=CMDLINE\n```\n\nTo force 3.3V operation to enable the use of an SD card extender use\n\n```\ncms burn set--cmdline=sdhci.quirks2=4\n```\n\n### 7.19 How do I get the latest image if a new image was released?\n\nFrom time to time raspberry.org releases new operating systems. To assure you\nget the latest version, you can do the following to download the latest lite\nabd full images :\n\n```bash\n$ cms burn image versions --refresh\n$ cms burn image get latest-lite\n$ cms burn image get latest-full\n```\n\nTo safe space you can also delete the old versions. Look at the storage\nlocation where we place the images with\n\n```bash\n$ ls -1 ~/.cloudmesh/cmburn/images\n```\n\nYOu can delete the ones that do not have the lates date. Such as \n\n```bash\n$ rm  ~/.cloudmesh/cmburn/images/2021-01-11-raspio*\n```\n\nIf you see any images with the date 2021-01-11 and so on.\n\n## 8. How can I contribute Contributing\n\nThe code uses a variety of cloudmesh components. This mainly includes\n\n  * [GitHub cloudmesh-pi-burn](https://github.com/cloudmesh/cloudmesh-pi-burn)\n  * [GitHub cloudmesh-pi-cluster](https://github.com/cloudmesh/cloudmesh-pi-cluster)\n\nAdditional cloudmesh components are used. For example:\n  * [GitHub cloudmesh-pi-common](https://github.com/cloudmesh/cloudmesh-common)\n  * [GitHub cloudmesh-pi-cmd5](https://github.com/cloudmesh/cloudmesh-cmd5)\n  * [GitHub cloudmesh-pi-inventory](https://github.com/cloudmesh/cloudmesh-inventory)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cloudmesh/cloudmesh-pi-burn",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cloudmesh-pi-burn",
    "package_url": "https://pypi.org/project/cloudmesh-pi-burn/",
    "platform": "",
    "project_url": "https://pypi.org/project/cloudmesh-pi-burn/",
    "project_urls": {
      "Homepage": "https://github.com/cloudmesh/cloudmesh-pi-burn"
    },
    "release_url": "https://pypi.org/project/cloudmesh-pi-burn/4.3.29/",
    "requires_dist": [
      "cloudmesh-cmd5",
      "cloudmesh-sys",
      "cloudmesh-inventory",
      "cloudmesh-configuration",
      "cloudmesh-common",
      "humanize",
      "wget",
      "python-hostlist",
      "docopt",
      "prompter",
      "pyyaml",
      "oyaml",
      "requests",
      "pyusb",
      "tqdm",
      "PySimpleGUI",
      "passlib"
    ],
    "requires_python": "",
    "summary": "A command `cms burn` to burn many Raspberry PI SD Cards for buildiing PI Clusters with sshkeys and networking",
    "version": "4.3.29",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10331259,
  "releases": {
    "4.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65625c564096c9f2c879e804d7d9f60fb8273f795df530fe00121acb670d44ad",
          "md5": "54c1f84c78dea9cf0ecf6f34c6027204",
          "sha256": "40c6d204e6da3c1f6b073a685c474797367e0ad918efeb98bef1bcce6cf3b6ee"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54c1f84c78dea9cf0ecf6f34c6027204",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38185,
        "upload_time": "2021-01-22T15:50:39",
        "upload_time_iso_8601": "2021-01-22T15:50:39.831102Z",
        "url": "https://files.pythonhosted.org/packages/65/62/5c564096c9f2c879e804d7d9f60fb8273f795df530fe00121acb670d44ad/cloudmesh_pi_burn-4.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc5a48e57375f3467e868cdb8393444ad1a1fa98a730366a5cc6d1231e137df8",
          "md5": "458d5b3ef4ee97b163b49de7dfaa249f",
          "sha256": "49c2b6cba4927c71073bac5fabb98ea79509fa7eb5f0f2efdf8c8b7db14cdb50"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "458d5b3ef4ee97b163b49de7dfaa249f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59353,
        "upload_time": "2021-01-22T15:50:41",
        "upload_time_iso_8601": "2021-01-22T15:50:41.638624Z",
        "url": "https://files.pythonhosted.org/packages/fc/5a/48e57375f3467e868cdb8393444ad1a1fa98a730366a5cc6d1231e137df8/cloudmesh-pi-burn-4.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ede3ad5cf865ad440bd7a74f665fdb13cf37b5b6956e48e44afe02d6bd999ad",
          "md5": "0c8d5a7f9aa2f216d8a5cd9b43314618",
          "sha256": "a9151b34f3404b18aab7b1af6052dc4be4b6940c4461e3000af0892357c5e82a"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c8d5a7f9aa2f216d8a5cd9b43314618",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 53156,
        "upload_time": "2021-02-18T11:22:39",
        "upload_time_iso_8601": "2021-02-18T11:22:39.818039Z",
        "url": "https://files.pythonhosted.org/packages/2e/de/3ad5cf865ad440bd7a74f665fdb13cf37b5b6956e48e44afe02d6bd999ad/cloudmesh_pi_burn-4.3.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b6e59a39e4ab9f7a14bfc32afc6a6d08ed9e7a1c7fa467b13a5391a76739769",
          "md5": "6eac56c10a357556060cf8edf9fe99aa",
          "sha256": "c830bf4ecb9f1cb6b8bd5dba8cc693226ca2efca08d7a573d35df835bfbd656e"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "6eac56c10a357556060cf8edf9fe99aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83166,
        "upload_time": "2021-02-18T11:22:41",
        "upload_time_iso_8601": "2021-02-18T11:22:41.414782Z",
        "url": "https://files.pythonhosted.org/packages/6b/6e/59a39e4ab9f7a14bfc32afc6a6d08ed9e7a1c7fa467b13a5391a76739769/cloudmesh-pi-burn-4.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13d3b7fd32bf4c6d580e4f70dad3b6f7d1181f5abc6ee5a75a3528ffaf2886ce",
          "md5": "431ff1a055531198547c3f974b7c9cc1",
          "sha256": "4984a065faa79d0c67365c19e50e84db2819d517bed1a9cac7bc8e49aaef1a3a"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "431ff1a055531198547c3f974b7c9cc1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57198,
        "upload_time": "2021-02-23T01:15:10",
        "upload_time_iso_8601": "2021-02-23T01:15:10.754957Z",
        "url": "https://files.pythonhosted.org/packages/13/d3/b7fd32bf4c6d580e4f70dad3b6f7d1181f5abc6ee5a75a3528ffaf2886ce/cloudmesh_pi_burn-4.3.11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d8cf85c7cebacd5cfe1081f8727efdec860682d27452704972b43b161cb38db",
          "md5": "ce8238846ffe5c5591c763257b97dcd9",
          "sha256": "984998fed711524b4014959415e01957c28d07116f02f51ca41452675b34fee8"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "ce8238846ffe5c5591c763257b97dcd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 89724,
        "upload_time": "2021-02-23T01:15:13",
        "upload_time_iso_8601": "2021-02-23T01:15:13.274951Z",
        "url": "https://files.pythonhosted.org/packages/6d/8c/f85c7cebacd5cfe1081f8727efdec860682d27452704972b43b161cb38db/cloudmesh-pi-burn-4.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f9b12ebca23bb08f3c0270d78f197c9888dfcee25cdae33004b6876ffc29e3c",
          "md5": "15f988eec54d1fc986bd22db099a99ef",
          "sha256": "599632f07b30a0d161ad2d28aed19bb24ed0a14799f7aa50f455182505cfbbc7"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15f988eec54d1fc986bd22db099a99ef",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58519,
        "upload_time": "2021-02-23T20:09:05",
        "upload_time_iso_8601": "2021-02-23T20:09:05.522184Z",
        "url": "https://files.pythonhosted.org/packages/3f/9b/12ebca23bb08f3c0270d78f197c9888dfcee25cdae33004b6876ffc29e3c/cloudmesh_pi_burn-4.3.12-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d03efface700a3bdd93e47bf8ceb2a78bc4255ff278a6df5d75f38d30dbd38b7",
          "md5": "d41bd09ee8fce605ecc9cd96065cd4f7",
          "sha256": "2ed2be1af8fa66110a7ff2a713ded7de78e6d1564a5bcba08932743de7b90d11"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "d41bd09ee8fce605ecc9cd96065cd4f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93531,
        "upload_time": "2021-02-23T20:09:06",
        "upload_time_iso_8601": "2021-02-23T20:09:06.836192Z",
        "url": "https://files.pythonhosted.org/packages/d0/3e/fface700a3bdd93e47bf8ceb2a78bc4255ff278a6df5d75f38d30dbd38b7/cloudmesh-pi-burn-4.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01506bfb036df5e99fca5658ea7e2ea5b47aed67e1b2598b984169a962e7e044",
          "md5": "ef1be60d00f8005507746828896b0801",
          "sha256": "7d40e34a9abf1c07093cc9fe45a6515600e89328f13e92d9b4a81834cb3712c3"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef1be60d00f8005507746828896b0801",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58515,
        "upload_time": "2021-02-23T20:22:40",
        "upload_time_iso_8601": "2021-02-23T20:22:40.835889Z",
        "url": "https://files.pythonhosted.org/packages/01/50/6bfb036df5e99fca5658ea7e2ea5b47aed67e1b2598b984169a962e7e044/cloudmesh_pi_burn-4.3.13-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96dc225a4c82596609748154d28e157c865e42158670399e715e486cf75e948b",
          "md5": "cd9a848f91beab5b608f5300a33b9e0b",
          "sha256": "3749f9721fc255516cca8a3bf30a429a7e4f8ad94a841d782ba4a237d5defe8a"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.13.tar.gz",
        "has_sig": false,
        "md5_digest": "cd9a848f91beab5b608f5300a33b9e0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93522,
        "upload_time": "2021-02-23T20:22:42",
        "upload_time_iso_8601": "2021-02-23T20:22:42.348239Z",
        "url": "https://files.pythonhosted.org/packages/96/dc/225a4c82596609748154d28e157c865e42158670399e715e486cf75e948b/cloudmesh-pi-burn-4.3.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fae9a5bcc284934077b2a17350e0da292aefc8bf67f068831975b2fc14b3bd3c",
          "md5": "1e7ec6efb99d897b2ac39d2eddcb84fa",
          "sha256": "efcd20629e3bab07554704da5ad182b584f54716cb9dd9f6a06450de464812ff"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e7ec6efb99d897b2ac39d2eddcb84fa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58509,
        "upload_time": "2021-02-23T20:23:52",
        "upload_time_iso_8601": "2021-02-23T20:23:52.155089Z",
        "url": "https://files.pythonhosted.org/packages/fa/e9/a5bcc284934077b2a17350e0da292aefc8bf67f068831975b2fc14b3bd3c/cloudmesh_pi_burn-4.3.14-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ae66040c14b8c1c31c6476d1121572e10f782c4a20cf382543fc5220c3a723",
          "md5": "1a269cb01da61881b9258fcebd07e909",
          "sha256": "2399d36771ef2b681f6640daf4cf392b9354487ba968ac20551fa3c0b9960c0e"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.14.tar.gz",
        "has_sig": false,
        "md5_digest": "1a269cb01da61881b9258fcebd07e909",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93516,
        "upload_time": "2021-02-23T20:23:54",
        "upload_time_iso_8601": "2021-02-23T20:23:54.092175Z",
        "url": "https://files.pythonhosted.org/packages/66/ae/66040c14b8c1c31c6476d1121572e10f782c4a20cf382543fc5220c3a723/cloudmesh-pi-burn-4.3.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b5784dbe552675fa0b0d011cc6b0871c245270c7a25ec4c9fd982c0f71b1cf",
          "md5": "7acf366ae900b6834658a8bf6582c3d6",
          "sha256": "c15f0163ec176de57138110a91b8f236fcab055cb59f70cc65e4fa22654363b8"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.15-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7acf366ae900b6834658a8bf6582c3d6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 68480,
        "upload_time": "2021-03-10T13:50:33",
        "upload_time_iso_8601": "2021-03-10T13:50:33.984575Z",
        "url": "https://files.pythonhosted.org/packages/b7/b5/784dbe552675fa0b0d011cc6b0871c245270c7a25ec4c9fd982c0f71b1cf/cloudmesh_pi_burn-4.3.15-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aece69618315498ee029d038c05170f8f149df4bf09f285df3cbefed35d9d5dc",
          "md5": "68cfbb62a5dc69d0978462a0c379e61d",
          "sha256": "fb250e4e70eafee2093d3d7cfa831d39fad12978a2540e60dd784f9a16055cf0"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.15.tar.gz",
        "has_sig": false,
        "md5_digest": "68cfbb62a5dc69d0978462a0c379e61d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 101465,
        "upload_time": "2021-03-10T13:50:35",
        "upload_time_iso_8601": "2021-03-10T13:50:35.754792Z",
        "url": "https://files.pythonhosted.org/packages/ae/ce/69618315498ee029d038c05170f8f149df4bf09f285df3cbefed35d9d5dc/cloudmesh-pi-burn-4.3.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf6eb42f731e8b4f46e818f18145ece4521514e1a710b6e688ae9a3bfb75629a",
          "md5": "c7dda72eabc33fe4535ae0dc983d9334",
          "sha256": "2bf528cc978e0c814c9875bd5601beeaab3921bdd79e10606ed8430fa0f96ac3"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.17-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7dda72eabc33fe4535ae0dc983d9334",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 80415,
        "upload_time": "2021-03-26T20:20:31",
        "upload_time_iso_8601": "2021-03-26T20:20:31.897641Z",
        "url": "https://files.pythonhosted.org/packages/cf/6e/b42f731e8b4f46e818f18145ece4521514e1a710b6e688ae9a3bfb75629a/cloudmesh_pi_burn-4.3.17-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "734541fdd659cd87b06b97c725ed060648925c4e3c8b6bf95c9d7cacd36dfffd",
          "md5": "1ba0c0952b9490e8909f1c5458f19096",
          "sha256": "64f0c6a97b0c20cf4c937bdb8e621cb07cfee0b5cab4346e58ad2fab986125a8"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.17.tar.gz",
        "has_sig": false,
        "md5_digest": "1ba0c0952b9490e8909f1c5458f19096",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 113881,
        "upload_time": "2021-03-26T20:20:33",
        "upload_time_iso_8601": "2021-03-26T20:20:33.785156Z",
        "url": "https://files.pythonhosted.org/packages/73/45/41fdd659cd87b06b97c725ed060648925c4e3c8b6bf95c9d7cacd36dfffd/cloudmesh-pi-burn-4.3.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a57430a19807db63bfd9bec63a461d29dde8fa0aa3000cde736bc0acebc13900",
          "md5": "fc7adbd0359f673aac776cf333b15002",
          "sha256": "4bd159e276e572534d055f0a778162f27f212905aa7fc006ca08e23e5221ea0c"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.18-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc7adbd0359f673aac776cf333b15002",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91036,
        "upload_time": "2021-03-26T20:27:01",
        "upload_time_iso_8601": "2021-03-26T20:27:01.956163Z",
        "url": "https://files.pythonhosted.org/packages/a5/74/30a19807db63bfd9bec63a461d29dde8fa0aa3000cde736bc0acebc13900/cloudmesh_pi_burn-4.3.18-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a28c4e1b88b59bf2a697ac5644495f3205cfc888077ab6f104c04f98b3dad66",
          "md5": "20f8eb071f126087e8f68c091839f4a0",
          "sha256": "b167f0b4c907aad65e648d63dcaef346d2f79e8dfc70df2a2be577bb7feeff39"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.18.tar.gz",
        "has_sig": false,
        "md5_digest": "20f8eb071f126087e8f68c091839f4a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121297,
        "upload_time": "2021-03-26T20:27:04",
        "upload_time_iso_8601": "2021-03-26T20:27:04.178785Z",
        "url": "https://files.pythonhosted.org/packages/7a/28/c4e1b88b59bf2a697ac5644495f3205cfc888077ab6f104c04f98b3dad66/cloudmesh-pi-burn-4.3.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25b928a005ac385be7bf76563242a36f7d06903b863cddc0fc629b7243246935",
          "md5": "ad459c066ef7715815f899f7309ce857",
          "sha256": "cc00bacd15598707f7f0038d31257345f8e267d01f218ccfd3b800cdef38e34d"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.19-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad459c066ef7715815f899f7309ce857",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91041,
        "upload_time": "2021-03-26T23:47:51",
        "upload_time_iso_8601": "2021-03-26T23:47:51.220893Z",
        "url": "https://files.pythonhosted.org/packages/25/b9/28a005ac385be7bf76563242a36f7d06903b863cddc0fc629b7243246935/cloudmesh_pi_burn-4.3.19-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25c556b6b3a1ed683db455419390c6e143969c1e74ac974bb22359a949e76242",
          "md5": "3e34e1119fd8fc9407aff9b9e186619f",
          "sha256": "09655c24660a167e5646cc007bc4dedd7fe6320749b97842b55790f12311d9bd"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.19.tar.gz",
        "has_sig": false,
        "md5_digest": "3e34e1119fd8fc9407aff9b9e186619f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121313,
        "upload_time": "2021-03-26T23:47:52",
        "upload_time_iso_8601": "2021-03-26T23:47:52.772415Z",
        "url": "https://files.pythonhosted.org/packages/25/c5/56b6b3a1ed683db455419390c6e143969c1e74ac974bb22359a949e76242/cloudmesh-pi-burn-4.3.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c950f1e86716d474350138c33a678aa7cc9a1a714b1a1c2d7cb86bfc2195bde",
          "md5": "540fa4932ee95ab47f6e3db3e54322f9",
          "sha256": "7aecd5233af25b483639de07e303bd1ec30d1c8a3c1f7c56f5117886bf303194"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "540fa4932ee95ab47f6e3db3e54322f9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38166,
        "upload_time": "2021-01-22T15:53:02",
        "upload_time_iso_8601": "2021-01-22T15:53:02.574102Z",
        "url": "https://files.pythonhosted.org/packages/9c/95/0f1e86716d474350138c33a678aa7cc9a1a714b1a1c2d7cb86bfc2195bde/cloudmesh_pi_burn-4.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "117474dd9cbe19bbb41b690a50d2b53cff2b274e4f5c1eb4261a844002351219",
          "md5": "6a590d69dc91c226eed1834e4c1ece46",
          "sha256": "fe802d3560ff5eac70f598f2b5f2c2b4b4c73800484cc89e6da408c3c4688ad5"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a590d69dc91c226eed1834e4c1ece46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59335,
        "upload_time": "2021-01-22T15:53:04",
        "upload_time_iso_8601": "2021-01-22T15:53:04.386786Z",
        "url": "https://files.pythonhosted.org/packages/11/74/74dd9cbe19bbb41b690a50d2b53cff2b274e4f5c1eb4261a844002351219/cloudmesh-pi-burn-4.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76b1c9cab5aa5fc2d06e6458456f86c09c6607c223ff5c8cee53c716507c46fe",
          "md5": "a5ec1410722b48f30e427271a46e8cf2",
          "sha256": "351bcab2a9c1a75a6cfda09386ac8e3039ccaccb57f05dc0a41ec0893b3d31fa"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.20-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5ec1410722b48f30e427271a46e8cf2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91853,
        "upload_time": "2021-03-28T22:14:41",
        "upload_time_iso_8601": "2021-03-28T22:14:41.846654Z",
        "url": "https://files.pythonhosted.org/packages/76/b1/c9cab5aa5fc2d06e6458456f86c09c6607c223ff5c8cee53c716507c46fe/cloudmesh_pi_burn-4.3.20-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fd5aa7ab5cc582710f50641a74d6d5c0083905be1c766659601b6ab363e1e91",
          "md5": "20e26df205c275f473f104611c129f77",
          "sha256": "746b9861249757217b72cc3b6e6a0ba85e3c849d9535b6bbd04cbc9a331a7e6e"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.20.tar.gz",
        "has_sig": false,
        "md5_digest": "20e26df205c275f473f104611c129f77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122020,
        "upload_time": "2021-03-28T22:14:43",
        "upload_time_iso_8601": "2021-03-28T22:14:43.554019Z",
        "url": "https://files.pythonhosted.org/packages/2f/d5/aa7ab5cc582710f50641a74d6d5c0083905be1c766659601b6ab363e1e91/cloudmesh-pi-burn-4.3.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e75ace12cc1f5c53699aa38a0b22a0341816a8d09352cad32c93b9f62014996",
          "md5": "f9d2c3ac2ffe6cd92ecbf39ea44ce284",
          "sha256": "5a015a570c36b90b83254583a47926c7bd2f0280ae639c1eb4d8756971ff19d4"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.21-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9d2c3ac2ffe6cd92ecbf39ea44ce284",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91828,
        "upload_time": "2021-03-28T22:51:23",
        "upload_time_iso_8601": "2021-03-28T22:51:23.305558Z",
        "url": "https://files.pythonhosted.org/packages/5e/75/ace12cc1f5c53699aa38a0b22a0341816a8d09352cad32c93b9f62014996/cloudmesh_pi_burn-4.3.21-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a59b4730b1e3e9471d4f03b5401761031169f22ea61d66f09cdc0901f3eedbe",
          "md5": "a3c6fa2529e9e03df4d57c90c0b67877",
          "sha256": "abb46d1f529cfd841db1edc00c25d44ba7898e41f5d3316c04951ab9ad297991"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.21.tar.gz",
        "has_sig": false,
        "md5_digest": "a3c6fa2529e9e03df4d57c90c0b67877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122036,
        "upload_time": "2021-03-28T22:51:24",
        "upload_time_iso_8601": "2021-03-28T22:51:24.772343Z",
        "url": "https://files.pythonhosted.org/packages/6a/59/b4730b1e3e9471d4f03b5401761031169f22ea61d66f09cdc0901f3eedbe/cloudmesh-pi-burn-4.3.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "292a17fe9bfd94e123be54bc857ffe6fd9e8423c9d9ae5c059f967bc84412938",
          "md5": "24123c4bd525ad1abe1d8983c7237515",
          "sha256": "0deb04cf73d2f8760c311ee970c4364c6fa1314e1dfabd2b3fa96d6b75b9ebdc"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.22-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24123c4bd525ad1abe1d8983c7237515",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91621,
        "upload_time": "2021-03-29T01:32:21",
        "upload_time_iso_8601": "2021-03-29T01:32:21.311438Z",
        "url": "https://files.pythonhosted.org/packages/29/2a/17fe9bfd94e123be54bc857ffe6fd9e8423c9d9ae5c059f967bc84412938/cloudmesh_pi_burn-4.3.22-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65f5cf1392c5dbd2b2defb8baed37b8b954cfadd08ee400642c6a1ee8a5a7875",
          "md5": "20e4f19b5ec27a0bc723ddd61dd4052e",
          "sha256": "99a9702ccaa6c1c879a39d082f60f70ddfbf075e5a78073be80dac3e9904107e"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.22.tar.gz",
        "has_sig": false,
        "md5_digest": "20e4f19b5ec27a0bc723ddd61dd4052e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121792,
        "upload_time": "2021-03-29T01:32:23",
        "upload_time_iso_8601": "2021-03-29T01:32:23.511683Z",
        "url": "https://files.pythonhosted.org/packages/65/f5/cf1392c5dbd2b2defb8baed37b8b954cfadd08ee400642c6a1ee8a5a7875/cloudmesh-pi-burn-4.3.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e779df8662ffbd63d35eb9093c5087ffffa67fd004257c499980608d17b3ea2e",
          "md5": "6b90071ed8c31efe476c582d347dbd5c",
          "sha256": "8d80bcf69400a18c3f0ec5abc21f29e35ffd6e5d8273e5711d7954a1d278c3ec"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.23-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b90071ed8c31efe476c582d347dbd5c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92002,
        "upload_time": "2021-04-01T22:42:00",
        "upload_time_iso_8601": "2021-04-01T22:42:00.459388Z",
        "url": "https://files.pythonhosted.org/packages/e7/79/df8662ffbd63d35eb9093c5087ffffa67fd004257c499980608d17b3ea2e/cloudmesh_pi_burn-4.3.23-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed8c1da87f23db501e8b35ba9e1f2af367a798465d9e4a1bb325f8fb33715fcf",
          "md5": "8687425a055122d286e7c7f36b23a497",
          "sha256": "e13b9b712f8223b3d9e0de1a95d77175ecb44b46c662f555c118c0698636f257"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.23.tar.gz",
        "has_sig": false,
        "md5_digest": "8687425a055122d286e7c7f36b23a497",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122124,
        "upload_time": "2021-04-01T22:42:02",
        "upload_time_iso_8601": "2021-04-01T22:42:02.290782Z",
        "url": "https://files.pythonhosted.org/packages/ed/8c/1da87f23db501e8b35ba9e1f2af367a798465d9e4a1bb325f8fb33715fcf/cloudmesh-pi-burn-4.3.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b6671a0fec39e8f84ccfed717c06a55919a0eaad49d76e6f8a0d0a587aac623",
          "md5": "77bce3a938be4209eeee30c3521ed9ef",
          "sha256": "4be385a4e92a1e07774b155efd9b583276cf9f24c167831f328ec47c613a171a"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.24-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77bce3a938be4209eeee30c3521ed9ef",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92659,
        "upload_time": "2021-04-15T23:17:02",
        "upload_time_iso_8601": "2021-04-15T23:17:02.612281Z",
        "url": "https://files.pythonhosted.org/packages/7b/66/71a0fec39e8f84ccfed717c06a55919a0eaad49d76e6f8a0d0a587aac623/cloudmesh_pi_burn-4.3.24-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41079cb2a8a0ac50a154caa89eab54e973390c10d422f39c2c4abfaa4056a495",
          "md5": "4113ea0f90a229e9b067335ae233d91d",
          "sha256": "0e80f580bd8e5ec4a9a10081d3a30ea3b25c878b33d358927a1669b8ef80022c"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.24.tar.gz",
        "has_sig": false,
        "md5_digest": "4113ea0f90a229e9b067335ae233d91d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123909,
        "upload_time": "2021-04-15T23:17:04",
        "upload_time_iso_8601": "2021-04-15T23:17:04.579083Z",
        "url": "https://files.pythonhosted.org/packages/41/07/9cb2a8a0ac50a154caa89eab54e973390c10d422f39c2c4abfaa4056a495/cloudmesh-pi-burn-4.3.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e235a5a45d681d1efb02837ec3a7644d077de825c55e91ba593b1bf3be6ce31",
          "md5": "88b56eb5734b75f987d486e6f5e4da07",
          "sha256": "5ab6169515c92466258d4a5e84ba03ac191c948848cc183e661dea8ab49ff573"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.26-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88b56eb5734b75f987d486e6f5e4da07",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92657,
        "upload_time": "2021-04-16T14:39:27",
        "upload_time_iso_8601": "2021-04-16T14:39:27.555051Z",
        "url": "https://files.pythonhosted.org/packages/1e/23/5a5a45d681d1efb02837ec3a7644d077de825c55e91ba593b1bf3be6ce31/cloudmesh_pi_burn-4.3.26-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af57bd8a65382a82f98ce16ad68603f37e23eb8ead9b45a777e7f0bcbeb944d8",
          "md5": "59dadbcaf917b10fd89f0c147f4d76b8",
          "sha256": "4a80a92cc9b7349a75a4927bcaaf98b549d5563b627a01a84ce66e7774973c93"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.26.tar.gz",
        "has_sig": false,
        "md5_digest": "59dadbcaf917b10fd89f0c147f4d76b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123903,
        "upload_time": "2021-04-16T14:39:29",
        "upload_time_iso_8601": "2021-04-16T14:39:29.094586Z",
        "url": "https://files.pythonhosted.org/packages/af/57/bd8a65382a82f98ce16ad68603f37e23eb8ead9b45a777e7f0bcbeb944d8/cloudmesh-pi-burn-4.3.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e8f2fb73827c687af579bb7cbb91c021743f6be174a204136efd6ec84d6f62",
          "md5": "26249254fccb4155c257af9a624400f0",
          "sha256": "5625d24f5e394b12c14e9cf0562819368f06ac6c7fc9be296b56c72acfa4d091"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.27-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26249254fccb4155c257af9a624400f0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92676,
        "upload_time": "2021-04-16T17:46:43",
        "upload_time_iso_8601": "2021-04-16T17:46:43.208898Z",
        "url": "https://files.pythonhosted.org/packages/75/e8/f2fb73827c687af579bb7cbb91c021743f6be174a204136efd6ec84d6f62/cloudmesh_pi_burn-4.3.27-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "492274593e69a9c2e1c65e8bcca079dffd67c761ab4e21f58f73e2e6d0d906f1",
          "md5": "153b6ae6bc277653bf4fbc74ed23fcde",
          "sha256": "226baa2f7b5967d9e7ae4c022597aef5249d702045a87d13b26d6209a514143a"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.27.tar.gz",
        "has_sig": false,
        "md5_digest": "153b6ae6bc277653bf4fbc74ed23fcde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123917,
        "upload_time": "2021-04-16T17:46:44",
        "upload_time_iso_8601": "2021-04-16T17:46:44.604104Z",
        "url": "https://files.pythonhosted.org/packages/49/22/74593e69a9c2e1c65e8bcca079dffd67c761ab4e21f58f73e2e6d0d906f1/cloudmesh-pi-burn-4.3.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5b9a9641a7be5830ef06c379afee0bc2bbaf16e1f0336a34db32667e1b6e367",
          "md5": "82698bed65a425cee07ccf0a55a7017d",
          "sha256": "506d13c71d1655f4c8a7cc61f7913ecc784ed45ba5d8e6905bd6dad264eb97dc"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.28-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82698bed65a425cee07ccf0a55a7017d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92674,
        "upload_time": "2021-05-06T22:04:55",
        "upload_time_iso_8601": "2021-05-06T22:04:55.994323Z",
        "url": "https://files.pythonhosted.org/packages/b5/b9/a9641a7be5830ef06c379afee0bc2bbaf16e1f0336a34db32667e1b6e367/cloudmesh_pi_burn-4.3.28-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeb068b08d69fa95d4bad65fd4c3ba8ec0a89109d735b6469eb16aa7b79c8f87",
          "md5": "871fafb82feb895a11f8986011ba0756",
          "sha256": "65687df1194f3b260ab5f8d02eb928d27787a2dd3ff39b6afbc179624af68c3b"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.28.tar.gz",
        "has_sig": false,
        "md5_digest": "871fafb82feb895a11f8986011ba0756",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123901,
        "upload_time": "2021-05-06T22:04:59",
        "upload_time_iso_8601": "2021-05-06T22:04:59.766778Z",
        "url": "https://files.pythonhosted.org/packages/ae/b0/68b08d69fa95d4bad65fd4c3ba8ec0a89109d735b6469eb16aa7b79c8f87/cloudmesh-pi-burn-4.3.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd871c2a1f6c785134335f1dd202ac632553def4b44e51fa5f20876926503a70",
          "md5": "3042f02fb91924b860c620ba2e3acad4",
          "sha256": "ecb32ee5b5d4c82a829e305f5a65f54a8764402663b99d0bdd1eb74a977f9758"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.29-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3042f02fb91924b860c620ba2e3acad4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 92674,
        "upload_time": "2021-05-12T07:51:35",
        "upload_time_iso_8601": "2021-05-12T07:51:35.977195Z",
        "url": "https://files.pythonhosted.org/packages/cd/87/1c2a1f6c785134335f1dd202ac632553def4b44e51fa5f20876926503a70/cloudmesh_pi_burn-4.3.29-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19a2bddb420e957391d125641844bf1d02bc4515cd5add08f7b315793906952a",
          "md5": "7b1b5ecba8f6d6b0686541d7ee4d6310",
          "sha256": "0bad199afe95d20d05e0558a3b41c18dc4d255146a96cb999740ea325711ae54"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.29.tar.gz",
        "has_sig": false,
        "md5_digest": "7b1b5ecba8f6d6b0686541d7ee4d6310",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123921,
        "upload_time": "2021-05-12T07:51:37",
        "upload_time_iso_8601": "2021-05-12T07:51:37.847592Z",
        "url": "https://files.pythonhosted.org/packages/19/a2/bddb420e957391d125641844bf1d02bc4515cd5add08f7b315793906952a/cloudmesh-pi-burn-4.3.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c748011c88ddfa87872fc7452be84d383cbe8f832004885d5a6edd85b0581d",
          "md5": "8a7c9dc22311bbb2e91553aacf23b654",
          "sha256": "8e79cd1ebd53e79615cda739d6a984e508011f066ad5561e9988cabf6d7fe126"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a7c9dc22311bbb2e91553aacf23b654",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33054,
        "upload_time": "2021-01-22T16:03:51",
        "upload_time_iso_8601": "2021-01-22T16:03:51.258300Z",
        "url": "https://files.pythonhosted.org/packages/49/c7/48011c88ddfa87872fc7452be84d383cbe8f832004885d5a6edd85b0581d/cloudmesh_pi_burn-4.3.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41f9b653385dc60a0f904e64519d8f9aedcbfcea6dbe977a35929b16b08fbe1d",
          "md5": "7c4bdac370c049a2c4a5e8e3e4a67cc5",
          "sha256": "e1a8130145a876298a92fcf96aa242e3355b2fe716a75e110488b916b463f842"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7c4bdac370c049a2c4a5e8e3e4a67cc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38495,
        "upload_time": "2021-01-22T16:03:52",
        "upload_time_iso_8601": "2021-01-22T16:03:52.512217Z",
        "url": "https://files.pythonhosted.org/packages/41/f9/b653385dc60a0f904e64519d8f9aedcbfcea6dbe977a35929b16b08fbe1d/cloudmesh-pi-burn-4.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60adcc36198ab0248d78b7454d43499df3ddfc042a3b42315d4cf112c859569",
          "md5": "bd1a7d68b141ab504d9249fa83c84e9e",
          "sha256": "52d5f38d3e8c3551e110c2d12971920eed9bf24fed37eaa537ba53c10b11f7bf"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd1a7d68b141ab504d9249fa83c84e9e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 34202,
        "upload_time": "2021-01-22T16:36:04",
        "upload_time_iso_8601": "2021-01-22T16:36:04.551181Z",
        "url": "https://files.pythonhosted.org/packages/b6/0a/dcc36198ab0248d78b7454d43499df3ddfc042a3b42315d4cf112c859569/cloudmesh_pi_burn-4.3.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8898e84f2af57f142ebb14b943008e29f1fe91adff9021846462eeb53e1ecf0e",
          "md5": "db2e3b378a762de9891b5d1d5a8e6a11",
          "sha256": "95a80f9afcd11ceda35ff43b4007c8496a0c3c00e978b5ab5ceeebe77790a146"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "db2e3b378a762de9891b5d1d5a8e6a11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43393,
        "upload_time": "2021-01-22T16:36:06",
        "upload_time_iso_8601": "2021-01-22T16:36:06.157858Z",
        "url": "https://files.pythonhosted.org/packages/88/98/e84f2af57f142ebb14b943008e29f1fe91adff9021846462eeb53e1ecf0e/cloudmesh-pi-burn-4.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e800b8e18e497737b1b915fd646da0880a5755dfd06be93f53a568418020f5bc",
          "md5": "9454eedc9a52b5db71087cacfad90ed9",
          "sha256": "0c05143d1b5ffbeca747f1a5da27d818930bd59349362f6fc9bcef3abff0b926"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9454eedc9a52b5db71087cacfad90ed9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 34235,
        "upload_time": "2021-01-22T16:44:28",
        "upload_time_iso_8601": "2021-01-22T16:44:28.718022Z",
        "url": "https://files.pythonhosted.org/packages/e8/00/b8e18e497737b1b915fd646da0880a5755dfd06be93f53a568418020f5bc/cloudmesh_pi_burn-4.3.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ceb291b10865550bbd83cefe12a5a7118aba6c35111b8a169fd0eabebc1fc9",
          "md5": "f7bedbdcc258efaf3198bf2b521d8394",
          "sha256": "33803da2165714147e09383753d0036fa980f5dbf4fd8c430a206aff0ec00024"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f7bedbdcc258efaf3198bf2b521d8394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44095,
        "upload_time": "2021-01-22T16:44:30",
        "upload_time_iso_8601": "2021-01-22T16:44:30.193019Z",
        "url": "https://files.pythonhosted.org/packages/a2/ce/b291b10865550bbd83cefe12a5a7118aba6c35111b8a169fd0eabebc1fc9/cloudmesh-pi-burn-4.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c7940a0a32e8f88cbd3529816a6afc88f2ec992dc0a506020485819b5bbb78",
          "md5": "6406f30a31c534a59aa656f5aa8f48c7",
          "sha256": "21a29650bb97c97687df2028c1f12c22c81b615901d75d7ed04213193058126b"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6406f30a31c534a59aa656f5aa8f48c7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 34244,
        "upload_time": "2021-01-22T16:49:17",
        "upload_time_iso_8601": "2021-01-22T16:49:17.389828Z",
        "url": "https://files.pythonhosted.org/packages/92/c7/940a0a32e8f88cbd3529816a6afc88f2ec992dc0a506020485819b5bbb78/cloudmesh_pi_burn-4.3.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d34edf20ae0ddd5d91f9b2c0ed46ad856cf8eedaf4f52a29a49ffcb0fbbc876",
          "md5": "e3d02f6783ac2394750a3944134b44fb",
          "sha256": "5508f0d9fa42fddef4f1b7b130b15e1bbf70247938cb4006c58d1500c8b664a0"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e3d02f6783ac2394750a3944134b44fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44073,
        "upload_time": "2021-01-22T16:49:18",
        "upload_time_iso_8601": "2021-01-22T16:49:18.685023Z",
        "url": "https://files.pythonhosted.org/packages/7d/34/edf20ae0ddd5d91f9b2c0ed46ad856cf8eedaf4f52a29a49ffcb0fbbc876/cloudmesh-pi-burn-4.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "179a42140118f075f57eab1782afc80aa2e24d2d02bc37d410a994e6247bad2c",
          "md5": "d5e0ff096be6b86dcac807183d1f6e7b",
          "sha256": "3003658a82c71ad5518f7fc205fa25b053c164638d9cacc14d4fc0c03e2ed1ab"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5e0ff096be6b86dcac807183d1f6e7b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38826,
        "upload_time": "2021-02-01T16:01:20",
        "upload_time_iso_8601": "2021-02-01T16:01:20.116467Z",
        "url": "https://files.pythonhosted.org/packages/17/9a/42140118f075f57eab1782afc80aa2e24d2d02bc37d410a994e6247bad2c/cloudmesh_pi_burn-4.3.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aec0a3dc7797e801fc8f4887a970dea26604e13cd7dcc72ce0cd5bc6e513652e",
          "md5": "5362042dec1cd346ff9f7c0ecae640ea",
          "sha256": "3403ed10d19c0afff7585174a26b79d2e29cba0a7c478aa7d6ae42c8ba769421"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5362042dec1cd346ff9f7c0ecae640ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58929,
        "upload_time": "2021-02-01T16:01:21",
        "upload_time_iso_8601": "2021-02-01T16:01:21.803220Z",
        "url": "https://files.pythonhosted.org/packages/ae/c0/a3dc7797e801fc8f4887a970dea26604e13cd7dcc72ce0cd5bc6e513652e/cloudmesh-pi-burn-4.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a19becf0bcf551b8c239d6c136218165691dff97897e404ddebae1925d476213",
          "md5": "8762e8d89dbbcea560484859d6a3bafb",
          "sha256": "f93d08a5650efc6d4f6a8c7965d469bdc605aaeedec41939db297c75e01d6d19"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8762e8d89dbbcea560484859d6a3bafb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 40391,
        "upload_time": "2021-02-03T19:04:49",
        "upload_time_iso_8601": "2021-02-03T19:04:49.633883Z",
        "url": "https://files.pythonhosted.org/packages/a1/9b/ecf0bcf551b8c239d6c136218165691dff97897e404ddebae1925d476213/cloudmesh_pi_burn-4.3.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02f5458b11f28a939f262f8e937d74b2a4f45b7217acf51951ce70892734ad76",
          "md5": "a6b026784ad30cb8656ff4f831072578",
          "sha256": "449e7b1242e45cff4729bf3cdb3a85decc709d793f69a85218596b47e91f5984"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a6b026784ad30cb8656ff4f831072578",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58849,
        "upload_time": "2021-02-03T19:04:51",
        "upload_time_iso_8601": "2021-02-03T19:04:51.016456Z",
        "url": "https://files.pythonhosted.org/packages/02/f5/458b11f28a939f262f8e937d74b2a4f45b7217acf51951ce70892734ad76/cloudmesh-pi-burn-4.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc9c83b6795461b70b59c570a1b83098ed0f3fb19a12841f98c5b1f985080842",
          "md5": "bcfba02ba5fbb31ea571df73c08a1259",
          "sha256": "a7041222b19a49c0ca0eb51de31292e4edfa3158aaec65a58c6578d4cfc79970"
        },
        "downloads": -1,
        "filename": "cloudmesh_pi_burn-4.3.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcfba02ba5fbb31ea571df73c08a1259",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42184,
        "upload_time": "2021-02-10T20:20:37",
        "upload_time_iso_8601": "2021-02-10T20:20:37.672984Z",
        "url": "https://files.pythonhosted.org/packages/cc/9c/83b6795461b70b59c570a1b83098ed0f3fb19a12841f98c5b1f985080842/cloudmesh_pi_burn-4.3.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "188463f6288df67399a4f8e70408f934c43ab4344d6fdfca86241f9873dbfd12",
          "md5": "11878c7e4a3841204fbf551c0959500a",
          "sha256": "50266bbc9f6b685c001325bb0a87ff636d7ef27952f71553c7099b7dce58d0d6"
        },
        "downloads": -1,
        "filename": "cloudmesh-pi-burn-4.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "11878c7e4a3841204fbf551c0959500a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61921,
        "upload_time": "2021-02-10T20:20:39",
        "upload_time_iso_8601": "2021-02-10T20:20:39.355854Z",
        "url": "https://files.pythonhosted.org/packages/18/84/63f6288df67399a4f8e70408f934c43ab4344d6fdfca86241f9873dbfd12/cloudmesh-pi-burn-4.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd871c2a1f6c785134335f1dd202ac632553def4b44e51fa5f20876926503a70",
        "md5": "3042f02fb91924b860c620ba2e3acad4",
        "sha256": "ecb32ee5b5d4c82a829e305f5a65f54a8764402663b99d0bdd1eb74a977f9758"
      },
      "downloads": -1,
      "filename": "cloudmesh_pi_burn-4.3.29-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3042f02fb91924b860c620ba2e3acad4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 92674,
      "upload_time": "2021-05-12T07:51:35",
      "upload_time_iso_8601": "2021-05-12T07:51:35.977195Z",
      "url": "https://files.pythonhosted.org/packages/cd/87/1c2a1f6c785134335f1dd202ac632553def4b44e51fa5f20876926503a70/cloudmesh_pi_burn-4.3.29-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19a2bddb420e957391d125641844bf1d02bc4515cd5add08f7b315793906952a",
        "md5": "7b1b5ecba8f6d6b0686541d7ee4d6310",
        "sha256": "0bad199afe95d20d05e0558a3b41c18dc4d255146a96cb999740ea325711ae54"
      },
      "downloads": -1,
      "filename": "cloudmesh-pi-burn-4.3.29.tar.gz",
      "has_sig": false,
      "md5_digest": "7b1b5ecba8f6d6b0686541d7ee4d6310",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 123921,
      "upload_time": "2021-05-12T07:51:37",
      "upload_time_iso_8601": "2021-05-12T07:51:37.847592Z",
      "url": "https://files.pythonhosted.org/packages/19/a2/bddb420e957391d125641844bf1d02bc4515cd5add08f7b315793906952a/cloudmesh-pi-burn-4.3.29.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}