{
  "info": {
    "author": "sunao",
    "author_email": "sunao_0626@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# elcflow\n \n [![Build Status](https://travis-ci.com/eggachecat/elc-flow-engine.svg?branch=master)](https://travis-ci.com/eggachecat/elc-flow-engine)\n [![PyPI version](https://badge.fury.io/py/elc-flow.svg)](https://badge.fury.io/py/elc-flow)\n [![Coverage Status](https://coveralls.io/repos/github/eggachecat/elc-flow-engine/badge.svg)](https://coveralls.io/github/eggachecat/elc-flow-engine)\n [![Documentation Status](https://readthedocs.org/projects/elc-flow-engine/badge/?version=latest)](https://elc-flow-engine.readthedocs.io)\n\n \n ## 介绍\n ELC使用\n  \n ## 指令\n ### 生成文档\n  > cd docs && sphinx-apidoc -o source ../elcflow/ && make html  \n ### 测试\n  > pytest --cov=elcflow\n \n ## 使用[V2]\n ### 注册算子\n 使用`register_elc_function_v2`来注册是一个算子,算子包含以下属性:\n - name\n    - 唯一的标识符,用来找到这个算子\n - parameters\n    - 字典类型, 包含了默认的参数\n    - 主要适用于例如指数函数,其指数当作参数\n        - 给指数2 -> 平方\n        \n算子的输入和输出被严格规定\n    - 输入\n        - global_states\n            - 全局的一个state是一个字典\n        - result\n            - 前一个节点的结果\n        - parameters\n            - 参数\n    - 输出\n        - 一定是一个字典\n ### 用例\n```python\nfrom elcflow.base import register_elc_function_v2\n\n@register_elc_function_v2(name='elc_select_data_v2')\ndef elc_select_data_v2(global_states, result, parameters):\n    return {'return': global_states[parameters['key']]}\n\n\n@register_elc_function_v2(name='elc_add_plus_plus_v2')\ndef elc_add_plus_plus_v2(global_states, result, parameters):\n    return {'return': result['return'] + 1}\n\n\n@register_elc_function_v2(name='elc_mul_v2')\ndef elc_mul_v2(global_states, result, parameters):\n    _result = result['return'] * int(global_states['multiplier'])\n    global_states['elc_mul_v2_result'] = _result\n    return {'return': _result}\n\n\n@register_elc_function_v2(name='elc_pow_for_mul_v2')\ndef elc_pow_for_mul_v2(global_states, result, parameters):\n    _result = global_states['elc_mul_v2_result'] ** int(parameters['a'])\n    global_states['elc_pow_for_mul_v2_result'] = _result\n    return {'return': _result}\n```\n\n### 图\n#### 数据结构\n图主要由以下两部分组成\n- nodes\n    - 包含了所有的节点的信息\n    - id\n    - label\n    - 类型\n        - 数据类型\n        - 算子类型\n    - 其他\n        - 例如算子的参数\n- edges\n    - 有方向的边,从一个node的数据流向另一个node\n    - id\n    - source\n        - 起始节点的id\n    - target\n        - 结束节点的id\n#### 例子      \n```python\nfrom elcflow.graph import *\nfrom elcflow.graph import *\nfrom elcflow.helpers import json_stringify, json_parse\n\n_model_2_globals = {\n    \"global_variable_1\": 5,\n    \"multiplier\": 3\n}\n\n_model_dict_v2 = {\n    \"nodes\": [\n        {\"label\": \"data-selector\", \"id\": \"0ea5a129\", \"_elc_node_type\": 'operator', \"_elc_function\": 'elc_select_data_v2', \"_elc_parameters\": {\"key\": \"global_variable_1\"}},\n        {\"label\": \"add_plus_plus\", \"id\": \"8ac87236\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_add_plus_plus_v2\"},\n        {\"label\": \"multiplier x\", \"id\": \"0d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_mul_v2\"},\n        {\"label\": \"pow_for_mul\", \"id\": \"9d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_pow_for_mul_v2\", \"_elc_parameters\": {\"a\": 4}},\n    ],\n    \"edges\": [\n        {\"source\": \"0ea5a129\", \"target\": \"8ac87236\", \"id\": \"74bc97ca\"},\n        {\"source\": \"8ac87236\", \"target\": \"0d1af6ff\", \"id\": \"d3645364\"},\n        {\"source\": \"0d1af6ff\", \"target\": \"9d1af6ff\", \"id\": \"b0eb9a9b\"},\n    ]\n}\n# 从json结构parse成图\n_graph = ELCGraph.create_from_elc_json(_model_dict_v2, elc_graph_version=ELC_GRAPH_VERSION_V2)\n# 并且初始化global\n_graph.set_state(_globals=_model_2_globals)\n# 编译图: 包含了对于节点拓扑排序并且初始化的工作\n_graph.compile()\n# 执行图\n_graph.execute()\n# 画图\n_graph.plot(show=True, with_state=True)\n\n```\n\n![Example Graph 2](./images/example-graph-2.png)\n \n \n ## 使用[V1]\n ### 注册算子\n 使用`register_elc_function`来注册是一个算子,算子包含以下属性:\n - name\n    - 唯一的标识符,用来找到这个算子\n - outputs\n    - list\n    - 给输出取名字(在图上徐)\n    - 对应到是节点输出的id\n - inputs\n    - 不可选, 则使用函数中定义的名称\n    - 对应到是节点输入的id\n - parameters\n    - 字典类型, 包含了默认的参数\n    - 主要适用于例如指数函数,其指数当作参数\n        - 给指数2 -> 平方\n ### 用例\n```python\nfrom elcflow.base import register_elc_function\n@register_elc_function(outputs=['elc_output'], name='elc_exp_and_plus', parameters={'x': 5})\n# 一个例子\n# 表明注册了一个名称为elc_exp_and_plus算子\n# 他的输入有[a,b,x]\n# 其中x是参数给的默认值是5\n# 它输出的名字叫做elc_output\ndef elc_exp_and_plus_(a, b, x=2):\n    return a ** x + b ** x\n```\n\n### 图\n#### 数据结构\n图主要由以下两部分组成\n- nodes\n    - 包含了所有的节点的信息\n    - id\n    - label\n    - 类型\n        - 数据类型\n        - 算子类型\n    - 其他\n        - 例如算子的参数\n- edges\n    - 有方向的边,从一个node的*某一个输出*数据流向另一个node的*某一个输入*\n    - id\n    - source\n        - 起始节点的id\n    - target\n        - 结束节点的id\n    - _elc_source_output_id\n        - 起始节点输出的id\n            - 可能有多个输出, 取哪一个?\n    - __elc_target_input_id\n        - 结束节点输入的id\n            - 可能有多个输入, 对应到哪一个?\n#### 例子      \n```python\nfrom elcflow.graph import *\nfrom elcflow.graph import *\nfrom elcflow.helpers import json_stringify, json_parse\n\njson_model = {\n    \"nodes\": [\n        {\"label\": \"Input-2\", \"id\": \"3362b879\", \"_elc_node_type\": 'data'},\n        {\"label\": \"Input-1\", \"id\": \"0ea5a129\", \"_elc_node_type\": 'data'},\n        {\"label\": \"Add\", \"id\": \"8ac87236\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_add\"},\n        {\"label\": \"MUL\", \"id\": \"0d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_mul\"},\n        {\"label\": \"POW\", \"id\": \"9d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_pow\", \"_elc_parameters\": {\"a\": 4}},\n        {\"label\": \"OUTPUT\", \"id\": \"1d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_output\", },\n        {\"label\": \"OUTPUT\", \"id\": \"2d1af6ff\", \"_elc_node_type\": 'operator', \"_elc_function\": \"elc_output\"},\n    ],\n    \"edges\": [\n        {\"source\": \"0ea5a129\", \"target\": \"8ac87236\", \"id\": \"74bc97ca\", \"_elc_source_output_id\": '', \"_elc_target_input_id\": \"a\"},\n        {\"source\": \"3362b879\", \"target\": \"8ac87236\", \"id\": \"d3645364\", \"_elc_source_output_id\": '', \"_elc_target_input_id\": \"b\"},\n        {\"source\": \"8ac87236\", \"target\": \"0d1af6ff\", \"id\": \"b0eb9a9b\", \"_elc_source_output_id\": 'sum_result', \"_elc_target_input_id\": \"a\"},\n        {\"source\": \"3362b879\", \"target\": \"0d1af6ff\", \"id\": \"0e6c0fde\", \"_elc_source_output_id\": '', \"_elc_target_input_id\": \"b\"},\n        {\"source\": \"0d1af6ff\", \"target\": \"9d1af6ff\", \"id\": \"7e6c0fde\", \"_elc_source_output_id\": 'mul_result', \"_elc_target_input_id\": \"x\"},\n        {\"source\": \"0d1af6ff\", \"target\": \"1d1af6ff\", \"id\": \"1e6c0fde\", \"_elc_target_input_id\": \"kwargs\"},\n        {\"source\": \"9d1af6ff\", \"target\": \"2d1af6ff\", \"id\": \"2e6c0fde\", \"_elc_target_input_id\": \"kwargs\"},\n    ]\n}\n# 从json结构parse成图\n_graph = ELCGraph.create_from_elc_json(json_model)\n# 编译图: 包含了对于节点拓扑排序并且初始化的工作\n_graph.compile()\n# 把输入节点的数据喂进去\n_graph.feed_data_dict({\n    '3362b879': 5,\n    '0ea5a129': 6\n})\n# 执行图\n_graph.execute()\n# 序列化整个图结构\ngraph_str = json_stringify(_graph.to_dict())\n# 解析序列化结构到图\nnew_graph = ELCGraph.load(json_parse(graph_str))\n# 把结果画出来\nnew_graph.plot(show=True, with_state=True)\n```\n\n![Example Graph 1](./images/example-graph-1.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eggachecat/elc-flow-engine",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elc-flow",
    "package_url": "https://pypi.org/project/elc-flow/",
    "platform": "",
    "project_url": "https://pypi.org/project/elc-flow/",
    "project_urls": {
      "Homepage": "https://github.com/eggachecat/elc-flow-engine"
    },
    "release_url": "https://pypi.org/project/elc-flow/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A graph flow engine for East Low Carbon",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6337814,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccfc67dd5adf5b632dc3f62f23e70f791a4eb07af0c4dcc0da37ec096a3d2ef9",
          "md5": "0eae431bb7cde1445972059f0db909a3",
          "sha256": "5c42e434cf1274892f5187c0d91c9b3afdb112986dcd15af2667d63c80929550"
        },
        "downloads": -1,
        "filename": "elc-flow-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0eae431bb7cde1445972059f0db909a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6859,
        "upload_time": "2019-12-17T06:19:11",
        "upload_time_iso_8601": "2019-12-17T06:19:11.603085Z",
        "url": "https://files.pythonhosted.org/packages/cc/fc/67dd5adf5b632dc3f62f23e70f791a4eb07af0c4dcc0da37ec096a3d2ef9/elc-flow-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5d214d350daad2680b2f91e4837ac392032195ccdf1034eb1eed22ef60c9a3a",
          "md5": "b74bf7893f21aeeaebb6654bd5ad5915",
          "sha256": "a99cc92fe74141838fb4a6ef978e6792626e0769e65843c32cd09ca3944e3184"
        },
        "downloads": -1,
        "filename": "elc-flow-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b74bf7893f21aeeaebb6654bd5ad5915",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6888,
        "upload_time": "2019-12-17T06:28:07",
        "upload_time_iso_8601": "2019-12-17T06:28:07.346481Z",
        "url": "https://files.pythonhosted.org/packages/b5/d2/14d350daad2680b2f91e4837ac392032195ccdf1034eb1eed22ef60c9a3a/elc-flow-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8950832a3cbd4f7624e41cfd8ccffd9d05e7c1400ca02457c7b931e8c5a9b1b",
          "md5": "5232c122c10d93b0a7316568c8f466da",
          "sha256": "f5460f3568f824732c3c1581ee7b2cfca8ef72826dc366a2499648e5d473d43a"
        },
        "downloads": -1,
        "filename": "elc-flow-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5232c122c10d93b0a7316568c8f466da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12559,
        "upload_time": "2019-12-20T08:30:05",
        "upload_time_iso_8601": "2019-12-20T08:30:05.738808Z",
        "url": "https://files.pythonhosted.org/packages/f8/95/0832a3cbd4f7624e41cfd8ccffd9d05e7c1400ca02457c7b931e8c5a9b1b/elc-flow-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8950832a3cbd4f7624e41cfd8ccffd9d05e7c1400ca02457c7b931e8c5a9b1b",
        "md5": "5232c122c10d93b0a7316568c8f466da",
        "sha256": "f5460f3568f824732c3c1581ee7b2cfca8ef72826dc366a2499648e5d473d43a"
      },
      "downloads": -1,
      "filename": "elc-flow-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5232c122c10d93b0a7316568c8f466da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12559,
      "upload_time": "2019-12-20T08:30:05",
      "upload_time_iso_8601": "2019-12-20T08:30:05.738808Z",
      "url": "https://files.pythonhosted.org/packages/f8/95/0832a3cbd4f7624e41cfd8ccffd9d05e7c1400ca02457c7b931e8c5a9b1b/elc-flow-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}