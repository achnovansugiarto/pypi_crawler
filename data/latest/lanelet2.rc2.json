{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Lanelet2\n\n| [ROS focal/noetic](https://build.ros.org/job/Ndev__lanelet2__ubuntu_focal_amd64/lastBuild) | [ROS focal/foxy](https://build.ros2.org/job/Fdev__lanelet2__ubuntu_focal_amd64/lastBuild) |\n| --------- | --------- |\n| [![](https://build.ros.org/job/Ndev__lanelet2__ubuntu_focal_amd64/lastBuild/badge/icon)](https://build.ros.org/job/Ndev__lanelet2__ubuntu_focal_amd64/lastBuild) | [![](https://build.ros2.org/job/Fdev__lanelet2__ubuntu_focal_amd64/lastBuild//badge/icon)](https://build.ros2.org/job/Fdev__lanelet2__ubuntu_focal_amd64/lastBuild) |\n\n## Overview\n\nLanelet2 is a C++ library for handling map data in the context of automated driving. It is designed to utilize high-definition map data in order to efficiently handle the challenges posed to a vehicle in complex traffic scenarios. Flexibility and extensibility are some of the core principles to handle the upcoming challenges of future maps.\n\nFeatures:\n- **2D and 3D** support\n- **Consistent modification**: if one point is modified, all owning objects see the change\n- Supports **lane changes**, routing through areas, etc.\n- **Separated routing** for pedestrians, vehicles, bikes, etc.\n- Many **customization points** to add new traffic rules, routing costs, parsers, etc.\n- **Simple convenience functions** for common tasks when handling maps\n- **Accurate Projection** between the lat/lon geographic world and local metric coordinates\n- **IO Interface** for reading and writing e.g. _osm_ data formats (this does not mean it can deal with _osm maps_)\n- **Python** bindings for the whole C++ interface\n- **Boost Geometry** support for all thinkable kinds of geometry calculations on map primitives\n- Released under the [**BSD 3-Clause license**](LICENSE)\n- Support for **ROS1, ROS2, Docker and Conan** (see instructions below)\n\n![](lanelet2_core/doc/images/lanelet2_example_image.png)\n\nLanelet2 is the successor of the old [liblanelet](https://github.com/phbender/liblanelet/tree/master/libLanelet) that was developed in 2013. If you know Lanelet1, you might be interested in [reading this](lanelet2_core/doc/Lanelet1Compability.md).\n\n## Documentation\n\nYou can find more documentation in the individual packages and in doxygen comments. Here is an overview on the most important topics:\n- [Here](lanelet2_core/doc/LaneletPrimitives.md) is more information on the basic primitives that make up a Lanelet2 map.\n- [Read here](lanelet2_core/doc/Architecture.md) for a primer on the **software architecture** of lanelet2.\n- There is also some [documentation](lanelet2_core/doc/GeometryPrimer.md) on the geometry calculations you can do with lanelet2 primitives.\n- If you are interested in Lanelet2's **projections**, you will find more [here](lanelet2_projection/doc/Map_Projections_Coordinate_Systems.md).\n- To get more information on how to create valid maps, see [here](lanelet2_maps/README.md).\n\n## Installation\n\n### Within ROS\nLanelet2 has been released for ROS. Just install `ros-[distribution]-lanelet2`, e.g.:\n```\nsudo apt install ros-noetic-lanelet2\n```\n\n### Without ROS\nOutside of ROS, Lanelet2 can be installed from PyPI. Note that currently only Python 3.8 linux builds are available.\n```\npip install lanelet2\n```\n#### Note:\n\nIf you receive the error\n\n```\nERROR: Could not find a version that satisfies the requirement lanelet2 (from versions: none)\nERROR: No matching distribution found for lanelet2\n```\n\nduring installation, even when using python 3.8 on a recent linux such as Ubuntu 20.04 or newer, your pip version is probably too old, \nas e.g. the pip version that comes with apt on Ubuntu 20.04 (20.0.2) is not recent enough for the provided package.\n\nIn this case you need to simply update pip with \n\n```\npip3 install -U pip \n```\n\n### Using Docker\n\nThere is a Docker container from which you can test things out:\n\n```\ndocker build -t lanelet2 .                    # builds a docker image named \"lanelet2\"\ndocker run -it --rm lanelet2:latest /bin/bash # starts the docker image\npython -c \"import lanelet2\"                   # quick check to see everything is fine\n```\n\nThe docker image contains a link to your local lanelet2, so you can work and see changes (almost) at the same time. Work with two screens, one local and one on docker. Make your code changes locally, then run again `catkin build` on docker to recompile the code (update python modules).\n\n### Manual installation\n\nIn case you want to build it in your own way (without the above Docker image) use these instructions.\n\nLanelet2 relies mainly on [Catkin](https://catkin-tools.readthedocs.io/en/latest/index.html) for building and is targeted towards Linux.\n\nAt least **C++14** is required.\n\n### Dependencies\nBesides [Catkin](https://catkin-tools.readthedocs.io/en/latest/index.html), the dependencies are\n* `Boost` (from 1.58)\n* `eigen3`\n* [`mrt_cmake_modules`](https://github.com/KIT-MRT/mrt_cmake_modules), a CMake helper library\n* `pugixml` (for lanelet2_io)\n* `boost-python, python2 or python3` (for lanelet2_python)\n* `geographiclib` (for lanelet2_projection)\n* `rosbash` (for lanelet2_examples)\n\nFor Ubuntu, the steps are the following:\n* [Set up ROS](http://wiki.ros.org/ROS/Installation), and install at least `rospack`, `catkin` and `mrt_cmake_modules` (e.g. `ros-melodic-rospack`, `ros-melodic-catkin`, `ros-melodic-mrt-cmake-modules`):\n```\nsudo apt-get install ros-melodic-rospack ros-melodic-catkin ros-melodic-mrt-cmake-modules\n```\n\n* Install the dependencies above:\n```bash\nsudo apt-get install libboost-dev libeigen3-dev libgeographic-dev libpugixml-dev libpython-dev libboost-python-dev python-catkin-tools\n```\n\n**On 16.04 and below**, `mrt_cmake_modules` is not available in ROS and you have to clone it into your workspace (`git clone https://github.com/KIT-MRT/mrt_cmake_modules.git`).\n\n### Building\nAs usual with Catkin, after you have sourced the ros installation, you have to create a workspace and clone all required packages there. Then you can build.\n```shell\nsource /opt/ros/$ROS_DISTRO/setup.bash\nmkdir catkin_ws && cd catkin_ws && mkdir src\ncatkin init\ncatkin config --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo # build in release mode (or whatever you prefer)\ncd src\ngit clone https://github.com/fzi-forschungszentrum-informatik/lanelet2.git\ncd ..\ncatkin build\n```\n\nIf unsure, see the [Dockerfile](Dockerfile) or the [travis build log](https://travis-ci.org/fzi-forschungszentrum-informatik/Lanelet2). It shows the full installation process, with subsequent build and test based on a docker image with a clean Ubuntu installation.\n\n### Manual, experimental installation using conan\nFor non-catkin users, we also offer a conan based install process. Its experimental and might not work on all platforms, especially Windows.\nSince conan handles installing all C++ dependencies, all you need is a cloned repository, conan itself and a few python dependencies:\n```bash\npip install conan catkin_pkg numpy\nconan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan # required for python bindings\nconan config set general.revisions_enabled=1 # requried to use bincrafters remote\ngit clone https://github.com/fzi-forschungszentrum-informatik/lanelet2.git\ncd lanelet2\n```\n\nFrom here, just use the default conan build/install procedure, e.g.:\n```bash\nconan source .\nconan create . lanelet2/stable --build=missing\n```\nDifferent from the conan defaults, we build lanelet2 and boost as shared libraries, because otherwise the lanelet2's plugin mechanisms as well as boost::python will fail. E.g. loading maps will not be possible and the python API will not be usable.\n\nTo be able to use the python bindings, you have to make conan export the PYTHONPATH for lanelet2:\n```bash\nconan install lanelet2/0.0.0@lanelet2/stable --build=missing -g virtualenv # replace 0.0.0 with the version shown by conan\nsource activate.sh\npython -c \"import lanelet2\" # or whatever you want to do\nsource deactivate.sh\n```\n\n### Python3\n\nThe python bindings are build for your default python installation by default (which currently is python2 on most systems). To build for python3 instead of python2, create a python3 virtualenv before initializing the workspace with `catkin init`. The command `python` should point to `python3`.\n\nAfter `catkin init` run `catkin config --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPYTHON_VERSION=3.6` to make sure that the correct python version is used. Then build and use as usual.\n\n*Note: With bionic and beyond, the apt package `python3-catkin-tools` conflicts with ROS melodic and should not be used. Use either the python2 version or use pip to install the python3 version.*\n\n## Examples\nExamples and common use cases in both C++ and Python can be found [here](lanelet2_examples/README.md).\n\n## Packages\n* **lanelet2** is the meta-package for the whole lanelet2 framework\n* **lanelet2_core** implements the basic library with all the primitives, geometry calculations and the LanletMap object\n* **lanelet2_io** is responsible for reading and writing lanelet maps\n* **lanelet2_traffic_rules** provides support to interpret the traffic rules encoded in a map\n* **lanelet2_projection** for projecting maps from WGS84 (lat/lon) to local metric coordinates\n* **lanelet2_routing** implements the routing graph for routing or reachable set or queries as well as collision checking\n* **lanelet2_maps** provides example maps and functionality to visualize and modify them easily in JOSM\n* **lanelet2_matching** provides functions to determine in which lanelet an object is/could be currently located\n* **lanelet2_python** implements the python interface for lanelet2\n* **lanelet2_validation** provides checks to ensure a valid lanelet2 map\n* **lanelet2_examples** contains tutorials for working with Lanelet2 in C++ and Python\n\n## Citation\n\nIf you are using Lanelet2 for scientific research, we would be pleased if you would cite our [publication](http://www.mrt.kit.edu/z/publ/download/2018/Poggenhans2018Lanelet2.pdf):\n```latex\n@inproceedings{poggenhans2018lanelet2,\n  title     = {Lanelet2: A High-Definition Map Framework for the Future of Automated Driving},\n  author    = {Poggenhans, Fabian and Pauls, Jan-Hendrik and Janosovits, Johannes and Orf, Stefan and Naumann, Maximilian and Kuhnt, Florian and Mayr, Matthias},\n  booktitle = {Proc.\\ IEEE Intell.\\ Trans.\\ Syst.\\ Conf.},\n  year      = {2018},\n  address   = {Hawaii, USA},\n  owner     = {poggenhans},\n  month     = {November},\n  Url={http://www.mrt.kit.edu/z/publ/download/2018/Poggenhans2018Lanelet2.pdf}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fzi-forschungszentrum-informatik/Lanelet2",
    "keywords": "",
    "license": "BSD",
    "maintainer": "Fabian Immel",
    "maintainer_email": "fabian.immel@kit.edu",
    "name": "lanelet2",
    "package_url": "https://pypi.org/project/lanelet2/",
    "platform": null,
    "project_url": "https://pypi.org/project/lanelet2/",
    "project_urls": {
      "Homepage": "https://github.com/fzi-forschungszentrum-informatik/Lanelet2"
    },
    "release_url": "https://pypi.org/project/lanelet2/1.2.0.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Map handling framework for automated driving.",
    "version": "1.2.0.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17531327,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c583880f9a906dc5165423c2368fb32991a254d3ef1bbc7689b0a510729fef1",
          "md5": "957d5a9bf9d53f06fa63ec5214febc64",
          "sha256": "dfa5f84a5318b592e9222b37c91cdff4db2b9650b93676b217c3e29cf9225f62"
        },
        "downloads": -1,
        "filename": "lanelet2-1.2.0-cp38-cp38-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "957d5a9bf9d53f06fa63ec5214febc64",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4714766,
        "upload_time": "2023-03-29T18:26:50",
        "upload_time_iso_8601": "2023-03-29T18:26:50.579159Z",
        "url": "https://files.pythonhosted.org/packages/6c/58/3880f9a906dc5165423c2368fb32991a254d3ef1bbc7689b0a510729fef1/lanelet2-1.2.0-cp38-cp38-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65a208d84652d248267c8ee2cad3bce1b7bcee874279f601759bf2d8f5581fb7",
          "md5": "9bc327d66e9f9e66e8e4f1365da9eeff",
          "sha256": "203a544b82e1177ae975a1f52d74bcffa997b574febe6b8780a78fd7194775a1"
        },
        "downloads": -1,
        "filename": "lanelet2-1.2.0.post2-cp38-cp38-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "9bc327d66e9f9e66e8e4f1365da9eeff",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4567228,
        "upload_time": "2023-03-31T18:12:04",
        "upload_time_iso_8601": "2023-03-31T18:12:04.977242Z",
        "url": "https://files.pythonhosted.org/packages/65/a2/08d84652d248267c8ee2cad3bce1b7bcee874279f601759bf2d8f5581fb7/lanelet2-1.2.0.post2-cp38-cp38-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65a208d84652d248267c8ee2cad3bce1b7bcee874279f601759bf2d8f5581fb7",
        "md5": "9bc327d66e9f9e66e8e4f1365da9eeff",
        "sha256": "203a544b82e1177ae975a1f52d74bcffa997b574febe6b8780a78fd7194775a1"
      },
      "downloads": -1,
      "filename": "lanelet2-1.2.0.post2-cp38-cp38-manylinux_2_31_x86_64.whl",
      "has_sig": false,
      "md5_digest": "9bc327d66e9f9e66e8e4f1365da9eeff",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 4567228,
      "upload_time": "2023-03-31T18:12:04",
      "upload_time_iso_8601": "2023-03-31T18:12:04.977242Z",
      "url": "https://files.pythonhosted.org/packages/65/a2/08d84652d248267c8ee2cad3bce1b7bcee874279f601759bf2d8f5581fb7/lanelet2-1.2.0.post2-cp38-cp38-manylinux_2_31_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}