{
  "info": {
    "author": "Matthias Hummel",
    "author_email": "matthiashummel@ymail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# partialedge\n\nThis library contains algorithms for solving **Maximum Ink Partial Edge Drawing** problems, MaxPED, MaxSPED and MaxSHPED in particular.\nThe implementation is based on the algorithms presented in the publication from Hummel et al<sup>[1]</sup> while using the htd<sup>[2]</sup> library from Michael Abseher for tree decomposition.\n\nThe CrossingResolution algorithm solves MaxSHPED, while the Tree algorithm can solve MaxSPED where the intersection graph forms a tree.\nThe TreeDecomposition algorithm is applicable to either MaxPED or MaxSPED with no restriction on the intersection graph.\nHowever, depending on the treewidth of the tree decomposition, the execution may require too much runtime or memory space.\n\n\nSource | PED | SPED | SHPED\n:-----:|:---:|:----:|:-----:\n![source](https://bitbucket.org/Remvipomed/partialedgedrawing/raw/master/img/source.png) | ![ped](https://bitbucket.org/Remvipomed/partialedgedrawing/raw/master/img/ped.png) | ![sped](https://bitbucket.org/Remvipomed/partialedgedrawing/raw/master/img/sped.png) | ![shped](https://bitbucket.org/Remvipomed/partialedgedrawing/raw/master/img/shped.png)\n\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install partialedge.\n\n```bash\npip install partialedge\n```\n\n## Usage\n\n### Command Line\n\n```bash\npython -m partialedge\n```\n\n```\npositional arguments:\n  input                 path to input file or directory depending on mode\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --mode {single,set,dir}\n                        process a single input file, a file containing a set\n                        of graph drawings, or a directory of set files\n  --symmetric           input will be processed as symmetric PED problem\n  --homogeneous         input will be processed as homogeneous PED problem\n  --json JSON_DIR, -j JSON_DIR\n                        store result data at the given directory\n  --image IMAGE_DIR, -i IMAGE_DIR\n                        store result image at the given directory\n  --include-source, -s  store source graph image with the result image\n  --verbose, -v         v count determines logging verbosity level\n```\n\n\n### Development\n\n```python\nimport logging\n\nfrom partialedge.graph import graph_window as gw\nfrom partialedge.algorithm import ped_algorithm as alg\n\nlogger = logging.getLogger(\"ped\")\nlogger.setLevel(logging.INFO - 3)\n\n# all high-level features are exposed via an algorithm object\n# the positional parameter determines output filenames\n# algorithm classes: TreeDecompositionAlgorithm, TreeAlgorithm, CrossingResolutionAlgorithm\nalgorithm = alg.TreeDecompositionAlgorithm(\"sample\", symmetric=False, logger=logger)\n\n# either create a random graph layout or load an existing one\nalgorithm.create_graph(15, 20, layout=\"spring\")\n# algorithm.load_graph_from_graph_file(file_path=\"resources/sample/json/source/sample.json\")\n\n# start execution\nalgorithm.perform_algorithm()\n\n# export source and output\nalgorithm.export_source_graph(dir_path=\"resources/sample/json/source\")\nalgorithm.export_json_result(dir_path=\"resources/sample/json/result\")\nalgorithm.export_image_source(dir_path=\"resources/sample/image/source\")\nalgorithm.export_image_result(dir_path=\"resources/sample/image/result\")\n\n# create plot of source graph\nalgorithm.set_edges_full()\nsource = gw.GraphWindow()\nsource.draw_graph(algorithm.graph)\n\n# create plot of result graph\nalgorithm.set_edges_partial()\nresult = gw.GraphWindow()\nresult.draw_graph(algorithm.graph)\n\n# show matplotlib plots\nsource.show()\n\n# close matplotlib resources\nsource.close()\nresult.close()\n```\n\n\n## File Format\n\n### Input\n\nThe input file for a single graph must be in the same format as the example below.\nIn set mode the json file has to contain a list of named single graphs.\nThe directory mode requires the path to a directory with set files as input.\n\n```json\n{\n    \"edges\": [\n        {\n            \"incident_nodes\": [\n                0,\n                1\n            ]\n        }\n    ],\n    \"nodes\": [\n        {\n            \"coordinates\": [\n                0.2215272649584424,\n                -1.0\n            ],\n            \"index\": 0\n        },\n        {\n            \"coordinates\": [\n                -0.2215272649584424,\n                1.0\n            ],\n            \"index\": 1\n        }\n    ]\n}\n```\n\n\n### Output\n\nThe json result file contains a lot of information that can be used for statistical analysis.\nIn the *graph* field, the number of nodes and edges as well as the ink value is stored, in addition to the full drawing of the source graph.\nAs it has a large impact on runtime and memory consumption, the intersection graph with details about its size and the number of crossings per node is stored in the *intersection* field.\nThe *result* field contains all stub values of the maximum ink partial edge drawing in relation to edges of the input graph drawing.\nIt also stores meta data consisting of the resulting ink value, treewidth of the tree decomposition on the intersection graph, and a boolean about whether the problem had the symmetric constraint.\nThe *success* field on the highest level is true, if execution of the algorithm completed uninterrupted, and the *time* field contains the runtime in seconds.\n\n\n```json\n{\n    \"graph\": {\n        \"edge_data\": {\n            \"edge_count\": 1,\n            \"edges\": [\n                {\n                    \"incident_nodes\": [\n                        0,\n                        1\n                    ]\n                }\n            ]\n        },\n        \"ink\": 2.048486591725675,\n        \"node_data\": {\n            \"node_count\": 2,\n            \"nodes\": [\n                {\n                    \"coordinates\": [\n                        0.2215272649584424,\n                        -1.0\n                    ],\n                    \"index\": 0\n                },\n                {\n                    \"coordinates\": [\n                        -0.2215272649584424,\n                        1.0\n                    ],\n                    \"index\": 1\n                }\n            ]\n        }\n    },\n    \"intersection\": {\n        \"delta_count\": {\n            \"0\": 1\n        },\n        \"edge_count\": 0,\n        \"edges\": [],\n        \"node_count\": 1,\n        \"nodes\": [\n            {\n                \"delta\": 0,\n                \"index\": 0\n            }\n        ]\n    },\n    \"result\": {\n        \"edges\": [\n            {\n                \"incident_nodes\": [\n                    0,\n                    1\n                ],\n                \"stub\": [\n                    0.5,\n                    0.5\n                ]\n            }\n        ],\n        \"ink\": 2.048486591725675,\n        \"symmetric\": false,\n        \"tree_width\": 0\n    },\n    \"success\": true,\n    \"time\": {\n        \"algorithm\": 0.00013890000000049696,\n        \"init_datastructure\": 9.380000000014377e-05,\n        \"tree_decomposition\": 0.12066659999999985\n    }\n}\n```\n\n\n## Contributing\n\nNo major updates are planned at the moment. \nAnyone willing to contribute is welcome to create bug reports and pull requests at the [project page](https://bitbucket.org/Remvipomed/partialedgedrawing/src/master/)\n\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n## Citations\n\n1. [Maximizing Ink in Partial Edge Drawings of k-plane Graphs](https://doi.org/10.1007/978-3-030-35802-0_25)\n2. [htd](https://github.com/mabseher/htd)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/Remvipomed/partialedgedrawing/src/master/",
    "keywords": "maximum,ink,partial,edge,drawing,algorithm",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "partialedge",
    "package_url": "https://pypi.org/project/partialedge/",
    "platform": "",
    "project_url": "https://pypi.org/project/partialedge/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/Remvipomed/partialedgedrawing/src/master/"
    },
    "release_url": "https://pypi.org/project/partialedge/1.0.1/",
    "requires_dist": [
      "networkx (>=2)",
      "treedecomp (>=1)",
      "pygeos",
      "matplotlib (>=3)",
      "scipy (>=1)"
    ],
    "requires_python": "",
    "summary": "A collection of algorithms for solving Maximum Ink Partial Edge Drawing Problems",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11214438,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "231354585a3506b5e916fdaea2afac01134168b69b58c3ffcca3fcd8d7a41858",
          "md5": "227e5f1fd58271ac7fb13ec5c832e185",
          "sha256": "070f48830970b7234bcc78899902d7b45a6d858ea43a8c972904c9b3d11ab4ef"
        },
        "downloads": -1,
        "filename": "partialedge-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "227e5f1fd58271ac7fb13ec5c832e185",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12693165,
        "upload_time": "2021-08-16T10:44:51",
        "upload_time_iso_8601": "2021-08-16T10:44:51.324284Z",
        "url": "https://files.pythonhosted.org/packages/23/13/54585a3506b5e916fdaea2afac01134168b69b58c3ffcca3fcd8d7a41858/partialedge-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "major compatibility issues in td subroutine"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "722aa93cdf27e88b0320dab06a6e354c08273b664672a1109c94b3e3adf069aa",
          "md5": "e3d5aae14de32a79b7214463a86355b6",
          "sha256": "8bc42075c93524c3157c1dda00f7c5b62605a4198893e84793482695cf32258f"
        },
        "downloads": -1,
        "filename": "partialedge-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3d5aae14de32a79b7214463a86355b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12589797,
        "upload_time": "2021-08-16T10:44:56",
        "upload_time_iso_8601": "2021-08-16T10:44:56.191314Z",
        "url": "https://files.pythonhosted.org/packages/72/2a/a93cdf27e88b0320dab06a6e354c08273b664672a1109c94b3e3adf069aa/partialedge-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "major compatibility issues in td subroutine"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abb93828b55d8387067f21b2a2cc55a5cd9e61f5ff04c60740431fd743954549",
          "md5": "1312853ad53b01b5e92564784ddcae73",
          "sha256": "9f5e0e450fca862265e031ca6d26c9cf157a1cb47c69670960e2d20f1b18530f"
        },
        "downloads": -1,
        "filename": "partialedge-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1312853ad53b01b5e92564784ddcae73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11431182,
        "upload_time": "2021-08-17T15:19:02",
        "upload_time_iso_8601": "2021-08-17T15:19:02.699235Z",
        "url": "https://files.pythonhosted.org/packages/ab/b9/3828b55d8387067f21b2a2cc55a5cd9e61f5ff04c60740431fd743954549/partialedge-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1f387284ab2845f65390a62c8ffa6a6ea09787f69f1b4840d613196ed46a419",
          "md5": "f4a8271227fb9a0cbd75878037aec80a",
          "sha256": "79aeddb51aa814e8e50537c49ee9dbe01cf40d5c16de9e09554bb1a43708cf09"
        },
        "downloads": -1,
        "filename": "partialedge-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f4a8271227fb9a0cbd75878037aec80a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11330446,
        "upload_time": "2021-08-17T15:19:27",
        "upload_time_iso_8601": "2021-08-17T15:19:27.434721Z",
        "url": "https://files.pythonhosted.org/packages/c1/f3/87284ab2845f65390a62c8ffa6a6ea09787f69f1b4840d613196ed46a419/partialedge-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abb93828b55d8387067f21b2a2cc55a5cd9e61f5ff04c60740431fd743954549",
        "md5": "1312853ad53b01b5e92564784ddcae73",
        "sha256": "9f5e0e450fca862265e031ca6d26c9cf157a1cb47c69670960e2d20f1b18530f"
      },
      "downloads": -1,
      "filename": "partialedge-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1312853ad53b01b5e92564784ddcae73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11431182,
      "upload_time": "2021-08-17T15:19:02",
      "upload_time_iso_8601": "2021-08-17T15:19:02.699235Z",
      "url": "https://files.pythonhosted.org/packages/ab/b9/3828b55d8387067f21b2a2cc55a5cd9e61f5ff04c60740431fd743954549/partialedge-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1f387284ab2845f65390a62c8ffa6a6ea09787f69f1b4840d613196ed46a419",
        "md5": "f4a8271227fb9a0cbd75878037aec80a",
        "sha256": "79aeddb51aa814e8e50537c49ee9dbe01cf40d5c16de9e09554bb1a43708cf09"
      },
      "downloads": -1,
      "filename": "partialedge-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f4a8271227fb9a0cbd75878037aec80a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11330446,
      "upload_time": "2021-08-17T15:19:27",
      "upload_time_iso_8601": "2021-08-17T15:19:27.434721Z",
      "url": "https://files.pythonhosted.org/packages/c1/f3/87284ab2845f65390a62c8ffa6a6ea09787f69f1b4840d613196ed46a419/partialedge-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}