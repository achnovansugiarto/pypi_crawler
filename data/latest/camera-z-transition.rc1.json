{
  "info": {
    "author": "Tamas Suveges",
    "author_email": "stamas01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# camera_z_transition\n#### Description\nThis is a small python package to estimate the camera motion/zoom\non the z axis.\n\nwhat it is:\n- Estimates the camera motion/zoom on the z axis\n\n\nwhat it is NOT:\n\n- It does not calcualte optical flow (although you can see example of that in\nthe example.py)\n- It is not a metric estimation. It will not tell you the exact amount\nof transition on the z axis in meter/feet\n- It does not estimate any other camera motion such az tilling, panning, \ntracking  etc.\n\n#### Install\n```\npip install cam-motion-field\n```\n\n#### Usage\n```python\nfrom camera_z_transition import estimate_z_transition\nimport numpy as np\n\n# This is the width and height of the image on which you perform the\n# optical flow calculation\nwidth = 1080\nheight = 720\n\n# You should change this to some real optical flow calculation! see example\n# in example.py. Both origins and displacements should be a list of 2D vectors.\norigins = np.ones((10,2))*(1080//2)+10\ndisplacements = np.ones((10,2))*(1080//2)+20\n\n# Normalize and scale the optical flow first!\norigins[:, 0] = (origins[:, 0] / width) - 0.5\norigins[:, 1] = (origins[:, 1] / height) - 0.5\ndisplacements[:, 0] = (displacements[:, 0] / width) - 0.5\ndisplacements[:, 1] = (displacements[:, 1] / height) - 0.5\n\n# Estimate transition on the z axis\nz = estimate_z_transition(origins, displacements)\n\nprint(z)\n```\n\n    Parameters for estimate_z_transition()\n    ----------\n    origins: numpy array,\n        Set of origin vectors. Shape must be (nr_of_points, 2). MUST BE ZERO CENTERED AND SCALED!\n    displacements: numpy array,\n        Set of displacement vectors (coordinates). Shape must be (nr_of_points, 2)\n    focal_length\n\n#### How it works\nGiven any point in the image plane (X,Y) we can estimate their new position\non the image plane (X',Y') given a transition on the x axis [[1]](#1).\n\n<img src=\"https://render.githubusercontent.com/render/math?math=X' = f[tan^{-1}\\frac{X}{f}](1+\\frac{X^2}{f^2})\\beta\">\n<br>\n<img src=\"https://render.githubusercontent.com/render/math?math=Y' = f[tan^{-1}\\frac{Y}{f}](1+\\frac{Y^2}{f^2})\\beta\">\n\nWhere parameter X and Y are coordinates on the image plane\nand <img src=\"https://render.githubusercontent.com/render/math?math=\\beta\">\nis the transition on the z axis. X' and Y' are the new coordinates\non the image plane given the transition parameter. \nNotice that both equations require a parameter *f* which is the focal lenght\nif the camera. Interestingly it does not seem to have a noticeable effect on the\noutput. It seams that until *f* and (X,Y) has sensible values the\nexact value of *f* does not matter. It is important that I do not have any\nmathematical proof on this. It is purely come from visually observing\nthe behaviour of the function with different *f* and (X,Y). You can have a\nlook here: [link to Plot](https://www.desmos.com/calculator/hpo4u5xdkb)\n\nGiven an observed optical flow it is easy to perform a parameter search\nfor <img src=\"https://render.githubusercontent.com/render/math?math=\\beta\">\nusing the equations above. \n\n#### Results\nGiven two consecutive images from a camera:\n\n<img src=\"https://github.com/stamas02/camera_z_transition/blob/master/data/image_anim.gif\" width=\"400\"/>\n\nWe first obtain the optical flow using opencv\n\n<img src=\"https://github.com/stamas02/camera_z_transition/blob/master/data/optical_flow.jpg\" width=\"400\"/>\n\nThe estimated <img src=\"https://render.githubusercontent.com/render/math?math=\\beta\">\nparameter value for the images above is 0.053796382332247594\n\nThe gif below shows the original optical flow and the one artificially\ngenerated using the estimated <img src=\"https://render.githubusercontent.com/render/math?math=\\beta\">\nparameter.\n\n<img src=\"https://github.com/stamas02/camera_z_transition/blob/master/data/op_flow_anim.gif\" width=\"400\"/>\n\n#### References\n<a id=\"1\">[1]</a> \nSrinivasan, M.V., Venkatesh, S., Hosie, R.: Qualitative estimation of camera motion\nparameters from video sequences. Pattern Recognition 30(4), 593â€“606 (1997)\n\n#### Bib\n    @article{Srinivasan at al.,\n      title={Qualitative estimation of camera motion parameters from video sequences},\n      author={Srinivasan, Mandyam V and Venkatesh, Svetha and Hosie, Robin},\n      journal={Pattern Recognition},\n      volume={30},\n      number={4},\n      pages={593--606},\n      year={1997},\n      publisher={Elsevier}\n    }\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/stamas02/camera_z_transition/archive/v_01.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stamas02/camera_z_transition",
    "keywords": "video,optical-flow,camera,camera-motion,motion field,camera transition,camera movement",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "camera-z-transition",
    "package_url": "https://pypi.org/project/camera-z-transition/",
    "platform": "",
    "project_url": "https://pypi.org/project/camera-z-transition/",
    "project_urls": {
      "Download": "https://github.com/stamas02/camera_z_transition/archive/v_01.tar.gz",
      "Homepage": "https://github.com/stamas02/camera_z_transition"
    },
    "release_url": "https://pypi.org/project/camera-z-transition/1.0/",
    "requires_dist": [
      "scipy",
      "numpy"
    ],
    "requires_python": "",
    "summary": "This package provides quick and easy way to estimate the camera transition on the z axis given an optical flow.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8119532,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4065e38e9854e1955187a22d9ecce3ca935f0297f005b0ec0c1ea4436f035752",
          "md5": "e64a08e8ab809d6e6854c028a1b9062f",
          "sha256": "bc5cf1f4d0ecd8f68cc3dee50f45981c28fbefb47e3557a689852d8f0c697689"
        },
        "downloads": -1,
        "filename": "camera_z_transition-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e64a08e8ab809d6e6854c028a1b9062f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4999,
        "upload_time": "2020-09-05T11:56:43",
        "upload_time_iso_8601": "2020-09-05T11:56:43.553750Z",
        "url": "https://files.pythonhosted.org/packages/40/65/e38e9854e1955187a22d9ecce3ca935f0297f005b0ec0c1ea4436f035752/camera_z_transition-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcbc4026849d91f0f90db2be31fb11133d1dfd9b2c39c5907c1f04596c701f8c",
          "md5": "6004ed8ac7e8ad6b006cc5b191536542",
          "sha256": "65e707dbdd5f4bda15dc5bd918bee989ae6fd37b418b5636ed4ba29f3910177f"
        },
        "downloads": -1,
        "filename": "camera-z-transition-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6004ed8ac7e8ad6b006cc5b191536542",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4239,
        "upload_time": "2020-09-05T11:56:46",
        "upload_time_iso_8601": "2020-09-05T11:56:46.072333Z",
        "url": "https://files.pythonhosted.org/packages/fc/bc/4026849d91f0f90db2be31fb11133d1dfd9b2c39c5907c1f04596c701f8c/camera-z-transition-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4065e38e9854e1955187a22d9ecce3ca935f0297f005b0ec0c1ea4436f035752",
        "md5": "e64a08e8ab809d6e6854c028a1b9062f",
        "sha256": "bc5cf1f4d0ecd8f68cc3dee50f45981c28fbefb47e3557a689852d8f0c697689"
      },
      "downloads": -1,
      "filename": "camera_z_transition-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e64a08e8ab809d6e6854c028a1b9062f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4999,
      "upload_time": "2020-09-05T11:56:43",
      "upload_time_iso_8601": "2020-09-05T11:56:43.553750Z",
      "url": "https://files.pythonhosted.org/packages/40/65/e38e9854e1955187a22d9ecce3ca935f0297f005b0ec0c1ea4436f035752/camera_z_transition-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcbc4026849d91f0f90db2be31fb11133d1dfd9b2c39c5907c1f04596c701f8c",
        "md5": "6004ed8ac7e8ad6b006cc5b191536542",
        "sha256": "65e707dbdd5f4bda15dc5bd918bee989ae6fd37b418b5636ed4ba29f3910177f"
      },
      "downloads": -1,
      "filename": "camera-z-transition-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6004ed8ac7e8ad6b006cc5b191536542",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4239,
      "upload_time": "2020-09-05T11:56:46",
      "upload_time_iso_8601": "2020-09-05T11:56:46.072333Z",
      "url": "https://files.pythonhosted.org/packages/fc/bc/4026849d91f0f90db2be31fb11133d1dfd9b2c39c5907c1f04596c701f8c/camera-z-transition-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}