{
  "info": {
    "author": "Shikha Pandey",
    "author_email": "shikha.py36@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Competitive Programming Algorithm Library in Python\r\n\r\ncompetitivepython is a library of algorithms and data structures implemented in Python. It is designed to be a useful resource for developers who need to implement common algorithms and data structures in their projects.\r\n\r\n## Features\r\n\r\n- Implements a wide range of algorithms and data structures, including:\r\n  - Searches: Binary Search, Linear Search, KMP Pattern Search\r\n  - Graphs: BFS, DFS, Dijkstra\r\n  - Sorting: Bubble Sort, Insertion Sort, Shell Sort, Selection Sort, Bucket Sort, Merge Sort, Tim Sort, Quick Sort, Heap Sort, Radix Sort\r\n  - Trees: Binary Search Tree\r\n- Easy to use and understand, with well-documented code\r\n- Portable and compatible with Python 3\r\n- Open source and available under the MIT license\r\n\r\n## Installation\r\n\r\nTo install competitivepython library, simply run the following command:\r\n\r\n```\r\n  pip install competitivepython\r\n  ```\r\n\r\n## Usage\r\n\r\nTo use PyPy in your project, simply import the desired algorithm or data structure and use it as needed. For example:\r\n\r\n- searches implementation example\r\n    ```\r\n    from competitivepython import searches\r\n\r\n    result = searches.binary_search([1, 2, 3, 4, 5], 3)\r\n    result2 = searches.linear_search([5, 7, 9, 2, 4, 10], 4)\r\n    txt = \"ABABDABACDABABCABAB\"\r\n    pat = \"ABABCABAB\"\r\n    result3 = searches.kmp_search(pat,txt)\r\n    print(result)  # Output: 2\r\n    print(result2)  # Output: 4\r\n    print(result3) # Output: [10]\r\n    ```\r\n\r\n- sorting implementation example\r\n    ```\r\n    from competitivepython import sorting\r\n\r\n    arr = [112, 6, 7, 12, 15]\r\n\r\n    res = sorting.bubble_sort(arr)\r\n    res1 = sorting.bucket_sort(arr)\r\n    res2 = sorting.heap_sort(arr)\r\n    res3 = sorting.insertion_sort(arr)\r\n    res4 = sorting.merge_sort(arr)\r\n    res5 = sorting.quick_sort(arr)\r\n    res6 = sorting.radix_sort(arr)\r\n    res7 = sorting.selection_sort(arr)\r\n    res8 = sorting.shell_sort(arr)\r\n    res9 = sorting.tim_sort(arr)\r\n\r\n    print('bubble sort:', res, 'bucket sort:', res1, 'heap sort:', res2, 'insertion sort:', res3, 'merge sort:', res4,\r\n        'quick sort:', res5, 'radix sort:', res6, 'selection sort:', res7, 'shell sort:', res8, 'tim sort:', res9)\r\n\r\n    ''' Output --- \r\n     bubble sort: [6, 7, 12, 15, 112] bucket sort: [6, 7, 12, 15, 112] heap sort: [6, 7, 12, 15, 112] \r\n    insertion sort: [6, 7, 12, 15, 112] merge sort: [6, 7, 12, 15, 112] quick sort: [6, 7, 12, 15, 112] \r\n    radix sort: [6, 7, 12, # 15, 112] selection sort: [6, 7, 12, 15, 112] shell sort: [6, 7, 12, 15, 112] \r\n    tim sort: [6, 7, 12, 15, 112]\r\n    '''\r\n    ```\r\n\r\n-  graphs implementation example\r\n    ```\r\n    from competitivepython import graphs\r\n\r\n    graph = {\r\n        'A': {'B': 1, 'C': 4},\r\n        'B': {'A': 1, 'C': 2, 'D': 5},\r\n        'C': {'A': 4, 'B': 2, 'D': 1},\r\n        'D': {'B': 5, 'C': 1},\r\n    }\r\n    start = 'A'\r\n    end = 'D'\r\n\r\n    result = graphs.breadth_first_search(graph, 'C')\r\n    result2 = graphs.depth_first_search(graph, 'C')\r\n    result3 = graphs.dijkstra(graph, start, end)\r\n    print(\"bfs:\",result)\r\n    print(\"dfs:\",result2)\r\n    print(\"dijikstra:\",result3)\r\n\r\n    ''' Output--\r\n        bfs: {'B', 'D', 'C', 'A'}\r\n        dfs: {'B', 'D', 'C', 'A'}\r\n        dijikstra: {'distance': 4, 'path': ['B', 'C', 'D']}\r\n    '''\r\n    ```\r\n\r\n- trees implementation example\r\n\r\n    ```\r\n    from competitivepython import trees\r\n\r\n    # Create an instance of the BinarySearchTree\r\n    bst = trees.BinarySearchTree()\r\n\r\n    # Insert some values into the tree\r\n    bst.insert(50)\r\n    bst.insert(30)\r\n    bst.insert(20)\r\n    bst.insert(40)\r\n    bst.insert(70)\r\n    bst.insert(60)\r\n    bst.insert(80)\r\n\r\n    # Check if a value is present in the tree\r\n    print(bst.search(50)) # Output: True\r\n    print(bst.search(35)) # Output: False\r\n\r\n    # Get the values in the tree in in-order traversal order\r\n    print(bst.get_in_order_traversal()) # Output: [20, 30, 40, 50, 60, 70, 80]\r\n    ```\r\n\r\n## Contributing\r\n\r\nIf you would like to contribute to the competitivepython project, please refer to the contributing guidelines. We welcome contributions of all types, including bug reports, feature requests, and code contributions.\r\n\r\n## License\r\n\r\ncompetitivepython is open source software released under the MIT license. Refer to the LICENSE file for more information.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Shikha-code36/Competitive-Python",
    "keywords": "competitive programming algorithm,python,data-structures,algorithms,searching-algorithm,sorting-algorithm,graphs,binary-search tree",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "competitivepython",
    "package_url": "https://pypi.org/project/competitivepython/",
    "platform": null,
    "project_url": "https://pypi.org/project/competitivepython/",
    "project_urls": {
      "Homepage": "https://github.com/Shikha-code36/Competitive-Python"
    },
    "release_url": "https://pypi.org/project/competitivepython/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of algorithms for competitive programming",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16853321,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bd9f585f19b9d20e6b802b7b4338a6aac10ebee558a6a003adb4498cc33a0dc",
          "md5": "a865c9ce24e5e19ca410d77afe3843fb",
          "sha256": "0480425a25c7c1f33fcb720bde99cb00d2ca5ff647613a14d5612933e94dfe82"
        },
        "downloads": -1,
        "filename": "competitivepython-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a865c9ce24e5e19ca410d77afe3843fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9897,
        "upload_time": "2023-02-14T09:02:41",
        "upload_time_iso_8601": "2023-02-14T09:02:41.988131Z",
        "url": "https://files.pythonhosted.org/packages/1b/d9/f585f19b9d20e6b802b7b4338a6aac10ebee558a6a003adb4498cc33a0dc/competitivepython-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bd9f585f19b9d20e6b802b7b4338a6aac10ebee558a6a003adb4498cc33a0dc",
        "md5": "a865c9ce24e5e19ca410d77afe3843fb",
        "sha256": "0480425a25c7c1f33fcb720bde99cb00d2ca5ff647613a14d5612933e94dfe82"
      },
      "downloads": -1,
      "filename": "competitivepython-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a865c9ce24e5e19ca410d77afe3843fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9897,
      "upload_time": "2023-02-14T09:02:41",
      "upload_time_iso_8601": "2023-02-14T09:02:41.988131Z",
      "url": "https://files.pythonhosted.org/packages/1b/d9/f585f19b9d20e6b802b7b4338a6aac10ebee558a6a003adb4498cc33a0dc/competitivepython-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}