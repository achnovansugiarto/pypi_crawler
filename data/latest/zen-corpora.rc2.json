{
  "info": {
    "author": "Kei Nemoto",
    "author_email": "kei.nemoto28@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "Zen-corpora\n-----------\n\nDescription\n-----------\nZen-corpora provides two main funcitonalities:\n- A memory efficient way to store unique sentences in corpus.\n- Beam text search with RNN model in PyTorch.\n\nInstallation\n------------\nThis module requires Python 3.7+. Please install it by running:\n```bash\npip install zen-corpora\n```\n\nWhy Zen-corpora?\n----------------\nThink about how Python stores the corpus below:\n```python\ncorpus = [['I', 'have', 'a', 'pen'],\n          ['I', 'have', 'a', 'dog'],\n          ['I', 'have', 'a', 'cat'],\n          ['I', 'have', 'a', 'tie']]\n```\nIt stores each sentence separately, but it's wasting the memory by storing \"I have a \" 4 times.\n\nZen-corpora solves this problem by storing sentences in a corpus-level trie. For example, the corpus above will be stored as\n```bash\n|-- I -- have -- a\n      \t         |-- pen\n\t\t             |-- dog\n                 |-- cat\n\t               |-- tie\n```\nIn this way, we can save lots of memory space and sentence search can be a lot faster!\n\nZen-corpora provides Python API to easily construct and interact with a corpus trie. See the following example:\n```python\n>>> import zencorpora\n>>> from zencorpora.corpustrie import CorpusTrie\n>>> corpus = [['I', 'have', 'a', 'pen'],\n...           ['I', 'have', 'a', 'dog'],\n...           ['I', 'have', 'a', 'cat'],\n...           ['I', 'have', 'a', 'tie']]\n>>> trie = CorpusTrie(corpus=corpus)\n>>> print(len(trie))\n7\n>>> print(['I', 'have', 'a', 'pen'] in trie)\nTrue\n>>> print(['I', 'have', 'a', 'sen'] in trie)\nFalse\n>>> trie.insert(['I', 'have', 'a', 'book'])\n>>> print(['I', 'have', 'a', 'book'] in trie)\nTrue\n>>> print(trie.remove(['I', 'have', 'a', 'book']))\n1\n>>> print(['I', 'have', 'a', 'book'] in trie)\nFalse\n>>> print(trie.remove(['I', 'have', 'a', 'caw']))\n-1\n>>> print(trie.make_list())\n[['i', 'have', 'a', 'pen'], ['i', 'have', 'a', 'dog'], ['i', 'have', 'a', 'cat'], ['i', 'have', 'a', 'tie']]\n```\n\nLeft-to-Right Beam Text Search\n------------------------------\nAs shown in SmartReply paper by [Kannan et al. (2016)](https://www.kdd.org/kdd2016/papers/files/Paper_1069.pdf), corpus trie can be used to perform left-to-right beam search using RNN model.\nA model encodes input text, then it computes the probability of each pre-defined sentence in the searching space given the encoded input.\nHowever, this process is exhaustive. What if we have 1 million sentences in the search space? Without beam search, a RNN model processes 1 million sentences.\nThus, the authors used the corpus trie to perform a beam search for their pre-defined sentences.\nThe idea is simple, it starts search from the root of the trie. Then, it only retains beam width number of probable sentences at each level.\n\nZen-corpora provides a class to enable beam search. See the example below.\n```python\n>>> import torch.nn as nn\n>>> import torch\n>>> import os\n>>> from zencorpora import SearchSpace\n>>> corpus_path = os.path.join('data', 'search_space.csv')\n>>> data = ... # assume data contains torchtext Field, encoder and decoder\n>>> space = SearchSpace(\n...    src_field=data.input_field,\n...    trg_field=data.output_field,\n...    encoder=data.model.encoder,\n...    decoder=data.model.decoder,\n...    corpus_path=corpus_path,\n...    hide_progress=False,\n...    score_function=nn.functional.log_softmax,\n...    device=torch.device('cpu'),\n... ) # you can hide a progress bar by setting hide_progress = False\nConstruct Corpus Trie: 100%|...| 34105/34105 [00:01<00:00, 21732.69 sentence/s]\n>>> src = ['this', 'is', 'test']\n>>> result = space.beam_search(src, 2)\n>>> print(len(result))\n2\n>>> print(result)\n[('is this test?', 1.0), ('this is test!', 1.0)]\n>>> result = space.beam_search(src, 100)\n>>> print(len(result))\n100\n```\n\nLicense\n-------\nThis project is licensed under Apache 2.0.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/box-key/zen-corpora",
    "keywords": "text search,natural language understanding,beam search,recurrent neural network,language modeling",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zen-corpora",
    "package_url": "https://pypi.org/project/zen-corpora/",
    "platform": "",
    "project_url": "https://pypi.org/project/zen-corpora/",
    "project_urls": {
      "Homepage": "https://github.com/box-key/zen-corpora"
    },
    "release_url": "https://pypi.org/project/zen-corpora/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "corpus-level trie to store corpus efficiently and speed up sentence search",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7257425,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b869e826db7a33c25bee3a13f205893e283881b6e01b96187ecb1479376c9b6d",
          "md5": "51878f6dc68cbc5296350d6073562386",
          "sha256": "5a08e902a9374a64087058e00f85220ac7349b031c447942b375d2974d86164e"
        },
        "downloads": -1,
        "filename": "zen-corpora-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51878f6dc68cbc5296350d6073562386",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14976,
        "upload_time": "2020-05-12T04:21:03",
        "upload_time_iso_8601": "2020-05-12T04:21:03.390055Z",
        "url": "https://files.pythonhosted.org/packages/b8/69/e826db7a33c25bee3a13f205893e283881b6e01b96187ecb1479376c9b6d/zen-corpora-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0a87f3eeaac6eb3d60647a6c2db18519deff3bf0f5a979e445e3a87616ae8f5",
          "md5": "103e68ea11bd90a12301e3bd41652c74",
          "sha256": "7bc0826834742ee620c8d9831ef24a2f5ed7c9736bb8dd046417c273722c9d36"
        },
        "downloads": -1,
        "filename": "zen-corpora-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "103e68ea11bd90a12301e3bd41652c74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14573,
        "upload_time": "2020-05-16T19:21:57",
        "upload_time_iso_8601": "2020-05-16T19:21:57.715386Z",
        "url": "https://files.pythonhosted.org/packages/d0/a8/7f3eeaac6eb3d60647a6c2db18519deff3bf0f5a979e445e3a87616ae8f5/zen-corpora-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0a87f3eeaac6eb3d60647a6c2db18519deff3bf0f5a979e445e3a87616ae8f5",
        "md5": "103e68ea11bd90a12301e3bd41652c74",
        "sha256": "7bc0826834742ee620c8d9831ef24a2f5ed7c9736bb8dd046417c273722c9d36"
      },
      "downloads": -1,
      "filename": "zen-corpora-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "103e68ea11bd90a12301e3bd41652c74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14573,
      "upload_time": "2020-05-16T19:21:57",
      "upload_time_iso_8601": "2020-05-16T19:21:57.715386Z",
      "url": "https://files.pythonhosted.org/packages/d0/a8/7f3eeaac6eb3d60647a6c2db18519deff3bf0f5a979e445e3a87616ae8f5/zen-corpora-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}