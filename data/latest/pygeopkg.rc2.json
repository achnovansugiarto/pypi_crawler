{
  "info": {
    "author": "Integrated Informatics Inc.",
    "author_email": "gis@integrated-informatics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pygeopkg\n\n**pygeopkg** is a Python compatible library that allows for the creation and\npopulation of (*write-to*) an OGC GeoPackage database, including creating features within this resource. GeoPackages can be opened and viewed software solutions built for viewing and analyzing spatial data, including ArcGIS and QGIS. \n\nFor more details on OGC GeoPackages, please see the [OGC web page](http://www.geopackage.org/).\n\n\n## Installation\n\n**pygeopkg** was created to work as a packaged sub-respository in a larger\nPython library. As such, users should simply add this repository as\na sub-repository via git to their main repository or download the files and\nadd them to their projects as they see fit.\n\n\n### Python Compatibility\n\nThe **pygeopkg** library is compatible with Python 2+ and Python 3+.\n\n\n## Usage\n\n**pygeopkg** can be used to: \n* Create a new empty GeoPackage from scratch.\n* Create new Feature Classes within a GeoPackage.\n* Populate Feature Classes with geometry and attributes. (see **Steps 3 & 4**)\n\n\n### Step 1 - Create An Empty GeoPackage\n\n```python\nfrom pygeopkg.core.geopkg import GeoPackage\n\n# Creates an empty geopackage\ngpkg = GeoPackage.create(r'c:\\temp\\test.gpkg')\n```\n\nGeopackages are created with *three* default Spatial References defined\nautomatically, a pair of Spatial References to handle undefined cases,\nand a WGS 84 entry. \n\nThe definition of the WGS84 entry is flexible - meaning that the *WKT for WGS84* can be setup per the users liking. As an example, use with Esri's ArcGIS means either using the *EPSG WKT* or the *ESRI WKT*. By\ndefault the *ESRI WKT* is used - However, if *EPSG WKT* is desired, you\nmay provide a ``flavor`` parameter to the create method specifying EPSG.\n\n```\n# Creates an empty geopackage\ngpkg = GeoPackage.create(r'c:\\temp\\test.gpkg', flavor='EPSG')\n```\n\n\n### Step 2 - Create A New Feature Class\n\nTo create a new Feature Class in the empty GeoPackage, you will need\nto tell the GeoPackage the Spatial Reference of the Feature Class\nand the schema (e.g., fields) to be available in the Feature Class.\n\nA Feature Class can be created with *Z* or *M* (or both) enabled. If \neither of these options are enabled, the geometry inserted into the \nFeature Class **must** include a value for the option specified.\n\n```python\nfrom pygeopkg.core.geopkg import GeoPackage\nfrom pygeopkg.core.srs import SRS\nfrom pygeopkg.core.field import Field\nfrom pygeopkg.shared.enumeration import GeometryType, SQLFieldTypes\n\ngpkg = GeoPackage.create(r'c:\\temp\\test.gpkg')\n\nsrs_wkt = (\n    'PROJCS[\"WGS_1984_UTM_Zone_23N\",'\n    'GEOGCS[\"GCS_WGS_1984\",'\n    'DATUM[\"D_WGS_1984\",'\n    'SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],'\n    'PRIMEM[\"Greenwich\",0.0],'\n    'UNIT[\"Degree\",0.0174532925199433]],'\n    'PROJECTION[\"Transverse_Mercator\"],'\n    'PARAMETER[\"False_Easting\",500000.0],'\n    'PARAMETER[\"False_Northing\",0.0],'\n    'PARAMETER[\"Central_Meridian\",-45.0],'\n    'PARAMETER[\"Scale_Factor\",0.9996],'\n    'PARAMETER[\"Latitude_Of_Origin\",0.0],'\n    'UNIT[\"Meter\",1.0]]')\n\nsrs = SRS('WGS_1984_UTM_Zone_23N', 'EPSG', 32623, srs_wkt)\nfields = (\n    Field('int_fld', SQLFieldTypes.integer),\n    Field('text_fld', SQLFieldTypes.text),\n    Field('test_fld_size', SQLFieldTypes.text, 100),\n    Field('test_bool', SQLFieldTypes.boolean))\n\nfc = gpkg.create_feature_class(\n    'test', srs, fields=fields, shape_type=GeometryType.point)\n```\n\n\n#### About Spatial References For GeoPackages\n\nSpatial References in GeoPackages are somewhat loosely defined. You\nmay provide a Spatial Reference of any definition and from any\nauthority - be that EPSG, ESRI, or another source. This library follows\nthis lead and has no restriction on the definitions provided. However,\nit should be noted that if you would like Feature Classes to\nbe readable by major software packages, you should provide a\ndefinition which the software can read appropriately. For example, our testing\nhas found that ArcMap prefers definitions corresponding to its\nown WKT format.\n\nA very simple Spatial Reference object is provided with this package\nfor convenience. It requires the name, authority, Spatial Reference ID,\nand Spatial Reference well known text. This object should be used when\ncreating a Feature Class.\n\n\n### Step 3 - Insert Records Into A Feature Class\n\nRecords can be inserted into a Feature Class using the ``insert_rows`` \nmethod. This method inserts all the rows with a single sql call to \nget the best performance.\n\nGeometry fields on **gpkg** Feature Classes created by this code base will\nalways be named ``SHAPE``. Geometry inserted into this field must always\nbe *WKB*. To create *WKB*, use the utility functions from the conversion \nsubpackage. Currently utility functions exists to handle points, lines\nand polygons (including *Z* and *M* varieties).\n\nThis example shows the creation of a random point Feature Class and\nbuilds upon the code from previous examples. Note that the create Feature Class\nportion of the code is omitted...\n\n```python\nfrom random import choice, randint\nfrom string import ascii_uppercase, digits\nfrom pygeopkg.conversion.to_geopkg_geom import (\n    point_to_gpkg_point, make_gpkg_geom_header)\nfrom pygeopkg.shared.constants import SHAPE\nfrom pygeopkg.core.geopkg import GeoPackage\n\n# NOTE: Builds from previous examples \n# and assumes existing GeoPackage and feature class!\n\ngpkg = GeoPackage(r'c:\\temp\\test.gpkg')\nfc = gpkg.get_feature_class('test')\n\n# Field objects can also be used\nfield_names = [SHAPE, 'int_fld', 'text_fld']\n\n# Generate the geometry header once because it is always the same\npoint_geom_hdr = make_gpkg_geom_header(fc.srs.srs_id)\n\n# Generate some random points and attributes\nrows = []\nfor i in range(10000):\n    rand_str = ''.join(choice(ascii_uppercase + digits) for _ in range(10))\n    rand_int = randint(0, 1000)\n    rand_x = randint(300000, 600000)\n    rand_y = randint(1, 100000)\n    wkb = point_to_gpkg_point(point_geom_hdr, rand_x, rand_y)\n    rows.append((wkb, rand_int, rand_str))\n\nfc.insert_rows(field_names, rows)\n```\n\n\n### Step 4 - Creating OGC Geometry Well Known Binaries\n\nAs mentioned, this library supports the creation of point, line, and \npolygon well known binaries. Functions supporting these capabilities \ncan be found in ``pygeopkg.conversion.to_geopkg_geom``. \n\nExamples are provided below and further examples can be found in the \ntests. See code documentation for more details as warranted.\n\nIt is important to note that *Z* and *M* capabilities are defined at the\ntime a Feature Class is created. If a Feature Class is *Z* or *M* enabled,\nthen a value must be provided for that value. Be sure to pick the \ncorrect conversion function depending on the *Z* and *M* combination \ndesired.\n\n\n#### Point Example\n\nA binary header with srs details is always needed but (in **pygeopkg**) \nis the same for all features in a Feature Class. For best performance,\ncreate this once. \n\n```python\n# Point in WGS 84\nx, y = -119, 34\nhdr = make_gpkg_geom_header(4326)\ngpkg_wkb = point_to_gpkg_point(hdr, x, y)\n```\n\n\n#### Line Example\n\nThe utility function for creating lines expects a list of points \nrepresenting its vertices.\n\n```python\n# Line with ZM Values for use with UTM Zone 23N (WGS 84)\nline = [(300000, 1, 10, 0), (300000, 4000000, 20, 1000),\n        (700000, 4000000, 30, 2000), (700000, 1, 40, 3000)]\nhdr = make_gpkg_geom_header(32623)\ngpkg_wkb = points_zm_to_gpkg_line_string_zm(hdr, line)\n```\n\n\n#### Polygon Example\n\nThe utility function for creating regular polygons expects a list of \nrings where a ring is simply the list of points it contains.\n\n```python\nrings = [[(300000, 1), (300000, 4000000), (700000, 4000000),\n          (700000, 1), (300000, 1)]]\nhdr = make_gpkg_geom_header(32623)\ngpkg_wkb = point_lists_to_gpkg_polygon(hdr, rings)\n```\n\n\n## Roadmap\n\n* Write unpackers so that this package can be used to extract data\n  from GeoPackages. Focus is currently on writing. Unpackers specific\n  to this package exist for testing only.\n* Write a more thorough implementation of the individual geometry headers.\n\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/realiii/pygeopkg",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygeopkg",
    "package_url": "https://pypi.org/project/pygeopkg/",
    "platform": "",
    "project_url": "https://pypi.org/project/pygeopkg/",
    "project_urls": {
      "Homepage": "https://github.com/realiii/pygeopkg"
    },
    "release_url": "https://pypi.org/project/pygeopkg/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library that allows for the creation and population of OGC GeoPackage databases with write access",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11487903,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef266830e188aa139aec5646492f893e116f0005545260f75e597f4eca138078",
          "md5": "f36083b274040716e3da6e2d758f76cf",
          "sha256": "a82fa64da12c16379c36120b82cbc8b9a29967e72099ee78d5ca40bd917154b8"
        },
        "downloads": -1,
        "filename": "pygeopkg-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f36083b274040716e3da6e2d758f76cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19441,
        "upload_time": "2021-09-18T20:04:29",
        "upload_time_iso_8601": "2021-09-18T20:04:29.844657Z",
        "url": "https://files.pythonhosted.org/packages/ef/26/6830e188aa139aec5646492f893e116f0005545260f75e597f4eca138078/pygeopkg-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c1c308ed8f7ffd10f9528e219e217f2bf0e2a091c90ed3e90ec3af3b41f3558",
          "md5": "f7f99b8e4ffb72e2d01e41e4f10be003",
          "sha256": "ff35fa0ab80126f05bffbb11abc455e7d0e3eba55ff5292ab9310070f6b3c014"
        },
        "downloads": -1,
        "filename": "pygeopkg-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7f99b8e4ffb72e2d01e41e4f10be003",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19445,
        "upload_time": "2021-09-18T20:05:27",
        "upload_time_iso_8601": "2021-09-18T20:05:27.522475Z",
        "url": "https://files.pythonhosted.org/packages/9c/1c/308ed8f7ffd10f9528e219e217f2bf0e2a091c90ed3e90ec3af3b41f3558/pygeopkg-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "892990242783c1f79f8b465c5a09a5dd5040f1340ac8680740c49f53c09b92d4",
          "md5": "8394b92a67ab684db9acc1847e80606a",
          "sha256": "fe2e00566a71fefdd134e885fbd9c4a21704fd928e943fc807966f8fb6b8da64"
        },
        "downloads": -1,
        "filename": "pygeopkg-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8394b92a67ab684db9acc1847e80606a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19115,
        "upload_time": "2021-09-18T20:05:28",
        "upload_time_iso_8601": "2021-09-18T20:05:28.746787Z",
        "url": "https://files.pythonhosted.org/packages/89/29/90242783c1f79f8b465c5a09a5dd5040f1340ac8680740c49f53c09b92d4/pygeopkg-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c1c308ed8f7ffd10f9528e219e217f2bf0e2a091c90ed3e90ec3af3b41f3558",
        "md5": "f7f99b8e4ffb72e2d01e41e4f10be003",
        "sha256": "ff35fa0ab80126f05bffbb11abc455e7d0e3eba55ff5292ab9310070f6b3c014"
      },
      "downloads": -1,
      "filename": "pygeopkg-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7f99b8e4ffb72e2d01e41e4f10be003",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19445,
      "upload_time": "2021-09-18T20:05:27",
      "upload_time_iso_8601": "2021-09-18T20:05:27.522475Z",
      "url": "https://files.pythonhosted.org/packages/9c/1c/308ed8f7ffd10f9528e219e217f2bf0e2a091c90ed3e90ec3af3b41f3558/pygeopkg-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "892990242783c1f79f8b465c5a09a5dd5040f1340ac8680740c49f53c09b92d4",
        "md5": "8394b92a67ab684db9acc1847e80606a",
        "sha256": "fe2e00566a71fefdd134e885fbd9c4a21704fd928e943fc807966f8fb6b8da64"
      },
      "downloads": -1,
      "filename": "pygeopkg-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8394b92a67ab684db9acc1847e80606a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19115,
      "upload_time": "2021-09-18T20:05:28",
      "upload_time_iso_8601": "2021-09-18T20:05:28.746787Z",
      "url": "https://files.pythonhosted.org/packages/89/29/90242783c1f79f8b465c5a09a5dd5040f1340ac8680740c49f53c09b92d4/pygeopkg-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}