{
  "info": {
    "author": "Komissarov Andrey",
    "author_email": "Komissar.off.andrey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# BINARY PACKER #\n\nLight and fast packer python dataclasses to bytes\n\n[![Build Status](https://app.travis-ci.com/moff4/packer.svg?token=NypENqxc3msyxJUab3w4&branch=master)](https://app.travis-ci.com/moff4/packer)\n[![CodeFactor](https://www.codefactor.io/repository/github/moff4/packer/badge?s=e9364aaef867be60363f528cdb9c58eaf7c1c64b)](https://www.codefactor.io/repository/github/moff4/packer)\n\n\n## Install\n\n\n## How it works\n\nIt's a wrap! A wrap over stdlib [struct](https://docs.python.org/3/library/struct.html)  \nSo it converts values into bytes using `struct.pack()`.  \nBut it does not save keys and values' types in bytes, so be sure about how you configure packer for packing and unpacking. \n\n## Why and when should it be used?\n\nWe all like to use json/xml/pickle and other popular libraries for dumping data, but sometimes they are too slow or result's size ot too large.  \nThis library works much faster than other packers like json and makes result a lot more compact.\n\n## Example of Usage\n\n```python\nimport uuid\nfrom typing import Optional\nfrom dataclasses import dataclass\n\nfrom binary_packer import PackerFactory, FieldStruct\n\n\n@dataclass\nclass Person:\n    id: uuid.UUID\n    name: Optional[str] = None  # max length is 20 bytes\n    age: Optional[int] = None\n\nperson = Person(id=uuid.uuid4(), name='vaschevsky', age=33)\n\n\nfactory = PackerFactory(\n    Person,\n    id=FieldStruct[uuid.UUID, bytes](\n        '16s',  # '16s' is for bytearray length of 16, uuid as bytearray also 16 bytes\n        encoder=lambda uid: uid.bytes,\n        decoder=lambda uid_as_bytes: uuid.UUID(bytes=uid_as_bytes),\n    ),\n    name=FieldStruct[str, bytes](\n        '20s',  # '20s' is for bytearray length of 20, each byte is ascii char\n        encoder=lambda name: name.encode(),\n        decoder=lambda name_as_bytes: name_as_bytes.decode().strip('\\x00'),\n    ),\n    age=FieldStruct[int, int](\n        'B',  #  'B' is for unsigned tiny int (1 byte) => age can be any value from 0 to 255,\n        # no need for custom encoder/decoder\n    )\n)\n\npacker_1 = factory.make_packer('id', 'name', 'age')\npacker_2 = factory.make_packer('id', 'name')\npacker_3 = factory.make_packer('id')\n\nfor packer in (packer_1, packer_2, packer_3):\n    data_as_bytes = packer.pack(person)\n    print(f'{len(data_as_bytes)=}')\n    unpacked_person = packer.unpack(data_as_bytes)\n    print(f'{unpacked_person=}')\n\n# will be printed:\n# len(data_as_bytes)=37\n# unpacked_person=Person(id=UUID('a72decb7-7f9e-497b-ac91-692e316a7580'), name='vaschevsky', age=33)\n# len(data_as_bytes)=36\n# unpacked_person=Person(id=UUID('a72decb7-7f9e-497b-ac91-692e316a7580'), name='vaschevsky', age=None)\n# len(data_as_bytes)=16\n# unpacked_person=Person(id=UUID('a72decb7-7f9e-497b-ac91-692e316a7580'), name=None, age=None)\n```\n\n\n[![Buy Me A Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/komissarov)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moff4/packer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "binary-packer",
    "package_url": "https://pypi.org/project/binary-packer/",
    "platform": null,
    "project_url": "https://pypi.org/project/binary-packer/",
    "project_urls": {
      "Homepage": "https://github.com/moff4/packer"
    },
    "release_url": "https://pypi.org/project/binary-packer/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Light and fast packer dataclasses to binary",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15607951,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7209a5db7d119a2dd25c5b3a4d1e9aafb81118e71e23c75de0f0da2dcf5b371a",
          "md5": "83540c1bc454ba9c099db99afcace4c2",
          "sha256": "d4c429221c101de8fe58f55c4c8218d9c0cb5b2e2b56fa9b82980c27179fe8d9"
        },
        "downloads": -1,
        "filename": "binary_packer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83540c1bc454ba9c099db99afcace4c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5523,
        "upload_time": "2022-11-01T09:15:40",
        "upload_time_iso_8601": "2022-11-01T09:15:40.895168Z",
        "url": "https://files.pythonhosted.org/packages/72/09/a5db7d119a2dd25c5b3a4d1e9aafb81118e71e23c75de0f0da2dcf5b371a/binary_packer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8bf78d32326e9e79f092d158adbf6726a90d19c7047685dd68a55132f8949c3",
          "md5": "d94c2c0ff41fac6fa01c9111e9c9a61d",
          "sha256": "f9eb91c78ddd0698a9023b2c8cc87165864dcb6187364ca0b7a397723466263d"
        },
        "downloads": -1,
        "filename": "binary_packer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d94c2c0ff41fac6fa01c9111e9c9a61d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5330,
        "upload_time": "2022-11-01T09:15:42",
        "upload_time_iso_8601": "2022-11-01T09:15:42.712652Z",
        "url": "https://files.pythonhosted.org/packages/b8/bf/78d32326e9e79f092d158adbf6726a90d19c7047685dd68a55132f8949c3/binary_packer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20c87e79c3e27f5ef14408159043af43adfc6ac790bdc56bb0cb4fca4b278366",
          "md5": "f39b17195eadb0648cb32fa5b1a74fb9",
          "sha256": "60063d4c32c6c8e6de35c4aa5f7d5d23ba099934a620b76d9083939722409f2c"
        },
        "downloads": -1,
        "filename": "binary_packer-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f39b17195eadb0648cb32fa5b1a74fb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5585,
        "upload_time": "2022-11-01T09:17:22",
        "upload_time_iso_8601": "2022-11-01T09:17:22.095794Z",
        "url": "https://files.pythonhosted.org/packages/20/c8/7e79c3e27f5ef14408159043af43adfc6ac790bdc56bb0cb4fca4b278366/binary_packer-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a6916e53f8e0c5cfb24adb47b627928b6e1119f4a5b1f830f650971ddcf0d44",
          "md5": "b49ccadc625ca1ca814169d3c70cd612",
          "sha256": "d72af2dc6de8653d6f9bddfb0741589db9322c0ad1199769f70f60c9bfd019ca"
        },
        "downloads": -1,
        "filename": "binary_packer-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b49ccadc625ca1ca814169d3c70cd612",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5390,
        "upload_time": "2022-11-01T09:17:23",
        "upload_time_iso_8601": "2022-11-01T09:17:23.519876Z",
        "url": "https://files.pythonhosted.org/packages/3a/69/16e53f8e0c5cfb24adb47b627928b6e1119f4a5b1f830f650971ddcf0d44/binary_packer-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20c87e79c3e27f5ef14408159043af43adfc6ac790bdc56bb0cb4fca4b278366",
        "md5": "f39b17195eadb0648cb32fa5b1a74fb9",
        "sha256": "60063d4c32c6c8e6de35c4aa5f7d5d23ba099934a620b76d9083939722409f2c"
      },
      "downloads": -1,
      "filename": "binary_packer-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f39b17195eadb0648cb32fa5b1a74fb9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5585,
      "upload_time": "2022-11-01T09:17:22",
      "upload_time_iso_8601": "2022-11-01T09:17:22.095794Z",
      "url": "https://files.pythonhosted.org/packages/20/c8/7e79c3e27f5ef14408159043af43adfc6ac790bdc56bb0cb4fca4b278366/binary_packer-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a6916e53f8e0c5cfb24adb47b627928b6e1119f4a5b1f830f650971ddcf0d44",
        "md5": "b49ccadc625ca1ca814169d3c70cd612",
        "sha256": "d72af2dc6de8653d6f9bddfb0741589db9322c0ad1199769f70f60c9bfd019ca"
      },
      "downloads": -1,
      "filename": "binary_packer-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b49ccadc625ca1ca814169d3c70cd612",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5390,
      "upload_time": "2022-11-01T09:17:23",
      "upload_time_iso_8601": "2022-11-01T09:17:23.519876Z",
      "url": "https://files.pythonhosted.org/packages/3a/69/16e53f8e0c5cfb24adb47b627928b6e1119f4a5b1f830f650971ddcf0d44/binary_packer-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}