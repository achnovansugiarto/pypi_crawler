{
  "info": {
    "author": "",
    "author_email": "Andres Hyer <andreshyer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Installation\n\n`pip install fourier-laplace`\n\n# Usage\n\n```python\nfrom numpy import arange\nfrom fourier_laplace import FourierProfile\n\n# 0.1 <= Bo <= 0.35\nestimator = FourierProfile(bond_number=0.2)\n\n# 0 <= z <= 5\nz = arange(0, 2, 1e-1)\nx = estimator.estimate(z=z) # Predicted x\n\n# Normalize profile (so that true x_max = 1)\nmax_x = estimator.get_max_x()\nz = z / max_x\nx = x / max_x\n```\n\n# Background\n\nThe Young-Laplace equation describes the pressure difference across a curved interface between two immiscible fluids, \nsuch as a liquid drop or bubble.\n\n$$\\Delta P = \\frac{1}{\\gamma}(\\frac{1}{R_1} + \\frac{1}{R_2})$$\n\nIn the case of axis-symmetric drops, \nthe above equation can be translated into a system of first order differential equation.\n\n$$\\frac{d \\phi}{d s} = 2 - Bo z - \\frac{\\sin \\phi}{x}$$\n\n$$\\frac{d x}{d s} = \\cos \\phi$$\n\n$$\\frac{d z}{d s} = \\sin \\phi$$\n\nWith the boundary condition\n\n$$\\phi(s=0)=x(s=0)=z(s=0)=0$$\n\nThe bond number, $Bo$, represents the balance of forces between gravity and surface tension.\n\n$$Bo = \\frac{\\Delta \\rho g a^2}{\\gamma}$$\n\nWhere $a$ is the characteristic length. \nThen to  calculate a point map (x, z) from the equations above,\nthe set of differential equations have to be solved through numerical means.\n\n# Improved Method\n\nThe surface tension can only accurately be calculated from the $Bo$ range of [0, 1]. \nOtherwise, gravity is the dominating force and not surface tension.\nIn practice, the true $Bo$ should be in the range [0.1, 0.35] for the most accurate measurements.\nFor any drop, the following relationship can written.\n\n$$x = f(z, Bo)$$\n\nWhere $f(z, Bo)$ is some generic function can be calculated from the equations above.\nUsing a fourier series, a generic function for $f(z, Bo)$ can be calculated.\n\n$$f(z, Bo) = \\frac{a_0}{2} + \\sum_{n=1}^{\\infty} a_n \\cos \\left( \\frac{2 \\pi n z}{P} \\right)+ b_n \\sin \\left( \\frac{2 \\pi n z}{P} \\right)$$\n\n$$a_n = \\frac{2}{P} \\int^{P}_{0} f(z, Bo) \\cos \\left( \\frac{2 \\pi n z}{P} \\right) dz$$\n\n$$b_n = \\frac{2}{P} \\int^{P}_{0} f(z, Bo) \\sin \\left( \\frac{2 \\pi n z}{P} \\right) dz$$\n\n$P$ is some artibary period at which the function is defined over, \nbut $z$ can theoretically be defined over any range.\nIn reality, z is typically only defined over the range [0, 5].\nOften times $z < 2$, \nbut there are some cases where z is defined at a larger values.\nThus, it is safe to assume that $P=5$.\nBut it can be seen above that $a_n$ and $b_n$ are only dependant on $Bo$,\nsince the dependance on z is integrated out.\n\n$$a_n = a_n(Bo)$$\n\n$$b_n = b_n(Bo)$$\n\nSince the range for $Bo$ is known, \na table can easily be made all the fourier constants for many $Bo$ values.\nThen interplotion can be used to calculate the new constants for a given Bo.\nThis means that generating the table is computationally very expensive,\nbut using it is very computationally cheap.\nThis is the basis for this codebase, and how a sigificant speed up is achieved.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fourier-laplace",
    "package_url": "https://pypi.org/project/fourier-laplace/",
    "platform": null,
    "project_url": "https://pypi.org/project/fourier-laplace/",
    "project_urls": {
      "Homepage": "https://github.com/andreshyer/fourier-laplace.git"
    },
    "release_url": "https://pypi.org/project/fourier-laplace/1.0.4/",
    "requires_dist": [
      "numpy (>=1.0.0)"
    ],
    "requires_python": ">=3.0",
    "summary": "A method of quickly calculating point maps of axis-symmetric drops.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17343351,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c72c85f8a799594a369ac59d4127004999dfcf3d6dd0191069cc0b234b2e353",
          "md5": "fb92edb596ce6666ae1cd769944ddfd8",
          "sha256": "128a9d689df418b713f29abda9d3097e848b80fb9ac01ea22909b0271c02e5ab"
        },
        "downloads": -1,
        "filename": "fourier_laplace-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb92edb596ce6666ae1cd769944ddfd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 9187797,
        "upload_time": "2023-03-18T05:30:19",
        "upload_time_iso_8601": "2023-03-18T05:30:19.451885Z",
        "url": "https://files.pythonhosted.org/packages/3c/72/c85f8a799594a369ac59d4127004999dfcf3d6dd0191069cc0b234b2e353/fourier_laplace-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9e79a65f9663443bb6ebd22bbd3451be4553672f23b344cb044d65d35bf2409",
          "md5": "bfb5477dc8e950cb2c0bb8c6a8c38e40",
          "sha256": "b6a2e9ebf676f4ebf1e60e083947c2c7a66cd0748e2aac8a42a954872e81b3dc"
        },
        "downloads": -1,
        "filename": "fourier_laplace-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bfb5477dc8e950cb2c0bb8c6a8c38e40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 9056866,
        "upload_time": "2023-03-18T05:30:24",
        "upload_time_iso_8601": "2023-03-18T05:30:24.023159Z",
        "url": "https://files.pythonhosted.org/packages/c9/e7/9a65f9663443bb6ebd22bbd3451be4553672f23b344cb044d65d35bf2409/fourier_laplace-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c72c85f8a799594a369ac59d4127004999dfcf3d6dd0191069cc0b234b2e353",
        "md5": "fb92edb596ce6666ae1cd769944ddfd8",
        "sha256": "128a9d689df418b713f29abda9d3097e848b80fb9ac01ea22909b0271c02e5ab"
      },
      "downloads": -1,
      "filename": "fourier_laplace-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb92edb596ce6666ae1cd769944ddfd8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 9187797,
      "upload_time": "2023-03-18T05:30:19",
      "upload_time_iso_8601": "2023-03-18T05:30:19.451885Z",
      "url": "https://files.pythonhosted.org/packages/3c/72/c85f8a799594a369ac59d4127004999dfcf3d6dd0191069cc0b234b2e353/fourier_laplace-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9e79a65f9663443bb6ebd22bbd3451be4553672f23b344cb044d65d35bf2409",
        "md5": "bfb5477dc8e950cb2c0bb8c6a8c38e40",
        "sha256": "b6a2e9ebf676f4ebf1e60e083947c2c7a66cd0748e2aac8a42a954872e81b3dc"
      },
      "downloads": -1,
      "filename": "fourier_laplace-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "bfb5477dc8e950cb2c0bb8c6a8c38e40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 9056866,
      "upload_time": "2023-03-18T05:30:24",
      "upload_time_iso_8601": "2023-03-18T05:30:24.023159Z",
      "url": "https://files.pythonhosted.org/packages/c9/e7/9a65f9663443bb6ebd22bbd3451be4553672f23b344cb044d65d35bf2409/fourier_laplace-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}