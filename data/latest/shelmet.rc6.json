{
  "info": {
    "author": "Derrick Gilland",
    "author_email": "dgilland@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "shelmet\n*******\n\n|version| |build| |coveralls| |license|\n\n\nA shell power-up for working with the file system and running subprocess commands.\n\n\nLinks\n=====\n\n- Project: https://github.com/dgilland/shelmet\n- Documentation: https://shelmet.readthedocs.io\n- PyPI: https://pypi.python.org/pypi/shelmet/\n- Github Actions: https://github.com/dgilland/shelmet/actions\n\n\nFeatures\n========\n\n- Run and define subprocess commands\n\n  - ``run``\n  - ``cmd``\n\n- Interact with files\n\n  - ``atomicdfile``, ``atomicdir``\n  - ``read``, ``readchunks``, ``readlines``, ``readtext``, ``readbytes``\n  - ``write``, ``writechunks``, ``writelines``, ``writetext``, ``writebytes``\n  - ``fsync``, ``dirsync``\n\n- Execute core shell operations\n\n  - ``cp``, ``mv``, ``mkdir``, ``touch``\n  - ``rm``, ``rmfile``, ``rmdir``\n  - ``ls``, ``lsfiles``, ``lsdirs``\n  - ``walk``, ``walkfiles``, ``walkdirs``\n\n- Archive and backup files\n\n  - ``archive``, ``unarchive``, ``lsarchive``\n  - ``backup``\n\n- Other utilities\n\n  - ``cd``\n  - ``environ``\n  - ``cwd``, ``homedir``\n  - and more!\n\n- 100% test coverage\n- Fully type-annotated\n- Python 3.6+\n\n\nQuickstart\n==========\n\nInstall using pip:\n\n\n::\n\n    pip3 install shelmet\n\n\nImport the ``sh`` module:\n\n.. code-block:: python\n\n    import shelmet as sh\n\n\nRun system commands:\n\n.. code-block:: python\n\n    # sh.run() is a wrapper around subprocess.run() that defaults to output capture, text-mode,\n    # exception raising on non-zero exit codes, environment variable extension instead of\n    # replacement, and support for passing command arguments as a variable number of strings\n    # instead of just a list of strings.\n    result = sh.run(\"ps\", \"aux\")\n    print(result.stdout)\n    print(result.stderr)\n\n    # stdout and stderr can be combined with...\n    result = sh.run(\"some\", \"command\", combine_output=True)\n\n    # or not captured at all...\n    sh.run(\"...\", capture_output=False)\n\n\nCreate reusable run commands that support chained commands like \"pipe\" ``|`` , \"and\" ``&&``, \"or\" ``||``, and \"after\" ``;``:\n\n.. code-block:: python\n\n    # sh.cmd() returns a sh.Command object that can be used to execute a fixed command.\n    ps_aux = sh.cmd(\"ps\", \"aux\")\n\n    # And has the option to pipe it's output into another command automatically.\n    grep_ps = ps_aux.pipe(\"grep\", \"-i\", check=False)\n    print(grep_ps.shell_cmd)\n    # ps aux | grep -i\n\n    search_result_1 = grep_ps.run(\"search term 1\")\n    print(search_result_1.stdout)\n\n    search_result_2 = grep_ps.run(\"search term 2\")\n    print(search_result_2.stdout)\n\n    # Equivalent to: mkdir foo && echo 'success' || echo 'failure'\n    sh.cmd(\"mkdir\", \"foo\").and_(\"echo\", \"success\").or_(\"echo\", \"failure\").run()\n\n\nPerform file system operations:\n\n.. code-block:: python\n\n    # Make directories and sub-directories. Behaves like \"$ mkdir -p\"\n    sh.mkdir(\"a\", \"b\", \"c\", \"d/e/f/g\")\n\n    # Context-manager to change working directory temporarily. Behaves like \"$ cd\".\n    with sh.cd(\"d/e/f/g\"):\n        sh.touch(\"1.txt\", \"2.txt\", \"3.txt\")\n\n        # Move files or directories. Works across file-systems. Behaves like \"$ mv\".\n        sh.mv(\"1.txt\", \"11.txt\")\n\n        # Copy files or directories. Behaves like \"$ cp -r\"\n        sh.cp(\"2.txt\", \"22.txt\")\n\n        # List top-level directory contents.\n        # NOTE: sh.ls() and its siblings return iterables.\n        list(sh.ls())\n\n        # Limit to files.\n        list(sh.lsfiles())\n\n        # Limit to directories.\n        list(sh.lsdirs())\n\n        # Remove files.\n        sh.rmfile(\"11.txt\", \"22.txt\", \"3.txt\")\n        # Or use sh.rm which handles both files and directories.\n        sh.rm(\"11.txt\", \"22.txt\", \"3.txt\")\n\n    # Recursively walk current directory.\n    # NOTE: sh.walk() and its siblings return iterables.\n    list(sh.walk())\n\n    # Or just a specified directory.\n    list(sh.walk(\"d\"))\n\n    # Or just it's files or directories.\n    list(sh.walkfiles())\n    list(sh.walkdirs())\n\n    # Remove directories.\n    sh.rmdir(\"a\", \"b\", \"c\", \"d\")\n    # Or use sh.rm which handles both files and directories.\n    sh.rm(\"a\", \"b\", \"c\", \"d\")\n\n\nPerform file IO:\n\n.. code-block:: python\n\n    sh.write(\"test.txt\", \"some text\\n\")\n    sh.write(\"test.txt\", \" some more text\\n\", \"a\")\n\n    sh.write(\"test.bin\", b\"some bytes\")\n    sh.write(\"test.bin\", b\" some more bytes\", \"ab\")\n\n    sh.writelines(\"output.txt\", [\"1\", \"2\", \"3\"])              # -> \"1\\n2\\n3\\n\"\n    sh.writelines(\"output.txt\", (str(i) for i in range(5)))  # -> \"0\\n1\\n2\\n3\\n4\\n\"\n\n    # Write to a file atomically. See sh.atomicfile for more details.\n    sh.write(\"test.txt\", \"content\", atomic=True)\n    sh.writelines(\"test.txt\", [\"content\"], atomic=True)\n\n    text = sh.read(\"test.txt\")        # -> \"some text\\nsome more text\\n\"\n    data = sh.read(\"text.bin\", \"rb\")  # -> b\"some bytes some more bytes\"\n\n    for line in sh.readlines(\"test.txt\"):\n        print(line)\n\n    for chunk in sh.readchunks(\"test.txt\", size=1024):\n        print(chunk)\n\n    sh.write(\"test.txt\", \"a|b|c|d\")\n    items = list(sh.readchunks(\"test.txt\", sep=\"|\"))\n    print(items)  # -> [\"a\", \"b\", \"c\", \"d\"]\n\n    sh.write(\"test.txt\", b\"a|b|c|d\", \"wb\")\n    assert \"\".join(sh.readchunks(\"test.txt\", \"rb\", sep=b\"|\")) == b\"a|b|c|d\"\n\n\nBackup files:\n\n.. code-block:: python\n\n    # Create backup as copy of file.\n    backup_file = sh.backup(\"a.txt\")\n    print(backup_file)                                  # a.txt.2021-02-24T16:19:20.276491~\n    sh.backup(\"a.txt\", utc=True)                        # a.txt.2021-02-24T11:19:20.276491Z~\n    sh.backup(\"a.txt\", epoch=True)                      # a.txt.1614878783.56201\n    sh.backup(\"a.txt\", suffix=\".bak\")                   # a.txt.2021-02-24T16:19:20.276491.bak\n    sh.backup(\"a.txt\", suffix=\".bak\", timestamp=False)  # a.txt.bak\n    sh.backup(\"a.txt\", prefix=\"BACKUP_\", suffix=\"\")     # BACKUP_a.txt.2021-02-24T16:19:20.276491\n\n    # Create backup as copy of directory.\n    sh.backup(\"path/to/dir\")                            # path/to/dir.2021-02-24T16:19:20.276491~\n\n    # Create backup as archive of file or directory.\n    sh.backup(\"b/c\", ext=\".tar.gz\")                    # b/c.2021-02-24T16:19:20.276491.tar.gz\n    sh.backup(\"b/c\", ext=\".tar.bz2\")                   # b/c.2021-02-24T16:19:20.276491.tar.bz2\n    sh.backup(\"b/c\", ext=\".tar.xz\")                    # b/c.2021-02-24T16:19:20.276491.tar.xz\n    sh.backup(\"b/c\", ext=\".zip\")                       # b/c.2021-02-24T16:19:20.276491.zip\n\n    from functools import partial\n    import itertools\n\n    counter = itertools.count(1)\n    backup = partial(sh.backup, namer=lambda src: f\"{src.name}-{next(counter)}~\")\n    backup(\"test.txt\")  # test.txt-1~\n    backup(\"test.txt\")  # test.txt-2~\n    backup(\"test.txt\")  # test.txt-3~\n\n\nArchive files:\n\n.. code-block:: python\n\n    # Create tar, tar-gz, tar-bz2, tar-xz, or zip archives.\n    sh.archive(\"archive.tar.gz\", \"/path/to/foo\", \"/path/to/bar\")\n\n    # Archive type is inferred from extension in filename but can be explicitly set.\n    sh.archive(\"archive\", \"path\", ext=\".tbz\")\n\n    # Files can be filtered with ls, lsfiles, lsdirs, walk, walkfiles, and walkdirs functions.\n    sh.archive(\n        \"archive.tgz\",\n        sh.walk(\"path\", include=\"*.py\"),\n         sh.walk(\"other/path\", exclude=\"*.log\"),\n     )\n\n    # Archive paths can be customized with root and repath arguments.\n    # root changes the base path for archive members.\n    sh.archive(\"archive.txz\", \"/a/b/c/1\", \"/a/b/d/2\", root=\"/a/b\")\n    # -> archive members will be \"c/1/*\" and \"d/2/*\"\n    # -> without root, they would be \"b/c/1/*\" and \"b/d/2/*\"\n\n    # repath renames paths.\n    sh.archive(\"archive.zip\", \"/a/b/c\", \"/a/b/d\", repath={\"/a/b/c\": \"foo/bar\"})\n    # -> archive members: \"foo/bar/*\" and \"b/d/*\"\n\n    # repath also works with ls* and walk* by matching on the base path.\n    sh.archive(\n        \"log-dump.taz\",\n        sh.walk(\"path/to/logs\", include=\"*.log*\"),\n        repath={\"path/to/logs\": \"logs\"},\n    )\n\n\nGet list of archive contents:\n\n.. code-block:: python\n\n    # Get list of archive contents as PurePath objects.\n    listing = sh.lsarchive(\"archive.tgz\")\n\n    # Use an explicit extension when archive doesn't have one but is supported.\n    listing = sh.lsarchive(\"archive\", ext=\".tgz\")\n\n\nUnarchive tar and zip based archives:\n\n.. code-block:: python\n\n    # Extract tar, tar-gz, tar-bz2, tar-xz, or zip archives to directory.\n    sh.unarchive(\"archive.tgz\", \"out/dir\")\n\n    # Potentially unsafe archives will raise an exception if the extraction path falls outside\n    # the destination, e.g., when the archive contains absolute paths.\n    try:\n        sh.unarchive(\"unsafe-archive.tz2\", \"out\")\n    except sh.ArchiveError:\n        pass\n\n    # But if an archive can be trusted...\n    sh.unarchive(\"unsafe-archive.tz2\", \"out\")\n\n\nWrite to a new file atomically where content is written to a temporary file and then moved once finished:\n\n.. code-block:: python\n\n    import os\n\n    with sh.atomicfile(\"path/to/atomic.txt\") as fp:\n        # Writes are sent to a temporary file in the same directory as the destination.\n        print(fp.name) # will be something like \"path/to/.atomic.txt_XZKVqrlk.tmp\"\n        fp.write(\"some text\")\n        fp.write(\"some more text\")\n\n        # File doesn't exist yet.\n        assert not os.path.exists(\"path/to/atomic.txt\")\n\n    # Exiting context manager will result in the temporary file being atomically moved to\n    # destination. This will also result in a lower-level fsync on the destination file and\n    # directory.\n    assert os.path.exists(\"path/to/atomic.txt\")\n\n    # File mode, sync skipping, and overwrite flag can be specified to change the default\n    # behavior which is...\n    with sh.atomicfile(\"file.txt\", \"w\", skip_sync=False, overwrite=True) as fp:\n        pass\n\n    # Additional parameters to open() can be passed as keyword arguments.\n    with sh.atomicfile(\"file.txt\", \"w\", **open_kwargs) as fp:\n        pass\n\n    # To writie to a file atomically without a context manager\n    sh.write(\"file.txt\", \"content\", atomic=True)\n\n\nCreate a new directory atomically where its contents are written to a temporary directory and then moved once finished:\n\n.. code-block:: python\n\n    with sh.atomicdir(\"path/to/atomic_dir\") as atomic_dir:\n        # Yielded path is temporary directory within the same parent directory as the destination.\n        # path will be something like \"path/to/.atomic_dir_QGLDfPwz_tmp\"\n        some_file = atomic_dir / \"file.txt\"\n\n        # file written to \"path/to/.atomic_dir_QGLDfPwz_tmp/file.txt\"\n        some_file.write_text(\"contents\")\n\n        some_dir = atomic_dir / \"dir\"\n        some_dir.mkdir()  # directory created at \"path/to/.atomic_dir_QGLDfPwz_tmp/dir/\"\n\n        # Directory doesn't exist yet.\n        assert not os.path.exists(\"path/to/atomic_dir\")\n\n    # Exiting context manager will atomically move the the temporary directory to the destination.\n    assert os.path.exists(\"path/to/atomic_dir\")\n\n    # Sync skipping and overwrite flag can be specified to change the default behavior which is...\n    with sh.atomicdir(\"atomic_dir\", skip_sync=False, overwrite=True) as atomic_dir:\n        pass\n\n\nTemporarily change environment variables:\n\n.. code-block:: python\n\n    # Extend existing environment.\n    with sh.environ({\"KEY1\": \"val1\", \"KEY2\": \"val2\"}) as new_environ:\n        # Do something while environment changed.\n        # Environment variables include all previous ones and {\"KEY1\": \"val1\", \"KEY2\": \"val2\"}.\n        pass\n\n    # Replace the entire environment with a new one.\n    with sh.environ({\"KEY\": \"val\"}, replace=True):\n        # Environment variables are replaced and are now just {\"KEY\": \"val\"}.\n        pass\n\n\nFor more details, please see the full documentation at https://shelmet.readthedocs.io.\n\n\n\n.. |version| image:: https://img.shields.io/pypi/v/shelmet.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/shelmet/\n\n.. |build| image:: https://img.shields.io/github/workflow/status/dgilland/shelmet/Main/master?style=flat-square\n    :target: https://github.com/dgilland/shelmet/actions\n\n.. |coveralls| image:: https://img.shields.io/coveralls/dgilland/shelmet/master.svg?style=flat-square\n    :target: https://coveralls.io/r/dgilland/shelmet\n\n.. |license| image:: https://img.shields.io/pypi/l/shelmet.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/shelmet/\n\nChangelog\n=========\n\n\nv0.6.0 (2021-03-29)\n-------------------\n\n- Change return type for ``ls``, ``lsfiles``, ``lsdirs``, ``walk``, ``walkfiles``, and ``walkdirs`` to an iterable class, ``Ls``. Previously, these functions were generators.\n- Add option to backup to an archive file in ``backup``.\n- Add functions:\n\n  - ``archive``\n  - ``chmod``\n  - ``chown``\n  - ``lsarchive``\n  - ``unarchive``\n\n\nv0.5.0 (2021-03-04)\n-------------------\n\n- Import all utility functions into ``shelmet`` namespace.\n- Remove ``shelmet.sh`` catch-all submodule in favor of splitting it into smaller submodules, ``shelmet.filesystem`` and ``shelmet.path``. Recommend using ``import shelmet as sh`` as primary usage pattern instead of importing submodules.  **breaking change**\n- Add functions:\n\n  - ``backup``\n  - ``read``\n  - ``readbytes``\n  - ``readchunks``\n  - ``readlines``\n  - ``readtext``\n  - ``write``\n  - ``writebytes``\n  - ``writelines``\n  - ``writetext``\n\n\nv0.4.0 (2021-01-26)\n-------------------\n\n- Rename ``sh.command`` to ``sh.cmd``. **breaking change**\n- Add methods to ``sh.Command`` / ``sh.command``:\n\n  - ``Command.and_``\n  - ``Command.or_``\n  - ``Command.after``\n\n\nv0.3.0 (2020-12-24)\n-------------------\n\n- Add to ``sh`` module:\n\n  - ``Command``\n  - ``command``\n  - ``cwd``\n  - ``homedir``\n  - ``run``\n\n\nv0.2.0 (2020-11-30)\n-------------------\n\n- Add to ``sh`` module:\n\n  - ``atomicdir``\n\n- Rename ``atomic_write`` to ``atomicfile``. **breaking change**\n\n\nv0.1.0 (2020-11-16)\n-------------------\n\n- First release.\n- Add ``sh`` module:\n\n  - ``atomic_write``\n  - ``cd``\n  - ``cp``\n  - ``dirsync``\n  - ``environ``\n  - ``fsync``\n  - ``getdirsize``\n  - ``ls``\n  - ``lsdirs``\n  - ``lsfiles``\n  - ``mkdir``\n  - ``mv``\n  - ``reljoin``\n  - ``rm``\n  - ``rmdir``\n  - ``rmfile``\n  - ``touch``\n  - ``umask``\n  - ``walk``\n  - ``walkdirs``\n  - ``walkfiles``\n\nMIT License\n\nCopyright (c) 2020 Derrick Gilland\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dgilland/shelmet",
    "keywords": "shelmet shell subprocess process file system path os utility",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shelmet",
    "package_url": "https://pypi.org/project/shelmet/",
    "platform": "",
    "project_url": "https://pypi.org/project/shelmet/",
    "project_urls": {
      "Homepage": "https://github.com/dgilland/shelmet"
    },
    "release_url": "https://pypi.org/project/shelmet/0.6.0/",
    "requires_dist": [
      "typing-extensions (>=3.7.4)",
      "autodocsumm ; extra == 'dev'",
      "black ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "docformatter ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-black ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8-isort ; extra == 'dev'",
      "invoke ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-flake8 ; extra == 'dev'",
      "pytest-freezegun ; extra == 'dev'",
      "pytest-mypy ; extra == 'dev'",
      "pytest-pylint ; extra == 'dev'",
      "Sphinx ; extra == 'dev'",
      "sphinx-autodoc-typehints ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "A shell power-up for working with the file system and running subprocess commands.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9918144,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c017679cd17256b8679287ea7af68f765a2443465de033bca1453eb9c2beaaa",
          "md5": "fc5e9de0f8d8db44e0845bec2101b50d",
          "sha256": "a4eb154205f3c533763e8935f947cd969ee3e821bda0115a2a0a563f32c9f34d"
        },
        "downloads": -1,
        "filename": "shelmet-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc5e9de0f8d8db44e0845bec2101b50d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11435,
        "upload_time": "2020-11-17T03:20:42",
        "upload_time_iso_8601": "2020-11-17T03:20:42.956877Z",
        "url": "https://files.pythonhosted.org/packages/6c/01/7679cd17256b8679287ea7af68f765a2443465de033bca1453eb9c2beaaa/shelmet-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc8f3f04d2041c19010314ae5f47aa9478e7f90ca3d6d7dddabe2541a3b3b0ac",
          "md5": "6d2646c0c0fc480a52cb0247e092fc92",
          "sha256": "3805a32aff3c07e6fcdbc29f7c61c7ed550538b0a317c4753c0cd6f4d9a543c4"
        },
        "downloads": -1,
        "filename": "shelmet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d2646c0c0fc480a52cb0247e092fc92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28923,
        "upload_time": "2020-11-17T03:20:44",
        "upload_time_iso_8601": "2020-11-17T03:20:44.314924Z",
        "url": "https://files.pythonhosted.org/packages/cc/8f/3f04d2041c19010314ae5f47aa9478e7f90ca3d6d7dddabe2541a3b3b0ac/shelmet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "510f50b865883665c796d14a2c93415051876dc2a730e1c2751be236fd28f9af",
          "md5": "8d75400919bde229d1b28ec9c4045c25",
          "sha256": "f4547b1061353a32f2bb03f65b63191e75f5bf2b558447c54185c0beff5bc0e4"
        },
        "downloads": -1,
        "filename": "shelmet-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d75400919bde229d1b28ec9c4045c25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11985,
        "upload_time": "2020-11-30T22:25:41",
        "upload_time_iso_8601": "2020-11-30T22:25:41.518905Z",
        "url": "https://files.pythonhosted.org/packages/51/0f/50b865883665c796d14a2c93415051876dc2a730e1c2751be236fd28f9af/shelmet-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43efd9e5f23c5223d2098b28584efdbceebabb9fbf46e5d33ac72d4da03f85e5",
          "md5": "94b650cc4bd4a5153c3dae7a47d88929",
          "sha256": "efa70cec2b6993c32fdb9cd689c34c72a2e98a6d5be2201ea0ace2639d1d2dd3"
        },
        "downloads": -1,
        "filename": "shelmet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94b650cc4bd4a5153c3dae7a47d88929",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30161,
        "upload_time": "2020-11-30T22:25:43",
        "upload_time_iso_8601": "2020-11-30T22:25:43.120784Z",
        "url": "https://files.pythonhosted.org/packages/43/ef/d9e5f23c5223d2098b28584efdbceebabb9fbf46e5d33ac72d4da03f85e5/shelmet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b8a026390fc2c7a14933125f1cdaaa054293ba9b449a7f4da472fa0cced85b7",
          "md5": "3592cd502e9c023ddcf7989e5f8b91e5",
          "sha256": "35eda7a2cb65862d4773b4b29dca1b830f3dc8302ef37fd48cc632c17af5f801"
        },
        "downloads": -1,
        "filename": "shelmet-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3592cd502e9c023ddcf7989e5f8b91e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15622,
        "upload_time": "2020-12-24T17:16:19",
        "upload_time_iso_8601": "2020-12-24T17:16:19.201059Z",
        "url": "https://files.pythonhosted.org/packages/5b/8a/026390fc2c7a14933125f1cdaaa054293ba9b449a7f4da472fa0cced85b7/shelmet-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "714f622f6f95864d52ac3b500a3071be87abc1b92b65c8e07b79003a791c1bb9",
          "md5": "9c74693ce7019190015597a47599a824",
          "sha256": "ed43563eb8531a958e332d92d1c5b3f26fa6ca7e2d840704c3be41924b9166df"
        },
        "downloads": -1,
        "filename": "shelmet-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c74693ce7019190015597a47599a824",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38040,
        "upload_time": "2020-12-24T17:16:20",
        "upload_time_iso_8601": "2020-12-24T17:16:20.894022Z",
        "url": "https://files.pythonhosted.org/packages/71/4f/622f6f95864d52ac3b500a3071be87abc1b92b65c8e07b79003a791c1bb9/shelmet-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "118b4747b7977c2b6a527d241cd637f25ce8f4779d887a95688ca05a7efee1c8",
          "md5": "41c1c6947b2a1b9a0e04401bf62743e7",
          "sha256": "a47ccb7623a96b32b901d6fe40bc70b92ca92517384c08c42493e179c9de7262"
        },
        "downloads": -1,
        "filename": "shelmet-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41c1c6947b2a1b9a0e04401bf62743e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17826,
        "upload_time": "2021-01-26T23:22:27",
        "upload_time_iso_8601": "2021-01-26T23:22:27.026390Z",
        "url": "https://files.pythonhosted.org/packages/11/8b/4747b7977c2b6a527d241cd637f25ce8f4779d887a95688ca05a7efee1c8/shelmet-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dc7fdbf7a00b8efd1a4777abcc48d32c01edb8433fecf0966f3b6a394a61b85",
          "md5": "3014c8d4e9bb26a03fd72095768293c3",
          "sha256": "d7db1624929797a02cbe340f2b69bd39ae536743f8ff3c6ad3bf8d8b47650d17"
        },
        "downloads": -1,
        "filename": "shelmet-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3014c8d4e9bb26a03fd72095768293c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40165,
        "upload_time": "2021-01-26T23:22:28",
        "upload_time_iso_8601": "2021-01-26T23:22:28.712536Z",
        "url": "https://files.pythonhosted.org/packages/3d/c7/fdbf7a00b8efd1a4777abcc48d32c01edb8433fecf0966f3b6a394a61b85/shelmet-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c96014999760ef97d2bf24c5ae9ef825b291a90efae3ec0b446c9416eddca3f",
          "md5": "cd0cff3b3970ea5fcb96b5b48e99ae8c",
          "sha256": "fa0757f0a0d1f52b2566b9885d4be6bacbf2d48761b67a4c37599d5d89042a75"
        },
        "downloads": -1,
        "filename": "shelmet-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd0cff3b3970ea5fcb96b5b48e99ae8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22430,
        "upload_time": "2021-03-04T22:29:49",
        "upload_time_iso_8601": "2021-03-04T22:29:49.590176Z",
        "url": "https://files.pythonhosted.org/packages/0c/96/014999760ef97d2bf24c5ae9ef825b291a90efae3ec0b446c9416eddca3f/shelmet-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5352f6ce88b9df847b01d136afafd392cf1ddc57c401ddeba0eb63e051226396",
          "md5": "49c565dcdb1be7ff6801d2898b41f2c4",
          "sha256": "d4274224adbd27818c91242c659ae1031f510dd5a6a52efcc7c6a0513c0d93fb"
        },
        "downloads": -1,
        "filename": "shelmet-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "49c565dcdb1be7ff6801d2898b41f2c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48948,
        "upload_time": "2021-03-04T22:29:51",
        "upload_time_iso_8601": "2021-03-04T22:29:51.177485Z",
        "url": "https://files.pythonhosted.org/packages/53/52/f6ce88b9df847b01d136afafd392cf1ddc57c401ddeba0eb63e051226396/shelmet-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d3e234e57256d3143a4e4b5aea5d536a26522d44692bd042e945a8737dcc1a0",
          "md5": "5333c6066bb34666be9f277cd9242527",
          "sha256": "cea7e07948e8201bdf32e2b4356fadd2f2738eee410e767f9749252f15d73e07"
        },
        "downloads": -1,
        "filename": "shelmet-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5333c6066bb34666be9f277cd9242527",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31635,
        "upload_time": "2021-03-29T22:57:10",
        "upload_time_iso_8601": "2021-03-29T22:57:10.252582Z",
        "url": "https://files.pythonhosted.org/packages/1d/3e/234e57256d3143a4e4b5aea5d536a26522d44692bd042e945a8737dcc1a0/shelmet-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4f5a22e53ed81b98171b0c3b7e44dc1ccefa7c6da7530c37d3e495ec2f52af2",
          "md5": "2df0cdaf73196b31b31c3ac3684860bb",
          "sha256": "972064d46f159a28316849aa55e5a8e53dc6bdc217c6f82144aac9b6740ea21e"
        },
        "downloads": -1,
        "filename": "shelmet-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2df0cdaf73196b31b31c3ac3684860bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64416,
        "upload_time": "2021-03-29T22:57:11",
        "upload_time_iso_8601": "2021-03-29T22:57:11.891504Z",
        "url": "https://files.pythonhosted.org/packages/c4/f5/a22e53ed81b98171b0c3b7e44dc1ccefa7c6da7530c37d3e495ec2f52af2/shelmet-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d3e234e57256d3143a4e4b5aea5d536a26522d44692bd042e945a8737dcc1a0",
        "md5": "5333c6066bb34666be9f277cd9242527",
        "sha256": "cea7e07948e8201bdf32e2b4356fadd2f2738eee410e767f9749252f15d73e07"
      },
      "downloads": -1,
      "filename": "shelmet-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5333c6066bb34666be9f277cd9242527",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31635,
      "upload_time": "2021-03-29T22:57:10",
      "upload_time_iso_8601": "2021-03-29T22:57:10.252582Z",
      "url": "https://files.pythonhosted.org/packages/1d/3e/234e57256d3143a4e4b5aea5d536a26522d44692bd042e945a8737dcc1a0/shelmet-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4f5a22e53ed81b98171b0c3b7e44dc1ccefa7c6da7530c37d3e495ec2f52af2",
        "md5": "2df0cdaf73196b31b31c3ac3684860bb",
        "sha256": "972064d46f159a28316849aa55e5a8e53dc6bdc217c6f82144aac9b6740ea21e"
      },
      "downloads": -1,
      "filename": "shelmet-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2df0cdaf73196b31b31c3ac3684860bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 64416,
      "upload_time": "2021-03-29T22:57:11",
      "upload_time_iso_8601": "2021-03-29T22:57:11.891504Z",
      "url": "https://files.pythonhosted.org/packages/c4/f5/a22e53ed81b98171b0c3b7e44dc1ccefa7c6da7530c37d3e495ec2f52af2/shelmet-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}