{
  "info": {
    "author": "eerne/m13kj (Ernest)",
    "author_email": "infinitumco666@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# basemath\nA small python library to work with numbers of any base\n\nInstall it using pip:\n```python\npip install basemath\n```\n\nIf you need to work with hex, bin, oct, any-base numbers, you can use this simple python library. Any-base number - is the number with the base you need to use it.\nUsing this library (version 1.0) you can carry out basic operations like: \n* **plus** \n* **minus**\n* **mul** \n\nAlso you can **convert a-base number to any other b-base**. You can find decimal number from any-base number anytime.\n\nFor example you need to find check sum for IP packet:\n```python\n# this is ip packet:\npacket = '''45000034d5274000380600005fa77a0aac106429'''.upper()\n# convert it into bnum type\npacket = bNUM(packet, 16)\n# get 10 bnums with length 4 and same base 16\nparts  = packet.get_k_bnums(10, 4)\n# get sum of this 10 bnums\nresult = bnum_sum(parts)\n# cut the head of result and sum it with the rest\n# to make result with length 4\nresult = result.cutdown(4)\n# find check sum as FFFF - result\nresult = bNUM('FFFF', 16, 4) - result\n```\n\nThe result will be check sum:\n```python\n'(F8F0).16'\n```\n\n# Consistance:\n* [bNUM](#bnum) class\n  * [length](#length-parameter) parameter\n  * [to_len](#to_len) method\n  * [cutdown](#cutdown) method\n  * [math](#math-operations) operations\n  * [other](#other-methods) methods\n* [init](#init-functions) functions\n* [additional](#additional-functions) functions\n\n# bNUM\n> bNUM(value, base, length=None, cut=None)\n\nUse this class to carry out operations with any-base number.\nYou can create **bnum** *(any-base number using bNUM class)* using:\n1. Decimal number (integers only):\n```python\n    number = 10 # or any integer you want\n    base   = 2  # or any base you want starting from 2\n    bnum   = bNUM(number, base)\n    print(bnum)\n    #\n    >> '(1010).2'\n```\n1. String representation of your any-base number:\n```python\n    str_basenum = '1010'\n    base        = 2\n    bnum        = bNUM(str_basenum, base)\n    print(bnum)\n\n    >> '(1010).2'\n```\n1. List representation of your any-base number:\n```python\n    list_basenum = ['1', '0', '1', '0']\n    base         = 2\n    bnum         = bNUM(list_basenum, base)\n    print(bnum)\n\n    >> '(1010).2'\n```\n  You can also pass list of bnums as a value:\n```python\n    bnums = [bNUM('10', 2), bNUM('10', 2)]\n    base  = 2\n    bnum  = bNUM(bnums, base)\n    print(bnum)\n\n    >> '(1010).2'\n```\n\nAs you can mention, the string output of bNUM object useing format (number).base: (10).10, (1010).2, (A).16 and etc\nbNUM uses local list ORDER to represent and operate with any element of any base. ORDER list consists of strings that are representations of any-base digits:\nORDER = ['0', '1', '2', '3', '4', ..., 'A', 'B', 'C', ..., 'a', 'b', 'c', ..., !1A, !1B, !1C, ..........]\n**THE ELEMENTS ARE CASE-SENSETIVE! SO YOU SHOULD PASS STINGS AND LISTS INTO bNUM KNOWING THAT, E.G. 'A' IS DIFFERENT THAN 'a':\n'A' = 10, 'B' = 11, ..., 'Z' = 35, 'a' = 36, 'b' = 37, ..., 'z' = 61, '!1A' = 62, '!1B' = 63, ...***\n\nAs you can see, starting after 'z' it goes '!1A' - is the syntax to use next other any-base digits.It goes as ![period of repeating number]letter\nThere are '!' signs to indicate the start of the new any-base digit that is out of standard range from 0 to 9, from A to Z and from a to z:\n | String representations | Decimals |\n | --- | --- |\n | 0 - 9 | 0 - 9 |\n | A - Z | 10 - 35 |\n | a - z | 36 - 61 |\n | !1A - !1Z | 62 - 87 |\n | !1a - !1z | 88 - 113 |\n | !2A - !2Z | 114 - 139 |\n | !2a - !2z | 140 - 165 |\n | ... | ... |\n | !1000A - !1000Z | 52010 - 52035 |\n | !1000a - !1000z | 52036 - 52061 |\n\n So you can use up to 52061 base numbers.\n\n### The attributes of bNUM object:\n * **string** - string representation of number: bNUM(10, 2).string -> '1010'\n * **array**  - array representation of number: bNUM(10, 2).array -> ['1', '0', '1', '0']\n * **base**   - base of number: bNUM(10, 2).base -> 2\n * **decimal** - decimal number representation: bNUM(10, 2).decimal -> 10\n\n## length parameter\n> length=None (int)\n\nUse length parameter to keep this length of bnum. For example, if you pass number with zeros at the highest rank (e.g. '0001010') without length parameter, then this zeros is erased:\n```python\n  string = '0001010'\n  base   = 2\n  bnum   = bNUM(string, base)  print(bnum)\n\n  >> '(1010).2'\n```\nThan, use length parameter to keep this length:\n```python\n  bnum = bNUM(string, base, length=7)\n  print(bnum)\n\n  >> '(0001010).2'\n```\n\nUse length parameter to expand the length of your bnum, filling it with zeros:\n```python\n  bnum = bNUM('1010', 2, length=10)\n  print(bnum, len(bnum))\n\n  >> '(0000001010).2', 10\n```\n\nIf you pass length less than your any-base number, then nothing happens. Length parameter is only working to keep or expand by zeros original length of any-base number:\n```python\n  bnum = bNUM('01010', 2, length=4)\n  print(bnum)\n\n  >> '(01010).2'\n```\n\nTo remove zeros from bnum use [cutzeros](#cutzeros) method.\n\n## to_len\n> to_len(length) -> bNUM\n\nUse this method with your bnum to return new bnum with new or the same length. Again, the length can only be the same or expanded by filling with zeros:\n```python\n  bnum1 = bNUM('1010', 2)\n  bnum2 = bnum1.to_len(10)\n  print(bnum2)\n\n  >> '(0000001010).2'\n```\n\n## cutdown\n> cutdown(length) -> bNUM\n\nThe operation of cutdown can be defined by this algorithm:\n  1. Take number A as input with length equals input_len, and reqired length equals output_len\n  1. Save elements with the index greater than output_len\n  1. Make new number B from this elements by adding zeros to the highest rank of the resulting number\n  1. Make new number C from elements that left in A (index less than output_length)\n  1. Find sum: B + C\n  1. If sum length = output_len, then end of algorithm. If not, then cutdown sum\n\nFor example:\nWe have number 1010 of base 2. The cutdown to length = 3:\n  A = 1010\n  B = 001 (the first 1 from A expanded to length = 3)\n  C = 010 (the rest of A)\n  result := 001 + 010 = 011\n\nThe cutdown to length = 2:\n  A = 1010\n  B = 10 (the first to numbers from A)\n  C = 10 (the rest elements from A)\n  sum := 10 + 10 = 100\n  Continuing...\n  A = 100\n  B = 01\n  C = 00\n  result := 01 + 00 = 01\n\n```python\n  bnum1 = bNUM('420', 10)\n  bnum2 = bnum1.cutdown(2) # 04 + 20 = 24\n  bnum3 = bnum1.cutdown(1) # 42 + 0 = 42; 4 + 2 = 6\n  bnum4 = bnum1.cutdown(3) # the same as bnum1\n  print(bnum2, bnum3, bnum4)\n\n  >> '(24).10', '(6).10', '(420).10'\n```\n\nYou can pass int cut parameter creating new bNUM to use cutdown operation on created bnum.\n\n## math operations\n\nYou can find sum, multiplication, substraction of two bnums using standard python syntax:\n```python\n bnum1 = bNUM('1010', 2) # 10\n bnum2 = bNUM('10', 2)   # 2\n print(bnum1 + bnum2)    # output = (1100).2  = 12\n print(bnum1 * bnum2)    # output = (10100).2 = 20\n print(bnum1 - bnum2)    # output = (1000).2  = 8\n```\n\nPay attention, if the minued is less then subtrahend (negative result of substraction), than the return will be decimal number of type int (not a bNUM):\n```python\n print(bnum2 - bnum1) # output = -8\n ```\n\n You can carry out some bitwise operations like XOR, bitwise OR and bitwise AND (or just bitwise multiplication):\n ```python\n  bnum1 = bNUM('1010', 2) # 10\n  bnum2 = bNUM('10', 2)   # 2\n  print(bnum1 ^ bnum2)    # 1010 XOR 10 = 1000 = 8\n  print(bnum1 | bnum2)    # 1010 OR  10 = 1010 = 10\n  print(bnum1 & bnum2)    # 1010 AND 10 = 1000 = 2\n```\n\n## other methods\n\nUse *to_base(base)* to get new bNUM object with new base:\n```\n bnum2  = bNUM('1010', 2)\n bnum16 = bnum2.to_base(16)\n bnum10 = bnum16.to_base(10)\n print(bnum2, bnum16, bnum10)\n\n >> (1010).2, (A).16, (10).10\n```\n\nUse your bnums as standard python lists. Use index syntax to get bnum elements of type bNUM. **But, pay attention!** The indices here are not simple: the rank in bnums is left oriented, so are indices. Using indices you passes the power of digit position:\n 1 0 1 0 - binary number\n 3 2 1 0 - indices/powers of base\n\n A F F 3 C 1 - hex number\n 5 4 3 2 1 0 - indices/powers of base\n\n```python\n bnum = bNUM('123456789', 10)\n print(bnum.array, bnum.string)\n\n >> ['1', '2', '3', '4', '5', '6', '7', '8', '9'], '123456789'\n\n print(bnum[0], type(bnum[0]))\n\n >> (9).10, <class 'bNUM'>\n\n print(bnum[-1])\n\n >> (1).10\n\n for b in bnum:\n  print(b, end=' ')\n\n >> (9).10, (8).10, (7).10, (6).10, (5).10, (4).10, (3).10, (2).10, (1).10\n```\n\nJust think of it like you get item by index using reverted bnum.array.\nOr you can use method *from_end* passing index as in standard array.\nDon't forget that you can change single element of your bnum using index syntax.\n```python\n bnum1 = bNUM('1010', 2)\n print(bnum1, bnum1.decimal)\n\n >> (1010).2, 10\n\n bnum1[0] = 1\n print(bnum1, bnum1.decimal)\n\n >> (1011).2, 11\n```\n\nUse method insert and append like you use it with python lists.\n\n\nYou can get copy of bNUM object using method *copy*:\n```python\n bnum1 = bNUM('1010', 2)\n bnum2 = bnum1.copy()\n print(bnum2) \n >> (1010).2\n\n bnum1[0] = 1\n print(bnum1, bnum2)\n\n >> (1011).2, (1010).2\n```\n\nOr just copy parameters of another bnum to yours using method *copy_here(bnum)*:\n```python\n bnum1 = bNUM('1010', 2)\n bnum2 = bNUM('FFFF', 16)\n bnum1.copy_here(bnum2)\n print(bnum1)\n\n >> (FFFF).16\n```\n\nFill bnum with any value useing *fill(value)* method (you can pass str or int < 10):\n```python\n bnum = bNUM('AAA', 16)\n bnum.fill('F')\n print(bnum)\n\n >> (FFF).16\n```\n\nAdd amount of zeros you want to the lowest ranks using method *shift*:\n```python\n bnum1 = bNUM('111', 2)\n bnum2 = bnum1.shift(3)\n print(bnum1, bnum2)\n\n >> (111).2, (111000).2\n```\n\nUse *split(k, length)* method to split bnum by k new bnums with the same length:\n```python\n bnum = bNUM('ABCDEF', 16)\n print(bnum.split(3, 2))\n\n >> [ (AB).16, (CD).16, (EF).16 ]\n```\n\n# init functions\nThere are functions to create bnum objects: *zeros(length, base)* and *ones(length, base)*.\n*zeros* creates bNUM object filled with zeros. *ones* creates bNUM object filled with ones:\n```python\n bnum0 = zeros(4, 135)\n print(bnum0)\n\n >> (0000).135\n\n bnum1 = ones(4, 666)\n print(bnum1)\n\n >> (1111).666\n```\n\n# additional functions\nThere functions like de2array, de2str, bnum_sum:\n * de2array(decimal, base) - creates array of string representations of number of passed base\n * de2str(decimal, base) - the same as the de2array, but returns string\n * bnum_sum(bnums) - returns sum of bnums in passed list\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/m13kj/basemath",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "basemath",
    "package_url": "https://pypi.org/project/basemath/",
    "platform": "",
    "project_url": "https://pypi.org/project/basemath/",
    "project_urls": {
      "Homepage": "https://github.com/m13kj/basemath"
    },
    "release_url": "https://pypi.org/project/basemath/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small library to work with numbers of any base",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6743647,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "093e052cee7253ca2ed6b4dc129ca5fbfadfa8fea6fe09c8676b87b858c0e989",
          "md5": "3e4f4001599dca259b07ea92c348af09",
          "sha256": "2ecf99f317520d1afff985caaffa3b289bb7806ff453d31c3f56f95ea825619a"
        },
        "downloads": -1,
        "filename": "basemath-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e4f4001599dca259b07ea92c348af09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10999,
        "upload_time": "2020-03-03T21:35:00",
        "upload_time_iso_8601": "2020-03-03T21:35:00.618283Z",
        "url": "https://files.pythonhosted.org/packages/09/3e/052cee7253ca2ed6b4dc129ca5fbfadfa8fea6fe09c8676b87b858c0e989/basemath-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34410f3bf591dd5f67da2b8b2968dda8783f6a24bd236cf922364e49ffd5ba6a",
          "md5": "ebab09065a948f00fa64e99e23daebd7",
          "sha256": "8ef67a5b5444401fe5f6e17abdf31e35d24c8451c1f86a83f7d1e5ac4887f6e7"
        },
        "downloads": -1,
        "filename": "basemath-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ebab09065a948f00fa64e99e23daebd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10575,
        "upload_time": "2020-03-03T21:35:03",
        "upload_time_iso_8601": "2020-03-03T21:35:03.165388Z",
        "url": "https://files.pythonhosted.org/packages/34/41/0f3bf591dd5f67da2b8b2968dda8783f6a24bd236cf922364e49ffd5ba6a/basemath-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "093e052cee7253ca2ed6b4dc129ca5fbfadfa8fea6fe09c8676b87b858c0e989",
        "md5": "3e4f4001599dca259b07ea92c348af09",
        "sha256": "2ecf99f317520d1afff985caaffa3b289bb7806ff453d31c3f56f95ea825619a"
      },
      "downloads": -1,
      "filename": "basemath-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e4f4001599dca259b07ea92c348af09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10999,
      "upload_time": "2020-03-03T21:35:00",
      "upload_time_iso_8601": "2020-03-03T21:35:00.618283Z",
      "url": "https://files.pythonhosted.org/packages/09/3e/052cee7253ca2ed6b4dc129ca5fbfadfa8fea6fe09c8676b87b858c0e989/basemath-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34410f3bf591dd5f67da2b8b2968dda8783f6a24bd236cf922364e49ffd5ba6a",
        "md5": "ebab09065a948f00fa64e99e23daebd7",
        "sha256": "8ef67a5b5444401fe5f6e17abdf31e35d24c8451c1f86a83f7d1e5ac4887f6e7"
      },
      "downloads": -1,
      "filename": "basemath-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ebab09065a948f00fa64e99e23daebd7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10575,
      "upload_time": "2020-03-03T21:35:03",
      "upload_time_iso_8601": "2020-03-03T21:35:03.165388Z",
      "url": "https://files.pythonhosted.org/packages/34/41/0f3bf591dd5f67da2b8b2968dda8783f6a24bd236cf922364e49ffd5ba6a/basemath-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}