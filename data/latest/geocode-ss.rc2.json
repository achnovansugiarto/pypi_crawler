{
  "info": {
    "author": "Jamie Taylor",
    "author_email": "jamie.taylor@sheffield.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Utilities"
    ],
    "description": "# Geocode\r\n\r\n\r\n\r\nGeocode various geographical entities including postcodes and LLSOAs. Reverse-geocode to LLSOA or GSP/GNode.\r\n\r\n\r\n\r\n*Latest Version: 0.12.0*\r\n\r\n\r\n\r\n## What is this repository for?\r\n\r\n\r\n\r\n* Use Code Point Open and/or Google Maps API to geocode postcode and/or address into lat/lon co-ordinates.\r\n\r\n* Use ONS & NRS LLSOA Population Weighted Centroids to geocode Lower Layer Super Output Areas.\r\n\r\n* Use GIS data from data.gov.uk to geocode GB constituencies based on geospatial centroid.\r\n\r\n* Use GIS boundaries data from ONS and NRS to reverse-geocode lat/lon to LLSOA.\r\n\r\n* Use GIS data from National Grid ESO's data portal to reverse-geocode to GSP / GNode.\r\n\r\n* Use GIS boudnaries from the Europa/Eurostats API to reverse-geocode to NUTS regions.\r\n\r\n\r\n\r\n## Benefits\r\n\r\n* Prioritises Code Point Open for postcode lookup to save expensive GMaps API bills.\r\n\r\n* Caches GMaps API queries locally so that repeated queries can be fulfilled without a new API request.\r\n\r\n* Fetches data automatically at runtime from public APIs where possible.\r\n\r\n\r\n\r\n## How do I get set up?\r\n\r\n\r\n\r\nDeveloped and tested with Python 3.9, should work for 3.7+.\r\n\r\n\r\n\r\nMake sure you have Git installed - [Download Git](https://git-scm.com/downloads)\r\n\r\n\r\n\r\nRun `pip install geocode-ss`\r\n\r\n\r\n\r\nor `pip install git+https://github.com/SheffieldSolar/Geocode/`\r\n\r\n\r\n\r\nCheck that the installation was successful by running the following command from terminal / command-line:\r\n\r\n\r\n\r\n```>> geocode -h```\r\n\r\n\r\n\r\nThis will print the helper for the limited command line interface which provides tools to help get set up and to clear the cache when needed:\r\n\r\n\r\n\r\n```\r\n\r\nusage: geocode.py [-h] [--clear-cache] [--debug] [--setup SETUP [SETUP ...]]\r\n\r\n                  [--load-cpo-zip </path/to/zip-file>] [--load-gmaps-key <gmaps-api-key>]\r\n\r\n\r\n\r\nThis is a command line interface (CLI) for the Geocode module version 0.12.0.\r\n\r\n\r\n\r\noptional arguments:\r\n\r\n  -h, --help            show this help message and exit\r\n\r\n  --clear-cache         Specify to delete the cache files.\r\n\r\n  --debug               Geocode some sample postcodes/addresses/LLSOAs.\r\n\r\n  --setup SETUP [SETUP ...]\r\n\r\n                        Force download all datasets to local cache (useful if running\r\n\r\n                        inside a Docker container i.e. run this as part of image build).\r\n\r\n                        Possible values are 'ngeso', 'cpo', 'ons', 'eurostat' or 'all'.\r\n\r\n  --load-cpo-zip </path/to/zip-file>\r\n\r\n                        Load the Code Point Open data from a local zip file.\r\n\r\n  --load-gmaps-key <gmaps-api-key>\r\n\r\n                        Load a Google Maps API key.\r\n\r\n\r\n\r\nJamie Taylor & Ethan Jones, 2019-10-08\r\n\r\n```\r\n\r\n\r\n\r\nNo additional set up is needed at this stage - the required datasets will be downloaded (or extracted from the packaged data) the first time you use the associated method. If you want to force the Geocode library to download/extract all data, you can run the following command:\r\n\r\n\r\n\r\n```>> geocode --setup```\r\n\r\n\r\n\r\nThis is especially useful if you are installing / running the library inside a container - using the above command you can download the data once during the image build rather than have to re-download every time the container is destroyed.\r\n\r\n\r\n\r\n**Important**\r\n\r\n\r\n\r\nNote that this library makes use of the [Shapely library](https://pypi.org/project/Shapely/) from PyPi, which often does not install correctly on Windows machines due to some missing dependencies. If using Windows and you see an error like `OSError: [WinError 126] The specified module could not be found`, you should install Shapely from one of the unofficial binaries [here](https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely) e.g.\r\n\r\n\r\n\r\n```>> pip install https://download.lfd.uci.edu/pythonlibs/s2jqpv5t/Shapely-1.7.0-cp37-cp37m-win_amd64.whl```\r\n\r\n\r\n\r\nAll data required by this library is either packaged with the code or is downloaded at runtime from public APIs. Some data is subect to licenses and/or you may wish to manually update certain datasets (e.g. OS Code Point Open) - see [appendix](#Appendix).\r\n\r\n\r\n\r\n## Usage\r\n\r\n\r\n\r\n### Within a Python script\r\n\r\n\r\n\r\nWithin your Python code, I recommend using the context manager so that GMaps cache will be automatically flushed on exit. See `example.py`:\r\n\r\n\r\n\r\n```Python\r\n\r\nimport os\r\n\r\nimport logging\r\n\r\n\r\n\r\nfrom geocode import Geocoder\r\n\r\n\r\n\r\ndef main():\r\n\r\n    with Geocoder() as geocoder:\r\n\r\n        # Geocode some postcodes / addresses...\r\n\r\n        print(\"GEOCODE POSTCODES / ADDRESSES:\")\r\n\r\n        postcodes = [\"S3 7RH\", \"S3 7\", \"S3\", None, None, \"S3 7RH\"]\r\n\r\n        addresses = [None, None, None, \"Hicks Building, Sheffield\", \"Hicks\", \"Hicks Building\"]\r\n\r\n        results = geocoder.geocode(postcodes, \"postcode\", address=addresses)\r\n\r\n        for postcode, address, (lat, lon, status) in zip(postcodes, addresses, results):\r\n\r\n            print(f\"    Postcode + Address: `{postcode}` + `{address}`  ->  {lat:.3f}, {lon:.3f} \"\r\n\r\n                  f\"({geocoder.status_codes[status]})\")\r\n\r\n        # Geocode some LLSOAs...\r\n\r\n        print(\"GEOCODE LLSOAs:\")\r\n\r\n        llsoas = [\"E01033264\", \"E01033262\"]\r\n\r\n        results = geocoder.geocode_llsoa(llsoas)\r\n\r\n        for llsoa, (lat, lon) in zip(llsoas, results):\r\n\r\n            print(f\"    LLSOA: `{llsoa}`  ->  {lat:.3f}, {lon:.3f}\")\r\n\r\n        # Geocode some Constituencies...\r\n\r\n        print(\"GEOCODE CONSTITUENCIES:\")\r\n\r\n        constituencies = [\"Sheffield Central\", \"Sheffield Hallam\"]\r\n\r\n        results = geocoder.geocode_constituency(constituencies)\r\n\r\n        for constituency, (lat, lon) in zip(constituencies, results):\r\n\r\n            print(f\"    Constituency: `{constituency}`  ->  {lat:.3f}, {lon:.3f}\")\r\n\r\n        # Reverse-geocode some lat/lons to LLSOAs...\r\n\r\n        print(\"REVERSE-GEOCODE TO LLSOA:\")\r\n\r\n        latlons = [(53.384, -1.467), (53.388, -1.470)]\r\n\r\n        results = geocoder.reverse_geocode_llsoa(latlons)\r\n\r\n        for llsoa, (lat, lon) in zip(results, latlons):\r\n\r\n            print(f\"    LATLON: {lat:.3f}, {lon:.3f}  ->  `{llsoa}`\")\r\n\r\n        # Reverse-geocode some lat/lons to GSP...\r\n\r\n        print(\"REVERSE-GEOCODE TO GSP:\")\r\n\r\n        latlons = [(53.384, -1.467), (53.388, -1.470)]\r\n\r\n        results = geocoder.reverse_geocode_gsp(latlons)\r\n\r\n        for (lat, lon), region_id in zip(latlons, results):\r\n\r\n            print(f\"    LATLON: {lat:.3f}, {lon:.3f}  ->  {region_id}\")\r\n\r\n        # Reverse-geocode some lat/lons to 2021 NUTS2...\r\n\r\n        print(\"REVERSE-GEOCODE TO NUTS2:\")\r\n\r\n        latlons = [(51.3259, -1.9613), (47.9995, 0.2335), (50.8356, 8.7343)]\r\n\r\n        results = geocoder.reverse_geocode_nuts(latlons, year=2021, level=2)\r\n\r\n        for (lat, lon), nuts2 in zip(latlons, results):\r\n\r\n            print(f\"    LATLON: {lat:.3f}, {lon:.3f}  ->  {nuts2}\")\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    log_fmt = \"%(asctime)s [%(levelname)s] [%(filename)s:%(funcName)s] - %(message)s\"\r\n\r\n    fmt = os.environ.get(\"GEOCODE_LOGGING_FMT\", log_fmt)\r\n\r\n    datefmt = os.environ.get(\"GEOCODE_LOGGING_DATEFMT\", \"%Y-%m-%dT%H:%M:%SZ\")\r\n\r\n    logging.basicConfig(format=fmt, datefmt=datefmt, level=os.environ.get(\"LOGLEVEL\", \"WARNING\"))\r\n\r\n    main()\r\n\r\n```\r\n\r\n\r\n\r\n```\r\n\r\n>> python example.py\r\n\r\nGEOCODE POSTCODES / ADDRESSES:\r\n\r\n    Postcode + Address: `S3 7RH` + `None`  ->  53.381, -1.486 (Full match with GMaps)\r\n\r\n    Postcode + Address: `S3 7` + `None`  ->  nan, nan (Failed)\r\n\r\n    Postcode + Address: `S3` + `None`  ->  nan, nan (Failed)\r\n\r\n    Postcode + Address: `None` + `Hicks Building, Sheffield`  ->  53.381, -1.486 (Full match with GMaps)\r\n\r\n    Postcode + Address: `None` + `Hicks`  ->  nan, nan (Failed)\r\n\r\n    Postcode + Address: `S3 7RH` + `Hicks Building`  ->  53.381, -1.486 (Full match with GMaps)\r\n\r\nGEOCODE LLSOAs:\r\n\r\n    LLSOA: `E01033264`  ->  53.384, -1.467\r\n\r\n    LLSOA: `E01033262`  ->  53.388, -1.470\r\n\r\nGEOCODE CONSTITUENCIES:\r\n\r\n    Constituency: `Sheffield Central`  ->  53.376, -1.464\r\n\r\n    Constituency: `Sheffield Hallam`  ->  53.396, -1.604\r\n\r\nREVERSE-GEOCODE TO LLSOA:\r\n\r\n    LATLON: 53.384, -1.467  ->  E01033264\r\n\r\n    LATLON: 53.388, -1.470  ->  E01033262\r\n\r\nREVERSE-GEOCODE TO GSP:\r\n\r\n    LATLON: 53.384, -1.467  ->  ('PITS_3', '_M')\r\n\r\n    LATLON: 53.388, -1.470  ->  ('NEEP_3', '_M')\r\n\r\nREVERSE-GEOCODE TO NUTS2:\r\n\r\n    LATLON: 51.326, -1.961  ->  UKK1\r\n\r\n    LATLON: 47.999, 0.234  ->  FRG0\r\n\r\n    LATLON: 50.836, 8.734  ->  DE72\r\n\r\n```\r\n\r\n\r\n\r\nIn the above example, `postcodes` and `addresses` are lists of strings, but it should be fine to use any iterator such as Numpy arrays or Pandas DataFrame columns, although the `geocode()` method will still return a list of tuples.\r\n\r\n\r\n\r\nWhen reverse-geocoding to GSP, the `reverse_geocode_gsp()` method returns both a list of Region IDs and a corresponding list of GSP / GNodes etc. Since the relationship between Region:GSP:GNode is theoretically MANY:MANY:MANY, the second object returned is a list of lists of dicts. This is rather clunky and will likely be refined in a future release. An alternative use case could disregard this second return object and instead make use of the `Geocoder.gsp_lookup` instance attribute - this is a Pandas DataFrame giving the full lookup between Regions / GSPs / GNodes / DNO License Areas (i.e. [this](https://data.nationalgrideso.com/system/gis-boundaries-for-gb-grid-supply-points/r/gsp_-_gnode_-_direct_connect_-_region_lookup) dataset on the ESO Data Portal). In testing, the `reverse_geocode_gsp()` method was able to allocate ~1 million random lat/lons to the correct GSP in average wall-clock time of around 300 seconds.\r\n\r\n\r\n\r\n### Command Line Utilities\r\n\r\n\r\n\r\n#### latlons2llsoa\r\n\r\n\r\n\r\nThis utility can be used to load a CSV file containing latitudes and longitudes and to reverse-geocode them to LLSOAs (optionally switching to Data Zones in Scotland):\r\n\r\n\r\n\r\n```\r\n\r\n>> latlons2llsoa -h\r\n\r\nusage: latlons2llsoa [-h] -f </path/to/file> -o </path/to/file> [--datazones]\r\n\r\n\r\n\r\nThis is a command line interface (CLI) for the latlons2llsoa.py module\r\n\r\n\r\n\r\noptional arguments:\r\n\r\n  -h, --help            show this help message and exit\r\n\r\n  -f </path/to/file>, --input-file </path/to/file>\r\n\r\n                        Specify a CSV file containing a list of latitudes and\r\n\r\n                        longitudes to be reverse-geocoded. The file must\r\n\r\n                        contain the columns 'latitude' and 'longitude' (it can\r\n\r\n                        contain others, all of which will be kept).\r\n\r\n  -o </path/to/file>, --output-file </path/to/file>\r\n\r\n                        Specify an output file.\r\n\r\n  --datazones           Specify to use Data Zones in Scotland.\r\n\r\n\r\n\r\nJamie Taylor, 2020-04-16\r\n\r\n```\r\n\r\n\r\n\r\n#### latlons2gsp\r\n\r\n\r\n\r\nThis utility can be used to load a CSV file containing latitudes and longitudes and to reverse-geocode them to GSPs/GNodes.\r\n\r\n\r\n\r\n```\r\n\r\n>> latlons2gsp -h\r\n\r\nusage: latlons2gsp.py [-h] -f </path/to/file> -o </path/to/file>\r\n\r\n\r\n\r\nThis is a command line interface (CLI) for the latlons2gsp.py module\r\n\r\n\r\n\r\noptional arguments:\r\n\r\n  -h, --help            show this help message and exit\r\n\r\n  -f </path/to/file>, --input-file </path/to/file>\r\n\r\n                        Specify a CSV file containing a list of latitudes and\r\n\r\n                        longitudes to be reverse-geocoded. The file must\r\n\r\n                        contain the columns 'latitude' and 'longitude' (it can\r\n\r\n                        contain others, all of which will be kept).\r\n\r\n  -o </path/to/file>, --output-file </path/to/file>\r\n\r\n                        Specify an output file.\r\n\r\n\r\n\r\nJamie Taylor, 2020-05-29\r\n\r\n```\r\n\r\n\r\n\r\n#### postcodes2latlon\r\n\r\n\r\n\r\nThis utility can be used to load a CSV file containing postcodes and to geocode them to lat/lons.\r\n\r\n\r\n\r\n```\r\n\r\n>> postcodes2latlon -h\r\n\r\nusage: postcodes2latlon.py [-h] -f </path/to/file> -o </path/to/file>\r\n\r\n\r\n\r\nThis is a command line interface (CLI) for the postcodes2latlon.py module\r\n\r\n\r\n\r\noptional arguments:\r\n\r\n  -h, --help            show this help message and exit\r\n\r\n  -f </path/to/file>, --input-file </path/to/file>\r\n\r\n                        Specify a CSV file containing a list of postcodes to\r\n\r\n                        be geocoded. The file must contain the column\r\n\r\n                        'postcode' (it can contain others, all of which will\r\n\r\n                        be kept).\r\n\r\n  -o </path/to/file>, --output-file </path/to/file>\r\n\r\n                        Specify an output file.\r\n\r\n\r\n\r\nJamie Taylor, 2020-06-12\r\n\r\n```\r\n\r\n\r\n\r\n#### bng2latlon\r\n\r\n\r\n\r\nThis utility can be used to load a CSV file containing eastings and northings and to convert them to lat/lons.\r\n\r\n\r\n\r\n```\r\n\r\n>> bng2latlon -h\r\n\r\nusage: bng2latlon.py [-h] -f </path/to/file> -o </path/to/file>\r\n\r\n\r\n\r\nThis is a command line interface (CLI) for the bng2latlon.py module\r\n\r\n\r\n\r\noptional arguments:\r\n\r\n  -h, --help            show this help message and exit\r\n\r\n  -f </path/to/file>, --input-file </path/to/file>\r\n\r\n                        Specify a CSV file containing a list of eastings and\r\n\r\n                        northings to be converted. The file must contain the\r\n\r\n                        columns 'eastings' and 'northings' (it can contain\r\n\r\n                        others, all of which will be kept).\r\n\r\n  -o </path/to/file>, --output-file </path/to/file>\r\n\r\n                        Specify an output file.\r\n\r\n\r\n\r\nJamie Taylor, 2020-06-12\r\n\r\n```\r\n\r\n\r\n\r\n## Documentation\r\n\r\n\r\n\r\nSee [here](https://sheffieldsolar.github.io/Geocode/build/html/index.html).\r\n\r\n\r\n\r\n## How do I update?\r\n\r\n\r\n\r\nRun `pip install --upgrade git+https://github.com/SheffieldSolar/Geocode/`.\r\n\r\n\r\n\r\nYou may also wish to clear all locally cached data by running the following command from terminal/command-prompt:\r\n\r\n\r\n\r\n```\r\n\r\ngeocode --clear-cache\r\n\r\n```\r\n\r\n\r\n\r\n## Developers\r\n\r\n\r\n\r\n### Running Tests\r\n\r\n\r\n\r\n```\r\n\r\n>> cd <root-dir>\r\n\r\n>> python -m unittest Tests.test_geocode\r\n\r\n```\r\n\r\n\r\n\r\n## Appendix\r\n\r\n\r\n\r\n### Code Point Open\r\n\r\n\r\n\r\nAs of version 0.4.15, the Code Point Open data is packaged with this repository, however the following instructions can be used to update the local Code Point Open dataset without re-installing the Geocode library.\r\n\r\n\r\n\r\nContains OS data © Crown copyright and database right 2018\r\n\r\n\r\n\r\nContains Royal Mail data © Royal Mail copyright and Database right 2018\r\n\r\n\r\n\r\nContains National Statistics data © Crown copyright and database right 2018\r\n\r\n\r\n\r\n#### Updating Code Point Open\r\n\r\n\r\n\r\nDownload the (free) Code Point Open data [here](https://www.ordnancesurvey.co.uk/business-government/products/code-point-open).\r\n\r\nRun the following command:\r\n\r\n\r\n\r\n```\r\n\r\n>> geocode --load-cpo-zip \"<path-to-zip-file>\"\r\n\r\n```\r\n\r\n\r\n\r\nFor example, if you saved the code point open data to 'C:\\Users\\jamie\\Downloads\\codepo_gb.zip', you would run:\r\n\r\n    \r\n\r\n```\r\n\r\n>> geocode --load-cpo-zip \"C:\\Users\\jamie\\Downloads\\codepo_gb.zip\"\r\n\r\n```\r\n\r\n\r\n\r\nN.B. If you encounter problems using the `--load-cpo-zip` utility, you might like to manually copy/paste the zip file `codepo_gb.zip` into the `geocode/code_point_open` subdirectory of the geocode module. (Do not extract the contents of the zipfile)\r\n\r\n\r\n\r\nThe CPO data will be extracted and stored locally in `geocode/code_point_open/code_point_open_<version>.p`.\r\n\r\n\r\n\r\n### GMaps\r\n\r\n\r\n\r\nIf you want to make use of the Google Maps API, you can load an API key using the command:\r\n\r\n\r\n\r\n```\r\n\r\n>> geocode --load-gmaps-key \"<your-api-key>\"\r\n\r\n```\r\n\r\n\r\n\r\nN.B. The API key will be stored in plaintext in the `geocode/google_maps/key.txt` file within your local installation. This is not secure and only appropriate when using the Geocode library for development purposes.\r\n\r\n\r\n\r\nSee [here](https://developers.google.com/maps/documentation/javascript/get-api-key) for help getting an API key.\r\n\r\n\r\n\r\nAny queries you make to the GMaps API will be cached to `geocode/google_maps/gmaps_cache_<version>.p` so that repeated queries are faster and cheaper.\r\n\r\n\r\n\r\n### ONS\r\n\r\n\r\n\r\nThe Geocode library makes use of data from the Office for National Statistics in order to geocode Lower Layer Super Output Areas (LLSOAs) in England and Wales. The first time you make use of the `Geocoder.geocode_llsoa()` method, the LLSOA (December 2011) Population Weighted Centroids data will be downloaded from the ONS API and cached locally in `geocode/ons_nrs/llsoa_centroids_<version>.p`. The first time you make use of the `Geocoder.reverse_geocode_llsoa()` method, the LLSOA (December 2011) Boundaries EW data will be downloaded from the ONS API and cached locally in `geocode/ons_nrs/llsoa_boundaries_<version>.p`. More information [here](https://geoportal.statistics.gov.uk/datasets/lower-layer-super-output-areas-december-2011-population-weighted-centroids) and [here](https://geoportal.statistics.gov.uk/datasets/lower-layer-super-output-areas-december-2011-boundaries-ew-bsc).\r\n\r\n\r\n\r\n### NRS\r\n\r\n\r\n\r\nThe Geocode library makes use of data from National Records of Scotland in order to geocode Lower Layer Super Output Areas (LLSOAs) in Scotland. The raw population-weighted centroids and boundary data is available from the NRS website, but for convenience and performance reasons the data has been re-formatted and re-projected and is packaged with this library. More information [here](https://www.nrscotland.gov.uk/statistics-and-data/geography/our-products/census-datasets/2011-census/2011-census-supporting-information).\r\n\r\n\r\n\r\nContains NRS data © Crown copyright and database right 2020\r\n\r\n\r\n\r\nContains Ordnance Survey data © Crown copyright and database right 2020\r\n\r\n\r\n\r\n### data.gov.uk\r\n\r\n\r\n\r\nThe Geocode library makes use of the Westminster Parliamentary Constituencies (December 2015) Generalised Clipped Boundaries in Great Britain&dagger; from data.gov.uk in order to geocode constituencies according to their (unweighted) geospatial centroid. More information [here](https://data.gov.uk/dataset/24c282a1-1330-427e-b154-36ff3bfa5dac/westminster-parliamentary-constituencies-december-2015-generalised-clipped-boundaries-in-great-britain). The geospatial centroids have been calculated using ESRI ArcMap's 'Feature To Point' toolbox and the derived lookup data is packaged within this respository as a pipe-separated variable file: `geocode/gov/constituency_centroids.psv`. The first time you make use of the `Geocoder.geocode_constituency()` method, this file will be loaded and cached back to `geocode/gov/constituency_centroids_<version>.p` for faster loading next time.\r\n\r\n\r\n\r\n&dagger;Contains public sector information licensed under the Open Government Licence v3.0.\r\n\r\n\r\n\r\n### NGESO Data Portal\r\n\r\n\r\n\r\nThe Geocode library makes use of GSP/GNode GIS boundaries developed by Sheffield Solar. In May 2020, these region definitions were uploaded to National Grid ESO's Data Portal - see [here](https://data.nationalgrideso.com/system/gis-boundaries-for-gb-grid-supply-points). The first time you make use of the `Geocoder.reverse_geocode_gsp()` method, the GIS data is downloaded from the Data Portal API at runtime.\r\n\r\n\r\n\r\nSupported by National Grid ESO Open Data\r\n\r\n\r\n\r\nSubject to [NGESO Open Licence](https://data.nationalgrideso.com/licence)\r\n\r\n\r\n\r\nTo update your locally cached boundary definitions, clear your local cache:\r\n\r\n\r\n\r\n```\r\n\r\ngeocode --clear-cache\r\n\r\n```\r\n\r\n\r\n\r\n### Eurostat\r\n\r\n\r\n\r\nThe Geocode library makes use of the eurostat API to download boundaries for NUTS (Nomenclature of territorial units for statistics) regions. For more information, see [here](https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts). For license conditions, see the FAQ section of the Europa website [here](https://ec.europa.eu/eurostat/web/gisco/faq).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/SheffieldSolar/Geocode/archive/refs/tags/0.12.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SheffieldSolar/Geocode",
    "keywords": "geocode",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geocode-ss",
    "package_url": "https://pypi.org/project/geocode-ss/",
    "platform": null,
    "project_url": "https://pypi.org/project/geocode-ss/",
    "project_urls": {
      "Download": "https://github.com/SheffieldSolar/Geocode/archive/refs/tags/0.12.0.tar.gz",
      "Homepage": "https://github.com/SheffieldSolar/Geocode"
    },
    "release_url": "https://pypi.org/project/geocode-ss/0.12.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "googlemaps",
      "requests",
      "shapely",
      "pyshp",
      "pyproj",
      "geopandas",
      "pylint ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "numpydoc ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Geocode postcodes, addresses or LLSOA using the Code Point Open database and GMaps API.",
    "version": "0.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17402483,
  "releases": {
    "0.11.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5ef9baef08dea6b24900452aecf0fe2b99766c36a6e9447f5c9b3c4c9112f27",
          "md5": "7044e3a00b1df66df2edc9a3de8493a4",
          "sha256": "6f406efa4142f2a18b06968a573d34b0f09a48b001ad1321702cc4cdb60e8747"
        },
        "downloads": -1,
        "filename": "geocode_ss-0.11.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7044e3a00b1df66df2edc9a3de8493a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 86246794,
        "upload_time": "2023-02-23T17:18:09",
        "upload_time_iso_8601": "2023-02-23T17:18:09.193693Z",
        "url": "https://files.pythonhosted.org/packages/f5/ef/9baef08dea6b24900452aecf0fe2b99766c36a6e9447f5c9b3c4c9112f27/geocode_ss-0.11.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "587f35dec462166cbeb0ea3ff61c54082f743dde6519c001f9a70f3f301ed73f",
          "md5": "0d52451de89355fbb1a621b6c2e30dae",
          "sha256": "1a5e3db311b96b4626ee7595cab8bfd5d1bfb383e2a0b6dea0dfdd07b1a0c151"
        },
        "downloads": -1,
        "filename": "geocode-ss-0.11.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0d52451de89355fbb1a621b6c2e30dae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86252540,
        "upload_time": "2023-02-23T17:18:53",
        "upload_time_iso_8601": "2023-02-23T17:18:53.014271Z",
        "url": "https://files.pythonhosted.org/packages/58/7f/35dec462166cbeb0ea3ff61c54082f743dde6519c001f9a70f3f301ed73f/geocode-ss-0.11.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0928b1b390dd0b7dafbee1ce836fd224b3592203d3d6372c494f82002554171",
          "md5": "2724120d05e001f564e807c0aededc98",
          "sha256": "09109d5017ac20b8dc7b740185596cfc63e2490264dcc4285c26ef001f93c0b0"
        },
        "downloads": -1,
        "filename": "geocode_ss-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2724120d05e001f564e807c0aededc98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 86249107,
        "upload_time": "2023-03-22T18:09:03",
        "upload_time_iso_8601": "2023-03-22T18:09:03.930310Z",
        "url": "https://files.pythonhosted.org/packages/d0/92/8b1b390dd0b7dafbee1ce836fd224b3592203d3d6372c494f82002554171/geocode_ss-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2caeffd48cd524a03208b41b7946fbbc3118c88bba9f7c2cb68aaab1f025aff",
          "md5": "4d742c436fbe254219ca1c4e6249ee96",
          "sha256": "1b517a40a4617384003e4f7d2fe99d158bf0a7eef02819b28ad38bc944340449"
        },
        "downloads": -1,
        "filename": "geocode-ss-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d742c436fbe254219ca1c4e6249ee96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86253998,
        "upload_time": "2023-03-22T18:09:47",
        "upload_time_iso_8601": "2023-03-22T18:09:47.230107Z",
        "url": "https://files.pythonhosted.org/packages/b2/ca/effd48cd524a03208b41b7946fbbc3118c88bba9f7c2cb68aaab1f025aff/geocode-ss-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0928b1b390dd0b7dafbee1ce836fd224b3592203d3d6372c494f82002554171",
        "md5": "2724120d05e001f564e807c0aededc98",
        "sha256": "09109d5017ac20b8dc7b740185596cfc63e2490264dcc4285c26ef001f93c0b0"
      },
      "downloads": -1,
      "filename": "geocode_ss-0.12.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2724120d05e001f564e807c0aededc98",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 86249107,
      "upload_time": "2023-03-22T18:09:03",
      "upload_time_iso_8601": "2023-03-22T18:09:03.930310Z",
      "url": "https://files.pythonhosted.org/packages/d0/92/8b1b390dd0b7dafbee1ce836fd224b3592203d3d6372c494f82002554171/geocode_ss-0.12.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2caeffd48cd524a03208b41b7946fbbc3118c88bba9f7c2cb68aaab1f025aff",
        "md5": "4d742c436fbe254219ca1c4e6249ee96",
        "sha256": "1b517a40a4617384003e4f7d2fe99d158bf0a7eef02819b28ad38bc944340449"
      },
      "downloads": -1,
      "filename": "geocode-ss-0.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d742c436fbe254219ca1c4e6249ee96",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 86253998,
      "upload_time": "2023-03-22T18:09:47",
      "upload_time_iso_8601": "2023-03-22T18:09:47.230107Z",
      "url": "https://files.pythonhosted.org/packages/b2/ca/effd48cd524a03208b41b7946fbbc3118c88bba9f7c2cb68aaab1f025aff/geocode-ss-0.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}