{
  "info": {
    "author": "Anton Bryzgalov",
    "author_email": "tony.bryzgaloff@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# aioevproc\n\nIt is a minimal async/sync event processing framework. Has no dependencies and\n    uses nothing except pure Python 3.8.\n\n_TL;DR_ Do not have much time? See [recap on examples](#recap-on-examples) and\n    [recap on conditions](#recap-on-conditions). Now go and use `aioevproc`! :)\n\n## Examples\n\nSimplest example for a single async handler, just echo the message text:\n\n```python\nfrom aioevproc import EventsProcessor, handler, Event\n\nclass EchoTelegramBot(EventsProcessor):\n    @handler(lambda event: 'message' in event and 'text' in event['message'])\n    async def echo_message(self, event: Event) -> None:\n        await self.reply_to_message(text=event['message']['text'])\n```\n\nA little bit more complex Telegram bot example, see the\n    [explanation below](#what-do-the-examples-demonstrate):\n\n```python\nfrom aioevproc import EventsProcessor, handler, Event\nfrom contextlib import asynccontextmanager, contextmanager\n\nclass TelegramBot(EventsProcessor):\n    # synchronous middleware for any exception: log exception\n    @handler()\n    @contextmanager\n    def log_exception(self, event: Event) -> Generator[None, None, None]:\n        try:\n            yield\n        except:\n            logging.exception('Error!')\n\n    # async middleware for any exception: send excuse message to the user\n    @handler()\n    @asynccontextmanager\n    def send_excuse_message(self, event: Event) -> AsyncGenerator[None, None]:\n        try:\n            yield\n        except:\n            await self.send_message('Sorry!')\n\n    # synchronous handler for all updates: log message\n    @handler()\n    def log_update_id(self, event: Event) -> Literal[True]:\n        logging.info(event['update_id'])\n        return True  # call following handlers\n\n    # async handler to check if user is admin for update with messages and cb\n    @handler(lambda event: 'message' in event or 'callback_query' in event)\n    async def check_admin(self, event: Event) -> bool:\n        # the next handler will be called only if this returns True\n        return event['message']['from_user']['id'] in await self.get_admins()\n\n    # async handler to echo updates containing a message\n    @handler(lambda event: 'message' in event and 'text' in event['message'])\n    async def echo_message(self, event: Event) -> None:\n        # if the update contains a message then echo it\n        await self.reply_to_message(text=event['message']['text'])\n\n    # async handler to answer a callback query\n    @handler(lambda event: 'callback_query' in event)\n    async def echo_message(self, event: Event) -> None:\n        # if the update does not contain a message but a callback query, answer\n        await self.answer_callback_query(event['callback_query']['id'])\n```\n\n## What do the examples demonstrate?\n\n`handler` decorates methods of `EventsProcessor` subclasses. The method can be\n    one of: async function (like `check_admin`, `handle_message` and\n    `echo_message` in the example above), sync function (`log_update_id`), async\n    context manager (`send_excuse_message`) or sync context manager\n    (`log_exception`).\n\nAll of the handlers are called in the same order as they are declared in the\n    class body. Middlewares follow the same rule: they are entered in the order\n    of declaration and exited in the reversed order (in a recursive manner).\n\nSync and async handlers may return a value: if it is not a truthy value then\n    none of the following handlers will be called and event processing will be\n    stopped at the handler which **did not** return truthy value.\n\nPlease notice: if you return nothing from the sync/async handler method (means\n    you implicitly `return None`) then none of the following handlers will be\n    called. This is an intended default behavior since usually an event requires\n    a single handler. None is a falsy (not truthy) value.\n\nReturning `True` from the handler is useful for logging purposes: the logging\n    method should not block further processing of the event. This is shown in\n    the example below (`log_update_id`) as well as the filtering use case for\n    admins: if the user is not an admin then `check_admin` will return `False`\n    and no further processing will be done.\n\nMiddlewares are based on context managers and are intended to be used for\n    exceptions handling. Also use them when some related actions are required\n    before and after the event is processed by other handlers: for example, for\n    measuring the execution time.\n\n### Recap on examples\n\nLet's sum up on the [examples](#examples):\n1. `aioevproc` supports both sync and async handlers and middlewares.\n2. Every handler or middleware has to be a method of `EventsProcessor` subclass.\n3. If the handler does not return exactly `True` then the following handlers are\n    not called.\n4. Middlewares are sync/async context managers.\n5. Handlers and middlewares are called in the same order as they are declared.\n\n## How to use the handlers conditions\n\nHandler usually has to be applied to certain types of events, not all. The\n    following handler will be applied only to updates containing a message:\n```python\n@handler(lambda event: 'message' in event)\nasync def handle_event(self, event: Event) -> None:\n    pass\n```\n\nIf the condition check fails then the next handler condition will be checked:\n```python\n@handler(lambda event: False)\ndef always_skipped(self, event: Event) -> Literal[False]:\n    # this handler is never called since its predicate always evaluates to False\n    return False  # has no effect since this handler is not called\n\n# since previous handler condition check failed this one will be checked next\n@handler(lambda event: 'edited_message' in event)\ndef log_message_edit(self, event: Event) -> None:\n    pass\n```\n\nPlease notice: if the handler condition check failed then the handler's return\n    value does not affect the next handlers. The return value of the handler\n    affects the next handlers only if the handler itself is called (meaning \n    that its condition check is passed).\n\nYou can specify multiple predicates in a `handler` call: this will make handler\n    to be called only if **all** of the predicates evaluate to a truthy value\n    for the event. Example below shows the handers which will be applied only to\n    updates with text messages:\n```python\n@handler(\n        lambda event: 'message' in event,\n        lambda event: 'text' in event['message'],\n)\nasync def handle_event(self, event: Event) -> None:\n    pass\n```\n\nThe predicates are evaluated in the same order as they are declared. So the\n    above pair of conditions is equivalent to\n    `'message' in event and 'text' in event['message']`. This means that\n    specifying multiple predicates for a single `handler` call implements AND\n    semantics (conditions conjunction).\n\nIf you need to apply single handler if **any** of the conditions is true, use\n    multiple `handler` calls:\n```python\n@handler(lambda event: 'message' in event)\n@handler(lambda event: 'callback_query' in event)\nasync def handle_event(self, event: Event) -> None:\n    pass\n```\n\nThis will apply the handler for either update with a message or update with a\n    callback query. This form implements OR semantics (conditions disjunction).\n\nPlease notice: the implementation of `aioevproc` checks handlers predicates in\n    the same order as they are declared. First `'message' in event` will be\n    checked and after that the `'callback_query' in event` predicate will be\n    evaluated. This is a reversed order to how Python applies decorators: Python\n    applies the most inner decorator first. But `aioevproc` applies the most\n    outer `handler` call first since it is more intuitive.\n\nIf you need a handler to be applied unconditionally then use just `handler()`\n    without arguments.\n\nPlease notice: you cannot use `handler()` without arguments on a handler with\n    any other `handler` call with arguments since this has no sense:\n```python\n@handler()  # will raise an AssertionError\n@handler(lambda event: 'message' in event)\nasync def handle_event(self, event: Event) -> None:\n    pass\n```\n\nDon't forget to `return True` from unconditionally applied handler to not ignore\n    all of the following handlers!\n\n### Recap on conditions\n\nLet's sum up on [conditions](#how-to-use-the-handlers-conditions):\n1. Single `handler` call accepts multiple predicates as arguments. The handler\n    then will be called only if **all** of the predicates are true (AND semantics).\n2. If a handler method (or middleware) is decorated with multiple `handler`\n    calls then the handler will be called if **any** of the `handler`s'\n    conditions is true (OR semantics).\n3. OR and AND semantics can be combined.\n4. If the handler's conditions check failed then the handler is skipped and the\n    next handlers' conditions are checked until the matching handler is found.\n5. All the conditions are checked in the same order as they are declared. The\n    most outer `handler` decorator is applied first.\n6. Handler decorated with `handler()` w/o arguments is applied unconditionally.\n\n## Installation\n\n`pip install aioevproc`\n\n## How to run tests\n\nFrom project root directory: `python -m unittest discover -s tests/unit`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bryzgaloff/aioevproc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioevproc",
    "package_url": "https://pypi.org/project/aioevproc/",
    "platform": "",
    "project_url": "https://pypi.org/project/aioevproc/",
    "project_urls": {
      "Homepage": "https://github.com/bryzgaloff/aioevproc"
    },
    "release_url": "https://pypi.org/project/aioevproc/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Minimal async/sync event processing framework on pure Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7309509,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26cd49557375be4cbafe4db76e0e055bbcec40cb985bb84ad96a331a3be22a44",
          "md5": "88ae7cfd68af95886091d49ec15fb08a",
          "sha256": "72d13dfd0214259961501dfb44a0f9c466d4fa25c4d0128bb72910510e9dabb1"
        },
        "downloads": -1,
        "filename": "aioevproc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88ae7cfd68af95886091d49ec15fb08a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6024,
        "upload_time": "2020-05-21T09:29:38",
        "upload_time_iso_8601": "2020-05-21T09:29:38.031091Z",
        "url": "https://files.pythonhosted.org/packages/26/cd/49557375be4cbafe4db76e0e055bbcec40cb985bb84ad96a331a3be22a44/aioevproc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c3daa1721f571dec2f9af8a1e4b5ffc0f76bd7014df00f65876360605f38a61",
          "md5": "a17508481dd1fc3324852ff372eeef4a",
          "sha256": "5020c2786045763b03e2b54b2fbcad7b8172d058dc73048a295f07d882e37b38"
        },
        "downloads": -1,
        "filename": "aioevproc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a17508481dd1fc3324852ff372eeef4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5715,
        "upload_time": "2020-05-21T09:29:40",
        "upload_time_iso_8601": "2020-05-21T09:29:40.341678Z",
        "url": "https://files.pythonhosted.org/packages/3c/3d/aa1721f571dec2f9af8a1e4b5ffc0f76bd7014df00f65876360605f38a61/aioevproc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53deccb8137d16e1e0700802b4084d0afb4e4dd82ba98581b96c56a4bb7b154b",
          "md5": "e044763f0be9a44376e98308626aaa19",
          "sha256": "49300da855e2678b2f864054b3d24f6b71c603cce3c7b6cf547777d022c9c4ce"
        },
        "downloads": -1,
        "filename": "aioevproc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e044763f0be9a44376e98308626aaa19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6061,
        "upload_time": "2020-05-23T17:16:44",
        "upload_time_iso_8601": "2020-05-23T17:16:44.294007Z",
        "url": "https://files.pythonhosted.org/packages/53/de/ccb8137d16e1e0700802b4084d0afb4e4dd82ba98581b96c56a4bb7b154b/aioevproc-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6019d5d3abf081bf73608bccf4aacd2be37fce25fb0110e652b755c0fe31386d",
          "md5": "0f09494a4276bae85d7c8f5983848ad9",
          "sha256": "a80c23ef9789e218c87a71c3efc9c5d6281660bcde34c3fc9e9831310b6b4403"
        },
        "downloads": -1,
        "filename": "aioevproc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f09494a4276bae85d7c8f5983848ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5763,
        "upload_time": "2020-05-23T17:16:45",
        "upload_time_iso_8601": "2020-05-23T17:16:45.853255Z",
        "url": "https://files.pythonhosted.org/packages/60/19/d5d3abf081bf73608bccf4aacd2be37fce25fb0110e652b755c0fe31386d/aioevproc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53deccb8137d16e1e0700802b4084d0afb4e4dd82ba98581b96c56a4bb7b154b",
        "md5": "e044763f0be9a44376e98308626aaa19",
        "sha256": "49300da855e2678b2f864054b3d24f6b71c603cce3c7b6cf547777d022c9c4ce"
      },
      "downloads": -1,
      "filename": "aioevproc-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e044763f0be9a44376e98308626aaa19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6061,
      "upload_time": "2020-05-23T17:16:44",
      "upload_time_iso_8601": "2020-05-23T17:16:44.294007Z",
      "url": "https://files.pythonhosted.org/packages/53/de/ccb8137d16e1e0700802b4084d0afb4e4dd82ba98581b96c56a4bb7b154b/aioevproc-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6019d5d3abf081bf73608bccf4aacd2be37fce25fb0110e652b755c0fe31386d",
        "md5": "0f09494a4276bae85d7c8f5983848ad9",
        "sha256": "a80c23ef9789e218c87a71c3efc9c5d6281660bcde34c3fc9e9831310b6b4403"
      },
      "downloads": -1,
      "filename": "aioevproc-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f09494a4276bae85d7c8f5983848ad9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5763,
      "upload_time": "2020-05-23T17:16:45",
      "upload_time_iso_8601": "2020-05-23T17:16:45.853255Z",
      "url": "https://files.pythonhosted.org/packages/60/19/d5d3abf081bf73608bccf4aacd2be37fce25fb0110e652b755c0fe31386d/aioevproc-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}