{
  "info": {
    "author": "Maurice Lambert",
    "author_email": "mauricelambert434@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![WebScripts Logo](https://mauricelambert.github.io/info/python/code/WebScripts/small_logo.png \"WebScripts logo\")\n\n# WebScriptsClient\n\n## Description\n\nThis package implements the \"official\" WebScriptsClient as a python module with a CLI.\n\nFeatures implemented:\n\n - Get scripts, arguments and informations\n - Execute scripts on WebScripts Server\n - Download file from WebScripts Server\n - Upload file on WebScripts Server\n - Send requests or reports to WebScripts Administrator\n - Test the WebScripts Server\n\n## Requirements\n\nThis package require:\n\n - python3\n - python3 Standard Library\n\n## Installation\n\n```bash\npip install WebScriptsClient\n```\n\n## Usages\n\n### Command line\n\n#### Module\n\n```bash\npython3 -m WebScriptsClient -h\n```\n\n#### Python executable\n\n```bash\npython3 WebScriptsClient.pyz --help\n```\n\n#### Command\n\n```bash\n# Tests\nWebScriptsClient -v -u Admin -p Admin test http://127.0.0.1:8000/web/                                  # Test your WebScripts Server with verbose mode (log level DEBUG)\n\n# Informations\nWebScriptsClient info http://127.0.0.1:8000/web/                                                       # Script informations without authentication\nWebScriptsClient -a AdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdmin info -a -c -d -s \"test_config.py\" \"/auth/\" http://127.0.0.1:8000/web/    # Get informations about test_config.py and /auth/ scripts without category, description and arguments (authenticated with API key)\n\n# Execution\nWebScriptsClient -A exec \"test_config.py\" http://127.0.0.1:8000/web/                                   # Run a script named test_config.py without arguments using the API key (prompt, interactive mode)\npython -c \"print('test')\" | WebScriptsClient -u Admin -p Admin exec \"test_config.py\" -o test.txt -I http://127.0.0.1:8000/web/ # Run a script named test_config.py without arguments, using username and password for authentication, redirect output in file named test.txt and use STDIN as inputs\nWebScriptsClient -u Admin -p Admin exec \"test_config.py\" -I test.txt http://127.0.0.1:8000/web/        # Run a script named test_config.py without arguments, using username and password for authentication and using test.txt as inputs\nWebScriptsClient -u Admin -p Admin exec \"test_config.py --test test3 --test4 -t\" -i \"test1\" \"test2\" http://127.0.0.1:8000/web/ # Run a script named test_config.py with arguments, using username and password for authentication and using inputs\n\n# Upload\nWebScriptsClient -u Admin -p Admin upload -r 1000 -w 1000 -d 1000 -f test.txt test.txt http://127.0.0.1:8000/web/ # Upload a local file named test.txt on WebScripts Server with read, write and delete permissions equal to 1000 (group Admin in default WebScripts database) using the default Admin account. The file will be named test.txt on the WebScripts Server.\nWebScriptsClient -u Admin -p Admin upload -6 -b -C -H -c dGVzdA== test.txt http://127.0.0.1:8000/web/             # Upload a file content on WebScripts Server using Base64 encoding, without compression, as binary and hidden file. The file will be named test.txt on the WebScripts Server.\npython -c \"print('test')\" | WebScriptsClient -u Admin -p Admin upload test.txt http://127.0.0.1:8000/web/         # Upload a file content from STDIN on the WebScript Server. The file will be named test.txt on the WebScripts Server.\n\n# Download\nWebScriptsClient -u Admin -p Admin download -f \"LICENSE.txt\" \"test.txt\" http://127.0.0.1:8000/web/     # Download files (LICENSE.txt and test.txt) from WebScripts Server\nWebScriptsClient -u Admin -p Admin download -s -f \"LICENSE.txt\" \"test.txt\" http://127.0.0.1:8000/web/  # Download files (LICENSE.txt and test.txt) from WebScripts Server and the save it locally with same names\nWebScriptsClient -u Admin -p Admin download -o test.txt -f \"LICENSE.txt\" \"test.txt\" http://127.0.0.1:8000/web/ # Download files (LICENSE.txt and test.txt) from WebScripts Server and save it locally in test.txt (file concatenation)\n\n# Request or report\nWebScriptsClient -u Admin -P request -s title -n Maurice -r request -c 500 http://127.0.0.1:8000/web/  # Request or report to WebScripts Administrator using username and password (prompt, interactive mode), adding Subject, Name, Message and the HTTP error code\n```\n\n### Python script\n\n```python\nfrom WebScriptsClient import WebScriptsClient\n\nclient = WebScriptsClient(\"http://127.0.0.1:8000/web/\", username=\"Admin\", password=\"Admin\", api_key=\"AdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdminAdmin\")\nclient.auth()\n\n# Informations\nscripts = client.get_scripts(refresh=False)\n\n# Execution\narguments = client.args_command_to_webscripts([\"--test\", \"test1\", \"test3\"])\ninputs = client.args_command_to_webscripts([\"--test\", \"test1\", \"test3\"], is_inputs=True)\nfor output, error, code in client.execute_script(\"test_config.py\", arguments, inputs):\n    print(output, end=\"\")\nprint(f\"Error code: {code}\")\nprint(f\"Error: {error}\")\n\n# Upload\nclient.upload(\"upload.txt\", open(\"upload.txt\"), no_compression=False, is_base64=False, hidden=False, binary=False, read_permissions=0, write_permissions=1000, delete_permissions=1000)\n\n# Download\nfile = client.download(\"upload.txt\", save=True)\n\n# Request\nclient.request(\"Access\", \"I need access to test_config.py\", \"Maurice LAMBERT\", error_code=500)\n```\n\n## Links\n\n - [Github Page](https://github.com/mauricelambert/WebScriptsClient/)\n - [Documentation](https://mauricelambert.github.io/info/python/code/WebScriptsClient.html)\n - [Pypi package](https://pypi.org/project/WebScriptsClient/)\n - [Python Executable](https://mauricelambert.github.io/info/python/code/WebScriptsClient.pyz)\n - [Windows Executable](https://github.com/mauricelambert/WebScriptsClient/releases/download/v0.0.3/WebScriptsClient.exe)\n\n## Help\n\n```text\npython WebScriptsClient.py --help\nusage: WebScriptsClient.py [-h] [-v] [-i] [-u USERNAME] [-p PASSWORD | -P] [-a API_KEY | -A] {info,exec,upload,download,request,test} ... url\n\nThis package is the \"official\" WebScripts client. This package implements client for default WebScripts features.\n\npositional arguments:\n  {info,exec,upload,download,request,test}\n                        Use default features of the WebScripts server.\n    info                Get the available scripts, arguments, and information about them.\n    exec                Execute a script on WebScripts Server.\n    upload              Upload a file on WebScripts Server.\n    download            Download files from WebScripts Server.\n    request             Request or report to WebScripts administrator.\n    test                Test WebScripts server and client.\n  url                   URL of the WebScripts server, example: http://127.0.0.1:8000\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Verbose mode (print logs).\n  -i, --insecure        Do not check SSL certificate.\n  -u USERNAME, --username USERNAME\n                        WebScripts username to use for this connection.\n  -p PASSWORD, --password PASSWORD\n                        WebScripts password to use for this connection.\n  -P, --password-prompt\n                        Interactive password prompt.\n  -a API_KEY, --api-key API_KEY\n                        WebScripts password to use for this connection.\n  -A, --api-key-prompt  Interactive API key prompt.\n```\n\n```text\npython WebScriptsClient.py info --help\nusage: WebScriptsClient.py info [-h] [-a] [-d] [-c] [-s SCRIPTS [SCRIPTS ...]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --no-arguments    Do not print arguments.\n  -d, --no-descriptions\n                        Do not print description.\n  -c, --no-categories   Do not print categories.\n  -s SCRIPTS [SCRIPTS ...], --scripts SCRIPTS [SCRIPTS ...]\n                        Information about specific scripts.\n```\n\n```text\npython WebScriptsClient.py exec --help\nusage: WebScriptsClient.py exec [-h] [-o [OUTPUT_FILENAME]] [-i INPUTS [INPUTS ...] | -I [INPUT_FILENAME]] command\n\npositional arguments:\n  command               Command to execute script on WebScripts Server.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o [OUTPUT_FILENAME], --output-filename [OUTPUT_FILENAME], --output [OUTPUT_FILENAME]\n                        Output file to save the result.\n  -i INPUTS [INPUTS ...], --inputs INPUTS [INPUTS ...]\n                        Inputs value for script inputs.\n  -I [INPUT_FILENAME], --input-filename [INPUT_FILENAME], --input [INPUT_FILENAME]\n                        Input file for script inputs.\n```\n\n```text\npython WebScriptsClient.py upload --help\nusage: WebScriptsClient.py upload [-h] [-6] [-C] [-H] [-b] [-r READ_PERMISSION] [-w WRITE_PERMISSION] [-d DELETE_PERMISSION] [-f FILE | -c CONTENT] filename\n\npositional arguments:\n  filename              The file name of the uploaded file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -6, --base64, --64    Upload a base64 encoded file on the server.\n  -C, --no-compression  Do not compress the file on the server.\n  -H, --hidden          Hide the file on the server.\n  -b, --binary, --bin   Upload a binary file on the server.\n  -r READ_PERMISSION, --read-permission READ_PERMISSION, --read READ_PERMISSION\n                        Read permission on the server.\n  -w WRITE_PERMISSION, --write-permission WRITE_PERMISSION, --write WRITE_PERMISSION\n                        Write permission on the server.\n  -d DELETE_PERMISSION, --delete-permission DELETE_PERMISSION, --delete DELETE_PERMISSION\n                        Delete permission on the server.\n  -f FILE, --file FILE  The filename of the file to upload on the server.\n  -c CONTENT, --content CONTENT\n                        Content of the file.\n```\n\n```text\npython WebScriptsClient.py download --help\nusage: WebScriptsClient.py download [-h] -f FILENAMES [FILENAMES ...] [-o [OUTPUT_FILENAME]] [-s]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FILENAMES [FILENAMES ...], --filenames FILENAMES [FILENAMES ...]\n                        Filenames to download.\n  -o [OUTPUT_FILENAME], --output-filename [OUTPUT_FILENAME], --output [OUTPUT_FILENAME]\n                        Filename to write the downloaded content.\n  -s, --save            Save the download in the same local filename.\n```\n\n```text\npython WebScriptsClient.py request --help\nusage: WebScriptsClient.py request [-h] [-s SUBJECT] [-n NAME] [-r REQUEST] [-c ERROR_CODE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SUBJECT, --subject SUBJECT\n                        The request/report subject.\n  -n NAME, --name NAME  Your name (Firstname LASTNAME).\n  -r REQUEST, --request REQUEST\n                        The request/report.\n  -c ERROR_CODE, --error-code ERROR_CODE\n                        The HTTP error code {403, 404, 406, 500 ...}.\n```\n\n```text\npython WebScriptsClient.py test --help\nusage: WebScriptsClient.py test [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n## Licence\n\nLicensed under the [GPL, version 3](https://www.gnu.org/licenses/).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mauricelambert/WebScriptsClient",
    "keywords": "WebScripts,Client,API,CLI",
    "license": "GPL-3.0 License",
    "maintainer": "Maurice Lambert",
    "maintainer_email": "mauricelambert434@gmail.com",
    "name": "WebScriptsClient",
    "package_url": "https://pypi.org/project/WebScriptsClient/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/WebScriptsClient/",
    "project_urls": {
      "Documentation": "https://mauricelambert.github.io/info/python/code/WebScriptsClient.html",
      "Homepage": "https://github.com/mauricelambert/WebScriptsClient",
      "Python Executable": "https://mauricelambert.github.io/info/python/code/WebScriptsClient.pyz",
      "Windows Executable": "https://github.com/mauricelambert/WebScriptsClient/releases/download/v0.0.3/WebScriptsClient.exe"
    },
    "release_url": "https://pypi.org/project/WebScriptsClient/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "This package implements the \"official\" WebScripts client.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12901128,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e8a59895b8b2b07a3ce2b25862af8752efa45f03b90e4d3e72b9f615ef1beef",
          "md5": "b82520103eef8cf461b2e437d438d735",
          "sha256": "75d5c8ea544a8f0b47689f5cef0432a00de2e12224d3778a7f8af94727f2ecc6"
        },
        "downloads": -1,
        "filename": "WebScriptsClient-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b82520103eef8cf461b2e437d438d735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26443,
        "upload_time": "2022-01-07T22:00:50",
        "upload_time_iso_8601": "2022-01-07T22:00:50.237330Z",
        "url": "https://files.pythonhosted.org/packages/1e/8a/59895b8b2b07a3ce2b25862af8752efa45f03b90e4d3e72b9f615ef1beef/WebScriptsClient-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9d36075cb4c2778f491910b9656c4074abf36516f479133475a8bf0d6353fad",
          "md5": "7882cdba331636108df5edd8d7c3613e",
          "sha256": "15ec2f70bee790d8643ecb8fe9483c73e99b5a4bf31271e8cfec827d6e9370b5"
        },
        "downloads": -1,
        "filename": "WebScriptsClient-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7882cdba331636108df5edd8d7c3613e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26461,
        "upload_time": "2022-01-08T22:23:00",
        "upload_time_iso_8601": "2022-01-08T22:23:00.960518Z",
        "url": "https://files.pythonhosted.org/packages/d9/d3/6075cb4c2778f491910b9656c4074abf36516f479133475a8bf0d6353fad/WebScriptsClient-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a6d8fd9cd020211d35de6dd6cf3fdbb9861a3787c37179ee1e09a24f5cdf1ac",
          "md5": "c541d34de076ab6ff256817e49b74640",
          "sha256": "f8e208c5ccd7cd34da7704ff6274498570835dec8b58eb106f515590955c3e5f"
        },
        "downloads": -1,
        "filename": "WebScriptsClient-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c541d34de076ab6ff256817e49b74640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 133575,
        "upload_time": "2022-02-15T19:42:52",
        "upload_time_iso_8601": "2022-02-15T19:42:52.760683Z",
        "url": "https://files.pythonhosted.org/packages/8a/6d/8fd9cd020211d35de6dd6cf3fdbb9861a3787c37179ee1e09a24f5cdf1ac/WebScriptsClient-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a56a29b60395037a5d3cfe4cb8877e5be847b200f4ad33c1e7fd0e5ecf738db",
          "md5": "60a602f489d3bb9e7dc76b661151541a",
          "sha256": "49ba9b601df1e1cbbef5edd4500c0519fda1fc3ca3227aade3b4fd4ed65377c4"
        },
        "downloads": -1,
        "filename": "WebScriptsClient-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "60a602f489d3bb9e7dc76b661151541a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26843,
        "upload_time": "2022-02-15T19:42:54",
        "upload_time_iso_8601": "2022-02-15T19:42:54.553093Z",
        "url": "https://files.pythonhosted.org/packages/6a/56/a29b60395037a5d3cfe4cb8877e5be847b200f4ad33c1e7fd0e5ecf738db/WebScriptsClient-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a56a29b60395037a5d3cfe4cb8877e5be847b200f4ad33c1e7fd0e5ecf738db",
        "md5": "60a602f489d3bb9e7dc76b661151541a",
        "sha256": "49ba9b601df1e1cbbef5edd4500c0519fda1fc3ca3227aade3b4fd4ed65377c4"
      },
      "downloads": -1,
      "filename": "WebScriptsClient-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "60a602f489d3bb9e7dc76b661151541a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26843,
      "upload_time": "2022-02-15T19:42:54",
      "upload_time_iso_8601": "2022-02-15T19:42:54.553093Z",
      "url": "https://files.pythonhosted.org/packages/6a/56/a29b60395037a5d3cfe4cb8877e5be847b200f4ad33c1e7fd0e5ecf738db/WebScriptsClient-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}