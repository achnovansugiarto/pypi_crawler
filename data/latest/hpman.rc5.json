{
  "info": {
    "author": "Xinyu Zhou",
    "author_email": "zxy@megvii.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![hpman logo](https://github.com/megvii-research/hpman/blob/master/assets/hpman-logo.png)\n\n---\n\n# hpman (超参侠): The uncompromising hyperparameter manager.\n\n[![Build Status](https://travis-ci.com/sshao0516/hpman.svg?token=CYoygxuBp4p1Cy7SznNt&branch=master)](https://travis-ci.com/sshao0516/hpman)\n[![Docs](https://readthedocs.com/projects/megvii-hpman/badge/?version=latest)](https://megvii-hpman.readthedocs-hosted.com/en/latest/)\n[![codecov](https://codecov.io/gh/sshao0516/hpman/branch/master/graph/badge.svg?token=XVeNX2NtUD)](https://codecov.io/gh/sshao0516/hpman)\n\nEnglish | [简体中文](./README_CN.md)\n\n**hpman** is a hyperparameter manager (HPM) library that truly make sense.\nIt enables a Distributed-Centralized HPM experience in deep learning\nexperiment. You can define hyperparameters anywhere, but manage them as a\nwhole.\n\nhpman is intended to be used as a basic building blocks for downstream tools, such as\ncommand line interface, IDE integration, experiment management system, etc.\n\nhpman supports Python version greater equal than 3.5.\n\n- [hpman (超参侠): The uncompromising hyperparameter manager.](#hpman-%e8%b6%85%e5%8f%82%e4%be%a0-the-uncompromising-hyperparameter-manager)\n- [Story / Background](#story--background)\n  - [Centralized HPM](#centralized-hpm)\n  - [However ...](#however)\n  - [Distributed HPM](#distributed-hpm)\n  - [Distributed-Centralized HPM](#distributed-centralized-hpm)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Features](#features)\n  - [Design principles](#design-principles)\n  - [Aribitrary Imports](#aribitrary-imports)\n  - [Define Hyperparameters](#define-hyperparameters)\n  - [Static Parsing](#static-parsing)\n  - [Runtime Value Getter/Setter](#runtime-value-gettersetter)\n  - [Hints](#hints)\n  - [Nested Hyperparameters](#nested-hyperparameters)\n- [Contributing](#contributing)\n- [License](#license)\n\n# Story / Background\n\n`lib.py`:\n```python\n# File: lib.py\nfrom hpman.m import _\n\n\ndef add():\n    return _(\"a\", 0) + _(\"b\", 0)\n\n\ndef mult():\n    return _(\"a\") * _(\"b\")\n```\n\n`main.py`:\n```python\n#!/usr/bin/env python3\nimport os\nimport argparse\n\nfrom hpman.m import _\n\nimport lib\n\n\ndef main():\n    basedir = os.path.dirname(os.path.realpath(__file__))\n    _.parse_file(basedir)\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-a\", default=_.get_value(\"a\"), type=int)\n    parser.add_argument(\"-b\", default=_.get_value(\"b\"), type=int)\n    args = parser.parse_args()\n\n    _.set_value(\"a\", args.a)\n    _.set_value(\"b\", args.b)\n\n    print(\"a = {}\".format(_.get_value(\"a\")))\n    print(\"b = {}\".format(_.get_value(\"b\")))\n    print(\"lib.add() = {}\".format(lib.add()))\n    print(\"lib.mult() = {}\".format(lib.mult()))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nResults:\n```bash\n$ ./main.py\na = 0\nb = 0\nlib.add() = 0\nlib.mult() = 0\n\n$ ./main.py -a 2 -b 3\na = 2\nb = 3\nlib.add() = 5\nlib.mult() = 6\n```\n\nThe core library is designed as a backend for hyperparameter data manipulation,\nrather than an end-to-end solution. **It is highly recommend to start with a\nbetter frontend**:\n- CLI frontend: [hpargparse](https://github.com/megvii-research/hpargparse)\n\n\n# Installation\n```\npython3 -m pip install hpman\n```\n\n# Story\nManaging ever-changing hyperparameters is a pain in the a\\*\\*.\nFrom the practice of performing enormous amount of deep learning experiments,\nwe found two existing hyperparameter managing patterns of the utmost\nprevalence.\n\n## Centralized HPM\n\nWe call the first type \"**centralized HPM**\". It follows the way of\nconfiguration management in traditional software, regardless of using a python\nfile or json or yaml or whatever that can store some key-value mapping (may\nremind you of `settings.ini`, `nginx.conf`, `config.yaml` etc.):\n\n```python\n# File: config.py\nBATCH_SIZE = 256\nNUM_EPOCH = 120\nLEARNING_RATE = 1e-1\nWEIGHT_DECAY = 4e-5\nOPTIMIZER = 'SGD'\nLR_DECAY_EPOCHS = [30, 60, 90]\nHIDDEN_CHANNELS = 128\nNUM_LAYERS = 5\nINPUT_CHANNELS = 784\nOUTPUT_CHANNELS = 10\n```\n\n```python\n# File: model.py\nfrom torch import nn\nimport config\n\ndef build_model():\n    return nn.Sequence(\n    [\n        nn.Sequence(nn.Linear(config.INPUT_CHANNELS, config.HIDDEN_CHANNELS),\n            nn.BatchNorm1d(config.HIDDEN_CHANNELS),\n            nn.ReLU())\n    ] + [\n        nn.Sequence(nn.Linear(config.HIDDEN_CHANNELS, config.HIDDEN_CHANNELS),\n            nn.BatchNorm1d(config.HIDDEN_CHANNELS),\n            nn.ReLU())\n        for i in range(config.NUM_LAYERS - 1)\n    ] + [\n        nn.Linear(config.HIDDEN_CHANNELS, config.OUTPUT_CHANNELS)\n    ]\n    )\n```\n\nThis way of managing hyperparameters is widely seen in machine learning\nlibraries, e.g., xgboost, whose hyperparameters are fairly stable compare than\nthat in deep learning research.\n\n## However ...\n\nHowever, it is quite common for researchers to add some hyperparameters at\ntheir inspiration (e.g., suddenly come up with a \"Temperature\" parameter in\nsoftmax.). They found pleasure in tweaking the hyperparameters, but quickly\nabandon it if the experiment goes wrong.  These acts are called [Non-Recurring\nEngineering (NRE)](https://en.wikipedia.org/wiki/Non-recurring_engineering).\n\nIn these cases, the \"centralized HPM\" reveals obvious drawbacks:\n\n1. Whenever you need to introduce a new hyperparameter, you must kind of\n   \"declare\" it in the configuration file, while using it in some\n   deeply-nested easy-to-forget files.\n2. Whenever you need to abandon an existing hyperparameter, you must not only\n   remove all the appearances of that hyperparameter in some deeply-nested\n   easy-to-forget files, but also remove it in the centralized configuration\n   file.\n3. There's a \"Heisenberg uncertainty principle\" on hyperparameters: you cannot\n   know both what and where the hyperparameters are at the same time.\n   The context around where the hyperparameter are used conveys valuable\n   information of the precise usecase of that hyperparameter.\n   You can either look it up in the code, or in the centralized config file.\n\nThese drawbacks essentially requires the user to maintain a distributed data\nstructure, which not only induces great mental burden doing experiments,\nbut also be error-prone to bugs.\n\n## Distributed HPM\n\nSo researchers come to another solution: forget about config files; define and\nuse whatever hyperparameters whenever you need, anywhere in the project. We\ncall this \"Distributed HPM\".  However, this is hardly called \"management\"; it\nis more like anarchism: no management is the best management. This makes add a\nhyperparameter cheap: let yourself free and do whatever you want.\n\n> Let it go, let it go\n\n```python\nfrom torch import nn\n\ndef build_model():\n    hidden_channels = 128  # <-- hyperparameter\n    return nn.Sequence(\n    [\n        nn.Sequence(nn.Linear(784, hidden_channels), # <-- hyperparameter\n            nn.BatchNorm1d(hidden_channels),\n            nn.ReLU())\n    ] + [\n        nn.Sequence(nn.Linear(hidden_channels, hidden_channels),\n            nn.BatchNorm1d(hidden_channels),\n            nn.ReLU())\n        for i in range(4)  # <-- hyperparameter\n    ] + [\n        nn.Linear(hidden_channels, 10)  # <-- hyperparameter\n    ]\n    )\n```\n\nHowever, barbaric growth of hyperparameters of different names in different\nplaces without governance would soon run into a disaster in knowledge sharing,\ncommunication, reproduction, and engineering. Nobody knows what happened, when\ndid it happen, and nobody knows how to know easily. You know nothing, unless\nyou read and diff through all the source codes.\n\n> You know nothing, Jon Snow.\n>\n> 咱也不知道，咱也不敢问呀\n\n## Distributed-Centralized HPM\n\nNow we have two ways of managing hyperparameters: one is good for engineering\nbut inconvenient for researchers, another one is convenient for researchers,\nbut bad for engineering.\n\nWe are uncompromising. We did not want to make a decision between these two\nchoices; we want the best of both worlds.\n\n> Only children make choices, adults want them all.\n>\n> 小孩子才做选择，大人全都要\n\nAfter some trial and error, we came up with a design like this:\n\n`main.py`\n```python\n#!/usr/bin/env python3\n\nfrom hpman.m import _\nimport hpargparse\n\nimport argparse\n\n\ndef func():\n    weight_decay = _(\"weight_decay\", 1e-5)\n    print(\"weight decay is {}\".format(weight_decay))\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    _.parse_file(__file__)\n    hpargparse.bind(parser, _)\n    parser.parse_args()\n\n    func()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nand you can:\n\n```bash\n$ ./main.py\nweight decay is 1e-05\n$ ./main.py --weight-decay 1e-4\nweight decay is 0.0001\n$ ./main.py --weight-decay 1e-4 --hp-list\nweight_decay: 0.0001\n$ ./main.py --weight-decay 1e-4 --hp-list detail\nAll hyperparameters:\n    ['weight_decay']\nDetails:\n+--------------+--------+---------+--------------------------------------------------------------+\n| name         | type   |   value | details                                                      |\n+==============+========+=========+==============================================================+\n| weight_decay | float  |  0.0001 | occurrence[0]:                                               |\n|              |        |         |   ./main.py:10                                               |\n|              |        |         |      5:                                                      |\n|              |        |         |      6: import argparse                                      |\n|              |        |         |      7:                                                      |\n|              |        |         |      8:                                                      |\n|              |        |         |      9: def func():                                          |\n|              |        |         | ==> 10:     weight_decay = _(\"weight_decay\", 1e-5)           |\n|              |        |         |     11:     print(\"weight decay is {}\".format(weight_decay)) |\n|              |        |         |     12:                                                      |\n|              |        |         |     13:                                                      |\n|              |        |         |     14: def main():                                          |\n|              |        |         |     15:     parser = argparse.ArgumentParser()               |\n+--------------+--------+---------+--------------------------------------------------------------+\n$ ./main.py -h\nusage: main.py [-h] [--weight-decay WEIGHT_DECAY] [--hp-save HP_SAVE]\n               [--hp-load HP_LOAD] [--hp-list [{detail,yaml}]]\n               [--hp-serial-format {auto,yaml,pickle}] [--hp-exit]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --weight-decay WEIGHT_DECAY\n  --hp-save HP_SAVE     Save hyperparameters to a file. The hyperparameters\n                        are saved after processing of all other options\n  --hp-load HP_LOAD     Load hyperparameters from a file. The hyperparameters\n                        are loaded before any other options are processed\n  --hp-list [{detail,yaml}]\n                        List all available hyperparameters. If `--hp-list\n                        detail` is specified, a verbose table will be print\n  --hp-serial-format {auto,yaml,pickle}\n                        Format of the saved config file. Defaults to auto. Can\n                        be set to override auto file type deduction.\n  --hp-exit             process all hpargparse actions and quit\n```\n(Example taken from [hpargparse](https://github.com/megvii-research/hpargparse))\n\nWe are now both **distributed** (write anywhere) and **centralized** (manage them as a whole).\n\nOur design is inspired by the [underscore\nfunction](https://www.gnu.org/software/gettext/manual/html_node/Mark-Keywords.html)\ncommonly used in [gettext](https://www.gnu.org/software/gettext/) in software\ntranslation. We deem \"hyperparameters\" as slots of text to be translated,\nwhile different hyperparameter values correspond to different \"language\" of the\nsame text.\n\nWe achieve the above things by parsing your source code statically and extract\nwhere and how you are defining your hyperparameters. It follows the thoughts\nof [Code as Data](https://en.wikipedia.org/wiki/Code_as_data).\n\nAlso, expression evaluation in hpman is quite safe as we are using\n`ast.literal_eval`.\n\n\n# Features\n\n## Design principles\n\n1. Low runtime overhead.\n\n2. Values of hyperparameter can be any type.\n\n## Arbitrary Imports\nHyperparameter managers are the most important objects of hpman. We are\nusing `from hpman.m import _` throughout the tutorial, as well as recommend\nusing underscore (\"_\", courtesy of\n[gettext](https://www.gnu.org/software/gettext/)) as the name of imports in\npractice, but you can actually use anything name you want.\n\nThe `hpman.m` module is configured to allow arbitrary imports. Whatever you\nimport will always be an object of hyperparameter manager and works the same as\n\"_\":\n\n```bash\nfrom hpman.m import _, hpm, hp, ddd, abc, hello\nddd('a', 1)\nabc('a', 2)\n_('hello', 3)\n```\n\nHyperparameter managers imported by different names work independently and work\nin parallel. Imports of the same name are cached in the sense that, imports of\nthe same name in the same process will return always the same object.\n\n\nThere are caveats:\n- Assignment of these imported objects to variables will not work in static\n  parsing (will be addressed later), but works at runtime (if you skipped\n  parsing stage). e.g.:\n\n```python\n# XXX: BAD EXAMPLE\nfrom hpman.m import _\nhello = _  # this breaks the rule\nhello('a', 1)  # <-- hpman will not be aware of this 'a' hyperparameter.\n```\n- Variables share the same name with `hpman.m` imports will be statically\n  parsed by hpman, but will not work as expected at runtime. e.g.:\n\n```python\ndef func(*args, **kargs):\n    pass\n\n_ = func\n\n_(\"a\", 1)  # <-- hpman can do nothing with \"_\" at runtime\n\nfrom hpman.m import _\n\nprint(_.parse_file(__file__).get_values())\n# Will output \"{'a': 1}\", which is a \"false positive\" of hyperparameter\n# occurrence.\n```\n\n## Define Hyperparameters\nThe most basic (and the most frequently used) function of hpman is to define a\nhyperparameter.\n\n```python\nfrom hpman.m import _\n\ndef training_loop():\n    # training settings\n    batch_size = _('batch_size', 128)\n\n    # first use of `num_layer` is recommend to come with default value\n    print('num_layers = {}'.format(_('num_layers', 50)))\n\n    # use it directly without storing the values\n    if _('use_resnet', True):\n    # second use of `num_layer` should not provide default value\n    for i in range(_('num_layers')):\n        pass\n```\n\nThere are a few caveats:\n1. Among all the occurrence of the same hyperparameter, **one and only one**\n   occurrence should come with a default value. Nonetheless, which one has the\n   default value does not matter (you can surely first use, then define the\n   default value in later occurrence).\n2. The name of the hyperparameter must be a **literal string**.\n3. The value of the hyperparameter can be an arbitrary object (variable,\n   lambda, string, whatever), but it is highly recommended to use only\n   **literal values**, which is precisely defined by what `ast.literal_eval`\n   function accepts. It not only makes the serialization of hyperparameters in\n   downstream frameworks (such as hpargparse) easier but also improves the\n   interoperability of hyperparameter settings among different programming\n   languages and frameworks. The readability of dumped hyperparameters will be\n   better as well.\n\n## Static Parsing\nWe employ static parsing to retrieve information on where and how you are using\nthe hyperparameters in your source codes. It is employed by `_.parse_file` and\n`_.parse_source`.\n\n- `_.parse_file` accepts file paths, directory names, or a list of both. It\n  internally calls `_.parse_source`.\n- `_.parse_source` accepts only a piece of source code string.\n\nExamples:\n```python\n_.parse_file(__file__)\n_.parse_file('main.py')\n_.parse_file('library_dir')\n_.parse_file(['main.py', 'library_dir'])\n\n_.parse_source('_(\"a\", 1)')\n```\n\nParsing is done using the `ast` module provided in the python standard library.\nWe match all function calls with required syntax to detect proper calls to\nhyperparameter manager.\n\n## Runtime Value Getter/Setter\nValue of a hyperparameter can be retrieved by two ways in runtime:\n1. use `__call__` syntax: `_('varname')`\n2. use dedicated function: `_.get_value('varname')`\n\nA dict of all hyperparameters can be retrieved by `_.get_values()`\n\nSetting a hyperparameter can only be done with\n```python\n_.set_value('varname', value)\n```\n\n## Hints\n**Hints** is intended to provide a mechanism for extending hpman.\n\nIt provides an interface to store and retrieve arbitrary information provided\nat hyperparameter definition.\nDownstream libraries and frameworks could utilize this provided information to\nbetter serve its purpose.\n\nFor example, say we would like to create an argparse interface for setting\nhyperparameters from the command line, a user could write something like\n\n```python\n_('optimizer', 'adam', choices=['adam', 'sgd'])\n```\n\nin their codebase, and the entry point of the program, we could\nretrieve this information and provide better argparse options:\n\n```python\n# File: hints_example.py\nfrom hpman.m import _\nfrom hpman.hpm_db import L\n\nimport argparse\n\n_('optimizer', 'adam', choices=['adam', 'sgd'])\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    _.parse_file(__file__)\n    occurrences = _.db.select(lambda row: row.name == 'optimizer')\n    oc = [\n        oc\n        for oc in occurrences\n        if oc['hints'] is not None\n    ][0]\n    choices = oc['hints']['choices']\n    value = oc['value']\n\n    parser.add_argument('--optimizer', default=value, choices=choices)\n    args = parser.parse_args()\n\n    print('optimizer: {}'.format(args.optimizer))\n```\n\nusecase is as follows:\n```bash\n$ python3 hints_example.py\noptimizer: adam\n$ python3 hints_example.py -h\nusage: hints_example.py [-h] [--optimizer {adam,sgd}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --optimizer {adam,sgd}\n$ python3 hints_example.py --optimizer sgd\noptimizer: sgd\n$ python3 hints_example.py --optimizer rmsprop\nusage: hints_example.py [-h] [--optimizer {adam,sgd}]\nhints_example.py: error: argument --optimizer: invalid choice: 'rmsprop' (choose from 'adam', 'sgd')\n```\n\nThe example can be found at [examples/02-hints](examples/02-hints)\n\n\n\n## Nested Hyperparameters\n\n当超参数数量增多时，会带来管理压力。我们经常将超参数分为若干族，使用相同的前缀方便管理。\n\n你可以批量操作同一族的超参数。如将超参数导出成如下结构的yaml，提高了可读性。也可以直接导入树状结构的yaml。\n\n```yaml\ndiscriminator:\n  in_channels: 3\n  spectral: true\n  norm: 'instance'\n  activation: 'leaky_relu'\n  residual: true\n  input_size: [512, 512]\n```\n\n**Notice:** 一个key不能同时指向一棵树和一个值，你可以通过set_value和set_tree分别指明超参数的类型是value还是tree。当你通过下划线函数定义默认值时，会被视为是value。\n所以如下代码\n```python\n_('a', {'b': 1})    # 被视为name='a'的超参数，默认值为{'b': 1}。此时a是value。\n_('a.b')            # 被视为超参树a中的b，此时a是tree。\n```\n在运行时会抛出异常：\n```bash\nKeyError: '`a.b` not found'\n```\n在静态解析时会抛出异常：\n```bash\nhpman.primitives.ImpossibleTree: node `a` has is both a leaf and a tree.\n```\n\n**缺点 and 兼容性破坏：你不能使用两个超参数，一个是另一个的前缀 (split by '.')。**\n因为tree的name允许为空，所以你仍然可以在超参数的name中使用`.`，包括以`.`开头，以`.`结尾，或连续的`.`都是合法的。Like `_(\".hpman is a good...man.\")`.\n\n# Best Practices\nIt is advised that\n1. DO use hpman when **global hyperparameters are needed** (e.g., config.{py,yml,json}). hpman can substitute a global config file theoretically.\n2. DO NOT use hpman in python libraries share among projects, unless you fully aware what the consequences are.\n\n# Development\n1. Install requirements:\n```bash\npython3 -m pip install -r requirements.dev.txt\n```\n\n2. Activate git commit template\n```\ngit config commit.template .git-commit-template.txt\n```\n\n3. Install pre-commit hook\n```bash\npre-commit install\n```\n\n4. To format your source code\n```bash\nmake format\n```\n\n5. To check the coding style\n```bash\nmake style-check\n```\n\n6. To run the tests\n```bash\nmake test\n```\n\n# CAVEAT\nThis project is still in its early stage. API may subject to radical changes\n(until version 1.0.0).\n\n\n# Contributing\n\n\n# License\n\n[MIT](LICENSE) © MEGVII Research\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/megvii-research/hpman",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hpman",
    "package_url": "https://pypi.org/project/hpman/",
    "platform": null,
    "project_url": "https://pypi.org/project/hpman/",
    "project_urls": {
      "Homepage": "https://github.com/megvii-research/hpman"
    },
    "release_url": "https://pypi.org/project/hpman/0.13.0/",
    "requires_dist": [
      "attrdict"
    ],
    "requires_python": ">=3.5",
    "summary": "A hyperparameter manager for deep learning experiments.",
    "version": "0.13.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15694408,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8444b3e61543bee6ebe35d2e957594b1c23f8abe9629fb72d813ee6f59f9d527",
          "md5": "2b2dee17512e9e875f976e3e9ad4f57a",
          "sha256": "12965ad412018489dbe06e2bfa45e063fc58d0dc1a19b4380f67dc31a4f19174"
        },
        "downloads": -1,
        "filename": "hpman-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b2dee17512e9e875f976e3e9ad4f57a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 19225,
        "upload_time": "2020-05-24T02:56:24",
        "upload_time_iso_8601": "2020-05-24T02:56:24.339920Z",
        "url": "https://files.pythonhosted.org/packages/84/44/b3e61543bee6ebe35d2e957594b1c23f8abe9629fb72d813ee6f59f9d527/hpman-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f24f63886c115ce62662dff267640542e38b8c37cbed09bb9178181ad5cd49f7",
          "md5": "9fc5f2488bf0cbe7316de11b28975c47",
          "sha256": "482f84a06a4437b5351ec2941c61c28c6330dff2b12f9a7967871e76bd64de99"
        },
        "downloads": -1,
        "filename": "hpman-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9fc5f2488bf0cbe7316de11b28975c47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 24379,
        "upload_time": "2020-05-24T02:56:31",
        "upload_time_iso_8601": "2020-05-24T02:56:31.978361Z",
        "url": "https://files.pythonhosted.org/packages/f2/4f/63886c115ce62662dff267640542e38b8c37cbed09bb9178181ad5cd49f7/hpman-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbfef6a257d52787bcc806881cd644ae0e25236851f15cd76794eea7038f4dd2",
          "md5": "e9ac399b71c533bb5b88ff926e86bc70",
          "sha256": "5eac2ac431db35f8ec92bac80a510962f061ca3e5f15d300a387b504563622e3"
        },
        "downloads": -1,
        "filename": "hpman-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9ac399b71c533bb5b88ff926e86bc70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 19289,
        "upload_time": "2020-05-30T06:22:18",
        "upload_time_iso_8601": "2020-05-30T06:22:18.463818Z",
        "url": "https://files.pythonhosted.org/packages/cb/fe/f6a257d52787bcc806881cd644ae0e25236851f15cd76794eea7038f4dd2/hpman-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8432906e27b3f14329df9cb6c3496aadb005ca8c930bdf7f971c34bbefaa403a",
          "md5": "d1c41b733007ef06db89d4b3da3aad40",
          "sha256": "de9ab95d221c16728c9eaf8b336d921b99b86ba55554c6be35b34895e6d4d74e"
        },
        "downloads": -1,
        "filename": "hpman-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d1c41b733007ef06db89d4b3da3aad40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 24516,
        "upload_time": "2020-05-30T06:22:21",
        "upload_time_iso_8601": "2020-05-30T06:22:21.253126Z",
        "url": "https://files.pythonhosted.org/packages/84/32/906e27b3f14329df9cb6c3496aadb005ca8c930bdf7f971c34bbefaa403a/hpman-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63137613479907c18a07de1674c26d0072339e5873a5264b7c531768130975c0",
          "md5": "7ee32026d62b151fe44ed5a60614d7e8",
          "sha256": "e2d96f9d9f788fd83d9dc5ce6c5bbacfdbe16d646b0671fbcb199c51d80c624f"
        },
        "downloads": -1,
        "filename": "hpman-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ee32026d62b151fe44ed5a60614d7e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21281,
        "upload_time": "2022-10-27T10:09:34",
        "upload_time_iso_8601": "2022-10-27T10:09:34.011106Z",
        "url": "https://files.pythonhosted.org/packages/63/13/7613479907c18a07de1674c26d0072339e5873a5264b7c531768130975c0/hpman-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a1264bb56e18b98fe560bab51a869ff223d1dc0e9ddb557767393de25b1b0e4",
          "md5": "30b516349471c538d3cc1de1608ce568",
          "sha256": "f83ec903944325ccc97667165bc49ce97e0982397abf41dfa461488b3f8a1873"
        },
        "downloads": -1,
        "filename": "hpman-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30b516349471c538d3cc1de1608ce568",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 27350,
        "upload_time": "2022-10-27T10:09:36",
        "upload_time_iso_8601": "2022-10-27T10:09:36.271262Z",
        "url": "https://files.pythonhosted.org/packages/9a/12/64bb56e18b98fe560bab51a869ff223d1dc0e9ddb557767393de25b1b0e4/hpman-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bfd0041b62d52c2926fdf8df442c4f9a98f597aa4bae30bbdbb5268c4ad5d51",
          "md5": "f954f73af9d808f41f50947e49a9c4b6",
          "sha256": "fcdeef95f3447350268ddad94de34d5cfdd7ec72d1ff1a14cd455f3a96c5a492"
        },
        "downloads": -1,
        "filename": "hpman-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f954f73af9d808f41f50947e49a9c4b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21280,
        "upload_time": "2022-11-08T04:50:53",
        "upload_time_iso_8601": "2022-11-08T04:50:53.243431Z",
        "url": "https://files.pythonhosted.org/packages/5b/fd/0041b62d52c2926fdf8df442c4f9a98f597aa4bae30bbdbb5268c4ad5d51/hpman-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a42c24e895dcde197ac7b19cd4be8b411198a416675fcc88c281db50660336c4",
          "md5": "39e2bec2ef5496ee10cd256f144cb105",
          "sha256": "38e47fa416581b3d1e544ceea3ad5ebc20b6479b14ba6e6f8f8278c9fc883279"
        },
        "downloads": -1,
        "filename": "hpman-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39e2bec2ef5496ee10cd256f144cb105",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 27384,
        "upload_time": "2022-11-08T04:51:24",
        "upload_time_iso_8601": "2022-11-08T04:51:24.601120Z",
        "url": "https://files.pythonhosted.org/packages/a4/2c/24e895dcde197ac7b19cd4be8b411198a416675fcc88c281db50660336c4/hpman-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f8670552d09da5efa71f16d080de182f7ae189a424c3011d90f17dcfe39b8bb",
          "md5": "1d071eb3d8642e4c1418382b9e420265",
          "sha256": "25b73bb324ec5768f31096e5ebc34082de920066a7f68e402f99edd697aad4c8"
        },
        "downloads": -1,
        "filename": "hpman-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d071eb3d8642e4c1418382b9e420265",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21312,
        "upload_time": "2022-11-08T05:44:30",
        "upload_time_iso_8601": "2022-11-08T05:44:30.145317Z",
        "url": "https://files.pythonhosted.org/packages/6f/86/70552d09da5efa71f16d080de182f7ae189a424c3011d90f17dcfe39b8bb/hpman-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f7a0b8aed4dd28882acf4a73ae2bf659825d04e1c45370883f243ac74462e35",
          "md5": "98bf2875f2febe46f47b1d10af8ea783",
          "sha256": "2f690c0a894674a14d68e105d4d3ddd334b0f02d814a45c0ac55e0e8e2c4da5b"
        },
        "downloads": -1,
        "filename": "hpman-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98bf2875f2febe46f47b1d10af8ea783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 27414,
        "upload_time": "2022-11-08T05:45:05",
        "upload_time_iso_8601": "2022-11-08T05:45:05.176181Z",
        "url": "https://files.pythonhosted.org/packages/2f/7a/0b8aed4dd28882acf4a73ae2bf659825d04e1c45370883f243ac74462e35/hpman-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f8670552d09da5efa71f16d080de182f7ae189a424c3011d90f17dcfe39b8bb",
        "md5": "1d071eb3d8642e4c1418382b9e420265",
        "sha256": "25b73bb324ec5768f31096e5ebc34082de920066a7f68e402f99edd697aad4c8"
      },
      "downloads": -1,
      "filename": "hpman-0.13.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d071eb3d8642e4c1418382b9e420265",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 21312,
      "upload_time": "2022-11-08T05:44:30",
      "upload_time_iso_8601": "2022-11-08T05:44:30.145317Z",
      "url": "https://files.pythonhosted.org/packages/6f/86/70552d09da5efa71f16d080de182f7ae189a424c3011d90f17dcfe39b8bb/hpman-0.13.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f7a0b8aed4dd28882acf4a73ae2bf659825d04e1c45370883f243ac74462e35",
        "md5": "98bf2875f2febe46f47b1d10af8ea783",
        "sha256": "2f690c0a894674a14d68e105d4d3ddd334b0f02d814a45c0ac55e0e8e2c4da5b"
      },
      "downloads": -1,
      "filename": "hpman-0.13.0.tar.gz",
      "has_sig": false,
      "md5_digest": "98bf2875f2febe46f47b1d10af8ea783",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 27414,
      "upload_time": "2022-11-08T05:45:05",
      "upload_time_iso_8601": "2022-11-08T05:45:05.176181Z",
      "url": "https://files.pythonhosted.org/packages/2f/7a/0b8aed4dd28882acf4a73ae2bf659825d04e1c45370883f243ac74462e35/hpman-0.13.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}