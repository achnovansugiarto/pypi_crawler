{
  "info": {
    "author": "James D. Triveri",
    "author_email": "james.triveri@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "\n# trikit Quickstart Guide\n\n\n**Author:**   James D. Triveri   \n**Release:** 0.3.3\n\n\ntrikit is a collection of Loss Reserving utilities developed to\nfacilitate Actuarial analysis in Python, with particular emphasis on\nautomating the basic techniques generally used for estimating unpaid\nclaim liabilities. trikit\\'s core data structure is the triangle, which\ncomes in both incremental and cumulative varieties. trikit's triangle\nobjects inherit directly from Pandas DataFrame, so all of the familiar\nmethods and attributes used when working in Pandas can be be applied\nto trikit triangle objects.\n\nAlong with the core `IncrTriangle` and `CumTriangle` data structures,\ntrikit exposes a number of common methods for estimating unpaid claim\nliabilities, as well as techniques to quantify variability around those\nestimates. Currently available reserve estimators are `BaseChainLadder`,\n`MackChainLadder` and `BootstrapChainLadder`. Refer to the examples\nbelow for sample use cases.\n\nFinally, in addition to the library's core Chain Ladder functionality,\ntrikit exposes a convenient interface that links to the Casualty\nActuarial Society's Schedule P Loss Rerserving Database. The database\ncontains information on Commercial Auto losses for all property-casualty\ninsurers that write business in the U.S. More information related to the\nthe Schedule P Loss Reserving Database can be found\n[here](https://www.casact.org/research/index.cfm?fa=loss_reserves_data).\n\n## Documentation:\n\ntrikit documentation is available [here](https://trikit.readthedocs.io/en/latest/).\n\n\n## Installation\n\n\n\ntrikit can be installed by running:\n\n```sh \n$ python -m pip install trikit \n```\n\n\n## Quickstart\n\n\nWe begin by loading the RAA sample dataset, which represents Automatic\nFactultative business in General Liability provided by the Reinsurance\nAssociation of America. Sample datasets are loaded as DataFrame objects,\nand always represent incremental losses. Sample datasets can be loaded\nas follows:\n\n```python\nIn [1]: import trikit\nIn [2]: raa = trikit.load(\"raa\")\nIn [3]: raa.head()\nOut[3]:\n   origin  dev  value\n0    1981    1   5012\n1    1981    2   3257\n2    1981    3   2638\n3    1981    4    898\n4    1981    5   1734\n```\n\nA list of available datasets can be obtained by calling `get_datasets`:\n\n```python\nIn [4]: trikit.get_datasets()\nOut[4]: ['amw09', 'autoliab', 'glre', 'raa', 'singinjury', 'singproperty', 'ta83']\n```\n\nAny of the datasets listed above can be read in the same way using\n`trikit.load`. Note that sample datasets can be returned as triangle objects directly. For \nexample, the RAA dataset can be returned as a cumulative triangle as follows:\n\n```python\nIn [5]: tri = trikit.load(\"raa\", tri_type=\"cum\")\nIn [6]: tri\nOut[6]:\n        1      2      3      4      5      6      7      8      9      10\n1981 5,012  8,269 10,907 11,805 13,539 16,181 18,009 18,608 18,662 18,834\n1982   106  4,285  5,396 10,666 13,782 15,599 15,496 16,169 16,704    nan\n1983 3,410  8,992 13,873 16,141 18,735 22,214 22,863 23,466    nan    nan\n1984 5,655 11,555 15,766 21,266 23,425 26,083 27,067    nan    nan    nan\n1985 1,092  9,565 15,836 22,169 25,955 26,180    nan    nan    nan    nan\n1986 1,513  6,445 11,702 12,935 15,852    nan    nan    nan    nan    nan\n1987   557  4,020 10,946 12,314    nan    nan    nan    nan    nan    nan\n1988 1,351  6,947 13,112    nan    nan    nan    nan    nan    nan    nan\n1989 3,133  5,395    nan    nan    nan    nan    nan    nan    nan    nan\n1990 2,063    nan    nan    nan    nan    nan    nan    nan    nan    nan\n```\n\n### Working with Triangles\n\nTriangles are created by calling the `totri` function. Available\narguments are:\n\n-   `data`: The dataset to transform into a triangle instance.\n-   `tri_type`: {\\\"cum\\\", \\\"incr\\\"} Specifies the type of triangle to\n    create.\n-   `data_format`: {\\\"cum\\\", \\\"incr\\\"} Specifies how losses are\n    represented with the input dataset `data`.\n-   `data_shape`: {\\\"tabular\\\", \\\"triangle\\\"} Specifies whether input\n    dataset `data` represents tabular loss data with columns \\\"origin\\\",\n    \\\"dev\\\" and \\\"value\\\", or data already structured as a loss triangle\n    with columns corresponding to development periods.\n-   `origin`: The column name in `data` corresponding to accident year.\n    Ignored if `data_shape=\"triangle\"`.\n-   `dev`: The column name in `data` corresponding to development\n    period. Ignored if `data_shape=\"triangle\"`.\n-   `value`: The column name in `data` corresponding to the measure of\n    interest. Ignored if `data_shape=\"triangle\"`.\n\nNext we demonstrate how to create triangles using `totri` and various\ncombinations of the arguments listed above.\n\n#### **Example 1:** Create a cumulative loss triangle from tabular incremental data\n\nReferring again to the RAA dataset, let's create a cumulative loss\ntriangle. We mentioned above that trikit sample datasets are Pandas\nDataFrames which reflect incremental losses, so `data_format=\"incr\"` and\n`data_shape=\"tabular\"`, both of which are defaults. Also, the default\nfor `tri_type` is `\"cum\"`, so the only argument required to pass into\n`totri` is the input dataset `data`:\n\n```python\nIn [1]: import pandas as pd\nIn [2]: from trikit import load, totri\nIn [3]: raa = load(\"raa\")\nIn [4]: tri = totri(raa)\nIn [5]: tri\nOut[5]:\n        1      2      3      4      5      6      7      8      9      10\n1981 5,012  8,269 10,907 11,805 13,539 16,181 18,009 18,608 18,662 18,834\n1982   106  4,285  5,396 10,666 13,782 15,599 15,496 16,169 16,704    nan\n1983 3,410  8,992 13,873 16,141 18,735 22,214 22,863 23,466    nan    nan\n1984 5,655 11,555 15,766 21,266 23,425 26,083 27,067    nan    nan    nan\n1985 1,092  9,565 15,836 22,169 25,955 26,180    nan    nan    nan    nan\n1986 1,513  6,445 11,702 12,935 15,852    nan    nan    nan    nan    nan\n1987   557  4,020 10,946 12,314    nan    nan    nan    nan    nan    nan\n1988 1,351  6,947 13,112    nan    nan    nan    nan    nan    nan    nan\n1989 3,133  5,395    nan    nan    nan    nan    nan    nan    nan    nan\n1990 2,063    nan    nan    nan    nan    nan    nan    nan    nan    nan\n```\n\n`tri` is an instance of `trikit.triangle.CumTriangle`, which inherits from pandas.DataFrame:\n\n```python\nIn [6]: type(tri)\nOut[6]: trikit.triangle.CumTriangle\nIn [7]: isinstance(tri, pd.DataFrame)\nOut[7]: True\n```\n\nThis means that all of the functionality exposed by DataFrame objects\ngets inherited by triangle objects. For example, to access the first\ncolumn of `tri`:\n\n```python\nIn [8]: tri.loc[:,1]\nOut[8]: \n1981   5012.00000\n1982    106.00000\n1983   3410.00000\n1984   5655.00000\n1985   1092.00000\n1986   1513.00000\n1987    557.00000\n1988   1351.00000\n1989   3133.00000\n1990   2063.00000\nName: 1, dtype: float64\n```\n\nTriangle objects offer a number of methods useful in Actuarial reserving\ncontexts. To extract the latest diagonal, call `tri.latest`:\n\n```python\nIn [9]: tri.latest\nOut[9]:\norigin  dev      latest\n0    1981   10 18834.00000\n1    1982    9 16704.00000\n2    1983    8 23466.00000\n3    1984    7 27067.00000\n4    1985    6 26180.00000\n5    1986    5 15852.00000\n6    1987    4 12314.00000\n7    1988    3 13112.00000\n8    1989    2  5395.00000\n9    1990    1  2063.00000\n```\n\nCalling `tri.a2a` produces a DataFrame of age-to-age factors:\n\n```python\nIn[10]: tri.a2a\nOut[10]:\n         1       2       3       4       5       6       7       8       9\n1981  1.64984 1.31902 1.08233 1.14689 1.19514 1.11297 1.03326 1.00290 1.00922\n1982 40.42453 1.25928 1.97665 1.29214 1.13184 0.99340 1.04343 1.03309     nan\n1983  2.63695 1.54282 1.16348 1.16071 1.18570 1.02922 1.02637     nan     nan\n1984  2.04332 1.36443 1.34885 1.10152 1.11347 1.03773     nan     nan     nan\n1985  8.75916 1.65562 1.39991 1.17078 1.00867     nan     nan     nan     nan\n1986  4.25975 1.81567 1.10537 1.22551     nan     nan     nan     nan     nan\n1987  7.21724 2.72289 1.12498     nan     nan     nan     nan     nan     nan\n1988  5.14212 1.88743     nan     nan     nan     nan     nan     nan     nan\n1989  1.72199     nan     nan     nan     nan     nan     nan     nan     nan\n```\n\nCalling `tri.a2a_avgs` produces a table of candidate loss development\nfactors, which contains arithmetic, geometric and weighted age-to-age\naverages for a number of different periods:\n\n```python\nIn[11]: tri.a2a_avgs()\nOut[11]:\n                 1       2       3       4       5       6       7       8       9\nsimple-1      1.72199 1.88743 1.12498 1.22551 1.00867 1.03773 1.02637 1.03309 1.00922\nsimple-2      3.43205 2.30516 1.11517 1.19815 1.06107 1.03347 1.03490 1.01799 1.00922\nsimple-3      4.69378 2.14200 1.21009 1.16594 1.10261 1.02011 1.03436 1.01799 1.00922\nsimple-4      4.58527 2.02040 1.24478 1.16463 1.10992 1.04333 1.03436 1.01799 1.00922\nsimple-5      5.42005 1.88921 1.22852 1.19013 1.12696 1.04333 1.03436 1.01799 1.00922\nsimple-6      4.85726 1.83148 1.35321 1.18293 1.12696 1.04333 1.03436 1.01799 1.00922\nsimple-7      4.54007 1.74973 1.31451 1.18293 1.12696 1.04333 1.03436 1.01799 1.00922\nsimple-8      9.02563 1.69589 1.31451 1.18293 1.12696 1.04333 1.03436 1.01799 1.00922\nall-simple    8.20610 1.69589 1.31451 1.18293 1.12696 1.04333 1.03436 1.01799 1.00922\ngeometric-1   1.72199 1.88743 1.12498 1.22551 1.00867 1.03773 1.02637 1.03309 1.00922\ngeometric-2   2.97568 2.26699 1.11513 1.19783 1.05977 1.03346 1.03487 1.01788 1.00922\ngeometric-3   3.99805 2.10529 1.20296 1.16483 1.10019 1.01993 1.03433 1.01788 1.00922\ngeometric-4   4.06193 1.98255 1.23788 1.16380 1.10802 1.04244 1.03433 1.01788 1.00922\ngeometric-5   4.73672 1.83980 1.22263 1.18840 1.12492 1.04244 1.03433 1.01788 1.00922\ngeometric-6   4.11738 1.78660 1.32455 1.18138 1.12492 1.04244 1.03433 1.01788 1.00922\ngeometric-7   3.86345 1.69952 1.28688 1.18138 1.12492 1.04244 1.03433 1.01788 1.00922\ngeometric-8   5.18125 1.64652 1.28688 1.18138 1.12492 1.04244 1.03433 1.01788 1.00922\nall-geometric 4.56261 1.64652 1.28688 1.18138 1.12492 1.04244 1.03433 1.01788 1.00922\nweighted-1    1.72199 1.88743 1.12498 1.22551 1.00867 1.03773 1.02637 1.03309 1.00922\nweighted-2    2.75245 2.19367 1.11484 1.19095 1.05838 1.03381 1.03326 1.01694 1.00922\nweighted-3    3.24578 2.05376 1.23215 1.15721 1.09340 1.02395 1.03326 1.01694 1.00922\nweighted-4    3.47986 1.91259 1.26606 1.15799 1.09987 1.04193 1.03326 1.01694 1.00922\nweighted-5    4.23385 1.74821 1.24517 1.17519 1.11338 1.04193 1.03326 1.01694 1.00922\nweighted-6    3.30253 1.70935 1.29886 1.17167 1.11338 1.04193 1.03326 1.01694 1.00922\nweighted-7    3.16672 1.67212 1.27089 1.17167 1.11338 1.04193 1.03326 1.01694 1.00922\nweighted-8    3.40156 1.62352 1.27089 1.17167 1.11338 1.04193 1.03326 1.01694 1.00922\nall-weighted  2.99936 1.62352 1.27089 1.17167 1.11338 1.04193 1.03326 1.01694 1.00922\n```\n\nWe can obtain a reference to an incremental representation of the\ncumulative triangle by calling `tri.to_incr`:\n\n```python\nIn[12]: tri.to_incr()\nOut[12]:\n        1     2     3     4     5     6     7   8   9   10\n1981 5,012 3,257 2,638   898 1,734 2,642 1,828 599  54 172\n1982   106 4,179 1,111 5,270 3,116 1,817  -103 673 535 nan\n1983 3,410 5,582 4,881 2,268 2,594 3,479   649 603 nan nan\n1984 5,655 5,900 4,211 5,500 2,159 2,658   984 nan nan nan\n1985 1,092 8,473 6,271 6,333 3,786   225   nan nan nan nan\n1986 1,513 4,932 5,257 1,233 2,917   nan   nan nan nan nan\n1987   557 3,463 6,926 1,368   nan   nan   nan nan nan nan\n1988 1,351 5,596 6,165   nan   nan   nan   nan nan nan nan\n1989 3,133 2,262   nan   nan   nan   nan   nan nan nan nan\n1990 2,063   nan   nan   nan   nan   nan   nan nan nan nan\n```\n\n#### **Example 2:** Create an incremental loss triangle from tabular incremental data\n\nThe call to `totri` is identical to Example #1, but we change `tri_type` from \"cum\" to \"incr\":\n\n```python\nIn [1]: import pandas as pd\nIn [2]: from trikit import load, totri\nIn [3]: raa = load(\"raa\")\nIn [4]: tri = totri(raa, tri_type=\"incr\")\nIn [5]: type(tri)\nOut[5]: trikit.triangle.IncrTriangle\nIn [6]: tri\nOut[6]:\n        1     2     3     4     5     6     7   8   9   10\n1981 5,012 3,257 2,638   898 1,734 2,642 1,828 599  54 172\n1982   106 4,179 1,111 5,270 3,116 1,817  -103 673 535 nan\n1983 3,410 5,582 4,881 2,268 2,594 3,479   649 603 nan nan\n1984 5,655 5,900 4,211 5,500 2,159 2,658   984 nan nan nan\n1985 1,092 8,473 6,271 6,333 3,786   225   nan nan nan nan\n1986 1,513 4,932 5,257 1,233 2,917   nan   nan nan nan nan\n1987   557 3,463 6,926 1,368   nan   nan   nan nan nan nan\n1988 1,351 5,596 6,165   nan   nan   nan   nan nan nan nan\n1989 3,133 2,262   nan   nan   nan   nan   nan nan nan nan\n1990 2,063   nan   nan   nan   nan   nan   nan nan nan nan\n```\n\n`tri` now represents RAA losses in incremental format.\n\nIt is possible to obtain a cumulative representation of an incremental\ntriangle object by calling `tri.to_cum`:\n\n```python\nIn [7]: tri.to_cum()\nOut[7]:\n        1      2      3      4      5      6      7      8      9      10\n1981 5,012  8,269 10,907 11,805 13,539 16,181 18,009 18,608 18,662 18,834\n1982   106  4,285  5,396 10,666 13,782 15,599 15,496 16,169 16,704    nan\n1983 3,410  8,992 13,873 16,141 18,735 22,214 22,863 23,466    nan    nan\n1984 5,655 11,555 15,766 21,266 23,425 26,083 27,067    nan    nan    nan\n1985 1,092  9,565 15,836 22,169 25,955 26,180    nan    nan    nan    nan\n1986 1,513  6,445 11,702 12,935 15,852    nan    nan    nan    nan    nan\n1987   557  4,020 10,946 12,314    nan    nan    nan    nan    nan    nan\n1988 1,351  6,947 13,112    nan    nan    nan    nan    nan    nan    nan\n1989 3,133  5,395    nan    nan    nan    nan    nan    nan    nan    nan\n1990 2,063    nan    nan    nan    nan    nan    nan    nan    nan    nan\n```\n\n#### **Example 3:** Create a cumulative loss triangle from data formatted as a triangle\n\nThere may be situations in which data is already formatted as a\ntriangle, and we're interested in creating a triangle instance from\nthis data. In the next example, we create a DataFrame with the same\nshape as a triangle, which we then pass into `totri` with\n`data_shape=\"triangle\"` to obtain a cumulative triangle instance:\n\n```python\nIn [1]: import pandas as pd\nIn [2]: from trikit import load, totri\nIn [3]: dftri = pd.DataFrame({\n            1:[1010, 1207, 1555, 1313, 1905],\n            2:[767, 1100, 1203, 900, np.NaN],\n            3:[444, 623, 841, np.NaN, np.NaN],\n            4:[239, 556, np.NaN, np.NaN, np.NaN],\n            5:[80, np.NaN, np.NaN, np.NaN, np.NaN],\n            }, index=list(range(1, 6))\n            )\nIn [4]: dftri\nOut[4]:\n      1     2    3    4   5\n1  1010.  767. 444. 239. 80.\n2  1207. 1100. 623. 556. nan\n3  1555. 1203. 841. nan  nan\n4  1313.  900. nan  nan  nan\n5  1905.  nan  nan  nan  nan\n\nIn [5]: tri = totri(dftri, data_shape=\"triangle\")\nIn [6]: type(tri)\nOut[6]: trikit.triangle.CumTriangle \n```\n\ntrikit cumulative triangle instances expose a plot method, which\ngenerates a faceted plot by origin representing the progression of\ncumulative losses to date by development period. The exhibit can be\nobtained as follows:\n\n```python\nIn [5]: tri.plot()\n```\n\nReserve Estimators\n------------------\n\ntrikit includes a number of reserve estimators. Let's refer to the CAS\nLoss Reserving Dastabase (lrdb) included with trikit, focusing on\n`grcode=1767` and `lob=\"comauto\"` (`grcode` uniquely identifies each\ncompany in the database. To obtain a full list of grcodes and associated\ncompanies, use `trikit.get_lrdb_specs`; to obtain a list of\navailable lines of business (lobs), use `trikit.get_lrdb_lobs`):\n\n```python\nIn [1]: from trikit import load_lrdb, totri\nIn [2]: df = load_lrdb(lob=\"comauto\", grcode=1767)\nIn [3]: tri = totri(df)\nIn [4]: tri\n          1       2       3       4       5         6         7         8         9         10\n1988 110,231 263,079 431,216 611,278 797,428   985,570 1,174,922 1,366,229 1,558,096 1,752,096\n1989 121,678 279,896 456,640 644,767 837,733 1,033,837 1,233,015 1,432,670 1,633,619       nan\n1990 123,376 298,615 500,570 714,683 934,671 1,157,979 1,383,820 1,610,193       nan       nan\n1991 117,457 280,058 463,396 662,003 865,401 1,071,271 1,278,228       nan       nan       nan\n1992 124,611 291,399 481,170 682,203 889,029 1,101,390       nan       nan       nan       nan\n1993 137,902 323,854 533,211 753,639 980,180       nan       nan       nan       nan       nan\n1994 150,582 345,110 561,315 792,392     nan       nan       nan       nan       nan       nan\n1995 150,511 345,241 560,278     nan     nan       nan       nan       nan       nan       nan\n1996 142,301 326,584     nan     nan     nan       nan       nan       nan       nan       nan\n1997 143,970     nan     nan     nan     nan       nan       nan       nan       nan       nan\n```\n\n\nSimilar to `load`, `load_lrdb` also accepts a `tri_type` argument, which returns the lrdb subset \nas an incremental or cumulative triangle:\n\n```python\nIn [5]: tri = load_lrdb(tri_type=\"cum\", lob=\"comauto\", grcode=1767)\n```\n\n\n\nTo obtain base chain ladder reserve estimates, call the cumulative\ntriangle's `base_cl` method:\n\n```python\nIn [5]: result = tri.base_cl()\nIn [6]: result\nOut[6]:\n      maturity     cldf emergence     latest   ultimate    reserve\n1988        10  1.00000   1.00000  1,752,096  1,752,096          0\n1989         9  1.12451   0.88928  1,633,619  1,837,022    203,403\n1990         8  1.28233   0.77983  1,610,193  2,064,802    454,609\n1991         7  1.49111   0.67064  1,278,228  1,905,977    627,749\n1992         6  1.77936   0.56200  1,101,390  1,959,771    858,381\n1993         5  2.20146   0.45425    980,180  2,157,822  1,177,642\n1994         4  2.87017   0.34841    792,392  2,274,299  1,481,907\n1995         3  4.07052   0.24567    560,278  2,280,624  1,720,346\n1996         2  6.68757   0.14953    326,584  2,184,053  1,857,469\n1997         1 15.62506   0.06400    143,970  2,249,541  2,105,571\ntotal               nan       nan 10,178,930 20,666,007 10,487,077\n```\n\nThe result is of type `BaseChainLadderResult`. The columns of `result` can be \naccessed in total or individually. The result above can be returned as a DataFrame by calling \n`result.summary`:\n\n```python\nIn [7]: result.summary\nOut[7]:\n      maturity       cldf  emergence      latest      ultimate       reserve\n1988        10   1.000000   1.000000   1752096.0  1.752096e+06  0.000000e+00\n1989         9   1.124511   0.889275   1633619.0  1.837022e+06  2.034034e+05\n1990         8   1.282332   0.779829   1610193.0  2.064802e+06  4.546094e+05\n1991         7   1.491108   0.670642   1278228.0  1.905977e+06  6.277486e+05\n1992         6   1.779362   0.561999   1101390.0  1.959771e+06  8.583811e+05\n1993         5   2.201455   0.454245    980180.0  2.157822e+06  1.177642e+06\n1994         4   2.870169   0.348412    792392.0  2.274299e+06  1.481907e+06\n1995         3   4.070523   0.245669    560278.0  2.280624e+06  1.720346e+06\n1996         2   6.687568   0.149531    326584.0  2.184053e+06  1.857469e+06\n1997         1  15.625064   0.064000    143970.0  2.249541e+06  2.105571e+06\ntotal                 NaN        NaN  10178930.0  2.066601e+07  1.048708e+07\n```\n\nTo access the reserve estimates as a Series, call `result.reserve`:\n\n```python\nIn [8]: result.reserve\nOut[8]:\n1988            0.0\n1989       203403.0\n1990       454609.0\n1991       627749.0\n1992       858381.0\n1993      1177642.0\n1994      1481907.0\n1995      1720346.0\n1996      1857469.0\n1997      2105571.0\ntotal    10487077.0\nName: reserve, dtype: float64\n```\n\n`base_cl` accepts two optional arguments:\n\n-  `tail`: The tail factor, which defaults to 1.0.\n\n-  `sel`: Loss development factors, which defaults to \"all-weighted\". `sel` can be either a string corresponding to a pre-computed \npattern available in `tri.a2a_avgs().index`, or a custom set of loss development factors as a numpy array or Pandas Series.\n\nExample #2 demonstrated how to access a number of candidate loss\ndevelopment patterns by calling `tri.a2a_avgs`. Available pre-computed\noptions for `sel` can be any value present in `tri.a2a_avgs`\\'s index.\nTo obtain a list of available pre-computed loss development factors by\nname, run:\n\n```python\nIn [9]: tri.a2a_avgs().index.tolist()\nOut[9]:\n['simple-1', 'simple-2', 'simple-3', 'simple-4', 'simple-5', 'simple-6', 'simple-7', \n'simple-8', 'all-simple', 'geometric-1', 'geometric-2', 'geometric-3', 'geometric-4', \n'geometric-5', 'geometric-6', 'geometric-7', 'geometric-8', 'all-geometric', \n'weighted-1', 'weighted-2', 'weighted-3', 'weighted-4', 'weighted-5', 'weighted-6', \n'weighted-7', 'weighted-8', 'all-weighted']\n```\n\nIf instead of `all-weighted`, a 5-year geometric loss development\npattern is preferred, along with a tail factor of 1.015, the call to\n`base_cl` would be modified as follows:\n\n```python\nIn[10]: tri.base_cl(sel=\"geometric-5\", tail=1.015)\nOut[10]:\n      maturity     cldf emergence     latest   ultimate    reserve\n1988        10  1.01500   0.98522  1,752,096  1,778,377     26,281\n1989         9  1.14138   0.87613  1,633,619  1,864,578    230,959\n1990         8  1.30157   0.76830  1,610,193  2,095,778    485,585\n1991         7  1.51344   0.66075  1,278,228  1,934,517    656,289\n1992         6  1.80591   0.55374  1,101,390  1,989,009    887,619\n1993         5  2.23416   0.44760    980,180  2,189,878  1,209,698\n1994         4  2.91249   0.34335    792,392  2,307,832  1,515,440\n1995         3  4.13521   0.24183    560,278  2,316,869  1,756,591\n1996         2  6.78292   0.14743    326,584  2,215,194  1,888,610\n1997         1 15.69149   0.06373    143,970  2,259,103  2,115,133\ntotal               nan       nan 10,178,930 20,951,135 10,772,205\n```\n\nIf `sel` is a Series or numpy ndarray, a check will first be made to\nensure the LDFs have the requiste number of elements. The provided LDFs\nshould not include a tail factor.\n\nNext, reserves are estimated with the chain ladder method along with an\nexternal set of LDFs using the same loss reserve database subset\n(`grcode=1767` and `lob=\"commauto\"`):\n\n```python\nIn[11]: tri = load_lrdb(tri_type=\"cum\", lob=\"commauto\", grcode=1767)\nIn[12]: ldfs = np.asarray([2.75, 1.55, 1.50, 1.25, 1.15, 1.075, 1.03, 1.02, 1.01])\nIn[13]: cl = tri.base_cl(sel=ldfs)\nIn[14]: cl\nOut[14]:\n      maturity     cldf emergence     latest   ultimate   reserve\n1988        10  1.00000   1.00000  1,752,096  1,752,096         0\n1989         9  1.01000   0.99010  1,633,619  1,649,955    16,336\n1990         8  1.03020   0.97069  1,610,193  1,658,821    48,628\n1991         7  1.06111   0.94241  1,278,228  1,356,335    78,107\n1992         6  1.14069   0.87666  1,101,390  1,256,343   154,953\n1993         5  1.31179   0.76232    980,180  1,285,793   305,613\n1994         4  1.63974   0.60985    792,392  1,299,317   506,925\n1995         3  2.45961   0.40657    560,278  1,378,066   817,788\n1996         2  3.81240   0.26230    326,584  1,245,068   918,484\n1997         1 10.48409   0.09538    143,970  1,509,394 1,365,424\ntotal               nan       nan 10,178,930 14,391,188 4,212,258\n```\n\nIf `ldfs` is not of the correct length (length n-1 for a triangle having n\ndevelopment periods), `ValueError` is raised:\n\n```python\nIn[15]: ldfs = np.asarray([2.75, 1.55, 1.50, 1.25, 1.15, 1.075, 1.03])\nIn[16]: result = tri.base_cl(sel=ldfs)\nTraceback (most recent call last):\nFile \"trikit\\chainladder\\base.py\", line 117, in __call__\nValueError: sel has 7 values, LDF overrides require 9.\n```\n\nA faceted plot by origin combining actuals and forcasts can be obtained\nby calling `result`'s plot method:\n\n```python\nIn[17]: result = tri.base_cl(sel=\"geometric-5\", tail=1.015)\nIn[18]: result.plot()\n```\n\n\n## Quantifying Reserve Variability\n\n\nThe Base Chain Ladder method provides an estimate by origin and in total\nof future outstanding claim liabilities, but offers no indication of the\nvariability around those point estimates. We can obtain quantiles of the\npredictive distribution of reserve estimates through a number of trikit\nestimators.\n\n### Mack Chain Ladder\n\nThe Mack Chain Ladder is a distribution free model which estimates the\nfirst two moments of standard chain ladder forecasts. Within trikit, the\nMack Chain Ladder method is dispatched by calling a cumulative triangle's\n`mack_cl` method. `mack_cl` accepts a number of optional arguments:\n\n-   `alpha`: Controls how loss development factors are computed. Can be\n    0, 1 or 2. When `alpha=0`, LDFs are computed as the straight average\n    of observed individual link ratios. When `alpha=1`, the historical\n    Chain Ladder age-to-age factors are computed. When `alpha=2`, a\n    regression of \\$[C](){k+1}\\$ on \\$[C](){k}\\$ with 0 intercept is\n    performed. Default is 1.\n-   `dist`: Either \"norm\\\" or \"lognorm\\\". Represents the selected\n    distribution to approximate the true distribution of reserves by\n    origin period and in aggregate. Setting `dist=\"norm\"` specifies a\n    normal distribution. `dist=\"lognorm\"` assumes a log-normal\n    distribution. Default is \"lognorm\".\n-   `q`: Quantile or sequence of quantiles to compute, which must be\n    between 0 and 1 inclusive. Default is [.75, .95].\n-   `two_sided`: Whether the two_sided interval should be included in\n    summary output. For example, if `two_sided==True` and `q=.95`, then\n    the 2.5th and 97.5th quantiles of the estimated reserve distribution\n    will be returned ((1 - .95) / 2, (1 + .95) / 2). When False, only\n    the specified quantile(s) will be computed. Default value is False.\n\nUsing the `ta83` sample dataset, calling `mack_cl` with default\narguments yields:\n\n```python\nIn [1]: from trikit import load, totri\nIn [2]: tri = load(\"ta83\", tri_type=\"cum\")\nIn [3]: mcl = tri.mack_cl()\nIn [4]: mcl\nOut[4]:\n      maturity     cldf emergence     latest   ultimate    reserve std_error      cv        75%        95%\n1           10  1.00000   1.00000  3,901,463  3,901,463          0         0     nan        nan        nan\n2            9  1.01772   0.98258  5,339,085  5,433,719     94,634    75,535 0.79818    118,760    234,717\n3            8  1.09564   0.91271  4,909,315  5,378,826    469,511   121,700 0.25921    539,788    691,334\n4            7  1.15466   0.86605  4,588,268  5,297,906    709,638   133,551 0.18820    790,911    947,870\n5            6  1.25428   0.79727  3,873,311  4,858,200    984,889   261,412 0.26542  1,135,100  1,462,149\n6            5  1.38450   0.72228  3,691,712  5,111,171  1,419,459   411,028 0.28957  1,651,045  2,174,408\n7            4  1.62520   0.61531  3,483,130  5,660,771  2,177,641   558,356 0.25640  2,500,779  3,194,587\n8            3  2.36858   0.42219  2,864,498  6,784,799  3,920,301   875,430 0.22331  4,439,877  5,499,652\n9            2  4.13870   0.24162  1,363,294  5,642,266  4,278,972   971,385 0.22701  4,853,918  6,033,399\n10           1 14.44662   0.06922    344,014  4,969,838  4,625,824 1,363,376 0.29473  5,390,689  7,133,025\ntotal               nan       nan 34,358,090 53,038,959 18,680,869 2,447,318 0.13101 20,226,192 22,955,604\n```\n\nQuantiles of the estimated reserve distribution can be obtained by calling `get_quantiles`.\n`q` can be either a single float or an array of floats representing the percentiles of\ninterest (which must fall within [0, 1]):\n\n```python\nIn [5]: mcl.get_quantiles(q=[.05, .10, .25, .50, .75, .90, .95])\nOut[5]:\n             5th       10th       25th       50th       75th       90th       95th\n1            nan        nan        nan        nan        nan        nan        nan\n2        23306.0    30078.0    46063.0    73962.0   118760.0   181873.0   234717.0\n3       298788.0   327792.0   382673.0   454491.0   539788.0   630163.0   691334.0\n4       513108.0   549091.0   614936.0   697395.0   790911.0   885754.0   947870.0\n5       619750.0   681372.0   798314.0   951928.0  1135100.0  1329915.0  1462149.0\n6       854941.0   947780.0  1125948.0  1363448.0  1651045.0  1961416.0  2174408.0\n7      1392853.0  1526576.0  1779281.0  2109405.0  2500779.0  2914751.0  3194587.0\n8      2661766.0  2883868.0  3297115.0  3826066.0  4439877.0  5076093.0  5499652.0\n9      2885978.0  3130850.0  3587259.0  4172800.0  4853918.0  5561511.0  6033399.0\n10     2760122.0  3065251.0  3652226.0  4437118.0  5390689.0  6422971.0  7133025.0\ntotal 14945656.0 15671023.0 16962489.0 18522596.0 20226192.0 21893054.0 22955604.0\n```\n\nThe `MackChainLadderResult`'s `plot` method returns a faceted plot of estimated reserve \ndistributions by origin and in total. The mean is highlighted, along with any quantiles \npassed to the `plot` method via `q`. We can compare the estimated distributions when \n`dist=\"lognorm\"` vs. `dist=\"norm\"`, highlighting the mean and 95th percentile. First we\ntake a look at `dist=\"lognorm\"`:\n\n```python\nIn [7]: mcl.plot()\n```\n\n\n### Testing for Development Period Correlation\n\n\nIn [1] Appendix G., Mack proposes an approximate test to assess whether\none of the basic Chain Ladder assumptions holds, namely that subsequent\ndevelopment periods are uncorrelated. The test can be performed via\n`MackChainLadderResult`'s `devp_corr_test` method. We next apply the\ntest to the RAA dataset:\n\n```python\nIn [1]: from trikit import load, totri\nIn [2]: df = load(\"raa\")\nIn [3]: tri = totri(data=df)\nIn [4]: mcl = tri.mack_cl()\nIn [5]: mcl.devp_corr_test()\nOut[5]: ((-0.12746658149149367, 0.12746658149149367), 0.0695578231292517)\n```\n\n`devp_corr_test` returns a 2-tuple: The first element represents the\nbounds of the test interval ((-0.127, 0.127)). The second element is the\ntest statistic for the triangle under consideration. In this example,\nthe test statistic falls within the bounds of the test interval,\ntherefore we do not reject the null-hypothesis of having uncorrelated\ndevelopment factors. If the test statistic falls outside the interval,\nthe correlations should be analyzed in more detail. Refer to \\[1\\] for\nmore information.\n\n### Testing for Calendar Year Effects\n\nIn [1] Appendix H., Mack proposes a test to assess the independence of\nthe origin periods. This test can be performed via\n`MackChainLadderResult`'s `cy_effects_test` method. Again using the RAA\ndataset:\n\n```python\nIn [1]: from trikit import load, totri\nIn [2]: tri = load(\"raa\", tri_type=\"cum\")\nIn [3]: mcl = tri.mack_cl()\nIn [4]: mcl.cy_effects_test()\nOut[4]: ((8.965613354894957, 16.78438664510504), 14.0)\n```\n\nSimilar to `devp_corr_test`, `cy_effects_test` returns a 2-tuple, with\nthe first element representing the bounds of the test interval ((8.97,\n16.78)) and the second element the test statistic. In this example, the\ntest statistic falls within the bounds of thew test interval, therefore\nwe do not reject the null-hypothesis of not having significant calendar\nyear influences. Refer to [1] for more information.\n\n### Mack Chain Ladder Diagnostics\n\n`MackChainLadderResult` exposes a `diagnostics` method, which generates\na faceted plot that includes the estimated aggregate reserve\ndistribution, development by origin and standardized residuals by\ndevelopment period and by origin:\n\n```python\nIn [1]: from trikit import load, totri\nIn [2]: tri = load(\"raa\", tri_type=\"cum\")\nIn [3]: mcl = tri.mack_cl()\nIn [4]: mcl.diagnostics()\n```\n\n\n### Bootstrap Chain Ladder\n\n\nThe purpose of the Bootstrap Chain Ladder is to estimate the predicition\nerror of the total reserve estimate and to approximate the predictive\ndistribution. Within trikit, the Bootstrap Chain Ladder is encapsulated\nwithin a cumulative triangle's `boot_cl` method. `boot_cl` accepts a\nnumber of optional arguments:\n\n-   `sims`: The number of bootstrap iterations to perform. Default value\n    is 1000.\n-   `q`: Quantile or sequence of quantiles to compute, which must be\n    between 0 and 1 inclusive. Default value is \\[.75, .95\\].\n-   `procdist`: The distribution used to incorporate process variance.\n    Currently, this can only be set to \\\"gamma\\\". This may change in a\n    future release.\n-   `two_sided`: Whether the two_sided prediction interval should be\n    included in summary output. For example, if `two_sided=True` and\n    `q=.95`, then the 2.5th and 97.5th quantiles of the predictive\n    reserve distribution will be returned \\[(1 - .95) / 2, (1 + .95) /\n    2\\]. When False, only the specified quantile(s) will be included in\n    summary output. Default value is False.\n-   `parametric`: If True, fit standardized residuals to a normal\n    distribution via maximum likelihood, and sample from the\n    parameterized distribution. Otherwise, sample with replacement from\n    the collection of standardized fitted triangle residuals. Default\n    value is False.\n-   `interpolation`: One of {'linear', 'lower', 'higher', 'midpoint', 'nearest'}. \n    Default value is 'linear'. Refer to\n    [numpy.quantile](https://numpy.org/devdocs/reference/generated/numpy.quantile.html)\n    for more information.\n-   `random_state`: If int, random_state is the seed used by the random\n    number generator; If `RandomState` instance, random_state is the\n    random number generator; If None, the random number generator is the\n    `RandomState` instance used by np.random. Default value is None.\n\nWe next demonstrate how to apply the Bootstrap Chain Ladder to the RAA\ndataset. The example sets `sims=1000`, `two_sided=False` and\n`random_state=516` for reproducibility:\n\n```python\nIn [1]: from trikit import load, totri\nIn [2]: tri = load(\"raa\", tri_type=\"cum\")\nIn [3]: bcl = tri.boot_cl(sims=1000, two_sided=False, random_state=516)\nIn [4]: bcl\nOut[4]:\n      maturity    cldf emergence  latest ultimate reserve std_error    cv    75%    95%\n1981        10 1.00000   1.00000  18,834   18,834       0         0   nan      0      0\n1982         9 1.00922   0.99087  16,704   16,863     159       529 3.331    245  1,108\n1983         8 1.02631   0.97437  23,466   24,395     929     1,026 1.104  1,101  2,609\n1984         7 1.06045   0.94300  27,067   28,648   1,581     1,592 1.007  2,472  4,704\n1985         6 1.10492   0.90505  26,180   29,087   2,907     1,883 0.648  3,914  6,341\n1986         5 1.23020   0.81288  15,852   19,762   3,910     1,931 0.494  4,892  7,114\n1987         4 1.44139   0.69377  12,314   17,738   5,424     2,538 0.468  6,947 10,061\n1988         3 1.83185   0.54590  13,112   24,365  11,253     3,980 0.354 13,565 18,735\n1989         2 2.97405   0.33624   5,395   16,325  10,930     4,940 0.452 13,870 19,879\n1990         1 8.92023   0.11210   2,063   18,973  16,910    11,028 0.652 22,863 37,008\ntotal              nan       nan 160,987  214,989  54,002    14,832 0.275 62,597 80,200\n```\n\n`reserve` represents the mean of the predicitive distribution of reserve estimates \nby origin and in total, and `75%` and `95%` represent quantiles of the distribution.\n\n\nAdditional quantiles of the bootstrapped reserve distribution can be obtained by calling\n`get_quantiles`. `q` can be either a single float or an array of floats representing the\npercentiles of interest (which must fall within [0, 1]). We set `lb=0` to set negative \nquantiles to 0:\n\n```python\nIn [5]: bcl.get_quantiles(q=[.05, .10, .25, .75, .90, .95], lb=0)\nOut[5]:\n          5th    10th    25th    75th    90th    95th\n1981      0.0     0.0     0.0     0.0     0.0     0.0\n1982      0.0     0.0     0.0   245.0   694.0  1108.0\n1983      0.0     0.0    30.0  1101.0  2001.0  2609.0\n1984      0.0   142.0   618.0  2472.0  3758.0  4704.0\n1985    349.0   693.0  1449.0  3914.0  5234.0  6341.0\n1986   1117.0  1454.0  2319.0  4892.0  6348.0  7114.0\n1987   1838.0  2396.0  3555.0  6947.0  8832.0 10061.0\n1988   5469.0  6452.0  8256.0 13565.0 16339.0 18735.0\n1989   3671.0  4892.0  7257.0 13870.0 17667.0 19879.0\n1990   1793.0  4278.0  8790.0 22863.0 30904.0 37008.0\ntotal 31588.0 36193.0 43009.0 62597.0 73218.0 80200.0\n```\n\n\n\n`BoostrapChainLadderResult` exposes two exhibits: The first is similar to `BaseChainLadderResult`'s \n`plot`, but includes the upper and lower bounds of the specified quantile of the \npredictive distribution. To obtain the faceted plot displaying the 5th and 95th\npercentiles, run:\n\n```python\nIn [5]: bcl = tri.boot_cl(sims=2500, two_sided=True, random_state=516)\nIn [6]: bcl.plot(q=.90)\n```\n\n\nIn addition, we can obtain a faceted plot of the distribution of bootstrap samples by origin \nand in aggregate by calling `BoostrapChainLadderResult`'s `hist` method:\n\n```python\nIn [7]: bcl.hist()\n```\n\n\n\nThere are a number of parameters which can be used to control the style of the\ngenerated exhibits. Refer to the documentation for more information.\n\n\n## References\n\n\n1.  Mack, Thomas (1993) *Measuring the Variability of Chain Ladder\n    Reserve Estimates*, 1993 CAS Prize Paper Competition on\n    Variability of Loss Reserves.\n2.  Mack, Thomas, (1993), *Distribution-Free Calculation of the Standard\n    Error of Chain Ladder Reserve Estimates*, ASTIN Bulletin 23, no.\n    2:213-225.\n3.  Mack, Thomas, (1999), *The Standard Error of Chain Ladder Reserve\n    Estimates: Recursive Calculation and Inclusion of a Tail Factor*,\n    ASTIN Bulletin 29, no. 2:361-366.\n4.  England, P., and R. Verrall, (2002), *Stochastic Claims Reserving in\n    General Insurance*, British Actuarial Journal 8(3): 443-518.\n5.  Murphy, Daniel, (2007), *Chain Ladder Reserve Risk Estimators*, CAS\n    E-Forum, Summer 2007.\n6.  Carrato, A., McGuire, G. and Scarth, R. 2016. *A Practitioner's\n    Introduction to Stochastic Reserving*, The Institute and Faculty of\n    Actuaries. 2016.\n\n## Contact\n\n\nPlease contact james.triveri@gmail.com with suggestions or feature\nrequests.\n\n## Relevant Links\n\n\n- trikit Source: https://github.com/trikit/trikit\n- CAS Loss Reserving Database: https://www.casact.org/research/index.cfm?fa=loss_reserves_data\n- Python: https://www.python.org/\n- Numpy: http://www.numpy.org/\n- Scipy: https://docs.scipy.org/doc/scipy/reference/\n- Pandas: https://pandas.pydata.org/\n- Matplotlib: https://matplotlib.org/\n- Seaborn: https://seaborn.pydata.org/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trikit/trikit",
    "keywords": "actuarial finance reserving chainladder insurance",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trikit",
    "package_url": "https://pypi.org/project/trikit/",
    "platform": "",
    "project_url": "https://pypi.org/project/trikit/",
    "project_urls": {
      "Homepage": "https://github.com/trikit/trikit"
    },
    "release_url": "https://pypi.org/project/trikit/0.3.3/",
    "requires_dist": [
      "numpy (>=1.19)",
      "scipy (>=1.3)",
      "pandas (>=1.2)",
      "matplotlib (>=2.2)",
      "seaborn (>=0.10)",
      "statsmodels (>=0.12)"
    ],
    "requires_python": "",
    "summary": "A Pythonic Approach to Actuarial Reserving",
    "version": "0.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11280355,
  "releases": {
    "0.2.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abd735455b89964c3b63e33338c35985c7769e5ddc3821eaf0fa48d973587c81",
          "md5": "d7e8f494d47544a4036b5b5a23c2c469",
          "sha256": "c706d97b1f17ded908d8090a4a04ae39d883749b2701126efdd39b6c4f60a084"
        },
        "downloads": -1,
        "filename": "trikit-0.2.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7e8f494d47544a4036b5b5a23c2c469",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 154621,
        "upload_time": "2020-10-12T18:39:22",
        "upload_time_iso_8601": "2020-10-12T18:39:22.294797Z",
        "url": "https://files.pythonhosted.org/packages/ab/d7/35455b89964c3b63e33338c35985c7769e5ddc3821eaf0fa48d973587c81/trikit-0.2.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7df83942d07072f86c9cd3199f6b2d838d3c84749c836012dda7f3b25544b01",
          "md5": "62648a3a6244939bf7244cf7a6d441b8",
          "sha256": "3536f1d24b0883835a4681d6a9b767a8cb0d2cd60f778e246df607e6a6acd538"
        },
        "downloads": -1,
        "filename": "trikit-0.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "62648a3a6244939bf7244cf7a6d441b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 159287,
        "upload_time": "2020-10-12T18:39:24",
        "upload_time_iso_8601": "2020-10-12T18:39:24.057160Z",
        "url": "https://files.pythonhosted.org/packages/f7/df/83942d07072f86c9cd3199f6b2d838d3c84749c836012dda7f3b25544b01/trikit-0.2.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5c9bcc8ab646f15e4e03441a25a644fff8f11b4ddfdddc2324791068e880e43",
          "md5": "c2dd409d5306476d0f56d0bdb6eced3e",
          "sha256": "b20d6735568cbc012528f14843477a6174b97328fe5f736b948402269004eb2f"
        },
        "downloads": -1,
        "filename": "trikit-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2dd409d5306476d0f56d0bdb6eced3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 617949,
        "upload_time": "2019-06-03T20:22:57",
        "upload_time_iso_8601": "2019-06-03T20:22:57.512789Z",
        "url": "https://files.pythonhosted.org/packages/f5/c9/bcc8ab646f15e4e03441a25a644fff8f11b4ddfdddc2324791068e880e43/trikit-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63231920f559436938ed00055e7c906cab924dba2d737f268db2867629baa607",
          "md5": "2432fdfe89a590c47410dbd79119d857",
          "sha256": "4d10f940959459033e18de8340c6e114ec628d2cb2b2e7a47bf360b0a1e6672e"
        },
        "downloads": -1,
        "filename": "trikit-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2432fdfe89a590c47410dbd79119d857",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 630123,
        "upload_time": "2019-06-03T20:19:40",
        "upload_time_iso_8601": "2019-06-03T20:19:40.988894Z",
        "url": "https://files.pythonhosted.org/packages/63/23/1920f559436938ed00055e7c906cab924dba2d737f268db2867629baa607/trikit-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7277be4998327e113ee422323d7794b6b12363c090eecc4df67cca4f2df462b",
          "md5": "6a6795e6355d79dc4b443bfc634e4565",
          "sha256": "b70e8e5b04b57579de7a8b012f20c16902c4981a78b6e5528c4ae4a55f38e44b"
        },
        "downloads": -1,
        "filename": "trikit-0.2.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a6795e6355d79dc4b443bfc634e4565",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 617955,
        "upload_time": "2019-06-03T20:50:05",
        "upload_time_iso_8601": "2019-06-03T20:50:05.922838Z",
        "url": "https://files.pythonhosted.org/packages/e7/27/7be4998327e113ee422323d7794b6b12363c090eecc4df67cca4f2df462b/trikit-0.2.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a2694c556a39387db30cd2738b079831f37617ee7e5d8d559d9f9e695b08b77",
          "md5": "55b91c0d5c7154e7def183b4a83bf654",
          "sha256": "e57cfe3a853252d5143d2274f130fef50e7e841ed6b3ed1a46f5635e5fc2a088"
        },
        "downloads": -1,
        "filename": "trikit-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "55b91c0d5c7154e7def183b4a83bf654",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 630091,
        "upload_time": "2019-06-03T20:50:09",
        "upload_time_iso_8601": "2019-06-03T20:50:09.089751Z",
        "url": "https://files.pythonhosted.org/packages/8a/26/94c556a39387db30cd2738b079831f37617ee7e5d8d559d9f9e695b08b77/trikit-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d932c8250769153bb7ec287265f18f955719ea64900b8b668a4a12ac1042e257",
          "md5": "41d1d3fa85addef024dfe211671aa273",
          "sha256": "7ded8096fbb76b9cb0a285d052c19cd877aaaa826273ec6e1320e52a9b8dfb45"
        },
        "downloads": -1,
        "filename": "trikit-0.2.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41d1d3fa85addef024dfe211671aa273",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 617928,
        "upload_time": "2019-06-03T20:58:50",
        "upload_time_iso_8601": "2019-06-03T20:58:50.548555Z",
        "url": "https://files.pythonhosted.org/packages/d9/32/c8250769153bb7ec287265f18f955719ea64900b8b668a4a12ac1042e257/trikit-0.2.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83a1b889a20b73783d94eed51ae7b9dd42b9f86cecdeef4d1df69349fc7da764",
          "md5": "5e459c1eb0fb2e7c3b7baed962824443",
          "sha256": "4447a5d05013c4912b6c8d8348129ca3b86b1c1984c5281ccce79fc7f0782a0f"
        },
        "downloads": -1,
        "filename": "trikit-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5e459c1eb0fb2e7c3b7baed962824443",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 630049,
        "upload_time": "2019-06-03T20:58:52",
        "upload_time_iso_8601": "2019-06-03T20:58:52.597994Z",
        "url": "https://files.pythonhosted.org/packages/83/a1/b889a20b73783d94eed51ae7b9dd42b9f86cecdeef4d1df69349fc7da764/trikit-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e009052024648393ba79c628388adae528531bd8bed650f31be23d0e0763856d",
          "md5": "59868f5bf24c51de862e0b2ab3833d45",
          "sha256": "647eb85ccedf652217f9c943d3beb8f6f98eb90fe707260078395c4b4162aafd"
        },
        "downloads": -1,
        "filename": "trikit-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59868f5bf24c51de862e0b2ab3833d45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42957,
        "upload_time": "2020-10-05T02:06:15",
        "upload_time_iso_8601": "2020-10-05T02:06:15.277841Z",
        "url": "https://files.pythonhosted.org/packages/e0/09/052024648393ba79c628388adae528531bd8bed650f31be23d0e0763856d/trikit-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3b8af3da51aab4021bf2142fe8e94e8eb6d379876c49488112fecdf7c9553c6",
          "md5": "f6cc2f57bc0451a8b8890643eaed9279",
          "sha256": "60f0aed9d7edb4dbebda0ada5ee5cf8ea4451ffc5c25d4da7c6351f02a0c5400"
        },
        "downloads": -1,
        "filename": "trikit-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f6cc2f57bc0451a8b8890643eaed9279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49731,
        "upload_time": "2020-10-05T02:06:17",
        "upload_time_iso_8601": "2020-10-05T02:06:17.042047Z",
        "url": "https://files.pythonhosted.org/packages/d3/b8/af3da51aab4021bf2142fe8e94e8eb6d379876c49488112fecdf7c9553c6/trikit-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "130748f8f5f1817226516566ad057b6376ad75e94459840f06d2b1b028430730",
          "md5": "0176c642206b5a4d76191eb2665699bf",
          "sha256": "557731e0dd7f994fa5da0b5f53fcacdc12976348c03715494e63fb7ab14b3c72"
        },
        "downloads": -1,
        "filename": "trikit-0.2.8-py3.7.egg",
        "has_sig": false,
        "md5_digest": "0176c642206b5a4d76191eb2665699bf",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 207924,
        "upload_time": "2020-10-05T03:37:24",
        "upload_time_iso_8601": "2020-10-05T03:37:24.986924Z",
        "url": "https://files.pythonhosted.org/packages/13/07/48f8f5f1817226516566ad057b6376ad75e94459840f06d2b1b028430730/trikit-0.2.8-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16a3a8809fa34a3dfbfaa3f5b98850888071aeb10d94c74a954e53678be72b91",
          "md5": "c0b7eb8bb1d2927f7abb8cf1bc4d9033",
          "sha256": "8d33c53ad6b7c361be7b115327e177f3c046ae05338bd7df7c4b0a0d3ff346d0"
        },
        "downloads": -1,
        "filename": "trikit-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0b7eb8bb1d2927f7abb8cf1bc4d9033",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 159076,
        "upload_time": "2020-10-05T03:37:23",
        "upload_time_iso_8601": "2020-10-05T03:37:23.288134Z",
        "url": "https://files.pythonhosted.org/packages/16/a3/a8809fa34a3dfbfaa3f5b98850888071aeb10d94c74a954e53678be72b91/trikit-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b4acb43821699d753d0d4eb4c6c153dd54269753ef72114b9a47435b761af9e",
          "md5": "6430e5751126da78250ac769bbef4f19",
          "sha256": "1a0fdcaf5ba7cf8d74972d50202e169d5c63595ee53dda0384fec8b300521ad3"
        },
        "downloads": -1,
        "filename": "trikit-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6430e5751126da78250ac769bbef4f19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 163196,
        "upload_time": "2020-10-05T03:37:26",
        "upload_time_iso_8601": "2020-10-05T03:37:26.862054Z",
        "url": "https://files.pythonhosted.org/packages/7b/4a/cb43821699d753d0d4eb4c6c153dd54269753ef72114b9a47435b761af9e/trikit-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "606338e4a179f3f4efb8f6faccda839efae7d19484c3778b531dc8d29b4b99eb",
          "md5": "4ab2a76cd5b98e1ed1f0ce82ddbd6ff8",
          "sha256": "2630dd87aa2c982eb43ce20c961951668cbe7fbc9d7358e48eb38402c8351959"
        },
        "downloads": -1,
        "filename": "trikit-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ab2a76cd5b98e1ed1f0ce82ddbd6ff8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42956,
        "upload_time": "2020-10-05T03:49:55",
        "upload_time_iso_8601": "2020-10-05T03:49:55.784534Z",
        "url": "https://files.pythonhosted.org/packages/60/63/38e4a179f3f4efb8f6faccda839efae7d19484c3778b531dc8d29b4b99eb/trikit-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7c02c071347502a2e81ee904b7761fd4eeb5c0586e62afcc8e3731e1d26b666",
          "md5": "7a2d67c75db78b10597d76e4353729cf",
          "sha256": "3f9f942847971660534d0609e4f6defd92d2e28ed39fab5557cfe6e2d2227f03"
        },
        "downloads": -1,
        "filename": "trikit-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "7a2d67c75db78b10597d76e4353729cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55156,
        "upload_time": "2020-10-05T03:49:57",
        "upload_time_iso_8601": "2020-10-05T03:49:57.230717Z",
        "url": "https://files.pythonhosted.org/packages/b7/c0/2c071347502a2e81ee904b7761fd4eeb5c0586e62afcc8e3731e1d26b666/trikit-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2926df675701bb8ad4ecd63afea48c9ed2a542e6c7d00e8f8fefc59e9938ae4d",
          "md5": "9becf18d30f245aa9a5d62d1634428bf",
          "sha256": "14a47da035b969f50d48f5b4cc95558fef4e96e3c4282842ff5d38687e973a88"
        },
        "downloads": -1,
        "filename": "trikit-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9becf18d30f245aa9a5d62d1634428bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 575219,
        "upload_time": "2021-08-17T19:59:09",
        "upload_time_iso_8601": "2021-08-17T19:59:09.643678Z",
        "url": "https://files.pythonhosted.org/packages/29/26/df675701bb8ad4ecd63afea48c9ed2a542e6c7d00e8f8fefc59e9938ae4d/trikit-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "918f8d1ef861a65f711b6ffab5a2b1b21572a3714bd8419bba829bc62e477809",
          "md5": "38df0f04e3c769df393a6c9e6ddd1564",
          "sha256": "800c9339c449b072bc7e6a72c79303b9171a9a1e266a1f201caaa2831e4ad20e"
        },
        "downloads": -1,
        "filename": "trikit-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38df0f04e3c769df393a6c9e6ddd1564",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 582133,
        "upload_time": "2021-08-17T19:59:11",
        "upload_time_iso_8601": "2021-08-17T19:59:11.498818Z",
        "url": "https://files.pythonhosted.org/packages/91/8f/8d1ef861a65f711b6ffab5a2b1b21572a3714bd8419bba829bc62e477809/trikit-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bf2bbe0ebdd9e9524aabffb1b1f1b240cf91eff0b66b44be6f47b9ee6753167",
          "md5": "8b654f4a2d9ecf38b52f12f291d38f83",
          "sha256": "389b091f7b9bf99c79aa16233aa255982e46cc1770301a27328021961859b445"
        },
        "downloads": -1,
        "filename": "trikit-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b654f4a2d9ecf38b52f12f291d38f83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 608934,
        "upload_time": "2021-08-18T20:28:10",
        "upload_time_iso_8601": "2021-08-18T20:28:10.870784Z",
        "url": "https://files.pythonhosted.org/packages/1b/f2/bbe0ebdd9e9524aabffb1b1f1b240cf91eff0b66b44be6f47b9ee6753167/trikit-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed5fc5e48a3a98f811287dc321d3543ee19e9032d743d5b6d03994560ef3e9b3",
          "md5": "bca60907caa62806502480fc4a64c286",
          "sha256": "2809a9687aa2451afe68f3a48c7788962b180002cb1dd1fcd2c54a7ec3f4ee34"
        },
        "downloads": -1,
        "filename": "trikit-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bca60907caa62806502480fc4a64c286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 612763,
        "upload_time": "2021-08-18T20:28:12",
        "upload_time_iso_8601": "2021-08-18T20:28:12.895125Z",
        "url": "https://files.pythonhosted.org/packages/ed/5f/c5e48a3a98f811287dc321d3543ee19e9032d743d5b6d03994560ef3e9b3/trikit-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "728822aa077d9dca964c20ddc4b070c07dadc246227a30ae93074e53df607e14",
          "md5": "a0db32c4504be0aa35d8024bf13509c8",
          "sha256": "7bee4405df02fb4736703ab294adb571c2f0578792e8e4940b5b5cad67999682"
        },
        "downloads": -1,
        "filename": "trikit-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0db32c4504be0aa35d8024bf13509c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 611872,
        "upload_time": "2021-08-25T22:03:34",
        "upload_time_iso_8601": "2021-08-25T22:03:34.183644Z",
        "url": "https://files.pythonhosted.org/packages/72/88/22aa077d9dca964c20ddc4b070c07dadc246227a30ae93074e53df607e14/trikit-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11dab30877e557839aea89d75e9252ebc6178652bc93333398a3c7acd2b49ec7",
          "md5": "ef93ac554a6036e7115c36eed3ba89d7",
          "sha256": "b4e0eb62888f407c6bb26b87ffb8f284cbd7e87f19bc6440a14349f02c284cab"
        },
        "downloads": -1,
        "filename": "trikit-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ef93ac554a6036e7115c36eed3ba89d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 619003,
        "upload_time": "2021-08-25T22:03:35",
        "upload_time_iso_8601": "2021-08-25T22:03:35.935443Z",
        "url": "https://files.pythonhosted.org/packages/11/da/b30877e557839aea89d75e9252ebc6178652bc93333398a3c7acd2b49ec7/trikit-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5d7f9b188f05597b119816b6c32a03d199ba114aafdfcc555d5c22b88a1049b",
          "md5": "3a7a9a9bfd9c1b5360ec5dc5720e9634",
          "sha256": "10005e004c5bf2582f7a84f6621941fe1bcdd29976ccb7de5b142bd4088989a9"
        },
        "downloads": -1,
        "filename": "trikit-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a7a9a9bfd9c1b5360ec5dc5720e9634",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 611852,
        "upload_time": "2021-08-26T02:52:12",
        "upload_time_iso_8601": "2021-08-26T02:52:12.980883Z",
        "url": "https://files.pythonhosted.org/packages/f5/d7/f9b188f05597b119816b6c32a03d199ba114aafdfcc555d5c22b88a1049b/trikit-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d97e30d6fa20b23ae3c931e57731c37da4fb375f85033ff48c07e6144ca0df39",
          "md5": "613483000949fe1669fbd66288954436",
          "sha256": "9474803b7967c73ffbd1d6f52602d6b585e341fa18ab73557c618f62a3bc5b00"
        },
        "downloads": -1,
        "filename": "trikit-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "613483000949fe1669fbd66288954436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 618977,
        "upload_time": "2021-08-26T02:52:15",
        "upload_time_iso_8601": "2021-08-26T02:52:15.060240Z",
        "url": "https://files.pythonhosted.org/packages/d9/7e/30d6fa20b23ae3c931e57731c37da4fb375f85033ff48c07e6144ca0df39/trikit-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5d7f9b188f05597b119816b6c32a03d199ba114aafdfcc555d5c22b88a1049b",
        "md5": "3a7a9a9bfd9c1b5360ec5dc5720e9634",
        "sha256": "10005e004c5bf2582f7a84f6621941fe1bcdd29976ccb7de5b142bd4088989a9"
      },
      "downloads": -1,
      "filename": "trikit-0.3.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a7a9a9bfd9c1b5360ec5dc5720e9634",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 611852,
      "upload_time": "2021-08-26T02:52:12",
      "upload_time_iso_8601": "2021-08-26T02:52:12.980883Z",
      "url": "https://files.pythonhosted.org/packages/f5/d7/f9b188f05597b119816b6c32a03d199ba114aafdfcc555d5c22b88a1049b/trikit-0.3.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d97e30d6fa20b23ae3c931e57731c37da4fb375f85033ff48c07e6144ca0df39",
        "md5": "613483000949fe1669fbd66288954436",
        "sha256": "9474803b7967c73ffbd1d6f52602d6b585e341fa18ab73557c618f62a3bc5b00"
      },
      "downloads": -1,
      "filename": "trikit-0.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "613483000949fe1669fbd66288954436",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 618977,
      "upload_time": "2021-08-26T02:52:15",
      "upload_time_iso_8601": "2021-08-26T02:52:15.060240Z",
      "url": "https://files.pythonhosted.org/packages/d9/7e/30d6fa20b23ae3c931e57731c37da4fb375f85033ff48c07e6144ca0df39/trikit-0.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}