{
  "info": {
    "author": "Vitaly Bogomolov",
    "author_email": "mail@vitaly-bogomolov.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DjangoAuthEmailPin library\r\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/vb64/django.admin.auth.emailpin/pep257.yml?label=Pep257&style=plastic&branch=main)](https://github.com/vb64/django.admin.auth.emailpin/actions?query=workflow%3Apep257)\r\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/vb64/django.admin.auth.emailpin/django3.yml?label=Django%203.2.14%20Python%203.7-3.10&style=plastic&branch=main)](https://github.com/vb64/django.admin.auth.emailpin/actions?query=workflow%3Adjango3)\r\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/vb64/django.admin.auth.emailpin/django4.yml?label=Django%204.1.1%20Python%203.8-3.10&style=plastic&branch=main)](https://github.com/vb64/django.admin.auth.emailpin/actions?query=workflow%3Adjango4)\r\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/9f0c71798cf640e3975d29142939451f)](https://www.codacy.com/gh/vb64/django.admin.auth.emailpin/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vb64/django.admin.auth.emailpin&amp;utm_campaign=Badge_Grade)\r\n[![Codacy Badge](https://app.codacy.com/project/badge/Coverage/9f0c71798cf640e3975d29142939451f)](https://www.codacy.com/gh/vb64/django.admin.auth.emailpin/dashboard?utm_source=github.com&utm_medium=referral&utm_content=vb64/django.admin.auth.emailpin&utm_campaign=Badge_Coverage)\r\n\r\n[In Russian](READMEru.md)\r\n\r\nThe free, open-source DjangoAuthEmailPin library is designed for password-free user authorization in the Django admin panel.\r\nOne-time codes are sent to users by email to enter the admin area.\r\n\r\n## Installation\r\n\r\n```bash\r\npip install django-admin-auth-emailpin\r\n```\r\n\r\n## Usage\r\n\r\nTo send authorization codes, the regular way of [sending email in Django](https://docs.djangoproject.com/en/dev/topics/email/) is used.\r\nTherefore, in the `settings.py` file of your project, you must specify the details of the mail server used.\r\n\r\n```python\r\n# settings.py\r\nEMAIL_HOST = 'smtp.gmail.com'\r\nEMAIL_PORT = 587\r\nEMAIL_USE_TLS = True\r\n```\r\n\r\nThe Django admin user model must have special fields to use the library.\r\n\r\n-   `name`: primary email address for user.\r\n-   `custom_email`: optional additional user email.\r\n-   `is_active`: if this field is set to False, then the user is disabled in admin panel.\r\n\r\nThe library provides an abstract `User` class that defines these fields.\r\nThis class can be used as a base class when defining the user model of your project.\r\n\r\n```python\r\n# models.py\r\nfrom django_admin_auth_emailpin.models import User\r\n\r\nclass MyUser(User):\r\n    # Titles for fields in Django admin\r\n    title_fld_name = \"Login\"\r\n    title_fld_email = \"Custom email\"\r\n    title_fld_active = \"Active\"\r\n```\r\n\r\nFor user authorization using the library, your project must contain a model,\r\ninherited from the `PinCode` class from the library.\r\n\r\n```python\r\n# models.py\r\nfrom django_admin_auth_emailpin.models import PinCode\r\n\r\nclass Pin(PinCode):\r\n\r\n```\r\n\r\nThe following methods need to be defined in this model.\r\n\r\n### Method mail_secrets\r\n\r\nReturns a tuple of three elements specifying the parameters for accessing the mail server.\r\n\r\n-   address where authorization codes for the `admin` user (database superuser) will be sent\r\n-   username to connect to the mail server\r\n-   password to connect to the mail server\r\n\r\n```python\r\n# models.py\r\n\r\n    @classmethod\r\n    def mail_secrets(cls):\r\n        return (\r\n          'admin@example.com',\r\n          'example.admin@gmail.com',\r\n          'smtp-password',\r\n        )\r\n```\r\n\r\n### Method mail_inacive\r\n\r\nGets an instance of the user model that is denied access to the admin panel (the `is_active` field is set to False).\r\n\r\nReturns a tuple of three elements specifying the parameters of the email that will be sent to this user.\r\n\r\n-   the address from which the email will be sent\r\n-   email subject text\r\n-   email body text\r\n\r\n```python\r\n# models.py\r\n\r\n    @classmethod\r\n    def mail_inacive(cls, user):\r\n        return (\r\n          \"noreply@example.com\",\r\n          \"Failed login at example.com.\",\r\n          \"Your account {} is disabled. Ask for admin to solve issue.\".format(user),\r\n        )\r\n```\r\n\r\n### Method mail_login\r\n\r\nGets the model instance of the user who requested authorization and the model instance of the authorization code generated for that user.\r\n\r\nReturns a tuple of three elements defining the parameters of the email with authorization data that will be sent to this user.\r\n\r\n-   the address from which the email will be sent\r\n-   email subject text\r\n-   email body text\r\n\r\n```python\r\n# models.py\r\n\r\n    @classmethod\r\n    def mail_login(cls, user, pin):\r\n        return (\r\n          \"noreply@example.com\",\r\n          \"Login at example.com\",\r\n          \"To login as {} use PIN code: {}\".format(user, pin.code),\r\n        )\r\n```\r\n\r\n### User Authorizations\r\n\r\nTo start authorization of a user named `username`, you need to call the `Pin.auth` method,\r\npassing it the model class and username.\r\n\r\nIf there is a user with this name in the database and he is allowed to enter the admin panel (field `is_active=True`),\r\na one-time authorization code will be generated for this user and an email with this code will be sent to the user.\r\n\r\nThe `Pin.auth` method will return `True` in this case.\r\n\r\nIf the user with the given name is not in the database or he is denied access to the admin panel (field `is_active=False`),\r\nthe `Pin.auth` method will return `False`.\r\n\r\n```python\r\n# views.py\r\nfrom .models import MyUser, Pin\r\n\r\nassert Pin.auth(MyUser, 'username')\r\n```\r\n\r\nTo complete the authorization, you need to get the value of the authorization code from the user and call the `Pin.is_valid` method.\r\nThis method should be passed the name of the authorized user and the authorization code.\r\n\r\nIf a valid code value is used, the method will return `True` and the authorization code used in the call will become invalid.\r\n\r\n```python\r\n# views.py\r\nfrom django.contrib.auth import login\r\nfrom django.contrib.auth.models import User\r\nfrom .models import Pin\r\n\r\nif Pin.is_valid(username, code):\r\n    user = User.objects.filter(username=username)[0]\r\n    login(request, user)\r\n```\r\n\r\n## Development\r\n\r\n```\r\n$ git clone git@github.com:vb64/django.admin.auth.emailpin\r\n$ cd django.admin.auth.emailpin\r\n$ make setup PYTHON_BIN=/path/to/python3\r\n$ make tests\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vb64/django.admin.auth.emailpin",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-auth-emailpin",
    "package_url": "https://pypi.org/project/django-admin-auth-emailpin/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-admin-auth-emailpin/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vb64/django.admin.auth.emailpin/issues",
      "Homepage": "https://github.com/vb64/django.admin.auth.emailpin"
    },
    "release_url": "https://pypi.org/project/django-admin-auth-emailpin/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Authorization for Django admin through one-time codes sent by email.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17223751,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d759d65dc13122707be37dd974889dd39190418e53fa53fe75d74057c56864b",
          "md5": "31ec7a3a8b255b9f064c09fc2a75523b",
          "sha256": "c7aa4a581f19d47b2bd997da1608904a148f85615396b4d1a2c64a2648fef76a"
        },
        "downloads": -1,
        "filename": "django_admin_auth_emailpin-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31ec7a3a8b255b9f064c09fc2a75523b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5761,
        "upload_time": "2023-03-09T12:47:41",
        "upload_time_iso_8601": "2023-03-09T12:47:41.052266Z",
        "url": "https://files.pythonhosted.org/packages/4d/75/9d65dc13122707be37dd974889dd39190418e53fa53fe75d74057c56864b/django_admin_auth_emailpin-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80d4b66436eab0ae73a242fd10b8158aedb4feae81396dfd92a983cec4aa93ed",
          "md5": "a8e2ae4e9de66a73ad8ec18e3952fde8",
          "sha256": "d28749cc883f3e064683149bf3a7b60a823a4a4d90f019d00c1fcfafa58a6ca9"
        },
        "downloads": -1,
        "filename": "django_admin_auth_emailpin-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8e2ae4e9de66a73ad8ec18e3952fde8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5634,
        "upload_time": "2023-03-09T12:47:43",
        "upload_time_iso_8601": "2023-03-09T12:47:43.318667Z",
        "url": "https://files.pythonhosted.org/packages/80/d4/b66436eab0ae73a242fd10b8158aedb4feae81396dfd92a983cec4aa93ed/django_admin_auth_emailpin-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d759d65dc13122707be37dd974889dd39190418e53fa53fe75d74057c56864b",
        "md5": "31ec7a3a8b255b9f064c09fc2a75523b",
        "sha256": "c7aa4a581f19d47b2bd997da1608904a148f85615396b4d1a2c64a2648fef76a"
      },
      "downloads": -1,
      "filename": "django_admin_auth_emailpin-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31ec7a3a8b255b9f064c09fc2a75523b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5761,
      "upload_time": "2023-03-09T12:47:41",
      "upload_time_iso_8601": "2023-03-09T12:47:41.052266Z",
      "url": "https://files.pythonhosted.org/packages/4d/75/9d65dc13122707be37dd974889dd39190418e53fa53fe75d74057c56864b/django_admin_auth_emailpin-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80d4b66436eab0ae73a242fd10b8158aedb4feae81396dfd92a983cec4aa93ed",
        "md5": "a8e2ae4e9de66a73ad8ec18e3952fde8",
        "sha256": "d28749cc883f3e064683149bf3a7b60a823a4a4d90f019d00c1fcfafa58a6ca9"
      },
      "downloads": -1,
      "filename": "django_admin_auth_emailpin-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a8e2ae4e9de66a73ad8ec18e3952fde8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5634,
      "upload_time": "2023-03-09T12:47:43",
      "upload_time_iso_8601": "2023-03-09T12:47:43.318667Z",
      "url": "https://files.pythonhosted.org/packages/80/d4/b66436eab0ae73a242fd10b8158aedb4feae81396dfd92a983cec4aa93ed/django_admin_auth_emailpin-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}