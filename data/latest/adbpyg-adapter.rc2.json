{
  "info": {
    "author": "Anthony Mahanna",
    "author_email": "anthony.mahanna@arangodb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# ArangoDB-PyG Adapter\n\n[![build](https://github.com/arangoml/pyg-adapter/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/arangoml/pyg-adapter/actions/workflows/build.yml)\n[![CodeQL](https://github.com/arangoml/pyg-adapter/actions/workflows/analyze.yml/badge.svg?branch=master)](https://github.com/arangoml/pyg-adapter/actions/workflows/analyze.yml)\n[![Coverage Status](https://coveralls.io/repos/github/arangoml/pyg-adapter/badge.svg?branch=master)](https://coveralls.io/github/arangoml/pyg-adapter)\n[![Last commit](https://img.shields.io/github/last-commit/arangoml/pyg-adapter)](https://github.com/arangoml/pyg-adapter/commits/master)\n\n[![PyPI version badge](https://img.shields.io/pypi/v/adbpyg-adapter?color=3775A9&style=for-the-badge&logo=pypi&logoColor=FFD43B)](https://pypi.org/project/adbpyg-adapter/)\n[![Python versions badge](https://img.shields.io/pypi/pyversions/adbpyg-adapter?color=3776AB&style=for-the-badge&logo=python&logoColor=FFD43B)](https://pypi.org/project/adbpyg-adapter/)\n\n[![License](https://img.shields.io/github/license/arangoml/pyg-adapter?color=9E2165&style=for-the-badge)](https://github.com/arangoml/pyg-adapter/blob/master/LICENSE)\n[![Code style: black](https://img.shields.io/static/v1?style=for-the-badge&label=code%20style&message=black&color=black)](https://github.com/psf/black)\n[![Downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=282661&label=Downloads&query=total_downloads&url=https://api.pepy.tech/api/projects/adbpyg-adapter)](https://pepy.tech/project/adbpyg-adapter)\n\n\n<a href=\"https://www.arangodb.com/\" rel=\"arangodb.com\">![](https://raw.githubusercontent.com/arangoml/pyg-adapter/master/examples/assets/adb_logo.png)</a>\n<a href=\"https://www.pyg.org/\" rel=\"pyg.org\"><img src=\"https://raw.githubusercontent.com/pyg-team/pyg_sphinx_theme/master/pyg_sphinx_theme/static/img/pyg_logo_text.svg?sanitize=true\" width=40% /></a>\n\nThe ArangoDB-PyG Adapter exports Graphs from ArangoDB, the multi-model database for graph & beyond, into PyTorch Geometric (PyG), a PyTorch-based Graph Neural Network library, and vice-versa.\n\n## About PyG\n\n**PyG** *(PyTorch Geometric)* is a library built upon [PyTorch](https://pytorch.org/) to easily write and train Graph Neural Networks (GNNs) for a wide range of applications related to structured data.\n\nIt consists of various methods for deep learning on graphs and other irregular structures, also known as *[geometric deep learning](http://geometricdeeplearning.com/)*, from a variety of published papers.\nIn addition, it consists of easy-to-use mini-batch loaders for operating on many small and single giant graphs, [multi GPU-support](https://github.com/pyg-team/pytorch_geometric/tree/master/examples/multi_gpu), [`DataPipe` support](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/datapipe.py), distributed graph learning via [Quiver](https://github.com/pyg-team/pytorch_geometric/tree/master/examples/quiver), a large number of common benchmark datasets (based on simple interfaces to create your own), the [GraphGym](https://pytorch-geometric.readthedocs.io/en/latest/notes/graphgym.html) experiment manager, and helpful transforms, both for learning on arbitrary graphs as well as on 3D meshes or point clouds.\n\n## Installation\n\n#### Latest Release\n```\npip install torch\npip install adbpyg-adapter\n```\n#### Current State\n```\npip install torch\npip install git+https://github.com/arangoml/pyg-adapter.git\n```\n\n##  Quickstart\n\n[![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/arangoml/pyg-adapter/blob/master/examples/ArangoDB_PyG_Adapter.ipynb)\n\n```py\nimport torch\nimport pandas\nfrom torch_geometric.datasets import FakeHeteroDataset\n\nfrom arango import ArangoClient  # Python-Arango driver\n\nfrom adbpyg_adapter import ADBPyG_Adapter, ADBPyG_Controller\nfrom adbpyg_adapter.encoders import IdentityEncoder, CategoricalEncoder\n\n# Load some fake PyG data for demo purposes\ndata = FakeHeteroDataset(\n    num_node_types=2,\n    num_edge_types=3,\n    avg_num_nodes=20,\n    avg_num_channels=3,  # avg number of features per node\n    edge_dim=2,  # number of features per edge\n    num_classes=3,  # number of unique label values\n)[0]\n\n# Let's assume that the ArangoDB \"IMDB\" dataset is imported to this endpoint\ndb = ArangoClient(hosts=\"http://localhost:8529\").db(\"_system\", username=\"root\", password=\"\")\n\nadbpyg_adapter = ADBPyG_Adapter(db)\n```\n\n### PyG to ArangoDB\n\nNote: If the PyG graph contains `_key`, `_v_key`, or `_e_key` properties for any node / edge types, the adapter will assume to persist those values as [ArangoDB document keys](https://www.arangodb.com/docs/stable/data-modeling-naming-conventions-document-keys.html). See the `Full Cycle (ArangoDB -> PyG -> ArangoDB)` section below for an example.\n\n```py\n# 1.1: PyG to ArangoDB\nadb_g = adbpyg_adapter.pyg_to_arangodb(\"FakeData\", data)\n\n# 1.2: PyG to ArangoDB with a (completely optional) metagraph for customized adapter behaviour\ndef y_tensor_to_2_column_dataframe(pyg_tensor):\n    \"\"\"\n    A user-defined function to create two\n    ArangoDB attributes out of the 'y' label tensor\n\n    NOTE: user-defined functions must return a Pandas Dataframe\n    \"\"\"\n    label_map = {0: \"Kiwi\", 1: \"Blueberry\", 2: \"Avocado\"}\n\n    df = pandas.DataFrame(columns=[\"label_num\", \"label_str\"])\n    df[\"label_num\"] = pyg_tensor.tolist()\n    df[\"label_str\"] = df[\"label_num\"].map(label_map)\n\n    return df\n\n\nmetagraph = {\n    \"nodeTypes\": {\n        \"v0\": {\n            \"x\": \"features\",  # 1) You can specify a string value if you want to rename your PyG data when stored in ArangoDB\n            \"y\": y_tensor_to_2_column_dataframe,  # 2) you can specify a function for user-defined handling, as long as the function returns a Pandas DataFrame\n        },\n        # 3) You can specify set of strings if you want to preserve the same PyG attribute names for the node/edge type\n        \"v1\": {\"x\"} # this is equivalent to {\"x\": \"x\"}\n    },\n    \"edgeTypes\": {\n        (\"v0\", \"e0\", \"v0\"): {\n            # 4) You can specify a list of strings for tensor dissasembly (if you know the number of node/edge features in advance)\n            \"edge_attr\": [ \"a\", \"b\"]  \n        },\n    },\n}\n\n\nadb_g = adbpyg_adapter.pyg_to_arangodb(\"FakeData\", data, metagraph, explicit_metagraph=False)\n\n# 1.3: PyG to ArangoDB with the same (optional) metagraph, but with `explicit_metagraph=True`\n# With `explicit_metagraph=True`, the node & edge types omitted from the metagraph will NOT be converted to ArangoDB.\n# Only 'v0', 'v1' and ('v0', 'e0', 'v0') will be brought over (i.e 'v2', ('v0', 'e0', 'v1'), ... are ignored)\nadb_g = adbpyg_adapter.pyg_to_arangodb(\"FakeData\", data, metagraph, explicit_metagraph=True)\n\n# 1.4: PyG to ArangoDB with a Custom Controller  (more user-defined behavior)\nclass Custom_ADBPyG_Controller(ADBPyG_Controller):\n    def _prepare_pyg_node(self, pyg_node: dict, node_type: str) -> dict:\n        \"\"\"Optionally modify a PyG node object before it gets inserted into its designated ArangoDB collection.\n\n        :param pyg_node: The PyG node object to (optionally) modify.\n        :param node_type: The PyG Node Type of the node.\n        :return: The PyG Node object\n        \"\"\"\n        pyg_node[\"foo\"] = \"bar\"\n        return pyg_node\n\n    def _prepare_pyg_edge(self, pyg_edge: dict, edge_type: tuple) -> dict:\n        \"\"\"Optionally modify a PyG edge object before it gets inserted into its designated ArangoDB collection.\n\n        :param pyg_edge: The PyG edge object to (optionally) modify.\n        :param edge_type: The Edge Type of the PyG edge. Formatted\n            as (from_collection, edge_collection, to_collection)\n        :return: The PyG Edge object\n        \"\"\"\n        pyg_edge[\"bar\"] = \"foo\"\n        return pyg_edge\n\n\nadb_g = ADBPyG_Adapter(db, Custom_ADBPyG_Controller()).pyg_to_arangodb(\"FakeData\", data)\n```\n\n### ArangoDB to PyG\n```py\n# Start from scratch!\ndb.delete_graph(\"FakeData\", drop_collections=True, ignore_missing=True)\nadbpyg_adapter.pyg_to_arangodb(\"FakeData\", data)\n\n# 2.1: ArangoDB to PyG via Graph name (does not transfer attributes)\npyg_g = adbpyg_adapter.arangodb_graph_to_pyg(\"FakeData\")\n\n# 2.2: ArangoDB to PyG via Collection names (does not transfer attributes)\npyg_g = adbpyg_adapter.arangodb_collections_to_pyg(\"FakeData\", v_cols={\"v0\", \"v1\"}, e_cols={\"e0\"})\n\n# 2.3: ArangoDB to PyG via Metagraph v1 (transfer attributes \"as is\", meaning they are already formatted to PyG data standards)\nmetagraph_v1 = {\n    \"vertexCollections\": {\n        # Move the \"x\" & \"y\" ArangoDB attributes to PyG as \"x\" & \"y\" Tensors\n        \"v0\": {\"x\", \"y\"}, # equivalent to {\"x\": \"x\", \"y\": \"y\"}\n        \"v1\": {\"v1_x\": \"x\"}, # store the 'x' feature matrix as 'v1_x' in PyG\n    },\n    \"edgeCollections\": {\n        \"e0\": {\"edge_attr\"},\n    },\n}\npyg_g = adbpyg_adapter.arangodb_to_pyg(\"FakeData\", metagraph_v1)\n\n# 2.4: ArangoDB to PyG via Metagraph v2 (transfer attributes via user-defined encoders)\n# For more info on user-defined encoders in PyG, see https://pytorch-geometric.readthedocs.io/en/latest/notes/load_csv.html\nmetagraph_v2 = {\n    \"vertexCollections\": {\n        \"Movies\": {\n            \"x\": {  # Build a feature matrix from the \"Action\" & \"Drama\" document attributes\n                \"Action\": IdentityEncoder(dtype=torch.long),\n                \"Drama\": IdentityEncoder(dtype=torch.long),\n            },\n            \"y\": \"Comedy\",\n        },\n        \"Users\": {\n            \"x\": {\n                \"Gender\": CategoricalEncoder(mapping={\"M\": 0, \"F\": 1}),\n                \"Age\": IdentityEncoder(dtype=torch.long),\n            }\n        },\n    },\n    \"edgeCollections\": {\n        \"Ratings\": { \"edge_weight\": \"Rating\" } # Use the 'Rating' attribute for the PyG 'edge_weight' property\n    },\n}\npyg_g = adbpyg_adapter.arangodb_to_pyg(\"IMDB\", metagraph_v2)\n\n# 2.5: ArangoDB to PyG via Metagraph v3 (transfer attributes via user-defined functions)\ndef udf_v0_x(v0_df):\n    # process v0_df here to return v0 \"x\" feature matrix\n    # v0_df[\"x\"] = ...\n    return torch.tensor(v0_df[\"x\"].to_list())\n\n\ndef udf_v1_x(v1_df):\n    # process v1_df here to return v1 \"x\" feature matrix\n    # v1_df[\"x\"] = ...\n    return torch.tensor(v1_df[\"x\"].to_list())\n\n\nmetagraph_v3 = {\n    \"vertexCollections\": {\n        \"v0\": {\n            \"x\": udf_v0_x,  # supports named functions\n            \"y\": lambda df: torch.tensor(df[\"y\"].to_list()),  # also supports lambda functions\n        },\n        \"v1\": {\"x\": udf_v1_x},\n    },\n    \"edgeCollections\": {\n        \"e0\": {\"edge_attr\": (lambda df: torch.tensor(df[\"edge_attr\"].to_list()))},\n    },\n}\npyg_g = adbpyg_adapter.arangodb_to_pyg(\"FakeData\", metagraph_v3)\n```\n\n### Experimental: `preserve_adb_keys`\n```py\n# With `preserve_adb_keys=True`, the adapter will preserve the ArangoDB vertex & edge _key values into the (newly created) PyG graph.\n# Users can then re-import their PyG graph into ArangoDB using the same _key values \npyg_g = adbpyg_adapter.arangodb_graph_to_pyg(\"imdb\", preserve_adb_keys=True)\n\n# pyg_g[\"Movies\"][\"_key\"] --> [\"1\", \"2\", ..., \"1682\"]\n# pyg_g[\"Users\"][\"_key\"] --> [\"1\", \"2\", ..., \"943\"]\n# pyg_g[(\"Users\", \"Ratings\", \"Movies\")][\"_key\"] --> [\"2732620466\", ..., \"2730643624\"]\n\n# Let's add a new PyG User Node by updating the _key property\npyg_g[\"Users\"][\"_key\"].append(\"new-user-here-944\")\n\n# Note: Prior to the re-import, we must manually set the number of nodes in the PyG graph, since the `arangodb_graph_to_pyg` API creates featureless node data\npyg_g[\"Movies\"].num_nodes = len(pyg_g[\"Movies\"][\"_key\"]) # 1682\npyg_g[\"Users\"].num_nodes = len(pyg_g[\"Users\"][\"_key\"]) # 944 (prev. 943)\n\n# Re-import PyG graph into ArangoDB\nadbpyg_adapter.pyg_to_arangodb(\"imdb\", pyg_g, on_duplicate=\"update\")\n```\n\n##  Development & Testing\n\nPrerequisite: `arangorestore`\n\n1. `git clone https://github.com/arangoml/pyg-adapter.git`\n2. `cd pyg-adapter`\n3. (create virtual environment of choice)\n4. `pip install -e .[dev]`\n5. (create an ArangoDB instance with method of choice)\n6. `pytest --url <> --dbName <> --username <> --password <>`\n\n**Note**: A `pytest` parameter can be omitted if the endpoint is using its default value:\n```python\ndef pytest_addoption(parser):\n    parser.addoption(\"--url\", action=\"store\", default=\"http://localhost:8529\")\n    parser.addoption(\"--dbName\", action=\"store\", default=\"_system\")\n    parser.addoption(\"--username\", action=\"store\", default=\"root\")\n    parser.addoption(\"--password\", action=\"store\", default=\"\")\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arangoml/pyg-adapter",
    "keywords": "arangodb,pyg,adapter",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adbpyg-adapter",
    "package_url": "https://pypi.org/project/adbpyg-adapter/",
    "platform": null,
    "project_url": "https://pypi.org/project/adbpyg-adapter/",
    "project_urls": {
      "Homepage": "https://github.com/arangoml/pyg-adapter"
    },
    "release_url": "https://pypi.org/project/adbpyg-adapter/1.1.0/",
    "requires_dist": [
      "requests (>=2.27.1)",
      "rich (>=12.5.1)",
      "pandas (>=1.3.5)",
      "python-arango (>=7.4.1)",
      "torch (>=1.12.0)",
      "torch-sparse (>=0.6.14)",
      "torch-scatter (>=2.0.9)",
      "torch-geometric (>=2.0.4)",
      "setuptools (>=45)",
      "black (>=22.6.0) ; extra == 'dev'",
      "flake8 (>=3.8.0) ; extra == 'dev'",
      "isort (>=5.0.0) ; extra == 'dev'",
      "mypy (>=0.790) ; extra == 'dev'",
      "pytest (>=6.0.0) ; extra == 'dev'",
      "pytest-cov (>=2.0.0) ; extra == 'dev'",
      "coveralls (>=3.3.1) ; extra == 'dev'",
      "types-setuptools (>=57.4.9) ; extra == 'dev'",
      "types-requests (>=2.27.11) ; extra == 'dev'",
      "networkx (>=2.5.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Convert ArangoDB graphs to PyG & vice-versa.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15169000,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9809098524c0c0985a8e0b38e06e134bbd03508f42aa712d9e594ccf3a0e437",
          "md5": "4d1d9eb4ffde87f0203507a6e68654bd",
          "sha256": "7c0f1d6c24056003b3097e2435e73129a9966a7b244aaa6aa8437cf7f45f9502"
        },
        "downloads": -1,
        "filename": "adbpyg_adapter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d1d9eb4ffde87f0203507a6e68654bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20463,
        "upload_time": "2022-07-29T21:47:22",
        "upload_time_iso_8601": "2022-07-29T21:47:22.184266Z",
        "url": "https://files.pythonhosted.org/packages/d9/80/9098524c0c0985a8e0b38e06e134bbd03508f42aa712d9e594ccf3a0e437/adbpyg_adapter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1a10583cb793bed2fc8a34eae5cae1c5e26ddd67d96320b636fb607ed90aa25",
          "md5": "3464fc67dfd4ee3f8668f4526b7cdeb0",
          "sha256": "91bcb0d248fa63f8edce374c5d1bcf9cbdc902251b117918d42d4be0e5bc0793"
        },
        "downloads": -1,
        "filename": "adbpyg_adapter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3464fc67dfd4ee3f8668f4526b7cdeb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29141,
        "upload_time": "2022-07-29T21:47:23",
        "upload_time_iso_8601": "2022-07-29T21:47:23.806702Z",
        "url": "https://files.pythonhosted.org/packages/b1/a1/0583cb793bed2fc8a34eae5cae1c5e26ddd67d96320b636fb607ed90aa25/adbpyg_adapter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df46b40a6b7e2b06493229c594614fbd1d555e1d3ee64c91d3d09f62a913ec1b",
          "md5": "f93dc66d3325d910359d0d219a237374",
          "sha256": "d113d95f4902881416a5e8e40a057e574823f0e172bde2fdf80f47cea20a719a"
        },
        "downloads": -1,
        "filename": "adbpyg_adapter-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f93dc66d3325d910359d0d219a237374",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23394,
        "upload_time": "2022-09-21T18:13:49",
        "upload_time_iso_8601": "2022-09-21T18:13:49.860587Z",
        "url": "https://files.pythonhosted.org/packages/df/46/b40a6b7e2b06493229c594614fbd1d555e1d3ee64c91d3d09f62a913ec1b/adbpyg_adapter-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3108200d2b6d90c2db8fa59e073de8e2ff9bd85e0a881cf1fabb62db0cafd6db",
          "md5": "3f44940142de319305319e65ebe845f8",
          "sha256": "17ab0ed68062c996af3cf3c55ef200c7f3bf333718344d61e11f1ab71b06e7fd"
        },
        "downloads": -1,
        "filename": "adbpyg_adapter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f44940142de319305319e65ebe845f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32556,
        "upload_time": "2022-09-21T18:13:51",
        "upload_time_iso_8601": "2022-09-21T18:13:51.638371Z",
        "url": "https://files.pythonhosted.org/packages/31/08/200d2b6d90c2db8fa59e073de8e2ff9bd85e0a881cf1fabb62db0cafd6db/adbpyg_adapter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df46b40a6b7e2b06493229c594614fbd1d555e1d3ee64c91d3d09f62a913ec1b",
        "md5": "f93dc66d3325d910359d0d219a237374",
        "sha256": "d113d95f4902881416a5e8e40a057e574823f0e172bde2fdf80f47cea20a719a"
      },
      "downloads": -1,
      "filename": "adbpyg_adapter-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f93dc66d3325d910359d0d219a237374",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23394,
      "upload_time": "2022-09-21T18:13:49",
      "upload_time_iso_8601": "2022-09-21T18:13:49.860587Z",
      "url": "https://files.pythonhosted.org/packages/df/46/b40a6b7e2b06493229c594614fbd1d555e1d3ee64c91d3d09f62a913ec1b/adbpyg_adapter-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3108200d2b6d90c2db8fa59e073de8e2ff9bd85e0a881cf1fabb62db0cafd6db",
        "md5": "3f44940142de319305319e65ebe845f8",
        "sha256": "17ab0ed68062c996af3cf3c55ef200c7f3bf333718344d61e11f1ab71b06e7fd"
      },
      "downloads": -1,
      "filename": "adbpyg_adapter-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3f44940142de319305319e65ebe845f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 32556,
      "upload_time": "2022-09-21T18:13:51",
      "upload_time_iso_8601": "2022-09-21T18:13:51.638371Z",
      "url": "https://files.pythonhosted.org/packages/31/08/200d2b6d90c2db8fa59e073de8e2ff9bd85e0a881cf1fabb62db0cafd6db/adbpyg_adapter-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}