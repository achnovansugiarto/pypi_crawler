{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Drain3\n\n## Introduction\n\nDrain3 is an online log template miner that can extract templates (clusters) from a stream of log messages in a timely\nmanner. It employs a parse tree with fixed depth to guide the log group search process, which effectively avoids\nconstructing a very deep and unbalanced tree.\n\nDrain3 continuously learns on-the-fly and automatically extracts \"log templates\" from raw log entries.\n\n#### Example:\n\nFor the input:\n\n```\nconnected to 10.0.0.1\nconnected to 10.0.0.2\nconnected to 10.0.0.3\nHex number 0xDEADBEAF\nHex number 0x10000\nuser davidoh logged in\nuser eranr logged in\n```\n\nDrain3 extracts the following templates:\n\n```\nID=1     : size=3         : connected to <:IP:>\nID=2     : size=2         : Hex number <:HEX:>\nID=3     : size=2         : user <:*:> logged in\n```\n\nFull sample program output:\n\n```\nStarting Drain3 template miner\nChecking for saved state\nSaved state not found\nDrain3 started with 'FILE' persistence\nreading from std-in (input 'q' to finish)\n> connected to 10.0.0.1\nSaving state of 1 clusters with 1 messages, 964 bytes, reason: cluster_created (1)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 1, \"cluster_size\": 1, \"template_mined\": \"connected to <:IP:>\", \"cluster_count\": 1}\nparameters: ['10.0.0.1']\n> connected to 10.0.0.2\n{\"change_type\": \"none\", \"cluster_id\": 1, \"cluster_size\": 2, \"template_mined\": \"connected to <:IP:>\", \"cluster_count\": 1}\nparameters: ['10.0.0.2']\n> connected to 10.0.0.3\n{\"change_type\": \"none\", \"cluster_id\": 1, \"cluster_size\": 3, \"template_mined\": \"connected to <:IP:>\", \"cluster_count\": 1}\nparameters: ['10.0.0.3']\n> Hex number 0xDEADBEAF\nSaving state of 2 clusters with 4 messages, 1120 bytes, reason: cluster_created (2)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 2, \"cluster_size\": 1, \"template_mined\": \"Hex number <:HEX:>\", \"cluster_count\": 2}\nparameters: ['0xDEADBEAF']\n> Hex number 0x10000\n{\"change_type\": \"none\", \"cluster_id\": 2, \"cluster_size\": 2, \"template_mined\": \"Hex number <:HEX:>\", \"cluster_count\": 2}\nparameters: ['0x10000']\n> user davidoh logged in\nSaving state of 3 clusters with 6 messages, 1164 bytes, reason: cluster_created (3)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 3, \"cluster_size\": 1, \"template_mined\": \"user davidoh logged in\", \"cluster_count\": 3}\nparameters: []\n> user eranr logged in\nSaving state of 3 clusters with 7 messages, 1168 bytes, reason: cluster_template_changed (3)\n{\"change_type\": \"cluster_template_changed\", \"cluster_id\": 3, \"cluster_size\": 2, \"template_mined\": \"user <:*:> logged in\", \"cluster_count\": 3}\nparameters: ['eranr']\nq\nClusters:\nID=1     : size=3         : connected to <:IP:>\nID=2     : size=2         : Hex number <:HEX:>\nID=3     : size=2         : user <:*:> logged in\n```\n\nThis project is an upgrade of the original [Drain](https://github.com/logpai/logparser/blob/master/logparser/Drain)\nproject by LogPAI from Python 2.7 to Python 3.6 or later with some bug-fixes and additional features.\n\nRead more information about Drain from the following paper:\n\n- Pinjia He, Jieming Zhu, Zibin Zheng, and Michael R.\n  Lyu. [Drain: An Online Log Parsing Approach with Fixed Depth Tree](http://jiemingzhu.github.io/pub/pjhe_icws2017.pdf),\n  Proceedings of the 24th International Conference on Web Services (ICWS), 2017.\n\nA possible Drain3 use case in this blog\npost: [Use open source Drain3 log-template mining project to monitor for network outages](https://developer.ibm.com/blogs/how-mining-log-templates-can-help-ai-ops-in-cloud-scale-data-centers)\n.\n\n#### New features\n\n- **Persistence**. Save and load Drain state into an [Apache Kafka](https://kafka.apache.org)\n  topic, [Redis](https://redis.io/) or a file.\n- **Streaming**. Support feeding Drain with messages one-be-one.\n- **Masking**. Replace some message parts (e.g numbers, IPs, emails) with wildcards. This improves the accuracy of\n  template mining.\n- **Packaging**. As a pip package.\n- **Memory efficiency**. Decrease the memory footprint of internal data structures and introduce cache to control max\n  memory consumed (thanks to @StanislawSwierc)\n- **Fast Match Only**. In case you want to separate training and inference phase, Drain3 provides a function for *fast*\n  matching against already-learned clusters (templates)\n  only, without the usage of regular expressions.\n\n#### Expected Input and Output\n\nThe input for Drain3 is the unstructured free-text portion log messages. It is recommended to extract structured headers\nlike timestamp, hostname. severity, etc.. from log messages before passing to Drain3, in order to improve mining\naccuracy.\n\nThe output is a dictionary with the following fields:\n\n- `change_type` - indicates either if a new template was identified, an existing template was changed or message added\n  to an existing cluster.\n- `cluster_id` - Sequential ID of the cluster that the log belongs to.\n- `cluster_size`- The size (message count) of the cluster that the log belongs to\n- `cluster_count` - Count clusters seen so far\n- `template_mined`- the last template of above cluster_id\n\nTemplates may change over time based on input, for example:\n\n```\naa aa aa\n{\"change_type\": \"cluster_created\", \"cluster_id\": 1, \"cluster_size\": 1, \"template_mined\": \"aa aa aa\", \"cluster_count\": 1}\nparameters: []\naa aa ab\n{\"change_type\": \"cluster_template_changed\", \"cluster_id\": 1, \"cluster_size\": 2, \"template_mined\": \"aa aa <:*:>\", \"cluster_count\": 1}\nparameters: ['ab']\naa aa cc\n{\"change_type\": \"none\", \"cluster_id\": 1, \"cluster_size\": 3, \"template_mined\": \"aa aa <:*:>\", \"cluster_count\": 1}\nparameters: ['cc']\n```\n\n**Explanation:** *Drain3 learned that the third token is a parameter*\n\n## Configuration\n\nDrain3 is configured using [configparser](https://docs.python.org/3.4/library/configparser.html). By default, config\nfilename is `drain3.ini` in working directory.\n\nDrain3 can also be configured passing a [TemplateMinerConfig](drain3/template_miner_config.py) object to\nthe [TemplateMiner](drain3/template_miner.py) constructor.\n\nAvailable parameters are:\n\n- `[DRAIN]/sim_th` - similarity threshold (default 0.4)\n- `[DRAIN]/depth` - depth of all leaf nodes (default 4)\n- `[DRAIN]/max_children` - max number of children of an internal node (default 100)\n- `[DRAIN]/max_clusters` - max number of tracked clusters (unlimited by default). When this number is reached, model\n  starts replacing old clusters with a new ones according to the LRU cache eviction policy.\n- `[DRAIN]/extra_delimiters` - delimiters to apply when splitting log message into words (in addition to whitespace) (\n  default none). Format is a Python list e.g. `['_', ':']`.\n- `[MASKING]/masking` - parameters masking - in json format (default \"\")\n- `[MASKING]/mask_prefix` & `[MASKING]/mask_suffix` - the wrapping of identified parameters in templates. By default, it\n  is `<` and `>` respectively.\n- `[SNAPSHOT]/snapshot_interval_minutes` - time interval for new snapshots (default 1)\n- `[SNAPSHOT]/compress_state` - whether to compress the state before saving it. This can be useful when using Kafka\n  persistence.\n\n## Masking\n\nThis feature allows masking of specific parameters in log message to specific keywords. Use a list of regular\nexpressions in the configuration file with the format `{'regex_pattern', 'mask_with'}` to set custom masking.\n\nIn order to mask an IP address created the file `drain3.ini` :\n\n```\n[MASKING]\nmasking = [\n    {\"regex_pattern\":\"((?<=[^A-Za-z0-9])|^)(\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})((?=[^A-Za-z0-9])|$)\", \"mask_with\": \"IP\"},\n    ]\n```\n\nNow, Drain3 will recognize IP addresses in templates, for example with input such as:\n\n```\nIP is 12.12.12.12\n{\"change_type\": \"cluster_created\", \"cluster_id\": 13, \"cluster_size\": 1, \"template_mined\": \"IP is <IP>\", \"cluster_count\": 13}\n```\n\nNote: template parameters that do not match any custom mask in the preliminary masking phase are replaced with `<*>`.\n\n## Persistence\n\nThe persistence feature saves and loads a snapshot of Drain3 state in (compressed) json format. This feature adds\nrestart resiliency to Drain allowing continuation of activity and knowledge across restarts.\n\nDrain3 state includes the search tree and all the clusters that were identified up until snapshot time.\n\nThe snapshot also persist number of occurrences per cluster, and the cluster_id.\n\nAn example of a snapshot:\n\n```\n{\"clusters\": [{\"cluster_id\": 1, \"log_template_tokens\": `[\"aa\", \"aa\", \"<\\*>\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 2}, {\"cluster_id\": 2, \"log_template_tokens\": `[\"My\", \"IP\", \"is\", \"<IP>\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 1}]...\n```\n\nThis example snapshot persist two clusters with the templates:\n\n> `[\"aa\", \"aa\", \"<*>\"]` - occurs twice\n>\n>  `[\"My\", \"IP\", \"is\", \"<IP>\"]` - occurs once\n\nSnapshots are created in the following events:\n\n- `cluster_created` - in any new template\n- `cluster_template_changed` - in any update of a template\n- `periodic` - after n minutes from the last snapshot. This is intended to save cluster sizes even if no new template\n  was identified.\n\nDrain3 currently supports the following persistence modes:\n\n- **Kafka** - The snapshot is saved in a dedicated topic used only for snapshots - the last message in this topic is the\n  last snapshot that will be loaded after restart. For Kafka persistence, you need to provide: `topic_name`. You may\n  also provide other `kwargs`\n  that are supported by `kafka.KafkaConsumer` and `kafka.Producer` e.g `bootstrap_servers`\n  to change Kafka endpoint (default is `localhost:9092`).\n\n- **Redis** - The snapshot is saved to a key in Redis database (contributed by @matabares).\n\n- **File** - The snapshot is saved to a file.\n\n- **Memory** - The snapshot is saved an in-memory object.\n\n- **None** - No persistence.\n\nDrain3 persistence modes can be easily extended to another medium / database by inheriting\nthe [PersistenceHandler](drain3/persistence_handler.py) class.\n\n## Training/Inference modes\n\nIn some use-cases, it is required to separate training and inference phases.\n\nIn training phase you should call `template_miner.add_log_message(log_line)`. \nThis will match log line against an existing cluster (if similarity is above threshold) or \ncreate a new cluster. It may also change the template of an existing cluster.\n\nIn inference mode you should call `template_miner.match(log_line)`. This will match log line\nagainst previously learned clusters only. No new clusters are created and templates of existing\nclusters are not changed. Match to existing cluster has to be perfect, \notherwise `None` is returned. You can use persistence option to \nload previously trained clusters before inference.\n\n## Memory efficiency\n\nThis feature limits the max memory used by the model. It is particularly important for large and possibly unbounded log\nstreams. This feature is controlled by the `max_clusters​` parameter, which sets the max number of clusters/templates\ntrarcked by the model. When the limit is reached, new templates start to replace the old ones according to the Least\nRecently Used (LRU) eviction policy. This makes the model adapt quickly to the most recent templates in the log stream.\n\n## Installation\n\nDrain3 is available from [PyPI](https://pypi.org/project/drain3). To install use `pip`:\n\n```\npip3 install drain3\n```\n\nNote: If you decide to use Kafka or Redis persistence, you should install relevant client library explicitly, since it\nis declared as an extra (optional) dependency, by either:\n\n```\npip3 install kafka-python\n```\n\n-- or --\n\n```\npip3 install redis\n```\n\n## Examples\n\nIn order to run the examples directly from the repository, you need to install dependencies. You can do that using *\npipenv* by executing the following command (assuming pipenv already installed):\n\n```shell\npython3 -m pipenv sync\n```\n\n#### Example 1 - `drain_stdin_demo`\n\nRun [examples/drain_stdin_demo.py](examples/drain_stdin_demo.py) from the root folder of the repository by:\n\n```\npython3 -m pipenv run python -m examples.drain_stdin_demo\n```\n\nThis example uses Drain3 on input from stdin and persist to either Kafka / file / no persistence.\n\nChange `persistence_type` variable in the example to change persistence mode.\n\nEnter several log lines using the command line. Press `q` to end online learn-and-match mode.\n\nNext, demo goes to match (inference) only mode, in which no new clusters are trained \nand input is matched against previously trained clusters only. Press `q` again to finish execution.\n\n#### Example 2 - `drain_bigfile_demo`\n\nRun [examples/drain_bigfile_demo](examples/drain_bigfile_demo.py) from the root folder of the repository by:\n\n```\npython3 -m pipenv run python -m examples.drain_bigfile_demo\n```\n\nThis example downloads a real-world log file and process all lines, then prints result clusters, prefix tree and\nperformance statistics.\n\n#### Sample config file\n\nAn example `drain3.ini` file with masking instructions can be found in the [examples](examples) folder as well.\n\n## Contributing\n\nOur project welcomes external contributions. Please refer to [CONTRIBUTING.md](CONTRIBUTING.md) for further details.\n\n## Change Log\n\n##### v0.9.7\n\n* Fixed bug in original Drain: log clusters were created multiple times for \n  log messages with fewer tokens than `max_node_depth`. \n* Changed `depth` property name to a more descriptive name `max_node_depth` \n  as Drain always subtracts 2 of `depth` argument value. Also added `log_cluster_depth` \n  property to reflect original value of depth argument (Breaking Change).\n* Restricted `depth` param to minimum sensible value of 3.\n* Added log cluster count to nodes in `Drain.print_tree()`\n* Added optional log cluster details to `Drain.print_tree()`\n\n##### v0.9.6\n\n* Fix issue https://github.com/IBM/Drain3/issues/38: Unnecessary update of \n  LRU cache in case `max_clusters` is used (thanks @StanislawSwierc).\n\n##### v0.9.5\n\n* Added: `TemplateMiner.match()` function for fast matching against existing clusters only.\n\n##### v0.9.4\n\n* Added: `TemplateMiner.get_parameter_list()` function to extract template parameters for raw log message (thanks to *\n  @cwyalpha*)\n* Added option to customize mask wrapper - Instead of the default\n  `<*>`, `<NUM>` etc, you can select any wrapper prefix or suffix by overriding\n  `TemplateMinerConfig.mask_prefix` and `TemplateMinerConfig.mask_prefix`\n* Fixed: config `.ini` file is always read from same folder as source file in demos in tests (thanks *@RobinMaas95*)\n\n##### v0.9.3\n\n* Fixed: comparison of type int with type str in function `add_seq_to_prefix_tree` #28\n  (bug introduced at v0.9.1)\n\n##### v0.9.2\n\n* Updated jsonpickle version\n* Keys `id_to_cluster` dict are now persisted by jsonpickle as `int` instead of `str` to avoid keys type conversion on\n  load snapshot which caused some issues.\n* Added cachetools dependency to `setup.py`.\n\n##### v0.9.1\n\n* Added option to configure `TemplateMiner` using a configuration object\n  (without `.ini` file).\n* Support for `print_tree()` to a file/stream.\n* Added `MemoryBufferPersistence`\n* Added unit tests for state save/load.\n* Bug fix: missing type-conversion in state loading, introduced in v0.9.0\n* Refactor: Drain prefix tree keys are now of type `str` also for 1st level\n  (was `int` before), for type consistency.\n\n##### v0.9.0\n\n* Decrease memory footprint of the main data structures.\n* Added `max_clusters` option to limit the number of tracked clusters.\n* Changed cluster identifier type from str to int\n* Added more unit tests and CI\n\n##### v0.8.6\n\n* Added `extra_delimiters` configuration option to Drain\n\n##### v0.8.5\n\n* Profiler improvements\n\n##### v0.8.4\n\n* Masking speed improvement\n\n##### v0.8.3\n\n* Fix: profiler state after load from snapshot\n\n##### v0.8.2\n\n* Fixed snapshot backward compatibility to v0.7.9\n\n##### v0.8.1\n\n* Bugfix in profiling configuration read\n\n##### v0.8.0\n\n* Added time profiling support (disabled by default)\n* Added cluster ID to snapshot reason log (credit: @boernd)\n* Minor Readability and documentation improvements in Drain\n\n##### v0.7.9\n\n* Fix: `KafkaPersistence` now accepts also `bootstrap_servers` as kwargs.\n\n##### v0.7.8\n\n* Using `kafka-python` package instead of `kafka` (newer).\n* Added support for specifying additional configuration as `kwargs` in Kafka persistence handler.\n\n##### v0.7.7\n\n* Corrected default Drain config values.\n\n##### v0.7.6\n\n* Improvement in config file handling (Note: new sections were added instead of `DEFAULT` section)\n\n##### v0.7.5\n\n* Made Kafka and Redis optional requirements\n \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "drain,log,parser,template,logs,miner",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parseros",
    "package_url": "https://pypi.org/project/parseros/",
    "platform": "",
    "project_url": "https://pypi.org/project/parseros/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/parseros/5.0/",
    "requires_dist": [
      "jsonpickle (==1.5.1)",
      "cachetools (==4.2.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Persistent & streaming log template miner",
    "version": "5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11889323,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "959a5914c63f00eca90f74eae17154c9d58454577a0b590017a30c3244cfc7f1",
          "md5": "71ac2826c975b947221fc7c63ac1b7ef",
          "sha256": "f056fb46651143cf927f5db85ca357df7311b0d01eda973ce4dd5dcb970221a7"
        },
        "downloads": -1,
        "filename": "Parseros-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71ac2826c975b947221fc7c63ac1b7ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8122,
        "upload_time": "2021-11-01T06:52:24",
        "upload_time_iso_8601": "2021-11-01T06:52:24.650510Z",
        "url": "https://files.pythonhosted.org/packages/95/9a/5914c63f00eca90f74eae17154c9d58454577a0b590017a30c3244cfc7f1/Parseros-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c619f32c078c582ce409057c1963b351bd4be7bb20e4264197f689c34dd11b0",
          "md5": "25273dc88c0658c85061a56335e347d2",
          "sha256": "ae903018c76bcbdf3a533692a5c003918fe9f826b46a1309c2bd78242023bb30"
        },
        "downloads": -1,
        "filename": "Parseros-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25273dc88c0658c85061a56335e347d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8689,
        "upload_time": "2021-11-01T06:52:27",
        "upload_time_iso_8601": "2021-11-01T06:52:27.166112Z",
        "url": "https://files.pythonhosted.org/packages/2c/61/9f32c078c582ce409057c1963b351bd4be7bb20e4264197f689c34dd11b0/Parseros-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "161976b0b764d7054fe86e3289495473e567079da13e3bef778c4bf2071395f4",
          "md5": "520f04ad36d204614da9458d05458807",
          "sha256": "242df59b81bb78901ebcacc1b7a50e96c433e82b20ee358b85c64ebd3d208003"
        },
        "downloads": -1,
        "filename": "parseros-4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "520f04ad36d204614da9458d05458807",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20190,
        "upload_time": "2021-11-01T07:34:41",
        "upload_time_iso_8601": "2021-11-01T07:34:41.328836Z",
        "url": "https://files.pythonhosted.org/packages/16/19/76b0b764d7054fe86e3289495473e567079da13e3bef778c4bf2071395f4/parseros-4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ccd982a09555d1494f05997c729d76fb46776381a6ea731daf049a64bd65917",
          "md5": "9867e321497130cadf50fb5c7ab24820",
          "sha256": "20756b9d9cf65ab91540da9a586b9bcf88f9bb54b8497d8233eaf65682e4e0a2"
        },
        "downloads": -1,
        "filename": "parseros-4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9867e321497130cadf50fb5c7ab24820",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23093,
        "upload_time": "2021-11-01T07:34:43",
        "upload_time_iso_8601": "2021-11-01T07:34:43.435228Z",
        "url": "https://files.pythonhosted.org/packages/2c/cd/982a09555d1494f05997c729d76fb46776381a6ea731daf049a64bd65917/parseros-4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a77ee82f42270b87f104cd5cf820f597c52505effa46cfc5dc8d0b058f586537",
          "md5": "46d756e3af0122290d87698dbf9ff4cc",
          "sha256": "464ad2217c8ad42e739abcff3888567714eb738ec1257746aadd89263e655597"
        },
        "downloads": -1,
        "filename": "parseros-5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46d756e3af0122290d87698dbf9ff4cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20149,
        "upload_time": "2021-11-01T07:40:41",
        "upload_time_iso_8601": "2021-11-01T07:40:41.554793Z",
        "url": "https://files.pythonhosted.org/packages/a7/7e/e82f42270b87f104cd5cf820f597c52505effa46cfc5dc8d0b058f586537/parseros-5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7953bf2737389340f90dc0ba3d0993a062fabd47287f72961695741051972051",
          "md5": "8afdaee96e59945f9c18751ac4861bab",
          "sha256": "112e7e33bcad009b3e5fcfbf3f507a056a8c621fc867471f890213044bd02550"
        },
        "downloads": -1,
        "filename": "parseros-5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8afdaee96e59945f9c18751ac4861bab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23097,
        "upload_time": "2021-11-01T07:40:43",
        "upload_time_iso_8601": "2021-11-01T07:40:43.258098Z",
        "url": "https://files.pythonhosted.org/packages/79/53/bf2737389340f90dc0ba3d0993a062fabd47287f72961695741051972051/parseros-5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a77ee82f42270b87f104cd5cf820f597c52505effa46cfc5dc8d0b058f586537",
        "md5": "46d756e3af0122290d87698dbf9ff4cc",
        "sha256": "464ad2217c8ad42e739abcff3888567714eb738ec1257746aadd89263e655597"
      },
      "downloads": -1,
      "filename": "parseros-5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46d756e3af0122290d87698dbf9ff4cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20149,
      "upload_time": "2021-11-01T07:40:41",
      "upload_time_iso_8601": "2021-11-01T07:40:41.554793Z",
      "url": "https://files.pythonhosted.org/packages/a7/7e/e82f42270b87f104cd5cf820f597c52505effa46cfc5dc8d0b058f586537/parseros-5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7953bf2737389340f90dc0ba3d0993a062fabd47287f72961695741051972051",
        "md5": "8afdaee96e59945f9c18751ac4861bab",
        "sha256": "112e7e33bcad009b3e5fcfbf3f507a056a8c621fc867471f890213044bd02550"
      },
      "downloads": -1,
      "filename": "parseros-5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8afdaee96e59945f9c18751ac4861bab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23097,
      "upload_time": "2021-11-01T07:40:43",
      "upload_time_iso_8601": "2021-11-01T07:40:43.258098Z",
      "url": "https://files.pythonhosted.org/packages/79/53/bf2737389340f90dc0ba3d0993a062fabd47287f72961695741051972051/parseros-5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}