{
  "info": {
    "author": "ijl <ijl@mailbox.org>, Aviram Hassan <aviramyhassan@gmail.com>, Ben Avrahami <avrahami.ben@gmail.com>",
    "author_email": "ijl <ijl@mailbox.org>, Aviram Hassan <aviramyhassan@gmail.com>, Ben Avrahami <avrahami.ben@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Rust",
      "Typing :: Typed"
    ],
    "description": "# orjson-pydantic\n\n## This is a (maintained) fork of orjson that adds serialization of pydantic objects. \norjson is a fast, correct JSON library for Python. It\n[benchmarks](https://github.com/ijl/orjson#performance) as the fastest Python\nlibrary for JSON and is more correct than the standard json library or other\nthird-party libraries. It serializes\n[dataclass](https://github.com/ijl/orjson#dataclass),\n[datetime](https://github.com/ijl/orjson#datetime),\n[numpy](https://github.com/ijl/orjson#numpy), and\n[UUID](https://github.com/ijl/orjson#uuid) instances natively.\n\nIts features and drawbacks compared to other Python JSON libraries:\n\n* serializes `dataclass` instances 40-50x as fast as other libraries\n* serializes `datetime`, `date`, and `time` instances to RFC 3339 format,\ne.g., \"1970-01-01T00:00:00+00:00\"\n* serializes `numpy.ndarray` instances 4-12x as fast with 0.3x the memory\nusage of other libraries\n* pretty prints 10x to 20x as fast as the standard library\n* serializes to `bytes` rather than `str`, i.e., is not a drop-in replacement\n* serializes `str` without escaping unicode to ASCII, e.g., \"å¥½\" rather than\n\"\\\\\\u597d\"\n* serializes `float` 10x as fast and deserializes twice as fast as other\nlibraries\n* serializes subclasses of `str`, `int`, `list`, and `dict` natively,\nrequiring `default` to specify how to serialize others\n* serializes arbitrary types using a `default` hook\n* has strict UTF-8 conformance, more correct than the standard library\n* has strict JSON conformance in not supporting Nan/Infinity/-Infinity\n* has an option for strict JSON conformance on 53-bit integers with default\nsupport for 64-bit\n* does not provide `load()` or `dump()` functions for reading from/writing to\nfile-like objects\n\norjson supports CPython 3.7, 3.8, 3.9, and 3.10. It distributes x86_64/amd64,\naarch64/armv8, and arm7 wheels for Linux, amd64 and aarch64 wheels for macOS,\nand amd64 wheels for Windows. orjson does not support PyPy. Releases\nfollow semantic versioning and serializing a new object type\nwithout an opt-in flag is considered a breaking change.\n\norjson is licensed under both the Apache 2.0 and MIT licenses. The\nrepository and issue tracker is\n[github.com/ijl/orjson](https://github.com/ijl/orjson), and patches may be\nsubmitted there. There is a\n[CHANGELOG](https://github.com/ijl/orjson/blob/master/CHANGELOG.md)\navailable in the repository.\n\n1. [Usage](https://github.com/ijl/orjson#usage)\n    1. [Install](https://github.com/ijl/orjson#install)\n    2. [Quickstart](https://github.com/ijl/orjson#quickstart)\n    3. [Migrating](https://github.com/ijl/orjson#migrating)\n    4. [Serialize](https://github.com/ijl/orjson#serialize)\n        1. [default](https://github.com/ijl/orjson#default)\n        2. [option](https://github.com/ijl/orjson#option)\n    5. [Deserialize](https://github.com/ijl/orjson#deserialize)\n2. [Types](https://github.com/ijl/orjson#types)\n    1. [dataclass](https://github.com/ijl/orjson#dataclass)\n    2. [datetime](https://github.com/ijl/orjson#datetime)\n    3. [enum](https://github.com/ijl/orjson#enum)\n    4. [float](https://github.com/ijl/orjson#float)\n    5. [int](https://github.com/ijl/orjson#int)\n    6. [numpy](https://github.com/ijl/orjson#numpy)\n    7. [str](https://github.com/ijl/orjson#str)\n    8. [uuid](https://github.com/ijl/orjson#uuid)\n    9. [pydantic](https://github.com/ijl/orjson#pydantic)\n3. [Testing](https://github.com/ijl/orjson#testing)\n4. [Performance](https://github.com/ijl/orjson#performance)\n    1. [Latency](https://github.com/ijl/orjson#latency)\n    2. [Memory](https://github.com/ijl/orjson#memory)\n    3. [Reproducing](https://github.com/ijl/orjson#reproducing)\n5. [Questions](https://github.com/ijl/orjson#questions)\n6. [Packaging](https://github.com/ijl/orjson#packaging)\n7. [License](https://github.com/ijl/orjson#license)\n\n## Usage\n\n### Install\n\nTo install a wheel from PyPI:\n\n```sh\npip install --upgrade \"pip>=20.3\" # manylinux_x_y, universal2 wheel support\npip install --upgrade orjson-pydantic\n```\n\nTo build a wheel, see [packaging](https://github.com/ijl/orjson#packaging).\n\n### Quickstart\n\nThis is an example of serializing, with options specified, and deserializing:\n\n```python\n>>> import orjson_pydantic, datetime, numpy\n>>> data = {\n    \"type\": \"job\",\n    \"created_at\": datetime.datetime(1970, 1, 1),\n    \"status\": \"ðŸ†—\",\n    \"payload\": numpy.array([[1, 2], [3, 4]]),\n}\n>>> orjson_pydantic.dumps(data, option=orjson_pydantic.OPT_NAIVE_UTC | orjson_pydantic.OPT_SERIALIZE_NUMPY)\nb'{\"type\":\"job\",\"created_at\":\"1970-01-01T00:00:00+00:00\",\"status\":\"\\xf0\\x9f\\x86\\x97\",\"payload\":[[1,2],[3,4]]}'\n>>> orjson_pydantic.loads(_)\n{'type': 'job', 'created_at': '1970-01-01T00:00:00+00:00', 'status': 'ðŸ†—', 'payload': [[1, 2], [3, 4]]}\n```\n\n### Migrating\n\norjson version 3 serializes more types than version 2. Subclasses of `str`,\n`int`, `dict`, and `list` are now serialized. This is faster and more similar\nto the standard library. It can be disabled with\n`orjson_pydantic.OPT_PASSTHROUGH_SUBCLASS`.`dataclasses.dataclass` instances\nare now serialized by default and cannot be customized in a\n`default` function unless `option=orjson_pydantic.OPT_PASSTHROUGH_DATACLASS` is\nspecified. `uuid.UUID` instances are serialized by default.\nFor any type that is now serialized,\nimplementations in a `default` function and options enabling them can be\nremoved but do not need to be. There was no change in deserialization.\n\nTo migrate from the standard library, the largest difference is that\n`orjson_pydantic.dumps` returns `bytes` and `json.dumps` returns a `str`. Users with\n`dict` objects using non-`str` keys should specify\n`option=orjson_pydantic.OPT_NON_STR_KEYS`. `sort_keys` is replaced by\n`option=orjson_pydantic.OPT_SORT_KEYS`. `indent` is replaced by\n`option=orjson_pydantic.OPT_INDENT_2` and other levels of indentation are not\nsupported.\n\n### Serialize\n\n```python\ndef dumps(\n    __obj: Any,\n    default: Optional[Callable[[Any], Any]] = ...,\n    option: Optional[int] = ...,\n) -> bytes: ...\n```\n\n`dumps()` serializes Python objects to JSON.\n\nIt natively serializes\n`str`, `dict`, `list`, `tuple`, `int`, `float`, `bool`,\n`dataclasses.dataclass`, `typing.TypedDict`, `datetime.datetime`,\n`datetime.date`, `datetime.time`, `uuid.UUID`, `numpy.ndarray`, `pydantic.BaseModel`, and\n`None` instances. It supports arbitrary types through `default`. It\nserializes subclasses of `str`, `int`, `dict`, `list`,\n`dataclasses.dataclass`, and `enum.Enum`. It does not serialize subclasses\nof `tuple` to avoid serializing `namedtuple` objects as arrays. To avoid\nserializing subclasses, specify the option `orjson_pydantic.OPT_PASSTHROUGH_SUBCLASS`.\n\nThe output is a `bytes` object containing UTF-8.\n\nThe global interpreter lock (GIL) is held for the duration of the call.\n\nIt raises `JSONEncodeError` on an unsupported type. This exception message\ndescribes the invalid object with the error message\n`Type is not JSON serializable: ...`. To fix this, specify\n[default](https://github.com/ijl/orjson#default).\n\nIt raises `JSONEncodeError` on a `str` that contains invalid UTF-8.\n\nIt raises `JSONEncodeError` on an integer that exceeds 64 bits by default or,\nwith `OPT_STRICT_INTEGER`, 53 bits.\n\nIt raises `JSONEncodeError` if a `dict` has a key of a type other than `str`,\nunless `OPT_NON_STR_KEYS` is specified.\n\nIt raises `JSONEncodeError` if the output of `default` recurses to handling by\n`default` more than 254 levels deep.\n\nIt raises `JSONEncodeError` on circular references.\n\nIt raises `JSONEncodeError`  if a `tzinfo` on a datetime object is\nunsupported.\n\n`JSONEncodeError` is a subclass of `TypeError`. This is for compatibility\nwith the standard library.\n\n#### default\n\nTo serialize a subclass or arbitrary types, specify `default` as a\ncallable that returns a supported type. `default` may be a function,\nlambda, or callable class instance. To specify that a type was not\nhandled by `default`, raise an exception such as `TypeError`.\n\n```python\n>>> import orjson_pydantic, decimal\n>>>\ndef default(obj):\n    if isinstance(obj, decimal.Decimal):\n        return str(obj)\n    raise TypeError\n\n>>> orjson_pydantic.dumps(decimal.Decimal(\"0.0842389659712649442845\"))\nJSONEncodeError: Type is not JSON serializable: decimal.Decimal\n>>> orjson_pydantic.dumps(decimal.Decimal(\"0.0842389659712649442845\"), default=default)\nb'\"0.0842389659712649442845\"'\n>>> orjson_pydantic.dumps({1, 2}, default=default)\norjson_pydantic.JSONEncodeError: Type is not JSON serializable: set\n```\n\nThe `default` callable may return an object that itself\nmust be handled by `default` up to 254 times before an exception\nis raised.\n\nIt is important that `default` raise an exception if a type cannot be handled.\nPython otherwise implicitly returns `None`, which appears to the caller\nlike a legitimate value and is serialized:\n\n```python\n>>> import orjson_pydantic, json, rapidjson\n>>>\ndef default(obj):\n    if isinstance(obj, decimal.Decimal):\n        return str(obj)\n\n>>> orjson_pydantic.dumps({\"set\":{1, 2}}, default=default)\nb'{\"set\":null}'\n>>> json.dumps({\"set\":{1, 2}}, default=default)\n'{\"set\":null}'\n>>> rapidjson.dumps({\"set\":{1, 2}}, default=default)\n'{\"set\":null}'\n```\n\n#### option\n\nTo modify how data is serialized, specify `option`. Each `option` is an integer\nconstant in `orjson`. To specify multiple options, mask them together, e.g.,\n`option=orjson_pydantic.OPT_STRICT_INTEGER | orjson_pydantic.OPT_NAIVE_UTC`.\n\n##### OPT_APPEND_NEWLINE\n\nAppend `\\n` to the output. This is a convenience and optimization for the\npattern of `dumps(...) + \"\\n\"`. `bytes` objects are immutable and this\npattern copies the original contents.\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.dumps([])\nb\"[]\"\n>>> orjson_pydantic.dumps([], option=orjson_pydantic.OPT_APPEND_NEWLINE)\nb\"[]\\n\"\n```\n\n##### OPT_INDENT_2\n\nPretty-print output with an indent of two spaces. This is equivalent to\n`indent=2` in the standard library. Pretty printing is slower and the output\nlarger. orjson is the fastest compared library at pretty printing and has\nmuch less of a slowdown to pretty print than the standard library does. This\noption is compatible with all other options.\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.dumps({\"a\": \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]})\nb'{\"a\":\"b\",\"c\":{\"d\":true},\"e\":[1,2]}'\n>>> orjson_pydantic.dumps(\n    {\"a\": \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]},\n    option=orjson_pydantic.OPT_INDENT_2\n)\nb'{\\n  \"a\": \"b\",\\n  \"c\": {\\n    \"d\": true\\n  },\\n  \"e\": [\\n    1,\\n    2\\n  ]\\n}'\n```\n\nIf displayed, the indentation and linebreaks appear like this:\n\n```json\n{\n  \"a\": \"b\",\n  \"c\": {\n    \"d\": true\n  },\n  \"e\": [\n    1,\n    2\n  ]\n}\n```\n\nThis measures serializing the github.json fixture as compact (52KiB) or\npretty (64KiB):\n\n| Library    |   compact (ms) | pretty (ms)   | vs. orjson   |\n|------------|----------------|---------------|--------------|\n| orjson     |           0.06 | 0.07          | 1.0          |\n| ujson      |           0.18 | 0.19          | 2.8          |\n| rapidjson  |           0.22 |               |              |\n| simplejson |           0.35 | 1.49          | 21.4         |\n| json       |           0.36 | 1.19          | 17.2         |\n\nThis measures serializing the citm_catalog.json fixture, more of a worst\ncase due to the amount of nesting and newlines, as compact (489KiB) or\npretty (1.1MiB):\n\n| Library    |   compact (ms) | pretty (ms)   | vs. orjson   |\n|------------|----------------|---------------|--------------|\n| orjson     |           0.88 | 1.73          | 1.0          |\n| ujson      |           3.73 | 4.52          | 2.6          |\n| rapidjson  |           3.54 |               |              |\n| simplejson |          11.77 | 72.06         | 41.6         |\n| json       |           6.71 | 55.22         | 31.9         |\n\nrapidjson is blank because it does not support pretty printing. This can be\nreproduced using the `pyindent` script.\n\n##### OPT_NAIVE_UTC\n\nSerialize `datetime.datetime` objects without a `tzinfo` as UTC. This\nhas no effect on `datetime.datetime` objects that have `tzinfo` set.\n\n```python\n>>> import orjson_pydantic, datetime\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0),\n    )\nb'\"1970-01-01T00:00:00\"'\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0),\n        option=orjson_pydantic.OPT_NAIVE_UTC,\n    )\nb'\"1970-01-01T00:00:00+00:00\"'\n```\n\n##### OPT_NON_STR_KEYS\n\nSerialize `dict` keys of type other than `str`. This allows `dict` keys\nto be one of `str`, `int`, `float`, `bool`, `None`, `datetime.datetime`,\n`datetime.date`, `datetime.time`, `enum.Enum`, and `uuid.UUID`. For comparison,\nthe standard library serializes `str`, `int`, `float`, `bool` or `None` by\ndefault. orjson benchmarks as being faster at serializing non-`str` keys\nthan other libraries. This option is slower for `str` keys than the default.\n\n```python\n>>> import orjson_pydantic, datetime, uuid\n>>> orjson_pydantic.dumps(\n        {uuid.UUID(\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\"): [1, 2, 3]},\n        option=orjson_pydantic.OPT_NON_STR_KEYS,\n    )\nb'{\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\":[1,2,3]}'\n>>> orjson_pydantic.dumps(\n        {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},\n        option=orjson_pydantic.OPT_NON_STR_KEYS | orjson_pydantic.OPT_NAIVE_UTC,\n    )\nb'{\"1970-01-01T00:00:00+00:00\":[1,2,3]}'\n```\n\nThese types are generally serialized how they would be as\nvalues, e.g., `datetime.datetime` is still an RFC 3339 string and respects\noptions affecting it. The exception is that `int` serialization does not\nrespect `OPT_STRICT_INTEGER`.\n\nThis option has the risk of creating duplicate keys. This is because non-`str`\nobjects may serialize to the same `str` as an existing key, e.g.,\n`{\"1\": true, 1: false}`. The last key to be inserted to the `dict` will be\nserialized last and a JSON deserializer will presumably take the last\noccurrence of a key (in the above, `false`). The first value will be lost.\n\nThis option is compatible with `orjson_pydantic.OPT_SORT_KEYS`. If sorting is used,\nnote the sort is unstable and will be unpredictable for duplicate keys.\n\n```python\n>>> import orjson_pydantic, datetime\n>>> orjson_pydantic.dumps(\n    {\"other\": 1, datetime.date(1970, 1, 5): 2, datetime.date(1970, 1, 3): 3},\n    option=orjson_pydantic.OPT_NON_STR_KEYS | orjson_pydantic.OPT_SORT_KEYS\n)\nb'{\"1970-01-03\":3,\"1970-01-05\":2,\"other\":1}'\n```\n\nThis measures serializing 589KiB of JSON comprising a `list` of 100 `dict`\nin which each `dict` has both 365 randomly-sorted `int` keys representing epoch\ntimestamps as well as one `str` key and the value for each key is a\nsingle integer. In \"str keys\", the keys were converted to `str` before\nserialization, and orjson still specifes `option=orjson_pydantic.OPT_NON_STR_KEYS`\n(which is always somewhat slower).\n\n| Library    |   str keys (ms) | int keys (ms)   | int keys sorted (ms)   |\n|------------|-----------------|-----------------|------------------------|\n| orjson     |            1.53 | 2.16            | 4.29                   |\n| ujson      |            3.07 | 5.65            |                        |\n| rapidjson  |            4.29 |                 |                        |\n| simplejson |           11.24 | 14.50           | 21.86                  |\n| json       |            7.17 | 8.49            |                        |\n\nujson is blank for sorting because it segfaults. json is blank because it\nraises `TypeError` on attempting to sort before converting all keys to `str`.\nrapidjson is blank because it does not support non-`str` keys. This can\nbe reproduced using the `pynonstr` script.\n\n##### OPT_OMIT_MICROSECONDS\n\nDo not serialize the `microsecond` field on `datetime.datetime` and\n`datetime.time` instances.\n\n```python\n>>> import orjson_pydantic, datetime\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n    )\nb'\"1970-01-01T00:00:00.000001\"'\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n        option=orjson_pydantic.OPT_OMIT_MICROSECONDS,\n    )\nb'\"1970-01-01T00:00:00\"'\n```\n\n##### OPT_PASSTHROUGH_DATACLASS\n\nPassthrough `dataclasses.dataclass` instances to `default`. This allows\ncustomizing their output but is much slower.\n\n\n```python\n>>> import orjson_pydantic, dataclasses\n>>>\n@dataclasses.dataclass\nclass User:\n    id: str\n    name: str\n    password: str\n\ndef default(obj):\n    if isinstance(obj, User):\n        return {\"id\": obj.id, \"name\": obj.name}\n    raise TypeError\n\n>>> orjson_pydantic.dumps(User(\"3b1\", \"asd\", \"zxc\"))\nb'{\"id\":\"3b1\",\"name\":\"asd\",\"password\":\"zxc\"}'\n>>> orjson_pydantic.dumps(User(\"3b1\", \"asd\", \"zxc\"), option=orjson_pydantic.OPT_PASSTHROUGH_DATACLASS)\nTypeError: Type is not JSON serializable: User\n>>> orjson_pydantic.dumps(\n        User(\"3b1\", \"asd\", \"zxc\"),\n        option=orjson_pydantic.OPT_PASSTHROUGH_DATACLASS,\n        default=default,\n    )\nb'{\"id\":\"3b1\",\"name\":\"asd\"}'\n```\n\n##### OPT_PASSTHROUGH_DATETIME\n\nPassthrough `datetime.datetime`, `datetime.date`, and `datetime.time` instances\nto `default`. This allows serializing datetimes to a custom format, e.g.,\nHTTP dates:\n\n```python\n>>> import orjson_pydantic, datetime\n>>>\ndef default(obj):\n    if isinstance(obj, datetime.datetime):\n        return obj.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n    raise TypeError\n\n>>> orjson_pydantic.dumps({\"created_at\": datetime.datetime(1970, 1, 1)})\nb'{\"created_at\":\"1970-01-01T00:00:00\"}'\n>>> orjson_pydantic.dumps({\"created_at\": datetime.datetime(1970, 1, 1)}, option=orjson_pydantic.OPT_PASSTHROUGH_DATETIME)\nTypeError: Type is not JSON serializable: datetime.datetime\n>>> orjson_pydantic.dumps(\n        {\"created_at\": datetime.datetime(1970, 1, 1)},\n        option=orjson_pydantic.OPT_PASSTHROUGH_DATETIME,\n        default=default,\n    )\nb'{\"created_at\":\"Thu, 01 Jan 1970 00:00:00 GMT\"}'\n```\n\nThis does not affect datetimes in `dict` keys if using OPT_NON_STR_KEYS.\n\n##### OPT_PASSTHROUGH_SUBCLASS\n\nPassthrough subclasses of builtin types to `default`.\n\n```python\n>>> import orjson_pydantic\n>>>\nclass Secret(str):\n    pass\n\ndef default(obj):\n    if isinstance(obj, Secret):\n        return \"******\"\n    raise TypeError\n\n>>> orjson_pydantic.dumps(Secret(\"zxc\"))\nb'\"zxc\"'\n>>> orjson_pydantic.dumps(Secret(\"zxc\"), option=orjson_pydantic.OPT_PASSTHROUGH_SUBCLASS)\nTypeError: Type is not JSON serializable: Secret\n>>> orjson_pydantic.dumps(Secret(\"zxc\"), option=orjson_pydantic.OPT_PASSTHROUGH_SUBCLASS, default=default)\nb'\"******\"'\n```\n\nThis does not affect serializing subclasses as `dict` keys if using\nOPT_NON_STR_KEYS.\n\n##### OPT_SERIALIZE_DATACLASS\n\nThis is deprecated and has no effect in version 3. In version 2 this was\nrequired to serialize  `dataclasses.dataclass` instances. For more, see\n[dataclass](https://github.com/ijl/orjson#dataclass).\n\n##### OPT_SERIALIZE_NUMPY\n\nSerialize `numpy.ndarray` instances. For more, see\n[numpy](https://github.com/ijl/orjson#numpy).\n\n##### OPT_SERIALIZE_UUID\n\nThis is deprecated and has no effect in version 3. In version 2 this was\nrequired to serialize `uuid.UUID` instances. For more, see\n[UUID](https://github.com/ijl/orjson#UUID).\n\n##### OPT_SORT_KEYS\n\nSerialize `dict` keys in sorted order. The default is to serialize in an\nunspecified order. This is equivalent to `sort_keys=True` in the standard\nlibrary.\n\nThis can be used to ensure the order is deterministic for hashing or tests.\nIt has a substantial performance penalty and is not recommended in general.\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.dumps({\"b\": 1, \"c\": 2, \"a\": 3})\nb'{\"b\":1,\"c\":2,\"a\":3}'\n>>> orjson_pydantic.dumps({\"b\": 1, \"c\": 2, \"a\": 3}, option=orjson_pydantic.OPT_SORT_KEYS)\nb'{\"a\":3,\"b\":1,\"c\":2}'\n```\n\nThis measures serializing the twitter.json fixture unsorted and sorted:\n\n| Library    |   unsorted (ms) |   sorted (ms) |   vs. orjson |\n|------------|-----------------|---------------|--------------|\n| orjson     |            0.5  |          0.92 |          1   |\n| ujson      |            1.61 |          2.48 |          2.7 |\n| rapidjson  |            2.17 |          2.89 |          3.2 |\n| simplejson |            3.56 |          5.13 |          5.6 |\n| json       |            3.59 |          4.59 |          5   |\n\nThe benchmark can be reproduced using the `pysort` script.\n\nThe sorting is not collation/locale-aware:\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.dumps({\"a\": 1, \"Ã¤\": 2, \"A\": 3}, option=orjson_pydantic.OPT_SORT_KEYS)\nb'{\"A\":3,\"a\":1,\"\\xc3\\xa4\":2}'\n```\n\nThis is the same sorting behavior as the standard library, rapidjson,\nsimplejson, and ujson.\n\n`dataclass` also serialize as maps but this has no effect on them.\n\n##### OPT_STRICT_INTEGER\n\nEnforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as\nthe Python standard library. For more, see [int](https://github.com/ijl/orjson#int).\n\n##### OPT_UTC_Z\n\nSerialize a UTC timezone on `datetime.datetime` instances as `Z` instead\nof `+00:00`.\n\n```python\n>>> import orjson_pydantic, datetime, zoneinfo\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),\n    )\nb'\"1970-01-01T00:00:00+00:00\"'\n>>> orjson_pydantic.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),\n        option=orjson_pydantic.OPT_UTC_Z\n    )\nb'\"1970-01-01T00:00:00Z\"'\n```\n##### OPT_SERIALIZE_PYDANTIC\nSerialize a `pydantic.BaseModel` instance. For more see\n[pydantic](https://github.com/ijl/orjson#pydantic).\n### Deserialize\n\n```python\ndef loads(__obj: Union[bytes, bytearray, memoryview, str]) -> Any: ...\n```\n\n`loads()` deserializes JSON to Python objects. It deserializes to `dict`,\n`list`, `int`, `float`, `str`, `bool`, and `None` objects.\n\n`bytes`, `bytearray`, `memoryview`, and `str` input are accepted. If the input\nexists as a `memoryview`, `bytearray`, or `bytes` object, it is recommended to\npass these directly rather than creating an unnecessary `str` object. This has\nlower memory usage and lower latency.\n\nThe input must be valid UTF-8.\n\norjson maintains a cache of map keys for the duration of the process. This\ncauses a net reduction in memory usage by avoiding duplicate strings. The\nkeys must be at most 64 bytes to be cached and 512 entries are stored.\n\nThe global interpreter lock (GIL) is held for the duration of the call.\n\nIt raises `JSONDecodeError` if given an invalid type or invalid\nJSON. This includes if the input contains `NaN`, `Infinity`, or `-Infinity`,\nwhich the standard library allows, but is not valid JSON.\n\n`JSONDecodeError` is a subclass of `json.JSONDecodeError` and `ValueError`.\nThis is for compatibility with the standard library.\n\n## Types\n\n### dataclass\n\norjson serializes instances of `dataclasses.dataclass` natively. It serializes\ninstances 40-50x as fast as other libraries and avoids a severe slowdown seen\nin other libraries compared to serializing `dict`.\n\nIt is supported to pass all variants of dataclasses, including dataclasses\nusing `__slots__`, frozen dataclasses, those with optional or default\nattributes, and subclasses. There is a performance benefit to not\nusing `__slots__`.\n\n| Library    | dict (ms)   | dataclass (ms)   | vs. orjson   |\n|------------|-------------|------------------|--------------|\n| orjson     | 1.40        | 1.60             | 1            |\n| ujson      |             |                  |              |\n| rapidjson  | 3.64        | 68.48            | 42           |\n| simplejson | 14.21       | 92.18            | 57           |\n| json       | 13.28       | 94.90            | 59           |\n\nThis measures serializing 555KiB of JSON, orjson natively and other libraries\nusing `default` to serialize the output of `dataclasses.asdict()`. This can be\nreproduced using the `pydataclass` script.\n\nDataclasses are serialized as maps, with every attribute serialized and in\nthe order given on class definition:\n\n```python\n>>> import dataclasses, orjson, typing\n\n@dataclasses.dataclass\nclass Member:\n    id: int\n    active: bool = dataclasses.field(default=False)\n\n@dataclasses.dataclass\nclass Object:\n    id: int\n    name: str\n    members: typing.List[Member]\n\n>>> orjson_pydantic.dumps(Object(1, \"a\", [Member(1, True), Member(2)]))\nb'{\"id\":1,\"name\":\"a\",\"members\":[{\"id\":1,\"active\":true},{\"id\":2,\"active\":false}]}'\n```\nUsers may wish to control how dataclass instances are serialized, e.g.,\nto not serialize an attribute or to change the name of an\nattribute when serialized. orjson may implement support using the\nmetadata mapping on `field` attributes,\ne.g., `field(metadata={\"json_serialize\": False})`, if use cases are clear.\n\n### datetime\n\norjson serializes `datetime.datetime` objects to\n[RFC 3339](https://tools.ietf.org/html/rfc3339) format,\ne.g., \"1970-01-01T00:00:00+00:00\". This is a subset of ISO 8601 and is\ncompatible with `isoformat()` in the standard library.\n\n```python\n>>> import orjson_pydantic, datetime, zoneinfo\n>>> orjson_pydantic.dumps(\n    datetime.datetime(2018, 12, 1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo(\"Australia/Adelaide\"))\n)\nb'\"2018-12-01T02:03:04.000009+10:30\"'\n>>> orjson_pydantic.dumps(\n    datetime.datetime(2100, 9, 1, 21, 55, 2).replace(tzinfo=zoneinfo.ZoneInfo(\"UTC\"))\n)\nb'\"2100-09-01T21:55:02+00:00\"'\n>>> orjson_pydantic.dumps(\n    datetime.datetime(2100, 9, 1, 21, 55, 2)\n)\nb'\"2100-09-01T21:55:02\"'\n```\n\n`datetime.datetime` supports instances with a `tzinfo` that is `None`,\n`datetime.timezone.utc`, a timezone instance from the python3.9+ `zoneinfo`\nmodule, or a timezone instance from the third-party `pendulum`, `pytz`, or\n`dateutil`/`arrow` libraries.\n\nIt is fastest to use the standard library's `zoneinfo.ZoneInfo` for timezones.\n\n`datetime.time` objects must not have a `tzinfo`.\n\n```python\n>>> import orjson_pydantic, datetime\n>>> orjson_pydantic.dumps(datetime.time(12, 0, 15, 290))\nb'\"12:00:15.000290\"'\n```\n\n`datetime.date` objects will always serialize.\n\n```python\n>>> import orjson_pydantic, datetime\n>>> orjson_pydantic.dumps(datetime.date(1900, 1, 2))\nb'\"1900-01-02\"'\n```\n\nErrors with `tzinfo` result in `JSONEncodeError` being raised.\n\nIt is faster to have orjson serialize datetime objects than to do so\nbefore calling `dumps()`. If using an unsupported type such as\n`pendulum.datetime`, use `default`.\n\nTo disable serialization of `datetime` objects specify the option\n`orjson_pydantic.OPT_PASSTHROUGH_DATETIME`.\n\nTo use \"Z\" suffix instead of \"+00:00\" to indicate UTC (\"Zulu\") time, use the option\n`orjson_pydantic.OPT_UTC_Z`.\n\nTo assume datetimes without timezone are UTC, se the option `orjson_pydantic.OPT_NAIVE_UTC`.\n\n### enum\n\norjson serializes enums natively. Options apply to their values.\n\n```python\n>>> import enum, datetime, orjson\n>>>\nclass DatetimeEnum(enum.Enum):\n    EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)\n>>> orjson_pydantic.dumps(DatetimeEnum.EPOCH)\nb'\"1970-01-01T00:00:00\"'\n>>> orjson_pydantic.dumps(DatetimeEnum.EPOCH, option=orjson_pydantic.OPT_NAIVE_UTC)\nb'\"1970-01-01T00:00:00+00:00\"'\n```\n\nEnums with members that are not supported types can be serialized using\n`default`:\n\n```python\n>>> import enum, orjson\n>>>\nclass Custom:\n    def __init__(self, val):\n        self.val = val\n\ndef default(obj):\n    if isinstance(obj, Custom):\n        return obj.val\n    raise TypeError\n\nclass CustomEnum(enum.Enum):\n    ONE = Custom(1)\n\n>>> orjson_pydantic.dumps(CustomEnum.ONE, default=default)\nb'1'\n```\n\n### float\n\norjson serializes and deserializes double precision floats with no loss of\nprecision and consistent rounding. The same behavior is observed in rapidjson,\nsimplejson, and json. ujson 1.35 was inaccurate in both serialization and\ndeserialization, i.e., it modifies the data, and the recent 2.0 release is\naccurate.\n\n`orjson_pydantic.dumps()` serializes Nan, Infinity, and -Infinity, which are not\ncompliant JSON, as `null`:\n\n```python\n>>> import orjson_pydantic, ujson, rapidjson, json\n>>> orjson_pydantic.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\nb'[null,null,null]'\n>>> ujson.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\nOverflowError: Invalid Inf value when encoding double\n>>> rapidjson.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\n'[NaN,Infinity,-Infinity]'\n>>> json.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\n'[NaN, Infinity, -Infinity]'\n```\n\n### int\n\norjson serializes and deserializes 64-bit integers by default. The range\nsupported is a signed 64-bit integer's minimum (-9223372036854775807) to\nan unsigned 64-bit integer's maximum (18446744073709551615). This\nis widely compatible, but there are implementations\nthat only support 53-bits for integers, e.g.,\nweb browsers. For those implementations, `dumps()` can be configured to\nraise a `JSONEncodeError` on values exceeding the 53-bit range.\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.dumps(9007199254740992)\nb'9007199254740992'\n>>> orjson_pydantic.dumps(9007199254740992, option=orjson_pydantic.OPT_STRICT_INTEGER)\nJSONEncodeError: Integer exceeds 53-bit range\n>>> orjson_pydantic.dumps(-9007199254740992, option=orjson_pydantic.OPT_STRICT_INTEGER)\nJSONEncodeError: Integer exceeds 53-bit range\n```\n\n### numpy\n\norjson natively serializes `numpy.ndarray` and individual `numpy.float64`,\n`numpy.float32`, `numpy.int64`, `numpy.int32`, `numpy.int8`, `numpy.uint64`,\n`numpy.uint32`, `numpy.uint8`, `numpy.uintp`, or `numpy.intp`, and\n`numpy.datetime64` instances.\n\norjson is faster than all compared libraries at serializing\nnumpy instances. Serializing numpy data requires specifying\n`option=orjson_pydantic.OPT_SERIALIZE_NUMPY`.\n\n```python\n>>> import orjson_pydantic, numpy\n>>> orjson_pydantic.dumps(\n        numpy.array([[1, 2, 3], [4, 5, 6]]),\n        option=orjson_pydantic.OPT_SERIALIZE_NUMPY,\n)\nb'[[1,2,3],[4,5,6]]'\n```\n\nThe array must be a contiguous C array (`C_CONTIGUOUS`) and one of the\nsupported datatypes.\n\n`numpy.datetime64` instances are serialized as RFC 3339 strings and\ndatetime options affect them.\n\n```python\n>>> import orjson_pydantic, numpy\n>>> orjson_pydantic.dumps(\n        numpy.datetime64(\"2021-01-01T00:00:00.172\"),\n        option=orjson_pydantic.OPT_SERIALIZE_NUMPY,\n)\nb'\"2021-01-01T00:00:00.172000\"'\n>>> orjson_pydantic.dumps(\n        numpy.datetime64(\"2021-01-01T00:00:00.172\"),\n        option=(\n            orjson_pydantic.OPT_SERIALIZE_NUMPY |\n            orjson_pydantic.OPT_NAIVE_UTC |\n            orjson_pydantic.OPT_OMIT_MICROSECONDS\n        ),\n)\nb'\"2021-01-01T00:00:00+00:00\"'\n```\n\nIf an array is not a contiguous C array, contains an supported datatype,\nor contains a `numpy.datetime64` using an unsupported representation\n(e.g., picoseconds), orjson falls through to `default`. In `default`,\n`obj.tolist()` can be specified. If an array is malformed, which\nis not expected, `orjson_pydantic.JSONEncodeError` is raised.\n\nThis measures serializing 92MiB of JSON from an `numpy.ndarray` with\ndimensions of `(50000, 100)` and `numpy.float64` values:\n\n| Library    | Latency (ms)   | RSS diff (MiB)   | vs. orjson   |\n|------------|----------------|------------------|--------------|\n| orjson     | 194            | 99               | 1.0          |\n| ujson      |                |                  |              |\n| rapidjson  | 3,048          | 309              | 15.7         |\n| simplejson | 3,023          | 297              | 15.6         |\n| json       | 3,133          | 297              | 16.1         |\n\nThis measures serializing 100MiB of JSON from an `numpy.ndarray` with\ndimensions of `(100000, 100)` and `numpy.int32` values:\n\n| Library    | Latency (ms)   | RSS diff (MiB)   | vs. orjson   |\n|------------|----------------|------------------|--------------|\n| orjson     | 178            | 115              | 1.0          |\n| ujson      |                |                  |              |\n| rapidjson  | 1,512          | 551              | 8.5          |\n| simplejson | 1,606          | 504              | 9.0          |\n| json       | 1,506          | 503              | 8.4          |\n\nThis measures serializing 105MiB of JSON from an `numpy.ndarray` with\ndimensions of `(100000, 200)` and `numpy.bool` values:\n\n| Library    | Latency (ms)   | RSS diff (MiB)   | vs. orjson   |\n|------------|----------------|------------------|--------------|\n| orjson     | 157            | 120              | 1.0          |\n| ujson      |                |                  |              |\n| rapidjson  | 710            | 327              | 4.5          |\n| simplejson | 931            | 398              | 5.9          |\n| json       | 996            | 400              | 6.3          |\n\nIn these benchmarks, orjson serializes natively, ujson is blank because it\ndoes not support a `default` parameter, and the other libraries serialize\n`ndarray.tolist()` via `default`. The RSS column measures peak memory\nusage during serialization. This can be reproduced using the `pynumpy` script.\n\norjson does not have an installation or compilation dependency on numpy. The\nimplementation is independent, reading `numpy.ndarray` using\n`PyArrayInterface`.\n\n### str\n\norjson is strict about UTF-8 conformance. This is stricter than the standard\nlibrary's json module, which will serialize and deserialize UTF-16 surrogates,\ne.g., \"\\ud800\", that are invalid UTF-8.\n\nIf `orjson_pydantic.dumps()` is given a `str` that does not contain valid UTF-8,\n`orjson_pydantic.JSONEncodeError` is raised. If `loads()` receives invalid UTF-8,\n`orjson_pydantic.JSONDecodeError` is raised.\n\norjson and rapidjson are the only compared JSON libraries to consistently\nerror on bad input.\n\n```python\n>>> import orjson_pydantic, ujson, rapidjson, json\n>>> orjson_pydantic.dumps('\\ud800')\nJSONEncodeError: str is not valid UTF-8: surrogates not allowed\n>>> ujson.dumps('\\ud800')\nUnicodeEncodeError: 'utf-8' codec ...\n>>> rapidjson.dumps('\\ud800')\nUnicodeEncodeError: 'utf-8' codec ...\n>>> json.dumps('\\ud800')\n'\"\\\\ud800\"'\n>>> orjson_pydantic.loads('\"\\\\ud800\"')\nJSONDecodeError: unexpected end of hex escape at line 1 column 8: line 1 column 1 (char 0)\n>>> ujson.loads('\"\\\\ud800\"')\n''\n>>> rapidjson.loads('\"\\\\ud800\"')\nValueError: Parse error at offset 1: The surrogate pair in string is invalid.\n>>> json.loads('\"\\\\ud800\"')\n'\\ud800'\n```\n\nTo make a best effort at deserializing bad input, first decode `bytes` using\nthe `replace` or `lossy` argument for `errors`:\n\n```python\n>>> import orjson_pydantic\n>>> orjson_pydantic.loads(b'\"\\xed\\xa0\\x80\"')\nJSONDecodeError: str is not valid UTF-8: surrogates not allowed\n>>> orjson_pydantic.loads(b'\"\\xed\\xa0\\x80\"'.decode(\"utf-8\", \"replace\"))\n'ï¿½ï¿½ï¿½'\n```\n\n### uuid\n\norjson serializes `uuid.UUID` instances to\n[RFC 4122](https://tools.ietf.org/html/rfc4122) format, e.g.,\n\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\".\n\n``` python\n>>> import orjson_pydantic, uuid\n>>> orjson_pydantic.dumps(uuid.UUID('f81d4fae-7dec-11d0-a765-00a0c91e6bf6'))\nb'\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"'\n>>> orjson_pydantic.dumps(uuid.uuid5(uuid.NAMESPACE_DNS, \"python.org\"))\nb'\"886313e1-3b8a-5372-9b90-0c9aee199e5d\"'\n```\n\n### pydantic\n\norjson serializes `pydantic.BaseModel` instances based on the existence of `__fields__` attribute.\n> :warning: **The serialization doesn't behave like `pydantic.BaseModel.json()`**:\n1. It doesn't respect any of the Config attributes.\n2. It doesn't have any of the additional features of Pydantic (json_encoder, exclusions, inclusions, etc).\n## Testing\n\nThe library has comprehensive tests. There are tests against fixtures in the\n[JSONTestSuite](https://github.com/nst/JSONTestSuite) and\n[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)\nrepositories. It is tested to not crash against the\n[Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings).\nIt is tested to not leak memory. It is tested to not crash\nagainst and not accept invalid UTF-8. There are integration tests\nexercising the library's use in web servers (gunicorn using multiprocess/forked\nworkers) and when\nmultithreaded. It also uses some tests from the ultrajson library.\n\norjson is the most correct of the compared libraries. This graph shows how each\nlibrary handles a combined 342 JSON fixtures from the\n[JSONTestSuite](https://github.com/nst/JSONTestSuite) and\n[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark) tests:\n\n| Library    |   Invalid JSON documents not rejected |   Valid JSON documents not deserialized |\n|------------|---------------------------------------|-----------------------------------------|\n| orjson     |                                     0 |                                       0 |\n| ujson      |                                    38 |                                       0 |\n| rapidjson  |                                     6 |                                       0 |\n| simplejson |                                    13 |                                       0 |\n| json       |                                    17 |                                       0 |\n\nThis shows that all libraries deserialize valid JSON but only orjson\ncorrectly rejects the given invalid JSON fixtures. Errors are largely due to\naccepting invalid strings and numbers.\n\nThe graph above can be reproduced using the `pycorrectness` script.\n\n## Performance\n\nSerialization and deserialization performance of orjson is better than\nultrajson, rapidjson, simplejson, or json. The benchmarks are done on\nfixtures of real data:\n\n* twitter.json, 631.5KiB, results of a search on Twitter for \"ä¸€\", containing\nCJK strings, dictionaries of strings and arrays of dictionaries, indented.\n\n* github.json, 55.8KiB, a GitHub activity feed, containing dictionaries of\nstrings and arrays of dictionaries, not indented.\n\n* citm_catalog.json, 1.7MiB, concert data, containing nested dictionaries of\nstrings and arrays of integers, indented.\n\n* canada.json, 2.2MiB, coordinates of the Canadian border in GeoJSON\nformat, containing floats and arrays, indented.\n\n### Latency\n\n![alt text](doc/twitter_serialization.png \"twitter.json serialization\")\n![alt text](doc/twitter_deserialization.png \"twitter.json deserialization\")\n![alt text](doc/github_serialization.png \"github.json serialization\")\n![alt text](doc/github_deserialization.png \"github.json deserialization\")\n![alt text](doc/citm_catalog_serialization.png \"citm_catalog.json serialization\")\n![alt text](doc/citm_catalog_deserialization.png \"citm_catalog.json deserialization\")\n![alt text](doc/canada_serialization.png \"canada.json serialization\")\n![alt text](doc/canada_deserialization.png \"canada.json deserialization\")\n\n#### twitter.json serialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            0.59 |                  1698.8 |                 1    |\n| ujson      |                            2.14 |                   464.3 |                 3.64 |\n| rapidjson  |                            2.39 |                   418.5 |                 4.06 |\n| simplejson |                            3.15 |                   316.9 |                 5.36 |\n| json       |                            3.56 |                   281.2 |                 6.06 |\n\n#### twitter.json deserialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            2.28 |                   439.3 |                 1    |\n| ujson      |                            2.89 |                   345.9 |                 1.27 |\n| rapidjson  |                            3.85 |                   259.6 |                 1.69 |\n| simplejson |                            3.66 |                   272.1 |                 1.61 |\n| json       |                            4.05 |                   246.7 |                 1.78 |\n\n#### github.json serialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            0.07 |                 15265.2 |                 1    |\n| ujson      |                            0.22 |                  4556.7 |                 3.35 |\n| rapidjson  |                            0.26 |                  3808.9 |                 4.02 |\n| simplejson |                            0.37 |                  2690.4 |                 5.68 |\n| json       |                            0.35 |                  2847.8 |                 5.36 |\n\n#### github.json deserialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            0.18 |                  5610.1 |                 1    |\n| ujson      |                            0.28 |                  3540.7 |                 1.58 |\n| rapidjson  |                            0.33 |                  3031.5 |                 1.85 |\n| simplejson |                            0.29 |                  3385.6 |                 1.65 |\n| json       |                            0.29 |                  3402.1 |                 1.65 |\n\n#### citm_catalog.json serialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            0.99 |                  1008.5 |                 1    |\n| ujson      |                            3.69 |                   270.7 |                 3.72 |\n| rapidjson  |                            3.55 |                   281.4 |                 3.58 |\n| simplejson |                           11.76 |                    85.1 |                11.85 |\n| json       |                            6.89 |                   145.1 |                 6.95 |\n\n#### citm_catalog.json deserialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            4.53 |                   220.5 |                 1    |\n| ujson      |                            5.67 |                   176.5 |                 1.25 |\n| rapidjson  |                            7.51 |                   133.3 |                 1.66 |\n| simplejson |                            7.54 |                   132.7 |                 1.66 |\n| json       |                            7.8  |                   128.2 |                 1.72 |\n\n#### canada.json serialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                            4.72 |                   198.9 |                 1    |\n| ujson      |                           17.76 |                    56.3 |                 3.77 |\n| rapidjson  |                           61.83 |                    16.2 |                13.11 |\n| simplejson |                           80.6  |                    12.4 |                17.09 |\n| json       |                           52.38 |                    18.8 |                11.11 |\n\n#### canada.json deserialization\n\n| Library    |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|------------|---------------------------------|-------------------------|----------------------|\n| orjson     |                           10.28 |                    97.4 |                 1    |\n| ujson      |                           16.49 |                    60.5 |                 1.6  |\n| rapidjson  |                           37.92 |                    26.4 |                 3.69 |\n| simplejson |                           37.7  |                    26.5 |                 3.67 |\n| json       |                           37.87 |                    27.6 |                 3.68 |\n\n### Memory\n\norjson's memory usage when deserializing is similar to or lower than\nthe standard library and other third-party libraries.\n\nThis measures, in the first column, RSS after importing a library and reading\nthe fixture, and in the second column, increases in RSS after repeatedly\ncalling `loads()` on the fixture.\n\n#### twitter.json\n\n| Library    |   import, read() RSS (MiB) |   loads() increase in RSS (MiB) |\n|------------|----------------------------|---------------------------------|\n| orjson     |                       13.5 |                             2.5 |\n| ujson      |                       14   |                             4.1 |\n| rapidjson  |                       14.7 |                             6.5 |\n| simplejson |                       13.2 |                             2.5 |\n| json       |                       12.9 |                             2.3 |\n\n#### github.json\n\n| Library    |   import, read() RSS (MiB) |   loads() increase in RSS (MiB) |\n|------------|----------------------------|---------------------------------|\n| orjson     |                       13.1 |                             0.3 |\n| ujson      |                       13.5 |                             0.3 |\n| rapidjson  |                       14   |                             0.7 |\n| simplejson |                       12.6 |                             0.3 |\n| json       |                       12.3 |                             0.1 |\n\n#### citm_catalog.json\n\n| Library    |   import, read() RSS (MiB) |   loads() increase in RSS (MiB) |\n|------------|----------------------------|---------------------------------|\n| orjson     |                       14.6 |                             7.9 |\n| ujson      |                       15.1 |                            11.1 |\n| rapidjson  |                       15.8 |                            36   |\n| simplejson |                       14.3 |                            27.4 |\n| json       |                       14   |                            27.2 |\n\n#### canada.json\n\n| Library    |   import, read() RSS (MiB) |   loads() increase in RSS (MiB) |\n|------------|----------------------------|---------------------------------|\n| orjson     |                       17.1 |                            15.7 |\n| ujson      |                       17.6 |                            17.4 |\n| rapidjson  |                       18.3 |                            17.9 |\n| simplejson |                       16.9 |                            19.6 |\n| json       |                       16.5 |                            19.4 |\n\n### Reproducing\n\nThe above was measured using Python 3.8.3 on Linux (x86_64) with\norjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.\n\nThe latency results can be reproduced using the `pybench` and `graph`\nscripts. The memory results can be reproduced using the `pymem` script.\n\n## Questions\n\n### Why can't I install it from PyPI?\n\n\nProbably `pip` needs to be upgraded to version 20.3 or later to support\nthe latest manylinux_x_y or universal2 wheel formats.\n\n### Will it deserialize to dataclasses, UUIDs, decimals, etc or support object_hook?\n\nNo. This requires a schema specifying what types are expected and how to\nhandle errors etc. This is addressed by data validation libraries a\nlevel above this.\n\n### Will it serialize to `str`?\n\nNo. `bytes` is the correct type for a serialized blob.\n\n### Will it support PyPy?\n\nIf someone implements it well.\n\n## Packaging\n\nTo package orjson requires [Rust](https://www.rust-lang.org/) and the\n[maturin](https://github.com/PyO3/maturin) build tool.\n\nThis is an example for x86_64 on the Rust nightly channel:\n\n```sh\nexport RUSTFLAGS=\"-C target-cpu=k8\"\nmaturin build --release --strip --cargo-extra-args=\"--features=unstable-simd\"\n```\n\nTo build on the stable channel, do not specify `--features=unstable-simd`.\n\nThe project's own CI tests against `nightly-2022-02-13` and stable 1.54. It\nis prudent to pin the nightly version because that channel can introduce\nbreaking changes.\n\norjson is tested for amd64, aarch64, and arm7 on Linux. It is tested for\namd64 on macOS and ships an aarch64 wheel also supporting aarch64. For Windows\nis is tested on amd64.\n\nThere are no runtime dependencies other than libc.\n\norjson's tests are included in the source distribution on PyPI. The\nrequirements to run the tests are specified in `test/requirements.txt`. The\ntests should be run as part of the build. It can be run with\n`pytest -q test`.\n\n## License\n\norjson was written by ijl <<ijl@mailbox.org>>, copyright 2018 - 2022, licensed\nunder both the Apache 2 and MIT licenses.\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aviramha/orjson-pydantic",
    "keywords": "fast,json,dataclass,dataclasses,datetime,rfc,8259,3339",
    "license": "Apache-2.0 OR MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orjson-pydantic2",
    "package_url": "https://pypi.org/project/orjson-pydantic2/",
    "platform": null,
    "project_url": "https://pypi.org/project/orjson-pydantic2/",
    "project_urls": {
      "Homepage": "https://github.com/aviramha/orjson-pydantic",
      "Source Code": "https://github.com/aviramha/orjson-pydantic"
    },
    "release_url": "https://pypi.org/project/orjson-pydantic2/3.6.7/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy",
    "version": "3.6.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15776130,
  "releases": {
    "3.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1576068b71a4e4e0c9a589ee2a60a2b0c9ac7b92afdaddded5a87b5f7719c057",
          "md5": "582bedc9f119da8e03157f4ad7406e31",
          "sha256": "3300a8552441f059e36daf525f175972b3e9577c0e4c1250b68cde001d5113db"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp310-cp310-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "582bedc9f119da8e03157f4ad7406e31",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.7",
        "size": 247692,
        "upload_time": "2022-11-15T15:08:52",
        "upload_time_iso_8601": "2022-11-15T15:08:52.159883Z",
        "url": "https://files.pythonhosted.org/packages/15/76/068b71a4e4e0c9a589ee2a60a2b0c9ac7b92afdaddded5a87b5f7719c057/orjson_pydantic2-3.6.7-cp310-cp310-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e12c4fcd24d2854a9f23664c6ef35daa8928962bd6e0a159264eb818a36a97d",
          "md5": "441176ac43c39379bab7e39c76c335db",
          "sha256": "50c7c0ee13be749e84e32e1563ae9f096cdcffa72441f2110d57172e662057c4"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "441176ac43c39379bab7e39c76c335db",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.7",
        "size": 265408,
        "upload_time": "2022-11-15T14:54:06",
        "upload_time_iso_8601": "2022-11-15T14:54:06.722051Z",
        "url": "https://files.pythonhosted.org/packages/3e/12/c4fcd24d2854a9f23664c6ef35daa8928962bd6e0a159264eb818a36a97d/orjson_pydantic2-3.6.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "922441b7c26b85b33a3edadb4ec05e4a5ff87466e16c7a32c51b82dcca6064fc",
          "md5": "e3d66d99e2efaefcb7480c115187c2bc",
          "sha256": "de4ab461aa1d3f0f41e76bcfdb6d5be40b3bf2babbdfbaebafa7553a90083b20"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp310-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e3d66d99e2efaefcb7480c115187c2bc",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.7",
        "size": 194442,
        "upload_time": "2022-11-15T15:02:44",
        "upload_time_iso_8601": "2022-11-15T15:02:44.731437Z",
        "url": "https://files.pythonhosted.org/packages/92/24/41b7c26b85b33a3edadb4ec05e4a5ff87466e16c7a32c51b82dcca6064fc/orjson_pydantic2-3.6.7-cp310-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e9b807d9eff96794a52cd6364ec15a1dd05a747af359d672c94bb63ca174caa",
          "md5": "b35dc07257b72735467777dd8ef6990f",
          "sha256": "22df74dab0cd658c5868f7335fdebfcfd1c4847d1a1f03d24173f530132dc5f6"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp37-cp37m-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b35dc07257b72735467777dd8ef6990f",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 247652,
        "upload_time": "2022-11-15T15:07:44",
        "upload_time_iso_8601": "2022-11-15T15:07:44.682067Z",
        "url": "https://files.pythonhosted.org/packages/8e/9b/807d9eff96794a52cd6364ec15a1dd05a747af359d672c94bb63ca174caa/orjson_pydantic2-3.6.7-cp37-cp37m-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9febd99118abef4bc83c7c14e7a25e5742542aa512ca64ab8d870f0e97772aae",
          "md5": "3723098460c1c3751ab60dc2652bbdb3",
          "sha256": "eb6b49678fad2b4e324f7a40f7a03be4bf6805dc6171868a4e5cacf8ad6a4c61"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "3723098460c1c3751ab60dc2652bbdb3",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 265348,
        "upload_time": "2022-11-15T14:54:25",
        "upload_time_iso_8601": "2022-11-15T14:54:25.575958Z",
        "url": "https://files.pythonhosted.org/packages/9f/eb/d99118abef4bc83c7c14e7a25e5742542aa512ca64ab8d870f0e97772aae/orjson_pydantic2-3.6.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5bc6df9a92e1d27a126a174217db0cc669418732988aa6ba79354b5073a9b09",
          "md5": "7f56bf2f0e21ef3e20b4d6fd6b8f0571",
          "sha256": "73ffd808ab96ad690e1c96281ace7a0b152ce7b588ff42b9e07f9cbdf079cad9"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp37-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "7f56bf2f0e21ef3e20b4d6fd6b8f0571",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 194269,
        "upload_time": "2022-11-15T15:03:21",
        "upload_time_iso_8601": "2022-11-15T15:03:21.944122Z",
        "url": "https://files.pythonhosted.org/packages/e5/bc/6df9a92e1d27a126a174217db0cc669418732988aa6ba79354b5073a9b09/orjson_pydantic2-3.6.7-cp37-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9175344c5cb96a8a257bca937a82c3faf52c405ecfc4ef5e4f732608c4a47b40",
          "md5": "2be6f02b480e6522a745c4c89729c17f",
          "sha256": "894901042dcc513aca39b1233ef6408e1b8b2483dfe6d2d4962b9e762f3c41a7"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp38-cp38-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "2be6f02b480e6522a745c4c89729c17f",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 247568,
        "upload_time": "2022-11-15T15:11:18",
        "upload_time_iso_8601": "2022-11-15T15:11:18.678898Z",
        "url": "https://files.pythonhosted.org/packages/91/75/344c5cb96a8a257bca937a82c3faf52c405ecfc4ef5e4f732608c4a47b40/orjson_pydantic2-3.6.7-cp38-cp38-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "705d76ebd413f4d7cec3d54d61cd28c0e85b0b9f3a3961fb708350d0302b031c",
          "md5": "15953712d4399c98dd96b7a2582300e0",
          "sha256": "96f507f5f181eb70a5451c9664154d3152a9092b07cdbdba3b07e9d6fcd5e613"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "15953712d4399c98dd96b7a2582300e0",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 265272,
        "upload_time": "2022-11-15T14:54:42",
        "upload_time_iso_8601": "2022-11-15T14:54:42.275003Z",
        "url": "https://files.pythonhosted.org/packages/70/5d/76ebd413f4d7cec3d54d61cd28c0e85b0b9f3a3961fb708350d0302b031c/orjson_pydantic2-3.6.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4343e947b5eac6e0b647187503207379460140dc39be1d467351adba5d2931c",
          "md5": "5ed2b963ad37fee71f8c9bc462a8f593",
          "sha256": "25ef44e42ae65c42ef4d274b05380bc4ea735589d49f0ad4274c59d4bb572ef6"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp38-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5ed2b963ad37fee71f8c9bc462a8f593",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 194298,
        "upload_time": "2022-11-15T15:03:52",
        "upload_time_iso_8601": "2022-11-15T15:03:52.890108Z",
        "url": "https://files.pythonhosted.org/packages/c4/34/3e947b5eac6e0b647187503207379460140dc39be1d467351adba5d2931c/orjson_pydantic2-3.6.7-cp38-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "635aac95e7657daa75f84638d27e90e135af5ca6a2d96ba1fec9d0887b86520f",
          "md5": "b9d3c4356abe9223065f22781f6aff3f",
          "sha256": "bf32e216e2304cbd020e5a5e4c18c44e359909c5a6aef0114ffa97410a4cc2fb"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp39-cp39-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b9d3c4356abe9223065f22781f6aff3f",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 247694,
        "upload_time": "2022-11-15T15:07:02",
        "upload_time_iso_8601": "2022-11-15T15:07:02.244524Z",
        "url": "https://files.pythonhosted.org/packages/63/5a/ac95e7657daa75f84638d27e90e135af5ca6a2d96ba1fec9d0887b86520f/orjson_pydantic2-3.6.7-cp39-cp39-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5a1cbb976294f7beea531ddf79349626d4d9247b85ab00f52da475a979ab65",
          "md5": "c83a3672d40f77461a2df81d71a9779a",
          "sha256": "7a8b402eafe31241863bf26b6cdad4db91e7a1baa434b7e677b4db8159c466e9"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c83a3672d40f77461a2df81d71a9779a",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 265406,
        "upload_time": "2022-11-15T14:55:10",
        "upload_time_iso_8601": "2022-11-15T14:55:10.974882Z",
        "url": "https://files.pythonhosted.org/packages/ca/5a/1cbb976294f7beea531ddf79349626d4d9247b85ab00f52da475a979ab65/orjson_pydantic2-3.6.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d84a2f94e48dd4319c9bc1221096077e78812cff762a4059d9f44585792095d",
          "md5": "fd83de51f9a007eee8bc059dc16e566a",
          "sha256": "ab3a0ffe86a7fb54901df5ceb23877f78a3929fb38032e3a96cab22c6726090b"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fd83de51f9a007eee8bc059dc16e566a",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 194444,
        "upload_time": "2022-11-15T15:05:13",
        "upload_time_iso_8601": "2022-11-15T15:05:13.542780Z",
        "url": "https://files.pythonhosted.org/packages/4d/84/a2f94e48dd4319c9bc1221096077e78812cff762a4059d9f44585792095d/orjson_pydantic2-3.6.7-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecb74045d3b716234866b7641d106e8364b849d750acd4125b39b655661367ce",
          "md5": "9b7496f762bcc2c8782219da27be7348",
          "sha256": "826f6df19739f138a7a37de581abf5c9d5d53acb8e41165134da49f75616f312"
        },
        "downloads": -1,
        "filename": "orjson_pydantic2-3.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9b7496f762bcc2c8782219da27be7348",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 552357,
        "upload_time": "2022-11-15T14:52:39",
        "upload_time_iso_8601": "2022-11-15T14:52:39.031194Z",
        "url": "https://files.pythonhosted.org/packages/ec/b7/4045d3b716234866b7641d106e8364b849d750acd4125b39b655661367ce/orjson_pydantic2-3.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1576068b71a4e4e0c9a589ee2a60a2b0c9ac7b92afdaddded5a87b5f7719c057",
        "md5": "582bedc9f119da8e03157f4ad7406e31",
        "sha256": "3300a8552441f059e36daf525f175972b3e9577c0e4c1250b68cde001d5113db"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp310-cp310-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "582bedc9f119da8e03157f4ad7406e31",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7",
      "size": 247692,
      "upload_time": "2022-11-15T15:08:52",
      "upload_time_iso_8601": "2022-11-15T15:08:52.159883Z",
      "url": "https://files.pythonhosted.org/packages/15/76/068b71a4e4e0c9a589ee2a60a2b0c9ac7b92afdaddded5a87b5f7719c057/orjson_pydantic2-3.6.7-cp310-cp310-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e12c4fcd24d2854a9f23664c6ef35daa8928962bd6e0a159264eb818a36a97d",
        "md5": "441176ac43c39379bab7e39c76c335db",
        "sha256": "50c7c0ee13be749e84e32e1563ae9f096cdcffa72441f2110d57172e662057c4"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "441176ac43c39379bab7e39c76c335db",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7",
      "size": 265408,
      "upload_time": "2022-11-15T14:54:06",
      "upload_time_iso_8601": "2022-11-15T14:54:06.722051Z",
      "url": "https://files.pythonhosted.org/packages/3e/12/c4fcd24d2854a9f23664c6ef35daa8928962bd6e0a159264eb818a36a97d/orjson_pydantic2-3.6.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "922441b7c26b85b33a3edadb4ec05e4a5ff87466e16c7a32c51b82dcca6064fc",
        "md5": "e3d66d99e2efaefcb7480c115187c2bc",
        "sha256": "de4ab461aa1d3f0f41e76bcfdb6d5be40b3bf2babbdfbaebafa7553a90083b20"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp310-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "e3d66d99e2efaefcb7480c115187c2bc",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7",
      "size": 194442,
      "upload_time": "2022-11-15T15:02:44",
      "upload_time_iso_8601": "2022-11-15T15:02:44.731437Z",
      "url": "https://files.pythonhosted.org/packages/92/24/41b7c26b85b33a3edadb4ec05e4a5ff87466e16c7a32c51b82dcca6064fc/orjson_pydantic2-3.6.7-cp310-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e9b807d9eff96794a52cd6364ec15a1dd05a747af359d672c94bb63ca174caa",
        "md5": "b35dc07257b72735467777dd8ef6990f",
        "sha256": "22df74dab0cd658c5868f7335fdebfcfd1c4847d1a1f03d24173f530132dc5f6"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp37-cp37m-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b35dc07257b72735467777dd8ef6990f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 247652,
      "upload_time": "2022-11-15T15:07:44",
      "upload_time_iso_8601": "2022-11-15T15:07:44.682067Z",
      "url": "https://files.pythonhosted.org/packages/8e/9b/807d9eff96794a52cd6364ec15a1dd05a747af359d672c94bb63ca174caa/orjson_pydantic2-3.6.7-cp37-cp37m-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9febd99118abef4bc83c7c14e7a25e5742542aa512ca64ab8d870f0e97772aae",
        "md5": "3723098460c1c3751ab60dc2652bbdb3",
        "sha256": "eb6b49678fad2b4e324f7a40f7a03be4bf6805dc6171868a4e5cacf8ad6a4c61"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "3723098460c1c3751ab60dc2652bbdb3",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 265348,
      "upload_time": "2022-11-15T14:54:25",
      "upload_time_iso_8601": "2022-11-15T14:54:25.575958Z",
      "url": "https://files.pythonhosted.org/packages/9f/eb/d99118abef4bc83c7c14e7a25e5742542aa512ca64ab8d870f0e97772aae/orjson_pydantic2-3.6.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5bc6df9a92e1d27a126a174217db0cc669418732988aa6ba79354b5073a9b09",
        "md5": "7f56bf2f0e21ef3e20b4d6fd6b8f0571",
        "sha256": "73ffd808ab96ad690e1c96281ace7a0b152ce7b588ff42b9e07f9cbdf079cad9"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp37-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "7f56bf2f0e21ef3e20b4d6fd6b8f0571",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 194269,
      "upload_time": "2022-11-15T15:03:21",
      "upload_time_iso_8601": "2022-11-15T15:03:21.944122Z",
      "url": "https://files.pythonhosted.org/packages/e5/bc/6df9a92e1d27a126a174217db0cc669418732988aa6ba79354b5073a9b09/orjson_pydantic2-3.6.7-cp37-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9175344c5cb96a8a257bca937a82c3faf52c405ecfc4ef5e4f732608c4a47b40",
        "md5": "2be6f02b480e6522a745c4c89729c17f",
        "sha256": "894901042dcc513aca39b1233ef6408e1b8b2483dfe6d2d4962b9e762f3c41a7"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp38-cp38-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "2be6f02b480e6522a745c4c89729c17f",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 247568,
      "upload_time": "2022-11-15T15:11:18",
      "upload_time_iso_8601": "2022-11-15T15:11:18.678898Z",
      "url": "https://files.pythonhosted.org/packages/91/75/344c5cb96a8a257bca937a82c3faf52c405ecfc4ef5e4f732608c4a47b40/orjson_pydantic2-3.6.7-cp38-cp38-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "705d76ebd413f4d7cec3d54d61cd28c0e85b0b9f3a3961fb708350d0302b031c",
        "md5": "15953712d4399c98dd96b7a2582300e0",
        "sha256": "96f507f5f181eb70a5451c9664154d3152a9092b07cdbdba3b07e9d6fcd5e613"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "15953712d4399c98dd96b7a2582300e0",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 265272,
      "upload_time": "2022-11-15T14:54:42",
      "upload_time_iso_8601": "2022-11-15T14:54:42.275003Z",
      "url": "https://files.pythonhosted.org/packages/70/5d/76ebd413f4d7cec3d54d61cd28c0e85b0b9f3a3961fb708350d0302b031c/orjson_pydantic2-3.6.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4343e947b5eac6e0b647187503207379460140dc39be1d467351adba5d2931c",
        "md5": "5ed2b963ad37fee71f8c9bc462a8f593",
        "sha256": "25ef44e42ae65c42ef4d274b05380bc4ea735589d49f0ad4274c59d4bb572ef6"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp38-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5ed2b963ad37fee71f8c9bc462a8f593",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 194298,
      "upload_time": "2022-11-15T15:03:52",
      "upload_time_iso_8601": "2022-11-15T15:03:52.890108Z",
      "url": "https://files.pythonhosted.org/packages/c4/34/3e947b5eac6e0b647187503207379460140dc39be1d467351adba5d2931c/orjson_pydantic2-3.6.7-cp38-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "635aac95e7657daa75f84638d27e90e135af5ca6a2d96ba1fec9d0887b86520f",
        "md5": "b9d3c4356abe9223065f22781f6aff3f",
        "sha256": "bf32e216e2304cbd020e5a5e4c18c44e359909c5a6aef0114ffa97410a4cc2fb"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp39-cp39-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b9d3c4356abe9223065f22781f6aff3f",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 247694,
      "upload_time": "2022-11-15T15:07:02",
      "upload_time_iso_8601": "2022-11-15T15:07:02.244524Z",
      "url": "https://files.pythonhosted.org/packages/63/5a/ac95e7657daa75f84638d27e90e135af5ca6a2d96ba1fec9d0887b86520f/orjson_pydantic2-3.6.7-cp39-cp39-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca5a1cbb976294f7beea531ddf79349626d4d9247b85ab00f52da475a979ab65",
        "md5": "c83a3672d40f77461a2df81d71a9779a",
        "sha256": "7a8b402eafe31241863bf26b6cdad4db91e7a1baa434b7e677b4db8159c466e9"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c83a3672d40f77461a2df81d71a9779a",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 265406,
      "upload_time": "2022-11-15T14:55:10",
      "upload_time_iso_8601": "2022-11-15T14:55:10.974882Z",
      "url": "https://files.pythonhosted.org/packages/ca/5a/1cbb976294f7beea531ddf79349626d4d9247b85ab00f52da475a979ab65/orjson_pydantic2-3.6.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d84a2f94e48dd4319c9bc1221096077e78812cff762a4059d9f44585792095d",
        "md5": "fd83de51f9a007eee8bc059dc16e566a",
        "sha256": "ab3a0ffe86a7fb54901df5ceb23877f78a3929fb38032e3a96cab22c6726090b"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7-cp39-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fd83de51f9a007eee8bc059dc16e566a",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 194444,
      "upload_time": "2022-11-15T15:05:13",
      "upload_time_iso_8601": "2022-11-15T15:05:13.542780Z",
      "url": "https://files.pythonhosted.org/packages/4d/84/a2f94e48dd4319c9bc1221096077e78812cff762a4059d9f44585792095d/orjson_pydantic2-3.6.7-cp39-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecb74045d3b716234866b7641d106e8364b849d750acd4125b39b655661367ce",
        "md5": "9b7496f762bcc2c8782219da27be7348",
        "sha256": "826f6df19739f138a7a37de581abf5c9d5d53acb8e41165134da49f75616f312"
      },
      "downloads": -1,
      "filename": "orjson_pydantic2-3.6.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9b7496f762bcc2c8782219da27be7348",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 552357,
      "upload_time": "2022-11-15T14:52:39",
      "upload_time_iso_8601": "2022-11-15T14:52:39.031194Z",
      "url": "https://files.pythonhosted.org/packages/ec/b7/4045d3b716234866b7641d106e8364b849d750acd4125b39b655661367ce/orjson_pydantic2-3.6.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}