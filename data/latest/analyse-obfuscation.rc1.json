{
  "info": {
    "author": "@Wietze",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Security"
    ],
    "description": "# Windows Command-Line Obfuscation\n\n## Background\n`analyse_obfuscation` is a python3 module for finding common command-line obfuscation techniques for a given program, as described in [this](https://wietze.github.io/blog/windows-command-line-obfuscation) blog post.\n\nBy providing one or more commands, `analyse_obfuscation` will test if the following obfuscation techniques can be applied:\n\n1) **Option Char substitution**\n\n   _e.g. `ping -n 1 localhost` == `ping /n 1 localhost`_\n\n2) **Character substitution**\n\n   _e.g. `reg eË£port HKCU out.reg` == `reg export HKCU out.reg`_\n\n3) **Character insertion**\n\n   _e.g. `wevtutil gà¢¯li (â€¦)` == `wevtutil gli (â€¦)`_\n\n4) **Quotes insertion**\n\n   _e.g. `netsh ad\"vfi\"rewall show (â€¦)` == `netsh advfirewall show (â€¦)`_\n\n5) **Shorthands**\n\n   _e.g. `powershell /encod (â€¦)` == `powershell /encodedcommand (â€¦)`_\n\n## Goals\nNote that the goal of this project is to show that a given executable/command line can be obfuscated, not to give a complete list of possible obfuscations for a given command. It should however be possible to derive different obfuscation opportunities from `analyse_obfuscation`'s output.\n\nBlue teamers ðŸ”µ may want to use this tool, for example, to check if an executable they have written a detection rule is vulnerable to command-line obfuscation, meaning the rule should be improved or additional rules are needed. Note that in some cases this game is unwinnable - please take a look at the recommendations in the [blog post](https://wietze.github.io/blog/windows-command-line-obfuscation) for suggestions on how to tackle this.\n\nRed teamers ðŸ”´ may want to use this tool to find opportunities for bypassing simple detection rules.\n\n## Usage\n\n### Run\nThe simplest way to use this project is by running it (without installation).\n\n* **Run script**: clone the entire repository, install all dependencies (`pip3 install -r requirements.txt`) and run via:\n  ```bash\n  python3 -m analyse_obfuscation.run --help\n  ```\n\n### Install\nBy installing the project, it will be possible to simply call `analyse_obfuscation` from the command line.\n* **Via PyPI**: install the application via for example pip:\n  ```bash\n  pip3 install analyse_obfuscation\n  ```\n* **From source**: you can install a local version of the module by cloning the entire repository, followed by these commands:  \n  (note that this requires `setuptools` to be installed)\n  ```bash\n  python3 setup.py sdist bdist_wheel\n  pip3 install dist/analyse_obfuscation-*-py3-none-any.whl --upgrade\n  ```\n\n## Examples\n\n(Screenshot)\n\nEach execution generates a high-level result overview on the stdout, as can be seen in the screenshot. Additionally a .log file providing examples of commands found to be working is created. Sample report files generated by the below commands can be found in the [sample_results/](sample_results/) folder.\n\n```bash\n# Check simple 'ping' command\nanalyse_obfuscation --command \"ping /n 1 localhost\"\n\n# Check 'net share' command using {random}, which will be replaced by random string for each execution\nanalyse_obfuscation --command \"net share x=c:\\ /remark:{random}\"\n\n# Check 'powershell /encodedcommand' command with increased timeout, as executions tend to take long\nanalyse_obfuscation --command \"powershell /encodedcommand ZQBjAGgAbwAgACIAQAB3AGkAZQB0AHoAZQAiAA==\" --timeout 5\n\n# Check 'systeminfo' command by only looking at the exit code, not the output - since every output will be different due to (changing) timestamps\nanalyse_obfuscation --command \"systeminfo /s localhost\" --timeout 5 --exit_code_only\n\n# Check all commands as specified in sample.json, saving all reports in 'reports/'\nanalyse_obfuscation --json_file sample/sample.json --report_dir reports/\n```\n\n**Note** that the results may contain false positives - especially when single-character command-line options are being tested (such as `/n` in `ping /n 1 localhost`). In such cases, character insertion (method 3) may contain whitespace characters, which doesn't really 'count' as insertion character as whitespaces between command-line arguments are usually filtered out anyway. Similarly, character substitution (method 2) may change the entire option: e.g. `ping /s 1 localhost` and `ping /r 1 localhost` are functionally different, but happen to give the same output.\n\n## All options\nAll command-line options of this project can be requested by using the `--help` option:\n\n```\nusage: analyse_obfuscation [--threads n] [--verbose] [--report_dir c:\\path\\to\\dir] [--log_file c:\\path\\to\\file.log] [--help] [--command \"proc /arg1 /arg2\"] [--range {full,educated,ascii,custom}] [--custom_range 0x??..0x?? [0x??..0x?? ...]] [--char_offset n] [--post_command process_name] [--exit_code_only] [--timeout n] [--json_file c:\\path\\to\\file.jsonl]\n\nTool for identifying executables that have command-line options that can be obfuscated.\n\nrequired arguments (either is required):\n  --command \"proc /arg1 /arg2\"\n                        Single command to test\n  --json_file c:\\path\\to\\file.jsonl\n                        Path to JSON file (JSON Line formatted) containing commands config\n\noptional --command arguments:\n  --range {full,educated,ascii,custom}\n                        Character range to scan (default=educated)\n  --custom_range 0x??..0x?? [0x??..0x?? ...]\n                        Range to scan\n  --char_offset n       Character position used for insertion and replacement\n  --post_command process_name\n                        Command to run unconditionally after each attempt (e.g. to clean up)\n  --exit_code_only      Only base success on the exit code (and not the output of the command)\n  --timeout n           Number of seconds per execution before timing out.\n\noptional arguments:\n  --threads n           Number of threads to use\n  --verbose             Increase output verbosity\n  --report_dir c:\\path\\to\\dir\n                        Path to save report files to\n  --log_file c:\\path\\to\\file.log\n                        Path to save log to\n  --help                Show this help message and exit\n```\n\n\n\n## Repository Contents\n\nItem|Description\n-|-\n[analyse_obfuscation/](analyse_obfuscation) | Code for python3 module, enabling one to analyse executables for common command-line obfuscation techniques.\n[sample/](sample/) | Sample config file to analyse built-in Windows executables, as well as related input files.  Used to generate results in the above folder.\n[sample_results/](sample_results/) | Report files generated using the JSONL file in the above sample folder.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wietze/windows-command-line-obfuscation",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "analyse-obfuscation",
    "package_url": "https://pypi.org/project/analyse-obfuscation/",
    "platform": "",
    "project_url": "https://pypi.org/project/analyse-obfuscation/",
    "project_urls": {
      "Homepage": "https://github.com/wietze/windows-command-line-obfuscation"
    },
    "release_url": "https://pypi.org/project/analyse-obfuscation/1.0.0/",
    "requires_dist": [
      "tqdm",
      "colorama",
      "terminaltables"
    ],
    "requires_python": "",
    "summary": "Project for identifying executables that have command-line options that can be obfuscated, possibly bypassing detection rules.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10986077,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ce00c697028bde04e7b10d0e15301f2b8a238df2738c5531d03e07a0fba0473",
          "md5": "ceebd61518233520d1b5425aa173bf7a",
          "sha256": "d215e7ed233d17c391e14738b3c610b0956ec424d808f0ee306757975aebe1b7"
        },
        "downloads": -1,
        "filename": "analyse_obfuscation-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ceebd61518233520d1b5425aa173bf7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25750,
        "upload_time": "2021-07-23T12:10:55",
        "upload_time_iso_8601": "2021-07-23T12:10:55.418214Z",
        "url": "https://files.pythonhosted.org/packages/2c/e0/0c697028bde04e7b10d0e15301f2b8a238df2738c5531d03e07a0fba0473/analyse_obfuscation-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6dcf42305bf815fa2d4cb762f1bedb70c67b33cd2d31da6bc9f759f8a043677",
          "md5": "88935206b7308953282bf275700f7b77",
          "sha256": "a6eeeb1f4c3faa60bb6bc189e353bd498ba0e2f0fcd2193884bfb74a0a095a08"
        },
        "downloads": -1,
        "filename": "analyse_obfuscation-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88935206b7308953282bf275700f7b77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25818,
        "upload_time": "2021-07-23T12:10:56",
        "upload_time_iso_8601": "2021-07-23T12:10:56.642699Z",
        "url": "https://files.pythonhosted.org/packages/c6/dc/f42305bf815fa2d4cb762f1bedb70c67b33cd2d31da6bc9f759f8a043677/analyse_obfuscation-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ce00c697028bde04e7b10d0e15301f2b8a238df2738c5531d03e07a0fba0473",
        "md5": "ceebd61518233520d1b5425aa173bf7a",
        "sha256": "d215e7ed233d17c391e14738b3c610b0956ec424d808f0ee306757975aebe1b7"
      },
      "downloads": -1,
      "filename": "analyse_obfuscation-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ceebd61518233520d1b5425aa173bf7a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25750,
      "upload_time": "2021-07-23T12:10:55",
      "upload_time_iso_8601": "2021-07-23T12:10:55.418214Z",
      "url": "https://files.pythonhosted.org/packages/2c/e0/0c697028bde04e7b10d0e15301f2b8a238df2738c5531d03e07a0fba0473/analyse_obfuscation-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6dcf42305bf815fa2d4cb762f1bedb70c67b33cd2d31da6bc9f759f8a043677",
        "md5": "88935206b7308953282bf275700f7b77",
        "sha256": "a6eeeb1f4c3faa60bb6bc189e353bd498ba0e2f0fcd2193884bfb74a0a095a08"
      },
      "downloads": -1,
      "filename": "analyse_obfuscation-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "88935206b7308953282bf275700f7b77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25818,
      "upload_time": "2021-07-23T12:10:56",
      "upload_time_iso_8601": "2021-07-23T12:10:56.642699Z",
      "url": "https://files.pythonhosted.org/packages/c6/dc/f42305bf815fa2d4cb762f1bedb70c67b33cd2d31da6bc9f759f8a043677/analyse_obfuscation-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}