{
  "info": {
    "author": "Nicola Gritti",
    "author_email": "gritti@embl.es",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img align=\"left\" width=\"80\" height=\"80\" src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/morgana_icon.png\" alt=\"morgana\">\n\n# MOrgAna\n\nWelcome to MOrgAna (Machine-learning based Organoids Analysis) to segment and analyse 2D multi-channel images of organoids, as described in the paper: \n\n*Nicola Gritti, Jia Le Lim, Kerim Anla≈ü, David Oriola, Mallica Pandya, Germaine Aalderink, Guillermo Martinez Ara, Vikas Trivedi.*\nMOrgAna: accessible quantitative analysis of organoids with machine learning.\n*Development* (2021) 148 (18): dev199611.\nhttps://doi.org/10.1242/dev.199611\n\n## Overview\n\nMOrgAna accepts images acquired by diverse devices such as high content screening devices, confocal microscopes and simple benchtop stereo-microscopes, trains a segmentation network based on a few manually created binary mask for the generation of addition masks of unseen images, and produces quantitative plots based on morphological and fluorescence parameters based on the input images and generated masks.\n\n<p align=\"center\">\n\t<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/Fig1.png\" alt=\"overview\" width=\"800\"/>\n</p>\n\n## Installation\n\nThe MOrgAna software has been tested with Python 3.6 and above. To install Python, we recommend using the software [Anaconda](https://www.anaconda.com/products/individual). Anaconda provides a Python distribution for Windows, Linux, and MacOS, and contains most of the pacakges used by MOrgAna. \n\nUsers can also choose to create a Conda environment using the `environment_morgana.yml` file found in the repository:`morgana/environment_morgana.yml`. To create the environment and activate it, set working directory in the MOrgAna folder and run the command `conda env create -f environment_morgana.yml` in terminal (MacOS) or command prompt(windows).\n\nIf problems were encountered due to package incompatibility, we recommend the use of conda or pip to perform an update of the python package.\n\nOptional: To use deep machine learning in generation of masks, please first install TensorFlow 2 with GPU support. The tensorflow package can be installed with the command `pip install tensorflow` in terminal (MacOS) or command prompt(windows). Otherwise, please follow the official instructions for installation of tensorflow [here](https://www.tensorflow.org/install).\n\nTo download the software, run `pip install morgana` in terminal (MacOS) or command prompt(windows).\n\n## Using the software\n\nThis software is able to A) generate binary masks of organoids based on their bright-field images and with this mask, extract morphological information, generate a midline and a meshgrid. B) Provide analysis of fluorescence signals along the generated midline and enable quick and easy visual comparisons between conditions.\n\nTo run MOrgAna, run `python -m morgana` in terminal (MacOS) or command prompt(windows).\n\n<p align=\"center\">\n\t<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/front_page.png\" alt=\"front_page\" width=\"350\"/>\n</p>\n\nFor advance python users looking to analyse multiple image folders at once, please refer to the jupyter notebook `morgana/Examples/MOrgAna_workflow_for_advance_python_users.ipynb`.\n\n### A) Generate or Import Masks Tab\nEach tif file in image folder should contain only one organoid with the brightfield channel as the starting image of each tif. Input tif files for MOrgAna can be generated from individual tif images with the use of the IJ macro `morgana/Examples/IJ_macro/transform_into_stacks.ijm`. Instructions for the use of the macro can be found in `morgana/Examples/IJ_macro/README_transform_into_stacks.txt`.\n\n#### Creating binary masks\n\n1. Manually create a `model` folder that contains a `trainingset` sub-folder. Select a few representative images (~5% of all images) and copy them into this sub-folder. If binary masks of this training set have already been created, place them in the same folder and name them as `..._GT.tif`. E.g. `20190509_01B_dmso.tif` and `20190509_01B_dmso_GT.tif`.\n\n2. Run the segmentation app. Click `Specify model folder` and select the `model` folder created. If binary masks are missing, please manually annotate for each image by clicking on the image in the pop up window to create a boundary around your object of interest or right click on red dots to remove selection. \n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/binary_mask.png\" alt=\"binary_mask\" width=\"400\"/>\n</p>\n\n3. Select `Use Multi Layer Perceptrons` if Tensorflow and CUDA have been successfully installed and if you would like to use deep learning to generate additional binary masks. \n\nUsers can choose to adjust the following parameters of the model by clicking `Show/Hide params`\n\n* Sigmas: length scales (in pixels) used to generate the gaussian blurs of the input image\n* Downscaling: number of pixels used to resize the input image. This is mainly done to reduce  computation time, and a value of 500 is found to be enough in most applications.\n* Edge size: number of pixels used on the border of the mask to generate the edge of the organoid.\n* Pixel% extraction: percentage of pixels of the input image to be considered. 0: no pixels, 1: all pixels\n* Extraction bias: percentage of pixels extracted from the bright region of the mask. This parameter is useful when inputted gastruloids are particularly small and there is a huge bias in extracting background pixels.\n* Features: 'ilastik' or 'daisy'. In addition to the ilastik features (gaussian blur, laplacian of gaussian, difference of gaussian and gradient), daisy will compute many texture features from the inptu image. This gives more features to train on, but will slow down the training and prediction of new masks.\n\n4. Once done, hit the `Train model` button. This may take some time :coffee:. Once completed, the message `##### Model saved!` will be seen on the terminal(MacOS) or command prompt(windows). If a model has previously been generated, select the model folder and the user can skip step 3 & 4 and jump to step 5. For models trained with Multi Layer Perceptrons, tick the option before selection of model folder.\n\n5. To generate binary masks of new images, select the folder containing images in `Specify image folder` and click `Generate masks`. Once completed, the message `All images done!` will be displayed on the terminal(MacOS) or command prompt(windows). If you would like an overview of all masks generated, click on `Save overview image of masks` and save the pop-up image.\n\n6. Click on `Inspect masks`. This will generate a overview of binary masks overlayed with their respective brightfield images. The mask generated with the watershed algorithm is shown in blue while the red mask is generated with the classifier algorithm.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/manual_selection_mask.png\" alt=\"manual_selection_mask\" width=\"800\"/>\n</p>\n\n7. The other panel will allow the user to chose, for every image, the final mask type: 'ignore' (do not include selected image and mask), 'classifier' (red), 'watershed' (blue), 'manual' (manually create mask). Clicking `Show/Hide more parameters` will enable the user to change parameters such as downsampling, thinning and smoothing used in the generation of the final mask. Optional: select `Compute full meshgrid` to generate a meshgrid for straightening of organoid for later quantification. If disabled, meshgrid will automatically be generated later if required.\n\n8. Next, `Compute all masks` will generate the final masks for every input image and save them into the `result_segmentation` subfolder. If 'manual' is selected, the user will be prompted to generate the manual mask on a separate window. As a rule of thumb, the classifier algorithm works most of the times. \n\n\n#### Import external masks\n\n1. If binary masks of all images have already been generated, select `Import external masks`. This will reveal a new page. This feature allows import of images with multiple objects of interest.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/import_external_masks.png\" alt=\"import_external_masks\" width=\"350\"/>\n</p>\n\n2. Specify image and mask folder with the `Specify image folder` and `Specify mask folder` buttons. Masks should be labeled as name of its respective image + file identifier. E.g. if the identifier is `_GT`: Image `20190509_01B_dmso.tif` and its mask `20190509_01B_dmso_GT.tif`. Please ensure that masks and images are in different folders.\n\n3. Select `Include objects at border of images` if all partial images at edges of images are to be included. \n\n4. `Import Masks and Images` will create a mask and a image for each object detected in imported images and masks.\n\n\n### B) Quantification\n\nClick on the Quantification tab to enable morphological and fluorescence quantification with previously generated masks.\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/quantification_tab.png\" alt=\"quantification_tab\" width=\"350\"/>\n</p>\n\n1. Using the `Select new dataset` button, import all image folders previously generated or imported in the `Generate or Import Masks` tab into the preferred groups. Each group can refer to one condition or one timepoint. For groups spanning multiple timepoints, users may select the `Timelapse data` option. More groups can be created by clicking `Add New Group` at the top. If there is only one group, `Groups` can be disabled at the top after selection of dataset.\n\n2. After importing all selected image folders, there are several options available below:\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/extended_quantification_tab.png\" alt=\"extended_quantification_tab\" width=\"350\"/>\n</p>\n\n* `Visualization quantification`: creates an overview of all meshgrids and composite images\n\n* `Morphology quantification`: Analysis of the following morphological parameters calculated using the unprocessed mask (without straightening) or the straighted mask (straighted using the generated midline). For more information on parameters, refer to [scikit-image](https://scikit-image.org/docs/dev/api/skimage.measure.html#skimage.measure.regionprops) or [S√°nchez-Corrales, Y. E. et al. (2018)](https://journals.biologists.com/dev/article/145/6/dev156778/48888/Morphometrics-of-complex-cell-shapes-lobe).\n\t* area\n\t* eccentricity: ratio of the focal distance over the major axis length; value of 0 as shape approaches a circle. \n\t* major_axis_length\n\t* minor_axis_length\n\t* equivalent_diameter: diameter of a circle with the same area as the region.\n\t* perimeter\n\t* euler_number\n\t* extent\n\t* orientation\n\t* locoefa_coeff (indication of complexity of shape; refer to [S√°nchez-Corrales, Y. E. et al. (2018)](https://journals.biologists.com/dev/article/145/6/dev156778/48888/Morphometrics-of-complex-cell-shapes-lobe))\n\t* `Use all parameters`: will display 10 graphs, each a quantification of the above parameters.\n\n\tClicking `Visualize Morphological Parameter (s)` will display one or more of the following windows:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/area.png\" alt=\"area\" width=\"350\"/>\n</p>\n\nIn this window, you can edit the quantification of morphological parameters by selecting the type of normalization and background subtraction. Users can also edit the graph shown by changing Pixel size/Scaler, Dimensionality, Plot type and Colormap with the options of removing groups, addition of legend or removal or raw data points on the graph. To view changes, click on `Apply Settings` after making the desired changes to options shown. `Compute statistics` shows P-values obtained from T-test, with the option of saving the p-values in a excel sheet. Users can also choose to save all resulting quantification values with the `Save Data as xlsx` button at the bottom. Square buttons at the top of the window can also be used to adjust the resulting graph with default options provided by matplotlib.\n\n\n* `Fluorescence quantification`: Quantification of fluorescence in the chosen channel with respect to space with the selection of Antero-Posterior profile, Left-Right profile, Radial profile, Angular profile or simply with the average fluorescence intensity. `Compute graph` will display one such panel shown below:\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/LabTrivedi/MOrgAna/master/morgana/Examples/app_screenshots/APprofile.png\" alt=\"APprofile\" width=\"350\"/>\n</p>\nUsers can choose to adjust method of quantification by changing Background subtraction type, Y axis normalization or selection of X axis normalization. If a spatial profile was chosen, the orientation of the profile can be signal-based. Users can similarly edit the colours of the graph with the Colormap, edit the X and Y axis labels, choose not to plot unwanted groups, include legends or remove raw data points from the graph shown. After altering the options, click on `Apply Settings` to view the changes. Default options of graphs by matplotib can also be changed with the square buttons at the top of the window.\n\n\n## Supplementary information\n\nEach subfolder containing the final masks also contains a segmentation_params.csv file generated during mask generation with the following information selected during creation of binary masks:\n* filename\n* chosen_mask: classifier (c), watershed (w), manual (m), ignore (i)\n* down_shape\n* thinning\n* smoothing\n\nAll morphological properties of organoids are computed when required and saved as `..._morpho_params.json` into the same subfolder as the final masks (`result_segmentation`)\n\nThese include:\n* 'input_file'\n* 'mask_file'\n* 'centroid'\n* 'slice'\n* 'area'\n* 'eccentricity' (perfect circle:0, elongated ellipse:~1)\n* 'major_axis_length'\n* 'minor_axis_length'\n* 'equivalent_diameter'\n* 'perimeter'\n* 'anchor_points_midline'\n* 'N_points_midline'\n* 'x_tup'\n* 'y_tup'\n* 'midline'\n* 'tangent'\n* 'meshgrid_width'\n* 'meshgrid'\n\nThe `_morpho_straight_params.json` is computed when required and saved into the same subfolder as the final masks (`result_segmentation`). It contains the following infomation:\n* area\n* eccentricity\n* major_axis_length\n* minor_axis_length\n* equivalent_diameter\n* perimeter\n* euler_number\n* extent\n* orientation\n* locoefa_coeff (indication of complexity of shape)\n\n\nThe average fluorescence intensities, and those along the Antero-Posterior, Left-Right, Radial and Angular profile of organoids are computed when required and saved as `..._fluo_intensity.json` into the same subfolder as the final masks (`result_segmentation`).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LabTrivedi/MOrgAna",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "morgana",
    "package_url": "https://pypi.org/project/morgana/",
    "platform": null,
    "project_url": "https://pypi.org/project/morgana/",
    "project_urls": {
      "Homepage": "https://github.com/LabTrivedi/MOrgAna"
    },
    "release_url": "https://pypi.org/project/morgana/0.1.1/",
    "requires_dist": [
      "matplotlib",
      "numpy (>=1.20)",
      "scikit-image (>=0.18)",
      "pandas (>=1.2)",
      "joblib (>=1.0)",
      "scikit-learn (>=0.24)",
      "scipy (>=1.6)",
      "tqdm (>=4.60)"
    ],
    "requires_python": ">=3.6",
    "summary": "A machine learning tool to segment organoids.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14411422,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d229e8876a715f306ed88c6bb9e546c4f63c91eff285e32ce7d15b774ba63dce",
          "md5": "c013ee8125bc282534064d7fbc3b8355",
          "sha256": "f2617c8af9e5b836a9dd2cffaa09e3d046bcb4565e4d2e7767d5eaee8496734e"
        },
        "downloads": -1,
        "filename": "morgana-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c013ee8125bc282534064d7fbc3b8355",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88780,
        "upload_time": "2021-05-28T13:12:34",
        "upload_time_iso_8601": "2021-05-28T13:12:34.037622Z",
        "url": "https://files.pythonhosted.org/packages/d2/29/e8876a715f306ed88c6bb9e546c4f63c91eff285e32ce7d15b774ba63dce/morgana-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a6b1fe56b67b00e41f3288e0e7da992999ca4c589e7a30cb561c54ac2d7594c",
          "md5": "2868722c46b6d246ed6692650e2c200a",
          "sha256": "5ca54213ab4cd7443b486264e370bb080a114924ddbd266ef0241786e4a3c95f"
        },
        "downloads": -1,
        "filename": "morgana-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2868722c46b6d246ed6692650e2c200a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70517,
        "upload_time": "2021-05-28T13:12:35",
        "upload_time_iso_8601": "2021-05-28T13:12:35.452556Z",
        "url": "https://files.pythonhosted.org/packages/6a/6b/1fe56b67b00e41f3288e0e7da992999ca4c589e7a30cb561c54ac2d7594c/morgana-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52f4b55c4b6318f43e1b02738cfd2f452c2f661ab86c8b1fb873b51ba8eecd57",
          "md5": "e3de66b5b8e827d251c247440cff6059",
          "sha256": "492900f329072ac5130f676d29e87faff3b7b2fa66d97e0033048d959404193a"
        },
        "downloads": -1,
        "filename": "morgana-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3de66b5b8e827d251c247440cff6059",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8742850,
        "upload_time": "2022-07-12T13:48:14",
        "upload_time_iso_8601": "2022-07-12T13:48:14.838815Z",
        "url": "https://files.pythonhosted.org/packages/52/f4/b55c4b6318f43e1b02738cfd2f452c2f661ab86c8b1fb873b51ba8eecd57/morgana-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b91160439aee268f8d9312ed3e725e5dd29ff881b1901c98c9430fee00069c3",
          "md5": "96b435c845503c1f2fc463dc9dbefca6",
          "sha256": "f7839dc28eda53c90d4ffd6d0c79231acebbe6a525f503f0ef1fb3c05e228cdd"
        },
        "downloads": -1,
        "filename": "morgana-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "96b435c845503c1f2fc463dc9dbefca6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8460043,
        "upload_time": "2022-07-12T13:48:17",
        "upload_time_iso_8601": "2022-07-12T13:48:17.681277Z",
        "url": "https://files.pythonhosted.org/packages/2b/91/160439aee268f8d9312ed3e725e5dd29ff881b1901c98c9430fee00069c3/morgana-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52f4b55c4b6318f43e1b02738cfd2f452c2f661ab86c8b1fb873b51ba8eecd57",
        "md5": "e3de66b5b8e827d251c247440cff6059",
        "sha256": "492900f329072ac5130f676d29e87faff3b7b2fa66d97e0033048d959404193a"
      },
      "downloads": -1,
      "filename": "morgana-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e3de66b5b8e827d251c247440cff6059",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8742850,
      "upload_time": "2022-07-12T13:48:14",
      "upload_time_iso_8601": "2022-07-12T13:48:14.838815Z",
      "url": "https://files.pythonhosted.org/packages/52/f4/b55c4b6318f43e1b02738cfd2f452c2f661ab86c8b1fb873b51ba8eecd57/morgana-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b91160439aee268f8d9312ed3e725e5dd29ff881b1901c98c9430fee00069c3",
        "md5": "96b435c845503c1f2fc463dc9dbefca6",
        "sha256": "f7839dc28eda53c90d4ffd6d0c79231acebbe6a525f503f0ef1fb3c05e228cdd"
      },
      "downloads": -1,
      "filename": "morgana-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "96b435c845503c1f2fc463dc9dbefca6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8460043,
      "upload_time": "2022-07-12T13:48:17",
      "upload_time_iso_8601": "2022-07-12T13:48:17.681277Z",
      "url": "https://files.pythonhosted.org/packages/2b/91/160439aee268f8d9312ed3e725e5dd29ff881b1901c98c9430fee00069c3/morgana-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}