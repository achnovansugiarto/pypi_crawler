{
  "info": {
    "author": "Nishant Sinha",
    "author_email": "nishant@offnote.co",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development"
    ],
    "description": "![experimental](https://img.shields.io/badge/stability-experimental-orange.svg)\n\n# And-Or Shape (aos) Language\n\n\nWriting data pipelines involves complex data transformations over nested data, e.g., list of dictionaries or dictionary of tensors. \n\n- The *shape* of nested data is not explicit in code and hence not accessible readily to the developer.\n- Leads to cognitive burden (guessing shapes), technical debt and inadvertent programming errors.\n- Data pipelines are very opaque to examination and comprehension.\n\n---\n\n`aos` is a compact, regex-like language for describing the shapes (schemas) of both homogeneous (tensors) and heterogeneous (dictionaries, tables) data, and combinations, independent of the specific data library. \n\n* Based on an intuitive **regex-like** algebra of data shapes.\n* **Infer** `aos` shape from a data instance: `aos.infer.infer_aos`.\n* **Validate** data against `aos` shapes anywhere: `aos.checker.instanceof`.\n* **Transform** data using `aos` shapes, declaratively: `aos.tfm.do_tfm`.\n* Allows writing explicit data shapes, **inline** in code. In Python, use type annotations.\n* Write shapes for a variety of data conveniently -- Python native objects (`dict`, `list`, scalars), tensors (`numpy`,` pytorch`, `tf`), `pandas`,`hdf5`,`tiledb`,`xarray`,`struct-tensor`, etc.\n\n### Installation\n\n```pip install aos```\n\n## Shape of Data ?\n\nConsider a few quick examples.\n\n- the shape of scalar data is simply its type, e.g., `int`, ` float`, `str`, ...\n- for nested data, eg.  list of `int`s:  `(int)*`\n- for a dictionary of form `{'a': 3, b: 'hi'}` : shape is  `(a & int) | (b & str)`.\n\nNow, we can describe the shape of *arbitrary, nested* data with these `&`(and)- `|`(or) expressions. Intuitively, a list is an `or`-structure, a dictionary is an `or` of `and`s, a tensor is an `and`-structure, and so on.\n\n* Why is a `list` an or-structure? Ask: how do we *access* any value `v` in the `list`? Choose **some** index of the list, corresponding to the value `v`. \n* Similarly, a `dictionary` is an or-and structure: we pick **one** of the *key*s, together (**and**) with its *value*.\n* In contrast, an n-dimensional `tensor` has an `and`-shape: we must choose indices from *all* the dimensions of the tensor to access a scalar value. \n* In general, for a data structure, we *ask*: what choices must we make to access a scalar value?\n\nThinking in terms of `and`-`or` shapes takes a bit of practice initially. Read more about the and-or expressions [here](docs/and-or-thinking.md).\n\n#### More complex `aos` examples\n\n* Lists over shape `s` are denoted as `(s)*`.  Shorthand for `(s|..|s)`.\n* Dictionary: `(k1 & v1) | (k2 & v2) | ... | (kn & vn)` where `ki` and `vi` is the `i`th key and value.\n* Pandas tables: `(n & ( (c1&int)| (c2&str) | ... | (cn&str) )` where `n` is the row dimension (the number of rows) and `c1,...,cn` are column names.\n\nThe `aos` expressions are very *compact*. For example, consider a highly nested Python object `X` of type\n\n `Sequence[Tuple[Tuple[str, int], Dict[str, str]]]`  \n\nThis is both verbose and hard to interpret. Instead, `X`'s `aos` is written compactly as\n `((str|int) | (str : str))* `.\n\n> The full data shape may be irrelevant in many cases. To keep it brief, the language supports wildcards: `_` and `...` to allow writing partial shapes. \n>\n> So, we could write a dictionary's shape as `(k1 & ...)| ... | (kn & ...)`.\n\n\n\n## Shape Inference\n\nUnearthing the shape of opaque data instances, e.g., returned from a web request, or passed into a function call, is a major pain. \n\n* Use `aos.infer.infer_aos` to obtain compact shapes of arbitrary data instances.\n* From command line, run `aos-infer <filename.json>`\n\n```python\nfrom aos.infer import infer_aos\n\ndef test_infer():\n\n  d = {\n      \"checked\": False,\n      \"dimensions\": { \"width\": 5, \"height\": 10},\n      \"id\": 1,\n      \"name\": \"A green door\",\n      \"price\": 12.5,\n      \"tags\": [\"home\",\"green\"]\n  }\n\n  infer_aos(d) \n\n  # ((checked & bool) \n  # | (dimensions & ((width & int) | (height & int)))\n  # | (id & int) | (name & str) | (price & float) | (tags & (str *)))\n\n  dlist = []\n  for i in range(100):\n      d['id'] = i\n      dlist.append(d.copy())\n\n  infer_aos(dlist) \n\n  # ((checked & bool) \n  # | (dimensions & ((width & int) | (height & int)))\n  # | (id & int) | (name & str) | (price & float) | (tags & (str *)))*\n\n\n```\n\n\n\n## Shape/Schema Validation\n\nUsing `aos.checker.instanceof`, we can \n\n* write `aos` assertions to validate data shapes (schemas). \n* validate data structure partially using placeholders:  `_` matches a scalar, `...` matches an arbitrary object (sub-tree).\n* works with python objects, pandas, numpy, ..., extensible to other data types (libraries).\n\n```python\nfrom aos.checker import instanceof\n\ndef test_pyobj():\n    d = {'city': 'New York', 'country': 'USA'}\n    t1 = ('Google', 2001)\n    t2 = (t1, d)\n\n    instanceof(t2, '(str | int) | (str & str)') #valid\n    instanceof(t2, '... | (str & _)') #valid\n    instanceof(t2, '(_ | _) | (str & int)') #error\n\n    tlist = [('a', 1), ('b', 2)]\n    instanceof(tlist, '(str | int)*') #valid\n\ndef test_pandas():\n    d =  {'id': 'CS2_056', 'cost': 2, 'name': 'Tap'}\n    df = pd.DataFrame([d.items()], columns=list(d.keys()) )\n\n    instanceof(df, '1 & (id | cost | name)')\n\ndef test_numpy():\n    #arr = np.array()\n    arr = np.array([[1,2,3],[4,5,6]]) \n    instanceof(arr, '2 & 3')\n\ndef test_pytorch():\n    #arr = np.array()\n    arr = torch.tensor([[1,2,3],[4,5,6]])\n    instanceof(arr, '2 & 3')\n```\n\n\n\n## Transformations with AOS\n\nBecause `aos` expressions can both *match* and *specify* heterogeneous data shapes, we can write `aos` **rules** to **transform** data. \n\nThe rules are written as `lhs -> rhs`, where both `lhs` and `rhs` are `aos` expressions:\n\n* `lhs` *matches* a part (sub-tree) of the input data instance *I*. \n* `query` variables in the `lhs` *capture* (bind with) parts of *I*.\n* `rhs` specifies the expected shape (aos) of the output data instance *O*.\n\nTo write rules, ask: which *parts* of *I*, do we need to construct *O* ?\n\n```python\nfrom aos.tfm import do_tfm\ndef tfm_example():\n    # input data\n    I = {'items': [{'k': 1}, {'k': 2}, {'k': 3}],\n        'names': ['A', 'B', 'C']}\n\n    # specify transformation (left aos -> right aos)\n    # using `query` variables `k` and `v`\n\n    # here `k` binds with each of the keys in the list and \n    # `v` binds with the corresponding value\n    # the `lhs` automatically ignores parts of I, which are irrelevant to O\n\n    tfm = 'items & (k & v)* -> values & (v)*'\n\n    O = do_tfm(I, tfm)\n    print(O) # {'values': [1, 2, 3]}\n```\n\n\n\nThe above example illustrates a simple JSON transformation using `aos` rules. Rules can be more complex, e.g., include *conditions*, *function* application on query variables. They work not only with JSON data, but also apply to heterogeneous nested objects.\n\nSee more examples [here](tests/test_tfm_json.py) and [here](tests/test_tfm_spark_json.py). \n\n\n\n## And-Or Shape Dimensions\n\nThe above examples of use strings or type names (`str`) or integer values (`2`,`3`) in shape expressions. A more principled approach is to first declare **dimension names** and define shape over these names. \n\nData is defined over two kinds of dimensions:\n\n* **Continuous**. A range of values, e.g., a numpy array of shape (5, 200) is defined over two continuous dimensions, say `n` and `d`, where `n` ranges over values `0-4` and `d` ranges over `0-199`.\n* **Categorical**. A set of names, e.g., a dictionary `{'a': 4, 'b': 5}` is defined over *keys*  (dim names) `['a', 'b']`. One can also view each key, e.g., `a` or `b` , as a **Singleton** dimension.\n\n\n\n**Programmatic API**. The library provides an API to declare both type of dimensions and `aos` expressions over these dimensions, e.g., declare `n` and `d` as two continuous dimensions and then define shape `n & d`.\n\n\n\n## Status\n\n*The library is under active development. More documentation coming soon..*\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ofnote/aos",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aos",
    "package_url": "https://pypi.org/project/aos/",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/aos/",
    "project_urls": {
      "Homepage": "https://github.com/ofnote/aos"
    },
    "release_url": "https://pypi.org/project/aos/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A shape language for arbitrary data",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7046844,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a741955fdfe7e97e0229b17727d3d7ba12c2c0a018652bb17ebafafba6753bc",
          "md5": "2ef8f6ad2fa44849c723f219da1ca1df",
          "sha256": "1a5d0a0870775462b1aa51cc95d87b8e645f68e364fefe10665cd2f5b4c48a30"
        },
        "downloads": -1,
        "filename": "aos-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ef8f6ad2fa44849c723f219da1ca1df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15159,
        "upload_time": "2020-01-22T07:28:50",
        "upload_time_iso_8601": "2020-01-22T07:28:50.012358Z",
        "url": "https://files.pythonhosted.org/packages/4a/74/1955fdfe7e97e0229b17727d3d7ba12c2c0a018652bb17ebafafba6753bc/aos-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "922ee4e49d3c5db50897f31ea8bf306d49c8c83a9dfb024e8a46fbe92d432945",
          "md5": "d79a7baa168d1a0718aed1875e23be2e",
          "sha256": "e97168ff78d6e236014f172cc123e3de47135caaefefdc7ab5c309159f68ade3"
        },
        "downloads": -1,
        "filename": "aos-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d79a7baa168d1a0718aed1875e23be2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9966,
        "upload_time": "2020-01-22T07:28:53",
        "upload_time_iso_8601": "2020-01-22T07:28:53.404484Z",
        "url": "https://files.pythonhosted.org/packages/92/2e/e4e49d3c5db50897f31ea8bf306d49c8c83a9dfb024e8a46fbe92d432945/aos-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "492420b75b0e9f83eb8979a6da88d9f431bda91510cc48850f7628542fbedc7e",
          "md5": "0262b2d24eeda72386790776b61c5d41",
          "sha256": "83d49542515dbe6d459d628c696341af40daf7225852097b0a878c6f9be87585"
        },
        "downloads": -1,
        "filename": "aos-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0262b2d24eeda72386790776b61c5d41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19339,
        "upload_time": "2020-02-19T09:27:23",
        "upload_time_iso_8601": "2020-02-19T09:27:23.838491Z",
        "url": "https://files.pythonhosted.org/packages/49/24/20b75b0e9f83eb8979a6da88d9f431bda91510cc48850f7628542fbedc7e/aos-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f44f8b738b3e2813e02d5329da53c0d21c4102de7eb641b83597cc5d1a55852",
          "md5": "a2288ee23fba0132c8c8f83def09c330",
          "sha256": "f48118afe612e7b34a78dc333e0748a956161b5c234dac535e876fb211fa4369"
        },
        "downloads": -1,
        "filename": "aos-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2288ee23fba0132c8c8f83def09c330",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12903,
        "upload_time": "2020-02-19T09:27:25",
        "upload_time_iso_8601": "2020-02-19T09:27:25.779930Z",
        "url": "https://files.pythonhosted.org/packages/5f/44/f8b738b3e2813e02d5329da53c0d21c4102de7eb641b83597cc5d1a55852/aos-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c94146b882149a9319f9350303a041bd9ccef49283cd09e51f7dd88ae3fea7",
          "md5": "2ee8a50a4dd19f9b9e452effc8e665c5",
          "sha256": "11716e05ca4fa3c841437837fd42ded3a203db404c0df7b046e1aba773af9c5e"
        },
        "downloads": -1,
        "filename": "aos-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ee8a50a4dd19f9b9e452effc8e665c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22852,
        "upload_time": "2020-04-18T10:14:28",
        "upload_time_iso_8601": "2020-04-18T10:14:28.823937Z",
        "url": "https://files.pythonhosted.org/packages/92/c9/4146b882149a9319f9350303a041bd9ccef49283cd09e51f7dd88ae3fea7/aos-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32dfd00187838460d30ddb3b1cd59da357578d4cfb8f65b4b7227861d8783db3",
          "md5": "d57c00ad77c85a15d86860c5109e6564",
          "sha256": "791058728ca3eddb83ace0b6d30557c7cb466de7ac3ab76bdd45dcf63a02189b"
        },
        "downloads": -1,
        "filename": "aos-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d57c00ad77c85a15d86860c5109e6564",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15396,
        "upload_time": "2020-04-18T10:14:30",
        "upload_time_iso_8601": "2020-04-18T10:14:30.685579Z",
        "url": "https://files.pythonhosted.org/packages/32/df/d00187838460d30ddb3b1cd59da357578d4cfb8f65b4b7227861d8783db3/aos-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92c94146b882149a9319f9350303a041bd9ccef49283cd09e51f7dd88ae3fea7",
        "md5": "2ee8a50a4dd19f9b9e452effc8e665c5",
        "sha256": "11716e05ca4fa3c841437837fd42ded3a203db404c0df7b046e1aba773af9c5e"
      },
      "downloads": -1,
      "filename": "aos-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ee8a50a4dd19f9b9e452effc8e665c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22852,
      "upload_time": "2020-04-18T10:14:28",
      "upload_time_iso_8601": "2020-04-18T10:14:28.823937Z",
      "url": "https://files.pythonhosted.org/packages/92/c9/4146b882149a9319f9350303a041bd9ccef49283cd09e51f7dd88ae3fea7/aos-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32dfd00187838460d30ddb3b1cd59da357578d4cfb8f65b4b7227861d8783db3",
        "md5": "d57c00ad77c85a15d86860c5109e6564",
        "sha256": "791058728ca3eddb83ace0b6d30557c7cb466de7ac3ab76bdd45dcf63a02189b"
      },
      "downloads": -1,
      "filename": "aos-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d57c00ad77c85a15d86860c5109e6564",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15396,
      "upload_time": "2020-04-18T10:14:30",
      "upload_time_iso_8601": "2020-04-18T10:14:30.685579Z",
      "url": "https://files.pythonhosted.org/packages/32/df/d00187838460d30ddb3b1cd59da357578d4cfb8f65b4b7227861d8783db3/aos-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}