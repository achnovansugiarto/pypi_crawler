{
  "info": {
    "author": "G. de Hooge and J. Oude Vrielink",
    "author_email": "guidodehooge@live.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "====\nIRMA\n====\n\nIRMA (I Reveal My Attributes) is an attribute-based identity management system. This package provides\nIRMA user authentication, authorisation and attribute disclosure for Django. Please visit https://irma.app \nfor more information about IRMA. Below you will find a quick start and detailed documentation about the different IRMA functionalities.\n\n-----------\nQuick start\n-----------\n\nInstall using pip the django-irma package:\n\n.. code-block:: bash\n    \n    pip install django-irma\n\nAdd \"irma.apps.IrmaConfig\" to your INSTALLED_APPS setting:\n\n.. code-block:: python3\n\n    INSTALLED_APPS = [\n        ...\n        'irma.apps.IrmaConfig',\n    ]\n\nAdd \"django_user_agents.middleware.UserAgentMiddleware\" to your MIDDLEWARE in settings.py:\n\n.. code-block:: python3\n\n    MIDDLEWARE = [\n        ...\n        'django_user_agents.middleware.UserAgentMiddleware', \n    ]\n\nAdd \"irma.irma_auth_backend.IrmaAuthenticationBackend\" to your AUTHENTICATION_BACKENDS in setting.py:\n\n.. code-block:: python3\n\n    AUTHENTICATION_BACKENDS = [\n        ...\n        'irma.irma_auth_backend.IrmaAuthenticationBackend',\n    ]\n\nAdd the following three IRMA variables to settings.py:\n\n.. code-block:: python3\n\n    IRMA_SERVER_URL = 'https://www.exampleirmaserverurl.com'\n    IRMA_SERVER_PORT = '8088'\n    IRMA_SRVER_AUTHENTICATION_TOKEN = os.environ.get('IRMA_SERVER_TOKEN')\n\n*Note*: fill in your own IRMA server URL and port. It is recommended to store \nthe IRMA server token in your environment.\n\nInclude the irma URLconf in your project urls.py:\n\n.. code-block:: python3\n\n    path('irma/', include('irma.urls')),\n\nAdd the following line to your base.html to allow the IRMA modal in your project:\n\n.. code-block:: django\n\n    {% include \"irma/modal.html\" %}\n\nRun the following command to test if the package is installed correctly:\n\n.. code-block:: bash\n\n    python3 manage.py test irma\n\nThe django-irma package offers three functionalities (IRMA user authentication, IRMA authorisation \nand attribute disclosure), which can be implemented independently. The following sections describe \nhow to implement each functionality. If you are interested in one specific functionality, you can \ngo directly to the respective section without reading the other functionalities. In all \ncases, you need to set up an IRMA server. See the IRMA documentation on how to set up an IRMA \nserver. The recommended IRMA server configuration for this Django package can be found at the end\nof this page.\n\n------------------------\nIRMA user authentication\n------------------------\nNote: before implementing IRMA user authentication, you must have a Django \nauthentication system in place. For more information, see https://docs.djangoproject.com/en/4.0/topics/auth/.\nThe IRMA user authentication setup consists of registering IRMA users and authenticating IRMA \nusers. IRMA user authentication uses the Django User objects with the set_unusable_password() \nmethod. The authentication attribute value corresponds with the username of the User object.\n\nIRMA register\n.............\n\nAdd an IRMA register button to your project. Set data-toggle to 'modal' and data-target to '#IRMAmodal'.\nSet onclick to the start_irma_session() function. This function takes three string arguments:\n\n#. The IRMA session type, in this case 'IRMA_register'.\n#. The URL path of the view you want to redirect to after successful registration.\n#. The attribute's identifier you want to use for registration/authentication.\n\nFor a list of attribute identifiers, go to https://privacybydesign.foundation/attribute-index/en/. \nBelow you find a code example of a button:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_register','registration_done', 'pbdf.sidn-pbdf.irma.pseudonym')\">\n        Register with IRMA\n    </button>\n\nYou can provide a second and third attribute identifier. The identifiers should be separated with an ampersand symbol. \nWhen you provide more than one attribute identifier, the first attribute will be used as the username for the IRMA user. \nThe second attribute will be stored as the first name and the third attribute will be stored as the last name in the Django user database. \nFor example::\n\n    irma−demo.sidn−pbdf.email.email&pbdf.gemeente.personalData.initials&pbdf.gemeente.personalData.surname\n\n**Important note**: your first attribute must be unique for every IRMA user. Examples of unique attributes are email \naddress (pbdf.pbdf.email.email) or the pseudonym attribute (pbdf.sidn-pbdf.irma.pseudonym). We suggest you use one of \nthose two attributes as a username for your project when new to IRMA. The advantage of using the pseudonym\nattribute is that every IRMA user has the attribute installed upon installating the IRMA app. Also, the pseudonym \nattribute is highly privacy friendly. More experienced IRMA users could choose different attributes as a username.\n\nTypically you can redirect to any view you like. The view you redirect to contains in the request.session dictionary a key 'activity_result' \nthat can be equal to 'SUCCESS' or 'FAILURE'. This attribute tells you if the IRMA register session was successful or not and can help you \nto determine what you want to show to the user. Suppose you provided a second and third argument, the request.session dictionary keys 'firstname' \nand 'lastname' are also present with IRMA attribute values. Below you find an example of a view after an IRMA registration session:\n\n.. code-block:: python3\n\n    def registration_done(request):\n        result = json.loads(request.session['session_result']) \n        parameter1 = request.session['username']\n        parameter2 = request.session['firstname']+' '+request.session['lastname']\n        if result ['activity_result'] == 'SUCCESS':\n            return render(request, 'blog/registration_success.html', {'parameter1' : parameter1 , 'parameter2' : parameter2})\n        return render(request, 'blog/registration_failure.html', {'parameter1' : parameter1 , 'parameter2' : parameter2})\n\nIRMA login\n..........\n\nAdd an IRMA login button to your project. Set data-toggle to 'modal' and data-target to '#IRMAmodal'.\nSet onclick to start_irma_session() function. This function takes three string arguments:\n\n#. The IRMA session type, in this case 'IRMA_authenticate'.\n#. The URL path of the view you want to redirect to after successful IRMA authentication.\n#. The attribute's identifier used during the IRMA registration process.\n\nBelow you find a code example of a button:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_authenticate','authentication_done', 'pbdf.sidn-pbdf.irma.pseudonym')\">\n        IRMA Login\n    </button>\n\nA second and third attribute can be requested in the same format as in the registration \nsection. The view you redirect to has stored the result of the session in \nrequest.session['session_result']. The session result contains a dictionary with the \n'activity_result' to indicate if the authentication was successful ('SUCCESS') or \nnot ('FAILURE'). Below you find an example of a view which is redirected to after \nan IRMA authentication session:\n\n.. code-block:: python3\n\n    def authentication_done(request):\n        result = json.loads(request.session['session_result']) \n        if result['activity_result'] == 'SUCCESS':\n            parameter1 = request.user.username\n            parameter2 = request.user.first_name+' '+request.user.last_name\n            return render(request, 'blog/authentication_success.html', {'parameter1' : parameter1 ,'parameter2' : parameter2})\n        return render(request, 'blog/authentication_failure.html', {})\n\nIf the IRMA authentication session was successful, the IRMA user is now associated \nwith its corresponding User object in the Django user database.\n\n------------------\nIRMA authorisation\n------------------\nIRMA can provide access control to views by verifying the attributes of an IRMA\nuser. If the IRMA user owns the requested attribute value(s), the\nuser can access the view. If the user cannot disclose the requested attribute\nvalue(s), the user will be shown a message and is not forwarded to the requested\nview. IRMA stores authorisation details in a Django session. If the session\nis destroyed, the IRMA authorisation details are also destroyed. This package\nremoves a session at browser closure. However, some browsers automatically\nrebuilt a session when being reopened. In such case, the IRMA authorisation \ndetails are not removed during browser closure. Because this package relies \nheavily on Django sessions, you should set the SESSION_COOKIE_SECURE in \nsetting.py to True if you have an SSL-enabled site.\n\nAdd a button to your project. Set data-toggle to 'modal' and data-target to '#IRMAmodal'.\nSet onclick to start_irma_session() function. This function takes four string arguments:\n\n#. The IRMA session type, in this case 'IRMA_authorise'.\n#. The URL path of the view you want to redirect to after a successful IRMA authorisation session.\n#. The identifier of the required attribute(s).\n#. The attribute value(s) for successful IRMA authorisation.\n\nIf more than one attribute is requested, attribute identifiers must be concatenated \nwith an ampersand (&). When multiple attributes are requested, multiple attribute \nvalues must be given in the same order as the attributes are requested.\nBelow you find a code example:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\" btn btn−primary\" data−toggle=\"modal\" data−target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_authorise', 'universitystudent',\n     'irma−demo.RU.studentCard.university&irma−demo.RU.studentCard.level', 'Open Universiteit&Bachelor')\">\n        Authorise with IRMA\n    </button>\n\nIn this example, students will pass the IRMA authorisation when their irma−demo.RU.studentCard.university\nattribute value equals 'Open University' and their attribute irma−demo.RU.studentCard.level equals\n'Bachelor'. The syntax of the fourth argument must precisely match the requested attribute value.\nAfter adding the button for IRMA users to prove specific properties, IRMA authorisation \nworks with the @irma_authorisation_required decorator. The decorator takes three arguments:\n\n#. A string of attributes (separated with an ampersand if multiple attributes are required) must be verified before access is given to the view.\n#. A string that is shown as a message to the user if the user tries to access a view for which it has no IRMA access permission.\n#. A string that is shown if the user passes the IRMA authorisation session.\n\nBelow you find an example:\n\n.. code-block:: python3\n\n    @irma_authorisation_required('irma-demo.RU.studentCard.university',settings.UNIVERSITY_CHECK_REQUIRED,settings.UNIVERSITY_CHECK_PASSED)\n\nThe decorator should be placed above a function-based view in views.py for\nwhich you want to use IRMA authorisation. In this example, only students\nwith a university attribute value specified in the button's\nonclick can access the view. The string messages can be passed as a settings.py variable \n(as in this example) or can be passed as a string argument to the decorator.\nYou can specify the following strings for IRMA authorisation messages in settings.py::\n\n    AUTHORISATION_FAILURE: string for the message when a user did not pass the IRMA authorisation session.\n    AUTHORISATION_PARTIAL: string for the message when a user only possesses a subgroup of the required authorisation attributes.\n    AUTHORISATION_REMOVED: string for the message when previous authorisations are cancelled.\n\n*Known limitations*: IRMA authorisation is only available for function-based views. No \nmixin is available yet for class-based views.\nIRMA Authorisation cannot handle attributes used for multiple views but require\ndifferent attribute values for different views. For example, you cannot make a view for \nonly Open Universiteit students (irma−demo.RU.studentCard.university attribute value \nshould equal 'Open Universiteit') and a view for 'UVA' students only \n(irma−demo.RU.studentCard.university attribute value should equal 'UVA'). The \nauthorisation allows only to verify one attribute value for all views.\n\n-------------------------\nIRMA attribute disclosure\n-------------------------\nIt is possible to request attribute values from IRMA users. For example, if you want \nto send a package to an IRMA user, you can request the IRMA user's address or phone number.\nAdd a button to your project. Set data-toggle to 'modal' and data-target to '#IRMAmodal'.\nSet onclick to start_irma_session() function. This function takes three arguments:\n\n#. The IRMA session type, in this case 'IRMA_disclose'.\n#. The URL path of the view you want to redirect to after a successful IRMA disclosure session.\n#. The attribute's identifier that you want to receive.\n\nBelow you find an example of a button that requests for an IRMA user's mobile number:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_disclose','disclosure_start', 'pbdf.sidn-pbdf.mobilenumber.mobilenumber')\">\n        Complete form with IRMA\n    </button>\n\nThe view to which IRMA redirects the user after a disclosure session stores the requested \nattributes with the attribute values in request.session['disclose_attributes']. The \ndictionary key 'disclose_attributes' contains a dictionary as a value. The dictionary as a\nvalue contains all requested attributes identifiers as a key and attributes values as \na value of the dictionary. Below we give you an example of how a view could handle \nthe disclosed attributes:\n\n.. code-block:: python3\n\n    def disclosure_start(request):\n        street = ''\n        mobilenumber = ''\n        if 'disclosed_attributes' in request.session:\n            if 'pbdf.gemeente.address.street' in request.session['disclosed_attributes']:\n                street = request.session['disclosed_attributes']['pbdf.gemeente.address.street']\n\n            if 'pbdf.sidn-pbdf.mobilenumber.mobilenumber' in request.session['disclosed_attributes']:\n                mobilenumber = request.session['disclosed_attributes']['pbdf.sidn-pbdf.mobilenumber.mobilenumber']\n\n        return render(request, 'blog/disclosure_start.html',{'street': street, 'mobilenumber': mobilenumber})\n\n\n-------------------------\nIRMA server configuration\n-------------------------\nThis Django package is only tested on one specific IRMA server configuration. With \ndifferent IRMA server configurations, you might experience unexpected behaviour in \nDjango. The IRMA server configuration used for this Django package: \n\n.. code-block:: json\n\n    {\n        \"schemes_path\": \"/etc/irmaserver\",\n        \"schemes_assets_path\": \"\",\n        \"disable_schemes_update\": false,\n        \"schemes_update\": 60,\n        \"privkeys\": \"\",\n        \"url\": \"https://www.example.com:8088\",\n        \"disable_tls\": false,\n        \"email\": \"example@email.com\",\n        \"enable_sse\": false,\n        \"store_type\": \"\",\n        \"redis_settings\": null,\n        \"static_sessions\": null,\n        \"max_session_lifetime\": 5,\n        \"jwt_issuer\": \"irmaserver\",\n        \"jwt_privkey\": \"\",\n        \"jwt_privkey_file\": \"\",\n        \"allow_unsigned_callbacks\": false,\n        \"augment_client_return_url\": false,\n        \"verbose\": 1,\n        \"quiet\": false,\n        \"log_json\": false,\n        \"revocation_db_str\": \"\",\n        \"revocation_db_type\": \"\",\n        \"revocation_settings\": {},\n        \"production\": true,\n        \"disclose_perms\": [\"*\"],\n        \"sign_perms\": [\"*\"],\n        \"issue_perms\": [\"*\"],\n        \"revoke_perms\": [],\n        \"skip_private_keys_check\": false,\n        \"no_auth\": false,\n        \"listen_addr\": \"\",\n        \"port\": 8088,\n        \"api_prefix\": \"/\",\n        \"tls_cert\": \"\",\n        \"tls_cert_file\": \"/etc/letsencrypt/live/www.example.com/fullchain.pem\",\n        \"tls_privkey\": \"\",\n        \"tls_privkey_file\": \"/etc/letsencrypt/live/www.example.com/privkey.pem\",\n        \"client_port\": 0,\n        \"client_listen_addr\": \"\",\n        \"client_tls_cert\": \"\",\n        \"client_tls_cert_file\": \"\",\n        \"client_tls_privkey\": \"\",\n        \"client_tls_privkey_file\": \"\",\n        \"requestors\": {\"<djangowebsite>\": {\"auth_method\": \"token\",\"key\": \"<irma_server_token>\"}},\n        \"max_request_age\": 300,\n        \"static_path\": \"\",\n        \"static_prefix\": \"/\"\n    }\n\n---------------\nUndo activities\n---------------\n\nAll activities (IRMA register, authenticate, authorise and disclose) can be undone. \nThis can be handy when testing a website. For example, you want to log in and \nlog out multiple times without closing the browser to delete the session.\nTo de-register an IRMA user from the Django user database, add the following \nbutton (should only be visible for authenticated IRMA users):\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_unregister','unregistration_done')\">\n        Remove my user profile\n    </button>\n\nTo log out an IRMA user add the following button (should only be visible for authenticated IRMA users):\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_unauthenticate','unauthentication_done')\">\n        Log out with IRMA\n    </button>\n\nTo clear all IRMA authorisation add the following button:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_clear_authorisations','display_authorisations')\">\n        Clear authorisation with IRMA\n    </button>\n\nTo clear all disclosed attribute value add the following button:\n\n.. code-block:: html\n\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#IRMAmodal\" \n     onclick=\"start_irma_session('IRMA_clear_disclose','display_disclosed')\">\n        Clear personal data with IRMA\n    </button>\n\n---------\nMore info\n---------\nIRMA technical documentation is avaialable on https://irma.app/docs/what-is-irma/.\nA demo website is available on https://www.irmadjangoapi.nl. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gdhgit008/django-irma",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-irma",
    "package_url": "https://pypi.org/project/django-irma/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-irma/",
    "project_urls": {
      "Homepage": "https://github.com/gdhgit008/django-irma"
    },
    "release_url": "https://pypi.org/project/django-irma/0.17/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Django app for IRMA functionalities.",
    "version": "0.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13891888,
  "releases": {
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc7d3fea4043180e08b5e42463b2187ebc78b5be541ab6e96972f62b6669a19d",
          "md5": "18992eff26b6006b732e3cff1d7bfce6",
          "sha256": "1622702756d2ae24f6e6bdb97e98b2da5518838961205e753efade99b0349502"
        },
        "downloads": -1,
        "filename": "django-irma-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "18992eff26b6006b732e3cff1d7bfce6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 67237,
        "upload_time": "2022-05-18T13:03:33",
        "upload_time_iso_8601": "2022-05-18T13:03:33.141493Z",
        "url": "https://files.pythonhosted.org/packages/fc/7d/3fea4043180e08b5e42463b2187ebc78b5be541ab6e96972f62b6669a19d/django-irma-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d862df5af7a69d34d2740c128f8b77d2eb91c46c3d65e9e0dd55dc29039e332f",
          "md5": "27b502c372c82452a2d5b46f55f91a6e",
          "sha256": "6397215dde6ea044a9d275fc2905f43ab019799c53a78496b0c22790eccb2592"
        },
        "downloads": -1,
        "filename": "django-irma-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "27b502c372c82452a2d5b46f55f91a6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72640,
        "upload_time": "2022-05-22T10:02:07",
        "upload_time_iso_8601": "2022-05-22T10:02:07.780625Z",
        "url": "https://files.pythonhosted.org/packages/d8/62/df5af7a69d34d2740c128f8b77d2eb91c46c3d65e9e0dd55dc29039e332f/django-irma-0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfafe60bec9cc46b7cad928524873858355846f7b4dfde03bce0bc077cdddb87",
          "md5": "fa72612bf62d84366d57aa5ae27d2c79",
          "sha256": "d999c369042809f36cecc7d04cdd934c2be990853fe23938771d35cf08a02c64"
        },
        "downloads": -1,
        "filename": "django-irma-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "fa72612bf62d84366d57aa5ae27d2c79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72592,
        "upload_time": "2022-05-22T10:42:34",
        "upload_time_iso_8601": "2022-05-22T10:42:34.440364Z",
        "url": "https://files.pythonhosted.org/packages/cf/af/e60bec9cc46b7cad928524873858355846f7b4dfde03bce0bc077cdddb87/django-irma-0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d7fed95bfb50bf79800d47f497b292883417112595d0a07fec2e6a08859eb68",
          "md5": "1cac3aafb8ffeb9d11b0c9ba2d75c9b2",
          "sha256": "99d8a7494dbd576d84878594d4e140b8f2963e8f237276e5062871d771898e29"
        },
        "downloads": -1,
        "filename": "django-irma-0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "1cac3aafb8ffeb9d11b0c9ba2d75c9b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72594,
        "upload_time": "2022-05-22T10:48:25",
        "upload_time_iso_8601": "2022-05-22T10:48:25.385063Z",
        "url": "https://files.pythonhosted.org/packages/8d/7f/ed95bfb50bf79800d47f497b292883417112595d0a07fec2e6a08859eb68/django-irma-0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf6ccf91bc85b2a9a47d70c93dc95275a507b1e61305fd0e18c0f4bfbf6bd017",
          "md5": "af88a36c1db35acd04bfe7418ae90362",
          "sha256": "5906edc223332484f33f6d9ab630535dcd08a78e409b1a6ffb57a37714b15f5f"
        },
        "downloads": -1,
        "filename": "django-irma-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "af88a36c1db35acd04bfe7418ae90362",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72485,
        "upload_time": "2022-05-22T10:52:10",
        "upload_time_iso_8601": "2022-05-22T10:52:10.593433Z",
        "url": "https://files.pythonhosted.org/packages/cf/6c/cf91bc85b2a9a47d70c93dc95275a507b1e61305fd0e18c0f4bfbf6bd017/django-irma-0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf6ccf91bc85b2a9a47d70c93dc95275a507b1e61305fd0e18c0f4bfbf6bd017",
        "md5": "af88a36c1db35acd04bfe7418ae90362",
        "sha256": "5906edc223332484f33f6d9ab630535dcd08a78e409b1a6ffb57a37714b15f5f"
      },
      "downloads": -1,
      "filename": "django-irma-0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "af88a36c1db35acd04bfe7418ae90362",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 72485,
      "upload_time": "2022-05-22T10:52:10",
      "upload_time_iso_8601": "2022-05-22T10:52:10.593433Z",
      "url": "https://files.pythonhosted.org/packages/cf/6c/cf91bc85b2a9a47d70c93dc95275a507b1e61305fd0e18c0f4bfbf6bd017/django-irma-0.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}