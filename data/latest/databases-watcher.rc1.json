{
  "info": {
    "author": "Daniel Garcia",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python Database Watcher Library\n\n![License](https://img.shields.io/badge/License-Apache2-SUCCESS)\n![Pypi](https://img.shields.io/pypi/v/databases_watcher)\n![Python Versions](https://img.shields.io/badge/Python-3.8%20%7C%203.9%20%7C%203.10-blue)\n\nIn a nutshell ``Python Database Watcher Library`` is a small library with a set of utilities to help you to monitor and watch the database changes.\n\n# Install\n\n```bash\n> pip install databases_watcher\n```\n\n# Supported databases\n\n## Redis\n\nSupported modes:\n\n- **Queue watch mode**: `redis://[[user]:[password]]@host:port/?db=[INT]&queue=[STRING]`\n- **Pub/Sub mode**: `redis+pubsub://[[user]:[password]]@host:port/?db=[INT]&channel=[STRING]`\n- **Changes watch mode** (TODO): `redis+watch://[[user]:[password]]@host:port/?db=[INT]&queue=[STRING]`\n\n> TODO: improve watch mode\n\n# Usage examples\n\n## Redis\n\n### Queue watch mode (Sync mode)\n\n```python\nfrom databases_watcher import connect_database\n\ndef main():\n    redis_watch = connect_database(\"redis://localhost:6501/?db=0&queue=default\")\n\n    redis_watch.send_message(\"hello!\")\n    redis_watch.send_json_message({\"message\": \"hello!\"})\n\n    print(next(redis_watch.read_messages()))\n    print(next(redis_watch.read_json_messages()))\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### Queue watch mode (Async mode)\n\n```python\nimport asyncio\n\nfrom databases_watcher import connect_database_async\n\nasync def main():\n    redis_watch = await connect_database_async(\"redis://localhost:6501/?db=0&queue=default\")\n\n    await redis_watch.send_message(\"hello!\")\n    await redis_watch.send_json_message({\"message\": \"hello!\"})\n\n    async for message in redis_watch.read_messages():\n        print(message)\n        break\n\n    async for message in redis_watch.read_json_messages():\n        print(message)\n        break\n\n\nif __name__ == '__main__':\n\n    asyncio.run(main())\n\n```\n\n### Pub/Sub watch mode (Sync mode)\n\n```python\nimport time\nimport threading\n\nfrom databases_watcher import connect_database\n\nCONNECTION_STRING = \"redis+pubsub://localhost:6501/?db=0&channel=default\"\n\ndef background_read_pubsub():\n    redis_watch = connect_database(CONNECTION_STRING)\n\n    print(next(redis_watch.read_messages()))\n    print(next(redis_watch.read_json_messages()))\n\n\ndef main():\n    redis_watch = connect_database(CONNECTION_STRING)\n\n    t = threading.Thread(target=background_read_pubsub)\n    t.start()\n\n    time.sleep(2)\n\n    redis_watch.send_message(\"hello!\")\n    redis_watch.send_json_message({\"message\": \"hello!\"})\n\n    t.join()\n\nif __name__ == '__main__':\n    main()\n\n```\n\n### Pub/Sub watch mode (Async mode)\n\n```python\nimport asyncio\n\nfrom databases_watcher import connect_database_async\n\nCONNECTION_STRING = \"redis+pubsub://localhost:6501/?db=0&channel=default\"\n\nasync def background_read_pubsub():\n    redis_watch = await connect_database_async(CONNECTION_STRING)\n\n    async for message in redis_watch.read_messages():\n        print(message)\n        break\n\n    async for message in redis_watch.read_json_messages():\n        print(message)\n        break\n\nasync def main():\n    redis_watch = await connect_database_async(CONNECTION_STRING)\n\n    asyncio.create_task(background_read_pubsub())\n    await asyncio.sleep(2)\n\n    await redis_watch.send_message(\"hello!\")\n    await redis_watch.send_json_message({\"message\": \"hello!\"})\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n# License\n\nDictionary Search is Open Source and available under the [MIT](https://github.com/cr0hn/python-performance-tools/blob/main/LICENSE).\n\n# Contributions\n\nContributions are very welcome. See [CONTRIBUTING.md](https://github.com/cr0hn/python-performance-tools/blob/main/CONTRIBUTING.md) or skim existing tickets to see where you could help out.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cr0hn/python-database-watcher",
    "keywords": "",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "Daniel Garcia (cr0hn)",
    "maintainer_email": "cr0hn@cr0hn.com",
    "name": "databases-watcher",
    "package_url": "https://pypi.org/project/databases-watcher/",
    "platform": null,
    "project_url": "https://pypi.org/project/databases-watcher/",
    "project_urls": {
      "Homepage": "https://github.com/cr0hn/python-database-watcher"
    },
    "release_url": "https://pypi.org/project/databases-watcher/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Multi database watcher for changes on them",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14612312,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d777a294e416fc30ff506132f01a8d5103d2ae1902b24a784a478cc8e400f61",
          "md5": "63d1f342d61d4fde9e07d8694511861a",
          "sha256": "8565ccfd15292f3d800941bd2173417d1f1a4208aa6b3d239810ab5aaf0df284"
        },
        "downloads": -1,
        "filename": "databases_watcher-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63d1f342d61d4fde9e07d8694511861a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7342,
        "upload_time": "2022-08-01T12:08:38",
        "upload_time_iso_8601": "2022-08-01T12:08:38.154603Z",
        "url": "https://files.pythonhosted.org/packages/0d/77/7a294e416fc30ff506132f01a8d5103d2ae1902b24a784a478cc8e400f61/databases_watcher-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d777a294e416fc30ff506132f01a8d5103d2ae1902b24a784a478cc8e400f61",
        "md5": "63d1f342d61d4fde9e07d8694511861a",
        "sha256": "8565ccfd15292f3d800941bd2173417d1f1a4208aa6b3d239810ab5aaf0df284"
      },
      "downloads": -1,
      "filename": "databases_watcher-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "63d1f342d61d4fde9e07d8694511861a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7342,
      "upload_time": "2022-08-01T12:08:38",
      "upload_time_iso_8601": "2022-08-01T12:08:38.154603Z",
      "url": "https://files.pythonhosted.org/packages/0d/77/7a294e416fc30ff506132f01a8d5103d2ae1902b24a784a478cc8e400f61/databases_watcher-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}