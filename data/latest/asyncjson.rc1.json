{
  "info": {
    "author": "Igor Derkach",
    "author_email": "gosha753951@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# asyncjson\n\nAsynchronous json library with support of nested awaitable objects in data.\n\nThe most important features are supporting async functions and async generators on any level of\ndata structure, even for dict keys.\n\nNow the library contains async version of `json.dumps` function. This library was made to help\nstream the heavy json structures without blocking the event loop.\n\nBe aware, this is alpha version of library.\n\n## Installing\n\n`pip install asyncjson`\n\n## Example\n\n```python\nimport sys\nimport asyncio\nimport random\nimport string\nimport asyncjson\n\nasync def random_number():\n    await asyncio.sleep(random.random())\n    return random.randrange(0, 100)\n\nasync def random_strings():\n    for i in range(random.randint(0, 10)):\n        await asyncio.sleep(random.random())\n        yield ''.join(random.choice(string.ascii_letters) for _ in range(random.randint(1, 10)))\n\nasync def run():\n    obj = {\n        'dictkey': {\n            'list': [1, '2', 3.0],\n            'random strings': random_strings(),\n            'random number': random_number(),\n            random_strings(): \"joined random strings in key\",\n            random_number(): \"random number in key\"\n        },\n        'another random number': random_number(),\n        'awaitable objects in list': [\"sample\", random_number(), random_strings(), [], {}],\n        'intkey': 123,\n        'stringkey': \"qwer\",\n    }\n    async for i in await asyncjson.dumpgen(obj):\n        sys.stdout.write(i)\n        sys.stdout.flush()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(run())\n```\n\nWill give the result which will appear piece by piece because of sleeps added for\ndemonstration purposes:\n\n```json\n{\n \"dictkey\": {\n  \"list\": [\n   1, \n   \"2\", \n   3.0\n  ], \n  \"random strings\": [\n   \"IuaNSw\"\n  ], \n  \"random number\": 65, \n  \"ZuuBZyEMYTtqyOzYoILOZXCgnTYYsu\": \"joined random strings in key\", \n  43: \"random number in key\"\n }, \n \"another random number\": 85, \n \"awaitable objects in list\": [\n  \"sample\", \n  16, \n  [\n   \"wQ\", \n   \"Jp\", \n   \"xDfTNZCUv\"\n  ], \n  [], \n  {}\n ], \n \"intkey\": 123, \n \"stringkey\": \"qwer\"\n}\n```\n\n## To be done\n\n- [ ] Implement async versions of `dump`, `loads`, `load` functions\n- [ ] Implement async encoder/decoder on C in order to increase performance\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bdragon300/asyncjson",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncjson",
    "package_url": "https://pypi.org/project/asyncjson/",
    "platform": null,
    "project_url": "https://pypi.org/project/asyncjson/",
    "project_urls": {
      "Homepage": "https://github.com/bdragon300/asyncjson"
    },
    "release_url": "https://pypi.org/project/asyncjson/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Asynchronous json library with support of nested awaitable objects in data",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13397221,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb378663188da195edde799ef05fe0ab9b00b7d2be03ec20530b74fb8d717e08",
          "md5": "fc4bac711fe11117e1b64b9a5bfad6f5",
          "sha256": "097772d34d0c43e6f30733a8e1491df9b664b45b59b7909e9d92bbe7170f2cff"
        },
        "downloads": -1,
        "filename": "asyncjson-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc4bac711fe11117e1b64b9a5bfad6f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12354,
        "upload_time": "2022-04-04T07:54:32",
        "upload_time_iso_8601": "2022-04-04T07:54:32.856127Z",
        "url": "https://files.pythonhosted.org/packages/bb/37/8663188da195edde799ef05fe0ab9b00b7d2be03ec20530b74fb8d717e08/asyncjson-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb378663188da195edde799ef05fe0ab9b00b7d2be03ec20530b74fb8d717e08",
        "md5": "fc4bac711fe11117e1b64b9a5bfad6f5",
        "sha256": "097772d34d0c43e6f30733a8e1491df9b664b45b59b7909e9d92bbe7170f2cff"
      },
      "downloads": -1,
      "filename": "asyncjson-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fc4bac711fe11117e1b64b9a5bfad6f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12354,
      "upload_time": "2022-04-04T07:54:32",
      "upload_time_iso_8601": "2022-04-04T07:54:32.856127Z",
      "url": "https://files.pythonhosted.org/packages/bb/37/8663188da195edde799ef05fe0ab9b00b7d2be03ec20530b74fb8d717e08/asyncjson-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}