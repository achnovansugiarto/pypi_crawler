{
  "info": {
    "author": "Prisdha Dharma",
    "author_email": "prisdha@immersa.co",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# JWT\n\nAn implementation of JSON Web Token.\n\n# Install\n\n```bash\n$ npm install immersa-jwt\n```\n\n# Usage\n\nInstantiate JWT object\n\n```\nimport os\nimport jwt\n\n# secret must be 32-character long\nsecret = os.environ.get(\"IMMERSA_TOKEN_SECRET\")\n\n# expiration denotes the number of seconds the token is valid\nexpiration = os.environ.get(\"IMMERSA_TOKEN_EXPIRATION\")\n\n# if expiration is ommitted, default is set to 24 hours\nJWT = jwt.JWT(secret, expiration)\n```\n\nGiven a session which represents dictionary, JWT can be generated by:\n\n```\nsession = {\n    \"id\": \"61c24785bd77c10012d58199\",\n    \"displayName\": \"John Smoth\",\n    \"email\": \"jsmith@immersa.co\",\n    \"admin\": True,\n}\ntoken = JWT.create-token(session)\n```\n\nThe token can then be passed along HTTP request apart of its header. This token can be validated on the server-side by calling:\n\n```\nsession = JWT.session(token)\n```\n\nwhich, in turn, extract the session which was used to the tokken earlier. In case expired or invalid token,  `JWT.session(token)` will raise `InvalidTokenError`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/immersa-co/jwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "immersa-jwt",
    "package_url": "https://pypi.org/project/immersa-jwt/",
    "platform": "",
    "project_url": "https://pypi.org/project/immersa-jwt/",
    "project_urls": {
      "Homepage": "https://github.com/immersa-co/jwt"
    },
    "release_url": "https://pypi.org/project/immersa-jwt/1.0.0/",
    "requires_dist": [
      "python-jose"
    ],
    "requires_python": "",
    "summary": "A library Generate JWT, validate, and extract session info from JWT",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12979179,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc4b3e71922df60ef7ba13f1823a743192aeefb7e2a0dec0a5d9cb0e2f903076",
          "md5": "d4c11022a89c4dd0701a5e796ac388f9",
          "sha256": "f34e0b9d5c38ce00b70b4fc292db1760d13686beb064a5cca48583c6236af90b"
        },
        "downloads": -1,
        "filename": "immersa_jwt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4c11022a89c4dd0701a5e796ac388f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5071,
        "upload_time": "2022-02-23T04:31:18",
        "upload_time_iso_8601": "2022-02-23T04:31:18.857676Z",
        "url": "https://files.pythonhosted.org/packages/fc/4b/3e71922df60ef7ba13f1823a743192aeefb7e2a0dec0a5d9cb0e2f903076/immersa_jwt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1c528fd311dc34a19c0c3055c4f5fd1669cf76d21b2e3eb38d3a3f04e00321a",
          "md5": "6700f5596af1405cc07184268eef45ed",
          "sha256": "c6da805d34e949b36ece2fab17855628af452134212cd54cb1b94b90db9fb1d9"
        },
        "downloads": -1,
        "filename": "immersa-jwt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6700f5596af1405cc07184268eef45ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2450,
        "upload_time": "2022-02-23T04:31:20",
        "upload_time_iso_8601": "2022-02-23T04:31:20.671866Z",
        "url": "https://files.pythonhosted.org/packages/f1/c5/28fd311dc34a19c0c3055c4f5fd1669cf76d21b2e3eb38d3a3f04e00321a/immersa-jwt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc4b3e71922df60ef7ba13f1823a743192aeefb7e2a0dec0a5d9cb0e2f903076",
        "md5": "d4c11022a89c4dd0701a5e796ac388f9",
        "sha256": "f34e0b9d5c38ce00b70b4fc292db1760d13686beb064a5cca48583c6236af90b"
      },
      "downloads": -1,
      "filename": "immersa_jwt-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4c11022a89c4dd0701a5e796ac388f9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5071,
      "upload_time": "2022-02-23T04:31:18",
      "upload_time_iso_8601": "2022-02-23T04:31:18.857676Z",
      "url": "https://files.pythonhosted.org/packages/fc/4b/3e71922df60ef7ba13f1823a743192aeefb7e2a0dec0a5d9cb0e2f903076/immersa_jwt-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1c528fd311dc34a19c0c3055c4f5fd1669cf76d21b2e3eb38d3a3f04e00321a",
        "md5": "6700f5596af1405cc07184268eef45ed",
        "sha256": "c6da805d34e949b36ece2fab17855628af452134212cd54cb1b94b90db9fb1d9"
      },
      "downloads": -1,
      "filename": "immersa-jwt-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6700f5596af1405cc07184268eef45ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2450,
      "upload_time": "2022-02-23T04:31:20",
      "upload_time_iso_8601": "2022-02-23T04:31:20.671866Z",
      "url": "https://files.pythonhosted.org/packages/f1/c5/28fd311dc34a19c0c3055c4f5fd1669cf76d21b2e3eb38d3a3f04e00321a/immersa-jwt-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}