{
  "info": {
    "author": "Lido",
    "author_email": "info@lido.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<<<<<<< HEAD\n# <img src=\"https://docs.lido.fi/img/logo.svg\" alt=\"Lido\" width=\"46\"/> Lido Python SDK \n\n[![codecov](https://codecov.io/gh/lidofinance/lido-python-sdk/branch/master/graph/badge.svg)](https://codecov.io/gh/lidofinance/lido-python-sdk)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis repo provides a scratch of a Python project. Its purpose is to serve as starting point for\nthe development of a Python project based on a minimal working structure.\n\n## Installation\nThis library is available on PyPi:\n\n```bash\npip install lido-sdk\n```\n\n## Fast start\n\n1. Create Web3 provider. One of fast options to start is INFURA.\n```python\nfrom web3 import Web3\n# \nw3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/{INFURA_PROJECT_ID}'))\n```\n\n2. Create Lido instance and provide web3 provider\n```python\nfrom lido_sdk import Lido\n\nlido = Lido(w3)\n```\n\n3. Call one \n```python\nresponse = lido.fetch_all_keys_and_validate()\n\nif response['invalid_keys'] or response['duplicated_keys']:\n    # This is not cool\n    print('There is invalid or duplicated keys\\n')\n    print(response)\nelse:\n    print('Everything is good!')\n```\n\n## Params for Lido\n| Param name                        | Default value | Description |\n| -------------                     | ---------     | ----------- |\n| w3                                | required      | Web3 provider |\n| MULTICALL_MAX_BUNCH               | 275           | Count of calls in one multicall (not recommended to increase) |\n| MULTICALL_MAX_WORKERS             | 6             | Count of requests in parallel (not recommended to have more than 12) |\n| MULTICALL_MAX_RETRIES             | 5             | Count of retries before exception will be raised |\n| MULTICALL_POOL_EXECUTOR_TIMEOUT   | 30            | Thread pool timeout for multicall (seconds) |\n| VALIDATE_POOL_EXECUTOR_TIMEOUT    | 10            | Process pool timeout for keys validation (seconds) |\n\nSettings example if timeout exception was raised:\n```python\nLido(w3=w3, MULTICALL_MAX_BUNCH=100, MULTICALL_MAX_WORKERS=3)\n```\n\n## Base methods\nEverything you need is in Lido class.\n\n- `Lido.get_operators_indexes(self) -> List[int]`  \nReturns: Node operators indexes in contract.\n```\n>>> lido.get_operators_indexes()\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n- `Lido.get_operators_data(self, operators_indexes: Optional[List[int]] = None) -> List[Operator]`  \nReceives: List of operators indexes. If nothing provided will take previous return from `get_operators_indexes` method.  \nReturns: List of operators details.  \n```\n>>> lido.get_operators_data([1])\n\n[{'active': True, 'name': 'Certus One', 'rewardAddress': '0x8d689476eb446a1fb0065bffac32398ed7f89165', 'stakingLimit': 1000, 'stoppedValidators': 0, 'totalSigningKeys': 1000, 'usedSigningKeys': 1000, 'index': 1}]```\n```\n\n- `Lido.get_operators_keys(self, operators: Optional[List[Operator]] = None) -> List[OperatorKey]`\nReceives: List of operators details. If nothing provided will take previous return from `get_operators_data` method.\nReturns: List of keys in contract.\n```\n>>> lido.get_operators_keys(operators_data)\n\n[{'key': b'...', 'depositSignature': b'...', 'used': False, 'index': 6921, 'operator_index': 8}, ...]\n```\n\n- `Lido.update_keys(self) -> List[OperatorKey]`  \nReturns actual keys list. Works only in `get_operators_keys` was called before. Should be used to periodically update keys.\nFaster because not all keys are updated from the contract.\n```\n>>> lido.update_keys()\n\n[{'key': b'...', 'depositSignature': b'...', 'used': False, 'index': 6521, 'operator_index': 5}]\n```  \n  \n- `Lido.validate_keys(self, keys: Optional[List[OperatorKey]] = None) -> List[OperatorKey]`  \nReceives: List of keys to validate. If nothing provided will take previous return from `get_operators_keys` method.  \nReturns: List of invalid keys.\n```\n>>> lido.validate_keys()\n\n[{'key': b'...', 'depositSignature': b'...', 'used': False, 'index': 6521, 'operator_index': 5}]\n```\n\n- `Lido.find_duplicated_keys(self, keys: Optional[List[OperatorKey]] = None) -> List[Tuple[OperatorKey, OperatorKey]]`  \nReceives: List of keys to compare. If nothing provided will take previous return from `get_operators_keys` method.  \nReturns: List of same pairs keys.  \n```\n>>> lido.find_duplicated_keys()\n\n[\n    (\n        {'key': b'abc...', 'index': 222, 'operator_index': 5, ...}, \n        {'key': b'abc...', 'index': 111, 'operator_index': 5, ...}\n    )\n]\n```\n\n- `Lido.get_status(self) -> dict`  \nReturns dict with Lido current state.\n```\n>>> lido.get_status()\n\n{\n    'isStopped': False, \n    'totalPooledEther': 1045230979275869331637351, \n    'withdrawalCredentials': b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xb9\\xd7\\x93Hx\\xb4\\xfb\\x96\\x10\\xb3\\xfe\\x8a^D\\x1e\\x8f\\xad~)?', \n    'bufferedEther': 76467538672788331637351, \n    'feeBasisPoints': 1000, \n    'treasuryFeeBasisPoints': 0, \n    'insuranceFeeBasisPoints': 5000, \n    'operatorsFeeBasisPoints': 5000, \n    'depositedValidators': 29800, \n    'beaconValidators': 29800, \n    'beaconBalance': 968763440603081000000000, \n    'last_block': 13110151, \n    'last_blocktime': 1630103538,\n}\n```\n\n- `Lido.fetch_all_keys_and_validate(self) -> Dict[str, list]`  \nMakes all steps below except `get_status`.  \nReturns all invalid and duplicated keys.\n```\n>>> lido.fetch_all_keys_and_validate()\n\n{\n    'invalid_keys': [...],\n    'duplicated_keys': [...],\n}\n```\n\n## Main Features\n\n### Multicall Function Calls\n\n- Instead of making network requests one-by-one, this library combines many requests into one RPC call. It uses [banteg/multicall.py](https://github.com/banteg/multicall.py), a Python wrapper for [makerdao/multicall](https://github.com/makerdao/multicall).\n- Fast validation system powered by [blst](https://github.com/supranational/blst)\n\n### Automatic Testnet / Mainnet Switching\n\nDepending on which network is configured in web3 object, a set of contracts will be used.\nAvailable networks:\n- Mainnet\n- Görli\n- Ropsten\n- Rinkeby\n\n## Development\n\nClone project:\n```bash\ngit clone git@github.com:lidofinance/lido-python-sdk.git\ncd lido-python-sdk\n```\nCreate virtual env:\n```bash\nvirtualenv .env --python=python3\nsource .env/bin/activate\n```\nInstall all dependencies:\n```bash\n  poetry install\n```\nActivate virtual env\n```bash\n  poetry shell\n```\nBuild blst locally (linux):\n```bash\n  cd blst/\n  ./build.sh\n  cd ..\n  mkdir -p ./blst-lib/linux/\n  cp ./blst/libblst.a           ./blst-lib/linux/\n  cp ./blst/bindings/blst.h     ./blst-lib/\n  cp ./blst/bindings/blst.hpp   ./blst-lib/\n  cp ./blst/bindings/blst_aux.h ./blst-lib/\n  python setup.py build_ext --inplace\n```\nBuild blst locally (osx):\n```bash\n  cd blst/\n  ./build.sh\n  cd ..\n  mkdir -p ./blst-lib/darwin/\n  cp ./blst/libblst.a           ./blst-lib/darwin/\n  cp ./blst/bindings/blst.h     ./blst-lib/\n  cp ./blst/bindings/blst.hpp   ./blst-lib/\n  cp ./blst/bindings/blst_aux.h ./blst-lib/\n  python setup.py build_ext --inplace\n```\n\n## How to test\nSimply run in project root directory:\n```bash\npoetry run pytest .\n```\n\n## Release new version\n```bash\ngit tag v2.x.x  master\ngit push --tags\n```\nNew version should be published after all pipelines passed.\n=======\n# lido-python-sdk-fork\nfork lido-python-sdk\n>>>>>>> 88a206396b11da0010ce47e201569b90c5d0945f\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sunnight-wj/lido-python-sdk-fork",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lido-sdk-fork",
    "package_url": "https://pypi.org/project/lido-sdk-fork/",
    "platform": null,
    "project_url": "https://pypi.org/project/lido-sdk-fork/",
    "project_urls": {
      "Homepage": "https://github.com/Sunnight-wj/lido-python-sdk-fork"
    },
    "release_url": "https://pypi.org/project/lido-sdk-fork/2.5.3/",
    "requires_dist": [
      "multicall (<1,>=0.1.2)",
      "web3 (<6,>=5.23.1)",
      "ssz (<1,>=0.2.4)"
    ],
    "requires_python": ">=3.7,<4",
    "summary": "This library consolidates various functions to efficiently load network data for Lido, validate node operator keys and find key duplicates.",
    "version": "2.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14858217,
  "releases": {
    "2.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ee98e051bfc5b0d95d2cb6eea37caedec04dbb5f284d0c64af1de858952b6d4",
          "md5": "a22c34cf7bd70e16e9a65d35885f26a1",
          "sha256": "caa191ae0361b26278a9a36242b8412210927d28097d6f2ccc0df7c7253606a1"
        },
        "downloads": -1,
        "filename": "lido_sdk_fork-2.5.3-cp39-cp39-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a22c34cf7bd70e16e9a65d35885f26a1",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7,<4",
        "size": 476939,
        "upload_time": "2022-08-24T03:32:42",
        "upload_time_iso_8601": "2022-08-24T03:32:42.656490Z",
        "url": "https://files.pythonhosted.org/packages/2e/e9/8e051bfc5b0d95d2cb6eea37caedec04dbb5f284d0c64af1de858952b6d4/lido_sdk_fork-2.5.3-cp39-cp39-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "330333c44a1be8f09dc48e03da5d97af5cebd5e7c7a575ca507019d3caaf0e4e",
          "md5": "8a3bc4672c871f73c70f1e6b7457c5ad",
          "sha256": "c8decebdb8de6a4cef6dcfca58625dc318d9949dba8ef8ecf08aab805c104d8c"
        },
        "downloads": -1,
        "filename": "lido-sdk-fork-2.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a3bc4672c871f73c70f1e6b7457c5ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 165342,
        "upload_time": "2022-08-24T03:32:44",
        "upload_time_iso_8601": "2022-08-24T03:32:44.712416Z",
        "url": "https://files.pythonhosted.org/packages/33/03/33c44a1be8f09dc48e03da5d97af5cebd5e7c7a575ca507019d3caaf0e4e/lido-sdk-fork-2.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ee98e051bfc5b0d95d2cb6eea37caedec04dbb5f284d0c64af1de858952b6d4",
        "md5": "a22c34cf7bd70e16e9a65d35885f26a1",
        "sha256": "caa191ae0361b26278a9a36242b8412210927d28097d6f2ccc0df7c7253606a1"
      },
      "downloads": -1,
      "filename": "lido_sdk_fork-2.5.3-cp39-cp39-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a22c34cf7bd70e16e9a65d35885f26a1",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7,<4",
      "size": 476939,
      "upload_time": "2022-08-24T03:32:42",
      "upload_time_iso_8601": "2022-08-24T03:32:42.656490Z",
      "url": "https://files.pythonhosted.org/packages/2e/e9/8e051bfc5b0d95d2cb6eea37caedec04dbb5f284d0c64af1de858952b6d4/lido_sdk_fork-2.5.3-cp39-cp39-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "330333c44a1be8f09dc48e03da5d97af5cebd5e7c7a575ca507019d3caaf0e4e",
        "md5": "8a3bc4672c871f73c70f1e6b7457c5ad",
        "sha256": "c8decebdb8de6a4cef6dcfca58625dc318d9949dba8ef8ecf08aab805c104d8c"
      },
      "downloads": -1,
      "filename": "lido-sdk-fork-2.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8a3bc4672c871f73c70f1e6b7457c5ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4",
      "size": 165342,
      "upload_time": "2022-08-24T03:32:44",
      "upload_time_iso_8601": "2022-08-24T03:32:44.712416Z",
      "url": "https://files.pythonhosted.org/packages/33/03/33c44a1be8f09dc48e03da5d97af5cebd5e7c7a575ca507019d3caaf0e4e/lido-sdk-fork-2.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}