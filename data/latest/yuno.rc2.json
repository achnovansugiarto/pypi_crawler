{
  "info": {
    "author": "Anime no Sekai",
    "author_email": "niichannomail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# `yuno` (originally: `saki`)\n\n An account and database management framework, completing Nasse\n\n***Manipulate your databases as if you never leaved Python***\n\n[![PyPI version](https://badge.fury.io/py/yuno.svg)](https://pypi.org/project/yuno/)\n[![Downloads](https://static.pepy.tech/personalized-badge/yuno?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Total%20Downloads)](https://pepy.tech/project/yuno)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/yuno)](https://pypistats.org/packages/yuno)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/yuno)](https://pypi.org/project/yuno/)\n[![PyPI - Status](https://img.shields.io/pypi/status/yuno)](https://pypi.org/project/yuno/)\n[![GitHub - License](https://img.shields.io/github/license/Animenosekai/yuno)](https://github.com/Animenosekai/yuno/blob/master/LICENSE)\n[![GitHub top language](https://img.shields.io/github/languages/top/Animenosekai/yuno)](https://github.com/Animenosekai/yuno)\n[![CodeQL Checks Badge](https://github.com/Animenosekai/yuno/workflows/CodeQL%20Python%20Analysis/badge.svg)](https://github.com/Animenosekai/yuno/actions?query=workflow%3ACodeQL)\n[![Pytest](https://github.com/Animenosekai/yuno/actions/workflows/pytest.yml/badge.svg)](https://github.com/Animenosekai/yuno/actions/workflows/pytest.yml)\n![Code Size](https://img.shields.io/github/languages/code-size/Animenosekai/yuno)\n![Repo Size](https://img.shields.io/github/repo-size/Animenosekai/yuno)\n![Issues](https://img.shields.io/github/issues/Animenosekai/yuno)\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n### Prerequisites\n\n#### Python\n\nYou will need Python 3 to use this module\n\n```bash\n# vermin output\nMinimum required versions: 3.8\nIncompatible versions:     2\n```\n\nAccording to Vermin (`--backport typing`), Python 3.8 is needed for `typing.Literal`\n\n#### MongoDB\n\nI haven't checked the minimum requirements for the MongoDB features used in this library yet but you should always use the latest versions for maximum security.\n\nAlso this framework has been tested on MongoDB `v4.4.5` (locally), MongoDB `v4.4.12` (on Atlas) and the latest version of MongoDB on the [CI tests](https://github.com/Animenosekai/yuno/actions/workflows/pytest.yml).\n\nAlways check if your Python version works with `yuno` before using it in production.\n\n## Installing\n\n### Option 1: From PyPI\n\n```bash\npip install --upgrade yuno\n```\n\n### Option 2: From Git\n\n```bash\npip install --upgrade git+https://github.com/Animenosekai/yuno\n```\n\nYou can check if you successfully installed it by printing out its version:\n\n```bash\n$ python -c \"import yuno; print(yuno.__version__)\"\n# output:\nyuno v1.0\n```\n\n## Purpose\n\nThis framework aims to bring effortless database management and database schemas in Python, in order to make everything predictable and easy to debug.\n\nYou will never need to learn and search for obscure MongoDB features again because everything is made to behave like normal Python objects.\n\n## Usage\n\n### Running a MongoDB (`mongod`) process from Python\n\nIf you have a MongoDB database already running (for example: using MongoDB Atlas, or on a separate server), you can skip this part.\n\n#### Starting a process\n\nTo start a process you will need to create a new `MongoDB` object with the configurations (refer to [Configuration](#Configuration)) and start it from there.\n\n> Example\n\n```python\nfrom yuno import MongoDB\n\nserver = MongoDB()\nserver.start() # this will launch MongoDB and wait for it to run\n...\nserver.kill() # this will kill the MongoDB process\n```\n\nThe `start` method can get extra parameters that will modify the way MongoDB is launched:\n\n- `executable`: The path to the MongoDB executable.\n- `wait`: When you have set `fork` to `False`, this is the number of seconds to wait for the process to start. (I was planning to use the output from the process to determine when it is listening for connections but `mongod` doesn't seem to \"flush\" its output so it was just hanging waiting for new output to come until the process was killed)\n- `keep_alive`: Whether to keep the process alive or not (fork will be enabled) after Python quits (it will not register `self.kill` at cleanup).\n\n#### Configuration\n\nMongoDB configuration is made easy with Yuno!\n\nYou can just pass configuration values into `MongoDB` to configure it!\n\nYou can configure a lot of important values natively for now and you can add more obscure ones when launching the process.\n\n##### List of supported configuration values\n\n- `host`: The host of the MongoDB server (net.bindIp)\n- `port`: The port of the MongoDB server (net.port)\n- `db_path`: The path of the MongoDB database (storage.dbPath)\n- `fork`: Whether to fork the MongoDB process or not (processManagement.fork)\n- `log_config`: The MongoDB logging configuration (systemLog)\n- `max_connections`: The maximum number of connections allowed (net.maxIncomingConnections)\n- `json_validation`: Whether to enable the JSON validation or not (net.wireObjectCheck)\n- `ipv6`: Whether to enable IPv6 or not (net.ipv6)\n- `monitoring`: Whether to enable the free MongoDB monitoring or not (cloud.monitoring.free.state)\n\n##### About LogConfig\n\nThe content of the `log_config` parameter should be a `LogConfig` object (or a dictionary containing data to instantiate a `LogConfig` class).\n\nThis parameter is a class on its own because of its complexity.\n\n> Parameters\n\n- `verbosity`: The verbosity level of the MongoDB logging system\n- `path`: The path of the MongoDB log file. It can also be TERMINAL or SYSLOG (the systemLog.destination value will be set automatically according to this value)\n- `append`: Whether to append to the log file or not\n- `timezone`: The timezone of the timestamps format\n- `debug`: Whether to enable the debug mode or not (this will enable max verbosity and `--traceExceptions`)\n\n> Example\n\n```python\nfrom yuno import MongoDB, LogConfig\nfrom yuno.launcher import Timezone\n\nserver = MongoDB(db_path=\"./db/test\", fork=True, monitoring=False, log_config=LogConfig(verbosity=2, path=\"./logs/db/test.log\", timezone=Timezone.UTC))\n\nserver.start()\n```\n\n#### Loading and Dumping the configuration\n\nYou can also load the config from a file or dump it into a file using the built in methods (available on `LogConfig` and `MongoDB`):\n\n- `to_cli_args` will dump the configuration to a list of CLI arguments to give to the `MongoDB` (`mongod`) process\n- `loads` will load the configuration from a YAML string or a dictionary of values\n- `load` will load the configuration from a YAML file\n- `dumps` will dump the configuration to a YAML string\n- `dump` will dump the configuration to a YAML file\n- `to_dict` (or `dict(configuration_object)`) will dump the configuration to a dictionary (you have a `camelCase` parameter to make the keys camelCased)\n\nThis is especially useful when you already have a configuration file or want to share the configuration to another user not using Yuno.\n\n> Example\n\n```python\nfrom yuno import MongoDB\n\nserver = MongoDB() # will load all of the default configurations\nserver.load(\"./db/mongo.conf\") # will reinitialize the object with the config file, keeping the default values for values that aren't specified\nserver.dump(\"./db/mongo_new.conf\") # will dump the configurations to a new file (to share or use later)\n\n# will show the configuration\nprint(\"MongoDB configuration\")\nprint(\"-\" * 10)\nfor key, val in server.to_dict(camelCase=True):\n    print(key, \"=\", val)\n```\n\n### Connecting to a MongoDB process\n\nWether you use the built-in `MongoDB` object to launch a MongoDB process or just host it on the cloud/on another server, you will need to connect to it using `YunoClient`.\n\nHere are the parameters used to connect to a server:\n\n- `host`: The host or list of hostnames to connect to. You can use `host` to pass in a URI string or a MongoDB object (in which case you won't need to use `port`).\n- `port`: The port to connect to.\n- `tz_aware`: Whether to use timezone aware datetimes or not.\n- `connect`: Whether to connect before making any operation to the server or not.\n- `kwargs`: Options to pass to the PyMongo client. (you don't need to set `kwargs` manually, just pass the parameters as normal parameters)\n\n> Example\n\n```python\n# Using the \"MongoDB\" object\nfrom yuno import MongoDB\nfrom yuno import YunoClient\n\nserver = MongoDB()\nserver.start()\nclient = YunoClient(server) # you are connecting to the server here\n```\n\n### Using the client\n\nTo access databases from the client, all you need to do is access its name as an attribute or an item:\n\n```python\nclient.database_name\n# or\nclient[\"database_name\"]\n```\n\nIn both case, this will return the same YunoDatabase object.\n\nThe `client[\"database_name\"]` syntax is especially useful if you use a database with the name of a method overwritten by YunoClient (for example `watch`, `server_info`, `address`, `close`, etc.).\n\nYou can find a list of overwritten attributes under the `__overwritten__` attribute.\n\nYunoClient can be used to establish the database schema.\n\nThis basically means that you can already type hint databases by creating your own clients.\n\n```python\nfrom yuno import YunoClient\nfrom yuno import YunoDatabase\n\nclass MyClient(YunoClient):\n    production: YunoDatabase # you can here use your custom databases (refer to the \"Using databases\" section)\n    scores: YunoDatabase\n\nclient = MyClient(\"mongodb+srv://anise:password@yunotest.host.mongodb.net/production\")\nclient.production # will return the `production` database\n# YunoDatabase('production')\n```\n\nThis helps with establishing a schema and helps your code editor guide you when writing code, resulting in less time searching for types, available databases and looking back at your code.\n\nIt has serveral other methods, which are picked and adapted from the original PyMongo `MongoClient`.\n\n> Examples\n\n- `close` is used to close the connection to the server\n- `database_names` is used to retrieve the list of databases created.\n- `server_info` will return some info about the current MongoDB server in a special object called `BuildInfo` (`yuno.client.BuildInfo`).\n- `watch` returns a cursor to watch the cluster for changes and events.\n- `on` will register a callback function which will be called when the specified operation/event is performed on the server.\n\nYou can also use pythonic syntax to make some operations:\n\n- Dropping a database\n\n```python\ndel client.test\n# or\ndel client[\"test\"]\n# will drop (delete) the \"test\" database\n```\n\n### Using databases\n\nA \"database\" is what holds collections in MongoDB.\n\nTo access collections from the client, all you need to do is access its name as an attribute or an item:\n\n```python\ndatabase.collection_name\n# or\ndatabase[\"collection_name\"]\n```\n\nIn both case, this will return the same YunoCollection object.\n\nThe `database[\"collection_name\"]` syntax is especially useful if you use a database with the name of a method overwritten by YunoDatabase (for example `watch`, `on`, `command`, `aggregate`, etc.).\n\nYou can find a list of overwritten attributes under the `__overwritten__` attribute.\n\n`YunoCollection` is the class returned by `YunoDatabase` when querying for one.\n\n```python\n# using the client variable defined before\n\naccounts = production_database.accounts\n# this is YunoCollection object\n```\n\nYou can define your own databases to type hint them (for the same reasons as before)\n\n```python\nfrom yuno import YunoClient, YunoDatabase, YunoCollection\n\nclass MyDatabase(YunoDatabase):\n    accounts: YunoCollection # you will also be able to create your own collections\n\nclass MyClient(YunoClient):\n    production: MyDatabase\n\nclient = MyClient(\"mongodb+srv://anise:password@yunotest.host.mongodb.net/production\")\nproduction_database = client.production # will return the custom MyDatabase object and code editors will help you write code\n# MyDatabase('production')\nproduction_database.accounts # this is a YunoCollection object\n```\n\nIt has serveral other methods, which are picked and adapted from the original PyMongo `MongoClient`.\n\n> Examples\n\n- `aggregate` is used to perform an aggregation on the database\n- `create_collection` is used to create a new collection\n- `list_collection_names` returns a list of collections available\n- `watch` returns a cursor to watch the database for changes and events.\n- `on` will register a callback function which will be called when the specified operation/event is performed on the database.\n\nYou can also use pythonic syntax to make some operations:\n\n- Dropping a collection\n\n```python\ndel database.account\n# or\ndel database[\"account\"]\n# will drop (delete) the \"account\" collection\n```\n\n### Using collections\n\nA \"collection\" is what holds documents in MongoDB.\n\nTo access documents from the collection, all you need to do is access its name as an attribute or an item:\n\n```python\ncollection.document_id\n# or\ncollection[\"document_id\"]\n```\n\nIn both case, this will return the same YunoCollection object.\n\nThe `collection[\"document_id\"]` syntax is especially useful if you use a document with the _id of a method overwritten by YunoCollection (for example `watch`, `on`, `find`, `aggregate`, etc.).\n\nYou can find a list of overwritten attributes under the `__overwritten__` attribute.\n\n`YunoCollection` is the class returned by `YunoDatabase` when querying for one.\n\n```python\n# using the client variable defined before\n\naccounts = production_database.accounts\n# this is YunoCollection object\n```\n\nYou can define your own collections to type hint them (for the same reasons as before)\n\n```python\nfrom bson import ObjectId\nfrom yuno import YunoClient, YunoDatabase, YunoCollection, YunoDict\n\nclass MyCollection(YunoCollection):\n    special_document: YunoDict # you will also be able to create your own documents\n\nclass MyDatabase(YunoDatabase):\n    accounts: MyCollection\n\nclass MyClient(YunoClient):\n    production: MyDatabase\n\nclient = MyClient(\"mongodb+srv://anise:password@yunotest.host.mongodb.net/production\")\nproduction_database = client.production\naccounts = production_database.accounts\naccounts.special_document # this is a YunoDict object\n```\n\nThere is a special `__type__` attribute which is used to define the default type of the documents in the collection.\n\nThis is especially useful if all of the documents in the collection share the same schema.\n\nYou can use type hints to define the schema of special documents (a document which gives global information about the collection for example).\n\nIt has serveral other methods, which are picked and adapted from the original PyMongo `MongoClient`.\n\n> Examples\n\n- `count` is used to count the number of documents matching the given filter\n- `find` is used to find documents matching the given filter\n- `index` creates a new index on the collection\n- `aggregate` returns an aggregation of documents following the given pipeline\n- `watch` returns a cursor to watch the database for changes and events.\n- `on` will register a callback function which will be called when the specified operation/event is performed on the database.\n\nYou can also use pythonic syntax to make some operations:\n\n- Deleting a document\n\n```python\ndel collection.special_document\n# or\ndel collection[\"special_document\"]\n# will delete the \"special_document\" document\n```\n\n- Set a document (create or replace)\n\n```python\ncollection.special_document = {\"_id\": \"special_document\", \"name\": \"Special document\"}\n# or\ncollection[\"special_document\"] = {\"_id\": \"special_document\", \"name\": \"Special document\"}\n# will replace the \"special_document\" document with the one defined above\n```\n\n- Verify if the given document exists\n\n```python\n\"special_document\" in collection\n# will return True if the document (with _id == \"special_document\") exists\n```\n\n### Using objects\n\nAn \"object\" is what represents any object in a document, or even the document itself.\n\nTo access objects from another object (the highest hierarchy parent object being the document), all you need to do is access its name as an attribute or an item:\n\n```python\ndocument.object_name\n# or\ndocument[\"object_name\"]\n```\n\nIn both case, this will return the same YunoObject object.\n\nThe `document[\"object_name\"]` syntax is especially useful if you use an object with its name being of a method overwritten by YunoObject (for example `watch`, `on`, `reload`, `delete`, etc.).\n\nYou can find a list of overwritten attributes under the `__overwritten__` attribute.\n\n`YunoObject` is the class returned by `YunoCollection` when querying for one.\n\n```python\n# using the client variable defined before\n\ndocument = accounts.special_document\n# this is YunoObject object\n```\n\nYou can define your own objects to type hint them (for the same reasons as before)\n\n```python\nfrom yuno import YunoClient, YunoDatabase, YunoCollection, YunoDict\n\n\n\nclass CustomObject(YunoDict):\n    hello: str = \"world\"\n    do_not_exist: str = \"this does not exist\"  # its default value if not found in db\n\n\nclass CustomDocument(YunoDict):\n    __lazy__ = [\"hello\"]  # lazy loaded attribute\n\n    hello: str\n    world: str = \"heyhey\"\n    a: CustomObject  # nested object ^^\n\n\nclass SpecialDocument(YunoDict):\n    __lazy__ = [\"specialAttributes\"]\n\n    specialAttributes: list[str]\n    version: str\n\n\nclass CustomCollection(YunoCollection):\n    __type__ = CustomDocument  # the default type of document in the collection\n\n    special: SpecialDocument  # a special document type\n\n\nclass CustomDatabase(YunoDatabase):\n    __yuno_test__: CustomCollection\n\n\nclass CustomClient(YunoClient):\n    test_database: CustomDatabase\n\n\nclient = CustomClient(\"mongodb+srv://anise:password@yunotest.host.mongodb.net/production\")\ntest_database = client.test_database\ntest_collection = test_database.__yuno_test__\nspecial_doc = test_collection.special\nspecial_doc # this is a SpecialDocument object\ndocument = test_collection.any_document\ndocument # this is a CustomDocument object\ndocument.hello # this is a str object, but lazy loaded (not loaded until needed)\ndocument.a # this is CustomObject object\ndocument.a.hello # this is a str\ndocument.a.do_not_exist # this is a str (and if it's not found in the db, it will be the value given by default \"this does not exist\")\n```\n\nThere is a special `__lazy__` attribute which is used to define attributes which won't be loaded until needed.\n\nThis is especially useful for attributes which are expensive to load or not needed in normal circumstances.\n\nYou can use type hints to define the schema of some attributes.\n\nObjects acts as regular python objects.\n\nFor example, a YunoDict object can be used as a regular python dict:\n\n```python\nobject # this is a YunoDict object\nobject.get(\"key\") # this is a str\nobject.pop(\"key\") # remove the key from the object\nobject.items() # this is a list of tuples\nobject.keys() # this is a list of str\n...\nfor key, value in object.items():\n    print(key, value)\ndel object[\"key\"]\n```\n\nand a YunoList object can be used as a regular python list:\n\n```python\nobject # this is a YunoList object\nobject.append(\"value\") # add a value to the list\nobject.pop() # remove the last value from the list\nobject.extend([\"value1\", \"value2\"]) # add multiple values to the list\nobject.index(\"value\") # return the index of the value in the list\nobject.insert(0, \"value\") # insert a value at the beginning of the list\nobject.remove(\"value\") # remove the first value from the list\nobject.reverse() # reverse the list\nobject.sort() # sort the list\n...\nfor value in object:\n    print(value)\n```\n\nSome methods don't come from regular Python data types, but are specific to YunoObjects:\n\n> Examples\n\n- `delete` deletes the current object from the database\n- `reload` reloads the current object from the database (replaces the current object with the one from the database)\n- `watch` returns a cursor to watch the database for changes and events.\n- `on` will register a callback function which will be called when the specified operation/event is performed on the object.\n\nInstead of the `reload` method, you also have a `__realtime__` attribute which you can set to `True` if you want the object to follow the updates on the database (you will have an object which is always up to date).\n\n```python\ndocument # this is a YunoObject (YunoDict, YunoList, etc.) object\ndocument.__realtime__ = True\n# this will make the object follow the updates on the database\n\nclass CustomObject(YunoDict):\n    __realtime__ = True\n\n    hello: str = \"world\"\n\nclass CustomCollection(YunoCollection):\n    __type__ = CustomObject\n\n# any object coming from the CustomCollection collection will be a CustomObject object and will be a \"realtime\" object, following the updates on the database\n```\n\nYou can also use pythonic syntax to make some operations:\n\n- Deleting a document\n\n```python\ndel object.key\n# or\ndel object[\"key\"]\n# will delete the \"key\" attribute from the object\n```\n\n- Set an attribute (create or replace)\n\n```python\nobject.key = {\"hello\": \"world\"}\n# or\nobject[\"key\"] = {\"hello\": \"world\"}\n# will replace the \"key\" attribute with the one defined above\n```\n\n- Verify if the given document exists\n\n```python\n\"key\" in object\n# will return True if the attribute exists\n```\n\n## Security package\n\nYuno being a framework, it also provides a set of tools to help you secure your data and logins for your users.\n\nThey are all located under `yuno.security`.\n\n### Encrypt\n\nEncrypt is a module to encrypt your data using AES.  \n\nThe key can be managed by the database and the token is made recognizable by the given prefix.\n\n#### Usage\n\n##### Encrypting\n\n```python\n>>> from yuno.security.encrypt import AES\n>>> encryption = AES(<your key>)\n>>> encryption.encrypt(\"hello world\")\n'yuno+312e302e30,1f1d5944d37904e6fe0d129efc11207c,cbb99af1cfb54e08b31d4e,f4876580de57a521791bc0cc527c85cc'\n```\n\nYou can also use your database to automatically create and store the key.\n\n```python\n>>> client = YunoClient(...)\n>>> encryption = AES(key=client)\n# the key will be randomly generated and stored in the database to be retrieved automatically when needed\n>>> encryption.encrypt(\"hello world\")\n'yuno+312e302e30,1f1d5944d37904e6fe0d129efc11207c,cbb99af1cfb54e08b31d4e,f4876580de57a521791bc0cc527c85cc'\n```\n\n##### Decrypting\n\n```python\n>>> encryption.decrypt(\"yuno+312e302e30,1f1d5944d37904e6fe0d129efc11207c,cbb99af1cfb54e08b31d4e,f4876580de57a521791bc0cc527c85cc\")\n'hello world'\n```\n\n#### Encryption Schema\n\n![Yuno AES Encryption Schema](./docs/yuno_aes_encryption_schema.png)\n\n### Hash\n\nYou can also hash data and passwords using Yuno\n\nThis is all located inside `yuno.security.hash`.\n\n#### Data\n\nThe data hasher will use SHA-256 to hash your data.\n\nCreate a `Hasher` instance.\n\nFour methods are available:\n\n- `hash`: Which will automatically detect which method to use.\n- `hash_string`: To hash a string\n- `hash_bytes`: To hash a bytes object\n- `hash_buffer`: To hash an IO buffer (file for example).\n\n#### Password\n\nYuno uses Argon2id, one of the strongest password hashing algorithms, to hash passwords.\n\nYou can use it by creating an instance of `PasswordHasher`.\n\nWhen initializing the PasswordHasher, you will need to pass a `pepper`, a kind of system key, to alter the given passwords and make them unique to the server.\n\nThe `pepper` parameter can also be a database object, in which case a random key will be generated and stored inside the database.\n\n#### Usage\n\n##### Hashing\n\n```python\n>>> from yuno.security.hash import PasswordHasher\n>>> hasher = PasswordHasher(pepper=\"my_pepper\")\n>>> hasher.hash(\"my_password\")\n'$argon2id$v=19$m=102400,t=2,p=8$YKj47J7lty47hXrsgIwq0A$XWtTO+CtuSvEWrVph9ZrNQ'\n```\n\nThe hashed password follows the following schema:\n\n```\n PEPPER + PASSWORD + SALT(*)\n```\n\n> (*) If provided when hashing, it's a per-password bias to make the password unique to an account for example.\n\n```python\nhasher.hash(\"my_password\", salt=\"my_salt\")\n```\n\n> the SALT can be for example an account ID\n\n##### Verifying\n\nTwo methods are provided to check if the given password is correct:\n\n```python\n>>> hasher.verify(password=\"my_password\", hashed=\"$argon2id$v=19$m=102400,t=2,p=8$YKj47J7lty47hXrsgIwq0A$XWtTO+CtuSvEWrVph9ZrNQ\", salt=\"my_salt\")\n'$argon2id$v=19$m=102400,t=2,p=8$YKj47J7lty47hXrsgIwq0A$XWtTO+CtuSvEWrVph9ZrNQ'\n```\n\nThis function checks if the given password matches the given hashed password and returns the hashed password if it matches.\n\nThis returned password can also be slightly different from the original hash because it will sometimes rehash it so make sure to update the hash password with the new one in the database.\n\n```python\n>>> hasher.is_equal(password=\"my_password\", hashed=\"$argon2id$v=19$m=102400,t=2,p=8$YKj47J7lty47hXrsgIwq0A$XWtTO+CtuSvEWrVph9ZrNQ\", salt=\"my_salt\")\nTrue\n```\n\nDoes basically the same thing as before but will do no verification, rehashing, whatsoever and will return `True` or `False` instead of raising an exception if the password don't match.\n\n### Tokens\n\nFinally, Yuno can also manage JWT Tokens.\n\nA JWT is basically a JSON object encoded which is base64 encoded and signed with a secret key.\n\nThis way, anyone can read its content but nobody can modify it without the key.\n\nThis is why Yuno also gives you the option to pass a `yuno.security.encrypt.AES` instance to encrypt the tokens with AES and make them unreadable to anyone without the key.\n\n#### Usage\n\nWhen initializing the `TokenManager`, you will need to pass a `key` which is the secret key used to sign the tokens.\n\nThis can also be a database object, in which case the key will be generated and stored inside the database.\n\nYou can also provide a `sign` parameter, which will further sign the token from within the its content by adding to each token a random signature.\n\n##### Generating\n\n```python\n>>> from yuno.security.token import TokenManager\n>>> token_manager = TokenManager(key=\"my_secret_key\")\n>>> token_manager.generate(user=\"id-123\", username=\"username-123\", roles=[\"admin\", \"user\"]) # and any extra data\n'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDYwNDEwNDcsImV4cCI6MTY0NjEyNzQ0NywidXNlciI6ImlkLTEyMyIsInVzZXJuYW1lIjoidXNlcm5hbWUtMTIzIiwicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19.2ddAuZU7ozW9_F2dz9JKZbxdsNZlFbkjm5WYiuJVuUo'\n```\n\n> with encryption\n\n```python\n>>> from yuno.security.encrypt import AES\n>>> aes = AES()\n>>> token_manager.generate(user=\"id-123\", encryption=aes)\n'yuno+312e302e30,667dfc91d461177e673582969809d4a8,fdf3e9a34532ca63389a15bcae8d7c0373221d12e617b56a9136b1d9288f1f2da3020390c5657451357ab73607fc2040a87f4194b1abd84e8b6e9767e2ffc04ae5f70e2869c60138f8a0922f2e2f9b31f6e0913bb6b2b3e7e7b6679e55c865a4a9598016fc713e6eb48353cc61bc9954c897794ff4f29f50e0d2282a930e26b7ee7bb547428bbedef74e88a4f827eeab5564c883b7,82beee1f51fc1c1de408cc4a49c15f13'\n```\n\n##### Decoding\n\n```python\n>>> token_manager.decode(\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDYwNDEwNDcsImV4cCI6MTY0NjEyNzQ0NywidXNlciI6ImlkLTEyMyIsInVzZXJuYW1lIjoidXNlcm5hbWUtMTIzIiwicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19.2ddAuZU7ozW9_F2dz9JKZbxdsNZlFbkjm5WYiuJVuUo\")\n{'iat': 1646037825, 'exp': 1646124194, 'user': 'id-123', 'username': 'username-123', 'roles': ['admin', 'user']}\n```\n\n> with encryption\n\n```python\n>>> token_manager.decode(\"yuno+312e302e30,667dfc91d461177e673582969809d4a8,fdf3e9a34532ca63389a15bcae8d7c0373221d12e617b56a9136b1d9288f1f2da3020390c5657451357ab73607fc2040a87f4194b1abd84e8b6e9767e2ffc04ae5f70e2869c60138f8a0922f2e2f9b31f6e0913bb6b2b3e7e7b6679e55c865a4a9598016fc713e6eb48353cc61bc9954c897794ff4f29f50e0d2282a930e26b7ee7bb547428bbedef74e88a4f827eeab5564c883b7,82beee1f51fc1c1de408cc4a49c15f13\")\n{'iat': 1646041175, 'exp': 1646127575, 'user': 'id-123'}\n```\n\n> When using the `sign` parameter, an extra signature will be added to the token.\n\n```python\n>>> token_manager = TokenManager(\"my_key\", sign=\"my_sign\")\n>>> token_manager.generate(sub=\"id-123\", username=\"username-123\", roles=[\"admin\", \"user\"])\n'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDYwNDMwOTgsImV4cCI6MTY0NjEyOTQ5OCwidXNlciI6ImlkLTEyMyIsInJhbmQiOiI1N2IyZmVhODNlNjE1M2ZjIiwic2lnbiI6Ijg5MjQyZTdlOWNhMzAwMGU4M2NiZWUxMTQxZWQ4MTFhNGQ3M2NkNTliYTdkODE5ZjVkOTg2YzEzYzg5OGNjMzIiLCJ1c2VybmFtZSI6InVzZXJuYW1lLTEyMyIsInJvbGVzIjpbImFkbWluIiwidXNlciJdfQ.t0bL6_cqpZOeY2oJoBURSMhvagjRT3b_KlCBTFjFduI'\n>>> token_manager.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDYwNDMwOTgsImV4cCI6MTY0NjEyOTQ5OCwidXNlciI6ImlkLTEyMyIsInJhbmQiOiI1N2IyZmVhODNlNjE1M2ZjIiwic2lnbiI6Ijg5MjQyZTdlOWNhMzAwMGU4M2NiZWUxMTQxZWQ4MTFhNGQ3M2NkNTliYTdkODE5ZjVkOTg2YzEzYzg5OGNjMzIiLCJ1c2VybmFtZSI6InVzZXJuYW1lLTEyMyIsInJvbGVzIjpbImFkbWluIiwidXNlciJdfQ.t0bL6_cqpZOeY2oJoBURSMhvagjRT3b_KlCBTFjFduI')\n{'iat': 1646043098, 'exp': 1646129498, 'sub': 'id-123', 'rand': '57b2fea83e6153fc', 'sign': '89242e7e9ca3000e83cbee1141ed811a4d73cd59ba7d819f5d986c13c898cc32', 'username': 'username-123', 'roles': ['admin', 'user']}\n```\n\nNotice that a `rand` and `sign` fields are added to the token.\n\nThe `rand` field is random data as hex generated to be used in the `sign` field.\n\nThe `sign` field is the signature of the token.\n\nIt is a SHA-256 hashed concatenation of the `rand` field and the `sign` provided to the token manager.\n\n### Considerations\n\nThe goal here is to increase the number of keys and biases to make cracking the tokens and hashes way harder to any attacker.\n\n![Yuno Security Layers](./docs/yuno_security_layers.png)\n\nAs you can see, the JWT has the most layers because it is exposed to the public.\n\nYou should protect your databases and APIs and try to use some key rotation mechanism for maximum security.\n\n## How it works\n\nYuno works on top of PyMongo to make all of the operations to MongoDB.\n\nIt also uses PyJWT for the JWT encoding and decoding, Argon2 for the hashing and encryption of the passwords, and PyCryptodome for the AES encryption.\n\n## Deployment\n\nThis module is currently in development and might contain bugs.\n\nFeel free to use it in production if you feel like it is suitable for your production even if you may encounter issues.\n\n## Contributing\n\nPull requests are welcome. For major changes, please open a discussion first to discuss what you would like to change.\n\nPlease make sure to update the tests as appropriate.\n\n## Built With\n\n- [PyMongo](https://docs.mongodb.com/drivers/pymongo/) - To connect to MongoDB databases and make operations\n- [psutil](https://github.com/giampaolo/psutil) - For cross-platform process management\n- [PyYAML](https://github.com/yaml/pyyaml) - To parse YAML files (MongoDB configuration files)\n- [argon2-cffi](https://github.com/hynek/argon2-cffi) - To hash and encrypt passwords with Argon2id\n- [PyJWT](https://github.com/jpadilla/pyjwt) - To encode and decode JWT tokens\n- [PyCryptodome](https://github.com/Legrandin/pycryptodome/) - To AES encrypt and decrypt data\n\n## Authors\n\n- **Anime no Sekai** - *Initial work* - [Animenosekai](https://github.com/Animenosekai)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Animenosekai/yuno/archive/v1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Animenosekai/yuno",
    "keywords": "python,yuno,database,database-management,mongo,mongodb,account,account-management,database-client,client,mongo-client",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yuno",
    "package_url": "https://pypi.org/project/yuno/",
    "platform": "",
    "project_url": "https://pypi.org/project/yuno/",
    "project_urls": {
      "Download": "https://github.com/Animenosekai/yuno/archive/v1.1.tar.gz",
      "Homepage": "https://github.com/Animenosekai/yuno"
    },
    "release_url": "https://pypi.org/project/yuno/1.1/",
    "requires_dist": [
      "pymongo (>=3.11.3)",
      "psutil (>=5.8.0)",
      "PyYAML (>=6.0)",
      "argon2-cffi (>=20.1.0)",
      "pyjwt (>=2.0.1)",
      "pycryptodome (>=3.10.1)",
      "typing ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.8, <4",
    "summary": "Manipulate your databases as if you never leaved Python!",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13032868,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ad4d0ac9f79fdebffca316bd90ef45c3dfff391a416603a9832a9737caa7ab",
          "md5": "e9475a8fec7234e72bbd864810436a37",
          "sha256": "c5e5894371c7f4124f971c7d9d7cd68d7241307785686ea9188417b21afab399"
        },
        "downloads": -1,
        "filename": "yuno-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9475a8fec7234e72bbd864810436a37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 44079,
        "upload_time": "2022-02-26T13:48:41",
        "upload_time_iso_8601": "2022-02-26T13:48:41.108953Z",
        "url": "https://files.pythonhosted.org/packages/d8/ad/4d0ac9f79fdebffca316bd90ef45c3dfff391a416603a9832a9737caa7ab/yuno-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf759b5047baadb7708a8a52508f07b7a30365b74806d7abad6393b1046602a3",
          "md5": "d17f714bb1112a119a55331308417d1e",
          "sha256": "43cbf03dd521bd5a83a0feadc0866b48d5443ed4d13138137f81de6e5358d502"
        },
        "downloads": -1,
        "filename": "yuno-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d17f714bb1112a119a55331308417d1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 42139,
        "upload_time": "2022-02-26T13:48:43",
        "upload_time_iso_8601": "2022-02-26T13:48:43.185177Z",
        "url": "https://files.pythonhosted.org/packages/bf/75/9b5047baadb7708a8a52508f07b7a30365b74806d7abad6393b1046602a3/yuno-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7891fe9fba028f401cc57dd810aaeb780532a6770227c3561327fd0b4425b74",
          "md5": "890d2346a15dc43bf85c0df8c60167ce",
          "sha256": "035910fcc939763fef5a1e6b4878f432059e9a7a14ea470e054bcfaf972d7ff1"
        },
        "downloads": -1,
        "filename": "yuno-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "890d2346a15dc43bf85c0df8c60167ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 52555,
        "upload_time": "2022-02-28T12:05:02",
        "upload_time_iso_8601": "2022-02-28T12:05:02.303824Z",
        "url": "https://files.pythonhosted.org/packages/f7/89/1fe9fba028f401cc57dd810aaeb780532a6770227c3561327fd0b4425b74/yuno-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e77f0124c822a373b810f1a6ad5a1dc45ef576fabbb6980a3f023588497a6ba0",
          "md5": "e323410f03a0435b3c8c0240dba1d278",
          "sha256": "a3ad99e71aeec5ec1d7e4bbd93112b32a048d5d0309428198d2ee7b7b457056c"
        },
        "downloads": -1,
        "filename": "yuno-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e323410f03a0435b3c8c0240dba1d278",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 59021,
        "upload_time": "2022-02-28T12:05:04",
        "upload_time_iso_8601": "2022-02-28T12:05:04.330203Z",
        "url": "https://files.pythonhosted.org/packages/e7/7f/0124c822a373b810f1a6ad5a1dc45ef576fabbb6980a3f023588497a6ba0/yuno-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7891fe9fba028f401cc57dd810aaeb780532a6770227c3561327fd0b4425b74",
        "md5": "890d2346a15dc43bf85c0df8c60167ce",
        "sha256": "035910fcc939763fef5a1e6b4878f432059e9a7a14ea470e054bcfaf972d7ff1"
      },
      "downloads": -1,
      "filename": "yuno-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "890d2346a15dc43bf85c0df8c60167ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8, <4",
      "size": 52555,
      "upload_time": "2022-02-28T12:05:02",
      "upload_time_iso_8601": "2022-02-28T12:05:02.303824Z",
      "url": "https://files.pythonhosted.org/packages/f7/89/1fe9fba028f401cc57dd810aaeb780532a6770227c3561327fd0b4425b74/yuno-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e77f0124c822a373b810f1a6ad5a1dc45ef576fabbb6980a3f023588497a6ba0",
        "md5": "e323410f03a0435b3c8c0240dba1d278",
        "sha256": "a3ad99e71aeec5ec1d7e4bbd93112b32a048d5d0309428198d2ee7b7b457056c"
      },
      "downloads": -1,
      "filename": "yuno-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e323410f03a0435b3c8c0240dba1d278",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8, <4",
      "size": 59021,
      "upload_time": "2022-02-28T12:05:04",
      "upload_time_iso_8601": "2022-02-28T12:05:04.330203Z",
      "url": "https://files.pythonhosted.org/packages/e7/7f/0124c822a373b810f1a6ad5a1dc45ef576fabbb6980a3f023588497a6ba0/yuno-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}