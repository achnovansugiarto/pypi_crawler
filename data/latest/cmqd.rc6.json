{
  "info": {
    "author": "ClearMacro",
    "author_email": "support@clearmacro.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ClearMacro <!-- omit in toc -->\n\nThe ClearMacro Python library provides convenient access to the ClearMacro API from applications written in the Python language. It includes a pre-defined set of methods that make it simple to start interacting with the API.\n\n- [Installation](#installation)\n- [Examples](#examples)\n- [Full Python Docstrings](#full-python-docstrings)\n\n## Installation\n\nTo use the package, run:\n\n```sh\npip install --upgrade cmqd\n```\n\n## Examples\n\nSelection of examples; a reference point of getting started.\n\n```\n// Instantiate a client\n>>> from clearmacro import Client\n>>> config = {'url': '<HOST HERE>', 'username': '<EMAIL HERE>', 'password': '<PASSWORD HERE>'}\n>>> client = Client(**config)\n\n// Get the catalogue\n>>> catalogue = client.get_signals_catalogue()\n\n// Consume it as a DataFrame\n>>> client.json_to_df(catalogue)\n     signalId                                    name                             description   universe   category\n0           8                        Crossborder Flow                        Crossborder Flow  Economics     Credit\n1           9           Crossborder Private Liquidity           Crossborder Private Liquidity  Economics     Credit\n2          10               Crossborder Policy Sector               Crossborder Policy Sector  Economics     Credit\n3          11           Crossborder Monetized Savings           Crossborder Monetized Savings  Economics  Inflation\n...\n```\n\n```\n// Get the markets for which a certain signal is available.\n>>> markets_for_my_signal = client.get_markets_for_signal('Bond Valuation Score IHS')\n\n// Consume as DataFrame\n>>> client.json_to_df(markets_for_my_signal)\n    classId              name marketCategory\n0        86         Australia        Country\n1        87           Austria        Country\n2        88           Belgium        Country\n3        89            Brazil        Country\n4        90            Canada        Country\n...\n```\n\n```\n// Request a certain signal series\n>>> series = client.get_signal_series(signal='Crossborder Flow', market='US', research_type='Back-test Level', last_date_only=False, start_date='2016-1-1', end_date='2020-10-16')\n\n// Consume it as a DataFrame\n>>> client.json_to_df(series)\n                 dateTimes    values\n0   2016-01-29T23:59:59.99  5.485577\n1   2016-02-29T23:59:59.99  5.974441\n2   2016-03-31T23:59:59.99  6.388535\n3   2016-04-29T23:59:59.99  6.714286\n4   2016-05-31T23:59:59.99  6.340190\n5   2016-06-30T23:59:59.99  5.599369\n6   2016-07-29T23:59:59.99  4.792453\n7   2016-08-31T23:59:59.99  3.793103\n8   2016-09-30T23:59:59.99  3.207812\n9   2016-10-31T23:59:59.99  3.046729\n10  2016-11-30T23:59:59.99  3.375776\n11  2016-12-30T23:59:59.99  3.981424\n...\n\n// If there is no such series, get an exception which can be handled:\n>>> client.get_signal_series('Random signal', 'Random market', 'Random research type')\nValueError: Invalid input.\n\n```\n\n```\n// Request data with a certain frequency e.g. weekly data on Wednesdays.\n>>> wedDataSeries = client.get_signal_series('Country Valuation Score TR', 'Germany', 'Back-test Momentum', frequency_key = 'W-WED')\n\n// Consume it as a DataFrame\n>>> client.json_to_df(wedDataSeries)\n                   dateTimes    values\n0     1995-02-15T23:59:59.99  4.449885\n1     1995-02-22T23:59:59.99  5.507832\n2     1995-03-01T23:59:59.99  5.042825\n3     1995-03-08T23:59:59.99  6.214902\n4     1995-03-15T23:59:59.99  6.647544\n...\n```\n\n## Full Python Docstrings\n\nDocumentation for each method of the `Client` class:\n\n```\nget_signals_catalogue()\n\"\"\"\nFunction to retrieve the list of all signals.\n\nReturns:\n    JSON list of signal objects.\n\"\"\"\n```\n\n```\nget_all_markets()\n\"\"\"\nFunction to retrieve the list of all markets.\n\nReturns:\n    JSON list of market objects.\n\"\"\"\n```\n\n```\nget_signal_universes()\n\"\"\"\nFunction to retrieve the signal universes.\n\nReturns:\n    JSON list of universe objects.\n\"\"\"\n```\n\n```\nget_categories_for_universe(universe: str)\n\"\"\"\nFunction to retrieve the list of categories corresponding to the passed universe.\n\nArgs:\n    universe (str): One of the signal universes. Available options are the \"name\" fields from the list of universe objects obtained by calling the get_signal_universes method.\n\nReturns:\n    JSON list of category objects.\n\"\"\"\n```\n\n```\nget_categories_for_universe_id(universe_id: int)\n\"\"\"\nFunction to retrieve the list of categories corresponding to the passed universe id.\n\nArgs:\n    universe_id (int): One of the signal universes. Available options are the \"universeId\" fields from the list of universe objects obtained by calling the get_signal_universes method.\n\nReturns:\n    JSON list of category objects.\n\"\"\"\n```\n\n```\nget_signals_for_universe_cat_pair(universe: str, category: str)\n\"\"\"\nFunction to retrieve all signals belonging to the given universe, category pair.\n\nArgs:\n    universe (str): One of the signal universes. Available options are the \"name\" fields from the list of universe objects obtained by calling the get_signal_universes method.\n    category (str): One of the categories of the above universe. Available options are the \"name\" fields from the list of category objects obtained by calling get_categories_for_universe(universe).\n\nReturns:\n    JSON list of signal objects.\n\"\"\"\n```\n\n```\nget_signals_for_universe_cat_pair_id(universe_id: int, category_id: int)\n\"\"\"\nFunction to retrieve all signals belonging to the given universe, category pair by id.\n\nArgs:\n    universe_id (int): One of the signal universes. Available options are the \"universeId\" fields from the list of universe objects obtained by calling the get_signal_universes method.\n    category_id (int): One of the categories of the above universe. Available options are the \"categoryId\" fields from the list of category objects obtained by calling get_categories_for_universe_id(universe_id).\n\nReturns:\n    JSON list of signal objects.\n\"\"\"\n```\n\n```\nget_market_categories()\n\"\"\"\nFunction to retrieve the list of all market categories.\n\nReturns:\n    JSON list of market category objects.\n\"\"\"\n```\n\n```\nget_markets_for_market_cat(market_category: str)\n\"\"\"\nFunction to retrieve the list of markets corresponding to the passed market category.\n\nArgs:\n    market_category (str): One of the market categories. Available options are the \"name\" fields from the list of market category objects obtained by calling the get_market_categories method.\n\nReturns:\n    JSON list of market objects.\n\"\"\"\n```\n\n```\nget_markets_for_market_cat_id(market_category_id: int)\n\"\"\"\nFunction to retrieve the list of markets corresponding to the passed market category id.\n\nArgs:\n    market_category_id (int): One of the market categories. Available options are the \"marketCategoryId\" fields from the list of market category objects obtained by calling the get_market_categories method.\n\nReturns:\n    JSON list of market objects.\n\"\"\"\n```\n\n```\nget_markets_for_signal(signal: str)\n\"\"\"\nFunction to retrieve the list of markets corresponding to the passed signal.\n\nArgs:\n    signal (str): One of the signals. Available options are the \"name\" fields from the list of signals objects obtained by calling the get_signals_catalogue method.\n\nReturns:\n    JSON list of market objects.\n\"\"\"\n```\n\n```\nget_markets_for_signal_id(signal_id: int)\n\"\"\"\nFunction to retrieve the list of markets corresponding to the passed signal id.\n\nArgs:\n    signal_id (int): One of the signals. Available options are the \"signalId\" fields from the list of signals objects obtained by calling the get_signals_catalogue method.\n\nReturns:\n    JSON list of market objects.\n\"\"\"\n```\n\n```\nget_signals_for_market(market: str)\n\"\"\"\nFunction to retrieve the list of signals available for the given market.\n\nArgs:\n    market (str): One of the valid markets. Available options are the \"name\" fields from the list of market objects obtained by calling the get_all_markets method.\n\nReturns:\n    JSON list of signal objects.\n\"\"\"\n```\n\n```\nget_signals_for_market_id(class_id: int)\n\"\"\"\nFunction to retrieve the list of signals available for the given market.\n\nArgs:\n    class_id (int): One of the valid markets. Available options are the \"classId\" fields from the list of market objects obtained by calling the get_all_markets method.\n\nReturns:\n    JSON list of signal objects.\n\"\"\"\n```\n\n```\nget_research_types_for_signal_market_pair(signal: str, market: str)\n\"\"\"\nFunction to retrieve the list of research types corresponding to the passed signal and market.\n\nArgs:\n    signal (str): One of the signals. Available options are the \"name\" fields from the list of signal objects obtained by calling the get_signals_catalogue method.\n    market (str): One of the valid markets for the above signal. Available options are the \"name\" fields from the list of market objects obtained by calling the get_markets_for_signal(signal) method.\n\nReturns:\n    JSON list of research type objects.\n\"\"\"\n```\n\n```\nget_research_types_for_signal_market_pair_id(signal_id: int, market_id: int)\n\"\"\"\nFunction to retrieve the list of research types corresponding to the passed signal id and market id.\n\nArgs:\n    signal_id (int): One of the signals. Available options are the \"signalId\" fields from the list of signal objects obtained by calling the get_signals_catalogue method.\n    market_id (int): One of the valid markets for the above signal. Available options are the \"classId\" fields from the list of market objects obtained by calling the get_markets_for_signal_id(signal_id) method.\n\nReturns:\n    JSON list of research type objects.\n\"\"\"\n```\n\n```\nget_signal_series(\n    signal: str,\n    market: str,\n    research_type: str,\n    last_date_only=False,\n    start_date=None,\n    end_date=None,\n    frequency_key=None,\n    )\n\"\"\"\nFunction to retrieve a signal time series.\n\nArgs:\n    signal (str): Options are \"name\" fields from list of signal objects returned by get_signals_catalogue.\n    market (str): Options are \"name\" fields from list of market objects returned by get_markets_for_signal(signal).\n    research_type (str): Options are \"name\" fields from list of research type objects returned by get_research_types_for_signal_market_pair(signal, market).\n    last_date_only (bool, optional): Flag indicating if only the last date of the time series is desired.\n    start_date (str, optional): Start date of the series in ISO format YYYY-MM-DD.\n    end_date (str, optional): End date of the series in ISO format YYYY-MM-DD.\n    frequency_key (str): One of the desired frequencies (None is for all values available, undetermined frequency):\n\n    D, (Daily - all days)\n    WD, (Weekdays)\n    W_MON, (Weekly data on Mondays)\n    W_TUE, (Weekly data on Tuesdays)\n    W_WED, (Weekly data on Wednesdays)\n    W_THU, (Weekly data on Thursdays)\n    W_FRI, (Weekly data on Fridays)\n    W_SAT, (Weekly data on Saturdays)\n    W_SUN, (Weekly data on Sundays)\n    M, (Monthly data - end of month)\n    MS, (Monthly data - start of month)\n    Q, (Quarterly data - end of quarter)\n    QS (Quarterly data - start of quarter)\n\nExamples:\n    >>> client.get_signal_series('Crossborder Flow', 'US', 'Back-test Level', last_date_only=False, start_date='2016-1-1', end_date='2020-10-16')\n\nReturns:\n    Time series object.\n\"\"\"\n```\n\n```\nget_signal_series_id(\nsignal_id: int,\nmarket_id: int,\nresearch_type_id: int,\nlast_date_only=False,\nstart_date=None,\nend_date=None,\nfrequency_key=None\n)\n\"\"\"\nFunction to retrieve a signal time series by ids.\n\nArgs:\n    signal_id (int): Options are \"signalId\" fields from list of signal objects returned by get_signals_catalogue.\n    market_id (int): Options are \"classId\" fields from list of market objects returned by get_markets_for_signal_id(signal_id).\n    research_type_id (int): Options are \"researchTypeId\" fields from list of research type objects returned by get_research_types_for_signal_market_pair_id(signal_id, market_id).\n    last_date_only (bool): Flag indicating if only the last date of the time series is desired.\n    start_date (str): Start date of the series in ISO format YYYY-MM-DD.\n    end_date (str): End date of the series in ISO format YYYY-MM-DD.\n    frequency_key (str): One of the desired frequencies (None is for all values available, undetermined frequency):\n\n    D, (Daily - all days)\n    WD, (Weekdays)\n    W_MON, (Weekly data on Mondays)\n    W_TUE, (Weekly data on Tuesdays)\n    W_WED, (Weekly data on Wednesdays)\n    W_THU, (Weekly data on Thursdays)\n    W_FRI, (Weekly data on Fridays)\n    W_SAT, (Weekly data on Saturdays)\n    W_SUN, (Weekly data on Sundays)\n    M, (Monthly data - end of month)\n    MS, (Monthly data - start of month)\n    Q, (Quarterly data - end of quarter)\n    QS (Quarterly data - start of quarter)\n\nExamples:\n    >>> client.get_signal_series_id(8, 137, 94, last_date_only=False, start_date='2016-1-1', end_date='2020-10-16')\n\nReturns:\n    Time series object.\n\"\"\"\n```\n\n```\njson_to_df(json)\n\"\"\"\nFunction to convert JSON/JSON list to a pandas.DataFrame object.\n\nArgs:\n    json: The JSON to be converted - this is the format all methods return.\n\nReturns:\n    The data contained in the JSON cast as a DataFrame.\n\n    If the data is a time series, the dataframe will be indexed by datetimes and there\n    will be a 'values' column containing the value corresponding to each DateTimeIndex.\n\"\"\"\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cmqd/cm-api-python-sdk",
    "keywords": "cmqd clearmacro python api sdk",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmqd",
    "package_url": "https://pypi.org/project/cmqd/",
    "platform": "",
    "project_url": "https://pypi.org/project/cmqd/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cmqd/cm-api-python-sdk/issues",
      "Documentation": "https://github.com/cmqd/cm-api-python-sdk",
      "Homepage": "https://github.com/cmqd/cm-api-python-sdk",
      "Source Code": "https://github.com/cmqd/cm-api-python-sdk"
    },
    "release_url": "https://pypi.org/project/cmqd/1.0.4/",
    "requires_dist": [
      "requests[security] (>=2.20) ; python_version < \"3.0\"",
      "pyjwt (>=1.7.1) ; python_version > \"3.0\"",
      "requests (>=2.20) ; python_version >= \"3.0\"",
      "pandas (>=1.1.3) ; python_version >= \"3.0\""
    ],
    "requires_python": "",
    "summary": "Python bindings for the ClearMacro API",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9797697,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a530b97f4fb11632ee6b2d89fe039c8ac28e273c3489d7b347ac0bebe83c1df4",
          "md5": "5a8844bbe7fa58097f103e7759fb2bc7",
          "sha256": "2b4325e430fdc077c98d3786dc8befadb87e90781d05a9d6b1d6f2e6f95c175e"
        },
        "downloads": -1,
        "filename": "cmqd-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a8844bbe7fa58097f103e7759fb2bc7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7205,
        "upload_time": "2020-10-15T14:55:20",
        "upload_time_iso_8601": "2020-10-15T14:55:20.816177Z",
        "url": "https://files.pythonhosted.org/packages/a5/30/b97f4fb11632ee6b2d89fe039c8ac28e273c3489d7b347ac0bebe83c1df4/cmqd-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc32fa0a5c6514389a30fccc8db256240a9f42e43618fd29f6f77dfdbf5b907a",
          "md5": "c107a4a8ec50fac81e58aadd5eeac5b1",
          "sha256": "fe463e78fa7cddbe82d46df6b00e4935e8cae313bb705452ad000c20db5eac7b"
        },
        "downloads": -1,
        "filename": "cmqd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c107a4a8ec50fac81e58aadd5eeac5b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6635,
        "upload_time": "2020-10-15T14:55:23",
        "upload_time_iso_8601": "2020-10-15T14:55:23.295963Z",
        "url": "https://files.pythonhosted.org/packages/cc/32/fa0a5c6514389a30fccc8db256240a9f42e43618fd29f6f77dfdbf5b907a/cmqd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7506ce942ea26ff1c6c2585298c3e741deadb5f3bf91bc75c6e46b52ac6b63d",
          "md5": "93a1ccbf049e208546937cdd04423aa8",
          "sha256": "3cae39515e8d53a17014be949345117334dd0b6514adb595b77a4e3a7350474d"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93a1ccbf049e208546937cdd04423aa8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20435,
        "upload_time": "2020-10-30T10:12:28",
        "upload_time_iso_8601": "2020-10-30T10:12:28.106784Z",
        "url": "https://files.pythonhosted.org/packages/b7/50/6ce942ea26ff1c6c2585298c3e741deadb5f3bf91bc75c6e46b52ac6b63d/cmqd-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de75fc2700145ca2d09af505d6cf0440147eb16146c964b193ccc99ae19ee1eb",
          "md5": "9ddc33dfb55bc7dd9d9b14fab36d0b83",
          "sha256": "7c9f5c0c3ac88b6859504c9700446543f65f640e50defd4090a1fc64476bf7be"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9ddc33dfb55bc7dd9d9b14fab36d0b83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13885,
        "upload_time": "2020-10-30T10:12:29",
        "upload_time_iso_8601": "2020-10-30T10:12:29.470780Z",
        "url": "https://files.pythonhosted.org/packages/de/75/fc2700145ca2d09af505d6cf0440147eb16146c964b193ccc99ae19ee1eb/cmqd-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c57dad67f22ff1d08fe2a9ed171d84992ddc1019ed6457d70827039ae456915d",
          "md5": "ac7ce93149ebffcc8a795149c20d858d",
          "sha256": "2b3690de442a0d39eac79912ed353d092b72631bd14504fbd3c8bc825cc94c8f"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac7ce93149ebffcc8a795149c20d858d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20439,
        "upload_time": "2020-11-02T16:10:48",
        "upload_time_iso_8601": "2020-11-02T16:10:48.810875Z",
        "url": "https://files.pythonhosted.org/packages/c5/7d/ad67f22ff1d08fe2a9ed171d84992ddc1019ed6457d70827039ae456915d/cmqd-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d03522b61a38a69baadaeb6f80e16df681f2d58ce9473f611553e0d0d8b4dec1",
          "md5": "b11e1cc192e99aef0f2b96e084bbc7e7",
          "sha256": "57b6f5b0c3fac4587a6fd58a7ff78ec4a24c181b55465269cbf62e0365e793b1"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b11e1cc192e99aef0f2b96e084bbc7e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13890,
        "upload_time": "2020-11-02T16:10:50",
        "upload_time_iso_8601": "2020-11-02T16:10:50.930780Z",
        "url": "https://files.pythonhosted.org/packages/d0/35/22b61a38a69baadaeb6f80e16df681f2d58ce9473f611553e0d0d8b4dec1/cmqd-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16df29d733af8cfb0c34ebc5f1531d1af8a871a0417c203e570364f5db4ba8e7",
          "md5": "2c7100d8e17fa33ec7d96011fa3eed2f",
          "sha256": "a77d849091d745690b4104a2409decb298f71fc4d1deb300d97ebd784162d6e2"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c7100d8e17fa33ec7d96011fa3eed2f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20648,
        "upload_time": "2020-11-03T10:35:28",
        "upload_time_iso_8601": "2020-11-03T10:35:28.502782Z",
        "url": "https://files.pythonhosted.org/packages/16/df/29d733af8cfb0c34ebc5f1531d1af8a871a0417c203e570364f5db4ba8e7/cmqd-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "223b68b277e3da535c06ac212bf89f265c10dd14507cc8b6eb54f665015d3a88",
          "md5": "4072453f8e365a9f0aabf0887abb4200",
          "sha256": "b717efb5b29b87423dcb4ed5750478acb56594ebef7be790591b6eb2c31536f1"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4072453f8e365a9f0aabf0887abb4200",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14291,
        "upload_time": "2020-11-03T10:35:30",
        "upload_time_iso_8601": "2020-11-03T10:35:30.566337Z",
        "url": "https://files.pythonhosted.org/packages/22/3b/68b277e3da535c06ac212bf89f265c10dd14507cc8b6eb54f665015d3a88/cmqd-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc74d938b862d091b58f369b2f22a3e111fb346ddec616c606eaff71315c7504",
          "md5": "5f7935402adaf8b1a21287c8eb3eba39",
          "sha256": "380a9e727288d7f21eea8b604bab87bb7008ae62d915344e7947d723b2a29ef3"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f7935402adaf8b1a21287c8eb3eba39",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20710,
        "upload_time": "2020-11-05T14:30:18",
        "upload_time_iso_8601": "2020-11-05T14:30:18.231538Z",
        "url": "https://files.pythonhosted.org/packages/dc/74/d938b862d091b58f369b2f22a3e111fb346ddec616c606eaff71315c7504/cmqd-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35fd65cd2be6344eb31d13c9c73154b531a77c189a2626dcea9c81e0752c7c71",
          "md5": "6281bc757d2f317cfee4042c8c6f67ad",
          "sha256": "8aad0744f94c998908d5de506f60f28b43d02c4410d680d3cbdac25e237841b4"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6281bc757d2f317cfee4042c8c6f67ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14359,
        "upload_time": "2020-11-05T14:30:20",
        "upload_time_iso_8601": "2020-11-05T14:30:20.311440Z",
        "url": "https://files.pythonhosted.org/packages/35/fd/65cd2be6344eb31d13c9c73154b531a77c189a2626dcea9c81e0752c7c71/cmqd-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa2dcaf8ed3866bb64b208a768e3ccc8298605dc9bc3a5f7cc4dc93ce1282c7e",
          "md5": "77d251338b3b0752503e1c14cbac3b62",
          "sha256": "df9ac60aae505ce5dbb0eafc92523228de0d333c9d0689879541a522fd0fc251"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77d251338b3b0752503e1c14cbac3b62",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20731,
        "upload_time": "2021-03-17T13:43:45",
        "upload_time_iso_8601": "2021-03-17T13:43:45.627592Z",
        "url": "https://files.pythonhosted.org/packages/aa/2d/caf8ed3866bb64b208a768e3ccc8298605dc9bc3a5f7cc4dc93ce1282c7e/cmqd-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c39259f732d6b2a32e4f5015ccf9f935b1fdaf8438ab3cb0d4bd9fe12116c4fd",
          "md5": "047cc22b4405ed1a54e57ff9536aa33e",
          "sha256": "bd405b269d26ab7994ce9beccd74d433bee1d5d65877e0346ab8d220156dbbe5"
        },
        "downloads": -1,
        "filename": "cmqd-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "047cc22b4405ed1a54e57ff9536aa33e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14378,
        "upload_time": "2021-03-17T13:43:46",
        "upload_time_iso_8601": "2021-03-17T13:43:46.737379Z",
        "url": "https://files.pythonhosted.org/packages/c3/92/59f732d6b2a32e4f5015ccf9f935b1fdaf8438ab3cb0d4bd9fe12116c4fd/cmqd-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa2dcaf8ed3866bb64b208a768e3ccc8298605dc9bc3a5f7cc4dc93ce1282c7e",
        "md5": "77d251338b3b0752503e1c14cbac3b62",
        "sha256": "df9ac60aae505ce5dbb0eafc92523228de0d333c9d0689879541a522fd0fc251"
      },
      "downloads": -1,
      "filename": "cmqd-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77d251338b3b0752503e1c14cbac3b62",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 20731,
      "upload_time": "2021-03-17T13:43:45",
      "upload_time_iso_8601": "2021-03-17T13:43:45.627592Z",
      "url": "https://files.pythonhosted.org/packages/aa/2d/caf8ed3866bb64b208a768e3ccc8298605dc9bc3a5f7cc4dc93ce1282c7e/cmqd-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c39259f732d6b2a32e4f5015ccf9f935b1fdaf8438ab3cb0d4bd9fe12116c4fd",
        "md5": "047cc22b4405ed1a54e57ff9536aa33e",
        "sha256": "bd405b269d26ab7994ce9beccd74d433bee1d5d65877e0346ab8d220156dbbe5"
      },
      "downloads": -1,
      "filename": "cmqd-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "047cc22b4405ed1a54e57ff9536aa33e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14378,
      "upload_time": "2021-03-17T13:43:46",
      "upload_time_iso_8601": "2021-03-17T13:43:46.737379Z",
      "url": "https://files.pythonhosted.org/packages/c3/92/59f732d6b2a32e4f5015ccf9f935b1fdaf8438ab3cb0d4bd9fe12116c4fd/cmqd-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}