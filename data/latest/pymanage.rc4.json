{
  "info": {
    "author": "Bruno Rocha, Jorge Cardona",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Manage\n\n[![Pipeline](https://gitlab.com/jorgeecardona/python-manage/badges/master/pipeline.svg)](https://gitlab.com/jorgeecardona/python-manage/-/commits/master)\n[![Version](https://img.shields.io/pypi/v/pymanage.svg)](https://pypi.python.org/pypi/pymanage)\n[![Supported Versions](https://img.shields.io/pypi/pyversions/pymanage.svg)](https://pypi.org/project/pymanage)\n[![Documentation Status](https://readthedocs.org/projects/python-manage/badge/?version=latest)](https://python-manage.readthedocs.io/en/latest/?badge=latest)\n\n\n\n## Features\n\nWith **manage** you add a **command line manager** to your Python project and\nalso it comes with an interactive shell with iPython support.\n\nAll you have to do is **init** your project directory (creating the manage.yml file)\n\n```console\n$ pip install manage\n$ cd /my_project_root_folder\n$ manage init\ncreating manage.yml....\n```\n\nThe file **manage.yml** describes how **manage** command should discover your app modules and custom commands and also it defines which objects should be loaded in to the **shell**\n\n***Note:** Windows users may need to install proper version of PyYAML depending on the version of that thing you call an operating system, installable available in: https://pypi.python.org/pypi/PyYAML **or consider using Linux and don't worry about this as everything works well in Linux except games, photoshop and solitary game :)***\n\n## The Shell\n\nBy default the command `manage shell` is included, it is a simple Python REPL console with some configurable options.\n\nYou can change the banner message to say anything you want, **e.g: \"Welcome to my shell!\"** and you can also specify some objects to be automatically imported in to the shell context so when you enter in to the shell you already have your project's common objects available.\n\nAlso you can specify a custom function to run or a string based code block to run, useful to init and configure the objects.\n\n### Consoles\n\n`manage shell` can start different consoles by passing the options\n\n- `manage shell --ipython`  - This is the default (if ipython installed)\n- `manage shell --ptpython`\n- `manage shell --bpython`\n- `manage shell --python` - This is the **default Python console** including support for autocomplete. (will be default when no other is installed)\n\nThe first thing you can do with **manage** is customizing the objects that will be automatically loaded in to shell, saving you from importing and initializing a lot of stuff every time you need to play with your app via console.\n\nEdit **manage.yml** with:\n```yaml\nproject_name: My Awesome Project\nhelp_text: |\n  This is the {project_name} interactive shell!\nshell:\n  console: bpython\n  readline_enabled: false  # MacOS has no readline completion support\n  banner:\n    enabled: true\n    message: 'Welcome to {project_name} shell!'\n  auto_import:\n    display: true\n    objects:\n      my_system.config.settings:\n      my_system.my_module.MyClass:\n      my_system.my_module.OtherClass:\n        as: NiceClass\n      sys.path:\n        as: sp\n        init:\n          insert:\n            args:\n              - 0\n              - /path/to/be/added/automatically/to/sys/path\n  init_script: |\n    from my_system.config import settings\n    print(\"Initializing settings...\")\n    settings.configure()\n```\n\nThen the above **manage.yaml** will give you a shell like this:\n\n```console\n$ manage shell\nInitializing settings...\nWelcome to My Awesome Project shell!\n    Auto imported: ['sp', 'settings', 'MyClass', 'NiceCLass']\n>>>  NiceClass. <tab> # autocomplete enabled\n```\n\nWatch the demo:\n\n[![asciicast](https://asciinema.org/a/51042.png)](https://asciinema.org/a/51042)\n\nCheck more examples in: [manage/tree/master/examples/](manage/tree/master/examples/)\n\nThe famous **naval fate** example (used in docopt and click) is in: [manage/tree/master/examples/naval](manage/tree/master/examples/naval)\n\n\n## Projects using manage\n\n- Quokka CMS (A Flask based CMS) is using manage\n- Red Hat Satellite QE tesitng framework (robottelo) is using manage\n\n## Custom Commands\n\nSometimes you need to add custom commands in to your project\ne.g: A command to add users to your system:\n```console\n$ manage create_user --name=Bruno --passwd=1234\nCreating the user...\n```\n\n**manage** has some different ways for you to define custom commands,\nyou can use **click commands** defined in your project modules,\nyou can also use **function_commands** defined anywhere in your project,\nand if really needed can define **inline_commands** inside the **manage.yml** file\n\n### 1. Using a custom click_commands module (single file)\n\nLets say you have a commands module in your application, you write your custom command there and **manage** will load it\n\n```python\n# myproject/commands.py\nimport click\n@click.command()\n@click.option('--name')\n@click.option('--passwd')\ndef create_user(name, passwd):\n    \"\"\"Create a new user\"\"\"\n    click.echo('Creating the user...')\n    mysystem.User.create(name, password)\n```\n\nNow you go to your **manage.yml** or **.manage.yml** and specify your custom command module.\n\n```yaml\nclick_commands:\n  - module: commands\n```\n\nNow you run **manage --help**\n\n```console\n$ manage --help\n...\nCommands:\n  create_user  Create a new user\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n```\n\n#### Using a click_commands package (multiple files)\n\nIt is common to have different files to hold your commands so you may prefer having\na **commands/** package and some **python** modules inside it to hold commands.\n\n```python\n# myproject/commands/user.py\nimport click\n@click.command()\n@click.option('--name')\n@click.option('--passwd')\ndef create_user(name, passwd):\n    \"\"\"Create a new user\"\"\"\n    click.echo('Creating the user...')\n    mysystem.User.create(name, password)\n```\n\n```python\n# myproject/commands/system.py\nimport click\n@click.command()\ndef clear_cache():\n    \"\"\"Clear the system cache\"\"\"\n    click.echo('The cache will be erased...')\n    mysystem.cache.clear()\n```\n\nSo now you want to add all those commands to your **manage** editing your manage file with.\n\n```yaml\nclick_commands:\n  - module: commands\n```\n\nNow you run **manage --help**  and you have commands from both modules\n\n```console\n$ manage --help\n...\nCommands:\n  create_user  Create a new user\n  clear_cache  Clear the system cache\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n```\n\n#### Custom click_command names\n\nSometimes the name of commands differ from the name of the function so you can\ncustomize it.\n\n```yaml\nclick_commands:\n  - module: commands.system\n    config:\n      clear_cache:\n        name: reset_cache\n        help_text: This resets the cache\n  - module: commands.user\n    config:\n      create_user:\n        name: new_user\n        help_text: This creates new user\n```\n\n#### Having different namespaces\n\nIf customizing the name looks too much work for you, and you are only trying to handle naming conflicts you can use namespaced commands.\n\n```yaml\nnamespaced: true\nclick_commands:\n  - module: commands\n```\n\nNow you run **manage --help** and you can see all the commands in the same module will be namespaced by **modulename**\n\n```console\n$ manage --help\n...\nCommands:\n  user_create_user    Create a new user\n  system_clear_cache  Clear the system cache\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n```\n\n#### And you can even customize namespace for each module separately\n\n*If **namespaced** is true all commands will be namespaced, set it to false in order to define separately*\n\n```yaml\nclick_commands:\n  - module: commands.system\n    namespace: sys\n  - module: commands.user\n    namespace: user\n```\n\nNow you run **manage --help** and you can see all the commands in the same module will be namespaced.\n\n```console\n$ manage --help\n...\nCommands:\n  user_create_user  Create a new user\n  sys_clear_cache  Clear the system cache\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n```\n\n### 2. Defining your inline commands in manage file directly\n\nSometimes your command is so simple that you do not want (or can't) have a custom module,\nso you can put all your commands in yaml file directly.\n\n```yaml\ninline_commands:\n  - name: clear_cache\n    help_text: Executes inline code to clear the cache\n    context:\n      - sys\n      - pprint\n    options:\n      --days:\n        default: 100\n    code: |\n      pprint.pprint({'clean_days': days, 'path': sys.path})\n```\n\nNow running **manage --help**\n\n```console\n$ manage --help\n...\nCommands:\n  clear_cache  Executes inline code to clear the cache\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n```\n\nAnd you can run using\n\n```console\n$ manage clear_cache --days 15\n```\n\n### 3. Using general functions as commands\n\nAnd if you already has some defined function (any callable works).\n\n```python\n# my_system.functions.py\ndef create_user(name, password):\n    print(\"Creating user %s\" % name)\n```\n\n```yaml\nfunction_commands:\n  - function: my_system.functions.create_user\n    name: new_user\n    help_text: Create new user\n    options:\n      --name:\n        required: true\n      --password:\n        required: true\n```\n\nNow running **manage --help**\n\n```console\n$ manage --help\n...\nCommands:\n  new_user     Create new user\n  debug        Shows the parsed manage file\n  init         Initialize a manage shell in current...\n  shell        Runs a Python shell with context\n\n$ manage new_user --name=Bruno --password=1234\nCreating user Bruno\n```\n\n## Further Explanations\n\n- You can say, **how this is useful?**, There's no need to get a separate package and configure everything in yaml, just use iPython to do it. Besides, IPython configuration has a lot more options and capabilities.\n- So I say: Nice! **If you don't like it, dont't use it!**\n\n## Credits\n\n- This is inspired by **Django's manage.py command**\n- This is based on [click](http://click.pocoo.org)\n- This package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.\n\n## Similar projects\n\n- Cobra is a _manage_ for Go language https://github.com/spf13/cobra\n\n\n## History\n\n### 0.2 (2021-01-10)\n* Bump version.\n\n### 0.1.15 (2021-01-10)\n\n* Fork with minor fixes.\n* Update to bump2version.\n\n### 0.1.12 (2016-08-15)\n\n* Readline is optional because of MacOS compat\n\n### 0.1.11 (2016-08-15)\n\n* Submodules import\n* multiple 'as' names\n\n### 0.1.10 (2016-07-04)\n\n* Bpython added\n\n### 0.1.9 (2016-07-03)\n\n* Bpython added\n\n### 0.1.8 (2016-07-03)\n\n* Python 3 dict fixes\n\n### 0.1.7 (2016-06-26)\n\n* exec bug fix for py3\n\n### 0.1.6 (2016-06-26)\n\n* exec bug fix\n\n### 0.1.5 (2016-06-25)\n\n* added support to commands collector (see quokka cms)\n\n### 0.1.4 (2016-06-22)\n\n* Fix missing deps\n\n### 0.1.3 (2016-06-19)\n\n* Support to function_commands\n\n### 0.1.2 (2016-06-17)\n\n* Support to inline_commands\n\n### 0.1.1 (2016-06-14)\n\n* Support to custom and hidden manage_file\n\n### 0.1.0 (2016-06-09)\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jorgeecardona/pymanage",
    "keywords": "manage",
    "license": "ISC license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymanage",
    "package_url": "https://pypi.org/project/pymanage/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymanage/",
    "project_urls": {
      "Homepage": "https://gitlab.com/jorgeecardona/pymanage"
    },
    "release_url": "https://pypi.org/project/pymanage/0.1.15/",
    "requires_dist": [
      "Click (>=7.1)",
      "PyYAML (>=5.3)"
    ],
    "requires_python": "",
    "summary": "Command Line Manager + Interactive Shell for Python Projects",
    "version": "0.1.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9133871,
  "releases": {
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5adb4527aebbc52cb579d8341646858a371cbd6b54c1f428e2d61e6d6c8621a5",
          "md5": "a2c48eed1e9abac71a4e17d75d9f6541",
          "sha256": "0acaed1e58b890cc7cb65846269c80a0a5792c43e7b8e13a7c3ecff09edd4dfb"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2c48eed1e9abac71a4e17d75d9f6541",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12406,
        "upload_time": "2021-01-10T21:38:48",
        "upload_time_iso_8601": "2021-01-10T21:38:48.133438Z",
        "url": "https://files.pythonhosted.org/packages/5a/db/4527aebbc52cb579d8341646858a371cbd6b54c1f428e2d61e6d6c8621a5/pymanage-0.1.15-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96d077b2b382c9ead7426ace92c4afe4be35c3904cf7ef31aeb9a5b2c71917b9",
          "md5": "9f55a59795619b70e243a3959d316be4",
          "sha256": "4b10e131fa6b71c63ac5c9e284f09c4d9eb646beb338ee259a1ec3818fbd275a"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "9f55a59795619b70e243a3959d316be4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25832,
        "upload_time": "2021-01-10T21:38:49",
        "upload_time_iso_8601": "2021-01-10T21:38:49.185914Z",
        "url": "https://files.pythonhosted.org/packages/96/d0/77b2b382c9ead7426ace92c4afe4be35c3904cf7ef31aeb9a5b2c71917b9/pymanage-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c550d125a6c90723dbf4596f1805ad5549216e7c754219d57444ea363f1928d",
          "md5": "fd1f400527794eaa98f6ad153e09101e",
          "sha256": "a3136751f4522d5e0f252cf7e10e92f95542c5dcb3b374e40856d48ef1f995d5"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15.dev0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd1f400527794eaa98f6ad153e09101e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12463,
        "upload_time": "2021-01-10T17:36:40",
        "upload_time_iso_8601": "2021-01-10T17:36:40.617125Z",
        "url": "https://files.pythonhosted.org/packages/0c/55/0d125a6c90723dbf4596f1805ad5549216e7c754219d57444ea363f1928d/pymanage-0.1.15.dev0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a296d26bdedfe8dfa9fb459e04aa932edb616d811d27ff6eddf4fbfd5634b5fc",
          "md5": "fd2042d73a3b6f8d47b3a5e00c7c2a0d",
          "sha256": "eb5d2174029ae267b878768238a75b7ff1d37055fc3f0d54d1d2da06ba56a0b2"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd2042d73a3b6f8d47b3a5e00c7c2a0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25744,
        "upload_time": "2021-01-10T17:36:41",
        "upload_time_iso_8601": "2021-01-10T17:36:41.606864Z",
        "url": "https://files.pythonhosted.org/packages/a2/96/d26bdedfe8dfa9fb459e04aa932edb616d811d27ff6eddf4fbfd5634b5fc/pymanage-0.1.15.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09240473263d1dd679fd4b91c26c2749f72b2a23942a965798aaf55dd33a87b4",
          "md5": "5aa795ae63df39ba5fc9443cac31c793",
          "sha256": "089dbd83ecb6b65b8b31e41639b6f7f61c6e375427dc9f9dd5fb159e6be1f904"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15.dev1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5aa795ae63df39ba5fc9443cac31c793",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12463,
        "upload_time": "2021-01-10T21:03:55",
        "upload_time_iso_8601": "2021-01-10T21:03:55.828656Z",
        "url": "https://files.pythonhosted.org/packages/09/24/0473263d1dd679fd4b91c26c2749f72b2a23942a965798aaf55dd33a87b4/pymanage-0.1.15.dev1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afde5edcaaeb6afc2c05e5891fd0285f77f729e2759821e3b0f4fcc44a3c3a5c",
          "md5": "e9a53389681d347b4937543bd4abf22e",
          "sha256": "767f3110cd215a63929dc5e4b9c21c04fa4fc70f8a23a39e94c6078b20b3d62e"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.15.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9a53389681d347b4937543bd4abf22e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25751,
        "upload_time": "2021-01-10T21:03:57",
        "upload_time_iso_8601": "2021-01-10T21:03:57.197286Z",
        "url": "https://files.pythonhosted.org/packages/af/de/5edcaaeb6afc2c05e5891fd0285f77f729e2759821e3b0f4fcc44a3c3a5c/pymanage-0.1.15.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.16.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181ab0873eb057f25885a6dcecb46512c61c0738671f1c5d0ea194dd9b9067c4",
          "md5": "e4761564ec3ac50579ed0eba18053c11",
          "sha256": "f241aa8a0b0b8184d39509bc32e161f253df99fa57d794dc633676630b4e13ed"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.16.dev0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4761564ec3ac50579ed0eba18053c11",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12582,
        "upload_time": "2021-01-14T16:16:41",
        "upload_time_iso_8601": "2021-01-14T16:16:41.274959Z",
        "url": "https://files.pythonhosted.org/packages/18/1a/b0873eb057f25885a6dcecb46512c61c0738671f1c5d0ea194dd9b9067c4/pymanage-0.1.16.dev0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37c0e32d5dacfba22b8cf1665ec1adc62b87019f56580e3da4d4b6795e9dee7b",
          "md5": "09a4a2720b683694822b9cfb25899e92",
          "sha256": "39371dab315ce01a53bd30742377972f15c96a7a01b5d35e3497a70dabf73aac"
        },
        "downloads": -1,
        "filename": "pymanage-0.1.16.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "09a4a2720b683694822b9cfb25899e92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25729,
        "upload_time": "2021-01-14T16:16:42",
        "upload_time_iso_8601": "2021-01-14T16:16:42.415175Z",
        "url": "https://files.pythonhosted.org/packages/37/c0/e32d5dacfba22b8cf1665ec1adc62b87019f56580e3da4d4b6795e9dee7b/pymanage-0.1.16.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5adb4527aebbc52cb579d8341646858a371cbd6b54c1f428e2d61e6d6c8621a5",
        "md5": "a2c48eed1e9abac71a4e17d75d9f6541",
        "sha256": "0acaed1e58b890cc7cb65846269c80a0a5792c43e7b8e13a7c3ecff09edd4dfb"
      },
      "downloads": -1,
      "filename": "pymanage-0.1.15-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2c48eed1e9abac71a4e17d75d9f6541",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12406,
      "upload_time": "2021-01-10T21:38:48",
      "upload_time_iso_8601": "2021-01-10T21:38:48.133438Z",
      "url": "https://files.pythonhosted.org/packages/5a/db/4527aebbc52cb579d8341646858a371cbd6b54c1f428e2d61e6d6c8621a5/pymanage-0.1.15-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96d077b2b382c9ead7426ace92c4afe4be35c3904cf7ef31aeb9a5b2c71917b9",
        "md5": "9f55a59795619b70e243a3959d316be4",
        "sha256": "4b10e131fa6b71c63ac5c9e284f09c4d9eb646beb338ee259a1ec3818fbd275a"
      },
      "downloads": -1,
      "filename": "pymanage-0.1.15.tar.gz",
      "has_sig": false,
      "md5_digest": "9f55a59795619b70e243a3959d316be4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25832,
      "upload_time": "2021-01-10T21:38:49",
      "upload_time_iso_8601": "2021-01-10T21:38:49.185914Z",
      "url": "https://files.pythonhosted.org/packages/96/d0/77b2b382c9ead7426ace92c4afe4be35c3904cf7ef31aeb9a5b2c71917b9/pymanage-0.1.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}