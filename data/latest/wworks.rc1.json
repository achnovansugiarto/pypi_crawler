{
  "info": {
    "author": "Mehdi LAKBIR",
    "author_email": "mehdi.lakbir@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# wworks\n> a light multiprocessing/multithreading work dispatcher for python.\n\n[![Generic badge](https://img.shields.io/badge/python-3.7%20|%203.8%20|%203.9-0b7cbc.svg)](https://shields.io/)\n[![GitLab tags](https://badgen.net/github/tags/LMKA/wworks/)](https://github.com/LMKA/wworks/-/tags)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nwworks (Wrapped Works) is a work manager that uses both ProcessPoolExecutor and ThreadPoolExecutor to dispatch work by workload over processes and/or threads.\n\n\n## Installation\n\nCheck your python version (must be >= 3.7)\n\n```sh\n> python --version\nPython 3.8.12\n```\n\nInstall wworks package\n\n```sh\n> pip install wworks\n```\n\n\n## Usage examples\n\n<details open> \n    <summary markdown=\"span\"> WorkManager.<b>work</b>(<b>work_name</b>, <b>work_to_do</b>, <b>work_data</b>) </summary>\n\nUse WorkManager.<b>work</b> to make multithreading for given function.\n\n```python\nfrom wworks.swworks import WorkManager\n\ndef multiply(x, y):\n    return x*y\n\n# Build 10 tuples from (0, 0) to (9, 9)\nwork_data = [(x, x) for x in range(10)]\nresults = WorkManager().work(\"multiply\", multiply, work_data)\nfor (task_name, task_data, task_result) in results:\n    print(f\"{task_name} : multiply{task_data} => {task_result}\")\n```\n\n```\nTask #0 : multiply(0, 0) => 0\nTask #1 : multiply(1, 1) => 1\nTask #2 : multiply(2, 2) => 4\nTask #3 : multiply(3, 3) => 9\nTask #4 : multiply(4, 4) => 16\nTask #5 : multiply(5, 5) => 25\nTask #6 : multiply(6, 6) => 36\nTask #7 : multiply(7, 7) => 49\nTask #8 : multiply(8, 8) => 64\nTask #9 : multiply(9, 9) => 81\n```\nIn this case, WorkManager create 10 tasks (threads) to process.\n\n</details>\n\n<details open> \n    <summary markdown=\"span\"> WorkManager.<b>chunks</b>(<b>lst</b>, <b>n</b>) </summary>\n\nUse WorkManager.<b>chunks</b> to yield n-sized chunks from lst.\n```python\nfrom wworks.swworks import WorkManager\n\n# Build 10 tuples from (0, 0) to (9, 9)\nwork_data = [(x, x) for x in range(10)]\nresults = WorkManager().chunks(work_data, 4)\nfor i, chunk in enumerate(results):\n    print(f\"Chunk #{i}\")\n    print(chunk)\n```\n\n```\nChunk #0\n[(0, 0), (1, 1), (2, 2), (3, 3)]\nChunk #1\n[(4, 4), (5, 5), (6, 6), (7, 7)]\nChunk #2\n[(8, 8), (9, 9)]\n```\nIn this case, WorkManager yield 4-chunks from all provided tuples.\n\n</details>\n\n<details open> \n    <summary markdown=\"span\"> WorkManager.<b>dispatch</b>(<b>work_to_do</b>, <b>work_data</b>, <b>workload</b>=4) </summary>\n\nUse WorkManager.<b>dispatch</b> to make chunked-by-process, multithreading for given function.\n```python\nfrom wworks.swworks import WorkManager\n\ndef multiply(x, y):\n    return x*y\n\n# Build 10 tuples from (0, 0) to (9, 9)\nwork_data = [(x, x) for x in range(10)]\nresults = WorkManager().dispatch(multiply, work_data)\nfor (worker_name, worker_result) in results:\n    print(worker_name)\n    for (task_name, task_data, task_result) in worker_result:\n        print(f\" - {task_name} : multiply{task_data} => {task_result}\")\n```\n\n```\nWorker #0\n - Task #0 : multiply(0, 0) => 0\n - Task #1 : multiply(1, 1) => 1\n - Task #2 : multiply(2, 2) => 4\n - Task #3 : multiply(3, 3) => 9\nWorker #1\n - Task #0 : multiply(4, 4) => 16\n - Task #1 : multiply(5, 5) => 25\n - Task #2 : multiply(6, 6) => 36\n - Task #3 : multiply(7, 7) => 49\nWorker #2\n - Task #0 : multiply(8, 8) => 64\n - Task #1 : multiply(9, 9) => 81\n```\nIn this case, WorkManager create 3 workers (processes) and give each of them chunked work data respectivelly 4, 4 and 2 tasks to process.\n\n</details>\n\n\n## Release History\n\n* 0.1.0\n    * First version of wworks package\n\n\n## Meta\n\n<b>Mehdi LAKBIR</b>\n\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/bukotsunikki.svg?style=social&label=Follow%20%40mehdilakbir)](https://twitter.com/mehdilakbir)\n\nDistributed under the MIT license. See [LICENSE](https://github.com/LMKA/wworks/blob/master/LICENSE) for more information.\n\n[https://https://github.com/LMKA/wworks](https://https://github.com/LMKA/wworks)\n\n\n\n## Contributing\n\n1. Fork it (<https://github.com/LMKA/wworks/fork>)\n2. Create your feature branch (`git checkout -b feature/fooBar`)\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\n4. Push to the branch (`git push origin feature/fooBar`)\n5. Create a new Pull Request\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LMKA/wworks",
    "keywords": "python,light,multiprocessing,multithreading,ProcessPoolExecutor,ThreadPoolExecutor",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wworks",
    "package_url": "https://pypi.org/project/wworks/",
    "platform": "",
    "project_url": "https://pypi.org/project/wworks/",
    "project_urls": {
      "Homepage": "https://github.com/LMKA/wworks"
    },
    "release_url": "https://pypi.org/project/wworks/0.1.0/",
    "requires_dist": [
      "tqdm"
    ],
    "requires_python": ">=3.7",
    "summary": "a light multiprocessing/multithreading work dispatcher for python.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11875680,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f6f01a1acc49db6572ecdff5c67f442874758cf0567c8748adb2789041a8508",
          "md5": "1e360432a8fcadd495b616e79be7b6ae",
          "sha256": "8bb1225033bd831eaa281a73c914191f93db5a80d3f02197ea2ccede83bdfafa"
        },
        "downloads": -1,
        "filename": "wworks-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e360432a8fcadd495b616e79be7b6ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6496,
        "upload_time": "2021-10-30T03:39:34",
        "upload_time_iso_8601": "2021-10-30T03:39:34.448356Z",
        "url": "https://files.pythonhosted.org/packages/0f/6f/01a1acc49db6572ecdff5c67f442874758cf0567c8748adb2789041a8508/wworks-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e13cbd8858c81d548ffee2087fae892f3faf8d43cfcb4b8f7e96a3fa00efddb",
          "md5": "656b34437ab122ca3a48594ed23f4ced",
          "sha256": "58a613e47db4bd9098da734fecece33f3a4cccf1b27a3ec8b0964ccc1e7b4daa"
        },
        "downloads": -1,
        "filename": "wworks-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "656b34437ab122ca3a48594ed23f4ced",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6723,
        "upload_time": "2021-10-30T03:39:36",
        "upload_time_iso_8601": "2021-10-30T03:39:36.281375Z",
        "url": "https://files.pythonhosted.org/packages/9e/13/cbd8858c81d548ffee2087fae892f3faf8d43cfcb4b8f7e96a3fa00efddb/wworks-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f6f01a1acc49db6572ecdff5c67f442874758cf0567c8748adb2789041a8508",
        "md5": "1e360432a8fcadd495b616e79be7b6ae",
        "sha256": "8bb1225033bd831eaa281a73c914191f93db5a80d3f02197ea2ccede83bdfafa"
      },
      "downloads": -1,
      "filename": "wworks-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1e360432a8fcadd495b616e79be7b6ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6496,
      "upload_time": "2021-10-30T03:39:34",
      "upload_time_iso_8601": "2021-10-30T03:39:34.448356Z",
      "url": "https://files.pythonhosted.org/packages/0f/6f/01a1acc49db6572ecdff5c67f442874758cf0567c8748adb2789041a8508/wworks-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e13cbd8858c81d548ffee2087fae892f3faf8d43cfcb4b8f7e96a3fa00efddb",
        "md5": "656b34437ab122ca3a48594ed23f4ced",
        "sha256": "58a613e47db4bd9098da734fecece33f3a4cccf1b27a3ec8b0964ccc1e7b4daa"
      },
      "downloads": -1,
      "filename": "wworks-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "656b34437ab122ca3a48594ed23f4ced",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6723,
      "upload_time": "2021-10-30T03:39:36",
      "upload_time_iso_8601": "2021-10-30T03:39:36.281375Z",
      "url": "https://files.pythonhosted.org/packages/9e/13/cbd8858c81d548ffee2087fae892f3faf8d43cfcb4b8f7e96a3fa00efddb/wworks-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}