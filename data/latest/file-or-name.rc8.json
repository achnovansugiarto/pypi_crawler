{
  "info": {
    "author": "blester125",
    "author_email": "blester125@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering"
    ],
    "description": "------------\nFile Or Name\n------------\n\n\n.. image:: https://img.shields.io/pypi/v/file-or-name\n     :target: https://pypi.org/project/file-or-name/\n     :alt: PyPI Version\n\n.. image:: https://github.com/blester125/file-or-name/workflows/Unit%20Test/badge.svg\n     :target: https://github.com/blester125/file-or-name/actions\n     :alt: Actions Status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n     :target: https://github.com/psf/black\n     :alt: Code style: black\n\n.. image:: https://readthedocs.org/projects/file-or-name/badge/?version=latest\n    :target: https://file-or-name.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nTransparently handle input parameters that are either strings or pre-opened file objects.\n\n.. contents::\n   :local:\n   :depth: 2\n\nWhy?\n====\n\nwhen writing a function that reads or writes data to a file you often end up with something that looks like this\n\n.. code:: python\n\n    def read_my_cool_file(file_name):\n        with open(file_name) as f:\n            # Process file object f\n            ...\n\nThis has some problems.\n\n 1. It couples your data processing code and the opening of the file. This makes it harder to test. The thing you are\n    actually testing is the code that processes the but with code like this you need to cooridnate the opening of the\n    file during the test too. You need to either create fake data on dist of patch the open call.\n 2. It can't handle special files. If you have file in your special format but it uses ``latin-1`` encoding instead of\n    ``ascii`` how can you use that file? You can't. The opening of the file is sealed inside the function meaning the\n    user can't easily change the behavior. Practices like this force file interaction to only be done in one way.\n\nFor maximum flexibility and easy testability you probably want a function that looks like this\n\n.. code:: python\n\n    def read_my_cool_file(f):\n        # Process file object f\n        ...\n\nThis is nice because when testing you can use things like the ``io.StringIO`` objects to dynamically create test data.\nYou can also open files with different encodings and pass them in to get processed just like normal. This is akin to\ndependency injection scheme where the creation of the thing to be processed in done outside of the process it self to\nallow for swapping the exact format of the object. There is a usability draw back though. This way of processing files\nis onerous on the user. It turns single function calls into multi-line calls. This\n\n.. code:: python\n\n    data = read_my_cool_file(\"/path/to/my/imporant/data\")\n\nbecomes this\n\n.. code:: python\n\n    with open(\"/path/to/my/important/data\") as f:\n        data = read_my_cool_file(f)\n\nFunctions like this are also a divergence from a lot of other functions a user probably uses. Forcing the user to do\nthings differently for your library is a sure fire way to reduce adoption.\n\nWe need a way to accept both file paths (as strings) and file objects without having to write code to check which it is\nfor every io function we write.\n\nWhat?\n=====\n\nEnter ``file_or_name``.\n\n``file_or_name`` introduces a decorator ``@file_or_name`` that solves this issue for us.\n\nBy decorating a function with ``@file_or_name`` we can accept both strings and file objects. Our example above becomes\n\n.. code:: python\n\n    @file_or_name\n    def read_my_cool_file(f):\n        # Process file object f\n        ...\n\nAs the writer of the function we can write functions that assume they always get a file object as input. This means we\ncan stop opening files inside functions which makes them easier to test.\n\nAs a user we can pass in either a path to a file (as a string) making the function easy to call, or we can pass in an\nopen file object which lets us control exactly how the is opened (control encoding and whatnot).\n\n\nUsage\n=====\n\nThe ``@file_or_name`` decorator will automatically open and close files when specified parameters have strings as their\nargument value. If you use the decorator with no arguments it will open the first argument as a file in read mode.\n\n.. code:: python\n\n    from file_or_name import file_or_name\n\n    @file_or_name\n    def read_json(f):\n        return json.load(f)\n\nIn order to handle multiple files and file writing we can pass keyword arguments to the decorator in the form\n``parameter=mode``. This will open a file specified by the argument value for ``parameter`` using mode specified by this\nkeyword argument.\n\nWriting to file example, when the ``wf`` argument is a string it will automatically be opened in write mode:\n\n.. code:: python\n\n    from file_or_name import file_or_name\n\n    @file_or_name(wf='w')\n    def write_json(data, wf):\n        json.dumps(data, wf, indent=2)\n\nReading and writing example, any argument values that are strings for either ``rf`` or ``wf`` will be opened in read\nmode and write mode respectivly:\n\n.. code:: python\n\n    from file_or_name import file_or_name\n\n    @file_or_name(rf='r', wf='w')\n    def convert_jsonl_to_yaml(rf, wf):\n        for line in rf:\n            wf.write(yaml.dump(json.loads(line)) + \"\\n\")\n\nFile or Name lets you, the library developer, write function that operate on files object making code cleaner and more\ntestable while letting your users interact with your code using simple file path string arguments. It also will\nautomatically open pathlib objects as arguments too.\n\n\nShadow Paging\n=============\n\nI often have code that will read from a file with a generator, this lets me process chunks of data at a time and I don't\nhave to worry about materializing the whole file in memory. The problem is when I want to read data from a file, make\nchanges  to it and then write back to that same file. You can't open that file for writing because that would destroy\nthe data you are lazily reading from it with the generator. A common solution is to read the data in and keep it in\nmemory, process the data and write it all back. This defeats the purpose of using a generator in the first place, it\nalso means it is possible to have a error when writing data that will leave you in a state were your data disappeared.\nThis is why I introduced the shadow page to this library. Using a ``NamedTemporaryFile`` you can write to this file as\nmuch as you want and when you close the file it will be automatically used to replace the file on disk in an atomic way,\nThis means you can't lose you data by having a bug during writing and it lets you write back to a file that you are\nusing a generator to read from.\n\nYou can use this functionality by prefixing your write modes with a ``s``\n\n\n.. code:: python\n\n    from file_or_name import file_or_name\n\n    @file_or_name(f='r', wf='sw')\n    def reverse(f, wf):\n        data = f.read()[::-1]\n        if random.random() < 0.5:\n            raise ValueError\n        wf.write(data)\n\nWithout a shadow page when you read in this data and try to write it the possibility of a the ``ValueError`` between\nwhen the file is opened for writing and when it is actually written could cause you to lose all your data. If the error\noccurs when using the shadow page your original read data will be left intact and if the error doesn't happen then the\ndata will be reversed.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/blester125/file-or-name/archive/1.1.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blester125/file-or-name",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "file-or-name",
    "package_url": "https://pypi.org/project/file-or-name/",
    "platform": "",
    "project_url": "https://pypi.org/project/file-or-name/",
    "project_urls": {
      "Download": "https://github.com/blester125/file-or-name/archive/1.1.6.tar.gz",
      "Homepage": "https://github.com/blester125/file-or-name"
    },
    "release_url": "https://pypi.org/project/file-or-name/1.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "File Or Name",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7581720,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfabd12fa93157ca71a9d61048dd9eccee34e282bf32aa040f8b164d44b98b28",
          "md5": "212c7d948a96810ad2c00fb97cf18882",
          "sha256": "e1b99f9e3fa42b65b994630cd1693a1e6a44233f97712fba8cb0242595fa38a9"
        },
        "downloads": -1,
        "filename": "file-or-name-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "212c7d948a96810ad2c00fb97cf18882",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1932,
        "upload_time": "2019-12-26T04:18:56",
        "upload_time_iso_8601": "2019-12-26T04:18:56.209200Z",
        "url": "https://files.pythonhosted.org/packages/df/ab/d12fa93157ca71a9d61048dd9eccee34e282bf32aa040f8b164d44b98b28/file-or-name-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e1a49e84f206448301bfc6ad9185b10adf0645ac08e89b68276ae8eadc70c80",
          "md5": "00437e82223ea8fc9e52f70eb52abcec",
          "sha256": "504869c26dbd7f2b2388e5cbf839ae67ff6f7a1902521e73508111744b9573bc"
        },
        "downloads": -1,
        "filename": "file-or-name-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00437e82223ea8fc9e52f70eb52abcec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5193,
        "upload_time": "2019-12-27T16:14:39",
        "upload_time_iso_8601": "2019-12-27T16:14:39.200663Z",
        "url": "https://files.pythonhosted.org/packages/0e/1a/49e84f206448301bfc6ad9185b10adf0645ac08e89b68276ae8eadc70c80/file-or-name-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f02b92b4b7e4a65988a55f1bd0f60a00e48c3610b5aab254fed6f8882ea93d3d",
          "md5": "d9b042af940bc983056252432d9679bc",
          "sha256": "99ddd02ac55283e6255a5e6cb051002a28a151425e52e05ebf4f0e2a2d1f7884"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d9b042af940bc983056252432d9679bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6425,
        "upload_time": "2020-04-14T23:43:54",
        "upload_time_iso_8601": "2020-04-14T23:43:54.687295Z",
        "url": "https://files.pythonhosted.org/packages/f0/2b/92b4b7e4a65988a55f1bd0f60a00e48c3610b5aab254fed6f8882ea93d3d/file-or-name-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7385f99d2abe4c266ae07f759ab9d009e382fac16cae410ac4e985850d53421e",
          "md5": "7da3f1788895b0d91a3b970dff8d94e3",
          "sha256": "698ae2d04d2d7fe12455de38f047c645729ad0c52322e43c61edd63c0bfd53ba"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7da3f1788895b0d91a3b970dff8d94e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6755,
        "upload_time": "2020-04-15T01:36:25",
        "upload_time_iso_8601": "2020-04-15T01:36:25.172519Z",
        "url": "https://files.pythonhosted.org/packages/73/85/f99d2abe4c266ae07f759ab9d009e382fac16cae410ac4e985850d53421e/file-or-name-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28935505d7dfa3af8a4866856bb8c7d988092d9707f3ba1d8602d4ae60e99b56",
          "md5": "a550b68b81bc4594dcca3a9e51568d58",
          "sha256": "94a713643e66140e92212bfd7f64611eb4fde61773c06481cd8bf53c9d635852"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a550b68b81bc4594dcca3a9e51568d58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6747,
        "upload_time": "2020-04-15T01:47:59",
        "upload_time_iso_8601": "2020-04-15T01:47:59.112812Z",
        "url": "https://files.pythonhosted.org/packages/28/93/5505d7dfa3af8a4866856bb8c7d988092d9707f3ba1d8602d4ae60e99b56/file-or-name-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52d2787adb2a2badc8338528984b76c0faa35033a37d5256f830b7688c05b177",
          "md5": "04592ddca99aff0fdbaabdf1b6da8a1a",
          "sha256": "acead79b325e7c40741bb3e8fbc5b8a02340b415a705c1a6f5daec396f3bce0f"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "04592ddca99aff0fdbaabdf1b6da8a1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6769,
        "upload_time": "2020-04-20T01:41:49",
        "upload_time_iso_8601": "2020-04-20T01:41:49.226357Z",
        "url": "https://files.pythonhosted.org/packages/52/d2/787adb2a2badc8338528984b76c0faa35033a37d5256f830b7688c05b177/file-or-name-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c6e06069a9c993a7165ff338d6c6a15ecaed481f6df30632a3211b7ab509382",
          "md5": "08ec2820c5572bc39d0537e9b8ed217e",
          "sha256": "c07c0d6ffa325d3e494154eb078df4433656fab2481e19f9bcb6185d11c6c5c9"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "08ec2820c5572bc39d0537e9b8ed217e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7534,
        "upload_time": "2020-06-20T04:53:44",
        "upload_time_iso_8601": "2020-06-20T04:53:44.574931Z",
        "url": "https://files.pythonhosted.org/packages/5c/6e/06069a9c993a7165ff338d6c6a15ecaed481f6df30632a3211b7ab509382/file-or-name-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0de08eed4cbfbd58d7c39ced6afecd2313a6ca92c3efdbc802cb37fb47a7dd89",
          "md5": "3f0079304b8dd8d9eed83d80a7c79ce2",
          "sha256": "bfe7d725c307815c1d20e24a67b3a0fd9fa22c05e3249a62d431d19f75b583f8"
        },
        "downloads": -1,
        "filename": "file-or-name-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3f0079304b8dd8d9eed83d80a7c79ce2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8781,
        "upload_time": "2020-06-28T16:17:47",
        "upload_time_iso_8601": "2020-06-28T16:17:47.001594Z",
        "url": "https://files.pythonhosted.org/packages/0d/e0/8eed4cbfbd58d7c39ced6afecd2313a6ca92c3efdbc802cb37fb47a7dd89/file-or-name-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0de08eed4cbfbd58d7c39ced6afecd2313a6ca92c3efdbc802cb37fb47a7dd89",
        "md5": "3f0079304b8dd8d9eed83d80a7c79ce2",
        "sha256": "bfe7d725c307815c1d20e24a67b3a0fd9fa22c05e3249a62d431d19f75b583f8"
      },
      "downloads": -1,
      "filename": "file-or-name-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "3f0079304b8dd8d9eed83d80a7c79ce2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8781,
      "upload_time": "2020-06-28T16:17:47",
      "upload_time_iso_8601": "2020-06-28T16:17:47.001594Z",
      "url": "https://files.pythonhosted.org/packages/0d/e0/8eed4cbfbd58d7c39ced6afecd2313a6ca92c3efdbc802cb37fb47a7dd89/file-or-name-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}