{
  "info": {
    "author": "ZephyrOff <contact@apajak.fr>",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# zpp-logs\r\n## Informations\r\nModule pour la gestion des logs (Ã  l'image de logging) avec des tuning personnalisÃ©s par niveau de logs\r\n<br>\r\n\r\n## PrÃ©requis\r\n- Python 3\r\n<br>\r\n\r\n## Installation\r\n```console\r\npip install zpp-logs\r\n```\r\n<br>\r\n\r\n## Utilisation\r\n### <ins>Logger</ins>\r\n\r\nUn logger est un objet qui permet de dÃ©finir des options (handler, formatter, filter) pour un log.\r\n\r\n```python\r\nfrom zpp_logs import Logger\r\n\r\nlog = Logger()\r\n```\r\n<br>\r\nIl est possible de lui donner en paramÃ¨tre un fichier de configuration au format yaml pour configurer directement les diffÃ©rentes options\r\n\r\n```python\r\nfrom zpp_logs import Logger\r\n\r\nlog = Logger(configfile='config.yaml')\r\n```\r\n\r\n_Exemple de fichier yaml:_\r\n```config\r\nformatters:\r\n    standard:\r\n        format: \"%(fore:deep_sky_blue_3a)%[%(date:%d/%m/%Y %H:%M:%S)%]%(attr:0)% - %(fore:medium_purple_4)%%(levelname)%%(attr:0)% - %(fore:grey_46)%%(msg)%%(attr:0)%\"\r\n    test:\r\n        format: \"%(epoch)% - %(msg)%\"\r\n\r\nfilters:\r\n    testfunc: test3.test\r\n\r\nhandlers:\r\n    console:\r\n        class: zpp_logs.Console_handler\r\n        level: zpp_logs.CRITICAL\r\n        ops: \"<\"\r\n        formatter: test\r\n        output: sys.stdout\r\n\r\n\r\nlogger:\r\n    handlers: [console]\r\n    filters: [testfunc]\r\n```\r\n\r\n<br>\r\n\r\nDans un Logger, nous pouvons ajouter/supprimer des handler et des filtres, afficher le compteur de log et appeler les mÃ©thodes de log.\r\nToutes ces options sont dÃ©taillÃ©es dans la suite.\r\n\r\n<br>\r\n\r\n### <ins>Handler</ins>\r\n\r\nDiffÃ©rents handler sont disponibles pour permettre d'envoyer les logs dans la console, dans un fichier ou par mail.\r\nTous les handler disposent des mÃ©thodes:\r\n- __setFormatter()__ pour ajouter un formatter\r\n```python\r\ncons.setFormatter(form)\r\n```\r\nla mÃ©thode attend un objet Formatter\r\n\r\n<br>\r\n\r\n- __setLevel()__ pour dÃ©finir le niveau de log Ã  appliquer\r\n```python\r\ncons.setLevel(zpp_logs.DEBUG)\r\n```\r\nla mÃ©thode attend un niveau de logs.\r\nIl est possible de lui envoyer un argument ops pour dÃ©finir le comportement du handler. (Par dÃ©faut ==)\r\n```python\r\ncons.setLevel(zpp_logs.ERROR, ops=\"<=\")\r\n```\r\nle ops permet de comparaison pour trigger le handler. Dans l'exemple du dessus, le handler se dÃ©clenche si le log est de niveau ERROR ou infÃ©rieur.\r\n\r\n<br>\r\n\r\n- __addFilter()__ pour ajouter un filtre.\r\nLe filter est soit un script (qui peut Ãªtre une regex), soit une fonction (dans ce cas, le filter attends un retour True pour se dÃ©clencer)\r\n```python\r\ndef test(message):\r\n    if \"bjr\" in message:\r\n        return True\r\n    return False\r\n\r\ncons.addFilter(MonModule.test)\r\n```\r\n\r\n<br>\r\n\r\n- __removeFilter()__ pour supprimer un filtre.\r\nCette mÃ©thode permet de supprimer un filtre configurÃ©\r\n\r\n<br>\r\n\r\n### Console_handler\r\n\r\nUn Console_handler permet d'envoyer des messages dans la console.\r\nPar dÃ©faut, le handler n'attend pas de paramÃ¨tre mais peut recevoir:\r\n- output: pour dÃ©finir la destination (Par dÃ©faut sys.stdout)\r\n- level: pour dÃ©finir le niveau de logs attendu (Par dÃ©faut NOTSET)\r\n- ops: pour dÃ©finir le comportement du handler. (Par dÃ©faut ==) (Voir setLevel)\r\n\r\n```python\r\nlog = Logger()\r\ncons = Console_handler()\r\nlog.add_handler(cons)\r\n```\r\n\r\n<br>\r\n\r\n### File_handler\r\n\r\nUn File_handler permet d'envoyer des messages dans un fichier.\r\nPar dÃ©faut, le handler attend le chemin du fichier de destination. (Peut recevoir un nom de fichier dynamique avec la syntaxe des formatter) <br>\r\nIl peut aussi recevoir:\r\n- rewrite: pour dÃ©finir si le handler rÃ©Ã©crit sur un fichier existant (Par dÃ©faut False)\r\n- level: pour dÃ©finir le niveau de logs attendu (Par dÃ©faut NOTSET)\r\n- ops: pour dÃ©finir le comportement du handler. (Par dÃ©faut ==) (Voir setLevel)\r\n\r\n```python\r\nlog = Logger()\r\ncons = File_handler('content.log')\r\nlog.add_handler(cons)\r\n```\r\n\r\n<br>\r\n\r\n### RotateFile_handler\r\n\r\nUn RotateFile_handler permet d'envoyer des messages dans un fichier en prenant en charge une rotation de logs en fonction d'une taille max.\r\nPar dÃ©faut, le handler attend le chemin du fichier de destination. (Peut recevoir un nom de fichier dynamique avec la syntaxe des formatter) <br>\r\nIl peut aussi recevoir:\r\n- rewrite: pour dÃ©finir si le handler rÃ©Ã©crit sur un fichier existant (Par dÃ©faut False)\r\n- level: pour dÃ©finir le niveau de logs attendu (Par dÃ©faut NOTSET)\r\n- ops: pour dÃ©finir le comportement du handler. (Par dÃ©faut ==) (Voir setLevel)\r\n- maxBytes: pour dÃ©finir la taille max du fichier de log\r\n- backupCount: pour dÃ©finir le nombre maximum de fichier de log. Si la limite est atteinte, il supprime le fichier le plus ancien.\r\n\r\n```python\r\nlog = Logger()\r\ncons = RotateFile_handler('content.log')\r\nlog.add_handler(cons)\r\n```\r\n\r\n<br>\r\n\r\n### SMTP_handler\r\n\r\nUn SMTP_handler permet d'envoyer des messages par mail.\r\nPar dÃ©faut, le handler attend les paramÃ¨tres:\r\n- smtphost: l'ip ou l'adresse du serveur SMTP sous forme de str. PossibilitÃ© de lui envoyer un tuple pour dÃ©finir le port Ã  utiliser (HOST, PORT)\r\n- fromaddr: l'adresse mail de l'expÃ©diteur sous forme de str\r\n- toaddrs: la/les adresses mail des destinataires sous forme de str pour un destination ou une liste pour plusieurs \r\n- subject: l'objet du mail (Peut recevoir un objet dynamique avec la syntaxe des formatter)\r\n<br>\r\n\r\nIl peut aussi recevoir:\r\n- credentials: pour dÃ©finir les login de connexion sous forme de liste ou tuple (USERNAME, PASSWORD)\r\n- secure: pour dÃ©finir si la connexion doit Ãªtre sÃ©curisÃ©e (Par dÃ©faut None)\r\n- timeout: pour dÃ©finir le temps timeout pour la rÃ©ponse du serveur SMTP (Par dÃ©faut 5.0)\r\n- level: pour dÃ©finir le niveau de logs attendu (Par dÃ©faut NOTSET)\r\n- ops: pour dÃ©finir le comportement du handler. (Par dÃ©faut ==) (Voir setLevel)\r\n\r\n```python\r\nlog = Logger()\r\ncons = SMTP_handler(smtphost='smtp.local.com', fromaddr='private@local.com', toaddrs=['user1@gmail.com', 'user2@gmail.com'], subject=\"Test de notification\")\r\nlog.add_handler(cons)\r\n```\r\n\r\n<br>\r\n\r\n### <ins>Formatter</ins>\r\n\r\nUn formatter est un objet qui permet de dÃ©finir le format du message de log envoyÃ©\r\nDans un formatter, les trigger doivent Ãªtre de la forme _%(trigger_name)%_\r\nSi on veut formater un peu de texte pour aligner les logs, on peut dÃ©finir un padding en ajoutant la taille avec le 2Ã¨me %\r\nPar exemple, _%(trigger_name)5%_\r\n\r\nVoici la liste des trigger disponibles\r\n\r\n| Name | Description |\r\n|----------|-------------|\r\n| asctime | Date au format %d/%m/%Y %H:%M:%S:%f |\r\n| date: strftime_format | Date dans le format qu'on veut |\r\n| epoch | Date au format epoch |\r\n| exc_info\t\t\t | RÃ©cupÃ©ration du traceback |\r\n| levelname | Nom du niveau de log |\r\n| levelno\t\t\t | ID du niveau de log |\r\n| msg | Message de log |\r\n| filename | Nom du fichier d'exÃ©cution |\r\n| filepath | RÃ©pertoire parent du fichier d'exÃ©cution |\r\n| lineno | NumÃ©ro de la ligne du fichier d'exÃ©cution |\r\n| functname | Nom de la fonction |\r\n| path | Chemin actuel |\r\n| process | Nom du process |\r\n| processid | PID du process |\r\n| username | Nom d'utilisateur qui exÃ©cute le script |\r\n| uid | uid de l'utilisateur qui exÃ©cute le script (only linux) |\r\n| os_name | Nom de l'OS |\r\n| os_version | Version de l'OS |\r\n| os_archi | Architecture de l'OS |\r\n| mem_total | CapacitÃ© max de RAM |\r\n| mem_available | CapacitÃ© disponible de RAM |\r\n| mem_used | CapacitÃ© utilisÃ©e de RAM |\r\n| mem_free | CapacitÃ© disponible de RAM |\r\n| mem_percent | CapacitÃ© utilisÃ©e de RAM en pourcentage |\r\n| swap_total | CapacitÃ© max de Swap |\r\n| swap_used | CapacitÃ© utilisÃ©e de Swap |\r\n| swap_free | CapacitÃ© disponible de Swap |\r\n| swap_percent | CapacitÃ© utilisÃ©e de Swap en pourcentage |\r\n| cpu_count | Nombre de core physique |\r\n| cpu_logical_count | Nombre de core logique |\r\n| cpu_percent | Pourcentage de CPU utilisÃ© |\r\n| current_disk_device | Nom du disque oÃ¹ se trouve le script |\r\n| current_disk_mountpoint | Point de montage du disque oÃ¹ se trouve le script |\r\n| current_disk_fstype | Format du disque oÃ¹ se trouve le script |\r\n| current_disk_total | CapacitÃ© max du disque oÃ¹ se trouve le script |\r\n| current_disk_used | CapacitÃ© utilisÃ©e du disque oÃ¹ se trouve le script |\r\n| current_disk_free | CapacitÃ© disponible du disque oÃ¹ se trouve le script |\r\n| current_disk_percent | CapacitÃ© utilisÃ©e en pourcentage du disque oÃ¹ se trouve le script |\r\n| fore: color | Couleur de la police d'Ã©criture |\r\n| back: color | Couleur du fond de la police d'Ã©criture |\r\n| attr: attribute | Style de la police d'Ã©criture |\r\n\r\n<br>\r\nPour son utilisation, il suffit de crÃ©er un objet Formatter et de l'ajouter dans un handler.\r\n\r\n```python\r\nfrom zpp_logs import Logger, Formatter, Console_handler\r\n\r\nlog = Logger()\r\nform = Formatter(\"%(fore:deep_sky_blue_3a)%[%(date:%d/%m/%Y %H:%M:%S)%]%(attr:0)% - %(fore:medium_purple_4)%%(levelname)%%(attr:0)% - %(fore:grey_46)%%(msg)%%(attr:0)%\")\r\ncons = Console_handler()\r\ncons.setFormatter(form)\r\n```\r\n\r\n<br>\r\n\r\n### <ins>Envoi des logs</ins>\r\n\r\nLes mÃ©thodes pour envoyer des logs se dÃ©clinent en 7 niveaux: \r\n- log(message): zpp_logs.NOTSET\r\n- good(message): zpp_logs.GOOD\r\n- debug(message): zpp_logs.DEBUG\r\n- info(message): zpp_logs.INFO\r\n- warning(message): zpp_logs.WARNING\r\n- error(message): zpp_logs.ERROR\r\n- critical(message): zpp_logs.CRITICAL\r\n\r\n<br>\r\n\r\nCes mÃ©thodes peuvent Ãªtre appelÃ©es soit en direct, soit depuis un logger.\r\n```python\r\nfrom zpp_logs import Logger\r\n\r\nlogger = Logger(configfile=\"config.yaml\")\r\nlogger.warning(\"Test de logs\")\r\n```\r\n<br> \r\n\r\n### <ins>Compteur des logs</ins>\r\n\r\nIl est possible de rÃ©cupÃ©rer un dictionnaire contenant le compteur des logs envoyÃ©s par un logger.\r\n```python\r\n>>> logger.count()\r\n{'CRITICAL': 0, 'ERROR': 0, 'WARNING': 1, 'INFO': 0, 'GOOD': 0, 'DEBUG': 0, 'NOTSET': 0}\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZephyrOff/py-zpp_logs",
    "keywords": "logs module zephyroff",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "zpp-logs",
    "package_url": "https://pypi.org/project/zpp-logs/",
    "platform": null,
    "project_url": "https://pypi.org/project/zpp-logs/",
    "project_urls": {
      "Documentation": "https://github.com/ZephyrOff/py-zpp_logs",
      "Homepage": "https://github.com/ZephyrOff/py-zpp_logs"
    },
    "release_url": "https://pypi.org/project/zpp-logs/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Module de gestion de logs",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430125,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15f73f8b19a55c8c8cc622a5be54a30ab17f0088056d717097d1d05bd908661f",
          "md5": "090c45408b9a8d478a3609f5e920f28e",
          "sha256": "f1a10354109e3d3fa5d64abd691c2d7e592a8dc92f123b6128ec9998d6d91e68"
        },
        "downloads": -1,
        "filename": "zpp_logs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "090c45408b9a8d478a3609f5e920f28e",
        "packagetype": "bdist_wheel",
        "python_version": "source",
        "requires_python": null,
        "size": 10863,
        "upload_time": "2023-03-24T11:18:31",
        "upload_time_iso_8601": "2023-03-24T11:18:31.719475Z",
        "url": "https://files.pythonhosted.org/packages/15/f7/3f8b19a55c8c8cc622a5be54a30ab17f0088056d717097d1d05bd908661f/zpp_logs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "062fe4f0c992d100c0e3284129c080bc2be4d4be5511f673a681405642727634",
          "md5": "a46228900499d58af2e9b23409cf1fb9",
          "sha256": "487b1405b9baa2d53f443e4bb4a2bb67952719cb85d3262aede2f761c6290dbb"
        },
        "downloads": -1,
        "filename": "zpp_logs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a46228900499d58af2e9b23409cf1fb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13413,
        "upload_time": "2023-03-24T11:18:28",
        "upload_time_iso_8601": "2023-03-24T11:18:28.619329Z",
        "url": "https://files.pythonhosted.org/packages/06/2f/e4f0c992d100c0e3284129c080bc2be4d4be5511f673a681405642727634/zpp_logs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15f73f8b19a55c8c8cc622a5be54a30ab17f0088056d717097d1d05bd908661f",
        "md5": "090c45408b9a8d478a3609f5e920f28e",
        "sha256": "f1a10354109e3d3fa5d64abd691c2d7e592a8dc92f123b6128ec9998d6d91e68"
      },
      "downloads": -1,
      "filename": "zpp_logs-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "090c45408b9a8d478a3609f5e920f28e",
      "packagetype": "bdist_wheel",
      "python_version": "source",
      "requires_python": null,
      "size": 10863,
      "upload_time": "2023-03-24T11:18:31",
      "upload_time_iso_8601": "2023-03-24T11:18:31.719475Z",
      "url": "https://files.pythonhosted.org/packages/15/f7/3f8b19a55c8c8cc622a5be54a30ab17f0088056d717097d1d05bd908661f/zpp_logs-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "062fe4f0c992d100c0e3284129c080bc2be4d4be5511f673a681405642727634",
        "md5": "a46228900499d58af2e9b23409cf1fb9",
        "sha256": "487b1405b9baa2d53f443e4bb4a2bb67952719cb85d3262aede2f761c6290dbb"
      },
      "downloads": -1,
      "filename": "zpp_logs-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a46228900499d58af2e9b23409cf1fb9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13413,
      "upload_time": "2023-03-24T11:18:28",
      "upload_time_iso_8601": "2023-03-24T11:18:28.619329Z",
      "url": "https://files.pythonhosted.org/packages/06/2f/e4f0c992d100c0e3284129c080bc2be4d4be5511f673a681405642727634/zpp_logs-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}