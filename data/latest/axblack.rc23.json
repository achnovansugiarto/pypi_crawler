{
  "info": {
    "author": "Łukasz Langa",
    "author_email": "lukasz@langa.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "![Black Logo](https://raw.githubusercontent.com/axiros/axblack/master/docs/_static/logoax-readme.png)\n<h2 align=\"center\">The Uncompromising Code Formatter<i> (compromised version)</i></h2>\n\n<p align=\"center\">\n<a href=\"https://github.com/psf/black/blob/master/LICENSE\"><img alt=\"License: MIT\" src=\"https://black.readthedocs.io/en/stable/_static/license.svg\"></a>\n<a href=\"https://badge.fury.io/py/axblack\"><img src=\"https://badge.fury.io/py/axblack.svg\" alt=\"PyPI version\" height=\"18\"></a>\n<a href=\"https://pepy.tech/project/axblack\"><img alt=\"Downloads\" src=\"https://pepy.tech/badge/axblack\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-axblack-8bd124.svg\"></a>\n</p>\n\n## ...as long as it's **`'black'`**\n\n\n# axblack - Default Style\n\n<table>\n<tbody><tr><td>\n\n```python\n\n\"\"\"\nModule doc axblack style formatted\n\"\"\"\n\ndef foo():\n    \"\"\"func doc\"\"\"    # double quotes for docstrings\n    s = 'hello world' # single quotes for code\n    stmt = '''         \n        SELECT *\n        FROM foo\n        WHERE bar;\n    '''\n    m = {'a': 'b'}\n\n# trailing comma & short line: no line break:\nprint(42,)  \n\n```\n</td><td>\n\n```python\n\"\"\"\nModule doc - psf/black formatted\n\"\"\"\n\ndef foo():\n    \"\"\"func doc\"\"\"    \n    s = \"hello world\"\n    stmt = \"\"\"\n        SELECT *\n        FROM foo\n        WHERE bar;\n    \"\"\"\n    m = {\"a\": \"b\"}\n\n# trailing comma => line break *always*\nprint(\n    42,\n)\n```\n\n</td></tr></tbody></table>\n\nAlso, this older version of black seems *not* to [change the AST](https://github.com/psf/black/issues/2150).\n\n----\n\nThis is a forked alternative to the official [black](https://github.com/psf/black) formatter,\nwhich is a wonderful tool but (too?) [strict](https://github.com/psf/black/issues/118) about single quotes, ([very](https://github.com/psf/black/issues/51)) unfortunatelly.\n\n> We we are sure they'll change their minds one day, so this fork is not necessary any more - it is a workaround to bridge that time gap.\n\nNote: There are other forks as well, with yet more features, e.g. [oitnb](https://pypi.org/project/oitnb/) - orange is the new black.\n\n*This* fork is based on [this](https://github.com/psf/black/tree/fb1ac6981257c91a1d3bf753d10e1091f05b001a) psf/black version (2019-11-23). We will not merge in all code restructurings done in 2020. \n\n## Performance\n\nThis is based on a python only version of black. Meanwhile they compile it to C, gaining some 25-30% performance, compared to axblack.\nYou'll notice a difference only at huge file sizes.\n\nTip: Configure your code formatter to run [async][lfn] at file save.\n\n[lfn]: https://github.com/lukas-reineke/lsp-format.nvim\n\n\n\n## Background\n\n1. The argument that one unified style **would** be superbeneficial for\nthe whole community we do share - BUT: While line length **is** still configurable that goal cannot be reached anyway, even with opinionated fixed quoting style. Also with the new (since 20.x?) 'line wrap at trailing comma feature' they actually allow a lot of individual 'creative freedom', regarding how code looks.\n\n2. The reason why the black author [changed his mind](https://github.com/psf/black/issues/51#issuecomment-375722810_) away from using single quotes: [pull request/75](https://github.com/psf/black/pull/75#issuecomment-376203386_) was this example: `{MESSAGE.two: \"Please don't look over there.\"}`. We ~~don't~~ do not think, that this example is justifying the strict rejection of the idea of making quoting style even configurable. \n\n3. You are not alone if you prefer single quotes:\n\n> [If you use single-quotes for your strings you are in good company: “People use to really love double quotes. I don’t know why.. ](https://www.youtube.com/watch?v=wf-BqAjZb8M&feature=youtu.be&t=1081)\n\n[![](https://raw.githubusercontent.com/axiros/axblack/master/docs/_static/ht_tw.png)](https://twitter.com/raymondh/status/1259209765072154624)\n\n```python\n>>> \"\"\"\"\"\"'what do you  prefer'\"\"\"\"\"\"\n'what do you  prefer'\n```\n\n## Deviations\n\n### Single Quotes\n\nSingle quotes are default.\n\nPatch is based on this [PR](https://github.com/psf/black/pull/1003).\n\n### Configured Excludes Always Respected\n\nWhen you explitely specify excludes in a toml file, then we respect them\n*always* - even if a file is given on the CLI.\n\n#### Rationale:\n\nThe list of files to be formatted are often *dynamically* built, e.g.:\n\n    black `git diff --name-only --diff-filter=ACM`\n\nWe must in such cases still respect the exclude list, even if files had been changed\n(e.g. from ZODB dumps).\n\n\n### Project root kept at path of pyproject.toml\n\nWhen you configure explicitely (via `--config`) a pyproject.toml file, then\nits path will fix the project root, relevant for regex matching the\nexcludes (see above). Otherwise black would reset the project root per passed\nfile, which is a problem when it finds e.g. subrepos' .git or .hg folders. \n\n\n### Different Versioning\n\nNo pre-release foo.\n\n- [here](https://github.com/psf/black/issues/209)\n- [here](https://github.com/microsoft/vscode-python/issues/5171)\n- [here](https://github.com/microsoft/vscode-python/issues/5756)\n- [here](https://github.com/psf/black/issues/517)\n\nregarding why.\n\nWe leave the calver style versioning scheme, but w/o dots, to indicate that this is not a \"real\" project.\n\n> Yes this is [PEP-440](https://www.python.org/dev/peps/pep-0440/) compatible.\n> And yes, we (meanwhile) know that [pipenv](https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/) has a problem with such versions and `^`. Here you have to pin it.\n\n# Notes\n\nWe wanted to keep the offset minimal and not deviate more than necessary.\n\nTherefore via the vim plugin and also the blackd server you do not have the option to\nset double quotes - you have to use the `--double-quotes` command line flag as\nonly way to get them.  \nShould you prefer them for private projects or find them in project policies, by any means, use the official black version then. \n\nQ: Why not rename black into axblack to allow coexistance?  \nA: Because black is builtin-supported by [many](https://github.com/dense-analysis/ale/blob/master/doc/ale-python.txt\n) tools, which rely on that name. Meaning you need seperate python\nenvironments in order to use both on one host.\n\nTip: When a tool has a dependency on the official version than nail it to\n `18.6b4`, e.g. in pyproject.toml:\n\n```toml\n[tool.poetry.dev-dependencies]\nautoflake = \"^1.4\"\naxblack = \"^20201010\"\nblack = \"18.6b4\"\n```\n\nSince axblack still is installed into site-packges directly, while newer\nversion of black are in a subfolder there.\n\n\n<details><summary>Changelog</summary>\n\n[2022-03-30 13:33] \n\n- Removed the `_unicodefun` patching of click (https://github.com/axiros/axblack/issues/16)\n\n\n[ 2022-03-21 14:47] \n\n- Added an unprocessed `--stdin-filename` CLI switch, since some LSP servers (e.g. null-ls) send it\n\n[2020-10-09 19:31] \n\n- Changed the triple quote behaviour (keep them only in simple statements like\n  docstrings but not assignments). See https://github.com/axiros/axblack/issues/6\n\n[2019-12-12 12:57] \n\n- Changed the exclude behaviour: When exclude given in .toml file we *always*\n  respect it - even if a file is excplitely given on CLI for formats.\n\n[2019-11-24 11:21]  \n\n- Set single_quotes as default in black.py `class File`, so that it works also\n  in vim.\n\n[2019-11-24 11:21]  \n\n- Recreated repo as direct fork of psf/black, with adapted master branch for\n  easier future merges from them (and getting their newest improvements)\n\n[2019-11-23 21:16]  \n\n- Dropped the -s in favor of the long argument \"double-quotes\" - to never\n  collide with any argument of theirs. Default for double-quotes: False\n- Bugfixed the parsing of single-quotes\n- Added the [cf](./ax/cf) tool.\n\n[2019-11-23 18:05]   \n\n- Added more README (Usage)\n\n[2019-11-23 15:05]   \n\nInitial version after:\n\n- `git clone https://github.com/mark-riley/black.git axblack`\n- `git reset --hard configure-quote-style`\n- `git reset --hard remotes/origin/configure-quote-style`\n- Set `default=True` into black.py\n- Created axblack pip and pushed to pypi.\n\n</details>\n\n## Installation\n\n`pip install axblack` into a python3 v(irtual)env or conda environment.\n\nSee also original docu below - exchange \"psf/black\" with \"axiros/axblack\".\n\n\n### Vim Setup\n\nInstall black into a python environment and refer to it via\n`g:black_virtualenv` as shown in the example, then the plugin will install\na venv into .vim/black!\n\nAlso, note that it proves very handy to have formatting being done at each file write.\n\n<details><summary>Suggested vim setup</summary>\n\n```vim\nPlug 'axiros/axblack'\n\n\" not black related but useful:\nautocmd FileType python map <Leader>e Otry:<Esc>j^i<TAB><Esc>oexcept Exception as ex:<CR>print('breakpoint set')<CR>breakpoint()<CR>keep_ctx=True<Esc>^\n\n\" defaults:\nlet g:black_linelength = 88\nlet g:black_fast = 1\n\" set appropriately:\nlet g:black_virtualenv = \"<set to base dir of a py3 environ with black installed>\"\n\n\" Clean whitespace at saves:\n\"autocmd BufWritePre * execute ':RemoveWhitespace'\nfun! Blackify()\n    if &ft =~ 'python'\n        :Black\n    endif\nendfun\n\" blackify at any write of a python file:\nautocmd BufWritePre * call Blackify()\n\n\" Using pythonmode? Keep it happy:\nlet g:pymode_options_max_line_length = 88\nlet g:pymode_lint_options_pep8 = {'max_line_length': g:pymode_options_max_line_length}\nlet g:pymode_options_colorcolumn = 1\n```\n\n</details>\n\n### Usage In Projects\n\n\n#### pyproject.toml\n\nCreate a `pyproject.toml` file in the toplevel directory of your project as\nshown below and adapt the exclude directories according to your needs.\n\n\n<details>\n<summary>Example `pyproject.toml`</summary>\n\nAdd a note for using axblack to avoid confusion:\n\n```toml\n[tool.black]\n# using pip install axblack for single_quotes\nline-length = 88\ntarget-version = ['py27']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | build\n    | dist\n  )/\n  | (.*)/foo.py      # also separately exclude a files named foo.py\n)\n'''\n```\n\n</details>\n\nThen `black .` will reformat from the current directory, recursively (not\nabove this directory).\n\nIf you have a mix of python2 and python3 in your project then create\na specific `pyproject.toml` within the respective top level directory and run\nblack for each of them seperately. black always searching up the specified\ndirectory on the command line for the first project toml file and uses it.\n\n#### Conversion of Large Existing Code Bases\n\nBlack ensures to not break anything, by comparing ASTs before and after\nformatting - which slows it down a bit.\n\nIf the code base is large you want to normally have **fast** mode on, therefore, in daily work.\n\nThis is what you do:\n\n1. Create your project toml file with excludes which shall *never* be\n   formattet.\n\n1. Run black with `--safe` on. If all can be converted then good, you can add\n   `--fast` from now on or put it even into your toml file.\n\n   Should you have errors from the AST check then, **before** any run in fast mode either\n   - exclude those files within the toml\n   - fix them. From experience this often hints to bugs.\n\n   Example:\n\n```\nerror: cannot format .../sleekxmpp/thirdparty/gnupg.py: INTERNAL ERROR:\nBlack produced different code on the second pass of the formatter.\n```\n\nAgain: **Do not run black in fast mode if you had errors in safe mode!**  \nIt will produce source code which is potentially off, behaviourally, from the original!\n\n\n#### Coding Policy Enforcement\n\nWith more collaborateurs on the same repo (e.g. at a customer site) you may want to\nconsider enforcing your code style via a repo hook:\n\n<details><summary>Repo Hook Example</summary>\n\n```bash\n# cat .git/hooks/pre-commit\n#!/bin/sh\n\n# We reject any commit for unformatted source code\n# We can't fix here since we might have partial hunks, which after reformat, which is\n# global, would differ in the non committed hunks from the state in the FS:\n\nblack=\"/agent/py3/bin/black\" # adapt to your environment\ngit diff --cached --name-only --diff-filter=ACM | while read -r fn\ndo\n    echo \"Format check: $fn\"\n    \"$black\" --check \"$fn\" > /dev/null || exit 1\n    echo \"Accepted.\"\ndone || {\n    echo \"Commit rejected - not all files formatted correctly.\"\n    echo \"Please do so now: $black -h\"\n    exit 1\n}\n\n```\n\n</details>\n\n<br/>\n\n## Wrapper Tool\n\nIf you\n\n- can't adopt pyproject.toml but want to stick to shell sourceable config\n  and /or environ based config\n- require composition of such config\n- easily want to run in client server mode, for speed\n- require automatically created skip lists\n\nthen have a look at [this](./ax/cf) code formatter tool we created, which\nwraps black and blackd.\n\n> The tool is not installed by pip currently.\n\n\nOriginal docu follows...:\n\n---\n---\n\n\n*Black* is the uncompromising Python code formatter.  By using it, you\nagree to cede control over minutiae of hand-formatting.  In return,\n*Black* gives you speed, determinism, and freedom from `pycodestyle`\nnagging about formatting.  You will save time and mental energy for\nmore important matters.\n\nBlackened code looks the same regardless of the project you're reading.\nFormatting becomes transparent after a while and you can focus on the\ncontent instead.\n\n*Black* makes code review faster by producing the smallest diffs\npossible.\n\nTry it out now using the [Black Playground](https://black.now.sh).\nWatch the [PyCon 2019 talk](https://youtu.be/esZLCuWs_2Y) to learn more.\n\n---\n\n*Contents:* **[Installation and usage](#installation-and-usage)** |\n**[Code style](#the-black-code-style)** |\n**[pyproject.toml](#pyprojecttoml)** |\n**[Editor integration](#editor-integration)** |\n**[blackd](#blackd)** |\n**[Version control integration](#version-control-integration)** |\n**[Ignoring unmodified files](#ignoring-unmodified-files)** |\n**[Used by](#used-by)** |\n**[Testimonials](#testimonials)** |\n**[Show your style](#show-your-style)** |\n**[Contributing](#contributing-to-black)** |\n**[Change Log](#change-log)** |\n**[Authors](#authors)**\n\n---\n\n## Installation and usage\n\n### Installation\n\n*Black* can be installed by running `pip install black`.  It requires\nPython 3.6.0+ to run but you can reformat Python 2 code with it, too.\n\n\n### Usage\n\nTo get started right away with sensible defaults:\n\n```\nblack {source_file_or_directory}\n```\n\n### Command line options\n\n*Black* doesn't provide many options.  You can list them by running\n`black --help`:\n\n```text\nblack [OPTIONS] [SRC]...\n\nOptions:\n  -c, --code TEXT                 Format the code passed in as a string.\n  -l, --line-length INTEGER       How many characters per line to allow.\n                                  [default: 88]\n  -t, --target-version [py27|py33|py34|py35|py36|py37|py38]\n                                  Python versions that should be supported by\n                                  Black's output. [default: per-file auto-\n                                  detection]\n  --py36                          Allow using Python 3.6-only syntax on all\n                                  input files.  This will put trailing commas\n                                  in function signatures and calls also after\n                                  *args and **kwargs. Deprecated; use\n                                  --target-version instead. [default: per-file\n                                  auto-detection]\n  --pyi                           Format all input files like typing stubs\n                                  regardless of file extension (useful when\n                                  piping source on standard input).\n  -S, --skip-string-normalization\n                                  Don't normalize string quotes or prefixes.\n  --check                         Don't write the files back, just return the\n                                  status.  Return code 0 means nothing would\n                                  change.  Return code 1 means some files\n                                  would be reformatted.  Return code 123 means\n                                  there was an internal error.\n  --diff                          Don't write the files back, just output a\n                                  diff for each file on stdout.\n  --fast / --safe                 If --fast given, skip temporary sanity\n                                  checks. [default: --safe]\n  --include TEXT                  A regular expression that matches files and\n                                  directories that should be included on\n                                  recursive searches.  An empty value means\n                                  all files are included regardless of the\n                                  name.  Use forward slashes for directories\n                                  on all platforms (Windows, too).  Exclusions\n                                  are calculated first, inclusions later.\n                                  [default: \\.pyi?$]\n  --exclude TEXT                  A regular expression that matches files and\n                                  directories that should be excluded on\n                                  recursive searches.  An empty value means no\n                                  paths are excluded. Use forward slashes for\n                                  directories on all platforms (Windows, too).\n                                  Exclusions are calculated first, inclusions\n                                  later.  [default: /(\\.eggs|\\.git|\\.hg|\\.mypy\n                                  _cache|\\.nox|\\.tox|\\.venv|_build|buck-\n                                  out|build|dist)/]\n  -q, --quiet                     Don't emit non-error messages to stderr.\n                                  Errors are still emitted, silence those with\n                                  2>/dev/null.\n  -v, --verbose                   Also emit messages to stderr about files\n                                  that were not changed or were ignored due to\n                                  --exclude=.\n  --version                       Show the version and exit.\n  --config PATH                   Read configuration from PATH.\n  -h, --help                      Show this message and exit.\n```\n\n*Black* is a well-behaved Unix-style command-line tool:\n* it does nothing if no sources are passed to it;\n* it will read from standard input and write to standard output if `-`\n  is used as the filename;\n* it only outputs messages to users on standard error;\n* exits with code 0 unless an internal error occurred (or `--check` was\n  used).\n\n\n### NOTE: This is a beta product\n\n*Black* is already [successfully used](#used-by) by many projects, small and big.\nIt also sports a decent test suite.  However, it is still very new.\nThings will probably be wonky for a while. This is made explicit by the\n\"Beta\" trove classifier, as well as by the \"b\" in the version number.\nWhat this means for you is that **until the formatter becomes stable,\nyou should expect some formatting to change in the future**.  That being\nsaid, no drastic stylistic changes are planned, mostly responses to bug\nreports.\n\nAlso, as a temporary safety measure, *Black* will check that the\nreformatted code still produces a valid AST that is equivalent to the\noriginal.  This slows it down.  If you're feeling confident, use\n``--fast``.\n\n\n## The *Black* code style\n\n*Black* reformats entire files in place.  It is not configurable.  It\ndoesn't take previous formatting into account.  It doesn't reformat\nblocks that start with `# fmt: off` and end with `# fmt: on`. `# fmt: on/off`\nhave to be on the same level of indentation. It also\nrecognizes [YAPF](https://github.com/google/yapf)'s block comments to\nthe same effect, as a courtesy for straddling code.\n\n\n### How *Black* wraps lines\n\n*Black* ignores previous formatting and applies uniform horizontal\nand vertical whitespace to your code.  The rules for horizontal\nwhitespace can be summarized as: do whatever makes `pycodestyle` happy.\nThe coding style used by *Black* can be viewed as a strict subset of\nPEP 8.\n\nAs for vertical whitespace, *Black* tries to render one full expression\nor simple statement per line.  If this fits the allotted line length,\ngreat.\n```py3\n# in:\n\nl = [1,\n     2,\n     3,\n]\n\n# out:\n\nl = [1, 2, 3]\n```\n\nIf not, *Black* will look at the contents of the first outer matching\nbrackets and put that in a separate indented line.\n```py3\n# in:\n\nImportantClass.important_method(exc, limit, lookup_lines, capture_locals, extra_argument)\n\n# out:\n\nImportantClass.important_method(\n    exc, limit, lookup_lines, capture_locals, extra_argument\n)\n```\n\nIf that still doesn't fit the bill, it will decompose the internal\nexpression further using the same rule, indenting matching brackets\nevery time.  If the contents of the matching brackets pair are\ncomma-separated (like an argument list, or a dict literal, and so on)\nthen *Black* will first try to keep them on the same line with the\nmatching brackets.  If that doesn't work, it will put all of them in\nseparate lines.\n```py3\n# in:\n\ndef very_important_function(template: str, *variables, file: os.PathLike, engine: str, header: bool = True, debug: bool = False):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, 'w') as f:\n        ...\n\n# out:\n\ndef very_important_function(\n    template: str,\n    *variables,\n    file: os.PathLike,\n    engine: str,\n    header: bool = True,\n    debug: bool = False,\n):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, \"w\") as f:\n        ...\n```\n\nYou might have noticed that closing brackets are always dedented and\nthat a trailing comma is always added.  Such formatting produces smaller\ndiffs; when you add or remove an element, it's always just one line.\nAlso, having the closing bracket dedented provides a clear delimiter\nbetween two distinct sections of the code that otherwise share the same\nindentation level (like the arguments list and the docstring in the\nexample above).\n\nIf a data structure literal (tuple, list, set, dict) or a line of \"from\"\nimports cannot fit in the allotted length, it's always split into one\nelement per line.  This minimizes diffs as well as enables readers of\ncode to find which commit introduced a particular entry.  This also\nmakes *Black* compatible with [isort](https://pypi.org/p/isort/) with\nthe following configuration.\n\n<details>\n<summary>A compatible `.isort.cfg`</summary>\n\n```\n[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n```\n\nThe equivalent command line is:\n```\n$ isort --multi-line=3 --trailing-comma --force-grid-wrap=0 --use-parentheses --line-width=88 [ file.py ]\n```\n</details>\n\n### Line length\n\nYou probably noticed the peculiar default line length.  *Black* defaults\nto 88 characters per line, which happens to be 10% over 80.  This number\nwas found to produce significantly shorter files than sticking with 80\n(the most popular), or even 79 (used by the standard library).  In\ngeneral, [90-ish seems like the wise choice](https://youtu.be/wf-BqAjZb8M?t=260).\n\nIf you're paid by the line of code you write, you can pass\n`--line-length` with a lower number.  *Black* will try to respect that.\nHowever, sometimes it won't be able to without breaking other rules.  In\nthose rare cases, auto-formatted code will exceed your allotted limit.\n\nYou can also increase it, but remember that people with sight disabilities\nfind it harder to work with line lengths exceeding 100 characters.\nIt also adversely affects side-by-side diff review  on typical screen\nresolutions.  Long lines also make it harder to present code neatly\nin documentation or talk slides.\n\nIf you're using Flake8, you can bump `max-line-length` to 88 and forget\nabout it.  Alternatively, use [Bugbear](https://github.com/PyCQA/flake8-bugbear)'s\nB950 warning instead of E501 and keep the max line length at 80 which\nyou are probably already using.  You'd do it like this:\n```ini\n[flake8]\nmax-line-length = 80\n...\nselect = C,E,F,W,B,B950\nignore = E501,W503,E203\n```\n\nYou'll find *Black*'s own .flake8 config file is configured like this.\nIf you're curious about the reasoning behind B950, \n[Bugbear's documentation](https://github.com/PyCQA/flake8-bugbear#opinionated-warnings)\nexplains it.  The tl;dr is \"it's like highway speed limits, we won't\nbother you if you overdo it by a few km/h\".\n\n\n### Empty lines\n\n*Black* avoids spurious vertical whitespace.  This is in the spirit of\nPEP 8 which says that in-function vertical whitespace should only be\nused sparingly.\n\n*Black* will allow single empty lines inside functions, and single and\ndouble empty lines on module level left by the original editors, except\nwhen they're within parenthesized expressions.  Since such expressions\nare always reformatted to fit minimal space, this whitespace is lost.\n\nIt will also insert proper spacing before and after function definitions.\nIt's one line before and after inner functions and two lines before and\nafter module-level functions and classes.  *Black* will not put empty\nlines between function/class definitions and standalone comments that\nimmediately precede the given function/class.\n\n*Black* will enforce single empty lines between a class-level docstring\nand the first following field or method.  This conforms to\n[PEP 257](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings).\n\n*Black* won't insert empty lines after function docstrings unless that\nempty line is required due to an inner function starting immediately\nafter.\n\n\n### Trailing commas\n\n*Black* will add trailing commas to expressions that are split\nby comma where each element is on its own line.  This includes function\nsignatures.\n\nUnnecessary trailing commas are removed if an expression fits in one\nline.  This makes it 1% more likely that your line won't exceed the\nallotted line length limit.  Moreover, in this scenario, if you added\nanother argument to your call, you'd probably fit it in the same line\nanyway.  That doesn't make diffs any larger.\n\nOne exception to removing trailing commas is tuple expressions with\njust one element.  In this case *Black* won't touch the single trailing\ncomma as this would unexpectedly change the underlying data type.  Note\nthat this is also the case when commas are used while indexing.  This is\na tuple in disguise: ```numpy_array[3, ]```.\n\nOne exception to adding trailing commas is function signatures\ncontaining `*`, `*args`, or `**kwargs`.  In this case a trailing comma\nis only safe to use on Python 3.6.  *Black* will detect if your file is\nalready 3.6+ only and use trailing commas in this situation.  If you\nwonder how it knows, it looks for f-strings and existing use of trailing\ncommas in function signatures that have stars in them.  In other words,\nif you'd like a trailing comma in this situation and *Black* didn't\nrecognize it was safe to do so, put it there manually and *Black* will\nkeep it.\n\n\n### Strings\n\n*Black* prefers double quotes (`\"` and `\"\"\"`) over single quotes (`'`\nand `'''`).  It will replace the latter with the former as long as it\ndoes not result in more backslash escapes than before.\n\n*Black* also standardizes string prefixes, making them always lowercase.\nOn top of that, if your code is already Python 3.6+ only or it's using\nthe `unicode_literals` future import, *Black* will remove `u` from the\nstring prefix as it is meaningless in those scenarios.\n\nThe main reason to standardize on a single form of quotes is aesthetics.\nHaving one kind of quotes everywhere reduces reader distraction.\nIt will also enable a future version of *Black* to merge consecutive\nstring literals that ended up on the same line (see\n[#26](https://github.com/psf/black/issues/26) for details).\n\nWhy settle on double quotes?  They anticipate apostrophes in English\ntext.  They match the docstring standard described in [PEP 257](https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring).\nAn empty string in double quotes (`\"\"`) is impossible to confuse with\na one double-quote regardless of fonts and syntax highlighting used.\nOn top of this, double quotes for strings are consistent with C which\nPython interacts a lot with.\n\nOn certain keyboard layouts like US English, typing single quotes is\na bit easier than double quotes.  The latter requires use of the Shift\nkey.  My recommendation here is to keep using whatever is faster to type\nand let *Black* handle the transformation.\n\nIf you are adopting *Black* in a large project with pre-existing string\nconventions (like the popular [\"single quotes for data, double quotes for\nhuman-readable strings\"](https://stackoverflow.com/a/56190)), you can\npass `--skip-string-normalization` on the command line.  This is meant as\nan adoption helper, avoid using this for new projects.\n\n### Numeric literals\n\n*Black* standardizes most numeric literals to use lowercase letters for the\nsyntactic parts and uppercase letters for the digits themselves: `0xAB`\ninstead of `0XAB` and `1e10` instead of `1E10`. Python 2 long literals are\nstyled as `2L` instead of `2l` to avoid confusion between `l` and `1`.\n\n\n### Line breaks & binary operators\n\n*Black* will break a line before a binary operator when splitting a block\nof code over multiple lines. This is so that *Black* is compliant with the\nrecent changes in the [PEP 8](https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator)\nstyle guide, which emphasizes that this approach improves readability.\n\nThis behaviour may raise ``W503 line break before binary operator`` warnings in\nstyle guide enforcement tools like Flake8. Since ``W503`` is not PEP 8 compliant,\nyou should tell Flake8 to ignore these warnings.\n\n\n### Slices\n\nPEP 8 [recommends](https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements)\nto treat ``:`` in slices as a binary operator with the lowest priority, and to\nleave an equal amount of space on either side, except if a parameter is omitted\n(e.g. ``ham[1 + 1 :]``). It also states that for extended slices, both ``:``\noperators have to have the same amount of spacing, except if a parameter is\nomitted (``ham[1 + 1 ::]``). *Black* enforces these rules consistently.\n\nThis behaviour may raise ``E203 whitespace before ':'`` warnings in style guide\nenforcement tools like Flake8. Since ``E203`` is not PEP 8 compliant, you should\ntell Flake8 to ignore these warnings.\n\n\n### Parentheses\n\nSome parentheses are optional in the Python grammar.  Any expression can\nbe wrapped in a pair of parentheses to form an atom.  There are a few\ninteresting cases:\n\n- `if (...):`\n- `while (...):`\n- `for (...) in (...):`\n- `assert (...), (...)`\n- `from X import (...)`\n- assignments like:\n  - `target = (...)`\n  - `target: type = (...)`\n  - `some, *un, packing = (...)`\n  - `augmented += (...)`\n\nIn those cases, parentheses are removed when the entire statement fits\nin one line, or if the inner expression doesn't have any delimiters to\nfurther split on.  If there is only a single delimiter and the expression\nstarts or ends with a bracket, the parenthesis can also be successfully\nomitted since the existing bracket pair will organize the expression\nneatly anyway.  Otherwise, the parentheses are added.\n\nPlease note that *Black* does not add or remove any additional nested\nparentheses that you might want to have for clarity or further\ncode organization.  For example those parentheses are not going to be\nremoved:\n```py3\nreturn not (this or that)\ndecision = (maybe.this() and values > 0) or (maybe.that() and values < 0)\n```\n\n\n### Call chains\n\nSome popular APIs, like ORMs, use call chaining.  This API style is known\nas a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface).\n*Black* formats those by treating dots that follow a call or an indexing\noperation like a very low priority delimiter.  It's easier to show the\nbehavior than to explain it.  Look at the example:\n```py3\ndef example(session):\n    result = (\n        session.query(models.Customer.id)\n        .filter(\n            models.Customer.account_id == account_id,\n            models.Customer.email == email_address,\n        )\n        .order_by(models.Customer.id.asc())\n        .all()\n    )\n```\n\n\n### Typing stub files\n\nPEP 484 describes the syntax for type hints in Python.  One of the\nuse cases for typing is providing type annotations for modules which\ncannot contain them directly (they might be written in C, or they might\nbe third-party, or their implementation may be overly dynamic, and so on).\n\nTo solve this, [stub files with the `.pyi` file\nextension](https://www.python.org/dev/peps/pep-0484/#stub-files) can be\nused to describe typing information for an external module.  Those stub\nfiles omit the implementation of classes and functions they\ndescribe, instead they only contain the structure of the file (listing\nglobals, functions, and classes with their members).  The recommended\ncode style for those files is more terse than PEP 8:\n\n* prefer `...` on the same line as the class/function signature;\n* avoid vertical whitespace between consecutive module-level functions,\n  names, or methods and fields within a single class;\n* use a single blank line between top-level class definitions, or none\n  if the classes are very small.\n\n*Black* enforces the above rules.  There are additional guidelines for\nformatting `.pyi` file that are not enforced yet but might be in\na future version of the formatter:\n\n* all function bodies should be empty (contain `...` instead of the body);\n* do not use docstrings;\n* prefer `...` over `pass`;\n* for arguments with a default, use `...` instead of the actual default;\n* avoid using string literals in type annotations, stub files support\n  forward references natively (like Python 3.7 code with `from __future__\n  import annotations`);\n* use variable annotations instead of type comments, even for stubs that\n  target older versions of Python;\n* for arguments that default to `None`, use `Optional[]` explicitly;\n* use `float` instead of `Union[int, float]`.\n\n\n## pyproject.toml\n\n*Black* is able to read project-specific default values for its\ncommand line options from a `pyproject.toml` file.  This is\nespecially useful for specifying custom `--include` and `--exclude`\npatterns for your project.\n\n**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\"\nthe answer is \"No\".  *Black* is all about sensible defaults.\n\n\n### What on Earth is a `pyproject.toml` file?\n\n[PEP 518](https://www.python.org/dev/peps/pep-0518/) defines\n`pyproject.toml` as a configuration file to store build system\nrequirements for Python projects.  With the help of tools\nlike [Poetry](https://poetry.eustace.io/) or\n[Flit](https://flit.readthedocs.io/en/latest/) it can fully replace the\nneed for `setup.py` and `setup.cfg` files.\n\n\n### Where *Black* looks for the file\n\nBy default *Black* looks for `pyproject.toml` starting from the common\nbase directory of all files and directories passed on the command line.\nIf it's not there, it looks in parent directories.  It stops looking\nwhen it finds the file, or a `.git` directory, or a `.hg` directory,\nor the root of the file system, whichever comes first.\n\nIf you're formatting standard input, *Black* will look for configuration\nstarting from the current working directory.\n\nYou can also explicitly specify the path to a particular file that you\nwant with `--config`.  In this situation *Black* will not look for any\nother file.\n\nIf you're running with `--verbose`, you will see a blue message if\na file was found and used.\n\nPlease note `blackd` will not use `pyproject.toml` configuration.\n\n\n### Configuration format\n\nAs the file extension suggests, `pyproject.toml` is a [TOML](https://github.com/toml-lang/toml) file.  It contains separate\nsections for different tools.  *Black* is using the `[tool.black]`\nsection.  The option keys are the same as long names of options on\nthe command line.\n\nNote that you have to use single-quoted strings in TOML for regular\nexpressions. It's the equivalent of r-strings in Python.  Multiline\nstrings are treated as verbose regular expressions by Black.  Use `[ ]`\nto denote a significant space character.\n\n<details>\n<summary>Example `pyproject.toml`</summary>\n\n```toml\n[tool.black]\nline-length = 88\ntarget-version = ['py37']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n  | foo.py           # also separately exclude a file named foo.py in\n                     # the root of the project\n)\n'''\n```\n\n</details>\n\n### Lookup hierarchy\n\nCommand-line options have defaults that you can see in `--help`.\nA `pyproject.toml` can override those defaults.  Finally, options\nprovided by the user on the command line override both.\n\n*Black* will only ever use one `pyproject.toml` file during an entire\nrun. It doesn't look for multiple files, and doesn't compose\nconfiguration from different levels of the file hierarchy.\n\n\n## Editor integration\n\n### Emacs\n\nUse [proofit404/blacken](https://github.com/proofit404/blacken) or\n[Elpy](https://github.com/jorgenschaefer/elpy).\n\n\n### PyCharm/IntelliJ IDEA\n\n1. Install `black`.\n\n```console\n$ pip install black\n```\n\n2. Locate your `black` installation folder.\n\n  On macOS / Linux / BSD:\n\n```console\n$ which black\n/usr/local/bin/black  # possible location\n```\n\n  On Windows:\n\n```console\n$ where black\n%LocalAppData%\\Programs\\Python\\Python36-32\\Scripts\\black.exe  # possible location\n```\n\n3. Open External tools in PyCharm/IntelliJ IDEA\n\n  On macOS:\n\n```PyCharm -> Preferences -> Tools -> External Tools```\n\n  On Windows / Linux / BSD:\n\n```File -> Settings -> Tools -> External Tools```\n\n4. Click the + icon to add a new external tool with the following values:\n    - Name: Black\n    - Description: Black is the uncompromising Python code formatter.\n    - Program: <install_location_from_step_2>\n    - Arguments: `\"$FilePath$\"`\n\n5. Format the currently opened file by selecting `Tools -> External Tools -> black`.\n    - Alternatively, you can set a keyboard shortcut by navigating to `Preferences or Settings -> Keymap -> External Tools -> External Tools - Black`.\n\n6. Optionally, run *Black* on every file save:\n\n    1. Make sure you have the [File Watcher](https://plugins.jetbrains.com/plugin/7177-file-watchers) plugin installed.\n    2. Go to `Preferences or Settings -> Tools -> File Watchers` and click `+` to add a new watcher:\n        - Name: Black\n        - File type: Python\n        - Scope: Project Files\n        - Program: <install_location_from_step_2>\n        - Arguments: `$FilePath$`\n        - Output paths to refresh: `$FilePath$`\n        - Working directory: `$ProjectFileDir$`\n\t- Uncheck \"Auto-save edited files to trigger the watcher\"\n\n\n\n### Wing IDE \n\nWing supports black via the OS Commands tool, as explained in the Wing documentation on [pep8 formatting](https://wingware.com/doc/edit/pep8). The detailed procedure is:\n\n1. Install `black`.\n\n```console\n$ pip install black\n```\n\n2. Make sure it runs from the command line, e.g.\n\n```console\n$ black --help\n```\n\n3. In Wing IDE, activate the **OS Commands** panel  and define the command  **black** to execute black on the currently selected file:\n\n- Use the Tools -> OS Commands menu selection\n- click on **+** in **OS Commands** -> New: Command line..\n  - Title: black\n  - Command Line: black %s\n  - I/O Encoding: Use Default \n  - Key Binding: F1\n  - [x] Raise OS Commands when executed\n  - [x] Auto-save files before execution\n  - [x] Line mode\n\n4. Select a file in the editor and press **F1** , or whatever key binding you selected in step 3, to reformat the file.\n\n### Vim\n\nCommands and shortcuts:\n\n* `:Black` to format the entire file (ranges not supported);\n* `:BlackUpgrade` to upgrade *Black* inside the virtualenv;\n* `:BlackVersion` to get the current version of *Black* inside the\n  virtualenv.\n\nConfiguration:\n* `g:black_fast` (defaults to `0`)\n* `g:black_linelength` (defaults to `88`)\n* `g:black_skip_string_normalization` (defaults to `0`)\n* `g:black_virtualenv` (defaults to `~/.vim/black`)\n\nTo install with [vim-plug](https://github.com/junegunn/vim-plug):\n\n```\nPlug 'psf/black'\n```\n\nor with [Vundle](https://github.com/VundleVim/Vundle.vim):\n\n```\nPlugin 'psf/black'\n```\n\nor you can copy the plugin from [plugin/black.vim](https://github.com/psf/black/tree/master/plugin/black.vim).\nLet me know if this requires any changes to work with Vim 8's builtin\n`packadd`, or Pathogen, and so on.\n\nThis plugin **requires Vim 7.0+ built with Python 3.6+ support**.  It\nneeds Python 3.6 to be able to run *Black* inside the Vim process which\nis much faster than calling an external command.\n\nOn first run, the plugin creates its own virtualenv using the right\nPython version and automatically installs *Black*. You can upgrade it later\nby calling `:BlackUpgrade` and restarting Vim.\n\nIf you need to do anything special to make your virtualenv work and\ninstall *Black* (for example you want to run a version from master),\ncreate a virtualenv manually and point `g:black_virtualenv` to it.\nThe plugin will use it.\n\nTo run *Black* on save, add the following line to `.vimrc` or `init.vim`:\n\n```\nautocmd BufWritePre *.py execute ':Black'\n```\n\n**How to get Vim with Python 3.6?**\nOn Ubuntu 17.10 Vim comes with Python 3.6 by default.\nOn macOS with Homebrew run: `brew install vim --with-python3`.\nWhen building Vim from source, use:\n`./configure --enable-python3interp=yes`. There's many guides online how\nto do this.\n\n\n### Visual Studio Code\n\nUse the [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)\n([instructions](https://code.visualstudio.com/docs/python/editing#_formatting)).\n\n\n### SublimeText 3\n\nUse [sublack plugin](https://github.com/jgirardet/sublack).\n\n\n### Jupyter Notebook Magic\n\nUse [blackcellmagic](https://github.com/csurfer/blackcellmagic).\n\n\n### Python Language Server\n\nIf your editor supports the [Language Server Protocol](https://langserver.org/)\n(Atom, Sublime Text, Visual Studio Code and many more), you can use\nthe [Python Language Server](https://github.com/palantir/python-language-server) with the\n[pyls-black](https://github.com/rupert/pyls-black) plugin.\n\n\n### Atom/Nuclide\n\nUse [python-black](https://atom.io/packages/python-black).\n\n\n### Other editors\n\nOther editors will require external contributions.\n\nPatches welcome! ✨ 🍰 ✨\n\nAny tool that can pipe code through *Black* using its stdio mode (just\n[use `-` as the file name](https://www.tldp.org/LDP/abs/html/special-chars.html#DASHREF2)).\nThe formatted code will be returned on stdout (unless `--check` was\npassed).  *Black* will still emit messages on stderr but that shouldn't\naffect your use case.\n\nThis can be used for example with PyCharm's or IntelliJ's [File Watchers](https://www.jetbrains.com/help/pycharm/file-watchers.html).\n\n## blackd\n\n`blackd` is a small HTTP server that exposes *Black*'s functionality over\na simple protocol. The main benefit of using it is to avoid paying the\ncost of starting up a new *Black* process every time you want to blacken\na file.\n\n### Usage\n\n`blackd` is not packaged alongside *Black* by default because it has additional\ndependencies. You will need to do `pip install black[d]` to install it.\n\nYou can start the server on the default port, binding only to the local interface\nby running `blackd`. You will see a single line mentioning the server's version,\nand the host and port it's listening on. `blackd` will then print an access log\nsimilar to most web servers on standard output, merged with any exception traces\ncaused by invalid formatting requests.\n\n`blackd` provides even less options than *Black*. You can see them by running\n`blackd --help`:\n\n```text\nUsage: blackd [OPTIONS]\n\nOptions:\n  --bind-host TEXT                Address to bind the server to.\n  --bind-port INTEGER             Port to listen on\n  --version                       Show the version and exit.\n  -h, --help                      Show this message and exit.\n```\n\nThere is no official blackd client tool (yet!). You can test that blackd is\nworking using `curl`:\n\n```\nblackd --bind-port 9090 &  # or let blackd choose a port\ncurl -s -XPOST \"localhost:9090\" -d \"print('valid')\"\n```\n\n### Protocol\n\n`blackd` only accepts `POST` requests at the `/` path. The body of the request\nshould contain the python source code to be formatted, encoded\naccording to the `charset` field in the `Content-Type` request header. If no\n`charset` is specified, `blackd` assumes `UTF-8`.\n\nThere are a few HTTP headers that control how the source is formatted. These\ncorrespond to command line flags for *Black*. There is one exception to this:\n`X-Protocol-Version` which if present, should have the value `1`, otherwise the\nrequest is rejected with `HTTP 501` (Not Implemented).\n\nThe headers controlling how code is formatted are:\n\n - `X-Line-Length`: corresponds to the `--line-length` command line flag.\n - `X-Skip-String-Normalization`: corresponds to the `--skip-string-normalization`\n    command line flag. If present and its value is not the empty string, no string\n    normalization will be performed.\n - `X-Fast-Or-Safe`: if set to `fast`, `blackd` will act as *Black* does when\n    passed the `--fast` command line flag.\n - `X-Python-Variant`: if set to `pyi`, `blackd` will act as *Black* does when\n    passed the `--pyi` command line flag. Otherwise, its value must correspond to\n    a Python version or a set of comma-separated Python versions, optionally\n    prefixed with `py`. For example, to request code that is compatible\n    with Python 3.5 and 3.6, set the header to `py3.5,py3.6`.\n\nIf any of these headers are set to invalid values, `blackd` returns a `HTTP 400`\nerror response, mentioning the name of the problematic header in the message body.\n\nApart from the above, `blackd` can produce the following response codes:\n\n - `HTTP 204`: If the input is already well-formatted. The response body is\n\tempty.\n - `HTTP 200`: If formatting was needed on the input. The response body\n\tcontains the blackened Python code, and the `Content-Type` header is set\n\taccordingly.\n - `HTTP 400`: If the input contains a syntax error. Details of the error are\n\treturned in the response body.\n - `HTTP 500`: If there was any kind of error while trying to format the input.\n\tThe response body contains a textual representation of the error.\n\n## Version control integration\n\nUse [pre-commit](https://pre-commit.com/). Once you [have it\ninstalled](https://pre-commit.com/#install), add this to the\n`.pre-commit-config.yaml` in your repository:\n```yaml\nrepos:\n-   repo: https://github.com/psf/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n```\nThen run `pre-commit install` and you're ready to go.\n\nAvoid using `args` in the hook.  Instead, store necessary configuration\nin `pyproject.toml` so that editors and command-line usage of Black all\nbehave consistently for your project.  See *Black*'s own [pyproject.toml](/pyproject.toml)\nfor an example.\n\nIf you're already using Python 3.7, switch the `language_version`\naccordingly. Finally, `stable` is a tag that is pinned to the latest\nrelease on PyPI.  If you'd rather run on master, this is also an option.\n\n\n## Ignoring unmodified files\n\n*Black* remembers files it has already formatted, unless the `--diff` flag is used or\ncode is passed via standard input. This information is stored per-user. The exact\nlocation of the file depends on the *Black* version and the system on which *Black*\nis run. The file is non-portable. The standard location on common operating systems\nis:\n\n* Windows: `C:\\\\Users\\<username>\\AppData\\Local\\black\\black\\Cache\\<version>\\cache.<line-length>.<file-mode>.pickle`\n* macOS: `/Users/<username>/Library/Caches/black/<version>/cache.<line-length>.<file-mode>.pickle`\n* Linux: `/home/<username>/.cache/black/<version>/cache.<line-length>.<file-mode>.pickle`\n\n`file-mode` is an int flag that determines whether the file was formatted as 3.6+ only,\nas .pyi, and whether string normalization was omitted.\n\nTo override the location of these files on macOS or Linux, set the environment variable\n`XDG_CACHE_HOME` to your preferred location. For example, if you want to put the cache in\nthe directory you're running *Black* from, set `XDG_CACHE_HOME=.cache`. *Black* will then\nwrite the above files to `.cache/black/<version>/`.\n\n## Used by\n\nThe following notable open-source projects trust *Black* with enforcing\na consistent code style: pytest, tox, Pyramid, Django Channels, Hypothesis,\nattrs, SQLAlchemy, Poetry, PyPA applications (Warehouse, Pipenv, virtualenv),\nevery Datadog Agent Integration.\n\nAre we missing anyone?  Let us know.\n\n\n## Testimonials\n\n**Dusty Phillips**, [writer](https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=dusty+phillips):\n\n> *Black* is opinionated so you don't have to be.\n\n**Hynek Schlawack**, [creator of `attrs`](https://www.attrs.org/), core\ndeveloper of Twisted and CPython:\n\n> An auto-formatter that doesn't suck is all I want for Xmas!\n\n**Carl Meyer**, [Django](https://www.djangoproject.com/) core developer:\n\n> At least the name is good.\n\n**Kenneth Reitz**, creator of [`requests`](http://python-requests.org/)\nand [`pipenv`](https://docs.pipenv.org/):\n\n> This vastly improves the formatting of our code. Thanks a ton!\n\n\n## Show your style\n\nUse the badge in your project's README.md:\n\n```markdown\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n```\n\nUsing the badge in README.rst:\n```\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n```\n\nLooks like this: [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\n## License\n\nMIT\n\n\n## Contributing to *Black*\n\nIn terms of inspiration, *Black* is about as configurable as *gofmt*.\nThis is deliberate.\n\nBug reports and fixes are always welcome!  However, before you suggest a\nnew feature or configuration knob, ask yourself why you want it.  If it\nenables better integration with some workflow, fixes an inconsistency,\nspeeds things up, and so on - go for it!  On the other hand, if your\nanswer is \"because I don't like a particular formatting\" then you're not\nready to embrace *Black* yet. Such changes are unlikely to get accepted.\nYou can still try but prepare to be disappointed.\n\nMore details can be found in [CONTRIBUTING](CONTRIBUTING.md).\n\n\n## Change Log\n\n### unreleased\n\n* added `black -c` as a way to format code passed from the command line\n  (#761)\n\n* --safe now works with Python 2 code (#840)\n\n* fixed grammar selection for Python 2-specific code (#765)\n\n* fixed feature detection for trailing commas in function definitions\n  and call sites (#763)\n\n* *Black* can now format async generators (#593)\n\n* *Black* no longer crashes on Windows machines with more than 61 cores\n  (#838)\n\n* *Black* no longer crashes on standalone comments prepended with\n  a backslash (#767)\n\n* *Black* no longer crashes on `from` ... `import` blocks with comments\n  (#829)\n\n* removed unnecessary parentheses around `yield` expressions (#834)\n\n* added parentheses around long tuples in unpacking assignments (#832)\n\n* fixed bug that led *Black* format some code with a line length target\n  of 1 (#762)\n\n* *Black* no longer introduces quotes in f-string subexpressions on string\n  boundaries (#863)\n\n* if *Black* puts parenthesis around a single expression, it moves comments\n  to the wrapped expression instead of after the brackets (#872)\n\n* *Black* is now able to format Python code that uses assignment expressions\n  (`:=` as described in PEP-572) (#935)\n\n* *Black* is now able to format Python code that uses positional-only\n  arguments (`/` as described in PEP-570) (#946)\n\n\n### 19.3b0\n\n* new option `--target-version` to control which Python versions\n  *Black*-formatted code should target (#618)\n\n* deprecated `--py36` (use `--target-version=py36` instead) (#724)\n\n* *Black* no longer normalizes numeric literals to include `_` separators (#696)\n\n* long `del` statements are now split into multiple lines (#698)\n\n* type comments are no longer mangled in function signatures\n\n* improved performance of formatting deeply nested data structures (#509)\n\n* *Black* now properly formats multiple files in parallel on\n  Windows (#632)\n\n* *Black* now creates cache files atomically which allows it to be used\n  in parallel pipelines (like `xargs -P8`) (#673)\n\n* *Black* now correctly indents comments in files that were previously\n  formatted with tabs (#262)\n\n* `blackd` now supports CORS (#622)\n\n\n### 18.9b0\n\n* numeric literals are now formatted by *Black* (#452, #461, #464, #469):\n\n  * numeric literals are normalized to include `_` separators on Python 3.6+ code\n\n  * added `--skip-numeric-underscore-normalization` to disable the above behavior and\n    leave numeric underscores as they were in the input\n\n  * code with `_` in numeric literals is recognized as Python 3.6+\n\n  * most letters in numeric literals are lowercased (e.g., in `1e10`, `0x01`)\n\n  * hexadecimal digits are always uppercased (e.g. `0xBADC0DE`)\n\n* added `blackd`, see [its documentation](#blackd) for more info (#349)\n\n* adjacent string literals are now correctly split into multiple lines (#463)\n\n* trailing comma is now added to single imports that don't fit on a line (#250)\n\n* cache is now populated when `--check` is successful for a file which speeds up\n  consecutive checks of properly formatted unmodified files (#448)\n\n* whitespace at the beginning of the file is now removed (#399)\n\n* fixed mangling [pweave](http://mpastell.com/pweave/) and\n  [Spyder IDE](https://pythonhosted.org/spyder/) special comments (#532)\n\n* fixed unstable formatting when unpacking big tuples (#267)\n\n* fixed parsing of `__future__` imports with renames (#389)\n\n* fixed scope of `# fmt: off` when directly preceding `yield` and other nodes (#385)\n\n* fixed formatting of lambda expressions with default arguments (#468)\n\n* fixed ``async for`` statements: *Black* no longer breaks them into separate\n  lines (#372)\n\n* note: the Vim plugin stopped registering ``,=`` as a default chord as it turned out\n  to be a bad idea (#415)\n\n\n### 18.6b4\n\n* hotfix: don't freeze when multiple comments directly precede `# fmt: off` (#371)\n\n\n### 18.6b3\n\n* typing stub files (`.pyi`) now have blank lines added after constants (#340)\n\n* `# fmt: off` and `# fmt: on` are now much more dependable:\n\n  * they now work also within bracket pairs (#329)\n\n  * they now correctly work across function/class boundaries (#335)\n\n  * they now work when an indentation block starts with empty lines or misaligned\n    comments (#334)\n\n* made Click not fail on invalid environments; note that Click is right but the\n  likelihood we'll need to access non-ASCII file paths when dealing with Python source\n  code is low (#277)\n\n* fixed improper formatting of f-strings with quotes inside interpolated\n  expressions (#322)\n\n* fixed unnecessary slowdown when long list literals where found in a file\n\n* fixed unnecessary slowdown on AST nodes with very many siblings\n\n* fixed cannibalizing backslashes during string normalization\n\n* fixed a crash due to symbolic links pointing outside of the project directory (#338)\n\n\n### 18.6b2\n\n* added `--config` (#65)\n\n* added `-h` equivalent to `--help` (#316)\n\n* fixed improper unmodified file caching when `-S` was used\n\n* fixed extra space in string unpacking (#305)\n\n* fixed formatting of empty triple quoted strings (#313)\n\n* fixed unnecessary slowdown in comment placement calculation on lines without\n  comments\n\n\n### 18.6b1\n\n* hotfix: don't output human-facing information on stdout (#299)\n\n* hotfix: don't output cake emoji on non-zero return code (#300)\n\n\n### 18.6b0\n\n* added `--include` and `--exclude` (#270)\n\n* added `--skip-string-normalization` (#118)\n\n* added `--verbose` (#283)\n\n* the header output in `--diff` now actually conforms to the unified diff spec\n\n* fixed long trivial assignments being wrapped in unnecessary parentheses (#273)\n\n* fixed unnecessary parentheses when a line contained multiline strings (#232)\n\n* fixed stdin handling not working correctly if an old version of Click was\n  used (#276)\n\n* *Black* now preserves line endings when formatting a file in place (#258)\n\n\n### 18.5b1\n\n* added `--pyi` (#249)\n\n* added `--py36` (#249)\n\n* Python grammar pickle caches are stored with the formatting caches, making\n  *Black* work in environments where site-packages is not user-writable (#192)\n\n* *Black* now enforces a PEP 257 empty line after a class-level docstring\n  (and/or fields) and the first method\n\n* fixed invalid code produced when standalone comments were present in a trailer\n  that was omitted from line splitting on a large expression (#237)\n\n* fixed optional parentheses being removed within `# fmt: off` sections (#224)\n\n* fixed invalid code produced when stars in very long imports were incorrectly\n  wrapped in optional parentheses (#234)\n\n* fixed unstable formatting when inline comments were moved around in\n  a trailer that was omitted from line splitting on a large expression\n  (#238)\n\n* fixed extra empty line between a class declaration and the first\n  method if no class docstring or fields are present (#219)\n\n* fixed extra empty line between a function signature and an inner\n  function or inner class (#196)\n\n\n### 18.5b0\n\n* call chains are now formatted according to the\n  [fluent interfaces](https://en.wikipedia.org/wiki/Fluent_interface)\n  style (#67)\n\n* data structure literals (tuples, lists, dictionaries, and sets) are\n  now also always exploded like imports when they don't fit in a single\n  line (#152)\n\n* slices are now formatted according to PEP 8 (#178)\n\n* parentheses are now also managed automatically on the right-hand side\n  of assignments and return statements (#140)\n\n* math operators now use their respective priorities for delimiting multiline\n  expressions (#148)\n\n* optional parentheses are now omitted on expressions that start or end\n  with a bracket and only contain a single operator (#177)\n\n* empty parentheses in a class definition are now removed (#145, #180)\n\n* string prefixes are now standardized to lowercase and `u` is removed\n  on Python 3.6+ only code and Python 2.7+ code with the `unicode_literals`\n  future import (#188, #198, #199)\n\n* typing stub files (`.pyi`) are now formatted in a style that is consistent\n  with PEP 484 (#207, #210)\n\n* progress when reformatting many files is now reported incrementally\n\n* fixed trailers (content with brackets) being unnecessarily exploded\n  into their own lines after a dedented closing bracket (#119)\n\n* fixed an invalid trailing comma sometimes left in imports (#185)\n\n* fixed non-deterministic formatting when multiple pairs of removable parentheses\n  were used (#183)\n\n* fixed multiline strings being unnecessarily wrapped in optional\n  parentheses in long assignments (#215)\n\n* fixed not splitting long from-imports with only a single name\n\n* fixed Python 3.6+ file discovery by also looking at function calls with\n  unpacking. This fixed non-deterministic formatting if trailing commas\n  where used both in function signatures with stars and function calls\n  with stars but the former would be reformatted to a single line.\n\n* fixed crash on dealing with optional parentheses (#193)\n\n* fixed \"is\", \"is not\", \"in\", and \"not in\" not considered operators for\n  splitting purposes\n\n* fixed crash when dead symlinks where encountered\n\n\n### 18.4a4\n\n* don't populate the cache on `--check` (#175)\n\n\n### 18.4a3\n\n* added a \"cache\"; files already reformatted that haven't changed on disk\n  won't be reformatted again (#109)\n\n* `--check` and `--diff` are no longer mutually exclusive (#149)\n\n* generalized star expression handling, including double stars; this\n  fixes multiplication making expressions \"unsafe\" for trailing commas (#132)\n\n* *Black* no longer enforces putting empty lines behind control flow statements\n  (#90)\n\n* *Black* now splits imports like \"Mode 3 + trailing comma\" of isort (#127)\n\n* fixed comment indentation when a standalone comment closes a block (#16, #32)\n\n* fixed standalone comments receiving extra empty lines if immediately preceding\n  a class, def, or decorator (#56, #154)\n\n* fixed `--diff` not showing entire path (#130)\n\n* fixed parsing of complex expressions after star and double stars in\n  function calls (#2)\n\n* fixed invalid splitting on comma in lambda arguments (#133)\n\n* fixed missing splits of ternary expressions (#141)\n\n\n### 18.4a2\n\n* fixed parsing of unaligned standalone comments (#99, #112)\n\n* fixed placement of dictionary unpacking inside dictionary literals (#111)\n\n* Vim plugin now works on Windows, too\n\n* fixed unstable formatting when encountering unnecessarily escaped quotes\n  in a string (#120)\n\n\n### 18.4a1\n\n* added `--quiet` (#78)\n\n* added automatic parentheses management (#4)\n\n* added [pre-commit](https://pre-commit.com) integration (#103, #104)\n\n* fixed reporting on `--check` with multiple files (#101, #102)\n\n* fixed removing backslash escapes from raw strings (#100, #105)\n\n\n### 18.4a0\n\n* added `--diff` (#87)\n\n* add line breaks before all delimiters, except in cases like commas, to\n  better comply with PEP 8 (#73)\n\n* standardize string literals to use double quotes (almost) everywhere\n  (#75)\n\n* fixed handling of standalone comments within nested bracketed\n  expressions; *Black* will no longer produce super long lines or put all\n  standalone comments at the end of the expression (#22)\n\n* fixed 18.3a4 regression: don't crash and burn on empty lines with\n  trailing whitespace (#80)\n\n* fixed 18.3a4 regression: `# yapf: disable` usage as trailing comment\n  would cause *Black* to not emit the rest of the file (#95)\n\n* when CTRL+C is pressed while formatting many files, *Black* no longer\n  freaks out with a flurry of asyncio-related exceptions\n\n* only allow up to two empty lines on module level and only single empty\n  lines within functions (#74)\n\n\n### 18.3a4\n\n* `# fmt: off` and `# fmt: on` are implemented (#5)\n\n* automatic detection of deprecated Python 2 forms of print statements\n  and exec statements in the formatted file (#49)\n\n* use proper spaces for complex expressions in default values of typed\n  function arguments (#60)\n\n* only return exit code 1 when --check is used (#50)\n\n* don't remove single trailing commas from square bracket indexing\n  (#59)\n\n* don't omit whitespace if the previous factor leaf wasn't a math\n  operator (#55)\n\n* omit extra space in kwarg unpacking if it's the first argument (#46)\n\n* omit extra space in [Sphinx auto-attribute comments](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute)\n  (#68)\n\n\n### 18.3a3\n\n* don't remove single empty lines outside of bracketed expressions\n  (#19)\n\n* added ability to pipe formatting from stdin to stdin (#25)\n\n* restored ability to format code with legacy usage of `async` as\n  a name (#20, #42)\n\n* even better handling of numpy-style array indexing (#33, again)\n\n\n### 18.3a2\n\n* changed positioning of binary operators to occur at beginning of lines\n  instead of at the end, following [a recent change to PEP 8](https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b)\n  (#21)\n\n* ignore empty bracket pairs while splitting. This avoids very weirdly\n  looking formattings (#34, #35)\n\n* remove a trailing comma if there is a single argument to a call\n\n* if top level functions were separated by a comment, don't put four\n  empty lines after the upper function\n\n* fixed unstable formatting of newlines with imports\n\n* fixed unintentional folding of post scriptum standalone comments\n  into last statement if it was a simple statement (#18, #28)\n\n* fixed missing space in numpy-style array indexing (#33)\n\n* fixed spurious space after star-based unary expressions (#31)\n\n\n### 18.3a1\n\n* added `--check`\n\n* only put trailing commas in function signatures and calls if it's\n  safe to do so. If the file is Python 3.6+ it's always safe, otherwise\n  only safe if there are no `*args` or `**kwargs` used in the signature\n  or call. (#8)\n\n* fixed invalid spacing of dots in relative imports (#6, #13)\n\n* fixed invalid splitting after comma on unpacked variables in for-loops\n  (#23)\n\n* fixed spurious space in parenthesized set expressions (#7)\n\n* fixed spurious space after opening parentheses and in default\n  arguments (#14, #17)\n\n* fixed spurious space after unary operators when the operand was\n  a complex expression (#15)\n\n\n### 18.3a0\n\n* first published version, Happy 🍰 Day 2018!\n\n* alpha quality\n\n* date-versioned (see: https://calver.org/)\n\n\n## Authors\n\nGlued together by [Łukasz Langa](mailto:lukasz@langa.pl).\n\nMaintained with [Carol Willing](mailto:carolcode@willingconsulting.com),\n[Carl Meyer](mailto:carl@oddbird.net),\n[Jelle Zijlstra](mailto:jelle.zijlstra@gmail.com),\n[Mika Naylor](mailto:mail@autophagy.io), and\n[Zsolt Dollenstein](mailto:zsol.zsol@gmail.com).\n\nMultiple contributions by:\n* [Anthony Sottile](mailto:asottile@umich.edu)\n* [Artem Malyshev](mailto:proofit404@gmail.com)\n* [Benjamin Woodruff](mailto:github@benjam.info)\n* [Christian Heimes](mailto:christian@python.org)\n* [Daniel M. Capella](mailto:polycitizen@gmail.com)\n* [Eli Treuherz](mailto:eli@treuherz.com)\n* hauntsaninja\n* Hugo van Kemenade\n* [Ivan Katanić](mailto:ivan.katanic@gmail.com)\n* [Jason Fried](mailto:me@jasonfried.info)\n* [Jonas Obrist](mailto:ojiidotch@gmail.com)\n* [Luka Sterbic](mailto:luka.sterbic@gmail.com)\n* [Miguel Gaiowski](mailto:miggaiowski@gmail.com)\n* [Miroslav Shubernetskiy](mailto:miroslav@miki725.com)\n* [Neraste](mailto:neraste.herr10@gmail.com)\n* [Osaetin Daniel](mailto:osaetindaniel@gmail.com)\n* [Peter Bengtsson](mailto:mail@peterbe.com)\n* [Stavros Korokithakis](mailto:hi@stavros.io)\n* [Sunil Kapil](mailto:snlkapil@gmail.com)\n* [Utsav Shah](mailto:ukshah2@illinois.edu)\n* [Vishwas B Sharma](mailto:sharma.vishwas88@gmail.com)\n* [Chuck Wooters](mailto:chuck.wooters@microsoft.com)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/axiros/axblack",
    "keywords": "automation formatter yapf autopep8 pyfmt gofmt rustfmt",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "axblack",
    "package_url": "https://pypi.org/project/axblack/",
    "platform": null,
    "project_url": "https://pypi.org/project/axblack/",
    "project_urls": {
      "Homepage": "https://github.com/axiros/axblack"
    },
    "release_url": "https://pypi.org/project/axblack/20220330/",
    "requires_dist": [
      "click (>=6.5)",
      "attrs (>=18.1.0)",
      "appdirs",
      "toml (>=0.9.4)",
      "typed-ast (>=1.4.0)",
      "regex",
      "pathspec (<1,>=0.6)",
      "typing-extensions (>=3.7.4)",
      "mypy-extensions (>=0.4.3)",
      "dataclasses (>=0.6) ; python_version < \"3.7\"",
      "aiohttp (>=3.3.2) ; extra == 'd'",
      "aiohttp-cors ; extra == 'd'"
    ],
    "requires_python": ">=3.6",
    "summary": "The uncompromising code formatter (compromised version)",
    "version": "20220330",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13346580,
  "releases": {
    "191128": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "005de68dbf2e83e81ed2afa526e122420ef55ff5e69dbc850d9b24c563ade89a",
          "md5": "e9615e3f33ddd6f7d305b1cfde65a105",
          "sha256": "5a436a549eb219fe5f8394d0d34678f306be3157a8afca028377216307c8bfa0"
        },
        "downloads": -1,
        "filename": "axblack-191128-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9615e3f33ddd6f7d305b1cfde65a105",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102438,
        "upload_time": "2019-11-24T11:20:04",
        "upload_time_iso_8601": "2019-11-24T11:20:04.721901Z",
        "url": "https://files.pythonhosted.org/packages/00/5d/e68dbf2e83e81ed2afa526e122420ef55ff5e69dbc850d9b24c563ade89a/axblack-191128-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b11c406bee24e051438250f7654cef6997f2fa97633466a0daea34d6cdf833c3",
          "md5": "3b164f48623b06af01e4476a499947db",
          "sha256": "fb5841e552b08d351d6b76c0732f2a07264e2b98e7d595da18ceeea856f50d54"
        },
        "downloads": -1,
        "filename": "axblack-191128.tar.gz",
        "has_sig": false,
        "md5_digest": "3b164f48623b06af01e4476a499947db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1027984,
        "upload_time": "2019-11-24T11:20:07",
        "upload_time_iso_8601": "2019-11-24T11:20:07.839059Z",
        "url": "https://files.pythonhosted.org/packages/b1/1c/406bee24e051438250f7654cef6997f2fa97633466a0daea34d6cdf833c3/axblack-191128.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191123": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24ee98312342c393d250bcb2d5a5354be7a06c75961bf35646d8ba4ec1c68dd1",
          "md5": "8b18fc0e4c1f0462d64091406435e663",
          "sha256": "2cbe623960e0daf85f655db8023479e5ef5b4906e958ba7a45178d3942cb7f16"
        },
        "downloads": -1,
        "filename": "axblack-20191123-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b18fc0e4c1f0462d64091406435e663",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 100578,
        "upload_time": "2019-11-23T15:14:22",
        "upload_time_iso_8601": "2019-11-23T15:14:22.786911Z",
        "url": "https://files.pythonhosted.org/packages/24/ee/98312342c393d250bcb2d5a5354be7a06c75961bf35646d8ba4ec1c68dd1/axblack-20191123-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191124": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97c5bbba0fc17748b4f6331a6d294b0e3af7ad6e5ca6984884ea84393f5d0a3c",
          "md5": "8810f40e0c40fe597ec2bf2ecd413bfe",
          "sha256": "39234beb55bc6dda51e1f0e2be9e7c8b1334bbbf950e3cf430cb27e837abe022"
        },
        "downloads": -1,
        "filename": "axblack-20191124-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "8810f40e0c40fe597ec2bf2ecd413bfe",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 100578,
        "upload_time": "2019-11-23T15:15:45",
        "upload_time_iso_8601": "2019-11-23T15:15:45.382258Z",
        "url": "https://files.pythonhosted.org/packages/97/c5/bbba0fc17748b4f6331a6d294b0e3af7ad6e5ca6984884ea84393f5d0a3c/axblack-20191124-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0354a94fa5c60c4475a1df552b1d1e264d01f2a7b66fca4b6e187e2cfdd80a6c",
          "md5": "2599b2c384e05bd53252c250fa489026",
          "sha256": "40821c09acfd2f462eaad635fb39ebea779bd2777f7f0c43a6b8807f2c5fd783"
        },
        "downloads": -1,
        "filename": "axblack-20191124.tar.gz",
        "has_sig": false,
        "md5_digest": "2599b2c384e05bd53252c250fa489026",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 188388,
        "upload_time": "2019-11-23T15:15:47",
        "upload_time_iso_8601": "2019-11-23T15:15:47.565682Z",
        "url": "https://files.pythonhosted.org/packages/03/54/a94fa5c60c4475a1df552b1d1e264d01f2a7b66fca4b6e187e2cfdd80a6c/axblack-20191124.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191125": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13d06fa00cf31db245e4436ddec99c90ec74fa38f8a15a43e62d5035d31b60c4",
          "md5": "acecccc2b55449cb1ae50041ff7e129c",
          "sha256": "04cb93535716470baec6c0e60e2fd5449c7f5a8ca4edfe3cf062684cc6c53974"
        },
        "downloads": -1,
        "filename": "axblack-20191125-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "acecccc2b55449cb1ae50041ff7e129c",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102193,
        "upload_time": "2019-11-23T16:40:09",
        "upload_time_iso_8601": "2019-11-23T16:40:09.798622Z",
        "url": "https://files.pythonhosted.org/packages/13/d0/6fa00cf31db245e4436ddec99c90ec74fa38f8a15a43e62d5035d31b60c4/axblack-20191125-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d98f0a4e67b634ca02ecc1380dcd7c31e7c8a430c0ac40fa17239372929f2553",
          "md5": "f977cb1bd63cd53ebc84ed7bfe5d0ec2",
          "sha256": "27fbb923899b5b54b2b3981ad7bdea9de91a013937916987f61ffb174fa7d646"
        },
        "downloads": -1,
        "filename": "axblack-20191125.tar.gz",
        "has_sig": false,
        "md5_digest": "f977cb1bd63cd53ebc84ed7bfe5d0ec2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 193510,
        "upload_time": "2019-11-23T16:40:12",
        "upload_time_iso_8601": "2019-11-23T16:40:12.514699Z",
        "url": "https://files.pythonhosted.org/packages/d9/8f/0a4e67b634ca02ecc1380dcd7c31e7c8a430c0ac40fa17239372929f2553/axblack-20191125.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191126": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db831a8dd08f97439dc0b60d204e332fae8b500e24d75b4533ff5e24644d94f1",
          "md5": "108b0cacbf96bc6cab0fc285d0ba0585",
          "sha256": "716de3690ae40c451f0dde22ac7b072c5437598e0a423ba212c92a524fcb3403"
        },
        "downloads": -1,
        "filename": "axblack-20191126-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "108b0cacbf96bc6cab0fc285d0ba0585",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102188,
        "upload_time": "2019-11-23T16:41:15",
        "upload_time_iso_8601": "2019-11-23T16:41:15.759634Z",
        "url": "https://files.pythonhosted.org/packages/db/83/1a8dd08f97439dc0b60d204e332fae8b500e24d75b4533ff5e24644d94f1/axblack-20191126-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfb1dd3f0f3a164d81c7463c85be795fd6ebda13840808ece40df539955274fe",
          "md5": "97cc1c8dcda6a625759cbbe34621e09c",
          "sha256": "cf2c083ad706bcd972a1f90ce079c1218b8ad44045cc37d205f4c879346b1314"
        },
        "downloads": -1,
        "filename": "axblack-20191126.tar.gz",
        "has_sig": false,
        "md5_digest": "97cc1c8dcda6a625759cbbe34621e09c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 193506,
        "upload_time": "2019-11-23T16:41:18",
        "upload_time_iso_8601": "2019-11-23T16:41:18.060812Z",
        "url": "https://files.pythonhosted.org/packages/cf/b1/dd3f0f3a164d81c7463c85be795fd6ebda13840808ece40df539955274fe/axblack-20191126.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191127": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b73926e977021718fd786862f06bbd0389e4d2d2f9524438c40748d23c8812",
          "md5": "480b75a95ac80d3d1f2dbc19667901be",
          "sha256": "d9ac7d6bda8d52b245f661be933a674f0dded385a07315a5201817fb9e4bdfe9"
        },
        "downloads": -1,
        "filename": "axblack-20191127-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "480b75a95ac80d3d1f2dbc19667901be",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102461,
        "upload_time": "2019-11-23T21:50:44",
        "upload_time_iso_8601": "2019-11-23T21:50:44.615619Z",
        "url": "https://files.pythonhosted.org/packages/f2/b7/3926e977021718fd786862f06bbd0389e4d2d2f9524438c40748d23c8812/axblack-20191127-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6fab52c32112fb375c709120dab1a654034732932356a5e3cad45b488fe3130",
          "md5": "281e906c4069397bd5426365f0b586ba",
          "sha256": "2d26478a1ad2ceda725efbe3bbf737b4c0af05696af224714a0a266a6303623b"
        },
        "downloads": -1,
        "filename": "axblack-20191127.tar.gz",
        "has_sig": false,
        "md5_digest": "281e906c4069397bd5426365f0b586ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 194323,
        "upload_time": "2019-11-23T21:50:47",
        "upload_time_iso_8601": "2019-11-23T21:50:47.546528Z",
        "url": "https://files.pythonhosted.org/packages/c6/fa/b52c32112fb375c709120dab1a654034732932356a5e3cad45b488fe3130/axblack-20191127.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191128": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b48e6c992e6db0f79920a7c18dd7a1c90ff8137d2a6fd007f92cad868f0124f6",
          "md5": "c2680ee86c115b26afae5a2076728ad6",
          "sha256": "4ff0402bdc996e102d898b787347a4427022218caf35060f84fd6d2c964112c5"
        },
        "downloads": -1,
        "filename": "axblack-20191128-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2680ee86c115b26afae5a2076728ad6",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102549,
        "upload_time": "2019-11-24T11:34:07",
        "upload_time_iso_8601": "2019-11-24T11:34:07.294874Z",
        "url": "https://files.pythonhosted.org/packages/b4/8e/6c992e6db0f79920a7c18dd7a1c90ff8137d2a6fd007f92cad868f0124f6/axblack-20191128-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a5a2247222cdc1bf3e8182f9bef033dfa00869c809c416446dc7d8d50d37bcb",
          "md5": "6265ff513b6f59e0b95bae8266ed583c",
          "sha256": "0e3d0449f5198ebe27ca9fd8f51abb81036015f45305adb0b6625c76da0200c1"
        },
        "downloads": -1,
        "filename": "axblack-20191128.tar.gz",
        "has_sig": false,
        "md5_digest": "6265ff513b6f59e0b95bae8266ed583c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1028416,
        "upload_time": "2019-11-24T11:34:10",
        "upload_time_iso_8601": "2019-11-24T11:34:10.042616Z",
        "url": "https://files.pythonhosted.org/packages/4a/5a/2247222cdc1bf3e8182f9bef033dfa00869c809c416446dc7d8d50d37bcb/axblack-20191128.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191129": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb6b35ea4dacd1ef7fffcc412d39aae4d6299f4ba5fd6fe538f2556250b3c208",
          "md5": "3ac6c343127ee9b9e326f52717a4fef8",
          "sha256": "2bae29ea3d822c3e39aa95878616b00aecfb8b6b5eacabecd4a10ca233833684"
        },
        "downloads": -1,
        "filename": "axblack-20191129-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ac6c343127ee9b9e326f52717a4fef8",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102547,
        "upload_time": "2019-11-24T11:41:00",
        "upload_time_iso_8601": "2019-11-24T11:41:00.516385Z",
        "url": "https://files.pythonhosted.org/packages/eb/6b/35ea4dacd1ef7fffcc412d39aae4d6299f4ba5fd6fe538f2556250b3c208/axblack-20191129-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f721ed276b9dce0f9f383f7a5d9fdb87bbcdc5235ca3f30481a7c9f2eb0a443",
          "md5": "3a60f1520325c5c989ef689edc1d8bdd",
          "sha256": "e428663787afb4577c51f2e1899efed029c522295ebc8478eecc56fc3c59ddc5"
        },
        "downloads": -1,
        "filename": "axblack-20191129.tar.gz",
        "has_sig": false,
        "md5_digest": "3a60f1520325c5c989ef689edc1d8bdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1028418,
        "upload_time": "2019-11-24T11:41:03",
        "upload_time_iso_8601": "2019-11-24T11:41:03.549600Z",
        "url": "https://files.pythonhosted.org/packages/3f/72/1ed276b9dce0f9f383f7a5d9fdb87bbcdc5235ca3f30481a7c9f2eb0a443/axblack-20191129.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191201": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c34311740c4b1914399f2223f4f8d6362428a2aee47bb3b4c33693dc5b9894cc",
          "md5": "9afc591f0cce7aae3a3380704d97b776",
          "sha256": "78d7f088684de48365c3a5781edb0ee7d3b7cf17b311e0547d7e9bea6bc5882c"
        },
        "downloads": -1,
        "filename": "axblack-20191201-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "9afc591f0cce7aae3a3380704d97b776",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 102722,
        "upload_time": "2019-11-24T14:41:03",
        "upload_time_iso_8601": "2019-11-24T14:41:03.415579Z",
        "url": "https://files.pythonhosted.org/packages/c3/43/11740c4b1914399f2223f4f8d6362428a2aee47bb3b4c33693dc5b9894cc/axblack-20191201-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a771b3fac7d9e9d9f1637b23791b604d5dfdb7518d35f4317c6bea7919b660f",
          "md5": "696ff8cba501fb4e273f1ce7f030dc2e",
          "sha256": "bdf8335ea93639ea555817a18aada348e51c6b432a5265320d5c99480271da63"
        },
        "downloads": -1,
        "filename": "axblack-20191201.tar.gz",
        "has_sig": false,
        "md5_digest": "696ff8cba501fb4e273f1ce7f030dc2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1029343,
        "upload_time": "2019-11-24T14:41:06",
        "upload_time_iso_8601": "2019-11-24T14:41:06.458817Z",
        "url": "https://files.pythonhosted.org/packages/7a/77/1b3fac7d9e9d9f1637b23791b604d5dfdb7518d35f4317c6bea7919b660f/axblack-20191201.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9ce195820ea761ca5bdf869d19b5d45a4ad79d99a4b1d2998211bc15160464a",
          "md5": "2f04c1fa73a56566a93c15353f42ead1",
          "sha256": "73c688abf2c7d17c0bc3d2d7a84766ccf4ad6fc0c2c68b72393763dc3e18f0ee"
        },
        "downloads": -1,
        "filename": "axblack-20191212-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f04c1fa73a56566a93c15353f42ead1",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103305,
        "upload_time": "2019-12-12T13:04:58",
        "upload_time_iso_8601": "2019-12-12T13:04:58.042781Z",
        "url": "https://files.pythonhosted.org/packages/e9/ce/195820ea761ca5bdf869d19b5d45a4ad79d99a4b1d2998211bc15160464a/axblack-20191212-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb939f91d3bcf109b7548216bdf7f909c019945370834e129f8ddd20f942a4b",
          "md5": "d37ef6daf7a16d6311e6403d3235ec03",
          "sha256": "0bb9f533a96961be80ca42ea689432977fd2d83af4983fd7962975bb2475d05e"
        },
        "downloads": -1,
        "filename": "axblack-20191212.tar.gz",
        "has_sig": false,
        "md5_digest": "d37ef6daf7a16d6311e6403d3235ec03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1031045,
        "upload_time": "2019-12-12T13:05:00",
        "upload_time_iso_8601": "2019-12-12T13:05:00.766788Z",
        "url": "https://files.pythonhosted.org/packages/fc/b9/39f91d3bcf109b7548216bdf7f909c019945370834e129f8ddd20f942a4b/axblack-20191212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191213": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6be7b3d1afdb7125a12ae9fd61d757ad67d7607595943d32cb13c648a39d742",
          "md5": "5c1b87cf5af1f2136c8eca6888403cae",
          "sha256": "763cf0f195ea6950918c9932e378568a6a7bbf342dd5e51c4e1ed7a3016255d8"
        },
        "downloads": -1,
        "filename": "axblack-20191213-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c1b87cf5af1f2136c8eca6888403cae",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103256,
        "upload_time": "2019-12-12T13:16:08",
        "upload_time_iso_8601": "2019-12-12T13:16:08.384544Z",
        "url": "https://files.pythonhosted.org/packages/c6/be/7b3d1afdb7125a12ae9fd61d757ad67d7607595943d32cb13c648a39d742/axblack-20191213-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0ec80364b605c56f52dd066faccb0ad0f9c018df3aab7a3cfe6e3b892182fa0",
          "md5": "57cf19a237848d3ba8a2f092364e17a7",
          "sha256": "2c2ea1ddb1a34f50348f22a47d44237df44705e8d0b5bf66492648061bb5ceab"
        },
        "downloads": -1,
        "filename": "axblack-20191213.tar.gz",
        "has_sig": false,
        "md5_digest": "57cf19a237848d3ba8a2f092364e17a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1030937,
        "upload_time": "2019-12-12T13:16:11",
        "upload_time_iso_8601": "2019-12-12T13:16:11.543521Z",
        "url": "https://files.pythonhosted.org/packages/b0/ec/80364b605c56f52dd066faccb0ad0f9c018df3aab7a3cfe6e3b892182fa0/axblack-20191213.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200130": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8607a56025175dae55a2f6a116f814e443ffbde5a3c32ca96cc37818dea5c11",
          "md5": "d236224ec4f47af6c4773a87662e3557",
          "sha256": "311d23c2e6857fa516d3441ee9db50885c91d236404b0a3de38cd8fe74a8f58b"
        },
        "downloads": -1,
        "filename": "axblack-20200130-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "d236224ec4f47af6c4773a87662e3557",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103428,
        "upload_time": "2020-01-31T22:20:41",
        "upload_time_iso_8601": "2020-01-31T22:20:41.151760Z",
        "url": "https://files.pythonhosted.org/packages/d8/60/7a56025175dae55a2f6a116f814e443ffbde5a3c32ca96cc37818dea5c11/axblack-20200130-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14cc948db52d895c96792fee9ead4f13a213bc9e4f3d76e6834084bd2f7853c3",
          "md5": "bb3e3e9b719e3a6d46b8740d96adb9e4",
          "sha256": "46e9a6e51e35a3fca2c4a5750d3dd4769e1ec5363abe6054a7445b74e662b155"
        },
        "downloads": -1,
        "filename": "axblack-20200130.tar.gz",
        "has_sig": false,
        "md5_digest": "bb3e3e9b719e3a6d46b8740d96adb9e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1031322,
        "upload_time": "2020-01-31T22:20:44",
        "upload_time_iso_8601": "2020-01-31T22:20:44.354784Z",
        "url": "https://files.pythonhosted.org/packages/14/cc/948db52d895c96792fee9ead4f13a213bc9e4f3d76e6834084bd2f7853c3/axblack-20200130.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200802": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8665012c16b6a594abcf48e4a6ca9e76636e872da05b35b39c757047646ae0a",
          "md5": "fe3cf370b68e313aca9f895303fa6839",
          "sha256": "9b28a34511d78e0333f2fa6458bd91abdee0db29ebfe19b36bee5236f3bdbb45"
        },
        "downloads": -1,
        "filename": "axblack-20200802-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe3cf370b68e313aca9f895303fa6839",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103447,
        "upload_time": "2020-08-02T20:58:27",
        "upload_time_iso_8601": "2020-08-02T20:58:27.777220Z",
        "url": "https://files.pythonhosted.org/packages/e8/66/5012c16b6a594abcf48e4a6ca9e76636e872da05b35b39c757047646ae0a/axblack-20200802-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1232b3a3130753462e1f75f9a1638bcdb98605ac94faa1929de9795ef30269ec",
          "md5": "ee6699a3789f54bd35ad150f478a3111",
          "sha256": "038c2912fcce8d0085e06b80e66cfe67dea7cf1c9d0d0fba3ec2e08ec9b99455"
        },
        "downloads": -1,
        "filename": "axblack-20200802.tar.gz",
        "has_sig": false,
        "md5_digest": "ee6699a3789f54bd35ad150f478a3111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1031358,
        "upload_time": "2020-08-02T20:58:30",
        "upload_time_iso_8601": "2020-08-02T20:58:30.362170Z",
        "url": "https://files.pythonhosted.org/packages/12/32/b3a3130753462e1f75f9a1638bcdb98605ac94faa1929de9795ef30269ec/axblack-20200802.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200803": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c1b0ff992c8f9e559d17679bcc391ab985d50172021dedbfb122335d89bc44",
          "md5": "316f5420eb3daa44acbe630c5e3398c4",
          "sha256": "5ab2a9de98f15ca5c059193c3acc921924e3beddf37bb3ab040e43e64520886a"
        },
        "downloads": -1,
        "filename": "axblack-20200803-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "316f5420eb3daa44acbe630c5e3398c4",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103447,
        "upload_time": "2020-08-03T04:17:52",
        "upload_time_iso_8601": "2020-08-03T04:17:52.169601Z",
        "url": "https://files.pythonhosted.org/packages/a6/c1/b0ff992c8f9e559d17679bcc391ab985d50172021dedbfb122335d89bc44/axblack-20200803-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d02e5c4349c188c394e9feb58a94a92fb3384a5035bb4672547330958ad4c82",
          "md5": "d3d8c6861d5f5a7712b67a235409b45c",
          "sha256": "f8cbd30bffbc3472e91c4a31d09fa83d8d3f1882123ebc88bb8f3ad084310081"
        },
        "downloads": -1,
        "filename": "axblack-20200803.tar.gz",
        "has_sig": false,
        "md5_digest": "d3d8c6861d5f5a7712b67a235409b45c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1036978,
        "upload_time": "2020-08-03T04:17:54",
        "upload_time_iso_8601": "2020-08-03T04:17:54.784128Z",
        "url": "https://files.pythonhosted.org/packages/3d/02/e5c4349c188c394e9feb58a94a92fb3384a5035bb4672547330958ad4c82/axblack-20200803.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201009": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c9114399b70b8a32a7c51b974ccb1f2019a94aa8724a1dddab195ddd0a22d2b",
          "md5": "25d3c477588f4692a2606021b95a9f0c",
          "sha256": "825b985402ed0c8238f8eef01bd838b389187a54a83f96df1cbce565d1fd70d5"
        },
        "downloads": -1,
        "filename": "axblack-20201009-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "25d3c477588f4692a2606021b95a9f0c",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103669,
        "upload_time": "2020-10-09T19:44:23",
        "upload_time_iso_8601": "2020-10-09T19:44:23.136592Z",
        "url": "https://files.pythonhosted.org/packages/9c/91/14399b70b8a32a7c51b974ccb1f2019a94aa8724a1dddab195ddd0a22d2b/axblack-20201009-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4152db6f852aa40b7fe82a5bc7b32e5233a4d99f90d400ba33a25198c8a695d9",
          "md5": "b0576b8cec2074edc106481b8416a49f",
          "sha256": "8ec45de394f699f7153d51f20100f0b7e88cc30c38e3b59422735c62624b401b"
        },
        "downloads": -1,
        "filename": "axblack-20201009.tar.gz",
        "has_sig": false,
        "md5_digest": "b0576b8cec2074edc106481b8416a49f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1037373,
        "upload_time": "2020-10-09T19:44:25",
        "upload_time_iso_8601": "2020-10-09T19:44:25.790781Z",
        "url": "https://files.pythonhosted.org/packages/41/52/db6f852aa40b7fe82a5bc7b32e5233a4d99f90d400ba33a25198c8a695d9/axblack-20201009.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201010": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f59b04f9e25126f709974aac3836cbfd7a0178aac530a7c284e6650a2a398b8",
          "md5": "d3d18b6e392efd0f7b90f0c4db7d6ee2",
          "sha256": "6aabad977383297c1067c2444c33caad170404263aaeaa84b055eaaf5ac47173"
        },
        "downloads": -1,
        "filename": "axblack-20201010-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3d18b6e392efd0f7b90f0c4db7d6ee2",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 103812,
        "upload_time": "2020-10-09T20:47:35",
        "upload_time_iso_8601": "2020-10-09T20:47:35.241116Z",
        "url": "https://files.pythonhosted.org/packages/7f/59/b04f9e25126f709974aac3836cbfd7a0178aac530a7c284e6650a2a398b8/axblack-20201010-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9031d0d411b341062d2354e897814d2113ac480f88c78ff212f50ae4a04dea4",
          "md5": "941234aaead933ab17e56635606eadec",
          "sha256": "1ac5b592b7b20fa307d1a6fe5089d81cd07fc07fd63f6682242ed0804207d6f2"
        },
        "downloads": -1,
        "filename": "axblack-20201010.tar.gz",
        "has_sig": false,
        "md5_digest": "941234aaead933ab17e56635606eadec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1037457,
        "upload_time": "2020-10-09T20:47:37",
        "upload_time_iso_8601": "2020-10-09T20:47:37.749771Z",
        "url": "https://files.pythonhosted.org/packages/f9/03/1d0d411b341062d2354e897814d2113ac480f88c78ff212f50ae4a04dea4/axblack-20201010.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201012": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3130326278e54eae541ae2455e18a1684d98f60cb4e91f97168170523344a816",
          "md5": "af0a4a17e2d39de1db65b5285b3b5ba1",
          "sha256": "c758521f89eb3e99227ab366fb26a7846064d9d1a3e475c378eaca05c7cfbb61"
        },
        "downloads": -1,
        "filename": "axblack-20201012-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "af0a4a17e2d39de1db65b5285b3b5ba1",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 104494,
        "upload_time": "2020-10-12T11:36:35",
        "upload_time_iso_8601": "2020-10-12T11:36:35.745916Z",
        "url": "https://files.pythonhosted.org/packages/31/30/326278e54eae541ae2455e18a1684d98f60cb4e91f97168170523344a816/axblack-20201012-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282293ae05487949c36b1b1ec2c48a98ed64affe33f5112eae0463f940f43208",
          "md5": "991e92c812fa2094dc067d9c63e7bb8d",
          "sha256": "54ceb3e3188c6e5815636a71f93be93034faa4cf804ac3900f99fa3d8d440c03"
        },
        "downloads": -1,
        "filename": "axblack-20201012.tar.gz",
        "has_sig": false,
        "md5_digest": "991e92c812fa2094dc067d9c63e7bb8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1232669,
        "upload_time": "2020-10-12T11:36:38",
        "upload_time_iso_8601": "2020-10-12T11:36:38.478988Z",
        "url": "https://files.pythonhosted.org/packages/28/22/93ae05487949c36b1b1ec2c48a98ed64affe33f5112eae0463f940f43208/axblack-20201012.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201112": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09025856f5d2d09f7b2d67e6f787aa283e10aec5f9cf175e58bcadb39424d575",
          "md5": "5429516b1adc70d1137185cf15ac2b06",
          "sha256": "add2fdde4988ed201ff53fb955202caf7149c483103fb4ceabb7d2776bd0673a"
        },
        "downloads": -1,
        "filename": "axblack-20201112-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "5429516b1adc70d1137185cf15ac2b06",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 104955,
        "upload_time": "2020-11-18T16:19:22",
        "upload_time_iso_8601": "2020-11-18T16:19:22.869171Z",
        "url": "https://files.pythonhosted.org/packages/09/02/5856f5d2d09f7b2d67e6f787aa283e10aec5f9cf175e58bcadb39424d575/axblack-20201112-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12bc9381ea76d475c4c086f85e8233cfcf903ea5eda4537d3bebb3fad7326f4d",
          "md5": "ffee7c7043a204353938cc4ef841bfa5",
          "sha256": "43c79fd10b291238d4783843354fc25e1febf977ced957e0371f9fb39885085a"
        },
        "downloads": -1,
        "filename": "axblack-20201112.tar.gz",
        "has_sig": false,
        "md5_digest": "ffee7c7043a204353938cc4ef841bfa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1296014,
        "upload_time": "2020-11-18T16:19:25",
        "upload_time_iso_8601": "2020-11-18T16:19:25.726431Z",
        "url": "https://files.pythonhosted.org/packages/12/bc/9381ea76d475c4c086f85e8233cfcf903ea5eda4537d3bebb3fad7326f4d/axblack-20201112.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210720": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63c3344955a83e3c1a5f8910e86aa0bb7446cc4575c19b17b61db7303134aa1c",
          "md5": "b616bd7fad8583e5a4dc66228d9c3359",
          "sha256": "38929a3c38b1cad3528c8c38d36ce45f267301ed2c2a07db66c04dffeb23e1f9"
        },
        "downloads": -1,
        "filename": "axblack-20210720-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "b616bd7fad8583e5a4dc66228d9c3359",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 104984,
        "upload_time": "2021-07-27T18:10:29",
        "upload_time_iso_8601": "2021-07-27T18:10:29.651434Z",
        "url": "https://files.pythonhosted.org/packages/63/c3/344955a83e3c1a5f8910e86aa0bb7446cc4575c19b17b61db7303134aa1c/axblack-20210720-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bcdf51f109e8eaeba188eed7a13e93b26f8b058b27f88f9e385d200b829fd3c",
          "md5": "4f5bd97039ae0ecd59fcdae5177c08d7",
          "sha256": "704e01c6ba0df00eab2b982bfe4073e7dab948006277f8fd9357ffc170acb19c"
        },
        "downloads": -1,
        "filename": "axblack-20210720.tar.gz",
        "has_sig": false,
        "md5_digest": "4f5bd97039ae0ecd59fcdae5177c08d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1279498,
        "upload_time": "2021-07-27T18:10:33",
        "upload_time_iso_8601": "2021-07-27T18:10:33.108757Z",
        "url": "https://files.pythonhosted.org/packages/8b/cd/f51f109e8eaeba188eed7a13e93b26f8b058b27f88f9e385d200b829fd3c/axblack-20210720.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220320": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b422529941f5a45cb2dffc6265e49786ad75ab4fb606e4aeeefb263d9a8e2f20",
          "md5": "6bb9b6bb52c71637beb9c2bd8f7f5dd5",
          "sha256": "9f75d8226de2ff22a53ce10aa198b42575ef44f7c7b01957b7fff7a7edd98c5f"
        },
        "downloads": -1,
        "filename": "axblack-20220320-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bb9b6bb52c71637beb9c2bd8f7f5dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 105026,
        "upload_time": "2022-03-21T12:29:15",
        "upload_time_iso_8601": "2022-03-21T12:29:15.082222Z",
        "url": "https://files.pythonhosted.org/packages/b4/22/529941f5a45cb2dffc6265e49786ad75ab4fb606e4aeeefb263d9a8e2f20/axblack-20220320-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3cc8cdebfc35be514bc8343cf3e7da55fc5f9968d51dd097c0f4a58aef45bf1",
          "md5": "bc9406710f94bb5c79ca13e0db63d684",
          "sha256": "a3a2c908f1d989263d5d412795fe03efcee9e640ca5fedb812bb6be05e468da3"
        },
        "downloads": -1,
        "filename": "axblack-20220320.tar.gz",
        "has_sig": false,
        "md5_digest": "bc9406710f94bb5c79ca13e0db63d684",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1279513,
        "upload_time": "2022-03-21T12:29:17",
        "upload_time_iso_8601": "2022-03-21T12:29:17.794792Z",
        "url": "https://files.pythonhosted.org/packages/a3/cc/8cdebfc35be514bc8343cf3e7da55fc5f9968d51dd097c0f4a58aef45bf1/axblack-20220320.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220321": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abe99b1c5733b8028890e73288e7e9ba92c6799e90c317859ec98c9d6dcab3b7",
          "md5": "46ec10dcaa2066333716d1138fad316a",
          "sha256": "99ae6dfa5faa0d1d680c30e1ede021036f1384d010eba5c520ed43efbe1ef251"
        },
        "downloads": -1,
        "filename": "axblack-20220321-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "46ec10dcaa2066333716d1138fad316a",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 105027,
        "upload_time": "2022-03-21T12:34:37",
        "upload_time_iso_8601": "2022-03-21T12:34:37.913948Z",
        "url": "https://files.pythonhosted.org/packages/ab/e9/9b1c5733b8028890e73288e7e9ba92c6799e90c317859ec98c9d6dcab3b7/axblack-20220321-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065e787654c3c546b2056ebdca6091fabcbc5dbc5123c510ea45c6d7ecafd711",
          "md5": "f75637ce5af1723a184ee53e034ceb05",
          "sha256": "8b6258ac91e9ae7473301bdca58192dd10994e73d8782192b4520983e1696543"
        },
        "downloads": -1,
        "filename": "axblack-20220321.tar.gz",
        "has_sig": false,
        "md5_digest": "f75637ce5af1723a184ee53e034ceb05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1279505,
        "upload_time": "2022-03-21T12:34:40",
        "upload_time_iso_8601": "2022-03-21T12:34:40.522744Z",
        "url": "https://files.pythonhosted.org/packages/06/5e/787654c3c546b2056ebdca6091fabcbc5dbc5123c510ea45c6d7ecafd711/axblack-20220321.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220322": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d552970e08abef4266c924b8e98e7918e00903a1c1985bbdf997400a6cb8646",
          "md5": "5d1b7737c582f40c563034180804d998",
          "sha256": "57efe65860242fb3cde7e4fe35bcb3a64d013de212e0aead84bb35ca0b6999e0"
        },
        "downloads": -1,
        "filename": "axblack-20220322-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d1b7737c582f40c563034180804d998",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 105159,
        "upload_time": "2022-03-21T14:50:07",
        "upload_time_iso_8601": "2022-03-21T14:50:07.084600Z",
        "url": "https://files.pythonhosted.org/packages/1d/55/2970e08abef4266c924b8e98e7918e00903a1c1985bbdf997400a6cb8646/axblack-20220322-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c97ac32ca2fe6fcc642e23be749c8a6fd364a37ee6fd8b2482865ca9aa4556b",
          "md5": "f7311da7ac63fdf85fc55331dea25c0c",
          "sha256": "78dc0dfccc9efd2350ab8ec268040c5421520d70cfddbaf8f373fff858e18e4d"
        },
        "downloads": -1,
        "filename": "axblack-20220322.tar.gz",
        "has_sig": false,
        "md5_digest": "f7311da7ac63fdf85fc55331dea25c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1279921,
        "upload_time": "2022-03-21T14:50:09",
        "upload_time_iso_8601": "2022-03-21T14:50:09.694458Z",
        "url": "https://files.pythonhosted.org/packages/8c/97/ac32ca2fe6fcc642e23be749c8a6fd364a37ee6fd8b2482865ca9aa4556b/axblack-20220322.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220330": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "782626c5f788f9a9d275f314c84ab72b565cb989adf27063d3efd133f1d54b27",
          "md5": "8082b4b68961c6b8305d8ba12f579330",
          "sha256": "d148283dac77084776418da83819e6f44d6ce043f8bd9abff645548718e807fc"
        },
        "downloads": -1,
        "filename": "axblack-20220330-py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "8082b4b68961c6b8305d8ba12f579330",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": ">=3.6",
        "size": 105256,
        "upload_time": "2022-03-30T13:35:12",
        "upload_time_iso_8601": "2022-03-30T13:35:12.950192Z",
        "url": "https://files.pythonhosted.org/packages/78/26/26c5f788f9a9d275f314c84ab72b565cb989adf27063d3efd133f1d54b27/axblack-20220330-py36-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c02f050ce6a4c87db089ee7fc9117ab2ae8fbcd3bcec68eb4f5adcf1e5772b61",
          "md5": "9170a147ef52e776d709db5ca2c25357",
          "sha256": "9446b866f58728e78ae38dca5f5967f1a2ddea0d1b81734f6168ed98d6519149"
        },
        "downloads": -1,
        "filename": "axblack-20220330.tar.gz",
        "has_sig": false,
        "md5_digest": "9170a147ef52e776d709db5ca2c25357",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1280277,
        "upload_time": "2022-03-30T13:35:15",
        "upload_time_iso_8601": "2022-03-30T13:35:15.784142Z",
        "url": "https://files.pythonhosted.org/packages/c0/2f/050ce6a4c87db089ee7fc9117ab2ae8fbcd3bcec68eb4f5adcf1e5772b61/axblack-20220330.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "782626c5f788f9a9d275f314c84ab72b565cb989adf27063d3efd133f1d54b27",
        "md5": "8082b4b68961c6b8305d8ba12f579330",
        "sha256": "d148283dac77084776418da83819e6f44d6ce043f8bd9abff645548718e807fc"
      },
      "downloads": -1,
      "filename": "axblack-20220330-py36-none-any.whl",
      "has_sig": false,
      "md5_digest": "8082b4b68961c6b8305d8ba12f579330",
      "packagetype": "bdist_wheel",
      "python_version": "py36",
      "requires_python": ">=3.6",
      "size": 105256,
      "upload_time": "2022-03-30T13:35:12",
      "upload_time_iso_8601": "2022-03-30T13:35:12.950192Z",
      "url": "https://files.pythonhosted.org/packages/78/26/26c5f788f9a9d275f314c84ab72b565cb989adf27063d3efd133f1d54b27/axblack-20220330-py36-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c02f050ce6a4c87db089ee7fc9117ab2ae8fbcd3bcec68eb4f5adcf1e5772b61",
        "md5": "9170a147ef52e776d709db5ca2c25357",
        "sha256": "9446b866f58728e78ae38dca5f5967f1a2ddea0d1b81734f6168ed98d6519149"
      },
      "downloads": -1,
      "filename": "axblack-20220330.tar.gz",
      "has_sig": false,
      "md5_digest": "9170a147ef52e776d709db5ca2c25357",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1280277,
      "upload_time": "2022-03-30T13:35:15",
      "upload_time_iso_8601": "2022-03-30T13:35:15.784142Z",
      "url": "https://files.pythonhosted.org/packages/c0/2f/050ce6a4c87db089ee7fc9117ab2ae8fbcd3bcec68eb4f5adcf1e5772b61/axblack-20220330.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}