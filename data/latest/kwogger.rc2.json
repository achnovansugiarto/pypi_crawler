{
  "info": {
    "author": "Brad Corlett",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent"
    ],
    "description": "# Kwogger\n[K] e y [W] o r d L [o g g e r]\n\nBy Brad Corlett\n\n#### Installation\n\n    pip install Kwogger\n\n\n#### Documentation\n\n* sample code and log files are in ./examples\n* see ./API.txt for API reference\n\n\n## Description and Tutorial\n\nA python `LoggerAdapter` that writes key value data to a log file while and associated classes to read and parse data \nfrom files while preserving type so log entries can be further processed.\n\n\nContext data can be supplied at the creation of the logger to add correlating data to each log entry over the lifetime\nof the logger. The first string argument to each log call is stored as key `msg` and then every other kwarg passed to\nthe logging call is also added, in addition to data about the log call (file, line num, level, etc) and exception\ndata if relevant. Logging methods ending with `_exc` will automatically log exception information to save adding `exc_info` kwarg. \nThe order of key words as passed to the log method is preserved when written to a log for consistent readability\n\n\n    log = kwogger.rotate_by_size('simple', 'simple.log', hello='world', global_context_data=True)\n\n    # this and subsequent calls will also log kwargs from instantiation (hello='world', global_context_data=True)\n    log.info('Sample message')\n\n    log.info('Sample message', key1='hello', key2='world')\n\n    log.info('Sample data types', a=None, b=True, c=1, d=1.1, e='string')\n\n    x, y = 1, 0\n    try:\n        z = x / y\n    except ZeroDivisionError:\n        # automatically gets exception data and traceback from sys module\n        log.error_exc('Problem dividing', x=x, y=y)\n\n**Output to log file**\n\n    s.time=\"2021-01-06 21:44:19.773767\" s.log=\"simple\" s.level=\"INFO\" s.path=\"./simple.py\" s.func=\"main\" s.lineno=10 e.msg=\"Sample message\" c.hello=\"world\" c.global_context_data=True\n    s.time=\"2021-01-06 21:44:19.774036\" s.log=\"simple\" s.level=\"INFO\" s.path=\"./simple.py\" s.func=\"main\" s.lineno=13 e.msg=\"Sample message\" e.key1=\"hello\" e.key2=\"world\" c.hello=\"world\" c.global_context_data=True\n    s.time=\"2021-01-06 21:44:19.774152\" s.log=\"simple\" s.level=\"INFO\" s.path=\"./simple.py\" s.func=\"main\" s.lineno=16 e.msg=\"Sample message\" e.a=None e.b=True e.c=1 e.d=1.1 e.e=\"string\" c.hello=\"world\" c.global_context_data=True\n    s.time=\"2021-01-06 21:44:19.774305\" s.log=\"simple\" s.level=\"ERROR\" s.path=\"./simple.py\" s.func=\"main\" s.lineno=23 e.msg=\"Problem dividing\" e.x=1 e.y=0 exc.class=\"ZeroDivisionError\" exc.msg=\"division by zero\" exc.traceback=\"\"\"['  File \"\"\"\"./simple.py\"\"\"\", line 20, in main\\n    z = x / y\\n']\"\"\" c.hello=\"world\" c.global_context_data=True\n\n\nThis custom serialization format is easy to read as a log file but retains data type for `None`, `bool`, `int`, `float`, and `str`, any other value is converted to and serialized as a string. A built-in parser can deserialize read from a log file the data and retain type for post processing. \n\n\n### Initializing loggers\nThe `rotate_by_size` and `rotate_by_time` are convenience functions for creating a log handle, file path, level and rotation settings. It also returns and instance of `KwogAdapter` and adds kwargs to its context.\n\nThe `new` function creates a new instance of `KwogAdapter` with the specified logger. It is also able to generate a unique id and inherent context kwargs from an existing logger.\nThis function is useful for creating a new context for every request in a web server, by using `new` to overwrite an existing logger you can be sure data is not shared between requests.\n\nexample:\n\n    main_log = kwogger.rotate_by_size('multi', 'multi.log', main_context=True)\n    main_log.info('MESSAGE_1')\n\n    log = kwogger.new('multi', 'request_id', main_log, first_request=True)\n    log.info('MESSAGE_2')\n\n    log = kwogger.new('multi', 'request_id', main_log, second_request=True)\n    log.info('MESSAGE_3')\n\noutput:\n\n    s.time=\"2021-01-24 14:17:18.624784\" s.log=\"multiple\" s.level=\"INFO\" s.path=\"./multiple.py\" s.func=\"main\" s.lineno=7 c.main_context=True e.msg=\"MESSAGE_1\"\n    s.time=\"2021-01-24 14:17:18.628171\" s.log=\"multiple\" s.level=\"INFO\" s.path=\"./multiple.py\" s.func=\"main\" s.lineno=10 c.main_context=True c.first_request=True c.request_id=\"c3e2588e-47f7-36a0-bbed-fe1b15ff0184\" e.msg=\"MESSAGE_2\"\n    s.time=\"2021-01-24 14:17:18.628364\" s.log=\"multiple\" s.level=\"INFO\" s.path=\"./multiple.py\" s.func=\"main\" s.lineno=13 c.main_context=True c.second_request=True c.request_id=\"bc0840e4-aacd-341a-aebb-6690015f2a07\" e.msg=\"MESSAGE_3\"\n\n\n\n### Structure of log entries\nEach log entry consists of four different key value dictionaries, each is explained below.\n\n**entry**\n\nThis is data passed to a logging method like `.info()` or `.error_exc()` The first argument to a logging call is stored added to the kwarg dictionary as key `msg` and they are then logged together\n\n    e.msg=\"Sample message\" e.key1=\"hello\" e.key2=\"world\"\n\n**context**\n\nContext data previously set on logger and automatically passed to every log entry from a method like `.info()` or `.error_exc()`\n\n    c.user_id=\"123\"\n\n**source**\n\nThis namespace contains information about the file and logging call such as line number and time data. \n\n    s.time=\"2019-02-28 23:02:15.561370\" s.log=\"basic\" s.level=\"INFO\" s.path=\"examples/basic.py\" s.func=\"<module>\" s.lineno=7\n\n**exception**\n\nThis exists when handling an exception, it stores the exception's `class`, `msg`, and `traceback`\n\n    exc.class=\"ZeroDivisionError\" exc.msg=\"division by zero\" exc.traceback=\"\"\"['  File \"\"\"\"examples/basic.py\"\"\"\", line 17, in <module>\\n    z = x / y\\n']\"\"\"\n\n\n### Parsing log files\nThe `KwogFile` class can parse log files line by line and follow a file similar to unix command `tail -f`\n\n    with kwogger.KwogFile(LOG_FILE) as log:\n        for entry in log:\n            print(repr(entry))\n            print('\\tsource   ', entry.source)\n            print('\\tentry    ', entry.entry)\n            print('\\tcontext  ', entry.context)\n            print('\\texception', entry.exc, '\\n')\n\nExample output\n\n    <KwogEntry | ERROR | exception=True>\n\tsource    {'time': '2021-01-09 11:57:47.860915', 'log': 'parser', 'level': 'ERROR', 'path': './parser.py', 'func': 'write_log', 'lineno': 22}\n\tentry     {'msg': 'Problem dividing', 'x': 1, 'y': 0}\n\tcontext   {'pid': 40656}\n\texception {'class': 'ZeroDivisionError', 'msg': 'division by zero', 'traceback': '\"[\\'  File \"\"./parser.py\"\", line 20, in write_log\\\\n    z = x / y\\\\n\\']\"'}\n\n\n### CLI tail utility\nThe built in CLI utility uses the `KwogFile` class to follow and parse log entries entries to makes them more readable.\n\n    s: 2019-02-28 23:02:15.561370 INFO basic examples/basic.py func: <module> line: 7\n    e: msg=Sample message\n\n    s: 2019-02-28 23:02:15.561586 INFO basic examples/basic.py func: <module> line: 10\n    e: msg=Sample message\tkey1=hello\tkey2=world\n\n    s: 2019-02-28 23:02:15.561749 INFO basic examples/basic.py func: <module> line: 13\n    e: msg=Sample message\ta=None\tb=True\tc=1\td=1.1\te=string\tf=<built-in function open>\n\n    s: 2019-02-28 23:11:52.021554 ERROR basic examples/basic.py func: <module> line: 19\n    e: msg=Problem dividing\tx=1\ty=0\n    exc: ZeroDivisionError: division by zero\n    traceback:\n        File \"\"examples/basic.py\"\", line 17, in <module>\n            z = x / y\n\nThe CLI utility uses the `termcolor` library to vary the color of each entry based on the log level.\n\n    DEBUG:   white\n    INFO:    green\n    WARNING: yellow\n    ERROR:   red\n\nTail utility can be used by calling the module directly and providing a path\n\n    python3 -m kwogger example.log\n\n    # see help menu for more options\n    python3 -m kwogger -h\n\n\n### Convenience function for generating unique ids\n\n    logger.generate_id(field='request_id')\n\n    # each call to this logger will have a unique id added to it's context dict as key 'request_id'\n    # for example to to correlate all log entries for a specific web request (make sure each request starts\n    # with a new instance to prevent sharing data across multiple requests\n\n\n### Built in timer\nHelpful for timing long running processes to find bottle necks.\n\n**source**\n\n    log = kwogger.rotate_by_size('timer', 'timer.log')\n\n    log.timer_start('hello', details='we are starting a timer named hello')\n\n    time.sleep(1.5)\n\n    log.timer_checkpoint('hello', details='we are logging a checkpoint for timer hello')\n\n    time.sleep(1.5)\n\n    log.timer_stop('hello', details='we are stopping the timer and logging the elapsed time')\n\n**log**\n\n    s: 2019-02-28 23:33:05.161032 INFO timer1 examples/timer1.py func: main line: 20\n    e: msg=TIMER_STARTED\tvalue=1\ttimer_name=hello\tstart_time=1551425585.1610172\telapsed_time=4.76837158203125e-06\n\n    s: 2019-02-28 23:33:06.662534 INFO timer1 examples/timer1.py func: main line: 24\n    e: msg=TIMER_CHECKPOINT\tprocessing=True\ttimer_name=hello\tstart_time=1551425585.1610172\telapsed_time=1.501476764678955\n\n    s: 2019-02-28 23:33:08.167841 INFO timer1 examples/timer1.py func: main line: 28\n    e: msg=TIMER_STOPPED\tcomplete=True\ttimer_name=hello\tstart_time=1551425585.1610172\telapsed_time=3.006769895553589\tend_time=1551425588.167787\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Kwogger",
    "package_url": "https://pypi.org/project/Kwogger/",
    "platform": "",
    "project_url": "https://pypi.org/project/Kwogger/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/Kwogger/0.2.0/",
    "requires_dist": [
      "termcolor"
    ],
    "requires_python": ">=3.6",
    "summary": "A logging adapter that provides context data to each logging call over its lifetime.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9218666,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c150248971d0560f1f69e72f5fbfb9e6e500bb4b436f666afa5f213ea6e7e3fd",
          "md5": "abf49d2aa2419093ef618284dc8cf362",
          "sha256": "d886cb684871350a9f48101d70337ce493e907cfd6f1c1e6e611a10b4025c44c"
        },
        "downloads": -1,
        "filename": "Kwogger-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abf49d2aa2419093ef618284dc8cf362",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14994,
        "upload_time": "2021-01-09T22:02:58",
        "upload_time_iso_8601": "2021-01-09T22:02:58.176781Z",
        "url": "https://files.pythonhosted.org/packages/c1/50/248971d0560f1f69e72f5fbfb9e6e500bb4b436f666afa5f213ea6e7e3fd/Kwogger-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ace30dc06e981a5251f8cd284763e60b31b83b29361afccddfc7bfae00d76a6",
          "md5": "c960cc1e4d8b8edd46777d073e6844eb",
          "sha256": "33457c7521f5a0fdbe4f7f24c76d3e17a485f97fa7ec1eee3b2068248134174d"
        },
        "downloads": -1,
        "filename": "Kwogger-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c960cc1e4d8b8edd46777d073e6844eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12188,
        "upload_time": "2021-01-09T22:02:59",
        "upload_time_iso_8601": "2021-01-09T22:02:59.331029Z",
        "url": "https://files.pythonhosted.org/packages/3a/ce/30dc06e981a5251f8cd284763e60b31b83b29361afccddfc7bfae00d76a6/Kwogger-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a84d157752d538d6ebc3b632a7ad6ee487d55cbfd007a1448c7b1f3116eb229a",
          "md5": "6c94955e8501c05c643ccc66c84a6552",
          "sha256": "93a4b162c272c07219a0a8b6432dee34d6ca66cf40283e9df45945744d7104c5"
        },
        "downloads": -1,
        "filename": "Kwogger-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c94955e8501c05c643ccc66c84a6552",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15695,
        "upload_time": "2021-01-24T23:07:49",
        "upload_time_iso_8601": "2021-01-24T23:07:49.526099Z",
        "url": "https://files.pythonhosted.org/packages/a8/4d/157752d538d6ebc3b632a7ad6ee487d55cbfd007a1448c7b1f3116eb229a/Kwogger-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a7c0a06ad2a04030c5c592d60bed13fd0ae29f2f323cad6b4ca01143b370a18",
          "md5": "c038e1f7f036a92755daf1d4a6e956f3",
          "sha256": "0332c2d26e8eb6c48f29b4534ec8f0cdd0c1cdc81ae4db4ba3ca6b52852d28e6"
        },
        "downloads": -1,
        "filename": "Kwogger-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c038e1f7f036a92755daf1d4a6e956f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13036,
        "upload_time": "2021-01-24T23:07:50",
        "upload_time_iso_8601": "2021-01-24T23:07:50.751128Z",
        "url": "https://files.pythonhosted.org/packages/2a/7c/0a06ad2a04030c5c592d60bed13fd0ae29f2f323cad6b4ca01143b370a18/Kwogger-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a84d157752d538d6ebc3b632a7ad6ee487d55cbfd007a1448c7b1f3116eb229a",
        "md5": "6c94955e8501c05c643ccc66c84a6552",
        "sha256": "93a4b162c272c07219a0a8b6432dee34d6ca66cf40283e9df45945744d7104c5"
      },
      "downloads": -1,
      "filename": "Kwogger-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c94955e8501c05c643ccc66c84a6552",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15695,
      "upload_time": "2021-01-24T23:07:49",
      "upload_time_iso_8601": "2021-01-24T23:07:49.526099Z",
      "url": "https://files.pythonhosted.org/packages/a8/4d/157752d538d6ebc3b632a7ad6ee487d55cbfd007a1448c7b1f3116eb229a/Kwogger-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a7c0a06ad2a04030c5c592d60bed13fd0ae29f2f323cad6b4ca01143b370a18",
        "md5": "c038e1f7f036a92755daf1d4a6e956f3",
        "sha256": "0332c2d26e8eb6c48f29b4534ec8f0cdd0c1cdc81ae4db4ba3ca6b52852d28e6"
      },
      "downloads": -1,
      "filename": "Kwogger-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c038e1f7f036a92755daf1d4a6e956f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13036,
      "upload_time": "2021-01-24T23:07:50",
      "upload_time_iso_8601": "2021-01-24T23:07:50.751128Z",
      "url": "https://files.pythonhosted.org/packages/2a/7c/0a06ad2a04030c5c592d60bed13fd0ae29f2f323cad6b4ca01143b370a18/Kwogger-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}