{
  "info": {
    "author": "THOORENS Bruno",
    "author_email": "moustikitos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://raw.githubusercontent.com/Moustikitos/micro-server/master/LICENSE)\n\nMicro IO package (`usrv`) is a pure python JSON server implementation.\n\n### Support this project\n \n [![Liberapay receiving](https://img.shields.io/liberapay/goal/Toons?logo=liberapay)](https://liberapay.com/Toons/donate)\n \n [Buy &#1126;](https://bittrex.com/Account/Register?referralCode=NW5-DQO-QMT) and:\n \n   * [X] Send &#1126; to `AUahWfkfr5J4tYakugRbfow7RWVTK35GPW`\n   * [X] Vote `arky` on [Ark blockchain](https://explorer.ark.io) and [earn &#1126; weekly](http://dpos.arky-delegate.info/arky)\n\n# Install\n\n```\n$ pip install git+https://github.com/Moustikitos/micro-server#egg=usrv\n```\n\n# `usrv.srv`\n\nRun a very low footprint python server or [PEP#3333 WSGI server](https://www.python.org/dev/peps/pep-3333). Bind python code to any HTTP requests easily using decorator syntax.\n\n`srv` module can be used in standalone mode outside of `usrv` package.\n\n## Fast and simple\n\nLet's create a server with `/test` endpoint in a python module named `test.py`:\n\n```python\nfrom usrv import srv\n\n@srv.bind(\"/test\")\ndef do_test(a, b):\n    # write some code and return something\n    return a, b\n\ndef launchApp():\n    app = srv.MicroJsonApp(host=\"127.0.0.1\", port=5000, loglevel=10)\n    app.run(ssl=False)\n```\n\nServer can be run from python interpreter:\n\n```python\n>>> import test\n>>> test.launchApp()\nINFO:usrv.srv:listening on 127.0.0.1:5000\nCTRL+C to stop...\n```\n\nNow going to `127.0.0.1:5000/test` with any browser gives:\n```\n{\"status\": 200, \"result\": [null, null]}\n```\n\n## Extracting values from url query\n\n`[null, null]` above are the returned values `a` and `b` from `do_test` function. They can be extracted from query string. Let's type `127.0.0.1:5000/test?b=12&a=Paris` in the address bar:\n\n```\n{\"status\": 200, \"result\": [\"Paris\", \"12\"]}\n```\n\nReturned value from query are `str` only. Unexpected values are ignored but there is a [convenient way to catch them](#catching-unexpected-values).\n\n## Extracting values from url path\n\nValues can also be extracted from url path with or without a typing precision.\n\n```python\n@srv.bind(\"/<int:b>/<a>\")\ndef do_test(a, b):\n    # write some code and return something\n    return a, b\n```\n\nThis binding creates multiple endpoint possibilities. Let's try `127.0.0.1:5000/5/test`:\n\n```\n{\"status\": 200, \"result\": [\"test\", 5]}\n```\n\nValues from url can be overrided by thoses from query... `http://127.0.0.1:5000/5/test?a=2&b=6`:\n\n```\n{\"status\": 200, \"result\": [\"2\", \"6\"]}\n```\n\n## Catching unexpected values...\n\nUsing varargs or/and keywordargs is a convenient way to catch unexpected values from url query and HTTP context. HTTP Context is defined by a method, a full url, headers and data as python dictionary.\n\nWhen HTTP context is catched by `*args`, unexpected values from query string are appended next.\n\nUrl used for this chapter `127.0.0.1:5000/test?b=12&a=Paris&unexpected=there`.\n\n### Varargs (`*args`)\n\n```python\n@srv.bind(\"/test\")\ndef do_test(a, b, *args):\n    # write some code and return something\n    # args is a tuple\n    return a, b, args\n```\n\n```\n{\"status\": 200, \"result\": [\"Paris\", \"12\", [\"GET\", \"http://127.0.0.1:5000/test?b=12&a=Paris&unexpected=there\", {\"host\": \"127.0.0.1:5000\", \"connection\": \"keep-alive\", \"cache-control\": \"max-age=0\", \"upgrade-insecure-requests\": \"1\", \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36\", \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"sec-fetch-site\": \"none\", \"sec-fetch-mode\": \"navigate\", \"sec-fetch-user\": \"?1\", \"sec-fetch-dest\": \"document\", \"accept-encoding\": \"gzip, deflate, br\", \"accept-language\": \"fr,en-US;q=0.9,en;q=0.8\"}, {}, \"there\"]]}\n```\n\n### Keywordargs (`**kwargs`)\n\n```python\n@srv.bind(\"/test\")\ndef do_test(a, b, **kwargs):\n    # write some code and return something\n    # kwargs is a dict\n    return a, b, kwargs\n```\n\n```\n{\"status\": 200, \"result\": [\"Paris\", \"12\", {\"unexpected\": \"there\", \"url\": \"http://127.0.0.1:5000/test?b=12&a=Paris&unexpected=there\", \"headers\": {\"host\": \"127.0.0.1:5000\", \"connection\": \"keep-alive\", \"cache-control\": \"max-age=0\", \"upgrade-insecure-requests\": \"1\", \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36\", \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"sec-fetch-site\": \"none\", \"sec-fetch-mode\": \"navigate\", \"sec-fetch-user\": \"?1\", \"sec-fetch-dest\": \"document\", \"accept-encoding\": \"gzip, deflate, br\", \"accept-language\": \"fr,en-US;q=0.9,en;q=0.8\"}, \"data\": {}, \"method\": \"GET\"}]}\n```\n\n### Both (`*args`, `**kwargs`)\n\n```python\n@srv.bind(\"/test\")\ndef do_test(a, b, *args, **kwargs):\n    # write some code and return something\n    return a, b, args, kwargs\n```\n\n```\n{\"status\": 200, \"result\": [\"Paris\", \"12\", [\"there\"], {\"url\": \"http://127.0.0.1:5000/test?b=12&a=Paris&unexpected=there\", \"headers\": {\"host\": \"127.0.0.1:5000\", \"connection\": \"keep-alive\", \"upgrade-insecure-requests\": \"1\", \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36\", \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"sec-fetch-site\": \"none\", \"sec-fetch-mode\": \"navigate\", \"sec-fetch-dest\": \"document\", \"accept-encoding\": \"gzip, deflate, br\", \"accept-language\": \"fr,en-US;q=0.9,en;q=0.8\"}, \"data\": {}, \"method\": \"GET\"}]}\n```\n\n### Command line\n\nServer can be launched from command line using python module names for bindings. Modules containing binded code have to be found by python. This is not recomended for production.\n\n```\nUsage: srv.py [options] BINDINGS...\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -s, --ssl             activate ssl socket wraping\n  -l LOGLEVEL, --log-level=LOGLEVEL\n                        set log level from 1 to 50 [default: 20]\n  -i HOST, --ip=HOST    ip to run from             [default: 127.0.0.1]\n  -p PORT, --port=PORT  port to use                [default: 5000]\n```\n\n### Run behind a WSGI \n\n`srv.MicroJsonApp()` can be run behind a python WSGI like [`gunicorn`](https://gunicorn.org/):\n\n```bash\n$ gunicorn 'srv:MicroJsonApp()' --bind=0.0.0.0:5000\n```\n\n`gunicorn` needs an instance of `srv.MicroJsonApp`, it may be configured in a python module and have to be pointed by command line.\n\nLet's consider `wsgi.py` module bellow:\n\n```python\nfrom usrv import srv\nimport bindings\n\n# here is the instance gunicorn looks for\napp = srv.MicroJsonApp(host=\"127.0.0.1\", port=5000, loglevel=10)\n```\n\n```bash\n$ gunicorn 'wsgi:app' --bind=0.0.0.0:5000\n```\n\n## `usrv.req`\n\nProvides a pythonic way to fetch http calls.\n\n### Bodyless HTTP calls\n\nHttp calls `GET`, `DELETE`, `HEAD`, `OPTIONS` and `TRACE` are bodyless ie no data can be sent. All keyword arguments will be converted into an url query string.\n\n```python\nfrom usrv import req\n\n# first connect to a peer\nreq.connect(\"https://dexplorer.ark.io:8443\")\n# https://dexplorer.ark.io:8443/api/delegates\nresp = req.GET.api.delegates()\n# https://dexplorer.ark.io:8443/api/delegates?orderBy=username:asc\nresp = req.GET.api.delegates(orderBy=\"username:asc\")\n```\n\n### Other HTTP calls\n\nHttp calls `CONNECT`, `POST`, `PATCH`, `PUT` and `DELETE` allow data to be sent. It can be done as json-string or url-encoded-string.\n\n### Specific keywords\n\n#### `peer`\n\n```python\n# https://dexplorer.ark.io:8443/api/delegates?orderBy=username:asc\nresp = req.GET.api.delegates(orderBy=\"username:asc\", peer=\"https://dexplorer.ark.io:8443\")\n```\n\n#### `headers`\n#### `_jsonify`\n#### `_urlencode`\n#### `_multipart`\n\n\n# plugins\n\n## IpInfo\n## Bittrex\n## Notify\n\n## [Pinata](https://www.pinata.cloud/)\n\n```python\n>>> from usrv import pinata\n>>> pinata.link(\"eyJhb[...]rI7QY\")  # JWT token\n>>> pinata.pinFile(r\"c:\\Users\\Toons\\Pictures\\arky.png\")\n{'IpfsHash': 'QmT7V4pYNSopJHxKvYDxYrmrtCizv9PR5FJ5FkryVfiakP', 'PinSize': 25293, 'Timestamp': '2021-11-20T21:13:36.853Z', 'status': 200}\n```\n\nCheck pinned file here : `ipfs://QmT7V4pYNSopJHxKvYDxYrmrtCizv9PR5FJ5FkryVfiakP`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Moustikitos/micro-server/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Moustikitos/micro-server",
    "keywords": "json,micro,server,HTTP",
    "license": "Cpyright 2020 - 2021 THOORENS Bruno",
    "maintainer": "THOORENS Bruno",
    "maintainer_email": "moustikitos@gmail.com",
    "name": "usrv",
    "package_url": "https://pypi.org/project/usrv/",
    "platform": "",
    "project_url": "https://pypi.org/project/usrv/",
    "project_urls": {
      "Download": "https://github.com/Moustikitos/micro-server/archive/master.zip",
      "Homepage": "https://github.com/Moustikitos/micro-server"
    },
    "release_url": "https://pypi.org/project/usrv/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Low footprint HTTP stuff with JSON",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12079727,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69135d95db0bf0d8439714532518539af9253fc400c0daacf97997b754d284af",
          "md5": "ddc8f09bd51be937409c05cf3e7bcd89",
          "sha256": "bbd0cc66d4ec60eda0de58289d86050cf16c16e5289ea087bb87f2dddd7e303f"
        },
        "downloads": -1,
        "filename": "usrv-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ddc8f09bd51be937409c05cf3e7bcd89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15867,
        "upload_time": "2021-01-15T13:41:47",
        "upload_time_iso_8601": "2021-01-15T13:41:47.698378Z",
        "url": "https://files.pythonhosted.org/packages/69/13/5d95db0bf0d8439714532518539af9253fc400c0daacf97997b754d284af/usrv-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d600d68fb9a60757f45df97de2baac34ce5e794ab86bc583597d2155a33a47a",
          "md5": "149502f7fe1ab826434222a0f428bae3",
          "sha256": "95b154881e0a3b11ce685005ddc7a85afed8e774b9e731bd9ead83d88b97781f"
        },
        "downloads": -1,
        "filename": "usrv-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "149502f7fe1ab826434222a0f428bae3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17269,
        "upload_time": "2021-11-20T21:56:21",
        "upload_time_iso_8601": "2021-11-20T21:56:21.893051Z",
        "url": "https://files.pythonhosted.org/packages/2d/60/0d68fb9a60757f45df97de2baac34ce5e794ab86bc583597d2155a33a47a/usrv-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d600d68fb9a60757f45df97de2baac34ce5e794ab86bc583597d2155a33a47a",
        "md5": "149502f7fe1ab826434222a0f428bae3",
        "sha256": "95b154881e0a3b11ce685005ddc7a85afed8e774b9e731bd9ead83d88b97781f"
      },
      "downloads": -1,
      "filename": "usrv-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "149502f7fe1ab826434222a0f428bae3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17269,
      "upload_time": "2021-11-20T21:56:21",
      "upload_time_iso_8601": "2021-11-20T21:56:21.893051Z",
      "url": "https://files.pythonhosted.org/packages/2d/60/0d68fb9a60757f45df97de2baac34ce5e794ab86bc583597d2155a33a47a/usrv-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}