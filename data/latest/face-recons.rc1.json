{
  "info": {
    "author": "Srishti Guleria",
    "author_email": "guleriasrishti01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Finding set of faces when combined results in face of person A\nThis repository contains the code for the python project on â€œFinding set of faces when combined results in face of person A\". \nThe default mode of the application is interactive mode which is user friendly. The other mode is Command Line Interface.\n\n## Default Mode (Interactive Mode): \n\nWe start the application by opening the terminal in this folder and typing the command :  python main.py\n\nThe following 5 options are shown in the terminal. Then we would enter the number of the command of our choice between 1-5. \nIf we enter 1, the directory for training dataset is asked. Then the model starts to train & following output is generated.\nIf we enter 2, then the full file path to test directory is asked. Then the collage of input/test images are printed as output on terminal.\nIf we enter 3, then the mean face and first five eigen faces get printed on the output window one by one.\nThe mean face is displayed on the output window.\nThen, all the five eigen faces will be displayed on the output window one by one. \nIf we enter 4, then the trained model is read from pca_parameters.yml. \n  - Then the eigen vectors held in a structure of eigenVectors where eigen_face[i][j] = j-th eigen face of i-th image are displayed on the terminal as shown below.\n  - Then we enter the name of folder with image in format: directory/image_name.jpg. The image will be read and vectorized. After that the final results get displayed in new window. The final output window with original image on left and re-constructed image on right as described in the video below. \n  - It has a slider for increasing or decreasing the number of eigen faces used for reconstruction. By trying all combinations, we can dynamically see the best reconstructed image. \n  - The reconstructed image dynamically changes with respect to the number of eigen faces chosen on slider.\n  - The percentage of Eigen Faces used for reconstructing output image is dynamically printed on the terminal as we move the slider.\n\nFinally to exit the terminal we must enter 5. If we enter any other value than 1 to 5 then \"invalid mode\" output will be displayed.\n\n## Mode 1 (Command Line Interface)\n\nIf we wish to use the Command Line Interface, we can do so by typing the following command :\n  ```\n  python main.py --mode 1 --input directory/image.jpg --dataset directory\n  ```\nWe can enter mode = 1 for CLI mode, the directory/../image.jpg for the Test Image and the directory for the Training Dataset.\nFor example, if we entered test/300000.jpg for Test Image and sample2 for Training Dataset. \nThe model is trained from the pca_parameters.yml and the Test Image is reconstructed. \nThe percentage of Eigen Faces used to reconstruct the output image is dynamically printed on terminal as we slide the slider.\n\nSame Output Window of Reconstructed Image is displayed in CLI mode as seen in Interactive Mode.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sg7801/face",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "face-recons",
    "package_url": "https://pypi.org/project/face-recons/",
    "platform": "",
    "project_url": "https://pypi.org/project/face-recons/",
    "project_urls": {
      "Homepage": "https://github.com/sg7801/face"
    },
    "release_url": "https://pypi.org/project/face-recons/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Face Reconstruction Applicaton",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12252315,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02c0203582acf34b5462c9120dba6c8b144fd0735867a0cd4337fa51936ab205",
          "md5": "fae99a8c5d7f07b96929b081d6dfd27f",
          "sha256": "3e1f6299041ca8820564fee9a5a44e542accb750bf585fdd39d5863fd6f19638"
        },
        "downloads": -1,
        "filename": "face_recons-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fae99a8c5d7f07b96929b081d6dfd27f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6908,
        "upload_time": "2021-12-09T05:28:12",
        "upload_time_iso_8601": "2021-12-09T05:28:12.273188Z",
        "url": "https://files.pythonhosted.org/packages/02/c0/203582acf34b5462c9120dba6c8b144fd0735867a0cd4337fa51936ab205/face_recons-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21872d696d6982e4d2dfe22fba16b3eb09ee1d8f8537f821058208d9f0df76b",
          "md5": "9cfd195e27c429065ca4ddc63efa02a7",
          "sha256": "aa7347618d7ad38d630aaa5d0b04445426682daf82369b886fc9725700f434c7"
        },
        "downloads": -1,
        "filename": "face_recons-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9cfd195e27c429065ca4ddc63efa02a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6080,
        "upload_time": "2021-12-09T05:28:15",
        "upload_time_iso_8601": "2021-12-09T05:28:15.376905Z",
        "url": "https://files.pythonhosted.org/packages/f2/18/72d696d6982e4d2dfe22fba16b3eb09ee1d8f8537f821058208d9f0df76b/face_recons-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02c0203582acf34b5462c9120dba6c8b144fd0735867a0cd4337fa51936ab205",
        "md5": "fae99a8c5d7f07b96929b081d6dfd27f",
        "sha256": "3e1f6299041ca8820564fee9a5a44e542accb750bf585fdd39d5863fd6f19638"
      },
      "downloads": -1,
      "filename": "face_recons-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fae99a8c5d7f07b96929b081d6dfd27f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6908,
      "upload_time": "2021-12-09T05:28:12",
      "upload_time_iso_8601": "2021-12-09T05:28:12.273188Z",
      "url": "https://files.pythonhosted.org/packages/02/c0/203582acf34b5462c9120dba6c8b144fd0735867a0cd4337fa51936ab205/face_recons-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f21872d696d6982e4d2dfe22fba16b3eb09ee1d8f8537f821058208d9f0df76b",
        "md5": "9cfd195e27c429065ca4ddc63efa02a7",
        "sha256": "aa7347618d7ad38d630aaa5d0b04445426682daf82369b886fc9725700f434c7"
      },
      "downloads": -1,
      "filename": "face_recons-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9cfd195e27c429065ca4ddc63efa02a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6080,
      "upload_time": "2021-12-09T05:28:15",
      "upload_time_iso_8601": "2021-12-09T05:28:15.376905Z",
      "url": "https://files.pythonhosted.org/packages/f2/18/72d696d6982e4d2dfe22fba16b3eb09ee1d8f8537f821058208d9f0df76b/face_recons-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}