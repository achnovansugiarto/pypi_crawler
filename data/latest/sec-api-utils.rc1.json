{
  "info": {
    "author": "",
    "author_email": "Andreas Bruchmann <ba@abruchmann.at>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SEC-API-UTILS\nThis python package is an unofficial wrapper for the SEC-EDGAR-API. According to the fair-use policy of the API provided \nby the SEC, 10 requests per second can be made (https://www.sec.gov/developer). Limiting the number of requests is automatically fulfilled \nby the data loader of the SEC-API-UTILS package. \nThe data loader can be used for retrieving company facts by the use of the ticker name of the company.\nFurthermore, the python package provides some utilities for plotting the data retrieved. \nData can either be retrieved as a dictionary corresponding to the JSON retrieved over the SEC-API or an internal \nrepresentation starting with the SECCompanyInfo class. \n## Data Loader\nLoading the data over SEC-EDGAR-API can be performed by using the SECAPILoader to which at least the name and the email \naddress must be provided. For being able to use the ticker name as identifier the SECAPILoader loads a \nticker to CIK (SEC identification number of the stock) mapping into a cache directory once in the current working \ndirectory.\n\nFollowing 4 lines show the simple loading of data with the use of the\nSECAPILoader. \n```python\nfrom sec_api_utils.data_loading.SECAPILoader import SECAPILoader\nfrom sec_api_utils.data_representation.SECCompanyInfo import SECCompanyInfo\ndata_loader = SECAPILoader(your_company_name=\"<your_company_name>\", \n                           your_company_email=\"<your>@<company_email>.com\",\n                           override_cached_company_tickers=False)\ndata_msft: SECCompanyInfo = data_loader.get_data_from_ticker(ticker_name=\"MSFT\", as_dict=False)\n```\nSetting 'override_cached_company_tickers' to False enforces the data loader to use the \n'company_tickers.json' (ticker name to CIK mapping) from the cached directory. \nWhen set to true the 'company_tickers.json' is overridden in the cache directory \neven if it is already available.\n \nWhen loading the data with 'data_loader.get_data_from_ticker' one can simply choose if he wants the raw data \nas dictionary or in the representation provided by the package by setting flag 'as_dict' to True or False.\n\n## Data Representation (package classes vs. dictionary)\nAs mentioned in section 'Data Loading' one can choose between representation of the loaded data as a dictionary\nor as the provided representation covered by the classes in data_representation.\n\nWhen choosing the dictionary as representation the retrieved object represents a nested dictionary containing \nthe requested data of the given company. The retrieved dictionary will look like the following:\n```json\n{\n\t\"cik\": 789019,\n\t\"entityName\": \"MICROSOFT CORPORATION\",\n\t\"facts\": {\n\t\t\"dei\": {\n\t\t\t\"EntityCommonStockSharesOutstanding\": {\n\t\t\t\t\"label\": \"Entity Common Stock, Shares Outstanding\",\n\t\t\t\t\"description\": \"Indicate number of shares or other units outstanding of each of registrant's classes of capital or common stock or other ownership interests, if and as stated on cover of related periodic report. Where multiple classes or units exist define each class/interest by adding class of stock items such as Common Class A [Member], Common Class B [Member] or Partnership Interest [Member] onto the Instrument [Domain] of the Entity Listings, Instrument.\",\n\t\t\t\t\"units\": {\n\t\t\t\t\t\"shares\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"end\": \"2009-10-19\",\n\t\t\t\t\t\t\t\"val\": 8879121378,\n\t\t\t\t\t\t\t\"accn\": \"0001193125-09-212454\",\n\t\t\t\t\t\t\t\"fy\": 2010,\n\t\t\t\t\t\t\t\"fp\": \"Q1\",\n\t\t\t\t\t\t\t\"form\": \"10-Q\",\n\t\t\t\t\t\t\t\"filed\": \"2009-10-23\",\n\t\t\t\t\t\t\t\"frame\": \"CY2009Q3I\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t...\n\t\t\"us-gaap\": {\n\t\t\t\"AccountsPayableCurrent\": {\n\t\t\t\t\"label\": \"Accounts Payable, Current\",\n\t\t\t\t\"description\": \"Carrying value as of the balance sheet date of liabilities incurred (and for which invoices have typically been received) and payable to vendors for goods and services received that are used in an entity's business. Used to reflect the current portion of the liabilities (due within one year or within the normal operating cycle if longer).\",\n\t\t\t\t\"units\": {\n\t\t\t\t\t\"USD\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"end\": \"2009-06-30\",\n\t\t\t\t\t\t\t\"val\": 3324000000,\n\t\t\t\t\t\t\t\"accn\": \"0001193125-09-212454\",\n\t\t\t\t\t\t\t\"fy\": 2010,\n\t\t\t\t\t\t\t\"fp\": \"Q1\",\n\t\t\t\t\t\t\t\"form\": \"10-Q\",\n\t\t\t\t\t\t\t\"filed\": \"2009-10-23\"\n\t\t\t\t\t\t},\n                      ...\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n          ...\n\t\t}\n\t}\n}\n```\n\nWhen using the provided classes as representation of the data, the outermost dictionary will be represented by the \nSECCompanyInfo class. Filing information about the company are stored inside the SECFilingInfo class,\nwhich represents the dictionary in the facts section. Each of the members of the SECFilingInfo\nlike 'us_gaap' is a list of SECBaseMeasures, which contain e.g. label, description and the units. \nThe units member of the SECBaseMeasure is a list of SECUnits, which represent one data point in time\nto the corresponding SECBaseMeasure. This could be for instance the Goodwill of the company.\n\nSECCompanyInfo provides methods for retrieving the desired information by name in efficient manner.\nIf one wants to get the yearly goodwill information filed by a company one can simply use the SECCompanyInfo retrieved\nas shown below:\n\n```python\nfrom sec_api_utils.data_loading.SECAPILoader import SECAPILoader\nfrom sec_api_utils.data_representation.SECCompanyInfo import SECCompanyInfo\nfrom sec_api_utils.data_representation.SECBaseMeasure import SECBaseMeasure\ndata_loader = SECAPILoader(your_company_name=\"<your_company_name>\", \n                           your_company_email=\"<your>@<company_email>.com\",\n                           override_cached_company_tickers=False)\ndata_msft: SECCompanyInfo = data_loader.get_data_from_ticker(ticker_name=\"MSFT\", as_dict=False)\ngoodwill_filings: SECBaseMeasure = data_msft.get_measure_info(\"Goodwill\")\nyearly_goodwill = goodwill_filings.get_by_form_type(\"10-K\")\n```\n\n## Plotting\n\nFor fast visualization of the datapoints a simple plotting function, which plots the data\nwith the help of matplotlib and seaborn is provided.\n\nContinuing the example from above the goodwill can be plotted with the following call\n\n```python\nfrom sec_api_utils.plotting.SECUnitPlotter import NumberFormat, SECUnitPlotter \nSECUnitPlotter().plot_sec_units_base(yearly_goodwill, auto_number_format=False, number_format=NumberFormat.THOUSANDS, title=\"Goodwill\")\n```\n\nTo the plot_sec_units_base() method the List[SECUnits] is passed, which were retrieved and stored in variable\n'yearly_goodwill'. Parameter 'auto_number_format' declares if the number format should be determined automatically, \nwhich is set to False in this case because we provided a number_format with 'NumberFormat.THOUSANDS'. The passed\nnumber format will show the SECUnits in thousands on the plot. Furthermore, we passed a title\nto the plotting method as well. As a result, we get the following plot:\n\n![Goodwill plot](sample_plots/goodwill_yearly.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sec-api-utils",
    "package_url": "https://pypi.org/project/sec-api-utils/",
    "platform": null,
    "project_url": "https://pypi.org/project/sec-api-utils/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bruprod/sec_api_utils/issues",
      "Homepage": "https://github.com/bruprod/sec_api_utils"
    },
    "release_url": "https://pypi.org/project/sec-api-utils/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A non-official wrapper for the sec-edgar-api, with built-in representation classes.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15739330,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b038f76a3c67b960321f13812d84a4e7db6720e8e8d2600fa92331db25313a95",
          "md5": "004d2f7a736b5f1030d7aeacbc4058eb",
          "sha256": "20880d2ada7a4e9ac304b1fe27f3bfa030b28c4fa6198a7a0b12775b4fc62f99"
        },
        "downloads": -1,
        "filename": "sec_api_utils-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "004d2f7a736b5f1030d7aeacbc4058eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16016,
        "upload_time": "2022-11-11T20:30:58",
        "upload_time_iso_8601": "2022-11-11T20:30:58.865427Z",
        "url": "https://files.pythonhosted.org/packages/b0/38/f76a3c67b960321f13812d84a4e7db6720e8e8d2600fa92331db25313a95/sec_api_utils-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb16ce553991d026d38f843cd5f277ee6e30ef6ed419973dee9c5e7073723aae",
          "md5": "bdd50c448476e3589984ca1e53b09f4e",
          "sha256": "935612a907c4e3d09534c30e787fbdb8942f994dab1c40df2e2e2e931d2ae932"
        },
        "downloads": -1,
        "filename": "sec_api_utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd50c448476e3589984ca1e53b09f4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40547,
        "upload_time": "2022-11-11T20:31:00",
        "upload_time_iso_8601": "2022-11-11T20:31:00.473170Z",
        "url": "https://files.pythonhosted.org/packages/eb/16/ce553991d026d38f843cd5f277ee6e30ef6ed419973dee9c5e7073723aae/sec_api_utils-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b038f76a3c67b960321f13812d84a4e7db6720e8e8d2600fa92331db25313a95",
        "md5": "004d2f7a736b5f1030d7aeacbc4058eb",
        "sha256": "20880d2ada7a4e9ac304b1fe27f3bfa030b28c4fa6198a7a0b12775b4fc62f99"
      },
      "downloads": -1,
      "filename": "sec_api_utils-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "004d2f7a736b5f1030d7aeacbc4058eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16016,
      "upload_time": "2022-11-11T20:30:58",
      "upload_time_iso_8601": "2022-11-11T20:30:58.865427Z",
      "url": "https://files.pythonhosted.org/packages/b0/38/f76a3c67b960321f13812d84a4e7db6720e8e8d2600fa92331db25313a95/sec_api_utils-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb16ce553991d026d38f843cd5f277ee6e30ef6ed419973dee9c5e7073723aae",
        "md5": "bdd50c448476e3589984ca1e53b09f4e",
        "sha256": "935612a907c4e3d09534c30e787fbdb8942f994dab1c40df2e2e2e931d2ae932"
      },
      "downloads": -1,
      "filename": "sec_api_utils-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bdd50c448476e3589984ca1e53b09f4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 40547,
      "upload_time": "2022-11-11T20:31:00",
      "upload_time_iso_8601": "2022-11-11T20:31:00.473170Z",
      "url": "https://files.pythonhosted.org/packages/eb/16/ce553991d026d38f843cd5f277ee6e30ef6ed419973dee9c5e7073723aae/sec_api_utils-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}