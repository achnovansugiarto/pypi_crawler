{
  "info": {
    "author": "Allen Institute for Artificial Intelligence",
    "author_email": "contact@allenai.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# AI2 Tailor\n\nThis is the codebase for the [Tailor](https://api.semanticscholar.org/CorpusID:235898904) library.\n\nThis repository contains code for compositional perturbations as described in the following paper:\n\n> [Tailor: Generating and Perturbing Text with Semantic Controls](https://arxiv.org/abs/2107.07150)  \n> Alexis Ross*, Tongshuang Wu*, Hao Peng, Matthew E. Peters, Matt Gardner\n> Association for Computational Linguistics (ACL), 2022\n\nBibtex for citations:\n\n```bibtex\n@inproceedings{ross-etal-2022-tailor,\n    title = \"Tailor: Generating and Perturbing Text with Semantic Controls\",\n    author = \"Ross, Alexis and\n        Wu, Tongshuang and\n        Peng, Hao and\n        Peters, Matthew E and\n            Gardner, Matt\",\n    booktitle = \"Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics\",\n    month = aug,\n    year = \"2022\",\n    address = \"Online\",\n    publisher = \"Association for Computational Linguistics\",\n}\n```\n\n## Installation\n\nFrom Pypi:\n\n```bash\npip install tailor_nlp\n```\n\nFrom source:\n\n```bash\ngit clone git@github.com:allenai/tailor.git\ncd tailor\npip install -e .\n```\n\n## Using Tailor: walkthrough cases\n\n- See the [tutorial notebook](https://github.com/allenai/tailor/blob/main/examples/Tutorial%2001%20-%20Tailor%20basic%20wrapper.ipynb) for a detailed walkthrough of the API.\n- See the documents in the [main Python file](https://github.com/allenai/tailor/blob/main/examples/Tutorial%2001%20-%20Tailor%20basic%20wrapper.ipynb) for more explanations.\n- See [Tutorial 02](https://github.com/allenai/tailor/blob/main/examples/Tutorial%2002%20-%20Using%20Tailor%20default%20perturb.%20func%20with%20NLI.ipynb) to learn how to use the default perturbation function on NLI data.\n- See [Tutorial 03](https://github.com/allenai/tailor/blob/main/examples/Tutorial%2003%20-%20Defining%20customized%20perturb.%20func%20for%20MATRES.ipynb) to learn how to define a customized perturbation function for MATRES data.\n\n## Basic Perturbation demo\n\n```py\n# initiate a wrapper.\nfrom tailor import Tailor\ntl = Tailor()\n\ntext = \"In the operation room, the doctor comforted the athlete.\"\n\n# perturb the sentence with one line:\n# When running it for the first time, the wrapper will automatically\n# load related models, e.g. the generator and the perplexity filter.\nperturbations = tl.perturb(text)\n\n# return: [\n# 'the athlete was comforted by the doctor .',\n# 'In which case , the doctor comforted the athlete.',]\n```\n\n### More advanced APIs\n\nTo perturb with more controls,\n\n```py\nperturbations = tl.perturb(\n    sentence=text,\n    selected_span = \"In the operation room\",\n    # can filter perturbations by their change type, as printed above.\n    allowed_perturbs=[\"change_content\"],\n    # can reuse the detected strategies\n    candidate_inputs = perturb_strategies,\n    # filter out degeneration with gpt-2 perplexity score. If None, then this step is skiped.\n    perplex_thred=50,\n    # max number of perturbations to return.\n    num_perturbs=10\n)\n\n# return: [\"In case of an injury , the doctor 's comforted the athlete.\",\n# \"In case of a fatal accident , the doctor 's comforted the athlete.\",\n# \"In case of a bruised hand , the doctor 's comforted the athlete.\"]\n```\n\nTo attach additional context,\n\n```py\ntl.perturb_with_context(\n    \"In the operation room, the doctor comforted the athlete.\",\n    \"In the operation room\",\n    to_content=\"bridge\",\n    verbalize=True\n)\n# return: [\"Under the bridge , the doctor 's comforted the athlete.\",\n# \"Under a bridge , the doctor 's comforted the athlete.\"]\n\ntl.perturb_with_context(\n    \"In the operation room, the doctor comforted the athlete.\",\n    \"In the operation room\",\n    to_semantic_role=\"TEMPORAL\",\n    verbalize=True\n)\n\n# return: ['When the doctor came into the operation room , the physician comforted the athlete.',\n# \"While the doctor was in the operation room , the physician 's comforted the athlete.\"]\n\n\ntl.perturb_with_context(\n    \"In the operation room, the doctor comforted the athlete.\",\n    \"comforted\",\n    to_tense=\"future\",\n    verbalize=True\n)\n\n# return: ['In the operation room , the doctor will comfort the athlete.',\n# \"In the operation room , the doctor 's will comfort the athlete.\"]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/allenai/tailor",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tailor-nlp",
    "package_url": "https://pypi.org/project/tailor-nlp/",
    "platform": null,
    "project_url": "https://pypi.org/project/tailor-nlp/",
    "project_urls": {
      "Homepage": "https://github.com/allenai/tailor"
    },
    "release_url": "https://pypi.org/project/tailor-nlp/0.1.0/",
    "requires_dist": [
      "ai2-tango[datasets] (>=0.4.0)",
      "spacy (<=3.1.4)",
      "allennlp-models (==2.9.0)",
      "stanford-openie (==1.0.3)",
      "transformers (<=4.4.2)",
      "datasets (==1.15.1)",
      "munch (==2.5.0)",
      "checklist"
    ],
    "requires_python": ">=3.6.1",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13167495,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc18687fa4c1fa37661107dd6a248253b5281b0eef73732c77e843a6269d4c9d",
          "md5": "fc2b8bb163a4af313f356b9b07b061bb",
          "sha256": "5048d06a2b7071dd66bd2b3503e6cdd5d76948e4cb9b0ea6c6fc1871474c9f72"
        },
        "downloads": -1,
        "filename": "tailor_nlp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc2b8bb163a4af313f356b9b07b061bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 76064,
        "upload_time": "2022-03-14T08:36:47",
        "upload_time_iso_8601": "2022-03-14T08:36:47.275923Z",
        "url": "https://files.pythonhosted.org/packages/fc/18/687fa4c1fa37661107dd6a248253b5281b0eef73732c77e843a6269d4c9d/tailor_nlp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc18687fa4c1fa37661107dd6a248253b5281b0eef73732c77e843a6269d4c9d",
        "md5": "fc2b8bb163a4af313f356b9b07b061bb",
        "sha256": "5048d06a2b7071dd66bd2b3503e6cdd5d76948e4cb9b0ea6c6fc1871474c9f72"
      },
      "downloads": -1,
      "filename": "tailor_nlp-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc2b8bb163a4af313f356b9b07b061bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1",
      "size": 76064,
      "upload_time": "2022-03-14T08:36:47",
      "upload_time_iso_8601": "2022-03-14T08:36:47.275923Z",
      "url": "https://files.pythonhosted.org/packages/fc/18/687fa4c1fa37661107dd6a248253b5281b0eef73732c77e843a6269d4c9d/tailor_nlp-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}