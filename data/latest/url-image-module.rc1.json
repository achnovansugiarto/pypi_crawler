{
  "info": {
    "author": "Urban Risk Lab",
    "author_email": "url_googleai@mit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Urban Risk Lab (URL) Image Analysis Module\n\nThe goal of this module is to utilize effective Convolutional Neural Network (CNN) models to yield efficient and accurate predictions from image data in crowdsourced crisis reports to provide quick categorization that can be used to construct an aggregate summary of the unfolding crisis event. In addition to providing utilities for conducting training and inference and saving those results, it provides subsequent analysis tools for image annotation, model performance, and associated plotting.\n\nThis project is compatible with Python version >= 3.6.\n\n### **Instructions to Install**\n**Using PyPI -- latest version of package on PyPI**\n```\npip install url-image-module\n```\n**Using GitLab Credentials -- using most recent commit**\n1. Get `.env` file by requesting it from url_googleai@mit.edu, use subject headline `[Read Credentials URL Image Module GitLab]` and your plans for using it.\n2. Load variables into the environment:\n`source <path_to_.env>`\n3. run `pip install -e git+https://$GITLAB_TOKEN_USER:$GITLAB_TOKEN@gitlab.com/react76/url-image-module.git@master#egg=url-image-module`\n\n### **How to use in Python**\nAt the moment, all classes, constants, and functions can be imported at the root level of the package, like so:\n```python\nfrom url_image_module import (\n    ...\n)\n```\n\n### **Package Structure & Utilities**\nThis module provides various utilites for conducting reproducible experiments on crowdsourced crisis report images. These utilities include: \n\n##### **Training, Testing, and Prediction with PyTorch Models**\n\n* [training.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/training.py) - Contains utilities for training a model for multiple epochs on train split image data & validating on a dev split of image data at each epoch. Applies online data augmentation as a form of regularization during training.\n\n* [testing.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/testing.py) - Contains utilities for testing a trained model on a set of labeled images & saving those test results.\n\n* [prediction.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/prediction.py) - Contains utilities useful for using a trained model to predict on a folder of images located on the host and creating a dataframe to store prediction metadata (i.e. predicted label, prediction scores)\n\n* [classes.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/classes.py)- Defines classes & helpful functions useful across the package:\n   * Creating image datasets for prediction (see `PredictionImageDataset`)\n   * Instantiating pretrained PyTorch models (pretrained on ImageNet) (see `PretrainedImageCNN`)\n   * Dictionary of possible pretrained single label model architectures (see `PRETRAINED_MODELS_DICT`)\n   * Dictionary of possible optimizer algorithms (see `OPTIMIZER_DICT`)\n   * Helpers for constructing correct architecture of model, loading pretrained weights from a .pt file, and constructing optimizer object with user-specified learning rate & correct weights to update.\n\n* [constants.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/constants.py) - Defines various constants used throughout the package, including:\n   * Constants necessary for transforming images prior to being inputted into the model (for training, this includes constants for data augmentation techniques)\n   * Constants for consistent naming conventions used throughout the package (e.g.  `TRAIN_SPLIT`, `DEV_SPLIT`, `TEST_SPLIT`)\n   * Dictionary containing loss criterions used for training a model (see `CRITERION_DICT`)\n   * The various evaluation metrics used for evaluating the performance of a model (see `EVALUATION_METRICS_FUNC_DICT`)\n\n##### **Operating System, PyTorch, and Pandas Utilities**\n\n* [os_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/os_utils.py) -  Relevant utilities for interacting with the host's operating system, i.e. interacting with the filesystem\n   * Making/deleting directories\n   * Copying files\n   * Extracting filepaths\n   * Updating filepaths\n\n* [pd_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/pd_utils.py) - Utilities for interacting with a pandas dataframe (df) including:\n   * Copying files from one location on host to another using information stored in a df\n   * Subsetting columns in a df to a user-provided relevant subset\n   * Cleaning df of empty or partially-empty rows\n   * Left-joining dfs by filenames\n   * Saving df as CSV on host's filesystem\n\n* [pt_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/pt_utils.py) - Utilities for interacting with PyTorch including:\n   * Naming a file with a proper PyTorch extension (.pt)\n   * Determining the appropriate device (i.e. CPU or GPU) to put tensors on \n\n##### **Data Labeling & Annotation Analysis Utilities**\n\n* [data_labeling_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/data_labeling_utils.py) - Utilities for conducting annotation efforts & performing interannotator agreement analysis -- agnostic to data type (i.e. works for images & text):\n   * Creating CSV for annotating a folder of unlabeled data\n   * Methods for assessing type of agreement on a single data point, i.e. complete agreement, complete disagreement, plurality agreement, etc.\n   * Methods for computing statistics for a labeled dataset including:\n      * Number of unique labels provided for a task\n      * Plurality agreement percentage\n      * Complete agreement percentage\n      * Fleiss' Kappa coefficient\n      * Cohen's Kappa coefficient (weighted/unweighted)\n   * Methods for ground-truthing a dataset i.e. by plurality label\n   * Methods for wrangling a dataframe of labels (i.e. melting), changing column names to be consistent.\n   * Methods for reviewing data labeling, i.e. making directory of all data points which had complete agreement, plurality agreement but not complete agreement, etc.\n   * Methods for reviewing predictions by a model and contrasting it against ground-truth labels.\n   \n##### **Plotting Utilities**\n\n* [plotting_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/plotting_utils.py) - Utilities for producing visualizations for conducting analysis:\n   * Generating Confusion Matrices for Classification for visualizing ground-truth labels vs. model predictions\n   * Plot for visualizing performance of a model on each epoch of training on both train & dev sets, i.e. learning curves\n   * Plot for visualizing model performance on each class of a task\n   * EDA Plot on labeled datasets -- useful for visualizing class imbalance prior to modeling\n   * Plot for Annotation Analysis showing number of images in a dataset which have at least n or more unique annotators who provided a label for the image on that task -- useful for determining a cutoff for interannotator analysis and ground-truthing a dataset\n\n##### **Python Programs -- Data Labeling & Creating ImageFolders**\n\n* [create_image_split_folders.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/create_image_split_folders.py) - Python program which constructs image data folders into train, dev, & test splits using corresponding (CSV, TSV, etc.) which provide filenames and labels for each split and saves these splits to some destination folder on the host.\n\n* [make_image_labeling_csv.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/make_image_labeling_csv.py) - Python program which creates a labeling CSV for various classification tasks using filenames located in a directory on the host.\n\n##### **Miscellaneous Utilities**\n\n* [model_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/model_utils.py) - Utilities for saving & loading trained models weights and other model metadata (i.e. hyperparameters, training settings, classes for the task, etc.) for future use, constructing the correct architecture for a model, and extracting outputs from a model for analysis\n\n* [metric_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/metric_utils.py) - Utilities for computing metric scores (Precision, Recall, F1, etc.) & confusion matrices by comparing ground truth labels against model predictions\n\n* [misc_utils.py](https://gitlab.com/react76/url-image-module/-/blob/master/src/url_image_module/misc_utils.py) - Miscellaneous utilities which are useful across the package (see `prettify_underscore_string`)\n\n ## **For Maintainers**\n\n #### **Updating GitLab Repository**\n To add all modified files, commit those files, push to GitLab repo, and update repo with changes and tag number run:\n```\nsh update.sh -t <tag> -m <commit message>\n```\n\nWhen updating dependencies, make sure to use:\n1. `pipenv install <name-of-package>`\n2. Update requirements.txt:  `pipenv run pip freeze > requirements.txt`\n3. Commit & push with the update command above\n\n#### **Adding New Files to Python Package**\nIf you want add a file which contains new functionality, i.e. merits it own file separate from the existing, you must add it to the `__init__.py` file, like so:\n\nYou can do the following to import specific functions, classes, etc. from the file into the python package. Anything that isn't imported can't be used by the end-user\n##### in `__init__.py` (specific imports):\n```python\nfrom .name_of_new_file import (\n   specific_function_you_want_to_import,\n   specific_class_you_want_to_import,\n   ...\n)\n...\ndel name_of_new_file\n```\n\nIf you want all functionality from the file to be available to the end-user, do the following:\n##### in `__init__.py` (import everything):\n```python\nfrom .name_of_new_file import *\n...\ndel name_of_new_file\n```\n\n#### **Publish Package to PyPI**\n1. Launch virtual environment with `pipenv shell`\n2. Install dependencies with `pipenv install`\n3. Run `python setup.py bdist_wheel sdist`. To test, run:\n   1. Run `pip install -e .`\n   2. Run `python`\n   3. Run `import url_image_module` -- should give no errors if it's working properly\n4. Run `twine upload dist/*`. Note: You will need login credentials for the URL PyPI Account in order to publish to PyPI. \n\n#### **Building & Pushing Docker Images on AWS ECR**\n##### **A. Locally**\nIn order to use this package on AWS infrastructure, we must first build & push docker images. There are two separate Dockerfiles, one for\ntraining and the other for inference. Run\n`./sm-containers/train/make.sh` or\n`./sm-containers/inference/make.sh` respectively to build\nthose docker images & push them to AWS ECR. Running these bash scripts will build the images including installing the url-image-module python library\nas well as upload the built images to ECR where sagemaker can pull them. Make sure to have the correct `.env` file in the root of the url-image-module repo. Running either `make.sh` locally will build the container on your host and then push the image to ECR.\n\n##### **B. Using CodeBuild on AWS SageMaker**\nIf you want to build the image & push it to ECR using CodeBuild there's a notebook that can be run on a SageMaker instance which builds the containers using CodeBuild, find this [here](https://gitlab.com/react76/url-image-module/-/tree/master/sm-containers/make-docker-image.ipynb), i.e. `./sm-containers/make-docker-image.ipynb`. If a SageMaker instance does not exist for buliding images, make a new one which has a volume of at least 40Gb, then once inside the instance, select the GitHub icon in the top right corner of the file menu on the left. It will prompt you to provide the HTTPS link to the repo you want to add. You can find this link [here](https://gitlab.com/react76/url-image-module) under the 'Clone' button. Once you provide the link, it will prompt you to provide credentials, you can find this [here](https://gitlab.com/react76/url-image-module/) under `Settings > Repository > Deploy Tokens`, it should be the only one with username `gitlab+deploy-token-1070133`.\n\nNote in either case you will need a `.env` file with the deploy token credientials in the root of the url-image-module repo when building the containers. Please contact url_googleai@mit.edu to get this `.env` file.\n\n#### **Notes**\nInstalling torch & torchvision with pipenv is a bit of a hassle. This GitHub [post](https://github.com/pypa/pipenv/issues/4961#issuecomment-1045679643) was helpful in figuring it out. To install torch & torchvision with pipenv that have both CPU & GPU capabilities, these need to be run:\n1. `pipenv install --extra-index-url https://download.pytorch.org/whl/cu113/ \"torch==1.9.0\"`\n2. `pipenv install --extra-index-url https://download.pytorch.org/whl/cu113/ \"torchvision==0.10.0\"`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/react76/url-image-module",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "url-image-module",
    "package_url": "https://pypi.org/project/url-image-module/",
    "platform": null,
    "project_url": "https://pypi.org/project/url-image-module/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/react76/url-image-module/-/issues",
      "Homepage": "https://gitlab.com/react76/url-image-module"
    },
    "release_url": "https://pypi.org/project/url-image-module/0.27.0/",
    "requires_dist": [
      "bleach (==4.1.0)",
      "certifi (==2022.5.18.1)",
      "charset-normalizer (==2.0.12)",
      "colorama (==0.4.4)",
      "cycler (==0.11.0)",
      "dataclasses (==0.6)",
      "docutils (==0.18.1)",
      "efficientnet-pytorch (==0.7.1)",
      "idna (==3.3)",
      "importlib-metadata (==4.8.3)",
      "importlib-resources (==5.4.0)",
      "joblib (==1.1.0)",
      "keyring (==23.4.1)",
      "kiwisolver (==1.3.1)",
      "matplotlib (==3.3.4)",
      "numpy (==1.19.5)",
      "packaging (==21.3)",
      "pandas (==1.1.5)",
      "patsy (==0.5.2)",
      "Pillow (==8.4.0)",
      "pkginfo (==1.8.3)",
      "Pygments (==2.12.0)",
      "pyparsing (==3.0.7)",
      "python-dateutil (==2.8.2)",
      "pytz (==2022.1)",
      "readme-renderer (==34.0)",
      "requests (==2.27.1)",
      "requests-toolbelt (==0.9.1)",
      "rfc3986 (==1.5.0)",
      "scikit-learn (==0.24.2)",
      "scipy (==1.5.4)",
      "seaborn (==0.11.2)",
      "six (==1.16.0)",
      "statsmodels (==0.12.2)",
      "threadpoolctl (==3.1.0)",
      "torch (==1.9.0)",
      "torchvision (==0.10.0)",
      "tqdm (==4.64.0)",
      "twine (==3.8.0)",
      "typing-extensions (==4.1.1)",
      "urllib3 (==1.26.9)",
      "webencodings (==0.5.1)",
      "zipp (==3.6.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Image Module of REACT",
    "version": "0.27.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14086926,
  "releases": {
    "0.27.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c54230ea48255a5a7632e29917dab6b2d77a5e1d8448556fb0d0b5dd49aae272",
          "md5": "eb801552765d75d58afb0ed44d0063f2",
          "sha256": "6ee19c09dda03c9c3b026113f4592ed1a8e563eee1bf430ce4db356b176ed51e"
        },
        "downloads": -1,
        "filename": "url_image_module-0.27.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb801552765d75d58afb0ed44d0063f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59795,
        "upload_time": "2022-06-09T20:33:47",
        "upload_time_iso_8601": "2022-06-09T20:33:47.819445Z",
        "url": "https://files.pythonhosted.org/packages/c5/42/30ea48255a5a7632e29917dab6b2d77a5e1d8448556fb0d0b5dd49aae272/url_image_module-0.27.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90373be11b8e0e40948aa722e20c7d2e7f2f68a2149f0a004b3f8d6e5168cfef",
          "md5": "f78f0c42bead353bbe0b9a1053faaf9e",
          "sha256": "0aaa8b21f90a1aba16f6054bf0f7cf4b4c238f2386eb594c6329d1582632f5f1"
        },
        "downloads": -1,
        "filename": "url_image_module-0.27.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f78f0c42bead353bbe0b9a1053faaf9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 73367,
        "upload_time": "2022-06-09T20:33:51",
        "upload_time_iso_8601": "2022-06-09T20:33:51.212721Z",
        "url": "https://files.pythonhosted.org/packages/90/37/3be11b8e0e40948aa722e20c7d2e7f2f68a2149f0a004b3f8d6e5168cfef/url_image_module-0.27.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c54230ea48255a5a7632e29917dab6b2d77a5e1d8448556fb0d0b5dd49aae272",
        "md5": "eb801552765d75d58afb0ed44d0063f2",
        "sha256": "6ee19c09dda03c9c3b026113f4592ed1a8e563eee1bf430ce4db356b176ed51e"
      },
      "downloads": -1,
      "filename": "url_image_module-0.27.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb801552765d75d58afb0ed44d0063f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 59795,
      "upload_time": "2022-06-09T20:33:47",
      "upload_time_iso_8601": "2022-06-09T20:33:47.819445Z",
      "url": "https://files.pythonhosted.org/packages/c5/42/30ea48255a5a7632e29917dab6b2d77a5e1d8448556fb0d0b5dd49aae272/url_image_module-0.27.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90373be11b8e0e40948aa722e20c7d2e7f2f68a2149f0a004b3f8d6e5168cfef",
        "md5": "f78f0c42bead353bbe0b9a1053faaf9e",
        "sha256": "0aaa8b21f90a1aba16f6054bf0f7cf4b4c238f2386eb594c6329d1582632f5f1"
      },
      "downloads": -1,
      "filename": "url_image_module-0.27.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f78f0c42bead353bbe0b9a1053faaf9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 73367,
      "upload_time": "2022-06-09T20:33:51",
      "upload_time_iso_8601": "2022-06-09T20:33:51.212721Z",
      "url": "https://files.pythonhosted.org/packages/90/37/3be11b8e0e40948aa722e20c7d2e7f2f68a2149f0a004b3f8d6e5168cfef/url_image_module-0.27.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}