{
  "info": {
    "author": "Ibragim Abubakarov",
    "author_email": "ibragim.ai95@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Imagerie\n========\n> Lightweight python package grouping together useful computer vision functions and operations\n\nThis package was initially created for myself to extract some of the most useful important functions,  \nfrom packages like `scipy`, `skimage`, etc...  \n\nThis was done in order to expose all these very useful computer vision functions,  \nand be able to use them in a **Serverless** environment.\n\nDocumentation\n-------------\n\nPrerequisites\n-------------\nThis package only supports `python3` today.\n\nOnly tested on `python3.6` and `python3.7`\n\nInstallation\n------------\nInstall using pip `pip install imagerie`.\n\nFunctions\n---------\n\n##### [`imagerie.get_rotation(pt1, pt2)`](#)\nReturns the rotation value in degrees between 2 (x,y) points.\n\n##### [`imagerie.order_points(points)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L20)\nYou've guessed it, this function simply sorts a list of 4 [x, y] coordinates in a clockwise manner, starting from the top-left.\n\n##### [`imagerie.remove_lonely_small_objects(grayscale)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L235)\nThis function removes small white objects from a binary mask.  \n\n##### [`imagerie.remove_smaller_objects(grayscale)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L247)\nFinds all contours and removes them all except the biggest one.\n\n##### [`imagerie.biggest_contour(grayscale)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L39)\nFinds and retrieves the biggest contour from a grayscale image.\n\n##### [`imagerie.get_biggest_contour(contours)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L47)\nSimply retrieves and returns the biggest contour from a given list of contours.\n\n##### [`imagerie.closest_point(point: tuple, points)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L62)\nReturns the closest (x, y) point from a given list of (x, y) points/coordinates.\n\n##### [`imagerie_lite.midpoint(ptA, ptB)`](#)\nCalculates the X,Y middle points from provided 2 points.\n\n##### [`imagerie_lite.line_intersection(line1: tuple, line2: tuple)`](#)\nReturns the intersection point between two lines.\n\n##### [`imagerie.get_corners(grayscale, middle_points=False, centroid=False, max_corners=4, quality_level=0.01, min_distance=15)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L79)\nReturns the (x, y) coordinates of the 4 corners of a rectangular shaped object from binary mask by default.\nHowever, you can also calculate the top and bottom middle coordinates by providing `middle_points=True`.\nAnd by providint `centroid=True`, you can get the (x, y) coordinates of the center.\n\n##### [`imagerie.warp_perspective(image, src_pts: list, dst_pts: list)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L134)\nPerforms a `cv2.warpPerspective()` operation and expects 2 lists of (x, y) corner points of the source \nand destination image.  \n\n##### [`imagerie.warp_homography(image, src_pts: list, dst_pts: list, method=cv2.RANSAC, reproj_threshold=5.0)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L149)\nPerforms a `cv2.warpPerspective()` operation after `cv2.findHomography()`.\n\n##### [`imagerie.image_composite_with_mask(to_add: PIL.Image.Image, destination: PIL.Image.Image, mask: PIL.Image.Image)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L164)\nCombines the `to_add` and `destination` images, `to_add` image will be added on top of `destination` image\nand only the white area from the `mask` image will be retained from `to_add` image.\n\n##### [`imagerie.combine_two_images_with_mask(background_img, foreground_img, mask)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L174)\nCombines the images with the help of the provided mask.\nNote that only the white area of the mask will be selected from the `foreground_img`.\n\n##### [`imagerie.prepare_for_prediction_single(img, shape=(768, 768), as_array=True)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L208)\nLoads and resizes a single image to a given shape (default: 768, 768) and returns it by default as a numpy array.\n\n##### [`imagerie.prepare_for_prediction(imgs, shape=(768, 768))`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L222)\nDoes the same thing as `imagerie.prepare_for_prediction_single` but for multiple images.\n\n##### [`imagerie.fill_holes(gray_img: ndarray, min=200, max=255)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/imagerie.py#L261)\nFills black pixel holes that reside inside of a binary object.  \n\n> `min` represents the `thresh` used in `cv2.threshold(gray, thresh=200, ...)`.  \n>\n> `max` represents the `maxval` used in `cv2.threshold(gray, maxval=255, ...)`.\n\n##### [`imagerie.img_as_uint(img)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/operations/img.py#L226)\nConverts image to 16 bit unsigned integer format.\n\n##### [`imagerie.img_as_float(img)`](https://github.com/ibragim64/imagerie/blob/ec9087742d165ecf116856574988874b39274325/imagerie/operations/img.py#L233)\nConvert an image to floating point format.\n\n##### [`imagerie.normalize_binary_img(img: np.ndarray)`](https://github.com/ibragim64/imagerie/blob/97b21586a8928a75870d71ac25a43f85e83489f8/imagerie/imagerie.py#L343)\nVery useful when re-converting a predicted binary mask img to original grayscale format.\n\nCredits\n-------\n - [Ibragim Abubakarov](https://www.ibragim.fr) <[ibragim.ai95@gmail.com](mailto:ibragim.ai95@gmail.com)>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ibragim64/imagerie/tree/lite",
    "keywords": "",
    "license": "",
    "maintainer": "Ibragim Abubakarov",
    "maintainer_email": "ibragim.ai95@gmail.com",
    "name": "imagerie",
    "package_url": "https://pypi.org/project/imagerie/",
    "platform": "",
    "project_url": "https://pypi.org/project/imagerie/",
    "project_urls": {
      "Homepage": "https://github.com/ibragim64/imagerie/tree/lite"
    },
    "release_url": "https://pypi.org/project/imagerie/0.0.11/",
    "requires_dist": [
      "opencv-python",
      "pillow",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Python package grouping together common useful functions and operations.",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8484695,
  "releases": {
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed065a2993721ddd7d02a45ba414636355e88a6be1ef7158867257fa014bac3c",
          "md5": "ac77b1992d36ccc1441874bd743a25b0",
          "sha256": "eb7218c114ae57d29c562a26ccf56af378f27814d5029d4844ee7c82d6db9ef1"
        },
        "downloads": -1,
        "filename": "imagerie-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac77b1992d36ccc1441874bd743a25b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 48472,
        "upload_time": "2020-10-23T10:32:10",
        "upload_time_iso_8601": "2020-10-23T10:32:10.066766Z",
        "url": "https://files.pythonhosted.org/packages/ed/06/5a2993721ddd7d02a45ba414636355e88a6be1ef7158867257fa014bac3c/imagerie-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed065a2993721ddd7d02a45ba414636355e88a6be1ef7158867257fa014bac3c",
        "md5": "ac77b1992d36ccc1441874bd743a25b0",
        "sha256": "eb7218c114ae57d29c562a26ccf56af378f27814d5029d4844ee7c82d6db9ef1"
      },
      "downloads": -1,
      "filename": "imagerie-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac77b1992d36ccc1441874bd743a25b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 48472,
      "upload_time": "2020-10-23T10:32:10",
      "upload_time_iso_8601": "2020-10-23T10:32:10.066766Z",
      "url": "https://files.pythonhosted.org/packages/ed/06/5a2993721ddd7d02a45ba414636355e88a6be1ef7158867257fa014bac3c/imagerie-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}