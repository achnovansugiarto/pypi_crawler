{
  "info": {
    "author": "Chaitanya Chinni",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Spellwise\n\nüöÄ Extremely fast spelling checker and suggester in Python!\n\n<a href=\"https://pypi.org/project/spellwise/\"><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/spellwise\"></a>\n[![PyPI version](https://badge.fury.io/py/spellwise.svg)](https://badge.fury.io/py/spellwise)\n<a href=\"https://pepy.tech/project/spellwise\"><img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/spellwise\"></a>\n<a href=\"https://pypi.org/project/spellwise/#files\"><img alt=\"PyPI - Wheel\" src=\"https://img.shields.io/pypi/wheel/spellwise\"></a>\n[![License: MIT](https://img.shields.io/pypi/l/spellwise)](https://github.com/chinnichaitanya/spellwise/blob/master/LICENSE)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n\nThe following algorithms are supported currently,\n\n- Edit-distance, [Hall and Dowling (1980)](https://dl.acm.org/doi/10.1145/356827.356830) (based on [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) algorithm)\n- Editex, [Zobel and Dart (1996)](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.2138&rep=rep1&type=pdf) (for suggesting phonetically similar words)\n- Soundex (https://nlp.stanford.edu/IR-book/html/htmledition/phonetic-correction-1.html) (for identifying phonetically similar words)\n- Caverphone 1.0 and Caverphone 2.0, [David Hood (2002)](https://caversham.otago.ac.nz/files/working/ctp060902.pdf) (to identify English names which sound phonetically similar)\n- QWERTY Keyboard layout Typographic based correction algorithm (Typox), inspired by [Ahmad, Indrayana, Wibisono, and Ijtihadie (2017)](https://ieeexplore.ieee.org/document/8257147). This implementation might not be the exact one specified in the paper since it is not available to read for free\n\nAll the above algorithms use an underlying [Trie](https://en.wikipedia.org/wiki/Trie) based dictionary for efficient storage and fast computation! Implementations of all the algorithms are inspired by the amazing article [Fast and Easy Levenshtein distance using a Trie, by Steve Hanov](http://stevehanov.ca/blog/?id=114).\n\n## üì¶ Installation\n\nThe easiest way to install `spellwise` is through `pip`.\n\n```shell\npip install spellwise\n\n```\n\n## üßë‚Äçüíª Usage\n\nCurrently, there are five algorithms available for use with the following classnames,\n\n- `Levenshtein`\n- `Editex`\n- `Soundex`\n- `CaverphoneOne`\n- `CaverphoneTwo`\n- `Typox`\n\nPlease check the [`examples/`](https://github.com/chinnichaitanya/python-spell-checker/tree/master/examples) folder for specific usage of each algorithm. But in a general sense, each algorithm has three parts,\n\n- Initialization (initialize the class object for the algorithm to use)\n- Index correct words/names (add correct words or names to the dictionary)\n- Fetch suggestions (inference)\n\n```python\nfrom spellwise import (CaverphoneOne, CaverphoneTwo, Editex, Levenshtein,\n                       Soundex, Typox)\n\n# (1) Initialize the desired algorithm\nalgorithm = Editex() # this can be CaverphoneOne, CaverphoneTwo, Levenshtein or Typox as well\n\n# (2) Index the words/names to the algorithm\n# Indexing can be done by adding words from a file\nalgorithm.add_from_path(\"<path-to-the-dictionary-file>\")\n# or by adding them manually\nalgorithm.add_words([\"spell\", \"spelling\", \"check\"])\n\n# (3) Fetch the suggestions for the word\nsuggestions = algorithm.get_suggestions(\"spellin\")\n# The `suggestions` is a list of dict with fields `word` and `distance`\n# [{\"word\": ..., \"distance\": ...}, ...]\nprint(suggestions)\n\n# Output would be similar to the following,\n# [{'word': 'spelling', 'distance': 2}]\n\n```\n\nThe default maximum distance considered varies for different algorithms. It can be changed while fetching the suggestions,\n\n```python\n# Fetch suggestions with maximum distance 4\nsuggestions = algorithm.get_suggestions(\"spellin\", max_distance=4)\n# Print the suggestions\nprint(suggestions)\n\n# Output would be similar to the following,\n# [{'word': 'spelling', 'distance': 2}, {'word': 'spell', 'distance': 4}]\n\n```\n\n## üí° Analysis of each algorithm\n\nThere are many algorithms currently available in the package, each suitable for different purposes.\nWe will discuss each algorithm in specific in the following sections.\n\n### (1) Levenshtein\n\nThe `Levenshtein` algorithm is the baseline and most popular method to identify the closest correct words given the misspelt word, based on the edit-distance (number of insertions, deletions and replacements) between the given word and the correctly spelt word.\n\n```python\nfrom spellwise import Levenshtein\n\n# Initialise the algorithm\nlevenshtein = Levenshtein()\n# Index the words from a dictionary\nlevenshtein.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = levenshtein.get_suggestions(\"run\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nLevenshtein provides the following,\n\n```shell\nWord \t Distance\n=================\nrun \t 0\nbun \t 1\ndun \t 1\nfun \t 1\ngun \t 1\nhun \t 1\njun \t 1\njun \t 1\nmun \t 1\nnun \t 1\n\n```\n\n### (2) Editex\n\nThe `Editex` algorithm provides suggestions of words which are phonetically closed to the given word. It also uses the edit-distance but has a different replacement or deletion costs depending on whether the two letters belong to the same phonetic group or not.\n\n```python\nfrom spellwise import Editex\n\n# Initialise the algorithm\neditex = Editex()\n# Index the words from a dictionary\neditex.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = editex.get_suggestions(\"run\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nEditex suggests the following,\n\n```shell\nWord \t Distance\n=================\nrun \t 0\nran \t 1\nron \t 1\nruin \t 1\nrum \t 1\nbun \t 2\ndun \t 2\ndunn \t 2\nfun \t 2\ngun \t 2\n\n```\n\nNotice that the `Levenshtein` algorithm computes the distance between `run` and `bun` as 1 (since there is only one replacement necessary). On the other hand, `Editex` algorithm computes this distance as 2 since phonetically, the words are farther apart.\n\nAs mentioned above, the Editex algorithm uses different costs for replacement and deletion. These values can be modified for fetching different results.\n\n```python\nfrom spellwise import Editex\n\n# Initialise the algorithm\neditex = Editex(group_cost=0.5, non_group_cost=3) # configure the group cost and non-group cost\n# Index the words from a dictionary\neditex.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = editex.get_suggestions(\"run\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nConfiguring `group_cost=0.5` and `non_group_cost=3` in the above example results in the following suggestions,\n\n```shell\nWord \t Distance\n=================\nrun \t 0\nran \t 0.5\nron \t 0.5\nruin \t 0.5\nrum \t 0.5\nlan \t 1.0\nlen \t 1.0\nlin \t 1.0\nlon \t 1.0\nloon \t 1.0\n\n```\n\n### (3) Soundex\n\nThe Soundex algorithm, similar to Editex aims to provide phonetically similar words for the give word. It is one of the initial phonetic matching algorithms and many variations exists.\n\n```python\nfrom spellwise import Soundex\n\n# Initialise the algorithm\nsoundex = Soundex()\n# Index the words from a dictionary\nsoundex.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = soundex.get_suggestions(\"run\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nSoundex suggests the following,\n\n```shell\nWord \t Distance\n=================\nrain \t 0\nrainy \t 0\nram \t 0\nram \t 0\nrama \t 0\nramie \t 0\nran \t 0\nranee \t 0\nrayon \t 0\nream \t 0\n\n```\n\n### (4) Caverphone 1.0 and Caverphone 2.0\n\nThe Caverphone algorithm was developed as a part of the Caversham project to phonetically identify the names of different instances of the same person from various sources. In other words, it is used for phonetically identifying duplicate entries of an entity or a word. The difference between the v1 and v2 of the algorithm is in the pre-processing of words during indexing.\n\n```python\nfrom spellwise import CaverphoneTwo # or CaverphoneOne\n\n# Initialise the algorithm\ncaverphone = CaverphoneTwo()\n# Index the words from a dictionary\ncaverphone.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = caverphone.get_suggestions(\"run\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nCaverphone v2 provides the following suggestions,\n\n```shell\nWord \t Distance\n=================\nrain \t 0\nran \t 0\nrein \t 0\nrene \t 0\nroan \t 0\nron \t 0\nruin \t 0\nrun \t 0\nrune \t 0\nwren \t 0\n\n```\n\n### (5) Typox\n\nThe `Typox` is a Typographic based correction algorithm optimised for correcting typos in QWERTY keyboard. This is similar to the `Editex` algorithm, except that the letters are grouped based on their locations on the keyboard, instead of grouping them phonetically. The original paper is not available to read for free, and hence this might not be its exact implementation.\n\n```python\nfrom spellwise import Typox\n\n# Initialise the algorithm\ntypox = Typox()\n# Index the words from a dictionary\ntypox.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = typox.get_suggestions(\"ohomr\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nTypox provides the following words,\n\n```shell\nWord \t Distance\n=================\nhome \t 2\nphone \t 2\n```\n\nNotice that `Typox` did not suggest words like `choke`, `come`, `chore`, `chose` etc., (which `Levenshtein` would suggest) even though they are of edit-distance 2 with the word `ohome`. But it rather suggests closest words based on the QWERTY keyboard layout which are `phone` and `home`.\n\nAs mentioned above, the Typox algorithm is similar to Editex and uses different costs for replacement and deletion. These values can be modified for fetching different results.\n\n```python\nfrom spellwise import Typox\n\n# Initialise the algorithm\ntypox = Typox(group_cost=0.5, non_group_cost=3) # configure the group cost and non-group cost\n# Index the words from a dictionary\ntypox.add_from_path(\"examples/data/american-english\")\n\n# Fetch suggestions\nsuggestions = typox.get_suggestions(\"ohomr\")\n# Print the top 10 suggestions\nprint(\"Word \\t Distance\")\nprint(\"=================\")\nfor suggestion in suggestions[0:10]:\n    print(\"{} \\t {}\".format(suggestion.get(\"word\"), suggestion.get(\"distance\")))\n\n```\n\nTypox provides the following suggestion for the word `ohomr` after setting the `group_cost=0.5` and `non_group_cost=3`.\n\n```shell\nWord \t Distance\n=================\nphone \t 1.5\nphoned \t 2.0\nphones \t 2.0\n\n```\n\n## ‚ö°Ô∏è Memory and Time profiling\n\nThe following are the usage statistics on a MacBook Pro, 2.4 GHz Quad-Core Intel Core i5 with 16 GB RAM.\n\n<table>\n    <tr>\n        <th>Algorithm</th>\n        <th>No. of words</th>\n        <th>Corpus size on disk</th>\n        <th>Memory used</th>\n        <th>Time to index</th>\n        <th>Time to inference</th>\n        <th>Remarks</th>\n    </tr>\n    <tr>\n        <td>Levenshtein</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 127 MB</td>\n        <td>~ 1160 milliseconds</td>\n        <td>~ 36 milliseconds</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n                <li>With max distance 2</li>\n            </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>Editex</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 127 MB</td>\n        <td>~ 1200 milliseconds</td>\n        <td>~ 90 milliseconds</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n                <li>With max distance 2</li>\n            </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>Soundex</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 16 MB</td>\n        <td>~ 1130 milliseconds</td>\n        <td>~ 0.18 milliseconds (yes right!)</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n            </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>Caverphone 1.0</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 36.7 MB</td>\n        <td>~ 1700 milliseconds</td>\n        <td>~ 0.2 milliseconds (yes right!)</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n            </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>Caverphone 2.0</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 99 MB</td>\n        <td>~ 2400 milliseconds</td>\n        <td>~ 0.4 milliseconds (yes right!)</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n            </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>Typox</td>\n        <td>119,095</td>\n        <td>1.1 MB</td>\n        <td>~ 127 MB</td>\n        <td>~ 1360 milliseconds</td>\n        <td>~ 200 milliseconds</td>\n        <td>\n            <ul>\n                <li>For word \"hallo\"</li>\n                <li>With max distance 2</li>\n            </ul>\n        </td>\n    </tr>\n</table>\n\n## üôå Contributing\n\nPlease feel free to raise PRs! üòÉ\n\nThere are so many algorithms to be added and improvements to be made to this package.\nThis package is still in an early version and would love to have your contributions!\n\n## üìù References\n\n- https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.2138&rep=rep1&type=pdf\n- https://scholar.harvard.edu/jfeigenbaum/software/editex\n- https://github.com/J535D165/FEBRL-fork-v0.4.2/blob/master/stringcmp.py\n- https://caversham.otago.ac.nz/files/working/ctp060902.pdf\n- https://en.wikipedia.org/wiki/Caverphone\n- https://ieeexplore.ieee.org/document/8257147\n- https://www.semanticscholar.org/paper/Edit-distance-weighting-modification-using-phonetic-Ahmad-Indrayana/0d74db8a20f7b46b98c2c77750b9b973a3e4a7b2\n- https://nlp.stanford.edu/IR-book/html/htmledition/phonetic-correction-1.html\n- http://stevehanov.ca/blog/?id=114\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chinnichaitanya/spellwise",
    "keywords": "natural language processing,nlp,spelling correction,edit-distance,levenshtein distance,editex,caverphone,typox",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spellwise",
    "package_url": "https://pypi.org/project/spellwise/",
    "platform": "",
    "project_url": "https://pypi.org/project/spellwise/",
    "project_urls": {
      "Homepage": "https://github.com/chinnichaitanya/spellwise"
    },
    "release_url": "https://pypi.org/project/spellwise/0.8.1/",
    "requires_dist": [
      "typing ; python_version < \"3.5\""
    ],
    "requires_python": ">=3",
    "summary": "üöÄ Extremely fast spelling checker and suggester in Python!",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10001106,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2feb1eea3eedda998a5917ce8028bbcb9b14e99e2a447f15e0dc36640c713f06",
          "md5": "8e31712edc3e544565a1d1878766356b",
          "sha256": "832fcc4d986c18fa6b81592a159984a87e6fe0fca20f832a7d834e5573124260"
        },
        "downloads": -1,
        "filename": "spellwise-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e31712edc3e544565a1d1878766356b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 10331,
        "upload_time": "2020-12-30T17:44:48",
        "upload_time_iso_8601": "2020-12-30T17:44:48.150579Z",
        "url": "https://files.pythonhosted.org/packages/2f/eb/1eea3eedda998a5917ce8028bbcb9b14e99e2a447f15e0dc36640c713f06/spellwise-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "526c30f40b56e863064144917f526a0242f9d1882a90d6e5405c9a4eeec615ca",
          "md5": "7f4bec406dab13920dc5aa83cab98664",
          "sha256": "abde2b3fd835bb860a75fd785e69565e39e167949ea39a7d8da0695a93f1ba1e"
        },
        "downloads": -1,
        "filename": "spellwise-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f4bec406dab13920dc5aa83cab98664",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 11085,
        "upload_time": "2020-12-30T18:25:56",
        "upload_time_iso_8601": "2020-12-30T18:25:56.231994Z",
        "url": "https://files.pythonhosted.org/packages/52/6c/30f40b56e863064144917f526a0242f9d1882a90d6e5405c9a4eeec615ca/spellwise-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dee16e27ef4f5ede32328e182f58d19e17b2e98787033f596315d079245c624",
          "md5": "6bc37901399b3c0d65c4201e66b6533c",
          "sha256": "a7fb803503fdba93a23f01c77daa75c07864a84ad7fe6b50cd11a23f64185965"
        },
        "downloads": -1,
        "filename": "spellwise-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bc37901399b3c0d65c4201e66b6533c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 18780,
        "upload_time": "2021-02-07T11:48:01",
        "upload_time_iso_8601": "2021-02-07T11:48:01.378280Z",
        "url": "https://files.pythonhosted.org/packages/4d/ee/16e27ef4f5ede32328e182f58d19e17b2e98787033f596315d079245c624/spellwise-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "772895a2d96982ab2fea8d1765360f061aefa4654cb16340ea8bb61aa6f1224e",
          "md5": "bef8b2ff7caecb0858be40bf5b1266ac",
          "sha256": "ead024982934ab951b5e308c688019d76820d087e07bd4fc60921b97576bb5bb"
        },
        "downloads": -1,
        "filename": "spellwise-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bef8b2ff7caecb0858be40bf5b1266ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 11148,
        "upload_time": "2021-02-07T11:48:06",
        "upload_time_iso_8601": "2021-02-07T11:48:06.786670Z",
        "url": "https://files.pythonhosted.org/packages/77/28/95a2d96982ab2fea8d1765360f061aefa4654cb16340ea8bb61aa6f1224e/spellwise-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f26a7a6989a6031ea8027a807877642d066f1f480b6331348ef37f465b54c35c",
          "md5": "6b83e0add6056ba61d3ec6185ef651c4",
          "sha256": "56f5f8e684d0ecb3831f8e6d76081c14e4f7055ef54c3f24a109857cc24968ff"
        },
        "downloads": -1,
        "filename": "spellwise-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b83e0add6056ba61d3ec6185ef651c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20766,
        "upload_time": "2021-02-07T15:29:38",
        "upload_time_iso_8601": "2021-02-07T15:29:38.082699Z",
        "url": "https://files.pythonhosted.org/packages/f2/6a/7a6989a6031ea8027a807877642d066f1f480b6331348ef37f465b54c35c/spellwise-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f5837343ccc624bce7f13c63fe0031b3e68cdcfee5f6a455925870cd84d388b",
          "md5": "cc76aaa82abca86fb4301f8898269e36",
          "sha256": "4b9d3d030ef8c86dbec4dc9bbb24c29e2663dddce04ee678aeb1d5c31646ca48"
        },
        "downloads": -1,
        "filename": "spellwise-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc76aaa82abca86fb4301f8898269e36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 11869,
        "upload_time": "2021-02-07T15:29:41",
        "upload_time_iso_8601": "2021-02-07T15:29:41.415451Z",
        "url": "https://files.pythonhosted.org/packages/6f/58/37343ccc624bce7f13c63fe0031b3e68cdcfee5f6a455925870cd84d388b/spellwise-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "732fd7c80a47b1e8bd3d7c37ce882439f3341b10197d2e9780b35d6e4f3843b4",
          "md5": "6894a49f1d16bf8ba86ff17c6c4dfd84",
          "sha256": "74f23be1a0b4f946aaec133f50b2e4a856965bfa581b0663e60cc1964b04cceb"
        },
        "downloads": -1,
        "filename": "spellwise-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6894a49f1d16bf8ba86ff17c6c4dfd84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20863,
        "upload_time": "2021-04-07T20:12:44",
        "upload_time_iso_8601": "2021-04-07T20:12:44.811755Z",
        "url": "https://files.pythonhosted.org/packages/73/2f/d7c80a47b1e8bd3d7c37ce882439f3341b10197d2e9780b35d6e4f3843b4/spellwise-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c72e5c236007cf08094ab5a8382a63fcf142f976a9e446b38163372630a3519e",
          "md5": "e16d2108d6f839cdc719734ad646807b",
          "sha256": "a0548b5c0dd0b0fbd85eb455fbb0424741c452e930041a55d2e25e72d468aa67"
        },
        "downloads": -1,
        "filename": "spellwise-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e16d2108d6f839cdc719734ad646807b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 11890,
        "upload_time": "2021-04-07T20:12:46",
        "upload_time_iso_8601": "2021-04-07T20:12:46.269301Z",
        "url": "https://files.pythonhosted.org/packages/c7/2e/5c236007cf08094ab5a8382a63fcf142f976a9e446b38163372630a3519e/spellwise-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "733b16fefba6869ed42dcd4ba87ae822f117f0a2903823f3914f130d2b69ed65",
          "md5": "19d5c0331e32bc01eb051c5fa3e3c6d3",
          "sha256": "7ca1d29e996cedb3e9103118f4894bdd26487a3785948789784416c9e3a62117"
        },
        "downloads": -1,
        "filename": "spellwise-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19d5c0331e32bc01eb051c5fa3e3c6d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20838,
        "upload_time": "2021-04-07T20:26:05",
        "upload_time_iso_8601": "2021-04-07T20:26:05.491432Z",
        "url": "https://files.pythonhosted.org/packages/73/3b/16fefba6869ed42dcd4ba87ae822f117f0a2903823f3914f130d2b69ed65/spellwise-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6930f6a485ee4606f5f5f787bb9d7107d43f9baf3d920480afe063dea14ff0d4",
          "md5": "b5bdc5a23861177aa30b03a2455f3924",
          "sha256": "b3dc5cf55fb3e7971c27038a530ea950cf83e209e3d3f55ffb392e254fbbfa51"
        },
        "downloads": -1,
        "filename": "spellwise-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5bdc5a23861177aa30b03a2455f3924",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 11878,
        "upload_time": "2021-04-07T20:26:06",
        "upload_time_iso_8601": "2021-04-07T20:26:06.961014Z",
        "url": "https://files.pythonhosted.org/packages/69/30/f6a485ee4606f5f5f787bb9d7107d43f9baf3d920480afe063dea14ff0d4/spellwise-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "733b16fefba6869ed42dcd4ba87ae822f117f0a2903823f3914f130d2b69ed65",
        "md5": "19d5c0331e32bc01eb051c5fa3e3c6d3",
        "sha256": "7ca1d29e996cedb3e9103118f4894bdd26487a3785948789784416c9e3a62117"
      },
      "downloads": -1,
      "filename": "spellwise-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19d5c0331e32bc01eb051c5fa3e3c6d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 20838,
      "upload_time": "2021-04-07T20:26:05",
      "upload_time_iso_8601": "2021-04-07T20:26:05.491432Z",
      "url": "https://files.pythonhosted.org/packages/73/3b/16fefba6869ed42dcd4ba87ae822f117f0a2903823f3914f130d2b69ed65/spellwise-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6930f6a485ee4606f5f5f787bb9d7107d43f9baf3d920480afe063dea14ff0d4",
        "md5": "b5bdc5a23861177aa30b03a2455f3924",
        "sha256": "b3dc5cf55fb3e7971c27038a530ea950cf83e209e3d3f55ffb392e254fbbfa51"
      },
      "downloads": -1,
      "filename": "spellwise-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b5bdc5a23861177aa30b03a2455f3924",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 11878,
      "upload_time": "2021-04-07T20:26:06",
      "upload_time_iso_8601": "2021-04-07T20:26:06.961014Z",
      "url": "https://files.pythonhosted.org/packages/69/30/f6a485ee4606f5f5f787bb9d7107d43f9baf3d920480afe063dea14ff0d4/spellwise-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}