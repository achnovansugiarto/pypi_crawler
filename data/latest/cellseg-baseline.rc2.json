{
  "info": {
    "author": "Cheng Ge",
    "author_email": "13851520957@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# NeurIPS-CellSeg\nA naive baseline and submission demo for the [microscopy image segmentation challenge in NeurIPS 2022](https://neurips22-cellseg.grand-challenge.org/)\n\n\n## Preprocessing\n\nDownload training data to the `data` folder\n\nRun `python pre_process_3class.py`\n\n\n\n## Training\n\n`cd baseline`\n\nRun `python model_training_3class.py --data_path 'path to training data' --batch_size 8`\n\n\n\n## Inference\n\nRun\n\n`python predict.py -i input_path -o output_path`\n\n> Your prediction file should have at least the two arguments: `input_path` and `output_path`. The two arguments are important to establish connections between local folders and docker folders.\n\n\n\n## Build Docker\n\nWe recommend this great tutorial: https://nbviewer.org/github/ericspod/ContainersForCollaboration/blob/master/ContainersForCollaboration.ipynb\n\n### 1) Preparation\n\nThe docker is built on [MONAI](https://hub.docker.com/r/projectmonai/monai)\n\n> docker pull projectmonai/monai\n\nPrepare `Dockerfile`\n\n```dockerfile\nFROM projectmonai/monai:latest\n\nWORKDIR /workspace\nCOPY ./   /workspace\n```\n\nPut the inference command in the `predict.sh`\n\n```bash\n# !/bin/bash -e\npython predict.py -i \"/workspace/inputs/\"  -o \"/workspace/outputs/\"\n```\n\n> The `input_path` and `output_path` augments should specify the corresponding docker workspace folders rather than local folders, because we will map the local folders to the docker workspace folders when running the docker container.\n\n### 2) Build Docker and make sanity test\n\nThe submitted docker will be evaluated by the following command:\n\n```bash\ndocker container run --gpus \"device=0\" --name teamname --rm -v $PWD/CellSeg_Test/:/workspace/inputs/ -v $PWD/teamname_outputs/:/workspace/outputs/ teamname:latest /bin/bash -c \"sh predict.sh\"\n```\n\n- `--name`: container name during running\n\n- `--rm`: remove the container after running\n- `-v $PWD/CellSeg_Test/:/workspace/inputs/`: map local image data folder to Docker `workspace/inputs` folder. \n- `-v $PWD/teamname_outputs/:/workspace/outputs/ `: map Docker `workspace/outputs` folder to local folder. The segmentation results will be in `$PWD/teamname_outputs`\n- `teamname:latest`: docker image name (should be `teamname`) and its version tag. **The version tag should be `latest`**. Please do not use `v0`, `v1`... as the version tag\n- `/bin/bash -c \"sh predict.sh\"`: start the prediction command. It will load testing images from `workspace/inputs` and save the segmentation results to `workspace/outputs`\n\n\n\nAssuming the team name is `baseline`, the Docker build command is \n\n`docker build -t baseline . `\n\nTest the docker to make sure it works. There should be segmentation results in the `baseline_outputs` folder.\n\n```bash\ndocker container run --gpus \"device=0\" --name baseline --rm -v $PWD/CellSeg_Test/:/workspace/inputs/ -v $PWD/baseline_outputs/:/workspace/outputs/ baseline:latest /bin/bash -c \"sh predict.sh\"\n```\n\n> During the inference, please monitor the GPU memory consumption using `watch nvidia-smi`. The GPU memory consumption should be less than 1500MB. Otherwise, it will run into an OOM error on the official evaluation server. We impose this hard constraint on GPU memory consumption to ensure ease of use, because biologists may not have powerful GPUs in practice. Thus, the model should be low-resource.\n\n\n\n### 3) Save Docker\n\n`docker save baseline | gzip -c > baseline.tar.gz`\n\nUpload the docker to Google drive or Baidu net disk and send the download link to `NeurIPS.CellSeg@gmail.com`. \n\n> Please **do not** upload the Docker to dockerhub!\n\n\n\n## Limitations and potential improvements\n\nThe naive baseline's primary aim is to give participants out-of-the-box scripts that can generate successful submisions. Thus, there are many ways to surpass this baseline:\n\n- New cell representation methods. In the baseline, we separated touching cells by simply removing their boundaries. More advanced cell representation could be used to address this issue, such as [stardist](https://github.com/stardist/stardist), [cellpose](https://github.com/MouseLand/cellpose), [omnipose](https://github.com/kevinjohncutler/omnipose), [deepcell](https://github.com/vanvalenlab/deepcell-tf), and so on.\n- New architectures\n- More data augmentations and the use of additional [public datasets](https://grand-challenge.org/forums/forum/weakly-supervised-cell-segmentation-in-multi-modality-microscopy-673/topic/official-external-datasets-thread-720/) or the set of unlabeled data provided.\n- Well-designed training protocols\n- Postprocessing\n\nNevertheless, please always keep in mind that many end users do not have powerful computation resources. It's important to consider the trade-off between resource consumption and accuracy. \n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JunMa11/NeurIPS-CellSeg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellseg-baseline",
    "package_url": "https://pypi.org/project/cellseg-baseline/",
    "platform": "all",
    "project_url": "https://pypi.org/project/cellseg-baseline/",
    "project_urls": {
      "Homepage": "https://github.com/JunMa11/NeurIPS-CellSeg"
    },
    "release_url": "https://pypi.org/project/cellseg-baseline/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "NeurIPS-CellSeg-baseline",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14360261,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53ce46f2bb1ac3f29381dc2f39eea515a25480cfb84158f23e8b3da1bfcb3548",
          "md5": "c7fc910a47e1f6248896aedcd72aaea6",
          "sha256": "91a128254544db43118c8834e5b37635185106f6e4105daec238761a9418d98e"
        },
        "downloads": -1,
        "filename": "cellseg_baseline-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7fc910a47e1f6248896aedcd72aaea6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16762,
        "upload_time": "2022-07-07T03:11:25",
        "upload_time_iso_8601": "2022-07-07T03:11:25.362159Z",
        "url": "https://files.pythonhosted.org/packages/53/ce/46f2bb1ac3f29381dc2f39eea515a25480cfb84158f23e8b3da1bfcb3548/cellseg_baseline-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80cf859f08c1aa2651254fead04d793ebbbf0e3f39f1c9f3f22a9fbde95f831d",
          "md5": "a18389ee88cce0018a08e64fe5da82f3",
          "sha256": "4bb1da9a2379400b559165957dccdb24d17e7c90e4f791447b2aeced0b67956c"
        },
        "downloads": -1,
        "filename": "cellseg_baseline-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a18389ee88cce0018a08e64fe5da82f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16156,
        "upload_time": "2022-07-07T03:11:28",
        "upload_time_iso_8601": "2022-07-07T03:11:28.667209Z",
        "url": "https://files.pythonhosted.org/packages/80/cf/859f08c1aa2651254fead04d793ebbbf0e3f39f1c9f3f22a9fbde95f831d/cellseg_baseline-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1332b05bc22ab6a696c20c35826b912e986e9def2cea699c30d3cce87948675",
          "md5": "86dc1bb16056e5d20fe16e0fbf2d34b8",
          "sha256": "e67147614e6a9409cbb5d0aae79b3cd79944e98836c67b9fcaaf8f2b22a78a1d"
        },
        "downloads": -1,
        "filename": "cellseg_baseline-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86dc1bb16056e5d20fe16e0fbf2d34b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16449,
        "upload_time": "2022-07-07T03:37:38",
        "upload_time_iso_8601": "2022-07-07T03:37:38.484952Z",
        "url": "https://files.pythonhosted.org/packages/f1/33/2b05bc22ab6a696c20c35826b912e986e9def2cea699c30d3cce87948675/cellseg_baseline-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4180733b4f02da4930d6caff7f5e576add880bea64fe88ddbd74dbd78c727ef",
          "md5": "2dad52791db3b8729121c23173ffe021",
          "sha256": "293ae6b49929a9a8218e057cb182f260e0a72c346682fd3cb042ecb32b2bb7de"
        },
        "downloads": -1,
        "filename": "cellseg_baseline-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2dad52791db3b8729121c23173ffe021",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16465,
        "upload_time": "2022-07-07T03:37:40",
        "upload_time_iso_8601": "2022-07-07T03:37:40.754056Z",
        "url": "https://files.pythonhosted.org/packages/d4/18/0733b4f02da4930d6caff7f5e576add880bea64fe88ddbd74dbd78c727ef/cellseg_baseline-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1332b05bc22ab6a696c20c35826b912e986e9def2cea699c30d3cce87948675",
        "md5": "86dc1bb16056e5d20fe16e0fbf2d34b8",
        "sha256": "e67147614e6a9409cbb5d0aae79b3cd79944e98836c67b9fcaaf8f2b22a78a1d"
      },
      "downloads": -1,
      "filename": "cellseg_baseline-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86dc1bb16056e5d20fe16e0fbf2d34b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16449,
      "upload_time": "2022-07-07T03:37:38",
      "upload_time_iso_8601": "2022-07-07T03:37:38.484952Z",
      "url": "https://files.pythonhosted.org/packages/f1/33/2b05bc22ab6a696c20c35826b912e986e9def2cea699c30d3cce87948675/cellseg_baseline-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4180733b4f02da4930d6caff7f5e576add880bea64fe88ddbd74dbd78c727ef",
        "md5": "2dad52791db3b8729121c23173ffe021",
        "sha256": "293ae6b49929a9a8218e057cb182f260e0a72c346682fd3cb042ecb32b2bb7de"
      },
      "downloads": -1,
      "filename": "cellseg_baseline-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2dad52791db3b8729121c23173ffe021",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16465,
      "upload_time": "2022-07-07T03:37:40",
      "upload_time_iso_8601": "2022-07-07T03:37:40.754056Z",
      "url": "https://files.pythonhosted.org/packages/d4/18/0733b4f02da4930d6caff7f5e576add880bea64fe88ddbd74dbd78c727ef/cellseg_baseline-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}