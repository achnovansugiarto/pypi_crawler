{
  "info": {
    "author": "Tobias Tietz",
    "author_email": "tobias.tietz10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "# SPARTACUS10\nIncludes functions to perform spatial hierarchical agglomerative clustering (SHAC),\nincluding SPARTACUS (SPAtial hieRarchical agglomeraTive vAriable ClUStering), \nas well as spatially constrained ensemble clustering (SEC). These functions are \nespecially designed to cluster neuroimaging data. Moreover, implementations of \nthe silhouette coefficient (SC) for large data, the simplified silhouette \ncoefficient (SSC) and spatial adaptations thereof are included as well. \n\nTo see a more detailed Read-The-Docs documentation, got to <https://spartacus10.readthedocs.io/>.\n\n## Description of the methods\n\n### SHAC and SEC methods \n\nIn neuroimaging, a goal is to subdivide the human brain into spatially contiguous \nparcels based on, e.g., structural or functional brain images.\nThese parcels, i.e. brain regions, should be of large within homogeneity and between \nheterogeneity with respect to the underlying modality that these \nparcels are derived from, but, ideally, also with respect to other modalities.\n\nTo achieve this goal, clustering methods are typically employed. One group of \nclustering methods paticularly suited for such parcellation tasks are SHAC methods\n(Carvalho et al., 2009). \nThe main idea is to, in the beginning, consider each image voxel as its own cluster\nand to merge in each step of the algorithm the clostest two clusters under the\nconstraint that these clusters must be spatial neighbors. Hereby, two clusters are \nspatial neighbors, if at least one voxel from one cluster is a spatial neighbor \nof a voxel from the other cluster. The algorithm proceeds until either all voxels are \nin the same cluster or until all clusters are discontiguous. The latter occurs,\nif the input data consists of multiple discontiguous regions. In order to calculate\nthe distance between clusters, popular linkage functions such as single, complete \nor average linkage as well as, e.g. the centroid or Ward's minimal variance method\ncan be employed.\n\nA SHAC method that is especially designed to cluster variables, i.e. voxels, is the SPARTACUS \n(SPAtial hieRarchical agglomeraTive vAriable ClUStering) method (Tietz et al, 2021).\nThe SPARTACUS distance between two clusters is the overall loss in explained \ntotal variance by all clusters first principal components that would be caused, \nif these two clusters are merged (also see Vigneau and Qannari (2003)).\n\nSome SHAC methods, e.g. single, complete or average linkage based SHAC, can also \nbe used to perform spatial hierarchical ensemble clustering (SEC) as described \nby Tietz et al. (2021). Hereby, the SHAC method is applied to the co-association/ensemble\nmatix, which is calculated from a cluster ensemble. Moreover, also the Hellinger \ndistance can be used as distance measure for clusters in a SHAC algorithm as \nintroduced by Tietz et al. (2021), in order to obtain a final ensemble parcellation \nbased on a cluster ensemble. \n\nThe SHAC and SEC methods are implemented in the spartacus module from the SPARTACUS10\npackage.\n\n### Silhouette coefficient and its adaptations\n\nIn order to evaluate the quality of the final parcellations, internal validation\nmeasures can be employed, one of which is the well established silhouette \ncoefficient (SC) (Rousseeuw, 1987). The silhouette coefficient of a voxel is \ncalculated as ``(b - a) / max(a, b)``, where ``a`` is the mean distance of that \nvoxel to all other voxels from its cluster and ``b`` is the smallest mean distance \nof that voxel to all voxels from another cluster. As distance, e.g., the Euclidean\ndistance or the correlation distance ``1 - abs(corr)`` is used. The silhouette \ncoefficient of a parcellation is then the mean over all these voxel-wise \nsilhouette coefficients.\n\nAn issue with the silhouette coefficient is that its memory consuming, if the \nnumber of voxels is large, as it is typically the case with high-resolution \nneuroimages. In order to avoid running into a memory error, the module \nspatial_silhouette from the SPARTACUS10 package includes an implementation \nof the silhouette coefficient for large data sets that avoids to run into a memory \nerror, by calculating the pairwise distances between voxels not all at once, but \nin chunks. \n\nAnother issue of the silhouette coefficient is that it is computationally expensive,\nif the number of voxels is large. Therefore, the computationally less expensive \nsimplified silhouette coefficient (SSC) as introduced by Vendramin et al. (2010) \nis implemented in the spatial_silhouette module as well.\nIn this variation, ``a`` is the distance of the respective voxel to the centroid\nof its cluster and ``b`` is the smallest distance of that voxel to the centroid \nof another cluster. The distance measure is either the Euclidean distance or the correlation\ndistance and the centroid of a cluster is either the mean over all data points \nfrom that cluster or the first principal component of that cluster, respectively.   \n\nBoth, the silhouette coefficient and its simplified variant ignore the spatial \ninformation provided by the input data. However, cross-hemispheric communications,\ni.e. interactions between contralateral regions on different brain hemispheres\n(Davis and Cabeza, 2015), can cause the concerned brain regions to be of high \nsimilarity. As these brain regions are usually spatially discontiguous, they can\nnot be merged by a spatial clustering algorithm. Thus, the ``b`` values of all voxels \nfrom the corresponding regions will be small, which falsely reduces the\nSC or SSC score. Therefore, spatial adaptations of the SC and SSC as proposed \nby Tietz et al. (2021) are implemented in the spatial_silhouette module that are \nindependent of cross-hemispheric communications. The idea is to calculate \nthe ``b`` value of each voxel only with respect to the neighboring clusters of \nthe cluster this voxel belongs to. \n\n\n## Installation\n\nYou can install the SPARTACUS10 package from [PyPI](https://pypi.org/project/SPARTACUS10/):\n\n```bash\npip install SPARTACUS10\n```\n\nSPARTACUS10 is supported on Python 3.6 and above.\n\n## How to use\n\nYou can call the SHAC and SEC functions in your own Python code, by importing \nfrom the `SPARTACUS10` package:\n\n```python\nfrom SPARTACUS10 import spartacus\n```\n\nExample to perform SPARTACUS method, i.e. random input data with V = 24 spatial \nvariables on a 4x3x2 grid and ten subjects:\n\n```python\nimport numpy as np\nV = 24\nX = np.random.normal(size = (10, V))\nmatXYZ = np.argwhere(np.zeros((4,3,2)) == 0)\n```\n\nSPARTACUS based partition with four clusters:\n\n```python\nZ = spartacus.shac(X, matXYZ, metric = 'spartacus', standardize = False)\nlabels = spartacus.get_cluster(Z, V, n_init_cluster = 4)\nlabels\narray([1, 4, 1, 4, 4, 4, 4, 4, 3, 4, 3, 3, 4, 2, 4, 3, 3, 3, 4, 2, 4, 3, \n           4, 3])\n```        \n\nExample to perform average linkage based SEC method, i.e. random cluster ensemble \nwith V = 8 spatial variables on a 2x2x2 grid and six base partitions:           \n\n```python\nimport numpy as np    \nX = np.array([[1,1,2,2,3,3,4,4],\n              [1,1,2,2,3,3,4,4],\n              [1,1,2,2,3,3,4,4],\n              [1,1,2,2,5,5,6,6],\n              [1,1,1,2,3,3,3,4],\n              [1,1,1,2,3,3,3,4]])\nmatXYZ = np.argwhere(np.zeros((2,2,2)) == 0)\n```\n\nAverage linkage based partition with two clusters:\n\n```python\nZ = spartacus.spatial_ensemble_clustering(X, matXYZ, method='average')\nlabels = spartacus.get_cluster(Z, V = 8, n_init_cluster = 2)\nlabels\narray([1, 1, 1, 1, 2, 2, 2, 2])\n```    \n\nYou can call the SC, SSC and spatial adaptations thereof in your own Python code, \nby importing from the `SPARTACUS10` package:\n\n```python\nfrom SPARTACUS10 import spatial_silhouette\n```\n\nExample evaluation using the silhouette coefficient of randomly generated input \ndata with 100 variables and a random partition assigning each variable to one \nof in total four clusters:\n\n```python\nimport numpy as np\nX = np.random.normal(size = (50, 100))\nlabels = np.random.randint(1, 5, 100)\nspatial_silhouette.silhouette_coefficient(X, labels, metric = \"euclidean\")   \n-0.0171145\n```\n\n## Development\n\nTo run all the tests run\n\n```bash\npy.test \n```\n\nfrom the SPARTACUS10 directory (installed in side_packages). \n\n## References\n\nCarvalho AXY, Albuquerque PHM, de Almeida Junior GZ, Guimaraes RD (2009)\n        Spatial hierarchical clustering. Revista Brasileira de Biometria \n        27(3):411-442\n\nVigneau E, Qannari EM (2003) Clustering of variables around latent components.\n        Communications in Statistics-Simulation and Computation 32(4):1131-1150\n\nRousseeuw PJ (1987) Silhouettes: a graphical aid to the interpretation and \n        validation of cluster analysis. Journal of computational and applied \n        mathematics 20:53-65\n\nVendramin L, Campello RJGB, Hruschka ER (2010) Relative clustering validity \n        criteria: A comparative overview. Statistical analysis and data mining: \n        the ASA data science journal 3(4):209-235\n\nDavis SW, Cabeza R (2015) Cross-hemispheric collaboration and segregation associated\n        with task difficulty as revealed by structural and functional connectivity.\n        Journal of Neuroscience 35(21):8191-8200\n\nTietz et al. (2021) (Publication in progress.)    \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/totie10/SPARTACUS",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SPARTACUS10",
    "package_url": "https://pypi.org/project/SPARTACUS10/",
    "platform": "",
    "project_url": "https://pypi.org/project/SPARTACUS10/",
    "project_urls": {
      "Documentation": "https://spartacus10.readthedocs.io/",
      "Homepage": "https://github.com/totie10/SPARTACUS"
    },
    "release_url": "https://pypi.org/project/SPARTACUS10/0.0.1/",
    "requires_dist": [
      "numpy (>=1.15.1)",
      "scipy (>=1.2.0)",
      "scikit-learn (>=0.22.0)",
      "pytest ; extra == 'dev'",
      "pandas (>=0.18.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "A package to perform spatial hierarchical agglomerative clustering as well as spatially constrained ensemble clustering. Further includes implementations of the silhouette coefficient, the simplified silhouette coefficient and spatial adaptations thereof.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10646985,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46b27518c7a57eed7c07f88fbee5d072331d81651f00b580cfd063a097e6c0e4",
          "md5": "22de4a7c07969cd2a8166c79d2649b73",
          "sha256": "1b518f1579c34cb3b516db4ec6d86883b08a008983f6457c0fddf37f620cb1eb"
        },
        "downloads": -1,
        "filename": "SPARTACUS10-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22de4a7c07969cd2a8166c79d2649b73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 212332,
        "upload_time": "2021-06-14T21:53:07",
        "upload_time_iso_8601": "2021-06-14T21:53:07.863606Z",
        "url": "https://files.pythonhosted.org/packages/46/b2/7518c7a57eed7c07f88fbee5d072331d81651f00b580cfd063a097e6c0e4/SPARTACUS10-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a05b17f3af8fb6a6e02d1ac9a0dfb0ce1f8920c286b3111a2b391724ac5d0ab1",
          "md5": "c209bab4f889ff056bc69ac3f10d292a",
          "sha256": "33960e642148a5d2a252483311a29e5e51275da99d2f508d2e26014b6fe5c019"
        },
        "downloads": -1,
        "filename": "SPARTACUS10-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c209bab4f889ff056bc69ac3f10d292a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 110979,
        "upload_time": "2021-06-14T21:53:10",
        "upload_time_iso_8601": "2021-06-14T21:53:10.713523Z",
        "url": "https://files.pythonhosted.org/packages/a0/5b/17f3af8fb6a6e02d1ac9a0dfb0ce1f8920c286b3111a2b391724ac5d0ab1/SPARTACUS10-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46b27518c7a57eed7c07f88fbee5d072331d81651f00b580cfd063a097e6c0e4",
        "md5": "22de4a7c07969cd2a8166c79d2649b73",
        "sha256": "1b518f1579c34cb3b516db4ec6d86883b08a008983f6457c0fddf37f620cb1eb"
      },
      "downloads": -1,
      "filename": "SPARTACUS10-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22de4a7c07969cd2a8166c79d2649b73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 212332,
      "upload_time": "2021-06-14T21:53:07",
      "upload_time_iso_8601": "2021-06-14T21:53:07.863606Z",
      "url": "https://files.pythonhosted.org/packages/46/b2/7518c7a57eed7c07f88fbee5d072331d81651f00b580cfd063a097e6c0e4/SPARTACUS10-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a05b17f3af8fb6a6e02d1ac9a0dfb0ce1f8920c286b3111a2b391724ac5d0ab1",
        "md5": "c209bab4f889ff056bc69ac3f10d292a",
        "sha256": "33960e642148a5d2a252483311a29e5e51275da99d2f508d2e26014b6fe5c019"
      },
      "downloads": -1,
      "filename": "SPARTACUS10-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c209bab4f889ff056bc69ac3f10d292a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 110979,
      "upload_time": "2021-06-14T21:53:10",
      "upload_time_iso_8601": "2021-06-14T21:53:10.713523Z",
      "url": "https://files.pythonhosted.org/packages/a0/5b/17f3af8fb6a6e02d1ac9a0dfb0ce1f8920c286b3111a2b391724ac5d0ab1/SPARTACUS10-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}