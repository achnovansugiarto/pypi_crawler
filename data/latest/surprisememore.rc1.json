{
  "info": {
    "author": "Emiliano Marchese",
    "author_email": "emilianomarcheserc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "SurpriseMeMore\n-------------------------------------------------------------------\n\nSurpriseMeMore is a toolbox for detecting mesoscale structure in networks, released as a python3 module. \n\nSurpriseMeMore provides the user with a variety of solvers, based on the _surprise_ framework, for the detection of mesoscale structures ( e.g. communities, core-periphery) in networks.\n\nThe models implemented in SurpriseMeMore are presented in a forthcoming [paper](https://arxiv.org/abs/2106.05055) on arXiv.\nIf you use the module for your scientific research, please consider citing us:\n\n```\n    @misc{marchese2021detecting,\n      title={Detecting mesoscale structures by surprise}, \n      author={Emiliano Marchese and Guido Caldarelli and Tiziano Squartini},\n      year={2021},\n      eprint={2106.05055},\n      archivePrefix={arXiv},\n      primaryClass={physics.soc-ph}\n    }\n```\n\n#### Table Of Contents\n- [Currently Implemented Methods](#currently-implemented-methods)\n- [Installation](#installation)\n- [Dependencies](#dependencies)\n- [Some Examples](#some-examples)\n- [Development](#development)\n- [Credits](#credits)\n\n## Currently Implemented Methods\nThe available methods, for both directed and undirected networks, are:\n\n* *Community detection on binary networks* \n* *Community detection on weighted networks with integer weights* \n* *Community detection on weighted networks with continuous weights* \n* *Core-Peryphery detection on binary networks* \n* *Core-Peryphery detection on weighted networks with integer weights*\n\nInstallation\n------------\nSurpriseMeMore can be installed via pip. You can get it from your terminal:\n\n```\n    $ pip install surprisememore\n```\n\nIf you already install the package and wish to upgrade it,\nyou can simply type from your terminal:\n\n```\n    $ pip install surprisememore --upgrade\n```\n\nDependencies\n------------\n\nNEMtropy uses <code>numba</code> library. It is installed automatically with surprisememore.\nIf you use <code>python3.5</code> you may incur in an error, we suggest installing numba with the following command:\n\n```\n    $ pip install --prefer-binary numba\n```\n\nIt avoids an error during the installation of <code>llvmlite</code> due to \nthe absence of its wheel in <code>python3.5</code>.\n\nSome Examples\n--------------\nAs an example, we run community detection on zachary karate club network.\n\n```\n    import numpy as np\n    import networkx as nx\n    from surprisememore import UndirectedGraph\n\n    from surprisememore import UndirectedGraph\n    import networkx as nx\n    \n    G = nx.karate_club_graph()\n    adj_kar = nx.to_numpy_array(G)\n    graph = UndirectedGraph(adj_kar)\n    \n    graph.run_discrete_community_detection(weighted=False,\n                                           num_sim=2)\n```\nThe algorithm will find the best partition by optimizing surprise score\nfunction. At the end of the optimization process, the optimal partition is\nsaved as an attribute of the graph class.\n\n```\n    # optimal partition\n    graph.solution\n    \n    # Surprise of the optimal partition\n    graph.surprise\n    \n    # Log surprise\n    graph.log_surprise\n```\n\nSimilarly, we can run the algorithm detecting bimodular structure. In the case\nof zachary karate club, the code snippet is the following.\n\n#%% md\n\n```\n    from surprisememore import UndirectedGraph\n    import networkx as nx\n    \n    G = nx.karate_club_graph()\n    adj_kar = nx.to_numpy_array(G)\n    graph = UndirectedGraph(adjacency=adj_kar)\n```\n\nHere we initialized our SupriseMeMore **UndirectedGraph** object with the adjacency\nmatrix. The available options are adjacency matrix or edgelist.\n\n* If you use adjacency matrix, then you have to pass the matrix as a **numpy.ndarray**;\n\n* If you use edgelist, then the edgelist has to be passed as a **list of tuple**:\n    * [(u, v), (u, t), ...] for binary networks;\n    * [(u, v, w1), (u, t, w2), ...] for weighted networks;\n\nFor more details about edgelist format you can see [link](https://networkx.org/documentation/stable/reference/classes/generated/networkx.DiGraph.add_weighted_edges_from.html?highlight=add_weighted_edges_from#networkx.DiGraph.add_weighted_edges_from).\n\n```\n    graph.run_discrete_cp_detection(weighted=False, num_sim=2)\n```\n\nIn the previous example I passed two optional arguments to the function: *weighted*\nand *num_sim*. The argument *weighted* specify which version of surprise you want \nto use: binary or weighted. If the network is binary, you don't need to pass \nthe argument \"weighted\", the class detects by itself that the graph is binary \nand use the proper method for community/bimodular detection. Instead, if the \nnetwork has weights, the default method is the weighted one. To run binary \ncommunity/bimodular detection you must specify \"weighted\"=False.\n\nThe arguments *num_sim* specifies the number of time we run over all the edges \nof the network during the optimization problem. You can find more detail about the\nalgorithm in [1](https://arxiv.org/abs/2106.05055), [2](https://www.nature.com/articles/srep19250).\n\nAll the implemented algorithms are heuristic, we suggest running them more \nthan once and pick the best solution (the one with higher log_surprise).\n\nTo learn more, please read the two ipython notebooks in the examples' directory:\none is a study case on a [community detection](https://github.com/nicoloval/NEMtropy/blob/master/examples/Community%20Detection.ipynb), \nwhile the other is on an [bimodular detection](https://github.com/nicoloval/NEMtropy/blob/master/examples/Mesoscale%20Structure%20Detection.ipynb).\n\nDevelopment\n-----------\nPlease work on a feature branch and create a pull request to the development \nbranch. If necessary to merge manually do so without fast-forward:\n\n```\n    $ git merge --no-ff myfeature\n```\n\nTo build a development environment run:\n\n```\n    $ python3 -m venv venv \n    $ source venv/bin/activate \n    $ pip install -e '.[dev]'\n```\n\nCredits\n-------\n\n_Author_:\n\n[Emiliano Marchese](https://www.imtlucca.it/en/emiliano.marchese/) (a.k.a. [EmilianoMarchese](https://github.com/EmilianoMarchese))\n\n\n_Acknowledgements:_\n\nThe module was developed under the supervision of [Tiziano Squartini](http://www.imtlucca.it/en/tiziano.squartini/).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/EmilianoMarchese/SurpriseMeMore/archive/refs/tags/v0.1.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EmilianoMarchese/SurpriseMeMore",
    "keywords": "community detection,core-periphery detection,graphs,multi-graphs,weighted graphs,surprise",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "surprisememore",
    "package_url": "https://pypi.org/project/surprisememore/",
    "platform": "",
    "project_url": "https://pypi.org/project/surprisememore/",
    "project_urls": {
      "Download": "https://github.com/EmilianoMarchese/SurpriseMeMore/archive/refs/tags/v0.1.0.zip",
      "Homepage": "https://github.com/EmilianoMarchese/SurpriseMeMore"
    },
    "release_url": "https://pypi.org/project/surprisememore/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SurpriseMeMore is a python module providing methods, based on the surprise framework, to detect mesoscale structures(e.g. communities, core-periphery, bow-tie) in graphs and multigraphs.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10610390,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9331448f6c300aa4cd943933929da46437f13d355c9dbe05429642a431c80ce4",
          "md5": "6694e7fc6af39d8d413953c766024497",
          "sha256": "17d20aacac582915ff1b90cbf4f6a5745359b8d2855ff597fee6e41874c32705"
        },
        "downloads": -1,
        "filename": "surprisememore-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6694e7fc6af39d8d413953c766024497",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23403,
        "upload_time": "2021-06-10T10:25:44",
        "upload_time_iso_8601": "2021-06-10T10:25:44.227927Z",
        "url": "https://files.pythonhosted.org/packages/93/31/448f6c300aa4cd943933929da46437f13d355c9dbe05429642a431c80ce4/surprisememore-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9331448f6c300aa4cd943933929da46437f13d355c9dbe05429642a431c80ce4",
        "md5": "6694e7fc6af39d8d413953c766024497",
        "sha256": "17d20aacac582915ff1b90cbf4f6a5745359b8d2855ff597fee6e41874c32705"
      },
      "downloads": -1,
      "filename": "surprisememore-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6694e7fc6af39d8d413953c766024497",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23403,
      "upload_time": "2021-06-10T10:25:44",
      "upload_time_iso_8601": "2021-06-10T10:25:44.227927Z",
      "url": "https://files.pythonhosted.org/packages/93/31/448f6c300aa4cd943933929da46437f13d355c9dbe05429642a431c80ce4/surprisememore-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}