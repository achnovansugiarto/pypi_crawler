{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "accledgerdevs@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure Confidential Ledger client library for Python\n\nAzure Confidential Ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing] portfolio, Azure Confidential Ledger runs in secure, hardware-based trusted execution environments, also known as enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n[Source code][confidential_ledger_client_src] | [Package (PyPI)][pypi_package_confidential_ledger] | [API reference documentation][reference_docs] | [Product documentation][confidential_ledger_docs]\n\n## Getting started\n### Install packages\nInstall [azure-confidentialledger][pypi_package_confidential_ledger] and [azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-identity azure-confidentialledger\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.6 or later\n* A running instance of Azure Confidential Ledger.\n* A registered user in the Confidential Ledger, typically assigned during [ARM][azure_resource_manager] resource creation, with `Administrator` privileges.\n\n### Authenticate the client\n#### Using Azure Active Directory\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate to the Confidential Ledger via Azure Active Directory. However, `ConfidentialLedgerClient` accepts any [azure-identity][azure_identity] credential. See the [azure-identity][azure_identity] documentation for more information about other credentials.\n\n#### Using a client certificate\nAs an alternative to Azure Active Directory, clients may choose to use a client certificate to authenticate via mutual TLS. `azure.confidentialledger.ConfidentialLedgerCertificateCredential` may be used for this purpose.\n\n### Create a client\n`DefaultAzureCredential` will automatically handle most Azure SDK client scenarios. To get started, set environment variables for the AAD identity registered with your Confidential Ledger.\n```bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\nThen, `DefaultAzureCredential` will be able to authenticate the `ConfidentialLedgerClient`.\n\nConstructing the client also requires your Confidential Ledger's URL and id, which you can get from the Azure CLI or the Azure Portal. When you have retrieved those values, please replace instances of `\"my-ledger-id\"` and `\"https://my-ledger-id.confidential-ledger.azure.com\"` in the examples below. You may also need to replace `\"https://identity.confidential-ledger.core.azure.com\"` with the hostname from the `identityServiceUri` in the ARM description of your ledger.\n\nBecause Confidential Ledgers use self-signed certificates securely generated and stored in an enclave, the signing certificate for each Confidential Ledger must first be retrieved from the Confidential Ledger Identity Service.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\nConveniently, the `ConfidentialLedgerClient` constructor will fetch the ledger TLS certificate (and write it to the specified file) if it is provided with a non-existent file. The user is responsible for removing the created file as needed.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=\"ledger_certificate.pem\"\n)\n\n# The ledger TLS certificate is written to `ledger_certificate.pem`.\n```\n\nTo make it clear that a file is being used for the ledger TLS certificate, subsequent examples will explicitly write the ledger TLS certificate to a file.\n\n## Key concepts\n### Ledger entries and transactions\nEvery write to Azure Confidential Ledger generates an immutable ledger entry in the service. Writes, also referred to as transactions, are uniquely identified by transaction ids that increment with each write. Once written, ledger entries may be retrieved at any time.\n\n### Receipts\nState changes to the Confidential Ledger are saved in a data structure called a Merkle tree. To cryptographically verify that writes were correctly saved, a Merkle proof, or receipt, can be retrieved for any transaction id.\n\n### Collections\nWhile most use cases involve just one collection per Confidential Ledger, we provide the collection id feature in case semantically or logically different groups of data need to be stored in the same Confidential Ledger.\n\nLedger entries are retrieved by their `collectionId`. The Confidential Ledger will always assume a constant, service-determined `collectionId` for entries written without a `collectionId` specified.\n\n### Users\nUsers are managed directly with the Confidential Ledger instead of through Azure. Users may be AAD-based, identified by their AAD object id, or certificate-based, identified by their PEM certificate fingerprint.\n\n### Confidential computing\n[Azure Confidential Computing][azure_confidential_computing] allows you to isolate and protect your data while it is being processed in the cloud. Azure Confidential Ledger runs on Azure Confidential Computing virtual machines, thus providing stronger data protection with encryption of data in use.\n\n### Confidential Consortium Framework\nAzure Confidential Ledger is built on Microsoft Research's open-source [Confidential Consortium Framework (CCF)][ccf]. Under CCF, applications are managed by a consortium of members with the ability to submit proposals to modify and govern application operation. In Azure Confidential Ledger, Microsoft Azure owns an operator member identity that allows it to perform governance and maintenance actions like replacing unhealthy nodes in the Confidential Ledger and upgrading the enclave code.\n\n## Examples\nThis section contains code snippets covering common tasks, including:\n- [Append entry](#append-entry)\n- [Retrieving ledger entries](#retrieving-ledger-entries)\n- [Making a ranged query](#making-a-ranged-query)\n- [Managing users](#managing-users)\n- [Using certificate authentication](#using-certificate-authentication)\n\n### Append entry\nData that needs to be stored immutably in a tamper-proof manner can be saved to Azure Confidential Ledger by appending an entry to the ledger.\n\nSince Confidential Ledger is a distributed system, rare transient failures may cause writes to be lost. For entries that must be preserved, it is advisable to verify that the write became durable. For less important writes where higher client throughput is preferred, the wait step may be skipped.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_entry_result = ledger_client.create_ledger_entry(\n        {\"contents\": \"Hello world!\"}\n    )\ntransaction_id = post_entry_result[\"transactionId\"]\n\nwait_poller = ledger_client.begin_wait_for_commit(transaction_id)\nwait_poller.wait()\nprint(f'Ledger entry at transaction id {transaction_id} has been committed successfully')\n```\n\nAlternatively, the client may wait for commit when writing a ledger entry.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello world again!\"}\n)\nnew_post_result = post_poller.result()\nprint(\n    'The new ledger entry has been committed successfully at transaction id '\n    f'{new_post_result[\"transactionId\"]}'\n)\n```\n\n### Retrieving ledger entries\nGetting ledger entries older than the latest may take some time as the service is loading historical entries, so a poller is provided.\n\nLedger entries are retrieved by collection. The returned value is the value contained in the specified collection at the point in time identified by the transaction id.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Original hello\"}\n)\npost_result = post_poller.result()\n\nlatest_entry = ledger_client.get_current_ledger_entry()\nprint(\n    f'Current entry (transaction id = {latest_entry[\"transactionId\"]}) \"\n    f\"in collection {latest_entry[\"collectionId\"]}: {latest_entry[\"contents\"]}'\n)\n\nprior_transaction_id = latest_entry[\"transactionId\"]\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello!\"}\n)\npost_result = post_poller.result()\n\nget_entry_poller = ledger_client.begin_get_ledger_entry(prior_transaction_id)\nolder_entry = get_entry_poller.result()\nprint(\n    f'Contents of {older_entry[\"collectionId\"]} at {prior_transaction_id}: {older_entry[\"contents\"]}'\n)\n```\n\n### Making a ranged query\nLedger entries may be retrieved over a range of transaction ids. Entries will only be returned from the default or specified collection.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"First message\"}\n)\nfirst_transaction_id = post_poller.result()[\"transactionId\"]\n\nfor i in range(10):\n    ledger_client.create_ledger_entry(\n        {\"contents\": f\"Message {i}\"}\n    )\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Last message\"}\n)\nlast_transaction_id = post_poller.result()[\"transactionId\"]\n\nranged_result = ledger_client.list_ledger_entries(\n    from_transaction_id=first_transaction_id,\n    to_transaction_id=last_transaction_id,\n)\nfor entry in ranged_result:\n    print(f'Contents at {entry[\"transactionId\"]}: {entry[\"contents\"]}')\n```\n\n### Managing users\nUsers with `Administrator` privileges can manage users of the Confidential Ledger directly with the Confidential Ledger itself. Available roles are `Reader` (read-only), `Contributor` (read and write), and `Administrator` (read, write, and add or remove users).\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\nuser_id = \"some AAD object id\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Contributor\"}\n)\n# A client may now be created and used with AAD credentials (i.e. AAD-issued JWT tokens) for the user identified by `user_id`.\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Contributor\"\n\nledger_client.delete_user(user_id)\n\n# For a certificate-based user, their user ID is the fingerprint for their PEM certificate.\nuser_id = \"PEM certificate fingerprint\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Reader\"}\n)\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Reader\"\n\nledger_client.delete_user(user_id)\n```\n\n### Using certificate authentication\nClients may authenticate with a client certificate in mutual TLS instead of via an Azure Active Directory token. `ConfidentialLedgerCertificateCredential` is provided for such clients.\n\n```python\nfrom azure.confidentialledger import (\n    ConfidentialLedgerCertificateCredential,\n    ConfidentialLedgerClient,\n)\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = ConfidentialLedgerCertificateCredential(\n    certificate_path=\"Path to user certificate PEM file\"\n)\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n### Async API\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp). See the [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAn async client is obtained from `azure.confidentialledger.aio`. Methods have the same names and signatures as the synchronous client. Samples may be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples).\n\n## Troubleshooting\n### General\nConfidential Ledger clients raise exceptions defined in [azure-core][azure_core_exceptions]. For example, if you try to get a transaction that doesn't exist, `ConfidentialLedgerClient` raises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.core.exceptions import ResourceNotFoundError\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\ntry:\n    ledger_client.begin_get_ledger_entry(\n        transaction_id=\"10000.100000\"  # Using a very high id that probably doesn't exist in the ledger if it's relatively new.\n    )\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging. Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n```python\nimport logging\nimport sys\n\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level.\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name,\n    logging_enable=True,\n)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation, even when it isn't enabled for the client:\n```python\nledger_client.get_current_ledger_entry(logging_enable=True)\n```\n\n## Next steps\n### More sample code\nThese code samples show common scenario operations with the Azure Confidential Ledger client library.\n\nCommon scenarios\n\n- Writing to the ledger: [write_to_ledger.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/write_to_ledger.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/write_to_ledger_async.py])\n- Write many ledger entries and retrievee them all afterwards: [list_ledger_entries.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/list_ledger_entries.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/list_ledger_entries_async.py])\n- Manage users using service-implemented role-based access control: [manage_users.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/manage_users.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/manage_users_async.py])\n\nAdvanced scenarios\n\n- Using collections: [use_collections.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/use_collections.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/use_collections_async.py])\n- Getting receipts for ledger writes: [get_receipt.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/get_receipt.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/get_receipt_async.py])\n- Verifying service details: [verify_service.py][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/verify_service.py] ([async version][https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/verify_service_async.py])\n\n###  Additional Documentation\nFor more extensive documentation on Azure Confidential Ledger, see the\n[API reference documentation][reference_docs]. You may also read more about Microsoft Research's open-source [Confidential Consortium Framework][ccf].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ][code_of_conduct_faq] or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_resource_manager]: https://docs.microsoft.com/azure/azure-resource-manager/management/overview\n[azure_sub]: https://azure.microsoft.com/free\n[ccf]: https://github.com/Microsoft/CCF\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq\n[confidential_ledger_client_src]: https://aka.ms/azsdk/python/confidentialledger/src\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n[pip]: https://pypi.org/project/pip/\n[pypi_package_confidential_ledger]: https://aka.ms/azsdk/python/confidentialledger/pypi\n[reference_docs]: https://aka.ms/azsdk/python/confidentialledger/ref-docs\n\n\n# Release History\n\n## 1.0.0 (2022-07-19)\n\nGA Data Plane Python SDK for Confidential Ledger.\n\n### Bugs Fixed\n- User ids that are certificate fingerprints are no longer URL-encoded in the request URI.\n\n### Breaking Changes\n- Removed all models. Methods now return JSON directly.\n- `sub_ledger_id` fields are now named `collection_id`.\n- `azure.confidentialledger.identity_service` has been renamed to `azure.confidentialledger.certificate`.\n- `ConfidentialLedgerIdentityServiceClient` is now `ConfidentialLedgerCertificateClient`.\n- `post_ledger_entry` has been renamed to `create_ledger_entry`.\n\n### Other Changes\n- Python 2.7 is no longer supported. Please use Python version 3.7 or later.\n- Convenience poller methods added for certain long-running operations.\n- Add new supported API version: `2022-05-13`.\n\n## 1.0.0b1 (2021-05-12)\n\n- This is the initial release of the Azure Confidential Ledger library.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-confidentialledger",
    "package_url": "https://pypi.org/project/azure-confidentialledger/",
    "platform": null,
    "project_url": "https://pypi.org/project/azure-confidentialledger/",
    "project_urls": {
      "Bug Reports": "https://github.com/Azure/azure-sdk-for-python/issues",
      "Homepage": "https://github.com/Azure/azure-sdk-for-python",
      "Source": "https://github.com/Azure/azure-sdk-python"
    },
    "release_url": "https://pypi.org/project/azure-confidentialledger/1.0.0/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.24.0)",
      "isodate (<1.0.0,>=0.6.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Microsoft Azure Confidential Ledger Client Library for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14485472,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35fdc6800325b89c8c226e036d9c2d0b6ddb9f6001dcc47690fa39b9d0fa59b9",
          "md5": "6271b0953c485a3af9a2a795f42c505f",
          "sha256": "c2f2d3253a23729f3fbe5335e0f5457c3c21bfcd6fb1c5cb9eb775da923e9c6f"
        },
        "downloads": -1,
        "filename": "azure_confidentialledger-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6271b0953c485a3af9a2a795f42c505f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88787,
        "upload_time": "2022-07-19T20:07:54",
        "upload_time_iso_8601": "2022-07-19T20:07:54.857106Z",
        "url": "https://files.pythonhosted.org/packages/35/fd/c6800325b89c8c226e036d9c2d0b6ddb9f6001dcc47690fa39b9d0fa59b9/azure_confidentialledger-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7c1b6820f2e2504c834dbd7ff2d20f1d8a4f1e12bbd5249d179473d0dd0ad3c",
          "md5": "42ae42307341558342aab1550b0facab",
          "sha256": "a4b7f5e2b44c828580d40c619519cf2b4cc6e0c1d1dcc9b886963c86c0288546"
        },
        "downloads": -1,
        "filename": "azure-confidentialledger-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "42ae42307341558342aab1550b0facab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 143019,
        "upload_time": "2022-07-19T20:07:57",
        "upload_time_iso_8601": "2022-07-19T20:07:57.477482Z",
        "url": "https://files.pythonhosted.org/packages/e7/c1/b6820f2e2504c834dbd7ff2d20f1d8a4f1e12bbd5249d179473d0dd0ad3c/azure-confidentialledger-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf573c7c5a4f6eca3734fc00eae54624e9aa8f185ba06229e1581ee1e8ae57fe",
          "md5": "1f40db33e28e697c3ab2303528c390d4",
          "sha256": "cf4ed794d1035652c804df4bcbe5ab3b5e336c090a11283e02a6424ac5d41ba7"
        },
        "downloads": -1,
        "filename": "azure_confidentialledger-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f40db33e28e697c3ab2303528c390d4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 69304,
        "upload_time": "2021-05-12T17:20:43",
        "upload_time_iso_8601": "2021-05-12T17:20:43.214455Z",
        "url": "https://files.pythonhosted.org/packages/bf/57/3c7c5a4f6eca3734fc00eae54624e9aa8f185ba06229e1581ee1e8ae57fe/azure_confidentialledger-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1b4615140f7be3853002e0fd379873d7612fcd6b9d4dedb9bce163069a751a",
          "md5": "852757bad14ca605e861996e183ef0de",
          "sha256": "b5ede5302602e326e4d74f1a468c4e18338666250750e0c1f857fcbccf11f2e6"
        },
        "downloads": -1,
        "filename": "azure-confidentialledger-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "852757bad14ca605e861996e183ef0de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 104773,
        "upload_time": "2021-05-12T17:20:45",
        "upload_time_iso_8601": "2021-05-12T17:20:45.800683Z",
        "url": "https://files.pythonhosted.org/packages/ca/1b/4615140f7be3853002e0fd379873d7612fcd6b9d4dedb9bce163069a751a/azure-confidentialledger-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35fdc6800325b89c8c226e036d9c2d0b6ddb9f6001dcc47690fa39b9d0fa59b9",
        "md5": "6271b0953c485a3af9a2a795f42c505f",
        "sha256": "c2f2d3253a23729f3fbe5335e0f5457c3c21bfcd6fb1c5cb9eb775da923e9c6f"
      },
      "downloads": -1,
      "filename": "azure_confidentialledger-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6271b0953c485a3af9a2a795f42c505f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 88787,
      "upload_time": "2022-07-19T20:07:54",
      "upload_time_iso_8601": "2022-07-19T20:07:54.857106Z",
      "url": "https://files.pythonhosted.org/packages/35/fd/c6800325b89c8c226e036d9c2d0b6ddb9f6001dcc47690fa39b9d0fa59b9/azure_confidentialledger-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7c1b6820f2e2504c834dbd7ff2d20f1d8a4f1e12bbd5249d179473d0dd0ad3c",
        "md5": "42ae42307341558342aab1550b0facab",
        "sha256": "a4b7f5e2b44c828580d40c619519cf2b4cc6e0c1d1dcc9b886963c86c0288546"
      },
      "downloads": -1,
      "filename": "azure-confidentialledger-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "42ae42307341558342aab1550b0facab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 143019,
      "upload_time": "2022-07-19T20:07:57",
      "upload_time_iso_8601": "2022-07-19T20:07:57.477482Z",
      "url": "https://files.pythonhosted.org/packages/e7/c1/b6820f2e2504c834dbd7ff2d20f1d8a4f1e12bbd5249d179473d0dd0ad3c/azure-confidentialledger-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}