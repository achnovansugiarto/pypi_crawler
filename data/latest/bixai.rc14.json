{
  "info": {
    "author": "Simon Teggelaar",
    "author_email": "simonteggelaar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `bixai`\n\nThe `bixai` is a package made for NLO to understand drivers behind models\n\nIt contains multiple modules to analyse different problems:\n1. Decomposition for logistic regressions over time\n2. Multinomial logistic regression with impact of variables \n3. Decision tree / beslisboom\n4. Time-series forecasting with regressions and random forest\n5. Saving and loading models\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install bixai.\n\n```bash\npip install bixai\n```\n\n## 1. Usage Decomposition for logistic regressions over time\n\n```python\n\n# import modules\nfrom bixai.generate_example_data import GenerateData\nfrom bixai.creating_dataset import CreatingDataSet\nfrom bixai.logistic_regression_decomp import LogisticDecomposition\nfrom random import randint\nfrom sklearn.linear_model import LogisticRegression\nimport plotly.io as pio\n\npio.renderers.default = 'browser'\n\n# Generate data\nexample_data = GenerateData(10000)\ndf_example = example_data.generate_dataset()\n\n# Using CreatingDataSet to clean the data\ngetting_data = CreatingDataSet(df_example, {})\n\n# The sample size you want from the data and the variables (X and y) to be used\nsubset_size = 5000 \nX_vars = ['percentage_gelezen_mails', 'geslacht', 'leeftijd', 'maanden_lid', 'kanaal_instroom', 'actie_instroom',\n          'contact_vorm']\ny = 'churn'\n\n# Create the test/train\nX_train, X_test, y_train, y_test = getting_data.get_train_test(y, X_vars, divided_by_max=False, scale_data=True,\n                                                               add_random_int=False, add_random_cont=False, set_seed=2,\n                                                               size=subset_size, test_size=0.25, random_state=12,\n                                                               with_mean=True, with_std=True)\n\n# Logistic Regression Model\nmodel_churn = LogisticRegression().fit(X_train, y_train)\n\n# Add a random variable to split on for this example (this should come from own data)\nsplit_var = [randint(2018, 2022) for p in range(0, len(X_train))] \nvars_to_show = []\nmodel_decomp = LogisticDecomposition(model_churn)\ndecomposition_results = model_decomp.decomposition_logistic(X_train, split_var=split_var, plot=True, y=[],\n                                                             X_vars_to_show=vars_to_show,\n                                                             scaling_to_mean_odds_model=True,\n                                                             scaling_to_actual_odds=False)\n\n```\n\n## 2. Usage Multinomial Logistic Regression\n```python\nfrom bixai.generate_example_data import GenerateData\nfrom bixai.creating_dataset import CreatingDataSet\nfrom bixai.ml_models import Models, EvaluateModels\nimport plotly.io as pio\npio.renderers.default = 'browser'\n\n# Generate data\nexample_data = GenerateData(10000)\ndf_example = example_data.generate_dataset()\n\n# Select what and how much data we wanna use\ngetting_data = CreatingDataSet(df_example, {})\nsubset_size = 10000\n# Selection of variables we wanna use in the model:\nX_vars = ['percentage_gelezen_mails', 'geslacht', 'leeftijd', 'maanden_lid', 'kanaal_instroom', 'actie_instroom',\n          'contact_vorm']\n# The variable we wanna explain:\ny = 'tweede_merk_keuze_stl_spelers'\n# Get train/test datasets\nX_train, X_test, y_train, y_test = getting_data.get_train_test(y, X_vars, divided_by_max=False, scale_data=False,\n                                                               add_random_int=False, add_random_cont=False, set_seed=2,\n                                                               size=subset_size, test_size=0.25, random_state=12,\n                                                               with_mean=True, with_std=True)\n# Multinomial Logistic Regression Model\nmodel = Models(X_train, y_train)\nmodel_mvl = model.multivariate_logistic_regression()\n\n# Get the accuracy of the model\nevalueren_model = EvaluateModels(X_train, X_test, y_train, y_test)\nevalueren_model.accuracy_models([model_mvl])\n\n# Visualize the probabilities of the model ##SELECTIE Gaat mis als data geschaald is\nevalueren_model.visualize_probabilities_mvlogit(model_mvl, selection='', bin_size=0.01).show()\n\n# We can also make selections to visualize, reminder that you need to have scale_data=False in get_train_test,\n# or else you have a hard time making selections Visualize only for males that did not contact with mailing:\n\n# Visualize only for males that did not contact with mailing:\nevalueren_model.visualize_probabilities_mvlogit(model_mvl, selection='geslacht_Man == 1 & contact_vorm_mailen == 0',\n                                                bin_size=0.01).show()\n# Or the opposite (you can see the difference for ld):\nevalueren_model.visualize_probabilities_mvlogit(model_mvl, selection='geslacht_Man == 0 & contact_vorm_mailen == 1',\n                                                bin_size=0.01).show()\n\n# Visualize the impact of each variable on a brand, merken_x_as=True gives the brands on the x_as, False the y_as\nevalueren_model.determine_drivers_mvlogit(model_mvl, merken_x_as=False).show()\n```\n\n\n## 3. Usage Decision tree / beslisboom\n```python\nfrom bixai.generate_example_data import GenerateData\nfrom bixai.make_html import CreateHTML\nimport time\n\n# Generate some sample data\nexample_data = GenerateData(10000)\ndf_example = example_data.generate_dataset()\n\n# Input for the tree\nvariables_ = ['leeftijd', 'geslacht', 'kanaal_instroom']  # The variables we want in the tree\nreorder = True  # False als de volgorde moet zijn zoals in variables_, anders op meest impactvolle split op gini/mean\ny = 'churn'  # de veriabelen waarvan de mean telkens wordt berekend\nsplit_method = 'gini'  # de methode waarop gesplits kan worden (gini of mean)\nmin_records = 500  # min N waarna nog een split gemaakt wordt\nmax_integer = 5  # maximaal aantal splits bij een integer variabelen\nmax_nr_splits = 2  # behalve voor categorische variabelen\nmin_split_values = 1000  # minimale N voor een split\nnr_splits = {'leeftijd': 4}  # aantal splits per variabelen (kan overschreven worden door splits)\nsplits = {'leeftijd': [20,25,40,60]}  # op welke waarde een split\ncolor_reverse = True  # omkering kleuren. bij True, rood laag, blauw hoog\nname_all = 'Alle spelers'  # De naam die bij het eerste bolletje staat\n\n# Create the actual HTML file\ncreate_html = CreateHTML(df_example, variables_, y, split_method=split_method, min_records=min_records,\n                         max_integer=max_integer, max_nr_splits=max_nr_splits, min_split_values=min_split_values,\n                         nr_splits=nr_splits, splits=splits, color_reverse=color_reverse, name_all=name_all,\n                         reorder=reorder)\nstart = time.process_time()\n\n# Input for the created HTML filel\noutput_file = 'beslisboom_voorbeeld.html'  # name you wanna give it (has to end with .html)\ntitle = 'Super Insights'  # The title on top of the html\nexplanation= 'One Planet, Plant it:</br> <span class=\"emoji\">&#128514;</span>' # Text for in the explanation box\nmade_by = 'Een toppertje van BI'  # Made by in the left corner of the file\ncreate_html.build_HTML(output_file=output_file, title=title, explanation=explanation, made_by=made_by)\nprint(time.process_time() - start)\n```\n\n## 4. Usage Time-series forecasting with regressions and random forest\n\n```python\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom bixai.forecasting_models import ForecastingModels, check_variables_to_add\nimport ssl\nimport plotly.io as pio\npio.renderers.default = \"browser\"\n\n# Get some example data (you might need to run ssl._create_default_https_context = ssl._create_unverified_context:\nurl = 'https://raw.githubusercontent.com/SimonTeg/nlodatascience/master/example_sales_data.csv'\ndf_example = pd.read_csv(url)\n# make a dataset for the historical data with the sales, and one to forecast the sales\ndf_train = df_example.iloc[:26]\ndf_forecast = df_example.iloc[26:]\n\n# The formula you want to use for the model:\nformule = 'np.log(sales) ~ jackpot + jan + apr + dec + sunday_near_drawing + event + competitor + ' \\\n          'consumer_trust + promotion'\nmodel = smf.ols(formula=formule, data=df_train)\n# if you have many variables you can use this to check what it would do to the model if you add them:\n# variablesadd_df = check_variables_to_add(model, df_train)\n\n# Create an object to analyse our model and forecast\nforecasting_sales = ForecastingModels(df=df_train, df_forecast=df_forecast)\n\n# Analyse our corrent model with actual vs fit:\nforecasting_sales.actual_vs_fit_ols_graph('maand_jaar', formule).show()\n# Explaining the error of the OLS model with a random forest:\nforecasting_sales.actual_vs_fit_graph_rf('sales', 'maand_jaar', formule).show()\n# Show the fit of the OLS model and the random forest together:\nforecasting_sales.actual_vs_fit_graph_ols_and_rf('sales', 'maand_jaar', formule).show()\n# Show the decomposition of both the OLS and the contribution of the random forest:\nforecasting_sales.decomposition_graph_ols_rf('sales', 'maand_jaar', formule, color_kpi='deepskyblue')\n\n# Make a forcast for a few moments (test_list) and evaluate:\nforecasting_sales.forecast_drawings_ols_randomforest_oos(formule, 'maand_jaar', 'sales',\n                                                         'maand_jaar', test_list=['10-2021', '11-2021', '12-2021'],\n                                                         random_forest_forecast=True)\n\n# Forecast each 'drawing' (out of sample or not) to see how the current model works:\nforecasting_sales.plot_all_drawing_predictions(formule, 'sales', 'maand_jaar', out_of_sample=True)\n\n# Forecast with new data and use the trained models with historical data:\nforecasting_sales.forecast(formule=formule, date='maand_jaar', te_voorspellen='sales', show_graph=True, get_data=True,\n                           random_forest_forecast=True, max_features=6, n_estimators=500)\n\n# Only get the data from the above graph:\nforecast_df = forecasting_sales.forecast(formule=formule, date='maand_jaar', te_voorspellen='sales', show_graph=False\n                                         , get_data=True, random_forest_forecast=True, max_features=6, n_estimators=500)\n```\n\n\n## 5. Saving and loading your models\n```python\nimport joblib\nfrom bixai.generate_example_data import GenerateData\nfrom bixai.creating_dataset import CreatingDataSet\nfrom bixai.ml_models import Models, save_model\n\n# Generate data\nexample_data = GenerateData(10000)\ndf_example = example_data.generate_dataset()\n\n# Select what and how much data we wanna use\ngetting_data = CreatingDataSet(df_example, {})\n# Selection of variables we wanna use in the model:\nX_vars = ['percentage_gelezen_mails', 'geslacht', 'leeftijd', 'maanden_lid', 'kanaal_instroom', 'actie_instroom',\n          'contact_vorm']\n# The variable we wanna explain:\ny = 'churn'\n# Get train/test datasets\nX_train, X_test, y_train, y_test = getting_data.get_train_test(y, X_vars, divided_by_max=False, scale_data=False)\n\n# Multinomial Logistic Regression Model\nmodel = Models(X_train, y_train)\nmodel_logistic = model.logistic_regression()\nmodel_xgb_c = model.xgboost_classifier()\nmodel_rf = model.random_forest_classifier()\n\n# Save models (you can test all models we use above, even MVL)\nmodel_ = model_logistic\nfilename = 'model_logistic'\nopmerking = 'As D. Trump might call it: The greatest model ever made'\ngemaakt_door = 'BI toppertje'\n\nsave_model(model=model_, filename=filename, opmerking=opmerking, gemaakt_door=gemaakt_door, data_used=X_train,\n           N_rows_data=15, save_estimates=True)\n\nloaded_model = joblib.load(filename + '.joblib')\nloaded_model.predict(X_test)\nloaded_model.predict_proba(X_test)\n``` \n\n## License\n\nCopyright (c) 2023 Rumiko\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bixai",
    "package_url": "https://pypi.org/project/bixai/",
    "platform": null,
    "project_url": "https://pypi.org/project/bixai/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/bixai/0.2.5/",
    "requires_dist": [
      "pandas",
      "scipy",
      "plotly",
      "statsmodels",
      "tqdm",
      "xgboost",
      "scikit-learn",
      "requests",
      "joblib"
    ],
    "requires_python": "",
    "summary": "Package that makes it a bit easier to understand some complex models and helps you visualize them",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17523755,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406b33de62f78b6e36261eafbb38ef4de555ed7f3d1c17b7d65252882d294113",
          "md5": "8e1a11766138f3196fe85a541fe646a4",
          "sha256": "7d9570ecdedc2861ff958de68e4135e6dc8afa4a337293510e0546b834a089be"
        },
        "downloads": -1,
        "filename": "bixai-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e1a11766138f3196fe85a541fe646a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1940,
        "upload_time": "2023-02-26T09:46:20",
        "upload_time_iso_8601": "2023-02-26T09:46:20.986010Z",
        "url": "https://files.pythonhosted.org/packages/40/6b/33de62f78b6e36261eafbb38ef4de555ed7f3d1c17b7d65252882d294113/bixai-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26cdceb9fb848c186bf775e09620f7a2433d0f6a16ab061a2ed22142a4d4a691",
          "md5": "ccd9a7aca876d0c90d9bef132013f1cc",
          "sha256": "8f32af085483dbb2b12375998b54eaf8310ba1650d9088553762f0e15e44da17"
        },
        "downloads": -1,
        "filename": "bixai-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccd9a7aca876d0c90d9bef132013f1cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2296,
        "upload_time": "2023-02-26T16:36:47",
        "upload_time_iso_8601": "2023-02-26T16:36:47.621569Z",
        "url": "https://files.pythonhosted.org/packages/26/cd/ceb9fb848c186bf775e09620f7a2433d0f6a16ab061a2ed22142a4d4a691/bixai-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c8a789af7df727264a6286606457862a1745b0b3aef716a4004603363309500",
          "md5": "2039009ddaecdf356ca6c04c07431255",
          "sha256": "46c7ed7f5fb2a7c030925a7d0a2c02019a244fc0a9083db6415fd1027e25dda6"
        },
        "downloads": -1,
        "filename": "bixai-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2039009ddaecdf356ca6c04c07431255",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4390,
        "upload_time": "2023-02-26T16:41:19",
        "upload_time_iso_8601": "2023-02-26T16:41:19.919705Z",
        "url": "https://files.pythonhosted.org/packages/6c/8a/789af7df727264a6286606457862a1745b0b3aef716a4004603363309500/bixai-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "353bf3f01ccf5b4ec4decebf1e76817b67ba08126d6460d5445d632998dc8e0b",
          "md5": "304a93e17d46ec41cfc5e8cdcb9bbab8",
          "sha256": "f442583d1e7681008b036143f18b033ade32b28b51643fcc045597ed011f71a5"
        },
        "downloads": -1,
        "filename": "bixai-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "304a93e17d46ec41cfc5e8cdcb9bbab8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25958,
        "upload_time": "2023-02-26T18:54:56",
        "upload_time_iso_8601": "2023-02-26T18:54:56.743470Z",
        "url": "https://files.pythonhosted.org/packages/35/3b/f3f01ccf5b4ec4decebf1e76817b67ba08126d6460d5445d632998dc8e0b/bixai-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b07ca492d9fdd76868a4cdc2cbada38bab882e83e71c83ff248c90b98c4e935",
          "md5": "b004f5a544f094418b4b2208288ef2d8",
          "sha256": "60469d3aa363e27e5fba2b31b0ecd6ce85d3b80848c3128ec69f36d24f8116f0"
        },
        "downloads": -1,
        "filename": "bixai-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b004f5a544f094418b4b2208288ef2d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26750,
        "upload_time": "2023-02-26T19:06:41",
        "upload_time_iso_8601": "2023-02-26T19:06:41.309653Z",
        "url": "https://files.pythonhosted.org/packages/2b/07/ca492d9fdd76868a4cdc2cbada38bab882e83e71c83ff248c90b98c4e935/bixai-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300544f5683e77dbfa9c46fd933c3bc1fbe19f6907996f1812e3a37a59c01e17",
          "md5": "a179a4cb56c4162026dec529b6d7dcb0",
          "sha256": "c657188e6fce161b1433939622ab3a9f22a22e3ea016af2fa57f0f44834b593b"
        },
        "downloads": -1,
        "filename": "bixai-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a179a4cb56c4162026dec529b6d7dcb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26936,
        "upload_time": "2023-02-26T19:13:59",
        "upload_time_iso_8601": "2023-02-26T19:13:59.804217Z",
        "url": "https://files.pythonhosted.org/packages/30/05/44f5683e77dbfa9c46fd933c3bc1fbe19f6907996f1812e3a37a59c01e17/bixai-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1708f23fe7adee3ea159b13be4b4e97f5a40fe2dc61d77e9b02d2a428f396f0",
          "md5": "2955a7567e9020c3e3c028813b0c25c9",
          "sha256": "93180fbe9eefd771f82898fdaec960709e46cca5bec663f48b9239ab338a43d6"
        },
        "downloads": -1,
        "filename": "bixai-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2955a7567e9020c3e3c028813b0c25c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27271,
        "upload_time": "2023-02-26T19:21:14",
        "upload_time_iso_8601": "2023-02-26T19:21:14.283463Z",
        "url": "https://files.pythonhosted.org/packages/d1/70/8f23fe7adee3ea159b13be4b4e97f5a40fe2dc61d77e9b02d2a428f396f0/bixai-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0209a7e997d1aa7227a2d7580fcef6d35ed2b744e1064e0fdb809df2ad502bdc",
          "md5": "c9f63c29c8d16e90e95f61daff7507a4",
          "sha256": "9c00836b89c91465e5f23b196cd7408186c28b37882c7cac238ef1be902355f5"
        },
        "downloads": -1,
        "filename": "bixai-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9f63c29c8d16e90e95f61daff7507a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27620,
        "upload_time": "2023-02-27T09:37:15",
        "upload_time_iso_8601": "2023-02-27T09:37:15.731605Z",
        "url": "https://files.pythonhosted.org/packages/02/09/a7e997d1aa7227a2d7580fcef6d35ed2b744e1064e0fdb809df2ad502bdc/bixai-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c764393e640a7469ce972c76d1836e7a5096531ba2ab434dfd9d1b877b16cdb3",
          "md5": "c96fa8d599a4a87a3db5be1ffc02a17d",
          "sha256": "c4ed7100241ac98eadac0899dd850187e0b30b324e46980d763471d9b2d6be3c"
        },
        "downloads": -1,
        "filename": "bixai-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c96fa8d599a4a87a3db5be1ffc02a17d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28395,
        "upload_time": "2023-03-01T10:34:42",
        "upload_time_iso_8601": "2023-03-01T10:34:42.165588Z",
        "url": "https://files.pythonhosted.org/packages/c7/64/393e640a7469ce972c76d1836e7a5096531ba2ab434dfd9d1b877b16cdb3/bixai-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0add3da667bcff9f89055c111accf72b4fdd01a330542614b7bcc670064937f",
          "md5": "17ac2c19dcadffe56243e51adce699e6",
          "sha256": "b64471e82333bc13b0e497932e7caa4330aa7e5f013dcd68387881531e782ad3"
        },
        "downloads": -1,
        "filename": "bixai-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17ac2c19dcadffe56243e51adce699e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28378,
        "upload_time": "2023-03-01T10:38:24",
        "upload_time_iso_8601": "2023-03-01T10:38:24.049157Z",
        "url": "https://files.pythonhosted.org/packages/e0/ad/d3da667bcff9f89055c111accf72b4fdd01a330542614b7bcc670064937f/bixai-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab924a76771629885836d14b61195714dac83433a8ef54154101c787212b53a",
          "md5": "7a72eacbe5b17a4e92f6247180a3a239",
          "sha256": "59098f16639847b2a6c3ecf688699f94e085c55b9d02fc8bc881071cfc6ef43d"
        },
        "downloads": -1,
        "filename": "bixai-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a72eacbe5b17a4e92f6247180a3a239",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29440,
        "upload_time": "2023-03-02T12:15:06",
        "upload_time_iso_8601": "2023-03-02T12:15:06.626982Z",
        "url": "https://files.pythonhosted.org/packages/0a/b9/24a76771629885836d14b61195714dac83433a8ef54154101c787212b53a/bixai-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b716188a3c6762baf9b8f3eb256d6e6c74f475ccf30396521d99685ede29f3e",
          "md5": "cd7f0c7efa8f7fdba92ae263c67afb42",
          "sha256": "f8d06fb5ce4c7c497098a430b09496d95839915e8e95fa07c7a52ab6e6fe8280"
        },
        "downloads": -1,
        "filename": "bixai-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd7f0c7efa8f7fdba92ae263c67afb42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29525,
        "upload_time": "2023-03-03T14:58:04",
        "upload_time_iso_8601": "2023-03-03T14:58:04.216486Z",
        "url": "https://files.pythonhosted.org/packages/2b/71/6188a3c6762baf9b8f3eb256d6e6c74f475ccf30396521d99685ede29f3e/bixai-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3050eb6718bc070c1196e08f125ea6a9eab6c998cef30c9c73dbd0d09458821",
          "md5": "d5d7f8bf0072bda64611e22957747ab1",
          "sha256": "c88fe6ad3d47d8c5a38f16ac73c904a9015c1a0f97951f2608e1077fff566266"
        },
        "downloads": -1,
        "filename": "bixai-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5d7f8bf0072bda64611e22957747ab1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29537,
        "upload_time": "2023-03-06T13:15:49",
        "upload_time_iso_8601": "2023-03-06T13:15:49.707747Z",
        "url": "https://files.pythonhosted.org/packages/a3/05/0eb6718bc070c1196e08f125ea6a9eab6c998cef30c9c73dbd0d09458821/bixai-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5301cac045d8797063072cb018e285f47c7d57c87a7fd19b002711319429c8e2",
          "md5": "afcbe454525bd1fc38bc8f7cef914276",
          "sha256": "9791cbb9da0b3002d3e0d1f61e1ca26dd200e79e1de4b4ad0e4659899aeff3a3"
        },
        "downloads": -1,
        "filename": "bixai-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afcbe454525bd1fc38bc8f7cef914276",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30888,
        "upload_time": "2023-03-31T08:25:50",
        "upload_time_iso_8601": "2023-03-31T08:25:50.777879Z",
        "url": "https://files.pythonhosted.org/packages/53/01/cac045d8797063072cb018e285f47c7d57c87a7fd19b002711319429c8e2/bixai-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5301cac045d8797063072cb018e285f47c7d57c87a7fd19b002711319429c8e2",
        "md5": "afcbe454525bd1fc38bc8f7cef914276",
        "sha256": "9791cbb9da0b3002d3e0d1f61e1ca26dd200e79e1de4b4ad0e4659899aeff3a3"
      },
      "downloads": -1,
      "filename": "bixai-0.2.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afcbe454525bd1fc38bc8f7cef914276",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30888,
      "upload_time": "2023-03-31T08:25:50",
      "upload_time_iso_8601": "2023-03-31T08:25:50.777879Z",
      "url": "https://files.pythonhosted.org/packages/53/01/cac045d8797063072cb018e285f47c7d57c87a7fd19b002711319429c8e2/bixai-0.2.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}