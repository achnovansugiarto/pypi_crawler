{
  "info": {
    "author": "Kyle Harrington, Jan Philipp Albrecht, Deborah Schmidt",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "# Album plugin for distributed calls \nThis is an early version of enhancing album with calls for batch and distributed processing.\n\n## Installation\n1. [install Album](https://docs.album.solutions/en/latest/installation-instructions.html#)\n2. Activate the album environment:\n```\nconda activate album\n```\n3. Install this plugin:\n```\npip install https://gitlab.com/album-app/plugins/album-distributed/-/archive/main/album-distributed-main.zip\n```\n\n## Usage\nFist, install a solution - replace `solution.py` with the path to your solution / solution folder or with the `group:name:version` coordinates of your solution.\n```\nalbum install solution.py\n```\nNow you can use the plugin:\n```\nalbum run-distributed solution.py\n```\nThe plugin does two things:\n1. It figures out if the input arguments match multiple tasks - in this case, it generates the different task arguments.\n2. It runs all matching tasks, the mode for running these tasks can be chosen.  \n\nSince the matching part can be tricky, please use the `--dry-run` argument to first print a list of matched tasks:\n```\nalbum run-distributed solution.py --dry-run\n```\n\nOn Windows, replace the slashes with backslashes in the examples on this page. \n\nPlease let us know if you run into issues.\n\n## Matching input arguments\nTo generate multiple tasks, patterns in file name arguments can be used to match multiple files.\n\n### Using patterns in a single argument\n\nYou should be able to use all [`glob`](https://docs.python.org/3/library/glob.html) features when using it in a single argument. Here are some examples:\n\nIn the following scenarios `solution.py` has an argument called `input_data`.\n\nMatch all `.tif` files in the current folder:\n```\nalbum run-distributed solution.py --input_data *.tif\n```\n\nMatch all `.tif` files in a specific folder where the file name starts with `input`:\n```\nalbum run-distributed solution.py --input_data /data/input*.tif\n```\n\nMatch all `.tif` files recursively, starting from the current folder:\n```\nalbum run-distributed solution.py --input_data **/*.tif\n```\n\n### Using patterns in multiple arguments\n\nWhen using patterns in multiple arguments, this plugin will try to figure out the corresponding argument values based on which of the patterns match with existing files.\nThis is likely to fail in a bunch of situations - please use the `--dry-run` argument to test if the matched tasks correspond with your expectation.\n\nIn the following scenarios `solution.py` has two arguments called `input_data` and `output_data`.\n\nUse all `.tif` files in the current folder and append `_out` to the file name for the output argument.\n```\nalbum run-distributed solution.py --input_data *.tif --output_data *_out.tif\n```\n\nDo the same thing recursively:\n```\nalbum run-distributed solution.py --input_data **/*.tif --output_data **/*_out.tif\n```\n\nLet the output argument values live in a different folder:\n```\nalbum run-distributed solution.py --input_data *.tif --output_data output/*.tif\n```\n\nSince Album does not yet distinguish between input and output arguments, be aware that if the `output_data` argument in these scenarios matches existing files, the plugin will also try to generate corresponding `input_file` values. We will work on improving this.\n\n## Modes\nYou can set the mode by using the `--mode` argument:\n```\nalbum run-distributed solution.py --mode queue\n```\nBy default, the plugin will use the `basic` mode.\n\n### Basic\nIn this mode, all tasks will be performed one after each other. The console output of each task will be printed.\n### Queue\nIn this mode, a set of thread workers will be created to process tasks in parallel. The console output of each task will not be printed.\nYou can control how many threads should be created with the `--threads` argument:\n```\nalbum run-distributed solution.py --mode queue --threads 16\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/album-app/plugins/album-run-distributed",
    "keywords": "virtual,environments,imaging,data analysis",
    "license": "MIT",
    "maintainer": "Kyle Harrington, Jan Philipp Albrecht, Deborah Schmidt",
    "maintainer_email": "album@kyleharrington.com",
    "name": "album-distributed",
    "package_url": "https://pypi.org/project/album-distributed/",
    "platform": "any",
    "project_url": "https://pypi.org/project/album-distributed/",
    "project_urls": {
      "Homepage": "https://gitlab.com/album-app/plugins/album-run-distributed",
      "Source": "https://gitlab.com/album-app/plugins/album-distributed",
      "Tracker": "https://gitlab.com/album-app/plugins/album-distributed/issues"
    },
    "release_url": "https://pypi.org/project/album-distributed/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "album plugin for running a solution repeatedly and distributed",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14012536,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f517c4a6b33e644eb133d08f8aefcac781ba335d8f220dee0e4b87e8609bbb6",
          "md5": "5df1dfd4103c3c3638da6bba46ff0fb7",
          "sha256": "e70645d7d5d08ac60971bb11c2baf6b7127cd8221927054e7d9cb6c34f461010"
        },
        "downloads": -1,
        "filename": "album-distributed-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5df1dfd4103c3c3638da6bba46ff0fb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10031,
        "upload_time": "2022-06-02T13:51:01",
        "upload_time_iso_8601": "2022-06-02T13:51:01.865479Z",
        "url": "https://files.pythonhosted.org/packages/9f/51/7c4a6b33e644eb133d08f8aefcac781ba335d8f220dee0e4b87e8609bbb6/album-distributed-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f517c4a6b33e644eb133d08f8aefcac781ba335d8f220dee0e4b87e8609bbb6",
        "md5": "5df1dfd4103c3c3638da6bba46ff0fb7",
        "sha256": "e70645d7d5d08ac60971bb11c2baf6b7127cd8221927054e7d9cb6c34f461010"
      },
      "downloads": -1,
      "filename": "album-distributed-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5df1dfd4103c3c3638da6bba46ff0fb7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10031,
      "upload_time": "2022-06-02T13:51:01",
      "upload_time_iso_8601": "2022-06-02T13:51:01.865479Z",
      "url": "https://files.pythonhosted.org/packages/9f/51/7c4a6b33e644eb133d08f8aefcac781ba335d8f220dee0e4b87e8609bbb6/album-distributed-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}