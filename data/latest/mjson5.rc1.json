{
  "info": {
    "author": "Dirk Pranke",
    "author_email": "leeheisen@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pyjson5\n\nA Python implementation of the JSON5 data format.\n\n[JSON5](https://json5.org) extends the\n[JSON](http://www.json.org) data interchange format to make it\nslightly more usable as a configuration language:\n\n* JavaScript-style comments (both single and multi-line) are legal.\n\n* Object keys may be unquoted if they are legal ECMAScript identifiers\n\n* Objects and arrays may end with trailing commas.\n\n* Strings can be single-quoted, and multi-line string literals are allowed.\n\nThere are a few other more minor extensions to JSON; see the above page for\nthe full details.\n\nThis project implements a reader and writer implementation for Python;\nwhere possible, it mirrors the\n[standard Python JSON API](https://docs.python.org/library/json.html)\npackage for ease of use.\n\nThere is one notable difference from the JSON api: the `load()` and\n`loads()` methods support optionally checking for (and rejecting) duplicate\nobject keys; pass `allow_duplicate_keys=False` to do so (duplicates are\nallowed by default).\n\nThis is an early release. It has been reasonably well-tested, but it is\n**SLOW**. It can be 1000-6000x slower than the C-optimized JSON module,\nand is 200x slower (or more) than the pure Python JSON module.\n\n**Please Note:** This library only handles JSON5 documents, it does not\nallow you to read arbitrary JavaScript. For example, bare integers can\nbe legal object keys in JavaScript, but they aren't in JSON5.\n\n## Known issues\n\n* Did I mention that it is **SLOW**?\n\n* The implementation follows Python3's `json` implementation where\n  possible. This means that the `encoding` method to `dump()` is\n  ignored, and unicode strings are always returned.\n\n* The `cls` keyword argument that `json.load()`/`json.loads()` accepts\n  to specify a custom subclass of ``JSONDecoder`` is not and will not be\n  supported, because this implementation uses a completely different\n  approach to parsing strings and doesn't have anything like the\n  `JSONDecoder` class.\n\n* The `cls` keyword argument that `json.dump()`/`json.dumps()` accepts\n  is also not supported, for consistency with `json5.load()`. The `default`\n  keyword *is* supported, though, and might be able to serve as a\n  workaround.\n\n## Running the tests\nTo run the tests, setup a venv and install the required dependencies with\n`pip install -e '.[dev]'`, then run the tests with `python setup.py test`.\n\n\n## Version History / Release Notes\n\n* v0.9.13 (2023-03-16)\n    * [GitHub PR #64](https://github.com/dpranke/pyjson5/pull/64)\n      Remove a field from one of the JSON benchmark files to\n      reduce confusion in Chromium.\n    * No code changes.\n* v0.9.12 (2023-01-02)\n    * Fix GitHub Actions config file to no longer test against\n      Python 3.6 or 3.7. For now we will only test against an\n      \"oldest\" release (3.8 in this case) and a \"current\"\n      release (3.11 in this case).\n* v0.9.11 (2023-01-02)\n    * [GitHub issue #60](https://github.com/dpranke/pyjson5/issues/60)\n      Fixed minor Python2 compatibility issue by referring to\n      `float(\"inf\")` instead of `math.inf`.\n* v0.9.10 (2022-08-18)\n    * [GitHub issue #58](https://github.com/dpranke/pyjson5/issues/58)\n      Updated the //README.md to be clear that parsing arbitrary JS\n      code may not work.\n    * Otherwise, no code changes.\n* v0.9.9 (2022-08-01)\n    * [GitHub issue #57](https://github.com/dpranke/pyjson5/issues/57)\n      Fixed serialization for objects that subclass `int` or `float`:\n      Previously we would use the objects __str__ implementation, but\n      that might result in an illegal JSON5 value if the object had\n      customized __str__ to return something illegal. Instead,\n      we follow the lead of the `JSON` module and call `int.__repr__`\n      or `float.__repr__` directly.\n    * While I was at it, I added tests for dumps(-inf) and dumps(nan)\n      when those were supposed to be disallowed by `allow_nan=False`.\n* v0.9.8 (2022-05-08)\n    * [GitHub issue #47](https://github.com/dpranke/pyjson5/issues/47)\n      Fixed error reporting in some cases due to how parsing was handling\n      nested rules in the grammar - previously the reported location for\n      the error could be far away from the point where it actually happened.\n\n* v0.9.7 (2022-05-06)\n    * [GitHub issue #52](https://github.com/dpranke/pyjson5/issues/52)\n      Fixed behavior of `default` fn in `dump` and `dumps`. Previously\n      we didn't require the function to return a string, and so we could\n      end up returning something that wasn't actually valid. This change\n      now matches the behavior in the `json` module. *Note: This is a\n      potentially breaking change.*\n* v0.9.6 (2021-06-21)\n    * Bump development status classifier to 5 - Production/Stable, which\n      the library feels like it is at this point. If I do end up significantly\n      reworking things to speed it up and/or to add round-trip editing,\n      that'll likely be a 2.0. If this version has no reported issues,\n      I'll likely promote it to 1.0.\n    * Also bump the tested Python versions to 2.7, 3.8 and 3.9, though\n      earlier Python3 versions will likely continue to work as well.\n    * [GitHub issue #46](https://github.com/dpranke/pyjson5/issues/36)\n      Fix incorrect serialization of custom subtypes\n    * Make it possible to run the tests if `hypothesis` isn't installed.\n\n* v0.9.5 (2020-05-26)\n    * Miscellaneous non-source cleanups in the repo, including setting\n      up GitHub Actions for a CI system. No changes to the library from\n      v0.9.4, other than updating the version.\n\n* v0.9.4 (2020-03-26)\n    * [GitHub pull #38](https://github.com/dpranke/pyjson5/pull/38)\n      Fix from fredrik@fornwall.net for dumps() crashing when passed\n      an empty string as a key in an object.\n\n* v0.9.3 (2020-03-17)\n    * [GitHub pull #35](https://github.com/dpranke/pyjson5/pull/35)\n      Fix from pastelmind@ for dump() not passing the right args to dumps().\n    * Fix from p.skouzos@novafutur.com to remove the tests directory from\n      the setup call, making the package a bit smaller.\n\n* v0.9.2 (2020-03-02)\n    * [GitHub pull #34](https://github.com/dpranke/pyjson5/pull/34)\n      Fix from roosephu@ for a badly formatted nested list.\n\n* v0.9.1 (2020-02-09)\n    * [GitHub issue #33](https://github.com/dpranke/pyjson5/issues/33):\n       Fix stray trailing comma when dumping an object with an invalid key.\n\n* v0.9.0 (2020-01-30)\n    * [GitHub issue #29](https://github.com/dpranke/pyjson5/issues/29):\n       Fix an issue where objects keys that started with a reserved\n       word were incorrectly quoted.\n    * [GitHub issue #30](https://github.com/dpranke/pyjson5/issues/30):\n       Fix an issue where dumps() incorrectly thought a data structure\n       was cyclic in some cases.\n    * [GitHub issue #32](https://github.com/dpranke/pyjson5/issues/32):\n       Allow for non-string keys in dicts passed to ``dump()``/``dumps()``.\n       Add an ``allow_duplicate_keys=False`` to prevent possible\n       ill-formed JSON that might result.\n\n* v0.8.5 (2019-07-04)\n    * [GitHub issue #25](https://github.com/dpranke/pyjson5/issues/25):\n      Add LICENSE and README.md to the dist.\n    * [GitHub issue #26](https://github.com/dpranke/pyjson5/issues/26):\n      Fix printing of empty arrays and objects with indentation, fix\n      misreporting of the position on parse failures in some cases.\n\n* v0.8.4 (2019-06-11)\n    * Updated the version history, too.\n\n* v0.8.3 (2019-06-11)\n    * Tweaked the README, bumped the version, forgot to update the version\n      history :).\n\n* v0.8.2 (2019-06-11)\n    * Actually bump the version properly, to 0.8.2.\n\n* v0.8.1 (2019-06-11)\n    * Fix bug in setup.py that messed up the description. Unfortunately,\n      I forgot to bump the version for this, so this also identifies as 0.8.0.\n\n* v0.8.0 (2019-06-11)\n    * Add `allow_duplicate_keys=True` as a default argument to\n      `json5.load()`/`json5.loads()`. If you set the key to `False`, duplicate\n      keys in a single dict will be rejected. The default is set to `True`\n      for compatibility with `json.load()`, earlier versions of json5, and\n      because it's simply not clear if people would want duplicate checking\n      enabled by default.\n\n* v0.7 (2019-03-31)\n    * Changes dump()/dumps() to not quote object keys by default if they are\n      legal identifiers. Passing `quote_keys=True` will turn that off\n      and always quote object keys.\n    * Changes dump()/dumps() to insert trailing commas after the last item\n      in an array or an object if the object is printed across multiple lines\n      (i.e., if `indent` is not None). Passing `trailing_commas=False` will\n      turn that off.\n    * The `json5.tool` command line tool now supports the `--indent`,\n      `--[no-]quote-keys`, and `--[no-]trailing-commas` flags to allow\n      for more control over the output, in addition to the existing\n      `--as-json` flag.\n    * The `json5.tool` command line tool no longer supports reading from\n      multiple files, you can now only read from a single file or\n      from standard input.\n    * The implementation no longer relies on the standard `json` module\n      for anything. The output should still match the json module (except\n      as noted above) and discrepancies should be reported as bugs.\n\n* v0.6.2 (2019-03-08)\n    * Fix [GitHub issue #23](https://github.com/dpranke/pyjson5/issues/23) and\n      pass through unrecognized escape sequences.\n\n* v0.6.1 (2018-05-22)\n    * Cleaned up a couple minor nits in the package.\n\n* v0.6.0 (2017-11-28)\n    * First implementation that attempted to implement 100% of the spec.\n\n* v0.5.0 (2017-09-04)\n    * First implementation that supported the full set of kwargs that\n      the `json` module supports.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leeHeisen/mjson5.git",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mjson5",
    "package_url": "https://pypi.org/project/mjson5/",
    "platform": null,
    "project_url": "https://pypi.org/project/mjson5/",
    "project_urls": {
      "Homepage": "https://github.com/leeHeisen/mjson5.git"
    },
    "release_url": "https://pypi.org/project/mjson5/0.9.13.2/",
    "requires_dist": [
      "hypothesis ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A Python implementation of the JSON5 data format.",
    "version": "0.9.13.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17441790,
  "releases": {
    "0.9.13.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b79bcbfb1a76d31d827a2b549a302defdd09f509c8c1dba917c8ea3dfa1f0094",
          "md5": "e5f4aad76811c81dad9758fe8931db48",
          "sha256": "3b083caa19eb878b6b5fd0b89b65bdd2b2143ce2381bd285f40c6e989d9d7511"
        },
        "downloads": -1,
        "filename": "mjson5-0.9.13.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5f4aad76811c81dad9758fe8931db48",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19542,
        "upload_time": "2023-03-23T10:21:52",
        "upload_time_iso_8601": "2023-03-23T10:21:52.843503Z",
        "url": "https://files.pythonhosted.org/packages/b7/9b/cbfb1a76d31d827a2b549a302defdd09f509c8c1dba917c8ea3dfa1f0094/mjson5-0.9.13.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b6df75f3373ce9186f545fd9d63c8c707654a585b317a9db1ca9dfada55382",
          "md5": "9af7d2791d1de1a4b3f046ddcae420d9",
          "sha256": "f51c99d0559e8f4f9fd78cc35e39737108a34403e9cf94ace0493b30c4b96449"
        },
        "downloads": -1,
        "filename": "mjson5-0.9.13.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9af7d2791d1de1a4b3f046ddcae420d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24662,
        "upload_time": "2023-03-23T10:21:54",
        "upload_time_iso_8601": "2023-03-23T10:21:54.344366Z",
        "url": "https://files.pythonhosted.org/packages/b7/b6/df75f3373ce9186f545fd9d63c8c707654a585b317a9db1ca9dfada55382/mjson5-0.9.13.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b79bcbfb1a76d31d827a2b549a302defdd09f509c8c1dba917c8ea3dfa1f0094",
        "md5": "e5f4aad76811c81dad9758fe8931db48",
        "sha256": "3b083caa19eb878b6b5fd0b89b65bdd2b2143ce2381bd285f40c6e989d9d7511"
      },
      "downloads": -1,
      "filename": "mjson5-0.9.13.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e5f4aad76811c81dad9758fe8931db48",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19542,
      "upload_time": "2023-03-23T10:21:52",
      "upload_time_iso_8601": "2023-03-23T10:21:52.843503Z",
      "url": "https://files.pythonhosted.org/packages/b7/9b/cbfb1a76d31d827a2b549a302defdd09f509c8c1dba917c8ea3dfa1f0094/mjson5-0.9.13.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7b6df75f3373ce9186f545fd9d63c8c707654a585b317a9db1ca9dfada55382",
        "md5": "9af7d2791d1de1a4b3f046ddcae420d9",
        "sha256": "f51c99d0559e8f4f9fd78cc35e39737108a34403e9cf94ace0493b30c4b96449"
      },
      "downloads": -1,
      "filename": "mjson5-0.9.13.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9af7d2791d1de1a4b3f046ddcae420d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24662,
      "upload_time": "2023-03-23T10:21:54",
      "upload_time_iso_8601": "2023-03-23T10:21:54.344366Z",
      "url": "https://files.pythonhosted.org/packages/b7/b6/df75f3373ce9186f545fd9d63c8c707654a585b317a9db1ca9dfada55382/mjson5-0.9.13.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}