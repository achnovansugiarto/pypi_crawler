{
  "info": {
    "author": "nxtlo",
    "author_email": "dhmony-99@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# sain\nA pure Python package that implements standard Rust core types for Python.\n\n\n## Install\nYou'll need Python 3.8 or higher.\n\nPyPI\n```rs\n$ pip install sain\n```\n\n## Examples\nMore stuff in [examples](https://github.com/nxtlo/sain/tree/master/examples)\n\n### `cfg`, `cfg_attr`\nConditionally include code.\n\n```py\nfrom sain import cfg, cfg_attr\n\n@cfg_attr(target_os=\"unix\")\n# Calling this on a non-unix system will raise a RuntimeError\n# and the function will not run.\ndef run_when_unix() -> None:\n    import uvloop\n    uvloop.install()\n\nif cfg(target_arch=\"arm64\"):\n    run_when_unix()\n\n# If this returns True, Function will be in scope.\nif cfg(requires_modules=\"hikari-tanjun\"):\n    def create_client() -> tanjun.Client:\n        return tanjun.Client(...)\n\n# Assuming tanjun is not installed.\n# Calling the function will raise `NameError`\n# since its not in scope.\ncreate_client()\n```\n\n### `Option<T>` and `Some<T>`\nImplements the standard `Option` and `Some` types. An object that may be `None` or `T`.\n\n```py\nimport sain\nimport os\n\n# Stright up replace typing.Optional[str]\ndef get_token(key: str) -> sain.Option[str]:\n    # What os.getenv returns may be str or None.\n    return sain.Some(os.getenv(key))\n\n# Raises RuntimeError(\"No token found.\") if os.getenv return None.\ntoken = get_token().expect(\"No token found.\")\n\n# The classic way to handle this in Python would be.\nif token is None:\n    token = \"...\"\nelse:\n    ...\n\n# Replace this with `unwrap_or`.\n# Returning DEFAULT_TOKEN if it was None.\nenv_or_default = get_token().unwrap_or(\"DEFAULT_TOKEN\")\n\n# Safe type hint is fine.\nas_none: sain.Option[str] = sain.Some(None)\nas_none.uwnrap_or(123)  # Error: Must be type `str`!\nassert as_none.is_none()\n```\n\n### Defaults\nA protocol that types can implement which have a default value.\n\n```py\nimport sain\nimport requests\n\nclass Session(sain.Default[requests.Session]):\n    # One staticmethod must be implemented and must return the same type.\n    @staticmethod\n    def default() -> requests.Session:\n        return requests.Session()\n\nsession = Session.default()\n```\n\n### Iter\nTurns normal iterables into `Iter` type.\n\n```py\nimport sain\n\nf = sain.Iter([1,2,3])\n# or f = sain.into_iter([1,2,3])\nassert 1 in f\n\nfor item in f.take_while(lambda i: i > 1):\n    print(item)\n```\n\n### Why\nThis is whats Python missing.\n\n### Notes\nSince Rust is a compiled language, Whatever predict in `cfg` and `cfg_attr` returns False will not compile.\n\nBut there's no such thing as this in Python, So `RuntimeError` will be raised and whatever was predicated will not run.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nxtlo/sain",
    "keywords": "Rust,config",
    "license": "BSD-3-Clause license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sain",
    "package_url": "https://pypi.org/project/sain/",
    "platform": null,
    "project_url": "https://pypi.org/project/sain/",
    "project_urls": {
      "Homepage": "https://github.com/nxtlo/sain",
      "Repository": "https://github.com/nxtlo/sain"
    },
    "release_url": "https://pypi.org/project/sain/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Standard Rust core types implementations for Python.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14051343,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1daf24b1a4dbbfd5be862e8ee01f11b7afa7fd0f0400d45b319ffa338593fc4",
          "md5": "bae7c7f2a89889a24fc663c93f61dd8d",
          "sha256": "f72e42e157a987c127b5f378908f01eca99bb7db8d4dce218981a802f5c009c8"
        },
        "downloads": -1,
        "filename": "sain-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bae7c7f2a89889a24fc663c93f61dd8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 17901,
        "upload_time": "2022-06-02T02:56:48",
        "upload_time_iso_8601": "2022-06-02T02:56:48.951675Z",
        "url": "https://files.pythonhosted.org/packages/d1/da/f24b1a4dbbfd5be862e8ee01f11b7afa7fd0f0400d45b319ffa338593fc4/sain-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9193a8bfe26bcd9a66b89e7c84c72718280f09708de6299e6464c91edb7debcb",
          "md5": "71de4a05d6cfcd3edde9a1bd9991acab",
          "sha256": "cebc3c6981397758aadc0e1ed596784cc55587f0fb74e50ac492635f558dd6d1"
        },
        "downloads": -1,
        "filename": "sain-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71de4a05d6cfcd3edde9a1bd9991acab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12862,
        "upload_time": "2022-06-02T02:56:51",
        "upload_time_iso_8601": "2022-06-02T02:56:51.157137Z",
        "url": "https://files.pythonhosted.org/packages/91/93/a8bfe26bcd9a66b89e7c84c72718280f09708de6299e6464c91edb7debcb/sain-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "409896a1f94fff7da2d3cd91b443b8a84bd8c3f32387e5c469885756b75937f7",
          "md5": "a6d43eddb3bd8a96e8a56ec494058798",
          "sha256": "46a1a25b74e87bef4095e078486dd51edb81392b7ebb2fa5d905991b97d27042"
        },
        "downloads": -1,
        "filename": "sain-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6d43eddb3bd8a96e8a56ec494058798",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 18161,
        "upload_time": "2022-06-02T16:33:41",
        "upload_time_iso_8601": "2022-06-02T16:33:41.393850Z",
        "url": "https://files.pythonhosted.org/packages/40/98/96a1f94fff7da2d3cd91b443b8a84bd8c3f32387e5c469885756b75937f7/sain-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48d212581069ca1807a0ec7af0c9fca1856c4af28a9e1c82944e1ae215fb384e",
          "md5": "f6c2e02578e53b00ee01fac0e364c33e",
          "sha256": "b3b3f07004c0fd56d2aae4674a57c16009ed61bbcec30f3c9dff2298d7e8bf8c"
        },
        "downloads": -1,
        "filename": "sain-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f6c2e02578e53b00ee01fac0e364c33e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 13199,
        "upload_time": "2022-06-02T16:33:43",
        "upload_time_iso_8601": "2022-06-02T16:33:43.789365Z",
        "url": "https://files.pythonhosted.org/packages/48/d2/12581069ca1807a0ec7af0c9fca1856c4af28a9e1c82944e1ae215fb384e/sain-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e3b517b8ed0557afe6be5dde342d6439a3bd7427495adb46c889951f05ba357",
          "md5": "6581b06dfca691b6258b2a2abe1bf613",
          "sha256": "b8a344b17973f711c0e31168cba8107a46d05f9d94bc330ba89bd01795b3c9da"
        },
        "downloads": -1,
        "filename": "sain-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6581b06dfca691b6258b2a2abe1bf613",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 23081,
        "upload_time": "2022-06-07T00:14:48",
        "upload_time_iso_8601": "2022-06-07T00:14:48.651039Z",
        "url": "https://files.pythonhosted.org/packages/0e/3b/517b8ed0557afe6be5dde342d6439a3bd7427495adb46c889951f05ba357/sain-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3978561b9269e43ea526ea24253a7410ea931c67d71597476d284c87b06067b1",
          "md5": "7d3b099c2fe4ce40fef15b49d7850803",
          "sha256": "a8a77fc274319187c564350e92129e356c888988ed8d42bf7f7ff3ce46a832cf"
        },
        "downloads": -1,
        "filename": "sain-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d3b099c2fe4ce40fef15b49d7850803",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 15517,
        "upload_time": "2022-06-07T00:14:50",
        "upload_time_iso_8601": "2022-06-07T00:14:50.088888Z",
        "url": "https://files.pythonhosted.org/packages/39/78/561b9269e43ea526ea24253a7410ea931c67d71597476d284c87b06067b1/sain-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e3b517b8ed0557afe6be5dde342d6439a3bd7427495adb46c889951f05ba357",
        "md5": "6581b06dfca691b6258b2a2abe1bf613",
        "sha256": "b8a344b17973f711c0e31168cba8107a46d05f9d94bc330ba89bd01795b3c9da"
      },
      "downloads": -1,
      "filename": "sain-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6581b06dfca691b6258b2a2abe1bf613",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 23081,
      "upload_time": "2022-06-07T00:14:48",
      "upload_time_iso_8601": "2022-06-07T00:14:48.651039Z",
      "url": "https://files.pythonhosted.org/packages/0e/3b/517b8ed0557afe6be5dde342d6439a3bd7427495adb46c889951f05ba357/sain-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3978561b9269e43ea526ea24253a7410ea931c67d71597476d284c87b06067b1",
        "md5": "7d3b099c2fe4ce40fef15b49d7850803",
        "sha256": "a8a77fc274319187c564350e92129e356c888988ed8d42bf7f7ff3ce46a832cf"
      },
      "downloads": -1,
      "filename": "sain-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7d3b099c2fe4ce40fef15b49d7850803",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 15517,
      "upload_time": "2022-06-07T00:14:50",
      "upload_time_iso_8601": "2022-06-07T00:14:50.088888Z",
      "url": "https://files.pythonhosted.org/packages/39/78/561b9269e43ea526ea24253a7410ea931c67d71597476d284c87b06067b1/sain-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}