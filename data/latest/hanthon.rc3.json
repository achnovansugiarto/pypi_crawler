{
  "info": {
    "author": "flizzywine",
    "author_email": "1041958497@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n\nHanthon 汉语Python\n====================\n\n##  用汉语书写Python.\n\n汉语作为世界主要语言, 历经千年, 传承不息. 我们的祖先用它来抒发情感, 表达思想.\n\n可令人遗憾的是,  由于近代中国在计算机领域的落后, 没有任何一门主流编程语言使用汉语.\n\n本项目通过将中文代码翻译成英文,  给Python套上一层中文的\"外衣\". \n\n\n\n#  Demo\n\n## 二分搜索\n\nHanthon:\n\n```\n名 二分搜索器:\n    有 初(己):\n        云云\n\n    有 二分搜索(己, 数组, 目标, 低, 高):\n        若 低 > 高:\n            得 空\n\n        中 = (低+高)//2\n        若 数组[中] == 目标:\n            得 中\n        若则 数组[中] < 目标:\n            得 己.二分搜索(数组, 目标, 中+1, 高)\n        若则 数组[中] > 目标:\n            得 己.二分搜索(数组, 目标, 低, 中-1)\n\n\n\n数组1 = [甲 对 甲 于 区间(1, 6)]\n搜索器 = 二分搜索器()\n对 目标 于 区间(1, 7):    \n    位置 = 搜索器.二分搜索(数组1, 目标, 0, 长(数组1)-1)\n    见(位置)\n\n```\n\nPython:\n\n```\nclass 二分搜索器:\n    def __init__(self):\n        pass\n\n    def 二分搜索(self, 数组, 目标, 低, 高):\n        if 低 > 高:\n            return None\n\n        中 = (低+高)//2\n        if 数组[中] == 目标:\n            return 中\n        elif 数组[中] < 目标:\n            return self.二分搜索(数组, 目标, 中+1, 高)\n        elif 数组[中] > 目标:\n            return self.二分搜索(数组, 目标, 低, 中-1)\n\n\n\n数组1 = [甲 for 甲 in range(1, 6)]\n搜索器 = 二分搜索器()\nfor 目标 in range(1, 7):    \n    位置 = 搜索器.二分搜索(数组1, 目标, 0, len(数组1)-1)\n    print(位置)\n\n```\n\n## 龟兔赛跑\n\nHanthon:\n\n```\n终点: 整 = 100\n\n\n名 动物:\n    有 初(己, 位置=0, 速度=1, 睡觉间隔=5, 睡觉时长=5):\n        己.位置 = 位置\n        己.速度 = 速度\n        己.睡觉时长 = 睡觉时长\n        己.睡觉间隔 = 睡觉间隔\n        己.困意 = 0 # [-睡觉时长 , 睡觉间隔] 逐渐增大, 若大于最大值则置为最小值 , 小于0表示正在睡觉\n\n    有 要睡觉吗(己):\n        若 无 己.睡觉间隔:\n            得 坏\n        己.困意 += 1\n        若 己.困意 > 己.睡觉间隔 :\n            己.困意 = -己.睡觉时长 \n            得 好\n        若则 己.困意 < 0:\n            得 好\n        否则:\n            得 坏\n\n\n    有 跑(己):\n        若 己.要睡觉吗() == 好:\n            己.睡()\n        否则:\n            己.位置 += 己.速度\n            # 见(己.名字, \"到达\", 己.位置)\n\n    有 睡(己):\n        # 见(己.名字, \"睡觉中\")\n        云云\n\n    有 吃(己):\n        云云\n\n\n\n名 乌龟(动物):\n    有 初(己, 速度, 睡觉间隔):\n        祖().初(速度=速度, 睡觉间隔=睡觉间隔)\n        己.名字 = \"乌龟\"\n\n名 兔子(动物):\n    有 初(己, 速度, 睡觉间隔):\n        祖().初(速度=速度, 睡觉间隔=睡觉间隔)\n        己.名字 = \"兔子\"\n\n\n有 比赛(龟: 乌龟, 兔: 兔子):\n    当 龟.位置 < 终点 及 兔.位置 < 终点:\n        龟.跑()\n        兔.跑()\n    否则:\n        若 龟.位置 >= 终点:\n            见(\"乌龟获胜!\")\n            得 \"龟\"\n        若则 兔.位置 >= 终点:\n            见(\"兔子获胜!\")\n            得 \"兔\"\n\n\n夫 开(\"语录.txt\", \"w\") 为 文:\n    对 睡觉间隔 于 区间(1, 3):        \n        赢家 = 比赛(乌龟(速度=1, 睡觉间隔=空), 兔子(速度=3, 睡觉间隔=睡觉间隔))    \n    若 赢家 == \"兔\":\n        文.写(\"看来睡一会没什么大不了的 --- 鲁迅\")\n\n    若 赢家 == \"龟\":\n        文.写(\"996是一种福报  --- Jack\")\n\n```\n\nPython:\n\n```\n终点: int = 100\n\n\nclass 动物:\n    def __init__(self, 位置=0, 速度=1, 睡觉间隔=5, 睡觉时长=5):\n        self.位置 = 位置\n        self.速度 = 速度\n        self.睡觉时长 = 睡觉时长\n        self.睡觉间隔 = 睡觉间隔\n        self.困意 = 0 # [-睡觉时长 , 睡觉间隔] 逐渐增大, 若大于最大值则置为最小值 , 小于0表示正在睡觉\n\n    def 要睡觉吗(self):\n        if not self.睡觉间隔:\n            return False\n        self.困意 += 1\n        if self.困意 > self.睡觉间隔 :\n            self.困意 = -self.睡觉时长 \n            return True\n        elif self.困意 < 0:\n            return True\n        else:\n            return False\n\n\n    def 跑(self):\n        if self.要睡觉吗() == True:\n            self.睡()\n        else:\n            self.位置 += self.速度\n            # print(self.名字, \"到达\", self.位置)\n\n    def 睡(self):\n        # print(self.名字, \"睡觉中\")\n        pass\n\n    def 吃(self):\n        pass\n\n\n\nclass 乌龟(动物):\n    def __init__(self, 速度, 睡觉间隔):\n        super().__init__(速度=速度, 睡觉间隔=睡觉间隔)\n        self.名字 = \"乌龟\"\n\nclass 兔子(动物):\n    def __init__(self, 速度, 睡觉间隔):\n        super().__init__(速度=速度, 睡觉间隔=睡觉间隔)\n        self.名字 = \"兔子\"\n\n\ndef 比赛(龟: 乌龟, 兔: 兔子):\n    while 龟.位置 < 终点 and 兔.位置 < 终点:\n        龟.跑()\n        兔.跑()\n    else:\n        if 龟.位置 >= 终点:\n            print(\"乌龟获胜!\")\n            return \"龟\"\n        elif 兔.位置 >= 终点:\n            print(\"兔子获胜!\")\n            return \"兔\"\n\n\nwith open(\"语录.txt\", \"w\") as str:\n    for 睡觉间隔 in range(1, 3):        \n        赢家 = 比赛(乌龟(速度=1, 睡觉间隔=None), 兔子(速度=3, 睡觉间隔=睡觉间隔))    \n    if 赢家 == \"兔\":\n        str.write(\"看来睡一会没什么大不了的 --- 鲁迅\")\n\n    if 赢家 == \"龟\":\n        str.write(\"996是一种福报  --- Jack\")\n\n```\n\n\n\n#  安装\n\n` pip install hanthon`\n\n``python -m hanthon <source-file>``\n\n\n# Hanthon语言快速入门\n\nHanthon本质上只是Python的一张皮, 所做的仅仅是将特定中文关键词转化成英文.\n因此.Hanthon语言可以用一张中英对照表来描述.\n你可以在源文件`table.org`中进行自定义.\n\n## 变量\n支持变量类型申明\n\n| Python | Hanthon |\n| ------ | ------- |\n| int    | 整      |\n| float  | 浮      |\n|str|文|\n|list|表|\n|dict|典|\n|None|空|\n|True|好|\n|False|坏|\n\n\n\n## 逻辑判断\n\n| Python | Hanthon        |\n| ------ | -------------- |\n| and    | 及             |\n| or     | 或             |\n| not    | 不             |\n| not    | 无(两者都可以) |\n\n\n\n## 循环\n\n| Python   | Hanthon |\n| -------- | ------- |\n| for      | 对      |\n| while    | 当      |\n| continue | 续      |\n| break    | 弃      |\n\n\n\n## 控制流\n\n| Python | Hanthon |\n| ------ | ------- |\n| if     | 若      |\n| else   | 否则    |\n| elif   | 若则    |\n\n## 块\n| Python | Hanthon |\n| ------ | ------- |\n|def|有|\n|return|得|\n|pass|云云|\n|global|外|\n|try|试|\n|except|误|\n\n\n## 面向对象 \n\n| Python     | Hanthon |\n| ---------- | ------- |\n| class      | 名      |\n| `__init__` | 初      |\n| self       | 己      |\n|super| 祖|\n\n# 其他\n\n| Python     | Hanthon |\n| ---------- | ------- |\n|in|于|\n|as|即|\n|from|自|\n|import|引|\n|yield|求|\n|del|删|\n\n\n# 常用函数\n| Python     | Hanthon |\n| ---------- | ------- |\n|print|见|\n|range|区间|\n|append|补|\n|len|长|\n|sort|排序|\n|open|开|\n|read|读|\n|write|写|\n\n\n\n\n\n\n\n\n设计思路 \n====\n\n## 模仿文言, 求其神似\n\n### 为什么用文言文\n\n文言文诞生于纸张稀缺的历史时期, 因此落笔必须惜字如金. 这个历史条件的限制, 反而使得文言文具有简练高效的表达特点.\n\n比如`if`, 翻译为`如果`,  编写起来就过于麻烦, 翻译为`若`,  同样的意思, 却节约了一个字, 对于`if`这样的关键词来说, 可以节约不少时间. \n\nPython在所有编程语言中, 最重视程序的可读性, 甚至为此牺牲了大量运行的效率, 为了能少写一行`file.close()` , 不惜引入一个新的关键词`with` .  就是为了让代码阅读更加顺畅.\n\n两者结合, 可以写出非常接近自然语言的效果. \n\n### 为什么只求神似\n\n大多数技术文献, 在翻译名词时, 会尽量贴近原意. 这样做, 虽然精确, 但是过于死板. 由于中英文之间思考方式, 语法习惯的差异, 造成的结果就是可读性不强.\n\n为了更好的可读性, Hanthon语言的中文关键字不会刻意贴近其英文版,  而是考虑其使用场景,  选取更加贴近应用场景的翻译方法. 使其读起来接近一篇自然语言的文章.\n\n### 翻译中的一些决策\n\n以`for` 关键词为例, 按字面意思应该翻译成 `遍历`,  或者`循环`\n首先`for`作为一个常用关键字, 其中文对照应该被压缩到一个字. \n\n其次, 考虑到`for`经常性的用法是 ` for i in range()`. 这句话翻译成中文,  应该是 `对每一个i在区间xx里` , 进一步文言化, 即为`对i于区间xx里`, 所以将`for`翻译为`对`, 将`in`翻译为`于` , 状语后置, 颇有古风.\n\n再谈谈`def`, 字面义`定义`, 但是汉语的习惯是动宾搭配, `def`之后, 马上会接上函数的名称, 因此考虑将其翻译成动词, 而不是名词,  `存在`是一个不错的候选项, 而 `有`  显然更好一些.\n\n`lamda`更难直译,  翻译成`拉姆达算子`, 未免太掉胃口, 考虑到`lamda` 代表一种运算过程, \n\n我将其翻译为`道`,  道有道路的意思, 引申为从此处到彼处的一种过程, 又因为lambda可以创造高阶函数, 非常玄妙,\n也比较适合用玄妙的`道`来描述.\n\n类似的还有`pass`翻译成`云云`, 表示要说什么, 但又不知道说些什么. `with`翻译成`夫` ,常在文言文中做发表感叹的起手词.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flizzywine/Hanthon",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hanthon",
    "package_url": "https://pypi.org/project/hanthon/",
    "platform": "",
    "project_url": "https://pypi.org/project/hanthon/",
    "project_urls": {
      "Homepage": "https://github.com/flizzywine/Hanthon"
    },
    "release_url": "https://pypi.org/project/hanthon/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Write Python in Chinese",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6332162,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b6257edf494c413829bd391ca92bffe38631a9baa01a54ca17946f909df7918",
          "md5": "561bca18a5c53fd1441984885560fb59",
          "sha256": "16823ebd94de64664f0f1eb337297b7a21577f4bcf434bf10a9f71e305a2457b"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "561bca18a5c53fd1441984885560fb59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 5299,
        "upload_time": "2019-12-19T08:07:42",
        "upload_time_iso_8601": "2019-12-19T08:07:42.724121Z",
        "url": "https://files.pythonhosted.org/packages/0b/62/57edf494c413829bd391ca92bffe38631a9baa01a54ca17946f909df7918/hanthon-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4d80938d03e5b647db1adc71363000da7cafbd18bd6b614a3e4405c076b354e",
          "md5": "62af3e32ab33f88c478027ba7307818e",
          "sha256": "d44ae1941971a3ada31175c8b1920c783ff4c92efd45e4ca84ff8b507290635c"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "62af3e32ab33f88c478027ba7307818e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 4658,
        "upload_time": "2019-12-19T08:07:46",
        "upload_time_iso_8601": "2019-12-19T08:07:46.724140Z",
        "url": "https://files.pythonhosted.org/packages/c4/d8/0938d03e5b647db1adc71363000da7cafbd18bd6b614a3e4405c076b354e/hanthon-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f60b10c81233b8e468519682df3cc7a868516a407948ce98d57ef97ec725ba1",
          "md5": "487e382e5d2783cc0ac661318d5f1a79",
          "sha256": "8c617fd6af299361dc7142055fbb637bf7b962fcb212b464808289e961758a55"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "487e382e5d2783cc0ac661318d5f1a79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7037,
        "upload_time": "2019-12-19T13:29:02",
        "upload_time_iso_8601": "2019-12-19T13:29:02.046940Z",
        "url": "https://files.pythonhosted.org/packages/2f/60/b10c81233b8e468519682df3cc7a868516a407948ce98d57ef97ec725ba1/hanthon-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b3ebcb7efd14f3c1e61b583a98aad3a3be1006d02866f86fa523ebf63a12d1b",
          "md5": "6001097669cc580510843d06ae163f0b",
          "sha256": "5b33725bf67a6e3bf0bc5d7f482a33d977703e20bdb7d2e34a1e185a5063dabe"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6001097669cc580510843d06ae163f0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6304,
        "upload_time": "2019-12-19T13:29:04",
        "upload_time_iso_8601": "2019-12-19T13:29:04.398874Z",
        "url": "https://files.pythonhosted.org/packages/0b/3e/bcb7efd14f3c1e61b583a98aad3a3be1006d02866f86fa523ebf63a12d1b/hanthon-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "478f1fdb35fa96abe2d12216227c4cd24c0050b7be3590194295ad5e248e03a1",
          "md5": "c794b9790c1e1048380c39a8314d847a",
          "sha256": "ee4bad50b59942a4e76e9bd6123a681be26e7faa20aa5c4fc21ede294d51c0d3"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c794b9790c1e1048380c39a8314d847a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7271,
        "upload_time": "2019-12-19T13:40:24",
        "upload_time_iso_8601": "2019-12-19T13:40:24.546619Z",
        "url": "https://files.pythonhosted.org/packages/47/8f/1fdb35fa96abe2d12216227c4cd24c0050b7be3590194295ad5e248e03a1/hanthon-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a89cd0dc5a9cf7edf1dc9fa47fac3ad961b552857e26127ff845c4dff50ea82",
          "md5": "d320d633806bb9768e030a6241802fe1",
          "sha256": "06be223d429d08d4d3573f5bf4b758ca055f1edee073421f789812aa3eae5ca3"
        },
        "downloads": -1,
        "filename": "hanthon-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d320d633806bb9768e030a6241802fe1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6602,
        "upload_time": "2019-12-19T13:40:26",
        "upload_time_iso_8601": "2019-12-19T13:40:26.382624Z",
        "url": "https://files.pythonhosted.org/packages/0a/89/cd0dc5a9cf7edf1dc9fa47fac3ad961b552857e26127ff845c4dff50ea82/hanthon-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "478f1fdb35fa96abe2d12216227c4cd24c0050b7be3590194295ad5e248e03a1",
        "md5": "c794b9790c1e1048380c39a8314d847a",
        "sha256": "ee4bad50b59942a4e76e9bd6123a681be26e7faa20aa5c4fc21ede294d51c0d3"
      },
      "downloads": -1,
      "filename": "hanthon-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c794b9790c1e1048380c39a8314d847a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7271,
      "upload_time": "2019-12-19T13:40:24",
      "upload_time_iso_8601": "2019-12-19T13:40:24.546619Z",
      "url": "https://files.pythonhosted.org/packages/47/8f/1fdb35fa96abe2d12216227c4cd24c0050b7be3590194295ad5e248e03a1/hanthon-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a89cd0dc5a9cf7edf1dc9fa47fac3ad961b552857e26127ff845c4dff50ea82",
        "md5": "d320d633806bb9768e030a6241802fe1",
        "sha256": "06be223d429d08d4d3573f5bf4b758ca055f1edee073421f789812aa3eae5ca3"
      },
      "downloads": -1,
      "filename": "hanthon-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d320d633806bb9768e030a6241802fe1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6602,
      "upload_time": "2019-12-19T13:40:26",
      "upload_time_iso_8601": "2019-12-19T13:40:26.382624Z",
      "url": "https://files.pythonhosted.org/packages/0a/89/cd0dc5a9cf7edf1dc9fa47fac3ad961b552857e26127ff845c4dff50ea82/hanthon-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}