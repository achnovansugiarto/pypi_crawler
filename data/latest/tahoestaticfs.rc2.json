{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Programming Language :: Python :: 3"
    ],
    "description": "=============\ntahoestaticfs\n=============\n\nTahoestaticfs is a Fuse filesystem that enables read and write access\nto files stored on a Tahoe-LAFS_ grid.\n\nTahoestaticfs is designed for static, unchanging data, and caches file\nand directory metadata aggressively. Optionally, also file data can be\ncached.\n\nCompared to mounting Tahoe-LAFS directories via sshfs (as of\nTahoe-LAFS 1.9.2), Tahoestaticfs achieves better latency. This is true\nalso for accessing data not in cache (e.g. ``ls -laR /mnt/tahoe`` with\ncold cache), due to the more aggressive directory metadata caching.\nMoreover, tahoestaticfs also supports random access reads to stored\nfiles, without requiring to download the full files.\n\n.. _Tahoe-LAFS: http://tahoe-lafs.org/\n\n\nUsage\n-----\n\n::\n\n    tahoestaticfs [options] [mountpoint]\n\n    Tahoe-LAFS directory mounted as a filesystem, with local\n    caching. Cached data is encrypted with a key derived from the\n    directory capability mounted.\n    \n    Dircap of the root directory is read from stdin on startup. In scripts, do::\n    \n        awk '/^root:/ {print $2}' < ~/.tahoe/private/aliases \\\\\n            | tahoestaticfs ...\n    \n    Cache can be invalidated by `touch <mountpoint>/.tahoestaticfs-invalidate`,\n    or by removing files in the cache directory.\n\n    Options:\n        --version              show program's version number and exit\n        -h, --help             show this help message and exit\n        -o opt,[opt...]        mount options\n        -c CACHE, --cache=CACHE\n                               Cache directory\n        -u NODE_URL, --node-url=NODE_URL\n                               Tahoe gateway node URL\n        -D, --cache-data       Cache also file data\n        -S CACHE_SIZE, --cache-size=CACHE_SIZE\n                               Target cache size\n        -w WRITE_LIFETIME, --write-cache-lifetime=WRITE_LIFETIME\n                               Cache lifetime for write operations (seconds).\n                               Default: 10 sec\n        -r READ_LIFETIME, --read-cache-lifetime=READ_LIFETIME\n                               Cache lifetime for read operations (seconds).\n                               Default: 10 sec\n\nFor example::\n\n    awk '/^root:/ {print $2}' < ~/.tahoe/private/aliases \\\\\n        tahoestaticfs -c /var/cache/tahoefscache -D -S 5G -u http://127.0.0.1:8090 /mnt/tahoestatic\n\n.. warning::\n\n   Do **not** do this::\n\n       echo URI:DIR2:... | tahoestaticfs\n\n   That makes the root capability visible to everyone. Instead, store the root\n   capability in a file with appropriate permissions, for example reading it\n   from your Tahoe-LAFS aliases file as shown above.\n\n\nCaching and concurrency\n-----------------------\n\nCached data and metadata becomes invalidated if it is older than the\ncorresponding cache lifetimes.  The cache lifetimes can be specified\nseparately for metadata/data read and write operations.\n\nThe cache will stay in a consistent state with the Tahoe grid if\nmodifications to the data are only performed via a single mounted\nfilesystem, even if the cache lifetimes are infinite.\n\nIf modifications are done directly to files on the grid e.g. from\nother machines accessing the Tahoe storage, Tahoestaticfs filesystem\nwill reflect the state of the files in Tahoe storage only after\nwaiting one cache lifetime after the last modification.\n\nNote that this is not an absolute guarantee, as Tahoe-LAFS itself does\n`not guarantee full concurrency\n<https://tahoe-lafs.org/trac/tahoe-lafs/browser/docs/frontends/webapi.rst#concurrency-issues>`__.\n\nNonzero cache lifetimes are in general necessary to obtain filesystem\nmetadata performance necessary for typical workloads.\n\nThe cache can be invalidated manually, via ``touch\n<mountpoint>/.tahoestaticfs-invalidate``. To invalidate only the cache\nof a subtree, do ``touch\n<mountpoint>/<somedir>/.tahoestaticfs-invalidate``.\n\n\nEncryption\n----------\n\nTahoestaticfs encrypts cached data and metadata retrieved from network\nbefore storing it on disk.\n\nThe purpose of the encryption is to hinder an attacker who, (i) has\nread-only access to the cache files, and (ii) attempts to determine\neither the root dircap or file data or metadata.\n\nEach file is divided to 131072-byte chunks, and encryption is done\nusing AES-CBC-256 separately for each chunk, to enable random\naccess. The 16-byte IV for each chunk is random, and changed every\ntime the chunk is written on disk.\n\nA 256-bit master encryption key is derived from the rootcap mounted,\ncombined with a randomly chosen 32-byte salt via PBKDF2. The iteration\ncount is determined so that it takes around one second on the system\nin question, but is at least 10000. The salt is stored on-disk as-is.\n\nThe AES encryption keys are file-specific, and obtained via::\n\n    prk = HKDF-SHA256-Extract(salt2, master-key)\n    data_key | fn_key = HKDF-SHA256-Expand(prk, pathname, 96)\n\nThe salt2 is a second 32-byte randomly generated salt stored as-is\non-disk.  The 32-byte data_key is used as the AES-CBC encryption key.\nThe 64-byte fn_key is used to generate filenames via\nHMAC-SHA512(fn_key, pathname).\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "AGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tahoestaticfs",
    "package_url": "https://pypi.org/project/tahoestaticfs/",
    "platform": null,
    "project_url": "https://pypi.org/project/tahoestaticfs/",
    "project_urls": {
      "Source": "https://github.com/pv/tahoestaticfs"
    },
    "release_url": "https://pypi.org/project/tahoestaticfs/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Fuse filesystem on Tahoe-LAFS",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15438720,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bea54be47dca7730ec8ffceaf9ea60003786645d3cebacc77f1f6acbc12ce76",
          "md5": "775fa89d1887ab0052620c16323ce87f",
          "sha256": "8b2971897dcc1a00f8d171c685d0e10debf06654d8a1a5a1298846b51e1db598"
        },
        "downloads": -1,
        "filename": "tahoestaticfs-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "775fa89d1887ab0052620c16323ce87f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39370,
        "upload_time": "2022-10-16T15:54:11",
        "upload_time_iso_8601": "2022-10-16T15:54:11.466040Z",
        "url": "https://files.pythonhosted.org/packages/3b/ea/54be47dca7730ec8ffceaf9ea60003786645d3cebacc77f1f6acbc12ce76/tahoestaticfs-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e231ba2f55d6da5e8887d5ad77e89a319e2726e340f5ba79c8940e3828b2e96",
          "md5": "327e41cd59ea25f2fa99aef8fa39ac2b",
          "sha256": "055092f9957a255861f1900d1fa6fdf2cc83bab5c282a9b3e194751a0ec4644b"
        },
        "downloads": -1,
        "filename": "tahoestaticfs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "327e41cd59ea25f2fa99aef8fa39ac2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39480,
        "upload_time": "2022-10-17T16:20:15",
        "upload_time_iso_8601": "2022-10-17T16:20:15.676498Z",
        "url": "https://files.pythonhosted.org/packages/9e/23/1ba2f55d6da5e8887d5ad77e89a319e2726e340f5ba79c8940e3828b2e96/tahoestaticfs-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e231ba2f55d6da5e8887d5ad77e89a319e2726e340f5ba79c8940e3828b2e96",
        "md5": "327e41cd59ea25f2fa99aef8fa39ac2b",
        "sha256": "055092f9957a255861f1900d1fa6fdf2cc83bab5c282a9b3e194751a0ec4644b"
      },
      "downloads": -1,
      "filename": "tahoestaticfs-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "327e41cd59ea25f2fa99aef8fa39ac2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 39480,
      "upload_time": "2022-10-17T16:20:15",
      "upload_time_iso_8601": "2022-10-17T16:20:15.676498Z",
      "url": "https://files.pythonhosted.org/packages/9e/23/1ba2f55d6da5e8887d5ad77e89a319e2726e340f5ba79c8940e3828b2e96/tahoestaticfs-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}