{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<img  src=\"https://user-images.githubusercontent.com/83510798/172371780-484c7efc-ca9d-4881-b4d4-dfee2ae77289.png\">\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/RbeQMu886J\">Join the community</a> |\n  <a href=\"https://nebuly.gitbook.io/nebuly/welcome/questions-and-contributions\">Contribute to the library</a>\n</p>\n\n<p align=\"center\">\n<a href=\"#how-nebulgym-works\">How nebulgym works</a> ‚Ä¢\n<a href=\"#benchmarks\">Benchmarks</a> ‚Ä¢\n<a href=\"#installation\">Installation</a> ‚Ä¢\n<a href=\"#get-started\">Get started</a> ‚Ä¢\n<a href=\"#nebulgym-use-case\">Tutorials & examples</a> ‚Ä¢\n<a href=\"https://nebuly.gitbook.io/nebuly/welcome/questions-and-contributions\">Documentation</a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://nebuly.ai/\">Website</a> |\n<a href=\"https://www.linkedin.com/company/72460022/\">LinkedIn</a> |\n<a href=\"https://twitter.com/nebuly_ai\">Twitter</a>\n</p>\n\n# Nebulgym\n\nEasy-to-use library to accelerate AI training leveraging state-of-the-art optimization techniques ü§∏‚Äç‚ôÄÔ∏è\n\n-  [How nebulgym works](#how-nebulgym-works)\n-  [Benchmarks](#benchmarks)\n-  [Tutorials and examples](#nebulgym-use-case)\n-  [Installation & get started](#installation)\n-  <a href=\"https://nebuly.gitbook.io/nebuly/nebulgym/how-nebulgym-works\">Documentation</a>\n-  <a href=\"https://discord.gg/jyjtZTPyHS\">Join the community for AI acceleration</a>\n\n## How nebulgym works\n\n> `nebulgym` greatly reduces the training time of AI models without requiring any modification to the training setup. `nebulgym` optimizes the full training computing stack, from efficient data loading, to faster forward and backward passes, to earlier convergence.\n\nNo matter what model, framework, or training recipe you use, with `nebulgym` you speed up training by simply adding nebulgym class decorators to your code. Decorators will make sure that you use your hardware's computing power to the fullest and achieve the shortest possible training time.\n\n<p align=\"center\">\nYour code + @nebulgym_class_decorators = superfast training üèÉ‚Äç‚ôÄÔ∏è\n</p>\n\n\n### So why nebulgym?\n\nüöÄ **Superfast**. The library speeds up training and thus the time to get to production, reduces computing costs and energy consumption.\n\n‚òòÔ∏è **Easy-to-use**. Just add `nebulgym` class decorators to your code and continue programming on your favorite training framework. nebulgym will let you achieve awesome training times.\n\nüí• **Training setup agnostic**. `nebulgym` can be coupled with any model, trainer, or other training technique to achieve a compound effect on training performance.\n\nü¶æ **Framework agnostic**. The library aims to support all frameworks (PyTorch, TensorFlow, Hugging Face, Jax, etc.) to allow any developer to continue working with the configuration they are used to. Currently, nebulgym supports PyTorch and we are working on expanding nebulgym capabilities.\n\nüíª **Deep learning model agnostic**. `nebulgym` supports all the most popular architectures such as transformers, LSTMs, CNNs and FCNs.\n\nü§ñ **Hardware agnostic**. The library aims to support any artificial intelligence hardware on the market, from general-purpose GPUs and CPUs to hardware accelerators such as FPGAs and ASICs. Currently, nebulgym has been tested on many CPUs and GPUs.\n\nDo you like the library? Leave a ‚≠ê if you enjoy the project and join [the community](https://discord.gg/RbeQMu886J) where we chat about `nebulgym` and AI acceleration.\n\nAnd happy training üèãÔ∏è\n\n<img src=\"https://user-images.githubusercontent.com/83510798/172376401-88930367-5d1d-41c8-a617-57c628d09fdc.png\">\n\n\n## Benchmarks\n`nebulgym` has just been launched and has been tested on limited use cases. Early results are remarkably good, and it is expected that `nebulgym` will further reduce training time in future releases. At the same time, it is expected that nebulgym may fail in untested cases and provide different results, perhaps greater or worse than those shown below.\n\nWe tested nebulgym on the custom model that you can find in the <a href=\"#nebulgym-use-case\">example section</a>. The test consists in a training over 10 epochs and a batch size of 8.\n\nBelow are the training times in seconds before `nebulgym` optimization and after its acceleration, and the speedup, which is calculated as the response time of the unoptimized model divided by the response time of the accelerated model.\n\n### Training time in seconds\n| **Hardware** | **Not-optimized** | **Accelerated** | **Speedup** |\n|---|:---:|:---:|:---:|\n| **M1 Pro** | 632.05 | 347.52 | 1.8x |\n| **Intel Xeon** | 788.05 | 381.01 | 2.1x |\n| **AMD EPYC** | 1547.35 | 1034.37 | 1.5x |\n| **NVIDIA T4** | 258.88 | 127.32 | 2.0x |\n| __________________ | _________________ | _________________ | _________________ |\n\nHardware setup\n- M1 Pro: Apple M1 Pro 16GB of RAM\n- Intel Xeon: EC2 Instance on AWS - t2.large\n- AMD EPYC: EC2 Instance on AWS - t4a.large\n- NVIDIA T4: EC2 instance on AWS - g4dn.xlarge\n\nHow does `nebulgym` perform on your training setup? What do you think about `nebulgym` and what are ways to make it even better? Share your ideas and results with us in the [community chat](https://discord.gg/RbeQMu886J).\n\n\n## Installation\n\nInstalling and using nebulgym is super easy! You can either\n- install `nebulgym` from PyPI (with `pip`) or\n- install `nebulgym` from source code.\n\nWe strongly recommend that you install `nebulgym` in a new environment. You can create and manage your environment using Conda or another virtual environment management application. We tested our installation with `venv` by `conda`.\n\n\n### Installation from PyPI\n\n```\npip install nebulgym\n```\n\n### Source code installation\n\nClone nebulgym repository to your local machine.\n\n```\ngit clone https://github.com/nebuly-ai/nebulgym.git\n```\n\nGo into the repo and run the setup.py file.\n```\ncd nebulgym && python setup.py install\n```\n\n## Get started\n\n`nebulgym` accelerates training by means of class decorators. A class decorator is a very elegant and non-intrusive method that allows nebulgym to tag your model (`@accelerate_model`) and your dataset (`@accelerate_dataset`) and add functionalities to their classes. When you run a training session, `nebulgym` will greatly reduce the training time of your decorated model. As simple as that!\n\nYou can find more information about `nebulgym` class decorators, the parameters they can take as input, and other `nebulgym` classes that can be used as an alternative to decorators in the [documentation](https://nebuly.gitbook.io/nebuly/nebulgym/get-started/advanced-options).\n\n### How to use nebulgym class decorators\n\nPut `nebulgym` class decorators right before defining your dataset and model classes.\n\n- `@accelerate_dataset` must be entered before the dataset definition. nebulgym will cache dataset samples in memory, so that reading these samples after the first time becomes much faster. Caching the dataset makes data loading faster and more efficient, solving what could become the main bottleneck of the whole training process.\n- `@accelerate_model` must be entered before the model definition. nebulgym will accelerate both forward and backward propagations by reducing the number of computationally expensive propagation steps and making computations more efficient.\n\n<p align=\"center\">\n<img width=\"500\" src=\"https://user-images.githubusercontent.com/83510798/172379283-b18f75cb-1b85-4f70-91a6-d3973c593cff.gif\">\n</p>\n\n\n## nebulgym use case\n\nHere we show an example of how you can easily use `nebulgym` class decorators. To achieve awesome training speed, you can simply add `nebulgym` decorators (`@accelerate_model` and `@accelerate_dataset`) before defining your AI model and dataset.\n\n```\nfrom typing import List, Callable\nimport torch\nfrom torch.utils.data import Dataset\n\nfrom nebulgym.decorators.torch_decorators import accelerate_model, accelerate_dataset\n\n# Add nebulgym annotation before defining your model. \n#  This model takes as input an image of resolution 224x224\n@accelerate_model()\nclass CustomModel(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self._avg_pool = torch.nn.AvgPool2d(4)\n        self._linear = torch.nn.Linear(3136, 1024)\n        self._relu = torch.nn.ReLU()\n        self._linears = torch.nn.Sequential(\n            torch.nn.BatchNorm1d(1024),\n            torch.nn.Linear(1024, 2048),\n            torch.nn.ReLU(),\n            torch.nn.BatchNorm1d(2048),\n            torch.nn.Linear(2048, 1024),\n            torch.nn.ReLU(),\n            torch.nn.BatchNorm1d(1024),\n            torch.nn.Linear(1024, 512),\n            torch.nn.ReLU(),\n            torch.nn.BatchNorm1d(512),\n            torch.nn.Linear(512, 256),\n            torch.nn.ReLU(),\n            torch.nn.Linear(256, 2),\n        )\n\n    def forward(self, x):\n        x = self._avg_pool(x).mean(dim=-3).view(-1, 3136)\n        x = self._relu(self._linear(x))\n        return self._linears(x)\n\n\n# Add nebulgym annotation before defining your dataset.\n@accelerate_dataset()\nclass CustomDataset(Dataset):\n    def __init__(self, img_paths: List[str], labelling_func: Callable, reading_func: Callable):\n        self._images = img_paths\n        self._labelling_func = labelling_func\n        self._reading_func = reading_func\n\n    def __getitem__(self, item):\n        img_path = self._images[item]\n        label = self._labelling_func(img_path)\n        input_tensor = self._reading_func(img_path)\n        return input_tensor, label\n\n    def __len__(self):\n        return len(self._images)    \n```\n\nAnd that's it. Now, as soon as you perform a training run, `nebulgym` will optimize the full training computing stack, from efficient data loading, to faster forward and backward passes, to earlier convergence. \n\n## Supported tech & roadmap\n`nebulgym` has just been launched, and it is already capable of cutting training time in half. At the same time, it is expected that `nebulgym` may crash or fail in untested use cases. Moreover, the project is in its early stages and there is a lot of room for improvement for `nebulgym` to become a new paradigm for artificial intelligence training.\n\n`nebulgym` aims to support every framework, every model, every hardware, and make the most of your hardware and software capabilities to train your model in a fraction of the time required now. In addition, `nebulgym` will always be extremely easy to use to empower any developer to build powerful AI applications.\n\n`nebulgym` already embeds many great technologies. Below you can find a list of the features already implemented and those that will be implemented soon. More specific tasks can be found in the [issue page](https://github.com/nebuly-ai/nebulgym). \n\nAny ideas about what could be implemented next? Would you like to contribute to this fantastic library? We welcome any ideas, questions, issues and pull requests! For more info go to the [Documentation](https://nebuly.gitbook.io/nebuly/welcome/questions-and-contributions).\n\n### Supported frameworks\n- PyTorch\n- TensorFlow ([open issue](https://github.com/nebuly-ai/nebulgym/issues/5))\n\n### Supported backends\n- **PyTorch**. Default compiler for models trained in PyTorch.\n- **Rammer**. Compiler that can be used on Nvidia GPUs.\n- ONNX Runtime. Training API leveraging on some techniques developed for inference optimization. It currently supports only Nvidia GPUs.\n\n### Optimization techniques for data loading\n- **Cached datasets**. Data loading is for some use cases slow and could become a major bottleneck of the whole training process. nebulgym provides cached dataset to speedup this process by caching data samples in memory, so that reading these samples after the first time becomes much faster.\n\n### Model Optimization techniques\n- **Sparsified Back Propagation**. As traditional neural network consumes a significant amount of computing resources during back propagation, leveraging a simple yet effective technique to alleviate this problem. In this technique, only a small subset of the full gradients are computed to update the model parameters and the model still achieves the same effect as the traditional CNN, or even better.\n- **Selective-Backprop**. ([open issue](https://github.com/nebuly-ai/nebulgym/issues/11))\n- **Layer Replacement** ([open issue](https://github.com/nebuly-ai/nebulgym/issues/10))\n- **ModelReshaper** ([open issue](https://github.com/nebuly-ai/nebulgym/issues/9))\n- **Distributed training** ([open issue](https://github.com/nebuly-ai/nebulgym/issues/4))\n- **Forward gradients** ([open issue](https://github.com/nebuly-ai/nebulgym/issues/3))\n\n### Library installation methods\n- From PyPI\n- Source code\n\n### Backend installation methods\n- From the backend source code\n- Automatic installation with an auto-installer ([open issue](https://github.com/nebuly-ai/nebulgym/issues/8))\n\n\n## Licence\nThis project is released under the [Apache 2.0 licence](https://github.com/nebuly-ai/nebulgym/blob/main/LICENSE).\n\n---\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/RbeQMu886J\">Join the community</a> |\n  <a href=\"https://nebuly.gitbook.io/nebuly/welcome/questions-and-contributions\">Contribute to the library</a>\n</p>\n\n<p align=\"center\">\n<a href=\"#how-nebulgym-works\">How nebulgym works</a> ‚Ä¢\n<a href=\"#benchmarks\">Benchmarks</a> ‚Ä¢\n<a href=\"#installation\">Installation</a> ‚Ä¢\n<a href=\"#get-started\">Get started</a> ‚Ä¢\n<a href=\"#nebulgym-use-case\">Tutorials & examples</a> ‚Ä¢\n<a href=\"https://nebuly.gitbook.io/nebuly/welcome/questions-and-contributions\">Documentation</a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://nebuly.ai/\">Website</a> |\n<a href=\"https://www.linkedin.com/company/72460022/\">LinkedIn</a> |\n<a href=\"https://twitter.com/nebuly_ai\">Twitter</a>\n</p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nebulgym",
    "package_url": "https://pypi.org/project/nebulgym/",
    "platform": null,
    "project_url": "https://pypi.org/project/nebulgym/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nebulgym/0.1.1/",
    "requires_dist": [
      "torch (>=1.10.0)",
      "psutil (>=5.9.0)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14139728,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bf1e1a46f1eafcaaca51adae5999731b08b981f56811fc3616b8a481ed879e5",
          "md5": "b3172779393c20b560519b2201b5a9d0",
          "sha256": "37eadd5f6119825f9e8ad29793c9418595fc619635ab4730177cd76b0e798ea7"
        },
        "downloads": -1,
        "filename": "nebulgym-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3172779393c20b560519b2201b5a9d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22879,
        "upload_time": "2022-06-07T14:15:13",
        "upload_time_iso_8601": "2022-06-07T14:15:13.248644Z",
        "url": "https://files.pythonhosted.org/packages/4b/f1/e1a46f1eafcaaca51adae5999731b08b981f56811fc3616b8a481ed879e5/nebulgym-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58404a16907fc5fd92b230e889b2269f0b63dad527bcdf29a7c524faf230362f",
          "md5": "07bad565c9419db6937ce9aa6a5b4767",
          "sha256": "864ccb9751ef0052ceaa56540b38a31150f5daed95fc4870317806f66538f62e"
        },
        "downloads": -1,
        "filename": "nebulgym-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07bad565c9419db6937ce9aa6a5b4767",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22472,
        "upload_time": "2022-06-07T14:15:14",
        "upload_time_iso_8601": "2022-06-07T14:15:14.688406Z",
        "url": "https://files.pythonhosted.org/packages/58/40/4a16907fc5fd92b230e889b2269f0b63dad527bcdf29a7c524faf230362f/nebulgym-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb21cafddba5b0984fbf6addb358ff4fdfb34ac5d923e969bcd008a21bc718a6",
          "md5": "b1dfb0def2a423d259d1345a09bf52c9",
          "sha256": "7caf8c0a9378037cbee29f00ce5b6fe287a412a5027580afbd3e7d30d150da03"
        },
        "downloads": -1,
        "filename": "nebulgym-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1dfb0def2a423d259d1345a09bf52c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23384,
        "upload_time": "2022-06-15T13:35:36",
        "upload_time_iso_8601": "2022-06-15T13:35:36.902957Z",
        "url": "https://files.pythonhosted.org/packages/cb/21/cafddba5b0984fbf6addb358ff4fdfb34ac5d923e969bcd008a21bc718a6/nebulgym-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "560c82a12bb5d57b4fb70aab4eca33e17dd753e4a87ac1b10dae9e00b6e7db25",
          "md5": "6c6fc17c1c8b1772164f51910ac062f0",
          "sha256": "d9b83d3db0edae6bcc2487111b35fdc435718d0c8dbd7b197e42512e7a3a5bba"
        },
        "downloads": -1,
        "filename": "nebulgym-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c6fc17c1c8b1772164f51910ac062f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22900,
        "upload_time": "2022-06-15T13:35:38",
        "upload_time_iso_8601": "2022-06-15T13:35:38.510938Z",
        "url": "https://files.pythonhosted.org/packages/56/0c/82a12bb5d57b4fb70aab4eca33e17dd753e4a87ac1b10dae9e00b6e7db25/nebulgym-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb21cafddba5b0984fbf6addb358ff4fdfb34ac5d923e969bcd008a21bc718a6",
        "md5": "b1dfb0def2a423d259d1345a09bf52c9",
        "sha256": "7caf8c0a9378037cbee29f00ce5b6fe287a412a5027580afbd3e7d30d150da03"
      },
      "downloads": -1,
      "filename": "nebulgym-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1dfb0def2a423d259d1345a09bf52c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23384,
      "upload_time": "2022-06-15T13:35:36",
      "upload_time_iso_8601": "2022-06-15T13:35:36.902957Z",
      "url": "https://files.pythonhosted.org/packages/cb/21/cafddba5b0984fbf6addb358ff4fdfb34ac5d923e969bcd008a21bc718a6/nebulgym-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "560c82a12bb5d57b4fb70aab4eca33e17dd753e4a87ac1b10dae9e00b6e7db25",
        "md5": "6c6fc17c1c8b1772164f51910ac062f0",
        "sha256": "d9b83d3db0edae6bcc2487111b35fdc435718d0c8dbd7b197e42512e7a3a5bba"
      },
      "downloads": -1,
      "filename": "nebulgym-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6c6fc17c1c8b1772164f51910ac062f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22900,
      "upload_time": "2022-06-15T13:35:38",
      "upload_time_iso_8601": "2022-06-15T13:35:38.510938Z",
      "url": "https://files.pythonhosted.org/packages/56/0c/82a12bb5d57b4fb70aab4eca33e17dd753e4a87ac1b10dae9e00b6e7db25/nebulgym-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}