{
  "info": {
    "author": "Intellivoid Technologies",
    "author_email": "netkas@intellivoid.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Intellivoid Services API Python Wrapper\n\nThis is the official Python Library for Intellivoid Services API, this wrapper is\nbuilt based off the documentation from [here](https://docs.intellivoid.net/intellivoid/introduction).\n\nThis library handles COA (Cross-Over Authentication), and the Intellivoid Services\nfeatures; in short: you can use this library to authenticate users, retrieve their\ninformation and use the other features and services that are available on the\nIntellivoid Services API. To have a greater understanding of how this is meant\nto be used, please see the following documentation links\n\n - [Applications Introduction](https://docs.intellivoid.net/intellivoid/applications/introduction)\n - [COA Introduction](https://docs.intellivoid.net/intellivoid/v1/coa/introduction)\n - [Accounts Introduction](https://docs.intellivoid.net/intellivoid/v1/accounts/introduction)\n - [Settings Introduction](https://docs.intellivoid.net/intellivoid/v1/settings/introduction)\n\n## Install\n\nYou can either install it from PyPi\n```shell\npip install intellivoid\n```\n\nVia the Makefile\n```shell\nmake install\n```\n\nor traditionally with [setup.py](setup.py)\n```shell\npython3 setup.py install\n```\n\n### Note on the implementation\n\nThe wrapper has been designed to be used both in a synchronous and in an asynchronous way:\nthe package is split across two main subpackages, namely `intellivoid.sync`, for synchronous\nbehavior, and `intellivoid.aio`, for asynchronous behavior. The latter requires the `trio`\nlibrary to work, which is available on PyPi and listed as a project requirement ([Trio's documentation](https://trio.readthedocs.io)).\nThe packages are identical in their structure and functionality, but note that exception\nclasses are shared and come from the `intellivoid.sync` package: `intellivoid.aio` has no\ndedicated exceptions modules and uses the synchronous' package exceptions instead.\n\n## A quick example\n\nThis example is taken from [placeholder_authenticate.py](examples/sync/authentication/placeholder_authenticate.py)\nwhich demonstrates how you can easily authenticate a user and obtain their Access Token.\n\n```python\nfrom intellivoid.sync.coa import CrossOverAuthentication\n\n# Use your own Application ID and Secret Key. You'll be able to set your own\n# logo, name and permissions. These Application is for demonstration purposes only\n# and nobody can access your information using these Applications unless they have your Access Token\ncoa = CrossOverAuthentication()\napplication_id = \"APP65640a935039be5570428b6e74747811b0a290210e9e2d2f6722d8a54966ac171a4d5f1c\"\nsecret_key = \"51649e76483ff7de673e299a8056675409c957ec020998223ea02b3ccbaec1220747373d\"\n\nprint(\"Requesting authentication token\")\nrequest_auth_results = coa.request_authentication(\n    application_id=application_id,\n    expand_ui=1)\n\nprint(\"Authenticate: {}\".format(request_auth_results[\"authentication_url\"]))\nprint(\"Waiting for authentication\")\nprocess_authentication_results = coa.process_authentication(\n    application_id=application_id,\n    secret_key=secret_key,\n    request_token=request_auth_results[\"request_token\"],\n    poll_results=True)\n\n# If poll_results is False, AwaitingAuthenticationError exception will be raised\n\n# If poll_results is True, the method will run in a loop until the user successfully authenticates\n# or if an error occurs such as the request token being expired\n\nprint(\"Access Token: {0}\".format(process_authentication_results[\"access_token\"]))\n\n```\n\nMore examples can be found [here](examples) along with README files that explains\nwhat the example does, how it works and what it can be used for.\n\n\n## Credits\n\nThis library is developed by and copyrighted by Zi Xing Narrakas and/or Intellivoid and may only be used in compliance with the\nincluded license, which you can find in this repo inside the LICENSE file.\n\n## License\n\n```\nLicensed under GPLv3 or later versions, See the LICENSE for more information.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://accounts.intellivoid.net/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "intellivoid",
    "package_url": "https://pypi.org/project/intellivoid/",
    "platform": "",
    "project_url": "https://pypi.org/project/intellivoid/",
    "project_urls": {
      "Homepage": "https://accounts.intellivoid.net/"
    },
    "release_url": "https://pypi.org/project/intellivoid/1.0.7/",
    "requires_dist": [
      "requests (>=2.3.0)",
      "httpx",
      "trio"
    ],
    "requires_python": "",
    "summary": "Official Intellivoid Services API Wrapper for Python",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9010052,
  "releases": {
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6970113de02cde0acda3b3dd6cdea1313520609afbc11b06df31cbbfc06cb1a5",
          "md5": "861f854ea585b3e84b24a6270bbcdee2",
          "sha256": "c31fa003b731fa1a632ff13789157a5bb80fb4b8357f1f01bf71563a36373804"
        },
        "downloads": -1,
        "filename": "intellivoid-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "861f854ea585b3e84b24a6270bbcdee2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34521,
        "upload_time": "2020-12-29T18:01:47",
        "upload_time_iso_8601": "2020-12-29T18:01:47.390507Z",
        "url": "https://files.pythonhosted.org/packages/69/70/113de02cde0acda3b3dd6cdea1313520609afbc11b06df31cbbfc06cb1a5/intellivoid-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6970113de02cde0acda3b3dd6cdea1313520609afbc11b06df31cbbfc06cb1a5",
        "md5": "861f854ea585b3e84b24a6270bbcdee2",
        "sha256": "c31fa003b731fa1a632ff13789157a5bb80fb4b8357f1f01bf71563a36373804"
      },
      "downloads": -1,
      "filename": "intellivoid-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "861f854ea585b3e84b24a6270bbcdee2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34521,
      "upload_time": "2020-12-29T18:01:47",
      "upload_time_iso_8601": "2020-12-29T18:01:47.390507Z",
      "url": "https://files.pythonhosted.org/packages/69/70/113de02cde0acda3b3dd6cdea1313520609afbc11b06df31cbbfc06cb1a5/intellivoid-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}