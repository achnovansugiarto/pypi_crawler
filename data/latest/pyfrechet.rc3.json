{
  "info": {
    "author": "Will Rodman",
    "author_email": "wrodman@tulane.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pyfrechet\n## Frechet Distance Python Library\n\npyfrechet is a Python 3 library intended to visualize free space, discover\npaths and manage information for the Frechet distance. This library derives\nits work from [Frechet distance decision problem 1.0](http://www.cs.tulane.edu/~carola/research/code.html)\nand [Weak Frechet distance decision problem 1.0](http://www.cs.tulane.edu/~carola/research/code.html),\ntwo programs written by [Dr. Carola Wenk](cs.tulane.edu/~carola/). The library\nopen source design allows for new programs to be added and build upon existing\nones.\n\n### Installation\nDownload from Python Package Index using the command line below.\n```\npip install pyfrechet\n```\n\n### Documentation\nA GUI version of the source code documentation can be viewed by opening\ndocumentation.html. The GUI is generated by Doxygen and\nsupporting packages can be found in /docs.\n\n### Dependencies\n- [CFFI](cffi.readthedocs.io) allows source code written in C to be compiled as .so files.\n- [NumPy](numpy.org) is used to calculate dimentions of free space diagrams.\n- Free space diagrams are stored using [Shapleys](shapely.readthedocs.io) Polygon and Multipolygon classes.\n- The GUI of the free space diagram is built using [matplotlib](matplotlib.org).\n\n## Examples\nBelow are several examples how the library can be used.\n\n### Creating empty Frechet and Weak Frechet distance objects:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance, WeakDistance\n\nstrong_distance = StrongDistance()\nprint(strong_distance)\n\nweak_distance = WeakDistance()\nprint(weak_distance)\n```\n**output**\n```\n                Frechet Distance       |  StrongDistance\n                ========================================\n                Curve 1 File           |  N/A\n                Curve 2 File           |  N/A\n\n\n                Frechet Distance       |  WeakDistance\n                ========================================\n                Curve 1 File           |  N/A\n                Curve 2 File           |  N/A\n```\n\n### Creating Frechet and Weak Frechet distance objects with two curves:\n**sample_1.txt**\n```\n484472 4.21292e+006\n484183 4.21293e+006\n484166 4.21314e+006\n484140 4.21347e+006\n\n... ...\n\n483379 4.21391e+006\n483389 4.21385e+006\n483349 4.21362e+006\n483280 4.21325e+006\n```\n**sample_2.txt**\n```\n483282.000000 4213251.000000\n483281.000000 4213333.000000\n483279.000000 4213347.000000\n483278.000000 4213393.000000\n\n... ...\n\n484152.172363 4212991.013613\n484137.000000 4212937.000000\n484326.000000 4212933.000000\n484462.000000 4212918.000000\n```\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance, WeakDistance\n\nstrong_distance = StrongDistance.setCurves(curve_1_file=\"sample_1.txt\", \\\n                                           curve_2_file=\"sample_2.txt\", \\\n                                           reverse_curve_2=True)\nprint(strong_distance)\n\nweak_distance = WeakDistance.setCurves(curve_1_file=\"sample_1.txt\", \\\n                                       curve_2_file=\"sample_2.txt\", \\\n                                       reverse_curve_2=True)\nprint(weak_distance)\n```\n**output**\n```\n                Frechet Distance       |  StrongDistance\n                ========================================\n                Curve 1 File           |  curve_1_file.txt\n                Curve 2 File           |  curve_2_file.txt\n\n\n                Frechet Distance       |  WeakDistance\n                ========================================\n                Curve 1 File           |  curve_1_file.txt\n                Curve 2 File           |  curve_2_file.txt\n```\n\n### Accessing curve file data:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\ncurve_1_lenght = strong_distance.getCurve1Lenght()\ncurve_1 = strong_distance.getCurve1()\n\nprint(f\"Curve 1 lenght: {curve_1_lenght}\")\nprint(f\"First coordinates of curve 1: ({curve_1[0].x}, {curve_1[0].y})\")\n```\n**output**\n```\nCurve 1 lenght: 59\nFirst coordinates of curve 1: (483282.000000,  4213251.000000)\n```\n\n### Checking if path exists inside free space:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\n\nstrong_distance.setFreeSpace(epsilon=50)\nis_path = strong_distance.isReachable()\nprint(f\"Path exists for epsilon 50: {is_path}\")\n\nstrong_distance.setFreeSpace(epsilon=100)\nis_path = strong_distance.isReachable()\nprint(f\"Path exists for epsilon 100: {is_path}\")\n```\n**output**\n```\nPath exists for epsilon 50: False\nPath exists for epsilon 100: True\n```\n\n### Finding minimum epsilon for path using default binary search:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.optimise import BinarySearch\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\n\nbinary_search = BinarySearch(strong_distance)\nepsilon = binary_search.search()\n\nprint(f\"Epsilon found using binary search: {epsilon}\")\n```\n**output**\n```\nChecking if epsilon is reachable:\n    | 0 -- 6986.0 -- 13972 |\n    Eps 6986.0: <reachable>\n\nChecking if epsilon is reachable:\n    | 0 -- 3493.0 -- 6986.0 |\n    Eps 3493.0: <reachable>\n\n... ...\n\nChecking if epsilon is reachable:\n    | 67.7962646484375 -- 68.00946044921875 -- 68.22265625 |\n    Eps 68.00946044921875: <unreachable>\n\nChecking if epsilon is reachable:\n    | 68.00946044921875 -- 68.11605834960938 -- 68.22265625 |\n    Eps 68.11605834960938: <reachable> <meets percision>\n\nEpsilon found using binary search: 68.11605834960938\n```\n\n### Finding minimum epsilon for path using custom binary search:\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.optimise import BinarySearch\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\n\nbinary_search = BinarySearch(strong_distance)\nbinary_search.setBoundaries(left=50, right=100)\nbinary_search.setPercision(0.0001)\nepsilon = binary_search.search()\n\nprint(f\"Epsilon found using binary search: {epsilon}\")\n```\n**output**\n```\nChecking if epsilon is reachable:\n    | 50 -- 75.0 -- 100 |\n    Eps 75.0: <reachable>\n\nChecking if epsilon is reachable:\n    | 50 -- 62.5 -- 75.0 |\n    Eps 62.5: <unreachable>\n\n... ...\n\nChecking if epsilon is reachable:\n    | 67.1875 -- 67.96875 -- 68.75 |\n    Eps 67.96875: <unreachable>\n\nChecking if epsilon is reachable:\n    | 67.96875 -- 68.359375 -- 68.75 |\n    Eps 68.359375: <reachable> <meets percision>\n\nEpsilon found using binary search: 68.359375\n```\n\n### Visualizing free space diagram for epsilon:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.visualize import FreeSpaceDiagram\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\nstrong_distance.setFreeSpace(100)\n\nfree_space_diagram = FreeSpaceDiagram(strong_distance)\nfree_space_diagram.plot()\n```\n**output**\nFile unavailable: figure_1.png\n\n### Visualizing free space diagram for epsilon with cell gird lines and weighted cells:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.visualize import FreeSpaceDiagram\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\nstrong_distance.setFreeSpace(100)\n\nfree_space_diagram = FreeSpaceDiagram(strong_distance)\nfree_space_diagram.plot(cell_gridlines=True, weighted_cells=True)\n```\n**output**\nFile unavailable: figure_2.png\n\n### Visualizing free space diagram with sliding bar for epsilon:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.visualize import FreeSpaceDiagram\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\n\nfree_space_diagram = FreeSpaceDiagram(strong_distance)\nfree_space_diagram.addEpsilonSlider(min=50, max=500, step=50)\nfree_space_diagram.plot(cell_gridlines=True, weighted_cells=True)\n```\n**output**\nFile unavailable: figure_3.gif\n\n### Visualizing trajectories:\n**example .py**\n```\nfrom pyfrechet.distance import StrongDistance\nfrom pyfrechet.visualize import Trajectories\n\nstrong_distance = StrongDistance.setCurves(\"sample_1.txt\", \"sample_2.txt\", True)\n\ntrajectories = Trajectories(strong_distance)\ntrajectories.plot()\n```\n**output**\nFile unavailable: figure_2.png\n\n## Author\n- **Will Rodman** wrodman@tulane.edu\n\n### Version History\n- **0.1.13** 9-2-2021\n- **0.2.0** 10-3-2021 Added Trajectory class to visualize curves.\n\n### Lisence\nMIT License â€¢ Copyright (c) 2021 Computational Geometry @ Tulane",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/compgeomTU/frechetForCurves/archive/refs/tags/0.1.8.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/compgeomTU/frechetForCurves",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfrechet",
    "package_url": "https://pypi.org/project/pyfrechet/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyfrechet/",
    "project_urls": {
      "Download": "https://github.com/compgeomTU/frechetForCurves/archive/refs/tags/0.1.8.tar.gz",
      "Homepage": "https://github.com/compgeomTU/frechetForCurves"
    },
    "release_url": "https://pypi.org/project/pyfrechet/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Frechet Distance Python Library",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11751920,
  "releases": {
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa89aeed2c759789c1883ebd6fea77115d16b26b794fa6b66dc726a77e68860c",
          "md5": "09dc05644838bb515c9fdb82020cc829",
          "sha256": "b5e56f60d842ce72b71d31eb083953fc91df970013f6b12df131b40681201872"
        },
        "downloads": -1,
        "filename": "pyfrechet-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "09dc05644838bb515c9fdb82020cc829",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27579,
        "upload_time": "2021-09-02T21:22:15",
        "upload_time_iso_8601": "2021-09-02T21:22:15.446269Z",
        "url": "https://files.pythonhosted.org/packages/aa/89/aeed2c759789c1883ebd6fea77115d16b26b794fa6b66dc726a77e68860c/pyfrechet-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "457ccf974d43e6d0101f58db04c57eec92aeee7cbf478c3661efba8d6e96127c",
          "md5": "9b3d7625774fb3f860c541b1e8f9898c",
          "sha256": "8daebb683d72911c8afcee82d87d4acb2fefc520aa98b010b5057dc107b25d1e"
        },
        "downloads": -1,
        "filename": "pyfrechet-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "9b3d7625774fb3f860c541b1e8f9898c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27601,
        "upload_time": "2021-09-02T21:40:47",
        "upload_time_iso_8601": "2021-09-02T21:40:47.544067Z",
        "url": "https://files.pythonhosted.org/packages/45/7c/cf974d43e6d0101f58db04c57eec92aeee7cbf478c3661efba8d6e96127c/pyfrechet-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71de8cf1ac430e616046075935a8aab5f803d838c6d99193504b9e11e1b7dae7",
          "md5": "7ddbd3a682a97a796c4e28bb99db6b40",
          "sha256": "728718d0575467c52b70180b3c7b55a6d621220d6716025a6c34397f38538217"
        },
        "downloads": -1,
        "filename": "pyfrechet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ddbd3a682a97a796c4e28bb99db6b40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28659,
        "upload_time": "2021-10-17T17:21:50",
        "upload_time_iso_8601": "2021-10-17T17:21:50.057440Z",
        "url": "https://files.pythonhosted.org/packages/71/de/8cf1ac430e616046075935a8aab5f803d838c6d99193504b9e11e1b7dae7/pyfrechet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71de8cf1ac430e616046075935a8aab5f803d838c6d99193504b9e11e1b7dae7",
        "md5": "7ddbd3a682a97a796c4e28bb99db6b40",
        "sha256": "728718d0575467c52b70180b3c7b55a6d621220d6716025a6c34397f38538217"
      },
      "downloads": -1,
      "filename": "pyfrechet-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7ddbd3a682a97a796c4e28bb99db6b40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28659,
      "upload_time": "2021-10-17T17:21:50",
      "upload_time_iso_8601": "2021-10-17T17:21:50.057440Z",
      "url": "https://files.pythonhosted.org/packages/71/de/8cf1ac430e616046075935a8aab5f803d838c6d99193504b9e11e1b7dae7/pyfrechet-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}