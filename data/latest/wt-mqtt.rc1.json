{
  "info": {
    "author": "xiaoboplus",
    "author_email": "xiaoboplus@waveletplus.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# WaveletThings MQTT client Python SDK\n\nWaveletThings is an open-source IoT platform for data collection, processing, visualization, and device management.\n\nSDK supports:\n* 未加密和加密（TLS v1.2）连接\n* QoS 0 和 1\n* 自动重连\n* 所有设备的MQTT接口\n* 所有网关的MQTT接口\n\n当前的SDK基于`paho-mqtt`库\n\n## 安装\n\n使用pip安装：\n```shell\npip3 install wt_mqtt\n```\n\n## 快速开始\n\n初始化客户端并发布遥测数据\n```python\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient, WTPublishInfo\n\n\ntelemetry = {\"temperature\": 41.9, \"enabled\": False, \"currentFirmwareVersion\": \"v1.2.2\"}\nclient = WTDeviceMqttClient(host=\"things.xiaobodata.com\", \"A1_TEST_TOKEN\")\n# Connect to WaveletThings\nclient.connect()\n# Sending telemetry without checking the delivery status\nclient.send_telemetry(telemetry)\n# Sending telemetry and checking the delivery status (QoS = 1 by default)\nresult = client.send_telemetry(telemetry)\n# get is a blocking call that awaits delivery status\nsuccess = result.get() == WTPublishInfo.WT_ERR_SUCCESS\n# Disconnect from WaveletThings\nclient.disconnect()\n```\n\n### Connection using TLS\n\n要通过SSL上的MQTT连接到WaveletThings，首先，您应该生成一个证书，并使用如下代码：\n\n```python\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient\n\nclient = WTDeviceMqttClient(host=\"things.xiaobodata.com\", port=8883)\nclient.connect(tls=True,\n               ca_certs=\"mqttserver.pub.pem\",\n               cert_file=\"mqttclient.nopass.pem\")\nclient.disconnect()\n\n```\n\n## 使用设备API\n\nWTDeviceMQTClient提供对Things平台的设备MQTT API的访问。\n它允许发布遥测和属性更新、订阅属性更改、发送和接收RPC命令等。\n\n### 订阅共享属性更新\n如果需要接收共享属性更新，可以使用以下代码：\n```python\nfrom time import sleep\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient\n\n\ndef callback(client, content, *args):\n    print(content)\n\n\nclient = WTDeviceMqttClient(\"things.xiaobodata.com\", \"A1_TEST_TOKEN\")\nclient.connect()\nclient.subscribe_to_attribute(\"uploadFrequency\", callback)\nclient.subscribe_to_all_attributes(callback)\nwhile True:\n    sleep(1)\n```\n\n### 发布遥测数据\n\n为了向Things发送数据，可以使用如下代码：\n\n```python\nfrom time import time\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient, WTPublishInfo\n\ntelemetry_with_ts = {\"ts\": int(round(time() * 1000)), \"values\": {\"temperature\": 42.1, \"humidity\": 70}}\nclient = WTDeviceMqttClient(\"things.xiaobodata.com\", \"A1_TEST_TOKEN\")\n# we set maximum amount of messages sent to send them at the same time. it may stress memory but increases performance\nclient.max_inflight_messages_set(100)\nclient.connect()\nresults = []\nresult = True\nfor i in range(0, 100):\n    results.append(client.send_telemetry(telemetry_with_ts))\nfor tmp_result in results:\n    result &= tmp_result.get() == WTPublishInfo.WT_ERR_SUCCESS\nprint(\"Result\", str(result))\nclient.disconnect()\n```\n\n### 请求属性\n\n为了从Things请求属性值，可以使用以下示例，这个示例获取了\"configuration\", \"targetFirmwareVersion\"的值：\n```python\nfrom time import sleep\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient\n\n\ndef on_attributes_change(client, result, *args):\n    print(result)\n\n\nclient = WTDeviceMqttClient(\"things.xiaobodata.com\", \"A1_TEST_TOKEN\")\nclient.connect()\nclient.request_attributes([\"configuration\", \"targetFirmwareVersion\"], callback=on_attributes_change)\n\nwhile True:\n    sleep(1)\n```\n\n### 响应服务端的RPC回调\n如果您想发送某个RPC请求的响应，可以使用下面代码中的逻辑。\n下面的示例连接到Things本地实例并等待RPC请求。\n当接收到RPC请求时，客户机将向Things发送响应，其中包含来自具有客户机的机器的数据。\n\n```python\nimport json\nfrom time import sleep\n\nfrom psutil import cpu_percent, virtual_memory\nfrom wt_mqtt.wt_device_mqtt import WTDeviceMqttClient\n\n\n# dependently of request method we send different data back\ndef on_server_side_rpc_request(client, request_id, request_body):\n    print(request_id, request_body)\n    if request_body[\"method\"] == \"getCPULoad\":\n        client.send_rpc_reply(request_id, json.dumps({\"CPU percent\": cpu_percent()}))\n    elif request_body[\"method\"] == \"getMemoryUsage\":\n        client.send_rpc_reply(request_id, json.dumps({\"Memory\": virtual_memory().percent}))\n\n\nclient = WTDeviceMqttClient(\"things.xiaobodata.com\", \"A1_TEST_TOKEN\")\nclient.set_server_side_rpc_request_handler(on_server_side_rpc_request)\nclient.connect()\n\nwhile True:\n    sleep(1)\n```\n\n\n## 使用网关API\nWTGatewayMqttClient继承了WTDeviceMqttClient，因此可以作为常规设备访问其所有API。\n此外，网关能够代表连接到它的多个设备。\n\n### 发送遥测和属性\n\n可以使用如下代码：\n```python\nfrom time import time\nfrom wt_mqtt.wt_gateway_mqtt import WTGatewayMqttClient\n\ngateway = WTGatewayMqttClient(\"things.xiaobodata.com\", \"GATEWAY_TEST_TOKEN\")\ngateway.connect()\ngateway.gw_connect_device(\"Test Device A1\")\n\ngateway.gw_send_telemetry(\"Test Device A1\", {\"ts\": int(round(time() * 1000)), \"values\": {\"temperature\": 42.2}})\ngateway.gw_send_attributes(\"Test Device A1\", {\"firmwareVersion\": \"2.3.1\"})\n\ngateway.gw_disconnect_device(\"Test Device A1\")\ngateway.disconnect()\n```\n\n### 从server获取共享属性\n获取`Test Device A1`的共享属性，可以使用如下代码：\n```python\nfrom time import sleep\nfrom wt_mqtt.wt_gateway_mqtt import WTGatewayMqttClient\n\n\ndef callback(client, result, *args):\n    print(result)\n\n\ngateway = WTGatewayMqttClient(\"things.xiaobodata.com\", \"GATEWAY_TEST_TOKEN\")\ngateway.connect()\ngateway.gw_request_shared_attributes(\"Test Device A1\", [\"temperature\"], callback)\n\nwhile True:\n    sleep(1)\n\n```\n\n### 响应服务端的RPC回调\n可以使用如下代码：\n```python\nimport json\nfrom time import sleep\n\nfrom psutil import cpu_percent, virtual_memory\nfrom wt_mqtt.wt_gateway_mqtt import WTGatewayMqttClient\n\n\ndef rpc_request_response(client, request_id, request_body):\n    # request body contains id, method and other parameters\n    print(request_body)\n    method = request_body[\"data\"][\"method\"]\n    device = request_body[\"device\"]\n    req_id = request_body[\"data\"][\"id\"]\n    # dependently of request method we send different data back\n    if method == 'getCPULoad':\n        client.send_rpc_reply(request_id, json.dumps({\"CPU percent\": cpu_percent()}))\n    elif method == 'getMemoryLoad':\n        client.send_rpc_reply(request_id, json.dumps({\"Memory\": virtual_memory().percent}))\n    else:\n        print('Unknown method: ' + method)\n\n\ngateway = WTGatewayMqttClient(\"things.xiaobodata.com\", \"GATEWAY_TEST_TOKEN\")\ngateway.connect()\n# now rpc_request_response will process rpc requests from servers\ngateway.gw_set_server_side_rpc_request_handler(rpc_request_response)\n# without device connection it is impossible to get any messages\ngateway.gw_connect_device(\"Test Device A1\")\n\nwhile True:\n    sleep(1)\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wt-mqtt",
    "package_url": "https://pypi.org/project/wt-mqtt/",
    "platform": null,
    "project_url": "https://pypi.org/project/wt-mqtt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wt-mqtt/2.0.0/",
    "requires_dist": [
      "jsonschema (>=3.2.0)",
      "paho-mqtt (>=1.5.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "WaveletThings Python SDK",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13474662,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17d3a7ad052cd9d9a0a5b211ae384107792370c9efb0bf3e223ca2134d835682",
          "md5": "3a13045cb582ec1be7e31432c4ca968a",
          "sha256": "3fed81e0de8a2fa1e4696e683acc19f8f320ce8b3592b71cadd4f0219dd8f5fe"
        },
        "downloads": -1,
        "filename": "wt_mqtt-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a13045cb582ec1be7e31432c4ca968a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11959,
        "upload_time": "2022-04-11T07:39:59",
        "upload_time_iso_8601": "2022-04-11T07:39:59.358810Z",
        "url": "https://files.pythonhosted.org/packages/17/d3/a7ad052cd9d9a0a5b211ae384107792370c9efb0bf3e223ca2134d835682/wt_mqtt-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae8087d075eb85b85ebc184da7e26bd3942cafca4a11eb84dff3154fab5c32e",
          "md5": "248390e5d8cd9d2b050f93ba860bbb43",
          "sha256": "d1f4c18c1be60e9d8f78165b870c0281002f65197c2037097a5c95130051890b"
        },
        "downloads": -1,
        "filename": "wt_mqtt-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "248390e5d8cd9d2b050f93ba860bbb43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13771,
        "upload_time": "2022-04-11T07:40:01",
        "upload_time_iso_8601": "2022-04-11T07:40:01.072258Z",
        "url": "https://files.pythonhosted.org/packages/ca/e8/087d075eb85b85ebc184da7e26bd3942cafca4a11eb84dff3154fab5c32e/wt_mqtt-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17d3a7ad052cd9d9a0a5b211ae384107792370c9efb0bf3e223ca2134d835682",
        "md5": "3a13045cb582ec1be7e31432c4ca968a",
        "sha256": "3fed81e0de8a2fa1e4696e683acc19f8f320ce8b3592b71cadd4f0219dd8f5fe"
      },
      "downloads": -1,
      "filename": "wt_mqtt-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a13045cb582ec1be7e31432c4ca968a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11959,
      "upload_time": "2022-04-11T07:39:59",
      "upload_time_iso_8601": "2022-04-11T07:39:59.358810Z",
      "url": "https://files.pythonhosted.org/packages/17/d3/a7ad052cd9d9a0a5b211ae384107792370c9efb0bf3e223ca2134d835682/wt_mqtt-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cae8087d075eb85b85ebc184da7e26bd3942cafca4a11eb84dff3154fab5c32e",
        "md5": "248390e5d8cd9d2b050f93ba860bbb43",
        "sha256": "d1f4c18c1be60e9d8f78165b870c0281002f65197c2037097a5c95130051890b"
      },
      "downloads": -1,
      "filename": "wt_mqtt-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "248390e5d8cd9d2b050f93ba860bbb43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13771,
      "upload_time": "2022-04-11T07:40:01",
      "upload_time_iso_8601": "2022-04-11T07:40:01.072258Z",
      "url": "https://files.pythonhosted.org/packages/ca/e8/087d075eb85b85ebc184da7e26bd3942cafca4a11eb84dff3154fab5c32e/wt_mqtt-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}