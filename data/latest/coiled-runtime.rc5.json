{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Coiled Runtime\n\n[![Tests](https://github.com/coiled/coiled-runtime/actions/workflows/tests.yml/badge.svg)](https://github.com/coiled/coiled-runtime/actions/workflows/tests.yml)\n[![Linting](https://github.com/coiled/coiled-runtime/actions/workflows/lint.yml/badge.svg)](https://github.com/coiled/coiled-runtime/actions/workflows/lint.yml)\n[![Benchmarks](https://shields.io/badge/-Benchmarks-blue)](https://coiled.github.io/coiled-runtime/index.html)\n\nThe Coiled Runtime is a conda metapackage which makes it easy to get started with Dask.\n\n## Install\n\n`coiled-runtime` can be installed with `conda`:\n\n```bash\nconda install -c conda-forge coiled-runtime\n```\n\nor with `pip`:\n\n```bash\npip install coiled-runtime\n```\n\n\n**Nightly builds**\n  \n`coiled-runtime` has nightly conda packages for testing purposes.\nYou can install a nightly version of `coiled-runtime` with:\n\n```bash\nconda install -c coiled/label/dev -c dask/label/dev coiled-runtime \n```\n\n## Build\n\nTo build and install `coiled-runtime` locally, use the following steps:\n\n```bash\n# Have a local copy of the `coiled-runtime` repository\ngit clone https://github.com/coiled/coiled-runtime\ncd coiled-runtime\n\n# Make sure conda-build is installed\nconda install -c conda-forge conda-build\n\n# Build the metapackage\nconda build recipe -c conda-forge --output-folder dist/conda --no-anaconda-upload\n\n# Install the built `coiled-runtime` metapackage\nconda install -c ./dist/conda/ -c conda-forge coiled-runtime\n```\n\n## Test\n\nThe `coiled-runtime` test suite can be run locally with the following steps:\n\n1. Ensure your local machine is authenticated to use the `dask-engineering` Coiled account and\n   the Coiled Dask Engineering AWS S3 account.\n2. Create a Python environment and install development dependencies as\n   specified in `ci/environment.yml`.\n3. Install a coiled runtime environment. This might be from one of the environments\n   listed in ``environments/``, or it could be a development environment if you are\n   testing feature branches of dask or distributed. This test suite is configured\n   to run Coiled's ``package_sync`` feature, so your local environment should be copied\n   to the cluster.\n4. Run tests with `python -m pytest tests`\n\nAdditionally, tests are automatically run on pull requests to this repository.\nSee the section below on creating pull requests.\n\n## Benchmarking\n\nThe `coiled-runtime` test suite contains a series of pytest fixtures which enable\nbenchmarking metrics to be collected and stored for historical and regression analysis.\nBy default, these metrics are not collected and stored, but they can be enabled\nby including the `--benchmark` flag in your pytest invocation.\n\nFrom a high level, here is how the benchmarking works:\n\n* Data from individual test runs are collected and stored in a local sqlite database.\n  The schema for this database is stored in `benchmark_schema.py`\n* The local sqlite databases are appended to a global historical record, stored in S3.\n* The historical data can be analyzed using any of a number of tools.\n  `dashboard.py` creates a set of static HTML documents showing historical data for the tests.\n\n### Running the benchmarks locally\n\nYou can collect benchmarking data by running pytest with the `--benchmark` flag.\nThis will create a local `benchmark.db` sqlite file in the root of the repository.\nIf you run a test suite multiple times with benchmarking,\nthe data will be appended to the database.\n\nYou can compare with historical data by downloading the global database from S3 first:\n\n```bash\naws s3 cp s3://coiled-runtime-ci/benchmarks/benchmark.db ./benchmark.db\npytest --benchmark\n```\n\n### Changing the benchmark schema\n\nYou can add, remove, or modify columns by editing the SQLAlchemy schema in `benchmark_schema.py`.\nHowever, if you have a database of historical data, then the schemas of the new and old data will not match.\nIn order to account for this, you must provide a migration for the data and commit it to the repository.\nWe use `alembic` to manage SQLAlchemy migrations.\nIn the simple case of simply adding or removing a column to the schema, you can do the following:\n\n```bash\n# First, edit the `benchmark_schema.py` and commit the changes.\n\nalembic revision --autogenerate -m \"Description of migration\"\ngit add alembic/versions/name_of_new_migration.py\ngit commit -m \"Added a new migration\"\n```\n\nMigrations are automatically applied in the pytest runs, so you needn't run them yourself.\n\n### Deleting old test data\n\nAt times you might change a specific test that makes older benchmarking data irrelevant.\nIn that case, you can discard old benchmarking data for that test by applying a data migration\nremoving that data:\n\n```bash\nalembic revision -m \"Declare bankruptcy for <test-name>\"\n# Edit the migration here to do what you want.\ngit add alembic/versions/name_of_new_migration.py\ngit commit -m \"Bankruptcy migration for <test-name>\"\n```\n\nAn example of a migration that does this is [here](./alembic/versions/924e9b1430e1_spark_test_bankruptcy.py).\n\n### Using the benchmark fixtures\n\nWe have a number of pytest fixtures defined which can be used to automatically track certain metrics in the benchmark database.\nThe most relevant ones are summarized here:\n\n**`benchmark_time`**: Record wall clock time duration.\n\n**`benchmark_memory`**: Record memory usage.\n\n**`benchmark_task_durations`**: Record time spent computing, transferring data, spilling to disk, and deserializing data.\n\n**`auto_benchmark_time`**: Include this fixture to measure the wall clock time of the whole test automatically.\n\n**`benchmark_all`**: Record all available metrics.\n\nFor more information on all available fixtures and examples on how to use them, please refer to their documentation.\n\nWriting a new benchmark fixture would generally look like:\n1. Requesting the `test_run_benchmark` fixture, which yields an ORM object.\n1. Doing whatever setup work you need.\n1. `yield`ing to the test\n1. Collecting whatever information you need after the test is done.\n1. Setting the appropriate attributes on the ORM object.\n\nThe `benchmark_time` fixture provides a fairly simple example.\n\n## Investigating performance regressions\n\nIt is not always obvious what the cause of a seeming performance regression is.\nIt could be due to a new version of a direct or transitive dependency,\nand it could be due to a change in the Coiled platform.\nBut often it is due to a change in `dask` or `distributed`.\nIf you suspect that is the case, Coiled's `package_sync` feature combines well with the benchmarking infrastructure here and `git bisect`.\n\nThe following is an example workflow which could be used to identify a specific commit in `dask` which introduced a performance regression.\nThis workflow presumes you have two terminal windows open, one with the `coiled-runtime` test suite,\nand one with a `dask` repository with which to drive bisecting.\n\n#### Create your software environment\n\nYou should create a software environment which can run this test suite, but with an editable install of `dask`.\nYou can do this in any of a number of ways, but one approach coule be\n```bash\nconda env create -n test-env --file ci/environment.yml  # Create a test environment\nconda activate test-env  # Activate your test environment\npip install .  # Install the `coiled-runtime` metapackage dependencies.\n(cd <your-dask-dir> && pip install -e .)  # Do an editable install for dask\n```\n\n#### Start bisecting\n\nLet's say the current `HEAD` of `dask` is known to be bad, and `$REF` is known to be good. If you are looking at an upstream run where you have access to the static page, you can check the dates reported for each run and do a `git log` with the corresponding dates to get a list of commits to use in the bisecting process.\n\n`git log --since='2022-08-15 14:15' --until='2022-08-18 14:15' --pretty=oneline`\nIn the terminal opened to your dask repository you can initialize a bisect workflow with\n\n```bash\ncd <your-dask-dir>\ngit bisect start\ngit bisect bad\ngit bisect good $REF\n```\n\n#### Test for regressions\n\nNow that your editable install is bisecting, run a test or subset of tests which demonstrate the regression in your `coiled-runtime` terminal.\nPresume that `tests/benchmarks/test_parquet.py::test_write_wide_data` is such a test:\n\n```bash\npytest tests/benchmarks/test_parquet.py::test_write_wide_data --benchmark\n```\n\nOnce the test is done, it will have written a new entry to a local sqlite file `benchmark.db`.\nYou will want to check whether that entry displays the regression.\nExactly what that check will look like will depend on the test and the regression.\nYou might have a script that builds a chart from `benchmark.db` similar to `dashboard.py`,\nor a script that performs some kind of statistical analysis.\nBut let's assume a simpler case where you can recognize it from the `average_memory`.\nYou can query that with\n\n```bash\nsqlite3 benchmark.db \"select dask_version, average_memory from test_run where name = 'test_write_wide_data';\"\n```\n\nIf the last entry displays the regression, mark the commit in your dask terminal as `bad`:\n\n```bash\ngit bisect bad\n```\n\nIf the last entry doesn't display the regression, mark the commit in your dask terminal as `good`:\n\n```bash\ngit bisect good\n```\n\nProceed with this process until you have narrowed it down to a single commit.\nCongratulations! You've identified the source of your regression.\n\n## A/B testing\n\nIt's possible to run the Coiled Runtime benchmarks for A/B comparisons.\n[Read full documentation](AB_environments/README.md).\n\n\n## Contribute\n\nThis repository uses GitHub Actions secrets for managing authentication tokens used\nto access resources like Coiled clusters, S3 buckets, etc. However, because GitHub Actions [doesn't\ngrant access to secrets for forked repositories](https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow),\n**please submit pull requests directly from the `coiled/coiled-runtime` repository,\nnot a personal fork**.\n\n## Release\n\nTo issue a new `coiled-runtime` release:\n\n1. Locally update the `coiled-runtime` version and package pinnings specified in `recipe/meta.yaml`.\n    - When updating package version pinnings (in particular `dask` and `distributed`)\n      confirm there are no reported large scale stability issues (e.g. deadlocks) or\n      performance regressions on the `dask` / `distributed` issue trackers or offline\n      reports.\n2. Open a pull request to the `coiled-runtime` repository titled \"Release X.Y.Z\" with these changes\n   (where `X.Y.Z` is replaced with the actual version for the release).\n3. After all CI builds have passed the release pull request can be merged.\n4. Add a new git tag for the release by following the steps below on your local machine:\n\n```bash\n# Pull in changes from the Release X.Y.Z PR\ngit checkout main\ngit pull origin main\n\n# Set release version number\nexport RELEASE=X.Y.Z\n# Create and push release tag\ngit tag -a $RELEASE -m \"Version $RELEASE\"\ngit push origin main --tags\n```\n\n5. Update the `coiled-runtime` package on conda-forge by opening a pull request to the\n   [`coiled-runtime` conda-forge feedstock](https://github.com/conda-forge/coiled-runtime-feedstock)\n   which updates the `coiled-runtime` version and package version pinnings.\n    - Note that pull requests to conda-forge feedstocks must come from a fork.\n    - Reset the build number back to `0` if it isn't already.\n    - For more information on updating conda-forge packages, see the\n      [conda-forge docs](https://conda-forge.org/docs/maintainer/updating_pkgs.html).\n\n## License\n\n[BSD-3](LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coiled/coiled-runtime",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coiled-runtime",
    "package_url": "https://pypi.org/project/coiled-runtime/",
    "platform": null,
    "project_url": "https://pypi.org/project/coiled-runtime/",
    "project_urls": {
      "Homepage": "https://github.com/coiled/coiled-runtime"
    },
    "release_url": "https://pypi.org/project/coiled-runtime/0.2.1/",
    "requires_dist": [
      "pip",
      "coiled (>=0.2.41)",
      "numpy (==1.23.5)",
      "pandas (==1.5.2)",
      "dask (==2022.11.1)",
      "distributed (==2022.11.1)",
      "fsspec (==2022.11.0)",
      "s3fs (==2022.11.0)",
      "gcsfs (==2022.11.0)",
      "pyarrow (==10.0.1)",
      "jupyterlab (==3.5.0)",
      "dask-labextension (==6.0.0)",
      "lz4 (==4.0.2)",
      "ipywidgets (==7.7.2)",
      "numba (==0.56.3)",
      "scikit-learn (==1.1.3)",
      "ipycytoscape (==1.3.3)",
      "click (==8.1.3)",
      "xarray (==2022.11.0)",
      "zarr (==2.13.3)",
      "cloudpickle (==2.2.0)",
      "tornado (==6.1)",
      "toolz (==0.12.0)",
      "zict (==2.2.0)",
      "xgboost (==1.7.1)",
      "dask-ml (==2022.5.27)",
      "pynvml (==11.4.1)",
      "bokeh (==2.4.3)",
      "msgpack (==1.0.4)"
    ],
    "requires_python": "<3.11,>=3.8",
    "summary": "Simple and fast way to get started with Dask",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16001260,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233396952120d4f613a780192736355280a51e291d852ef2d9bdd7921b62c56f",
          "md5": "c44e9b305504e1ddfe0bf0cc2e337117",
          "sha256": "000b2699769a375798f2e98e6c5cecc5026793d2c6b039dd2aa369d5b013ce25"
        },
        "downloads": -1,
        "filename": "coiled_runtime-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c44e9b305504e1ddfe0bf0cc2e337117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2409,
        "upload_time": "2022-06-21T20:57:34",
        "upload_time_iso_8601": "2022-06-21T20:57:34.175725Z",
        "url": "https://files.pythonhosted.org/packages/23/33/96952120d4f613a780192736355280a51e291d852ef2d9bdd7921b62c56f/coiled_runtime-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2040e91caf4a46e026c15b3b07779a6cebb2022339579e05820352ffdf93d25",
          "md5": "34de262a948c978f7aa2320dea331a23",
          "sha256": "6258ce67466bf74bb546243f809beb0ac309388bc331aea998373c521ee13811"
        },
        "downloads": -1,
        "filename": "coiled-runtime-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34de262a948c978f7aa2320dea331a23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3870,
        "upload_time": "2022-06-21T20:57:36",
        "upload_time_iso_8601": "2022-06-21T20:57:36.348872Z",
        "url": "https://files.pythonhosted.org/packages/d2/04/0e91caf4a46e026c15b3b07779a6cebb2022339579e05820352ffdf93d25/coiled-runtime-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35cb07757625a8d94b86f516640b124b9bdfa3ddd2a5c248824f8964f30070c6",
          "md5": "44603d1726d9b59da237b38d92980714",
          "sha256": "6392ae30ee199c466ee52a74394c8b6f8f28f8802a3c67449b44b57be67e519e"
        },
        "downloads": -1,
        "filename": "coiled_runtime-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44603d1726d9b59da237b38d92980714",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.11,>=3.8",
        "size": 5720,
        "upload_time": "2022-08-18T19:49:21",
        "upload_time_iso_8601": "2022-08-18T19:49:21.882657Z",
        "url": "https://files.pythonhosted.org/packages/35/cb/07757625a8d94b86f516640b124b9bdfa3ddd2a5c248824f8964f30070c6/coiled_runtime-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbff2e3a8093074f2aaa962a7d8bfed6a2f0b33210e037915269932e3e2a3461",
          "md5": "53b87b974f1c896de9e5c1c0a3a64928",
          "sha256": "ab11405e2a0205a3b8691f0ad5395e169f13b9a628d83dd5ae975cf4de5eb66d"
        },
        "downloads": -1,
        "filename": "coiled-runtime-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53b87b974f1c896de9e5c1c0a3a64928",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.11,>=3.8",
        "size": 6453,
        "upload_time": "2022-08-18T19:49:23",
        "upload_time_iso_8601": "2022-08-18T19:49:23.839014Z",
        "url": "https://files.pythonhosted.org/packages/bb/ff/2e3a8093074f2aaa962a7d8bfed6a2f0b33210e037915269932e3e2a3461/coiled-runtime-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7013ed47d0bfe0a8347ed7f1a90a3289f3c2c4a4cba9fd6e10dd74101ede7ba",
          "md5": "f135a7667a4fae55cd9c1089f3e3280e",
          "sha256": "84a3136dd45d81b77f7c5209a504bcf0861df879cac0fb6b87bdce74d728cc25"
        },
        "downloads": -1,
        "filename": "coiled_runtime-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f135a7667a4fae55cd9c1089f3e3280e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.11,>=3.8",
        "size": 6989,
        "upload_time": "2022-11-17T21:25:20",
        "upload_time_iso_8601": "2022-11-17T21:25:20.875982Z",
        "url": "https://files.pythonhosted.org/packages/c7/01/3ed47d0bfe0a8347ed7f1a90a3289f3c2c4a4cba9fd6e10dd74101ede7ba/coiled_runtime-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43376f89bc0d87fc3f106047741fc548689f5924dbde2e4dbfc920d72fb570b0",
          "md5": "427644927b8b0df8dc0202c990bfd7dd",
          "sha256": "0956cbcee4418f9012e590bfe1824d6d99f63b000e424abae4f341bb2a85bc45"
        },
        "downloads": -1,
        "filename": "coiled-runtime-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "427644927b8b0df8dc0202c990bfd7dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.11,>=3.8",
        "size": 7828,
        "upload_time": "2022-11-17T21:25:23",
        "upload_time_iso_8601": "2022-11-17T21:25:23.300422Z",
        "url": "https://files.pythonhosted.org/packages/43/37/6f89bc0d87fc3f106047741fc548689f5924dbde2e4dbfc920d72fb570b0/coiled-runtime-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0375e6102f9e4a25c9f4ab931ccc97b4811e755497bd0bf97647f87e19b8e24",
          "md5": "bb9ed4a845937fcb201e9fe10c866b47",
          "sha256": "570d9bae3f3d5cd73de25fe016c7142471b093e5978946c13b21873522841448"
        },
        "downloads": -1,
        "filename": "coiled_runtime-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb9ed4a845937fcb201e9fe10c866b47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.11,>=3.8",
        "size": 6982,
        "upload_time": "2022-12-01T22:44:21",
        "upload_time_iso_8601": "2022-12-01T22:44:21.320511Z",
        "url": "https://files.pythonhosted.org/packages/d0/37/5e6102f9e4a25c9f4ab931ccc97b4811e755497bd0bf97647f87e19b8e24/coiled_runtime-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "931407a91bae242a9cf610077755da62c85dbd0b80b85e8cd4294e62368178b3",
          "md5": "6f503a5a40c740966efe91d98e2bcd53",
          "sha256": "dbbbe1e6e18c0a47dad238c804872f8ead97a10cc25222e57e4745463c01cff5"
        },
        "downloads": -1,
        "filename": "coiled-runtime-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f503a5a40c740966efe91d98e2bcd53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.11,>=3.8",
        "size": 7803,
        "upload_time": "2022-12-01T22:44:22",
        "upload_time_iso_8601": "2022-12-01T22:44:22.752445Z",
        "url": "https://files.pythonhosted.org/packages/93/14/07a91bae242a9cf610077755da62c85dbd0b80b85e8cd4294e62368178b3/coiled-runtime-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00e60dc065d889a574f9967f7d757cc283113177952841d3442356be55f517f",
          "md5": "120aa57ac3d558d7d8b6f08a4f7a3728",
          "sha256": "1dae85d1861bac6e4cda4eab10f666312bf47331c815e267feccfaac884c06d0"
        },
        "downloads": -1,
        "filename": "coiled_runtime-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "120aa57ac3d558d7d8b6f08a4f7a3728",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.11,>=3.8",
        "size": 6980,
        "upload_time": "2022-12-05T23:15:00",
        "upload_time_iso_8601": "2022-12-05T23:15:00.132243Z",
        "url": "https://files.pythonhosted.org/packages/e0/0e/60dc065d889a574f9967f7d757cc283113177952841d3442356be55f517f/coiled_runtime-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a4e5da22da168a49956a959f01f457d20f955608ce186e83eae00c5292a64ba",
          "md5": "b6d49d32bda3f3c3cced580de1d7c229",
          "sha256": "f64290ca793a8200014fe4f5a4e3fae4d07f7abb3c84bc994522cec0c1124411"
        },
        "downloads": -1,
        "filename": "coiled-runtime-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6d49d32bda3f3c3cced580de1d7c229",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.11,>=3.8",
        "size": 7782,
        "upload_time": "2022-12-05T23:15:01",
        "upload_time_iso_8601": "2022-12-05T23:15:01.661910Z",
        "url": "https://files.pythonhosted.org/packages/3a/4e/5da22da168a49956a959f01f457d20f955608ce186e83eae00c5292a64ba/coiled-runtime-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e00e60dc065d889a574f9967f7d757cc283113177952841d3442356be55f517f",
        "md5": "120aa57ac3d558d7d8b6f08a4f7a3728",
        "sha256": "1dae85d1861bac6e4cda4eab10f666312bf47331c815e267feccfaac884c06d0"
      },
      "downloads": -1,
      "filename": "coiled_runtime-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "120aa57ac3d558d7d8b6f08a4f7a3728",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.11,>=3.8",
      "size": 6980,
      "upload_time": "2022-12-05T23:15:00",
      "upload_time_iso_8601": "2022-12-05T23:15:00.132243Z",
      "url": "https://files.pythonhosted.org/packages/e0/0e/60dc065d889a574f9967f7d757cc283113177952841d3442356be55f517f/coiled_runtime-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a4e5da22da168a49956a959f01f457d20f955608ce186e83eae00c5292a64ba",
        "md5": "b6d49d32bda3f3c3cced580de1d7c229",
        "sha256": "f64290ca793a8200014fe4f5a4e3fae4d07f7abb3c84bc994522cec0c1124411"
      },
      "downloads": -1,
      "filename": "coiled-runtime-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b6d49d32bda3f3c3cced580de1d7c229",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.11,>=3.8",
      "size": 7782,
      "upload_time": "2022-12-05T23:15:01",
      "upload_time_iso_8601": "2022-12-05T23:15:01.661910Z",
      "url": "https://files.pythonhosted.org/packages/3a/4e/5da22da168a49956a959f01f457d20f955608ce186e83eae00c5292a64ba/coiled-runtime-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}