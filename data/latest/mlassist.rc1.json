{
  "info": {
    "author": "Debanjan Chowdhury",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "The mlassist class consists of two modules:\n\n1. mlhelper.py\n2. linregressor.py\n\n1. mlhelper.py\n\n    This module consists of one class named mlhelp. This class is responsible for performing certain functions which is     helpful in building Machine Learning models. The following are the functions performed by the class.\n\n    1. readFile()\n    2. printReport()\n    3. describe()\n    4. column_drop()\n    5. imputationNa()\n    6. scale()\n    7. vifCalc()\n    8. trainTestSplitter()\n    9. xysplit()\n\n\n    1. readFile() :\n\n       :param file_loc:\n       :return data frame:\n\n        It reads the file from file_loc and returns a pandas dataframe.\n\n        Accepted file formats are:\n        1. csv\n        2. xls\n        3. xlsx\n        4. xlsm\n        5. odf\n        6. ods\n        7. odt\n        8. json\n\n    2. printReport():\n\n        :param df:\n        :return ProfileReport(df):\n\n        It reads the dataframe and returns a Pandas Profile Report of the dataframe.\n\n    3. describe():\n\n        :param df:\n        :return df.describe():\n\n        It reads the dataframe and returns df.describe().\n\n    4. column_drop():\n\n        :param df:\n        :param column_name:\n        :return dataframe after droping the column:\n\n        It reads the dataframe and the column names to be dropped, drops those columns and returns the dataframe\n\n\n\n    5. imputationNa():\n\n        :param df:\n        :param imputation_dic:\n        :return dataframe after imputing it.:\n\n        It reads the dataframe, a dictionary \"imputation_dic\" of the following format:\n\n        imputation_dic = {'mean': ['column1'...'column n'],\n                        'median': ['column1'...'column n'],\n                        'mode': ['column1'...'column n']}\n\n        Acceptable keys for imputation_dic: 'mean', 'median', 'mode'\n\n        It imputes the nan values in the given columns with the respective key values and returns the dataframe after imputing.\n\n    6. scale():\n\n        :param df:\n        :param scale_type:\n        :param column_names (optional if all_columns = False):\n        :param all_columns:\n        :return dataframe after scaling:\n\n        It reads a dataframe df, string scale_type, list column_names, boolean all_columns\n\n        accepted values for scale_type = 'min_max', 'standard'\n        column names consists of list of all the columns on which we need to apply scaling\n        all_columns is a boolean value which is either True or False. If True, then all columns of the dataframe will be scaled.\n\n\n    7.  vifCalc():\n\n        :param df:\n        :return vif_df:\n\n        This function reads the dataframe df and calculates the vif value for every column in the dataframe. After that it creates a         dataframe\n\n        vif_df with two columns 'vif' and 'feature' and returns it.\n\n    8. trainTestSplitter():\n\n        :param x:\n        :param y:\n        :param test_size:\n        :param random_state:\n        :return xtrain, xtest, ytrain, ytest:\n\n        It reads the x value, y value, test_size, random_state\n\n        x : independent varaibles\n        y : dependent variable\n        test_size : percentage of test data\n        random_state : seed value\n\n        And splits the data into train-test based on the test_size and random split then returns the xtrain, xtest, ytrain, ytest\n\n    9. xysplit():\n\n        :param df:\n        :param y:\n        :return x1,y1:\n\n        It reads the dataframe df, the dependent variable y and splits it to independent dataframe x1 and dependent dataframe y1\n\n\n2. linregressor.py\n\n    This module consists of one class named linregressor. This class is responsible for performing certain functions which is         helpful in buildig a linear regression model. The following are the functions performed by the class.\n\n    1. linregTrain()\n    2. prediction()\n    3. test()\n\n\n    1. linregTrain():\n\n        :param xtrain:\n        :param ytrain:\n        :return train, coeff, intercept:\n\n        It takes the xtrain, ytrain, fits it and returns the training object, coeffficient value and the intercept values.\n\n    2. prediction():\n\n        :param x:\n        :return linreg.predict(x):\n\n        It takes the input values for the prediction and returns the predicted result.\n\n    3. test():\n\n         :param xtest:\n        :param ytest:\n        :param score_type:\n        :return score:\n\n        It takes input the xtest, ytest values and score_types list and returns the score list\n\n        Accpeted score_types are : 'r2_score', 'adj_r2_score'\n\n\nNow let us try to implement the functions one by one using an example dataset:\n\n# from the mlhelper module inside the mlassist package import the class mlhelp\n\nfrom mlassist.mlhelper import mlhelp\n\n# from the linregressor module inside the mlassist package import the class linregressor\n\nfrom mlassist.linregressor import linregressor\n\n#  create an object of the class mlhelp\n\nml = mlhelp()\n\n# now use the object to call all the functions\n\n# readFile()\n\ndf = ml.readFile(r'C:\\Users\\Dev\\Untitled Folder 1\\Admission_Prediction.csv')\nprint(df)\n\n# printReport()\n\nprint(ml.printReport(df))\n\n# describe()\n\nprint(ml.describe(df))\n\n# column_drop()\n\ndf = ml.column_drop(df, column_name=['Serial No.'])\nprint(df)\n\n# imputationNa()\n\nimputation_dic = {'mean': ['GRE Score','TOEFL Score','University Rating']}\ndf = ml.imputationNa(df, imputation_dic)\nprint(df)\n\n# scale()\n\ndf = ml.scale(df,scale_type='standard',all_columns=True)\nprint(df)\n\n# xysplit()\n\nx,y = ml.xysplit(df,'Chance of Admit')\nprint(x,\" \",y)\n\n# vifCalc()\n\nvif = ml.vifCalc(x)\nprint(vif)\n\n#trainTestSplitter()\n\nxtrain, xtest, ytrain, ytest = ml.trainTestSplitter(x,y,0.25,45)\nprint(xtrain)\nprint(xtest)\nprint(ytrain)\nprint(ytest)\n\n# create an object of the class linregressor\n\nlr = linregressor()\n\n# linregTrain(xtrain, ytrain)\n\ntrain, coeff, intercept = lr.linregTrain(xtrain,ytrain)\nprint(coeff)\nprint(intercept)\n\n# test()\n\nscore = lr.test(xtest,ytest,score_type=['r2_score','adj_r2_score'])\nprint(score)\n\n# prediction()\n\npred = lr.prediction(xtest)\nprint(pred)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlassist",
    "package_url": "https://pypi.org/project/mlassist/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlassist/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mlassist/0.0.3/",
    "requires_dist": [
      "pandas",
      "sklearn",
      "pandas-profiling",
      "statsmodels"
    ],
    "requires_python": ">=3.6",
    "summary": "Helping Package for creating Machine Learning models",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11334863,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab0e0b3a328cef5b4245839c1cdb549c12b9ff3c15bc8f235867f4a3df3ad2d2",
          "md5": "104b26cd10c7d7dc26bf07c7698bd66f",
          "sha256": "ae63f5fbf754fad393fb3a2925a3cd5e290a9b54a5a3580d49631f4ded2ec4d1"
        },
        "downloads": -1,
        "filename": "mlassist-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "104b26cd10c7d7dc26bf07c7698bd66f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6754,
        "upload_time": "2021-09-01T10:27:35",
        "upload_time_iso_8601": "2021-09-01T10:27:35.276692Z",
        "url": "https://files.pythonhosted.org/packages/ab/0e/0b3a328cef5b4245839c1cdb549c12b9ff3c15bc8f235867f4a3df3ad2d2/mlassist-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee06862e089af6a546585313a267ecf49f2725a1f44536a704474a2e2f75f311",
          "md5": "79d01bec5b9f601e7e2de1addd1e5f00",
          "sha256": "65c53321038cd5811588d77b04390b42525d380650f02e7c0df7aac6f2968d31"
        },
        "downloads": -1,
        "filename": "mlassist-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "79d01bec5b9f601e7e2de1addd1e5f00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5389,
        "upload_time": "2021-09-01T10:27:37",
        "upload_time_iso_8601": "2021-09-01T10:27:37.023823Z",
        "url": "https://files.pythonhosted.org/packages/ee/06/862e089af6a546585313a267ecf49f2725a1f44536a704474a2e2f75f311/mlassist-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab0e0b3a328cef5b4245839c1cdb549c12b9ff3c15bc8f235867f4a3df3ad2d2",
        "md5": "104b26cd10c7d7dc26bf07c7698bd66f",
        "sha256": "ae63f5fbf754fad393fb3a2925a3cd5e290a9b54a5a3580d49631f4ded2ec4d1"
      },
      "downloads": -1,
      "filename": "mlassist-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "104b26cd10c7d7dc26bf07c7698bd66f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6754,
      "upload_time": "2021-09-01T10:27:35",
      "upload_time_iso_8601": "2021-09-01T10:27:35.276692Z",
      "url": "https://files.pythonhosted.org/packages/ab/0e/0b3a328cef5b4245839c1cdb549c12b9ff3c15bc8f235867f4a3df3ad2d2/mlassist-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee06862e089af6a546585313a267ecf49f2725a1f44536a704474a2e2f75f311",
        "md5": "79d01bec5b9f601e7e2de1addd1e5f00",
        "sha256": "65c53321038cd5811588d77b04390b42525d380650f02e7c0df7aac6f2968d31"
      },
      "downloads": -1,
      "filename": "mlassist-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "79d01bec5b9f601e7e2de1addd1e5f00",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5389,
      "upload_time": "2021-09-01T10:27:37",
      "upload_time_iso_8601": "2021-09-01T10:27:37.023823Z",
      "url": "https://files.pythonhosted.org/packages/ee/06/862e089af6a546585313a267ecf49f2725a1f44536a704474a2e2f75f311/mlassist-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}