{
  "info": {
    "author": "David Cimadevilla",
    "author_email": "dev.davidcim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Wirinj\n======\nA comfy dependency injection library for Python 3.\n\nWhy choose wirinj\n-----------------------------------------\n\n- Minimal boiler plate code.\n- Injection via `__init__` or via _attributes_.\n- Dependencies automatically detected through [reflection](https://en.wikipedia.org/wiki/Reflection_(computer_programming)#Python).\n- No naming conventions required.\n- Zero code [factories](#factories).\n- Friendly with [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) 's [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) (e.g. with [PyCharm](https://www.jetbrains.com/pycharm/)).\n- [Autowiring](#autowiring) option.\n- [Injection reports](#injection-reports) to easily debug dependency problems.\n- Simple but powerful wiring configuration.\n- Open and extendable architecture.\n\nInstallation\n------------\n\nPython >= `3.6`\n\nTested with Python `3.6`, `3.7` and `3.8`.\n\n```shell\n$ pip install wirinj\n```\n\nTable of Contents\n=================\n\n  * [How to use it](#how-to-use-it)\n  * [Code completion on the IDE](#code-completion-on-the-ide)\n  * [Injection types](#injection-types)\n     * [Into attributes](#into-attributes)\n     * [Into __init__ arguments](#into-__init__-arguments)\n  * [Factories](#factories)\n  * [Dependency definitions](#dependency-definitions)\n     * [Definition format](#definition-format)\n     * [dict keys](#dict-keys)\n     * [dict values](#dict-values)\n     * [When to specify the class](#when-to-specify-the-class)\n     * [Creation-context-dependent definition](#creation-context-dependent-definition)\n     * [Custom-built dependencies](#custom-built-dependencies)\n     * [Custom-built dependencies with arguments](#custom-built-dependencies-with-arguments)\n     * [Split definitions](#split-definitions)\n  * [Autowiring](#autowiring)\n     * [Heuristic rules](#heuristic-rules)\n     * [Autowiring for production](#autowiring-for-production)\n     * [Autowiring report](#autowiring-report)\n     * [<em>No singletons</em> option](#no-singletons-option)\n  * [Injection reports](#injection-reports)\n     * [Debugging the injection](#debugging-the-injection)\n     * [Missing dependencies](#missing-dependencies)\n     * [Instance error](#instance-error)\n  * [A complete injection example](#a-complete-injection-example)\n\n\nHow to use it\n-------------\n\nExample ([autowiring.py](examples/basic/autowiring.py)):\n\n```python\n...\n\nclass MyService:\n    ...\n\nclass MyObject:\n    my_service: MyService = INJECTED\n    my_config: str = INJECTED\n\n    def __init__(self, param):\n        ...\n\n\nconfig = {\n    'my_config': 'some conf',\n}\n\n\n# Use a function to get access to the root dependencies\n@inject(Definitions(config), Autowiring())\ndef do(\n        my_service: MyService,\n        my_object_factory: Type[MyObject]\n):\n    print(my_service)\n\n    my_object1 = my_object_factory(10)\n    print(my_object1)\n\n\n# Inject and run it\ndo()\n```\nOutput:\n```\nmy_service = <MyService>\nmy_object1 = <MyObject> -> my_config: \"some conf\", param: 10, my_service: <MyService>\n```\n### Explanation of the example above\n`MyService` and `MyObject` are the two user classes.\n\nAttributes `my_service` and `my_config` are set with the constant `INJECTED` to indicate that they must be injected.\n\nThe function named `do`, or any other name you choose, will contain the code inside the injection context with access to any required dependency. This function is decorated with `@inject` which will inject the dependencies into the function parameters. `@inject` takes as arguments one or more dependency sources. In this case, a `Definition` for the static config values and an `Autowiring` to automatically instantiate the required objects. `wirinj` will use this ordered list of sources to locate any required dependency.\n\nAs the first parameter in the function `do` (`my_service`) is not defined in the first source (`config`), the dependency will be requested to the second one (`Autowiring`) which will lazily instantiate a `MyService` object. The class is inferred from the type annotation of the parameter. By default `Autowiring` will make the object a singleton and therefore any subsequent request for this class will get the same unique instance. \n\nThe second parameter (`my_object_factory`) is annotated as `Type[MyObject]`. `Type[]` is part of the standard  [typing](https://docs.python.org/3/library/typing.html#typing.Type) library. It indicates that the parameter is not expected to contain an object of class `MyObject` but the class `MyObject` itself or a subclass of it. Therefore you may use `my_object_factory` variable the same way you would use `MyObject` class. In the body of the function `do`, this parameter is called to instantiate a new `MyObject`. By calling `my_object_factory` instead of `MyObject` you make `wirinj` to inject all its required dependencies during the instantiation:\n ```python\n# This instantiate a MyObject but, as expected, nothing is injected.\nobj = MyObject(10)\n\n# This is the same but its dependencies are automatically injected BEFORE running __init__ \nobj = my_object_factory(10)\n```\n\nThe last line runs the function `do` with no parameters. The `@inject` decorator will inject them from the dependency sources.\n\nCode completion on the IDE\n--------------------------\n\nIf you are using an [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) such as [PyCharm](https://www.jetbrains.com/pycharm/), you will notice that [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) will work as expected in the previous example even for the factory.\n\n![](img/code_inspect.png)\n\n\nInjection types\n---------------\n\n### Into attributes\n\nExample ([attribute_injection.py](examples/injection_types/attribute_injection.py)):\n\n```python\nclass Cat:\n    feeder: Feeder = INJECTED\n\n    def __init__(self, color, weight):\n        ...\n\n@inject(...)\ndef fn(factory: Type[Cat]):\n    cat = factory('blue', 12)\n```\n\nWhen you call the factory:\n\n 1. The attributes set to `INJECTED` are located and injected.\n 1. The `__init__` method is called.\n\n\n### Into `__init__` arguments\n\nExample ([init_injection.py](examples/injection_types/init_injection.py)):\n\n```python\nclass Cat:\n    def __init__(self, color, weight, feeder: Feeder = INJECTED):\n        ...\n\n@inject(...)\ndef fn(factory: Type[Cat]):\n    cat = factory('blue', 12)\n...\n```\n\n- `color` and `weight` are passed to `__init__`.\n- `feeder` is injected.\n\nFor `__init__` injections, it is not required to set `INJECTED` as a default value. Any missing argument not passed to the constructor will be injected too. This way you can inject into third party classes whose code is not under your control. However, if you can assign `INJECTED` as a default value, the IDE won't complain about a missing argument and at the same time you will get a `MissingDependenciesError` if the dependency is missing which is helpful to early detect dependency issues.\n\nFactories\n---------\nI have already explained in the [first example](#how-to-use-it) of this README how factories are used. Now, I'm going to elaborate on that a little more.\n\nYou can think of a Python class as an object factory because if you call it as a function, you get a new instance of the object. `Wirinj` allows you to inject classes so that they can be used as factories. Unlike the original class, the injected version will also inject dependencies into the newly created objects.\n\nPay attention to the function `func` and its argument `cat_class` in this example:\n\n```python\nfrom typing import Type\n\nclass Cat:\n    pass\n\nclass BlackCat(Cat):\n    pass\n\ndef func(cat_class: Type[Cat]):\n    return cat_class()\n\nprint('Cat: ', func(Cat))\nprint('BlackCat: ', func(BlackCat))\n```\n\nOutput:\n```\nCat:  <__main__.Cat object at 0x7fc458bc7588>\nBlackCat:  <__main__.BlackCat object at 0x7fc458bc7588>\n```\n\nNote that you pass a class and not an object as an argument.\n\n`Type[Cat]`, as described in the [typing](https://docs.python.org/3/library/typing.html#typing.Type) library docs, represents the class `Cat` or a subclass of it. A parameter annotated with `Type[]` expects to receive a class and not an object. In the body of the function, the parameter can be used the same way as its subscribed class would be used.\n\nExample ([factory.py](examples/basic/factory.py)):\n\n```python\nfrom typing import Type\n\nclass Cat:\n    def __init__(self, sound):\n        ...\n\n@inject(...)\ndef fn(cat_factory: Type[Cat]):\n    cat = cat_factory('Meow')\n    print('cat:', cat)\n\nfn()\n```\nBy using the `Type[]` annotation, the IDE recognizes the parameter as if it was the original class but with the difference that any newly created object will be automatically injected.\n\n ```python\n# This instantiate a Cat object but, as expected, nothing is injected.\ncat = Cat('Meow')\n\n# This is the same but its dependencies are automatically injected BEFORE running __init__ \ncat = cat_factory('Meow')\n```\n\nYou have both things: the injection is enabled and the IDE completion is fully functional:\n\n![](img/code_inspect_cat.png)\n\n\nDependency definitions\n----------------------\n\nIn previous examples, the wiring configuration has been relegated to the automatic `Autowiring` class. However you will gain control by explicity defining how your dependencies have to be met. The general way to do this would be something like this:\n\n```python\ndefs = {\n    Cat: Instance(),\n    'dog': Singleton(Dog),\n}\n\n@inject(Definitions(defs))\n```\n\nThe `Definitions` class allows you to configure the wiring of your classes according to one or more definition `dict` parameters (`defs` in the example). The first definitions take precedence.\n\n### Definition format\n\nOne or several `dict` arguments passed to the `Definition` class define your dependency configuration. \nEach _key_ represents an argument being injected.\nThe _value_ represents how is it injected:\n\n### dict keys\n\n- If the _key_ is a `class`, it will match the argument's __type__ annotation.\nE.g.: the first key in the example above causes any argument of type `Cat`, no matter its name, to be injected with a new _instance_ of `Cat`.\n\n- If the _key_ is a `string` it will match the argument __name__.\nE.g.: the second key causes any argument with name `'dog'` to be injected with a unique `Dog` instance.\nHere, as the class can't be inferred from the key, you need to explicitly provide the class as an argument: `'dog': Singleton(Dog)`.  \n\n### dict values\n\nEach _value_ in the `dict` can be:\n\n- A _literal_ value you want to be injected. E.g. `'db_name': 'my-db'`.\n- `Instance`: inject a new instance each time.\n- `Singleton`: inject the same unique instance every time.\n- `Factory`: inject a factory object that can be called to create new injected objects dynamically.\n- `CustomInstance`: similar to `Instance` but you provide a custom function to have full control over instantiation.\n- `CustomSingleton`: similar to `Singleton` but you provide a custom function which will create the object.\n- Any other user defined subclasses of `DependencyBuilder` or `Dependency`.\n\nExample ([definition_types.py](examples/basic/definition_types.py)):\n\n```python\nclass House:\n    pass\n\n\nclass Cat:\n    pass\n\n\nclass Dog:\n    pass\n\n\ndef dog_builder():\n    \"\"\" Custom instantiation \"\"\"\n    dog = Dog()\n    dog.random = randint(50, 100)\n    return dog\n\n\ndefs = {\n    House: Singleton(),\n    Cat: Instance(),\n    Type[Cat]: Factory(),\n    Dog: CustomInstance(dog_builder),\n    Type[Dog]: Factory(),\n}\n\n\n@inject(Definitions(defs))\ndef fn(house: House, cat_factory: Type[Cat], dog_factory: Type[Dog]):\n    cat = cat_factory()\n    dog = dog_factory()\n\n    print('house:', house)\n    print('cat:', cat)\n    print('dog:', dog)\n\n\nfn()\n```\n\n### When to specify the class \n\n`Instance`, `Singleton` and `Factory` accept an optional class argument to indicate the class of the object being created.\nThere are two use cases where you need to pass the class:\n- The _key_ is a `string` and therefore the dependency class is undefined.\n- The attribute or argument being injected is annotated with a _base class_ but you want to provide a specific _subclass_ of it.\n\nExample of both use cases ([explicit_class.py](examples/basic/explicit_class.py)):\n\n```python\nclass Pet:\n    pass\n\nclass Cat(Pet):\n    pass\n\nclass Dog(Pet):\n    pass\n\ndefs = {\n    'cat': Singleton(Cat),\n    Pet: Singleton(Dog),\n}\n\n@inject(Definitions(defs))\ndef fn(cat, pet: Pet):\n    print('cat is a', cat.__class__.__name__)\n    print('pet is a', pet.__class__.__name__)    \nfn()\n```\n\nOutput:\n```\ncat is a Cat\npet is a Dog\n```\n\n### Creation-context-dependent definition \n\n```python\nclass Nail:\n    pass\n\nclass Leg:\n    def __init__(self, nail: Nail):\n        pass\n\nclass Cat:\n    def __init__(self, leg: Leg):\n        pass\n```\n\nImagine `wirinj` is injecting a `Cat` which requires a `Leg` which requires a `Nail`.\nThe injector will gather:\n - First, the `Nail` that has no dependencies.\n - Then, the `Leg` with the `Nail` as an argument.\n - Finally, the `Cat` with the `Leg` as an argument.\n\nWe can think of this process as a path: `Cat` -> nail:`Nail` -> leg:`Leg`.\nI call this the `instantiation path`. \n\nYou can explicitly specify a `instantiation path` constraint in the definition `dict`.\n\nExample ([instantiation_path.py](examples/basic/instantiation_path.py)):\n\n```python\nclass Animal:\n    def __init__(self, sound):\n        self.sound = sound\n\nclass Dog(Animal):\n    pass\n\nclass Cat(Animal):\n    pass\n\nclass Cow(Animal):\n    pass\n\ndefs = {\n    Dog: Instance(),\n    Cat: Instance(),\n    Cow: Instance(),\n\n    (Dog, 'sound'): 'woof',\n    (Cat, 'sound'): 'meow',\n    'sound': '?',\n}\n\n@inject(Definitions(defs))\ndef fn(cat: Cat, dog: Dog, cow: Cow):\n    print('Cat:', cat.sound)\n    print('Dog:', dog.sound)\n    print('Cow:', cow.sound)\n\nfn()\n```\n\nOutput:\n\n```\nCat: meow\nDog: woof\nCow: ?\n```\n\nTo restrict a definition entry to a particular `instantiation path` we use a `tuple` in the __key__ part.\nThis `tuple` must match the last entries in the `instantiation path`.\n\nFor each `tuple` entry, a `string` refers to the argument __name__ and a `class` refers to the argument __type__ annotation. \n\nIf two entries match the required dependency, the more specific one will be chosen.\n\n### Custom-built dependencies\n\n`Instance` and `Singleton` are used for simple class instantiation.\nWhen a custom process is required to create or locate the dependency, use `CustomInstance` or `CustomSingleton`.\nBoth take a `function` as an argument.\n\nExample ([custom_build.py](examples/basic/custom_build.py)):\n\n```python\nfrom random import randint\n\nfrom wirinj import CustomInstance, inject, Definitions\n\n\nclass Cat:\n    def __init__(self, color, weight):\n        self.color = color\n        self.weight = weight\n\n    def __str__(self):\n        return f'A {self.color} pounds {self.weight} cat.'\n\n\ndef create_cat(color):\n    return Cat(color, randint(4, 20))\n\n\ndefs = {\n    'color': 'blue',\n    Cat: CustomInstance(create_cat),\n}\n\n\n@inject(Definitions(defs))\ndef fn(cat1: Cat, cat2: Cat, cat3: Cat):\n    print(cat1)\n    print(cat2)\n    print(cat3)\n\n\nfn()\n```\n\nOutput:\n\n```\nA 11 pounds blue cat.\nA 5 pounds blue cat.\nA 14 pounds blue cat.\n```\n\n\n### Custom-built dependencies with arguments\n\nIn the previous example, the object is instantiated without arguments,\nso all of its `__init__` arguments are injected from dependencies.\n\nIf your constructor requires some arguments to be passed (__explicit arguments__) and others to be injected (__injection arguments__),\nI recommend to follow these rules:\n\n1. In the `__init__` method, put the _explicit arguments_ first and then the _injection arguments_.\nThis allow you to use positional arguments when you create the object.\n\n1. Set the default value of the _injection arguments_ to `INJECTED`.\nThis way the IDE [code completion](https://www.jetbrains.com/help/pycharm/auto-completing-code.html#) will not complain about missing arguments.\nAlso, this is the only way you can have defaults in your _explicit arguments_ when they are followed by _injection arguments_. \n\n1. About the builder function that you pass to `CustomInstance`, use the same name and position for the _explicit arguments_ as you use in the `__init__` method. \nThe rest of the arguments don't have to be related at all to the `__init__` arguments.\nIndeed, you can specify as many dependency arguments as you need to create the object.\nThe injection process will inspect the function signature and will provide them.\n\nExample ([custom_build_with_args.py](examples/basic/custom_build_with_args.py)):\n\n```python\nfrom random import randint\nfrom typing import Type\n\nfrom wirinj import CustomInstance, Factory, inject, Definitions\n\n\nclass Cat:\n    def __init__(self, name, color=None, weight=None):\n        self.name = name\n        self.color = color\n        self.weight = weight\n\n    def __str__(self):\n        return f'{self.name} is a {self.color} pounds {self.weight} cat.'\n\n\ndef create_cat(name, color):\n    return Cat(name, color, randint(4, 20))\n\n\ndefs = {\n    'color': 'black',\n    Cat: CustomInstance(create_cat),\n    Type[Cat]: Factory(),\n}\n\n\n@inject(Definitions(defs))\ndef fn(factory: Type[Cat]):\n    cat = factory('Tom')\n    print(cat)\n    cat2 = factory('Sam')\n    print(cat2)\n\n\nfn()\n```\n\nOutput:\n```\nTom is a 8 pounds black cat.\nSam is a 14 pounds black cat.\n```\n\nAbout the 3 arguments of `Cat`.`__init__`:\n- One comes from calling the factory.\n- Another one from the dependency configuration.\n- The third is generated by the custom creation function.\n\n\n### Split definitions\n\nYou can split the dependency configuration in several `dict` definitions.\n\nExample ([split_definitions.py](examples/basic/split_definitions.py)):\n\n```python\nclass Cat:\n    sound: str = INJECTED\n    weight: float = INJECTED\n\nconfig = {\n    'sound': 'meow',\n    'weight': 5,\n}\n\nwiring = {\n    Cat: Instance(),\n    Type[Cat]: Factory()\n}\n\n@inject(Definitions(config, wiring))\ndef fn(...):\n    ...\n```\n\n`Definitions` accepts any number of definition `dict`s.\n\n\nAutowiring\n----------\n\nYou can add an `Autowiring` instance as a last resort to provide a dependency when it is undefined.\nThe automatically created dependency will be of type `Instance`, `Singleton` or `Factory` dependening on the context.\n\nExample ([autowiring.py](examples/basic/autowiring.py)):\n\n```python\nclass MyService:\n    def __str__(self):\n        return '<MyService>'\n\n\nclass MyObject:\n    my_service: MyService = INJECTED\n    my_config: str = INJECTED\n    ...    \n\n    def __init__(self, param):\n        self.param = param\n\n\nconfig = {\n    'my_config': 'some conf',\n}\n\n\n# Use a function to get access to the root dependencies\n@inject(Definitions(config), Autowiring())\ndef do(\n        my_service: MyService,\n        my_object_factory: Type[MyObject]\n):\n    print(my_service)\n\n    my_object1 = my_object_factory(10)\n    print(my_object1)\n\n\n# Inject and run it\ndo()\n```\n\nOutput:\n\n```\n<MyService>\n<MyObject> -> my_config: \"some conf\", param: 10, my_service: <MyService>\n```\n\n`my_config` is the only dependency explicitly defined. The 3 others fall back to `Autowiring` which will automatically create:\n- A `MyService` singleton.\n- A `Type[MyObject]` factory.\n- A `MyObject` instance when the factory is called.\n\n### Heuristic rules\n\n`Autowiring` works only for arguments that have a _type annotation_:\n- If the annotation is a `class`, as with `dog: Dog` in the previous example, a _singleton_ will be generated.\n- If it is `Type[class]`, as with `horse_factory: Type[Horse]`, a _factory_ will be provided.\n- If the injection comes from a factory, as when `horse_factory()` is called, an _instance_ will be created.\n\n### Autowiring for production\n\nIn my opinion, this kind of _magic_ should not be used in production environments;\nyou should not take the risk of leaving such important wiring decisions in the hands of an heuristic algorithm.\n\nFortunately, you can use `AutowiringReport` class to easily convert the autowiring configuration into a regular dependency definition:\n\n### Autowiring report\n\nIt's quite simple to use; just pass an `AutowiringReport` instance to `Autowiring`:\n\nExample ([autowiring_report.py](examples/report/autowiring_report.py)):\n\n```python\nreport = AutowiringReport()\n\n@inject(Definitions(deps), Autowiring(report))\ndef fn(cat: Cat, dog: Dog, horse_factory: Type[Horse]):\n    ...    \n\nfn()\n\nprint(report.get())\n```\n\nOutput:\n```\n...\n--------------- wirinj ---------------\nAutowiring report:\n\nDefinitions({\n    Dog: Singleton(),\n    Type[Horse]: Factory(),\n    Horse: Instance(),\n}),\n--------------------------------------\n```\n\nCall `report.get()` to get the report.\nReview and copy the definitions to your configuration file, remove `Autowiring`, and you will be production ready.\n\n### _No singletons_ option\n\nYou may set `use_singletons` to `False` to force all dependencies to be injected as an `Instance`.\n\n```python\nAutowiring(use_singletons=False)\n```\n\n\nInjection reports\n-------------------\n\nDuring each injection process, a _dependency tree_ is built with all the dependencies that are being gathered.\n\nAs you change your code, your dependency configuration can get out of sync.\n`wirinj` include reporting features that can help you to solve this dependency issues:\n\n### Debugging the injection\n\nThe injection process can be debugged to expose the creation order and the _dependency tree_.\n\nTake this composition of classes ([cat_example_classes.py](examples/report/cat_example_classes.py)) :\n\n```python\nclass Nail:\n    pass\n\nclass Leg:\n    def __init__(self, nail1: Nail, nail2: Nail, nail3: Nail, nail4: Nail, nail5: Nail):\n        pass\n\nclass Mouth:\n    pass\n\nclass Ear:\n    pass\n\nclass Eye:\n    pass\n\nclass Head:\n    def __init__(self, mouth: Mouth, ear1: Ear, ear2: Ear, eye1: Eye, eye2: Eye):\n        pass\n\nclass Body:\n    pass\n\nclass Tail:\n    pass\n\nclass Cat:\n    def __init__(self, head: Head, body: Body, tail: Tail, leg1: Leg, leg2: Leg, leg3: Leg, leg4: Leg):\n        pass\n```\n\nWe can debug the injection process just by setting the logging level to `DEBUG` and then, requesting a `Cat` from the `Injector`:\n\nExample ([injection_debug_report.py](examples/report/injection_debug_report.py)):\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\ninj = Injector(Autowiring(use_singletons=False))\n\ncat = inj.get(Cat)\n```\nNote that we are replacing all the dependency definitions by a simple `Autowiring()`.\nWe pass the argument `use_singletons=False` to force all dependencies to be injected as an `Instance`.\nBy default `Autowiring` generates `Singleton` dependencies and, in this case, we don't want all the legs of the `Cat` to be the same.\n\nThe code above returns this:\n```\n--------------- wirinj ---------------\n        mouth:Mouth\n        ear1:Ear\n        ear2:Ear\n        eye1:Eye\n        eye2:Eye\n    head:Head\n    body:Body\n    tail:Tail\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg1:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg2:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg3:Leg\n        nail1:Nail\n        nail2:Nail\n        nail3:Nail\n        nail4:Nail\n        nail5:Nail\n    leg4:Leg\n:Cat\n--------------------------------------\n```\nYou can see how all the dependencies are gathered, and in which order.\nThe final object is the requested `Cat` object.\n\n### Missing dependencies\n\nInjection doesn't stop when a dependency is missing.\nIt continues building the _dependency tree_ as far as it can.\nThis makes it possible to fix several dependency issues in one shot.\n\nIf one ore more dependencies are missing, an `ERROR` level report will be logged.\nTherefore, you don't need to change the `logging` level to get it; just look above the _error traceback_ after a dependency exception.\n\nExample ([missing_dependencies_report.py](examples/report/missing_dependencies_report.py)):\n\n```python\n    from examples.report.cat_example_classes import Cat, Head\n    from wirinj import Injector, Definitions, Instance\n\n    inj = Injector(Definitions({\n        Cat: Instance(),\n        Head: Instance(),\n    }))\n    cat2 = inj.get(Cat)\n```\n\nIn the example above, we only define the wiring for `Cat` and `Head`.\nAll the other dependencies, such as `Mouth`, `Ear`, `Eye`, etc, are undefined.\n\nAfter running the example, we get:\n```\n--------------- wirinj ---------------\nMissing dependencies:\n        mouth:Mouth *** NotFound ***\n        ear1:Ear *** NotFound ***\n        ear2:Ear *** NotFound ***\n        eye1:Eye *** NotFound ***\n        eye2:Eye *** NotFound ***\n    head:Head\n    body:Body *** NotFound ***\n    tail:Tail *** NotFound ***\n    leg1:Leg *** NotFound ***\n    leg2:Leg *** NotFound ***\n    leg3:Leg *** NotFound ***\n    leg4:Leg *** NotFound ***\n:Cat\n--------------------------------------\nTraceback (most recent call last):\n...\nwirinj.errors.MissingDependenciesError: Missing dependencies.\n```\n\nNotice that, although the first dependency, `Mouth`, failed to be satisfied, the injection process continues in order to gather as much information as possible about the missing dependencies.\n\nWith this report, it becomes clear which classes are undefined, and what needs to be added in the injection configuration.\n\n### Instance error\n\nIf an exception is raised during the instantiation of any of the dependencies,\nyou will not get the `dependency tree` logs as it happens when a dependency is missing.\n\nYou'll need to track the stack trace to fix the problem.\nHowever, there is a task planned in the [TO-DO](TODO.md) list to log the `dependency tree` in these cases too.\n\n\n\n\n### A complete example\n\nThis silly example aims to illustrate several aspects of the `wirinj` library.\n\nThe two main classes, `Bob` and `Mike`, extend `PetDeliveryPerson`.\nThey deliver pets to the client using one or more vehicles.\nWhenever a `Vehicle` is needed, it is built in advance.\n\nWhile `Bob` uses his only vehicle by repeating the route several times, `Mike` builds a fleet of autonomous vehicles to deliver all the pets in one trip.\n\nThe classes ([pet_delivery/classes.py](examples/pet_delivery/classes.py)):\n\n```python\nclass Pet:\n    def __deps__(self, sound: str, weight):\n        self.sound = sound\n        self.weight = weight\n\n    @deps\n    def __init__(self, gift_wrapped):\n        self.gift_wrapped = gift_wrapped\n\n    def cry(self):\n        return self.sound.lower() if self.gift_wrapped else self.sound.upper()\n\n\nclass Cat(Pet):\n    pass\n\n\nclass Dog(Pet):\n    pass\n\n\nclass Bird(Pet):\n    pass\n\n\nclass Part:\n    def __deps__(self, mount_sound):\n        self.mount_sound = mount_sound\n\n    @deps\n    def __init__(self):\n        pass\n\n    def mount(self):\n        return self.mount_sound\n\n\nclass Engine(Part):\n    pass\n\n\nclass Plate(Part):\n    pass\n\n\nclass Wheel(Part):\n    pass\n\n\nclass Container(Part):\n    pass\n\n\nclass VehicleBuilder:\n\n    def __deps__(self,\n                 engine_factory: Type[Engine],\n                 plate_factory: Type[Plate],\n                 wheel_factory: Type[Wheel],\n                 container_factory: Type[Container],\n                 ):\n        self.engine_factory = engine_factory\n        self.plate_factory = plate_factory\n        self.wheel_factory = wheel_factory\n        self.container_factory = container_factory\n\n    @deps\n    def __init__(self):\n        pass\n\n    def build(self, recipe: Dict):\n        parts = []  # type: List[Part]\n        parts += [self.engine_factory() for _ in range(recipe.get('engines', 0))]\n        parts += [self.plate_factory() for _ in range(recipe.get('plates', 0))]\n        parts += [self.wheel_factory() for _ in range(recipe.get('wheels', 0))]\n        parts += [self.container_factory() for _ in range(recipe.get('containers', 0))]\n\n        mounting = ''\n        for part in parts:\n            mounting += ' ' + part.mount()\n\n        return mounting\n\n\nclass Vehicle:\n    def __deps__(self, builder: VehicleBuilder, recipe: Dict, max_load_weight):\n        self.builder = builder\n        self.recipe = recipe\n        self.max_load_weight = max_load_weight\n\n    @deps\n    def __init__(self):\n        self.pets = []\n        self.build()\n\n    def go(self, miles):\n        logger.info('{} goes {} miles'.format(self.__class__.__name__, miles))\n\n    def come_back(self):\n        logger.info('{} commes back'.format(self.__class__.__name__))\n\n    def build(self):\n        logger.info('{} is built: {}'.format(\n            self.__class__.__name__,\n            self.builder.build(self.recipe)\n        ))\n\n    def get_available_load(self):\n        return self.max_load_weight - sum(pet.weight for pet in self.pets)\n\n\nclass Car(Vehicle):\n    pass\n\n\nclass Van(Vehicle):\n    pass\n\n\nclass Truck(Vehicle):\n    pass\n\n\nclass PetLoader:\n\n    def upload(self, pets: List[Pet], vehicle: Vehicle):\n        info = 'Uploading to the {}:'.format(vehicle.__class__.__name__.lower())\n        while pets:\n            pet = pets.pop()\n            if vehicle.get_available_load() >= pet.weight:\n                vehicle.pets.append(pet)\n                info += ' ' + pet.__class__.__name__\n            else:\n                pets.append(pet)\n                break\n        logger.info(info)\n\n    def download(self, vehicle):\n        logger.info('{} pets delivered'.format(len(vehicle.pets)))\n        vehicle.pets = []\n\n\nclass PetPicker:\n\n    def __deps__(self, pet_store: Type[Pet]):\n        self.pet_store = pet_store\n\n    @deps\n    def __init__(self):\n        # raise Exception('HORROR!!!!')\n        pass\n\n    def pick(self, qty, gift_wrapped):\n        info = 'Picking pets up: '\n        pets = []\n        for _ in range(qty):\n            pet = self.pet_store(gift_wrapped)\n            info += ' ' + pet.cry()\n            pets.append(pet)\n        logger.info(info)\n        return pets\n\n\nclass PetDeliveryPerson:\n\n    @deps\n    def __init__(self):\n        pass\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n        pass\n\n\nclass Bob(PetDeliveryPerson):\n    \"\"\"Bob builds a car and deliver pets in his vehicle repeating the route several times.\"\"\"\n\n    def __deps__(self, vehicle: Vehicle, pet_picker: PetPicker, pet_loader: PetLoader):\n        self.vehicle = vehicle\n        self.pet_picker = pet_picker\n        self.pet_loader = pet_loader\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n        # Pick up pets\n        pets = self.pet_picker.pick(pet_qty, gift_wrapped)\n\n        # Bob owns one vehicle only\n        while pets:\n            self.pet_loader.upload(pets, self.vehicle)\n            self.vehicle.go(miles)\n            self.pet_loader.download(self.vehicle)\n            self.vehicle.come_back()\n\n\nclass Mike(PetDeliveryPerson):\n    \"\"\"Mike builds several autonomous vehicles and use them to deliver the pets all together\"\"\"\n\n    def __deps__(self, vehicle_factory: Type[Vehicle], pet_picker: PetPicker, pet_loader: PetLoader):\n        self.vehicle_factory = vehicle_factory\n        self.pet_picker = pet_picker\n        self.pet_loader = pet_loader\n\n    @deps\n    def __init__(self):\n        super().__init__()\n        self.vehicles = []  # type: List[Vehicle]\n\n    def get_vehicle(self):\n        if self.vehicles:\n            return self.vehicles.pop()\n        else:\n            return self.vehicle_factory()\n\n    def park_vehicles(self, vehicles):\n        self.vehicles += vehicles\n\n    def deliver(self, pet_qty, miles, gift_wrapped):\n\n        # Pick up pets\n        pets = self.pet_picker.pick(pet_qty, gift_wrapped)\n\n        # Get vehicles and upload them\n        vehicles = []\n        while pets:\n            vehicle = self.get_vehicle()\n            vehicles.append(vehicle)\n            self.pet_loader.upload(pets, vehicle)\n\n        # Go\n        for vehicle in vehicles:\n            vehicle.go(miles)\n\n        # Deliver pets\n        for vehicle in vehicles:\n            self.pet_loader.download(vehicle)\n\n        # Come back\n        for vehicle in vehicles:\n            vehicle.come_back()\n\n        # Park\n        self.park_vehicles(vehicles)\n```\n\nInjection definitions ([pet_delivery/defs.py](examples/pet_delivery/defs.py)):\n\n```python\npet_defs = {\n    Dog: Instance(),\n    Cat: Instance(),\n    Bird: Instance(),\n\n    (Dog, 'sound'): 'Woof',\n    (Dog, 'weight'): 10,\n\n    (Cat, 'sound'): 'Meow',\n    (Cat, 'weight'): 5,\n\n    (Bird, 'sound'): 'Chirp',\n    (Bird, 'weight'): 0.1,\n}\n\n\nvehicle_defs = {\n    Engine: Instance(),\n    Plate: Instance(),\n    Wheel: Instance(),\n    Container: Instance(),\n\n    Type[Engine]: Factory(),\n    Type[Plate]: Factory(),\n    Type[Wheel]: Factory(),\n    Type[Container]: Factory(),\n\n    VehicleBuilder: Singleton(),\n\n    (Engine, 'mount_sound'): 'RRRRoarrr',\n    (Plate, 'mount_sound'): 'plaf',\n    (Wheel, 'mount_sound'): 'pffff',\n    (Container, 'mount_sound'): 'BLOOOOM',\n\n    Car: Instance(),\n    (Car, 'max_load_weight'): 10,\n    (Car, 'recipe'): {\n        'engines': 1,\n        'plates': 6,\n        'wheels': 4,\n    },\n\n    Van: Instance(),\n    (Van, 'max_load_weight'): 50,\n    (Van, 'recipe'): {\n        'engines': 1,\n        'plates': 8,\n        'wheels': 4,\n    },\n\n    Truck: Instance(),\n    (Truck, 'max_load_weight'): 200,\n    (Truck, 'recipe'): {\n        'engines': 1,\n        'plates': 20,\n        'wheels': 12,\n        'container': 1,\n    },\n}\n\ncommon_defs = {\n    PetPicker: Singleton(),\n    PetLoader: Singleton(),\n\n    Bob: Singleton(),\n    Mike: Singleton(),\n}\n```\n\nRunning the app ([pet_delivery/example_1.py](examples/pet_delivery/example_1.py)):\n\n```python\nworld_one_defs = {\n    (Bob, Vehicle): Singleton(Car),\n    (Bob, PetPicker, Type[Pet]): Factory(Bird),\n\n    (Mike, Type[Vehicle]): Factory(Van),\n    (Mike, PetPicker, Type[Pet]): Factory(Cat),\n}\n\nworld_one = Definitions(\n    pet_defs,\n    vehicle_defs,\n    common_defs,\n    world_one_defs,\n)\n\nlogging.basicConfig(format='%(message)s', level=logging.INFO)\n\n@inject(world_one)\ndef do(bob: Bob, mike: Mike):\n    bob.deliver(100, 5, False)\n    bob.deliver(50, 200, True)\n\n    mike.deliver(20, 1000, True)\n\ndo()\n```\n\nRunning the same app with another wiring configuration ([pet_delivery/example_2.py](examples/pet_delivery/example_2.py)):\n\n```python\nworld_two_defs = {\n    (Bob, Vehicle): Singleton(Van),\n    (Bob, PetPicker, Type[Pet]): Factory(Cat),\n\n    (Mike, Type[Vehicle]): Factory(Truck),\n    (Mike, PetPicker, Type[Pet]): Factory(Dog),\n}\n\nworld_two = Definitions(\n    pet_defs,\n    vehicle_defs,\n    common_defs,\n    world_two_defs,\n)\n\nlogging.basicConfig(format='%(message)s', level=logging.INFO)\n\n@inject(world_two)\ndef do(bob: Bob, mike: Mike):\n    bob.deliver(100, 5, False)\n    bob.deliver(50, 200, True)\n\n    mike.deliver(20, 1000, True)\n\ndo()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidcim/wirinj",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wirinj",
    "package_url": "https://pypi.org/project/wirinj/",
    "platform": "",
    "project_url": "https://pypi.org/project/wirinj/",
    "project_urls": {
      "Homepage": "https://github.com/davidcim/wirinj"
    },
    "release_url": "https://pypi.org/project/wirinj/0.7.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A comfy dependency injection library.",
    "version": "0.7.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7369756,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4795760622a65e8569f3723f1efe31b325f490016b152e541b296182bce3905",
          "md5": "5f8a9c7f643cea62ff2a6decd49d55f6",
          "sha256": "0761a06a479c31c1e19247a92a8003e1d67be3153c7e299d9e7717c768e65d45"
        },
        "downloads": -1,
        "filename": "wirinj-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f8a9c7f643cea62ff2a6decd49d55f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15956,
        "upload_time": "2020-01-28T00:49:50",
        "upload_time_iso_8601": "2020-01-28T00:49:50.059663Z",
        "url": "https://files.pythonhosted.org/packages/b4/79/5760622a65e8569f3723f1efe31b325f490016b152e541b296182bce3905/wirinj-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e562a090369220f21f0cc43576bcac101b7b02ae32184ce22b5d40953a53dd",
          "md5": "7bd9f2e42fc7e2724acdfed6116fb743",
          "sha256": "1aa337b770fd0b9bb511c270fe283c08b3927bd78dfa019f5f996022fcbf5fce"
        },
        "downloads": -1,
        "filename": "wirinj-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7bd9f2e42fc7e2724acdfed6116fb743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10877,
        "upload_time": "2020-01-28T00:49:52",
        "upload_time_iso_8601": "2020-01-28T00:49:52.505248Z",
        "url": "https://files.pythonhosted.org/packages/d4/e5/62a090369220f21f0cc43576bcac101b7b02ae32184ce22b5d40953a53dd/wirinj-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcc573da0fa256b5aea396e7c928318d24b293a5c0cc89f79a918068698a6a89",
          "md5": "a5c39121cf7c8e83280e77b96b211253",
          "sha256": "158984ce2a0577bb363ecdb70c52fa518ac49a30e6d2cec47ca55f47aa97d64f"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5c39121cf7c8e83280e77b96b211253",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 61009,
        "upload_time": "2020-02-14T21:47:02",
        "upload_time_iso_8601": "2020-02-14T21:47:02.410266Z",
        "url": "https://files.pythonhosted.org/packages/fc/c5/73da0fa256b5aea396e7c928318d24b293a5c0cc89f79a918068698a6a89/wirinj-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "577bd3e1c001c3d2a23e27bce4e56e5dbd2eccda96bd8a135b1e61b8b7b7d800",
          "md5": "c14a38ea44bf82649ec0f41709c1ec1d",
          "sha256": "642573b30c975a4036e262e683ebea674a14a9833d1b3b8af0d1afec3a4357f6"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c14a38ea44bf82649ec0f41709c1ec1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44285,
        "upload_time": "2020-02-14T21:47:05",
        "upload_time_iso_8601": "2020-02-14T21:47:05.539597Z",
        "url": "https://files.pythonhosted.org/packages/57/7b/d3e1c001c3d2a23e27bce4e56e5dbd2eccda96bd8a135b1e61b8b7b7d800/wirinj-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e521386dcd26f3c44cf46a65cdaf29564395c21a5b362ed043e416dd2601ec3f",
          "md5": "f1ca822401578f54de73c68420ef6ffe",
          "sha256": "78d4497f841ea40bd9a46a58ca92ba9b120c3f076112a32afe595c52607a8fcc"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1ca822401578f54de73c68420ef6ffe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 91266,
        "upload_time": "2020-02-14T21:55:16",
        "upload_time_iso_8601": "2020-02-14T21:55:16.431888Z",
        "url": "https://files.pythonhosted.org/packages/e5/21/386dcd26f3c44cf46a65cdaf29564395c21a5b362ed043e416dd2601ec3f/wirinj-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54ed53a103f75a5e3e25ef5485fd2162c4b6884a189ef7c155b2fb092ddccad9",
          "md5": "74cc4b6e92d42f6f76c4dc69b028ca72",
          "sha256": "a13579f2a5d57aa564efdb36f70b2e6df1723cfb502a3dda4056343eecc0af9c"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74cc4b6e92d42f6f76c4dc69b028ca72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44254,
        "upload_time": "2020-02-14T21:55:20",
        "upload_time_iso_8601": "2020-02-14T21:55:20.962785Z",
        "url": "https://files.pythonhosted.org/packages/54/ed/53a103f75a5e3e25ef5485fd2162c4b6884a189ef7c155b2fb092ddccad9/wirinj-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e983d973d886e12cabf175307d99816a8cc91a4f542294f3e5483bc6c2fdb3e",
          "md5": "bfdbeaf5c078bfc09174397ab7fdce14",
          "sha256": "172e17461779d68fd78c2920414a8c00ed2d0bd8e959eeb45988f50d4ecced7d"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfdbeaf5c078bfc09174397ab7fdce14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 125210,
        "upload_time": "2020-02-17T23:04:10",
        "upload_time_iso_8601": "2020-02-17T23:04:10.392678Z",
        "url": "https://files.pythonhosted.org/packages/4e/98/3d973d886e12cabf175307d99816a8cc91a4f542294f3e5483bc6c2fdb3e/wirinj-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "106f2b079e3267faf0ecec295f56973dc96ed86750d76ebf8fa9200bfefc815d",
          "md5": "048c36ee7b56c0055fb17bea6d69751d",
          "sha256": "2f68ed65d7363df2406716d563a820ef56cf3d57488872aea6b3d383fc3958a0"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "048c36ee7b56c0055fb17bea6d69751d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44866,
        "upload_time": "2020-02-17T23:04:12",
        "upload_time_iso_8601": "2020-02-17T23:04:12.896150Z",
        "url": "https://files.pythonhosted.org/packages/10/6f/2b079e3267faf0ecec295f56973dc96ed86750d76ebf8fa9200bfefc815d/wirinj-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07490bcb60cb5c4de3a7ba7381e2c7bc9a5850967ef9b1969d2f95d41e87db8f",
          "md5": "d20de4a3b07417c129161bcfc61f1c4f",
          "sha256": "7547026edbb9c136c7cd48145ccc174c0658fc8f2ed4869b17b3d5e9f9e8b99e"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d20de4a3b07417c129161bcfc61f1c4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 159826,
        "upload_time": "2020-02-19T23:46:40",
        "upload_time_iso_8601": "2020-02-19T23:46:40.516400Z",
        "url": "https://files.pythonhosted.org/packages/07/49/0bcb60cb5c4de3a7ba7381e2c7bc9a5850967ef9b1969d2f95d41e87db8f/wirinj-0.6.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11095938dd0842d20563ee5eab496e8efffbbd7810841e95b067f330b93770fb",
          "md5": "87fc6e18da990e418d0532683cca07fc",
          "sha256": "f0bec180c576a2aad87a46967d136bd28238bf291f384f50d5137a22b16f7960"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "87fc6e18da990e418d0532683cca07fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45084,
        "upload_time": "2020-02-19T23:46:42",
        "upload_time_iso_8601": "2020-02-19T23:46:42.874781Z",
        "url": "https://files.pythonhosted.org/packages/11/09/5938dd0842d20563ee5eab496e8efffbbd7810841e95b067f330b93770fb/wirinj-0.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a8ffc9659cb17020d666b89e95d475e2e21d5d270e9022c04d4134e1fff7952",
          "md5": "9f82dd0a51a9dec20b879a68dd8a30fe",
          "sha256": "683c43f9fa925c97d6ad9c82fca861bafe77e1e4366d88a257017c69cfa11fc6"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f82dd0a51a9dec20b879a68dd8a30fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 229562,
        "upload_time": "2020-05-06T18:47:36",
        "upload_time_iso_8601": "2020-05-06T18:47:36.901355Z",
        "url": "https://files.pythonhosted.org/packages/8a/8f/fc9659cb17020d666b89e95d475e2e21d5d270e9022c04d4134e1fff7952/wirinj-0.6.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9828af85218c53c5f790ddebf73cf0023a6510042b4908177daf2c8d4a5e2c85",
          "md5": "3c2f0ab49760cf240cd8891f5b1684f6",
          "sha256": "0842687635022366c558e96b227dbd233b7943c57c702c44035ef927d047b59c"
        },
        "downloads": -1,
        "filename": "wirinj-0.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3c2f0ab49760cf240cd8891f5b1684f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45085,
        "upload_time": "2020-05-06T18:47:38",
        "upload_time_iso_8601": "2020-05-06T18:47:38.740553Z",
        "url": "https://files.pythonhosted.org/packages/98/28/af85218c53c5f790ddebf73cf0023a6510042b4908177daf2c8d4a5e2c85/wirinj-0.6.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d17249ac29e23d6960200a26eafcb700fad29fe9137935a836f86ee67e18cb8",
          "md5": "f99755e7fb6342ccfa91d9778b9fdb9c",
          "sha256": "4c704c0752bab8cae6086c678cce7a0641c2a60d45dd17a49c7fee6a4282bf22"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f99755e7fb6342ccfa91d9778b9fdb9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42026,
        "upload_time": "2020-05-14T22:11:47",
        "upload_time_iso_8601": "2020-05-14T22:11:47.402911Z",
        "url": "https://files.pythonhosted.org/packages/5d/17/249ac29e23d6960200a26eafcb700fad29fe9137935a836f86ee67e18cb8/wirinj-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "842a53d4edd78039537affde4eeca13ecb1803c95e8cd336a221d51a713b5137",
          "md5": "b4cd3f5c729e3134752637c5d7e96cf6",
          "sha256": "2334ac0198d12786e4ce2353e7a7d4727fbabd33f4dc991d4dedbb4f06aa6ff6"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4cd3f5c729e3134752637c5d7e96cf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 318541,
        "upload_time": "2020-05-15T12:41:43",
        "upload_time_iso_8601": "2020-05-15T12:41:43.294950Z",
        "url": "https://files.pythonhosted.org/packages/84/2a/53d4edd78039537affde4eeca13ecb1803c95e8cd336a221d51a713b5137/wirinj-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bd7d59b1230379c6bdfcec257c9a7f964bbe1488abd1b8300bd143b60bf436c",
          "md5": "b9ce824f2e5fdcf5fe67a045c6c56ff4",
          "sha256": "47a088e562e4d000c133213ca3807f6cde35447c30ee258acd7583eefd60e940"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ce824f2e5fdcf5fe67a045c6c56ff4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41662,
        "upload_time": "2020-05-15T12:41:45",
        "upload_time_iso_8601": "2020-05-15T12:41:45.421870Z",
        "url": "https://files.pythonhosted.org/packages/0b/d7/d59b1230379c6bdfcec257c9a7f964bbe1488abd1b8300bd143b60bf436c/wirinj-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "480d93f33decc626231703d29446f0342041ba7274df85b74b1328b71b63fdd5",
          "md5": "6c643e636467dcac4f245ff792c46116",
          "sha256": "58e5e9b391c17d39d28caabafa4c6f5e8f6a714e3a61704f2a115d513736563e"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c643e636467dcac4f245ff792c46116",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 362726,
        "upload_time": "2020-05-18T19:25:39",
        "upload_time_iso_8601": "2020-05-18T19:25:39.569976Z",
        "url": "https://files.pythonhosted.org/packages/48/0d/93f33decc626231703d29446f0342041ba7274df85b74b1328b71b63fdd5/wirinj-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07b4b5a56120fdf069bed1bf549ac7aaaf1f3b6fd67503da3a6a368b1db2e7d1",
          "md5": "25b2a2db080fdb55a321ad53ca78a0db",
          "sha256": "d2cfb80c7b0be84aa74d77a5a42a8d97ed4236952b74d4d969d954e54b166153"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "25b2a2db080fdb55a321ad53ca78a0db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41713,
        "upload_time": "2020-05-18T19:25:41",
        "upload_time_iso_8601": "2020-05-18T19:25:41.814433Z",
        "url": "https://files.pythonhosted.org/packages/07/b4/b5a56120fdf069bed1bf549ac7aaaf1f3b6fd67503da3a6a368b1db2e7d1/wirinj-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca7a1287a739c9dbb793fc746078b91fa2317a87b603b963654df150b7e4a11f",
          "md5": "02ab92edaa1caf0722e06b0303940f56",
          "sha256": "8259eda2c1c0a40598ffc30ebd0178dbf87be8c8522e94bf2d3f2aa34909a629"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02ab92edaa1caf0722e06b0303940f56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 408194,
        "upload_time": "2020-05-18T19:34:01",
        "upload_time_iso_8601": "2020-05-18T19:34:01.993004Z",
        "url": "https://files.pythonhosted.org/packages/ca/7a/1287a739c9dbb793fc746078b91fa2317a87b603b963654df150b7e4a11f/wirinj-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11bf78e43d1c810c6c72176faafbe708e99cce06ce8774870f8a966600c598fc",
          "md5": "cb339c4055979a8c2a07c0509b1901ff",
          "sha256": "c0a49adc31e56af8c52c9c2617ec22c5c54f7f5c76cc0e5bdf85a6ac1d708932"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb339c4055979a8c2a07c0509b1901ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41750,
        "upload_time": "2020-05-18T19:34:04",
        "upload_time_iso_8601": "2020-05-18T19:34:04.032812Z",
        "url": "https://files.pythonhosted.org/packages/11/bf/78e43d1c810c6c72176faafbe708e99cce06ce8774870f8a966600c598fc/wirinj-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d5e9665a6c1d32dc5ae7faa3664e271c63f7c9b55e4614592c9afe786427daf",
          "md5": "95ea553a9076a3520843d9d6017498f1",
          "sha256": "6c5a6b4492601728185386b4a4d2aa2d60d1bea0e01cbc1e11df41939cb28f80"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95ea553a9076a3520843d9d6017498f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 454428,
        "upload_time": "2020-05-19T12:13:17",
        "upload_time_iso_8601": "2020-05-19T12:13:17.193549Z",
        "url": "https://files.pythonhosted.org/packages/1d/5e/9665a6c1d32dc5ae7faa3664e271c63f7c9b55e4614592c9afe786427daf/wirinj-0.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ae50f8e6a8ccec13c9704791c767f8f775c38f95d203175b74cf3a406dfdee1",
          "md5": "691fa404701c4d4e5bc9408b810f8826",
          "sha256": "e4dd627928e31b0af7d3417ae26f2d78091a3d3dece3092f0dd4919ff43067a0"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "691fa404701c4d4e5bc9408b810f8826",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41697,
        "upload_time": "2020-05-19T12:13:19",
        "upload_time_iso_8601": "2020-05-19T12:13:19.352440Z",
        "url": "https://files.pythonhosted.org/packages/4a/e5/0f8e6a8ccec13c9704791c767f8f775c38f95d203175b74cf3a406dfdee1/wirinj-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98b9cee3acdbe3a2b477cc46c5b45b4ee8da3bd3b76b71f6ff4b37b4d0f16f38",
          "md5": "7d30c43f8abce1531735b477f799081d",
          "sha256": "1287c39caa549342863c7d8ac06d6e6268ad287a3448023a514fc0615aa647ed"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d30c43f8abce1531735b477f799081d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 502039,
        "upload_time": "2020-05-19T12:31:21",
        "upload_time_iso_8601": "2020-05-19T12:31:21.723390Z",
        "url": "https://files.pythonhosted.org/packages/98/b9/cee3acdbe3a2b477cc46c5b45b4ee8da3bd3b76b71f6ff4b37b4d0f16f38/wirinj-0.7.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c78bd5cdbc669716837984b372d1c7baa8c29fd29237b963b58029f415de4227",
          "md5": "091ec2c1163e8d0b178dbbcc28031769",
          "sha256": "bffc4ad4a1d755bff2e4f6b0e81d6d44442c4da2104dc82ecd09bd959dc64495"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "091ec2c1163e8d0b178dbbcc28031769",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42018,
        "upload_time": "2020-05-19T12:31:23",
        "upload_time_iso_8601": "2020-05-19T12:31:23.575298Z",
        "url": "https://files.pythonhosted.org/packages/c7/8b/d5cdbc669716837984b372d1c7baa8c29fd29237b963b58029f415de4227/wirinj-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50222853d4a87509cff511d799cf15b88a8eb31a698fe25be16a91ef02375d3c",
          "md5": "110cf0e9b7f78a52e44bfe3a874c8a18",
          "sha256": "7a3145b452f04c9996410e3c2f704bb723cb896b2cea4a801a24aa3aedb1d3d4"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "110cf0e9b7f78a52e44bfe3a874c8a18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 551884,
        "upload_time": "2020-05-22T20:37:38",
        "upload_time_iso_8601": "2020-05-22T20:37:38.373234Z",
        "url": "https://files.pythonhosted.org/packages/50/22/2853d4a87509cff511d799cf15b88a8eb31a698fe25be16a91ef02375d3c/wirinj-0.7.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eee4364b108875d25c86dcd108f1fc979b1cdc2fd54cbebb106f6169b6cd919",
          "md5": "8b02df1eaf0c474298cc62054ceb2ae6",
          "sha256": "57c095b7d7c5e8cfb88f500a1d05ad3c55bfe9a7aa3003314a66642c5e21ff6a"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8b02df1eaf0c474298cc62054ceb2ae6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42062,
        "upload_time": "2020-05-22T20:37:40",
        "upload_time_iso_8601": "2020-05-22T20:37:40.534114Z",
        "url": "https://files.pythonhosted.org/packages/6e/ee/4364b108875d25c86dcd108f1fc979b1cdc2fd54cbebb106f6169b6cd919/wirinj-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56f4d39197b6fdcd931e4d9978bef132119659054ae9ec175b4751a886bce448",
          "md5": "2245ecdcd7737db2fa79327c41cebdb0",
          "sha256": "afb70d0bf9bf522a6e85ba385be04a2b046c40fe4aba2c19fd32e3343af1f7c6"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2245ecdcd7737db2fa79327c41cebdb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23047,
        "upload_time": "2020-06-01T11:27:55",
        "upload_time_iso_8601": "2020-06-01T11:27:55.318474Z",
        "url": "https://files.pythonhosted.org/packages/56/f4/d39197b6fdcd931e4d9978bef132119659054ae9ec175b4751a886bce448/wirinj-0.7.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc9474f2b110c61f1e576ea1f32f5172b04c355e9d303ef1e40233c7e20615a4",
          "md5": "b8fc7c80f27cfb408ba73d7628eec1b9",
          "sha256": "8d3703ff46c325d27bf91614db0ab43809dc6955ec24dd66e4aade55c4e08023"
        },
        "downloads": -1,
        "filename": "wirinj-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "b8fc7c80f27cfb408ba73d7628eec1b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37889,
        "upload_time": "2020-06-01T11:27:57",
        "upload_time_iso_8601": "2020-06-01T11:27:57.122783Z",
        "url": "https://files.pythonhosted.org/packages/fc/94/74f2b110c61f1e576ea1f32f5172b04c355e9d303ef1e40233c7e20615a4/wirinj-0.7.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56f4d39197b6fdcd931e4d9978bef132119659054ae9ec175b4751a886bce448",
        "md5": "2245ecdcd7737db2fa79327c41cebdb0",
        "sha256": "afb70d0bf9bf522a6e85ba385be04a2b046c40fe4aba2c19fd32e3343af1f7c6"
      },
      "downloads": -1,
      "filename": "wirinj-0.7.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2245ecdcd7737db2fa79327c41cebdb0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23047,
      "upload_time": "2020-06-01T11:27:55",
      "upload_time_iso_8601": "2020-06-01T11:27:55.318474Z",
      "url": "https://files.pythonhosted.org/packages/56/f4/d39197b6fdcd931e4d9978bef132119659054ae9ec175b4751a886bce448/wirinj-0.7.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc9474f2b110c61f1e576ea1f32f5172b04c355e9d303ef1e40233c7e20615a4",
        "md5": "b8fc7c80f27cfb408ba73d7628eec1b9",
        "sha256": "8d3703ff46c325d27bf91614db0ab43809dc6955ec24dd66e4aade55c4e08023"
      },
      "downloads": -1,
      "filename": "wirinj-0.7.8.tar.gz",
      "has_sig": false,
      "md5_digest": "b8fc7c80f27cfb408ba73d7628eec1b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37889,
      "upload_time": "2020-06-01T11:27:57",
      "upload_time_iso_8601": "2020-06-01T11:27:57.122783Z",
      "url": "https://files.pythonhosted.org/packages/fc/94/74f2b110c61f1e576ea1f32f5172b04c355e9d303ef1e40233c7e20615a4/wirinj-0.7.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}