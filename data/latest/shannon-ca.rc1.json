{
  "info": {
    "author": "Benjamin DeMeo",
    "author_email": "bdemeo@g.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SCA (Shannon Components Analysis)\n\nShannon Components Analysis (formerly called scalpel) is a dimensionality reduction technique for single-cell data which leverages mathematical information theory to identify biologically informative axes of variation in single-cell transcriptomic data, enabling recovery of rare and common cell types at superior resolution. It is written in Python. The pre-print can be found [here](https://www.biorxiv.org/content/10.1101/2021.01.19.427303v1).\n\nRequired packages: scanpy, sklearn, numpy, scipy, fbpca, itertools\n\n## Usage\n### Dimensionality Reduction\nSCA generates information score matrices, which are used to generate linear combinations of genes (metagenes) that are biologically informative. The package includes workflows both with and without Scanpy under `sca.dimred`.\n\n#### Without Scanpy\nThe `reduce` function accepts a (num genes) x (num cells) matrix X, and outputs a dimensionality-reduced version with fewer features. The input matrix may be normalized or otherwise processed, but a zero in the input matrix must indicate zero recorded transcripts.\n```\nfrom sca.dimred import reduce\n\nX = mmread('mydata.mtx').transpose() # read some dataset\n\nreduction = reduce(X, n_comps=50, n_pcs=50, iters=1, max_bins=float('inf'))\n```\n`reduction` is an (num cells) x (comps)-dimensional matrix. The function optionally returns SCA's score matrix (if keep_scores=True), metagene loadings (if keep_loadings=True), or intermediate results (if iters>1 and keep_all_iters=True). If at least one of these is returned, the return type is a dictionary with keys for 'reduction', 'scores', and 'loadings'. If keep_all_iters=True, the reductions after each iteration will be keyed by 'reduction_i' for each iteration number i. \n\nThe starting representation by default is a PCA representation with 50 components, but the user can specify their own using `rep`. Starting neighborhoods are computed by default using cosine distance in this representation (controlled by `metric`). See the docstring for more detailed and comprehensive parameter descriptions.\n\n#### With Scanpy\nScanpy (https://github.com/theislab/scanpy) is a commonly-used single-cell workflow. To compute a reduction in place on a scanpy AnnData object, use `reduce_scanpy`:\n```\nimport scanpy as sc\nfrom sca.dimred import reduce_scanpy\n\nadata = sc.AnnData(X)\nreduce_scanpy(adata, keep_scores=True, keep_loadings=True, keep_all_iters=True, layer=None, key_added='sca', iters=1, n_comps=50, n_pcs=50)\n```\nThis function shares all parameters with `reduce`, but instead of returning the output, it updates the input AnnData object. Dimensionality reductions are stored in `adata.obsm[key_added]`, or, if keep_all_iters=True, in `adata.obsm['key_added_i']` for each iteration number i. If `keep_scores=True` in the reducer constructor, the information scores of each gene in each cell are stored in `adata.layers[key_added]`. If `layer=None`, the algorithm is run on `adata.X`; otherwise, it is run on `adata.layers[layer]`.\n\n#### [Deprecated] Curried version\n\nFirst, construct a reducer using the `info_pca` function.\n\n```\nfrom sca.dimred import info_pca\nreducer = info_pca(nbhd_size=15, n_neighbors=15, n_init_pcs=50, n_info_pcs=50, key_added='info_pca', metric='cosine',\n             max_bins=float('inf'), iters=1)\n```\nShown are the default parameters. `nbhd_size` determines the size of local neighborhoods used in comparing local vs. global expression of each gene. `n_neighbors` determines the number of neighbors in the NN graph computed at the end. `n_init_pcs` determines how many PCs to use in computing initial locales. `n_info_pcs` determines the dimensionality of the final reduction. `iters` determines the number of iterations; more iterations generally gives results more different from PCA.\n\nThe resulting reducer can be called on a scanpy object `adata`, which adds information in place. Simply run\n```\nreducer(adata)\n```\nDimensionality reductions are stored in `adata.obsm[key_added]`. If `keep_scores=True` in the reducer constructor, the information scores of each gene in each cell are stored in `adata.layers[key_added]`. Finally, the `n_neighbors`-nearest neighbor graph in the sca representation under the specified metric is stored in `adata.uns[key_added]'.\n\n### Batch correction\nSCA implements batch correction via selection of genes that have high within-batch information scores. The procedure is implemented  in the `sca.integrate` submodule by `correct` and `correct_scanpy`. The former takes a list of matrices from each batch, whereas the latter takes an AnnData object with a column indicating batch in `.obs`. They return tuples containing the corrected data, and the list of features retained.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/bendemeo/sca/archive/refs/tags/0.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bdemeo/sca",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shannon-ca",
    "package_url": "https://pypi.org/project/shannon-ca/",
    "platform": "",
    "project_url": "https://pypi.org/project/shannon-ca/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bendemeo/sca/issues",
      "Download": "https://github.com/bendemeo/sca/archive/refs/tags/0.0.1.tar.gz",
      "Homepage": "https://github.com/bdemeo/sca"
    },
    "release_url": "https://pypi.org/project/shannon-ca/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Shannon Components Analysis for informative dimensionality reduction",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9962802,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b29b16df2c284914e51147a3c106e797e633c8ad310e129441635833d5b7ce7e",
          "md5": "860721ca262949d535792ea3ca00bcf7",
          "sha256": "01aeee363f946d98e124e0ec37c3881111f296172d31ea8ec22ab0f9bdcb5ead"
        },
        "downloads": -1,
        "filename": "shannon_ca-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "860721ca262949d535792ea3ca00bcf7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 3981,
        "upload_time": "2021-04-03T01:22:38",
        "upload_time_iso_8601": "2021-04-03T01:22:38.726219Z",
        "url": "https://files.pythonhosted.org/packages/b2/9b/16df2c284914e51147a3c106e797e633c8ad310e129441635833d5b7ce7e/shannon_ca-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b22126bbaa000767ca69752ceb45294718d9b867efa5bde4dc14afeab42a58",
          "md5": "292974eb4f87ecda4117b44a049368c4",
          "sha256": "431bfda5600567540977b310dcb04e2d3fa1ee27a224e82a8e3c425fcd364cb3"
        },
        "downloads": -1,
        "filename": "shannon-ca-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "292974eb4f87ecda4117b44a049368c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 3288,
        "upload_time": "2021-04-03T01:22:39",
        "upload_time_iso_8601": "2021-04-03T01:22:39.935417Z",
        "url": "https://files.pythonhosted.org/packages/b7/b2/2126bbaa000767ca69752ceb45294718d9b867efa5bde4dc14afeab42a58/shannon-ca-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b29b16df2c284914e51147a3c106e797e633c8ad310e129441635833d5b7ce7e",
        "md5": "860721ca262949d535792ea3ca00bcf7",
        "sha256": "01aeee363f946d98e124e0ec37c3881111f296172d31ea8ec22ab0f9bdcb5ead"
      },
      "downloads": -1,
      "filename": "shannon_ca-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "860721ca262949d535792ea3ca00bcf7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 3981,
      "upload_time": "2021-04-03T01:22:38",
      "upload_time_iso_8601": "2021-04-03T01:22:38.726219Z",
      "url": "https://files.pythonhosted.org/packages/b2/9b/16df2c284914e51147a3c106e797e633c8ad310e129441635833d5b7ce7e/shannon_ca-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7b22126bbaa000767ca69752ceb45294718d9b867efa5bde4dc14afeab42a58",
        "md5": "292974eb4f87ecda4117b44a049368c4",
        "sha256": "431bfda5600567540977b310dcb04e2d3fa1ee27a224e82a8e3c425fcd364cb3"
      },
      "downloads": -1,
      "filename": "shannon-ca-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "292974eb4f87ecda4117b44a049368c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 3288,
      "upload_time": "2021-04-03T01:22:39",
      "upload_time_iso_8601": "2021-04-03T01:22:39.935417Z",
      "url": "https://files.pythonhosted.org/packages/b7/b2/2126bbaa000767ca69752ceb45294718d9b867efa5bde4dc14afeab42a58/shannon-ca-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}