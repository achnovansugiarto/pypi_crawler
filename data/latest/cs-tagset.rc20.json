{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Tags and sets of tags\nwith __format__ support and optional ontology information.\n\n*Latest release 20230212*:\nMark TagSetCriterion as Promotable.\n\nSee `cs.fstags` for support for applying these to filesystem objects\nsuch as directories and files.\n\nSee `cs.sqltags` for support for databases of entities with tags,\nnot directly associated with filesystem objects.\nThis is suited to both log entries (entities with no \"name\")\nand large collections of named entities;\nboth accept `Tag`s and can be searched on that basis.\n\nAll of the available complexity is optional:\nyou can use `Tag`s without bothering with `TagSet`s\nor `TagsOntology`s.\n\nThis module contains the following main classes:\n* `Tag`: an object with a `.name` and optional `.value` (default `None`)\n  and also an optional reference `.ontology`\n  for associating semantics with tag values.\n  The `.value`, if not `None`, will often be a string,\n  but may be any Python object.\n  If you're using these via `cs.fstags`,\n  the object will need to be JSON transcribeable.\n* `TagSet`: a `dict` subclass representing a set of `Tag`s\n  to associate with something;\n  it also has setlike `.add` and `.discard` methods.\n  As such it only supports a single `Tag` for a given tag name,\n  but that tag value can of course be a sequence or mapping\n  for more elaborate tag values.\n* `TagsOntology`:\n  a mapping of type names to `TagSet`s defining the type\n  and also to entries for the metadata for specific per-type values.\n\nHere's a simple example with some `Tag`s and a `TagSet`.\n\n    >>> tags = TagSet()\n    >>> # add a \"bare\" Tag named 'blue' with no value\n    >>> tags.add('blue')\n    >>> # add a \"topic=tagging\" Tag\n    >>> tags.set('topic', 'tagging')\n    >>> # make a \"subtopic\" Tag and add it\n    >>> subtopic = Tag('subtopic', 'ontologies')\n    >>> tags.add(subtopic)\n    >>> # Tags have nice repr() and str()\n    >>> subtopic\n    Tag(name='subtopic',value='ontologies')\n    >>> print(subtopic)\n    subtopic=ontologies\n    >>> # a TagSet also has a nice repr() and str()\n    >>> tags\n    TagSet:{'blue': None, 'topic': 'tagging', 'subtopic': 'ontologies'}\n    >>> print(tags)\n    blue subtopic=ontologies topic=tagging\n    >>> tags2 = TagSet({'a': 1}, b=3, c=[1,2,3], d='dee')\n    >>> tags2\n    TagSet:{'a': 1, 'b': 3, 'c': [1, 2, 3], 'd': 'dee'}\n    >>> print(tags2)\n    a=1 b=3 c=[1,2,3] d=dee\n    >>> # since you can print a TagSet to a file as a line of text\n    >>> # you can get it back from a line of text\n    >>> TagSet.from_line('a=1 b=3 c=[1,2,3] d=dee')\n    TagSet:{'a': 1, 'b': 3, 'c': [1, 2, 3], 'd': 'dee'}\n    >>> # because TagSets are dicts you can format strings with them\n    >>> print('topic:{topic} subtopic:{subtopic}'.format_map(tags))\n    topic:tagging subtopic:ontologies\n    >>> # TagSets have convenient membership tests\n    >>> # test for blueness\n    >>> 'blue' in tags\n    True\n    >>> # test for redness\n    >>> 'red' in tags\n    False\n    >>> # test for any \"subtopic\" tag\n    >>> 'subtopic' in tags\n    True\n    >>> # test for subtopic=ontologies\n    >>> print(subtopic)\n    subtopic=ontologies\n    >>> subtopic in tags\n    True\n    >>> # test for subtopic=libraries\n    >>> subtopic2 = Tag('subtopic', 'libraries')\n    >>> subtopic2 in tags\n    False\n\n## Ontologies\n\n`Tag`s and `TagSet`s suffice to apply simple annotations to things.\nHowever, an ontology brings meaning to those annotations.\n\nSee the `TagsOntology` class for implementation details,\naccess methods and more examples.\n\nConsider a record about a movie, with these tags (a `TagSet`):\n\n    title=\"Avengers Assemble\"\n    series=\"Avengers (Marvel)\"\n    cast={\"Scarlett Johansson\":\"Black Widow (Marvel)\"}\n\nwhere we have the movie title,\na name for the series in which it resides,\nand a cast as an association of actors with roles.\n\nAn ontology lets us associate implied types and metadata with these values.\n\nHere's an example ontology supporting the above `TagSet`:\n\n    type.cast type=dict key_type=person member_type=character description=\"members of a production\"\n    type.character description=\"an identified member of a story\"\n    type.series type=str\n    character.marvel.black_widow type=character names=[\"Natasha Romanov\"]\n    person.scarlett_johansson fullname=\"Scarlett Johansson\" bio=\"Known for Black Widow in the Marvel stories.\"\n\nThe type information for a `cast`\nis defined by the ontology entry named `type.cast`,\nwhich tells us that a `cast` `Tag` is a `dict`,\nwhose keys are of type `person`\nand whose values are of type `character`.\n(The default type is `str`.)\n\nTo find out the underlying type for a `character`\nwe look that up in the ontology in turn;\nbecause it does not have a specified `type` `Tag`, it it taken to be a `str`.\n\nHaving the types for a `cast`,\nit is now possible to look up the metadata for the described cast members.\n\nThe key `\"Scarlett Johansson\"` is a `person`\n(from the type definition of `cast`).\nThe ontology entry for her is named `person.scarlett_johansson`\nwhich is computed as:\n* `person`: the type name\n* `scarlett_johansson`: obtained by downcasing `\"Scarlett Johansson\"`\n  and replacing whitespace with an underscore.\n  The full conversion process is defined\n  by the `TagsOntology.value_to_tag_name` function.\n\nThe key `\"Black Widow (Marvel)\"` is a `character`\n(again, from the type definition of `cast`).\nThe ontology entry for her is named `character.marvel.black_widow`\nwhich is computed as:\n* `character`: the type name\n* `marvel.black_widow`: obtained by downcasing `\"Black Widow (Marvel)\"`,\n  replacing whitespace with an underscore,\n  and moving a bracketed suffix to the front as an unbracketed prefix.\n  The full conversion process is defined\n  by the `TagsOntology.value_to_tag_name` function.\n\n## Format Strings\n\nYou can just use `str.format_map` as shown above\nfor the direct values in a `TagSet`,\nsince it subclasses `dict`.\n\nHowever, `TagSet`s also subclass `cs.lex.FormatableMixin`\nand therefore have a richer `format_as` method which has an extended syntax\nfor the format component.\nCommand line tools like `fstags` use this for output format specifications.\n\nAn example:\n\n    >>> # an ontology specifying the type for a colour\n    >>> # and some information about the colour \"blue\"\n    >>> ont = TagsOntology(\n    ...   {\n    ...       'type.colour':\n    ...       TagSet(description=\"a colour, a hue\", type=\"str\"),\n    ...       'colour.blue':\n    ...       TagSet(\n    ...           url='https://en.wikipedia.org/wiki/Blue',\n    ...           wavelengths='450nm-495nm'\n    ...       ),\n    ...   }\n    ... )\n    >>> # tag set with a \"blue\" tag, using the ontology above\n    >>> tags = TagSet(colour='blue', labels=['a', 'b', 'c'], size=9, _ontology=ont)\n    >>> tags.format_as('The colour is {colour}.')\n    'The colour is blue.'\n    >>> # format a string about the tags showing some metadata about the colour\n    >>> tags.format_as('Information about the colour may be found here: {colour:metadata.url}')\n    'Information about the colour may be found here: https://en.wikipedia.org/wiki/Blue'\n\n## Function `as_unixtime(tag_value)`\n\nConvert a tag value to a UNIX timestamp.\n\nThis accepts `int`, `float` (already a timestamp)\nand `date` or `datetime`\n(use `datetime.timestamp() for a nonnaive `datetime`,\notherwise `time.mktime(tag_value.time_tuple())`,\nwhich assumes the local time zone).\n\n## Class `BaseTagSets(cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, collections.abc.MutableMapping, collections.abc.Mapping, collections.abc.Collection, collections.abc.Sized, collections.abc.Iterable, collections.abc.Container)`\n\nBase class for collections of `TagSet` instances\nsuch as `cs.fstags.FSTags` and `cs.sqltags.SQLTags`.\n\nExamples of this include:\n* `cs.fstags.FSTags`: a mapping of filesystem paths to their associated `TagSet`\n* `cs.sqltags.SQLTags`: a mapping of names to `TagSet`s stored in an SQL database\n\nSubclasses must implement:\n* `get(name,default=None)`: return the `TagSet` associated\n  with `name`, or `default`.\n* `__setitem__(name,tagset)`: associate a `TagSet`with the key `name`;\n  this is called by the `__missing__` method with a newly created `TagSet`.\n* `keys(self)`: return an iterable of names\n\nSubclasses may reasonably want to override the following:\n* `startup_shutdown(self)`: context manager to allocate and release any\n  needed resources such as database connections\n\nSubclasses may implement:\n* `__len__(self)`: return the number of names\n\nThe `TagSet` factory used to fetch or create a `TagSet` is\nnamed `TagSetClass`. The default implementation honours two\nclass attributes:\n* `TAGSETCLASS_DEFAULT`: initially `TagSet`\n* `TAGSETCLASS_PREFIX_MAPPING`: a mapping of type names to `TagSet` subclasses\n\nThe type name of a `TagSet` name is the first dotted component.\nFor example, `artist.nick_cave` has the type name `artist`.\nA subclass of `BaseTagSets` could utiliise an `ArtistTagSet` subclass of `TagSet`\nand provide:\n\n    TAGSETCLASS_PREFIX_MAPPING = {\n      'artist': ArtistTagSet,\n    }\n\nin its class definition. Accesses to `artist.`* entities would\nresult in `ArtistTagSet` instances and access to other enitities\nwould result in ordinary `TagSet` instances.\n\n*Method `BaseTagSets.__init__(self, *, ontology=None)`*:\nInitialise the collection.\n\n## Class `MappingTagSets(BaseTagSets, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, collections.abc.MutableMapping, collections.abc.Mapping, collections.abc.Collection, collections.abc.Sized, collections.abc.Iterable, collections.abc.Container)`\n\nA `BaseTagSets` subclass using an arbitrary mapping.\n\nIf no mapping is supplied, a `dict` is created for the purpose.\n\nExample:\n\n    >>> tagsets = MappingTagSets()\n    >>> list(tagsets.keys())\n    []\n    >>> tagsets.get('foo')\n    >>> tagsets['foo'] = TagSet(bah=1, zot=2)\n    >>> list(tagsets.keys())\n    ['foo']\n    >>> tagsets.get('foo')\n    TagSet:{'bah': 1, 'zot': 2}\n    >>> list(tagsets.keys(prefix='foo'))\n    ['foo']\n    >>> list(tagsets.keys(prefix='bah'))\n    []\n\n## Class `RegexpTagRule`\n\nA regular expression based `Tag` rule.\n\nThis applies a regular expression to a string\nand returns inferred `Tag`s.\n\n## Function `selftest(argv)`\n\nRun some ad hoc self tests.\n\n## Class `Tag(Tag, builtins.tuple, cs.lex.FormatableMixin, cs.lex.FormatableFormatter, string.Formatter)`\n\nA `Tag` has a `.name` (`str`) and a `.value`\nand an optional `.ontology`.\n\nThe `name` must be a dotted identifier.\n\nTerminology:\n* A \"bare\" `Tag` has a `value` of `None`.\n* A \"naive\" `Tag` has an `ontology` of `None`.\n\nThe constructor for a `Tag` is unusual:\n* both the `value` and `ontology` are optional,\n  defaulting to `None`\n* if `name` is a `str` then we always construct a new `Tag`\n  with the suppplied values\n* if `name` is not a `str`\n  it should be a `Tag`like object to promote;\n  it is an error if the `value` parameter is not `None`\n  in this case\n* an optional `prefix` may be supplied\n  which is prepended to `name` with a dot (`'.'`) if not empty\n\nThe promotion process is as follows:\n* if `name` is a `Tag` subinstance\n  then if the supplied `ontology` is not `None`\n  and is not the ontology associated with `name`\n  then a new `Tag` is made,\n  otherwise the original `Tag` is returned unchanged\n* otherwise a new `Tag` is made from `name`\n  using its `.value`\n  and overriding its `.ontology`\n  if the `ontology` parameter is not `None`\n\nExamples:\n\n    >>> ont = TagsOntology({'colour.blue': TagSet(wavelengths='450nm-495nm')})\n    >>> tag0 = Tag('colour', 'blue')\n    >>> tag0\n    Tag(name='colour',value='blue')\n    >>> tag = Tag(tag0)\n    >>> tag\n    Tag(name='colour',value='blue')\n    >>> tag = Tag(tag0, ontology=ont)\n    >>> tag # doctest: +ELLIPSIS\n    Tag(name='colour',value='blue',ontology=...)\n    >>> tag = Tag(tag0, prefix='surface')\n    >>> tag\n    Tag(name='surface.colour',value='blue')\n\n*Method `Tag.__init__(self, *a, **kw)`*:\nDummy `__init__` to avoid `FormatableMixin.__init__`\nbecause we subclass `namedtuple` which has no `__init__`.\n\n## Function `tag_or_tag_value(*da, **dkw)`\n\nA decorator for functions or methods which may be called as:\n\n    func(name[,value])\n\nor as:\n\n    func(Tag)\n\nThe optional decorator argument `no_self` (default `False`)\nshould be supplied for plain functions\nas they have no leading `self` parameter to accomodate.\n\nExample:\n\n    @tag_or_tag_value\n    def add(self, tag_name, value, *, verbose=None):\n\nThis defines a `.add()` method\nwhich can be called with `name` and `value`\nor with single `Tag`like object\n(something with `.name` and `.value` attributes),\nfor example:\n\n    tags = TagSet()\n    ....\n    tags.add('colour', 'blue')\n    ....\n    tag = Tag('size', 9)\n    tags.add(tag)\n\n## Class `TagBasedTest(TagBasedTest, builtins.tuple, TagSetCriterion, cs.deco.Promotable)`\n\nA test based on a `Tag`.\n\nAttributes:\n* `spec`: the source text from which this choice was parsed,\n  possibly `None`\n* `choice`: the apply/reject flag\n* `tag`: the `Tag` representing the criterion\n* `comparison`: an indication of the test comparison\n\nThe following comparison values are recognised:\n* `None`: test for the presence of the `Tag`\n* `'='`: test that the tag value equals `tag.value`\n* `'<'`: test that the tag value is less than `tag.value`\n* `'<='`: test that the tag value is less than or equal to `tag.value`\n* `'>'`: test that the tag value is greater than `tag.value`\n* `'>='`: test that the tag value is greater than or equal to `tag.value`\n* `'~/'`: test if the tag value as a regexp is present in `tag.value`\n* '~': test if a matching tag value is present in `tag.value`\n\n## Class `TagFile(cs.fs.FSPathBasedSingleton, cs.obj.SingletonMixin, cs.fs.HasFSPath, BaseTagSets, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, collections.abc.MutableMapping, collections.abc.Mapping, collections.abc.Collection, collections.abc.Sized, collections.abc.Iterable, collections.abc.Container)`\n\nA reference to a specific file containing tags.\n\nThis manages a mapping of `name` => `TagSet`,\nitself a mapping of tag name => tag value.\n\n## Class `TagsCommandMixin`\n\nUtility methods for `cs.cmdutils.BaseCommand` classes working with tags.\n\nOptional subclass attributes:\n* `TAGSET_CRITERION_CLASS`: a `TagSetCriterion` duck class,\n  default `TagSetCriterion`.\n  For example, `cs.sqltags` has a subclass\n  with an `.extend_query` method for computing an SQL JOIN\n  used in searching for tagged entities.\n\n## Class `TagSet(builtins.dict, cs.dateutils.UNIXTimeMixin, cs.lex.FormatableMixin, cs.lex.FormatableFormatter, string.Formatter, cs.mappings.AttrableMappingMixin)`\n\nA setlike class associating a set of tag names with values.\n\nThis actually subclasses `dict`, so a `TagSet` is a direct\nmapping of tag names to values.\nIt accepts attribute access to simple tag values when they\ndo not conflict with the class methods;\nthe reliable method is normal item access.\n\n*NOTE*: iteration yields `Tag`s, not dict keys.\n\nAlso note that all the `Tags` from a `TagSet`\nshare its ontology.\n\nSubclasses should override the `set` and `discard` methods;\nthe `dict` and mapping methods\nare defined in terms of these two basic operations.\n\n`TagSet`s have a few special properties:\n* `id`: a domain specific identifier;\n  this may reasonably be `None` for entities\n  not associated with database rows;\n  the `cs.sqltags.SQLTags` class associates this\n  with the database row id.\n* `name`: the entity's name;\n  a read only alias for the `'name'` `Tag`.\n  The `cs.sqltags.SQLTags` class defines \"log entries\"\n  as `TagSet`s with no `name`.\n* `unixtime`: a UNIX timestamp,\n  a `float` holding seconds since the UNIX epoch\n  (midnight, 1 January 1970 UTC).\n  This is typically the row creation time\n  for entities associated with database rows,\n  but usually the event time for `TagSet`s describing an event.\n\nBecause ` TagSet` subclasses `cs.mappings.AttrableMappingMixin`\nyou can also access tag values as attributes\n*provided* that they do not conflict with instance attributes\nor class methods or properties.\nThe `TagSet` class defines the class attribute `ATTRABLE_MAPPING_DEFAULT`\nas `None` which causes attribute access to return `None`\nfor missing tag names.\nThis supports code like:\n\n    if tags.title:\n        # use the title in something\n    else:\n        # handle a missing title tag\n\n*Method `TagSet.__init__(self, *a, _id=None, _ontology=None, **kw)`*:\nInitialise the `TagSet`.\n\nParameters:\n* positional parameters initialise the `dict`\n  and are passed to `dict.__init__`\n* `_id`: optional identity value for databaselike implementations\n* `_ontology`: optional `TagsOntology to use for this `TagSet`\n* other alphabetic keyword parameters are also used to initialise the\n  `dict` and are passed to `dict.__init__`\n\n## Class `TagSetCriterion(cs.deco.Promotable)`\n\nA testable criterion for a `TagSet`.\n\n## Class `TagSetPrefixView(cs.lex.FormatableMixin, cs.lex.FormatableFormatter, string.Formatter)`\n\nA view of a `TagSet` via a `prefix`.\n\nAccess to a key `k` accesses the `TagSet`\nwith the key `prefix+'.'+k`.\n\nThis is a kind of funny hybrid of a `Tag` and a `TagSet`\nin that some things such as `__format__`\nwill format the `Tag` named `prefix` if it exists\nin preference to the subtags.\n\nExample:\n\n    >>> tags = TagSet(a=1, b=2)\n    >>> tags\n    TagSet:{'a': 1, 'b': 2}\n    >>> tags['sub.x'] = 3\n    >>> tags['sub.y'] = 4\n    >>> tags\n    TagSet:{'a': 1, 'b': 2, 'sub.x': 3, 'sub.y': 4}\n    >>> sub = tags.sub\n    >>> sub\n    TagSetPrefixView:sub.{'x': 3, 'y': 4}\n    >>> sub.z = 5\n    >>> sub\n    TagSetPrefixView:sub.{'x': 3, 'y': 4, 'z': 5}\n    >>> tags\n    TagSet:{'a': 1, 'b': 2, 'sub.x': 3, 'sub.y': 4, 'sub.z': 5}\n\n## Class `TagSetsSubdomain(cs.obj.SingletonMixin, cs.mappings.PrefixedMappingProxy, cs.mappings.RemappedMappingProxy)`\n\nA view into a `BaseTagSets` for keys commencing with a prefix\nbeing the subdomain plus a dot (`'.'`).\n\n## Class `TagsOntology(cs.obj.SingletonMixin, BaseTagSets, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, collections.abc.MutableMapping, collections.abc.Mapping, collections.abc.Collection, collections.abc.Sized, collections.abc.Iterable, collections.abc.Container)`\n\nAn ontology for tag names.\nThis is based around a mapping of names\nto ontological information expressed as a `TagSet`.\n\nNormally an object's tags are not a self contained repository of all the information;\ninstead a tag just names some information.\n\nAs a example, consider the tag `colour=blue`.\nMeta information about `blue` is obtained via the ontology,\nwhich has an entry for the colour `blue`.\nWe adopt the convention that the type is just the tag name,\nso we obtain the metadata by calling `ontology.metadata(tag)`\nor alternatively `ontology.metadata(tag.name,tag.value)`\nbeing the type name and value respectively.\n\nThe ontology itself is based around `TagSets` and effectively the call\n`ontology.metadata('colour','blue')`\nwould look up the `TagSet` named `colour.blue` in the underlying `Tagsets`.\n\nFor a self contained dataset this means that it can be its own ontology.\nFor tags associated with arbitrary objects\nsuch as the filesystem tags maintained by `cs.fstags`\nthe ontology would be a separate tags collection stored in a central place.\n\nThere are two main categories of entries in an ontology:\n* metadata: other entries named *typename*`.`*value_key*\n  contains a `TagSet` holding metadata for a value of type *typename*\n  whose value is mapped to *value_key*\n* types: an optional entry named `type.`*typename* contains a `TagSet`\n  describing the type named *typename*;\n  really this is just more metadata where the \"type name\" is `type`\n\nMetadata are `TagSets` instances describing particular values of a type.\nFor example, some metadata for the `Tag` `colour=\"blue\"`:\n\n    colour.blue url=\"https://en.wikipedia.org/wiki/Blue\" wavelengths=\"450nm-495nm\"\n\nSome metadata associated with the `Tag` `actor=\"Scarlett Johansson\"`:\n\n    actor.scarlett_johansson role=[\"Black Widow (Marvel)\"]\n    character.marvel.black_widow fullname=[\"Natasha Romanov\"]\n\nThe tag values are lists above because an actor might play many roles, etc.\n\nThere's a convention for converting human descriptions\nsuch as the role string `\"Black Widow (Marvel)\"` to its metadata.\n* the value `\"Black Widow (Marvel)\"` if converted to a key\n  by the ontology method `value_to_tag_name`;\n  it moves a bracket suffix such as `(Marvel)` to the front as a prefix\n  `marvel.` and downcases the rest of the string and turns spaces into underscores.\n  This yields the value key `marvel.black_widow`.\n* the type is `role`, so the ontology entry for the metadata\n  is `role.marvel.black_widow`\n\nThis requires type information about a `role`.\nHere are some type definitions supporting the above metadata:\n\n    type.person type=str description=\"A person.\"\n    type.actor type=person description=\"An actor's stage name.\"\n    type.character type=str description=\"A person in a story.\"\n    type.role type_name=character description=\"A character role in a performance.\"\n    type.cast type=dict key_type=actor member_type=role description=\"Cast members and their roles.\"\n\nThe basic types have their Python names: `int`, `float`, `str`, `list`,\n`dict`, `date`, `datetime`.\nYou can define subtypes of these for your own purposes\nas illustrated above.\n\nFor example:\n\n    type.colour type=str description=\"A hue.\"\n\nwhich subclasses `str`.\n\nSubtypes of `list` include a `member_type`\nspecifying the type for members of a `Tag` value:\n\n    type.scene type=list member_type=str description=\"A movie scene.\"\n\nSubtypes of `dict` include a `key_type` and a `member_type`\nspecifying the type for keys and members of a `Tag` value:\n\nAccessing type data and metadata:\n\nA `TagSet` may have a reference to a `TagsOntology` as `.ontology`\nand so also do any of its `Tag`s.\n\n## Class `TagsOntologyCommand(cs.cmdutils.BaseCommand)`\n\nA command line for working with ontology types.\n\nCommand line usage:\n\n    Usage: tagsontology subcommand [...]\n      Subcommands:\n        edit [{/name-regexp | entity-name}]\n          Edit entities.\n          With no arguments, edit all the entities.\n          With an argument starting with a slash, edit the entities\n          whose names match the regexp.\n          Otherwise the argument is expected to be an entity name;\n          edit the tags of that entity.\n        help [-l] [subcommand-names...]\n          Print the full help for the named subcommands,\n          or for all subcommands if no names are specified.\n          -l  Long help even if no subcommand-names provided.\n        meta tag=value\n        type\n            With no arguments, list the defined types.\n          type type_name\n            With a type name, print its `Tag`s.\n          type type_name edit\n            Edit the tags defining a type.\n          type type_name edit meta_names_pattern...\n            Edit the tags for the metadata names matching the\n            meta_names_patterns.\n          type type_name list\n          type type_name ls\n            List the metadata names for this type and their tags.\n          type type_name + entity_name [tags...]\n            Create type_name.entity_name and apply the tags.\n\n# Release Log\n\n\n\n*Release 20230212*:\nMark TagSetCriterion as Promotable.\n\n*Release 20230210*:\n* TagFile: new optional update_mapping secondary mapping to which to mirror file tags, for example to an SQLTags.\n* New .uuid:UUID property returning the UUID for the tag named 'uuid' or None.\n\n*Release 20230126*:\nNew TagSet.is_stale() method based on .expiry attribute, intended for TagSets which are caches of other primary data.\n\n*Release 20221228*:\n* TagFile: drop _singleton_key, FSPathBasedSingleton provides a good default.\n* TagFile.save_tagsets,tags_line: new optional prune=False parameter to drop empty top level dict/lists.\n* TagFile.save: plumb prune=False parameter.\n\n*Release 20220806*:\nNew TagSetCriterion.promote(obj)->TagSetCriterion class method.\n\n*Release 20220606*:\n* Tag.parse_value: bugfix parse of float.\n* TagSet.edit: accept optional comments parameter with addition header comment lines, be more tolerant of errors, avoid losing data on error.\n\n*Release 20220430*:\n* TagSetPrefixView: new as_dict() method.\n* TagSetPrefixView.__str__: behave like TagSet.__str__.\n* TagFile.save_tagsets: do not try to save if the file is missing and the tagsets are empty.\n* New TagSet.from_tags(tags) factory to make a new TagSet from an iterable of tags.\n* TagSetPrefixView: add .get and .setdefault mapping methods.\n* RegexpTagRule: accept optional tag_prefix parameter.\n* Tagset: new from_ini() and save_as_ini() methods to support cs.timeseries config files, probably handy elsewhere.\n\n*Release 20220311*:\nAssorted internal changes.\n\n*Release 20211212*:\n* Tag: new fallback_parse parameter for value parsing, default get_nonwhite.\n* Tag: new from_arg factory with fallback_parse grabbing the whole string for command line arguments, thus supporting unquoted strings for ease of use.\n* TagSetCriterion: new optional fallback_parse parameter and from_arg method as for the Tag factories.\n* Tag.transcribe_value: accept optional json_options to control the JSON encoder, used for human friendly multiline edits in cs.app.tagger.\n* Rename edit_many to edit_tagsets for clarity.\n* TagsOntology: new type_values method to return values for a type (derived from their metadata entries).\n* Tag: new alt_values method returning its TagsOntology.type_values.\n* (Internal) New _FormatStringTagProxy which proxies a Tag but uses str(self.__proxied.value) for __str__ to support format strings.\n* (Internal) TagSet.get_value: if arg_name matches a Tag, return a _FormatStringTagProxy.\n* Tag.__new__: accept (tag_name,value) or (Tag) as initialisation parameters.\n\n*Release 20210913*:\n* TagSet.get_value: raise KeyError in strict mode, leave placeholder otherwise.\n* Other small changes.\n\n*Release 20210906*:\nMany many updates; some semantics have changed.\n\n*Release 20210428*:\nBugfix TagSet.set: internal in place changes to a complex tag value were not noticed, causing TagFile to not update on shutdown.\n\n*Release 20210420*:\n* TagSet: also subclass cs.dateutils.UNIXTimeMixin.\n* Various TagSetNamespace updates and bugfixes.\n\n*Release 20210404*:\nBugfix TagBasedTest.COMPARISON_FUNCS[\"=\"]: if cmp_value is None, return true (the tag is present).\n\n*Release 20210306*:\n* ExtendedNamespace,TagSetNamespace: move the .[:alpha:]* attribute support from ExtendedNamespace to TagSetNamespace because it requires Tags.\n* TagSetNamespace.__getattr__: new _i, _s, _f suffixes to return int, str or float tag values (or None); fold _lc in with these.\n* Pull most of `TaggedEntity` out into `TaggedEntityMixin` for reuse by domain specific tagged entities.\n* TaggedEntity: new .set and .discard methods.\n* TaggedEntity: new as_editable_line, from_editable_line, edit and edit_entities methods to support editing entities using a text editor.\n* ontologies: type entries are now prefixed with \"type.\" and metadata entries are prefixed with \"meta.\"; provide a worked ontology example in the introduction and improve related docstrings.\n* TagsOntology: new .types(), .types_names(), .meta(type_name,value), .meta_names() methods.\n* TagsOntology.__getitem__: create missing TagSets on demand.\n* New TagsOntologyCommand, initially with a \"type [type_name [{edit|list}]]\" subcommand, ready for use as the cmd_ont subcommand of other tag related commands.\n* TagSet: support initialisation like a dict including keywords, and move the `ontology` parameter to `_onotology`.\n* TagSet: include AttrableMappingMixin to enable attribute access to values when there is no conflict with normal methods.\n* UUID encode/decode support.\n* Honour $TAGSET_EDITOR or $EDITOR as preferred interactive editor for tags.\n* New TagSet.subtags(prefix) to extract a subset of the tags.\n* TagsOntology.value_metadata: new optional convert parameter to override the default \"convert human friendly name\" algorithm, particularly to pass convert=str to things which are already the basic id.\n* Rename TaggedEntity to TagSet.\n* Rename TaggedEntities to TagSets.\n* TagSet: new csvrow and from_csvrow methods imported from obsolete TaggedEntityMixin class.\n* Move BaseTagFile from cs.fstags to TagFile in cs.tagset.\n* TagSet: support access to the tag \"c.x\" via attributes provided there is no \"c\" tag in the way.\n* TagSet.unixtime: implement the autoset-to-now semantics.\n* New as_timestamp(): convert date, datetime, int or float to a UNIX timestamp.\n* Assorted docstring updates and bugfixes.\n\n*Release 20200716*:\n* Update for changed cs.obj.SingletonMixin API.\n* Pull in TaggedEntity from cs.sqltags and add the .csvrow property and the .from_csvrow factory.\n\n*Release 20200521.1*:\nFix DISTINFO.install_requires, drop debug import.\n\n*Release 20200521*:\n* New ValueDetail and KeyValueDetail classes for returning ontology information; TagInfo.detail now returns a ValueDetail for scalar types, a list of ValueDetails for sequence types and a list of KeyValueDetails for mapping types; drop various TagInfo mapping/iterable style methods, too confusing to use.\n* Plumb ontology parameter throughout, always optional.\n* Drop TypedTag, Tags now use ontologies for this.\n* New TagsCommandMixin to support BaseCommands which manipulate Tags.\n* Many improvements and bugfixes.\n\n*Release 20200318*:\n* *Note that the TagsOntology stuff is in flux and totally alpha.*\n* Tag.prefix_name factory returning a new tag if prefix is not empty, ptherwise self.\n* TagSet.update: accept an optional prefix for inserting \"foreign\" tags with a distinguishing name prefix.\n* Tag.as_json: turn sets and tuples into lists for encoding.\n* Backport for Python < 3.7 (no fromisoformat functions).\n* TagSet: drop unused and illplaced .titleify, .episode_title and .title methods.\n* TagSet: remove \"defaults\", unused.\n* Make TagSet a direct subclass of dict, adjust uses of .update etc.\n* New ExtendedNamespace class which is a SimpleNamespace with some inferred attributes and a partial mapping API (keys and __getitem__).\n* New TagSet.ns() returning the Tags as an ExtendedNamespace, which doubles as a mapping for str.format_map; TagSet.format_kwargs is now an alias for this.\n* New Tag.from_string factory to parse a str into a Tag.\n* New TagsOntology and TypedTag classes to provide type and value-detail information; very very alpha and subject to change.\n\n*Release 20200229.1*:\nInitial release: pull TagSet, Tag, TagChoice from cs.fstags for independent use.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.tagset",
    "package_url": "https://pypi.org/project/cs.tagset/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.tagset/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.tagset/20230212/",
    "requires_dist": [
      "cs.cmdutils (>=20210404)",
      "cs.dateutils (>=20230210)",
      "cs.deco (>=20230212)",
      "cs.edit (>=20220429)",
      "cs.fileutils (>=20221118)",
      "cs.fs (>=20220429)",
      "cs.lex (>=20230210)",
      "cs.logutils (>=20230212)",
      "cs.mappings (>=20220912.4)",
      "cs.obj (>=20200716)",
      "cs.pfx (>=20221118)",
      "cs.py3 (>=20220523)",
      "cs.resources (>=20230212)",
      "cs.threads (>=20230212)",
      "icontract",
      "typeguard"
    ],
    "requires_python": "",
    "summary": "Tags and sets of tags with __format__ support and optional ontology information.",
    "version": "20230212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16817675,
  "releases": {
    "20200229.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae8523c1872c76dceb62b5b50ea0f907b1412e465b6e584d7495b691bcd8194a",
          "md5": "9712b7a37bc14169ea137362825ce19a",
          "sha256": "28f7bb21383e8a26b5f568ab6ba67466b62eaa6b09b39baab700fc853ffe4128"
        },
        "downloads": -1,
        "filename": "cs.tagset-20200229.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9712b7a37bc14169ea137362825ce19a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5337,
        "upload_time": "2020-02-29T04:46:50",
        "upload_time_iso_8601": "2020-02-29T04:46:50.220007Z",
        "url": "https://files.pythonhosted.org/packages/ae/85/23c1872c76dceb62b5b50ea0f907b1412e465b6e584d7495b691bcd8194a/cs.tagset-20200229.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200318": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db63d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073",
          "md5": "0db5c840cbb226abe45e592b33667f9d",
          "sha256": "4637c6b0198ec60cdcda260beaa541ef7673f4cf982c82e764059024b818a7ab"
        },
        "downloads": -1,
        "filename": "cs.tagset-20200318.tar.gz",
        "has_sig": false,
        "md5_digest": "0db5c840cbb226abe45e592b33667f9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10385,
        "upload_time": "2020-03-17T23:11:36",
        "upload_time_iso_8601": "2020-03-17T23:11:36.925303Z",
        "url": "https://files.pythonhosted.org/packages/db/63/d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073/cs.tagset-20200318.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200521": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "050df198bc9e307a4576c12ae8426489a78653f9474f4546c39a12da02fef737",
          "md5": "0bea34fdb3addd8750f6a2767850b2dd",
          "sha256": "0c8d0cc6371dce1a21a3f1f75f0e9812a301f0d3af577d9d146a6fd88245cba0"
        },
        "downloads": -1,
        "filename": "cs.tagset-20200521.tar.gz",
        "has_sig": false,
        "md5_digest": "0bea34fdb3addd8750f6a2767850b2dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19055,
        "upload_time": "2020-05-21T01:58:14",
        "upload_time_iso_8601": "2020-05-21T01:58:14.259783Z",
        "url": "https://files.pythonhosted.org/packages/05/0d/f198bc9e307a4576c12ae8426489a78653f9474f4546c39a12da02fef737/cs.tagset-20200521.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200521.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0455ebf259d8b066e31e253b02d93062aa019e288c2e00c8e47dcdcb54547647",
          "md5": "b5244758c8686010042750c7166ca0f3",
          "sha256": "d5ad960b7c674ac547c0335468917716f0ee1f852718c4c4370998c19014fea5"
        },
        "downloads": -1,
        "filename": "cs.tagset-20200521.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5244758c8686010042750c7166ca0f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19067,
        "upload_time": "2020-05-21T02:02:02",
        "upload_time_iso_8601": "2020-05-21T02:02:02.538471Z",
        "url": "https://files.pythonhosted.org/packages/04/55/ebf259d8b066e31e253b02d93062aa019e288c2e00c8e47dcdcb54547647/cs.tagset-20200521.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200716": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c1f26c4cba27bdbe9229164dfabedf35de8a417142e6af2516805ce777add6d",
          "md5": "dcf34d050e789a67f7223219de4bb830",
          "sha256": "d4f06424447f816dff5c2ee676b5eba56f60049e2c162515e20e8c4885c4e19f"
        },
        "downloads": -1,
        "filename": "cs.tagset-20200716.tar.gz",
        "has_sig": false,
        "md5_digest": "dcf34d050e789a67f7223219de4bb830",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20059,
        "upload_time": "2020-07-16T07:37:23",
        "upload_time_iso_8601": "2020-07-16T07:37:23.435845Z",
        "url": "https://files.pythonhosted.org/packages/8c/1f/26c4cba27bdbe9229164dfabedf35de8a417142e6af2516805ce777add6d/cs.tagset-20200716.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210306": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c385a53b47c1f8d8ffb255d95506f58fd5f759329ffda770de2996764e1ac575",
          "md5": "635008f5dc7f076afde5c71951f72bf5",
          "sha256": "6ad9b5bd495242340e4a3dfb37f1c5603c7cbf0518d035c083f30a12aa8b323b"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210306.tar.gz",
        "has_sig": false,
        "md5_digest": "635008f5dc7f076afde5c71951f72bf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88165,
        "upload_time": "2021-03-06T00:05:26",
        "upload_time_iso_8601": "2021-03-06T00:05:26.461155Z",
        "url": "https://files.pythonhosted.org/packages/c3/85/a53b47c1f8d8ffb255d95506f58fd5f759329ffda770de2996764e1ac575/cs.tagset-20210306.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210404": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5985849a4ee9e208591542bcc90cdea618ceecd7d604785ddc964e6f98ddf2a1",
          "md5": "0c494a48af2878549c5914540229fdc4",
          "sha256": "3651c21d5db35cc87b0fe6e5942dd69010775c643ae17015a0c8f6509cefd798"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210404.tar.gz",
        "has_sig": false,
        "md5_digest": "0c494a48af2878549c5914540229fdc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86923,
        "upload_time": "2021-04-03T23:20:43",
        "upload_time_iso_8601": "2021-04-03T23:20:43.343410Z",
        "url": "https://files.pythonhosted.org/packages/59/85/849a4ee9e208591542bcc90cdea618ceecd7d604785ddc964e6f98ddf2a1/cs.tagset-20210404.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210420": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2f2e1a0259879f877009a76a707ef4cf89c3557ec515e88ff7f50ee2f551bf",
          "md5": "0a36d88ff1fbe1718e620dcca208ff74",
          "sha256": "736ae6e9b4716a2ba295475e116f4cbb4b7c94855b95c678608fd87beabcb09d"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210420.tar.gz",
        "has_sig": false,
        "md5_digest": "0a36d88ff1fbe1718e620dcca208ff74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87498,
        "upload_time": "2021-04-20T02:04:48",
        "upload_time_iso_8601": "2021-04-20T02:04:48.607046Z",
        "url": "https://files.pythonhosted.org/packages/4a/2f/2e1a0259879f877009a76a707ef4cf89c3557ec515e88ff7f50ee2f551bf/cs.tagset-20210420.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210428": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b953278145f224d42c6a80dea5c1e27750def97e27a19cff43292bbb31d70a24",
          "md5": "8dfedf7ffac81049fe7c09442b932c19",
          "sha256": "9bcd8d502a989c60150524fc75a9bff11e4e449ddefe46fc59e3c78a17064a0b"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210428.tar.gz",
        "has_sig": false,
        "md5_digest": "8dfedf7ffac81049fe7c09442b932c19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87770,
        "upload_time": "2021-04-28T00:20:59",
        "upload_time_iso_8601": "2021-04-28T00:20:59.904331Z",
        "url": "https://files.pythonhosted.org/packages/b9/53/278145f224d42c6a80dea5c1e27750def97e27a19cff43292bbb31d70a24/cs.tagset-20210428.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210906": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faffefecb5e84075a25c2396d318033a1540a94aed6e9630b4d824536239d9f0",
          "md5": "65ad56be36af7d8ef50b0f1a69b08428",
          "sha256": "f1cbb462a21e730186e912df1559577a1da4447fd41f8891f0cccd5509ce2f91"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210906.tar.gz",
        "has_sig": false,
        "md5_digest": "65ad56be36af7d8ef50b0f1a69b08428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100310,
        "upload_time": "2021-09-05T23:27:29",
        "upload_time_iso_8601": "2021-09-05T23:27:29.811956Z",
        "url": "https://files.pythonhosted.org/packages/fa/ff/efecb5e84075a25c2396d318033a1540a94aed6e9630b4d824536239d9f0/cs.tagset-20210906.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210913": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef3c7879d5e065fdce630d7f80a9d02da4ccdae0688c32367d490666623adf58",
          "md5": "17472e20a4b29f8103348add194e08a3",
          "sha256": "4fe58cadd45deeb23ddbf6f7acf6c1a601b2dd21ebd64287c71ae894e46eda64"
        },
        "downloads": -1,
        "filename": "cs.tagset-20210913.tar.gz",
        "has_sig": false,
        "md5_digest": "17472e20a4b29f8103348add194e08a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100619,
        "upload_time": "2021-09-13T10:21:33",
        "upload_time_iso_8601": "2021-09-13T10:21:33.137066Z",
        "url": "https://files.pythonhosted.org/packages/ef/3c/7879d5e065fdce630d7f80a9d02da4ccdae0688c32367d490666623adf58/cs.tagset-20210913.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20211212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c25b913f51df7da1ac88ddabe195304a5c9d358c732be6ccadd8e5d71a37ceee",
          "md5": "e3b43189fca4f2df676834cd24bb0608",
          "sha256": "457f5fe67add9da820a35b971fc4e6195e992954e5789d9a423226e8094ade11"
        },
        "downloads": -1,
        "filename": "cs.tagset-20211212.tar.gz",
        "has_sig": false,
        "md5_digest": "e3b43189fca4f2df676834cd24bb0608",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 106369,
        "upload_time": "2021-12-11T23:24:42",
        "upload_time_iso_8601": "2021-12-11T23:24:42.931966Z",
        "url": "https://files.pythonhosted.org/packages/c2/5b/913f51df7da1ac88ddabe195304a5c9d358c732be6ccadd8e5d71a37ceee/cs.tagset-20211212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220311": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24088800600192a18a567249f14f77f281ceb08edd735476c859cf187b2cd645",
          "md5": "96d45f23e1c24ae3481829ac7c2a030a",
          "sha256": "8d46c7d70859bc858be7fb97cb0de99ac02cc4c43397979dbc63a0a0a8bd97bf"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220311.tar.gz",
        "has_sig": false,
        "md5_digest": "96d45f23e1c24ae3481829ac7c2a030a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105864,
        "upload_time": "2022-03-11T00:44:55",
        "upload_time_iso_8601": "2022-03-11T00:44:55.112878Z",
        "url": "https://files.pythonhosted.org/packages/24/08/8800600192a18a567249f14f77f281ceb08edd735476c859cf187b2cd645/cs.tagset-20220311.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220430": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77eff7d8bfd5f55f2e07f29dc327cbb77d8891645dd722fd9d4ee3bc7e6725b9",
          "md5": "ae6f9635dc959385de437b7d88378af4",
          "sha256": "9abc769e9e5bdc204d5955812a4b562694d4afb1e01f58a1e3545b1b5ee0e021"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220430-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae6f9635dc959385de437b7d88378af4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45104,
        "upload_time": "2022-04-30T03:07:10",
        "upload_time_iso_8601": "2022-04-30T03:07:10.685500Z",
        "url": "https://files.pythonhosted.org/packages/77/ef/f7d8bfd5f55f2e07f29dc327cbb77d8891645dd722fd9d4ee3bc7e6725b9/cs.tagset-20220430-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a61e0fb9cba1e0f8fefb3bd16c5a8c6304aa6becaed91b02bb4743d4468b356",
          "md5": "2391c357234c7614a9265f967b92ef93",
          "sha256": "7763d149a7ae29a5e4d1c973c24834d97b41910c11baf8d347223d2a2389eac2"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220430.tar.gz",
        "has_sig": false,
        "md5_digest": "2391c357234c7614a9265f967b92ef93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78605,
        "upload_time": "2022-04-30T03:07:13",
        "upload_time_iso_8601": "2022-04-30T03:07:13.582417Z",
        "url": "https://files.pythonhosted.org/packages/2a/61/e0fb9cba1e0f8fefb3bd16c5a8c6304aa6becaed91b02bb4743d4468b356/cs.tagset-20220430.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220606": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f453f651e24a9130f8e52317173f6274bdae3d2cfd9c130fa816e259faad9f2",
          "md5": "9683e9b69ef440999e97809752a3499f",
          "sha256": "0482eeee34c28befa67a6486f5e6a6c86613376e5ee9ac2c0ededbee06403ed4"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220606-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9683e9b69ef440999e97809752a3499f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45315,
        "upload_time": "2022-06-05T23:00:44",
        "upload_time_iso_8601": "2022-06-05T23:00:44.644871Z",
        "url": "https://files.pythonhosted.org/packages/0f/45/3f651e24a9130f8e52317173f6274bdae3d2cfd9c130fa816e259faad9f2/cs.tagset-20220606-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efd0dced2bca8bf5b80b243226327f1bf85ac1c974cc8bfd92f4296e3ef68cb5",
          "md5": "85b8ec406f560e36139481afa1e32e19",
          "sha256": "9b6ccfc0f493f5f9e30972571841b4e4847065c0f4483853e6c3d57f06805aef"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220606.tar.gz",
        "has_sig": false,
        "md5_digest": "85b8ec406f560e36139481afa1e32e19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 79149,
        "upload_time": "2022-06-05T23:00:48",
        "upload_time_iso_8601": "2022-06-05T23:00:48.119498Z",
        "url": "https://files.pythonhosted.org/packages/ef/d0/dced2bca8bf5b80b243226327f1bf85ac1c974cc8bfd92f4296e3ef68cb5/cs.tagset-20220606.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220806": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf4cafb8c8fe4c6c2c1d32fefa2d8adf680a1f30a1bc930ecb3de60b1df2fcec",
          "md5": "aefb116137a947be60f9b7305b2a6f99",
          "sha256": "d470cbacf51c67afbc4073d2040b47b5977f8b1e6f3573912814308c97db860a"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220806-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aefb116137a947be60f9b7305b2a6f99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45450,
        "upload_time": "2022-08-05T22:21:56",
        "upload_time_iso_8601": "2022-08-05T22:21:56.311303Z",
        "url": "https://files.pythonhosted.org/packages/bf/4c/afb8c8fe4c6c2c1d32fefa2d8adf680a1f30a1bc930ecb3de60b1df2fcec/cs.tagset-20220806-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0b2956617ca07e37537420555445e8df58f94d1a4f1ad0a6d09980e7f6c19c3",
          "md5": "1b3f92cec5a63e6644b5f41af7170840",
          "sha256": "627a08fec9945abdf0449e80f100a60cce9d076b4e202d91c856c6e7574d4da6"
        },
        "downloads": -1,
        "filename": "cs.tagset-20220806.tar.gz",
        "has_sig": false,
        "md5_digest": "1b3f92cec5a63e6644b5f41af7170840",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 79438,
        "upload_time": "2022-08-05T22:21:58",
        "upload_time_iso_8601": "2022-08-05T22:21:58.444898Z",
        "url": "https://files.pythonhosted.org/packages/f0/b2/956617ca07e37537420555445e8df58f94d1a4f1ad0a6d09980e7f6c19c3/cs.tagset-20220806.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20221228": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e47f6bfd35c2c040b33fd1dd545820cfd56723899c2b6c8e8d5eed18e5439998",
          "md5": "b749a03589078c1eb6766eb606444c58",
          "sha256": "3dfd427f4d7b988213f33783ed2be5a736a3c3c1f5ceac04ec82a75ba4c11f07"
        },
        "downloads": -1,
        "filename": "cs.tagset-20221228-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b749a03589078c1eb6766eb606444c58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45625,
        "upload_time": "2022-12-27T23:52:47",
        "upload_time_iso_8601": "2022-12-27T23:52:47.152418Z",
        "url": "https://files.pythonhosted.org/packages/e4/7f/6bfd35c2c040b33fd1dd545820cfd56723899c2b6c8e8d5eed18e5439998/cs.tagset-20221228-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a029225ccb6a33aa26ec2945a1acedece7eb5e8e1a7b4c09fc9b4a98f6f68295",
          "md5": "d52478c555d386b4f53cc617f66e8a3b",
          "sha256": "373f67b775a73743af919cc18e4c01a0d3b06b7c9e06f88d696e910a47a00fa0"
        },
        "downloads": -1,
        "filename": "cs.tagset-20221228.tar.gz",
        "has_sig": false,
        "md5_digest": "d52478c555d386b4f53cc617f66e8a3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 80153,
        "upload_time": "2022-12-27T23:52:49",
        "upload_time_iso_8601": "2022-12-27T23:52:49.486102Z",
        "url": "https://files.pythonhosted.org/packages/a0/29/225ccb6a33aa26ec2945a1acedece7eb5e8e1a7b4c09fc9b4a98f6f68295/cs.tagset-20221228.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230126": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a0c9adeed8af0be6778d3bb4994cec499d4308e6d4487f41fbe19fd8272937f",
          "md5": "2ceabe5ed8b790cd140a4d3c8522c3a7",
          "sha256": "760126aa1b7aff06777669c61c37ed925dfb3b4d6d0b4ab8a1b840a815b74984"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230126-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ceabe5ed8b790cd140a4d3c8522c3a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45848,
        "upload_time": "2023-01-26T02:42:27",
        "upload_time_iso_8601": "2023-01-26T02:42:27.157529Z",
        "url": "https://files.pythonhosted.org/packages/3a/0c/9adeed8af0be6778d3bb4994cec499d4308e6d4487f41fbe19fd8272937f/cs.tagset-20230126-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "704e6d0040bc0598a7b3f8be920cb44e87e31e4ebe4121633f7f796612173e04",
          "md5": "0d31ea5e1bed0644c1a66215f9824b6a",
          "sha256": "fe2234f36c120cd01279f6d6b780b9c1c5b86edc68756704c40b27949cbe452a"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230126.tar.gz",
        "has_sig": false,
        "md5_digest": "0d31ea5e1bed0644c1a66215f9824b6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 80737,
        "upload_time": "2023-01-26T02:42:29",
        "upload_time_iso_8601": "2023-01-26T02:42:29.606858Z",
        "url": "https://files.pythonhosted.org/packages/70/4e/6d0040bc0598a7b3f8be920cb44e87e31e4ebe4121633f7f796612173e04/cs.tagset-20230126.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230210": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2326aefd987c24f4ff79028e5af4ea36bfb6f97f201310686f562d07a605c090",
          "md5": "f43921408aff2f9759539ee7fabecdeb",
          "sha256": "34dbb5dc99aeeb97b9f124fe7e32eb8692f323215041156169ed235d94fbf8e1"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230210-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f43921408aff2f9759539ee7fabecdeb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46398,
        "upload_time": "2023-02-10T01:45:59",
        "upload_time_iso_8601": "2023-02-10T01:45:59.824641Z",
        "url": "https://files.pythonhosted.org/packages/23/26/aefd987c24f4ff79028e5af4ea36bfb6f97f201310686f562d07a605c090/cs.tagset-20230210-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "231621a2f41a03160e80d5f61584be694595ede0c0fdd9e521d6af48e324e497",
          "md5": "cee45cf9fb75173748b5d1fa3e5c16e2",
          "sha256": "45b760755ed8bc9ef025871af570759d95e249015a6145be50a3cc50c08e8621"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230210.tar.gz",
        "has_sig": false,
        "md5_digest": "cee45cf9fb75173748b5d1fa3e5c16e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 81657,
        "upload_time": "2023-02-10T01:46:04",
        "upload_time_iso_8601": "2023-02-10T01:46:04.091899Z",
        "url": "https://files.pythonhosted.org/packages/23/16/21a2f41a03160e80d5f61584be694595ede0c0fdd9e521d6af48e324e497/cs.tagset-20230210.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aa9464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6",
          "md5": "f54934a93bf05a4d53917fccbc4ac308",
          "sha256": "ad1fd59119a36a91cc224059d23421d554f852006e9920676c6a62abf2db9d9f"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f54934a93bf05a4d53917fccbc4ac308",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46477,
        "upload_time": "2023-02-12T04:01:21",
        "upload_time_iso_8601": "2023-02-12T04:01:21.655931Z",
        "url": "https://files.pythonhosted.org/packages/7a/a9/464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6/cs.tagset-20230212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4de5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8",
          "md5": "05167226aa1f0bd265ec0a01ad8537fa",
          "sha256": "354f62dd0d2212db515892dea3ab25ec11e13e33f1dcda7be9cc9539d3e84b67"
        },
        "downloads": -1,
        "filename": "cs.tagset-20230212.tar.gz",
        "has_sig": false,
        "md5_digest": "05167226aa1f0bd265ec0a01ad8537fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 81850,
        "upload_time": "2023-02-12T04:01:23",
        "upload_time_iso_8601": "2023-02-12T04:01:23.968571Z",
        "url": "https://files.pythonhosted.org/packages/b4/de/5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8/cs.tagset-20230212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aa9464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6",
        "md5": "f54934a93bf05a4d53917fccbc4ac308",
        "sha256": "ad1fd59119a36a91cc224059d23421d554f852006e9920676c6a62abf2db9d9f"
      },
      "downloads": -1,
      "filename": "cs.tagset-20230212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f54934a93bf05a4d53917fccbc4ac308",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 46477,
      "upload_time": "2023-02-12T04:01:21",
      "upload_time_iso_8601": "2023-02-12T04:01:21.655931Z",
      "url": "https://files.pythonhosted.org/packages/7a/a9/464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6/cs.tagset-20230212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4de5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8",
        "md5": "05167226aa1f0bd265ec0a01ad8537fa",
        "sha256": "354f62dd0d2212db515892dea3ab25ec11e13e33f1dcda7be9cc9539d3e84b67"
      },
      "downloads": -1,
      "filename": "cs.tagset-20230212.tar.gz",
      "has_sig": false,
      "md5_digest": "05167226aa1f0bd265ec0a01ad8537fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 81850,
      "upload_time": "2023-02-12T04:01:23",
      "upload_time_iso_8601": "2023-02-12T04:01:23.968571Z",
      "url": "https://files.pythonhosted.org/packages/b4/de/5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8/cs.tagset-20230212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}