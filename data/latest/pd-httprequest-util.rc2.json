{
  "info": {
    "author": "彭泗雄",
    "author_email": "pillipanda@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "### pd_httprequest_util\n协助发http请求的工具\n\n### 特点\n1. 支持设置并发数\n2. 自动重试三次\n3. 支持三种发送模式 \n    1. 一次发起全部请求（应对请求数量不多的情况）\n    2. 一次发起全部请求并当第一个出现失败时退出（应对请求数量不多&必须要全部成功的情况）\n    3. iterator返回模式（应对请求数量太多、需要顾虑内存大小的情况）\n4. 若connection出问题会自动切换\n5. 同时支持同步/异步(async)调用方式\n6. 支持打开日志记录每个请求的情况用于后续分析\n7. 支持设定失败请求的默认返回值\n\n### 概念说明\n下面的使用例子会使用到Connection、Request、RequestManager三个类，先提前说明下其命名的逻辑：<br/>\n每个具体http请求被命名为一个**Request**，其使用的http **Connection** pool是作为参数被依赖注入的，而外层使用**RequestManager**来管理一堆http request的访问特征\n![uml](./static/UML.png)\n\n### 异步访问举例 <br/>\n- 阻塞访问一批请求\n```python\n# 对应demos/async_demos/all_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\nasync def main():\n    # 此批访问的并发数为60, 失败request的返回空字符串\n    manager = AsyncRequestManager(parral_amount=60, fail_return='')\n\n    # 此批访问全部复用此connection\n    connection = await AsyncConnection.create()\n\n    # 构建100个请求、其中第五个故意设置为无效的url\n    for i in range(100):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,  # 依赖注入connection，多有request都复用此connection\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    # 访问全部，resp: ['each resp text'], error\n    resp, error = await manager.visit_all()\n    suc, fail = 0, 0\n    for i in resp:\n        if len(i) > 0:\n            suc += 1\n        else:\n            fail += 1\n    print(suc, fail)\n    assert fail == 1\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n\n```\n-  阻塞访问一批请求，并在出现第一个失败request时便返回\n```python\n# 对应demos/async_demos/all_fetch_but_stopwhenfirstfail.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\n\nasync def main():\n    # 这里通过设置cancel_if_fail=True参数使得第一个失败便返回\n    manager = AsyncRequestManager(parral_amount=2, cancel_if_fail=True)\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    resp, error = await manager.visit_all()\n    print(resp, type(resp), error)\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n- async iterator访问一批请求\n```python\n# 对应demos/async_demos/iter_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\nasync def main():\n    manager = AsyncRequestManager(parral_amount=4)\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url   # a fail request\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    # 这里，区别于阻塞的调用的是visit_all方法，此地调用visit_iter方法\n    cursor_resp = manager.visit_iter()\n    async for resp in cursor_resp:\n        print('suc' if len(resp) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n- 以\"阻塞访问一批请求\"为例，演示打开日志记录。余下同理\n```python\n# 对应demos/async_demos/set_log.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\n\nasync def main():\n    manager = AsyncRequestManager(parral_amount=2)\n    # 显式调用set_log方法，设置日志相关参数即打开了日志记录\n    manager.set_log(\n        name='http_connuest_log',\n        dir_path='./',\n        clear=True,\n        clear_days=60\n    )\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = 'http://httpbin.org/ip?whatever=1'\n        if i == 5: url = 'http://web_not_exist.org/'   # a fail request\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url,\n            log_flag=f'req{i}',\n        )\n        manager.add_request(request)\n\n    resp, error = await manager.visit_all()\n    for i in resp:\n        print('suc' if len(i) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n\n### 同步访问举例<br/>\n**同步访问的核心就是把上面使用的AsyncRequestManager替换为SyncRequestManager,AsyncConnection替换为SyncHttp**\n- 阻塞访问一批请求\n```python\n# 对应demos/sync_demos/all_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.sync_ import SyncConnection\nfrom pd_httprequest_util.request_manager import SyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\n\ndef main():\n    manager = SyncRequestManager(parral_amount=3, fail_return='')\n\n    connection = SyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    resp, error = manager.visit_all()\n    for i in resp:\n        print('-->', 'suc' if len(i) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n-  阻塞访问一批请求，并在出现第一个失败request时便返回\n```python\n# 对应demos/sync_demos/all_fetch_but_stopwhenfirstfail.py\n...\n```\n-  iterator访问一批请求\n```python\n# 对应demos/sync_demos/iter_fetch.py\n...\n```\n-  iterator访问一批请求\n```python\n# 对应demos/sync_demos/iter_fetch.py\n...\n```\n- 设置日志\n```python\n# 对应demos/sync_demos/set_log.py\n...\n```\n\n### 补充\n1. 设计说明\n   1. **Connection**：http链接，独立Connection是为了避免http链接数不可控，一般建议能够在app初始化时候考虑好整体链接的总数以及单个host的链接总数上限（Connection的设置参数支持设置这两个参数）\n   2. **Request**：对应业务层看到的具体的每个http请求，其向上承接具体业务、向下依赖Connection进行发送，故对应的http请求需要的参数在此设定，如http method、timeout...;特别需要说明的一个参数是log_flag，此就是用于标示具体业务、如A、B、C，在打开日志记录后此标示会在每条请求日志里，从而可以分辨各个具体业务\n   3. **RequestManager**: 用于管理一批**同质**的Request请求的发送编排，其参数有：并发数、是否在第一个Request出现失败时就放弃并返回、失败的request的默认返回值\n\n2. 举例说明<br/>\n    - 背景：一个承接上游各方发送短信请求的应用，其下游有x家能够通过http api调用发起实际短信商户。而上游发送的模式有两种：一种是单条直接发送（一般为验证码等重要信息需要立即发送）；一种是允许滞后发送的信息（如广告类信息、特点是量大且集中）\n    - 存在的问题\n        - 发送模式1：如果是每来一个发送请求就选择一个下游商并起一个http connection进行发送就肯能出现链接数爆炸的情况；\n        - 发送模式2：同理存在链接爆炸的情况； 下游x家各家的性能不一样，对于每家可以使用不同的并发量进行发送\n    - 解决问题\n        - 链接爆炸：在全局起server的时候，仅初始化一个connection（并设置每个host最多y个链接）并将此connection绑定到全局的app实例上，从而在各个发送场景下都能够通过app获取到此唯一的connection，保证connnection上限值\n        - 调整并发量：\n            - 先维护一个各个商户默认的并发量的对应表。\n            - 假设此时来的两批待发送广告短信，一批使用商户A，一批使用商户B（不同商户提供的调用其发短信的http规则不一样）\n            - 分别构造Request实例（依赖注入全局的connection、填入对应的log_flag区分、其他按商户要求进行）A_Requests和B_Requests\n            - 查出A、B商户的默认并发量，将其作为参数及上面的Requests分别构造再使用A_RequestManager和B_RequestManager从而实现使用不同的并发量进行发送\n            - * 这里还存在一个与此项目无关的点 - 自动调节各个商户并发数: 可能某商户需要发送的短信太多挤压太严重而默认值比较保守需要上调，或者某商户出现某些问题不能再抗住默认并发需要下调；[具体解决方案可参考](https://pillipanda.github.io/2020/06/21/%E4%B8%80%E4%B8%AA%E5%90%88%E6%A0%BC%E7%9A%84IO%E5%AF%86%E9%9B%86%E5%9E%8Basync-consumer/) ",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pillipanda/pd_httprequest_util",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pd-httprequest-util",
    "package_url": "https://pypi.org/project/pd-httprequest-util/",
    "platform": "",
    "project_url": "https://pypi.org/project/pd-httprequest-util/",
    "project_urls": {
      "Homepage": "https://github.com/pillipanda/pd_httprequest_util",
      "Repository": "https://github.com/pillipanda/pd_httprequest_util"
    },
    "release_url": "https://pypi.org/project/pd-httprequest-util/0.1.0/",
    "requires_dist": [
      "aiodns (>=2.0.0,<3.0.0)",
      "aiohttp (>=3.6.2,<4.0.0)",
      "ujson (>=3.1.0,<4.0.0)",
      "requests (>=2.24.0,<3.0.0)",
      "loguru (>=0.5.1,<0.6.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "http request util with both sync/async method.provide with concurrency control；iter retrn；log",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7952336,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09d38f64523f10cb198ad32860328f2fff607003267122ae79805970b72129c1",
          "md5": "b2339ef7a19345a77b19f645eeb9fa96",
          "sha256": "4de1c1e86fe2e57152f55a78e002fb1a67f581e2e2e0c30bdfb228348d5b08db"
        },
        "downloads": -1,
        "filename": "pd_httprequest_util-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2339ef7a19345a77b19f645eeb9fa96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10894,
        "upload_time": "2020-08-12T11:07:18",
        "upload_time_iso_8601": "2020-08-12T11:07:18.179174Z",
        "url": "https://files.pythonhosted.org/packages/09/d3/8f64523f10cb198ad32860328f2fff607003267122ae79805970b72129c1/pd_httprequest_util-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40899d2a71ec731e7dcfa0f48581654aed7e33ad6278626f60f56c5a0ad41fe4",
          "md5": "f86c3997b9dd0cc8ae75d78063bc748a",
          "sha256": "5152d6ebe5931d644ee85456de444b3b47cee02bb9db8100cf993241f2c08d03"
        },
        "downloads": -1,
        "filename": "pd_httprequest_util-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f86c3997b9dd0cc8ae75d78063bc748a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12317,
        "upload_time": "2020-08-12T11:07:22",
        "upload_time_iso_8601": "2020-08-12T11:07:22.072990Z",
        "url": "https://files.pythonhosted.org/packages/40/89/9d2a71ec731e7dcfa0f48581654aed7e33ad6278626f60f56c5a0ad41fe4/pd_httprequest_util-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "707b72a1e292167046755bc77484a81326339cb64154a675fdb7db6b7ca8049a",
          "md5": "8e237cabeccca5458334153a2d84787d",
          "sha256": "d5f75cc4bca172acf21676ea379bc41cfc4e89a429015f74802f2d0db12fd9e6"
        },
        "downloads": -1,
        "filename": "pd_httprequest_util-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e237cabeccca5458334153a2d84787d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10915,
        "upload_time": "2020-08-13T13:22:11",
        "upload_time_iso_8601": "2020-08-13T13:22:11.344948Z",
        "url": "https://files.pythonhosted.org/packages/70/7b/72a1e292167046755bc77484a81326339cb64154a675fdb7db6b7ca8049a/pd_httprequest_util-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d857b4286c69ff12f2523dd29cd5a66a5acea318a8db0ce2af73e37d7ef6ac36",
          "md5": "cf6f91abed04ae978c1f629c9474f5fd",
          "sha256": "ce64b9607b61c9194db5636cc8fc3af1abf1ac7364d1f2af78393442dbd1f259"
        },
        "downloads": -1,
        "filename": "pd_httprequest_util-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf6f91abed04ae978c1f629c9474f5fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12416,
        "upload_time": "2020-08-13T13:22:13",
        "upload_time_iso_8601": "2020-08-13T13:22:13.534315Z",
        "url": "https://files.pythonhosted.org/packages/d8/57/b4286c69ff12f2523dd29cd5a66a5acea318a8db0ce2af73e37d7ef6ac36/pd_httprequest_util-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "707b72a1e292167046755bc77484a81326339cb64154a675fdb7db6b7ca8049a",
        "md5": "8e237cabeccca5458334153a2d84787d",
        "sha256": "d5f75cc4bca172acf21676ea379bc41cfc4e89a429015f74802f2d0db12fd9e6"
      },
      "downloads": -1,
      "filename": "pd_httprequest_util-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e237cabeccca5458334153a2d84787d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 10915,
      "upload_time": "2020-08-13T13:22:11",
      "upload_time_iso_8601": "2020-08-13T13:22:11.344948Z",
      "url": "https://files.pythonhosted.org/packages/70/7b/72a1e292167046755bc77484a81326339cb64154a675fdb7db6b7ca8049a/pd_httprequest_util-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d857b4286c69ff12f2523dd29cd5a66a5acea318a8db0ce2af73e37d7ef6ac36",
        "md5": "cf6f91abed04ae978c1f629c9474f5fd",
        "sha256": "ce64b9607b61c9194db5636cc8fc3af1abf1ac7364d1f2af78393442dbd1f259"
      },
      "downloads": -1,
      "filename": "pd_httprequest_util-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cf6f91abed04ae978c1f629c9474f5fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 12416,
      "upload_time": "2020-08-13T13:22:13",
      "upload_time_iso_8601": "2020-08-13T13:22:13.534315Z",
      "url": "https://files.pythonhosted.org/packages/d8/57/b4286c69ff12f2523dd29cd5a66a5acea318a8db0ce2af73e37d7ef6ac36/pd_httprequest_util-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}