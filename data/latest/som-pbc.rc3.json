{
  "info": {
    "author": "Alex Müller",
    "author_email": "alexarnimueller@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "som-pbc README\n==============\n.. image:: https://img.shields.io/pypi/v/som-pbc.svg\n   :target: https://pypi.org/project/som-pbc/\n   :alt: pypi version\n\n.. image:: https://readthedocs.org/projects/som-pbc/badge/?version=latest\n   :target: https://som-pbc.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nA simple self-organizing map implementation in Python with periodic\nboundary conditions.\n\nSelf-organizing maps are also called Kohonen maps and were invented by\nTeuvo Kohonen.[1] They are an unsupervised machine learning technique to\nefficiently create spatially organized internal representations of\nvarious types of data. For example, SOMs are well-suited for the\nvisualization of high-dimensional data.\n\nThis is a simple implementation of SOMs in Python. This SOM has periodic\nboundary conditions and therefore can be imagined as a \"donut\". The\nimplementation uses ``numpy``, ``scipy``, ``scikit-learn`` and\n``matplotlib``.\n\nInstallation\n~~~~~~~~~~~~\n\n``som-pbc`` can be installed from pypi using pip::\n\n    pip install som-pbc\n\nTo upgrade ``som-pbc`` to the latest version, run::\n\n    pip install --upgrade som-pbc\n\nUsage\n~~~~~\n\nThen you can import and use the ``SOM`` class as follows:\n\n.. code:: python\n\n    import numpy as np\n    from som import SOM\n\n    # generate some random data with 36 features\n    data1 = np.random.normal(loc=-.25, scale=0.5, size=(500, 36))\n    data2 = np.random.normal(loc=.25, scale=0.5, size=(500, 36))\n    data = np.vstack((data1, data2))\n\n    som = SOM(10, 10)  # initialize a 10 by 10 SOM\n    som.fit(data, 10000, save_e=True, interval=100)  # fit the SOM for 10000 epochs, save the error every 100 steps\n    som.plot_error_history(filename='images/som_error.png')  # plot the training error history\n\n    targets = np.array(500 * [0] + 500 * [1])  # create some dummy target values\n\n    # now visualize the learned representation with the class labels\n    som.plot_point_map(data, targets, ['Class 0', 'Class 1'], filename='images/som.png')\n    som.plot_class_density(data, targets, t=0, name='Class 0', colormap='Greens', filename='images/class_0.png')\n    som.plot_distance_map(colormap='Blues', filename='images/distance_map.png')  # plot the distance map after training\n\n    # predicting the class of a new, unknown datapoint\n    datapoint = np.random.normal(loc=.25, scale=0.5, size=(1, 36))\n    print(\"Labels of neighboring datapoints: \", som.get_neighbors(datapoint, data, targets, d=0))\n\n    # transform data into the SOM space\n    newdata = np.random.normal(loc=.25, scale=0.5, size=(10, 36))\n    transformed = som.transform(newdata)\n    print(\"Old shape of the data:\", newdata.shape)\n    print(\"New shape of the data:\", transformed.shape)\n\nTraining Error:\n^^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/alexarnimueller/som/blob/master/docs/_static/som_error.png?raw=true\n   :alt: Training Error\n\nPoint Map:\n^^^^^^^^^^\n\n.. figure:: https://github.com/alexarnimueller/som/blob/master/docs/_static/som.png?raw=true\n   :alt: Point Map\n\nClass Density:\n^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/alexarnimueller/som/blob/master/docs/_static/class_0.png?raw=true\n   :alt: Class Density Map\n\nDistance Map:\n^^^^^^^^^^^^^\n\n.. figure:: https://github.com/alexarnimueller/som/blob/master/docs/_static/distance_map.png?raw=true\n   :alt: Distance Map\n\nThe same way you can handle your own data.\n\nMethods / Functions\n~~~~~~~~~~~~~~~~~~~\n\nThe ``SOM`` class has the following methods:\n\n- ``initialize(data, how='pca')``: initialize the SOM, either via Eigenvalues (``pca``) or randomly (``random``)\n- ``winner(vector)``: compute the winner neuron closest to a given data point in ``vector`` (Euclidean distance)\n- ``cycle(vector)``: perform one iteration in adapting the SOM towards the chosen data point in ``vector``\n- ``fit(data, epochs=0, save_e=False, interval=1000, decay='hill')``: train the SOM on the given ``data`` for several ``epochs``\n- ``transform(data)``: transform given ``data`` in to the SOM space\n- ``distance_map(metric='euclidean')``: get a map of every neuron and its distances to all neighbors based on the neuron weights\n- ``winner_map(data)``: get the number of times, a certain neuron in the trained SOM is winner for the given ``data``\n- ``winner_neurons(data)``: for every data point, get the winner neuron coordinates\n- ``som_error(data)``: calculates the overall error as the average difference between the winning neurons and the ``data``\n- ``get_neighbors(datapoint, data, labels, d=0)``: get the labels of all ``data`` examples that are ``d`` neurons away from ``datapoint`` on the map\n- ``save(filename)``: save the whole SOM instance into a pickle file\n- ``load(filename)``: load a SOM instance from a pickle file\n- ``plot_point_map(data, targets, targetnames, filename=None, colors=None, markers=None, density=True)``: visualize the som with all data as points around the neurons\n- ``plot_density_map(data, filename=None, internal=False)``: visualize the data density in different areas of the SOM.\n- ``plot_class_density(data, targets, t, name, colormap='Oranges', filename=None)``: plot a density map only for the given class\n- ``plot_distance_map(colormap='Oranges', filename=None)``: visualize the disance of the neurons in the trained SOM\n- ``plot_error_history(color='orange', filename=None)``: visualize the training error history after training (fit with ``save_e=True``)\n\nReferences:\n~~~~~~~~~~~\n\n[1] Kohonen, T. Self-Organized Formation of Topologically Correct\nFeature Maps. Biol. Cybern. 1982, 43 (1), 59–69.\n\nThis work was partially inspired by `ramalina's som\nimplementation <https://github.com/ramarlina/som>`__ and `JustGlowing's\nminisom <https://github.com/JustGlowing/minisom>`__.\n\nDocumentation:\n~~~~~~~~~~~~~~\n\nDocumentation for som-pbc is hosted on `readthedocs.io <https://som-pbc.readthedocs.io/en/latest>`__.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexarnimueller/som",
    "keywords": "SOM embedding machine learning chemoinformatics bioinformatics datascience descriptor similarity",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "som-pbc",
    "package_url": "https://pypi.org/project/som-pbc/",
    "platform": "",
    "project_url": "https://pypi.org/project/som-pbc/",
    "project_urls": {
      "Homepage": "https://github.com/alexarnimueller/som"
    },
    "release_url": "https://pypi.org/project/som-pbc/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "self organizing maps with periodic boundary conditions",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10976700,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c25bb63963d53efe212cabe997f99fd3f761c0345ce2786b5319144a6090551",
          "md5": "e1cdffb93f0febd9ac36ecf07a6c719e",
          "sha256": "780dfb31c81b79f0bf59a2e701b12a1572aa7f25c65a04d22f304b393f701106"
        },
        "downloads": -1,
        "filename": "som-pbc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1cdffb93f0febd9ac36ecf07a6c719e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10924,
        "upload_time": "2021-07-02T10:20:48",
        "upload_time_iso_8601": "2021-07-02T10:20:48.437526Z",
        "url": "https://files.pythonhosted.org/packages/4c/25/bb63963d53efe212cabe997f99fd3f761c0345ce2786b5319144a6090551/som-pbc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47aca5f3ab0cea96b0f30cf81dc4b38a5a07102102d5b41ca034e7f500a91774",
          "md5": "b8bf1031749141617c5465a6d9c595cb",
          "sha256": "bee1f033cbef53aaf930637fc680b6c5225fd479bef411930b3ae421c6f281bc"
        },
        "downloads": -1,
        "filename": "som-pbc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8bf1031749141617c5465a6d9c595cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10567,
        "upload_time": "2021-07-02T13:02:31",
        "upload_time_iso_8601": "2021-07-02T13:02:31.210276Z",
        "url": "https://files.pythonhosted.org/packages/47/ac/a5f3ab0cea96b0f30cf81dc4b38a5a07102102d5b41ca034e7f500a91774/som-pbc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb6109919adee957dd89ed8ded78df8293574bcd9161b04bc1b6464d3e5962f",
          "md5": "0832cc0f4e860f87282ba1e899262ed0",
          "sha256": "05f6c1a9976eb4c2cf85d5dfd92853b0e657056347022b4726302f5e8623a238"
        },
        "downloads": -1,
        "filename": "som-pbc-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0832cc0f4e860f87282ba1e899262ed0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10569,
        "upload_time": "2021-07-22T11:40:55",
        "upload_time_iso_8601": "2021-07-22T11:40:55.046783Z",
        "url": "https://files.pythonhosted.org/packages/cd/b6/109919adee957dd89ed8ded78df8293574bcd9161b04bc1b6464d3e5962f/som-pbc-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdb6109919adee957dd89ed8ded78df8293574bcd9161b04bc1b6464d3e5962f",
        "md5": "0832cc0f4e860f87282ba1e899262ed0",
        "sha256": "05f6c1a9976eb4c2cf85d5dfd92853b0e657056347022b4726302f5e8623a238"
      },
      "downloads": -1,
      "filename": "som-pbc-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0832cc0f4e860f87282ba1e899262ed0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10569,
      "upload_time": "2021-07-22T11:40:55",
      "upload_time_iso_8601": "2021-07-22T11:40:55.046783Z",
      "url": "https://files.pythonhosted.org/packages/cd/b6/109919adee957dd89ed8ded78df8293574bcd9161b04bc1b6464d3e5962f/som-pbc-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}