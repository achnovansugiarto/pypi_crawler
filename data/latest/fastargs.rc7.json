{
  "info": {
    "author": "Guillaume Leclerc",
    "author_email": "leclerc@mit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console"
    ],
    "description": "# fastargs\n\nPython library for argument and configuration management.\n\nThe goal of this library is to enable easy configuration of large code bases with many parameters. It should be particulary useful in machine learning applications with many hyper-parameters scattered across multiple files and components.\n\n## Usage\n\n### Install\n\n1. PIP: `pip install fastargs`\n2. Github: `pip install git+https://github.com/GuillaumeLeclerc/fastargs.git `\n\n### Example\nSimple full example available: https://github.com/GuillaumeLeclerc/fastargs/blob/main/examples/full_simple_example.py\n\n### Declare the arguments\n\nAs demonstrated here you can declare your parameters in multiple files over your project. To make your code more readable it is recommended to declare the parameters as close as from where they are used.\n\nIn `train.py`:\n```python\nfrom fastargs import Section, Param\nfrom fastargs.validation import InRange, And\n\nSection(\"training.optimizer\", \"Optimizer parameters\").params(\n  learning_rate=Param(float, required=True),  # One can use simple type declaration\n  momentum=Param(And(float, InRange(min=0)), default=0)  # Or more constrained validation rules\n)\n\n# The training code (see later sections on how to read the params)\n```\nIn `dataloading.py`:\n```python\nfrom fastargs import Section, Param\nfrom fastargs.validation import InRange, And\n\nSection(\"data.loading\", \"Optimizer parameters\").params(\n  batch_size=Param(And(int, InRange(min=1)), required=True),\n  num_workers=Param(And(int, InRange(min=0)), default=0)\n)\n\n# Data loading code\n```\n\n### Populate the arguments\n\nArguments can be defined from multiple sources (see below). They are not exclusive and can be mix and matched.\nIf a new source is added it overrides the previous one if a given argument was already defined.\n\nIn `main.py`:\n```python\nimport argparse\n\n# Import the rest of your code that declares the arguments\nfrom fastargs import get_current_config\n\nconfig = get_current_config()\n\n# Option 1: From code\n# -------------------\n\nconfig.collect({\n  'training.optimizer.learning_rate': 0.01,  # One can specify the path to arguments with dot notation\n  'training.optimizer.momentum': 0.9,\n  'data': {\n    'loading': {\n      'batch_size': 512  # One can have the structure explicit\n    }\n    'loading.num_workers': 10  # Or even a mix of both\n  }\n})\n\n\n# Option 2: From a config file (yaml, json)\n# -----------------------------------------\n\n# Similarly one can use dot notation for arguments or use explicit structure (as shown in Option 1)\nconfig.collect_config_file('./config.yaml')\nconfig.collect_config_file('./config.json')\n\n\n# Option 3: From env variables\n# ----------------------------\n\n# One can declare the env variables this way (bash)\n# training.optimizer.momentum=0.9 python main.py\n# OR\n# export training.optimizer.momentum=0.9\n# python main.py\n\nconfig.collect_env_variables()\n\n\n# Option 4: using argparse\n# ------------------------\n\nparser = argparse.ArgumentParser(description='fastargs demo')\nconfig.augment_argparse(parser)\nconfig.collect_argparse_args(parser)\n\n# This will integrate fastargs with argparse\n# It will:\n# - Add a CLI argument for each fastargs argument\n# - Generate a user friendly --help message\n# - Allow the user to pass config files through CLI arguments and collect them aumatically for you\n# - collect env variables\n#\n# Priority for duplicated parameters is: env variable, cli argument, config files from last to first\n```\n\n### Validating the arguments\n\nArguments are validated as you access them (see next section). However if you want to check all arguments at once you can do it too.\n\n```python\n\n# Option 1\n# --------\n\nerrors = config.validate(mode='errordict')\n# This will return you a dict where the keys are the parameters\n# and the value the corresponding errors\n\n# Option 2\n# --------\n\nconfig.validate(mode='stderr')\n# If errors are found it will print a nice table summarizing all the errors \n# for the user and quit the program to let him fill the invalid/missing arguments\n\n```\n\n### Summary of parameters\n\nYou can produce a summary of the arguments defined:\n\n```python\nconfig.summary() \n# by default it will be written to stderr but you can change that by passing a file\n# to the function\n```\n\n### Accessing arguments\n\n#### Option 1: Explicitely\n\n```python\n# One can read individual arguments\n\nconfig['training.optimizer.learning_rate']\n\n# Or gather all arguments in a single object\narguments = config.get()\nprint(arguments.training.optimizer.learning_rate)\n```\n\n#### Option 2: Through decorators\n\nIt is possible to automatically feed arguments to functions without having to explicitely use the API of `fastargs`.\n\n\n```python\nfrom fastargs.decorators import param, section\n\n@param('training.optimizer.learning_rate')\n@param('training.optimizer.momentum')\ndef train_my_model(model, learning_rate, momentum):\n  ### train your model\n  \n# To avoid repeating long path we offer the @section decorator\n\n@section('training.optimizer')\n@param('learning_rate')\n@param('momentum')\ndef train_my_model(model, learning_rate, momentum):\n  ### train your model\n  \n# Note that if one does:\ntrain_my_model(model, learning_rate=10)\n# the learning from the config will be ignored\n# (but momentum will be since it wasn't explicitely overriden)\n```\n\nBy default the parameter will be passed to the argument with name the last component of the path (eg. `a.b.c` -> `c`). However, it is possible that multiple parameter section share some parameter names. It is therefore possible to explicitely chose the name of the argument:\n\n```python\n@param('a.b.c', 'param1')\n@param('d.e.c', 'param2')\ndef compute(param1, param2):\n  pass # ....\n```\n### Advanced features\n\n#### Argparse binary flags\n\nFor binary parameters in CLI arguments it is common to simply pass the name of argument with no value. We allow it using the following syntax:\n\n```python\nSection('test').params(\n    p1=Param(bool, is_flag=True)\n)\n```\n\nWhen collecting values with argparse one should simply use `--test.p1` to set the value to true. Not passing it will be equivalent to passing `False`. Note that this has no impact on other collection sources (python object, config files).\n\n\n#### Modules as arguments\n\nWe wanted to give the ability to define parameters of type \"Module\". These arguments represent paths to an importable python module (eg. `torch.optim`). The goal is to automatically load code based on the arguments provided by the user and pass the module directly to the code that needs it.\n\nSince imported modules can also define configuration/parameters we make sure to load them and add them to the documentation and let the user define them too\n\nExample (from the tests):\n```python\nSection('module.import').params(\n    module=Param(Module(), required=True)\n)\n\ncfg = get_current_config().collect({\n    'module.import.module': 'test_module.with_params',\n     # We assume that this parameter is declared in the module loaded above\n    'imported_section.blah.p1': 42.5\n})\n\nloaded_module = cfg['module.import.module']\n# If test_module.with_params has a function testme it becomes available\n# directly in the content of the configuration object\nloaded_module.testme()\n\n# The parameter declared in the imported module is\n# also loaded.\nprint(cfg['imported_section.blah.p1'])  # => 42.5\n```\n\nIf we need to get a variable/function/class, we can use the import type `ImportedObject`. In the the case of the previous example, the user would have to pass `test_module.with_params.testme`, and the value in the configuration object would be the function itself and not the whole module.\n\n#### Conditional sections\n\nIt is pretty common to have parameters that only makes sense if another parameter is defined and/or has a specific value. For example, in the context of optimization, stochastic gradient descent only has one parameter `learning_rate`. But if we use `Adam` we have extra parameters. In this situation one can do the following:\n\n```python\nSection('optim').params(\n  algorithm=Param(str)\n)\n\nSection('optim.alpha').enable_if(labmda cfg: cfg['optim.algorithm'] == 'Adam').params(\n  'momentum': Param(float, required=True),\n  'alpha': Param(float, default=1.0),\n  'beta': Param(float, default=1.0)\n)\n```\nThis way users won't see the option `momentum` until they define `optim.algorithm=Adam` and the momentum will not trigger validation error if not filled if another optimizer is chosen.\n\n## Tests\n\nOne can run the tests using:\n```\npython -m unittest discover tests\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GuillaumeLeclerc/fastargs",
    "keywords": "parameters,configuration,decorators",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastargs",
    "package_url": "https://pypi.org/project/fastargs/",
    "platform": "",
    "project_url": "https://pypi.org/project/fastargs/",
    "project_urls": {
      "Homepage": "https://github.com/GuillaumeLeclerc/fastargs"
    },
    "release_url": "https://pypi.org/project/fastargs/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library for argument and configuration management",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10352282,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bdb5be50394371eaec0e3398d2b6ae53f6047ae570e1d07e6459f6e451e5c72",
          "md5": "350320ae643bf0e62cf312cb890e56db",
          "sha256": "996e9bfcc015150b58720f1b77148dafbcd42c60489be006d3432e15a881e78f"
        },
        "downloads": -1,
        "filename": "fastargs-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350320ae643bf0e62cf312cb890e56db",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9191,
        "upload_time": "2021-04-02T20:55:30",
        "upload_time_iso_8601": "2021-04-02T20:55:30.085793Z",
        "url": "https://files.pythonhosted.org/packages/0b/db/5be50394371eaec0e3398d2b6ae53f6047ae570e1d07e6459f6e451e5c72/fastargs-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f939ee47628bc7d132ceaacbf19ed83352403a51dd77e5e91927d2c687f587d",
          "md5": "3c60afaec43363ed1bd19e1dd430aef8",
          "sha256": "56ef6cb26527df64047dce901f57f24dc28fbf8f2a14a0ac81ad5992f57dcdb8"
        },
        "downloads": -1,
        "filename": "fastargs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c60afaec43363ed1bd19e1dd430aef8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10741,
        "upload_time": "2021-04-02T20:55:38",
        "upload_time_iso_8601": "2021-04-02T20:55:38.142061Z",
        "url": "https://files.pythonhosted.org/packages/1f/93/9ee47628bc7d132ceaacbf19ed83352403a51dd77e5e91927d2c687f587d/fastargs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed35e1bd00b2b7b37f57f01b9f7a7b19ea4d88204da501713a78d997ac68e790",
          "md5": "40e94484770f1cd0c49b0e085fa9dc63",
          "sha256": "b24f9eb73f202c92fd891044fb8ebd95e3a9d13112900c3e6ec42a4c95343527"
        },
        "downloads": -1,
        "filename": "fastargs-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40e94484770f1cd0c49b0e085fa9dc63",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9385,
        "upload_time": "2021-04-02T21:43:55",
        "upload_time_iso_8601": "2021-04-02T21:43:55.549248Z",
        "url": "https://files.pythonhosted.org/packages/ed/35/e1bd00b2b7b37f57f01b9f7a7b19ea4d88204da501713a78d997ac68e790/fastargs-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08d93c2aca0ce4f83cfc4e677f3e97dbcd339499946f2aaf7148139e221264a6",
          "md5": "05ac0d6700b1819d0ba2c1b489d7d654",
          "sha256": "637d58136f3f605d6fb7583070326cfd0bc40412aa55b4c9d2a5c09761ec74dc"
        },
        "downloads": -1,
        "filename": "fastargs-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "05ac0d6700b1819d0ba2c1b489d7d654",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11269,
        "upload_time": "2021-04-02T21:44:01",
        "upload_time_iso_8601": "2021-04-02T21:44:01.118725Z",
        "url": "https://files.pythonhosted.org/packages/08/d9/3c2aca0ce4f83cfc4e677f3e97dbcd339499946f2aaf7148139e221264a6/fastargs-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "261a66b23c9c5aa73211fae081d16b7d4cb4dd2f6f21a554edae6e3791543b35",
          "md5": "192b9b35e1406191a0087f82352e5d3d",
          "sha256": "f58492898f93b581b18586f74c646a3bfa5a339e90667e04501bfe06085de2ed"
        },
        "downloads": -1,
        "filename": "fastargs-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "192b9b35e1406191a0087f82352e5d3d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10345,
        "upload_time": "2021-04-03T05:18:20",
        "upload_time_iso_8601": "2021-04-03T05:18:20.504424Z",
        "url": "https://files.pythonhosted.org/packages/26/1a/66b23c9c5aa73211fae081d16b7d4cb4dd2f6f21a554edae6e3791543b35/fastargs-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4066189eb661a12deecc7f4345c9036d67df4232d5e3d4959907e6b9ea975fa5",
          "md5": "c82480bd7d4ee03e5da53baf6070e102",
          "sha256": "f738c0c117e6fafe466790c575bfb30a0818d503a7d2df876d48c90d0057ec0c"
        },
        "downloads": -1,
        "filename": "fastargs-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c82480bd7d4ee03e5da53baf6070e102",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12759,
        "upload_time": "2021-04-03T05:18:39",
        "upload_time_iso_8601": "2021-04-03T05:18:39.550800Z",
        "url": "https://files.pythonhosted.org/packages/40/66/189eb661a12deecc7f4345c9036d67df4232d5e3d4959907e6b9ea975fa5/fastargs-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d01f2a209ddc659a546b446fff609cdbb9ea29ed093ce16330684517696ec8c4",
          "md5": "f04361189d23e34ad906207817731549",
          "sha256": "8a9f39a738361092c0594f0bcf3419c621ea33005200465fed23ccd4636c59d1"
        },
        "downloads": -1,
        "filename": "fastargs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f04361189d23e34ad906207817731549",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11699,
        "upload_time": "2021-04-03T23:54:17",
        "upload_time_iso_8601": "2021-04-03T23:54:17.242725Z",
        "url": "https://files.pythonhosted.org/packages/d0/1f/2a209ddc659a546b446fff609cdbb9ea29ed093ce16330684517696ec8c4/fastargs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dc8814938eb3977a225594d2b2b868ecaf550909e9d4e53b0fd1c668ae4b22b",
          "md5": "884f031cbe2e8baaad3dfc8ee3116b47",
          "sha256": "c341061218fc00ce1f48fb484ef215a1732611d3337c2d92e9becf4a078263af"
        },
        "downloads": -1,
        "filename": "fastargs-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "884f031cbe2e8baaad3dfc8ee3116b47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12715,
        "upload_time": "2021-04-06T23:43:26",
        "upload_time_iso_8601": "2021-04-06T23:43:26.183191Z",
        "url": "https://files.pythonhosted.org/packages/1d/c8/814938eb3977a225594d2b2b868ecaf550909e9d4e53b0fd1c668ae4b22b/fastargs-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb93f3fd820ebdfe8368f0121ff10adf7f538eab4a235e065f1cf5bd3f6eb29",
          "md5": "8307c4d5e3347af7c3df180cb2088ae8",
          "sha256": "19c62ed1b76f53f4879d8fcfe7277efed9ce899675a478706935b2b0d685e277"
        },
        "downloads": -1,
        "filename": "fastargs-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8307c4d5e3347af7c3df180cb2088ae8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12710,
        "upload_time": "2021-04-07T02:52:50",
        "upload_time_iso_8601": "2021-04-07T02:52:50.151324Z",
        "url": "https://files.pythonhosted.org/packages/5b/b9/3f3fd820ebdfe8368f0121ff10adf7f538eab4a235e065f1cf5bd3f6eb29/fastargs-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38cd1659b1ba365fef00076692c0230fe3c1dd219e740cfba70a791fecd25561",
          "md5": "ac6116905069c3301d6d8e0a57b05e9d",
          "sha256": "8787ae9a63e344378841196664a3129f841c827cf558bb25f0b01f000d57037f"
        },
        "downloads": -1,
        "filename": "fastargs-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac6116905069c3301d6d8e0a57b05e9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12801,
        "upload_time": "2021-05-14T04:05:57",
        "upload_time_iso_8601": "2021-05-14T04:05:57.099752Z",
        "url": "https://files.pythonhosted.org/packages/38/cd/1659b1ba365fef00076692c0230fe3c1dd219e740cfba70a791fecd25561/fastargs-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38cd1659b1ba365fef00076692c0230fe3c1dd219e740cfba70a791fecd25561",
        "md5": "ac6116905069c3301d6d8e0a57b05e9d",
        "sha256": "8787ae9a63e344378841196664a3129f841c827cf558bb25f0b01f000d57037f"
      },
      "downloads": -1,
      "filename": "fastargs-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac6116905069c3301d6d8e0a57b05e9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12801,
      "upload_time": "2021-05-14T04:05:57",
      "upload_time_iso_8601": "2021-05-14T04:05:57.099752Z",
      "url": "https://files.pythonhosted.org/packages/38/cd/1659b1ba365fef00076692c0230fe3c1dd219e740cfba70a791fecd25561/fastargs-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}