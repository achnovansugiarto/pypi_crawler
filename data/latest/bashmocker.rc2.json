{
  "info": {
    "author": "Timothy Booth",
    "author_email": "tim.booth@ed.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "# bashmocker\n\nA Python helper for unit testing shell scripts. It's intended for use with Bash but\nin fact any program that runs other programs and respects $PATH is testable this way.\nI made it originally for a mostly-Python project which had some embedded shell scripts,\nand I wanted to be able to test everything in one test framework.\n\nThe idea is based on the `patch` and `Mock` features in the standard `unittest.mock`\nbut rather than replacing Python functions it replaces executables. It works by making\na directory of decoy scripts, then adding this directory to the front of the PATH when\nrunning whatever you want to test. You can then query which of the decoy scripts were\nrun, and with what parameters.\n\nThis way you can use Python to write unit tests that invoke shell scripts and probe\naspects of their internal behaviour. You can probably do other things with it as well -\nit's not tied to any particular testing framework.\n\n## A quick example\n\nSay you have a shell script named *cleanup.sh*:\n\n```sh\n#!/bin/bash\necho \"Cleaning the database now\"\ndata_cleanup server1.example.com\ndata_cleanup server2.example.com\nmail_report -t steve@example.com \"All servers cleaned\"\n```\n\nTo test the behaviour of the script without actually cleaning any databases or spamming\nSteve, we can run the script with these commands mocked out:\n\n```python\nfrom bashmocker import BashMocker\n\nwith BashMocker('data_cleanup', 'mail_report') as bm:\n    bm.runscript('./cleanup.sh')\n\n    # Check that cleanup.sh called 'data_cleanup' twice.\n    assert len(bm.last_calls['data_cleanup']) == 2\n\n    # Check that 'mail_report' was run once with expected args\n    assert bm.last_calls['mail_report'] == \\\n            [ [\"-t\", \"steve@example.com\", \"All servers cleaned\"] ]\n\n    # And we can also see the message that was printed\n    assert bm.last_stdout == \"Cleaning the database now\\n\"\n```\n\n## Adding side effects\n\nIn the above example, when the script calls `data_cleanup` in the BashMocker sandbox it\nactually calls a small script which simply logs the calling arguments and exits with\nstatus 0. If `cleanup.sh` expected some output from the `data_cleanup` program then it\nmay get confused:\n\n```sh\n#!/bin/bash\nresult=$( data_cleanup server1.example.com )\n[ \"$result\" = OK ] || mail_report -t steve@example.com \"All is not well!!!\"\n```\n\nTo provide the output you can add a side effect. This needs to be added with an explicit\ncall to `add_mock()`, as you can't specify side effects in the constructor. Note that the\n`side_effect` is a line to be run by Bash not a Python callback.\n\n```python\nwith BashMocker('mail_report') as bm:\n    bm.add_mock('data_cleanup', side_effect=\"echo OK\")\n    bm.runscript('cleanup.sh')\n```\n\nYou can also have a mocked command return a failure status.\n\n```python\nwith BashMocker() as bm:\n    bm.add_mock('data_cleanup', side_effect=\"echo OK\")\n    bm.add_mock('mail_report', fail=True)\n    bm.runscript('cleanup.sh')\n```\n\n## Scripts that read and write files\n\nThis module does not aim to help you with constructing a sandbox for your script to run in,\nor inspecting the results of files written (apart from STDIN and STDOUT). You'll need to set\nthat up yourself.\n\n## What if my script invokes programs /by/explicit/path?\n\n`BashMocker` tries to patch these by defining functions, which are then fed to Bash via the\nBASH_ENV setting. This is very hacky but can work sometimes. If you're only using this module\nfor writing regression tests then often a hacky solution is fine.\n\n## What cannot be mocked out?\n\nShell builtins, because Bash does not look for these in the PATH. I've not found a good reason\nto mock them out in any case.\nThey could be done with the hack described above I guess - at present you'll have to call the\ninternal `_add_mockfunc()` directly to make that work.\n\n## Does it only work with Bash?\n\nThe main mocking mechanism simply pokes dummy programs into a directory added to the PATH, so\nCSH scripts or Makefiles or compiled applications or even Python scripts (please don't!) can\nbe tested this way.\n\nInternally the module creates these dummy programs as little Bash Scripts, but you can also force\na different interpreter to be set using eg. `BashMocker(shell=\"/bin/dash\")`. The mechanism will\nwork with Dash or with compatibility-mode Bash, but seriously who has Python3 and not Bash on\ntheir system??\n\nThe hack that allows mocking of programs with '/' in the name, ie. programs that are invoked\ndirectly without searching the PATH, only works for Bash. POSIX shell doesn't let you make\nfunctions with '/' in the name. I thought I could achieve it with aliases, but I hit a dead end.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EdinburghGenomics/bashmocker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bashmocker",
    "package_url": "https://pypi.org/project/bashmocker/",
    "platform": null,
    "project_url": "https://pypi.org/project/bashmocker/",
    "project_urls": {
      "Bug Tracker": "https://github.com/EdinburghGenomics/bashmocker/issues",
      "Homepage": "https://github.com/EdinburghGenomics/bashmocker"
    },
    "release_url": "https://pypi.org/project/bashmocker/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python helper for unit testing shell scripts.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15256872,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55b2b8ecfdc8a5c7e06e3858a84920925e834ebfe0f35ee0640d808a5b35bcf0",
          "md5": "a9cfcd3ad87a4ea9c151111c19d96962",
          "sha256": "b07730b643f658e8c4946ca7b25e9ade2f7c808c7b01d0c1a58a2074d87b3b41"
        },
        "downloads": -1,
        "filename": "bashmocker-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9cfcd3ad87a4ea9c151111c19d96962",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7514,
        "upload_time": "2021-06-14T16:13:39",
        "upload_time_iso_8601": "2021-06-14T16:13:39.033749Z",
        "url": "https://files.pythonhosted.org/packages/55/b2/b8ecfdc8a5c7e06e3858a84920925e834ebfe0f35ee0640d808a5b35bcf0/bashmocker-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b570880ef83edd47da2729091d084a515cd46ff7dd2201a9b3e79f06db092f3",
          "md5": "11a55c97324267795b44da81166804be",
          "sha256": "068da6522b563bd0588e6ef4620e72adb69848b9faace36d2bbe36851e6b6573"
        },
        "downloads": -1,
        "filename": "bashmocker-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11a55c97324267795b44da81166804be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9077,
        "upload_time": "2021-06-14T16:13:40",
        "upload_time_iso_8601": "2021-06-14T16:13:40.233319Z",
        "url": "https://files.pythonhosted.org/packages/9b/57/0880ef83edd47da2729091d084a515cd46ff7dd2201a9b3e79f06db092f3/bashmocker-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b1c105b7a9692c6b842065332967ad580dc0d554b70949c8ca5e3c29ba874e",
          "md5": "7bb68702a5ddc42ff3577b402257bf13",
          "sha256": "2c7768f036de87e87ebc2ae4892fac5ff1c35637e1fc0df30ecb5b7565d2546b"
        },
        "downloads": -1,
        "filename": "bashmocker-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bb68702a5ddc42ff3577b402257bf13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7775,
        "upload_time": "2022-09-29T15:13:31",
        "upload_time_iso_8601": "2022-09-29T15:13:31.523139Z",
        "url": "https://files.pythonhosted.org/packages/f3/b1/c105b7a9692c6b842065332967ad580dc0d554b70949c8ca5e3c29ba874e/bashmocker-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebb115b3e6cec04b133c798a5decd13e088526de3f86b51ce4b3cfba02422421",
          "md5": "f651b18640a5a753c7e3b2df96842414",
          "sha256": "334668c62b6428dd2d0efe79816e5ffc7f251caa4b3d19b3637e4744b59ce504"
        },
        "downloads": -1,
        "filename": "bashmocker-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f651b18640a5a753c7e3b2df96842414",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9187,
        "upload_time": "2022-09-29T15:13:33",
        "upload_time_iso_8601": "2022-09-29T15:13:33.635909Z",
        "url": "https://files.pythonhosted.org/packages/eb/b1/15b3e6cec04b133c798a5decd13e088526de3f86b51ce4b3cfba02422421/bashmocker-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3b1c105b7a9692c6b842065332967ad580dc0d554b70949c8ca5e3c29ba874e",
        "md5": "7bb68702a5ddc42ff3577b402257bf13",
        "sha256": "2c7768f036de87e87ebc2ae4892fac5ff1c35637e1fc0df30ecb5b7565d2546b"
      },
      "downloads": -1,
      "filename": "bashmocker-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7bb68702a5ddc42ff3577b402257bf13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7775,
      "upload_time": "2022-09-29T15:13:31",
      "upload_time_iso_8601": "2022-09-29T15:13:31.523139Z",
      "url": "https://files.pythonhosted.org/packages/f3/b1/c105b7a9692c6b842065332967ad580dc0d554b70949c8ca5e3c29ba874e/bashmocker-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebb115b3e6cec04b133c798a5decd13e088526de3f86b51ce4b3cfba02422421",
        "md5": "f651b18640a5a753c7e3b2df96842414",
        "sha256": "334668c62b6428dd2d0efe79816e5ffc7f251caa4b3d19b3637e4744b59ce504"
      },
      "downloads": -1,
      "filename": "bashmocker-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f651b18640a5a753c7e3b2df96842414",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9187,
      "upload_time": "2022-09-29T15:13:33",
      "upload_time_iso_8601": "2022-09-29T15:13:33.635909Z",
      "url": "https://files.pythonhosted.org/packages/eb/b1/15b3e6cec04b133c798a5decd13e088526de3f86b51ce4b3cfba02422421/bashmocker-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}