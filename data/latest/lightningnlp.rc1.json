{
  "info": {
    "author": "xusenlin",
    "author_email": "1659821119@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<div align=\"center\">\n\n**基于 [`pytorch-lightning`](https://github.com/Lightning-AI/lightning) 和 [`transformers`](https://github.com/huggingface/transformers) 框架实现各类 `NLP` 任务**\n\n</div>\n\n## 🔨 安装\n\n1. 搭建好 `pytorch GPU` 深度学习环境\n\n```bash\nconda create -n pytorch python=3.8\nconda activate pytorch\nconda install pytorch cudatoolkit -c pytorch\n```\n\n2. 安装 `lightningnlp`\n\n```bash\npip install lightningnlp\n```\n\n3. 在 `https://pytorch-geometric.com/whl/` 中找到与 `torch` 版本对应的 `torch_scatter`，下载后使用 `pip` 安装到环境中 \n\n```python\nimport torch\nprint(torch.__version__)  # 1.12.0\nprint(torch.version.cuda)  # 11.3\n```\n\n```bash\n# 以python=3.8, torch=1.12.0, cuda=11.3为例\nwget https://data.pyg.org/whl/torch-1.12.0%2Bcu113/torch_scatter-2.1.0%2Bpt112cu113-cp38-cp38-linux_x86_64.whl\npip install torch_scatter-2.1.0+pt112cu113-cp38-cp38-linux_x86_64.whl\n```\n\n本项目也提供了[docker安装方式](./docker)\n\n## 🧾 文本分类\n\n### 1. 数据格式\n\n<details>\n<summary>训练数据示例</summary>\n\n```json\n{\n  \"text\": \"以色列大规模空袭开始！伊朗多个军事目标遭遇打击，誓言对等反击\",\n  \"label\": \"news_military\"\n}\n```\n\n</details>\n\n### 2. 模型\n\n| 模型                                                        | 论文                                                                                                           | 备注                              |\n|-----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|---------------------------------|\n| [fc](lightningnlp/task/text_classification/fc/model.py)   |                                                                                                              | 全连接层分类                          |\n| [mdp](lightningnlp/task/text_classification/mdp/model.py) | [Multi-Sample Dropout for Accelerated Training and Better Generalization.](https://arxiv.org/abs/1905.09788) | 使用 `MultiSampleDropout`，类似于模型融合 |\n\n<details>\n<summary>训练代码示例</summary>\n\n```python\nimport os\nos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'\n\nimport pytorch_lightning as pl\nfrom pytorch_lightning.loggers import WandbLogger  # 需要安装wandb\nfrom transformers import BertTokenizerFast\n\nfrom lightningnlp.callbacks import LoggingCallback\nfrom lightningnlp.task.text_classification import (\n    TextClassificationDataModule,\n    TextClassificationTransformer,\n)\n\npl.seed_everything(seed=42)\npretrained_model_name_or_path = \"hfl/chinese-roberta-wwm-ext\"  # 预训练模型\ntokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path)\n\ndm = TextClassificationDataModule(\n    tokenizer=tokenizer,\n    train_batch_size=16,  # 训练集batch_size\n    validation_batch_size=16,  # 验证集batch_size\n    num_workers=16,  # 多进程加载数据\n    dataset_name=\"datasets/tnews\",  # 训练数据所在目录\n    train_file=\"train.json\",  # 训练集文件名\n    validation_file=\"dev.json\",  # 验证集文件名\n    train_max_length=256,\n    cache_dir=\"datasets/tnews\",  # 数据缓存路径\n)\n\nmodel = TextClassificationTransformer(\n    downstream_model_name=\"fc\",  # 模型名称\n    downstream_model_type=\"bert\",  # 预训练模型类型\n    pretrained_model_name_or_path=pretrained_model_name_or_path,\n    tokenizer=tokenizer,\n    label_map=dm.id2label,\n    learning_rate=2e-5,\n    output_dir=\"outputs/tnews/fc\",  # 模型保存路径\n)\n\nmodel_ckpt = pl.callbacks.ModelCheckpoint(\n    dirpath=\"outputs/tnews/fc\",\n    filename=\"best_model\",\n    monitor=\"val_accuracy\",\n    save_top_k=1,\n    mode=\"max\",\n)\n\nwandb_logger = WandbLogger(project=\"Text Classification\", name=\"fc\")\n\ntrainer = pl.Trainer(\n    logger=wandb_logger,\n    accelerator=\"gpu\",\n    devices=1,\n    max_epochs=12,\n    val_check_interval=0.5,\n    gradient_clip_val=1.0,\n    callbacks=[model_ckpt, LoggingCallback()]\n)\n\ntrainer.fit(model, dm)\n```\n\n</details>\n\n### 3. 预测\n\n```python\nfrom lightningnlp.task.text_classification import TextClassificationPipeline\n\npipeline = TextClassificationPipeline(model_name_or_path=\"outputs/tnews/fc\", model_name=\"fc\", model_type=\"bert\")\ntext = \"以色列大规模空袭开始！伊朗多个军事目标遭遇打击，誓言对等反击\"\nprint(pipeline(text))\n```\n\n### 4. APP应用\n![tc](images/tc.png)\n\n\n## 📄 命名实体识别\n\n### 1. 数据格式\n\n<details>\n<summary>训练数据示例</summary>\n\n```json\n{\n  \"text\": \"结果上周六他们主场0：3惨败给了中游球队瓦拉多利德，近7个多月以来西甲首次输球。\", \n  \"entities\": [\n    {\n      \"id\": 0, \n      \"entity\": \"瓦拉多利德\", \n      \"start_offset\": 20, \n      \"end_offset\": 25, \n      \"label\": \"organization\"\n    }, \n    {\n      \"id\": 1, \n      \"entity\": \"西甲\", \n      \"start_offset\": 33, \n      \"end_offset\": 35, \n      \"label\": \"organization\"\n    }\n  ]\n}\n```\n</details>\n\n\n### 2. 模型\n\n\n| 模型                                                                                   | 论文                                                                                                                                                                            | 备注                                                                                                                                            |\n|--------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| [softmax](lightningnlp/task/named_entity_recognition/crf/model.py)                   |                                                                                                                                                                               | 全连接层序列标注并使用 `BIO` 解码                                                                                                                          |\n| [crf](lightningnlp/task/named_entity_recognition/crf/model.py)                       | [Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data](https://repository.upenn.edu/cgi/viewcontent.cgi?article=1162&context=cis_papers) | 全连接层+条件随机场，并使用 `BIO` 解码                                                                                                                       |\n| [cascade-crf](lightningnlp/task/named_entity_recognition/crf/model.py)               |                                                                                                                                                                               | 先预测实体再预测实体类型                                                                                                                                  |\n| [span](lightningnlp/task/named_entity_recognition/span/model.py)                     |                                                                                                                                                                               | 使用两个指针网络预测实体起始位置                                                                                                                              |\n| [global-pointer](lightningnlp/task/named_entity_recognition/global_pointer/model.py) |                                                                                                                                                                               | [GlobalPointer：用统一的方式处理嵌套和非嵌套NER](https://spaces.ac.cn/archives/8373)、[Efficient GlobalPointer：少点参数，多点效果](https://spaces.ac.cn/archives/8877) |\n| [mrc](lightningnlp/task/named_entity_recognition/mrc/model.py)                       | [A Unified MRC Framework for Named Entity Recognition.](https://aclanthology.org/2020.acl-main.519.pdf)                                                                       | 将实体识别任务转换为阅读理解问题，输入为实体类型模板+句子，预测对应实体的起始位置                                                                                                     |\n| [tplinker](lightningnlp/task/named_entity_recognition/tplinker/model.py)             | [TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking.](https://aclanthology.org/2020.coling-main.138.pdf)                            | 将实体识别任务转换为表格填充问题                                                                                                                              |\n| [lear](lightningnlp/task/named_entity_recognition/lear/model.py)                     | [Enhanced Language Representation with Label Knowledge for Span Extraction.](https://aclanthology.org/2021.emnlp-main.379.pdf)                                                | 改进 `MRC` 方法效率问题，采用标签融合机制                                                                                                                      |\n| [w2ner](lightningnlp/task/named_entity_recognition/w2ner/model.py)                   | [Unified Named Entity Recognition as Word-Word Relation Classification.](https://arxiv.org/pdf/2112.10070.pdf)                                                                | 统一解决嵌套实体、不连续实体的抽取问题                                                                                                                           |\n| [cnn](lightningnlp/task/named_entity_recognition/cnn/model.py)                       | [An Embarrassingly Easy but Strong Baseline for Nested Named Entity Recognition.](https://arxiv.org/abs/2208.04534)                                                           | 改进 `W2NER` 方法，采用卷积网络提取实体内部token之间的关系                                                                                                          |\n\n<details>\n<summary>训练代码示例</summary>\n\n```python\nimport os\nos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'\n\nimport pytorch_lightning as pl\nfrom pytorch_lightning.loggers import WandbLogger\nfrom transformers import BertTokenizerFast\n\nfrom lightningnlp.callbacks import LoggingCallback\nfrom lightningnlp.task.named_entity_recognition import (\n    CRFNerDataModule,\n    NamedEntityRecognitionTransformer,\n)\n\npl.seed_everything(seed=42)\npretrained_model_name_or_path = \"hfl/chinese-roberta-wwm-ext\"  # 预训练模型\ntokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path)\n\ndm = CRFNerDataModule(\n    tokenizer=tokenizer,\n    train_batch_size=16,  # 训练集batch_size\n    validation_batch_size=16,  # 验证集batch_size\n    num_workers=16,  # 多进程加载数据\n    dataset_name=\"xusenlin/cmeee\",  # huggingface数据集\n    train_max_length=256,\n    validation_max_length=256,\n    cache_dir=\"datasets/cmeee\",  # 数据缓存路径\n    task_name=\"cmeee-bert-crf\",  # 自定义任务名称\n    is_chinese=True,\n)\n\nmodel = NamedEntityRecognitionTransformer(\n    downstream_model_name=\"crf\",  # 模型名称\n    downstream_model_type=\"bert\",  # 预训练模型类型\n    pretrained_model_name_or_path=pretrained_model_name_or_path,\n    tokenizer=tokenizer,\n    labels=dm.label_list,\n    learning_rate=2e-5,\n    average=\"micro\",\n    output_dir=\"outputs/cmeee/crf\",  # 模型保存路径\n)\n\nmodel_ckpt = pl.callbacks.ModelCheckpoint(\n    dirpath=\"outputs/cmeee/crf\",\n    filename=\"best_model\",\n    monitor=\"val_f1_micro\",\n    save_top_k=1,\n    mode=\"max\",\n)\n\nwandb_logger = WandbLogger(project=\"Named Entity Recognition\", name=\"cmeee-bert-crf\")\n\ntrainer = pl.Trainer(\n    logger=wandb_logger,\n    accelerator=\"gpu\",\n    devices=1,\n    max_epochs=12,\n    val_check_interval=0.5,\n    gradient_clip_val=1.0,\n    callbacks=[model_ckpt, LoggingCallback()]\n)\n\ntrainer.fit(model, dm)\n```\n\n</details>\n\n### 3. 预测\n\n本项目在 [huggingface](https://huggingface.co/xusenlin/cmeee-global-pointer) 上提供了一个训练好的模型作为示例可供测试和使用，运行以下代码会自动下载模型并进行预测\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.named_entity_recognition import NerPipeline\n\npipline = NerPipeline(model_name_or_path=\"xusenlin/cmeee-global-pointer\", model_name=\"global-pointer\", model_type=\"bert\")\ntext = \"结果上周六他们主场0：3惨败给了中游球队瓦拉多利德，近7个多月以来西甲首次输球。\"\npprint(pipline(text))\n```\n\n### 4. APP应用\n\n![ner](./images/ner.png)\n\n\n## 🔖 实体关系抽取\n\n### 1. 数据格式\n\n<details>\n<summary>训练数据示例</summary>\n\n```json\n{\n  \"text\": \"查尔斯·阿兰基斯（Charles Aránguiz），1989年4月17日出生于智利圣地亚哥，智利职业足球运动员，司职中场，效力于德国足球甲级联赛勒沃库森足球俱乐部\", \n  \"spo_list\": [\n    {\n      \"predicate\": \"出生地\", \n      \"object_type\": \"地点\", \n      \"subject_type\": \"人物\", \n      \"object\": \"圣地亚哥\", \n      \"subject\": \"查尔斯·阿兰基斯\"\n    }, \n    {\n      \"predicate\": \"出生日期\", \n      \"object_type\": \"Date\", \n      \"subject_type\": \"人物\", \n      \"object\": \"1989年4月17日\",\n      \"subject\": \"查尔斯·阿兰基斯\"\n    }\n  ]\n}\n```\n\n</details>\n\n\n### 2. 模型\n\n| 模型                                                                  | 论文                                                                                                                                                 | 备注                                                                  |\n|---------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|\n| [casrel](lightningnlp/task/relation_extraction/casrel/model.py)     | [A Novel Cascade Binary Tagging Framework for Relational Triple Extraction.](https://aclanthology.org/2020.acl-main.136.pdf)                       | 两阶段关系抽取，先抽取出句子中的主语，再通过指针网络抽取出主语对应的关系和宾语                             |\n| [tplinker](lightningnlp/task/relation_extraction/tplinker/model.py) | [TPLinker: Single-stage Joint Extraction of Entities and Relations Through Token Pair Linking.](https://aclanthology.org/2020.coling-main.138.pdf) | 将关系抽取问题转换为主语-宾语的首尾连接问题                                              |\n| [spn](lightningnlp/task/relation_extraction/spn/model.py)           | [Joint Entity and Relation Extraction with Set Prediction Networks.](http://xxx.itp.ac.cn/pdf/2011.01675v2)                                        | 将关系抽取问题转为为三元组的集合预测问题，采用 `Encoder-Decoder` 框架                        |\n| [prgc](lightningnlp/task/relation_extraction/prgc/model.py)         | [PRGC: Potential Relation and Global Correspondence Based Joint Relational Triple Extraction.](https://aclanthology.org/2021.acl-long.486.pdf)     | 先抽取句子的潜在关系类型，然后对于给定关系抽取出对应的主语-宾语对，最后通过全局对齐模块过滤                      |\n| [pfn](lightningnlp/task/relation_extraction/pfn/model.py)           | [A Partition Filter Network for Joint Entity and Relation Extraction.](https://aclanthology.org/2021.emnlp-main.17.pdf)                            | 采用类似  `LSTM`  的分区过滤机制，将隐藏层信息分成实体识别、关系识别和共享三部分，对与不同的任务利用不同的信息        |\n| [grte](lightningnlp/task/relation_extraction/grte/model.py)         | [A Novel Global Feature-Oriented Relational Triple Extraction Model based on Table Filling.](https://aclanthology.org/2021.emnlp-main.208.pdf)     | 将关系抽取问题转换为单词对的分类问题，基于全局特征抽取模块循环优化单词对的向量表示                           |\n| [gplinker](lightningnlp/task/relation_extraction/gplinker/model.py) |                                                                                                                                                    | [GPLinker：基于GlobalPointer的实体关系联合抽取](https://kexue.fm/archives/8888) |\n\n\n<details>\n<summary>训练代码示例</summary>\n\n```python\nimport os\nos.environ['TRANSFORMERS_NO_ADVISORY_WARNINGS'] = 'true'\n\nimport pytorch_lightning as pl\nfrom pytorch_lightning.loggers import WandbLogger\nfrom transformers import BertTokenizerFast\n\nfrom lightningnlp.callbacks import LoggingCallback\nfrom lightningnlp.task.relation_extraction import (\n    GPLinkerDataModule,\n    RelationExtractionTransformer,\n)\n\npl.seed_everything(seed=42)\npretrained_model_name_or_path = \"hfl/chinese-roberta-wwm-ext\"  # 预训练模型\ntokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path)\n\ndm = GPLinkerDataModule(\n    tokenizer=tokenizer,\n    train_batch_size=16,  # 训练集batch_size\n    validation_batch_size=16,  # 验证集batch_size\n    num_workers=16,  # 多进程加载数据\n    dataset_name=\"xusenlin/duie\",  # huggingface数据集\n    train_max_length=256,\n    validation_max_length=256,\n    cache_dir=\"datasets/duie\",  # 数据缓存路径\n    task_name=\"duie-bert-gplinker\",  # 自定义任务名称\n    is_chinese=True,\n)\n\nmodel = RelationExtractionTransformer(\n    downstream_model_name=\"gplinker\",  # 模型名称\n    downstream_model_type=\"bert\",  # 预训练模型类型\n    pretrained_model_name_or_path=pretrained_model_name_or_path,\n    tokenizer=tokenizer,\n    predicates=dm.predicate_list,\n    learning_rate=2e-5,\n    average=\"micro\",\n    output_dir=\"outputs/duie/gplinker\",  # 模型保存路径\n)\n\nmodel_ckpt = pl.callbacks.ModelCheckpoint(\n    dirpath=\"outputs/duie/gplinker\",\n    filename=\"best_model\",\n    monitor=\"val_f1_micro\",\n    save_top_k=1,\n    mode=\"max\",\n)\n\nwandb_logger = WandbLogger(project=\"Relation Extraction\", name=\"duie-bert-gplinker\")\n\ntrainer = pl.Trainer(\n    logger=wandb_logger,\n    accelerator=\"gpu\",\n    devices=1,\n    max_epochs=12,\n    val_check_interval=0.5,\n    gradient_clip_val=1.0,\n    callbacks=[model_ckpt, LoggingCallback()]\n)\n\ntrainer.fit(model, dm)\n```\n\n</details>\n\n### 3. 预测\n\n本项目在 [huggingface](https://huggingface.co/xusenlin/duie-gplinker) 上提供了一个训练好的模型作为示例可供测试和使用，运行以下代码会自动下载模型并进行预测\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.relation_extraction import RelationExtractionPipeline\n\npipline = RelationExtractionPipeline(model_name_or_path=\"xusenlin/duie-gplinker\", model_name=\"gplinker\", model_type=\"bert\")\ntext = \"查尔斯·阿兰基斯（Charles Aránguiz），1989年4月17日出生于智利圣地亚哥，智利职业足球运动员，司职中场，效力于德国足球甲级联赛勒沃库森足球俱乐部。\"\npprint(pipline(text))\n```\n\n### 4. APP应用\n\n![re](./images/re.png)\n\n\n## 🍭 通用信息抽取\n\n+ [UIE(Universal Information Extraction)](https://arxiv.org/pdf/2203.12277.pdf)：Yaojie Lu等人在ACL-2022中提出了通用信息抽取统一框架 `UIE`。\n\n+ 该框架实现了实体抽取、关系抽取、事件抽取、情感分析等任务的统一建模，并使得不同任务间具备良好的迁移和泛化能力。\n\n+ 为了方便大家使用 `UIE` 的强大能力，[PaddleNLP](https://github.com/PaddlePaddle/PaddleNLP)借鉴该论文的方法，基于 `ERNIE 3.0` 知识增强预训练模型，训练并开源了首个中文通用信息抽取模型 `UIE`。\n\n+ 该模型可以支持不限定行业领域和抽取目标的关键信息抽取，实现零样本快速冷启动，并具备优秀的小样本微调能力，快速适配特定的抽取目标。\n\n![uie](./images/uie.png)\n\n<details>\n<summary>👉 命名实体识别</summary>\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.uie import UIEPredictor\n\n# 实体识别\nschema = ['时间', '选手', '赛事名称'] \n# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换\nuie = UIEPredictor(\"xusenlin/uie-base\", schema=schema)\npprint(uie(\"2月8日上午北京冬奥会自由式滑雪女子大跳台决赛中中国选手谷爱凌以188.25分获得金牌！\")) # Better print results using pprint\n```\n输出：\n```text\n[{'时间': [{'end': 6,\n          'probability': 0.9857378532924486,\n          'start': 0,\n          'text': '2月8日上午'}],\n  '赛事名称': [{'end': 23,\n            'probability': 0.8503089953268272,\n            'start': 6,\n            'text': '北京冬奥会自由式滑雪女子大跳台决赛'}],\n  '选手': [{'end': 31,\n          'probability': 0.8981548639781138,\n          'start': 28,\n          'text': '谷爱凌'}]}]\n```\n</details>\n\n<details>\n<summary>👉 实体关系抽取</summary>\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.uie import UIEPredictor\n\n# 关系抽取\nschema = {'竞赛名称': ['主办方', '承办方', '已举办次数']}\n# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换\nuie = UIEPredictor(\"xusenlin/uie-base\", schema=schema)\npprint(uie(\"2022语言与智能技术竞赛由中国中文信息学会和中国计算机学会联合主办，百度公司、中国中文信息学会评测工作委员会和中国计算机学会自然语言处理专委会承办，已连续举办4届，成为全球最热门的中文NLP赛事之一。\")) # Better print results using pprint\n```\n输出：\n```text\n[{'竞赛名称': [{'end': 13,\n            'probability': 0.7825402622754041,\n            'relations': {'主办方': [{'end': 22,\n                                  'probability': 0.8421710521379353,\n                                  'start': 14,\n                                  'text': '中国中文信息学会'},\n                                  {'end': 30,\n                                  'probability': 0.7580801847701935,\n                                  'start': 23,\n                                  'text': '中国计算机学会'}],\n                          '已举办次数': [{'end': 82,\n                                    'probability': 0.4671295049136148,\n                                    'start': 80,\n                                    'text': '4届'}],\n                          '承办方': [{'end': 39,\n                                  'probability': 0.8292706618236352,\n                                  'start': 35,\n                                  'text': '百度公司'},\n                                  {'end': 72,\n                                  'probability': 0.6193477885474685,\n                                  'start': 56,\n                                  'text': '中国计算机学会自然语言处理专委会'},\n                                  {'end': 55,\n                                  'probability': 0.7000497331473241,\n                                  'start': 40,\n                                  'text': '中国中文信息学会评测工作委员会'}]},\n            'start': 0,\n            'text': '2022语言与智能技术竞赛'}]}]\n```\n</details>\n\n\n<details>\n<summary>👉  事件抽取</summary>\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.uie import UIEPredictor\n\n# 事件抽取\nschema = {\"地震触发词\": [\"地震强度\", \"时间\", \"震中位置\", \"震源深度\"]}\n# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换\nuie = UIEPredictor(\"xusenlin/uie-base\", schema=schema)\npprint(uie(\"中国地震台网正式测定：5月16日06时08分在云南临沧市凤庆县(北纬24.34度，东经99.98度)发生3.5级地震，震源深度10千米。\")) # Better print results using pprint\n```\n输出：\n```text\n[{'地震触发词': {'end': 58,\n            'probability': 0.9977425932884216,\n            'relation': {'地震强度': [{'end': 56,\n                                   'probability': 0.9980800747871399,\n                                   'start': 52,\n                                   'text': '3.5级'}],\n                         '时间': [{'end': 22,\n                                 'probability': 0.9853301644325256,\n                                 'start': 11,\n                                 'text': '5月16日06时08分'}],\n                         '震中位置': [{'end': 50,\n                                   'probability': 0.7874020934104919,\n                                   'start': 23,\n                                   'text': '云南临沧市凤庆县(北纬24.34度，东经99.98度)'}],\n                         '震源深度': [{'end': 67,\n                                   'probability': 0.9937973618507385,\n                                   'start': 63,\n                                   'text': '10千米'}]},\n            'start': 56,\n            'text': '地震'}}]\n```\n</details>\n\n<details>\n<summary>👉 评论观点抽取</summary>\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.uie import UIEPredictor\n\n# 事件抽取\nschema = {'评价维度': ['观点词', '情感倾向[正向，负向]']}\n# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换\nuie = UIEPredictor(\"xusenlin/uie-base\", schema=schema)\npprint(uie(\"店面干净，很清静，服务员服务热情，性价比很高，发现收银台有排队\")) # Better print results using pprint\n```\n输出：\n```text\n[{'评价维度': [{'end': 20,\n            'probability': 0.9817040258681473,\n            'relations': {'情感倾向[正向，负向]': [{'probability': 0.9966142505350533,\n                                          'text': '正向'}],\n                          '观点词': [{'end': 22,\n                                  'probability': 0.957396472711558,\n                                  'start': 21,\n                                  'text': '高'}]},\n            'start': 17,\n            'text': '性价比'},\n          {'end': 2,\n            'probability': 0.9696849569741168,\n            'relations': {'情感倾向[正向，负向]': [{'probability': 0.9982153274927796,\n                                          'text': '正向'}],\n                          '观点词': [{'end': 4,\n                                  'probability': 0.9945318044652538,\n                                  'start': 2,\n                                  'text': '干净'}]},\n            'start': 0,\n            'text': '店面'}]}]\n```\n</details>\n\n\n<details>\n<summary>👉 情感分类</summary>\n\n\n```python\nfrom pprint import pprint\nfrom lightningnlp.task.uie import UIEPredictor\n\n# 事件抽取\nschema = '情感倾向[正向，负向]'\n# uie-base模型已上传至huggingface，可自动下载，其他模型只需提供模型名称将自动进行转换\nuie = UIEPredictor(\"xusenlin/uie-base\", schema=schema)\npprint(uie(\"这个产品用起来真的很流畅，我非常喜欢\")) # Better print results using pprint\n```\n输出：\n```text\n[{'情感倾向[正向，负向]': {'end': 0,\n                  'probability': 0.9990023970603943,\n                  'start': 0,\n                  'text': '正向'}}]\n```\n</details>\n\n\n## Citation\n如果 `LightningNLP` 对您的研究有帮助，欢迎引用\n\n```text\n@misc{=lightningnlp,\n    title={LightningNLP: An Easy-to-use NLP Library},\n    author={senlin xu},\n    howpublished = {\\url{https://github.com/xusenlinzy/lightningblocks}},\n    year={2022}\n}\n```\n\n## Acknowledge\n\n我们借鉴了[`Lightning-transformers`](https://github.com/Lightning-AI/lightning-transformers) 关于模型使用的优秀设计，在此对`Lightning-transformers` 作者及其开源社区表示感谢。\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xusenlinzy/lightningblocks",
    "keywords": "",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lightningnlp",
    "package_url": "https://pypi.org/project/lightningnlp/",
    "platform": null,
    "project_url": "https://pypi.org/project/lightningnlp/",
    "project_urls": {
      "Homepage": "https://github.com/xusenlinzy/lightningblocks"
    },
    "release_url": "https://pypi.org/project/lightningnlp/1.0.3/",
    "requires_dist": [
      "colorama",
      "colorlog",
      "datasets",
      "faster-tokenizer",
      "jieba",
      "onnx",
      "onnxconverter-common",
      "onnxruntime",
      "pypinyin",
      "pytorch-lightning",
      "scikit-learn",
      "scipy",
      "seaborn",
      "sentencepiece",
      "setuptools",
      "spacy",
      "streamlit",
      "torchmetrics",
      "transformers"
    ],
    "requires_python": ">=3.7",
    "summary": "Pytorch-lightning Code Blocks for NLP",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16868320,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8c82ed400841d3471c7553f0f0a1e6be534719d25491ff2027acbad3c81e615",
          "md5": "a5388c661bb71a51a8d0e416e74c66a9",
          "sha256": "f0b25374fcdd7b2ce4af418bbb3d45689da217ea8b8d41239cd064f012e74171"
        },
        "downloads": -1,
        "filename": "lightningnlp-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5388c661bb71a51a8d0e416e74c66a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 319068,
        "upload_time": "2023-02-15T08:57:05",
        "upload_time_iso_8601": "2023-02-15T08:57:05.398396Z",
        "url": "https://files.pythonhosted.org/packages/e8/c8/2ed400841d3471c7553f0f0a1e6be534719d25491ff2027acbad3c81e615/lightningnlp-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8c82ed400841d3471c7553f0f0a1e6be534719d25491ff2027acbad3c81e615",
        "md5": "a5388c661bb71a51a8d0e416e74c66a9",
        "sha256": "f0b25374fcdd7b2ce4af418bbb3d45689da217ea8b8d41239cd064f012e74171"
      },
      "downloads": -1,
      "filename": "lightningnlp-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5388c661bb71a51a8d0e416e74c66a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 319068,
      "upload_time": "2023-02-15T08:57:05",
      "upload_time_iso_8601": "2023-02-15T08:57:05.398396Z",
      "url": "https://files.pythonhosted.org/packages/e8/c8/2ed400841d3471c7553f0f0a1e6be534719d25491ff2027acbad3c81e615/lightningnlp-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}