{
  "info": {
    "author": "Gongfan Fang",
    "author_email": "gongfan@u.nus.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div align=\"center\"> <h1>Torch-Pruning <br> <h3>Towards Any Structural Pruning<h3> </h1> </div>\n<div align=\"center\">\n<img src=\"assets/intro.png\" width=\"45%\">\n</div>\n\nTorch-Pruning (TP) is a versatile library that enables structural network pruning for a wide range of neural networks, including Vision Transformers, FasterRCNN, SSD, ResNet, DenseNet, RegNet, ResNext, FCN, DeepLab, VGG, and more. Unlike [torch.nn.utils.prune](https://pytorch.org/tutorials/intermediate/pruning_tutorial.html) that only zeroizes parameters through masking, Torch-Pruning employs a (non-deep) graph algorithm called DepGraph to physically remove coupled parameters (channels) from models. To explore more prunable models, please refer to [benchmarks/prunability](https://github.com/VainF/Torch-Pruning/tree/master/benchmarks/prunability). So far, TP is compatible with **73/85=85.8%** models from Torchvision 0.13.1. Besides, a  [resource list](https://github.com/VainF/Torch-Pruning/blob/master/awesome_structural_pruning.md) for practical structural pruning is continuesly being updated.\n\nFor more technical details, please refer to our preprint paper: \n\n> [**DepGraph: Towards Any Structural Pruning**](https://arxiv.org/abs/2301.12900)   \n> [Gongfan Fang](https://fangggf.github.io/), [Xinyin Ma](https://horseee.github.io/), [Mingli Song](https://person.zju.edu.cn/en/msong), [Michael Bi Mi](https://dblp.org/pid/317/0937.html), [Xinchao Wang](https://sites.google.com/site/sitexinchaowang/)   \n\nPlease do not hesitate to open a [discussion](https://github.com/VainF/Torch-Pruning/discussions) or [issue](https://github.com/VainF/Torch-Pruning/issues) if you encounter any problems with the library or have any questions related to the paper. We are always happy to assist you and address any concerns you may have. \n\n### **Features:**\n* Structural (Channel) pruning for [CNNs](tests/test_torchvision_models.py) (e.g. ResNet, DenseNet, Deeplab) and [Transformers](tests/test_torchvision_models.py) (e.g. ViT)\n* High-level pruners: [MagnitudePruner](https://arxiv.org/abs/1608.08710), [BNScalePruner](https://arxiv.org/abs/1708.06519), [GroupPruner](https://arxiv.org/abs/2301.12900) (a simple pruner used in our paper), RandomPruner, etc.\n* Graph tracing and dependency modeling.\n* Supported modules: Conv, Linear, BatchNorm, LayerNorm, Transposed Conv, PReLU, Embedding, MultiheadAttention, nn.Parameters and [customized modules](tests/test_customized_layer.py).\n* Supported operations: split, concatenation, skip connection, flatten, all element-wise ops, etc.\n* [Low-level pruning functions](https://github.com/VainF/Torch-Pruning/blob/master/torch_pruning/pruner/function.py)\n* [Benchmarks](benchmarks) and [tutorials](tutorials)\n* A [resource list](https://github.com/VainF/Torch-Pruning/blob/master/awesome_structural_pruning.md) for structrual pruning.\n\n### **Plans:**\n**We have a wealth of ideas, but unfortunately, only a handful of contributors at the moment. We hope to attract more talented guys to join us in bringing these ideas to fruition and making Torch-Pruning an industrial library.**\n* A benchmark for [Torchvision](https://pytorch.org/vision/stable/models.html) compatibility (**73/85=85.8**, :heavy_check_mark:) and [timm](https://github.com/huggingface/pytorch-image-models) compatibility.\n* GANs and Detectors (We are working on the pruning of YOLO series)\n* Pruning from Scratch / at Initialization.\n* More high-level pruners like [FisherPruner](https://arxiv.org/abs/2108.00708), [GrowingReg](https://arxiv.org/abs/2012.09243), etc.\n* More standard layers: GroupNorm, InstanceNorm, Shuffle Layers, etc.\n* More Transformers like Vision Transformers (:heavy_check_mark:), Swin Transformers, PoolFormers.\n* Examples for GNNs and RNNs.\n* Pruning benchmarks for CIFAR, ImageNet and COCO.\n* Block/Layer/Depth Pruning\n\n## Installation\n```bash\npip install torch-pruning # v1.1.0\n```\nor\n```bash\ngit clone https://github.com/VainF/Torch-Pruning.git # recommended\n```\n\n## Quickstart\n  \nHere we provide a quick start for Torch-Pruning. More explained details can be found in [tutorals](./tutorials/)\n\n### 0. How it works\n\nIn complex network structures, dependencies can arise among groups of parameters, necessitating their simultaneous pruning. Our work addresses this challenge by providing an automated mechanism for grouping parameters to facilitate their efficient removal for acceleration. Specifically, Torch-Pruning accomplishes this by forwarding your model with a fake input, tracing the network to establish a dependency graph, and recording the dependencies between layers. When you prune a single layer, Torch-Pruning identifies and groups the associated inter-dependent layers by returning a `Group`. Moreover, all pruning indices will be automatically transformed and aligned if operations like torch.split or torch.cat are present. \n\n<div align=\"center\">\n<img src=\"assets/dep.png\" width=\"100%\">\n</div>\n\nWith DepGraph, it is easy to design some \"group-level\" criteria to estimate the importance of a whole group rather than a single layer. In our paper, we craft a simple [GroupPruner](https://github.com/VainF/Torch-Pruning/blob/745f6d6bafba7432474421a8c1e5ce3aad25a5ef/torch_pruning/pruner/algorithms/group_norm_pruner.py#L8) (c) to learn consistent sparsity across coupled layers.\n\n<div align=\"center\">\n<img src=\"assets/group_sparsity.png\" width=\"80%\">\n</div>\n\n\n### 1. A minimal example\n\n```python\nimport torch\nfrom torchvision.models import resnet18\nimport torch_pruning as tp\n\nmodel = resnet18(pretrained=True).eval()\n\n# 1. build dependency graph for resnet18\nDG = tp.DependencyGraph()\nDG.build_dependency(model, example_inputs=torch.randn(1,3,224,224))\n\n# 2. Specify the to-be-pruned channels. Here we prune those channels indexed by [2, 6, 9].\npruning_idxs = [2, 6, 9]\npruning_group = DG.get_pruning_group( model.conv1, tp.prune_conv_out_channels, idxs=pruning_idxs )\n\nprint(pruning_group.details())  # or print(pruning_group)\n\n# 3. prune all grouped layers that are coupled with model.conv1 (included).\nif DG.check_pruning_group(pruning_group): # avoid full pruning, i.e., channels=0.\n    pruning_group.prune()\n\n# 4. save & load the pruned model \ntorch.save(model, 'model.pth') # save the model object\nmodel_loaded = torch.load('model.pth') # no load_state_dict\n```\n  \nThis example demonstrates the fundamental pruning pipeline using DepGraph. Note that resnet.conv1 is coupled with several layers. Let's print the resulting group and observe how a pruning operation \"triggers\" other ones. In the following example, ``A => B`` means the pruning operation ``A`` triggers the pruning operation ``B``. Operation [0] refers to the pruning root specified by ``DG.get_pruning_group``.\n\n```\n--------------------------------\n          Pruning Group\n--------------------------------\n[0] prune_out_channels on conv1 (Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)) => prune_out_channels on conv1 (Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)), idxs=[2, 6, 9] (Pruning Root)\n[1] prune_out_channels on conv1 (Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)) => prune_out_channels on bn1 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)), idxs=[2, 6, 9]\n[2] prune_out_channels on bn1 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp(ReluBackward0), idxs=[2, 6, 9]\n[3] prune_out_channels on _ElementWiseOp(ReluBackward0) => prune_out_channels on _ElementWiseOp(MaxPool2DWithIndicesBackward0), idxs=[2, 6, 9]\n[4] prune_out_channels on _ElementWiseOp(MaxPool2DWithIndicesBackward0) => prune_out_channels on _ElementWiseOp(AddBackward0), idxs=[2, 6, 9]\n[5] prune_out_channels on _ElementWiseOp(MaxPool2DWithIndicesBackward0) => prune_in_channels on layer1.0.conv1 (Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)), idxs=[2, 6, 9]\n[6] prune_out_channels on _ElementWiseOp(AddBackward0) => prune_out_channels on layer1.0.bn2 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)), idxs=[2, 6, 9]\n[7] prune_out_channels on _ElementWiseOp(AddBackward0) => prune_out_channels on _ElementWiseOp(ReluBackward0), idxs=[2, 6, 9]\n[8] prune_out_channels on _ElementWiseOp(ReluBackward0) => prune_out_channels on _ElementWiseOp(AddBackward0), idxs=[2, 6, 9]\n[9] prune_out_channels on _ElementWiseOp(ReluBackward0) => prune_in_channels on layer1.1.conv1 (Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)), idxs=[2, 6, 9]\n[10] prune_out_channels on _ElementWiseOp(AddBackward0) => prune_out_channels on layer1.1.bn2 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)), idxs=[2, 6, 9]\n[11] prune_out_channels on _ElementWiseOp(AddBackward0) => prune_out_channels on _ElementWiseOp(ReluBackward0), idxs=[2, 6, 9]\n[12] prune_out_channels on _ElementWiseOp(ReluBackward0) => prune_in_channels on layer2.0.downsample.0 (Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)), idxs=[2, 6, 9]\n[13] prune_out_channels on _ElementWiseOp(ReluBackward0) => prune_in_channels on layer2.0.conv1 (Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)), idxs=[2, 6, 9]\n[14] prune_out_channels on layer1.1.bn2 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)) => prune_out_channels on layer1.1.conv2 (Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)), idxs=[2, 6, 9]\n[15] prune_out_channels on layer1.0.bn2 (BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)) => prune_out_channels on layer1.0.conv2 (Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)), idxs=[2, 6, 9]\n--------------------------------\n```\nFor more details about grouping, please refer to [tutorials/2 - Exploring Dependency Groups](https://github.com/VainF/Torch-Pruning/blob/master/tutorials/2%20-%20Exploring%20Dependency%20Groups.ipynb)\n\n#### How to scan all groups:\nJust like what we do in the [MetaPruner](https://github.com/VainF/Torch-Pruning/blob/b607ae3aa61b9dafe19d2c2364f7e4984983afbf/torch_pruning/pruner/algorithms/metapruner.py#L197), one can use ``DG.get_all_groups(ignored_layers, root_module_types)`` to iterate all groups. Specifically, all groups will begin with a layer that matches the type specified by the \"root_module_types\" parameter. These groups contain a full index list ``idxs=[0,1,2,3,...,K]`` that covers all prunable parameters. If you are intended to prune partial channels/dimensions, you can use ``group.prune(idxs=idxs)``.\n\n```python\nfor group in DG.get_all_groups(ignored_layers=[model.conv1], root_module_types=[nn.Conv2d, nn.Linear]):\n    # handle groups in sequential order\n    idxs = [2,4,6] # your pruning indices\n    group.prune(idxs=idxs)\n    print(group)\n```\n\n\n\n### 2. High-level Pruners\n\nLeveraging the DependencyGraph, we developed several high-level pruners in this repository to facilitate effortless pruning. By specifying the desired channel sparsity, you can prune the entire model and fine-tune it using your own training code. For detailed information on this process, we encourage you to consult the [tests/test_pruner.py](tests/test_pruner.py) file. Additionally, you can find more practical examples in [benchmarks/main.py](benchmarks/main.py).\n\n```python\nimport torch\nfrom torchvision.models import resnet18\nimport torch_pruning as tp\n\nmodel = resnet18(pretrained=True)\n\n# Importance criteria\nexample_inputs = torch.randn(1, 3, 224, 224)\nimp = tp.importance.MagnitudeImportance(p=2)\n\nignored_layers = []\nfor m in model.modules():\n    if isinstance(m, torch.nn.Linear) and m.out_features == 1000:\n        ignored_layers.append(m) # DO NOT prune the final classifier!\n\niterative_steps = 5 # progressive pruning\npruner = tp.pruner.MagnitudePruner(\n    model,\n    example_inputs,\n    importance=imp,\n    iterative_steps=iterative_steps,\n    ch_sparsity=0.5, # remove 50% channels, ResNet18 = {64, 128, 256, 512} => ResNet18_Half = {32, 64, 128, 256}\n    ignored_layers=ignored_layers,\n)\n\nbase_macs, base_nparams = tp.utils.count_ops_and_params(model, example_inputs)\nfor i in range(iterative_steps):\n    pruner.step()\n    macs, nparams = tp.utils.count_ops_and_params(model, example_inputs)\n    # finetune your model here\n    # finetune(model)\n    # ...\n```\n\n#### Sparse Training\nSome pruners like [BNScalePruner](https://github.com/VainF/Torch-Pruning/blob/dd59921365d72acb2857d3d74f75c03e477060fb/torch_pruning/pruner/algorithms/batchnorm_scale_pruner.py#L45) and [GroupNormPruner](https://github.com/VainF/Torch-Pruning/blob/dd59921365d72acb2857d3d74f75c03e477060fb/torch_pruning/pruner/algorithms/group_norm_pruner.py#L53) require sparse training before pruning. This can be easily achieved by inserting just one line of code ``pruner.regularize(model)`` in your training script. The pruner will update the gradient of trainable parameters.\n```python\nfor epoch in range(epochs):\n    model.train()\n    for i, (data, target) in enumerate(train_loader):\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        out = model(data)\n        loss = F.cross_entropy(out, target)\n        loss.backward()\n        pruner.regularize(model) # <== for sparse learning\n        optimizer.step()\n```\n\n#### Interactive Pruning\nAll high-level pruners support interactive pruning. You can use ``pruner.step(interactive=True)`` to get all groups and interactively prune them by calling ``group.prune()``. This feature is useful if you want to control/monitor the pruning process.\n\n```python\nfor i in range(iterative_steps):\n    for group in pruner.step(interactive=True): # Warning: groups must be handled sequentially. Do not keep them as a list.\n        print(group) \n        # do whatever you like with the group \n        # ...\n        group.prune() # you should manually call the group.prune()\n    macs, nparams = tp.utils.count_ops_and_params(model, example_inputs)\n    # finetune your model here\n    # finetune(model)\n    # ...\n```\n\n\n\n### 3. Low-level pruning functions\n\nWhile it is possible to manually prune your model using low-level functions, this approach can be quite laborious, as it requires careful management of the associated dependencies. As a result, we recommend utilizing the aforementioned high-level pruners to streamline the pruning process.\n\n```python\ntp.prune_conv_out_channels( model.conv1, idxs=[2,6,9] )\n\n# fix the broken dependencies manually\ntp.prune_batchnorm_out_channels( model.bn1, idxs=[2,6,9] )\ntp.prune_conv_in_channels( model.layer2[0].conv1, idxs=[2,6,9] )\n...\n```\n\nThe following pruning functions are available:\n```python\ntp.prune_conv_out_channels,\ntp.prune_conv_in_channels,\ntp.prune_depthwise_conv_out_channels,\ntp.prune_depthwise_conv_in_channels,\ntp.prune_batchnorm_out_channels,\ntp.prune_batchnorm_in_channels,\ntp.prune_linear_out_channels,\ntp.prune_linear_in_channels,\ntp.prune_prelu_out_channels,\ntp.prune_prelu_in_channels,\ntp.prune_layernorm_out_channels,\ntp.prune_layernorm_in_channels,\ntp.prune_embedding_out_channels,\ntp.prune_embedding_in_channels,\ntp.prune_parameter_out_channels,\ntp.prune_parameter_in_channels,\ntp.prune_multihead_attention_out_channels,\ntp.prune_multihead_attention_in_channels,\n```\n\n### 4. Customized Layers\n\nPlease refer to [tests/test_customized_layer.py](https://github.com/VainF/Torch-Pruning/blob/master/tests/test_customized_layer.py).\n\n### 5. Benchmarks\n\nOur results on {ResNet-56 / CIFAR-10 / 2.00x}\n\n| Method | Base (%) | Pruned (%) | $\\Delta$ Acc (%) | Speed Up |\n|:--    |:--:  |:--:    |:--: |:--:      |\n| NIPS [[1]](#1)  | -    | -      |-0.03 | 1.76x    |\n| Geometric [[2]](#2) | 93.59 | 93.26 | -0.33 | 1.70x |\n| Polar [[3]](#3)  | 93.80 | 93.83 | +0.03 |1.88x |\n| CP  [[4]](#4)   | 92.80 | 91.80 | -1.00 |2.00x |\n| AMC [[5]](#5)   | 92.80 | 91.90 | -0.90 |2.00x |\n| HRank [[6]](#6) | 93.26 | 92.17 | -0.09 |2.00x |\n| SFP  [[7]](#7)  | 93.59 | 93.36 | +0.23 |2.11x |\n| ResRep [[8]](#8) | 93.71 | 93.71 | +0.00 |2.12x |\n||\n| Ours-L1 | 93.53 | 92.93 | -0.60 | 2.12x |\n| Ours-BN | 93.53 | 93.29 | -0.24 | 2.12x |\n| Ours-Group | 93.53 | *93.91 | +0.38 | 2.13x |\n\nPlease refer to [benchmarks](benchmarks) for more details.\n\n## Citation\n```\n@article{fang2023depgraph,\n  title={DepGraph: Towards Any Structural Pruning},\n  author={Fang, Gongfan and Ma, Xinyin and Song, Mingli and Mi, Michael Bi and Wang, Xinchao},\n  journal={The Thirty-Fourth IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  year={2023}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VainF/Torch-Pruning",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-pruning",
    "package_url": "https://pypi.org/project/torch-pruning/",
    "platform": null,
    "project_url": "https://pypi.org/project/torch-pruning/",
    "project_urls": {
      "Homepage": "https://github.com/VainF/Torch-Pruning"
    },
    "release_url": "https://pypi.org/project/torch-pruning/1.1.0/",
    "requires_dist": [
      "torch",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Structural Pruning for Model Acceleration.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17495799,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b892e61c81160b0bc54f489ec2f9b5bedc106160c7c9b9c16a4e5c39bcab6235",
          "md5": "37e723c96c5fcc2a29b20b33536f8d71",
          "sha256": "abd5929597dd7de6130509e39f8d2c61f4b962a2e9f480436dd94ed7cfddf72c"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37e723c96c5fcc2a29b20b33536f8d71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9442,
        "upload_time": "2019-12-16T01:59:09",
        "upload_time_iso_8601": "2019-12-16T01:59:09.180258Z",
        "url": "https://files.pythonhosted.org/packages/b8/92/e61c81160b0bc54f489ec2f9b5bedc106160c7c9b9c16a4e5c39bcab6235/torch_pruning-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e293239710a0915cc1f393f9d0c684404b713a4dff9bf08bbd83ae1778abc4f",
          "md5": "70b0f8d012e3814ebd65302edf65e9c9",
          "sha256": "a51d9452cbaaa92b9af3b33af89e9099ff02cb121ae069a503118f3590cf2e4d"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70b0f8d012e3814ebd65302edf65e9c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9881,
        "upload_time": "2019-12-16T01:59:12",
        "upload_time_iso_8601": "2019-12-16T01:59:12.129698Z",
        "url": "https://files.pythonhosted.org/packages/4e/29/3239710a0915cc1f393f9d0c684404b713a4dff9bf08bbd83ae1778abc4f/torch_pruning-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "949e3d95c4e8fe0eb4b87dc8b2755eba03453b4605e3e64ee07ecf7352e118f8",
          "md5": "1f2b37045532950e50eb5c6159ce499e",
          "sha256": "60e4aa1b8a85398a11f2ce598dc0a9967907705e558cb6b00a3ffadd0a72db77"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f2b37045532950e50eb5c6159ce499e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10312,
        "upload_time": "2019-12-17T08:35:12",
        "upload_time_iso_8601": "2019-12-17T08:35:12.341340Z",
        "url": "https://files.pythonhosted.org/packages/94/9e/3d95c4e8fe0eb4b87dc8b2755eba03453b4605e3e64ee07ecf7352e118f8/torch_pruning-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c71afdc90be2040bae84a02ab29fae9dc9a12130fc744f10bb722d2d0f904db7",
          "md5": "f30038301af7552a31fccbfb07506e65",
          "sha256": "89057a93a5d2711d4814047b4c9cd1e3f94023f416de28870691afb5972cdd8d"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f30038301af7552a31fccbfb07506e65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9990,
        "upload_time": "2019-12-17T08:35:14",
        "upload_time_iso_8601": "2019-12-17T08:35:14.975378Z",
        "url": "https://files.pythonhosted.org/packages/c7/1a/fdc90be2040bae84a02ab29fae9dc9a12130fc744f10bb722d2d0f904db7/torch_pruning-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1357bdbf242e2140dab6c77e0d891065eaea2b610b1cdc11a996918d6009d835",
          "md5": "bcb8ebe067f123ec77467c182a1d459f",
          "sha256": "8a3b92ced2af1990157d3c6a9f574e11d78a167798435cbc87c6fc6082c96c8c"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcb8ebe067f123ec77467c182a1d459f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10229,
        "upload_time": "2019-12-18T05:46:08",
        "upload_time_iso_8601": "2019-12-18T05:46:08.059100Z",
        "url": "https://files.pythonhosted.org/packages/13/57/bdbf242e2140dab6c77e0d891065eaea2b610b1cdc11a996918d6009d835/torch_pruning-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5676c12d8b50c77b88b06215a0741a903d7d0316c0d09acc6039d418abf7f3a",
          "md5": "726df0cfb537a852ec1473cade296011",
          "sha256": "9b92b9583062565ab9fad91a68fa8b98806256f5bbe230214325bf32a86fcf99"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "726df0cfb537a852ec1473cade296011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9906,
        "upload_time": "2019-12-18T05:46:15",
        "upload_time_iso_8601": "2019-12-18T05:46:15.909140Z",
        "url": "https://files.pythonhosted.org/packages/d5/67/6c12d8b50c77b88b06215a0741a903d7d0316c0d09acc6039d418abf7f3a/torch-pruning-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ca68ee16c61980b3199f9e39f6c10d9276fcdc18e3feaf9fb8c657e71d865c6",
          "md5": "72718e0efe5f5a87cb6f9ad3df510e2f",
          "sha256": "c76372b52de828ea60fa7fe4d28ce031b56dcc687b67a176f876cb180a6ae150"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72718e0efe5f5a87cb6f9ad3df510e2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10228,
        "upload_time": "2019-12-18T05:49:15",
        "upload_time_iso_8601": "2019-12-18T05:49:15.204739Z",
        "url": "https://files.pythonhosted.org/packages/2c/a6/8ee16c61980b3199f9e39f6c10d9276fcdc18e3feaf9fb8c657e71d865c6/torch_pruning-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2959e46ceaded4cf1db5dfe2b2d63876b3358f8e8c6f4fe89157878c5c38e5e",
          "md5": "81f0e885b5e67e7f5bb98784c06f93df",
          "sha256": "ca74e439d33ef8d3185bdb906b11f2ab7f8a4889d5c55e19d71c342d56c87f7d"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "81f0e885b5e67e7f5bb98784c06f93df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9908,
        "upload_time": "2019-12-18T05:49:16",
        "upload_time_iso_8601": "2019-12-18T05:49:16.790780Z",
        "url": "https://files.pythonhosted.org/packages/e2/95/9e46ceaded4cf1db5dfe2b2d63876b3358f8e8c6f4fe89157878c5c38e5e/torch-pruning-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcca781cf89094b2eccbde32652bca0d2b0674ee995ff8c3037ac46c7cdecceb",
          "md5": "28f6827a688f287259c496712aae0786",
          "sha256": "398fb43405309760175a3c254a0ea8c648c0d90cd2f7dce23b3fcd9bf9fdd49f"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28f6827a688f287259c496712aae0786",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10196,
        "upload_time": "2020-01-09T01:49:59",
        "upload_time_iso_8601": "2020-01-09T01:49:59.733113Z",
        "url": "https://files.pythonhosted.org/packages/dc/ca/781cf89094b2eccbde32652bca0d2b0674ee995ff8c3037ac46c7cdecceb/torch_pruning-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406ab56b95eb6e14389dccae81e6421d4e986c474f59f6e55b3f4354eb9c7737",
          "md5": "343fe716a7f34e57990141ec1977d67e",
          "sha256": "617ebee24b975e90ffd32adeca3a0d85dcc13ac2314ac4292015c1a8bada1a03"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "343fe716a7f34e57990141ec1977d67e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9841,
        "upload_time": "2020-01-09T01:50:01",
        "upload_time_iso_8601": "2020-01-09T01:50:01.978379Z",
        "url": "https://files.pythonhosted.org/packages/40/6a/b56b95eb6e14389dccae81e6421d4e986c474f59f6e55b3f4354eb9c7737/torch-pruning-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f0eb436a03f48434235d6aebd1eed8848741ef69a89fac449bbf3fcf8af155f",
          "md5": "9732e2f252c77b57c1bfaf4fa67915f6",
          "sha256": "acf15ddce3fde923e747ad79c0dbcf9fa000df78b9cdd1adbe0c91c1fcda9039"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9732e2f252c77b57c1bfaf4fa67915f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10210,
        "upload_time": "2020-03-10T08:52:19",
        "upload_time_iso_8601": "2020-03-10T08:52:19.176227Z",
        "url": "https://files.pythonhosted.org/packages/4f/0e/b436a03f48434235d6aebd1eed8848741ef69a89fac449bbf3fcf8af155f/torch_pruning-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcf2fdd01060df80e5b79291b58ea5f07f3e5eabc960696ae2ed7dd1d5cd8a2f",
          "md5": "1d676f55066429a314efe961adc16e04",
          "sha256": "636be65aeb5c3efaaf5dc59d87892357642972c5ac11202b4a625b8ed5c63dfb"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1d676f55066429a314efe961adc16e04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9873,
        "upload_time": "2020-03-10T08:52:21",
        "upload_time_iso_8601": "2020-03-10T08:52:21.279042Z",
        "url": "https://files.pythonhosted.org/packages/fc/f2/fdd01060df80e5b79291b58ea5f07f3e5eabc960696ae2ed7dd1d5cd8a2f/torch-pruning-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "141a02fa26a28ec0575a44798412ca588caaa287f2cbfeebbc6d405d9bde1b97",
          "md5": "631a8f826248033e0c9a645ea2c5e3a5",
          "sha256": "43dea62894732cbd6f05a6e94ee98149d4f4fea88490a4a0ad8ae1ac0195b040"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "631a8f826248033e0c9a645ea2c5e3a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10379,
        "upload_time": "2020-07-02T11:41:38",
        "upload_time_iso_8601": "2020-07-02T11:41:38.834859Z",
        "url": "https://files.pythonhosted.org/packages/14/1a/02fa26a28ec0575a44798412ca588caaa287f2cbfeebbc6d405d9bde1b97/torch_pruning-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb33535c324ee387640eea70ce8b48aa20cf1abe63aabdf0e2063b351ad86218",
          "md5": "6a67b713769f75de8efaa30da540c9f2",
          "sha256": "1c95ffb338461e4e57dac362087f0f4d29072c219719ad5e507e13886adc269a"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a67b713769f75de8efaa30da540c9f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9810,
        "upload_time": "2020-07-02T11:41:40",
        "upload_time_iso_8601": "2020-07-02T11:41:40.465634Z",
        "url": "https://files.pythonhosted.org/packages/bb/33/535c324ee387640eea70ce8b48aa20cf1abe63aabdf0e2063b351ad86218/torch-pruning-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62878d1d64d10b6106f90e0b3cc92aa165c783f0e64111ad161f9d77831acfd5",
          "md5": "7a3808e777836bdb8d1b08eca6e3a2bd",
          "sha256": "da672d0e9b8ff57f6f4d05393728573ba9f0ff3c23738f3d9a3c184eea25abd3"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a3808e777836bdb8d1b08eca6e3a2bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10938,
        "upload_time": "2020-07-02T15:48:20",
        "upload_time_iso_8601": "2020-07-02T15:48:20.902116Z",
        "url": "https://files.pythonhosted.org/packages/62/87/8d1d64d10b6106f90e0b3cc92aa165c783f0e64111ad161f9d77831acfd5/torch_pruning-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "204bf040d35b460f5d735b5ea3c85db267ed86909db4739058f410439e1f5f33",
          "md5": "165c507c34c5c9529275d0ae54a03329",
          "sha256": "2bdddc5386fbbd7e8a1400c961ddda83408f0c74157bf0705d14c810ee070a9e"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "165c507c34c5c9529275d0ae54a03329",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10494,
        "upload_time": "2020-07-02T15:48:24",
        "upload_time_iso_8601": "2020-07-02T15:48:24.654518Z",
        "url": "https://files.pythonhosted.org/packages/20/4b/f040d35b460f5d735b5ea3c85db267ed86909db4739058f410439e1f5f33/torch-pruning-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dfaa640dc7bb65df9afc95ba15621c3901201ad3089ce88426143b7e2d1be4f",
          "md5": "d5abebd76c9da40144603b58ba2fa17b",
          "sha256": "a04e611398166b0cd9f6a14a4760ca89b790230897fbf9b5326ce83291e5dea7"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5abebd76c9da40144603b58ba2fa17b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13324,
        "upload_time": "2021-03-05T07:23:01",
        "upload_time_iso_8601": "2021-03-05T07:23:01.156972Z",
        "url": "https://files.pythonhosted.org/packages/5d/fa/a640dc7bb65df9afc95ba15621c3901201ad3089ce88426143b7e2d1be4f/torch_pruning-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06522d997efe30a561339289c5e4c281d25b716b25e30adb65d840ec26251b7a",
          "md5": "b269a26adbff76173e06ea015c066cd6",
          "sha256": "6a3f88dd16131bb5dd499f657488bb9a42e30183efa656bf08c2e9a0fb35c92c"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b269a26adbff76173e06ea015c066cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13782,
        "upload_time": "2021-03-05T07:23:02",
        "upload_time_iso_8601": "2021-03-05T07:23:02.552678Z",
        "url": "https://files.pythonhosted.org/packages/06/52/2d997efe30a561339289c5e4c281d25b716b25e30adb65d840ec26251b7a/torch-pruning-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eca13dc7cde6c453a717cbaa6b28466e413cd745f76beb478a05888f3876fa3",
          "md5": "d542bd3ba3497c1e8c36305031dcab0a",
          "sha256": "777aa9daa8046c91f0bf8da43f4222a6ee647db3c69eefda5d29eabdcd2233e6"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d542bd3ba3497c1e8c36305031dcab0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13460,
        "upload_time": "2021-06-07T13:37:40",
        "upload_time_iso_8601": "2021-06-07T13:37:40.123703Z",
        "url": "https://files.pythonhosted.org/packages/2e/ca/13dc7cde6c453a717cbaa6b28466e413cd745f76beb478a05888f3876fa3/torch_pruning-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1aaced5875afd58771e0f931ccc2b16c48557560247f380d1e2f6254e52ab59",
          "md5": "3d8e16732cd1754cf0b4a6a0e7376eb9",
          "sha256": "11eadd2441cf5f1207f5cbaf4b56389d024a93310eddffb7cc59e2e41a34508d"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3d8e16732cd1754cf0b4a6a0e7376eb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13805,
        "upload_time": "2021-06-07T13:37:41",
        "upload_time_iso_8601": "2021-06-07T13:37:41.683580Z",
        "url": "https://files.pythonhosted.org/packages/d1/aa/ced5875afd58771e0f931ccc2b16c48557560247f380d1e2f6254e52ab59/torch-pruning-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d23308786fcd39bd3e563c6ab50d55b243dcd6157e62516d245185482476a3a",
          "md5": "ba2a32680d0d56ff04d4515c1d770f40",
          "sha256": "a07d2025412e128faec7b7a386329b874059bf79b3ccd6856e59ce7c307692db"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba2a32680d0d56ff04d4515c1d770f40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13969,
        "upload_time": "2021-07-08T17:39:14",
        "upload_time_iso_8601": "2021-07-08T17:39:14.315737Z",
        "url": "https://files.pythonhosted.org/packages/6d/23/308786fcd39bd3e563c6ab50d55b243dcd6157e62516d245185482476a3a/torch_pruning-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa6025bf89da8e549257de1fb2f2e6cdd47766b848036efccd99dd0b44b792ea",
          "md5": "0954e0b0800a918eb5ea5d32cbe1fcb8",
          "sha256": "00209bf73aa887991c38ba18424752649d0aa1d584aaeb4c05e600cf1e62520c"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0954e0b0800a918eb5ea5d32cbe1fcb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15034,
        "upload_time": "2021-07-08T17:39:17",
        "upload_time_iso_8601": "2021-07-08T17:39:17.519980Z",
        "url": "https://files.pythonhosted.org/packages/aa/60/25bf89da8e549257de1fb2f2e6cdd47766b848036efccd99dd0b44b792ea/torch-pruning-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f1a486780849473306d6b79b0b512fc6bd33f069c5bb8e4568ec91b6d919b47",
          "md5": "a22b5dae9b20c610173aa6cae1f3045f",
          "sha256": "57352f62654b4243f7d337855308f639d445b39b25a0d552faa44b1a6f32c76e"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a22b5dae9b20c610173aa6cae1f3045f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14033,
        "upload_time": "2021-07-30T14:23:36",
        "upload_time_iso_8601": "2021-07-30T14:23:36.458566Z",
        "url": "https://files.pythonhosted.org/packages/9f/1a/486780849473306d6b79b0b512fc6bd33f069c5bb8e4568ec91b6d919b47/torch_pruning-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c8bc50a7709e4821f3bb3dca351fa367ea1baf0a39a5506b91d175ffe1efdd5",
          "md5": "e4c3418ba02bf0cf03dce51678c7d999",
          "sha256": "0c52d2d52e3012d39b793f5cb43bfdc36a9e1ab7e9f06754ead85b8e8b55472d"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e4c3418ba02bf0cf03dce51678c7d999",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15041,
        "upload_time": "2021-07-30T14:23:38",
        "upload_time_iso_8601": "2021-07-30T14:23:38.327001Z",
        "url": "https://files.pythonhosted.org/packages/1c/8b/c50a7709e4821f3bb3dca351fa367ea1baf0a39a5506b91d175ffe1efdd5/torch-pruning-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fd84ea6d35f5f25a44029507a79cab362804b8dfc030b9703a14f79bea4e7cc",
          "md5": "a1e9fd5d704ef04200a9895492b822d5",
          "sha256": "0c9c25b981cdc2b44cb5756aaed289f4583f7977ca233d381432e403f3e5d52a"
        },
        "downloads": -1,
        "filename": "torch_pruning-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1e9fd5d704ef04200a9895492b822d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19342,
        "upload_time": "2022-07-06T11:29:16",
        "upload_time_iso_8601": "2022-07-06T11:29:16.236292Z",
        "url": "https://files.pythonhosted.org/packages/1f/d8/4ea6d35f5f25a44029507a79cab362804b8dfc030b9703a14f79bea4e7cc/torch_pruning-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74a5f6f139c6785135d73f1d927a0590b42e5a5ea1ce54d26bb319b7186f5b63",
          "md5": "c31003099b191526226717b28a76ec69",
          "sha256": "50d1440a1e0bd3de74b0fa321a796c122bbb01573a654781118d1f05a39ac5e0"
        },
        "downloads": -1,
        "filename": "torch-pruning-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c31003099b191526226717b28a76ec69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19935,
        "upload_time": "2022-07-06T11:29:18",
        "upload_time_iso_8601": "2022-07-06T11:29:18.564952Z",
        "url": "https://files.pythonhosted.org/packages/74/a5/f6f139c6785135d73f1d927a0590b42e5a5ea1ce54d26bb319b7186f5b63/torch-pruning-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1cafaea370e3236d912f20e684886a265fc6435928a1f0687d5debecef7365f",
          "md5": "d10dd96bda4f68bcbe3d3dbb1dd19877",
          "sha256": "0d94574f67718baa51d3345dc7992e594909ba509c98754c0f17f2b7f374214d"
        },
        "downloads": -1,
        "filename": "torch_pruning-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d10dd96bda4f68bcbe3d3dbb1dd19877",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30999,
        "upload_time": "2023-01-03T13:56:27",
        "upload_time_iso_8601": "2023-01-03T13:56:27.060786Z",
        "url": "https://files.pythonhosted.org/packages/d1/ca/faea370e3236d912f20e684886a265fc6435928a1f0687d5debecef7365f/torch_pruning-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0ab67d662957bf8c154e329b1a9c274c939b8f5212d3ca10bcfde4a66ab45bf",
          "md5": "a4465c62c4e16a5fe1a716f1c4676ed2",
          "sha256": "cab9a3a2f80cbec5b8c0523fe10fcf14e73c6ca02477c9cadcb42dbc06bdd0e7"
        },
        "downloads": -1,
        "filename": "torch-pruning-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4465c62c4e16a5fe1a716f1c4676ed2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28795,
        "upload_time": "2023-01-03T13:56:29",
        "upload_time_iso_8601": "2023-01-03T13:56:29.146706Z",
        "url": "https://files.pythonhosted.org/packages/a0/ab/67d662957bf8c154e329b1a9c274c939b8f5212d3ca10bcfde4a66ab45bf/torch-pruning-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dbf8fed7dc5e8570d0907a6418781c7bc74a79f3b3823afb4cf1380c0c1b037",
          "md5": "fdd6ebe45dd7639dff92ab911179671e",
          "sha256": "d519902c7f780b7a33f607f8978647031629363367fc0eaa924fcf795e2934fc"
        },
        "downloads": -1,
        "filename": "torch_pruning-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdd6ebe45dd7639dff92ab911179671e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34539,
        "upload_time": "2023-03-29T15:46:23",
        "upload_time_iso_8601": "2023-03-29T15:46:23.622919Z",
        "url": "https://files.pythonhosted.org/packages/1d/bf/8fed7dc5e8570d0907a6418781c7bc74a79f3b3823afb4cf1380c0c1b037/torch_pruning-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7054b54e164e7791594c052ba2f56fb815216927d285d680a6a05c1f4a93032c",
          "md5": "9fb2884a46e63bf36b5c40ff91498423",
          "sha256": "973022f1d60d1ceb5d5800920d1240dc2de10cb24cbf7423f915587a02c9ba04"
        },
        "downloads": -1,
        "filename": "torch-pruning-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9fb2884a46e63bf36b5c40ff91498423",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40365,
        "upload_time": "2023-03-29T15:46:26",
        "upload_time_iso_8601": "2023-03-29T15:46:26.639276Z",
        "url": "https://files.pythonhosted.org/packages/70/54/b54e164e7791594c052ba2f56fb815216927d285d680a6a05c1f4a93032c/torch-pruning-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dbf8fed7dc5e8570d0907a6418781c7bc74a79f3b3823afb4cf1380c0c1b037",
        "md5": "fdd6ebe45dd7639dff92ab911179671e",
        "sha256": "d519902c7f780b7a33f607f8978647031629363367fc0eaa924fcf795e2934fc"
      },
      "downloads": -1,
      "filename": "torch_pruning-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fdd6ebe45dd7639dff92ab911179671e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34539,
      "upload_time": "2023-03-29T15:46:23",
      "upload_time_iso_8601": "2023-03-29T15:46:23.622919Z",
      "url": "https://files.pythonhosted.org/packages/1d/bf/8fed7dc5e8570d0907a6418781c7bc74a79f3b3823afb4cf1380c0c1b037/torch_pruning-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7054b54e164e7791594c052ba2f56fb815216927d285d680a6a05c1f4a93032c",
        "md5": "9fb2884a46e63bf36b5c40ff91498423",
        "sha256": "973022f1d60d1ceb5d5800920d1240dc2de10cb24cbf7423f915587a02c9ba04"
      },
      "downloads": -1,
      "filename": "torch-pruning-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9fb2884a46e63bf36b5c40ff91498423",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40365,
      "upload_time": "2023-03-29T15:46:26",
      "upload_time_iso_8601": "2023-03-29T15:46:26.639276Z",
      "url": "https://files.pythonhosted.org/packages/70/54/b54e164e7791594c052ba2f56fb815216927d285d680a6a05c1f4a93032c/torch-pruning-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}