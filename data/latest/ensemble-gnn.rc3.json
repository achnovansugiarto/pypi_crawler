{
  "info": {
    "author": "Bastian Pfeifer",
    "author_email": "bastian.pfeifer@medunigraz.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "<p align=\"center\">\n<img src=\"https://github.com/pievos101/Ensemble-GNN/blob/main/logo2.png\" width=\"400\">\n</p>\n\n# Ensemble learning with graph neural networks for disease module discovery\n\n## Installation\n\nThe GNN-Subnet package is required\n\nhttps://github.com/pievos101/GNN-SubNet\n\nTo install GNNSubNet run:\n\n```python\npip install torch==1.11.0\npip install torchvision==0.12.0\npip install torch-geometric==2.0.4\npip install torch-scatter==2.0.9\npip install torch-sparse==0.6.13\n\n# to install GNNSubNet from source (cloned GitHub repo) run:\npip install GNN-SubNet/\n```\nPreferred versions are: torch==1.11.0, torchvision==0.12.0, torch-geometric==2.0.4, torch-scatter==2.0.9, and torch-sparse==0.6.13.\n\nTo install Ensemble-GNN from source code (cloned GitHub repo) run:\n\n```python\npip install Ensemble-GNN/\n```\n## Usage\n\n### Example 1: Synthetic data - Barabasi Networks\n\n```python\n# import GNNSubNet\nfrom GNNSubNet import GNNSubNet as gnn\n# import ensemble_gnn\nimport ensemble_gnn as egnn\n\n# Synthetic data set  ------------------------- #\nloc   = \"/home/bastian/GitHub/GNN-SubNet/GNNSubNet/datasets/synthetic\"\nppi   = f'{loc}/NETWORK_synthetic.txt'\nfeats = [f'{loc}/FEATURES_synthetic.txt']\ntarg  = f'{loc}/TARGET_synthetic.txt'\n\n# Read in the synthetic data and build a gnnsubnet object\ng = gnn.GNNSubNet(loc, ppi, feats, targ, normalize=False)\n\n# Get some general information about the data dimension\ng.summary()\n\n# train-test split: 80-20\ng_train, g_test = egnn.split(g, 0.8)\n\n# initialization: infer subnetworks and build ensemble\ne1 = egnn.ensemble(g_train, niter=1) # niter=10 is recommended\n\n# length of ensemble\nlen(e1.ensemble)\n\n# train an gnn model on each subnetwork of the ensemble\ne1.train()\n\n# accuracy for each module\ne1.train_accuracy\n\n# the nodes of each ensemble member can be accessed via\ne1.modules_gene_names\n\n# The first subnetwork used within the ensemble can be obtained from\ne1.ensemble[0].dataset[0].edge_index\n\n# grow the ensemble (greedy step)\n# e1.grow(10)\n\n# check the accuracy\ne1.train_accuracy\n\n# train again with a different train-validation split\n# e1.train()\n\n# check the accuracy\ne1.train_accuracy\n\n# predict via Majority Vote\npredicted_class = e1.predict(g_test)\n\n# the overall predictions based on the whole ensemble using majority vote\npredicted_class\n#e1.predictions_test_mv\n\n# lets check the performance of the ensemble classifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n\nacc = accuracy_score(g_test.true_class, predicted_class)\nconfusion_matrix(g_test.true_class,predicted_class)\n\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nnormalized_mutual_info_score(g_test.true_class,predicted_class)\n\nprint(\"\\n-----------\")\nprint(\"Accuracy of ensemble classifier:\", acc)\n\n```\n\n### Example 2: Protein-Protein Interaction (PPI) network data\n\n```python\n# import GNNSubNet\nfrom GNNSubNet import GNNSubNet as gnn\n# import ensemble_gnn\nimport ensemble_gnn as egnn\n\n# location of the files\nloc   = \"/home/bastian/GitHub/GNN-SubNet/TCGA\"\n# PPI network\nppi   = f'{loc}/KIDNEY_RANDOM_PPI.txt'\n# single-omic features\n#feats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt']\n# multi-omic features\nfeats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt', f'{loc}/KIDNEY_RANDOM_Methy_FEATURES.txt']\n# outcome class\ntarg  = f'{loc}/KIDNEY_RANDOM_TARGET.txt'\n\n# Load the multi-omics data\ng = gnn.GNNSubNet(loc, ppi, feats, targ)\n\n# Get some general information about the data dimension\ng.summary()\n\n# train-test split: 80-20\ng_train, g_test = egnn.split(g, 0.8)\n\n# initialization: infer subnetworks and build ensemble\ne1 = egnn.ensemble(g_train, niter=1) # niter=10 is recommended\n\n# length of ensemble\nlen(e1.ensemble)\n\n# train an gnn model on each subnetwork of the ensemble\ne1.train()\n\n# accuracy for each module\ne1.train_accuracy\n\n# the nodes of each ensemble member can be accessed via\ne1.modules_gene_names\n\n# The first subnetwork used within the ensemble can be obtained from\ne1.ensemble[0].dataset[0].edge_index\n\n# grow the ensemble (greedy step)\n# e1.grow(10) [optional]\n\n# check the accuracy\ne1.train_accuracy\n\n# train again with a different train-validation split\n# e1.train()\n\n# check the accuracy\ne1.train_accuracy\n\n# predict via Majority Vote\npredicted_class = e1.predict(g_test)\n\n# the overall predictions based on the whole ensemble using majority vote\npredicted_class\n\n# lets check the performance of the ensemble classifier\nprint(\"\\n-----------\")\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(g_test.true_class, predicted_class)\nprint(\"Accuracy of ensemble classifier:\", acc)\n\nfrom sklearn.metrics import balanced_accuracy_score\nacc_bal = balanced_accuracy_score(g_test.true_class, predicted_class)\nprint(\"Balanced accuracy of ensemble classifier:\", acc_bal)\n\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nnmi = normalized_mutual_info_score(g_test.true_class,predicted_class)\nprint(\"NMI of ensemble classifier:\", nmi)\n\n\n# The results can be compared with non-ensemble-based classification\n\n# train the GNN classifier\ng_train.train()\n\n# predict\npredicted_class = g_train.predict(g_test)\n\n# lets check the performance of the non-ensemble classifier\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(g_test.true_class, predicted_class)\nprint(\"Accuracy of ensemble classifier:\", acc)\n\nfrom sklearn.metrics import balanced_accuracy_score\nacc_bal = balanced_accuracy_score(g_test.true_class, predicted_class)\nprint(\"Balanced accuracy of ensemble classifier:\", acc_bal)\n\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nnmi = normalized_mutual_info_score(g_test.true_class,predicted_class)\nprint(\"NMI of ensemble classifier:\", nmi)\n\n\n```\n\n# Federated Ensemble Learning with Ensemble-GNN\n\n## Method 1\n\nThe models are collected from the clients and predictions are aggregated via Majority Vote.\n\n<p align=\"center\">\n<img src=\"https://github.com/pievos101/Ensemble-GNN/blob/main/fed_logo1.png\" width=\"500\">\n</p>\n\n### Example 3\n```python\n# import GNNSubNet\nfrom GNNSubNet import GNNSubNet as gnn\n# import ensemble_gnn\nimport ensemble_gnn as egnn\n\n# location of the files\nloc   = \"/home/bastian/GitHub/GNN-SubNet/TCGA\"\n# PPI network\nppi   = f'{loc}/KIDNEY_RANDOM_PPI.txt'\n# single-omic features\nfeats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt']\n# multi-omic features\n#feats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt', f'{loc}/KIDNEY_RANDOM_Methy_FEATURES.txt']\n# outcome class\ntarg  = f'{loc}/KIDNEY_RANDOM_TARGET.txt'\n\n# Load the multi-omics data\ng = gnn.GNNSubNet(loc, ppi, feats, targ)\n\n# train-test split: 80-20\ng_train, g_test = egnn.split(g, 0.8)\n\n# 50 - 50 split of the training data\npartie1, partie2 = egnn.split(g_train, 0.5)\n\n# create local ensemble classier of client 1\np1 = egnn.ensemble(partie1, niter=1)\n# train local ensemble classier of client 1\np1.train()\n#p1.grow(10) # greedy step\n\n# create local ensemble classier of client 2\np2 = egnn.ensemble(partie2, niter=1)\n# train local ensemble classier of client 2\np2.train()\n#p2.grow(10) # greedy step\n\n# Lets check the client-specific performances\nfrom sklearn.metrics import balanced_accuracy_score\nfrom sklearn.metrics import accuracy_score\n\n## client 1\np1_predicted_class = p1.predict(g_test)\nacc1 = accuracy_score(g_test.true_class, p1_predicted_class)\nacc1_bal = balanced_accuracy_score(g_test.true_class, p1_predicted_class)\n\n## client 2\np2_predicted_class = p2.predict(g_test)\nacc2 = accuracy_score(g_test.true_class, p2_predicted_class)\nacc2_bal = balanced_accuracy_score(g_test.true_class, p2_predicted_class)\n\nprint(\"\\n-----------\")\nprint(\"Balanced accuracy of client 1 ensemble classifier:\", acc1_bal)\nprint(\"Accuracy of client 1 ensemble classifier:\", acc1)\n\nprint(\"\\n-----------\")\nprint(\"Balanced accuracy of client 2 ensemble classifier:\", acc2_bal)\nprint(\"Accuracy of client 2 ensemble classifier:\", acc2)\n\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nnmi1 = normalized_mutual_info_score(g_test.true_class,p1_predicted_class)\nnmi2 = normalized_mutual_info_score(g_test.true_class,p2_predicted_class)\n\nprint(\"\\n-----------\")\nprint(\"NMI of client 1 ensemble classifier:\", nmi1)\n\nprint(\"\\n-----------\")\nprint(\"NMI of client 2 ensemble classifier:\", nmi2)\n\n\n# aggregate the models from each client\n# without sharing any data\nglobal_model = egnn.aggregate([p1,p2])\n\n# Make predictions using the global model via Majority Vote\npredicted_class = global_model.predict(g_test)\n\n# Lets check the performance of the federated ensemble classifier\nfrom sklearn.metrics import balanced_accuracy_score\nfrom sklearn.metrics import accuracy_score\n\nacc = accuracy_score(g_test.true_class, predicted_class)\nacc_bal = balanced_accuracy_score(g_test.true_class, predicted_class)\nprint(\"\\n-----------\")\nprint(\"Balanced accuracy of global ensemble classifier:\", acc_bal)\nprint(\"Accuracy of global ensemble classifier:\", acc)\n\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nnmi = normalized_mutual_info_score(g_test.true_class,predicted_class)\n\nprint(\"\\n-----------\")\nprint(\"NMI of global ensemble classifier:\", nmi)\n\n```\n\n### Example 4: Example code for multiple parties\n```python3\n#!/usr/bin/env python3\nfrom GNNSubNet import GNNSubNet as gnn\nimport ensemble_gnn as egnn\nimport copy\n\n# location of the files\nloc   = \"/home/bastian/GitHub/GNN-SubNet/TCGA\"\n# PPI network\nppi   = f'{loc}/KIDNEY_RANDOM_PPI.txt'\n# single-omic features\n#feats = [f'{loc}/KIDNEY_RANDOM_Methy_FEATURES.txt']\n# multi-omic features\nfeats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt', f'{loc}/KIDNEY_RANDOM_Methy_FEATURES.txt']\n# outcome class\ntarg  = f'{loc}/KIDNEY_RANDOM_TARGET.txt'\n\n# Load the multi-omics data\ng = gnn.GNNSubNet(loc, ppi, feats, targ)\n\n# Number of parties\nparties: int = 4\n\n# train-test split: 80:20\ng_train, g_test = egnn.split(g, 0.8)\n\n# Split data equaliy with split_n and train single models\nlearned_ensembles: list = []\nfor party in egnn.split_n(g, parties):\n    pn = egnn.ensemble(party, niter=1)\n    pn.train()\n    #pn.grow(10)\n    learned_ensembles.append(pn)\n\n# Aggregate all trained ensemble models\nglobal_model = egnn.aggregate(learned_ensembles)\n\n# lets check the performance of the federated ensemble classifier\nfrom sklearn.metrics import balanced_accuracy_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import matthews_corrcoef\nscores = [(\"Acc\", accuracy_score), (\"BalAcc\", balanced_accuracy_score), (\"MCC\", matthews_corrcoef)]\n\npredicted_class = global_model.predict(g_test)\nprint(\"# Global model performance\")\nprint(\", \".join([\"%s: %.3f\" % (c[0], c[1](g_test.true_class, predicted_class)) for c in scores]))\n\nfor party in range(0, len(learned_ensembles)):\n    test = copy.deepcopy(g_test)\n    pn_predicted_class = learned_ensembles[party].predict(test)\n    print(\"# Party %d model performance\" % (party+1))\n    print(\", \".join([\"%s: %.3f\" % (c[0], c[1](test.true_class, pn_predicted_class)) for c in scores]))\n```\n\n## Method 2 (in progress ...)\n\nNo models and data are shared, only the topologies of the relevant subnetworks. Coming soon ...\n\n\n<p align=\"center\">\n<img src=\"https://github.com/pievos101/Ensemble-GNN/blob/main/fed_logo.png\" width=\"400\">\n</p>\n\n```python\n# import GNNSubNet\nfrom GNNSubNet import GNNSubNet as gnn\n# import ensemble_gnn\nimport ensemble_gnn as egnn\n\n# location of the files\nloc   = \"/home/bastian/GitHub/GNN-SubNet/TCGA\"\n# PPI network\nppi   = f'{loc}/KIDNEY_RANDOM_PPI.txt'\n# single-omic features\nfeats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt']\n# multi-omic features\n#feats = [f'{loc}/KIDNEY_RANDOM_mRNA_FEATURES.txt', f'{loc}/KIDNEY_RANDOM_Methy_FEATURES.txt']\n# outcome class\ntarg  = f'{loc}/KIDNEY_RANDOM_TARGET.txt'\n\n# Load the multi-omics data\ng = gnn.GNNSubNet(loc, ppi, feats, targ)\n\npartie1, partie2 = egnn.split(g)\n\n# train local ensemble classier\np1 = egnn.ensemble(partie1, niter=1)\np1.train()\n#p1.grow(10)\n\np2 = egnn.ensemble(partie2, niter=1)\np2.train()\n#p2.grow(10)\n\n# Partie1 suggests a subnet\nsubnet = p1.propose()\n\n# Partie2 now checks whether this subnet is useful\n# if yes, it will locally be included\n\n# p2.check(subnet)\n\n```\n\n# Miscellaneous\n\nLogo made by Adobe Express Logo Maker: <https://www.adobe.com/express/create/logo>\n\n## Citation\nhttps://academic.oup.com/bioinformatics/article/38/Supplement_2/ii120/6702000\n\n### Bibtex\n```\n@article{pfeifer2022gnn,\n  title={{GNN-SubNet}: Disease subnetwork detection with explainable graph neural networks},\n  author={Pfeifer, Bastian and Saranti, Anna and Holzinger, Andreas},\n  journal={Bioinformatics},\n  volume={38},\n  number={Supplement\\_2},\n  pages={ii120--ii126},\n  year={2022},\n  publisher={Oxford University Press}\n}\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pievos101/Ensemble-GNN",
    "keywords": "graph neural networks,ensemble learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ensemble-gnn",
    "package_url": "https://pypi.org/project/ensemble-gnn/",
    "platform": null,
    "project_url": "https://pypi.org/project/ensemble-gnn/",
    "project_urls": {
      "Homepage": "https://github.com/pievos101/Ensemble-GNN"
    },
    "release_url": "https://pypi.org/project/ensemble-gnn/1.0.2/",
    "requires_dist": [
      "numpy (>1.0.0)",
      "pandas (>0.20.0)",
      "scikit-learn (>1.1.0)",
      "scipy (>1.5.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "Ensemble learning with graph neural networks",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17066183,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b44e8ac11b1153c538b347f808a13ea2e5008871644aca7194fd4eb71f5fd98",
          "md5": "373251ee4e376ccd2559130ff37e7736",
          "sha256": "0aecec00fe89ff3cf7f4319e002e687fe9bc6c67c66cb05d772954ed1929d838"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "373251ee4e376ccd2559130ff37e7736",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7314,
        "upload_time": "2022-11-28T10:43:09",
        "upload_time_iso_8601": "2022-11-28T10:43:09.471369Z",
        "url": "https://files.pythonhosted.org/packages/3b/44/e8ac11b1153c538b347f808a13ea2e5008871644aca7194fd4eb71f5fd98/ensemble_gnn-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b596a04e53d6e9fe4ecbd95084a43b5c6117c3e4ad5781556c7f41bfe6e23157",
          "md5": "5ad015248bbb114c2dc8bb27fc908d19",
          "sha256": "a91174ab0bb3e71e837f41ab304dcc21122ee907ca3e7183bae26fb83a11c1e2"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ad015248bbb114c2dc8bb27fc908d19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7245,
        "upload_time": "2022-11-28T10:43:11",
        "upload_time_iso_8601": "2022-11-28T10:43:11.931176Z",
        "url": "https://files.pythonhosted.org/packages/b5/96/a04e53d6e9fe4ecbd95084a43b5c6117c3e4ad5781556c7f41bfe6e23157/ensemble_gnn-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d265dffa47e22686f0a960e318ee5bfab3565510722fc1fc5fad4410a1f02f",
          "md5": "ca22ae057ae5fdbb4ffbf31377fba939",
          "sha256": "ab81d947b7caf28779810d7bbb2890fe50435c43932b5ea40f2541b960932b6b"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca22ae057ae5fdbb4ffbf31377fba939",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7311,
        "upload_time": "2022-11-28T10:51:21",
        "upload_time_iso_8601": "2022-11-28T10:51:21.195634Z",
        "url": "https://files.pythonhosted.org/packages/b4/d2/65dffa47e22686f0a960e318ee5bfab3565510722fc1fc5fad4410a1f02f/ensemble_gnn-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edef38d7d190eb140ced23b2d1068dc4dde035cc25b968ffc4bce5594c1fc81f",
          "md5": "e62248ac65fa8dda89006f50297405f2",
          "sha256": "6653b3ca72f27bfbc6cf50f38849ccde2cc29386730d27fefee10c782fc80a2c"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e62248ac65fa8dda89006f50297405f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7236,
        "upload_time": "2022-11-28T10:51:23",
        "upload_time_iso_8601": "2022-11-28T10:51:23.289242Z",
        "url": "https://files.pythonhosted.org/packages/ed/ef/38d7d190eb140ced23b2d1068dc4dde035cc25b968ffc4bce5594c1fc81f/ensemble_gnn-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5da57c36eb2ad363e5f0cbe1d413b43803fbd67e89ccd47d131e3a73f91aacde",
          "md5": "e33bb7b5132cd57dcadea60339729320",
          "sha256": "44a778e320a0cd04830451e8056c917f161bddbca598e1851a3e4a0ca5a358fc"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e33bb7b5132cd57dcadea60339729320",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8822,
        "upload_time": "2023-02-27T13:34:39",
        "upload_time_iso_8601": "2023-02-27T13:34:39.973884Z",
        "url": "https://files.pythonhosted.org/packages/5d/a5/7c36eb2ad363e5f0cbe1d413b43803fbd67e89ccd47d131e3a73f91aacde/ensemble_gnn-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fe3dafe7c263fc2c64554618ded26f54c67e429c4c248c0f854811c806669bc",
          "md5": "2faf21fba04d821b5036968987ad911d",
          "sha256": "4cacf353aa420f714024a5f2903ec5548c4cd73cf5d14e38369279c50f2d47dc"
        },
        "downloads": -1,
        "filename": "ensemble_gnn-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2faf21fba04d821b5036968987ad911d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10790,
        "upload_time": "2023-02-27T13:34:46",
        "upload_time_iso_8601": "2023-02-27T13:34:46.355533Z",
        "url": "https://files.pythonhosted.org/packages/8f/e3/dafe7c263fc2c64554618ded26f54c67e429c4c248c0f854811c806669bc/ensemble_gnn-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5da57c36eb2ad363e5f0cbe1d413b43803fbd67e89ccd47d131e3a73f91aacde",
        "md5": "e33bb7b5132cd57dcadea60339729320",
        "sha256": "44a778e320a0cd04830451e8056c917f161bddbca598e1851a3e4a0ca5a358fc"
      },
      "downloads": -1,
      "filename": "ensemble_gnn-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e33bb7b5132cd57dcadea60339729320",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8822,
      "upload_time": "2023-02-27T13:34:39",
      "upload_time_iso_8601": "2023-02-27T13:34:39.973884Z",
      "url": "https://files.pythonhosted.org/packages/5d/a5/7c36eb2ad363e5f0cbe1d413b43803fbd67e89ccd47d131e3a73f91aacde/ensemble_gnn-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fe3dafe7c263fc2c64554618ded26f54c67e429c4c248c0f854811c806669bc",
        "md5": "2faf21fba04d821b5036968987ad911d",
        "sha256": "4cacf353aa420f714024a5f2903ec5548c4cd73cf5d14e38369279c50f2d47dc"
      },
      "downloads": -1,
      "filename": "ensemble_gnn-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2faf21fba04d821b5036968987ad911d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10790,
      "upload_time": "2023-02-27T13:34:46",
      "upload_time_iso_8601": "2023-02-27T13:34:46.355533Z",
      "url": "https://files.pythonhosted.org/packages/8f/e3/dafe7c263fc2c64554618ded26f54c67e429c4c248c0f854811c806669bc/ensemble_gnn-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}