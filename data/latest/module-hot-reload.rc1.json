{
  "info": {
    "author": "borisoid",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# module_hot_reload\n\nPackage for reloading other packages and modules while Python is running\n\n## Installation\n\n```shell\npip install module-hot-reload\n```\n\n## Usage\n\nInstantiate reloader you need, import module that you want to be reloaded,\nregister it in reloader, start reloader\n\n```python\nfrom module_hot_reload.reloaders import (\n    NewModuleAwareAllModulesRecursiveAutomaticReloader,\n)\n\nimport example\n\nr = NewModuleAwareAllModulesRecursiveAutomaticReloader()\nexample = r.register(example)\nr.start()\n\nwhile True:\n    print('example.e ', example.e)\n    input('waiting..........')\n```\n\nThere are 2 types of module wrappers: (confusingly)`ModuleWrapper` - used\nprimarily for reloading of module and its submodules and does it thread-safely;\n`ModuleAttributeAccessor` - provides thread-safe `.` operator and prevents\ncollisions of module and wrapper class attribute names.\nReloader's `register()` method returns module wrapped\nwith `ModuleAttributeAccessor`.\n\nThe \"API-methods\" accept modules and know how to extract one form\nModuleWrapper or ModuleAttributeAccessor. So you can safely do something like\n\n```python\nfrom module_hot_reload.reloaders import (\n    NewModuleAwareAllModulesRecursiveAutomaticReloader,\n    NewModuleAwareAllModulesRecursiveManualReloader,\n)\nfrom module_hot_reload.module_wrappers import (\n    ModuleAttributeAccessor,\n    NewModuleAwareAllModulesRecursiveStandardModuleWrapper,\n)\n\nimport example\n\n\nr = NewModuleAwareAllModulesRecursiveAutomaticReloader()\nw = r.module_wrapper_class\n\nexample = w(example)\n# example is a ModuleWrapperBase instance now\n\nexample = r.register(example)\n# example is a ModuleAttributeAccessor instance now\n\nexample = w(example)\n# example is a ModuleWrapperBase instance now\n\n#  \\/  code sample continues  \\/\n```\n\nAs mentioned above, `ModuleAttributeAccessor` provides thread-safe `.`\noperator.\n`ModuleWrapper` does provide same functionality as well but with bulkier\nsyntax.\n\n```python\n#  /\\  code sample continuation /\\\n\nexample = ModuleAttributeAccessor(example)\nprint(example.e)  # with ModuleAttributeAccessor\n\nexample = w(example)\nprint(example.locked_get('e'))  # with ModuleWrapperBase\n\n#  \\/  code sample continues  \\/\n```\n\nThe question is: \"Why would you need to use `ModuleWrapper` then?\".\nYou really don't need to. Using it you have the ability to manually reload\nthe module and access its attributes; but there are manual reoaders whose\n`register()` method still returns `ModuleAttributeAccessor`.\n\n```python\n#  /\\  code sample continuation /\\\n\nmr = NewModuleAwareAllModulesRecursiveManualReloader()\nexample = mr.register(example)\nmr.reload()\nprint(example.e)\n\n# is equivalent to\n\nmw = mr.module_wrapper_class\nexample = mw(example)\nexample.reload()\nprint(example.locked_get('e'))\n```\n\n## How it works?\n\nActual reloading of module(s) is done with `importlib.reload()` so reed the\n[docks](https://docs.python.org/3/library/importlib.html#importlib.reload)\nto learn about reloaded modules behaviour.\n\nAutomatic reloaders use [watchdog](https://pypi.org/project/watchdog/)\nto watch file system events. It works with Windows as well as Linux.\n\n`ModuleWrapper`s and `ModuleAttributeAccessor`s use sort of `singleton pattern`\nbut there is an instance of a particular class per wrapped module, so that\n\n```python\nfrom module_hot_reload.module_wrappers import (\n    ModuleAttributeAccessor,\n    NewModuleAwareAllModulesRecursiveStandardModuleWrapper,\n)\n\nimport example\n\n\nmaa_1 = ModuleAttributeAccessor(example)\nmaa_2 = ModuleAttributeAccessor(example)\nw_1 = NewModuleAwareAllModulesRecursiveStandardModuleWrapper(example)\nw_2 = NewModuleAwareAllModulesRecursiveStandardModuleWrapper(example)\n\nprint(maa_1 is maa_2)  # True\nprint(w_1 is w_2)  # True\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Borisoid/module_hot_reload",
    "keywords": "module,hot,reload,runtime,watch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "module-hot-reload",
    "package_url": "https://pypi.org/project/module-hot-reload/",
    "platform": "",
    "project_url": "https://pypi.org/project/module-hot-reload/",
    "project_urls": {
      "Homepage": "https://github.com/Borisoid/module_hot_reload"
    },
    "release_url": "https://pypi.org/project/module-hot-reload/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package for reloading other packages and modules while Python is running",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11245172,
  "releases": {
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "931339ad851f9921aaeec03e8c388221ce8cf28cfa100fd2c6b6e7ba31cab018",
          "md5": "2f4c28cd59c6d7a290e1578ec635aa27",
          "sha256": "9a03913ac120dbbe744f48bfdee04f92e7c6873418d8f209068543bb583074fa"
        },
        "downloads": -1,
        "filename": "module_hot_reload-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2f4c28cd59c6d7a290e1578ec635aa27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8159,
        "upload_time": "2021-08-22T16:00:53",
        "upload_time_iso_8601": "2021-08-22T16:00:53.470947Z",
        "url": "https://files.pythonhosted.org/packages/93/13/39ad851f9921aaeec03e8c388221ce8cf28cfa100fd2c6b6e7ba31cab018/module_hot_reload-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "931339ad851f9921aaeec03e8c388221ce8cf28cfa100fd2c6b6e7ba31cab018",
        "md5": "2f4c28cd59c6d7a290e1578ec635aa27",
        "sha256": "9a03913ac120dbbe744f48bfdee04f92e7c6873418d8f209068543bb583074fa"
      },
      "downloads": -1,
      "filename": "module_hot_reload-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "2f4c28cd59c6d7a290e1578ec635aa27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8159,
      "upload_time": "2021-08-22T16:00:53",
      "upload_time_iso_8601": "2021-08-22T16:00:53.470947Z",
      "url": "https://files.pythonhosted.org/packages/93/13/39ad851f9921aaeec03e8c388221ce8cf28cfa100fd2c6b6e7ba31cab018/module_hot_reload-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}