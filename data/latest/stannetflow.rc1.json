{
  "info": {
    "author": "Shengzhe Xu",
    "author_email": "shengzx@vt.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# STAN: Synthetic Network Traffic Generation using Autoregressive Neural Models\n\n* Documentation: https://docs.google.com/document/d/1haSCXQRti21X08B9otwk4nVeB_zRoaKYFGoGXFvP3kc/edit?usp=sharing\n* Repository: https://github.com/ShengzheXu/stan\n\n## Overview\n\nImplementation of our submitting paper Network Traffic Data Generation usingAutoregressive Neural Models.\n\nSTAN is an autoregressive data synthesizer that can generate synthetic time-series multi-variable data.\nA flexible architecture supports to generate multi-variable data with any combination of continuous & discrete attributes. Tool document is [[here]](https://docs.google.com/document/d/1haSCXQRti21X08B9otwk4nVeB_zRoaKYFGoGXFvP3kc/edit?usp=sharing).\n\n- **Dependency capturing**: STAN learns dependency in a time-window context rectangular,\n  including both temporal dependency and attribute dependency.\n- **Network structure**: STAN uses CNN to extract dependent context features, mixture density layers to predict continuous attributes,\n  and softmax layers to predict discrete attributes.\n- **Application dataset**: UGR'16: A New Dataset for the Evaluation of Cyclostationarity-Based Network IDSs [[link]](https://nesg.ugr.es/nesg-ugr16/)\n\n<!-- ![pipline](documents/stan_overview.png) -->\n<center>\n<img src=\"documents/stan_overview.png\" width=\"250\">\n</center>\n\n\n## STAN Structure\n\n\n<center>\n<img src=\"documents/stan_arch.png\" width=\"400\">\n</center>\n<!-- ![arch](documents/stan_arch.png) -->\n\n\n## Installation\n\nDownload source code by \n\n`pip install stannetflow`\n\n## Play with model\n\n**Data Format**\n\n**STAN** expects the input data to be a table given as either a `numpy.ndarray` or a\n`pandas.DataFrame` object with two types of columns:\n\n* **Continuous Columns**: Columns that contain numerical values and which can take any value.\n* **Discrete columns**: Columns that only contain a finite number of possible values, wether\nthese are string values or not.\n\nStandard **Tabular (Simulated) data** with number-based sampler.\n```python\nfrom stannetflow import STANSynthesizer\nfrom stannetflow.artificial.datamaker import artificial_data_generator\n\ndef test_artificial():\n  adg = artificial_data_generator(weight_list=[0.9, 0.9])\n  df_naive = adg.sample(row_num=100)\n  X, y = adg.agg(agg=1)\n\n  stan = STANSynthesizer(dim_in=2, dim_window=1)\n  stan.fit(X, y)\n  samples = stan.sample(10)\n  print(samples)\n```\n**Netflow data** with continuous/discrete/categorical columns settings and condition-based sampler. (with delta time generation and target time length condition.) Discrete and categorical columns can be explicitly set to improve the modeling performance.\nInstead of using `.fit()` and `.sample()`, for large dataset use `.batch_fit()` and `.time_series_sample()`. In addition, for the *Netflow* data, we need `NetworkTrafficTransformer().rev_transfer()` to support translating the generated model output back to the real *Netflow* form.\n\n```python\nfrom stannetflow import STANSynthesizer, STANCustomDataLoader, NetflowFormatTransformer\n\ndef test_ugr16(train_file, load_checkpoint=False):\n  train_loader = STANCustomDataLoader(train_file, 6, 16).get_loader()\n  ugr16_n_col, ugr16_n_agg, ugr16_arch_mode = 16, 5, 'B'\n  # index of the columns that are discrete (in one-hot groups), categorical (number of types)\n  # or any order if wanted\n  ugr16_discrete_columns = [[11,12], [13, 14, 15]]\n  ugr16_categorical_columns = {5:1670, 6:1670, 7:256, 8:256, 9:256, 10:256}\n  ugr16_execute_order = [0,1,13,11,5,6,7,8,9,10,3,2,4]\n\n  stan = STANSynthesizer(dim_in=ugr16_n_col, dim_window=ugr16_n_agg, \n          discrete_columns=ugr16_discrete_columns,\n          categorical_columns=ugr16_categorical_columns,\n          execute_order=ugr16_execute_order,\n          arch_mode=ugr16_arch_mode\n          )\n\n  if load_checkpoint is False:\n    stan.batch_fit(train_loader, epochs=2)\n  else:\n    stan.load_model('ep998') # checkpoint name\n    # validation\n    # stan.validate_loss(test_loader, loaded_ep='ep998')\n\n  ntt = NetflowFormatTransformer()\n  samples = stan.time_series_sample(864)\n  df_rev = ntt.rev_transfer(samples)\n  print(df_rev)\n  return df_rev\n```\n## Example data making and model training cases\n\n```\npython test.py\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ShengzheXu/stan",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stannetflow",
    "package_url": "https://pypi.org/project/stannetflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/stannetflow/",
    "project_urls": {
      "Homepage": "https://github.com/ShengzheXu/stan"
    },
    "release_url": "https://pypi.org/project/stannetflow/0.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scikit-learn",
      "matplotlib",
      "torch"
    ],
    "requires_python": "",
    "summary": "top-level package for netflow-stan",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11267327,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a047d304ec60edb072961ba0e152d44b82c649d001cd2472773bbe1087a2d5",
          "md5": "0b01da346d205fac0bcda992a1953b4b",
          "sha256": "a1728cae64a452dd2f6567129156d90d302fddbcb432dadc68fccf332d0a8d7a"
        },
        "downloads": -1,
        "filename": "stannetflow-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b01da346d205fac0bcda992a1953b4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18020,
        "upload_time": "2021-08-24T21:14:48",
        "upload_time_iso_8601": "2021-08-24T21:14:48.347252Z",
        "url": "https://files.pythonhosted.org/packages/52/a0/47d304ec60edb072961ba0e152d44b82c649d001cd2472773bbe1087a2d5/stannetflow-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88f3f81eec6ef9d12cc8f8b9180cf2fce79b88064109ff5b32f678bdba3bd47d",
          "md5": "07d041690131aa8769b9d77872fda394",
          "sha256": "d94dd958c1f0a1d9f5af897dfbde1b4a5ddbb0b8187ab3190f81f86d8efa5314"
        },
        "downloads": -1,
        "filename": "stannetflow-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07d041690131aa8769b9d77872fda394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16595,
        "upload_time": "2021-08-24T21:14:50",
        "upload_time_iso_8601": "2021-08-24T21:14:50.935276Z",
        "url": "https://files.pythonhosted.org/packages/88/f3/f81eec6ef9d12cc8f8b9180cf2fce79b88064109ff5b32f678bdba3bd47d/stannetflow-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52a047d304ec60edb072961ba0e152d44b82c649d001cd2472773bbe1087a2d5",
        "md5": "0b01da346d205fac0bcda992a1953b4b",
        "sha256": "a1728cae64a452dd2f6567129156d90d302fddbcb432dadc68fccf332d0a8d7a"
      },
      "downloads": -1,
      "filename": "stannetflow-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0b01da346d205fac0bcda992a1953b4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18020,
      "upload_time": "2021-08-24T21:14:48",
      "upload_time_iso_8601": "2021-08-24T21:14:48.347252Z",
      "url": "https://files.pythonhosted.org/packages/52/a0/47d304ec60edb072961ba0e152d44b82c649d001cd2472773bbe1087a2d5/stannetflow-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88f3f81eec6ef9d12cc8f8b9180cf2fce79b88064109ff5b32f678bdba3bd47d",
        "md5": "07d041690131aa8769b9d77872fda394",
        "sha256": "d94dd958c1f0a1d9f5af897dfbde1b4a5ddbb0b8187ab3190f81f86d8efa5314"
      },
      "downloads": -1,
      "filename": "stannetflow-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "07d041690131aa8769b9d77872fda394",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16595,
      "upload_time": "2021-08-24T21:14:50",
      "upload_time_iso_8601": "2021-08-24T21:14:50.935276Z",
      "url": "https://files.pythonhosted.org/packages/88/f3/f81eec6ef9d12cc8f8b9180cf2fce79b88064109ff5b32f678bdba3bd47d/stannetflow-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}