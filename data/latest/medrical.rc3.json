{
  "info": {
    "author": "Dimitris Prasakis",
    "author_email": "dimitris@prasakis.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n<img src=\"https://prasakis.com/github/medrical.png?new\" width=\"160\" align=\"right\">\n\n**Tech Stack**\n\n[![Build Status](https://img.shields.io/badge/Build%20with-Python-9CF?&logo=python)](https://img.shields.io/badge/Build%20with-python-9CF) \n[![Build Status](https://img.shields.io/badge/Published%20on%20PyPi-v0.1.0-9CF)](https://img.shields.io/badge/Build%20with-python-9CF) [![Build with](https://img.shields.io/badge/Built%20on-Apache%20Kafka-yellow)](https://img.shields.io/badge/Build%20with-kafka-yellow) [![Build with](https://img.shields.io/badge/Built%20on-PostgreSQL-yellow)](https://img.shields.io/badge/Build%20with-postgres-yellow) \n\n**Social**\n\n[![Built on](https://img.shields.io/badge/Personal-Website-Green)](https://prasakis.com/medrical) [![Built on](https://img.shields.io/badge/LinkedIn-Profile-blue)](https://www.linkedin.com/in/dimitrisprs/)  [![Built on](https://img.shields.io/github/followers/dimitrispr?style=social)](https://img.shields.io/badge/Build%20with-kafka-yellow) \n\n# General\n\nThis is a demonstration project for <a href=\"https://aiven.io\"> Aiven </a>\n\nMedrical is a real-time medical metric monitoring system, powered by Apache Kafka and postgreSQL. It continuously monitors patient biometrics (e.g heart rate, body temprature, systolic & diastolic blood pressure) and publishes them to Kafka topics. A JDBC connector subscribes to those topics and stores them into a PostgreSQL DB table.  \n\n*Medrical is a wordplay derived from the phrase \"medical metrics\"*\n\nTable of Contents\n=================\n\n* [General](#general)\n* [Installation](#installation)\n* [Configuration](#configuration)\n  * [Medrical Configuration](#medrical-configuration) \n  * [JDBC Connector Sink Configuration](#jdbc-connector-sink-configuration)  \n  * [SSL Configuration](#ssl-configuration)  \n* [How to run - Medrical Client](#how-to-run---medrical-client)\n  * [Medrical producer](#medrical-producer)\n  * [Medrical Unit Tests](#medrical-unit-tests)\n* [Understanding Medrical's Architecture](#understanding-the-architecture-of-medrical)\n* [To Do's](#to-do-testing)\n\n# Installation\n\nPrior installation, consider using a virtual enviroment\n```sh\n~$ virtualenv medrical_env\n~$ source medrical_env/bin/activate\n```\n\nMedrical is published on PyPi. Install it on your machine with:\n\n```sh\n~$ pip install medrical\n```\n\nor using the git repo \n\n```sh\n~$ git clone https://github.com/DimitrisPr/medrical.git\n~$ cd medrical\n~$ pip install .\n```\n\n# Configuration\n\nMedrical requires a running instance of:\n- A Kafka enviroment, with schema registry enabled and the option `kafka.auto_create_topics_enable = true`\n- <a href=\"https://github.com/aiven/aiven-kafka-connect-jdbc\"> A Kafka JDBC connector sink </a>\n- A postgreSQL database (ideally with TimescaleDB extension enabled for future integrations)\n\n## Medrical Configuration\n\nMedrical can be configured with:\n\n```sh\n~$ medrical-configure\n```\n\nThe cli configuration interface requests the crediantials of Kafka, Schema and postgreSQL.\n\nMedrical can be re-configured at a later point in time.\n\n### Demo Medrical configuration\n\n<img src=\"https://prasakis.com/github/medrical-configure.png\" width=\"450\">\n\n## JDBC Connector Sink Configuration\n\nThe JDBC connector's configuration must support several requirements including:\n\n- AVRO serialization converters\n- Topic regex\n- Dynamic topic naming\n\n### Demo JDBC connector configuration\n\n```\n{\n    \"name\": \"sink\",\n    \"connector.class\": \"io.aiven.connect.jdbc.JdbcSinkConnector\",\n    \"tasks.max\": \"1\",\n    \"key.converter\": \"io.confluent.connect.avro.AvroConverter\",\n    \"key.converter.schema.registry.url\": \"https://username:password@host:port\",\n    \"key.converter.basic.auth.credentials.source\": \"USER_INFO\",\n    \"key.converter.basic.auth.user.info\": \"username:password\",\n    \"value.converter\": \"io.confluent.connect.avro.AvroConverter\",\n    \"value.converter.schema.registry.url\": \"https://username:password@host:port\",\n    \"value.converter.basic.auth.credentials.source\": \"USER_INFO\",\n    \"value.converter.basic.auth.user.info\": \"username:password\",\n    \"topics.regex\": \"biometrics_(.*)\",\n    \"connection.url\": \"jdbc:postgresql://host:port/db_name\",\n    \"connection.user\": \"username\",\n    \"connection.password\": \"password\",\n    \"insert.mode\": \"insert\",\n    \"table.name.format\": \"${topic}\",\n    \"auto.create\": \"true\",\n    \"auto.evolve\": \"true\",\n    \"schema.registry.url\": \"https://username:password@host:port\"\n}\n```\n\nNote that the proper configuration of the medrical application and the JDBC Connector is essential in order for medrical to run.\n\n## SSL Configuration\n\nThe Medrical configurator provides a cli interface for SSL configuration `medrical configure ssl`, but it is unstable and has only been tested in Linux. \nAlternatively, the {access key, access certificate, CA certificate} = {ca.pem, service.cert, service.key} files must either be manually added to `medrical/config/ssl/` directory with the excact aforementioned names, or be programmatically added as strings in the code of the producer module `medrical/producer/producer.py`.\n\n\n<img src=\"https://prasakis.com/github/medrical-ssl.png\" width=\"700\">\n\n\n\n# How to run - Medrical Client\n\nJust like the configuration cli interface, medrical application can be launched with:\n\n```sh\n~$ medrical\n```\n\n<img src=\"https://prasakis.com/github/medrical-cli.png?new\" width=\"450\">\n\n## Medrical producer\n\nThe medrical producer can be launched using:\n```sh\n~$ medrical produce\n```\nThe produces publishes by default events to a topic named \"biometrics_default\". The topic name can be changed programmatically. The JDBC connector is subscribed to topics with names based on the regex `biometrics_(.*)`.\n\n\n## Medrical unit tests\n\nThere are two unit tests currently implemented in medrical. A test for the JDBC connector and a test for the Kafka biometric producer. The former and the latter can be executed with the following commands respectively.\n\n```sh\n~$ medrical test connector\n~$ medrical test producer\n```\n\nThoughout testing needs to be done for later versions. \n\n### To Do Testing\n\n- More unit tests for JDBC producer (e.g test that *every* new event is properly published when running in a loop continuously)\n- More unit tests for JDBC connector (e.g time needed to create a new table given a new topic,) \n- Test medrical's command line client\n\n## Understanding the architecture of Medrical\n\nThe following table presents briefly each medical submodule \n\n| File/Module | Brief description |\n| ------ | ------ |\n| medrical/producer/patient.py | This module simulates the biometrics of a patient similar to the [Aiven's fake Pizza Data Producer](https://github.com/aiven/kafka-python-fake-data-producer)|\n| medrical/producer/producer.py | This is a Kafka producer. It monitors patient's biometrics and publishes them as events to Kafka |\n| medrical/cli/cli.py | This module implements the Medrical's command line interface |\n| medrical/config| This module has several configuration files concerning the AVRO schemas, SSL certificates, medrical configuration etc |\n| medrical/config/config.py | This module is the Medrical's configuration script. It is used by cli.py |\n| medrical/config/pipeline.cfg | This config file stores Kafka's and PostgreSQL's credentials |\n| medrical/config/ssl | This directory stores all the SSL related certificates/keys |\n| medrical/config/schemas | This directory stores the value and key AVRO schemas |\n| tests/ | This module includes all the unit tests |\n| tests/test_producer.py | Test that verifies that the producer publishes the topics succesfully to Kafka. |\n| tests/test_connector.py | Tests that verifies whether a postgreSQL table is auto-created when the producer publishes a new topic. |\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DimitrisPr/medrical",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medrical",
    "package_url": "https://pypi.org/project/medrical/",
    "platform": "",
    "project_url": "https://pypi.org/project/medrical/",
    "project_urls": {
      "Homepage": "https://github.com/DimitrisPr/medrical"
    },
    "release_url": "https://pypi.org/project/medrical/0.1.10/",
    "requires_dist": [
      "CacheControl (==0.12.6)",
      "aiven-client (==2.10.0)",
      "appdirs (==1.4.3)",
      "astroid (==2.4.2)",
      "avro-python3 (==1.10.1)",
      "certifi (==2019.11.28)",
      "chardet (==3.0.4)",
      "colorama (==0.4.3)",
      "confluent-kafka (==1.6.0)",
      "contextlib2 (==0.6.0)",
      "distlib (==0.3.0)",
      "distro (==1.4.0)",
      "fastavro (==1.3.2)",
      "html5lib (==1.0.1)",
      "idna (==2.8)",
      "ipaddr (==2.2.0)",
      "isort (==5.7.0)",
      "lazy-object-proxy (==1.4.3)",
      "lockfile (==0.12.2)",
      "mccabe (==0.6.1)",
      "msgpack (==0.6.2)",
      "packaging (==20.3)",
      "pep517 (==0.8.2)",
      "progress (==1.5)",
      "psycopg2-binary",
      "pycodestyle (==2.6.0)",
      "pylint (==2.6.0)",
      "pyparsing (==2.4.6)",
      "pytoml (==0.1.21)",
      "requests (==2.22.0)",
      "retrying (==1.3.3)",
      "six (==1.14.0)",
      "toml (==0.10.2)",
      "urllib3 (==1.25.8)",
      "webencodings (==0.5.1)",
      "wrapt (==1.12.1)"
    ],
    "requires_python": "",
    "summary": "Medrical is a real-time medical biometric monitoring system, powered by Apache Kafka and postgreSQL.",
    "version": "0.1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9441988,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c64333c4b3597148e742b8648efbbb13817bb79a6ee16b4ae6d7aa159e613c8",
          "md5": "085974bdeb51f39f5a53a9328bb02c14",
          "sha256": "74ef35af035df04430110e9e500fdfc8a62d56d4de5139edec0fea9cc511967e"
        },
        "downloads": -1,
        "filename": "medrical-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "085974bdeb51f39f5a53a9328bb02c14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11144,
        "upload_time": "2021-02-16T16:49:27",
        "upload_time_iso_8601": "2021-02-16T16:49:27.022115Z",
        "url": "https://files.pythonhosted.org/packages/9c/64/333c4b3597148e742b8648efbbb13817bb79a6ee16b4ae6d7aa159e613c8/medrical-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa9ef64b7411f2ce8004a159e22db808369ecc91984c5e8b7c3cb9030d4d4a73",
          "md5": "8f7f99edcbf0d756164ea2df10bd0786",
          "sha256": "cc2f6f17f09d586e46dc9d9eb7835ea6db737e8d694fdb8e876f19b99ea39318"
        },
        "downloads": -1,
        "filename": "medrical-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f7f99edcbf0d756164ea2df10bd0786",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11208,
        "upload_time": "2021-02-16T16:49:28",
        "upload_time_iso_8601": "2021-02-16T16:49:28.665049Z",
        "url": "https://files.pythonhosted.org/packages/fa/9e/f64b7411f2ce8004a159e22db808369ecc91984c5e8b7c3cb9030d4d4a73/medrical-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e5999a8ab43887bc5b1c36acd706323b0d466ea4334da7d583e9fb994867929",
          "md5": "9cac47824c10a15d2bc22dca17a3f0ae",
          "sha256": "7db4285f426fdadf50573fe2781e9256ad6270380a1867c6c52699a080994bc5"
        },
        "downloads": -1,
        "filename": "medrical-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cac47824c10a15d2bc22dca17a3f0ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12064,
        "upload_time": "2021-02-17T05:36:06",
        "upload_time_iso_8601": "2021-02-17T05:36:06.706782Z",
        "url": "https://files.pythonhosted.org/packages/7e/59/99a8ab43887bc5b1c36acd706323b0d466ea4334da7d583e9fb994867929/medrical-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70556c93d3af8f12056f81868ec1788d5675efd2ca971f43496ce80c1d3ad53b",
          "md5": "48ae1250b5058fab0837e9c972cb5379",
          "sha256": "b1e4313fc1eb0a605e333c2106e8800c83aa4fa999ffe0d81a703b37020dca49"
        },
        "downloads": -1,
        "filename": "medrical-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "48ae1250b5058fab0837e9c972cb5379",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11699,
        "upload_time": "2021-02-17T05:36:08",
        "upload_time_iso_8601": "2021-02-17T05:36:08.467425Z",
        "url": "https://files.pythonhosted.org/packages/70/55/6c93d3af8f12056f81868ec1788d5675efd2ca971f43496ce80c1d3ad53b/medrical-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1866304a2a5942cc7c1efd2b338cc7d777100cf8de562753f50e6bdd0ec8fe2f",
          "md5": "14d384446cb20b7c6b1862fcf952e8a6",
          "sha256": "cb7b65fb5ddbd14c8b9d291096cffdf48cf477c874fa9c27f5af970bcf02960a"
        },
        "downloads": -1,
        "filename": "medrical-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14d384446cb20b7c6b1862fcf952e8a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13781,
        "upload_time": "2021-02-17T09:30:29",
        "upload_time_iso_8601": "2021-02-17T09:30:29.857617Z",
        "url": "https://files.pythonhosted.org/packages/18/66/304a2a5942cc7c1efd2b338cc7d777100cf8de562753f50e6bdd0ec8fe2f/medrical-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75c5abf703e2622d29f9c5b53a8f8377195a6f75d22a69a087fd1e085b618a52",
          "md5": "1daaa2fd73706a1f2cada7a6a035a78a",
          "sha256": "5e4af0d60a514dc0509dfed00366bd74ed00e4af16242bd07226471b94668acd"
        },
        "downloads": -1,
        "filename": "medrical-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "1daaa2fd73706a1f2cada7a6a035a78a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12451,
        "upload_time": "2021-02-17T09:34:32",
        "upload_time_iso_8601": "2021-02-17T09:34:32.605427Z",
        "url": "https://files.pythonhosted.org/packages/75/c5/abf703e2622d29f9c5b53a8f8377195a6f75d22a69a087fd1e085b618a52/medrical-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1866304a2a5942cc7c1efd2b338cc7d777100cf8de562753f50e6bdd0ec8fe2f",
        "md5": "14d384446cb20b7c6b1862fcf952e8a6",
        "sha256": "cb7b65fb5ddbd14c8b9d291096cffdf48cf477c874fa9c27f5af970bcf02960a"
      },
      "downloads": -1,
      "filename": "medrical-0.1.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14d384446cb20b7c6b1862fcf952e8a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13781,
      "upload_time": "2021-02-17T09:30:29",
      "upload_time_iso_8601": "2021-02-17T09:30:29.857617Z",
      "url": "https://files.pythonhosted.org/packages/18/66/304a2a5942cc7c1efd2b338cc7d777100cf8de562753f50e6bdd0ec8fe2f/medrical-0.1.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75c5abf703e2622d29f9c5b53a8f8377195a6f75d22a69a087fd1e085b618a52",
        "md5": "1daaa2fd73706a1f2cada7a6a035a78a",
        "sha256": "5e4af0d60a514dc0509dfed00366bd74ed00e4af16242bd07226471b94668acd"
      },
      "downloads": -1,
      "filename": "medrical-0.1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "1daaa2fd73706a1f2cada7a6a035a78a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12451,
      "upload_time": "2021-02-17T09:34:32",
      "upload_time_iso_8601": "2021-02-17T09:34:32.605427Z",
      "url": "https://files.pythonhosted.org/packages/75/c5/abf703e2622d29f9c5b53a8f8377195a6f75d22a69a087fd1e085b618a52/medrical-0.1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}