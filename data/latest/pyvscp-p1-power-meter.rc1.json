{
  "info": {
    "author": "Ake Hedman, Grodans Paradis AB",
    "author_email": "akhe@grodansparadis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# vscp-python-p1-power-meter\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n\n<img src=\"https://vscp.org/images/logo.png\" width=\"100\">\n\n\nThis project consist of a scripts to deliver data from a smart electrical meter with p1 interface. It has currently only been tested with Sagemcom T211\n\nIt will deliver VSCP events for\n\n* Used energy in/out (active and reactive),\n* Active and reactive effect (in/out).\n* Active and reactive effect for each phase (in/out).\n* Voltage for each phase.\n* Current for each phase.\n* Phasefactor for each phase.\n\nTypically the scripts is used in a [cron job](https://ostechnix.com/a-beginners-guide-to-cron-jobs/) to deliver the events on timed intervals or is run in and endless loop.\n\n\n## Install\n\n### Prerequisites\n\nThe code here is dependent on the [VSCP helper library](https://github.com/grodansparadis/vscp-helper-lib). Therefore you have to install this package first. It is available for Debian type systems including Raspberry Pi. Check and download the latest version [here](https://github.com/grodansparadis/vscp-helper-lib/releases)\n\nFor convenience this is how the current version is installed on a Raaspberry Pi\n\n```bash\nwget https://github.com/grodansparadis/vscp-helper-lib/releases/download/v14.0.2/libvscphelper14_14.0.2-1_armhf.deb\n\nwget https://github.com/grodansparadis/vscp-helper-lib/releases/download/v14.0.2/libvscphelper14-dev_14.0.2-1_armhf.deb\n\nsudo dpkg -i ./libvscphelper14_14.0.2-1_armhf.deb\nsudo dpkg -i ./libvscphelper14-dev_14.0.2-1_armhf.deb\n\n```\n\nNote that there may be [later versions available)(https://github.com/grodansparadis/vscp-helper-lib/releases) then the one downloaded above. You should **always** install the latest version.\n\n\n### Install the package\n\nThe scripts are available as a package **vscp-python-p1-power-meter** on [PyPi](https://pypi.org/project/vscp-python-p1-power-meter/). This means you can do an automatic install with pip that will handle all dependencies expect for the helper library mentioned above which must be install manually.\n\nThe installation process is easy\n\n```bash\npip3 install vscp-python-p1-power-meter\n```\n\nTo later upgrade to the latest version use\n\n```bash\npip3 install --upgrade vscp-python-p1-power-meter\n```\n\nIt is not required but recommended to install in a virtual environment To install in a virtual environment in your current project:\n\n```bash\nmkdir project-name && cd project-name\npython3 -m venv .env\nsource .env/bin/activate\n```\n\nthen do the install of **vscp-python-p1-power-meter** as of above.\n\nAfter install you can use **mqtt-p1-power-meter.py** from the command line. Info on how to configure the scripts for your needs are below.\n\n### Manual Install\n\nFor some reason you may not want to use PyPi and want to download the scripts from the [github repository](https://github.com/grodansparadis/vscp-python-p1-power-meter). \n\nThe script depends on some other modules that you need to install before using it. It is recommended to install everything in a virtual environment.\n\nAs mentioned above you need to install the VSCP helper library before installing this module.\n\nIt is recommended to install in a virtual environment in your current project:\n\n```bash\ngit clone https://github.com/grodansparadis/vscp-python-p1-power-meter.git\ncd vscp-python-p1-power-meter\npython3 -m venv .env\nsource .env/bin/activate\n```\n\nYou may need to install Python venv with \n\n```bash\napt install python3-venv\n```\nif it's not installed.\n\n#### Configparser\n\nConfigparser can be found on [PyPi](https://pypi.org/) and is documented [https://docs.python.org/3/library/configparser.html](here). Install with\n\n```bash\npip3 install configparser\n```\n\n#### Install VSCP modules\n\n**pyvscphelper** is not needed if only MQTT should be used. You can install the modules from [PyPi](https://pypi.org/)\n\n```bash\npip3 install pyvscp\npip3 install pyvscphelper\n```\n\nIf you need them on more places either go for a global install or use a virtual environment and install all the modules in it.\n\n#### Install MQTT module\n\nFor MQTT functionality Paho MQTT module is needed. You can install the modules from PyPi\n\n```bash\npip3 install paho-mqtt\n```\n\n## Configure\n\nYou setup the code by either editing the scripts or create a configuration file with the settings. In the scripts all relevant values can be found in the beginning of the file along with documentation.\n\nThe settings are named the same in the config file as in the script itself so the documentation for the configuration file is valid also for directly adding the scripts.\n\nTo get help you can issue\n\n```bash\nmqtt-p1-power-meter.py --help\n```\n\non the command line after the module is installed.\n\nThe recommended way to configure the scripts is to use a configuration file and store this file in a safe location as it contains usernames and password and in that way can protect this sensitive information. The syntax to instruct the script to read a configuration file is\n\n```bash\nmqtt-p1-power-meter.py --configure path-to-config-file\n```\n\nSo \n\n```bash\nmqtt-p1-power-meter.py --configure ./config.ini\n```\n\nwill read the configuration from _./config.ini_\n\n## Sample configuration file\n\nIf you install in a virtual environment as recommended above you will find a sample configuration file in \n\n>_.env/p1-power-meter-samp\n\nFor a standard install you find it in\n\n>_.local/p1-power-meter-samp\n\nand for a global install you can get the path by issuing\n\n```bash\npip3 -V\n```\n\n## Command line switches\n\n### -h --help\nDisplay information on how to use the script.\n\n### -c --config\nPath to configuration file. **Default:** ./config.ini\n\n### -v --verbose\nEnable verbose output. **Default:** false\n\n### -d --debug\nEnable debug mode. **Default:** false\n\n### -s --oneshot\nEnable one-shot. Normally the script runs in an endless loop. With one shot enabled only one loop will be performed. Suitable when the script is used as a cron script. **Default:** false\n\n## config file content\n\n### The GENERAL section\n\n#### one_shot\nSet to true to enable one shot mode. Normally the script runs in an endless loop. With one shot enabled only one loop will be performed. Suitable when the script is used as a cron script. **Default:** false\n\n#### no_vscp\nIf you hate VSCP this is the switch for you. the note string for each value becomes the MQTT topic and the value will be published under this topic. Not a trace from VSCP is any longer visible t the outside world. **Default:** false\n\n#### send_energy\nSend the energy readings. Four values for the meter readings are sent. In/out and both active and reactive energy. **Default:** true\n\n#### send_active_effect = true \nSend the active effect readings. A total of six readings are reported. In/out for each phase(L1,L2,L3). **Default:** true\n\n#### send_reactive_effect = true\nSend the reactive effect readings. A total of six readings are reported. In/out for each phase(L1,L2,L3). **Default:** true\n\n#### send_voltage = true\nSend the voltage readings. \nOne reading for all phases (L1,L2,L3) is sent.\n**Default:** true\n\n#### send_current = true\nSend the current readings. \nOne reading for all phases (L1,L2,L3) is sent.\n**Default:** true \n\n### The [VSCP] section\n\n#### guid\n\nThe scripts use the MAC address of the machine they are run on to construct a GUID on the format\n\n> FF:FF:FF:FF:FF:FF:FF:FE:M5:M4:M3:M2:M1:M0:id1:id0\n\nwhere _M5:M4:M3:M2:M1:M0_ is the MAC address and _id1:id0_ sensor id. \n\nIf you don't want this you can supply your own GUID here. Note that the two lowest positions also now is used for id's so normally the GUID should have zeros in these positions.\n\n#### Sensor indexes\n\nNormally the GUID and the id for the measurement value is used to identify the sensor. Using the sensor index is an alternative\n\n| name | default index |\n| ---- | ------------- |\n| sensorindex_sum_active_energy_out | 1 |\n| sensorindex_sum_active_energy_in | 2 |\n| sensorindex_sum_reactive_energy_out | 3 |\n| sensorindex_sum_reactive_energy_in | 4 |\n| sensorindex_momentan_active_effect_out | 5 |\n| sensorindex_momentan_active_effect_in | 6 |\n| sensorindex_momentan_reactive_effect_out | 7 |\n| sensorindex_momentan_reactive_effect_in | 8 |\n| sensorindex_momentan_active_effect_l1_out | 9 |\n| sensorindex_momentan_active_effect_l1_in | 10 |\n| sensorindex_momentan_active_effect_l2_out | 11 |\n| sensorindex_momentan_active_effect_l2_in | 12 |\n| sensorindex_momentan_active_effect_l3_out | 13 |\n| sensorindex_momentan_active_effect_l3_in | 14 |\n| sensorindex_momentan_reactive_effect_l1_out | 15 |\n| sensorindex_momentan_reactive_effect_l1_in | 16 |\n| sensorindex_momentan_reactive_effect_l2_out | 17 |\n| sensorindex_momentan_reactive_effect_l2_in | 18 |\n| sensorindex_momentan_reactive_effect_l3_out | 19 |\n| sensorindex_momentan_reactive_effect_l3_in | 20 |\n| sensorindex_voltage_l1 | 21 |\n| sensorindex_voltage_l2 | 22 |\n| sensorindex_voltage_l3 | 23 |\n| sensorindex_current_l1 | 24 |\n| sensorindex_current_l2 | 25 |\n| sensorindex_current_l3 | 26 |\n\n#### zone\n\nSet the zone to a value between 0-255 if you need it. Default is zero.\n\n#### subzone\n\nSet the subzone to a value between 0-255 if you need it. Default is zero.\n\n#### Sensor id's\n\nSet id to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value.\n\n| name | default id |\n| ---- | ---------- |\n| id_sum_active_energy_out | 1 |\n| id_sum_active_energy_in | 2 |\n| id_sum_reactive_energy_out | 3 |\n| id_sum_reactive_energy_in | 4 |\n| id_momentan_active_effect_out | 5 |\n| id_momentan_active_effect_in | 6 |\n| id_momentan_reactive_effect_out | 7 |\n| id_momentan_reactive_effect_in | 8 |\n| id_momentan_active_effect_l1_out | 9 |\n| id_momentan_active_effect_l1_in | 10 |\n| id_momentan_active_effect_l2_out | 11 |\n| id_momentan_active_effect_l2_in | 12 |\n| id_momentan_active_effect_l3_out | 13 |\n| id_momentan_active_effect_l3_in | 14 |\n| id_momentan_reactive_effect_l1_out | 15 |\n| id_momentan_reactive_effect_l1_in | 16 |\n| id_momentan_reactive_effect_l2_out | 17 |\n| id_momentan_reactive_effect_l2_in | 18 |\n| id_momentan_reactive_effect_l3_out | 19 |\n| id_momentan_reactive_effect_l3_in | 20 |\n| id_voltage_l1 | 21 |\n| id_voltage_l2 | 22 |\n| id_voltage_l3 | 23 |\n| id_current_l1 | 24 |\n| id_current_l2 | 25 |\n| id_current_l3 | 26 |\n\n\n### The [MQTT] section\n\n### host\n\nThe address for the MQTT broker which will get reported values.\n\n### port\n\nPort on the MQTT broker.\n\n### user\n\nUsername used to login to MQTT broker.\n\n### password\n\nPassword used to login to MQTT broker.\n\n### topic\n\nThis is the topic under which the VSCP events will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\n- _{xguid}_ will be replaced with the GUID of the event.\n- _{xclass}_ will be replaced with the VSCP class of the event.\n- _{xtype}_ will be replaced with the VSCP type of the event.\n\n### notes\n| name | default |\n| ---- | ------- |\n| note_sum_active_energy_out | Meter reading active energy out |\n| note_sum_active_energy_in | Meter reading active energy in |\n| note_sum_reactive_energy_out | Meter reading reactive energy out |\n| note_sum_reactive_energy_in | Meter reading reactive energy in |\n| note_momentan_active_effect_out | Active effect out |\n| note_momentan_active_effect_in | Active effect in |\n| note_momentan_reactive_effect_out | Reactive effect out |\n| note_momentan_reactive_effect_in | Reactive effect in |\n| note_momentan_active_effect_l1_out | Active effect L1 out |\n| note_momentan_active_effect_l1_in | Active effect L1 in |\n| note_momentan_active_effect_l2_out | Active effect L2 out |\n| note_momentan_active_effect_l2_in | Active effect L2 in |\n| note_momentan_active_effect_l3_out | Active effect L3 out |\n| note_momentan_active_effect_l3_in | Active effect L3 in |\n| note_momentan_reactive_effect_l1_out | Reactive effect L1 out |\n| note_momentan_reactive_effect_l1_in | Reactive effect L1 in |\n| note_momentan_reactive_effect_l2_out | Reactive effect L2 out |\n| note_momentan_reactive_effect_l2_in | Reactive effect L2 in |\n| note_momentan_reactive_effect_l3_out | Reactive effect L3 out |\n| note_momentan_reactive_effect_l3_in | Reactive effect L3 in |\n| note_voltage_l1 | Voltage L1 |\n| note_voltage_l2 | Voltage L2 |\n| note_voltage_l3 | Voltage L3 |\n| note_current_l1 | Current L1 |\n| note_current_l2 | Current L2 |\n| note_current_l3 | Current L3 |\n\n### Serial section\n\n#### serial_port\nThe serial port to use. **Default:** /dev/ttyUSB1\n\n#### serial_baudrate\nThe serial baudrate to use. **Default:** 115200\n\n#### serial_timeout\nThis is the timeout for reading a line of data. Should normally be greater than 10 which is the number of seconds the meter sends data. **Default:** 20  \n\n## using\n\nAfter you have installed the module and created a configuration file test the script with\n\n```bash\nmqtt-p1-power-meter.py -v -c path-to-config\n```\n\nthe MQTT broker you have defined should receive the events under the defined topics like this\n\n![](./images/mqttexplorer.png)\n\nand you will get some verbose info on the screen like this\n\n![](./images/verbose_output.png)\n\nnow you can add the script to cron to get measurement events sent to your broker on even intervals.\n\n## node-red and node.js\n\nwith the VSCP tools available for node.js and node-red you can easily graph and in other ways handel the published measurement data.\n\n- You find node.js tools [here](https://www.npmjs.com/search?q=node-vscp)\n- You find node-red tools [here](https://flows.nodered.org/search?term=node-red-contrib-vscp)\n\n\n## VSCP\n\nFor VSCP you find info at the [VSCP main site](https://www.vscp.org)\n\nVSCP docs are collected [here](https://docs.vscp.org/).\n\n\n\n----\n\nIf you are interested in learning more about VSCP the main site is [here](https://www.vscp.org)\n\nCopyright © 2000-2020 Ake Hedman, Grodans Paradis AB - MIT license.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grodansparadis/vscp-python-p1-power-meter",
    "keywords": "vscp iot m2m automation development mqtt p1 power",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyvscp-p1-power-meter",
    "package_url": "https://pypi.org/project/pyvscp-p1-power-meter/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyvscp-p1-power-meter/",
    "project_urls": {
      "Homepage": "https://github.com/grodansparadis/vscp-python-p1-power-meter"
    },
    "release_url": "https://pypi.org/project/pyvscp-p1-power-meter/0.0.1/",
    "requires_dist": [
      "pyvscp",
      "pyvscpclasses",
      "pyvscptypes",
      "pyvscphelper",
      "configparser",
      "pyserial",
      "paho-mqtt",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.0",
    "summary": "VSCP P1 power meter handler",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10140896,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbc2295e8b9866b1d70f3a3fc09aeb1ce0206440e7bbfa20bf89a4308e691f27",
          "md5": "b286e2358ecafbf5d78566313ed32060",
          "sha256": "3aaebcbc7bba06fc2bdaaa49aecd165ef59ff936a454cad98a88b27b6cc35f89"
        },
        "downloads": -1,
        "filename": "pyvscp_p1_power_meter-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b286e2358ecafbf5d78566313ed32060",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 15599,
        "upload_time": "2021-04-22T16:33:14",
        "upload_time_iso_8601": "2021-04-22T16:33:14.651279Z",
        "url": "https://files.pythonhosted.org/packages/fb/c2/295e8b9866b1d70f3a3fc09aeb1ce0206440e7bbfa20bf89a4308e691f27/pyvscp_p1_power_meter-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4be3078d2bd6d783c7376fdcc7433f055024673f3ca5229bf72477c0a17cfe03",
          "md5": "67b76689ed7ab9c421328ba66c56deb7",
          "sha256": "62135a0a79a746b61328254483612bb54580ce250857692c936d6a88d3317b01"
        },
        "downloads": -1,
        "filename": "pyvscp-p1-power-meter-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67b76689ed7ab9c421328ba66c56deb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 20452,
        "upload_time": "2021-04-22T16:33:16",
        "upload_time_iso_8601": "2021-04-22T16:33:16.042024Z",
        "url": "https://files.pythonhosted.org/packages/4b/e3/078d2bd6d783c7376fdcc7433f055024673f3ca5229bf72477c0a17cfe03/pyvscp-p1-power-meter-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbc2295e8b9866b1d70f3a3fc09aeb1ce0206440e7bbfa20bf89a4308e691f27",
        "md5": "b286e2358ecafbf5d78566313ed32060",
        "sha256": "3aaebcbc7bba06fc2bdaaa49aecd165ef59ff936a454cad98a88b27b6cc35f89"
      },
      "downloads": -1,
      "filename": "pyvscp_p1_power_meter-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b286e2358ecafbf5d78566313ed32060",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.0",
      "size": 15599,
      "upload_time": "2021-04-22T16:33:14",
      "upload_time_iso_8601": "2021-04-22T16:33:14.651279Z",
      "url": "https://files.pythonhosted.org/packages/fb/c2/295e8b9866b1d70f3a3fc09aeb1ce0206440e7bbfa20bf89a4308e691f27/pyvscp_p1_power_meter-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4be3078d2bd6d783c7376fdcc7433f055024673f3ca5229bf72477c0a17cfe03",
        "md5": "67b76689ed7ab9c421328ba66c56deb7",
        "sha256": "62135a0a79a746b61328254483612bb54580ce250857692c936d6a88d3317b01"
      },
      "downloads": -1,
      "filename": "pyvscp-p1-power-meter-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "67b76689ed7ab9c421328ba66c56deb7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 20452,
      "upload_time": "2021-04-22T16:33:16",
      "upload_time_iso_8601": "2021-04-22T16:33:16.042024Z",
      "url": "https://files.pythonhosted.org/packages/4b/e3/078d2bd6d783c7376fdcc7433f055024673f3ca5229bf72477c0a17cfe03/pyvscp-p1-power-meter-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}