{
  "info": {
    "author": "artificial-scientist-lab",
    "author_email": "cruizgo@proton.me, soeren.arlt@mpl.mpg.de, mario.krenn@mpl.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyTheus\n**PyTheus, a highly-efficient discovery framework for quantum optics experiments**\n\n[**Digital Discovery of 100 diverse Quantum Experiments with PyTheus**](https://arxiv.org/abs/2210.09980) \\\n*Carlos Ruiz-Gonzalez, Sören Arlt, Jan Petermann, Sharareh Sayyad, Tareq Jaouni, Ebrahim Karimi, Nora Tischler, Xuemei Gu, Mario Krenn*\n\n[**Digital Discovery of a Scientific Concept at the Core of Experimental Quantum Optics**](https://arxiv.org/abs/2210.09981) \\\n*Sören Arlt, Carlos Ruiz-Gonzalez, Mario Krenn*\n\n## Installation\n\nThe package can be installed with\n\n```\npip install pytheusQ\n```\nNOTE: do not use `pip install pytheus` (it will install a different package)\n\n## Running PyTheus\n\nTo run one of the included examples, type e.g.\n\n```\npytheus run --example ghz_346\n```\n\nOutput of optimization is saved to a directory called `output`.\n\nTo list all examples, type\n\n```\npytheus list\n```\n\nYou can also run config json files by referring to them by their path.\n\n```\npytheus run PATH_TO_YOUR_INPUT_FILE\n```\nNames of the subdirectories in output are specified by the name and content of the config file.\n\n## Analysing PyTheus results\n\nTo plot the graph corresponding to one result saved as a json file, execute \n\n```\npytheus plot PATH_TO_RESULT_FILE\n```\n\nTo get help, add the `--help` option to any command. For instance\n\n```\n> pytheus run --help\n\nUsage: pytheus run [OPTIONS] FILENAME\n\n  Run an input file.\n\nOptions:\n  --example  Load input file from examples directory.\n  --help     Show this message and exit.\n```\n\n# Discovery for Diverse Experimental Resources\n\nOur package allows for the discovery of quantum experiments for a range of experimental goals, constraints and\nresources. Experiments that can be produced include:\n\n* state creation (heralded or post-selected)\n* quantum gates (heralded or post-selected)\n* measurements of quantum states\n* entanglement swapping\n* (covered elsewhere: mixed state creation)\n\nSources for photons in these experiments can be SPDC sources, deterministic single-photon sources or a mix of the two.\n\nDetectors can be photon-number-resolving or not.\n\nEach of these experiments can be described with a graph. The interpretation of nodes and edges varies with the kind of\nexperiment.\n\n### Rules for Loss Functions\n\nWith these varying interpretations (e.g. for single photon sources, input photons, entanglement swapping), different\nconstraints apply on what kind of graph can correspond to an experiment (Topological Rules).\n\nWith the different ways of performing the experiments (heralded/post-selected & number-resolving/non-number-resolving),\ndifferent events are selected out of all possibilities (post-selection rules).\n\n#### Topological Rules\n\nAll experiments that our package is applied to can be described by a graph. When describing state creation using SPDC\neach edge can be interpreted as a pair-creation. In this case all edges of the complete graph can be considered\nphysically legitimate. When describing other experiments edges can be interpreted differently. Not every edge will be\nphysically meaningful. Consequentially there are constraints on which connections of the complete graph are used in the\noptimization.\n\n*(A) Single Photon Sources and Input Photons*\n\nDeterministic single photon sources and input photons (such as in gates) are described as (input) vertices in a graph.\nAn edge connecting an input vertex to a detector describes a path in which a photon can travel from the input into the\ndetector. This interpretation stems from the [Klyshko picture](https://arxiv.org/pdf/1805.06484.pdf). From this a\nconstraint on the graph follows. Two input vertices can not be connected by an edge. It could not be interpreted\nphysically.\n\n*(B) Entanglement Swapping and Teleportation*\n\nIn entanglement swapping, photons are entangled that have not interacted before. If we want to design an entanglement\nswapping experiment of two photons, the target is to discover a graph that produces an entangled state between the two\nphotons. However any edge between the corresponding vertices would translate into a common source crystal. A constraint\nthat ensures legitimate entanglement swapping is to remove any edge between the two parties\n\n#### Post-Selection Rules\n\nThe rules for post-selecting coincidence events have been described in the\n[Theseus paper](https://journals.aps.org/prx/abstract/10.1103/PhysRevX.11.031044). Here, post-selection projects the\nspace of possibilities containing arbitrary combinations of crystals firing into the space of possibilities where only\ncrystals fire for which all detectors at the end of the experiment click. In the graph picture these combinations\ncorrespond to the perfect matchings. A state is produced with fidelity one in post-selection if all possibilities of\ncoincidence events contribute to that state.\n\nOther experimental settings (such as heralding) and additional experimental resources (such as number-resolving\ndetectors)\nperform a different kind of projection on the space of possibilities by selecting for different events. This different\nselection is reflected in the fidelity of the state. The products of the edge weights belonging to each possibility\ncontribute to the norm of the fidelity.\n\n*(A) Heralding*\n\nHeralding is a less strict form of selecting events. Instead of putting a detector in every path and selecting for\ncoincidence, only a subset of the paths are detected _heralding_ an output state in the unmeasured paths. This selection\nrule not only allows for possibilities where one photon is in every path (perfect matchings) but also for other\npossibilities (edge covers) as long as they cover the heralding detectors. This can lead to cross-terms that are not\npresent when post-selecting for coincidence in all paths. Consequentially it is more difficult to find a graph with\nfidelity one, also requiring more experimental resources.\n\n*(B) Single Photon Sources and Input Photons*\n\nWhen describing heralded experiments (above) one has to consider edge covers instead of perfect matchings in the graph\nfor possible events. These possibilities include one edge being included twice in an edge cover, corresponding to a\ncrystal firing twice in an experiment. For single photon sources and other deterministic input photons such\npossibilities do not exist. Only edge covers that cover the input vertices exactly once are considered for the norm of\nthe fidelity.\n\n*(C) Photon Number-Resolving Detectors*\n\nPhoton number-resolving detectors are a valuable resource that can restrict the space of possibilities more than a\nregular detector. When one can be certain that exactly one photon, and not two, has entered a detector it reduces the\nnumber of events that could have led to this outcome, eliminating cross terms.\n\n*(D) States in Fock Basis*\n\n...\n\n## Loss Functions For Target State Optimization\n\nAs explained above, the loss function depend largely on the different experimental conditions. Independent of these\nconditions they fall into two categories.\n\n* Fidelity\n* Count Rate\n\nA Fidelity of one ensures that an experiment has no unwanted cross terms. Every possibility that is selected for\ncontributes directly to the target outcome.\n\nHowever, we have come to find that optimizing exclusively for fidelity in some cases can lead the optimization to scale\ndown the weights of the entire graph to minimize the contributions of crossterms. While the fidelity will be very close\nto one in those cases the generally low edge weights would lead to very low count rates of successful events in actual\nexperiments.\n\nTo find solutions with higher weights we have introduced the _simplified count rate_ as a loss function.\n\n# Config Examples\n\nThis section gives examples for config files showcasing the features for different kinds of experiments that can\nsearched for.\n\n## Target State Optimization\n\nThis is used when the in- and out-going states can be clearly defined by a state functions. For those, the loss\nfunctions `cr` and `fid` are used.\n\nBelow are some examples to give an idea of the scope.\n\nFor further details, refer to the definition of the function `setup_for_target` in `main.py`.\n\n### Post-selected State creation\n\nHere is an example for a config file optimizing for a graph that creates a three particle four-dimensional GHZ state.\n\n```json\n{\n  \"description\": \"Finding a setup for the creation of the three-particle four-dimensional GHZ state. It can be realized with three ancillary particles\",\n  \"foldername\": \"ghz_346\",\n  \"target_state\": [\n    \"000\",\n    \"111\",\n    \"222\",\n    \"333\"\n  ],\n  \"num_anc\": 3,\n  \"loss_func\": \"cr\",\n  \"thresholds\": [\n    0.25,\n    0.1\n  ],\n  \"samples\": 10,\n  \"optimizer\": \"L-BFGS-B\",\n  \"ftol\": 1e-06,\n  \"edges_tried\": 20,\n  \"tries_per_edge\": 5\n}\n\n```\n\nGeneral info is given by `description`. With `foldername` one can give a custom name for the subfolder where solutions\nare saved.\n\nIn the simple case of post-selected state creation with SPDC crystals, `target_state`, `num_anc` and `loss_func` are all\nthat are needed to define the objective of the optimization.\n\n`thresholds` is necessary to decide whether a topological optimization step has been successful. In this case,\nwhen `1-countrate < 0.25` and `1-fidelity < 0.1`.\n\n### Post-Selected Quantum Gates\n\nFor an example how topological constraints on the starting graph of the optimization are dealt with, consider the\nexample of a post-selected CNOT(2,3) quantum gate.\n\n```json\n{\n  \"description\": \"Postselected CNOT between a qubit (control) and a qutrit (target). Two ancillary photons from SPDC.\",\n  \"foldername\": \"cnot_23\",\n  \"target_state\": [\n    \"0000\",\n    \"0101\",\n    \"0202\",\n    \"1011\",\n    \"1112\",\n    \"1210\"\n  ],\n  \"in_nodes\": [\n    0,\n    1\n  ],\n  \"out_nodes\": [\n    2,\n    3\n  ],\n  \"num_anc\": 2,\n  \"loss_func\": \"cr\",\n  \"thresholds\": [\n    0.3,\n    0.1\n  ],\n  \"samples\": 10,\n  \"optimizer\": \"L-BFGS-B\",\n  \"ftol\": 1e-06,\n  \"edges_tried\": 30,\n  \"tries_per_edge\": 5\n}\n```\n\nHere, `target_state` defines a logic table. It is defined through `in_nodes` and `out_nodes`, which entries belong to\nincoming photons and which belong to outgoing photons. These definitions suffice to automatically put constraints on the\nstarting graph.\n\n### Heralded Quantum Gates with Single Photon Sources\n\nTwo additional features are heralding and single photon sources. A simple example is a CNOT gate between two qubits\nheralding on two ancillary detectors.\n\n```json\n{\n  \"description\": \"Heralded CNOT gate between two qubits with two single photon sources. Similar has been done: https://journals.aps.org/prl/pdf/10.1103/PhysRevLett.126.140501 could this have a better success probability?\",\n  \"foldername\": \"cnot22sp\",\n  \"target_state\": [\n    \"0000\",\n    \"0101\",\n    \"1011\",\n    \"1110\"\n  ],\n  \"num_anc\": 2,\n  \"in_nodes\": [\n    0,\n    1\n  ],\n  \"out_nodes\": [\n    2,\n    3\n  ],\n  \"single_emitters\": [\n    4,\n    5\n  ],\n  \"heralding_out\": true,\n  \"loss_func\": \"cr\",\n  \"thresholds\": [\n    1,\n    0.1\n  ],\n  \"samples\": 10,\n  \"optimizer\": \"L-BFGS-B\",\n  \"ftol\": 1e-06,\n  \"edges_tried\": 30,\n  \"tries_per_edge\": 5\n}\n```\n\nHere, the two single photon sources given by `single_emitters` introduce further topological constraints on the starting\ngraph. As they have the role of ancillary photons in this case, we need to set `num_anc` accordingly. The graph\ncorresponding to this optimization will have a total of eight nodes. Two for incoming, two for outgoing, two for single\nphoton sources and two for ancillary detectors.\n\nIf `num_anc` is larger than the sum of lengths of `in_nodes` and `single_emitters`, the necessary amount of particles is\ncreated through SPDC.\n\nAdditionaly `heralding_out` is set to `true` here. The photons corresponding to `out_nodes` will not be detected.\n\n### Measurement\n\n```json\n{\n  \"description\": \"Measurement for three particle W state\",\n  \"foldername\": \"W_measurement\",\n  \"target_state\": [\n    \"001\",\n    \"010\",\n    \"100\"\n  ],\n  \"in_nodes\": [\n    0,\n    1,\n    2\n  ],\n  \"num_anc\": 0,\n  \"loss_func\": \"cr\",\n  \"samples\": 10,\n  \"optimizer\": \"L-BFGS-B\",\n  \"ftol\": 1e-06,\n  \"thresholds\": [\n    0.3,\n    0.1\n  ],\n  \"tries_per_edge\": 5,\n  \"edges_tried\": 30\n}\n\n```\n\n## Entanglement Optimization\n\nWhen `loss_func` is set to `\"ent\"`, no target state is set. Instead the optimizer maximizes the entanglement that can be\nachieved by a graph with the local dimensions given by `dim`.\n\n```json\n{\n  \"description\": \"Maximizing entanglement in k=2 bi-partitions for four qubits.\",\n  \"K\": 2,\n  \"dim\": 2222,\n  \"ftol\": 1e-07,\n  \"loss_func\": \"ent\",\n  \"min_edge\": 4,\n  \"num_pre\": 5,\n  \"optimizer\": \"SLSQP\",\n  \"imaginary\": false,\n  \"samples\": 10,\n  \"thresholds\": [\n    0.000001\n  ],\n  \"tries_per_edge\": 3,\n  \"var_factor\": 0\n}\n```\n\n## Optimizing for Arbitrary Functions of the Graph\n\nThere is also the option to define an arbitrary loss function, which should be defined or imported in `lossfunctions.py`\n.\n\nHere is an example for optimizing the assembly index of the graph.\n\n```json\n{\n  \"foldername\": \"assembly\",\n  \"loss_func\": \"lff\",\n  \"lff_name\": \"top_n_assembly\",\n  \"dimensions\": [\n    2,\n    2,\n    2,\n    2\n  ],\n  \"num_vertices\": 4,\n  \"num_cols\": 2,\n  \"size_of_graph\": 8,\n  \"optimizer\": \"L-BFGS-B\",\n  \"ftol\": 1e-06,\n  \"samples\": 1,\n  \"thresholds\": [\n    99999\n  ],\n  \"topopt\": false,\n  \"edges_tried\": 30,\n  \"tries_per_edge\": 5,\n  \"unicolor\": false,\n  \"imaginary\": false,\n  \"num_pre\": 1,\n  \"save_history\": true\n}\n```\n\nTo use a custom defined loss function `loss_func` should be set to `\"lff\"` (loss from function).\n\nThe name of the loss function is given as a string to `lff_name`. This function should be defined or imported\nin `lossfunctions.py`. It should take a `Graph` object and a `cnfg` dictionary as arguments and return a real number.\n\n\n# Development\n\n### Clone repository\n\n```\ngit clone https://github.com/artificial-scientist-lab/PyTheus.git\n```\n\n### Create virtual environment\n\nFrom the project root directory, submit\n\n```\npython -m venv venv\n```\n\nThis will create a subfolder with your virtual environment.\n\nTo activate, type\n\n```\n. venv/bin/activate\n```\n\nNote the leading point!\n\n### Local development installation\n\nSubmit\n\n```\npython setup.py develop\n```\n\nfrom the project root directory (where `setup.py` is located).\nAny changes in the code will now automatically be reflected\nin your local package installation.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artificial-scientist-lab/Pytheus",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytheusQ",
    "package_url": "https://pypi.org/project/pytheusQ/",
    "platform": "ALL",
    "project_url": "https://pypi.org/project/pytheusQ/",
    "project_urls": {
      "Homepage": "https://github.com/artificial-scientist-lab/Pytheus"
    },
    "release_url": "https://pypi.org/project/pytheusQ/1.2.6/",
    "requires_dist": [
      "sphinx",
      "numpy",
      "scipy",
      "matplotlib",
      "termcolor",
      "Click"
    ],
    "requires_python": ">=3.8",
    "summary": "PyTheus, a highly-efficient inverse-design algorithm for quantum optical experiments",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15474763,
  "releases": {
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58430fbdb2a916983c80bf451d33659191bbee2988a2b9da5da686299fd6c28b",
          "md5": "68ed45baca0a68a8ffd96941bd769ad2",
          "sha256": "c70388b0ea59e770a6e75010c4ea6e4fcbf1d5986d14fc4f94db5fb543631ef1"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68ed45baca0a68a8ffd96941bd769ad2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6197503,
        "upload_time": "2022-10-18T18:34:08",
        "upload_time_iso_8601": "2022-10-18T18:34:08.990115Z",
        "url": "https://files.pythonhosted.org/packages/58/43/0fbdb2a916983c80bf451d33659191bbee2988a2b9da5da686299fd6c28b/pytheusQ-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8db95cbaab81cfac162a14646db3252f1467609116ba333cbd457fb6c5ef8c3",
          "md5": "bc9e72a7fd47065e11563eb7c20bd608",
          "sha256": "484c9a63c5d61a1baa55893dd455fe5380b2d15462f39068c8d94fc058173755"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bc9e72a7fd47065e11563eb7c20bd608",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5725139,
        "upload_time": "2022-10-18T18:34:12",
        "upload_time_iso_8601": "2022-10-18T18:34:12.084566Z",
        "url": "https://files.pythonhosted.org/packages/f8/db/95cbaab81cfac162a14646db3252f1467609116ba333cbd457fb6c5ef8c3/pytheusQ-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a18e389a4865910e066abe52fc69f3aa0089995fc05f55a2cd0f72a89b7553",
          "md5": "ebef9946783791fe60b01c17793dc73f",
          "sha256": "ebc3343c3916f6cb3fbb1be68f0c3255b29f549942f38de1d6ec0a31f99d97a9"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebef9946783791fe60b01c17793dc73f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6197601,
        "upload_time": "2022-10-19T06:49:40",
        "upload_time_iso_8601": "2022-10-19T06:49:40.940146Z",
        "url": "https://files.pythonhosted.org/packages/e0/a1/8e389a4865910e066abe52fc69f3aa0089995fc05f55a2cd0f72a89b7553/pytheusQ-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f7df499c796cf3944ad1ffa2d01a918849b7feb737029195e71fca56ea2a25",
          "md5": "ab20b1edf7cb847ab93921a302aded6c",
          "sha256": "ae226fbc4490e7d92f255a669fdbbe2b8ba8b73ab5cd206f0f29e9aabeeacbd9"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ab20b1edf7cb847ab93921a302aded6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5725405,
        "upload_time": "2022-10-19T06:49:43",
        "upload_time_iso_8601": "2022-10-19T06:49:43.180879Z",
        "url": "https://files.pythonhosted.org/packages/80/f7/df499c796cf3944ad1ffa2d01a918849b7feb737029195e71fca56ea2a25/pytheusQ-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7443e32f6796852be85ad05df7c05584cf4f68b137447456dd2767647521b81d",
          "md5": "a9235b9f0770cc9dc8c6eb8a4e536bcf",
          "sha256": "69c671befb2dec5c6175a8a69f3e4f52ef6592d8c26140471ec8e6bfc1768a2f"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9235b9f0770cc9dc8c6eb8a4e536bcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6197578,
        "upload_time": "2022-10-19T08:34:20",
        "upload_time_iso_8601": "2022-10-19T08:34:20.752552Z",
        "url": "https://files.pythonhosted.org/packages/74/43/e32f6796852be85ad05df7c05584cf4f68b137447456dd2767647521b81d/pytheusQ-1.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad5fa6a83c96843c37c4f6c8e72bee48143135138ad349f72218ecf45a81da49",
          "md5": "ee2e265f5e300d05912669924c1c6667",
          "sha256": "4c76cdaccda449effaf89856988640ac9d3f0ede8336ee27ee62463b522cf88b"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ee2e265f5e300d05912669924c1c6667",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5725285,
        "upload_time": "2022-10-19T08:34:23",
        "upload_time_iso_8601": "2022-10-19T08:34:23.246613Z",
        "url": "https://files.pythonhosted.org/packages/ad/5f/a6a83c96843c37c4f6c8e72bee48143135138ad349f72218ecf45a81da49/pytheusQ-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09ab949707d4f73dd52f56f0b2f8c86c5afcd0c1b89a825ed8a511260c2055e",
          "md5": "9b84bd031aaa7de025320a58841629a3",
          "sha256": "31dab24808d4972d6f63920870e16965b295fab1c6a6635251b31ff44bcce759"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b84bd031aaa7de025320a58841629a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6197758,
        "upload_time": "2022-10-20T14:50:53",
        "upload_time_iso_8601": "2022-10-20T14:50:53.050099Z",
        "url": "https://files.pythonhosted.org/packages/e0/9a/b949707d4f73dd52f56f0b2f8c86c5afcd0c1b89a825ed8a511260c2055e/pytheusQ-1.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "504b2ded0e970d3e60b5cae6ef3e70665150dd69e0dc4fc362cf42a877db7176",
          "md5": "d74acd84f63f82e385ef464f0f57a10c",
          "sha256": "cc6067185f11045074d37e19f3a741e1f2d8d2aa3bb82e8090bbf78110ca8176"
        },
        "downloads": -1,
        "filename": "pytheusQ-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d74acd84f63f82e385ef464f0f57a10c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5725570,
        "upload_time": "2022-10-20T14:50:57",
        "upload_time_iso_8601": "2022-10-20T14:50:57.016669Z",
        "url": "https://files.pythonhosted.org/packages/50/4b/2ded0e970d3e60b5cae6ef3e70665150dd69e0dc4fc362cf42a877db7176/pytheusQ-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e09ab949707d4f73dd52f56f0b2f8c86c5afcd0c1b89a825ed8a511260c2055e",
        "md5": "9b84bd031aaa7de025320a58841629a3",
        "sha256": "31dab24808d4972d6f63920870e16965b295fab1c6a6635251b31ff44bcce759"
      },
      "downloads": -1,
      "filename": "pytheusQ-1.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b84bd031aaa7de025320a58841629a3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6197758,
      "upload_time": "2022-10-20T14:50:53",
      "upload_time_iso_8601": "2022-10-20T14:50:53.050099Z",
      "url": "https://files.pythonhosted.org/packages/e0/9a/b949707d4f73dd52f56f0b2f8c86c5afcd0c1b89a825ed8a511260c2055e/pytheusQ-1.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "504b2ded0e970d3e60b5cae6ef3e70665150dd69e0dc4fc362cf42a877db7176",
        "md5": "d74acd84f63f82e385ef464f0f57a10c",
        "sha256": "cc6067185f11045074d37e19f3a741e1f2d8d2aa3bb82e8090bbf78110ca8176"
      },
      "downloads": -1,
      "filename": "pytheusQ-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d74acd84f63f82e385ef464f0f57a10c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5725570,
      "upload_time": "2022-10-20T14:50:57",
      "upload_time_iso_8601": "2022-10-20T14:50:57.016669Z",
      "url": "https://files.pythonhosted.org/packages/50/4b/2ded0e970d3e60b5cae6ef3e70665150dd69e0dc4fc362cf42a877db7176/pytheusQ-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}