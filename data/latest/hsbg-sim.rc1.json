{
  "info": {
    "author": "Shon Verch",
    "author_email": "verchshon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Hearthstone Battlegrounds Battle Simulator\n-----------------------------------------\n\nA simulator for battles in the HS battlegrounds.\nThis program can quickly run over a battle many times, and give statistics on the results\n\nExample output:\n\n    Turn 8\n    * 4/6 Cave Hydra\n    * 8/2 Kaboom Bot\n    * 10/4 Kaboom Bot\n    * 11/6 Nightmare Amalgam\n    * 2/2 Lightfang Enforcer\n    * 4/6 Imp Gang Boss\n    VS\n    * 2/2 Kaboom Bot\n    * 2/2 Kaboom Bot\n    * 6/3 Cobalt Guardian, divine shield\n    * 2/6 Security Rover\n    * 4/2 Micro Machine\n    * 1/5 Junkbot\n    * 5/6 Psych-o-Tron, taunt, divine shield\n    --------------------------------\n    win: 2%, tie: 3%, lose: 94%\n    mean score: -6.573, median score: -7\n    percentiles: -14 -11 -9 -8 -8 -7 -6 -5 -4 -3 12\n    actual outcome: -9, is at the 20-th percentile\n\nThis corresponds to the following board state:\n![Example game](github_resources/run1-turn8.png)  \ntaken from the game at https://www.youtube.com/watch?v=TV0HSwbhasQ,\n\nThe score at the end is the number of stars of the remanining minions of the first player, or negative the stars of the second player.\nSo a positive score means the first player wins by that many stars, a negative score means that the first player loses.\nThis score corresponds to damage dealt or taken, excluding damage from the character's level.\nThe program reports mean and median of the scores, and the 0%, 10%, .., 100% percentiles\n\nUsage\n----\n\n    hsbg run.txt\n\nThe input file consists of a series of commands to define the board state, and looks very similar to the output shown above.\nSee [examples/run1.txt](examples/run1.txt).\n\nThe program can also be used in interactive mode, by starting it without any arguments. Type `help` to get a list of commands:\n\n    -- Defining the board\n    board      = begin defining player board\n    vs         = begin defining opposing board\n    * <minion> = give the next minion\n    HP <hero>  = tell that a hero power is used\n    level <n>  = give the level of a player\n    health <n> = give the health of a player\n\n    -- Modifying the board\n    give <m> <buff> = buff minion(s) m with one or more buffs\n\n    -- Running simulations\n    actual <i> = tell about actual outcome (used in simulation display)\n    run (<n>)  = run n simulations, report statistics (default: 1000)\n    optimize   = optimize the minion order to maximize some objective\n    objective  = set the optimization objective (default: minimize damage taken)\n\n    -- Stepping through a single battle\n    show       = show the board state\n    reset      = reset battle\n    step       = do 1 attack step, or start if battle not started yet\n    trace      = do steps until the battle ends\n    back       = step backward. can be used to re-roll RNG\n\n    -- Other\n    info <msg> = show a message\n    help       = show this help message\n    quit       = quit the simulator\n\n    -- Minion format\n    Minions are specified as\n      [attack/health] [golden] <name>, <buff>, <buff>, ..\n    for example\n     * 10/12 Nightmare Amalgam\n     * Golden Murloc Tidecaller, poisonous, divine shield, taunt, windfury, +12 attack\n\n    -- Minion buffs\n     * +<n> attack = buff attack by this much\n     * +<n> health = buff health by this much\n     * +<a>/+<h>   = buff attack and health\n     * taunt, divine shield, poisonous, windfury = the obvious\n     * microbots   = deathrattle: summon 3 1/1 Microbots\n     * golden microbots = deathrattle: summon 3 2/2 Microbots\n     * plants      = deathrattle: summon 2 1/1 Plants\n     * <minion>    = magnetize given minion\n\n    -- Refering to a minion\n    You can refer to a minion with an index (1 to 7), a name, a tribe, or all\n    For example\n      give all +1/+1\n      give 2 poisonous  # buffs the second minion\n      give Mech divine shield, windfury\n      give Cave Hydra +10 health\n    By default this refers to your side, to modify the enemy:\n      give enemy all taunt\n\nA better user interface is a work in progress.\n\nCompiling\n----\n\nTo compile the code you need a recent version of gcc, python and make.\nRun `make` in the root directory to build the executable.\n\nTo make the web version you need emscripten, run `make web` to build it.\n\nFAQ\n----\n\nQ: How do I put in a board state  \nA: Use a text file, see the examples directory.\nThe plan is to eventually make a parser for the Hearthstone log files.\n\nQ: What about Bob's tavern?  \nA: Currently only actual battles are simulated, the program doesn't know about buying, selling, leveling etc.\n\nQ: What can I do with this?  \nA: \n* You can see how lucky you are\n* You can learn to better position your minions (use the `optimize` command)\n* (future) you can see how well your board is expected to do at a certain turn of the game\n\nQ: Known bugs  \nA:\n* There might be subtle differences in the order of triggers etc.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/galacticglum/hearthstone-battlegrounds-simulator/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hsbg-sim",
    "package_url": "https://pypi.org/project/hsbg-sim/",
    "platform": "",
    "project_url": "https://pypi.org/project/hsbg-sim/",
    "project_urls": {
      "Homepage": "https://github.com/galacticglum/hearthstone-battlegrounds-simulator/"
    },
    "release_url": "https://pypi.org/project/hsbg-sim/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python interface for the Hearthstone Battlegrounds combat simulator.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10077061,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1324714a2804742bfcb07da9a533c679ea509c635f8e5a94e87337db62d2fdf",
          "md5": "e2e4f83013446f324a5dd14d7f4c8df4",
          "sha256": "0dfa4cd4ce7aad444d18318f8be1a4034163784698635c07851bcecc69227ed7"
        },
        "downloads": -1,
        "filename": "hsbg_sim-1.0.0-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e2e4f83013446f324a5dd14d7f4c8df4",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 55333,
        "upload_time": "2021-04-15T19:57:48",
        "upload_time_iso_8601": "2021-04-15T19:57:48.637108Z",
        "url": "https://files.pythonhosted.org/packages/f1/32/4714a2804742bfcb07da9a533c679ea509c635f8e5a94e87337db62d2fdf/hsbg_sim-1.0.0-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fb9a69ec1fcfa1a1d0b3ff534c4daa895d61df04d33c38bdcfd8d5163431040",
          "md5": "84e49f10b6094c4b8d66d273b40f8c58",
          "sha256": "0c6bf025bfe343eaaa3934cdd45d443ed19cf9de5b39a7ebe552be9689857f7a"
        },
        "downloads": -1,
        "filename": "hsbg_sim-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84e49f10b6094c4b8d66d273b40f8c58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26669,
        "upload_time": "2021-04-15T19:57:49",
        "upload_time_iso_8601": "2021-04-15T19:57:49.909867Z",
        "url": "https://files.pythonhosted.org/packages/2f/b9/a69ec1fcfa1a1d0b3ff534c4daa895d61df04d33c38bdcfd8d5163431040/hsbg_sim-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1324714a2804742bfcb07da9a533c679ea509c635f8e5a94e87337db62d2fdf",
        "md5": "e2e4f83013446f324a5dd14d7f4c8df4",
        "sha256": "0dfa4cd4ce7aad444d18318f8be1a4034163784698635c07851bcecc69227ed7"
      },
      "downloads": -1,
      "filename": "hsbg_sim-1.0.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "e2e4f83013446f324a5dd14d7f4c8df4",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 55333,
      "upload_time": "2021-04-15T19:57:48",
      "upload_time_iso_8601": "2021-04-15T19:57:48.637108Z",
      "url": "https://files.pythonhosted.org/packages/f1/32/4714a2804742bfcb07da9a533c679ea509c635f8e5a94e87337db62d2fdf/hsbg_sim-1.0.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fb9a69ec1fcfa1a1d0b3ff534c4daa895d61df04d33c38bdcfd8d5163431040",
        "md5": "84e49f10b6094c4b8d66d273b40f8c58",
        "sha256": "0c6bf025bfe343eaaa3934cdd45d443ed19cf9de5b39a7ebe552be9689857f7a"
      },
      "downloads": -1,
      "filename": "hsbg_sim-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84e49f10b6094c4b8d66d273b40f8c58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26669,
      "upload_time": "2021-04-15T19:57:49",
      "upload_time_iso_8601": "2021-04-15T19:57:49.909867Z",
      "url": "https://files.pythonhosted.org/packages/2f/b9/a69ec1fcfa1a1d0b3ff534c4daa895d61df04d33c38bdcfd8d5163431040/hsbg_sim-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}