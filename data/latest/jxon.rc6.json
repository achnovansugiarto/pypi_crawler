{
  "info": {
    "author": "Conor Stuart Roe",
    "author_email": "conorstuartroe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# JXON (JavaScript and XML Object Notation)\n\nJXON is a data interchange format which is *mostly* a superset of XML and *mostly* a superset of JSON. \nIt looks like JSON, but with a few key feature adds:\n\n* XML as a primitive type\n* comments\n* multiline strings\n* enforced schema consistency, and a schema language JXSD\n* variables and imports\n\nThis library provides an API to perform a number of JXON-related tasks:\n* parsing JXON into standard Python object types and dumping to strings and files, with an API analogous to the `json` standard library API\n* checking schema consistency of JXON\n* parsing JXSD (JXON Schema Definition) files and using them to enforce schemas\n* parsing the schema of JXON files, and exporting them as JXSD\n\nThe last bullet point includes a major utility of this library that doesn't involve\nJXON at all - it can be used to extract the schema from JSON files, as long as they\nuse a schema consistently.\n\n## XML as a primitive type\n\nIn JXON, XML can be written directly in a file as a primitive object type:\n\n```\n{\n  \"name\": \"Conor Stuart Roe\",\n  \"age\": 23,\n  \"blurb\": <div class=\"col-6 col-md-12\">\n    <h1>Hello, World!</h1>\n    <br/>\n    <p>This is part of valid JXON</p>\n  </div>\n}\n```\n\nI'm using the Python standard `xml` library to represent XML elements, \nbut I'd like to eventually add support for `lxml` and maybe other XML\nlibraries.\n\nJust as any valid JSON value, even a number or a string, is considered to constitute \nvalid JSON in itself, a single XML element (including any children) constitutes\nvalid JXON, so that many XML documents can be parsed as valid JXON! However,\nXML preambles are cannot be parsed by the JXON engine, which is why JXON is\nonly *mostly* a superset of XML.\n\n## Comments\n\nPretty straightforward. JXON and JXSD mark single-line comments with `//`, and multline comments with `/*`...`*/`.\n\n## Multiline strings\n\nJSON doesn't allow line breaks in the middle of a string, but JXON does. In general, whitespace before a line\nbreak is preserved, whitespace after a line break is ignored, and if there is no whitespace before a line break,\na single space is inserted.\n\n## Enforced schema consistency\n\nInformally, most JSON found in the wild follows a consistent schema, but JXON formalizes \nthat tendency, so the following is valid JSON but invalid JXON:\n\n```\n{\n  \"some_list\": [\n    3,\n    \"Hello\",\n    true\n  ]\n}\n```\n\nArrays are really the only data type in JSON that can break schema consistency\n(by having element of different types). The type of a JXON object is not simply \"Object\",\nbut is defined by its set of key->type mappings, so that the following is not valid JXON:\n\n```\n{\n  \"some_list\": [\n    {\n      \"name\": \"Conor Stuart Roe\",\n      \"age\": 23\n    },\n    {\n      \"name\": \"Orville Redenbacher\"\n    }\n  ]\n}\n```\n\nwhile the following is:\n\n```\n{\n  \"some_list\": [\n    {\n      \"name\": \"Conor Stuart Roe\",\n      \"age\": 23\n    },\n    {\n      \"name\": \"Orville Redenbacher\",\n      \"age\": 100\n    }\n  ]\n}\n```\n\n`null` is considered to match any type, so that the following is still valid JXON:\n\n```\n{\n  \"some_list\": [\n    {\n      \"name\": \"Conor Stuart Roe\",\n      \"age\": 23\n    },\n    {\n      \"name\": null,\n      \"age\": 100\n    }\n  ]\n}\n```\n\nIn practice, most JSON follows these rules anyway, and formalizing them allows us to \nmake stronger assumptions about JXON. However, some JSON out there does not follow these\nrules, which is why JXON is only *mostly* a superset of JSON.\n\nJXON schemas can be defined using a related format called JXSD (JXON Schema Definition).\nFor instance, the schema of the above object is, in JXSD format,\n\n``` \n{\n  \"some_list\": [{\n    \"name\": String,\n    \"age\": Integer\n  }]\n}\n```\n\nJXSD has five primitive types: `String`, `Integer`, `Float`, `Boolean`, and `XML`.\nAlthough array and object members determine JXON schema, XML children do not; all\nXML elements simply have `XML` type, so that the following is considered to have a\nconsistent JXON schema:\n\n``` \n[\n  {\n    \"some_xml\": <p>Hi there!</p>\n  },\n  {\n    \"some_xml\": <div>\n      <p>There is a lot of content here.</p>\n      <br/>\n      <p>More than the last one, anyway.</p>\n    </div>\n  }\n]\n```\n\nJXSD also allows for enumerated types, which must still be a set of all one type:\n\n```\n{\n  \"host\": String,\n  \"port\": Integer\n  \"path\": String,\n  \"method\": Enum(\"GET\", \"POST\", \"PUT\", \"DELETE\"),\n  \"data\": String\n}\n```\n\nCurrently, `Enum`s must be composed of primitives, but I'd like to implement enumerated array and\nobject types at some point.\n\n## Variables, imports, and exports\n\nJXON and JXSD don't have to simply consist of a single expression. They share a set of syntax for importing\nand exporting based on JavaScript, as well as the ability to set variables.\n\nA valid JXON or JXSD file contains the following sections in order, each of which is optional: \nimports, variables, default variable, and exports.\n\n### Imports\n\nThere are several ways to import information from other files, but to understand these one first has to\nbe familiar with the JavaScript concepts of exports and default exports. Every file may *export* any number\nof variables, which makes them available for import by other files. Variables exported in this way\nretain their name in all subsequent imports unless explicitly renamed at import. In addition to these\nnamed exports, every file may export one unnamed *default* variable, which had a different syntax for \nimports.\n\nJXON/JXSD retains almost all JavaScript syntax for importing:\n\n```\nimport test_schema, {School} from \"./test.jxsd\";\nimport * as names from \"./names.jxon\";\n```\n\nIn the above, `test_schema` is the name being given `test.jxsd`'s default export, and `School` is one of the named\nexports of `test.jxsd`. It is possible to import several named exports at once with the syntax\n`import {foo, bar, baz} from example.jxon;`, and I'd like to implement the capability to rename named\nexports with the syntax `import {foo as bar} from example.jxon`.\n\n`*` is used to import an entire file as a variable, so that its named exports can then be accessed, e.g.:\n\n```\nimport * as test from \"./test.jxsd\";\n\ntest.School\n```\n\nAnother way to import a whole file is with *inline imports*, which don't enable access to named exports, but \nsimply return a file's default export. For instance, `import(\"./test.jxsd\")` returns the same value as\n`test_schema` has in the earlier example. Inline imports are not used in the import section, but are\nexpressions evaluated in the next two sections:\n\n### Variables\n\nAfter imports, JXON and JXSD files have a section in which variables can be set. Variable assignments simply use \n`=` and don't require a semicolon. Variables names consist of alphanumeric characters and underscores, and \ncan be used both as named exports and in other expressions:\n\n```\nSchool = {\n  \"name\": String,\n  \"type\": Enum(\"Primary\", \"Secondary\", \"Postsecondary\")\n}\n\nMySchema = {\n  \"name\": String,\n  \"age\": Integer,\n  \"schools\": [School],\n  \"intro\": XML\n}\n```\n\nIn JXON, all variable assignments must evaluate to JXON values, not types. In JXSD, the opposite is true - all expressions\nmust evaluate to a type.\n\nIn JXSD, type annotations may also be added with `:` before the `=`. \n\n```\nNCSSM: School = import(\"./ncssm.json\")\n\nme: test_schema = {\n  \"name\": names.conor,\n  \"age\": 23,\n  \"schools\": [\n    import(\"./ncssm.json\"),\n    {\n      \"name\": \"Haverford College\",\n      \"type\": \"Postsecondary\"\n    }\n  ],\n  \"intro\": <div class=\"col-6 col-md-12\">\n    <h1>Conor Stuart Roe</h1>\n    <br/>\n    <p>Hi! my name is <b>Conor</b> and I like to boogie.</p>\n    <p>What happens if there are<b>no spaces</b>around a child element?</p>\n  </div>\n}\n```\n\nThese are both for ease of reading, and will be enforced as parse time - JXON parsing will fail if the \nexpression a variable is assigned to does not match its type annotation, so the following will not parse:\n\n```\nNCSSM: School = {\n  \"name\": \"NCSSM\",\n  \"something_else\": 99.9\n}\n```\n\nIn JXON/JXSD, variable names are all final, and cannot be reassigned. This includes the name of any imports.\n\n### Default variable\n\nThis section simply consists of an expression. JSON and XML files parsed as JXON are essentially regarded by the\nJXON parser as only having this section. This section becomes the default export of the file.\n\n### Exports\n\nJXON and JXSD simply have one piece of syntax for changing the set of named exports, and another piece of syntax\nfor setting the default export:\n\n```\nexport {foo, bar};\nexport default baz;\n```\n\nNeither statement is needed, and they don't interact. If no named export statement is included, all variables \nimported or defined in the file are available for import. If no default export statement is included,\nthen the default export comes from the default export section, or is simply null if there is no default\nexport section. \n\nIf there is a default export section, but a different variable is named in a default export\nstatement, then the original default export is inaccessible:\n\n```\nfoo = {\n  \"foo\": \"bar\"\n}\n\n// this object is unavailable for import by other files\n{\n  \"spam\": \"eggs\"\n}\n\nexport default foo;\n```\n\n# Using this library\n\n`jxon` is available on PyPI, so to install it simply run:\n\n``` \npip install jxon\n```\n\nThe API for this library is intended to be as analogous to the standard `json` library\nas possible, though it includes a few more addons like the `jxsd` module.\n\n### Reading a JXON file or string\n\n```\nimport jxon\n\ns = \"\"\"\n{\n  \"name\": \"Conor Stuart Roe\",\n  \"some_xml\": <p>Hello, World!</p>\n}\n\"\"\"\n\nobj = jxon.loads(s)\n\nwith open(\"example.jxon\", \"r\") as fh:\n    obj2 = jxon.load(fh)\n```\n\nLike the `json` library, this package makes a function `loads` available for \nparsing a string as JXON, and a function `load` for parsing JXON from a file-like\nobject.\n\nIf you use imports beginning with `\"./\"` in your JXON, make sure to use `load`!\nOtherwise, the parser has no way to determine the original directory of your file.\n\ndefault export\n\n### Exporting a JXON object to a file or string\n\n```\nfrom xml.etree import ElementTree as ET\nimport jxon\n\nobj = {\n    \"name\": \"Conor Stuart Roe\",\n    \"some_xml\": ET.Element(\"p\")\n}\n\ns = jxon.dumps(obj)\n\nwith open(\"example.jxon\", \"w\") as fh:\n    jxon.dump(obj, fh, indent=2, sort_keys=True)\n```\n\nAlso like the `json` library, this package has a function `dumps` for exporting\na JXON object as a string, and `dump` for exporting into a file-like object.\n\nBoth `dump` and `dumps` permit two arguments, `indent` and `sort_keys`. If you don't\nspecify `indent`, then no newline characters will be put into your string/file. `indent`\ncan be set to an integer, which will then be how many spaces it inserts per level of\nindentation. If `sort_keys` is not set, keys in JXON objects will be exported in their \noriginal order. If it is set to `True`, all keys in all objects will be in alphabetical\norder.\n\nno imports/whatev\n\n### Checking the equality of JXON objects\n\nIf you want to check whether two JXON objects are equal, use `jxon_equal`\n\n``` \nfrom jxon import jxon_equal\n\njxon_equal(5, 5)\n\njxon_equal({\"name\": \"Alice\"}, 5)\n```\n\n## Using JXSD\n\n`jxon.jxsd` has functions `load`, `loads`, `dump`, and `dumps` which all\nbehave similarly to the `jxon` functions, but they deal with JXONType objects.\n\n``` \nfrom jxon import jxsd\n\nwith open(\"example.jxsd\", \"r\") as fh:\n    example_schema = jxsd.load(fh)\n\ntype(example_schema)  # JXONType\n```\n\n### Checking the equality of JXON objects\n\nJXON object validity is already checked when loading or dumping - syntax errors when\nloading, objects not castable to JXON when dumping, and inconsistent array element\ntypes when doing either, will all raise Python exceptions. However, if you want\nto check whether some object has a valid JXON schema without loading or dumping,\nyou can use the function `jxsd.has_consistent_schema`\n\n``` \nfrom jxon import jxsd\n\njxsd.has_consistent_schema([\n    {\n        \"name\": \"Alice\"\n    },\n    {\n        \"name\": \"Bob\"\n    }\n])\n```\n\n### Parsing the type of a JXON object\n\nSay you have a large JSON or JXON file and you just want to know its schema.\nLook no further than `parse_type`:\n\n``` \nimport jxon\nfrom jxon import jxsd\n\nwith open(\"bigdata.json\", \"r\") as fh:\n    obj = jxon.load(fh)\n\nbig_schema = jxsd.parse_type(obj)\n\nwith open(\"bigdata.jxsd\", \"w\") as fh:\n    jxsd.dump(big_schema, fh, indent=2)\n```\n\nNow you can take a peek at `bigdata.jxsd` to see what your JSON's schema is!\n\n### Checking whether a JXON object is an instance of a JXONType\n\n```\nwith open(\"bigdata2.json\", \"r\") as fh:\n    obj2 = jxon.load(fh)\n\nbig_schema.is_jxon_instance(obj2)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cstuartroe/jxon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jxon",
    "package_url": "https://pypi.org/project/jxon/",
    "platform": "",
    "project_url": "https://pypi.org/project/jxon/",
    "project_urls": {
      "Homepage": "https://github.com/cstuartroe/jxon"
    },
    "release_url": "https://pypi.org/project/jxon/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "JSON++",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9672363,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc450a1a0623cac7a6dab4db884ce830ec53b8d48b1634ef176a5b9f6ba5bb79",
          "md5": "193de46f24d99dd65540699ac94cd6df",
          "sha256": "bb9aa021adefb66d544d0c3525c4b029706caf12b0eedbe0e21bf00ba355bf6b"
        },
        "downloads": -1,
        "filename": "jxon-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "193de46f24d99dd65540699ac94cd6df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13008,
        "upload_time": "2020-02-16T16:25:11",
        "upload_time_iso_8601": "2020-02-16T16:25:11.284466Z",
        "url": "https://files.pythonhosted.org/packages/fc/45/0a1a0623cac7a6dab4db884ce830ec53b8d48b1634ef176a5b9f6ba5bb79/jxon-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfe1d53871b3e7739668d3b9ead68c91abd30debbf28e1c039c6f622de2077b8",
          "md5": "4a43498036a5a0796a45a97cda4ea992",
          "sha256": "45fb91d3dbc0baa693e7464b989fcefa139484f222f5243589b4f938c185a821"
        },
        "downloads": -1,
        "filename": "jxon-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a43498036a5a0796a45a97cda4ea992",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11742,
        "upload_time": "2020-02-16T16:25:15",
        "upload_time_iso_8601": "2020-02-16T16:25:15.046780Z",
        "url": "https://files.pythonhosted.org/packages/df/e1/d53871b3e7739668d3b9ead68c91abd30debbf28e1c039c6f622de2077b8/jxon-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69efe493a699e44661e9e6ee5be7c15ff61cd603f5fed1a34a2d40a970609799",
          "md5": "0c870470e1703eb2dde68820e825cbdb",
          "sha256": "f08b551d144f76ebf536ec649e736c92cecc5f61b52c45fbb76d7148d9f820cb"
        },
        "downloads": -1,
        "filename": "jxon-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c870470e1703eb2dde68820e825cbdb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14140,
        "upload_time": "2020-02-16T16:25:13",
        "upload_time_iso_8601": "2020-02-16T16:25:13.709979Z",
        "url": "https://files.pythonhosted.org/packages/69/ef/e493a699e44661e9e6ee5be7c15ff61cd603f5fed1a34a2d40a970609799/jxon-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a455379f574c325b23bad2f70241f439c460d6b43549fcfe6a4a950211f9ec8",
          "md5": "c4974f89ac1324d5fc240449a43d9479",
          "sha256": "86d4452634cc329df2a4abddac39ef1a14dc464f2b971312dbe8fb26bbaf9cf3"
        },
        "downloads": -1,
        "filename": "jxon-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c4974f89ac1324d5fc240449a43d9479",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14397,
        "upload_time": "2020-02-16T16:25:16",
        "upload_time_iso_8601": "2020-02-16T16:25:16.490207Z",
        "url": "https://files.pythonhosted.org/packages/8a/45/5379f574c325b23bad2f70241f439c460d6b43549fcfe6a4a950211f9ec8/jxon-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "728a982cd0339e35dc9c37ca41ab5d4726cca80651673052b4ac29ce7167650a",
          "md5": "f79369b54650990faf08c4ff13644f38",
          "sha256": "3e1b01edcc1f432957273dc1367fc880ab64d8eaf3d3a1835a720989faf1daeb"
        },
        "downloads": -1,
        "filename": "jxon-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f79369b54650990faf08c4ff13644f38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14195,
        "upload_time": "2020-03-03T21:10:23",
        "upload_time_iso_8601": "2020-03-03T21:10:23.205455Z",
        "url": "https://files.pythonhosted.org/packages/72/8a/982cd0339e35dc9c37ca41ab5d4726cca80651673052b4ac29ce7167650a/jxon-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29d620d18abb401ad5d6520a9df4d193650d9d834f129092120a32c0c26892ec",
          "md5": "40ed8ae0e6a8dd60c8fec71efe13a918",
          "sha256": "8f5c7b3b892cc32993652e134d4c85d5fb9f3020c74b0740b15ec49cdb33c83f"
        },
        "downloads": -1,
        "filename": "jxon-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "40ed8ae0e6a8dd60c8fec71efe13a918",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14586,
        "upload_time": "2020-03-03T21:10:25",
        "upload_time_iso_8601": "2020-03-03T21:10:25.470337Z",
        "url": "https://files.pythonhosted.org/packages/29/d6/20d18abb401ad5d6520a9df4d193650d9d834f129092120a32c0c26892ec/jxon-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "216d0da81f54af0aaf41563727ee14e7f2721cf49028c3b7154487871e3a6dd2",
          "md5": "134f0625c6f78438af9e523c93dd092e",
          "sha256": "2ec6d764fe841dbf3ef07c104e5e7f0136a8569bb11fa22b5a81d038247adfdb"
        },
        "downloads": -1,
        "filename": "jxon-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "134f0625c6f78438af9e523c93dd092e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14214,
        "upload_time": "2020-05-07T01:34:10",
        "upload_time_iso_8601": "2020-05-07T01:34:10.502634Z",
        "url": "https://files.pythonhosted.org/packages/21/6d/0da81f54af0aaf41563727ee14e7f2721cf49028c3b7154487871e3a6dd2/jxon-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e53bc76340a7026b90f5480de4cf6a1bd62d8d3b02eb0ececee751b74ac9c769",
          "md5": "7d28aa2e0772cd26c46bc5d35989d594",
          "sha256": "f62f6075f66bcea42e005e45a133a76af76f87a549b419b35a784a3ad7eaaeaa"
        },
        "downloads": -1,
        "filename": "jxon-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d28aa2e0772cd26c46bc5d35989d594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14602,
        "upload_time": "2020-05-07T01:34:13",
        "upload_time_iso_8601": "2020-05-07T01:34:13.356869Z",
        "url": "https://files.pythonhosted.org/packages/e5/3b/c76340a7026b90f5480de4cf6a1bd62d8d3b02eb0ececee751b74ac9c769/jxon-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bc1088d0727b52e064e967c50e7276a214d44bd0a7fcec1494474ee7b9cb970",
          "md5": "9297cf14549c22ef96159f908e715fa1",
          "sha256": "52e2750f509d3966a3a94acd3484d3978eb050dafb85bf7c22e92450493fd9cc"
        },
        "downloads": -1,
        "filename": "jxon-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9297cf14549c22ef96159f908e715fa1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18389,
        "upload_time": "2021-03-05T05:28:35",
        "upload_time_iso_8601": "2021-03-05T05:28:35.548164Z",
        "url": "https://files.pythonhosted.org/packages/6b/c1/088d0727b52e064e967c50e7276a214d44bd0a7fcec1494474ee7b9cb970/jxon-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba3cf0764b222391f7311d013376536f95dae14021cd722bf5ef63b37e9e6d3",
          "md5": "ba11ae034394c48ad7cbfc4493551b24",
          "sha256": "1263bfc3da5342bc521ee96603ed05a40c2b073ecca85f9dc1c271259fd8dd48"
        },
        "downloads": -1,
        "filename": "jxon-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ba11ae034394c48ad7cbfc4493551b24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18409,
        "upload_time": "2021-03-05T05:53:17",
        "upload_time_iso_8601": "2021-03-05T05:53:17.114888Z",
        "url": "https://files.pythonhosted.org/packages/1b/a3/cf0764b222391f7311d013376536f95dae14021cd722bf5ef63b37e9e6d3/jxon-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ba3cf0764b222391f7311d013376536f95dae14021cd722bf5ef63b37e9e6d3",
        "md5": "ba11ae034394c48ad7cbfc4493551b24",
        "sha256": "1263bfc3da5342bc521ee96603ed05a40c2b073ecca85f9dc1c271259fd8dd48"
      },
      "downloads": -1,
      "filename": "jxon-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ba11ae034394c48ad7cbfc4493551b24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18409,
      "upload_time": "2021-03-05T05:53:17",
      "upload_time_iso_8601": "2021-03-05T05:53:17.114888Z",
      "url": "https://files.pythonhosted.org/packages/1b/a3/cf0764b222391f7311d013376536f95dae14021cd722bf5ef63b37e9e6d3/jxon-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}