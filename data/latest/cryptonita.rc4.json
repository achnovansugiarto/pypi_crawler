{
  "info": {
    "author": "Di Paola Martin",
    "author_email": "use-github-issues@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Security",
      "Topic :: Security :: Cryptography"
    ],
    "description": "``cryptonita`` - Cryptanalysis Swiss Army Knife\n===============================================\n\n`cryptonita <https://pypi.org/project/cryptonita/>`__ is a set of\nbuilding blocks to create automated crypto-attacks.\n\nYou may not find the advanced attack implemented here (yet) but I hope\nthat this building blocks or primitives can help you in your journey.\n\nWithout more, let’s put our hands on and break the famous `Vigenere\ncipher <https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher>`__.\n\nTutorial - Break a xor Vigenere cipher\n--------------------------------------\n\nThe `Vigenere\ncipher <https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher>`__ was once\nthe most secure cipher. It was thought that it was unbreakable…\n\nLet’s put under test that statement and learn about\n`cryptonita <https://pypi.org/project/cryptonita/>`__ along the journey!\n\n   Note: the following README is also an automated test for the\n   ``cryptonita`` lib thanks to\n   `byexample <https://byexamples.github.io/byexample>`__.\n\nImplement the cipher - Load the bytes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe building block in ``cryptonita`` is the *byte string*: a finite\nimmutable sequence of bytes.\n\nIn ``cryptonita`` we can create a *byte string* with the ``B`` function\nand do any conversion needed:\n\n.. code:: python\n\n   >>> from cryptonita import B            # byexample: +timeout=10\n   >>> B(u'from an unicode encoded text', encoding='utf-8')\n   'from an unicode encoded text'\n\n   >>> B([0x46, 0x72, 0x6f, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73])\n   'From numbers'\n\n   >>> B('RnJvbSBiYXNlNjQ=', encoding=64)\n   'From base64'\n\nFor our purposes of implementing a Vigenere cipher, let’s load some\nplain text from a file:\n\n.. code:: python\n\n   >>> ptext = B(open('./test/ds/plaintext', 'rt').read())\n\n   >>> ptext[:29]\n   'Now that the party is jumping'\n\n..\n\n   For the full list of conversions see `cryptonita/conv.py’s\n   ``as_bytes`` <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/conv.py>`__\n\nImplement the cipher - Apply a xor\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst, we load our secret key in base 64 from the file. Notice how the\ndecoding from base 64 is made by ``B``:\n\n.. code:: python\n\n   >>> secret = B(open('./test/ds/secret', 'rt').read(), encoding=64)\n\nThe Vigenere cipher consists in xord the plaintext with the key. If the\nplaintext is larger than the key, just repeat the key over and over.\n\n``cryptonita`` can do exactly that:\n\n.. code:: python\n\n   >>> ctext = ptext ^ secret.inf()\n\n   >>> ctext[:29].encode(64)\n   b'OA4ZSRgEAAJBGgEJTBEXExoQTAUSVgsbBBwFDxE='\n\nThe ``inf()`` method tells that the ``secret`` string must be seen as an\n“infinite sequence”, repeating the key over and over.\n\nThen, the ``^`` just does the xor byte by byte.\n\n   For the full list of operation on ``ImmutableByteString`` see\n   `cryptonita/bytestrings.py’s\n   ``ImmutableByteString`` <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/bytestrings.py>`__\n   and the\n   `mixins <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/mixins.py>`__\n\nBreaking the cipher - Scoring the length of the key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nVigenere was thought to be unbreakable because a priori is not possible\nto know the length of the key.\n\nHowever this was proved to be false.\n\nIn 1863, `Kasiski <https://en.wikipedia.org/wiki/Kasiski_examination>`__\ncame with a cleaver method to know the length of the key but it is quite\nhard to make it right and faster (I’m still `working on\nit <https://book-of-gehn.github.io/articles/2020/10/11/Kasiski-Test-Part-I.html>`__)\n\nModern and better approaches are the `Hamming\ndistance <https://en.wikipedia.org/wiki/Hamming_distance>`__ and the\n`Index of\nCoincidence <https://book-of-gehn.github.io/articles/2019/10/04/Index-of-Coincidence.html>`__\n\nThe idea is to assume that the key is of length L and then pick every\nLth byte of the ciphertext:\n\n.. code:: python\n\n   >>> L = 8 # totally arbitrary here\n   >>> picked = ctext[::L]\n\n..\n\n   Note how the ``ImmutableByteString`` ciphertext supports indexing\n   operation like any Python string.\n\nNow we compute the Index of Coincidence (IC) of this picked string.\n\nIf the assumed length L is **not** the correct one, every picked byte\nwill be the xor of the plaintext with a different key byte and the whole\n``picked`` string would like **random** and the IC will be very low.\n\nOn the other hand, if we guessed correctly the length L, **all** the\npicked bytes will be the xord of the plaintext and the **same** key byte\nand therefore will not look random. A high IC would be expected!\n\n.. code:: python\n\n   >>> from cryptonita.metrics import icoincidences\n   >>> icoincidences(picked)\n   0.02<...>\n\n..\n\n   See\n   `cryptonita/scoring.py <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/scoring/score_funcs.py>`__\n   and\n   `cryptonita/metrics.py <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/metrics/__init__.py>`__\n\n   I you want to know more about the Index of Coincidence see this `blog\n   post <https://book-of-gehn.github.io/articles/2019/10/04/Index-of-Coincidence.html>`__\n   about it and this `comparison with other\n   methods <https://book-of-gehn.github.io/articles/2018/04/01/A-string-of-coincidences-is-not-a-coincidence.html>`__\n\nBreaking the cipher - Guessing the length of the key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA IC of 0.02 is too low. It seems that 8 is not the length of the key.\n\nWe could do a loop to try other lengths but ``cryptonita`` already has\nthat\n\n.. code:: python\n\n   >>> from cryptonita.scoring import key_length_by_ic\n   >>> from cryptonita.attacks import guess_key_length\n\n   >>> gklength = guess_key_length(\n   ...                         ctext,\n   ...                         length_space=range(5, 25),\n   ...                         score_func=key_length_by_ic,\n   ...                         min_score=0.025\n   ...                         )\n\nOkay, what is that?\n\n-  ``guess_key_length`` does a brute force *attack* computing a *score\n   function* testing every possible length from 5 to 25.\n-  ``key_length_by_ic`` is a *scores* how good the tested length is. It\n   puts a score between 0 (bad) and 1 (good) using the Index of\n   Coincidence (like the ``icoincidences``).\n\nYou may think that ``gklength`` is the **the** guessed key but in\ncryptoanalysis you mostly never work with a *specific* value. You work\nwith a **set of possible values**.\n\n.. code:: python\n\n   >>> gklength\n   {5: 0.02702702702702703,\n    6: 0.027649769585253458,\n    7: 0.04682040531097135,\n    8: 0.02682701202590194,\n    9: 0.025551684088269456,\n    10: 0.025604551920341393,\n    12: 0.038306451612903226,\n    14: 0.03133903133903134,\n    16: 0.028985507246376812,\n    17: 0.02766798418972332,\n    21: 0.032679738562091505,\n    24: 0.041666666666666664}\n\nIn ``cryptonita`` we call these sets, these *guesses*, ``FuzzySet``.\n\n   For more scoring functions see\n   `cryptonita/scoring.py <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/scoring/score_funcs.py>`__\n\nBreaking the cipher - A guess as a fuzzy set\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA guess or ``FuzzySet`` is a bunch of possible solutions, each with an\nassociated probability or score.\n\nWe can query then the most likely answer. In our case, the most likely\nlength of the key:\n\n.. code:: python\n\n   >>> gklength.most_likely()\n   7\n\nBut the most likely may not necessary mean the correct answer. Instead,\nyou should work always with the fuzzy set to test all of them.\n\nIf the sets gets to large (and they will), you can cut them off,\ndropping items with a probability lower than some threshold.\n\nHere we say that any length with a lower probability of 0.01 should be\nout:\n\n.. code:: python\n\n   >>> gklength.cut_off(0.03)\n   >>> gklength\n   {7 -> 0.0468, 24 -> 0.0417, 12 -> 0.0383, 21 -> 0.0327, 14 -> 0.0313}\n\n..\n\n   Take a look at the `documentation of\n   ``FuzzySet`` <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/fuzzy_set.py>`__\n   and optional a wiki about `fuzzy set\n   theory <https://en.wikipedia.org/wiki/Fuzzy_set>`__.\n\nBreaking the cipher - Chop the ciphertext into blocks\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow the we have a set of possible lengths, here is the plan to crack the\ncipher:\n\nFirst, split the ciphertext into *blocks* of guessed length L:\n\n.. code:: python\n\n   >>> L = gklength.most_likely()\n   >>> cblocks = ctext.nblocks(L)\n\n::\n\n   ciphertext:  ABCDEFGHIJKLMN\n                 |   |    |  |\n                 |   |    \\  \\___\n                 |   |     \\     \\\n   cblocks      ABCD  EFGH  IJKL  MN\n\nEach first byte of those blocks are supposedly the result of xor the\nplaintext with the same key byte. The same goes for the second byte of\neach block and so on.\n\nSecond, because it is easier to have all the first bytes in one block,\nall the second bytes in another block and so on, we want to *transpose*\nthe blocks:\n\n.. code:: python\n\n   >>> from cryptonita.conv import transpose\n   >>> cblocks = transpose(cblocks, allow_holes=True)\n\n::\n\n    cblocks   --> transposed cblocks\n     ABCD           AEIM\n     EFGH           BFJN\n     IJKL           CGK\n     MN             DHL\n\nNow, each block (or row) is a piece of plaintext encrypted with the same\nsingle-byte key.\n\nLet’s break it!\n\nBreaking the cipher - Frequency attack\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe could test all the 256 possible byte keys by brute force but that’s\nquite slow.\n\nRather we could do a *frequency attack* because the statistics of the\nplaintext are leaked into the ciphertext.\n\n``cryptonita`` already provides us with a very simple *model* of the\nfrequencies of the English plaintext: the famous *ETAOIN SHRDLU*.\n\n.. code:: python\n\n   >>> from cryptonita.scoring.freq import etaoin_shrdlu\n\nIf our ciphertext has the same distribution than the plaintext, at least\none of the most common bytes in the ciphertext should be one of the most\ncommon bytes in the plaintext, encrypted of course.\n\nUnder this hypothesis ``freq_attack`` xor the top most common bytes in\nthe ciphertext with the most common bytes in plaintext according to the\nmodel.\n\n.. code:: python\n\n   >>> most_common_pbytes = etaoin_shrdlu()\n   >>> ntop_most_common_cbytes = 1\n\n   >>> from cryptonita.attacks import freq_attack\n\n   >>> freq_attack(cblocks[0], most_common_pbytes, ntop_most_common_cbytes)\n   {'\"': 0.07387790762504176,\n    '$': 0.055504740275805896,\n    '%': 0.0561520934139066,\n    '2': 0.03178778752478832,\n    '3': 0.10384587375686015,\n    '5': 0.026296157563462763,\n    '7': 0.07060615929878336,\n    '8': 0.060837928943597436,\n    '9': 0.0634364224946222,\n    ':': 0.0342469273170487,\n    '>': 0.03964865941609311,\n    '?': 0.06072776315086166,\n    'v': 0.17269159612928756}\n\nIn general, ``freq_attack`` cannot give us **the** byte key but it can\ngive use a *guess*: a fuzzy set of possible keys. This is a much shorted\nlist than 256!\n\nBut don’t claim victory yet. We broke only the first block\n(``cblocks[0]``).\n\n   More frequency models may be found at\n   `cryptonita/scoring/freq.py <https://github.com/cryptonitas/cryptonita/tree/master/cryptonita/scoring/freq.py>`__\n\nBreaking the cipher - Guess explosion\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe need to call ``freq_attack`` for all the blocks:\n\n.. code:: python\n\n   >>> gbkeys = []\n   >>> for c in cblocks:\n   ...     gbkeys.append(freq_attack(c, most_common_pbytes, ntop_most_common_cbytes))\n\n   >>> len(gbkeys)\n   7\n\nSo we have 7 guesses (7 fuzzy sets), one guess set per byte of the key.\n\nBut the key is one of the *all possible combination of the guesses*.\n\nHow many possible keys do we have?\n\n.. code:: python\n\n   >>> from cryptonita.fuzzy_set import len_join_fuzzy_sets\n\n   >>> len_join_fuzzy_sets(gbkeys)\n   62748517\n\nHow! that’s a lot! But still **much less than** 256^7 which is greater\nthan the age of the `observable\nuniverse <https://en.wikipedia.org/wiki/Observable_universe>`__ in\nyears.\n\nStill, we need to shrink the guesses even further to make it manageable.\n\nBreaking the cipher - Brute force refinement\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``freq_attack`` is really powerful but it is not the only tool that we\nhave.\n\nNot all the possible keys in a guess will produce *“reasonable”*\nplaintext.\n\nWe can *score* a plaintext and filter out the ones that don’t look\n*“good enough”*\n\n``cryptonita`` implements different scoring functions and\n``all_ascii_printable`` is the most simplest to understand:\n\nLet’s *assume* that the plaintext is an English message encoded in\nASCII.\n\nIf we decipher one block and we got a plaintext with non-printable ASCII\nchar we can be sure that the key used is incorrect and we can score it\nwith a ``0``. Otherwise, we score it with ``1``.\n\n.. code:: python\n\n   >>> from cryptonita.scoring import all_ascii_printable\n\n   >>> all_ascii_printable(B(\"a reasonable plaintext\"))\n   1\n\n   >>> all_ascii_printable(B(\"n\\0t v\\4lid\"))\n   0\n\nThe plan is to try **all** the possible byte keys in **each** of our\nguesses, score the results and drop the ones with lower score.\n\n.. code:: python\n\n   >>> from cryptonita.attacks import brute_force\n\n   >>> for i, c in enumerate(cblocks):\n   ...     # the fuzzy set of keys (a guess) for this ith byte\n   ...     gbkey = gbkeys[i]\n   ...\n   ...     refined = brute_force(c,\n   ...                     score_func=all_ascii_printable,\n   ...                     key_space=gbkey,\n   ...                     min_score=0.01\n   ...                 )\n   ...\n   ...     # \"refined\" is another fuzzy set (a guess) for the ith byte\n   ...     # but probably a much smaller one\n   ...     gbkeys[i] = refined\n\nLike ``guess_key_length``, ``brute_force`` receives a score function, a\nkey space and a minimum score.\n\nNow we have a much smaller search space to work on:\n\n.. code:: python\n\n   >>> len_join_fuzzy_sets(gbkeys)\n   260\n\n   >>> 260 / 62748517\n   4.14<...>e-06\n\nWhile still we have a lot of possible keys, the refinement did an\namazing job and the new set is **6 orders of magnitud smaller** than the\noriginal!\n\nWe can compute the set of possible keys doing a join and we can even\nfurther reduce the set keeping only the most likely keys:\n\n.. code:: python\n\n   >>> from cryptonita.fuzzy_set import join_fuzzy_sets\n   >>> gkstream = join_fuzzy_sets(gbkeys, cut_off=1024, j=B(''))\n\n``gkstream`` is our guess for the complete key stream for the cipher.\n\nIs this right?\n\nBreaking the cipher - Break the cipher!\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> kstream = gkstream.most_likely()\n\n   >>> print((ctext ^ kstream.inf()).decode('ascii'))\n   Now that the party is jumping\n   With the bass kicked in and the Vega's are pumpin\n   Quick to the point, to the point, no faking\n   Cooking MC's like a pound of bacon\n   Burning 'em, if you ain't quick and nimble\n   I go crazy when I hear a cymbal\n   And a high hat with a souped up tempo\n   I'm on a roll, it's time to go solo\n   ollin' in my five point oh\n   ith my rag-top down so my hair can blow\n\n\n   >>> kstream.encode(64)\n   b'dmFuaWxsYQ=='\n\nFinal thoughts\n~~~~~~~~~~~~~~\n\nVigenere or a repeating key cipher is a well known poor cipher shown in\nevery single cryptography course.\n\nBut little is explained in how to break it in an *automated* fashion.\n\n`cryptonita <https://pypi.org/project/cryptonita/>`__ is not magical and\na little of brain is required from you, but it is a quite useful *Swiss\narmy knife for breaking crypto*.\n\nPRs or comments are welcome.\n\nTested with `byexample <https://byexamples.github.io/byexample>`__.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "crypto cryptography crypto-analysis",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cryptonita",
    "package_url": "https://pypi.org/project/cryptonita/",
    "platform": null,
    "project_url": "https://pypi.org/project/cryptonita/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/cryptonita/0.5.0/",
    "requires_dist": [
      "aspell-python-py3",
      "gmpy2",
      "langdetect",
      "pycrypto",
      "scipy",
      "z3-solver"
    ],
    "requires_python": ">=3.3",
    "summary": "Cryptanalysis swiss army knife",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16389520,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "940b897c0f9c7592ce264e309ec641ebe0ab5461e3d39f5e607e4eb5d1113634",
          "md5": "1a1606155efe0259c453ba81ff15f253",
          "sha256": "fa618e4211d494a84085bd397c446fd1ae2acdc45e502561159440212c781681"
        },
        "downloads": -1,
        "filename": "cryptonita-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a1606155efe0259c453ba81ff15f253",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.3",
        "size": 17862,
        "upload_time": "2018-09-08T23:11:06",
        "upload_time_iso_8601": "2018-09-08T23:11:06.284900Z",
        "url": "https://files.pythonhosted.org/packages/94/0b/897c0f9c7592ce264e309ec641ebe0ab5461e3d39f5e607e4eb5d1113634/cryptonita-0.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede247cec57c288fdf3de393347f577bee95fb871e811a557344fc206c328b55",
          "md5": "d1760261ffc0b8f2676822b943ec04a6",
          "sha256": "e492c066290af938f163912b8f332dbbed254aaff4d1c2b026e5cb1cff8eb87f"
        },
        "downloads": -1,
        "filename": "cryptonita-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1760261ffc0b8f2676822b943ec04a6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.3",
        "size": 17867,
        "upload_time": "2018-09-08T23:10:40",
        "upload_time_iso_8601": "2018-09-08T23:10:40.411039Z",
        "url": "https://files.pythonhosted.org/packages/ed/e2/47cec57c288fdf3de393347f577bee95fb871e811a557344fc206c328b55/cryptonita-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78f2f5486f81d1128d323e75ba003b3bb39c9a3e81a4835032f92c73b8f890fd",
          "md5": "eda53abe7b37c26cd3b3db2f6c7bffb6",
          "sha256": "a7f4f5afcd9db6de8969c6a28c9987f7da4390c89851e6992cea81efbc929e0a"
        },
        "downloads": -1,
        "filename": "cryptonita-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eda53abe7b37c26cd3b3db2f6c7bffb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 16912,
        "upload_time": "2018-09-08T23:11:58",
        "upload_time_iso_8601": "2018-09-08T23:11:58.168063Z",
        "url": "https://files.pythonhosted.org/packages/78/f2/f5486f81d1128d323e75ba003b3bb39c9a3e81a4835032f92c73b8f890fd/cryptonita-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4992a254cb705fabe8cb803e747340dad3f91dae9d6d57058c11db84e0265052",
          "md5": "c602fd042af5dde9f7c6f1b959a9218f",
          "sha256": "5c875f7430fc41d71350bd1af07893cacb72f2342fe84acd1e1fce9e0e0bb369"
        },
        "downloads": -1,
        "filename": "cryptonita-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c602fd042af5dde9f7c6f1b959a9218f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 14963,
        "upload_time": "2018-09-08T23:10:41",
        "upload_time_iso_8601": "2018-09-08T23:10:41.821093Z",
        "url": "https://files.pythonhosted.org/packages/49/92/a254cb705fabe8cb803e747340dad3f91dae9d6d57058c11db84e0265052/cryptonita-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4710c868756d027bace77e5e5aaf8f0ec3cda21cf2339277e41c0b72393adcc",
          "md5": "80d56abe28cdba2d4502a72e570ff9ed",
          "sha256": "a420f56bd740aa65bab48b7b14701e0ad8f50e9fdc007aa10fc74c6dd7bdadb3"
        },
        "downloads": -1,
        "filename": "cryptonita-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80d56abe28cdba2d4502a72e570ff9ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 19002,
        "upload_time": "2019-02-22T14:56:50",
        "upload_time_iso_8601": "2019-02-22T14:56:50.640718Z",
        "url": "https://files.pythonhosted.org/packages/f4/71/0c868756d027bace77e5e5aaf8f0ec3cda21cf2339277e41c0b72393adcc/cryptonita-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "016ffa4622ac9cce5278f1962778ede004d3036743caf4a07250b8c4d3803a56",
          "md5": "c39cf408ac379e355c34b541b92075ae",
          "sha256": "5d7448aaa388fc3d5faad19f43e107fff725650ed79e4e5c69288ee33d6e2ace"
        },
        "downloads": -1,
        "filename": "cryptonita-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c39cf408ac379e355c34b541b92075ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 16035,
        "upload_time": "2019-02-22T14:56:52",
        "upload_time_iso_8601": "2019-02-22T14:56:52.489737Z",
        "url": "https://files.pythonhosted.org/packages/01/6f/fa4622ac9cce5278f1962778ede004d3036743caf4a07250b8c4d3803a56/cryptonita-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "841f0b44fd2133f037f84fd016106cb635e7a56a542b0e5c16951e9bf8ecb305",
          "md5": "3e5d4f12f032c0faa81544a889aafdaa",
          "sha256": "17bc6e39e7b26af7791969fb8051555750e3724b29935b0b7dc907fa90c15280"
        },
        "downloads": -1,
        "filename": "cryptonita-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e5d4f12f032c0faa81544a889aafdaa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 29391,
        "upload_time": "2022-06-23T23:30:38",
        "upload_time_iso_8601": "2022-06-23T23:30:38.344890Z",
        "url": "https://files.pythonhosted.org/packages/84/1f/0b44fd2133f037f84fd016106cb635e7a56a542b0e5c16951e9bf8ecb305/cryptonita-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ec36a1f91dcf5255b5ca8ed340a841a3fbdfe7fdfe47ed20d4787a46d5303bc",
          "md5": "f9bd8a608c901ec06fc4f0ee3069ee68",
          "sha256": "3d1e6f58611ac1302035bb148c165c2b3908e202139ca48bf2bf5bc708205b02"
        },
        "downloads": -1,
        "filename": "cryptonita-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9bd8a608c901ec06fc4f0ee3069ee68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 33765,
        "upload_time": "2022-06-23T23:30:42",
        "upload_time_iso_8601": "2022-06-23T23:30:42.296977Z",
        "url": "https://files.pythonhosted.org/packages/6e/c3/6a1f91dcf5255b5ca8ed340a841a3fbdfe7fdfe47ed20d4787a46d5303bc/cryptonita-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2b408bac43945d2171712321bc8c926d4ac9bd79766497a7a1e857de56b7744",
          "md5": "b7c275665ad10bcb936161e8a3b99483",
          "sha256": "8a7d549065ce4a55d09184913d0ed9a84ea7bf85247423000365da4934acb656"
        },
        "downloads": -1,
        "filename": "cryptonita-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7c275665ad10bcb936161e8a3b99483",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 54468,
        "upload_time": "2023-01-11T13:03:05",
        "upload_time_iso_8601": "2023-01-11T13:03:05.917786Z",
        "url": "https://files.pythonhosted.org/packages/d2/b4/08bac43945d2171712321bc8c926d4ac9bd79766497a7a1e857de56b7744/cryptonita-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0281a452947cbba339d3a7f5bb414b4525bf45c54c904cc1befb012358e7179",
          "md5": "a7899c2a08b35351c8b3072b095a215c",
          "sha256": "1eb338ba0e421e398b39a2010a463338ca40be2a0c75a19be4b9c496bc5a7e1a"
        },
        "downloads": -1,
        "filename": "cryptonita-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a7899c2a08b35351c8b3072b095a215c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 54962,
        "upload_time": "2023-01-11T13:03:08",
        "upload_time_iso_8601": "2023-01-11T13:03:08.633302Z",
        "url": "https://files.pythonhosted.org/packages/d0/28/1a452947cbba339d3a7f5bb414b4525bf45c54c904cc1befb012358e7179/cryptonita-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2b408bac43945d2171712321bc8c926d4ac9bd79766497a7a1e857de56b7744",
        "md5": "b7c275665ad10bcb936161e8a3b99483",
        "sha256": "8a7d549065ce4a55d09184913d0ed9a84ea7bf85247423000365da4934acb656"
      },
      "downloads": -1,
      "filename": "cryptonita-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7c275665ad10bcb936161e8a3b99483",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.3",
      "size": 54468,
      "upload_time": "2023-01-11T13:03:05",
      "upload_time_iso_8601": "2023-01-11T13:03:05.917786Z",
      "url": "https://files.pythonhosted.org/packages/d2/b4/08bac43945d2171712321bc8c926d4ac9bd79766497a7a1e857de56b7744/cryptonita-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0281a452947cbba339d3a7f5bb414b4525bf45c54c904cc1befb012358e7179",
        "md5": "a7899c2a08b35351c8b3072b095a215c",
        "sha256": "1eb338ba0e421e398b39a2010a463338ca40be2a0c75a19be4b9c496bc5a7e1a"
      },
      "downloads": -1,
      "filename": "cryptonita-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a7899c2a08b35351c8b3072b095a215c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.3",
      "size": 54962,
      "upload_time": "2023-01-11T13:03:08",
      "upload_time_iso_8601": "2023-01-11T13:03:08.633302Z",
      "url": "https://files.pythonhosted.org/packages/d0/28/1a452947cbba339d3a7f5bb414b4525bf45c54c904cc1befb012358e7179/cryptonita-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}