{
  "info": {
    "author": "nyanp",
    "author_email": "Noumi.Taiga@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ttimer\nttimer is a simple timer that keeps track of the call hierarchy.\nttimer is intended to fulfill a use case somewhere between a timer and a profiler: \nlike a timer, it measures only where you explicitly write it, while like a profiler, it handles the call hierarchy and measures own time.\n\n## Install\n\n```shell\n> pip install ttimer\n```\n\nor simply copy whole ttimer.py into your project. \n(the license text is also included in ttimer.py)\n\n## Usage\n\n```python\n>>> from time import sleep\n>>> from ttimer import get_timer\n\n>>> timer = get_timer(timer_name=\"my timer\")\n\n>>> with timer(\"a\"):\n>>>     sleep(0.1)\n>>>     for _ in range(10):\n>>>         with timer(\"b\"):\n>>>             sleep(0.01)\n>>> with timer(\"b\"):\n>>>     sleep(0.1)\n\n>>> print(timer.render())\n\npath      count      time    own time    cpu time    own cpu time\n------  -------  --------  ----------  ----------  --------------\na             1  0.203831    0.100531    0.001314        0.000784\n└── b        10  0.103299    0.103299    0.00053         0.00053\nb             1  0.103603    0.103603    8.2e-05         8.2e-05\n\n>>> print(timer.render(flat=True))\n\npath      count      time    own time    cpu time    own cpu time\n------  -------  --------  ----------  ----------  --------------\na             1  0.203831    0.100531    0.001314        0.000784\nb            11  0.206903    0.206903    0.000612        0.000612\n\n```\n\nttimer records the following metrics in the with-statement:\n\n- **count**: Call count.\n- **time**: Elapsed time measured by [`perf_counter`](https://docs.python.org/3.10/library/time.html?highlight=time%20perf_counter#time.perf_counter). It includes time elapsed during sleep and is system-wide.\n- **own time**: Time, excluding the total time of its children.\n- **cpu time**: CPU time measured by [`process_time`](https://docs.python.org/3.10/library/time.html?highlight=time%20perf_counter#time.process_time).\n- **own cpu time**: CPU time, excluding the total time of its children.\n\nIf the name is not passed in the with-statement, \nthe name will be automatically resolved from the file and function names.\n\n```python\n>>> from ttimer import get_timer\n\n>>> t = get_timer(timer_name=\"foo\")\n>>> with t:\n>>>     pass\n\n>>> print(t.render())\npath                                  count         time     own time    cpu time    own cpu time\n----------------------------------  -------  -----------  -----------  ----------  --------------\ntest_get_timers(test_timer.py:144)        1  0.000347945  0.000347945    0.000228        0.000228\n```\n\nYou can also use decorators instead of with-statement:\n\n```python\nfrom ttimer import timer\n\n@timer(timer_name=\"my timer\")\ndef foo(a: int):\n    pass\n```\n\nIn both `get_timer` and `@timer`, timers with the same `timer_name` share the same elapsed time.\nThis is useful when you want to measure times across modules.\n\nAll named timers are stored as a thread-local variable,\nand you can use `get_timers` to enumerate the stored timers.\n\n```python\n>>> from ttimer import get_timer, get_timers\n\n>>> with get_timer(\"foo\"):\n>>>    pass\n>>> with get_timer(\"bar\"):\n>>>     pass\n\n>>> all_timers = get_timers()\n{'foo': <ttimer.timer.Timer object at 0x7fc9a334fc50>, 'bar': <ttimer.timer.Timer object at 0x7fc9a334df98>}\n```\n\n### Local timers\n\nIf you do not prefer global (thread-local) variables, you can simply create a local `Timer` instance.\nIn this style, if you use a decorator, you should pass the timer you created as an additional `timer` keyword argument.\n\n```python\nfrom ttimer import Timer, timer\n\nt = Timer()  # local timer\n\n@timer()\ndef foo(a: int):\n    pass\n\nwith t(\"a\"):\n    foo(a=1, timer=t)  # additional \"timer\" keyword argument are used to specify the context\n```\n\n### Properties\nBy accessing `timer[key]`, you can get the accumulated result as an instance of `Record` dataclass.\nYou can of course also get a list of records by `.records`.\n\n```python\nfrom dataclasses import asdict\nfrom ttimer import get_timer\n\ntimer = get_timer(\"my timer\")\n\nwith timer(\"a\"):\n    pass\n\nprint(\"result of {}:\".format(timer[\"a\"].name))\nprint(\"time:         {}\".format(timer[\"a\"].time))\nprint(\"cpu time:     {}\".format(timer[\"a\"].cpu_time))\nprint(\"own time:     {}\".format(timer[\"a\"].own_time))\nprint(\"own cpu time: {}\".format(timer[\"a\"].own_cpu_time))\nprint(\"count:        {}\".format(timer[\"a\"].count))\n\nprint(asdict(timer[\"a\"]))  # result is dataclass\n\ntimer.records  # list of records\n```\n\nThe results you can get with above are equivalent to `flat=True`: i.e., the measurements with the same name are accumulated.\nIf you want to get the measurements for each call stack separately, you can use `.nodes`.\n\n`.nodes` returns all the nodes, but if you want to get only the root node, use `.trees`. \nBoth return an instance of `Node`, and you can access the child nodes with `.children`, or access the node's records with `.record`.\n\n```python\nfrom ttimer import get_timer, Record\n\ntimer = get_timer(\"my timer\")\n\nwith timer(\"a\"):\n    with timer(\"b\"):\n        pass\n    \nwith timer(\"b\"):\n    pass\n\nassert len(timer.records) == 2\nassert len(timer.nodes) == 3\nassert timer.nodes[1].stack == (\"a\", \"b\")\nassert isinstance(timer.nodes[1].record, Record)\nassert len(timer.trees) == 2\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nyanp/ttimer",
    "keywords": "timer profiler",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ttimer",
    "package_url": "https://pypi.org/project/ttimer/",
    "platform": null,
    "project_url": "https://pypi.org/project/ttimer/",
    "project_urls": {
      "Homepage": "https://github.com/nyanp/ttimer"
    },
    "release_url": "https://pypi.org/project/ttimer/0.0.2/",
    "requires_dist": [
      "anytree",
      "tabulate"
    ],
    "requires_python": "",
    "summary": "ttimer - tree timer",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13249223,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c8cac2d9ce229b952a12244970c004803348aa54079fae3fb48377b1d216b7f",
          "md5": "4ec46c09560c740dcaa75e3d00413c83",
          "sha256": "354c26884492025a8b1af05eca528b9c0f1db95ac1414fce4bbf024f5e6e7833"
        },
        "downloads": -1,
        "filename": "ttimer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ec46c09560c740dcaa75e3d00413c83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7840,
        "upload_time": "2022-02-23T04:01:13",
        "upload_time_iso_8601": "2022-02-23T04:01:13.774457Z",
        "url": "https://files.pythonhosted.org/packages/9c/8c/ac2d9ce229b952a12244970c004803348aa54079fae3fb48377b1d216b7f/ttimer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d81a37d6b189069aed1fed0ecee3f4696b8c32854f358e0d4f5196f10be3db5a",
          "md5": "e7dfaf444cb2b15f52783fd004648c25",
          "sha256": "ad1918af76c3721a13778eb0ef07bd8c2b361aecb6929e0e5178f170f91e82d3"
        },
        "downloads": -1,
        "filename": "ttimer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e7dfaf444cb2b15f52783fd004648c25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6874,
        "upload_time": "2022-02-23T04:01:15",
        "upload_time_iso_8601": "2022-02-23T04:01:15.334688Z",
        "url": "https://files.pythonhosted.org/packages/d8/1a/37d6b189069aed1fed0ecee3f4696b8c32854f358e0d4f5196f10be3db5a/ttimer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e24db294f1ea65174550e67d49cb37111dd06af0e390cebb8ed0af1694924c5c",
          "md5": "060bb62ecdd581cf96f7ba7e681139b6",
          "sha256": "de02458529a407ea04304ecb232586dedd2f7d894713ba53b9e00a5397cc3587"
        },
        "downloads": -1,
        "filename": "ttimer-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "060bb62ecdd581cf96f7ba7e681139b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8098,
        "upload_time": "2022-03-22T11:54:55",
        "upload_time_iso_8601": "2022-03-22T11:54:55.487027Z",
        "url": "https://files.pythonhosted.org/packages/e2/4d/b294f1ea65174550e67d49cb37111dd06af0e390cebb8ed0af1694924c5c/ttimer-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0395ddf98e1fe3ceb46a6c252c1372e137464623ef6515b5a98161a87d5690b",
          "md5": "461de7194ef9f0ed89af4422cebff101",
          "sha256": "eb2b68279b7b616b513cdf1dde8c9949c8dc7c322b105262133fdff45410adca"
        },
        "downloads": -1,
        "filename": "ttimer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "461de7194ef9f0ed89af4422cebff101",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9584,
        "upload_time": "2022-03-22T11:54:56",
        "upload_time_iso_8601": "2022-03-22T11:54:56.562350Z",
        "url": "https://files.pythonhosted.org/packages/d0/39/5ddf98e1fe3ceb46a6c252c1372e137464623ef6515b5a98161a87d5690b/ttimer-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e24db294f1ea65174550e67d49cb37111dd06af0e390cebb8ed0af1694924c5c",
        "md5": "060bb62ecdd581cf96f7ba7e681139b6",
        "sha256": "de02458529a407ea04304ecb232586dedd2f7d894713ba53b9e00a5397cc3587"
      },
      "downloads": -1,
      "filename": "ttimer-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "060bb62ecdd581cf96f7ba7e681139b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8098,
      "upload_time": "2022-03-22T11:54:55",
      "upload_time_iso_8601": "2022-03-22T11:54:55.487027Z",
      "url": "https://files.pythonhosted.org/packages/e2/4d/b294f1ea65174550e67d49cb37111dd06af0e390cebb8ed0af1694924c5c/ttimer-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0395ddf98e1fe3ceb46a6c252c1372e137464623ef6515b5a98161a87d5690b",
        "md5": "461de7194ef9f0ed89af4422cebff101",
        "sha256": "eb2b68279b7b616b513cdf1dde8c9949c8dc7c322b105262133fdff45410adca"
      },
      "downloads": -1,
      "filename": "ttimer-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "461de7194ef9f0ed89af4422cebff101",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9584,
      "upload_time": "2022-03-22T11:54:56",
      "upload_time_iso_8601": "2022-03-22T11:54:56.562350Z",
      "url": "https://files.pythonhosted.org/packages/d0/39/5ddf98e1fe3ceb46a6c252c1372e137464623ef6515b5a98161a87d5690b/ttimer-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}