{
  "info": {
    "author": "Sai Chandra",
    "author_email": "deepak.kumar.iet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python Package: PyHistopathology\n\nRead our documentation at https://pyhistopathology.readthedocs.io/en/latest/\n\n## Command line tool:\npython3 WSI_PATCH_Extraction.py -args\nMandatory args \n- -i: input svs file path\n- -o: output folder path\n- -f: input folder for path\n    - Note: you should use either -i or -f, cannot use both.\nAdditional args\n- -c: criteria\n    - criteria: Random or None, Default is None\n- -s: patch size\n    - Size of the patch to extract, default is (256,256)\n- -n: number of patches\n    - Only should be given for -c Random. Default value is 2000.\n- -a: input xml\n    - if annotations are provided annotations file path should be given. Otherwise don't use this arg.\n\n# Package Usage:\n## Reading WSI\n**Description**\n- use WSI_Scanning.readWSI() to read an WSI Image\n- Input: WSI path or directory\n- Output: functioning numpy array of WSI Image with dtype int32\n **Function**\n- readWSI(WSI_path, magnification_level, annotation_file, annonated_level)\n     Arguments\n\n     - WSI_path: Directory of WSI\n-    - magnification_level: level of zoom, example (40x,20x,10x,5x). Default magnification is **“20x”** \n             - Note if magnification 40x for max zoom level of 20x image an error will be raised.\n     - annotation_file: Default annotation = None. if annotation are available in xml formats. use annotation = inputxml file path.\n     - annonated_level= if annotation is not giving no need to consider this variable. if annotation is given then mention z-axis of annotations. Default annotatedlevel =0\n     ```\n        ###Reading image example\n        from WSI_Preprocessing.Preprocessing import WSI_Scanning \n        import cv2 \n        img,slide_dim = WSI_Scanning.readWSI(\"example.svs\") \n        cv2.imwrite(\"example.png\",img)\n     ```\n\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1574801775409_example.PNG)\n\n\n\n## Denoising WSI\n\nDescription\n\nuse Denoising.denoising() to remove stains, folds and other background noise in WSI\n-  input: WSI Path or directory \n- Output: functioning numpy array of WSI Image (After denoising) with dtype int32.\n\nFunction\n\ndenoising(inputsvs, magnification, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value)\n Arguments\n - inputsvs: path or location of WSI.\n - magnification: level of zoom, example (40x,20x,10x,5x). Default magnification is **“20x”** \n   - Note if magnification 40x for max zoom level of 20x image an error will be raised.\n - filtering: GuassianBlur, RGBThersholding, None\n   - GuassianBlur: Homogeneity calculations based on image smoothing and Gaussian blur equations. \n          We compute sum of  square differences between two consecutive  Gaussian blurred images as score for homogeneity  \n         - Upper limit: upper threshold of homogeneity score. default value is 9500 with kernel size of 11*11\n         - lower limit: lower threshold of homogeneity score. default value is 1500 with kernel size of 11*11\n         - Patch size: Not significant parameters for GuassianBlur filtering\n   - RGBThersholding: \n         Validated patches based on RGB values of patches\n         - red_value, green-value, blue_values are threshold for RGB\n -  - None:\n          Only removes Background\n - - Note that our default is GuassianBlur technique. GuassianBlur is highly effective and requires more computational power (RAM). RGBThersholding is less effective which needs less computational power \n\n~~~from WSI_Preprocessing.Preprocessing import Denoising \nimport cv2 \n# Here mandatory options are example.svs and magniﬁcation \nimg = Denoising.denoising(\"example.svs\", \"20x\" ) \ncv2.imwrite(\"example.png\",img)\n~~~\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1575319269525_example2.PNG)\n\n# Extracting Patches\n\nDescription\n\nuse Extractingpatches.extractingPatches() to extract patches from WSI.\n- input: WSI Path or directory \n- output: patches from WSI.\n\nFunction:\nextractingPatches(inputsvs, outputpath, magnification, patch_extraction_creatia, number_of_patches, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, reconstructionimagepath)\n\n Arguments\n    - inputsvs, magnification, patch_extraction_creatia, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, arguments is same as denosing module.\n    - patch_extraction_creatia: random, None\n    -      - Default is None.\n     For extracting a fixed number of patches for WSI we can use random.\n    - Default number of patches is 2000\n    - outputpath: folder to store the extracted patches\n    - reconstructionimagepath: we you want to compare the patches with WSI we can mention the reconstructionimagepath.\n     - Default is None\n    - - Note: it only works with patch_extraction_creatia = None.\n   - - Note: For WSI number of patches can exceed 20k.\n```##patch extarction and reconstruction example\nfrom WSI_Preprocessing.Preprocessing import Extarctingpatches\nimport cv2 \nimg = Extarctingpatches.extractingPatches(\"example.svs\",\"temp\" ,\"20x\" ) \ncv2.imwrite(\"exampler.png\",img)\n     # Here mandatory options are example.svs and magnification, and outputpath \nExtractingpatches.extractingPatches(example.svs, outputpath, magnification)\n```\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1575341759963_Example+Image.PNG)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saichandra1/PyHistopathology",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyHistopathology",
    "package_url": "https://pypi.org/project/PyHistopathology/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyHistopathology/",
    "project_urls": {
      "Homepage": "https://github.com/saichandra1/PyHistopathology"
    },
    "release_url": "https://pypi.org/project/PyHistopathology/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A WSI Image processing application",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6734058,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e31b0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7",
          "md5": "48d1e675000d0cd903b49127be653c03",
          "sha256": "0fe3948113a06dfd4f1bfa27b39c08b0457267b4c5aff6b109c078b04811a187"
        },
        "downloads": -1,
        "filename": "PyHistopathology-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48d1e675000d0cd903b49127be653c03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16902,
        "upload_time": "2020-03-02T15:16:47",
        "upload_time_iso_8601": "2020-03-02T15:16:47.412111Z",
        "url": "https://files.pythonhosted.org/packages/e3/1b/0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7/PyHistopathology-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e32b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c",
          "md5": "3eba991d16473c2e1d42e9c306c81cbf",
          "sha256": "2ce8bdda710563853e9be628a555d1be8484380747e64f7dd767acff5aaef5c3"
        },
        "downloads": -1,
        "filename": "PyHistopathology-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3eba991d16473c2e1d42e9c306c81cbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4446,
        "upload_time": "2020-03-02T15:16:49",
        "upload_time_iso_8601": "2020-03-02T15:16:49.489606Z",
        "url": "https://files.pythonhosted.org/packages/2e/32/b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c/PyHistopathology-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e31b0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7",
        "md5": "48d1e675000d0cd903b49127be653c03",
        "sha256": "0fe3948113a06dfd4f1bfa27b39c08b0457267b4c5aff6b109c078b04811a187"
      },
      "downloads": -1,
      "filename": "PyHistopathology-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48d1e675000d0cd903b49127be653c03",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16902,
      "upload_time": "2020-03-02T15:16:47",
      "upload_time_iso_8601": "2020-03-02T15:16:47.412111Z",
      "url": "https://files.pythonhosted.org/packages/e3/1b/0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7/PyHistopathology-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e32b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c",
        "md5": "3eba991d16473c2e1d42e9c306c81cbf",
        "sha256": "2ce8bdda710563853e9be628a555d1be8484380747e64f7dd767acff5aaef5c3"
      },
      "downloads": -1,
      "filename": "PyHistopathology-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3eba991d16473c2e1d42e9c306c81cbf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4446,
      "upload_time": "2020-03-02T15:16:49",
      "upload_time_iso_8601": "2020-03-02T15:16:49.489606Z",
      "url": "https://files.pythonhosted.org/packages/2e/32/b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c/PyHistopathology-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}