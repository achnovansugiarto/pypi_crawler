{
  "info": {
    "author": "Carlos Gil Gonzalez",
    "author_email": "carlosgilglez@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: System :: Monitoring",
      "Topic :: Terminals"
    ],
    "description": "<img align=\"right\" width=\"200\" height=\"100\" src=\"https://raw.githubusercontent.com/Carglglz/upyble/master/uPyblelogo.png\">\n\n# uPyble\n\n[![PyPI version](https://badge.fury.io/py/upyble.svg)](https://badge.fury.io/py/upyble)[![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)\n\n### Command line tool for Bluetooth Low Energy  devices\n\n**uPyble** is intended to be a command line tool [upydev-like](https://github.com/Carglglz/upydev/) to make easier the development, prototyping and testing process of devices based on boards running *MicroPython with **Bluetooth Low Energy** capabilities.\n\n\\*( Any other BLE device should work as well)\n\n⚠️ ***Keep in mind that this project is in ALPHA state, sometimes, some commands may not work/return anything*** ⚠️\n\n### Features:\n\n* Command line wireless communication/control of MicroPython/other devices.\n* Custom commands to automate communication/control\n* Command line autocompletion\n* Terminal BLE SHELL-REPL 🔸🔺\n\n\n\n🔸 (REPL works,  but some SHELL commands are still under development)\n\n🔺 There is a limit in the amount of output it can produce, so long lists or `cat` a big file will freeze the BLE SHELL-REPL and possibly the device, which makes a reset almost inevitable.\n\n------\n\n### Getting Started\n\nFor Terminal BLE SHELL-REPL :\n\nFirst be sure that the **BLE REPL daemon is enabled** and running:\n\n* 1) Put `ble_advertising.py` ,`ble_uart_peripheral.py` and `ble_uart_repl.py` in the device\n\n* 2) Add these lines to `main.py`:\n\n     ```python\n     import ble_uart_repl\n     ble_uart_repl.start()\n     ```\n\n*These scripts are in upybleutils directory. (Originals from [MicroPython repo bluetooth examples](https://github.com/micropython/micropython/tree/master/examples/bluetooth))*\n\n#### Installing :\n\n`$ pip install upyble` or ``$ pip install --upgrade upyble`` to update to the last version available\n\n#### Finding BLE devices:\n\nUse `$ upyble scan` or `$ upyble tscan` for table output format.\n\n```\n$ upyble tscan\nScanning...\nScanning...\nBLE device/s found: 1\n==============================================================================\n        NAME         |                   UUID                   | RSSI (dBm) |\n esp32-30aea4233564  |   9998175F-9A91-4CA2-B5EA-482AFC3453B9   |   -68.0    |\n```\n\n#### Create a configuration file:\n\n\\*upyble will use local working directory configuration unless it does not find any or manually indicated with `-g` option.\n\n- To save configuration in working directory: `$ upyble config -t [UPYDEVICE UUID]`\n\n  e.g:\n\n  `$ upyble config -t 9998175F-9A91-4CA2-B5EA-482AFC3453B9 `\n* To save configuration globally use -g flag: `$ upyble config -t [UPYDEVICE UUID]  -g`\n\n  e.g.\n\n  `$ upyble config -t 9998175F-9A91-4CA2-B5EA-482AFC3453B9 -g `\n\n  \\* Be aware that some devices may generate random UUID every a couple of minutes, so this won't be useful in those cases.\n\n------\n\n### uPyble Usage:\n\nUsage:\n\n`$ upyble [Mode] [options]`\n\nThis means that if the first argument is not a Mode keyword it assumes it is a 'raw' upy command to send to the upy device\n\n##### Help: `$ upyble -h`\n\n------\n\n#### uPyble Mode/Tools:\n\n- **`upyble check`**: to check local machine Bluetooth characterisctics\n- **`upyble config`**: save upy device settings (*see `-t`, `-g`)*, so the target uuid argument wont be required any more\n- **`upyble scan`**: to scan for BLE devices (*see `-n` for max number of scans)*\n- **`upyble tscan`**: to scan for BLE devices, results with table format\n- **`upyble sconf`**: to scan and configure a device that matches a name *`-d [NAME]`*\n- **`upyble get_services`**: to get services of a device, use *`-r`* to read them and *`-mdata`* to see available metadata\n- **`upyble get_stag`**: to get service tag from a service code, use *`-scode`* to indicate the code\n- **`upyble get_scode`**: to get service code from a service tag, use *`-stag`* to indicate the tag\n- **`upyble get_ctag`**: to get characteristic tag from characteristic code, use *`-ccode`* to indicate the code\n- **`upyble get_ccode`**: to get characteristic code from a characteristic tag, use *`-ctag`* to indicate the tag\n- **`upyble get_aptag`**: to get appearance tag from an appearance code, use *`-apcode`* to indicate the code\n- **`upyble get_apcode`**: to get appearance code from an appearance tag, use *`-aptag`* to indicate the tag\n- **`upyble get_mtag`:** to get manufacturer tag from manufacturer code, use *`-mcode`* to indicate the code\n- **`upyble get_mcode`**: to get manufacturer code from a manufacturer tag, use *`-mtag`* to indicate the tag\n- **`upyble cmdata`**: to get characteristic metadata (name, type, uuid, unit, format, notes...). (Not all characteristics are available yet), Use *`-c`* option to indicate characteristic or *`-c all`* to see all that are available. Use *`-xml`* to see the xml file instead.\n- **`upyble cmdata_t`**: get_cmdata in table format.\n- **`upyble dmdata `**:  to get descriptor metadata (Name, uuid, format...). Use *`-desc`* option to indicate a descriptor or  *`-desc all`* to see all that are available.\n- **`upyble follow`**:   to read from a service (see *`-s`,* *` -c`* , *` -tm`*) , e.g : `upyble follow -s \"Battery Service\" `, will read all readable characteristics, or use  *` -c`*  to indicate a specific one/group. e.g:  `upyble follow -s \"Battery Service\" -c \"Battery Level\"`. This mode autodetects format and unit from characteristic metadata\n- **`upyble rfollow`**:   to read from a service (see *`-s`,* *` -c`* , *` -tm`*, *`-u`* , *`fmt`* and  *`-x`*) , e.g : `upyble follow -s \"Battery Service\" `, will read all readable characteristics, or use  *` -c`*  to indicate a specific one/group. e.g:  `upyble follow -s \"Battery Service\" -c \"Battery Level\"`\n- **`upyble see`**: to get specific info about a devices group use `-G` option as `see -G [GROUP NAME]`\n- **`upyble brepl`**: to enter the BLE SHELL-REPL\n- **`upyble ble@[DEVICE]`**: to access brepl in a 'ssh' style command if a device is stored in a global group called `UPYBLE_G` (this needs to be created first doing e.g. `$ upyble make_group -g -f UPYBLE_G -devs foo_device UUID`) The device can be accessed as `$ upyble ble@foo_device` or redirect any command as e.g. `$ upyble get_services -@foo_device`.\n\n____\n\n#### Examples: \n\n##### \tFollow the Battery Level and Temperature (cpu) of an Esp32.\n\n​\tThis needs `ble_batt_temp.py` in the device. (See [upybleutils](https://github.com/Carglglz/upyble/tree/master/upybleutils))\n\n​\tIn the device REPL do:\n\n```python\n>>> import ble_batt_temp\n>>> ble_batt_temp.ble_batt.start_batt_bg()\n```\n\nNow in local Shell/Terminal:\n\n1. Scan and configure device:\n\n   ```bash\n   $ upyble scan\n   Scanning...\n   Scanning...\n   BLE device/s found: 1\n   NAME: esp32-batt-temp, UUID: 9998175F-9A91-4CA2-B5EA-482AFC3453B9, RSSI: -59.0 dBm, Services: Environmental Sensing\n\n   $ upyble config -t 9998175F-9A91-4CA2-B5EA-482AFC3453B9 -g\n   upyble device settings saved globally!\n   ```\n\n\n\n2. Follow services\n\n```bash\n$ upyble follow -s all\nFollowing service: all\n[Service] 180A: Device Information\n\t[Characteristic] 2A01: (read) | Name: Appearance\n\t[Characteristic] 2A29: (read) | Name: Manufacturer Name String\n[Service] 180F: Battery Service\n\t[Characteristic] 2A19: (read,notify) | Name: Battery Level\n\t\t[Descriptor] 2902: (Handle: 19)\n[Service] 181A: Environmental Sensing\n\t[Characteristic] 2A6E: (read,notify) | Name: Temperature\n\t\t[Descriptor] 2902: (Handle: 23)\n15:35:28,813 [upyble@esp32-batt-temp] Battery Service [Battery Level] : 77.0 %\n15:35:28,843 [upyble@esp32-batt-temp] Environmental Sensing [Temperature] : 56.67 °C\n15:35:33,883 [upyble@esp32-batt-temp] Battery Service [Battery Level] : 76.0 %\n15:35:33,913 [upyble@esp32-batt-temp] Environmental Sensing [Temperature] : 56.67 °C\n15:35:38,954 [upyble@esp32-batt-temp] Battery Service [Battery Level] : 76.0 %\n15:35:38,983 [upyble@esp32-batt-temp] Environmental Sensing [Temperature] : 56.67 °C\n15:35:44,024 [upyble@esp32-batt-temp] Battery Service [Battery Level] : 71.0 %\n15:35:44,053 [upyble@esp32-batt-temp] Environmental Sensing [Temperature] : 56.67 °C\n^CDisconnected successfully\n```\n\nSee more usage examples at [EXAMPLES](https://github.com/Carglglz/upyble/blob/master/DOCS/EXAMPLES.md) doc.\n\n___\n\n### ABOUT\n\nTo see more information about upyble dependencies, requirements, tested devices, etc see [ABOUT](https://github.com/Carglglz/upyble/blob/master/DOCS/ABOUT.md) doc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Carglglz/upyble",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "upyble",
    "package_url": "https://pypi.org/project/upyble/",
    "platform": "",
    "project_url": "https://pypi.org/project/upyble/",
    "project_urls": {
      "Homepage": "http://github.com/Carglglz/upyble"
    },
    "release_url": "https://pypi.org/project/upyble/0.0.3/",
    "requires_dist": [
      "argcomplete",
      "prompt-toolkit",
      "requests",
      "bleak",
      "Pygments",
      "netifaces"
    ],
    "requires_python": "",
    "summary": "Command line tool for Bluetooth Low Energy MicroPython devices",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7597714,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d85e7cbbe40347c08633ed15ddd1be417e80a9bd224a294ed53c868a63bbddef",
          "md5": "c17d40c0c82189ed94a0b9982442a542",
          "sha256": "0714c4cd685ae53f36be7381a3655200d134819888ba1b2d46dac0e22b55cd8d"
        },
        "downloads": -1,
        "filename": "upyble-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c17d40c0c82189ed94a0b9982442a542",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42470,
        "upload_time": "2020-05-20T17:54:01",
        "upload_time_iso_8601": "2020-05-20T17:54:01.123080Z",
        "url": "https://files.pythonhosted.org/packages/d8/5e/7cbbe40347c08633ed15ddd1be417e80a9bd224a294ed53c868a63bbddef/upyble-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "629258d55afd64f32273c173773d9df1f072fd2f316b0dab93494305eab78145",
          "md5": "6c9d4c6b2dbce3745755eaa5e06186bb",
          "sha256": "93a1b7d469fc934c26b6bd37e04c5cf54b166a09cdacb09fd98342f351c74e25"
        },
        "downloads": -1,
        "filename": "upyble-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c9d4c6b2dbce3745755eaa5e06186bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42667,
        "upload_time": "2020-05-20T17:54:03",
        "upload_time_iso_8601": "2020-05-20T17:54:03.664027Z",
        "url": "https://files.pythonhosted.org/packages/62/92/58d55afd64f32273c173773d9df1f072fd2f316b0dab93494305eab78145/upyble-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1e9b368f30d6f721d973d385bc2a8e8b9a3d9257e0ce9f82fde39a3f62591b1",
          "md5": "abb267f5c0a83a40e13b30f67f83aa98",
          "sha256": "390c6a580a9829d7c6f6814a29aa4b38aa5054cebddcb799d87e5ab19baffb49"
        },
        "downloads": -1,
        "filename": "upyble-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abb267f5c0a83a40e13b30f67f83aa98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43408,
        "upload_time": "2020-05-23T18:43:01",
        "upload_time_iso_8601": "2020-05-23T18:43:01.238825Z",
        "url": "https://files.pythonhosted.org/packages/a1/e9/b368f30d6f721d973d385bc2a8e8b9a3d9257e0ce9f82fde39a3f62591b1/upyble-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "807d64aa939f02d44ae3f1914c47651e1a158fa25182695f2a2d14d4c3eebeaf",
          "md5": "e95c751a941f7d7ba23535009882d59b",
          "sha256": "2f558a8ff382ed04964061641841eaca878a33a5763c5657cc79d5fe04dd1dcb"
        },
        "downloads": -1,
        "filename": "upyble-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e95c751a941f7d7ba23535009882d59b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43777,
        "upload_time": "2020-05-23T18:43:02",
        "upload_time_iso_8601": "2020-05-23T18:43:02.921072Z",
        "url": "https://files.pythonhosted.org/packages/80/7d/64aa939f02d44ae3f1914c47651e1a158fa25182695f2a2d14d4c3eebeaf/upyble-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ccdd04a38c9879cda9017be270cc73af0f88f77d97b2b1c4e1f9d6fb0294a27",
          "md5": "312e71ad14470bda32fa56f68cc01062",
          "sha256": "08238bdf0f9d95040dee88832d1ee105ae804d556c13eb19769a5f1abc1ab687"
        },
        "downloads": -1,
        "filename": "upyble-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "312e71ad14470bda32fa56f68cc01062",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 725050,
        "upload_time": "2020-06-30T16:10:55",
        "upload_time_iso_8601": "2020-06-30T16:10:55.610513Z",
        "url": "https://files.pythonhosted.org/packages/4c/cd/d04a38c9879cda9017be270cc73af0f88f77d97b2b1c4e1f9d6fb0294a27/upyble-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ea932daf759b8132d2367f2dc42553ee8f59db3f143cb11ec788e28cb3eaf74",
          "md5": "95416ef682565ef62873880286e50469",
          "sha256": "911235437fdd151be5a96fe29ab8c6a7b9531bfdc2cabb66a4285b571d4fa1ee"
        },
        "downloads": -1,
        "filename": "upyble-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "95416ef682565ef62873880286e50469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 570248,
        "upload_time": "2020-06-30T16:10:58",
        "upload_time_iso_8601": "2020-06-30T16:10:58.237585Z",
        "url": "https://files.pythonhosted.org/packages/0e/a9/32daf759b8132d2367f2dc42553ee8f59db3f143cb11ec788e28cb3eaf74/upyble-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ccdd04a38c9879cda9017be270cc73af0f88f77d97b2b1c4e1f9d6fb0294a27",
        "md5": "312e71ad14470bda32fa56f68cc01062",
        "sha256": "08238bdf0f9d95040dee88832d1ee105ae804d556c13eb19769a5f1abc1ab687"
      },
      "downloads": -1,
      "filename": "upyble-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "312e71ad14470bda32fa56f68cc01062",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 725050,
      "upload_time": "2020-06-30T16:10:55",
      "upload_time_iso_8601": "2020-06-30T16:10:55.610513Z",
      "url": "https://files.pythonhosted.org/packages/4c/cd/d04a38c9879cda9017be270cc73af0f88f77d97b2b1c4e1f9d6fb0294a27/upyble-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ea932daf759b8132d2367f2dc42553ee8f59db3f143cb11ec788e28cb3eaf74",
        "md5": "95416ef682565ef62873880286e50469",
        "sha256": "911235437fdd151be5a96fe29ab8c6a7b9531bfdc2cabb66a4285b571d4fa1ee"
      },
      "downloads": -1,
      "filename": "upyble-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "95416ef682565ef62873880286e50469",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 570248,
      "upload_time": "2020-06-30T16:10:58",
      "upload_time_iso_8601": "2020-06-30T16:10:58.237585Z",
      "url": "https://files.pythonhosted.org/packages/0e/a9/32daf759b8132d2367f2dc42553ee8f59db3f143cb11ec788e28cb3eaf74/upyble-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}