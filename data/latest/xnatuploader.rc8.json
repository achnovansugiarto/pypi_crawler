{
  "info": {
    "author": "Mike Lynch",
    "author_email": "m.lynch@sydney.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# xnatuploader\n\nA command-line tool for uploading batches of DICOMS to an XNAT server, building\non the [xnatutils](https://github.com/Australian-Imaging-Service/xnatutils) library.\n\n* [Usage](#usage)\n  - [Initialising the spreadsheet](#initialising-the-spreadsheet)\n  - [Scanning for files](#scanning-for-files)\n  - [Uploading files](#uploading-files)\n  - [Interrupting and restarting](#interrupting-and-restarting)\n* [Finding files](#finding-files)\n  - [Path matching](#path-matching)\n  - [XNAT hierarchy mapping](#xnat-hierarchy-mapping)\n  - [Matching example](#matching-example)\n  - [Checking the spreadsheet](#checking-the-spreadsheet)\n* [Installation](#installation)\n* [Task Scheduler](#scheduling)\n* [Upgrading](#upgrading)\n\n## Usage\n\nxnatuploader uses a 'two pass' approach to uploading files to an XNAT server.\nThe first pass scans a directory for files to upload, builds a list of\nthe files and their associated metadata and saves the list as a spreadsheet.\nThe second pass reads the spreadsheet and uploads the files to XNAT.\n\nOn the second pass, the status of each file upload - whether it was successful,\nand any error messages if the upload failed - is written back to the spreadsheet.\n\nThe second pass can be re-run using the updated spreadsheet - files which have\nbeen successfully uploaded already will be skipped, and files which were not\nuploaded on earlier runs will be re-attempted.\n\nThe details of how xnatuploader gets metadata for each file are configured\nusing the spreadsheet: xnatuploader can write out a pre-initialised spreadsheet\nbefore you run the first pass.\n\n## Windows\n\nFrom the Start menu, select the Anaconda prompt. Once the Anaconda prompt is\nopened, you'll need to activate the conda environment in which xnatuploader\nwas installed:\n\n    conda activate xnatuploader\n\n## Initialisation\n\nxnatuploader is run by typing commands at the Anaconda prompt or terminal:\n\n### Initialising the spreadsheet\n\n`xnatuploader init --spreadsheet spreadsheet.xlsx`\n\nThis initialises a spreadsheet with a single worksheet with default\nconfiguration values. Details of the configuration are in the [section on finding files](#finding-files).\n\n### Scanning for files\n\n`xnatuploader scan --spreadsheet spreadsheet.xlsx --dir data_files`\n\nThis scans the directory `data_files` for DICOMs and builds a list of files\nand metadata, which is stored in the spreadsheet as a new worksheet named\n'Files'.\n\n### Uploading files\n\n`xnatuploader upload --spreadsheet spreadsheet.xlsx --dir data_files --project Test001 --server https://xnat.institution.edu/`\n\nThis command will prompt you for your username and password on the XNAT server,\nread all the files from the spreadsheet and attempt to upload them.\n\nThe files will be uploaded to the project specified, using XNAT's hierarchy:\n\n* Subject (research participant or patient)\n* Session (experiment or visit)\n* Dataset (a scan)\n\nA Session can have multiple datasets, and a dataset will typically have many\nindividual DICOM files.\n\nThe subject, session and dataset are based on the metadata values are extracted\nin the scanning pass. See the [Finding files](#finding-files) section below for more details and\nconfiguration instructions.\n\nThe upload command needs to know both the URL of the XNAT server and a project\nID on the server to which the scans will be added. The project must already\nexist, and you must have the right access level to add scans to it.\n\nYou can also configure the XNAT URL and project ID in the spreadsheet - see\nthe screenshot below for an example. If you specify an XNAT server or project\nID as options on the command line, these values will be used in preference to\nthe values in the spreadsheet.\n\n### Interrupting and restarting\n\nWhen a file can't be uploaded due to a network error, or the integrity check for\nthe upload fails, this error will be recorded in the spreadsheet and a warning\nwill be printed to the command line. If you re-run the upload, the program will\ntry to re-upload those files which didn't successfully upload on earlier runs.\n\nWhile uploading is in progress, two progress bars will be shown on the command\nline. One shows the progress at a high level, with a step for every dataset in\nthe upload (note that a single patient may have more than one dataset). The\nsecond progress bar shows a step for every file in the current dataset.\n\nYou can interrupt the upload by pressing Ctrl-C. If you do this, the program\nwill prompt you to confirm whether you really want to stop. If you confirm,\nthe current progress will be written back to the spreadsheet, and all files\nwhich haven't yet been uploaded will have a status written to indicate that\nthe upload was interrupted. If you re-run the upload with the same spreadsheet,\nit will continue from where it was interrupted.\n\n## Finding files\n\nWhen `xnatupload scan` is run, it scans the specified directory for files to\nupload. The scan looks for files at every level of the subdirectories within\nthe directory, and tries to match values in the filepaths which can be used\nto determine how the files should be uploaded to XNAT.\n\nHere's an example of a directory structure with scans for two patients.\nThe top-level directories have the naming convention SURNAME^GIVENNAME-ID.\nInside each patient's directory is a directory named for the date of their\nvisit in YYYYMMDD format, and inside those is one or more directories for\neach type of scan they recieved on the visit. These directories contain\nthe actual DICOM files for the scan.\n\n```\nDoe^John-0001/20200312/Chest CT/scan0000.dcm\nDoe^John-0001/20200312/Chest CT/scan0001.dcm\nDoe^John-0001/20200312/Chest CT/scan0002.dcm\nRoe^Jane-0342/20190115/Head CT/scan0000.dcm\nRoe^Jane-0342/20190115/Head CT/scan0001.dcm\nRoe^Jane-0342/20190115/Head CT/scan0002.dcm\nRoe^Jane-0342/20190115/Head CT/scan0003.dcm\nRoe^Jane-0342/20200623/Head CT/scan0000.dcm\nRoe^Jane-0342/20200623/Head CT/scan0001.dcm\nRoe^Jane-0342/20200623/Head CT/scan0002.dcm\nRoe^Jane-0342/20200623/Neck CT/scan0000.dcm\nRoe^Jane-0342/20200623/Neck CT/scan0001.dcm\nRoe^Jane-0342/20200623/Neck CT/scan0002.dcm\nRoe^Jane-0342/20200623/Neck CT/scan0003.dcm\n```\n\nTo transform these filepaths into XNAT hierarchy values, we need to tell\nxnatuploader to get the ID from the top-level directory and the scan type from \nthe name of the directories containing the DICOM files (\"Chest CT\", \"Head CT\"\nand so on).\n\nWe also need to get the session date. This could be done using the second\nlevel of directories, but it's safer to get it from the DICOM\nmetadata, which will have a value StudyDate with the date of the scan.\n\nHere is a configuration worksheet which will get the correct XNAT values\nfrom this directory layout.\n\n![A screenshot of a spreadsheet](doc/spreadsheet_config.png?raw=true \"A screenshot of a spreadsheet\")\n\nConfiguration for inferring the XNAT values is in two sections, \"Paths\" and\n\"Mappings\", which correspond to two steps:\n\n1. \"Paths\" tells the script how to matching patterns against the filepath to create values\n2. \"Mappings\" assigns those values, or DICOM metadata values, to the XNAT hierarchy\n\n\n### Path matching\n\nThe \"Paths\" section of the config is one or more lists of patterns to be matched\nagainst paths. Each set of patterns starts with a label - in the example above,\nthe label is \"Nested\". Each cell to the right of the label will be matched\nagainst one or more directory names in each of the filepaths, from left to \nright\n\nIf all matches are successful, that path will be marked as a row\nto be uploaded in the spreadsheet, and the values captured from the path will\nbe assigned to the XNAT hierarchy values according to the \"Mappings\" section\nof the config worksheet.\n\nThe parts of the patterns in curly brackets like `{SubjectName}` are used to\ncapture values. Patterns which are in all caps, such as `{YYYY}` or `{II}`,\nwill only match numbers with the specified number of digits. All other \npatterns, for example `{SubjectName}`, will match any sequence of characters.\n\nThere are two special patterns, `*` and `**`. `*` matches a single directory\nwith any name, and `**` matches one or more directories with any name. `**`\nlets you construct a pattern which will match files which might be nested at\ndifferent levels for different patients.\n\nNote: if one set of patterns isn't flexible enough to match all the ways in\nwhich scans are stored in the directory, you can add extra patterns as new\nrows in the spreadsheet. Each set of patterns needs a unique label.\nSets of patterns will be matched in order from the top, and the first one\nwhich succeeds will be used.\n\n### XNAT hierarchy mapping\n\nThe \"Mapping\" section tells the script how to build the three XNAT hierarchy\nvalues, Subject, Session and Dataset, based on values captured from the paths\nand/or metadata fields read from the DICOM files. In the example, we're setting\nthe Subject to the `ID` value, the Session to the `StudyDate` values extracted\nfrom the DICOMs, and the Dataset to the `Directory` value.\n\n### Matching example\n\nHere's a step-by-step illustration of how the set of patterns in the example\nis matched against a filepath:\n\n```\nDoe^John-0001/20200312/Chest CT/scan0000.dcm\n```\n\n* `{SubjectName}-{ID}` matches `Doe^John-0001`, setting the values `SubjectName` to \"Doe^John\" and `ID` to \"0001\"\n* `**` matches `20200312`, and does not set any values\n* `{Directory}` matches `Chest CT` and sets the value `Directory` to \"Chest CT\"\n* `{filename}.dcm` matches `scan0000.dcm` and sets the value `filename` to \"0001\"\n\nThe XNAT hierarchy values are then built according to the rules in the\n\"Mapping\" section:\n\n* `Subject` is set to the value stored in `ID`: **0001**\n* `Session` is set to the value extracted from the DICOM metadata field `StudyDate`\n* `Dataset` is set to the value stored in `Directory`: **Chest CT**\n\nNote that not every value captured from the path needs to be used in \"Mapping\",\nas `SubjectName` and `filename` are ignored.\n\nThe filename for the purposes of uploading will be automatically generated from\nthe path itself.\n\n### Checking the spreadsheet\n\nBy default, all files which match a pattern are marked as selected for upload\nin the spreadsheet. Before uploading, you can edit the spreadsheet to\ndeselect files or groups of files which shouldn't be uploaded.\n\nBy default, files for which no match succeeds won't be written to the\nspreadsheet. You can run a scan with the `--unmatched` flag, which will \nwrite a row for every file whether or not the match succeeds:\n\n`xnatuploader scan --spreadsheet spreadsheet.xlsx --dir data_files --unmatched`\n\nThis can be useful for figuring out why files aren't matching patterns.\n\n## Installation\n\nIf you're on Windows, you'll need to install [Anaconda](https://docs.anaconda.com/anaconda/install/windows/), which will install the Python programming language and environment manager \non your PC.\n\nOpen the Anaconda prompt via the Start menu.\n\nIf you're on a Mac or Linux, you can also install Conda using the relevant\ninstaller, and just use a terminal for the rest of the installation instructions.\n\n```\nconda create -n xnatuploader\n```\nThis will create a separate Python environment in which we'll install \nxnatuploader. Answer 'Y' when it prompts you to proceed.\n\n```\nconda activate xnatuploader\n```\n\nThis activates the Python environment you've just created\n\n```\npip install xnatuploader\n```\n\nThis will download and install the latest version of xnatuploader. To check that\neverything has worked after the upload and installation has finished, type the\nfollowing:\n\n```\nxnatuploader --help\n```\n\nYou should get a message like the following:\n\n```\nusage: XNAT batch uploader [-h] [--dir DIR] [--spreadsheet SPREADSHEET]\n                           [--server SERVER] [--project PROJECT]\n                           [--loglevel LOGLEVEL] [--debug] [--logdir LOGDIR]\n                           [--test] [--unmatched] [--overwrite]\n                           {init,scan,upload,help}\n\npositional arguments:\n  {init,scan,upload,help}\n                        Operation\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dir DIR             Base directory to scan for files\n  --spreadsheet SPREADSHEET\n                        File list spreadsheet\n  --server SERVER       XNAT server\n  --project PROJECT     XNAT project ID\n  --loglevel LOGLEVEL   Logging level\n  --debug               Debug mode: only attempt to match 10 patterns and\n                        generates a lot of debug messages\n  --logdir LOGDIR       Directory to write logs to\n  --test                Test mode: don't upload, just log what will be\n                        uploaded\n  --unmatched           Whether to include unmatched files in list\n  --overwrite           Whether to overwrite files which have already been\n                        uploaded\n```\n\n## Task scheduler\n\nxnatuploader can be run by the Windows Task Scheduler if it's wrapped in the\nfollowing batch file (replace USER_NAME with your own)\n\n    call C:\\Users\\USER_NAME\\Anaconda3\\Scripts\\activate.bat\n    call conda activate xnatuploader\n    call xnatuploader upload --spreadsheet spreadsheet.xlsx --dir dir\n\nNote that this will only work if the underlying xnat library can authenticate\nusing credentials stored in a _netrc or .netrc file. See\n[the xnatpy documentation](https://xnat.readthedocs.io/en/latest/static/tutorial.html)\nfor instructions on how to set this up.\n\nAlternately, if you run xnatuploader manually and authenticate, it will keep \nan authentication token on your machine for a time period (controlled by the\npolicy of your XNAT server, typically 72 hours). Once you've authenticated\nmanually, a task scheduler job should work until the token expires.\n\n## Upgrading\n\nTo get the latest version of xnatuploader, type the following (at the Anaconda\nprompt or terminal):\n\n```\npip install --upgrade xnatuploader\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SydneyInformaticsHub/xnatuploader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xnatuploader",
    "package_url": "https://pypi.org/project/xnatuploader/",
    "platform": null,
    "project_url": "https://pypi.org/project/xnatuploader/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SydneyInformaticsHub/xnatuploader/issues",
      "Homepage": "https://github.com/SydneyInformaticsHub/xnatuploader"
    },
    "release_url": "https://pypi.org/project/xnatuploader/1.1.0/",
    "requires_dist": [
      "xnatutils",
      "xnat (==0.4.3)",
      "openpyxl (>=3.0.10)",
      "pydicom (>=2.3.0)",
      "tqdm",
      "click",
      "pytest ; extra == 'test'",
      "xnat4tests (>=0.3.2) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "CLI tool for uploading multiple files to XNAT",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17298637,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc3b31a4ba40fff3b8ff7baed4ec356d0298a021401f3daf0204b3172dae458e",
          "md5": "cb093383885e94bac913848f90360a29",
          "sha256": "d639238e0d728cf5dd468e3ac0af6504aec9e14ea6d181f4a7cc75c669973b34"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb093383885e94bac913848f90360a29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12043,
        "upload_time": "2022-07-19T00:07:34",
        "upload_time_iso_8601": "2022-07-19T00:07:34.106342Z",
        "url": "https://files.pythonhosted.org/packages/bc/3b/31a4ba40fff3b8ff7baed4ec356d0298a021401f3daf0204b3172dae458e/xnatuploader-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f712e2b52e8eadf62ed914bf90b695ac9b84becdd498ea410d83e762fc5ac0ff",
          "md5": "cc052cb00074195bb0c087fc8739aaa3",
          "sha256": "011406fb4ef85ed859a26c7c76168ddb972fef4f78010ea42c16f0e7b676bd4b"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cc052cb00074195bb0c087fc8739aaa3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12358,
        "upload_time": "2022-07-19T00:07:35",
        "upload_time_iso_8601": "2022-07-19T00:07:35.550176Z",
        "url": "https://files.pythonhosted.org/packages/f7/12/e2b52e8eadf62ed914bf90b695ac9b84becdd498ea410d83e762fc5ac0ff/xnatuploader-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7e80b5ae950ef7111ee9d8666eaf3946e127634453b081004b52986aefdd93e",
          "md5": "02bf658ea4f9b4a9f170a01ebfa3704f",
          "sha256": "bb4214629d8c8751bd508252fed631697bb340c2d43a636a56e580bf561f7b80"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02bf658ea4f9b4a9f170a01ebfa3704f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16803,
        "upload_time": "2022-08-03T03:42:08",
        "upload_time_iso_8601": "2022-08-03T03:42:08.408204Z",
        "url": "https://files.pythonhosted.org/packages/b7/e8/0b5ae950ef7111ee9d8666eaf3946e127634453b081004b52986aefdd93e/xnatuploader-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9564240c2860a93a750ac511a668c42ae23ec65f3cc77eb10353bd69832e9a71",
          "md5": "b9064670bab0d9a275981647b0906557",
          "sha256": "f0dc780c725c6f860d95b7ea492cd306546ccade80eeb57b4514076a2f728c2a"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b9064670bab0d9a275981647b0906557",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16663,
        "upload_time": "2022-08-03T03:42:09",
        "upload_time_iso_8601": "2022-08-03T03:42:09.966934Z",
        "url": "https://files.pythonhosted.org/packages/95/64/240c2860a93a750ac511a668c42ae23ec65f3cc77eb10353bd69832e9a71/xnatuploader-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede4fb5524427bf230857d5cd0809272a9e14e8e5a2386d04590a53a775a1ae9",
          "md5": "44a79a0bfd714e132a495a5bfb1c7205",
          "sha256": "7137fcb7d2ec98c8f8663380bbcaa5618dedf134d8cd4b020d55a0e5e88c06e7"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44a79a0bfd714e132a495a5bfb1c7205",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18178,
        "upload_time": "2022-09-02T03:48:19",
        "upload_time_iso_8601": "2022-09-02T03:48:19.412123Z",
        "url": "https://files.pythonhosted.org/packages/ed/e4/fb5524427bf230857d5cd0809272a9e14e8e5a2386d04590a53a775a1ae9/xnatuploader-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a669bb50816c4820068a84ddd7d7b06ff5b04c21b6aaad2df24b496db46b0496",
          "md5": "707c50a7ccc93e9f9890d460afafa3f0",
          "sha256": "2484aa504ef794bda32e6731d5a6b5292cc0b4094dbcf324cd502dedc3a8c3e6"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "707c50a7ccc93e9f9890d460afafa3f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17919,
        "upload_time": "2022-09-02T03:48:21",
        "upload_time_iso_8601": "2022-09-02T03:48:21.549044Z",
        "url": "https://files.pythonhosted.org/packages/a6/69/bb50816c4820068a84ddd7d7b06ff5b04c21b6aaad2df24b496db46b0496/xnatuploader-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8e576fd7d8b7233e3a67b7fd2d64554395898a51394360d551aefb4898d779b",
          "md5": "e947a1d4bc593aa8dde3654e86b6618d",
          "sha256": "f7d93ac1791232a75347a6356c68c2087f505058c7f85f971d61af260592a473"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e947a1d4bc593aa8dde3654e86b6618d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18030,
        "upload_time": "2022-11-17T02:52:23",
        "upload_time_iso_8601": "2022-11-17T02:52:23.566671Z",
        "url": "https://files.pythonhosted.org/packages/d8/e5/76fd7d8b7233e3a67b7fd2d64554395898a51394360d551aefb4898d779b/xnatuploader-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "652cc4f80095112ecda401e967bd29506f07c1b53839386695a085fe14412bc1",
          "md5": "e4ab34ee93df4f81a89e62b5bdcb9716",
          "sha256": "610e8516150e60232aed4d487d56bde0e0e92689d149986fbe8ed3bce2a1f350"
        },
        "downloads": -1,
        "filename": "xnatuploader-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e4ab34ee93df4f81a89e62b5bdcb9716",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17827,
        "upload_time": "2022-11-17T02:52:26",
        "upload_time_iso_8601": "2022-11-17T02:52:26.165665Z",
        "url": "https://files.pythonhosted.org/packages/65/2c/c4f80095112ecda401e967bd29506f07c1b53839386695a085fe14412bc1/xnatuploader-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b9ce3829b1d499377dea630883403b48a47f335abbe948b7c1cd0ceed23e9b",
          "md5": "1b3c73e94800735051672cf97e9db3ce",
          "sha256": "4dd0dee95feaf974a9fb84cb83762e43be1def3875ca16fffd74af192947ccad"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b3c73e94800735051672cf97e9db3ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19499,
        "upload_time": "2022-11-24T02:58:56",
        "upload_time_iso_8601": "2022-11-24T02:58:56.453086Z",
        "url": "https://files.pythonhosted.org/packages/85/b9/ce3829b1d499377dea630883403b48a47f335abbe948b7c1cd0ceed23e9b/xnatuploader-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e483575d29109f92210c54974a3f9be4a27910cc256a4bfc5cfb7ea44efac9f5",
          "md5": "a336b28e5720181d31e7ed521a4a5794",
          "sha256": "2552190cf40b0e8b20627d2fc244f972acb022b5069462a8a099fa53bc4ac65c"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a336b28e5720181d31e7ed521a4a5794",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19193,
        "upload_time": "2022-11-24T02:59:00",
        "upload_time_iso_8601": "2022-11-24T02:59:00.852255Z",
        "url": "https://files.pythonhosted.org/packages/e4/83/575d29109f92210c54974a3f9be4a27910cc256a4bfc5cfb7ea44efac9f5/xnatuploader-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f73cbabb62bcf3df5290727de09ffeb5b0eb57afb3288c77c4190e464d906171",
          "md5": "493c2942c0e964848692f68ec8c6cac8",
          "sha256": "4a2fea044fdbd821a1013a6a2c146f6e1040934486db4bc1f096ec572a57b3c3"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "493c2942c0e964848692f68ec8c6cac8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22529,
        "upload_time": "2023-02-16T03:10:11",
        "upload_time_iso_8601": "2023-02-16T03:10:11.942664Z",
        "url": "https://files.pythonhosted.org/packages/f7/3c/babb62bcf3df5290727de09ffeb5b0eb57afb3288c77c4190e464d906171/xnatuploader-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "228014366ca7c0843e52b3bc652a815e437224d5c647ce24bf9587c8189e9365",
          "md5": "6d5cab463e698190c05b5459851edb4d",
          "sha256": "0175e8d5d242be7350a9320684f8952f68378250dae4a3d5b68d70e5643b154a"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6d5cab463e698190c05b5459851edb4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27910,
        "upload_time": "2023-02-16T03:10:16",
        "upload_time_iso_8601": "2023-02-16T03:10:16.486886Z",
        "url": "https://files.pythonhosted.org/packages/22/80/14366ca7c0843e52b3bc652a815e437224d5c647ce24bf9587c8189e9365/xnatuploader-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4ef844858639343d3936abd12b9ab7ef268f3ce9b6d6e83bb02a3c43859c08",
          "md5": "32dfd143cdbc1dcfe6850e557ed81e10",
          "sha256": "ff66d91181da3483ac3fe80eda6b512be1a923bdf9fcf22a43461122b5028ae7"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32dfd143cdbc1dcfe6850e557ed81e10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23083,
        "upload_time": "2023-02-17T03:12:04",
        "upload_time_iso_8601": "2023-02-17T03:12:04.657065Z",
        "url": "https://files.pythonhosted.org/packages/1b/4e/f844858639343d3936abd12b9ab7ef268f3ce9b6d6e83bb02a3c43859c08/xnatuploader-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a95ede3c809c4863f5d155ad10b109953bd7f1219ac9101a12c298f656b34c52",
          "md5": "1f8da67a8fcef0578d893653d3145967",
          "sha256": "b8db8d0bdea075473cc21874a0b5950d0eabf07b2a045c8e26fb969ea2fda04d"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f8da67a8fcef0578d893653d3145967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29101,
        "upload_time": "2023-02-17T03:12:10",
        "upload_time_iso_8601": "2023-02-17T03:12:10.237086Z",
        "url": "https://files.pythonhosted.org/packages/a9/5e/de3c809c4863f5d155ad10b109953bd7f1219ac9101a12c298f656b34c52/xnatuploader-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39ea22aa6e53c7f67d35ef9a648f46ee3751363742b7d58129c7ccef0bee3943",
          "md5": "8c1f732f39fb6b2bacd8f187f3a509fa",
          "sha256": "31fa82cbb936d532af34cd810ffbea37253a19c4a90275bf60e86e7cd48eaaba"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c1f732f39fb6b2bacd8f187f3a509fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28367,
        "upload_time": "2023-03-15T03:11:48",
        "upload_time_iso_8601": "2023-03-15T03:11:48.665158Z",
        "url": "https://files.pythonhosted.org/packages/39/ea/22aa6e53c7f67d35ef9a648f46ee3751363742b7d58129c7ccef0bee3943/xnatuploader-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b13128a6f13d46091f7cef0ef3b4ca5b5a2b6a6d7a2e18ea893654084794b4f0",
          "md5": "04e5a55decfacb8b714df03f66fbfb0d",
          "sha256": "86e6f2a3ac7f9f84333dc32b3f210fedccff19c0c69422a243b2e07b5752d16b"
        },
        "downloads": -1,
        "filename": "xnatuploader-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04e5a55decfacb8b714df03f66fbfb0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29663,
        "upload_time": "2023-03-15T03:11:50",
        "upload_time_iso_8601": "2023-03-15T03:11:50.393654Z",
        "url": "https://files.pythonhosted.org/packages/b1/31/28a6f13d46091f7cef0ef3b4ca5b5a2b6a6d7a2e18ea893654084794b4f0/xnatuploader-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39ea22aa6e53c7f67d35ef9a648f46ee3751363742b7d58129c7ccef0bee3943",
        "md5": "8c1f732f39fb6b2bacd8f187f3a509fa",
        "sha256": "31fa82cbb936d532af34cd810ffbea37253a19c4a90275bf60e86e7cd48eaaba"
      },
      "downloads": -1,
      "filename": "xnatuploader-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c1f732f39fb6b2bacd8f187f3a509fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28367,
      "upload_time": "2023-03-15T03:11:48",
      "upload_time_iso_8601": "2023-03-15T03:11:48.665158Z",
      "url": "https://files.pythonhosted.org/packages/39/ea/22aa6e53c7f67d35ef9a648f46ee3751363742b7d58129c7ccef0bee3943/xnatuploader-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b13128a6f13d46091f7cef0ef3b4ca5b5a2b6a6d7a2e18ea893654084794b4f0",
        "md5": "04e5a55decfacb8b714df03f66fbfb0d",
        "sha256": "86e6f2a3ac7f9f84333dc32b3f210fedccff19c0c69422a243b2e07b5752d16b"
      },
      "downloads": -1,
      "filename": "xnatuploader-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04e5a55decfacb8b714df03f66fbfb0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29663,
      "upload_time": "2023-03-15T03:11:50",
      "upload_time_iso_8601": "2023-03-15T03:11:50.393654Z",
      "url": "https://files.pythonhosted.org/packages/b1/31/28a6f13d46091f7cef0ef3b4ca5b5a2b6a6d7a2e18ea893654084794b4f0/xnatuploader-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}