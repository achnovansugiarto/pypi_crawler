{
  "info": {
    "author": "xpc",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Kcaptcha API文档\n\n---\n\n\nLatest Version: 1.0.3\n\n`pip install kcaptcha==1.0.3`\n\n---\n### 更新\n\n\n#### 2022-04-18:\n\n1. 修复打包时未能正确包含数据文件的问题。\n\n#### 2022-04-17：\n\n1. 已通过pypi发布。可通过`pip install kcaptcha`安装。（但是不想写文档！先忍一下[doge]）\n\n   ```python\n   from kcaptcha.core import SlideKiller\n   \n   \n   slide_killer = SlideKiller()\n   # test slide match mode\n   with open('imgs/slide_match_target_1.jpg', 'rb') as f:\n       test_match_target = f.read()\n   with open('imgs/slide_match_bg_1.jpg', 'rb') as f:\n       test_match_background = f.read()\n   match_result = slide_killer.match(test_match_target, test_match_background, simple_target=True,\n                                     target_threshold=(200, 300),\n                                     method=4,\n                                     background_threshold=(100, 200), debug=True, border=True)\n   ```\n\n   \n\n2. 增加了debug参数，用来显示识别过程中各阶段的图片，方便调整阈值参数。\n\n---\n\n### 一、概述\n\n通过 API 提供字符型验证码识别、滑块验证码的滑动距离识别、点选验证码的点击位置识别服务。\n\nHOST： 192.168.0.155:9898\n\n| 功能                        | URI                       | 备注                         |\n| --------------------------- | ------------------------- | ---------------------------- |\n| 通用字符型验证码识别        | /common/ocr/file          | 通过开源的onnx格式ai模型实现 |\n| 通用点选验证码识别          | /common/det/file          | 通过开源的onnx格式ai模型实现 |\n| 通用滑块验证码识别-匹配模式 | /common/slide-match/file  | 通过cv库实现                 |\n| 通用滑块验证码识别-对比模式 | /common/slide-match/file  | 通过cv库实现                 |\n| 极验文字点选验证码识别      | /geetest/order-click/file | 通过cv库及ai模型实现         |\n\n可以处理的验证码示例如下：\n\n1. 通用字符型验证\n\n   ![image-20220413093452270](https://s2.loli.net/2022/04/13/W5wjzcYBkJATotO.png)\n\n2. 通用点选（不带语序，仅目标识别）\n\n   ![image-20220413093634982](C:\\Users\\Administrator.WINDOWS-JFG3003\\Desktop\\common_click.png)![image-20220413093652372](https://s2.loli.net/2022/04/13/rQAme7yap9fdnsH.png)\n\n3. 通用滑块-匹配模式\n\n   适用于能获取滑块图片（target_img）及带缺口背景图(bg_img)的滑块验证码，返回滑块的位置\n\n   ![image-20220413094037039](https://s2.loli.net/2022/04/13/RI2Ly9xzQ1TnwW3.png)![image-20220413094047235](https://s2.loli.net/2022/04/13/FQfCVJaZhqyMWXU.png)\n\n4. 通用滑块-比较模式\n\n   适用于能获取完整背景图及带缺口背景图的滑块验证码，返回滑动距离\n\n   ![image-20220413094223146](C:\\Users\\Administrator.WINDOWS-JFG3003\\Desktop\\2.png)![image-20220413094212874](C:\\Users\\Administrator.WINDOWS-JFG3003\\Desktop\\2.png)\n   \n5. 极验文字点选验证码识别\n\n   按顺序点选文字验证码，图标形式暂未实现。\n\n   ![image-20220413094510796](C:\\Users\\Administrator.WINDOWS-JFG3003\\Desktop\\geetest_click.png)\n\n---\n\n### 二、通用字符型验证码\n\n#### 1. 请求参数（POST）\n\n| 名称 | 类型   | 必填 | 示例           | 描述                                                         |\n| ---- | ------ | ---- | -------------- | ------------------------------------------------------------ |\n| img  | String | 是   | 图片二进制文件 | 图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可。 |\n\n#### 2. 返回数据\n\n| 名称    | 类型    | 示例   | 描述     |\n| ------- | ------- | ------ | -------- |\n| code    | Integer | 200    | 状态码   |\n| msg     | String  | \"\"     | 状态描述 |\n| results | String  | \"jepv\" | 识别结果 |\n\n#### 3. 请求示例\n\n```python\nimport requests\n\nurl = HOST + '/common/ocr/file'\nimg_file_path = {Your Img Filepath}\nfiles = {\n    'img': ('img', open(img_file_path, 'rb'))\n}\nresponse = requests.post(url, files=files)\n```\n\n\n#### 4. 响应示例\n\n```python\n{\"code\": 200, \"results\": \"jepv\", \"msg\": \"\"}\n```\n\n---\n\n### 三、通用点选型验证码\n\n#### 1. 请求参数（POST）\n\n| 名称 | 类型   | 必填 | 示例           | 描述                                                         |\n| ---- | ------ | ---- | -------------- | ------------------------------------------------------------ |\n| img  | String | 是   | 图片二进制文件 | 图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可。 |\n\n#### 2. 返回数据\n\n| 名称    | 类型    | 示例                                      | 描述                                                         |\n| ------- | ------- | ----------------------------------------- | ------------------------------------------------------------ |\n| code    | Integer | 200                                       | 状态码                                                       |\n| msg     | String  | \"\"                                        | 状态描述                                                     |\n| results | Array   | [[131, 53, 182, 103], [214, 52, 258, 96]] | 识别结果：列表每项为一个四元组，该四元组表示一个区域，分别为**左上x坐标、左上y坐标、右下x坐标、右下y坐标**。 |\n\n#### 3. 请求示例\n\n```python\nimport requests\n\nurl = HOST + '/common/det/file'\nimg_file_path = {Your Img Filepath}\nfiles = {\n    'img': ('img', open(img_file_path, 'rb'))\n}\nresponse = requests.post(url, files=files)\n```\n\n#### 4. 响应示例\n\n```python\n{\"code\": 200, \"results\": [[131, 53, 182, 103], [214, 52, 258, 96], [299, 105, 350, 154], [292, 17, 341, 65]], \"msg\": \"\"}\n```\n\n![image-20220413110345937](https://s2.loli.net/2022/04/13/4UB39GMf2qjgAlX.png)\n\n---\n\n### 四、通用滑块验证码识别-匹配模式\n\n#### 1. 请求参数（POST）\n\n| 名称                     | 类型    | 必填 | 示例           | 描述                                                         |\n| :----------------------- | ------- | ---- | -------------- | ------------------------------------------------------------ |\n| target_img               | String  | 是   | 图片二进制文件 | 滑块图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可 |\n| bg_img                   | String  | 是   | 图片二进制文件 | 带缺口背景图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可 |\n| method                   | Integer | 否   | 4              | 进行滑块匹配的算法模式，可选值为0~4，具体算法含义可参考cv2的文档 |\n| target_threshold_min     | Integer | 否   | 100            | 滑块图二值化处理的最小阈值                                   |\n| target_threshold_max     | Integer | 否   | 300            | 滑块图二值化处理的最大阈值                                   |\n| background_threshold_min | Integer | 否   | 100            | 背景图二值化处理的最小阈值                                   |\n| background_threshold_max | Integer | 否   | 130            | 背景图二值化处理的最大阈值                                   |\n| border                   | Bool    | 否   | True           | 对滑块图片处理时是否添加边框                                 |\n\n**注**：因各类滑块验证码存在差异，当发现识别准确率不高时，可尝试调整 method、target_threshold_min、target_threshold_max、background_threshold_min、background_threshold_max、border 参数\n\n#### 2. 返回数据\n\n| 名称    | 类型    | 示例                                            | 描述                                                         |\n| ------- | ------- | ----------------------------------------------- | ------------------------------------------------------------ |\n| code    | Integer | 200                                             | 状态码                                                       |\n| msg     | String  | \"\"                                              | 状态描述                                                     |\n| results | Object  | {\"target_y\": 0, \"target\": [191, 116, 259, 184]} | 识别结果：target_y 为Y轴方向上移动的距离；target 为缺口位置，以四元组表示，分别为**左上x坐标、左上y坐标、右下x坐标、右下y坐标**。 |\n\n#### 3. 请求示例\n\n```python\nimport requests\n\nurl = HOST + '/common/slide-match/file'\ntarget_img_file_path = {Your Img Filepath}\nbg_img_file_path = {Your Img Filepath}\ndata = {\n    'method': 4,\n    'target_threshold_min': 100,\n    'target_threshold_max': 300,\n    'background_threshold_min': 100,\n    'background_threshold_max': 130,\n    'border': True\n}\nfiles = {\n    'target_img': ('img', open(target_img_file_path, 'rb')),\n    'bg_img': ('img', open(bg_img_file_path, 'rb')),\n}\nresponse = requests.post(url, files=files, data=data)\n```\n\n#### 4. 响应示例\n\n```python\n{\"code\": 200, \"results\": {\"target_y\": 0, \"target\": [191, 116, 259, 184]}, \"msg\": \"\"}\n```\n\n![image-20220413110455633](https://s2.loli.net/2022/04/13/3mz8NIXwWKUtlQF.png)\n\n---\n\n### 五、通用滑块验证码识别-对比模式\n\n#### 1. 请求参数（POST）\n\n| 名称        | 类型   | 必填 | 示例           | 描述                                                         |\n| :---------- | ------ | ---- | -------------- | ------------------------------------------------------------ |\n| full_bg_img | String | 是   | 图片二进制文件 | 完整背景图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可 |\n| bg_img      | String | 是   | 图片二进制文件 | 带缺口背景图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可 |\n\n#### 2. 返回数据\n\n| 名称    | 类型    | 示例                  | 描述                                                         |\n| ------- | ------- | --------------------- | ------------------------------------------------------------ |\n| code    | Integer | 200                   | 状态码                                                       |\n| msg     | String  | \"\"                    | 状态描述                                                     |\n| results | Object  | {'target': [124, 79]} | 识别结果：target 为缺口位置，以二元组表示，分别为缺口左侧距做边框的距离、纵坐标。 |\n\n#### 3. 请求示例\n\n```python\nimport requests\n\nurl = HOST + '/common/slide-compare/file'\nfull_bg_img_path = {Your Img Filepath}\nbg_img_path = {Your Img Filepath}\nfiles = {\n    'full_bg_img': ('img', open(full_bg_img, 'rb')),\n    'bg_img': ('img', open(bg_img_path, 'rb')),\n}\nresponse = requests.post(url, files=files)\n```\n\n#### 4. 响应示例\n\n```python\n{\"code\": 200, \"results\": {'target': [124, 79]}, \"msg\": \"\"}\n```\n\n\n\n![image-20220413105523331](https://s2.loli.net/2022/04/13/EjN2H4k7bVpd3IA.png)\n\n---\n\n### 六、极验文字点选验证码识别\n\n#### 1. 请求参数（POST）\n\n| 名称 | 类型   | 必填 | 示例           | 描述                                                         |\n| ---- | ------ | ---- | -------------- | ------------------------------------------------------------ |\n| img  | String | 是   | 图片二进制文件 | 图片的二进制文件，调用时把图片二进制文件放入到HTTP body 中上传即可。 |\n\n#### 2. 返回数据\n\n| 名称    | 类型    | 示例                                                         | 描述                                                         |\n| ------- | ------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| code    | Integer | 200                                                          | 状态码                                                       |\n| msg     | String  | \"\"                                                           | 状态描述                                                     |\n| results | Array   | [{\"char\": \"松\", \"target\": [149, 125, 207, 182]}, {\"char\": \"油\", \"target\": [9, 242, 67, 300]}, {\"char\": \"醇\", \"target\": [94, 25, 156, 87]}] | 识别结果：按**顺序**返回识别结果，每项中char为识别的字，target为一个四元组，分别为**左上x坐标、左上y坐标、右下x坐标、右下y坐标**。 |\n\n#### 3. 请求示例\n\n```python\nimport requests\n\nurl = HOST + '/geetest/order-click/file'\nimg_file_path = {Your Img Filepath}\nfiles = {\n    'img': ('img', open(img_file_path, 'rb'))\n}\nresponse = requests.post(url, files=files)\n```\n\n#### 4. 响应示例\n\n```python\n{\"code\": 200, \"results\": [{\"char\": \"松\", \"target\": [149, 125, 207, 182]}, {\"char\": \"油\", \"target\": [9, 242, 67, 300]}, {\"char\": \"醇\", \"target\": [94, 25, 156, 87]}], \"msg\": \"\"}\n```\n\n![image-20220413111306739](https://s2.loli.net/2022/04/13/AkUcnFvabl93T8u.png)\n\n---\n\n## Todo:\n\n- [x] 通过pypi发布，以提供更便捷的使用方式\n\n- [x] 增加可选的debug功能：调用时可返回中间的过程图，方便调整阈值等参数提高准确率\n\n- [ ] 极验图标点选验证\n\n- [ ] 极验语序点选验证码\n\n- [ ] 计算式验证码处理\n\n  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kcaptcha",
    "package_url": "https://pypi.org/project/kcaptcha/",
    "platform": null,
    "project_url": "https://pypi.org/project/kcaptcha/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kcaptcha/1.0.3/",
    "requires_dist": [
      "numpy",
      "onnxruntime",
      "Pillow",
      "opencv-python",
      "loguru"
    ],
    "requires_python": "<3.10",
    "summary": "kill captcha",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13544854,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32947f53d4bfaae5f3e8820f1e392c37e78c6096c591d954abed2e995b4df837",
          "md5": "9c1e2195c224400b43230ba1d538104e",
          "sha256": "4f7e0523a11b1d21aed90baad1fb467a677d72a58eb11d022fb3843a03b968ae"
        },
        "downloads": -1,
        "filename": "kcaptcha-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c1e2195c224400b43230ba1d538104e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.10",
        "size": 14186,
        "upload_time": "2022-04-16T07:00:33",
        "upload_time_iso_8601": "2022-04-16T07:00:33.084032Z",
        "url": "https://files.pythonhosted.org/packages/32/94/7f53d4bfaae5f3e8820f1e392c37e78c6096c591d954abed2e995b4df837/kcaptcha-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4176f45136b76f58f5bb768ca03cb62b376988b71368770a746ff7c96bf5fe",
          "md5": "76cfb5b2cb130388b3978504efb08dda",
          "sha256": "60ce58e3db151ace592a111cc61eea2dad31ff0af740ba3dab65901805da665a"
        },
        "downloads": -1,
        "filename": "kcaptcha-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "76cfb5b2cb130388b3978504efb08dda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.10",
        "size": 14390,
        "upload_time": "2022-04-16T07:00:34",
        "upload_time_iso_8601": "2022-04-16T07:00:34.533652Z",
        "url": "https://files.pythonhosted.org/packages/5e/41/76f45136b76f58f5bb768ca03cb62b376988b71368770a746ff7c96bf5fe/kcaptcha-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ac8e97a15bddf7930511ec203b10288eb4f96be17b7b47102cda2229b77c14",
          "md5": "d0a5417738594ff9fe2ce21b6fd9d30f",
          "sha256": "4021ed48a6be6870e3e66903a069c4bcb35cd9b69fc27965643c2ec3eb18339e"
        },
        "downloads": -1,
        "filename": "kcaptcha-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0a5417738594ff9fe2ce21b6fd9d30f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.10",
        "size": 75865680,
        "upload_time": "2022-04-18T12:22:39",
        "upload_time_iso_8601": "2022-04-18T12:22:39.244601Z",
        "url": "https://files.pythonhosted.org/packages/13/ac/8e97a15bddf7930511ec203b10288eb4f96be17b7b47102cda2229b77c14/kcaptcha-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f7b191f5c7e51cfaebbff2cd12920a880b92e54c51d97e5ad1fb087399d395d",
          "md5": "a0f54722a3a5475ccc296fca8aadd937",
          "sha256": "597f1d2b15c5db1ea8f41253dd35212745f1c6b80461e64725095ec7fd39bcd8"
        },
        "downloads": -1,
        "filename": "kcaptcha-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a0f54722a3a5475ccc296fca8aadd937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.10",
        "size": 15097,
        "upload_time": "2022-04-18T12:22:42",
        "upload_time_iso_8601": "2022-04-18T12:22:42.587528Z",
        "url": "https://files.pythonhosted.org/packages/6f/7b/191f5c7e51cfaebbff2cd12920a880b92e54c51d97e5ad1fb087399d395d/kcaptcha-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13ac8e97a15bddf7930511ec203b10288eb4f96be17b7b47102cda2229b77c14",
        "md5": "d0a5417738594ff9fe2ce21b6fd9d30f",
        "sha256": "4021ed48a6be6870e3e66903a069c4bcb35cd9b69fc27965643c2ec3eb18339e"
      },
      "downloads": -1,
      "filename": "kcaptcha-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0a5417738594ff9fe2ce21b6fd9d30f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.10",
      "size": 75865680,
      "upload_time": "2022-04-18T12:22:39",
      "upload_time_iso_8601": "2022-04-18T12:22:39.244601Z",
      "url": "https://files.pythonhosted.org/packages/13/ac/8e97a15bddf7930511ec203b10288eb4f96be17b7b47102cda2229b77c14/kcaptcha-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f7b191f5c7e51cfaebbff2cd12920a880b92e54c51d97e5ad1fb087399d395d",
        "md5": "a0f54722a3a5475ccc296fca8aadd937",
        "sha256": "597f1d2b15c5db1ea8f41253dd35212745f1c6b80461e64725095ec7fd39bcd8"
      },
      "downloads": -1,
      "filename": "kcaptcha-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a0f54722a3a5475ccc296fca8aadd937",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.10",
      "size": 15097,
      "upload_time": "2022-04-18T12:22:42",
      "upload_time_iso_8601": "2022-04-18T12:22:42.587528Z",
      "url": "https://files.pythonhosted.org/packages/6f/7b/191f5c7e51cfaebbff2cd12920a880b92e54c51d97e5ad1fb087399d395d/kcaptcha-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}