{
  "info": {
    "author": "Dean Muir",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# pyLEVIS\n\n<<<<<<< HEAD\n!!! THIS README AND PACKAGE IS STILL INCOMPLETE !!!\n\nPython implementation of the VENUS-LEVIS MATLAB routines. Most of the routines have the same names so the functions should be familiar.\n\nYou should be in the direction in which your runs are located to read them in, for instance `path/to/levis/runs`.\n=======\nPython implementation of the VENUS-LEVIS matlab routines.\n>>>>>>> setup\n\n\n# Installation\n\n<<<<<<< HEAD\n# Examples\n\n## Example: Reading in a simulation and plotting\n\n=======\nCan be download from PyPI by\n>>>>>>> setup\n```py\n    pip3 install pylevis\n```\n\n<<<<<<< HEAD\nReading the simulation is similar to the old scripts, except we no longer use `Mercury` to read data in, also that reading in the simulation will still work if we append \"prob\" to the name, or we can choose to omit it:\n```py\n    # Read in some simulation\n    sim = pylevis.simulation(\"probSPEC.0\")\n    # which is equivalent to\n    sim = pylevis.simulation(\"SPEC.0\")\n```\n_A warning that if you have two runs, one called \"probSPEC\" and another called \"SPEC\", this may cause issues reading them in._\n\nRetrieving the particles data is the same as with the matlab routines:\n```py\n    sim.GetParticle()\n```\nalthough we can now also choose to read in only certain particles (indexed from 1, since that's how the file naming convention is):\n```py\n    sim.GetParticle(parts=[1,5,6])\n```\nnote that to access the particles the indexing starts from 0 as per python, so `sim.sp[0]` is particle 1.\n\n\nPlotting the energy/momentum conservation is also the same as with the MATLAB routines:\n```\n    sim.plot_spconservation()\n```\nNote: If a particle number does not exist in `sim.sp` it will be skipped and the user will be warned that some were not plotted, rather than returning an error like in MATLAB.\n\n\n## Example: Creating a new simulation (_experimental_)\n\nThis is experimental at the moment, but a new simulation can be initialised by calling:\n```py\n    import pylevis\n    f = pylevis.new_simulation('SimulationName',nparts,eqfile=\"path/to/equilibrium\",eqtype=\"spec\",exedir=\"path/to/mercuryandpostprocessing.x\",machine=\"local\")\n```\nThe equilibrium type can be changed by specifying `eqtype=\"\"` (default and only supported at the moment is `\"spec\"`), the machine you are running the simulation on should be set with `machine=`,if this is your own computer, it should be `\"local\"` (more info below). By default, `new_simulation` will set up default simulation settings in `new_simulation.data`, you can check the current config with,\n```py\n    f.data.properties()\n```\nAll properties are stored in dictionaries, for instance if we wanted to change the simulation duration we would set `f.data[\"tfin\"]=1e-5` (_do not change `f.data[\"nparts\"]` as this isn't actually used except to generate the data file and will be overwritten upon write_).\nA distribution (only uniformly sampled at the moment) of particles with `f.nparts` number of particles and and by specifying the range or value of input values can be generated, for instance the following:\n```py\n    f.generate_particles([0.1,1.9],0,0,1,[5e2,2e3],1,1,1)\n```\nwill generate particles, with $s\\in[0.1,1.9]$ and $E\\in[5e2,2e3]$ randomly generated, and all other values set as given. The required simulation files can then all be created at the location set by `f.simdir` by calling,\n```py\n    f.create_simulation()\n```\nIf the location already exists you will be prompted to provide the optional input `overwrite=True`, this will delete existing files and remake them. Finally, we can run the simulation from the python tools as well,\n```py\n    f.run_simulation()\n```\nHow the simulation is called depends on the value of `f.machine=\"\"` (default is `\"local\"`) (your local machine).\n\n\n### Config\n\n#### Current machine configs\n- local (calls `./mercury.x < data`)\n=======\n# Usage\n\nYou can load the package the usual way (for python packages) by running\n```py\n    import pylevis\n```\nExamples for running the code can be found in ./docs on the github page (see link below).\n\n\n# Developer(s)\n\n- Dean Muir\n>>>>>>> setup\n\n\n# Github\n\n<<<<<<< HEAD\n\n---\n# Progress\n\n## TO DO\n\n\n| Function           | Purpose                                                                                 |\n| ------------------ | --------------------------------------------------------------------------------------- |\n| Get_Diffusivity    |                                                                                         |\n| DecryptEquilibrium | Calls UnfoldEquilibrium?                                                                |\n| UnfoldEquilibrium  | Reads in equilibrium? `Equilibrium reconstruction interface for many equilibrium codes` |\n| GetParScenic       | Reads in `scenic.in` file                                                               |\n| GetBG              | Gets background profiles                                                                |\n| GetLostParticles   | What a poorly written file                                                              |\n| Get_Moments        | Gets moments(?) and trapped(?) information                                              |\n|                    |                                                                                         |\n\n### Incomplete\n\n| Function                     | Subfunctions             |\n| ---------------------------- | ------------------------ |\n| GetPar                       | `Get_Diffusivity_Params` |\n| Get_Dist -> Get_ParticleDist |                          |\n\n\n\n\n## Completed\n\n\n| Original            | New                    |\n|:------------------- |:---------------------- |\n| Get_Particle        |                        |\n\n\n\n=======\nThe source code can be found at https://github.com/Spiffmeister/pyLEVIS\n>>>>>>> setup",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Spiffmeister/pyLEVIS",
    "keywords": "",
    "license": "GNU 3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylevis",
    "package_url": "https://pypi.org/project/pylevis/",
    "platform": null,
    "project_url": "https://pypi.org/project/pylevis/",
    "project_urls": {
      "Homepage": "https://github.com/Spiffmeister/pyLEVIS"
    },
    "release_url": "https://pypi.org/project/pylevis/0.216/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python utilities/interface for VENUS-LEVIS fast particle orbit code",
    "version": "0.216",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14274277,
  "releases": {
    "0.215": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b655be4fb5cdc2937c330eec554f88c85c5ae11100750d4a006df4d774cd77e",
          "md5": "9f3e9c447a6a0f251a53e5ac7f8ddac7",
          "sha256": "2d783765c3554e617f35987d1908acc4527b8d3862c2f3d25d11b970883616b2"
        },
        "downloads": -1,
        "filename": "pylevis-0.215.tar.gz",
        "has_sig": false,
        "md5_digest": "9f3e9c447a6a0f251a53e5ac7f8ddac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33771,
        "upload_time": "2022-06-09T13:10:42",
        "upload_time_iso_8601": "2022-06-09T13:10:42.555956Z",
        "url": "https://files.pythonhosted.org/packages/7b/65/5be4fb5cdc2937c330eec554f88c85c5ae11100750d4a006df4d774cd77e/pylevis-0.215.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.216": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd53b27cec0fcc784410d6c7b9a294d64f433f6384a700b1910f8ac43abb356e",
          "md5": "82fc9f1454db888834d5bba4ea647f3e",
          "sha256": "7460a05ed17e8ba90bb7246d7e7fc4b6fba831fa414c8a69f78bec67fbf3da02"
        },
        "downloads": -1,
        "filename": "pylevis-0.216.tar.gz",
        "has_sig": false,
        "md5_digest": "82fc9f1454db888834d5bba4ea647f3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38600,
        "upload_time": "2022-06-28T15:05:21",
        "upload_time_iso_8601": "2022-06-28T15:05:21.264921Z",
        "url": "https://files.pythonhosted.org/packages/cd/53/b27cec0fcc784410d6c7b9a294d64f433f6384a700b1910f8ac43abb356e/pylevis-0.216.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd53b27cec0fcc784410d6c7b9a294d64f433f6384a700b1910f8ac43abb356e",
        "md5": "82fc9f1454db888834d5bba4ea647f3e",
        "sha256": "7460a05ed17e8ba90bb7246d7e7fc4b6fba831fa414c8a69f78bec67fbf3da02"
      },
      "downloads": -1,
      "filename": "pylevis-0.216.tar.gz",
      "has_sig": false,
      "md5_digest": "82fc9f1454db888834d5bba4ea647f3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 38600,
      "upload_time": "2022-06-28T15:05:21",
      "upload_time_iso_8601": "2022-06-28T15:05:21.264921Z",
      "url": "https://files.pythonhosted.org/packages/cd/53/b27cec0fcc784410d6c7b9a294d64f433f6384a700b1910f8ac43abb356e/pylevis-0.216.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}