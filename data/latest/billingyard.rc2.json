{
  "info": {
    "author": "Martin Vondrák",
    "author_email": "martinvondrak@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Czech",
      "Programming Language :: Python :: 3",
      "Topic :: Office/Business :: Financial :: Accounting"
    ],
    "description": "# Billing Yard\n\nBilling Yard is an open source CLI tool written in Python 3.9 for generating invoices from [JSON](https://www.json.org)\nfor business entities in the Czech republic. It supports invoices for both VAT payers and non VAT payers.\n\nIf you like this software, please [buy me a coffee](https://www.buymeacoffee.com/martinvondrak).\n\n## Installation\n\nFirst, please note that the software has [WeasyPrint](https://weasyprint.org)\nas a dependency and WeasyPrint needs some external third party libraries for correct functioning. The way to install\nthese libraries will differ based on your operating system. So first you need to install these dependencies according to\nthe manual below, then you can install Billing Yard itself.\n\nThe installation manual below expects you to know and understand how to work with [pip](https://pip.pypa.io)\nand [Virtual Environment](https://docs.python.org/3/tutorial/venv.html).\n\n### Linux\n\nBelow, you can find how to install external third party libraries on different Linux distributions.\n\n#### Debian / Ubuntu\n\nDebian 10 Buster or newer / Ubuntu 18.04 Bionic Beaver or newer\n\n```shell\nsudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info\n```\n\n#### Fedora\n\n```shell\nsudo yum install redhat-rpm-config python-devel python-pip python-setuptools python-wheel python-cffi libffi-devel cairo pango gdk-pixbuf2\n```\n\n#### Archlinux\n\n```shell\nsudo pacman -S python-pip python-setuptools python-wheel cairo pango gdk-pixbuf2 libffi pkg-config\n```\n\n#### Gentoo\n\n```shell\nemerge pip setuptools wheel cairo pango gdk-pixbuf cffi\n```\n\n#### Alpine\n\nAlpine Linux 3.6 or newer\n\n```shell\napk --update --upgrade add gcc musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf-dev\n```\n\n### macOS\n\nInstallation on macOS is recommended via [Homebrew](https://brew.sh).\n\n```shell\nbrew install python3 cairo pango gdk-pixbuf libffi\n```\n\n### Windows and further support\n\nFor installation on Windows or further support, please see the\nofficial [WeasyPrint installation guide](https://weasyprint.readthedocs.io/en/latest/install.html).\n\n### Installing Billing Yard\n\nFirst you need to decide whether you want to use Virtual Environment or install Billing Yard globally. But note that\ninstalling in Virtual Environment is always preferred way. Then just make sure you are using Python 3.9 or newer and run\nfollowing command, and you are done.\n\n```shell\npip install billingyard\n```\n\n## Basic usage\n\nFirst step is to create configuration and data source files for generating an invoice. All configuration and data\nsources for an invoice are stored in JSON files. There are three schemas of JSON files, one for business entity (sender,\nreceiver), one for an invoice without VAT and one for an invoice with VAT. Then you can generate the invoice itself.\n\n### Business entity\n\nWe create two business entities, sender (entity which issues the invoice) and receiver (entity which pays the invoice).\n\n```json\n{\n  \"company\": \"Company s.r.o.\",\n  \"street\": \"Ulice 38\",\n  \"city\": \"Praha\",\n  \"zip_code\": \"100 00\",\n  \"country\": \"Česká republika\",\n  \"company_id\": \"00011000\",\n  \"vat_id\": \"CZ00011000\"\n}\n```\n\n* **company** - the business name of the business entity\n* **street** - the street in the address of the business entity\n* **city** - the city in the address of the business entity\n* **zip_code** - the zip code in the address of the business entity\n* **country** - the country in the address of the business entity\n* **company** - the identifier given by Czech authority of the business entity\n* **street** - the identifier for VAT purpose of the business entity\n    * optional if business entity is not a VAT payer\n\n### Invoice for a non VAT payer\n\nBelow you can find the self explaining example of a non VAT payer invoice with further description.\n\n```json\n{\n  \"invoice_number\": \"2021001\",\n  \"issue_date\": \"01. 01. 2021\",\n  \"due_date\": \"31. 01. 2021\",\n  \"currency\": \"Kč\",\n  \"bank\": \"Bank a.s.\",\n  \"bank_account\": \"1234567890/1234\",\n  \"payment_method\": \"bank transfer\",\n  \"register_info\": \"Fyzická osoba zapsaná v živnostenském rejstříku.\",\n  \"invoice_lines\": [\n    {\n      \"description\": \"software development\",\n      \"unit\": \"hr\",\n      \"quantity\": 20,\n      \"unit_price\": 1500\n    }\n  ]\n}\n```\n\n* **invoice_number** - a unique identifier of the invoice\n    * completely up to you, but keep in mind local policies from governmane\n* **issue_date** - the date of issue of the invoice\n    * optional, if not set current date is used\n* **due_date** - the last day, when the invoice must be paid\n* **currency** - the currency in which is the invoice issued\n* **bank** - the bank of the sender business entity\n* **bank_account** - the bank account number of the sender business entity\n* **payment_method** - the agreed instrument to pay the invoice\n    * e.g. bank transfer, cash, credit card\n    * this text is directly rendered in the invoice\n* **register_info** - the info about record in government registers of the sender business entity\n    * the typical examples in Czech are \"Fyzická osoba zapsaná v živnostenském rejstříku.\" or \"Společnost je zapsána v\n      obchodním rejstříku vedeném u Městského soudu v Praze, oddílu C, vložce 2396.\"\n* **invoice_lines** - the list of items that are invoiced\n\nEach invoice line consists of following properties.\n\n* **description** - the name or more exhaustive description of the invoiced item\n* **unit** - the unit which we can use to count the invoiced item\n    * e.g. hour, piece, meter, square meter etc\n* **quantity** - the amount of invoiced items in previously specified unit\n* **unit_price** - the price of the invoiced item for one unit\n\nAll dates have `DD. MM. YYYY` format.\n\n### Invoice for a VAT payer\n\nBelow you can find the self explaining example of a VAT payer invoice with further description.\n\n```json\n{\n  \"invoice_number\": \"2021001\",\n  \"issue_date\": \"01. 01. 2021\",\n  \"supply_date\": \"01. 01. 2021\",\n  \"due_date\": \"31. 01. 2021\",\n  \"currency\": \"Kč\",\n  \"bank\": \"Bank a.s.\",\n  \"bank_account\": \"1234567890/1234\",\n  \"payment_method\": \"bank transfer\",\n  \"register_info\": \"Fyzická osoba zapsaná v živnostenském rejstříku.\",\n  \"invoice_lines\": [\n    {\n      \"description\": \"software development\",\n      \"unit\": \"hr\",\n      \"quantity\": 20,\n      \"unit_price\": 1500,\n      \"vat_rate\": 0.21\n    }\n  ]\n}\n```\n\n* **invoice_number** - a unique identifier of the invoice\n    * completely up to you, but keep in mind local policies from governmane\n* **issue_date** - the date of issue of the invoice\n    * optional, if not set current date is used\n* **supply_date** - the date of taxable supply\n    * optional, if not set current date is used\n* **due_date** - the last day, when the invoice must be paid\n* **currency** - the currency in which is the invoice issued\n* **bank** - the bank of the sender business entity\n* **bank_account** - the bank account number of the sender business entity\n* **payment_method** - the agreed instrument to pay the invoice\n    * e.g. bank transfer, cash, credit card\n    * this text is directly rendered in the invoice\n* **register_info** - the info about record in government registers of the sender business entity\n    * the typical examples in Czech are \"Fyzická osoba zapsaná v živnostenském rejstříku.\" or \"Společnost je zapsána v\n      obchodním rejstříku vedeném u Městského soudu v Praze, oddílu C, vložce 2396.\"\n* **invoice_lines** - the list of items that are invoiced\n\nEach invoice line consists of following properties.\n\n* **description** - the name or more exhaustive description of the invoiced item\n* **unit** - the unit which we can use to count the invoiced item\n    * e.g. hour, piece, meter, square meter etc\n* **quantity** - the amount of invoiced items in previously specified unit\n* **unit_price** - the price of the invoiced item for one unit without VAT\n* **vat_rate** - the rate of VAT for this invoiced item\n\nAll dates have `DD. MM. YYYY` format.\n\n### Generating an invoice\n\nIf you installed Billing Yard using Virtual Environment, just activate this environment and run one of the following\ncommands, depending on whether you are a VAT payer or not. If you installed Billing Yard globally, just run one of the\ncommands.\n\n```shell\nbillingyard -s sender.json issue-invoice -i invoice.json -r receiver.json\n```\n\nThe option `-s` expects path to JSON data file with information about a sender business entity. It can be omitted, if\nits name is `sender.json` and it is located in the same directory from which is the command executed.\n\nThe option `-i` expects path to JSON data file with the invoice data.\n\nThe option `-r` expects path to JSON data file with information about a sender business entity.\n\n```shell\nbillingyard -s sender.json issue-invoice -i invoice_vat.json -r receiver.json --vat\n```\n\nThe option `--vat` is used to generate an invoice for a VAT payer sender business entity. Please do not forget, that in\nthis case, you have to also provide correct invoice JSON data file with all needed attributes.\n\n## License\n\nThis software is released under MIT License and use other third party software.\n\n* [Click](https://github.com/pallets/click/blob/master/LICENSE.rst)\n* [Jinja2](https://github.com/pallets/jinja/blob/master/LICENSE.rst)\n* [WeasyPrint](https://github.com/Kozea/WeasyPrint/blob/master/LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MartinVondrak/billing-yard",
    "keywords": "invoice,cli,generator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "billingyard",
    "package_url": "https://pypi.org/project/billingyard/",
    "platform": "",
    "project_url": "https://pypi.org/project/billingyard/",
    "project_urls": {
      "Homepage": "https://github.com/MartinVondrak/billing-yard"
    },
    "release_url": "https://pypi.org/project/billingyard/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CLI invoice generator for business entities in the Czech republic",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10798881,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44ee6b71b9630fd7188aab51d67ecd58614d584a03c9ffeb538b1cf06d30514b",
          "md5": "efab151811a2e55ccd42ae29533c902a",
          "sha256": "050cb78fe7712a2b21b8a97f3c47ef7ff6be228d91323b109e11b69a2961b7e8"
        },
        "downloads": -1,
        "filename": "billingyard-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efab151811a2e55ccd42ae29533c902a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12733,
        "upload_time": "2021-02-24T19:45:59",
        "upload_time_iso_8601": "2021-02-24T19:45:59.092860Z",
        "url": "https://files.pythonhosted.org/packages/44/ee/6b71b9630fd7188aab51d67ecd58614d584a03c9ffeb538b1cf06d30514b/billingyard-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddb94805de62d6f2f7f3f6b9ca8585c6a738452f0a168107e542fae9df29fae0",
          "md5": "0f9199d705568d9c0a6f5e9a77a63d4e",
          "sha256": "beb368cac42b7e67ead4f57fe6785737ebfcd7dd1908c486bedf943afa19480e"
        },
        "downloads": -1,
        "filename": "billingyard-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f9199d705568d9c0a6f5e9a77a63d4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12784,
        "upload_time": "2021-07-01T17:24:47",
        "upload_time_iso_8601": "2021-07-01T17:24:47.683503Z",
        "url": "https://files.pythonhosted.org/packages/dd/b9/4805de62d6f2f7f3f6b9ca8585c6a738452f0a168107e542fae9df29fae0/billingyard-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddb94805de62d6f2f7f3f6b9ca8585c6a738452f0a168107e542fae9df29fae0",
        "md5": "0f9199d705568d9c0a6f5e9a77a63d4e",
        "sha256": "beb368cac42b7e67ead4f57fe6785737ebfcd7dd1908c486bedf943afa19480e"
      },
      "downloads": -1,
      "filename": "billingyard-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f9199d705568d9c0a6f5e9a77a63d4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12784,
      "upload_time": "2021-07-01T17:24:47",
      "upload_time_iso_8601": "2021-07-01T17:24:47.683503Z",
      "url": "https://files.pythonhosted.org/packages/dd/b9/4805de62d6f2f7f3f6b9ca8585c6a738452f0a168107e542fae9df29fae0/billingyard-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}