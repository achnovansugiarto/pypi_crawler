{
  "info": {
    "author": "ansgoo",
    "author_email": "haiven_123@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: MacOS X",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "DjangoMultiTenant\n=================\n\ndjango\n多租户方案实现方案，本插件的是在数据库层对租户数据进行了隔离，保证每个租户只能访问自己的数据库信息，完整兼容django所有功能\n\n安装\n----\n\n.. code:: shell\n\n    pip install django-multi-tenancy\n\n兼容性\n------\n\n-  django >= 3.2\n\n其他django版本未测试，不保证兼容性\n\n配置\n----\n\n.. code:: python\n\n\n    INSTALLED_APPS = [\n        'multi_tenant.tenant',\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        ...\n        'multi_tenant.proxy',\n        #  rest_framework 需要加载rest app\n        'multi_tenant.rest'\n    ]\n\n    MIDDLEWARE = [\n        'django.middleware.security.SecurityMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'corsheaders.middleware.CorsMiddleware',\n        'django.middleware.common.CommonMiddleware',\n        'django.middleware.csrf.CsrfViewMiddleware',\n        # 需要注释调官方自带的AuthenticationMiddleware，采用插件的MultTenantAuthenticationMiddleware\n        # 'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'multi_tenant.tenant.middleware.authentication.MultTenantAuthenticationMiddleware',\n        'django.contrib.messages.middleware.MessageMiddleware',\n        'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    ]\n\n    # AUTH_USER_MODEL 全局用户模型,必须指定\n    AUTH_USER_MODEL = 'tenant.GlobalUser'\n\n    # 租户用户模型,不指定默认为：'auth.User'\n    AUTH_TENANT_USER_MODEL = 'info.User'\n\n    # 租户模型,不指定默认为：'tenant.Tenant'\n    DEFAULT_TENANT_MODEL = 'tenant.Tenant'\n\n    ## 数据库映射，这里只需要定义共用的app\n    DATABASE_APPS_MAPPING = {\n        'tenant': 'default',\n        'admin': 'default',\n        'sessions': 'default'\n    }\n\n    ## 数据库映射路由\n    DATABASE_ROUTERS = ['multi_tenant.tenant.utils.db.MultTenantDBRouter']\n\n主要模块说明以及使用\n--------------------\n\n数据库模块\n~~~~~~~~~~\n\n1. 默认\\ ``default``\\ 数据库为主数据库,只保存公共模块数据，租户数据库可以动态创建，创建一个租户，会自动在数据库中创建了一个对应租户的数据库，所有租户的数据库结构相同\n\n2. 可以在\\ ``DATABASE_APPS_MAPPING``\\ 中指定某个\\ ``app``\\ 属于公共\\ ``app``,还是租户\\ ``app``,公共\\ ``app``\\ 默认数据库链接为\\ ``default``\n\n``multi_tenant.tenant`` 多租户模块\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. ``Tenant``\\ 为租户模型，当然你可以继承\\ ``AbstractTenant``\\ 来自定义自己的租户模块，并在\\ ``settings``\\ 中指定\\ ``DEFAULT_TENANT_MODEL``\\ 常量来指定租户模型\n\n2. ``GlobalUser``\n   为全局用户，不分数据哪个租户，这里用\\ ``GlobalUser``\\ 替代了\\ ``django.contrib.auth.models.User``\\ 模块，因此\\ ``django.contrib.auth.get_user_model``\n   获取的是\\ ``GlobalUser``\\ 对象，相应的\\ ``request.user``\\ 也是\\ ``GlobalUser``\\ 对象，用户可以被加入租户，也可以选择不加入租户，加入租户的用户只能访问相应租户数据，不加入租户的用户如果是超级管理员可以访问\\ ``全局用户``\\ 和\\ ``租户信息``\n\n3. 租户用户表默认采用\\ ``django.contrib.auth.models.User``,当然你可以选择继承\\ ``django.contrib.auth.models.AbstractUser``\\ 来自定义自己的租户用户模块，并在settings中指定\\ ``AUTH_TENANT_USER_MODEL``\\ 常量来指定租户用户，用户可以在租户层面完整的使用\\ ``django.contrib.auth``\\ 所有功能，包括\\ ``User``\\ 、\\ ``Group``\\ 、\\ ``Permission``\\ 、\\ ``Admin``\n\n4. 可以登录Admin\n   后台创建租户，也可以使用\\ ``createtenant``\\ 命令行来创建租户\n\n``multi_tenant.proxy`` 代理模块\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``ProxyContentType``\\ contentType代理，因为在多租户模型中，主数据库和租户数据库数据模型不一样，在不断的迭代更新中，新的租户和老的租户模型\\ ``ContentType``\\ 数据信息也不一样，django默认自带的\\ ``ContentType``\\ 模型默认自带缓存，\\ ``ProxyContentType``\\ 模型无缓存，每次的数据访问都是直接访问数据库，这样避免了\\ ``ContentType``\\ 信息不一致导致的异常\n\n``multi_tenant.rest`` rest\\_framework适配模块\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. 对\\ ``rest_framework``\\ 进行了适配,保证租户只能访问自己的租户的数据\n2. 提供了一个\\ ``IsTanenatUser``\\ 权限类，判断是不是租户用户\n3. 适配了\\ ``rest_framework``\\ 的内置权限\\ ``IsAdminUser``\\ 、\\ ``DjangoModelPermissions``\\ 、\\ ``DjangoModelPermissionsOrAnonReadOnly``\\ 、\\ ``DjangoObjectPermissions``\n\n``migrate`` 模块\n~~~~~~~~~~~~~~~~\n\n1. 迁移租户数据库，请给\\ ``migrate`` 指定\\ ``--database``\\ 参数值,\n   ``--database``\n2. 也可以使用‘multimigrate’,必须指定\\ ``--database``\\ 参数值，或者直接使用\\ ``--all``,来迁移所有租户表结构\n\n支持的数据库\n------------\n\n适配了支持\\ ``django``\\ 所有支持的数据库（\\ ``SQLite3``\\ 、\\ ``MySQL``\\ 、\\ ``Posgres``\\ 、\\ ``Oracle``\\ ）\n\n例子\n----\n\n可以参考\\ ``examples``\\ 的使用",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AnsGoo/djangoMultiTenant",
    "keywords": "python",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-multi-tenancy",
    "package_url": "https://pypi.org/project/django-multi-tenancy/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-multi-tenancy/",
    "project_urls": {
      "Homepage": "https://github.com/AnsGoo/djangoMultiTenant"
    },
    "release_url": "https://pypi.org/project/django-multi-tenancy/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django multi tenant implementation",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12091632,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b194283d9fbc1b368870ea0e63a59364ba11dbb6f43d12e3e34e624b05398900",
          "md5": "14b244d72e039667669ca7bc8674b5e2",
          "sha256": "13fd150dde7f4abf3c2adb7da8fdbcaa0542dcf7c6583e05038f257b7ccc37c7"
        },
        "downloads": -1,
        "filename": "django-multi-tenancy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "14b244d72e039667669ca7bc8674b5e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24288,
        "upload_time": "2021-11-22T12:49:10",
        "upload_time_iso_8601": "2021-11-22T12:49:10.465137Z",
        "url": "https://files.pythonhosted.org/packages/b1/94/283d9fbc1b368870ea0e63a59364ba11dbb6f43d12e3e34e624b05398900/django-multi-tenancy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b194283d9fbc1b368870ea0e63a59364ba11dbb6f43d12e3e34e624b05398900",
        "md5": "14b244d72e039667669ca7bc8674b5e2",
        "sha256": "13fd150dde7f4abf3c2adb7da8fdbcaa0542dcf7c6583e05038f257b7ccc37c7"
      },
      "downloads": -1,
      "filename": "django-multi-tenancy-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "14b244d72e039667669ca7bc8674b5e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24288,
      "upload_time": "2021-11-22T12:49:10",
      "upload_time_iso_8601": "2021-11-22T12:49:10.465137Z",
      "url": "https://files.pythonhosted.org/packages/b1/94/283d9fbc1b368870ea0e63a59364ba11dbb6f43d12e3e34e624b05398900/django-multi-tenancy-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}