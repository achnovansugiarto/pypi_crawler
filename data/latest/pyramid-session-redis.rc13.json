{
  "info": {
    "author": "Jonathan Vanasco",
    "author_email": "jonathan@findmeon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build Status](https://travis-ci.org/jvanasco/pyramid_session_redis.png)](https://travis-ci.org/jvanasco/pyramid_session_redis)\n\n\nOverview\n========\n\n`pyramid_session_redis` is a mature, stable and actively maintained Server-Side\nSessions plugin for the Pyramid web framework.\n\nOriginally, this library was a fork of\n[`pyramid_redis_sessions`](`/ericrasmussen/pyramid_redis_sessions`), focused on\nimprovements and API changes designed for high performance (particularly with\nservers under load), and a slightly different API designed for developer\nconvenience.\n\nThis package was planning to follow a multi-version release process, however\nthat plan was abandoned in favor of ensuring backards compatibility.\n\nThe `main` and `1.6` branches are designed to support both:\n\n* Python 2\n* Python 3\n\nand\n\n* Pyramid 1.x\n* Pyramid 2.0\n\n\nPrior Branches\n--------------\n\nThe 1.5.x branch is in maintenance mode. No updates are expected, as 1.6 is\nbackwards compatible.\n\nThe 1.4.x branch is EOL. It led to the stable 1.5.0 API release.\n\nThe 1.2.x branch is EOL as of 1.2.2. Previous plans were to support a final\n1.3.0 release.\n\nPrior Branch Details\n____________________\n\nThe 1.2.x branch and earlier are largely a \"drop-in-replacement\" compatible with\nEric Rasmussen's `pyramid_redis_sessions` as-is.  If you are migrating from that\nproject and do not want to upgrade code, you should pin your install of this\nlibrary to `pyramid_session_redis<=1.3.0` or `pyramid_session_redis<1.3`\n\n**Please be aware that you will be limited to using outdated versions of Pyramid \n1.x if using the 1.2.x branch.**\n\nStarting with the 1.4.x branch, several design changes were made and this library\nis not a drop-in replacement, **HOWEVER** upgrading will only require minimal\nediting of your code: some editing for migration; some kwargs have changed;\nthe structure of the package changed (imports); and advanced users who leverage\nthe internal systems may need to upgrade. It should not take more than 5 minutes\nto convert.  The package is still a plug-and-play Pyramid ISessions interface, so\nthere are very small changes.\n\nPrior Branch Incompatibilities\n______________________________\n\nIMPORTANT: The internal payload structure changed in the 1.4 branch, and is no\nlonger compatible with sessions created under 1.2 - they will be invalid.\n\nPRs that can handle a graceful fallback are welcome.\n\nThe 1.2 format guaranteed internal sessions to be in this format:\n\n    {'managed_dict': {},\n     'created': INT,\n     'timeout': INT,\n     }\n\nThe 1.4 version streamlines the keys for a lighter footprint and generally\nlooks like this:\n\n    {'m': {},  # managed_dict\n     'c': INT,  # created\n     'v': SESSION_API_VERSION,  # api version INT\n     # the following are optional and not guaranteed to be in a session\n     't': INT,  # timeout\n     'x': INT,  # expiry\n     }\n\nKey Takeaways:\n\n* Keys were shortened to 1 letter\n* An API Version is now used, to handle graceful changes in the future\n* The Timeout is no longer guaranteed to be present.\n  The library now supports the entire Timeout to be handled in Redis\n* An \"Expiry Timeout\" may also exist\n\nKey Concepts\n============================================\n\n\nTimeout vs Expires/MaxAge\n-------------------------\n\nThis package allows you to set both *Timeout* and *Expiry* values.  The two\nconcepts are closely related, but very different.\n\nA *Timeout* is an internal value and a moving target. It specifies how long a\nSession should last before it times out due to inactivity. The timeout is\nconstantly refreshed when the session is accessed.\n\nFor example, consider these settings:\n\n    timeout = 1800\n    timeout_trigger = 900\n\nThe `timeout` setting is specifying the Session should remain active for 1800\nseconds since it's last activity.  The `timeout_trigger` setting is an\noptimization that defers modifying the Session's timeout on READ operations until\nat least 900 seconds have passed since the last modification. Modifications will\nalways occur on WRITE operations.  Depending on your configuration, the timeout\nmay be stored in Redis, as part of the Python Payload, or both.\n\nTo illustrate how the above settings work, consider a timeline in which a User\nvisits a website and then visits it again 2000 seconds later:\n\n> Visit 1 | 0s    | Session A (new)\n> Visit N | 2000s | Session B (new)\n\nWhen the User makes the last visit, the Session would have timed out, because it\nexceeded the 1800 second mark in the timeout.\n\nNow assume the User makes 3 visits in this timeline, and a second visit happens\nat the 899 mark:\n\n> Visit 1 | 0s    | Session A (new)\n> Visit 2 | 899s  | Session A\n> Visit N | 2000s | Session B (new)\n\nWhen the User makes the last visit, the Session would still\nhave timed out, because the second visit did not meet the timeout_trigger\nthreshold.\n\nBut, if the second visit happens just 2 seconds later, at the 901 mark, the\ntimeout_trigger is reached and the session's timeout will be extended:\n\n> Visit 1 | 0s    | Session A (new)\n> Visit 2 | 901s  | Session A (update timeout trigger)\n> Visit N | 2000s | Session A (update timeout trigger)\n\nWhen the User makes the last visit, it would still happen within the context of\nthe original Session and the timeout will be extended even further.\n\n*Expires* and *Max-Age* are generally values that related to Cookie settings.\n\n*Expires* is created on a Cookie as either a specified Date, or a null value; if\nthe value is null (explicit or unspecified), the Cookie will be set as a\n\"Session\" cookie and only last for the duration of the web browser application\nbeing open.\n\n*Max-Age* is created on a Cookie as the number of seconds until the Cookie\nexpires.  A zero or negative value will expire (delete) the cookie immediately.\nIf both Expires and Max-Age are set, Max-Age has precedence.\n\n\nThe Confusion?\n--------------\n\nIf Redis stores our Timeout info, it stores it in an \"expiry\" value via `SETEX`\nor similar calls.  \n\n\nKey Differences From pyramid_redis_sessions\n============================================\n\nDepending on your needs, this package is probably more desirable than the\noriginal project. This package was designed to significantly cut down on the\ncommunication between Redis and Pyramid. Some options are offered to minimize\nthe size of Redis payloads as well.\n\nThis package contains additional hooks and features to aid developers who are\nusing Redis-based sessions in high-traffic situations.\n\nThis package does not recommend any \"best deployment\" strategies, but supports a\nwide range of strategies to implement the \"best deployment\" under any given\ncircumstance.\n\nThrough 1.2.x\n-------------\n\n* The original package communicates with Redis on most attribute accesses and\n  writes within a given request. The traffic can be burdensome in some\n  implementations. `pyramid_session_redis` will queue a single `persist` or\n  `refresh` task per-request using Pyramid's `add_finished_callback` hook.\n* The original version used `EXISTS` to check if a Session existed or not, then\n  proceeded to `GET` or `SET` a new Session.  `pyramid_session_redis` will\n  immediately attempt a `GET`, and will `SET` a new Session on failure.\n  This approach eliminates a call.\n* Separate calls to `SET` and `EXPIRE` were replaced with a single `SETEX`.\n* A flag can be set to enable a LRU Cache (least recently used) mode. No expiry\n  data will be sent to Redis, allowing the Redis server to handle the LRU logic\n  itself.\n* The active Session is decoupled from the `request.session` attributs; this\n  allows for the Session to be set up on alternate attributes and supports\n  integration with\n  [pyramid_session_multi](https://github.com/jvanasco/pyramid_session_multi).\n* The original library does not detect changes in nested dictionaries. This\n  package uses `hashlib.md5` to fingerprint the serialized value on READ; if no\n  changes were detected, a failsafe will `Serialize+md5` the data to decide if a\n  WRITE should occur. This behavior can be disabled by setting `detect_changes`\n  to `False`.\n* The original library raises a fatal error if a Session can not be\n  deserialized. By passing in `deserialized_fails_new` to the constructor,\n  you can create a new Session on deserialization errors.\n* Support for disabling Sessions on CDN generated content via\n  `func_check_response_allow_cookies`\n* Thanks to @ github/hongyuan1306, Token Generation has been consolidated to use\n  Python3's stdlib (or reimplemented if not available). Tokens are also 32,\n  not 20, characters.\n* Redis is supported in a LRU mode (see http://redis.io/topics/lru-cache) by\n  setting the option `set_redis_ttl` to `False` (by default, it is `True`).\n  This will eliminate calls to `EXPIRE` and will use `SET` instead of `SETEX`.\n* In the 1.2.x branch, the created time can be set to an integer via\n  `use_int_time=True`. This will cast the `created` time via\n  `int(math.ceil(time.time()))`. This reduces a payload by several bits.\n\nOther Updates 1.4.x+\n--------------------\n\n* Only `int()` time is supported; Fractional time wastes bytes.\n* Sessions now have version control to support future upgrades via a \"version\"\n  `v` key.\n* The format of the internal payload was rewritten, the encoded payload now\n  uses 1-letter keys instead of words. This should offset the addition of an\n  expires timestamp and version id.\n* There was no logic for Python timeout control (whoops!) this has been fixed.\n  An \"expires\" `x` key now tracks the expiration.\n* Added a `timeout_trigger` option.  This will defer expiry data updates to\n  lower usage on Redis.  This is explained below in more detail.\n* In high load situations, Redis can have performance and storage issues because\n  in the original package Session IDs are created on every request (such as a\n  getting spidered by a botnet that does not respect Sessions). In this package,\n  a 'lazycreate' method is used: a session_id/cookie will not be generated\n  unless a session is needed in the callback routine. In order to generate\n  session_id/cookie beforehand, one can use the `RedisSession.ensure_id`\n  function.  To safely check if a session id exists, one can use the\n  `RedisSession.session_id_safecheck` method as well.\n* Added `func_invalid_logger` to the constructor. This can be used to log\n  invalid Sessions. It is incredibly useful when integrated with a statsd\n  system. (see below)\n* Added `set_redis_ttl_readheavy` to the factory and session constructors.\n  This option will optimize Sessions which have Redis-maintained TTLs by\n  executing a GET+EXPIRE together within a pipeline.\n\n\n\nInstallation\n============\n\nInstall via pypi:\n\n    pip install pyramid_session_redis\n\n\nConfiguration\n=============\n\nConfigure `pyramid_session_redis` via your Paste config file or however you\nprefer to configure Pyramid. Only `redis.sessions.secret` is required.\nAll other settings are optional.\n\nFor complete documentation on the `RedisSessionFactory` that uses these\nsettings, see :doc:`api`. Otherwise, keep reading for the quick list:\n\n\n    # session settings\n    redis.sessions.secret = your_cookie_signing_secret\n    redis.sessions.timeout = 1200\n\n    # session cookie settings\n    redis.sessions.cookie_name = session\n    redis.sessions.cookie_max_age = max_age_in_seconds\n    redis.sessions.cookie_path = /\n    redis.sessions.cookie_domain =\n    redis.sessions.cookie_secure = False\n    redis.sessions.cookie_httponly = False\n    redis.sessions.cookie_on_exception = True\n\n    # you can supply a redis connection string as a URL\n    redis.sessions.url = redis://username:password@localhost:6379/0\n\n    # or as individual settings (note: the URL gets preference if you do both)\n    redis.sessions.host = localhost\n    redis.sessions.port = 6379\n    redis.sessions.db = 0\n    redis.sessions.password = None\n\n    # additional options can be supplied to redis-py's StrictRedis\n    redis.sessions.socket_timeout =\n    redis.sessions.connection_pool =\n    redis.sessions.charset = utf-8\n    redis.sessions.errors = strict\n    redis.sessions.unix_socket_path =\n\n    # in the advanced section we'll cover how to instantiate your own client\n    redis.sessions.client_callable = my.dotted.python.callable\n\n    # along with defining your own serialize and deserialize methods\n    redis.sessions.serialize = cPickle.dumps\n    redis.sessions.deserialize = cPickle.loads\n\n    # you can specify a prefix to be used with session keys in redis\n    redis.sessions.prefix = mycoolprefix\n\n    # or you can supply your own UID generator callable for session keys\n    redis.sessions.id_generator = niftyuid\n\n\nInitialization\n==============\n\nLastly, you need to tell Pyramid to use `pyramid_session_redis` as your\nSession factory. The preferred way is adding it with `config.include`,\nlike this:\n\n    def main(global_config, **settings):\n        config = Configurator(settings=settings)\n        config.include('pyramid_session_redis')\n\nAlternately, instead of using the Configurator's include method, you can\nactivate Pyramid by changing your application's \".ini\" file, use the following\nline:\n\n    pyramid.includes = pyramid_session_redis\n\nThe above method is recommended because it's simpler, idiomatic, and still fully\nconfigurable. It even has the added benefit of automatically resolving dotted\npython paths used in the advanced options.\n\nHowever, you can also explicitly pass a settings dict to the\n`session_factory_from_settings` function. This can be helpful if you configure\nor modify your settings in code:\n\n    from pyramid_session_redis import session_factory_from_settings\n\n    def main(global_config, **settings):\n        config = Configurator(settings=settings)\n        session_factory = pyramid_session_redis(settings)\n        config.set_session_factory(session_factory)\n\n\nTimeout Notes\n=============\n\nIf ``set_redis_ttl`` is False, it does not imply there is no timeout at all --\nonly that Redis will not be sent timeout data via `SETEX` or `EXPIRE`.\nTimeout data will still be stored in Python.\n\nIf Redis is functioning as an LRU Cache, abandoned sessions will never be seen\nby Python, but will eventually be cleared out to make room for new sessions by\nthe inherent Redis LRU logic.\n\nTimeout data stored in Python is relatively small when compared to the timeout\ndata stored in Redis.\n\nIf you want to NEVER have sessions timeout, set the initial `timeout`\nto \"0\" or \"None\".\n\nSetting a `timeout_trigger` will require Python to track the expiry.\n\nEnabling `set_redis_ttl_readheavy` requires a `timeout` and `set_redis_ttl`;\nit also requires not enabling `timeout_trigger` or `python_expires`.\n\n\nTimeout Examples\n----------------\n\nTimeout in Python, with Redis TTL via `SETEX`/`EXPIRE`:\n\n    timeout = 60\n\nTimeout in Python, no Redis TTL (only `SET` used)\n\n    timeout = 60\n    assume_redis_ttl = True\n\nNo Timeout in Python, no Redis TTL (only `SET` used)\n\n    timeout = 0  # or None\n    assume_redis_ttl = True\n\n\nWarning: Session Locking and Race Conditions\n============================================\n\nThis package does not incorporate any sort of locking for session updating or\nhandling of race conditions.\n\nThis should not be a problem for the vast majority of users, and is a feature\nnot present on any known Pyramid Session providers.\n\nFor more information, please see:\n\n* https://github.com/jvanasco/pyramid_session_redis/issues/9\n* https://github.com/Pylons/pyramid/issues/3041\n\n\nFeature - Timeout Triggers\n==========================\n\nA timeout trigger can be used to limit the amount of updates/writes.\nIt may be more beneficial to your usage pattern.\n\nFor the sake of clarity, I'll use an oversimplification that Redis essentially\nhas two different internal data stores that are used independently: one for a\nKey's payload and another for the Key's expiry.\n\nIn the 'classic' behavior (project this was forked from): every time you access\nan existing session, the GET is followed by sending Redis a new EXPIRE time;\nessentially every \"read\" has a corresponding \"write\" for the Redis-tracked\nexpiry record.\n\nIn order to minimize the writes via SETEX, I introduced the timeout trigger.\nThe trigger works by storing some timeout information in the Redis data payload,\nand using that information to determine when to send a write. Instead of having\na GET+EXPIRE for every read, we only have a single GET and eliminate the write\ncaused by the EXPIRE. This has a maintenance cost though - once we hit the\ntimeout trigger, instead of just the GET we need to update the internal timeout\npayload and issue a SET.\n\nGoing back to your situation: when the user stops activity at 40 minutes in, if\nthe timeout trigger is enabled then there has never been an update to the\ninternal payload or Redis about the user activity since the session was first\ncreated. The purpose of the trigger is to defer that \"write\" operation.\n\nIn order to make a session valid for \"reading\" for around an hour, you should\ndo something like:\n\n* a two-hour session with a 10 minute trigger, or\n* a one-hour session with a 50 minute trigger\n\nYou can also disable the functionality by setting the trigger to 0. Up to a few\nthousand daily users, you shouldn't have any issues with the overhead of the\n\"classic\" mode. When you hit 10k users and/or start to have clustered web\nservers communicating with dedicated Redis instances, setting a new EXPIRE after\nevery read operation becomes something you want to avoid.\n\n\nScenario 1 - Classic Redis\n--------------------------\n\nIn the typical \"classic\" Redis usage pattern, the session usage is refreshed via\nan `EXPIRE` call on every session view.\n\nThis is useful, but means many session operations will trigger two Redis calls\n(`GET` + `EXPIRE`).  On a high performance system, this can be a lot.\n\nThis is a typical scenario with refreshing:\n\n    timeout = 200\n\nThe following timeline would occur:\n\n| time | Redis calls    | timeout |\n| ---- | -------------- | ------- |\n| 0    | `GET`+`SETEX`  | 200     |\n| 100  | `GET`+`EXPIRE` | 300     |\n| 200  | `GET`+`EXPIRE` | 400     |\n| 300  | `GET`+`EXPIRE` | 500     |\n| 400  | `GET`+`EXPIRE` | 600     |\n| 500  | `GET`+`EXPIRE` | 700     |\n\n\nScenario 2 - Timeout Trigger\n--------------------------\n\nThe 1.4.x branch introduces a `timeout_trigger` to augment the Session's\n`timeout`.\n\nWhereas a `timeout` states how long a session is good for, a `timeout_trigger`\ndefers how long a Session's refresh should be deferred for:\n\nGiven the following example, the package will use a 1200s timeout for requests,\nbut only trigger an update of the expiry time when the current time is within\n600s of the expiry:\n\n    timeout = 1200\n    timeout_trigger = 600\n\nThe following timeline would occur:\n\n| time | Redis calls  | timeout | next threshold |\n| ---- | ------------ | ------- | -------------- |\n| 0    | `GET`+`SET`* | 1200    | 600            |\n| 1    | `GET`        | 1200    | 600            |\n| ...  |              |         |                |\n| 599  | `GET`        | 1200    | 600            |\n| 600  | `GET`+`SET`* | 1800    | 1200           |\n| 601  | `GET`        | 1800    | 1200           |\n| ...  |              |         |                |\n| 1199 | `GET`        | 1800    | 1200           |\n| 1200 | `GET`+`SET`* | 2400    | 1800           |\n\n* This method is compatible with setting a TTL in redis via `SETEX` or doing\neverything within Python if Redis is in a LRU mode\n\nThe removes all calls to `EXPIRE` before the threshold is reached, which can be\n a considerable savings in read-heavy situations.\n\nThe caveat to this method: an expiry timestamp must be stored within the payload\nAND updating the timeout requires a `SET` operation.\n\n\nFeature - set_redis_ttl_readheavy\n=================================\n\nThis is a new option in `1.4.2` which should improve performance on readheavy\ninstallations BUT may degrade performance on writeheavy installations.  This\noption will aggregate a GET+EXPIRE on every read.\n\n`set_redis_ttl_readheavy` requires the following:\n\n* a `timeout` value is set\n* `set_redis_ttl` is `True`\n* `timeout_trigger` is NOT set\n* `python_expires` is NOT True\n\nThe default behavior of this library during a read-only request is this:\n\n* On session access, query Redis via `redis.GET {session_id}`\n* In a Pyramid callback, update Redis via `redis.EXPIRE {session_id} {expiry}`\n\nDuring a read-write:\n\n* On session access, query Redis via `redis.GET {session_id}`\n* In a Pyramid callback, update Redis via\n  `redis.SETEX {session_id} {payload} {expiry}`\n\nThe new `set_redis_ttl_readheavy` changes this. If enabled during a read-only\nrequest, the behavior will be lighter on the Redis instance:\n\n* On session access, open a pipeline with two Redis commands:\n  `pipeline.GET {session_id}`,\n  `pipeline.EXPIRE {session_id} {expiry}`.\n* In a Pyramid callback, the duplicate expire is suppressed.\n\nHowever during a read-write, the activity will be:\n\n* On session access, open a pipeline with two Redis commands:\n  `pipeline.GET {session_id}`,\n  `pipeline.EXPIRE {session_id} {expiry}`.\n* In a Pyramid callback, update Redis via\n  `redis.SETEX {session_id} {payload} {expiry}`\n\nRead-heavy applications should see a slight performance bump via the pipeined\nGET+EXPIRE, however write-heavy applications are likely to see a performance\ndegradation as it adds an extra EXPIRE to every request.\n\n\nInvalid Logging\n================\n\nThe default behavior of this library is to silently create new session when bad\nsession data is encountered, such as a cookie with an invalid id or corrupted\ndatastore.  A graceful \"new session\" is the ideal situation for end-users.\n\nThe problem with that strategy is that problems in code or your application\nstack can be hidden, and you might not know about a bad datastore.\n\nThe 1.4 release introduces `func_invalid_logger` to the factory constructor.\nThis can be used to track the invalid sessions that are safely caught and\nsilently upgraded.\n\nHow?  The package tracks why a session is invalid with variant classes of\n`pyramid_session_redis.exceptions.InvalidSession`.\n\nSpecifically there are the following classes:\n\n* ``InvalidSession(Exception)``\n  Catchall base class\n* ``InvalidSession_NoSessionCookie(InvalidSession)``\n  The Session is invalid because there is no cookie.\n  This is the same as \"new session\".\n* ``InvalidSession_NotInBackend(InvalidSession)``\n  The Session id was not in the backend.\n* ``InvalidSession_DeserializationError(InvalidSession)``\n    Error deserializing.\n    This is raised if ``deserialized_fails_new`` is True. Otherwise the\n    exception is wrapped in a ``RawDeserializationError`` and raised without\n    being caught.\n* ``InvalidSession_PayloadTimeout(InvalidSession)``\n    The inner Python payload timed out.\n* ``InvalidSession_PayloadLegacy(InvalidSession)``\n    The Session is running on an earlier version.\n\nThe factory accepts a `func_invalid_logger` callable argument. The input is the\nraised exception BEFORE a new cookie is generated, and will be the request and\nan instance of `InvalidSession`.\n\n    from pyramid_session_redis.exceptions import *\n    from my_statsd import new_statsd_client()\n\n    statsd_client = new_statsd_client()\n\n    def my_logger(request, raised_exception):\n        \"\"\"\n        raised_exception will be an instance of InvalidSession\n        log the exception to statsd for metrics\n        \"\"\"\n        if isinstance(raised_exception, InvalidSession_NoSessionCookie):\n            statsd_client.incr('invalid_session.NoSessionCookie')\n        elif isinstance(raised_exception, InvalidSession_NotInBackend):\n            statsd_client.incr('invalid_session.NotInBackend')\n        elif isinstance(raised_exception, InvalidSession_DeserializationError):\n            statsd_client.incr('invalid_session.DeserializationError')\n\n    factory = RedisSessionFactory(...\n                                  func_invalid_logger=my_logger,\n                                  ...\n                                  )\n\nThe `func_invalid_logger` argument may be provided as a dotted-notation string\nin a configuration file.\n\n\nUncaught Errors\n================\n\nThe exception `pyramid_session_redis.exceptions.RawDeserializationError` will be\nraised if deserialization of a payload fails and `deserialized_fails_new` is not\n`True`. The first arg will be the caught exception. This allows for a standard\nerror across multiple deserialization options.\n\n\nFAQ:\n=====\n\nQ. What serialization is used?\n------------------------------\n\nA. Serialization is used at two points\n\n* Serializing the Session data.\n  The server-side data serialization is handled by `pickle`. This Session data is\n  created on the server by your application and remains on the server. `pickle`\n  is safe to use in this context, as user-generated payloads can not be introduced\n  to these (de)serialization routines. If you wish to avoid `pickle`, or your\n  prefer to use another encoder, you can easily specify a different (de)serialization\n  routine such as a custom JSON, msgpack or pretty much anything else.\n\n* Serializing the `session_id` to encode into a signed cookie.\n  This library uses `WebOb.cookies.SignedSerializer` to securely manage a HMAC\n  signature of the `session_id` combined with a site-secret. The library allows\n  for a custom replacement to be provided as well.\n  \n  In the original library, the session id and signature were turned into a\n  cookie-safe value via `pickle` (de)serialization - a detail that remained in\n  this library through `<=v1.5.0`. This approach was identified as a security\n  risk, and was removed from this library starting in `v1.5.1`.  \n\n\nExamples\n========\n\nThere is an example of using this package in `pyramid_session_multi`\n[examples/single_file_app.py](https://github.com/jvanasco/pyramid_session_multi/blob/main/examples/single_file_app.py).\n\n\nFurther Reading:\n================\n\nFor more information about Redis performance under Python please see an\nassociated project:\n\n* https://github.com/jvanasco/dogpile_backend_redis_advanced\n\nTo suport multiple Sessions under Pyramid\n\n* https://github.com/jvanasco/pyramid_session_multi\n\nUntil Nov 2016 this was maintained as `jvanasco/pyramid_redis_sessions`\n\n* The main branch for `jvanasco/pyramid_redis_sessions` was \"custom_deployment\"\n* The branched named \"main\" is the upstream source from ericrasmussen\n\nAs of Nov 2016, this was forked into it's own project to allow for distribution\nunder PyPi.\n\nAll support is handled via GitHub : https://github.com/jvanasco/pyramid_session_redis\n\n\nToDo\n=====\n\nsee `TODO.md`\n\n\nChangelog\n==========\n\nsee `CHANGES.md`\n\n\nSupport\n=======\n\nYou can report bugs or open feature/support requests via GitHub\n\n* https://github.com/jvanasco/pyramid_session_redis\n\n\nLicense\n=======\n\n`pyramid_session_redis` is available under a FreeBSD-derived license. See\n`LICENSE.txt <https://github.com/jvanasco/pyramid_session_redis/blob/main/LICENSE.txt>`_\nfor details.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jvanasco/pyramid_session_redis",
    "keywords": "pyramid session redis",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid-session-redis",
    "package_url": "https://pypi.org/project/pyramid-session-redis/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyramid-session-redis/",
    "project_urls": {
      "Homepage": "https://github.com/jvanasco/pyramid_session_redis"
    },
    "release_url": "https://pypi.org/project/pyramid-session-redis/1.6.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "High performance and actively maintained server-side session framework for Pyramid and Redis.",
    "version": "1.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12042361,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d56276c655ef1fd80d7b8a4d3de0cc95345aaf5851a84240336514ce677651e",
          "md5": "27bd35685862bbf3a2d24af332107612",
          "sha256": "bca296d98a42c719cee768799d17563acfa4d69cb2170a9e136a4067001c1702"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "27bd35685862bbf3a2d24af332107612",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23328,
        "upload_time": "2016-11-10T21:10:18",
        "upload_time_iso_8601": "2016-11-10T21:10:18.817767Z",
        "url": "https://files.pythonhosted.org/packages/6d/56/276c655ef1fd80d7b8a4d3de0cc95345aaf5851a84240336514ce677651e/pyramid_session_redis-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c739ada23afa3c308549b462d19c83dffe6f9589bbb8783c13059ccd8ba75d71",
          "md5": "4c14439f3a110274c4e078bd4b90d877",
          "sha256": "3febcbe9b08be342d17510a2573f60ff7691acd67070b12c9522dd254d083d8d"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c14439f3a110274c4e078bd4b90d877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23896,
        "upload_time": "2016-12-23T18:19:08",
        "upload_time_iso_8601": "2016-12-23T18:19:08.246715Z",
        "url": "https://files.pythonhosted.org/packages/c7/39/ada23afa3c308549b462d19c83dffe6f9589bbb8783c13059ccd8ba75d71/pyramid_session_redis-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b81b46ac00089147890f9bbbf38a4f076217a9e4b3600fbd1ca4842292f79d6",
          "md5": "7a0da68c73d272d46e070a2629e3ad49",
          "sha256": "6f4e08f8d9ccef84c5b2e8fcb415aeae54be0783c1770217c174ad580f3a09b9"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a0da68c73d272d46e070a2629e3ad49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24743,
        "upload_time": "2017-01-17T17:28:39",
        "upload_time_iso_8601": "2017-01-17T17:28:39.097311Z",
        "url": "https://files.pythonhosted.org/packages/2b/81/b46ac00089147890f9bbbf38a4f076217a9e4b3600fbd1ca4842292f79d6/pyramid_session_redis-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3cdc01c779cedbca9c173ddfa2bb92776164ff28d296ec481273aec2693a3ee",
          "md5": "c42d26520b6763089ff385f2702d01a5",
          "sha256": "44292dfa55fb74c893d2dbc76f35bfdd6e7c52a5c64626474cbb27f01ad77419"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c42d26520b6763089ff385f2702d01a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27656,
        "upload_time": "2017-01-24T22:20:59",
        "upload_time_iso_8601": "2017-01-24T22:20:59.361486Z",
        "url": "https://files.pythonhosted.org/packages/a3/cd/c01c779cedbca9c173ddfa2bb92776164ff28d296ec481273aec2693a3ee/pyramid_session_redis-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6d13a0bc0ad1737c7cfb1cb758f0ed6c59884511a84bfe2a0d8293cbaa11d25",
          "md5": "4346ea3988d053cea425dbd4ecf4f983",
          "sha256": "52d4bfd6893463640665023c877b4ddbdd775ac977ec69d132320cfac57430e3"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4346ea3988d053cea425dbd4ecf4f983",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52969,
        "upload_time": "2017-10-18T01:02:06",
        "upload_time_iso_8601": "2017-10-18T01:02:06.682220Z",
        "url": "https://files.pythonhosted.org/packages/b6/d1/3a0bc0ad1737c7cfb1cb758f0ed6c59884511a84bfe2a0d8293cbaa11d25/pyramid_session_redis-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a8b439d1ba2c08f9cefa437b9b345d292c96c77b666cba375dc3ba4ffd675b9",
          "md5": "d04bc04bd03c5290776536ca9e8de6c7",
          "sha256": "58ad592db1307eee82ed2781ffe8b7381858370977ebf3b8daff06977741a063"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d04bc04bd03c5290776536ca9e8de6c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64485,
        "upload_time": "2019-04-29T00:10:04",
        "upload_time_iso_8601": "2019-04-29T00:10:04.846781Z",
        "url": "https://files.pythonhosted.org/packages/9a/8b/439d1ba2c08f9cefa437b9b345d292c96c77b666cba375dc3ba4ffd675b9/pyramid_session_redis-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f01b11db358cba4c095ecef93b60bf1b9436466ec4f5908613faee1a0b08bbfc",
          "md5": "633c037769002965b14e9f1ebcc1d820",
          "sha256": "af6700c0b73fc3ed15e48d445c1a9d2e156b2c4844131f4a72c1fce62d36ec79"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "633c037769002965b14e9f1ebcc1d820",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49266,
        "upload_time": "2019-09-20T18:24:30",
        "upload_time_iso_8601": "2019-09-20T18:24:30.267306Z",
        "url": "https://files.pythonhosted.org/packages/f0/1b/11db358cba4c095ecef93b60bf1b9436466ec4f5908613faee1a0b08bbfc/pyramid_session_redis-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c50b174e0ce7d7d1421ac8b13a12d460cf6a81f64b22d56b3ad503bf37e6679",
          "md5": "fd89ec31d56ed3935d1050721c2fa90d",
          "sha256": "8c6619a0c1ca3a600ab960a43ecf960b0e04fe2b8e08809d5b6bf8a537d06274"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fd89ec31d56ed3935d1050721c2fa90d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49387,
        "upload_time": "2019-12-17T22:44:22",
        "upload_time_iso_8601": "2019-12-17T22:44:22.495630Z",
        "url": "https://files.pythonhosted.org/packages/2c/50/b174e0ce7d7d1421ac8b13a12d460cf6a81f64b22d56b3ad503bf37e6679/pyramid_session_redis-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f45426e797904cf0553e8b48b719dbbd37161c83e22379a1819d23717652773",
          "md5": "5d84c4198a14c8d1154e52efc89d34b8",
          "sha256": "c40a6fb735ec15c27dce12ebd1d6355509e527f1958bddc991cb09d1c5254779"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d84c4198a14c8d1154e52efc89d34b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57271,
        "upload_time": "2020-10-20T21:49:16",
        "upload_time_iso_8601": "2020-10-20T21:49:16.258821Z",
        "url": "https://files.pythonhosted.org/packages/3f/45/426e797904cf0553e8b48b719dbbd37161c83e22379a1819d23717652773/pyramid_session_redis-1.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b124efe58e2d550ee156a16dc40ee7cdb6565ba262fcd9087a1a3b927210b82",
          "md5": "ddbbd5fc1ad4b78d12dbbdfd3d837cad",
          "sha256": "613cf26268bef97e22291f05f0a08af3c70024ba35a8db171b82e1bf75d1791b"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ddbbd5fc1ad4b78d12dbbdfd3d837cad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75919,
        "upload_time": "2021-03-30T20:54:10",
        "upload_time_iso_8601": "2021-03-30T20:54:10.563423Z",
        "url": "https://files.pythonhosted.org/packages/5b/12/4efe58e2d550ee156a16dc40ee7cdb6565ba262fcd9087a1a3b927210b82/pyramid_session_redis-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91bbd76a43efa777feaed43960f82919526d3963060a9a6008225c627e4cc6fe",
          "md5": "f0211dda385dc47ab5d61466b429dfa0",
          "sha256": "50669c0f6e9d44641143d73b92ff7e37c1ae2934ffc8500f2b1de10c7c41c8f0"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f0211dda385dc47ab5d61466b429dfa0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76247,
        "upload_time": "2021-04-01T14:34:34",
        "upload_time_iso_8601": "2021-04-01T14:34:34.985536Z",
        "url": "https://files.pythonhosted.org/packages/91/bb/d76a43efa777feaed43960f82919526d3963060a9a6008225c627e4cc6fe/pyramid_session_redis-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53435d5e8eae34413c2edfad4fb6c522b1e7b06ac6fad23d5f97072fddafc93d",
          "md5": "ed906d04b7ef2afc1c109a5aded1753e",
          "sha256": "0b9ec19d11f1c5cdc708bbdfd57dcacfb37804688921ebea5b34c86d2aa60991"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed906d04b7ef2afc1c109a5aded1753e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78972,
        "upload_time": "2021-08-10T20:04:44",
        "upload_time_iso_8601": "2021-08-10T20:04:44.930588Z",
        "url": "https://files.pythonhosted.org/packages/53/43/5d5e8eae34413c2edfad4fb6c522b1e7b06ac6fad23d5f97072fddafc93d/pyramid_session_redis-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec79fdd2f9554061e498a5743be5071906af6c36e5f1fa1d44b44f8f6785bb8b",
          "md5": "58548234b970c8ba08a3a5f89a91f65a",
          "sha256": "bbe74e27eb199cc565d45163d970a358a7084d41f46847f782fbdd1d84b9c8e9"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "58548234b970c8ba08a3a5f89a91f65a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76217,
        "upload_time": "2021-11-16T23:04:09",
        "upload_time_iso_8601": "2021-11-16T23:04:09.722184Z",
        "url": "https://files.pythonhosted.org/packages/ec/79/fdd2f9554061e498a5743be5071906af6c36e5f1fa1d44b44f8f6785bb8b/pyramid_session_redis-1.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec79fdd2f9554061e498a5743be5071906af6c36e5f1fa1d44b44f8f6785bb8b",
        "md5": "58548234b970c8ba08a3a5f89a91f65a",
        "sha256": "bbe74e27eb199cc565d45163d970a358a7084d41f46847f782fbdd1d84b9c8e9"
      },
      "downloads": -1,
      "filename": "pyramid_session_redis-1.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "58548234b970c8ba08a3a5f89a91f65a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76217,
      "upload_time": "2021-11-16T23:04:09",
      "upload_time_iso_8601": "2021-11-16T23:04:09.722184Z",
      "url": "https://files.pythonhosted.org/packages/ec/79/fdd2f9554061e498a5743be5071906af6c36e5f1fa1d44b44f8f6785bb8b/pyramid_session_redis-1.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}