{
  "info": {
    "author": "Six Feet Up, Inc.",
    "author_email": "getpaid-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Framework :: Zope3",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Office/Business :: Financial",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "This package contains paymentech payment processor functionality for the getpaid\nframework.\n\n\n=======\nCHANGES\n=======\n\n\n0.3 (2008-08-29)\n----------------\n\n* Added buildout files and general text documents to project root.\n* removed setup.cfg\n\n\n0.2 (2008-08-21)\n----------------\n\n* Eggified package\n* Added buildout files and general text documents to project root.\n\nDetailed Documentation\n**********************\n\n============================\nGetPaid Paymentech Interface\n============================\n\nStore Specific Processor Setting Tests\nThis is only for Authorization and Mark for Capture\nWe are doing the tests of Section A and C of \nthe Orbital Certification Guidelines\n\n\nSTORE CREATION:\n      \n      >>> from getpaid.core import interfaces\n      >>> from zope.app.annotation import IAttributeAnnotatable\n      >>> from zope.interface import implements\n      >>> class Store:\n      ...    implements(interfaces.IStore, IAttributeAnnotatable)\n      >>> store = Store()\n\nLINE ITEM CREATION:\n      \n      >>> from getpaid.core import order, cart, item\n      >>> from cPickle import loads, dumps\n      >>> order_ids = []\n      >>> abc = item.LineItem()\n      >>> abc.name = 'abc'\n      >>> abc.quantity = 1\n      \n      >>> def createOrderId():\n      ...     order_id = str(random.randint( 2**10, 2**30 ))\n      ...     while order_id in order_ids:\n      ...         order_id = str(random.randint( 2**10, 2**30 ))\n      ...     order_ids.append(order_id)\n      ...     return order_id\n\nPAYMENT PROCESSOR CREATION:\n\n      >>> from getpaid.paymentech.paymentech import PaymentechAdapter\n      >>> processor = PaymentechAdapter(store)\n      >>> processor.options.merchant_id = \"700000007587\"\n      >>> processor.options.terminal_id = \"001\"\n      >>> processor.server = processor._sites['Test1']\n\n\nSECTION A: Authorization only transactions\n==========================================\n\nGeneric function to test the Authorization:\n\n      >>> from getpaid.paymentech.paymentech import createAuthorizeXMLFile\n      >>> from getpaid.paymentech.paymentech import getElement\n      >>> import random\n      >>> from Products.PloneGetPaid.browser.checkout import BillingInfo\n      >>> from datetime import date\n      >>> def test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, my_order):\n      ...     my_cart = cart.ShoppingCart()\n      ...     abc.cost = amount \n      ...     my_cart['abc'] = abc\n      ...     my_order.shopping_cart = loads(dumps(my_cart))\n      ...     payment_infos = BillingInfo(my_order)\n      ...     payment_infos.name_on_card = \"Test Cardholder\"\n      ...     payment_infos.phone_number = \"1234567890\"\n      ...     payment_infos.cc_expiration = date(2009, 2, 1)\n      ...     payment_infos.credit_card_type = credit_card_type\n      ...     payment_infos.credit_card = credit_card_number\n      ...     payment_infos.cc_cvc = cc_cvc\n      ...     data = createAuthorizeXMLFile('A', processor.options, my_order, payment_infos)\n      ...     return processor.process(data, timeout=None)\n\nTEST 1:\n      >>> credit_card_type = \"Visa\"\n      >>> credit_card_number = \"4788250000028291\"\n      >>> cc_cvc = \"111\"\n      >>> amount = 30.00\n      >>> order1 = order.Order()\n      >>> order1.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order1)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"00\"\n      True\n      >>> res_trans_ref_num1 = result.trans_ref_num\n      \nTEST 2:\n      >>> credit_card_type = \"Visa\"\n      >>> credit_card_number = \"4788250000028291\"\n      >>> cc_cvc = \"222\"\n      >>> amount = 38.01\n      >>> order2 = order.Order()\n      >>> order2.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order2)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"05\"\n      True\n      >>> res_trans_ref_num2 = result.trans_ref_num\n\nTEST 3:\n      >>> credit_card_type = \"Mastercard\"\n      >>> credit_card_number = \"5454545454545454\"\n      >>> cc_cvc = \"333\"\n      >>> amount = 41.00\n      >>> order3 = order.Order()\n      >>> order3.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order3)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"00\"\n      True\n      >>> res_trans_ref_num3 = result.trans_ref_num\n\nTEST 4:\n      >>> credit_card_type = \"Mastercard\"\n      >>> credit_card_number = \"5454545454545454\"\n      >>> cc_cvc = \"666\"\n      >>> amount = 11.02\n      >>> order4 = order.Order()\n      >>> order4.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order4)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"01\"\n      True\n      >>> res_trans_ref_num4 = result.trans_ref_num\n\nTEST 5:\n      >>> credit_card_type = \"American Express\"\n      >>> credit_card_number = \"371449635398431\"\n      >>> cc_cvc = \"1111\"\n      >>> amount = 1055.00\n      >>> order5 = order.Order()\n      >>> order5.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order5)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"00\"\n      True\n      >>> res_trans_ref_num5 = result.trans_ref_num\n      \nTEST 6:\n      >>> credit_card_type = \"American Express\"\n      >>> credit_card_number = \"371449635398431\"\n      >>> cc_cvc = \"555\"\n      >>> amount = 75.00\n      >>> order6 = order.Order()\n      >>> order6.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order6)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"00\"\n      True\n      >>> res_trans_ref_num6 = result.trans_ref_num\n      \nTEST 7:\n      >>> credit_card_type = \"Discover\"\n      >>> credit_card_number = \"6011000995500000\"\n      >>> cc_cvc = \"666\"\n      >>> amount = 10.00\n      >>> order7 = order.Order()\n      >>> order7.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order7)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"00\"\n      True\n      >>> res_trans_ref_num7 = result.trans_ref_num\n      \nTEST 8:\n      >>> credit_card_type = \"Discover\"\n      >>> credit_card_number = \"6011000995500000\"\n      >>> cc_cvc = \"444\"\n      >>> amount = 63.03\n      >>> order8 = order.Order()\n      >>> order8.order_id = order_id = createOrderId()\n      >>> result = test_authorize(credit_card_type, credit_card_number, cc_cvc, amount, order8)\n      >>> res_order_id = getElement(result.result_resp, 'OrderID')\n      >>> order_id == res_order_id\n      True\n      >>> res_resp_code = getElement(result.result_resp, 'RespCode')\n      >>> res_resp_code == \"04\"\n      True\n      >>> res_trans_ref_num8 = result.trans_ref_num\n      \n\nSECTION C: Mark for Capture\n===========================\n\nGeneric function to test the Capture:\n\n      >>> from getpaid.paymentech.paymentech import createCaptureXMLFile\n      >>> def test_capture(order, trans_ref_num, amount):\n      ...     data = createCaptureXMLFile(processor.options, order, trans_ref_num, amount)\n      ...     return processor.process(data, timeout=None)\n      \nTEST A-1:\n      >>> amount = 30.00\n      >>> result = test_capture(order1, res_trans_ref_num1, amount)\n      >>> res_resp_code = getElement(result.result_resp, 'ProcStatus')\n      >>> res_resp_code == \"0\"\n      True\n      >>> res_trans_ref_num = result.trans_ref_num\n\nTEST A-3:\n      >>> amount = 41.00\n      >>> result = test_capture(order3, res_trans_ref_num3, amount)\n      >>> res_resp_code = getElement(result.result_resp, 'ProcStatus')\n      >>> res_resp_code == \"0\"\n      True\n      >>> res_trans_ref_num = result.trans_ref_num\n\nTEST A-5:\n      >>> amount = 1055.00\n      >>> result = test_capture(order5, res_trans_ref_num5, amount)\n      >>> res_resp_code = getElement(result.result_resp, 'ProcStatus')\n      >>> res_resp_code == \"0\"\n      True\n      >>> res_trans_ref_num = result.trans_ref_num\n\nTEST A-7:\n      >>> amount = 10.00\n      >>> result = test_capture(order7, res_trans_ref_num7, amount)\n      >>> res_resp_code = getElement(result.result_resp, 'ProcStatus')\n      >>> res_resp_code == \"0\"\n      True\n      >>> res_trans_ref_num = result.trans_ref_num\n\n\n\n\n\n\n\nDownload\n**********************",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://code.google.com/p/getpaid",
    "keywords": null,
    "license": "ZPL2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "getpaid.paymentech",
    "package_url": "https://pypi.org/project/getpaid.paymentech/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/getpaid.paymentech/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://code.google.com/p/getpaid"
    },
    "release_url": "https://pypi.org/project/getpaid.paymentech/0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Get paid paymentech payment processor functionality",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 792367,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1453257bb21f8faff91c0e451aa16b579ee76fddd299c963c43b3e8c7069e37",
          "md5": "d7115b75a876b05967ad1e0139313910",
          "sha256": "e09e4bd3210f04c284b7534bd270073173cccbeaf2b032bdc3ad1824951ae634"
        },
        "downloads": -1,
        "filename": "getpaid.paymentech-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d7115b75a876b05967ad1e0139313910",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6989,
        "upload_time": "2008-08-21T21:00:13",
        "upload_time_iso_8601": "2008-08-21T21:00:13Z",
        "url": "https://files.pythonhosted.org/packages/b1/45/3257bb21f8faff91c0e451aa16b579ee76fddd299c963c43b3e8c7069e37/getpaid.paymentech-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d37d476ac9348642ab4cbd6a3bd90e7ff80d8d5efa8c447e7d97ad53e74d6689",
          "md5": "41aae543a65b67a3d02ed1ca338cb3b8",
          "sha256": "efbb0cf939fa14685e72f26bc85b26c68fb952287aec0c000c4a0304a374a381"
        },
        "downloads": -1,
        "filename": "getpaid.paymentech-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "41aae543a65b67a3d02ed1ca338cb3b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8843,
        "upload_time": "2009-01-28T20:09:43",
        "upload_time_iso_8601": "2009-01-28T20:09:43Z",
        "url": "https://files.pythonhosted.org/packages/d3/7d/476ac9348642ab4cbd6a3bd90e7ff80d8d5efa8c447e7d97ad53e74d6689/getpaid.paymentech-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d37d476ac9348642ab4cbd6a3bd90e7ff80d8d5efa8c447e7d97ad53e74d6689",
        "md5": "41aae543a65b67a3d02ed1ca338cb3b8",
        "sha256": "efbb0cf939fa14685e72f26bc85b26c68fb952287aec0c000c4a0304a374a381"
      },
      "downloads": -1,
      "filename": "getpaid.paymentech-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "41aae543a65b67a3d02ed1ca338cb3b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8843,
      "upload_time": "2009-01-28T20:09:43",
      "upload_time_iso_8601": "2009-01-28T20:09:43Z",
      "url": "https://files.pythonhosted.org/packages/d3/7d/476ac9348642ab4cbd6a3bd90e7ff80d8d5efa8c447e7d97ad53e74d6689/getpaid.paymentech-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}