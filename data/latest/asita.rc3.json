{
  "info": {
    "author": "MattÃ©o Gaillard",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# What is Asita ?\n**Asita** is a **web application framework for python**. It is designed to be easy to use and be more easy for **javascript users** to use python frameworks because it is based on **express-js framework**.\n\n![License](https://img.shields.io/github/license/Matteo0810/PyServ.svg)\n\n## How to install Asita ?\n\nInstall this package using [pip](https://pip.pypa.io/en/stable/getting-started/)\n\n`$ pip install asita`\n\n# Documentation\n\n## Get started\n\n### Exemple\n\n```python\nfrom asita import Application\n\n# creating application instance\napp = Application()\n\n# callback when web server is ready\ndef listen_callback(error):\n    if error:\n        raise error\n    print(f\"Server listening on port 1000.\")\n\n# listen the webserver on port (for instance port 1000)\napp.listen(1000, lambda error: listen_callback(error))\n```\n\n### **Application** class\n\n#### Methods\n\n| Name | Parameters | Description | \n|------|:-----------:|:----------:|\n| all(**path**, **callback**) | path: **string**, callback: **function** | Routes an HTTP request, where **all** is the HTTP method such as GET, PUT, POST, OATCH, DELETE, HEAD |\n| post(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP POST requests |\n| get(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP GET requests |\n| put(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP PUT requests |\n| patch(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP PATCH requests |\n| delete(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP DELETE requests |\n| head(**path**, **callback**) | path: **string**, callback: **function** | Routes HTTP HEAD requests |\n| define_asset(**name**, **directory**) | name: **string**, directory: **string** | Define the asset directory access |\n| listen(**port**, **callback**) | port: **integer**, callback: **function** | start listening a port |\n\n## Create a route\n\n### Exemple\n\n```python\n# some awesome things check request and response methods :-)\ndef home(request, response):\n    pass\n\n# \"/\" is the default path\napp.all(\"/\", lambda req, res: home(req, res))\n```\n\n> To see more example, check the example file.\n\n### **Request** class\n\n#### Attributs\n\n| Name | Description | \n|------|:-----------:|\n| headers | headers of the request |\n| session | client session |\n| path | the url's path |\n| request_type | type of request |\n| server_address | address of the requested server |\n| server_version | version of the requested server |\n| protocol_version | version of the HTTP protocol |\n| body | the body content of the POST request |\n| query | url params |\n\n#### Methods\n\n| Name | Parameters | Description | \n|------|:-----------:|:----------:|\n| get(**value**) | value: **string** | get a header of the request |\n| accepts() | none | get types which are accepted |\n\n### **Response** class\n\n#### Methods\n\n| Name | Parameters | Description | \n|------|:-----------:|:----------:|\n| status(**code**) | code: **HttpResponses** | return the response's state |\n| set_header(**key**, **value**) | key: **string**, value: **string** | add/update headers |\n| send(**data**, **type?**, **encoded?**) | data: **object**, type: **string**, encoded: **boolean**, is_asset: **boolean** | send response |\n| json(**data**) | data: **dict** | write json on a page |\n| render(**path**) | path: **string** | render **html** file. |\n| end() | none | stop the current request |\n\n> **?** means that it is optionnal\n\n### **Sessions** class\n\n| Name | Parameters | Description | \n|------|:-----------:|:----------:|\n| add() | none | create new empty session |\n| all() | none | get all sessions |\n| has(**sessionId**) | key: **string** | verify if a session exists |\n| get(**sessionId**) | key: **string** | get a session by id |\n| delete(**sessionId**) | key: **string** | delete session by id  |\n| radnom_session_id **@Static method** | none | get all sessions |\n\n### **Session** class\n\n| Name | Parameters | Description | \n|------|:-----------:|:----------:|\n| get_session_id | none | get the id of the session |\n| set(**key**, **value**) | key: **string**, value: **string** | add data to the client session |\n| has(**key**) | key: **string** | verify if client session has the selected data |\n| get(**key**) | key: **string** | get data from client session |\n| delete(**key**) | key: **string** | delete data from client session  |\n| all() | none | get client session data |\n\n## Enumerations\n\n### **HttpMethods**\n\n| HTTP Methods |\n|------|\n| GET |\n| POST |\n| PUT |\n| DELETE |\n| PATCH |\n| HEAD |\n| ALL |\n\n### **HttpResponses**\n\n#### Client side\n\n| Response types | Codes |\n|------|:------:|\n| OK | **200** |\n| NO_CONTENT | **204** |\n| UNAUTHORIZED | **401** |\n| FORBIDDEN | **403** |\n| NOT_FOUND | **404** |\n| BAD_REQUEST | **400** |\n\n#### Server side\n\n| Response types | Codes |\n|------|:------:|\n| INTERNAL_SERVER_ERROR | **500** |\n\n# License\n\n__MIT LICENSE__",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Matteo0810/Asia",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asita",
    "package_url": "https://pypi.org/project/asita/",
    "platform": "",
    "project_url": "https://pypi.org/project/asita/",
    "project_urls": {
      "Homepage": "https://github.com/Matteo0810/Asia"
    },
    "release_url": "https://pypi.org/project/asita/0.2.5/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "A web application framework",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11998405,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cd65100d608a9edf82eb3948b30046a1dfbc7ac3826564ad6b9bf674a28a2d9",
          "md5": "cea69ba0b38298afe609d1aecc9faaff",
          "sha256": "1881aa83f36573186e7782dc5e3412c7ace8988e32afab12628ba26b77c0c20d"
        },
        "downloads": -1,
        "filename": "asita-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cea69ba0b38298afe609d1aecc9faaff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7118,
        "upload_time": "2021-11-07T20:55:34",
        "upload_time_iso_8601": "2021-11-07T20:55:34.993187Z",
        "url": "https://files.pythonhosted.org/packages/8c/d6/5100d608a9edf82eb3948b30046a1dfbc7ac3826564ad6b9bf674a28a2d9/asita-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df67f6650c607d7537b0a4074a8eb3933da875be35d1ad2763fb4c95acf75e9",
          "md5": "68e60c3ba29dee9680238c8d3c2de8d2",
          "sha256": "000120659201392528822eca6569f55586e4cf04bd559090374fe7fc9b20c766"
        },
        "downloads": -1,
        "filename": "asita-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68e60c3ba29dee9680238c8d3c2de8d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 7839,
        "upload_time": "2021-11-07T11:25:15",
        "upload_time_iso_8601": "2021-11-07T11:25:15.022777Z",
        "url": "https://files.pythonhosted.org/packages/7d/f6/7f6650c607d7537b0a4074a8eb3933da875be35d1ad2763fb4c95acf75e9/asita-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dba8c0fc8cc7f9fbbf8800874f44a4a1cb49c11f8b17f26392c8ecadeb41dc96",
          "md5": "00f7c58c88125645fb0588cf3cc56811",
          "sha256": "09ff4aa4d044d1de3ea59aaeb8fcf81023eea2b51da4c832b141259955f80ddd"
        },
        "downloads": -1,
        "filename": "asita-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00f7c58c88125645fb0588cf3cc56811",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7117,
        "upload_time": "2021-11-07T20:56:00",
        "upload_time_iso_8601": "2021-11-07T20:56:00.904918Z",
        "url": "https://files.pythonhosted.org/packages/db/a8/c0fc8cc7f9fbbf8800874f44a4a1cb49c11f8b17f26392c8ecadeb41dc96/asita-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5eb7ab12fb141592c0c2054c9739bbf12d84c065152d5d115dfa3806aaf42c4",
          "md5": "06c214154a2cec73e21e0f25ce88a7eb",
          "sha256": "634a87667163fe0affc6e1b9e40b753338825b43e82ba9c9e074ad7a76a37097"
        },
        "downloads": -1,
        "filename": "asita-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06c214154a2cec73e21e0f25ce88a7eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6798,
        "upload_time": "2021-11-10T20:13:51",
        "upload_time_iso_8601": "2021-11-10T20:13:51.141997Z",
        "url": "https://files.pythonhosted.org/packages/d5/eb/7ab12fb141592c0c2054c9739bbf12d84c065152d5d115dfa3806aaf42c4/asita-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23793c0182f1ee26781cfd1894f1ba1bc2a40b9a6aee84289074bf40feb24050",
          "md5": "7100a5a7a2e528ceb7eb63879251c9de",
          "sha256": "645af9be441590ea86669985001ba04d953dfcb65a5fcba2ff2b0bb5687ca6ac"
        },
        "downloads": -1,
        "filename": "asita-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7100a5a7a2e528ceb7eb63879251c9de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8687,
        "upload_time": "2021-11-10T20:29:25",
        "upload_time_iso_8601": "2021-11-10T20:29:25.271557Z",
        "url": "https://files.pythonhosted.org/packages/23/79/3c0182f1ee26781cfd1894f1ba1bc2a40b9a6aee84289074bf40feb24050/asita-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23793c0182f1ee26781cfd1894f1ba1bc2a40b9a6aee84289074bf40feb24050",
        "md5": "7100a5a7a2e528ceb7eb63879251c9de",
        "sha256": "645af9be441590ea86669985001ba04d953dfcb65a5fcba2ff2b0bb5687ca6ac"
      },
      "downloads": -1,
      "filename": "asita-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7100a5a7a2e528ceb7eb63879251c9de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 8687,
      "upload_time": "2021-11-10T20:29:25",
      "upload_time_iso_8601": "2021-11-10T20:29:25.271557Z",
      "url": "https://files.pythonhosted.org/packages/23/79/3c0182f1ee26781cfd1894f1ba1bc2a40b9a6aee84289074bf40feb24050/asita-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}