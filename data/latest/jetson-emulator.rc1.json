{
  "info": {
    "author": "Tea Vui Huang",
    "author_email": "tvhuang@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: GPU :: NVIDIA CUDA",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Software Development",
      "Topic :: System :: Emulators",
      "Topic :: System :: Hardware"
    ],
    "description": "Jetson AI-Computer Emulator \n==================================\nThe Jetson Emulator emulates the NVIDIA Jetson AI-Computer's Inference and Utilities API for image classification, object detection and image segmentation (i.e. imageNet, detectNet and segNet). The intended users are makers, learners, developers and students who are curious about AI computers and AI edge-computing but are not ready or able to invest in an actual device such as the NVIDIA Jetson Nano Developer Kit (https://developer.nvidia.com/embedded/jetson-nano-developer-kit). E.g. this allows every student in a computer class to have their own personal AI computer to explore and experiment with. This Jetson Emulator presents a pre-configured, ready-to-run kit with 2 virtual HDMI displays and 4 virtual live-cameras. This enables usage familiarisation with the Jetson API and experimentation with AI computer vision inference. It is a great way to quickly and easily get 'hands-on' with Jetson and experience the power of AI.\n\n\n\nSystem Setup\n===================\nNo setup is required. The Jetson Emulator is virtually pre-configured with JetPack and operates off-line (no Firewall ports need to be configured as video streaming is simulated). There is no need to run the Docker Container nor build the jetson-inference project. The user can start coding their first Jetson AI program as soon as the Python package is installed. The video output is displayed inline on the Jupyter notebook.\n\n\n\nImporting the libary\n===================\nThe Jetson Emulator library provides a subset of the NVIDIA \"jetson.inference\" library API. To import the jetson_emulator module use:\n```python\nimport jetson_emulator.inference as inference\nimport jetson_emulator.utils as utils\n```\n\nThis way, the module can referred to as \"inference\" and \"utils\" throughout the rest of the application. \nThe module can also be imported using the name \"jetson_emulator.inference\" instead of \"jetson.inference\" for existing code using the NVIDIA library.\nReference API documentation for the \"jetson-inference\" Python libraries can be found below.\n\n| Jetson Inference API      | URL                                                                                     | \n|:-------------------------:|:---------------------------------------------------------------------------------------:|\n| imageNet/detectNet/segNet | https://rawgit.com/dusty-nv/jetson-inference/dev/docs/html/python/jetson.inference.html |\n| jetson-utils              | https://rawgit.com/dusty-nv/jetson-inference/dev/docs/html/python/jetson.utils.html     |\n\n\nImage Recognition\n===================\nImage recognition can be performed by classifying images with ImageNet. The imageNet object accepts an input image and outputs the probability for each class. The supported image recognition network is 'GoogleNet' and can recognize up to 1000 different classes of objects from the ImageNet ILSVRC dataset, like different kinds of fruits and vegetables, many different species of animals, along with everyday man-made objects like vehicles, office furniture, sporting equipment, etc.\n\n*Note: This imageNet only works with simulated images, and detects a maximum of 1 object.*\n\n\nSample code for imageNet (Image Recognition):\n```python\nimport jetson_emulator.inference as inference\nimport jetson_emulator.utils as utils\n\n# load the recognition network\nnet = inference.imageNet(\"googlenet\")\nfor x in range(1,6):\n\t# emulator API to generate sample images for imageNet\n\tfilename = net.emulatorGetImageFile()      \n\timg = utils.loadImage(filename) \n\tclass_idx, confidence = net.Classify(img)            \n\tclass_desc = net.GetClassDesc(class_idx)            \n\tprint(\"image \"+str(x)+\" is recognized as '{:s}' (class #{:d}) with {:f}% confidence\".\n\tformat(class_desc, class_idx, confidence*100))\n```\n\n\nSample output for imageNet:\n```\nimage 1 is recognized as 'dugong, Dugong dugon' (class #149) with 79.249234% confidence\nimage 2 is recognized as 'gasmask, respirator, gas helmet' (class #570) with 69.749061% confidence\nimage 3 is recognized as 'cello, violoncello' (class #486) with 48.442260% confidence\nimage 4 is recognized as 'butternut squash' (class #942) with 43.431145% confidence\nimage 5 is recognized as 'accordion, piano accordion, squeeze box' (class #401) with 51.372652% confidence\n```\n\n\n\nObject Detection\n===================\nObject detection can be performed with DetectNet. It finds where in the frame various objects are located by extracting their bounding boxes. The detectNet object accepts an image as input, and outputs a list of coordinates of the detected bounding boxes along with their classes and confidence values. The supported detection model is a 91-class SSD-Mobilenet-v2 model trained on the MS COCO dataset, which include people, vehicles, animals, and assorted types of household objects. The overlay is fixed to 'boxes'. \n\n*Note: This detectNet only works with the virtual live-cams, and detects a maximum of 3 objects.*\n\n\n| Device     | Video source URI                                   | Desc           |\n|:----------:|:--------------------------------------------------:|:---------------:\n| Camera #1  | rtsp://jetson_emulator:554/detectNet/road_cam/4k   | Moving traffic |\n| Camera #2  | rtsp://jetson_emulator:554/detectNet/random_cam/4k | Random objects |\n\n\n| Device     | Video output URI | Desc           |\n|:----------:|:----------------:|:---------------:\n| Display #0 |   display://0    | -              |\n| Display #1 |   display://1    | 4K             |\n\n\nCamera #1 features a \"real-time\" video stream of a moving traffic. From left to right of the video, the detectable objects in the traffic is person, bicycle and car. The view of the car is obstructed approximately 50% of the time, hence it may not always be detectable. Camera #2 is a video stream of 1 to 3 random objects.\n\n\nSample code for DetectNet (Object Detection):\n```python\nimport jetson_emulator.inference as inference\nimport jetson_emulator.utils as utils\n\nnetwork = \"ssd-mobilenet-v2\"\nnet = inference.detectNet(network, threshold=0.5)\ninput_URI = \"rtsp://jetson_emulator:554/detectNet/road_cam/4k\" \ninput  = utils.videoSource(input_URI, argv=\"\")\noutput = utils.videoOutput(\"display://1\", argv=\"\")\nimg = input.Capture()\ndetections = net.Detect(img, \"box\")\noutput.SetStatus(\"{:s} | Network {:.0f} FPS\".format(network, net.GetNetworkFPS()))\noutput.Render(img)\nprint(\"detected {:d} objects in image\\n\".format(len(detections)) )\nfor detection in detections:\n\tprint(\"class_desc:\", net.GetClassDesc(detection.ClassID))  \n\tprint(detection)\n```\n\n\nSample output for DetectNet:\n```\ndetected 2 objects in image\n\nclass_desc: person\n<jetson.inference.Detection object>\n   -- ClassID: 2\n   -- Confidence: 0.814237\n   -- Left: 146.0\n   -- Top: 466.0\n   -- Right: 204.0\n   -- Bottom: 504.0\n   -- Width: 58.0\n   -- Height: 38.0\n   -- Area: 2204.0\n   -- Center: (175.0, 485.0)\n\nclass_desc: bicycle\n<jetson.inference.Detection object>\n   -- ClassID: 3\n   -- Confidence: 0.966989\n   -- Left: 409.0\n   -- Top: 451.0\n   -- Right: 483.0\n   -- Bottom: 519.0\n   -- Width: 74.0\n   -- Height: 68.0\n   -- Area: 5032.0\n   -- Center: (446.0, 485.0)\n```\n\n\nImage Segmentation\n===================\nSemantic segmentation with SegNet is based on image recognition, except the classifications occur at the pixel level as opposed to the entire image. SegNet accepts as input a 2D image, and outputs a second image with the per-pixel classification mask overlay. Each pixel of the mask corresponds to the class of object that was classified. The pre-trained semantic segmentation model supported is the 21-class Pascal VOC 'fcn-resnet18-voc-320x320'. It contains various people, animals, vehicles, and household objects. Visualization is set to 'mask'.\n\n*Note: This segNet only works with the virtual live-cams, and detects a maximum of 2 objects.*\n\n\n| Device     | Video source URI                                 | Desc           |\n|:----------:|:------------------------------------------------:|:---------------:\n| Camera #1  | rtsp://jetson_emulator:554/segNet/sofa_cam/4k    | Moving person  |\n| Camera #2  | rtsp://jetson_emulator:554/segNet/random_cam/4k  | Random objects |\n\n\n| Device     | Video output URI | Desc           |\n|:----------:|:----------------:|:---------------:\n| Display #0 |   display://0    | -              |\n| Display #1 |   display://1    | 4K             |\n\n\nCamera #1 features a \"real-time\" video stream of a moving person resting on a sofa. The person tosses back and forth, and the sofa contract and expands accordingly. Camera #2 is a video stream of 2 random objects, one on top of the other.\n\n\nSample code for SegNet (Image Segmentation):\n```python\nimport jetson_emulator.inference as inference\nimport jetson_emulator.utils as utils\nimport numpy as np\n\nnetwork = \"fcn-resnet18-voc-320x320\"\nnet = inference.segNet(network, None)\ninput_URI = \"rtsp://jetson_emulator:554/segNet/sofa_cam/4k\"\ninput  = utils.videoSource(input_URI, None)\noutput = utils.videoOutput(\"display://1\", None)\nimg = input.Capture()\nnet.Process(img, ignore_class=\"void\")\n\n# get image mask for video output\nimg_mask = utils.cudaAllocMapped(width=img.shape[1], height=img.shape[0], format=img.format) \nnet.Mask(img_mask, img_mask.shape[1], img_mask.shape[0], filter_mode=\"linear\")\noutput.SetStatus(\"{:s} | Network {:.0f} FPS\".format(network, net.GetNetworkFPS()))\noutput.Render(img_mask)\n\n# get class mask to calculate histogram\ngrid_width, grid_height = net.GetGridSize()\nclass_mask = utils.cudaAllocMapped(width=grid_width, height=grid_height, format=\"gray8\")\nnet.Mask(class_mask, grid_width, grid_height, filter_mode=\"linear\")\nclass_mask_np = utils.cudaToNumpy(class_mask)\n\n# compute the number of times each class occurs in the mask\nmax_class = np.amax(class_mask_np)\nclass_histogram, _ = np.histogram(class_mask_np, bins=max_class+1, density=False)\nprint('-----------------------------------------')\nprint(' ID  class name         count   %')\nprint('-----------------------------------------')\nfor n in range(max_class+1):\n\tpercentage = float(class_histogram[n]) / float(grid_width * grid_height)\n\tprint(' {:>2d}  {:<18s} {:>5d}   {:f}'.format(n, net.GetClassDesc(n), class_histogram[n], percentage)) \n```\n\nSample output for SegNet:\n```\n-----------------------------------------\n ID  class name         count   %\n-----------------------------------------\n  0  background         24000   0.234375\n  1  aeroplane              0   0.000000\n  2  bicycle                0   0.000000\n  3  bird                   0   0.000000\n  4  boat                   0   0.000000\n  5  bottle                 0   0.000000\n  6  bus                    0   0.000000\n  7  car                    0   0.000000\n  8  cat                    0   0.000000\n  9  chair                  0   0.000000\n 10  cow                    0   0.000000\n 11  diningtable            0   0.000000\n 12  dog                    0   0.000000\n 13  horse                  0   0.000000\n 14  motorbike              0   0.000000\n 15  person             53120   0.518750\n 16  pottedplant            0   0.000000\n 17  sheep                  0   0.000000\n 18  sofa               25280   0.246875\n```\n\nAuthor and Citation\n===================\nTea Vui Huang. (2020, October 19). \nJetson AI-Computer Emulator. http://doi.org/10.5281/zenodo.4106061\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teavuihuang/jetson-emulator",
    "keywords": "deep-learning GPU jetson emulator AI edge-computing computer vision inference image classification object detection segmentation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jetson-emulator",
    "package_url": "https://pypi.org/project/jetson-emulator/",
    "platform": "",
    "project_url": "https://pypi.org/project/jetson-emulator/",
    "project_urls": {
      "Homepage": "https://github.com/teavuihuang/jetson-emulator"
    },
    "release_url": "https://pypi.org/project/jetson-emulator/1.0.0/",
    "requires_dist": [
      "matplotlib (>=3.2.2)",
      "numpy (>=1.18.5)"
    ],
    "requires_python": ">=3.7.9",
    "summary": "Emulator of NVIDIA Jetson AI-computer for makers, learners, developers and students",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8445230,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48c1d9760340ef83a4ecca1d10d5c3d78cc602613e56a7f5180780d475d4ab0e",
          "md5": "74daea9fc6e37bcb044f980402273470",
          "sha256": "694f9e04c2075ec431b7ce42ba5dccc25972a5542885b1c9f57e85646a9f5534"
        },
        "downloads": -1,
        "filename": "jetson_emulator-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74daea9fc6e37bcb044f980402273470",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 28476,
        "upload_time": "2020-10-19T10:00:07",
        "upload_time_iso_8601": "2020-10-19T10:00:07.576623Z",
        "url": "https://files.pythonhosted.org/packages/48/c1/d9760340ef83a4ecca1d10d5c3d78cc602613e56a7f5180780d475d4ab0e/jetson_emulator-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1600bf7bca75020fb5af781b30fedf7107f2540fb4a39a05cdc4dfd5c8cad670",
          "md5": "01f1375deeb691d4a8328cf082e4036f",
          "sha256": "2589cf5dfc25447ab7326f67bc0ef7d65ab65db56a901243a2efeabc1d16b681"
        },
        "downloads": -1,
        "filename": "jetson-emulator-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01f1375deeb691d4a8328cf082e4036f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.9",
        "size": 31748,
        "upload_time": "2020-10-19T10:00:09",
        "upload_time_iso_8601": "2020-10-19T10:00:09.890784Z",
        "url": "https://files.pythonhosted.org/packages/16/00/bf7bca75020fb5af781b30fedf7107f2540fb4a39a05cdc4dfd5c8cad670/jetson-emulator-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48c1d9760340ef83a4ecca1d10d5c3d78cc602613e56a7f5180780d475d4ab0e",
        "md5": "74daea9fc6e37bcb044f980402273470",
        "sha256": "694f9e04c2075ec431b7ce42ba5dccc25972a5542885b1c9f57e85646a9f5534"
      },
      "downloads": -1,
      "filename": "jetson_emulator-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74daea9fc6e37bcb044f980402273470",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.9",
      "size": 28476,
      "upload_time": "2020-10-19T10:00:07",
      "upload_time_iso_8601": "2020-10-19T10:00:07.576623Z",
      "url": "https://files.pythonhosted.org/packages/48/c1/d9760340ef83a4ecca1d10d5c3d78cc602613e56a7f5180780d475d4ab0e/jetson_emulator-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1600bf7bca75020fb5af781b30fedf7107f2540fb4a39a05cdc4dfd5c8cad670",
        "md5": "01f1375deeb691d4a8328cf082e4036f",
        "sha256": "2589cf5dfc25447ab7326f67bc0ef7d65ab65db56a901243a2efeabc1d16b681"
      },
      "downloads": -1,
      "filename": "jetson-emulator-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "01f1375deeb691d4a8328cf082e4036f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.9",
      "size": 31748,
      "upload_time": "2020-10-19T10:00:09",
      "upload_time_iso_8601": "2020-10-19T10:00:09.890784Z",
      "url": "https://files.pythonhosted.org/packages/16/00/bf7bca75020fb5af781b30fedf7107f2540fb4a39a05cdc4dfd5c8cad670/jetson-emulator-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}