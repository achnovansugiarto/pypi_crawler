{
  "info": {
    "author": "Jorge M. Faleiro Jr.",
    "author_email": "j@falei.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# tsstore\n\ntsstore - Fast and simple timeseries storage\n\n> Copyright (C) 2018 Jorge M. Faleiro Jr.\n\nSee [LICENSE](LICENSE) for important licensing information.\n\n## Installation\n\nThe installation depends on which underlying storage you plan on using. If you plan on using [fastparquet](https://pypi.org/project/fastparquet/):\n\n```python\npip install jfaleiro.tsstore[fastparquet]\n```\n\nOr [dask](https://pypi.org/project/dask/):\n\n```python\npip install jfaleiro.tsstore[dask]\n```\n\n## Use\n\nAll starts by retrieving a `root` node, with a root path and a type of storage:\n\n```python\nfrom jfaleiro_tsstore import root\nr = root('~/mydata', type_='fastparquet')\n```\n\nAnd from that root you can define and retrieve a storage. You do that by defining a number of attributes for the storage.\n\nLet's say for example you want all your \"open/high/low/close\" prices of all tech stocks from the source `quandl`, unadjusted, in intervals of one day, in one store, you would use attributes along these lines:\n\n```python\ns = r.get_store(type='stock',\n                sector='tech',\n                source='quandl/wiki',\n                serie='OHLC',\n                adjusted=False,\n                interval='day',\n                interval_size=1)\n```\n\nYou should be able to use any reasonable dictionary to define the attributes.\n\nYou can now store your series, associating each serie to individual symbols:\n\n```python\nimport quandl\n\ns.put('GOOG', quandl.get('GOOG/WIKI', ...))\ns.put('IRBT', quandl.get('IRBT/WIKI', ...))\n```\n\nSeries must be instances of [pandas](https://pypi.org/project/pandas/) `DataFrames`. For each symbol you apply basic operations `put`, `get`, `append`, `prepend`, and `delete`. These operations are simple and self-explanatory. For example:\n\n\n```python\nimport pandas as pd\nfrom pandas.testing import assert_frame_equal\n\ns.put('ABC', df) # set series df in ABC\ndf1 = s.get('ABC') # retrieve series ABC\nassert_frame_equal(df, df1) # OK\n\ns.append('ABC', df2) # append df2 to ABC\ns.prepend('ABC', df3) # prepend df3 to ABC\nassert_frame_equal(s.get('ABC'), pd.concat([df3, df, df2])) # OK\n\ns.delete('ABC') # delete series\n```\n\n## Traversal\n\nYou have a few traversal operations available. For example, to retrieve all stores of root, and the number of entries on thr timeseries of all symbols of each store:\n\n```python\n# lists all symbols and size of each serie under root 'r'\nfor s in r.all_stores:\n    for j in s.all_symbols:\n        print(f'symbol {j} has {len(s.get(j).index)} items')\n```\n\n## Final Notes\n\nI am a practioner in computational finance. On any given day I must deal with lots of time series of all kinds. Series of prices, measurements of risk, signals of buy/sell/hold, and many others. Series can be related to any window of time: seconds, minutes, weeks, and so forth. And these can be grouped in an arbitrary length (every 5 seconds, or every 3 days, etc)\n\nAt the same time I have to do all of that, I wanted something simple, fast, and reliable.\n\nThis library is a result of these requirements.\n\nIf you are on the same boat, you might benefit from this as well. If you need any additional storage alternatives, the implementation is very simple and straigthforward. Feel free to fork this repository and contribute back your work when you are done.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlab.com/jfaleiro/tsstore/-/archive/master/tsstore-master.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jfaleiro/tsstore",
    "keywords": "",
    "license": "Affero GPL, see LICENSE.txt for details",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jfaleiro.tsstore",
    "package_url": "https://pypi.org/project/jfaleiro.tsstore/",
    "platform": "",
    "project_url": "https://pypi.org/project/jfaleiro.tsstore/",
    "project_urls": {
      "Download": "https://gitlab.com/jfaleiro/tsstore/-/archive/master/tsstore-master.tar.gz",
      "Homepage": "https://gitlab.com/jfaleiro/tsstore"
    },
    "release_url": "https://pypi.org/project/jfaleiro.tsstore/0.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "dask[dataframe] ; extra == 'dask'",
      "mock ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "behave ; extra == 'dev'",
      "pyhamcrest ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "autopep8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "rope ; extra == 'dev'",
      "fastparquet ; extra == 'fastparquet'"
    ],
    "requires_python": "",
    "summary": "tsstore - Fast and simple timeseries storage",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7132959,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9860b2af7e195b9f2d5b4ea18bb06fb0687ad01f320cdd73542900527147a368",
          "md5": "f44ff7f00646801a34002657e4adf2c3",
          "sha256": "afaaa4fa7953609682b32d8e5ec8e873e570670be80d06b74b4460eba7cc20aa"
        },
        "downloads": -1,
        "filename": "jfaleiro.tsstore-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f44ff7f00646801a34002657e4adf2c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25540,
        "upload_time": "2020-04-29T22:16:40",
        "upload_time_iso_8601": "2020-04-29T22:16:40.632678Z",
        "url": "https://files.pythonhosted.org/packages/98/60/b2af7e195b9f2d5b4ea18bb06fb0687ad01f320cdd73542900527147a368/jfaleiro.tsstore-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9860b2af7e195b9f2d5b4ea18bb06fb0687ad01f320cdd73542900527147a368",
        "md5": "f44ff7f00646801a34002657e4adf2c3",
        "sha256": "afaaa4fa7953609682b32d8e5ec8e873e570670be80d06b74b4460eba7cc20aa"
      },
      "downloads": -1,
      "filename": "jfaleiro.tsstore-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f44ff7f00646801a34002657e4adf2c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25540,
      "upload_time": "2020-04-29T22:16:40",
      "upload_time_iso_8601": "2020-04-29T22:16:40.632678Z",
      "url": "https://files.pythonhosted.org/packages/98/60/b2af7e195b9f2d5b4ea18bb06fb0687ad01f320cdd73542900527147a368/jfaleiro.tsstore-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}