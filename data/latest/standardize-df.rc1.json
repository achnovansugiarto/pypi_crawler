{
  "info": {
    "author": "Yohan Kim",
    "author_email": "yohankimchi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# Standardize DataFrame\n\n**standardize_df** provides features to store and execute your operations for standardizing a pandas dataframes.\n\n## Installation\n\n```bash\npip install standardize-df\n```\n\n## Overview\n\nYou can think of the process of ***standardizing*** a dataframe as conforming its values to some standard for comparitive evaluations. `standardize` contains many features to help standardize a dataframe:\n\n- `adjust_df`: Functions for altering a dataframe based off an altered subset of the dataframe.\n- `df_operations`: General functions to help with standardizing a dataframe.\n- `pipeline`: Pipeline classes for chaining the output of one callable to the next.\n- `standards`: Provides the Standard class to store and execute your operations for standardizing a dataframes column(s).\n- `utils`: Utility functions related for evaluating empty values and flattening iterables\n\nHere's a tour of some of the main features with examples from these modules:\n\n### Adjusting DataFrames\n\nWhen standardizing a dataframe, you'll often create, drop, or override columns and rows from a subset. The `adjust_df` module offers the `adjust_df` function that can reflect those changes from the subset to the dataframe.\n\nAdjusting rows:\n\n```python\nimport pandas as pd\nfrom standardize_df.adjust_df import adjust_df\ndf = pd.DataFrame({'letters': ['a', 'b', 'c'], 'symbols': ['!', '@', '#']})\naltered_subset = pd.Series(['!', '@'], name='symbols')\nadjust_df(df, altered_subset, fields=['symbols'])\n```\n```\n  letters symbols\n0       a       !\n1       b       @\n```\n\nAdjusting columns:\n```python\naltered_subset = pd.DataFrame({'symbols': ['!', '@', '#'], 'numbers': [1, 2, 3]})\nadjust_df(df, altered_subset, fields=['symbols'])\n```\n```\n  letters symbols  numbers\n0       a       !        1\n1       b       @        2\n2       c       #        3\n```\n\n### Pipeline\n\nYou can store operations (callables) into `Pipeline` or `PipelineMapping` to create a data pipeline. The `PipelineMapping` offers the reorder method to easily reorder, replace, or drop operations.\n\nCreating a data pipeline with the `Pipeline` class:\n```python\nfrom standardize_df.pipeline import Pipeline\n\ndef add_one(num): return num + 1\ndef add_two(num): return num + 2\n\npipe = Pipeline([add_one, add_two])\npipe(7)\n```\n\n    10\n\nCreating a data pipeline with the `PipelineMapping` class:\n```python\nfrom standardize_df.pipeline import PipelineMapping\n\ndef add_one(num): return num + 1\ndef square_two(num): return num ** 2\n\npipe = PipelineMapping({'add_one': add_one, 'square_two': square_two})\npipe(2)\n```\n    9\n\nReordering a `PipelineMapping` instance with an iterable:\n```python\nreordered = pipe.reorder(['square_two', 'add_one'])\nreordered\nreordered(2)\n```\n\n    PipelineMapping([('square_two', <function square_two at 0x7f002b86e820>), ('add_one', <function add_one at 0x7f0044be15e0>)])\n    5\n\nReordering a `PipelineMapping` instance with a mapping:\n\n```python\nreordered = pipe.reorder({'square_two': None})  # None denotes 'leave func as is'\nreordered\nreordered(2)\n```\n\n    PipelineMapping([('square_two', <function square_two at 0x7f002b86e820>)])\n    4\n\n### Standards\n The `standards` module offers the\n`Standards` class for storing field name(s) and an operation to standardize those fields of a dataframe. The `Standards.standardize_df` method passes in a subset with the field name(s) to the operation, and adjusts the dataframe according to the return value, the altered subset.\n\nSingle field name (keys) will result in a **series** subset being passed into the operation. A series or a dataframe can be returned, and the original dataframe will be adjusted to it. \n```python\nimport pandas as pd\nfrom standardize_df.standards import Standards\n\ndef drop_first(col: pd.Series) -> pd.Series: \n    '''drops the first row from the original dataframe.'''\n    return col.drop(index=0)\n\ndef add_one(col: pd.Series) -> pd.DataFrame:\n    '''adds the plus_one column to the original dataframe.'''\n    df = col.to_frame()\n    df['plus_one'] = df['numbers'] + 1\n    return df\n\ndf = pd.DataFrame({'letters': ['a', 'b', 'c'], 'numbers': [1, 2, 3]})\nstandards_mapping = {\n    'letters': drop_first, \n    'numbers': add_one\n}\nstandards = Standards(standards_mapping)\nstandards.standardize_df(df)\n```\n      letters  numbers  plus_one\n    1       b        2         3\n    2       c        3         4\n\nMultiple field name (keys) will result in a **dataframe** subset being passed into the operation. A series or dataframe can be returned, and the original dataframe will be adjusted to it. \n```python\ndef increment_one(df: pd.DataFrame) -> pd.DataFrame:\n    '''adds columns letters_plus and numbers_plus to the original dataframe.'''\n    df['letters_plus'] = df['letters'].apply(lambda x: chr(ord(x) + 1))\n    df['numbers_plus'] = df['numbers'] + 1\n    return df\n\ndef drop_numbers(df: pd.DataFrame) -> pd.Series:\n    '''drops the numbers column from the original dataframe.'''\n    return df['numbers_plus']\n\n\nstandards_mapping = {\n    ('letters', 'numbers'): increment_one, \n    ('numbers', 'numbers_plus'): drop_numbers  # numbers_incr column added in increment_one func \n}\nstandards = Standards(standards_mapping)\nstandards.standardize_df(df)\n```\n      letters letters_plus  numbers_plus\n    0       a            b             2\n    1       b            c             3\n    2       c            d             4\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yohan10/standardize-df",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "standardize-df",
    "package_url": "https://pypi.org/project/standardize-df/",
    "platform": null,
    "project_url": "https://pypi.org/project/standardize-df/",
    "project_urls": {
      "Homepage": "https://github.com/yohan10/standardize-df"
    },
    "release_url": "https://pypi.org/project/standardize-df/0.0.1/",
    "requires_dist": [
      "pandas (>=1.4.0)",
      "numpy (>=1.22') ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Provides features to store and execute your operations for standardizing a pandas dataframes.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13974215,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "655285757293aa76973d9d8885cfc4747c0bd2c7b93fa525d8b28bd39d13af38",
          "md5": "7dcabd16d844e1aadb1bd1686cd4016f",
          "sha256": "4a8081b530308f527ca8a742f15b423de0f0c69399045b3e362713c311c21129"
        },
        "downloads": -1,
        "filename": "standardize_df-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7dcabd16d844e1aadb1bd1686cd4016f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23859,
        "upload_time": "2022-05-30T04:44:35",
        "upload_time_iso_8601": "2022-05-30T04:44:35.064052Z",
        "url": "https://files.pythonhosted.org/packages/65/52/85757293aa76973d9d8885cfc4747c0bd2c7b93fa525d8b28bd39d13af38/standardize_df-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8f84308f52ad9154c5cde335273ef5fe1c5262686465590c4285866e3f55d11",
          "md5": "86dabbb9da528b77d6a851b62e306917",
          "sha256": "bb92255a90a508dd3e455fa4c667a1ce5d24aae0a65f62add7daf2ed7f8b2c3d"
        },
        "downloads": -1,
        "filename": "standardize_df-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86dabbb9da528b77d6a851b62e306917",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23188,
        "upload_time": "2022-05-30T04:44:36",
        "upload_time_iso_8601": "2022-05-30T04:44:36.912186Z",
        "url": "https://files.pythonhosted.org/packages/f8/f8/4308f52ad9154c5cde335273ef5fe1c5262686465590c4285866e3f55d11/standardize_df-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "655285757293aa76973d9d8885cfc4747c0bd2c7b93fa525d8b28bd39d13af38",
        "md5": "7dcabd16d844e1aadb1bd1686cd4016f",
        "sha256": "4a8081b530308f527ca8a742f15b423de0f0c69399045b3e362713c311c21129"
      },
      "downloads": -1,
      "filename": "standardize_df-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7dcabd16d844e1aadb1bd1686cd4016f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23859,
      "upload_time": "2022-05-30T04:44:35",
      "upload_time_iso_8601": "2022-05-30T04:44:35.064052Z",
      "url": "https://files.pythonhosted.org/packages/65/52/85757293aa76973d9d8885cfc4747c0bd2c7b93fa525d8b28bd39d13af38/standardize_df-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8f84308f52ad9154c5cde335273ef5fe1c5262686465590c4285866e3f55d11",
        "md5": "86dabbb9da528b77d6a851b62e306917",
        "sha256": "bb92255a90a508dd3e455fa4c667a1ce5d24aae0a65f62add7daf2ed7f8b2c3d"
      },
      "downloads": -1,
      "filename": "standardize_df-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "86dabbb9da528b77d6a851b62e306917",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23188,
      "upload_time": "2022-05-30T04:44:36",
      "upload_time_iso_8601": "2022-05-30T04:44:36.912186Z",
      "url": "https://files.pythonhosted.org/packages/f8/f8/4308f52ad9154c5cde335273ef5fe1c5262686465590c4285866e3f55d11/standardize_df-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}