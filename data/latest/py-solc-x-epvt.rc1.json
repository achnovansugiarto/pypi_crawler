{
  "info": {
    "author": "Arnab Mukherjee (forked from py-solc-x by ApeWorX)",
    "author_email": "mukherjeearnab@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "py-solc-x\r\n=========\r\n\r\nPython wrapper around the ``solc`` Solidity compiler with ``0.5.x``\r\nsupport.\r\n\r\nForked from `py-solc <https://github.com/ethereum/py-solc>`__.\r\n\r\nDependencies\r\n------------\r\n\r\nPy-solc-x allows the use of multiple versions of solc and installs them\r\nas needed. You must have all required `solc\r\ndependencies <https://solidity.readthedocs.io/en/latest/installing-solidity.html#building-from-source>`__\r\ninstalled for it to work properly.\r\n\r\nVersions ``>=0.4.11`` may be installed, however only versions\r\n``>=0.4.2`` are supported and tested.\r\n\r\nQuickstart\r\n----------\r\n\r\nInstallation\r\n\r\n.. code:: sh\r\n\r\n   pip install py-solc-x\r\n\r\nInstalling the ``solc`` Executable\r\n----------------------------------\r\n\r\nThe first time py-solc-x is imported it will automatically check for an\r\ninstalled version of solc on your system. If none is found, you must\r\nmanually install via ``solcx.install_solc``\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import install_solc\r\n   >>> install_solc('v0.4.25')\r\n\r\nOr via the command line:\r\n\r\n.. code:: bash\r\n\r\n   $ python -m solcx.install v0.4.25\r\n\r\nPy-solc-x defaults to the most recent installed version set as the\r\nactive one. To check or modify the active version:\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import get_solc_version, set_solc_version\r\n   >>> get_solc_version()\r\n   Version('0.5.7+commit.6da8b019.Linux.gpp')\r\n   >>> set_solc_version('v0.4.25')\r\n   >>>\r\n\r\nTo install the highest compatible version based on the pragma version\r\nstring:\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import install_solc_pragma\r\n   >>> install_solc_pragma('^0.4.20 || >0.5.5 <0.7.0')\r\n\r\nTo set the version based on the pragma version string - this will use\r\nthe highest compatible version installed, if you have a compatible\r\nversion installed, or it will install the highest compatible version:\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import set_solc_version_pragma\r\n   >>> set_solc_version_pragma('^0.4.20 || >0.5.5 <0.7.0')\r\n\r\nTo view available and installed versions:\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import get_installed_solc_versions, get_available_solc_versions\r\n   >>> get_installed_solc_versions()\r\n   ['v0.4.25', 'v0.5.3']\r\n   >>> get_available_solc_versions()\r\n   ['v0.5.8', 'v0.5.7', 'v0.5.6', 'v0.5.5', 'v0.5.4', 'v0.5.3', 'v0.5.2', 'v0.5.1', 'v0.5.0', 'v0.4.25', 'v0.4.24', 'v0.4.23', 'v0.4.22', 'v0.4.21', 'v0.4.20', 'v0.4.19', 'v0.4.18', 'v0.4.17', 'v0.4.16', 'v0.4.15', 'v0.4.14', 'v0.4.13', 'v0.4.12', 'v0.4.11']\r\n\r\nStandard JSON Compilation\r\n-------------------------\r\n\r\nUse the ``solcx.compile_standard`` function to make use of the\r\n`standard-json <http://solidity.readthedocs.io/en/latest/using-the-compiler.html#compiler-input-and-output-json-description>`__\r\ncompilation feature.\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import compile_standard\r\n   >>> compile_standard({\r\n   ...     'language': 'Solidity',\r\n   ...     'sources': {'Foo.sol': 'content': \"....\"},\r\n   ... })\r\n   {\r\n       'contracts': {...},\r\n       'sources': {...},\r\n       'errors': {...},\r\n   }\r\n   >>> compile_standard({\r\n   ...     'language': 'Solidity',\r\n   ...     'sources': {'Foo.sol': {'urls': [\"/path/to/my/sources/Foo.sol\"]}},\r\n   ... }, allow_paths=\"/path/to/my/sources\")\r\n   {\r\n       'contracts': {...},\r\n       'sources': {...},\r\n       'errors': {...},\r\n   }\r\n\r\nLegacy Combined JSON compilation\r\n--------------------------------\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import compile_source, compile_files, link_code\r\n   >>> compile_source(\"contract Foo { function Foo() {} }\")\r\n   {\r\n       'Foo': {\r\n           'abi': [{'inputs': [], 'type': 'constructor'}],\r\n           'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',\r\n           'code_runtime': '0x60606040526008565b00',\r\n           'source': None,\r\n           'meta': {\r\n               'compilerVersion': '0.3.5-9da08ac3',\r\n               'language': 'Solidity',\r\n               'languageVersion': '0',\r\n           },\r\n       },\r\n   }\r\n   >>> compile_files([\"/path/to/Foo.sol\", \"/path/to/Bar.sol\"])\r\n   {\r\n       'Foo': {\r\n           'abi': [{'inputs': [], 'type': 'constructor'}],\r\n           'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',\r\n           'code_runtime': '0x60606040526008565b00',\r\n           'source': None,\r\n           'meta': {\r\n               'compilerVersion': '0.3.5-9da08ac3',\r\n               'language': 'Solidity',\r\n               'languageVersion': '0',\r\n           },\r\n       },\r\n       'Bar': {\r\n           'abi': [{'inputs': [], 'type': 'constructor'}],\r\n           'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',\r\n           'code_runtime': '0x60606040526008565b00',\r\n           'source': None,\r\n           'meta': {\r\n               'compilerVersion': '0.3.5-9da08ac3',\r\n               'language': 'Solidity',\r\n               'languageVersion': '0',\r\n           },\r\n       },\r\n   }\r\n   >>> unlinked_code = \"606060405260768060106000396000f3606060405260e060020a6000350463e7f09e058114601a575b005b60187f0c55699c00000000000000000000000000000000000000000000000000000000606090815273__TestA_________________________________90630c55699c906064906000906004818660325a03f41560025750505056\"\r\n   >>> link_code(unlinked_code, {'TestA': '0xd3cda913deb6f67967b99d67acdfa1712c293601'})\r\n   ... \"606060405260768060106000396000f3606060405260e060020a6000350463e7f09e058114601a575b005b60187f0c55699c00000000000000000000000000000000000000000000000000000000606090815273d3cda913deb6f67967b99d67acdfa1712c29360190630c55699c906064906000906004818660325a03f41560025750505056\"\r\n\r\nImport Path Remappings\r\n----------------------\r\n\r\n``solc`` provides path aliasing allow you to have more reusable project\r\nconfigurations.\r\n\r\nYou can use this like:\r\n\r\n.. code:: python\r\n\r\n   >>> from solcx import compile_source, compile_files, link_code\r\n\r\n   >>> compile_files([source_file_path], import_remappings=[\"zeppeling=/my-zeppelin-checkout-folder\"])\r\n\r\n`More information about solc import\r\naliasing <http://solidity.readthedocs.io/en/develop/layout-of-source-files.html#paths>`__\r\n\r\nDevelopment\r\n-----------\r\n\r\nThis project was recently forked from\r\n`py-solc <https://github.com/ethereum/py-solc>`__ and should be\r\nconsidered a beta. Comments, questions, criticisms and pull requests are\r\nwelcomed.\r\n\r\nTests\r\n~~~~~\r\n\r\nTests have not been updated from py-solc and are currently failing. If\r\nyou would like to contribute by updating them, please donâ€™t hesitate :)\r\n\r\nLicense\r\n-------\r\n\r\nThis project is licensed under the `MIT license <LICENSE>`__.\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mukherjeearnab/py-solc-x",
    "keywords": "ethereum solidity solc",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-solc-x-epvt",
    "package_url": "https://pypi.org/project/py-solc-x-epvt/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-solc-x-epvt/",
    "project_urls": {
      "Homepage": "https://github.com/mukherjeearnab/py-solc-x"
    },
    "release_url": "https://pypi.org/project/py-solc-x-epvt/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.4, <4",
    "summary": "Python wrapper around the solc binary with 0.5.x support",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17128261,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13047657c373d74d1dc4720aec33b3bac6d26e0d41566459ed3c56032d227fdd",
          "md5": "5aa7e67aaf4c11023a30adb2b8a05f23",
          "sha256": "b0a881a8a57c3202ba84f2e132a96eaac495380e1b2f0418026eec450b8da009"
        },
        "downloads": -1,
        "filename": "py-solc-x-epvt-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5aa7e67aaf4c11023a30adb2b8a05f23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4, <4",
        "size": 12107,
        "upload_time": "2023-03-02T14:39:29",
        "upload_time_iso_8601": "2023-03-02T14:39:29.203202Z",
        "url": "https://files.pythonhosted.org/packages/13/04/7657c373d74d1dc4720aec33b3bac6d26e0d41566459ed3c56032d227fdd/py-solc-x-epvt-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13047657c373d74d1dc4720aec33b3bac6d26e0d41566459ed3c56032d227fdd",
        "md5": "5aa7e67aaf4c11023a30adb2b8a05f23",
        "sha256": "b0a881a8a57c3202ba84f2e132a96eaac495380e1b2f0418026eec450b8da009"
      },
      "downloads": -1,
      "filename": "py-solc-x-epvt-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5aa7e67aaf4c11023a30adb2b8a05f23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4, <4",
      "size": 12107,
      "upload_time": "2023-03-02T14:39:29",
      "upload_time_iso_8601": "2023-03-02T14:39:29.203202Z",
      "url": "https://files.pythonhosted.org/packages/13/04/7657c373d74d1dc4720aec33b3bac6d26e0d41566459ed3c56032d227fdd/py-solc-x-epvt-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}