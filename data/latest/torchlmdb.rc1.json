{
  "info": {
    "author": "Jonas Geiping",
    "author_email": "jonas.geiping@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Database"
    ],
    "description": "# Another LMDB for PyTorch\n\nThis is a simple wrapper that lets you store a pytorch image dataset in an LMDB. This code wraps a `torch.utils.Dataset` that outputs image data and saves all images into a single database structure under the hood. In this case this an LMDB. There are a ton of variations of exactly this problem on github, but none were really what I wanted so I wrote another one.\n\n#### What is different in this version?\n* The wrapped dataset works like normal, it can be pickled for a dataloader, can have data augmentations and mirrors attributes of the wrapped dataset.\n* No external dependencies on `pyarrow`, image data is directly written as `uint8` byte streams and directly read into tensor data.\n* Data is saved uncompressed, but not in floats like in some other projects. This format is minimal and fast to read.\n* Arbitrary image transformations such as resizing can be easily baked into the database.\n* The LMDB can be written to a unique temporary file and cleaned up after deallocation.\n\n### Installation\nYou can install this module via pip,\n```\npip install torchlmdb\n```\nbut it's really only a single file with a single class.\n\n### Usage\n\nGiven an existing pytorch image dataset, for example\n```\ndataset = torchvision.datasets.CIFAR10(root=\"~/data\", train=False)\n```\nsimply wrap the dataset:\n```\nfrom torchlmdb import LMDBDataset\nwrapped_dataset = LMDBDataset(dataset, name=\"val\")\n```\nThe wrapped dataset behaves like the original dataset, but stores the data in an LMDB database under the hood.\n\n\n### Requirements:\nThe wrapped dataset needs to return pillow images that can be cast to `uint8` when `dataset.transform=None`. This is the case\nfor all of the torchvision image datasets, for example. Other transformations (for example random flips and normalization)\nare ok and will be seamlessly applied to the LMDB output, so that random transforms are still random and not encoded into the db.\nHowever, you can also encode transformations directly into the stored data. For example, calling `LMDBDataset` with `db_tranform=torchvision.transforms.Resize(16)` will store all data as 16x16 images in the database. Transforms like this are significantly more efficient than reading in a large image and downsampling it on the fly.\nThe `name` argument is user controlled and, when the database is not temporary, should uniquely identify this dataset when multiple databases exist in the root directory.\n\n### Arguments:\n```\nLMDBDataset:\n\nArgs:\n        dataset: The original image dataset (or any dataset that returns PIL data)\n        root: Where to create the database\n        name: A name for the newly created database\n        can_create: Set to false to forbid database creation (For example in distrbuted training)\n        temporary_db: Create the database only temporary and clean it up after deletion of this object\n        db_transform: A torchvision.transform (or composition) to be applied during database creation.\n        force_db_rebuild: Force a rebuilding of the database\n        db_cfg: A struct of additional configuration options as described in the readme.\n```\n\n\n### Advanced Arguments:\nA `db_cfg` can be handed as argument with additional arguments.\nThe default arguments can be imported as `LMDB_config` and are set to\n```\n    map_size = 1099511627776 * 2  # Linux can grow memory as needed.\n    write_frequency = 65536  # how often to flush during database creation\n    shuffle_while_writing = False  # Shuffle during DB creation\n    db_channels_first = True # Write in CHW format if possible.\n    rounds = 1  # Can write multiple rounds of the same dataset (for example with different augmentations).\n    num_db_attempts = 10  # how many attempts to open the database\n    max_readers = 128 # How many processes can read the database simultaneously.\n    readahead = True  # beneficial for long sequential reads, disable when randomly accessing large DBs\n    meminit = True\n    max_spare_txns = 128\n    access = \"get\"  # can be \"cursor\" or \"get\"\n```\n\n### References\nThis implementation of an LMDB interface in pyTorch is based on some older forks I made of\nhttps://github.com/pytorch/vision/blob/master/torchvision/datasets/lsun.py\nand\nhttps://github.com/Lyken17/Efficient-PyTorch/blob/master/tools/folder2lmdb.py .\n\nMIT License\n\nCopyright (c) 2022 Jonas Geiping\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JonasGeiping/torchlmdb",
    "keywords": "PyTorch,torchvision,LMDB",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchlmdb",
    "package_url": "https://pypi.org/project/torchlmdb/",
    "platform": "any",
    "project_url": "https://pypi.org/project/torchlmdb/",
    "project_urls": {
      "Homepage": "https://github.com/JonasGeiping/torchlmdb"
    },
    "release_url": "https://pypi.org/project/torchlmdb/0.1.1/",
    "requires_dist": [
      "torch (>=1.10)",
      "torchvision",
      "lmdb"
    ],
    "requires_python": ">=3.7",
    "summary": "Simple Implementation of a drop-in database for image datasets in PyTorch.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14014937,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ff64d698c9954cfa295813d631e07d498783a7d8deb0819ca34a3957a490ad7",
          "md5": "c64ca3348ef44e779174568da8362247",
          "sha256": "509a49a534527b909e0c1f0554a7c4eaa6662a6de34dcd6a1442f777cdb855f4"
        },
        "downloads": -1,
        "filename": "torchlmdb-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c64ca3348ef44e779174568da8362247",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8988,
        "upload_time": "2022-06-02T18:32:13",
        "upload_time_iso_8601": "2022-06-02T18:32:13.218247Z",
        "url": "https://files.pythonhosted.org/packages/2f/f6/4d698c9954cfa295813d631e07d498783a7d8deb0819ca34a3957a490ad7/torchlmdb-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "719975f49732855893c708013820a9c174ede6d4d5135ea7ffe3c5516e5397c1",
          "md5": "6297177733d0ab69c763b1437c2c2e7e",
          "sha256": "a2e567c23008ac79ba5ecc7cb5dc2b5cf781cad81f7a1beada71b1bc183273ef"
        },
        "downloads": -1,
        "filename": "torchlmdb-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6297177733d0ab69c763b1437c2c2e7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8790,
        "upload_time": "2022-06-02T18:32:15",
        "upload_time_iso_8601": "2022-06-02T18:32:15.109319Z",
        "url": "https://files.pythonhosted.org/packages/71/99/75f49732855893c708013820a9c174ede6d4d5135ea7ffe3c5516e5397c1/torchlmdb-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ff64d698c9954cfa295813d631e07d498783a7d8deb0819ca34a3957a490ad7",
        "md5": "c64ca3348ef44e779174568da8362247",
        "sha256": "509a49a534527b909e0c1f0554a7c4eaa6662a6de34dcd6a1442f777cdb855f4"
      },
      "downloads": -1,
      "filename": "torchlmdb-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c64ca3348ef44e779174568da8362247",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8988,
      "upload_time": "2022-06-02T18:32:13",
      "upload_time_iso_8601": "2022-06-02T18:32:13.218247Z",
      "url": "https://files.pythonhosted.org/packages/2f/f6/4d698c9954cfa295813d631e07d498783a7d8deb0819ca34a3957a490ad7/torchlmdb-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "719975f49732855893c708013820a9c174ede6d4d5135ea7ffe3c5516e5397c1",
        "md5": "6297177733d0ab69c763b1437c2c2e7e",
        "sha256": "a2e567c23008ac79ba5ecc7cb5dc2b5cf781cad81f7a1beada71b1bc183273ef"
      },
      "downloads": -1,
      "filename": "torchlmdb-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6297177733d0ab69c763b1437c2c2e7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8790,
      "upload_time": "2022-06-02T18:32:15",
      "upload_time_iso_8601": "2022-06-02T18:32:15.109319Z",
      "url": "https://files.pythonhosted.org/packages/71/99/75f49732855893c708013820a9c174ede6d4d5135ea7ffe3c5516e5397c1/torchlmdb-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}