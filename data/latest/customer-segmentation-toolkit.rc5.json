{
  "info": {
    "author": "featurologists-team",
    "author_email": "ajuszkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Customer segmentation toolkit\n> Data transformations toolkit made by Team #2 for the <a href='https://github.com/mlopscommunity/engineering.labs/tree/master/Lab2_Feature_Store_for_ML'>MLOps Engineering Lab #2</a> \"Feature Store for ML\".\n\n\n- Git repo: https://github.com/artemlops/customer-segmentation-toolkit\n\n- Documentation: https://artemlops.github.io/customer-segmentation-toolkit/\n\n- Original notebook: [Customer segmentation](https://www.kaggle.com/fabiendaniel/customer-segmentation) by F. Daniel (September 2017) (saved to `data/customer-segmentation.ipynb`).\n- Original dataset: [E-Commerce data: Actual transactions from UK retailer](https://www.kaggle.com/carrie1/ecommerce-data) (saved to `data/data.csv`).\n\n- The work is done with the help of the [nbdev](https://nbdev.fast.ai/) tool, which allows you to develop a python library in Jupyter Notebooks, putting all your code, tests and documentation in one place.\n\n## Installation\n\n`pip install -U customer-segmentation-toolkit`\n\n## Usage\n\n```\nimport pandas as pd\nfrom pathlib import Path\n```\n\n### 01. Load and split dataset\n\n```\nimport datetime\nfrom customer_segmentation_toolkit.load_split import load_data_csv, split_by_invoice_date\n\nONLINEOFFLINE_DATE_SPLIT = datetime.date(2011,10,1)\n\n# Loading original dataset\ndf = load_data_csv('../data/data.csv')\nprint(f'Loaded dataset, shape: {df.shape}')\n\n# Splitting dataset to offline and online parts\ndf_offline, df_online = split_by_invoice_date(df, ONLINEOFFLINE_DATE_SPLIT)\n\nprint(f'Offline dataset shape: {df_offline.shape}')\nprint(f'Offline invoices: from {df_offline[\"InvoiceDate\"].min()} to {df_offline[\"InvoiceDate\"].max()}')\n\nprint(f'Online dataset shape: {df_online.shape}')\nprint(f'Online invoices: from {df_online[\"InvoiceDate\"].min()} to {df_online[\"InvoiceDate\"].max()}')\n```\n\n    Loaded dataset, shape: (541909, 8)\n    Offline dataset shape: (370931, 8)\n    Offline invoices: from 2010-12-01 08:26:00 to 2011-09-30 17:22:00\n    Online dataset shape: (170978, 8)\n    Online invoices: from 2011-10-02 10:32:00 to 2011-12-09 12:50:00\n\n\n```\n# Saving processed data\nOUTPUT = Path(f'../data/output/01_data_split_offline_online')\nOUTPUT.mkdir(exist_ok=True, parents=True)\n\ndf_offline.to_csv(f'{OUTPUT}/no_live_data.csv', index=False)\ndf_online.to_csv(f'{OUTPUT}/raw_live_data.csv', index=False)\nPath(f'{OUTPUT}/onlineoffline_date_split.txt').write_text(str(ONLINEOFFLINE_DATE_SPLIT))\n\nprint(f'Output data saved to {OUTPUT}: {[p.name for p in Path(OUTPUT).iterdir()]}')\n```\n\n    Output data saved to ../data/output/01_data_split_offline_online: ['onlineoffline_date_split.txt', 'no_live_data.csv', 'raw_live_data.csv']\n\n\n### 02. Clean dataset rows\n\n```\nfrom customer_segmentation_toolkit.load_split import load_data_csv\nfrom customer_segmentation_toolkit.clean_rows import clean_data_rows\n\n# Loading raw offline dataset'\ndf = load_data_csv('../data/output/01_data_split_offline_online/no_live_data.csv')\nprint(f'Loaded raw offline dataset, shape: {df.shape}')\n\n# Cleaning the dataset\ndf_cleaned = clean_data_rows(df)\nprint(f'Cleaned offline dataset shape: {df.shape}')\n```\n\n    Loaded raw offline dataset, shape: (370931, 8)\n    Cleaned offline dataset shape: (370931, 8)\n\n\n```\n# Saving processed data\nOUTPUT = Path(f'../data/output/02_data_clean_rows')\nOUTPUT.mkdir(exist_ok=True, parents=True)\n\ndf_cleaned.to_csv(f'{OUTPUT}/no_live_data__cleaned.csv', index=False)\n\nprint(f'Output data saved to {OUTPUT}: {[p.name for p in Path(OUTPUT).iterdir()]}')\n```\n\n    Output data saved to ../data/output/02_data_clean_rows: ['no_live_data__cleaned.csv']\n\n\n### 03. Analyse purchases\n\n```\nimport datetime\nfrom customer_segmentation_toolkit.load_split import load_data_csv\nfrom customer_segmentation_toolkit.analyse_purchases import build_product_list\n\nN_PURCHASE_CLUSTERS = 5\nTRAINTEST_DATE_SPLIT = datetime.date(2011,8,1)\n\n# Loading cleaned dataset\ndf_cleaned = load_data_csv('../data/output/02_data_clean_rows/no_live_data__cleaned.csv')\nprint(f'Loaded cleaned offline dataset, shape: {df_cleaned.shape}')\n\nlist_products = build_product_list(df_cleaned)\nprint(f'Built list of products:')\nprint(pd.DataFrame(list_products).head())\nprint('...')\n```\n\n    Loaded cleaned offline dataset, shape: (263815, 10)\n    Built list of products:\n             0    1\n    0    heart  251\n    1  vintage  195\n    2      set  194\n    3      bag  158\n    4      box  147\n    ...\n\n\n```\nfrom customer_segmentation_toolkit.analyse_purchases import build_keywords_matrix\n\n# Building keywords count matrix\nTHRESHOLD = [0, 1, 2, 3, 5, 10]\nmatrix = build_keywords_matrix(df_cleaned, list_products, THRESHOLD)\nprint(f'Built keywords count matrix (shape: {matrix.shape}):')\nprint(matrix.head())\n```\n\n    Built keywords count matrix (shape: (3662, 188)):\n       heart  vintage  set  bag  box  glass  christmas  design  candle  flower  \\\n    0      1        0    0    0    0      0          0       0       0       0   \n    1      0        0    0    0    0      0          0       0       0       0   \n    2      1        0    0    0    0      0          0       0       0       0   \n    3      0        0    0    0    0      0          0       0       0       0   \n    4      1        0    0    0    0      0          0       0       0       0   \n\n       ...  medium  hen  wallet  point  0<.<1  1<.<2  2<.<3  3<.<5  5<.<10  .>10  \n    0  ...       0    0       0      0      0      0      1      0       0     0  \n    1  ...       0    0       0      0      0      0      0      1       0     0  \n    2  ...       0    0       0      0      0      0      0      1       0     0  \n    3  ...       0    0       0      0      0      0      0      1       0     0  \n    4  ...       0    0       0      0      0      0      0      1       0     0  \n\n    [5 rows x 188 columns]\n\n\n```\nfrom customer_segmentation_toolkit.analyse_purchases import compute_purchase_clusters\n\n# Computing purchases clusters via Kmeans\nclusters = compute_purchase_clusters(matrix, N_PURCHASE_CLUSTERS)\nprint(f'Built purchase clusters:')\nprint(pd.Series(clusters).value_counts())\n```\n\n    Built purchase clusters:\n    1    1117\n    4     911\n    0     638\n    2     566\n    3     430\n    dtype: int64\n\n\n```\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nfrom customer_segmentation_toolkit.analyse_purchases import plot_silhouette\n\nsilhouette_avg = silhouette_score(matrix, clusters)\nsample_silhouette_values = silhouette_samples(matrix, clusters)\n# Plotting silhouette values\nplot_silhouette(N_PURCHASE_CLUSTERS, [-0.07, 0.33], len(matrix), sample_silhouette_values, clusters)\n```\n\n\n![svg](https://raw.githubusercontent.com/featurologists/customer_segmentation_toolkit/master/docs/images/output_15_0.svg)\n\n\n```\nfrom customer_segmentation_toolkit.analyse_purchases import add_purchase_clusters_info\n\n# Constructing the result DataFrame\ndf_with_clusters = add_purchase_clusters_info(df_cleaned, clusters, N_PURCHASE_CLUSTERS)\nprint(f'Added purchase clusters info to the offline cleaned dataset:')\nprint(f'Shape: {df_with_clusters.shape}')\nprint(f'Columns: {list(df_with_clusters.columns)}')\n```\n\n    Added purchase clusters info to the offline cleaned dataset:\n    Shape: (13081, 9)\n    Columns: ['CustomerID', 'InvoiceNo', 'Basket Price', 'categ_0', 'categ_1', 'categ_2', 'categ_3', 'categ_4', 'InvoiceDate']\n\n\n```\nfrom customer_segmentation_toolkit.load_split import split_by_invoice_date\n\n# Splitting the new dataset (offline + cluster info) to train+test\ndf_offline_train, df_offline_test = split_by_invoice_date(df_with_clusters, TRAINTEST_DATE_SPLIT)\nprint(f'Splitted: train of shape {df_offline_train.shape} + test of shape {df_offline_test.shape}')\n```\n\n    Splitted: train of shape (10054, 9) + test of shape (3027, 9)\n\n\n```\n# Saving processed data\n\nOUTPUT = Path(f'../data/output/03_data_compute_description_keywords')\nOUTPUT.mkdir(exist_ok=True, parents=True)\n\nmatrix.to_csv(f'{OUTPUT}/no_live_data__cleaned__keywords.csv', index=False)\ndf_offline_train.to_csv(f'{OUTPUT}/no_live_data__cleaned__purchase_clusters__train.csv', index=False)\ndf_offline_test.to_csv(f'{OUTPUT}/no_live_data__cleaned__purchase_clusters__test.csv', index=False)\n\npd.DataFrame(THRESHOLD, columns=['threshold']).to_csv(f'{OUTPUT}/threshold.csv', index=False)\n\nPath(f'{OUTPUT}/n_purchase_clusters.txt').write_text(str(N_PURCHASE_CLUSTERS))\nPath(f'{OUTPUT}/traintest_date_split.txt').write_text(str(TRAINTEST_DATE_SPLIT))\n\nprint(f'Output data saved to {OUTPUT}: {[p.name for p in Path(OUTPUT).iterdir()]}')\n```\n\n    Output data saved to ../data/output/03_data_compute_description_keywords: ['no_live_data__cleaned__keywords.csv', 'no_live_data__cleaned__purchase_clusters__test.csv', 'threshold.csv', 'n_purchase_clusters.txt', 'traintest_date_split.txt', 'no_live_data__cleaned__purchase_clusters__train.csv']\n\n\n### 04. Analyse customer categories\n\n```\nfrom customer_segmentation_toolkit.load_split import load_data_csv\n\nN_CUSTOMER_CLUSTERS = 11\nSELECTED_CUSTOMERS_CATEG_THRESHOLD = 40\n\n# Loading cleaned offline train dataset\nDATA = '../data/output/03_data_compute_description_keywords'\nN_PURCHASE_CLUSTERS = int(Path(f'{DATA}/n_purchase_clusters.txt').read_text().strip())\n\nbasket_price = load_data_csv(f'{DATA}/no_live_data__cleaned__purchase_clusters__train.csv')\nprint(f'Loaded purchase clusters data of shape: {basket_price.shape}')\nprint(basket_price.head())\nprint('...')\n```\n\n    Loaded purchase clusters data of shape: (10054, 9)\n      CustomerID  InvoiceNo  Basket Price  categ_0  categ_1  categ_2  categ_3  \\\n    0      12347     537626        711.79    83.40   187.20   293.35   124.44   \n    1      12347     542237        475.39    53.10   168.75   169.20     0.00   \n    2      12347     549222        636.25    71.10   369.15   115.00     0.00   \n    3      12347     556201        382.52    78.06    74.40   168.76    19.90   \n    4      12348     539318        892.80     0.00   414.00     0.00     0.00   \n\n       categ_4                   InvoiceDate  \n    0    23.40 2010-12-07 14:57:00.000001024  \n    1    84.34 2011-01-26 14:29:59.999999744  \n    2    81.00 2011-04-07 10:42:59.999999232  \n    3    41.40 2011-06-09 13:01:00.000000256  \n    4   478.80 2010-12-16 19:09:00.000000000  \n    ...\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import build_transactions_per_user\n\n# Building transactions per user\ntransactions_per_user = build_transactions_per_user(basket_price, n_purchase_clusters=N_PURCHASE_CLUSTERS)\nprint(f'Built transactions per user, shape: {transactions_per_user.shape}')\nprint(transactions_per_user.head())\nprint('...')\n```\n\n    Built transactions per user, shape: (3143, 13)\n      CustomerID  count     min     max        mean      sum    categ_0  \\\n    0      12347      4  382.52  711.79  551.487500  2205.95  12.949523   \n    1      12348      3  227.44  892.80  495.746667  1487.24   0.000000   \n    2      12350      1  334.40  334.40  334.400000   334.40  27.900718   \n    3      12352      4  144.35  840.30  360.370000  1441.48   3.683714   \n    4      12353      1   89.00   89.00   89.000000    89.00  19.887640   \n\n         categ_1    categ_2    categ_3    categ_4  LastPurchase  FirstPurchase  \n    0  36.242889  33.831682   6.543213  10.432693            52            236  \n    1  54.059869   0.000000   0.000000  45.940131           117            227  \n    2  60.406699   0.000000   0.000000  11.692584           179            179  \n    3  77.977495   5.771846  11.859339   0.707606           131            165  \n    4  13.033708   0.000000  67.078652   0.000000            73             73  \n    ...\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import (\n    plot_customers_pca,\n    convert_customers_df_to_np,\n    analyse_customers_pca,\n)\n\n# Analysing customers distribution via PCA\nmatrix = convert_customers_df_to_np(transactions_per_user, N_PURCHASE_CLUSTERS)\nscaled_matrix, pca = analyse_customers_pca(matrix)\n\nplot_customers_pca(matrix, pca)\n```\n\n\n![svg](https://raw.githubusercontent.com/featurologists/customer_segmentation_toolkit/master/docs/images/output_22_0.svg)\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import compute_customer_clusters\n\n# Computing customers clusters via Kmeans\nclusters_clients = compute_customer_clusters(scaled_matrix, N_CUSTOMER_CLUSTERS)\nprint('Computed customers clusters via Kmeans:')\ndisplay(pd.Series(clusters_clients).value_counts())\n```\n\n    Computed customers clusters via Kmeans:\n\n\n\n    7     1186\n    6      475\n    0      305\n    3      276\n    8      239\n    9      235\n    1      226\n    4      152\n    2       32\n    5       10\n    10       7\n    dtype: int64\n\n\n```\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nfrom customer_segmentation_toolkit.analyse_purchases import plot_silhouette\n\nsilhouette_avg = silhouette_score(scaled_matrix, clusters_clients)\nsample_silhouette_values = silhouette_samples(scaled_matrix, clusters_clients)\n\n# Plotting silhouette values\nplot_silhouette(N_CUSTOMER_CLUSTERS, [-0.15, 0.55], len(scaled_matrix), sample_silhouette_values, clusters_clients)\n```\n\n\n![svg](https://raw.githubusercontent.com/featurologists/customer_segmentation_toolkit/master/docs/images/output_24_0.svg)\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import plot_customer_categories\n\n# Plotting customers categories\nplot_customer_categories(scaled_matrix, clusters_clients, N_CUSTOMER_CLUSTERS)\n```\n\n\n![svg](https://raw.githubusercontent.com/featurologists/customer_segmentation_toolkit/master/docs/images/output_25_0.svg)\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import add_customer_clusters_info\n\n# Constructing the result dataset\nmerged_df = add_customer_clusters_info(transactions_per_user, clusters_clients)\nprint(f'Constructed the result dataset:')\nprint(f'Shape: {merged_df.shape}')\nprint(f'Columns: {list(merged_df.columns)}')\n```\n\n    Constructed the result dataset:\n    Shape: (3143, 14)\n    Columns: ['CustomerID', 'count', 'min', 'max', 'mean', 'sum', 'categ_0', 'categ_1', 'categ_2', 'categ_3', 'categ_4', 'LastPurchase', 'FirstPurchase', 'cluster']\n\n\n```\nfrom customer_segmentation_toolkit.analyse_customers import compute_aggregated_customer_clusters_info\n\n# Constructing the aggregated cluster info dataset\nselected_customers_df = compute_aggregated_customer_clusters_info(merged_df, N_PURCHASE_CLUSTERS, N_CUSTOMER_CLUSTERS,\n                                                                  categ_threshold=SELECTED_CUSTOMERS_CATEG_THRESHOLD)\nprint('Constructed the aggregated cluster info:')\nprint(f'Shape: {selected_customers_df.shape}')\nprint(f'Columns: {list(selected_customers_df.columns)}')\n```\n\n    Constructed the aggregated cluster info:\n    Shape: (11, 14)\n    Columns: ['cluster', 'count', 'min', 'max', 'mean', 'sum', 'categ_0', 'categ_1', 'categ_2', 'categ_3', 'categ_4', 'LastPurchase', 'FirstPurchase', 'size']\n\n\n```\n# Saving processed data\nOUTPUT = Path(f'../data/output/04_data_analyse_customers')\nOUTPUT.mkdir(exist_ok=True, parents=True)\n\nselected_customers_df.to_csv(f'{OUTPUT}/no_live_data__cleaned__purchase_clusters__train__selected_customers_aggregated.csv', index=False)\nmerged_df.to_csv(f'{OUTPUT}/no_live_data__cleaned__purchase_clusters__train__customer_clusters.csv', index=False)\n\nPath(f'{OUTPUT}/n_customer_clusters.txt').write_text(str(N_CUSTOMER_CLUSTERS))\n\nprint(f'Output data saved to {OUTPUT}: {[p.name for p in Path(OUTPUT).iterdir()]}')\n```\n\n    Output data saved to ../data/output/04_data_analyse_customers: ['n_customer_clusters.txt', 'no_live_data__cleaned__purchase_clusters__train__selected_customers_aggregated.csv', 'no_live_data__cleaned__purchase_clusters__train__customer_clusters.csv']\n\n\n---\n\n### 05. Download dataset and use it for training\n\n```\nfrom customer_segmentation_toolkit.data_zoo import download_data_csv\nfrom sklearn.model_selection import train_test_split\n\n# Download dataset from the data_zoo:\ncsv = 'no_live_data__cleaned__purchase_clusters__train__customer_clusters.csv'\nselected_customers: pd.DataFrame = download_data_csv(f'data/output/04_data_analyse_customers/{csv}')\n\nX = selected_customers[['mean', 'categ_0', 'categ_1', 'categ_2', 'categ_3', 'categ_4' ]]\nY = selected_customers['cluster']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8)\n\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape\n```\n\n\n\n\n    ((2514, 6), (629, 6), (2514,), (629,))\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artemlops/customer-segmentation-toolkit/tree/master/",
    "keywords": "MLOps ML feature_store data_engineering",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "customer-segmentation-toolkit",
    "package_url": "https://pypi.org/project/customer-segmentation-toolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/customer-segmentation-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/artemlops/customer-segmentation-toolkit/tree/master/"
    },
    "release_url": "https://pypi.org/project/customer-segmentation-toolkit/0.1.1/",
    "requires_dist": [
      "pip",
      "packaging",
      "pandas (>=1.0.0)",
      "nltk (>=3.6.2)",
      "matplotlib (>=3.3.4)",
      "scikit-learn (>=0.24.2)",
      "numpy (>=1.19)",
      "seaborn (>=0.11.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Data transformations for the Engineering Lab2 Feature-Store-for-ML",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10576378,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d0f75a1ed462355ecf8981f4e900c0cd3cb813591ef9992ec78de8fd1a35d1c",
          "md5": "5ca981a6c014a57577e9f36ea2940f95",
          "sha256": "aee63156893a26c704b198bc347305fc6c5d32cd4d98048123d061163afcea71"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ca981a6c014a57577e9f36ea2940f95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19167,
        "upload_time": "2021-05-25T16:55:22",
        "upload_time_iso_8601": "2021-05-25T16:55:22.498355Z",
        "url": "https://files.pythonhosted.org/packages/3d/0f/75a1ed462355ecf8981f4e900c0cd3cb813591ef9992ec78de8fd1a35d1c/customer_segmentation_toolkit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8aac4b2842c359b9e4e2654316a36fb4886f121e6b4b537dd46a63e4cc86afd",
          "md5": "68393ec6f67f7687edd3616831d1bf85",
          "sha256": "ee156276478fae1bb08bba562a08ea6828d2c50b72af7a773787611313cce73b"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68393ec6f67f7687edd3616831d1bf85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23804,
        "upload_time": "2021-05-25T16:55:24",
        "upload_time_iso_8601": "2021-05-25T16:55:24.596619Z",
        "url": "https://files.pythonhosted.org/packages/e8/aa/c4b2842c359b9e4e2654316a36fb4886f121e6b4b537dd46a63e4cc86afd/customer_segmentation_toolkit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a4ca46851216783fc09dfdb70d34c28481e429abfad9a52603fd5c7dc255410",
          "md5": "3916723af80fa862d4b881a410c0988c",
          "sha256": "4fe29ec53c99b3db86680778d76f1f33b5dfee05b72912832e738fd59d89cf58"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3916723af80fa862d4b881a410c0988c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27769,
        "upload_time": "2021-05-25T19:06:32",
        "upload_time_iso_8601": "2021-05-25T19:06:32.785687Z",
        "url": "https://files.pythonhosted.org/packages/7a/4c/a46851216783fc09dfdb70d34c28481e429abfad9a52603fd5c7dc255410/customer_segmentation_toolkit-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a2787b154d7bdca79a49ffad7ca655a3cdfac2577f6a358951453f00388566a",
          "md5": "0a48d3b544e3b56c74c4a95f00b8d023",
          "sha256": "f2f2ee16534eb4c871ed0ee3e47c3a4078e7fa9c2ef30cbcd41b49d783a81cf2"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0a48d3b544e3b56c74c4a95f00b8d023",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24072,
        "upload_time": "2021-05-25T19:06:34",
        "upload_time_iso_8601": "2021-05-25T19:06:34.132533Z",
        "url": "https://files.pythonhosted.org/packages/2a/27/87b154d7bdca79a49ffad7ca655a3cdfac2577f6a358951453f00388566a/customer_segmentation_toolkit-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3736d9eb1cf3759982c2c57b2105590299312231d7409f98ffe8cbc8b8ff3d8e",
          "md5": "9fa8dc1369481c3164f0b9a9994481d9",
          "sha256": "3946f235a5f68e2f05542a12eb9419cccb94affbcc8abb15d64a0b649e09abb9"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fa8dc1369481c3164f0b9a9994481d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27813,
        "upload_time": "2021-05-27T17:25:18",
        "upload_time_iso_8601": "2021-05-27T17:25:18.527091Z",
        "url": "https://files.pythonhosted.org/packages/37/36/d9eb1cf3759982c2c57b2105590299312231d7409f98ffe8cbc8b8ff3d8e/customer_segmentation_toolkit-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c13cfa82eb66852dc4e5042cfb6808b0a1e0ef67cbe474b176a68e6173637270",
          "md5": "9961b0e2f63a0be32f1813870350f601",
          "sha256": "4ac5af61c1764319b8a8c050f378fcdd472a7d17066c6685db16e1b377b77905"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9961b0e2f63a0be32f1813870350f601",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23998,
        "upload_time": "2021-05-27T17:25:20",
        "upload_time_iso_8601": "2021-05-27T17:25:20.074784Z",
        "url": "https://files.pythonhosted.org/packages/c1/3c/fa82eb66852dc4e5042cfb6808b0a1e0ef67cbe474b176a68e6173637270/customer_segmentation_toolkit-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a0cdd537a0950e026597c90829fc7b82d8835f1274ada56523675afb5e044be",
          "md5": "118b6ba55adb0aae29e4b9ec56759750",
          "sha256": "86c7feb6e234d576dcafdc53b6a8368ed58c22cc0ba71dd239547a85904d7120"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "118b6ba55adb0aae29e4b9ec56759750",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27814,
        "upload_time": "2021-05-27T17:26:58",
        "upload_time_iso_8601": "2021-05-27T17:26:58.599894Z",
        "url": "https://files.pythonhosted.org/packages/1a/0c/dd537a0950e026597c90829fc7b82d8835f1274ada56523675afb5e044be/customer_segmentation_toolkit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "983f9012840243b66c494aae07234bf9e3ae89eed33248b555b34444a289a42a",
          "md5": "98c2bf648acb60c77be0dddf914a04d2",
          "sha256": "5f7408af678af3767650c90b93d09874eb2d6bff8685fc353a1e826c4d38f900"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98c2bf648acb60c77be0dddf914a04d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24007,
        "upload_time": "2021-05-27T17:27:00",
        "upload_time_iso_8601": "2021-05-27T17:27:00.234373Z",
        "url": "https://files.pythonhosted.org/packages/98/3f/9012840243b66c494aae07234bf9e3ae89eed33248b555b34444a289a42a/customer_segmentation_toolkit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440e1a6573eafb2472d2bdc92662fbe03211fbb54dfd5e1cd325cdda5d2b1361",
          "md5": "73c35c2dc1cdbe2112466ea8df0dbaa5",
          "sha256": "89ef6eda3de28687b693c3900197d26c808b40f22fe40b14fa2ae715300ecc9e"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73c35c2dc1cdbe2112466ea8df0dbaa5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27939,
        "upload_time": "2021-06-07T10:46:55",
        "upload_time_iso_8601": "2021-06-07T10:46:55.650547Z",
        "url": "https://files.pythonhosted.org/packages/44/0e/1a6573eafb2472d2bdc92662fbe03211fbb54dfd5e1cd325cdda5d2b1361/customer_segmentation_toolkit-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d2d8bd3ca32d327e9177a8dac06726aa57b50ecf0d13181e44ec3014c19dcec",
          "md5": "5d386282e39fafb4c5e22e87c81e6a2d",
          "sha256": "924e3def01b6b271871dda950619cbf8351c1c87ae0d1bc32f63fc5f874308ee"
        },
        "downloads": -1,
        "filename": "customer_segmentation_toolkit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d386282e39fafb4c5e22e87c81e6a2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23526,
        "upload_time": "2021-06-07T10:46:56",
        "upload_time_iso_8601": "2021-06-07T10:46:56.896449Z",
        "url": "https://files.pythonhosted.org/packages/2d/2d/8bd3ca32d327e9177a8dac06726aa57b50ecf0d13181e44ec3014c19dcec/customer_segmentation_toolkit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "440e1a6573eafb2472d2bdc92662fbe03211fbb54dfd5e1cd325cdda5d2b1361",
        "md5": "73c35c2dc1cdbe2112466ea8df0dbaa5",
        "sha256": "89ef6eda3de28687b693c3900197d26c808b40f22fe40b14fa2ae715300ecc9e"
      },
      "downloads": -1,
      "filename": "customer_segmentation_toolkit-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73c35c2dc1cdbe2112466ea8df0dbaa5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27939,
      "upload_time": "2021-06-07T10:46:55",
      "upload_time_iso_8601": "2021-06-07T10:46:55.650547Z",
      "url": "https://files.pythonhosted.org/packages/44/0e/1a6573eafb2472d2bdc92662fbe03211fbb54dfd5e1cd325cdda5d2b1361/customer_segmentation_toolkit-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d2d8bd3ca32d327e9177a8dac06726aa57b50ecf0d13181e44ec3014c19dcec",
        "md5": "5d386282e39fafb4c5e22e87c81e6a2d",
        "sha256": "924e3def01b6b271871dda950619cbf8351c1c87ae0d1bc32f63fc5f874308ee"
      },
      "downloads": -1,
      "filename": "customer_segmentation_toolkit-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5d386282e39fafb4c5e22e87c81e6a2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23526,
      "upload_time": "2021-06-07T10:46:56",
      "upload_time_iso_8601": "2021-06-07T10:46:56.896449Z",
      "url": "https://files.pythonhosted.org/packages/2d/2d/8bd3ca32d327e9177a8dac06726aa57b50ecf0d13181e44ec3014c19dcec/customer_segmentation_toolkit-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}