{
  "info": {
    "author": "Shakiba Shahbandegan",
    "author_email": "sh.shahbandegan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Evolutionary feature selection toolbox\nThis package contains a set of tool to easily apply evolutionary feature selection techniques to your datasets.\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Initializers](#initializers)\n- [Fitness Functions](#fitness-functions)\n- [Binary Transformers](#binary-transformers)\n- [Optimizers](#optimizers)\n- [Credits](#credits)\n\n\n## Installation\nYou can install the package using the following command.\n```\npip install evotoolbox\n```\n\n\n## Quick start\nThis package is based on 4 essential building blocks: _initializer_, _optimizer_, _fitness function_, and _binary transformer_. To find the best features using an evolutionary algorithm you must choose one of the provided classes within this package or you can easily define your own custom classes. \n\nThe following sample code shows how to use the default _Random Initializer_, _GWO Optimizer_, _MultiObjective Fitness_, and _Threshold Transformer_ to do a simple feature selection task.\n``` python\nimport pandas as pd\nimport evotoolbox\nfrom evotoolbox.initializers import RandomInitializer\nfrom evotoolbox.fitness import MultiobjectiveFitness\nfrom evotoolbox.binary import ThresholdTransformer\nfrom evotoolbox.optimizers import GWO\n\n# Load your data\ndata = pd.read_csv('colon.csv').to_numpy()\nX = data[:,:-1]\nY = data[:, -1]\nn_features = X.shape[1]\n\n# Define the algorithm options\ninitializer = RandomInitializer(n_features=n_features, n_agents=10)\noptimizer = GWO(ThresholdTransformer(0.5), max_iter=100, lb=0, ub=1)\nfitness = MultiobjectiveFitness(alpha=0.99)\n\n# Fit the data using the provided options\nresult = evotoolbox.fit(X, Y, initializer, optimizer, fitness)\n\n# The result is a dictionary with three keys:\n# solution: the binary solution with shape (n_features,) where the selected features are 1 and others are 0\n# c: the convergence curve of the fitness\n# nf: number of selected features in the final solution\nprint(result['solution'])\n```\n\n\n## Initializers\n\n### Provided Initializers\nThis package provides three default initializer classes. These classes can be imported from `evotoolbox.initializers`. All of the initializers must receive the number of features and the number of agents as arguments.\n\n#### RandomInitializer\nThe RandomInitializer creates a random initial population.\n\n#### GreedyInitializer\nThe GreedyInitializer creates a random population and the tries to enhance the solution based on a greedy algorithm. This is a two step process. In the first pass the greedy algorithm checks if the fitness increases by setting zeros to ones in the solution one by one. If the solution fitness gets better that feature will be selected. In the second pass the algorithm tries to drop the features using the same logic.\nThis initializer usually generates high quality solutions with small number of features. The downside is that the initialization time increases linearly with the number of features and it can take hours to complete on very large datasets.\n\n#### OblInitializer\nThe RandomInitializer creates a random initial population and then also generates the complement of these solutions and compare each of these pairs and keeps the better solution in each pair and discards the other.\n\n### Defining your own initializer\nYou can easily define your own initializer by extending the `evotoolbox.initializers.BaseInitializer` class.\nYou can access the number of features and agents in this class. You also receive a fitness function to evaluate your solutions in the initialization process.\n``` python\nimport numpy as np\nfrom evotoolbox.initializers import BaseInitializer\n\nclass MyCustomInitializer(BaseInitializer):\n    def init(self, fitness_func):\n        # create a numpy array of the initial population\n        positions = np.zeros((self.n_agents, self.n_features))\n\n        # do your magic here!\n\n        # you can evaluate and compare the solutions using fitness_func\n        sample_fitness = fitness_func(positions[0])\n        # return the generated initial positions\n        return positions\n```\n\n\n## Fitness Functions\nFitness functions play an important role in meta-heuristic optimization. Generally in a feature selection task, a multi objective fitness function is used to achieve a high accuracy while keeping the number of features at minimum.\n\n### Provided fitness function\n\n#### MultiobjectiveFitness\nOne of the most popular fitness functions used in feature selection is defined by this equation.\n```\nFitness(selected_features) = alpha * KNN_ACCURACY(selected_features) + (1-alpha) * count(selected_features)\n```\nThis package provides a `MultiobjectiveFitness` class which applies K-fold cross validation and calculates the accuracy of a KNN classifier and then uses the above equation to find the fitness of the given features. To use this fitness function simply insatiate this class with `alpha` and `k` (number of neighbors) parameters.\n``` python\nfitness = MultiobjectiveFitness(alpha=0.99, k=5)\n```\n\n### Defining your own fitness function\nOf course you can implement your own fitness function. To do so, you must extend the `BaseFitness` class and implement the evaluate function. This function receives the solution to evaluate as an argument. You can access the data with `self.features` and `self.labels` variables. Here's an example.\n``` python\nfrom evotoolbox.fitness import BaseFitness\n\nclass MyFitness(BaseFitness):\n     def evaluate(self, solution):\n        # use self.features and self.labels to evaluate the given solution\n        # return a number, corresponding to the current solution fitness\n        return fitness\n```\n\n\n## Binary Transformers\nMost of the evolutionary algorithms work in continuos space. However, for a feature selection task, we must convert these continuos values to binary values so that we can use them to choose the best features.\n\n### Provided binary transformers\nThis package provides a variety of binary transformers. The transformer is given to the optimizer so that it can use it on every iteration to convert the continuos solutions into binary values. There is one threshold based and three transfer function based methods which you can use. A transfer function gives the probability of a feature being set to 1 and it is used as follows. `Z(x)` is the binary value of `x` and `T(x)` is the transfer function.\n\n![transfer function](https://render.githubusercontent.com/render/math?math=Z%28x%29%20%3D%5Cbegin%7Bcases%7D1%20%26%20rand%28%29%20%3C%3D%20T%28x%29%5C%5C0%20%26%20otherwise%5Cend%7Bcases%7D%20)\n\n#### ThresholdTransformer\nThe simplest is the `ThresholdTransformer`. This transformer uses a threshold to simply set anything above the threshold to one, and anything below the threshold to zero.\n``` python\nfrom evotoolbox.binary import ThresholdTransformer\ntransformer = ThresholdTransformer(0.5) # provide the threshold value here\n```\n\n#### SigmoidTransformer\n_Sigmoid_ or _S_ transfer function is a popular transfer function which is defined as below.\n\n![S transformer equation](https://render.githubusercontent.com/render/math?math=S%28x%29%20%3D%20%5Cfrac%7B1%7D%7B%281%2Be%5E%7B-%5Calpha%2Ax%7D%29%7D)\n\n``` python\nfrom evotoolbox.binary import SigmoidTransformer\ntransformer = SigmoidTransformer(1) # set alpha value here\n```\n\n#### VTransformer\nThere are different types of _V_ transformers. This package uses the following equation.\n\n![V transformer equation](https://render.githubusercontent.com/render/math?math=V%28x%29%20%3D%20%7Ctanh%28x%29%7C)\n\n``` python\nfrom evotoolbox.binary import VTransformer\ntransformer = VTransformer(1) # set alpha value here\n```\n\n#### QTransformer\nQuadratic transfer functions are another group of transfer functions and are defined with the following formula.\n\n![Q transformer equation](https://render.githubusercontent.com/render/math?math=Q%28x%29%20%3D%20%5CBigl%7C%5Cfrac%7Bx%7D%7B0.5%2A%20X_%7Bmax%7D%7D%5CBigr%7C%5Ep)\n\n``` python\nfrom evotoolbox.binary import QTransformer\ntransformer = QTransformer(6, 1) # set Xmax and p\n```\n\n\n### Defining your own binary transformer\nYou might need to implement a custom binary transformer. Like other classes, you can easily extend the `BaseTransformer` class in `evotoolbox.binary` and implement the `transform` function to create your own transformer. Here's an example.\n``` python\nimport numpy as np\nfrom evotoolbox.binary import BaseTransformer\n\nclass VTransformer(BaseTransformer):\n    def __init__(self, custom_parameter):\n        # define your custom parameters here\n        self.custom_parameter = custom_parameter\n\n    def transform(self, solution):\n        binary_solution = np.zeros_like(solution, dtype='int')\n        # put your logic here \n        return binary_solution\n```\n\n\n## Optimizers\nThis package comes with a variety of optimizers to use conveniently. You are also free to define your own optimizers.\n\n### Provided Optimizers\nThese optimizers are currently available in this package. Please note that this is an ongoing project and this list will be updated regularly with new algorithms.\n\nEach of the optimizers can have their own parameters, but the first four arguments when instantiating an optimizer class are shared and required. These arguments are: _binary\\_transformer_, _max\\_iter_, _lb_, and _ub_. these arguments control the binary transformer used to binarize the continuos values, max number of iterations, lower bound, and upper bound, respectively.\n\n#### Grey Wolf Optimizer (GWO)\nGWO is introduced by ... for more info refer to the [relevant paper](url).\n``` python\nimport GWO from evotoolbox.optimizers\ninitializer = GWO(binary_transformer, max_iter, lb, ub)\n```\n\n#### Butterfly Optimization Algorithm (BOA)\nBOA is introduced by ... for more info refer to the [relevant paper](url).\n``` python\nimport BOA from evotoolbox.optimizers\ninitializer = BOA(binary_transformer, max_iter, lb, ub, p=0.8, a=0.1, c_min=0.01, c_max=0.25)\n```\n\n#### Genetic Algorithm (GA)\nGA is introduced by ... for more info refer to the [relevant paper](url).\n``` python\nimport GA from evotoolbox.optimizers\ninitializer = GA(binary_transformer, max_iter, lb, ub, MR = 0.01, CR = 0.8)\n```\n\n#### Harris Hawk Optimizer (HHO)\nHHO is introduced by ... for more info refer to the [relevant paper](url).\n``` python\nimport HHO from evotoolbox.optimizers\ninitializer = HHO(binary_transformer, max_iter, lb, ub, beta = 1.5)\n```\n\n#### Salp Swarm Algorithm (SSA)\nSSA is introduced by ... for more info refer to the [relevant paper](url).\n``` python\nimport SSA from evotoolbox.optimizers\ninitializer = SSA(binary_transformer, max_iter, lb, ub)\n```\n\n### Defining your own optimizer\nYou probably want to implement your own optimizer to try out a new algorithm. Defining a new optimizer is simple, you should extend the `BaseOptimizer` class provided in `evotoolbox.optimizers`. You can define additional parameters required for your algorithm in the class constructor. All optimizers must implement the abstract `optimize(self, fitness_func, initial_positions, n_features, n_agents)` method defined in `BaseOptimizer` Take a look at this example.\n``` python\nimport numpy as np\nfrom evotoolbox.optimizers import BaseOptimizer\n\nclass BOA(BaseOptimizer):\n    def __init__(self, binary_transformer, max_iter, lb, ub, my_parameter):\n        super().__init__(binary_transformer, max_iter, lb, ub)\n        self.my_parameter = my_parameter\n\n\n    def optimize(self, fitness_func, initial_positions, n_features, n_agents):\n        # Optimize the problem using the given arguments\n        # You may use your custom parameter with self.my_parameter\n        # initial_positions will be the population initialized before\n        # Your function must return a dictionary as defined below:\n        # solution: the binary solution with shape (n_features,) where the selected features are 1 and others are 0\n        # c: the convergence curve of the fitness\n        # nf: number of selected features in the final solution\n        return {\n            'solution': None,\n            'c': None,\n            'nf': None,\n        }\n```\n\n\n## Credits\nAuthors:\n- [Shakiba Shahbandegan](https://github.com/shakiba-shb)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shakiba-shb/evotoolbox",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "evotoolbox",
    "package_url": "https://pypi.org/project/evotoolbox/",
    "platform": "",
    "project_url": "https://pypi.org/project/evotoolbox/",
    "project_urls": {
      "Homepage": "https://github.com/shakiba-shb/evotoolbox"
    },
    "release_url": "https://pypi.org/project/evotoolbox/0.0.2/",
    "requires_dist": [
      "numpy",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A toolbox for feature selection using evolutionary algorithms",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10185152,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aadf021544b017bc5f151f4be88c849620a2db486f0ebc321a080b1792e0117c",
          "md5": "d82f615748f50b87ac5280544c2ac9fa",
          "sha256": "433c6ed7e7cef78bb4430065995e62a681177bcd2bf76bdaec2ef5ad8c800639"
        },
        "downloads": -1,
        "filename": "evotoolbox-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d82f615748f50b87ac5280544c2ac9fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21926,
        "upload_time": "2021-04-27T13:41:29",
        "upload_time_iso_8601": "2021-04-27T13:41:29.332124Z",
        "url": "https://files.pythonhosted.org/packages/aa/df/021544b017bc5f151f4be88c849620a2db486f0ebc321a080b1792e0117c/evotoolbox-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2055d4a794d700e390fb850f5555f168bf852f4df6dada1bfdfac2ac3e4288f3",
          "md5": "3ba27d25a57d9e1a835d4b71bd97cff5",
          "sha256": "1ac22beb12d96c6e8241688e1d6f5e8da847f4de3b3aa25b0d13af39b4487645"
        },
        "downloads": -1,
        "filename": "evotoolbox-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ba27d25a57d9e1a835d4b71bd97cff5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16818,
        "upload_time": "2021-04-27T13:41:31",
        "upload_time_iso_8601": "2021-04-27T13:41:31.137763Z",
        "url": "https://files.pythonhosted.org/packages/20/55/d4a794d700e390fb850f5555f168bf852f4df6dada1bfdfac2ac3e4288f3/evotoolbox-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d4bb3005f239c419f4936610ee68b46cffb6609adab09493a277c25784dad9d",
          "md5": "50421890eb00df171cedcb00d1c6c6c0",
          "sha256": "751482279a8b56daa469a479900a37f18a8351d044580cea12f9c205da6c8308"
        },
        "downloads": -1,
        "filename": "evotoolbox-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50421890eb00df171cedcb00d1c6c6c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21920,
        "upload_time": "2021-04-27T13:47:14",
        "upload_time_iso_8601": "2021-04-27T13:47:14.701595Z",
        "url": "https://files.pythonhosted.org/packages/8d/4b/b3005f239c419f4936610ee68b46cffb6609adab09493a277c25784dad9d/evotoolbox-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc1c20a0355858fc6a1a26fba4beee86e94aaab139bf28ea8b6dbe171fd2a04e",
          "md5": "a3c97747305b2a4653df305fe9155ccc",
          "sha256": "9ee61b887873c4dc66f2bb2e9db51fda19398c1278459dcffc5545fc18a15fab"
        },
        "downloads": -1,
        "filename": "evotoolbox-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a3c97747305b2a4653df305fe9155ccc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16819,
        "upload_time": "2021-04-27T13:47:16",
        "upload_time_iso_8601": "2021-04-27T13:47:16.301777Z",
        "url": "https://files.pythonhosted.org/packages/dc/1c/20a0355858fc6a1a26fba4beee86e94aaab139bf28ea8b6dbe171fd2a04e/evotoolbox-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d4bb3005f239c419f4936610ee68b46cffb6609adab09493a277c25784dad9d",
        "md5": "50421890eb00df171cedcb00d1c6c6c0",
        "sha256": "751482279a8b56daa469a479900a37f18a8351d044580cea12f9c205da6c8308"
      },
      "downloads": -1,
      "filename": "evotoolbox-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "50421890eb00df171cedcb00d1c6c6c0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21920,
      "upload_time": "2021-04-27T13:47:14",
      "upload_time_iso_8601": "2021-04-27T13:47:14.701595Z",
      "url": "https://files.pythonhosted.org/packages/8d/4b/b3005f239c419f4936610ee68b46cffb6609adab09493a277c25784dad9d/evotoolbox-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc1c20a0355858fc6a1a26fba4beee86e94aaab139bf28ea8b6dbe171fd2a04e",
        "md5": "a3c97747305b2a4653df305fe9155ccc",
        "sha256": "9ee61b887873c4dc66f2bb2e9db51fda19398c1278459dcffc5545fc18a15fab"
      },
      "downloads": -1,
      "filename": "evotoolbox-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a3c97747305b2a4653df305fe9155ccc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16819,
      "upload_time": "2021-04-27T13:47:16",
      "upload_time_iso_8601": "2021-04-27T13:47:16.301777Z",
      "url": "https://files.pythonhosted.org/packages/dc/1c/20a0355858fc6a1a26fba4beee86e94aaab139bf28ea8b6dbe171fd2a04e/evotoolbox-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}