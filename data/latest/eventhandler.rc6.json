{
  "info": {
    "author": "David Vicente Ranz",
    "author_email": "dvicente74@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "eventhandler\n============\n\nIs a simple and effective event handler class, based in callbacks for python 3\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\neventhandler\n~~~~~~~~~~~~\nIs a **python simple and effective event handler class**, based in callbacks for python 3.\n\n\nBuild Status:\n~~~~~~~~~~~~~\n\n| |Build Status| |Coverage Status| |Pypi| |Python package and publish|\n\n**Github code and samples** https://github.com/davidvicenteranz/eventhandler\n\nQuick start\n-----------\n\nInstall the package\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n    $ pip install eventhandler\n\nUsage example\n~~~~~~~~~~~~~\n\nLets see a simple example of a chat room controlled by a bot using event calls.\n\nYou can just save the next code into a file and execute it running: python3 filename.py\n\n.. code:: python\n\n  from eventhandler import EventHandler\n\n\n  class ChatRoom:\n      \"\"\"Simulates a chatroom environment with event handler implementation.\n\n      This is just a documented sample without pretensions. It is not a real class implementation.\n      \"\"\"\n\n      def __init__(self):\n          \"\"\"Initialize the chat room.\"\"\"\n          self.__messages = []  # Stores users messages\n          self.__users = {'bot': []}  # Stores a dictionary with registered usernames\n\n          # Define the event handler and make it public outside the class to let externals subscriptions to events.\n          self.event_handler = EventHandler('onNewuser', 'onMessage')  # Note that events names are cased sensitive.\n          # You can set any number of unique events and asing any number of unique callbacks to fire per event.\n          # Is not necessary define events names during initialization, also you can register the event names during\n          # run time using register_event method.\n\n          # Lets link some internal class methods to those events as callbacks.\n          # Limits are available resources.\n          self.event_handler.link(self.__on_newuser_join, 'onNewuser')\n          self.event_handler.link(self.__on_message, 'onMessage')\n\n      # Now lets define this two methods to dispatch the events\n      # Note this methods are not accesible outside class instance\n      # This calbback will be called when onNewUser event happens\n      def __on_newuser_join(self, user):\n          \"\"\"Shout in the output telling new user has joined chat room, when onNewuser event happens.\"\"\"\n          print(f'\\n** ChatRoom info ** user {user} has joined the chat ** {len(self.user_list())} user/s **\\n')\n\n      # This callback will be called when onMessage event happens\n      def __on_message(self, user, msg):\n          \"\"\"Print the user message in the output, when onMessage event happens.\"\"\"\n          print(f'{user} says:\\t {msg}')\n\n      # Now let's define the public methods of the chatroom to be used outside the class\n      def user_list(self):\n          \"\"\"Return a list of not bot users.\"\"\"\n          return [user for user in self.__users.keys() if user != 'bot']\n\n      def say(self, user, msg=None):\n          \"\"\"Let user (and bots) send a message to the chat room.\"\"\"\n          if not user in self.__users:\n              # if user is not registered fire onNewuser event and recibe it inside the class.\n              self.__users[user] = []\n              self.event_handler.fire('onNewuser', user)\n          if not msg:\n              return\n          if msg != '':\n              # Enqueue the message and fire onMessage event to be received internally by __on_message method.\n              self.__messages.append((user, msg))\n              self.event_handler.fire('onMessage', user, msg)\n\n\n  class ChatBot:\n      \"\"\"Basic chatbot to link/subscribes to the chatroom class events and operate some interactions with users.\"\"\"\n\n      def __init__(self, chatroom: ChatRoom, name: str = 'bot'):\n          self.chatroom = chatroom\n          self.name = name\n\n          # Subscribe to external ChatRoom class events\n          chatroom.event_handler.link(self.saludate_new_user, 'onNewuser')\n          chatroom.event_handler.link(self.read_user_message, 'onMessage')\n\n      # When chatroom fires the onNewUser event our bot will saludate will link this method.\n      def saludate_new_user(self, user):\n          \"\"\"Bot saludates the user.\"\"\"\n          chat.say('bot', f'Hello {user}, welcome to the chat room.')\n\n      # When chatroom fires the onNewMessage event process it and broadcast some output to the chatroom if possible.\n      def read_user_message(self, user, msg):\n          \"\"\"Read user messages and act in consequece.\"\"\"\n          if user == 'bot':\n              # Please don't process yourself messages bot...\n              return\n\n          # check if the recibed message is answerable and reply if possible\n          if msg == f'Hey {self.name}, are there anyone here?':\n              if len(self.chatroom.user_list()) == 1:\n                  self.chatroom.say(self.name, f'Nope {user}. Just you and me.')\n              else:\n                  self.chatroom.say(self.name, f'Yes {user}. '\n                  f'there are {len(self.chatroom.user_list()) - 1} non bots users in the room, you, and me.')\n          return\n\n\n  # Python program starts execution here\n  if __name__ == '__main__':\n      # Create the chatroom\n      chat = ChatRoom()\n\n      # Initilize ChatBot class with the ChatRoom instance as param to let subscribe it to the chat events.\n      bot = ChatBot(chat)\n\n      print(\"Chatroom's EventHandler object representation...\")\n      print(f'{chat.event_handler}\\n') # You can watch all events and their each one list of callbacks printing the object\n\n\n      # Now the chat simulation. The first user interaction will send a message onNewuser event will be fired and\n      # managed by the bot. All messages (onMessage event) will be reached by the bot.\n      chat.say('sergio', 'Hello World!')\n      chat.say('sergio', 'Hey bot, are there anyone here?')\n      chat.say('david', 'Hello everybody!')\n      chat.say('david', 'Hey bot, are there anyone here?')\n      chat.say('sergio', 'Hi david!')\n      chat.say('kate')\n      chat.say('kate', 'Hey bot, are there anyone here?')\n\n\n**The avobe code must produce and output this:**\n\n.. code:: text\n\n  Chatroom's EventHandler object representation...\n  <class EventHandler at 0x10da97760: onNewuser:[__on_newuser_join, saludate_new_user], onMessage:[__on_message, read_user_message], verbose=False, tolerate_exceptions=False>\n\n\n  ** ChatRoom info ** user sergio has joined the chat ** 1 user/s **\n\n  bot says:\t Hello sergio, welcome to the chat room.\n  sergio says:\t Hello World!\n  sergio says:\t Hey bot, are there anyone here?\n  bot says:\t Nope sergio. Just you and me.\n\n  ** ChatRoom info ** user david has joined the chat ** 2 user/s **\n\n  bot says:\t Hello david, welcome to the chat room.\n  david says:\t Hello everybody!\n  david says:\t Hey bot, are there anyone here?\n  bot says:\t Yes david. there are 1 non bots users in the room, you, and me.\n  sergio says:\t Hi david!\n\n  ** ChatRoom info ** user kate has joined the chat ** 3 user/s **\n\n  bot says:\t Hello kate, welcome to the chat room.\n  kate says:\t Hey bot, are there anyone here?\n  bot says:\t Yes kate. there are 2 non bots users in the room, you, and me.\n\n\n\n**Thanks for watching and enjoy it.**\n\nWritten, tested and packaged with love by `David Vicente Ranz <https://davidvicenteranz.appspot.com/>`_\n\n.. |Build Status| image:: https://travis-ci.org/davidvicenteranz/eventhandler.svg?branch=master\n   :target: https://travis-ci.org/davidvicenteranz/eventhandler\n.. |Coverage Status| image:: https://coveralls.io/repos/github/davidvicenteranz/eventhandler/badge.svg\n   :target: https://coveralls.io/github/davidvicenteranz/eventhandler\n.. |Python package and publish| image:: https://github.com/davidvicenteranz/eventhandler/workflows/Python%20package%20and%20publish/badge.svg?branch=master\n   :target: https://github.com/davidvicenteranz/eventhandler\n.. |Pypi| image:: https://badge.fury.io/py/eventhandler.svg\n    :target: https://badge.fury.io/py/eventhandler",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidvicenteranz/eventhandler",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eventhandler",
    "package_url": "https://pypi.org/project/eventhandler/",
    "platform": "",
    "project_url": "https://pypi.org/project/eventhandler/",
    "project_urls": {
      "Homepage": "https://github.com/davidvicenteranz/eventhandler"
    },
    "release_url": "https://pypi.org/project/eventhandler/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple and effective event handler class, based in callbacks for python 3",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8212657,
  "releases": {
    "1.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5904bf28d151e6f1ca185316a37aa7206e81d5ac2b5bb604d06cf57ca9400a88",
          "md5": "b2fc5d10e7db0e960dc77089263cd06c",
          "sha256": "3f0c4c6ea77a023d0406e209a454cbfb0f40b7b5d2e87778aa902c89b1b04d05"
        },
        "downloads": -1,
        "filename": "eventhandler-1.1.24.tar.gz",
        "has_sig": false,
        "md5_digest": "b2fc5d10e7db0e960dc77089263cd06c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5029,
        "upload_time": "2020-09-17T13:06:20",
        "upload_time_iso_8601": "2020-09-17T13:06:20.240293Z",
        "url": "https://files.pythonhosted.org/packages/59/04/bf28d151e6f1ca185316a37aa7206e81d5ac2b5bb604d06cf57ca9400a88/eventhandler-1.1.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3df0b3a3297946473ce0faef8eb2dcd0d06667bc63c3be59dd065ae064c414a",
          "md5": "b1ce1914a60b81f7ef5e0861792b40fe",
          "sha256": "86513924988cb31d6d48c6868f654ed27749b0d7ec173c26c3f618d0aaaac729"
        },
        "downloads": -1,
        "filename": "eventhandler-1.1.25.tar.gz",
        "has_sig": false,
        "md5_digest": "b1ce1914a60b81f7ef5e0861792b40fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5028,
        "upload_time": "2020-09-17T13:35:21",
        "upload_time_iso_8601": "2020-09-17T13:35:21.087376Z",
        "url": "https://files.pythonhosted.org/packages/a3/df/0b3a3297946473ce0faef8eb2dcd0d06667bc63c3be59dd065ae064c414a/eventhandler-1.1.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ef16d7fff2376e663a6e18ca3e482cae716e1afd341251f347daa46c2d919fd",
          "md5": "cb1fc45f1aeca62253624bf3f3490438",
          "sha256": "0d0232abe101ec687d83b73645693adf2cba69bd0772153d1ca1bca3be2a9289"
        },
        "downloads": -1,
        "filename": "eventhandler-1.1.26.tar.gz",
        "has_sig": false,
        "md5_digest": "cb1fc45f1aeca62253624bf3f3490438",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5076,
        "upload_time": "2020-09-17T17:50:28",
        "upload_time_iso_8601": "2020-09-17T17:50:28.855937Z",
        "url": "https://files.pythonhosted.org/packages/6e/f1/6d7fff2376e663a6e18ca3e482cae716e1afd341251f347daa46c2d919fd/eventhandler-1.1.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba582cdc3a5a4a9f9db4f966fd6a5226564f842055d1cdcf6ff9936bb4ac16a",
          "md5": "3aed203d0720f171d7a60331c314cb42",
          "sha256": "a520e1d2ce3ada272584261c1f6513541a14bd1f994de81770208634063d0a7b"
        },
        "downloads": -1,
        "filename": "eventhandler-1.1.27.tar.gz",
        "has_sig": false,
        "md5_digest": "3aed203d0720f171d7a60331c314cb42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5213,
        "upload_time": "2020-09-17T18:55:52",
        "upload_time_iso_8601": "2020-09-17T18:55:52.469180Z",
        "url": "https://files.pythonhosted.org/packages/0b/a5/82cdc3a5a4a9f9db4f966fd6a5226564f842055d1cdcf6ff9936bb4ac16a/eventhandler-1.1.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d318b0ef72f1271528ba0e07276f176ae7701b8d10b70af678a0ad3f46af5e2",
          "md5": "8bbf180822c69c808563c97e060d3a2a",
          "sha256": "ef9c6cee14de78d08f13f387f13dab28a5edd8b8f169a86aa8cd56deab1058e7"
        },
        "downloads": -1,
        "filename": "eventhandler-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8bbf180822c69c808563c97e060d3a2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5837,
        "upload_time": "2020-09-17T22:47:37",
        "upload_time_iso_8601": "2020-09-17T22:47:37.756244Z",
        "url": "https://files.pythonhosted.org/packages/4d/31/8b0ef72f1271528ba0e07276f176ae7701b8d10b70af678a0ad3f46af5e2/eventhandler-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "722420339462930de921a182c0c3aa556c46308e5bf3eea3d9033f08f4233151",
          "md5": "f75bcf5b6531f1137b7d5ee519112833",
          "sha256": "2eb50411c60d4aafa2ff9189d2ded305c38003fa58f80e181bfa2d2d07f6bbfa"
        },
        "downloads": -1,
        "filename": "eventhandler-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f75bcf5b6531f1137b7d5ee519112833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5848,
        "upload_time": "2020-09-17T22:58:50",
        "upload_time_iso_8601": "2020-09-17T22:58:50.844563Z",
        "url": "https://files.pythonhosted.org/packages/72/24/20339462930de921a182c0c3aa556c46308e5bf3eea3d9033f08f4233151/eventhandler-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "722420339462930de921a182c0c3aa556c46308e5bf3eea3d9033f08f4233151",
        "md5": "f75bcf5b6531f1137b7d5ee519112833",
        "sha256": "2eb50411c60d4aafa2ff9189d2ded305c38003fa58f80e181bfa2d2d07f6bbfa"
      },
      "downloads": -1,
      "filename": "eventhandler-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f75bcf5b6531f1137b7d5ee519112833",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5848,
      "upload_time": "2020-09-17T22:58:50",
      "upload_time_iso_8601": "2020-09-17T22:58:50.844563Z",
      "url": "https://files.pythonhosted.org/packages/72/24/20339462930de921a182c0c3aa556c46308e5bf3eea3d9033f08f4233151/eventhandler-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}