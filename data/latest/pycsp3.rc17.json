{
  "info": {
    "author": "Lecoutre Christophe, Szczepanski Nicolas",
    "author_email": "lecoutre@cril.fr, szczepanski@cril.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<h1 align=\"center\"> PyCSP3 v2.1 (November 10, 2022) </h1>\n\nThis is Version 2.1 of PyCSP3, a library in Python 3 (version 3.6 or later) for modeling combinatorial constrained problems; see [www.pycsp.org](https://pycsp.org).\nPyCSP3 is inspired from both [JvCSP3](https://github.com/xcsp3team/XCSP3-Java-Tools/blob/master/doc/JvCSP3v1-1.pdf) (a Java-based API) and [Numberjack](https://github.com/eomahony/Numberjack). \nWith PyCSP3, it is possible to generate instances of:\n1. CSPs (Constraint Satisfaction Problems)\n1. COPs (Constraint Optimization Problems)\n\nin format XCSP3; see [www.xcsp.org](https://xcsp.org).\nCurrently, PyCSP3 is targeted to [XCSP3-core](https://arxiv.org/abs/2009.00514),  which allows us to use integer variables (with finite domains) and popular constraints.\n\nNote that:\n* a dedicated [website](https://pycsp.org/) with more than 60 Jupyter notebooks is available\n* a well-documented [guide](https://arxiv.org/abs/2009.00326) is available\n* PyCSP3 is available as a [PyPi package](https://pypi.org/project/pycsp3/)\n\n\nAt this stage, one can run two embedded solvers:\n* the constraint solver [ACE](https://github.com/xcsp3team/ace) (AbsCon Essence), with the option -solve or the option -solver=ace\n* the constraint solver [Choco](https://choco-solver.org/), with the option -solver=choco\n\nInformation about how piloting these embedded solvers can be found in [this document](https://github.com/xcsp3team/pycsp3/blob/master/docs/optionsSolvers.pdf).\n\nOf course, it is possible to launch on generated XCSP3 instances (files) any solver that recognizes the XCSP3 format.\nFor example, see the solvers involved in the [2022 Competition](https://www.xcsp.org/competitions/).\nIt is also immediate to run ACE or Choco on XCSP3 instances (files) as the respective executables (jar files) are \npresent in directories `pycsp3/solvers/ace` and  `pycsp3/solvers/choco`.\nFor example, for running ACE on the XCSP3 instance 'zebra.xml', just execute:\n```console\njava -jar ACE-YY-MM.jar zebra.xml \n\n```\nwhile replacing YY and MM with the current values that are present in the name of the jar file.\n\nNote that it is also possible to pilot solvers with Python; see [PyCSP3 Solving Process](https://pycsp.org/documentation/solving-process/).\n\n\n# 1) Installation from PyPi\n\nThis is the easiest way of installing PyCSP3.\n\nNote that you need first Python 3 (version 3.6, or later) to be installed.\nYou can do it, for example, from [python.org](https://www.python.org/downloads/)\n\n\n## Installing PyCSP3 (Linux)\n\nCheck if 'pip3' is installed. If it is not the case, execute:\n\n```console\nsudo apt install python3-pip\n\n```\n\nThen, install PyCSP3 with the command 'pip3':\n\n```console\nsudo pip3 install pycsp3\n\n```\n\nFor using the -solve or -solver options, you need to have Java (at least, version 11) installed:\n\n```console\nsudo apt-get install openjdk-11-jdk\n```\n\n\n## Installing PyCSP3 (Mac OS)\n\nIf Python 3 is installed on your system, the command 'pip3' should already be present.\n\nInstall PyCSP3 with the command 'pip3':\n\n```console\nsudo pip3 install pycsp3\n```\n\nFor using the -solve or -solver options, you need to have Java (at least, version 11) installed.\n\n\n## Installing PyCSP3 (Windows)\n\nYou may need to upgrade 'pip'. Open the console and type:\n\n```console\npython -m pip install --upgrade pip\n```\n\nThen, for installing pycsp3, type:\n\n```console\npython -m pip install pycsp3\n```\n\nFor using the -solve or -solver options, you need to install (at least) Java version 11:\n\nhttps://www.oracle.com/java/technologies/javase-downloads.html\n\nAnd add in the PATH the java command, for example, temporally, with the command:\n\n```console\nset path=%path%;C:/Program Files/Java/jdk-14.0.1/bin/\n```\n\nYou can check the java command by typing in your console:\n\n```console\njava --version\n```\n\n## Updating the Version of PyCSP3 (for PyPi)\n\nFor updating your version of PyCSP3, simply execute:\n\nFor linux/Mac:\n\n```console\nsudo pip3 install --upgrade pycsp3\n```\n\nFor Windows:\n\n```console\npython -m pip install --upgrade pycsp3\n```\n\n## Copying a Pool of Models\n\nPyCSP3 is accompanied by more than 100 models.\nTo get them in a subdirectory `problems` of your current directory, execute:\n\n```console\npython3 -m pycsp3 (For linux/Mac)\npython -m pycsp3 (For Windows)\n```\n\nAnd you can test the compilation of one of the models, for example:\n\n```console\npython3 problems/csp/single/Zebra.py (For Linux/Mac)\npython problems\\csp\\single\\Zebra.py (For Windows)\n```\n\n# 2) Installation (alternative) by Cloning from GitHub\n\nAn alternative to PyPi is to clone the code from GitHub.\nHere is an illustration for MAC OS.\nWe assume that Python 3 is installed (otherwise, type `port install python38` for example), and consequently 'pip3' is also installed.\nIn a console, type:\n```console\ngit clone https://github.com/xcsp3team/pycsp3.git\npip3 install lxml\n```\n\nYou may need to update the environment variable 'PYTHONPATH', by typing for example:\n```console\nexport PYTHONPATH=$PYTHONPATH:.\n```\n\n# 3) Compilation and Examples\n\nWe succinctly introduce a few PyCSP3 models, showing how to compile them with different options.\nHowever, note that many illustrations are available on [www.pycsp.org](https://pycsp.org/), notably many [models](https://pycsp.org/documentation/models/) with Jupyter notebooks. \n\nFirst, we give some general information about compilation.\n\n## Compiling PyCSP3 Models\n\nFor generating an XCSP3 instance from a PyCSP3 model, you have to execute:\n\n```console\npython3 <file> [options]\n```\n\nwith:\n\n*  &lt;file&gt;: a Python file to be executed, describing a model in PyCSP3\n*  [options]: possible options to be used when compiling\n\nAmong the options, we find:\n\n* ```-data=<data_value>```: allows us to specify the data to be used by the model. It can be:\n    + elementary: -data=5\n    + a simple list: -data=[9,0,0,3,9]\n    + a JSON file: -data=Bibd-3-4-6.json\n\n    Data can then be directly used in the PyCSP3 model by means of a predefined variable `data`.\n\n* ```-dataparser=<file>```: a Python file for reading/parsing data given under any arbitrary form (e.g., by a text file).\n     See Example Nonogram below, for an illustration.\n\n* ```-dataexport```: exports (saves) the data in JSON format.\n     See Example Nonogram below, for an illustration.\n\n* ```-variant=<variant_name>```: the name of a variant, to be used with function `variant()`.\n      See Example AllInterval below, for an illustration.\n\n* ```-solve```: attempts to solve the instance with the embedded solver 'Ace'. It requires that Java version 8 (at least) is installed.\n\n* ```-solver=<solver_name>```: attempts to solve the instance with the solver whose name is given. Currently, it can be 'ace' or 'choco'.\nImportant: it requires that Java version 8 (at least) is installed.\nInformation about how piloting these embedded solvers can be found in [this document](https://github.com/xcsp3team/pycsp3/blob/master/docs/optionsSolvers.pdf).\n\n* ```-output=<file_name>```: sets the filename of the generated XCSP3 instance (think about the extension .xml)\n\nBy default, a file containing the XCSP3 instance is generated, unless you use the option:\n\n* ```-display```: displays the XCSP3 instance in the system standard output, instead of generating an XCSP3 file \n\n## Example 1: in console mode\n\nOur first example shows how you can build basic models in console mode.\nIn this example, we just post two variable and two simple binary constraints.\n\n```console\n$ python3\nPython 3.5.2\n>>> from pycsp3 import *\n>>> x = Var(range(10))\n>>> y = Var(range(10))\n>>> satisfy(\n       x < y,\n       x + y > 15\n    )\n>>> compile()\n```\nNote that to get an XCSP3 file, we call `compile()`.\n\n\n## Example 2: Send+More=Money\n\nThis example shows how you can define a model when no data is required from the user.\nThis is the classical crypto-arithmetic puzzle 'Send+More=Money'.\n\n#### File **`SendMore.py`**\n\n```python\nfrom pycsp3 import *\n\n# letters[i] is the digit of the ith letter involved in the equation\ns, e, n, d, m, o, r, y = letters = VarArray(size=8, dom=range(10))\n\nsatisfy(\n    # letters are given different values\n    AllDifferent(letters),\n\n    # words cannot start with 0\n    [s > 0, m > 0],\n\n    # respecting the mathematical equation\n    [s, e, n, d] * [1000, 100, 10, 1]\n    + [m, o, r, e] * [1000, 100, 10, 1]\n    == [m, o, n, e, y] * [10000, 1000, 100, 10, 1]\n)\n```\n\nTo generate the XCSP3 instance (file), the command is:\n\n```console\npython3 SendMore.py\n```\n\nTo generate and solve (with ACE) the XCSP3 instance, the command is:\n\n```console\npython3 SendMore.py -solve\n```\n\nTo generate and solve with Choco the XCSP3 instance, the command is:\n\n```console\npython3 SendMore.py -solver=choco\n```\n\n\n## Example 3: All-Interval Series\n\nThis example shows how you can simply specify an integer (as unique data) for a model.\nFor our illustration, we consider the problem [All-Interval Series](https://www.csplib.org/Problems/prob007/).\n\nA classical model is:\n\n#### File **`AllInterval.py`** (version 1)\n\n```python\nfrom pycsp3 import *\n\nn = data\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\nsatisfy(\n    # notes must occur once, and so form a permutation\n    AllDifferent(x),\n\n    # intervals between neighbouring notes must form a permutation\n    AllDifferent(abs(x[i] - x[i + 1]) for i in range(n - 1)),\n\n    # tag(symmetry-breaking)\n    x[0] < x[n - 1]\n)\n```\n\nNote the presence of a tag `symmetry-breaking` that will be directly integrated into the XCSP3 file generated by the following command:\n\n```console\npython3 AllInterval.py -data=5\n```\n\nSuppose that you would prefer to declare a second array of variables for representing successive distances.\nThis would give:\n\n\n#### File **`AllInterval.py`** (version 2)\n\n```python\nfrom pycsp3 import *\n\nn = data\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\n# y[i] is the distance between x[i] and x[i+1]\ny = VarArray(size=n - 1, dom=range(1, n))\n\nsatisfy(\n    # notes must occur once, and so form a permutation\n    AllDifferent(x),\n\n    # intervals between neighbouring notes must form a permutation\n    AllDifferent(y),\n\n    # computing distances\n    [y[i] == abs(x[i] - x[i + 1]) for i in range(n - 1)],\n\n    # tag(symmetry-breaking)\n    [x[0] < x[n - 1], y[0] < y[1]]\n)\n```\n\nHowever, sometimes, it may be relevant to combine different variants of a model in the same file.\nIn our example, this would give:\n\n#### File **`AllInterval.py`** (version 3)\n\n```python\nfrom pycsp3 import *\n\nn = data\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\nif not variant():\n\n    satisfy(\n        # notes must occur once, and so form a permutation\n        AllDifferent(x),\n\n        # intervals between neighbouring notes must form a permutation\n        AllDifferent(abs(x[i] - x[i + 1]) for i in range(n - 1)),\n\n        # tag(symmetry-breaking)\n        x[0] < x[n - 1]\n    )\n\nelif variant(\"aux\"):\n\n    # y[i] is the distance between x[i] and x[i+1]\n    y = VarArray(size=n - 1, dom=range(1, n))\n\n    satisfy(\n        # notes must occur once, and so form a permutation\n        AllDifferent(x),\n\n        # intervals between neighbouring notes must form a permutation\n        AllDifferent(y),\n\n        # computing distances\n        [y[i] == abs(x[i] - x[i + 1]) for i in range(n - 1)],\n\n        # tag(symmetry-breaking)\n        [x[0] < x[n - 1], y[0] < y[1]]\n    )\n```\n\nFor compiling the main model (variant), the command is:\n\n```console\npython3 AllInterval.py -data=5\n```\n\nFor compiling the second model variant, using the option `-variant`, the command is:\n\n```console\npython3 AllInterval.py -data=5 -variant=aux\n```\n\nTo generate and solve (with ACE) the instance of order 10 and variant 'aux', the command is:\n\n```console\npython3 AllInterval.py -data=10 -variant=aux -solve\n```\n\n\n## Example 4: BIBD\n\nThis example shows how you can specify a list of integers to be used as data for a model.\nFor our illustration, we consider the problem [BIBD](https://www.csplib.org/Problems/prob028/).\nWe need five integers `v, b, r, k, l` for specifying a unique instance (possibly, `b` and `r` can be set to 0, so that these values are automatically computed according to a template for this problem).\nThe model is:\n\n#### File **`Bibd.py`**\n\n```python\nfrom pycsp3 import *\n\nv, b, r, k, l = data\nb = (l * v * (v - 1)) // (k * (k - 1)) if b == 0 else b\nr = (l * (v - 1)) // (k - 1) if r == 0 else r\n\n# x[i][j] is the value of the matrix at row i and column j\nx = VarArray(size=[v, b], dom={0, 1})\n\nsatisfy(\n    # constraints on rows\n    [Sum(row) == r for row in x],\n\n    # constraints on columns\n    [Sum(col) == k for col in columns(x)],\n\n    # scalar constraints with respect to lambda\n    [row1 * row2 == l for (row1, row2) in combinations(x, 2)]\n)\n```\n\nTo generate an XCSP3 instance (file), we can for example execute a command like:\n\n```console\npython3 Bibd.py -data=[9,0,0,3,9]\n```\n\nWith some command interpreters (shells), you may have to escape the characters '[' and ']', which gives:\n\n```console\npython3 Bibd.py -data=\\[9,0,0,3,9\\]\n```\n\n\n## Example 5: Rack Configuration\n\nThis example shows how you can specify a JSON file to be used as data for a model.\nFor our illustration, we consider the problem [Rack Configuration](https://www.csplib.org/Problems/prob031/).\nThe data (for a specific instance) are then initially given in a JSON file, as for example:\n\n#### File **`Rack_r2.json`**\n\n```json\n{\n    \"nRacks\": 10,\n    \"models\": [[150,8,150],[200,16,200]],\n    \"cardTypes\": [[20,20],[40,8],[50,4],[75,2]]\n}\n```\n\nIn the following model, we directly unpack the components of the variable `data` (because it is automatically given under the form of a named tuple) whose fields are exactly those of the main object in the JSON file.\n\n#### File **`Rack.py`**\n\n```python\nfrom pycsp3 import *\n\nnRacks, models, cardTypes = data\nmodels.append([0, 0, 0])  # we add first a dummy model (0,0,0)\npowers, sizes, costs = zip(*models)\ncardPowers, cardDemands = zip(*cardTypes)\nnModels, nTypes = len(models), len(cardTypes)\n\ntable = {(i, powers[i], sizes[i], costs[i]) for i in range(nModels)}\n\n# m[i] is the model used for the ith rack\nm = VarArray(size=nRacks, dom=range(nModels))\n\n# p[i] is the power of the model used for the ith rack\np = VarArray(size=nRacks, dom=powers)\n\n# s[i] is the size (number of connectors) of the model used for the ith rack\ns = VarArray(size=nRacks, dom=sizes)\n\n# c[i] is the cost (price) of the model used for the ith rack\nc = VarArray(size=nRacks, dom=costs)\n\n# nc[i][j] is the number of cards of type j put in the ith rack\nnc = VarArray(size=[nRacks, nTypes], dom=lambda i, j: range(min(max(sizes), cardDemands[j]) + 1))\n\nsatisfy(\n    # linking rack models with powers, sizes and costs\n    [(m[i], p[i], s[i], c[i]) in table for i in range(nRacks)],\n\n    # connector-capacity constraints\n    [Sum(nc[i]) <= s[i] for i in range(nRacks)],\n\n    # power-capacity constraints\n    [nc[i] * cardPowers <= p[i] for i in range(nRacks)],\n\n    # demand constraints\n    [Sum(nc[:, j]) == cardDemands[j] for j in range(nTypes)],\n\n    # tag(symmetry-breaking)\n    [Decreasing(m), imply(m[0] == m[1], nc[0][0] >= nc[1][0])]\n)\n\nminimize(\n    # minimizing the total cost being paid for all racks\n    Sum(c)\n)\n```\n\nTo generate an XCSP3 instance (file), we execute the command:\n\n```console\npython3 Rack.py -data=Rack_r2.json\n```\n\nOne might want to have the data in the JSON file with another structure, as for example:\n\n\n#### File **`Rack_r2b.json`**\n\n```json\n{\n    \"nRacks\": 10,\n    \"rackModels\": [\n\t{\"power\":150,\"nConnectors\":8,\"price\":150},\n\t{\"power\":200,\"nConnectors\":16,\"price\":200}\n    ],\n    \"cardTypes\": [\n\t{\"power\":20,\"demand\":20},\n\t{\"power\":40,\"demand\":8},\n\t{\"power\":50,\"demand\":4},\n\t{\"power\":75,\"demand\":2}\n    ]\n}\n  ```\n\nWe only need to modify one line from the previous model:\n\n\n#### File **`Rack2.py`**\n\n```python\nmodels.append(models[0].__class__(0, 0, 0))  # we add first a dummy model (0,0,0) ; we get the class of the used named tuples to build a new one\n```\n\nTo generate an XCSP3 instance (file), we execute the command:\n\n```console\npython3 Rack2.py -data=Rack_r2b.json\n```\n\n\n## Example 6: Nonogram\n\nThis example shows how you can use an auxiliary Python file for parsing data that are not initially given under JSON format.\nFor our illustration, we consider the problem [Nonogram](https://www.csplib.org/Problems/prob012/).\nThe data (for a specific Nonogram puzzle) are initially given in a text file as follows:\n1. a line stating the numbers of rows and columns,\n1. then, for each row a line stating the number of blocks followed by the sizes of all these blocks (on the same line),\n1. then, for each column a line stating the number of blocks followed by the sizes of all these blocks (on the same line).\n\nBelow, here is an example of such a text file.\n\n#### File **`Nonogram_example.txt`**\n```\n24 24\n0\n1\t5\n2\t3 3\n2\t1 2\n2\t2 1\n2\t1 1\n2\t3 3\n3\t1 5 1\n3\t1 1 1\n3\t2 1 1\n3\t1 1 2\n3\t3 1 3\n3\t1 3 1\n3\t1 1 1\n3\t2 1 2\n3\t1 1 1\n1\t5\n3\t1 1 1\n3\t1 1 1\n3\t1 1 1\n3\t5 1 1\n2\t1 2\n3\t2 2 4\n2\t4 9\n\n0\n0\n0\n1\t1\n1\t2\n1\t2\n2\t6 1\n3\t3 1 3\n3\t1 1 4\n4\t2 1 1 7\n5\t1 1 1 1 1\n3\t1 12 1\n5\t1 1 1 1 1\n4\t2 1 1 7\n4\t1 1 4 1\n4\t2 1 2 2\n2\t8 3\n2\t1 1\n2\t1 2\n1\t4\n1\t3\n1\t2\n1\t1\n0\n```\n\nFirst, we need to write a piece of code in Python for building a dictionary `data` that will be then used in our model (after having been automatically converted to a named tuple).\nWe have first to import everything (*) from `pycsp3.problems.data.parsing`.\nWe can then add any new arbitrary item to the dictionary `data` (which is initially empty).\nThis is what we do below with two items whose keys are called `rowPatterns` and `colPatterns`.\nThe values associated with these two keys are defined as two-dimensional arrays (lists) of integers, defining the sizes of blocks.\nThe function `next_int()` can be called for reading the next integer in a text file, which will be specified on the command line (see later).\n\n#### File **`Nonogram_Parser.py`**\n```python\nfrom pycsp3.problems.data.parsing import *\n\nnRows, nCols = next_int(), next_int()\ndata[\"rowPatterns\"] = [[next_int() for _ in range(next_int())] for _ in range(nRows)]\ndata[\"colPatterns\"] = [[next_int() for _ in range(next_int())] for _ in range(nRows)]\n```\n\nThen, we just write the model by getting data from the variable `data`.\nThe model is totally independent of the way data were initially given (from a text file or a JSON file, for example).\nIn the code below, note how an object `Automaton` is defined from a specified pattern (list of blocks).\n Also, for a `regular` constraint, we just write something like `scope in automaton`.\n Finally, `x[:, j]` denotes the jth column of `x`.\n\n#### File **`Nonogram.py`**\n```python\nfrom pycsp3 import *\n\nrows, cols = data  # patterns for row and columns \nnRows, nCols = len(rows), len(cols)\n\ndef automaton(pattern):\n    q = Automaton.q  # for building state names\n    transitions = []\n    if len(pattern) == 0:\n        n_states = 1\n        transitions.append((q(0), 0, q(0)))\n    else:\n        n_states = sum(pattern) + len(pattern)\n        num = 0\n        for i, size in enumerate(pattern):\n            transitions.append((q(num), 0, q(num)))\n            transitions.extend((q(num + j), 1, q(num + j + 1)) for j in range(size))\n            transitions.append((q(num + size), 0, q(num + size + (1 if i < len(pattern) - 1 else 0))))\n            num += size + 1\n    return Automaton(start=q(0), final=q(n_states - 1), transitions=transitions)\n\n# x[i][j] is 1 iff the cell at row i and col j is colored in black\nx = VarArray(size=[nRows, nCols], dom={0, 1})\n\nsatisfy(\n    [x[i] in automaton(rows[i]) for i in range(nRows)],\n\n    [x[:, j] in automaton(cols[j]) for j in range(nCols)]\n)\n```\n\nTo generate the XCSP3 instance (file), we just need to specify the name of the text file (option `-data`) and the name of the Python parser (option `-dataparser`).\n\n```console\npython3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py\n```\n\nMaybe, you think that it would be simpler to have directly the data in JSON file.\nYou can generate such a file with the option `-dataexport`.\nThe command is as follows:\n\n```console\npython3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py -dataexport\n```\n\nA file `Nonogram_example.json` is generated, whose content is:\n\n```json\n{\n \"colPatterns\":[[],[],[],[1],[2],[2],[6,1],[3,1,3],[1,1,4],[2,1,1,7],[1,1,1,1,1],[1,12,1],[1,1,1,1,1],[2,1,1,7],[1,1,4,1],[2,1,2,2],[8,3],[1,1],[1,2],[4],[3],[2],[1],[]],\n \"rowPatterns\":[[],[5],[3,3],[1,2],[2,1],[1,1],[3,3],[1,5,1],[1,1,1],[2,1,1],[1,1,2],[3,1,3],[1,3,1],[1,1,1],[2,1,2],[1,1,1],[5],[1,1,1],[1,1,1],[1,1,1],[5,1,1],[1,2],[2,2,4],[4,9]]\n}\n```\n\nWith this new file, you can directly generate the XCSP3 file with:\n ```console\npython3 Nonogram.py -data=Nonogram_example.json\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "IA CP constraint modeling CSP COP",
    "license": "MIT",
    "maintainer": "Szczepanski Nicolas",
    "maintainer_email": "szczepanski@cril.fr",
    "name": "pycsp3",
    "package_url": "https://pypi.org/project/pycsp3/",
    "platform": "LINUX",
    "project_url": "https://pypi.org/project/pycsp3/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pycsp3/2.1.2/",
    "requires_dist": [
      "lxml"
    ],
    "requires_python": ">=3",
    "summary": "Modeling Constrained Combinatorial Problems in Python",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16530225,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2e4ae70b9659e52c37b7800e99e49def6e93c7f35c0b46b8b2c9ae03c51e6a2",
          "md5": "3feb7dd8bf1b7ab7071810914eaca752",
          "sha256": "6bf3d76150f86e5ea3aa443d732ea13e193a34f1ef2ad03ac36228099c4b6aa3"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3feb7dd8bf1b7ab7071810914eaca752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 908478,
        "upload_time": "2019-11-10T08:58:24",
        "upload_time_iso_8601": "2019-11-10T08:58:24.355454Z",
        "url": "https://files.pythonhosted.org/packages/f2/e4/ae70b9659e52c37b7800e99e49def6e93c7f35c0b46b8b2c9ae03c51e6a2/pycsp3-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76dc6035aa6704546aa438a93c81af8118d72ce5c9cf20ef6efffe061a9676c4",
          "md5": "48481ed8015fa3fec5c3a819251af21b",
          "sha256": "3fbce62d02fc4caafd32bcbf2b2ff3013edf4c0b8eca3803579a4bef67ed8a33"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "48481ed8015fa3fec5c3a819251af21b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 804071,
        "upload_time": "2019-11-10T08:58:28",
        "upload_time_iso_8601": "2019-11-10T08:58:28.403490Z",
        "url": "https://files.pythonhosted.org/packages/76/dc/6035aa6704546aa438a93c81af8118d72ce5c9cf20ef6efffe061a9676c4/pycsp3-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41ef464f44a4d80de36404e7a529f5ce12215f539901721dc4370e4643fba336",
          "md5": "78814a6490aa2ecc2a3fcd6635417f8a",
          "sha256": "42d103730e5fc51de37a9ea663312d115149df511018338d8e8f51b5db6dbf91"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78814a6490aa2ecc2a3fcd6635417f8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 188059,
        "upload_time": "2020-01-26T20:17:31",
        "upload_time_iso_8601": "2020-01-26T20:17:31.063879Z",
        "url": "https://files.pythonhosted.org/packages/41/ef/464f44a4d80de36404e7a529f5ce12215f539901721dc4370e4643fba336/pycsp3-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ab5162f8b2f8b3fd6e605f190ffd4426d1840089f8f3068731b56062a15103d",
          "md5": "dfd8dc2a7bb7a1e7ecb800bb34597ad9",
          "sha256": "e05bc3a2bf1519407720ac020ed5f4b9f55c339f2a4bc7f89b0c3e88c3eb94ce"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "dfd8dc2a7bb7a1e7ecb800bb34597ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 124869,
        "upload_time": "2020-01-26T20:17:33",
        "upload_time_iso_8601": "2020-01-26T20:17:33.390995Z",
        "url": "https://files.pythonhosted.org/packages/7a/b5/162f8b2f8b3fd6e605f190ffd4426d1840089f8f3068731b56062a15103d/pycsp3-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdaf34bc62f671b41d2b9900c434b09158a1790b069408f3b69c044f8fd9e2a6",
          "md5": "80b1c7706b72156aca4400bd943f823a",
          "sha256": "910fb91987e6b7a695ad5848a54cb6ae7d1e23483da64eeea03b28539cfe9f8f"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80b1c7706b72156aca4400bd943f823a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 27147314,
        "upload_time": "2020-05-08T16:29:22",
        "upload_time_iso_8601": "2020-05-08T16:29:22.729237Z",
        "url": "https://files.pythonhosted.org/packages/fd/af/34bc62f671b41d2b9900c434b09158a1790b069408f3b69c044f8fd9e2a6/pycsp3-1.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c246d5ab294aff3d149a5e35b6401cfeaf89bc371e3b51c95a777675845053f",
          "md5": "97ca441af408c5ca9d64a02d26ab0c06",
          "sha256": "dd8a61f40a6fd9eca811fd3d9f568f590fcd8a72bd3678b756edf72590d204dc"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "97ca441af408c5ca9d64a02d26ab0c06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 26994728,
        "upload_time": "2020-05-08T16:29:36",
        "upload_time_iso_8601": "2020-05-08T16:29:36.810271Z",
        "url": "https://files.pythonhosted.org/packages/6c/24/6d5ab294aff3d149a5e35b6401cfeaf89bc371e3b51c95a777675845053f/pycsp3-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90b2fc44848749597d30e90f68d2ea2982810b964d04a5e24b91a3e2c94b0131",
          "md5": "70f135798fdde307837fc5f266588c99",
          "sha256": "d7136414c8b113328ab366cf196dde388654b928f0e14d2d46fa8dd722373f3b"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70f135798fdde307837fc5f266588c99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 908631,
        "upload_time": "2019-11-10T10:08:35",
        "upload_time_iso_8601": "2019-11-10T10:08:35.016176Z",
        "url": "https://files.pythonhosted.org/packages/90/b2/fc44848749597d30e90f68d2ea2982810b964d04a5e24b91a3e2c94b0131/pycsp3-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac27cc310574c3e3fb106fbae72ae41c3bb2aee276086c08f1f58d8089e26228",
          "md5": "0fc431693404ca47d438b4653b1e1909",
          "sha256": "cf1098e17947ec81313fe1b43ab41db4c48a1425ad5123e16700354df46e7969"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0fc431693404ca47d438b4653b1e1909",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 804256,
        "upload_time": "2019-11-10T10:08:38",
        "upload_time_iso_8601": "2019-11-10T10:08:38.944364Z",
        "url": "https://files.pythonhosted.org/packages/ac/27/cc310574c3e3fb106fbae72ae41c3bb2aee276086c08f1f58d8089e26228/pycsp3-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e03cc5d4f93ea058413f0817865dc01dfe8e006d10988bc64c79cc82a805c8cb",
          "md5": "2b6112266fc366ff91c461577226d2fb",
          "sha256": "a4d74acdaaf36a79b1fbea5350ef94aac47469d50784fb7326b2a52f9745b975"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b6112266fc366ff91c461577226d2fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 909733,
        "upload_time": "2019-12-10T08:34:19",
        "upload_time_iso_8601": "2019-12-10T08:34:19.246910Z",
        "url": "https://files.pythonhosted.org/packages/e0/3c/c5d4f93ea058413f0817865dc01dfe8e006d10988bc64c79cc82a805c8cb/pycsp3-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c3febb8130349d53bd2c9b993b616356fbff540b5fc515468993d41dfafd4f5",
          "md5": "11f852cf7ffbabd200f01fb57a51b89a",
          "sha256": "b7ff951197314a4f95fbb42f5061223a24251ba06604badfe305956b90b6a45c"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "11f852cf7ffbabd200f01fb57a51b89a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 804730,
        "upload_time": "2019-12-10T08:34:23",
        "upload_time_iso_8601": "2019-12-10T08:34:23.431699Z",
        "url": "https://files.pythonhosted.org/packages/2c/3f/ebb8130349d53bd2c9b993b616356fbff540b5fc515468993d41dfafd4f5/pycsp3-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4d1845afe3760fc108c641e6f5bd10ce4b4f77cee4a009d170ded6b6c173d4",
          "md5": "db33948e0384a973ce5a6a4b9be4d2ff",
          "sha256": "fd5b9495f01557d5dbfb970e608c92b3d9babb7ccf59b8fdf955697e8c68a523"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db33948e0384a973ce5a6a4b9be4d2ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 177779,
        "upload_time": "2020-01-18T11:16:54",
        "upload_time_iso_8601": "2020-01-18T11:16:54.734064Z",
        "url": "https://files.pythonhosted.org/packages/1b/4d/1845afe3760fc108c641e6f5bd10ce4b4f77cee4a009d170ded6b6c173d4/pycsp3-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f8bc670d5d63062d7ebd497e4a0e55ed29cc6d654f37bce006879fc58bb535",
          "md5": "2c29005825b3c78235dc2576a7072949",
          "sha256": "8f428aa2d659a1a28eb1856f99db322d8bc8435f14508168ebe2eb40b32e4847"
        },
        "downloads": -1,
        "filename": "pycsp3-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2c29005825b3c78235dc2576a7072949",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 123008,
        "upload_time": "2020-01-18T11:16:57",
        "upload_time_iso_8601": "2020-01-18T11:16:57.358634Z",
        "url": "https://files.pythonhosted.org/packages/b6/f8/bc670d5d63062d7ebd497e4a0e55ed29cc6d654f37bce006879fc58bb535/pycsp3-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b41c0c6fbd1ee985a5ad516f2f68abb60500b8f8ff7a1963805a5bd190cf95f",
          "md5": "bcc16ee629f512c7d3902be15fe1e612",
          "sha256": "9d4591cec5cd9e8b6a2c661490e97eb96f053ce1a600de76cb57f322acd06031"
        },
        "downloads": -1,
        "filename": "pycsp3-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcc16ee629f512c7d3902be15fe1e612",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 27147917,
        "upload_time": "2020-05-10T14:09:22",
        "upload_time_iso_8601": "2020-05-10T14:09:22.403675Z",
        "url": "https://files.pythonhosted.org/packages/7b/41/c0c6fbd1ee985a5ad516f2f68abb60500b8f8ff7a1963805a5bd190cf95f/pycsp3-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bddf91b9572fd436e353b684e666f5b1abc5e4f9ec8b3005839657bc8ce47316",
          "md5": "64667066e14c06d3aa63ab23d1947d92",
          "sha256": "7c37e99d911f1811a7c79dac41505f0cd943bb0957438bf7ec6bd529af11bcf0"
        },
        "downloads": -1,
        "filename": "pycsp3-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64667066e14c06d3aa63ab23d1947d92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 26995277,
        "upload_time": "2020-05-10T14:09:33",
        "upload_time_iso_8601": "2020-05-10T14:09:33.284489Z",
        "url": "https://files.pythonhosted.org/packages/bd/df/91b9572fd436e353b684e666f5b1abc5e4f9ec8b3005839657bc8ce47316/pycsp3-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b745fe7afe5fd9ecd2c8de201fb61743bf9781237a6b60e557cf5044cb7811",
          "md5": "655d7ca0bca44c9c03f56ce49fbe3d57",
          "sha256": "45e6bd63c2fc2f744aa9c033b621075591c188badb080129b3841f5a97b1b4cb"
        },
        "downloads": -1,
        "filename": "pycsp3-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "655d7ca0bca44c9c03f56ce49fbe3d57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 27147954,
        "upload_time": "2020-05-11T07:58:14",
        "upload_time_iso_8601": "2020-05-11T07:58:14.247830Z",
        "url": "https://files.pythonhosted.org/packages/05/b7/45fe7afe5fd9ecd2c8de201fb61743bf9781237a6b60e557cf5044cb7811/pycsp3-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc3d73787bb8634955fdd4068dd271e3dadb55ec53db8a53c0e70b1ff862e3b9",
          "md5": "ff42c6f2da1bfc790777c303a9cf80de",
          "sha256": "abcc11519fd89293eee8d7a026886f44ccee989f7d575d4f8cc666e1cda35b14"
        },
        "downloads": -1,
        "filename": "pycsp3-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ff42c6f2da1bfc790777c303a9cf80de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3,!=3.8.*,!=3.9.*",
        "size": 26995318,
        "upload_time": "2020-05-11T07:58:25",
        "upload_time_iso_8601": "2020-05-11T07:58:25.830538Z",
        "url": "https://files.pythonhosted.org/packages/dc/3d/73787bb8634955fdd4068dd271e3dadb55ec53db8a53c0e70b1ff862e3b9/pycsp3-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2dd9ea155644fcb445f02fbb475dadeac2e4038e60d6fc086e820b607ff9d08",
          "md5": "3ea84246db71dca93b5fe60734454b58",
          "sha256": "96c81b8b5be5b7d2406b7b325dbe20d8bde3e68a2f32c26504a3d12282fedcca"
        },
        "downloads": -1,
        "filename": "pycsp3-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ea84246db71dca93b5fe60734454b58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3,!=3.9.*",
        "size": 47894220,
        "upload_time": "2020-10-08T08:40:27",
        "upload_time_iso_8601": "2020-10-08T08:40:27.479567Z",
        "url": "https://files.pythonhosted.org/packages/e2/dd/9ea155644fcb445f02fbb475dadeac2e4038e60d6fc086e820b607ff9d08/pycsp3-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e7ee70c51dd3255a156bad4df4688a95d2ef911c2caefe3f7f5c11be0ebdaac",
          "md5": "ff62ff32af91bac2e5a827bc76ebe298",
          "sha256": "9ed020f46ec6b93faed9a757b26265658972f08745d5e586bb5680216e242776"
        },
        "downloads": -1,
        "filename": "pycsp3-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff62ff32af91bac2e5a827bc76ebe298",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3,!=3.9.*",
        "size": 48105312,
        "upload_time": "2020-10-08T08:41:09",
        "upload_time_iso_8601": "2020-10-08T08:41:09.228204Z",
        "url": "https://files.pythonhosted.org/packages/7e/7e/e70c51dd3255a156bad4df4688a95d2ef911c2caefe3f7f5c11be0ebdaac/pycsp3-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40e8ce2d8783d7b23fb203eb4f6a0caa028b694d040fd4c388e3768297a92a98",
          "md5": "45c363a2f331416ebe04c4ebedd5f848",
          "sha256": "f2c67d8fd5a6c1df8ff7e059427cb483cd673a78faf9f82a458e223a57915f59"
        },
        "downloads": -1,
        "filename": "pycsp3-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45c363a2f331416ebe04c4ebedd5f848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 21530365,
        "upload_time": "2021-03-27T13:18:31",
        "upload_time_iso_8601": "2021-03-27T13:18:31.202403Z",
        "url": "https://files.pythonhosted.org/packages/40/e8/ce2d8783d7b23fb203eb4f6a0caa028b694d040fd4c388e3768297a92a98/pycsp3-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d05e1ac20e49420c2c4c0b19ac3b64350d2f12889a84f22bd469a4421981734",
          "md5": "021d3d050cf686f61c66c02d2abee493",
          "sha256": "bb56f47034dcb1bd1bea9c104a38e4d53454a070637ee28583e5eedea2c6e0d9"
        },
        "downloads": -1,
        "filename": "pycsp3-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "021d3d050cf686f61c66c02d2abee493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 21721026,
        "upload_time": "2021-03-27T13:23:09",
        "upload_time_iso_8601": "2021-03-27T13:23:09.033474Z",
        "url": "https://files.pythonhosted.org/packages/7d/05/e1ac20e49420c2c4c0b19ac3b64350d2f12889a84f22bd469a4421981734/pycsp3-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9472bb4e4c7e7e0303d30d42d75a7a00a322997fad644ba5f29ffc12a4408eb",
          "md5": "48f53bb06f940983ef45ec83fd3a8ea4",
          "sha256": "e971c3fd96d06522dd7d34c1c9e2f4224a7d6934e59c4f2cca2f9041097948cd"
        },
        "downloads": -1,
        "filename": "pycsp3-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48f53bb06f940983ef45ec83fd3a8ea4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 21638701,
        "upload_time": "2021-06-21T11:51:47",
        "upload_time_iso_8601": "2021-06-21T11:51:47.828206Z",
        "url": "https://files.pythonhosted.org/packages/b9/47/2bb4e4c7e7e0303d30d42d75a7a00a322997fad644ba5f29ffc12a4408eb/pycsp3-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37897a4a628067ef6dcaeab309a5e09d14b481fbb5d5a54f97086c0f64010dfe",
          "md5": "21ec7a0d95eb18245857b13f2d9920e5",
          "sha256": "7ce5c4a8171e22a216a681f952ad5365285b69f229dbf032e7f7fc166e0f2706"
        },
        "downloads": -1,
        "filename": "pycsp3-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "21ec7a0d95eb18245857b13f2d9920e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 21824187,
        "upload_time": "2021-06-21T12:10:16",
        "upload_time_iso_8601": "2021-06-21T12:10:16.941304Z",
        "url": "https://files.pythonhosted.org/packages/37/89/7a4a628067ef6dcaeab309a5e09d14b481fbb5d5a54f97086c0f64010dfe/pycsp3-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac7dab1ac85b013a03ced14650ccb1fd5f408d5b4c3beb3a807de300de997e10",
          "md5": "aa9bc905e242d7438dc4736f940d0cf4",
          "sha256": "f406093bb7810cf0942e373269b0b996df7b6e1ec9bc93a9be6ba35bd5ada5ea"
        },
        "downloads": -1,
        "filename": "pycsp3-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa9bc905e242d7438dc4736f940d0cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 24878797,
        "upload_time": "2021-12-14T09:31:35",
        "upload_time_iso_8601": "2021-12-14T09:31:35.108026Z",
        "url": "https://files.pythonhosted.org/packages/ac/7d/ab1ac85b013a03ced14650ccb1fd5f408d5b4c3beb3a807de300de997e10/pycsp3-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b598bfcc23e9e514cb6d57d71f4bd3da9151d5e19676601fa0d9b2428fdc63df",
          "md5": "6f676118c0591305f222aad48985b1d3",
          "sha256": "90083ae91e66c75c0df942afe940070e26bd5c0cfe32b84b4e3e777a0cb653a0"
        },
        "downloads": -1,
        "filename": "pycsp3-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6f676118c0591305f222aad48985b1d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 25021549,
        "upload_time": "2021-12-14T09:32:01",
        "upload_time_iso_8601": "2021-12-14T09:32:01.303285Z",
        "url": "https://files.pythonhosted.org/packages/b5/98/bfcc23e9e514cb6d57d71f4bd3da9151d5e19676601fa0d9b2428fdc63df/pycsp3-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c6720405d735726888b166842d6a54b033990afcb9e35ab7ab1a38e08eec14",
          "md5": "83534a2dcfbc3cf764e8dc94ff984c52",
          "sha256": "17fc920be17476b3a9ec3149b851bec18d62a4817771ed05debfeecd63d6e981"
        },
        "downloads": -1,
        "filename": "pycsp3-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83534a2dcfbc3cf764e8dc94ff984c52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 55474710,
        "upload_time": "2021-12-14T13:54:44",
        "upload_time_iso_8601": "2021-12-14T13:54:44.405740Z",
        "url": "https://files.pythonhosted.org/packages/49/c6/720405d735726888b166842d6a54b033990afcb9e35ab7ab1a38e08eec14/pycsp3-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3e149cd928810d525cd3e738315c41d4e3fa55d47571f25a940ec1614fb09d4",
          "md5": "65fe9143a4bc0f37d22466827bfb6685",
          "sha256": "2b8eabb28588177b67e613e32233ba3dcbc47c60414d530277de63d2cf57bbb6"
        },
        "downloads": -1,
        "filename": "pycsp3-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65fe9143a4bc0f37d22466827bfb6685",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 54876014,
        "upload_time": "2021-12-14T13:54:53",
        "upload_time_iso_8601": "2021-12-14T13:54:53.160321Z",
        "url": "https://files.pythonhosted.org/packages/b3/e1/49cd928810d525cd3e738315c41d4e3fa55d47571f25a940ec1614fb09d4/pycsp3-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f00b75b34b4637da305a7e602c10bdf53683d6b04a05ff71be16cb96892662",
          "md5": "d39aa86e935eb06980a747ac2daef83f",
          "sha256": "6773ab2c80a0f0036986e7665d20675be5936aeb47d04ba3c3fbcb90b04c48a5"
        },
        "downloads": -1,
        "filename": "pycsp3-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d39aa86e935eb06980a747ac2daef83f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 86340452,
        "upload_time": "2022-01-25T08:21:01",
        "upload_time_iso_8601": "2022-01-25T08:21:01.608623Z",
        "url": "https://files.pythonhosted.org/packages/21/f0/0b75b34b4637da305a7e602c10bdf53683d6b04a05ff71be16cb96892662/pycsp3-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07675a9736720e2e9e124c5324d222e10004c34132e1307ec813e464310ef84",
          "md5": "7ef4423a9be331f39f0adad910b57ec9",
          "sha256": "9841a00bf268a198c956bf30f023ab718c32c4be4931be86a9dd9e063f2ca75a"
        },
        "downloads": -1,
        "filename": "pycsp3-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ef4423a9be331f39f0adad910b57ec9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 35200069,
        "upload_time": "2022-01-25T08:21:17",
        "upload_time_iso_8601": "2022-01-25T08:21:17.444278Z",
        "url": "https://files.pythonhosted.org/packages/f0/76/75a9736720e2e9e124c5324d222e10004c34132e1307ec813e464310ef84/pycsp3-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5180b53d9023dbc7ea952b13e794c617cd8dd39c19f7c60580ac2aeef1b0cc74",
          "md5": "d6de945e5b3d95724e9c1e584b73c985",
          "sha256": "b52659fbced4c9f5b8fa31a72365feb881d528af181bf015968aaa6f3279b18c"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6de945e5b3d95724e9c1e584b73c985",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 37940529,
        "upload_time": "2022-09-08T09:29:20",
        "upload_time_iso_8601": "2022-09-08T09:29:20.063455Z",
        "url": "https://files.pythonhosted.org/packages/51/80/b53d9023dbc7ea952b13e794c617cd8dd39c19f7c60580ac2aeef1b0cc74/pycsp3-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b523b041c2149701024221b895d326adc5d96d1a4e65b3bf4bf54238b496e9b2",
          "md5": "f542c2b8ec09ed0da379f6a1683158b2",
          "sha256": "f312d210b3fb3bac46f10f12f32dab23f513d7a81c3e8035c3a1e2e8805ee5c3"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f542c2b8ec09ed0da379f6a1683158b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 37758207,
        "upload_time": "2022-09-08T09:29:37",
        "upload_time_iso_8601": "2022-09-08T09:29:37.320836Z",
        "url": "https://files.pythonhosted.org/packages/b5/23/b041c2149701024221b895d326adc5d96d1a4e65b3bf4bf54238b496e9b2/pycsp3-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "042d1529b77b3e8ddfd5053816f800e91186d2292939383dafec151e742469da",
          "md5": "405fd5fec0441a70e843a58402596524",
          "sha256": "62e50534670d9bd16f6830e76b0507f4eb56921eb176ed9bd01ec052723814fc"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "405fd5fec0441a70e843a58402596524",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 43779172,
        "upload_time": "2022-11-07T15:22:10",
        "upload_time_iso_8601": "2022-11-07T15:22:10.439902Z",
        "url": "https://files.pythonhosted.org/packages/04/2d/1529b77b3e8ddfd5053816f800e91186d2292939383dafec151e742469da/pycsp3-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b48234e3ac40f1e851e402d2173a44f8b8ae77cc31cc9ae11782f2b04763e3c",
          "md5": "094a8cf68cbd81f4dea90fd06924360a",
          "sha256": "3e66c8e38ba3eada5ba3e93083ee6f5587e362f9a7a31045b0a2838df2486952"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "094a8cf68cbd81f4dea90fd06924360a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 37768931,
        "upload_time": "2022-11-07T15:24:19",
        "upload_time_iso_8601": "2022-11-07T15:24:19.274371Z",
        "url": "https://files.pythonhosted.org/packages/3b/48/234e3ac40f1e851e402d2173a44f8b8ae77cc31cc9ae11782f2b04763e3c/pycsp3-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf9cbe1a77d2b6bcdf30861d0c00acaa842a579a2982699b5e595eab2a5b5abc",
          "md5": "8a3a7e3a4a93d5b6b945c8d24cedcf28",
          "sha256": "fc403deddd1915e4df71d9bafa0b089151267004c701ebd6b158fb0513244d82"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a3a7e3a4a93d5b6b945c8d24cedcf28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 41451962,
        "upload_time": "2023-01-23T10:23:40",
        "upload_time_iso_8601": "2023-01-23T10:23:40.940580Z",
        "url": "https://files.pythonhosted.org/packages/cf/9c/be1a77d2b6bcdf30861d0c00acaa842a579a2982699b5e595eab2a5b5abc/pycsp3-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ced068fe318fda056a3cf38a4b2bd78fa44c0b457aa38c7c8f7a79053cf76c7b",
          "md5": "8f9596307e531c3cc8acf13ef072e008",
          "sha256": "f9d34689ddb5716e4426866ae91719748838bff34095409350dd729569e8f614"
        },
        "downloads": -1,
        "filename": "pycsp3-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f9596307e531c3cc8acf13ef072e008",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 35416019,
        "upload_time": "2023-01-23T10:25:27",
        "upload_time_iso_8601": "2023-01-23T10:25:27.051156Z",
        "url": "https://files.pythonhosted.org/packages/ce/d0/68fe318fda056a3cf38a4b2bd78fa44c0b457aa38c7c8f7a79053cf76c7b/pycsp3-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf9cbe1a77d2b6bcdf30861d0c00acaa842a579a2982699b5e595eab2a5b5abc",
        "md5": "8a3a7e3a4a93d5b6b945c8d24cedcf28",
        "sha256": "fc403deddd1915e4df71d9bafa0b089151267004c701ebd6b158fb0513244d82"
      },
      "downloads": -1,
      "filename": "pycsp3-2.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a3a7e3a4a93d5b6b945c8d24cedcf28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 41451962,
      "upload_time": "2023-01-23T10:23:40",
      "upload_time_iso_8601": "2023-01-23T10:23:40.940580Z",
      "url": "https://files.pythonhosted.org/packages/cf/9c/be1a77d2b6bcdf30861d0c00acaa842a579a2982699b5e595eab2a5b5abc/pycsp3-2.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ced068fe318fda056a3cf38a4b2bd78fa44c0b457aa38c7c8f7a79053cf76c7b",
        "md5": "8f9596307e531c3cc8acf13ef072e008",
        "sha256": "f9d34689ddb5716e4426866ae91719748838bff34095409350dd729569e8f614"
      },
      "downloads": -1,
      "filename": "pycsp3-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8f9596307e531c3cc8acf13ef072e008",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 35416019,
      "upload_time": "2023-01-23T10:25:27",
      "upload_time_iso_8601": "2023-01-23T10:25:27.051156Z",
      "url": "https://files.pythonhosted.org/packages/ce/d0/68fe318fda056a3cf38a4b2bd78fa44c0b457aa38c7c8f7a79053cf76c7b/pycsp3-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}