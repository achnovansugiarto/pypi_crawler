{
  "info": {
    "author": "Niraj S. Kale",
    "author_email": "nirajkale157@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pynetwork\n  ##  High performance socket swarms for network workloads\n\n  ### Important Updates:\n\n  Due to some name conflict in pypi, i had to change the name of the library from \"pynet\" to \"pynetwork\"\n\n  ### Abstract\n\n  pynet package is designed to help write scripts/projects that rely on interprocess communication over a network with minimal-to-no       knowledge of sockets. Furthermore these data transfer/steaming can be done in a swarm fashion, meaning multiple or swarm of persitant   tcp connections that serve a single objective to deliver high performance.\n  Following objectives can be achieved using this package:\n\n  1. Write subroutines/functions that can stream data over to your client using callbacks (No need of polling)\n  2. Write subroutines/functions that can send batches of data over to your client\n  3. Send data to your subroutines/function over network\n  4. Send files to & from server using swarm of connections for higher transfer rates\n\n  ### Installation\n\n  I've added this package to pypi package index,so now you can install it using pip: <br/>\n\n  pip install pynetwork\n\n  ### Prelude\n\n  As a fun project, i wanted a raspberry pi based RC car that can be controlled over wi-fi. On the receiver end, a combination of\n  different deep neural network architectures that can consume the data from raspberry pi like camera feed ( to a CNN model), feed from\n  various sensors e.g proximity, speed encoder etc ( to a RNN) & then can subsequently control it. But one of the keys problems that i\n  faced while implementing it, was how to transfer all of this data back & forth between my laptop & pi in real time with low\n  latency. This gave me an idea write a simple JSON based networking code that could transfer custom python objects back & forth, but\n  that was not enough because i was dealing multiple data feeds & managing these multiple tcp connections was getting difficult. After\n  some useless searches on github, i decided to buckle up and write down a networking library from scratch that could manage swarm of\n  connections & also could help stream the data from python subroutines (These subroutines were pythonian generators that could\n  endlessly read & stream the individual sensor data). Apart from subroutines based streaming, I also wanted to add batch fashioned\n  suboutine data transfer (As you may have realized lot of these ideas sound similar to Keras generators that are used for feeding data\n  to a machine learning model ). After a month of after-office coding & testing, I am finally releasing v2 of pynetwork. This version should\n  not only be suitable for IOT but can be used for any network workload.\n\n  ### Before jumping on to some use cases, below is some nomenclatures & components that you should be aware before using it:\n\n  #### Gateway <--> Controller\n\n  There are 4 main components involved namely: Gateway, Controller, Handler & a Client. Gateway acts as a small server which listens\n  to requests made by Controller on a specified port. Gateway & Controller share a Many-to-Many relationship (One Gateway can respond\n  to multiple Controllers & one Controller can connect to multiple Gateways). Gateway-controller themselves do not perform any workload\n  operation (like data/file transfer) but instead they are responsible spawning & managing a swarm\\s of tcp connections to handle \n  your workloads. Whenever a controller requests to a Gateway, Gateway spawns a Handler & sends an acknowledge to the Controller\n  then in response, Controller creates a Client for that Handler. So 1 request results in spawning of a pair of \"Handler <-> Client\". \n  A handler & a client work in tandem to handle your custom workload. To improve speed of your operation, you can spawn multiple pairs\n  of Handler & client. Each handler spwned at the Gateway runs on a independent thread (this is where the performance boost comes  \n  from) & these handler threads are then managed by the Gateway. The number of possible Handlers<->Clients that can be spawned depends\n  the size of Handler pool (Basically a custom thread pool). By default the pool size is 5 but you can increase it to any number\n  depending on your hardware.\n\n  **The swarm architecture looks something like this** \n\n\n  <img src=\"https://user-images.githubusercontent.com/40765055/58163266-53432900-7ca1-11e9-8c94-928eb364faf7.jpg\" /></p>\n\n  **Using Gateway on Host device**\n   ```python    \n    gw = pynet.Gateway(port = 1857) # Define port on which gateway will listen to controller requests.\n    #Then register your subroutines (Either generators/ non-generators)\n    gw.add_subroutine('mount_usage', get_usage_percentage) \n    gw.add_subroutine('remove_logs', remove_logs)\n    #Its not necessary to add your subroutines before the gateway starts listening..\n    gw.start(blocking = True) #start listening to controller\n    #When blocking is True, then gateway will block the main thread (Similar to App.mainloop() in wxpython), untill it is closed \n    #by controller, If you are sure that this main thread wont run to an end, then you can set it too false or add your custom\n    #logic to keep this main thread alive.\n  ``` \n\n  **Using Gateway on Client device**\n   ```python    \n    controller = pynet.Controller(gateway_ip = 'GATEWAY_IP', port = 1857, download_dir = 'mydir', verbose = True) \n    #create a controller\n    client1 = controller.get_client()\n    #When you call get_client, the controller requests for a dedicated handler with the Gateway, if the gateway 'Handler pool'\n    #is not full then you'll get a client instance else controller will raise an error for overflowing the pool.\n    #Once connected, do your stuff..\n    client1.ping('Hello there..')\n    #Once you are done, you can either close the dedicated handler for your client of the gateway itself.\n    client1.close_handler() #/ or client1.close_gateway() at which the gw.start(blocking = True) will stop blocking\n  ``` \n  #### Handler <--> Client\n\n  An individual pair of handler-client offer various options of data transfers:\n\n  1. **Receive data stream from a handler subroutine**\n\n        You can write python generator function that endlessly yield data (byte array) and register/add them to Gateway. Once added to\n        Gateway, these subroutines are passed to any newly spawned handler. A client can then ask handler to stream data from this\n        generator subroutine until it raises a StopIteration exception or returns None.\n        Examples of such streaming could be:\n        a. Streaming multiple sensor data\n        b. Streaming key-presses to a key-logger over the network\n        The data which is streamed from a generator is of byte array type data, along with this byte array data, function also needs to\n        return an \"id\" (or idetity). This id can be perticualy useful when your using a swarm of connections to stream the data, because \n        if the same function is being used my multiple handlers then there is no gaurantee of the same order in which the data was \n        returned by the function would be preserved on the received end. In this case, you can use this id to re-arrange your data if \n        needed.\n\n        **Steps to follow to use this functionality:**\n\n  a. write a python 'generator' function that yeilds byte array data\n     The return signature expected from this function is a 'python set' with 2 elements '(ident, buffer)'\n     where ident is an integer which represents an index for this chunk from your steam & buffer is an byte array (which is data\n     to be streamed).\n\n  ```python\n  import pynetwork.backend2 as bk\n\n  def your_function_name(arg1, arg2,.., **kwargs): #parameters are optional\n    index =1\n    while condition:\n      pass\n      obj = your_logic_to_generate_data() #lets your data is a custom python obj\n      #if its an object, then you can use your own custom json encode/decoder\n      obj_str = your_json_encoder( obj)\n      yield (index, bk.str_to_bytes(obj_to_str))\n  ```\n\n  b. you can use any of the byte conversion methods from backend2 module of the package. You can convert int, str, or JSON str,\n     or objects (with default valued constructor) to byte array\n\n  c. The streaming will terminate when the generator raises an 'StopIteration' error or ident<0 or buffer is 'None'\n  d. you can also terminate streaming from client side by returning 'False' in your streaming callback (User requested stream\n     abort)\n\n  e. If streaming ends (without User requested stream abort) then client calls 'eos_callback'\n\n  f. You can also pass positional arguments & kwargs to this generator when you start the stream. \n     (Package serializes your args & kwargs and then these params get deserialized at gateway where the function is executed \n     with same params)\n\n\n  2. **Receive data batch from a handler subroutine**\n\n        If you need the data on transactional basis without the need of steams, you can opt for batch subroutines. These are simple \n        python function (which doesn't need to be written as a generator) that return byte data (with unique id for that batch), then \n        handler would steam this data across to client.\n\n  3. **Send batch of data to handler subroutine**\n\n        You can also send data to a subroutine whcih is registered with Gateway. This data is available as parameter called \n        **buffer** in your function's **kwargs** input. This is additional byte array input, apart from the usual arguments & kwargs \n        that you can pass to your subroutine. After the execution of subroutine, handler expects an integer return that is transferred\n        back to the client as an output.\n\n        **Steps to follow to use this functionality:**\n\n  a. Write a function (with whatever positional/ kwargs you want) & regirster it with gateway\n     package expects that this function would return an int which is then beamed back to client, however this int return is \n     optiional. In case if you dont return anything, on the client side your script will receive 0.\n\n  ```python\n  def your_function_name(arg1, arg2,.., **kwargs):\n    result = 2\n    pass\n    return result #return your integer result if required\n  ```\n\n  c. You can also pass positional arguments & kwargs to this generator when you start the stream. \n     (Package serializes your args & kwargs and then these params get deserialized at gateway where the function is executed \n     with same params)\n\n\n  4. **Download files from Gateway to client device (from folder name & regex or fullpath to files)**\n\n        No need of description here apart from the fact that, you can speed up file transfer by distributing the load across multiple \n        connections. One important thing to note here is that, the speed improvement would be negligible if the files are less numerous \n        & are large in size in which case your bandwidth would be the limiting factor. but in case of numerous & small sized files, you\n        might see a conisderable improvement.(So swarm could be perticaularly useful if you are transferring log files from you\n        application where file count is usually high & size of each log is limted to few hundered MBs)\n        *I would soon upload few stats to support above argument*\n\n  5. **Send files to Gateway (files are downloaded to relative said folder)**\n\n       Same as above, except the direction is opposite.\n\n  6. **Ping Handler to check the connection**\n\n      Could be useful to test the connection.\n\n  Below are some of the use case tutorials using pynet with increasing complexity: \n\n\n  ## Tutorial 1: Conditional File Backup that uses batch data transfer\n\n  Consider a scenario where you have a limited storage on a VM node or a server and would like to to move older files from this device\n  to your local machine when the storage usage crosses 20% (starting from the older files). This objective can be achieve as below:\n\n  #### On Gateway side\n  ```python\nimport pynetwork as pynet\nimport pynetwork.backend2 as bk\nimport struct\nimport shutil\nimport os\n\ndef get_usage_percentage(request_id:int, **kwargs):\n    '''\n    Logic to calculate mount/overall hdd usage\n    '''\n    total, used, free = shutil.disk_usage(\"\\\\\")\n    usage_per = used/ total\n    bk.safe_print('usage', usage_per) # safe_print make sure that output from multiple client/handler threads to console do not mix-up\n    b = struct.pack('f', usage_per)    #convert the data bytes that needs to be sent back\n    return b\n\ndef remove_logs(dirpath:str, **kwargs):\n    files = [os.path.join(dirpath,f) for f in os.listdir(dirpath)]\n    for f in files: #iterate over files delete each one\n        os.remove(f)\n    bk.safe_print(len(files),' files deleted')\n    return bk.int_to_bytes(len(files)) \n\nif __name__ == '__main__':\n\n    gw = pynet.Gateway(1857) #start gateway at port 1857\n    gw.add_subroutine('mount_usage', get_usage_percentage)\n    gw.add_subroutine('remove_logs', remove_logs)\n    #add above two subroutines with a key, that client can pass to request execution\n    gw.start(blocking = True) #start listening to controller\n```\n\n  #### On Controller side\n\n  ```python\nimport pynetwork as pynet\nimport pynetwork.backend2 as bk\nimport struct\n\nif __name__ == '__main__':\n\n    controller = pynet.Controller(gateway_ip = '', port = 1857, download_dir = 'mydir', verbose = True) \n    client1 = controller.get_client()\n    client1.ping('Hello there..')\n    b = client1.get_subroutine_batch(name ='mount_usage',arguments=[123,])\n    usage = struct.unpack('f', b)[0]\n    bk.safe_print('mount usage:', usage)\n    if usage > 0.2:\n        bk.safe_print('downloading files..')\n        client1.get_files_from_gateway(folder = 'D:\\logs', regex = '.+RFIN703235761L') #using regex, u can filter files within a folder\n        #in this case, we are only downloading log file belonging to tensorflow as a test\n        count_bytes = client1.get_subroutine_batch(name ='remove_logs',arguments=['D:\\logs',])\n        bk.safe_print(bk.bytes_to_int(count_bytes),' files deleted') \n    else:\n        pass\n    client1.close_handler() #close handler so the handler pool at gateway will remain empty for others\n    #additionally you can also stop Gatway by: client1.close_gateway()\n\n```\n  Additionaly, you can also add logic in 'remove_logs' function to remove files before a specific date & so on. Since you can integrate   any custom logic in your python subroutine, the possibilities are endless.\n\n  #### Few things to be considered while writing a subroutine for receiving batch data (Handler -> Client):\n\n  a. Function can have *arguments* & *kwargs* as an input, here arguments represent positional arguments (Against the usual python            convetion)\n     *sorry for this mess, i will change the name in next release*\n  b. The function need to return the data in byte format. So function can either one of the methoeds available in backed to convert int,\n      str to byes (I would add support float soon, but meanwhile you can use struct package). Furthermore, if you want to return a \n      custom class then you use your own custom encode to serialize object to JSON string & then using backed to convert this string to\n      bytes, then on the controller side do the opposite.\n      **If you want to use the object serialization which available in backend then you can add your class to the \"Handshakes file\" to \n      use in-built serializtion, but it is important that you have primitive data-types in your class & have default values assigned to \n      all the input parameters in __init__ method of your class.**\n     *I will make some change in serialization to give more freedom for class defination in next release*\n\n  #### Few things to be considered while writing a subroutine for transmitting batch data (Client -> Handler):\n\n  a. Function can have *arguments* & *kwargs* as an input, here arguments represent positional arguments (Against the usual python \n     convetion)\n  b. The function need to return the integer result in byte format which will be beamed back to client as a result\n\n## Tutorial 2: Raspberry-Pi control over wifi (uses both streaming & batch data transfer)\n\n  *Work in progress.. Will post in 1-2 days!*\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nirajkale/pynetwork",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynetwork",
    "package_url": "https://pypi.org/project/pynetwork/",
    "platform": "",
    "project_url": "https://pypi.org/project/pynetwork/",
    "project_urls": {
      "Homepage": "https://github.com/nirajkale/pynetwork"
    },
    "release_url": "https://pypi.org/project/pynetwork/2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "package to manage connection swarms for your network workloads",
    "version": "2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5494366,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09da97178930a48001159dec67cf5ab70fd8e9509314efa8467c5aada1bcd540",
          "md5": "2aedc6b812f9303f21f7ccdbda778919",
          "sha256": "9b5657e6ddc860a6f9bea6fb769914b6c3306abe0f8f07000732abbb7bf03993"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2aedc6b812f9303f21f7ccdbda778919",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22253,
        "upload_time": "2019-05-23T08:36:28",
        "upload_time_iso_8601": "2019-05-23T08:36:28.206180Z",
        "url": "https://files.pythonhosted.org/packages/09/da/97178930a48001159dec67cf5ab70fd8e9509314efa8467c5aada1bcd540/pynetwork-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "657e9c0446ce1c909cf152d0b17c1d34e26c29dc4100eda492cd32c7c5d96f6e",
          "md5": "14d30fd289a2e3cfb3169dec3285be2f",
          "sha256": "4eb604b31bd51116c8043468f5db299a502b5439f58880f24ee366bc3df55f22"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14d30fd289a2e3cfb3169dec3285be2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15182,
        "upload_time": "2019-05-23T08:36:31",
        "upload_time_iso_8601": "2019-05-23T08:36:31.455302Z",
        "url": "https://files.pythonhosted.org/packages/65/7e/9c0446ce1c909cf152d0b17c1d34e26c29dc4100eda492cd32c7c5d96f6e/pynetwork-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a339492759469ae2e2521519a6d51c900a9eaa3d03b74865281fa6c6d93b5e64",
          "md5": "6e9b3e278eb98384d1900c09f8a40616",
          "sha256": "379befd2c6f7b1140f4c9e00d367d1cdef14766f6a824b28650fc307ca784d5b"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e9b3e278eb98384d1900c09f8a40616",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22266,
        "upload_time": "2019-05-23T12:12:18",
        "upload_time_iso_8601": "2019-05-23T12:12:18.265809Z",
        "url": "https://files.pythonhosted.org/packages/a3/39/492759469ae2e2521519a6d51c900a9eaa3d03b74865281fa6c6d93b5e64/pynetwork-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed935e26a2814aa1a5924d18d699482187f803afb08d49e7cbaed8d781783359",
          "md5": "9a0bbc0e3d25c54a504bdb44f23720a8",
          "sha256": "e387ea4cb5dff21a7794ab5e44d1e7eead965f127c14ba5df7e6759fa8a6f514"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a0bbc0e3d25c54a504bdb44f23720a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15218,
        "upload_time": "2019-05-23T12:12:20",
        "upload_time_iso_8601": "2019-05-23T12:12:20.228921Z",
        "url": "https://files.pythonhosted.org/packages/ed/93/5e26a2814aa1a5924d18d699482187f803afb08d49e7cbaed8d781783359/pynetwork-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "864db5e1fc4817ea1816fb119b42b0f84841dcc5843c29a5b7fcda9942b5b42f",
          "md5": "e51d0c4dfd872864e6f0972814b4f91d",
          "sha256": "bf8bd0285dc49f183036ca0b699d6140d78c911e22f583b842192e77161774a4"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e51d0c4dfd872864e6f0972814b4f91d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23113,
        "upload_time": "2019-05-23T16:44:13",
        "upload_time_iso_8601": "2019-05-23T16:44:13.018647Z",
        "url": "https://files.pythonhosted.org/packages/86/4d/b5e1fc4817ea1816fb119b42b0f84841dcc5843c29a5b7fcda9942b5b42f/pynetwork-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82bacbc21e91d3da8ecdefb04ebf3320e8a34042b017a0a6e91178d451a122a7",
          "md5": "e4cdd9411568072caa45ab32d2e7f07c",
          "sha256": "a6d0aa8929aebb60a424448dbc71cfcf5480eeb55774aab73fb04252673c8875"
        },
        "downloads": -1,
        "filename": "pynetwork-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e4cdd9411568072caa45ab32d2e7f07c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17218,
        "upload_time": "2019-05-23T16:44:15",
        "upload_time_iso_8601": "2019-05-23T16:44:15.247331Z",
        "url": "https://files.pythonhosted.org/packages/82/ba/cbc21e91d3da8ecdefb04ebf3320e8a34042b017a0a6e91178d451a122a7/pynetwork-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29c2591cfc0930a14ba8f49f209e8626e288b5fc5765993142e1e884c9fbf6f2",
          "md5": "74c3104642446dbb191cc24671961f3c",
          "sha256": "3e3592def3fe6ebf2f98b7bd8e78ccbbf129bb4f651403149bfcd73e40cc97a0"
        },
        "downloads": -1,
        "filename": "pynetwork-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74c3104642446dbb191cc24671961f3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23112,
        "upload_time": "2019-05-23T17:38:35",
        "upload_time_iso_8601": "2019-05-23T17:38:35.736770Z",
        "url": "https://files.pythonhosted.org/packages/29/c2/591cfc0930a14ba8f49f209e8626e288b5fc5765993142e1e884c9fbf6f2/pynetwork-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5ec1a2e8e8e3a7584557e0f356c391a2a86b408e7f0aab9ef8713ca50a0c47b",
          "md5": "dafacdcaa8053e96be115a8f7d76b870",
          "sha256": "2bbc891ad75610e08d669d92cc7cfa7faf330f5ade4da6e43a18b1d857e277f1"
        },
        "downloads": -1,
        "filename": "pynetwork-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dafacdcaa8053e96be115a8f7d76b870",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17247,
        "upload_time": "2019-05-23T17:38:37",
        "upload_time_iso_8601": "2019-05-23T17:38:37.695400Z",
        "url": "https://files.pythonhosted.org/packages/c5/ec/1a2e8e8e3a7584557e0f356c391a2a86b408e7f0aab9ef8713ca50a0c47b/pynetwork-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58d03eba02a934493682695e9e40bde5cd6bcf9162e8f34818ca4582f90007fa",
          "md5": "d03d2b10368f4355199e15813ffadf1c",
          "sha256": "c5e16a6da95483f2feedcbaf1e3d23b04ca2959950df9fa405c5dc43dc93cb1c"
        },
        "downloads": -1,
        "filename": "pynetwork-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d03d2b10368f4355199e15813ffadf1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23129,
        "upload_time": "2019-05-23T18:23:50",
        "upload_time_iso_8601": "2019-05-23T18:23:50.342889Z",
        "url": "https://files.pythonhosted.org/packages/58/d0/3eba02a934493682695e9e40bde5cd6bcf9162e8f34818ca4582f90007fa/pynetwork-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da732955f98f52d3d44c8ff05b9781b16f55227d856629143db3ace91e7dde3e",
          "md5": "b5f11d6e8d325230707c20afd69fcac7",
          "sha256": "e7c4dce245dc5af1a9dc015a643dadcf21ee48bdbc4acfa470e463d12f44af1d"
        },
        "downloads": -1,
        "filename": "pynetwork-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5f11d6e8d325230707c20afd69fcac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17240,
        "upload_time": "2019-05-23T18:23:52",
        "upload_time_iso_8601": "2019-05-23T18:23:52.528457Z",
        "url": "https://files.pythonhosted.org/packages/da/73/2955f98f52d3d44c8ff05b9781b16f55227d856629143db3ace91e7dde3e/pynetwork-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceffadf02d316c2af89b4e1d39c3b934c080ae0a56031509aab701ac6f6a8627",
          "md5": "2852b3683d3e94e76f8a2db716cb8b30",
          "sha256": "6cc516400b6a24d2dce0912f7b6e3a08bcb330847cc9b7abd0f74ad0a0a12bf8"
        },
        "downloads": -1,
        "filename": "pynetwork-2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2852b3683d3e94e76f8a2db716cb8b30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23972,
        "upload_time": "2019-05-29T18:41:18",
        "upload_time_iso_8601": "2019-05-29T18:41:18.769360Z",
        "url": "https://files.pythonhosted.org/packages/ce/ff/adf02d316c2af89b4e1d39c3b934c080ae0a56031509aab701ac6f6a8627/pynetwork-2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b2a1f5fa8af3636cc4733052a65958024b6bd11a8aab333916463213eb6e303",
          "md5": "7d9c85603523be7bdd3a839759d47873",
          "sha256": "e8047aa5159a9e365ed039d37d84edec7cb60dbee59e0b4d260918c6f8ea6eaf"
        },
        "downloads": -1,
        "filename": "pynetwork-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d9c85603523be7bdd3a839759d47873",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18308,
        "upload_time": "2019-05-29T18:41:20",
        "upload_time_iso_8601": "2019-05-29T18:41:20.776677Z",
        "url": "https://files.pythonhosted.org/packages/4b/2a/1f5fa8af3636cc4733052a65958024b6bd11a8aab333916463213eb6e303/pynetwork-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06708f8d5d89ce7ab63ef92ea454e18814f948a3fe8e84f39aa2ffb11de6e81",
          "md5": "9a12a3a8aa51aae2d0eda46f438bad30",
          "sha256": "5a7938684ce272ff508ec20d944fc23986bdf425e57c36e8027489e688bd358f"
        },
        "downloads": -1,
        "filename": "pynetwork-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a12a3a8aa51aae2d0eda46f438bad30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23991,
        "upload_time": "2019-05-29T18:51:34",
        "upload_time_iso_8601": "2019-05-29T18:51:34.597660Z",
        "url": "https://files.pythonhosted.org/packages/b0/67/08f8d5d89ce7ab63ef92ea454e18814f948a3fe8e84f39aa2ffb11de6e81/pynetwork-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ce33d1dacff685d4f5b88568d6f23e9c092c7c79013cbbd075d9391f5db88c9",
          "md5": "1b9f509eb9dd1d6df861ee448e6c4436",
          "sha256": "0b3d54ba22ab4811b1b9ff42617109ba4e2784aa9eb5bba0db406dd89a937b8f"
        },
        "downloads": -1,
        "filename": "pynetwork-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b9f509eb9dd1d6df861ee448e6c4436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18314,
        "upload_time": "2019-05-29T18:51:36",
        "upload_time_iso_8601": "2019-05-29T18:51:36.765139Z",
        "url": "https://files.pythonhosted.org/packages/5c/e3/3d1dacff685d4f5b88568d6f23e9c092c7c79013cbbd075d9391f5db88c9/pynetwork-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf494546f1d33c7f8fe1be6a81dd0bd8658f5139e4daca284f5a20364f679be",
          "md5": "ee8d6edf67ac105f2ee8d1e909051345",
          "sha256": "ca8d1edc604c951a6e9650daf69195b620dacc55ead4071ded5fbaad1e550414"
        },
        "downloads": -1,
        "filename": "pynetwork-2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee8d6edf67ac105f2ee8d1e909051345",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23969,
        "upload_time": "2019-05-29T19:03:14",
        "upload_time_iso_8601": "2019-05-29T19:03:14.510873Z",
        "url": "https://files.pythonhosted.org/packages/6c/f4/94546f1d33c7f8fe1be6a81dd0bd8658f5139e4daca284f5a20364f679be/pynetwork-2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd938598406c3732b2ca308573182afbac00304776f40bf95a85206db67c7d40",
          "md5": "12c0cbcc242dd2476ba282675451e1cf",
          "sha256": "b1632833439080f2757736e0795e3d4e6027a6da558f4524bb9363a1130f1be9"
        },
        "downloads": -1,
        "filename": "pynetwork-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "12c0cbcc242dd2476ba282675451e1cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18314,
        "upload_time": "2019-05-29T19:03:16",
        "upload_time_iso_8601": "2019-05-29T19:03:16.589856Z",
        "url": "https://files.pythonhosted.org/packages/dd/93/8598406c3732b2ca308573182afbac00304776f40bf95a85206db67c7d40/pynetwork-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5585b9e56734e411220b431d0dbd137fdc9cf1478f4d6d991b32e1cd9b9d6e99",
          "md5": "5f041c0646dad4b27395d02503b6cd13",
          "sha256": "41a9fa75a8af0742c962066ad7c1c60a9c1272ad6fee45b1641271dbd81876ff"
        },
        "downloads": -1,
        "filename": "pynetwork-2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f041c0646dad4b27395d02503b6cd13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23972,
        "upload_time": "2019-07-06T08:55:44",
        "upload_time_iso_8601": "2019-07-06T08:55:44.097195Z",
        "url": "https://files.pythonhosted.org/packages/55/85/b9e56734e411220b431d0dbd137fdc9cf1478f4d6d991b32e1cd9b9d6e99/pynetwork-2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abc7c72c770ef03162e3d1fe3e65d5b0419eb98b8efe2042e0c5c349a09a1527",
          "md5": "69c910ef683d1818853c758aa9cf8b58",
          "sha256": "ac99f4031256cef8d65635db5ec8bdbb61ce7b7f12ceaf4232d46e577d21b1ce"
        },
        "downloads": -1,
        "filename": "pynetwork-2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "69c910ef683d1818853c758aa9cf8b58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18329,
        "upload_time": "2019-07-06T08:55:46",
        "upload_time_iso_8601": "2019-07-06T08:55:46.805418Z",
        "url": "https://files.pythonhosted.org/packages/ab/c7/c72c770ef03162e3d1fe3e65d5b0419eb98b8efe2042e0c5c349a09a1527/pynetwork-2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5585b9e56734e411220b431d0dbd137fdc9cf1478f4d6d991b32e1cd9b9d6e99",
        "md5": "5f041c0646dad4b27395d02503b6cd13",
        "sha256": "41a9fa75a8af0742c962066ad7c1c60a9c1272ad6fee45b1641271dbd81876ff"
      },
      "downloads": -1,
      "filename": "pynetwork-2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f041c0646dad4b27395d02503b6cd13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23972,
      "upload_time": "2019-07-06T08:55:44",
      "upload_time_iso_8601": "2019-07-06T08:55:44.097195Z",
      "url": "https://files.pythonhosted.org/packages/55/85/b9e56734e411220b431d0dbd137fdc9cf1478f4d6d991b32e1cd9b9d6e99/pynetwork-2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abc7c72c770ef03162e3d1fe3e65d5b0419eb98b8efe2042e0c5c349a09a1527",
        "md5": "69c910ef683d1818853c758aa9cf8b58",
        "sha256": "ac99f4031256cef8d65635db5ec8bdbb61ce7b7f12ceaf4232d46e577d21b1ce"
      },
      "downloads": -1,
      "filename": "pynetwork-2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "69c910ef683d1818853c758aa9cf8b58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18329,
      "upload_time": "2019-07-06T08:55:46",
      "upload_time_iso_8601": "2019-07-06T08:55:46.805418Z",
      "url": "https://files.pythonhosted.org/packages/ab/c7/c72c770ef03162e3d1fe3e65d5b0419eb98b8efe2042e0c5c349a09a1527/pynetwork-2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}