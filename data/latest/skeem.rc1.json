{
  "info": {
    "author": "",
    "author_email": "Andreas Motl <andreas.motl@panodata.org>, Benjamin Gutzmann <gutzemann@gmail.com>, Richard Pobering <richard.pobering@panodata.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Customer Service",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Legal Industry",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Database",
      "Topic :: Documentation",
      "Topic :: Education",
      "Topic :: Office/Business",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Version Control",
      "Topic :: System :: Archiving",
      "Topic :: System :: Systems Administration",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "#####\nSkeem\n#####\n\n\n*****\nAbout\n*****\n\nYou can use Skeem to infer SQL DDL statements from tabular data.\n\nSkeem is, amongst others, based on the excellent `ddlgenerator`_, `frictionless`_,\n`fsspec`_, `pandas`_, `SQLAlchemy`_, and `xarray`_ packages, and can be used both\nas a standalone program, and as a library.\n\nSupported input data:\n\n- `Apache Parquet`_\n- `CSV`_\n- `Google Sheets`_\n- `GRIB`_\n- `InfluxDB line protocol`_\n- `JSON`_\n- `NetCDF`_\n- `NDJSON`_ (formerly LDJSON) aka. `JSON Lines`_, see also `JSON streaming`_\n- `Office Open XML Workbook`_ (`Microsoft Excel`_)\n- `OpenDocument Spreadsheet`_ (`LibreOffice`_)\n\nSupported input sources:\n\n- `Amazon S3`_\n- `File system`_\n- `GitHub`_\n- `Google Cloud Storage`_\n- `HTTP`_\n\nPlease note that Skeem is alpha-quality software, and a work in progress.\nContributions of all kinds are very welcome, in order to make it more solid.\nBreaking changes should be expected until a 1.0 release, so version pinning\nis recommended, especially when you use it as a library.\n\n\n********\nSynopsis\n********\n\n.. code-block:: sh\n\n    skeem infer-ddl --dialect=postgresql data.ndjson\n\n.. code-block:: sql\n\n    CREATE TABLE \"data\" (\n        \"id\" SERIAL NOT NULL,\n        \"name\" TEXT NOT NULL,\n        \"date\" TIMESTAMP WITHOUT TIME ZONE,\n        \"fruits\" TEXT NOT NULL,\n        \"price\" DECIMAL(2, 2) NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n\n\n**********\nQuickstart\n**********\n\nIf you are in a hurry, and want to run Skeem without any installation, just use\nthe OCI image on Podman or Docker.\n\n.. code-block:: sh\n\n    docker run --rm ghcr.io/daq-tools/skeem-standard \\\n        skeem infer-ddl --dialect=postgresql \\\n        https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.ndjson\n\n\n*****\nSetup\n*****\n\nInstall Skeem from PyPI.\n\n.. code-block:: sh\n\n    pip install skeem\n\nInstall Skeem with support for additional data formats like NetCDF.\n\n.. code-block:: sh\n\n    pip install 'skeem[scientific]'\n\n\n*****\nUsage\n*****\n\nThis section outlines some example invocations of Skeem, both on the command\nline, and per library use. Other than the resources available from the web,\ntesting data can be acquired from the repository's `testdata`_ folder.\n\nCommand line use\n================\n\nHelp\n----\n\n.. code-block:: sh\n\n    skeem info\n    skeem --help\n    skeem infer-ddl --help\n\nRead from files\n---------------\n\n.. code-block:: sh\n\n    # NDJSON, Parquet, and InfluxDB line protocol (ILP) formats.\n    skeem infer-ddl --dialect=postgresql data.ndjson\n    skeem infer-ddl --dialect=postgresql data.parquet\n    skeem infer-ddl --dialect=postgresql data.lp\n\n    # CSV, JSON, ODS, and XLSX formats.\n    skeem infer-ddl --dialect=postgresql data.csv\n    skeem infer-ddl --dialect=postgresql data.json\n    skeem infer-ddl --dialect=postgresql data.ods\n    skeem infer-ddl --dialect=postgresql data.xlsx\n    skeem infer-ddl --dialect=postgresql data.xlsx --address=\"Sheet2\"\n\nRead from URLs\n--------------\n\n.. code-block:: sh\n\n    # CSV, NDJSON, XLSX\n    skeem infer-ddl --dialect=postgresql https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.csv\n    skeem infer-ddl --dialect=postgresql https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.ndjson\n    skeem infer-ddl --dialect=postgresql https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.xlsx --address=\"Sheet2\"\n\n    # Google Sheets: Address first sheet, and specific sheet of workbook.\n    skeem infer-ddl --dialect=postgresql --table-name=foo https://docs.google.com/spreadsheets/d/1ExyrawjlyksbC6DOM6nLolJDbU8qiRrrhxSuxf5ScB0/view\n    skeem infer-ddl --dialect=postgresql --table-name=foo https://docs.google.com/spreadsheets/d/1ExyrawjlyksbC6DOM6nLolJDbU8qiRrrhxSuxf5ScB0/view#gid=883324548\n\n    # InfluxDB line protocol (ILP)\n    skeem infer-ddl --dialect=postgresql https://github.com/influxdata/influxdb2-sample-data/raw/master/air-sensor-data/air-sensor-data.lp\n\n    # Compressed files in gzip format\n    skeem --verbose infer-ddl --dialect=crate --content-type=ndjson https://s3.amazonaws.com/crate.sampledata/nyc.yellowcab/yc.2019.07.gz\n\n    # CSV on S3\n    skeem --verbose infer-ddl --dialect=postgresql s3://noaa-ghcn-pds/csv/by_year/2022.csv\n\n    # CSV on Google Cloud Storage\n    skeem --verbose infer-ddl --dialect=postgresql gs://tinybird-assets/datasets/nations.csv\n    skeem --verbose infer-ddl --dialect=postgresql gs://tinybird-assets/datasets/medals1.csv\n\n    # CSV on GitHub\n    skeem --verbose infer-ddl --dialect=postgresql github://daq-tools:skeem@/tests/testdata/basic.csv\n\n    # GRIB2, NetCDF\n    skeem infer-ddl --dialect=postgresql https://github.com/earthobservations/testdata/raw/main/opendata.dwd.de/weather/nwp/icon/grib/18/t/icon-global_regular-lat-lon_air-temperature_level-90.grib2\n    skeem infer-ddl --dialect=postgresql https://www.unidata.ucar.edu/software/netcdf/examples/sresa1b_ncar_ccsm3-example.nc\n    skeem infer-ddl --dialect=postgresql https://www.unidata.ucar.edu/software/netcdf/examples/WMI_Lear.nc\n\nOCI\n---\n\nOCI images are available on the GitHub Container Registry (GHCR). In order to\nrun them on Podman or Docker, invoke:\n\n.. code-block:: sh\n\n    docker run --rm ghcr.io/daq-tools/skeem-standard \\\n        skeem infer-ddl --dialect=postgresql \\\n        https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.csv\n\nIf you want to work with files on your filesystem, you will need to mount the\nworking directory into the container when running it, like:\n\n.. code-block:: sh\n\n    docker run --rm --volume=$(pwd):/data ghcr.io/daq-tools/skeem-standard \\\n        skeem infer-ddl --dialect=postgresql /data/basic.csv\n\nIn order to always run the latest development version, and to use a shortcut\nfor that, this section outlining how to use an alias for ``skeem``, and a\nvariable for storing the URL, may be useful to save a few keystrokes.\n\n.. code-block:: sh\n\n    alias skeem=\"docker run --rm --pull=always ghcr.io/daq-tools/skeem-standard:nightly skeem\"\n    URL=https://github.com/daq-tools/skeem/raw/main/tests/testdata/basic.ndjson\n    skeem infer-ddl --dialect=postgresql $URL\n\n\nMore\n----\n\nUse a different backend (default: ``ddlgen``)::\n\n    skeem infer-ddl --dialect=postgresql --backend=frictionless data.ndjson\n\nReading data from stdin needs to obtain both the table name and content type separately::\n\n    skeem infer-ddl --dialect=crate --table-name=foo --content-type=ndjson - < data.ndjson\n    skeem infer-ddl --dialect=crate --table-name=foo --content-type=json - < data.json\n    skeem infer-ddl --dialect=crate --table-name=foo --content-type=csv - < data.csv\n\nReading data from stdin also works like this, if you prefer to use pipes::\n\n    cat data.ndjson | skeem infer-ddl --dialect=crate --table-name=foo --content-type=ndjson -\n    cat data.json | skeem infer-ddl --dialect=crate --table-name=foo --content-type=json -\n    cat data.csv | skeem infer-ddl --dialect=crate --table-name=foo --content-type=csv -\n\n\nLibrary use\n===========\n\n.. code-block:: python\n\n    import io\n    from skeem.core import SchemaGenerator\n    from skeem.model import Resource, SqlTarget\n\n    INDATA = io.StringIO(\n        \"\"\"\n        {\"id\":1,\"name\":\"foo\",\"date\":\"2014-10-31 09:22:56\",\"fruits\":\"apple,banana\",\"price\":0.42}\n        {\"id\":2,\"name\":\"bar\",\"date\":null,\"fruits\":\"pear\",\"price\":0.84}\n        \"\"\"\n    )\n\n    sg = SchemaGenerator(\n        resource=Resource(data=INDATA, content_type=\"ndjson\"),\n        target=SqlTarget(dialect=\"crate\", table_name=\"testdrive\"),\n    )\n\n    print(sg.to_sql_ddl().pretty)\n\n.. code-block:: sql\n\n    CREATE TABLE \"testdrive\" (\n        \"id\" INT NOT NULL,\n        \"name\" STRING NOT NULL,\n        \"date\" TIMESTAMP,\n        \"fruits\" STRING NOT NULL,\n        \"price\" DOUBLE NOT NULL,\n        PRIMARY KEY (\"id\")\n    );\n\n\n***********\nDevelopment\n***********\n\nFor installing the project from source, please follow the `development`_\ndocumentation.\n\n\n*******************\nProject information\n*******************\n\nCredits\n=======\n- `Catherine Devlin`_ for `ddlgenerator`_ and `data_dispenser`_.\n- `Mike Bayer`_ for `SQLAlchemy`_.\n- `Paul Walsh`_ and `Evgeny Karev`_ for `frictionless`_.\n- `Wes McKinney`_ for `pandas`_.\n- All other countless contributors and authors of excellent Python\n  packages, Python itself, and turtles all the way down.\n\nPrior art\n=========\nWe are maintaining a `list of other projects`_ with the same or similar goals\nlike Skeem.\n\nEtymology\n=========\nThe program was about to be called *Eskema*, but it turned out that there is\nalready another `Eskema`_ out there. So, it has been renamed to *Skeem*, which\nis Estonian, and means \"schema\", \"outline\", or \"(to) plan\".\n\n\n\n.. _Amazon S3: https://en.wikipedia.org/wiki/Amazon_S3\n.. _Apache Parquet: https://en.wikipedia.org/wiki/Apache_Parquet\n.. _Catherine Devlin: https://github.com/catherinedevlin\n.. _CSV: https://en.wikipedia.org/wiki/Comma-separated_values\n.. _data_dispenser: https://pypi.org/project/data_dispenser/\n.. _ddlgenerator: https://pypi.org/project/ddlgenerator/\n.. _development: doc/development.rst\n.. _Eskema: https://github.com/nombrekeff/eskema\n.. _Evgeny Karev: https://github.com/roll\n.. _file system: https://en.wikipedia.org/wiki/File_system\n.. _frictionless: https://github.com/frictionlessdata/framework\n.. _fsspec: https://pypi.org/project/fsspec/\n.. _GitHub: https://github.com/\n.. _Google Cloud Storage: https://en.wikipedia.org/wiki/Google_Cloud_Storage\n.. _Google Sheets: https://en.wikipedia.org/wiki/Google_Sheets\n.. _GRIB: https://en.wikipedia.org/wiki/GRIB\n.. _HTTP: https://en.wikipedia.org/wiki/HTTP\n.. _InfluxDB line protocol: https://docs.influxdata.com/influxdb/latest/reference/syntax/line-protocol/\n.. _JSON: https://www.json.org/\n.. _JSON Lines: https://jsonlines.org/\n.. _JSON streaming: https://en.wikipedia.org/wiki/JSON_streaming\n.. _LibreOffice: https://en.wikipedia.org/wiki/LibreOffice\n.. _list of other projects: doc/prior-art.rst\n.. _Microsoft Excel: https://en.wikipedia.org/wiki/Microsoft_Excel\n.. _Mike Bayer: https://github.com/zzzeek\n.. _NDJSON: http://ndjson.org/\n.. _NetCDF: https://en.wikipedia.org/wiki/NetCDF\n.. _Office Open XML Workbook: https://en.wikipedia.org/wiki/Office_Open_XML\n.. _OpenDocument Spreadsheet: https://en.wikipedia.org/wiki/OpenDocument\n.. _pandas: https://pandas.pydata.org/\n.. _Paul Walsh: https://github.com/pwalsh\n.. _SQLAlchemy: https://pypi.org/project/SQLAlchemy/\n.. _testdata: https://github.com/daq-tools/skeem/tree/main/tests/testdata\n.. _Wes McKinney: https://github.com/wesm\n.. _xarray: https://xarray.dev/\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "csv,ddl,infer,inference,introspection,json,jsonl,ldjson,ndjson,rdbms,reflection,schema,schema-conversion,sql,sql-schema,tabular-data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "skeem",
    "package_url": "https://pypi.org/project/skeem/",
    "platform": null,
    "project_url": "https://pypi.org/project/skeem/",
    "project_urls": {
      "changelog": "https://github.com/daq-tools/skeem/blob/main/CHANGES.rst",
      "documentation": "https://github.com/daq-tools/skeem",
      "homepage": "https://github.com/daq-tools/skeem",
      "repository": "https://github.com/daq-tools/skeem"
    },
    "release_url": "https://pypi.org/project/skeem/0.1.0/",
    "requires_dist": [
      "click (<9)",
      "colorama (<1)",
      "crash",
      "crate[sqlalchemy]",
      "ddlgenerator (<0.2)",
      "frictionless[excel,json,ods,parquet,sql] (<5.6)",
      "fsspec[gcs,github,http,s3] (==2023.1)",
      "json-stream (<3)",
      "line-protocol-parser (<2)",
      "odfpy (<2)",
      "pandas (<1.6)",
      "requests (<3)",
      "sql-formatter (<0.7)",
      "sqlmakeuper (<0.2)",
      "black (<23) ; extra == 'develop'",
      "hunter (<4) ; extra == 'develop'",
      "mypy (==0.991) ; extra == 'develop'",
      "poethepoet (<0.19) ; extra == 'develop'",
      "pyproject-fmt (<0.6) ; extra == 'develop'",
      "ruff (==0.0.231) ; extra == 'develop'",
      "validate-pyproject (<0.12) ; extra == 'develop'",
      "build (<1) ; extra == 'release'",
      "twine (<5) ; extra == 'release'",
      "minibump (<1) ; (python_version >= \"3.10\") and extra == 'release'",
      "cfgrib (<1) ; extra == 'scientific'",
      "cftime (<2) ; extra == 'scientific'",
      "scipy (<2) ; extra == 'scientific'",
      "xarray (<2024) ; extra == 'scientific'",
      "pytest (<8) ; extra == 'test'",
      "pytest-cov (<5) ; extra == 'test'",
      "pytest-timeout (<3) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Infer SQL DDL statements from tabular data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17220185,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adc588a91532ff1b4370bc76371447914ec22e1d17fc63c7a1421f4889b5ca67",
          "md5": "33dbdcd105b9f8245588058592467912",
          "sha256": "e78a09a9f401b7315f87bb972b568229911f4d27cd998138f567222e33846820"
        },
        "downloads": -1,
        "filename": "skeem-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33dbdcd105b9f8245588058592467912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42071,
        "upload_time": "2023-03-09T07:38:57",
        "upload_time_iso_8601": "2023-03-09T07:38:57.366580Z",
        "url": "https://files.pythonhosted.org/packages/ad/c5/88a91532ff1b4370bc76371447914ec22e1d17fc63c7a1421f4889b5ca67/skeem-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ac64b09e6fbecb92f2c2a4613fb922fbc12d091d27a24c88f893d9d001a3219",
          "md5": "ce66910d64fb95338c16acabcdc21cf8",
          "sha256": "afeae0f679c0e5a39dfa7f5de81b207dfacc36e85e954e4103d040280995b16d"
        },
        "downloads": -1,
        "filename": "skeem-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce66910d64fb95338c16acabcdc21cf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 52515,
        "upload_time": "2023-03-09T07:38:59",
        "upload_time_iso_8601": "2023-03-09T07:38:59.943723Z",
        "url": "https://files.pythonhosted.org/packages/6a/c6/4b09e6fbecb92f2c2a4613fb922fbc12d091d27a24c88f893d9d001a3219/skeem-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "adc588a91532ff1b4370bc76371447914ec22e1d17fc63c7a1421f4889b5ca67",
        "md5": "33dbdcd105b9f8245588058592467912",
        "sha256": "e78a09a9f401b7315f87bb972b568229911f4d27cd998138f567222e33846820"
      },
      "downloads": -1,
      "filename": "skeem-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33dbdcd105b9f8245588058592467912",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 42071,
      "upload_time": "2023-03-09T07:38:57",
      "upload_time_iso_8601": "2023-03-09T07:38:57.366580Z",
      "url": "https://files.pythonhosted.org/packages/ad/c5/88a91532ff1b4370bc76371447914ec22e1d17fc63c7a1421f4889b5ca67/skeem-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ac64b09e6fbecb92f2c2a4613fb922fbc12d091d27a24c88f893d9d001a3219",
        "md5": "ce66910d64fb95338c16acabcdc21cf8",
        "sha256": "afeae0f679c0e5a39dfa7f5de81b207dfacc36e85e954e4103d040280995b16d"
      },
      "downloads": -1,
      "filename": "skeem-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ce66910d64fb95338c16acabcdc21cf8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 52515,
      "upload_time": "2023-03-09T07:38:59",
      "upload_time_iso_8601": "2023-03-09T07:38:59.943723Z",
      "url": "https://files.pythonhosted.org/packages/6a/c6/4b09e6fbecb92f2c2a4613fb922fbc12d091d27a24c88f893d9d001a3219/skeem-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}