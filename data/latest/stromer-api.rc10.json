{
  "info": {
    "author": "Koen",
    "author_email": "koen@schilders.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Stromer API\r\n\r\nThis Python package contains the interfaces for interacting with the Stromer web API that is normally used by the Stromer mobile app. Using this API you can retrieve data of your bike. This is the most complete and simple to use package to connect to your Stromer Bike without the need to use the mobile app. On top of that it offers features that the app does not provide (including downloading of data).\r\n\r\nInstallation:\r\n\r\n    pip install -r requirements.txt\r\n    pip install stromer_api\r\n\r\nUsage:\r\n\r\n    from stromer_api import StromerBike\r\n    mybike = StromerBike(<your username>, <your password>, <stromer client id>)\r\n\r\n    # access available data easily\r\n    print(mybike.state.trip_distance)\r\n    print(mybike.position.latitude)\r\n\r\n    # modify bike sensors\r\n    mybike.sensors.user_torque_sensitivity = 10\r\n\r\n    # Export data to excel\r\n    mybike.week_stats(2022,1,52).excel_dump(\"exported_data\")\r\n\r\nThe client_id you should intercept using a proxy (eg. mitm proxy) or maybe it can be obtained from decompiling the android apk of the Stromer OMNI app. Many discussions can be found on the internet how to get hold of it.\r\n\r\nThe following properties can be accessed.\r\n\r\nStromerBike class - getters:\r\n* `mybike.bikeid (int)`\r\n* `mybike.nickname (str)`\r\n* `mybike.bikemodel (str)`\r\n* `mybike.biketype (str)`\r\n* `mybike.color (str)`\r\n* `mybike.size (str)`\r\n* `mybike.hardware (str)`\r\n* `mybike.connectivity (str)`\r\n* `mybike.has_crash_detection (bool)`\r\n\r\nStromerBike class - setters:\r\n* `mybike.reset_trip_data()`\r\n* `mybike.lock()`\r\n* `mybike.unlock()`\r\n* `mybike.light(\"on\" | \"off\" | \"flash\" )`\r\n\r\nBikeMaintenance class:\r\n* `mybike.maintenance_feature (BikeMaintenance)`\r\n* `mybike.maintenance_feature.display_maintenance_event`\r\n* `mybike.maintenance_feature.next_maintenance_km`\r\n* `mybike.maintenance_feature.next_maintenance_date`\r\n* `mybike.maintenance_feature.next_maintenance_interval`\r\n* `mybike.maintenance_feature.customer_enabled_maintenance`\r\n* `mybike.maintenance_feature.last_maintenance_reset_km`\r\n* `mybike.maintenance_feature.last_maintenance_reset_date`\r\n\r\nBikeState class:\r\n* `mybike.state (BikeState)`\r\n* `mybike.state.trip_distance (float)`\r\n* `mybike.state.suiversion (str)`\r\n* `mybike.state.average_speed_trip (float)`\r\n* `mybike.state.power_on_cycles (int)`\r\n* `mybike.state.tntversion (str)`\r\n* `mybike.state.atmospheric_pressure (int)`\r\n* `mybike.state.battery_SOC (int)`\r\n* `mybike.state.assistance_level (int)`\r\n* `mybike.state.bike_speed (float)`\r\n* `mybike.state.trip_time (int)`\r\n* `mybike.state.trip_time_str (str)`\r\n* `mybike.state.battery_health (int)`\r\n* `mybike.state.theft_flag (bool)`\r\n* `mybike.state.motor_temp (float)`\r\n* `mybike.state.battery_temp (float)`\r\n* `mybike.state.rcvts (int)`\r\n* `mybike.state.rcvts_str (str)`\r\n* `mybike.state.average_energy_consumption (int)`\r\n* `mybike.state.total_time (int)`\r\n* `mybike.state.total_time (str)`\r\n* `mybike.state.total_distance (float)`\r\n* `mybike.state.light_on (int)`\r\n* `mybike.state.total_energy_consumption (int)`\r\n* `mybike.state.lock_flag (bool)`\r\n\r\nBikePosition class:\r\n* `mybike.position (BikePosition)`\r\n* `mybike.position.latitude (float)`\r\n* `mybike.position.longitude (float)`\r\n* `mybike.position.altitude (int)`\r\n* `mybike.position.speed (float)`\r\n* `mybike.position.timets (int)`\r\n* `mybike.position.timets_str (str)`\r\n* `mybike.position.rcvts (int)`\r\n* `mybike.position.rcvts_str (str)`\r\n\r\nBikeStatistics class:\r\n* `mybike.statistics (BikeStatistics)`\r\n* `mybike.statistics.total_km (float)`\r\n* `mybike.statistics.average_km (float)`\r\n* `mybike.statistics.total_sec (int)`\r\n* `mybike.statistics.total_time_str (str)`\r\n* `mybike.statistics.average_sec (float)`\r\n* `mybike.statistics.average_time_str (str)`\r\n* `mybike.statistics.total_wh (int)`\r\n* `mybike.statistics.average_wh (float)`\r\n* `mybike.statistics.kmh (float)`\r\n* `mybike.statistics.average_kmh (float)`\r\n* `mybike.statistics.active_days (int)`\r\n* `mybike.statistics.average_days (float)`\r\n\r\nBikeSensors class - getters:\r\n* `mybike.sensors (BikeSensors)`\r\n* `mybike.sensors.user_torque_sensitivity (int)`\r\n* `mybike.sensors.recup_level_user_offset (int)`\r\n\r\nBikeSensors class - setters:\r\n* `mybike.sensors.user_torque_sensitivity = <torque (int)>`\r\n* `mybike.sensors.recup_level_user_offset = <recup (int)>`\r\n* `mybike.sensors.set(<torque (int)>, <recup (int)>)`\r\n\r\nBikeMotorTuning class - getters:\r\n* `mybike.motor_tuning (BikeMotroTuning)`\r\n* `mybike.motor_tuning.tuning_speed (int)`\r\n* `mybike.motor_tuning.tuning_torque (int)`\r\n* `mybike.motor_tuning.tuning_agility (int)`\r\n* `mybike.motor_tuning.tuning_speed = <speed (int)>`\r\n* `mybike.motor_tuning.tuning_torque = <torque (int)>`\r\n* `mybike.motor_tuning.tuning_agility = <agility (int)>`\r\n* `mybike.motor_tuning.set(<speed (int)>, <torque (int)>, <agility (int)>)`\r\n\r\nBikeSettings class - getters:\r\n* `mybike.settings (BikeSettings)`\r\n* `mybike.settings.auto_lock_mode (bool)`\r\n* `mybike.settings.auto_power_off_time (int)`\r\n* `mybike.settings.clock_format (str)`\r\n* `mybike.settings.date_format (str)`\r\n* `mybike.settings.distance_unit (str)`\r\n* `mybike.settings.language (str)`\r\n* `mybike.settings.speed_unit (str)`\r\n \r\nBikeSettings class - setters:\r\n* `mybike.settings.auto_lock_mode = <mode (bool)>`\r\n* `mybike.settings.auto_power_off_time = <time (int)>`\r\n* `mybike.settings.clock_format = <format (str)>`\r\n* `mybike.settings.date_format = <format (str)>`\r\n* `mybike.settings.distance_unit = <unit (str)>`\r\n* `mybike.settings.language = <language(str)>`\r\n* `mybike.settings.speed_unit = <unit (str)>`\r\n* `mybike.settings.set(<auto_lock_mode (bool)>, <auto_power_off_time (int)>, <clock_format (str)>, <date_format (str)>, <distance_unit (str)>, <language (str)>, <speed_unit (str)>)`\r\n\r\nBikeUser class:\r\n* `mybike.user (BikeUser)`\r\n* `mybike.user.first_name (str)`\r\n* `mybike.user.last_name (str)`\r\n* `mybike.user.street_name (str)`\r\n* `mybike.user.house_number (str)`\r\n* `mybike.user.postal_code (str)`\r\n* `mybike.user.city (str)`\r\n* `mybike.user.country (str)`\r\n* `mybike.user.phone (str)`\r\n* `mybike.user.mobile (str)`\r\n* `mybike.user.email (str)`\r\n* `mybike.user.gender (str)`\r\n* `mybike.user.size (float)`\r\n* `mybike.user.weight (float)`\r\n* `mybike.user.accepted_gdpr_version (str)`\r\n* `mybike.user.may_receive_mails (bool)`\r\n\r\nBikeShop class:\r\n* `mybike.user.shop (BikeShop)`\r\n* `mybike.user.shop.name (str)`\r\n* `mybike.user.shop.street (str)`\r\n* `mybike.user.shop.postal_code (str)`\r\n* `mybike.user.shop.city (str)`\r\n* `mybike.user.shop.country_code (str)`\r\n* `mybike.user.shop.country_name (str)`\r\n* `mybike.user.shop.phone (str)`\r\n* `mybike.user.shop.latitude (float)`\r\n* `mybike.user.shop.longitude (float)`\r\n* `mybike.user.shop.debitor (float)`\r\n\r\nServiceInfo class:\r\n* `mybike.service_info (ServiceInfo)`\r\n* `mybike.service_info.shop (BikeShop)`\r\n* `mybike.service_info.vin (str)`\r\n* `mybike.service_info.serial (str)`\r\n* `mybike.service_info.service_logs ([ServiceLog)]`\r\n* `mybike.service_info.bike_parts ([BikePart)]`\r\n\r\nServiceLog class:\r\n* `mybike.service_info.service_logs[] (ServiceLog)`\r\n* `mybike.service_info.service_logs[].note (str)`\r\n* `mybike.service_info.service_logs[].created_on (int)`\r\n\r\nBikePart class:\r\n* `mybike.service_info.bike_parts[] (BikePart)`\r\n* `mybike.service_info.bike_parts[].serial (str)`\r\n* `mybike.service_info.bike_parts[].name (str)`\r\n* `mybike.service_info.bike_parts[].category (str)`\r\n\r\nBikeShopList class:\r\n* `mybike.shops.lookup(<part of shopname (str)>) (BikeShop)`\r\n* `mybike.shops[i] (BikeShop)`\r\n\r\nYearStats class:\r\n* `mybike.year_stats(year (int), num_years (int)) (YearStats)`\r\n* `mybike.year_stats(year (int), num_years (int)).start_date (str)`\r\n* `mybike.year_stats(year (int), num_years (int)).end_date (str)`\r\n* `mybike.year_stats(year (int), num_years (int)).total_years (int)`\r\n* `mybike.year_stats(year (int), num_years (int)).km_avg_years_since_beginning (float)`\r\n* `mybike.year_stats(year (int), num_years (int)).year_record (float)`\r\n* `mybike.year_stats(year (int), num_years (int)).csv_dump()`\r\n* `mybike.year_stats(year (int), num_years (int)).excel_dump()`\r\n* `mybike.year_stats(year (int), num_years (int))[year (str)] (PeriodicInfo)`\r\n\r\nMonthStats class:\r\n* `mybike.month_stats(year (int), month (int), num_months (int)) (MonthStats)`\r\n* `mybike.month_stats(year (int), month (int), num_months (int)).start_date (str)`\r\n* `mybike.month_stats(year (int), month (int), num_months (int)).end_date (str)`\r\n* `mybike.month_stats(year (int), month (int), num_months (int)).total_months (int)`\r\n* `mybike.month_stats(year (int), month (int), num_months (int)).km_avg_12_months (float)`\r\n* `mybike.month_stats(year (int), month (int), num_months (int)).month_record (float)`\r\n* `mybike.monthg_stats(year (int), month (int), num_months (int)).csv_dump()`\r\n* `mybike.monthg_stats(year (int), month (int), num_months (int)).excel_dump()`\r\n* `mybike.monthg_stats(year (int), month (int), num_months (int))[month (str)] (PeriodicInfo)`\r\n\r\nWeekStats class:\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)) (WeekStats)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).start_date (str)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).end_date (str)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).total_weeks (int)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).km_avg_12_weeks (float)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).week_record (float)`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).csv_dump()`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).excel_dump()`\r\n* `mybike.week_stats(year (int), week (int), num_weeks (int)).[week (str)] (PeriodicInfo)`\r\n\r\nDayStats class:\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)) (DayStats)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).start_date (str)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).end_date (str)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).total_days (int)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).km_avg_30_days (float)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).day_record (float)`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).csv_dump()`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int)).excel_dump()`\r\n* `mybike.day_stats(year (int), month (int), day (int), num_days (int))[day (str)] (PeriodicInfo)`\r\n\r\nAny suggestions for additions are of course also very welcome!\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elnkosc/stromer_api",
    "keywords": "Stromer,EBike,Python,API",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stromer-api",
    "package_url": "https://pypi.org/project/stromer-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/stromer-api/",
    "project_urls": {
      "Homepage": "https://github.com/elnkosc/stromer_api"
    },
    "release_url": "https://pypi.org/project/stromer-api/2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Stromer API for accessing data from your Stromer Speed Bike.",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16877900,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "858bae5bf7bb6cd6a8a5e84056a1a84a30db94b8a453109e20160b511b3a9d0e",
          "md5": "a6dc8c3012f9cc88eb3f6083f30ea462",
          "sha256": "aee96bd12c2652f438fda2cc06c0c4d33f44883be4aa46f9134e44701165a0dd"
        },
        "downloads": -1,
        "filename": "stromer_api-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6dc8c3012f9cc88eb3f6083f30ea462",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2925,
        "upload_time": "2022-05-02T20:56:15",
        "upload_time_iso_8601": "2022-05-02T20:56:15.296106Z",
        "url": "https://files.pythonhosted.org/packages/85/8b/ae5bf7bb6cd6a8a5e84056a1a84a30db94b8a453109e20160b511b3a9d0e/stromer_api-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "939663223adf643ecc56bd37b0715b27c5f424ac303d3190892e440b0cb05780",
          "md5": "2373cf052d67dc629d06f60152633f05",
          "sha256": "06a8535be2b9c019b011e6a8f31c4c0e9912b05b81364ad485872beb6e3726e6"
        },
        "downloads": -1,
        "filename": "stromer_api-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2373cf052d67dc629d06f60152633f05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1417,
        "upload_time": "2022-05-03T19:17:45",
        "upload_time_iso_8601": "2022-05-03T19:17:45.530722Z",
        "url": "https://files.pythonhosted.org/packages/93/96/63223adf643ecc56bd37b0715b27c5f424ac303d3190892e440b0cb05780/stromer_api-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ced868f70882f2d7f5c715142bbdc6c253d146db0a8e2fb067ffc3c59526c7f",
          "md5": "7eab759f74e4a5acae1615f3675e40c0",
          "sha256": "99077f6574bc807ea2e29d5ddac7a88ba595fe9ccf12c694a2dbd01e7673ee60"
        },
        "downloads": -1,
        "filename": "stromer_api-0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "7eab759f74e4a5acae1615f3675e40c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3022,
        "upload_time": "2022-05-03T19:22:08",
        "upload_time_iso_8601": "2022-05-03T19:22:08.222256Z",
        "url": "https://files.pythonhosted.org/packages/6c/ed/868f70882f2d7f5c715142bbdc6c253d146db0a8e2fb067ffc3c59526c7f/stromer_api-0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "234fbf4706f385caef8848f91bb0ff4a5448656063b164a8a5a7064c24ab43cb",
          "md5": "b74954a87bac590c4c7af65598881bec",
          "sha256": "e2a23571d6672b5be79b23e3032202242281d8864a2d9780d0f06ff9a6c4be0a"
        },
        "downloads": -1,
        "filename": "stromer_api-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b74954a87bac590c4c7af65598881bec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3118,
        "upload_time": "2022-05-03T19:31:39",
        "upload_time_iso_8601": "2022-05-03T19:31:39.042886Z",
        "url": "https://files.pythonhosted.org/packages/23/4f/bf4706f385caef8848f91bb0ff4a5448656063b164a8a5a7064c24ab43cb/stromer_api-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5c7c432c995a3b23e713629fe479282fe67354a3d1b01f91224c2b3e2384020",
          "md5": "adb6d825842243a6dfc27b1b1755fe8c",
          "sha256": "370022c7f06fd13d82ed2e36ac8b665a3119a8515afc7b29034d0841c9c07588"
        },
        "downloads": -1,
        "filename": "stromer_api-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "adb6d825842243a6dfc27b1b1755fe8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3325,
        "upload_time": "2022-05-03T19:49:08",
        "upload_time_iso_8601": "2022-05-03T19:49:08.952883Z",
        "url": "https://files.pythonhosted.org/packages/b5/c7/c432c995a3b23e713629fe479282fe67354a3d1b01f91224c2b3e2384020/stromer_api-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d424b3d3bcad0e440de35c2b77653fdd059b4cdceb8dc8ff92bb107e5babbd68",
          "md5": "52f6c5c9ba7decab47154394b423deb0",
          "sha256": "5eba522c871f35dd2339a2346e47540c29ed56711ad4a783e5807164d5ab71fc"
        },
        "downloads": -1,
        "filename": "stromer_api-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52f6c5c9ba7decab47154394b423deb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9076,
        "upload_time": "2023-01-29T14:08:23",
        "upload_time_iso_8601": "2023-01-29T14:08:23.117207Z",
        "url": "https://files.pythonhosted.org/packages/d4/24/b3d3bcad0e440de35c2b77653fdd059b4cdceb8dc8ff92bb107e5babbd68/stromer_api-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "926d657d2c9a52e997c237af8202f79be7cbdbe16e3140a6d719e2485d1e02a3",
          "md5": "324bc6acfa73c5f8fded874dccf0347f",
          "sha256": "ffdbbe1858ea4efdd8cad5a2964d4e9320966b8959633c55d81813aa40982906"
        },
        "downloads": -1,
        "filename": "stromer_api-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "324bc6acfa73c5f8fded874dccf0347f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13991,
        "upload_time": "2023-02-12T22:00:41",
        "upload_time_iso_8601": "2023-02-12T22:00:41.542825Z",
        "url": "https://files.pythonhosted.org/packages/92/6d/657d2c9a52e997c237af8202f79be7cbdbe16e3140a6d719e2485d1e02a3/stromer_api-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e8990d458dd61f37336cd145f17b60406d8e81ae382ed0b9252077e36ea5faa",
          "md5": "245cceeaa242e92b0c97005b7d007a4b",
          "sha256": "0770c7c80a1868c7e8bc921efc37d33b9b09b97332dff46acb8b93690f0fadeb"
        },
        "downloads": -1,
        "filename": "stromer_api-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "245cceeaa242e92b0c97005b7d007a4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13997,
        "upload_time": "2023-02-15T20:55:49",
        "upload_time_iso_8601": "2023-02-15T20:55:49.420106Z",
        "url": "https://files.pythonhosted.org/packages/1e/89/90d458dd61f37336cd145f17b60406d8e81ae382ed0b9252077e36ea5faa/stromer_api-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7fbe59d031134f1e7c0fb8f9598ca8b0961e77dfa07f08f2cf3488627b819ea",
          "md5": "ef013d433f6df8a8c1e40144b3f70c44",
          "sha256": "88f62e90cc0d30c9ac033d09942931b1b7a4c0b0365b428c9ada7fbbe2b5b72d"
        },
        "downloads": -1,
        "filename": "stromer_api-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ef013d433f6df8a8c1e40144b3f70c44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13982,
        "upload_time": "2023-02-15T21:09:35",
        "upload_time_iso_8601": "2023-02-15T21:09:35.110011Z",
        "url": "https://files.pythonhosted.org/packages/c7/fb/e59d031134f1e7c0fb8f9598ca8b0961e77dfa07f08f2cf3488627b819ea/stromer_api-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c127e6422f03a6f0c99ced3a60995ce4ac67ec4d39ebb7a6f9b4e16e47c574f9",
          "md5": "69dc9453296a9ed0ea323058dace5c7e",
          "sha256": "a26253789442c54459d75530c06605fae8ff281135e3768848fc28b09b1bf3d0"
        },
        "downloads": -1,
        "filename": "stromer_api-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "69dc9453296a9ed0ea323058dace5c7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13971,
        "upload_time": "2023-02-15T21:42:53",
        "upload_time_iso_8601": "2023-02-15T21:42:53.807876Z",
        "url": "https://files.pythonhosted.org/packages/c1/27/e6422f03a6f0c99ced3a60995ce4ac67ec4d39ebb7a6f9b4e16e47c574f9/stromer_api-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c127e6422f03a6f0c99ced3a60995ce4ac67ec4d39ebb7a6f9b4e16e47c574f9",
        "md5": "69dc9453296a9ed0ea323058dace5c7e",
        "sha256": "a26253789442c54459d75530c06605fae8ff281135e3768848fc28b09b1bf3d0"
      },
      "downloads": -1,
      "filename": "stromer_api-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "69dc9453296a9ed0ea323058dace5c7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13971,
      "upload_time": "2023-02-15T21:42:53",
      "upload_time_iso_8601": "2023-02-15T21:42:53.807876Z",
      "url": "https://files.pythonhosted.org/packages/c1/27/e6422f03a6f0c99ced3a60995ce4ac67ec4d39ebb7a6f9b4e16e47c574f9/stromer_api-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}