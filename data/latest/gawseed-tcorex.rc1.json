{
  "info": {
    "author": "Hrayr Harutyunyan",
    "author_email": "harhro@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Purpose\n\nThe T-Corex algorithm is designed to identify changes in correlation\nin datasets of large signals.  Given windows of signals.\n\nThis package modifies the [original implementation] Hrayr Harutyunyan to\nadd documentation and CLI tools.\n\n[original implementation]: https://github.com/hrayrhar/T-CorEx\n\n# Usage\n\n## Installation\n\nInstall with `pip` (or `pipx`):\n\n```\npip3 install gawseed-tcorex\n```\n\n## Analysis\n\nTo analyze a temporal time-series of data in a csv file, run tcorex \nsimilar to:\n\n```\ntcorex -w 30 -n 100 -w 30 -g .1 -l .5 input_data.csv output.pkl\n```\n\nDiscussion and help with selecting parameters is discussed below.\n\n## Displaying results\n\nTo list the correlations within each window, use\n`tcorex-changepoints` on the resulting pkl file:\n\n```\ntcorex-changepoints output.pkl\n```\n\nTo show a graph of which time periods had the highest rate of\ncorrelation changes, use `tcorex-plot`:\n\n```\ntcorex-plot -o changes output.pkl\n```\n\n## Picking algorithm parameters\n\n### Number of latent factors (-n)\n\nLook at the number of signals you have, and if you have a lot there\nshould be more latent factors.  If\nyou pick a value too low, then all the signals will appear to be\ncorrelated even when they are not.  If you pick a value which is too\nlarge, only an identity matrix will be produced and all the signals\nwill appear independent.  Typically start with a roughly small value\nand raise it to improve results with respect to signals that are\nactually related.\n\nThe number of latent factors should be roughly 2 order of magnitudes\nlower (IE *number_of_signals/100*).\n\n### Window size (-w)\n\nThe algorithm is designed to look for changes in correlations between\ntwo windows.\n\nThe window size indicates how frequently changes will happen to\nattempt to find changes between different window sizes.  If the window\nis too small, then the accuracy will be reduced and more correlations\nwill be found as signals always appear similar at some point when\nbroken into small chunks.  If the window is too large, then no changes\nwill be easily detected because the difference between varying signals\nwill appear large.  When windows are large, you also lose track about\nwhere correlation changes actually happen because the change point can\nbe anywhere in the window.\n\n### Gamma\n\nRange: 0.1-10\n\nThe Gamma value sets the decay rate for sample weights.  Bigger values\nwill result in more data being included, which is good for smaller\ndatasets.  If enough data is present, then low values should be used.\n\n### L1 regularization strength\n\nHigher L1 values are better better for signals with rapid changes\n\n### L2\n\nBetter for smooth time series.  There is no current CLI option for this.\n\n# Correlation Explanation Methods\n\nOfficial implementation of linear correlation explanation (linear CorEx) and temporal correlation explanation (T-CorEx) methods.\n\n#### Linear CorEx\nLinear CorEx searches for independent latent factors that explain all correlations between observed variables, while also biasing\nthe model selection towards modular latent factor models â€“ directed latent factor graphical models\nwhere each observed variable has a single latent variable as its only parent.\nThis is useful for covariance estimation, clustering related variables, and dimensionality reduction, especially in the high-dimensional and under-sampled regime.\nThe complete description of the method is presented in NeurIPS 2019 [paper](https://papers.nips.cc/paper/9691-fast-structure-learning-with-modular-regularization) *\"Fast structure learning with modular regularization\"* by Greg Ver Steeg, Hrayr Harutyunyan, Daniel Moyer, and Aram Galstyan.\nIf you want to cite this paper, please use the following BibTex entry:\n```text\n@incollection{NIPS2019_9691,\ntitle = {Fast structure learning with modular regularization},\nauthor = {Ver Steeg, Greg and Harutyunyan, Hrayr and Moyer, Daniel and Galstyan, Aram},\nbooktitle = {Advances in Neural Information Processing Systems 32},\neditor = {H. Wallach and H. Larochelle and A. Beygelzimer and F. d\\textquotesingle Alch\\'{e}-Buc and E. Fox and R. Garnett},\npages = {15567--15577},\nyear = {2019},\npublisher = {Curran Associates, Inc.},\nurl = {http://papers.nips.cc/paper/9691-fast-structure-learning-with-modular-regularization.pdf}\n}\n```\n\n**Note:** Greg Ver Steeg has an alternative implementation of linear CorEx, which is available at [github.com/gregversteeg/LinearCorex](https://github.com/gregversteeg/LinearCorex).\nThat implementation uses a quazi-Newton optimization method for learning the model parameters. \nIn contrast, the implementation provided in this repository uses ADAM optimizer.\nThis latter implementation utilizes GPUs better, and can converge to slightly better objective values if the input data is highly non-modular.\nNevertheless, we highly encourage to take a look at the alternative implementation.\n\n#### T-CorEx\nT-CorEx is a method for covariance estimation from temporal data.\nIt trains a linear CorEx for each time period,\nwhile employing two regularization techniques to enforce temporal consistency of estimates.\nThe method is introduced in the [paper](https://arxiv.org/abs/1905.13276) *\"Efficient Covariance Estimation from Temporal Data\"* by Hrayr Harutunyan, Daniel Moyer, Hrant Khachatrian, Greg Ver Steeg, and Aram Galstyan.\nIf you want to cite this paper, please use the following BibTex entry:\n```text\n@article{tcorex,\n  title={Efficient Covariance Estimation from Temporal Data},\n  author={Harutyunyan, Hrayr and Moyer, Daniel and Khachatrian, Hrant and Steeg, Greg Ver and Galstyan, Aram},\n  journal={arXiv preprint arXiv:1905.13276},\n  year={2019}\n}\n```\n\n\nBoth linear CorEx and T-CorEx have linear time and memory complexity with respect to the number of observed variables and can be applied to high-dimensional datasets.\nFor example, it takes less than an hour on a moderate PC to estimate the covariance structure for time series with 100K variables using T-CorEx.\nBoth methods are implemented in PyTorch and can run on CPUs and GPUs.\n\n\n## Requirements and Installation\nThe code is writen in Python 3, but should run on Python 2 as well.\nThe dependencies are the following: \n* numpy, scipy, tqdm, PyTorch\n* [optional] nibabel (for fMRI experiments)\n* [optional] nose (for tests)\n* [optional] sklearn, regain, TVGL, linearcorex, pandas (for running comparisions)\n* [optional] matplotlib and nilearn (for visualizations)\n\nTo install the code, run the following command:\n```text\npython setup.py install\n```\n\n## Description\nThe main method for linear CorEx is the class `tcorex.Corex`, and that of T-CorEx is 'tcorex.TCorex'.\nThe complete description of parameters of these classes can be found in the corresponding docstrings.\nWhile there are many parameters (especially for T-CorEx), in general only a couple of them need to be tuned (others are set to their \"best\" values).\nThose parameters are:\n\n\n| Parameter | Linear CorEx | T-CorEx | Description |    \n|:---------|---|---|:---|   \n| `m` | + | + | The number of latent variables. Usually this is much smaller than the number of observed variables. |  \n| `l1` | - | + | A non-negative real number specifying the coefficient of l1 temporal regularization.|  \n| `gamma` | - | + | A real number in [0,1]. This argument controls the sample weights. The samples of time period t' will have weight w_t(t')=gamma^\\|t' - t\\| when estimating quantities for time period t. Smaller values are used for very dynamic time series.|  \n\n\n## Usage\n\nRun the following command for a sample run of TCorex. \n```bash\npython -m examples.sample_run\n```\n\nThe code is shown below:\n``` python \nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom tcorex.experiments.data import load_modular_sudden_change\nfrom tcorex.experiments import baselines\nfrom tcorex import base\nfrom tcorex import TCorex\nfrom tcorex import covariance as cov_utils\n\nimport numpy as np\nimport matplotlib\nmatplotlib.use('agg')\nfrom matplotlib import pyplot as plt\n\n\ndef main():\n    nv = 32         # number of observed variables\n    m = 4           # number of hidden variables\n    nt = 10         # number of time periods\n    train_cnt = 16  # number of training samples for each time period\n    val_cnt = 4     # number of validation samples for each time period\n\n    # Generate some data with a sudden change in the middle.\n    data, ground_truth_sigma = load_modular_sudden_change(nv=nv, m=m, nt=nt, ns=(train_cnt + val_cnt))\n\n    # Split it into train and validation.\n    train_data = [X[:train_cnt] for X in data]\n    val_data = [X[train_cnt:] for X in data]\n\n    # NOTE: the load_modular_sudden_change function above creates data where the time axis\n    # is already divided into time periods. If your data is not divided into time periods\n    # you can use the following procedure to do that:\n    # bucketed_data, index_to_bucket = make_buckets(data, window=train_cnt + val_cnt, stride='full')\n    # where the make_buckets function can be found at tcorex.experiments.data\n\n    # The core method we have is the tcorex.TCorex class.\n    tc = TCorex(nt=nt,\n                nv=nv,\n                n_hidden=m,\n                max_iter=500,\n                device='cpu',  # for GPU set 'cuda',\n                l1=0.3,        # coefficient of temporal regularization term\n                gamma=0.3,     # parameter that controls sample weights\n                verbose=1,     # 0, 1, 2\n                )\n\n    # Fit the parameters of T-CorEx.\n    tc.fit(train_data)\n\n    # We can compute the clusters of observed variables for each time period.\n    t = 8\n    clusters = tc.clusters()\n    print(\"Clusters at time period {}: {}\".format(t, clusters[t]))\n\n    # We can get an estimate of the covariance matrix for each time period.\n    # When normed=True, estimates of the correlation matrices will be returned.\n    covs = tc.get_covariance()\n\n    # We can visualize the covariance matrices.\n    fig, ax = plt.subplots(1, figsize=(5, 5))\n    im = ax.imshow(covs[t])\n    fig.colorbar(im)\n    ax.set_title(\"Estimated covariance matrix\\nat time period {}\".format(t))\n    fig.savefig('covariance-matrix.png')\n\n    # It is usually useful to compute the inverse correlation matrices,\n    # since this matrices can be interpreted as adjacency matrices of\n    # Markov random fields.\n    cors = tc.get_covariance(normed=True)\n    inv_cors = [np.linalg.inv(x) for x in cors]\n\n    # We can visualize the thresholded inverse correlation matrices.\n    fig, ax = plt.subplots(1, figsize=(5, 5))\n    thresholded_inv_cor = np.abs(inv_cors[t]) > 0.05\n    ax.imshow(thresholded_inv_cor)\n    ax.set_title(\"Thresholded inverse correlation\\nmatrix at time period {}\".format(t))\n    fig.savefig('thresholded-inverse-correlation-matrix.png')\n\n    # We can also plot the Frobenius norm of the differences of inverse\n    # correlation matrices of  neighboring time periods. This is helpful\n    # for detecting the sudden change points of the system.\n    diffs = cov_utils.diffs(inv_cors)\n    fig, ax = plt.subplots(1, figsize=(5, 5))\n    ax.plot(diffs)\n    ax.set_xlabel('t')\n    ax.set_ylabel('$||\\Sigma^{-1}_{t+1} - \\Sigma^{-1}_{t}||_2$')\n    ax.set_title(\"Frobenius norms of differences between\\ninverse correlation matrices\")\n    fig.savefig('inv-correlation-difference-norms.png')\n\n    # We can also do grid search on a hyperparameter grid the following way.\n    # NOTE: this can take time!\n    baseline, grid = (baselines.TCorex(tcorex=TCorex, name='T-Corex'), {\n        'nv': nv,\n        'n_hidden': m,\n        'max_iter': 500,\n        'device': 'cpu',\n        'l1': [0.0, 0.03, 0.3, 3.0],\n        'gamma': [1e-6, 0.3, 0.5, 0.8]\n    })\n\n    best_score, best_params, best_covs, best_method, all_results = baseline.select(train_data, val_data, grid)\n    tc = best_method  # this is the model that performed the best on the validation data, you can use it as above\n    base.save(tc, 'best_method.pkl')\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gawseed/T-CorEx",
    "keywords": "",
    "license": "GNU Affero General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gawseed-tcorex",
    "package_url": "https://pypi.org/project/gawseed-tcorex/",
    "platform": null,
    "project_url": "https://pypi.org/project/gawseed-tcorex/",
    "project_urls": {
      "Homepage": "https://github.com/gawseed/T-CorEx"
    },
    "release_url": "https://pypi.org/project/gawseed-tcorex/1.1/",
    "requires_dist": [
      "numpy (>=1.14.2)",
      "scipy (>=1.1.0)",
      "torch (>=0.4.1)"
    ],
    "requires_python": "",
    "summary": "Correlation Explanation Methods",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13107214,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "488ef87b3b6a6df32578845b5bbbafc059eafead9aee30e2bec10c3acf36c60c",
          "md5": "945d8ce2b5677065273af4c8be6733cd",
          "sha256": "8e4cc968b44eae1ccf2047e0a3431e1162b1968cdb67c598d63ba52160c0fa65"
        },
        "downloads": -1,
        "filename": "gawseed_tcorex-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "945d8ce2b5677065273af4c8be6733cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51933,
        "upload_time": "2022-03-07T22:28:18",
        "upload_time_iso_8601": "2022-03-07T22:28:18.432107Z",
        "url": "https://files.pythonhosted.org/packages/48/8e/f87b3b6a6df32578845b5bbbafc059eafead9aee30e2bec10c3acf36c60c/gawseed_tcorex-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e386e452309dd11cc964c713a917c423cddddf9ea33741c434d0fd0a692a7954",
          "md5": "f6836f18692ddd13c370dc5500255836",
          "sha256": "2e5b75f5724a11fdc8c4dc4519d446057d12b46b5847515bc0a347a5db6cc20a"
        },
        "downloads": -1,
        "filename": "gawseed-tcorex-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6836f18692ddd13c370dc5500255836",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43660,
        "upload_time": "2022-03-07T22:28:20",
        "upload_time_iso_8601": "2022-03-07T22:28:20.377051Z",
        "url": "https://files.pythonhosted.org/packages/e3/86/e452309dd11cc964c713a917c423cddddf9ea33741c434d0fd0a692a7954/gawseed-tcorex-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "488ef87b3b6a6df32578845b5bbbafc059eafead9aee30e2bec10c3acf36c60c",
        "md5": "945d8ce2b5677065273af4c8be6733cd",
        "sha256": "8e4cc968b44eae1ccf2047e0a3431e1162b1968cdb67c598d63ba52160c0fa65"
      },
      "downloads": -1,
      "filename": "gawseed_tcorex-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "945d8ce2b5677065273af4c8be6733cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 51933,
      "upload_time": "2022-03-07T22:28:18",
      "upload_time_iso_8601": "2022-03-07T22:28:18.432107Z",
      "url": "https://files.pythonhosted.org/packages/48/8e/f87b3b6a6df32578845b5bbbafc059eafead9aee30e2bec10c3acf36c60c/gawseed_tcorex-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e386e452309dd11cc964c713a917c423cddddf9ea33741c434d0fd0a692a7954",
        "md5": "f6836f18692ddd13c370dc5500255836",
        "sha256": "2e5b75f5724a11fdc8c4dc4519d446057d12b46b5847515bc0a347a5db6cc20a"
      },
      "downloads": -1,
      "filename": "gawseed-tcorex-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f6836f18692ddd13c370dc5500255836",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43660,
      "upload_time": "2022-03-07T22:28:20",
      "upload_time_iso_8601": "2022-03-07T22:28:20.377051Z",
      "url": "https://files.pythonhosted.org/packages/e3/86/e452309dd11cc964c713a917c423cddddf9ea33741c434d0fd0a692a7954/gawseed-tcorex-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}