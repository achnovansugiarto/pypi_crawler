{
  "info": {
    "author": "Rozum Robotics",
    "author_email": "dev@rozum.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Python-API\nThis folder contains `Python 3` wrapper for the `C` library. \nImplementation is based on the `ctypes` module.\n\n## Prerequisites\n1. Operating systems (OS): Linux, macOS, Windows.<br>\n2. Python 3.5 or a later version.<br>\n   To install Python, proceed as below, depending on your OS:<br>\n   **Windows**: Navigate to [Python](https://www.python.org/downloads/windows/). Download and complete the setup process.<br>\n   **Important!** At the installation setup screen, make sure to check **Add Python v.Х to PATH** (where **v.Х.** is the downloaded Python version).\n   \n   **Linux**: To install Python and a corresponing pip package, run one of the following commands in the console.\n   In case you have a Linux distribution other than specified below, proceed in the usual order of running the installation pocedure in your system.<br> \n   **Ubuntu/Debian**: Run the command `sudo apt install python3 python3-pip`.<br>\n   **Fedora starting from version 22**: Run the command `sudo dnf install python3 python3-pip`.<br>\n   **RedHat and Fedora before version 22**: Run the command `sudo yum install python3 python3-pip`.<br>\n3. `pip 3` package<br>\n   **Important!** The Python installation package for Windows already contains a `pip` package. For Ubuntu/Debian and other Linux systems, see Step 2 above.\n4. On MacOS and Linux, make sure to install the `gcc` compiler and `make`.\n   \n## Installation Windows OS\n\n**Note:** If your PC runs Windows 8 or earlier versions of the operating system, download and install a driver for the CAN-USB dongle from the [web page](https://www.st.com/en/development-tools/stsw-stm32102.html).\n\nTo install the API library on a PC running under Windows OS, run the pip install command as described below:\n\n- To get the latest version, use the following command:\n  `pip install rdrive -i https://pip.rozum.com/simple`\n\n- To install a specific version:\n  `pip install rdrive==v1.v2.v3 -i https://pip.rozum.com/simple`\n   \nwhere **v1**, **v2**, and **v3** (e.g., rdrive==1.0.31) are version numbers.\n\nNow, the API library for Windows is installed, and you can proceed to working with the cmd console (for further steps, refer to **Getting started Windows OS**).\n\n## Installation Linux\n\nTo install the API library on a PC running under Linux OS, run the pip install command as described below:\n\n- To get the latest version, use the following command:\n  `pip3 install rdrive -i https://pip.rozum.com/simple`\n\n- To install a specific version: \n  `pip3 install rdrive==v1.v2.v3 -i https://pip.rozum.com/simple`\nwhere **v1**, **v2**, and **v3** (e.g., rdrive==1.0.31) are version numbers.\n\n## Getting started Windows OS\n\nTo run any of the program examples with Python code on Windows OS, complete the steps below.\n\n**Note:** Before running a tutorial, RDrive servo should be wired to a power supply and the CAN-USB dongle.\nas described in the User Manual or the Quick-Start Guide available for downloading at the [company website] (https://rozum.com/servomotors/#rdrive-documentation).\n\n1. Open the Command Line Interface via the Start menu.\n\n2. Find out the **_CAN_** interface name. To do this, complete the following steps:\n   - Open the start **Menu** - **System Settings** - **Devices** - **Bluetooth and other devices**.<br>\n   - On the **Other devices** list find a serial USB device with a COM port. The COM port number is the CAN ID interface you need—e.g., **COM3**.\n   \n3. Find out the **CAN ID of the connected servo motor**. To do this, complete the following steps:\n\n   - In the command console, run a tutorial from the `examples` folder by executing the following command with a specified CAN Interface ID and CAN Servo ID.\n   - **Note:** To run the examples you should clone the repository on your local machine.\n   \n     `python userapi\\python\\examples\\read_servo_max_velocity.py --interface COM3 --servo_1_id 32`\n\n   where **read_servo_max_velocity.py** is the tutorial name;<br>\n   **interface COM3** is the parameter specifying the CAN Interface ID;<br>\n   **servo_1_id 37** is the parameter specifying an arbitrary CAN ID for the connected servo.\n   \n   - In the command output, go to the INFO lines (see the example below). Look for IDs within the range between 32 to 37 — default servo IDs (37 in the example below).\n   \n   **Example:**<br/>\n`INFO:\tID: 50 Device is in operational mode`<br/>\n`INFO:\tID: 37 Device is in pre-operational mode`   \n \n 4. Now, you can run any of the tutorials from the `examples` folder to move your RDrive servo or read parameters from it.\n \n To do this, run the following command in the cmd console:\n \n `python userapi\\python\\examples\\read_servo_max_velocity.py --interface COM3 --servo_1_id 37`\n \n   where **read_servo_max_velocity.py** is the tutorial name (replace the name from the current example with any other tutorial name as needed);<br>\n   **interface COM3** is the parameter specifying the CAN Interface ID (the one we got at Step 2);<br>\n   **servo_1_id 37** is the parameter specifying an arbitrary CAN ID for the connected servo (the one we got at Step 3).\n\nIf the command is successfully executed, the connected servo will behave as commanded—return parameters or move.\n\n**Note:** Some of the tutorials may require specifing some other parameters in addition to the CAN Interface ID and a CAN Servo ID. \n \n## Getting started Linux OS\n\nTo run any of the program examples with Python code on Linux OS, complete the steps below.\n\n1. Find out the **_CAN_** interface name. To do this, open the console and type in the following command: `ls /dev/serial/by-id/`.<br>\n   In the output, look for something like: `usb-Rozum_Robotics_USB-CAN_Interface_301-if00`. It is the CAN interface name you need.\n\n**Note:** On MacOS, you can find out the CAN Interface name by executing the `ls /dev/ | grep cu.usb` command in the console. The output will contain something like: `/dev/cu.usbmodem301`\n   \n2. Find out the **CAN ID of the connected servo motor**. To do this, complete the following steps:\n\n - In the console, run a tutorial from the `examples` folder by executing the following command with a specified CAN Interface ID and a CAN Servo ID.\n - **Note:** To run the examples you should clone the repository on your local machine.\n   \n     `python3 userapi/python/examples/read_servo_max_velocity.py --interface /dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00 --servo_1_id 32`\n\n   where **read_servo_max_velocity.py** is the tutorial name;\n   **interface /dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00** is the parameter specifying the CAN Interface ID;<br>\n   **servo_1_id 37** is the parameter specifying an arbitrary CAN ID for the connected servo.\n   \n - In the command output, go to the INFO lines (see the example below). Look for IDs within the range between 32 to 37 — default servo IDs (37 in the example below).\n  \n   **Example:**<br/>\n   `INFO:   ID: 50 Device is in operational mode`<br/>\n   `INFO:\tID: 37 Device is in pre-operational mode`\n       \n3. Now, you can run any of the tutorials from the `examples` folder to move your RDrive servo or read parameters from it.\n\n   To do this, run the following command in the console:\n \n   `python3 userapi/python/examples/read_servo_max_velocity.py --interface /dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00 --servo_1_id 37`\n \n   where **read_servo_max_velocity.py** is the tutorial name (replace the name from the current example with any other tutorial name as needed);<br> \n   **interface /dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00** is the parameter specifying the CAN Interface ID (the one we got at Step 1);<br>\n   **servo_1_id 37** is the parameter specifying an arbitrary CAN ID for the connected servo (the one we got at Step 2).\n\nIf the command is successfully executed, the connected servo will behave as commanded—return parameters or move.\n\n**Note:** Some of the tutorials may require specifing some other parameters in addition to the CAN Interface ID and a CAN Servo ID.\n\n## Python script examples \n\nThe two subsections below contain examples of Python scripts based on available Python API commands.\n\n### Basic usage\n```python\n\nimport rdrive as rr\n\napi = rr.ServoApi() # api initialization and library loading\ninterface = api.init_interface(\"/dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00\") # interface initialization\n\n# servo initialization\nservo = interface.init_servo(64)\n# toggle operational state on servo\nservo.set_state_operational()\n\n# go to specific position(degrees)\nservo.set_position(100.)\n\n# set specific velocity(degrees/sec)\nservo.set_velocity(204.5)\n\n\n```\n\n### Advanced usage\nBelow is the usual sequence of working with servos. For detailed instructions, refer to `examples`.\n```python\n# importing modules\nimport rdrive as rr\n\n# api initialization and library loading\napi = rr.ServoApi()\n\n# interface initialization\ninterface = api.init_interface(\"/dev/serial/by-id/usb-Rozum_Robotics_USB-CAN_Interface_301-if00\")\n\n# servo initialization\nservo = interface.init_servo(64)\n# toggle operational state on servo\nservo.set_state_operational()\n\n# servo usage\n# preparing specific realtime parameters for extraction\nservo.param_cache_setup_entry(rr.APP_PARAM_CURRENT_INPUT, True)\nservo.param_cache_setup_entry(rr.APP_PARAM_VOLTAGE_INPUT, True)\n\n# set motor trajectory (adding motion points - position(deg), velocity(deg/sec), time(ms))\nservo.add_motion_point(100., 0., 6000)\nservo.add_motion_point(-100., 0., 6000)\nservo.add_motion_point(0, 0, 6000)\n\n# start motion with delay(ms)\ninterface.start_motion(0)\n\n# reading realtime parameters from cache\nservo.param_cache_update()\ncurrent_input = servo.read_cached_parameter(rr.APP_PARAM_CURRENT_INPUT)\nvoltage_input = servo.read_cached_parameter(rr.APP_PARAM_VOLTAGE_INPUT)\nprint(\"current_input = {}, voltage_input = {}\".format(current_input, voltage_input)) # printing parameters\n\n# direct reading of realtime parameters\nvelocity_rotor = servo.read_parameter(rr.APP_PARAM_VELOCITY_ROTOR)\nprint(\"velocity_rotor = {}\".format(velocity_rotor))\n\n# awaiting motion\napi.sleep_ms(20000)\n\n# simple motion control\nservo.set_current(5)\napi.sleep_ms(1000)\nservo.set_current(0)\n\n# reading errors\nnum, arr = servo.read_error_status(100)\nfor i in range(num):\n    api.describe_emcy_bit(arr[i])\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://rozum.com",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rdrive",
    "package_url": "https://pypi.org/project/rdrive/",
    "platform": "",
    "project_url": "https://pypi.org/project/rdrive/",
    "project_urls": {
      "Homepage": "https://rozum.com"
    },
    "release_url": "https://pypi.org/project/rdrive/1.0.40/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python API for RDrive servomotors",
    "version": "1.0.40",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7748352,
  "releases": {
    "1.0.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e03eb5bf16b066f02bae69e4800aa83618f5b7ea90ebeb9716a6b12f1f21cf3",
          "md5": "b95e836cfc3b4ea041342f408f97d99c",
          "sha256": "f38d84e8065712cd2e7a916ab4f2e5375c5b8253bfef8fc80f5c8c0f53df08eb"
        },
        "downloads": -1,
        "filename": "rdrive-1.0.40.tar.gz",
        "has_sig": false,
        "md5_digest": "b95e836cfc3b4ea041342f408f97d99c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 325736,
        "upload_time": "2020-07-16T08:58:26",
        "upload_time_iso_8601": "2020-07-16T08:58:26.131245Z",
        "url": "https://files.pythonhosted.org/packages/4e/03/eb5bf16b066f02bae69e4800aa83618f5b7ea90ebeb9716a6b12f1f21cf3/rdrive-1.0.40.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e03eb5bf16b066f02bae69e4800aa83618f5b7ea90ebeb9716a6b12f1f21cf3",
        "md5": "b95e836cfc3b4ea041342f408f97d99c",
        "sha256": "f38d84e8065712cd2e7a916ab4f2e5375c5b8253bfef8fc80f5c8c0f53df08eb"
      },
      "downloads": -1,
      "filename": "rdrive-1.0.40.tar.gz",
      "has_sig": false,
      "md5_digest": "b95e836cfc3b4ea041342f408f97d99c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 325736,
      "upload_time": "2020-07-16T08:58:26",
      "upload_time_iso_8601": "2020-07-16T08:58:26.131245Z",
      "url": "https://files.pythonhosted.org/packages/4e/03/eb5bf16b066f02bae69e4800aa83618f5b7ea90ebeb9716a6b12f1f21cf3/rdrive-1.0.40.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}