{
  "info": {
    "author": "Laurent Tupin",
    "author_email": "laurent.tupinn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Free For Home Use",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pynut - Laurent Tupin\r\n\r\nIt provides various functions to simplify the users life. \r\n\r\n\r\n## Installation\r\n\r\nYou can install the package from [PyPI](https://pypi.org/project/pynut-Files/):\r\n\r\n    python -m pip install pynut-Files\r\n\r\nThe package is supported on Python 3.7 and above.\r\n\r\n\r\n\r\n## How to use\r\n\r\n\r\nYou can call a function as this example:\r\n\r\n    $ ----------------------------------------------------\r\n    >>> from pyNutTools import nutDate\r\n    >>> nutDate.today()\r\n\r\n\r\n\r\nThis is the libraries I am using with the package\r\n\r\n    $ ----------------------------------------------------\r\n    >>> openpyxl==3.0.5\r\n    >>> pandas==1.1.3\r\n    >>> psutil==5.9.0\r\n    >>> pywin32==303\r\n    >>> xlrd==1.2.0\r\n    >>> XlsxWriter==1.3.5\r\n    >>> xlwings==0.20.8\r\n\r\n\r\n\r\n## Documentation\r\n    \r\nTemporary documentation for nutFiles :\r\n\r\n    from pyNutFiles import nutFiles as fl\r\n    \r\n    1. Functions\r\n    \r\n    fileName = fl.fStr_myFileName(__file__)\r\n    ''' Get the Python File Name '''\r\n    \r\n    myPath = fl.fStr_myPath(__file__)\r\n    ''' Get the path of the Python File'''\r\n    \r\n    EnvUserName = fl.fStr_GetEnvUserName()\r\n    ''' Get the Environment of the USERPROFILE'''\r\n    \r\n    UserEmail = fl.fStr_GetUserEmail(str_emailExtension = '@corporation.com')\r\n    ''' Get the Corporate Email of the user '''\r\n    \r\n    folder = fl.fStr_GetFolderFromPath(myPath)\r\n    ''' Get the Folder from a file path '''\r\n    \r\n    FileName = fl.fStr_GetFileFromPath(myPath)\r\n    ''' Get the file Name from a file path '''\r\n    \r\n    l_files =   fl.fL_listFile(myFolder)\r\n    \"\"\" Listing all files and folder in a folder using the library glob \"\"\"\r\n    \r\n    l_files =   fl.fList_FileInDir(myFolder)\r\n    \"\"\" Listing all files and folder in a folder using the library os \"\"\"    \r\n    \r\n    if not fl.fBl_FileExist(_path):\r\n    \"\"\" Test if a file exist. Giving a path, return a Boolean \"\"\"\r\n    \r\n    if not fl.fBl_FolderExist(_path):\r\n    \"\"\" Test if a folder exist. Giving a folder path, return a Boolean \"\"\"\r\n    \r\n    if not fl.fBl_FolderExist_timeout(_path):\r\n    \"\"\" Test if a folder exist. Giving a folder path, return a Boolean\r\n        The function is decorated not to search for more than 10 secondes \"\"\"\r\n    \r\n    fl.TrimTxtFile_comma(str_path, bl_right = True)\r\n    \"\"\" This function will Trim the space in a text file\r\n        We can decide to Trim only the space on the left or right \r\n        By default, the Trim is both side and the sep is comma\"\"\"\r\n    \r\n    fl.Act_Rename(str_newFolder, str_oldName, str_newName, False)\r\n    \"\"\" Renaming a file and if it failed using the lib os, it will MOVE the file with shutil \"\"\"\r\n    \r\n    newName = fl.fStr_TransformFilName_fromXXX_forGlobFunction(fileName, bl_exactNumberX = False)\r\n    \"\"\" Change a string with unknown characters (XXXX) into sth understandable by the glob library\r\n        'file_{*}_1.zip' ==> 'file_*_1.zip'     ( bl_exactNumberX = False)\r\n        'file_{XXXX}_1.zip' ==> 'file_????.zip' ( bl_exactNumberX = True)\r\n        'file_{XXXX}.zip' ==> 'file_*.zip'      ( bl_exactNumberX = False)\r\n        \"\"\"\r\n    \r\n    L_filIn =   fl.fL_GetFileListInFolder(myFolder, fileName_X, bl_searchOnly, bl_exactNb)\r\n    \"\"\" Return the list of files in a folder that match the pattern given of the fileName \r\n        with {*} or {XXX} within \"\"\"\r\n    \r\n    fileName = fl.fStr_GetMostRecentFile_InFolder(folder, fileName_X)\r\n    \"\"\" Return the list of files in a folder that match the pattern given of the fileName\r\n        with {*} or {XXX} within\r\n        AND take the most recent one\"\"\"\r\n    \r\n    l_files_X = fl.fL_GetFileList_withinModel(l_files, str_fileName)\r\n    \"\"\" If you have in memory a list of File Name\r\n        you want to return the list of those who match the pattern given of the fileName\r\n        with {*} or {XXX} within\"\"\"\r\n    \r\n    dte_modif = fl.fDte_GetModificationDate(myPath)\r\n    \"\"\" Function Get the Modification Date of a file\r\n        Useful for Update of App \"\"\"\r\n    \r\n    l_pathReturn = fl.fL_KeepFiles_wTimeLimit(l_files, dte_after = 100)\r\n    \"\"\" Filter a list of file Path to return the files that has been updated \r\n        after X days in the past and before Y days in the past \r\n        dte_after and dte_before can be date or integer of days in the past\"\"\"\r\n    \r\n    bl_creation = fl.fBl_createDir(myFolder)\r\n    \"\"\" Create a Directory\r\n        Return False if Directory exists, True if the folder has been created \"\"\"\r\n    \r\n    o_file = fl.fO_readfile_parquet(str_pathFile, **d_options)\r\n    \"\"\" fO_readfile_parquet reads parquet - require the libraries : pyarrow / fastparquet\r\n        options: use_threads, engine='fastparquet', ... \"\"\"\r\n    \r\n    str_sqlRequest = fl.fStr_ReadFile_sql(path)\r\n    \"\"\" fStr_ReadFile_sql Opens and read the file as a single buffer\"\"\"\r\n    \r\n    df_data = fl.fDf_readExcelWithPassword(path, SheetName, ExcelPwd, 'A1:M400')\r\n    \"\"\" You can read an Excel file protected with password - Requires to open the Excel App\r\n        Also, for performance issue (and in order not to open Excel App again)\r\n        it will create a csv copy named: fileName_sheetName.csv \r\n        Once the csv created, the same function will only use |pd.read_csv()|\r\n        Return a Dataframe\"\"\"\r\n    \r\n    d_data = fl.fDic_readExcelWithPassword_sevSh(path, ExcelPwd, d_shName_areaToLoad)\r\n    \"\"\" You can read an Excel file protected with password - Requires to open the Excel App\r\n        Also, for performance issue (and in order not to open Excel App again)\r\n        it will create 1 CSV per sheet in the spredsheet named: fileName_sheetName.csv\r\n        Once all the csv created, the same function will only use |pd.read_csv()|\r\n        Return a sictionary of Dataframe, key will be the SheetNames\r\n        \"\"\"\r\n    \r\n    df_data = pd_read_excel(str_path, str_SheetName, bl_header)\r\n    \"\"\" To be able to read xlsx files with the function: |pd.read_excel|\r\n        You need to have a previous xlrd version (xlrd==1.2.0)\r\n        And replace the file xlsx.py (/Lib/site-packages/xlrd) by the one in this library !!!\r\n        If it fails the engine openxyl will be used\r\n        You can pass a sheet_name and a header as input\r\n        \"\"\"\r\n    \r\n    fl.fStr_createExcel_1Sh(path, '', df_PCF, str_SheetName = '', bl_header = False)\r\n    \"\"\" Create a single sheet Excel file\"\"\"\r\n    \r\n    fl.fStr_createExcel_SevSh(path, '', l_dfData, l_SheetName, bl_header = True)\r\n    \"\"\" Create a several sheets Excel file, Input is a list of Dataframe\r\n        Will use pd.ExcelWriter and will no return any error depending of the version of xlrd\r\n        if |options = d_options| wont work, |engine_kwargs = {'options' : d_options}| will be tried as well\r\n        \"\"\"\r\n    \r\n    fl.fStr_createExcel_SevSh_celByCel(path, '', l_dfData, l_SheetName)\r\n    \"\"\" Create a several sheets Excel file\r\n        Input is a list of Dataframe and list of Sheet Names\r\n        Will use xlsxwriter and fill the Excel Cell by Cell\r\n        Performance may be pretty low\r\n        Preferable to use the function : fStr_createExcel_SevSh\r\n        \"\"\"\r\n    \r\n    fl.fStr_fillExcel_InsertNewSheet(path, '', df_data, str_SheetName)\r\n    \"\"\" Take an existing  Excel file and insert a new sheet\r\n        Input is a list of Dataframe - Will use pd.ExcelWriter \r\n        INSERT SHEET: 1 file out - 1 Dataframe - 1 Sheet \"\"\"\r\n    \r\n    fl.fStr_fillXls_df_xlWgs_sevSh(folder, FileName, l_dfData, l_SheetName = l_shName)\r\n    \"\"\" Take an existing Excel file and an existing sheet and fill it with new data\r\n        Input is a Dataframe - Will use c_xlApp_xlwings class\r\n        1 file out - 1 Dataframe - 1 Sheet\"\"\"\r\n    \r\n    str_path = fl.fStr_fillXls_df_xlWgs_sevSh(folder, FileName, l_dfData, l_SheetName = l_shName)\r\n    \"\"\" Take an existing Excel file and several existing sheet and fill it with new data\r\n        Input is a list of Dataframe, SheetNames - Will use c_win32_xlApp class\r\n        1 fileout - n Dataframe - n Sheet\"\"\"\r\n    \r\n    Act_win32_SaveAsCleanFile(path, pathNew)\r\n    \"\"\" Sometimes an Excel file is an old version and might be corrupted\r\n        By Passing your file through this function, Excel App will be open, SaveAs and Close \r\n        so the new File will be useable by Python after\"\"\"\r\n    \r\n    df_donnee = fl.fDf_convertToXlsx(path, SheetName, bl_header = None)\r\n    \"\"\" Will use Act_win32_SaveAsCleanFile to make sure the file is not corrupted\r\n        and SaveAs XLSX instead of XLS \r\n        Read it and return the dataframe \"\"\"\r\n        \r\n    df_donnee = fl.fDf_overwriteXlsx(path, SheetName, bl_header = None)\r\n    \"\"\" Will use Act_win32_SaveAsCleanFile to save a non-corrupted XLSX file \r\n        Read it and return the dataframe \"\"\"\r\n    \r\n    fl.Act_convertToXls_fromXlsx(path)\r\n    \"\"\" Will use Act_win32_SaveAsCleanFile to make sure the file is not corrupted\r\n        and SaveAs XLS instead of XLSX \"\"\"\r\n    \r\n    fl.Act_win32OConvertXls_pdf(path)\r\n    \"\"\" Will open an Excel file and convert it into PDF\"\"\"\r\n    \r\n    bl_tooOld = fl.fBl_fileTooOld(path, int_dayHisto = 10)\r\n    \"\"\" Return a boolean to know if a file is older than N days in the past \"\"\"\r\n    \r\n    fl.del_fichier_ifOldEnought(path,'', int_dayToKeep = 10)\r\n    \"\"\" Check is a file is older than N days in the past \r\n        And if so, delete it \r\n        If the folder where the file is supposed to be does not exist, the function will create it\"\"\"\r\n    \r\n    fl.ZipExtractFile(ZipPath, pathDest, FileName, bl_extractAll=False, str_zipPassword='')\r\n    \"\"\" Will read a ZIP file and extract its content in a destination folder\r\n        It can take password\r\n        It can extract all or only a file\"\"\"\r\n    \r\n    fl.Act_StyleIntoExcel(path, format, sheetName)\r\n    \"\"\" Take an Excel Spreadsheet and a sheet and apply a format to it\r\n        str_format is a dictionary within a string,\r\n        the dictionary will be build by the fucntion eval\r\n        Example of format:\r\n            \"{'A1:M500':{'font':{'name':'Calibri', 'size':9}},\r\n            'B3:B5':{'font':{'name':'Calibri', 'size':10, 'bold':True,'color':styl.colors.WHITE},\r\n                    'alignment':{'horizontal':'right'},\r\n                    'fill':{'patternType':'solid', 'fill_type':'solid', 'fgColor': 'F2F2F2'}},\r\n            'Column_size':{'A':50,'B':35,'C':10,'D':10,'E':15,'F':15,'G':18,'H':10},\r\n            'Table_bord':{'A3:A11':'normBlack', 'B3:B11':'normBlack'},\r\n            'Table_bord_full':{'A1:B1':'normBlack'},\r\n            'Table_bord_EndDown_full':{'A13':'normBlack'},\r\n            'num_format':{'B6:B6':'#,##0.0000', 'B7:B8':'#,##0'},\r\n            'num_format_col':{'G13':'#,##0.00',  'H13':'0.00%'}\r\n            }\"\r\n        \"\"\"\r\n        \r\n    Act_KillExcel()\r\n    \"\"\" This function kills all session of Excel\r\n        Including the 'ghost' session you would kill from the Task Manager \"\"\"\r\n    \r\n    \r\n    2. Class\r\n    \r\n    inst_xlWings = c_xlApp_xlwings()\r\n    inst_xlWings.FindXlApp(bl_visible = True, bl_screen_updating = False, bl_display_alerts = False)\r\n    inst_xlWings.OpenWorkbook(path)\r\n    inst_xlWings.DefineWorksheet(SheetName, i + 1)\r\n    inst_xlWings.InsertDf_inRange(df_data)\r\n    inst_xlWings.close_Book(bl_saveBeforeClose = True)\r\n    \"\"\" The class allow you to manage excel with the library xlwings which might work better than win32\r\n        Open the Excel Office App, Close, Save, define / rename / create sheet, fill an area\r\n        The class is decorated to be a singleton so we always use the same instance of Excel\r\n        DOC: https://docs.xlwings.org/en/stable/api.html\r\n        \"\"\"\r\n    \r\n    inst_xlApp = fl.c_win32_xlApp()\r\n    inst_xlApp.FindXlApp(bl_visible = True)\r\n    inst_xlApp.OpenWorkbook(str_path)\r\n    inst_xlApp.xlApp.DisplayAlerts = False\r\n    inst_xlApp.ConvertToPdf()\r\n    inst_xlApp.CloseWorkbook(bl_saveBeforeClose = True)\r\n    \"\"\" The class allow you to manage excel with the library win32com.client\r\n        Open the Excel Office App, Close, Save, define / rename / create sheet, fill an area\r\n        The class is decorated to be a singleton so we always use the same instance of Excel\r\n        \"\"\"\r\n    \r\n    \r\n***END***\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Laurent-Tupin/pynut_Files",
    "keywords": "",
    "license": "Copyright 2022-2035",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynut-Files",
    "package_url": "https://pypi.org/project/pynut-Files/",
    "platform": null,
    "project_url": "https://pypi.org/project/pynut-Files/",
    "project_urls": {
      "Homepage": "https://github.com/Laurent-Tupin/pynut_Files"
    },
    "release_url": "https://pypi.org/project/pynut-Files/3.1.1/",
    "requires_dist": [
      "pynut-tools (==3.1.1)",
      "openpyxl (==3.1.0)",
      "psutil (==5.9.4)",
      "pywin32 (==305)",
      "xlrd (==2.0.1)",
      "XlsxWriter (==1.4.5)",
      "xlwings (==0.29.1)"
    ],
    "requires_python": "",
    "summary": "Function easing life :)",
    "version": "3.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16744756,
  "releases": {
    "2.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "331f5a31191db7e24492fc8082aca03041191c42199aef7f80c42d630bb3f6ed",
          "md5": "852f5338e3920dcfeaca2f185fafb60b",
          "sha256": "a8c70e246009a2771c8863b697d68e2e90cf0a50176bd6b6da47ec2b256b3db1"
        },
        "downloads": -1,
        "filename": "pynut_Files-2.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "852f5338e3920dcfeaca2f185fafb60b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40592,
        "upload_time": "2022-07-13T06:16:00",
        "upload_time_iso_8601": "2022-07-13T06:16:00.777063Z",
        "url": "https://files.pythonhosted.org/packages/33/1f/5a31191db7e24492fc8082aca03041191c42199aef7f80c42d630bb3f6ed/pynut_Files-2.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ebd92cefccace84ea9c2d481ef46f56122dac4959b2a6e7c2e0d8443f3a39b",
          "md5": "4e6c3ac74cd45e6e5604238cb2bdc2c9",
          "sha256": "82be10d64a78f5f8b1e7998a54e78d49c5691e6ab4e80d7f840cc39c64aec920"
        },
        "downloads": -1,
        "filename": "pynut-Files-2.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4e6c3ac74cd45e6e5604238cb2bdc2c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44712,
        "upload_time": "2022-07-13T06:16:03",
        "upload_time_iso_8601": "2022-07-13T06:16:03.157987Z",
        "url": "https://files.pythonhosted.org/packages/66/eb/d92cefccace84ea9c2d481ef46f56122dac4959b2a6e7c2e0d8443f3a39b/pynut-Files-2.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cebbe33781ef318af2cf037b824cfdac0009de03d8f1f7fd445b14581ac5be3",
          "md5": "d502ef9ddb56323cfb0ef217651cbd39",
          "sha256": "5db5d294f1ce36b5f87c043b4858b95108a49c9c13680427eba659106ff6d3f2"
        },
        "downloads": -1,
        "filename": "pynut_Files-2.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d502ef9ddb56323cfb0ef217651cbd39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40592,
        "upload_time": "2022-07-13T08:36:39",
        "upload_time_iso_8601": "2022-07-13T08:36:39.145134Z",
        "url": "https://files.pythonhosted.org/packages/3c/eb/be33781ef318af2cf037b824cfdac0009de03d8f1f7fd445b14581ac5be3/pynut_Files-2.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51422d72d6fa08fadae8ffef1a0cb49fe648e9be2ad7797f2acc36577e6985b0",
          "md5": "dba1f8e5731a73630e3093888a76d494",
          "sha256": "b0818f6ad8ed1872b6aa34cf597eeb0b11f44f1395dcbb28eb045f58d6b3c53a"
        },
        "downloads": -1,
        "filename": "pynut-Files-2.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "dba1f8e5731a73630e3093888a76d494",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44765,
        "upload_time": "2022-07-13T08:36:41",
        "upload_time_iso_8601": "2022-07-13T08:36:41.293235Z",
        "url": "https://files.pythonhosted.org/packages/51/42/2d72d6fa08fadae8ffef1a0cb49fe648e9be2ad7797f2acc36577e6985b0/pynut-Files-2.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5ecf551750e1d0350f30feeaa2d27c481ecaafcda6d8f0e37c17b4770333548",
          "md5": "34ca32cf057a24bec70976026f47a357",
          "sha256": "cb14ce6b1eb4ba14c2353c179feec4236144019fe7b75d5a97dcfbb1981ff214"
        },
        "downloads": -1,
        "filename": "pynut_Files-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34ca32cf057a24bec70976026f47a357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40726,
        "upload_time": "2022-12-05T08:51:50",
        "upload_time_iso_8601": "2022-12-05T08:51:50.627933Z",
        "url": "https://files.pythonhosted.org/packages/b5/ec/f551750e1d0350f30feeaa2d27c481ecaafcda6d8f0e37c17b4770333548/pynut_Files-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15a646fa30d86e05c3671e2a9231e4ecd7752eda929f5c009275643e410638e9",
          "md5": "6695c2efc34def4482f0db3c086e84a2",
          "sha256": "c9544715f05c74f0802c0e5a408d7d39c6a0b3e8206bb9d3562a3fb95c486760"
        },
        "downloads": -1,
        "filename": "pynut-Files-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6695c2efc34def4482f0db3c086e84a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44988,
        "upload_time": "2022-12-05T08:51:52",
        "upload_time_iso_8601": "2022-12-05T08:51:52.289409Z",
        "url": "https://files.pythonhosted.org/packages/15/a6/46fa30d86e05c3671e2a9231e4ecd7752eda929f5c009275643e410638e9/pynut-Files-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c03b7c4d72c4c4b430708045ef985ac2b1819b2cd8c6c40fcd40e22dd28df6c",
          "md5": "6e8fa6685a8531c52e2b478a7549fe60",
          "sha256": "781a26270da168a0e2de08233c5a613a81c23c3781f4dcb84542bbb7773719dc"
        },
        "downloads": -1,
        "filename": "pynut_Files-2.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e8fa6685a8531c52e2b478a7549fe60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41578,
        "upload_time": "2023-01-04T09:19:26",
        "upload_time_iso_8601": "2023-01-04T09:19:26.509591Z",
        "url": "https://files.pythonhosted.org/packages/7c/03/b7c4d72c4c4b430708045ef985ac2b1819b2cd8c6c40fcd40e22dd28df6c/pynut_Files-2.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "921e8498e743f615320ebca3f9dfd527fc5e0664cb8beac7c4ff6702a11eced9",
          "md5": "3d93a29944b652df2c132d035f4b5e56",
          "sha256": "7c5b20565ac94a47b10c20ca87848159267d524c5391b80e9985384d6cef09b1"
        },
        "downloads": -1,
        "filename": "pynut-Files-2.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3d93a29944b652df2c132d035f4b5e56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46599,
        "upload_time": "2023-01-04T09:19:28",
        "upload_time_iso_8601": "2023-01-04T09:19:28.483008Z",
        "url": "https://files.pythonhosted.org/packages/92/1e/8498e743f615320ebca3f9dfd527fc5e0664cb8beac7c4ff6702a11eced9/pynut-Files-2.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a74d5d74b6981c606a6f8b7ba5ae74926852d81288af3f8ec804b8692a5e444f",
          "md5": "0f1dd54d794f3e0e11466e9b4cbc3c4e",
          "sha256": "70752250ae8f847a11c95da19c71778a6eb7331826271fb6a024a4d0ab17513e"
        },
        "downloads": -1,
        "filename": "pynut_Files-3.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f1dd54d794f3e0e11466e9b4cbc3c4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41584,
        "upload_time": "2023-02-08T10:38:11",
        "upload_time_iso_8601": "2023-02-08T10:38:11.957198Z",
        "url": "https://files.pythonhosted.org/packages/a7/4d/5d74b6981c606a6f8b7ba5ae74926852d81288af3f8ec804b8692a5e444f/pynut_Files-3.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6d8011e440c225d983a7ddadc18b5aced3d20ac6c8c770d1b91935cdd57e1e3",
          "md5": "fd2521cbd5c4904315887e89a84ebfde",
          "sha256": "fa61fd0df5b71718475c2ef8ccbe63a299d9792f22e48f1f6bdef1aa460c7805"
        },
        "downloads": -1,
        "filename": "pynut-Files-3.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd2521cbd5c4904315887e89a84ebfde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46595,
        "upload_time": "2023-02-08T10:38:13",
        "upload_time_iso_8601": "2023-02-08T10:38:13.923139Z",
        "url": "https://files.pythonhosted.org/packages/b6/d8/011e440c225d983a7ddadc18b5aced3d20ac6c8c770d1b91935cdd57e1e3/pynut-Files-3.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a74d5d74b6981c606a6f8b7ba5ae74926852d81288af3f8ec804b8692a5e444f",
        "md5": "0f1dd54d794f3e0e11466e9b4cbc3c4e",
        "sha256": "70752250ae8f847a11c95da19c71778a6eb7331826271fb6a024a4d0ab17513e"
      },
      "downloads": -1,
      "filename": "pynut_Files-3.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0f1dd54d794f3e0e11466e9b4cbc3c4e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41584,
      "upload_time": "2023-02-08T10:38:11",
      "upload_time_iso_8601": "2023-02-08T10:38:11.957198Z",
      "url": "https://files.pythonhosted.org/packages/a7/4d/5d74b6981c606a6f8b7ba5ae74926852d81288af3f8ec804b8692a5e444f/pynut_Files-3.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6d8011e440c225d983a7ddadc18b5aced3d20ac6c8c770d1b91935cdd57e1e3",
        "md5": "fd2521cbd5c4904315887e89a84ebfde",
        "sha256": "fa61fd0df5b71718475c2ef8ccbe63a299d9792f22e48f1f6bdef1aa460c7805"
      },
      "downloads": -1,
      "filename": "pynut-Files-3.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fd2521cbd5c4904315887e89a84ebfde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46595,
      "upload_time": "2023-02-08T10:38:13",
      "upload_time_iso_8601": "2023-02-08T10:38:13.923139Z",
      "url": "https://files.pythonhosted.org/packages/b6/d8/011e440c225d983a7ddadc18b5aced3d20ac6c8c770d1b91935cdd57e1e3/pynut-Files-3.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}