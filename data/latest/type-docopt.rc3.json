{
  "info": {
    "author": "Yongrae Jo",
    "author_email": "dreamgonfly@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "# Type-Docopt: Pythonic argument parser, with type description\n\n[![image](https://img.shields.io/pypi/v/type-docopt.svg)](https://pypi.python.org/pypi/type-docopt)\n\n**type-docopt** helps you create beautiful command-line interfaces with type conversion:\n\n```python\n\"\"\"Quick Example.\n\nUsage:\n  example.py transport <host> <port> [--timeout=<seconds>] [--protocol=<protocol>]\n  example.py serial <port> [--baud=<n>] [--timeout=<seconds>]\n  example.py (-h | --help | --version)\n\nOptions:\n  -h, --help  Show this screen and exit.\n  --baud=<n>  Baudrate [default: 9600] [type: int]\n  --timeout=<seconds>  Timeout seconds [type: float]\n  --protocol=<protocol>  Transport protocol [choices: tcp udp]\n\"\"\"\nfrom type_docopt import docopt\n\nif __name__ == '__main__':\n    arguments = docopt(__doc__)\n    print(arguments)\n```\n\n```bash\n$ python example.py transport 1.2.3.4 80 --timeout 0.5 --protocol tcp\n\n{'--baud': 9600,\n '--help': False,\n '--protocol': 'tcp',\n '--timeout': 0.5,\n '--version': False,\n '<host>': '1.2.3.4',\n '<port>': '80',\n 'serial': False,\n 'transport': True}\n```\n\nBeat that! The option parser is generated based on the docstring above\nthat is passed to `docopt` function. `docopt` parses the usage pattern\n(`\"Usage: ...\"`) and option descriptions (lines starting with dash\n\"`-`\") and ensures that the program invocation matches the usage\npattern; it parses options, arguments and commands based on that. The\nbasic idea is that *a good help message has all necessary information in\nit to make a parser*.\n\nAlso, [PEP 257](http://www.python.org/dev/peps/pep-0257/) recommends\nputting help message in the module docstrings.\n\n**type-docopt** project is based on [docopt](https://github.com/docopt/docopt).\ndocopt is a great project, but it lacks an important feature: type validation. \nIt intensionally refuses to adding argument validation feature\n(For one example, refer to [docopt#327](https://github.com/docopt/docopt/issues/327)).\nFurthermore, docopt seems not maintained anymore.\n**type-docopt** is a simple extension to docopt which adds type validation and conversion feature.\n\n# Installation\n\nWith pip or easy\\_install:\n\n```bash\npip install type-docopt\n```\n\n**type-docopt** is tested on Python 3.6+.\n\n# Testing\n\nYou can run unit tests using the command:\n\n```bash\npython setup.py test\n```\n\n# API\n\n```python\nfrom type_docopt import docopt\n```\n\n```python\ndocopt(docstring=None, argv=None, help_message=True, version=None, options_first=False, types=None)\n```\n\n`docopt` takes 6 optional arguments:\n\n-   `docstring` could be a module docstring (`__doc__`) or some other string\n    that contains a **help message** that will be parsed to create the\n    option parser. If it is None (not provided) - the calling scope will be interrogated \n    for a docstring. The simple rules of how to write such a help message\n    are given in next sections. Here is a quick example of such a\n    string:\n\n```python\n\"\"\"Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n-h --help    show this\n-s --sorted  sorted output\n-o FILE      specify output file [default: ./test.txt]\n--quiet      print less text\n--verbose    print more text\n\n\"\"\"\n```\n\n-   `argv` is an optional argument vector; by default `docopt` uses the\n    argument vector passed to your program (`sys.argv[1:]`).\n    Alternatively you can supply a list of strings like\n    `['--verbose', '-o', 'hai.txt']`.\n-   `help_message`, by default `True`, specifies whether the parser should\n    automatically print the help message (supplied as `doc`) and\n    terminate, in case `-h` or `--help` option is encountered (options\n    should exist in usage pattern, more on that below). If you want to\n    handle `-h` or `--help` options manually (as other options), set\n    `help_message=False`.\n-   `version`, by default `None`, is an optional argument that specifies\n    the version of your program. If supplied, then, (assuming\n    `--version` option is mentioned in usage pattern) when parser\n    encounters the `--version` option, it will print the supplied\n    version and terminate. `version` could be any printable object, but\n    most likely a string, e.g. `\"2.1.0rc1\"`.\n\n    > Note, when `docopt` is set to automatically handle `-h`, `--help`\n    > and `--version` options, you still need to mention them in usage\n    > pattern for this to work. Also, for your users to know about them.\n\n-   `options_first`, by default `False`. If set to `True` will disallow\n    mixing options and positional argument. I.e. after first positional\n    argument, all arguments will be interpreted as positional even if\n    the look like options. This can be used for strict compatibility\n    with POSIX, or if you want to dispatch your arguments to other\n    programs.\n\n-   `types`, by default `None`, is how you can provide custom types to\n    **type-docopt**. If given as a dictionary with type names as keys and \n    type constructors as values, **type-docopt** converts argument values\n    to given type according to the type information of option description.\n    Basic types (int, float, complex, str) are readily available.\n\nThe **return** value is a simple dictionary with options, arguments and\ncommands as keys, spelled exactly like in your help message. Long\nversions of options are given priority. Furthermore, dot notation is\nsupported, with preceeding dashes (`-`) and surrounding brackets (`<>`)\nignored. Dashes (`-`) between words are automatically converted to underscore (`_`).\nFor example, if you invoke the top example as:\n\n    python example.py transport 1.2.3.4 80 --timeout 0.5 --protocol tcp\n\nthe return dictionary will be:\n\n```python\n{'--baud': 9600,\n '--help': False,\n '--protocol': 'tcp',\n '--timeout': 0.5,\n '--version': False,\n '<host>': '1.2.3.4',\n '<port>': '80',\n 'serial': False,\n 'transport': True}\n```\n\n...and properties can be accessed with `arguments.protocol` or `arguments.host`.\n\n# Help message format\n\nHelp message consists of 2 parts:\n\n-   Usage pattern, e.g.:\n\n        Usage: my_program.py [-hsc COUNT] [--quiet | --verbose] [INPUT ...]\n\n-   Option descriptions, e.g.:\n\n        -h --help    show this\n        -s --sorted  sorted output\n        -c COUNT     specify count number [default: 1] [type: int]\n        --quiet      print less text\n        --verbose    print more text\n\nTheir format is described below; other text is ignored.\n\n## Usage pattern format\n\n**Usage pattern** is a substring of `doc` that starts with `usage:`\n(case *insensitive*) and ends with a *visibly* empty line. Minimum\nexample:\n\n```python\n\"\"\"Usage: my_program.py\n\n\"\"\"\n```\n\nThe first word after `usage:` is interpreted as your program's name. You\ncan specify your program's name several times to signify several\nexclusive patterns:\n\n```python\n\"\"\"Usage: my_program.py FILE\n          my_program.py COUNT FILE\n\n\"\"\"\n```\n\nEach pattern can consist of the following elements:\n\n-   **&lt;arguments&gt;**, **ARGUMENTS**. Arguments are specified as\n    either upper-case words, e.g. `my_program.py CONTENT-PATH` or words\n    surrounded by angular brackets: `my_program.py <content-path>`.\n-   **--options**. Options are words started with dash (`-`), e.g.\n    `--output`, `-o`. You can \"stack\" several of one-letter options,\n    e.g. `-oiv` which will be the same as `-o -i -v`. The options can\n    have arguments, e.g. `--input=FILE` or `-i FILE` or even `-iFILE`.\n    However it is important that you specify option descriptions if you\n    want your option to have an argument, a default value, or specify\n    synonymous short/long versions of the option (see next section on\n    option descriptions).\n-   **commands** are words that do *not* follow the described above\n    conventions of `--options` or `<arguments>` or `ARGUMENTS`, plus two\n    special commands: dash \"`-`\" and double dash \"`--`\" (see below).\n\nUse the following constructs to specify patterns:\n\n-   **\\[ \\]** (brackets) **optional** elements. e.g.:\n    `my_program.py [-hvqo FILE]`\n-   **( )** (parens) **required** elements. All elements that are *not*\n    put in **\\[ \\]** are also required, e.g.:\n    `my_program.py --path=<path> <file>...` is the same as\n    `my_program.py (--path=<path> <file>...)`. (Note, \"required options\"\n    might be not a good idea for your users).\n-   **|** (pipe) **mutually exclusive** elements. Group them using **(\n    )** if one of the mutually exclusive elements is required:\n    `my_program.py (--clockwise | --counter-clockwise) TIME`. Group them\n    using **\\[ \\]** if none of the mutually-exclusive elements are\n    required: `my_program.py [--left | --right]`.\n-   **...** (ellipsis) **one or more** elements. To specify that\n    arbitrary number of repeating elements could be accepted, use\n    ellipsis (`...`), e.g. `my_program.py FILE ...` means one or more\n    `FILE`-s are accepted. If you want to accept zero or more elements,\n    use brackets, e.g.: `my_program.py [FILE ...]`. Ellipsis works as a\n    unary operator on the expression to the left.\n-   **\\[options\\]** (case sensitive) shortcut for any options. You can\n    use it if you want to specify that the usage pattern could be\n    provided with any options defined below in the option-descriptions\n    and do not want to enumerate them all in usage-pattern.\n-   \"`[--]`\". Double dash \"`--`\" is used by convention to separate\n    positional arguments that can be mistaken for options. In order to\n    support this convention add \"`[--]`\" to your usage patterns.\n-   \"`[-]`\". Single dash \"`-`\" is used by convention to signify that\n    `stdin` is used instead of a file. To support this add \"`[-]`\" to\n    your usage patterns. \"`-`\" acts as a normal command.\n\nIf your pattern allows to match argument-less option (a flag) several\ntimes:\n\n    Usage: my_program.py [-v | -vv | -vvv]\n\nthen number of occurrences of the option will be counted. I.e.\n`args['-v']` will be `2` if program was invoked as `my_program -vv`.\nSame works for commands.\n\nIf your usage patterns allows to match same-named option with argument\nor positional argument several times, the matched arguments will be\ncollected into a list:\n\n    Usage: my_program.py <file> <file> --path=<path>...\n\nI.e. invoked with\n`my_program.py file1 file2 --path=./here --path=./there` the returned\ndict will contain `args['<file>'] == ['file1', 'file2']` and\n`args['--path'] == ['./here', './there']`.\n\n## Option descriptions format\n\n**Option descriptions** consist of a list of options that you put below\nyour usage patterns.\n\nIt is necessary to list option descriptions in order to specify:\n\n-   synonymous short and long options,\n-   if an option has an argument,\n-   if option's argument has a default value.\n\nThe rules are as follows:\n\n-   Every line in `doc` that starts with `-` or `--` (not counting\n    spaces) is treated as an option description, e.g.:\n\n        Options:\n          --verbose   # GOOD\n          -o FILE     # GOOD\n        Other: --bad  # BAD, line does not start with dash \"-\"\n\n-   To specify that option has an argument, put a word describing that\n    argument after space (or equals \"`=`\" sign) as shown below. Follow\n    either &lt;angular-brackets&gt; or UPPER-CASE convention for\n    options' arguments. You can use comma if you want to separate\n    options. In the example below, both lines are valid, however you are\n    recommended to stick to a single style.:\n\n        -o FILE --output=FILE       # without comma, with \"=\" sign\n        -i <file>, --input <file>   # with comma, without \"=\" sign\n\n-   Use two spaces to separate options with their informal description:\n\n        --verbose More text.   # BAD, will be treated as if verbose option had\n                               # an argument \"More\", so use 2 spaces instead\n        -q        Quit.        # GOOD\n        -o FILE   Output file. # GOOD\n        --stdout  Use stdout.  # GOOD, 2 spaces\n\n-   If you want to set a default value for an option with an argument,\n    put it into the option-description, in form\n    `[default: <my-default-value>]`:\n\n        --coefficient=K  The K coefficient [default: 2.95]\n        --output=FILE    Output file [default: test.txt]\n        --directory=DIR  Some directory [default: ./]\n\n-   If the option is not repeatable, the value inside `[default: ...]`\n    will be interpreted as string. If it *is* repeatable, it will be\n    splited into a list on whitespace:\n\n        Usage: my_program.py [--repeatable=<arg> --repeatable=<arg>]\n                             [--another-repeatable=<arg>]...\n                             [--not-repeatable=<arg>]\n\n        # will be ['./here', './there']\n        --repeatable=<arg>          [default: ./here ./there]\n\n        # will be ['./here']\n        --another-repeatable=<arg>  [default: ./here]\n\n        # will be './here ./there', because it is not repeatable\n        --not-repeatable=<arg>      [default: ./here ./there]\n\n-   If you would like to set type information for an option with an argument,\n    put it into the option-description, in form `[type: <my-type-name>]`.\n    You can also use default value with type description:\n\n        --coefficient=K  The K coefficient [default: 2.95] [type: float]\n        --count=COUNT    Count number [type: int]\n\n-   You can provide custom types to **type-docopt**. Make a dictionary with\n    type names as keys and constructors as values then give it to **type-docopt**.\n    Below is how you can convert file path to `Path` object.\n\n    ```python\n    \"\"\"Usage: my_program.py --output=FILE\n\n    Options:\n      --output=FILE  Output path [type: path]\n    \"\"\"\n    from type_docopt import docopt\n    from pathlib import Path\n\n    if __name__ == '__main__':\n        arguments = docopt(__doc__, types={'path': Path})\n        print(arguments)\n    ```\n\n-   If you want to specify allowable values for the argument, you can put the information\n    into the option-description, in form `[choices: <1st-choice> <2nd-choice> <3rd-choice>]`.\n    Choices are deliminated by whitespace. You can also use type and default value with choices:\n\n        --protocol=PROTOCOL  Protocol name [choices: tcp udp] [default: tcp]\n        --repeat=N           Number [choices: 1 2 3] [type: int]\n\n## Examples\n\nWe have an extensive list of\n[examples](https://github.com/dreamgonfly/type-docopt/tree/master/examples)\nwhich cover every aspect of functionality of **type-docopt**. Try them\nout, read the source if in doubt.\n\n# Development\n\nWe would *love* to hear what you think about **type-docopt** on our\n[issues page](https://github.com/dreamgonfly/type-docopt/issues)\n\nMake pull requests, report bugs, suggest ideas and discuss **type-docopt**.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dreamgonfly/type-docopt",
    "keywords": "arguments parser argparse optparse getopt",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "type-docopt",
    "package_url": "https://pypi.org/project/type-docopt/",
    "platform": "",
    "project_url": "https://pypi.org/project/type-docopt/",
    "project_urls": {
      "Homepage": "https://github.com/dreamgonfly/type-docopt"
    },
    "release_url": "https://pypi.org/project/type-docopt/0.8.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pythonic argument parser, with type description.",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8016929,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e79dbe8f61144f354cf3cfc881915e1e260fe2b534175bb566ab5fc698777b",
          "md5": "c48062e7320ad289cf6ee5d7077cf99f",
          "sha256": "6a6b791d7245f67ed072ca1a4003d71d7d93962fff7f56ec7584c421c4d4c9e5"
        },
        "downloads": -1,
        "filename": "type_docopt-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c48062e7320ad289cf6ee5d7077cf99f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14135,
        "upload_time": "2020-06-29T06:08:36",
        "upload_time_iso_8601": "2020-06-29T06:08:36.038778Z",
        "url": "https://files.pythonhosted.org/packages/a2/e7/9dbe8f61144f354cf3cfc881915e1e260fe2b534175bb566ab5fc698777b/type_docopt-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf70287501829b56edae6cc399ecb33bc626846f475d743150b549420848bdf9",
          "md5": "c8a52946b07984184d7070fb809269f6",
          "sha256": "2e8d35428f108afbf0240d05cdda83bcced52d43e14c59d87a96266c00ddbdf3"
        },
        "downloads": -1,
        "filename": "type-docopt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8a52946b07984184d7070fb809269f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26123,
        "upload_time": "2020-06-29T06:08:39",
        "upload_time_iso_8601": "2020-06-29T06:08:39.154785Z",
        "url": "https://files.pythonhosted.org/packages/bf/70/287501829b56edae6cc399ecb33bc626846f475d743150b549420848bdf9/type-docopt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e0309c92dada88eef5196abed25f9b1fd84ad90986e9732e61e50ada56d5051",
          "md5": "a53af7f0dc57a42b11088a7956a1c952",
          "sha256": "ddc6a13cd1ae592a6bdb1d72e6c64a96aa5400e4c2fdc7225d591756a8e85dde"
        },
        "downloads": -1,
        "filename": "type_docopt-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a53af7f0dc57a42b11088a7956a1c952",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14488,
        "upload_time": "2020-08-17T09:08:51",
        "upload_time_iso_8601": "2020-08-17T09:08:51.650779Z",
        "url": "https://files.pythonhosted.org/packages/7e/03/09c92dada88eef5196abed25f9b1fd84ad90986e9732e61e50ada56d5051/type_docopt-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a1f6b0b6575d42f74667e867288fea8317f3e26a987af4143520d2e8e7b5d69",
          "md5": "6f3a7bdb7f8c6036dd832592687ce62d",
          "sha256": "3a57e97f276f47da06954e08a0a94a89130d8c80dfa18ae22902f0e181b00773"
        },
        "downloads": -1,
        "filename": "type_docopt-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f3a7bdb7f8c6036dd832592687ce62d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14690,
        "upload_time": "2020-08-22T09:03:49",
        "upload_time_iso_8601": "2020-08-22T09:03:49.946665Z",
        "url": "https://files.pythonhosted.org/packages/8a/1f/6b0b6575d42f74667e867288fea8317f3e26a987af4143520d2e8e7b5d69/type_docopt-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f653c0ed985c260ad3221c7d73f7c040f3c3385f4ab1159b6a40e7ed6a2c38d",
          "md5": "ff19b8d0cadd76e07708b1db3b5f68a8",
          "sha256": "ecd23359c3e184b9384f664f7a8c0de8550abc538af4f404e97eee99b9320b83"
        },
        "downloads": -1,
        "filename": "type-docopt-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ff19b8d0cadd76e07708b1db3b5f68a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26945,
        "upload_time": "2020-08-22T09:03:51",
        "upload_time_iso_8601": "2020-08-22T09:03:51.567472Z",
        "url": "https://files.pythonhosted.org/packages/2f/65/3c0ed985c260ad3221c7d73f7c040f3c3385f4ab1159b6a40e7ed6a2c38d/type-docopt-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a1f6b0b6575d42f74667e867288fea8317f3e26a987af4143520d2e8e7b5d69",
        "md5": "6f3a7bdb7f8c6036dd832592687ce62d",
        "sha256": "3a57e97f276f47da06954e08a0a94a89130d8c80dfa18ae22902f0e181b00773"
      },
      "downloads": -1,
      "filename": "type_docopt-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f3a7bdb7f8c6036dd832592687ce62d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14690,
      "upload_time": "2020-08-22T09:03:49",
      "upload_time_iso_8601": "2020-08-22T09:03:49.946665Z",
      "url": "https://files.pythonhosted.org/packages/8a/1f/6b0b6575d42f74667e867288fea8317f3e26a987af4143520d2e8e7b5d69/type_docopt-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f653c0ed985c260ad3221c7d73f7c040f3c3385f4ab1159b6a40e7ed6a2c38d",
        "md5": "ff19b8d0cadd76e07708b1db3b5f68a8",
        "sha256": "ecd23359c3e184b9384f664f7a8c0de8550abc538af4f404e97eee99b9320b83"
      },
      "downloads": -1,
      "filename": "type-docopt-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ff19b8d0cadd76e07708b1db3b5f68a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26945,
      "upload_time": "2020-08-22T09:03:51",
      "upload_time_iso_8601": "2020-08-22T09:03:51.567472Z",
      "url": "https://files.pythonhosted.org/packages/2f/65/3c0ed985c260ad3221c7d73f7c040f3c3385f4ab1159b6a40e7ed6a2c38d/type-docopt-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}