{
  "info": {
    "author": "Ian Fisher",
    "author_email": "ian@iafisher.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "A simple tool to manage pre-commit hooks for git.\n\nInstall it with pip (outside a virtual environment so it works with multiple projects):\n\n```shell\npip3 install iprecommit\n```\n\nThen, initialize a pre-commit check in your git repository:\n\n```shell\ncd path/to/some/git/repo\niprecommit init\n```\n\n`iprecommit init` will create a file called `precommit.py` in the root of your git repository that defines your pre-commit checks. It's human-editable and self-explanatory.\n\nNow, whenever you run `git commit`, the checks in `precommit.py` will be run automatically. You can also run the pre-commit checks manually:\n\n```shell\niprecommit\n```\n\nMany pre-commit issues can be fixed automatically. To do so, run\n\n```shell\niprecommit fix\n```\n\nPass the `--working` flag to `iprecommit` and `iprecommit fix` to operate on both staged and unstaged changes.\n\n\n## User guide\n### Precommit file format\nThe `precommit.py` file that `precommit` generates will look something like this:\n\n```python\nfrom iprecommit import checks\n\n\ndef init(precommit):\n    precommit.check(checks.NoStagedAndUnstagedChanges())\n    precommit.check(checks.NoWhitespaceInFilePath())\n    precommit.check(checks.DoNotSubmit())\n\n    # Check Python format with black.\n    precommit.check(checks.PythonFormat())\n\n    # Lint Python code with flake8.\n    precommit.check(checks.PythonLint())\n\n    # Check the order of Python imports with isort.\n    precommit.check(checks.PythonImportOrder())\n\n    # Check Python static type annotations with mypy.\n    precommit.check(checks.PythonTypes())\n\n    # Lint JavaScript code with ESLint.\n    precommit.check(checks.JavaScriptLint())\n```\n\n`precommit.py` must define a function called `init` that accepts a single parameter, called `precommit` by convention.\n\n`precommit.check` registers a pre-commit check. Checks are run in the order they are registered. The built-in checks know what kind of files they should be invoked on, so, e.g., `checks.PythonFormat` will only run on Python files. If you want to limit a check to a certain set of files, the check functions accept a `exclude` parameter which should be a list of Unix filename patterns:\n\n```python\nprecommit.check(checks.NoWhiteSpaceInFilePath(exclude=[\"data/*.csv\"]))\n```\n\nYou can also opt-in files with the `include` parameter. See the [Python `fnmatch` module](https://docs.python.org/3.6/library/fnmatch.html) for details on the pattern syntax for `exclude` and `include`.\n\nSince `precommit.py` is a Python file, you can disable checks by commenting them out.\n\nThe default `precommit.py` has checks for a number of languages. There is no overhead for checks for languages that you don't use. They will simply never be run.\n\nSome pre-commit checks require other programs to be installed on the computer, e.g. `PythonFormat` requires the `black` code formatter. `precommit init` will **not** install these automatically. You have to install them yourself.\n\n### Writing your own checks\n`iprecommit` comes with some useful checks out of the box, but sometimes you need to write your own checks. Doing so is straightforward.\n\nTo run a shell command and check that its exit status is zero, use the built-in `checks.Command` check:\n\n```python\nprecommit.check(checks.Command(\"UnitTests\", [\"./test\"]))\n```\n\nIf the command requires the names of the files to be passed to it, use `pass_files=True`:\n\n```python\nprecommit.check(checks.Command(\"FileCheck\", [\"check_file\"], pass_files=True))\n```\n\nRestrict the types of files that the command runs on with `include`:\n\n```python\nprecommit.check(checks.Command(\"FileCheck\", [\"check_file\"], pass_files=True, include=[\"*.py\"]))\n```\n\nThis will invoke the command `check_file` once, passing all files ending in `.py` with staged changes as command-line arguments.\n\nIf the command only accepts one file at a time, use `separately`:\n\n```python\nprecommit.check(checks.Command(\"FileCheck\", [\"check_file\"], pass_files=True, separately=True, include=[\"*.py\"]))\n```\n\nThis will invoke `check_file` on each Python file with staged changes.\n\nIf you want to implement the logic of your check in Python rather than invoke a shell command, then look at the built-in checks in `iprecommit/checks.py` in this repository for guidance. `DoNotSubmit` is a good example of a simple custom check.\n\n\n## Development\nThe core logic for running checks and applying fixes is in `iprecommit/lib.py`. The built-in checks are defined in `iprecommit/checks.py`, and the pre-commit configuration template is at `iprecommit/precommit.py.template`.\n\nRun the test suite with `./functional_test`, which simulates an actual user session: creating a git repository and virtual environment, installing precommit, and running it as a shell command.\n\n\n## Missing features\nYou can see features that I've considered but ultimately rejected by looking at [the issues marked 'wontfix' on GitHub](https://github.com/iafisher/iprecommit/issues?q=is%3Aissue+label%3Awontfix). Some notable ones include:\n\n- Support for non-UTF-8 file paths\n- Support for customizing the name of `precommit.py`\n- Caching results of pre-commit checks\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iprecommit",
    "package_url": "https://pypi.org/project/iprecommit/",
    "platform": null,
    "project_url": "https://pypi.org/project/iprecommit/",
    "project_urls": {
      "Source": "https://github.com/iafisher/iprecommit"
    },
    "release_url": "https://pypi.org/project/iprecommit/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manage git pre-commit hooks",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14391989,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11f7006299c2ad713ba78af32fdbccee7612c38490dbd355d5eaeaa5d66f510d",
          "md5": "34e31ce9bc562d08ea4df1cc1d389619",
          "sha256": "3750d703c6e0a3b4618db8c2a46e770fc045cbb004fd67ccacc3af9cc8b77b4d"
        },
        "downloads": -1,
        "filename": "iprecommit-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34e31ce9bc562d08ea4df1cc1d389619",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24850,
        "upload_time": "2022-07-10T18:59:56",
        "upload_time_iso_8601": "2022-07-10T18:59:56.455345Z",
        "url": "https://files.pythonhosted.org/packages/11/f7/006299c2ad713ba78af32fdbccee7612c38490dbd355d5eaeaa5d66f510d/iprecommit-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "351b4fce0f9c2c098d8fce725fc01961d1a529b5281bd70bfe675efcb9127274",
          "md5": "aaf1dada4d3daf344b51f5abb5587a71",
          "sha256": "3d1ea334af5b2e0624955e7f145a7d86c733274c6fe3f6dfeaa67d2449d565f5"
        },
        "downloads": -1,
        "filename": "iprecommit-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aaf1dada4d3daf344b51f5abb5587a71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13736,
        "upload_time": "2022-07-10T19:00:01",
        "upload_time_iso_8601": "2022-07-10T19:00:01.299426Z",
        "url": "https://files.pythonhosted.org/packages/35/1b/4fce0f9c2c098d8fce725fc01961d1a529b5281bd70bfe675efcb9127274/iprecommit-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1969b8614492833708528fdb1c974b4d06dbcafe8f1faedbc909b547666977e8",
          "md5": "941aba11516ce471c946f9a2a6edd8af",
          "sha256": "6b898c6de23783735707102fe8766eadf3a2d457205a0968639efa20188d293e"
        },
        "downloads": -1,
        "filename": "iprecommit-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "941aba11516ce471c946f9a2a6edd8af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24881,
        "upload_time": "2022-07-10T19:05:22",
        "upload_time_iso_8601": "2022-07-10T19:05:22.345850Z",
        "url": "https://files.pythonhosted.org/packages/19/69/b8614492833708528fdb1c974b4d06dbcafe8f1faedbc909b547666977e8/iprecommit-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f6798138766a8e210c00be8df3ba59f4d71ce3351ed477d7649e230dc670ee3",
          "md5": "17cfe83814de9ce3d7fe3495b16accc1",
          "sha256": "53ee3b76be8081bba903b3ef315db3b09773e269be6bfc01e4ec7eae8192a024"
        },
        "downloads": -1,
        "filename": "iprecommit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17cfe83814de9ce3d7fe3495b16accc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13747,
        "upload_time": "2022-07-10T19:05:27",
        "upload_time_iso_8601": "2022-07-10T19:05:27.164091Z",
        "url": "https://files.pythonhosted.org/packages/7f/67/98138766a8e210c00be8df3ba59f4d71ce3351ed477d7649e230dc670ee3/iprecommit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1969b8614492833708528fdb1c974b4d06dbcafe8f1faedbc909b547666977e8",
        "md5": "941aba11516ce471c946f9a2a6edd8af",
        "sha256": "6b898c6de23783735707102fe8766eadf3a2d457205a0968639efa20188d293e"
      },
      "downloads": -1,
      "filename": "iprecommit-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "941aba11516ce471c946f9a2a6edd8af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24881,
      "upload_time": "2022-07-10T19:05:22",
      "upload_time_iso_8601": "2022-07-10T19:05:22.345850Z",
      "url": "https://files.pythonhosted.org/packages/19/69/b8614492833708528fdb1c974b4d06dbcafe8f1faedbc909b547666977e8/iprecommit-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f6798138766a8e210c00be8df3ba59f4d71ce3351ed477d7649e230dc670ee3",
        "md5": "17cfe83814de9ce3d7fe3495b16accc1",
        "sha256": "53ee3b76be8081bba903b3ef315db3b09773e269be6bfc01e4ec7eae8192a024"
      },
      "downloads": -1,
      "filename": "iprecommit-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "17cfe83814de9ce3d7fe3495b16accc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13747,
      "upload_time": "2022-07-10T19:05:27",
      "upload_time_iso_8601": "2022-07-10T19:05:27.164091Z",
      "url": "https://files.pythonhosted.org/packages/7f/67/98138766a8e210c00be8df3ba59f4d71ce3351ed477d7649e230dc670ee3/iprecommit-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}