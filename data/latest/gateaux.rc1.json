{
  "info": {
    "author": "https://github.com/meeb",
    "author_email": "meeb@meeb.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# gateaux\n\nData structures and typing for FoundationDB.\n\n\"FoundationDB is a distributed database designed to handle large volumes of structured\ndata across clusters of commodity servers. It organizes data as an ordered key-value\nstore and employs ACID transactions for all operations.\" - taken from\nhttps://github.com/apple/foundationdb/\n\nFoundationDB has, by design, a bare minimum of features. It presents an interface to\napplications which reads and writes binary data with a few basic helper layers.\nFoundationDB has no native support for rich data types (for example `datetime` objects)\nnor provides any extended data validation. FoundationDB is designed to have layers of\nabstraction built on top of it to provide additional features.\n\nThe premise of `gateaux` is that where you currently have, in `fdb` library terms,\n`tr[(some, data)] = (other, arbitrary, data)` of unstructured data is to enforce strict\nstandardisation of data in these tuples while allowing more complex types (datetime,\nipaddress etc.). In addition, the concept of structures allows for easier developer\ncomprehension of what data is being stored in what FoundationDB keyspace. `gateaux` has\na lot of code for not much of an interface, but it is designed to enforce structure and\ntypes and therefore is over-engineered and over-tested by design so you don't have to\nworry about your data structures in your upstream applications which use `gateaux`.\n\nIf you use `gateaux` your Python FoundationDB client code should look mostly the same,\nyou just can't mistakenly pack the wrong type or make mistakes before writing data. Such\nadditional validation is useful for larger codebases where you may be storing hundreds\nof `key=value` formats into FoundationDB and keeping track of them can be challenging.\n\n`gateaux` is a pure Python 3 (>=3.6) library which provides rich data type handling and\nvalidation on top of the usual `pack()` and `unpack()` methods and extends the\n`fdb.tuple` built-in layer. It is loosely modelled from the interfaces to relational\ndatabase object-relational mapper (RDBMS ORM) systems. Each `gateaux` structure\n(comparable to a \"model\" in the ORM world) effectively formats one single key/value pair\nat a time with more rigid validation than the `fdb` library provides out of the box.\n\n`gateaux` does not handle FoundationDB connections for you, just the data parsing\npart of your application. Effectively `gateaux` is just a data schema enforcing fancy\nwrapper that sits on top of tuple packing and unpacking with some nice syntactic sugar.\n`gateaux` does not abstract away any of the useful existing `fdb` keyspace interface.\n\nWhile there is overhead in checking data and converting it between types, `gateaux` is\nrelatively performant as all it does is shuffle native Python data types about.\n\n\n## Installation\n\n`gateaux` itself only depends on `foundationdb` and `pytz`. You first need to install\nthe FoundationDB client libraries from:\n\nhttps://www.foundationdb.org/download\n\nand FoundationDB Python library from PyPI:\n\n```bash\n$ pip install foundationdb\n```\n\nNext, install `gateaux` from PyPI:\n\n```bash\n$ pip install gateaux\n```\n\nPython >= 3.6 is required due to the use of typing.\n\n\n## Examples\n\n* [General example usage](/examples/general.py)\n* [FoundationDB class scheduling example rebuilt with gateaux](/examples/class_scheduling.py)\n* [FoundationDB temperature readings example rebuilt with gateaux](/examples/temperature_readings.py)\n\n\n## Enforced data format\n\n`gateaux` enforces certain requirements. These are not suitable for every project so\ncheck carefully and verify the library is appropriate for your application before you\nuse it:\n\n1. All structures are in their own FoundationDB subspace, but it is up to you what\n   keyspace or subspace to use\n2. Key tuple members are variable, a key of 3 elements can contain 1, 2 or 3 values,\n   this is to support prefixes and ranges for keys\n3. Value tuple members are fixed, a value of 3 elements must always contain 3 values\n3. Validation is strict, if you define a field as a StringField you cannot store bytes\n   in it etc.\n4. While possible to support multiple data types, such as cast int(1) to str('1') if an\n   integer is provided to a StringField, by design typing is enforced and this will\n   raise an exception\n5. You should not use direct binary data with FoundationDB while using `gateaux`, always\n   use tuples of other types, `tr[b'key'] = b'value` is incompatible with `gateaux`, but\n   `tr[(b'key',)] = (b'value',)` is compatible.\n\n`gateaux` conforms to the same idea of `fdb.tuple` such that packing then unpacking a\ntuple should always result in the same original tuple of data.\n\n\n## Structures\n\nThere is only one base structure which is inherited to create your own structures.\nSynopsis:\n\n```python\nimport fdb\nimport gateaux\n\nfdb.api_version(620)\ndb = fdb.open()\n\nclass SomeUserStructure(gateaux.Structure):\n    key = (gateaux.BinaryField(),)\n    value = (gateaux.BinaryField(),)\n\nsome_keyspace = fdb.Subspace(('some', 'subspace'))\nsome_structure_instance = SomeUserStructure(some_keyspace)\n```\n\nStructures have one required argument, a FoundationDB subspace. Structure instances\nhave the following interface for tuples:\n\n* `structure.pack_key((...))` validates a tuple of data against the defined key\n  fields and returns bytes. The bytes are a FoundationDB packed tuple in the defined\n  directory.\n* `structure.unpack_key(b'...')` unpacks FoundationDB bytes into a tuple and then\n  validates the data against the defined key fields returning the appropriate data type\n  for the field.\n* `structure.pack_value((...))` validates a tuple of data against the defined value\n  fields and returns bytes. The bytes are a FoundationDB packed tuple in the defined\n  directory.\n* `structure.unpack_value(b'...')` unpacks FoundationDB bytes into a tuple and then\n  validates the data against the defined value fields returning the appropriate data\n  type for the field.\n\nAnd the following interface for dicts:\n\n* `structure.pack_key_dict({...})` validates a dict of data against the defined key\n  fields and returns bytes. The bytes are a FoundationDB packed tuple in the defined\n  directory. To use key dicts you must have given all of your key fields a name.\n* `structure.unpack_key_dict(b'...')` unpacks FoundationDB bytes into a dict and then\n  validates the data against the defined key fields returning the appropriate data type\n  for the field. To use key dicts you must have given all of your key fields a name.\n* `structure.pack_value_dict((...))` validates a dict of data against the defined value\n  fields and returns bytes. The bytes are a FoundationDB packed tuple in the defined\n  directory. To use value dicts you must have given all of your value fields a name.\n* `structure.unpack_value_dict(b'...')` unpacks FoundationDB bytes into a dict and then\n  validates the data against the defined value fields returning the appropriate data\n  type for the field. To use value dicts you must have given all of your value fields a\n  name.\n\nAnd the following properties:\n\n* `structure.description` a property which returns a `dict` describing the model,\n  including the name of the structure and any doc string as well as lists of\n  descriptions for each field in the key and value. You can use this to programmatically\n  inspect a structure in the future and is useful if you have many structures.\n\n\n## Fields\n\nAll fields support the following arguments:\n\n* `name=string` If set it defines a name stored for the field.\n\n* `help_text=string` If set, help defines some optional help text to describe the data\n   stored in the value.\n\n* `null=boolean` If set to True then the field can have a `None` value. Defaults to\n   False.\n\n* `default=value` If set, defines a default for a field. The type must match the\n  required type for the field. A default is only used if `null=True` and `None` is\n  provided to the field.\n\nOther field types may support more arguments.\n\n\n### BinaryField\n\nStores bytes. Optional arguments:\n\n* `max_length=int` If set defines the maximum number of bytes the field will store.\n\nAccepted type: `bytes`\n\n\n### IntegerField\n\nStores integers. Optional arguments:\n\n* `min_value=int` If set defines the minimum number the field will accept\n* `max_value=int` If set defines the maximum number the field will accept\n\nAccepted type: `int`\n\n\n### FloatField\n\nStores floats. Optional arguments:\n\n* `min_value=float` If set defines the minimum number the field will accept\n* `max_value=float` If set defines the maximum number the field will accept\n\nAccepted type: `float`\n\n\n### BooleanField\n\nStores booleans.\n\nAccepted type: `bool`\n\n\n### StringField\n\nStores strings. Optional arguments:\n\n* `max_length=int` If set defines the maximum length of the field will accept\n\nAccepted type: `str`\n\n\n### DateTimeField\n\nStores datetime instances. Internally stored as a UNIX timestamp as floats in UTC.\n\nAccepted type: `datetime.datetime`\n\nInput `datetime.datetime` will be normalised to UTC and returned in UTC when read. You\nshould account for this in your application. Storing a `datetime.datetime` in any other\ntimezone will convert it to UTC when read. If the provided `datetime.datetime` instance\nhas no timezone info it will be assumed to be UTC.\n\n\n### IPv4AddressField\n\nStores IPv4 addresses. Internally stored as 4 bytes.\n\nAccepted type: `ipaddress.IPv4Address`\n\n\n### IPv4NetworkField\n\nStores IPv4 networks. Internally stored as 5 bytes (address + prefix length).\n\nAccepted type: `ipaddress.IPv4Network`\n\n\n### IPv6AddressField\n\nStores IPv6 addresses. Internally stored as 16 bytes.\n\nAccepted type: `ipaddress.IPv6Address`\n\n\n### IPv6NetworkField\n\nStores IPv4 networks. Internally stored as 17 bytes (address + prefix length).\n\nAccepted type: `ipaddress.IPv6Network`\n\n\n### EnumField\n\nStores Enums. Internally stored as an integer that maps to a specified value. Required\narguments:\n\n* `members=tuple` A mandatory tuple of ints to use as Enum members.\n\nExample:\n\n```python\nMEMBER_A = 0\nMEMBER_B = 1\nMEMBERS = (\n    MEMBER_A,\n    MEMBER_B\n)\nEnumField(members=MEMBERS)\n```\n\nAccepted type: `int`\n\n\n### UUIDField\n\nStores UUID instances. Internally stored as 16 bytes.\n\nAccepted type: `uuid.UUID`\n\n\n## Tests\n\nThere is a pretty comprehensive test suite. As `gateaux` is designed to pack and unpack\nimportant data it has good coverage to make sure it's behaving as expected. You can run\nit by cloning this repository then executing:\n\n```bash\n$ ./run-tests.sh\n```\n\nThe tests perform type checking and require \"mypy\" from http://mypy-lang.org/ to be\nglobally installed. E.g. `apt install mypy`.\n\n\n## Contributing\n\nAll properly formatted and sensible pull requests, issues and comments are welcome.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meeb/gateaux",
    "keywords": "gateaux,foundationdb,fdb,data,structure,structures,typed,typing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gateaux",
    "package_url": "https://pypi.org/project/gateaux/",
    "platform": "",
    "project_url": "https://pypi.org/project/gateaux/",
    "project_urls": {
      "Homepage": "https://github.com/meeb/gateaux"
    },
    "release_url": "https://pypi.org/project/gateaux/0.2/",
    "requires_dist": [
      "foundationdb",
      "pytz"
    ],
    "requires_python": "",
    "summary": "Typed data structures for FoundationDB.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7683972,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69027f6de1d447b25cec5ee378287ff4a29ab7e09d5e15c4c233bddb76c0b6f3",
          "md5": "2a278f258d22b7385a205029536182db",
          "sha256": "cc17da98db023004d2a122017ded7fb6ae1d6662d1d1b853b90bf1839ac925e5"
        },
        "downloads": -1,
        "filename": "gateaux-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a278f258d22b7385a205029536182db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17485,
        "upload_time": "2020-07-12T08:10:43",
        "upload_time_iso_8601": "2020-07-12T08:10:43.978676Z",
        "url": "https://files.pythonhosted.org/packages/69/02/7f6de1d447b25cec5ee378287ff4a29ab7e09d5e15c4c233bddb76c0b6f3/gateaux-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "289d3d0ffb35a9b7cc83aa4af8dcae3e7ac3a2f27b8f233151577525048e15f9",
          "md5": "dc53d86ec8fc96cd5460ce538dea8f2d",
          "sha256": "4643cb5954328e3449c370163bbbe153b094344520671d85f02de605ab097f48"
        },
        "downloads": -1,
        "filename": "gateaux-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc53d86ec8fc96cd5460ce538dea8f2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14006,
        "upload_time": "2020-07-12T08:10:45",
        "upload_time_iso_8601": "2020-07-12T08:10:45.528529Z",
        "url": "https://files.pythonhosted.org/packages/28/9d/3d0ffb35a9b7cc83aa4af8dcae3e7ac3a2f27b8f233151577525048e15f9/gateaux-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69027f6de1d447b25cec5ee378287ff4a29ab7e09d5e15c4c233bddb76c0b6f3",
        "md5": "2a278f258d22b7385a205029536182db",
        "sha256": "cc17da98db023004d2a122017ded7fb6ae1d6662d1d1b853b90bf1839ac925e5"
      },
      "downloads": -1,
      "filename": "gateaux-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a278f258d22b7385a205029536182db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17485,
      "upload_time": "2020-07-12T08:10:43",
      "upload_time_iso_8601": "2020-07-12T08:10:43.978676Z",
      "url": "https://files.pythonhosted.org/packages/69/02/7f6de1d447b25cec5ee378287ff4a29ab7e09d5e15c4c233bddb76c0b6f3/gateaux-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "289d3d0ffb35a9b7cc83aa4af8dcae3e7ac3a2f27b8f233151577525048e15f9",
        "md5": "dc53d86ec8fc96cd5460ce538dea8f2d",
        "sha256": "4643cb5954328e3449c370163bbbe153b094344520671d85f02de605ab097f48"
      },
      "downloads": -1,
      "filename": "gateaux-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dc53d86ec8fc96cd5460ce538dea8f2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14006,
      "upload_time": "2020-07-12T08:10:45",
      "upload_time_iso_8601": "2020-07-12T08:10:45.528529Z",
      "url": "https://files.pythonhosted.org/packages/28/9d/3d0ffb35a9b7cc83aa4af8dcae3e7ac3a2f27b8f233151577525048e15f9/gateaux-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}