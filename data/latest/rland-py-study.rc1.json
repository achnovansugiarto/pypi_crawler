{
  "info": {
    "author": "Roboroboland",
    "author_email": "kimjunseob1@roborobo.co.kr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Roboroboland Python Study Package(v 0.0.0.2)\n=================================\n> This package is about roboroboland's python study. It includes from basic calculator examples to advanced serial communication multi threading code.\n\n# To start\n\n## Install Library\nTo Start, Please install following packages\n\n1. pyserial \n2. numpy\n3. pandas\n\n# General\n\n## calculator\n1. To Start  \nWrite down this code on the top of your source    \n```\nfrom rland_py_study import calculator.Calculator()\n``` \n\n2. class:Calulator  \n- variables : \n    - self._result = 0\n\n- functions :\n    - result(self):\n        - return : self._result\n    - add(self, num) : \n        - add 'num' and '_result'  \n        - return : self._result  \n    - sub(self, num) : \n        - subtract 'num' from '_result'  \n        - return : self._result  \n    - mul(self, num) : \n        - multiply '_result' by 'num'    \n        - return : self._result  \n    - div(self, num) : \n        - divide '_result' by 'num'  \n        - return : self._result  \n    - reset(self):\n        - reset '_result' to zero\n        - return : None\n\n3. Example code\n\n```Python:calculator_ex.py\nfrom rland_py_study import *\n\n_cal = calculator.Calculator()\nwhile(1):\n    _input = str(input(\"Please insert number and operator\\nPresent value : \"+str(_cal.result())+\"\\n(ex. +10 or -10, quit:q, reset:r)\\ninput : \"))\n    if _input[0] == '+':\n        print(\"Add\")\n        _input=_input[1:]\n        _cal.add(float(_input))\n    elif _input[0] == '-':\n        print(\"Sub\")\n        _input=_input[1:]\n        _cal.sub(float(_input))\n    elif _input[0] == '*':\n        print(\"mul\")\n        _input=_input[1:]\n        _cal.mul(float(_input))\n    elif _input[0] == '/':\n        print(\"Div\")\n        _input=_input[1:]\n        if(float(_input)==0):\n            print(\"can't divided by 0\")\n        else:\n            _cal.div(float(_input))\n    elif _input[0] == 'r':\n        _cal.reset()\n        print(\"Calculator is reset\")\n    elif _input[0] == 'q':\n        exit()\n    else:\n        print(\"Wrong input. Please insert right direction.\")\n```\n\n# Serial\nThis library is to use Serial communication with external hardware(ex. RS board, Cube, R drone ...)\n\n## basic\n\n1. To Start  \nWrite Down this code on the top of your source. Package 'pyserial' must be installed to use it.\n```\nfrom rland_py_study.serial import *\n```\n2. class:SerialBasic  \n- variables : \n    - self.robot = None\n    - self.process = None\n\n- functions :\n    - port_search(self):\n        - Search COM port of user's computer and prints their names.\n        - return : None\n    - port_open(self, port):\n        - Try to open port to connect device with computer. If openning process succeed, they will be connected. If openning process failed, port will be closed.\n        - return : None\n    - port_search(self):\n        - If there's a connected device, disconnect it from user's computer.\n        - return : None\n\n3. Example\n```\n#(will be updated soon)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BenzeneKim/rland_py_study",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rland-py-study",
    "package_url": "https://pypi.org/project/rland-py-study/",
    "platform": null,
    "project_url": "https://pypi.org/project/rland-py-study/",
    "project_urls": {
      "Homepage": "https://github.com/BenzeneKim/rland_py_study"
    },
    "release_url": "https://pypi.org/project/rland-py-study/0.0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package for studying python features",
    "version": "0.0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17054457,
  "releases": {
    "0.0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b0df283e0f5bbd5036748f91e7b38f66fd44bff8deeb2c61938914dc03791cc",
          "md5": "4f625eaf6399f84d4ae4efe5bee972bf",
          "sha256": "5dfe2a28e57eb2426742bd05ff02a4de896138d1a9d473c75cd463e76a0098b0"
        },
        "downloads": -1,
        "filename": "rland_py_study-0.0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f625eaf6399f84d4ae4efe5bee972bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16208,
        "upload_time": "2023-02-24T08:20:46",
        "upload_time_iso_8601": "2023-02-24T08:20:46.545335Z",
        "url": "https://files.pythonhosted.org/packages/7b/0d/f283e0f5bbd5036748f91e7b38f66fd44bff8deeb2c61938914dc03791cc/rland_py_study-0.0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a6cb6b55011f4ac9ed778ae9edf3f51429a8968195b77a99c7fc1c43b051b18",
          "md5": "ad405a776be953281a1b5c9082f0eed2",
          "sha256": "e4f81484be10e115026b373c61bc795290cfa70bfe9283d21bdcae689a385c1a"
        },
        "downloads": -1,
        "filename": "rland_py_study-0.0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad405a776be953281a1b5c9082f0eed2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17375,
        "upload_time": "2023-02-24T08:20:48",
        "upload_time_iso_8601": "2023-02-24T08:20:48.572171Z",
        "url": "https://files.pythonhosted.org/packages/3a/6c/b6b55011f4ac9ed778ae9edf3f51429a8968195b77a99c7fc1c43b051b18/rland_py_study-0.0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b0df283e0f5bbd5036748f91e7b38f66fd44bff8deeb2c61938914dc03791cc",
        "md5": "4f625eaf6399f84d4ae4efe5bee972bf",
        "sha256": "5dfe2a28e57eb2426742bd05ff02a4de896138d1a9d473c75cd463e76a0098b0"
      },
      "downloads": -1,
      "filename": "rland_py_study-0.0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f625eaf6399f84d4ae4efe5bee972bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16208,
      "upload_time": "2023-02-24T08:20:46",
      "upload_time_iso_8601": "2023-02-24T08:20:46.545335Z",
      "url": "https://files.pythonhosted.org/packages/7b/0d/f283e0f5bbd5036748f91e7b38f66fd44bff8deeb2c61938914dc03791cc/rland_py_study-0.0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a6cb6b55011f4ac9ed778ae9edf3f51429a8968195b77a99c7fc1c43b051b18",
        "md5": "ad405a776be953281a1b5c9082f0eed2",
        "sha256": "e4f81484be10e115026b373c61bc795290cfa70bfe9283d21bdcae689a385c1a"
      },
      "downloads": -1,
      "filename": "rland_py_study-0.0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ad405a776be953281a1b5c9082f0eed2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17375,
      "upload_time": "2023-02-24T08:20:48",
      "upload_time_iso_8601": "2023-02-24T08:20:48.572171Z",
      "url": "https://files.pythonhosted.org/packages/3a/6c/b6b55011f4ac9ed778ae9edf3f51429a8968195b77a99c7fc1c43b051b18/rland_py_study-0.0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}