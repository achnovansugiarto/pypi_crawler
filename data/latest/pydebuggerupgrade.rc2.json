{
  "info": {
    "author": "Microchip Technology",
    "author_email": "support@microchip.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# pydebuggerupgrade\npydebuggerupgrade is a combined Command Line Interface and library utility for upgrading firmware on Microchip debuggers with DFU based bootloaders.\n\nThese tools are currently supported:\n* PKOB nano (nEDBG): Embedded debugger found on kits\n\n## Usage\npydebuggerupgrade can be used as a command-line interface or a library\n\n### Command-line usage\nfor help, use:\n```\npydebuggerupgrade --help\n```\n\n#### Upgrade using local firmware artifact\npydebuggerupgrade supports firmware artifact zip files and hex files\n\nExample: Upgrade PKOB nano (nEDBG) with zip\n```\npydebuggerupgrade -t nedbg nedbg_fw-1.13.458.zip\n```\n\nExample: Upgrade PKOB nano (nEDBG) with hex\n```\npydebuggerupgrade -t nedbg nedbg.hex\n```\n\n#### Upgrade using pack server\npydebuggerupgrade is capable of fetching firmware artifacts from the Microchip pack server (https://packs.download.microchip.com)\n\nExample: Upgrade PKOB nano (nEDBG) with firmware from the latest released pack\n```\npydebuggerupgrade -t nedbg latest\n```\n\nExample: Upgrade PKOB nano (nEDBG) with firmware from a specific pack version\nNote: This version indicates the pack version and not the firmware version inside it\n```\npydebuggerupgrade -t nedbg 1.0.33\n```\n\n#### Report firmware versions\nThe -r/--report option makes pydebuggerupgrade only report firmware versions and not do any upgrade.  Both the version of the currently loaded firmware and the version of the upgrade candidate is reported\n\nExample: Report versions using latest release from pack server\n```\npydebuggerupgrade -t nedbg -r latest\n```\n\n### Command-line switches\nMany of these switches are optional, and many parameters are automatically set when using a Curiosity Nano kit.\n* -t TOOL to select which tool to use.  Optional if only one is connected.\n* -s SERIALNUMBER to select which tool instance to use.  Optional if only one is connected.  Substring matching on end of USB serial number is supported.\n* -v LEVEL for selecting logging verbosity ('debug', 'info', 'warning', 'error', 'critical')\n* -T TIMEOUT to configure the timeout in seconds when attempting to connect to tool\n* -a to upgrade all tools matching tool type and USB serial number\n* -b to upgrade all tools matching the tool type that are already in boot mode before doing the upgrade of the tool with the specified USB serial number\n* -r to report (i.e. no upgrade) version of upgrade candidate and version of currently loaded firmware\n* -f to force upgrade or downgrade (no version checking)\n* -V to print pydebuggerupgrade version number and exit\n* -m to use Microchip internal artifact server\n\n### Library\npydebuggerupgrade can be used as a library using its \"backend API\".  For example:\n\n```\n# Print the pydebuggerupgrade version\nfrom pydebuggerupgrade.version import VERSION as pydebuggerupgrade_version\nprint(\"pydebuggerupgrade version {}\".format(pydebuggerupgrade_version))\n\n# Print the backend API version\nprint(\"pydebuggerupgrade backend API version: {}\".format(backend.get_api_version()))\n\n# Instantiate backend\nfrom pydebuggerupgrade.backend import Backend\nbackend = Backend()\n\n# Choose from one of these:\n\n# Upgrade to latest published pack\nbackend.upgrade_from_source(source=\"latest\")\n\n# Upgrade with a specific zip\nbackend.upgrade_from_source(source=\"nedbg_fw.zip\", tool_name=\"nedbg\")\n\n# Upgrade with a specific hex file\nbackend.upgrade_from_source(source=\"nedbg.hex\")\n\n```\n\n### Linux systems\nCreate udev rules for the debuggers in HID mode as well as DFU mode:\n```\nExample udev rules file\nStore in /etc/udev/rules.d\n\n# PKOB nano (nEDBG) - debugger on Curiosity Nano\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2175\", MODE=\"0666\"\n# PKOB nano (nEDBG) in DFU mode - bootloader of debugger on Curiosity Nano\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2fc0\", MODE=\"0666\"\n```\n\nNote that udev rules are required for both DFU (boot) mode and normal debugger (application) mode. These rules are detailed in the pyedbglib package: https://pypi.org/project/pyedbglib\n\n## Dependencies\npydebuggerupgrade depends on pyedbglib for its transport protocol.  pyedbglib requires a USB transport library like libusb.  See pyedbglib package for more information.\n\npydebuggerupgrade depend on pyusb for the USB communication with the DFU bootloader of the debugger.\n\n## Versioning\npydebuggerupgrade version can be determined using the CLI:\n```\npydebuggerupgrade -V\n```\nor using the library:\n```\nfrom pydebuggerupgrade.version import VERSION as pydebuggerupgrade_version\nprint(\"pydebuggerupgrade version {}\".format(pydebuggerupgrade_version))\n```\nIn addition, the CLI-backend API is versioned for convenience:\n```\nfrom pydebuggerupgrade.backend import Backend\nbackend = Backend()\nprint(\"pydebuggerupgrade backend API version: {}\".format(backend.get_api_version()))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.microchip.com",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydebuggerupgrade",
    "package_url": "https://pypi.org/project/pydebuggerupgrade/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydebuggerupgrade/",
    "project_urls": {
      "Homepage": "http://www.microchip.com"
    },
    "release_url": "https://pypi.org/project/pydebuggerupgrade/3.7.1.60/",
    "requires_dist": [
      "pyusb",
      "IntelHex",
      "requests",
      "packaging",
      "pyedbglib (>=2.3)",
      "PyYAML",
      "appdirs",
      "pathlib2 ; python_version < \"3\"",
      "pylint ; extra == 'dev'",
      "parameterized ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "parameterized ; extra == 'test'",
      "pytest ; extra == 'test'",
      "mock ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "CLI and library utility for upgrading firmware on Microchip PKOB nano (nEDBG) debugger",
    "version": "3.7.1.60",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11701548,
  "releases": {
    "3.4.6.46": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47b3e991131a514d9fb9fb2a8f4fc86c2885f8c3eb34d7afa93882b8af71fa54",
          "md5": "89f95126586ed70be9cd27817f56deb7",
          "sha256": "6d49cbe17ba31d58dbf207b6b10e23166434dcb28a42fabcb156eecf970454a3"
        },
        "downloads": -1,
        "filename": "pydebuggerupgrade-3.4.6.46-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89f95126586ed70be9cd27817f56deb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49026,
        "upload_time": "2020-10-30T15:38:53",
        "upload_time_iso_8601": "2020-10-30T15:38:53.674565Z",
        "url": "https://files.pythonhosted.org/packages/47/b3/e991131a514d9fb9fb2a8f4fc86c2885f8c3eb34d7afa93882b8af71fa54/pydebuggerupgrade-3.4.6.46-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.7.1.60": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ac466809eb1b94b67a75b8df1f7ab671203a7f3a9c64462ff6ef0994fca584a",
          "md5": "2aa9efc17f30b5fe35f9c2b9f08f123c",
          "sha256": "f4fe2fe379dfa1793be1b0d4d5680d65d5d062affe8cf7633902319949790419"
        },
        "downloads": -1,
        "filename": "pydebuggerupgrade-3.7.1.60-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2aa9efc17f30b5fe35f9c2b9f08f123c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49786,
        "upload_time": "2021-10-12T17:56:29",
        "upload_time_iso_8601": "2021-10-12T17:56:29.492046Z",
        "url": "https://files.pythonhosted.org/packages/8a/c4/66809eb1b94b67a75b8df1f7ab671203a7f3a9c64462ff6ef0994fca584a/pydebuggerupgrade-3.7.1.60-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ac466809eb1b94b67a75b8df1f7ab671203a7f3a9c64462ff6ef0994fca584a",
        "md5": "2aa9efc17f30b5fe35f9c2b9f08f123c",
        "sha256": "f4fe2fe379dfa1793be1b0d4d5680d65d5d062affe8cf7633902319949790419"
      },
      "downloads": -1,
      "filename": "pydebuggerupgrade-3.7.1.60-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2aa9efc17f30b5fe35f9c2b9f08f123c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 49786,
      "upload_time": "2021-10-12T17:56:29",
      "upload_time_iso_8601": "2021-10-12T17:56:29.492046Z",
      "url": "https://files.pythonhosted.org/packages/8a/c4/66809eb1b94b67a75b8df1f7ab671203a7f3a9c64462ff6ef0994fca584a/pydebuggerupgrade-3.7.1.60-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}