{
  "info": {
    "author": "",
    "author_email": "Alexander Morokov <morocov.ap.muz@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CEF Logger\n\nSimple ArcSight logger with full support [Common Event Format.](https://www.secef.net/wp-content/uploads/sites/10/2017/04/CommonEventFormatv23.pdf)\n\n### Features\n* Runtime fields validation of Mandatory and Extensions fields.\n* No need to configure template.\n* Compared with logging handlers\n* A Dynamic fields support.\n* Changing field's values on fly.\n* Custom Extensions fields support.\n\n\n## Usage\n\nUsage of `cef_logger` is a pretty simple.\n\n**First of all creating our events.** \n\n\n```python\n\"\"\"events.py\"\"\"\nfrom datetime import datetime\n\nfrom cef_logger import Event\n\n\n# Create a dynamic field\nclass GetCurrentUnixTimestamp:\n    \n    # Generating timestamp on render log message\n    def __repr__(self):\n        return f'{int(datetime.utcnow().timestamp())}'\n\n\n# Creating Base event with mandatory fields\nclass BaseEvent(Event):\n    SYSLOG_HEADER = True  # if you need syslog header in messages turn it on\n\n    Version = 1\n    DeviceProduct = \"MyProduct\"\n    DeviceVersion = '1.0'\n    DeviceVendor = 'MyCompany'\n    DeviceEventClassID = 'base'\n    Name = 'base'\n    Severity = 1\n\nclass LoginEvent(BaseEvent):    \n    DeviceEventClassID = 'Login'\n    Name = 'System Login'\n    severity = 9\n    msg = 'Signed in system'\n    \n    end = GetCurrentUnixTimestamp()\n\n\nclass LogouEvent(BaseEvent):    \n    DeviceEventClassID = 'Logout'\n    Name = 'System Logout'\n    severity = 9\n    msg = 'Signed out system'\n    \n    end = GetCurrentUnixTimestamp()\n\n```\n\n**Then attaching them to your arbitrary container.**\n\n\n```python\n\"\"\"logger.py\"\"\"\nfrom .events import LoginEvent, LogoutEvent\n\n\nclass ArcSightLogger:\n    # attaching events\n    login_event = LoginEvent()\n    logout_event = LogoutEvent()\n\n```\n\n**Now we can easy to logging our events**\n\n```python\nfrom .logger import MyArcSightLogger\n\n\nMyArcSightLogger.login_event()\n# 2021-01-26T11:46:26.620649+00:00|Login|9|Выполнен вход в систему|end=1618908511\nMyArcSightLogger.logout_event()\n# 2021-01-26T11:46:26.620649+00:00|Logout|9|Выполнен выход из системы|end=1618908525\n\n# Change fields on fly\nMyArcSightLogger.login_event(severity='Medium', msg='Повторный вход в систему')\n# 2021-01-26T11:46:26.620649+00:00|Login|Medium|Повторный вход в систему|end=1618908543\n\n```\n\n\n## Other cases\n\n#### Add additional handlers\n\n```python\nimport logging.handlers\n\nfrom cef_logger import ArcEvent\n\n\nclass BaseEvent(ArcEvent):\n    EMITTERS = (\n        *ArcEvent.EMITTERS,\n        logging.handlers.SysLogHandler(address='/dev/log'),\n    )\n    Version = 1\n    DeviceProduct = \"MyProduct\"\n    DeviceVersion = '1.0'\n    DeviceVendor = 'MyCompany'\n    DeviceEventClassID = 'base'\n    Name = 'base'\n    Severity = 1\n\n```\n\n#### If you want syslog header but use console handler\n\n```python\nfrom cef_logger import ArcEvent\n\n\nclass BaseEvent(ArcEvent):\n    SYSLOG_HEADER = True\n    \n    Version = 1\n    DeviceProduct = \"MyProduct\"\n    DeviceVersion = '1.0'\n    DeviceVendor = 'MyCompany'\n    DeviceEventClassID = 'base'\n    Name = 'base'\n    Severity = 1\n\n    \nbase_event = BaseEvent()\nbase_event()\n# output will be:\n# 2021-07-22T12:40:36.733389+00:00 127.0.1.1 CEF:1|MyCompany|MyProduct|1.0|base|base|1|\n\n```\n\n#### Ordering extensions\n\n**Notes:**\n- Extension and Custom Extension fields can accept None as a value. It's useful when you need order on fly fields.\n- Note that the Custom Extensions will be ordering after Specification Extensions\n\n```python\nfrom cef_logger import Event\n\n\n# Set mandatory fields\nclass BaseEvent(Event):\n    Version = 1\n    DeviceProduct = \"MyProduct\"\n    DeviceVersion = '1.0'\n    DeviceVendor = 'MyCompany'\n    DeviceEventClassID = 'base'\n    Name = 'base'\n    Severity = 1\n    \n\nclass NewEvent(BaseEvent):\n    # Specification Extensions\n    src = '127.0.0.1'\n    # set on fly field (value will be set on call)\n    msg = None\n    \n    # Custom Extensions\n    my_field = 'field'\n    \nmy_new_event = NewEvent()\nmy_new_event(msg='I love python')\n# output will be:\n# CEF:1|MyCompany|MyProduct|1.0|base|base|1|src=127.0.0.1 msg=I love python my_field=field\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cef_logger",
    "package_url": "https://pypi.org/project/cef_logger/",
    "platform": "",
    "project_url": "https://pypi.org/project/cef_logger/",
    "project_urls": {
      "Home": "https://github.com/delatars/cef_logger"
    },
    "release_url": "https://pypi.org/project/cef_logger/1.0.0/",
    "requires_dist": [
      "pydantic >=1.6.1, <2.0.0",
      "pytest >=5.4.3,<6.0.0 ; extra == \"test\"",
      "flake8 >=3.9.2,<4.0.0 ; extra == \"test\"",
      "flake8-bugbear >=0.11.1,<0.12.0 ; extra == \"test\"",
      "flake8-builtins >=1.5.3,<2.0.0 ; extra == \"test\"",
      "flake8-comprehensions >=3.7.0,<4.0.0 ; extra == \"test\"",
      "flake8-debugger >=3.2.1,<4.0.0 ; extra == \"test\"",
      "flake8-isort >=3.0.1,<4.0.0 ; extra == \"test\"",
      "flake8-logging-format >=0.6.0,<0.7.0 ; extra == \"test\"",
      "flake8-mutable >=1.2.0,<2.0.0 ; extra == \"test\"",
      "flake8-pep3101 >=1.3.0,<2.0.0 ; extra == \"test\"",
      "flake8-print >=3.1.4,<4.0.0 ; extra == \"test\"",
      "flake8-quotes >=3.3.1,<4.0.0 ; extra == \"test\"",
      "flake8-string-format >=0.3.0,<0.4.0 ; extra == \"test\"",
      "mypy >=0.910,<1.0 ; extra == \"test\"",
      "isort >=4.3.21,<5.0.0 ; extra == \"test\""
    ],
    "requires_python": ">=3.6.0",
    "summary": "ArcEvent -- Class for creating events for logging.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12724024,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7253c0ede772c69ab912a2f312d5085c1cdb1bd5903fcf944942adde15604d54",
          "md5": "84e40121e057aea4e4f9504b9c1294d2",
          "sha256": "0e7360c62e68e3c9198fe0119b924eb8d69149a364653843e93038a885fbb148"
        },
        "downloads": -1,
        "filename": "cef_logger-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84e40121e057aea4e4f9504b9c1294d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 9350,
        "upload_time": "2022-01-28T19:36:18",
        "upload_time_iso_8601": "2022-01-28T19:36:18.294217Z",
        "url": "https://files.pythonhosted.org/packages/72/53/c0ede772c69ab912a2f312d5085c1cdb1bd5903fcf944942adde15604d54/cef_logger-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "877ddfe9b25491820de5089f2e48014091c270c677cfc92467a5f96f45772348",
          "md5": "6e1b1613a3b8c49cf32274f9882183e0",
          "sha256": "87d7f3b861591e6ee33d12d09f70c9d38cf7795ce16fcba666c5a35761fbec4d"
        },
        "downloads": -1,
        "filename": "cef_logger-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e1b1613a3b8c49cf32274f9882183e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 11035,
        "upload_time": "2022-01-28T19:36:31",
        "upload_time_iso_8601": "2022-01-28T19:36:31.306032Z",
        "url": "https://files.pythonhosted.org/packages/87/7d/dfe9b25491820de5089f2e48014091c270c677cfc92467a5f96f45772348/cef_logger-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7253c0ede772c69ab912a2f312d5085c1cdb1bd5903fcf944942adde15604d54",
        "md5": "84e40121e057aea4e4f9504b9c1294d2",
        "sha256": "0e7360c62e68e3c9198fe0119b924eb8d69149a364653843e93038a885fbb148"
      },
      "downloads": -1,
      "filename": "cef_logger-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "84e40121e057aea4e4f9504b9c1294d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 9350,
      "upload_time": "2022-01-28T19:36:18",
      "upload_time_iso_8601": "2022-01-28T19:36:18.294217Z",
      "url": "https://files.pythonhosted.org/packages/72/53/c0ede772c69ab912a2f312d5085c1cdb1bd5903fcf944942adde15604d54/cef_logger-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "877ddfe9b25491820de5089f2e48014091c270c677cfc92467a5f96f45772348",
        "md5": "6e1b1613a3b8c49cf32274f9882183e0",
        "sha256": "87d7f3b861591e6ee33d12d09f70c9d38cf7795ce16fcba666c5a35761fbec4d"
      },
      "downloads": -1,
      "filename": "cef_logger-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e1b1613a3b8c49cf32274f9882183e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 11035,
      "upload_time": "2022-01-28T19:36:31",
      "upload_time_iso_8601": "2022-01-28T19:36:31.306032Z",
      "url": "https://files.pythonhosted.org/packages/87/7d/dfe9b25491820de5089f2e48014091c270c677cfc92467a5f96f45772348/cef_logger-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}