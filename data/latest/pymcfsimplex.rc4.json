{
  "info": {
    "author": "G#.Blog - Johannes Sommer",
    "author_email": "info@sommer-forst.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n*******************************************************************************\n*\t\t\t          pyMCFSimplex                                *\n*******************************************************************************\n* Version 0.9.1        *\n************************\n* Johannes Sommer, 2013*\n************************\n\n1. What?\n--------\npyMCFSimplex is a Python-Wrapper for the C/C++ MCFSimplex Solver Class from \nthe University of Pisa.\nMCFSimplex is a Class that solves big sized Minimum Cost Flow Problems\nvery fast.\nSee also [1] for a comparison.\n\n2. How?\n-------\npyMCFSimplex was being made through SWIG. Don't ask for the time I spent on\nfiguring out how SWIG works. With more knowledge in C++ I would have been\nfaster - but I'm not a C++ guy! I want it in Python!\n\n3. Who?\n-------\nThe authors of MCFSimplex are Alessandro Bertolini and Antonio Frangioni from\nthe Operations Research Group at the Dipartimento di Informatica of the \nUniversity of Pisa [2].\n\npyMCFSimplex is brought to you by Johannes from the G#.Blog \n\n\thttp://www.sommer-forst.de/blog. \n\nFeel free to contact me: info(at)sommer-forst.de\n\n4. Installation\n---------------\nInstallation prerequisites are:\n- Python 2.7 or Python 2.6 (only Windows)\n- numpy (tested with 1.6.1)\n- a build environment if you want to install from source distribution\n\n4.1 Windows\n-----------\nSelect the appropriate MSI package for your installed Python version (2.6 or 2.7) an simply execute the installer.\n\n4.2 Linux\n---------\nUntar the binary dist package pyMCFSimplex-0.9.1.linux-x86_64.tar.gz with\n\ntar xfvz pyMCFSimplex-0.9.1.linux-x86_64.tar.gz\n\nIt will install into /usr/local/lib/python2.7/dist-packages/.\n\n4.3 Source Distribution\n-----------------------\nGrab the pyMCFSimplex-0.9.1_src_dist.zip file, extract it and run\n\na) linux:\nsudo python setup.py install\n\nb) windows:\nstart a command line as Administrator and run\n\npython setup.py install\n\n\n5. Usage\n--------\nHere is a first start. \"sample.dmx\" must be in the same location of your python script.\nWith these lines of code you can parse a minimum cost flow problem in DIMACS file format and solve it.\n\nfrom pyMCFSimplex import *\nprint \"pyMCFSimplex Version '%s' successfully imported.\" % version()\nmcf = MCFSimplex()\nprint \"MCFSimplex Class successfully instantiated.\"\nFILENAME = 'sample.dmx'\nprint \"Loading network from DIMACS file %s..\" % FILENAME\nf = open(FILENAME,'r')\ninputStr = f.read()\nf.close()\nmcf.LoadDMX(inputStr)\n\nprint \"Setting time..\"\nmcf.SetMCFTime()\nprint \"Solving problem..\"\nmcf.SolveMCF()\nif mcf.MCFGetStatus() == 0:\n    print \"Optimal solution: %s\" %mcf.MCFGetFO()\n    print \"Time elapsed: %s sec \" %(mcf.TimeMCF())\nelse:\n    print \"Problem unfeasible!\"\n    print \"Time elapsed: %s sec \" %(mcf.TimeMCF())\n\nIf you want to load a network not from a DIMACS file, you'll have to call LoadNet() while passing C-arrays to the method.\nC arrays in Python? Yes - don't worry. There are helper methods in pyMCFSimplex, that'll do this for you.\nLook at the following piece of code.\n\nmcf = MCFSimplex()\nprint \"MCFSimplex Class successfully instantiated.\"\nprint \"Reading sample data..\"\n\n'''\nProblem data of a MCFP in DIMACS notation\n\nc Problem line (nodes, links)\np min 4 5\nc\nc Node descriptor lines (supply+ or demand-)\nn 1 4\nn 4 -4\nc\nc Arc descriptor lines (from, to, minflow, maxflow, cost)\na 1 2 0 4 2\na 1 3 0 2 2\na 2 3 0 2 1\na 2 4 0 3 3\na 3 4 0 5 1\n'''\n\n# MCFP problem transformed to integers and lists\nnmx     = 4 # max number of nodes\nmmx     = 5 # max number of arcs\npn      = 4 # current number of nodes\npm      = 5 # current number of arcs\npU      = [4,2,2,3,5] # column maxflow\npC      = [2,2,1,3,1] # column cost\npDfct   = [-4,0,0,4]  # node deficit (supply/demand)\npSn     = [1,1,2,2,3] # column from\npEn     = [2,3,3,4,4] # column to\n\n# call LoadNet() with the return values of the helper methods\n# e.g. CreateDoubleArrayFromList(pU) takes a python list and returns a pointer to a \n# corresponding C array, that is passed as an argument to the method LoadNet()\nmcf.LoadNet(nmx, mmx, pn, pm, CreateDoubleArrayFromList(pU), CreateDoubleArrayFromList(pC),\n            CreateDoubleArrayFromList(pDfct), CreateUIntArrayFromList(pSn),\n            CreateUIntArrayFromList(pEn))\n\nprint \"Setting time..\"\nmcf.SetMCFTime()\nmcf.SolveMCF()\nif mcf.MCFGetStatus() == 0:\n    print \"Optimal solution: %s\" %mcf.MCFGetFO()\n    print \"Time elapsed: %s sec \" %(mcf.TimeMCF())\nelse:\n    print \"Problem unfeasible!\"\n    print \"Time elapsed: %s sec \" %(mcf.TimeMCF())\n\n\nPlease check out the sample script gsharpblog_mcfsolve_test.py for more information.\n\n\n6. Good to know\n---------------\nI changed the original source code of MCFClass.h a little bit for SWIG compatibility.\nAll changes are marked by the following comment line \"//Johannes Sommer\".\nThis included:\n- LoadDMX() accepts in pyMCFSimplex a string value (original: c iostream). The original LoadDMX method is omitted.\n- as SWIG cannot deal with nested classes, I pulled the classes Inf, MCFState and MCFException out of the main class MCFClass.\n\nPerhaps the above mentioned changes to the original source is not necessary, if you know SWIG very well.\nBut I could not figure out how to get these things to work in the SWIG interface file.\nUseful hints are very welcome.\n\n[1] http://bolyai.cs.elte.hu/egres/tr/egres-13-04.ps\n[2] http://www.di.unipi.it/optimize/Software/MCF.html#MCFSimplex\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.sommer-forst.de/blog",
    "keywords": "",
    "license": "LGPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyMCFSimplex",
    "package_url": "https://pypi.org/project/pyMCFSimplex/",
    "platform": "win32",
    "project_url": "https://pypi.org/project/pyMCFSimplex/",
    "project_urls": {
      "Homepage": "http://www.sommer-forst.de/blog"
    },
    "release_url": "https://pypi.org/project/pyMCFSimplex/0.9.4/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "pyMCFSimplex is a Python Wrapper for MCFSimplex",
    "version": "0.9.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14411854,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8e68deec6aa7440327bcf4f8474cd6841c3d23c6f3bdc0356cf5d31970b7758",
          "md5": "1920f475175c113fa2e1b649d9d6bcd5",
          "sha256": "5bfb50ed7b3ba22120c543e745cf115b3ddcd61c7cf7928437ad3a988c30648f"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.1-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1920f475175c113fa2e1b649d9d6bcd5",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1752305,
        "upload_time": "2021-03-01T14:35:12",
        "upload_time_iso_8601": "2021-03-01T14:35:12.496574Z",
        "url": "https://files.pythonhosted.org/packages/d8/e6/8deec6aa7440327bcf4f8474cd6841c3d23c6f3bdc0356cf5d31970b7758/pyMCFSimplex-0.9.1-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e51d384b87d8d7e1228ea84b70d27642fc2b924f3bca3d7753408c35cb902a80",
          "md5": "064bfe074d5da3c7b1481499a39eb32d",
          "sha256": "7b4f5e75ed9cb1566219bb17131e612564fc9759f19ffeeada5a100e1a2779fa"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.2-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "064bfe074d5da3c7b1481499a39eb32d",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1752306,
        "upload_time": "2021-03-01T14:33:26",
        "upload_time_iso_8601": "2021-03-01T14:33:26.944168Z",
        "url": "https://files.pythonhosted.org/packages/e5/1d/384b87d8d7e1228ea84b70d27642fc2b924f3bca3d7753408c35cb902a80/pyMCFSimplex-0.9.2-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b63b8b9a9ae5ae6a5edeb057e71dae813b29edd50e10d0d2c5dad789cef4a0a2",
          "md5": "ca626b6958ca4325900b09540f0bf853",
          "sha256": "48c8a302489e52221fc43b95eef2a92cd0a4abb9072f76c4854f94bea6ab1d4b"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.3-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ca626b6958ca4325900b09540f0bf853",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1752273,
        "upload_time": "2021-03-01T15:11:17",
        "upload_time_iso_8601": "2021-03-01T15:11:17.799693Z",
        "url": "https://files.pythonhosted.org/packages/b6/3b/8b9a9ae5ae6a5edeb057e71dae813b29edd50e10d0d2c5dad789cef4a0a2/pyMCFSimplex-0.9.3-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da1720c7c42ee1a9cf1553497aafaa2b32f6190210b0786b59a667d6b4ddd438",
          "md5": "15e152f1d72a0456aaab328a5ee8e394",
          "sha256": "5dd39e9b9c2e4ea4d732b8635dd10575ba0c1b66ef9d10cab3c4abce32520b9e"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "15e152f1d72a0456aaab328a5ee8e394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 164670,
        "upload_time": "2021-07-06T13:17:07",
        "upload_time_iso_8601": "2021-07-06T13:17:07.744658Z",
        "url": "https://files.pythonhosted.org/packages/da/17/20c7c42ee1a9cf1553497aafaa2b32f6190210b0786b59a667d6b4ddd438/pyMCFSimplex-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79b41e04f2c7dd0cef31f12186c45dc71789d336ee15299ae6263db5420a3ddf",
          "md5": "108fea33efb77fcb1a5ddc6056db7478",
          "sha256": "1b0c6d9677fbc8ed98490b5cc316fcce4192246379e65a0f58e3d2b3f4b2f061"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.4-cp39-cp39-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "108fea33efb77fcb1a5ddc6056db7478",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 278912,
        "upload_time": "2022-07-12T14:28:03",
        "upload_time_iso_8601": "2022-07-12T14:28:03.073325Z",
        "url": "https://files.pythonhosted.org/packages/79/b4/1e04f2c7dd0cef31f12186c45dc71789d336ee15299ae6263db5420a3ddf/pyMCFSimplex-0.9.4-cp39-cp39-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c369fb575c467ba91ccd12e7280e55cb432daf659ce2a09a29a7480357b94b1c",
          "md5": "484fb809adc10ee68b55c407aa615e20",
          "sha256": "b00be330d9e3d49e389a92ebeeb5590293834fec51ba2df9096e805985bff00f"
        },
        "downloads": -1,
        "filename": "pyMCFSimplex-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "484fb809adc10ee68b55c407aa615e20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 164859,
        "upload_time": "2022-07-12T14:28:05",
        "upload_time_iso_8601": "2022-07-12T14:28:05.215149Z",
        "url": "https://files.pythonhosted.org/packages/c3/69/fb575c467ba91ccd12e7280e55cb432daf659ce2a09a29a7480357b94b1c/pyMCFSimplex-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79b41e04f2c7dd0cef31f12186c45dc71789d336ee15299ae6263db5420a3ddf",
        "md5": "108fea33efb77fcb1a5ddc6056db7478",
        "sha256": "1b0c6d9677fbc8ed98490b5cc316fcce4192246379e65a0f58e3d2b3f4b2f061"
      },
      "downloads": -1,
      "filename": "pyMCFSimplex-0.9.4-cp39-cp39-macosx_10_15_x86_64.whl",
      "has_sig": false,
      "md5_digest": "108fea33efb77fcb1a5ddc6056db7478",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 278912,
      "upload_time": "2022-07-12T14:28:03",
      "upload_time_iso_8601": "2022-07-12T14:28:03.073325Z",
      "url": "https://files.pythonhosted.org/packages/79/b4/1e04f2c7dd0cef31f12186c45dc71789d336ee15299ae6263db5420a3ddf/pyMCFSimplex-0.9.4-cp39-cp39-macosx_10_15_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c369fb575c467ba91ccd12e7280e55cb432daf659ce2a09a29a7480357b94b1c",
        "md5": "484fb809adc10ee68b55c407aa615e20",
        "sha256": "b00be330d9e3d49e389a92ebeeb5590293834fec51ba2df9096e805985bff00f"
      },
      "downloads": -1,
      "filename": "pyMCFSimplex-0.9.4.tar.gz",
      "has_sig": false,
      "md5_digest": "484fb809adc10ee68b55c407aa615e20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 164859,
      "upload_time": "2022-07-12T14:28:05",
      "upload_time_iso_8601": "2022-07-12T14:28:05.215149Z",
      "url": "https://files.pythonhosted.org/packages/c3/69/fb575c467ba91ccd12e7280e55cb432daf659ce2a09a29a7480357b94b1c/pyMCFSimplex-0.9.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}