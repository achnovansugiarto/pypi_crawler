{
  "info": {
    "author": "pylhc",
    "author_email": "pylhc@github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# optics_functions\n\n[![Cron Testing](https://github.com/pylhc/optics_functions/workflows/Cron%20Testing/badge.svg)](https://github.com/pylhc/optics_functions/actions?query=workflow%3A%22Cron+Testing%22)\n[![Code Climate coverage](https://img.shields.io/codeclimate/coverage/pylhc/optics_functions.svg?style=popout)](https://codeclimate.com/github/pylhc/optics_functions)\n[![Code Climate maintainability (percentage)](https://img.shields.io/codeclimate/maintainability-percentage/pylhc/optics_functions.svg?style=popout)](https://codeclimate.com/github/pylhc/optics_functions)\n[![GitHub last commit](https://img.shields.io/github/last-commit/pylhc/optics_functions.svg?style=popout)](https://github.com/pylhc/optics_functions)\n<!-- [![GitHub release](https://img.shields.io/github/release/pylhc/optics_functions.svg?style=popout)](https://github.com/pylhc/optics_functions) -->\n[![PyPI Version](https://img.shields.io/pypi/v/optics_functions?label=PyPI&logo=pypi)](https://pypi.org/project/optics_functions/)\n[![GitHub release](https://img.shields.io/github/v/release/pylhc/optics_functions?logo=github)](https://github.com/pylhc/optics_functions/)\n[![Conda-forge Version](https://img.shields.io/conda/vn/conda-forge/optics_functions?color=orange&logo=anaconda)](https://anaconda.org/conda-forge/optics_functions)\n[![DOI](https://zenodo.org/badge/215268186.svg)](https://zenodo.org/badge/latestdoi/215268186)\n\nThis package provides functions to calculate various optics parameters from **MAD-X TWISS** outputs, such as RDTs and coupling.\nThe functionality mainly manipulates and returns **TFS** files or `TfsDataFrame` objects from our `tfs-pandas` package.\n\nSee the [API documentation](https://pylhc.github.io/optics_functions/) for details.\n\n## Installing\n\nInstallation is easily done via `pip`:\n```bash\npython -m pip install optics_functions\n```\n\nOne can also install in a `conda` environment via the `conda-forge` channel with:\n```bash\nconda install -c conda-forge optics_functions\n```\n\n## Example Usage\n\n> **Warning:** In certain scenarios, e.g. in case of non-zero closed orbit, the `RDT` calculations can be unreliable for **thick** lattices.\n> Convert to a _thin_ lattice by slicing the lattice to reduce the error of the analytical approximation.\n\n#### Coupling Example:\n\n```python\nimport logging\nimport sys\n\nimport tfs  # tfs-pandas\n\nfrom optics_functions.coupling import coupling_via_cmatrix, closest_tune_approach\nfrom optics_functions.utils import split_complex_columns\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO, format=\"%(message)s\")\n\n# read MAD-X twiss output\ndf_twiss = tfs.read(\"twiss.tfs\", index=\"NAME\")\n\n# calculate coupling from the cmatrix\ndf_coupling = coupling_via_cmatrix(df_twiss)\n\n# Example:\n# print(df_coupling) \n#\n#                            F1001               F1010  ...       C22     GAMMA\n# NAME                                                  ...\n# IP3          -0.000000+0.000004j -0.004026+0.003574j  ... -0.007140  1.000058\n# MCBWV.4R3.B1  0.000001+0.000004j -0.002429+0.004805j  ... -0.009601  1.000058\n# BPMW.4R3.B1   0.000001+0.000004j -0.002351+0.004843j  ... -0.009678  1.000058\n# MQWA.A4R3.B1  0.000001+0.000004j -0.001852+0.005055j  ... -0.010102  1.000058\n# MQWA.B4R3.B1  0.000001+0.000004j -0.001231+0.005241j  ... -0.010474  1.000058\n# ...                          ...                 ...  ...       ...       ...\n# MQWB.4L3.B1  -0.000000+0.000004j -0.005059+0.001842j  ... -0.003675  1.000058\n# MQWA.B4L3.B1 -0.000000+0.000004j -0.004958+0.002098j  ... -0.004187  1.000058\n# MQWA.A4L3.B1 -0.000000+0.000004j -0.004850+0.002337j  ... -0.004666  1.000058\n# BPMW.4L3.B1  -0.000000+0.000004j -0.004831+0.002376j  ... -0.004743  1.000058\n# MCBWH.4L3.B1 -0.000000+0.000004j -0.004691+0.002641j  ... -0.005274  1.000058\n\n\n# calculate the closest tune approach from the complex rdts\ndf_dqmin = closest_tune_approach(\n    df_coupling, qx=df_twiss.Q1, qy=df_twiss.Q2, method='calaga'\n)\n\n# Example:\n# print(df_dqmin) \n#\n#                  DELTAQMIN\n# NAME\n# IP3           1.760865e-07\n# MCBWV.4R3.B1  1.760865e-07\n# BPMW.4R3.B1   1.760866e-07\n# MQWA.A4R3.B1  1.760865e-07\n# MQWA.B4R3.B1  1.760865e-07\n# ...                    ...\n# MQWB.4L3.B1   1.760865e-07\n# MQWA.B4L3.B1  1.760865e-07\n# MQWA.A4L3.B1  1.760866e-07\n# BPMW.4L3.B1   1.760865e-07\n# MCBWH.4L3.B1  1.760865e-07\n\n# do something with the data.\n# (...)\n\n# write out\n# as the writer can only handle real data, \n# you need to split the rdts into real and imaginary parts before writing\ntfs.write(\n    \"coupling.tfs\",\n    split_complex_columns(df_coupling, columns=[\"F1001\", \"F1010\"]),\n    save_index=\"NAME\",\n)\n```\n\n#### RDT Example:\n\n```python\nimport logging\nimport sys\n\nimport tfs  # tfs-pandas\n\nfrom optics_functions.rdt import calculate_rdts, generator, jklm2str\nfrom optics_functions.utils import prepare_twiss_dataframe, split_complex_columns\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO, format=\"%(message)s\")\n\n# read MAD-X twiss output\ndf_twiss = tfs.read(\"twiss.tfs\", index=\"NAME\")\n\n# generate all valid RDT names, here for RDTs of order 2\nrdts = [jklm2str(*jklm) for jklm in generator(orders=[2])[2]]\n\n# check correct signs (i.e if beam==4), merge twiss and errors, \n# add empty K(S)L columns if needed\ndf_twiss = prepare_twiss_dataframe(df_twiss=df_twiss, df_errors=None, max_order=5)\n\n# do the actual rdt calculation\ndf_rdts = calculate_rdts(\n    df_twiss,\n    rdts=rdts,\n    loop_phases=True,  # loop over phase-advance calculation, slower but saves memory\n    feeddown=2,  # include feed-down up to this order\n    complex_columns=True,  # complex output\n)\n\n# Example: \n# print(df_rdts) \n#                            F0002  ...               F2000\n# NAME                              ...\n# IP3           2.673376-1.045712j  ... -2.863617-0.789910j\n# MCBWV.4R3.B1  2.475684-1.453081j  ... -1.927365-2.260426j\n# BPMW.4R3.B1   2.470411-1.462027j  ... -1.862287-2.314336j\n# MQWA.A4R3.B1  2.440763-1.511004j  ... -1.413706-2.612603j\n# MQWA.B4R3.B1  2.228282-1.555324j  ... -0.788608-2.855177j\n# ...                          ...  ...                 ...\n# MQWB.4L3.B1   2.733194+0.167312j  ... -2.632290+0.135418j\n# MQWA.B4L3.B1  2.763986-0.041253j  ... -2.713212+0.063256j\n# MQWA.A4L3.B1  2.804960-0.235493j  ... -2.847616-0.017922j\n# BPMW.4L3.B1   2.858218-0.266543j  ... -2.970384-0.032890j\n# MCBWH.4L3.B1  2.831426-0.472735j  ... -2.966818-0.149180j\n\n# do something with the rdts.\n# (...)\n\n# write out\n# as the writer can only handle real data, either set real = True above \n# or split the rdts into real and imaginary parts before writing\ntfs.write(\n    \"rdts.tfs\",\n    split_complex_columns(df_rdts, columns=rdts),\n    save_index=\"NAME\"\n)\n```\n\n#### Appending Example:\n\n```python\nimport logging\nimport sys\n\nimport tfs  # tfs-pandas\n\nfrom optics_functions.coupling import coupling_via_cmatrix, closest_tune_approach\nfrom optics_functions.utils import split_complex_columns\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO, format=\"%(message)s\")\n\n# read MAD-X twiss output\ndf_twiss = tfs.read(\"twiss.tfs\", index=\"NAME\")\n\n# calculate coupling from the cmatrix and append to original dataframe\n# output=['rdts'] is used to avoid the output of the gamma and C## columns.\ndf_twiss[[\"F1001\", \"F1010\"]] = coupling_via_cmatrix(df_twiss, output=['rdts'])\n\n# Example:\n# print(df_twiss)\n# \n# Headers:\n# NAME: TWISS\n# TYPE: TWISS\n# SEQUENCE: LHCB1\n# ...\n# ORIGIN: 5.05.02 Linux 64\n# DATE: 01/02/21\n# TIME: 19.58.08\n# \n#                  KEYWORD           S  ...               F1001               F1010\n# NAME                                  ...\n# IP3               MARKER      0.0000  ... -0.000000+0.000004j -0.004026+0.003574j\n# MCBWV.4R3.B1     VKICKER     21.8800  ...  0.000001+0.000004j -0.002429+0.004805j\n# BPMW.4R3.B1      MONITOR     22.5205  ...  0.000001+0.000004j -0.002351+0.004843j\n# MQWA.A4R3.B1  QUADRUPOLE     26.1890  ...  0.000001+0.000004j -0.001852+0.005055j\n# MQWA.B4R3.B1  QUADRUPOLE     29.9890  ...  0.000001+0.000004j -0.001231+0.005241j\n# ...                  ...         ...  ...                 ...                 ...\n# MQWB.4L3.B1   QUADRUPOLE  26628.2022  ... -0.000000+0.000004j -0.005059+0.001842j\n# MQWA.B4L3.B1  QUADRUPOLE  26632.0022  ... -0.000000+0.000004j -0.004958+0.002098j\n# MQWA.A4L3.B1  QUADRUPOLE  26635.8022  ... -0.000000+0.000004j -0.004850+0.002337j\n# BPMW.4L3.B1      MONITOR  26636.4387  ... -0.000000+0.000004j -0.004831+0.002376j\n# MCBWH.4L3.B1     HKICKER  26641.0332  ... -0.000000+0.000004j -0.004691+0.002641j\n```\n### Modules\n\n- `coupling` - Functions to estimate coupling from twiss dataframes and\n  different methods to calculate the closest tune approach from\n  the calculated coupling RDTs.\n  ([**coupling.py**](optics_functions/coupling.py), [**doc**](https://pylhc.github.io/optics_functions/modules/coupling.html))\n- `rdt` - Functions for the calculations of Resonance Driving Terms, as well as\n  getting lists of valid driving term indices for certain orders. \n  ([**rdt.py**](optics_functions/rdt.py), [**doc**](https://pylhc.github.io/optics_functions/modules/rdt.html))\n- `utils` - Helper functions to prepare the twiss dataframes for use with the optics\n  functions as well as reusable utilities,\n  that are needed within multiple optics calculations.\n  ([**utils.py**](optics_functions/utils.py), [**doc**](https://pylhc.github.io/optics_functions/modules/utils.html))\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pylhc/optics_functions",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "optics-functions",
    "package_url": "https://pypi.org/project/optics-functions/",
    "platform": null,
    "project_url": "https://pypi.org/project/optics-functions/",
    "project_urls": {
      "Homepage": "https://github.com/pylhc/optics_functions"
    },
    "release_url": "https://pypi.org/project/optics-functions/0.1.2/",
    "requires_dist": [
      "numpy (>=1.19.0)",
      "pandas (>=1.0)",
      "tfs-pandas (>=2.0)",
      "pytest (>=5.2) ; extra == 'all'",
      "pytest-cov (>=2.9) ; extra == 'all'",
      "sphinx ; extra == 'all'",
      "sphinx-rtd-theme ; extra == 'all'",
      "sphinx ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "pytest (>=5.2) ; extra == 'test'",
      "pytest-cov (>=2.9) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Calculate optics parameters from TWISS outputs.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14011568,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9db02d716b310033c858c4e687e4667dd47db8a34135f4cc04b39bc2154fb1d1",
          "md5": "09c33fbd2af4cae2b2a065aa9dad0534",
          "sha256": "560eed825e15e9eae544fb41ed470b9d9d81b8e2303ab962d2cf78d9c729df39"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09c33fbd2af4cae2b2a065aa9dad0534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16716,
        "upload_time": "2021-02-08T12:40:36",
        "upload_time_iso_8601": "2021-02-08T12:40:36.232211Z",
        "url": "https://files.pythonhosted.org/packages/9d/b0/2d716b310033c858c4e687e4667dd47db8a34135f4cc04b39bc2154fb1d1/optics_functions-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba47c6eaeb1201874fb716ac72125006b0c6c90e6b3037fcecc708a804c01dc9",
          "md5": "1fa5377731751e931e5041ff19da2a40",
          "sha256": "f308b74096ee7beb6cd2aa8147897056a1c1113f1b1b00d1af2732e1e89f154d"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1fa5377731751e931e5041ff19da2a40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18138,
        "upload_time": "2021-02-08T12:40:37",
        "upload_time_iso_8601": "2021-02-08T12:40:37.460328Z",
        "url": "https://files.pythonhosted.org/packages/ba/47/c6eaeb1201874fb716ac72125006b0c6c90e6b3037fcecc708a804c01dc9/optics_functions-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6cdd4bf40d46ac15152432145897821cc3f531d5be125bce3f31530fad14e61",
          "md5": "71094a6e74c2de4a5e75ee643fea855b",
          "sha256": "081b88632902fb920224192558dd5a9ad8314f2249d28e59519d055db680cc4b"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71094a6e74c2de4a5e75ee643fea855b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18628,
        "upload_time": "2021-10-01T08:41:32",
        "upload_time_iso_8601": "2021-10-01T08:41:32.002050Z",
        "url": "https://files.pythonhosted.org/packages/c6/cd/d4bf40d46ac15152432145897821cc3f531d5be125bce3f31530fad14e61/optics_functions-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a86674a8dc0ac643b3d339c3384a4fb1e074cdc1c43b28b3cbf18a0ce47b1f61",
          "md5": "37cd1cce4efa673de96be89c00252dfb",
          "sha256": "24dec7fd9dc3ea8162de6c31055d98c0806f7f92f227de9215d8a7276192c9ef"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37cd1cce4efa673de96be89c00252dfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16758,
        "upload_time": "2021-10-01T08:41:33",
        "upload_time_iso_8601": "2021-10-01T08:41:33.106763Z",
        "url": "https://files.pythonhosted.org/packages/a8/66/74a8dc0ac643b3d339c3384a4fb1e074cdc1c43b28b3cbf18a0ce47b1f61/optics_functions-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "103082613c12b52ca53db630fad3f91a7e52298519e80ddc8ecb72cf5e77338c",
          "md5": "dcc1a22f9867edba59445bf766e23ed8",
          "sha256": "47132c60b7216ee70cb33fa234acd79f7c640112fa24976cfc6737cf60d54c06"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcc1a22f9867edba59445bf766e23ed8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18482,
        "upload_time": "2022-06-02T11:38:14",
        "upload_time_iso_8601": "2022-06-02T11:38:14.082183Z",
        "url": "https://files.pythonhosted.org/packages/10/30/82613c12b52ca53db630fad3f91a7e52298519e80ddc8ecb72cf5e77338c/optics_functions-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c87d86030b0272b6997f5599767f9463a166de1a7ac2dc853992af193649bb59",
          "md5": "f3bd52ddb5706f5fbe112c65973f5a66",
          "sha256": "40c8f5dac12a45f5b158a276e43bb402d817e58db1f24203181f126fc0fb9f87"
        },
        "downloads": -1,
        "filename": "optics_functions-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f3bd52ddb5706f5fbe112c65973f5a66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19453,
        "upload_time": "2022-06-02T11:38:15",
        "upload_time_iso_8601": "2022-06-02T11:38:15.456728Z",
        "url": "https://files.pythonhosted.org/packages/c8/7d/86030b0272b6997f5599767f9463a166de1a7ac2dc853992af193649bb59/optics_functions-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "103082613c12b52ca53db630fad3f91a7e52298519e80ddc8ecb72cf5e77338c",
        "md5": "dcc1a22f9867edba59445bf766e23ed8",
        "sha256": "47132c60b7216ee70cb33fa234acd79f7c640112fa24976cfc6737cf60d54c06"
      },
      "downloads": -1,
      "filename": "optics_functions-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dcc1a22f9867edba59445bf766e23ed8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18482,
      "upload_time": "2022-06-02T11:38:14",
      "upload_time_iso_8601": "2022-06-02T11:38:14.082183Z",
      "url": "https://files.pythonhosted.org/packages/10/30/82613c12b52ca53db630fad3f91a7e52298519e80ddc8ecb72cf5e77338c/optics_functions-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c87d86030b0272b6997f5599767f9463a166de1a7ac2dc853992af193649bb59",
        "md5": "f3bd52ddb5706f5fbe112c65973f5a66",
        "sha256": "40c8f5dac12a45f5b158a276e43bb402d817e58db1f24203181f126fc0fb9f87"
      },
      "downloads": -1,
      "filename": "optics_functions-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f3bd52ddb5706f5fbe112c65973f5a66",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19453,
      "upload_time": "2022-06-02T11:38:15",
      "upload_time_iso_8601": "2022-06-02T11:38:15.456728Z",
      "url": "https://files.pythonhosted.org/packages/c8/7d/86030b0272b6997f5599767f9463a166de1a7ac2dc853992af193649bb59/optics_functions-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}