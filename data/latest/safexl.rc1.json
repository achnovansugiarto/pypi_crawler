{
  "info": {
    "author": "Eric Smith",
    "author_email": "ThePoetCoder@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Office/Business :: Financial :: Spreadsheet"
    ],
    "description": "# safexl - The Safe Way to Excel\n##### A wrapper around the pywin32 module for easier use and automated cleanup of Excel Application COM objects\nThe pywin32 library grants extraordinary capabilities to interact with Windows applications, \nbut includes many oddities usually learned through trial and error, as seen in Stack Overflow posts such as these:\n* [COM: excelApplication.Application.Quit() preserves the process](https://stackoverflow.com/questions/18421457/com-excelapplication-application-quit-preserves-the-process)\n* [Can't close Excel completely using win32com on Python](https://stackoverflow.com/questions/10221150/cant-close-excel-completely-using-win32com-on-python)\n* [Loading addins when Excel is instantiated programmatically](https://stackoverflow.com/questions/213375/loading-addins-when-excel-is-instantiated-programmatically)\n* [AutoFilter method of Range class failed (Dispatch vs EnsureDispatch)](https://stackoverflow.com/questions/22930751/autofilter-method-of-range-class-failed-dispatch-vs-ensuredispatch)\n\nMy experience with automating Excel using pywin32 lead me to create `safexl`, a pywin32 wrapper centered around easier use and \nautomated cleanup of Excel Application COM objects in Python. The main functionality of this package is a context-managed \n`application` generator that you can use inside a `with` block, built with some pywin32 best practices in place and a few psutil \ntools focused on working with Excel.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n## Install\nYou can import the library with pip:\n```cmd\npip install safexl\n```\nOr you can download it [here](https://github.com/ThePoetCoder/safexl) at GitHub.\n\nThis module requires:\n* [pywin32](https://pypi.org/project/pywin32/)\n* [psutil](https://pypi.org/project/psutil/)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n## Usage\nThis package makes writing pywin32 code in Python as simple as:\n```python\nimport safexl\n\nwith safexl.application(kill_after=False, maximize=True, include_addins=True) as app:\n    wb = app.Workbooks.Add()\n    ws = wb.ActiveSheet\n    rng = ws.Range(\"B1\")\n    rng.Value = \"Hello, World!\"\n    rng.Interior.Color = safexl.colors.rgbRed  # colors are included\n    rng.EntireColumn.AutoFit()\n    ws.Columns(\"A\").Delete(Shift=safexl.xl_constants.xlToLeft)  # constants are included\n\n# This results in Excel being opened to a Sheet where cell \"A1\" has 'Hello, World!' in it with a red background\n```\n\nIf you've programmatically worked with Excel in a Win32 environment before, this code should look very familiar, \nas I am not altering the COM object itself before yielding it to you inside a `with` block; I am instead providing \na means to create and delete it more easily. \n\n_If you would like to alter the COM object (for things like turning off ScreenUpdating\n while your code runs), then please see the **Performance** section near the bottom._\n\nIn this way, the following two code snippets will have the same effect:\n#### 1.) without safexl\n```python\nimport pythoncom\nimport win32com.client\n\npythoncom.CoInitialize()\napp = win32com.client.Dispatch(\"Excel.Application\")\ntry:\n    #######################\n    # Your code goes here #\n    #######################\nfinally:\n    app.Quit()\n    del app\n    pythoncom.CoUninitialize()\n```\n\n#### 2.) with safexl\n```python\nimport safexl\n\nwith safexl.application(kill_after=True) as app:\n    #######################\n    # Your code goes here #\n    #######################\n```\nAs you can see, using safexl results in a lot less boilerplate code, from 9 lines to 2.\n\nThe `application` wrapper comes with 3 boolean parameters to indicate what you would like to do with the application once your \n`with` block is complete:\n1. `kill_after` - kill the Excel process upon leaving the `with` block\n2. `maximize` - Optional / Defaults to `True` - Will not be used if you set `kill_after=True`. Maximizes each Excel Window for\neach Workbook added during the `with` block.\n3. `include_addins` - Optional / Defaults to `False` - Will not be used if you set `kill_after=True`. Loads your installed Excel \nAdd-ins to the newly created instance (with a performance hit to do so).\n\nIn the event of an error occuring inside your `with` block, the `safexl.application` cleanup process will carefully remove any new\nworkbooks you've opened in Excel, leaving any workbooks you already had open prior to the `with` block untouched. The same goes \nfor if you chose to set `kill_after=True`; only the Workbooks you create inside the `with` block will be closed.\nIn addition to the `application` wrapper, I have included an handful of other tools to make working with Excel even easier, including:\n\n* is_excel_open()\n* kill_all_instances_of_excel()\n* close_workbooks(app, workbooks)\n* see_excel(app, window_state)\n* workbooks_currently_open(app)\n* last_row(worksheet)\n* last_column(worksheet)\n* worksheet_name_sanitization(worksheet_name)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n## Performance\nA number of performance enhancing options can be set on Excel Application objects, and will come in handy most whenever you are \nworking with large workbooks and amounts of data. In my balance between allowing you the most freedom to do what you wish with the \napplication object and wrapping your object for safer error handling, I am yielding a bare pywin32 application object to you \ninside the `with` block. If you wish to take advantage of the various performance enhancing settings available natively in the \nExcel Application, I suggest using your own error handling inside the `with` block, to verify that the settings get switched back \nto normal when you're finished, even if you encounter an error during your work. Using safexl in this way would look something \nlike this:\n```python\nimport safexl\n\nwith safexl.application(kill_after=False) as app:\n    try:\n        app.ScreenUpdating = False\n        app.DisplayStatusBar = False\n        app.EnableEvents = False\n\n        wb = app.Workbooks.Add()\n        # can only set calculation once at least 1 workbook is open\n        app.Calculation = safexl.xl_constants.xlCalculationManual\n\n        #######################\n        # Your code goes here #\n        #######################\n\n    except Exception as e:\n        # if you don't re-raise the error here, you will not be warned that an error occured \n        # or get the benefit of reading the error message\n        raise e\n\n    else:\n        pass\n\n    finally:\n        app.ScreenUpdating = True\n        app.DisplayStatusBar = True\n        app.EnableEvents = True\n        app.Calculation = safexl.xl_constants.xlCalculationAutomatic\n\n```\n\n##### A note on setting the Calculation\nUnfortunately, due to an oddity in the Excel Application OOP design, even though the Calculation mode is set on the Application object \n(instead of the Workbook object) if no workbooks are open or visible in your instance of the Application, then the constant for \nan \"#N/A\" error is returned, as seen by code like this:\n```\n>>> import win32com.client\n>>> import pythoncom\n>>> pythoncom.CoInitialize()\n>>> app = win32com.client.Dispatch(\"Excel.Application\")\n>>> app.Calculation  # expect constant for #N/A\n-2146826246\n>>> wb = app.Workbooks.Add()\n>>> app.Calculation  # expect XlCalculation constant\n-4105\n>>> wb.Close()\n>>> app.Calculation  # expect constant for #N/A\n-2146826246\n```\nMore can be read about how Excel handles Calculation modes at these links:\n* [How Excel determines the current mode of calculation](https://docs.microsoft.com/en-us/office/troubleshoot/excel/current-mode-of-calculation)\n* [Excel: 'Unable to set the Calculation property of the Application class'](https://stackoverflow.com/questions/275630/excel-unable-to-set-the-calculation-property-of-the-application-class)\n\nSuffice it to say, even though we think about the calculation mode being an attribute of each individual workbook, it is actually \n__set__ at the application level. I'm assuming this was for performance and/or sanity reasons, but the end result is that you are unable to \nget or set a proper Calculation mode for the application until you open a workbook first.\n\n## Cookbook\n\n##### Create & Save Workbook without viewing Application\n```python\nimport safexl\n\nwith safexl.application(kill_after=True) as app:\n    wb = app.Workbooks.Add()\n\n    #######################\n    # Your code goes here #\n    #######################\n\n    wb.SaveAs(\"Cookbook.xlsx\")\n    wb.Close()\n```\n\n##### Create a Workbook & View it Without Saving\n```python\nimport safexl\n\nwith safexl.application(kill_after=False, maximize=True, include_addins=True) as app:\n    wb = app.Workbooks.Add()\n\n    #######################\n    # Your code goes here #\n    #######################\n```\n\n##### Minimize All Excel Windows that are Currently Open\n```python\nimport safexl\n\nwith safexl.application(kill_after=True) as app:\n    safexl.see_excel(app.Workbooks, safexl.xl_constants.xlMinimized)\n```\n\n##### Send Pandas Dataframe to Excel Worksheet\n```python\nimport safexl\nimport pandas as pd\ndata = {\n    'A': [1, 2, 3],\n    'B': [4, 5, 6],\n    'C': [7, 8, 9]\n    }\ndf = pd.DataFrame(data)\n\nwith safexl.application(kill_after=False) as app:\n    wb = app.Workbooks.Add()\n    ws = wb.ActiveSheet\n\n    df.to_clipboard(excel=True)\n    ws.Paste()\n    ws.Range(\"A1\").Select()  # Otherwise entire dataframe range will be selected upon viewing\n```\n\n----------------------------------------------------------------------------------------------------------------------------------\n## Similar Packages to Consider\n* [xlwings](https://docs.xlwings.org/en/stable/)\n* [OpenPyXL](https://openpyxl.readthedocs.io/en/stable/)\n* [XlsxWriter](https://xlsxwriter.readthedocs.io/)\n\n## Contact Me\n* ThePoetCoder at gmail.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThePoetCoder/safexl",
    "keywords": "safexl Excel pywin32 win32 spreadsheet",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "safexl",
    "package_url": "https://pypi.org/project/safexl/",
    "platform": "",
    "project_url": "https://pypi.org/project/safexl/",
    "project_urls": {
      "Homepage": "https://github.com/ThePoetCoder/safexl"
    },
    "release_url": "https://pypi.org/project/safexl/0.0.7/",
    "requires_dist": [
      "pywin32 (>=223)",
      "psutil (>=5.6.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "The Safe Way to Excel",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7706029,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7c423dd98ed32bbea6b69c8cdd31d8120dc28b3fd3819125f88252dfefc82ab",
          "md5": "09b6fd142ddd4e0e20e23bcf1ab6b98b",
          "sha256": "a114d98bc54a85116817c1ddcf6370dd40ae7290eda6e961b3aa0a116db39f33"
        },
        "downloads": -1,
        "filename": "safexl-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09b6fd142ddd4e0e20e23bcf1ab6b98b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28242,
        "upload_time": "2020-07-15T14:35:56",
        "upload_time_iso_8601": "2020-07-15T14:35:56.500842Z",
        "url": "https://files.pythonhosted.org/packages/f7/c4/23dd98ed32bbea6b69c8cdd31d8120dc28b3fd3819125f88252dfefc82ab/safexl-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4dbb4bee2891d9f58cd1bece3978de4e97c4f5df19c3bf3705e434d0b84dd4e",
          "md5": "45ca4c8d0890ee678726430a64606f14",
          "sha256": "02ad4faec563a3c0332a8d136b13b36d690d6b74349cd2ea683c16b453193bd1"
        },
        "downloads": -1,
        "filename": "safexl-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "45ca4c8d0890ee678726430a64606f14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30454,
        "upload_time": "2020-07-15T14:35:57",
        "upload_time_iso_8601": "2020-07-15T14:35:57.725182Z",
        "url": "https://files.pythonhosted.org/packages/c4/db/b4bee2891d9f58cd1bece3978de4e97c4f5df19c3bf3705e434d0b84dd4e/safexl-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7c423dd98ed32bbea6b69c8cdd31d8120dc28b3fd3819125f88252dfefc82ab",
        "md5": "09b6fd142ddd4e0e20e23bcf1ab6b98b",
        "sha256": "a114d98bc54a85116817c1ddcf6370dd40ae7290eda6e961b3aa0a116db39f33"
      },
      "downloads": -1,
      "filename": "safexl-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09b6fd142ddd4e0e20e23bcf1ab6b98b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28242,
      "upload_time": "2020-07-15T14:35:56",
      "upload_time_iso_8601": "2020-07-15T14:35:56.500842Z",
      "url": "https://files.pythonhosted.org/packages/f7/c4/23dd98ed32bbea6b69c8cdd31d8120dc28b3fd3819125f88252dfefc82ab/safexl-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4dbb4bee2891d9f58cd1bece3978de4e97c4f5df19c3bf3705e434d0b84dd4e",
        "md5": "45ca4c8d0890ee678726430a64606f14",
        "sha256": "02ad4faec563a3c0332a8d136b13b36d690d6b74349cd2ea683c16b453193bd1"
      },
      "downloads": -1,
      "filename": "safexl-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "45ca4c8d0890ee678726430a64606f14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30454,
      "upload_time": "2020-07-15T14:35:57",
      "upload_time_iso_8601": "2020-07-15T14:35:57.725182Z",
      "url": "https://files.pythonhosted.org/packages/c4/db/b4bee2891d9f58cd1bece3978de4e97c4f5df19c3bf3705e434d0b84dd4e/safexl-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}