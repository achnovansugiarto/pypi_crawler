{
  "info": {
    "author": "Easy SQL from Thoughtworks",
    "author_email": "easy_sql@thoughtworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Easy SQL\n\nEasy SQL is built to ease the data ETL development process.\nWith Easy SQL, you can develop your ETL in SQL in an imperative way.\nIt defines a few simple syntax on top of standard SQL, with which SQL could be executed one by one.\nEasy SQL also provides a processor to handle all the new syntax.\nSince this is SQL agnostic, any SQL engine could be plugged-in as a backend.\nThere are built-in support for several popular SQL engines, including SparkSQL, PostgreSQL, Clickhouse, Aliyun Maxcompute, Google BigQuery.\nMore will be added in the near future.\n\n- Docs: <https://easy-sql.readthedocs.io/>\n- Enterprise extended product: <https://data-workbench.com/>\n\n[![GitHub Action Build](https://github.com/easysql/easy_sql/actions/workflows/build.yaml/badge.svg?branch=main&event=push)](https://github.com/easysql/easy_sql/actions/workflows/build.yaml?query=branch%3Amain+event%3Apush)\n[![Docs Build](https://readthedocs.org/projects/easy-sql/badge/?version=latest)](https://easy-sql.readthedocs.io/en/latest/?badge=latest)\n[![EasySQL Coverage](https://codecov.io/gh/easysql/easy_sql/branch/main/graph/badge.svg)](https://codecov.io/gh/easysql/easy_sql)\n\n## Install Easy SQL\n\nInstall Easy SQL using pip: `python3 -m pip install easy_sql-easy_sql[extra,extra]`\n\nCurrently we are providing below extras, choose according to your need:\n- cli\n- linter\n- spark\n- pg\n- clickhouse\n\n## Building Easy SQL\n\nInternally we use `poetry` to manage the dependencies. So make sure you have [installed it](https://python-poetry.org/docs/master/#installation). Package could be built with the following make command: `make package-pip` or just `poetry build`.\n\nAfter the above command, there will be a file named `easy_sql*.whl` generated in the `dist` folder.\nYou can install it with command `python3 -m pip install dist/easy_sql*.whl[extra]` or just `poetry install -E 'extra extra'`.\n\n## First ETL with Easy SQL\n\nInstall easy_sql with spark as the backend: `python3 -m pip install easy_sql-easy_sql[spark,cli]`.\n\n### For spark backend\n\nCreate a file named `sample_etl.spark.sql` with content as below:\n\n```sql\n-- prepare-sql: drop database if exists sample cascade\n-- prepare-sql: create database sample\n-- prepare-sql: create table sample.test as select 1 as id, '1' as val\n\n-- target=variables\nselect true as __create_output_table__\n\n-- target=variables\nselect 1 as a\n\n-- target=log.a\nselect '${a}' as a\n\n-- target=log.test_log\nselect 1 as some_log\n\n-- target=check.should_equal\nselect 1 as actual, 1 as expected\n\n-- target=temp.result\nselect\n    ${a} as id, ${a} + 1 as val\nunion all\nselect id, val from sample.test\n\n-- target=output.sample.result\nselect * from result\n\n-- target=log.sample_result\nselect * from sample.result\n```\n\nRun it with command:\n\n```bash\nbash -c \"$(python3 -m easy_sql.data_process -f sample_etl.spark.sql -p)\"\n```\n\n### For postgres backend:\n\nYou need to start a postgres instance first.\n\nIf you have docker, run the command below:\n\n```bash\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=123456 postgres\n```\n\nCreate a file named `sample_etl.postgres.sql` with content as the test file [here](https://github.com/easysql/easy_sql/blob/main/test/sample_etl.postgres.sql).\n\nMake sure that you have install the corresponding backend with `python3 -m pip install easy-sql-easy-sql[cli,pg]`\n\nRun it with command:\n\n```bash\nPG_URL=postgresql://postgres:123456@localhost:5432/postgres python3 -m easy_sql.data_process -f sample_etl.postgres.sql\n```\n\n### For clickhouse backend:\n\nYou need to start a clickhouse instance first.\n\nIf you have docker, run the command below:\n\n```bash\ndocker run -d --name clickhouse -p 9000:9000 yandex/clickhouse-server:20.12.5.18\n```\n\nCreate a file named `sample_etl.clickhouse.sql` with content as the test file [here](https://github.com/easysql/easy_sql/blob/main/test/sample_etl.clickhouse.sql).\n\nMake sure that you have install the corresponding backend with `python3 -m pip install easy-sql-easy-sql[cli,clickhouse]`\n\nRun it with command:\n\n```bash\nCLICKHOUSE_URL=clickhouse+native://default@localhost:9000 python3 -m easy_sql.data_process -f sample_etl.clickhouse.sql\n```\n\n### For other backends:\n\nThe usage is similar, please refer to API.\n\n## Run ETL in your code\n\nEasy SQL can be used as a very light-weight library. If you'd like to run ETL programmatically in your code.\nPlease refer to the code snippets below:\n\n```python\nfrom pyspark.sql import SparkSession\n\nfrom easy_sql.sql_processor import SqlProcessor\nfrom easy_sql.sql_processor.backend import SparkBackend\n\nif __name__ == '__main__':\n    spark = SparkSession.builder.enableHiveSupport().getOrCreate()\n    backend = SparkBackend(spark)\n    sql = '''\n-- target=log.some_log\nselect 1 as a\n    '''\n    sql_processor = SqlProcessor(backend, sql)\n    sql_processor.run()\n```\n\nMore sample code about other backends could be referred [here](https://github.com/easysql/easy_sql/blob/main/test/sample_data_process.py)\n\n## Debugging ETL\n\nWe recommend debugging ETLs from jupyter. You can follow the steps below to start debugging your ETL.\n\n1. Install jupyter first with command `pip install jupyterlab`.\n\n2. Create a file named `debugger.py` with contents like below:\n\nA more detailed sample could be found [here](https://github.com/easysql/easy_sql/blob/main/debugger.py).\n\n```python\nfrom typing import Dict, Any\n\ndef create_debugger(sql_file_path: str, vars: Dict[str, Any] = None, funcs: Dict[str, Any] = None):\n    from pyspark.sql import SparkSession\n    from easy_sql.sql_processor.backend import SparkBackend\n    from easy_sql.sql_processor_debugger import SqlProcessorDebugger\n    spark = SparkSession.builder.enableHiveSupport().getOrCreate()\n    backend = SparkBackend(spark)\n    debugger = SqlProcessorDebugger(sql_file_path, backend, vars, funcs)\n    return debugger\n\n```\n\n3. Create a file named `test.sql` with contents as [here](https://github.com/easysql/easy_sql/blob/main/test/sample_etl.spark.sql).\n\n4. Then start jupyter lab with command: `jupyter lab`.\n\n5. Start debugging like below:\n\n![ETL Debugging](https://raw.githubusercontent.com/easysql/easy_sql/main/debugger-usage.gif)\n\n## Contributing\n\nPlease submit PR.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://easy-sql.readthedocs.io",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easy-sql-easy-sql-j",
    "package_url": "https://pypi.org/project/easy-sql-easy-sql-j/",
    "platform": null,
    "project_url": "https://pypi.org/project/easy-sql-easy-sql-j/",
    "project_urls": {
      "Bug Tracker": "https://github.com/easysql/easy_sql/issues",
      "Homepage": "https://easy-sql.readthedocs.io",
      "Repository": "https://github.com/easysql/easy_sql"
    },
    "release_url": "https://pypi.org/project/easy-sql-easy-sql-j/0.4.0/",
    "requires_dist": [
      "click (>=8.1.3,<9.0.0); extra == \"cli\"",
      "regex (>=2022.7.25,<2023.0.0); extra == \"linter\"",
      "colorlog (>=6.6.0,<7.0.0); extra == \"linter\"",
      "sqlfluff (>=1.2.1,<2.0.0); extra == \"linter\"",
      "pyspark (>=3.3.0,<4.0.0); extra == \"spark\"",
      "SQLAlchemy (>=1.4.40,<2.0.0); extra == \"pg\" or extra == \"clickhouse\"",
      "psycopg2-binary (>=2.9.3,<3.0.0); extra == \"pg\"",
      "clickhouse-driver (>=0.2.4,<0.3.0); extra == \"clickhouse\"",
      "clickhouse-sqlalchemy (>=0.2.1,<0.3.0); extra == \"clickhouse\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "A library developed to ease the data ETL development process.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14858662,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4637dd832c61dd342551af514205088fe03d28043e45bc1fad3edd2b17bbf35d",
          "md5": "d09d94ecac8faa8977fbbebfd04d0513",
          "sha256": "085ebcd2fe19baf573eda492661831a8562681d2899c4d7757e87475ed04fc06"
        },
        "downloads": -1,
        "filename": "easy_sql_easy_sql_j-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d09d94ecac8faa8977fbbebfd04d0513",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 109553,
        "upload_time": "2022-08-22T08:27:06",
        "upload_time_iso_8601": "2022-08-22T08:27:06.136890Z",
        "url": "https://files.pythonhosted.org/packages/46/37/dd832c61dd342551af514205088fe03d28043e45bc1fad3edd2b17bbf35d/easy_sql_easy_sql_j-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e5ecfea5877c6fd1757ab786ff0fbf7299b5705dbdb551db7f6d3d66ce223cf",
          "md5": "9bfb1351a85ed0e5710e71e07faec30e",
          "sha256": "8199020887a7f4a189c3b987ae47e5b3f356149f9b0856825e93144895a56079"
        },
        "downloads": -1,
        "filename": "easy_sql-easy_sql-j-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9bfb1351a85ed0e5710e71e07faec30e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 88860,
        "upload_time": "2022-08-22T08:27:03",
        "upload_time_iso_8601": "2022-08-22T08:27:03.307857Z",
        "url": "https://files.pythonhosted.org/packages/8e/5e/cfea5877c6fd1757ab786ff0fbf7299b5705dbdb551db7f6d3d66ce223cf/easy_sql-easy_sql-j-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "774327449f71bd3b4b798c924f943df5bf14168bfb016e0c8d81944c7e875ab6",
          "md5": "cddef7c314eba61339b5f0e399734d3c",
          "sha256": "53961a8219e7d37e3c0d95c738e6068cc1f5ec8553fab3f81a293df17af8d246"
        },
        "downloads": -1,
        "filename": "easy_sql_easy_sql_j-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cddef7c314eba61339b5f0e399734d3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 109753,
        "upload_time": "2022-08-24T04:02:09",
        "upload_time_iso_8601": "2022-08-24T04:02:09.559808Z",
        "url": "https://files.pythonhosted.org/packages/77/43/27449f71bd3b4b798c924f943df5bf14168bfb016e0c8d81944c7e875ab6/easy_sql_easy_sql_j-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c00f08712be58df2099534abe38457c4c6b7c36be2830aad9ba438c373e60216",
          "md5": "04268c6faac393f330a29f6dea3058b8",
          "sha256": "1928c85a313df54a8925321b06d19e74ce3f488054400a449a6fe9d5bc687731"
        },
        "downloads": -1,
        "filename": "easy_sql-easy_sql-j-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04268c6faac393f330a29f6dea3058b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 88559,
        "upload_time": "2022-08-24T04:02:07",
        "upload_time_iso_8601": "2022-08-24T04:02:07.880540Z",
        "url": "https://files.pythonhosted.org/packages/c0/0f/08712be58df2099534abe38457c4c6b7c36be2830aad9ba438c373e60216/easy_sql-easy_sql-j-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "774327449f71bd3b4b798c924f943df5bf14168bfb016e0c8d81944c7e875ab6",
        "md5": "cddef7c314eba61339b5f0e399734d3c",
        "sha256": "53961a8219e7d37e3c0d95c738e6068cc1f5ec8553fab3f81a293df17af8d246"
      },
      "downloads": -1,
      "filename": "easy_sql_easy_sql_j-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cddef7c314eba61339b5f0e399734d3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 109753,
      "upload_time": "2022-08-24T04:02:09",
      "upload_time_iso_8601": "2022-08-24T04:02:09.559808Z",
      "url": "https://files.pythonhosted.org/packages/77/43/27449f71bd3b4b798c924f943df5bf14168bfb016e0c8d81944c7e875ab6/easy_sql_easy_sql_j-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c00f08712be58df2099534abe38457c4c6b7c36be2830aad9ba438c373e60216",
        "md5": "04268c6faac393f330a29f6dea3058b8",
        "sha256": "1928c85a313df54a8925321b06d19e74ce3f488054400a449a6fe9d5bc687731"
      },
      "downloads": -1,
      "filename": "easy_sql-easy_sql-j-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04268c6faac393f330a29f6dea3058b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 88559,
      "upload_time": "2022-08-24T04:02:07",
      "upload_time_iso_8601": "2022-08-24T04:02:07.880540Z",
      "url": "https://files.pythonhosted.org/packages/c0/0f/08712be58df2099534abe38457c4c6b7c36be2830aad9ba438c373e60216/easy_sql-easy_sql-j-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}