{
  "info": {
    "author": "fadedreams7",
    "author_email": "fadedreams7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "##### Basic Usage\nA decorator for measuring asynchronous/synchronous function execution time (in seconds) is offered by this Python module.\n- 1st parameter: total number of iterations of the function. defaults to 1.\n- 2nd parameter: (int, optional): precision of execution time in seconds. defaults to 5.\n- 3rd parameter: (bool, optional): whether each function execution time is printed. defaults to true.\n\n##### Example 1: synonymous function\n```python\nfrom sandclock import sandclock\n@sandclock(3) #execute f1() 3 times.\ndef f1(x):\n    print(\"f1: \", x)\n\nf1(\"hello world\")\n\n```\nResults:\n```\nSandclock: synchronous <function f1 at 0x7f89eaca7e50> with args ('hello world',) {}\nSandclock: iteration: 0 started, <function f1 at 0x7f89eaca7e50> with args ('hello world',) {}\nf1:  hello world\nSandclock: iteration: 0 finished, <function f1 at 0x7f89eaca7e50> in 0.000823 second(s)\nSandclock: iteration: 1 started, <function f1 at 0x7f89eaca7e50> with args ('hello world',) {}\nf1:  hello world\nSandclock: iteration: 1 finished, <function f1 at 0x7f89eaca7e50> in 0.000075 second(s)\nSandclock: iteration: 2 started, <function f1 at 0x7f89eaca7e50> with args ('hello world',) {}\nf1:  hello world\nSandclock: iteration: 2 finished, <function f1 at 0x7f89eaca7e50> in 0.000151 second(s)\nSandclock: total time: 0.001050, total iterations: 3```\n```\n##### Example 2: (Asynchronous function)\n```python\nimport aiohttp\nimport asyncio\nfrom sandclock import sandclock\n\n\nasync def status(session: aiohttp.ClientSession, url: str) -> int:\n    async with session.get(url) as result:\n        return result.status\n\n#execute f2() 2 times, 3 precisions, printing details of each function call.\n@sandclock(2, 3, True)\nasync def f2():\n    async with aiohttp.ClientSession() as session:\n        urls = ['https://google.com', 'xxx://bad-request.com']\n        tasks = [status(session, url) for url in urls]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        exceptions = [res for res in results if isinstance(res, Exception)]\n        successful_results = [res for res in results if not isinstance(res, Exception)]\n\n        print(f'All results: {results}')\n        print(f'Finished successfully: {successful_results}')\n        print(f'Threw exceptions: {exceptions}')\n\nasyncio.run(f2())\n```\nResults:\n```\nSandclock: coroutine <function f2 at 0x7f632fd3e430> with args () {}\nSandclock: iteration: 0 started, <function f2 at 0x7f632fd3e430> with args () {}\nAll results: [200, AssertionError()]\nFinished successfully: [200]\nThrew exceptions: [AssertionError()]\nSandclock: iteration: 0 finished, <function f2 at 0x7f632fd3e430> in 2.400 second(s)\nSandclock: iteration: 1 started, <function f2 at 0x7f632fd3e430> with args () {}\nAll results: [200, AssertionError()]\nFinished successfully: [200]\nThrew exceptions: [AssertionError()]\nSandclock: iteration: 1 finished, <function f2 at 0x7f632fd3e430> in 2.385 second(s)\nSandclock: total time: 4.785 second(s), total iterations: 2\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sandclock",
    "package_url": "https://pypi.org/project/sandclock/",
    "platform": null,
    "project_url": "https://pypi.org/project/sandclock/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/sandclock/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "A decorator for examining the execution time of asynchronous/synonymous function.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15494728,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09dd3c5b9fb23fdbe886da322728b266e971d02f29f0b399d9ea3f85b95bd65f",
          "md5": "f654d9afef724f8a93c62374bea51cca",
          "sha256": "664ce6dec7c656e5d68036a49b7960c8e069b803e29a69d02e8866146e278811"
        },
        "downloads": -1,
        "filename": "sandclock-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f654d9afef724f8a93c62374bea51cca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 3017,
        "upload_time": "2022-10-22T10:14:54",
        "upload_time_iso_8601": "2022-10-22T10:14:54.950963Z",
        "url": "https://files.pythonhosted.org/packages/09/dd/3c5b9fb23fdbe886da322728b266e971d02f29f0b399d9ea3f85b95bd65f/sandclock-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86ca24820bd085876997cf1ddead7a237820639328b4b40e8664b29273ed48f1",
          "md5": "131436f6f99205597686dfaa491c77e6",
          "sha256": "b885f76f880b87e742daca93abd64de646b2fa16b973c20654b30dfc5363e5d2"
        },
        "downloads": -1,
        "filename": "sandclock-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "131436f6f99205597686dfaa491c77e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 2950,
        "upload_time": "2022-10-22T10:14:56",
        "upload_time_iso_8601": "2022-10-22T10:14:56.680458Z",
        "url": "https://files.pythonhosted.org/packages/86/ca/24820bd085876997cf1ddead7a237820639328b4b40e8664b29273ed48f1/sandclock-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09dd3c5b9fb23fdbe886da322728b266e971d02f29f0b399d9ea3f85b95bd65f",
        "md5": "f654d9afef724f8a93c62374bea51cca",
        "sha256": "664ce6dec7c656e5d68036a49b7960c8e069b803e29a69d02e8866146e278811"
      },
      "downloads": -1,
      "filename": "sandclock-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f654d9afef724f8a93c62374bea51cca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 3017,
      "upload_time": "2022-10-22T10:14:54",
      "upload_time_iso_8601": "2022-10-22T10:14:54.950963Z",
      "url": "https://files.pythonhosted.org/packages/09/dd/3c5b9fb23fdbe886da322728b266e971d02f29f0b399d9ea3f85b95bd65f/sandclock-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86ca24820bd085876997cf1ddead7a237820639328b4b40e8664b29273ed48f1",
        "md5": "131436f6f99205597686dfaa491c77e6",
        "sha256": "b885f76f880b87e742daca93abd64de646b2fa16b973c20654b30dfc5363e5d2"
      },
      "downloads": -1,
      "filename": "sandclock-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "131436f6f99205597686dfaa491c77e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 2950,
      "upload_time": "2022-10-22T10:14:56",
      "upload_time_iso_8601": "2022-10-22T10:14:56.680458Z",
      "url": "https://files.pythonhosted.org/packages/86/ca/24820bd085876997cf1ddead7a237820639328b4b40e8664b29273ed48f1/sandclock-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}