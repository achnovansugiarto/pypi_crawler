{
  "info": {
    "author": "Yue Zhao",
    "author_email": "zhaoy@cmu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "(Py)TOD: GPU-accelerated Outlier Detection via Tensor Operations\r\n================================================================\r\n\r\n\r\n**Deployment & Documentation & Stats & License**\r\n\r\n.. image:: https://img.shields.io/pypi/v/pytod.svg?color=brightgreen\r\n   :target: https://pypi.org/project/pytod/\r\n   :alt: PyPI version\r\n\r\n\r\n.. image:: https://img.shields.io/github/stars/yzhao062/pytod.svg\r\n   :target: https://github.com/yzhao062/pytod/stargazers\r\n   :alt: GitHub stars\r\n\r\n\r\n.. image:: https://img.shields.io/github/forks/yzhao062/pytod.svg?color=blue\r\n   :target: https://github.com/yzhao062/pytod/network\r\n   :alt: GitHub forks\r\n\r\n\r\n.. image:: https://img.shields.io/github/license/yzhao062/pytod.svg\r\n   :target: https://github.com/yzhao062/pytod/blob/master/LICENSE\r\n   :alt: License\r\n\r\n-----\r\n\r\n\r\n**Background**: Outlier detection (OD) is a key data mining task for identifying abnormal objects from general samples with numerous high-stake applications including fraud detection and intrusion detection.\r\n\r\nWe propose **TOD**, a system for efficient and scalable outlier detection (OD) on distributed multi-GPU machines.\r\nA key idea behind TOD is *decomposing OD applications into basic tensor algebra operations for GPU acceleration*.\r\n\r\n**Authors**: TOD is developed by the same author(s) of the popular PyOD and PyGOD. Specifically, `Yue Zhao <https://www.andrew.cmu.edu/user/yuezhao2/>`_,\r\n`Prof. George Chen <http://www.andrew.cmu.edu/user/georgech/>`_, and `Prof. Zhihao Jia <https://cs.cmu.edu/~zhihaoj2>`_.\r\n**The code is being cleaned up and released. Please watch and star!**\r\n\r\n**Citing TOD**\\ : Check out `the design paper <https://www.andrew.cmu.edu/user/yuezhao2/papers/22-preprint-tod.pdf>`_.\r\nIf you use TOD in a scientific publication, we would appreciate\r\ncitations to the following paper::\r\n\r\n\r\n    @article{zhao2021tod,\r\n      title={TOD: GPU-accelerated Outlier Detection via Tensor Operations},\r\n      author={Zhao, Yue and Chen, George H and Jia, Zhihao},\r\n      journal={arXiv preprint arXiv:2110.14007},\r\n      year={2021}\r\n    }\r\n\r\nor::\r\n\r\n    Zhao, Y., Chen, G.H. and Jia, Z., 2021. TOD: GPU-accelerated Outlier Detection via Tensor Operations. arXiv preprint arXiv:2110.14007.\r\n\r\n\r\n\r\n----\r\n\r\n\r\nOne Reason to Use It:\r\n^^^^^^^^^^^^^^^^^^^^^\r\n\r\nOn average, **TOD is 11 times faster than PyOD** on a diverse group of OD algorithms!\r\n\r\nIf you need another reason: it can handle much larger datasets---more than **a million sample** OD within an hour!\r\n\r\n**GPU-accelerated Outlier Detection with 5 Lines of Code**\\ :\r\n\r\n\r\n.. code-block:: python\r\n\r\n\r\n    # train the COPOD detector\r\n    from pytod.models.knn import KNN\r\n    clf = KNN() # default GPU device is used\r\n    clf.fit(X_train)\r\n\r\n    # get outlier scores\r\n    y_train_scores = clf.decision_scores_  # raw outlier scores on the train data\r\n    y_test_scores = clf.decision_function(X_test)  # predict raw outlier scores on test\r\n\r\n\r\n\r\n**TOD is featured for**:\r\n\r\n* **Unified APIs, detailed documentation, and examples** for the easy use (under construction)\r\n* **More than 5 different OD algorithms** and more are being added\r\n* **The support of multi-GPU acceleration**\r\n* **Advanced techniques** including *provable quantization* and *automatic batching*\r\n\r\n\r\n**Table of Contents**\\ :\r\n\r\n\r\n* `Installation <#installation>`_\r\n* `Implemented Algorithms <#implemented-algorithms>`_\r\n* `A Motivating Example PyOD vs. PyTOD <#a-motivating-example-pyod-vs-pytod>`_\r\n* `Paper Reproducibility <#paper-reproducibility>`_\r\n* `Programming Model Interface <#programming-model-interface>`_\r\n* `End-to-end Performance Comparison with PyOD <#end-to-end-performance-comparison-with-pyod>`_\r\n\r\n----\r\n\r\nInstallation\r\n^^^^^^^^^^^^\r\n\r\nIt is recommended to use **pip** for installation. Please make sure\r\n**the latest version** is installed, as PyTOD is updated frequently:\r\n\r\n.. code-block:: bash\r\n\r\n   pip install pytod            # normal install\r\n   pip install --upgrade pytod  # or update if needed\r\n\r\nAlternatively, you could clone and run setup.py file:\r\n\r\n.. code-block:: bash\r\n\r\n   git clone https://github.com/yzhao062/pytod.git\r\n   cd pyod\r\n   pip install .\r\n\r\n**Required Dependencies**\\ :\r\n\r\n\r\n* Python 3.6+\r\n* numpy>=1.13\r\n* torch>=1.7 (**it is safer if you install by yourself**)\r\n* scipy>=0.19.1\r\n* scikit_learn>=0.20.0\r\n* pyod (**for comparison**)\r\n\r\n----\r\n\r\n\r\nImplemented Algorithms\r\n^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nPyTOD toolkit consists of three major functional groups (to be cleaned up):\r\n\r\n**(i) Individual Detection Algorithms** :\r\n\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\nType                 Abbr                Algorithm                                                                                               Year   Ref\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\nLinear Model         PCA                 Principal Component Analysis (the sum of weighted projected distances to the eigenvector hyperplanes)   2003   [#Shyu2003A]_\r\nProximity-Based      LOF                 Local Outlier Factor                                                                                    2000   [#Breunig2000LOF]_\r\nProximity-Based      COF                 Connectivity-Based Outlier Factor                                                                       2002   [#Tang2002Enhancing]_\r\nProximity-Based      HBOS                Histogram-based Outlier Score                                                                           2012   [#Goldstein2012Histogram]_\r\nProximity-Based      kNN                 k Nearest Neighbors (use the distance to the kth nearest neighbor as the outlier score)                 2000   [#Ramaswamy2000Efficient]_\r\nProximity-Based      AvgKNN              Average kNN (use the average distance to k nearest neighbors as the outlier score)                      2002   [#Angiulli2002Fast]_\r\nProximity-Based      MedKNN              Median kNN (use the median distance to k nearest neighbors as the outlier score)                        2002   [#Angiulli2002Fast]_\r\nProbabilistic        ABOD                Angle-Based Outlier Detection                                                                           2008   [#Kriegel2008Angle]_\r\nProbabilistic        COPOD               COPOD: Copula-Based Outlier Detection                                                                   2020   [#Li2020COPOD]_\r\nProbabilistic        FastABOD            Fast Angle-Based Outlier Detection using approximation                                                  2008   [#Kriegel2008Angle]_\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\n\r\n\r\n**Code is being released**. Watch and star for the latest news!\r\n\r\n\r\n----\r\n\r\n\r\nA Motivating Example PyOD vs. PyTOD!\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n`kNN example <https://github.com/yzhao062/pytod/blob/main/examples/knn_example.py>`_\r\nshows that how fast and how easy PyTOD is. Take the famous kNN outlier detection as an example:\r\n\r\n#. Initialize a kNN detector, fit the model, and make the prediction.\r\n\r\n   .. code-block:: python\r\n\r\n       from pytod.models.knn import KNN   # kNN detector\r\n\r\n       # train kNN detector\r\n       clf_name = 'KNN'\r\n       clf = KNN()\r\n       clf.fit(X_train)\r\n\r\n\r\n   .. code-block:: python\r\n\r\n       # if GPU is not available, use CPU instead\r\n       clf = KNN(device='cpu')\r\n       clf.fit(X_train)\r\n\r\n#. Get the prediction results\r\n\r\n   .. code-block:: python\r\n\r\n       # get the prediction label and outlier scores of the training data\r\n       y_train_pred = clf.labels_  # binary labels (0: inliers, 1: outliers)\r\n       y_train_scores = clf.decision_scores_  # raw outlier scores\r\n\r\n#. On a simple laptop, let us see how fast it is in comparison to PyOD for 30,000 samples with 20 features\r\n\r\n   .. code-block:: python\r\n\r\n      KNN-PyOD ROC:1.0, precision @ rank n:1.0\r\n      Execution time 11.26 seconds\r\n\r\n   .. code-block:: python\r\n\r\n      KNN-PyTOD-GPU ROC:1.0, precision @ rank n:1.0\r\n      Execution time 2.82 seconds\r\n\r\n   .. code-block:: python\r\n\r\n      KNN-PyTOD-CPU ROC:1.0, precision @ rank n:1.0\r\n      Execution time 3.36 seconds\r\n\r\nIt is easy to see, PyTOD shows both better efficiency than PyOD.\r\n\r\n----\r\n\r\nPaper Reproducibility\r\n^^^^^^^^^^^^^^^^^^^^^\r\n\r\n**Datasets**: OD benchmark datasets are available at `datasets folder <https://github.com/yzhao062/pytod/tree/main/reproducibility/datasets/ODDS>`_.\r\n\r\n**Scripts for reproducibility is available in** `reproducibility folder <https://github.com/yzhao062/pytod/tree/main/reproducibility>`_.\r\n\r\nCleanup is on the way!\r\n\r\n----\r\n\r\nProgramming Model Interface\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nComplex OD algorithms can be abstracted into common tensor operators.\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/abstraction.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/abstraction.png\r\n\r\n\r\nFor instance, ABOD and COPOD can be assembled by the basic tensor operators.\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/abstraction_example.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/abstraction_example.png\r\n\r\n\r\n----\r\n\r\nEnd-to-end Performance Comparison with PyOD\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nOverall, it is much (on avg. 11 times) faster than PyOD takes way less run time.\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/run_time.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/pytod/master/figs/run_time.png\r\n\r\n\r\n----\r\n\r\nReference\r\n^^^^^^^^^\r\n\r\n\r\n.. [#Aggarwal2015Outlier] Aggarwal, C.C., 2015. Outlier analysis. In Data mining (pp. 237-263). Springer, Cham.\r\n\r\n.. [#Aggarwal2015Theoretical] Aggarwal, C.C. and Sathe, S., 2015. Theoretical foundations and algorithms for outlier ensembles.\\ *ACM SIGKDD Explorations Newsletter*\\ , 17(1), pp.24-47.\r\n\r\n.. [#Aggarwal2017Outlier] Aggarwal, C.C. and Sathe, S., 2017. Outlier ensembles: An introduction. Springer.\r\n\r\n.. [#Almardeny2020A] Almardeny, Y., Boujnah, N. and Cleary, F., 2020. A Novel Outlier Detection Method for Multivariate Data. *IEEE Transactions on Knowledge and Data Engineering*.\r\n\r\n.. [#Angiulli2002Fast] Angiulli, F. and Pizzuti, C., 2002, August. Fast outlier detection in high dimensional spaces. In *European Conference on Principles of Data Mining and Knowledge Discovery* pp. 15-27.\r\n\r\n.. [#Arning1996A] Arning, A., Agrawal, R. and Raghavan, P., 1996, August. A Linear Method for Deviation Detection in Large Databases. In *KDD* (Vol. 1141, No. 50, pp. 972-981).\r\n\r\n.. [#Breunig2000LOF] Breunig, M.M., Kriegel, H.P., Ng, R.T. and Sander, J., 2000, May. LOF: identifying density-based local outliers. *ACM Sigmod Record*\\ , 29(2), pp. 93-104.\r\n\r\n.. [#Burgess2018Understanding] Burgess, Christopher P., et al. \"Understanding disentangling in beta-VAE.\" arXiv preprint arXiv:1804.03599 (2018).\r\n\r\n.. [#Goldstein2012Histogram] Goldstein, M. and Dengel, A., 2012. Histogram-based outlier score (hbos): A fast unsupervised anomaly detection algorithm. In *KI-2012: Poster and Demo Track*\\ , pp.59-63.\r\n\r\n.. [#Gopalan2019PIDForest] Gopalan, P., Sharan, V. and Wieder, U., 2019. PIDForest: Anomaly Detection via Partial Identification. In Advances in Neural Information Processing Systems, pp. 15783-15793.\r\n\r\n.. [#Hardin2004Outlier] Hardin, J. and Rocke, D.M., 2004. Outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. *Computational Statistics & Data Analysis*\\ , 44(4), pp.625-638.\r\n\r\n.. [#He2003Discovering] He, Z., Xu, X. and Deng, S., 2003. Discovering cluster-based local outliers. *Pattern Recognition Letters*\\ , 24(9-10), pp.1641-1650.\r\n\r\n.. [#Iglewicz1993How] Iglewicz, B. and Hoaglin, D.C., 1993. How to detect and handle outliers (Vol. 16). Asq Press.\r\n\r\n.. [#Janssens2012Stochastic] Janssens, J.H.M., Huszár, F., Postma, E.O. and van den Herik, H.J., 2012. Stochastic outlier selection. Technical report TiCC TR 2012-001, Tilburg University, Tilburg Center for Cognition and Communication, Tilburg, The Netherlands.\r\n\r\n.. [#Kingma2013Auto] Kingma, D.P. and Welling, M., 2013. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114.\r\n\r\n.. [#Kriegel2008Angle] Kriegel, H.P. and Zimek, A., 2008, August. Angle-based outlier detection in high-dimensional data. In *KDD '08*\\ , pp. 444-452. ACM.\r\n\r\n.. [#Kriegel2009Outlier] Kriegel, H.P., Kröger, P., Schubert, E. and Zimek, A., 2009, April. Outlier detection in axis-parallel subspaces of high dimensional data. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*\\ , pp. 831-838. Springer, Berlin, Heidelberg.\r\n\r\n.. [#Lazarevic2005Feature] Lazarevic, A. and Kumar, V., 2005, August. Feature bagging for outlier detection. In *KDD '05*. 2005.\r\n\r\n.. [#Li2019MADGAN] Li, D., Chen, D., Jin, B., Shi, L., Goh, J. and Ng, S.K., 2019, September. MAD-GAN: Multivariate anomaly detection for time series data with generative adversarial networks. In *International Conference on Artificial Neural Networks* (pp. 703-716). Springer, Cham.\r\n\r\n.. [#Li2020COPOD] Li, Z., Zhao, Y., Botta, N., Ionescu, C. and Hu, X. COPOD: Copula-Based Outlier Detection. *IEEE International Conference on Data Mining (ICDM)*, 2020.\r\n\r\n.. [#Liu2008Isolation] Liu, F.T., Ting, K.M. and Zhou, Z.H., 2008, December. Isolation forest. In *International Conference on Data Mining*\\ , pp. 413-422. IEEE.\r\n\r\n.. [#Liu2019Generative] Liu, Y., Li, Z., Zhou, C., Jiang, Y., Sun, J., Wang, M. and He, X., 2019. Generative adversarial active learning for unsupervised outlier detection. *IEEE Transactions on Knowledge and Data Engineering*.\r\n\r\n.. [#Papadimitriou2003LOCI] Papadimitriou, S., Kitagawa, H., Gibbons, P.B. and Faloutsos, C., 2003, March. LOCI: Fast outlier detection using the local correlation integral. In *ICDE '03*, pp. 315-326. IEEE.\r\n\r\n.. [#Pevny2016Loda] Pevný, T., 2016. Loda: Lightweight on-line detector of anomalies. *Machine Learning*, 102(2), pp.275-304.\r\n\r\n.. [#Ramaswamy2000Efficient] Ramaswamy, S., Rastogi, R. and Shim, K., 2000, May. Efficient algorithms for mining outliers from large data sets. *ACM Sigmod Record*\\ , 29(2), pp. 427-438.\r\n\r\n.. [#Rousseeuw1999A] Rousseeuw, P.J. and Driessen, K.V., 1999. A fast algorithm for the minimum covariance determinant estimator. *Technometrics*\\ , 41(3), pp.212-223.\r\n\r\n.. [#Ruff2018Deep] Ruff, L., Vandermeulen, R., Goernitz, N., Deecke, L., Siddiqui, S.A., Binder, A., Müller, E. and Kloft, M., 2018, July. Deep one-class classification. In *International conference on machine learning* (pp. 4393-4402). PMLR.\r\n\r\n.. [#Scholkopf2001Estimating] Scholkopf, B., Platt, J.C., Shawe-Taylor, J., Smola, A.J. and Williamson, R.C., 2001. Estimating the support of a high-dimensional distribution. *Neural Computation*, 13(7), pp.1443-1471.\r\n\r\n.. [#Shyu2003A] Shyu, M.L., Chen, S.C., Sarinnapakorn, K. and Chang, L., 2003. A novel anomaly detection scheme based on principal component classifier. *MIAMI UNIV CORAL GABLES FL DEPT OF ELECTRICAL AND COMPUTER ENGINEERING*.\r\n\r\n.. [#Tang2002Enhancing] Tang, J., Chen, Z., Fu, A.W.C. and Cheung, D.W., 2002, May. Enhancing effectiveness of outlier detections for low density patterns. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*, pp. 535-548. Springer, Berlin, Heidelberg.\r\n\r\n.. [#Wang2020adVAE] Wang, X., Du, Y., Lin, S., Cui, P., Shen, Y. and Yang, Y., 2019. adVAE: A self-adversarial variational autoencoder with Gaussian anomaly prior knowledge for anomaly detection. *Knowledge-Based Systems*.\r\n\r\n.. [#Zhao2018XGBOD] Zhao, Y. and Hryniewicki, M.K. XGBOD: Improving Supervised Outlier Detection with Unsupervised Representation Learning. *IEEE International Joint Conference on Neural Networks*\\ , 2018.\r\n\r\n.. [#Zhao2019LSCP] Zhao, Y., Nasrullah, Z., Hryniewicki, M.K. and Li, Z., 2019, May. LSCP: Locally selective combination in parallel outlier ensembles. In *Proceedings of the 2019 SIAM International Conference on Data Mining (SDM)*, pp. 585-593. Society for Industrial and Applied Mathematics.\r\n\r\n.. [#Zhao2021SUOD] Zhao, Y., Hu, X., Cheng, C., Wang, C., Wan, C., Wang, W., Yang, J., Bai, H., Li, Z., Xiao, C., Wang, Y., Qiao, Z., Sun, J. and Akoglu, L. (2021). SUOD: Accelerating Large-scale Unsupervised Heterogeneous Outlier Detection. *Conference on Machine Learning and Systems (MLSys)*.\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/yzhao062/pytod/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yzhao062/pytod",
    "keywords": "pytorch,tensor operation,outlier detection,acceleration,data mining,machine learning,python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytod",
    "package_url": "https://pypi.org/project/pytod/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytod/",
    "project_urls": {
      "Download": "https://github.com/yzhao062/pytod/archive/master.zip",
      "Homepage": "https://github.com/yzhao062/pytod"
    },
    "release_url": "https://pypi.org/project/pytod/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tensor-based outlier detection. A general GPU-accelerated framework.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14180690,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "910c99d5def57fecfe049b2e33d72366c0bf5ff369ee5e6fa831c287dbd23c67",
          "md5": "4dbc4d6aa564ce562f8bc498a83b4bb9",
          "sha256": "46871508fdffb94f73584dcd0d901d39b387755d6d593b71e8168d5d559c98f6"
        },
        "downloads": -1,
        "filename": "pytod-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4dbc4d6aa564ce562f8bc498a83b4bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26960,
        "upload_time": "2021-11-22T16:25:00",
        "upload_time_iso_8601": "2021-11-22T16:25:00.074171Z",
        "url": "https://files.pythonhosted.org/packages/91/0c/99d5def57fecfe049b2e33d72366c0bf5ff369ee5e6fa831c287dbd23c67/pytod-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51fdd7fc49092810a7890f874150b6fa76022c169bcafed72134f05b1f826bd8",
          "md5": "17398a323ef78617290d9e416020c1bb",
          "sha256": "c0831c84a1d7ad7ac55acecb03116e00f6bf5adb5399e55b5e25b2a01961262e"
        },
        "downloads": -1,
        "filename": "pytod-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "17398a323ef78617290d9e416020c1bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35573,
        "upload_time": "2022-06-19T22:44:32",
        "upload_time_iso_8601": "2022-06-19T22:44:32.942059Z",
        "url": "https://files.pythonhosted.org/packages/51/fd/d7fc49092810a7890f874150b6fa76022c169bcafed72134f05b1f826bd8/pytod-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b04238ac8a8bc655440fe58126de4829b4da93008b111bc859ae0dce5abd37c5",
          "md5": "c5d3a2208d0f10debd5335d7560a9927",
          "sha256": "2c8f14c00cec774aa50472b1cfc434ecf17d76ddd9e34d7e4d2f614f3bd45206"
        },
        "downloads": -1,
        "filename": "pytod-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c5d3a2208d0f10debd5335d7560a9927",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35599,
        "upload_time": "2022-06-19T22:52:58",
        "upload_time_iso_8601": "2022-06-19T22:52:58.099039Z",
        "url": "https://files.pythonhosted.org/packages/b0/42/38ac8a8bc655440fe58126de4829b4da93008b111bc859ae0dce5abd37c5/pytod-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b04238ac8a8bc655440fe58126de4829b4da93008b111bc859ae0dce5abd37c5",
        "md5": "c5d3a2208d0f10debd5335d7560a9927",
        "sha256": "2c8f14c00cec774aa50472b1cfc434ecf17d76ddd9e34d7e4d2f614f3bd45206"
      },
      "downloads": -1,
      "filename": "pytod-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c5d3a2208d0f10debd5335d7560a9927",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35599,
      "upload_time": "2022-06-19T22:52:58",
      "upload_time_iso_8601": "2022-06-19T22:52:58.099039Z",
      "url": "https://files.pythonhosted.org/packages/b0/42/38ac8a8bc655440fe58126de4829b4da93008b111bc859ae0dce5abd37c5/pytod-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}