{
  "info": {
    "author": "",
    "author_email": "Leandro de Souza <leandrodesouzadev@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Inject-It\n\nSimple dependency injection facility using python decorators.\n`inject_it` aims to:\n\n- Keep dependencies creation separated from usage;\n- Keep dependencies swappable for test environments;\n\n## How to use\n\nYou can inject dependencies in two main ways:\n\n1- Creating it first, in a main.py like style;\n2- Using a function to create the dependency.\n\n### Creating the dependency first aproach\n\nSay you have a dependency for a object of type `SomeService`. Then before you start your application, you create a instance\nof this object and want to inject it to a function. So you can have:\n\n```python\n# service.py\nclass SomeService:\n    # Your service stuff\n    def do_stuff(self):\n        print(\"Doing stuff\")\n\n\n# main.py\nfrom service import SomeService\nfrom inject_it import register_dependency\n\nservice = SomeService()\nregister_dependency(service)\n# More code later...\n```\n\nThe code above will register the type of `service` and bound this to the `service` instance.\nSo in another file that requires `SomeService` we will use the `requires` decorator, like:\n\n```python\n# worker.py\nfrom service import SomeService\nfrom inject_it import requires\n\n@requires(SomeService)\ndef your_function(some_argument: str, another_argument: int, s: SomeService):\n    s.do_stuff()\n\n# main.py\nfrom service import SomeService\nfrom inject_it import register_dependency\n\nservice = SomeService()\nregister_dependency(service)\n\nfrom worker import your_function\nyour_function(\"abc\", another_argument=1)\n```\n\nBy using the `reguires` decorator on `your_function` passing `SomeService` as a dependency, inject_it will inject the `service` instance\ninto the function for you.\n\n## How injection works\n\n`inject_it` `requires` decorator instropects the signature of the decorated function to inject the dependencies. So it does some checks to see if the decorated function is correctly annotated. We also check if you also not given the dependency that will be injected, so we dont override for some reason your call.\n\n## The requires decorator\n\nThe `requires` decorator also accepts more than one dependency for function. So you can do:\n\n```python\n\nfrom inject_it import requires\n\n\n@requires(str, int, float)\ndef totally_injected_function(a: int, b: str, c: float):\n    pass\n\n# In this case you can call the function like this\ntotally_injected_function()\n```\n\nThe code above works, but in the snippet above for simplicity we didn't called `register_dependency`, so this snippet as is will raise an `inject_it.exceptions.DependencyNotRegistered`.\n\n## Creating the dependency on a provider function\n\nYou can also define a dependency `provider`. That is a function that will return the dependency object. This is useful if you need a different instance everytime. Using the same example from before:\n\n```python\n# providers.py\nfrom service import SomeService\nfrom inject_it import provider\n\n\n@provider(SomeService)\ndef some_service_provider():\n    # On a real example,on this approach you probably would load some env-variables, config, etc.\n    return SomeService()\n\n```\n\nIn this example, everytime a function `requires` for `SomeService` this function will be called. If it's expensive to create the object, you can cache it. You do it like:\n\n```python\n# providers.py\nfrom service import SomeService\nfrom inject_it import provider\n\n\n@provider(SomeService, cache_dependency=True)  # <-\ndef some_service_provider():\n    # On a real example,on this approach you probably would load some env-variables, config, etc.\n    return SomeService()\n\n```\n\nThis will have the same effect as calling `register_dependency` after creating the object.\n\nYour provider can also `requires` a dependency, but it must be registered before it.\n\n## Conditional arguments to Provider\n\nSometimes you will want to create a service dinamically, using some attributes for the current context of your application. For example, on a HTTP view passing the current user to the provider, the state of a object on the database. `inject-it` allows you to give this parameters to the provider on the fly using `additional_kwargs_to_provider` context manager. That will apply `functools.partial` into your provider for the given kwargs. Example:\n\nFirst, let's define the provider like usual:\n\n```python\n# client.py\nfrom inject_it import provider\n\n\nclass Client:\n    def __init__(self, key):\n        self.key\n\n\n@provider(Client)\ndef client_provider(api_key: str) -> Client:\n    return Client(key=api_key)\n```\n\nNotice that if we don't inject the `api_key` argument, `inject_it` won't be able to call the `client_provider` function, since it will be missing the `api_key` parameter. To solve this let's continue the example:\n\n```python\n# services.py\nfrom client import Client\nfrom inject_it import requires\n\n\n@requires(Client)\ndef make_request(client: Client):\n    print(client.key)\n```\n\nSo let's say you use the api_key for each user. And you receive an HTTP request into your view. Using django views, migth look like this:\n\n```python\n# views.py\nfrom client import Client\nfrom services import make_request\nfrom inject_it import additional_kwargs_to_provider\n\n\ndef some_view(request):\n    user = request.user\n\n    with additional_kwargs_to_provider(Client, api_key=user.some_service_key):\n        make_request()  # client will be injected for the given user.some_service_key\n\n    ...\n```\n\nTwo things is happening when you call the `additional_kwargs_to_provider` function:\n1- You will be patch the `Client` provider function to receive the kwargs you given.\n2- The kwargs must match the `client_provider` arguments.\n\nThis helps if you are using some design patterns like the Strategy Pattern, swapping a service implementation for your current application state.\n\n## Depending on abstract classes\n\n`inject-it` allows you to `register_dependency` to another `bound_type`. This is useful if you don't really care about the concrete implementation, only the abstract one.\nConsider this example:\n\n```python\n# main .py\nfrom inject_it import register_dependency\n\nclass AbcService:\n    def do_work(self):\n        print(\"Working\")\n\n\nclass ConcreteService:\n    def do_work(self):\n        print(\"I'm really working\")\n\n\nservice = ConcreteService()\nregister_dependency(service, bound_type=AbcService)\n\n\n# other_file.py\nfrom main import AbcService\nfrom inject_it import requires\n\n\n@requires(AbcService)\ndef your_function(s: AbcService):\n    print(s)\n\n\n# Calling this function will return:\nyour_function()\n\"I'm really working\"\n```\n\nThe same is true for the `provider` decorator. You can pass to it the abstract class and return from it the concrete one.\nUsing the same classes from the above example, consider:\n\n```python\nfrom inject_it import provider\nfrom main import AbcService, ConcreteService\n\n\n@provider(AbcService)\ndef provider_func():\n    return ConcreteService()\n\n```\n\nWhen one defines a `provider` this provider function requires to be imported so that inject-it is aware of this provider. Usually, you can do this on your application entrypoint, a `main.py` file for example. However, it may feel weird importing a module only for registering purposes, and your IDE will tell you that you imported a module, but never used it. For example:\n\n```python\n# main.py\nfrom your_application import providers  # <- Imported, but unused in this scope\n\ndef main():\n    print(\"Do stuff\")\n    ...\n\nmain()\n```\n\n`inject-it` allows you to register your providers in a more fashion way. It's similar to what's Django does with applications.\n\n## Depending on Callable's\n\n`inject-it` also allows you to depend on a callable. This is possible using the `typing.Protocol` and `typing.runtime_checkable` decorator. Check out this example:\n\n```python\n# protocols.py\nfrom typing import Protocol, runtime_checkable\n\n\n@runtime_checkable\nclass SumTwoNumbersFunc(Protocol):\n    def __call__(self, a, b) -> int:\n        ...\n\n\n# providers.py\nfrom inject_it import provider\nfrom protocols import SumTwoNumbersFunc\n\ndef sum_two(a, b) -> int:\n    return a + b\n\n\ndef sum_two_with_additional_fee(a, b) -> int:\n    return a + b + 10\n\n\n@provider(SumTwoNumberFunc)\ndef get_two_num_sum_func(is_angry=False):\n    if is_angry:\n        return sum_two_with_additional_fee\n    return sum_two\n\n\n# services.py\nfrom protocols import SumTwoNumberFunc\nfrom inject_it import requires\n\n\n@requires(SumTwoNumberFunc)\ndef charge_order(fnc: SumTwoNumberFunc):\n    print(fnc(1, 1))\n\n\n# main.py\nimport providers # importing so it's registered by inject-it\nfrom services import charge_order\nfrom protocols import SumTwoNumbersFunc\nfrom inject_it import additional_kwargs_to_provider\n\n\ndef main():\n    charge_order()  # prints 2\n\n    with additional_kwargs_to_provider(SumTwoNumberFunc, is_angry=True):\n        charge_order()  # prints 12\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Register Providers Modules\n\nSince importing a provider file in runtime just for registering may feel ackward, as mentioned above, `inject-it` exposes a `register_provider_modules` function that one can use to register all its providers on a single call. Using the same example from above, it will look like:\n\n```python\nfrom inject_it import register_provider_modules\n\ndef main():\n    print(\"Do stuff\")\n    ...\n\nregister_provider_modules(\n    \"your_application.providers\",\n    \"your_application.another_module.my_providers\",\n)\nmain()\n```\n\n`register_provider_modules` any number of providers modules, it will look for any function decorated with `provider` in those modules. If no provider is found an exception is raised.\n\n## Limitations\n\nFor the moment, you can only have one dependency for each type. So you can't have like two different `str` dependencies. When you register the second `str` you will be overriding the first. You can work around this by using specific types, instead of primitive types. Other way around is registering a provider with conditional ways of creating a object.\n\n## Testing\n\nTesting is made easy with `inject-it`, you just have to register your `mock`, `fake`, `stub` before calling your function. If you are using pytest, use fixtures.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inject-it",
    "package_url": "https://pypi.org/project/inject-it/",
    "platform": null,
    "project_url": "https://pypi.org/project/inject-it/",
    "project_urls": {
      "Homepage": "https://github.com/plathanus-tech/python-inject-it",
      "download_url": "https://github.com/plathanus-tech/python-inject-it/releases/tag/v0.3.2"
    },
    "release_url": "https://pypi.org/project/inject-it/0.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Dependency injection done easy using python decorators!",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14284457,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1cdd970b395e5d9a88af5c632b5bf12ebd885f155b420074de6ed4e3af62be5",
          "md5": "ac894ac2629eaa4f455b06e442a8b5c8",
          "sha256": "825d9b1be935761d5cae161ab861576e368207dd1481bcdc3a15ce389b495913"
        },
        "downloads": -1,
        "filename": "inject_it-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac894ac2629eaa4f455b06e442a8b5c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 5992,
        "upload_time": "2022-06-06T20:25:45",
        "upload_time_iso_8601": "2022-06-06T20:25:45.549293Z",
        "url": "https://files.pythonhosted.org/packages/c1/cd/d970b395e5d9a88af5c632b5bf12ebd885f155b420074de6ed4e3af62be5/inject_it-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0257842fa044af0312ace79e11c82927d32ffb824f9b0d01839f425dc130a54",
          "md5": "0eff09271dc312d07254b00f031eae6e",
          "sha256": "aeed0e1cb73753ff6ed4fd1cc6dc76e4cf18d242181158202e1283eeccf07509"
        },
        "downloads": -1,
        "filename": "inject-it-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0eff09271dc312d07254b00f031eae6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 4525,
        "upload_time": "2022-06-06T20:25:47",
        "upload_time_iso_8601": "2022-06-06T20:25:47.128883Z",
        "url": "https://files.pythonhosted.org/packages/c0/25/7842fa044af0312ace79e11c82927d32ffb824f9b0d01839f425dc130a54/inject-it-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59ab8577e82a45ee92fd3a1dd965d3fcbe247ed32fac59935efe8b828739e36f",
          "md5": "38c18a7d0de9a8566905e556f7b2eb8e",
          "sha256": "cf144628738abb821e6ede4e2c2c8915590bb66f37064476885f8288926143c1"
        },
        "downloads": -1,
        "filename": "inject_it-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38c18a7d0de9a8566905e556f7b2eb8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6779,
        "upload_time": "2022-06-07T12:01:27",
        "upload_time_iso_8601": "2022-06-07T12:01:27.512891Z",
        "url": "https://files.pythonhosted.org/packages/59/ab/8577e82a45ee92fd3a1dd965d3fcbe247ed32fac59935efe8b828739e36f/inject_it-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07104f05c5d806379753620d111f01c970c7968b1f1039441a79a9efd42c48ae",
          "md5": "0c9fd3d487b9496f36375e89b16ae25b",
          "sha256": "e1f047128ad04fc4275b6e12e0fe01f9c524747cc61c8a9e2d1e0e1dde7fc498"
        },
        "downloads": -1,
        "filename": "inject-it-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c9fd3d487b9496f36375e89b16ae25b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5754,
        "upload_time": "2022-06-07T12:01:29",
        "upload_time_iso_8601": "2022-06-07T12:01:29.304882Z",
        "url": "https://files.pythonhosted.org/packages/07/10/4f05c5d806379753620d111f01c970c7968b1f1039441a79a9efd42c48ae/inject-it-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6222db4c0601c1dd20de7489fc5355a02366ad7eeb028c9a22fdb607397672cf",
          "md5": "1be0c698ea82d43740499585a686415b",
          "sha256": "9b5d869915f408ef68fe0d404c67e6f5e5d8f22d596b3227712878a8f15a516b"
        },
        "downloads": -1,
        "filename": "inject_it-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1be0c698ea82d43740499585a686415b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6840,
        "upload_time": "2022-06-24T20:43:29",
        "upload_time_iso_8601": "2022-06-24T20:43:29.725823Z",
        "url": "https://files.pythonhosted.org/packages/62/22/db4c0601c1dd20de7489fc5355a02366ad7eeb028c9a22fdb607397672cf/inject_it-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5e22ecc9753095a7b6711f5148415079f5bb94e1dbb8df55e94ba9eb37ad0f7",
          "md5": "9658329c8aabe86aa614c9c312e08dad",
          "sha256": "bf387b6d10e21f288dfa6c4a661edc28532d01ced315c889bd4aef1f55e94753"
        },
        "downloads": -1,
        "filename": "inject-it-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9658329c8aabe86aa614c9c312e08dad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5877,
        "upload_time": "2022-06-24T20:43:31",
        "upload_time_iso_8601": "2022-06-24T20:43:31.608894Z",
        "url": "https://files.pythonhosted.org/packages/a5/e2/2ecc9753095a7b6711f5148415079f5bb94e1dbb8df55e94ba9eb37ad0f7/inject-it-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebdbf7e7f4ad052c0f02e20bff743127c4fb08ebf2362b2154a7c12f402d48fd",
          "md5": "fee633d33ede9d2fef3fc3bedde09390",
          "sha256": "2c71a65ef1c3973528e64cabb6e5318a668b45ecbbf03b2926f6a2271c6cc22c"
        },
        "downloads": -1,
        "filename": "inject_it-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fee633d33ede9d2fef3fc3bedde09390",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6948,
        "upload_time": "2022-06-24T20:50:10",
        "upload_time_iso_8601": "2022-06-24T20:50:10.569060Z",
        "url": "https://files.pythonhosted.org/packages/eb/db/f7e7f4ad052c0f02e20bff743127c4fb08ebf2362b2154a7c12f402d48fd/inject_it-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6122b1a3a16ea0584e29a483ce4268f7d73837aa87cd682447dfab0dd7a88791",
          "md5": "ae0c716cfa30367f0e2062c2da9de3cb",
          "sha256": "b678a7ccdc3f78e15805123ed8b6ea803c86f4461cd120ebf6193ab1dfc7c2e8"
        },
        "downloads": -1,
        "filename": "inject-it-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ae0c716cfa30367f0e2062c2da9de3cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5982,
        "upload_time": "2022-06-24T20:50:12",
        "upload_time_iso_8601": "2022-06-24T20:50:12.872886Z",
        "url": "https://files.pythonhosted.org/packages/61/22/b1a3a16ea0584e29a483ce4268f7d73837aa87cd682447dfab0dd7a88791/inject-it-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f239d12e87a4248cade0231540c7b7c30968507402383e6f5e1c2255a63ad8",
          "md5": "7ccebf114c3c276de0d0b2ad9ed57f87",
          "sha256": "d5859bffc26faee6092fc03acb6ae319b71bc5d3145bd44672c9698101d6d434"
        },
        "downloads": -1,
        "filename": "inject_it-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ccebf114c3c276de0d0b2ad9ed57f87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7090,
        "upload_time": "2022-06-29T11:34:07",
        "upload_time_iso_8601": "2022-06-29T11:34:07.153949Z",
        "url": "https://files.pythonhosted.org/packages/a1/f2/39d12e87a4248cade0231540c7b7c30968507402383e6f5e1c2255a63ad8/inject_it-0.3.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Wrong metada"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "360e742fac68fab3a61c5e6d9aa96e48368991625b510cdf48bcb6abe94d6086",
          "md5": "2d1172e2255d0666c0df1b4cd949bc25",
          "sha256": "2fde95637e19da508291cdaa980a3b147789166efc18103049278c835318af6b"
        },
        "downloads": -1,
        "filename": "inject-it-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d1172e2255d0666c0df1b4cd949bc25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6197,
        "upload_time": "2022-06-29T11:34:08",
        "upload_time_iso_8601": "2022-06-29T11:34:08.650197Z",
        "url": "https://files.pythonhosted.org/packages/36/0e/742fac68fab3a61c5e6d9aa96e48368991625b510cdf48bcb6abe94d6086/inject-it-0.3.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Wrong metada"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bad99468132f8e3d78144134e8c849d8ead737c0c26d1de852347258aeef5d5",
          "md5": "f57ad19b78fe9b36255330bd89449c93",
          "sha256": "f0338cc1b9f3036641b9472294f072f2343c89308c5504ad3f1e5f93e22eb8d3"
        },
        "downloads": -1,
        "filename": "inject_it-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f57ad19b78fe9b36255330bd89449c93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9955,
        "upload_time": "2022-06-29T11:53:19",
        "upload_time_iso_8601": "2022-06-29T11:53:19.321750Z",
        "url": "https://files.pythonhosted.org/packages/8b/ad/99468132f8e3d78144134e8c849d8ead737c0c26d1de852347258aeef5d5/inject_it-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "614880acd4e5ac4e88cb8a9c5fb606559b5eb67766de3038431411454819ec64",
          "md5": "e37200bb58ee267a58fd735b0ca5dd04",
          "sha256": "da3345234f599e93f2235e771aac0a364cb74e5498f1613c90cd83874343cfb8"
        },
        "downloads": -1,
        "filename": "inject-it-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e37200bb58ee267a58fd735b0ca5dd04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 11579,
        "upload_time": "2022-06-29T11:53:21",
        "upload_time_iso_8601": "2022-06-29T11:53:21.155839Z",
        "url": "https://files.pythonhosted.org/packages/61/48/80acd4e5ac4e88cb8a9c5fb606559b5eb67766de3038431411454819ec64/inject-it-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e282f5f32eed1fd0a33a0086046751e736b68c235082bc41ac0d2c10c55ca0b5",
          "md5": "29431ed18a3170683e070b1fecf60f7f",
          "sha256": "470bda761aa6181ae8725ec4fecb3c3b68c9aee9096ef5f1e1e38416ce7bbe5c"
        },
        "downloads": -1,
        "filename": "inject_it-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29431ed18a3170683e070b1fecf60f7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 10320,
        "upload_time": "2022-06-29T12:43:54",
        "upload_time_iso_8601": "2022-06-29T12:43:54.021266Z",
        "url": "https://files.pythonhosted.org/packages/e2/82/f5f32eed1fd0a33a0086046751e736b68c235082bc41ac0d2c10c55ca0b5/inject_it-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299bdb648c6b899b779a38855bcc6a24cfd00ed3643b5abb1f50ef76a9702fbc",
          "md5": "b380e2b08e7d24f7c646cbf96e5c29aa",
          "sha256": "3ed08800c3c4f5e32c496c17691bd0e68bd80b8fe4b6347a2f3d10a33b790b5f"
        },
        "downloads": -1,
        "filename": "inject-it-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b380e2b08e7d24f7c646cbf96e5c29aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 12389,
        "upload_time": "2022-06-29T12:43:57",
        "upload_time_iso_8601": "2022-06-29T12:43:57.029506Z",
        "url": "https://files.pythonhosted.org/packages/29/9b/db648c6b899b779a38855bcc6a24cfd00ed3643b5abb1f50ef76a9702fbc/inject-it-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e282f5f32eed1fd0a33a0086046751e736b68c235082bc41ac0d2c10c55ca0b5",
        "md5": "29431ed18a3170683e070b1fecf60f7f",
        "sha256": "470bda761aa6181ae8725ec4fecb3c3b68c9aee9096ef5f1e1e38416ce7bbe5c"
      },
      "downloads": -1,
      "filename": "inject_it-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "29431ed18a3170683e070b1fecf60f7f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 10320,
      "upload_time": "2022-06-29T12:43:54",
      "upload_time_iso_8601": "2022-06-29T12:43:54.021266Z",
      "url": "https://files.pythonhosted.org/packages/e2/82/f5f32eed1fd0a33a0086046751e736b68c235082bc41ac0d2c10c55ca0b5/inject_it-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "299bdb648c6b899b779a38855bcc6a24cfd00ed3643b5abb1f50ef76a9702fbc",
        "md5": "b380e2b08e7d24f7c646cbf96e5c29aa",
        "sha256": "3ed08800c3c4f5e32c496c17691bd0e68bd80b8fe4b6347a2f3d10a33b790b5f"
      },
      "downloads": -1,
      "filename": "inject-it-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b380e2b08e7d24f7c646cbf96e5c29aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 12389,
      "upload_time": "2022-06-29T12:43:57",
      "upload_time_iso_8601": "2022-06-29T12:43:57.029506Z",
      "url": "https://files.pythonhosted.org/packages/29/9b/db648c6b899b779a38855bcc6a24cfd00ed3643b5abb1f50ef76a9702fbc/inject-it-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}