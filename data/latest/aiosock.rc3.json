{
  "info": {
    "author": "Bowen XU",
    "author_email": "xubowen@pku.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Chinese (Simplified)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# aiosock -- Multiprocess communication sockets for asyncio\r\n\r\nThis package wraps the [`socket`](https://docs.python.org/3/library/socket.html) lib, so that it can be used as part of the non-blocking asyncio event loop. A goal scenario is multiprocess communication with the help of  coroutines, *i.e.*, combining [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) and [`asyncio`](https://docs.python.org/3/library/asyncio.html). \r\n\r\nFor example, there are two processes in a program: one is `Main_Process`, and the other is `IO_Process`. The two processes are running with respective event loops. The `Main_Process` is asynchronizedly reading messages from `IO_Process`, and once the `IO_Process` sends something to the `Main_Process`, the latter will call a `callback` function or continue executing a coroutine from the previous break point.\r\n\r\n## Quick Start\r\n\r\nFirst, install `aiosock`.\r\n\r\n```\r\npip install aiosock\r\n```\r\n\r\nSecond, import modules\r\n\r\n```Python\r\nimport aiosock\r\nimport asyncio\r\n```\r\n\r\nThird, create aio-socket pair\r\n```Python\r\nsock1, sock2 = aiosocket.aiosockpair()\r\n```\r\n\r\nForth, if you wish to use a callback function, initialize the aio-socket(s) with the function. The form of the function should be\r\n```Python\r\ndef callback(obj_recv: Any, *args: Any): ...\r\n```\r\nThe first argument is the object received from the other socket, and the remainder are arguments passed from where the socket is initialized. For example\r\n\r\n```Python\r\ndef callback_print(obj_recv: Any, num: int): \r\n    print(f'{num}: {obj_recv}')\r\n\r\nsock1.init((callback_print, 0))\r\n```\r\n\r\nFifth, you may also use `await` to read something in an `async` function, rather than using a callback. For example\r\n\r\n```Python\r\nasync def main():\r\n    obj_recv = await sock1.read()\r\n```\r\nSixth, you are able to set callbacks for both read and write. the read callback is executed whenever something is received, and the write callback is executed when it is available to write. For example\r\n\r\n```Python\r\ndef callback_print(obj_recv: Any, num: int): \r\n    print(f'{num}: {obj_recv}')\r\n\r\ndef callback_writable():\r\n    print('Now writable.')\r\n\r\nsock1.init((callback_print, 0), callback_writable)\r\n```\r\n\r\nThe defaut values of the callbacks are `None`.\r\n\r\nSeventh, send any object you want, as long as the object is serializable.\r\n```Python\r\nsock2.send('Hello asyncio!')\r\n```\r\n\r\nYou can call `sock2.send(...)` in another process and initialized the `sock2` in that process, so that multiple processes are able to communicate with each other.\r\n\r\nFinally, don't forget to run the event loop, for example\r\n\r\n```Python\r\nasyncio.get_event_loop().run_forever()\r\n```\r\n\r\nHere is a complete demonstration below.\r\n\r\n\r\n### Demo\r\n\r\nCode:\r\n\r\n``` Python\r\nfrom multiprocessing import Process\r\nimport os\r\nfrom typing import Any, Iterable, Mapping\r\nfrom aiosock import AioSock, aiosockpair\r\nimport asyncio\r\n\r\n\r\nclass IO_Process(Process):\r\n    ''''''\r\n    def __init__(self, sock: AioSock, group = None, name: 'str | None' = None, args: Iterable[Any] = (), kwargs: Mapping[str, Any] = {}, *, daemon: 'bool | None' = None) -> None:\r\n        super().__init__(group, None, name, daemon=daemon)\r\n        self.sock = sock\r\n\r\n\r\n    def run(self):\r\n        print(f'IO Process PID: {os.getpid()}')\r\n        self.loop = asyncio.get_event_loop()\r\n        self.sock.init(self.on_read)\r\n        self.loop.call_later(3, self.sock.write, f'[sock2 write] PID: {os.getpid()}')\r\n        self.loop.create_task(self.read())\r\n        self.loop.run_forever()\r\n\r\n\r\n    def on_read(self, obj: Any, *args):\r\n        ''''''\r\n        print(obj)\r\n        print(f'[io on_read] PID: {os.getpid()}')\r\n\r\n\r\n    async def read(self):\r\n        ''''''\r\n        while True:\r\n            obj = await self.sock.read()\r\n            print(f'[io await read]{str(obj)}')\r\n            print(f'[io await read] PID: {os.getpid()}')\r\n\r\n\r\nasync def main(sock: AioSock):\r\n    ''''''\r\n    sock1.write(f'[sock1 write] PID: {os.getpid()}')\r\n    obj = await sock.read()\r\n    print(obj)\r\n    print(f'[main await read] PID: {os.getpid()}')\r\n\r\n\r\nif __name__ == '__main__':    \r\n    print('IO Process Read/Write, Main Process Write/Read.')  \r\n    print(f'Main Process PID: {os.getpid()}')\r\n    sock1, sock2 = aiosockpair()\r\n    iop = IO_Process(sock2)\r\n    sock1.init()\r\n    iop.start()\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(main(sock1))\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nMain Process PID: 15408\r\nIO Process PID: 12324\r\n[sock1 write] PID: 15408\r\n[io on_read] PID: 12324\r\n[io await read][sock1 write] PID: 15408\r\n[io await read] PID: 12324\r\n[sock2 write] PID: 12324\r\n[main await read] PID: 15408\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bowen-xu/aiosock",
    "keywords": "asyncio,multiprocess,socket",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiosock",
    "package_url": "https://pypi.org/project/aiosock/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiosock/",
    "project_urls": {
      "Homepage": "https://github.com/bowen-xu/aiosock"
    },
    "release_url": "https://pypi.org/project/aiosock/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7.0",
    "summary": "Multiprocess communication sockets for asyncio",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15511583,
  "releases": {
    "1.0.1.post7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38ed7e98705ae140507ab76c906e50c6ff7fe30d6f5a3ae9fb5dc4dc2c21fb84",
          "md5": "652a7162f7916a1bfc142f47201d9f21",
          "sha256": "ce3d0eca3c5e53673d7e46d8fd640a7576afece65f3bb5a755c9693dd2fc664c"
        },
        "downloads": -1,
        "filename": "aiosock-1.0.1.post7.tar.gz",
        "has_sig": false,
        "md5_digest": "652a7162f7916a1bfc142f47201d9f21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 5460,
        "upload_time": "2022-09-27T23:08:25",
        "upload_time_iso_8601": "2022-09-27T23:08:25.704743Z",
        "url": "https://files.pythonhosted.org/packages/38/ed/7e98705ae140507ab76c906e50c6ff7fe30d6f5a3ae9fb5dc4dc2c21fb84/aiosock-1.0.1.post7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53c01d3e273b801635b9a8ef4d59da9bdeb0aca70393469faeace36c910a81ae",
          "md5": "abe42e037c5279af3240206a0fc6a2fa",
          "sha256": "79cda6569dbaeb5ddbc60fd857b8bfa35a0e039cb8a5cd57d9f56825d0b8ec5d"
        },
        "downloads": -1,
        "filename": "aiosock-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "abe42e037c5279af3240206a0fc6a2fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 5452,
        "upload_time": "2022-10-23T21:58:08",
        "upload_time_iso_8601": "2022-10-23T21:58:08.418161Z",
        "url": "https://files.pythonhosted.org/packages/53/c0/1d3e273b801635b9a8ef4d59da9bdeb0aca70393469faeace36c910a81ae/aiosock-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e02aef73b3b95f7ceb2c5f3960f3e5b5c891c1132ea7aeb45e8a4b24a4a7e9ec",
          "md5": "73d07c7a777b1de3e81326f7cbe4b183",
          "sha256": "cf62505749108a537811e550e06901e4c454383f591888f755a0a07aa49a06d3"
        },
        "downloads": -1,
        "filename": "aiosock-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "73d07c7a777b1de3e81326f7cbe4b183",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 5553,
        "upload_time": "2022-10-24T16:46:50",
        "upload_time_iso_8601": "2022-10-24T16:46:50.660090Z",
        "url": "https://files.pythonhosted.org/packages/e0/2a/ef73b3b95f7ceb2c5f3960f3e5b5c891c1132ea7aeb45e8a4b24a4a7e9ec/aiosock-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e02aef73b3b95f7ceb2c5f3960f3e5b5c891c1132ea7aeb45e8a4b24a4a7e9ec",
        "md5": "73d07c7a777b1de3e81326f7cbe4b183",
        "sha256": "cf62505749108a537811e550e06901e4c454383f591888f755a0a07aa49a06d3"
      },
      "downloads": -1,
      "filename": "aiosock-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "73d07c7a777b1de3e81326f7cbe4b183",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 5553,
      "upload_time": "2022-10-24T16:46:50",
      "upload_time_iso_8601": "2022-10-24T16:46:50.660090Z",
      "url": "https://files.pythonhosted.org/packages/e0/2a/ef73b3b95f7ceb2c5f3960f3e5b5c891c1132ea7aeb45e8a4b24a4a7e9ec/aiosock-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}