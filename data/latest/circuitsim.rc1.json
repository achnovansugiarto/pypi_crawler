{
  "info": {
    "author": "Ruben Purdy",
    "author_email": "rpurdy@andrew.cmu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CircuitSim\n\n[![Python package](https://github.com/circuitgraph/circuitsim/actions/workflows/python-package.yml/badge.svg)](https://github.com/circuitgraph/circuitsim/actions/workflows/python-package.yml)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nAn interafce to perform simulations of gate-level HDL designs from python.\n\n## Installation\n\nCircuitSim requires Python3.6 or greater\nThe easiest way to install is via PyPi:\n```shell\npip install circuitsim\n```\n\nFinally, to install in-place with the source, use:\n```shell\ncd <install location>\ngit clone https://github.com/circuitgraph/circuitsim.git\ncd circuitsim\npip install -e .\n\nIn order to perform simulations, you must have at least one of the available simulators installed.\n```\n\n## Using the simulator\nSimulation can be performed using the `CircuitSimulator` class.\n\nThis allows the simulation to be compiled once and then quieried multiple times without having to recompile.\n\nThe `CircuitSimulator` accepts circuits in the form of [circuitgraph](https://circuitgraph.github.io/circuitgraph/) `Circuit` objects.\n\nVectors are accepted and returned as dictionaries mapping input/output names to logical values (`True` or `False`).\n\n## Available simulators\n\nCurrently, [iverilog](http://iverilog.icarus.com), [verilator](https://www.veripool.org/verilator/), and VCS are supported. In order to use a given simulator, it must be in your `PATH`.\n\n## Usage Example\n```python\nimport random\nimport shutil\n\nimport circuitgraph as cg\n\nfrom circuitsim import CircuitSimulator\n\n\ndef main():\n    # Exercise 3 random inputs patterns 5 times.\n    num_trials = 5\n    num_vectors = 3\n    c = cg.from_lib(\"c17\")\n    simulator = CircuitSimulator(c)\n    for sim_num in range(num_trials):\n        vectors = []\n        for _ in range(num_vectors):\n            vectors.append({i: random.choice([True, False])\n                           for i in c.inputs()})\n        sim_results = simulator.simulate(vectors)\n        print(f\"Simulation {sim_num}\")\n        print(f\"inputs: {vectors}\")\n        print(f\"outputs: {sim_results}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Contributing\n\nIf you want to develop an improvement for this library, please consider the information below.\n\nTests are run using the builtin unittest framework. Some basic linting is performed using flake8.\n```shell\npip instsall flake8\nmake test\n```\n\nDocumentation is built using pdoc3.\n```shell\npip install pdoc3\nmake doc\n```\n\nCode should be formatted using [black](https://black.readthedocs.io/en/stable/).\n[Pre-commit](https://pre-commit.com) is used to automatically run black on commit.\n```shell\npip install black pre-commit\npre-commit install\n```\nPre-commit also runs a few other hooks, including a docstring formatter and linter. Docs follow the `numpy` documentation convention.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/circuitgraph/circuitsim",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "circuitsim",
    "package_url": "https://pypi.org/project/circuitsim/",
    "platform": null,
    "project_url": "https://pypi.org/project/circuitsim/",
    "project_urls": {
      "Documentation": "https://circuitgraph.github.io/circuitsim/",
      "Homepage": "https://github.com/circuitgraph/circuitsim",
      "Source": "https://github.com/circuitgraph/circuitsim"
    },
    "release_url": "https://pypi.org/project/circuitsim/0.0.1/",
    "requires_dist": [
      "circuitgraph (>=0.2.0)",
      "natsort"
    ],
    "requires_python": ">=3.6",
    "summary": "Run gate-level HDL simulations from python.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13601854,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b96a4fe7c0ac37d39d4b35409dd76bdfbd17c80cdcbd7a7305332abdb5ff4419",
          "md5": "2b014a2f2e002d6c3344f9e81b0ef45c",
          "sha256": "a49d0187a138bc017aff8a139ac677aee87602cd7bf03d49184a5125c36a92bc"
        },
        "downloads": -1,
        "filename": "circuitsim-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b014a2f2e002d6c3344f9e81b0ef45c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8934,
        "upload_time": "2022-04-23T19:30:22",
        "upload_time_iso_8601": "2022-04-23T19:30:22.269866Z",
        "url": "https://files.pythonhosted.org/packages/b9/6a/4fe7c0ac37d39d4b35409dd76bdfbd17c80cdcbd7a7305332abdb5ff4419/circuitsim-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab331550ed7f525c992cc3ced4032248a43e718b0b57676a081c2efa2a675cc7",
          "md5": "7c19e6762bb59f66d6d43cb65f583826",
          "sha256": "8875e64477dece633d3b51e6264b5c34cd60bef791f80c39666331c6a5fd4b76"
        },
        "downloads": -1,
        "filename": "circuitsim-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c19e6762bb59f66d6d43cb65f583826",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7865,
        "upload_time": "2022-04-23T19:30:24",
        "upload_time_iso_8601": "2022-04-23T19:30:24.064007Z",
        "url": "https://files.pythonhosted.org/packages/ab/33/1550ed7f525c992cc3ced4032248a43e718b0b57676a081c2efa2a675cc7/circuitsim-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b96a4fe7c0ac37d39d4b35409dd76bdfbd17c80cdcbd7a7305332abdb5ff4419",
        "md5": "2b014a2f2e002d6c3344f9e81b0ef45c",
        "sha256": "a49d0187a138bc017aff8a139ac677aee87602cd7bf03d49184a5125c36a92bc"
      },
      "downloads": -1,
      "filename": "circuitsim-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b014a2f2e002d6c3344f9e81b0ef45c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8934,
      "upload_time": "2022-04-23T19:30:22",
      "upload_time_iso_8601": "2022-04-23T19:30:22.269866Z",
      "url": "https://files.pythonhosted.org/packages/b9/6a/4fe7c0ac37d39d4b35409dd76bdfbd17c80cdcbd7a7305332abdb5ff4419/circuitsim-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab331550ed7f525c992cc3ced4032248a43e718b0b57676a081c2efa2a675cc7",
        "md5": "7c19e6762bb59f66d6d43cb65f583826",
        "sha256": "8875e64477dece633d3b51e6264b5c34cd60bef791f80c39666331c6a5fd4b76"
      },
      "downloads": -1,
      "filename": "circuitsim-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c19e6762bb59f66d6d43cb65f583826",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7865,
      "upload_time": "2022-04-23T19:30:24",
      "upload_time_iso_8601": "2022-04-23T19:30:24.064007Z",
      "url": "https://files.pythonhosted.org/packages/ab/33/1550ed7f525c992cc3ced4032248a43e718b0b57676a081c2efa2a675cc7/circuitsim-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}