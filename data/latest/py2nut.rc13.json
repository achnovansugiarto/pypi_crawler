{
  "info": {
    "author": "Laurent Tupin",
    "author_email": "laurent.tupinn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Free For Home Use",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# py2nut - Laurent Tupin\n\nIt provides various functions to simplify the users life. \n\n\n## Installation\n\nYou can install the package from [PyPI](https://pypi.org/project/py2nut/):\n\n    python -m pip install py2nut\n\nThe package is supported on Python 3.7 and above.\n\n\n\n## How to use\n\n\nYou can call a function as this example:\n\n    $ ----------------------------------------------------\n    >>> from py2Nut import nutDate\n    >>> nutDate.today()\n\n\n\nThis is the libraries I am using with the package\n\n    $ ----------------------------------------------------\n    >>> beautifulsoup4==4.7.1\n    >>> exchangelib==4.7.2\n    >>> openpyxl==3.0.5\n    >>> pandas==1.1.3\n    >>> paramiko==2.6.0\n    >>> psutil==5.9.0\n    >>> pyodbc==4.0.32\n    >>> pywin32==303\n    >>> selenium==3.141.0\n    >>> xlrd==1.2.0\n    >>> XlsxWriter==1.3.5\n    >>> xlwings==0.20.8\n\n\n\nTo use nutAPI / Selenium Functionnalities:\n\n    from py2Nut import nutApi as Api\n    \n    #----------------------------------------------------\n    # To use Chrome Driver\n    #  Go to chromedriver.chromium.org || https://sites.google.com/a/chromium.org/chromedriver/downloads\n    #  Chose an older version (like the 92 as of August 2021)\n    #  download and UnZip the folder\n    #  Move it to Users/local/bin\n    #   or C:\\ProgramData\\Anaconda3\\Library\\bin (Windows)\n    #   or ...\\AppData\\Local\\Programs\\Python\\Python39\n    #----------------------------------------------------\n\n\n\n## Documentation\n\nTemporary documentation for nutDate :\n\n    from py2Nut import nutDate as dat\n    \n    dte_date = dat.fDte_formatToDate(dte_date, str_dateFormat = '%d/%m/%Y')\n    \"\"\" fDte_formatToDate makes sure you will have a varable with a date format\n        The first Argument is the Variable (date), and the format of the string if it is a sting\n        It allows you to avoid testing the type of the variable and get your get Date anyhow\"\"\"\n    \n    int_dateDiff = dat.fInt_dateDifference(dte_date1, dte_date2)\n    \"\"\" fInt_dateDifference give you the difference in days between 2 dates\"\"\"\n    \n    Date2 = dat.fDte_convertExcelInteger(Date)\n    \"\"\" fDte_convertExcelInteger takes an integer as input, \n        This is the integer you can find in Excel when it is a date \n        And return the associated date  \"\"\"\n    \n    \nTemporary documentation for nutDataframe :\n\n    import py2Nut.nutDataframe as dframe\n    \n    bl_isempty = dframe.fBl_isDataframeEmpty(df_simple)\n    \"\"\" Test if a Dataframe is empty\"\"\"\n    \n    df_simple = dframe.fDf_createSimpleDataframe()\n    \"\"\" Create a simple dataframe to make test\"\"\"\n    \n    bl_compare, df_compare = dframe.fBl_compareDfCol({'df': df_1, 'colJoin': 'colJoin','colToCompare':'data'},\n                                                      {'df': df_2,'colJoin': 'colJoin','colToCompare':'data'})\n    \"\"\" compare 2 dataframe one a numeric column by joining the df and returning the difference \"\"\"\n    \n    df_1['DataRounded'] = df_1['DataToBeRounded'].apply(lambda x: dframe.round_down(x))\n    \"\"\" Use the Math Function floor() - Able to add a decimals like in Excel\n        floor() rounds down. int() truncates. \n        The difference is clear when you use negative numbers\n        math.floor(-3.5)    -4\n        int(-3.5)           -3\"\"\"\n    \n    df_2['DataRounded'] = df_2['DataToBeRounded'].apply(lambda x: dframe.round_up(x))\n    \"\"\" Use the Math Function ceil() - Able to add a decimals like in Excel\"\"\"\n    \n    df_data = dframe.fDf_readCsv_enhanced(path, bl_header = None, str_sep = '|', l_names = range(33))\n    \"\"\" Use the pandas method read_csv\n        but resolving Parse Error and will try again after displaying a message \n        Also resolving UnicodeDecodeError by detecting the encoding and trying again accordingly \"\"\"\n     \n    df2 = dframe.fDf_removeDoublons(df1)\n    \"\"\" Remove all rows that are exactly the same\"\"\"\n     \n    df2 = dframe.fDf_DropRowsIfNa_resetIndex(df1, l_colToDropNA = ['col1'])\n    \"\"\" Drop the rows where all defined columns will be Nan\n        And reset the index\"\"\"\n    \n    df2 = dframe.dDf_fillNaColumn(df1, 'col2', 'col1')\n    \"\"\" Replace Nan in a column by the value in another column or a Constant \"\"\"\n    \n    df2 = dframe.fDf_fillColUnderCondition(df1, 'NameColApply', df1['data'], 'NameColC', 'YES', bl_except = False)\n    ''' Transform DF with condition\n        ValueToApply can be a value or a lambda function'''   \n    \n    \nTemporary documentation for nutOther :\n    \n    from py2Nut import nutOther as oth\n    \n    1. Decorators\n    \n    @oth.dec_singletonsClass\n    class CLASS_TO_DECORATE():\n    ''' Singeltons decorators: always use the first instance \n        Example: connection to database, FTP (keep the same connection for performance and possibly Access issue)\n        '''    \n    \n    @oth.dec_getTimePerf(int_secondesLimitDisplay = 2)\n    def function_TO_DECORATE(*args, **kwarks):\n    ''' Time Performance Decorators on a function\n        You can calculate and compare Performance on any function just by decorating it\n        It will show nothing if the performance is better than a specific threshold you will defined\n        '''   \n    \n    @oth.dec_stopProcessTimeOut(int_secondesLimit = 10, returnIfTimeOut = False)\n    def function_TO_DECORATE(*args, **kwarks):\n    ''' This decorators allow to stop a process if it is too long\n        For example, testing a folder existence might be very very long...'''\n    \n\nTemporary documentation for nutApi :\n\n    from py2Nut import nutApi as Api\n        \n    1. Class\n    \n    inst_getAPI = Api.C_API_simple( (str_uid, str_pwd) )\n    inst_getAPI.api_connect_json( url )\n    inst_getAPI.api_returnDataFrame( l_url_keyword = ['data', 'price'] )\n    df_data = inst_getAPI.df_return\n    \"\"\" The class inherit from C_API \n            allows the user to read an URL and get back a dataframe from JSON format\n        Is decorated to be a singleton\"\"\"\n    \n\nTemporary documentation for nutEmail :\n\n    DESIGN PATTERN: BUILDER for OUTLOOK / EXCHANGELIB\n    Allow you to manage all relating to Emails with few lines of code\n    \n    from py2Nut import nutEmail as email\n    \n    1. Send an email with OUTLOOK\n    \n    o_builder_emailSend =   email.c_Outlook_send(**dic_param)\n    o_otlk_Director =       email.c_otlk_Director(o_builder_emailSend)\n    o_otlk_Director.SendMail()\n    bl_success = o_otlk_Director._builder.bl_success\n        OR\n    bl_success = email.fBl_SendMail_desPatt(**dic_param)\n    \n    WHERE \n    \n    dic_param = dict(bl_draft = True, l_pathAttach=['path1_fileToEnclose'], str_message = 'Hello',\n                     str_from='', str_to='', str_cc='', str_bcc='',str_subject='Subject')    \n    \n    2. Download files from Received Email on Outlook\n    \n    o_builder_emailDwld =   email.c_Outlook_dwld(**dic_param)\n    inst_Director =    email.c_otlk_Director(o_builder_emailDwld)\n    inst_Director.Download_fMail()\n    \n    WHERE \n    \n    dic_param = dict(str_outAcctName = 'laurent@gmail.com', str_inbox = 'Inbox', l_folders = [],\n                     str_subject = 'Sujet', str_to = '', str_cc = '', str_folder = 'PathForSaveFile',\n                     str_File_startW = 'file_', str_File_endW = '_01.csv')\n    \n    3. Download files from Received Email with Excahngelib (not on Outlook)\n    \n    o_builder_emailDwld = \temail.c_Webmail_dwld(**dic_param)\n    inst_Director =  \t    email.c_otlk_Director(o_builder_emailDwld)\n    inst_Director.Download_fMail()\n    \n    WHERE \n    \n    dic_param = dict(str_outAcctName = 'laurent@gmail.com', str_pwd = '*****', str_inbox = 'Inbox', l_folders = [],\n                     str_subject = 'Sujet', str_to = '', str_cc = '', str_folder = 'PathForSaveFile',\n                     str_File_startW = 'file_', str_File_endW = '_01.csv')\n    \n    \nTemporary documentation for nutFtp :\n\n    Class c_FTP and c_SFTP allow you to Download / Upload on a server\n    Decorated to be a singleton as to keep the same instance / connection\n    FTP uses the ftplib library, SFTP paramiko\n    \n    from py2Nut import nutFtp as ftp\n    \n    1.1. Download FTP\n    \n    ftp.fBl_ftpDownFileBinary(host, uid, pwd, ['FTP Folder'], fileName, folderToSave, bl_ssl = False)\n        OR\n    _ftp = ftp.ftp_prep(host, uid, pwd, ['FTP Folder'], bl_ssl = False)\n    _ftp.ftp_DownloadFile(fileName, folderToSave)\n    \n    1.2. Download SFTP\n    \n    ftp.ssh_downFile(host, uid, pwd, ['FTP Folder'], fileName, folderToSave, int_port = 10022)\n        OR\n    _sftp = sftp_prep(host, uid, pwd, ['FTP Folder'], int_timeout = -1, int_port = 10022)\n    _sftp.sftp_DownloadFile(fileName, folderToSave)\n    \n    2.1 Upload FTP\n    \n    ftp.fBl_ftpUpFile_Bi(host, uid, pwd, ['FTP Folder'], fileName, folderToSave,  bl_ssl = False)\n        OR\n    _ftp = ftp_prep(host, uid, pwd, ['FTP Folder'], bl_ssl = False)\n    _ftp.ftp_UploadFile(fileName, folderToSave)\n    \n    2.2 Upload SFTP\n    \n    bl_success = ftp.ssh_upFile(host, uid, pwd, ['FTP Folder'], fileName, folderToSave, int_port = 10022)\n        OR\n    _sftp = sftp_prep(host, uid, pwd, ['FTP Folder'], int_port = 10022)\n    _sftp.sftp_UploadFile(fileName, folderToSave)\n    \n    \nTemporary documentation for nutDb :\n    \n    from py2Nut import nutDb as db\n    \n    1. Lite Db\n    \n    db_lite = db.c_db_lite(r'\\db_param.db')\n    db_lite.connect()\n    df_UID = db_lite.getDataframe(\"SELECT * FROM tbl_Table\")\n    db_lite.closeConnection()\n    \"\"\" This class allows you to manage simple lite database\"\"\"\n    \n    2. SQL Server (pyodbc)\n    \n    dbServer =  db.c_db_withLog()\n    # df_UID will be a dataframe of connexion: Server, Database, UID, Password\n    dbServer.dataframeCredentials(df_UID)\n    \n    # Request with a dataframe as a return\n    db.db_SelectReq(\"SELECT top 10 * FROM tbl_Table\")\n    print(dbServer.df_result)\n    \n    # OR EXEC a stored procedure    \n    db.db_EXEC('EXEC Stored_Procedure')\n    \n    \nTemporary documentation for nutFiles :\n\n    from py2Nut import nutFiles as fl\n    \n    1. Functions\n    \n    fileName = fl.fStr_myFileName(__file__)\n    ''' Get the Python File Name '''\n    \n    myPath = fl.fStr_myPath(__file__)\n    ''' Get the path of the Python File'''\n    \n    EnvUserName = fl.fStr_GetEnvUserName()\n    ''' Get the Environment of the USERPROFILE'''\n    \n    UserEmail = fl.fStr_GetUserEmail(str_emailExtension = '@corporation.com')\n    ''' Get the Corporate Email of the user '''\n    \n    folder = fl.fStr_GetFolderFromPath(myPath)\n    ''' Get the Folder from a file path '''\n    \n    FileName = fl.fStr_GetFileFromPath(myPath)\n    ''' Get the file Name from a file path '''\n    \n    l_files =   fl.fL_listFile(myFolder)\n    \"\"\" Listing all files and folder in a folder using the library glob \"\"\"\n    \n    l_files =   fl.fList_FileInDir(myFolder)\n    \"\"\" Listing all files and folder in a folder using the library os \"\"\"    \n    \n    if not fl.fBl_FileExist(_path):\n    \"\"\" Test if a file exist. Giving a path, return a Boolean \"\"\"\n    \n    if not fl.fBl_FolderExist(_path):\n    \"\"\" Test if a folder exist. Giving a folder path, return a Boolean \"\"\"\n    \n    if not fl.fBl_FolderExist_timeout(_path):\n    \"\"\" Test if a folder exist. Giving a folder path, return a Boolean\n        The function is decorated not to search for more than 10 secondes \"\"\"\n    \n    fl.TrimTxtFile(str_path, bl_right = True)\n    \"\"\" This function will Trim the space in a text file\n        We can decide to Trim only the space on the left or right \n        By default, the Trim is both side\"\"\"\n    \n    fl.Act_Rename(str_newFolder, str_oldName, str_newName, False)\n    \"\"\" Renaming a file and if it failed using the lib os, it will MOVE the file with shutil \"\"\"\n    \n    newName = fl.fStr_TransformFilName_fromXXX_forGlobFunction(fileName, bl_exactNumberX = False)\n    \"\"\" Change a string with unknown characters (XXXX) into sth understandable by the glob library\n        'file_{*}_1.zip' ==> 'file_*_1.zip'     ( bl_exactNumberX = False)\n        'file_{XXXX}_1.zip' ==> 'file_????.zip' ( bl_exactNumberX = True)\n        'file_{XXXX}.zip' ==> 'file_*.zip'      ( bl_exactNumberX = False)\n        \"\"\"\n    \n    L_filIn =   fl.fL_GetFileListInFolder(myFolder, fileName_X, bl_searchOnly, bl_exactNb)\n    \"\"\" Return the list of files in a folder that match the pattern given of the fileName \n        with {*} or {XXX} within \"\"\"\n    \n    fileName = fl.fStr_GetMostRecentFile_InFolder(folder, fileName_X)\n    \"\"\" Return the list of files in a folder that match the pattern given of the fileName\n        with {*} or {XXX} within\n        AND take the most recent one\"\"\"\n    \n    l_files_X = fl.fL_GetFileList_withinModel(l_files, str_fileName)\n    \"\"\" If you have in memory a list of File Name\n        you want to return the list of those who match the pattern given of the fileName\n        with {*} or {XXX} within\"\"\"\n    \n    dte_modif = fl.fDte_GetModificationDate(myPath)\n    \"\"\" Function Get the Modification Date of a file\n        Useful for Update of App \"\"\"\n    \n    l_pathReturn = fl.fL_KeepFiles_wTimeLimit(l_files, dte_after = 100)\n    \"\"\" Filter a list of file Path to return the files that has been updated \n        after X days in the past and before Y days in the past \n        dte_after and dte_before can be date or integer of days in the past\"\"\"\n    \n    bl_creation = fl.fBl_createDir(myFolder)\n    \"\"\" Create a Directory\n        Return False if Directory exists, True if the folder has been created \"\"\"\n    \n    o_file = fl.fO_readfile_parquet(str_pathFile, **d_options)\n    \"\"\" fO_readfile_parquet reads parquet - require the libraries : pyarrow / fastparquet\n        options: use_threads, engine='fastparquet', ... \"\"\"\n    \n    str_sqlRequest = fl.fStr_ReadFile_sql(path)\n    \"\"\" fStr_ReadFile_sql Opens and read the file as a single buffer\"\"\"\n    \n    df_data = fl.fDf_readExcelWithPassword(path, SheetName, ExcelPwd, 'A1:M400')\n    \"\"\" You can read an Excel file protected with password - Requires to open the Excel App\n        Also, for performance issue (and in order not to open Excel App again)\n        it will create a csv copy named: fileName_sheetName.csv \n        Once the csv created, the same function will only use |pd.read_csv()|\n        Return a Dataframe\"\"\"\n    \n    d_data = fl.fDic_readExcelWithPassword_sevSh(path, ExcelPwd, d_shName_areaToLoad)\n    \"\"\" You can read an Excel file protected with password - Requires to open the Excel App\n        Also, for performance issue (and in order not to open Excel App again)\n        it will create 1 CSV per sheet in the spredsheet named: fileName_sheetName.csv\n        Once all the csv created, the same function will only use |pd.read_csv()|\n        Return a sictionary of Dataframe, key will be the SheetNames\n        \"\"\"\n    \n    df_data = pd_read_excel(str_path, str_SheetName, bl_header)\n    \"\"\" To be able to read xlsx files with the function: |pd.read_excel|\n        You need to have a previous xlrd version (xlrd==1.2.0)\n        And replace the file xlsx.py (/Lib/site-packages/xlrd) by the one in this library !!!\n        If it fails the engine openxyl will be used\n        You can pass a sheet_name and a header as input\n        \"\"\"\n    \n    fl.fStr_createExcel_1Sh(path, '', df_PCF, str_SheetName = '', bl_header = False)\n    \"\"\" Create a single sheet Excel file\"\"\"\n    \n    fl.fStr_createExcel_SevSh(path, '', l_dfData, l_SheetName, bl_header = True)\n    \"\"\" Create a several sheets Excel file, Input is a list of Dataframe\n        Will use pd.ExcelWriter and will no return any error depending of the version of xlrd\n        if |options = d_options| wont work, |engine_kwargs = {'options' : d_options}| will be tried as well\n        \"\"\"\n    \n    fl.fStr_createExcel_SevSh_celByCel(path, '', l_dfData, l_SheetName)\n    \"\"\" Create a several sheets Excel file\n        Input is a list of Dataframe and list of Sheet Names\n        Will use xlsxwriter and fill the Excel Cell by Cell\n        Performance may be pretty low\n        Preferable to use the function : fStr_createExcel_SevSh\n        \"\"\"\n    \n    fl.fStr_fillExcel_InsertNewSheet(path, '', df_data, str_SheetName)\n    \"\"\" Take an existing  Excel file and insert a new sheet\n        Input is a list of Dataframe - Will use pd.ExcelWriter \n        INSERT SHEET: 1 file out - 1 Dataframe - 1 Sheet \"\"\"\n    \n    fl.fStr_fillXls_df_xlWgs_sevSh(folder, FileName, l_dfData, l_SheetName = l_shName)\n    \"\"\" Take an existing Excel file and an existing sheet and fill it with new data\n        Input is a Dataframe - Will use c_xlApp_xlwings class\n        1 file out - 1 Dataframe - 1 Sheet\"\"\"\n    \n    str_path = fl.fStr_fillXls_df_xlWgs_sevSh(folder, FileName, l_dfData, l_SheetName = l_shName)\n    \"\"\" Take an existing Excel file and several existing sheet and fill it with new data\n        Input is a list of Dataframe, SheetNames - Will use c_win32_xlApp class\n        1 fileout - n Dataframe - n Sheet\"\"\"\n    \n    Act_win32_SaveAsCleanFile(path, pathNew)\n    \"\"\" Sometimes an Excel file is an old version and might be corrupted\n        By Passing your file through this function, Excel App will be open, SaveAs and Close \n        so the new File will be useable by Python after\"\"\"\n    \n    df_donnee = fl.fDf_convertToXlsx(path, SheetName, bl_header = None)\n    \"\"\" Will use Act_win32_SaveAsCleanFile to make sure the file is not corrupted\n        and SaveAs XLSX instead of XLS \n        Read it and return the dataframe \"\"\"\n        \n    df_donnee = fl.fDf_overwriteXlsx(path, SheetName, bl_header = None)\n    \"\"\" Will use Act_win32_SaveAsCleanFile to save a non-corrupted XLSX file \n        Read it and return the dataframe \"\"\"\n    \n    fl.Act_convertToXls_fromXlsx(path)\n    \"\"\" Will use Act_win32_SaveAsCleanFile to make sure the file is not corrupted\n        and SaveAs XLS instead of XLSX \"\"\"\n    \n    fl.Act_win32OConvertXls_pdf(path)\n    \"\"\" Will open an Excel file and convert it into PDF\"\"\"\n    \n    bl_tooOld = fl.fBl_fileTooOld(path, int_dayHisto = 10)\n    \"\"\" Return a boolean to know if a file is older than N days in the past \"\"\"\n    \n    fl.del_fichier_ifOldEnought(path,'', int_dayToKeep = 10)\n    \"\"\" Check is a file is older than N days in the past \n        And if so, delete it \n        If the folder where the file is supposed to be does not exist, the function will create it\"\"\"\n    \n    fl.ZipExtractFile(ZipPath, pathDest, FileName, bl_extractAll=False, str_zipPassword='')\n    \"\"\" Will read a ZIP file and extract its content in a destination folder\n        It can take password\n        It can extract all or only a file\"\"\"\n    \n    fl.Act_StyleIntoExcel(path, format, sheetName)\n    \"\"\" Take an Excel Spreadsheet and a sheet and apply a format to it\n        str_format is a dictionary within a string,\n        the dictionary will be build by the fucntion eval\n        Example of format:\n            \"{'A1:M500':{'font':{'name':'Calibri', 'size':9}},\n            'B3:B5':{'font':{'name':'Calibri', 'size':10, 'bold':True,'color':styl.colors.WHITE},\n                    'alignment':{'horizontal':'right'},\n                    'fill':{'patternType':'solid', 'fill_type':'solid', 'fgColor': 'F2F2F2'}},\n            'Column_size':{'A':50,'B':35,'C':10,'D':10,'E':15,'F':15,'G':18,'H':10},\n            'Table_bord':{'A3:A11':'normBlack', 'B3:B11':'normBlack'},\n            'Table_bord_full':{'A1:B1':'normBlack'},\n            'Table_bord_EndDown_full':{'A13':'normBlack'},\n            'num_format':{'B6:B6':'#,##0.0000', 'B7:B8':'#,##0'},\n            'num_format_col':{'G13':'#,##0.00',  'H13':'0.00%'}\n            }\"\n        \"\"\"\n        \n    Act_KillExcel()\n    \"\"\" This function kills all session of Excel\n        Including the 'ghost' session you would kill from the Task Manager \"\"\"\n    \n    \n    2. Class\n    \n    inst_xlWings = c_xlApp_xlwings()\n    inst_xlWings.FindXlApp(bl_visible = True, bl_screen_updating = False, bl_display_alerts = False)\n    inst_xlWings.OpenWorkbook(path)\n    inst_xlWings.DefineWorksheet(SheetName, i + 1)\n    inst_xlWings.InsertDf_inRange(df_data)\n    inst_xlWings.close_Book(bl_saveBeforeClose = True)\n    \"\"\" The class allow you to manage excel with the library xlwings which might work better than win32\n        Open the Excel Office App, Close, Save, define / rename / create sheet, fill an area\n        The class is decorated to be a singleton so we always use the same instance of Excel\n        DOC: https://docs.xlwings.org/en/stable/api.html\n        \"\"\"\n    \n    inst_xlApp = fl.c_win32_xlApp()\n    inst_xlApp.FindXlApp(bl_visible = True)\n    inst_xlApp.OpenWorkbook(str_path)\n    inst_xlApp.xlApp.DisplayAlerts = False\n    inst_xlApp.ConvertToPdf()\n    inst_xlApp.CloseWorkbook(bl_saveBeforeClose = True)\n    \"\"\" The class allow you to manage excel with the library win32com.client\n        Open the Excel Office App, Close, Save, define / rename / create sheet, fill an area\n        The class is decorated to be a singleton so we always use the same instance of Excel\n        \"\"\"\n    \n    \n***END***\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Laurent-Tupin/py2nut",
    "keywords": "",
    "license": "Copyright 2022-2035",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py2nut",
    "package_url": "https://pypi.org/project/py2nut/",
    "platform": null,
    "project_url": "https://pypi.org/project/py2nut/",
    "project_urls": {
      "Homepage": "https://github.com/Laurent-Tupin/py2nut"
    },
    "release_url": "https://pypi.org/project/py2nut/3.2.1/",
    "requires_dist": [
      "datefinder (==0.7.3)"
    ],
    "requires_python": "",
    "summary": "This Library allows you to make Misc operations in various domain",
    "version": "3.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17396170,
  "releases": {
    "1.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48651f25e5f0ceeea2feee9ab6352327e72b6ded1f2fb2171852786b8eeef1ce",
          "md5": "5e3891efdf54f50c60a8eb01cc080e75",
          "sha256": "61b65f21f84462caa2803ad221b19f7a6027f274fcb45db2a478a2fbb4f07751"
        },
        "downloads": -1,
        "filename": "py2nut-1.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e3891efdf54f50c60a8eb01cc080e75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22528,
        "upload_time": "2022-12-05T05:41:02",
        "upload_time_iso_8601": "2022-12-05T05:41:02.585747Z",
        "url": "https://files.pythonhosted.org/packages/48/65/1f25e5f0ceeea2feee9ab6352327e72b6ded1f2fb2171852786b8eeef1ce/py2nut-1.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fbaad56530893e057cff306df19617eceac43c80cd71e248c40c6c91d59306f",
          "md5": "023d0f443efd22ab6f4b2ed6e8f51a9a",
          "sha256": "4bcbf999f1a561569be6b87f4e9fb10e86b13bb5857275a1fed3e2a8408abbde"
        },
        "downloads": -1,
        "filename": "py2nut-1.10.3.tar.gz",
        "has_sig": false,
        "md5_digest": "023d0f443efd22ab6f4b2ed6e8f51a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29479,
        "upload_time": "2022-12-05T05:41:05",
        "upload_time_iso_8601": "2022-12-05T05:41:05.174902Z",
        "url": "https://files.pythonhosted.org/packages/2f/ba/ad56530893e057cff306df19617eceac43c80cd71e248c40c6c91d59306f/py2nut-1.10.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5b8d62ae8ba9bbf7d268b8290b8b684fe1bc4b54ce597dfe43dc3d654338393",
          "md5": "f8f1fe13db386dea1d30fc3e1e05a848",
          "sha256": "db75373cc765bd09ff5eb7865e9f0db74d1555908b1a858e39fd45470670b568"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8f1fe13db386dea1d30fc3e1e05a848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20412,
        "upload_time": "2022-12-05T06:37:02",
        "upload_time_iso_8601": "2022-12-05T06:37:02.803853Z",
        "url": "https://files.pythonhosted.org/packages/b5/b8/d62ae8ba9bbf7d268b8290b8b684fe1bc4b54ce597dfe43dc3d654338393/py2nut-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b18e00257622ed64ab841d3cd7b50b053046b3aff3b02f716daeafc301ade31",
          "md5": "c14859e9a4c8b97fc1030e1f5cfd8531",
          "sha256": "0ff686914e3a54a3c7021b20bf2003578977c0856f1e570321a1ec27262ed863"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c14859e9a4c8b97fc1030e1f5cfd8531",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21376,
        "upload_time": "2022-12-05T06:37:04",
        "upload_time_iso_8601": "2022-12-05T06:37:04.587336Z",
        "url": "https://files.pythonhosted.org/packages/4b/18/e00257622ed64ab841d3cd7b50b053046b3aff3b02f716daeafc301ade31/py2nut-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99f688ff766e846d158b873a23977bcc421f6a7c1d3b5e8d3137308c14769f0c",
          "md5": "86cb662f237af9b51f233a9affd0ca4e",
          "sha256": "b3696027dcb58956c57e9b379d2f28e052478157c890887a48c07bf004363de4"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86cb662f237af9b51f233a9affd0ca4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45601,
        "upload_time": "2022-12-05T07:30:17",
        "upload_time_iso_8601": "2022-12-05T07:30:17.532252Z",
        "url": "https://files.pythonhosted.org/packages/99/f6/88ff766e846d158b873a23977bcc421f6a7c1d3b5e8d3137308c14769f0c/py2nut-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a8229f5479838b0e7005bdc2de529cf62bbbec02c2b13ecfd8a494c32f2eb24",
          "md5": "155f865fc1766e8b7da12614f5e0e478",
          "sha256": "9f64ec646f90bde56d622005607c5abfd9506e4b2812c47cfe322a91caddb45e"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "155f865fc1766e8b7da12614f5e0e478",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50857,
        "upload_time": "2022-12-05T07:30:19",
        "upload_time_iso_8601": "2022-12-05T07:30:19.476406Z",
        "url": "https://files.pythonhosted.org/packages/0a/82/29f5479838b0e7005bdc2de529cf62bbbec02c2b13ecfd8a494c32f2eb24/py2nut-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1edab35bc21398ea1c4fc20521e241bab91c45e49841caebd705a715645d8586",
          "md5": "b8f4ae45c06eb30de31031bdb181bc20",
          "sha256": "a58ff96fa5a065aadc0daaf6a4b58f1b4c48da486d519b060c2d35bb9fa8d054"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8f4ae45c06eb30de31031bdb181bc20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 141502,
        "upload_time": "2022-12-05T09:22:29",
        "upload_time_iso_8601": "2022-12-05T09:22:29.238907Z",
        "url": "https://files.pythonhosted.org/packages/1e/da/b35bc21398ea1c4fc20521e241bab91c45e49841caebd705a715645d8586/py2nut-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a0bf9e71af25e18990e53a60a43254ea3bd511ece47a3cf628cc364021f8dd1",
          "md5": "dce0e13b0153fd8dc4c12b48ea7a6460",
          "sha256": "3abe2c5d70739f703d921066f34d96a6e3e0cc0d26575337ac5e8efe4240011d"
        },
        "downloads": -1,
        "filename": "py2nut-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dce0e13b0153fd8dc4c12b48ea7a6460",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 128249,
        "upload_time": "2022-12-05T09:22:31",
        "upload_time_iso_8601": "2022-12-05T09:22:31.253430Z",
        "url": "https://files.pythonhosted.org/packages/4a/0b/f9e71af25e18990e53a60a43254ea3bd511ece47a3cf628cc364021f8dd1/py2nut-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d834fe264588b5a83657bbb1fb45b7cdcc8f00d96fc3432bd3a8d2cda20b5de",
          "md5": "e6227ab4bad2a42c89ab8fbb15a7786d",
          "sha256": "2c202f3e9969aab14e2466a5367eea10afc38a8c6a58582f549ae2bb52adcddb"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6227ab4bad2a42c89ab8fbb15a7786d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 262758,
        "upload_time": "2022-12-05T14:14:01",
        "upload_time_iso_8601": "2022-12-05T14:14:01.307240Z",
        "url": "https://files.pythonhosted.org/packages/8d/83/4fe264588b5a83657bbb1fb45b7cdcc8f00d96fc3432bd3a8d2cda20b5de/py2nut-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7249d11ce5ccc0dbcef25c9aa40c4125558ec9dc772baed8f6348da268add45",
          "md5": "aa459f9ecd399b67ce9ff042b6277be6",
          "sha256": "876f401250a72032a4a20fbb26cb02387b85a8a1bcc298b5f440280dfe8b04d2"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa459f9ecd399b67ce9ff042b6277be6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 128849,
        "upload_time": "2022-12-05T14:14:08",
        "upload_time_iso_8601": "2022-12-05T14:14:08.903931Z",
        "url": "https://files.pythonhosted.org/packages/d7/24/9d11ce5ccc0dbcef25c9aa40c4125558ec9dc772baed8f6348da268add45/py2nut-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a2ca8b092e50182a7eb99c7b27a262ae39ce2711cfcc992f18a37978b811550",
          "md5": "3ddd0916d677eb7268d8d04e1af65716",
          "sha256": "fa0eb409343aeb6559af9c4d9e03d76b55239eadcde644ff7274f426e9cdb2e2"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ddd0916d677eb7268d8d04e1af65716",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 151706,
        "upload_time": "2023-01-04T09:23:10",
        "upload_time_iso_8601": "2023-01-04T09:23:10.958489Z",
        "url": "https://files.pythonhosted.org/packages/7a/2c/a8b092e50182a7eb99c7b27a262ae39ce2711cfcc992f18a37978b811550/py2nut-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef07c7f8afad94c17ba15be297adaa8e5abf771c21354e04f51a6a1e3c1e1f38",
          "md5": "4c8438fd35955266eb1a035742c6789c",
          "sha256": "37889d03ba77cc6e630a9b436503f21eb3226f954f6c4049b39f30119d5cb333"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c8438fd35955266eb1a035742c6789c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 142360,
        "upload_time": "2023-01-04T09:23:12",
        "upload_time_iso_8601": "2023-01-04T09:23:12.634342Z",
        "url": "https://files.pythonhosted.org/packages/ef/07/c7f8afad94c17ba15be297adaa8e5abf771c21354e04f51a6a1e3c1e1f38/py2nut-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "503d42200ca2d2c4444c9f168760c469ac28b56718986f8f4650c56b3c6343e2",
          "md5": "09c36dd3635c58ee203a230580ac06e6",
          "sha256": "c570ff8c85913feec650a137aa9fbdc45f6602a10adf35c44ee8c56a02ff164f"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09c36dd3635c58ee203a230580ac06e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 151783,
        "upload_time": "2023-01-26T07:29:09",
        "upload_time_iso_8601": "2023-01-26T07:29:09.836859Z",
        "url": "https://files.pythonhosted.org/packages/50/3d/42200ca2d2c4444c9f168760c469ac28b56718986f8f4650c56b3c6343e2/py2nut-2.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6e6fba79f3b215f9f9b1614681bbb34ba424cfce116167886609e33b164cc83",
          "md5": "93e70346056cca719a81c55c97582467",
          "sha256": "3025f200a2b53bf6784e1a6e41b52f217a067926fe3626898d536963b5bbdfc5"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "93e70346056cca719a81c55c97582467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 142357,
        "upload_time": "2023-01-26T07:29:12",
        "upload_time_iso_8601": "2023-01-26T07:29:12.029028Z",
        "url": "https://files.pythonhosted.org/packages/d6/e6/fba79f3b215f9f9b1614681bbb34ba424cfce116167886609e33b164cc83/py2nut-2.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e03d6bf3b19b04c751344f8acf3ee46034bd84e91cb4dfb4a4d2df9c694e3685",
          "md5": "8eea298fddd005cccc68e927c2e8853f",
          "sha256": "d515902077eb41bc606d92696c61ef22f8397a958b7345432c96544227dfa9aa"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8eea298fddd005cccc68e927c2e8853f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 151680,
        "upload_time": "2023-01-27T09:07:16",
        "upload_time_iso_8601": "2023-01-27T09:07:16.919682Z",
        "url": "https://files.pythonhosted.org/packages/e0/3d/6bf3b19b04c751344f8acf3ee46034bd84e91cb4dfb4a4d2df9c694e3685/py2nut-2.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "360f959efad3d04911585a229998335e72b81ffbd071fe0c27a84a8fc63c1d28",
          "md5": "009fed0d3bbfaaf7113b2ea00bff2e2c",
          "sha256": "275e0428b4eb3bb213204ab1ba9e5424f437b513c960dbf582122011c8bad4a4"
        },
        "downloads": -1,
        "filename": "py2nut-2.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "009fed0d3bbfaaf7113b2ea00bff2e2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 142377,
        "upload_time": "2023-01-27T09:07:19",
        "upload_time_iso_8601": "2023-01-27T09:07:19.699462Z",
        "url": "https://files.pythonhosted.org/packages/36/0f/959efad3d04911585a229998335e72b81ffbd071fe0c27a84a8fc63c1d28/py2nut-2.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "232cbe7b96740616dcdadef6aeb7a7d69c116dfcae29f934910be4c6a6fd79bd",
          "md5": "f408add688018dac2dee2d32f6646c95",
          "sha256": "005ab5747f8e480b6c520702a69cb2778cb4a2d172864e43625ab99d19417e57"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f408add688018dac2dee2d32f6646c95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97405,
        "upload_time": "2023-02-09T08:11:29",
        "upload_time_iso_8601": "2023-02-09T08:11:29.087510Z",
        "url": "https://files.pythonhosted.org/packages/23/2c/be7b96740616dcdadef6aeb7a7d69c116dfcae29f934910be4c6a6fd79bd/py2nut-3.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc919cdf61a271537bb33f13ee0302da432f3f404c3839d3830e994f7c4f3855",
          "md5": "4796809f52da90e5f355a24bf13ac630",
          "sha256": "0e1f17a958d6c2bfc81ab92bc6b84b5f8294d2831d37f5afdc364b916be13291"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4796809f52da90e5f355a24bf13ac630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97454,
        "upload_time": "2023-02-09T08:11:30",
        "upload_time_iso_8601": "2023-02-09T08:11:30.798879Z",
        "url": "https://files.pythonhosted.org/packages/fc/91/9cdf61a271537bb33f13ee0302da432f3f404c3839d3830e994f7c4f3855/py2nut-3.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f6cf0f3b6d5549dc2b13d3d41645bb649c88dfd217e2f0af5da4d218804e819",
          "md5": "2d349c31c3d9b9797e51eb0950533db3",
          "sha256": "11f7fcfb3176c6fb3bff65b1a4d6d5ba30a8005c4ce39df462468c2528c255f2"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d349c31c3d9b9797e51eb0950533db3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97598,
        "upload_time": "2023-02-09T09:45:13",
        "upload_time_iso_8601": "2023-02-09T09:45:13.839467Z",
        "url": "https://files.pythonhosted.org/packages/5f/6c/f0f3b6d5549dc2b13d3d41645bb649c88dfd217e2f0af5da4d218804e819/py2nut-3.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9154908125d14ab72c2e036c6aaf9af4741c1603b4bccf9ce392fd969afb6260",
          "md5": "0259bb2c71a46a77f2824958da92bedb",
          "sha256": "a035cad36ff776f510340d18bc3856807c352cbe6d561a5f5e5fb24907a5c996"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0259bb2c71a46a77f2824958da92bedb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97608,
        "upload_time": "2023-02-09T09:45:15",
        "upload_time_iso_8601": "2023-02-09T09:45:15.628089Z",
        "url": "https://files.pythonhosted.org/packages/91/54/908125d14ab72c2e036c6aaf9af4741c1603b4bccf9ce392fd969afb6260/py2nut-3.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aff995506416f0d3cffb44aeb9bbc528701c789e7330f92e4795696b77106ac7",
          "md5": "ac08538e7c124395540ed4cdba9ea197",
          "sha256": "34317f39fbfee1ce0472d71f566ca14f20a1171791b9262d95c3658214c3ee6e"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac08538e7c124395540ed4cdba9ea197",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97615,
        "upload_time": "2023-02-09T09:57:27",
        "upload_time_iso_8601": "2023-02-09T09:57:27.647987Z",
        "url": "https://files.pythonhosted.org/packages/af/f9/95506416f0d3cffb44aeb9bbc528701c789e7330f92e4795696b77106ac7/py2nut-3.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cc40440bffee4dc512f0aeac7f3a84e82dc025ee5611610011f63e391ff7efc",
          "md5": "15e7b819de9a3332edf743cecd322d50",
          "sha256": "d23ae34e0caf1733f7dac18c53ff308231bbaf65f4e884aa688c85860e161c09"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "15e7b819de9a3332edf743cecd322d50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97614,
        "upload_time": "2023-02-09T09:57:29",
        "upload_time_iso_8601": "2023-02-09T09:57:29.335144Z",
        "url": "https://files.pythonhosted.org/packages/6c/c4/0440bffee4dc512f0aeac7f3a84e82dc025ee5611610011f63e391ff7efc/py2nut-3.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f1a8a7b6622314ebf1ac91690f7bb51db7bb7c17131913e7398195d0dd5b3f",
          "md5": "cf067dd426990b962113df6e077f4ac5",
          "sha256": "0411fc23f76b9c949e9b4d8294240cb895354d6b18297b12004f60660d7cd8a6"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf067dd426990b962113df6e077f4ac5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 98150,
        "upload_time": "2023-03-22T03:41:06",
        "upload_time_iso_8601": "2023-03-22T03:41:06.289430Z",
        "url": "https://files.pythonhosted.org/packages/b6/f1/a8a7b6622314ebf1ac91690f7bb51db7bb7c17131913e7398195d0dd5b3f/py2nut-3.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edc0b39fcf4d010f04b1b3675a150e26a21ef00faf9da7b42c29802082e06cde",
          "md5": "87627bd477fcabcd9da31b6dc8c88895",
          "sha256": "0e87d836003409085235638f8f07a5ae77a91bd860d27289d40fa98b0443c79b"
        },
        "downloads": -1,
        "filename": "py2nut-3.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "87627bd477fcabcd9da31b6dc8c88895",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98244,
        "upload_time": "2023-03-22T03:41:10",
        "upload_time_iso_8601": "2023-03-22T03:41:10.112917Z",
        "url": "https://files.pythonhosted.org/packages/ed/c0/b39fcf4d010f04b1b3675a150e26a21ef00faf9da7b42c29802082e06cde/py2nut-3.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aeccc35f88a776f52ab5d2617497db8d50f44f8d5327dd87a3d4f7a25bf4397",
          "md5": "fd575f9cdaf19360006795c001246178",
          "sha256": "c5522454ddcb66e60215af2b4d885cb44517ef1ef3f223ab93ac54c524680525"
        },
        "downloads": -1,
        "filename": "py2nut-3.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd575f9cdaf19360006795c001246178",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 98815,
        "upload_time": "2023-03-22T10:31:59",
        "upload_time_iso_8601": "2023-03-22T10:31:59.077198Z",
        "url": "https://files.pythonhosted.org/packages/3a/ec/cc35f88a776f52ab5d2617497db8d50f44f8d5327dd87a3d4f7a25bf4397/py2nut-3.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "829cd607dc5b3278ff3e2432a4f8cb3610b4a6bbb1be01efd9a2e09d6fdcd067",
          "md5": "bc92d3055f8a61692cb4a24bf1a53294",
          "sha256": "ed94e9f9e7f01767089551f7cfc6c66a3bac9e7fbeffc8f33ef42c3632e46fea"
        },
        "downloads": -1,
        "filename": "py2nut-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc92d3055f8a61692cb4a24bf1a53294",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98902,
        "upload_time": "2023-03-22T10:32:02",
        "upload_time_iso_8601": "2023-03-22T10:32:02.774089Z",
        "url": "https://files.pythonhosted.org/packages/82/9c/d607dc5b3278ff3e2432a4f8cb3610b4a6bbb1be01efd9a2e09d6fdcd067/py2nut-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3aeccc35f88a776f52ab5d2617497db8d50f44f8d5327dd87a3d4f7a25bf4397",
        "md5": "fd575f9cdaf19360006795c001246178",
        "sha256": "c5522454ddcb66e60215af2b4d885cb44517ef1ef3f223ab93ac54c524680525"
      },
      "downloads": -1,
      "filename": "py2nut-3.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd575f9cdaf19360006795c001246178",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 98815,
      "upload_time": "2023-03-22T10:31:59",
      "upload_time_iso_8601": "2023-03-22T10:31:59.077198Z",
      "url": "https://files.pythonhosted.org/packages/3a/ec/cc35f88a776f52ab5d2617497db8d50f44f8d5327dd87a3d4f7a25bf4397/py2nut-3.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "829cd607dc5b3278ff3e2432a4f8cb3610b4a6bbb1be01efd9a2e09d6fdcd067",
        "md5": "bc92d3055f8a61692cb4a24bf1a53294",
        "sha256": "ed94e9f9e7f01767089551f7cfc6c66a3bac9e7fbeffc8f33ef42c3632e46fea"
      },
      "downloads": -1,
      "filename": "py2nut-3.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bc92d3055f8a61692cb4a24bf1a53294",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 98902,
      "upload_time": "2023-03-22T10:32:02",
      "upload_time_iso_8601": "2023-03-22T10:32:02.774089Z",
      "url": "https://files.pythonhosted.org/packages/82/9c/d607dc5b3278ff3e2432a4f8cb3610b4a6bbb1be01efd9a2e09d6fdcd067/py2nut-3.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}