{
  "info": {
    "author": "Yunlong Lu",
    "author_email": "luyunlong@pku.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Mahjong Fan Calculator Python\r\n=====\r\n\r\nREADME:[English](https://github.com/ailab-pku/PyMahjongGB/blob/master/README.md)|[中文](https://github.com/ailab-pku/PyMahjongGB/blob/master/README-zh.md)\r\n\r\n## Install\r\n```pip install PyMahjongGB```\r\n\r\n## Usage\r\n\r\n### MahjongFanCalculator\r\n\r\n```Python\r\nfrom MahjongGB import MahjongFanCalculator\r\n\r\n# 算番函数\r\n((fanCount, fanName), ...) MahjongFanCalculator(\r\n    pack = ((packType, tileCode, offer), ...),\r\n    hand = (tileCode, ...),\r\n    winTile = tileCode,\r\n    flowerCount = int 0..8,\r\n    isSelfDrawn = bool,\r\n    is4thTile = bool,\r\n    isAboutKong = bool,\r\n    isWallLast = bool,\r\n    seatWind = int 0..3,\r\n    prevalentWind = int 0..3,\r\n\t[optional, default = False]verbose = bool)\r\n```\r\n\r\n- pack: The declared tiles. A tuple of tuples of three elements each:\r\n        packType of \"PENG\"/\"GANG\"/\"CHI\" for PUNG, KONG and CHOW,\r\n\t\ttileCode (see details below), middle tile in case of CHOW,\r\n\t\toffer, 1, 2, 3 for player on left/opposite/right who offers this tile in case of PUNG and KONG, 1, 2, 3 for which tile is offered in case of CHOW.\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- winTile: The winning tile to make Mahjong.\r\n- flowerCount: The number of the Flower and Season tiles.\r\n- isSelfDrawn: Whether the winning tile is self-drawn.\r\n- is4thTile: Whether the winning tile is the 4th tile.\r\n- isAboutKong: Whether the winning is about Kong. If the player wins by other's discard, it is Robbing the Kong. Otherwise, if the player wins by self-drawn, it is Out with Replacement Tile.\r\n- isWallLast: Whether the winning tile is the last one in tile wall. If self-drawn, it is Last Tile Draw. Otherwise, it is Last Tile Claim.\r\n- seatWind: Seat wind. The number 0, 1, 2, 3 represent East, South, West, and North respectively.\r\n- prevalentWind: Prevalent wind. The number 0, 1, 2, 3 represent East, South, West, and North respectively.\r\n- verbose: Default to False. If set to True, return format is (fan_point, cnt, fan_name, fan_name_en) instead of (fan_count, fan_name).\r\n- return: This function returns a tuple of tuples of two elements each: the fan count and fan name of each fan.\r\n\r\nTileCode Table:\r\n- W1 ~ W9 for CHARACTERS,\r\n- T1 ~ T9 for BAMBOOS,\r\n- B1 ~ B9 for DOTS,\r\n- F1 ~ F4 for WINDS,\r\n- J1 ~ J3 for DRAGONS,\r\n- H1 ~ H8 for FLOWERS and SEASONS.\r\n\r\n\r\n### MahjongShanten\r\n\r\n```Python\r\nfrom MahjongGB import MahjongShanten\r\n\r\n# 计算向听数\r\nshanten MahjongShanten(\r\n    pack = ((packType, tileCode, offer), ...),\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- pack: The declared tiles. A tuple of tuples of three elements each:\r\n        packType of \"PENG\"/\"GANG\"/\"CHI\" for PUNG, KONG and CHOW,\r\n\t\ttileCode (see details below), middle tile in case of CHOW,\r\n\t\toffer, 1, 2, 3 for player on left/opposite/right who offers this tile in case of PUNG and KONG, 1, 2, 3 for which tile is offered in case of CHOW.\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns an integer: shanten.\r\n\r\n### ThirteenOrphansShanten\r\n\r\n```Python\r\nfrom MahjongGB import ThirteenOrphansShanten\r\n\r\n# 计算十三幺向听数，手牌必须13张\r\n(shanten, useful) = ThirteenOrphansShanten(\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns a tuple: an integer shanten and a tuple consisting of tilecodes of useful tiles.\r\n\r\n### SevenPairsShanten\r\n\r\n```Python\r\nfrom MahjongGB import SevenPairsShanten\r\n\r\n# 计算七对向听数，手牌必须13张\r\n(shanten, useful) = SevenPairsShanten(\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns a tuple: an integer shanten and a tuple consisting of tilecodes of useful tiles.\r\n\r\n### HonorsAndKnittedTilesShanten\r\n\r\n```Python\r\nfrom MahjongGB import HonorsAndKnittedTilesShanten\r\n\r\n# 计算全不靠向听数，手牌必须13张\r\n(shanten, useful) = HonorsAndKnittedTilesShanten(\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns a tuple: an integer shanten and a tuple consisting of tilecodes of useful tiles.\r\n\r\n### KnittedStraightShanten\r\n\r\n```Python\r\nfrom MahjongGB import KnittedStraightShanten\r\n\r\n# 计算组合龙向听数，手牌必须10张或者13张\r\n(shanten, useful) = KnittedStraightShanten(\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns a tuple: an integer shanten and a tuple consisting of tilecodes of useful tiles.\r\n\r\n### RegularShanten\r\n\r\n```Python\r\nfrom MahjongGB import RegularShanten\r\n\r\n# 计算基本胡型的向听数，手牌可以是1, 4, 7, 10, 13张\r\n(shanten, useful) = RegularShanten(\r\n    hand = (tileCode, ...))\r\n```\r\n\r\n- hand: The concealed tiles in hand. A tuple of tileCodes.\r\n- return: This function returns a tuple: an integer shanten and a tuple consisting of tilecodes of useful tiles.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ailab-pku/MahjongGB",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyMahjongGB",
    "package_url": "https://pypi.org/project/PyMahjongGB/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyMahjongGB/",
    "project_urls": {
      "Homepage": "https://github.com/ailab-pku/MahjongGB"
    },
    "release_url": "https://pypi.org/project/PyMahjongGB/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A library for Fan Calculation of Mahjong in Chinese Standard Rule.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16898837,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84a05b0c5ed56c4339b475e646ceefd1fc8d18294794f83d6f0ba5bbc822df55",
          "md5": "b5a6e2575c4b75027f97bd36cf810e88",
          "sha256": "5cd182dbb5c90ea6d12deccdd4e273bae4af64f3fdff215cac8873f5f6251c7c"
        },
        "downloads": -1,
        "filename": "PyMahjongGB-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5a6e2575c4b75027f97bd36cf810e88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 51693,
        "upload_time": "2021-03-29T11:36:42",
        "upload_time_iso_8601": "2021-03-29T11:36:42.821359Z",
        "url": "https://files.pythonhosted.org/packages/84/a0/5b0c5ed56c4339b475e646ceefd1fc8d18294794f83d6f0ba5bbc822df55/PyMahjongGB-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2228b2b1a09f7be494779164a6da2b3a36889aeba7310dd5d4399de110f6c0a0",
          "md5": "13666dee3ff227c85fdad6579231ca7d",
          "sha256": "f343e78aeb0a83700d621ac3ca268f0520a1c2c28944735761c29d9d41257819"
        },
        "downloads": -1,
        "filename": "PyMahjongGB-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13666dee3ff227c85fdad6579231ca7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 50943,
        "upload_time": "2021-09-24T13:04:50",
        "upload_time_iso_8601": "2021-09-24T13:04:50.644885Z",
        "url": "https://files.pythonhosted.org/packages/22/28/b2b1a09f7be494779164a6da2b3a36889aeba7310dd5d4399de110f6c0a0/PyMahjongGB-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5038f4bde9249bcd63fe12ee937f337a6978b2a344c13b7d8afa67e433b2d7a7",
          "md5": "b314443d68862ea18bd49625efcf5025",
          "sha256": "fdd6afe9a16412f89d7bb563e04c430862aad35b4bb42b43763326847cdb8202"
        },
        "downloads": -1,
        "filename": "PyMahjongGB-1.1.0-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "b314443d68862ea18bd49625efcf5025",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.5",
        "size": 42150,
        "upload_time": "2022-08-14T03:49:24",
        "upload_time_iso_8601": "2022-08-14T03:49:24.427168Z",
        "url": "https://files.pythonhosted.org/packages/50/38/f4bde9249bcd63fe12ee937f337a6978b2a344c13b7d8afa67e433b2d7a7/PyMahjongGB-1.1.0-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e96fbe9050dd2b8b130d72e1f9760934d52a4e70adfa72f7c6b410d4876070b1",
          "md5": "485a5484b5e1a47ee812cb754bd70eb8",
          "sha256": "70c6c533bc38a289cfc45c806156edb782d517dff4a1f98c94fa8193a5acd88c"
        },
        "downloads": -1,
        "filename": "PyMahjongGB-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "485a5484b5e1a47ee812cb754bd70eb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 52306,
        "upload_time": "2022-08-14T03:49:26",
        "upload_time_iso_8601": "2022-08-14T03:49:26.123972Z",
        "url": "https://files.pythonhosted.org/packages/e9/6f/be9050dd2b8b130d72e1f9760934d52a4e70adfa72f7c6b410d4876070b1/PyMahjongGB-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2076a592654dcdd3da578e1db66d2781c5119ae989505f1a4345be0f3886bc0d",
          "md5": "88ba5ff5f3b818b5ab57205da62ffa46",
          "sha256": "35b8d80cece38819076541d02dd87a15083db8a5f6364fb4d8072d261a75ff3c"
        },
        "downloads": -1,
        "filename": "PyMahjongGB-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88ba5ff5f3b818b5ab57205da62ffa46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 53000,
        "upload_time": "2023-02-17T05:32:14",
        "upload_time_iso_8601": "2023-02-17T05:32:14.091722Z",
        "url": "https://files.pythonhosted.org/packages/20/76/a592654dcdd3da578e1db66d2781c5119ae989505f1a4345be0f3886bc0d/PyMahjongGB-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2076a592654dcdd3da578e1db66d2781c5119ae989505f1a4345be0f3886bc0d",
        "md5": "88ba5ff5f3b818b5ab57205da62ffa46",
        "sha256": "35b8d80cece38819076541d02dd87a15083db8a5f6364fb4d8072d261a75ff3c"
      },
      "downloads": -1,
      "filename": "PyMahjongGB-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "88ba5ff5f3b818b5ab57205da62ffa46",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 53000,
      "upload_time": "2023-02-17T05:32:14",
      "upload_time_iso_8601": "2023-02-17T05:32:14.091722Z",
      "url": "https://files.pythonhosted.org/packages/20/76/a592654dcdd3da578e1db66d2781c5119ae989505f1a4345be0f3886bc0d/PyMahjongGB-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}