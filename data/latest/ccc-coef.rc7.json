{
  "info": {
    "author": "Milton Pividori",
    "author_email": "miltondp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Clustermatch Correlation Coefficient (CCC)\n\n[![Code tests](https://github.com/greenelab/ccc/actions/workflows/pytest.yaml/badge.svg)](https://github.com/greenelab/ccc/actions/workflows/pytest.yaml)\n[![codecov](https://codecov.io/gh/greenelab/ccc/branch/main/graph/badge.svg?token=QNK6O3Y1VF)](https://codecov.io/gh/greenelab/ccc)\n[![bioRxiv Manuscript](https://img.shields.io/badge/manuscript-bioRxiv-blue.svg)](https://doi.org/10.1101/2022.06.15.496326)\n[![HTML Manuscript](https://img.shields.io/badge/manuscript-HTML-blue.svg)](https://greenelab.github.io/ccc-manuscript/)\n\n## Overview\n\nThe Clustermatch Correlation Coefficient (CCC) is a highly-efficient, next-generation not-only-linear correlation coefficient that can work on numerical and categorical data types.\nThis repository contains the code of CCC and instructions to install and use it.\nIt also has all the scripts/notebooks to run the analyses for the [manuscript](https://github.com/greenelab/ccc-manuscript), where we applied CCC on gene expression data.\n\n## Installation\n\nCCC is available as a PyPI (Python) package (`ccc-coef`). We tested CCC in Python 3.9+, but it should work on prior 3.x versions.\nYou can quickly test it by creating a conda environment and then install it with `pip`:\n\n```bash\n# ipython and pandas are used in the following examples, but they are not needed for CCC to work\nconda create -y -n ccc-env python=3.9 ipython pandas\nconda activate ccc-env\npip install ccc-coef\n```\n\n## Usage\n\nRun `ipython` in your terminal:\n```bash\n$ ipython\nPython 3.10.4 (main, Mar 31 2022, 08:41:55) [GCC 7.5.0]\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: \n```\n\nWhen computing the correlation coefficient on a pair of features, CCC supports `numpy.array` or `pandas.Series`.\nThis is an example with numerical data (you can copy/paste the entire lines below including `In [...]`):\n\n```python\nIn [1]: import numpy as np\nIn [2]: import pandas as pd\nIn [3]: from ccc.coef import ccc\n\nIn [4]: random_feature1 = np.random.rand(1000)\nIn [5]: random_feature2 = np.random.rand(1000)\nIn [6]: ccc(random_feature1, random_feature2)\nOut[6]: 0.0018815884476534295\n\nIn [7]: random_feature1 = pd.Series(random_feature1)\nIn [8]: random_feature2 = pd.Series(random_feature2)\nIn [9]: ccc(random_feature1, random_feature2)\nOut[9]: 0.0018815884476534295\n```\n\nCCC always returns a value between zero (no relationship) and one (perfect relationship).\nAs we show in the manuscript, the distribution of CCC values is much more skewed than other coefficients like Pearson's or Spearman's.\nA comparison between these coefficients should account for that.\n\nYou can also mix numerical and categorical data:\n\n```python\nIn [10]: categories = np.array([\"blue\", \"red\", \"green\", \"yellow\"])\nIn [11]: categorical_random_feature1 = np.random.choice(categories, size=1000)\nIn [12]: categorical_random_feature2 = np.random.choice(categories, size=1000)\nIn [13]: categorical_random_feature2[:10]\nOut[13]: \narray(['yellow', 'red', 'red', 'yellow', 'blue', 'blue', 'red', 'yellow',\n       'green', 'blue'], dtype='<U6')\n\nIn [14]: ccc(categorical_random_feature1, categorical_random_feature2)\nOut[14]: 0.0009263483455638076\n\nIn [15]: ccc(random_feature1, categorical_random_feature2)\nOut[15]: 0.0015123522641692117\n```\n\nThe first argument of `ccc` could also be a matrix, either as a `numpy.array` (features are in rows and objects in columns) or as a `pandas.DataFrame` (objects are in rows and features in columns).\nIn this case, `ccc` will compute the pairwise correlation across all features:\n\n```python\nIn [16]: # with a numpy.array\nIn [17]: data = np.random.rand(10, 1000)\nIn [18]: c = ccc(data)\nIn [19]: c.shape\nOut[19]: (45,)\nIn [20]: c[:10]\nOut[20]: \narray([0.00404461, 0.00185342, 0.00248847, 0.00232761, 0.00260786,\n       0.00121495, 0.00227679, 0.00099051, 0.00313611, 0.00323936])\n\nIn [21]: # with a pandas.DataFrame\nIn [22]: data_df = pd.DataFrame(data.T)\nIn [23]: c = ccc(data_df)\nIn [24]: c.shape\nOut[24]: (45,)\nIn [25]: c[:10]\nOut[25]: \narray([0.00404461, 0.00185342, 0.00248847, 0.00232761, 0.00260786,\n       0.00121495, 0.00227679, 0.00099051, 0.00313611, 0.00323936])\n```\n\nIf your data has a mix of numerical and categorical features, it's better to work on a `pandas.DataFrame`.\nAs an example, we load the [Titanic dataset](https://www.kaggle.com/c/titanic/data) (from [seaborn](https://github.com/mwaskom/seaborn-data/)'s repository):\n\n```python\nIn [26]: titanic_url = \"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/raw/titanic.csv\"\nIn [27]: titanic_df = pd.read_csv(titanic_url)\nIn [28]: titanic_df.shape\nOut[28]: (891, 11)\nIn [29]: titanic_df.head()\nOut[29]: \n   survived  pclass                                               name     sex   age  sibsp  parch            ticket     fare cabin embarked\n0         0       3                            Braund, Mr. Owen Harris    male  22.0      1      0         A/5 21171   7.2500   NaN        S\n1         1       1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1      0          PC 17599  71.2833   C85        C\n2         1       3                             Heikkinen, Miss. Laina  female  26.0      0      0  STON/O2. 3101282   7.9250   NaN        S\n3         1       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1      0            113803  53.1000  C123        S\n4         0       3                           Allen, Mr. William Henry    male  35.0      0      0            373450   8.0500   NaN        S\n```\n\nThe Titanic dataset has missing values:\n\n```python\nIn [30]: titanic_df.isna().sum()\nOut[30]: \nsurvived      0\npclass        0\nname          0\nsex           0\nage         177\nsibsp         0\nparch         0\nticket        0\nfare          0\ncabin       687\nembarked      2\ndtype: int64\n```\n\nSo we need some kind of preprocessing before moving on:\n\n```python\nIn [31]: titanic_df = titanic_df.dropna(subset=[\"embarked\"]).dropna(axis=1)\nIn [32]: titanic_df.shape\nOut[32]: (889, 9)\n```\n\nNow we can run CCC on the dataset and get a correlation matrix across features:\n\n```python\nIn [33]: ccc_corrs = ccc(titanic_df)\n\nIn [34]: from scipy.spatial.distance import squareform\nIn [35]: ccc_corrs = squareform(ccc_corrs)\nIn [36]: np.fill_diagonal(ccc_corrs, 1.0)\nIn [37]: ccc_corrs = pd.DataFrame(ccc_corrs, index=titanic_df.columns.tolist(), columns=titanic_df.columns.tolist())\nIn [38]: ccc_corrs.shape\nOut[38]: (9, 9)\nIn [39]: with pd.option_context('display.float_format', '{:,.2f}'.format):\n     ...:     display(ccc_corrs)\n          survived  pclass  name  sex  sibsp  parch  ticket  fare  embarked\nsurvived      1.00    0.12  0.00 0.32   0.04   0.05    0.00  0.07      0.05\npclass        0.12    1.00  0.00 0.04   0.02   0.01    0.00  0.33      0.01\nname          0.00    0.00  1.00 0.00   0.00   0.00    0.00  0.00      0.00\nsex           0.32    0.04  0.00 1.00   0.08   0.11    0.00  0.04      0.04\nsibsp         0.04    0.02  0.00 0.08   1.00   0.29    0.00  0.23      0.00\nparch         0.05    0.01  0.00 0.11   0.29   1.00    0.00  0.14      0.00\nticket        0.00    0.00  0.00 0.00   0.00   0.00    1.00  0.02      0.00\nfare          0.07    0.33  0.00 0.04   0.23   0.14    0.02  1.00      0.03\nembarked      0.05    0.01  0.00 0.04   0.00   0.00    0.00  0.03      1.00\n```\n\nThe `ccc` function also has a `n_jobs` parameter that allows to control the number of CPU cores used.\nBelow we compute the pairwise correlation between 20 features across 1000 objects:\n\n```python\nIn [40]: data = np.random.rand(20, 1000)\n\nIn [41]: %timeit ccc(data, n_jobs=1)\n1.32 s ± 45.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\nIn [42]: %timeit ccc(data, n_jobs=2)\n771 ms ± 11 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\n\n## Reproducible research\n\nBelow we provide the steps to reproduce all the analyses in the CCC manuscript.\n\n### Setup\n\nTo prepare the environment to run the analyses in the manuscript, follow the steps in [environment](environment/).\nAfter completing those steps, you'll have the source code in this repository, a Python environment (either using a Docker image or creating your own conda environment) and the necessary data to run the analyses.\n\n### Running code\n\nAll the analyses are written as Jupyter notebooks and stored in the folder `nbs/`.\nAll notebooks are organized by directories, such as `01_preprocessing`, with file names that indicate the order in which they should be run (if they share the prefix, then it means they can be run in parallel).\nYou can run the analyses either using the JupyterLab server and your browser, or from the command line using [papermill](https://papermill.readthedocs.io/en/latest/).\n\n**Using the browser.** For example, let's say you want to run the preprocessing notebooks.\nIf you want to use your browser, you first need to start the JupyterLab server:\n\n```bash\nbash scripts/run_nbs_server.sh\n```\n\nand then go to http://127.0.0.1:8893/ and browse to `nbs/05_preprocessing`.\nThen you need to run each notebook in order.\n\nIf you use the Docker image, the steps are very similar for any command, but you need to prepend the `scripts/run_docker.sh` script.\n\n```bash\nbash scripts/run_docker.sh \\\n  bash scripts/run_nbs_server.sh --container-mode\n```\n\nNote that the port is different: http://127.0.0.1:8888/\n\n**Using the command-line.** You can also run the notebooks using the command-line with papermill instead of going to the browser.\nUsing as example the same preprocessing notebooks, you can pick one of these commands to run all the preprocessing notebooks in order:\n\n```bash\n# using your own conda environment:\n#   requires GNU Parallel: https://www.gnu.org/software/parallel/\n#   To install in Ubuntu: apt install parallel\nparallel \\\n  -k \\\n  --lb \\\n  --halt 2 \\\n  -j1 \\\n  'bash nbs/run_nbs.sh {}' ::: nbs/05_preprocessing/*.ipynb\n\n# using the Docker image:\nbash scripts/run_docker.sh \\\n  parallel \\\n    -k \\\n    --lb \\\n    --halt 2 \\\n    -j1 \\\n    'bash nbs/run_nbs.sh {}' ::: nbs/05_preprocessing/*.ipynb\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/greenelab/ccc",
    "keywords": "",
    "license": "BSD-2-Clause Plus Patent",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ccc-coef",
    "package_url": "https://pypi.org/project/ccc-coef/",
    "platform": null,
    "project_url": "https://pypi.org/project/ccc-coef/",
    "project_urls": {
      "Homepage": "https://github.com/greenelab/ccc"
    },
    "release_url": "https://pypi.org/project/ccc-coef/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "The Clustermatch Correlation Coefficient (CCC) is a highly-efficient, next-generation not-only-linear correlation coefficient that can work on numerical and categorical data types.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14239074,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38f2e325c2019a9fab23ea5450fe71e6ea7c001de87794306dd1973fadbf9950",
          "md5": "1959f0e61a38b8041df05f13bdd27766",
          "sha256": "4b14d2d8caf4e6fb6ccb814a4d99d4a4c9e16f3dcfb362226ea6f71bcdcfd9b7"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1959f0e61a38b8041df05f13bdd27766",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 17990,
        "upload_time": "2022-06-21T18:36:55",
        "upload_time_iso_8601": "2022-06-21T18:36:55.082489Z",
        "url": "https://files.pythonhosted.org/packages/38/f2/e325c2019a9fab23ea5450fe71e6ea7c001de87794306dd1973fadbf9950/ccc-coef-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3758bcb29a9c0b301c6db44710c07648878540f5caa89c746f5c9b1d9711117",
          "md5": "50c09712244ba248804e88e284c7fe5e",
          "sha256": "48cca027f91f7325c42158d97452db4106ab536199f052933f1defad60d7bfff"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50c09712244ba248804e88e284c7fe5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19879,
        "upload_time": "2022-06-21T18:46:07",
        "upload_time_iso_8601": "2022-06-21T18:46:07.003512Z",
        "url": "https://files.pythonhosted.org/packages/e3/75/8bcb29a9c0b301c6db44710c07648878540f5caa89c746f5c9b1d9711117/ccc-coef-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6f28e8acbf88d9c5d1c4889f79b5a6b370cf771b5244db3e91571c0d4b4dee2",
          "md5": "24fe081792f57297a6249652f0bbcd79",
          "sha256": "06bb382159c3437a76d40229cc289d1773432ece8526db8701a014b6b37a2cd2"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24fe081792f57297a6249652f0bbcd79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19859,
        "upload_time": "2022-06-21T18:49:30",
        "upload_time_iso_8601": "2022-06-21T18:49:30.205289Z",
        "url": "https://files.pythonhosted.org/packages/d6/f2/8e8acbf88d9c5d1c4889f79b5a6b370cf771b5244db3e91571c0d4b4dee2/ccc-coef-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e2046c0e3ce205dea835fec12b3c2b922fc149a23f4da406b4276593d44cbdc",
          "md5": "b5eba27ad63fc6fb956cb3656add7375",
          "sha256": "789fc5b93ba0cbfdc0ec2ce1dd16bbe98e44bacf6bdc21f6f88d045d986f0c4c"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b5eba27ad63fc6fb956cb3656add7375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19872,
        "upload_time": "2022-06-21T18:56:44",
        "upload_time_iso_8601": "2022-06-21T18:56:44.944709Z",
        "url": "https://files.pythonhosted.org/packages/3e/20/46c0e3ce205dea835fec12b3c2b922fc149a23f4da406b4276593d44cbdc/ccc-coef-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00bd13c4edf6c190e7742db90323fccd108939c871a26137ad987870e3ce5ed8",
          "md5": "19da7a2acd0eced68c6dc0f3ae88370d",
          "sha256": "d936722d75233ca4d2bbf7fcbccda8162ae29c8bed17c4a9b0ab35c797aa4dcc"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "19da7a2acd0eced68c6dc0f3ae88370d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19926,
        "upload_time": "2022-06-21T19:09:49",
        "upload_time_iso_8601": "2022-06-21T19:09:49.804742Z",
        "url": "https://files.pythonhosted.org/packages/00/bd/13c4edf6c190e7742db90323fccd108939c871a26137ad987870e3ce5ed8/ccc-coef-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb9d417a0d6a57d7259c5c547f7087c2ddd4d3162c7301b18953680e4d989fd",
          "md5": "3df7d6161968746c7e3bfa3c01c659de",
          "sha256": "c247b191868a0447066fec5af54929f608c1ad8f7f83a1089c71ee2e64e800c6"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3df7d6161968746c7e3bfa3c01c659de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20431,
        "upload_time": "2022-06-22T19:06:17",
        "upload_time_iso_8601": "2022-06-22T19:06:17.356948Z",
        "url": "https://files.pythonhosted.org/packages/cd/b9/d417a0d6a57d7259c5c547f7087c2ddd4d3162c7301b18953680e4d989fd/ccc-coef-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c146a1683e085c800fcc4c3c1c87b670a1b96fe345044ae1eeee4f217fd1f8fb",
          "md5": "202e139457cb6e9380442cb403d03eeb",
          "sha256": "05464c214b64efc960b277c00460d47e7f7679600e937c59e23191b9455ef83b"
        },
        "downloads": -1,
        "filename": "ccc-coef-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "202e139457cb6e9380442cb403d03eeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24431,
        "upload_time": "2022-06-24T18:00:50",
        "upload_time_iso_8601": "2022-06-24T18:00:50.033309Z",
        "url": "https://files.pythonhosted.org/packages/c1/46/a1683e085c800fcc4c3c1c87b670a1b96fe345044ae1eeee4f217fd1f8fb/ccc-coef-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c146a1683e085c800fcc4c3c1c87b670a1b96fe345044ae1eeee4f217fd1f8fb",
        "md5": "202e139457cb6e9380442cb403d03eeb",
        "sha256": "05464c214b64efc960b277c00460d47e7f7679600e937c59e23191b9455ef83b"
      },
      "downloads": -1,
      "filename": "ccc-coef-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "202e139457cb6e9380442cb403d03eeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 24431,
      "upload_time": "2022-06-24T18:00:50",
      "upload_time_iso_8601": "2022-06-24T18:00:50.033309Z",
      "url": "https://files.pythonhosted.org/packages/c1/46/a1683e085c800fcc4c3c1c87b670a1b96fe345044ae1eeee4f217fd1f8fb/ccc-coef-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}