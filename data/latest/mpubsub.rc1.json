{
  "info": {
    "author": null,
    "author_email": "Flavio Veloso Soares <flaviovs@magnux.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "A pub-sub architecture with remote capabilities for Python\n==========================================================\n\n_mpubsub_ implements a publish-subscribe messaging architecture in\nPython that can be used by local and remote processes. Remote\npublishers or subscribers can join any time to exchange messages.\n\nFeatures:\n- Extremally fast and compact pub-sub object — the entire local\n  pub-sub module has about 100 lines, including docstring\n  documentation for all public methods.\n- All batteries included — _mpubsub_ only uses Python’s standard\n  library modules. No external dependencies needed.\n- Remote connections — subscribers are transparently notified of\n  topics published on remote pub-sub objects. Messages published\n  locally are forwarded to remote pub-subs.\n- Local topic support — messages can be flagged for local delivery\n  only.\n- OOP interface — you can have multiple independent pub-sub objects on\n  the same program.\n- Remote authentication — _mpubsub_ uses the same authentication\n  mechanism used by the (multiprocessing\n  module)[https://docs.python.org/3.7/library/multiprocessing.html] to\n  authenticate remote connections.\n\n_mpubsub_ requires Python 3.7 or above.\n\n\nInstallation\n------------\n\n    pip install mpubsub\n\n\nArchitecture\n------------\n\n_mpubsub_ consists of three classes: _PubSub_, _NetPubSub_, and\n_Broker_.\n\nThe _PubSub_ class is an efficient implementation of the\npublish-subscribe messaging pattern for same-process publishers and\nsubscribers. This class alone can be used to implement pub-sub in an\napplication when no remote capabilities are needed.\n\nThe _NetPubSub_ is a networking-capable version of _PubSub_. A process\ncan connect a _NetPubSub_ to a _mpubsub_ message broker so that\nmessages published locally are forwarded to all other pub-subs\nconnected to the same broker. Likewise, all subscribers of the local\npub-sub object receive messages published to the broker.\n\nThe _Broker_ class implements the _mpubsub_ message broker. The broker\ncoordinates message passing between remote publishers and subscribers.\n\n\n## The PubSub class\n\nThe PubSub class provides an interface for publishers and subscribers\nto interact with the messaging system. Publishers can post messages to\na topic, and subscribers receive messages for the subscribed topic.\n\n### Topics\n\nTopics are Python tuples, and those tuple-topics are handled\nhierarchically. For example, if the topic _(‘foo’, ‘bar’)_ is\npublished, then subscribers are notified in the following order:\n\n1. All _(‘foo’, ‘bar’)_ subscribers\n2. All _(‘foo’,)_ subscribers — NB: a one-element tuple\n3. All catch-all subscribers\n\nFor convenience, you can subscribe to, and publish string\ntopics. Internally, those are transformed to a single tuple topic (in\nother words, publishing or subscribing to `'foo'` is the same as\npublishing or subscribing`('foo',)`).\n\nWhen subscribing, the empty tuple is the _catch-all_\ntopic. Subscribers to this topic will get all messages published on\nthe _PubSub_ object.\n\nWhen publishing, the empty tuple is the _broadcast_ topic. Messages\npublished with the broadcast topic are sent to all subscribers in the\npub-sub.\n\nYou can pass _None_ instead of `()` to mean the catch-all/broadcast\ntopic. In all cases, subscribers callbacks **always** get tuples as\ntheir first parameter.\n\nNote: _mpubsub_ does **not** validate topic types for performance\nreasons. Due to implementation details, other pickable, hashable\nobjects _may_ “work” as topic values, but this is not supported. It is\nup to the callers to ensure that only tuples of strings are used as\ntopics (sole strings and _None_ are fine, since they’re translated to\ntuples following the rules outlined above).\n\n\n### Messages\n\nTopics can carry additional _key=value_ data, called _the\nmessage_. Those are mapped directly to keyword arguments when a\nsubscriber is called.\n\n_mpubsub_ will issue warnings if a subscriber does not support a\nkeyword argument present in a message.\n\n\n## The _NetPubSub_ Class\n\nThe _NetPubSub_ is a subclass of _PubSub_ that adds remote\ncapabilities to it. Beside all _PubSub_ methods, it also provides\nmethods to connect and disconnect the pub-sub to a broker.\n\n\n## The _Broker_ Class\n\nThe Broker class acts as the intermediary between publishers and\nsubscribers in remote pub-subs. It listens for incoming connections\nfrom _NetPubSub_ objects, and coordinate message forwarding between\nthem.\n\nNotice that the broker run asynchronously in relation to remote\n_NetPubSub_ object. You can start a broker using\n[multiprocessing](https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.connection.Listener)\nor as a separate Python script. Using threads is not supported.\n\n\nExamples\n-------\n\n## Local pub-sub example\n\nFirst import the class and create a _PubSub_ object:\n\n    >>> from mpubsub import PubSub\n    >>>\n    >>> pubsub = PubSub()\n\nCreate two functions that just print their parameters. Those will be\nour example subscribers:\n\n    >>> def subscriber_1(topic, message):\n    ...     print(f'Received by subscriber 1: {message}')\n    >>>\n\n    >>> def subscriber_2(topic, message):\n    ...     print(f'Received by subscriber 2: {message}')\n    >>>\n\nAdd the subscribers to the pub-sub object:\n\n    >>> pubsub.add_subscriber('hello', subscriber_1)\n    >>> pubsub.add_subscriber('hello', subscriber_2)\n\nNow publish some data:\n\n    >>> pubsub.publish('hello', message='foo')\n    Received by subscriber 1: foo\n    Received by subscriber 2: foo\n\nTo unsubscribe, just call `remove_subscriber()` with the same\nparameters:\n\n    >>> pubsub.remove_subscriber('hello', subscriber_2)\n    >>> pubsub.publish('hello', message='foo')\n    Received by subscriber 1: foo\n\nTo unsubscribe all subscribers, call `clear_subscribers()`:\n\n    >>> pubsub.clear_subscribers()\n    >>> pubsub.publish('hello', message='foo')\n\n\n## Remote pub-sub example\n\nSee [demo.py](demo.py) for an example of how to use _mpubsub_ to\nimplement remote pub-subs.\n\n\nRemote pub-subs addresses\n-------------------------\n\n_mpubsub_ connects to remote pub-subs using [multiprocessing\nConnection](https://docs.python.org/3.7/library/multiprocessing.html#connection-objects)\nobjects. Address used by _NetPubSub_ and _Broker_ classes have the\nsame format and semantincs as described in the Python’s documentation.\n\n\nStandalone broker\n-----------------\n\nYou can start a standalone broker with the following command:\n\n    python -m mpubsub.broker $HOME/.mpubsub.pckl\n\nThe broker’s address and _authkey_ are pickled as a tuple _(address,\nauthkey)_, and saved to the file provided in the command line. Clients\ncan read this file to unpickle the values and connect to the\nbroker. Run `python -m mpubsub.broker --help` for usage information.\n\n\nSecurity\n--------\n\n* _mpubsub_ uses _multiprocessing_’s authentication keys to\n  authenticate connections. If you pass _None_ to the broker,\n  `multiprocessing.current_process().authkey` will be used. The\n  _mpubsub_ broker does not support unauthenticated connections. See\n  [the relevant\n  documentation](https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing-auth-keys)\n  for more details about Python’s _multiprocessing_ authentication\n  mechanism.\n\n* The authentication used by _multiprocessing_ protects **only**\n  against unauthorized connections. Message contents are transmitted\n  in plain text, and because of that anyone on the network(s) where\n  connection packets travel can see the contents of published topic\n  and messages. Is advisable to use remote connections **only on\n  trusted networks**.\n\n* All data received from authenticated connections are unpickled\n  automatically. This opens the possibility of remote code execution,\n  therefore you should connect pub-subs only to brokers you trust. See\n  [the relevant warning in the Python’s\n  documentation](https://docs.python.org/3.7/library/multiprocessing.html#connection-objects).\n\n\nQuestions? Critics? Suggestions?\n--------------------------------\nVisit https://github.com/flaviovs/mpubsub\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "mpubsub",
    "package_url": "https://pypi.org/project/mpubsub/",
    "platform": null,
    "project_url": "https://pypi.org/project/mpubsub/",
    "project_urls": {
      "Home": "https://github.com/flaviovs/mpubsub"
    },
    "release_url": "https://pypi.org/project/mpubsub/0.0.1/",
    "requires_dist": [
      "codespell ; extra == \"dev\"",
      "flake8-bugbear ; extra == \"dev\"",
      "flake8-builtins ; extra == \"dev\"",
      "flake8-docstrings ; extra == \"dev\"",
      "flake8-tidy-imports ; extra == \"dev\"",
      "flake8-walrus ; extra == \"dev\"",
      "flake8 ; extra == \"dev\"",
      "flit ; extra == \"dev\"",
      "mypy ; extra == \"dev\"",
      "pylint ; extra == \"dev\"",
      "taskipy ; extra == \"dev\""
    ],
    "requires_python": ">=3.7.3",
    "summary": "A multi-process capable publish-subscribe system.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17435219,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "26bad7aa39d8564d663ed80cb467e2e3f955c66abcf3a38bea63aa496eec9b8a",
          "md5": "a049113931fe05205e0523492bc02d64",
          "sha256": "3bdf794d00375c6009f8ed80f803d16525b5a7994248e7a5724946f688416083"
        },
        "downloads": -1,
        "filename": "mpubsub-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a049113931fe05205e0523492bc02d64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 11190,
        "upload_time": "2023-03-24T19:23:55",
        "upload_time_iso_8601": "2023-03-24T19:23:55.854169Z",
        "url": "https://files.pythonhosted.org/packages/26/ba/d7aa39d8564d663ed80cb467e2e3f955c66abcf3a38bea63aa496eec9b8a/mpubsub-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c0f2bbde91c4a06b1510eeb74404a2b7332da03321e109a69fed5fca12663a80",
          "md5": "9584c74dac38e7866d2925387d7098de",
          "sha256": "cbae16bc35a0bf3f08094c52a42232434899d9ce1cab2fcf15221cfd2d48b342"
        },
        "downloads": -1,
        "filename": "mpubsub-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9584c74dac38e7866d2925387d7098de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 15312,
        "upload_time": "2023-03-24T19:23:57",
        "upload_time_iso_8601": "2023-03-24T19:23:57.719485Z",
        "url": "https://files.pythonhosted.org/packages/c0/f2/bbde91c4a06b1510eeb74404a2b7332da03321e109a69fed5fca12663a80/mpubsub-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "26bad7aa39d8564d663ed80cb467e2e3f955c66abcf3a38bea63aa496eec9b8a",
        "md5": "a049113931fe05205e0523492bc02d64",
        "sha256": "3bdf794d00375c6009f8ed80f803d16525b5a7994248e7a5724946f688416083"
      },
      "downloads": -1,
      "filename": "mpubsub-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a049113931fe05205e0523492bc02d64",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.3",
      "size": 11190,
      "upload_time": "2023-03-24T19:23:55",
      "upload_time_iso_8601": "2023-03-24T19:23:55.854169Z",
      "url": "https://files.pythonhosted.org/packages/26/ba/d7aa39d8564d663ed80cb467e2e3f955c66abcf3a38bea63aa496eec9b8a/mpubsub-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "c0f2bbde91c4a06b1510eeb74404a2b7332da03321e109a69fed5fca12663a80",
        "md5": "9584c74dac38e7866d2925387d7098de",
        "sha256": "cbae16bc35a0bf3f08094c52a42232434899d9ce1cab2fcf15221cfd2d48b342"
      },
      "downloads": -1,
      "filename": "mpubsub-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9584c74dac38e7866d2925387d7098de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.3",
      "size": 15312,
      "upload_time": "2023-03-24T19:23:57",
      "upload_time_iso_8601": "2023-03-24T19:23:57.719485Z",
      "url": "https://files.pythonhosted.org/packages/c0/f2/bbde91c4a06b1510eeb74404a2b7332da03321e109a69fed5fca12663a80/mpubsub-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}