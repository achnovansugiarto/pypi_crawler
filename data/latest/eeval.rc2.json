{
  "info": {
    "author": "Ayoub Benaissa",
    "author_email": "ayouben9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# encrypted-evaluation\n\nA Python framework to build client/server applications, where the server hosts models for evaluation over encrypted inputs, then the client can encrypt his model input and send it to the server for evaluation and get back the encrypted result.\n\n\n## Features\n\n- :fire: Hosting models for encrypted evaluation in a RESTful API\n- :cyclone: Client to send encrypted inputs for evaluation in a remote API\n- :zap: CLI utility to encrypt/decrypt, generate keys, and communicate between the client and server\n\n## Usage\n\nYou can use `eeval` either using the CLI or the programming API in Python.\n\n### CLI\n\nThe CLI comes with the Python installation and it contains well documented instruction on how to make the job done. We expect it to be easy to use. If you find some difficulties using it, please open an issue to let us know how can it be better.\n\n```bash\n$ eeval\nUsage: eeval [OPTIONS] COMMAND [ARGS]...\n\n  Encrypted evaluation with homomorphic encryption\n\nOptions:\n  -v, --verbose         verbose level  [default: 0]\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  create-context  Create a TenSEAL context holding encryption keys and...\n  decrypt         Decrypt a saved tensor\n  encrypt         Encrypt a pickled numpy tensor\n  eval            Evaluate an encrypted input on a remote hosted model\n  list-models     List models available\n  model-info      Get information about a specific model\n  ping            Check if the API at URL is up\n  serve           Start the API server\n```\n\n### API\n\nWe show a basic client/server app where the client send an encrypted input to the server to be evaluated over a linear layer (nothing really useful), more advanced usage can be found on our [examples section](#examples).\n\n\n#### Server\n\nHere we use the linear layer model which is already implemented for showcasing purposes, otherwise, you should implement your own model by inheriting from `eeval.server.model.Model` and implementing the required method\n\n```python\nimport eeval.server as server\nfrom eeval import models\n\n\n# register the LinearLayer model\nserver.register_model(models.LinearLayer, versions=[\"0.1\"])\n\nserver.start(host=\"localhost\", port=8000)\n```\n\n#### Client\n\nThe only thing the client need to know is how to encode and encrypt his data, the rest is handled by `eeval.client.Client`\n\n```python\nfrom eeval import Client\nimport tenseal as ts\n\n\nhostname = \"localhost\"\nport = 8000\nclient = Client(hostname, port)\n\n# prepare the TenSEAL context\nctx = ts.context(ts.SCHEME_TYPE.CKKS, 8192, -1, [60, 40, 60])\nctx.global_scale = 2 ** 40\nctx.generate_galois_keys()\n# we know that the model hosted on the server needs a vector of 16 as input\nvec = [0.1] * 16\nenc_vec = ts.ckks_vector(ctx, vec)\n\n# print some info about the models hosted on the server\nmodels = client.list_models()\nprint(\"============== Models ==============\")\nprint(\"\")\nfor i, model in enumerate(models):\n    print(f\"[{i + 1}] Model {model['model_name']}:\")\n    print(f\"[*] Description: {model['description']}\")\n    print(f\"[*] Versions: {model['versions']}\")\n    print(f\"[*] Default version: {model['default_version']}\")\n    print(\"\")\n\nprint(\"====================================\")\n\n# send the encrypted input and get encrypted output\nresult = client.evaluate(model_name=\"LinearLayer\", context=ctx, ckks_vector=enc_vec)\nprint(f\"decrypted result from the server: {result.decrypt()}\")\n```\n\n\n## Installation\n\n```bash\n$ pip install eeval\n```\n\n\n## Examples\n\nTBD\n\n## License\n\n[GNU General Public License 3.0](https://github.com/youben11/encrypted-evaluation/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/youben11/encrypted-evaluation",
    "keywords": "homomorphic encryption machine learning",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eeval",
    "package_url": "https://pypi.org/project/eeval/",
    "platform": "",
    "project_url": "https://pypi.org/project/eeval/",
    "project_urls": {
      "Homepage": "https://github.com/youben11/encrypted-evaluation"
    },
    "release_url": "https://pypi.org/project/eeval/0.1.2/",
    "requires_dist": [
      "fastapi (~=0.60.0)",
      "numpy (~=1.18.0)",
      "tenseal (~=0.1.0)",
      "typer[all] (~=0.3.0)",
      "uvicorn (~=0.11.0)"
    ],
    "requires_python": "",
    "summary": "Client/Server framework for encrypted machine learning evaluation",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7919648,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a9aa09094b5ef70e041f0bb1e6ee5ec4a506013f847a82a39c7a7cca1c6d87",
          "md5": "1e8994599b4222ccd82fb5f28e224836",
          "sha256": "1fb15d59f6cd162eb3db935390bf7018c9ecfbfc6033a95c31d7fdb01dd47351"
        },
        "downloads": -1,
        "filename": "eeval-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e8994599b4222ccd82fb5f28e224836",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26792,
        "upload_time": "2020-08-06T12:20:19",
        "upload_time_iso_8601": "2020-08-06T12:20:19.520488Z",
        "url": "https://files.pythonhosted.org/packages/c3/a9/aa09094b5ef70e041f0bb1e6ee5ec4a506013f847a82a39c7a7cca1c6d87/eeval-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "699a9d27cecae79f71bca692d0cd184eb6c1b6f9d58d8a3e2ea00b36d9ce5500",
          "md5": "b4d88d5b3d39eaff27df61f587add975",
          "sha256": "a4b8052d73b0499252587bc91971cc55ee5012f91a333c9fd162cc0abaedca13"
        },
        "downloads": -1,
        "filename": "eeval-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4d88d5b3d39eaff27df61f587add975",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27086,
        "upload_time": "2020-08-09T15:14:15",
        "upload_time_iso_8601": "2020-08-09T15:14:15.849893Z",
        "url": "https://files.pythonhosted.org/packages/69/9a/9d27cecae79f71bca692d0cd184eb6c1b6f9d58d8a3e2ea00b36d9ce5500/eeval-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "699a9d27cecae79f71bca692d0cd184eb6c1b6f9d58d8a3e2ea00b36d9ce5500",
        "md5": "b4d88d5b3d39eaff27df61f587add975",
        "sha256": "a4b8052d73b0499252587bc91971cc55ee5012f91a333c9fd162cc0abaedca13"
      },
      "downloads": -1,
      "filename": "eeval-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4d88d5b3d39eaff27df61f587add975",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27086,
      "upload_time": "2020-08-09T15:14:15",
      "upload_time_iso_8601": "2020-08-09T15:14:15.849893Z",
      "url": "https://files.pythonhosted.org/packages/69/9a/9d27cecae79f71bca692d0cd184eb6c1b6f9d58d8a3e2ea00b36d9ce5500/eeval-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}