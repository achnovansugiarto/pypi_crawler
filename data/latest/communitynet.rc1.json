{
  "info": {
    "author": "shobrook",
    "author_email": "shobrookj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CommunityNet\n\n`CommunityNet` is a hierarchical Graph Neural Network (GNN) designed for graph datasets with community structure (e.g. social networks, molecules, etc.). It's designed to encode information at both the within-community level and the inter-community level.\n<!--TODO: It outperforms a standard GNN on some benchmark datasets yadda yadda-->\n\n<img src=\"demo.png\" />\n\n## Installation\n\nYou can download `CommunityNet` from PyPi:\n\n```bash\n$ pip install communitynet\n```\n\n## Usage\n\nBefore instantiating `CommunityNet`, you must define a \"base\" GNN and an \"output\" GNN. The _base GNN_ is used to create vector embeddings of each community in an input graph. These embeddings are used as node features in an \"inter-community\" graph, where each node represents a community and each edge is the mean of the edges between two communities. This graph is submitted to the _output GNN_ to make a prediction. Both GNNs can be constructed using the `GraphNet` and `MLP` PyTorch modules supplied by the library. For example, to construct the `CommunityNet` shown in the diagram above, you can do the following:\n\n```python\nimport torch.nn as nn\nfrom communitynet import GraphNet, MLP, CommunityNet\n\n# Example numbers (arbitrary)\nnum_node_features = 4\nnum_edge_features = 2\n\nbase_gnn = GraphNet(in_channels=num_node_features, out_channels=8,\n                    num_edge_features=num_edge_features)\noutput_gnn = nn.Sequential(\n  GraphNet(in_channels=8, out_channels=4, num_edge_features=num_edge_features),\n  MLP(in_channels=4, out_channels=1)\n)\ncommunity_net = CommunityNet(base_gnn, output_gnn, num_communities=3)\n```\n\n`GraphNet` and `MLP` both have additional hyperparameters (e.g. hidden layers, dropout, etc.) which are described in the reference below. The `CommunityNet` class itself derives from `torch.nn.Module`, so it can be trained like any other PyTorch model.\n\nEach graph you submit to `CommunityNet` must be an instance of `torch_geometric.data.Data` with an additional `communities` attribute. `data.communities` should hold a list of communities, where each community is a set of node indices. For example:\n\n```python\nimport torch\nfrom torch_geometric.data import Data\n\nedge_index = torch.tensor([[0, 1, 0, 2, 1, 2, 2, 3, 3, 4, 3, 5, 4, 5],\n                           [1, 0, 2, 0, 2, 1, 3, 2, 4, 3, 5, 3, 5, 4]],\n                          dtype=torch.long)\nx = torch.tensor([[-1], [0], [1], [0.5], [0.75], [-0.25]], dtype=torch.float)\n\ndata = Data(x=x, edge_index=edge_index)\ndata.communities = [{0, 1, 2}, {3, 4, 5}]\n```\n\nNote that every graph in your dataset must have the same number of communities.\n\n## Reference\n\n### GraphNet\n\nPyTorch module that implements a GNN. Uses `NNConv` (an edge-conditioned convolutional operator) as a filter and global pooling to convert a graph into a vector embedding.\n\n**Parameters:**\n\n1. **`in_channels` _(int)_:** Number of node features\n2. **`out_channels` _(int)_:** Number of output features\n3. **`num_edge_features` _(int)_:** Number of edge features\n4. **`hidden_channels` _(list, optional (default=[]))_:** List of hidden state sizes; length of list == number of layers\n5. **`use_pooling` _(bool, optional (default=False))_:** Whether or not to use top-k pooling\n6. **`dropout_prob` _(float, optional (default=0.0))_:** Dropout probability applied to each GNN layer\n7. **`global_pooling` _(str, optional (default=\"mean\"))_:** Global pooling mode; options are: \"mean\", \"add\", and \"max\"\n8. **`activation` _(torch.nn.Module, optional (default=None))_:** Activation function used for `NNConv`\n9. **`edge_nn_kwargs` _(dict, optional (default={}))_:** Dictionary of parameters for the MLP used to process edge features in `NNConv`\n\n### MLP\n\nPyTorch module that implements a multi-layer perceptron. This can be used in an output GNN to convert a graph embedding into a prediction (e.g. a classification/regression).\n\n**Parameters:**\n\n1. **`in_channels` _(int)_:** Number of input features\n2. **`out_channels` _(int)_:** Number of output features\n3. **`hidden_channels` _(list, optional (default=[]))_:** List of hidden state sizes; length of list == number of layers\n4. **`h_activation` _(torch.nn.Module, optional (default=None))_:** Hidden activation function\n5. **`out_activation` _(torch.nn.Module, optional (default=None))_:** Output activation function\n\n### CommunityNet\n\nPyTorch module that implements a hierarchical GNN.\n\n**Parameters:**\n\n1. **`base_gnn` _(torch.nn.Module)_:** Base GNN used to process each community\n2. **`output_gnn` _(torch.nn.Module)_:** Output GNN used to process the inter-community graph and produce a prediction\n3. **`num_communities` _(int)_:** Number of communities in each input graph\n4. **`num_jobs` _(int, optional (default=1))_:** Number of jobs (CPU cores) to distribute the community embedding work across\n<!--\nHelpers for creating datasets (if each graph has same # of nodes, diff # of nodes, etc.)\n-->",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shobrook/CommunityNet",
    "keywords": "graph-neural-network,gnn,community,graph,graph-convolution,hierarchical",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CommunityNet",
    "package_url": "https://pypi.org/project/CommunityNet/",
    "platform": "",
    "project_url": "https://pypi.org/project/CommunityNet/",
    "project_urls": {
      "Homepage": "https://github.com/shobrook/CommunityNet"
    },
    "release_url": "https://pypi.org/project/CommunityNet/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Hierarchical GNN for graphs with community structure",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10760849,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "298fb95567a9b909e5445ecef5cca647fd731072c4a1b34e78831375288b89a6",
          "md5": "d5503bccc51b88754a10f3f296d11e4a",
          "sha256": "167a6bee9d6caa6fd10623e6929720c8b98e1aa9718dbd890ae20b4f89e7c19f"
        },
        "downloads": -1,
        "filename": "CommunityNet-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5503bccc51b88754a10f3f296d11e4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5688,
        "upload_time": "2021-06-28T08:44:51",
        "upload_time_iso_8601": "2021-06-28T08:44:51.305815Z",
        "url": "https://files.pythonhosted.org/packages/29/8f/b95567a9b909e5445ecef5cca647fd731072c4a1b34e78831375288b89a6/CommunityNet-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "298fb95567a9b909e5445ecef5cca647fd731072c4a1b34e78831375288b89a6",
        "md5": "d5503bccc51b88754a10f3f296d11e4a",
        "sha256": "167a6bee9d6caa6fd10623e6929720c8b98e1aa9718dbd890ae20b4f89e7c19f"
      },
      "downloads": -1,
      "filename": "CommunityNet-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d5503bccc51b88754a10f3f296d11e4a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 5688,
      "upload_time": "2021-06-28T08:44:51",
      "upload_time_iso_8601": "2021-06-28T08:44:51.305815Z",
      "url": "https://files.pythonhosted.org/packages/29/8f/b95567a9b909e5445ecef5cca647fd731072c4a1b34e78831375288b89a6/CommunityNet-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}