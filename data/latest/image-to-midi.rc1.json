{
  "info": {
    "author": "Rainbow-Dreamer",
    "author_email": "1036889495@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# image_to_midi\nThis is a python package that turns any images into MIDI files that views the same as them.\n \nThis package firstly convert the image to ASCII characters by pixels in terms of gray scale, and then convert each pixel of the image to a note with a MIDI channel (0 - 15) based on the color depth of the pixel, which is corresponding to the index of the converted ASCII character of that pixel at the ASCII character set defined by the user. By default, the ASCII character set is sorted from highest to lowest density, in this standard, the deeper the color depth of a pixel is, the smaller the MIDI channel number of the note is. For example, the pixel with the lightest color of the image will map to MIDI channel 15, while the deepest color will map to MIDI channel 0.\n \nThe default ASCII character set is\n```\nM@N%W$E#RK&FXYI*l]}1/+i>\"!~\\';,`:.\n```\n\nFor the direction of the note transformation through the images, there are basically 2 directions, one is for viewing in a DAW, and the another one is for viewing in a piano roll software with a waterfall effect (dropping from the top). You can also customize the rotation angle of the image to transform, together with whether to flip the image or not.\n\n**Note: Each pixel of the image will convert to a note with a MIDI channel based on its color depth, the deeper the pixel's color depth is, the smaller the MIDI channel number of the note it corresponds to is, you should customize the colors corresponding to MIDI channels 0 - 15 from deepest to lightest in order to get the best viewing result when you put the resulted MIDI files in DAW or piano roll software.**\n\n## Installation\nYou can use pip to install this package, run this line in cmd/terminal to install.\n```\npip install image_to_midi\n```\n \n## Importing\n```python\nimport image_to_midi as im\n```\n\n## Usage\nFirstly we will talk about the conversion parameters of this pacakge.\n\nThis package uses a dictionary called `config_dict` to store the image conversion parameters, which are\n\n* ascii_character_set: The ASCII character set that ranges from deepest to lightest color depth. The default value is ``M@N%W$E#RK&FXYI*l]}1/+i>\"!~\\';,`:.``\n\n* resize_ratio: The resize ratio of the image to convert, could be an integer or a float, the smaller it is, the larger the image will be resized to, for example, 1 is for no resizing, 0.5 is for resize as 2 times large, 2 is for resize as 2 times small. The default value is 1\n\n* bit_number: The bit number the image will be converted as gray scales. The default value is 8\n\n* image_width_ratio: the width resize ratio of the image. The default value is 1\n\n* image_height_ratio: the height resize ratio of the image. The default value is 1\n\nYou can change these parameters by updating the values of the corresponding keys of `config_dict`. For example,\n```python\nim.config_dict['resize_ratio'] = 2\n```\n\nThen we will talk about how to convert images to MIDI files using this package. You can use `image_to_midi` function to convert an image to a MIDI file.\n\n**Note: the return value of this function is a musicpy's chord instance, you can use musicpy's `write` function to write the return value to a MIDI file.**\n\n```python\nimage_to_midi(path,\n              direction=0,\n              max_keys=100,\n              line_interval=1 / 16,\n              remapping_colors=None,\n              filter_value=None,\n              extra_interval=0,\n              adjust_scale=None,\n              rotate=None,\n              whole_reverse=False,\n              each_line_reverse=False,\n              start='C0')\n```\n\n* path: the file path of the image\n\n* direction: there are 3 direction modes: 0, 1, other values  \n0: from left to right, used in daw representation  \n1: from buttom to top, used in piano roll representation  \nother values: you can custom the rotation angle of the images and whether reverse the image ascii list and each line or not\n\n* max_keys: the maximum key number the MIDI file has, when converting the image, if the line has more pixels than this parameter, then the excess part will be cut off\n\n* line_interval: the duration of notes of each line of pixels of the image, the unit is bar of 4/4 time signature\n\n* remapping_colors: you can pass in a dictionary to remap the MIDI channel numbers to a new order of MIDI channel numbers\n\n* filter_value: you can set a tuple (or a list) `(a, b)` to filter the ASCII characters to convert which index at the ASCII character set satisfies `a <= index < b`\n\n* extra_interval: you can set this value if you want to have extra spaces between each 2 adjacent lines of notes\n\n* adjust_scale: adjust the notes of each line of pixels to a scale like C major, D mixolydian, it will filter out the notes that does not belong to the scale of each line of notes, this value must be a musicpy's scale instance\n\n* rotate: when the parameter `direction` is set to a value that is not 0 or 1, you can set this value to specify the rotation angle of the image to convert, the rotation angle is clockwise for positive number, counterclockwise for negative number\n\n* whole_reverse: when the parameter `direction` is set to a value that is not 0 or 1, you can set this value to specify whether to reverse the lines of pixels of the image\n\n* each_line_reverse: when the parameter `direction` is set to a value that is not 0 or 1, you can set this value to specify whetehr to reverse each line of pixels of the image\n\n* start: the starting note pitch of the conversion, which is the lowest note pitch of the resulted chord type, could be a string that represents a note pitch like `A0`, `C1`, or an integer for MIDI note number\n\nYou can use musicpy's `write` function to write the return value of this function to a MIDI file.\n```python\nresult = im.image_to_midi('1.jpg')\nim.write(result, name='1.mid')\n```\n\n## Some extra notes\nThe default starting note pitch of the conversion is C0, which corresponds to MIDI note number 12. (If it starts from 0 then we will have some notes has pitch like `B-1`, which cannot be shown in most DAW and piano roll softwares)\n\nIf you would like to fit the resulted MIDI files into a standard 88-key piano which has pitch range A0 to C8, it is easy to set the `max_keys` parameter to 88 and the `start` parameter to `A0` when you are using `image_to_midi` function to get the desired result.\n\nYou can also concatenate multiple resulted chord types converted from different images to output MIDI files with multiple viewable images. The syntax of concatenating 2 chord types is `chord_c = chord_a | chord_b`, to concatenate a list of chord types, you can write `chord_c = im.concat(list_of_chord_types, mode='|')`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Rainbow-Dreamer/image_to_midi/archive/0.19.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rainbow-Dreamer/image_to_midi",
    "keywords": "music,image,midi",
    "license": "LGPLv2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "image-to-midi",
    "package_url": "https://pypi.org/project/image-to-midi/",
    "platform": "",
    "project_url": "https://pypi.org/project/image-to-midi/",
    "project_urls": {
      "Download": "https://github.com/Rainbow-Dreamer/image_to_midi/archive/0.19.tar.gz",
      "Homepage": "https://github.com/Rainbow-Dreamer/image_to_midi"
    },
    "release_url": "https://pypi.org/project/image-to-midi/0.19/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a python package that turns any images into MIDI files that views the same as them",
    "version": "0.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12464760,
  "releases": {
    "0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7983f21b89c94af4a344bdc9f58bbe24d220f4fb8254d1775e08086a2c03eea9",
          "md5": "6fb9ba53c794664d4a8432537478f13b",
          "sha256": "3cadf3935f20b5d1adabf8fba68c6f15fb7e2958d6b1af341d7d82ebc6022acc"
        },
        "downloads": -1,
        "filename": "image_to_midi-0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "6fb9ba53c794664d4a8432537478f13b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14942,
        "upload_time": "2022-01-03T14:51:14",
        "upload_time_iso_8601": "2022-01-03T14:51:14.332031Z",
        "url": "https://files.pythonhosted.org/packages/79/83/f21b89c94af4a344bdc9f58bbe24d220f4fb8254d1775e08086a2c03eea9/image_to_midi-0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7983f21b89c94af4a344bdc9f58bbe24d220f4fb8254d1775e08086a2c03eea9",
        "md5": "6fb9ba53c794664d4a8432537478f13b",
        "sha256": "3cadf3935f20b5d1adabf8fba68c6f15fb7e2958d6b1af341d7d82ebc6022acc"
      },
      "downloads": -1,
      "filename": "image_to_midi-0.19.tar.gz",
      "has_sig": false,
      "md5_digest": "6fb9ba53c794664d4a8432537478f13b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14942,
      "upload_time": "2022-01-03T14:51:14",
      "upload_time_iso_8601": "2022-01-03T14:51:14.332031Z",
      "url": "https://files.pythonhosted.org/packages/79/83/f21b89c94af4a344bdc9f58bbe24d220f4fb8254d1775e08086a2c03eea9/image_to_midi-0.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}