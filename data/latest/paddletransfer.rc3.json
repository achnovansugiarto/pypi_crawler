{
  "info": {
    "author": "Baidu-BDL",
    "author_email": "autodl@baidu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PaddleTransfer\n## Introduction\nPaddleTransfer, a transfer learning tool of PaddlePaddle, provides a variety of algorithms to transfer the knowledge learned from source tasks to target task. It enables users to use the state-of-the-art transfer learning algorithms on main-stream model archtechtures.\n\nPaddleTransfer provides various transfer learning algorithms, including **MMD(JMLR'12),L2-SP(ICML'18), DELTA(ICLR'19), RIFLE(ICML'20), Co-Tuning(NIPS'20)** and supports many main-stream model archtechtures, including **ResNet, MobileNet and ViT**. With several lines of codes, users can apply these algorithms on our predifined model or their own model easily.\n\n## Contents\n* [Key Highlights](#Key-Highlights)\n* [Installation](#Installation)\n* [Usage Guideline](#Usage-Guideline)\n* [Provided Algorithms](#Provided-Algorithms)\n\n## Key Highlights\n### High Accuracy\nPaddleTransfer provides various transfer learning algorithms, users can conveniently apply them on their models, and select the most appropriate one with high accuracy for further usage.\n\n### Easy to Use\nPaddleTransfer provides unified API to invoke different algorithms, users can easily apply them on their models with several lines of codes.\n\n### Fully Support\nPaddleTransfer supports most commonly used models including Resnet, MobileNet and ViT, and will iterates rapidly to support more model archtectures.\n\n## Installation\n### Install by pip\n```\npython -m pip install paddletransfer\n```\n### Dependencies\nif you want to use our package in your own code, the following dependencies are required\n* python >= 3.7\n* numpy >= 1.21\n* paddlepaddle >= 2.2 (with suitable CUDA and cuDNN version)\n\nIf you want to run our demo script, please make sure the following packages are installed correctly on your machine.\n* visualdl\n\n\n## Usage Guideline\n### Quick Start\nUsers can run our demo code for a quick start\n```\npython finetune.py --name [experiment_name] --train_dir [path_to_train_dir] --eval_dir [path_to_eval_dir] --model_arch [model_archtechture] --algo [finetune_algorithm] --gpu [device_for_experiment]\n```\nFor model_arch argument, please choose one from \"resnet18\", \"resnet34\", \"resnet50\", \"resnet101\", \"resnet152\", \"mobilenet_v2\" and \"vit\", mistyping may lead to unexpected behavior.\n\nIf you want to finetune the ViT model, please make sure you have set the configuration file and pretrained parameters file correctly, and remember to add the corresponding argumengts(--cfg and --model_path) in your command. You can get the configuration file and pretrained model from [PaddleVit](https://github.com/BR-IDL/PaddleViT/tree/develop/image_classification/ViT).\n\n### Use PaddleTransfer in Your Own Code\n\n\n#### Import dependencies\n```\nfrom paddletransfer.finetuning.img_cls import *\n```\nWe strongly recommand you to use the model architechtures we provide in **backbones** by following codes. The parameters setting are the same as the implementations in [paddle.vision.models](https://github.com/PaddlePaddle/Paddle/tree/release/2.3/python/paddle/vision/models), remember to set **pretrained=True** for finetuning.\n```\nfrom backbones import resnet18, resnet34, resnet50, resnet101, resnet152, mobilenet_v2, build_vit\n```\nYou can only import the model archtechtures that you need.\n\nIf you want to use ViT model, please put the config.py file either from [our project](https://github.com/PaddlePaddle/PaddleTransfer) or [PaddleVit](https://github.com/BR-IDL/PaddleViT/tree/develop/image_classification/ViT) under your working directory and set other files correctly as described in [Quick Start](#Quick-Start)\n\nIf you want to use your self-defined model, please make sure that the name of layers are consistent with the implementations in [paddle.vision.models](https://github.com/PaddlePaddle/Paddle/tree/release/2.3/python/paddle/vision/models) and your model has two outputs: The first one is the original output of the network and the second one is the features(the intermediate output before average pooling layer and fc layer).\n#### Initialize the algorithm object\n```\nalgo = FinetuneDELTA(model, model_arch)\n```\n* To customize the hyperparameter for finetune algorithm, please add the following arguments to the initializer, for details about hyperparameter setting, please refer to [provided algorithms](#Provided-Algorithms)\n```\nconfs = confs # a directory of the hyperparameter setting\n```\n\n#### Get the parameters list which need to update and pass them to optimizer\n```\nparams = algo.params()\n...\noptimizer = paddle.optimizer.Optimizer(...,parameters = params,...)\n```\nIn most cases, it is equal to model.parameters() and you may not want to invoke this method. But remember to do this if you are using Co-tuning algorithm since it has extra parameters to update\n\n#### Get the regularization loss and merge it to the classification loss\n```\nloss_cls = paddle.nn.CrossEntropyLoss(y_data,logits)\nloss_all = {'loss_cls': loss_cls}\nloss_reg = algo.loss(x_data, y_data, logits, features, epoch, batch_id)\nloss_all.update(loss_reg)\nloss = sum(loss_all.values())\n...\nloss.backward()\n```\n## Provided Algorithms\nSo far we have provided 5 algorithms for finetune, which are **MMD, L2-SP, DELTA, RIFLE and Co-Tuning**. If you do not want to use any finetune algorithms, just use the following code for vanilla finetune, the corresponding code for invoking different algorithms are in the respective sections.\n```\nalgo = FinetuneBASE(model,model_arch)\n```\n### MMD\nUse the following code for invoking MMD algorithm \n```\nalgo = FinetuneMMD(model,model_arch,confs=_confs)\n```\nThe default hyperparameters for MMD algorithms is as follows, if you want to modify them, please pass your own confs object to the initializer.\n```\n_confs = {'reg_weight': 0.1, 'kernel_mul': 2.0, 'kernel_num': 5}\n```\n\n### L2-SP\nUse the following code for invoking L2-SP algorithm \n```\nalgo = FinetuneL2SP(model,model_arch,confs=_confs)\n```\nThe default hyperparameters for L2SP algorithms is as follows, if you want to modify them, please pass your own confs object to the initializer.\n```\n_confs = {'reg_weight': 0.01}\n```\n\n### DELTA\nUse the following code for invoking DELTA algorithm \n```\nalgo = FinetuneDELTA(model,model_arch,confs=_confs)\n```\nThe default hyperparameters for DELTA algorithms is as follows, if you want to modify them, please pass your own confs object to the initializer.\n```\n_confs = {'reg_weight': 0.01}\n```\n\n### RIFLE\nUse the following code for invoking RIFLE algorithm \n```\nalgo = FinetuneRIFLE(model,model_arch,confs=_confs)\n```\nThe default hyperparameters for RIFLE algorithms is as follows, if you want to modify them, please pass your own confs object to the initializer.\n```\n_confs = {'reinit_epochs': [10,20,30]} # with total epochs = 40\n```\n\n### Co-Tuning\n\nUse the following code for invoking Co-Tuning algorithm. The data_loader is used for relationship learning. \n```\nalgo = FinetuneCOT(model, model_arch, data_loader=data_loader, confs=_confs)\n```\nIf you want to use Co-Tuning algorithm on ViT, use the following code. The vit_config is used for auxillary imagenet classifier construction. Please make sure that your vit_config object passed to the initializer has the same structure with the official implementation in [PaddleVit](https://github.com/BR-IDL/PaddleViT/blob/develop/image_classification/ViT/config.py), you can use the get_config() function they provide to generate one easily.\n```\nalgo = FinetuneCOT(model, model_arch, data_loader=data_loader, vit_config=config, confs=_confs)\n```\nThe default hyperparameters for Co-Tuning algorithms is as follows, if you want to modify them, please pass your own confs object to the initializer.\n```\n _confs = {'reg_weight': 2.3}\n```\n\n### Algorithm Performance\nWe have conducted some experiments on several dataset(**CUB_200_2011, indoorCVPR_09 and dtd**) using algorithms provided by PaddleTransfer. Most of experiments use the default hyper parameter setting in finetune.py, except Co-Tuning. For Co-Tuning, We use default hyper parameters on bird classification task, lr = 0.002 and wd = 0.0005 on scene classification task, lr = 0.001 and wd = 0.0005 on texture classification task. The outcomes are as follows.\n\n\n\n|          | Bird     | Scene    | Texture |\n| -------- | -------- | -------- | ------- |\n| BASE     | 80.25    | 77.34    | 62.07   |\n| MMD      | 80.41    | 78.27    | 63.15   |\n| L2SP     | 80.39    | 77.57    | 65.34   |\n| DELTA    | 81.04    | **78.79**    | 67.47   |\n| RIFLE    | 80.74    | 78.08    | 63.15   |\n| CoTuning | **81.07**    | 78.00    | **69.39**   |\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "transfer learning toolkits for paddle models",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paddletransfer",
    "package_url": "https://pypi.org/project/paddletransfer/",
    "platform": null,
    "project_url": "https://pypi.org/project/paddletransfer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/paddletransfer/0.1.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.7",
    "summary": "transfer learning toolkits for finetune deep learning models",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13862934,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2478bb24e4db6ab2109ec65a16fc14018d8bedd445a797fa9e6164db25ae27d9",
          "md5": "e70ba0a7da10c1e396b58f783093a89e",
          "sha256": "c3bbb05ce89f41a7c89499524b51cabd8ac753653908029ee6b2524d3affdfe1"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e70ba0a7da10c1e396b58f783093a89e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 24300,
        "upload_time": "2022-05-16T13:03:52",
        "upload_time_iso_8601": "2022-05-16T13:03:52.484373Z",
        "url": "https://files.pythonhosted.org/packages/24/78/bb24e4db6ab2109ec65a16fc14018d8bedd445a797fa9e6164db25ae27d9/paddletransfer-0.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "have bugs"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14324bc85fee7365a96d3a752ba1a7b07504a00b4b0d28fa46884fdbc1c6d354",
          "md5": "d40ef66ad1b644596fa77d342c5ccef6",
          "sha256": "085219dccbd815fc8eee030f2f135879942825ef083c482a757a28ad2792da77"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d40ef66ad1b644596fa77d342c5ccef6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20420,
        "upload_time": "2022-05-16T13:03:54",
        "upload_time_iso_8601": "2022-05-16T13:03:54.597570Z",
        "url": "https://files.pythonhosted.org/packages/14/32/4bc85fee7365a96d3a752ba1a7b07504a00b4b0d28fa46884fdbc1c6d354/paddletransfer-0.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "have bugs"
      }
    ],
    "0.0.2b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e7abfb5997dce6d6ec6e8edba1c146b46d72d11561ccb7eef7e04eed0fcb4f2",
          "md5": "64ab57365606efd18e195c3b112095a4",
          "sha256": "bc7d68ef5b7f43e7b6b4b8595ff015b59d5f596439b3e2dfd5110ba932e84fff"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.0.2b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64ab57365606efd18e195c3b112095a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24596,
        "upload_time": "2022-05-19T03:12:53",
        "upload_time_iso_8601": "2022-05-19T03:12:53.479977Z",
        "url": "https://files.pythonhosted.org/packages/1e/7a/bfb5997dce6d6ec6e8edba1c146b46d72d11561ccb7eef7e04eed0fcb4f2/paddletransfer-0.0.2b1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "beta version"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0b07a32be9d81846467da5eba6977c37d68b9cd07a24fe6706b24ff095d319b",
          "md5": "ea3436c85a7f0273e4bb7c86e2753391",
          "sha256": "065a0212e065cd4dfb92d4a199dcc6f86a00b5070b15afecf7e260113fc3f5f4"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.0.2b1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea3436c85a7f0273e4bb7c86e2753391",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21224,
        "upload_time": "2022-05-19T03:12:55",
        "upload_time_iso_8601": "2022-05-19T03:12:55.791325Z",
        "url": "https://files.pythonhosted.org/packages/e0/b0/7a32be9d81846467da5eba6977c37d68b9cd07a24fe6706b24ff095d319b/paddletransfer-0.0.2b1.tar.gz",
        "yanked": true,
        "yanked_reason": "beta version"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a3d94a5c203ca3bf5e407342f439c0947151c84cdc6e0483ffb25db1ecd66e1",
          "md5": "0fdbf136e206636f26848bf54069d97c",
          "sha256": "fba0fca56e02848a8ec025f785697d38c4ad87775c91ddf06223ad378e1b7167"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fdbf136e206636f26848bf54069d97c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24749,
        "upload_time": "2022-05-19T09:24:42",
        "upload_time_iso_8601": "2022-05-19T09:24:42.079707Z",
        "url": "https://files.pythonhosted.org/packages/8a/3d/94a5c203ca3bf5e407342f439c0947151c84cdc6e0483ffb25db1ecd66e1/paddletransfer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008f80b4a33978e1b977ae94bd4ba924efb630317a44f33ecf2739fca15d1291",
          "md5": "1ff73aea1f4db8e72ba7f6d0ec19a5d1",
          "sha256": "6fae242e4ca426ed7c11ab5494f29cd97abf1711636172806042494e998f3a15"
        },
        "downloads": -1,
        "filename": "paddletransfer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ff73aea1f4db8e72ba7f6d0ec19a5d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21493,
        "upload_time": "2022-05-19T09:24:43",
        "upload_time_iso_8601": "2022-05-19T09:24:43.857503Z",
        "url": "https://files.pythonhosted.org/packages/00/8f/80b4a33978e1b977ae94bd4ba924efb630317a44f33ecf2739fca15d1291/paddletransfer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a3d94a5c203ca3bf5e407342f439c0947151c84cdc6e0483ffb25db1ecd66e1",
        "md5": "0fdbf136e206636f26848bf54069d97c",
        "sha256": "fba0fca56e02848a8ec025f785697d38c4ad87775c91ddf06223ad378e1b7167"
      },
      "downloads": -1,
      "filename": "paddletransfer-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0fdbf136e206636f26848bf54069d97c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24749,
      "upload_time": "2022-05-19T09:24:42",
      "upload_time_iso_8601": "2022-05-19T09:24:42.079707Z",
      "url": "https://files.pythonhosted.org/packages/8a/3d/94a5c203ca3bf5e407342f439c0947151c84cdc6e0483ffb25db1ecd66e1/paddletransfer-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "008f80b4a33978e1b977ae94bd4ba924efb630317a44f33ecf2739fca15d1291",
        "md5": "1ff73aea1f4db8e72ba7f6d0ec19a5d1",
        "sha256": "6fae242e4ca426ed7c11ab5494f29cd97abf1711636172806042494e998f3a15"
      },
      "downloads": -1,
      "filename": "paddletransfer-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1ff73aea1f4db8e72ba7f6d0ec19a5d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21493,
      "upload_time": "2022-05-19T09:24:43",
      "upload_time_iso_8601": "2022-05-19T09:24:43.857503Z",
      "url": "https://files.pythonhosted.org/packages/00/8f/80b4a33978e1b977ae94bd4ba924efb630317a44f33ecf2739fca15d1291/paddletransfer-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}