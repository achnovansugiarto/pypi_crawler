{
  "info": {
    "author": "IsaacBreen",
    "author_email": "mail@isaacbreen.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# llmfn\n\n**llmfn** is a Python library to approximate a function using OpenAI's API. You can use it to easily train a language model to approximate your own functions with few-shot prompting.\n\n## Installation\n\nYou can install the package from pip:\n\n```\npip install llmfn\n```\n\n## Usage\n\nFirst, you need to set your OpenAI API key:\n\n```python\nimport os\nimport openai\n\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n```\n\nThen, you can define a list of examples of the function's behavior:\n\n```python\nfrom llmfn import Arguments\nfrom llmfn import FunctionExample\n\nexamples = [\n    FunctionExample(arguments=Arguments.call(2, 3), output=5),\n    FunctionExample(arguments=Arguments.call(5, 7), output=12),\n    # ...\n]\n```\n\nFinally, you can use the llmfn decorator to create an approximated version of your function:\n\n```python\nfrom llmfn import llmfn\n\n@llmfn(examples=examples, function_name=\"my_function\")\ndef my_function(a: int, b: int) -> int:\n    return a + b\n\nassert my_function(2, 3) == 5\n```\n\nAlternatively, you can use the `make_llmfn` function to create an approximated version of your function without using the decorator:\n\n```python\nfrom llmfn import make_llmfn\n\nblackbox = make_llmfn(examples=examples, function_name=\"my_function\")\n\nassert blackbox(2, 3) == 5\n```\n\n## Advanced Usage\n\n### Changing the Decoder\n\nBy default, the decoder is set to `lambda x: x`, which simply returns the output as a string. You can change the decoder to parse the output into a different data type:\n\n```python\nfrom llmfn import make_llmfn\n\ndef decoder(output: str) -> int:\n    return int(output)\n\nblackbox = make_llmfn(examples=examples, function_name=\"my_function\", decoder=decoder)\n\nassert blackbox(2, 3) == 5\n```\n\nThe most useful decoder (and the most dangerous) is `eval`, which will evaluate the output as Python code:\n\n```python\nfrom llmfn import make_llmfn\n\nblackbox = make_llmfn(examples=examples, function_name=\"my_function\", decoder=eval)\n\nassert blackbox(2, 3) == 5\n```\n\nUse this with caution - it could be used to execute arbitrary code. (This is why it's not the default decoder.)\n\n### Changing the Engine\n\nBy default, the engine is set to `text-davinci-003`. You can change the engine to a different OpenAI engine:\n\n```python\nfrom llmfn import make_llmfn\n\nblackbox = make_llmfn(examples=examples, function_name=\"my_function\", engine=\"text-curie-001\")\n\nassert blackbox(2, 3) == 5\n```\n\n## Limitations\n\n- The function's output must be a string.\n- The approximated function can only handle arguments that are compatible with the examples.\n- The approximated function may not work with complex or large functions.\n- The API usage may be subject to rate limits and other restrictions imposed by OpenAI.\n\n## Contributing\n\nWe welcome contributions to this project. If you have any ideas or suggestions, please open an issue or submit a pull request.\n\n## License\n\nThis project is licensed under the MIT License.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "llmfn",
    "package_url": "https://pypi.org/project/llmfn/",
    "platform": null,
    "project_url": "https://pypi.org/project/llmfn/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/llmfn/0.1.0/",
    "requires_dist": [
      "openai (>=0.26.4,<0.27.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16607617,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "499c76b0b7d7d41d54c5c0a611f24459494f00fea913e23775b584d2d0228ebf",
          "md5": "6f8349da0c95fd671b13df960da55812",
          "sha256": "fbac3ad205ac455fb5ab5ce79b209d6afecfd4760b7c5d698e1eef96aad359df"
        },
        "downloads": -1,
        "filename": "llmfn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f8349da0c95fd671b13df960da55812",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 4110,
        "upload_time": "2023-01-29T10:43:25",
        "upload_time_iso_8601": "2023-01-29T10:43:25.469031Z",
        "url": "https://files.pythonhosted.org/packages/49/9c/76b0b7d7d41d54c5c0a611f24459494f00fea913e23775b584d2d0228ebf/llmfn-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fa0d305fcd7d36bfec9ba6ee58a6f9795ac7ed4f8d1f566bc86da2859b61afd",
          "md5": "b1865cbe0652d70a8862209ec8067a06",
          "sha256": "c7fed270c5ae65b39d24cc2ea008b3839d14ab32aaa676b036e4c7a32301360c"
        },
        "downloads": -1,
        "filename": "llmfn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b1865cbe0652d70a8862209ec8067a06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 4072,
        "upload_time": "2023-01-29T10:43:27",
        "upload_time_iso_8601": "2023-01-29T10:43:27.438512Z",
        "url": "https://files.pythonhosted.org/packages/8f/a0/d305fcd7d36bfec9ba6ee58a6f9795ac7ed4f8d1f566bc86da2859b61afd/llmfn-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "499c76b0b7d7d41d54c5c0a611f24459494f00fea913e23775b584d2d0228ebf",
        "md5": "6f8349da0c95fd671b13df960da55812",
        "sha256": "fbac3ad205ac455fb5ab5ce79b209d6afecfd4760b7c5d698e1eef96aad359df"
      },
      "downloads": -1,
      "filename": "llmfn-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f8349da0c95fd671b13df960da55812",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 4110,
      "upload_time": "2023-01-29T10:43:25",
      "upload_time_iso_8601": "2023-01-29T10:43:25.469031Z",
      "url": "https://files.pythonhosted.org/packages/49/9c/76b0b7d7d41d54c5c0a611f24459494f00fea913e23775b584d2d0228ebf/llmfn-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fa0d305fcd7d36bfec9ba6ee58a6f9795ac7ed4f8d1f566bc86da2859b61afd",
        "md5": "b1865cbe0652d70a8862209ec8067a06",
        "sha256": "c7fed270c5ae65b39d24cc2ea008b3839d14ab32aaa676b036e4c7a32301360c"
      },
      "downloads": -1,
      "filename": "llmfn-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b1865cbe0652d70a8862209ec8067a06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 4072,
      "upload_time": "2023-01-29T10:43:27",
      "upload_time_iso_8601": "2023-01-29T10:43:27.438512Z",
      "url": "https://files.pythonhosted.org/packages/8f/a0/d305fcd7d36bfec9ba6ee58a6f9795ac7ed4f8d1f566bc86da2859b61afd/llmfn-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}