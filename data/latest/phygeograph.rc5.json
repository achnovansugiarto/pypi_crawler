{
  "info": {
    "author": "Lianfa Li",
    "author_email": "phygeograph@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Library of Physics-Aware Geograph Hybrid Modeling (phygeograph)\n\nThe python library of physics-aware geograph hybrid modeling (phygeograph). \nCurrent version just supports the PyTorch package of deep geometric learning and \nwill extend to the others in the future. This package is for the paper, \n`\"Physics-Aware Deep Graph Learning for Air Quality Assessment\"` \n\nAuthors: Lianfa Li (phygeograph@gmail.com; lspatial@gmail.com)  \n         Jinfeng Wang (wangjf@lreis.ac.cn)\n\n\n## Major modules\n\n**Model**\n\n* PhyAirGCov: Function of physics-aware graph convolution for air pollutants or other similar geo-features. \n              with the application of the thermodynamic laws in the graph space.  \n* knngeo: function to retrieve the nearest neighbors with spatial or spatiotemporal distances.  \n* knnd_geograph: function of knn to support the output of spatial or spatiotemporal weights.\n* PhyGeoGrapH: Physics-aware graph modules inclduing local graph convolutions to simulate \n             spreading of air pollutants and full residual deep layers with attention layers.\n* PhyGeoGrapHPDE: Physics-aware graph modules subject to the physical invariance of \n             the continuity partial differential equation.             \n* DataSamplingDSited : Using distance-weighted kdd to sample the data to get the network \n            topology and the corresponding sample data. \n* WNeighborSampler : Function of using distance-weighted kdd to obtain the mini-batch data  \n                    to train and test geographic graph hybrid network.\n\n**Helper util functions**\n* train: Training function of physics-aware graph hybrid model.\n* test: Tesing function of physics-aware graph hybrid model.\n* selectSites: site sampling function for site-based independent test\n\n## Installation\nYou can directly install it using the following command for the latest version:\n```\n  pip install phygeograph\n```\n\n## Note for installation and use \n\n**Runtime requirements**\n\nphygeograph requires installation of PyTorch with support of  PyG (PyTorch Geometric). \nAlso Pandas and Numpy should be installed. \n\n## Use case \nThe package provides one example for use of physics-aware geograph hybrid method to predict PM2.5 in mainland China.\nSee the following example. \n\n## License\n\nThe phygeograph is provided under a MIT license that can be found in the LICENSE\nfile. By using, distributing, or contributing to this project, you agree to the\nterms and conditions of this license.\n\n## Test call\n\n**Load the packages**\n```python\n\nimport pandas as pd\nimport numpy as np\nimport torch\nfrom phygeograph.model.wsampler import WNeighborSampler \nfrom phygeograph.utils.traintest import  train, test\nfrom phygeograph.model import PhyGeoGrapHPDE\nfrom phygeograph.utils.sampling import selectSites\nfrom phygeograph.model.wdatasampling import DataSamplingDSited\nimport gc\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport urllib\nimport tarfile\n```\n**Helper function for site-based independent test and downloading \n```python\ndef untar(fname, dirs):\n    t = tarfile.open(fname)\n    t.extractall(path = dirs)\n```\n**Download and extract the sample dataset**\n\nYou can download the sample data from https://github.com/phygeograph. \n```python\nurl = 'https://github.com/phygeograph/phygeographdata/raw/master/phyg_sampledata1.pkl.tar.gz'\ntarfl='./phyg_sampledata1.tar.gz'\nprint(\"Downloading from \"+url+' ... ...')\nurllib.request.urlretrieve(url, tarfl)\ntarget='.'\nuntar(tarfl,target)\n```\n\n**Read and preprocess the data** \n```python\ntargetFl=target+'/datasam1.pkl'\ndatatar=pd.read_pickle(targetFl)\nprint(datatar.columns,datatar.shape)\ncovs=['idate','lat', 'lon', 'latlon', 'DOY', 'dem', 'OVP10_TOTEXTTAU', 'OVP14_TOTEXTTAU',\n       'TOTEXTTAU', 'glnaswind', 'maiacaod', 'o3', 'pblh', 'prs', 'rhu', 'tem',\n       'win', 'GAE', 'NO2_BOT', 'NO_BOT', 'PM25_BOT', 'PM_BOT', 'OVP10_CO',\n       'OVP10_GOCART_SO2_VMR', 'OVP10_NO', 'OVP10_NO2', 'OVP10_O3', 'BCSMASS',\n       'DMSSMASS', 'DUSMASS25', 'HNO3SMASS', 'NISMASS25', 'OCSMASS', 'PM25',\n       'SO2SMASS', 'SSSMASS25', 'sdist_roads', 'sdist_poi', 'parea10km',\n       'rlen10km', 'wstag', 'wmix', 'CLOUD', 'MYD13C1.NDVI',\n       'MYD13C1.EVI', 'MOD13C1.NDVI', 'MOD13C1.EVI', 'is_workday', 'OMI-NO2']\nX = datatar[covs].values\nscX = preprocessing.StandardScaler().fit(X)\nXn = scX.transform(X)\ny = datatar['pm25_log'].values\ny = y[:,None]\nypm25 = datatar['PM2.5_24h'].values\nscy = preprocessing.StandardScaler().fit(y)\nyn = scy.transform(y)\n```\n\n**Sampling**\n```python\ntarcols=[i for i in range(len(covs))]\ntrainsitesIndex=[i for i in range(datatar.shape[0])]\ntrainsitesIndex, indTestsitesIndex=selectSites(datatar)\nx, edge_index,edge_dist, y, train_index, test_index = DataSamplingDSited(Xn[:,tarcols], yn, \n        [0,1,2], 12,trainsitesIndex ,datatar)\nx = x[:, 1:]\nedge_weight=1.0/(edge_dist+0.00001)\nneighbors=[12,12,12,12]\ntrain_loader = WNeighborSampler(edge_index, edge_weight= edge_weight,node_idx=train_index,\n                               sizes=neighbors, batch_size=3048, shuffle=True,\n                               num_workers=20 )\nx_index = torch.LongTensor([i for i in range(Xn.shape[0])])\nx_loader = WNeighborSampler(edge_index, edge_weight= edge_weight,node_idx=x_index,\n                           sizes=neighbors, batch_size=3048, shuffle=False,\n                           num_workers=20 )\n```\n**Definition of the model and parameters**\n```python\ngpu=2\nif gpu is None:\n    device = torch.device('cpu')\nelse:\n    device = torch.device('cuda:'+str(gpu))\nnout=1\nresnodes = [512, 320, 256, 128, 96, 64, 32, 16]\n# 0: original; 1: concated ; 2: dense; 3: only gcn\ngcnnhiddens = [128,64,32]\nmodel = PhyGeoGrapHPDE(x.shape[1], gcnnhiddens, nout, len(neighbors), resnodes, \n         weightedmean=True,gcnout=nout,nattlayer=1)\nmodel = model.to(device)\nx = x.to(device)\nedge_index = edge_index.to(device)\ny = y.to(device)\ninit_lr=0.01\noptimizer = torch.optim.Adam(model.parameters(), lr=init_lr)\nbest_indtest_r2 = -9999\nbest_test_r2=-9999\nscheduler=torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer,mode='min')\noldlr=newlr=init_lr\n```\n\n**Model training**\n```python\nepoch=0\nnepoch=200\ntrpath=\"/wkspace/pypackages/phygeographPub_data/test\"\nwhile epoch< nepoch  :\n    # adjust_lr(optimizer, epoch, init_lr)\n    print('Conducting ',epoch, ' of ',nepoch,' for PM  ... ...')\n    loss, train_r2, train_rmse = train(model, train_loader, device, optimizer, x, y,scy)\n    try:\n       train_r2, train_rmse, test_r2, test_rmse,indtest_r2,indtest_rmse=\n                test(model, x_loader, device, x, y, scy,train_index,\n                         test_index, False,indTestsitesIndex)\n    except:\n        print(\"Wrong loop for ecpoch \"+str(epoch)+ \", continue ... ...\")\n        epoch=epoch+1\n        continue\n    if best_indtest_r2 < indtest_r2:\n        best_indtest_r2 = indtest_r2\n        best_indtest_rmse=indtest_rmse\n    scheduler.step(loss)\n    newlr= optimizer.param_groups[0]['lr']\n    if newlr!=oldlr:\n        print('Learning rate is {} from {} '.format(newlr, oldlr))\n        oldlr=newlr\n    aperformanceDf=pd.DataFrame({'train_r2':train_r2, 'train_rmse':train_rmse,\n                                 'test_r2':test_r2, 'test_rmse': test_rmse,\n                                 'indtest_r2':indtest_r2,'indtest_rmse':indtest_rmse},\n                                 index=[epoch])\n    aperformanceDf['epoch']=epoch\n    if epoch==0:\n        alltrainHist=aperformanceDf\n    else:\n        alltrainHist=alltrainHist.append(aperformanceDf)\n    print('epoch:',epoch,'  ... ...',aperformanceDf)\n    epoch=epoch+1\n```\n\n**Save the results**\n```python\ntfl = trpath + '/trainHist.csv'\nalltrainHist.to_csv(tfl, header=True, index_label=\"row\")\ndel optimizer, x, edge_index, y, train_index, test_index, model, alltrainHist\ngc.collect()\n```\n## Collaboration\n\nWelcome to contact Dr. Lianfa Li (Email: phygeograph@gmail.com).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phygeograph/phygeograph",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phygeograph",
    "package_url": "https://pypi.org/project/phygeograph/",
    "platform": "",
    "project_url": "https://pypi.org/project/phygeograph/",
    "project_urls": {
      "Homepage": "https://github.com/phygeograph/phygeograph"
    },
    "release_url": "https://pypi.org/project/phygeograph/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for Physics-Aware Geo Graph Hybrid Network",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11556395,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a217f2a53d34f688e9c48b4610ad874a0189955bed8a3100ee957c2b5d4800d2",
          "md5": "2469c23492a76968aba6d0b83956c74e",
          "sha256": "d4085d2ff0ebd1bc6d865bfd3f9a822acc7269f50105414adfb4b8bca60ca7fc"
        },
        "downloads": -1,
        "filename": "phygeograph-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2469c23492a76968aba6d0b83956c74e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18703,
        "upload_time": "2021-09-26T09:28:00",
        "upload_time_iso_8601": "2021-09-26T09:28:00.688231Z",
        "url": "https://files.pythonhosted.org/packages/a2/17/f2a53d34f688e9c48b4610ad874a0189955bed8a3100ee957c2b5d4800d2/phygeograph-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac7b35207f5af3981ea9df2aec7d056f2b37b4ae95a871d47d44cb304a3c72e4",
          "md5": "cc4da1d3837771b421ba056887fa6d88",
          "sha256": "2a335aa76c93bbddca3d4a841447bb544250ee659633456d9a20b0f8cbb1864f"
        },
        "downloads": -1,
        "filename": "phygeograph-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc4da1d3837771b421ba056887fa6d88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18689,
        "upload_time": "2021-09-26T12:49:20",
        "upload_time_iso_8601": "2021-09-26T12:49:20.893608Z",
        "url": "https://files.pythonhosted.org/packages/ac/7b/35207f5af3981ea9df2aec7d056f2b37b4ae95a871d47d44cb304a3c72e4/phygeograph-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e488233d1935fca4dd75dc92fa255493bd354fffb3389531d40605520f01dcb8",
          "md5": "1c95845c3fa500d7336aa97110fab43e",
          "sha256": "ee941c67c86c192d58abcecc6b76b6f10ed4bcef15432e0127689f24427d3369"
        },
        "downloads": -1,
        "filename": "phygeograph-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1c95845c3fa500d7336aa97110fab43e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18798,
        "upload_time": "2021-09-26T13:58:13",
        "upload_time_iso_8601": "2021-09-26T13:58:13.378863Z",
        "url": "https://files.pythonhosted.org/packages/e4/88/233d1935fca4dd75dc92fa255493bd354fffb3389531d40605520f01dcb8/phygeograph-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f79ec9def68ba145a24b7861062f1511fbbc37d237bfac5b7ab0ce82cba39bb",
          "md5": "2cac961b5616a968817a3697b90cbb6b",
          "sha256": "037a8152cd6c8b3026909256521c659453bcf335023e310eec5fa966bbffb02e"
        },
        "downloads": -1,
        "filename": "phygeograph-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2cac961b5616a968817a3697b90cbb6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18749,
        "upload_time": "2021-09-26T14:03:14",
        "upload_time_iso_8601": "2021-09-26T14:03:14.366907Z",
        "url": "https://files.pythonhosted.org/packages/2f/79/ec9def68ba145a24b7861062f1511fbbc37d237bfac5b7ab0ce82cba39bb/phygeograph-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01746e5036f9f456b5686240f8a1e71c05ef16dd59350a4a5bb6750194c9cd68",
          "md5": "14ff6b08c1c03ff197c94855c2f82d9a",
          "sha256": "1175f792457dc0f477495860a4e9481f0a177822587ce0783a5023f2395cbc1a"
        },
        "downloads": -1,
        "filename": "phygeograph-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "14ff6b08c1c03ff197c94855c2f82d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18757,
        "upload_time": "2021-09-27T01:53:47",
        "upload_time_iso_8601": "2021-09-27T01:53:47.906248Z",
        "url": "https://files.pythonhosted.org/packages/01/74/6e5036f9f456b5686240f8a1e71c05ef16dd59350a4a5bb6750194c9cd68/phygeograph-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01746e5036f9f456b5686240f8a1e71c05ef16dd59350a4a5bb6750194c9cd68",
        "md5": "14ff6b08c1c03ff197c94855c2f82d9a",
        "sha256": "1175f792457dc0f477495860a4e9481f0a177822587ce0783a5023f2395cbc1a"
      },
      "downloads": -1,
      "filename": "phygeograph-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "14ff6b08c1c03ff197c94855c2f82d9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18757,
      "upload_time": "2021-09-27T01:53:47",
      "upload_time_iso_8601": "2021-09-27T01:53:47.906248Z",
      "url": "https://files.pythonhosted.org/packages/01/74/6e5036f9f456b5686240f8a1e71c05ef16dd59350a4a5bb6750194c9cd68/phygeograph-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}