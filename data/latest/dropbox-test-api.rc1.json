{
  "info": {
    "author": "APIMatic SDK Generator",
    "author_email": "support@apimatic.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Getting started\n\nAPI for testing OAuth2 with Dropbox\n\n## How to Build\n\n\nYou must have Python ```2 >=2.7.9``` or Python ```3 >=3.4``` installed on your system to install and run this SDK. This SDK package depends on other Python packages like nose, jsonpickle etc. \nThese dependencies are defined in the ```requirements.txt``` file that comes with the SDK.\nTo resolve these dependencies, you can use the PIP Dependency manager. Install it by following steps at [https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/).\n\nPython and PIP executables should be defined in your PATH. Open command prompt and type ```pip --version```.\nThis should display the version of the PIP Dependency Manager installed if your installation was successful and the paths are properly defined.\n\n* Using command line, navigate to the directory containing the generated files (including ```requirements.txt```) for the SDK.\n* Run the command ```pip install -r requirements.txt```. This should install all the required dependencies.\n\n![Building SDK - Step 1](https://apidocs.io/illustration/python?step=installDependencies&workspaceFolder=Dropbox-Python)\n\n\n## How to Use\n\nThe following section explains how to use the DropboxTestApi SDK package in a new project.\n\n### 1. Open Project in an IDE\n\nOpen up a Python IDE like PyCharm. The basic workflow presented here is also applicable if you prefer using a different editor or IDE.\n\n![Open project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=pyCharm)\n\nClick on ```Open``` in PyCharm to browse to your generated SDK directory and then click ```OK```.\n\n![Open project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=openProject0&workspaceFolder=Dropbox-Python)     \n\nThe project files will be displayed in the side bar as follows:\n\n![Open project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=openProject1&workspaceFolder=Dropbox-Python&projectName=dropbox_test_api)     \n\n### 2. Add a new Test Project\n\nCreate a new directory by right clicking on the solution name as shown below:\n\n![Add a new project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=createDirectory&workspaceFolder=Dropbox-Python&projectName=dropbox_test_api)\n\nName the directory as \"test\"\n\n![Add a new project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=nameDirectory)\n\nAdd a python file to this project with the name \"testsdk\"\n\n![Add a new project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=createFile&workspaceFolder=Dropbox-Python&projectName=dropbox_test_api)\n\nName it \"testsdk\"\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=nameFile)\n\nIn your python file you will be required to import the generated python library using the following code lines\n\n```Python\nfrom dropbox_test_api.dropbox_test_api_client import DropboxTestApiClient\n```\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=projectFiles&workspaceFolder=Dropbox-Python&libraryName=dropbox_test_api.dropbox_test_api_client&projectName=dropbox_test_api&className=DropboxTestApiClient)\n\nAfter this you can write code to instantiate an API client object, get a controller object and  make API calls. Sample code is given in the subsequent sections.\n\n### 3. Run the Test Project\n\nTo run the file within your test project, right click on your Python file inside your Test project and click on ```Run```\n\n![Run Test Project - Step 1](https://apidocs.io/illustration/python?step=runProject&workspaceFolder=Dropbox-Python&libraryName=dropbox_test_api.dropbox_test_api_client&projectName=dropbox_test_api&className=DropboxTestApiClient)\n\n\n## How to Test\n\nYou can test the generated SDK and the server with automatically generated test\ncases. unittest is used as the testing framework and nose is used as the test\nrunner. You can run the tests as follows:\n\n  1. From terminal/cmd navigate to the root directory of the SDK.\n  2. Invoke ```pip install -r test-requirements.txt```\n  3. Invoke ```nosetests```\n\n## Initialization\n\n### Authentication\nIn order to setup authentication and initialization of the API client, you need the following information.\n\n| Parameter | Description |\n|-----------|-------------|\n| o_auth_client_id | OAuth 2 Client ID |\n| o_auth_client_secret | OAuth 2 Client Secret |\n| o_auth_redirect_uri | OAuth 2 Redirection endpoint or Callback Uri |\n\n\n\nAPI client can be initialized as following.\n\n```python\n# Configuration parameters and credentials\no_auth_client_id = 'o_auth_client_id' # OAuth 2 Client ID\no_auth_client_secret = 'o_auth_client_secret' # OAuth 2 Client Secret\no_auth_redirect_uri = 'o_auth_redirect_uri' # OAuth 2 Redirection endpoint or Callback Uri\n\nclient = DropboxTestApiClient(o_auth_client_id, o_auth_client_secret, o_auth_redirect_uri)\n```\n\n\nYou must now authorize the client.\n\n### Authorizing your client\n\nYour application must obtain user authorization before it can execute an endpoint call.\nThe SDK uses *OAuth 2.0 authorization* to obtain a user's consent to perform an API request on the user's behalf.\n\n#### 1. Obtain user consent\n\nTo obtain user's consent, you must redirect the user to the authorization page. The `get_authorization_url()` method creates the URL to the authorization page.\n```python\nauth_url = client.auth.get_authorization_url()\n```\n\n#### 2. Handle the OAuth server response\n\nOnce the user responds to the consent request, the OAuth 2.0 server responds to your application's access request by redirecting the user to your redirect URI.\n\nIf the user approves the request, the authorization code will be sent as the `code` query string:\n\n```\nhttps://example.com/oauth/callback?code=XXXXXXXXXXXXXXXXXXXXXXXXX\n```\n\nIf the user does not approve the request, the response contains an `error` query string:\n\n```\nhttps://example.com/oauth/callback?error=access_denied\n```\n\n#### 3. Authorize the client using the code\n\nAfter the server receives the code, it can exchange this for an *access token*. The access token is an object containing information for authorizing client requests and refreshing the token itself.\n\n```python\ntry:\n    client.auth.authorize('code')\nexcept OAuthProviderException as ex:\n    # handle exception\n```\n\n### Refreshing token\n\nAn access token may expire after some time. To extend its lifetime, you must refresh the token.\n\n```python\nif client.auth.token_expired():\n    try:\n        client.auth.refresh_token()\n    except OAuthProviderException as ex:\n        # handle exception\n```\n\nIf a token expires, the SDK will attempt to automatically refresh the token before the next endpoint call requiring authentication.\n\n### Storing an access token for reuse\n\nIt is recommended that you store the access token for reuse.\n\nYou can store the access token in a file or a database.\n\n```python\n# store token\nsave_token_to_database(client.config.o_auth_token)\n```\n\nHowever, since the the SDK will attempt to automatically refresh the token when it expires, it is recommended that you register a *token update callback* to detect any change to the access token.\n\n```python\nclient.config.o_auth_callback = save_token_to_database\n```\n\nThe token update callback will be fired upon authorization as well as token refresh.\n\n### Creating a client from a stored token\n\nTo authorize a client from a stored access token, just set the access token after creating the client:\n\n```python\nclient = DropboxTestApiClient()\nclient.config.o_auth_token = load_token_from_database()\n```\n\n\n# Class Reference\n\n## <a name=\"list_of_controllers\"></a>List of Controllers\n\n* [FilesController](#files_controller)\n\n## <a name=\"files_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".FilesController\") FilesController\n\n### Get controller instance\n\nAn instance of the ``` FilesController ``` class can be accessed from the API Client.\n\n```python\n files_controller = client.files\n```\n\n### <a name=\"get_file_count\"></a>![Method: ](https://apidocs.io/img/method.png \".FilesController.get_file_count\") get_file_count\n\n> TODO: Add a method description\n\n```python\ndef get_file_count(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = files_controller.get_file_count()\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://apimatic.io",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dropbox-test-api",
    "package_url": "https://pypi.org/project/dropbox-test-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/dropbox-test-api/",
    "project_urls": {
      "Homepage": "https://apimatic.io"
    },
    "release_url": "https://pypi.org/project/dropbox-test-api/1.0/",
    "requires_dist": [
      "requests (<3.0,>=2.9.1)",
      "jsonpickle (<1.0,>=0.7.1)",
      "cachecontrol (<1.0,>=0.11.7)",
      "python-dateutil (<3.0,>=2.5.3)"
    ],
    "requires_python": "",
    "summary": "API for testing OAuth2 with Dropbox",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8941198,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42a4509affbbf5a3fb914980438d6994ee792c4e1a4f8a5e6ec663e372b2072a",
          "md5": "2ff48093c341f69d8c107f0c7b238cf0",
          "sha256": "60aa635a4bda33849103aaffa06a4b6ed3fa3964a38a3cef72ac4128820cdcca"
        },
        "downloads": -1,
        "filename": "dropbox_test_api-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ff48093c341f69d8c107f0c7b238cf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27947,
        "upload_time": "2020-12-19T15:03:16",
        "upload_time_iso_8601": "2020-12-19T15:03:16.104079Z",
        "url": "https://files.pythonhosted.org/packages/42/a4/509affbbf5a3fb914980438d6994ee792c4e1a4f8a5e6ec663e372b2072a/dropbox_test_api-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c9561cd8e3e7a25d4f03223e3235222c4cb336478ca1e0ba3a5b4d3c52593af",
          "md5": "a659d9a726b772af211eb6461a171db5",
          "sha256": "57b576d98e20c39831fb7cf392ea3d28167d9f6f9f45b5db12575ef0c8edde82"
        },
        "downloads": -1,
        "filename": "dropbox_test_api-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a659d9a726b772af211eb6461a171db5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20072,
        "upload_time": "2020-12-19T15:03:17",
        "upload_time_iso_8601": "2020-12-19T15:03:17.773886Z",
        "url": "https://files.pythonhosted.org/packages/7c/95/61cd8e3e7a25d4f03223e3235222c4cb336478ca1e0ba3a5b4d3c52593af/dropbox_test_api-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42a4509affbbf5a3fb914980438d6994ee792c4e1a4f8a5e6ec663e372b2072a",
        "md5": "2ff48093c341f69d8c107f0c7b238cf0",
        "sha256": "60aa635a4bda33849103aaffa06a4b6ed3fa3964a38a3cef72ac4128820cdcca"
      },
      "downloads": -1,
      "filename": "dropbox_test_api-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ff48093c341f69d8c107f0c7b238cf0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27947,
      "upload_time": "2020-12-19T15:03:16",
      "upload_time_iso_8601": "2020-12-19T15:03:16.104079Z",
      "url": "https://files.pythonhosted.org/packages/42/a4/509affbbf5a3fb914980438d6994ee792c4e1a4f8a5e6ec663e372b2072a/dropbox_test_api-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c9561cd8e3e7a25d4f03223e3235222c4cb336478ca1e0ba3a5b4d3c52593af",
        "md5": "a659d9a726b772af211eb6461a171db5",
        "sha256": "57b576d98e20c39831fb7cf392ea3d28167d9f6f9f45b5db12575ef0c8edde82"
      },
      "downloads": -1,
      "filename": "dropbox_test_api-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a659d9a726b772af211eb6461a171db5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20072,
      "upload_time": "2020-12-19T15:03:17",
      "upload_time_iso_8601": "2020-12-19T15:03:17.773886Z",
      "url": "https://files.pythonhosted.org/packages/7c/95/61cd8e3e7a25d4f03223e3235222c4cb336478ca1e0ba3a5b4d3c52593af/dropbox_test_api-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}