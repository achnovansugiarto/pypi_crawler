{
  "info": {
    "author": "Dmytro Popov",
    "author_email": "thedmitryp@ukr.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# clear-formatting\r\n\r\nA library providing a facade for clear and easy-to-get values formatting.\r\n\r\nI've written this lib after struggling to remember all the format symbols belonging to Python string formatting\r\nsyntax to make the formatting as easy as possible.\r\n\r\n## Functionality\r\n\r\nAll functionality is provided by the class `ValueFormatter` with help of the formatting classes of the `formats` module.\r\n\r\nValueFormatter must be initialized with a list of format classes. When initialized, the\r\nmethod `ValueFormatter.format(value)` can be used to format the value, as well as calling the ValueFormatter object with\r\nthe value as argument.\r\n\r\nThe class uses the default Python string formatting _(`str.format()` and curly braces)_ syntax to build a formatting\r\ntemplate from the given instances of the format classes.\r\n\r\n## Formats\r\n\r\nValueFormatter uses custom classes to determine the needed output format for the value. The format classes are provided \r\nduring ValueFormatter initialization. There is a list of the format classes available at the module `formats` with their\r\noptions:\r\n\r\n0) `FormatBase` | `EnumFormatBase` - base classes for non-enum and enum format classes, respectively.\r\n1) `Conversion` - format class that causes a type coercion (to string) before formatting. The only format class to be\r\n   used separately from others. See the [Type conversion](#type-conversion) section for details.\r\n    * `STR` - converts the value to a string using *str()* method.\r\n    * `REPR` - also converts the value to a string, but using *repr()* method.\r\n    * `ASCII` - converts the value to a string with *ascii()* method (leaves only ASCII characters).\r\n2) `Fill(char: str)` - determines the width fill character. The provided char will be used to replace the empty\r\n   characters.\r\n3) `Align` - determines the alignment options. Has its effect only with Width format class.\r\n    * `CENTER` - forces the field to be centered within the available space.\r\n    * `LEFT` - forces the field to be left-aligned within the available space.\r\n    * `RIGHT` - forces the field to be right-aligned within the available space.\r\n    * `SPLIT_WITH_SIGN` - forces the padding to be placed after the sign (if any) but before the digits.\r\n4) `Sign` - determines the sign display options for number formatting.\r\n    * `ALL` - indicates that a sign should be displayed for both positive and negative numbers.\r\n    * `NEGATIVE` - indicates that a sign should be displayed only for negative numbers (this is the default option).\r\n    * `SPACE` - indicates that a leading space should be used for positive numbers and a sign should be displayed for\r\n      negative numbers.\r\n5) `Alternate()` - causes the alternate form to be used for the conversion.\r\n\r\n   The alternate form is defined differently for different types. This option is only valid for integer, float and\r\n   complex types. For integers, when binary, octal, or hexadecimal output is used, this option adds the respective\r\n   prefix '0b', '0o', '0x', or '0X' to the output value. For float and complex the alternate form causes the result of\r\n   the conversion to always contain a decimal-point character, even if no digits follow it. Normally, a decimal-point\r\n   character appears in the result of these conversions only if a digit follows it. In addition, for `GENERAL`\r\n   and `GENERAL_UPPER` conversions, trailing zeros are not removed from the result.\r\n6) `Width(width: int)` - determines the width (in characters) of the output string. Takes only positive integers. If the\r\n   negative number is specified, the width is set to 0. If the floating point number is specified, it is casted to \r\n   integer.\r\n8) `Groping` - determines the separator for thousands.\r\n    * `COMMA` - signals the use of a comma as a separator for thousands. For a locale aware separator, use the\r\n      LOCALIZED_NUMBER integer presentation type instead.\r\n    * `UNDERSCORE` - signals the use of an underscore as a separator for thousands for floating point presentation types\r\n      and for integer presentation type `DECIMAL`. For integer presentation types `BINARY`, `OCTAL`, `HEXADECIMAL`,\r\n      and `HEXADECIMAL_UPPER`, underscores will be inserted every 4 digits. For other presentation types, specifying\r\n      this option will cause an error.\r\n9) `Precision(precision: int)` - determines the precision value for number and string formatting. For floating point\r\n   presentation types, this value specifies the quantity of digits to be rounded to. For string type, specifying this\r\n   value will limit the length of the string by the precision value. For integer presentation types specifying this\r\n   value will cause an error.\r\n10) `Type` - determines how the data should be presented.\r\n    1) String types\r\n        * `STRING` - string format. This is the default type for strings and may be omitted.\r\n    2) Integer types\r\n        * `BINARY` - binary format. Outputs the number in base 2.\r\n        * `CHARACTER` - character. Converts the integer to the corresponding unicode character before printing.\r\n        * `DECIMAL` - decimal Integer. Outputs the number in base 10.\r\n        * `OCTAL` - octal format. Outputs the number in base 8.\r\n        * `HEXADECIMAL` - hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.\r\n        * `HEXADECIMAL_UPPER` - hex format. Outputs the number in base 16, using upper-case letters for the digits above\r\n            9. In case ALTERNATE is specified, the prefix '0x' will be upper-cased to '0X' as well\r\n        * `LOCALIZED_NUMBER` - number. This is the same as `DECIMAL`, except that it uses the current locale setting to\r\n          insert the appropriate number separator characters.\r\n    3) Floating point types\r\n        * `EXPONENT` - scientific notation. For a given precision p, formats the number in scientific notation with the\r\n          letter ‘e’ separating the coefficient from the exponent. The coefficient has one digit before and p digits\r\n          after the decimal point, for a total of p + 1 significant digits. With no precision given, uses a precision of\r\n          6 digits after the decimal point for float, and shows all coefficient digits for Decimal. If no digits follow\r\n          the decimal point, the decimal point is also removed unless the ALTERNATE option is used.\r\n        * `EXPONENT_UPPER` - scientific notation. Same as EXPONENT except it uses an upper case ‘E’ as the separator\r\n          character.\r\n        * `FIXED_POINT` - fixed-point notation. For a given Precision p, formats the number as a decimal number with\r\n          exactly p digits following the decimal point. With no precision given, uses a precision of 6 digits after the\r\n          decimal point for float, and uses a precision large enough to show all coefficient digits for Decimal. If no\r\n          digits follow the decimal point, the decimal point is also removed unless the ALTERNATE option is used.\r\n        * `FIXED_POINT_UPPER` - fixed-point notation. Same as FIXED_POINT, but converts `nan` to `NAN` and `inf`\r\n          to `INF`.\r\n        * `GENERAL` - general format. For a given precision p >= 1, this rounds the number to p significant digits and\r\n          then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A\r\n          precision of 0 is treated as equivalent to a precision of 1. The precise rules are as follows: suppose that\r\n          the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if m <= exp <\r\n          p, where m is -4 for floats and -6 for Decimals, the number is formatted with presentation type 'f' and\r\n          precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both\r\n          cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if\r\n          there are no remaining digits following it, unless the ALTERNATE option is used. With no precision given, uses\r\n          a precision of 6 significant digits for float. For Decimal, the coefficient of the result is formed from the\r\n          coefficient digits of the value; scientific notation is used for values smaller than 1e-6 in absolute value\r\n          and values where the place value of the least significant digit is larger than 1, and fixed-point notation is\r\n          used otherwise. Positive and negative infinity, positive and negative zero, and nans, are formatted as `inf`\r\n          , `-inf`, `0`, `-0`\r\n          and `nan` respectively, regardless of the precision.\r\n        * `GENERAL_UPPER` - general format. Same as `GENERAL` except switches to `EXPONENT_UPPER` if the number gets too\r\n          large. The representations of infinity and NaN are uppercased, too.\r\n        * `PERCENT` - percentage. Multiplies the number by 100 and displays in `FIXED_POINT` format, followed by a\r\n          percent sign.\r\n\r\n## Usage\r\n#### Installation\r\nFirst, the lib must be installed with pip:\r\n```\r\npip install clear-formatting\r\n```\r\n\r\nThe lib doesn't have any dependencies, so the command above installs only one package.\r\n\r\nImport the `ValueFormatter` class and `formats` module:\r\n\r\n```python\r\nfrom clear_formatting import ValueFormatter, formats\r\n```\r\n\r\n#### The first formatting\r\nTo basically format any value with this library, create a `ValueFormatter` object with a list of formats to be applied \r\nto the value. The formats themselves can be found in the [Formats](#formats) section of documentation above.\r\n\r\nNext, create a formatter object. \r\nThe example formatter below aligns the value to the center of the string with the length of 20, that is filled with\r\ndashes ' - ':\r\n\r\n```python\r\nvf = ValueFormatter(formats.Align.CENTER, formats.Width(20), formats.Fill('-'))\r\n```\r\n\r\nNow the `vf` object can be used to format any values:\r\n\r\n```python\r\n>>> print(vf('its a test'))  # the same as vf.format('its a test')\r\nOut: -----its a test-----\r\n```\r\n\r\n_The formats can be specified in any order and combinations, but duplicating formats is not allowed due to unpredictable\r\nbehaviour. Duplicating formats will raise a FormatDuplicateError._\r\n\r\n#### Changing the notation\r\n\r\nType format class can be used to convert an integer in decimal notation to other notations:\r\n\r\n```python\r\n>>> dec = 31\r\n>>> print(ValueFormatter(formats.Type.BINARY)(dec))\r\nOut: 11111\r\n\r\n>>> print(ValueFormatter(formats.Type.OCTAL)(dec))\r\nOut: 37\r\n\r\n>>> print(ValueFormatter(formats.Type.HEXADECIMAL)(dec))  # HEXADECIMAL_UPPER will return the same value in uppercase\r\nOut: 1f  # 1F for HEXADECIMAL_UPPER\r\n```\r\n\r\n#### More complexity\r\nThere is a more complex example below. Imagine you need to make a fixed-width column of integers, and, moreover, to \r\nplace the sign and the digits at the opposite sides of the column. The code below illustrates the implementation of this\r\ntask:\r\n\r\n```python\r\ncolumn_format = ValueFormatter(formats.Width(15), formats.Sign.ALL, formats.Align.SPLIT_WITH_SIGN)\r\nimport random\r\nfor _ in range(10):\r\n    print(column_format(random.randint(-100, 100)))\r\nOut:\r\n-            40\r\n-            82\r\n+            80\r\n+            18\r\n-            13\r\n-            57\r\n-            11\r\n+             3\r\n-             4\r\n+            70\r\n```\r\n\r\n#### Type conversion\r\nSometimes the value to format is not a string or a number. In that case the regular formatting will cause an \r\nexception:\r\n\r\n```python\r\n>>> vf = ValueFormatter(formats.Width(20), formats.Align.CENTER, formats.Fill('-'))\r\n>>> lst = [1, 2, 3]\r\n>>> print(vf(lst))\r\nOut: \r\nTraceback (most recent call last):\r\n...\r\nTypeError: unsupported format string passed to list.__format__\r\n```\r\nTo prevent this, a conversion option of the `ValueFormatter` and a `Conversion` format class can be used:\r\n\r\n```python\r\n>>> vf = ValueFormatter(formats.Width(20), formats.Align.CENTER, formats.Fill('-'), conversion=formats.Conversion.STR)\r\n>>> lst = [1,2,3]\r\n>>> print(vf(lst))\r\nOut: -----[1, 2, 3]------\r\n```\r\nIn the example above, the formatter converts a list to string with `str()` function - this is what `Conversion.STR` \r\nstands for.\r\n\r\nOther conversions supported:\r\n* `Conversion.REPR` - uses `repr()` function instead;\r\n* `Conversion.ASCII` - uses `ascii()` function instead.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mitryp/clear-formatting/archive/refs/tags/0.9.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MitryP/clear-formatting",
    "keywords": "formatting,string,number,simplify,value-formatting,format,formatter,facade,open-source,string formatting",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clear-formatting",
    "package_url": "https://pypi.org/project/clear-formatting/",
    "platform": null,
    "project_url": "https://pypi.org/project/clear-formatting/",
    "project_urls": {
      "Download": "https://github.com/mitryp/clear-formatting/archive/refs/tags/0.9.3.tar.gz",
      "Homepage": "https://github.com/MitryP/clear-formatting"
    },
    "release_url": "https://pypi.org/project/clear-formatting/0.9.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A module providing a facade for clear formatting values into strings.",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14378738,
  "releases": {
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "112517dcece0a5c1420b3c3c08f8a13f5694b93ca74e5e13f693c92bb63af96c",
          "md5": "17c57463e28e01270bc865e671658586",
          "sha256": "70e428cd2d5b3f45c4240c022faf7ddbe5a7bed8c843781e326bb11e308ac79f"
        },
        "downloads": -1,
        "filename": "clear_formatting-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "17c57463e28e01270bc865e671658586",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16577,
        "upload_time": "2022-03-28T15:44:49",
        "upload_time_iso_8601": "2022-03-28T15:44:49.847632Z",
        "url": "https://files.pythonhosted.org/packages/11/25/17dcece0a5c1420b3c3c08f8a13f5694b93ca74e5e13f693c92bb63af96c/clear_formatting-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "644585f86dc058f5eb66ada506fc930caa6b2a35c259127680285fec3ec0956f",
          "md5": "2f29d7cb38238dc411b44a7a5fee191a",
          "sha256": "425dac2f48d4b36a05466bae04bf555d70230bb7551f2540978bd76296dcbfda"
        },
        "downloads": -1,
        "filename": "clear_formatting-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2f29d7cb38238dc411b44a7a5fee191a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16698,
        "upload_time": "2022-07-08T19:09:13",
        "upload_time_iso_8601": "2022-07-08T19:09:13.833542Z",
        "url": "https://files.pythonhosted.org/packages/64/45/85f86dc058f5eb66ada506fc930caa6b2a35c259127680285fec3ec0956f/clear_formatting-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "644585f86dc058f5eb66ada506fc930caa6b2a35c259127680285fec3ec0956f",
        "md5": "2f29d7cb38238dc411b44a7a5fee191a",
        "sha256": "425dac2f48d4b36a05466bae04bf555d70230bb7551f2540978bd76296dcbfda"
      },
      "downloads": -1,
      "filename": "clear_formatting-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2f29d7cb38238dc411b44a7a5fee191a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16698,
      "upload_time": "2022-07-08T19:09:13",
      "upload_time_iso_8601": "2022-07-08T19:09:13.833542Z",
      "url": "https://files.pythonhosted.org/packages/64/45/85f86dc058f5eb66ada506fc930caa6b2a35c259127680285fec3ec0956f/clear_formatting-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}