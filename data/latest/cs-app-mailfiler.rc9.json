{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "cs@cskk.id.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Communications :: Email :: Filters"
    ],
    "description": "Mailfiler is my email message filing system.\n\n*Latest release 20200719*:\n* mailfiler: make \"-R rules_pattern\" a global option.\n* Add some Received: headers, improving traceability.\n* More friendly and less noisy terminal output (I run mailfiler as a daemon in a tmux session).\n* Quite a few small internal changes.\n\nIt monitors multiple Maildir folders for new messages\nand files them according to various easy to write rules.\nIts use is described fully in the mailfiler(1cs) manual entry.\n\nThe rules files are broadly quite simple and described fully\nin the mailfiler(5cs) manual entry.\nThe rules are normally single line rules of the form:\n\n    target,... label condition\n\nIf the rule should always fire\nthen the condition may be omitted.\n\nThe targets may be\nmail folders (file the message in the named folder),\nassignment statements (set an environment variable),\nemail addresses (send the message to the specified address)\nor some other special purpose actions.\n\nThe conditions are usually tests of the header email addresses\nincluding whether an address is a member of some group/alias\nbut may also test various other things about the message headers.\n\n## Class `Condition_AddressMatch(_Condition,types.SimpleNamespace)`\n\nA condition testing for the presence of an address.\n\n### Method `Condition_AddressMatch.test_value(self, filer, header_name, header_value)`\n\nTest this condition against a header value.\n\n## Class `Condition_HeaderFunction(_Condition,types.SimpleNamespace)`\n\nA condition testing the contents of a header.\n\n### Method `Condition_HeaderFunction.test_func_contains(self, filer, header_name, header_value)`\n\nTest if the rule's string is in the header.\n\n### Method `Condition_HeaderFunction.test_value(self, filer, header_name, header_value)`\n\nTest the header value against to test function.\n\n## Class `Condition_InGroups(_Condition,types.SimpleNamespace)`\n\nA condition testing messages addresses against address groups.\n\n### Method `Condition_InGroups.test_value(self, filer, header_name, header_value)`\n\nTest this condition against a header value.\n\n## Class `Condition_Regexp(_Condition,types.SimpleNamespace)`\n\nA condition testing headers against a regular expression.\n\n### Method `Condition_Regexp.test_value(self, filer, header_name, header_value)`\n\nTest this condition against a header value.\n\n## Function `current_value(envvar, cfg, cfg_key, default, environ)`\n\nCompute a configurable path value on the fly.\n\n## Function `FilterReport(rule, matched, saved_to, ok_actions, failed_actions)`\n\nCreate a FilterReport object.\n\nParameters:\n* `rule`: the `Rule` on which to report\n* `matched`: whether the rule was matched\n* `saved_to`: where messages were filed\n* `ok_actions`: actions which succeeded\n* `failed_actions`: actions which failed\n\n## Function `get_target(s, offset, quoted=False)`\n\nParse a single target specification from a string; return Target and new offset.\n\nParameters:\n* `s`: the string to parse\n* `offset`: the starting offset of the parse\n* `quoted`: if true then the parser is already inside quotes:\n  do not expect comma or whitespace to end the target specification.\n  Default: `False`\n\n## Function `get_targets(s, offset)`\n\nParse list of targets from the string `s` starting at `offset`.\nReturn the list of Targets strings and the new offset.\n\n## Function `maildir_from_name(mdirname, maildir_root, maildir_cache)`\n\nReturn the Maildir derived from mdirpath.\n\n## Class `MailFiler(types.SimpleNamespace)`\n\nA mail filer.\n\n### Method `MailFiler.__init__(self, config_path=None, environ=None, rules_pattern=None)`\n\nInitialise the MailFiler.\n\nParameters:\n* `config_path`: location of config file, default from `DEFAULT_MAILFILER_RC`.\n* `environ`: initial environment, default from `os.environ`.\n* `rules_pattern`: rules pattenr, default from `envsub(DEFAULT_RULES_PATTERN)`\n\n### Method `MailFiler.file_wmdir_key(self, wmdir, key)`\n\nAccept a WatchedMaildir `wmdir` and a message `key`, return success.\nThis does not remove a successfully filed message or update the lurking list.\n\n### Method `MailFiler.folder_logfile(self, folder_path)`\n\nReturn path to log file associated with the named folder.\nTODO: base on relative path from folder root, not just basename.\n\n### Method `MailFiler.maildir_from_folderspec(self, folderspec)`\n\nReturn the Maildir from `folderspec`.\n\n### Method `MailFiler.maildir_watcher(self, folderspec)`\n\nReturn the singleton WatchedMaildir indicated by the `folderspec`.\n\n### Method `MailFiler.monitor(self, folders, *, delay=None, justone=False, no_remove=False, upd=None)`\n\nMonitor the specified `folders`, a list of folder spcifications.\nIf `delay` is not None, poll the folders repeatedly with a\ndelay of `delay` seconds between each pass.\n\n### Method `MailFiler.report(msgfp)`\n\nImplementation for command line \"report\" function: report on message.\n\n### Method `MailFiler.save(self, targets, msgfp)`\n\nImplementation for command line \"save\" function: save file to target.\n\n### Method `MailFiler.subcfg(self, section_name)`\n\nReturn a section of the configuration.\n\n### Method `MailFiler.sweep(self, wmdir, *, justone=False, no_remove=False, logfile=None, upd=None)`\n\nScan a WatchedMaildir for messages to filter.\nReturn the number of messages processed.\n\nUpdate the set of lurkers with any keys not removed to prevent\nfiltering on subsequent calls.\nIf `justone`, return after filing the first message.\n\n## Class `MailFilerCommand(cs.cmdutils.BaseCommand)`\n\nMailFiler commandline implementation.\n\n\nCommand line usage:\n\n    Usage: MailFilerCommand [-R rules_pattern] subopt [subopt-args...]\n          -R rules_pattern\n              Specify the rules file pattern used to specify rules files from\n              Maildir names.\n              Default: $HOME/.mailfiler/{maildir.basename}\n      Subcommands:\n        help [subcommand-names...]\n          Print the help for the named subcommands,\n          or for all subcommands if no names are specified.\n        monitor [-1] [-d delay] [-n] [maildirs...]\n          Monitor Maildirs for new messages and file them.\n          -1  File at most 1 message per Maildir.\n          -d delay\n              Delay between runs in seconds.\n              Default is to make only one run over the Maildirs.\n          -n  No remove. Keep filed messages in the origin Maildir.\n        report <message\n          Report various things about a message from standard input.\n        save target[,target...] <message\n          Save a message from standard input to the specified targets.\n\n### Method `MailFilerCommand.apply_defaults(options)`\n\nSet up default options.\n\n### Method `MailFilerCommand.apply_opts(opts, options)`\n\nApply command line options.\n\n### Method `MailFilerCommand.cmd_monitor(self, argv, options)`\n\nUsage: {cmd} [-1] [-d delay] [-n] [maildirs...]\nMonitor Maildirs for new messages and file them.\n-1  File at most 1 message per Maildir.\n-d delay\n    Delay between runs in seconds.\n    Default is to make only one run over the Maildirs.\n-n  No remove. Keep filed messages in the origin Maildir.\n\n### Method `MailFilerCommand.cmd_report(self, argv, options)`\n\nUsage: {cmd} <message\nReport various things about a message from standard input.\n\n### Method `MailFilerCommand.cmd_save(self, argv, options)`\n\nUsage: {cmd} target[,target...] <message\n  Save a message from standard input to the specified targets.\n\nSave message to the `targets`,\na single command line argument of the form\nof a mailfiler targets field.\n\n### Method `MailFilerCommand.mailfiler(self, options)`\n\nPrepare a `MailFiler` from the `options`.\n\n### Method `MailFilerCommand.run_context(self, argv, options)`\n\nRun commands at STATUS logging level (or lower if already lower).\n\n## Function `main(argv=None, stdin=None)`\n\nMailfiler main programme.\n\n## Class `MessageFiler(types.SimpleNamespace)`\n\nA message filing object, filtering state information used during rule evaluation.\n\nAttributes:\n* `.maildb`: Current MailDB.\n* `.environ`: Storage for variable settings.\n* `.addresses(header)`: Caching list of addresses from specified header.\n\n### Method `MessageFiler.__init__(self, context, environ=None)`\n\n`context`: External state object, with maildb property, etc..\n`environ`: Mapping which supplies initial variable names.\n           Default from os.environ.\n\n### Method `MessageFiler.addresses(self, *headers)`\n\nReturn the core addresses from the current Message and supplied\n`headers`. Caches results for rapid rule evaluation.\n\n### Method `MessageFiler.alert(self, alert_level, alert_message=None)`\n\nIssue an alert with the specified `alert_message`.\nIf missing or None, use self.alert_message(self.message).\nIf `alert_level` is more than 1, prepend \"-l alert_level\"\nto the alert command line arguments.\n\n### Method `MessageFiler.alert_message(self, M)`\n\nReturn the alert message filled out with parameters from the Message `M`.\n\n### Method `MessageFiler.apply_rule(self, R)`\n\nApply this the rule `R` to this MessageFiler.\nThe rule label, if any, is appended to the .labels attribute.\nEach target is applied to the state.\n\n### Method `MessageFiler.env(self, envvar, default)`\n\nShorthand for environment lookup.\n\n### Method `MessageFiler.file(self, M, rules, message_path=None)`\n\nFile the specified message `M` according to the supplied `rules`.\nIf specified and not `None`, the `message_path` parameter\nspecifies the filename of the message, supporting hard linking\nthe message into a Maildir.\n\n### Method `MessageFiler.format_message(self, M, fmt)`\n\nCompute the alert message for the message `M` using the supplied format string `fmt`.\n\n### Method `MessageFiler.group(self, group_name)`\n\nReturn the set of addresses in the named group.\n\n### Method `MessageFiler.learn_header_addresses(self, header_names, *group_names)`\n\nUpdate maildb groups with addresses from message headers.\nExtract all the addresses from the specified\nheaders and add to the maildb groups named by `group_names`.\n\n### Method `MessageFiler.learn_message_ids(self, header_names, *group_names)`\n\nUpdate msgiddb groups with message-ids from message headers.\n\n### Method `MessageFiler.maildir(self, mdirpath)`\n\nReturn the Maildir for `mdirpath`.\n\n### Method `MessageFiler.modify(self, hdr, new_value, always=False)`\n\nModify the value of the named header `hdr`\nto the new value `new_value` using cs.mailutils.modify_header.\n`new_value` may be a string or an iterable of strings.\nIf headers were changed, forget self.message_path.\n\n### Method `MessageFiler.process_environ(self)`\n\nCompute the environment for a subprocess.\n\n### Method `MessageFiler.resolve(self, foldername)`\n\nResolve a mail `foldername` against the filer's `MAILDIR` attribute.\n\n### Method `MessageFiler.save_message(self)`\n\nPerform the message save step based on the current filer state.\nThis is separated out to support the command line \"save target\" operation.\n\n### Method `MessageFiler.save_to_pipe(self, argv, environ=None, mfp=None)`\n\nPipe a message to the command specific by `argv`.\n`mfp` is a file containing the message text.\nIf `mfp` is None, use the text of the current message.\n\n### Method `MessageFiler.sendmail(self, address, mfp=None, sender=None)`\n\nDispatch a message to `address`.\n`mfp` is a file containing the message text.\nIf `mfp` is None, use the text of the current message.\nIf `sender` is supplied, pass to sendmail with -f option.\n\n## Function `parserules(fp)`\n\nRead rules from `fp`, yield Rules.\n\n## Function `resolve_mail_path(mdirpath, maildir_root)`\n\nReturn the full path to the requested mail folder.\n\n## Class `Rule`\n\nA filing rule.\n\n### Method `Rule.match(self, filer)`\n\nTest the message in filer against this rule.\n\n## Class `Rules(builtins.list)`\n\nSimple subclass of list storing rules, with methods to load\nrules and filter a message using the rules.\n\n### Method `Rules.load(self, fp)`\n\nImport an open rule file.\n\n### Method `Rules.match(self, filer)`\n\nMatch the current message (filer.message) against the rules.\nUpdate filer for matching rules.\n\n## Function `save_to_folderpath(folderpath, M, message_path, flags)`\n\nSave the Message `M` to the resolved `folderpath`.\n\nParameters:\n* `folderpath`: the path to the target mail folder.\n* `M`: the message to save.\n* `message_path`: pathname of existing message file, allowing\n  hardlinking to new maildir if not `None`.\n* `flags`: save flags as from MessageFiler.flags\n\n## Function `scrub_header(value)`\n\n\"Scrub\" a header value.\nPresently this means to undo RFC2047 encoding where possible.\n\n## Class `Target_Assign(types.SimpleNamespace)`\n\nA filing target to set a filing state environment variable.\n\n### Method `Target_Assign.apply(self, filer)`\n\nApply the target by updating the filer environment.\n\n## Class `Target_EnvSub(types.SimpleNamespace)`\n\nA filing target to delivery to a string\nwhich is subject to environment subject to environment variable expansion\nwhere the environment variables are derived from the filing state.\n\n### Method `Target_EnvSub.apply(self, filer)`\n\nPerform environment substitution on target string and then\ndeliver to resulting string.\n\n## Class `Target_Function(types.SimpleNamespace)`\n\nA filing target to run a Python function against a message.\n\n### Method `Target_Function.apply(self, filer)`\n\nApply this target:\nrun the Python function against the message.\n\n## Class `Target_MailAddress(types.SimpleNamespace)`\n\nA filing target for an email address.\n\n### Method `Target_MailAddress.apply(self, filer)`\n\nApply this target:\nadd `self.address` to the set of target forwarding email addresses.\n\n## Class `Target_MailFolder(types.SimpleNamespace)`\n\nA filing target for a mail folder.\n\n### Method `Target_MailFolder.apply(self, filer)`\n\nApply this target:\nif the folder name is '.'\nmark the filer as saving to the source folder,\notherwise add the resolved folder name to the set of target folders.\n\n## Class `Target_PipeLine(types.SimpleNamespace)`\n\nA filing target to pipe the message contents to a shell command.\n\n### Method `Target_PipeLine.apply(self, filer)`\n\nApply this target:\nappend `self.shcmd` to the list of save commands.\n\n## Class `Target_SetFlag(types.SimpleNamespace)`\n\nA filing target to apply a flag to a message.\n\n### Method `Target_SetFlag.apply(self, filer)`\n\nApply this target:\nset a flag on the message.\n\n## Class `Target_Substitution(types.SimpleNamespace)`\n\nA filing target to apply a regular expression string substitution\nto message headers.\n\n### Method `Target_Substitution.apply(self, filer)`\n\nApply this target:\napply a regexp substitution to the message headers.\n\n## Class `WatchedMaildir(types.SimpleNamespace)`\n\nA class to monitor a Maildir and filter messages.\n\n### Method `WatchedMaildir.close(self)`\n\nClose the WatchedMaildir.\n\n### Method `WatchedMaildir.flush(self)`\n\nForget state.\nThe set of lurkers is emptied.\n\n### Method `WatchedMaildir.keypath(self, key)`\n\nReturn the kypath for `key`.\n\n### Method `WatchedMaildir.keys(self, flush=False)`\n\nReturn the keys of the Maildir.\n\n### Method `WatchedMaildir.lurk(self, key)`\n\nAdd `key` to the luking list.\n\n### Method `WatchedMaildir.remove(self, key)`\n\nRemove `key` from the maildir.\n\n### Method `WatchedMaildir.unlurk(self, key)`\n\nRemove `key` from the lurking list.\n\n# Release Log\n\n\n\n*Release 20200719*:\n* mailfiler: make \"-R rules_pattern\" a global option.\n* Add some Received: headers, improving traceability.\n* More friendly and less noisy terminal output (I run mailfiler as a daemon in a tmux session).\n* Quite a few small internal changes.\n\n*Release 20191006*:\nUpdate for recent cs.deco.cachedmethod rename.\n\n*Release 20190512*:\n* Promote $DEFAULT to a list of targets.\n* Implement save-to-self \".\" target to support folders where filing elsewhere is an exception.\n* Move the manual entries to Markdown format.\n\n*Release 20190103.1*:\nDISTINFO fix.\n\n*Release 20190103*:\nVarious fixes. Documentation improvements.\n\n*Release 20160828*:\n* Update metadata with \"install_requires\" instead of \"requires\".\n* A few bugfixes.\n\n*Release 20160403*:\nBug fix for new $ALERT_TARGETS feature.\n\n*Release 20160402*:\n* Make rule processing more robust in the face of errors in individual targets.\n* Add \"report\" operation for debugging rules against a test message.\n* Add \"function\" targets.\n* Make header values available for use in substitution rules.\n* Allow local@domain and @domain inside (...|...) group matches.\n* Honour new $ALERT_TARGETS variable for addition targets implied by issues an alert for a message.\n\n*Release 20150805*:\n* better handling of configuration errors\n* substitution actions accept multiple header names\n* initial \"scrub\" action\n* fiddle headers of resent messages to avoid blowback to original authors\n\n*Release 20150118.6*:\nfurther README updates\n\n*Release 20150118.5*:\nmore README formatting\n\n*Release 20150118.4*:\nmore README fixes\n\n*Release 20150118.3*:\ncs.app.mailfiler README fixes\n\n*Release 20150118.2*:\ndoc updates\n\n*Release 20150118*:\nInitial PyPI release.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python2,python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.app.mailfiler",
    "package_url": "https://pypi.org/project/cs.app.mailfiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/cs.app.mailfiler/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.app.mailfiler/20200719/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "email message filing system which monitors multiple inbound Maildir folders",
    "version": "20200719",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7731256,
  "releases": {
    "20150118.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4370ffbfe6884776cde85b49ca01226e63f452067c86a92e292e71dafffc82aa",
          "md5": "f2ae1dff4ff16920af35b946da587bd2",
          "sha256": "1e83208fb298a3f8b5df379ce1f8a45f21596e3cafce74a91cb79d88a06cfbf1"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20150118.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f2ae1dff4ff16920af35b946da587bd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17987,
        "upload_time": "2015-01-18T06:29:05",
        "upload_time_iso_8601": "2015-01-18T06:29:05.982268Z",
        "url": "https://files.pythonhosted.org/packages/43/70/ffbfe6884776cde85b49ca01226e63f452067c86a92e292e71dafffc82aa/cs.app.mailfiler-20150118.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20150805": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdad5ae7905b71670a98cc0da0a2f050926c83ec3aa038ce23d911295679bb44",
          "md5": "967d5ad06b57ac2af7f0295eed4949ff",
          "sha256": "7ec0ab1c2a6413e5acaa4673a5d4d73442f57a405070278f0e136ea979fb6473"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20150805.tar.gz",
        "has_sig": false,
        "md5_digest": "967d5ad06b57ac2af7f0295eed4949ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19173,
        "upload_time": "2015-08-05T00:33:31",
        "upload_time_iso_8601": "2015-08-05T00:33:31.209118Z",
        "url": "https://files.pythonhosted.org/packages/bd/ad/5ae7905b71670a98cc0da0a2f050926c83ec3aa038ce23d911295679bb44/cs.app.mailfiler-20150805.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20160402": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916d2f3fbbf6da152e6710a75be15281ab0fe1f0be292546ceaee401d7b5d66b",
          "md5": "4c05d23f7153aba73085ba0f9c26cd62",
          "sha256": "3a4a06ac740f73390313c6469de36afb05c7aa5b5c2e4da26dd6832c40867d63"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20160402.tar.gz",
        "has_sig": false,
        "md5_digest": "4c05d23f7153aba73085ba0f9c26cd62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19430,
        "upload_time": "2016-04-02T03:12:34",
        "upload_time_iso_8601": "2016-04-02T03:12:34.914890Z",
        "url": "https://files.pythonhosted.org/packages/91/6d/2f3fbbf6da152e6710a75be15281ab0fe1f0be292546ceaee401d7b5d66b/cs.app.mailfiler-20160402.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20160403": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43375b4409137c36971da4731d6bddceb108408ed91166e84678bdd598ac8d24",
          "md5": "dca926b37768b7e4883827e1f0566333",
          "sha256": "383a92514de6223cb1fe6509bbe9ce170c2b25bc5d3309059d34ecf9dd0790f9"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20160403.tar.gz",
        "has_sig": false,
        "md5_digest": "dca926b37768b7e4883827e1f0566333",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19461,
        "upload_time": "2016-04-02T22:55:10",
        "upload_time_iso_8601": "2016-04-02T22:55:10.680423Z",
        "url": "https://files.pythonhosted.org/packages/43/37/5b4409137c36971da4731d6bddceb108408ed91166e84678bdd598ac8d24/cs.app.mailfiler-20160403.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20160828": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45235153811610a0e304e06d01a91c7e3efbce1bf82adca60b1b8279608195b1",
          "md5": "c4273133acb9e442e49fddf3b7db9942",
          "sha256": "4f4c37dc5f918977e57f210c8ab14f7d683a2c392ff0549c47dc94555e08c94f"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20160828.tar.gz",
        "has_sig": false,
        "md5_digest": "c4273133acb9e442e49fddf3b7db9942",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20092,
        "upload_time": "2016-08-28T06:03:10",
        "upload_time_iso_8601": "2016-08-28T06:03:10.867272Z",
        "url": "https://files.pythonhosted.org/packages/45/23/5153811610a0e304e06d01a91c7e3efbce1bf82adca60b1b8279608195b1/cs.app.mailfiler-20160828.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190103.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "247f67c46a8e483cb2f7d92914f89d2b07803d2c7ced6af1556721fc1cd81453",
          "md5": "282d4af8ab62783f6886e977c7e3eb09",
          "sha256": "801d7de798ae8c1c3c5fcff5cfa2de0f4355efdfe91cfa7dcd4c5bee7802eee4"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20190103.1.tar.gz",
        "has_sig": false,
        "md5_digest": "282d4af8ab62783f6886e977c7e3eb09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20061,
        "upload_time": "2019-01-03T02:31:08",
        "upload_time_iso_8601": "2019-01-03T02:31:08.421664Z",
        "url": "https://files.pythonhosted.org/packages/24/7f/67c46a8e483cb2f7d92914f89d2b07803d2c7ced6af1556721fc1cd81453/cs.app.mailfiler-20190103.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190512": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b6bd4b32fd32796049cd7c0ffe5cb36fe5eff7ab186c2d31444fd9759d2d6ed",
          "md5": "6c380603b9933ade3f9656e590b654b2",
          "sha256": "2eb7545d5905fe6eb8f58f8a5662497118d0b9e9abf4778bcc1a0864a12393ac"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20190512.tar.gz",
        "has_sig": false,
        "md5_digest": "6c380603b9933ade3f9656e590b654b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22319,
        "upload_time": "2019-05-12T11:01:26",
        "upload_time_iso_8601": "2019-05-12T11:01:26.077354Z",
        "url": "https://files.pythonhosted.org/packages/6b/6b/d4b32fd32796049cd7c0ffe5cb36fe5eff7ab186c2d31444fd9759d2d6ed/cs.app.mailfiler-20190512.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191006": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6528615c8a8f8d62e5acfcb9ab0cb7c67409f27c066889adc406d86f5c4baa44",
          "md5": "abd5adc2ac973f8700a73d6f309fe60e",
          "sha256": "b36e939fdda7921aeb351958240d3f62b6664002b18b8ad4febfae4ed46b4646"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20191006.tar.gz",
        "has_sig": false,
        "md5_digest": "abd5adc2ac973f8700a73d6f309fe60e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24138,
        "upload_time": "2019-10-06T03:11:25",
        "upload_time_iso_8601": "2019-10-06T03:11:25.546981Z",
        "url": "https://files.pythonhosted.org/packages/65/28/615c8a8f8d62e5acfcb9ab0cb7c67409f27c066889adc406d86f5c4baa44/cs.app.mailfiler-20191006.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200719": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac043eddb93769aa571a1fd86125e5772d4605bc9232c01e9147e68aa6e214ef",
          "md5": "6d372eb228996258974b5b062c94876b",
          "sha256": "b1748e1f4c37cc76def864f9ffa0143697e0ffc9eba74df5b75a87705e30831a"
        },
        "downloads": -1,
        "filename": "cs.app.mailfiler-20200719.tar.gz",
        "has_sig": false,
        "md5_digest": "6d372eb228996258974b5b062c94876b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42757,
        "upload_time": "2020-07-19T00:25:59",
        "upload_time_iso_8601": "2020-07-19T00:25:59.439399Z",
        "url": "https://files.pythonhosted.org/packages/ac/04/3eddb93769aa571a1fd86125e5772d4605bc9232c01e9147e68aa6e214ef/cs.app.mailfiler-20200719.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac043eddb93769aa571a1fd86125e5772d4605bc9232c01e9147e68aa6e214ef",
        "md5": "6d372eb228996258974b5b062c94876b",
        "sha256": "b1748e1f4c37cc76def864f9ffa0143697e0ffc9eba74df5b75a87705e30831a"
      },
      "downloads": -1,
      "filename": "cs.app.mailfiler-20200719.tar.gz",
      "has_sig": false,
      "md5_digest": "6d372eb228996258974b5b062c94876b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42757,
      "upload_time": "2020-07-19T00:25:59",
      "upload_time_iso_8601": "2020-07-19T00:25:59.439399Z",
      "url": "https://files.pythonhosted.org/packages/ac/04/3eddb93769aa571a1fd86125e5772d4605bc9232c01e9147e68aa6e214ef/cs.app.mailfiler-20200719.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}