{
  "info": {
    "author": "AaylaSecura1138",
    "author_email": "aayla.secura.1138@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# eMail Requestor and Processor\n\n# OVERVIEW\n\nThe general intention for this package is to automate searching and extracting text from emails and take actions using found values.\n\nCurrently there is support for searching in Gmail and sending HTTP requests prior or following email search. HTTP responses can also be searched and text found in either emails or responses can be dynamically substituted in subsequent HTTP requests.\n\nThe general flow looks like this:\n\n1. Send the specified pre-search requests and extract values from the responses matching the given regular expressions\n2. Search for emails matching the given query\n3. Send the specified post-search requests and extract values from the responses matching the given regular expressions. Named placeholders in those requests are replaced with whatever has matched in emails or responses to pre-search requests.\n4. Repeat: go back to 1. but now named placeholders in the pre-search requests are replaced with whatever has matched in emails or responses to post-search requests from the previous run.\n\nAn example usage is a password reset where you send a request to get a password reset, fetch the email and extract the reset code, send another request with the code in it.\n\n# SETUP\n\n# Installation\n\n`pip3 install emrap`\n\n# Creating an OAuth client\n\nThis package uses the Gmail OAuth2 API and requires credentials for an OAuth client, which you can create in the Google dev console (no GSuite needed). Then you need to authorize the app to access the emails of the target account (which can be any Google account, not just the one that owns the client credentials). Follow these steps:\n\n1. Go to https://console.developers.google.com/apis/ and create a project.\n\n\n2. Go to https://console.developers.google.com/apis/credentials/consent and configure your app. Select the project if not selected, then choose between Internal or External app. Enter your app name and click on Save and continue several times until you finish that wizard and then Back to Dashboard.\n\n\n3. Go to https://console.developers.google.com/apis/credentials and create credentials of type OAuth client ID. Select Desktop App as the Application Type and name it.\n\n\n4. Click on the download button to download your credentials JSON file (does not work in Firefox). Rename it to credentials.json and put it in the same directory as the python client.\n\n\n5. Go to https://console.developers.google.com/apis/library/gmail.googleapis.com?q=gmail api and enable to Gmail API.\n\n\n6. Start the client which will open the OAuth consent screen in the browser. Follow the prompts to allow it, ignoring the warning it's unverified (you'll need to [get it verified](https://support.google.com/cloud/answer/9110914?hl=en) if you want to use it for non-testing purposes). You'll only need to authorise this once.\n\n\n# USAGE\n\nImport `actions.HttpAutomator` and `run` it. See the demos for examples.\n\n    usage: demo.py --creds-file CREDS_FILE [--token-file TOKEN_FILE]\n                   [--query QUERY]\n                   [--latest | --earliest | --range MIN MAX MIN MAX]\n                   [--extracts directive:value [directive:value ...]\n                   [directive:value [directive:value ...] ...]]\n                   [--mime-type MIME_TYPE]\n                   [--pre-search PRE_SEARCH [PRE_SEARCH ...] | --pre-search-async\n                   PRE_SEARCH_ASYNC [PRE_SEARCH_ASYNC ...]]\n                   [--post-search POST_SEARCH [POST_SEARCH ...] |\n                   --post-search-async POST_SEARCH_ASYNC [POST_SEARCH_ASYNC ...]]\n                   [--origin ORIGIN | --is-ssl IS_SSL] [--max-threads MAX_THREADS]\n                   [--timeout TIMEOUT] [--min-wait MIN_WAIT] [--max-wait MAX_WAIT]\n                   [--success-codes 2XX 3XX [2XX 3XX ...] | --fail-codes 4XX 5XX\n                   [4XX 5XX ...]] [--retry [N]] [--no-verify] [--no-redirect]\n                   [--proxy PROXY | --raw-socket] [--output OUTPUT]\n                   [--repeat REPEAT] [--cache-file CACHE_FILE] [--verbose]\n                   [--help]\n\n    HTTP request automator with email search capability. An automation app to send\n    HTTP requests which may generate an email, search in gmail and extract value,\n    then optionally send more requests. Good for automarting password resets for\n    example. It can be used just to search in emails. Supports dynamic text\n    substitution with values extracted from previous responses or emails.\n\n    Options related to authentication:\n      --creds-file CREDS_FILE, -c CREDS_FILE\n                            JSON file containing OAuth client credentials\n                            (default: None)\n      --token-file TOKEN_FILE, -t TOKEN_FILE\n                            Previously saved token pickle file containing user\n                            access token. If it doesn't exist it is created.\n                            (default: None)\n\n    Options related to filtering emails:\n      --query QUERY, -q QUERY\n                            Search query to filter emails. See\n                            https://support.google.com/mail/answer/7190?hl=en.\n                            (default: None)\n      --latest, -l          Take only the latest email that matches. (default:\n                            None)\n      --earliest, -e        Take only the earliest email that matches. (default:\n                            None)\n      --range MIN MAX MIN MAX, -r MIN MAX MIN MAX\n                            Take only emails number MIN to MAX (including) when\n                            sorted in descending order by time. (default: None)\n\n    Options related to extracting text from responses or\n                email:\n      --extracts directive:value [directive:value ...] [directive:value [directive:value ...] ...], -E directive:value [directive:value ...] [directive:value [directive:value ...] ...]\n                            This specifies how and where to search for and extract\n                            text and gives a name each extracted set of values\n                            that can be used to substitute in HTTP requests. The\n                            flag is given once per substitution definition and can\n                            be given as many times as needed. It takes one or more\n                            of the following directives (each as a separate\n                            argument). There should not be a space around either\n                            side of the colon unless intended, e.g. if the\n                            'default' directive value should contain leading\n                            spaces.\n                                name:{unique name} HTTP requests can then use\n                                    '{%name%}' which will be substituted by\n                                    whatever matched name. By default the first\n                                    match is taken, specify another one by\n                            appending\n                                    _N, e.g. '{%name_2%}' for the second one.\n                                    The results table will list all matches along\n                                    with the name regardless if any HTTP requests\n                                    were supplied.\n                                stages:pre|fetch|post fetch matches in emails and\n                                    pre|post in pre- or post- email search. If not\n                                    given, then all three stages are searched.\n                                where:to_address,from_address,subject,raw_headers,\n                            body,content,time\n                                    Any of these can be given. to/from_address,\n                                    subject and body apply to emails, raw_headers\n                                    and content to HTTP responses, time applies to\n                                    both. Defaults to search headers/subject and\n                                    body/content.\n                                regex:{arbitrary regex} Emails (stage fetch) are\n                                    searched in descending order of time and\n                                    requests (stages pre and post) are searched in\n                                    order they were received.\n                                regex_group:{number} Default is to take the whole\n                                    match.\n                                regex_flags:{flags} One letter per flag, e.g. IM\n                            for\n                                    case Insensitive and Multiline (see doc on\n                                    python.re).\n                                default:{arbitrary text} Text to use if regex\n                                    doesn't match. Default is empty. (default:\n                            None)\n      --mime-type MIME_TYPE, -M MIME_TYPE\n                            Preferred MIME type to search in. Only applies to\n                            searching in multipart emails. (default: text/plain)\n\n    Options related to sending requests. HTTP requests are\n                read from text files as raw HTTP requests. Dynamic\n                replacements are supported.:\n      --pre-search PRE_SEARCH [PRE_SEARCH ...], -b PRE_SEARCH [PRE_SEARCH ...]\n                            List of files to send as HTTP requests before email\n                            search. Requests will be sent synchronously, one after\n                            the other. (default: None)\n      --pre-search-async PRE_SEARCH_ASYNC [PRE_SEARCH_ASYNC ...], -B PRE_SEARCH_ASYNC [PRE_SEARCH_ASYNC ...]\n                            List of files to send as HTTP requests before email\n                            search. Requests will be sent by concurrent threads.\n                            (default: None)\n      --post-search POST_SEARCH [POST_SEARCH ...], -a POST_SEARCH [POST_SEARCH ...]\n                            List of files to send as HTTP requests after email\n                            search. Executed for each email that matched the\n                            search. Requests will be sent synchronously, one after\n                            the other. (default: None)\n      --post-search-async POST_SEARCH_ASYNC [POST_SEARCH_ASYNC ...], -A POST_SEARCH_ASYNC [POST_SEARCH_ASYNC ...]\n                            List of files to send as HTTP requests after email\n                            search. Executed for each email that matched the\n                            search. Requests will be sent by concurrent threads.\n                            (default: None)\n      --origin ORIGIN, -O ORIGIN\n                            Specify origin as {protocol}://{host}[:{port}]. This\n                            overrides the Host header for all requests. (default:\n                            None)\n      --is-ssl IS_SSL       Use SSL. This overrides guessing from the port number\n                            in the Host header for all requests. If no port is\n                            present in the Host header, it defaults to HTTP on\n                            port 80. (default: None)\n      --max-threads MAX_THREADS\n                            Maximum number of threads to start in async mode.\n                            (default: 5)\n      --timeout TIMEOUT, -T TIMEOUT\n                            Timeout in seconds for response (default: None)\n      --min-wait MIN_WAIT, -w MIN_WAIT\n                            Min seconds to wait before sending next request.\n                            (default: 0)\n      --max-wait MAX_WAIT, -W MAX_WAIT\n                            Max seconds to wait before sending next request.\n                            (default: 0)\n      --success-codes 2XX 3XX [2XX 3XX ...]\n                            List of codes considered a success. X matches any\n                            digit. (default: ['2XX'])\n      --fail-codes 4XX 5XX [4XX 5XX ...]\n                            List of codes considered a failure. X matches any\n                            digit. (default: None)\n      --retry [N], -R [N]   Retry N times on failed response. N defaults to 1 if\n                            omitted. (default: 0)\n      --no-verify           Do not verify SSL certificate and ignore warnings.\n                            (default: True)\n      --no-redirect         Do not follow redirections. (default: True)\n      --proxy PROXY, -x PROXY\n                            HTTP proxy to use in the format of {hostname}:{port}.\n                            (default: None)\n      --raw-socket, -S      Send the request content over a raw IPv4 socket.\n                            Default is to use python's requests package which may\n                            add some headers as well as change Content-Length.\n                            Using a proxy, following redirections and SSL\n                            verification is not supported when using raw sockets.\n                            (default: False)\n      --repeat REPEAT, -n REPEAT\n                            How many times to repeat each\n                            [request->]search[->request cycle]. Extracted text\n                            from previous cycles is available for substitution.\n                            (default: 1)\n\n    Options related to displaying output:\n      --output OUTPUT, -o OUTPUT\n                            Text file to print summary table to. '-' means\n                            standard output. (default: None)\n\n    Global options :\n      --cache-file CACHE_FILE, -C CACHE_FILE\n                            Previously saved cache to restore from. If it doesn't\n                            exist it is created. (default: None)\n      --verbose, -v         Be verbose. Can be given multiple times to increase\n                            verbosity. Twice is for debugging, three times is to\n                            flood your screen with virtually useless information.\n                            (default: None)\n      --help, -h            Show this help message and exit.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aayla-secura/eMRaP",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "emrap",
    "package_url": "https://pypi.org/project/emrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/emrap/",
    "project_urls": {
      "Homepage": "https://github.com/aayla-secura/eMRaP"
    },
    "release_url": "https://pypi.org/project/emrap/1.0.1/",
    "requires_dist": [
      "google-api-python-client",
      "google-auth-httplib2",
      "google-auth-oauthlib",
      "http-parser",
      "requests",
      "colorlog"
    ],
    "requires_python": "",
    "summary": "eMail Requestor and Processor",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8966209,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3f6eb6d1d0e853f504b9ab732f7a781af7b5a469d6471d68d390417b64b90c5",
          "md5": "2ed935853d73c0650748f78ca647646b",
          "sha256": "4f1bb4a70b5ec6b8d78038dbea49fa08e00d275e05635e289f83ed728ce428da"
        },
        "downloads": -1,
        "filename": "emrap-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ed935853d73c0650748f78ca647646b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29359,
        "upload_time": "2020-12-08T00:44:19",
        "upload_time_iso_8601": "2020-12-08T00:44:19.270402Z",
        "url": "https://files.pythonhosted.org/packages/a3/f6/eb6d1d0e853f504b9ab732f7a781af7b5a469d6471d68d390417b64b90c5/emrap-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a152b98f086acc6cf8909fa98c5febf02884000122030ca180ee7226f4afe86",
          "md5": "b419070e73d327a00b40d077c5853f2f",
          "sha256": "fa03b19842c60f83304bf56cf542d0898fd25943415626dea17d7055b69be096"
        },
        "downloads": -1,
        "filename": "emrap-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b419070e73d327a00b40d077c5853f2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28677,
        "upload_time": "2020-12-08T00:44:20",
        "upload_time_iso_8601": "2020-12-08T00:44:20.840217Z",
        "url": "https://files.pythonhosted.org/packages/5a/15/2b98f086acc6cf8909fa98c5febf02884000122030ca180ee7226f4afe86/emrap-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f48a0801e66e27038c2f68dbb5a3a25a93524693436356554792acc750472e1",
          "md5": "6915d27aa4d27fd100dee9bdd2ef3c67",
          "sha256": "1d38f2d6221266c50b4a5ffb9a5e4854d825cf84c29e370f32eb7a256eb8c561"
        },
        "downloads": -1,
        "filename": "emrap-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6915d27aa4d27fd100dee9bdd2ef3c67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29486,
        "upload_time": "2020-12-23T01:33:07",
        "upload_time_iso_8601": "2020-12-23T01:33:07.200002Z",
        "url": "https://files.pythonhosted.org/packages/6f/48/a0801e66e27038c2f68dbb5a3a25a93524693436356554792acc750472e1/emrap-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eebd47e41a6582a802173704cb50cc1c90d28651cf18ad013c36a00a469c7d5",
          "md5": "3cf6ac5f6da0315dc2735e24e518ade1",
          "sha256": "836ecd880d82bdabe3165fe8daee2ee167ccebae09335539420ee6edb5e78777"
        },
        "downloads": -1,
        "filename": "emrap-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3cf6ac5f6da0315dc2735e24e518ade1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28806,
        "upload_time": "2020-12-23T01:33:08",
        "upload_time_iso_8601": "2020-12-23T01:33:08.285333Z",
        "url": "https://files.pythonhosted.org/packages/9e/eb/d47e41a6582a802173704cb50cc1c90d28651cf18ad013c36a00a469c7d5/emrap-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6208e74e1c2ddacbe56ceca19d8cc9c245010057d12f98d8b739921041a33c1e",
          "md5": "b2bebbcdb1a90d8e0ba4ee73cc7b0bb8",
          "sha256": "94feb814abc23566beb7a1fd92c9cd7e20a1bb9a576b85b10eb9a954fcb00269"
        },
        "downloads": -1,
        "filename": "emrap-1.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2bebbcdb1a90d8e0ba4ee73cc7b0bb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29291,
        "upload_time": "2020-12-08T03:55:34",
        "upload_time_iso_8601": "2020-12-08T03:55:34.017626Z",
        "url": "https://files.pythonhosted.org/packages/62/08/e74e1c2ddacbe56ceca19d8cc9c245010057d12f98d8b739921041a33c1e/emrap-1.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f7736e726a6bfef1bf98d0ba1dd719b7461f108dcf54320d5264ef1cf2a6f43",
          "md5": "6be68e14e1f8faab397704512d749fb5",
          "sha256": "52eb9ddc3df35f94e87e01e4235e3125b58d85d1d68937354b7038cf025bd97e"
        },
        "downloads": -1,
        "filename": "emrap-1.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "6be68e14e1f8faab397704512d749fb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28567,
        "upload_time": "2020-12-08T03:55:35",
        "upload_time_iso_8601": "2020-12-08T03:55:35.321549Z",
        "url": "https://files.pythonhosted.org/packages/5f/77/36e726a6bfef1bf98d0ba1dd719b7461f108dcf54320d5264ef1cf2a6f43/emrap-1.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f48a0801e66e27038c2f68dbb5a3a25a93524693436356554792acc750472e1",
        "md5": "6915d27aa4d27fd100dee9bdd2ef3c67",
        "sha256": "1d38f2d6221266c50b4a5ffb9a5e4854d825cf84c29e370f32eb7a256eb8c561"
      },
      "downloads": -1,
      "filename": "emrap-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6915d27aa4d27fd100dee9bdd2ef3c67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29486,
      "upload_time": "2020-12-23T01:33:07",
      "upload_time_iso_8601": "2020-12-23T01:33:07.200002Z",
      "url": "https://files.pythonhosted.org/packages/6f/48/a0801e66e27038c2f68dbb5a3a25a93524693436356554792acc750472e1/emrap-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9eebd47e41a6582a802173704cb50cc1c90d28651cf18ad013c36a00a469c7d5",
        "md5": "3cf6ac5f6da0315dc2735e24e518ade1",
        "sha256": "836ecd880d82bdabe3165fe8daee2ee167ccebae09335539420ee6edb5e78777"
      },
      "downloads": -1,
      "filename": "emrap-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3cf6ac5f6da0315dc2735e24e518ade1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28806,
      "upload_time": "2020-12-23T01:33:08",
      "upload_time_iso_8601": "2020-12-23T01:33:08.285333Z",
      "url": "https://files.pythonhosted.org/packages/9e/eb/d47e41a6582a802173704cb50cc1c90d28651cf18ad013c36a00a469c7d5/emrap-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}