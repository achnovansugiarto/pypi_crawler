{
  "info": {
    "author": "Tyler Lubeck",
    "author_email": "tyler@tylerlubeck.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# BagelCon BattleBots 2020\n\nThis year's BattleBots competition is a modified version of Rock/Paper/Scissors.\n\nEach bot will be provided with the entire history of the game as a command line parameter, and will be expected to\nboth return a json-formatted dictionary on stdout and exit with code 0.\n\nAll bots must be submitted as self contained docker images.\n\n\n# Modified Rock Paper Scissors Rules\n\nEach player must play one of \"ROCK\", \"PAPER\", or \"SCISSORS\".\n\nAfter each player submits their hand, the rules are decided as follows, moving to the next stage if the players tie\n1. Basic rock paper scissors rules. \n    - Rock beats Scissors\n    - Scissors beats Paper \n    - Paper beats Rock\n2. Whoever has played that hand more often in this game wins\n3. Whoever has played the hand that would beat this hand more often in this game wins\n4. Random Choice\n\n\nEach game will be played over the course of 51 rounds.\n\n\n## Example\nRound 1:\n    P1: ROCK\n    P2: PAPER\nP2 Wins naturally\n\nRound 2:\n    P1: ROCK\n    P2: ROCK\nNo natural winner\nP1 has played ROCK more often, P1 wins\n\nRound 3:\n    P1: PAPER\n    P2: ROCK\nP1 Wins naturally\n\nRound 4:\n    P1: ROCK\n    P2: ROCK\nNo natural winner\nboth players have played ROCK the same number of times\nboth players have played PAPER the same number of times\nWinner is `random.choice([1, 2])`\n\n\n# Calling Conventions\n\n## Input\n\nBots will be called with the entire game's history as the only command line parameter. The history is formatted as a\nstring of 3-tuples separated by `;` characters.\n\nEach of the 3-tuples is of the format `(player-one-hand,player-two-hand,winner)`\n\n### History Example\n\nIf the provided history looks like `rp2;sp1` then\n\n- We know there have been two rounds so far in the game, and we're on round 3\n- In the first round, player one played \"rock\", player 2 played \"paper\", and player 2 won\n- In the second round, player one played \"scissors\", player 2 played \"paper\", and player 1 won\n\n\n**Note:**\n   This history string abbreviates \"rock\" to \"r\", \"paper\" to \"p\", and \"scissors\" to \"s\". This same transformation \n   **is not valid** for the output of your program - you must output the full words, in all caps.\n\n\n## Output\n\n### Basic Output\n\nEach bot is expected to output, on a single line, a json formatted dictionary of the form\n```json\n{\"move\": \"MOVE\"}\n```\nThe value for `move` must be one of `ROCK`, `PAPER`, or `SCISSORS`.\n\nYour bot must also exit with code 0. If a different exit code is provided, your bot will automatically forfeit the round.\n\n### Art Output\n\nIn addition the regular rock/paper/scissors competition, we're going to have an art competition!\nEach bot may include an `\"art\"` key in their json output. The value for this key is a 2-dimensional matrix with up to\n60 rows and 60 columns.\n\nThese images will be displayed in some way during \n\n```json\n{\"art\": [], \"move\": \"MOVE\"}\n```\nThe value for the `art` key can be an array of up to 60 strings, and each of those strings can have a max of 60 characters.\nIn effect, this gives a 60x60 grid to produce ascii art alongside your gameplay.\n\nFor example, to embed the ascii image\n```\n     ***********                  ***********\n  *****************            *****************\n*********************        *********************\n***********************      ***********************\n************************    ************************\n*************************  *************************\n **************************************************\n  ************************************************\n    ********************************************\n      ****************************************\n         **********************************\n           ******************************\n              ************************\n                ********************\n                   **************\n                     **********\n                       ******\n                         **\n```\n\nyou would output\n\n```json\n{\"move\": \"ROCK\", \"art}\n```\n\nThe images collected from the 51 rounds of play will be strung together to form a gif, with each image being one frame in the gif. \n\nAs an example, the images in `sample-art` were strung together to create\n\n![Sample Gif](./sample-art/sample.gif)\n\n# Getting Started\n\nThere are example bots with modification instructions in the `examples/` directory. Each of these examples is\nconfigured to produce a docker image that follows all of the rules and conventions described in this document.\n\nSo long as you also follow the rules and conventions described in this document, you're free to submit any docker\nimage you like - there's no need to start with any of the provided examples.\n\n## Submitting Your Bot\n\nAll bots must be submitted as runnable docker images. For a submitted image `IMAGE`, it will be run as\n```bash\ndocker run \\\n    --network=none \\\n    ${IMAGE} \"${HISTORY}\"\n```\n**Note:** `HISTORY` will be an empty string for the first round, and your bot must be able to handle that.\n\n**Note:** containers will be given 5 seconds to run, after which they will be forfeit and be terminated\n\n**Note:** `network=none` means that your code will not be able to access any form of network or internet at runtime.\nThis is to prevent people from using external resources to track other bot performance.\n\nDocker images must be published to either Docker Hub or Github Packages. See me for more help if you need it.\n\nWe're using external docker repositories over any internal image repositories for security, cost, and ease-of-use reasons.\n\n\n## Testing Your Bot with the Bot Runner\n\nTo test your bot using the same bot runner that will be used for the tournament, run the following\n\n```bash\n# P1_IMAGE should be set to the name of your docker image\nP1_IMAGE=yourimage\nP1_NAME=yourname\n\n# P2_IMAGE is your opponent. You can test with friends, you can use the same as P1_IMAGE and test against yourself\nP2_IMAGE=opponentimage\nP2_NAME=opponentname\n\ndocker run \\\n    -t \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $(pwd)/art:/art \\\n    docker.pkg.github.com/tylerlubeck/battlebots/battlebots:latest \\\n        rps $P1_NAME $P1_IMAGE $P2_NAME $P2_IMAGE /art --rounds 11\n```\n\n\n## Testing ASCII Art\n\nTo speed up ASCII Art testing, there's a utility built in to the battlebot runner to generate GIFs from ascii art files\n\nCreate a folder and fill it with files representing the frames of your gif. These files must end in `.ascii` and will\nbe loaded in alphabetical order to create frames.\n\nYou can then create a gif as such:\n\n```bash\nIMAGE_PATH=/path/to/ascii/folder\ndocker run \\\n    -v ${IMAGE_PATH}:/images  \\\n    docker.pkg.github.com/tylerlubeck/battlebots/battlebots:latest \\\n        generate-gif /images /images/output.gif\n```\n\n# The Tournament\n\nThe Tournament will consist of two competitions\n\n1. A rock/paper/scissors competition, run tournament bracket style\n2. An art competition, where conference attendees will vote on the best art piece created by your bot\n\nOn tournament day, image names will be collected from participants. We'll then download the images and use the downloaded\nversions for the tournament - this means no updating images during the tournament!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TylerLubeck/battlebots",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "battlebots",
    "package_url": "https://pypi.org/project/battlebots/",
    "platform": "",
    "project_url": "https://pypi.org/project/battlebots/",
    "project_urls": {
      "Homepage": "https://github.com/TylerLubeck/battlebots"
    },
    "release_url": "https://pypi.org/project/battlebots/1.0.0/",
    "requires_dist": [
      "colorama (<=0.5.0,>=0.4.3)",
      "docker (<5.0.0,>=4.2.2)",
      "typer (<0.4.0,>=0.3.1)",
      "pillow (>=7.2.0<8.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "BagelCon Battlebots Runner",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7946399,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24564e2621f3fd9de5c111444eef872afbd3acc826c137a0cf6e5ecad2089cc9",
          "md5": "90e31c7525b64c3bdf70911bc7240c13",
          "sha256": "dd8265ed03ce22f250edd28d15fe653cb7fcd0d9cf7b9e12e1c9db79f7b2b33f"
        },
        "downloads": -1,
        "filename": "battlebots-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90e31c7525b64c3bdf70911bc7240c13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 4143,
        "upload_time": "2020-08-12T01:32:07",
        "upload_time_iso_8601": "2020-08-12T01:32:07.500920Z",
        "url": "https://files.pythonhosted.org/packages/24/56/4e2621f3fd9de5c111444eef872afbd3acc826c137a0cf6e5ecad2089cc9/battlebots-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd4f4a347a7b5210656a1585cca3077abae81cf895e09ff2738dbaa86430ee5",
          "md5": "696e9138c9276045c6fa8578ea24c563",
          "sha256": "402960b19703f9804dc8917d0ad2ea807b66ded25a1324e18a502af7fb68de6b"
        },
        "downloads": -1,
        "filename": "battlebots-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "696e9138c9276045c6fa8578ea24c563",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6009,
        "upload_time": "2020-08-12T01:32:09",
        "upload_time_iso_8601": "2020-08-12T01:32:09.947099Z",
        "url": "https://files.pythonhosted.org/packages/1d/d4/f4a347a7b5210656a1585cca3077abae81cf895e09ff2738dbaa86430ee5/battlebots-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3743c8f175ea54e3c0c3a7e556abfa9c5a4ffbac5dde8d2abd2024e0ede6b68e",
          "md5": "471aab1759ad82462d81f1e10655e58b",
          "sha256": "eb1b8c639d0d07b17972e373b79be85ab768e7d2e66c028e682151d8bed0f22a"
        },
        "downloads": -1,
        "filename": "battlebots-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "471aab1759ad82462d81f1e10655e58b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7761,
        "upload_time": "2020-08-12T18:52:17",
        "upload_time_iso_8601": "2020-08-12T18:52:17.866780Z",
        "url": "https://files.pythonhosted.org/packages/37/43/c8f175ea54e3c0c3a7e556abfa9c5a4ffbac5dde8d2abd2024e0ede6b68e/battlebots-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3743c8f175ea54e3c0c3a7e556abfa9c5a4ffbac5dde8d2abd2024e0ede6b68e",
        "md5": "471aab1759ad82462d81f1e10655e58b",
        "sha256": "eb1b8c639d0d07b17972e373b79be85ab768e7d2e66c028e682151d8bed0f22a"
      },
      "downloads": -1,
      "filename": "battlebots-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "471aab1759ad82462d81f1e10655e58b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 7761,
      "upload_time": "2020-08-12T18:52:17",
      "upload_time_iso_8601": "2020-08-12T18:52:17.866780Z",
      "url": "https://files.pythonhosted.org/packages/37/43/c8f175ea54e3c0c3a7e556abfa9c5a4ffbac5dde8d2abd2024e0ede6b68e/battlebots-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}