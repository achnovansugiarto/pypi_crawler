{
  "info": {
    "author": "Ye Jia",
    "author_email": "jiayephy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TFRecord reader, writer, and PyTorch Dataset\n\nThis library allows reading and writing [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord#tfrecords_format_details) files efficiently in Python, and provides an `IterableDataset` interface for TFRecord files in PyTorch. Both uncompressed and compressed gzip TFRecord are supported.\n\nThis library is modified from [`tfrecord`](https://pypi.org/project/tfrecord/), to remove its binding to `tf.Example` and support generic TFRecord data.\n\n## Installation\n\n```shell\npip install tfrecord-dataset\n```\n\n<!--\n```shell\ngit clone https://github.com/chaiko/tfrecord_dataset\ncd tfrecord_dataset\npip install --editable .\n```\n-->\n\n## Usage\n\n### Basic read & write\n\n```python\nimport tfrecord_dataset as tfr\n\nwriter = tfr.TFRecordWriter('test.tfrecord')\nwriter.write(b'Hello world!')\nwriter.write(b'This is a test.')\nwriter.close()\n\nfor x in tfr.tfrecord_iterator('test.tfrecord'):\n    print(bytes(x))\n```\n\n### TFRecordDataset\n\nUse `TFRecordDataset` to read TFRecord files in PyTorch.\n\n```python\nimport torch\nfrom tfrecord_dataset.torch import TFRecordDataset\n\ndataset = TFRecordDataset('test.tfrecord', transform=lambda x: len(x))\nloader = torch.utils.data.DataLoader(dataset, batch_size=2)\n\ndata = next(iter(loader))\nprint(data)\n```\n\n#### Data transformation\n\nThe reader reads TFRecord payload as bytes. You can pass a callable as the\n`transform` argument for parsing the bytes into the desired format, as\nshown in the simple example above. You can use such transformation for parsing\nserialized structured data, e.g. protobuf, numpy arrays, images, etc.\n\nHere is another example for reading and decoding images:\n\n```python\nimport cv2\n\ndataset = TFRecordDataset(\n    'data.tfrecord',\n    transform=lambda x: {'image':  cv2.imdecode(x, cv2.IMREAD_COLOR)})\n```\n\n#### Shuffling the data\n\n`TFRecordDataset` can automatically shuffle the data when you provide a queue size.\n\n```python\ndataset = TFRecordDataset(..., shuffle_queue_size=1024)\n```\n\n#### Index\n\nIt's recommended to create an index file for each TFRecord file. Index file must be provided when using multiple workers, otherwise the loader may return duplicate records.\n```\npython -m tfrecord_dataset.tools.tfrecord2idx <tfrecord path> <index path>\n```\n\n### MultiTFRecordDataset\n\nUse `MultiTFRecordDataset` to read multiple TFRecord files. This class samples from given TFRecord files with given probability.\n\n```python\nimport torch\nfrom tfrecord_dataset.torch import MultiTFRecordDataset\n\ndataset = MultiTFRecordDataset(\n    data_pattern='test-{}-of-00008',\n    index_pattern='test.idx-{}-of-00008',\n    splits={'00000': 0.8, '00003': 0.2},\n    transform=lambda x: len(x))\nloader = torch.utils.data.DataLoader(dataset, batch_size=8)\n\ndata = next(iter(loader))\nprint(data)\n```\n\n#### Infinite and finite dataset\n\nBy default, `MultiTFRecordDataset` is infinite, meaning that it samples the data forever. You can make it finite by providing the appropriate flag\n\n```python\ndataset = MultiTFRecordDataset(..., infinite=False)\n```\n\n## Acknowledgements\n\nThis repo is forked from https://github.com/vahidk/tfrecord.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chaiko/tfrecord_dataset",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tfrecord-dataset",
    "package_url": "https://pypi.org/project/tfrecord-dataset/",
    "platform": null,
    "project_url": "https://pypi.org/project/tfrecord-dataset/",
    "project_urls": {
      "Homepage": "https://github.com/chaiko/tfrecord_dataset"
    },
    "release_url": "https://pypi.org/project/tfrecord-dataset/0.1.1/",
    "requires_dist": [
      "numpy",
      "crc32c"
    ],
    "requires_python": ">=3.6",
    "summary": "TFRecord reader, writer, and PyTorch Dataset.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15055299,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "665a5809545cd65b0bc85f8f0f6a17ce0cf98041fe806dc25b37bf93bcf9f789",
          "md5": "1862acd8162a296037001c405b3f639d",
          "sha256": "79f222c2a903854fef7d8cf3e3906b5b12ffd355cb9450bc7d5c511645244f31"
        },
        "downloads": -1,
        "filename": "tfrecord_dataset-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1862acd8162a296037001c405b3f639d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9096,
        "upload_time": "2022-09-11T01:50:33",
        "upload_time_iso_8601": "2022-09-11T01:50:33.019257Z",
        "url": "https://files.pythonhosted.org/packages/66/5a/5809545cd65b0bc85f8f0f6a17ce0cf98041fe806dc25b37bf93bcf9f789/tfrecord_dataset-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edddea92a98b6debe9aa9d5ea31bbc61cea57b132405c88eb7cbd063cf36d854",
          "md5": "7f043508ab9bbe9c13f12c4e3d5e7d12",
          "sha256": "5b3ee408778944cd82d8361fbdb7cdeaa5068c31693b91227dd74f447fe9c745"
        },
        "downloads": -1,
        "filename": "tfrecord_dataset-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f043508ab9bbe9c13f12c4e3d5e7d12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8295,
        "upload_time": "2022-09-11T01:50:34",
        "upload_time_iso_8601": "2022-09-11T01:50:34.577710Z",
        "url": "https://files.pythonhosted.org/packages/ed/dd/ea92a98b6debe9aa9d5ea31bbc61cea57b132405c88eb7cbd063cf36d854/tfrecord_dataset-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "665a5809545cd65b0bc85f8f0f6a17ce0cf98041fe806dc25b37bf93bcf9f789",
        "md5": "1862acd8162a296037001c405b3f639d",
        "sha256": "79f222c2a903854fef7d8cf3e3906b5b12ffd355cb9450bc7d5c511645244f31"
      },
      "downloads": -1,
      "filename": "tfrecord_dataset-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1862acd8162a296037001c405b3f639d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9096,
      "upload_time": "2022-09-11T01:50:33",
      "upload_time_iso_8601": "2022-09-11T01:50:33.019257Z",
      "url": "https://files.pythonhosted.org/packages/66/5a/5809545cd65b0bc85f8f0f6a17ce0cf98041fe806dc25b37bf93bcf9f789/tfrecord_dataset-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edddea92a98b6debe9aa9d5ea31bbc61cea57b132405c88eb7cbd063cf36d854",
        "md5": "7f043508ab9bbe9c13f12c4e3d5e7d12",
        "sha256": "5b3ee408778944cd82d8361fbdb7cdeaa5068c31693b91227dd74f447fe9c745"
      },
      "downloads": -1,
      "filename": "tfrecord_dataset-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7f043508ab9bbe9c13f12c4e3d5e7d12",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8295,
      "upload_time": "2022-09-11T01:50:34",
      "upload_time_iso_8601": "2022-09-11T01:50:34.577710Z",
      "url": "https://files.pythonhosted.org/packages/ed/dd/ea92a98b6debe9aa9d5ea31bbc61cea57b132405c88eb7cbd063cf36d854/tfrecord_dataset-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}