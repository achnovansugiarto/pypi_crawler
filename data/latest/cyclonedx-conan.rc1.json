{
  "info": {
    "author": "Patrick Dwyer",
    "author_email": "patrick.dwyer@owasp.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CycloneDX Conan SBOM Generation Tool\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/CycloneDX/cyclonedx-conan/Python%20CI)](https://github.com/CycloneDX/cyclonedx-conan/actions/workflows/ci.yml)\n[![GitHub license](https://img.shields.io/github/license/CycloneDX/cyclonedx-conan)](https://github.com/CycloneDX/cyclonedx-conan/blob/main/LICENSE)\n[![Python Version Support](https://img.shields.io/badge/https://-cyclonedx.org-blue)](https://cyclonedx.org/)\n[![Slack Invite](https://img.shields.io/badge/Slack-Join-blue?logo=slack&labelColor=393939)](https://cyclonedx.org/slack/invite)\n![PyPI Version](https://img.shields.io/pypi/v/cyclonedx-conan?label=PyPI&logo=pypi)\n![Python Version Support](https://img.shields.io/badge/python-3.6+-blue)\n[![Group Discussion](https://img.shields.io/badge/discussion-groups.io-blue)](https://groups.io/g/CycloneDX)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=Follow)](https://twitter.com/CycloneDX_Spec)\n\n----\n\nThis project provides a tool for generating CycloneDX bill-of-material JSON documents for C/C++ projects using Conan.\n\nThe BOM will contain an aggregate of all your current project's dependencies, including a full dependency graph.\n\nCycloneDX is a lightweight BOM specification that is easily created, human-readable, and simple to parse.\n\nPlease note: This tool has only been tested with Conan 1.14 so far.\n\n## Installation\n\nInstall this from [PyPi.org](https://pypi.org/project/cyclonedx-conan/) using your preferred Python package manager.\n\nExample using `pip`:\n```\npip install cyclonedx-conan\n```\n\nExample using `poetry`:\n```\npoetry add cyclonedx-conan\n```\n\n## Usage\n\nOnce installed, you can access the full documentation by running `--help`:\n\nThe command line options are aligned to the standard Conan options.\n\n```\n$ cyclonedx-conan --help\nusage: command.py [-h] [-if INSTALL_FOLDER] [-db [DRY_BUILD]] [-b [BUILD]] [-r REMOTE] [-u] [-l LOCKFILE] [--lockfile-out LOCKFILE_OUT]\n                  [-e ENV_HOST] [-e:b ENV_BUILD] [-e:h ENV_HOST] [-o OPTIONS_HOST] [-o:b OPTIONS_BUILD] [-o:h OPTIONS_HOST]\n                  [-pr PROFILE_HOST] [-pr:b PROFILE_BUILD] [-pr:h PROFILE_HOST] [-s SETTINGS_HOST] [-s:b SETTINGS_BUILD]\n                  [-s:h SETTINGS_HOST] [-c CONF_HOST] [-c:b CONF_BUILD] [-c:h CONF_HOST]\n                  path_or_reference\n\nCycloneDX SBOM Generator\n\npositional arguments:\n  path_or_reference     Path to a folder containing a recipe (conanfile.py or conanfile.txt) or to a recipe file. e.g.,\n                        ./my_project/conanfile.txt. It could also be a reference\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -if INSTALL_FOLDER, --install-folder INSTALL_FOLDER\n                        local folder containing the conaninfo.txt and conanbuildinfo.txt files (from a previous conan install execution).\n                        Defaulted to current folder, unless --profile, -s or -o is specified. If you specify both install-folder and any\n                        setting/option it will raise an error.\n  -db [DRY_BUILD], --dry-build [DRY_BUILD]\n                        Apply the --build argument to output the information, as it would be done by the install command\n  -b [BUILD], --build [BUILD]\n                        Given a build policy, return an ordered list of packages that would be built from sources during the install\n                        command\n  -r REMOTE, --remote REMOTE\n                        Look in the specified remote server\n  -u, --update          Will check if updates of the dependencies exist in the remotes (a new version that satisfies a version range, a\n                        new revision or a newer recipe if not using revisions).\n  -l LOCKFILE, --lockfile LOCKFILE\n                        Path to a lockfile\n  --lockfile-out LOCKFILE_OUT\n                        Filename of the updated lockfile\n  -e ENV_HOST, --env ENV_HOST\n                        Environment variables that will be set during the package build (host machine). e.g.: -e CXX=/usr/bin/clang++\n  -e:b ENV_BUILD, --env:build ENV_BUILD\n                        Environment variables that will be set during the package build (build machine). e.g.: -e:b CXX=/usr/bin/clang++\n  -e:h ENV_HOST, --env:host ENV_HOST\n                        Environment variables that will be set during the package build (host machine). e.g.: -e:h CXX=/usr/bin/clang++\n  -o OPTIONS_HOST, --options OPTIONS_HOST\n                        Define options values (host machine), e.g.: -o Pkg:with_qt=true\n  -o:b OPTIONS_BUILD, --options:build OPTIONS_BUILD\n                        Define options values (build machine), e.g.: -o:b Pkg:with_qt=true\n  -o:h OPTIONS_HOST, --options:host OPTIONS_HOST\n                        Define options values (host machine), e.g.: -o:h Pkg:with_qt=true\n  -pr PROFILE_HOST, --profile PROFILE_HOST\n                        Apply the specified profile to the host machine\n  -pr:b PROFILE_BUILD, --profile:build PROFILE_BUILD\n                        Apply the specified profile to the build machine\n  -pr:h PROFILE_HOST, --profile:host PROFILE_HOST\n                        Apply the specified profile to the host machine\n  -s SETTINGS_HOST, --settings SETTINGS_HOST\n                        Settings to build the package, overwriting the defaults (host machine). e.g.: -s compiler=gcc\n  -s:b SETTINGS_BUILD, --settings:build SETTINGS_BUILD\n                        Settings to build the package, overwriting the defaults (build machine). e.g.: -s:b compiler=gcc\n  -s:h SETTINGS_HOST, --settings:host SETTINGS_HOST\n                        Settings to build the package, overwriting the defaults (host machine). e.g.: -s:h compiler=gcc\n  -c CONF_HOST, --conf CONF_HOST\n                        Configuration to build the package, overwriting the defaults (host machine). e.g.: -c\n                        tools.cmake.cmaketoolchain:generator=Xcode\n  -c:b CONF_BUILD, --conf:build CONF_BUILD\n                        Configuration to build the package, overwriting the defaults (build machine). e.g.: -c:b\n                        tools.cmake.cmaketoolchain:generator=Xcode\n  -c:h CONF_HOST, --conf:host CONF_HOST\n                        Configuration to build the package, overwriting the defaults (host machine). e.g.: -c:h\n                        tools.cmake.cmaketoolchain:generator=Xcode\n```\n\n\n## Python Support\n\nWe endeavour to support all functionality for all [current actively supported Python versions](https://www.python.org/downloads/).\nHowever, some features may not be possible/present in older Python versions due to their lack of support.\n\n## Copyright & License\n\nCycloneDX BOM is Copyright (c) OWASP Foundation. All Rights Reserved.\n\nPermission to modify and redistribute is granted under the terms of the Apache 2.0 license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CycloneDX/cyclonedx-conan",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cyclonedx-conan",
    "package_url": "https://pypi.org/project/cyclonedx-conan/",
    "platform": "",
    "project_url": "https://pypi.org/project/cyclonedx-conan/",
    "project_urls": {
      "Homepage": "https://github.com/CycloneDX/cyclonedx-conan",
      "Repository": "https://github.com/CycloneDX/cyclonedx-conan"
    },
    "release_url": "https://pypi.org/project/cyclonedx-conan/0.2.0/",
    "requires_dist": [
      "conan (==1.41.0)",
      "packageurl-python (>=0.9.6,<0.10.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Creates CycloneDX Software Bill of Materials (SBOM) documents for C/C++ projects using Conan",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11950232,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8b86259a29bd4e3cf965a094a68fec42bfcfbaf87d4df5a98804639b2153424",
          "md5": "bbc61c8a312f99fdc8d67840f7c52eca",
          "sha256": "06d743a186f170a77242c40eca430fb73e047684ec105bbb01bebdfdf0801600"
        },
        "downloads": -1,
        "filename": "cyclonedx_conan-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbc61c8a312f99fdc8d67840f7c52eca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 14395,
        "upload_time": "2021-10-14T12:12:26",
        "upload_time_iso_8601": "2021-10-14T12:12:26.964955Z",
        "url": "https://files.pythonhosted.org/packages/e8/b8/6259a29bd4e3cf965a094a68fec42bfcfbaf87d4df5a98804639b2153424/cyclonedx_conan-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a70e768f6729fea08e713c8ac971a042b642bee6d479a8fd68c33633187689",
          "md5": "3b1232bac0850d49b335f7847b0db5de",
          "sha256": "f6f3a97d1eb6b881c1d3de4e5860f342d666b744797d692151fee0bbc3bf626e"
        },
        "downloads": -1,
        "filename": "cyclonedx-conan-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b1232bac0850d49b335f7847b0db5de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9585,
        "upload_time": "2021-10-14T12:12:31",
        "upload_time_iso_8601": "2021-10-14T12:12:31.740895Z",
        "url": "https://files.pythonhosted.org/packages/59/a7/0e768f6729fea08e713c8ac971a042b642bee6d479a8fd68c33633187689/cyclonedx-conan-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8b86259a29bd4e3cf965a094a68fec42bfcfbaf87d4df5a98804639b2153424",
        "md5": "bbc61c8a312f99fdc8d67840f7c52eca",
        "sha256": "06d743a186f170a77242c40eca430fb73e047684ec105bbb01bebdfdf0801600"
      },
      "downloads": -1,
      "filename": "cyclonedx_conan-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbc61c8a312f99fdc8d67840f7c52eca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 14395,
      "upload_time": "2021-10-14T12:12:26",
      "upload_time_iso_8601": "2021-10-14T12:12:26.964955Z",
      "url": "https://files.pythonhosted.org/packages/e8/b8/6259a29bd4e3cf965a094a68fec42bfcfbaf87d4df5a98804639b2153424/cyclonedx_conan-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59a70e768f6729fea08e713c8ac971a042b642bee6d479a8fd68c33633187689",
        "md5": "3b1232bac0850d49b335f7847b0db5de",
        "sha256": "f6f3a97d1eb6b881c1d3de4e5860f342d666b744797d692151fee0bbc3bf626e"
      },
      "downloads": -1,
      "filename": "cyclonedx-conan-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b1232bac0850d49b335f7847b0db5de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 9585,
      "upload_time": "2021-10-14T12:12:31",
      "upload_time_iso_8601": "2021-10-14T12:12:31.740895Z",
      "url": "https://files.pythonhosted.org/packages/59/a7/0e768f6729fea08e713c8ac971a042b642bee6d479a8fd68c33633187689/cyclonedx-conan-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}