{
  "info": {
    "author": "TotvsLabs",
    "author_email": "info@totvslabs.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Assistant Fulfillment Helper\nEsta biblioteta tem como objetivo facilitar a criação de *webhooks* para os nós de intenção da [Assistente TOTVS](https://produtos.totvs.com/ficha-tecnica/tudo-sobre-o-totvs-carol-assistente/). Com poucas linhas de código, é possivel criar uma regra de negócio customizada em sua propria estrutura de servidor.\n\n## Pré-requisitos:\n- [>= Python 3.7](https://www.python.org/downloads/)\n\n## Por onde começar?\nCrie um projeto novo e instale o módulo usando PyPI:\n\n```sh\npip install assistant-fulfillment-helper\n```\n\nImporte e instancie a classe ``FulfillmentHelper`` para poder definir sua própria regra de negócio. \n\n```python\nfh = FulfillmentHelper()\nfh.start() # Inicia um servidor local\n```\n\nO código acima irá instanciar o módulo e servirá um Webhook pronto para receber as requisições dos seus nós de intenção da Assistente. Para checar se está tudo certo, abra seu navegador e acesse http://127.0.0.1:5052 (endereço padrão).\n\nO endereço (path) raíz possui dois roteamentos:\n- ``GET``: Trás uma mensagem de sucesso com ``http response 200``, e pode ser utilizada como *health check*.\n- ``POST``: Iniciará o processamento das [intenções definidas](#definindo-uma-intenção) na sua aplicação. É a chamada que o WebHook espera receber da Assistente.\n\n## Definindo uma Intenção\nPara definir uma intenção, basta chamar o método ``registerIntent()`` da classe instanciada ``FulfillmentHelper()``. Por exemplo:\n\n```python\nfh = FulfillmentHelper()\n\nfh.registerIntent(\n    callback = my_method,\n    webhook_token = '{token do webhook aqui}',\n    node_name = '{nome do nó de intenção}'\n)\n\nfh.start()\n```\n\n### registerIntent()\nO método ``registerIntent()`` definirá o callback pra cada intenção em uma lista de intenções. Será efetuado uma chamada para o método declarado como callback toda a vez que o Webhook receber uma chamada vinda de um nó da Assistente.\nÉ possível registrar quantos callback de intenções forem necessários, mas apenas um callback é permitido para cada nó.\n\n**Parâmetros:**\n| Parâmetro | Obrigatório? | Tipo | Descrição | \n|-----------|--------------|------|-----------|\n| ``callback`` | Sim | ``Function`` | Método que será invocado quando o Webhook receber uma chamada desse nó |\n| ``webhook_token`` | Sim | ``Str`` | Token disponibilizado pela Assistente na configuração do Nó de Intenção |\n| ``node_name`` | Sim | ``Str`` | Nome do Nó de Intenção cadastrado na Assistente |\n\n## Criando um callback\nNa chamada do callback, será passado uma variável do tipo ``Dict`` com alguns argumentos que poderão ser utilizados na regra de negócio como quiser. \nExemplo de um método para callback de um Nó de Intenção:\n```python\ndef my_method(params):\n    session = params.get('sessionId')\n    message = f\"Olá Usuário, nosso id de sessão é: {session}\"\n    \n    return FulfillmentHelperResponse(\n        message = message\n    )\n```\n\nOs parametros passados na chamada do callback são:\n\n| Parâmetro | Tipo | Descrição |\n|-----------|------|-----------|\n| intent_name | ``Str`` | Nome do nó sendo processado |\n| parameters | ``Dict`` | Todos os parametros desse contexto de conversa |\n| sessionLog | ``List`` | Lista de ID de sessões até esse ponto da conversa |\n| namedQueries | ``Dict`` | Resultados da Named Query (se houver) |\n| query | ``Str`` | Query executada (se houver) |\n| language | ``Str`` | Idioma da conversa |\n| carolOrganization | ``Str`` | Nome da Organização |\n| carolEnvironment | ``Str`` | Nome do Ambiente |\n| carolOrganizationId | ``Str`` | Id da Organização |\n| carolEnvironmentId | ``Str`` | Id do Ambiente |\n| sessionId | ``Str`` | Id da sessão da conversa atual |\n| isProduction | ``Bool`` | Informa se a convesa está acontecendo em Produção ou Desenvolvimento |\n| channelName | ``Str`` | Nome do canal por onde a mensagem chegou |\n\n### Retorno do Callback \nO metodo de callback deve retornar uma classe do tipo ``FulfillmentHelperResponse``, como no [exemplo acima](#iniciando-um-servidor-local). Essa classe possui os seguintes atributos para retorno:\n\n| Parâmetro | Obrigatório? | Tipo | Descrição | \n|-----------|--------------|------|-----------|\n| ``message`` | Sim | ``Str`` | Mensagem que será retornada na conversa |\n| ``short_message`` | Não | ``Str`` | Mensagem curta de retorno |\n| ``jump_to`` | Não | ``Str`` | Nome do nó para o qual a conversa será direcionada |\n| ``options`` | Não | ``List[Str]`` | Lista de opções pré-definidas que aparecerão como botões na resposta |\n| ``logout`` | Não | ``Bool`` | Destrói a sessão de usuário na conversa ``(default: False)`` |\n| ``parameters`` | Não | ``Dict`` | Parametros que serão adicionados no contexto da conversa |\n\nExemplo de uso:\n```python\ndef callback_boas_vindas(params):\n    message = f\"Olá, o que deseja fazer agora?\"\n    \n    return FulfillmentHelperResponse(\n        message = message,\n        short_message = \"Boas vindas\",\n        jump_to = \"Pedidos\",\n        options = [\n            \"Criar Pedido\", \n            \"Consultar Pedido\"\n            \"Cancelar Pedido\"\n        ],\n        logout = False,\n        parameters = { 'onboarding' : True }\n    )\n```\n\n## Iniciando um servidor local\nO método ``start()`` é responsavel por iniciar um servidor local e deixar pronto para receber requisições como um Webhook. O servidor local pode ser configurado passando algumas propriedades no momento da chamada. Por exemplo:\n\n```python\nfh = FulfillmentHelper()\n\nfh.start(\n    debug = True\n)\n```\n\nAs configurações customizáveis para o servidor local são:\n\n| Parâmetro | Obrigatório? | Tipo | Default | Descrição | \n|-----------|--------------|------|---------|-----------|\n| ``debug`` | Não | ``Bool`` | ``False`` | O Debug ativo habilita verbosidade e reinicia o servidor em cada alteração de código |\n| ``host`` | Não | ``Str`` | ``0.0.0.0`` | Nome ou IP do host local |\n| ``port`` | Não | ``Int`` | ``5052`` | Porta do host local |\n\n\n## Exceções \nOs possíveis erros são tratados pelas exceções do módulo. Aqui está a lista das exceções existentes:\n\n\n| Exceção | Problema | \n|-----------|--------|\n| ``DuplicatedIntentNodeException()`` |  Foi tentado adicionar dois métodos de callback para o mesmo Nó de Intenção |\n| ``IntentEmptyParamException()`` | Foi tentado registrar um callback de Intenção com algum parâmetro obrigatório vazio |\n| ``IntentMissingParamException()`` | Foi tentado registrar um callback de Intenção com algum parâmetro faltando |\n| ``IntentInvalidCallbackException()`` | O método passado como Callback não pode ser invocado (*is not callable*) |\n| ``IntentResponseInstanceException()`` | O Callback invocado não retornou a classe de resposta esperada (``FulfillmentHelperResponse()``) |\n| ``IntentCallbackNotFoundException()`` | O WebHook recebeu uma chamada para um Nó de Intenção indefinido |\n| ``InvalidWebhookTokenException()`` | O WebHook token utilizado na chamada é diferente do token informado no registro do nó |\n\n## Executando em ambiente de DEV:\n> Dica: Ao invocar o metodo ``start()``, [habilite o Debug](#iniciando-um-servidor-local) para um desenvolvimento mais rápido.\n\nAo iniciar o webhook local, será necessario disponibilizar a aplicação para fora da sua rede. Para isso recomendamos a utilização de algum software de proxy local, como, por exemplo, o [ngrok](https://ngrok.com/download). Após instalação, execute o comando abaixo em seu terminal para obter a URL pública da sua aplicação. Essa URL poderá ser adicionada como WebHook nas configurações dos seus nós na Assistente para um teste local.\n\n```sh\nngrok http http://127.0.0.1:5052 \n```\n> NOTA: Informe o host e porta definida na inicialiazação do servidor WebHook.\n\n## Licença\nMIT (LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/totvslabs/assistant-fulfillment-helper",
    "keywords": "assistant fulfillment helper carol totvs carolina carolapp",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "assistant-fulfillment-helper",
    "package_url": "https://pypi.org/project/assistant-fulfillment-helper/",
    "platform": null,
    "project_url": "https://pypi.org/project/assistant-fulfillment-helper/",
    "project_urls": {
      "Homepage": "https://github.com/totvslabs/assistant-fulfillment-helper"
    },
    "release_url": "https://pypi.org/project/assistant-fulfillment-helper/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Assistant Fulfillment Helper Server",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16250313,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca65ff507a9165f442b58bc221c9b73679cb5159d28da45f5dffd7c73d42ca29",
          "md5": "73af36d71f274f73de9c864b0e498b7a",
          "sha256": "924123f5dd919507188d5b02d2f858b9614377dc2debf97edac5ca8350d44bb1"
        },
        "downloads": -1,
        "filename": "assistant-fulfillment-helper-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73af36d71f274f73de9c864b0e498b7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13258,
        "upload_time": "2022-12-27T17:39:46",
        "upload_time_iso_8601": "2022-12-27T17:39:46.480920Z",
        "url": "https://files.pythonhosted.org/packages/ca/65/ff507a9165f442b58bc221c9b73679cb5159d28da45f5dffd7c73d42ca29/assistant-fulfillment-helper-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82e727b6744594b0bde6a9761188951c2da00cd5195283e5644044b23e8c913c",
          "md5": "69aabce5baebfa2b64ef5096d31fadcc",
          "sha256": "14e82242c16792df5ae7ba914e02c9a64aca1e48b35907d0312c96c29492efab"
        },
        "downloads": -1,
        "filename": "assistant-fulfillment-helper-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "69aabce5baebfa2b64ef5096d31fadcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15370,
        "upload_time": "2022-12-29T16:29:36",
        "upload_time_iso_8601": "2022-12-29T16:29:36.288761Z",
        "url": "https://files.pythonhosted.org/packages/82/e7/27b6744594b0bde6a9761188951c2da00cd5195283e5644044b23e8c913c/assistant-fulfillment-helper-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82e727b6744594b0bde6a9761188951c2da00cd5195283e5644044b23e8c913c",
        "md5": "69aabce5baebfa2b64ef5096d31fadcc",
        "sha256": "14e82242c16792df5ae7ba914e02c9a64aca1e48b35907d0312c96c29492efab"
      },
      "downloads": -1,
      "filename": "assistant-fulfillment-helper-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "69aabce5baebfa2b64ef5096d31fadcc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15370,
      "upload_time": "2022-12-29T16:29:36",
      "upload_time_iso_8601": "2022-12-29T16:29:36.288761Z",
      "url": "https://files.pythonhosted.org/packages/82/e7/27b6744594b0bde6a9761188951c2da00cd5195283e5644044b23e8c913c/assistant-fulfillment-helper-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}