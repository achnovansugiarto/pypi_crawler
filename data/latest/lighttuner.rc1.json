{
  "info": {
    "author": "HansBug",
    "author_email": "hansbug@buaa.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# LightTuner\n\n[![PyPI](https://img.shields.io/pypi/v/lighttuner)](https://pypi.org/project/lighttuner/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/lighttuner)\n![Loc](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/cfbcfc91f1353f1d4b2607c433d46bd6/raw/loc.json)\n![Comments](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/cfbcfc91f1353f1d4b2607c433d46bd6/raw/comments.json)\n\n[![Docs Deploy](https://github.com/opendilab/LightTuner/workflows/Docs%20Deploy/badge.svg)](https://github.com/opendilab/LightTuner/actions?query=workflow%3A%22Docs+Deploy%22)\n[![Code Test](https://github.com/opendilab/LightTuner/workflows/Code%20Test/badge.svg)](https://github.com/opendilab/LightTuner/actions?query=workflow%3A%22Code+Test%22)\n[![Badge Creation](https://github.com/opendilab/LightTuner/workflows/Badge%20Creation/badge.svg)](https://github.com/opendilab/LightTuner/actions?query=workflow%3A%22Badge+Creation%22)\n[![Package Release](https://github.com/opendilab/LightTuner/workflows/Package%20Release/badge.svg)](https://github.com/opendilab/LightTuner/actions?query=workflow%3A%22Package+Release%22)\n[![codecov](https://codecov.io/gh/opendilab/LightTuner/branch/main/graph/badge.svg?token=XJVDP4EFAT)](https://codecov.io/gh/opendilab/LightTuner)\n\n[![GitHub stars](https://img.shields.io/github/stars/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/network)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/opendilab/LightTuner)\n[![GitHub issues](https://img.shields.io/github/issues/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/issues)\n[![GitHub pulls](https://img.shields.io/github/issues-pr/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/pulls)\n[![Contributors](https://img.shields.io/github/contributors/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/graphs/contributors)\n[![GitHub license](https://img.shields.io/github/license/opendilab/LightTuner)](https://github.com/opendilab/LightTuner/blob/master/LICENSE)\n\nA simple hyper-parameter optimization toolkit:\n\n- hpo: automatic hyper-parameter tuning\n- scheduler: automatic task resource scheduler\n\n## Installation\n\nYou can simply install it with `pip` command line from the official PyPI site.\n\n```shell\npip install lighttuner\n```\n\nOr install from latest source code as follows:\n\n```shell\ngit clone https://github.com/opendilab/LightTuner.git\ncd LightTuner\npip install . --user\n```\n\n## Quick Start for HPO\n\nHere is a simple example:\n\n```python\nimport random\nimport time\n\nfrom ditk import logging\n\nfrom lighttuner.hpo import hpo, R, M, uniform, randint\n\n\n@hpo\ndef opt_func(v):  # this function is still usable after decorating\n    x, y = v['x'], v['y']\n    time.sleep(5.0)\n    logging.info(f\"This time's config: {v!r}\")  # log will be captured\n    if random.random() < 0.5:  # randomly raise exception\n        raise ValueError('Fxxk this shxt')  # retry is supported\n\n    return {\n        'result': x * y,\n        'sum': x + y,\n    }\n\n\nif __name__ == '__main__':\n    logging.try_init_root(logging.DEBUG)\n    print(opt_func.bayes()  # random algorithm\n          .max_steps(50)  # max steps\n          .minimize(R['result'])  # the maximize/minimize target you need to optimize,\n          .concern(M['time'], 'time_cost')  # extra concerned values (from metrics)\n          .concern(R['sum'], 'sum')  # extra concerned values (from return value of function)\n          .stop_when(R['result'] <= -800)  # conditional stop is supported\n          .spaces(  # search spaces\n        {\n            'x': uniform(-10, 110),  # continuous space\n            'y': randint(-10, 20),  # integer based space\n            'z': {\n                # 't': choice(['a', 'b', 'c', 'd', 'e']),  # enumerate space\n                't': uniform(0, 10),  # enumerate space is not supported in bayesian optimization\n            },\n        }\n    ).run())\n\n```\n\nThis optimization progress is parallel, which has n (number of cpus) workers in default. If you need to customize the\ncount of workers, just use `max_workers(n)` method.\n\n## Quick Start for Scheduler\n\nYou can refer to `lighttuner/scheduler/README.md` for more details.\n\n## Contributing\n\nWe appreciate all contributions to improve `LightTuner`, both logic and system designs. Please refer to CONTRIBUTING.md\nfor more guides.\n\n## License\n\n`LightTuner` released under the Apache 2.0 license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.bj.sensetime.com/open-XLab/cell/di-toolkit",
    "keywords": "A simple tool for automatic parameter tuning.",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lighttuner",
    "package_url": "https://pypi.org/project/lighttuner/",
    "platform": null,
    "project_url": "https://pypi.org/project/lighttuner/",
    "project_urls": {
      "Homepage": "https://gitlab.bj.sensetime.com/open-XLab/cell/di-toolkit"
    },
    "release_url": "https://pypi.org/project/lighttuner/0.0.1/",
    "requires_dist": [
      "hbutils (<1,>=0.6.11)",
      "rich (>=12.2.0)",
      "tabulate (>=0.8.9)",
      "inflection (>=0.5.1)",
      "numpy (>=1.18.0)",
      "scipy (>=0.14.0)",
      "scikit-learn (>=0.18.0)",
      "ruamel.yaml (>=0.17.2)",
      "psutil (>=5.7.0)",
      "DI-toolkit (>=0.0.2)",
      "Jinja2 (~=3.0.0) ; extra == 'doc'",
      "sphinx (~=3.2.0) ; extra == 'doc'",
      "sphinx-rtd-theme (~=0.4.3) ; extra == 'doc'",
      "enum-tools ; extra == 'doc'",
      "sphinx-toolbox ; extra == 'doc'",
      "plantumlcli (>=0.0.2) ; extra == 'doc'",
      "packaging ; extra == 'doc'",
      "sphinx-multiversion (~=0.2.4) ; extra == 'doc'",
      "where (~=1.0.2) ; extra == 'doc'",
      "easydict (<2,>=1.7) ; extra == 'doc'",
      "numpy (<2,>=1.19) ; extra == 'doc'",
      "yapf (==0.29.0) ; extra == 'style'",
      "flake8 (<5,>=3) ; extra == 'style'",
      "coverage (>=5) ; extra == 'test'",
      "mock (>=4.0.3) ; extra == 'test'",
      "flake8 (~=3.5) ; extra == 'test'",
      "testfixtures (>=6.18.5) ; extra == 'test'",
      "pytest (~=6.2.5) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'",
      "pytest-mock (~=3.6.1) ; extra == 'test'",
      "pytest-xdist (>=1.34.0) ; extra == 'test'",
      "pytest-rerunfailures (~=10.2) ; extra == 'test'",
      "pytest-timeout (~=2.0.2) ; extra == 'test'",
      "pytest-benchmark (~=3.4.0) ; extra == 'test'",
      "easydict (<2,>=1.7) ; extra == 'test'",
      "testtools (>=2) ; extra == 'test'",
      "numpy (<2,>=1.19) ; extra == 'test'",
      "where (>=1.0.2) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple tool for automatic parameter tuning.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14700282,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85e7cd76f00cd396c13e9dc64945573735c5e2eae58c058e52d6e07fb6b6b2ed",
          "md5": "2faac9d9eb204120c159e447ed25bcd8",
          "sha256": "a626e8b7c4cbbd20f2ee3086fbbb8dd12b207bd26965920e43b690d64abde0a7"
        },
        "downloads": -1,
        "filename": "lighttuner-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2faac9d9eb204120c159e447ed25bcd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 48195,
        "upload_time": "2022-08-09T09:04:01",
        "upload_time_iso_8601": "2022-08-09T09:04:01.090871Z",
        "url": "https://files.pythonhosted.org/packages/85/e7/cd76f00cd396c13e9dc64945573735c5e2eae58c058e52d6e07fb6b6b2ed/lighttuner-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09afde0e7efa33b045838ceef6ee9d07f315a4b0cd9aecdf25f7b8f381c78510",
          "md5": "248cd896b8f15dbadbbe8e37a7a2a282",
          "sha256": "1daf1ff5b7960f4502ad6fcf79d39c4ca612340eb91949a90855e884bdca84a3"
        },
        "downloads": -1,
        "filename": "lighttuner-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "248cd896b8f15dbadbbe8e37a7a2a282",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38382,
        "upload_time": "2022-08-09T09:04:02",
        "upload_time_iso_8601": "2022-08-09T09:04:02.425184Z",
        "url": "https://files.pythonhosted.org/packages/09/af/de0e7efa33b045838ceef6ee9d07f315a4b0cd9aecdf25f7b8f381c78510/lighttuner-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85e7cd76f00cd396c13e9dc64945573735c5e2eae58c058e52d6e07fb6b6b2ed",
        "md5": "2faac9d9eb204120c159e447ed25bcd8",
        "sha256": "a626e8b7c4cbbd20f2ee3086fbbb8dd12b207bd26965920e43b690d64abde0a7"
      },
      "downloads": -1,
      "filename": "lighttuner-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2faac9d9eb204120c159e447ed25bcd8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 48195,
      "upload_time": "2022-08-09T09:04:01",
      "upload_time_iso_8601": "2022-08-09T09:04:01.090871Z",
      "url": "https://files.pythonhosted.org/packages/85/e7/cd76f00cd396c13e9dc64945573735c5e2eae58c058e52d6e07fb6b6b2ed/lighttuner-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09afde0e7efa33b045838ceef6ee9d07f315a4b0cd9aecdf25f7b8f381c78510",
        "md5": "248cd896b8f15dbadbbe8e37a7a2a282",
        "sha256": "1daf1ff5b7960f4502ad6fcf79d39c4ca612340eb91949a90855e884bdca84a3"
      },
      "downloads": -1,
      "filename": "lighttuner-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "248cd896b8f15dbadbbe8e37a7a2a282",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 38382,
      "upload_time": "2022-08-09T09:04:02",
      "upload_time_iso_8601": "2022-08-09T09:04:02.425184Z",
      "url": "https://files.pythonhosted.org/packages/09/af/de0e7efa33b045838ceef6ee9d07f315a4b0cd9aecdf25f7b8f381c78510/lighttuner-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}