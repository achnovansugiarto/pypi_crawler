{
  "info": {
    "author": "Kasra Hosseini",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<div align=\"center\">\n    <br>\n    <h2>Parallelize Python codes</h2>\n</div>\n\n<p align=\"center\">\n    <a href=\"https://github.com/kasra-hosseini/parhugin/workflows/Continuous%20integration/badge.svg\">\n        <img alt=\"Continuous integration badge\" src=\"https://github.com/kasra-hosseini/parhugin/workflows/Continuous%20integration/badge.svg\">\n    </a>\n    <a href=\"https://github.com/kasra-hosseini/parhugin/blob/main/LICENSE\">\n        <img alt=\"License\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\">\n    </a>\n    <br/>\n</p>\n\n`parhugin` provides functions to:\n\n- [run one or more Python functions in parallel using multiprocessing](#run-one-or-more-python-functions-in-parallel-using-multiprocessing)\n\n\nTable of contents\n-----------------\n\n- [Installation and setup](#installation)\n- [Run one or more Python functions in parallel using multiprocessing](#run-one-or-more-python-functions-in-parallel-using-multiprocessing)\n- [Complete examples](#complete-examples)\n\n## Installation\n\n1. **install using pip**\n\n    ```bash\n    pip install git+https://github.com/kasra-hosseini/parhugin.git\n    ```\n\n2. **install parhugin from the source code**:\n\n    * Clone parhugin source code:\n\n    ```bash\n    git clone https://github.com/kasra-hosseini/parhugin.git \n    ```\n\n    * Install parhugin:\n\n    ```\n    cd /path/to/my/parhugin\n    python setup.py install\n    ```\n\n    Alternatively:\n\n    ```\n    cd /path/to/my/parhugin\n    pip install -v -e .\n    ```\n\n## Run one or more Python functions in parallel using multiprocessing \n\nIn this scenario, we have:\n\n- one or more functions\n- a list of jobs to be run in parallel, e.g.: \n```python\n[   \n    [func1, (arg1_1, arg2_1, arg3_1)],\n    [func1, (arg1_2, arg2_2, arg3_2)],  \n    [func2, (...)],\n    ...\n] \n```\n⚠️ If a function has only one argument, do not forget to add it to the above list either `[func_one_arg, [arg1]]` or `[func_one_arg, (arg1,)]`.\n\n- User specifies the number of processes to be run in parallel.\n- `parhugin` parallelizes by distributing the jobs following FIFO on the requested number of processes.\n\n### Example 1\n\nFirst, we import `parhugin` and define two simple functions called `func1` and `func2`. These functions can have different number of arguments.\n\n```python\nfrom parhugin import multiFunc\nimport time\n\n# Define two simple functions, func1 and func2 \n# Note that functions can have different number of arguments\ndef func1(a, b, sleep=0.5, info=\"func1\"): \n    print(f\"start, {info} calculated {a+b}\")\n    time.sleep(sleep)\n    print(f\"end, {info}\")\n\ndef func2(a, sleep=0.2, info=\"func2\"): \n    print(f\"start, {info} prints {a}\")\n    time.sleep(sleep)\n    print(f\"end, {info}\")\n```\n\nNext, we specify the number of processes to run in parallel. This can be the number of processors if the jobs are CPU-intensive. Otherwise, you can set this to any other values.\n\n```python\nmyproc = multiFunc(num_req_p=10)\n```\n\nNow, we need to add jobs to be run in parallel. There are different ways to do this:\n\n1) Add one function and its arguments:\n\n```python\nmyproc.add_job(target_func=func1, target_args=(2, 3, 0.5, \"func1\"))\nprint(myproc)\n```\n\nSimilarly, we can add another function:\n\n```python\nmyproc.add_job(target_func=func2, target_args=(10, 0.2, \"func2\"))\nprint(myproc)\n```\n\n2) Create a list of jobs:\n\n```python\nlist_jobs = []\nfor i in range(1, 20):\n    list_jobs.append([func2, (f\"{i}\", 0.2, \"func2\")])\n\n# and then adding them to myproc\nmyproc.add_list_jobs(list_jobs)\nprint(myproc)\n```\n\nFinally, run the jobs on the requested number of processes:\n\n```python\nmyproc.run_jobs()\n```\n\nIt is also possible to change the verbosity level of the output by:\n\n```python\nmyproc.run_jobs(verbosity=2)\n```\n\n## Complete examples\n\n### Example 1\n\n```python\nfrom parhugin import multiFunc\nimport time\n\n# Define two simple functions, func1 and func2 \n# Note that functions can have different number of arguments\ndef func1(a, b, sleep=0.5, info=\"func1\"): \n    print(f\"start, {info} calculated {a+b}\")\n    time.sleep(sleep)\n    print(f\"end, {info}\")\n\ndef func2(a, sleep=0.2, info=\"func2\"): \n    print(f\"start, {info} prints {a}\")\n    time.sleep(sleep)\n    print(f\"end, {info}\")\n\nmyproc = multiFunc(num_req_p=10)\nmyproc.add_job(target_func=func1, target_args=(2, 3, 0.5, \"func1\"))\nprint(myproc)\n\nmyproc.add_job(target_func=func2, target_args=(10, 0.2, \"func2\"))\nprint(myproc)\n\nlist_jobs = []\nfor i in range(1, 20):\n    list_jobs.append([func2, (f\"{i}\", 0.2, \"func2\")])\n\n# and then adding them to myproc\nmyproc.add_list_jobs(list_jobs)\nprint(myproc)\n\nmyproc.run_jobs(verbosity=2)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kasra-hosseini/parhugin",
    "keywords": "parallel processing,parallelize,multiprocessing",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parhugin",
    "package_url": "https://pypi.org/project/parhugin/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/parhugin/",
    "project_urls": {
      "Homepage": "https://github.com/kasra-hosseini/parhugin"
    },
    "release_url": "https://pypi.org/project/parhugin/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Parallelize Python codes",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12609782,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b66bf327e1b60a4fdf874f5365e28e71f803a4ea00311b956b15472e3d5d3fd",
          "md5": "4cdc39fa1fea6a1906f7ea41297d2e75",
          "sha256": "edf0e987ceb65826f2ce11b11d9e4aac1a128e6ce2efea48d428ac4202720fcd"
        },
        "downloads": -1,
        "filename": "parhugin-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4cdc39fa1fea6a1906f7ea41297d2e75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6343,
        "upload_time": "2022-01-18T17:08:13",
        "upload_time_iso_8601": "2022-01-18T17:08:13.387915Z",
        "url": "https://files.pythonhosted.org/packages/1b/66/bf327e1b60a4fdf874f5365e28e71f803a4ea00311b956b15472e3d5d3fd/parhugin-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b66bf327e1b60a4fdf874f5365e28e71f803a4ea00311b956b15472e3d5d3fd",
        "md5": "4cdc39fa1fea6a1906f7ea41297d2e75",
        "sha256": "edf0e987ceb65826f2ce11b11d9e4aac1a128e6ce2efea48d428ac4202720fcd"
      },
      "downloads": -1,
      "filename": "parhugin-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4cdc39fa1fea6a1906f7ea41297d2e75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6343,
      "upload_time": "2022-01-18T17:08:13",
      "upload_time_iso_8601": "2022-01-18T17:08:13.387915Z",
      "url": "https://files.pythonhosted.org/packages/1b/66/bf327e1b60a4fdf874f5365e28e71f803a4ea00311b956b15472e3d5d3fd/parhugin-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}