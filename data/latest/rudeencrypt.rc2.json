{
  "info": {
    "author": "Hengyue Li",
    "author_email": "hengyue.li@hengyue.li",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# rudeencrypt\n\nStore a python dictionary into a file with a password (by AES256). The interaction is between the file and memory directly(No decrypted file.tmp will be created). The encrypted data is saved by string in a file on the disc. One can load the data from a disc into a python dictionary and use it in the memory. The core part of this package is make use of the answer in [StackOverflow](https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256).\n\n将Python中的字典整个转换成字符串然后对字符串加密后保存在硬盘上。所有读写的中间过程都不落盘。\n\n\n\n## Install\n\n```\npip install rudeencrypt\n```\n\n\n## Usage\nA (set of) python dict is collected in a \"container\" which will be operated directly.\n\n\n\n## example and API\n\n```\nfrom rudeencrypt import Encryption\n```\n\n\n\n\nCreate a container\n```\n#-----------------------------------------------------\n# create a new filedict (with password = 'password')\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\n# a file is created. One can check the context in it.\n```\n\n\n\nConnect to it (verify password)\n```\n#-----------------------------------------------------\n# connect to a filedict\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\nprint(container.IsConnected())\n# a filedict is connect. One can try another password.\n```\n\n\n\n\nCreate a table (a table is a python dict)  \n```\n#-----------------------------------------------------\n# create a table\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\ncontainer.CreateTableIfNotExist('testTable')\n# remenber to save it\ncontainer.Save()\n```\n\n\nShow all tables\n```\n#-----------------------------------------------------\n# get all the tables in container\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\n# return a python dict 'dict_keys' type\nl = container.GetTableList()\nprint(l)\n```\n\n\nGet a python dict in the container. One can have operations on it.\n```\n#-----------------------------------------------------\n# get a normal python dict in the container so one can interact with it\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\nd = container.GetTable('testTable')\nprint(type(d),d)\n# ---  inser an element\nd['new'] = 'hellow'\n# remenber to save it\ncontainer.Save()\n```\n\nRemove a table\n```\n#-----------------------------------------------------\n# remove a table\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\ncontainer.DropTable('testTable')\n# remenber to save it\ncontainer.Save()\n```\n\n\n\n\nReset a new password\n```\n#-----------------------------------------------------\n# reset password\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\ncontainer.SetPassword('newpassword')\n# remenber to save it\ncontainer.Save()\n# the container itself is already renewed\nprint( container.IsConnected() )\n```\n\nGet encrypted file (careful to use it): save the decrypted data into a file\n```\n#----------------------------------------------------\n# password is also saved into the file!!!\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\ncontainer.SaveDecryptedDataToFile('DecryptedData.txt')\n```\n\n\nRead data from a decrypted file:\n```\n#----------------------------------------------------\n# The current file will be overrided.\ncontainer = Encryption('encrypted.dat','password')\ncontainer.connect()\ncontainer.ReadDecryptedDataFile('DecryptedData.txt')\n```\n\n`SaveDecryptedDataToFile` and `ReadDecryptedDataFile` can be used to backup and restore.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HengyueLi/rudeencrypt",
    "keywords": "",
    "license": "LICENSE.md",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rudeencrypt",
    "package_url": "https://pypi.org/project/rudeencrypt/",
    "platform": "",
    "project_url": "https://pypi.org/project/rudeencrypt/",
    "project_urls": {
      "Homepage": "https://github.com/HengyueLi/rudeencrypt"
    },
    "release_url": "https://pypi.org/project/rudeencrypt/2021.5.15.1110/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A simple API used to encrypt the python dict into a file using AES256.",
    "version": "2021.5.15.1110",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10362637,
  "releases": {
    "2021.3.13.1253": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74f5bb7ed653c685cf814e9550ed94097abfe2c54bc8b38bfddc56ea63145e05",
          "md5": "8e410c73eb45a9226b9506885723dd01",
          "sha256": "18c58cdbd49ef0c97e3ea46090770fd86cddaf6349e45e3afec2974bd2dc2d73"
        },
        "downloads": -1,
        "filename": "rudeencrypt-2021.3.13.1253.tar.gz",
        "has_sig": false,
        "md5_digest": "8e410c73eb45a9226b9506885723dd01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5667,
        "upload_time": "2021-03-13T04:53:35",
        "upload_time_iso_8601": "2021-03-13T04:53:35.470676Z",
        "url": "https://files.pythonhosted.org/packages/74/f5/bb7ed653c685cf814e9550ed94097abfe2c54bc8b38bfddc56ea63145e05/rudeencrypt-2021.3.13.1253.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.5.15.1110": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20a91f564c897f66f35127bd9d3ea18c51faf93ef1b9318de40f459faedfb915",
          "md5": "5b52cd8ca24504bdec87a8d7132fc702",
          "sha256": "33532841b5ccfb64427f2b9b7b81a45dc84578724214b174bef7ec59bff12dec"
        },
        "downloads": -1,
        "filename": "rudeencrypt-2021.5.15.1110.tar.gz",
        "has_sig": false,
        "md5_digest": "5b52cd8ca24504bdec87a8d7132fc702",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5756,
        "upload_time": "2021-05-15T03:10:04",
        "upload_time_iso_8601": "2021-05-15T03:10:04.372539Z",
        "url": "https://files.pythonhosted.org/packages/20/a9/1f564c897f66f35127bd9d3ea18c51faf93ef1b9318de40f459faedfb915/rudeencrypt-2021.5.15.1110.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20a91f564c897f66f35127bd9d3ea18c51faf93ef1b9318de40f459faedfb915",
        "md5": "5b52cd8ca24504bdec87a8d7132fc702",
        "sha256": "33532841b5ccfb64427f2b9b7b81a45dc84578724214b174bef7ec59bff12dec"
      },
      "downloads": -1,
      "filename": "rudeencrypt-2021.5.15.1110.tar.gz",
      "has_sig": false,
      "md5_digest": "5b52cd8ca24504bdec87a8d7132fc702",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 5756,
      "upload_time": "2021-05-15T03:10:04",
      "upload_time_iso_8601": "2021-05-15T03:10:04.372539Z",
      "url": "https://files.pythonhosted.org/packages/20/a9/1f564c897f66f35127bd9d3ea18c51faf93ef1b9318de40f459faedfb915/rudeencrypt-2021.5.15.1110.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}