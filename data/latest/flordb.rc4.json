{
  "info": {
    "author": "Rolando Garcia",
    "author_email": "rogarcia@berkeley.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "FlorDB: Nimble Experiment Management for Iterative ML\n================================\n\nFlor (for \"fast low-overhead recovery\") is a record-replay system for deep learning, and other forms of machine learning that train models on GPUs. Flor was developed to speed-up hindsight logging: a cyclic-debugging practice that involves adding logging statements *after* encountering a surprise, and efficiently re-training with more logging. Flor takes low-overhead checkpoints during training, or the record phase, and uses those checkpoints for replay speedups based on memoization and parallelism.\n\nFlorDB integrates Flor, `git` and `sqlite3` to manage model developer's logs, execution data, versions of code, and training checkpoints. In addition to serving as an experiment management solution for ML Engineers, FlorDB extends hindsight logging across model trainging versions for the retroactive evaluation of iterative ML.\n\nFlor and FlorDB are software developed at UC Berkeley's [RISE](https://rise.cs.berkeley.edu/) Lab.\n# Installation\n\n```bash\npip install flordb\n```\n\n# First run\n\nRun the ``examples/rnn.py`` script to test your installation. \nThis script will train a small linear model on MNIST.\nFLOR shadow branches permit us to commit your work\nautomatically on every run, without interfering with your \nother commits. You can later review and merge the flor shadow branch as you would any other git branch.\n\n```bash\ngit checkout -b flor.shadow\npython examples/rnn.py --flor readme\n```\n\nWhen finished, you will have committed to the shadow branch and written execution metadata into a `.flor` directory in your current directory. Additionally, flor created a directory tree in your HOME to organize your experiments. You can find our running experiment as follows:\n\n```bash\nls ~/.flor/\n```\nConfirm that Flor saved checkpoints of the ``examples/rnn.py`` execution on your home directory.\nFlor will access and interpret contents of ``~/.flor`` automatically. \nYou should routinely clear this stash or spool it to the cloud to clear up disk space.\n\n# View your experiment history\nFrom the same directory you ran the examples above, open an iPython terminal, then load and pivot the log records.\n\n```ipython\nIn [1]: from flor import full_pivot, log_records\nIn [2]: full_pivot(log_records())\nOut[2]: \n     runid              tstamp  epoch  step device learning_rate                 loss\n0   readme 2023-03-12 12:23:53      1   100    cpu          0.01   0.5304957032203674\n1   readme 2023-03-12 12:23:53      1   200    cpu          0.01  0.21829535067081451\n2   readme 2023-03-12 12:23:53      1   300    cpu          0.01  0.15856705605983734\n3   readme 2023-03-12 12:23:53      1   400    cpu          0.01  0.11441942304372787\n4   readme 2023-03-12 12:23:53      1   500    cpu          0.01  0.06835074722766876\n5   readme 2023-03-12 12:23:53      1   600    cpu          0.01  0.13750575482845306\n6   readme 2023-03-12 12:23:53      2   100    cpu          0.01  0.11708579957485199\n7   readme 2023-03-12 12:23:53      2   200    cpu          0.01  0.08852845430374146\n8   readme 2023-03-12 12:23:53      2   300    cpu          0.01  0.16527307033538818\n9   readme 2023-03-12 12:23:53      2   400    cpu          0.01  0.11036019027233124\n10  readme 2023-03-12 12:23:53      2   500    cpu          0.01  0.05740281194448471\n11  readme 2023-03-12 12:23:53      2   600    cpu          0.01  0.07785198092460632\n\n```\n\n# Model Training Kit (MTK)\nThe MTK includes utilities for serializing and checkpointing PyTorch state,\nand utilities for resuming, auto-parallelizing, and memoizing executions from checkpoint.\nThe model developer passes objects for checkpointing to flor,\nand gives it control over loop iterators by calling `MTK.checkpoints`\nand `MTK.loop` as follows:\n\n```python\nfrom flor import MTK as Flor\n\nimport torch\n\ntrainloader: torch.utils.data.DataLoader\ntestloader:  torch.utils.data.DataLoader\noptimizer:   torch.optim.Optimizer\nnet:         torch.nn.Module\ncriterion:   torch.nn._Loss\n\nFlor.checkpoints(net, optimizer)\nfor epoch in Flor.loop(range(...)):\n    for data in Flor.loop(trainloader):\n        inputs, labels = data\n        optimizer.zero_grad()\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n    eval(net, testloader)\n```\nAs shown, we pass the neural network and optimizer to Flor \nfor checkpointing with `Flor.checkpoints(net, optimizer)`.\nWe wrap both the nested training loop and main loop with \n`Flor.loop`. This lets Flor jump to an arbitrary epoch\nusing checkpointed state, \nand skip the nested training loop when intermediate\nstate isn't probed.\n\n\n# Hindsight Logging\n\n```python\nfrom flor import MTK as Flor\nimport torch\n\ntrainloader: torch.utils.data.DataLoader\ntestloader:  torch.utils.data.DataLoader\noptimizer:   torch.optim.Optimizer\nnet:         torch.nn.Module\ncriterion:   torch.nn._Loss\n\nfor epoch in Flor.loop(range(...)):\n    for batch in Flor.loop(trainloader):\n        ...\n    eval(net, testloader)\n    log_confusion_matrix(net, testloader)\n```\n\nSuppose you want to view a confusion matrix as it changes\nthroughout training.\nAdd the code to generate the confusion matrix, as sugared above.\n\n```bash\npython3 mytrain.py --replay_flor PID/NGPUS [your_flags]\n```\n\nAs before, you tell FLOR to run in replay mode by setting ``--replay_flor``.\nYou'll also tell FLOR how many GPUs from the pool to use for parallelism,\nand you'll dispatch this script simultaneously, varying the ``pid:<int>``\nto span all the GPUs. To run segment 3 out of 5 segments, you would write: ``--replay_flor 3/5``.\n\nIf instead of replaying all of training you wish to re-execute only a fraction of the epochs\nyou can do this by setting the value of ``ngpus`` and ``pid`` respectively.\nSuppose you want to run the tenth epoch of a training job that ran for 200 epochs. You would set\n``pid:9``and ``ngpus:200``.\n\n## Publications\n\nTo cite this work, please refer to the [Hindsight Logging](http://www.vldb.org/pvldb/vol14/p682-garcia.pdf) paper (VLDB '21).\n\nFLOR is open source software developed at UC Berkeley. \n[Joe Hellerstein](https://dsf.berkeley.edu/jmh/) (databases), [Joey Gonzalez](http://people.eecs.berkeley.edu/~jegonzal/) (machine learning), and [Koushik Sen](https://people.eecs.berkeley.edu/~ksen) (programming languages) \nare the primary faculty members leading this work.\n\nThis work is released as part of [Rolando Garcia](https://rlnsanz.github.io/)'s doctoral dissertation at UC Berkeley,\nand has been the subject of study by Eric Liu and Anusha Dandamudi, \nboth of whom completed their master's theses on FLOR.\nOur list of publications are reproduced below.\nFinally, we thank [Vikram Sreekanti](https://www.vikrams.io/), [Dan Crankshaw](https://dancrankshaw.com/), and [Neeraja Yadwadkar](https://cs.stanford.edu/~neeraja/) for guidance, comments, and advice.\n[Bobby Yan](https://bobbyy.org/) was instrumental in the development of FLOR and its corresponding experimental evaluation.\n\n* [Hindsight Logging for Model Training](http://www.vldb.org/pvldb/vol14/p682-garcia.pdf). _R Garcia, E Liu, V Sreekanti, B Yan, A Dandamudi, JE Gonzalez, JM Hellerstein, K Sen_. The VLDB Journal, 2021.\n* [Fast Low-Overhead Logging Extending Time](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2021/EECS-2021-117.html). _A Dandamudi_. EECS Department, UC Berkeley Technical Report, 2021.\n* [Low Overhead Materialization with FLOR](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2020/EECS-2020-79.html). _E Liu_. EECS Department, UC Berkeley Technical Report, 2020. \n\n\n## License\nFLOR is licensed under the [Apache v2 License](https://www.apache.org/licenses/LICENSE-2.0).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ucbrise/flor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flordb",
    "package_url": "https://pypi.org/project/flordb/",
    "platform": null,
    "project_url": "https://pypi.org/project/flordb/",
    "project_urls": {
      "Homepage": "https://github.com/ucbrise/flor"
    },
    "release_url": "https://pypi.org/project/flordb/2.6.0/",
    "requires_dist": [
      "GitPython",
      "cloudpickle",
      "astunparse",
      "pandas",
      "bidict (==0.21.3)",
      "apted"
    ],
    "requires_python": ">=3.9",
    "summary": "Fast Low-Overhead Recovery",
    "version": "2.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17415661,
  "releases": {
    "2.5.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2d34cead96542a5a22bf65b08cc7b032d244eb94aaa446d2c2397ae8a74c901",
          "md5": "e9b5c1e071de09d7c2b1723932a277b2",
          "sha256": "fee0c3f875fe3688e9a513c88dfd4e2bf867ba1c51b0071f81cd05ac821453d4"
        },
        "downloads": -1,
        "filename": "flordb-2.5.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9b5c1e071de09d7c2b1723932a277b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 53474,
        "upload_time": "2023-03-09T23:29:35",
        "upload_time_iso_8601": "2023-03-09T23:29:35.573786Z",
        "url": "https://files.pythonhosted.org/packages/b2/d3/4cead96542a5a22bf65b08cc7b032d244eb94aaa446d2c2397ae8a74c901/flordb-2.5.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69312709bce6d8da77832c8dca1886fce7dd685b4305c66b3087b307bb733f09",
          "md5": "61a5692a5729f18146240f70e95f0dd2",
          "sha256": "2c32e4b4dc9f33fc8eda2e49f5d85eddefef28ac5e148a4d6d1e5888f65aafbc"
        },
        "downloads": -1,
        "filename": "flordb-2.5.11.tar.gz",
        "has_sig": false,
        "md5_digest": "61a5692a5729f18146240f70e95f0dd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 41680,
        "upload_time": "2023-03-09T23:29:37",
        "upload_time_iso_8601": "2023-03-09T23:29:37.262125Z",
        "url": "https://files.pythonhosted.org/packages/69/31/2709bce6d8da77832c8dca1886fce7dd685b4305c66b3087b307bb733f09/flordb-2.5.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c184a277040a08d079ba2c4ce331b056febdd0213d4e88e7821251d5c63cca65",
          "md5": "6fd07e9ac32cc9658d455e3a981343bf",
          "sha256": "7fd3511dc8f37c4cc72808f35e1fe1b7582e09f7cf4e4c54d8e5321c838c0ed2"
        },
        "downloads": -1,
        "filename": "flordb-2.5.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fd07e9ac32cc9658d455e3a981343bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 53312,
        "upload_time": "2023-03-16T16:37:15",
        "upload_time_iso_8601": "2023-03-16T16:37:15.076991Z",
        "url": "https://files.pythonhosted.org/packages/c1/84/a277040a08d079ba2c4ce331b056febdd0213d4e88e7821251d5c63cca65/flordb-2.5.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e12804da56d0c0ab5d8faedbcaf90a937c49c3c063ebdbfb6bb0cc2d5cd59233",
          "md5": "80421cc29975ea45e25c14ace67269ad",
          "sha256": "d0a5b49e62fbbf0707ee4e0556db11b5ba09ecfa48d4de0c10e53276cec8bc8a"
        },
        "downloads": -1,
        "filename": "flordb-2.5.12.tar.gz",
        "has_sig": false,
        "md5_digest": "80421cc29975ea45e25c14ace67269ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 40948,
        "upload_time": "2023-03-16T16:37:17",
        "upload_time_iso_8601": "2023-03-16T16:37:17.203382Z",
        "url": "https://files.pythonhosted.org/packages/e1/28/04da56d0c0ab5d8faedbcaf90a937c49c3c063ebdbfb6bb0cc2d5cd59233/flordb-2.5.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4f16824eb487e17516c878307cfe5c8f47d1040cf6dfed3055f8f60154cd64c",
          "md5": "54195a057cdb7a55a2dbb6ec7b02e8cc",
          "sha256": "50cb47f55285a302f6200ed3f3acba651571a78e5f2912990c6b1a4ff0cfecbd"
        },
        "downloads": -1,
        "filename": "flordb-2.5.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54195a057cdb7a55a2dbb6ec7b02e8cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 52855,
        "upload_time": "2023-03-22T14:09:21",
        "upload_time_iso_8601": "2023-03-22T14:09:21.539904Z",
        "url": "https://files.pythonhosted.org/packages/b4/f1/6824eb487e17516c878307cfe5c8f47d1040cf6dfed3055f8f60154cd64c/flordb-2.5.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebf9264c42780cbd289f20bcc60ad77e0260e9ca5c6e722aa6760319a247e78a",
          "md5": "13cb532c2a15641a69ee67cc4ee9a328",
          "sha256": "166a0e4851df1606b8d1e1180c8341497a56947b7e5c77dd56178eb712df8edc"
        },
        "downloads": -1,
        "filename": "flordb-2.5.13.tar.gz",
        "has_sig": false,
        "md5_digest": "13cb532c2a15641a69ee67cc4ee9a328",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 40855,
        "upload_time": "2023-03-22T14:09:23",
        "upload_time_iso_8601": "2023-03-22T14:09:23.900239Z",
        "url": "https://files.pythonhosted.org/packages/eb/f9/264c42780cbd289f20bcc60ad77e0260e9ca5c6e722aa6760319a247e78a/flordb-2.5.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63768213fe4e6390aa2e66cdbfc3b3296f7ccc2ffc8c7d3b756eb4f19869f980",
          "md5": "286db29f05403f307c081b4361fab065",
          "sha256": "4307d8b3911152b9544c75836732154b6e4711640809190a0e210401641eb2d1"
        },
        "downloads": -1,
        "filename": "flordb-2.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "286db29f05403f307c081b4361fab065",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 53305,
        "upload_time": "2023-03-23T13:20:50",
        "upload_time_iso_8601": "2023-03-23T13:20:50.458995Z",
        "url": "https://files.pythonhosted.org/packages/63/76/8213fe4e6390aa2e66cdbfc3b3296f7ccc2ffc8c7d3b756eb4f19869f980/flordb-2.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c4ffbca5f400b0ccad0edfa0519cffe2095a71f835dedc5c7207c3167ab1b7f",
          "md5": "97b5c1bf813d29673fb75aa0be349d1a",
          "sha256": "2a0c770b1614f362d9f18cee316fce71cb4da3241f851255f6d5dd4946e8d700"
        },
        "downloads": -1,
        "filename": "flordb-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97b5c1bf813d29673fb75aa0be349d1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 41311,
        "upload_time": "2023-03-23T13:20:52",
        "upload_time_iso_8601": "2023-03-23T13:20:52.762604Z",
        "url": "https://files.pythonhosted.org/packages/2c/4f/fbca5f400b0ccad0edfa0519cffe2095a71f835dedc5c7207c3167ab1b7f/flordb-2.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63768213fe4e6390aa2e66cdbfc3b3296f7ccc2ffc8c7d3b756eb4f19869f980",
        "md5": "286db29f05403f307c081b4361fab065",
        "sha256": "4307d8b3911152b9544c75836732154b6e4711640809190a0e210401641eb2d1"
      },
      "downloads": -1,
      "filename": "flordb-2.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "286db29f05403f307c081b4361fab065",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 53305,
      "upload_time": "2023-03-23T13:20:50",
      "upload_time_iso_8601": "2023-03-23T13:20:50.458995Z",
      "url": "https://files.pythonhosted.org/packages/63/76/8213fe4e6390aa2e66cdbfc3b3296f7ccc2ffc8c7d3b756eb4f19869f980/flordb-2.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c4ffbca5f400b0ccad0edfa0519cffe2095a71f835dedc5c7207c3167ab1b7f",
        "md5": "97b5c1bf813d29673fb75aa0be349d1a",
        "sha256": "2a0c770b1614f362d9f18cee316fce71cb4da3241f851255f6d5dd4946e8d700"
      },
      "downloads": -1,
      "filename": "flordb-2.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "97b5c1bf813d29673fb75aa0be349d1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 41311,
      "upload_time": "2023-03-23T13:20:52",
      "upload_time_iso_8601": "2023-03-23T13:20:52.762604Z",
      "url": "https://files.pythonhosted.org/packages/2c/4f/fbca5f400b0ccad0edfa0519cffe2095a71f835dedc5c7207c3167ab1b7f/flordb-2.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}