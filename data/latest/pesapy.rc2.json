{
  "info": {
    "author": "David Mutune",
    "author_email": "davidmutune200@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# pesapy version 1.0.0\n\n[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?)](https://github.com/tterb/atomic-design-ui/blob/master/LICENSEs)\n\n\npesapy is an unofficial M-Pesa API wrapper. Its saves you all the hardwork and pain\\\nthat most developers go through when intergrating the [Safaricom M-Pesa](https://developer.safaricom.co.ke/) API into\ntheir systems.\\\nThis library does all the hardwork for you and exposes a simple interface that easy to use and\\\nmakes your code clean and maintainable.\n\n_M-Pesa is Africa's largest mobile money platform with more than 40 million users \\\nin seven African countries where it operates, Hence the need to understand its APIs._\n#### Covers the following transactions types:\n\n\n* Mpesa Express/lipa na mpesa online/STK Push\n* Reversals\n* B2C(Business To Customer)\n* B2B(Business To Business)\n* C2B(Customer To Business)\n* Transaction status\n* Account Balance\n\n# Getting Started with mpesa_py\n\n## Installation\n\nInstall mpesa_py with pip\n\n```bash\n  pip install mpesa_py\n```\nNavigate to the root folder of your project and create a .env file that will\nhold all the environment variables required by mpesa_py.\\\nFor  example on a linux \nsystem:\n```bash\n  cd  /path_to_root_folder/\n  touch .env\n```\n_Dont forget the dot (.) before env when creating the .env file_\n\nUsing your favorite editor open  the .env file and paste and fill in the following required\\\nenvironment variables\n```python\nBASE_URL=https://api.safaricom.co.ke\nCONSUMER_KEY=\nCONSUMER_SECRET=\nLIPA_NA_MPESA_PASSKEY=\nMPESA_EXPRESS_CALLBACK_URL=\nMPESA_EXPRESS_BUSINESS_SHORTCODE=\n\nC2B_RESPONSE_TYPE=Completed\nC2B_SHORTCODE=600981\n\nB2C_INITIATOR_PASSWORD=\nB2C_INITIATOR_NAME=\nB2C_SHORTCODE=\nB2C_QUEUE_TIMEOUT_URL=\nB2C_RESULT_URL=\n\nB2B_INITIATOR_PASSWORD=\nB2B_INITIATOR_NAME\nB2B_SHORTCODE=\nB2B_QUEUE_TIMEOUT_URL=\nB2B_RESULT_URL=\nB2B_SENDER_TYPE=\n\n\nREVERSAL_INITIATOR_NAME=\nREVERSAL_INITIATOR_PASSWD=\nREVERSAL_RECEIVER_PARTY=\nREVERSAL_RECEIVER_IDENTIFIER_TYPE=\nREVERSAL_RESULT_URL=\nREVERSAL_QUEUE_TIMEOUT_URL\n\nTRANS_STATUS_INITIATOR_NAME=\nTRANS_STATUS_INITIATOR_PASSWD=\nTRANS_STATUS_BUSINESS_SHORTCODE=\nTRANS_STATUS_IDENTIFIER_TYPE=\nTRANS_STATUS_RESULT_URL=\nTRANS_STATUS_QUEUE_TIMEOUT_URL=\n\nACC_BAL_INITIATOR_NAME=\nACC_BAL_INITIATOR_PASSWD=\nACC_BAL_RESULT_URL=\nACC_BAL_QUEUE_TIMEOUT_URL=\n\nPUBKEY_PATH = \n```\n\n## Environment variables Explanation\n***BASE_URL*** --- Is the main URL for Safaricom M-Pesa API.\\\n_production_: https://api.safaricom.co.ke\\\n_development_:https://sandbox.safaricom.co.ke\n***CONSUMER_KEY and CONSUMER_SECRET*** ---Is your application's consumer key and secret respectively.\\\n They are provided by safaricom in the developers portal https://developer.safaricom.co.ke/MyApps. \\\n Used to generate access token.\\\n***MPESA_EXPRESS_API_ENDPOINT*** --- Is Safaricom API endpoint for mpesa express transactions.\\\n**MPESA_EXPRESS_CALLBACK_URL** --- A CallBack URL is a valid secure URL that is used to receive notifications from M-Pesa API. \\\nIt is the endpoint to which the results will be sent by M-Pesa API.\\\n***MPESA_EXPRESS_BUSINESS_SHORTCODE*** --- This is organizations shortcode (Paybill or Buygoods - A 5 to 7 digit account number). \\\nUsed to identify an organization and receive the transaction.\\\n***LIPA_NA_MPESA_PASSKEY*** --- Used to generate the request password in combination with the business shortcode\n\n***C2B_REGISTRATION_API_ENDPOINT*** --- M-pesa api endpoint for customer to business transactions.\\\nIt is used to register both the confirmatation and validation URLs.\\\n***C2B_RESPONSE_TYPE*** - This parameter specifies what is to happen if for any reason the validation URL is nor reachable.\\\n Note that, This is the default action value that determines what MPesa will do in the scenario that your endpoint is \\\n unreachable or is unable to respond on time. \\\n Only two values are allowed: Completed or Cancelled. \\\n Completed means MPesa will automatically complete your transaction, \\\n whereas Cancelled means MPesa will automatically cancel the transaction, in the event MPesa is unable to\\\n  reach your Validation URL.\\\n***C2B_SHORTCODE*** --- Is the shortcode of the organization. eg 600981\\\n\\\n***B2C_INITIATOR_NAME*** --- The username of the M-Pesa Business to Customer(B2C) account API operator. \\\n NOTE: the access channel for this operator must be API and the account must be in active status.\\\n***B2C_INITIATOR_PASSWORD*** --- Used in combination with the public key certificate\nto produce the security credentials.\\\n***B2C_SHORTCODE*** --- This is the B2C organization shortcode from which the money is to be sent.\\\n***B2C_QUEUE_TIMEOUT_URL*** --- This is the URL to be specified in your request that will be used by API Proxy to send notification \\\nincase the payment request is timed out while awaiting processing in the queue.\\\n***B2C_RESULT_URL*** --- This is the URL to be specified in your request that will be used by M-Pesa to send notification upon processing of the payment request\n\\\n\\\n\\\n***B2B_INITIATOR_PASSWORD*** ---The password for M-Pesa B2B account API operator\\\n***B2B_INITIATOR_NAME*** --- The username for M-Pesa B2B account API operator\\\n***B2B_SHORTCODE*** --- This is the B2B organization shortcode from which the money is to be sent\\\n***B2B_SENDER_TYPE*** ---  Type of organization sending the transaction\\\n1 – MSISDN, 2 – Till Number, 4 – Organization short code\\\n***B2B_RESULT_URL*** --- The path that stores information of transaction after it has been\\\nprocessed by M-Pesa\\\n***B2B_QUEUE_TIMEOUT_URL***---The path that stores information of time out transaction\n\\\n\\\n***REVERSAL_INITIATOR_NAME*** ---The username for M-Pesa reversal account API operator\n***REVERSAL_INITIATOR_PASSWD*** ---The password for M-Pesa reversal account API operator\n***REVERSAL_RECEIVER_PARTY*** ---Shortcode for the organization initiating the reversal\n***REVERSAL_RECEIVER_IDENTIFIER_TYPE*** ---Type of organization receiving the transaction. Always set to 11.\n\\\n\\\n***TRANS_STATUS_IDENTIFIER_TYPE*** ---Type of organization sending the transaction\n1 – MSISDN, 2 – Till Number, 4 – Organization short code\n\\\n***PUBKEY_PATH*** -- The **absolute** path to the file containing your public key certificate. A pem file. \\\nThis must be downloaded from the daraja api portal:\nsandbox [link](https://developer.safaricom.co.ke/api/v1/GenerateSecurityCredential/SandboxCertificate.cer)\n,production [link](https://developer.safaricom.co.ke/api/v1/GenerateSecurityCredential/ProductionCertificate.cer)\n\n\n\n\n\n## Usage/Examples\nmpesa_py library contains the following classes each with its own process_transaction\nmethod that processes the transaction.\n* C2B\n* B2C\n* B2B\n* TransStatus\n* Reversal\n\n1. ### STK push/Mpesa Express/lipa na mpesa online\nIt is used to send a  payment prompt on the customers phone (Popularly known as STK Push Prompt) \\\nto your customer's M-PESA registered phone number requesting them to enter their M-PESA pin to \\\nauthorize and complete a payment.\n\nThe process_transaction method of MpesaExpress class takes the following key word arguments.\n\n***amount*** --- Money that customer pays to the Shorcode. Only whole numbers are supported.\n\n***customer_phone_no*** ---The phone number sending money. The parameter expected is a Valid Safaricom Mobile Number that is M-Pesa registered. \\\nMust have the following format 2547XXXXXXXX\n\n***short_code*** ---The organization receiving the funds. The parameter expected is a 5 to 7 Shortcode. \\\n This can be the same as BusinessShortCode value.\n\n***account_reference*** --- Account Reference: This is an Alpha-Numeric parameter that is defined by your system as an Identifier \\\nof the transaction for CustomerPayBillOnline transaction type. \\\n Along with the business name, this value is also displayed to the customer in the STK Pin Prompt message. Maximum of 12 characters\n\n***transaction_desc*** --- This is any additional information/comment that can be sent along with the request from your system. \\\nMaximum of 13 Characters\n\n\n#### Using mpesa_py in interactive python mode(stk push)\n```python\n>>>from mpesa_py.mpesa_express import MpesaExpress\n>>>MpesaExpress.process_transaction(\n    amount=\"1\", phone_number=\"254741937028\", account_reference=\"test_api\",\n    transaction_desc=\"pay school fees\")\n>>>>\n\n```\n\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/mpesaexpress.png)\n\nThe return value of the method MpesaExpress.process_transaction is a json string of the\nfollowing format on success\n```json\n{'MerchantRequestID': '117890-42812180-1', 'CheckoutRequestID': 'ws_CO_021020211021428942',\n 'ResponseCode': '0', 'ResponseDescription': 'Success. Request accepted for processing', \n 'CustomerMessage': 'Success. Request accepted for processing'\n }\n```\n\n\n#### sample Python script.\n\n```python\nfrom mpesa_py.mpesa_express import MpesaExpress\n\nresp = MpesaExpress.process_transaction(\n    amount=\"1\", phone_number=\"254741937028\", account_reference=\"test_api\",\n    transaction_desc=\"pay school fees\")\nprint(resp)\n\n```\n\n2. ### B2C (Business to customer transaction)\nB2C API is an API used to make payments from a Business to Customers (Pay Outs).\\\nAlso known as Bulk Disbursements\\\nB2C API is used in several scenarios by businesses that require to either make Salary Payments, \\\nCashback payments, Promotional Payments(e.g. betting winning payouts), winnings, \\\nfinancial institutions withdrawal of funds, loan disbursements etc.\n\n\nThe process_transaction method of B2C class takes the following key word arguments.\n\n***command_id*** -- This is a unique command that specifies B2C transaction type \\\nSample values include SalaryPayment, BusinessPayment, PromotionPayment\n\n***amount*** -- The amount of money being sent to the customer.\n\n***phone_number*** -- This is the customer mobile number  to receive the amount.\\\nMust have the following format 2547XXXXXXXX\n\n***remarks*** -- Any additional information to be associated with the transaction\n\n***occasion*** -- Any other additional information to be associated with the transaction.\n\n#### Using mpesa_py in interactive python mode(b2c transaction)\n```python\n>>>from mpesa_py import B2C\n>>> B2C.process_transaction(\n    command_id=\"BusinessPayment\", amount=1000, phone_number=\"254708374149\",\n    remarks=\"Requested on Tuesday\", occassion=\"issue closed\"\n)\n>>>\n\n```\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/b2_c.png)\n\n#### sample python script.\nYou can save the same transaction in a python script and run the script.\n```python\n  from mpesa_py.b2c import B2C\n\n  resp = B2C.process_transaction(\n    command_id=\"BusinessPayment\", amount=1000, phone_number=\"254708374149\",\n    remarks=\"Requested on Tuesday\", occassion=\"issue closed\"\n)\nprint(resp)\n```\n\n3. ### C2B (Customer to Business transaction)\nEnables Payments from Client to Business. A customer initiates a payment request to your Pay Bill or Buy Goods (Till Number) \\\nfrom their phone. Using the Safaricom app or from M-PESA menu in the Sim Tool Kit. \n\nThe process_transaction  method of the C2B class registers your validation URL and\\\nconfirmation url. it takes the following key word arguments.\n\n***confirmation_url*** --\tThis is the URL that receives the confirmation request from API upon payment completion.  \n***validation_url*** -- This is the URL that receives the validation request from API upon payment submission. \\\nThe validation URL is only called if the external validation on the registered shortcode is enabled. (By default External Validation is dissabled)\\\n\nOnce you have successfully registered your URL's a confirmation request will be sent to\\\nyour confirmation_url whenever a client completes a transaction.\n\n#### Using mpesa_py in interactive python mode(C2B transaction)\n```python\n    >>>from mpesa_py.c2b import C2B\n    >>>C2B.process_transaction(\n       confirmation_url=\"https://secure-headland-36393.herokuapp.com/api/payments/c2b-confirmation/\",\n       validation_url=\"https://secure-headland-36393.herokuapp.com/api/payments/c2b-validation/\",\n       )\n    >>>\n```\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/c_2_b.png)\n\n### sample  python script.\n```python\nfrom mpesa_py.c2b import C2B\nresponse = C2B.process_transaction(\n    confirmation_url=\"https://secure-headland-36393.herokuapp.com/api/payments/c2b-confirmation/\",\n    validation_url=\"https://secure-headland-36393.herokuapp.com/api/payments/c2b-validation/\",\n)\nprint(response)\n```\n\nYou can use the simulate method of C2B class to simulate a situation where a customer\\\npays to a paybill from their phone.\n\n```python3\nfrom mpesa_py.c2b import C2B\n\n>>>resp = C2B.simulate(\n    amount=350, customer_phone_no=254708374149,\n    short_code=600981\n     )\n>>>print(resp)\n```\n## Example\n\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/c2b_simulate.png)\n\n4. ### B2B (Business to Business transaction)\n\nThe Business to Business (B2B) API is used to transfer money from one business to another business.\\\nThis API enables the business to pay other businesses.\\\n The transaction flow is the same as the B2C API transaction flow, but this time the Credit Party is another Business/Company/Organization.\\\n It requires the same credentials and information as the B2C API.\\\n For the API to work, the 2 organizations will need to have the B2B product assigned to them, otherwise the transaction request will fail.\n\n The process_transaction method of B2B class takes the following key word arguments.\\\n***command_id**** --- Takes the following values only.\\\n_BusinessPayBill_ : This is a transfer of funds from one Organization's Working Account to another Organization's Utility Account\\\n _BusinessBuyGoods_: A transfer of funds from one Organization's Working Account to another Organization's Merchant Account\\\n _DisburseFundsToBusiness_ : A transfer of funds from one Organization's Utility Account to another Organization's Working Account.\\\n_BusinessToBusinessTransfer_ : A transfer of funds from one Organization's Working Account to another Organization's Working Account.\\\n_MerchantToMerchantTransfer_: A transfer of funds from one Organization's Merchant Account to another Organization's Merchant Account\\\n ***amount*** --- Is the actual transaction amount.\n\n ***credit_party*** --- Shortcode for the organization receiving the funds.\n\n ***b2b_receiver_type***  --- Type of organization receving the transaction\\\n\n ***remarks*** --- Remarks about the transaction.\n\n ***ocassion*** ---Additional information for the transaction. Optional.\n\n\n ## EXAMPLE\n ```python\n>>>from mpesa_py.b2b import B2B\n>>>resp = B2B.process_transaction(\n    command_id=\"BusinessPayBill\", amount=1900,  credit_party=600977, b2b_receiver_type=4,\n    remarks=\"Requested on Tuesday\", ocassion=\"issue closed\", account_reference=\"test_api\"\n    )\n>>>print(resp)\n\n ```\n\n\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/b2b.png)\n\n5. # Reversal\n\nReverses a B2B, B2C or C2B M-Pesa transaction.\\\nThe process_transaction method of this class reverses the transaction.\\\nIt takes the following key word arguments.\\\n***transaction_id*** -- Is the actual transaction id of the transaction you want to\\\nreverse.\\\n***amount*** -- The amount transacted in the transaction to be reversed , down to the cent\\\n***remarks*** -- Comments that are sent along with the transaction.\\\n***occasion*** -- Optional Parameter that contains additional information for the transaction\n\n### Using mpesa_py in interactive python mode(C2B transaction)\n```python\n>>>from mpesa_py.reversal import Reversal\n>>>response = Reversal.process_transaction(\n    transaction_id=\"PIN51HK4SZ\",\n    amount=900,\n    remarks=\"Double repayment\",\n    additional_info=\"first time customer\"\n    )\n>>>print(response)\n```\n\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/reversl.png)\n\n\n6. ## Transaction Status\nChecks the status of a transaction.\\\nThe process_transaction method of this class takes the following key word arguments.\\\n***transaction_id*** -- Is the actual transaction id.\\\n***remarks*** -- Comments that are sent along with the transaction\\\n***Occasion*** -- Any Additional information. Optional\n\nThe result of this transaction will be sent to your rans_status_result_url defined in your\\\nenvironment variables file.\n\n```python\n>>>from mpesa_py.trans_status import TransStatus\n>>>resp = TransStatus.process_transaction(\n          transaction_id=\"PIR81HK5N2\",\n          remarks=\"Double repayment\",\n          Occasion= \"First time customer\"\n          )\n>>>print(resp)\n\n```\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/status.png)\n\n### NOTE: To check the status of an STK push sent to the customer.\nYou can use the trans_status method of MpesaExpress class.\\\nThe method takes a single argument ie checkout_request_id that is always sent back\\\nas a response from the STK/M-Pesa express transaction. This is used to query whether \\\nthe customer did actually complete the STK push sent to their phone number.\n```python\n>>>from mpesa_py.mpesa_express import MpesaExpress\n>>>resp = MpesaExpress.trans_status(\n          checkout_request_id=\"ws_CO_270920212251236524\"\n          )\n>>>print(resp)\n```\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/stk_status.png)\n\nThe above STK push was cancelled by the user as seen from the ResultDesc property\\\nof the response.\n\n7. # Account Balance\n\nChecks the account balance of M-Pesa BuyGoods (Till Number)\\\nThe process transaction method of this class takes the followng keyword arguments\\\n***account_bal_party*** -- Type of organization receiving the transaction eg 600981 for a\\\nbusiness shortcode\n\n***acc_bal_identifier_type*** --- Identifies the type of organization.\\\n1 – MSISDN, 2 – Till Number, 4 – Organization short code\n\n***remarks*** -- Comments that are sent along with the transaction\n\n```python\n>>>from mpesa_py.account_balance import AccountBalance\n>>>resp = AccountBalance.process_transaction(\n          account_bal_party=600981,\n          remarks=\"testing remarks\",\n          acc_bal_identifier_type=4\n          )\n>>>print(resp)\n```\n## Example\n\n![App Screenshot](https://mpesapy.s3.amazonaws.com/static_assets/acc_bal.png)\n\n\n\n\n## LICENCE\n\npesapy  is open-sourced software licensed under the [MIT licence](https://choosealicense.com/licenses/mit/)\n\n## CONTRIBUTING\n\nContributions are always welcome!\n\nSee `contributing.md` for ways to get started.\n\nPlease adhere to this project's `code of conduct`.\n\n\n## AUTHORS\n\n- David Mutune - Full stack Software engineer  [instagram](https://www.instagram.com/david__mutune/)-----[github](https://www.github.com/kimengu-david)-----[twitter](https://twitter.com/David__mutune)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kimengu-david/mpesa_py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pesapy",
    "package_url": "https://pypi.org/project/pesapy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pesapy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kimengu-david/mpesa_py/issues",
      "Homepage": "https://github.com/kimengu-david/mpesa_py"
    },
    "release_url": "https://pypi.org/project/pesapy/0.0.3/",
    "requires_dist": [
      "pycryptodome",
      "python-decouple",
      "python-dotenv",
      "requests",
      "wheel"
    ],
    "requires_python": ">=3.6",
    "summary": "Python Mpesa API wrapper",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11656816,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc052edb8218518b99bccfc939ed1237897bfa5425d472c35e1dd8eb5b863528",
          "md5": "d25abcdf4d581fd7be34030c7f2e5db1",
          "sha256": "41a2556d6108ddf29f6643cd157b8418404e018fa75d19f9c53a941b86f189ab"
        },
        "downloads": -1,
        "filename": "pesapy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d25abcdf4d581fd7be34030c7f2e5db1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19174,
        "upload_time": "2021-10-06T18:26:19",
        "upload_time_iso_8601": "2021-10-06T18:26:19.408909Z",
        "url": "https://files.pythonhosted.org/packages/dc/05/2edb8218518b99bccfc939ed1237897bfa5425d472c35e1dd8eb5b863528/pesapy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e02b106c7c6722799ebf2508b2dd56f7292c7a7afcb39a0548815e17aed3b9e8",
          "md5": "2bd6ca655338d457453da0ab0e35e04e",
          "sha256": "4392d62bf4d84d4476ca074c5964b5c1360572caf662eda9c298e772d1706b6f"
        },
        "downloads": -1,
        "filename": "pesapy-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bd6ca655338d457453da0ab0e35e04e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18896,
        "upload_time": "2021-10-07T17:30:21",
        "upload_time_iso_8601": "2021-10-07T17:30:21.448888Z",
        "url": "https://files.pythonhosted.org/packages/e0/2b/106c7c6722799ebf2508b2dd56f7292c7a7afcb39a0548815e17aed3b9e8/pesapy-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e02b106c7c6722799ebf2508b2dd56f7292c7a7afcb39a0548815e17aed3b9e8",
        "md5": "2bd6ca655338d457453da0ab0e35e04e",
        "sha256": "4392d62bf4d84d4476ca074c5964b5c1360572caf662eda9c298e772d1706b6f"
      },
      "downloads": -1,
      "filename": "pesapy-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bd6ca655338d457453da0ab0e35e04e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18896,
      "upload_time": "2021-10-07T17:30:21",
      "upload_time_iso_8601": "2021-10-07T17:30:21.448888Z",
      "url": "https://files.pythonhosted.org/packages/e0/2b/106c7c6722799ebf2508b2dd56f7292c7a7afcb39a0548815e17aed3b9e8/pesapy-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}