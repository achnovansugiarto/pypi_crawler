{
  "info": {
    "author": "Allen Institute for Neural Dynamics",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# aind-data-access-api\n\n[![License](https://img.shields.io/badge/license-MIT-brightgreen)](LICENSE)\n![Code Style](https://img.shields.io/badge/code%20style-black-black)\n[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)\n\nAPI to interact with a few AIND databases.\n\n## Usage\nWe have two primary databases. A Document store to keep unstructured json documents, and a relational database to store structured tables.\n\n### Document Store\nWe have some convenience methods to interact with our Document Store. You can create a client by explicitly setting credentials, or downloading from AWS Secrets Manager.\n```\nfrom aind_data_access_api.credentials import DocumentStoreCredentials\nfrom aind_data_access_api.document_store import Client\n\n# Method one assuming user, password, and host are known\nds_client = Client(\n            credentials=DocumentStoreCredentials(\n                username=\"user\",\n                password=\"password\",\n                host=\"host\",\n                database=\"metadata\",\n            ),\n            collection_name=\"data_assets\",\n        )\n\n# Method two if you have permissions to AWS Secrets Manager\nds_client = Client(\n            credentials=DocumentStoreCredentials(\n                aws_secrets_name=\"aind/data/access/api/document_store/metadata\"\n            ),\n            collection_name=\"data_assets\",\n        )\n\n# To get all records\nresponse = list(ds_client.retrieve_data_asset_records())\n\n# To get a list of filtered records:\nresponse = list(ds_client.retrieve_data_asset_records({\"subject.subject_id\": \"123456\"}))\n```\n\n### RDS Tables\nWe have some convenience methods to interact with our Relational Database. You can create a client by explicitly setting credentials, or downloading from AWS Secrets Manager.\n```\nfrom aind_data_access_api.credentials import RDSCredentials\nfrom aind_data_access_api.rds_tables import Client\n\n# Method one assuming user, password, and host are known\nds_client = Client(\n            credentials=RDSCredentials(\n                username=\"user\",\n                password=\"password\",\n                host=\"host\",\n                database=\"metadata\",\n            ),\n            collection_name=\"data_assets\",\n        )\n\n# Method two if you have permissions to AWS Secrets Manager\nds_client = Client(\n            credentials=RDSCredentials(\n                aws_secrets_name=\"aind/data/access/api/rds_tables\"\n            ),\n        )\n\n# To retrieve a table as a pandas dataframe\ndf = ds_client.read_table(table_name=\"spike_sorting_urls\")\n\n# Can also pass in a custom sql query\ndf = ds_client.read_table(query=\"SELECT * FROM spike_sorting_urls\")\n\n# It's also possible to save a pandas dataframe as a table. Please check internal documentation for more details.\nds_client.overwrite_table_with_df(df, table_name)\n```\n\n## Installation\nTo use the software, it can be installed from PyPI.\n```bash\npip install aind-data-access-api\n```\n\nTo develop the code, clone repo and run\n```bash\npip install -e .[dev]\n```\n\n## Contributing\n\n### Linters and testing\n\nThere are several libraries used to run linters, check documentation, and run tests.\n\n- Please test your changes using the **coverage** library, which will run the tests and log a coverage report:\n\n```bash\ncoverage run -m unittest discover && coverage report\n```\n\n- Use **interrogate** to check that modules, methods, etc. have been documented thoroughly:\n\n```bash\ninterrogate .\n```\n\n- Use **flake8** to check that code is up to standards (no unused imports, etc.):\n```bash\nflake8 .\n```\n\n- Use **black** to automatically format the code into PEP standards:\n```bash\nblack .\n```\n\n- Use **isort** to automatically sort import statements:\n```bash\nisort .\n```\n\n### Pull requests\n\nFor internal members, please create a branch. For external members, please fork the repository and open a pull request from the fork. We'll primarily use [Angular](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit) style for commit messages. Roughly, they should follow the pattern:\n```text\n<type>(<scope>): <short summary>\n```\n\nwhere scope (optional) describes the packages affected by the code changes and type (mandatory) is one of:\n\n- **build**: Changes that affect build tools or external dependencies (example scopes: pyproject.toml, setup.py)\n- **ci**: Changes to our CI configuration files and scripts (examples: .github/workflows/ci.yml)\n- **docs**: Documentation only changes\n- **feat**: A new feature\n- **fix**: A bugfix\n- **perf**: A code change that improves performance\n- **refactor**: A code change that neither fixes a bug nor adds a feature\n- **test**: Adding missing tests or correcting existing tests\n\n### Semantic Release\n\nThe table below, from [semantic release](https://github.com/semantic-release/semantic-release), shows which commit message gets you which release type when `semantic-release` runs (using the default configuration):\n\n| Commit message                                                                                                                                                                                   | Release type                                                                                                    |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\n| `fix(pencil): stop graphite breaking when too much pressure applied`                                                                                                                             | ~~Patch~~ Fix Release, Default release                                                                          |\n| `feat(pencil): add 'graphiteWidth' option`                                                                                                                                                       | ~~Minor~~ Feature Release                                                                                       |\n| `perf(pencil): remove graphiteWidth option`<br><br>`BREAKING CHANGE: The graphiteWidth option has been removed.`<br>`The default graphite width of 10mm is always used for performance reasons.` | ~~Major~~ Breaking Release <br /> (Note that the `BREAKING CHANGE: ` token must be in the footer of the commit) |\n\n### Documentation\nTo generate the rst files source files for documentation, run\n```bash\nsphinx-apidoc -o doc_template/source/ src \n```\nThen to create the documentation HTML files, run\n```bash\nsphinx-build -b html doc_template/source/ doc_template/build/html\n```\nMore info on sphinx installation can be found [here](https://www.sphinx-doc.org/en/master/usage/installation.html).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aind-data-access-api",
    "package_url": "https://pypi.org/project/aind-data-access-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/aind-data-access-api/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/aind-data-access-api/0.2.0/",
    "requires_dist": [
      "boto3",
      "pandas",
      "psycopg2-binary",
      "pydantic",
      "pymongo",
      "SQLAlchemy",
      "black ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "interrogate ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "Sphinx ; extra == 'dev'",
      "furo ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "API to interact with a few AIND databases",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17465118,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2a77d46605e4e88945508c0348089116a5bd13f3d504618904bef7a336f42da",
          "md5": "63fa1cf7ab89279cfef401f08ee8746c",
          "sha256": "3540049383b1896c8c1da1ee1ae640a591adbd0eed71f195e665e1397f422ce8"
        },
        "downloads": -1,
        "filename": "aind_data_access_api-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63fa1cf7ab89279cfef401f08ee8746c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10175,
        "upload_time": "2023-03-22T22:00:17",
        "upload_time_iso_8601": "2023-03-22T22:00:17.902286Z",
        "url": "https://files.pythonhosted.org/packages/f2/a7/7d46605e4e88945508c0348089116a5bd13f3d504618904bef7a336f42da/aind_data_access_api-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e046c7aba76300f44ad2716d7f45b411aaa20fa5c75f00b6623d05bff1dd2298",
          "md5": "d926e8bd598a82ee13c09043155e8694",
          "sha256": "80b4fea54b4a8fb16f782170322a554ac5cf9fc47e09897312653f3235456e6e"
        },
        "downloads": -1,
        "filename": "aind-data-access-api-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d926e8bd598a82ee13c09043155e8694",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 41301,
        "upload_time": "2023-03-22T22:00:19",
        "upload_time_iso_8601": "2023-03-22T22:00:19.231092Z",
        "url": "https://files.pythonhosted.org/packages/e0/46/c7aba76300f44ad2716d7f45b411aaa20fa5c75f00b6623d05bff1dd2298/aind-data-access-api-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d483969b969a79da4e52bb9b372c8559586a84890b857cd0543de0d53136351a",
          "md5": "dd4269a6ee690149dae0f6e8532bacda",
          "sha256": "bc801e28d411be776e281326fae6c61556512cc691ff2b8c1016fd61ab14ba17"
        },
        "downloads": -1,
        "filename": "aind_data_access_api-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd4269a6ee690149dae0f6e8532bacda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10286,
        "upload_time": "2023-03-27T18:22:22",
        "upload_time_iso_8601": "2023-03-27T18:22:22.283633Z",
        "url": "https://files.pythonhosted.org/packages/d4/83/969b969a79da4e52bb9b372c8559586a84890b857cd0543de0d53136351a/aind_data_access_api-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b514e12013b6dfc6bdc2c4a68d6bae3c67ba852a0df4526eb7177b77025cd869",
          "md5": "c05b790e1f39859e8542f548e39c3065",
          "sha256": "b9b6e0c5bc1dd18ebc520b953203e863e3f3271f55904dc7ce52c409683329c7"
        },
        "downloads": -1,
        "filename": "aind-data-access-api-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c05b790e1f39859e8542f548e39c3065",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 41516,
        "upload_time": "2023-03-27T18:22:23",
        "upload_time_iso_8601": "2023-03-27T18:22:23.629651Z",
        "url": "https://files.pythonhosted.org/packages/b5/14/e12013b6dfc6bdc2c4a68d6bae3c67ba852a0df4526eb7177b77025cd869/aind-data-access-api-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d483969b969a79da4e52bb9b372c8559586a84890b857cd0543de0d53136351a",
        "md5": "dd4269a6ee690149dae0f6e8532bacda",
        "sha256": "bc801e28d411be776e281326fae6c61556512cc691ff2b8c1016fd61ab14ba17"
      },
      "downloads": -1,
      "filename": "aind_data_access_api-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dd4269a6ee690149dae0f6e8532bacda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10286,
      "upload_time": "2023-03-27T18:22:22",
      "upload_time_iso_8601": "2023-03-27T18:22:22.283633Z",
      "url": "https://files.pythonhosted.org/packages/d4/83/969b969a79da4e52bb9b372c8559586a84890b857cd0543de0d53136351a/aind_data_access_api-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b514e12013b6dfc6bdc2c4a68d6bae3c67ba852a0df4526eb7177b77025cd869",
        "md5": "c05b790e1f39859e8542f548e39c3065",
        "sha256": "b9b6e0c5bc1dd18ebc520b953203e863e3f3271f55904dc7ce52c409683329c7"
      },
      "downloads": -1,
      "filename": "aind-data-access-api-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c05b790e1f39859e8542f548e39c3065",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 41516,
      "upload_time": "2023-03-27T18:22:23",
      "upload_time_iso_8601": "2023-03-27T18:22:23.629651Z",
      "url": "https://files.pythonhosted.org/packages/b5/14/e12013b6dfc6bdc2c4a68d6bae3c67ba852a0df4526eb7177b77025cd869/aind-data-access-api-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}