{
  "info": {
    "author": "Mohammad Abu Khashabeh",
    "author_email": "abukhashabehmohammad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django Easy Soft Delete\n=======================\n\n\n\nGoal\n------------\n\nThe Default behavior for Django model instances delete action is\npermanently delete a resource, means to remove the resource from the database completely with no option for recovery.\n\nSome users want a “recycling bin” or “archival” feature which allows segregating active objects from non-active ones, and soft-deletion is one way of accomplishing this. The capability to delete and restore data needs to be available. That's what django-easy-softdelete package offer.\n\nDescription\n------------\n\nUsing Django Easy Soft Delete package when model instances are soft deleted(default behavior), they are not actually removed from your database. Instead, a is_deleted flag and deleted_at attributes are set on the model and inserted into the database.\nIf a model has a non-null is_deleted and deleted_at values, the model instance has been soft deleted.\n\n\nThis package gives Django model instances the ability to be soft-deleted(masked or hidden), and it gives the ability to restore any soft-deleted objects,\n...obviously it gives the ability to be normally deleted (hard delete)\n\nYou have to take into consideration the following:\n- When the object hard deleted, that would delete all related objects.\n- You can't use it as is for many-to-many relation, obviously.\n- You could use soft-delete-cascade, restore and restore-related-objects correctly using model instance.\n\n\nThe only thing that you have to do to utilize the package functionalities is inheriting from django_softdelete.models.SoftDeleteModel\n\nExample\n-------\n\n.. code-block:: python\n\n    # imports\n    from django_softdelete.models import SoftDeleteModel\n    from django.utils import timezone\n\n    # models\n    class Author(SoftDeleteModel):\n        _soft_delete_cascade = True\n        _restore_soft_deleted_related_objects = True\n\n        name = models.CharField(max_length=50)\n\n    class Profile(SoftDeleteModel):\n        author = models.OneToOneField(Author, on_delete=models.CASCADE)\n        publish_books = PositiveIntegerField(default=0)\n\n    class Book(SoftDeleteModel):\n        author = models.ForeignKey(Author, on_delete=models.CASCADE)\n        publish_date = models.DateField()\n\n\n    # Example of use\n    >>> author = Author(name='mohammad')\n    >>> author.save()\n\n    >>> book = Book(author=author, publish_date=timezone.now())\n    >>> book.save()\n\n    >>> profile = Profile(author=author, publish_books=+1)\n    >>> profile.save()\n    \n    >>> Author.objects.all().values()\n    <SoftDeleteQuerySet [{'id': 1, 'is_deleted': False, 'deleted_at': None, 'name': 'mohammad'}]>\n\n    \n    # as we set _soft_delete_cascade=True then any objects related \n    to author beside the author object will be soft-deleted.\n    >>> author.delete()\n    \n    # All objects will be soft-deleted\n    >>> Author.objects.count() \n    0\n    >>> Profile.objects.count()\n    0\n    >>> Book.objects.count()\n    0\n    \n    # If you would get soft-deleted objects, you could use all_objects manager\n    >>> Author.all_objects.count() \n    1\n    >>> Profile.all_objects.count() \n    1\n    >>> Book.all_objects.count() \n    1\n    \n    # Author object will be soft-deleted only\n    >>> Author.objects.filter(id=author.id).delete()\n        \n    # List of author objects will be soft-deleted\n    >>> Author.objects.filter(id__in=[1,]).delete()\n    >>> Author.all_objects.all().values()\n    <SoftDeleteQuerySet [{'id': 1, 'is_deleted': True, 'deleted_at': datetime.datetime(2020, 5, 20, 10, 51, 52, 50725, tzinfo=<UTC>), 'name': 'mohammad'}]>\n    \n    # You could inquire about non soft-deleted objects\n    >>> Author.objects.all().alive().count()\n    0\n  \n     # as we set _restore_soft_deleted_related_objects=True then any objects related \n     to author beside the author object will be restored.\n     >>> author = Author.all_objects.get(id=1)\n     >>> author.restore()\n    \n    >>> authors = Author.objects.all()\n    >>> authors.values()\n    <SoftDeleteQuerySet [{'id': 1, 'is_deleted': False, 'deleted_at': None, 'name': 'mohammad'}]>\n    >>> authors\n    <SoftDeleteQuerySet [<Author: Author object (1)>]>\n    >>> author = authors.first()\n    >>> author\n    <Author: Author object (1)>\n    >> author.book_set.first()\n    <Book: Book object (1)>\n    >> author.profile\n    <Profile: Profile object (1)>   \n \n    # This will be hard deleted from the database.\n    >>> author.hard_delete()\n    >>> Author.objects.all()\n    <SoftDeleteQuerySet []>\n\n\n\nInstallation\n------------\n\nInstalling from pypi (using pip). ::\n\n    pip install django-easy-softdelete\n\n\nThe application doesn't have any special requirement or configurations.\n\n\n\nLicensing\n---------\n\nPlease see the LICENSE file.\n\nContacts\n--------\n\nEmail: abukhashabehmohammad@gmail.com\n\nGitHub: https://github.com/mabukhashabeh/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mabukhashabeh/django-easy-softdelete",
    "keywords": "django-easy-softdelete,delete,safedelete,softdelete,django",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-easy-softdelete",
    "package_url": "https://pypi.org/project/django-easy-softdelete/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-easy-softdelete/",
    "project_urls": {
      "Homepage": "https://github.com/mabukhashabeh/django-easy-softdelete"
    },
    "release_url": "https://pypi.org/project/django-easy-softdelete/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Some users want a “recycling bin” or “archival” feature which allows segregating active objects from non-active ones, and soft-deletion is one way of accomplishing this. The capability to delete and restore data needs to be available. That is what django-easy-softdelete package offer.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8456246,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65fdd4f6ac20e148f34b9d65f0f83c2ffdcec9898aab8e6e2ae9ba79a7ff8efd",
          "md5": "a44cbb01ad3d2b10c83b840574594577",
          "sha256": "bb375881abc048adc5d9d2c6116bf8d151226a592b6c8fcc60cefb245ac6d4b0"
        },
        "downloads": -1,
        "filename": "django-easy-softdelete-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a44cbb01ad3d2b10c83b840574594577",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5057,
        "upload_time": "2020-10-20T12:17:42",
        "upload_time_iso_8601": "2020-10-20T12:17:42.306197Z",
        "url": "https://files.pythonhosted.org/packages/65/fd/d4f6ac20e148f34b9d65f0f83c2ffdcec9898aab8e6e2ae9ba79a7ff8efd/django-easy-softdelete-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65fdd4f6ac20e148f34b9d65f0f83c2ffdcec9898aab8e6e2ae9ba79a7ff8efd",
        "md5": "a44cbb01ad3d2b10c83b840574594577",
        "sha256": "bb375881abc048adc5d9d2c6116bf8d151226a592b6c8fcc60cefb245ac6d4b0"
      },
      "downloads": -1,
      "filename": "django-easy-softdelete-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a44cbb01ad3d2b10c83b840574594577",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5057,
      "upload_time": "2020-10-20T12:17:42",
      "upload_time_iso_8601": "2020-10-20T12:17:42.306197Z",
      "url": "https://files.pythonhosted.org/packages/65/fd/d4f6ac20e148f34b9d65f0f83c2ffdcec9898aab8e6e2ae9ba79a7ff8efd/django-easy-softdelete-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}