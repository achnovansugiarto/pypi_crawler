{
  "info": {
    "author": "Ashlad",
    "author_email": "imadbenbp@gmail.ocm",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![version 0.2.2](https://img.shields.io/badge/version-0.2.1-brightgreen.svg?style=flat)](https://pypi.org/project/mulpyversus)\r\n# MulpyVersus - Python Wrapper for MultiVersus API \r\n\r\n\tThis library will help you to use the MultiVersus API with Python easily.\r\n\tIt is still under development. Please report any issue you encounter. Python > 3.9\r\n\r\n![mulpyversus](https://cdn.discordapp.com/attachments/361240816397582336/1006703539365617674/mulpyversus.png)\r\n\r\n\r\n# Usage\r\n    pip install mulpyversus \r\n\r\nWith this version, you will need a **Steam Encrypted App Ticket**. You get yours [**here**](https://github.com/brianbaldner/multiversus-api-docs/tree/main/steam-ticket-generator). *Future* version should include **the possibility to use an API that doesn't require any sort of token**.\r\n\r\n## Get the API working\r\n\r\nInitializing the MulpyVersus class is the first step. With this object, you will be able to call any search function.\r\n\r\n    from mulpyversus.mulpyversus import MulpyVersus\r\n    mlp = MulpyVersus(\"youSteamEcryptedAppTicket\")\r\n\r\nNow also support Async. Make sure to call init on the AsyncMulpyVersus object after creating it. \r\n\r\n    from mulpyversus.asyncmulpyversus import AsyncMulpyVersus\r\n    mlp = AsyncMulpyVersus(\"youSteamEcryptedAppTicket\")\r\n    await mlp.init()\r\n    \r\n    --Do Stuff--\r\n    \r\n    await mlp.close_session()\r\n\r\nAsyncMulpyVersus methods work the same way. Methods that need to be awaited are specified by \"IS ASYNC\" in the help.\r\nThose are the methods that perform API calls. Other methods aren't asynchronous since they only fetch data from JSON files already in memory.\r\n\r\nBy giving your Steam Encrypted App Ticket, your access_token will automatically refreshed whenever it is no longer valid. \r\n**So no need to manually change it every 24h !** \r\n\r\n# Examples\r\n\r\n## Get information about a Match\r\n\r\nYou can store all the information about a match like this : \r\n\r\n    match = mlp.get_match_by_id(\"62f030a5b6460ad6562b7118\")\r\n    \r\n    print(match.get_all_players_data_in_match()[0].get_user().get_top_ranked_character_in_gamemode(GamemodeRating.TwoVsTwo)\r\n    \r\n    print(match.get_losers()[0].get_wins_with_character(Characters.Finn)\r\nThe first print shows you how to **get the top ranked character on the specified GameMode for the player number 1 of the match** (this list can contain a single element or more depending on the gamemode).\r\n\r\nThe second one shows you **how much win with Finn has the loser number 1 of this match** (this list can contain a single element or more depending on the gamemode).\r\n\r\n## Get information about a User \r\n\r\nYou can store all the information about a user like this : \r\n\r\n    user = mlp.get_user_by_id(\"62eb10309f54a8d97a42c15d\")\r\n    \r\n    print(user.get_matches_played())\r\n    \r\n    print(user.has_network(Networks.Twitch))\r\nThe first print shows you how to **get the amount of match a User has played**.\r\n\r\nThe second one returns you **information about the specified network if it is linked to the user account or False otherwise** (this feature will be improved in future versions).\r\n## Utils file\r\n\r\nTo make it easier to use this library, every character name, network name, perk id, gamemode, names, etc. are stored in enumes that you will find in the utils.py file. \r\nExample : \r\n\r\n\t class  Characters(enum.Enum):\r\n\t    Shaggy = {\"name\": \"Shaggy\", \"slug\": \"character_shaggy\"}\r\n\t    Reindog = {\"name\": \"Reindog\", \"slug\": \"character_creature\"}\r\n\t    StevenUniverse = {\"name\": \"Steven Universe\", \"slug\": \"character_steven\"}\r\n\t    Garnet = {\"name\": \"Garnet\", \"slug\": \"character_garnet\"}\r\n\t    HarleyQuinn = {\"name\": \"Harley Quinn\", \"slug\": \"character_harleyquinn\"}\r\n\t    AryaStark = {\"name\": \"Arya Stark\", \"slug\": \"character_arya\"}\r\n\t    Finn = {\"name\": \"Finn\", \"slug\": \"character_finn\"}\r\n\t    Taz = {\"name\": \"Taz\", \"slug\": \"character_taz\"}\r\n\t    WonderWoman = {\"name\": \"Wonder Woman\", \"slug\": \"character_wonder_woman\"}\r\n\t    Jake = {\"name\": \"Jake\", \"slug\": \"character_jake\"}\r\n\t    Superman = {\"name\": \"Superman\", \"slug\": \"character_superman\"}\r\n\t    Batman = {\"name\": \"Batman\", \"slug\": \"character_batman\"}\r\n\t    BugsBunny = {\"name\": \"BugsBunny\", \"slug\": \"character_bugs_bunny\"}\r\n\t    TomAndJerry = {\"name\": \"Tom & Jerry\", \"slug\": \"character_tom_and_jerry\"}\r\n\t    Velma = {\"name\": \"Velma\", \"slug\": \"character_velma\"}\r\n\t    IronGiant = {\"name\": \"Iron Giant\", \"slug\": \"character_C017\"}\r\n\t    LebronJames = {\"name\": \"Lebron James\", \"slug\": \"character_c16\"}\r\n    \r\n**Everytime** one of these attributes is necessary(a gamemode, a character, etc.). Use these **enums**. \r\nThe file also contains **methods** to convert from slug to name and vice versa.\r\n\r\n\r\n# Classes\r\n\r\n## MulpyVersus\r\n\r\n\tSynchronous Multiversus API wrapper.\r\n\tRepresent the primary client.\r\n\tArgs: steamToken = The steam encrypted app ticket token\r\n\tUsage Example :\r\n\t   from mulpyversus.mulpyversus import MulpyVersus\r\n\t   mlp = MulpyVersus(\"youSteamEcryptedAppTicket\")\r\n\r\n\r\n**refresh_token(steamToken : string)**\r\n\r\n> This method will refresh the token used by the API\r\nThe token generated when you create a MulpyVersus object with a Steam Encrypted Key is usable for 24 hours\r\nIt should be refreshed at least everyone 24hour, but it is automatically refreshed if a request doesn't work\r\nOptional: You can pass a new steam token if you want to change it\r\nUsage Example :\r\nmulpyversus.refresh_token()\r\nor\r\nmulpyversus.refresh_token(\"aNewSteamToken\")\r\n\r\n**get_match_by_id(id : string)**\r\n\r\n> To get a match using its ID\r\n\r\n\r\n**get_user_by_id(id : string)**\r\n\r\n> To get a user by its ID\r\n\r\n**get_match_by_id(id : string)**\r\n\r\n> To get a match using its ID\r\n\r\n**get_users_by_username(username : string, limit : int, canReturnNone : bool)**\r\n\r\n> Returns an instance of the class UsernameSearchResult containing results for the search\r\nUseful if you want all the results for that name\r\nBy default, it will return a UsernameSearchResult even if no results are found\r\nSet the argument canReturnNone to true to return None if no user is found\r\n\r\n**get_user_by_username(username : string, limit : int, canReturnNone : bool)**\r\n\r\n> Returns a User object for that username\r\nIf many results are found, returns the first one\r\nUseful if you are confident what the username is\r\n\r\n**refresh_user(user : User)**\r\n\r\n> Used to refresh a User object.\r\n> Use this when you want to get up-to-date info about a user for whom you already have a User object.\r\n> You can also use User.refresh() to refresh a User\r\nMulpyVersus.refresh_user(someone)\r\n\r\n\r\n\r\n## Match\r\n\r\n\tRepresent a match object\r\n**get_player_ammount_in_match()**\r\n\r\n> Gets the number of players in the match.\r\n> Examples: amounfOfPlayer = matches.get_player_ammount_in_match()\r\n\r\n**get_match_id()**\r\n\r\n> Gets the id of the match.\r\n> Examples: matchId = matches.get_match_id()\r\n\r\n**get_created_at()**\r\n\r\n> When the match was created\r\n\r\n**get_updated_at()**\r\n\r\n> When the match was last updated\r\n\r\n**get_completion_time()**\r\n\r\n> When the match was completed\r\n\r\n**get_access_level()**\r\n\r\n> Gets the access level of the match (private etc..).\r\n\r\n**get_name()**\r\n\r\n> Gets the name of the match\r\n\r\n**get_winners()**\r\n\r\n> Return a list of the instance of the class User\r\n> You can access a specific winner with get_winner()[index]\r\n\r\n**get_losers()**\r\n\r\n> Return a list of the instance of the class **User**\r\n> You can access a specific loser with **get_winner**()[index]\r\n\r\n**is_draw()**\r\n\r\n> If the match is a draw\r\n\r\n**is_custom_match()**\r\n\r\n> If the match is a custom match\r\n\r\n**get_map()**\r\n\r\n> Return the map\r\n\r\n**get_all_players_data_in_match()**\r\n\r\n> Return  a list with instances of the class **PlayerMatchData** of all players in the match\r\n\r\n**get_player_data_by_id()**\r\n\r\n> Return an  instance of the class **PlayerMatchData** for the specified player in the match\r\n\r\n**get_winning_team_id()**\r\n\r\n> Return the id of the winning team\r\n\r\n**get_match_max_player()**\r\n\r\n> Return max amount of players allowed in this match\r\n\r\n**get_match_min_players()**\r\n\r\n> Return max amount of players allowed in this match\r\n\r\n**get_match_template_name()**\r\n\r\n> Return the match template name\r\n\r\n## PlayerMatchData\r\n\r\n\tRepresent a PlayerData object from a Match\r\n\tIt contains all the information about a player for this match\r\n\tEx: damage dealt, ringouts, etc\r\n\r\n\r\n**get_account_id()**\r\n\r\n> Return the account id for the player related to this object\r\n\r\n**get_character_slug()**\r\n\r\n>A string representing the character played this match by the player\r\nYou can get a display name of the character using **Utils.slug_to_display(theSlugName)**\r\n\r\n**get_damage_dealt()**\r\n\r\n> Return the amount of damage this player dealt during the match\r\n\r\n**get_death_amount()**\r\n\r\n> Return the amount of death for this user in this match\r\n\r\n**get_guild_id()**\r\n\r\n> Return the guild id\r\n\r\n**is_guilded_match()**\r\n\r\n> Return if the match is a guilded match\r\n\r\n**get_played_plateform()**\r\n\r\n> Return the platform this player played on (PC etc)\r\n\r\n**get_player_index()**\r\n\r\n> Return the player index in the match\r\n\r\n**get_ringouts_dealt()**\r\n\r\n> Return the number of ringouts this player dealt during this match\r\n\r\n**get_score()**\r\n\r\n> Return this player's score for this match\r\n\r\n**get_team_index()**\r\n\r\n> Return this player team index for this match\r\n\r\n**get_username()**\r\n\r\n> Return the username of this player \r\n\r\n**get_user()**\r\n\r\n> Return an instance of the class **User** for this player\r\n\r\n## User\r\n\r\n\tRepresent a match object\r\n**refresh()**\r\n\r\n> Used to refresh a User object\r\n> Use this when you want to get up-to-date info about a user for whom you already have a User object.\r\n\r\n**get_id()**\r\n\r\n> Gets the id of the user.\r\n\r\n**get_account_id()**\r\n\r\n> Gets the account id of the user.\r\n\r\n**get_updated_at()**\r\n\r\n> When the user was last updated\r\n\r\n**get_created_at()**\r\n\r\n> When the user created their account\r\n\r\n**get_last_login()**\r\n\r\n> When the user was last logged in\r\n\r\n**get_points()**\r\n\r\n> Gets the points\r\n\r\n**is_child_account()**\r\n\r\n> If this account is a child account\r\n\r\n**get_perk_preferences()**\r\n\r\n> Returns a list of PerkPage objects related to this user\r\n\r\n**get_perk_preference_by_character(character : Characters)**\r\n\r\n> Returns PerkPage objects for specified Character\r\nReturns False if the Character is not found\r\n\r\n**get_public_id()**\r\n\r\n> Gets the public id\r\n\r\n**get_default_username()**\r\n\r\n> Gets default username\r\n\r\n**is_username_default_username()**\r\n\r\n> If the username is a default username given by Warner Bros network\r\n\r\n**get_user_networks()**\r\n\r\n> Return a list of an instance of the class **UserNetwork** \r\n\r\n**has_network(network : Networks)**\r\n\r\n> Returns Network objects for the specified network\r\n> Returns False if the network is not found in the user's network list\r\n\r\n**get_last_login_platform()**\r\n\r\n> Return the last platform the user was logged in on\r\n\r\n**get_last_played_character()**\r\n\r\n> Return the last character the user played\r\n\r\n**get_last_login_time()**\r\n\r\n> Return the last time the user logged in\r\n\r\n**get_last_logout_time()**\r\n\r\n> Return the last time the user logged out\r\n\r\n**get_character_level(characterName : Characters)**\r\n\r\n> Return the level of the given character for this user\r\n> To use this, use Characters.NAMEOFCHARS\r\n\r\n**get_character_current_exp()**\r\n\r\n> Return the current experience of the given character for this user\r\nTo use this, use Characters.NAMEOFCHARS\r\n\r\n**get_user_level()**\r\n\r\n> Gets user level\r\n\r\n**get_user_first_claim_time()**\r\n\r\n> Gets the user's first claim time\r\n\r\n**get_anti_cheat_server_kick()**\r\n\r\n> If the user ever gets kicked by anti-cheat\r\n\r\n**get_debug_all_unlocked()**\r\n\r\n> If the user unlocked everything\r\n\r\n**get_match_min_players()**\r\n\r\n> Return max amount of players allowed in this match\r\n\r\n**get_battlepass_id()**\r\n\r\n> Return the battle pass id\r\n\r\n**get_highest_damage_dealt()**\r\n\r\n> Return the highest amount of damage this user dealt\r\n\r\n**get_total_ringout_leader()**\r\n\r\n> Return max amount of time this player had the most ringouts dealt\r\n\r\n**get_total_ringouts()**\r\n\r\n> Return the total amount of ringouts this user dealt \r\n\r\n**get_total_wins()**\r\n\r\n> Return the total amount of wins this user has\r\n\r\n**get_wins_with_character(characterName : Characters)**\r\n\r\n> Return the number of wins with the character\r\nTo use this, use Characters.NAMEOFCHARS\r\n\r\n**get_total_attacks_dodged()**\r\n\r\n> Return the total amount of attacks the user dodged\r\n\r\n**get_total_assits()**\r\n\r\n> Return the total amount of assist this user has\r\n\r\n**get_unclaimed_character_rewards(characterName : Characters)**\r\n\r\n> Return unclaimed rewards for the character\r\nFOR NOW, THIS WILL RETURN ALL INFORMATION AS JSON\r\nTo use this, use Characters.NAMEOFCHARS\r\n\r\n**get_lifetime_damage()**\r\n\r\n> Return the total amount of damage this user ever dealt\r\n\r\n**get_lifetime_ringouts()**\r\n\r\n> Return the total amount of ringouts this user ever dealt\r\n\r\n**get_loss_streak()**\r\n\r\n> Return the current loss streak \r\n\r\n**get_matches_played()**\r\n\r\n> Return the total amount of matches this user played\r\n\r\n**get_sets_played()**\r\n\r\n> Return the total amount of sets this user played\r\n\r\n**get_all_owned_perks()**\r\n\r\n> Return a list of instances of the class **Perks**\r\n> To get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_owned_perks_by_character(character : Characters)**\r\n\r\n> Return a list of instances of the class **Perks** for the specified character\r\n> To get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_character_rating(character : Characters, rating : RatingKeys, gm : GamemodeRating)**\r\n\r\n> Return the value of the desired Rating for the specified Character on the specified Gamemode\r\nIf the user has no rating for this character, this return -1.0\r\nTo use this, use Characters.NAMEOFCHARS\r\nTo use this, use RatingKeys.RATINGKEY\r\nTo use this, use GamemodeRating.NAMEOFGAMEMODE\r\n\r\n**get_top_ranked_character_in_gamemode(gm : GamemodeRating)**\r\n\r\n> Return the top-ranked character in given GamemodeRating\r\nTo use this, use GamemodeRating.NAMEOFGAMEMODE\r\n\r\n**get_top_rated_character_ratings()**\r\n\r\n> Return the asked rating for the top-ranked character in the given game mode\r\nIf the user has no rating for this game mode, this return -1.0\r\nTo use this, use RatingKeys.RATINGKEY\r\nTo use this, use GamemodeRating.NAMEOFGAMEMODE\r\n\r\n**get_ally_perk_sharing(character : Characters)**\r\n\r\n> Return ally perk sharing for a given character \r\n\r\n**perk_training_enabled()**\r\n\r\n> Return perk training enabled for a given character\r\n\r\n**is_2v2_prompt_shown()**\r\n\r\n> If the 2v2 prompt is shown \r\n\r\n**has_pack(pack : Packs)**\r\n\r\n> If the user has the specified pack\r\n\r\n**get_match_lost_count(gm : GamemodeMatches)**\r\n\r\n> Return amount of games lost in specified GamemodeMatches\r\nTo use this, use GamemodeMatches.NAMEOFGAMEMODE\r\n\r\n**get_match_won_count(gm : GamemodeMatches)**\r\n\r\n>  Return amount of games won in specified GamemodeMatches\r\nTo use this, use GamemodeMatches.NAMEOFGAMEMODE\r\n\r\n**get_win_streak_count()**\r\n\r\n> Return current win streak in specified GamemodeMatches\r\nTo use this, use GamemodeMatches.NAMEOFGAMEMODE\r\n\r\n**get_longest_win_streak()**\r\n\r\n>Return return longest win streak in specified GamemodeMatches\r\nTo use this, use GamemodeMatches.NAMEOFGAMEMODE\r\n\r\n## PerkPage\r\n\r\n\tRepresent a PerkPage object\r\n\r\n\r\n**get_character()**\r\n\r\n> Gets the character related to this PerkPage\r\n\r\n**get_page_name()**\r\n\r\n> Gets the name of the page\r\n\r\n**get_main_perk()**\r\n\r\n> Represent the main perk for this page\r\nTo get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_first_perk()**\r\n\r\n> Represent the first \"small\" perk for this page\r\nTo get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_second_perk()**\r\n\r\n> Represent the second \"small\" perk for this page\r\nTo get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_third_perk()**\r\n\r\n> Represent the third \"small\" perk for this page\r\nTo get specific data from a perk, use the PerkValue Enum\r\nExample: somePerk.value[PerkValue.WANTEDVALUE.value]\r\nList of values: Slug, HydraName, DisplayName, Description, AssociatedCharacterName, Category, Rarity, GoldPrice, GoldSalePrice\r\n\r\n**get_related_account_id()**\r\n\r\n> Gets the account_id of the user related to this page\r\n\r\n## UserNetwork\r\n\r\n\tRepresent a UserNetwork object\r\n\tA network linked to the user's account\r\n\r\n**get_network_name()**\r\n\r\n> Returns the name of the network.\r\nExample: \"wb_network\", \"twitch\", \"steam\"\r\n\r\n**get_network_user_id()**\r\n\r\n> Returns the user's id on that network.\r\nReturns None if the network has no ID\r\n\r\n**get_network_user_avatar()**\r\n\r\n> Returns the user's avatar on that network.\r\nReturns None or null if the network has no avatar\r\n\r\n**get_network_user_username()**\r\n\r\n> Returns the user's username on that network.\r\nReturns None or null if the network has no username\r\n\r\n**get_network_user_created_at()**\r\n\r\n> Returns the users created_at on that network.\r\nReturns None or null if the network has no created_at\r\n\r\n**get_related_account_id()**\r\n\r\n> Represent the account_id of the user related to this page\r\n\r\n\r\n## UsernameSearchResult\r\n\r\n\tRepresent a response to a search by username.\r\n\tSet the argument canReturnNone to true to return None if no user is found.\r\n\tYou can navigate all its pages.\r\n\r\n**set_limit()**\r\n\r\n> To set the limit per page for this UsernameSearchResult\r\n\r\n**get_total_result()**\r\n\r\n> Get the total amount of users found by this search\r\n\r\n**get_start()**\r\n\r\n> Get at what index the current page starts\r\n\r\n**get_current_page()**\r\n\r\n> Get the current page number\r\n\r\n**get_page_by_number(pageNumber: int)**\r\n\r\n> Set the UserNamePage Object to the specified page number if it exists\r\nLast page otherwise\r\n\r\n**get_user_by_number_in_page(number : int)**\r\n\r\n> Returns a User Object for specified user number if it exists\r\nLast User in page otherwise\r\n\r\n**get_ammount_of_page()**\r\n\r\n> Returns the total amount of pages for this search\r\n\r\n\r\n**next_page()**\r\n\r\n> Set this UsernameSearchResult to its next page\r\n\r\n\r\n**get_amount_of_user_in_current_page()**\r\n\r\n> Returns the number of users on the current page\r\n\r\n\r\n**get_users_in_page()**\r\n\r\n> Returns a list of User Objects for every user on the current page.\"\r\n\r\n\r\n## Leaderboards\r\n\r\n\tGlobalLeaderboard - UserLeaderboard and AsyncGlobalLeaderboard - AsyncUserLeaderboard  are available.\r\n\tGlobal leaderboard represent the worldwide leaderboard.\r\n\tUser leaderboard is the leaderboard for a specific user (to get his rank in a specific gamemode for exemple).\r\n\tGetting a UserLeaderboard also lets you get some information about his total wins, loss and linked networks for better performance. But you can also get a User object from it.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AshladBP/MulpyVersus",
    "keywords": "mulpyversus multiversus api python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mulpyversus",
    "package_url": "https://pypi.org/project/mulpyversus/",
    "platform": null,
    "project_url": "https://pypi.org/project/mulpyversus/",
    "project_urls": {
      "Homepage": "https://github.com/AshladBP/MulpyVersus"
    },
    "release_url": "https://pypi.org/project/mulpyversus/0.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python wrapper for Multiversus API",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14780058,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "491d36fbd01276a8df306f74f32fb2333eb859d09cf9a8eb7d6f959ab8ec0113",
          "md5": "49feb8ff32969587f68e963044a96d88",
          "sha256": "4988423d5be337a23e9fd80472bb5378226d070a8ccafaafada0323f36ddcb40"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49feb8ff32969587f68e963044a96d88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28462,
        "upload_time": "2022-08-10T02:48:04",
        "upload_time_iso_8601": "2022-08-10T02:48:04.079906Z",
        "url": "https://files.pythonhosted.org/packages/49/1d/36fbd01276a8df306f74f32fb2333eb859d09cf9a8eb7d6f959ab8ec0113/mulpyversus-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18612bb6580684e2a0a358022fe0522d8bb78577e17fb248014bda25ebc081e1",
          "md5": "3517e2aaedb71f92da1c00f5a7f49ea7",
          "sha256": "84d26896218c5b98cb1b2b15263f1840130851ce528cfee655a0ff888a789a3f"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3517e2aaedb71f92da1c00f5a7f49ea7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28457,
        "upload_time": "2022-08-10T03:04:50",
        "upload_time_iso_8601": "2022-08-10T03:04:50.640019Z",
        "url": "https://files.pythonhosted.org/packages/18/61/2bb6580684e2a0a358022fe0522d8bb78577e17fb248014bda25ebc081e1/mulpyversus-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85e65e9672ce42382ad895a1e2ca1580427e9717a3e8016c15c0441ad015f293",
          "md5": "47c1772c3a01f787aa1e49d93441f35b",
          "sha256": "2fd9766fe30f6cba0e6954164313655c77aa7807145549780372021d1720bedc"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "47c1772c3a01f787aa1e49d93441f35b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34201,
        "upload_time": "2022-08-13T01:55:14",
        "upload_time_iso_8601": "2022-08-13T01:55:14.909234Z",
        "url": "https://files.pythonhosted.org/packages/85/e6/5e9672ce42382ad895a1e2ca1580427e9717a3e8016c15c0441ad015f293/mulpyversus-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e5a8cbc0dcb513b7b4aabc498c2df253be100c9f04d9e2497ebcfc6a1828090",
          "md5": "51289dbaf419a6e116a518fdb9ca4b30",
          "sha256": "dd618710101af18602f1ffb7e7e08bb453187bab25005c84ed9381e721d85937"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "51289dbaf419a6e116a518fdb9ca4b30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34578,
        "upload_time": "2022-08-15T01:11:03",
        "upload_time_iso_8601": "2022-08-15T01:11:03.211976Z",
        "url": "https://files.pythonhosted.org/packages/1e/5a/8cbc0dcb513b7b4aabc498c2df253be100c9f04d9e2497ebcfc6a1828090/mulpyversus-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99ab1e5a14c077e5c7ca82e01d1fc953df2f32a317f116081f0d33af989d0fc7",
          "md5": "2ebe2967ccb95a5c6fda202f26f22314",
          "sha256": "30665f7272ad1d06cd22788e82b98619d5889e8cd5ed93166b6cd7259ae5e13f"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "2ebe2967ccb95a5c6fda202f26f22314",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37176,
        "upload_time": "2022-08-15T18:19:29",
        "upload_time_iso_8601": "2022-08-15T18:19:29.302469Z",
        "url": "https://files.pythonhosted.org/packages/99/ab/1e5a14c077e5c7ca82e01d1fc953df2f32a317f116081f0d33af989d0fc7/mulpyversus-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74c561778de86491db081341b316af467b5e947993efe9034834d71a4fd77d3b",
          "md5": "4588b93cfba6c6746e8bdbdf265b6ae5",
          "sha256": "fe753fa4dc2f5f381f87301cf35c81b7a3b2d58a0aad1714b0d705758a89c646"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4588b93cfba6c6746e8bdbdf265b6ae5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37233,
        "upload_time": "2022-08-15T20:07:18",
        "upload_time_iso_8601": "2022-08-15T20:07:18.892173Z",
        "url": "https://files.pythonhosted.org/packages/74/c5/61778de86491db081341b316af467b5e947993efe9034834d71a4fd77d3b/mulpyversus-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9fbb44a1d3af00469038dd140a8d6075dda2a6fc1f593bdbfd75933a5aee238",
          "md5": "57729d21eeea55998ac81c6905fe80fc",
          "sha256": "c775bf72b5cbc1651a6cbe4eaab234331870cdeafc8a4680beb1dd9b8c04b896"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "57729d21eeea55998ac81c6905fe80fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37225,
        "upload_time": "2022-08-15T21:22:40",
        "upload_time_iso_8601": "2022-08-15T21:22:40.484337Z",
        "url": "https://files.pythonhosted.org/packages/a9/fb/b44a1d3af00469038dd140a8d6075dda2a6fc1f593bdbfd75933a5aee238/mulpyversus-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc3dc0088c3614434ca275b52ebb4300bbfd32bfd9a73c57e145d983456e5a93",
          "md5": "ebef24a6a79dc445df7f454d913c4d03",
          "sha256": "9eb2fcc41541535f82402e0e079daf18590e1d45825dbd1c8c7033c98fe6310b"
        },
        "downloads": -1,
        "filename": "mulpyversus-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ebef24a6a79dc445df7f454d913c4d03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37329,
        "upload_time": "2022-08-16T18:54:30",
        "upload_time_iso_8601": "2022-08-16T18:54:30.118409Z",
        "url": "https://files.pythonhosted.org/packages/cc/3d/c0088c3614434ca275b52ebb4300bbfd32bfd9a73c57e145d983456e5a93/mulpyversus-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc3dc0088c3614434ca275b52ebb4300bbfd32bfd9a73c57e145d983456e5a93",
        "md5": "ebef24a6a79dc445df7f454d913c4d03",
        "sha256": "9eb2fcc41541535f82402e0e079daf18590e1d45825dbd1c8c7033c98fe6310b"
      },
      "downloads": -1,
      "filename": "mulpyversus-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ebef24a6a79dc445df7f454d913c4d03",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37329,
      "upload_time": "2022-08-16T18:54:30",
      "upload_time_iso_8601": "2022-08-16T18:54:30.118409Z",
      "url": "https://files.pythonhosted.org/packages/cc/3d/c0088c3614434ca275b52ebb4300bbfd32bfd9a73c57e145d983456e5a93/mulpyversus-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}