{
  "info": {
    "author": "Roberto Gomes de Aguiar Veiga",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "*NanoFilm* is an easy-to-use package whose main functionality is to allow the user to position \nand manipulate (i.e., displace and rotate) one or more molecules onto a substrate, thus generating \nstructures that will be used as input coordinates for first-principles calculations or atomistic \nsimulations.\n\nA molecule-substrate system (*Film* object) created with *NanoFilm* consists of one or more molecules \n(*Molecule* objects) adsorbed onto a substrate (*Slab* object). Of course, everything made of atoms \n(*Atom* objects). *Atom*, *Molecule*, *Slab* and *Film* objects have properties and methods that can \nbe used to create complex structures in a purely programmatic way, using Python 3. In the current \nversion, the possibility of creating a molecular film (*Lattice* object) has not yet been \nimplemented.\n\nAtomic structures generated with *NanoFilm* can be saved into plain text files in XYZ format. The \ncurrent version also allows the user to create basic input files for the *pw.x* code, which is \npart of the plane-wave suite Quantum Espresso.\n\nIf you find this package useful for your own research on adsorption of molecules on surfaces, please \nconsider citing my articles about this topic:\n\n- Adsorption of metal-phthalocyanine molecules onto the Si(111) surface passivated by delta-doping: ab initio calculations, R. G. A. Veiga, R. H. Miwa, and A. B. McLean. Phys. Rev. B, 93, 115301 (2016).\n- Self-assembly of NiTPP on Cu(111): a transition from disordered 1D wires to 2D chiral domains, S. Fatayer, R. G. A. Veiga, M. J. Prieto, E. Perim, R. Landers, R. H. Miwa, and A. de Siervo. Phys. Chem. Chem. Phys., 17, 18344 (2015).\n- Structural, electronic, and magnetic properties of pristine and oxygen-adsorbed graphene nanoribbons, R. H. Miwa, R. G. A. Veiga, and G. P. Srivastava. Appl. Surf. Sci., 256, 5776 (2010).\n- Quenching of local magnetic moment in oxygen adsorbed graphene nanoribbons, R. G. A. Veiga, R. H. Miwa, and G. P. Srivastava. J. Chem. Phys, 128, 201101 (2008).\n- Ab initio study of TCNQ-doped carbon nanotubes, R. G. A. Veiga and R. H. Miwa. Phys. Rev. B, 73, 245422 (2006).\n\nThis helps me, among other things, to get funding for my research, which includes working on other codes \nlike this.\n\nThe documentation is still limited to comments in the code. A \"how-to\" of the package's objects and \nmethods can be seen in the Python script given as an example below. If you have any question, just \ndrop an e-mail to *roberto.veiga@ufabc.edu.br*.\n\n# Basic Usage\n\n---\n\n## Adsorbing and manipulating molecules onto graphene\n\n\n```python\nfrom nanofilm import AtomType,Atom,Molecule,Slab,Film   # Imports NanoFilm's modules\n```\n\n#### Sets the AtomType objects (specifiying the pseudpotential files for later use in ab initio calculations)\n\n\n```python\nhydrogen=AtomType(symbol=\"H\",element=\"hydrogen\",atomicnumber=1,atomicmass=1.007,pseudopotential=\"H.pbe.UPF\")\ncarbon=AtomType(\"C\",\"carbon\",6,12.0107,\"C.pbe.UPF\")\n```\n\n#### Creates first H2 molecule from scratch\n\n\n```python\nmol1=Molecule(moltype=\"H2\")                    # H2 molecule, initially empty (no atoms)\nh1=Atom(atomtype=hydrogen,x=[-0.44,0.0,0.0])   # First H atom\nh2=h1.duplicate_atom()                         # Second H atom\nh2.x=[0.44,0.0,0.0]                            # Changes the coordinates of the second H atom\nmol1.add_atom(h1)                              # Adds the first H atom to the molecule\nmol1.add_atom(h2)                              # Adds the second H atom to the molecule\n```\n\n#### Creates the substrate (Slab object) taking the coordinates from an .xyz file\n\n\n```python\nslab=Slab(slabname=\"graphene\",filename=\"graphene.xyz\")   # Slab object (in this case, graphene unit cell, with coordinates\n                                                         # taken from an XYZ file)\nslab.add_ads_site(ads_site=\"top\",pos=[1.23,0.0])         # Defines the first adsorption site (\"top\")\nslab.add_ads_site(\"hollow\",[1.23,1.41])                  # Defines the second adsorption site (\"hollow\")            \nslab.add_ads_site(\"bridge\",[0,1.42])                     # Defines the third adsorption site (\"bridge\")\nslab.replicate_slab(4,3,True)                            # Replicates the slab in the XY plane, including the adsorption sites\n```\n\n#### Adsorbs the H2 molecule over a \"hollow\" site on the substrate (creating first a Film object)\n\n\n```python\nfilm=Film()                                        # Initially empty Film object\nfilm.mindistance=0.75                              # Minimum separation between the molecule and the substrate\nfilm.set_substrate(slab)                           # Sets graphene as the substrate\nfilm.add_molecule(mol1,\"hollow\",8,vert_sep=0.75)   # Places the H2 molecule over the eighth \"hollow\" site on the substrate\nfilm.write_xyz(\"film1.xyz\")                        # Writes an XYZ file\nfilm.write_pw_input(filename='film1.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])            # Creates a basic input file for pw.x from Quantum Espresso package\n```\n\n#### Rotates the H2 molecule and enforces a minimum distance from the substrate to prevent overlap\n\n\n```python\nmol1.rotate_molecule(theta=90,phi=45,psi=0)   # Rotates the H2 molecule according to the Euler angles theta, phi, and psi\nfilm.enforce_mindist()                        # Required to enforce that the molecule will not be too close to the substrate\nfilm.write_xyz(\"film2.xyz\")\nfilm.write_pw_input(filename='film2.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])\n```\n\n#### Duplicates the H2 molecule, placing it over the seventh \"top\" site on the substrate\n\n\n```python\nmol2=mol1.duplicate_molecule()\nfilm.add_molecule(mol2,\"top\",7,vert_sep=1.0)   # Places the second H2 molecule over the first \"top\" site on the substrate\nmol2.rotate_molecule(theta=15,phi=30,psi=45)   # Rotates the second H2 molecule\nfilm.enforce_mindist()\nfilm.write_xyz(\"film3.xyz\")\nfilm.write_pw_input(filename='film3.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])\n```\n\n#### Removes both H2 molecules and adsorbs a benzene molecule at an arbitrary position on the substrate\n\n\n```python\nfilm.remove_molecule(0)                               # Removes the first H2 molecule, with id=0\nfilm.remove_molecule(1)                               # Removes the second H2 molecule, with id=1\nmol3=Molecule(\"Benzene\",\"benzene.xyz\")                # Benzene molecule (coordinates taken from an XYZ file)\nfilm.mindistance=2.0                                  # Redefines the minimum molecule-substrate separation\nfilm.add_molecule(mol3,pos=[2.12,4.07],vert_sep=2.0)  # Benzene molecule is placed at an arbitrary location\nfilm.write_xyz(\"film4.xyz\")\nfilm.write_pw_input(filename='film4.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])\n```\n\n#### Rotates the benzene molecule and demonstrates how to prevent molecule-substrate spurious overlap\n\n\n```python\nmol3.rotate_molecule(30,30,30)\nfilm.write_xyz(\"film5.xyz\")\nfilm.write_pw_input(filename='film5.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])          # Since the molecule overlaps with the substrate, you will likely to \n                                                 # have problems if you try to run pw.x with this input file\nfilm.enforce_mindist()\nfilm.write_xyz(\"film6.xyz\")\nfilm.write_pw_input(filename='film6.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])          # This input file, in turn, should work fine, since a minimum distance \n                                                 # separating the molecule and the substrate was enforced\n```\n\n#### Makes a copy of the benzene molecule, places it over the seventh \"bridge\" site and then displaces it\n\n\n```python\nmol4=mol3.duplicate_molecule()\nfilm.add_molecule(mol4,\"bridge\",7,vert_sep=2.0)\nfilm.write_xyz(\"film7.xyz\")\nfilm.write_pw_input(filename='film7.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])\nmol4.displace_molecule([1.0,1.5,-5.0])\nfilm.write_xyz(\"film8.xyz\")\nfilm.write_pw_input(filename='film8.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])          # Since the molecule overlaps with the substrate, you will likely to \n                                                 # have problems if you try to run pw.x with this input file\nfilm.enforce_mindist()\nfilm.write_xyz(\"film9.xyz\")                      \nfilm.write_pw_input(filename='film9.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])          # This input file, in turn, should work fine, since a minimum distance \n                                                 # separating the molecule and the substrate was enforced\n```\n\n#### Replicates the slab and adds a TCNQ molecule, placing it over the \"top\" site 16\n\n\n```python\nslab.replicate_slab(2,1,True)                 # Replicates the slab along X direction, including the adsorption sites\nnitrogen=AtomType(\"N\",\"nitrogen\",14,14.0067)  # Create a new AtomType object, for nitrogen, since TCNQ has nitrogen in \n                                              # its composition\nmol5=Molecule(\"TCNQ\",\"tcnq.xyz\")              # TCNQ molecule (coordinates taken from an XYZ file)\nfilm.add_molecule(mol5,\"top\",16,vert_sep=3)\nmol5.rotate_molecule(psi=90)                  # Rotates the molecule by 90 degrees around the Z axis\nfilm.write_xyz(\"film10.xyz\")\nfilm.write_pw_input(filename='film10.in',\n                    ecutwfc=22.0,ecutrho=88.0,\n                    nspin=2,input_dft='vdw-df',\n                    kvec=[4,4,4,0,0,0])\n```\n\n\n```python\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rgaveiga/nanofilm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nanofilm",
    "package_url": "https://pypi.org/project/nanofilm/",
    "platform": "",
    "project_url": "https://pypi.org/project/nanofilm/",
    "project_urls": {
      "Homepage": "https://github.com/rgaveiga/nanofilm"
    },
    "release_url": "https://pypi.org/project/nanofilm/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manipulation of molecules adsorbed onto a substrate.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15351081,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440aafb9fa42f3a3b09e769d6da5f754be3d98987e886c5354e8bfa2025d0f1f",
          "md5": "30a9879572357d2338eff39e1d929b89",
          "sha256": "62249a1a81b11591f427484df95ca405927503e021eaef40f86ebed8182b1f14"
        },
        "downloads": -1,
        "filename": "nanofilm-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30a9879572357d2338eff39e1d929b89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19440,
        "upload_time": "2021-09-07T21:30:07",
        "upload_time_iso_8601": "2021-09-07T21:30:07.691076Z",
        "url": "https://files.pythonhosted.org/packages/44/0a/afb9fa42f3a3b09e769d6da5f754be3d98987e886c5354e8bfa2025d0f1f/nanofilm-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "440aafb9fa42f3a3b09e769d6da5f754be3d98987e886c5354e8bfa2025d0f1f",
        "md5": "30a9879572357d2338eff39e1d929b89",
        "sha256": "62249a1a81b11591f427484df95ca405927503e021eaef40f86ebed8182b1f14"
      },
      "downloads": -1,
      "filename": "nanofilm-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30a9879572357d2338eff39e1d929b89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19440,
      "upload_time": "2021-09-07T21:30:07",
      "upload_time_iso_8601": "2021-09-07T21:30:07.691076Z",
      "url": "https://files.pythonhosted.org/packages/44/0a/afb9fa42f3a3b09e769d6da5f754be3d98987e886c5354e8bfa2025d0f1f/nanofilm-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}