{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": ".. -*- mode: rst -*-\n.. |PythonMinVersion| replace:: 3.6\n.. |NumPyMinVersion| replace:: 1.14.6\n.. |SciPyMinVersion| replace:: 1.1.0\n.. |JoblibMinVersion| replace:: 0.11\n.. |ThreadpoolctlMinVersion| replace:: 2.0.0\n.. |MatplotlibMinVersion| replace:: 2.2.3\n.. |Scikit-ImageMinVersion| replace:: 0.14.5\n.. |SklearnMinVersion| replace:: 0.24.0\n.. |PandasMinVersion| replace:: 0.25.0\n.. |PlotlyMinVersion| replace:: 4.10.0\n.. |PytestMinVersion| replace:: 5.0.1\n\n|Build|_ |PageDeploy|_ |Doc|_ |PythonVersion|_ |PyPi|_ |Conda|_ |Download|_\n\n.. image:: https://raw.githubusercontent.com/UTS-CASLab/hyperbox-brain/master/images/logo.png\n   :height: 150px\n   :width: 150px\n   :align: center\n   :target: https://uts-caslab.github.io/hyperbox-brain/\n\n.. |Build| image:: https://github.com/UTS-CASLab/hyperbox-brain/workflows/tests/badge.svg\n.. _Build: https://github.com/UTS-CASLab/hyperbox-brain/workflows/tests/badge.svg\n\n.. |PageDeploy| image:: https://github.com/UTS-CASLab/hyperbox-brain/actions/workflows/pages/pages-build-deployment/badge.svg\n.. _PageDeploy: https://uts-caslab.github.io/hyperbox-brain/\n\n.. |Doc| image:: https://readthedocs.org/projects/hyperbox-brain/badge/?version=latest\n.. _Doc: https://hyperbox-brain.readthedocs.io/en/latest/?badge=latest\n\n.. |PythonVersion| image:: https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-blue\n.. _PythonVersion: https://pypi.org/project/hyperbox-brain/\n\n.. |PyPi| image:: https://img.shields.io/pypi/v/hyperbox-brain\n.. _PyPi: https://pypi.org/project/hyperbox-brain\n\n.. |Conda| image:: https://anaconda.org/conda-forge/hyperbox-brain/badges/installer/conda.svg\n.. _Conda: https://anaconda.org/conda-forge/hyperbox-brain\n\n.. |Download| image:: https://static.pepy.tech/personalized-badge/hyperbox-brain?period=total&units=none&left_color=grey&right_color=orange&left_text=pypi%20downloads\n.. _Download: https://pepy.tech/project/hyperbox-brain\n\n**hyperbox-brain** is a Python open source toolbox implementing hyperbox-based machine learning algorithms built on top of\nscikit-learn and is distributed under the GPL-3 license.\n\nThe project was started in 2018 by Prof. `Bogdan Gabrys <https://profiles.uts.edu.au/Bogdan.Gabrys>`_ and Dr. `Thanh Tung Khuat <https://thanhtung09t2.wixsite.com/home>`_ at the Complex Adaptive Systems Lab - The\nUniversity of Technology Sydney. This project is a core module aiming to the formulation of explainable life-long learning \nsystems in near future.\n\n.. contents:: **Table of Contents**\n   :depth: 2\n\n=========\nResources\n=========\n\n- `Documentation <https://hyperbox-brain.readthedocs.io/en/latest>`_\n- `Source Code <https://github.com/UTS-CASLab/hyperbox-brain/>`_\n- `Installation <https://github.com/UTS-CASLab/hyperbox-brain#installation>`_\n- `Issue tracker <https://github.com/UTS-CASLab/hyperbox-brain/issues>`_\n- `Examples <https://github.com/UTS-CASLab/hyperbox-brain/tree/main/examples>`_\n\n============\nInstallation\n============\n\nDependencies\n~~~~~~~~~~~~\n\nHyperbox-brain requires:\n\n- Python (>= |PythonMinVersion|)\n- Scikit-learn (>= |SklearnMinVersion|)\n- NumPy (>= |NumPyMinVersion|)\n- SciPy (>= |SciPyMinVersion|)\n- joblib (>= |JoblibMinVersion|)\n- threadpoolctl (>= |ThreadpoolctlMinVersion|)\n- Pandas (>= |PandasMinVersion|)\n\n=======\n\nHyperbox-brain plotting capabilities (i.e., functions start with ``show_`` or ``draw_``) \nrequire Matplotlib (>= |MatplotlibMinVersion|) and Plotly (>= |PlotlyMinVersion|).\nFor running the examples Matplotlib >= |MatplotlibMinVersion| and Plotly >= |PlotlyMinVersion| are required.\nA few examples require pandas >= |PandasMinVersion|.\n\nconda installation\n~~~~~~~~~~~~~~~~~~\n\nYou need a working conda installation. Get the correct miniconda for\nyour system from `here <https://conda.io/miniconda.html>`__.\n\nTo install hyperbox-brain, you need to use the conda-forge channel:\n\n.. code:: bash\n\n    conda install -c conda-forge hyperbox-brain\n\nWe recommend to use a `conda virtual environment <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>`_.\n\npip installation\n~~~~~~~~~~~~~~~~\n\nIf you already have a working installation of numpy, scipy, pandas, matplotlib,\nand scikit-learn, the easiest way to install hyperbox-brain is using ``pip``:\n\n.. code:: bash\n\n    pip install -U hyperbox-brain\n\nAgain, we recommend to use a `virtual environment\n<https://docs.python.org/3/tutorial/venv.html>`_ for this.\n\nFrom source\n~~~~~~~~~~~\n\nIf you would like to use the most recent additions to hyperbox-brain or\nhelp development, you should install hyperbox-brain from source.\n\nUsing conda\n-----------\n\nTo install hyperbox-brain from source using conda, proceed as follows:\n\n.. code:: bash\n\n    git clone https://github.com/UTS-CASLab/hyperbox-brain.git\n    cd hyperbox-brain\n    conda env create\n    source activate hyperbox-brain\n    pip install .\n\nUsing pip\n---------\n\nFor pip, follow these instructions instead:\n\n.. code:: bash\n\n    git clone https://github.com/UTS-CASLab/hyperbox-brain.git\n    cd hyperbox-brain\n    # create and activate a virtual environment\n    pip install -r requirements.txt\n    # install hyperbox-brain version for your system (see below)\n    pip install .\n\nTesting\n~~~~~~~\n\nAfter installation, you can launch the test suite from outside the source\ndirectory (you will need to have ``pytest`` >= |PyTestMinVersion| installed):\n\n.. code:: bash\n\n    pytest hbbrain\n\n========\nFeatures\n========\n\nTypes of input variables\n~~~~~~~~~~~~~~~~~~~~~~~~\nThe hyperbox-brain library separates learning models for continuous variables only\nand mixed-attribute data.\n\nIncremental learning\n~~~~~~~~~~~~~~~~~~~~\nIncremental (online) learning models are created incrementally and are updated continuously.\nThey are appropriate for big data applications where real-time response is an important requirement.\nThese learning models generate a new hyperbox or expand an existing hyperbox to cover each incoming\ninput pattern.\n\nAgglomerative learning\n~~~~~~~~~~~~~~~~~~~~~~\nAgglomerative (batch) learning models are trained using all training data available at the\ntraining time. They use the aggregation of existing hyperboxes to form new larger sized hyperboxes \nbased on the similarity measures among hyperboxes.\n\nEnsemble learning\n~~~~~~~~~~~~~~~~~\nEnsemble models in the hyperbox-brain toolbox build a set of hyperbox-based learners from a subset of\ntraining samples or a subset of both training samples and features. Training subsets of base learners \ncan be formed by stratified random subsampling, resampling, or class-balanced random subsampling. \nThe final predicted results of an ensemble model are an aggregation of predictions from all base learners \nbased on a majority voting mechanism. An intersting characteristic of hyperbox-based models is resulting \nhyperboxes from all base learners or decision trees can be merged to formulate a single model. This\ncontributes to increasing the explainability of the estimator while still taking advantage of strong points\nof ensemble models.\n\nMultigranularity learning\n~~~~~~~~~~~~~~~~~~~~~~~~~\nMulti-granularity learning algorithms can construct classifiers from multiresolution hierarchical granular representations \nusing hyperbox fuzzy sets. This algorithm forms a series of granular inferences hierarchically through many levels of \nabstraction. An attractive characteristic of these classifiers is that they can maintain a high accuracy in comparison \nto other fuzzy min-max models at a low degree of granularity based on reusing the knowledge learned from lower levels \nof abstraction.\n\nLearning from both labelled and unlabelled data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nOne of the exciting features of learning algorithms for the general fuzzy min-max neural network is the capability of \ncreating classification boundaries among known classes and clustering data and representing them as hyperboxes in the case that\nlabels are not available. Unlabelled hyperboxes is then possible to be labelled on the basis of the evidence of next incoming\ninput samples. As a result, the GFMMNN models have the ability to learn from the mixed labelled and unlabelled datasets in\na native way.\n\nAbility to directly process missing data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nLearning algorithms for the general fuzzy min-max neural network supported by the library may classify inputs with missing\ndata directly without the need for replacing or imputing missing values as in other classifiers.\n\nContinual learning of new classes in an incremental manner\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIncremental learning algorithms of hyperbox-based models in the **hyperbox-brain** library can grow and accommodate new\nclasses of data without retraining the whole classifier. Incremental learning algorithms themselves can generate new hyperboxes\nto represent clusters of new data with potentially new class labels both in the middle of normal training procedure and in the\noperating time where training has been finished. This property is a key feature for smart life-long learning systems.\n\nData editing and pruning approaches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nBy combining the repeated cross-validation methods provided by scikit-learn and hyperbox-based learning algorithms, evidence from\ntraining multiple models can be deployed for identifying which data points from the original training set or the hyperboxes from\nthe generated multiple models should be retained and those that should be edited out or pruned before further processing.\n\nScikit-learn compatible estimators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe estimators in hyperbox-brain is compatible with the well-known scikit-learn toolbox. \nTherefore, it is possible to use hyperbox-based estimators in scikit-learn `pipelines <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html>`_, \nscikit-learn hyperparameter optimizers (e.g., `grid search <https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html>`_ \nand `random search <https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html>`_), \nand scikit-learn model validation (e.g., `cross-validation scores <https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html>`_). \nIn addition, the hyperbox-brain toolbox can be used within hyperparameter optimisation libraries built on top of \nscikit-learn such as `hyperopt <http://hyperopt.github.io/hyperopt/>`_.\n\nExplainability of predicted results\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe hyperbox-brain library can provide the explanation of predicted results via visualisation. \nThis toolbox provides the visualisation of existing hyperboxes and the decision boundaries of \na trained hyperbox-based model if input features are two-dimensional features:\n\n.. image:: https://raw.githubusercontent.com/UTS-CASLab/hyperbox-brain/master/images/hyperboxes_and_boundaries.png\n   :height: 300 px\n   :width: 350 px\n   :align: center\n\nFor two-dimensional data, the toolbox also provides the reason behind the class prediction for each input sample \nby showing representative hyperboxes for each class which join the prediction process of the trained model for \nan given input pattern:\n\n.. image:: https://raw.githubusercontent.com/UTS-CASLab/hyperbox-brain/master/images/hyperboxes_explanation.png\n   :height: 300 px\n   :width: 350 px\n   :align: center\n\nFor input patterns with two or more dimensions, the hyperbox-brain toolbox uses a parallel coordinates graph to display \nrepresentative hyperboxes for each class which join the prediction process of the trained model for \nan given input pattern:\n\n.. image:: https://raw.githubusercontent.com/UTS-CASLab/hyperbox-brain/master/images/parallel_coord_explanation.PNG\n   :height: 300 px\n   :width: 600 px\n   :align: center\n\nEasy to use\n~~~~~~~~~~~\nHyperbox-brain is designed for users with any experience level. Learning models are easy to create, setup, and run. Existing methods are easy to modify and extend.\n\nJupyter notebooks\n~~~~~~~~~~~~~~~~~\nThe learning models in the hyperbox-brain toolbox can be easily retrieved in \nnotebooks in the Jupyter or JupyterLab environments.\n\nIn order to display plots from hyperbox-brain within a `Jupyter Notebook <https://jupyter-notebook.readthedocs.io/en/latest/>`_ we need to define the proper mathplotlib\nbackend to use. This can be performed by including the following magic command at the beginning of the Notebook:\n\n.. code:: bash\n\n    %matplotlib notebook\n\n`JupyterLab <https://github.com/jupyterlab/jupyterlab>`_ is the next-generation user interface for Jupyter, and it may display interactive plots with some caveats.\nIf you use JupyterLab then the current solution is to use the `jupyter-matplotlib <https://github.com/matplotlib/ipympl>`_ extension:\n\n.. code:: bash\n\n    %matplotlib widget\n\n`Examples <https://github.com/UTS-CASLab/hyperbox-brain/tree/main/examples>`_ regarding how to use the classes and functions in the hyperbox-brain toolbox have been written under the form of Jupyter notebooks.\n\n================\nAvailable models\n================\nThe following table summarises the supported hyperbox-based learning algorithms in this toolbox.\n\n.. list-table::\n   :widths: 20 10 10 10 30 10 10\n   :align: left\n   :header-rows: 1\n\n   * - Model\n     - Feature type \n     - Model type\n     - Learning type \n     - Implementation \n     - Example \n     - References \n   * - EIOL-GFMM\n     - Mixed\n     - Single \n     - Instance-incremental \n     - `ExtendedImprovedOnlineGFMM </hbbrain/mixed_data/eiol_gfmm.py>`_\n     - `Notebook 1 </examples/mixed_data/eiol_gfmm_general_use.ipynb>`_\n     - [1]_\n   * - Freq-Cat-Onln-GFMM \n     - Mixed \n     - Single \n     - Batch-incremental \n     - `FreqCatOnlineGFMM </hbbrain/mixed_data/freq_cat_onln_gfmm.py>`_\n     - `Notebook 2 </examples/mixed_data/freq_cat_onln_gfmm_general_use.ipynb>`_\n     - [2]_\n   * - OneHot-Onln-GFMM \n     - Mixed \n     - Single \n     - Batch-incremental \n     - `OneHotOnlineGFMM </hbbrain/mixed_data/onehot_onln_gfmm.py>`_\n     - `Notebook 3 </examples/mixed_data/onehot_onln_gfmm_general_use.ipynb>`_\n     - [2]_\n   * - Onln-GFMM \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `OnlineGFMM </hbbrain/numerical_data/incremental_learner/onln_gfmm.py>`_\n     - `Notebook 4 </examples/numerical_data/incremental_learner/onln_gfmm_general_use.ipynb>`_\n     - [3]_, [4]_\n   * - IOL-GFMM \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `ImprovedOnlineGFMM </hbbrain/numerical_data/incremental_learner/iol_gfmm.py>`_\n     - `Notebook 5 </examples/numerical_data/incremental_learner/iol_gfmm_general_use.ipynb>`_\n     - [5]_, [4]_\n   * - FMNN \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `FMNNClassifier </hbbrain/numerical_data/incremental_learner/fmnn.py>`_\n     - `Notebook 6 </examples/numerical_data/incremental_learner/fmnn_general_use.ipynb>`_\n     - [6]_\n   * - EFMNN \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `EFMNNClassifier </hbbrain/numerical_data/incremental_learner/efmnn.py>`_\n     - `Notebook 7 </examples/numerical_data/incremental_learner/efmnn_general_use.ipynb>`_\n     - [7]_ \n   * - KNEFMNN \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `KNEFMNNClassifier </hbbrain/numerical_data/incremental_learner/knefmnn.py>`_\n     - `Notebook 8 </examples/numerical_data/incremental_learner/knefmnn_general_use.ipynb>`_\n     - [8]_ \n   * - RFMNN \n     - Continuous \n     - Single \n     - Instance-incremental \n     - `RFMNNClassifier </hbbrain/numerical_data/incremental_learner/rfmnn.py>`_\n     - `Notebook 9 </examples/numerical_data/incremental_learner/rfmnn_general_use.ipynb>`_\n     - [9]_ \n   * - AGGLO-SM \n     - Continuous \n     - Single \n     - Batch \n     - `AgglomerativeLearningGFMM </hbbrain/numerical_data/batch_learner/agglo_gfmm.py>`_\n     - `Notebook 10 </examples/numerical_data/batch_learner/agglo_gfmm_general_use.ipynb>`_\n     - [10]_, [4]_\n   * - AGGLO-2\n     - Continuous \n     - Single \n     - Batch\n     - `AccelAgglomerativeLearningGFMM </hbbrain/numerical_data/batch_learner/accel_agglo_gfmm.py>`_\n     - `Notebook 11 </examples/numerical_data/batch_learner/accel_agglo_gfmm_general_use.ipynb>`_\n     - [10]_, [4]_\n   * - MRHGRC\n     - Continuous \n     - Granularity \n     - Multi-Granular learning \n     - `MultiGranularGFMM </hbbrain/numerical_data/multigranular_learner/multi_resolution_gfmm.py>`_\n     - `Notebook 12 </examples/numerical_data/multigranular_learner/multi_resolution_gfmm_general_use.ipynb>`_\n     - [11]_ \n   * - Decision-level Bagging of hyperbox-based learners\n     - Continuous \n     - Combination \n     - Ensemble \n     - `DecisionCombinationBagging </hbbrain/numerical_data/ensemble_learner/decision_comb_bagging.py>`_\n     - `Notebook 13 </examples/numerical_data/ensemble_learner/decision_comb_bagging_general_use.ipynb>`_\n     - [12]_\n   * - Decision-level Bagging of hyperbox-based learners with hyper-parameter optimisation\n     - Continuous\n     - Combination \n     - Ensemble \n     - `DecisionCombinationCrossValBagging </hbbrain/numerical_data/ensemble_learner/decision_comb_cross_val_bagging.py>`_\n     - `Notebook 14 </examples/numerical_data/ensemble_learner/decision_comb_cross_val_bagging_general_use.ipynb>`_\n     -  \n   * - Model-level Bagging of hyperbox-based learners\n     - Continuous \n     - Combination \n     - Ensemble \n     - `ModelCombinationBagging </hbbrain/numerical_data/ensemble_learner/model_comb_bagging.py>`_\n     - `Notebook 15 </examples/numerical_data/ensemble_learner/model_comb_bagging_general_use.ipynb>`_\n     - [12]_\n   * - Model-level Bagging of hyperbox-based learners with hyper-parameter optimisation \n     - Continuous \n     - Combination \n     - Ensemble \n     - `ModelCombinationCrossValBagging </hbbrain/numerical_data/ensemble_learner/model_comb_cross_val_bagging.py>`_\n     - `Notebook 16 </examples/numerical_data/ensemble_learner/model_comb_cross_val_bagging_general_use.ipynb>`_\n     -   \n   * - Random hyperboxes \n     - Continuous \n     - Combination \n     - Ensemble \n     - `RandomHyperboxesClassifier </hbbrain/numerical_data/ensemble_learner/random_hyperboxes.py>`_\n     - `Notebook 17 </examples/numerical_data/ensemble_learner/random_hyperboxes_general_use.ipynb>`_\n     - [13]_\n   * - Random hyperboxes with hyper-parameter optimisation for base learners \n     - Continuous \n     - Combination \n     - Ensemble \n     - `CrossValRandomHyperboxesClassifier </hbbrain/numerical_data/ensemble_learner/cross_val_random_hyperboxes.py>`_\n     - `Notebook 18 </examples/numerical_data/ensemble_learner/cross_val_random_hyperboxes_general_use.ipynb>`_\n     -  \n\n========\nExamples\n========\nTo see more elaborate examples, look `here\n<https://github.com/UTS-CASLab/hyperbox-brain/tree/main/examples>`__.\n\nSimply use an estimator by initialising, fitting and predicting:\n\n.. code:: python\n\n   from sklearn.datasets import load_iris\n   from sklearn.preprocessing import MinMaxScaler\n   from sklearn.model_selection import train_test_split\n   from sklearn.metrics import accuracy_score\n   from hbbrain.numerical_data.incremental_learner.onln_gfmm import OnlineGFMM\n   # Load dataset\n   X, y = load_iris(return_X_y=True)\n   # Normalise features into the range of [0, 1] because hyperbox-based models only work in a unit range\n   scaler = MinMaxScaler()\n   scaler.fit(X)\n   X = scaler.transform(X)\n   # Split data into training and testing sets\n   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n   # Training a model\n   clf = OnlineGFMM(theta=0.1).fit(X_train, y_train)\n   # Make prediction\n   y_pred = clf.predict(X_test)\n   acc = accuracy_score(y_test, y_pred)\n   print(f'Accuracy = {acc * 100: .2f}%')\n\nUsing hyperbox-based estimators in a `sklearn Pipeline <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html>`_:\n\n.. code:: python\n\n   from sklearn.datasets import load_iris\n   from sklearn.preprocessing import MinMaxScaler\n   from sklearn.pipeline import Pipeline\n   from sklearn.model_selection import train_test_split\n   from hbbrain.numerical_data.incremental_learner.onln_gfmm import OnlineGFMM\n\n   # Load dataset\n   X, y = load_iris(return_X_y=True)\n   # Split data into training and testing sets\n   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n   # Create a GFMM model\n   onln_gfmm_clf = OnlineGFMM(theta=0.1)\n   # Create a pipeline\n   pipe = Pipeline([\n      ('scaler', MinMaxScaler()),\n      ('onln_gfmm', onln_gfmm_clf)\n   ])\n   # Training\n   pipe.fit(X_train, y_train)\n   # Make prediction\n   acc = pipe.score(X_test, y_test)\n   print(f'Testing accuracy = {acc * 100: .2f}%')\n\nUsing hyperbox-based models with `random search <https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html>`_:\n\n.. code:: python\n\n   from sklearn.datasets import load_breast_cancer\n   from sklearn.preprocessing import MinMaxScaler\n   from sklearn.metrics import accuracy_score\n   from sklearn.model_selection import RandomizedSearchCV\n   from sklearn.model_selection import train_test_split\n   from hbbrain.numerical_data.ensemble_learner.random_hyperboxes import RandomHyperboxesClassifier\n   from hbbrain.numerical_data.incremental_learner.onln_gfmm import OnlineGFMM\n\n   # Load dataset\n   X, y = load_breast_cancer(return_X_y=True)\n   # Normalise features into the range of [0, 1] because hyperbox-based models only work in a unit range\n   scaler = MinMaxScaler()\n   X = scaler.fit_transform(X)\n   # Split data into training and testing sets\n   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n   # Initialise search ranges for hyper-parameters\n   parameters = {'n_estimators': [20, 30, 50, 100, 200, 500], \n              'max_samples': [0.2, 0.3, 0.4, 0.5, 0.6],\n              'max_features' : [0.2, 0.3, 0.4, 0.5, 0.6],\n              'class_balanced' : [True, False],\n              'feature_balanced' : [True, False],\n              'n_jobs' : [4],\n              'random_state' : [0],\n              'base_estimator__theta' : np.arange(0.05, 0.61, 0.05),\n              'base_estimator__gamma' : [0.5, 1, 2, 4, 8, 16]}\n   # Init base learner. This example uses the original online learning algorithm to train a GFMM classifier\n   base_estimator = OnlineGFMM()\n   # Using random search with only 40 random combinations of parameters\n   random_hyperboxes_clf = RandomHyperboxesClassifier(base_estimator=base_estimator)\n   clf_rd_search = RandomizedSearchCV(random_hyperboxes_clf, parameters, n_iter=40, cv=5, random_state=0)\n   # Fit model\n   clf_rd_search.fit(X_train, y_train)\n   # Print out best scores and hyper-parameters\n   print(\"Best average score = \", clf_rd_search.best_score_)\n   print(\"Best params: \", clf_rd_search.best_params_)\n   # Using the best model to make prediction\n   best_gfmm_rd_search = clf_rd_search.best_estimator_\n   y_pred_rd_search = best_gfmm_rd_search.predict(X_test)\n   acc_rd_search = accuracy_score(y_test, y_pred_rd_search)\n   print(f'Accuracy (random-search) = {acc_rd_search * 100: .2f}%')\n\n========\nCitation\n========\n\nIf you use hyperbox-brain in a scientific publication, we would appreciate\ncitations to the following paper::\n\n  @article{khuat2022,\n  author  = {Thanh Tung Khuat and Bogdan Gabrys},\n  title   = {Hyperbox-brain: A Python Toolbox for Hyperbox-based Machine Learning Algorithms},\n  journal = {ArXiv},\n  year    = {2022},\n  volume  = {},\n  number  = {0},\n  pages   = {1-7},\n  url     = {}\n  }\n\n============\nContributing\n============\nFeel free to contribute in any way you like, we're always open to new ideas and approaches.\n\nThere are some ways for users to get involved:\n\n- `Issue tracker <https://github.com/UTS-CASLab/hyperbox-brain/issues>`_: this\n  place is meant to report bugs, request for minor features, or small improvements. Issues\n  should be short-lived and solved as fast as possible.\n- `Discussions <https://github.com/UTS-CASLab/hyperbox-brain/discussions>`_: in this place,\n  you can ask for new features, submit your questions and get help, propose new ideas, or\n  even show the community what you are achieving with hyperbox-brain! If you have a new\n  algorithm or want to port a new functionality to hyperbox-brain, this is the place to discuss.\n- `Contributing guide <https://github.com/UTS-CASLab/hyperbox-brain/blob/main/docs/developers/contributing.rst>`_:\n  in this place, you can learn more about making a contribution to the hyperbox-brain toolbox.\n\n=======\nLicense\n=======\nHyperbox-brain is free and open-source software licensed under the `GNU General Public License v3.0 <https://github.com/UTS-CASLab/hyperbox-brain/blob/main/LICENSE>`_.\n\n==========\nReferences\n==========\n\n.. [1] : T. T. Khuat and B. Gabrys \"`An Online Learning Algorithm for a Neuro-Fuzzy Classifier with Mixed-Attribute Data <https://arxiv.org/abs/2009.14670>`_\", ArXiv preprint, arXiv:2009.14670, 2020.\n.. [2] : T. T. Khuat and B. Gabrys \"`An in-depth comparison of methods handling mixed-attribute data for general fuzzy min–max neural network <https://doi.org/10.1016/j.neucom.2021.08.083>`_\", Neurocomputing, vol 464, pp. 175-202, 2021.\n.. [3] : B. Gabrys and A. Bargiela, \"`General fuzzy min-max neural network for clustering and classification <https://doi.org/10.1109/72.846747>`_\", IEEE Transactions on Neural Networks, vol. 11, no. 3, pp. 769-783, 2000.\n.. [4] : T. T. Khuat and B. Gabrys, \"`Accelerated learning algorithms of general fuzzy min-max neural network using a novel hyperbox selection rule <https://doi.org/10.1016/j.ins.2020.08.046>`_\", Information Sciences, vol. 547, pp. 887-909, 2021.\n.. [5] : T. T. Khuat, F. Chen, and B. Gabrys, \"`An improved online learning algorithm for general fuzzy min-max neural network <https://doi.org/10.1109/IJCNN48605.2020.9207534>`_\", in Proceedings of the International Joint Conference on Neural Networks (IJCNN), pp. 1-9, 2020.\n.. [6] : P. Simpson, \"`Fuzzy min—max neural networks—Part 1: Classiﬁcation <https://doi.org/10.1109/72.159066>`_\", IEEE Transactions on Neural Networks, vol. 3, no. 5, pp. 776-786, 1992.\n.. [7] : M. Mohammed and C. P. Lim, \"`An enhanced fuzzy min-max neural network for pattern classification <https://doi.org/10.1109/TNNLS.2014.2315214>`_\", IEEE Transactions on Neural Networks and Learning Systems, vol. 26, no. 3, pp. 417-429, 2014.\n.. [8] : M. Mohammed and C. P. Lim, \"`Improving the Fuzzy Min-Max neural network with a k-nearest hyperbox expansion rule for pattern classification <https://doi.org/10.1016/j.asoc.2016.12.001>`_\", Applied Soft Computing, vol. 52, pp. 135-145, 2017.\n.. [9] : O. N. Al-Sayaydeh, M. F. Mohammed, E. Alhroob, H. Tao, and C. P. Lim, \"`A refined fuzzy min-max neural network with new learning procedures for pattern classification <https://doi.org/10.1109/TFUZZ.2019.2939975>`_\", IEEE Transactions on Fuzzy Systems, vol. 28, no. 10, pp. 2480-2494, 2019.\n.. [10] : B. Gabrys, \"`Agglomerative learning algorithms for general fuzzy min-max neural network <https://link.springer.com/article/10.1023/A:1016315401940>`_\", Journal of VLSI Signal Processing Systems for Signal, Image and Video Technology, vol. 32, no. 1, pp. 67-82, 2002.\n.. [11] : T.T. Khuat, F. Chen, and B. Gabrys, \"`An Effective Multiresolution Hierarchical Granular Representation Based Classifier Using General Fuzzy Min-Max Neural Network <https://doi.org/10.1109/TFUZZ.2019.2956917>`_\", IEEE Transactions on Fuzzy Systems, vol. 29, no. 2, pp. 427-441, 2021.\n.. [12] : B. Gabrys, \"`Combining neuro-fuzzy classifiers for improved generalisation and reliability <https://doi.org/10.1109/IJCNN.2002.1007519>`_\", in Proceedings of the 2002 International Joint Conference on Neural Networks, vol. 3, pp. 2410-2415, 2002.\n.. [13] : T. T. Khuat and B. Gabrys, \"`Random Hyperboxes <https://doi.org/10.1109/TNNLS.2021.3104896>`_\", IEEE Transactions on Neural Networks and Learning Systems, 2021.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://pypi.org/project/hyperbox-brain/#files",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://uts-caslab.github.io/hyperbox-brain/",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "Thanh Tung KHUAT",
    "maintainer_email": "thanhtung09t2@gmail.com",
    "name": "hyperbox-brain",
    "package_url": "https://pypi.org/project/hyperbox-brain/",
    "platform": null,
    "project_url": "https://pypi.org/project/hyperbox-brain/",
    "project_urls": {
      "Bug Tracker": "https://github.com/UTS-CASLab/hyperbox-brain/issues",
      "Documentation": "https://hyperbox-brain.readthedocs.io/en/stable/",
      "Download": "https://pypi.org/project/hyperbox-brain/#files",
      "Homepage": "https://uts-caslab.github.io/hyperbox-brain/",
      "Source Code": "https://github.com/UTS-CASLab/hyperbox-brain"
    },
    "release_url": "https://pypi.org/project/hyperbox-brain/0.1.5/",
    "requires_dist": [
      "numpy (>=1.14.6)",
      "scipy (>=1.1.0)",
      "joblib (>=0.11)",
      "threadpoolctl (>=2.0.0)",
      "scikit-learn (>=0.24.0)",
      "matplotlib (>=2.2.3)",
      "pandas (>=0.25.0)",
      "plotly (>=4.10.0)",
      "numpy (>=1.14.6) ; extra == 'docs'",
      "scipy (>=1.1.0) ; extra == 'docs'",
      "joblib (>=0.11) ; extra == 'docs'",
      "threadpoolctl (>=2.0.0) ; extra == 'docs'",
      "scikit-learn (>=0.24.0) ; extra == 'docs'",
      "matplotlib (>=2.2.3) ; extra == 'docs'",
      "pandas (>=0.25.0) ; extra == 'docs'",
      "plotly (>=4.10.0) ; extra == 'docs'",
      "sphinx (>=4.0.1) ; extra == 'docs'",
      "sphinx-gallery (>=0.7.0) ; extra == 'docs'",
      "numpydoc (>=1.0.0) ; extra == 'docs'",
      "Pillow (>=7.1.2) ; extra == 'docs'",
      "sphinx-prompt (>=1.3.0) ; extra == 'docs'",
      "sphinxext-opengraph (>=0.4.2) ; extra == 'docs'",
      "sphinx-autodocgen (>=1.3) ; extra == 'docs'",
      "scikit-learn (>=0.24.0) ; extra == 'examples'",
      "matplotlib (>=2.2.3) ; extra == 'examples'",
      "pandas (>=0.25.0) ; extra == 'examples'",
      "plotly (>=4.10.0) ; extra == 'examples'",
      "scikit-learn (>=0.24.0) ; extra == 'tests'",
      "matplotlib (>=2.2.3) ; extra == 'tests'",
      "pandas (>=0.25.0) ; extra == 'tests'",
      "pytest (>=5.0.1) ; extra == 'tests'",
      "pytest-cov (>=2.9.0) ; extra == 'tests'",
      "flake8 (>=3.8.2) ; extra == 'tests'",
      "black (>=22.3.0) ; extra == 'tests'",
      "mypy (>=0.770) ; extra == 'tests'",
      "pyamg (>=4.0.0) ; extra == 'tests'"
    ],
    "requires_python": ">=3.6",
    "summary": "A scikit-learn compatible hyperbox-based machine learning library in Python",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14280776,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b282dae8801f76bc55e2a97df617f29bd1e3e61b2b818399ba7c479e43c493a4",
          "md5": "78d8189e503a0d2b2366895c1339694e",
          "sha256": "b0b711c71fcd8fef182d5f3320da44fc7220b07773b4b4bcaa55fcfde102f3fd"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78d8189e503a0d2b2366895c1339694e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 239239,
        "upload_time": "2022-04-25T14:06:31",
        "upload_time_iso_8601": "2022-04-25T14:06:31.264348Z",
        "url": "https://files.pythonhosted.org/packages/b2/82/dae8801f76bc55e2a97df617f29bd1e3e61b2b818399ba7c479e43c493a4/hyperbox_brain-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcbe3d83cc2b7f30c981b03076d879839f4817cd25b5ce92b71a39af47864b53",
          "md5": "f576740820d9a095c96bbeafff98a82e",
          "sha256": "bc313acfdaa16a0703be723d8aceca326ccdbabaf951fdf1c9dd8fb7a152d8ed"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f576740820d9a095c96bbeafff98a82e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 164304,
        "upload_time": "2022-04-25T14:06:33",
        "upload_time_iso_8601": "2022-04-25T14:06:33.807801Z",
        "url": "https://files.pythonhosted.org/packages/bc/be/3d83cc2b7f30c981b03076d879839f4817cd25b5ce92b71a39af47864b53/hyperbox-brain-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "801fed7c3ff800c5b25e628f0c502aa0aa35557071bd3ebe3e153922cae9cf3a",
          "md5": "c09d4fda91abc9c483a54ac6a190dbe4",
          "sha256": "ff32331aa7f37103292f66af821d781e16ecf196c4449e537a632e7912b136b0"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c09d4fda91abc9c483a54ac6a190dbe4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 239404,
        "upload_time": "2022-04-29T15:01:21",
        "upload_time_iso_8601": "2022-04-29T15:01:21.470704Z",
        "url": "https://files.pythonhosted.org/packages/80/1f/ed7c3ff800c5b25e628f0c502aa0aa35557071bd3ebe3e153922cae9cf3a/hyperbox_brain-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62aee2a9f22309603938a0f92b2027dafd2940629198966ef23aa2993a2f9d8e",
          "md5": "8f7b63f653afc0220793d3061dc2c78e",
          "sha256": "c4c4787abe35e055cc60acd4f633d78f7e2eaffa6b3f0947186d7c2642e9a8e1"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f7b63f653afc0220793d3061dc2c78e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 164495,
        "upload_time": "2022-04-29T15:01:23",
        "upload_time_iso_8601": "2022-04-29T15:01:23.906106Z",
        "url": "https://files.pythonhosted.org/packages/62/ae/e2a9f22309603938a0f92b2027dafd2940629198966ef23aa2993a2f9d8e/hyperbox-brain-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d4dbb96eec2135ee86b622c46885c14b1f11a0b3ea1e10c4ec7b15c56abcb4d",
          "md5": "6bd6580f68c48b025ecde55f79cf8e0a",
          "sha256": "bfb86301afbd867a42be0435015576fd837681f01ec375bae411026531f4cc1a"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bd6580f68c48b025ecde55f79cf8e0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 240202,
        "upload_time": "2022-05-02T02:43:54",
        "upload_time_iso_8601": "2022-05-02T02:43:54.007850Z",
        "url": "https://files.pythonhosted.org/packages/3d/4d/bb96eec2135ee86b622c46885c14b1f11a0b3ea1e10c4ec7b15c56abcb4d/hyperbox_brain-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2dd09ee824407548282f3c9fcde7da0d1d1fe8f5e222df88a4a72b646b0dea0",
          "md5": "bc1cfd7e1df98a4734c032141df25390",
          "sha256": "f33ed81c753cb6b90610f3292c031367465c3fc21225f6c41d0002beda3d9c52"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bc1cfd7e1df98a4734c032141df25390",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 164382,
        "upload_time": "2022-05-02T02:43:58",
        "upload_time_iso_8601": "2022-05-02T02:43:58.152703Z",
        "url": "https://files.pythonhosted.org/packages/a2/dd/09ee824407548282f3c9fcde7da0d1d1fe8f5e222df88a4a72b646b0dea0/hyperbox-brain-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a88066710e528c412acf36a2a4ad2371a219eefddd52e6f074b46e7a9d477d6",
          "md5": "a48cf7e095880acc458332b039a9d254",
          "sha256": "688c9dfa2caa677a7c41852c6e6bf0e166927609be73d53a5ff01236f4917884"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a48cf7e095880acc458332b039a9d254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 240309,
        "upload_time": "2022-05-02T12:58:07",
        "upload_time_iso_8601": "2022-05-02T12:58:07.640060Z",
        "url": "https://files.pythonhosted.org/packages/5a/88/066710e528c412acf36a2a4ad2371a219eefddd52e6f074b46e7a9d477d6/hyperbox_brain-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54d7b281b31302837ecef87d49962056336b3752e39ac3b9974411a23c6b2f4d",
          "md5": "c251a08ddb8574827c84543ed81d2062",
          "sha256": "10b46720240a306428227ad23802d6ba27d943e0ee54d1a8a3b73e5b6bdac857"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c251a08ddb8574827c84543ed81d2062",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 164510,
        "upload_time": "2022-05-02T12:58:11",
        "upload_time_iso_8601": "2022-05-02T12:58:11.774634Z",
        "url": "https://files.pythonhosted.org/packages/54/d7/b281b31302837ecef87d49962056336b3752e39ac3b9974411a23c6b2f4d/hyperbox-brain-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "138220efdb2b1068afacaed81bc5afd9636b5c033ff7af86b900175f50edcbe7",
          "md5": "977fc1c6b81bc2ded53931e6749c4aeb",
          "sha256": "934fba6366221f49ec8d14531606ad9957858cfe5e2c429f4200115c9b6f5622"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "977fc1c6b81bc2ded53931e6749c4aeb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 240304,
        "upload_time": "2022-05-04T15:38:14",
        "upload_time_iso_8601": "2022-05-04T15:38:14.245922Z",
        "url": "https://files.pythonhosted.org/packages/13/82/20efdb2b1068afacaed81bc5afd9636b5c033ff7af86b900175f50edcbe7/hyperbox_brain-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b89b951a204400b9cc85ce7cb37af2af263abcb1597bb489f94360d19d97bf",
          "md5": "2b5fc2cb858d081e2b0e63dfb5bdb378",
          "sha256": "41ba26a8b285f48ef5f8e76c6f60fdab43b9ed689b7f2c531e7ade4442a83437"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2b5fc2cb858d081e2b0e63dfb5bdb378",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 164276,
        "upload_time": "2022-05-04T15:38:17",
        "upload_time_iso_8601": "2022-05-04T15:38:17.532486Z",
        "url": "https://files.pythonhosted.org/packages/d9/b8/9b951a204400b9cc85ce7cb37af2af263abcb1597bb489f94360d19d97bf/hyperbox-brain-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e49fdad9c8e1c170ad76853a61eedccba9cdaabac593c1d6c5dbbeb95301678a",
          "md5": "11d1317e9c035082348aeff5e5df7c48",
          "sha256": "846dfb6e743da6aa11e50e895eaa20aa92b21b38abfb716aecdcebfc110a3be9"
        },
        "downloads": -1,
        "filename": "hyperbox_brain-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11d1317e9c035082348aeff5e5df7c48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 251618,
        "upload_time": "2022-06-29T04:32:24",
        "upload_time_iso_8601": "2022-06-29T04:32:24.348887Z",
        "url": "https://files.pythonhosted.org/packages/e4/9f/dad9c8e1c170ad76853a61eedccba9cdaabac593c1d6c5dbbeb95301678a/hyperbox_brain-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85570b7a5d930bdc46c3be5606802f98a3904e1b6cd4a1ae178ed31ef079c529",
          "md5": "99b6b421a6bb7727fed4f205cb46099d",
          "sha256": "0d7df7935ea826a63dda1818849a1d1104c9f0ab087f7a662523902fefdf51bc"
        },
        "downloads": -1,
        "filename": "hyperbox-brain-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "99b6b421a6bb7727fed4f205cb46099d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 177929,
        "upload_time": "2022-06-29T04:32:27",
        "upload_time_iso_8601": "2022-06-29T04:32:27.330824Z",
        "url": "https://files.pythonhosted.org/packages/85/57/0b7a5d930bdc46c3be5606802f98a3904e1b6cd4a1ae178ed31ef079c529/hyperbox-brain-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e49fdad9c8e1c170ad76853a61eedccba9cdaabac593c1d6c5dbbeb95301678a",
        "md5": "11d1317e9c035082348aeff5e5df7c48",
        "sha256": "846dfb6e743da6aa11e50e895eaa20aa92b21b38abfb716aecdcebfc110a3be9"
      },
      "downloads": -1,
      "filename": "hyperbox_brain-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11d1317e9c035082348aeff5e5df7c48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 251618,
      "upload_time": "2022-06-29T04:32:24",
      "upload_time_iso_8601": "2022-06-29T04:32:24.348887Z",
      "url": "https://files.pythonhosted.org/packages/e4/9f/dad9c8e1c170ad76853a61eedccba9cdaabac593c1d6c5dbbeb95301678a/hyperbox_brain-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85570b7a5d930bdc46c3be5606802f98a3904e1b6cd4a1ae178ed31ef079c529",
        "md5": "99b6b421a6bb7727fed4f205cb46099d",
        "sha256": "0d7df7935ea826a63dda1818849a1d1104c9f0ab087f7a662523902fefdf51bc"
      },
      "downloads": -1,
      "filename": "hyperbox-brain-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "99b6b421a6bb7727fed4f205cb46099d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 177929,
      "upload_time": "2022-06-29T04:32:27",
      "upload_time_iso_8601": "2022-06-29T04:32:27.330824Z",
      "url": "https://files.pythonhosted.org/packages/85/57/0b7a5d930bdc46c3be5606802f98a3904e1b6cd4a1ae178ed31ef079c529/hyperbox-brain-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}