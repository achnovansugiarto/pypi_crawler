{
  "info": {
    "author": "Benoit Hamelin",
    "author_email": "benoit@benoithamelin.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "# catty -- Concatenative programming integrated in Python\n\n[Concatenative programming](https://concatenative.org/wiki/view/Front%20Page)\nis a method and coding style that emphasizes functional composition through\nimplicit parameter passing and postfix notation. It is often understood as\n*stack programming*, mimicking the constraints of stack machines. While it\ncarries some hipster cred, it is popular in development circles involving\ndedicated hardware. Its most popular incarnation is the\n[FORTH](https://concatenative.org/wiki/view/Forth) language; the\n[Factor](https://factorcode.org/) language and platform provides a more modern\nprogramming system over its principles.\n\nThis project is an attempt at integrating a concatenative style and approach\nto the Python language and software ecosystem. Its present incarnation is\nsomewhat clumsy as it parasites the Python syntax: a catty program is valid\nPython code. The catty semantics also attempt to leverage the Python built-ins\nand library as much as possible. Here is a taste:\n\n\n```python\nfrom operator import add, mul\nfrom catty import reduce\nfrom catty.words import dup\n\n\nresult = reduce([5, 6, dup, mul, add])\nprint(result)  # Yields [41]\n```\n\nSo this early take yields the answer to life, the universe and everything,\nbut it's off by one. Should be fixed in next version.\n\nThe interpretation is performed in a Python code loop, so speed cannot be\nexpected. However, the interpreter in its current form optimizes tail calls,\nenabling arbitrary recursive applications:\n\n```python\nfrom operator import mul\nfrom catty import reduce\nfrom catty.words import dup, tuck, fork, apply, Word\n\nfactorial_ = Word(  # prod, n -- prod, n-1\n    dup, 0, eq,\n    [],\n    [dup, tuck, mul, swap, 1, sub, apply.factorial_],\n    fork\n)\nfactorial = Word(  # n -- n!\n    1, swap, factorial_\n)\nprint(reduce([5, factorial]))  # Yields [120]\n```\n\nThis project is meant for incremental exploration of interactions between\nconcatenative and applicative programming styles. It will not shy away from\nchanging completely as it progresses. Current plans involve digging further\ninto tapping into namespace control through function definitions, replacing\nthe interpretation loop with Python bytecode generation, and further\nstrengthening integration so that concatenative and regular Python code can\nlive side by side.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hamelin/catty",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "catty",
    "package_url": "https://pypi.org/project/catty/",
    "platform": "",
    "project_url": "https://pypi.org/project/catty/",
    "project_urls": {
      "Homepage": "https://github.com/hamelin/catty"
    },
    "release_url": "https://pypi.org/project/catty/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Concatenative programming integrated to Python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12476363,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f76ea39ac4e88f4552cd12a0b3926149b190d76a923ad4ed27822de654bbf685",
          "md5": "d66ab9f8040f6c80240cd923fabebfc4",
          "sha256": "f2eb08e1fc05505b171e828223c8d6065c79be2e0098d27ee932c58e4f867612"
        },
        "downloads": -1,
        "filename": "catty-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d66ab9f8040f6c80240cd923fabebfc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6736,
        "upload_time": "2022-01-04T18:03:33",
        "upload_time_iso_8601": "2022-01-04T18:03:33.262092Z",
        "url": "https://files.pythonhosted.org/packages/f7/6e/a39ac4e88f4552cd12a0b3926149b190d76a923ad4ed27822de654bbf685/catty-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f76ea39ac4e88f4552cd12a0b3926149b190d76a923ad4ed27822de654bbf685",
        "md5": "d66ab9f8040f6c80240cd923fabebfc4",
        "sha256": "f2eb08e1fc05505b171e828223c8d6065c79be2e0098d27ee932c58e4f867612"
      },
      "downloads": -1,
      "filename": "catty-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d66ab9f8040f6c80240cd923fabebfc4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6736,
      "upload_time": "2022-01-04T18:03:33",
      "upload_time_iso_8601": "2022-01-04T18:03:33.262092Z",
      "url": "https://files.pythonhosted.org/packages/f7/6e/a39ac4e88f4552cd12a0b3926149b190d76a923ad4ed27822de654bbf685/catty-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}