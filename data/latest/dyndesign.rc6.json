{
  "info": {
    "author": "Patrizio Gelosi",
    "author_email": "patrizio.gelosi@amarulasolutions.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "DynDesign\n=========\n\n|Build Status| |PyPi Version Status| |Python Version Status| |License|\n\nA set of tools for Dynamic Design Patterns in Python.\n\n\nInstall\n-------\n\nDyndesign is on the Python Package Index (PyPI):\n\n::\n\n    pip install dyndesign\n\n\nOverview\n--------\n\nMerge two or more classes:\n\n.. code:: python\n\n    from dyndesign import mergeclasses\n\n    MergedClass = mergeclasses(Base, Ext1, Ext2, ...)\n\nDecorate a method with one or more instance methods loaded at runtime:\n\n.. code:: python\n\n    from dyndesign import decoratewith\n\n    @decoratewith(\"decorator_1\", \"component.decorator_2\", ...)\n    def decorated_method(self, ...):\n        ...\n\nSafely invoke functions or methods from a ``safezone`` context manager:\n\n.. code:: python\n\n    from dyndesign import safezone\n\n    with safezone():\n        ...\n        function_possibly_non_existent()\n        ...\n\nCreate and destroy Singleton classes:\n\n.. code:: python\n\n    from dyndesign import SingletonMeta\n\n    class Singleton(metaclass=SingletonMeta):\n        ...\n\n    singleton_instance = Singleton(...)\n    same_singleton_instance = Singleton()\n    Singleton().destroy_singleton()\n    new_singleton_instance = Singleton(...)\n\nImport classes dynamically using the path:\n\n.. code:: python\n\n    from dyndesign import importclass\n\n    ImportedClass = importclass(\"directory.module.class_name\")\n\n\nMerging Classes\n---------------\n\nDyndesign provides API ``mergeclasses`` to merge two or more classes as if they\nwere dictionaries, so that the merged class has the attributes and methods of\nthe base class and of the extension classes. If two or more classes have the\nsame attributes/methods, the attributes/methods from the rightmost classes (in\nthe order in which the classes are passed to ``mergeclasses``) overload the\nones from the leftmost classes, similarly to what happens when merging\ndictionaries.\n\n.. code:: python\n\n    from dyndesign import mergeclasses\n\n    class Base:\n        def __init__(self, init_value):\n            self.param = init_value\n\n        def m1(self):\n            print(f\"Method `m1` of class `Base`, and {self.param=}\")\n\n        def m2(self):\n            print(f\"Method `m2` of class `Base`\")\n\n    class Ext:\n        def m1(self):\n            print(f\"Method `m1` of class `Ext`, and {self.param=}\")\n\n    MergedClass = mergeclasses(Base, Ext)\n    merged_instance = MergedClass(\"INITIAL VALUE\")\n    merged_instance.m1()\n    merged_instance.m2()\n\n    # Method `m1` of class `Ext`, and self.param='INITIAL VALUE'\n    # Method `m2` of class `Base`\n\n\nWhen a merged class is instantiated with arguments, the constructor of each\nmerging class is invoked, since constructors are excluded from being overloaded.\nAlso, arguments passed to each constructor are adaptively filtered based on the\nconstructor signature so that each constructor takes just the arguments it\nrequires, and no exception is raised for the exceeding arguments passed:\n\n.. code:: python\n\n    class A:\n        def __init__(self):\n            print(\"No argument passed to class `A`\")\n\n    class B:\n        def __init__(self, a):\n            print(f\"Argument {a=} passed to class `B`\")\n\n    class C:\n        def __init__(self, a, b, kw1=None):\n            print(f\"Argument {a=}, {b=} and {kw1=} passed to class `C`\")\n\n    class D:\n        def __init__(self, kw2=None):\n            print(f\"Argument {kw2=} passed to class `D`\")\n\n    MergedClass = mergeclasses(A, B, C, D)\n    MergedClass(\"Alpha\", \"Beta\", kw1=\"kwarg #1\", kw2=\"kwarg #2\")\n\n    # No argument passed to class `A`\n    # Argument a='Alpha' passed to class `B`\n    # Argument a='Alpha', b='Beta' and kw1='kwarg #1' passed to class `C`\n    # Argument kw2='kwarg #2' passed to class `D`\n\n\nIt is also possible to extend the same behavior of the constructor ``__init__``\n(i.e., all the methods from all the merged classes are invoked rather than being\noverloaded by the same name method from the rightmost class) to other methods. A\nlist of method names whose instances have to be all invoked can be specified in\nthe ``invoke_all`` argument of ``mergeclasses``. Adaptive filtering of the\narguments of the method instances is performed as well.\n\n.. code:: python\n\n    class E:\n        def method(self):\n            print(\"No argument passed to `method` of class `E`\")\n\n    class F:\n        def method(self, a):\n            print(f\"Argument {a=} passed to `method` of class `F`\")\n\n    MergedClass = mergeclasses(E, F, invoke_all=[\"method\"])\n    MergedClass().method(\"Alpha\")\n\n    # No argument passed to `method` of class `E`\n    # Argument a='Alpha' passed to `method` of class `F`\n\n\nDynamic Decorators\n------------------\n\nMeta decorator ``decoratewith`` decorates a class method with one or more\npipelined instance decorators (regardless whether they statically exist or not).\nThe syntax of the dynamic decorators aims to get rid of the boilerplate for\nwrapping and returning the decorator code, leaving just the wrapper's code. For\nexample, dynamic decorators can be used to decorate a method from a base class\nwith a method from an extension class:\n\n.. code:: python\n\n    from dyndesign import decoratewith\n\n    class Base:\n        @decoratewith(\"decorator\")\n        def m(self):\n            print(f\"Method `m` of class `Base`\")\n\n    class Ext:\n        def decorator(self, func):\n            print(\"Beginning of method decoration from Ext.\")\n            func(self)\n            print(\"End of method decoration from Ext.\")\n\n    merged = mergeclasses(Base, Ext)()\n    merged.m()\n\n    # Beginning of method decoration from Ext.\n    # Method `m` of class `Base`\n    # End of method decoration from Ext.\n\nIf a decorator name is passed in the ``invoke_all`` argument of\n``mergeclasses``, then multiple decorator instances with the same name from\ndifferent extension classes may be used in pipeline:\n\n.. code:: python\n\n    class Ext2:\n        def decorator(self, func):\n            print(\"Beginning of method decoration from Ext2.\")\n            func(self)\n            print(\"End of method decoration from Ext2.\")\n\n    merged = mergeclasses(Base, Ext, Ext2, invoke_all=[\"decorator\"])()\n    merged.m()\n\n    # Beginning of method decoration from Ext.\n    # Beginning of method decoration from Ext2.\n    # Method `m` of class `Base`\n    # End of method decoration from Ext2.\n    # End of method decoration from Ext.\n\n\nArguments of ``decoratewith`` are loaded at runtime as properties of the\nvariable 'self': a dynamic decorator can be, for example, a method of a\ncomponent class. In case of dynamic decoration from a sub-instance of 'self',\nthe instance object of the decorated method is passed to the decorator as the\nargument ``decorated_self``. If a dynamic decorator is not found at runtime\n(e.g., because it is a method of an optional class that has not been merged),\nthen the code execution proceeds normally, as shown below with the decorator\n``non_existent_decorator``:\n\n.. code:: python\n\n    class Base:\n        def __init__(self):\n            self.comp = Component()\n\n        @decoratewith(\"comp.decorator1\", \"comp.decorator2\", \"non_existent_decorator\")\n        def m(self):\n            print(\"Method `m` of class `Base`\")\n\n    class Component:\n        def __init__(self):\n            self.value = \"Initial\"\n\n        def decorator1(self, func, decorated_self):\n            print(f\"Beginning of method decoration #1 ({self.value=})\")\n            self.value = \"Processed\"\n            func(decorated_self)\n            print(\"End of method decoration #1\")\n\n        def decorator2(self, func, decorated_self):\n            print(f\"Beginning of method decoration #2 ({self.value=})\")\n            func(decorated_self)\n            print(\"End of method decoration #2\")\n\n    base = Base()\n    base.m()\n\n    # Beginning of method decoration #1 (self.value='Initial')\n    # Beginning of method decoration #2 (self.value='Processed')\n    # Method `m` of class `Base`\n    # End of method decoration #2\n    # End of method decoration #1\n\n\nSafezone Context Manager\n------------------------\n\nAny function or method that may or may not exist at runtime (e.g., methods of\nmerged classes) can be invoked from Context Manager ``safezone`` in order to\nsuppress the possible exceptions raised if the function or method is not found\nat runtime. Optionally, a fallback function/method can be also passed. If no\nfunction name(s) is passed as argument of ``safezone``, then each function in\nthe safe zone's code is protected; if any function name(s) is passed, the\nprotection is restricted to the functions having that/those name(s). For\nexample, ``safezone`` can be used to safely call functions that may or may not\nexist at runtime:\n\n.. code:: python\n\n    from dyndesign import safezone\n    \n    def fallback():\n        print(\"Fallback function\")\n\n    def function_a():\n        print(\"Function `a`\")\n\n    with safezone(fallback=fallback):\n        function_a()\n        non_existent_function()\n\n    # Function `a`\n    # Fallback function\n\n\nA further example shows that ``safezone`` can be used to safely invoke methods\nof classes that may or may not be merged with other classes:\n\n.. code:: python\n\n    class Base:\n        def fallback(self):\n            print(\"Fallback method\")\n\n        def m(self, class_desc):\n            print(f\"Method `m` of {class_desc}\")\n            with safezone(\"optional_method\", fallback=self.fallback):\n                self.optional_method()\n\n    class ExtOptional:\n        def optional_method(self):\n            print(\"Optional method from class `ExtOptional`\")\n\n    merged = mergeclasses(Base, ExtOptional)()\n    merged.m(\"merged class\")\n    base = Base()\n    base.m(\"class `Base` standalone\")\n\n    # Method `m` of merged class\n    # Optional method from class `ExtOptional`\n    # Method `m` of class `Base` standalone\n    # Fallback method\n\n\nInvoking methods safely\n-----------------------\n\nAs alternative to ``safezone`` context manager, ``safeinvoke`` can be used to\nsafely invoke methods that may or may not exist at runtime. To this end, method\n``m`` of class ``Base`` of the example above can be replaced as follows:\n\n.. code:: python\n\n    from dyndesign import safeinvoke\n\n    ...\n\n        def m(self, class_desc):\n            print(f\"Method `m` of {class_desc}\")\n            safeinvoke(\"optional_method\", self, fallback=self.fallback)\n\n\nSingleton classes\n-----------------\n\nSingleton classes can be swiftly created and destroyed with\n``destroy_singleton``:\n\n.. code:: python\n\n    from dyndesign import SingletonMeta\n\n    class Singleton(metaclass=SingletonMeta):\n        def __init__(self, instance_id = None):\n            if instance_id:\n                self.instance_id = instance_id\n            print(f\"Created a {instance_id} instance of `Singleton`\")\n\n        def where_points(self, object_name):\n            print(f\"Object `{object_name}` points to the {self.instance_id} instance\")\n\n    s_A = Singleton(\"first\")\n    s_A.where_points(\"s_A\")\n    s_B = Singleton()\n    s_B.where_points(\"s_B\")\n    Singleton().destroy_singleton()\n    s_C = Singleton(\"second\")\n    s_C.where_points(\"s_C\")\n\n    # Created a first instance of `Singleton`\n    # Object `s_A` points to the first instance\n    # Object `s_B` points to the first instance\n    # Created a second instance of `Singleton`\n    # Object `s_C` points to the second instance\n\nThe class method ``destroy`` of SingletonMeta can be invoked to destroy all the\nSingleton classes at once. As a further alternative to the instance call\n``destroy_singleton``, the names of the Singleton classes to destroy can be\npassed to the class method ``destroy``:\n\n.. code:: python\n\n    Singleton().destroy_singleton() # Destroy only `Singleton`\n    SingletonMeta.destroy() # Destroy all the singleton classes\n    SingletonMeta.destroy('Singleton1', 'Singleton2', 'Singleton3') # Destroy selectively\n\n\nImporting classes dynamically\n-----------------------------\n\nClasses can be imported dynamically using the package/class names or the path in\ndot-notation as shown below:\n\n.. code:: python\n\n    from dyndesign import importclass\n\n    ClassA = importclass('package_A', 'ClassA')\n    ClassB = importclass('directory_B.package_B.ClassB')\n\n\nRunning tests\n--------------\n\nTo run the tests using your default python:\n\n::\n\n    pip install -U pytest\n    python3 -m pytest test\n\n\n.. |Build Status| image:: https://github.com/amarula/dyndesign/actions/workflows/python-app.yml/badge.svg\n    :target: https://github.com/amarula/dyndesign/actions\n.. |Python Version Status| image:: https://img.shields.io/badge/python-3.8_3.9_3.10_3.11-blue.svg\n    :target: https://github.com/amarula/dyndesign/actions\n.. |PyPi Version Status| image:: https://badge.fury.io/py/dyndesign.svg\n    :target: https://badge.fury.io/py/dyndesign\n.. |License| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n    :target: https://opensource.org/licenses/MIT\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amarula/dyndesign",
    "keywords": "design,pattern,dynamic,decorator,inheritance",
    "license": "MIT",
    "maintainer": "Patrizio Gelosi",
    "maintainer_email": "patrizio.gelosi@amarulasolutions.com",
    "name": "dyndesign",
    "package_url": "https://pypi.org/project/dyndesign/",
    "platform": null,
    "project_url": "https://pypi.org/project/dyndesign/",
    "project_urls": {
      "Homepage": "https://github.com/amarula/dyndesign",
      "Repository": "https://github.com/amarula/dyndesign"
    },
    "release_url": "https://pypi.org/project/dyndesign/0.9.5/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Toolset for Dynamic Design Patterns in Python.",
    "version": "0.9.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16246804,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "536a01b7dfb440ffe22c427b8aaabee0bad3020740c98f96e562101a378beca4",
          "md5": "606e76af5950fa95657df13b0a3b11ed",
          "sha256": "4bb0f37069939ddb6ad1adc78ecd44d9cacf36b28e633da20e76848e3264345b"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "606e76af5950fa95657df13b0a3b11ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7739,
        "upload_time": "2022-10-26T14:16:09",
        "upload_time_iso_8601": "2022-10-26T14:16:09.379022Z",
        "url": "https://files.pythonhosted.org/packages/53/6a/01b7dfb440ffe22c427b8aaabee0bad3020740c98f96e562101a378beca4/dyndesign-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6ec4e608d525a26a22fc4c4cedf3d765e489ee9c8308229ac4843d8cb8b5e19",
          "md5": "88e918cbf0baee03e2a1d9447e8b1919",
          "sha256": "0556f8d4ea6413433aab0643ddb73075357d279a7f88815491d7470cac6f48bc"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88e918cbf0baee03e2a1d9447e8b1919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 9907,
        "upload_time": "2022-10-26T14:16:12",
        "upload_time_iso_8601": "2022-10-26T14:16:12.430709Z",
        "url": "https://files.pythonhosted.org/packages/b6/ec/4e608d525a26a22fc4c4cedf3d765e489ee9c8308229ac4843d8cb8b5e19/dyndesign-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36b986358b141e3be80246e331d4f83bb85f42e6be1cefb3cd87de38d2e2ca9a",
          "md5": "909fa43449634d6cb243d1ff353bf5a9",
          "sha256": "81a0ae2a656b2ed782bff7fe23cb36b9f4791f223d59ed8fef17d34d730ffec7"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "909fa43449634d6cb243d1ff353bf5a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 8022,
        "upload_time": "2022-10-28T08:45:28",
        "upload_time_iso_8601": "2022-10-28T08:45:28.300045Z",
        "url": "https://files.pythonhosted.org/packages/36/b9/86358b141e3be80246e331d4f83bb85f42e6be1cefb3cd87de38d2e2ca9a/dyndesign-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b954708f8bd3a9ba9ddda29af03f4d677586dda26d059a84e5123c4e89899fd9",
          "md5": "dba6a26bbfb6f2a8416c2c12e0982299",
          "sha256": "0887da3bc252838947d9e435303f9b350ae01e524fe4b87b8edca2b72e248d6d"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dba6a26bbfb6f2a8416c2c12e0982299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10255,
        "upload_time": "2022-10-28T08:45:29",
        "upload_time_iso_8601": "2022-10-28T08:45:29.902837Z",
        "url": "https://files.pythonhosted.org/packages/b9/54/708f8bd3a9ba9ddda29af03f4d677586dda26d059a84e5123c4e89899fd9/dyndesign-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e2bdafd3a9554227242b6e9c287d28baef8940e881cfb94d198ffd17fe4dd5",
          "md5": "c58c50e6b388ed1197c9a7b1b5cc9ef1",
          "sha256": "6e878ca2c6329e5039ab83476d6940daa53022691198aaa3b85155a0f7e6e3dd"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c58c50e6b388ed1197c9a7b1b5cc9ef1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 8333,
        "upload_time": "2022-12-02T10:01:22",
        "upload_time_iso_8601": "2022-12-02T10:01:22.125960Z",
        "url": "https://files.pythonhosted.org/packages/21/e2/bdafd3a9554227242b6e9c287d28baef8940e881cfb94d198ffd17fe4dd5/dyndesign-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92ad2bb608fee6457d9783460cc8873be1eea7c6d7d25af0338704d000aeb060",
          "md5": "42ddbbff6afba5de6e32435181c86506",
          "sha256": "a8c60c565dc75b4ce532e09546fa32ca12ece1be692883d9617e239860b209f9"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "42ddbbff6afba5de6e32435181c86506",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10726,
        "upload_time": "2022-12-02T10:01:27",
        "upload_time_iso_8601": "2022-12-02T10:01:27.971434Z",
        "url": "https://files.pythonhosted.org/packages/92/ad/2bb608fee6457d9783460cc8873be1eea7c6d7d25af0338704d000aeb060/dyndesign-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b19d22d7ae22f6fb684242e57c64c07987587db3c64543fcbba7fd70e08c090b",
          "md5": "0920f280d7659627e80e1182e7643cf6",
          "sha256": "a3e356223a30dfc33187414991b95d6d68e531f5cedd591ccf4aaee922c098b4"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0920f280d7659627e80e1182e7643cf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9121,
        "upload_time": "2022-12-21T10:40:47",
        "upload_time_iso_8601": "2022-12-21T10:40:47.692067Z",
        "url": "https://files.pythonhosted.org/packages/b1/9d/22d7ae22f6fb684242e57c64c07987587db3c64543fcbba7fd70e08c090b/dyndesign-0.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a0324a044f26cd31bad2d8bcd2adcb1ae07e8374cf7f1ed32bd61baa678679",
          "md5": "f6ff34cc50b762ea635eb6d5c092f192",
          "sha256": "e7d738387d282d0dad436db241f697a63bed4d552e2eda623e9c5a543862cd51"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f6ff34cc50b762ea635eb6d5c092f192",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 11702,
        "upload_time": "2022-12-21T10:40:49",
        "upload_time_iso_8601": "2022-12-21T10:40:49.252553Z",
        "url": "https://files.pythonhosted.org/packages/d9/a0/324a044f26cd31bad2d8bcd2adcb1ae07e8374cf7f1ed32bd61baa678679/dyndesign-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd556a98b0877033446d4aa8d88306027d01ae0eeab3360f1e90dcc5bb110185",
          "md5": "6868a40dbba4216252d0e17166b2b48c",
          "sha256": "96251c5aec953653d0e3ac1e0b77b8df345d3121bfe71346aadcd31af1724218"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6868a40dbba4216252d0e17166b2b48c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9598,
        "upload_time": "2022-12-23T11:41:23",
        "upload_time_iso_8601": "2022-12-23T11:41:23.247076Z",
        "url": "https://files.pythonhosted.org/packages/cd/55/6a98b0877033446d4aa8d88306027d01ae0eeab3360f1e90dcc5bb110185/dyndesign-0.9.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29a69489e4cc7eed8ebd3e5258e21ae9933d91d6fb59ad9a30d2aacb0c7e6541",
          "md5": "1980415fff84c75b18f213a70e13b978",
          "sha256": "c6834b994b30a08efbdc21e583d280988e201139e5aa0adeaa67748f3a911836"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1980415fff84c75b18f213a70e13b978",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12353,
        "upload_time": "2022-12-23T11:41:24",
        "upload_time_iso_8601": "2022-12-23T11:41:24.835353Z",
        "url": "https://files.pythonhosted.org/packages/29/a6/9489e4cc7eed8ebd3e5258e21ae9933d91d6fb59ad9a30d2aacb0c7e6541/dyndesign-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18c4dfc19e75e9a275ca2c072d491848070c688cf824b1caa2e2199caf7ffcff",
          "md5": "d3eaf092ed977db45184099f29636d09",
          "sha256": "34ad52f2180ee06fa48d2653fe0891f99eee527a30b5decb0a8e25266fe78d23"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3eaf092ed977db45184099f29636d09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9739,
        "upload_time": "2022-12-29T08:45:27",
        "upload_time_iso_8601": "2022-12-29T08:45:27.968306Z",
        "url": "https://files.pythonhosted.org/packages/18/c4/dfc19e75e9a275ca2c072d491848070c688cf824b1caa2e2199caf7ffcff/dyndesign-0.9.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26ff95df69af2eeb15b87aab03da3fae9bbec0f42e1485e0b5d696103eff5e1d",
          "md5": "fb6da1b10cae1f8a07e9a2623c362ddb",
          "sha256": "7961c26fa43f48d51cda59e5b21e32886c4734054d282e9ac5b2f2925e58c329"
        },
        "downloads": -1,
        "filename": "dyndesign-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fb6da1b10cae1f8a07e9a2623c362ddb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12480,
        "upload_time": "2022-12-29T08:45:29",
        "upload_time_iso_8601": "2022-12-29T08:45:29.462470Z",
        "url": "https://files.pythonhosted.org/packages/26/ff/95df69af2eeb15b87aab03da3fae9bbec0f42e1485e0b5d696103eff5e1d/dyndesign-0.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18c4dfc19e75e9a275ca2c072d491848070c688cf824b1caa2e2199caf7ffcff",
        "md5": "d3eaf092ed977db45184099f29636d09",
        "sha256": "34ad52f2180ee06fa48d2653fe0891f99eee527a30b5decb0a8e25266fe78d23"
      },
      "downloads": -1,
      "filename": "dyndesign-0.9.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d3eaf092ed977db45184099f29636d09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 9739,
      "upload_time": "2022-12-29T08:45:27",
      "upload_time_iso_8601": "2022-12-29T08:45:27.968306Z",
      "url": "https://files.pythonhosted.org/packages/18/c4/dfc19e75e9a275ca2c072d491848070c688cf824b1caa2e2199caf7ffcff/dyndesign-0.9.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26ff95df69af2eeb15b87aab03da3fae9bbec0f42e1485e0b5d696103eff5e1d",
        "md5": "fb6da1b10cae1f8a07e9a2623c362ddb",
        "sha256": "7961c26fa43f48d51cda59e5b21e32886c4734054d282e9ac5b2f2925e58c329"
      },
      "downloads": -1,
      "filename": "dyndesign-0.9.5.tar.gz",
      "has_sig": false,
      "md5_digest": "fb6da1b10cae1f8a07e9a2623c362ddb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 12480,
      "upload_time": "2022-12-29T08:45:29",
      "upload_time_iso_8601": "2022-12-29T08:45:29.462470Z",
      "url": "https://files.pythonhosted.org/packages/26/ff/95df69af2eeb15b87aab03da3fae9bbec0f42e1485e0b5d696103eff5e1d/dyndesign-0.9.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}