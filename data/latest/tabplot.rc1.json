{
  "info": {
    "author": "Jayghosh Rao",
    "author_email": "jayghoshter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# tabplot\n\n**WORK IN PROGRESS**\n\nWhen working from the terminal, I'd need to quickly (and beautifully) plot the data in csv-style text files. This meant good colors, axis labels, plot labels, adjustable axis limits, etc. I started with making a simple wrapper script around matplotlib to do this. Over time, I kept adding pre- and post-processing functionality such as scaling, normalizing, and linear regression, not to mention exposing more of matplotlib's properties and functions. Since the script kept growing, I decided to move it into its own separate package.\n\n# Installation\n\nYou can install tabplot via testpypi\n\n```\npip install git+https://github.com/jayghoshter/tabplot\n```\n\nCheck out [SciencePlots](https://github.com/garrettj403/SciencePlots) for added plot beautification.\n\n# Examples\n\n## Simple line plots\n\nAssuming text data stored in csv-style files with the following assumptions:\n\n- No header labels\n- x,y data in columns 0,1 respectively\n- Either space or comma separated\n\nThe following code will generate basic plots. For customization options please refer to the examples section or test cases.\n\n```\nfrom tabplot import Plot\nplot = Plot()\nplot.files = ['./file_1.csv', './file_2.csv'],\nplot.linewidths = 2,\nplot.labels = ['A', 'B']\nplot.read()\nplot.draw()\nplot.show()\nplot.close()\n```\n\nor\n\n```\nfrom tabplot import Plot\nPlot(\n    files = ['./file_1.csv', './file_2.csv'],\n    linewidths = 2,\n    labels = ['A', 'B']\n).read().draw().show().close()\n```\n\n- Most used plot properties are exposed directly on the `Plot` object.\n- `files`, `twinx`, and `labels` can be specified on `Plot` or in the `read()` method\n- `read()` loads the data from the given files into `.xs` and `.ys`, which can be accessed and manipulated as wished.\n- `setup()` creates a `.fig` and `.ax` if not already done\n- `draw()` plots the lines etc. to the figure\n- `save('file.pdf')` will write to `file.pdf`\n- `show()` will display the plotted image\n\n## Bar plots\n\n```\nfrom tabplot import BarPlot\nfiles = ['dummy.csv']\nBarPlot(bar_width = 0.5).read(files).draw().save('dummy.pdf').close()\n```\n\n- `BarPlot` is derived from `Plot`\n\n# Notes/Issues\n- Operator chaining is possible as seen above. \n- Currently only uses one subplot\n- Make sure to close the current plot with `.close()`. Unless garbage collected, plots may linger and calling `.show()` for some other object may also display a previous unclosed figure.\n- hlines/vlines must be called after all plots/fit_lines etc are done so that no further changes to xlims, ylims are effected later.\n- legends don't include hlines\n- preload-style can affect legend style even if not explicitly specified because we use setrc() in _update_params. So the default value overrides anything given in the style. While this is to be expected, the question is if this is user-friendly or not. Maybe a n otice is sufficient, that --preload-style can have this behavior.\n    - [TASK] perhaps I can separate out the setrc_defaults() and call it at another time? Or only call it if the user has specified changes to the default values\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabplot",
    "package_url": "https://pypi.org/project/tabplot/",
    "platform": null,
    "project_url": "https://pypi.org/project/tabplot/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tabplot/0.2/",
    "requires_dist": [
      "matplotlib (==3.6.2)",
      "numexpr (==2.8.4)",
      "numpy (==1.24.1)",
      "rich (==13.0.0)",
      "scikit-learn (==1.2.0)",
      "scipy (==1.9.3)"
    ],
    "requires_python": ">=3.9",
    "summary": "Tabplot: A wrapper over matplotlib for reading tabular (csv) text files.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16567234,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd3732353d429bf3550bacb2b5303b399a8c548a0d1128fe25469dab457007a7",
          "md5": "2d2ba302645fb6a7448d0b7f9d2f067a",
          "sha256": "242c4c2f4f3c03ea8cb79c6b07ee797e8ab7d0d07e0c224f5b7ada0f6c7660b5"
        },
        "downloads": -1,
        "filename": "tabplot-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d2ba302645fb6a7448d0b7f9d2f067a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 15380,
        "upload_time": "2023-01-25T21:24:41",
        "upload_time_iso_8601": "2023-01-25T21:24:41.374310Z",
        "url": "https://files.pythonhosted.org/packages/dd/37/32353d429bf3550bacb2b5303b399a8c548a0d1128fe25469dab457007a7/tabplot-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd3732353d429bf3550bacb2b5303b399a8c548a0d1128fe25469dab457007a7",
        "md5": "2d2ba302645fb6a7448d0b7f9d2f067a",
        "sha256": "242c4c2f4f3c03ea8cb79c6b07ee797e8ab7d0d07e0c224f5b7ada0f6c7660b5"
      },
      "downloads": -1,
      "filename": "tabplot-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2d2ba302645fb6a7448d0b7f9d2f067a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 15380,
      "upload_time": "2023-01-25T21:24:41",
      "upload_time_iso_8601": "2023-01-25T21:24:41.374310Z",
      "url": "https://files.pythonhosted.org/packages/dd/37/32353d429bf3550bacb2b5303b399a8c548a0d1128fe25469dab457007a7/tabplot-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}