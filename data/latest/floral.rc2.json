{
  "info": {
    "author": "Cameron Ryan",
    "author_email": "cjryanwashere@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Floral\n![header](floral.png)\n\nThe best neural network library\n\n\nFloral is a neural network library, created in Jax, by Cameron Ryan. In floral, every tensor and operation is a graph node, and graphs are both inferenced and optimized through the same probe tracing algorithm. The benefit of floral is that it's simple and efficient graph algorithm provides an easy interface with low level features. \n\n\n# installation\ninstall with pip\n```shell\npip install floral\n```\n\n\n# getting started\n\nTo use floral, you must create a graph by linking nodes together. Let's first define a neural network using the ```floral.graph.GraphModule``` class.\n\n```python\nfrom floral import nn, graph, datasets, loss, optim\n\nclass Model(graph.GraphModule):\n    def __init__(self):\n        self.input = nn.Input()\n        self.linear1 = nn.Linear(self.input,[64, 784])\n        self.relu1 = nn.ReLU(self.linear1.link)\n        self.linear2 = nn.Linear(self.relu1, [64, 64])\n        self.relu2 = nn.ReLU(self.linear2.link)\n        self.linear3 = nn.Linear(self.relu2, [10,64])\n\n        self.crossentropy = loss.CategoricalCrossEntropy(self.linear3.link)\n        \nmodel = Model()\n```\n\nWhen constructing a graph in floral, there exists ```floral.graph.GraphNode``` objects, and ```floral.graph.GraphModule``` objects. All of a graph's functionality comes from the ```floral.graph.GraphNode``` objects, which either store data, or perform functions, and are linked to parent nodes. The ```floral.graph.GraphModule``` objects simply contain node objects, and exist only for abstraction. All ```floral.graph.GraphModule``` objects must have a ```link``` attribute, which is a reference to the last node in their graph. \n\nlets load the MNIST dataset to train our nerual network on.\n```python\nmnist = datasets.MNIST()\n```\n\nWhen we want to inference our graph, we attach the variable tensors to their respective nodes, in this case the model's input node, and loss node, and use the ```floral.graph.forward_trace(node)``` method to get the node's output, which is the model's loss in this case.\n\n ```python\n def inference(input_link, loss_link, x, y):\n    input_link.attach(x)\n    loss_link.attach(y)\n    out = graph.forward_trace(loss_link)\n    graph.clear_cache(loss_link)\n    return out\n ```\n \n lets grab a sample image, and label, and inference it on the graph\n\n```python\nsample_image, sample_label = mnist[0]\nprint(inference(model.input, model.crossentropy, sample_image, sample_label))\n```\n \nAfter inferencing a graph, we can use the ```floral.graph.gradient_trace(node)``` method to calculate gradients for each tensor in the graph, and then optimize them with a ```floral.graph.OptimizationProbe``` object. It is also very important to clear the graph's cache before it is traced again, through the ```floral.graph.clear_cache(node)``` method\n \n ```python\n def optimize(optim_probe, input_link, loss_link, x, y):\n    input_link.attach(x)\n    loss_link.attach(y)\n\n    loss = graph.forward_trace(loss_link)\n    graph.gradient_trace(loss_link)\n    optim_probe.trace(loss_link)\n\n    graph.clear_cache(loss_link)\n    return loss\n```\n\nTo make an optimization probe, we need a ```floral.optim.Optimizer``` object. For this, we will use ```floral.optim.StochasticGradientDescent```.\n\n```python\noptim_probe = graph.OptimizationProbe(optim.StochasticGradientDescent(lr=0.01))\n```\n\nNow lets optimize the loss on our sample image, and sample label.\n\n```python\noptimize(optim_probe, model.input, model.crossentropy, sample_image, sample_label)\nprint(inference(model.input, model.crossentropy, sample_image, sample_label))\n```\n\nLets also make an evaluation function.\n\n```python\ndef evaluate(test_set, input_link, loss_link):\n    image_set, label_set = test_set\n    total_loss = 0\n    for i in range(len(image_set)):\n        image, label = image_set[i], label_set[i]\n        total_loss += inference(input_link, loss_link, image, label)\n    return total_loss / len(image_set)\n    \ntest_images, test_labels = mnist[:2000]\nprint(\"starting loss: \",evaluate((test_images, test_labels), model.input, model.crossentropy))\n```\n\nNow, we can train our model for one epoch. For the purposes of this tutorial, this should allow you to achieve a reasonable accuracy for your model.\n\n```python\ntrain_images, train_labels = mnist[2000:10000]\nfor i in range(len(train_images)):\n    image, label = train_images[i], train_labels[i]\n    optimize(optim_probe, model.input, model.crossentropy, image, label)\n    if i%100 == 0:\n        loss = evaluate((test_images, test_labels), model.input, model.crossentropy)\n        print(\"step {}, loss: {}\".format(i, loss))\nprint(\"final loss: {}\".format(evaluate((test_images, test_labels), model.input, model.crossentropy)))\n```\n# contact\nIf you have any questions, comments, concerns, or wish to collaborate, please email [Cameron Ryan](mailto:cjryanwashere@gmail.com).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cryanwashere/Floral",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "floral",
    "package_url": "https://pypi.org/project/floral/",
    "platform": null,
    "project_url": "https://pypi.org/project/floral/",
    "project_urls": {
      "Homepage": "https://github.com/cryanwashere/Floral",
      "repository": "https://github.com/cryanwashere/Floral"
    },
    "release_url": "https://pypi.org/project/floral/1.0.3/",
    "requires_dist": [
      "jax",
      "jaxlib",
      "numpy",
      "Pillow"
    ],
    "requires_python": ">=3.6",
    "summary": "the best neural network library",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16565538,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "553ec6c01488047c71405a2a333b3289fcc2fec24bdd5febe761311f3c6a3ca5",
          "md5": "983bf1e15b214f2d998e4b7bbb6025bf",
          "sha256": "5036e21930e29d373a8f582e8e813e3ee4ee82d1151ee4352b346b0fc535d93e"
        },
        "downloads": -1,
        "filename": "floral-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "983bf1e15b214f2d998e4b7bbb6025bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6538,
        "upload_time": "2023-01-24T17:30:29",
        "upload_time_iso_8601": "2023-01-24T17:30:29.202907Z",
        "url": "https://files.pythonhosted.org/packages/55/3e/c6c01488047c71405a2a333b3289fcc2fec24bdd5febe761311f3c6a3ca5/floral-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51eab8fa930c2ec5d9841f9988fc970a32dea20743d1593d86517ced70e5d651",
          "md5": "e23385a92521fdadf2bbde2b047b4f48",
          "sha256": "dda8c28da4e2ad92f979c42e6d0f5779daada985ea66f555ee60e076862b1fd9"
        },
        "downloads": -1,
        "filename": "floral-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e23385a92521fdadf2bbde2b047b4f48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5571,
        "upload_time": "2023-01-24T17:30:30",
        "upload_time_iso_8601": "2023-01-24T17:30:30.812826Z",
        "url": "https://files.pythonhosted.org/packages/51/ea/b8fa930c2ec5d9841f9988fc970a32dea20743d1593d86517ced70e5d651/floral-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee69ee7b442722510725903f483fd5ed2fd99e3e628e7bf3ed093a74a1b991e9",
          "md5": "93d547190aef3696ddf33bbcf3be3ca8",
          "sha256": "79f467770a5278f3c3397b5d36f90ec0f0b2ab041b245bf172130b9f083fee28"
        },
        "downloads": -1,
        "filename": "floral-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93d547190aef3696ddf33bbcf3be3ca8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10751263,
        "upload_time": "2023-01-25T18:37:14",
        "upload_time_iso_8601": "2023-01-25T18:37:14.618378Z",
        "url": "https://files.pythonhosted.org/packages/ee/69/ee7b442722510725903f483fd5ed2fd99e3e628e7bf3ed093a74a1b991e9/floral-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd480920f5b21624c5245def89348fc7c2701c11d31d8e41323a6169c02d6107",
          "md5": "49d3121d1ec61154e2bd109977f901c3",
          "sha256": "9b9dab20c7ca773e5ededc1f71073fb623234d32465164d2dfeae580d2902b68"
        },
        "downloads": -1,
        "filename": "floral-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49d3121d1ec61154e2bd109977f901c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10746869,
        "upload_time": "2023-01-25T18:37:23",
        "upload_time_iso_8601": "2023-01-25T18:37:23.915388Z",
        "url": "https://files.pythonhosted.org/packages/fd/48/0920f5b21624c5245def89348fc7c2701c11d31d8e41323a6169c02d6107/floral-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee69ee7b442722510725903f483fd5ed2fd99e3e628e7bf3ed093a74a1b991e9",
        "md5": "93d547190aef3696ddf33bbcf3be3ca8",
        "sha256": "79f467770a5278f3c3397b5d36f90ec0f0b2ab041b245bf172130b9f083fee28"
      },
      "downloads": -1,
      "filename": "floral-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93d547190aef3696ddf33bbcf3be3ca8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10751263,
      "upload_time": "2023-01-25T18:37:14",
      "upload_time_iso_8601": "2023-01-25T18:37:14.618378Z",
      "url": "https://files.pythonhosted.org/packages/ee/69/ee7b442722510725903f483fd5ed2fd99e3e628e7bf3ed093a74a1b991e9/floral-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd480920f5b21624c5245def89348fc7c2701c11d31d8e41323a6169c02d6107",
        "md5": "49d3121d1ec61154e2bd109977f901c3",
        "sha256": "9b9dab20c7ca773e5ededc1f71073fb623234d32465164d2dfeae580d2902b68"
      },
      "downloads": -1,
      "filename": "floral-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "49d3121d1ec61154e2bd109977f901c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10746869,
      "upload_time": "2023-01-25T18:37:23",
      "upload_time_iso_8601": "2023-01-25T18:37:23.915388Z",
      "url": "https://files.pythonhosted.org/packages/fd/48/0920f5b21624c5245def89348fc7c2701c11d31d8e41323a6169c02d6107/floral-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}