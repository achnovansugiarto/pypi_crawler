{
  "info": {
    "author": "Collin Leiber",
    "author_email": "leiber@dbs.ifi.lmu.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Logo](logo.PNG)\n\n---\n![PyPI Latest Release](https://img.shields.io/pypi/collinleiber/clustpy)\n[![TestMain](https://github.com/collinleiber/clustpy/actions/workflows/test-main.yml/badge.svg)](https://github.com/collinleiber/ClustPy/actions/workflows/test-main.yml)\n[![codecov](https://codecov.io/gh/collinleiber/ClustPy/branch/main/graph/badge.svg?token=5AJYQFIYFR)](https://codecov.io/gh/collinleiber/ClustPy)\n\nThe package provides a simple way to cluster data in Python.\nFor this purpose it provides a variety of algorithms from different domains. \nAdditionally, ClustPy includes methods that are often needed for research purposes, such as plots, clustering metrics or evaluation methods.\nFurther, it integrates various frequently used datasets (e.g. from the [UCI repository](https://archive.ics.uci.edu/ml/index.php)) through largely automated loading options. \n\nThe focus of the ClustPy package is not on efficiency (here we recommend e.g. [pyclustering](https://pyclustering.github.io/)), \nbut on the possibility to try out a wide range of modern scientific methods.\nIn particular, this should also make lesser-known methods accessible in a simple and convenient way.\n\nSince it largely follows the implementation conventions of [sklearn clustering](https://scikit-learn.org/stable/modules/clustering.html), \nit can be combined with many other packages (see below).\n\n## Installation\n\n### For Users\n\n#### Stable Version\n\nStay tuned for the 'pip' release\n\n#### Development Version\n\nThe current development version can be installed directly from git by executing:\n\n`sudo pip3 install git+https://github.com/collinleiber/ClustPy.git`\n\nAlternatively, clone the repository, go to the directory and execute:\n\n`sudo python setup.py install`\n\nIf you have no sudo rights you can use:\n\n`python setup.py install --prefix ~/.local`\n\n### For Developers\n\nClone the repository, go to the directory and do the following.\n\nInstall package locally and compile C files:\n\n`python setup.py install --prefix ~/.local`\n\nCopy compiled C files to correct file location:\n\n`python setup.py build_ext --inplace`\n\nRemove clustpy via pip to avoid ambiguities during development, e.g., when changing files in the code:\n\n`pip3 uninstall clustpy`\n\n## Components\n\n### Algorithms\n\n- Partition-based clustering\n    - [DipExt + DipInit](https://link.springer.com/chapter/10.1007/978-3-030-67658-2_6)\n    - [Dip-Means](https://proceedings.neurips.cc/paper/2012/hash/a8240cb8235e9c493a0c30607586166c-Abstract.html)\n    - Dip'n'sub\n    - [GapStatistic](https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00293)\n    - [G-Means](https://proceedings.neurips.cc/paper/2003/hash/234833147b97bb6aed53a8f4f1c7a7d8-Abstract.html)\n    - [LDA-K-Means](https://dl.acm.org/doi/abs/10.1145/1273496.1273562)\n    - [PG-Means](https://proceedings.neurips.cc/paper/2006/hash/a9986cb066812f440bc2bb6e3c13696c-Abstract.html)\n    - [Projected Dip-Means](https://dl.acm.org/doi/abs/10.1145/3200947.3201008)\n    - [SkinnyDip + UniDip](https://dl.acm.org/doi/abs/10.1145/2939672.2939740) & TailoredDip\n    - [SubKmeans](https://dl.acm.org/doi/abs/10.1145/3097983.3097989)\n    - [X-Means](https://web.cs.dal.ca/~shepherd/courses/csci6403/clustering/xmeans.pdf)\n- Density-based clustering\n    - [Multi Density DBSCAN](https://link.springer.com/chapter/10.1007/978-3-642-23878-9_53)\n- Hierarchical clustering\n    - [Diana](https://www.jstor.org/stable/2290430?origin=crossref)\n- Alternative clustering / Non-redundant clustering\n    - [AutoNR](https://epubs.siam.org/doi/abs/10.1137/1.9781611977172.26)\n    - [NR-Kmeans](https://dl.acm.org/doi/abs/10.1145/3219819.3219945)\n- Deep clustering\n    - Autoencoder\n        - [Flexible Autoencoder](https://www.aaai.org/Library/AAAI/1987/aaai87-050.php)\n        - [Neighbor Encoder](https://arxiv.org/abs/1811.01557)\n        - [Stacked Autoencoder](https://www.jmlr.org/papers/volume11/vincent10a/vincent10a.pdf?ref=https://githubhelp.com)\n        - [Variational Autoencoder](https://arxiv.org/abs/1312.6114)\n    - [DCN](https://dl.acm.org/doi/abs/10.5555/3305890.3306080)\n    - [DEC](https://dl.acm.org/doi/abs/10.5555/3045390.3045442)\n    - [DipDECK](https://dl.acm.org/doi/10.1145/3447548.3467316)\n    - [DipEncoder](https://dl.acm.org/doi/10.1145/3534678.3539407)\n    - [ENRC](https://ojs.aaai.org/index.php/AAAI/article/view/5961)\n    - [IDEC](https://dl.acm.org/doi/abs/10.5555/3172077.3172131)\n    - [VaDE](https://dl.acm.org/doi/abs/10.5555/3172077.3172161)\n    \n### Other implementations\n\n- Metrics\n    - Confusion Matrix\n    - [Pair Counting Scores (f1, rand, jaccard, recall, precision)](https://link.springer.com/article/10.1007/s10115-008-0150-6)\n    - [Unsupervised Clustering Accuracy](https://ieeexplore.ieee.org/abstract/document/5454426)\n    - [Variation of information](https://link.springer.com/chapter/10.1007/978-3-540-45167-9_14)\n    - Scores for multiple labelings (see alternative clustering algorithms)\n        - Multiple Labelings Confusion Matrix\n        - [Multiple Labelings Pair Counting Scores](https://ieeexplore.ieee.org/abstract/document/6228189)\n- Utils\n    - Automatic evaluation methods\n    - [Hartigans Dip-test](https://www.jstor.org/stable/2241144)\n    - Various plots\n- Datasets\n    - Synthetic dataset creator for subspace and alternative clustering \n    - Various real-world datasets (e.g. Iris, Wine, Mice protein, Optdigits, MNIST, ...)\n    \n## Compatible packages\n\nWe stick as close as possible to the implementation details of sklean clustering. Therefore, our methods are compatible with many other packages. Examples are:\n\n- [sklearn clustering](https://scikit-learn.org/stable/modules/clustering.html) \n    - K-Means\n    - Affinity propagation\n    - Mean-shift\n    - Spectral clustering\n    - Ward hierarchical clustering\n    - Agglomerative clustering\n    - DBSCAN\n    - OPTICS\n    - Gaussian mixtures\n\t- BIRCH\n- [kmodes](https://github.com/nicodv/kmodes)\n    - k-modes\n    - k-prototypes \n- [HDBSCAN](https://hdbscan.readthedocs.io/en/latest/how_hdbscan_works.html)\n    - HDBSCAN\n- [scikit-learn-extra](https://scikit-learn-extra.readthedocs.io/en/latest/index.html)\n    - k-medoids\n    - Density-Based common-nearest-neighbors clustering\n- [Density Peak Clustering](https://github.com/colinwke/dpca)\n    - DPC\n\n## Coding Examples\n\n### 1)\n\nIn this first example, the subspace algorithm SubKmeans is run on a synthetic subspace dataset.\nAfterwards, the clustering accuracy is calculated to evaluate the result.\n\n```python\nfrom clustpy.partition import SubKmeans\nfrom clustpy.data import create_subspace_data\nfrom clustpy.metrics import unsupervised_clustering_accuracy as acc\n\ndata, labels = create_subspace_data(1000, n_clusters=4, subspace_features=[2,5])\nsk = SubKmeans(4)\nsk.fit(data)\nacc_res = acc(labels, sk.labels_)\nprint(\"Clustering accuracy:\", acc_res)\n```\n\n### 2)\n\nThe second example covers the topic of non-redundant/alternative clustering.\nHere, the NrKmeans algorithm is run on the CMUfaces dataset.\nBeware that NrKmeans as a non-redundant clustering algorithm returns multiple labelings.\nTherefore, we calculate the confusion matrix by comparing each combination of labels using the normalized mutual information (nmi).\nThe confusion matrix will be printed and finally the best matching nmi will be stated for each set of labels.\n\n```python\nfrom clustpy.alternative import NrKmeans\nfrom clustpy.data import load_cmu_faces\nfrom clustpy.metrics import MultipleLabelingsConfusionMatrix\nfrom sklearn.metrics import normalized_mutual_info_score as nmi\nimport numpy as np\n\ndata, labels = load_cmu_faces()\nnk = NrKmeans([20, 4, 4, 2])\nnk.fit(data)\nmlcm = MultipleLabelingsConfusionMatrix(labels, nk.labels_, nmi)\nmlcm.rearrange()\nprint(mlcm.confusion_matrix)\nprint(np.max(mlcm.confusion_matrix, axis=1))\n```\n\n### 3)\n\nOne mentionable feature of the ClustPy package is the ability to run various modern deep clustering algorithms out of the box. \nFor example, the following code runs the DEC algorithm on the Optdigits dataset. \nTo evaluate the result, we compute the adjusted RAND index (ari).\n\n```python\nfrom clustpy.deep import DEC\nfrom clustpy.data import load_optdigits\nfrom sklearn.metrics import adjusted_rand_score as ari\n\ndata, labels = load_optdigits()\ndec = DEC(10)\ndec.fit(data)\nmy_ari = ari(labels, dec.labels_)\nprint(my_ari)\n```\n\n### 4)\n\nIn this more complex example, we use ClustPy's evaluation functions, \nwhich automatically run the specified algorithms multiple times on previously defined datasets.\nAll results of the given metrics are stored in a Pandas dataframe.\n\n```python\nfrom clustpy.utils import EvaluationDataset, EvaluationAlgorithm, EvaluationMetric, evaluate_multiple_datasets\nfrom clustpy.partition import ProjectedDipMeans, SubKmeans\nfrom sklearn.metrics import normalized_mutual_info_score as nmi, silhouette_score\nfrom sklearn.cluster import KMeans, DBSCAN\nfrom clustpy.data import load_breast_cancer, load_iris, load_wine\nfrom clustpy.metrics import unsupervised_clustering_accuracy as acc\nfrom sklearn.decomposition import PCA\nimport numpy as np\n\ndef reduce_dimensionality(X, dims):\n    pca = PCA(dims)\n    X_new = pca.fit_transform(X)\n    return X_new\n\ndef znorm(X):\n    return (X - np.mean(X)) / np.std(X)\n\ndef minmax(X):\n    return (X - np.min(X)) / (np.max(X) - np.min(X))\n\ndatasets = [\n    EvaluationDataset(\"Breast_pca_znorm\", data=load_breast_cancer, preprocess_methods=[reduce_dimensionality, znorm],\n                      preprocess_params=[{\"dims\": 0.9}, {}], ignore_algorithms=[\"pdipmeans\"]),\n    EvaluationDataset(\"Iris_pca\", data=load_iris, preprocess_methods=reduce_dimensionality,\n                      preprocess_params={\"dims\": 0.9}),\n    EvaluationDataset(\"Wine\", data=load_wine),\n    EvaluationDataset(\"Wine_znorm\", data=load_wine, preprocess_methods=znorm)]\n\nalgorithms = [\n    EvaluationAlgorithm(\"SubKmeans\", SubKmeans, {\"n_clusters\": None}),\n    EvaluationAlgorithm(\"pdipmeans\", ProjectedDipMeans, {}),  # Determines n_clusters automatically\n    EvaluationAlgorithm(\"dbscan\", DBSCAN, {\"eps\": 0.01, \"min_samples\": 5}, preprocess_methods=minmax,\n                        deterministic=True),\n    EvaluationAlgorithm(\"kmeans\", KMeans, {\"n_clusters\": None}),\n    EvaluationAlgorithm(\"kmeans_minmax\", KMeans, {\"n_clusters\": None}, preprocess_methods=minmax)]\n\nmetrics = [EvaluationMetric(\"NMI\", nmi), EvaluationMetric(\"ACC\", acc),\n           EvaluationMetric(\"Silhouette\", silhouette_score, use_gt=False)]\n\ndf = evaluate_multiple_datasets(datasets, algorithms, metrics, n_repetitions=5,\n                                aggregation_functions=[np.mean, np.std, np.max, np.min],\n                                add_runtime=True, add_n_clusters=True, save_path=None,\n                                save_intermediate_results=False)\nprint(df)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/collinleiber/ClustPy",
    "keywords": "",
    "license": "BSD-3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clustpy",
    "package_url": "https://pypi.org/project/clustpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/clustpy/",
    "project_urls": {
      "Homepage": "https://github.com/collinleiber/ClustPy"
    },
    "release_url": "https://pypi.org/project/clustpy/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Clustering in python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17318320,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eede97dd523bba27de253a63e52668c40021641795cb56dd417fdee3b56c0662",
          "md5": "1402982b7f1703cda508021413d60a4f",
          "sha256": "fa3bfa774b55f37454928ecab36c1eba6e186c5735e84d7f539e0d7b851cb6a0"
        },
        "downloads": -1,
        "filename": "clustpy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1402982b7f1703cda508021413d60a4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2293032,
        "upload_time": "2023-02-28T17:05:53",
        "upload_time_iso_8601": "2023-02-28T17:05:53.292893Z",
        "url": "https://files.pythonhosted.org/packages/ee/de/97dd523bba27de253a63e52668c40021641795cb56dd417fdee3b56c0662/clustpy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21d4538a4e868bdb529c7885c5f7abb7f0382a58c909573fa624a69bc7f56948",
          "md5": "96175cd8d8aa8a6d7ea9602a97ac0536",
          "sha256": "961295ecebfd937a06848f86780ddb2153617655e4ca371fa188986d1b7e1b07"
        },
        "downloads": -1,
        "filename": "clustpy-0.0.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "96175cd8d8aa8a6d7ea9602a97ac0536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2296262,
        "upload_time": "2023-03-16T12:18:45",
        "upload_time_iso_8601": "2023-03-16T12:18:45.023049Z",
        "url": "https://files.pythonhosted.org/packages/21/d4/538a4e868bdb529c7885c5f7abb7f0382a58c909573fa624a69bc7f56948/clustpy-0.0.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eede97dd523bba27de253a63e52668c40021641795cb56dd417fdee3b56c0662",
        "md5": "1402982b7f1703cda508021413d60a4f",
        "sha256": "fa3bfa774b55f37454928ecab36c1eba6e186c5735e84d7f539e0d7b851cb6a0"
      },
      "downloads": -1,
      "filename": "clustpy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1402982b7f1703cda508021413d60a4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2293032,
      "upload_time": "2023-02-28T17:05:53",
      "upload_time_iso_8601": "2023-02-28T17:05:53.292893Z",
      "url": "https://files.pythonhosted.org/packages/ee/de/97dd523bba27de253a63e52668c40021641795cb56dd417fdee3b56c0662/clustpy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}