{
  "info": {
    "author": "Amir Pourjafari",
    "author_email": "amir.pourjafari@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django-SARequest\nSimple, compact and useful library to read request parameters in django framework. \n\n## Install\nThere are 2 methods to install this:\n\n1- Install with pip (Recommended and the easiest way)\n```\npip install sa_request\n```\n\n2- Install from source code:\n```\ngit clone https://github.com/sauditore/SARequest.git\npython setup.py install\n```\n\n## Usage:\nTo use this library just create a class and inherit from sa_request main class\n\n```python\nfrom sa_request.helper import SARequest\nfrom sa_request.exceptions import ParamNotFoundError, AuthNeedError\n\n\nclass ViewName(SARequest):\n    \n    def get(self, request):\n        # Get int_name from query string\n        user_int = self.get_int(\"int_name\", False, 100)\n        \n        # Get str_name from query string. If data was not found then \"default_data\" will return\n        user_str = self.get_string(\"str_name\", False, \"default_data\")\n        \n        # Get float_name from query string. If data was not found then 1.1 will return\n        user_float = self.get_float(\"float_name\", False, 1.1)\n        \n        try:\n            # If raise_error is set True, then default value ignored\n            # and and exception will raise.\n            str_data = self.get_string(\"parameter_name\", True)\n            \n            # Checks for user permission. If permission not granted then\n            # AuthError will raise\n            self.validate_request(perm=\"user.add_user\")\n        except ParamNotFoundError as e:\n            # A response will return to user\n            return e.get_response()\n        except AuthNeedError as e:\n            # redirect user to auth_login view\n            return e.get_response()\n        # and other logics\n```\n\n### Basic Structure:\nMost of the methods have a similar signature:\n\nmethod(name, raise_error, default)\n\n<ul>\n<li>\nname: Name of the parameter to read from query string or post data\n</li>\n<li>\nraise_error: If data is not provided, then raise ParamNotFoundError error.\n</li>\n<li>default: If raise_error is set to False, then this value will return as result. </li>\n</ul>\n\n### Methods:\n\n### get_int:\nGet \"name\" as int from request:\n```python\ndef get_int(name: str, \n            raise_error: bool = False,\n            default: int = 0,\n            min_value: int = None,\n            max_value: int = None\n            ) -> int:\n\n```\n<hr/>\n\n### get_string:\nGet \"name\" from request as str with min / max length validation\n```python\ndef get_string(name: str,\n               raise_error: bool = False,\n               default: str = '',\n               min_len: int = 0,\n               max_len: int = 0) -> str:\n```\n<hr/>\n\n### paginate:\nPaginate query set or list and returns it to use in a template. Queryset or data key name in a dictionary is\nthe same ``data_name`` provided. Per Page parameter is read from ``pp`` querystring. Current Page is also\nread from ``cp`` querystring.\nResult contains these keys:\n\n1- ``data_name``: Contains paginated data\n\n2- ``next``: Next number to pass to ``cp`` parameter to view next page.\n\n3- ``back``: Back number to pass to ``cp`` parameter in querystring to view previous page\n\n4- ``current_page``: Current page number\n\n5- ``pages``: Total number of pages\n\n6- ``last_page``: Number of last page to pass to ``cp`` parameter to view\n\n7- ``request``: request object to build URL\n\n8- ``is_last_page``: True if reached last page\n\n9- ``is_first_page``: True if cp is on the first page\n\n10- ``total_result``: Number of records to view\n\n11- ``next_pages``: List of pages to view for the next pages. Each item must pass to cp param to view the page.\n\n12- ``back_pages``: List of pages to view for previous pages. Each item must pass to cp param to view the pate.\n\n\n```python\ndef paginate(query_set: Union[List, QuerySet],\n             data_name: str,\n             extra: Dict = None,\n             default_per_page: int = 10)\n```\n<hr/>\n\n#### get_decrypted_list:\nProcess request and find objects by name, decrypt and return in a list\n```python\ndef get_decrypted_list(name: str,\n                       raise_error: bool = False,\n                       default: List = None\n                       ) -> List\n```\n<hr/>\n\n#### get_int_list:\nProcess the request and get a list of int\n```python\ndef get_int_list(name: str, \n                 raise_error: bool = False, \n                 default: List = ()\n                 ) -> List\n```\n<hr/>\n\n#### get_file_size:\nConvert user input data to file size. e.g. User enters : 1024 MB, you will receive : 1024 * 1024 bytes\n\n```python\ndef get_file_size(name: str,\n                 raise_error: bool = False, \n                 default: float = 0\n                 ) -> float\n```\n<hr/>\n\n#### get_float:\nGet \"name\" as float\n\n```python\ndef get_float(name: str,\n             raise_error: bool = False,\n             default: float = 0.0\n              ) -> float\n```\n\n<hr/>\n\n### Bugs:\nI would be happy if you help me find them.\n\n### TODO:\nAdd more useful functions \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sauditore/SARequest/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sa-request",
    "package_url": "https://pypi.org/project/django-sa-request/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sa-request/",
    "project_urls": {
      "Bug Tracker": "https://github.com/sauditore/SARequest/issues",
      "Homepage": "https://github.com/sauditore/SARequest/"
    },
    "release_url": "https://pypi.org/project/django-sa-request/0.9.1b0/",
    "requires_dist": [
      "khayyam",
      "django"
    ],
    "requires_python": ">=3.6",
    "summary": "Django Simple Processor",
    "version": "0.9.1b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12887218,
  "releases": {
    "0.9.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89e97157d25973e5c97374fab31d89f5c6da014ce1e88127ff4a8c266caa5d7b",
          "md5": "fa046ce6ad6aef3f8cbb87789ab8d7e9",
          "sha256": "73ef12f7c4622a992cad830db3b2883608e02aefb45b3275e75a161a7e35bb77"
        },
        "downloads": -1,
        "filename": "django_sa_request-0.9.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa046ce6ad6aef3f8cbb87789ab8d7e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12128,
        "upload_time": "2022-02-14T17:38:52",
        "upload_time_iso_8601": "2022-02-14T17:38:52.408561Z",
        "url": "https://files.pythonhosted.org/packages/89/e9/7157d25973e5c97374fab31d89f5c6da014ce1e88127ff4a8c266caa5d7b/django_sa_request-0.9.1b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89aa887c55b5981036711553b1f09c608e2f9f4343271972b0e907b844bd29a2",
          "md5": "74417d8a808e6be1c63a3bd3622f0afe",
          "sha256": "f998d4c1e715c959978d9d4e7e68525c5866f842f6873c00cc2aaf5d1a807f61"
        },
        "downloads": -1,
        "filename": "django-sa-request-0.9.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "74417d8a808e6be1c63a3bd3622f0afe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11252,
        "upload_time": "2022-02-14T17:38:54",
        "upload_time_iso_8601": "2022-02-14T17:38:54.836751Z",
        "url": "https://files.pythonhosted.org/packages/89/aa/887c55b5981036711553b1f09c608e2f9f4343271972b0e907b844bd29a2/django-sa-request-0.9.1b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89e97157d25973e5c97374fab31d89f5c6da014ce1e88127ff4a8c266caa5d7b",
        "md5": "fa046ce6ad6aef3f8cbb87789ab8d7e9",
        "sha256": "73ef12f7c4622a992cad830db3b2883608e02aefb45b3275e75a161a7e35bb77"
      },
      "downloads": -1,
      "filename": "django_sa_request-0.9.1b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa046ce6ad6aef3f8cbb87789ab8d7e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12128,
      "upload_time": "2022-02-14T17:38:52",
      "upload_time_iso_8601": "2022-02-14T17:38:52.408561Z",
      "url": "https://files.pythonhosted.org/packages/89/e9/7157d25973e5c97374fab31d89f5c6da014ce1e88127ff4a8c266caa5d7b/django_sa_request-0.9.1b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89aa887c55b5981036711553b1f09c608e2f9f4343271972b0e907b844bd29a2",
        "md5": "74417d8a808e6be1c63a3bd3622f0afe",
        "sha256": "f998d4c1e715c959978d9d4e7e68525c5866f842f6873c00cc2aaf5d1a807f61"
      },
      "downloads": -1,
      "filename": "django-sa-request-0.9.1b0.tar.gz",
      "has_sig": false,
      "md5_digest": "74417d8a808e6be1c63a3bd3622f0afe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11252,
      "upload_time": "2022-02-14T17:38:54",
      "upload_time_iso_8601": "2022-02-14T17:38:54.836751Z",
      "url": "https://files.pythonhosted.org/packages/89/aa/887c55b5981036711553b1f09c608e2f9f4343271972b0e907b844bd29a2/django-sa-request-0.9.1b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}