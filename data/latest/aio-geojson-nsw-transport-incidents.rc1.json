{
  "info": {
    "author": "Fred Chauland",
    "author_email": "frederic.chauland@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# python-aio-geojson-nsw-transport-incidents\n\n[![Build Status](https://travis-ci.org/Fred-Ch/python-aio-geojson-nsw-transport-incidents-master.svg)](https://travis-ci.org/Fred-Ch/python-aio-geojson-nsw-transport-incidents-master)\n[![PyPi](https://img.shields.io/pypi/v/aio-geojson-nsw-transport-incidents.svg)](https://pypi.python.org/pypi/aio-geojson-nsw-transport-incidents)\n[![Version](https://img.shields.io/pypi/pyversions/aio-geojson-nsw-transport-incidents.svg)](https://pypi.python.org/pypi/aio-geojson-nsw-transport-incidents)\n\nThis library provides convenient async access to the [NSW Transport Service Live traffic status](https://opendata.transport.nsw.gov.au/dataset/live-traffic-site-status) incidents feed. \nThe feed can be seen online on (https://www.livetraffic.com/)\n\n## Installation\n`pip install aio-geojson-nsw-transport-incidents`\n\n## Usage\nSee below for examples of how this library can be used. After instantiating a \nparticular class - feed or feed manager - and supply the required parameters, \nyou can call `update` to retrieve the feed data. The return value \nwill be a tuple of a status code and the actual data in the form of a list of \nfeed entries specific to the selected feed.\n\nStatus Codes\n* _OK_: Update went fine and data was retrieved. The library may still \n  return empty data, for example because no entries fulfilled the filter \n  criteria.\n* _OK_NO_DATA_: Update went fine but no data was retrieved, for example \n  because the server indicated that there was not update since the last request.\n* _ERROR_: Something went wrong during the update\n\n**Parameters**\n\n| Parameter          | Description                               |\n|--------------------|-------------------------------------------|\n| `home_coordinates` | Coordinates (tuple of latitude/longitude) |\n| `feature`          | Type of Hazard to retreive                |\n\nTraffic Hazards are divided into six basic types:\n* Incidents (`incident-open` `incident-closed` `incident`)\n* Fire  (`fire-open` `fire-closed` `fire`)\n* Flood (`flood-open` `flood-closed` `flood`)\n* Alpine conditions (`alpine-open` `alpine-closed` `alpine`)\n* Major Events (`majorevent-open` `majorevent-closed` `majorevent`)\n* Roadworks (`roadwork-open` `roadwork-closed` `roadwork`)\n\nHazards can be open, closed (or both can be retreived). Refer to the [Live Traffic Data Developer Guide](https://opendata.transport.nsw.gov.au/sites/default/files/Live_Traffic_Data_Developer_Guide.pdf)\n\n**Supported Filters**\n\n| Filter     |                     | Description |\n|------------|---------------------|-------------|\n| Radius     | `filter_radius`     | Radius in kilometers around the home coordinates in which events from feed are included. |\n| Categories | `filter_categories` | Array of category names. Only events with a category matching any of these is included. |\n\n**Example**\n```python\nimport asyncio\nfrom aiohttp import ClientSession\nfrom aio_geojson_nsw_transport_incidents import NswTransportServiceIncidentsFeed\nasync def main() -> None:\n    async with ClientSession() as websession:    \n        # Home Coordinates: Latitude: -33.0, Longitude: 150.0\n        # Filter radius: 50 km\n        # Filter categories: 'Scheduled roadwork'\n        # Hazard type : 'roadworks-open'\n        feed = NswTransportServiceIncidentsFeed(websession, \n                                                (-33.0, 150.0), \n                                                filter_radius=50, \n                                                filter_categories=['Scheduled roadwork'],\n                                                hazard=\"roadwork-open\")\n        status, entries = await feed.update()\n        print(status)\n        print(entries)\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n## Feed entry properties\nEach feed entry is populated with the following properties:\n\n| Name               | Description                                                                                         | Feed attribute |\n|--------------------|-----------------------------------------------------------------------------------------------------|----------------|\n| geometry           | All geometry details of this entry.                                                                 | `geometry`     |\n| coordinates        | Best coordinates (latitude, longitude) of this entry.                                               | `geometry`     |\n| external_id        | The unique public identifier for this incident.                                                     | `guid`         |\n| title              | Title of this entry.                                                                                | `title`        |\n| attribution        | Attribution of the feed.                                                                            | n/a            |\n| distance_to_home   | Distance in km of this entry to the home coordinates.                                               | n/a            |\n| category           | The broad hazard category description assigned to the hazard by TMC Communications. Used internally by TMCCommunications for reporting hazard statistics.Please note the values used by this property are subject to change and should not be relied upon.                                 | `mainCategory`     |\n| publication_date   | The publication date of the incidents.                                                              | `created`      |\n| description        | The description of the incident.                                                                    | `headline`  |\n| council_area       | Council are this incident falls into.                                                               | `roads` -> `suburb`        |\n| road               | Council are this incident falls into.                                                               | `roads` -> `mainStreet`        |\n| type               | Type of the incident (e.g. Bush Fire, Grass Fire, Hazard Reduction).                                | `type`         |\n| publicTransport    | The publication date of this entry                                                                  | `publicTransport`        |\n| adviceA            | The first advice of this entry. The first standard piece of advice to motorists. At the present time | `adviceA`       |\n| adviceB            | Turn the second advice of this entry                                                                | `adviceB`        |\n| adviceOther        | The other advice of this entry                                                                      | `adviceOther`        |\n| isMajor            | True is the incident is major for this entry                                                        | `isMajor`        |\n| isEnded            | True if the hazard has ended, otherwise false. Once ended, the hazard’s record in our internal tracking system is closed and further modification becomes impossible unless the record is later re-opened. This  property is a counterpart to the createdproperty. When true, the  lastUpdatedproperty of the hazard will be the date/time when  the hazard’s record  in the tracking system was closed.                                                                    | `isEnded`        |\n| isNew              | True if the incident is new for this entry.                                                         | `isNew`        |\n| isImpactNetwork    | True if the hazard is currently having some impact on traffic on the road network.                  | `isImpactNetwork`        |\n| diversions         | The Summary of any traffic diversions in place. The text may contain HTML markup..                  | `diversions`        |\n| subCategory        | The sub-category of incident of this entry.                                                         | `subCategory`        |\n| duration           | The Planned duration of the hazard. This property is rarely used.                                   | `duration`        |\n\n\n## Feed Manager\n\nThe Feed Manager helps managing feed updates over time, by notifying the \nconsumer of the feed about new feed entries, updates and removed entries \ncompared to the last feed update.\n\n* If the current feed update is the first one, then all feed entries will be \n  reported as new. The feed manager will keep track of all feed entries' \n  external IDs that it has successfully processed.\n* If the current feed update is not the first one, then the feed manager will \n  produce three sets:\n  * Feed entries that were not in the previous feed update but are in the \n    current feed update will be reported as new.\n  * Feed entries that were in the previous feed update and are still in the \n    current feed update will be reported as to be updated.\n  * Feed entries that were in the previous feed update but are not in the \n    current feed update will be reported to be removed.\n* If the current update fails, then all feed entries processed in the previous\n  feed update will be reported to be removed.\n\nAfter a successful update from the feed, the feed manager provides two\ndifferent dates:\n\n* `last_update` will be the timestamp of the last update from the feed \n  irrespective of whether it was successful or not.\n* `last_update_successful` will be the timestamp of the last successful update \n  from the feed. This date may be useful if the consumer of this library wants \n  to treat intermittent errors from feed updates differently.\n* `last_timestamp` (optional, depends on the feed data) will be the latest \n  timestamp extracted from the feed data. \n  This requires that the underlying feed data actually contains a suitable \n  date. This date may be useful if the consumer of this library wants to \n  process feed entries differently if they haven't actually been updated.\n\n\n## Attribution and motivation\nThis is a fork of [exxamalte/python-aio-geojson-nsw-rfs-incidents](https://github.com/exxamalte/python-aio-geojson-nsw-rfs-incidents). \nIt deferes mainly as the geoJSON feeds generated by NSW Transport using QGis.  QGis generates files that don't match exactly geojson format (geometry types : `POINT` instead of `Point`)\n\nThis library has been created for [Home Assistant component](https://github.com/Fred-Ch/core/tree/dev/homeassistant/components/nsw_transport_incident_service_feed).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fred-Ch/python-aio-geojson-nsw-transport-incidents-master",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aio-geojson-nsw-transport-incidents",
    "package_url": "https://pypi.org/project/aio-geojson-nsw-transport-incidents/",
    "platform": "",
    "project_url": "https://pypi.org/project/aio-geojson-nsw-transport-incidents/",
    "project_urls": {
      "Homepage": "https://github.com/Fred-Ch/python-aio-geojson-nsw-transport-incidents-master"
    },
    "release_url": "https://pypi.org/project/aio-geojson-nsw-transport-incidents/0.1/",
    "requires_dist": [
      "aio-geojson-client (>=0.13)",
      "aiohttp (>=3.5.4)",
      "pytz (>=2019.01)"
    ],
    "requires_python": "",
    "summary": "An async GeoJSON client library for NSW Transport Service Incidents.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6864096,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e33df9eb3bc78f9de9cb29bfe088f5cb7a909b9b902e93e33da2f491fe2ae484",
          "md5": "9c85a91ecd6a685d5c184f996219c364",
          "sha256": "b2402eaa2b8c56c0daca33047fe021468d1152bc9faf5bf36abc4d4bab1ca756"
        },
        "downloads": -1,
        "filename": "aio_geojson_nsw_transport_incidents-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c85a91ecd6a685d5c184f996219c364",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14876,
        "upload_time": "2020-03-23T08:36:40",
        "upload_time_iso_8601": "2020-03-23T08:36:40.643662Z",
        "url": "https://files.pythonhosted.org/packages/e3/3d/f9eb3bc78f9de9cb29bfe088f5cb7a909b9b902e93e33da2f491fe2ae484/aio_geojson_nsw_transport_incidents-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a27a4af4bd9bd05b3b9d722c7457f39f40cf1355808d17462255b71efa85c4a3",
          "md5": "fc58790441b959eb0131f3724df9d310",
          "sha256": "8a87acb5dbb97179ae9dc6cb3f07d669111f1ad528b28154bde569ecb4c6c405"
        },
        "downloads": -1,
        "filename": "aio_geojson_nsw_transport_incidents-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc58790441b959eb0131f3724df9d310",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11420,
        "upload_time": "2020-03-23T08:36:42",
        "upload_time_iso_8601": "2020-03-23T08:36:42.952503Z",
        "url": "https://files.pythonhosted.org/packages/a2/7a/4af4bd9bd05b3b9d722c7457f39f40cf1355808d17462255b71efa85c4a3/aio_geojson_nsw_transport_incidents-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e33df9eb3bc78f9de9cb29bfe088f5cb7a909b9b902e93e33da2f491fe2ae484",
        "md5": "9c85a91ecd6a685d5c184f996219c364",
        "sha256": "b2402eaa2b8c56c0daca33047fe021468d1152bc9faf5bf36abc4d4bab1ca756"
      },
      "downloads": -1,
      "filename": "aio_geojson_nsw_transport_incidents-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9c85a91ecd6a685d5c184f996219c364",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14876,
      "upload_time": "2020-03-23T08:36:40",
      "upload_time_iso_8601": "2020-03-23T08:36:40.643662Z",
      "url": "https://files.pythonhosted.org/packages/e3/3d/f9eb3bc78f9de9cb29bfe088f5cb7a909b9b902e93e33da2f491fe2ae484/aio_geojson_nsw_transport_incidents-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a27a4af4bd9bd05b3b9d722c7457f39f40cf1355808d17462255b71efa85c4a3",
        "md5": "fc58790441b959eb0131f3724df9d310",
        "sha256": "8a87acb5dbb97179ae9dc6cb3f07d669111f1ad528b28154bde569ecb4c6c405"
      },
      "downloads": -1,
      "filename": "aio_geojson_nsw_transport_incidents-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fc58790441b959eb0131f3724df9d310",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11420,
      "upload_time": "2020-03-23T08:36:42",
      "upload_time_iso_8601": "2020-03-23T08:36:42.952503Z",
      "url": "https://files.pythonhosted.org/packages/a2/7a/4af4bd9bd05b3b9d722c7457f39f40cf1355808d17462255b71efa85c4a3/aio_geojson_nsw_transport_incidents-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}