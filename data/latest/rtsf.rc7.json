{
  "info": {
    "author": "罗科峰",
    "author_email": "lkf20031988@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# 项目初衷\n\n> 为什么已经有了[rock4automation](https://github.com/RockFeng0/rock4automation)的自动化测试框架的项目，还要另起一个rtsf项目，并且rtsf中使用的技术，rock4automation项目中已经涵盖？\n\n因为，它存在的痛点很明显：\n\n- rock4automation项目的初衷，是为了能快速重拾技术，是技术的合集，包含了新旧测试的技术。里边一些模块，是冗余的存在，这让项目本身很臃肿。如整合的一些自动化框架，selenium、appium、autoitv3、Microsoft UI Automation等等，关于性能的测试，整合了locust的一些用法。\n- rock4automation项目,打包发布的程序，会将源码封装了exe或者加密为pyd，也就是说，发布出来的程序，不是一个源码，而是一个客户端程序，这就有违我开源的意图了\n- rock4automation项目,打包了相关工具，比如appium-server，java.exe 等等，大量冗余的非项目源码的工具 \n\n而rtsf(rock4 test service framework)项目的初衷：\n\n- 参考rock4automation和httprunner的项目，我希望能精简一下rtsf，使它**仅仅提供一个测试的关键字驱动和数据驱动的程序框架**。\n- 其次，我希望**rtsf是个可扩展的服务框架**，一些自动化技术的框架，可以依托rtsf，迅速形成一个有效的自动化测试相关的业务框架。如整合selenium形成web应用业务的自动化测试框架；整合requests等技术，形成http(s)接口层业务的自动化测试框架等。\n- 另外，关于持续继承方面，我希望**rtsf是个命令行的工具**，依托它产生的自动化测试框架，可以接入持续集成的系统。\n- 最后，我希望，依托rtsf产生的自动化测试项目，能够轻量，少造轮子，多复用标准库和优秀开源项目，\n\n\n# 架构\n\n![rtsf架构.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf/rtsf架构.png)\n\n\n## 构建rtsf系列框架\n\n我这里已经完成了几个rtsf+的项目,供大家参考和使用:\n\n- 接口测试[rtsf-http](https://github.com/RockFeng0/rtsf-http)\n- 浏览器测试[rtsf-web](https://github.com/RockFeng0/rtsf-web)\n- android移动端[rtsf-app](https://github.com/RockFeng0/rtsf-app)\n- windows桌面客户端[rtsf-win](https://github.com/RockFeng0/rtsf-win)\n\n其他可接入的方案:\n- 计算机视觉opencv\n- 图形文字识别tesseract\n- 基于像素点对比的图像ImageDiff\n- 基于unity3d技术游戏控件识别pocoui\n\n等等\n\n> 测试用例模型，计划扩展为, yaml, xml, excel三种，目前已扩展的只有yaml测试用例模型\n\n\n# 介绍\n\n## 安装\n\n```\npip install rtsf\n```\n\n## rtsf-使用入门\n\nrtsf提供测试执行、报告、日志的基本功能\n\n### 测试用例介绍\n\n- rtsf分三种用例: case、 api、 suite，所以rtsf**支持测试用例分层，允许测试用例的组件化**, 其中api和suite,比case多一个关键字: def\n- 测试用例编写过程中，使用api关键字封装当前单个case，允许其他case进行调用,类似调用单个api一样\n- 测试用例编写过程中，使用suite关键字，封装当前多个cases，允许其他case进行调用， 类似调用组件化模块一样\n- def定义的api和suite,传递参数的替换过程:  当前用例调用api或suite时，**会先将传递的参数值，替换被调用的api或suite中相应的参数**\n- api用例的调用过程: 当前用例调用api的时候，如果**当前case与api重复定义键值对时，取当前case中键值对值** \n- suite用例的调用过程: 当前用例调用suite的时候，如果**当前case与suite重复定义键值对，取suite中键值对值**\n\n\n> 注意: 其内在逻辑，其实是，先加载api和suite,以dict形式存储在内置变量中，然后，加载测试集的用例，如果测试用例使用了api则合并，如果测试用例使用了suite则扩展。\n\n1. case用例： \n\n```\n# test.yaml\n\n- project:\n    name: demo project\n    module: the module name of testing project\n\n- case:    \n    name: case 1\n\n- case:\n    name: case call api 1\n    api: test1_api()\n\n- case:\n    name: case call suite\n    api: test_suite(1, 2)\n\n```\n\n2. api用例 \n\n- 在api关键字中中，使用def，表示当前是个 api用例\n- api测试用例，可被suite和case重复引入\n- 存放路径, case用例同级目录下:  dependencies/api/*。yaml, dependencies/api/*。yml, dependencies/api/*。json\n- 沿用case中定义的关键字, 对外调用，使用了def关键字。 其中，def的解析，参照了httprunner项目\n\n```\n# test_api.yaml\n\n- api:    \n    def: test1_api()\n\n- api:    \n    def: test2_api($arg1, $arg2)    \n```\n\n\n3. suite用例\n\n- 在project中，定义def，表示当前整个yaml文件，是一个suite\n- suite测试用例， 可被case和其他suite重复引入\n- suite测试用例，实际上是，由一些api或者一些case，封装后的，相对稳定的，测试用例\n- 存放路径, 测试用例同级目录下:  dependencies/suite/*。yaml, dependencies/suite/*。yml, dependencies/suite/*。json\n\n> suite的用例跟 case差别不大，主要的是，在project中，添加def关键字，定义引入suite的函数入口\n\n```\n# test_suite.yaml\n\n- project:\n    def: test_suite($arg1, $arg2)\n\n- case:\n    name: suite 1\n\n- case:    \n    name: suite call api 2\n    api: test2_api($arg1, $arg2) \n\n```\n\n### 测试用例中，函数及变量替换的格式\n\n变量和函数的替换，参照了httprunner项目的格式   该格式取代了我的[rock4automation项目](https://github.com/RockFeng0/rock4automation)中的， #var# 等替换规则\n\n- 引用函数:   ${function_str}\n- 引用变量:   $variable_str\n- function_str 为字母、数字、下划线、横线、点号、等号、逗号组成的函数. 示例:  /api/${add(1, 2)}?_t=${get_timestamp()}   正则表示为: [a-zA-Z0-9.-_=,]\n- function_str若含有特殊字符，将不会被识别， 解决方法是，使用全局变量.   示例,如:  a='@#$%^&'; $print($a)\n- variable_str 为字母、数字、下划线组成的变量名.  正则表示为:  [a-zA-Z0-9_]  \n\n### 运行测试用例\n\n使用默认Runner类执行规则，执行test.yaml测试用例\n\n```\nfrom rtsf.p_executer import TestRunner, Runner\n\nrunner = TestRunner(runner = Runner).run(r'C:\\xxx\\xxx\\test.yaml')\nrunner.gen_html_report()\n```\n\n- TestRunner(runner = Runner),runner参数用于指定重写了Runner子类,该子类重写了Runner.run_test方法。 默认值为Runner\n- TestRunner.run, 该方法，用于**运行指定yaml的case文件**，或者**运行指定文件夹路径中的yaml和json**,如c:\\case目录下*.yaml和*.json\n- TestRunner。gen_html_report,该方法，用于生成测试报告，报告路径是yaml文件所在路径\n\n\n### 简单实例\n\n 编写一个测试用例文件,如 example_1.yaml \n\n```\n# example_1.yaml\n\n- project:\n    name: demo project\n    module: test baidu\n\n- case:    \n    name: www.baidu.com\n\n```\n\nexample_1执行后的报告:\n![实例-1.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf/实例-1.png)\n\n**代码，参见项目目录examples/example_1**\n\n### 数据驱动-实例\n\n如下，创建三个文件，example_2.yaml, username_password.csv, devices.csv\n\n```\n# example_2.yaml\n\n- project:\n    name: demo project\n    module: test baidu\n    data:\n        - csv: devices.csv\n          by: Random\n        - csv: username_password.csv    \n\n- case:    \n    name: www.baidu.com-$username-$password-$devices\n\n\n# username_password.csv\nusername,password\n15312341230,1234567890\n15312341231,1234567891\n\n\n# devices.csv\ndevices\nandroid-0\nandroid-1\nandroid-2\n\n```\n\n数据驱动，其实很简单，在yaml的测试用例中，在project块，添加data关键字。\n\ndata关键字，以列表形式存在，每个列表项是一个字典，由两个key组成(csv, by)。跟loadrunner中参数化数据一样，csv第一行定义变量，第二行及以下行定义数据驱动的变量值\n- csv后面接文件名称，该文件以csv形式存在于case同一路径。\n- by是指读取csv格式的顺序， Random or Sequential。默认是Sequential，顺序读取。 该参数，可选填\n- 笛卡儿积算法，会对多个data参数进行排列，rtsf会对排列的最终结果遍历执行当前测试集合\n\nexample_2执行后的报告，如下， 跑了6条用例，是username_password.csv和devices.csv里边参数的笛卡儿积，username_password默认是顺序，devices是随机。\n![实例-2.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf/实例-2.png)\n\n**代码，参见项目目录examples/example_2**\n\n### 重写Runner-实例\n\n- rtsf提供入口，允许自定义执行模块的扩展，这个过程有点类似python中重写threading.Thread类.\n- 不同的是，rtsf需要重写rtsf.p_executer.Runner.run_test方法\n\n首先， 我们设计我们的yaml用例， 比如，在上面的例子中，加入了几个关键字， responsible, tester, demotest, demoverify\n\n```\n# example_3.yaml\n\n- project:\n    name: demo project\n    module: test baidu\n\n- case:    \n    name: demo test\n    responsible: your name\n    testser: other name\n    demotest: ${add(1, 2)}\n    demoverify: ${_is(3)}\n\n- case:    \n    name: demo test2\n    responsible: your name\n    testser: other name\n    demotest: ${mod(1, 2)}\n    demoverify: ${_is(3)} \n\n- case:    \n    name: demo test3\n    responsible: your name\n    testser: other name\n    demotest: ${mod(1, 0)}\n    demoverify: ${_is(3)} \n\n```\n\n然后，重写Runner， 对上面关键字进行功能设置， 重写 Runner.run_test的过程，是使用rtsf的主要工作\n\n- run_test(testcase_dict, variables, driver_map), rtsf在执行测试的时候，调用run_test方法，传入这3个参数\n\n> 注意: 重写的时候，第一个参数，是单个case，不是所有case，**只需要写一个case的执行逻辑**\n\n```\n# DemoRunner.py\n\n# encoding:utf-8\n\nfrom rtsf.p_executer import TestRunner, Runner\n\ndef test_add(x, y):\n    global result\n    result = x+y\n\ndef test_mod(x, y):\n    global result\n    result = x%y\n\ndef verify_is(x):\n    return result == x    \n\nclass DemoRunner(Runner):      \n\n    def __init__(self):\n        ''' 继承Runner\n        self._default_devices --> list,分布式设备标识。 默认 值 [\"\"]，表示本机\n        self._default_drivers --》 list, 分布式driver标识与driver键值对。 默认值 [(\"\",None)]， 表示本机驱动\n        self.parser --> TestCaseParser实例，用于解析用例\n        self.tracers --> 每一台分布式设备初始化的Tracer实例，用于记录日志和生成报告       \n        self.proj_info --> 记录了用例的项目信息 \n        '''\n        super(DemoRunner,self).__init__()\n\n    def run_test(self, testcase_dict, variables, driver_map):\n        ''' 重写 run_test，有三个参数\n        @parm testcase_dict:  单条测试用例\n        @param variables: dict; 用例采用数据驱动的情况下，variables是csv文件变量的笛卡儿积；默认情况下值是 {}\n        @param driver_map:  tuple;  (唯一标识, driver or module or obj); 默认情况下的值是(\"\",None),该参数适用于selenium的grid有多个 driver的情况\n        '''\n\n        # rtsf 遍历 self._default_drivers, 传给 driver_map   这里fn = ''  driver=None\n        fn, driver = driver_map\n\n        # 获取 fn 的跟踪对象， 用于记录日志 和 报告\n        fn_logger = self.tracers[fn]\n\n        # 获取用例解析对象\n        parser = self.parser\n\n        # 绑定测试用例关键字\n        yaml_keys = {\"add\": test_add, \"mod\": test_mod, '_is': verify_is}\n        parser.bind_functions(yaml_keys)        \n\n        # 更新传入的变量\n        parser.update_binded_variables(variables)\n\n        # 获取用例名字  \n        case_name = testcase_dict.get(\"name\")        \n\n        # parser.eval_content_with_bind_actions 用于解析 字段中的变量和函数，  如:  引用函数: ${function_str} 引用变量: $variable_str\n        case_name = parser.eval_content_with_bind_actions(case_name)\n\n        try:\n            # fn_logger 可以记录报告，使用:  start, section, step, normal, ok, fail, error, stop\n            # start 用于 开始记录报告；  stop 用于结束报告记录\n            fn_logger.start(self.proj_info[\"module\"],  # yaml case中 module\n                            case_name,  # yaml case中 用例名臣\n                            testcase_dict.get(\"responsible\",u\"administrator\"), # yaml case中responsible定义的责任人名称 \n                            testcase_dict.get(\"tester\",u\"administrator\"), # yaml case中tester定义的测试人名称\n                            )\n\n            # fn_logger 可以使用了logging, 记录日志，使用:  log_debug, log_info, log_warning, log_error, log_critical\n            fn_logger.log_debug(u\"===== run_test\\n\\t{}\".format(testcase_dict))\n\n            fn_logger.section(u\"------------starting test\")\n            # 获取demotest\n            demotest = testcase_dict.get(\"demotest\")\n            fn_logger.step(\"got demotest: %s\" %demotest)\n\n            parser.eval_content_with_bind_actions(demotest)                \n            fn_logger.normal(u\"eval demotest. finish\")\n\n            # 获取demoverify\n            demoverify = testcase_dict.get(\"demoverify\")\n            fn_logger.step(\"got demoverify: %s\" %demoverify)\n\n            if parser.eval_content_with_bind_actions(demoverify):\n                fn_logger.ok('verify is ok')\n            else:\n                fn_logger.fail('verify is fail')\n            fn_logger.normal(u\"eval demoverify. finish\")            \n\n        except Exception as e:\n            fn_logger.error(e)\n\n        fn_logger.stop()\n```\n- DemoRunner中，三个内置函数 test_add  test_mod  verify_is 映射到 yaml函数:  add,  mod, _is\n- DemoRunner中， 使用Tracer的实例fn_logger，对测试执行过程进行日志和报告的记录，最后使用 fn_logger.stop()结束测试\n\n最后，我们设置runner参数为 DemoRunner, 执行我们自定义的用例逻辑\n\n```\n# example_3.py\n\n# encoding:utf-8\n\nfrom rtsf.p_executer import TestRunner, Runner\nfrom DemoRunner import DemoRunner\n\nrunner = TestRunner(runner = DemoRunner).run(r'example_3.yaml')\nrunner.gen_html_report()\n```\n\nexample_3执行后的报告，如下，跑了3条用例，1条通过，1条失败，1条报错\n![实例-3.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf/实例-3.png)\n\n**代码，参见项目目录examples/example_3**\n\n### 测试用例分层(测试组件化)-实例\n\n使用上述的DemoRunner，我们设计下 分层的用例，创建如下三个文件, 文件名可以自定义，路径要正确\n\n- api用例文件，我们使用参数化，使得api用例，可以重复使用\n- suite用例文件，我们使用常规的测试手段，封装了正常的测试场景\n- 最后，case用例文件，我们做一些异常测试场景\n\n```\n# ./dependencies/api/test_api.yaml\n\n- api:    \n    def: add_api($arg1, $arg2, $exp)\n    demotest: ${add($arg1, $arg2)}\n    demoverify: ${_is($exp)}\n\n- api:\n    def: mod_api($arg1, $arg2, $exp)\n    demotest: ${mod($arg1, $arg2)}\n    demoverify: ${_is($exp)} \n\n# ./dependencies/suite/test_suite.yaml\n\n- project:\n    def: suite_test()\n\n- case:\n    name: suite 1\n    api: add_api(1, 2, 3)\n\n- case:    \n    name: suite 2\n    api: mod_api(2, 2, 0)\n\n- case:    \n    name: suite 3\n    demotest: ${add(1, 2)}\n    demoverify: ${_is(3)} \n\n# ./example_4.yaml\n\n- project:\n    name: demo project\n    module: a demo test\n\n- case:    \n    name: case 0\n    suite: suite_test()\n\n- case:\n    name: case 1\n    api: add_api(1, 2, 100)\n\n- case:    \n    name: case 2\n    api: mod_api(1, 2, 100)\n\n- case:    \n    name: case 3\n    demotest: ${add(1, 2)}\n    demoverify: ${_is(3)} \n\n```\n\nexample_4执行后的报告，如下，跑了6条用例，suite中3条通过，case的3条中，2条失败，1条成功\n![实例-4.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf/实例-4.png)\n\n**代码，参见项目目录examples/example_4**\n\n### 自定义内置函数\n在上述DemoRunner重写 Runner.run_test的过程中，我们定义了三个yaml函数: add, mod, _is, 映射到内置函数， test_add  test_mod  verify_is\n\nrtsf 提供了另一种更简单的方法\n1. 定义preference.py，将yaml函数写入 \n\n```\n# preference.py\n\n#encoding:utf-8\n\ndef add(x, y):\n    global result\n    result = x+y\n\ndef mod(x, y):\n    global result\n    result = x%y\n\ndef _is(x):\n    return result == x \n```\n2. 注释，DemoRunner中，映射相关代码\n\n```\n...\n\n# 绑定测试用例关键字\n# yaml_keys = {\"add\": test_add, \"mod\": test_mod, 'is': verify_is}\n# parser.bind_functions(yaml_keys)\n...\n\n```\n执行结果，同 example_4\n\n**代码，参见项目目录examples/example_5**\n\n## rtsf-高阶用法\n\n基于约定大于配置的原则，使用rsft构建自己的自动化测试框架\n\n### 约定基本用例结构\n\n，rtsf系列框架，**约定的case基本结构** 如下：\n\n```\n- project:    \n    name:    \n    module:    \n    data:\n- case:\n    name:\n    responsible:\n    tester:\n    glob_var:\n    glob_regx:\n    pre_command:\n    steps:\n    post_command:\n    verify:\n```\n\n> 执行顺序  pre_command(List) -> steps(List) -> post_command(List) -> verify(List)\n\n**preject定义测试集信息**\n\n| project字段               | 描述                                        | 类型              |\n| ------------- |:-------------:| -----:|\n| name          | 项目名称或待测系统名称(必填)| 字符串       |\n| module        | 测试集或功能模块名称(必填) | 字符串       |\n| data          | 数据驱动，引用的数据(选填) | 列表      |\n\n**case定义测试用例**\n\n| case字段               | 描述                                        | 类型              |\n| ------------- |:-------------:| -----:|\n| name          | 描述 用例 (必填)，唯一性(必填) | 字符串       |\n| responsible   | 用例责任人或者编写人(选填) |字符串           |\n| tester        | 用例执行者或者测试人(选填) | 字符串           |\n| glob_var      | 全局变量(选填)         | 字典           |\n| glob_regx     | 全局正则(选填)         | 字典           |\n| pre_command   | 测试的前置步骤或钩子(选填) | 列表           |\n| steps         | 测试步骤 (必填)         | 列表           |\n| post_command  | 测试的后置步骤或钩子(选填) | 列表           |\n| verify        | 校验  (选填)           | 列表           |\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RockFeng0/rtsf",
    "keywords": "test requests locust HTTP api selenium appium uiautomation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rtsf",
    "package_url": "https://pypi.org/project/rtsf/",
    "platform": null,
    "project_url": "https://pypi.org/project/rtsf/",
    "project_urls": {
      "Homepage": "https://github.com/RockFeng0/rtsf"
    },
    "release_url": "https://pypi.org/project/rtsf/2.9.5/",
    "requires_dist": [
      "PyYAML",
      "Jinja2",
      "colorama",
      "colorlog",
      "urllib3"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
    "summary": "rock4 test service framework",
    "version": "2.9.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14280442,
  "releases": {
    "2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4742599f82bad79af24aea82dc72877e44fc1543a40301264cb2ae5a5cff7fdc",
          "md5": "83a14689b16ee780daac5cfd7f8578e8",
          "sha256": "3bea828a4e267152af4d5dfcff7da06712d3e57164e679fea19657da2383dfb5"
        },
        "downloads": -1,
        "filename": "rtsf-2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83a14689b16ee780daac5cfd7f8578e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 28582,
        "upload_time": "2018-10-10T07:17:43",
        "upload_time_iso_8601": "2018-10-10T07:17:43.705028Z",
        "url": "https://files.pythonhosted.org/packages/47/42/599f82bad79af24aea82dc72877e44fc1543a40301264cb2ae5a5cff7fdc/rtsf-2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d5e4c4d60b298cfe26b6776d96802adbd31b808acfbef0db6706e18be6a7258",
          "md5": "2e35d17645c7ade6207076ab5bfec347",
          "sha256": "7a4a3ef5b6af2c1a9f5cec9aedda70867c1cf2793ff12a6563dfb12424206a7a"
        },
        "downloads": -1,
        "filename": "rtsf-2.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e35d17645c7ade6207076ab5bfec347",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 34829,
        "upload_time": "2018-11-04T01:33:00",
        "upload_time_iso_8601": "2018-11-04T01:33:00.281628Z",
        "url": "https://files.pythonhosted.org/packages/6d/5e/4c4d60b298cfe26b6776d96802adbd31b808acfbef0db6706e18be6a7258/rtsf-2.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e7aed43f0430a73a1244c8c9a884c3413361dfc6b194e2d8e15dcaabbbfe77e",
          "md5": "03e2b2b5eba750ee8b383a72bb92b040",
          "sha256": "52d12e736c74f11abc61f3a953803727551ce930e08516cd55361df310d7574e"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "03e2b2b5eba750ee8b383a72bb92b040",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 37277,
        "upload_time": "2018-11-04T01:33:02",
        "upload_time_iso_8601": "2018-11-04T01:33:02.176754Z",
        "url": "https://files.pythonhosted.org/packages/4e/7a/ed43f0430a73a1244c8c9a884c3413361dfc6b194e2d8e15dcaabbbfe77e/rtsf-2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da634da1fb610bc9cf3b9dc13bed18079f795b6432ebec4dfc42a93a1cac617c",
          "md5": "67c51fa27ab55670da9f5838a50b22e4",
          "sha256": "80c6e3d26751176122e6496eeafb9f2d0808ffb94045601c61c8be2bc66ed2d1"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67c51fa27ab55670da9f5838a50b22e4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 34849,
        "upload_time": "2018-11-05T15:03:09",
        "upload_time_iso_8601": "2018-11-05T15:03:09.534945Z",
        "url": "https://files.pythonhosted.org/packages/da/63/4da1fb610bc9cf3b9dc13bed18079f795b6432ebec4dfc42a93a1cac617c/rtsf-2.9.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c1d0685179be7238519e7381dfe3df8d773f5c18ed30d51efd728e2ae219d19",
          "md5": "5ec0ac0d7175367b652dfd6dab3aff9a",
          "sha256": "2d4e8c51f87b0da55a52caccfb98bdfcc21e3411be1efa9c8e8a4f0c96115b5d"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ec0ac0d7175367b652dfd6dab3aff9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 37252,
        "upload_time": "2018-11-05T15:03:11",
        "upload_time_iso_8601": "2018-11-05T15:03:11.355061Z",
        "url": "https://files.pythonhosted.org/packages/5c/1d/0685179be7238519e7381dfe3df8d773f5c18ed30d51efd728e2ae219d19/rtsf-2.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a93e57012527e1c14eb863651a21e82e47d15e9cc4bae12c26fbe9b7fe15367",
          "md5": "b6e53b4fb891306f2bfaedb16bae8b33",
          "sha256": "638cdae769f6ab0edabebe6d6a52357814b6de67c4f18f3b9ea410430d56e137"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6e53b4fb891306f2bfaedb16bae8b33",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 36346,
        "upload_time": "2019-03-18T12:08:58",
        "upload_time_iso_8601": "2019-03-18T12:08:58.423287Z",
        "url": "https://files.pythonhosted.org/packages/4a/93/e57012527e1c14eb863651a21e82e47d15e9cc4bae12c26fbe9b7fe15367/rtsf-2.9.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d3f7ad4c871df6bbc7b3357108de6d3c629ed5d19e7db90405c77ca6cb8e378",
          "md5": "80c8c72927c47dc7440e3b7643264ec4",
          "sha256": "56575f1d5aeaf364d1b959decaa2cdac35d13a6a9e874289fdf52b92b6da7566"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80c8c72927c47dc7440e3b7643264ec4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 40565,
        "upload_time": "2019-03-18T12:09:00",
        "upload_time_iso_8601": "2019-03-18T12:09:00.032810Z",
        "url": "https://files.pythonhosted.org/packages/8d/3f/7ad4c871df6bbc7b3357108de6d3c629ed5d19e7db90405c77ca6cb8e378/rtsf-2.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70e1a9d80dae2737d555b13186d9a835bf0926e5a53a86c7baf35366b98e28b0",
          "md5": "4bcf335d293743999f4ab74e891c966f",
          "sha256": "456a7e403500db98563c6ab4b308389e2ca342c09a40bd1b53bb463ff02403b4"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bcf335d293743999f4ab74e891c966f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 36678,
        "upload_time": "2019-12-10T07:55:19",
        "upload_time_iso_8601": "2019-12-10T07:55:19.705727Z",
        "url": "https://files.pythonhosted.org/packages/70/e1/a9d80dae2737d555b13186d9a835bf0926e5a53a86c7baf35366b98e28b0/rtsf-2.9.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27ade7b0c86860469581ea1422835d5a33f71397dbaef869465d3f9ee9fba937",
          "md5": "a4d1035853a1218501989cc6120165ac",
          "sha256": "2b96a0fd0e2f03fab745809c9857b1d345e56328c45a3c548305a85930471107"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a4d1035853a1218501989cc6120165ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 41347,
        "upload_time": "2019-12-10T07:55:21",
        "upload_time_iso_8601": "2019-12-10T07:55:21.590975Z",
        "url": "https://files.pythonhosted.org/packages/27/ad/e7b0c86860469581ea1422835d5a33f71397dbaef869465d3f9ee9fba937/rtsf-2.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6b967fe91431e595189ae73b5f0826c94f1f2fccfbb6c1a47726d97d5b0b947",
          "md5": "83bf2ac3c6fe7650accb1b137b2addab",
          "sha256": "4b66ea9169b1b017e3cdab2e6149a13fd7852d7ea1225c886f8bf035cb975504"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83bf2ac3c6fe7650accb1b137b2addab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 36997,
        "upload_time": "2019-12-11T13:37:35",
        "upload_time_iso_8601": "2019-12-11T13:37:35.869100Z",
        "url": "https://files.pythonhosted.org/packages/b6/b9/67fe91431e595189ae73b5f0826c94f1f2fccfbb6c1a47726d97d5b0b947/rtsf-2.9.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78ac792577fc5ad514e36a14d2d1c6de03f29001436997bc9bd104911060d458",
          "md5": "343f4db0f35d0863630525f13b42c428",
          "sha256": "59f94610e4d9c8f43c6effd91c793a16eca14ddab8c85099fcabe0fb326f53d9"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "343f4db0f35d0863630525f13b42c428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 41667,
        "upload_time": "2019-12-11T13:37:37",
        "upload_time_iso_8601": "2019-12-11T13:37:37.639691Z",
        "url": "https://files.pythonhosted.org/packages/78/ac/792577fc5ad514e36a14d2d1c6de03f29001436997bc9bd104911060d458/rtsf-2.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3456de0ab7cd795020bcafeaf0d87f1e031a9eedde5066a8323eae6ef5189d7d",
          "md5": "6264b41e980607750d9361f0dac9fcf6",
          "sha256": "6da01c79fa8fe95cfaa95038adc02d7e38aa95deb0331af760b5519afe73256f"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6264b41e980607750d9361f0dac9fcf6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 35456,
        "upload_time": "2022-06-29T03:05:09",
        "upload_time_iso_8601": "2022-06-29T03:05:09.608385Z",
        "url": "https://files.pythonhosted.org/packages/34/56/de0ab7cd795020bcafeaf0d87f1e031a9eedde5066a8323eae6ef5189d7d/rtsf-2.9.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ec0635da44662c5506a0340c4b4e83e78cc9222f56001b07a53ab785cd6f7f7",
          "md5": "dec6cf7bf5a514beec4bc6763d207c0e",
          "sha256": "91ab9d15246d2ee0354cae91f1fef21f28a525b5e062be3a94c0466d95ac42cf"
        },
        "downloads": -1,
        "filename": "rtsf-2.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dec6cf7bf5a514beec4bc6763d207c0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 40543,
        "upload_time": "2022-06-29T03:05:11",
        "upload_time_iso_8601": "2022-06-29T03:05:11.765204Z",
        "url": "https://files.pythonhosted.org/packages/6e/c0/635da44662c5506a0340c4b4e83e78cc9222f56001b07a53ab785cd6f7f7/rtsf-2.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3456de0ab7cd795020bcafeaf0d87f1e031a9eedde5066a8323eae6ef5189d7d",
        "md5": "6264b41e980607750d9361f0dac9fcf6",
        "sha256": "6da01c79fa8fe95cfaa95038adc02d7e38aa95deb0331af760b5519afe73256f"
      },
      "downloads": -1,
      "filename": "rtsf-2.9.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6264b41e980607750d9361f0dac9fcf6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 35456,
      "upload_time": "2022-06-29T03:05:09",
      "upload_time_iso_8601": "2022-06-29T03:05:09.608385Z",
      "url": "https://files.pythonhosted.org/packages/34/56/de0ab7cd795020bcafeaf0d87f1e031a9eedde5066a8323eae6ef5189d7d/rtsf-2.9.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ec0635da44662c5506a0340c4b4e83e78cc9222f56001b07a53ab785cd6f7f7",
        "md5": "dec6cf7bf5a514beec4bc6763d207c0e",
        "sha256": "91ab9d15246d2ee0354cae91f1fef21f28a525b5e062be3a94c0466d95ac42cf"
      },
      "downloads": -1,
      "filename": "rtsf-2.9.5.tar.gz",
      "has_sig": false,
      "md5_digest": "dec6cf7bf5a514beec4bc6763d207c0e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 40543,
      "upload_time": "2022-06-29T03:05:11",
      "upload_time_iso_8601": "2022-06-29T03:05:11.765204Z",
      "url": "https://files.pythonhosted.org/packages/6e/c0/635da44662c5506a0340c4b4e83e78cc9222f56001b07a53ab785cd6f7f7/rtsf-2.9.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}