{
  "info": {
    "author": "",
    "author_email": "Nuno Velosa <nunovelosa@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ANTgen - the AMBAL-based NILM Trace generator\n\nThis tool generates synthetic macroscopic load signatures for their use in conjunction\nwith NILM (load disaggregation) tools. By default, it runs in scripted mode (i.e., with\nno graphical user interface) and processes an input configuration file into a set of CSV\noutput files containing power consumption values and the timestamps of their occurrence,\nas well as a file summarizing the events that have occurred during the simulation).\n\nIf you find this tool useful and use it (or parts of it), we ask you to cite the following work in your publications:\n```bibtex\n@inproceedings{reinhardt20benchmarking,\n  author = {Andreas Reinhardt and Christoph Klemenjak},\n  title = {How does Load Disaggregation Performance Depend on Data Characteristics? Insights from a Benchmarking Study},\n  booktitle = {Proceedings of the 11th ACM International Conference on Future Energy Systems (e-Energy)},\n  year = {2020}\n}\n```\n\n## Requirements\n\nANTgen relies on a small number of Python libraries to fully function. Install them by typing:\n\n```bash\npip3 install -r requirements.txt\n```\n\nNote: On Windows systems without a C/C++ compiler suite installed, the installation of package requirements may fail, \nreporting that the \"Microsoft Visual C++ Build Tools\" are missing. To continue, [download and install \nthem](https://visualstudio.microsoft.com/visual-cpp-build-tools/), then re-run the above command.\n\nANTgen can show an overview plot of its generated data if `matplotlib` is installed.\nSo unless you plan to use ANTgen to create data on a headless server, we recommend the installation\nof this library as well.\n\n```bash\npip3 install matplotlib    # (optional, install only if you want to see your data plotted)\n```\n\n## Usage\n\n```bash\npython3 antgen.py [-o DESTINATION] [-w] [-s SEED] [-a] [-m MAPFILE] \n                  [-d DAYS] [-n NOISECONFIG] [-v] [-p] configfile\n```\n\nMandatory argument:\n\n* `configfile`: The configuration file to process (see next section for format)\n\nOptional arguments:\n\n* `-o <dir>` specifies the folder in which the output files shall be saved (`output/` by default)\n* `-w` overwrite output files if they already exist\n* `-s <123123123>` define the seed value for the random number generator\n* `-a` randomly pick an appliance model each time the appliance is being operated (if unset, all operations of appliances of the same type will be exact replicas of each other)\n* `-m <mapping.conf>` defines the mappings between appliances types and their AMBAL models (can be overwritten individually in the `[devices]` section of the configuration file)\n* `-n <C123>` defines if noise shall be added to the aggregate signal. One letter (`C`=constant, `G`=Gaussian) followed by the amplitude in Watt\n* `-d <123>` overrides the number of days for which to generate data (can also be given in the `[GENERAL]` section of the configuration file)\n* `-p` opens a graphical interface to plot the resulting traces after their generation (requires `matplotlib`)\n* `-v` makes ANTgen verbose and outputs more status information\n\n## Configuration\n\nAll ANTgen configuration files are expected to be present in TOML format.\nThe core configuration file must feature at least the sections `[GENERAL]` and `[users]`.\nOptionally, specific appliance models to be used can be placed in the `[devices]` section.\nIf `[devices]` is not part of the configuration file, a fallback mapping between\nappliance names and the corresponding model dictionary must be provided by means\nof the `-m` option, such as `-m mapping.conf`. This mapping file must contain a section\nnamed `[devices]` to be processed correctly.\n\n* In the `[GENERAL]` section, the configuration needs to be provided with a `name` and\nthe number of `days` for which data shall be generated. Optionally, the `seed` \nvalue for the random number generator can be specified to ensure a repeatable \ntrace generation. When no seed is provided, the random number generator will \ninitialize itself based on the current system time. If the number of days is neither\nspecified here nor on the command line (using `-d`), ANTgen will generate one day\nworth of data only.\n\n* The `[users]` section contains key-value pairs of user handles (only used for debugging)\nand the corresponding user models (see next section for details). In order to allow\nhousehold base loads (refrigerator, etc) to run unattended, they should be added\nas another (virtual) user, e.g., `Home`.\n\n* An (optional) `[devices]` section can be added to list the appliance model *directories* to\nconsider, indexed by the **capitalized** appliance type. It is crucial to keep\nthe structure of the path intact, i.e., use exactly two levels of hierarchy, with\nthe first-level subdirectory indicating the type of modeled appliance, and\nthe second-level subdirectory referring to the individual handle from which\nthe data was extracted. The keys for each entry must be upper-case and reflect\nthe type of appliance that is being referred to. All AMBAL models must be located \nin the `appliances/` subdirectory.\n\nAn example configuration is shown as follows:\n```\n[GENERAL]\nname = Sample configuration\ndays = 4\nseed = 12345\n\n[users]\nHome = baseload.conf\nJack = STUDENT/student_simple.conf\n\n[devices]\nCOOKINGSTOVE = COOKINGSTOVE/dev_D33097\nTV = TV/dev_B80E51\n```\n\nThis configuration file will create synthetic load signature data for four days, seeding\nthe random number generator with the value 12345. There are two users in the generated data,\none going by the handle \"Jack\" and following the daily routines specified in `users/STUDENT/student_simple.conf`.\nThe second \"user\" is present to model the household base load, as defined in `users/baseload.conf`.\n\n## Users\n\nTo create realistic models, ANTgen relies on user models. All user models are stored in\nthe `users/` subdirectory, or subdirectories thereof. User models are stored in TOML\nformat, and must feature the `[GENERAL]` and `[presence]` sections, as well as one section\nfor each user activity that should be modeled (these ones must start with the string\n`activity_`).\n\n* In the `[GENERAL]` section, the user model must be provided with a `name`, which is\nalso reflected in the graphical user interface and the per-user power consumption output\nfile.\n\n* The `[presence]` section contains key-value pairs of weekdays (\"monday\" through \"sunday\";\nall in lower-case) and and the corresponding presence times. Times are specified in\n24hr notation (from 00:00-24:00); multiple time ranges can be concatenated using commas.\nThese time frames indicate when a user can start/perform an activity.\n\n* All activity sections must start with the `activity_` tag, followed by a unique\nidentifier (hint: this makes it easy to remove an activity temporarily by making it an\n`inactivity_`). User activities are modeled separately (see below); the link between is\ncreated by specifying the file name of the activity configuration using the `model` entry.\nThe `daily_runs` value states the average number of repetitions of this activity\nthroughout each day. There is no guarantee the activity will be scheduled *exactly* this\noften during each simulated day. Lastly, activity occurrences can be time-limited by\nspecifying the hours during which the activity can take place for each day of the week,\nusing the same notation as for the `presence` tag above.\n\nAn example user model is shown as follows:\n\n```\n[GENERAL]\nname = Lucas Lazybone\n\n[presence]\nmonday   = 00:00-08:30, 14:00-24:00\nsunday   = 00:00-24:00\n\n[activity_breakfast]\nmodel      = KITCHEN/cooking_quick.conf\ndaily_runs = 1\nmonday     = 07:30-08:15\nsunday     = 08:30-09:15\n```\n\nThis configuration models a user who is only at home on mondays and sundays, and cooks\nbreakfast once on both days at some (randomly determined) time in the specified time intervals.\n\n## Activities\n\nActivities are modeled as state machines, to be executed by the users. All activity\nmodels must be stored in the `activities/ ` subdirectory, or subdirectories thereof.\nActivity models also use the TOML format. \n\nAs follows, find some notes on the used nomenclature and some general guidelines\nfor activity definitions:\n\n1. The only entry the `[GENERAL]` section of each activity model must contain is the\n`name` field. Enter a descriptive name of the activity, which will also constitute \nthe corresponding file name for the power data when written to an output file.\n\n2. Specify the types of appliances the activity requires in the `[devices]` section. The tool\nwill try to find matches for all entries listed there, so any unused leftover entries\ncan make the synthesis fail. Use unique numeric keys for listing the devices required. They\nwill be later referred to in the state machine (see below).\n\n3. Activities are modeled in the form of state machines. Each operational state is\nspecified in the `[sequence]` table. \nAll states must be assigned a numeric identifier (the state machine starts in state `0`) and\nrequire the specification of the following fields, which are entered in the\nform of a comma-separated list:\n    - A short name (primarily for debugging purposes)\n    - The minimum and maximum duration (use '0' to fall back to the underlying appliance\n    model's default value). If a value greater than 0 is provided, the underlying appliance's activity\n    will be scaled linearly in time, i.e., the durations of all its elements will be\n    stretched/compressed to meet the requested overall duration.\n    - A flag whether the user must be present for a particular state to take place. This\n    ensures that an activity is only scheduled when the user is actually at home when needed.\n    - A flag whether the state must run to completion before the state machine will progress\n    to the next step. If this value is set to 'false', a delay of just 5-10 seconds is introduced\n    before moving on to the next state, and the appliance continues to operate in the background.\n    - The ID of the device to operate in this state (as per the key specified in the\n    `[devices]` section of the activity configuration file).\n    - The next state(s) into which the appliance operation can move, as well as the probability\n    of the transition there. The state machine will advance into state A with the probability\n    specified, and into the state B with the converse probability. Using the same value for states A\n    and B, or a probability of 1.0 effectively makes this a linear flow with no variation possible.\n    Referring to an undefined state in the state machine will terminate the state machine's flow.\n\nThe state model representation also allows for unattended operation of devices (simply set \nthe flag whether it involves the user to false). Similarly, states that involve the user but no appliance (e.g.\neating) can be modeled by setting the appliance ID to an undefined value (e.g., 0), but specifing a non-zero duration.\n\nThere is no need to add a \"start\" state, yet an initial state with a duration of 0 seconds\ncan be added for the sake of better readability. Likewise, a state relying on an undefined\nappliance (e.g., '0') with non-zero duration can act as a delay in-between states.\n\nAn example activity model for vacuuming the apartment is shown as follows. It assigns ID 1 to the \nVACUUMCLEANER appliance, and runs this appliance as long (or short) as stored in the appliance model.\nThe user must be present both during the start of the activity (`involves_user`) as well as throughout\nits operation (`run_to_completion`). After one room has been vaccumed, the user rests for 5-10 minutes,\nbefore vacuuming another room (at 20% probability) or stopping the activity (at 80% probability).\n\n```\n[GENERAL]\nname = vacuuming\n\n[devices]\n1=VACUUMCLEANER\n\n[sequence]\n# state ID, min_dur, max_dur, involves_user, run_to_completion, dev, prob_for_a, state_a, state_b\n0=vacuum,         0,       0,          true,              true,   1,        1.0,       1,       1\n1=rest,         300,     600,          true,              true,   0,        0.2,       0,       2\n```\n## Appliance models\n\nANTgen uses the AMBAL format for its appliance models (i.e., XML files). A sample set\nof models is provided in the `appliances/` subdirectory of this repository.\nNewly extracted models can simply be copied into this directory.\n\n## User interface\n\nWhen executed with the `-p` option, a graphical user interface is brought up after the\ntrace generation has completed. The user interface shows traces for total power demand\nas well as the demand of power per user, power per activity, and power per appliance.\nTo use this feature, the `matplotlib` library must be installed.\n\nBy clicking on the colored lines in the legend boxes (*not* their textual labels), \nthe visibility of individual traces can be toggled from the view.\n\n## Getting started with a little example\n\nThe distribution of ANTgen ships with a few user, activity, and appliance models.\nRun the following command to create a synthetic trace for one user and a constantly\nrunning refrigerator, for the duration of 10 days.\n\n```bash\npython3 antgen.py -m mapping.conf default.conf\n```\n\nDuring its execution, ANTgen will output some logging information, an excerpt\nof which is shown as follows. Most of it should be self-explanatory.\n\n```\n           root [I] ANTgen started using 'default.conf' on 14-05-2020 at 14:16:25\n           root [I] Output files will be stored in ./output\n                ...\n      UserModel [I] User model successfully created for 'Household base load' (1 activity)\n      UserModel [I] User model successfully created for 'Grumpy Grandma' (5 activities)\n           root [I] ********************************************************************************\n                ...\n      UserModel [I] Generating load signature(s) for activity 1/1 (fridge) for 10 days...\n  ActivityModel [I] Synthesis of 'fridge operation' done: 241 scheduled, 5 didn't fit\n      UserModel [I] Generating load signature(s) for activity 1/5 (vacuum) for 10 days...\n  ActivityModel [I] Synthesis of 'vacuuming' done: 8 runs scheduled\n      UserModel [I] Generating load signature(s) for activity 2/5 (dishwashing) for 10 days...\n  ActivityModel [I] Synthesis of 'dishwasher operation' done: 1 runs scheduled\n      UserModel [I] Generating load signature(s) for activity 3/5 (tv) for 10 days...\n  ActivityModel [I] Synthesis of 'watching TV' done: 13 runs scheduled\n      UserModel [I] Generating load signature(s) for activity 4/5 (ironing) for 10 days...\n  ActivityModel [I] Synthesis of 'ironing clothes' done: 4 runs scheduled\n      UserModel [I] Generating load signature(s) for activity 5/5 (laundry) for 10 days...\n  ActivityModel [I] Synthesis of 'washing a load of laundry' done: 3 runs scheduled\n           root [I] Synthesis completed in 30.926 seconds\n                ...\n           root [I] ********************************************************************************\n           root [I] Trace duration (days)  :             10\n           root [I] First weekday          :         friday\n           root [I] # active devices       :             12\n           root [I] # appliance operations :            553\n           root [I] ---------------------------------------\n           root [I]    VACUUMCLEANER #runs :              8\n           root [I]   WASHINGMACHINE #runs :              3\n           root [I]             IRON #runs :              4\n           root [I]     REFRIGERATOR #runs :            241\n           root [I]       DISHWASHER #runs :              1\n           root [I]               TV #runs :             26\n           root [I] ---------------------------------------\n           root [I] Max. appl. concurrency :              2\n           root [I] Random seed            :     1234567890\n           root [I] Added noise            :           none\n```\n\nIf you have `matplotlib` installed, ANTgen can also provide a plot of the synthesis results.\nSimply invoke it with `-p` on the command line:\n\n```bash\npython3 antgen.py -m mapping.conf -p default.conf\n```\n\n![Visualization when synthesizing default.conf](example1.png)\n\nANTgen features two ways to make the output data a little harder to disaggregate.\nFirst, adding noise to the aggregate signal is possible by invoking ANTgen with the \n`-n` option. For example, `-n G200` will add 200 Watts of Gaussian noise (with\na standard deviation of one tenth of the amplitude, i.e., 20W) to the aggregate signal.\nSecond, you can use the `-a` switch to alternate the used appliance model for each activity.\nWhile all refrigerator cycles followed the exact same power consumption pattern in above\ndiagram, a random model for the given appliance will be selected in this case (from the directory\n`appliances/REFRIGERATOR/dev20111228/`) for each operation of the refrigerator.\n\n\n```bash\npython3 antgen.py -m mapping.conf -n G200 -a -d5 -p default.conf\n```\n\n![Visualization when synthesizing default.conf with extended options](example2.png)\n\nOther configuration files (including the ones that were used to create the synthetic data for \nthe aforementioned ACM e-Energy 2020 publication) are located in the `testcases/` directory.\n\n## Copyright notice\n\nCopyright (C) 2019-2020  Andreas Reinhardt <reinhardt@ieee.org>, TU Clausthal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "antgen",
    "package_url": "https://pypi.org/project/antgen/",
    "platform": null,
    "project_url": "https://pypi.org/project/antgen/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/nunovelosa/antgen/issues",
      "Homepage": "https://gitlab.com/nunovelosa/antgen"
    },
    "release_url": "https://pypi.org/project/antgen/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "This tool generates synthetic macroscopic load signatures for their use in conjunction with NILM (load disaggregation) tools.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15503075,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "895f1f5d3c0ed91114bd30644a62e9e43f86a4496dd82b0cbce1d9e0e737f9b3",
          "md5": "a507eaa2402948bfac0091de039a6516",
          "sha256": "ed4f0c48b7eb5eaca35fef1f7028966bf063d5153bbaf94d5fa87448c29ad42c"
        },
        "downloads": -1,
        "filename": "antgen-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a507eaa2402948bfac0091de039a6516",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7459498,
        "upload_time": "2022-10-06T17:22:20",
        "upload_time_iso_8601": "2022-10-06T17:22:20.147853Z",
        "url": "https://files.pythonhosted.org/packages/89/5f/1f5d3c0ed91114bd30644a62e9e43f86a4496dd82b0cbce1d9e0e737f9b3/antgen-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "345e3630cb26d7defa6c4a5ddd9bd3d56535db843b8265ff523fa4b88f485847",
          "md5": "f021434113ec84a9c7bc4d4e8231c127",
          "sha256": "ba4630ba0999bb4fc44d7aeba06d22cf7c115952b1efbd7e992e0b5c0202377a"
        },
        "downloads": -1,
        "filename": "antgen-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f021434113ec84a9c7bc4d4e8231c127",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27445617,
        "upload_time": "2022-10-06T17:22:26",
        "upload_time_iso_8601": "2022-10-06T17:22:26.613628Z",
        "url": "https://files.pythonhosted.org/packages/34/5e/3630cb26d7defa6c4a5ddd9bd3d56535db843b8265ff523fa4b88f485847/antgen-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7d68f0be96132cb8505ffd9fbb61b7ccd380f330e47194d7e3e90a2a257b444",
          "md5": "244e94fdcd3c0047e8ce243e3b29c918",
          "sha256": "cc11c15b3fc8b36c7f1bff69a8b5244e1758f399b8f20e5ce830b97c97822449"
        },
        "downloads": -1,
        "filename": "antgen-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "244e94fdcd3c0047e8ce243e3b29c918",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4951882,
        "upload_time": "2022-10-23T20:01:46",
        "upload_time_iso_8601": "2022-10-23T20:01:46.111287Z",
        "url": "https://files.pythonhosted.org/packages/a7/d6/8f0be96132cb8505ffd9fbb61b7ccd380f330e47194d7e3e90a2a257b444/antgen-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a63de62459e28993adf3c86b1a33f75bfc0d4940df88037d79783f7f5352892",
          "md5": "10428095293acf78da9464889207670d",
          "sha256": "b746211ddaf6fbbbe559f54de6c03cb8d497363439254c01a0e25c167ab586a6"
        },
        "downloads": -1,
        "filename": "antgen-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10428095293acf78da9464889207670d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27445612,
        "upload_time": "2022-10-23T20:02:34",
        "upload_time_iso_8601": "2022-10-23T20:02:34.948354Z",
        "url": "https://files.pythonhosted.org/packages/5a/63/de62459e28993adf3c86b1a33f75bfc0d4940df88037d79783f7f5352892/antgen-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7d68f0be96132cb8505ffd9fbb61b7ccd380f330e47194d7e3e90a2a257b444",
        "md5": "244e94fdcd3c0047e8ce243e3b29c918",
        "sha256": "cc11c15b3fc8b36c7f1bff69a8b5244e1758f399b8f20e5ce830b97c97822449"
      },
      "downloads": -1,
      "filename": "antgen-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "244e94fdcd3c0047e8ce243e3b29c918",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4951882,
      "upload_time": "2022-10-23T20:01:46",
      "upload_time_iso_8601": "2022-10-23T20:01:46.111287Z",
      "url": "https://files.pythonhosted.org/packages/a7/d6/8f0be96132cb8505ffd9fbb61b7ccd380f330e47194d7e3e90a2a257b444/antgen-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a63de62459e28993adf3c86b1a33f75bfc0d4940df88037d79783f7f5352892",
        "md5": "10428095293acf78da9464889207670d",
        "sha256": "b746211ddaf6fbbbe559f54de6c03cb8d497363439254c01a0e25c167ab586a6"
      },
      "downloads": -1,
      "filename": "antgen-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "10428095293acf78da9464889207670d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27445612,
      "upload_time": "2022-10-23T20:02:34",
      "upload_time_iso_8601": "2022-10-23T20:02:34.948354Z",
      "url": "https://files.pythonhosted.org/packages/5a/63/de62459e28993adf3c86b1a33f75bfc0d4940df88037d79783f7f5352892/antgen-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}