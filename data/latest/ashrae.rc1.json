{
  "info": {
    "author": "Eric Schmidt",
    "author_email": "wuppening@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# The Ashrae project\n> Building models for the Ashrae prediction challenge.\n\n\n## Configuring\n\nDefining wether to process the test set (warning, this alone takes 12+ minutes) and submit the results to kaggel (you will need your credentials set up).\n\n```\ndo_test = True\ndo_submit = False\n```\n\nDefining where the csv files are located\n\n```\nloading.DATA_PATH = Path(\"../data\")\n```\n\n## Getting the data from Kaggle\n\n```\n!kaggle competitions download -c ashrae-energy-prediction -p {data_path}\n!kaggle competitions leaderboard -c ashrae-energy-prediction -p {data_path} --download\n```\n\n## Loading\n\n```\n%%time\nloading.N_TRAIN = 100_000\nloading.N_TEST = 100_000\n```\n\n```\n%%time\ncsvs = loading.get_csvs()\ncsvs\n```\n\n```\n%%time\nashrae_data = loading.load_all()\n```\n\n## Inspecting the leaderboard\n\n```\ndf_leaderboard = pd.read_csv(csvs['public-leaderboard'], parse_dates=['SubmissionDate'])\ndf_leaderboard.head()\n```\n\n```\n%%time\ndis = leaderboard.get_leaderboard_distribution(df_leaderboard)\ndis['Score'].describe(percentiles=[.05, .1, .25, .5, .75, .95])\n```\n\n## Building features\n\n```\n%%time\nprocessor = preprocessing.Processor() \ntfms_config = {\n    'add_time_features':{},\n    'add_weather_features':{'fix_time_offset':True,\n                            'add_na_indicators':True,\n                            'impute_nas':True},\n    'add_building_features':{},\n}\n\ndf, var_names = processor(ashrae_data['meter_train'], tfms_configs=tfms_config,\n                          df_weather=ashrae_data['weather_train'],\n                          df_building=ashrae_data['building'])\n\nif do_test:\n    %time\n    df_test, _ = processor(ashrae_data['meter_test'], tfms_configs=tfms_config,\n                             df_weather=ashrae_data['weather_test'],\n                             df_building=ashrae_data['building'])\n    df_test = preprocessing.align_test(df, var_names, df_test)\n```\n\n## Sampling from `df`\n\n```\n%%time\nn = len(df)\n\nif False: # per building_id and meter sampling\n    n_sample_per_bid = 500\n    replace = True\n\n    df = (df.groupby(['building_id', 'meter'])\n         .sample(n=n_sample_per_bid, replace=replace))\n\nif False: # general sampling\n    frac_samples = .05\n    replace = False\n\n    df = (df.sample(frac=frac_samples, replace=replace))\n\nprint(f'using {len(df)} samples = {len(df)/n*100:.2f} %')\n```\n\n## Preparing the data for modelling\n\n```\n%%time\n# t_train = pd.read_parquet(data_path/'t_train.parquet')\nt_train = None\n\n%time\n#split_kind = 'random'\n#split_kind = 'time'\n# split_kind = 'fix_time'\nsplit_kind = 'time_split_day'\ntrain_frac = .9\n```\n\n```\nsplits = preprocessing.split_dataset(df, split_kind=split_kind, train_frac=train_frac,\n                                     t_train=t_train)\nprint(f'sets {len(splits)}, train {len(splits[0])} = {len(splits[0])/len(df):.4f}, valid {len(splits[1])} = {len(splits[1])/len(df):.4f}')\n```\n\n```\n%%time\nprocs = [Categorify, FillMissing, Normalize]\nto = feature_testing.get_tabular_object(df,\n                                        var_names,\n                                        splits=splits,\n                                        procs=procs)\n```\n\n```\n%%time\ntrain_bs = 1000\nval_bs = 1000\n\ndls = to.dataloaders(bs=train_bs, val_bs=val_bs)\n```\n\n```\n%%time\ntest_bs = 1000\n\nif do_test:\n    test_dl = dls.test_dl(df_test, bs=test_bs) \n```\n\n## Training a neural net using `tabular_learner`\n\n```\ny_range = (-.1, 17)\n\nlayers = [50, 20]\n\nembed_p = 0.\n\nps = [.0 for _ in layers]\n\nconfig = tabular_config(embed_p=embed_p, ps=ps)\n\nlearn = tabular_learner(dls, y_range=y_range, \n                        layers=layers, n_out=1, \n                        config=config, \n                        loss_func=modelling.evaluate_torch)\nrun = -1 # a counter for `fit_one_cycle` executions\n```\n\n```\n%%time\nlearn.fit_one_cycle(5, lr_max=1e-2)\n```\n\n```\nlearn.recorder.plot_loss()\n```\n\n## Inspecting the predictions\n\n### Basic score\n\n```\n%%time\ny_valid_pred, y_valid_true = learn.get_preds()\ny_valid_pred, y_valid_true = modelling.cnr(y_valid_pred), modelling.cnr(y_valid_true)\n```\n\nTODO: running the below cell produces an 'IndexError: index out of range in self' thing for `learn.get_preds(dl=test_dl)` although the code seems identical to the one in `all_meters_one_model.ipynb` and it runs there (well at least it did ... testing now shows that also broke for some reason).  \n\n```\n%%time\nif do_test:\n    y_test_pred, _ = learn.get_preds(dl=test_dl)\n    y_test_pred = modelling.cnr(y_test_pred)\n```\n\n```\nnb_score = modelling.evaluate_torch(torch.tensor(y_valid_true), \n                                    torch.tensor(y_valid_pred)).item()\nprint(f'fastai loss {nb_score:.4f}')\n```\n\n### Histogram of  `dep_var`\n\n```\nfeature_testing.hist_plot_preds(modelling.pick_random(y_valid_true, 50), \n                                modelling.pick_random(y_valid_pred, 50), \n                                label0='truth', label1='prediction')\n```\n\n```\nif do_test:\n    feature_testing.hist_plot_preds(modelling.pick_random(y_valid_true), \n                                    modelling.pick_random(y_test_pred), \n                                    label0='truth (validation)', \n                                    label1='prediction (test set)').show()\n```\n\n### Confidently wrong predictions by `building_id`\n\n```\n%%time\nmiss_cols = [v for v in ['building_id', 'meter','timestamp'] if v not in to.valid.xs.columns]\ntmp = to.valid.xs.join(df.loc[:,miss_cols]) if len(miss_cols)>0 else to.valid.xs\nbwt = feature_testing.BoldlyWrongTimeseries(tmp, y_valid_true, y_valid_pred)\n```\n\n```\nbwt.run_boldly()\n```\n\n## Submission\n\n```\n%%time\nif do_test and do_submit:\n    y_test_pred_original = torch.exp(tensor(y_test_pred)) - 1\n\n    y_out = pd.DataFrame(cnr(y_test_pred_original),\n                         columns=['meter_reading'],\n                         index=df_test.index)\n    display(y_out.head())\n\n    assert len(y_out) == 41697600\n```\n\n```\n%%time\nif do_submit:\n    y_out.to_csv(data_path/'my_submission.csv')\n```\n\n```\n# message = ['random forest', '500 obs/bid', 'all features', f'nb score {nb_score:.4f}']\nmessage = ['lightgbm', '500 obs/bid', '100 rounds', '42 leaves', 'lr .5', f'nb score {nb_score:.4f}']\n# message = ['tabular_learner', '500 obs/bid', 'all features', f'layers {layers}, embed_p .1, ps [.1,.1,.1]', f'nb score {nb_score:.4f}']\nmessage = ' + '.join(message)\nmessage\n```\n\n```\nif do_test and do_submit:\n    print('Submitting...')\n    !kaggle competitions submit -c ashrae-energy-prediction -f '{data_path}/my_submission.csv' -m '{message}'\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eschmidt42/ashrae/tree/master/",
    "keywords": "fastai scikit-learn kaggle ashrae",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ashrae",
    "package_url": "https://pypi.org/project/ashrae/",
    "platform": "",
    "project_url": "https://pypi.org/project/ashrae/",
    "project_urls": {
      "Homepage": "https://github.com/eschmidt42/ashrae/tree/master/"
    },
    "release_url": "https://pypi.org/project/ashrae/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "This project contains inspection and pre-processing tools to build machine learning models for the ASHRAE - Great Energy Predictor III challenge on kaggle.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8729206,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "364dc9e2a0ba56ec1a428409cf54fea3c1917f13f313f399aa1b0c829e415f55",
          "md5": "4e9b82310e506c455b5d950b98ab3fde",
          "sha256": "e4ebb2aaee6085eafdc424a61c43b7aec60e7a3906e40b32727efe27da03271f"
        },
        "downloads": -1,
        "filename": "ashrae-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e9b82310e506c455b5d950b98ab3fde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23419,
        "upload_time": "2020-11-23T17:23:10",
        "upload_time_iso_8601": "2020-11-23T17:23:10.376171Z",
        "url": "https://files.pythonhosted.org/packages/36/4d/c9e2a0ba56ec1a428409cf54fea3c1917f13f313f399aa1b0c829e415f55/ashrae-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ea98d56e72368ec74643450e26177d74f73b6a25c7a9a9ee90ab4c9feb2a41b",
          "md5": "8ff20c79e37d956e1c3aea3a576f1f09",
          "sha256": "12dcea080807a7c27578e4adf32aceb57259461c6f975a0a60330d92284b07ff"
        },
        "downloads": -1,
        "filename": "ashrae-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ff20c79e37d956e1c3aea3a576f1f09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25336,
        "upload_time": "2020-11-23T17:23:11",
        "upload_time_iso_8601": "2020-11-23T17:23:11.751203Z",
        "url": "https://files.pythonhosted.org/packages/8e/a9/8d56e72368ec74643450e26177d74f73b6a25c7a9a9ee90ab4c9feb2a41b/ashrae-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "364dc9e2a0ba56ec1a428409cf54fea3c1917f13f313f399aa1b0c829e415f55",
        "md5": "4e9b82310e506c455b5d950b98ab3fde",
        "sha256": "e4ebb2aaee6085eafdc424a61c43b7aec60e7a3906e40b32727efe27da03271f"
      },
      "downloads": -1,
      "filename": "ashrae-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e9b82310e506c455b5d950b98ab3fde",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23419,
      "upload_time": "2020-11-23T17:23:10",
      "upload_time_iso_8601": "2020-11-23T17:23:10.376171Z",
      "url": "https://files.pythonhosted.org/packages/36/4d/c9e2a0ba56ec1a428409cf54fea3c1917f13f313f399aa1b0c829e415f55/ashrae-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ea98d56e72368ec74643450e26177d74f73b6a25c7a9a9ee90ab4c9feb2a41b",
        "md5": "8ff20c79e37d956e1c3aea3a576f1f09",
        "sha256": "12dcea080807a7c27578e4adf32aceb57259461c6f975a0a60330d92284b07ff"
      },
      "downloads": -1,
      "filename": "ashrae-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8ff20c79e37d956e1c3aea3a576f1f09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 25336,
      "upload_time": "2020-11-23T17:23:11",
      "upload_time_iso_8601": "2020-11-23T17:23:11.751203Z",
      "url": "https://files.pythonhosted.org/packages/8e/a9/8d56e72368ec74643450e26177d74f73b6a25c7a9a9ee90ab4c9feb2a41b/ashrae-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}