{
  "info": {
    "author": "mcmcgrath13",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# paraml (Param YAML)\n\n[![codecov](https://codecov.io/gh/marshall-lab/paraml/branch/main/graph/badge.svg?token=IPaq8iFzsM)](https://codecov.io/gh/marshall-lab/paraml) [![](https://github.com/marshall-lab/paraml/workflows/Unit%20Tests/badge.svg)](https://github.com/marshall-lab/paraml/actions) [![GitHub](https://img.shields.io/github/license/marshall-lab/paraml)](https://github.com/marshall-lab/paraml/blob/main/LICENSE) [![PyPI version](https://badge.fury.io/py/paraml.svg)](https://pypi.org/project/paraml/)\n\nparaml is a parameter definition language and parser - all in yaml.\n\n## Table of Contents\n\n*Note:* README internal links only work on [GitHub](https://github.com/marshall-lab/paraml)\n\n1. [Motivation](#motivation)\n2. [Getting Started](#getting-started)\n    - [Installation](#installation)\n    - [Running paraml](#running-paraml)\n3. [Parameter Definition](#parameter-definition)\n    - [Required Keys](#required-keys)\n    - [Types](#types)\n    - [Using Classes](#using-classes)\n\n## Motivation\nparaml is a spinoff from [TITAN](https://github.com/marshall-lab/TITAN), an agent based model.  We have many parameters in that model, many of which are not used in a given run. paraml addresses the following pain points we had:\n\n* Parameters often weren't formally defined/described anywhere - some had comments, some were hopefully named idiomatically. This caused issues onboarding new people to using the model.\n* Parameters were statically defined/hard coded, but often we wanted them to be dynamic.\n* Parameters needed to be filled out/defined by non-technical researchers - shouldn't need to know how to code to create a parameter file.\n* Parameters need to have specific validation (e.g. a probability should be between 0 and 1, only `a` or `b` are expected values for parameter `y`), this was typically a run time failure - sometimes silent, sometimes explosive.\n* If a user isn't using a feature of the model, they shouldn't have to worry about/carry around its parameters.\n* Reproducibility of the run is key - must be able to re-run the model with the same params.\n* We needed to be able to create common settings which described a specific world the model runs in and let users use those, but also override parameters as they needed for their run of the model.\n\nHow paraml addresses these:\n* Parameter definitions require defaults\n* Can add descriptions of parameters inline\n* A small type system allows validation of params, as well as flexibility to define interfaces for params\n* Parameter files only need to fill in what they want different from the defaults\n* Can save off the fully computed params, which can then be re-used at a later date\n* Can layer different parameter files, allowing more complex defaults and re-use of common scenarios\n\n## Getting Started\n\n### Installation\n\n```\npip install paraml\n```\n\n### Running paraml\n\nThe entrypoint for running paraml is `paraml.create_params`.  This takes the parameter definitions, parameter files, and some options and returns a dictionary of the validated and computed parameters.\n\n**Args:**\n  * `def_path`: A yaml file or directory of yaml files containing the parameter definitions (see [Parameter Definition](#parameter-definition)).\n  * `*param_paths`: The remaining args are interpreted as parameter files.  They will be merged in order (last merged value prevails).\n  * `out_path`: Optional, if passed, save the computed parameters as a yaml to this location.\n  * `error_on_unused`: Optional, if `True` throw an exception if there are parameters in `param_paths` that do not have a corresponding definition in the `def_path` definitions.\n\n**Returns:**\n * A dictionary representing the parsed parameters.\n\n\n**Example usage:**\n```python\nfrom paraml import create_params\n\ndef_path = \"my/params/dir\" # directory of the params definition files\nbase_params = \"base/params.yaml\" # file location of the first params\nsetting_param = \"settings/my_setting\" # directory of the second params files\nintervention_params = \"intervention/params\" # directory of the third params files\nout_path = \"./params.yml\" # location to save computed params to\n\nparams = create_params(\n  def_path,\n  base_params,\n  setting_params,\n  intervention_params,\n  out_path=out_path,\n  error_on_unused=True # if parameters are passed, but don't exist in the definition file, error\n)\n```\n\n\n## Parameter Definition\n\nThe parameter definition language (PDL) provides expressions for defining input types, creation of types for the target application, and simple validation of input values.  The PDL itself is YAML and can be defined either in one file or a directory of yaml files. There can be multiple root keys in the parameter definition to namespace parameters by topic, and parameter definitions can be deeply nested for further organization of the params.  Only the `classes` key at the root of the definitions has special meaning (see [Using Classes](#using-classes)).\n\n**An example params definition:**\n```yml\n# classes is a special parameter key that allows the params defined as sub-keys\n# to be used in definitions for other sections\nclasses:\n  animals:\n    type: definition\n    description: Animals included in model\n    fields:\n      goes:\n        type: any\n        description: What noise does the animal make?\n        default: oink\n      is_mammal:\n        type: boolean\n        description: Is this animal a mammal\n        default: false\n      friends_with:\n        type: keys\n        description: What animals does this animal befriend\n    default:\n      cat:\n        goes: meow\n        is_mammal: true\n        friends_with:\n          - cat\n          - dog\n      dog:\n        goes: woof\n        is_mammal: true\n        friends_with:\n          - dog\n          - turtle\n          - cat\n      turtle:\n        goes: gurgle\n        friends_with:\n          - dog\n          - turtle\n  locations:\n    type: array\n    description: Where do the animals live?\n    default:\n      - barn\n      - ocean\n    values:\n      - barn\n      - ocean\n      - sky\n      - woods\n\n# demographics is another root-level parameter, which facets off of the values in classes\n# then has parameter definitions for each of those combinations\ndemographics:\n  type: sub-dict\n  description: \"Parameters controlling population class level probabilities and behaviors\"\n  keys:\n    - animals\n    - locations\n  default:\n    num:\n      type: int\n      default: 0\n      description: Number of animals of this type at this location\n    prob_happy:\n      type: float\n      default: 1.0\n      description: Probability an animal is happy\n      min: 0.0\n      max: 1.0\n    flag: # parameter definitions can be nested in intermediate keys to group related items\n      color:\n        type: enum\n        default: blue\n        description: What's the color is the flag of this animal/location combo\n        values:\n          - blue\n          - indigo\n          - cyan\n      name:\n        type: any\n        default: animal land\n        description: What is the name of this animal/location combo's flag\n\n# neighbors is another root-level parameter\nneighbors:\n  type: definition\n  description: Definition of an edge (relationship) between two locations\n  fields:\n    location_1:\n      type: enum\n      default: barn\n      class: locations\n    location_2:\n      type: enum\n      default: sky\n      class: locations\n    distance:\n      type: float\n      default: 0\n      min: 0\n  default:\n    edge_default:\n      location_1: barn\n      location_2: sky\n      distance: 1000\n\n```\n\n**An example of parameters for the definition above**\n```yml\nclasses:\n  animals:\n    pig: # doesn't need a `goes` key as the default is oink and that is appropriate\n      is_mammal: true\n      friends_with:\n        - pig\n    fish: # fish don't need to specify `is_mammal` as false as that is the default\n      goes: glugglug\n      friends_with:\n        - fish\n    wolf:\n      goes: ooooooooo\n      is_mammal: true\n      friends_with:\n        - pig\n  locations:\n    - ocean\n    - woods\n    - barn\n\n# the calculated params will fill in the default values for combinations of\n# animals/colors/parameters that aren't specified below\ndemographics:\n  pig:\n    barn:\n      num: 20\n      flag:\n        color: cyan\n        name: piney porcines\n  wolf:\n    woods:\n      num: 1\n      prob_happy: 0.8\n      flag:\n        name: running solo\n  fish:\n    ocean:\n      num: 1000001\n      prob_happy: 0.4\n      flag:\n        color: indigo\n        name: cool school\n\n# we're defining a edges in a graph in this example, the names are labels for human readability only\nneighbors:\n  woodsy_barn:\n    location_1: woods\n    location_2: barn\n    distance: 1\n  woodsy_ocean:\n    location_1: woods\n    location_2: ocean\n    distance: 3\n  barn_ocean:\n    location_1: barn\n    location_2: ocean\n    distance: 4\n```\n\n\nParameters are defined as key value pairs (typically nested).  There are some reserved keys that allow for definition of a parameter item, but otherwise a key in the parameter definition is interpreted as an expected key in the parameters.\n\nThe reserved keys used for defining parameters are:\n* `type`\n* `default`\n* `description`\n* `min`\n* `max`\n* `values`\n* `fields`\n\nSpecifically, if the `default` key is present in a yaml object, then that object will be interpreted as a parameter definition.  The other keys are used in that definition\n\nFor example, in the below `type` is used as a parameter key, which is allowed (though perhaps not encouraged for readability reasons) as `default` is not a key at the same level of `type`.  The second usage of `type` is interpreted as the definition of `type` (the key) being an `int`.\n\n```yml\na:\n  type:\n    type: int\n    default: 0\n    description: the type of a\n```\n\n`classes` is also reserved as a root key (see [using classes](#using-classes) below)\n\n### Required Keys\n\nEvery parameter item must have the `type`, and `default` keys (`description` highly encouraged, but not required).\n\nSee [Types](#types) for more information on the types and how they interact with the other keys.\n\nThe `default` key should be a valid value given the rest of the definition.  The `default` key can include parameter definitions within it.  This is common with `sub-dict` param definitions.\n\nThe `description` is a free text field to provide context for the parameter item.  This can also be used to generate documentation (no automated support at this time - see [TITAN's params app](https://github.com/marshall-lab/titan-params-app) as an example).\n\n### Types\n\nThe `type` of a parameter definition dictates which other fields are required/used when parsing the definition.\n\nThe types supported by paraml are:\n* [`int`](#int)\n* [`float`](#float)\n* [`boolean`](#boolean)\n* [`array`](#array)\n* [`enum`](#enum)\n* [`any`](#any)\n* [`bin`](#bin)\n* [`sub-dict`](#sub-dict)\n* [`definition`](#definition)\n\n#### `int`\n\nThe value of the parameter is expected to be an integer.\n\nRequired keys:\n* None\n\nOptional keys:\n* `min` - the minimum value (inclusive) this parameter can take\n* `max` - the maximum value (inclusive) this parameter can take\n\nExample definition:\n```yml\nfav_num:\n  type: int\n  default: 12\n  description: a is your favorite 3-or-fewer-digit number\n  min: -999\n  max: 999\n```\n\nExample usage:\n```yml\nfav_num: 13\n```\n\n#### `float`\n\nThe value of the parameter is expected to be a floating point number\n\nRequired keys:\n* None\n\nOptional keys:\n* `min` - the minimum value (inclusive) this parameter can take\n* `max` - the maximum value (inclusive) this parameter can take\n\nExample definition:\n```yml\nheads_prob:\n  type: float\n  default: 0.5\n  description: the probability heads is flipped\n  min: 0.0\n  max: 1.0\n```\n\nExample usage:\n```yml\nheads_prob: 0.75\n```\n\n#### `boolean`\n\nThe value of the parameter is expected to be a true/false value\n\nRequired keys:\n* None\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nuse_feature:\n  type: boolean\n  description: whether or not to use this feature\n  default: false\n```\n\nExample usage:\n```yml\nuse_feature: true\n```\n\n#### `array`\n\nThe value of the parameter is expected to be an array of values selected from the defined list.\n\nRequired keys:\n* `values` - either a list of strings that the parameter can take, or the name of a class whose values can be used\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nlocations:\n  type: array\n  description: Where do the animals go?\n  default:\n    - barn\n    - ocean\n  values:\n    - barn\n    - ocean\n    - sky\n    - woods\n```\n\nExample usage:\n```yml\nlocations:\n  - sky\n  - ocean\n```\n\n#### `enum`\n\nThe value of the parameter is expected to be a single value selected from the defined list.\n\nRequired keys:\n* `values` - either a list of strings that the parameter can take, or the name of a class whose values can be used\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nclasses:\n  my_classes:\n    type: array\n    description: which class my params has\n    default:\n      - a\n      - b\n    values:\n      - a\n      - b\n      - c\n\naffected_class:\n  type: enum\n  default: a\n  description: which class is affected by this feature\n  values: my_classes\n```\n\nExample usage:\n```yml\nmy_classes:\n  - b\n  - c\n\naffected_class: c\n```\n\n#### `any`\n\nThe value of the parameter can take on any value and will not be validated.\n\nRequired keys:\n* None\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nname:\n  type: any\n  description: what is your name?\n  default: your name here\n```\n\nExample usage:\n```yml\nname: paraml\n```\n\n#### `bin`\n\nBinned (integer) keys with set value fields.\n\nRequired keys:\n* `fields` - parameter definitions for each required field in the binned items.  Because the sub-fields of a bin are required, no default can be provided.\n\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nbins:\n  type: bin\n  description: \"Binned probabilities of frequencies\"\n  fields:\n    prob:\n      type: float\n      min: 0.0\n      max: 1.0\n    min:\n      type: int\n      min: 0\n    max:\n      type: int\n      min: 0\n  default:\n    1:\n      prob: 0.585\n      min: 1\n      max: 6\n    2:\n      prob: 0.701\n      min: 7\n      max: 12\n    3:\n      prob: 0.822\n      min: 13\n      max: 24\n```\n\nExample usage:\n```yml\nbins:\n  1:\n    prob: 0.5\n    min: 0\n    max: 10\n  2:\n    prob: 0.9\n    min: 11\n    max: 20\n```\n\n#### `sub-dict`\n\nBuild a set of params for each key combination listed.  Requires use of `classes` root key.  The default should contain parameter definition items.  Can facet on up to two classes.\n\nRequired keys:\n* `keys` - which params under the `classes` root key should be sub-dicted off of\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nclasses:\n  my_classes:\n    type: array\n    description: which class my params has\n    default:\n      - a\n      - b\n    values:\n      - a\n      - b\n      - c\n\ndemographics:\n  type: sub-dict\n  description: parameters defining characteristics of each class\n  keys:\n    - my_classes\n  default:\n    num:\n      type: int\n      default: 0\n      description: number of agents in the class\n```\n\nExample usage:\n```yml\ndemographics:\n  a:\n    num: 10\n  b:\n    num: 20\n```\n\n#### `definition`\n\nDefine an item with the given interface.\n\nRequired keys:\n* `fields` - the fields defining the interface for each defined item.  Each field is a param definition item.\n\nOptional keys:\n* None\n\nExample definition:\n```yml\nanimals:\n  type: definition\n  description: Animals included in model\n  fields:\n    goes:\n      type: any\n      description: What noise does the animal make?\n      default: oink\n    is_mammal:\n      type: boolean\n      description: Is this animal a mammal\n      default: false\n    friends_with:\n      type: keys\n      desciption: What animals does this animal befriend\n  default:\n    cat:\n      goes: meow\n      is_mammal: true\n      friends_with:\n        - cat\n        - dog\n    dog:\n      goes: woof\n      is_mammal: true\n      friends_with:\n        - dog\n        - cat\n```\n\nExample usage:\n```yml\nanimals:\n  sheep:\n    goes: bah\n    is_mammal: true\n  pig:\n    is_mammal: true\n  fish:\n    goes: glugglug\n```\n\n### Using Classes\n\nThe `classes` key as a root key of the parameter definitions takes on special meaning.  The parameters chosen in this section can be used to determine acceptable values in other sections of the params (via `enum` and `array` types), or to determine what params need to be created (via `sub-dict` type).\n\nExample class as value:\n```yml\nclasses:\n  animals:\n    type: definition\n    description: Animals included in model\n    fields:\n      goes:\n        type: any\n        description: What noise does the animal make?\n        default: oink\n      is_mammal:\n        type: boolean\n        description: Is this animal a mammal\n        default: false\n    default:\n      cat:\n        goes: meow\n        is_mammal: true\n      sheep:\n        goes: baaaah\n        is_mammal: true\n  month:\n    type: definition\n    fields:\n      mean_temp:\n        type: float\n        description: average temperature in °F\n    default:\n      april:\n        mean_temp: 45.6\n\nshearing:\n  month:\n    type: enum\n    description: what season to shear animals\n    class: month # This enum will only allow a value from the \"month\" class\n    default: april\n  to_shear:\n    type: array\n    description: which animals need to be sheared\n    class: animal\n    default:\n      - sheep\n```\nExample usage of class as value:\n```yml\nclasses:\n  animals:\n    sheep:\n      goes: baaaah\n      is_mammal: true\n    cat:\n      goes: meow\n      is_mammal: true\n    llama:\n      goes: spits\n      is_mammal: true\n## we will only be using \"april,\" which is the default month, so no definition needed!\nshearing:\n  month: april\n  to_shear:\n    - sheep\n    - llama\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marshall-lab/paraml",
    "keywords": "yaml,params,parameters,config,validation",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paraml",
    "package_url": "https://pypi.org/project/paraml/",
    "platform": "",
    "project_url": "https://pypi.org/project/paraml/",
    "project_urls": {
      "Homepage": "https://github.com/marshall-lab/paraml",
      "Repository": "https://github.com/marshall-lab/paraml"
    },
    "release_url": "https://pypi.org/project/paraml/0.1.1/",
    "requires_dist": [
      "oyaml (>=1.0,<2.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "a parameter definition language and parser - all in yaml",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10132781,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "109a7530ec57928cdae46125088b2afd25d743faf013c00491007aed9f450dc3",
          "md5": "7182bb0a2ba4976b1cdf7551d9e73c44",
          "sha256": "c6cd4989d64d113a5961c78799fa17b980b5e4bd067ba4f18e4ce16fab0d049a"
        },
        "downloads": -1,
        "filename": "paraml-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7182bb0a2ba4976b1cdf7551d9e73c44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 33440,
        "upload_time": "2020-11-24T21:15:45",
        "upload_time_iso_8601": "2020-11-24T21:15:45.924558Z",
        "url": "https://files.pythonhosted.org/packages/10/9a/7530ec57928cdae46125088b2afd25d743faf013c00491007aed9f450dc3/paraml-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdf003dea9d77ec6503e684989ee78db52d691fad85448867c6d4cc4038dca89",
          "md5": "4ccea31fa90b2b6df7aa418ba1fab29b",
          "sha256": "c406c0f3992756b8f5030ded7211f21eef1cbfcd3872f0c316b64795aaa14401"
        },
        "downloads": -1,
        "filename": "paraml-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ccea31fa90b2b6df7aa418ba1fab29b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 26787,
        "upload_time": "2020-11-24T21:15:47",
        "upload_time_iso_8601": "2020-11-24T21:15:47.165360Z",
        "url": "https://files.pythonhosted.org/packages/bd/f0/03dea9d77ec6503e684989ee78db52d691fad85448867c6d4cc4038dca89/paraml-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3189aadff59f666d2235e1700da7de1423fbb1cef1078bba6670a8dc3113d1bd",
          "md5": "6a5bb3cd58ae1139fe96d4dede406fdd",
          "sha256": "ccbfff66c180028391f48c2eb6d3bd06062ab5021ae02d24187f54897db0e0f9"
        },
        "downloads": -1,
        "filename": "paraml-0.1.0.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a5bb3cd58ae1139fe96d4dede406fdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 33387,
        "upload_time": "2020-11-24T18:49:42",
        "upload_time_iso_8601": "2020-11-24T18:49:42.865618Z",
        "url": "https://files.pythonhosted.org/packages/31/89/aadff59f666d2235e1700da7de1423fbb1cef1078bba6670a8dc3113d1bd/paraml-0.1.0.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2c906918e68476417934b23b573b26cc5f2db25b799d92daa01a9971c418ffd",
          "md5": "780b729aebbda0df0e058f0a7b76f558",
          "sha256": "ea9dee4357b920cc8c9716713c495ccf85b4ab481c6928b0d5b90ded685c7cb6"
        },
        "downloads": -1,
        "filename": "paraml-0.1.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "780b729aebbda0df0e058f0a7b76f558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 26519,
        "upload_time": "2020-11-24T18:49:44",
        "upload_time_iso_8601": "2020-11-24T18:49:44.295938Z",
        "url": "https://files.pythonhosted.org/packages/f2/c9/06918e68476417934b23b573b26cc5f2db25b799d92daa01a9971c418ffd/paraml-0.1.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d076c30a45848515224becf7957632911d947620375495cfbd100f317568411",
          "md5": "b5d265f64015623d4265e07f97226568",
          "sha256": "b1cc915c8a9bdb14e6ea687eb32db68ade3730786be762522be5a88efc61d0a8"
        },
        "downloads": -1,
        "filename": "paraml-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5d265f64015623d4265e07f97226568",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 33723,
        "upload_time": "2021-04-21T20:25:38",
        "upload_time_iso_8601": "2021-04-21T20:25:38.503756Z",
        "url": "https://files.pythonhosted.org/packages/0d/07/6c30a45848515224becf7957632911d947620375495cfbd100f317568411/paraml-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d42a409e28ea6ddf0104902c965b665cbafdcd4a6f3c0251898c4a37dd073e18",
          "md5": "f163229dc6dd19c3811b7071db101cd1",
          "sha256": "4027d01467043cbb67560e75f6384ecfe2f21dfa61c3406a87dba680864e36e9"
        },
        "downloads": -1,
        "filename": "paraml-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f163229dc6dd19c3811b7071db101cd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 27572,
        "upload_time": "2021-04-21T20:25:41",
        "upload_time_iso_8601": "2021-04-21T20:25:41.259917Z",
        "url": "https://files.pythonhosted.org/packages/d4/2a/409e28ea6ddf0104902c965b665cbafdcd4a6f3c0251898c4a37dd073e18/paraml-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d076c30a45848515224becf7957632911d947620375495cfbd100f317568411",
        "md5": "b5d265f64015623d4265e07f97226568",
        "sha256": "b1cc915c8a9bdb14e6ea687eb32db68ade3730786be762522be5a88efc61d0a8"
      },
      "downloads": -1,
      "filename": "paraml-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5d265f64015623d4265e07f97226568",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 33723,
      "upload_time": "2021-04-21T20:25:38",
      "upload_time_iso_8601": "2021-04-21T20:25:38.503756Z",
      "url": "https://files.pythonhosted.org/packages/0d/07/6c30a45848515224becf7957632911d947620375495cfbd100f317568411/paraml-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d42a409e28ea6ddf0104902c965b665cbafdcd4a6f3c0251898c4a37dd073e18",
        "md5": "f163229dc6dd19c3811b7071db101cd1",
        "sha256": "4027d01467043cbb67560e75f6384ecfe2f21dfa61c3406a87dba680864e36e9"
      },
      "downloads": -1,
      "filename": "paraml-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f163229dc6dd19c3811b7071db101cd1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 27572,
      "upload_time": "2021-04-21T20:25:41",
      "upload_time_iso_8601": "2021-04-21T20:25:41.259917Z",
      "url": "https://files.pythonhosted.org/packages/d4/2a/409e28ea6ddf0104902c965b665cbafdcd4a6f3c0251898c4a37dd073e18/paraml-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}