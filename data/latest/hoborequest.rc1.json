{
  "info": {
    "author": "LF Murillo",
    "author_email": "lrosadom@nd.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# HOBO-request\n\nA Kubernetes-ready container application for integrating HOBOlink loggers with HSDS. This application \nwas developed in partnership with the HDF Group with NSF support for the UVA-ARC project (grant #2022639).\n\n## Getting started\n\nHOBO-request provides an interface to HOBOlink loggers via a public API that is provided by Onset.\nIt can be used with HSDS for the purposes of large-scale environmental data analysis, or as a stand-alone\ntool for the purposes of testing. It can also be easily extended to be used with different APIs and sensor\nnetworks.\n\nYou can install the HOBO-request package or git clone this repository. For installing the pip package,\njust create a virtual environmental and run:\n\n```bash\n$ python3 -m venv hobo-request\n$ source hobo-request/bin/activate\n$ pip install hoborequest\n```\n\nYou can also take the development path way and work directly with the source code.\n\nIn order to integrate HOBO-request with data loggers, a few libraries / modules need to be installed.\nYou can proceed by installing the dependencies described in `requirements.txt`.\n\n```bash\n$ python3 -m venv hobo-request \n$ source hobo-request/bin/activate\n$ pip install -r requirements.txt\n```\n\nHOBO-request is now ready to be used, but first it must be configured!\n\n## Configuration\n\nFirst, copy `conf/hobo-connect.conf-SAMPLE` to `conf/hobo-connect.conf`.\nThen, edit 'conf/hobo-connect.conf' and set the following parameters:\n\n* `user_id`: your Onset user ID\n* `client_id`: your Onset client ID\n* `client_secret`: API secret key obtained from Onset\n* `start_date_time`: for precise time slicing, the start time in UTC, format: 2012-01-01 23:00:00\n* `end_date_time`: same as above, the end time in UTC, format: 2021-01-12 11:00:00\n* `polling_interval_minutes`: if you want to set a regular polling interval, leave start & end time fields empty.\nAlternatively you can also set a start time, but leave end time empty\n\nPlease observe that timestamps are always assumed to be in UTC. For the purposes of data storage, it is more \nconvenient to avoid timezones and daylight-saving differences, and leave to the analyst to manipulate\ntimestamps as he/she/they see fit.\n\nIn addition to the configuration of your Onset credentials, you also need to set your HSDS parameters:\n\n* `hsds_filename`: your HDF data store name\n* `hsds_endpoint`: your HSDS endpoint\n\nPlease observe that you can also use HOBO-request locally without HSDS for testing purposes. In that case, you only\nneed to set `hsds_filename` to point to the h5 file in your local filesystem. \n \nFinally, you must set the repository where your logger and sensor metadata are registered. This is a crucial step\nbecause HOBO-request depends on this config to update your metadata attributes for you. You must set the following \nfields:\n\n* `meta_repo`: git repository that contains your deployment metadata files\n* `meta_local_dir`: local directory where you want to store the repo temporarily\n* `meta_root_path`: repository directory where the HDF root file metadata file is\n* `meta_loggers_dir`: repository directory where the loggers metadata files are\n* `meta_sensors_dir`: repository directory where the sensors metadata files are\n\nOnce this is done, we can move on to the generation of your data store.\n\n## Creating your HDF data store with metadata\n\nHOBO-request reads YAML files with metadata organized in three levels:\n\n* `HDF root metadata` (attributes)\n* `HOBO loggers` (attributes)\n* `HOBO sensors` (attributes)\n\nIt is necessary, therefore, to create YAML files following the scheme we describe in the `conf/` and \n`conf/sensors/templates` directories. For example:\n\n* `uva-arc.yaml`: provides an example of how to set root attributes in your HDF file\n* `loggers/`: provides examples for the configuration of HOBOLink loggers / stations\n* `sensors/templates`: provides examples for the configuration of HOBOLink sensors\n\nOnce you are done creating your YAML files, you can load them in your newly created HDF file.\nChange directory to `src/`, then run `hobo-config.py`:\n\nTo generate your HDF file with root attributes:\n\n```bash\n./hobo-config.py test.h5 ../conf/uva-arc.yaml\n```\n\nOr, if you are using the pip package, you can just run:\n\n```bash\n$ hoboconfig test.h5 ../conf/uva-arc.yaml\n```\n\nPlease note that you have to change the PATH for the YAML file in the command above.\nYou can find real examples for stations and sensors in [this repository.](https://gitlab.com/uva-arc/deployment-metadata)\n\nTo load your logger and sensor metadata, you can type:\n\n```bash\n./hobo-config.py test.h5 /tmp/deployment-metadata/alaska/loggers/*\n./hobo-config.py test.h5 /tmp/deployment-metadata/alaska/sensors/*\n```\n\nOr... if you are using the pip package `hoborequest`:\n\n```bash\n$ hoboconfig test.h5 /tmp/deployment-metadata/alaska/loggers/*\n$ hoboconfig test.h5 /tmp/deployment-metadata/alaska/sensors/*\n```\n\nPlease note that it is necessary to run this step only once when creating the HDF data store.\nAfter you load the HDF file onto HSDS, HOBO-request will automatically pull all the changes\nfrom the `git` repository containing your YAML files and load all the metadata information\nfor you. There is no need to use `hobo-config` manually again.\n\n## Running HOBO-request to consume sensor data\n\nNow that everything is in place, you have the choice of running HOBO-request locally for tests\nusing a regular HDF file (and h5py) or run the HDF data store on HSDS (with h5pyd). This is \ndone automagically for you, so you just have to point in your config file if you want to use\na regular file or interface with HSDS to feed data to your HDF data store.\n\nYou can start HOBO-request with a simple command:\n\n```bash\n$ ./hobo-connect.py\n\n```\n\nOr, if you are running the pip package:\n\n```bash\n$ hoboconnect\n```\n\nEt... voil√†! The application will return the following message as soon as it is done processing \nthe data:\n\n```bash\n[HOBO-connect]: data processing completed\n```\n\n## Generating a container for HOBO-request\n\nWe have provided scripts and deployment files to generate a container for HOBO-request, plus \ndocumentation on how to run HSDS on k3s (or microk8s) for local testing.\n\nYou can run the following commands to build your container and run it:\n\n```bash\n$ ./build.sh\n$ ./docker_run.sh\n```\n\nThe directory `k8s/` contains the deployment files and scripts for running HOBO-request on k8s or microk8s.\n\nMay the source be with you in your environmental studies!\n\n## Licensing\n\nSee LICENSE and AUTHORS files for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/uva-arc/hobo-request",
    "keywords": "environmental-monitoring HDF5 HSDS HOBOLink",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hoborequest",
    "package_url": "https://pypi.org/project/hoborequest/",
    "platform": null,
    "project_url": "https://pypi.org/project/hoborequest/",
    "project_urls": {
      "Homepage": "https://gitlab.com/uva-arc/hobo-request"
    },
    "release_url": "https://pypi.org/project/hoborequest/0.4/",
    "requires_dist": [
      "h5py",
      "h5pyd",
      "oauthlib",
      "aiofiles",
      "requests",
      "numpy",
      "cryptography",
      "numcodecs",
      "psutil",
      "pyjwt",
      "pytz",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "HOBOLink API client with HDF5/HSDS integration",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14501857,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b33b7940859e2ef7c05ff3382b55093cf7e472936d0944eef244e693780b3ae",
          "md5": "01af54b9bf1fe1efff85dc9814ad2f90",
          "sha256": "438e3d2090cccedad0af0ba27f445fa77c954108ba7f5f99a4cd159f0daf1bca"
        },
        "downloads": -1,
        "filename": "hoborequest-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01af54b9bf1fe1efff85dc9814ad2f90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41088,
        "upload_time": "2022-07-21T05:52:31",
        "upload_time_iso_8601": "2022-07-21T05:52:31.176888Z",
        "url": "https://files.pythonhosted.org/packages/3b/33/b7940859e2ef7c05ff3382b55093cf7e472936d0944eef244e693780b3ae/hoborequest-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab5b4b6837b90288d383581031a589b45d13347554d22cee9643c874f68c0675",
          "md5": "3e2628c0661672f251e5f2ac91f68304",
          "sha256": "d32ea50888cf37e53f7dcc4c50c4bf4ac2044af55d822ba2af98ba96aa6733a6"
        },
        "downloads": -1,
        "filename": "hoborequest-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3e2628c0661672f251e5f2ac91f68304",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35158,
        "upload_time": "2022-07-21T05:52:32",
        "upload_time_iso_8601": "2022-07-21T05:52:32.988668Z",
        "url": "https://files.pythonhosted.org/packages/ab/5b/4b6837b90288d383581031a589b45d13347554d22cee9643c874f68c0675/hoborequest-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b33b7940859e2ef7c05ff3382b55093cf7e472936d0944eef244e693780b3ae",
        "md5": "01af54b9bf1fe1efff85dc9814ad2f90",
        "sha256": "438e3d2090cccedad0af0ba27f445fa77c954108ba7f5f99a4cd159f0daf1bca"
      },
      "downloads": -1,
      "filename": "hoborequest-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01af54b9bf1fe1efff85dc9814ad2f90",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41088,
      "upload_time": "2022-07-21T05:52:31",
      "upload_time_iso_8601": "2022-07-21T05:52:31.176888Z",
      "url": "https://files.pythonhosted.org/packages/3b/33/b7940859e2ef7c05ff3382b55093cf7e472936d0944eef244e693780b3ae/hoborequest-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab5b4b6837b90288d383581031a589b45d13347554d22cee9643c874f68c0675",
        "md5": "3e2628c0661672f251e5f2ac91f68304",
        "sha256": "d32ea50888cf37e53f7dcc4c50c4bf4ac2044af55d822ba2af98ba96aa6733a6"
      },
      "downloads": -1,
      "filename": "hoborequest-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3e2628c0661672f251e5f2ac91f68304",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35158,
      "upload_time": "2022-07-21T05:52:32",
      "upload_time_iso_8601": "2022-07-21T05:52:32.988668Z",
      "url": "https://files.pythonhosted.org/packages/ab/5b/4b6837b90288d383581031a589b45d13347554d22cee9643c874f68c0675/hoborequest-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}