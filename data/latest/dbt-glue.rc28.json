{
  "info": {
    "author": "moshirm,menuetb,mamallem,segnina",
    "author_email": "moshirm@amazon.fr, menuetb@amazon.fr, mamallem@amazon.fr, segnina@amazon.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<p align=\"center\">\n  <img src=\"/etc/dbt-logo-full.svg\" alt=\"dbt logo\" width=\"500\"/>\n</p>\n\n**[dbt](https://www.getdbt.com/)** enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications.\ndbt is the T in ELT. Organize, cleanse, denormalize, filter, rename, and pre-aggregate the raw data in your warehouse so that it's ready for analysis.\n\n# dbt-glue\n\nThe `dbt-glue` package implements the [dbt adapter](https://docs.getdbt.com/docs/contributing/building-a-new-adapter) protocol for AWS Glue's Spark engine. \nIt supports running dbt against Spark, through the new Glue Interactive Sessions API.\n\nTo learn how to deploy a data pipeline in your modern data platform using the `dbt-glue` adapter, please read the following blog post: [Build your data pipeline in your AWS modern data platform using AWS Lake Formation, AWS Glue, and dbt Core](https://aws.amazon.com/blogs/big-data/build-your-data-pipeline-in-your-aws-modern-data-platform-using-aws-lake-formation-aws-glue-and-dbt-core/)\n\n## Installation\n\nThe package can be installed from PyPI with:\n\n```bash\n$ pip3 install dbt-glue\n```\nFor further (and more likely up-to-date) info, see the [README](https://github.com/aws-samples/dbt-glue#readme)\n\n\n## Connection Methods\n\n\n### Configuring your AWS profile for Glue Interactive Session\nThere are two IAM principals used with interactive sessions.\n- Client principal: The princpal (either user or role) calling the AWS APIs (Glue, Lake Formation, Interactive Sessions)\nfrom the local client. This is the principal configured in the AWS CLI and likely the same.\n- Service role: The IAM role that AWS Glue uses to execute your session. This is the same as AWS Glue\nETL.\n\nRead [this documentation](https://docs.aws.amazon.com/glue/latest/dg/glue-is-security.html) to configure these principals.\n\nYou will find bellow a least privileged policy to enjoy all features of **`dbt-glue`** adapter.\n\nPlease to update variables between **`<>`**, here are explanations of these arguments:\n\n|Args\t|Description\t| \n|---|---|\n|region|The region where your Glue database is stored |\n|AWS Account|The AWS account where you run your pipeline|\n|dbt output database|The database updated by dbt (this is the schema configured in the profile.yml of your dbt environment)|\n|dbt source database|All databases used as source|\n|dbt output bucket|The bucket name where the data will be generate dbt (the location configured in the profile.yml of your dbt environment)|\n|dbt source bucket|The bucket name of source databases (if they are not managed by Lake Formation)|\n\n```yaml\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Read_and_write_databases\",\n            \"Action\": [\n                \"glue:SearchTables\",\n                \"glue:BatchCreatePartition\",\n                \"glue:CreatePartitionIndex\",\n                \"glue:DeleteDatabase\",\n                \"glue:GetTableVersions\",\n                \"glue:GetPartitions\",\n                \"glue:DeleteTableVersion\",\n                \"glue:UpdateTable\",\n                \"glue:DeleteTable\",\n                \"glue:DeletePartitionIndex\",\n                \"glue:GetTableVersion\",\n                \"glue:UpdateColumnStatisticsForTable\",\n                \"glue:CreatePartition\",\n                \"glue:UpdateDatabase\",\n                \"glue:CreateTable\",\n                \"glue:GetTables\",\n                \"glue:GetDatabases\",\n                \"glue:GetTable\",\n                \"glue:GetDatabase\",\n                \"glue:GetPartition\",\n                \"glue:UpdateColumnStatisticsForPartition\",\n                \"glue:CreateDatabase\",\n                \"glue:BatchDeleteTableVersion\",\n                \"glue:BatchDeleteTable\",\n                \"glue:DeletePartition\",\n                \"glue:GetUserDefinedFunctions\",\n                \"lakeformation:ListResources\",\n                \"lakeformation:BatchGrantPermissions\",\n                \"lakeformation:ListPermissions\"\n            ],\n            \"Resource\": [\n                \"arn:aws:glue:<region>:<AWS Account>:catalog\",\n                \"arn:aws:glue:<region>:<AWS Account>:table/<dbt output database>/*\",\n                \"arn:aws:glue:<region>:<AWS Account>:database/<dbt output database>\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"Read_only_databases\",\n            \"Action\": [\n                \"glue:SearchTables\",\n                \"glue:GetTableVersions\",\n                \"glue:GetPartitions\",\n                \"glue:GetTableVersion\",\n                \"glue:GetTables\",\n                \"glue:GetDatabases\",\n                \"glue:GetTable\",\n                \"glue:GetDatabase\",\n                \"glue:GetPartition\",\n                \"lakeformation:ListResources\",\n                \"lakeformation:ListPermissions\"\n            ],\n            \"Resource\": [\n                \"arn:aws:glue:<region>:<AWS Account>:table/<dbt source database>/*\",\n                \"arn:aws:glue:<region>:<AWS Account>:database/<dbt source database>\",\n                \"arn:aws:glue:<region>:<AWS Account>:database/default\",\n                \"arn:aws:glue:<region>:<AWS Account>:database/global_temp\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"Storage_all_buckets\",\n            \"Action\": [\n                \"s3:GetBucketLocation\",\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<dbt output bucket>\",\n                \"arn:aws:s3:::<dbt source bucket>\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"Read_and_write_buckets\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\",\n                \"s3:GetObject\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<dbt output bucket>\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"Read_only_buckets\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<dbt source bucket>\"\n            ],\n            \"Effect\": \"Allow\"\n        }\n    ]\n}\n```\n\n### Configuration of the local environment\n\nBecause **`dbt`** and **`dbt-glue`** adapter are compatible with Python versions 3.7, 3.8, and 3.9, check the version of Python:\n\n```bash\n$ python3 --version\n```\n\nConfigure a Python virtual environment to isolate package version and code dependencies:\n\n```bash\n$ sudo yum install git\n$ python3 -m venv dbt_venv\n$ source dbt_venv/bin/activate\n$ python3 -m pip install --upgrade pip\n```\n\nConfigure the last version of AWS CLI\n\n```bash\n$ curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n$ unzip awscliv2.zip\n$ sudo ./aws/install\n```\n\nInstall boto3 package\n\n```bash\n$ sudo yum install gcc krb5-devel.x86_64 python3-devel.x86_64 -y\n$ pip3 install â€”upgrade boto3\n```\n\nInstall the package:\n\n```bash\n$ pip3 install dbt-glue\n```\n\n### Example config\n\n```yml\ntype: glue\nquery-comment: This is a glue dbt example\nrole_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\nregion: us-east-1\nworkers: 2\nworker_type: G.1X\nidle_timeout: 10\nschema: \"dbt_demo\"\nsession_provisioning_timeout_in_seconds: 120\nlocation: \"s3://dbt_demo_bucket/dbt_demo_data\"\n```\n\nThe table below describes all the options.\n\n| Option\t                                 | Description\t                                                                                                                                                                                                                                                                                      | Mandatory |\n|-----------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---|\n| project_name\t                           | The dbt project name. This must be the same as the one configured in the dbt project.\t                                                                                                                                                                                                            |yes|\n| type\t                                   | The driver to use.\t                                                                                                                                                                                                                                                                               |yes|\n| query-comment\t                          | A string to inject as a comment in each query that dbt runs. \t                                                                                                                                                                                                                                    |no|\n| role_arn\t                               | The ARN of the glue interactive session IAM role.\t                                                                                                                                                                                                                                                |yes|\n| region\t                                 | The AWS Region were you run the data pipeline.\t                                                                                                                                                                                                                                                   |yes|\n| workers\t                                | The number of workers of a defined workerType that are allocated when a job runs.\t                                                                                                                                                                                                                |yes|\n| worker_type\t                            | The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.\t                                                                                                                                                                                     |yes|\n| schema\t                                 | The schema used to organize data stored in Amazon S3.Additionally, is the database in AWS Lake Formation that stores metadata tables in the Data Catalog.\t                                                                                                                                        |yes|\n| session_provisioning_timeout_in_seconds | The timeout in seconds for AWS Glue interactive session provisioning.\t                                                                                                                                                                                                                            |yes|\n| location\t                               | The Amazon S3 location of your target data.\t                                                                                                                                                                                                                                                      |yes|\n| query_timeout_in_seconds\t               | The timeout in seconds for a signle query. Default is 300                                                                                                                                                                                                                                         |no|\n| idle_timeout\t                           | The AWS Glue session idle timeout in minutes. (The session stops after being idle for the specified amount of time)\t                                                                                                                                                                              |no|\n| glue_version\t                           | The version of AWS Glue for this session to use. Currently, the only valid options are 2.0 and 3.0. The default value is 3.0.\t                                                                                                                                                                    |no|\n| security_configuration\t                 | The security configuration to use with this session.\t                                                                                                                                                                                                                                             |no|\n| connections\t                            | A comma-separated list of connections to use in the session.\t                                                                                                                                                                                                                                     |no|\n| conf\t                                   | Specific configuration used at the startup of the Glue Interactive Session (arg --conf)\t                                                                                                                                                                                                          |no|\n| extra_py_files\t                         | Extra python Libs that can be used by the interactive session.                                                                                                                                                                                                                                    |no|\n| delta_athena_prefix\t                    | A prefix used to create Athena compatible tables for Delta tables\t(if not specified, then no Athena compatible table will be created)                                                                                                                                                             |no|\n| tags\t                                   | The map of key value pairs (tags) belonging to the session. Ex: `KeyName1=Value1,KeyName2=Value2`                                                                                                                                                                                                 |no|\n| seed_format\t                            | By default `parquet`, can be Spark format compatible like `csv` or `json`                                                                                                                                                                                                                         |no|\n| seed_mode\t                              | By default `overwrite`, the seed data will be overwritten, you can set it to `append` if you just want to add new data in your dataset                                                                                                                                                            |no|\n| default_arguments\t                      | The map of key value pairs parameters belonging to the session. More information on [Job parameters used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html). Ex: `--enable-continuous-cloudwatch-log=true,--enable-continuous-log-filter=true` |no|\n\n## Configs\n\n### Configuring tables\n\nWhen materializing a model as `table`, you may include several optional configs that are specific to the dbt-spark plugin, in addition to the standard [model configs](model-configs).\n\n| Option  | Description                                        | Required?               | Example                  |\n|---------|----------------------------------------------------|-------------------------|--------------------------|\n| file_format | The file format to use when creating tables (`parquet`, `csv`, `json`, `text`, `jdbc` or `orc`). | Optional | `parquet`|\n| partition_by  | Partition the created table by the specified columns. A directory is created for each partition. | Optional                | `date_day`              |\n| clustered_by  | Each partition in the created table will be split into a fixed number of buckets by the specified columns. | Optional               | `country_code`              |\n| buckets  | The number of buckets to create while clustering | Required if `clustered_by` is specified                | `8`              |\n| custom_location  | By default, the adapter will store your data in the following path: `location path`/`schema`/`table`. If you don't want to follow that default behaviour, you can use this parameter to set your own custom location on S3 | No | `s3://mycustombucket/mycustompath`              |\n| hudi_options | When using file_format `hudi`, gives the ability to overwrite any of the default configuration options. | Optional | `{'hoodie.schema.on.read.enable': 'true'}` |\n## Incremental models\n\ndbt seeks to offer useful and intuitive modeling abstractions by means of its built-in configurations and materializations.\n\nFor that reason, the dbt-glue plugin leans heavily on the [`incremental_strategy` config](configuring-incremental-models#about-incremental_strategy). This config tells the incremental materialization how to build models in runs beyond their first. It can be set to one of three values:\n - **`append`** (default): Insert new records without updating or overwriting any existing data.\n - **`insert_overwrite`**: If `partition_by` is specified, overwrite partitions in the table with new data. If no `partition_by` is specified, overwrite the entire table with new data.\n - **`merge`** (Apache Hudi and Apache Iceberg only): Match records based on a `unique_key`; update old records, insert new ones. (If no `unique_key` is specified, all new data is inserted, similar to `append`.)\n \nEach of these strategies has its pros and cons, which we'll discuss below. As with any model config, `incremental_strategy` may be specified in `dbt_project.yml` or within a model file's `config()` block.\n\n**Notes:**\nThe default strategy is **`insert_overwrite`**\n\n### The `append` strategy\n\nFollowing the `append` strategy, dbt will perform an `insert into` statement with all new data. The appeal of this strategy is that it is straightforward and functional across all platforms, file types, connection methods, and Apache Spark versions. However, this strategy _cannot_ update, overwrite, or delete existing data, so it is likely to insert duplicate records for many data sources.\n\n#### Source code\n```sql\n{{ config(\n    materialized='incremental',\n    incremental_strategy='append',\n) }}\n\n--  All rows returned by this query will be appended to the existing table\n\nselect * from {{ ref('events') }}\n{% if is_incremental() %}\n  where event_ts > (select max(event_ts) from {{ this }})\n{% endif %}\n```\n#### Run Code\n```sql\ncreate temporary view spark_incremental__dbt_tmp as\n\n    select * from analytics.events\n\n    where event_ts >= (select max(event_ts) from {{ this }})\n\n;\n\ninsert into table analytics.spark_incremental\n    select `date_day`, `users` from spark_incremental__dbt_tmp\n```\n\n### The `insert_overwrite` strategy\n\nThis strategy is most effective when specified alongside a `partition_by` clause in your model config. dbt will run an [atomic `insert overwrite` statement](https://spark.apache.org/docs/latest/sql-ref-syntax-dml-insert-overwrite-table.html) that dynamically replaces all partitions included in your query. Be sure to re-select _all_ of the relevant data for a partition when using this incremental strategy.\n\nIf no `partition_by` is specified, then the `insert_overwrite` strategy will atomically replace all contents of the table, overriding all existing data with only the new records. The column schema of the table remains the same, however. This can be desirable in some limited circumstances, since it minimizes downtime while the table contents are overwritten. The operation is comparable to running `truncate` + `insert` on other databases. For atomic replacement of Delta-formatted tables, use the `table` materialization (which runs `create or replace`) instead.\n\n#### Source Code\n```sql\n{{ config(\n    materialized='incremental',\n    partition_by=['date_day'],\n    file_format='parquet'\n) }}\n\n/*\n  Every partition returned by this query will be overwritten\n  when this model runs\n*/\n\nwith new_events as (\n\n    select * from {{ ref('events') }}\n\n    {% if is_incremental() %}\n    where date_day >= date_add(current_date, -1)\n    {% endif %}\n\n)\n\nselect\n    date_day,\n    count(*) as users\n\nfrom events\ngroup by 1\n```\n\n#### Run Code\n\n```sql\ncreate temporary view spark_incremental__dbt_tmp as\n\n    with new_events as (\n\n        select * from analytics.events\n\n\n        where date_day >= date_add(current_date, -1)\n\n\n    )\n\n    select\n        date_day,\n        count(*) as users\n\n    from events\n    group by 1\n\n;\n\ninsert overwrite table analytics.spark_incremental\n    partition (date_day)\n    select `date_day`, `users` from spark_incremental__dbt_tmp\n```\n\nSpecifying `insert_overwrite` as the incremental strategy is optional, since it's the default strategy used when none is specified.\n\n### The `merge` strategy\n\n**Compatibility:**\n- Hudi : OK\n- Delta Lake : OK\n- Iceberg : OK\n- Lake Formation Governed Tables : On going\n\nThe simpliest way to work with theses advanced features is to install theses using [Glue connectors](https://docs.aws.amazon.com/glue/latest/ug/connectors-chapter.html).\n\nWhen using a connector be sure that your IAM role has these policies:\n```\n{\n    \"Sid\": \"access_to_connections\",\n    \"Action\": [\n        \"glue:GetConnection\",\n        \"glue:GetConnections\"\n    ],\n    \"Resource\": [\n        \"arn:aws:glue:<region>:<AWS Account>:catalog\",\n        \"arn:aws:glue:<region>:<AWS Account>:connection/*\"\n    ],\n    \"Effect\": \"Allow\"\n}\n```\nand that the managed policy `AmazonEC2ContainerRegistryReadOnly` is attached. \nBe sure that you follow the getting started instructions [here](https://docs.aws.amazon.com/glue/latest/ug/setting-up.html#getting-started-min-privs-connectors).\n\n\nThis [blog post](https://aws.amazon.com/blogs/big-data/part-1-integrate-apache-hudi-delta-lake-apache-iceberg-datasets-at-scale-aws-glue-studio-notebook/) also explain how to setup and works with Glue Connectors\n\n#### Hudi\n\n**Usage notes:** The `merge` with Hudi incremental strategy requires:\n- To add `file_format: hudi` in your table configuration\n- To add a connections in your profile : `connections: name_of_your_hudi_connector`\n- To add Kryo serializer in your Interactive Session Config (in your profile):  `conf: \"spark.serializer=org.apache.spark.serializer.KryoSerializer\"`\n\ndbt will run an [atomic `merge` statement](https://hudi.apache.org/docs/writing_data#spark-datasource-writer) which looks nearly identical to the default merge behavior on Snowflake and BigQuery. If a `unique_key` is specified (recommended), dbt will update old records with values from new records that match on the key column. If a `unique_key` is not specified, dbt will forgo match criteria and simply insert all new records (similar to `append` strategy).\n\n#### Profile config example\n```yaml\ntest_project:\n  target: dev\n  outputs:\n    dev:\n      type: glue\n      query-comment: my comment\n      role_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n      region: eu-west-1\n      glue_version: \"3.0\"\n      workers: 2\n      worker_type: G.1X\n      schema: \"dbt_test_project\"\n      session_provisionning_timeout_in_seconds: 120\n      location: \"s3://aws-dbt-glue-datalake-1234567890-eu-west-1/\"\n      connections: name_of_your_hudi_connector\n      conf: \"spark.serializer=org.apache.spark.serializer.KryoSerializer\"\n```\n\n#### Source Code example\n```sql\n{{ config(\n    materialized='incremental',\n    incremental_strategy='merge',\n    unique_key='user_id',\n    file_format='hudi',\n    hudi_options={\n        'hoodie.datasource.write.precombine.field': 'eventtime',\n    }\n) }}\n\nwith new_events as (\n\n    select * from {{ ref('events') }}\n\n    {% if is_incremental() %}\n    where date_day >= date_add(current_date, -1)\n    {% endif %}\n\n)\n\nselect\n    user_id,\n    max(date_day) as last_seen\n\nfrom events\ngroup by 1\n```\n\n#### Delta\n\nYou can also use Delta Lake to be able to use merge feature on tables.\n\n**Usage notes:** The `merge` with Delta incremental strategy requires:\n- To add `file_format: delta` in your table configuration\n- To add a connections in your profile : `connections: name_of_your_delta_connector`\n- To add the following config in your Interactive Session Config (in your profile):  `conf: \"spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension --conf spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog`\n\n**Athena:** Athena is not compatible by default with delta tables, but you can configure the adapter to create Athena tables on top of your delta table. To do so, you need to configure the two following options in your profile:\n- `extra_py_files: \"/tmp/delta-core_2.12-1.0.0.jar\"`\n- `delta_athena_prefix: \"the_prefix_of_your_choice\"`\n- If your table is partitioned, then the add of new partition is not automatic, you need to perform an `MSCK REPAIR TABLE your_delta_table` after each new partition adding\n\n#### Profile config example\n```yaml\ntest_project:\n  target: dev\n  outputs:\n    dev:\n      type: glue\n      query-comment: my comment\n      role_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n      region: eu-west-1\n      glue_version: \"3.0\"\n      workers: 2\n      worker_type: G.1X\n      schema: \"dbt_test_project\"\n      session_provisionning_timeout_in_seconds: 120\n      location: \"s3://aws-dbt-glue-datalake-1234567890-eu-west-1/\"\n      connections: name_of_your_delta_connector\n      conf: \"spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension --conf spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog\"\n      extra_py_files: \"/tmp/delta-core_2.12-1.0.0.jar\"\n      delta_athena_prefix: \"delta\"\n```\n\n#### Source Code example\n```sql\n{{ config(\n    materialized='incremental',\n    incremental_strategy='merge',\n    unique_key='user_id',\n    partition_by=['dt'],\n    file_format='delta'\n) }}\n\nwith new_events as (\n\n    select * from {{ ref('events') }}\n\n    {% if is_incremental() %}\n    where date_day >= date_add(current_date, -1)\n    {% endif %}\n\n)\n\nselect\n    user_id,\n    max(date_day) as last_seen,\n    current_date() as dt\n\nfrom events\ngroup by 1\n```\n\n#### Iceberg\n\n**Usage notes:** The `merge` with Iceberg incremental strategy requires:\n- To attach the AmazonEC2ContainerRegistryReadOnly Manged policy to your execution role :\n- To add the following policy to your execution role to enable commit locking in a dynamodb table (more info [here](https://iceberg.apache.org/docs/latest/aws/#dynamodb-lock-manager)). Note that the DynamoDB table specified in the ressource field of this policy should be the one that is mentionned in your dbt profiles (`--conf spark.sql.catalog.glue_catalog.lock.table=myGlueLockTable`). By default, this table is named `myGlueLockTable` and is created automatically (with On-Demand Pricing) when running a dbt-glue model with Incremental Materialization and Iceberg file format. If you want to name the table differently or to create your own table without letting Glue do it on your behalf, please provide the `iceberg_glue_commit_lock_table` parameter with your table name (eg. `MyDynamoDbTable`) in your dbt profile.\n```yaml\niceberg_glue_commit_lock_table: \"MyDynamoDbTable\"\n```\n\nMake sure you update your conf with `--conf spark.sql.catalog.glue_catalog.lock.table=<YourDynamoDBLockTableName>` and, you change the below iam permission with your correct table name.\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"CommitLockTable\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:CreateTable\",\n                \"dynamodb:BatchGetItem\",\n                \"dynamodb:BatchWriteItem\",\n                \"dynamodb:ConditionCheckItem\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:GetItem\",\n                \"dynamodb:Scan\",\n                \"dynamodb:Query\",\n                \"dynamodb:UpdateItem\"\n            ],\n            \"Resource\": \"arn:aws:dynamodb:<AWS_REGION>:<AWS_ACCOUNT_ID>:table/myGlueLockTable\"\n        }\n    ]\n}\n```\n- To add `file_format: Iceberg` in your table configuration\n- To add a connections in your profile : `connections: name_of_your_iceberg_connector` (The adapter is compatible with the Iceberg Connector from AWS Marketplace with Glue 3.0 as Fulfillment option and 0.12.0-2 (Feb 14, 2022) as Software version)\n- To add the following config in your Interactive Session Config (in your profile):  \n```--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \n    --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \n    --conf spark.sql.warehouse=s3://<your-bucket-name>\n    --conf spark.sql.catalog.glue_catalog=org.apache.iceberg.spark.SparkCatalog \n    --conf spark.sql.catalog.glue_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \n    --conf spark.sql.catalog.glue_catalog.io-impl=org.apache.iceberg.aws.s3.S3FileIO \n    --conf spark.sql.catalog.glue_catalog.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager \n    --conf spark.sql.catalog.glue_catalog.lock.table=myGlueLockTable  \n    --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions\n```\n\ndbt will run an [atomic `merge` statement](https://iceberg.apache.org/docs/latest/spark-writes/) which looks nearly identical to the default merge behavior on Snowflake and BigQuery. You need to provide a `unique_key` to perform merge operation otherwise it will fail. This key is to provide in a Python list format and can contains multiple column name to create a composite unique_key. \n\n##### Notes\n- When using a custom_location in Iceberg, avoid to use final trailing slash. Adding a final trailing slash lead to an un-proper handling of the location, and issues when reading the data from query engines like Trino. The issue should be fixed for Iceberg version > 0.13. Related Github issue can be find [here](https://github.com/apache/iceberg/issues/4582).\n- Iceberg also supports `insert_overwrite` and `append` strategies. \n- The `warehouse` conf must be provided, but it's overwritten by the adapter `location` in your profile or `custom_location` in model configuration.\n- By default, this materialization has `iceberg_expire_snapshots` set to 'True', if you need to have historical auditable changes, set: `iceberg_expire_snapshots='False'`.\n- Currently, due to some dbt internal, the iceberg catalog used internally when running glue interactive sessions with dbt-glue has a hardcoded name `glue_catalog`. This name is an alias pointing to the AWS Glue Catalog but is specific to each session. If you want to interact with your data in another session without using dbt-glue (from a Glue Studio notebook, for example), you can configure another alias (ie. another name for the Iceberg Catalog). To illustrate this concept, you can set in your configuration file : \n```\n--conf spark.sql.catalog.RandomCatalogName=org.apache.iceberg.spark.SparkCatalog\n```\nAnd then run in an AWS Glue Studio Notebook a session with the following config: \n```\n--conf spark.sql.catalog.AnotherRandomCatalogName=org.apache.iceberg.spark.SparkCatalog\n```\nIn both cases, the underlying catalog would be the AWS Glue Catalog, unique in your AWS Account and Region, and you would be able to work with the exact same data. Also make sure that if you change the name of the Glue Catalog Alias, you change it in all the other `--conf` where it's used: \n```\n --conf spark.sql.catalog.RandomCatalogName=org.apache.iceberg.spark.SparkCatalog \n --conf spark.sql.catalog.RandomCatalogName.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \n ...\n --conf spark.sql.catalog.RandomCatalogName.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager\n```\n- A full reference to `table_properties` can be found [here](https://iceberg.apache.org/docs/latest/configuration/).\n- Iceberg Tables are natively supported by Athena. Therefore, you can query tables created and operated with dbt-glue adapter from Athena.\n- Incremental Materialization with Iceberg file format supports dbt snapshot. You are able to run a dbt snapshot command that queries an Iceberg Table and create a dbt fashioned snapshot of it. \n\n#### Profile config example\n```yaml\ntest_project:\n  target: dev\n  outputs:\n    dev:\n      type: glue\n      query-comment: my comment\n      role_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n      region: eu-west-1\n      glue_version: \"3.0\"\n      workers: 2\n      worker_type: G.1X\n      schema: \"dbt_test_project\"\n      session_provisionning_timeout_in_seconds: 120\n      location: \"s3://aws-dbt-glue-datalake-1234567890-eu-west-1/\"\n      connections: name_of_your_iceberg_connector\n      conf: --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions --conf spark.serializer=org.apache.spark.serializer.KryoSerializer --conf spark.sql.warehouse=s3://aws-dbt-glue-datalake-1234567890-eu-west-1/dbt_test_project --conf spark.sql.catalog.glue_catalog=org.apache.iceberg.spark.SparkCatalog --conf spark.sql.catalog.glue_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog --conf spark.sql.catalog.glue_catalog.io-impl=org.apache.iceberg.aws.s3.S3FileIO --conf spark.sql.catalog.glue_catalog.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager --conf spark.sql.catalog.glue_catalog.lock.table=myGlueLockTable  --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \n```\n\n#### Source Code example\n```sql\n{{ config(\n    materialized='incremental',\n    incremental_strategy='merge',\n    unique_key=['user_id'],\n    file_format='iceberg',\n    iceberg_expire_snapshots='False', \n    partition_by=['status']\n    table_properties={'write.target-file-size-bytes': '268435456'}\n) }}\n\nwith new_events as (\n\n    select * from {{ ref('events') }}\n\n    {% if is_incremental() %}\n    where date_day >= date_add(current_date, -1)\n    {% endif %}\n\n)\n\nselect\n    user_id,\n    max(date_day) as last_seen\n\nfrom events\ngroup by 1\n```\n#### Iceberg Snapshot source code example\n```sql\n\n{% snapshot demosnapshot %}\n\n{{\n    config(\n        strategy='timestamp',\n        target_schema='jaffle_db',\n        updated_at='dt',\n        file_format='iceberg'\n) }}\n\nselect * from {{ ref('customers') }}\n\n{% endsnapshot %}\n\n```\n\n## Monitoring your Glue Interactive Session\n\nMonitoring is an important part of maintaining the reliability, availability,\nand performance of AWS Glue and your other AWS solutions. AWS provides monitoring\ntools that you can use to watch AWS Glue, identify the required number of workers\nrequired for your Glue Interactive Session, report when something is wrong and\ntake action automatically when appropriate. AWS Glue provides Spark UI,\nand CloudWatch logs and metrics for monitoring your AWS Glue jobs.\nMore information on: [Monitoring AWS Glue Spark jobs](https://docs.aws.amazon.com/glue/latest/dg/monitor-spark.html)\n\n**Usage notes:** Monitoring requires:\n- To add the following IAM policy to your IAM role:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"CloudwatchMetrics\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"cloudwatch:PutMetricData\",\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"cloudwatch:namespace\": \"Glue\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"CloudwatchLogs\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"logs:CreateLogStream\",\n                \"logs:CreateLogGroup\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:*:*:/aws-glue/*\",\n                \"arn:aws:s3:::bucket-to-write-sparkui-logs/*\"\n            ]\n        }\n    ]\n}\n```\n\n- To add monitoring parameters in your Interactive Session Config (in your profile).\nMore information on [Job parameters used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html)\n\n#### Profile config example\n```yaml\ntest_project:\n  target: dev\n  outputs:\n    dev:\n      type: glue\n      query-comment: my comment\n      role_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n      region: eu-west-1\n      glue_version: \"3.0\"\n      workers: 2\n      worker_type: G.1X\n      schema: \"dbt_test_project\"\n      session_provisionning_timeout_in_seconds: 120\n      location: \"s3://aws-dbt-glue-datalake-1234567890-eu-west-1/\"\n      default_arguments: \"--enable-metrics=true, --enable-continuous-cloudwatch-log=true, --enable-continuous-log-filter=true, --enable-spark-ui=true, --spark-event-logs-path=s3://bucket-to-write-sparkui-logs/dbt/\"\n```\n\nIf you want to use the Spark UI, you can launch the Spark history server using a\nAWS CloudFormation template that hosts the server on an EC2 instance,\nor launch locally using Docker. More information on [Launching the Spark history server](https://docs.aws.amazon.com/glue/latest/dg/monitor-spark-ui-history.html#monitor-spark-ui-history-local)\n\n## Enabling AWS Glue Auto Scaling\nAuto Scaling is available since AWS Glue version 3.0 or later. More information\non the following AWS blog post: [\"Introducing AWS Glue Auto Scaling: Automatically resize serverless computing resources for lower cost with optimized Apache Spark\"](https://aws.amazon.com/blogs/big-data/introducing-aws-glue-auto-scaling-automatically-resize-serverless-computing-resources-for-lower-cost-with-optimized-apache-spark/)\n\nWith Auto Scaling enabled, you will get the following benefits:\n\n* AWS Glue automatically adds and removes workers from the cluster depending on the parallelism at each stage or microbatch of the job run.\n\n* It removes the need for you to experiment and decide on the number of workers to assign for your AWS Glue Interactive sessions.\n\n* Once you choose the maximum number of workers, AWS Glue will choose the right size resources for the workload.\n\n* You can see how the size of the cluster changes during the Glue Interactive sessions run by looking at CloudWatch metrics.\nMore information on [Monitoring your Glue Interactive Session](#Monitoring-your-Glue-Interactive-Session).\n\n**Usage notes:** AWS Glue Auto Scaling requires:\n- To set your AWS Glue version 3.0 or later.\n- To set the maximum number of workers (if Auto Scaling is enabled, the `workers`\nparameter sets the maximum number of workers)\n- To set the `--enable-auto-scaling=true` parameter on your Glue Interactive Session Config (in your profile).\nMore information on [Job parameters used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html)\n\n#### Profile config example\n```yaml\ntest_project:\n  target: dev\n  outputs:\n    dev:\n      type: glue\n      query-comment: my comment\n      role_arn: arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n      region: eu-west-1\n      glue_version: \"3.0\"\n      workers: 2\n      worker_type: G.1X\n      schema: \"dbt_test_project\"\n      session_provisionning_timeout_in_seconds: 120\n      location: \"s3://aws-dbt-glue-datalake-1234567890-eu-west-1/\"\n      default_arguments: \"--enable-auto-scaling=true\"\n```\n\n## Persisting model descriptions\n\nRelation-level docs persistence is supported since dbt v0.17.0. For more\ninformation on configuring docs persistence, see [the docs](resource-configs/persist_docs).\n\nWhen the `persist_docs` option is configured appropriately, you'll be able to\nsee model descriptions in the `Comment` field of `describe [table] extended`\nor `show table extended in [database] like '*'`.\n\n## Always `schema`, never `database`\n\nApache Spark uses the terms \"schema\" and \"database\" interchangeably. dbt understands\n`database` to exist at a higher level than `schema`. As such, you should _never_\nuse or set `database` as a node config or in the target profile when running dbt-glue.\n\nIf you want to control the schema/database in which dbt will materialize models,\nuse the `schema` config and `generate_schema_name` macro _only_.\nFor more information, check the dbt documentation about [custom schemas](https://docs.getdbt.com/docs/build/custom-schemas).\n\n## Tests\n\nTo perform a functional test:\n1. Install dev requirements:\n```bash\n$ pip3 install -r dev-requirements.txt\n```\n\n2. Install dev locally\n```bash\n$ python3 setup.py build && python3 setup.py install_lib\n```\n\n3. Export variables\n```bash\n$ export DBT_S3_LOCATION=s3://mybucket/myprefix\n$ export DBT_ROLE_ARN=arn:aws:iam::1234567890:role/GlueInteractiveSessionRole\n```\n\n4. Run the test\n```bash\n$ python3 -m pytest tests/functional\n```\n\nFor more information, check the dbt documentation about [testing a new adapter](https://docs.getdbt.com/docs/contributing/testing-a-new-adapter).\n\n## Caveats\n\n### Supported Functionality\n\nMost dbt Core functionality is supported, but some features are only available with Apache Hudi.\n\nApache Hudi-only features:\n1. Incremental model updates by `unique_key` instead of `partition_by` (see [`merge` strategy](glue-configs#the-merge-strategy))\n\n\nSome dbt features, available on the core adapters, are not yet supported on Glue:\n1. [Persisting](persist_docs) column-level descriptions as database comments\n2. [Snapshots](snapshots)\n\n---\nFor more information on dbt:\n- Read the [introduction to dbt](https://docs.getdbt.com/docs/introduction).\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/about/viewpoint).\n- Join the [dbt community](http://community.getdbt.com/).\n---\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aws-samples/dbt-glue",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbt-glue",
    "package_url": "https://pypi.org/project/dbt-glue/",
    "platform": null,
    "project_url": "https://pypi.org/project/dbt-glue/",
    "project_urls": {
      "Homepage": "https://github.com/aws-samples/dbt-glue"
    },
    "release_url": "https://pypi.org/project/dbt-glue/1.3.12/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "dbt (data build tool) adapter for Aws Glue",
    "version": "1.3.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16474524,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "103849a6c8aaf0fe64ea79f496fab7669cacc170ebd326848bb35f0c7a3eaa8d",
          "md5": "81c6e95479d66d5be080d07a8e696959",
          "sha256": "f5c4eaac5652de863febaed00c82c11e60185669bee4dc4e6f79a4977442308d"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81c6e95479d66d5be080d07a8e696959",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32406,
        "upload_time": "2022-04-21T16:43:25",
        "upload_time_iso_8601": "2022-04-21T16:43:25.940664Z",
        "url": "https://files.pythonhosted.org/packages/10/38/49a6c8aaf0fe64ea79f496fab7669cacc170ebd326848bb35f0c7a3eaa8d/dbt-glue-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db9d255eb1414ca7106a9f50c2b39daa13f806058af2283e5b720c6df10e5769",
          "md5": "36a67a5486829b57c8a84d676b5682b2",
          "sha256": "51379a7fc1d285679b57ec3f5ba39977c1e91c7e025f186720345491d44c0862"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36a67a5486829b57c8a84d676b5682b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32574,
        "upload_time": "2022-04-27T08:30:33",
        "upload_time_iso_8601": "2022-04-27T08:30:33.146467Z",
        "url": "https://files.pythonhosted.org/packages/db/9d/255eb1414ca7106a9f50c2b39daa13f806058af2283e5b720c6df10e5769/dbt-glue-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "423c867e513cbed21896e7a9e05a9ce33874ce78ee76ddb8faa13975d76a8113",
          "md5": "762d1c59483c778e55a6446d0c2e3dab",
          "sha256": "521659184a323ae3786633320ae422fa2c54af694a783e2591d15b2810cca5e1"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "762d1c59483c778e55a6446d0c2e3dab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34053,
        "upload_time": "2022-04-27T08:30:34",
        "upload_time_iso_8601": "2022-04-27T08:30:34.592708Z",
        "url": "https://files.pythonhosted.org/packages/42/3c/867e513cbed21896e7a9e05a9ce33874ce78ee76ddb8faa13975d76a8113/dbt-glue-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55e91e1968e1730e7c92f50566ab66a89791f0b1cc6bac385d17686a610a489b",
          "md5": "4f4dab1cea3ed720bb176787e287dd65",
          "sha256": "f96006f82386c45727c90300163853fbcf32f5089d3e89a3cd39eb7ad092b6ee"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4f4dab1cea3ed720bb176787e287dd65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34445,
        "upload_time": "2022-04-28T09:31:08",
        "upload_time_iso_8601": "2022-04-28T09:31:08.709356Z",
        "url": "https://files.pythonhosted.org/packages/55/e9/1e1968e1730e7c92f50566ab66a89791f0b1cc6bac385d17686a610a489b/dbt-glue-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "428e44ea0ced85eb922311c47467af9a21f63d143a7557a9fd91088c8d6c86e2",
          "md5": "56434abf53b6e0f493cb5ce83d7b5040",
          "sha256": "6fb8a798070d75502a8c05e996d0cdfca7b9afc64876811ef54a538bb24940e5"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "56434abf53b6e0f493cb5ce83d7b5040",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34457,
        "upload_time": "2022-04-28T11:40:10",
        "upload_time_iso_8601": "2022-04-28T11:40:10.073219Z",
        "url": "https://files.pythonhosted.org/packages/42/8e/44ea0ced85eb922311c47467af9a21f63d143a7557a9fd91088c8d6c86e2/dbt-glue-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d241c2e45006305e3c1bc786de72219907cbd9efc4f0194d0cb9358af1f6ab0b",
          "md5": "726f268104bf67fa0c99d8192e56968b",
          "sha256": "c174b634f97ba72411dcc1f01af5dd495ae73415c2be537959244239b9c90be8"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "726f268104bf67fa0c99d8192e56968b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31531,
        "upload_time": "2022-05-12T16:43:50",
        "upload_time_iso_8601": "2022-05-12T16:43:50.572572Z",
        "url": "https://files.pythonhosted.org/packages/d2/41/c2e45006305e3c1bc786de72219907cbd9efc4f0194d0cb9358af1f6ab0b/dbt-glue-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b26489ed7974ee7502376027c03493ba19bd914ac41858d3e313e67dd2557213",
          "md5": "c522a59da5ed68e4f7e2b22132058da2",
          "sha256": "8dc839d75cf626ff16dcb2abdd12a87cf108a1cb79ff3ae8710cc25ee7b158de"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c522a59da5ed68e4f7e2b22132058da2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31251,
        "upload_time": "2022-07-11T06:51:15",
        "upload_time_iso_8601": "2022-07-11T06:51:15.493851Z",
        "url": "https://files.pythonhosted.org/packages/b2/64/89ed7974ee7502376027c03493ba19bd914ac41858d3e313e67dd2557213/dbt-glue-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abdb9539e9dd2b7aee0fa2f88e5f812ad33817ffadeb2324e235939a46e9b98d",
          "md5": "2f7b419affb606f8d8b6f91a22e3d671",
          "sha256": "98418c390d6b85aae5af852321c7171025bca601366bdddf2b69d2e2c4d368b4"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "2f7b419affb606f8d8b6f91a22e3d671",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35346,
        "upload_time": "2022-09-27T15:25:43",
        "upload_time_iso_8601": "2022-09-27T15:25:43.467312Z",
        "url": "https://files.pythonhosted.org/packages/ab/db/9539e9dd2b7aee0fa2f88e5f812ad33817ffadeb2324e235939a46e9b98d/dbt-glue-0.2.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99ad3ce20fe7f2f1776477814dad5433ea37d1437604c3907b58edd7c06dd698",
          "md5": "3343aa9691720d441a4ee4209bfc7aa0",
          "sha256": "07214af229ad33e92721ea96a4a445d4062bd8809ab511d81b808da500fe59ac"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "3343aa9691720d441a4ee4209bfc7aa0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35471,
        "upload_time": "2022-10-10T13:20:53",
        "upload_time_iso_8601": "2022-10-10T13:20:53.933058Z",
        "url": "https://files.pythonhosted.org/packages/99/ad/3ce20fe7f2f1776477814dad5433ea37d1437604c3907b58edd7c06dd698/dbt-glue-0.2.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "515bcad08f4c87c143507b7a6f36e1d996ac9780e704b136d2cbb1c81ca38c59",
          "md5": "8655e1343b3a865fc39d90b96542ed86",
          "sha256": "ab8036b83706ad76d555e9c4845844c7daba30b2f2ea19dee4191602068273f5"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.12.tar.gz",
        "has_sig": false,
        "md5_digest": "8655e1343b3a865fc39d90b96542ed86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35989,
        "upload_time": "2022-10-12T07:01:48",
        "upload_time_iso_8601": "2022-10-12T07:01:48.829376Z",
        "url": "https://files.pythonhosted.org/packages/51/5b/cad08f4c87c143507b7a6f36e1d996ac9780e704b136d2cbb1c81ca38c59/dbt-glue-0.2.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc548389ef8df441935e08e0d6a530565bda5257d8ca8fab0e601d91e7272244",
          "md5": "24c5c18a471659481757397b2f0d4b76",
          "sha256": "0ba9ff57030a7faed4be0c5708689cc3a2bf0910349388552a5b3c67fea73545"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.13.tar.gz",
        "has_sig": false,
        "md5_digest": "24c5c18a471659481757397b2f0d4b76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35971,
        "upload_time": "2022-10-14T13:52:50",
        "upload_time_iso_8601": "2022-10-14T13:52:50.541766Z",
        "url": "https://files.pythonhosted.org/packages/dc/54/8389ef8df441935e08e0d6a530565bda5257d8ca8fab0e601d91e7272244/dbt-glue-0.2.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1788c4dad3cbfc09d0d3b6347365f571f2f2bafb98b8a978c5797ec6e438fbd",
          "md5": "346db870e250a4f660a68c7f0edf79a6",
          "sha256": "4679b24251518c7f1f1a672e66fd579c10d1e4697dabf72aaa4d97fc80748d85"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.14.tar.gz",
        "has_sig": false,
        "md5_digest": "346db870e250a4f660a68c7f0edf79a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36029,
        "upload_time": "2022-10-17T09:12:25",
        "upload_time_iso_8601": "2022-10-17T09:12:25.014656Z",
        "url": "https://files.pythonhosted.org/packages/f1/78/8c4dad3cbfc09d0d3b6347365f571f2f2bafb98b8a978c5797ec6e438fbd/dbt-glue-0.2.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52b567254b5d8bb4f10c8dbeafe300197964d4657ad3977973423c30ffabf89d",
          "md5": "9e561c0cdb749493b7caf6ace565c012",
          "sha256": "943084256f591fb677282cddb57e2c629b53156510a1acaea5e54314ecc0b532"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e561c0cdb749493b7caf6ace565c012",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31305,
        "upload_time": "2022-07-11T17:25:21",
        "upload_time_iso_8601": "2022-07-11T17:25:21.425616Z",
        "url": "https://files.pythonhosted.org/packages/52/b5/67254b5d8bb4f10c8dbeafe300197964d4657ad3977973423c30ffabf89d/dbt-glue-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afb852fa4e25aa36fe7db985a1d84beb9633455fabbbef8ca05dfe3739935e14",
          "md5": "e1c2efe9c7c22512ff6f8a0436107c8c",
          "sha256": "5875da40e95cbd83347773cb00d1851e215cb9d357bba5004132be0d41013d06"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e1c2efe9c7c22512ff6f8a0436107c8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31343,
        "upload_time": "2022-07-12T10:19:35",
        "upload_time_iso_8601": "2022-07-12T10:19:35.735033Z",
        "url": "https://files.pythonhosted.org/packages/af/b8/52fa4e25aa36fe7db985a1d84beb9633455fabbbef8ca05dfe3739935e14/dbt-glue-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1b4dbcdb35269911d135ee835f8d71a7a894c3bfc81c5837acbfdd4512c725d",
          "md5": "782bcf1b6aeeeb7245612245d6e78855",
          "sha256": "23e103254f141e813a97c48b2cc5153fb2700732c36f17c5a3ca29fa3d95ebc8"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "782bcf1b6aeeeb7245612245d6e78855",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35175,
        "upload_time": "2022-09-09T08:26:28",
        "upload_time_iso_8601": "2022-09-09T08:26:28.460079Z",
        "url": "https://files.pythonhosted.org/packages/a1/b4/dbcdb35269911d135ee835f8d71a7a894c3bfc81c5837acbfdd4512c725d/dbt-glue-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b79d2d6a3ceb265f133cdc65936313dda9a5b1461c55d50e8fa8a2d36cdd9f6c",
          "md5": "588c8222964ea4d6fb96b762bbcbda50",
          "sha256": "f02f81b91b2dd6ac62cbdef923b5366af498b47d20cfe44d8bd72fe80aea3488"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "588c8222964ea4d6fb96b762bbcbda50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35320,
        "upload_time": "2022-09-27T13:14:36",
        "upload_time_iso_8601": "2022-09-27T13:14:36.012441Z",
        "url": "https://files.pythonhosted.org/packages/b7/9d/2d6a3ceb265f133cdc65936313dda9a5b1461c55d50e8fa8a2d36cdd9f6c/dbt-glue-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "579c93fb3b7e9d08fbd82451f880207a2e2801557d7ae3c5bd569b5a59d9b149",
          "md5": "a937138a3bd7bea5c2ed9cfa591518cc",
          "sha256": "c1e71876a4a74cd4489451454d35d0330cd685b60f863d2f4250f37ff9e1ef8e"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a937138a3bd7bea5c2ed9cfa591518cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35336,
        "upload_time": "2022-09-27T14:51:58",
        "upload_time_iso_8601": "2022-09-27T14:51:58.170285Z",
        "url": "https://files.pythonhosted.org/packages/57/9c/93fb3b7e9d08fbd82451f880207a2e2801557d7ae3c5bd569b5a59d9b149/dbt-glue-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f265c299a5664223c5fd8230805b33afaaec80cbddbffd73ca76b1a62a1a2a5e",
          "md5": "d6b6bd28821c3bd365c36da06d317cf2",
          "sha256": "59daa07dd2b57d6602b89c54961d1c4ac1ec036127df572d9cf67413697d0a2a"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b6bd28821c3bd365c36da06d317cf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35349,
        "upload_time": "2022-09-27T15:21:30",
        "upload_time_iso_8601": "2022-09-27T15:21:30.594243Z",
        "url": "https://files.pythonhosted.org/packages/f2/65/c299a5664223c5fd8230805b33afaaec80cbddbffd73ca76b1a62a1a2a5e/dbt-glue-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69a72f8cde0f2272802877343dbe3f8a46a58d207195da92917db7b6a6ffd4e0",
          "md5": "a14ebd583964fa45fa98f8b887ea174a",
          "sha256": "1190cf54666e3b436c61e28fc747cd0c913927063d935391c15c15a119e220cc"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a14ebd583964fa45fa98f8b887ea174a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36393,
        "upload_time": "2022-10-21T07:24:43",
        "upload_time_iso_8601": "2022-10-21T07:24:43.927144Z",
        "url": "https://files.pythonhosted.org/packages/69/a7/2f8cde0f2272802877343dbe3f8a46a58d207195da92917db7b6a6ffd4e0/dbt-glue-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeaeb3ddcb5acb8ed8521fc5c4dce176a835f0b5098604507ae45b39e58745ab",
          "md5": "3929bb2d25beabcbe9e59b74206a5547",
          "sha256": "ab80a595f8b6b55065819fe185c70efa244b191657efa1703436c0fd3b48e392"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3929bb2d25beabcbe9e59b74206a5547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39980,
        "upload_time": "2022-11-03T13:43:30",
        "upload_time_iso_8601": "2022-11-03T13:43:30.403163Z",
        "url": "https://files.pythonhosted.org/packages/ae/ae/b3ddcb5acb8ed8521fc5c4dce176a835f0b5098604507ae45b39e58745ab/dbt-glue-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2742e225a69a039a5c25e1f524ac1ec7b16c6517196c824520b66f5feb05dd51",
          "md5": "d5de6bed7cef2ab59b0bcb59ae1c1852",
          "sha256": "15c4b941ab2a88b6a61ac67e0d8dfbc99e4e35b0edbe1d41c03398d4bdcc5bbc"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d5de6bed7cef2ab59b0bcb59ae1c1852",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40682,
        "upload_time": "2022-11-04T07:36:28",
        "upload_time_iso_8601": "2022-11-04T07:36:28.736282Z",
        "url": "https://files.pythonhosted.org/packages/27/42/e225a69a039a5c25e1f524ac1ec7b16c6517196c824520b66f5feb05dd51/dbt-glue-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38fe749bf636542c9e0486a2c16815013b44eef8c37b8105d7b8d9372fe90ce1",
          "md5": "acfd83d2d621bc45dc1257dcca8a3c73",
          "sha256": "cf8ae291395d87ef201c8bf614c62558b11658c5d9485d9577bc36a1e85094de"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "acfd83d2d621bc45dc1257dcca8a3c73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 49292,
        "upload_time": "2022-11-24T08:28:01",
        "upload_time_iso_8601": "2022-11-24T08:28:01.570535Z",
        "url": "https://files.pythonhosted.org/packages/38/fe/749bf636542c9e0486a2c16815013b44eef8c37b8105d7b8d9372fe90ce1/dbt-glue-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "741ef1c773de0f54a89ee76cf538858906284d2836c5283e5c8a049b70bb69c8",
          "md5": "41466524c182a0d9097d35848feab52f",
          "sha256": "d8e0f825443282527dce60c693dfd85dee1f7d90d0a8720ec874ebf7f8d819ec"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "41466524c182a0d9097d35848feab52f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50534,
        "upload_time": "2022-11-24T09:51:28",
        "upload_time_iso_8601": "2022-11-24T09:51:28.681108Z",
        "url": "https://files.pythonhosted.org/packages/74/1e/f1c773de0f54a89ee76cf538858906284d2836c5283e5c8a049b70bb69c8/dbt-glue-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46980cacac82b41a26ad031f55643be95d5d47ba16d7f7b55e7f40b7c1eccb7",
          "md5": "cc2de2ab66a85460e6d87b6109121fae",
          "sha256": "e4e709526f8a7df32a7b56f218abf91e001d84a0c4703ebfc2bd788de9b60d33"
        },
        "downloads": -1,
        "filename": "dbt-glue-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cc2de2ab66a85460e6d87b6109121fae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50628,
        "upload_time": "2022-12-08T07:33:35",
        "upload_time_iso_8601": "2022-12-08T07:33:35.941433Z",
        "url": "https://files.pythonhosted.org/packages/d4/69/80cacac82b41a26ad031f55643be95d5d47ba16d7f7b55e7f40b7c1eccb7/dbt-glue-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1a73ca19d4cd6b8517ba64dff7d528d079885bd963f92bb93766d779a439cea",
          "md5": "938220f19bca12a5094ee49589e980a8",
          "sha256": "25ed06c2387533a755b76aee5f39105d84a873d92e9ace8e053a7cf3c42d6385"
        },
        "downloads": -1,
        "filename": "dbt-glue-1.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "938220f19bca12a5094ee49589e980a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 53761,
        "upload_time": "2023-01-17T11:06:28",
        "upload_time_iso_8601": "2023-01-17T11:06:28.742365Z",
        "url": "https://files.pythonhosted.org/packages/b1/a7/3ca19d4cd6b8517ba64dff7d528d079885bd963f92bb93766d779a439cea/dbt-glue-1.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "002a1cbb149b2bc8f7b19f837f38324fa433eb48b68a4d56a71b2815403aa5c5",
          "md5": "cfca188b8895048f319683e88fe96f86",
          "sha256": "97261835e5ec28acf3f44159be57f8825c9a31fa66183da92e270dba577fdff2"
        },
        "downloads": -1,
        "filename": "dbt-glue-1.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "cfca188b8895048f319683e88fe96f86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 55406,
        "upload_time": "2023-01-17T18:03:03",
        "upload_time_iso_8601": "2023-01-17T18:03:03.285260Z",
        "url": "https://files.pythonhosted.org/packages/00/2a/1cbb149b2bc8f7b19f837f38324fa433eb48b68a4d56a71b2815403aa5c5/dbt-glue-1.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91a167331e1a4869e13361040ca5da4fdb13ed35ddc78514f4d0310db3d9d393",
          "md5": "389728172af03dd884f0fc94371aea4b",
          "sha256": "de35ad94fd5412ae7f0f2b8bfe581fd039b619001c43785bad8bb4349328645a"
        },
        "downloads": -1,
        "filename": "dbt-glue-1.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "389728172af03dd884f0fc94371aea4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 55806,
        "upload_time": "2023-01-18T17:14:00",
        "upload_time_iso_8601": "2023-01-18T17:14:00.937058Z",
        "url": "https://files.pythonhosted.org/packages/91/a1/67331e1a4869e13361040ca5da4fdb13ed35ddc78514f4d0310db3d9d393/dbt-glue-1.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f50b11cd68935b446c8394b8d79dbd9020566243cc62b1cb36849ce701262584",
          "md5": "1c28f15c139ac8f23199de4ac043137b",
          "sha256": "f1163ec0a8662996370ca5c0a85a6708887be3dfac81244414d0aa23fa27d85b"
        },
        "downloads": -1,
        "filename": "dbt-glue-1.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1c28f15c139ac8f23199de4ac043137b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50780,
        "upload_time": "2022-12-29T17:26:16",
        "upload_time_iso_8601": "2022-12-29T17:26:16.974423Z",
        "url": "https://files.pythonhosted.org/packages/f5/0b/11cd68935b446c8394b8d79dbd9020566243cc62b1cb36849ce701262584/dbt-glue-1.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91a167331e1a4869e13361040ca5da4fdb13ed35ddc78514f4d0310db3d9d393",
        "md5": "389728172af03dd884f0fc94371aea4b",
        "sha256": "de35ad94fd5412ae7f0f2b8bfe581fd039b619001c43785bad8bb4349328645a"
      },
      "downloads": -1,
      "filename": "dbt-glue-1.3.12.tar.gz",
      "has_sig": false,
      "md5_digest": "389728172af03dd884f0fc94371aea4b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 55806,
      "upload_time": "2023-01-18T17:14:00",
      "upload_time_iso_8601": "2023-01-18T17:14:00.937058Z",
      "url": "https://files.pythonhosted.org/packages/91/a1/67331e1a4869e13361040ca5da4fdb13ed35ddc78514f4d0310db3d9d393/dbt-glue-1.3.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}