{
  "info": {
    "author": "",
    "author_email": "David Horak <info@davidhorak.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# (py)illogical\r\n\r\nA micro conditional engine used to parse the logical and comparison expressions, evaluate an expression in data context, and provide access to a text form of the given expression.\r\n\r\n> Revision: Mar 10, 2023.\r\n\r\nOther implementations:\r\n- [TS/JS](https://github.com/spaceavocado/illogical)\r\n- [GO](https://github.com/spaceavocado/goillogical)\r\n\r\n## About\r\n\r\nThis project has been developed to provide Python implementation of [spaceavocado/illogical](https://github.com/spaceavocado/illogical).\r\n\r\n\r\n## Getting Started\r\n\r\nYou can install the **(py)illogical** from [PyPI](https://pypi.org/project/illogical/):\r\n\r\n```sh\r\npython -m pip install illogical\r\n```\r\n\r\nThe reader is supported on Python 3.7 and above.\r\n\r\n**Table of Content**\r\n\r\n---\r\n\r\n- [(py)illogical](#pyillogical)\r\n  - [About](#about)\r\n  - [Getting Started](#getting-started)\r\n  - [Basic Usage](#basic-usage)\r\n    - [Evaluate](#evaluate)\r\n    - [Statement](#statement)\r\n    - [Parse](#parse)\r\n    - [Evaluable](#evaluable)\r\n      - [Simplify](#simplify)\r\n      - [Serialize](#serialize)\r\n  - [Working with Expressions](#working-with-expressions)\r\n    - [Evaluation Data Context](#evaluation-data-context)\r\n      - [Accessing Array Element:](#accessing-array-element)\r\n      - [Accessing Array Element via Reference:](#accessing-array-element-via-reference)\r\n      - [Nested Referencing](#nested-referencing)\r\n      - [Composite Reference Key](#composite-reference-key)\r\n      - [Data Type Casting](#data-type-casting)\r\n    - [Operand Types](#operand-types)\r\n      - [Value](#value)\r\n      - [Reference](#reference)\r\n      - [Collection](#collection)\r\n    - [Comparison Expressions](#comparison-expressions)\r\n      - [Equal](#equal)\r\n      - [Not Equal](#not-equal)\r\n      - [Greater Than](#greater-than)\r\n      - [Greater Than or Equal](#greater-than-or-equal)\r\n      - [Less Than](#less-than)\r\n      - [Less Than or Equal](#less-than-or-equal)\r\n      - [In](#in)\r\n      - [Not In](#not-in)\r\n      - [Prefix](#prefix)\r\n      - [Suffix](#suffix)\r\n      - [Overlap](#overlap)\r\n      - [None](#none)\r\n      - [Present](#present)\r\n    - [Logical Expressions](#logical-expressions)\r\n      - [And](#and)\r\n      - [Or](#or)\r\n      - [Nor](#nor)\r\n      - [Xor](#xor)\r\n      - [Not](#not)\r\n  - [Engine Options](#engine-options)\r\n    - [Reference Serialize Options](#reference-serialize-options)\r\n      - [From](#from)\r\n      - [To](#to)\r\n    - [Collection Serialize Options](#collection-serialize-options)\r\n      - [Escape Character](#escape-character)\r\n    - [Simplify Options](#simplify-options)\r\n      - [Ignored Paths](#ignored-paths)\r\n      - [Ignored Paths RegEx](#ignored-paths-regex)\r\n    - [Operator Mapping](#operator-mapping)\r\n  - [Contributing](#contributing)\r\n  - [License](#license)\r\n\r\n---\r\n\r\n\r\n## Basic Usage\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\n\r\n# Create a new instance of the engine\r\nillogical = Illogical()\r\n\r\n# Evaluate an expression\r\nillogical.evaluate([\"==\", 1, 1], {})\r\n```\r\n\r\n> For advanced usage, please [Engine Options](#engine-options).\r\n\r\n### Evaluate\r\n\r\nEvaluate comparison or logical expression:\r\n\r\n`illogical.evaluate(`[Comparison Expression](#comparison-expressions) or [Logical Expression](#logical-expressions), [Evaluation Data Context](#evaluation-data-context)`)` => `bool`\r\n\r\n**Example**\r\n\r\n```py\r\ncontext = {\r\n  \"name\": \"peter\",\r\n}\r\n\r\n# Comparison expression\r\nillogical.evaluate([\"==\", 5, 5], context)\r\nillogical.evaluate([\"==\", \"circle\", \"circle\"], context)\r\nillogical.evaluate([\"==\", True, True], context)\r\nillogical.evaluate([\"==\", \"$name\", \"peter\"], context)\r\nillogical.evaluate([\"NIL\", \"$RefA\"], context)\r\n\r\n# Logical expression\r\nillogical.evaluate([\"AND\", [\"==\", 5, 5], [\"==\", 10, 10]], context)\r\nillogical.evaluate([\"AND\", [\"==\", \"circle\", \"circle\"], [\"==\", 10, 10]], context)\r\nillogical.evaluate([\"OR\", [\"==\", \"$name\", \"peter\"], [\"==\", 5, 10]], context)\r\n```\r\n\r\n### Statement\r\n\r\nGet expression string representation:\r\n\r\n`illogical.statement(`[Comparison Expression](#comparison-expressions) or [Logical Expression](#logical-expressions)`)` => `str`\r\n\r\n**Example**\r\n\r\n```py\r\n# Comparison expression\r\n\r\nillogical.statement([\"==\", 5, 5])\r\n# (5 == 5)\r\n\r\nillogical.statement([\"==\", \"circle\", \"circle\"])\r\n# (\"circle\" == \"circle\")\r\n\r\nillogical.statement([\"==\", True, True])\r\n# (True == True)\r\n\r\nillogical.statement([\"==\", \"$name\", \"peter\"])\r\n# ({name} == \"peter\")\r\n\r\nillogical.statement([\"NIL\", \"$RefA\"])\r\n# ({RefA} <is nil>)\r\n\r\n# Logical expression\r\n\r\nillogical.statement([\"AND\", [\"==\", 5, 5], [\"==\", 10, 10]])\r\n# ((5 == 5) AND (10 == 10))\r\n\r\nillogical.statement([\"AND\", [\"==\", \"circle\", \"circle\"], [\"==\", 10, 10]])\r\n# ((\"circle\" == \"circle\") AND (10 == 10))\r\n\r\nillogical.statement([\"OR\", [\"==\", \"$name\", \"peter\"], [\"==\", 5, 10]])\r\n# (({name} == \"peter\") OR (5 == 10))\r\n```\r\n\r\n### Parse\r\n\r\nParse the expression into a **Evaluable** object, i.e. it returns the parsed self-evaluable condition expression.\r\n\r\n`illogical.parse(`[Comparison Expression](#comparison-expressions) or [Logical Expression](#logical-expressions)`)` => `Evaluable`\r\n\r\n### Evaluable\r\n\r\n- `evaluable.evaluate(context)` please see [Evaluation Data Context](#evaluation-data-context).\r\n- `evaluable.simplify(context)` please see [Simplify](#simplify).\r\n- `evaluable.serialize()` please see [Serialize](#serialize).\r\n- `str(evaluable) | evaluable.__str__()` please see [Statement](#statement).\r\n\r\n**Example**\r\n\r\n```py\r\nevaluable = illogical.parse([\"==\", \"$name\", \"peter\"])\r\n\r\nevaluable.evaluate({\"name\": \"peter\"})\r\n# True\r\n\r\nprint(evaluable)\r\n# ({name} == \"peter\")\r\n```\r\n\r\n#### Simplify\r\n\r\nSimplifies an expression with a given context. This is useful when you already have some of\r\nthe properties of context and wants to try to evaluate the expression.\r\n\r\n**Example**\r\n\r\n```py\r\nevaluable = illogical.parse([\"AND\", [\"==\", \"$a\", 10], [\"==\", \"$b\", 20]])\r\n\r\nevaluable.simplify({\"a\": 10})\r\n# ({b} == 20)\r\n\r\nevaluable.simplify({\"a\": 20})\r\n# False\r\n```\r\n\r\nValues not found in the context will cause the parent operand not to be evaluated and returned\r\nas part of the simplified expression.\r\n\r\nIn some situations we might want to evaluate the expression even if referred value is not\r\npresent. You can provide a list of keys that will be strictly evaluated even if they are not\r\npresent in the context.\r\n\r\n**Example**\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options\r\n\r\nignored_paths = [\"ignored\"],\r\nignored_path_rx = [r\"^ignored\"],\r\n\r\nillogical = Illogical(Options(ignored_paths=ignored_paths, ignored_path_rx=ignored_path_rx))\r\n\r\nevaluable = illogical.parse([\"AND\", [\"==\", \"$a\", 10], [\"==\", \"$ignored\", 20]])\r\n\r\nevaluable.simplify({\"a\": 10})\r\n# False\r\n# $ignored\" will be evaluated to None.\r\n```\r\n\r\nAlternatively we might want to do the opposite and strictly evaluate the expression for all referred\r\nvalues not present in the context except for a specified list of optional keys.\r\n\r\n**Example**\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options\r\n\r\nignored_paths = [\"b\"]\r\n\r\nillogical = Illogical(Options(ignored_paths=ignored_paths))\r\n\r\nevaluable = illogical.parse([\"OR\", [\"==\", \"$a\", 10], [\"==\", \"$b\", 20}, [\"==\", \"$c\", 20]])\r\n\r\nevaluable.simplify({\"c\": 10})\r\n# ({a} == 10)\r\n# except for \"$b\" everything not in context will be evaluated to None.\r\n```\r\n\r\n#### Serialize\r\n\r\nSerializes an expression into the raw expression form, reverse the parse operation.\r\n\r\n**Example**\r\n\r\n```py\r\nevaluable = illogical.parse([\"AND\", [\"==\", \"$a\", 10], [\"==\", 10, 20]])\r\n\r\nevaluable.serialize()\r\n# [\"AND\", [\"==\", \"$a\", 10], [\"==\", 10, 20]]\r\n```\r\n\r\n## Working with Expressions\r\n\r\n### Evaluation Data Context\r\n\r\nThe evaluation data context is used to provide the expression with variable references, i.e. this allows for the dynamic expressions. The data context is object with properties used as the references keys, and its values as reference values.\r\n\r\n> Valid reference values: dist, str, int, float, list; set; tuple of (bool, string, int, float).\r\n\r\nTo reference the nested reference, please use \".\" delimiter, e.g.:\r\n`$address.city`\r\n\r\n#### Accessing Array Element:\r\n\r\n`$options[1]`\r\n\r\n#### Accessing Array Element via Reference:\r\n\r\n`$options[{index}]`\r\n\r\n- The **index** reference is resolved within the data context as an array index.\r\n\r\n#### Nested Referencing\r\n\r\n`$address.{segment}`\r\n\r\n- The **segment** reference is resolved within the data context as a property key.\r\n\r\n#### Composite Reference Key\r\n\r\n`$shape{shapeType}`\r\n\r\n- The **shapeType** reference is resolved within the data context, and inserted into the outer reference key.\r\n- E.g. **shapeType** is resolved as \"**B**\" and would compose the **$shapeB** outer reference.\r\n- This resolution could be n-nested.\r\n\r\n#### Data Type Casting\r\n\r\n`$payment.amount.(Type)`\r\n\r\nCast the given data context into the desired data type before being used as an operand in the evaluation.\r\n\r\n> Note: If the conversion is invalid, then a warning message is being logged.\r\n\r\nSupported data type conversions:\r\n\r\n- .(String): cast a given reference to String.\r\n- .(Number): cast a given reference to Number.\r\n- .(Integer): cast a given reference to Integer.\r\n- .(Float): cast a given reference to Float.\r\n- .(Boolean): cast a given reference to Boolean.\r\n\r\n**Example**\r\n\r\n```py\r\n# Data context\r\ncontext = {\r\n  \"name\":    \"peter\",\r\n  \"country\": \"canada\",\r\n  \"age\":     21,\r\n  \"options\": [1, 2, 3],\r\n  \"address\": {\r\n    city:    \"Toronto\",\r\n    country: \"Canada\",\r\n  },\r\n  \"index\":     2,\r\n  \"segment\":   \"city\",\r\n  \"shapeA\":    \"box\",\r\n  \"shapeB\":    \"circle\",\r\n  \"shapeType\": \"B\",\r\n}\r\n\r\n# Evaluate an expression in the given data context\r\n\r\nillogical.evaluate([\">\", \"$age\", 20], context)\r\n# True\r\n\r\nillogical.evaluate([\"==\", \"$address.city\", \"Toronto\"], context)\r\n# True\r\n\r\n# Accessing Array Element\r\nillogical.evaluate([\"==\", \"$options[1]\", 2], context)\r\n# True\r\n\r\n# Accessing Array Element via Reference\r\nillogical.evaluate([\"==\", \"$options[{index}]\", 3], context)\r\n# True\r\n\r\n# Nested Referencing\r\nillogical.evaluate([\"==\", \"$address.{segment}\", \"Toronto\"], context)\r\n# True\r\n\r\n# Composite Reference Key\r\nillogical.evaluate([\"==\", \"$shape{shapeType}\", \"circle\"], context)\r\n# True\r\n\r\n# Data Type Casting\r\nillogical.evaluate([\"==\", \"$age.(String)\", \"21\"], context)\r\n# True\r\n```\r\n\r\n### Operand Types\r\n\r\nThe [Comparison Expression](#comparison-expression) expect operands to be one of the below:\r\n\r\n#### Value\r\n\r\nSimple value types: string, int, float, bool, None.\r\n\r\n**Example**\r\n\r\n```py\r\nval1 = 5\r\nvar2 = \"cirle\"\r\nvar3 = True\r\n\r\nillogical.parse([\"AND\", [\"==\", val1, var2], [\"==\", var3, var3]])\r\n```\r\n\r\n#### Reference\r\n\r\nThe reference operand value is resolved from the [Evaluation Data Context](#evaluation-data-context), where the the operands name is used as key in the context.\r\n\r\nThe reference operand must be prefixed with `$` symbol, e.g.: `$name`. This might be customized via [Reference Predicate Parser Option](#reference-predicate).\r\n\r\n**Example**\r\n\r\n| Expression                    | Data Context      |\r\n| ----------------------------- | ----------------- |\r\n| `[\"==\", \"$age\", 21]`          | `{age: 21}`       |\r\n| `[\"==\", \"circle\", \"$shape\"] ` | `{shape: \"circle\"}` |\r\n| `[\"==\", \"$visible\", True]`    | `{visible: True}` |\r\n\r\n#### Collection\r\n\r\nThe operand could be an array mixed from [Value](#value) and [Reference](#reference).\r\n\r\n**Example**\r\n\r\n| Expression                               | Data Context                        |\r\n| ---------------------------------------- | ----------------------------------- |\r\n| `[\"IN\", [1, 2], 1]`                      | `{}`                                |\r\n| `[\"IN\", \"circle\", [\"$shapeA\", \"$shapeB\"] ` | `{shapeA: \"circle\", shapeB: \"box\"}` |\r\n| `[\"IN\", [\"$number\", 5], 5]`                | `{number: 3}`                       |\r\n\r\n### Comparison Expressions\r\n\r\n#### Equal\r\n\r\nExpression format: `[\"==\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string, int, float, bool, None.\r\n\r\n```json\r\n[\"==\", 5, 5]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"==\", 5, 5], context)\r\n# True\r\n```\r\n\r\n#### Not Equal\r\n\r\nExpression format: `[\"!=\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string, int, float, bool, None.\r\n\r\n```json\r\n[\"!=\", \"circle\", \"square\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"!=\", \"circle\", \"square\"], context)\r\n# True\r\n```\r\n\r\n#### Greater Than\r\n\r\nExpression format: `[\">\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: int, float.\r\n\r\n```json\r\n[\">\", 10, 5]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\">\", 10, 5], context)\r\n# True\r\n```\r\n\r\n#### Greater Than or Equal\r\n\r\nExpression format: `[\">=\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: int, float.\r\n\r\n```json\r\n[\">=\", 5, 5]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\">=\", 5, 5], context)\r\n# True\r\n```\r\n\r\n#### Less Than\r\n\r\nExpression format: `[\"<\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: int, float.\r\n\r\n```json\r\n[\"<\", 5, 10]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"<\", 5, 10], context)\r\n# True\r\n```\r\n\r\n#### Less Than or Equal\r\n\r\nExpression format: `[\"<=\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: int, float.\r\n\r\n```json\r\n[\"<=\", 5, 5]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"<=\", 5, 5], context)\r\n# True\r\n```\r\n\r\n#### In\r\n\r\nExpression format: `[\"IN\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string, int, float, bool, None and list; set; tuple of (string, int, float, bool, None).\r\n\r\n```json\r\n[\"IN\", 5, [1, 2, 3, 4, 5]]\r\n[\"IN\", [\"circle\", \"square\", \"triangle\"], \"square\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"IN\", 5, [1, 2, 3, 4, 5]], context)\r\n# True\r\n\r\nillogical.evaluate([\"IN\", [\"circle\", \"square\", \"triangle\"], \"square\"], context)\r\n# True\r\n```\r\n\r\n#### Not In\r\n\r\nExpression format: `[\"NOT IN\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string, int, float, bool, None and list; set; tuple of (string, int, float, bool, None).\r\n\r\n```json\r\n[\"IN\", 10, [1, 2, 3, 4, 5]]\r\n[\"IN\", [\"circle\", \"square\", \"triangle\"], \"oval\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"NOT IN\", 10, [1, 2, 3, 4, 5]], context)\r\n# True\r\n\r\nillogical.evaluate([\"NOT IN\", [\"circle\", \"square\", \"triangle\"], \"oval\"], context)\r\n# True\r\n```\r\n\r\n#### Prefix\r\n\r\nExpression format: `[\"PREFIX\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string.\r\n\r\n- Left operand is the PREFIX term.\r\n- Right operand is the tested word.\r\n\r\n```json\r\n[\"PREFIX\", \"hemi\", \"hemisphere\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"PREFIX\", \"hemi\", \"hemisphere\"], context)\r\n# True\r\n\r\nillogical.evaluate([\"PREFIX\", \"hemi\", \"sphere\"], context)\r\n# False\r\n```\r\n\r\n#### Suffix\r\n\r\nExpression format: `[\"SUFFIX\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: string.\r\n\r\n- Left operand is the tested word.\r\n- Right operand is the SUFFIX term.\r\n\r\n```json\r\n[\"SUFFIX\", \"establishment\", \"ment\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"SUFFIX\", \"establishment\", \"ment\"], context)\r\n# True\r\n\r\nillogical.evaluate([\"SUFFIX\", \"establish\", \"ment\"], context)\r\n# False\r\n```\r\n\r\n#### Overlap\r\n\r\nExpression format: `[\"OVERLAP\", `[Left Operand](#operand-types), [Right Operand](#operand-types)`]`.\r\n\r\n> Valid operand types: list; set; tuple of (string, int, float, bool, None).\r\n\r\n```json\r\n[\"OVERLAP\", [1, 2], [1, 2, 3, 4, 5]]\r\n[\"OVERLAP\", [\"circle\", \"square\", \"triangle\"], [\"square\"]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"OVERLAP\", [1, 2, 6], [1, 2, 3, 4, 5]], context)\r\n# True\r\n\r\nillogical.evaluate([\"OVERLAP\", [\"circle\", \"square\", \"triangle\"], [\"square\", \"oval\"]], context)\r\n# True\r\n```\r\n\r\n#### None\r\n\r\nExpression format: `[\"NONE\", `[Reference Operand](#reference)`]`.\r\n\r\n```json\r\n[\"NONE\", \"$RefA\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"NONE\", \"RefA\"], {})\r\n# True\r\n\r\nillogical.evaluate([\"NONE\", \"RefA\"], {\"RefA\": 10})\r\n# False\r\n```\r\n\r\n#### Present\r\n\r\nEvaluates as FALSE when the operand is UNDEFINED or NULL.\r\n\r\nExpression format: `[\"PRESENT\", `[Reference Operand](#reference)`]`.\r\n\r\n```json\r\n[\"PRESENT\", \"$RefA\"]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"PRESENT\", \"RefA\"], {})\r\n# False\r\n\r\nillogical.evaluate([\"PRESENT\", \"RefA\"], {\"RefA\": 10})\r\n# True\r\n\r\nillogical.evaluate([\"PRESENT\", \"RefA\"], {\"RefA\": False})\r\n# True\r\n\r\nillogical.evaluate([\"PRESENT\", \"RefA\"], {\"RefA\": \"val\"})\r\n# True\r\n```\r\n\r\n### Logical Expressions\r\n\r\n#### And\r\n\r\nThe logical AND operator returns the bool value TRUE if both operands are TRUE and returns FALSE otherwise.\r\n\r\nExpression format: `[\"AND\", Left Operand 1, Right Operand 2, ... , Right Operand N]`.\r\n\r\n> Valid operand types: [Comparison Expression](#comparison-expressions) or [Nested Logical Expression](#logical-expressions).\r\n\r\n```json\r\n[\"AND\", [\"==\", 5, 5], [\"==\", 10, 10]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"AND\", [\"==\", 5, 5], [\"==\", 10, 10]], context)\r\n# True\r\n```\r\n\r\n#### Or\r\n\r\nThe logical OR operator returns the bool value TRUE if either or both operands is TRUE and returns FALSE otherwise.\r\n\r\nExpression format: `[\"OR\", Left Operand 1, Right Operand 2, ... , Right Operand N]`.\r\n\r\n> Valid operand types: [Comparison Expression](#comparison-expressions) or [Nested Logical Expression](#logical-expressions).\r\n\r\n```json\r\n[\"OR\", [\"==\", 5, 5], [\"==\", 10, 5]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"OR\", [\"==\", 5, 5], [\"==\", 10, 5]], context)\r\n# True\r\n```\r\n\r\n#### Nor\r\n\r\nThe logical NOR operator returns the bool value TRUE if both operands are FALSE and returns FALSE otherwise.\r\n\r\nExpression format: `[\"NOR\", Left Operand 1, Right Operand 2, ... , Right Operand N]`\r\n\r\n> Valid operand types: [Comparison Expression](#comparison-expressions) or [Nested Logical Expression](#logical-expressions).\r\n\r\n```json\r\n[\"NOR\", [\"==\", 5, 1], [\"==\", 10, 5]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"NOR\", [\"==\", 5, 1], [\"==\", 10, 5]], context)\r\n# True\r\n```\r\n\r\n#### Xor\r\n\r\nThe logical NOR operator returns the bool value TRUE if both operands are FALSE and returns FALSE otherwise.\r\n\r\nExpression format: `[\"XOR\", Left Operand 1, Right Operand 2, ... , Right Operand N]`\r\n\r\n> Valid operand types: [Comparison Expression](#comparison-expressions) or [Nested Logical Expression](#logical-expressions).\r\n\r\n```json\r\n[\"XOR\", [\"==\", 5, 5], [\"==\", 10, 5]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"XOR\", [\"==\", 5, 5], [\"==\", 10, 5]], context)\r\n# True\r\n```\r\n\r\n```json\r\n[\"XOR\", [\"==\", 5, 5], [\"==\", 10, 10]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"XOR\", [\"==\", 5, 5], [\"==\", 10, 10]], context)\r\n# False\r\n```\r\n\r\n#### Not\r\n\r\nThe logical NOT operator returns the bool value TRUE if the operand is FALSE, TRUE otherwise.\r\n\r\nExpression format: `[\"NOT\", Operand]`\r\n\r\n> Valid operand types: [Comparison Expression](#comparison-expressions) or [Nested Logical Expression](#logical-expressions).\r\n\r\n```json\r\n[\"NOT\", [\"==\", 5, 5]]\r\n```\r\n\r\n```py\r\nillogical.evaluate([\"NOT\", [\"==\", 5, 5]], context)\r\n# True\r\n```\r\n\r\n## Engine Options\r\n\r\n### Reference Serialize Options\r\n\r\n**Usage**\r\n\r\n```py\r\n\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options\r\n\r\nillogical = Illogical(Options(reference_from=reference_from, reference_to=reference_to))\r\n```\r\n\r\n#### From\r\n\r\nA function used to determine if the operand is a reference type, otherwise evaluated as a static value.\r\n\r\n```py\r\nCallable[[str], str]\r\n```\r\n\r\n**Return value:**\r\n\r\n- `True` = reference type\r\n- `False` = value type\r\n\r\n**Default reference predicate:**\r\n\r\n> The `$` symbol at the begging of the operand is used to predicate the reference type., E.g. `$State`, `$Country`.\r\n\r\n#### To\r\n\r\nA function used to transform the operand into the reference annotation stripped form. I.e. remove any annotation used to detect the reference type. E.g. \"$Reference\" => \"Reference\".\r\n\r\n```py\r\nCallable[[str], str]\r\n```\r\n\r\n> **Default reference transform:**\r\n> It removes the `$` symbol at the begging of the operand name.\r\n\r\n### Collection Serialize Options\r\n\r\n**Usage**\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options\r\n\r\nescape_character = \"\\\\\"\r\n\r\nillogical = Illogical(Options(escape_character=escape_character))\r\n```\r\n\r\n#### Escape Character\r\n\r\nCharter used to escape fist value within a collection, if the value contains operator value.\r\n\r\n**Example**\r\n- `[\"==\", 1, 1]` # interpreted as EQ expression\r\n- `[\"\\==\", 1, 1]` # interpreted as a collection\r\n\r\n> **Default escape character:**\r\n> `\\`\r\n\r\n### Simplify Options\r\n\r\nOptions applied while an expression is being simplified.\r\n\r\n**Usage**\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options\r\n\r\nignored_paths = [\"ignored\"]\r\nignored_path_rx = [r\"^prefix\"]\r\n\r\nillogical = Illogical(Options(ignored_paths=ignored_paths, ignored_path_rx=ignored_path_rx))\r\n```\r\n\r\n#### Ignored Paths\r\n\r\nReference paths which should be ignored while simplification is applied. Must be an exact match.\r\n\r\n#### Ignored Paths RegEx\r\n\r\nReference paths which should be ignored while simplification is applied. Matching regular expression patterns.\r\n\r\n### Operator Mapping\r\n\r\nMapping of the operators. The key is unique operator key, and the value is the key used to represent the given operator in the raw expression.\r\n\r\n**Usage**\r\n\r\n```py\r\nfrom illogical.illogical import Illogical\r\nfrom illogical.parser.parse import Options, DEFAULT_OPERATOR_MAPPING, EQ\r\n\r\noperator_mapping = DEFAULT_OPERATOR_MAPPING.copy()\r\noperator_mapping[EQ] = \"IS\"\r\n\r\nillogical = Illogical(Options(operator_mapping=operator_mapping))\r\n```\r\n\r\n**Default operator mapping:**\r\n\r\n```py\r\nDEFAULT_OPERATOR_MAPPING = {\r\n    # Logical\r\n    AND:     \"AND\",\r\n    OR:      \"OR\",\r\n    NOR:     \"NOR\",\r\n    XOR:     \"XOR\",\r\n    NOT:     \"NOT\",\r\n    # Comparison\r\n    EQ:      \"==\",\r\n    NE:      \"!=\",\r\n    GT:      \">\",\r\n    GE:      \">=\",\r\n    LT:      \"<\",\r\n    LE:      \"<=\",\r\n    NONE:     \"NONE\",\r\n    PRESENT: \"PRESENT\",\r\n    IN:      \"IN\",\r\n    NIN:     \"NOT IN\",\r\n    OVERLAP: \"OVERLAP\",\r\n    PREFIX:  \"PREFIX\",\r\n    SUFFIX:  \"SUFFIX\",\r\n}\r\n```\r\n\r\n---\r\n\r\n## Contributing\r\n\r\nSee [contributing.md](https://github.com/spaceavocado/pyillogical/blob/master/contributing.md).\r\n\r\n## License\r\n\r\nIllogical is released under the MIT license. See [license.md](https://github.com/spaceavocado/pyillogical/blob/master/LICENSE.md).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "expression,logical,expression-evaluator",
    "license": "Copyright (c) 2023, David Horak (info@davidhorak.com)  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "illogical",
    "package_url": "https://pypi.org/project/illogical/",
    "platform": null,
    "project_url": "https://pypi.org/project/illogical/",
    "project_urls": {
      "repository": "https://github.com/spaceavocado/pyillogical"
    },
    "release_url": "https://pypi.org/project/illogical/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A micro conditional engine used to parse raw logical and comparison expressions, evaluate the expression in the given data context, and provide access to a text form of the given expressions.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17298614,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9252e7df3c362a03936ddd9ebe2a4511238946da595058c7fba29e2be010b73f",
          "md5": "9e0454ea803aca2fe83d88c7089f5fea",
          "sha256": "51c32b1737558867fe55482efe604be76b34edde92611df81759275b67adaecd"
        },
        "downloads": -1,
        "filename": "illogical-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e0454ea803aca2fe83d88c7089f5fea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9799,
        "upload_time": "2023-03-11T05:08:13",
        "upload_time_iso_8601": "2023-03-11T05:08:13.828419Z",
        "url": "https://files.pythonhosted.org/packages/92/52/e7df3c362a03936ddd9ebe2a4511238946da595058c7fba29e2be010b73f/illogical-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e6b328e58b3472c28ab00dce4f17ae2c458dd6257548f0764f7a33d083541a2",
          "md5": "33a8d2ed8069f85f065f118a6aa84c00",
          "sha256": "2f11d6a551f170ac308ca1cdf350cee5060ac9c66185049f4f2adad15675cbbc"
        },
        "downloads": -1,
        "filename": "illogical-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33a8d2ed8069f85f065f118a6aa84c00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17466,
        "upload_time": "2023-03-11T05:08:15",
        "upload_time_iso_8601": "2023-03-11T05:08:15.923338Z",
        "url": "https://files.pythonhosted.org/packages/2e/6b/328e58b3472c28ab00dce4f17ae2c458dd6257548f0764f7a33d083541a2/illogical-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb6cc43051d1f81de67e0404654c59d4d99cf7f3c22d80b50a9655457671d31f",
          "md5": "40b223a9a9567f652fe2583b9830eb6c",
          "sha256": "477dfbad6dbae314c2ff49cdc4e0fd4b464fcea81d8b5d0c897cf5e76eb6133b"
        },
        "downloads": -1,
        "filename": "illogical-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40b223a9a9567f652fe2583b9830eb6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9812,
        "upload_time": "2023-03-15T03:09:21",
        "upload_time_iso_8601": "2023-03-15T03:09:21.009792Z",
        "url": "https://files.pythonhosted.org/packages/bb/6c/c43051d1f81de67e0404654c59d4d99cf7f3c22d80b50a9655457671d31f/illogical-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e117b5068f766ab22897da286b9e898418f1477d5152e4a4ec809ceb69b7ae0b",
          "md5": "891defc81b3468922a742c34497e0a05",
          "sha256": "b2bc31bab475ff2b34266dd0fa31233d17f1d68bc847243addbe42015f75f508"
        },
        "downloads": -1,
        "filename": "illogical-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "891defc81b3468922a742c34497e0a05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17553,
        "upload_time": "2023-03-15T03:09:24",
        "upload_time_iso_8601": "2023-03-15T03:09:24.945773Z",
        "url": "https://files.pythonhosted.org/packages/e1/17/b5068f766ab22897da286b9e898418f1477d5152e4a4ec809ceb69b7ae0b/illogical-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb6cc43051d1f81de67e0404654c59d4d99cf7f3c22d80b50a9655457671d31f",
        "md5": "40b223a9a9567f652fe2583b9830eb6c",
        "sha256": "477dfbad6dbae314c2ff49cdc4e0fd4b464fcea81d8b5d0c897cf5e76eb6133b"
      },
      "downloads": -1,
      "filename": "illogical-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40b223a9a9567f652fe2583b9830eb6c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9812,
      "upload_time": "2023-03-15T03:09:21",
      "upload_time_iso_8601": "2023-03-15T03:09:21.009792Z",
      "url": "https://files.pythonhosted.org/packages/bb/6c/c43051d1f81de67e0404654c59d4d99cf7f3c22d80b50a9655457671d31f/illogical-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e117b5068f766ab22897da286b9e898418f1477d5152e4a4ec809ceb69b7ae0b",
        "md5": "891defc81b3468922a742c34497e0a05",
        "sha256": "b2bc31bab475ff2b34266dd0fa31233d17f1d68bc847243addbe42015f75f508"
      },
      "downloads": -1,
      "filename": "illogical-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "891defc81b3468922a742c34497e0a05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17553,
      "upload_time": "2023-03-15T03:09:24",
      "upload_time_iso_8601": "2023-03-15T03:09:24.945773Z",
      "url": "https://files.pythonhosted.org/packages/e1/17/b5068f766ab22897da286b9e898418f1477d5152e4a4ec809ceb69b7ae0b/illogical-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}