{
  "info": {
    "author": "Andy Zeng, Pete Florence, Daniel Seita, Jonathan Tompson, Ayzaan Wahid",
    "author_email": "ravens-team@google.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Ravens - Transporter Networks\n\nRavens is a collection of simulated tasks in PyBullet for learning vision-based robotic manipulation, with emphasis on pick and place.\nIt features a Gym-like API with 10 tabletop rearrangement tasks, each with (i) a scripted oracle that provides expert demonstrations (for imitation learning), and (ii) reward functions that provide partial credit (for reinforcement learning).\n\n<img src=\"docs/tasks.png\"><br>\n\n(a) **block-insertion**: pick up the L-shaped red block and place it into the L-shaped fixture.<br>\n(b) **place-red-in-green**: pick up the red blocks and place them into the green bowls amidst other objects.<br>\n(c) **towers-of-hanoi**: sequentially move disks from one tower to another—only smaller disks can be on top of larger ones.<br>\n(d) **align-box-corner**: pick up the randomly sized box and align one of its corners to the L-shaped marker on the tabletop.<br>\n(e) **stack-block-pyramid**: sequentially stack 6 blocks into a pyramid of 3-2-1 with rainbow colored ordering.<br>\n(f) **palletizing-boxes**: pick up homogeneous fixed-sized boxes and stack them in transposed layers on the pallet.<br>\n(g) **assembling-kits**: pick up different objects and arrange them on a board marked with corresponding silhouettes.<br>\n(h) **packing-boxes**: pick up randomly sized boxes and place them tightly into a container.<br>\n(i) **manipulating-rope**: rearrange a deformable rope such that it connects the two endpoints of a 3-sided square.<br>\n(j) **sweeping-piles**: push piles of small objects into a target goal zone marked on the tabletop.<br>\n\nSome tasks require generalizing to unseen objects (d,g,h), or multi-step sequencing with closed-loop feedback (c,e,f,h,i,j).\n\n**Team:** this repository is developed and maintained by [Andy Zeng](https://andyzeng.github.io/), [Pete Florence](http://www.peteflorence.com/), [Daniel Seita](https://people.eecs.berkeley.edu/~seita/), [Jonathan Tompson](https://jonathantompson.github.io/), and [Ayzaan Wahid](https://www.linkedin.com/in/ayzaan-wahid-21676148/). This is the reference repository for the paper:\n\n### Transporter Networks: Rearranging the Visual World for Robotic Manipulation\n[Project Website](https://transporternets.github.io/)&nbsp;&nbsp;•&nbsp;&nbsp;[PDF](https://arxiv.org/pdf/2010.14406.pdf)&nbsp;&nbsp;•&nbsp;&nbsp;Conference on Robot Learning (CoRL) 2020\n\n*Andy Zeng, Pete Florence, Jonathan Tompson, Stefan Welker, Jonathan Chien, Maria Attarian, Travis Armstrong,<br>Ivan Krasin, Dan Duong, Vikas Sindhwani, Johnny Lee*\n\n**Abstract.** Robotic manipulation can be formulated as inducing a sequence of spatial displacements: where the space being moved can encompass an object, part of an object, or end effector. In this work, we propose the Transporter Network, a simple model architecture that rearranges deep features to infer spatial displacements from visual input—which can parameterize robot actions. It makes no assumptions of objectness (e.g. canonical poses, models, or keypoints), it exploits spatial symmetries, and is orders of magnitude more sample efficient than our benchmarked alternatives in learning vision-based manipulation tasks: from stacking a pyramid of blocks, to assembling kits with unseen objects; from manipulating deformable ropes, to pushing piles of small objects with closed-loop feedback. Our method can represent complex multi-modal policy distributions and generalizes to multi-step sequential tasks, as well as 6DoF pick-and-place. Experiments on 10 simulated tasks show that it learns faster and generalizes better than a variety of end-to-end baselines, including policies that use ground-truth object poses. We validate our methods with hardware in the real world.\n\n## Installation\n\n**Step 1.** Recommended: install [Miniconda](https://docs.conda.io/en/latest/miniconda.html) with Python 3.7.\n\n```shell\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh -b -u\necho $'\\nexport PATH=~/miniconda3/bin:\"${PATH}\"\\n' >> ~/.profile  # Add Conda to PATH.\nsource ~/.profile\nconda init\n```\n\n**Step 2.** Create and activate Conda environment, then install GCC and Python packages.\n\n```shell\ncd ~/ravens\nconda create --name ravens python=3.7 -y\nconda activate ravens\nsudo apt-get update\nsudo apt-get -y install gcc libgl1-mesa-dev\npip install -r requirements.txt\npython setup.py install --user\n```\n\n**Step 3.** Recommended: install GPU acceleration with NVIDIA [CUDA](https://developer.nvidia.com/cuda-toolkit) 10.1 and [cuDNN](https://developer.nvidia.com/cudnn) 7.6.5 for Tensorflow.\n```shell\n./oss_scipts/install_cuda.sh  #  For Ubuntu 16.04 and 18.04.\nconda install cudatoolkit==10.1.243 -y\nconda install cudnn==7.6.5 -y\n```\n\n## Getting Started\n\n**Step 1.** Generate training and testing data. Note: remove `--disp` for headless mode.\n\n```shell\npython ravens/demos.py  --assets_root=./ravens/environments/assets/ --disp=True --task=block-insertion --mode=train --n=10\npython ravens/demos.py  --assets_root=./ravens/environments/assets/ --disp=True --task=block-insertion --mode=test --n=100\n```\n\n**Step 2.** Train a model e.g., Transporter Networks model.\n\n```shell\npython ravens/train.py - --assets_root=./ravens/environments/assets/ -task=block-insertion --agent=transporter --n_demos=10\n```\n\n**Step 3.** Evaluate a Transporter Networks agent with the trained model.\n\n```shell\npython ravens/test.py  --assets_root=./ravens/environments/assets/ --disp=True --task=block-insertion --agent=transporter --n_demos=10 --n_steps=1000\n```\n\n**Step 4.** Plot results.\n\n```shell\npython ravens/plot.py  --assets_root=./ravens/environments/assets/ -disp=True --task=block-insertion --agent=transporter --n_demos=10\n```\n\n**Optional.** Track training and validation losses with Tensorboard.\n\n```shell\npython -m tensorboard.main --logdir=logs  # Open the browser to where it tells you to.\n```\n\n## Datasets and Pre-Trained Models\n\nDownload our generated train and test datasets and pre-trained models.\n\n```shell\nwget https://storage.googleapis.com/ravens-assets/checkpoints.zip\nwget https://storage.googleapis.com/ravens-assets/block-insertion.zip\nwget https://storage.googleapis.com/ravens-assets/place-red-in-green.zip\nwget https://storage.googleapis.com/ravens-assets/towers-of-hanoi.zip\nwget https://storage.googleapis.com/ravens-assets/align-box-corner.zip\nwget https://storage.googleapis.com/ravens-assets/stack-block-pyramid.zip\nwget https://storage.googleapis.com/ravens-assets/palletizing-boxes.zip\nwget https://storage.googleapis.com/ravens-assets/assembling-kits.zip\nwget https://storage.googleapis.com/ravens-assets/packing-boxes.zip\nwget https://storage.googleapis.com/ravens-assets/manipulating-rope.zip\nwget https://storage.googleapis.com/ravens-assets/sweeping-piles.zip\n```\n\nThe MDP formulation for each task uses transitions with the following structure:\n\n**Observations:** raw RGB-D images and camera parameters (pose and intrinsics).\n\n**Actions:** a primitive function (to be called by the robot) and parameters.\n\n**Rewards:** total sum of rewards for a successful episode should be =1.\n\n**Info:** 6D poses, sizes, and colors of objects.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google-research/ravens",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ravens",
    "package_url": "https://pypi.org/project/ravens/",
    "platform": "",
    "project_url": "https://pypi.org/project/ravens/",
    "project_urls": {
      "Homepage": "https://github.com/google-research/ravens"
    },
    "release_url": "https://pypi.org/project/ravens/0.1/",
    "requires_dist": [
      "absl-py (>=0.7.0)",
      "gym (>=0.17.3)",
      "numpy (>=1.18.5)",
      "pybullet (>=3.0.4)",
      "matplotlib (>=3.1.1)",
      "opencv-python (>=4.1.2.30)",
      "meshcat (>=0.0.18)",
      "scipy (>=1.4.1)",
      "scikit-image (>=0.17.2)",
      "tensorflow (>=2.3.0)",
      "tensorflow-addons (>=0.11.2)",
      "tensorflow-hub (>=0.9.0)",
      "transforms3d (>=0.3.1)"
    ],
    "requires_python": "",
    "summary": "Ravens is a collection of simulated tasks in PyBullet for learning vision-based robotic manipulation.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8905616,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf36b53fc338830207d6886bc742b3daee68ed3da4376800e7be0434830503e7",
          "md5": "e86d49c381b9a7b748a119ac9180d774",
          "sha256": "7968738180240bc14df31f88daf200504aab116a0ca9ee5a8dc8d26b05e9f2c6"
        },
        "downloads": -1,
        "filename": "ravens-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e86d49c381b9a7b748a119ac9180d774",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108582,
        "upload_time": "2020-12-15T16:12:24",
        "upload_time_iso_8601": "2020-12-15T16:12:24.696279Z",
        "url": "https://files.pythonhosted.org/packages/cf/36/b53fc338830207d6886bc742b3daee68ed3da4376800e7be0434830503e7/ravens-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e31aa1ac2967621e3b69d424b4d21d2aace5188c935c65c27b9e6165a1dd3bf5",
          "md5": "b69c45857bdbaf8228b842773e2e8ec9",
          "sha256": "e8a927b523b68746fe0eaa1e3bb64f81cc404ffc76f8a0322f9255d0da820129"
        },
        "downloads": -1,
        "filename": "ravens-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b69c45857bdbaf8228b842773e2e8ec9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65763,
        "upload_time": "2020-12-15T16:12:26",
        "upload_time_iso_8601": "2020-12-15T16:12:26.453344Z",
        "url": "https://files.pythonhosted.org/packages/e3/1a/a1ac2967621e3b69d424b4d21d2aace5188c935c65c27b9e6165a1dd3bf5/ravens-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf36b53fc338830207d6886bc742b3daee68ed3da4376800e7be0434830503e7",
        "md5": "e86d49c381b9a7b748a119ac9180d774",
        "sha256": "7968738180240bc14df31f88daf200504aab116a0ca9ee5a8dc8d26b05e9f2c6"
      },
      "downloads": -1,
      "filename": "ravens-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e86d49c381b9a7b748a119ac9180d774",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 108582,
      "upload_time": "2020-12-15T16:12:24",
      "upload_time_iso_8601": "2020-12-15T16:12:24.696279Z",
      "url": "https://files.pythonhosted.org/packages/cf/36/b53fc338830207d6886bc742b3daee68ed3da4376800e7be0434830503e7/ravens-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e31aa1ac2967621e3b69d424b4d21d2aace5188c935c65c27b9e6165a1dd3bf5",
        "md5": "b69c45857bdbaf8228b842773e2e8ec9",
        "sha256": "e8a927b523b68746fe0eaa1e3bb64f81cc404ffc76f8a0322f9255d0da820129"
      },
      "downloads": -1,
      "filename": "ravens-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b69c45857bdbaf8228b842773e2e8ec9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 65763,
      "upload_time": "2020-12-15T16:12:26",
      "upload_time_iso_8601": "2020-12-15T16:12:26.453344Z",
      "url": "https://files.pythonhosted.org/packages/e3/1a/a1ac2967621e3b69d424b4d21d2aace5188c935c65c27b9e6165a1dd3bf5/ravens-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}