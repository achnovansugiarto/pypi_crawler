{
  "info": {
    "author": "Martín Gaitán",
    "author_email": "gaitan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "==============\npytest-portion\n==============\n\n.. image:: https://img.shields.io/pypi/v/pytest-portion.svg\n    :target: https://pypi.org/project/pytest-portion\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-portion.svg\n    :target: https://pypi.org/project/pytest-portion\n    :alt: Python versions\n\n.. image:: https://travis-ci.org/mgaitan/pytest-portion.svg?branch=main\n    :target: https://travis-ci.org/mgaitan/pytest-portion\n    :alt: See Build Status on Travis CI\n\n\nSelect a portion of the collected tests, so you can run diferents parts of your test suite\nin differents instances to balance the number of test run on each one.\n\nUse case\n--------\n\nSuppose you have a big, slow test suite, but you can trigger several CI workers\nto run different portions of it, in a sake lazy/simple way to parallelize it.\n\nA basic, obvious way to do that is to explictily\ncollect from different directories/modules\n\n- worker1: ``pytest tests/a``    (100 tests, ~4 minutes to finish)\n- worker2: ``pytest tests/b``    (20 tests, ~1 minute to finish)\n- worker3: ``pytest tests/c tests/d``  (30 tests, ~1 minute to finish)\n\nThe problem is that directory `tests/a` may have a lot more tests that `tests/c` plus `test/d`,\nso ``worker1`` takes a lot more to finish.\n\nWith ``pytest-portion`` you can still split the tests in different instances, but letting\nthe extension makes the selection in a more balanced way.\n\n- worker1: ``pytest --portion 1/3 tests``   (first 50 tests, ~2 minutes)\n- worker2: ``pytest --portion 2/3 tests``   (next 50 tests, ~2 minutes)\n- worker3: ``pytest --portion 3/3 tests``   (last 50 tests, ~2 minutes)\n\nIn this case, the tests of all the directories are collected, but only a third (a different one!) of them will\nbe actually executed on each worker.\n\nNote this balance is **by number of tests**, so if there is very slow tests in a particular portion,\nthe duration may not be expected.\n\nFor a fine tuning, you could pass the portion in a more explicit way:\n\n- worker1: ``pytest --portion 0:0.5 tests``    (first half, 1st to 75th test)\n- worker2: ``pytest --portion 0.5:0.8 tests``  (next 30%, from 76th to 125º)\n- worker3: ``pytest --portion 0.8:1 tests``    (last 20%)\n\n\nInstallation\n------------\n\nYou can install \"pytest-portion\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-portion\n\n\nUsage\n-----\n\nPass ``--portion <i/n>`` where:\n\n- ``n`` is the number of portions\n- ``i`` is the i-th portion to select (``1 <= i <= n``)\n\n.. note::\n\n    If the number of tests collected is not divisible by `n`, the last portion will contain the rest.\n    For instance, if you have `test_1`, `test_2` and `test_3`, `--portion 1/2` will run the first one,\n    and `--portion 2/2` the last 2.\n\n\nAlternatively ``--portion start:end`` where:\n\n- ``start`` and ``end`` are the coefficient (between 0 and 1) that represent the segment of the collected tests\n  to select.\n\n\nContributing\n------------\nContributions are very welcome. Please ensure the coverage at least stays\nthe same before you submit a pull request.\n\nLicense\n-------\n\nDistributed under the terms of the `BSD-3`_ license, \"pytest-portion\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n\nAcknowledgements\n----------------\n\n\n- Thanks to ShipHero_ for give me some time to develop this.\n- I used `cookiecutter`_ along with `@hackebrot`_'s `cookiecutter-pytest-plugin`_ template for the boilerplate code of this package. Thanks!\n\n.. _`ShipHero`: https://www.shiphero.com\n.. _`cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`BSD-3`: http://opensource.org/licenses/BSD-3-Clause\n.. _`GNU GPL v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/mgaitan/pytest-portion/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org/project\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgaitan/pytest-portion",
    "keywords": "",
    "license": "BSD-3",
    "maintainer": "Martín Gaitán",
    "maintainer_email": "gaitan@gmail.com",
    "name": "pytest-portion",
    "package_url": "https://pypi.org/project/pytest-portion/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-portion/",
    "project_urls": {
      "Homepage": "https://github.com/mgaitan/pytest-portion"
    },
    "release_url": "https://pypi.org/project/pytest-portion/0.1.0/",
    "requires_dist": [
      "pytest (>=3.5.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Select a portion of the collected tests",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9257968,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd2e084b1c42a9c985be01c30eaebd1ac23ad9b892f97dedc4777f7cef64cbc",
          "md5": "6c799251226ac13b108d1e4a41277ed3",
          "sha256": "e3718edf597c1697114b55be809d5a96c1066b39c1a7d385ec828661a2f34994"
        },
        "downloads": -1,
        "filename": "pytest_portion-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c799251226ac13b108d1e4a41277ed3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5226,
        "upload_time": "2021-01-28T20:04:00",
        "upload_time_iso_8601": "2021-01-28T20:04:00.315938Z",
        "url": "https://files.pythonhosted.org/packages/3f/d2/e084b1c42a9c985be01c30eaebd1ac23ad9b892f97dedc4777f7cef64cbc/pytest_portion-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fd2e084b1c42a9c985be01c30eaebd1ac23ad9b892f97dedc4777f7cef64cbc",
        "md5": "6c799251226ac13b108d1e4a41277ed3",
        "sha256": "e3718edf597c1697114b55be809d5a96c1066b39c1a7d385ec828661a2f34994"
      },
      "downloads": -1,
      "filename": "pytest_portion-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c799251226ac13b108d1e4a41277ed3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5226,
      "upload_time": "2021-01-28T20:04:00",
      "upload_time_iso_8601": "2021-01-28T20:04:00.315938Z",
      "url": "https://files.pythonhosted.org/packages/3f/d2/e084b1c42a9c985be01c30eaebd1ac23ad9b892f97dedc4777f7cef64cbc/pytest_portion-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}