{
  "info": {
    "author": "Sergey Bronnikov",
    "author_email": "estetus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Version Control :: Git"
    ],
    "description": "# `git test`\n\n`git-test` is a command-line script for running automated tests against commits\nin a Git repository. It is especially targeted at developers who like their\ntests to pass on *every* commit in a branch, not just the branch tip.\n\nThe best way to use `git test` is to keep a window open in a second linked\nworktree of your repository, and as often as you like run\n\n    git test run master..mybranch\n\n`git test` will test the commits in the specified range, reporting any\nfailures. The pass/fail results of running tests are also recorded permanently\nin your repository as Git \"notes\" (see `git-notes(1)`).\n\nIf a commit in the range has already been tested, then by default `git test`\nreports the old results rather than testing it again. This means that you can\nrun the above command over and over as you work, and `git test` won't repeat\ntests whose results it already knows. (Of course there are options to allow you\nto request explicitly that commits be retested.)\n\nThe test results are recorded by the *tree* that was tested, not the commit, so\nold test results remain valid even across some kinds of commit rewriting:\n\n* If commits are rewritten to change their log messages, authorship, dates,\netc., the test results remain valid.\n* If consecutive commits are squashed, the results remain valid.\n* If a commit is split into two, only the first (partial) commit needs to be\ntested.\n* If some commits deep in a branch are reordered, the test results for commits\nbuilt on top of the reordered commits often remain valid.\n\nOf course this means that your tests should not depend on things besides the\nfiles in the tree. For example, whether your test passes/fails should *not*\ndepend on the current branch name or commit message.\n\n## Usage\n\n### Defining tests\n\nFirst define the test that you would like to run; for example,\n\n    git test add \"make -j8 && make test\"\n\nThe string that you specify can be an arbitrary command; it is run with `sh\n-c`. Its exit code should be 0 if the test passes, or nonzero if it fails. The\ntest definition is stored in your Git config.\n\n### Test one or more commits\n\nBy default, `git test run` tests `HEAD`:\n\n    git test run\n\n(If the working copy is dirty, the test is run anyway but the results are not\nrecorded.)\n\nYou can test a range of Git commits with a single command:\n\n    git test run commit1..commit2\n\nThe test is run against each commit in the range, in order from old to new. If\na commit fails the test, `git test` reports the error and stops with the broken\ncommit checked out. You can also specify individual commits to test:\n\n    git test run commit1 commit2 commit3\n\nor test an arbitrary set of commits supplied via standard input:\n\n    git rev-list feature1 feature2 ^master | git test run --stdin\n\nYou can adjust the verbosity of the output using the `--verbosity`/`-v` or\n`--quiet`/`-q` options. Either of these options can be specified multiple\ntimes.\n\n### Define multiple tests\n\nYou can define multiple tests in a single repository (e.g., cheap vs. expensive\ntests). Their results are kept separate. By default, the test called `default`\nis run, but you can specify a different test to add/run using the\n`--test=<name>`/`-t <name>` option:\n\n    git test add \"make test\"\n    git test run commit1..commit2\n    git test add --test=build \"make\"\n    git test run --test=build commit1..commit2\n\n### Retrying tests and/or forgetting old test results\n\nIf you have flaky tests that occasionally fail for bogus reasons, you might\nwant to re-run the test against a commit even though `git test` has already\nrecorded a result for that commit. To do so, run `git test run` with the\n`--force`/`-f` or `--retest` options.\n\nIf you want to forget particular old test results without retesting, run `git\ntest run` with the `--forget` option.\n\nIf you want to permanently forget *all* stored results for a particular test\n(e.g., if something in your environment has changed), run\n\n    git test forget-results [--test=<name>]\n\n### Continue on test failures\n\nNormally, `git test run` stops at the first broken commit that it finds. If\nyou'd prefer for it to continue even after a failure, use the\n`--keep-going`/`-k` option.\n\n### Removing tests\n\nTo permanently remove a test definition and all of its stored results, run\n\n    git test remove [--test=<name>]\n\n### For help\n\nGeneral help about `git test` can be obtained by running\n\n    git test help\n\nHelp about a particular subcommand can be obtained via either\n\n    git test help run\n\nor\n\n    git test run --help\n\n\n## Best practice: use `git test` in a linked worktree\n\n`git test` works really well together with `git worktree`. Keep a second\nworktree and use it for testing your current branch continuously as you work:\n\n    git worktree add --detach ../test HEAD\n    cd ../test\n    git test run master..mybranch\n\nThe last command can be re-run any time; it only does significant work when\nsomething changes on your branch. Plus, with this setup you can continue to\nwork in your main working tree while the tests run.\n\nBecause linked worktrees share branches and the git configuration with the main\nrepository, test definitions and test results are visible across all worktrees.\nSo you could even run multiple tests at the same time in multiple linked\nworktrees.\n\n\n## Installation\n\nRequirements:\n\n* A recent Git command-line client\n* A Python interpreter. `git test` has been tested with Python versions 2.7 and\n3.4. It will probably work with any Python3 version starting with 3.2 (it\nrequires `argparse`).\n\nJust put `bin/git-test` somewhere in your `$PATH`, adjusting its first line if\nnecessary to invoke the desired Python interpreter properly in your\nenvironment.\n\n## Ideas for future enhancements\n\nSome other features that would be nice:\n\n* Be more consistent about restoring `HEAD`. `git test run` currently checks\nout the branch that you started on when it is finished, but only if all of the\ntests passed. We need some kind of `git test reset` command analogous to `git\nbisect reset`.\n\n* `git test bisect`: run `git bisect run` against a range of commits, using a\nconfigured test as the command that `bisect` uses to decide whether a commit is\ngood/bad.\n\n* `git test prune`: delete notes for obsolete trees.\n\n* Continuous testing mode, where `git test` watches the repository for changes\nand re-runs itself automatically whenever the commits it is watching change.\n\n* Dependencies between tests; for example:\n    * Provide a way to say \"if my `full` test passes, that implies that the\n`build` test would also pass\".\n    * Provide a way to run the `build` test (and record the `build` test's\nresults) as the first step of the `full` test.\n* Allow trees to be marked `skip`, if they shouldn't be tested (e.g., due to a\nknown breakage). Perhaps allow the test script to emit a special return code to\nask that the commit be marked `skip` (probably following the convention of `git\nbisect run`).\n\n* Remember return codes and give them back out if the old result is reused.\n\n* Add a `git test fix <range>`, which starts an interactive rebase, changing\nthe command for the first broken commit from \"pick\" to \"edit\".\n\n* Support tests that depend on the *commit*, not the *tree*, that they are run\nagainst.\n\n\n## License\n\n`git test` is released under the GPLv2+ license. Pull requests are welcome at\nthe project's GitHub page, https://github.com/ligurio/git-test\n\n\n## Caveats and disclaimers\n\n`git test` has pretty good automated tests, but it undoubtedly still has bugs\nand rough edges. Use it at your own risk.\n\nPlease note that when you tell `git test run` to test specified commits, it\nchecks those commits out in your working directory. If the tests fail, it\nleaves the failing commit checked out *in a detached HEAD state*. This is\nintentional, so that you can examine the cause of the failure. But it means\nthat if you had changes on your original HEAD that weren't part of any branch,\nthey will now be unreachable.\n\nIf you don't know what a detached HEAD state is, please read up on it.\nAdditionally, **it is recommended that you run `git test` in a separate\nworktree**, which is more convenient anyway (see above for instructions). Note\nthat the `git worktree` command was added in Git release 2.5, so make sure you\nare using that version of Git or (preferably) newer.\n\nThe above considerations don't apply to running `git test` against HEAD or your\ncurrent working tree. In other words,\n\n    git test run\n\nand\n\n    git test run HEAD\n\ndon't change the commit that is checked out, and they won't change your working\ncopy to a detached HEAD state.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ligurio/git-test",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git-test",
    "package_url": "https://pypi.org/project/git-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/git-test/",
    "project_urls": {
      "Homepage": "https://github.com/ligurio/git-test"
    },
    "release_url": "https://pypi.org/project/git-test/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Run automated tests against a range of Git commits and keep track of the results",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7675248,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c55433f7485506e43d227eea5473280d6dec3055c7b9e7de3ca74c3a7d41e47",
          "md5": "bb755b92b12a62e7a2bb949a6b742c91",
          "sha256": "37d1c28f20fd2a009b25b00a719d1f594c50668666085a0407e393a878288c23"
        },
        "downloads": -1,
        "filename": "git_test-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb755b92b12a62e7a2bb949a6b742c91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11703,
        "upload_time": "2020-07-10T14:56:46",
        "upload_time_iso_8601": "2020-07-10T14:56:46.478774Z",
        "url": "https://files.pythonhosted.org/packages/4c/55/433f7485506e43d227eea5473280d6dec3055c7b9e7de3ca74c3a7d41e47/git_test-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f028e2e66c22a7332e282bbe9f90ac4b1da2a16db4159d463b3da0d1d829f88",
          "md5": "78daad9e015de033127f6386d1e10853",
          "sha256": "85bd882c5c1575e7fef37222df9ac88c13433d51aa3fa33194bd2ed1d7aaf261"
        },
        "downloads": -1,
        "filename": "git-test-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78daad9e015de033127f6386d1e10853",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5341,
        "upload_time": "2020-07-10T14:56:48",
        "upload_time_iso_8601": "2020-07-10T14:56:48.553665Z",
        "url": "https://files.pythonhosted.org/packages/9f/02/8e2e66c22a7332e282bbe9f90ac4b1da2a16db4159d463b3da0d1d829f88/git-test-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c55433f7485506e43d227eea5473280d6dec3055c7b9e7de3ca74c3a7d41e47",
        "md5": "bb755b92b12a62e7a2bb949a6b742c91",
        "sha256": "37d1c28f20fd2a009b25b00a719d1f594c50668666085a0407e393a878288c23"
      },
      "downloads": -1,
      "filename": "git_test-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb755b92b12a62e7a2bb949a6b742c91",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11703,
      "upload_time": "2020-07-10T14:56:46",
      "upload_time_iso_8601": "2020-07-10T14:56:46.478774Z",
      "url": "https://files.pythonhosted.org/packages/4c/55/433f7485506e43d227eea5473280d6dec3055c7b9e7de3ca74c3a7d41e47/git_test-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f028e2e66c22a7332e282bbe9f90ac4b1da2a16db4159d463b3da0d1d829f88",
        "md5": "78daad9e015de033127f6386d1e10853",
        "sha256": "85bd882c5c1575e7fef37222df9ac88c13433d51aa3fa33194bd2ed1d7aaf261"
      },
      "downloads": -1,
      "filename": "git-test-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "78daad9e015de033127f6386d1e10853",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5341,
      "upload_time": "2020-07-10T14:56:48",
      "upload_time_iso_8601": "2020-07-10T14:56:48.553665Z",
      "url": "https://files.pythonhosted.org/packages/9f/02/8e2e66c22a7332e282bbe9f90ac4b1da2a16db4159d463b3da0d1d829f88/git-test-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}