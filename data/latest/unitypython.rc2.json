{
  "info": {
    "author": "thautwarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "## UnityPython\n\nKey points:\n\n1. Run a Python-like programming language on ALL platforms such as iOS, Android, etc.\n2. Good IDE support via Pylance, type checked! (see [unitypython-typeshed](https://github.com/thautwarm/unitypython-typeshed))\n3. Dynamic and fast code loading in Unity. Edit code and see how UI changes immediately (Unity Editor is painful to me)!\n4. An extensible coroutine implementation. `async` and `await` are not as restricted as that in CPython and can be used as fast/fine-grained controlled event loops in game development.\n\nUnityPython is based on CPython 3.10, but not fully compatible to CPython. For instance, `StopIteration` is not used for loop constructs (exceptions are heavy and not used for control flow); `type` is the only metaclass, etc.\n\n```python\nimport UnityEngine\n\nclass MyComponent(UnityEngine.MonoBehaviour):\n    def Start(self):\n        async def coro():\n            while not cond_satisfied:\n                await Task.Yield\n            do_something()\n        def coro2():\n            while not cond_satisfied:\n                yield\n            do_something()\n        self.StartCoroutine(coro())\n        self.StartCoroutine(coro2())\n```\n\n## Contributing\n\nSee [0.1 roadmap](https://github.com/thautwarm/TraffyAsm.UnityPython/issues/7)\n\nBasic development workflow:\n1. `cd UnityPython.FrontEnd && pip install -e . && cd ..`; requires Python 3.8+ (Python 3.10 is better)\n2. `cd UnityPython.BackEnd`\n3. `dotnet restore`\n4. `bash build-code.sh && bash runtests.sh`\n\n`UnityPython.BackEnd/tests/test_*.py` will be executed.\n\nBesides, we badly need more tests! Help us and refer [test_semantics](https://github.com/thautwarm/Traffy.UnityPython/blob/main/UnityPython.BackEnd/tests/test_semantics.py).\n\n### How to add a method to datatypes? (concise way)\n\n`[PyBind]` can be used to bind Python methods. You can bind a Python `staticmethod` or instance method through the following the steps:\n\n1. implement an instacne/static method/instance property\n\n    ```c#\n    [PyBind]\n    public TrObject append(TrObject elt)\n    {\n        container.Add(elt);\n        return MK.None();\n    }\n    ```\n\n2. build an DLL for `UnityPython.BackEnd`\n\n   `dotnet public -c Release`\n\n3. codegen using `UnityPython.BackEnd.CodeGen`\n\n   `dotnet run --project ../UnityPython.BackEnd.CodeGen/UnityPython.BackEnd.CodeGen.csproj`\n\nThen `append` is bound.\n\n`[PyBind]` works for static methods and properties as well. Default arguments work.\n\n**NOTE**: functions annotated by `[PyBind]` must take a return value!!!\n\n### How to add a method to datatypes? (verbose way)\n\nFor example, if we want to implement `append` for `list`,\n- we firstly get to [UnityPython.BackEnd/src/Traffy.Objects/List.cs](https://github.com/thautwarm/Traffy.UnityPython/blob/main/UnityPython.BackEnd/src/Traffy.Objects/List.cs)\n- then we find the method annotated with `[Mark(Initialization.TokenClassInit)]`\n- see the code\n\n  ```c#\n\n    public static TrObject append(TrObject self, TrObject value)\n    {\n        ((TrList)self).container.Add(value);\n        return RTS.object_none; // RTS = runtime support\n    }\n\n   [Mark(Initialization.TokenClassInit)]\n    static void _Init()\n    {\n        CLASS = TrClass.FromPrototype<TrList>();\n        CLASS.Name = \"list\";\n        CLASS.InitInlineCacheForMagicMethods();\n        CLASS[CLASS.ic__new] = TrStaticMethod.Bind(\"list.__new__\", TrList.datanew);\n\n        // 1. 'TrSharpFunc.FromFunc' converts a CSharp function to UnityPython 'builtin_function'\n        // 2. 'CLASS[\"somemethod\".ToIntern()] = python-object' is equal to something like\n        //      class list:\n        //         somemethod = expr\n        CLASS[\"append\".ToIntern()] = TrSharpFunc.FromFunc(\"list.append\", TrList.append);\n        ...\n    }\n  ```\n\n  PS:\n  - `TrSharpFunc.FromFunc` creates a method\n  - `TrStaticMethod.Bind` creates a `staticmethod`\n  - `TrClassMethod.Bind` creates a `classmethod`\n  - `TrProperty.Create(getter=null, setter=null)` creates a `property`\n\n### How to add a builtin-function\n\nBasically, you just need to call `Initialization.Prelude(string name, TrObject o)`.\n\nFor maintainability, please collect all builtin callables (other than datatypes) at [UnityPython.BackEnd/src/Builtins.cs](https://github.com/thautwarm/Traffy.UnityPython/blob/main/UnityPython.BackEnd/src/Builtins.cs)\n\n```c#\n\nnamespace Traffy\n{\n    public static class Builtins\n    {\n        static IEnumerator<TrObject> mkrange(int start, int end, int step)\n        {\n            for (int i = start; i < end; i += step)\n                yield return MK.Int(i);\n        }\n\n        // BLists, or double-ended lists, are designed for fast method call (requires adding a 'self' to the left end)\n        static TrObject range(BList<TrObject> args, Dictionary<TrObject, TrObject> kwargs)\n        {\n            var narg = args.Count;\n            switch(narg)\n            {\n                case 1:\n                    return MK.Iter(mkrange(0, args[0].AsInt(), 1));\n                case 2:\n                    return MK.Iter(mkrange(args[0].AsInt(),  args[1].AsInt(), 1));\n                case 3:\n                    return MK.Iter(mkrange(args[0].AsInt(),  args[1].AsInt(), args[2].AsInt()));\n                default:\n                    throw new TypeError($\"range() takes 1 to 3 positional argument(s) but {narg} were given\");\n            }\n        }\n\n        [Mark(Initialization.TokenBuiltinInit)]\n        public static void InitRuntime()\n        {\n            Initialization.Prelude(TrSharpFunc.FromFunc(\"range\", range));\n        }\n\n    }\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thautwarm/Traffy.UnityPython",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitypython",
    "package_url": "https://pypi.org/project/unitypython/",
    "platform": "any",
    "project_url": "https://pypi.org/project/unitypython/",
    "project_urls": {
      "Homepage": "https://github.com/thautwarm/Traffy.UnityPython"
    },
    "release_url": "https://pypi.org/project/unitypython/0.2.1/",
    "requires_dist": [
      "wisepy2 (>=1.2.1)"
    ],
    "requires_python": ">=3.8.0",
    "summary": "",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13469773,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5035f4dc6c0f07424cccf53de200487af642d56c76d3be2e27a9c4422a643abd",
          "md5": "fb67a630900aa0746fbcf02995d113fb",
          "sha256": "2d7c0b873fc7beabfe6e468736ac30b311c8d25a852f76155631d91c0909f8e9"
        },
        "downloads": -1,
        "filename": "unitypython-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb67a630900aa0746fbcf02995d113fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 21268,
        "upload_time": "2022-04-10T14:11:20",
        "upload_time_iso_8601": "2022-04-10T14:11:20.622105Z",
        "url": "https://files.pythonhosted.org/packages/50/35/f4dc6c0f07424cccf53de200487af642d56c76d3be2e27a9c4422a643abd/unitypython-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1da677cbffa26c46c0b33cce4a8150f79f44113756425f1956f249d7147a9621",
          "md5": "ee629483ec47c1b0244dbb63db75111a",
          "sha256": "5bed7805b44832811e6416393bc835b7b05dbfb95dce34b175244ccfc4d9024c"
        },
        "downloads": -1,
        "filename": "unitypython-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee629483ec47c1b0244dbb63db75111a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 21489,
        "upload_time": "2022-04-10T16:18:50",
        "upload_time_iso_8601": "2022-04-10T16:18:50.314438Z",
        "url": "https://files.pythonhosted.org/packages/1d/a6/77cbffa26c46c0b33cce4a8150f79f44113756425f1956f249d7147a9621/unitypython-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1da677cbffa26c46c0b33cce4a8150f79f44113756425f1956f249d7147a9621",
        "md5": "ee629483ec47c1b0244dbb63db75111a",
        "sha256": "5bed7805b44832811e6416393bc835b7b05dbfb95dce34b175244ccfc4d9024c"
      },
      "downloads": -1,
      "filename": "unitypython-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ee629483ec47c1b0244dbb63db75111a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 21489,
      "upload_time": "2022-04-10T16:18:50",
      "upload_time_iso_8601": "2022-04-10T16:18:50.314438Z",
      "url": "https://files.pythonhosted.org/packages/1d/a6/77cbffa26c46c0b33cce4a8150f79f44113756425f1956f249d7147a9621/unitypython-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}