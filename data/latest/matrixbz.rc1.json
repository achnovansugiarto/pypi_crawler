{
  "info": {
    "author": "",
    "author_email": "hi@decentralabs.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# matrixbz\n\nmatrixbz is a library for quickly building Matrix bots. It uses [matrix-nio](https://github.com/poljar/matrix-nio) as its Matrix client library.\n\n## Examples\n\n### XKCD Bot\n\n```python\nimport os\nimport pathlib\nimport requests\nfrom lxml import html\n\nimport matrixbz\nimport matrixbz.response as response\nimport matrixbz.cache as cache\n\nXKCD_PATH = pathlib.Path(__file__).parent.absolute()\nCACHE_PATH = os.path.join(XKCD_PATH, 'responsecache')\n\n\n@matrixbz.matrixbz_controller(bot_name='xkcdbot')\nclass XKCDBotController():\n\n    AUTH = matrixbz.auth.PublicBot\n    CACHE = cache.FileTextCache(CACHE_PATH)\n\n    @cache.cache_result\n    @matrixbz.matrixbz_method\n    async def num(self, num, **kwargs):\n        page_url = f'https://xkcd.com/{num}/'\n        img_url = self._get_img_url(page_url)\n        return response.Image(img_url)\n\n    def _get_img_url(self, url):\n        res = requests.get(url)\n        tree = html.fromstring(res.text)\n        img_url = tree.xpath('//div[@id=\"comic\"]/img')[0].get('src')\n        return f'https:{img_url}'\n\ncreds = {\n    'homeserver': 'https://matrix.MYSERVER.com',\n    'user': '@bot:MYSERVER.com',\n    'password': 'bot_password'\n}\n\nbot = XKCDBotController.create_matrix_bot(creds)\nbot.run()\n```\n\nAccepts all invites and responds to all users. Fetches XKCD image with:\n\n        !xkcdbot num <xkcd_comic_number>\n\nImages are cached in local folder.\n\n### Dice Bot\n\n```python\nimport random\nimport re\n\nimport matrixbz\nimport matrixbz.response as response\nimport matrixbz.cache as cache\n\n@matrixbz.matrixbz_controller(bot_name='dicebot')\nclass DiceBotController():\n\n    AUTH = matrixbz.auth.PublicBot\n\n    @matrixbz.matrixbz_method\n    async def roll(self, dstring, **kwargs):\n        regex = re.compile('^([0-9]+)d([0-9]+)$')\n        match = re.search(regex, dstring)\n        num_dice = int(match.group(1))\n        sides = int(match.group(2))\n        res = []\n        for d in range(num_dice):\n            res.append(random.randint(1,sides))\n        return response.Notice(f'rolling {dstring}: {res}')\n\ncreds = {\n    'homeserver': 'https://matrix.MYSERVER.com',\n    'user': '@bot:MYSERVER.com',\n    'password': 'bot_password'\n}\n\nbot = DiceBotController.create_matrix_bot(creds)\nbot.run()\n```\n\nAccepts all invites and responds to all users. Produces dice rolls in `<N>d<S>` format with:\n\n    !dicebot roll <number_of_dice>d<number_of_sides>\n\n## Decorators\n\n### matrixbz_controller\n\nRequires specifying a `bot_name` - bots are invoked by writing `!<bot_name> <method>` in chat. Marks a python class as a bot controller. Adds `create_matrix_bot` class method that takes in `creds` and creates a bot. The bot's `run` starts the bot and blocks while the bot is running.\n\n#### creds\n\n`creds` is a dictionary with `homeserver`, `user`, and `password` credentials for a bot.\n\n### matrixbz_method\n\nMarks a function as a bot method. Can be invoked with `!<bot_name> <function_name>`\n\n#### cache_result\n\nA `matrixbz_method` marked with this will have its result cached. If the exact invocation of the command has been called before, bot will return the result without calling the function again.\n\n### matrixbz_msg_handler\n\nA function marked with this will be invoked upon processing all non-command messages\n\n### matrixbz_startup_method\n\nA function marked with this will execute one time when the bot's `run` is invoked.\n\n## Auth\n\nA matrix bot controller can specify it's invite acceptance and command invocation authorization by setting `AUTH`.\n\n### BlockAll\n\nThis is the default if `AUTH` is not specified. Will not accept any invites and will not respond to any commands.\n\n### PublicBot\n\nThe bot will accept all invites and respond to all commands.\n\n### UserWhitelist\n\nThe bot will only accept invites from and respond to commands from users specified in `USER_WHITELIST` list on the controller class.\n\n## Response\n\n### Text\n\nTODO\n\n### Notice\n\nTODO\n\n### Html\n\nTODO\n\n### Image\n\nTODO\n\n## Cache\n\n### NoCache\n\nDefault. No cacheing.\n\n### InMemoryTextCache\n\nStores cached command results in memory.\n\n### FileTextCache\n\nStores cached command results on disk.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://decentralabs.io",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrixbz",
    "package_url": "https://pypi.org/project/matrixbz/",
    "platform": "",
    "project_url": "https://pypi.org/project/matrixbz/",
    "project_urls": {
      "Homepage": "https://decentralabs.io"
    },
    "release_url": "https://pypi.org/project/matrixbz/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7902760,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eb8a495a2b216318bc99347af34a07588344f9588496f13921e4d3d64d23019",
          "md5": "d65469c7655744663217e126cd1500d3",
          "sha256": "154a67b307e105725b7095b16968fdc632bbed1fdda69fa2cddca61c74288d4f"
        },
        "downloads": -1,
        "filename": "matrixbz-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d65469c7655744663217e126cd1500d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7863,
        "upload_time": "2020-08-06T20:58:08",
        "upload_time_iso_8601": "2020-08-06T20:58:08.534501Z",
        "url": "https://files.pythonhosted.org/packages/3e/b8/a495a2b216318bc99347af34a07588344f9588496f13921e4d3d64d23019/matrixbz-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3eb8a495a2b216318bc99347af34a07588344f9588496f13921e4d3d64d23019",
        "md5": "d65469c7655744663217e126cd1500d3",
        "sha256": "154a67b307e105725b7095b16968fdc632bbed1fdda69fa2cddca61c74288d4f"
      },
      "downloads": -1,
      "filename": "matrixbz-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d65469c7655744663217e126cd1500d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7863,
      "upload_time": "2020-08-06T20:58:08",
      "upload_time_iso_8601": "2020-08-06T20:58:08.534501Z",
      "url": "https://files.pythonhosted.org/packages/3e/b8/a495a2b216318bc99347af34a07588344f9588496f13921e4d3d64d23019/matrixbz-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}