{
  "info": {
    "author": "Xian Zheng",
    "author_email": "714186139@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\r\n# sine.utils\r\n\r\nthe set of common tools\r\n\r\n## tools\r\n\r\n### Class ConfigFileAlone\r\n\r\nSimplify read/write on a Json config file. Based on module config_file.\r\nMain features:\r\n* Most used in single program to create and read from a local config file.\r\n* Specify your default config value in your code and then it will be add to the file. \r\n* Don't worry about whether the file exists, and ONLY when config changed the file will be saved.\r\n\r\n```python\r\ntry:\r\n    config = ConfigFileAlone('json_file_path')\r\n    save_path = config.getAlone('prop1', 'default')\r\n    api_path = config.getAlone('prop2', 2)\r\n    # ... your work\r\n    config.saveAlone()\r\nexcept Exception:\r\n    print(\"can not load config file\")\r\n```\r\n\r\n### Class PredictableProcessBar\r\nProcess bar just wrap module tqdm and provide new members to make the progress change more smoothly when the unit size is not equivalent and keep unknown in some time and need to predict. Using simple algorithm. For example, to download 100 picture from the website, you create 10 threads to do this, you set the origin total to 100 and never know the true size of the picture you have not read in.\r\n\r\n```python\r\nimport requests\r\nfrom sine.utils import *\r\nbar=PredictableProcessBar(total=100)\r\n\r\ndef download_pic(url, path, bar):\r\n    with closing(requests.get(url, stream=True)) as resp:\r\n        size = int(resp.headers['Content-Length'])\r\n        # you now know the true 'size' of one of origin total size in the bar, call this for adjust the true process and help to prediction\r\n        bar.load_in(size, 1)\r\n        with open(path, 'wb') as code:\r\n            for chunk in resp.iter_content(chunk_size=1024*1024): # buffer size: 1MB\r\n                code.write(chunk)\r\n                # send the true size just for log, and the origin size for update, and optional the core cost time for log\r\n                bar.update_out(len(chunk), len(chunk)/size)\r\n                bar.set_postfix_str(byte2readable(bar.loaded_avg * bar.n / (time.time() - bar.start_t)) + '/s')\r\n\r\n```\r\n\r\n\r\n### Class EventManager\r\n\r\nprovide event sending and listening.\r\nuse a hashable key to identify an event.\r\n\r\n```python\r\ndef f(key, data):\r\n    print(data)\r\n\r\nmanager = EventManager()\r\nmanager.start() # start listen\r\n\r\nmanager.addListener(key='evnet_key', listener=f)\r\n\r\nmanager.sendEvent(key='evnet_key', 'print hello')\r\n\r\n\r\n# other methods\r\nmanager.removeListener(key='evnet_key', f)\r\nmanager.stop() # stop listen\r\nmanager.clear() # clear event\r\n```\r\n\r\n### Class Path\r\n\r\nconvenient to join file path in a chain manner:\r\n\r\n```python\r\ns = Path('.')\r\ns = s.join('a', 'b').join('..')\r\n# s == 'a'\r\n```\r\n\r\nit uses `os.path.join` and always normalizes the path with `os.path.normpath`  \r\nbecause `os.path.join` join the `'a', '..'` to `'a/..'`\r\n\r\n### Module properties\r\n\r\nread/write .properties file in line-oriented format  \r\n`key=value` per line *through function*.\r\n\r\n*the code refers to `java.util.Properties` in Java 1.6.*\r\n\r\n#### Common Usage\r\n\r\n* file I/O:\r\n\r\n    ```python\r\n    # input\r\n    properties = load(file)\r\n    # or update existing dictionary\r\n    load(file, properties)\r\n\r\n    # output\r\n    store(file, properties)\r\n    ```\r\n\r\n* custom input:  \r\n    `class LineReader` read in one key-value data. It skips all comment lines,  \r\n    blank lines, leading whitespace, and processes multi-line data.  \r\n    `loadSingle(string)` read each piece of data given above to key-value.  \r\n\r\n    ```python\r\n    for line in LineReader(file): # each key-value line has no line seperator\r\n        key, value = loadSingle(line)\r\n        # do something\r\n    ```\r\n\r\n* custom output:  \r\n    `storeComments(writable, comments, linesep=os.linesep))`  \r\n    write comment (accept multi-line), can specify the line terminator.  \r\n    `storeSingle(writable, key, value, sep='=', linesep=os.linesep)`  \r\n    write one key-value, can specify the seperator and the line terminator.  \r\n\r\n    ```python\r\n    storeComments(file, 'this is a comment')\r\n    storeSingle(file, 'key', 'value')\r\n    ```\r\n\r\n#### File Format\r\n\r\nnormally each line is comment line or a key-value pair.\r\n\r\nmain features:\r\n\r\n* seperate key and value by one of `=`, `:`, ` `, `\\t`\r\n* ignore whitespaces leading in a line or around `=` or `:`\r\n* comment line begin with `#` or `!`\r\n* escape unicode by `\\uxxxx`\r\n* escape special characters by adding `\\`\r\n\r\nothers:\r\n\r\n* data line ends with `\\` discard the line break\r\n\r\ndifferences with Java:\r\n\r\n* store method will not write datetime comment\r\n\r\n### Thread classes\r\n\r\n```python\r\ndef func(a, b, stop_event):\r\n    while 1:\r\n        if stop_event.is_set():\r\n            break\r\n        # do your work\r\n\r\nthread = StoppableThread(target=func, args=('a', 'b'))\r\nthread.start()\r\n# ...\r\nthread.stop(-1) # stop and join forever\r\n# thread.stopped() == True\r\n\r\n\r\nthread = ReStartableThread(target=func, args=('a', 'b'), event_name='stop_event') # can specify the parameter's name\r\nthread.start()\r\n# ...\r\nthread.stop(1) # stop and join for 1 second\r\n# ...\r\nthread.start()\r\n# ...\r\nthread.stop()\r\nthread.join()\r\n# ...\r\n```\r\n\r\n### sine.storage\r\n\r\n#### Brief\r\n\r\nprovide simple reliable persistence for string data base on a string key.\r\n\r\ndata changes will append to the file like logging while update.\r\ndata are store in **csv** format.\r\nyou can compress the data anytime reliably.\r\n\r\n#### Examples\r\n\r\n```python\r\n# common use\r\nstorage = getStorage('./data.csv')\r\nauthor = storage.setdefault('author', 'sine')\r\nstorage['author'] = 'Sine'\r\ndel storage['author']\r\n\r\nfor k in storage.keys():\r\n    print(k, storage[k])\r\n\r\n# compress data\r\nstorage.compress()\r\n```\r\n\r\n## Change Log\r\n\r\n### v0.2.1, 2021-12-26\r\n\r\n* [fix] using Thread.is_alive instead of Thread.isAlive (not found)\r\n* [fix] bugs in PredictableProcessBar\r\n\r\n### v0.2.0, 2021-12-26\r\n\r\n* [new] class PredictableProcessBar\r\n* [new] class ConfigFileAlone\r\n* [new] functional: byte2readable, mkdir\r\n* [fix] using collections.abc.Iterable\r\n\r\n### v0.1.1, 2019-12-14\r\n\r\n* EventManager's process thread defaults to be daemon, can be set.\r\n\r\n### v0.1.0, 2019-7-21\r\n\r\ncollect from exist package:\r\n\r\n* sine.path-v0.1.3\r\n* sine.threads-v0.1.7\r\n* sine.event-v0.0.2\r\n* sine.properties-v0.1.1\r\n\r\nand the new 'storage'.\r\n\r\nnews:\r\n\r\n* EventManager: change arguments passing, include the key (just like calling the sendEvent)\r\n* threads: fix about args appending\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SineObama/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sine.utils",
    "package_url": "https://pypi.org/project/sine.utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/sine.utils/",
    "project_urls": {
      "Homepage": "https://github.com/SineObama/"
    },
    "release_url": "https://pypi.org/project/sine.utils/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "the set of common tools",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12408154,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "649f1a6c1ecec15da9a19028cadc9f42423a66afe272ed493d6bb38d8f09d595",
          "md5": "0ba6476eabffe8eec861647254416e28",
          "sha256": "c17a5ebf33153981a517b599da784e29d21d4d779b3f18c4bea6b201fe6e29ae"
        },
        "downloads": -1,
        "filename": "sine.utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ba6476eabffe8eec861647254416e28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 22186,
        "upload_time": "2019-07-21T05:26:06",
        "upload_time_iso_8601": "2019-07-21T05:26:06.671485Z",
        "url": "https://files.pythonhosted.org/packages/64/9f/1a6c1ecec15da9a19028cadc9f42423a66afe272ed493d6bb38d8f09d595/sine.utils-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ec08fe1e9c1f4e07a4a97a48325f752ef315294f0473942573083d0fd99ee7",
          "md5": "942b08844032869193be03fcbfc23224",
          "sha256": "7d9daace211c6b9cf58a1fee13d641cece3ce29c9da2488bcd1e495d22391a5f"
        },
        "downloads": -1,
        "filename": "sine.utils-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "942b08844032869193be03fcbfc23224",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 22386,
        "upload_time": "2019-12-14T15:18:52",
        "upload_time_iso_8601": "2019-12-14T15:18:52.733897Z",
        "url": "https://files.pythonhosted.org/packages/83/ec/08fe1e9c1f4e07a4a97a48325f752ef315294f0473942573083d0fd99ee7/sine.utils-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c879a28cd9b38a17fbcb6bb7619f45a1a0a7530a05880de28a7eea448ed8e1cb",
          "md5": "02ec5adab85fbd603175dd4e32add25e",
          "sha256": "3574dad5f06e8d60e2e4dc68f03df61338a0cae42cb1997a0e0464d163cd5e92"
        },
        "downloads": -1,
        "filename": "sine.utils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02ec5adab85fbd603175dd4e32add25e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 24415,
        "upload_time": "2021-12-26T08:44:34",
        "upload_time_iso_8601": "2021-12-26T08:44:34.918642Z",
        "url": "https://files.pythonhosted.org/packages/c8/79/a28cd9b38a17fbcb6bb7619f45a1a0a7530a05880de28a7eea448ed8e1cb/sine.utils-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d90b83cba4c0433ab575cfaea3af5451a44877a3120e693a763e032d025db7c",
          "md5": "efef17595fc91223fc7c00c251129c2f",
          "sha256": "44066c5f7004d5ad9f408ba01358a7f09ebc2b91432ce45bcf54fd1188ae4819"
        },
        "downloads": -1,
        "filename": "sine.utils-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "efef17595fc91223fc7c00c251129c2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 26603,
        "upload_time": "2021-12-26T12:46:50",
        "upload_time_iso_8601": "2021-12-26T12:46:50.928448Z",
        "url": "https://files.pythonhosted.org/packages/7d/90/b83cba4c0433ab575cfaea3af5451a44877a3120e693a763e032d025db7c/sine.utils-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d90b83cba4c0433ab575cfaea3af5451a44877a3120e693a763e032d025db7c",
        "md5": "efef17595fc91223fc7c00c251129c2f",
        "sha256": "44066c5f7004d5ad9f408ba01358a7f09ebc2b91432ce45bcf54fd1188ae4819"
      },
      "downloads": -1,
      "filename": "sine.utils-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "efef17595fc91223fc7c00c251129c2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 26603,
      "upload_time": "2021-12-26T12:46:50",
      "upload_time_iso_8601": "2021-12-26T12:46:50.928448Z",
      "url": "https://files.pythonhosted.org/packages/7d/90/b83cba4c0433ab575cfaea3af5451a44877a3120e693a763e032d025db7c/sine.utils-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}