{
  "info": {
    "author": "Mads Andreasen",
    "author_email": "app@andreasen.cc",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3"
    ],
    "description": "## PySideFlask\nCreate desktop application by using Flask and Pyside2.\n\nThis is a fork of PyFladesk, where  PyQT5 has been exchanged with PySide2\n\n## Idea\n\nRather than open Flask app in user browser, create a QWebview and then run Flask app on it.\n\nBy default, every internal link is open inside the app and every external link is open in the default browser.\n\n## Dependencies\n\n- Python3\n- Flask\n- Pyside2\n\n\n## Installation with pip\n\nIf you want to install PySideFlask with pip you just run.\n\n`pip install pysideflask`\n\n\n## Usage\n\nYou just need to change two lines:\n\nAdd an import at the top:\n\n`from pysideflask import init_gui`\n\nAnd wherever you run the app (`app.run`) replace it with:\n\n`init_gui(app)`\n\nThen run your app as usual\n\n### Example\n\n```python\nfrom flask import Flask\nfrom pysideflask import init_gui\n\napp = Flask(__name__)\n\nfrom routes import *\n\nif __name__ == '__main__':\n    init_gui(app)\n```\n\n## Parameters\n\nThe `init_gui` function has some optional parameters that you may find useful:\n\n```python\ninit_gui(application, port=5000, width=300, height=400,\n             window_title=\"PySideFlask\", icon=\"appicon.png\", argv=None)\n```\n\n- port: choose in which port the application will run.\n- width: The initial width of the main window.\n- height: The initial height of the main window.\n- window_title: The main window title.\n- icon: the path to the icon file of the main window.\n- argv: additional parameters to the `QApplication` instance.\n\n## Packaging\n\nFor a full guide on how to package the app in one executable with [PyInstaller](http://www.pyinstaller.org/) file check [this blog post](https://elc.github.io/posts/executable-flask-pyinstaller/)\n\nThis avoids the need for the Python interpreter and the packages you use inside your project.\n\nIf you haven't already, install it with pip (if you use virtual environments you should install it inside it).\n\n`pip install pyinstaller`\n\nSome parameters to consider:\n\n- `F` - Bundles everything in a single file\n- `w` - Avoid displaying a console\n- `--add-data` - Add Folders to the directory/executable\n\nSince Flask relies on a directory structure you should pass it to the folder, in the example case we only have two folders: `templates` and `static`, in case you use a database or some other directory structure you should adapt this.\n\nNote: For more complex scenarios check the [PyInstaller Docs](https://pythonhosted.org/PyInstaller/usage.html)\n\nIf we want everything in one executable file we can\n\nWindows:\n\n`pyinstaller -w -F --add-data \"templates;templates\" --add-data \"static;static\" app.py`\n\nLinux:\n\n`pyinstaller -w -F --add-data \"templates:templates\" --add-data \"static:static\" app.py`\n\nDepending on the Linux version, you might need to install `sudo apt install libpython3.x-dev`\n\nThis will create a folder `dist` with our executable ready to be shipped. The executable will open the main window of our app.\n\n\nDefine this in a helper script:\n\n```python\ndef resource_path(relative_path):\n \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))\n    return os.path.join(base_path, relative_path)\n```\n\nInclude this at the top, under imports\n\n```python\nif getattr(sys, 'frozen', False):\n    template_folder = resource_path('templates')\n    static_folder = resource_path('static')\n    app = Flask(__name__, template_folder=template_folder, static_folder=static_folder)\nelse:\n    app = Flask(__name__)\n```\n\n\nSince Qt is quite big, your executables will be big too. The example app of this repository is 70 MB (69 MB of which are the Qt Component for displaying HTML). This is reasonable taking into account that we are shipping a self contain web browser. In case size is crucial, you can follow [this suggestions](https://elc.github.io/posts/executable-flask-pyinstaller/#the-other-problem-the-size)\n\n\n## Contributing Oportunities\n\nFeel free to open issues and pull requests for new features and improvements. This is a guide for things that may be useful for the project:\n\n- Add different backends (wxPython, TKinter, etc)\n- Test performance of HTML5 and CSS3\n- Add Directory structure for large projects (Flask Patterns)\n- Test other micro web frameworks (Bottle, etc)\n- Make sample apps\n\n## Thanks\n\nThanks to ​Saeed Moqadam, for the original [Pyfladesk](https://github.com/smoqadam/PyFladesk)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MadsAndreasen/PySideFlask",
    "keywords": "​GUI​,​Flask​,Qt,webview",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PySideFlask",
    "package_url": "https://pypi.org/project/PySideFlask/",
    "platform": "",
    "project_url": "https://pypi.org/project/PySideFlask/",
    "project_urls": {
      "Homepage": "https://github.com/MadsAndreasen/PySideFlask"
    },
    "release_url": "https://pypi.org/project/PySideFlask/2.0/",
    "requires_dist": [
      "flask",
      "pyside2"
    ],
    "requires_python": ">=3",
    "summary": "Create desktop application by using Flask and QtWebEngine",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9479944,
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21365cea255712f3f0e49936f0bfcacf3ff8d5e09b1569a4c5f89c7ea00e0833",
          "md5": "e1abe42dd8313984e4d5f17fbc310907",
          "sha256": "9a5151f179e041470bd06eadd8e6011cd27f8c40c9e16d050bc5b8cf0d5849a7"
        },
        "downloads": -1,
        "filename": "PySideFlask-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1abe42dd8313984e4d5f17fbc310907",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5013,
        "upload_time": "2021-02-21T09:14:50",
        "upload_time_iso_8601": "2021-02-21T09:14:50.643943Z",
        "url": "https://files.pythonhosted.org/packages/21/36/5cea255712f3f0e49936f0bfcacf3ff8d5e09b1569a4c5f89c7ea00e0833/PySideFlask-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46521b64167f73976245be680230194ea916ad25ecad245b86cbd3e55cb3c88c",
          "md5": "4a1fbb07acb8067a96ffec9b15dd418e",
          "sha256": "f8a59c75b9da2e138a57c0c6ceb24d38bf1c2c8b20683c859aaf309d460fb8a0"
        },
        "downloads": -1,
        "filename": "PySideFlask-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a1fbb07acb8067a96ffec9b15dd418e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4578,
        "upload_time": "2021-02-21T09:14:51",
        "upload_time_iso_8601": "2021-02-21T09:14:51.852015Z",
        "url": "https://files.pythonhosted.org/packages/46/52/1b64167f73976245be680230194ea916ad25ecad245b86cbd3e55cb3c88c/PySideFlask-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21365cea255712f3f0e49936f0bfcacf3ff8d5e09b1569a4c5f89c7ea00e0833",
        "md5": "e1abe42dd8313984e4d5f17fbc310907",
        "sha256": "9a5151f179e041470bd06eadd8e6011cd27f8c40c9e16d050bc5b8cf0d5849a7"
      },
      "downloads": -1,
      "filename": "PySideFlask-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1abe42dd8313984e4d5f17fbc310907",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 5013,
      "upload_time": "2021-02-21T09:14:50",
      "upload_time_iso_8601": "2021-02-21T09:14:50.643943Z",
      "url": "https://files.pythonhosted.org/packages/21/36/5cea255712f3f0e49936f0bfcacf3ff8d5e09b1569a4c5f89c7ea00e0833/PySideFlask-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46521b64167f73976245be680230194ea916ad25ecad245b86cbd3e55cb3c88c",
        "md5": "4a1fbb07acb8067a96ffec9b15dd418e",
        "sha256": "f8a59c75b9da2e138a57c0c6ceb24d38bf1c2c8b20683c859aaf309d460fb8a0"
      },
      "downloads": -1,
      "filename": "PySideFlask-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4a1fbb07acb8067a96ffec9b15dd418e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 4578,
      "upload_time": "2021-02-21T09:14:51",
      "upload_time_iso_8601": "2021-02-21T09:14:51.852015Z",
      "url": "https://files.pythonhosted.org/packages/46/52/1b64167f73976245be680230194ea916ad25ecad245b86cbd3e55cb3c88c/PySideFlask-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}