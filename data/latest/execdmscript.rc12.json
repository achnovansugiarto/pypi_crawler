{
  "info": {
    "author": "miile7",
    "author_email": "miile7@gmx.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# execdmscript\n\nA Python module for executing DM-Script from Python in \n[Gatan Microscopy Suite (GMS) (Digital Micrograph) Version 3.4 or later](https://www.gatan.com/products/tem-analysis/gatan-microscopy-suite-software).\n\n**Table of Contents**\n\n1. [Foreword](#foreword)\n2. [Usage](#usage)\n\t1. [Step by step examples](#step-by-step-examples)\n\t\t1. [Hello world](#example-0-hello-world)\n\t\t2. [Getting started](#example-1-getting-started)\n\t\t3. [Outhouse code](#example-2-outhouse-code)\n\t\t4. [TagGroups and TagLists](#example-3-taggroups-and-taglists)\n\t\t5. [Debug your code](#example-4-debug-your-code)\n\t\t6. [Multiple scripts](#example-5-multiple-scripts)\n\t\t7. [More examples](#more-examples)\n\t2. [One glance example](#one-glance-example)\n\t3. [Helper functions](#helper-functions)\n\t\t1. [Type mapping](#type-mapping)\n\t\t2. [Escaping code](#escaping-code)\n\t\t3. [Converting TagGroups](#converting-taggroups)\n\t\t4. [Get global tag](#get-global-tag)\n\t\t5. [Remove global tags](#remove-global-tags)\n3. [Installation](#installation)\n4. [License and Publications](#license-and-publications)\n\n## Foreword\n\nThis module is created because I needed to use DM-Scripts Dialogs in my project. But this\nproject was written in Python. Because there is no Python implementation for dialogs I \ndecided to execute DM-Script that creates the dialogs. But then getting data from one to\nthe other programming language was more difficult than I thought. This module tries to \nsolve those problems and hide verything away.\n\n## Usage\n\n> **Important**:\n> \n> This module is for running DM-Script scripts **within and only within** the Python \n> interpreter of a running GMS (DigitalMicrograph). So you must only use this when you \n> are in a Python script window in GMS (DigitalMicrograph). This **does not work in the \n> command line!**\n\nAfter the [installation](#installation) you can execute the following examples. Check out\nthe [one glance example](#one-glance-example) if you used this module already and just \nforgot how it worked. If you have never dealt with Python in GMS or you are new to \n`execdmscript`, check out the [step by step examples](#step-by-step-examples) below.\n\n### Step by step examples\n\nThe following examples are taken from the *examples* directory which can also be found on \nthe [github page](https://github.com/miile7/execdmscript/tree/master/example).\n\n#### Example 0: Hello World\n\nBecause of tradition, let's do the hello world first. Obviously this is a lot more \ncomplicated than actually needed, but it teaches the basics.\n\n```python\nimport execdmscript\n\n# set the text in python\nworld_text = \"Hello World!\"\n\n# create an executable dm-script code\ndmscript = \"\"\"\nOKDialog(text);\nresult(text);\n\"\"\"\n\n# save which variables should be passed from python to dm-script and how they should be \n# called\nsetvars = {\n\t\"text\": world_text\n}\n\n# execute the script\nwith execdmscript.exec_dmscript(dmscript, setvars=setvars):\n\tpass\n```\n\n#### Example 1: Getting started\n\nAfter the [installation](#installation) open GMS (DigitalMicrograph). Create a new script\nwindow (<kbd>Ctrl</kbd> + <kbd>K</kbd>) and make sure it is set to *Python*  as the \nscripting language. For this example it does not matter if the script is executed in the \nbackground or not. Now type in (or copy) the following code:\n\n```python\nimport execdmscript\n\n# `a` and `b` are given in python\na = 10\nb = 20\n\n# This is the dm-script to execute\ndmscript = \"number c = a + b;\"\n\n# This are the variables the upper dm-script will know\nsetvars = {\"a\": a, \"b\": b}\n\n# This are the variables this python script will know after the execution\nreadvars = {\"c\": int}\n\nwith execdmscript.exec_dmscript(dmscript, setvars=setvars, readvars=readvars) as script:\n\t# now we can access `c` because it is set in the `readvars`\n\tprint(script[\"c\"])\n```\n\nThis script calculates `a` + `b`. But `a` and `b` are Python variables while `c` is a \nvariable created in dm-script.\n\nThe `setvars` is a `dict` that takes the variable name as the key and the variable value\nas its value. These values with their names will be accessable in the executed dm-script.\nValues of the types `int`, `float`, `bool`, `str`, `list` and `dict` are\nsupported. They will be converted to their dm-script equivalent. This means `int`, `float`\nand `bool` will be of the type `number`. `str` will be `string`. And `list` and `dict` \nwill both be `TagGroup`s but the former will be a `TagList` and the latter will be a \n\"true\" `TagGroup`.\n\nThe `readvars` is a `dict` that takes the dm-script variable name as the key and the type\nto expect as the value. This means that all the variables that have a key in the \n`readvars` and are defined in the executed dm-script will later be accessable in Python.\n\n#### Example 2: Outhouse code\n\n> **Important**:\n> \n> When you are trying the example code, make sure you always know the complete path of \n> the dm-script *.s file in your Python script. It is not enough to have the file name \n> only!\n\nNow let's go a little bit more complicated. There is no need to execute a sum operation in\ndm-script.\n\nThis time we will create two files. The first one will be a dm-script file, the second one\nwill be a Python file again.\n\nOpen GMS and create a new dm-script window. Enter the following code and save it to \nsomewhere where it is easy to find, say `C:\\testdmscript2.s`.\n\n```c\nTagGroup dlg, dlg_items, field;\n\ndlg = DLGCreateDialog(\"Headlines of website\", dlg_items);\n\n// Note that the `text` is neither initialized nor declared, that is important as it will\n// be done by the python script!\nfield = DLGCreateLabel(text);\nfield.DLGWidth(100);\nfield.DLGHeight(4);\n\ndlg.DLGAddElement(field);\n\nalloc(UIFrame).init(dlg).pose();\n```\n\nAs said, save the file somewhere, say `C:\\testdmscript2.s`.\n\nNow open a new Python script window in GMS. Create the following code:\n\n```python\nimport execdmscript\n\nimport urllib.request\nimport html.parser\nimport re\n\n# get the text of example.com\ncontent = str(urllib.request.urlopen(\"https://www.example.com/\").read())\n\n# get all headlines\nmatches = re.findall(r\"<h([\\d])>([^<]+)</h\\1>\", content)\nif matches is not None:\n\theadlines = [x[1] for x in matches]\n\ttext = \"Headlines:\\n- \" + \"\\n- \".join(headlines)\nelse:\n\theadlines = []\n\ttext = \"*No headlines found*\"\n\n# Tell the dm-script the variables it should know\nsetvars = {\"text\": text}\n\n# set your filepath, needs to be the complete path, not just the name!\npath = r\"C:\\testdmscript2.s\"\n\nwith execdmscript.exec_dmscript(path, setvars=setvars):\n\tpass\n```\n\nThis will create a dm-script dialog that shows all headlines of the website stated in the\ncode, in this case `example.com`.\n\nThis time the dm-script is in a separate file which is strongly recommended. This way the \ndm-script file can be debugged a lot easier. Also the code is better to read and \nstructured in a better way.\n\nAlso as one can see, this are just a few Python lines but will be very hard to get with \npure dm-script. On the other hand there no GMS-dialogs in Python.\n\n#### Example 3: TagGroups and TagLists\n\n> **Important**:\n> \n> When you are trying the example code, make sure you always know the complete path of \n> the dm-script *.s file in your Python script. It is not enough to have the file name \n> only!\n\nWhile Python has `list`s and `dict`s (and a lot more of course) for dealing with multiple\nvalues, dm-script does that with `TagList`s and `TagGroup`s. Both are more less equivalent\neven though the handling is very different. Therefore `execdmscript` converts both types\nautomatically.\n\nOpen GMS again and create a new Python script window. Create the following code:\n\n```c\nTagGroup dlg, dlg_items, wrapper, inputs;\n\ndlg = DLGCreateDialog(\"Add text to the headlines\", dlg_items);\nwrapper = DLGCreateGroup();\nwrapper.DLGTableLayout(2, headlines.TagGroupCountTags(), 0);\n\ninputs = NewTagList();\nfor(number i = 0; i < headlines.TagGroupCountTags(); i++){\n\tstring text;\n\tif(headlines.TagGroupGetIndexedTagAsString(i, text)){\n\t\tTagGroup label = DLGCreateLabel(\"Text for \" + text, 25);\n\t\twrapper.DLGAddElement(label);\n\n\t\tTagGroup input = DLGCreateStringField(\"\");\n\t\tinput.DLGIdentifier(\"input-\" + i);\n\t\twrapper.DLGAddElement(input);\n\t\tinputs.TagGroupInsertTagAsTagGroup(infinity(), input);\n\t}\n}\n\ndlg.DLGAddElement(wrapper);\n\nobject dialog = alloc(UIFrame).init(dlg);\n\n// make sure the variable always exists, it may be empty but \n// it has to be declared!\nTagGroup headline_texts = NewTagList();\n\nif(dialog.pose()){\n\tfor(number i = 0; i < headlines.TagGroupCountTags(); i++){\n\t\tstring text;\n\t\tif(headlines.TagGroupGetIndexedTagAsString(i, text)){\n\t\t\tTagGroup input;\n\t\t\tinputs.TagGroupGetIndexedTagAsTagGroup(i, input);\n\n\t\t\tTagGroup vals = NewTagGroup();\n\t\t\tvals.TagGroupCreateNewLabeledTag(\"headline\");\n\t\t\tvals.TagGroupSetTagAsString(\"headline\", text);\n\n\t\t\tvals.TagGroupCreateNewLabeledTag(\"text\");\n\t\t\tvals.TagGroupSetTagAsString(\"text\", input.DLGGetStringValue());\n\n\t\t\theadline_texts.TagGroupInsertTagAsTagGroup(infinity(), vals);\n\t\t}\n\t}\n}\n```\n\nThis creates a dialog that shows all headlines in the `headlines` `TagList` and allows to\nadd texts to them. Save this file with any name, say `C:\\testdmscript3.s`.\n\nNow open a new Python script window in GMS. Create the following code:\n\n```python\nimport execdmscript\n\nheadlines = [\n\t\"Section 1\",\n\t\"Section 2\", \n\t\"Section 3\"\n]\n\n# Tell the dm-script the variables it should know\nsetvars = {\"headlines\": headlines}\n\n# Get the list of headlines\nreadvars = {\"headline_texts\": list}\n\n# set your filepath, needs to be the complete path, not just the name!\npath = r\"C:\\testdmscript3.s\"\n\ntext = \"\"\nwith execdmscript.exec_dmscript(path, setvars=setvars, readvars=readvars) as script:\n\tfor section in script[\"headline_texts\"]:\n\t\ttext += \"**{}**\\n{}\\n\\n\".format(section[\"headline\"], section[\"text\"])\n\nif text != \"\":\n\tprint(text)\nelse:\n\tprint(\"Could not find any sections.\")\n```\n\nThe `script[\"headline_texts\"]` is a list containing `dict`s because `TagList`s are \nconverted to `list`s automatically and `TagGroup`s to `dict`s.\n\n#### Example 4: Debug your code\n\nThe downside of using combined scripts is that one cannot really see what the dm-script \ninterpreter is actually doing. For this problem there is a debug mode. Simply use\n`execdmscript.exec_dmscript(code, debug=True, debug_file=file_path)` to get the dm-script\nfile that normally would be executed.\n\nLet's assume that the file `C:\\testdmscript4.s` exists and contains any code (if you want \nyou can create this file and see what happens). To debug the complete file check out the \nfollowing example Python code:\n\n```python\nimport execdmscript\n\n# Tell the dm-script the variables it should know\nsetvars = {\"variable1\": 1, \"variable2\": \"B\", \"variable3\": False}\n\n# Get the list of headlines\nreadvars = {\"variable4\": str, \"variable5\": int}\n\n# set your filepath, needs to be the complete path, not just the name!\npath = r\"C:\\testdmscript4.s\"\n\nwith execdmscript.exec_dmscript(path, setvars=setvars, readvars=readvars, debug=True,\n\t\t\t\t\t\t\t\tdebug_file=r\"C:\\debugfile.s\") as script:\n\tpass\n```\n\nThis code will not execute dm-script code! But it will instead create the file at \n`C:\\debugfile.s` that includes all the synchronization mechanisms that the `setvars` and\n`readvars` need to work. This way you may find and fix bugs. Note that the `debug_file` \nis ignored when `debug` is not `True`.\n\nTo be able to run the code with and without python, one can use the start and end markers\nto tell `execdmscript` to ignore the current part. In fact, this part will simply be \ncommented out before execution. \n\nCreate the following code and save it as `C:\\testdmscript4.2.s`.\n\n```c\n// @execdmscript.ignore.start\n// all the code here will never be executed except this\n// dm-script code is executed manually\nstring variable1 = \"Test\";\nnumber variable2 = 1;\nresult(\"This will not be printed when executed via python.\\n\")\n// @execdmscript.ignore.end\n\nresult(variable1 + \"\\n\");\nresult(variable2 + \"\\n\");\n\n// @execdmscript.ignore.start\nresult(\"Ignored again\")\n// @execdmscript.ignore.end\n```\n\nThis is a valid dm-script file. It can be executed as it is. But as the comment already \nsais, the python execution via `execdmscript` will not see the lines between \n`@execdmscript.ignore.start` and `@execdmscript.ignore.end`.\n\nOne can see this by executing the above file in GMS. Then create the following python file\nand execute it in GMS.\n\n```python\nimport execdmscript\n\n# Tell the dm-script the variables it should know\nsetvars = {\"variable1\": \"Executed from python\", \"variable2\": 99999}\n\n# set your filepath, needs to be the complete path, not just the name!\npath = r\"C:\\testdmscript4.2.s\"\n\nwith execdmscript.exec_dmscript(path, setvars=setvars):\n\tpass\n```\n\nThe variables have the values as defined in python. But there is no error, even though \nthe variables were defined already. In addition, the `result()` function calls between \nthe ignore markers are not executed.\n\n#### Example 5: Multiple scripts\n\nSometimes it is useful to structure your dm-script code too, especially if you have bigger\nfiles to include. You can add as many dm-scripts directly or as files as you want. Note \nthat the `readvars` and the `setvars` will be defined before and after all scripts. So you \nmust not use variable names in one of the scripts that are in the `setvars` and all \nvariables in the `readvars` have to be delcared in exactly one file (not all `readvars` \nhave to be in the same file.\n\nCreate the dm-script file `C:\\testdmscript5.s` with the following content:\n```c\nnumber e = d + b;\n```\n\nNow create a new Python script with this code:\n```python\nimport execdmscript\n\ndmscript1 = \"number c = a + b;\"\ndmscript2 = \"number d = c + a;\"\ndmscript3 = r\"C:\\testdmscript5.s\"\n\nsetvars = {\"a\": 1, \"b\": 2}\nreadvars = {\"c\": int, \"d\": int, \"e\": int}\n\nwith execdmscript.exec_dmscript(dmscript1, dmscript2, dmscript3, setvars=setvars, \n\t\t\t\t\t\t\t\treadvars=readvars) as script:\n\tprint(\"c:\", script[\"c\"])\n\tprint(\"d:\", script[\"d\"])\n\tprint(\"e:\", script[\"e\"])\n```\n\n#### More Examples\n\nFor more examples check out the github page. There you can find the following example \nscripts with more complicated behaviour:\n\n- example_separate_thread.py: Show the `separate_thread` parameter of \n  `execdmscript.exec_dmscript()` by creating a progress dialog with dm-script that shows \n  the progress a python thread does\n- example_combined.py: Show multiple scripts with a more complicated situation, this \n  basically takes all above scenes in one example\n\n### One glance example\n\nThe following example shows the basic usage:\n\n```python\ntry:\n\tfrom execdmscript import exec_dmscript\n\n\t# some script to execute\n\tscript = \"OKDialog(start_message)\"\n\tscript_file = \"path/to/script.s\"\n\n\t# variables that will be defined for the scripts (and readable later on in Python)\n\tsv = {\"start_message\": \"Starting now!\"}\n\t# variables the dm-script defines and that should be readable in the Python file\n\trv = {\"selected_images\": list,\n\t\t\"options\": \"TagGroup\",\n\t\t\"show_message\": \"nUmBeR\"}\n\n\twith exec_dmscript(script, script_file, readvars=rv, setvars=sv) as script:\n\t\t# all variables can be accessed via indexing `script` or by using \n\t\t# `script.synchronized_vars`, note that `script` is also iterable like a dict\n\t\tprint(script[\"start_message\"])\n\t\tprint(script[\"selected_images\"])\n\t\tprint(script[\"options\"])\n\t\tprint(script[\"show_message\"])\n\nexcept Exception as e:\n\t# dm-script error messages only show the error type but not the message\n\tprint(\"Exception: \", e)\n\n\timport traceback\n\ttraceback.print_exc()\n```\n\n### Helper functions\n\n`execdmscript` defines some helper functions. Those provide often used and needed \nfunctions related to executing dm-script code from Python.\n\n#### Type mapping\n\nTo find the Python type for a dm-script type or the other way around, `execdmscript` \nprovides the `get_dm_type()` and the `get_python_type()` functions. Both functions take \na \"type expression\" and return the corresponding type in the specified language. The \n`get_dm_type()` takes a python type and returns the type for dm-script, `get_python_type()`\ntakes the dm-script type and returns the python type.\n\n`get_python_type()` will return a python `type` object and take strings as arguments. \n`get_dm_type()` takes both, strings and python `type` objects and returns strings.\n\nThe following example shows the usage:\n\n```python\nimport execdmscript\n\nexecdmscript.get_dm_type(int) # returns \"number\"\nexecdmscript.get_dm_type(str) # returns \"string\"\nexecdmscript.get_dm_type(\"text\") # returns \"string\"\nexecdmscript.get_dm_type(list) # returns \"TagGroup\"\nexecdmscript.get_dm_type(dict) # returns \"TagGroup\"\n\nexecdmscript.get_dm_type(bool, for_taggroup=False) # returns \"number\"\nexecdmscript.get_dm_type(bool, for_taggroup=True) # returns \"Boolean\"\n\nexecdmscript.get_python_type(\"int\") # returns <class 'int'>\nexecdmscript.get_python_type(\"Integer\") # returns <class 'int'>\nexecdmscript.get_python_type(\"TagGroup\") # returns <class 'dict'>\nexecdmscript.get_python_type(\"TagList\") # returns <class 'list'>\n```\n\nThe `get_dm_type()` supports the `for_taggroup` parameter. This toggles whether the \nreturned string can be used in `TagGroupSetTagAs...()` or if it is the type definition to \ncreate a new variable in dm-script.\n\n#### Escaping code\n\nWhen creating dm-script code dynamically, which is often the case when using dm-script \ncode form Python, there can be problems with escaping. For this `execdmscript` contains \nthe `escape_dm_string()` function. This function escapes strings that should be included\nin a string in dm-script. The `escape_dm_variable()` function escapes variable names in \na way that they are allowed in dm-script code.\n\n```python\nimport execdmscript\n\nvar = \"invalid variable name\"\ntext = \"\"\"This is \"a\"\nvery\nproblematic text\"\"\"\n\nvar = execdmscript.escape_dm_variable(var)\ntext = execdmscript.escape_dm_string(text)\n\ndm_code = \"string {} = \\\"{}\\\"\".format(var, text)\n\nprint(dm_code)\n```\n\nUsing those two functions changes the dm-script code form (without escaping)\n```C\nstring invalid variable name = \"This is \"a\"\nvery\nproblematic text\"\n```\nto the valid dm-script code\n```C\nstring invalid_variable_name = \"This is \\\"a\\\"\\nvery\\nproblematic text\"\n```\n\n#### Converting TagGroups\n\nTo convert dm-script `TagGroup`s from and to `dict`s or `list`s, `execdmscript` offers the \n`convert_to_taggroup()` and the `convert_from_taggroup()` functions. Note that those \nfunctions only work with `TagGroup`s created in Python. Persistent tags are not supported.\nCopying persitent tags to a local variable is not possible (GMS 3.4).\n\n`convert_from_taggroup()` takes a `Py_TagGroup` as a parameter and returns a dict or list.\nNested `TagGroup`s are supported. The following example shows the usage:\n```python\nimport pprint\nimport DigitalMicrograph as DM\nimport execdmscript\n\n# create a test TagGroup\ntaggroup = DM.NewTagGroup()\ntaggroup.SetTagAsString(\"key1\", \"First text value\")\ntaggroup.SetTagAsFloat(\"key2\", -823.83)\n\ntaggroup2 = DM.NewTagGroup()\ntaggroup2.SetTagAsString(\"inner-key1\", \"Another text\")\ntaggroup2.SetTagAsBoolean(\"inner-key2\", False)\ntaggroup.SetTagAsTagGroup(\"key3\", taggroup2)\n\ntaggroup3 = DM.NewTagList()\ntaggroup3.InsertTagAsText(0, \"Value in list\")\ntaggroup3.InsertTagAsText(1, \"Next value in list\")\ntaggroup3.InsertTagAsLong(2, 1234)\ntaggroup.SetTagAsTagGroup(\"key4\", taggroup3)\n\n# convert to a dict\ndict_data = execdmscript.convert_from_taggroup(taggroup)\n# show the converted dict\npprint.pprint(dict_data)\n\n# convert to a list\nlist_data = execdmscript.convert_from_taggroup(taggroup3)\npprint.pprint(list_data)\n```\n\n`convert_to_taggroup()` is the opposite of `convert_from_taggroup()`. It takes a python\n(nested) `dict` or `list` and creates a `Py_TagGroup`.\n\n```python\nimport DigitalMicrograph as DM\nimport execdmscript\n\ndata = {\n\t'key1': 'First text value',\n\t'key2': -823.8300170898438,\n\t'key3': {'inner-key1': 'Another text', 'inner-key2': False},\n\t'key4': ['Value in list', 'Next value in list', 1234]\n}\n\ntaggroup = execdmscript.convert_to_taggroup(data)\n\ntaggroup.OpenBrowserWindow(False)\n```\n\nThe following code shows an example application. It allows to modify image tags by the \nuser. Since `TagGroup`s cannot be travelled through in Python code, this is the only \npossibility to show the current tag structure (which is unknown because it comes from the \ncamera) to the user. Adding tags shows another example for the use of \n`execdmscript.exec_dm_script()`.\n\n```python\ntry:\n\timport time\n\timport pprint\n\timport numpy as np\n\timport DigitalMicrograph as DM\n\timport execdmscript\n\n\tdef recordImage() -> DM.Py_Image:\n\t\t\"\"\"Record an image with the attatched camera.\n\n\t\tThis is a dummy implementation and creates a random\n\t\timage with random tags.\n\t\t\"\"\"\n\n\t\t# create random data within [0..255]\n\t\timg_data = np.random.rand(64, 64)\n\t\timg_data = (img_data * 255).astype(np.uint8)\n\n\t\t# create Py_Image\n\t\timg = DM.CreateImage(img_data)\n\t\t# set some tags\n\t\timg.GetTagGroup().SetTagAsFloat(\"Acquire time\", time.time())\n\n\t\treturn img\n\n\t# record the image\n\timg = recordImage()\n\n\t# the tags to set to the image\n\ttags = {}\n\t# prepare a dialog\n\tdm_code = \"number add_tag = TwoButtonDialog(\\\"Do you want to add more tags?\\\\nCurrent Tags:\\\\n{}\\\", \\\"Add Tag\\\", \\\"Done\\\");\"\n\t# whether to add another tag\n\tadd_tag = True\n\twhile add_tag:\n\t\t# ask for the tag name and value\n\t\ttag_name = input(\"Please enter a tag name to add to the image\")\n\t\ttag_value = input(\"Please enter the value for the tag '{}'\".format(tag_name))\n\n\t\ttags[tag_name] = tag_value\n\n\t\t# format the current tags, escape quotes to prevent destroying the string in \n\t\t# the dm-script code\n\t\ttag_str = execdmscript.escape_dm_string(pprint.pformat(tags))\n\n\t\t# ask whether to add another tag\n\t\tadd_tag = False\n\t\twith execdmscript.exec_dmscript(dm_code.format(tag_str), readvars={\"add_tag\": int}) as script:\n\t\t\tadd_tag = script[\"add_tag\"]\n\n\t# convert the tags to a tag group object\n\ttags = execdmscript.convert_to_taggroup(tags)\n\t# apply the tag group object to the image\n\timg.GetTagGroup().DeleteAllTags()\n\timg.GetTagGroup().CopyTagsFrom(tags)\n\n\timg.ShowImage()\nexcept Exception as e:\n\t# dm-script error messages only show the error type but not the message\n\tprint(\"Exception: \", e)\n\n\timport traceback\n\ttraceback.print_exc()\n```\n\n#### Get global tag\n\nFor accessing the persistent global tags `execdmscript` provides the `get_persistent_tag()`\nfunction. This function allows to directly access the persistent tags and receive the \nvalue in the Python environment already converted to the python variable type. This \nincludes the base types plus `TagGroup`s and `TagList`s which are automatically converted\nto `dict`s and `list`s.\n\nThe `path` parameter of the `get_persistent_tag()` function specifies which value to get.\nIf no `path` is given, the current global tags will completely be returned as a Python \n`dict`. Note that updating this dict does not change the persistent tags!\n\nThe following example shows how this works:\n```python\nimport execdmscript\n\n# get a tag value by the path with : as a separator\nprogram_name = execdmscript.get_persistent_tag(\"Private:Configuration:ApplicationName\")\n# get a tag value by using a tuple with the path components\nprogram_version = execdmscript.get_persistent_tag((\"Private\", \"Configuration\", \"ApplicationVersion_2\"))\nprint(\"This is {} with version {}.\".format(program_name, program_version))\n\n# get another value\nprint(\"The current save path is {}.\".format(execdmscript.get_persistent_tag(\"Private:Current Directory\")))\n\n# get a TagGroup which is automatically converted to a dict\nsettings_dict = execdmscript.get_persistent_tag(\"Private:CreateNewDialog\")\nprint(\"When creating a new image, the following settings apply:\")\nfor name, val in settings_dict.items():\n\tprint(\"  {}: {}\".format(name, val))\n\n# when the tag does not exist, a KeyError is raised\ntry:\n\texecdmscript.get_persistent_tag(\"This:persistent:tag:does:not:exist\")\nexcept KeyError as e:\n\tprint(\"This tag does not exist: {}\".format(e))\n```\n\n#### Remove global Tags\n\nSometimes it is necessary or convenient to set values to global tags. `execdmscript` \nitself makes heavy use of this. To remove the remaining global tag after performing the \nsynchronization, `execdmscript` offers the `remove_global_tag()` function sice this does \nnot work with plain python.\n\nThis function can be used like the following:\n```python\nimport DigitalMicrograph as DM\nimport execdmscript\n\ntagname = \"new_global_tag\"\nDM.GetPersistentTagGroup().SetTagAsString(tagname, \"test value\")\n\n# shows that the tag with the tagname exists\nDM.GetPersistentTagGroup().OpenBrowserWindow(False)\n\nexecdmscript.remove_global_tag(tagname)\n\n#  the global tag with the tagname is removed again\nDM.GetPersistentTagGroup().OpenBrowserWindow(False)\n```\n\n### Example execution without installation\n\nIf you want to try out the module or if you don't want to install it, make sure to add the \nimport path to `sys.path`. You can add the path manually:\n\n```python\nimport os\nimport sys\n\n# add the path to the execdmscript directory (so in execdmscript-dir there is the file \n# __init__.py and the file execdmscript.py)\nsys.path.insert(0, \"path/to/execdmscript-dir/\")\n```\n\nIf you only know the path relatively to your executing file, you can find the `__file__` \n(which does not exist in GMS) like the following code:\n\n```python\ntry:\n\timport DigitalMicrograph as DM\n\tin_digital_micrograph = True\nexcept ImportError:\n\tin_digital_micrograph = False\n\nfile_is_missing = False\ntry:\n\tif __file__ == \"\" or __file__ == None:\n\t\tfile_is_missing = True\nexcept NameError:\n\tfile_is_missing = True\n\nif in_digital_micrograph and file_is_missing:\n\t# the name of the tag is used, this is deleted so it shouldn't matter anyway\n\tfile_tag_name = \"__python__file__\"\n\t# the dm-script to execute, double curly brackets are used because of the \n\t# python format function\n\tscript = (\"\\n\".join((\n\t\t\"DocumentWindow win = GetDocumentWindow(0);\",\n\t\t\"if(win.WindowIsvalid()){{\",\n\t\t\t\"if(win.WindowIsLinkedToFile()){{\",\n\t\t\t\t\"TagGroup tg = GetPersistentTagGroup();\",\n\t\t\t\t\"if(!tg.TagGroupDoesTagExist(\\\"{tag_name}\\\")){{\",\n\t\t\t\t\t\"number index = tg.TagGroupCreateNewLabeledTag(\\\"{tag_name}\\\");\",\n\t\t\t\t\t\"tg.TagGroupSetIndexedTagAsString(index, win.WindowGetCurrentFile());\",\n\t\t\t\t\"}}\",\n\t\t\t\t\"else{{\",\n\t\t\t\t\t\"tg.TagGroupSetTagAsString(\\\"{tag_name}\\\", win.WindowGetCurrentFile());\",\n\t\t\t\t\"}}\",\n\t\t\t\"}}\",\n\t\t\"}}\"\n\t))).format(tag_name=file_tag_name)\n\n\t# execute the dm script\n\tDM.ExecuteScriptString(script)\n\n\t# read from the global tags to get the value to the python script\n\tglobal_tags = DM.GetPersistentTagGroup()\n\tif global_tags.IsValid():\n\t\ts, __file__ = global_tags.GetTagAsString(file_tag_name);\n\t\tif s:\n\t\t\t# delete the created tag again\n\t\t\tDM.ExecuteScriptString(\n\t\t\t\t\"GetPersistentTagGroup().\" + \n\t\t\t\t\"TagGroupDeleteTagWithLabel(\\\"{}\\\");\".format(file_tag_name)\n\t\t\t)\n\t\telse:\n\t\t\tdel __file__\n\n\ttry:\n\t\t__file__\n\texcept NameError:\n\t\t# set a default if the __file__ could not be received\n\t\t__file__ = \"\"\n\nimport os\nimport sys\n\nif __file__ != \"\":\n\t# add the parent directory to the system path so the execdmscript file\n\t# can be imported\n\tbase_path = str(os.path.dirname(os.path.dirname(__file__)))\n\n\tif base_path not in sys.path:\n\t\tsys.path.insert(0, base_path)\n\nimport execdmscript\n```\n\nThe upper code works for file structures like\n```\n+ base\n|   + execdmscript\n|   |   - __init__.py\n|   |   - execdmscript.py\n|   + code\n|   |   - your-file-with-the-upper-code.py\n```\n\n\n## Installation\n\n### Via PIP (Recommended)\n\nYou can install `execdmscript` via [PyPI](https://pypi.org/project/execdmscript/). To \ninstall it into the GMS virtual Python environment execute the following commands:\n\n```cmd\nconda activate GMS_VENV_Python\nPython -m pip install execdmscript\n```\n\n### Manually\n\nTo manually install `execdmscript` download the `execdmscript` directory (the one that \ncontains the `__init__.py` and the `execdmscript.py`) and install them\n\n1. *Recommended if manually* in one of the GMS plugin directories by\n    1. using the *File* Menu and then click on *Install Script File* \n       (Check out GMS Help in the chapter *Scripting* > *Installing Scripts and Plugins*) \n       *or*\n    2. placing the `execdmscript` directory in the plugin directory manually. Plugin \n       directories are `C:\\Users\\UserName\\AppData\\Local\\Gatan\\Plugins` or in \n       `C:\\InstallationDir\\Gatan\\Plugins`. To find all plugin directories execute the \n       following code:\n       ```c\n       string dirs = \"Plugin Directories:\\n\\n\"; \n       string dir;\n\n        for(number i = 1011; i >= 1008; i--){\n            try{\n                dir = GetApplicationDirectory(i, 0);\n                dirs += dir + \"\\n\"\n            }\n            catch{\n                break;\n            }\n        }\n\n        result(dirs);\n        OKDialog(dirs);\n        ```\n       *or*\n1. in the miniconda plugin directory (On windows normally in \n   `%ProgramData%\\Miniconda3\\envs\\GMS_VENV_PYTHON\\Lib\\site-packages`, then place the \n   `execdmscript` directory here)\n\n## License and Publications\n\nThis module is licensed under [Mozilla Public License](https://www.mozilla.org/en-US/MPL/2.0/).\n\nThis means you can use the code for whatever you want. But please do not publish my code \nas your work.\n\nIf you want to publish papers, do so. There is no need to cite me. If you still want to \ncite me (for any reason), please contact me via Github. For any questions please also \ncontact me on Github.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/miile7/execdmscript",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "execdmscript",
    "package_url": "https://pypi.org/project/execdmscript/",
    "platform": "",
    "project_url": "https://pypi.org/project/execdmscript/",
    "project_urls": {
      "Homepage": "https://github.com/miile7/execdmscript"
    },
    "release_url": "https://pypi.org/project/execdmscript/1.1.9/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A python module for executing DM-Script from python in the Gatan Microscopy Suite® (GMS) (Digital Micrograph)",
    "version": "1.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9809424,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12595677e788314b855f8626b30f5ae2f11ff67f222a7e31453e77f22ce729d4",
          "md5": "af192dee20937ab14cfc8cb1e391cc97",
          "sha256": "64d24c00dfa85f919c9a1d8cbe33b620281f9fe18584c8f354c45553dbd57d35"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af192dee20937ab14cfc8cb1e391cc97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20068,
        "upload_time": "2020-08-30T10:45:10",
        "upload_time_iso_8601": "2020-08-30T10:45:10.627278Z",
        "url": "https://files.pythonhosted.org/packages/12/59/5677e788314b855f8626b30f5ae2f11ff67f222a7e31453e77f22ce729d4/execdmscript-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccaad0af72c03ff78dcc5a663924e68219dfc65997f7d7792060a8d362beedc6",
          "md5": "04446703e4552fa3bf6a1e7145136b89",
          "sha256": "756bc28826a22080db039aa1380a010f51dc267f21de187e32ee88bf3c079d27"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04446703e4552fa3bf6a1e7145136b89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 16599,
        "upload_time": "2020-08-30T10:45:13",
        "upload_time_iso_8601": "2020-08-30T10:45:13.182441Z",
        "url": "https://files.pythonhosted.org/packages/cc/aa/d0af72c03ff78dcc5a663924e68219dfc65997f7d7792060a8d362beedc6/execdmscript-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13b6561d5a7c422c0f11971ab77c8ee4dc5ca2da0c7d409ccc590e079bf568fa",
          "md5": "0043c618e60b0b0bd7091874896c2d81",
          "sha256": "ca3af29404587820d004e096062109bb0045a86ce1ab49118660d78727b660bf"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0043c618e60b0b0bd7091874896c2d81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20637,
        "upload_time": "2020-09-01T08:01:55",
        "upload_time_iso_8601": "2020-09-01T08:01:55.306789Z",
        "url": "https://files.pythonhosted.org/packages/13/b6/561d5a7c422c0f11971ab77c8ee4dc5ca2da0c7d409ccc590e079bf568fa/execdmscript-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f72bb91dbbc64e158b8faf01fcd927d74bbb49fa003be8f675c56bf246b991df",
          "md5": "4ec89aa830c8bd03a6a00badee772aa6",
          "sha256": "cfa39140c1320c927015a3e68f47f1172934025666c45508fc56a91c485a92cf"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ec89aa830c8bd03a6a00badee772aa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 17213,
        "upload_time": "2020-09-01T08:01:56",
        "upload_time_iso_8601": "2020-09-01T08:01:56.672623Z",
        "url": "https://files.pythonhosted.org/packages/f7/2b/b91dbbc64e158b8faf01fcd927d74bbb49fa003be8f675c56bf246b991df/execdmscript-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ff01fa81063fa8fa698dd5d59bba726e19585ebabdd49e8a0301a1d76593ab",
          "md5": "2f09b135e038d68ad68f2c2e2cd06cb4",
          "sha256": "23ee865f26671661a03d3f3bd56eddfe0e401d4457735ac5b483b071da04bfa7"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f09b135e038d68ad68f2c2e2cd06cb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21765,
        "upload_time": "2020-09-02T07:27:38",
        "upload_time_iso_8601": "2020-09-02T07:27:38.298779Z",
        "url": "https://files.pythonhosted.org/packages/a6/ff/01fa81063fa8fa698dd5d59bba726e19585ebabdd49e8a0301a1d76593ab/execdmscript-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb1cfaa35a5687c32eabbed8c92f15a00c62b07be1133f5afcfe0115f08257a1",
          "md5": "81044849b7d01754cf0f616acb917405",
          "sha256": "7238fa0c7362c79af94e3d1d386eec3f851c2e73c7b496f0a0ddc4dcf4d1f3ff"
        },
        "downloads": -1,
        "filename": "execdmscript-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81044849b7d01754cf0f616acb917405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18284,
        "upload_time": "2020-09-02T07:27:40",
        "upload_time_iso_8601": "2020-09-02T07:27:40.322797Z",
        "url": "https://files.pythonhosted.org/packages/eb/1c/faa35a5687c32eabbed8c92f15a00c62b07be1133f5afcfe0115f08257a1/execdmscript-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "346323b3c1578d31741cdbe3f10355b989cb6b9ce9a7d453ff66178a2a3499fc",
          "md5": "be612e3b46dee6d68393c75e92010ce0",
          "sha256": "e66b19c62d881efbce61a86d19ba7cc284ffb154eb97458ff3b7ab139ad43e04"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be612e3b46dee6d68393c75e92010ce0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26738,
        "upload_time": "2020-09-09T11:18:22",
        "upload_time_iso_8601": "2020-09-09T11:18:22.466296Z",
        "url": "https://files.pythonhosted.org/packages/34/63/23b3c1578d31741cdbe3f10355b989cb6b9ce9a7d453ff66178a2a3499fc/execdmscript-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f21d0cb3b1e99b2a69d6b199370ef0837eecad59d616765c7ec2712adfef492",
          "md5": "8a8dbb5b0ff7063610dd741568f9e1cd",
          "sha256": "e6794d3e28c232eef9d873701121487873514d1b70de63f9a5ca47d70f9031a8"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a8dbb5b0ff7063610dd741568f9e1cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 27940,
        "upload_time": "2020-09-09T11:18:27",
        "upload_time_iso_8601": "2020-09-09T11:18:27.619584Z",
        "url": "https://files.pythonhosted.org/packages/1f/21/d0cb3b1e99b2a69d6b199370ef0837eecad59d616765c7ec2712adfef492/execdmscript-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f666b7c63b48365f588910b09c2c1dc7f5e3b3b27cb0cd5052910d067509bb5",
          "md5": "34a070ba90834ed4c6989df8801d094d",
          "sha256": "31f85cb107d9ec3d351220073383c776693faeb0e877ebb099640019eede8def"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34a070ba90834ed4c6989df8801d094d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26763,
        "upload_time": "2020-09-09T12:51:26",
        "upload_time_iso_8601": "2020-09-09T12:51:26.546870Z",
        "url": "https://files.pythonhosted.org/packages/6f/66/6b7c63b48365f588910b09c2c1dc7f5e3b3b27cb0cd5052910d067509bb5/execdmscript-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffacf73fa9c4fddd934736ac8db3b78b7d3a17df028669dc5f812d777b73951d",
          "md5": "53affb6c919d0cc59a9178739b2aab0f",
          "sha256": "293c7d98723a918b88eb2af8da77aec2c849ef304b58ef894a8e481eaf5bacea"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.2.win-amd64.zip",
        "has_sig": false,
        "md5_digest": "53affb6c919d0cc59a9178739b2aab0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 37753,
        "upload_time": "2020-09-09T12:51:33",
        "upload_time_iso_8601": "2020-09-09T12:51:33.746808Z",
        "url": "https://files.pythonhosted.org/packages/ff/ac/f73fa9c4fddd934736ac8db3b78b7d3a17df028669dc5f812d777b73951d/execdmscript-1.1.2.win-amd64.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "403cafbc039cf95c4da0c53319bc39691da6d6846e7a6c0d23d58a72106339f6",
          "md5": "15f55963f682bd09e0ce34e293d77606",
          "sha256": "c5f91713cb4ed7cc0243e1a7baa68628ee941b13b177b1a135fa38489ea25707"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15f55963f682bd09e0ce34e293d77606",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 27263,
        "upload_time": "2020-09-10T10:45:25",
        "upload_time_iso_8601": "2020-09-10T10:45:25.211623Z",
        "url": "https://files.pythonhosted.org/packages/40/3c/afbc039cf95c4da0c53319bc39691da6d6846e7a6c0d23d58a72106339f6/execdmscript-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae0e99ee92f56e9c457cf4b2e512d9872cf85c8061fe19da759fb6096f27bc8e",
          "md5": "e6562ffc0be10e063fc5335245dfdd60",
          "sha256": "d15e5f0d7e3bbad288c6878a202282c36b6cbef8616eff644416a60285f13dd2"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e6562ffc0be10e063fc5335245dfdd60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 28443,
        "upload_time": "2020-09-10T10:45:32",
        "upload_time_iso_8601": "2020-09-10T10:45:32.367119Z",
        "url": "https://files.pythonhosted.org/packages/ae/0e/99ee92f56e9c457cf4b2e512d9872cf85c8061fe19da759fb6096f27bc8e/execdmscript-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d23779592d3280358ff01ecc8c54b2a7da5bd447d636248c70af28eeb3ab9fa",
          "md5": "3ecd6653c9d497e71a97837d8c3912de",
          "sha256": "a05aa1d6f947e8180d90b562eb308b747f5634f9efc3e6137b9988f85f1d5d0e"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ecd6653c9d497e71a97837d8c3912de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 30802,
        "upload_time": "2020-10-21T11:13:55",
        "upload_time_iso_8601": "2020-10-21T11:13:55.545144Z",
        "url": "https://files.pythonhosted.org/packages/8d/23/779592d3280358ff01ecc8c54b2a7da5bd447d636248c70af28eeb3ab9fa/execdmscript-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26312dc18d87c17818bf243c793a62c9d81a6c94830625c87640c706e28e5f3c",
          "md5": "7b8335c9c9f377782b288244ebf6769c",
          "sha256": "7e1238f055488f0d89df259fb2d5a1cc2b1c50db5bf1493b5f71d411933666e6"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7b8335c9c9f377782b288244ebf6769c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 37853,
        "upload_time": "2020-10-21T11:13:58",
        "upload_time_iso_8601": "2020-10-21T11:13:58.355538Z",
        "url": "https://files.pythonhosted.org/packages/26/31/2dc18d87c17818bf243c793a62c9d81a6c94830625c87640c706e28e5f3c/execdmscript-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0602e0b058a092a05172b7a49e21faf00c1aeba294687cf38d5c029a720b6cb",
          "md5": "b428d59fe186ee77977c8cad167b8556",
          "sha256": "9af8efa67b797428e4ad60cb057c371c7e030df07831bf5810c5f133974e7736"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b428d59fe186ee77977c8cad167b8556",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 31701,
        "upload_time": "2020-11-11T11:12:50",
        "upload_time_iso_8601": "2020-11-11T11:12:50.593538Z",
        "url": "https://files.pythonhosted.org/packages/f0/60/2e0b058a092a05172b7a49e21faf00c1aeba294687cf38d5c029a720b6cb/execdmscript-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c563489bd42d1fecdc05dfa13330aa8d2a29764fb1920d920f520de80fe4926",
          "md5": "958b8fcc05247f3dfb6a1bc8cd020bc4",
          "sha256": "1c96326c3d339829c6c7c37bd11cbf29f573dc19e51de3ae56d4bbd98a4a9da0"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "958b8fcc05247f3dfb6a1bc8cd020bc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 38726,
        "upload_time": "2020-11-11T11:12:53",
        "upload_time_iso_8601": "2020-11-11T11:12:53.838617Z",
        "url": "https://files.pythonhosted.org/packages/4c/56/3489bd42d1fecdc05dfa13330aa8d2a29764fb1920d920f520de80fe4926/execdmscript-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ac948e69cfeca4d55dc078797b07f6f4742205ef9f01495725f16644a188cb2",
          "md5": "f05a9227356469155a80eb31a4758e60",
          "sha256": "d7ddebb2d3e1b2d4e72646652b03d6e15186290876707abfb4e6d8b2e6962ae2"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f05a9227356469155a80eb31a4758e60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 33561,
        "upload_time": "2020-11-19T10:57:40",
        "upload_time_iso_8601": "2020-11-19T10:57:40.464836Z",
        "url": "https://files.pythonhosted.org/packages/9a/c9/48e69cfeca4d55dc078797b07f6f4742205ef9f01495725f16644a188cb2/execdmscript-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b82311fca48d7d38d26de444a6b96d576029d694dd9cae106c0e310e34d2db24",
          "md5": "0c68067a4bb7ae8ec2e98cf4ff1a81e2",
          "sha256": "3bdb77950c577b82b58b0b32a57e8a90b601380e4736383aadb2d0649a9633a8"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0c68067a4bb7ae8ec2e98cf4ff1a81e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44411,
        "upload_time": "2020-11-19T10:57:43",
        "upload_time_iso_8601": "2020-11-19T10:57:43.027794Z",
        "url": "https://files.pythonhosted.org/packages/b8/23/11fca48d7d38d26de444a6b96d576029d694dd9cae106c0e310e34d2db24/execdmscript-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b6b901cc4290d14edb0680634cca5bdfebe3e89b0cfbaee456b2c3b7d1691a0",
          "md5": "a49343f00fced02c010e6f158f6f6f3b",
          "sha256": "6e4eb13878ca48619d0d2349f2d65de6d117428637dd3d39e2dd909d3c4248ee"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a49343f00fced02c010e6f158f6f6f3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 33025,
        "upload_time": "2020-12-17T14:19:48",
        "upload_time_iso_8601": "2020-12-17T14:19:48.316932Z",
        "url": "https://files.pythonhosted.org/packages/8b/6b/901cc4290d14edb0680634cca5bdfebe3e89b0cfbaee456b2c3b7d1691a0/execdmscript-1.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba20d09d6904233545ef7eed527adb8bda9602717abf641fac36003e60c98ad0",
          "md5": "3fdf886fa7680b34b391de094465046e",
          "sha256": "518a265b08ad0672128bd2eb1515756d848063b2a1005eb5ad835d06a77497e1"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3fdf886fa7680b34b391de094465046e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 43814,
        "upload_time": "2020-12-17T14:19:50",
        "upload_time_iso_8601": "2020-12-17T14:19:50.264117Z",
        "url": "https://files.pythonhosted.org/packages/ba/20/d09d6904233545ef7eed527adb8bda9602717abf641fac36003e60c98ad0/execdmscript-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "986ee221721b18b3ad6aaf9d3e15b4198d1fe5d9cb841b5898d19a5a21373f57",
          "md5": "0a58323f31a66175842786f518818330",
          "sha256": "4a59b3d9cc7ada538ac0bf40481f6a753a7f29a95e14bb0054994cf91bd0e6ef"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a58323f31a66175842786f518818330",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 33067,
        "upload_time": "2020-12-20T15:31:57",
        "upload_time_iso_8601": "2020-12-20T15:31:57.748432Z",
        "url": "https://files.pythonhosted.org/packages/98/6e/e221721b18b3ad6aaf9d3e15b4198d1fe5d9cb841b5898d19a5a21373f57/execdmscript-1.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deac8c97f98068b9aba6eaa5514927fb57654d4b74b0ee74e49a3e3030985355",
          "md5": "2b55c1ffcdda0dfb34b45c82af479907",
          "sha256": "254c0894aadccfcc8b582316648876df3d9d3756545364af09dea6a16182b7f9"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2b55c1ffcdda0dfb34b45c82af479907",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 43865,
        "upload_time": "2020-12-20T15:31:59",
        "upload_time_iso_8601": "2020-12-20T15:31:59.309682Z",
        "url": "https://files.pythonhosted.org/packages/de/ac/8c97f98068b9aba6eaa5514927fb57654d4b74b0ee74e49a3e3030985355/execdmscript-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f013eb1dfd0d4cea8d03473b42124a708405d88b3bacd24ad32ef9bf221deba",
          "md5": "ad0cfd5bc5bc749d77e537becf3e9542",
          "sha256": "cecddcfc4c2faabac70752ea8e2ce3fe973f7f060819dfc59c75e5267658c88a"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad0cfd5bc5bc749d77e537becf3e9542",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 33112,
        "upload_time": "2021-03-18T14:33:28",
        "upload_time_iso_8601": "2021-03-18T14:33:28.431957Z",
        "url": "https://files.pythonhosted.org/packages/6f/01/3eb1dfd0d4cea8d03473b42124a708405d88b3bacd24ad32ef9bf221deba/execdmscript-1.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e93d4b29d3a88bdccbdf74d172d8554a3291dc9d31631fef173199acaf9ed959",
          "md5": "ed6579066a263173a1be87f1f63c6522",
          "sha256": "7f5440added3c89738581ff38e40ea5c31f960d4bf01c0800b7929eb3d1d3530"
        },
        "downloads": -1,
        "filename": "execdmscript-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ed6579066a263173a1be87f1f63c6522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 43929,
        "upload_time": "2021-03-18T14:33:29",
        "upload_time_iso_8601": "2021-03-18T14:33:29.960494Z",
        "url": "https://files.pythonhosted.org/packages/e9/3d/4b29d3a88bdccbdf74d172d8554a3291dc9d31631fef173199acaf9ed959/execdmscript-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f013eb1dfd0d4cea8d03473b42124a708405d88b3bacd24ad32ef9bf221deba",
        "md5": "ad0cfd5bc5bc749d77e537becf3e9542",
        "sha256": "cecddcfc4c2faabac70752ea8e2ce3fe973f7f060819dfc59c75e5267658c88a"
      },
      "downloads": -1,
      "filename": "execdmscript-1.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad0cfd5bc5bc749d77e537becf3e9542",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 33112,
      "upload_time": "2021-03-18T14:33:28",
      "upload_time_iso_8601": "2021-03-18T14:33:28.431957Z",
      "url": "https://files.pythonhosted.org/packages/6f/01/3eb1dfd0d4cea8d03473b42124a708405d88b3bacd24ad32ef9bf221deba/execdmscript-1.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e93d4b29d3a88bdccbdf74d172d8554a3291dc9d31631fef173199acaf9ed959",
        "md5": "ed6579066a263173a1be87f1f63c6522",
        "sha256": "7f5440added3c89738581ff38e40ea5c31f960d4bf01c0800b7929eb3d1d3530"
      },
      "downloads": -1,
      "filename": "execdmscript-1.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "ed6579066a263173a1be87f1f63c6522",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 43929,
      "upload_time": "2021-03-18T14:33:29",
      "upload_time_iso_8601": "2021-03-18T14:33:29.960494Z",
      "url": "https://files.pythonhosted.org/packages/e9/3d/4b29d3a88bdccbdf74d172d8554a3291dc9d31631fef173199acaf9ed959/execdmscript-1.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}