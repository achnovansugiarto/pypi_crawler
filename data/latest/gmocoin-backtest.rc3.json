{
  "info": {
    "author": "10mohi6",
    "author_email": "10.mohi.6.y@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Office/Business :: Financial :: Investment"
    ],
    "description": "# gmocoin-backtest\n\n[![PyPI](https://img.shields.io/pypi/v/gmocoin-backtest)](https://pypi.org/project/gmocoin-backtest/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![codecov](https://codecov.io/gh/10mohi6/gmocoin-backtest-python/branch/main/graph/badge.svg?token=5U127JNHX9)](https://codecov.io/gh/10mohi6/gmocoin-backtest-python)\n[![Build Status](https://travis-ci.com/10mohi6/gmocoin-backtest-python.svg?branch=main)](https://travis-ci.com/10mohi6/gmocoin-backtest-python)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/gmocoin-backtest)](https://pypi.org/project/gmocoin-backtest/)\n[![Downloads](https://pepy.tech/badge/gmocoin-backtest)](https://pepy.tech/project/gmocoin-backtest)\n\ngmocoin-backtest is a python library for backtest with gmocoin fx btc trade technical analysis on Python 3.7 and above.\n\nbacktest data from [here](https://api.coin.z.com/data/trades/)\n\n## Installation\n\n    $ pip install gmocoin-backtest\n\n## Usage\n\n### basic run\n```python\nfrom gmocoin_backtest import Backtest\n\nclass MyBacktest(Backtest):\n    def strategy(self):\n        fast_ma = self.sma(period=5)\n        slow_ma = self.sma(period=25)\n        # golden cross\n        self.sell_exit = self.buy_entry = (fast_ma > slow_ma) & (\n            fast_ma.shift() <= slow_ma.shift()\n        )\n        # dead cross\n        self.buy_exit = self.sell_entry = (fast_ma < slow_ma) & (\n            fast_ma.shift() >= slow_ma.shift()\n        )\n\nMyBacktest(from_date=\"2021-07-15\", to_date=\"2021-08-15\").run()\n```\n![basic.png](https://raw.githubusercontent.com/10mohi6/gmocoin-backtest-python/main/tests/basic.png)\n\n### advanced run\n```python\nfrom gmocoin_backtest import Backtest\nfrom pprint import pprint\n\nclass MyBacktest(Backtest):\n    def strategy(self):\n        rsi = self.rsi(period=10)\n        ema = self.ema(period=20)\n        atr = self.atr(period=20)\n        lower = ema - atr\n        upper = ema + atr\n        self.buy_entry = (rsi < 30) & (self.df.C < lower)\n        self.sell_entry = (rsi > 70) & (self.df.C > upper)\n        self.sell_exit = ema > self.df.C\n        self.buy_exit = ema < self.df.C\n\nbt = MyBacktest(\n    symbol=\"BTC\", # (default=BTC_JPY)\n    sqlite_file_name=\"backtest.sqlite3\", # (default=backtest.sqlite3)\n    from_date=\"2021-07-15\", # (default=\"\")\n    to_date=\"2021-08-15\", # (default=\"\")\n    size=0.1, # (default=0.001)\n    interval=\"1H\", # 5-60S(second), 1-60T(minute), 1-24H(hour) (default=1T)\n    data_dir=\"data\", # data directory (default=data)\n)\npprint(bt.run(), sort_dicts=False)\n```\n```python\n{'total profit': -76320.2,\n 'total trades': 25,\n 'win rate': 56.0,\n 'profit factor': 0.549,\n 'maximum drawdown': 105907.1,\n 'recovery factor': -0.721,\n 'riskreward ratio': 0.431,\n 'sharpe ratio': -0.226,\n 'average return': -0.075,\n 'stop loss': 0,\n 'take profit': 0}\n```\n![advanced.png](https://raw.githubusercontent.com/10mohi6/gmocoin-backtest-python/main/tests/advanced.png)\n\n\n## Supported indicators\n- Simple Moving Average 'sma'\n- Exponential Moving Average 'ema'\n- Moving Average Convergence Divergence 'macd'\n- Relative Strenght Index 'rsi'\n- Bollinger Bands 'bbands'\n- Stochastic Oscillator 'stoch'\n- Average True Range 'atr'\n\n## Strategy examples\n### MACD\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        macd, signal = self.macd(fast_period=12, slow_period=26, signal_period=9)\n        self.sell_exit = self.buy_entry = (macd > signal) & (\n            macd.shift() <= signal.shift()\n        )\n        self.buy_exit = self.sell_entry = (macd < signal) & (\n            macd.shift() >= signal.shift()\n        )\n```\n### Bollinger Bands\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        upper, mid, lower = self.bbands(period=20, band=2)\n        self.sell_exit = self.buy_entry = (upper > self.df.C) & (\n            upper.shift() <= self.df.C.shift()\n        )\n        self.buy_exit = self.sell_entry = (lower < self.df.C) & (\n            lower.shift() >= self.df.C.shift()\n        )\n```\n### Stochastic\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        k, d = self.stoch(k_period=5, d_period=3)\n        self.sell_exit = self.buy_entry = (\n            (k > 20) & (d > 20) & (k.shift() <= 20) & (d.shift() <= 20)\n        )\n        self.buy_exit = self.sell_entry = (\n            (k < 80) & (d < 80) & (k.shift() >= 80) & (d.shift() >= 80)\n        )\n```\n### Moving average divergence rate\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        sma = self.sma(period=20)\n        ratio = (self.df.C - sma) / sma * 100\n        self.sell_exit = self.buy_entry = ratio > -5 & (ratio.shift() <= -5)\n        self.buy_exit = self.sell_entry = ratio < 5 & (ratio.shift() >= 5)\n```\n### Momentum\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        mom = self.df.C - self.df.C.shift(10)\n        self.sell_exit = self.buy_entry = mom > 0 & (mom.shift() <= 0)\n        self.buy_exit = self.sell_entry = mom < 0 & (mom.shift() >= 0)\n```\n### Donchian Channels\n```python\nclass MyBacktest(Backtest):\n    def strategy(self):\n        high = self.df.H.rolling(20).max()\n        low = self.df.L.rolling(20).min()\n        self.sell_exit = self.buy_entry = (high > self.df.C) & (\n            high.shift() <= self.df.C\n        )\n        self.buy_exit = self.sell_entry = (low < self.df.C) & (\n            low.shift() >= self.df.C\n        )\n```\n### Relative Vigor Index\n```python\nclass MyBacktest(Backtest):\n    def rvi(\n        self, *, period: int = 10, price: str = \"C\"\n    ) -> Tuple[pd.DataFrame, pd.DataFrame]:\n        co = self.df.C - self.df.O\n        n = (co + 2 * co.shift(1) + 2 * co.shift(2) + co.shift(3)) / 6\n        hl = self.df.H - self.df.L\n        d = (hl + 2 * hl.shift(1) + 2 * hl.shift(2) + hl.shift(3)) / 6\n        rvi = n.rolling(period).mean() / d.rolling(period).mean()\n        signal = (rvi + 2 * rvi.shift(1) + 2 * rvi.shift(2) + rvi.shift(3)) / 6\n        return rvi, signal\n\n    def strategy(self):\n        rvi, signal = self.rvi(period=5)\n        self.sell_exit = self.buy_entry = (rvi > signal) & (\n            rvi.shift() <= signal.shift()\n        )\n        self.buy_exit = self.sell_entry = (rvi < signal) & (\n            rvi.shift() >= signal.shift()\n        )\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/10mohi6/gmocoin-backtest-python",
    "keywords": "gmocoin trade python backtest fx strategy technical analysis jpy btc",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gmocoin-backtest",
    "package_url": "https://pypi.org/project/gmocoin-backtest/",
    "platform": "",
    "project_url": "https://pypi.org/project/gmocoin-backtest/",
    "project_urls": {
      "Homepage": "https://github.com/10mohi6/gmocoin-backtest-python"
    },
    "release_url": "https://pypi.org/project/gmocoin-backtest/0.1.2/",
    "requires_dist": [
      "requests",
      "numpy",
      "pandas",
      "matplotlib",
      "beautifulsoup4",
      "SQLAlchemy",
      "lxml"
    ],
    "requires_python": ">=3.7.0",
    "summary": "gmocoin-backtest is a python library         for backtest with gmocoin fx btc trade technical             analysis on Python 3.7 and above.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11178749,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d78c249f513300949bff0ea8a67dc292e6e3c25c8b59501b9dbc188cb0fa8e6c",
          "md5": "09ac34f5e15e9b7fe4b247644671b122",
          "sha256": "f0a88698c2fdf14d13810dc752566bb5ea6c729a87d8ef046633d0e00609c021"
        },
        "downloads": -1,
        "filename": "gmocoin_backtest-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09ac34f5e15e9b7fe4b247644671b122",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 4065,
        "upload_time": "2021-08-14T14:32:25",
        "upload_time_iso_8601": "2021-08-14T14:32:25.457535Z",
        "url": "https://files.pythonhosted.org/packages/d7/8c/249f513300949bff0ea8a67dc292e6e3c25c8b59501b9dbc188cb0fa8e6c/gmocoin_backtest-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79cc15f635b1a861a03cdcade7a962331ad9fe197b6d315880c566ddc2269e07",
          "md5": "e4a5f01c09deab9ed09901121795ea85",
          "sha256": "1978d2bf6bc0dbf1207b41539ffa55dc48f6d3a2dc591af362db57130340a872"
        },
        "downloads": -1,
        "filename": "gmocoin-backtest-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4a5f01c09deab9ed09901121795ea85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 4629,
        "upload_time": "2021-08-14T14:32:27",
        "upload_time_iso_8601": "2021-08-14T14:32:27.626576Z",
        "url": "https://files.pythonhosted.org/packages/79/cc/15f635b1a861a03cdcade7a962331ad9fe197b6d315880c566ddc2269e07/gmocoin-backtest-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "012ae4b3e6704c5d75b95777820f18eecf81314a9f2c774c524237c4bd9b3452",
          "md5": "86da4940570bc6d0e81c6f972ba4e36b",
          "sha256": "8229088b99858e14f87f2fc61feb2cc586c1f90f12807e05362016f7187def7d"
        },
        "downloads": -1,
        "filename": "gmocoin_backtest-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86da4940570bc6d0e81c6f972ba4e36b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 4062,
        "upload_time": "2021-08-14T14:54:30",
        "upload_time_iso_8601": "2021-08-14T14:54:30.030665Z",
        "url": "https://files.pythonhosted.org/packages/01/2a/e4b3e6704c5d75b95777820f18eecf81314a9f2c774c524237c4bd9b3452/gmocoin_backtest-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "457695cb58ce18e26ecdcf45a4ca0724b2516cb50ab00f00577314cd0b425375",
          "md5": "394282264019284479a45186aa7c3b64",
          "sha256": "4ad533b7482de5ddd1a21bdb0da5231aeb21cf1b319fe56ff3b5b997cf0f9a3b"
        },
        "downloads": -1,
        "filename": "gmocoin-backtest-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "394282264019284479a45186aa7c3b64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 4627,
        "upload_time": "2021-08-14T14:54:31",
        "upload_time_iso_8601": "2021-08-14T14:54:31.594587Z",
        "url": "https://files.pythonhosted.org/packages/45/76/95cb58ce18e26ecdcf45a4ca0724b2516cb50ab00f00577314cd0b425375/gmocoin-backtest-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb62ef41f528c3070a2a64076b5219f15ed6d02fdf655ab6a2f75268167ed8d5",
          "md5": "a49acad591ffd6d73c8a14069cbaa9c3",
          "sha256": "8fe35fab424a00376d95f33ce6f62358d32675aaaf667aff5e237cd2241d09ab"
        },
        "downloads": -1,
        "filename": "gmocoin_backtest-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a49acad591ffd6d73c8a14069cbaa9c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 8201,
        "upload_time": "2021-08-14T15:38:39",
        "upload_time_iso_8601": "2021-08-14T15:38:39.864190Z",
        "url": "https://files.pythonhosted.org/packages/cb/62/ef41f528c3070a2a64076b5219f15ed6d02fdf655ab6a2f75268167ed8d5/gmocoin_backtest-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e22c904835417f4cbdea745be13a160893f6a336b815e533ef633b5d4fcd2d57",
          "md5": "3d84e587915290f193dda867ddc11c07",
          "sha256": "a5329d0fd305033621f51f43e8849b81880c7c2ebc5a022715dd4e2e6a58d999"
        },
        "downloads": -1,
        "filename": "gmocoin-backtest-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d84e587915290f193dda867ddc11c07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 9235,
        "upload_time": "2021-08-14T15:38:41",
        "upload_time_iso_8601": "2021-08-14T15:38:41.656762Z",
        "url": "https://files.pythonhosted.org/packages/e2/2c/904835417f4cbdea745be13a160893f6a336b815e533ef633b5d4fcd2d57/gmocoin-backtest-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb62ef41f528c3070a2a64076b5219f15ed6d02fdf655ab6a2f75268167ed8d5",
        "md5": "a49acad591ffd6d73c8a14069cbaa9c3",
        "sha256": "8fe35fab424a00376d95f33ce6f62358d32675aaaf667aff5e237cd2241d09ab"
      },
      "downloads": -1,
      "filename": "gmocoin_backtest-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a49acad591ffd6d73c8a14069cbaa9c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 8201,
      "upload_time": "2021-08-14T15:38:39",
      "upload_time_iso_8601": "2021-08-14T15:38:39.864190Z",
      "url": "https://files.pythonhosted.org/packages/cb/62/ef41f528c3070a2a64076b5219f15ed6d02fdf655ab6a2f75268167ed8d5/gmocoin_backtest-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e22c904835417f4cbdea745be13a160893f6a336b815e533ef633b5d4fcd2d57",
        "md5": "3d84e587915290f193dda867ddc11c07",
        "sha256": "a5329d0fd305033621f51f43e8849b81880c7c2ebc5a022715dd4e2e6a58d999"
      },
      "downloads": -1,
      "filename": "gmocoin-backtest-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3d84e587915290f193dda867ddc11c07",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 9235,
      "upload_time": "2021-08-14T15:38:41",
      "upload_time_iso_8601": "2021-08-14T15:38:41.656762Z",
      "url": "https://files.pythonhosted.org/packages/e2/2c/904835417f4cbdea745be13a160893f6a336b815e533ef633b5d4fcd2d57/gmocoin-backtest-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}