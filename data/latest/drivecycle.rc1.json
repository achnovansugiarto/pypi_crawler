{
  "info": {
    "author": "Saadiq Mohiuddin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Drive Cycle\n\n*Drive Cycle* is python library that can be used to simulate trajectories (i.e. drive cycles) for public transit buses which can then be used for tasks like energy consumption simluations. \n\n### Installation\n\nInstall the package in editable mode:\n\n```pip install -e ./```\n\n### Import Module\n\n```python\nfrom drivecycle import drivecycle, trajectory, utils, plots\n```\n\n### Plot Simple Tragectories\n\nThe `Trajectory` class can be used to generate a trajectory given some contraints such as distance, acceleration and start/end/target velocities. This current release only models constant acceleration trajectories however other models may be added in future. \n\n```python\ntraj = trajectory.const_accel(vi=5, v_target=12, vf=8, di=0, df=150, step=0.1)\n\nplots.plot_vt(traj, \"plot_vt.png\")\n```\n\n##### Velocity - Distance Plot\n\n![VD-Plot](/images/plot_vd.png)\n\n##### Velocity - Time Plot\n\n![VT-Plot](/images/plot_vt.png)\n\n##### Distance - Time Plot\n\n![DT-Plot](/images/plot_dt.png)\n\n\n### Generate Drive Cycle\n\nTrajectories are grouped together to form drive cycles of a given path. See [sample](#sample-path-input) drive cycle input path. The `drivecycle` function may include a `stops` parameter that constrains which nodes (i.e. street interseciton or bus stops) the vehicle must stop at and for how long. \n\n```python\n# What nodes should we stop at and for how long (seconds)\nstop={\"bus_stop\":30,\"tertiary\":10}\n\n# Generate route drive cycle\nroute_drive_cycle = drivecycle.sequential(edges, stops=stop, stop_at_node=True, step=0.1)\n```\n\n#### Velocity - Distance Plot\n\n![VD-Plot](/images/drivecycle_vd.png)\n\n##### Velocity - Time Plot\n\n![VT-Plot](/images/drivecycle_vt.png)\n\n##### Distance - Time Plot\n\n![DT-Plot](/images/drivecycle_dt.png)\n\n### Sample Path Input\n\nA path graph data structure is created using OpenStreetMap (OSM) taxonomy. `intersection` denotes the edge that intersects the end node and may be another OSM `way` or simply a bus stop. For example `\"intersection\":[\"primary\"]` indicates a primary road intersecting the end node. \n\n```python\npath = [\n    {\n        \"way_id\":1,\n        \"speed\":20,\n        \"length\":100,\n        \"intersection\":[\"primary\"]\n    },\n    {\n        \"way_id\":2,\n        \"speed\":20,\n        \"length\":145,\n        \"intersection\":[\"primary\"]\n    },\n    {\n        \"speed\":20,\n        \"length\":100,\n        \"intersection\":[\"bus_stop\"]\n    },\n    {\n        \"way_id\":3,\n        \"speed\":50,\n        \"length\":150,\n        \"intersection\":[\"primary\"]\n    },\n    {\n        \"way_id\":4,\n        \"speed\":50,\n        \"length\":100,\n        \"intersection\":[\"tertiary\"]\n    },\n    {\n        \"way_id\":5,\n        \"speed\":20,\n        \"length\":100,\n        \"intersection\":[\"service\",\"service\"]\n    }\n]\n\n```\n\n### Generate Path Graph\n\nDrive Cycle include utils that can used to generate graphs usting `networkx`. These are helpful to simplify path graphs to reduce redundant nodes and edges that may cause trajectories to fail. It can also be used to embed stops in a given path graph. \n\n```python\n\nstops=[100,367] #linearly referenced stop locations\n\nroute_graph = utils.Graph(edges)\n\nroute_graph.include_stops(stops)\nroute_graph.consolidate_intersections([\"tertiary\", \"secondary\", \"bus_stop\"])\nroute_graph.simplify_graph([\"tertiary\", \"secondary\", \"bus_stop\"])\n\nroute_graph.get_edges()\n\n```\n\n### Generate Drivecycle using Valhalla Trace Attributes\n\nValhalla's [map matching API](https://valhalla.readthedocs.io/en/latest/api/map-matching/api-reference/) can be used to match a bus route geometry to OSM way ids. This can help us determine both road speeds and intersection locations along a route. Using the map matching Trace Attributes action, we can get a list of OSM edges the bus route travels along:\n\n```python\n[{'end_node': {'type': 'street_intersection',\n   'elapsed_time': 0.698,\n   'intersecting_edges': [{'road_class': 'service_other',\n     'begin_heading': 204,\n     'to_edge_name_consistency': False,\n     'from_edge_name_consistency': False}]},\n  'length': 0.007,\n  'names': ['48 Avenue NW'],\n  'speed': 35,\n  'way_id': 463682703},\n {'end_node': {'type': 'street_intersection',\n   'elapsed_time': 7.607,\n   'intersecting_edges': [{'road_class': 'residential',\n     'begin_heading': 131,\n     'to_edge_name_consistency': False,\n     'from_edge_name_consistency': False}]},\n  'length': 0.067,\n  'names': ['48 Avenue NW'],\n  'speed': 35,\n  'way_id': 463682703}\n  .\n  .\n  .\n  ```\n\nUsing the drivecycle apis listed above we can then generate a simulation drivecycle of the entire route:\n\n![DT-Plot](/images/route_drivecycle.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "transit,drivecycle,velocity",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drivecycle",
    "package_url": "https://pypi.org/project/drivecycle/",
    "platform": "",
    "project_url": "https://pypi.org/project/drivecycle/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/drivecycle/0.1.0a0/",
    "requires_dist": [
      "numpy",
      "networkx",
      "scipy",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "Create drivecycles and energy consumption simulations for bus routes.",
    "version": "0.1.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12741388,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c696241b11ad9d784192c0e720ccbae817f7fd1bfa1ade451964c2ad17645d66",
          "md5": "6d82a0e3dd7b5332a76db843b50b562c",
          "sha256": "61051b45d51912e63c6cb53268063634dea0d015f0c1dcda461986ff3a1fd7f2"
        },
        "downloads": -1,
        "filename": "drivecycle-0.1.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d82a0e3dd7b5332a76db843b50b562c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22612,
        "upload_time": "2022-01-31T04:40:44",
        "upload_time_iso_8601": "2022-01-31T04:40:44.128400Z",
        "url": "https://files.pythonhosted.org/packages/c6/96/241b11ad9d784192c0e720ccbae817f7fd1bfa1ade451964c2ad17645d66/drivecycle-0.1.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb10630e69818f48c501e6dc7daaeebf97e202c4a2e915c1d36172d87b1f1859",
          "md5": "40a48e07958cb0024d1b634b906e56b0",
          "sha256": "0fa1aea6154cd3a72c83f11df9c25bd6b3c3d13e2b517ff6c52869ca074b6d61"
        },
        "downloads": -1,
        "filename": "drivecycle-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "40a48e07958cb0024d1b634b906e56b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22629,
        "upload_time": "2022-01-31T04:40:45",
        "upload_time_iso_8601": "2022-01-31T04:40:45.397030Z",
        "url": "https://files.pythonhosted.org/packages/eb/10/630e69818f48c501e6dc7daaeebf97e202c4a2e915c1d36172d87b1f1859/drivecycle-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c696241b11ad9d784192c0e720ccbae817f7fd1bfa1ade451964c2ad17645d66",
        "md5": "6d82a0e3dd7b5332a76db843b50b562c",
        "sha256": "61051b45d51912e63c6cb53268063634dea0d015f0c1dcda461986ff3a1fd7f2"
      },
      "downloads": -1,
      "filename": "drivecycle-0.1.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d82a0e3dd7b5332a76db843b50b562c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22612,
      "upload_time": "2022-01-31T04:40:44",
      "upload_time_iso_8601": "2022-01-31T04:40:44.128400Z",
      "url": "https://files.pythonhosted.org/packages/c6/96/241b11ad9d784192c0e720ccbae817f7fd1bfa1ade451964c2ad17645d66/drivecycle-0.1.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb10630e69818f48c501e6dc7daaeebf97e202c4a2e915c1d36172d87b1f1859",
        "md5": "40a48e07958cb0024d1b634b906e56b0",
        "sha256": "0fa1aea6154cd3a72c83f11df9c25bd6b3c3d13e2b517ff6c52869ca074b6d61"
      },
      "downloads": -1,
      "filename": "drivecycle-0.1.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "40a48e07958cb0024d1b634b906e56b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22629,
      "upload_time": "2022-01-31T04:40:45",
      "upload_time_iso_8601": "2022-01-31T04:40:45.397030Z",
      "url": "https://files.pythonhosted.org/packages/eb/10/630e69818f48c501e6dc7daaeebf97e202c4a2e915c1d36172d87b1f1859/drivecycle-0.1.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}