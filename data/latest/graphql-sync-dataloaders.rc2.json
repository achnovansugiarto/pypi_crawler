{
  "info": {
    "author": "Jonathan Kim",
    "author_email": "hello@jkimbo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# graphql-sync-dataloaders\n\nUse DataLoaders in your Python GraphQL servers that have to run in a sync\ncontext (i.e. Django).\n\n## Requirements\n\n* Python 3.8+\n* graphql-core >=3.2.0\n\n## Installation\n\nThis package can be installed from [PyPi](https://pypi.python.org/pypi/graphql-sync-dataloaders) by running:\n\n```bash\npip install graphql-sync-dataloaders\n```\n\n## Strawberry setup\n\nWhen creating your Strawberry Schema pass `DeferredExecutionContext` as the\n`execution_context_class` argument:\n\n```python\n# schema.py\nimport strawberry\nfrom graphql_sync_dataloaders import DeferredExecutionContext\n\nschema = strawberry.Schema(Query, execution_context_class=DeferredExecutionContext)\n```\n\nThen create your dataloaders using the `SyncDataLoader` class:\n\n```python\nfrom typing import List\n\nfrom graphql_sync_dataloaders import SyncDataLoader\n\nfrom .app import models  # your Django models\n\ndef load_users(keys: List[int]) -> List[User]:\n    qs = models.User.objects.filter(id__in=keys)\n    user_map = {user.id: user for user in qs}\n    return [user_map.get(key, None) for key in keys]\n\nuser_loader = SyncDataLoader(load_users)\n```\n\nYou can then use the loader in your resolvers and it will automatically be\nbatched to reduce the number of SQL queries:\n\n```python\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def get_user(self, id: strawberry.ID) -> User:\n        return user_loader.load(id)\n```\n\n**Note: You probably want to setup your loaders in context. See\nhttps://strawberry.rocks/docs/guides/dataloaders#usage-with-context for more\ndetails**\n\nThe following query will only make 1 SQL query:\n\n```graphql\nfragment UserDetails on User {\n  username\n}\n\nquery {\n  user1: getUser(id: '1') {\n    ...UserDetails\n  }\n  user2: getUser(id: '2') {\n    ...UserDetails\n  }\n  user3: getUser(id: '3') {\n    ...UserDetails\n  }\n}\n```\n\n\n## Graphene-Django setup\n\n**Requires graphene-django >=3.0.0b8**\n\nWhen setting up your GraphQLView pass `DeferredExecutionContext` as the\n`execution_context_class` argument:\n\n```python\n# urls.py\nfrom django.urls import path\nfrom graphene_django.views import GraphQLView\nfrom graphql_sync_dataloaders import DeferredExecutionContext\n\nfrom .schema import schema\n\nurlpatterns = [\n    path(\n        \"graphql\",\n        csrf_exempt(\n            GraphQLView.as_view(\n                schema=schema, \n                execution_context_class=DeferredExecutionContext\n            )\n        ),\n    ),\n]\n```\n\nThen create your dataloaders using the `SyncDataLoader` class:\n\n```python\nfrom typing import List\n\nfrom graphql_sync_dataloaders import SyncDataLoader\n\nfrom .app import models  # your Django models\n\ndef load_users(keys: List[int]) -> List[User]:\n    qs = models.User.objects.filter(id__in=keys)\n    user_map = {user.id: user for user in qs}\n    return [user_map.get(key, None) for key in keys]\n\nuser_loader = SyncDataLoader(load_users)\n```\n\nYou can then use the loader in your resolvers and it will automatically be\nbatched to reduce the number of SQL queries:\n\n```python\nimport graphene\n\nclass Query(graphene.ObjectType):\n    get_user = graphene.Field(User, id=graphene.ID)\n\n    def resolve_get_user(root, info, id):\n        return user_loader.load(id)\n```\n\nThe following query will only make 1 SQL query:\n\n```graphql\nfragment UserDetails on User {\n  username\n}\n\nquery {\n  user1: getUser(id: '1') {\n    ...UserDetails\n  }\n  user2: getUser(id: '2') {\n    ...UserDetails\n  }\n  user3: getUser(id: '3') {\n    ...UserDetails\n  }\n}\n```\n\n## How it works\n\nThis library implements a custom version of the graphql-core\n[ExecutionContext class](https://github.com/graphql-python/graphql-core/blob/5f6a1944cf6923f6249d1575f5b3aad87e629c66/src/graphql/execution/execute.py#L171)\nthat is aware of the `SyncFuture` objects defined in this library. A\n`SyncFuture` represents a value that hasn't been resolved to a value yet\n(similiar to asycnio Futures or JavaScript Promises) and that is what the\n`SyncDataLoader` returns when you call the `.load` function.\n\nWhen the custom `ExecutionContext` encounters a `SyncFuture` that gets returned\nfrom a resolver and it keeps track of them. Then after the first pass of the\nexection it triggers the `SyncFuture` callbacks until there are none left. Once\nthere are none left the data is fully resolved and can be returned to the\ncaller synchronously. This allows us to implement a `DataLoader` pattern that\nbatches calls to a loader function, and it allows us to do this in a fully\nsynchronously way.\n\n## Credits\n\n[@Cito](https://github.com/Cito) for graphql-core and for implementing the first version of this in https://github.com/graphql-python/graphql-core/pull/155\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jkimbo/graphql-sync-dataloaders",
    "keywords": "graphql,Django,strawberry-graphql",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphql-sync-dataloaders",
    "package_url": "https://pypi.org/project/graphql-sync-dataloaders/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphql-sync-dataloaders/",
    "project_urls": {
      "Homepage": "https://github.com/jkimbo/graphql-sync-dataloaders",
      "Repository": "https://github.com/jkimbo/graphql-sync-dataloaders"
    },
    "release_url": "https://pypi.org/project/graphql-sync-dataloaders/0.1.1/",
    "requires_dist": [
      "graphql-core (>=3.2.0,<3.3.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Use DataLoaders in your Python GraphQL servers that have to run in a sync context (i.e. Django).",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15241467,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac750e1c0eab83fbb240a12bb38f4ce8a47f175a1c585b71b0d5797e15c8a2c",
          "md5": "708a3655067b553f8dafb3c10c3151d1",
          "sha256": "6b2e23ac73aaafa77e41ae4d32fdaaca57c64d2e54f3c89c10f3a529f90eb07a"
        },
        "downloads": -1,
        "filename": "graphql_sync_dataloaders-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "708a3655067b553f8dafb3c10c3151d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 8009,
        "upload_time": "2022-09-23T13:05:06",
        "upload_time_iso_8601": "2022-09-23T13:05:06.352715Z",
        "url": "https://files.pythonhosted.org/packages/4a/c7/50e1c0eab83fbb240a12bb38f4ce8a47f175a1c585b71b0d5797e15c8a2c/graphql_sync_dataloaders-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83943c64641b7675896a4eee3d712f192cab4e986211ee8514f8032fc5aebebc",
          "md5": "4942a3778365daf61bf00c3b7174f406",
          "sha256": "c1a75d72abd7e81f120ca59d1532ac7ab58be64ac8ffed3e382fa65ecd457d97"
        },
        "downloads": -1,
        "filename": "graphql-sync-dataloaders-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4942a3778365daf61bf00c3b7174f406",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8480,
        "upload_time": "2022-09-23T13:05:04",
        "upload_time_iso_8601": "2022-09-23T13:05:04.830565Z",
        "url": "https://files.pythonhosted.org/packages/83/94/3c64641b7675896a4eee3d712f192cab4e986211ee8514f8032fc5aebebc/graphql-sync-dataloaders-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa045176bd5dabb56f835ed80ba2367e190575b3c9f8015f8d2ce9058a9a4fab",
          "md5": "cb6911576ea4d0edc8ba2d9ff8adbe12",
          "sha256": "f003f1184417acf156b2f73c4f0e76487514a455143a22ab796c110db4bc4693"
        },
        "downloads": -1,
        "filename": "graphql_sync_dataloaders-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb6911576ea4d0edc8ba2d9ff8adbe12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 8126,
        "upload_time": "2022-09-28T13:16:36",
        "upload_time_iso_8601": "2022-09-28T13:16:36.971765Z",
        "url": "https://files.pythonhosted.org/packages/aa/04/5176bd5dabb56f835ed80ba2367e190575b3c9f8015f8d2ce9058a9a4fab/graphql_sync_dataloaders-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01ba329bda79f7876804d03da659f9b6317ff30f34a1a93c3f4b097f4038d618",
          "md5": "15016b305b6b6e3e3de30069f59d46ff",
          "sha256": "67c708e89c46b401188b773af055850278e4e1d5af2f66bf31d9bd0d504d95b9"
        },
        "downloads": -1,
        "filename": "graphql-sync-dataloaders-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15016b305b6b6e3e3de30069f59d46ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8596,
        "upload_time": "2022-09-28T13:16:35",
        "upload_time_iso_8601": "2022-09-28T13:16:35.699515Z",
        "url": "https://files.pythonhosted.org/packages/01/ba/329bda79f7876804d03da659f9b6317ff30f34a1a93c3f4b097f4038d618/graphql-sync-dataloaders-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa045176bd5dabb56f835ed80ba2367e190575b3c9f8015f8d2ce9058a9a4fab",
        "md5": "cb6911576ea4d0edc8ba2d9ff8adbe12",
        "sha256": "f003f1184417acf156b2f73c4f0e76487514a455143a22ab796c110db4bc4693"
      },
      "downloads": -1,
      "filename": "graphql_sync_dataloaders-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb6911576ea4d0edc8ba2d9ff8adbe12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 8126,
      "upload_time": "2022-09-28T13:16:36",
      "upload_time_iso_8601": "2022-09-28T13:16:36.971765Z",
      "url": "https://files.pythonhosted.org/packages/aa/04/5176bd5dabb56f835ed80ba2367e190575b3c9f8015f8d2ce9058a9a4fab/graphql_sync_dataloaders-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01ba329bda79f7876804d03da659f9b6317ff30f34a1a93c3f4b097f4038d618",
        "md5": "15016b305b6b6e3e3de30069f59d46ff",
        "sha256": "67c708e89c46b401188b773af055850278e4e1d5af2f66bf31d9bd0d504d95b9"
      },
      "downloads": -1,
      "filename": "graphql-sync-dataloaders-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "15016b305b6b6e3e3de30069f59d46ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 8596,
      "upload_time": "2022-09-28T13:16:35",
      "upload_time_iso_8601": "2022-09-28T13:16:35.699515Z",
      "url": "https://files.pythonhosted.org/packages/01/ba/329bda79f7876804d03da659f9b6317ff30f34a1a93c3f4b097f4038d618/graphql-sync-dataloaders-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}