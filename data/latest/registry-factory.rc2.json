{
  "info": {
    "author": "Peter Hartog",
    "author_email": "peter.hartog@hotmail.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: GPU :: NVIDIA CUDA :: 11.4",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# RegistryFactory\n\n![PyPI](https://img.shields.io/pypi/v/registry-factory)\n![PyPI](https://img.shields.io/pypi/pyversions/registry-factory)\n![PyPI](https://img.shields.io/github/license/aidd-msca/registry-factory)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1jlyEd1yxhvFCN82YqEFI82q2n0k_y06F?usp=sharing)\n\nAn abstract implementation of the software design pattern called registry proposed in (Hartog et. al., 2023),\nproviding a factory for creating registries to which categorically similar modules can be organized.\n\n**Content:**\n**[Installation](#installation)**\n| **[Dependencies](#dependencies)**\n| **[Usage](#usage)**\n| **[Citation](#citation)**\n| **[Code of Conduct](#code-of-conduct)**\n\n### Overview\n\nThe registry design patterns provides a way to organize modular\nfunctionalities dynamically and achieve a unified, reusable, and interchangeable interface.\nIt extends the Factory design pattern without the explicit class dependency.\nAdditionally, the registry supports optional meta information such as versioning, accreditation,\ntesting, etc.\nThe UML diagrams show the differences between the factory and registry patterns.\n\n<p align=\"center\">\n  <br>\n  <img alt=\"UML diagram of the pattern\" src=\"figures/registry_uml.png\">\n  <br>\n<i>Created with BioRender.com</i>\n </p>\n\n## Installation\n\nThe codebase can be installed from PyPI using `pip`, or your package manager of choice, with\n\n```bash\n$ pip install registry-factory\n```\n\n## Dependencies\n\nNo third-party dependencies are required to use the minimal functionality of the RegistryFactory.\n\n## Usage\n\nThe workflow of creating a registry is the following. 1) Identify a part of the code that can be\nseparated from the rest. 2) Modularize the section to be independent of the rest of the code. 3)\nCreate a registry from the RegistryFactory. 4) Register any modules that provide similar\nfunctionalities. 5) Call the optional module from the registry from the main workflow. See below.\n\n<p align=\"center\">\n  <br>\n  <img alt=\"Workflow\" src=\"figures/registry_creation.png\" width=\"750\">\n  <br>\n<i>Created with BioRender.com</i>\n </p>\n\nFurther available options and use-cases are described in the following sections.\n\n### A basic registry\n\nA simple registry is created as such.\n\n```Python\nfrom registry_factory.factory import Factory\n\nclass Registries(Factory):\n    TestRegistry = Factory.create_registry(shared=False)\n```\n\nNext, any models can be added to the ModelRegistry as such.\n\n```Python\nimport torch.nn as nn\n\n@Registries.ModelRegistry.register(call_name=\"simple_model\")\nclass SimpleModel(nn.Module):\n    ...\n```\n\n### Shared modules\n\nA registry can be created to store shared modules. Shared modules are modules that are used in multiple registries (e.g. a model and a module).\n\n```Python\nfrom registry_factory.factory import Factory\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(shared=True)\n    ModuleRegistry = Factory.create_registry(shared=True)\n\n@Registries.ModelRegistry.register(call_name=\"encoder\")\nclass Encoder(nn.Module):\n    ...\n\nRegistries.ModuleRegistry.get(\"encoder\")\n```\n\n### Arguments\n\nA registry can be created to store modules with arguments. The arguments can be set when registering a module.\n\n```Python\nfrom registry_factory.factory import Factory\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(shared=True)\n\n@Registries.ModelRegistry.register_arguments(key=\"simple_model\")\n@dataclass\nclass SimpleModelArguments:\n    input_size: int\n    output_size: int\n```\n\nOnly dataclasses can be used as arguments.\n\n### Versioning and accreditation\n\nTwo examples of additional meta information that can be stored in a registry is module versioning\nand accreditation regarding how and to who credit should be attributed the module.\n\nVersioning can be used to keep track of changes in a module. The version can be set when registering a module.\n\n```Python\nfrom registry_factory.factory import Factory\nfrom registry_factory.checks.versioning import Versioning\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(checks=[Versioning(forced=False)])\n\n@Registries.ModelRegistry.register(call_name=\"simple_model\", version=\"1.0.0\")\nclass SimpleModel(nn.Module):\n    ...\n\nRegistries.ModelRegistry.get(\"simple_model\") # Error, version not specified.\nRegistries.ModelRegistry.get(\"simple_model\", version=\"1.0.0\") # Returns the module.\n```\n\nAccreditation can be used to keep track of how and to who credit should be attributed the module.\nThe accreditation can be set when registering a module.\n\n```Python\nfrom registry_factory.factory import Factory\nfrom registry_factory.checks.accreditation import Accreditation\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(checks=[Accreditation(forced=False)])\n\n@Registries.ModelRegistry.register(\n    call_name=\"simple_model\",\n    author=\"Author name\",\n    credit_type=\"reference\",\n    additional_information=\"Reference published work in (link).\"\n)\nclass SimpleModel(nn.Module):\n    ...\n\nRegistries.ModelRegistry.get(\"simple_model\")  # Returns the module.\nRegistries.ModelRegistry.get_info(\"simple_model\")  # Returns all meta information including the accreditation information.\n```\n\nThe reason why accreditation can return an object without specification is because the accreditation does not have \"key\" information. In the versioning module, the version is the key information which is used to grab the module from the registry. Without specifying the version, the registry will not know which module to return. In the accreditation module, the author, credit type, and additional information are not key information. Without specifying the author, credit type, and additional information, the registry will still know which module to return.\n\n### Testing and Factory Patterns\n\nWe also provide defining tests and post checks applied to all modules in a registry. Define test\nor post checks as follows when creating the registry.\n\n```Python\nclass Pattern:\n    \"\"\"Test pattern.\"\"\"\n\n    def __init__(self):\n        pass\n\n    def hello_world(self):\n        \"\"\"Hello world.\"\"\"\n        print(\"Hello world\")\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(\n        shared=False, checks=[FactoryPattern(factory_pattern=Pattern, forced=False)]\n    )\n\n# No error, the module passes the test.\n@ModelRegistry.register(\n    call_name=\"hello_world\"\n)\nclass HelloWorld(Pattern):\n    pass\n\n# No error, the module passes the test.\n@ModelRegistry.register(\n    call_name=\"hello_world2\"\n)\nclass HelloWorld:\n    def __init__(self):\n        pass\n\n    def hello_world(self):\n        \"\"\"Hello world.\"\"\"\n        print(\"Hello world\")\n\n# Error, the module does not pass the test.\n@ModelRegistry.register(\n    call_name=\"hello_world2\"\n)\nclass HelloWorld:\n    def __init__(self):\n        pass\n\n    def goodday_world(self):\n        \"\"\"Good day world.\"\"\"\n        print(\"Good day world\")\n```\n\nThe factory also supports adding a callable test module to the registry. The callable test module can be specified to be called when a module is registered. The callable test module can be used to test the module when it is registered. The callable test module can be specified as follows when creating the registry.\n\n```Python\nclass CallableTestModule:\n    \"\"\"Module to test.\"\"\"\n\n    def __init__(self, key: str, obj: Any, **kwargs):\n        self.name = obj\n        self.assert_name()\n\n    def assert_name(self):\n        assert self.name == \"test\", \"Name is not test\"\n\n\n\nclass Registries(Factory):\n    ModelRegistry = Factory.create_registry(\n        shared=False, checks=[Testing(test_module=CallableTestModule, forced=True)]\n    )\n\nRegistries.ModelRegistry.register_prebuilt(key=\"name_test\", obj=\"test\") # No error, the module passes the test.\n```\n\n## Citation\n\nOur paper in which we propose the registry design pattern, on which this package is built, is currently\navailable as a preprint. If you make use of the design pattern or this package please cite our work accordingly.\n\n!!!!!! ADD PAPER LINK !!!!!!\n\n<!-- ```\n@inproceedings{hartog2023registry,\n    title={Registry: a design pattern to promote code reuse in machine learning-based drug discovery},\n    author={Hartog, Peter and Svensson, Emma and Mervin, Lewis and Genheden, Samuel and Engkvist, Ola and Tetko, Igor},\n    year={2023},\n    note={Preprint}\n}\n``` -->\n\n### Funding\n\nThe work behind this package has received funding from the European Union’s Horizon 2020\nresearch and innovation programme under the Marie Skłodowska-Curie\nActions, grant agreement “Advanced machine learning for Innovative Drug\nDiscovery (AIDD)” No 956832”. [Homepage](https://ai-dd.eu/).\n\n![plot](figures/aidd.png)\n\n## Code of Conduct\n\nEveryone interacting in the codebase, issue trackers, chat rooms, and mailing lists is expected to follow the\n[PyPA Code of Conduct](https://www.pypa.io/en/latest/code-of-conduct/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aidd-msca/registry-factory",
    "keywords": "registry,factory,codebase,module registry,accreditation system",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "registry-factory",
    "package_url": "https://pypi.org/project/registry-factory/",
    "platform": null,
    "project_url": "https://pypi.org/project/registry-factory/",
    "project_urls": {
      "Homepage": "https://github.com/aidd-msca/registry-factory",
      "Repository": "https://github.com/aidd-msca/registry-factory"
    },
    "release_url": "https://pypi.org/project/registry-factory/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Abstract codebase with utilities to register generic modules.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16648983,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3011bc3fdd07c51fbebf7da449e7c0dc2ff581055c61e7d929ea33da7f55934",
          "md5": "5887fe38d054d75715ac810ac6d43502",
          "sha256": "8ea1cffee25b64c52690e1000b0eb351cdcd9d280a52a04633f88bcb1e330ce1"
        },
        "downloads": -1,
        "filename": "registry_factory-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5887fe38d054d75715ac810ac6d43502",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14055,
        "upload_time": "2023-01-26T14:42:32",
        "upload_time_iso_8601": "2023-01-26T14:42:32.081092Z",
        "url": "https://files.pythonhosted.org/packages/a3/01/1bc3fdd07c51fbebf7da449e7c0dc2ff581055c61e7d929ea33da7f55934/registry_factory-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64fd2a49169f694bdbe9ac8db1de8c2552fbbe4f51e237cdce66a3ed7a7437b1",
          "md5": "266c7503c3a588d710656fd65cc54918",
          "sha256": "708c5aff1629dae95e12c56193ee5cb44bcda88e3fdc763ddc82b6e3ecf03c57"
        },
        "downloads": -1,
        "filename": "registry-factory-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "266c7503c3a588d710656fd65cc54918",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10421,
        "upload_time": "2023-01-26T14:42:30",
        "upload_time_iso_8601": "2023-01-26T14:42:30.215856Z",
        "url": "https://files.pythonhosted.org/packages/64/fd/2a49169f694bdbe9ac8db1de8c2552fbbe4f51e237cdce66a3ed7a7437b1/registry-factory-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac0dbedd6482e8472473d3f7cd556370e1bc434ddc412bdf83b7558c4e2c1b3",
          "md5": "c46be933bb6f4ff71517e44aaa6d516e",
          "sha256": "e5d2d2da86b762fc18310e161a2a561551f82c49ff9263b56244f4d2d68f3a58"
        },
        "downloads": -1,
        "filename": "registry_factory-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c46be933bb6f4ff71517e44aaa6d516e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 17830,
        "upload_time": "2023-02-01T10:20:05",
        "upload_time_iso_8601": "2023-02-01T10:20:05.102676Z",
        "url": "https://files.pythonhosted.org/packages/ca/c0/dbedd6482e8472473d3f7cd556370e1bc434ddc412bdf83b7558c4e2c1b3/registry_factory-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c47c0749eeb7c2e627bf8c960df8437f9b25ce3cc4b50bee78998179c584d658",
          "md5": "02733a5325cc3a35ca5c784e5ea00c38",
          "sha256": "e202fb9a6ddd1c568a6ad10528a2f6588d157dfb75ade78f738e2257229c14bd"
        },
        "downloads": -1,
        "filename": "registry_factory-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02733a5325cc3a35ca5c784e5ea00c38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 15369,
        "upload_time": "2023-02-01T10:20:06",
        "upload_time_iso_8601": "2023-02-01T10:20:06.489577Z",
        "url": "https://files.pythonhosted.org/packages/c4/7c/0749eeb7c2e627bf8c960df8437f9b25ce3cc4b50bee78998179c584d658/registry_factory-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cac0dbedd6482e8472473d3f7cd556370e1bc434ddc412bdf83b7558c4e2c1b3",
        "md5": "c46be933bb6f4ff71517e44aaa6d516e",
        "sha256": "e5d2d2da86b762fc18310e161a2a561551f82c49ff9263b56244f4d2d68f3a58"
      },
      "downloads": -1,
      "filename": "registry_factory-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c46be933bb6f4ff71517e44aaa6d516e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 17830,
      "upload_time": "2023-02-01T10:20:05",
      "upload_time_iso_8601": "2023-02-01T10:20:05.102676Z",
      "url": "https://files.pythonhosted.org/packages/ca/c0/dbedd6482e8472473d3f7cd556370e1bc434ddc412bdf83b7558c4e2c1b3/registry_factory-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c47c0749eeb7c2e627bf8c960df8437f9b25ce3cc4b50bee78998179c584d658",
        "md5": "02733a5325cc3a35ca5c784e5ea00c38",
        "sha256": "e202fb9a6ddd1c568a6ad10528a2f6588d157dfb75ade78f738e2257229c14bd"
      },
      "downloads": -1,
      "filename": "registry_factory-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "02733a5325cc3a35ca5c784e5ea00c38",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 15369,
      "upload_time": "2023-02-01T10:20:06",
      "upload_time_iso_8601": "2023-02-01T10:20:06.489577Z",
      "url": "https://files.pythonhosted.org/packages/c4/7c/0749eeb7c2e627bf8c960df8437f9b25ce3cc4b50bee78998179c584d658/registry_factory-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}