{
  "info": {
    "author": "Kirill Borisov",
    "author_email": "borisov@bars-open.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.6",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# Wellbehaved\n\nОбертка вокруг питоновского проекта ```behave``` (который, в свою очередь, является портом ```Cucumber``` из Ruby), позволяющая автоматически прогонять feature-файлы в качестве Django-тестов.\n\n## Использование\n\n* Установите пакет ```django-wellbehaved``` со стандартного PyPi-сервера \"БАРС Груп\":\n```\npip install django_wellbehaved -i https://<PyPi_сервер_БАРС_Груп>/simple\n```\n\n* Добавьте его в ```INSTALLED_APPS``` проекта:\n```\nINSTALLED_APPS += ('django_wellbehaved',)\n```\n * Расположите файлы с описанием поведения (_<имя фичи>.feature_) одним из следующих способов:\n    * одна из списка папок, указанного в настройке ```WELLBEHAVED_SEARCH_DIRECTORIES```;\n    * в одной из подпапок корня проекта (настройка ```PROJECT_ROOT```)\n * Запустить тестирование можно с помощью обычной команды:\n```\npython ./manage.py test django-wellbehaved\n```\n\n## Принцип работы\n\nПри запуске тестирования _wellbehaved_ обходит все поддиректории в корне проекта (местоположение _manage.py_) и ищет в них\nпапки _features_. Каждая найденная папка будет представлена отдельным набором тестов, в котором каждый файл с расширением \n_.feature_ будет обернут в класс **DjangoBDDTestCase**.\n\nДля каждого модуля с папкой features создается отдельный метод: ```test_имяфайла_feature```. \nТаким образом, вы можете протестировать единичную функцию системы:\n\n\t+ core\n\t    |\n\t    +- features\n\t              |\n\t              + - core_func.feature\n\n\tpython ./manage.py test django_wellbehaved.DjangoBDDTestCase.test_core_func_feature\n\n\n## Настройки\n\nНастройки являются необязательными считываются из ```settings.py``` проекта:\n\n1. ```WELLBEHAVED_USE_EXISTING_DB``` - использовать для тестирования существующую базу, используется вместе с \n```TEST_RUNNER = 'wellbehaved.runner.ExistingDBRunner'```\n\n2. ```WELLBEHAVED_INITIAL_FIXTURES``` - список фикстур, который будет загружен каждым тестом. Обычно ииспользуется для занесения общих значений в справочники и по формату аналогичен аттрибуту _fixtures_ в _TestCase_.\n\n3. ```WELLBEHAVED_FORMATTER``` - модуль форматирования, используемый _behave_ для вывода результатов. Возможные варианты описаны в [списке модулей форматирования behave][behave Formatters], по умолчанию стоит ```[pretty]```.\n\n4. ```WELLBEHAVED_LANG``` - код языка, на котором написано описание функционала. По умолчанию стоит ```'ru'```.\n\n\n## Gherkin\n\n(здесь и далее - перевод и легкая адаптация статьи [\"Writing Features - Gherkin Language\"][Writing Features])\n\n**Gherkin** - человеко-читаемый язык для описания поведения системы, который использует отступы для задания структуры документа,\n(пробелы или символы табуляции). Каждая строчка начинается с одного из ключевых слов и описывает один из шагов.\n\nПример:\n\n\tФункция: Короткое, но исчерпывающее описание требуемого функционала\n\t\tДля того, чтобы достичь определенных целей\n\t\tВ качестве определенного участника взаимодействия с системой\n\t\tЯ хочу получить определенную пользу\n\n\t\tСценарий: Какая-то определенная бизнес-ситуация\n\t\t\tДано какое-то условие\n\t\t\tИ ещё одно условие\n\t\t\tКогда предпринимается какое-то действие участником\n\t\t\tИ им делается ещё что-то\n\t\t\tИ вдобавок он совершил что-то ещё\n\t\t\tТо получается какой-то проверяемый результат\n\t\t\tИ что-то ещё случается, что мы можем проверить\n\n\nОбработчик разбивает файл с тестами на функции, сценарии и входящие в них шаги. Давайте разберем \nэтот пример:\n\n1. Строка **Функция: Короткое, но исчерпывающее описание требуемого функционала** начинает собой\nописание функционала и дает ему название.\n\n2. Следующие три строчки не обрабатываются и не несут никакой смысловой нагрузке для обработчика тестов,\nно они задают контекст тестирования и одновременно описывают, какую пользу мы получим от этого функционала.\n\n3. Строка **Сценарий: Какая-то определенная бизнес-ситуация** начинает сценарий и содержит его описание.\n\n4. Следующие 7 строчек описывают шаги теста, каждому из которых впоследствии\nбудет сопоставлен определенный программный код, выполняющий описанное действие.\nСопоставлению подлежат части строк лежащие после ключевых слов \"Дано\", \"И\", \"Когда\" и т.д.\n\n### Функции (Feature)\n\nКаждая функция описывается в отдельном файле с расширением _.feature_. Первая строчка\nдолжна начинаться с ключевого слова \"Функция:\", за которой могут идти три строчки с описанием,\nразмеченные отступами. Каждая функция обычно состоит из списка сценариев. \n\nКаждый сценарий состоит из списка *шагов*, каждый из которых должен начинаться с одного из ключевых слов:\n\n- Дано\n- Когда\n- То\n- Но\n- И\n\nШаги _\"Но\"_ и _\"И\"_ существуют исключительно для удобства чтения и по своим функциям повторяют ключевое слово,\nс которого начиналась предыдущая строчка.\n\nВдобавок к сценариям, описание функционала может также содержать _структуры сценариев_ и _предыстории_.\n\n### Сценарий (Scenario)\n\nСценарий представляет собой одну из ключевых структур в языке _Gherkin_. Каждый сценарий начинается\nс ключевого слова **\"Сценарий:\"**, и может содержать в себе название сценария. Описание функционала\nможет содержать в себе один или больше сценариев, и каждый сценарий состоит из одного или более шага.\n\nКаждый из следующих сценариев содержит три шага:\n\n\tСценарий: Вася создает новую запись\n\t\tДано я вошел в систему как Вася\n\t\tКогда я пытаюсь добавить запись в справочник \"Лекарства\"\n\t\tТо мне должен быть ответ \"Ваша запись успешно добавлена.\"\n\n\tСценарий: Вася не может добавлять запись в справочник лечений\n\t\tДано я вошел в систему как Вася\n\t\tКогда я пытаюсь добавить запись в справочник \"Виды лечений\"\n\t\tТо мне должен быть ответ \"У вас нет прав доступа!\"\n\n\n### Структура сценария (Scenario Outline)\n\nДостаточно часто приходится писать множество мелких сценариев, которые различаются буквально парой\nпеременных. Эти повторения могут быстро надоесть:\n\n\tСценарий: удалить 5 записей из 12\n\t\tДано есть 12 записей\n\t\tКогда я удаляю 5 записей\n\t\tТо у меня должно остаться 7 записей\n\n\tСценарий: удалить 5 записей из 20\n\t\tДано есть 20 записей\n\t\tКогда я удаляю 5 записей\n\t\tТо у меня должно остаться 15 записей\n\nСтруктуры сценариев позволяют нам более кратко описывать подобные наборы сценариев\nс помощью шаблонов:\n\n\tСтруктура сценария: удаление записей\n\t\tДано есть <было> записей\n\t\tКогда я удаляю <удалено> записей\n\t\tТо у меня должно остаться <остаток> записей\n\n\t\tПримеры:\n\t\t\t| было\t| удалено | остаток |\n\t\t\t| 12\t|    5    |   7     |\n\t\t\t| 20    |    5    |   15    |\n\n\nШаги указанные в структуре сценария не выполняются напрямую, но используются \nдля подстановки в них значений из таблицы примеров. Каждая строчка таблицы\nбудет обрабатываться как отдельный сценарий с указанными значениями вместо\nзаглушек \"было\", \"удалено\" и \"стало\".\n\n### Предыстории (Background)\n\nПредыстории позволяют вам добавить определенный контекст ко всем сценариям в \nпределах функции. По сути, предыстория - сценарий без имени, состоящий из\nшагов. Основное отличие в запуске: предыстория запускается перед каждым\nсценарием:\n\n\n\tФункция: поддержка многих справочников\n\n\t\tПредыстория:\n\t\t\tДано есть пользователь с именем \"Вася\"\n\t\t\tИ есть справочник \"Лекарства\"\n\t\t\tИ у пользователя \"Вася\" есть право на запись в  \"Лекарство\"\n\t\t\tИ есть справочник \"Виды лечений\"\n\n\t\tСценарий: Вася создает новую запись\n\t\t\tДано я вошел в систему как Вася\n\t\t\tКогда я пытаюсь добавить запись в справочник \"Лекарства\"\n\t\t\tТо мне должен быть ответ \"Ваша запись успешно добавлена.\"\n\n\t\tСценарий: Вася не может добавлять запись в справочник лечений\n\t\t\tДано я вошел в систему как Вася\n\t\t\tКогда я пытаюсь добавить запись в справочник \"Виды лечений\"\n\t\t\tТо мне должен быть ответ \"У вас нет прав доступа!\"\n\n\n### Шаги\n\nФункции состоят из шагов, также известных как _Данные_, _Действия_ и _Результаты_.\n\n#### Данные (Givens)\n\nНазначение шагов _Дано_ состоит в **приведение системы в известное состояние**\nперед тем как пользователь (или внешняя система) начнет взаимодействие с системой\n(в шагах _Когда_). Также можно рассматривать их как предусловия.\n\nПример: создавать объекты сущностей или настраивать БД\n\n\tДано нет пользователей в базе\n\tДано база данных пустая\n\nПример: вход пользователя в систему (исключение к правилу \"никаких взаимодействий в шаге Дано\")\n\n\tДано я вошел в систему как \"Вася\"\n\n\n#### Действия (Whens)\n\nНазначение шагов _Когда_ состоит в **описании ключевого действия, совершаемого пользователем**.\n\nПример: взаимодействие со страницей\n\n\tКогда я открыл форму добавления учреждения\n\tКогда я ввел \"Институт радости\" в поле \"Наименование\"\n\tКогда я выбрал в поле \"Тип\" значение \"Институт\"\n\tКогда я нажал на кнопку \"Сохранить\"\n\n\n#### Результаты (Thens)\n\nНазначение шагов _То_ состоит в **наблюдении результатов выполнения действий**. Наблюдения должны быть связаны с явной пользой, которая указаны в описании функции. Также необходимо помнить, что должен проверяться _вывод системы_ (отчеты, интерфейс, сообщения), а не что-то глубоко закопанное в систему.\n\n#### Предлоги (And, But)\n\nЕсли у вас есть несколько шагов _Дано_, _Когда_, или _То_\nто вы можете писать так:\n\n\tСценарий: множественные данные\n\t\tДано что-то первое\n\t\tДано что-то второе\n\t\tДано и что-то ещё\n\t\tКогда я открою свои глаза\n\t\tТо я увижу что-то\n\t\tТо чего-то я не увижу\n\n\n...или можете использовать шаги _И_ и _Но_, превращая свой сценарий в нечто более читаемое:\n\n\n\tСценарий: множественные данные\n\t\tДано что-то первое\n\t\tИ что-то второе\n\t\tИ и что-то ещё\n\t\tКогда я открою свои глаза\n\t\tТо я увижу что-то\n\t\tНо чего-то я не увижу\n\n\n#### Таблицы\n\nРегулярные выражения, с помощью которых программисты получают\nданные из текстового описания шагов позволяют получать небольшие куски данных из самой строчки. Но бывает и такое, что необходимо передать больший объем данных в один шаг. И здесь нам на помощь придут таблицы:\n\n\n\tСценарий:\n\t\tДано существуют следующие пользователи:\n\t\t\t| Логин | E-mail        | Пароль |\n\t\t\t| user1 | user1@mail.ru | pass1  |\n\t\t\t| joe   | joe@gmail.com | hey    |\n\t\t\t| heyho | hey@hoe.com   | joe    |\n\n\n## Контакты\n\nС вопросами по доработкам, применению и с сообщениями об ошибках пишите на <borisov@bars-open.ru>\n\n## Благодарности\n\n* Юле Касимовой (<kasimova@bars-open.ru>) - самоотверженное участие в тестировании продукта;\n* Сергею Чипиге (<svchipiga@bars-open.ru>) - нахождение багов;\n* Вадиму Малышеву (<vvmalyshev@bars-open.ru>) - продавливании идеи изучения концепций BDD.\n\n\n## Ссылки\n\n- [Writing Features - Gherkin Language][Writing Features]\n- [Behavior Driven Development (from behave documentation)][Behavior Driven Development]\n- [List of behave formatters][behave Formatters]\n\n[Writing Features]: http://docs.behat.org/guides/1.gherkin.html\n[Behavior Driven Development]: http://pythonhosted.org/behave/philosophy.html\n[behave Formatters]: http://pythonhosted.org/behave/formatters.html",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://src.bars-open.ru/py/m3/m3_contrib/django-wellbehaved",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "m3-wellbehaved",
    "package_url": "https://pypi.org/project/m3-wellbehaved/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/m3-wellbehaved/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://src.bars-open.ru/py/m3/m3_contrib/django-wellbehaved"
    },
    "release_url": "https://pypi.org/project/m3-wellbehaved/0.1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Rollback-enabled BDD wrapper for Django with i18n support",
    "version": "0.1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1242735,
  "releases": {
    "0.0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d2efd3debc023058f9c56c14c9be1a09548a47f9961c83c81c4aedaf20f978a",
          "md5": "3296b52df2d7f03aacddf4f591dcab4f",
          "sha256": "5bad2f31db7eb8261c4da78e8d793d8c6a1d1e33c4d41707375420fce4852aa8"
        },
        "downloads": -1,
        "filename": "m3-wellbehaved-0.0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3296b52df2d7f03aacddf4f591dcab4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2850,
        "upload_time": "2014-09-24T10:13:30",
        "upload_time_iso_8601": "2014-09-24T10:13:30.639203Z",
        "url": "https://files.pythonhosted.org/packages/2d/2e/fd3debc023058f9c56c14c9be1a09548a47f9961c83c81c4aedaf20f978a/m3-wellbehaved-0.0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e80c7f8ddfa20f732af35e556c9bc6bf953f18583435ef79a8a9de93383461a",
          "md5": "d5ea2d57848b0146f731d4fae90abb74",
          "sha256": "e69fa0bc76196ae798e71fc4565292b5069c02a8ef95f32d2ca1b267adae5e22"
        },
        "downloads": -1,
        "filename": "m3-wellbehaved-0.1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d5ea2d57848b0146f731d4fae90abb74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9491,
        "upload_time": "2014-09-30T06:47:53",
        "upload_time_iso_8601": "2014-09-30T06:47:53.043120Z",
        "url": "https://files.pythonhosted.org/packages/9e/80/c7f8ddfa20f732af35e556c9bc6bf953f18583435ef79a8a9de93383461a/m3-wellbehaved-0.1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e80c7f8ddfa20f732af35e556c9bc6bf953f18583435ef79a8a9de93383461a",
        "md5": "d5ea2d57848b0146f731d4fae90abb74",
        "sha256": "e69fa0bc76196ae798e71fc4565292b5069c02a8ef95f32d2ca1b267adae5e22"
      },
      "downloads": -1,
      "filename": "m3-wellbehaved-0.1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d5ea2d57848b0146f731d4fae90abb74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9491,
      "upload_time": "2014-09-30T06:47:53",
      "upload_time_iso_8601": "2014-09-30T06:47:53.043120Z",
      "url": "https://files.pythonhosted.org/packages/9e/80/c7f8ddfa20f732af35e556c9bc6bf953f18583435ef79a8a9de93383461a/m3-wellbehaved-0.1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}