{
  "info": {
    "author": "eXpergefacio & Lanjelin",
    "author_email": "dinky@dominic.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3"
    ],
    "description": "# dinkycache for python projects\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA very small and flexible name/value cache for python. \n\nIntended for quick set up, in development and small scale projects.\n\nUses `sqlite` for storage and `lzstring` for compression.\n\nStores any data that can be parsed in to a string with `json.dumps()` and `json.loads()`  \nReturns `int`, `dict` and `str` just fine, but returns a `list` if supplied a `tuple`\n\n## Install\nFrom pip\n```python\npython -m pip install dinkycache\n```\n\nFrom github\n```python\n# Copy the 'dinkycache' directory and \n# requirements.txt into your cwd\n# Install dependencies:\npython -m pip install -r requirements.txt\n```\n\n## How to use\nImport\n```python\nfrom dinkycache import Dinky\n```\n\n3 main methods called like so:\n```python\nDinky().read(str: id)\nDinky().write(str: id, str:data, float:ttl)\nDinky().delete(str: id) -> int\n```\n\n## Examples with default settings\n```python\nfrom dinkycache import Dinky\n\n#gets data from some slow source\ndef fetch_data(id):\n    return \"some data\"\n\nid = \"001\"\n\n```\nThen where you would normaly write:\n```python\nresults = fetch_data(id)\n```\nWrite these two lines instead:\n```python\nif (result := Dinky().read(id) == False):\n    Dinky().write(id, result := fetch_data(id))\n```\nIf you are running Python < 3.8 or just don't like [walruses](https://peps.python.org/pep-0572/):\n```python\nresults = Dinky().read(id)\nif results == False:\n    results = fetch_data(id)\n    Dinky().write(id, results)\n```\nThis is also an option, its there, its fully supported, however not further documented:\n```python\n    #Write:\n    d = Dinky()\n    d.id = \"test\"\n    d.data = {\"whatever\": \"floats\"}\n    d.setTTL(24) #hr\n    d.write()\n    print(d.data)\n\n    #Read:\n    d = Dinky()\n    d.id = \"test\n    results = d.read()\n    print(results)\n```\n\nIn either case `results` will contain the data from cache if its there and within the specified TTL. Or it will call your get_some_data() to try and fetch the data instead.\n\n## Settings\n\nAvaialble settings and default values\n```python\n    dbfile: str = \"dinkycache.db\",  # name of sqlite file\n    ttl: float = 2160,              # time to live in hours, default 2160 = 90 days, 0 = no expiry\n    purge_rows: bool = True,        # will enforce row_limit if true\n    row_limit: int = 10000,         # maximum number of rows in db\n    row_overflow: int = 1000,       # buffer zone above row_limit before anything is deleted\n    clean_expired: bool = True,     # will delete outdated entries if true\n    clean_hrs: int = 24,            # time between cleanups of expried entries\n    clean_iterations: int = 100,    # iterations (reads/writes) between cleanups\n```\n\nSet them in one of the following ways\n```python\n# Positional arguments:\nDinky('preferred.db', 24).read(id)\n```\nOR\n```python\n# Keyword arguments:\nDinky(dbfile='preferred.db').read(id)\n```\nOR\n```python\n# Unpack list as positional arguments:\nsettings = ['preferred.db', 24]\nDinky(*settings).read(id)\n```\nOR\n```python\n# Unpack dict as keyword arguments:\nsettings = {\n    'dbfile' = 'preferred.db',\n    'ttl' = 24,\n}\nDinky(**settings).read(id)\n```\n\n## Examples of use with user-defined settings\n\nYou can destruct a dict an pass it as settings each time you invoke `Dinky(**settings)`,\nor assign the new `Dinky object` to a `variable` and re-use it that way:\n\n### Invoke on every use:\n```python\nsettings = {\n    'dbfile' = 'preferred.db',\n    'purge_rows' = True,\n    'clean_expired' = False,\n    'row_limit' = 100,\n    'ttl' = 0,\n}\n\nif (result := Dinky(**settings).read(id) == False):\n    Dinky(**settings).write(id, result := fetch_data(id))\n\n```\n\n### Retain Dinky object:\n```python\nd = Dinky(\n    dbfile = 'preferred.db',\n    purge_rows = True,\n    clean_expired = False,\n    row_limit = 100,\n    ttl = 0,\n)\n\nif (result := d.read(id) == False):\n    d.write(id, result := fetch_data(id))\n```\n\n## clean_expired, clean_hrs and clean_iterations\nIf `clean_expired = True`, script will try to clean out expired entries every time data is **written** if one of the following conditions are met.  \nIt has been minimum `clean_hrs: int = 24` hours since last cleanup  \nOR  \nThere have been more than `clean_iterations: int = 100` calls since last cleanup  \n\nThe cleanup function comes at a 75% performance cost, so if it runs on every 100 write, that amounts to a 7.5% average performance cost.\n\n`clean_expired` might therefore be a much better alternative than using `purge_rows` for larger amounts of data.\n\n## purge_rows, row_limit and row_overflow\nIf `purge_rows = True`, script will try to clean out overflowing lines every time data is **written**.  \n`row_limit = int` sets the maximum lines in the database.  \n`row_overflow = int` how many lines over `row_limit` before `row_limit`is enforced\n\nThis comes at a great performance cost for larger databases. 462 ms to sort 100k rows on a 1.8 ghz Intel Core i5. For this reason `row_overflow` is added as a buffer threshold, so that deletion dont happen on every call to `.write`.\n\nIt is probably best used for small databases and/or databases with small entries.\n\n## Public methods\n### .read()\nArguments `id` (string, required)  \nReturns data corresponding to `id`, or False if there is no data  \nCan be called without arguments on existing object if id has alredy been set.  \n### .write()\nArguments `id` (string, required), `data` (string, required), `tll` (int, optional)  \nStores the supplied `data` to that `id`, `tll` can be set here if not already passed on invocation  \nReturns the hashed `id` or False  \nWill do `clean_expired`and `purge_rows` if they are set True  \nCan be called without arguments on existing object if id and data has alredy been set.  \n\n### .delete()\nArguments `id` (string, required)  \nDeletes entry corresponding to that `id`  \nReturns number of rows deletet, `1` or `0`.  \nCan be called without arguments on existing object if id has alredy been set.  \n\n## Setting TTL to seconds, months etc:\nIts been a bit of a discussion whats the most sensible choice of default time unit for TTL, we landed on hours as a float.\n\nThe idea is that hours will be sufficient and sensible enough in most usercases. However it also allows for a workaround if you need to set lower or higher values:\n\n```python\n    10 seconds:\n    Dinky().write(id = \"1\", data = \"some data\", ttl = 10 / 3600)\n    10 minutes:\n    Dinky().write(id = \"1\", data = \"some data\", ttl = 10 / 60)\n    10 months:\n    Dinky().write(id = \"1\", data = \"some data\", ttl = 10 * 720)\n    10 years:\n    Dinky().write(id = \"1\", data = \"some data\", ttl = 10 * 8760)\n```\nAlternatively you can expiry in seconds directly on the Dinky object like so \n```python\n    d = Dinky()\n    d.expires = 10 + d.now\n    d.write(id = \"1\", data = \"some data\")\n```\n\n## Performance\n\nThis wont ever compete with Redis, MongoDB or anything like that. This is ment to be a small, easy solution for small scale use cases where you dont want or need any big dependencies. Hence performance will be less, but might still be orders of magnitude faster than repeatedly parsing the data from some website.\n\n### Tests:\n\nReads from DB 1\n```\n10k entries of 40 to 1500 characters:\n\n1 read = 0.018 to 0.003 sec\n100 reads = 0.6 sec (0.006 avg)\n```\n\nReads from DB 2\n```\n10k entries of 40 to 150000 characters:\n1 read = 0.003 to 0.022 sec\n100 reads = 1.1 to 2.4 sec (0.015 avg)\n```\n\nTest DB 3:\n```\n38.1mb: 100k writes str_len 40~1500: avg 11.3ms (incl generation)\n\n10k reads: 6.57 ms avg \n```\n\n\n## Security\nIds are hashed, so you may put anything in there\nData is compressed to a string of base 64 characters, so you may put anything in there.\n\nLzstring seem to have very high integrity, we have not been able to produce a test result where the input and output has not been equal.\n\nThat said, what you put in is what you'll get out. There is no checking for html-tags and such. Just something to bevare of if for some reason you'll use it to store and later display user provided data.\n\n\n## Compression\nLzstring is not great for shorter strings, and does sometimes even increase to string lenght. However in testing we found that short strings (80 to 1500 chars) have an average compression rate of 98%, while strings longer than 60000 characters have an average compression rate of 48%. Testing was done with random as well as real world data.\n\nSo there is most likely some performance loss, but it is outweighed by smaller database files and the fact that base 64 strings makes life very easy.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/expergefacio/dinkycache",
    "keywords": "dinkycache",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dinkycache",
    "package_url": "https://pypi.org/project/dinkycache/",
    "platform": null,
    "project_url": "https://pypi.org/project/dinkycache/",
    "project_urls": {
      "Homepage": "https://github.com/expergefacio/dinkycache"
    },
    "release_url": "https://pypi.org/project/dinkycache/1.0.3/",
    "requires_dist": [
      "lzstring (==1.0.4)"
    ],
    "requires_python": "",
    "summary": "Sqlite based cache for python projects",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14870634,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44a80b87bb6a72640b6906accd0fe810fb8b497b645eccf6c2bfe2cd5a92889b",
          "md5": "4bddbde84d4caf48c811e232fb0acec1",
          "sha256": "6f614ea611e0aba134e4eaeb8a02b8ef826910b40426c22812ec3125fbe9a6aa"
        },
        "downloads": -1,
        "filename": "dinkycache-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bddbde84d4caf48c811e232fb0acec1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6953,
        "upload_time": "2022-07-11T08:56:33",
        "upload_time_iso_8601": "2022-07-11T08:56:33.807600Z",
        "url": "https://files.pythonhosted.org/packages/44/a8/0b87bb6a72640b6906accd0fe810fb8b497b645eccf6c2bfe2cd5a92889b/dinkycache-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b9bb91ca13ebd7cc8f9e9f81ccd1847ef59bbb5ced25225a9562eaa821496a",
          "md5": "054023db45936766ae3ceab0127d93d0",
          "sha256": "b9101c2269715ebf3acf28ceac9b92e3104e56a16cba6fc8e4883fd719f91b3b"
        },
        "downloads": -1,
        "filename": "dinkycache-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "054023db45936766ae3ceab0127d93d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3881,
        "upload_time": "2022-07-11T08:35:28",
        "upload_time_iso_8601": "2022-07-11T08:35:28.966030Z",
        "url": "https://files.pythonhosted.org/packages/d7/b9/bb91ca13ebd7cc8f9e9f81ccd1847ef59bbb5ced25225a9562eaa821496a/dinkycache-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f39a1fe7ff4380f59ea181ed3c666b879f4684d49cdb615bbde8ee7433af6b0",
          "md5": "ead4ede332391645f5884e6d97885bde",
          "sha256": "e1e72abb333a2f5ebd714d58ad78b46539233d07b0fa448eaec1092cba6234ff"
        },
        "downloads": -1,
        "filename": "dinkycache-1.tar.gz",
        "has_sig": false,
        "md5_digest": "ead4ede332391645f5884e6d97885bde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6576,
        "upload_time": "2022-07-11T08:35:31",
        "upload_time_iso_8601": "2022-07-11T08:35:31.320045Z",
        "url": "https://files.pythonhosted.org/packages/6f/39/a1fe7ff4380f59ea181ed3c666b879f4684d49cdb615bbde8ee7433af6b0/dinkycache-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "045417d4fdf3f16aa7e75a2f49f2a5895eec3908c29388f1911f5e6a0ef1e497",
          "md5": "c54cad2179ddfb41043ee142fbfd7d37",
          "sha256": "c86ea5eeae5dfc9ad2eddc3c56ba18918de983d78e00fda74a28cb1343d961bc"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c54cad2179ddfb41043ee142fbfd7d37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6951,
        "upload_time": "2022-07-11T08:59:27",
        "upload_time_iso_8601": "2022-07-11T08:59:27.792328Z",
        "url": "https://files.pythonhosted.org/packages/04/54/17d4fdf3f16aa7e75a2f49f2a5895eec3908c29388f1911f5e6a0ef1e497/dinkycache-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12b299e57b5b7f56bbeca409de2fdf729fe4343ee55077eaa333d0adfebd3909",
          "md5": "5db767f28ffd5b8a582abc22e4e5e8c9",
          "sha256": "8984de10c14943d12e0bcea8a1abdcc4fec9573983aae2ef381ea6eaa15669e6"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5db767f28ffd5b8a582abc22e4e5e8c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7083,
        "upload_time": "2022-07-11T08:59:29",
        "upload_time_iso_8601": "2022-07-11T08:59:29.370333Z",
        "url": "https://files.pythonhosted.org/packages/12/b2/99e57b5b7f56bbeca409de2fdf729fe4343ee55077eaa333d0adfebd3909/dinkycache-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "892050d4e2aa493f33ee3431f1016680e042ef2ce0fd25aee6d00aeb8aec5424",
          "md5": "cc1edffd9a283603e654e202a28b1ce9",
          "sha256": "99d7930f9c07f6f21f14252a29cefe0f1cb0e7a63814941e72c2fcaa04005015"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc1edffd9a283603e654e202a28b1ce9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6928,
        "upload_time": "2022-07-11T09:15:42",
        "upload_time_iso_8601": "2022-07-11T09:15:42.880760Z",
        "url": "https://files.pythonhosted.org/packages/89/20/50d4e2aa493f33ee3431f1016680e042ef2ce0fd25aee6d00aeb8aec5424/dinkycache-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bed9dc87dcc095f7fef282d9fac02b877443b3062f91d138931fde9d97a7882f",
          "md5": "0ce88ff107302fb0407e19b84a46a7ec",
          "sha256": "30ca1e1bafa446e7011d4999527266b6e21ccc07d277bd132c67fe90c27f175d"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ce88ff107302fb0407e19b84a46a7ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7035,
        "upload_time": "2022-07-11T09:15:44",
        "upload_time_iso_8601": "2022-07-11T09:15:44.961383Z",
        "url": "https://files.pythonhosted.org/packages/be/d9/dc87dcc095f7fef282d9fac02b877443b3062f91d138931fde9d97a7882f/dinkycache-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73c556036b7054347ef4cd101913ca4845948ffcf5cf6fb3a50245c0461c65e0",
          "md5": "59cf4f9652a2e03de62441802dfc4de8",
          "sha256": "8f7e9327649ab529f0cd44352c988d65425072cc0020c3971f34a58a0116907f"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59cf4f9652a2e03de62441802dfc4de8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7244,
        "upload_time": "2022-08-24T20:47:31",
        "upload_time_iso_8601": "2022-08-24T20:47:31.688118Z",
        "url": "https://files.pythonhosted.org/packages/73/c5/56036b7054347ef4cd101913ca4845948ffcf5cf6fb3a50245c0461c65e0/dinkycache-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "322c5016485628ed6e6367e33ca79165ea9d6da3c5bbaf301575351ae104cc57",
          "md5": "23ee0c458de93f24a87e661414d6c411",
          "sha256": "5d6fbbcccc96da76bf4d4feaff36746ab538a782214a37b427d7779e70a9d067"
        },
        "downloads": -1,
        "filename": "dinkycache-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "23ee0c458de93f24a87e661414d6c411",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7460,
        "upload_time": "2022-08-24T20:47:33",
        "upload_time_iso_8601": "2022-08-24T20:47:33.685625Z",
        "url": "https://files.pythonhosted.org/packages/32/2c/5016485628ed6e6367e33ca79165ea9d6da3c5bbaf301575351ae104cc57/dinkycache-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73c556036b7054347ef4cd101913ca4845948ffcf5cf6fb3a50245c0461c65e0",
        "md5": "59cf4f9652a2e03de62441802dfc4de8",
        "sha256": "8f7e9327649ab529f0cd44352c988d65425072cc0020c3971f34a58a0116907f"
      },
      "downloads": -1,
      "filename": "dinkycache-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "59cf4f9652a2e03de62441802dfc4de8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7244,
      "upload_time": "2022-08-24T20:47:31",
      "upload_time_iso_8601": "2022-08-24T20:47:31.688118Z",
      "url": "https://files.pythonhosted.org/packages/73/c5/56036b7054347ef4cd101913ca4845948ffcf5cf6fb3a50245c0461c65e0/dinkycache-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "322c5016485628ed6e6367e33ca79165ea9d6da3c5bbaf301575351ae104cc57",
        "md5": "23ee0c458de93f24a87e661414d6c411",
        "sha256": "5d6fbbcccc96da76bf4d4feaff36746ab538a782214a37b427d7779e70a9d067"
      },
      "downloads": -1,
      "filename": "dinkycache-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "23ee0c458de93f24a87e661414d6c411",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7460,
      "upload_time": "2022-08-24T20:47:33",
      "upload_time_iso_8601": "2022-08-24T20:47:33.685625Z",
      "url": "https://files.pythonhosted.org/packages/32/2c/5016485628ed6e6367e33ca79165ea9d6da3c5bbaf301575351ae104cc57/dinkycache-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}