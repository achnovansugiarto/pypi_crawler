{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "## pip install async_pool_executor\n\n\n\n## 主要功能\n\n```\n主要功能是仿照 concurrent.futures 的线程池报的submit shutdown方法。\n\n使得在做生产 消费 时候，无需学习烦人的异步 loop 、 run_until_complete ，可以直接在同步函数中 submit。\n生产和消费不需要在同一个loop中，喜欢同步编程思维的人可以用这个。\n\n```\n\n\n## 实现代码\n\n```python\n\nimport asyncio\nimport atexit\nimport time\nimport traceback\nfrom threading import Thread\n\n\nclass AsyncPoolExecutor:\n    \"\"\"\n    使api和线程池一样，最好的性能做法是submit也弄成 async def，生产和消费在同一个线程同一个loop一起运行，但会对调用链路的兼容性产生破坏，从而调用方式不兼容线程池。\n    \"\"\"\n\n    def __init__(self, size, loop=None):\n        \"\"\"\n\n        :param size: 同时并发运行的协程任务数量。\n        :param loop:\n        \"\"\"\n        self._size = size\n        self.loop = loop or asyncio.new_event_loop()\n        self._sem = asyncio.Semaphore(self._size, loop=self.loop)\n        self._queue = asyncio.Queue(maxsize=size, loop=self.loop)\n        t = Thread(target=self._start_loop_in_new_thread)\n        t.setDaemon(True)  # 设置守护线程是为了有机会触发atexit，使程序自动结束，不用手动调用shutdown\n        t.start()\n        self._can_be_closed_flag = False\n        atexit.register(self.shutdown)\n\n\n    def submit(self, func, *args, **kwargs):\n        future = asyncio.run_coroutine_threadsafe(self._produce(func, *args, **kwargs), self.loop)  # 这个 run_coroutine_threadsafe 方法也有缺点，消耗的性能巨大。\n        future.result()  # 阻止过快放入，放入超过队列大小后，使submit阻塞。\n\n    async def _produce(self, func, *args, **kwargs):\n        await self._queue.put((func, args, kwargs))\n\n    async def _consume(self):\n        while True:\n            func, args, kwargs = await self._queue.get()\n            if func == 'stop':\n                break\n            try:\n                await func(*args, **kwargs)\n            except Exception as e:\n                traceback.print_exc()\n\n    def _start_loop_in_new_thread(self, ):\n        # self._loop.run_until_complete(self.__run())  # 这种也可以。\n        # self._loop.run_forever()\n\n        # asyncio.set_event_loop(self.loop)\n        self.loop.run_until_complete(asyncio.wait([self._consume() for _ in range(self._size)], loop=self.loop))\n        self._can_be_closed_flag = True\n\n    def shutdown(self):\n        for _ in range(self._size):\n            self.submit('stop', )\n        while not self._can_be_closed_flag:\n            time.sleep(0.1)\n        self.loop.close()\n        print('关闭循环')\n\n\nif __name__ == '__main__':\n    import nb_log\n    async def async_f(x):\n        await asyncio.sleep(2)\n        print(x)\n\n    pool  =AsyncPoolExecutor(3)\n    for i in range(30):\n        pool.submit(async_f,i)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "async_pool_executor,threadpoolexecutor,sync,async",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "async-pool-executor",
    "package_url": "https://pypi.org/project/async-pool-executor/",
    "platform": "all",
    "project_url": "https://pypi.org/project/async-pool-executor/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/async-pool-executor/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "async_pool_executor,its api like the concurrent.futures",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9292227,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36d8be61cec9d5f39ef23eb1ef33725bcbddf4b3564b00500f060cd71bb6b753",
          "md5": "77ca00d2bab98f00bf46a99f2c9e5a56",
          "sha256": "9170b912ce8531920c80eef0f752c4e8c96d46840bfd4e08956d478749f72ace"
        },
        "downloads": -1,
        "filename": "async_pool_executor-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "77ca00d2bab98f00bf46a99f2c9e5a56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3306,
        "upload_time": "2021-02-02T03:55:40",
        "upload_time_iso_8601": "2021-02-02T03:55:40.058426Z",
        "url": "https://files.pythonhosted.org/packages/36/d8/be61cec9d5f39ef23eb1ef33725bcbddf4b3564b00500f060cd71bb6b753/async_pool_executor-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36d8be61cec9d5f39ef23eb1ef33725bcbddf4b3564b00500f060cd71bb6b753",
        "md5": "77ca00d2bab98f00bf46a99f2c9e5a56",
        "sha256": "9170b912ce8531920c80eef0f752c4e8c96d46840bfd4e08956d478749f72ace"
      },
      "downloads": -1,
      "filename": "async_pool_executor-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "77ca00d2bab98f00bf46a99f2c9e5a56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3306,
      "upload_time": "2021-02-02T03:55:40",
      "upload_time_iso_8601": "2021-02-02T03:55:40.058426Z",
      "url": "https://files.pythonhosted.org/packages/36/d8/be61cec9d5f39ef23eb1ef33725bcbddf4b3564b00500f060cd71bb6b753/async_pool_executor-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}