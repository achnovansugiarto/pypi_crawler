{
  "info": {
    "author": "lookis<Jingsi Liu>",
    "author_email": "lookisliu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## livetrader\n\n### 介绍\nlivetrader 是一个整合了行情和交易接口的工具链。现在已经有很多比较成熟的交易框架了，比方说 [vnpy](https://github.com/vnpy/vnpy)、[quantaxis](https://github.com/QUANTAXIS/QUANTAXIS)、[backtrader](https://github.com/mementum/backtrader)、[zipline](https://github.com/quantopian/zipline)等，但有一个问题是这些框架都没有很好地解决的，那就是：不同框架对实盘行情、实盘交易的支持都不是很完整。\n\n比方说 vnpy 的[交易接口](https://www.vnpy.com/docs/cn/gateway.html#id7)主要集中在数字货币、期货上，对于外汇只有 MT5 的接口，对于美股也是只有富途证券。再比方说 quantaxis 也主要集中在 A股和期货之上（[链接](https://doc.yutiansut.com/datafetch)），对于实盘交易接口部分因为了解的不多，所以不做过多评价，但就看文档而言，好似并没有找到实盘的支持。更别说国外的几个框架了 backtrader、zipline 的实盘基本上就只有 盈透(美股)、oanda(外汇) 这两 broker 的支持。\n\n这样就会让我们遇到一个问题就是如果我们是一个单策略、多品种的交易模式的话，如果要覆盖所有的可程序化交易的 期货、美股、外汇、数字货币 就需要在不同的平台上维护多份代码，想要交易MT4的，就只能使用 MQL 语言编写策略，想要交易美股盈透证券的，就需要用 backtrader 来写逻辑，而在国内要交易期货的话， vnpy 和 quantaxis 又是两个不一样的选型。\n\n所以，这个项目的目标是为了补充这些框架里不足的那一部分，**集中把行情接口、交易接口统一化**，然后再针对现在比较流行的几个交易框架(vnpy、quantaxis、backtrader) 提供相关的接口代码，这样无论之前是在哪个框架下编写的策略，就都可以获取全品种数据、交易全品种了（期货、美股、外汇、数字货币）\n\n### 使用方式\n\n#### 安装\n\n```bash\npip install -U livetrader\n```\n使用：可以参考 examples 目录里的代码\n\n```python\n# 作为模块启动\nimport asyncio\n\nfrom simpletrader.market import (CachedMarket, DwxMarket, MarketService,\n                                 TdxMarket)\n\n\nasync def listern_to_latest_kline(kline_queue):\n    print('get latest kline')\n    for i in range(5):\n        (symbol, kline) = await kline_queue.get()\n        print(\"%s, %s\" % (symbol, kline))\n\n\nasync def get_kline_histories(service):\n    print('get kline histories')\n    histories = await service.get_kline_histories('US.BABA', limit=100)\n    print(len(histories))\n\n\nasync def main():\n    market = TdxMarket(host='xx.xx.xx.xx:7727')\n    service = MarketService(market, ['US.BABA'])\n    kline_queue = service.start()\n    await listern_to_latest_kline(kline_queue)\n    await get_kline_histories(service)\n    service.stop()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n```python\n# 作为服务启动\nimport logging\n\nfrom livetrader.market import CachedMarket, DwxMarket, MarketService, TdxMarket\nfrom livetrader.rpc import Server\n\n\ndef create_server():\n    market = TdxMarket(host='xx.xx.xx.xx:7727')\n    service = MarketService(market, ['US.BABA'])\n    server = Server(service)\n    server.bind('ipc:///tmp/market')\n    return server\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(format=' %(name)s :: %(levelname)-8s :: %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.setLevel(logging.DEBUG)\n    server = create_server()\n    server.run()\n\n```\n```python\n# 对应服务的客户端\nimport asyncio\nimport logging\n\nfrom livetrader.rpc import Client, MarketSubscriber\n\n\nclass PrintSubscriber(MarketSubscriber):\n\n    def on_kline(self, kline: dict):\n        print('recv kline: %s' % kline, flush=True)\n\n\ndef subscribe_kline(endpoint: str, symbol: str):\n    subscriber = PrintSubscriber(symbol)\n    subscriber.connect('ipc:///tmp/market')\n    subscriber.run()\n    return subscriber\n\n\nasync def main():\n    endpoint = \"ipc:///tmp/market\"\n    symbol = 'US.BABA'\n    subscriber = subscribe_kline(endpoint, symbol)\n    await asyncio.sleep(5)\n    subscriber.close()\n\n    client = Client()\n    client.connect(endpoint)\n    histories = client.get_kline_histories(symbol, None, 100)\n    print(len(histories))\n    client.close()\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(format=' %(name)s :: %(levelname)-8s :: %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.setLevel(logging.DEBUG)\n    asyncio.run(main())\n\n```\n\n## 程序架构\n\n可以参考知乎的文章，知乎上的文章是随着项目开发，把思考过程都记录下来了：[知乎: 从零架构一个交易框架](https://zhuanlan.zhihu.com/p/268036337)\n\n### RPC\n因为这个项目的目标是为了服务各种不同的策略、不同和框架，所以基于不同的策略（日内、高频、日间）场景，提供了不一样的调用方式，而实现的方式主要基于 zeromq 来做的。\n\n如果需要低延迟的话，可以以模块的方式加载服务，或者使用 zeromq 提供的 inproc 连接模式\n\n如果需要本地调试方便，可以使用 ipc 的方式连接\n\n如果需要分布式部署，可以使用 tcp 的方式连接\n\n只要我们使用的不是模块的方式加载，我们都还会通过 MessagePack 的方式来序列化传输数据。在早期为了快速开发，就直接采用了 [zerorpc](http://www.zerorpc.io/) 来实现，但是 zerorpc 在性能上的问题比较大，所以到后期会重写一个 RPC 模块来替换掉\n\n### 行情模块\n\n第一个版本主要是做了以下行情的适配：\n\n1. 美股：使用 pytdx 获取免费分钟数据\n\n2. 外汇MT4：[dwx_zeromq_connector](https://github.com/darwinex/dwx-zeromq-connector)\n\n3. 期货：计划采用 tqsdk 获取数据\n\n\n### 交易模块\n\n暂无，计划先做期货或者外汇\n\n### 框架适配模块\n\n暂无，计划先做 backtrader 的适配\n\n## 关于 pytdx 的地址\n\n可以参考 quantaxis 里的记录 [美股行情地址](https://github.com/QUANTAXIS/QUANTAXIS/blob/master/QUANTAXIS/QAUtil/QASetting.py#L364-L385)\n\n## 关于外汇 MT4 \n\n因为 MT4 没有提供官方的 Api 接口，想要把里面的行情数据拿出来或者提交下单接口就只有两个方案：\n\n1. 像pytdx一样抓包或者反编译\n\n2. 用 MQL 语言写一个转发\n\n好在现在已经有开源项目完成了后一种做法，这里就直接拿来用了：[dwx_zeromq_connector](https://github.com/darwinex/dwx-zeromq-connector)，具体如何部署可以参考这个项目里面的说明。要注意的是我在原项目上做了一点修改，可以直接使用 extra 目录里的 mq4 代码，然后在 python 这边把原项目的多线程版本改为了 asyncio 的异步版本，可以直接使用。\n\n## 其它\n\n有什么好的想法和建议欢迎提issue，更新应该比较勤快，欢迎 star 和 fork 这个项目。知乎上也请大家多多支持和关注 [知乎专栏](https://www.zhihu.com/column/c_1177533241622593536)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lookis/livetrader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "livetrader",
    "package_url": "https://pypi.org/project/livetrader/",
    "platform": "",
    "project_url": "https://pypi.org/project/livetrader/",
    "project_urls": {
      "Homepage": "https://github.com/lookis/livetrader"
    },
    "release_url": "https://pypi.org/project/livetrader/0.1/",
    "requires_dist": [
      "click",
      "tzlocal",
      "environs",
      "zerorpc",
      "pymongo",
      "motor"
    ],
    "requires_python": ">=3.6",
    "summary": "A small and extendable framework for trading",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8623605,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d49cd53e92ccc68fb75a1f6fc1f1e79abf6eef735b46e5b18998223f557b0ec",
          "md5": "a04a0c14cd549d10fd97043703dbcb3a",
          "sha256": "f7341fe8a9966f8928a0e7f7a72c10d33e14093a56a54fdc49af943de1fbce62"
        },
        "downloads": -1,
        "filename": "livetrader-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a04a0c14cd549d10fd97043703dbcb3a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 26373,
        "upload_time": "2020-11-10T12:44:38",
        "upload_time_iso_8601": "2020-11-10T12:44:38.198951Z",
        "url": "https://files.pythonhosted.org/packages/2d/49/cd53e92ccc68fb75a1f6fc1f1e79abf6eef735b46e5b18998223f557b0ec/livetrader-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ab2c37b41d5952707b3a6b322c59d6ea7d8c3d5bbb9cf2e2c6a513f1b0df6bb",
          "md5": "6761275fbd48f53c774a654ab9e86a75",
          "sha256": "4c81e0051e864e1a155850d3d41ff952c4f11720995c1618c3ce7df0b3f09a38"
        },
        "downloads": -1,
        "filename": "livetrader-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6761275fbd48f53c774a654ab9e86a75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15127,
        "upload_time": "2020-11-10T12:44:53",
        "upload_time_iso_8601": "2020-11-10T12:44:53.654777Z",
        "url": "https://files.pythonhosted.org/packages/1a/b2/c37b41d5952707b3a6b322c59d6ea7d8c3d5bbb9cf2e2c6a513f1b0df6bb/livetrader-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d49cd53e92ccc68fb75a1f6fc1f1e79abf6eef735b46e5b18998223f557b0ec",
        "md5": "a04a0c14cd549d10fd97043703dbcb3a",
        "sha256": "f7341fe8a9966f8928a0e7f7a72c10d33e14093a56a54fdc49af943de1fbce62"
      },
      "downloads": -1,
      "filename": "livetrader-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a04a0c14cd549d10fd97043703dbcb3a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 26373,
      "upload_time": "2020-11-10T12:44:38",
      "upload_time_iso_8601": "2020-11-10T12:44:38.198951Z",
      "url": "https://files.pythonhosted.org/packages/2d/49/cd53e92ccc68fb75a1f6fc1f1e79abf6eef735b46e5b18998223f557b0ec/livetrader-0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ab2c37b41d5952707b3a6b322c59d6ea7d8c3d5bbb9cf2e2c6a513f1b0df6bb",
        "md5": "6761275fbd48f53c774a654ab9e86a75",
        "sha256": "4c81e0051e864e1a155850d3d41ff952c4f11720995c1618c3ce7df0b3f09a38"
      },
      "downloads": -1,
      "filename": "livetrader-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6761275fbd48f53c774a654ab9e86a75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15127,
      "upload_time": "2020-11-10T12:44:53",
      "upload_time_iso_8601": "2020-11-10T12:44:53.654777Z",
      "url": "https://files.pythonhosted.org/packages/1a/b2/c37b41d5952707b3a6b322c59d6ea7d8c3d5bbb9cf2e2c6a513f1b0df6bb/livetrader-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}