{
  "info": {
    "author": "SSV Software Systems GmbH",
    "author_email": "fbu@ssv-embedded.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![alt text](https://github.com/SSV-embedded/PyDSlog/blob/master/images/io5640-ds_plus_pydslog.jpg \"PyDSlog data streaming library\")\n\n# PyDSlog\n\nPyDSlog claims to make the data acquisition for machine learning and AI applications on the RMG/941 fast and easy.\n\nInstalled by default on the RMG/941. It allows to read the sensor values coming from the serial RS485 interface \nor via MQTT and stores them in CSV files. \n\n### Installation\n\n```\npip install pydslog\n```\n\n\n### Access to stream\n\nTo use the stream it is necessary to initialize the class with the desired frequency, the desired channels, the serial \nport and the size of the block to be read.\n\nFor the MLS/160A:\n```\nx = PyDSlog.stream.MLS160A_stream(sz_block=500, \n        channels_to_use=[\"ACCX\", \"ACCY\", \"ACCZ\", \"GYRX\", \"GYRY\", \"GYRZ\"],\n        frequency=500, port=\"COM15\", baudrate=115200)\n```\nand for the IO5640-DS:\n```\nx = PyDSlog.stream.IO5640_stream(sz_block=100, \n        channels_to_use=[\"AI4U\", \"AI3U\", \"AI2U\", \"AI1U\", \"AI1I\", \"AI2I\"], \n        frequency=500, port=\"COM15\", baudrate=115200)\n```\nWhere:\n\n* sz_block: is the size of the block to be read at once when the stream is read.\n* channels_to_use: are the channels to use. Possible are ```[\"ACCX\", \"ACCY\", \"ACCZ\", \"GYRX\", \"GYRY\", \"GYRZ\"]``` for \nthe MLS/160A and ```[\"AI4U\", \"AI3U\", \"AI2U\", \"AI1U\", \"AI1I\", \"AI2I\"]``` for the IO5640-DS.\n* frequency: is the desired frequency and ```port``` is the serial port. the baudrate is fixed at 115200 and can not \nbe changed.\n\nTo access the stream directly it is necessary to connect the sensor to the serial port. The ```connect()``` method is used \nfor this purpose. To start the stream the ```start()``` method is used. After calling the ```start()``` function, the sensor will \nstart sending the values of the selected channels with the desired frequency. To read the values, use the ```read(transpose=False)``` method. \nFinally to stop the stream you use the ```stop()``` method and to release the serial port ```disconnect()```.\n\nAs an example, using MLS/160A:\n\n\n```\n# import PyDSlog\nimport PyDSlog.stream as stream\n\n# size of the block to read is 500\n# the channels that will be streamed are [\"ACCX\",\"ACCY\",\"ACCZ\",\"GYRX\",\"GYRY\",\"GYRZ\"]\n# a frequency of 500 Hz\n# sensor is connected to port COM15\n# the baudrate is fixed at 115200 and can not be changed.\nx = stream.MLS160A_stream(sz_block=500, channels_to_use=[\"ACCX\",\"ACCY\",\"ACCZ\",\"GYRX\",\"GYRY\",\"GYRZ\"],\n                                      frequency=500, port=\"COM15\", baudrate=115200, n_frame=100)\n\ntry:\n\n    # connect\n    x.connect()\n\n    # start\n    x.start()\n\n    # read stream. if you want to to transpose the values use transpose = True.\n    r = x.read(transpose=False)\n\n\nfinally:\n\n    # stop\n    x.stop()\n    # disconnect from port\n    x.disconnect()\n\n\n```\n### Generate CSV file from sensor values\n\nPyDSlog was developed for the purpose of generating csv files to be used for training Machine Learning algorithms.\n\nThe following classes are available for this purpose:\n\n\nFor the MLS/160A:\n```\nx = PyDSlog.csv.MLS160A_csv_saver(port, channels_to_use, frequency, block_size, \n                filepath, filename=None, labeled=False, save_as_signal=False,\n                header=True, custom_header=None, add_tmp=None, date_format=\"%d/%m/%Y,%H:%M:%S\", \n                baudrate=115200, w_mode=\"a\", delimiter=\",\")\n\n```\n\nand for the IO5640-DS:\n```\nx = PyDSlog.csv.IO5640_csv_saver(port, channels_to_use, frequency, block_size, \n                 filepath, filename=None, labeled=False, save_as_signal=False,\n                 header=True, custom_header=None, add_tmp=None, date_format=\"%d/%m/%Y,%H:%M:%S\", \n                 baudrate=115200, w_mode=\"a\", delimiter=\",\")\n\n```\n\nWhere:\n\n```sz_block``` is the size of the block to be read at once when the stream is read.\n```channels_to_use``` are the channels to use. Possible are ```[\"ACCX\", \"ACCY\", \"ACCZ\", \"GYRX\", \"GYRY\", \"GYRZ\"]``` for \nthe MLS/160A and ```[\"AI4U\", \"AI3U\", \"AI2U\", \"AI1U\", \"AI1I\", \"AI2I\"]``` for the IO5640-DS.\n```frequency``` is the desired frequency and ```port``` is the serial port. the baudrate is fixed at 115200 and can not \nbe changed.\n\n* Labeled: default False. boolean.\nIf the sensor values have to be labelled (in order to be used with Supervised Learning), it is necessary to use ```labeled=True```.\n* filepath: default None. string pointing to the location of the csv file.\nfilename: default None. string with name of file.\n* save_as_signal: default False. boolean.\nIf the values have to be interpreted as signals, it is necessary to use ```save_as_signal=True```. This makes it possible to use an FFT function later. A separate csv file is generated for each channel. The values that represent a signal are separated by commas. A newline character separates the signals from each other. Each signal has a length of sz_block values.\n* header: default True. boolean.\nIf true, the name of the channel is used as the header\n* custom_header: default None. string\nIn case a different header than the name of the channels is needed.\n* add_tmp: default None. also possible: date, us or ms.\nIn case you want to use a timestamp. for ```add_tmp=\"date\"``` the format in ```date_format``` is used.\n* date_format: default ```\"%d/%m/%Y,%H:%M:%S\"```\nThe format for the date used. only necessary if ```add_tmp=\"date\"``` \n* delimiter: \",\"\nThe separator character used.\n\nOnce the class to generate the CSV file is initialized it is possible to use the ```start()``` method to start saving the \nsensor values into the CSV file. The ```pause()``` method can be used to pause. This method stops the sensor stream but does\n not close the CSV file or release the serial port. To reactivate the stream and save more values in the file, the ```start()```\n  method can be used again. Finally, the ```stop()``` method is used to end the recording.\n\nIf the values are labeled it is possible to use the ```set_label(label)``` method to configure the label to be used. The \n```label``` parameter is a number that represents the label with which the values are stored in the file.\n\nAs an example, using MLS/160A:\n\n```\n# import libraries\nimport PyDSlog.csv as csv\nimport time\n\n\n# initialize \nx = csv.MLS160A_csv_saver(port=\"COM3\", channels_to_use=[\"ACCX\",\"ACCY\",\"ACCZ\"], frequency=500,\n                          block_size=500, filepath=\"test/\", filename=\"file.csv\",\n                          labeled=False, save_as_signal=False, header=True,\n                          add_tmp=\"ms\", baudrate=115200, w_mode=\"a\")\n\n# start\nx.start_csv()\n\n# wait..\ntime.sleep(3)\n\n#pause\nx.pause_csv()\n\n#wait again\ntime.sleep(3)\n\n# restart\nx.start_csv()\n\n# wait again..\ntime.sleep(3)\n\n# terminate\nx.stop_csv()\n\n```\n\nThe output will be something like:\n\n![alt text](https://github.com/SSV-embedded/PyDSlog/blob/master/images/csv.jpg \"CSV demo file\")\n\n\n### Fourier Transformation\n\nPyDSlog has a small class included to help transform the signals into the frequency spectrum.\n\n*Dependencies: you have to install numpy and scipy before you can use this module*\n\n```\nimport PyDSlog.transform as fft\nimport PyDSlog.stream as stream\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nchan = [\"ACCX\",\"ACCY\",\"ACCZ\"]\nserial_port = \"COM6\"\nfrequency = 400\nsize_signal = 400\nperiod = 1.0/frequency\n\n# initialize\ntransform = fft.FFTGenerator(period, size_signal, frequency)\nx = stream.MLS160A_stream(sz_block=size_signal, channels_to_use=chan,\n                                      frequency=frequency, port=serial_port, baudrate=115200)\n\n# read values as signal\nsensor_values = x.read(transpose=False)\nsensor_values = np.array(sensor_values)\n\n# transform\nffts_val = transform.doFFT(sensor_values, delete_offset=True)  \n# where ffts_val[0,c,:,0] are frequencies and ffts_val[0,c,:,1] are the amplitudes\n\n# plot\nplt.plot(ffts_val[0,c,:,0], ffts_val[0,c,:,1], linestyle='-', label=\"FFT\")\nplt.show()\n\n```\n\n### PyDSlog simple signal classifier\n\nPyDSlog includes a simple signal classifier. This classifier consists in forming groups where a master vector is stored \naccording to its correlation. During each learning cycle the correlation of the new vector with the master vector of each \ngroup is compared.  It is assumed that the master vector in the group with the highest correlation to the new vector is the \ngroup to which the new vector belongs. Once the group is found, a new master vector is calculated and stored in the group \nto be used in future operations.\n\nOnce the learning process has been completed, it is possible to predict which group a new vector belongs to by calculating \nthe average distance to the master vector from the group with the highest correlation.\n\n*Dependencies: you have to install numpy and scipy before you can use this module. For advanced functionality it is also \nrecommended to install scikit-learn*\n\nThe class:\n```\nPyDSlog.classificator.SignalClassificator(min_pears_correlation=0.7, max_subgroups=5, outliers=False)\n```\nwhere:\n\n* min_pears_correlation: Default is 0.7. float.\nis the minimum pearson correlation to be used to group a new vector to a group. \n* max_subgroups: Default is 5. integer.\nis the maximum quantity of groups generated while learning.\n* outliers: Default False. Boolean.\nIf the average distance found when predicting a class for a new vector is lower than the tolerance (see ```predict(signals, tolerance)```), then return -1 \nas class indicating that it is an unknown class or an anomaly\n\nTo train the algorithm it is necessary to use the ```fit( x_train, y_train)``` method. Where ```x_train``` are the signals \nand ```y_train``` are the labels.\n\nTo make a prediction it is necessary to use the ```predict(signals, tolerance)``` method. Where signals is the vector to be \nclassified and the tolerance is a number that indicates the tolerance to be used. If the average distance (or difference) \nof the new vector from the master vector within each group is greater than the tolerance, then the vector belongs to an \nunknown class or is an anomaly (-1).\n\nAs an example:\n```\nimport PyDSlog.classificator as classificator\nimport PyDSlog.transform as transform\nimport pandas as pd\nimport numpy as np\n\n\n##################   STREAM DATA PARAMETERS    #################\n\nN = 5000\nfs = 500\nT = 1 / fs\n\nPREFIX = \"1478217877058\"\n\nX_FILES = [PREFIX+\"_x_ACCX_.csv\",PREFIX+\"_x_ACCY_.csv\",PREFIX+\"_x_ACCZ_.csv\",\n           PREFIX+\"_x_GYRX_.csv\",PREFIX+\"_x_GYRY_.csv\",PREFIX+\"_x_GYRZ_.csv\"]\n\nY_FILE = PREFIX+\"_y_.csv\"\n\n\ndef read_signals(name):\n    r = pd.read_csv(name, header=None, index_col=None)\n    return r\n\n\nsignals = []\nfor file in X_FILES:\n    s = np.array(read_signals(\"../test/test/\"+file))\n    signals.append(s)\nsignals = np.transpose(np.array(signals), (1, 0, 2))\n\nlabels = np.array(pd.read_csv(\"../test/test/\"+Y_FILE, header=None, index_col=None))\nlabels = np.squeeze(labels)\n\nt = transform.FFTGenerator(T, N, fs)\nv_ffts = t.doFFT(signals, delete_offset=True)\nprint(v_ffts.shape)\n\n##################   TRAIN TEST SPLIT    #################\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(v_ffts[:,:,:,1], labels, test_size=0.4)\n\ncls = classificator.SignalClassificator()\ncls.fit(x_train, y_train)\ny_pred = cls.predict(x_test, 4.5, verbose=True)\n\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fbussv/PyDSlog",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDSlog",
    "package_url": "https://pypi.org/project/PyDSlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyDSlog/",
    "project_urls": {
      "Homepage": "https://github.com/fbussv/PyDSlog"
    },
    "release_url": "https://pypi.org/project/PyDSlog/0.0.7/",
    "requires_dist": [
      "pyserial",
      "paho-mqtt"
    ],
    "requires_python": "",
    "summary": "Sensor data acquisition library.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8272046,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58032953c60a67bde29ddae0d0159dec87df6c2bd0aacca5affaa229b14ad464",
          "md5": "a49e3aebf9515a329a0316acf87930ff",
          "sha256": "a058eeafdce340c0325c68dbba3c3102da7e73e5147732ff514a2cb9804fe8cf"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a49e3aebf9515a329a0316acf87930ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4956,
        "upload_time": "2019-07-17T15:09:26",
        "upload_time_iso_8601": "2019-07-17T15:09:26.952952Z",
        "url": "https://files.pythonhosted.org/packages/58/03/2953c60a67bde29ddae0d0159dec87df6c2bd0aacca5affaa229b14ad464/PyDSlog-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30919c392718158900c73d4bdd32f04c4d350f7878a6605593e19b379c912721",
          "md5": "869ade1cf8501d49aa0fdaae7cc8c1e0",
          "sha256": "2e28875b97a15cb666076843e96ac018b21294238f3893e5f1da7d45d2acd73e"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "869ade1cf8501d49aa0fdaae7cc8c1e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3620,
        "upload_time": "2019-07-17T15:09:28",
        "upload_time_iso_8601": "2019-07-17T15:09:28.749692Z",
        "url": "https://files.pythonhosted.org/packages/30/91/9c392718158900c73d4bdd32f04c4d350f7878a6605593e19b379c912721/PyDSlog-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53bc12a1e4ad443903cd356552b3c6d7c3bdfe5cf2dd329b95eaf2841b9d8568",
          "md5": "6c37901160f88d2bdd7f16df582405b0",
          "sha256": "20ea110e86c3f78255136840fd2c686ef3228ac975de2441f495d6a5986b0d57"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c37901160f88d2bdd7f16df582405b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6241,
        "upload_time": "2019-07-26T09:44:24",
        "upload_time_iso_8601": "2019-07-26T09:44:24.958353Z",
        "url": "https://files.pythonhosted.org/packages/53/bc/12a1e4ad443903cd356552b3c6d7c3bdfe5cf2dd329b95eaf2841b9d8568/PyDSlog-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e29420a1e2b04614e5bed133fdc4cf0e54f989772db9294298d438dfb330d08",
          "md5": "d37afbd9ff9640220c3228dff6aba7ba",
          "sha256": "79efcd041e67fccac2382542d5918c7feb872795111aeb079524722fa80bb76e"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d37afbd9ff9640220c3228dff6aba7ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4276,
        "upload_time": "2019-07-26T09:44:26",
        "upload_time_iso_8601": "2019-07-26T09:44:26.376722Z",
        "url": "https://files.pythonhosted.org/packages/1e/29/420a1e2b04614e5bed133fdc4cf0e54f989772db9294298d438dfb330d08/PyDSlog-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6eb1359e89be6d994621855e7b8a6cefea482132a1af1ab537fa3c90b5ed576",
          "md5": "afd3b172935b1c4cda618a1e65276610",
          "sha256": "7a7b7799135459a141dbbfee4ab3e4583bcb251ab7d61b2de74f83a9518c507d"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afd3b172935b1c4cda618a1e65276610",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38338,
        "upload_time": "2020-03-16T10:29:09",
        "upload_time_iso_8601": "2020-03-16T10:29:09.080477Z",
        "url": "https://files.pythonhosted.org/packages/f6/eb/1359e89be6d994621855e7b8a6cefea482132a1af1ab537fa3c90b5ed576/PyDSlog-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6040d2e38757a9e5ba344f66a99b242e04918c199d8a43f555e3055f55789a9d",
          "md5": "d66f2bd25da3baa7cc991476c7ffe6de",
          "sha256": "c2c768b9933be0f7b8bd150fd823acb52fe25351b27e25bdc0335b1c35f48eac"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d66f2bd25da3baa7cc991476c7ffe6de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20862,
        "upload_time": "2020-03-16T10:29:10",
        "upload_time_iso_8601": "2020-03-16T10:29:10.306786Z",
        "url": "https://files.pythonhosted.org/packages/60/40/d2e38757a9e5ba344f66a99b242e04918c199d8a43f555e3055f55789a9d/PyDSlog-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3035db90f44f424e90da396d50520ef45bf4ffe56b6fce6eaa037e365b11c54",
          "md5": "445ddebc7b3cca63915e030d603185ca",
          "sha256": "ab60ccd8c12b1766fb5ecda34a7c9b29d5eea9744db141c35315c234ede92322"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "445ddebc7b3cca63915e030d603185ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39838,
        "upload_time": "2020-09-25T15:50:44",
        "upload_time_iso_8601": "2020-09-25T15:50:44.378962Z",
        "url": "https://files.pythonhosted.org/packages/f3/03/5db90f44f424e90da396d50520ef45bf4ffe56b6fce6eaa037e365b11c54/PyDSlog-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b8448a4f87be3ca120cdefcaf1beb62b88d7e51ebc98c97b5aa48e79d3eaae7",
          "md5": "0de4a3450c3b1ae07346270bb2182cd7",
          "sha256": "a3059e700ee054a5e3cf52439ed770c2f39ef9cde47c1e4b902cd0d4ac1f34a6"
        },
        "downloads": -1,
        "filename": "PyDSlog-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0de4a3450c3b1ae07346270bb2182cd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27765,
        "upload_time": "2020-09-25T15:50:45",
        "upload_time_iso_8601": "2020-09-25T15:50:45.720883Z",
        "url": "https://files.pythonhosted.org/packages/0b/84/48a4f87be3ca120cdefcaf1beb62b88d7e51ebc98c97b5aa48e79d3eaae7/PyDSlog-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3035db90f44f424e90da396d50520ef45bf4ffe56b6fce6eaa037e365b11c54",
        "md5": "445ddebc7b3cca63915e030d603185ca",
        "sha256": "ab60ccd8c12b1766fb5ecda34a7c9b29d5eea9744db141c35315c234ede92322"
      },
      "downloads": -1,
      "filename": "PyDSlog-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "445ddebc7b3cca63915e030d603185ca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 39838,
      "upload_time": "2020-09-25T15:50:44",
      "upload_time_iso_8601": "2020-09-25T15:50:44.378962Z",
      "url": "https://files.pythonhosted.org/packages/f3/03/5db90f44f424e90da396d50520ef45bf4ffe56b6fce6eaa037e365b11c54/PyDSlog-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b8448a4f87be3ca120cdefcaf1beb62b88d7e51ebc98c97b5aa48e79d3eaae7",
        "md5": "0de4a3450c3b1ae07346270bb2182cd7",
        "sha256": "a3059e700ee054a5e3cf52439ed770c2f39ef9cde47c1e4b902cd0d4ac1f34a6"
      },
      "downloads": -1,
      "filename": "PyDSlog-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "0de4a3450c3b1ae07346270bb2182cd7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27765,
      "upload_time": "2020-09-25T15:50:45",
      "upload_time_iso_8601": "2020-09-25T15:50:45.720883Z",
      "url": "https://files.pythonhosted.org/packages/0b/84/48a4f87be3ca120cdefcaf1beb62b88d7e51ebc98c97b5aa48e79d3eaae7/PyDSlog-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}