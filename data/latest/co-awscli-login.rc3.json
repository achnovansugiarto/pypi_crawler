{
  "info": {
    "author": "David D. Riddle",
    "author_email": "ddriddle@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "The awscli-login plugin allows retrieving temporary Amazon credentials by\nauthenticating against a SAML Identity Provider (IdP).\nThis application is supported under Linux, MacOS, and the `Windows Subsystem for Linux\n<https://docs.microsoft.com/en-us/windows/wsl/about>`_.\nCurrently, Windows PowerShell, Command Prompt, and Git Shell\nfor Windows are not supported.\n\n.. |--| unicode:: U+2013   .. en dash\n\nInstallation\n------------\n\nThe simplest way to install the awscli-login plugin is to use pip::\n\n    $ pip install awscli-login\n\nAfter awscli-login has been installed, run the following command\nto enable the plugin::\n\n    $ aws configure set plugins.login awscli_login\n\nGetting Started\n-------------------\n\nBefore using awscli-login to retrieve temporary credentials, configure\none or more profiles for use with the plugin. To configure this\nplugin, you must know the URL of the ECP Endpoint for your IdP.  If\nyou do not have this information, contact your IdP administrator.\n\nHere is an example configuring the default profile for use with the University\nof Illinois at Urbana-Champaign's IdP::\n\n    $ aws login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]: \n    Enable Keyring [False]: \n    Duo Factor [None]: \n    Role ARN [None]:\n\nTo log in, type the following command::\n\n    $ aws login\n    Username [username]: netid\n    Password: ********\n    Factor: passcode\n    Code: 123456789\n\nThe ``username`` and ``password`` are the values needed to authenticate\nagainst the IdP configured for the selected profile.  The ``factor``\nis only required if your IdP requires Duo for authentication.  If\nit does not, leave ``factor`` blank. If your IdP does require Duo\nthen ``Factor`` may be one of ``auto``, ``push``, ``passcode``,\n``sms``, or ``phone``.  If ``factor`` is left blank, ``auto`` is\nthe default. The ``code`` is a Duo code useful for use with a\nYubiKey, SMS codes, or other one-time codes.\n\nIf you have access to more than one role, you will be prompted to choose\none. For example::\n\n    $ aws login\n    Username [username]: netid\n    Password: ********\n    Factor: \n    Please choose the role you would like to assume:\n        Account: 978517677611\n            [ 0 ]: Admin\n        Account: 520135271718\n            [ 1 ]: ReadOnlyUser\n            [ 2 ]: S3Admin\n    Selection: 2\n\nTo switch roles, first log out, then log in again selecting a different\nrole. Note that if you log in to the same IdP using the same username,\nyou will not be prompted for your password or Duo factor until\nthe IdP session expires::\n\n    $ aws logout\n    $ aws login\n    Username [netid]: \n    Please choose the role you would like to assume:\n        Account: 520135271718\n            [ 0 ]: TestUser\n            [ 1 ]: IAMUser\n    Selection: 0\n\nIf you want to show an account alias in the list of\nroles, you can generate one with::\n\n    $ aws login account_names --save\n\nThis will write a file to ``~/.aws-login/accounts.ini`` that you can edit\nas needed. If you rerun the command it will add any accounts that do\nnot exist, but will not change existing entries.\n\nIf you want to display the account alias on your shell prompt it is stored in\n``~/.aws-login/identity.txt`` and updated as you log in / out. You can use that\nfile with a bash function like this::\n\n    aws_prompt_info() {\n        local IDENTITY_FILE=~/.aws-login/identity.txt\n        local PROF=\"\"\n\n        if [[ -f \"$IDENTITY_FILE\" ]] then\n\n            PROF=$( cat \"$IDENTITY_FILE\" 2>/dev/null)\n            [[ -n \"$PROF\" ]] && echo \"[$PROF]\"\n        fi\n    }\n\n\nAdvanced Example\n-------------------\n\nIt is possible to be logged in to more than one role at the same\ntime using multiple profiles. For example, consider the following\nconfiguration involving two profiles |--| one called ``prod``, and the other\n``test``::\n\n    $ aws --profile prod login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]: netid\n    Enable Keyring [False]: True\n    Duo Factor [None]: auto\n    Role ARN [None]: arn:aws:iam::999999999999:role/Admin\n\n    $ aws --profile test login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]: netid\n    Enable Keyring [False]: True\n    Duo Factor [None]: passcode\n    Role ARN [None]: arn:aws:iam::111111111111:role/Admin\n\nThis example involves several advanced features. First, we are\nsetting the username, factor, and role. This means we will not be\nprompted for this information when logging in to these two profiles.\nIn addition, we are using a keyring. On the first login using one\nof the profiles, the user will be prompted for his password.  On\nsubsequent logins the user will not be prompted for his password\nbecause it has been stored in a secure keyring.\n\nFor example, when we initially log in to prod::\n\n    $ export AWS_PROFILE=test\n    $ aws login\n    Password: ********\n    Code: 123456789\n\nWe are only prompted for the password and code. We're prompted for\nthe password because this is the initial login, and the code because\nthis profile is configured for use with a passcode device such as\na YubiKey. We are now no longer prompted when we log in to test::\n\n    $ aws --profile prod login\n\nEven if the IdP session has expired in this case, we will not be\nprompted for a password because it is stored in the keyring. The\nuser will receive either a phone call or a push to the default\nDuo device.\n\nKnown Issues\n------------\n\n**Unable to authenticate after changing password**\n\nAfter the user changes his IdP password, subsequent logins fail.\nTo remedy the situation, change the data stored in the keyring as follows:\n\n    $ keyring set awscli_login username@hostname_of_your_IdP\n\nYou may be prompted for your user login password by your operating\nsystem, depending on how your key store is configured.\n\n**Windows issues**\n\nWindows PowerShell, Command Prompt, and Git Shell for Windows are not\ncurrently supported because of problems with auto-renewal of AWS credentials,\nand other known issues.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/techservicesillinois/awscli-login",
    "keywords": "Amazon AWS SAML login access keys",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "co-awscli-login",
    "package_url": "https://pypi.org/project/co-awscli-login/",
    "platform": "",
    "project_url": "https://pypi.org/project/co-awscli-login/",
    "project_urls": {
      "Bug Reports": "https://github.com/techservicesillinois/awscli-login/issues",
      "Homepage": "https://github.com/techservicesillinois/awscli-login",
      "Source": "https://github.com/techservicesillinois/awscli-login"
    },
    "release_url": "https://pypi.org/project/co-awscli-login/0.1.0a8/",
    "requires_dist": [
      "awscli",
      "boto3",
      "botocore",
      "daemoniker",
      "keyring",
      "lxml",
      "psutil",
      "requests",
      "Sphinx ; extra == 'test'",
      "coverage ; extra == 'test'",
      "sphinx-autodoc-typehints ; extra == 'test'",
      "sphinx-rtd-theme ; extra == 'test'",
      "tblib ; extra == 'test'",
      "tox ; extra == 'test'",
      "tox-pyenv ; extra == 'test'",
      "wurlitzer ; extra == 'test'"
    ],
    "requires_python": ">=3.5",
    "summary": "Plugin for the AWS CLI that retrieves and rotates credentials using SAML ECP and STS.",
    "version": "0.1.0a8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8878550,
  "releases": {
    "0.1.0a6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9d50d55f7ec368d65a156d37bc00153471a65cbce695965620d3eaf5791c5f4",
          "md5": "75c5ea0a9c2bed4c3b215c26598878e6",
          "sha256": "7f32a822549428946909d15e589a39ba1955b1904774c4d7c3254e7af38960e5"
        },
        "downloads": -1,
        "filename": "co-awscli-login-0.1.0a6.tar.gz",
        "has_sig": false,
        "md5_digest": "75c5ea0a9c2bed4c3b215c26598878e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 32446,
        "upload_time": "2019-08-07T02:12:31",
        "upload_time_iso_8601": "2019-08-07T02:12:31.741877Z",
        "url": "https://files.pythonhosted.org/packages/a9/d5/0d55f7ec368d65a156d37bc00153471a65cbce695965620d3eaf5791c5f4/co-awscli-login-0.1.0a6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6cb6de7549bf7180bdcb4c49136aab3814aa03dcb0977277eb4b1ff343bab6d",
          "md5": "b04d970bb4e8f54cd780fd1b0f5e8a19",
          "sha256": "80cd27476bfabf45af1dbb71f75cb434ea260d992fc4dcafbe83b9fb6f4b8ca7"
        },
        "downloads": -1,
        "filename": "co-awscli-login-0.1.0a7.tar.gz",
        "has_sig": false,
        "md5_digest": "b04d970bb4e8f54cd780fd1b0f5e8a19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 32459,
        "upload_time": "2019-08-07T12:44:04",
        "upload_time_iso_8601": "2019-08-07T12:44:04.845220Z",
        "url": "https://files.pythonhosted.org/packages/e6/cb/6de7549bf7180bdcb4c49136aab3814aa03dcb0977277eb4b1ff343bab6d/co-awscli-login-0.1.0a7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b79c0f5fc98125ae504b5b67e66b5c465638e66fef8b9f05a21459cd2711524",
          "md5": "13951f264e5daa6fed4eb8f4184cfd02",
          "sha256": "622b188e99e951ea2fef5d66ccf4e23b866bb8f37b2332d299c2a4cdd2416d0d"
        },
        "downloads": -1,
        "filename": "co_awscli_login-0.1.0a8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13951f264e5daa6fed4eb8f4184cfd02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 40001,
        "upload_time": "2020-12-11T18:10:45",
        "upload_time_iso_8601": "2020-12-11T18:10:45.595551Z",
        "url": "https://files.pythonhosted.org/packages/7b/79/c0f5fc98125ae504b5b67e66b5c465638e66fef8b9f05a21459cd2711524/co_awscli_login-0.1.0a8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd99e967cf1ab2773b51226cbd3217883f9a2be6ceeca2a8fc8cdb95880691e7",
          "md5": "8778a4e7f478c33f6d1b9e52c63b454b",
          "sha256": "f68ea9cedc86cf901cf10a54c9ce48a34030fef3e56ec64566c6e6cb519c0d1f"
        },
        "downloads": -1,
        "filename": "co-awscli-login-0.1.0a8.tar.gz",
        "has_sig": false,
        "md5_digest": "8778a4e7f478c33f6d1b9e52c63b454b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 33156,
        "upload_time": "2020-12-11T18:10:46",
        "upload_time_iso_8601": "2020-12-11T18:10:46.958911Z",
        "url": "https://files.pythonhosted.org/packages/dd/99/e967cf1ab2773b51226cbd3217883f9a2be6ceeca2a8fc8cdb95880691e7/co-awscli-login-0.1.0a8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b79c0f5fc98125ae504b5b67e66b5c465638e66fef8b9f05a21459cd2711524",
        "md5": "13951f264e5daa6fed4eb8f4184cfd02",
        "sha256": "622b188e99e951ea2fef5d66ccf4e23b866bb8f37b2332d299c2a4cdd2416d0d"
      },
      "downloads": -1,
      "filename": "co_awscli_login-0.1.0a8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "13951f264e5daa6fed4eb8f4184cfd02",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 40001,
      "upload_time": "2020-12-11T18:10:45",
      "upload_time_iso_8601": "2020-12-11T18:10:45.595551Z",
      "url": "https://files.pythonhosted.org/packages/7b/79/c0f5fc98125ae504b5b67e66b5c465638e66fef8b9f05a21459cd2711524/co_awscli_login-0.1.0a8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd99e967cf1ab2773b51226cbd3217883f9a2be6ceeca2a8fc8cdb95880691e7",
        "md5": "8778a4e7f478c33f6d1b9e52c63b454b",
        "sha256": "f68ea9cedc86cf901cf10a54c9ce48a34030fef3e56ec64566c6e6cb519c0d1f"
      },
      "downloads": -1,
      "filename": "co-awscli-login-0.1.0a8.tar.gz",
      "has_sig": false,
      "md5_digest": "8778a4e7f478c33f6d1b9e52c63b454b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 33156,
      "upload_time": "2020-12-11T18:10:46",
      "upload_time_iso_8601": "2020-12-11T18:10:46.958911Z",
      "url": "https://files.pythonhosted.org/packages/dd/99/e967cf1ab2773b51226cbd3217883f9a2be6ceeca2a8fc8cdb95880691e7/co-awscli-login-0.1.0a8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}