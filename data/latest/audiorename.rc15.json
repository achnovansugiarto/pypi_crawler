{
  "info": {
    "author": "Josef Friedrich",
    "author_email": "josef@friedrich.rocks",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: http://img.shields.io/pypi/v/audiorename.svg\n    :target: https://pypi.python.org/pypi/audiorename\n    :alt: This package on the Python Package Index\n\n.. image:: https://github.com/Josef-Friedrich/audiorename/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/Josef-Friedrich/audiorename/actions/workflows/test.yml\n    :alt: Tests\n\n.. image:: https://readthedocs.org/projects/audiorename/badge/?version=latest\n    :target: https://audiorename.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n***********\naudiorename\n***********\n\nRename audio files from metadata tags.\n\nInstallation\n============\n\nFrom Github\n-----------\n\n.. code:: Shell\n\n    git clone git@github.com:Josef-Friedrich/audiorename.git\n    cd audiorename\n    python setup.py install\n\nFrom PyPI\n---------\n\n.. code:: Shell\n\n    pip install audiorename\n    easy_install audiorename\n\nExamples\n========\n\nPlease use the ``-d`` (``--dry-run``) option first\n\nBasic example:\n\n.. code:: Shell\n\n    cd my-chaotic-music-collection\n    audiorenamer -d .\n\n\nMore advanced example:\n\n.. code:: Shell\n\n    audiorenamer -d -f '$artist/$album/$track $title' --target /mnt/hd/my-organized-music-collection .\n\nVery advanced example:\n\n.. code:: Shell\n\n    audiorenamer -d -f '$ar_initial_artist/%shorten{$ar_combined_artist_sort}/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_%shorten{$title}' .\n\nUsage\n=====\n\n.. code-block:: text\n\n    usage: audiorenamer [-h] [--config CONFIG] [-v] [-t TARGET] [-a]\n                        [-p BACKUP_FOLDER] [-B] [-d] [-C | -M | -n] [-A | -D] [-F]\n                        [-m ALBUM_MIN] [-e EXTENSION]\n                        [--genre-classical GENRE_CLASSICAL] [-s FIELD_SKIP] [-k]\n                        [-S] [--no-soundtrack] [-f PATH_TEMPLATE]\n                        [-c PATH_TEMPLATE] [--soundtrack PATH_TEMPLATE]\n                        [--format-classical PATH_TEMPLATE] [-K | --no-color] [-b]\n                        [-j] [-l] [-o] [-T] [-V] [-E] [-r]\n                        source\n    \n        Rename audio files from metadata tags.\n    \n        How to specify the target directory?\n    \n        1. By the default the audio files are moved or renamed to the parent\n           working directory.\n        2. Use the option ``-t <folder>`` or ``--target <folder>`` to specifiy\n           a target directory.\n        3. Use the option ``-a`` or ``--source-as-target`` to copy or rename\n           your audio files within the source directory.\n    \n    Metadata fields\n    ===============\n    \n        $acoustid_fingerprint:       Acoustic ID fingerprint\n    \n        $acoustid_id:                Acoustic ID\n                                     Examples: ['86e217b7-d3ad-4493-a9f2-cf71256ace07']\n    \n        $album:                      album\n                                     Examples: ['Help!']\n    \n        $albumartist:                The artist for the entire album, which may be\n                                     different from the artists for the individual\n                                     tracks\n                                     Examples: ['The Beatles']\n    \n        $albumartist_credit:         albumartist_credit\n    \n        $albumartist_sort:           albumartist_sort\n                                     Examples: ['Beatles, The']\n    \n        $albumartists:               albumartists\n    \n        $albumdisambig:              The disambiguation album field helps to\n                                     distinguish between identically named albums.\n                                     The album “Weezer” for example has the\n                                     disambiguation comments “Red Album” and\n                                     “Green Album”.\n    \n        $albumstatus:                The status describes how \"official\" a release\n                                     is.\n                                     Examples: ['official', 'promotional', 'bootleg', 'pseudo-release']\n    \n        $albumtype:                  The MusicBrainz album type; the MusicBrainz\n                                     wiki has a list of type names\n                                     Examples: ['album/soundtrack']\n    \n        $ar_classical_album:         The field “work” without the movement suffix.\n                                     For example: “Horn Concerto: I. Allegro” ->\n                                     “Horn Concerto”\n                                     Examples: ['Horn Concerto', 'Die Meistersinger von Nürnberg']\n    \n        $ar_classical_performer:     “ar_performer_short” or “albumartist” without\n                                     the composer prefix: “Beethoven; Karajan,\n                                     Mutter” -> “Karajan, Mutter”\n                                     Examples: ['Karajan, Mutter', 'Karajan, StaDre']\n    \n        $ar_classical_title:         The movement title without the parent work\n                                     prefix. For example “Horn Concerto: I.\n                                     Allegro” -> “I. Allegro”\n                                     Examples: ['I. Allegro', 'Akt III, Szene V. \"Morgendlich leuchtend im rosigen Schein\" (Walther, Volk, Meister, Sachs, Pogner, Eva)']\n    \n        $ar_classical_track:         If the title contains Roman numbers, then\n                                     these are converted to arabic numbers with\n                                     leading zeros. If no Roman numbers could be\n                                     found, then the field “ar_combined_disctrack”\n                                     is used.\n                                     Examples: ['01', '4-08']\n    \n        $ar_combined_album:          “album” without ” (Disc X)”.\n                                     Examples: ['Headlines and Deadlines: The Hits of a-ha', 'Die Meistersinger von Nürnberg']\n    \n        $ar_combined_artist:         The first non-empty value of the following\n                                     list of fields: “albumartist” -> “artist” ->\n                                     “albumartist_credit” -> “artist_credit” ->\n                                     “albumartist_sort” -> “artist_sort”. If no\n                                     value could be determined, then “Unknown” is\n                                     assigned. The second artist after “feat.”,\n                                     “ft.” or “vs.” is removed.\n                                     Examples: ['a-ha', 'Richard Wagner; René Kollo, Helen Donath, ...']\n    \n        $ar_combined_artist_sort:    The first non-empty value of the following\n                                     list of fields: “albumartist_sort” ->\n                                     “artist_sort” -> “albumartist” -> “artist” ->\n                                     “albumartist_credit” -> “artist_credit”. If\n                                     no value could be determined, then “Unknown”\n                                     is assigned. The second artist after “feat.”,\n                                     “ft.” or “vs.” is removed.\n                                     Examples: ['a-ha', 'Wagner, Richard; Kollo, René, Donath, Helen...']\n    \n        $ar_combined_composer:       The first not empty field of this field list:\n                                     “composer_sort”, “composer”,\n                                     “ar_combined_artist”\n                                     Examples: ['Beethoven, Ludwig-van', 'Wagner, Richard']\n    \n        $ar_combined_disctrack:      Combination of disc and track in the format:\n                                     disk-track\n                                     Examples: ['1-01', '3-099']\n    \n        $ar_combined_soundtrack:     Boolean flag which indicates if the audio\n                                     file is a soundtrack\n                                     Examples: [True, False]\n    \n        $ar_combined_work_top:       The work on the top level of a work\n                                     hierarchy.\n                                     Examples: ['Horn Concerto: I. Allegro', 'Die Meistersinger von Nürnberg']\n    \n        $ar_combined_year:           First “original_year” then “year”.\n                                     Examples: [1978]\n    \n        $ar_initial_album:           First character in lowercase of\n                                     “ar_combined_album”. Allowed characters:\n                                     [a-z, 0, _], 0-9 -> 0, ? -> _. For example\n                                     “Help!” -> “h”.\n                                     Examples: ['h']\n    \n        $ar_initial_artist:          First character in lowercase of\n                                     “ar_combined_artist_sort”. Allowed\n                                     characters: [a-z, 0, _], 0-9 -> 0, ? -> _.\n                                     For example “Brendel, Alfred” -> “b”.\n                                     Examples: ['b']\n    \n        $ar_initial_composer:        First character in lowercase of\n                                     “ar_combined_composer”. Allowed characters:\n                                     [a-z, 0, _], 0-9 -> 0, ? -> _. For example\n                                     “Ludwig van Beethoven” -> “l”.\n                                     Examples: ['l']\n    \n        $ar_performer:               Performer names.\n                                     Examples: ['Herbert von Karajan, Staatskapelle Dresden']\n    \n        $ar_performer_raw:           Raw performer names.\n                                     Examples: [[['conductor', 'Herbert von Karajan'], ['orchestra', 'Staatskapelle Dresden']]]\n    \n        $ar_performer_short:         Abbreviated performer names.\n                                     Examples: ['Karajan, StaDre']\n    \n        $arranger:                   A musician who creates arrangements.\n    \n        $art:                        Legacy album art field.\n                                     Examples: [b'\\xff\\xd8\\xff\\xe0\\x00']\n    \n        $artist:                     artist\n                                     Examples: ['The Beatles']\n    \n        $artist_credit:              The track-specific artist credit name, which\n                                     may be a variation of the artist’s\n                                     “canonical” name\n    \n        $artist_sort:                The “sort name” of the track artist.\n                                     Examples: ['Beatles, The', 'White, Jack']\n    \n        $artists:                    artists\n                                     Examples: [['a-ha']]\n    \n        $asin:                       Amazon Standard Identification Number\n                                     Examples: ['B000002UAL']\n    \n        $barcode:                    There are many different types of barcode,\n                                     but the ones usually found on music releases\n                                     are two: 1. Universal Product Code (UPC),\n                                     which is the original barcode used in North\n                                     America. 2. European Article Number (EAN)\n                                     Examples: ['5028421931838', '036000291452']\n    \n        $bitdepth:                   only available for some formats\n                                     Examples: [16]\n    \n        $bitrate:                    in kilobits per second, with units: e.g.,\n                                     “192kbps”\n                                     Examples: [436523, 256000]\n    \n        $bitrate_mode:               bitrate_mode\n                                     Examples: ['CBR']\n    \n        $bpm:                        Beats per Minute\n    \n        $catalognum:                 This is a number assigned to the release by\n                                     the label which can often be found on the\n                                     spine or near the barcode. There may be more\n                                     than one, especially when multiple labels are\n                                     involved. This is not the ASIN — there is a\n                                     relationship for that — nor the label code.\n                                     Examples: ['CDP 7 46439 2']\n    \n        $channels:                   channels\n                                     Examples: [1, 2]\n    \n        $comments:                   comments\n    \n        $comp:                       Compilation flag\n                                     Examples: [True, False]\n    \n        $composer:                   The name of the composer.\n                                     Examples: ['Ludwig van Beethoven']\n    \n        $composer_sort:              The composer name for sorting.\n                                     Examples: ['Beethoven, Ludwig van']\n    \n        $copyright:                  copyright\n    \n        $country:                    The country the release was issued in.\n    \n        $date:                       The release data of the specific release.\n                                     Examples: ['1996-01-01']\n    \n        $day:                        The release day of the specific release.\n    \n        $disc:                       disc\n                                     Examples: [1]\n    \n        $disctitle:                  disctitle\n    \n        $disctotal:                  disctotal\n                                     Examples: [1]\n    \n        $encoder:                    the name of the person or organisation that\n                                     encoded the audio file. This field may\n                                     contain a copyright message, if the audio\n                                     file also is copyrighted by the encoder.\n                                     Examples: ['iTunes v7.6.2']\n    \n        $encoder_info:               encoder_info\n                                     Examples: ['LAME 3.92.0+']\n    \n        $encoder_settings:           encoder_settings\n                                     Examples: ['-b 255+']\n    \n        $format:                     e.g., “MP3” or “FLAC”\n                                     Examples: ['MP3', 'FLAC']\n    \n        $genre:                      genre\n    \n        $genres:                     genres\n    \n        $grouping:                   A content group, which is a collection of\n                                     media items such as a CD boxed set.\n    \n        $images:                     images\n                                     Examples: [['<mediafile.Image object at 0x7f51fce26b20>']]\n    \n        $initial_key:                The Initial key frame contains the musical\n                                     key in which the sound starts. It is\n                                     represented as a string with a maximum length\n                                     of three characters. The ground keys are\n                                     represented with \"A\",\"B\",\"C\",\"D\",\"E\", \"F\" and\n                                     \"G\" and halfkeys represented with \"b\" and\n                                     \"#\". Minor is represented as \"m\".\n                                     Examples: ['Dbm']\n    \n        $isrc:                       The International Standard Recording Code,\n                                     abbreviated to ISRC, is a system of codes\n                                     that identify audio and music video\n                                     recordings.\n                                     Examples: ['CAC118989003', 'ITO101117740']\n    \n        $label:                      The label which issued the release. There may\n                                     be more than one.\n                                     Examples: ['Brilliant Classics', 'wea']\n    \n        $language:                   The language a release’s track list is\n                                     written in. The possible values are taken\n                                     from the ISO 639-3 standard.\n                                     Examples: ['zxx', 'eng']\n    \n        $length:                     The length of a recording in seconds.\n                                     Examples: [674.4666666666667]\n    \n        $lyricist:                   The writer of the text or lyrics in the\n                                     recording.\n    \n        $lyrics:                     The lyrics of the song or a text\n                                     transcription of other vocal activities.\n    \n        $mb_albumartistid:           MusicBrainz album artist ID.\n                                     Examples: ['1f9df192-a621-4f54-8850-2c5373b7eac9', 'b972f589-fb0e-474e-b64a-803b0364fa75']\n    \n        $mb_albumartistids:          MusicBrainz album artist IDs as a list.\n                                     Examples: [['b972f589-fb0e-474e-b64a-803b0364fa75', 'dea28aa9-1086-4ffa-8739-0ccc759de1ce', 'd2ced2f1-6b58-47cf-ae87-5943e2ab6d99']]\n    \n        $mb_albumid:                 MusicBrainz album ID.\n                                     Examples: ['fd6adc77-1489-4a13-9aa0-32951061d92b']\n    \n        $mb_artistid:                MusicBrainz artist ID.\n                                     Examples: ['1f9df192-a621-4f54-8850-2c5373b7eac9']\n    \n        $mb_artistids:               MusicBrainz artist IDs as a list.\n                                     Examples: [['1f9df192-a621-4f54-8850-2c5373b7eac9']]\n    \n        $mb_releasegroupid:          MusicBrainz releasegroup ID.\n                                     Examples: ['f714fd70-aaca-4863-9d0d-2768a53acaeb']\n    \n        $mb_releasetrackid:          MusicBrainz release track ID.\n                                     Examples: ['38c8c114-5e3b-484f-8af0-79c47ef9c169']\n    \n        $mb_trackid:                 MusicBrainz track ID.\n                                     Examples: ['c390b132-4a44-4e16-bec3-bffbbcaa19aa']\n    \n        $mb_workhierarchy_ids:       All IDs in the work hierarchy. This field\n                                     corresponds to the field `work_hierarchy`.\n                                     The top level work ID appears first. A slash\n                                     (/) is used as separator.\n                                     Examples: ['e208c5f5-5d37-3dfc-ac0b-999f207c9e46 / 5adc213f-700a-4435-9e95-831ed720f348 / eafec51f-47c5-3c66-8c36-a524246c85f8']\n    \n        $mb_workid:                  MusicBrainz work ID.\n                                     Examples: ['508ec4b1-9549-38cd-a61e-1f0d120a6118']\n    \n        $media:                      A prototypical medium is one of the physical,\n                                     separate things you would get when you buy\n                                     something in a record store.\n                                     Examples: ['CD']\n    \n        $month:                      The release month of the specific release.\n                                     Examples: [11]\n    \n        $original_date:              The release date of the original version of\n                                     the album.\n                                     Examples: ['1991-11-04']\n    \n        $original_day:               The release day of the original version of\n                                     the album.\n                                     Examples: [4]\n    \n        $original_month:             The release month of the original version of\n                                     the album.\n                                     Examples: [11]\n    \n        $original_year:              The release year of the original version of\n                                     the album.\n                                     Examples: [1991]\n    \n        $r128_album_gain:            An optional gain for album normalization. EBU\n                                     R 128 is a recommendation for loudness\n                                     normalisation and maximum level of audio\n                                     signals.\n    \n        $r128_track_gain:            An optional gain for track normalization. EBU\n                                     R 128 is a recommendation for loudness\n                                     normalisation and maximum level of audio\n                                     signals.\n    \n        $releasegroup_types:         This field collects all items in the\n                                     MusicBrainz’ API  related to type: `type`,\n                                     `primary-type and `secondary-type-list`. Main\n                                     usage of this field is to determine in a\n                                     secure manner if the release is a soundtrack.\n    \n        $rg_album_gain:              ReplayGain Album Gain, see\n                                     https://en.wikipedia.org/wiki/ReplayGain.\n    \n        $rg_album_peak:              ReplayGain Album Peak, see\n                                     https://en.wikipedia.org/wiki/ReplayGain.\n    \n        $rg_track_gain:              ReplayGain Track Gain, see\n                                     https://en.wikipedia.org/wiki/ReplayGain.\n                                     Examples: [0.0]\n    \n        $rg_track_peak:              ReplayGain Track Peak, see\n                                     https://en.wikipedia.org/wiki/ReplayGain.\n                                     Examples: [0.000244]\n    \n        $samplerate:                 The sample rate as an integer number.\n                                     Examples: [44100]\n    \n        $script:                     The script used to write the release’s track\n                                     list. The possible values are taken from the\n                                     ISO 15924 standard.\n                                     Examples: ['Latn']\n    \n        $title:                      The title of a audio file.\n                                     Examples: ['32 Variations for Piano in C minor on an Original Theme, WoO 80']\n    \n        $track:                      The track number.\n                                     Examples: [1]\n    \n        $tracktotal:                 The total track number.\n                                     Examples: [12]\n    \n        $url:                        Uniform Resource Locator.\n    \n        $work:                       The Musicbrainzs’ work entity.\n                                     Examples: ['32 Variations for Piano in C minor on an Original Theme, WoO 80']\n    \n        $work_hierarchy:             The hierarchy of works: The top level work\n                                     appears first. As separator is this string\n                                     used: -->.\n                                     Examples: ['Die Zauberflöte, K. 620 --> Die Zauberflöte, K. 620: Akt I --> Die Zauberflöte, K. 620: Act I, Scene II. No. 2 Aria \"Was hör ...']\n    \n        $year:                       The release year of the specific release.\n                                     Examples: [2001]\n    \n    Functions\n    =========\n    \n        alpha\n        -----\n    \n        %alpha{text}\n            This function first ASCIIfies the given text, then all non alphabet\n            characters are replaced with whitespaces.\n    \n        alphanum\n        --------\n    \n        %alphanum{text}\n            This function first ASCIIfies the given text, then all non alpanumeric\n            characters are replaced with whitespaces.\n    \n        asciify\n        -------\n    \n        %asciify{text}\n            Translate non-ASCII characters to their ASCII equivalents. For\n            example, “café” becomes “cafe”. Uses the mapping provided by the\n            unidecode module.\n    \n        delchars\n        --------\n    \n        %delchars{text,chars}\n            Delete every single character of “chars“ in “text”.\n    \n        deldupchars\n        -----------\n    \n        %deldupchars{text,chars}\n            Search for duplicate characters and replace with only one occurrance\n            of this characters.\n    \n        first\n        -----\n    \n        %first{text} or %first{text,count,skip} or\n        %first{text,count,skip,sep,join}\n            Returns the first item, separated by ; . You can use\n            %first{text,count,skip}, where count is the number of items (default\n            1) and skip is number to skip (default 0). You can also use\n            %first{text,count,skip,sep,join} where sep is the separator, like ; or\n            / and join is the text to concatenate the items.\n    \n        if\n        --\n    \n        %if{condition,truetext} or %if{condition,truetext,falsetext}\n            If condition is nonempty (or nonzero, if it’s a number), then returns\n            the second argument. Otherwise, returns the third argument if\n            specified (or nothing if falsetext is left off).\n    \n        ifdef\n        -----\n    \n        %ifdef{field}, %ifdef{field,text} or %ifdef{field,text,falsetext}\n            If field exists, then return truetext or field (default). Otherwise,\n            returns falsetext. The field should be entered without $.\n    \n        ifdefempty\n        ----------\n    \n        %ifdefempty{field,text} or %ifdefempty{field,text,falsetext}\n            If field exists and is empty, then return truetext. Otherwise, returns\n            falsetext. The field should be entered without $.\n    \n        ifdefnotempty\n        -------------\n    \n        %ifdefnotempty{field,text} or %ifdefnotempty{field,text,falsetext}\n            If field is not empty, then return truetext. Otherwise, returns\n            falsetext. The field should be entered without $.\n    \n        initial\n        -------\n    \n        %initial{text}\n            Get the first character of a text in lowercase. The text is converted\n            to ASCII. All non word characters are erased.\n    \n        left\n        ----\n    \n        %left{text,n}\n            Return the first “n” characters of “text”.\n    \n        lower\n        -----\n    \n        %lower{text}\n            Convert “text” to lowercase.\n    \n        nowhitespace\n        ------------\n    \n        %nowhitespace{text,replace}\n            Replace all whitespace characters with replace. By default: a dash (-)\n            %nowhitespace{$track,_}\n    \n        num\n        ---\n    \n        %num{number,count}\n            Pad decimal number with leading zeros.\n            %num{$track,3}\n    \n        replchars\n        ---------\n    \n        %replchars{text,chars,replace}\n            Replace the characters “chars” in “text” with “replace”.\n            %replchars{text,ex,-} > t--t\n    \n        right\n        -----\n    \n        %right{text,n}\n            Return the last “n” characters of “text”.\n    \n        sanitize\n        --------\n    \n        %sanitize{text}\n            Delete in most file systems not allowed characters.\n    \n        shorten\n        -------\n    \n        %shorten{text} or %shorten{text,max_size}\n            Shorten “text” on word boundarys.\n            %shorten{$title,32}\n    \n        time\n        ----\n    \n        %time{date_time,format,curformat}\n            Return the date and time in any format accepted by strftime. For\n            example, to get the year some music was added to your library, use\n            %time{$added,%Y}.\n    \n        title\n        -----\n    \n        %title{text}\n            Convert “text” to Title Case.\n    \n        upper\n        -----\n    \n        %upper{text}\n            Convert “text” to UPPERCASE.\n    \n    Configuration file\n    ==================\n    \n        [selection]\n        source = /home/user/source\n        target = /home/user/target\n        source_as_target = False\n        \n        [rename]\n        backup_folder = /tmp/backup\n        best_format = True\n        dry_run = False\n        \n        ; see --move, --copy or --no-rename\n        ; “move”, “copy” or “no_rename”\n        move_action = move\n        \n        ; see --backup, --delete\n        ; “backup”, “delete” or “do_nothing”\n        cleaning_action = do_nothing\n        \n        [filters]\n        album_complete = False\n        album_min = 7\n        extension = mp3,m4a,flac,wma\n        genre_classical = Classical music,Opera,Symphony\n        field_skip = title\n        \n        [template_settings]\n        classical = False\n        shell_friendly = False\n        no_soundtrack = False\n        \n        [path_templates]\n        default_template = $ar_initial_artist/%shorten{$ar_combined_artist_sort}/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_%shorten{$title}\n        compilation_template = _compilations/$ar_initial_album/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_%shorten{$title}\n        soundtrack_template = _soundtrack/$ar_initial_album/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_${artist}_%shorten{$title}\n        classical_template = $ar_initial_composer/$ar_combined_composer/%shorten{$ar_combined_work_top,48}_[%shorten{$ar_classical_performer,32}]/${ar_combined_disctrack}_%shorten{$ar_classical_title,64}%ifdefnotempty{acoustid_id,_%shorten{$acoustid_id,8}}\n        \n        [cli_output]\n        ; see --color or --no-color\n        color = True\n        \n        debug = False\n        job_info = False\n        mb_track_listing = False\n        one_line = False\n        stats = True\n        verbose = False\n        \n        [metadata_actions]\n        enrich_metadata = False\n        remap_classical = False\n        \n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      --config CONFIG       Load a configuration file in INI format.\n      -v, --version         show program's version number and exit\n    \n    [selection]:\n      The following arguments are intended to select the audio files.\n    \n      source                A folder containing audio files or a single audio\n                            file. If you specify a folder, the program will search\n                            for audio files in all subfolders. If you want to\n                            rename the audio files in the current working\n                            directory, then specify a dot (“.”).\n      -t TARGET, --target TARGET\n                            Target directory\n      -a, --source-as-target\n                            Use specified source folder as target directory\n    \n    [rename]:\n      These options configure the actual renaming process.\n    \n      -p BACKUP_FOLDER, --backup-folder BACKUP_FOLDER\n                            Folder to store the backup files in.\n      -B, --best-format     Use the best format. This option only takes effect if\n                            the target file already exists. `audiorename` now\n                            checks the qualtity of the two audio files (source and\n                            target). The tool first examines the format. For\n                            example a FLAC file wins over a MP3 file. Then\n                            `audiorename` checks the bitrate.\n      -d, --dry-run         Don’t rename or copy the audio files.\n    \n    move action:\n      -C, --copy            Copy files instead of rename / move.\n      -M, --move            Move / rename a file. This is the default action. The\n                            option can be omitted.\n      -n, --no-rename       Don’t rename, move, copy or perform a dry run. Do\n                            nothing.\n    \n    cleaning action:\n      The cleaning actions are only executed if the target file already exists.\n    \n      -A, --backup          Backup the audio files instead of deleting them. The\n                            backup directory can be specified with the --backup-\n                            folder option.\n      -D, --delete          Delete the audio files instead of creating a backup.\n    \n    [filters]:\n      The following options filter the music files that are renamed according to certain rules.\n    \n      -F, --album-complete  Rename only complete albums.\n      -m ALBUM_MIN, --album-min ALBUM_MIN\n                            Rename only albums containing at least X files.\n      -e EXTENSION, --extension EXTENSION\n                            Extensions to rename.\n      --genre-classical GENRE_CLASSICAL\n                            List of genres to be classical.\n      -s FIELD_SKIP, --field-skip FIELD_SKIP\n                            Skip renaming if field is empty.\n    \n    [template_settings]:\n      -k, --classical       Use the default format for classical music. If you use\n                            this option, both parameters (--default and\n                            --compilation) have no effect. Classical music is\n                            sorted by the lastname of the composer.\n      -S, --shell-friendly  Rename audio files “shell friendly”, this means\n                            without whitespaces, parentheses etc.\n      --no-soundtrack       Do not use the path template for soundtracks. Use\n                            instead the default path template.\n    \n    [path_templates]:\n      audiorename provides default path templates. You can specify your own path templates using the following options.\n    \n      -f PATH_TEMPLATE, --default PATH_TEMPLATE, --format PATH_TEMPLATE\n                            The default path template for audio files that are not\n                            compilations or compilations. Use metadata fields and\n                            functions to build the path template.\n      -c PATH_TEMPLATE, --compilation PATH_TEMPLATE\n                            Path template for compilations. Use metadata fields\n                            and functions to build the path template.\n      --soundtrack PATH_TEMPLATE\n                            Path template for a soundtrack audio file. Use\n                            metadata fields and functions to build the path\n                            template.\n      --format-classical PATH_TEMPLATE\n                            Path template for classical audio file. Use metadata\n                            fields and functions to build the path template.\n    \n    [cli_output]:\n      This group contains all options that affect the output on the command line interface (cli).\n    \n      -K, --color           Colorize the standard output of the program with ANSI\n                            colors.\n      --no-color            Don’t colorize the standard output of the program with\n                            ANSI colors.\n      -b, --debug           Print debug informations about the single metadata\n                            fields.\n      -j, --job-info        Display informations about the current job. This\n                            informations are printted out before any actions on\n                            the audio files are executed.\n      -l, --mb-track-listing\n                            Print track listing for Musicbrainz website: Format:\n                            track. title (duration), e. g.: 1. He, Zigeuner (1:31)\n                            2. Hochgetürmte Rimaflut (1:21)\n      -o, --one-line        Display the rename / copy action status on one line\n                            instead of two.\n      -T, --stats           Show statistics at the end of the execution.\n      -V, --verbose         Make the command line output more verbose.\n    \n    [metadata_actions]:\n      -E, --enrich-metadata\n                            Fetch the tag fields “work” and “mb_workid” from\n                            Musicbrainz and save this fields into the audio file.\n                            The audio file must have the tag field “mb_trackid”.\n                            The give audio file is not renamed.\n      -r, --remap-classical\n                            Remap some fields to fit better for classical music:\n                            “composer” becomes “artist”, “work” becomes “album”,\n                            from the “title” the work prefix is removed\n                            (“Symphonie No. 9: I. Allegro” -> “I. Allegro”) and\n                            “track” becomes the movement number. All overwritten\n                            fields are safed in the “comments” field.\n    \n\nConfiguration files\n===================\n\nUse the ``--config`` option to load a configuration file. The command\nline arguments overwrite the corresponding options of the configuration\nfile.\n\n.. code-block:: Shell\n\n    audiorenamer --config /home/user/my-config.ini\n\nIt is also possible to load several configuration files. Values of the\nlatter file overwrite the values of the first files.\n\n.. code-block:: Shell\n\n    audiorenamer --config base.ini --config overload.ini\n\nAlmost all command line arguments have a corresponding option in the\nconfiguration file. ``audiorename`` implements a basic configuration\nlanguage which provides a structure similar to what’s found in Microsoft\nWindows `INI\n<https://docs.python.org/3/library/configparser.html#supported-ini-file-structure>`_\nfiles:\n\n.. code-block:: ini\n\n    [selection]\n    source = /home/user/source\n    target = /home/user/target\n    source_as_target = False\n    \n    [rename]\n    backup_folder = /tmp/backup\n    best_format = True\n    dry_run = False\n    \n    ; see --move, --copy or --no-rename\n    ; “move”, “copy” or “no_rename”\n    move_action = move\n    \n    ; see --backup, --delete\n    ; “backup”, “delete” or “do_nothing”\n    cleaning_action = do_nothing\n    \n    [filters]\n    album_complete = False\n    album_min = 7\n    extension = mp3,m4a,flac,wma\n    genre_classical = Classical music,Opera,Symphony\n    field_skip = title\n    \n    [template_settings]\n    classical = False\n    shell_friendly = False\n    no_soundtrack = False\n    \n    [path_templates]\n    default_template = $ar_initial_artist/%shorten{$ar_combined_artist_sort}/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_%shorten{$title}\n    compilation_template = _compilations/$ar_initial_album/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_%shorten{$title}\n    soundtrack_template = _soundtrack/$ar_initial_album/%shorten{$ar_combined_album}%ifdefnotempty{ar_combined_year,_${ar_combined_year}}/${ar_combined_disctrack}_${artist}_%shorten{$title}\n    classical_template = $ar_initial_composer/$ar_combined_composer/%shorten{$ar_combined_work_top,48}_[%shorten{$ar_classical_performer,32}]/${ar_combined_disctrack}_%shorten{$ar_classical_title,64}%ifdefnotempty{acoustid_id,_%shorten{$acoustid_id,8}}\n    \n    [cli_output]\n    ; see --color or --no-color\n    color = True\n    \n    debug = False\n    job_info = False\n    mb_track_listing = False\n    one_line = False\n    stats = True\n    verbose = False\n    \n    [metadata_actions]\n    enrich_metadata = False\n    remap_classical = False\n    \n\nMetadata fields\n===============\n\n\n.. list-table:: Fields documentation\n   :widths: 20 10 50 20\n   :header-rows: 1\n\n   * - Field name\n     - Category\n     - Description\n     - Examples\n   * - acoustid_fingerprint\n     - music_brainz\n     - Acoustic ID fingerprint\n     - \n   * - acoustid_id\n     - music_brainz\n     - Acoustic ID\n     - ``86e217b7-d3ad-4493-a9f2-cf71256ace07``\n   * - album\n     - common\n     - album\n     - ``Help!``\n   * - albumartist\n     - common\n     - The artist for the entire album, which may be different from the artists for the individual tracks\n     - ``The Beatles``\n   * - albumartist_credit\n     - common\n     - albumartist_credit\n     - \n   * - albumartist_sort\n     - common\n     - albumartist_sort\n     - ``Beatles, The``\n   * - albumartists\n     - common\n     - albumartists\n     - \n   * - albumdisambig\n     - common\n     - The disambiguation album field helps to distinguish between identically named albums. The album “Weezer” for example has the disambiguation comments “Red Album” and “Green Album”.\n     - \n   * - albumstatus\n     - common\n     - The status describes how \"official\" a release is.\n     - ``official``, ``promotional``, ``bootleg``, ``pseudo-release``\n   * - albumtype\n     - common\n     - The MusicBrainz album type; the MusicBrainz wiki has a list of type names\n     - ``album/soundtrack``\n   * - ar_classical_album\n     - common\n     - The field “work” without the movement suffix. For example: “Horn Concerto: I. Allegro” -> “Horn Concerto”\n     - ``Horn Concerto``, ``Die Meistersinger von Nürnberg``\n   * - ar_classical_performer\n     - common\n     - “ar_performer_short” or “albumartist” without the composer prefix: “Beethoven; Karajan, Mutter” -> “Karajan, Mutter”\n     - ``Karajan, Mutter``, ``Karajan, StaDre``\n   * - ar_classical_title\n     - common\n     - The movement title without the parent work prefix. For example “Horn Concerto: I. Allegro” -> “I. Allegro”\n     - ``I. Allegro``, ``Akt III, Szene V. \"Morgendlich leuchtend im rosigen Schein\" (Walther, Volk, Meister, Sachs, Pogner, Eva)``\n   * - ar_classical_track\n     - common\n     - If the title contains Roman numbers, then these are converted to arabic numbers with leading zeros. If no Roman numbers could be found, then the field “ar_combined_disctrack” is used.\n     - ``01``, ``4-08``\n   * - ar_combined_album\n     - common\n     - “album” without ” (Disc X)”.\n     - ``Headlines and Deadlines: The Hits of a-ha``, ``Die Meistersinger von Nürnberg``\n   * - ar_combined_artist\n     - common\n     - The first non-empty value of the following list of fields: “albumartist” -> “artist” -> “albumartist_credit” -> “artist_credit” -> “albumartist_sort” -> “artist_sort”. If no value could be determined, then “Unknown” is assigned. The second artist after “feat.”, “ft.” or “vs.” is removed.\n     - ``a-ha``, ``Richard Wagner; René Kollo, Helen Donath, ...``\n   * - ar_combined_artist_sort\n     - common\n     - The first non-empty value of the following list of fields: “albumartist_sort” -> “artist_sort” -> “albumartist” -> “artist” -> “albumartist_credit” -> “artist_credit”. If no value could be determined, then “Unknown” is assigned. The second artist after “feat.”, “ft.” or “vs.” is removed.\n     - ``a-ha``, ``Wagner, Richard; Kollo, René, Donath, Helen...``\n   * - ar_combined_composer\n     - common\n     - The first not empty field of this field list: “composer_sort”, “composer”, “ar_combined_artist”\n     - ``Beethoven, Ludwig-van``, ``Wagner, Richard``\n   * - ar_combined_disctrack\n     - common\n     - Combination of disc and track in the format: disk-track\n     - ``1-01``, ``3-099``\n   * - ar_combined_soundtrack\n     - common\n     - Boolean flag which indicates if the audio file is a soundtrack\n     - ``True``, ``False``\n   * - ar_combined_work_top\n     - common\n     - The work on the top level of a work hierarchy.\n     - ``Horn Concerto: I. Allegro``, ``Die Meistersinger von Nürnberg``\n   * - ar_combined_year\n     - common\n     - First “original_year” then “year”.\n     - ``1978``\n   * - ar_initial_album\n     - common\n     - First character in lowercase of “ar_combined_album”. Allowed characters: [a-z, 0, _], 0-9 -> 0, ? -> _. For example “Help!” -> “h”.\n     - ``h``\n   * - ar_initial_artist\n     - common\n     - First character in lowercase of “ar_combined_artist_sort”. Allowed characters: [a-z, 0, _], 0-9 -> 0, ? -> _. For example “Brendel, Alfred” -> “b”.\n     - ``b``\n   * - ar_initial_composer\n     - common\n     - First character in lowercase of “ar_combined_composer”. Allowed characters: [a-z, 0, _], 0-9 -> 0, ? -> _. For example “Ludwig van Beethoven” -> “l”.\n     - ``l``\n   * - ar_performer\n     - common\n     - Performer names.\n     - ``Herbert von Karajan, Staatskapelle Dresden``\n   * - ar_performer_raw\n     - common\n     - Raw performer names.\n     - ``[['conductor', 'Herbert von Karajan'], ['orchestra', 'Staatskapelle Dresden']]``\n   * - ar_performer_short\n     - common\n     - Abbreviated performer names.\n     - ``Karajan, StaDre``\n   * - arranger\n     - common\n     - A musician who creates arrangements.\n     - \n   * - art\n     - common\n     - Legacy album art field.\n     - ``b'\\xff\\xd8\\xff\\xe0\\x00'``\n   * - artist\n     - common\n     - artist\n     - ``The Beatles``\n   * - artist_credit\n     - common\n     - The track-specific artist credit name, which may be a variation of the artist’s “canonical” name\n     - \n   * - artist_sort\n     - common\n     - The “sort name” of the track artist.\n     - ``Beatles, The``, ``White, Jack``\n   * - artists\n     - common\n     - artists\n     - ``['a-ha']``\n   * - asin\n     - common\n     - Amazon Standard Identification Number\n     - ``B000002UAL``\n   * - barcode\n     - common\n     - There are many different types of barcode, but the ones usually found on music releases are two: 1. Universal Product Code (UPC), which is the original barcode used in North America. 2. European Article Number (EAN)\n     - ``5028421931838``, ``036000291452``\n   * - bitdepth\n     - audio\n     - only available for some formats\n     - ``16``\n   * - bitrate\n     - audio\n     - in kilobits per second, with units: e.g., “192kbps”\n     - ``436523``, ``256000``\n   * - bitrate_mode\n     - common\n     - bitrate_mode\n     - ``CBR``\n   * - bpm\n     - common\n     - Beats per Minute\n     - \n   * - catalognum\n     - common\n     - This is a number assigned to the release by the label which can often be found on the spine or near the barcode. There may be more than one, especially when multiple labels are involved. This is not the ASIN — there is a relationship for that — nor the label code.\n     - ``CDP 7 46439 2``\n   * - channels\n     - audio\n     - channels\n     - ``1``, ``2``\n   * - comments\n     - common\n     - comments\n     - \n   * - comp\n     - common\n     - Compilation flag\n     - ``True``, ``False``\n   * - composer\n     - common\n     - The name of the composer.\n     - ``Ludwig van Beethoven``\n   * - composer_sort\n     - common\n     - The composer name for sorting.\n     - ``Beethoven, Ludwig van``\n   * - copyright\n     - common\n     - copyright\n     - \n   * - country\n     - common\n     - The country the release was issued in.\n     - \n   * - date\n     - date\n     - The release data of the specific release.\n     - ``1996-01-01``\n   * - day\n     - date\n     - The release day of the specific release.\n     - \n   * - disc\n     - common\n     - disc\n     - ``1``\n   * - disctitle\n     - common\n     - disctitle\n     - \n   * - disctotal\n     - common\n     - disctotal\n     - ``1``\n   * - encoder\n     - common\n     - the name of the person or organisation that encoded the audio file. This field may contain a copyright message, if the audio file also is copyrighted by the encoder.\n     - ``iTunes v7.6.2``\n   * - encoder_info\n     - common\n     - encoder_info\n     - ``LAME 3.92.0+``\n   * - encoder_settings\n     - common\n     - encoder_settings\n     - ``-b 255+``\n   * - format\n     - audio\n     - e.g., “MP3” or “FLAC”\n     - ``MP3``, ``FLAC``\n   * - genre\n     - common\n     - genre\n     - \n   * - genres\n     - common\n     - genres\n     - \n   * - grouping\n     - common\n     - A content group, which is a collection of media items such as a CD boxed set.\n     - \n   * - images\n     - common\n     - images\n     - ``['<mediafile.Image object at 0x7f51fce26b20>']``\n   * - initial_key\n     - common\n     - The Initial key frame contains the musical key in which the sound starts. It is represented as a string with a maximum length of three characters. The ground keys are represented with \"A\",\"B\",\"C\",\"D\",\"E\", \"F\" and \"G\" and halfkeys represented with \"b\" and \"#\". Minor is represented as \"m\".\n     - ``Dbm``\n   * - isrc\n     - common\n     - The International Standard Recording Code, abbreviated to ISRC, is a system of codes that identify audio and music video recordings.\n     - ``CAC118989003``, ``ITO101117740``\n   * - label\n     - common\n     - The label which issued the release. There may be more than one.\n     - ``Brilliant Classics``, ``wea``\n   * - language\n     - common\n     - The language a release’s track list is written in. The possible values are taken from the ISO 639-3 standard.\n     - ``zxx``, ``eng``\n   * - length\n     - audio\n     - The length of a recording in seconds.\n     - ``674.4666666666667``\n   * - lyricist\n     - common\n     - The writer of the text or lyrics in the recording.\n     - \n   * - lyrics\n     - common\n     - The lyrics of the song or a text transcription of other vocal activities.\n     - \n   * - mb_albumartistid\n     - music_brainz\n     - MusicBrainz album artist ID.\n     - ``1f9df192-a621-4f54-8850-2c5373b7eac9``, ``b972f589-fb0e-474e-b64a-803b0364fa75``\n   * - mb_albumartistids\n     - music_brainz\n     - MusicBrainz album artist IDs as a list.\n     - ``['b972f589-fb0e-474e-b64a-803b0364fa75', 'dea28aa9-1086-4ffa-8739-0ccc759de1ce', 'd2ced2f1-6b58-47cf-ae87-5943e2ab6d99']``\n   * - mb_albumid\n     - music_brainz\n     - MusicBrainz album ID.\n     - ``fd6adc77-1489-4a13-9aa0-32951061d92b``\n   * - mb_artistid\n     - music_brainz\n     - MusicBrainz artist ID.\n     - ``1f9df192-a621-4f54-8850-2c5373b7eac9``\n   * - mb_artistids\n     - music_brainz\n     - MusicBrainz artist IDs as a list.\n     - ``['1f9df192-a621-4f54-8850-2c5373b7eac9']``\n   * - mb_releasegroupid\n     - music_brainz\n     - MusicBrainz releasegroup ID.\n     - ``f714fd70-aaca-4863-9d0d-2768a53acaeb``\n   * - mb_releasetrackid\n     - music_brainz\n     - MusicBrainz release track ID.\n     - ``38c8c114-5e3b-484f-8af0-79c47ef9c169``\n   * - mb_trackid\n     - music_brainz\n     - MusicBrainz track ID.\n     - ``c390b132-4a44-4e16-bec3-bffbbcaa19aa``\n   * - mb_workhierarchy_ids\n     - music_brainz\n     - All IDs in the work hierarchy. This field corresponds to the field `work_hierarchy`. The top level work ID appears first. A slash (/) is used as separator.\n     - ``e208c5f5-5d37-3dfc-ac0b-999f207c9e46 / 5adc213f-700a-4435-9e95-831ed720f348 / eafec51f-47c5-3c66-8c36-a524246c85f8``\n   * - mb_workid\n     - music_brainz\n     - MusicBrainz work ID.\n     - ``508ec4b1-9549-38cd-a61e-1f0d120a6118``\n   * - media\n     - common\n     - A prototypical medium is one of the physical, separate things you would get when you buy something in a record store.\n     - ``CD``\n   * - month\n     - date\n     - The release month of the specific release.\n     - ``11``\n   * - original_date\n     - date\n     - The release date of the original version of the album.\n     - ``1991-11-04``\n   * - original_day\n     - date\n     - The release day of the original version of the album.\n     - ``4``\n   * - original_month\n     - date\n     - The release month of the original version of the album.\n     - ``11``\n   * - original_year\n     - date\n     - The release year of the original version of the album.\n     - ``1991``\n   * - r128_album_gain\n     - r128\n     - An optional gain for album normalization. EBU R 128 is a recommendation for loudness normalisation and maximum level of audio signals.\n     - \n   * - r128_track_gain\n     - r128\n     - An optional gain for track normalization. EBU R 128 is a recommendation for loudness normalisation and maximum level of audio signals.\n     - \n   * - releasegroup_types\n     - music_brainz\n     - This field collects all items in the MusicBrainz’ API  related to type: `type`, `primary-type and `secondary-type-list`. Main usage of this field is to determine in a secure manner if the release is a soundtrack.\n     - \n   * - rg_album_gain\n     - rg\n     - ReplayGain Album Gain, see https://en.wikipedia.org/wiki/ReplayGain.\n     - \n   * - rg_album_peak\n     - rg\n     - ReplayGain Album Peak, see https://en.wikipedia.org/wiki/ReplayGain.\n     - \n   * - rg_track_gain\n     - rg\n     - ReplayGain Track Gain, see https://en.wikipedia.org/wiki/ReplayGain.\n     - ``0.0``\n   * - rg_track_peak\n     - rg\n     - ReplayGain Track Peak, see https://en.wikipedia.org/wiki/ReplayGain.\n     - ``0.000244``\n   * - samplerate\n     - audio\n     - The sample rate as an integer number.\n     - ``44100``\n   * - script\n     - common\n     - The script used to write the release’s track list. The possible values are taken from the ISO 15924 standard.\n     - ``Latn``\n   * - title\n     - common\n     - The title of a audio file.\n     - ``32 Variations for Piano in C minor on an Original Theme, WoO 80``\n   * - track\n     - common\n     - The track number.\n     - ``1``\n   * - tracktotal\n     - common\n     - The total track number.\n     - ``12``\n   * - url\n     - common\n     - Uniform Resource Locator.\n     - \n   * - work\n     - common\n     - The Musicbrainzs’ work entity.\n     - ``32 Variations for Piano in C minor on an Original Theme, WoO 80``\n   * - work_hierarchy\n     - music_brainz\n     - The hierarchy of works: The top level work appears first. As separator is this string used: -->.\n     - ``Die Zauberflöte, K. 620 --> Die Zauberflöte, K. 620: Akt I --> Die Zauberflöte, K. 620: Act I, Scene II. No. 2 Aria \"Was hör ...``\n   * - year\n     - date\n     - The release year of the specific release.\n     - ``2001``\n\n\nDevelopment\n===========\n\nTest\n----\n\n::\n\n    pyenv local 3.6.13 3.7.10 3.9.2\n    pip install tox tox-pyenv\n    tox\n\nRun a single test\n\n::\n\n    tox -e quick -- -s test test_job.TestJobWithConfigParser.test_source\n\n\nPublish a new version\n---------------------\n\n::\n\n    git tag 1.1.1\n    git push --tags\n    python setup.py sdist upload\n\n\nPackage documentation\n---------------------\n\nThe package documentation is hosted on\n`readthedocs <http://audiorename.readthedocs.io>`_.\n\nGenerate the package documentation:\n\n::\n\n    python setup.py build_sphinx",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Josef-Friedrich/audiorename",
    "keywords": "audio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "audiorename",
    "package_url": "https://pypi.org/project/audiorename/",
    "platform": null,
    "project_url": "https://pypi.org/project/audiorename/",
    "project_urls": {
      "Homepage": "https://github.com/Josef-Friedrich/audiorename"
    },
    "release_url": "https://pypi.org/project/audiorename/3.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Rename audio files from metadata tags.",
    "version": "3.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14165130,
  "releases": {
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e3e9ca14459456b19021994b53f438bd282132663ddd9e490ac77ba83e4c8d",
          "md5": "42aebbece10620cc1ef52a36fad8d9d8",
          "sha256": "e2a959a3b6561b8e6f7cdfdfcfe9b5587a0af2e413a996e3e2c8945b1784203a"
        },
        "downloads": -1,
        "filename": "audiorename-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "42aebbece10620cc1ef52a36fad8d9d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62915,
        "upload_time": "2018-01-01T17:16:18",
        "upload_time_iso_8601": "2018-01-01T17:16:18.043081Z",
        "url": "https://files.pythonhosted.org/packages/a7/e3/e9ca14459456b19021994b53f438bd282132663ddd9e490ac77ba83e4c8d/audiorename-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebe5fde14e6456be73f1fbebbb80e549b7c4feb25e73108dd560e756ec1293b",
          "md5": "0e59a549935207ec4dd8922715063ade",
          "sha256": "a1a64eb8bf01b13d6e2533d91f908e230927ebc7105c47a9226295bba5982a4c"
        },
        "downloads": -1,
        "filename": "audiorename-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0e59a549935207ec4dd8922715063ade",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50203,
        "upload_time": "2018-01-04T10:20:17",
        "upload_time_iso_8601": "2018-01-04T10:20:17.885322Z",
        "url": "https://files.pythonhosted.org/packages/1e/be/5fde14e6456be73f1fbebbb80e549b7c4feb25e73108dd560e756ec1293b/audiorename-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3617c0be617aa341d1680f1273bfe1c1a63d2780c90656b8fedf1c7a72ccffdb",
          "md5": "9860792c1acfa68ef408a973cd1d1af3",
          "sha256": "336f08eed529734d4cd9e8eeb823a91ab0f07e1d081aefd42dd621e5faf925a2"
        },
        "downloads": -1,
        "filename": "audiorename-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9860792c1acfa68ef408a973cd1d1af3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58843,
        "upload_time": "2018-01-11T10:00:33",
        "upload_time_iso_8601": "2018-01-11T10:00:33.283303Z",
        "url": "https://files.pythonhosted.org/packages/36/17/c0be617aa341d1680f1273bfe1c1a63d2780c90656b8fedf1c7a72ccffdb/audiorename-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd89c8d2be141e269eec86ee2a33928502ff9377ff8b4226a067cd7c16e7f78b",
          "md5": "403490fd56888f0f34c46f71713c17e4",
          "sha256": "41a1ffb8a48299345da11790a249b4008f627ed46230fb44bbc6f3c64c841849"
        },
        "downloads": -1,
        "filename": "audiorename-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "403490fd56888f0f34c46f71713c17e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61966,
        "upload_time": "2018-02-01T16:29:03",
        "upload_time_iso_8601": "2018-02-01T16:29:03.056947Z",
        "url": "https://files.pythonhosted.org/packages/dd/89/c8d2be141e269eec86ee2a33928502ff9377ff8b4226a067cd7c16e7f78b/audiorename-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae44cab0fe11597925255ff3f9091d7a198d50e7c03fe3c954d1d5ae2abd2f24",
          "md5": "82205c94863d30d292d22eb9fea304ee",
          "sha256": "98292f4c1e24fc1795dcf165e8dbc11cd9470be0d266f42ad13c1f760b6b3211"
        },
        "downloads": -1,
        "filename": "audiorename-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "82205c94863d30d292d22eb9fea304ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46561,
        "upload_time": "2019-03-27T07:09:41",
        "upload_time_iso_8601": "2019-03-27T07:09:41.671209Z",
        "url": "https://files.pythonhosted.org/packages/ae/44/cab0fe11597925255ff3f9091d7a198d50e7c03fe3c954d1d5ae2abd2f24/audiorename-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a048b2358436bfe9877cf0ecd84bddab0e1235734c16124640bc2a7a3ad094",
          "md5": "4674a1ce8fd03e81ed30cb193e5be48f",
          "sha256": "5c5e2599e56985468d8ee4522e8afc8d058517a2c378805f24e1a0790b751e70"
        },
        "downloads": -1,
        "filename": "audiorename-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4674a1ce8fd03e81ed30cb193e5be48f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46756,
        "upload_time": "2020-02-11T17:30:02",
        "upload_time_iso_8601": "2020-02-11T17:30:02.472682Z",
        "url": "https://files.pythonhosted.org/packages/e0/a0/48b2358436bfe9877cf0ecd84bddab0e1235734c16124640bc2a7a3ad094/audiorename-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9709ae3732b98cdfbae59b9c9b3dae66ca9652bfda761551150fe60acb7995d6",
          "md5": "260fadcf663dcbda657fa98357cd76e1",
          "sha256": "689fa38c14968df9c2a930a2a12ca2fe4ec06b88a8d39f614ef12467bf61d6e0"
        },
        "downloads": -1,
        "filename": "audiorename-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "260fadcf663dcbda657fa98357cd76e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46744,
        "upload_time": "2021-01-24T16:53:48",
        "upload_time_iso_8601": "2021-01-24T16:53:48.601802Z",
        "url": "https://files.pythonhosted.org/packages/97/09/ae3732b98cdfbae59b9c9b3dae66ca9652bfda761551150fe60acb7995d6/audiorename-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00f71ebb72b6e2088824e283a8716b98a8e78c403f7f8e212cc3b392d0bbf83a",
          "md5": "df6c3601378e23a5c93589c637eceb46",
          "sha256": "44e0aa7088e3885c2a1c7a19cf402dd89632b41402f5aad2ffb930271328bd28"
        },
        "downloads": -1,
        "filename": "audiorename-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df6c3601378e23a5c93589c637eceb46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65363,
        "upload_time": "2022-05-07T05:57:40",
        "upload_time_iso_8601": "2022-05-07T05:57:40.479698Z",
        "url": "https://files.pythonhosted.org/packages/00/f7/1ebb72b6e2088824e283a8716b98a8e78c403f7f8e212cc3b392d0bbf83a/audiorename-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1b43589227bdb1942b5ea825203c29e4e8d48be0917df7ea3dcccc91e965ac",
          "md5": "1c47ef47966eff5373786bc90bf15b57",
          "sha256": "1acaf6773cebf7ecf16a8c53dff8ff5ab82e1f817416c3dcd007893abfc726a4"
        },
        "downloads": -1,
        "filename": "audiorename-3.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "1c47ef47966eff5373786bc90bf15b57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55685,
        "upload_time": "2022-04-12T15:28:36",
        "upload_time_iso_8601": "2022-04-12T15:28:36.593042Z",
        "url": "https://files.pythonhosted.org/packages/7f/1b/43589227bdb1942b5ea825203c29e4e8d48be0917df7ea3dcccc91e965ac/audiorename-3.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99cd42adcf0296411c316b4fba88669bf87525b20786af102e494e6a57b3f981",
          "md5": "4810b5b2515a53266c5215878e1b3628",
          "sha256": "e4563983fb3dd199ac9ef7921c0ec5ffacd69505672acb90ef4c0e5cccd04b6c"
        },
        "downloads": -1,
        "filename": "audiorename-3.0.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "4810b5b2515a53266c5215878e1b3628",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61571,
        "upload_time": "2022-04-13T11:25:47",
        "upload_time_iso_8601": "2022-04-13T11:25:47.018174Z",
        "url": "https://files.pythonhosted.org/packages/99/cd/42adcf0296411c316b4fba88669bf87525b20786af102e494e6a57b3f981/audiorename-3.0.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1baaa32cd4837fa51a0194778532ce1b460723934560504f37dc4d3b0697df45",
          "md5": "5183418488f286dce0fc28cfe7c435b3",
          "sha256": "80d0e3bb7d91d9ea075d392b3a45e649db1cdb9993a013e1fb1fd0f2822e90c7"
        },
        "downloads": -1,
        "filename": "audiorename-3.0.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "5183418488f286dce0fc28cfe7c435b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65377,
        "upload_time": "2022-04-13T18:04:29",
        "upload_time_iso_8601": "2022-04-13T18:04:29.388717Z",
        "url": "https://files.pythonhosted.org/packages/1b/aa/a32cd4837fa51a0194778532ce1b460723934560504f37dc4d3b0697df45/audiorename-3.0.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe49d361d9205eb5f0442a5eb942fcfd09885f4a89c4979a80452455d8302e60",
          "md5": "b45000d24dcf49f6fd80e5fb7bf2b008",
          "sha256": "f98c5532f7fc5bf56c53b18b1534096dc6685312911e20e52eb6437093a68475"
        },
        "downloads": -1,
        "filename": "audiorename-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b45000d24dcf49f6fd80e5fb7bf2b008",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66564,
        "upload_time": "2022-06-11T13:21:54",
        "upload_time_iso_8601": "2022-06-11T13:21:54.059310Z",
        "url": "https://files.pythonhosted.org/packages/fe/49/d361d9205eb5f0442a5eb942fcfd09885f4a89c4979a80452455d8302e60/audiorename-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a54164ebe1f4fd344beaed01859c1bb797f0f187849350aa87d4bab5bad0d84e",
          "md5": "21f909d69371d2a06e56e4a4a015fe38",
          "sha256": "c1a7d856c4e4890d279f04186808967f3b5dc07fd998161b8da08f6a9a922adf"
        },
        "downloads": -1,
        "filename": "audiorename-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21f909d69371d2a06e56e4a4a015fe38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 77186,
        "upload_time": "2022-06-17T08:03:52",
        "upload_time_iso_8601": "2022-06-17T08:03:52.451531Z",
        "url": "https://files.pythonhosted.org/packages/a5/41/64ebe1f4fd344beaed01859c1bb797f0f187849350aa87d4bab5bad0d84e/audiorename-3.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbc1662c64f7efd70ef783cb7bfa40da6e2daa82c8ed9b381f6f62e7987f0b53",
          "md5": "02a92849ebf46195afeb6baa732477e9",
          "sha256": "8c993c7ad464169df1013c949c82ccb8f40155032e883cf420988ed9adcfb139"
        },
        "downloads": -1,
        "filename": "audiorename-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02a92849ebf46195afeb6baa732477e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 77199,
        "upload_time": "2022-06-17T08:52:55",
        "upload_time_iso_8601": "2022-06-17T08:52:55.202516Z",
        "url": "https://files.pythonhosted.org/packages/cb/c1/662c64f7efd70ef783cb7bfa40da6e2daa82c8ed9b381f6f62e7987f0b53/audiorename-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb124e6d9fd52e5fa727c8b058058adbda51c4133744ec76447bda88ccff3eaf",
          "md5": "e094bcb945d9c8f92fa79e1243528540",
          "sha256": "85e0ef458b5378ea98c8e31270eb5c1158058d2041606c66c5c26d68c544d602"
        },
        "downloads": -1,
        "filename": "audiorename-3.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e094bcb945d9c8f92fa79e1243528540",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78369,
        "upload_time": "2022-06-17T17:01:13",
        "upload_time_iso_8601": "2022-06-17T17:01:13.116900Z",
        "url": "https://files.pythonhosted.org/packages/fb/12/4e6d9fd52e5fa727c8b058058adbda51c4133744ec76447bda88ccff3eaf/audiorename-3.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb124e6d9fd52e5fa727c8b058058adbda51c4133744ec76447bda88ccff3eaf",
        "md5": "e094bcb945d9c8f92fa79e1243528540",
        "sha256": "85e0ef458b5378ea98c8e31270eb5c1158058d2041606c66c5c26d68c544d602"
      },
      "downloads": -1,
      "filename": "audiorename-3.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e094bcb945d9c8f92fa79e1243528540",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78369,
      "upload_time": "2022-06-17T17:01:13",
      "upload_time_iso_8601": "2022-06-17T17:01:13.116900Z",
      "url": "https://files.pythonhosted.org/packages/fb/12/4e6d9fd52e5fa727c8b058058adbda51c4133744ec76447bda88ccff3eaf/audiorename-3.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}