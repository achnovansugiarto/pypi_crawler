{
  "info": {
    "author": "BlueMirrors",
    "author_email": "contact.bluemirrors@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# <img src=\"https://raw.githubusercontent.com/BlueMirrors/vidsz/master/static/logo.png\" width=\"30\">Vidsz: Video's Wizard\n\n![CI-Test-Status](https://github.com/BlueMirrors/vidsz/actions/workflows/ci_tests.yml/badge.svg) [![CodeFactor](https://www.codefactor.io/repository/github/bluemirrors/vidsz/badge?s=8752aa2850f09145fc469fd9a07eafb5144d56fc)](https://www.codefactor.io/repository/github/bluemirrors/vidsz) ![status](https://img.shields.io/pypi/status/ansicolortags.svg) [![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/) [![Documentation Status](https://readthedocs.org/projects/vidsz/badge/?version=latest)](https://vidsz.readthedocs.io/en/latest/?badge=latest) [![Downloads](https://static.pepy.tech/personalized-badge/vidsz?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Downloads)](https://pepy.tech/project/vidsz)\n\nCommon Wrapper/Interface around various video reading/writing tools to make video reading stable, consistent and super easy around different systems and OS.\n\n```bash\npip install vidsz\n```\n\nBackends\n\n- OpenCV (in-development)\n\n\nFeatures\n\n- Easy and hassle free (read/write with ```for-loop```, ```with-block```, ```while-loop```)\n- Batch Support. Read and write frames in batches.\n\n\n# Read Video\n\n\n## Read with ```for-loop```\n```python\nfrom vidsz.opencv import Reader\n\n# open reader\nreader = Reader(\"static/countdown.mp4\")\n\n# read frame with for loop\nfor frame in reader:\n    # use ndarry-frame however you like\n    pass\n\n# release\nreader.release()\n```\n\n\n## Read with a ```with-block```\n```python\nwith Reader(\"static/countdown.mp4\") as reader:\n    frame = reader.read()\n```\n\n\n## Read with a ```while-loop```\n```python\n# this follows similar behavior as opencv counterpart\nwhile reader.is_open():\n    # returns ndarry-frame or None if nothing left to read\n    frame = reader.read()\n    if frame is None:\n        break\n```\n\n\n## Read frames in a ```batch```\n```python\nwith Reader(\"dummy.mp4\", batch_size=8, dynamic_batch=True) as reader:\n    batch_frames = reader.read()\n```\n\n\n## Get properties of the reader\n```python\n# print info: width, height, fps etc.\nprint(reader)\n\n# access specific things\nprint(reader.width, reader.height, reader.fps)\n\n# access number-of-frames/seconds/minutes that have been read\nprint(reader.frame_count, reader.seconds, reader.minutes)\n```\n\n\n# Write Video\n\n\n## Write a single frame\n```python\nfrom vidsz.opencv import Reader, Writer\n\nvideo_fname = \"static/countdown.mp4\"\n\n# open reader\nreader = Reader(video_fname)\n\n# start writer with the Reader object\n# by default it'll append _out in the name of the output video\nwriter = Writer(reader)\n\n# start writer with your settings;\n# you can also give any combinations of\n# following settings with Reader object to\n# overwrite default settings\nwriter = Writer(name=\"out.mp4\", width=1920, height=1080, fps=15)\n\n# print writer info\nprint(writer)\n\n# write single frame\nframe = reader.read()\nwriter.write(frame)\n```\n\n\n## Write with ```for-loop```\n```python\n# read frame with for loop\nfor frame in reader:\n    # write the ndarry-frame\n    writer.write(frame)\n```\n\n\n## Write a ```batch```\n```python\n# read batches and write\nwith Reader(\"dummy.mp4\", batch_size=8, dynamic_batch=True) as reader:\n    batch_frames = reader.read()\n    # write list or ndarray of frames\n    writer.write_all(batch_frames)\n\n# close off\nreader.release()\nwriter.release()\n```\n\n\n## Write with a ```with-block```\n```python\n# using \"with\" block, write \"static/countdown_out.mp4\" (clone of input)\nwith Reader(video_fname) as reader:\n    with Writer(reader, name=\"out_with.mp4\") as writer:\n        writer.write_all(reader)\n```\n\n***Logo-Attribution***\n<a href=\"http://www.freepik.com\">Designed by brgfx / Freepik</a>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BlueMirrors/vidsz",
    "keywords": "",
    "license": "Apache Software License v2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vidsz-deployment-test",
    "package_url": "https://pypi.org/project/vidsz-deployment-test/",
    "platform": null,
    "project_url": "https://pypi.org/project/vidsz-deployment-test/",
    "project_urls": {
      "Homepage": "https://github.com/BlueMirrors/vidsz"
    },
    "release_url": "https://pypi.org/project/vidsz-deployment-test/0.1.0/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Common Wrapper/Interface around various video reading/writing tools",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14826513,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "191f7181e5c57db4e348398852e2eacb249f8701a1e0528652ae152d31a11bec",
          "md5": "dae480461b2e81cf74dc2de0338e95d6",
          "sha256": "eb1608e406a632c4e314ea1f5ea1b1d75e1e14d631a825f0b6f7c7c26ccbd99c"
        },
        "downloads": -1,
        "filename": "vidsz_deployment_test-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dae480461b2e81cf74dc2de0338e95d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15738,
        "upload_time": "2022-08-21T10:39:43",
        "upload_time_iso_8601": "2022-08-21T10:39:43.845436Z",
        "url": "https://files.pythonhosted.org/packages/19/1f/7181e5c57db4e348398852e2eacb249f8701a1e0528652ae152d31a11bec/vidsz_deployment_test-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c08d323f1b72452d15a7a029dddf16e70a1307eb2a5aabcdfe02a79b742b0b9",
          "md5": "6c71d1aa39976712419c63dee2bbb9fa",
          "sha256": "2dd065f30f90a7046180468ff3bd28dfb1354a8ed1063e23f0cf7b9b8bd6afcc"
        },
        "downloads": -1,
        "filename": "vidsz-deployment-test-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c71d1aa39976712419c63dee2bbb9fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13079,
        "upload_time": "2022-08-21T10:39:45",
        "upload_time_iso_8601": "2022-08-21T10:39:45.165013Z",
        "url": "https://files.pythonhosted.org/packages/4c/08/d323f1b72452d15a7a029dddf16e70a1307eb2a5aabcdfe02a79b742b0b9/vidsz-deployment-test-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "191f7181e5c57db4e348398852e2eacb249f8701a1e0528652ae152d31a11bec",
        "md5": "dae480461b2e81cf74dc2de0338e95d6",
        "sha256": "eb1608e406a632c4e314ea1f5ea1b1d75e1e14d631a825f0b6f7c7c26ccbd99c"
      },
      "downloads": -1,
      "filename": "vidsz_deployment_test-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dae480461b2e81cf74dc2de0338e95d6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15738,
      "upload_time": "2022-08-21T10:39:43",
      "upload_time_iso_8601": "2022-08-21T10:39:43.845436Z",
      "url": "https://files.pythonhosted.org/packages/19/1f/7181e5c57db4e348398852e2eacb249f8701a1e0528652ae152d31a11bec/vidsz_deployment_test-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c08d323f1b72452d15a7a029dddf16e70a1307eb2a5aabcdfe02a79b742b0b9",
        "md5": "6c71d1aa39976712419c63dee2bbb9fa",
        "sha256": "2dd065f30f90a7046180468ff3bd28dfb1354a8ed1063e23f0cf7b9b8bd6afcc"
      },
      "downloads": -1,
      "filename": "vidsz-deployment-test-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c71d1aa39976712419c63dee2bbb9fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13079,
      "upload_time": "2022-08-21T10:39:45",
      "upload_time_iso_8601": "2022-08-21T10:39:45.165013Z",
      "url": "https://files.pythonhosted.org/packages/4c/08/d323f1b72452d15a7a029dddf16e70a1307eb2a5aabcdfe02a79b742b0b9/vidsz-deployment-test-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}