{
  "info": {
    "author": "Philip Heringlake",
    "author_email": "heringlake-public@mailbox.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "\n\n# Description    {#orgedbdd51}\n\nThe package repository is located at\n<https://github.com/bottom-bracket/manipylate>.\nIt can also be installed from `pypi` with `pip install manipylate`.\n\nIn research we spend some time with plotting data, comparing measurement results\nor testing the influence of parameter changes. Often the most intuitive approach\nis by looking at different plots.\nHowever, while python is great to create reproducible figures, I found no way to\nquickly create plots with which one can interact without changing the code used\nto create the plot as in *mathematica&rsquo;s* `Manipulate`. The closest one can get\nto this is `interact` from `ipywidgets` which is limited to run in *Jupyter*\nnotebooks.\n\n*Manipylate* shall provide the simplified functionalities from its bigger\nsibling *Manipulate*. The tasks I had in mind while writing the tool are:\n\n-   Plotting 1d and 2d cuts of multidimensional data and changing the slice index\n    with sliders\n-   Plot a function for changing parameters which one can modify interactively\n\nI also wanted to keep things as simple as possible and be able to use\n*manipylate* outside `jupyter` notebooks.\n\n\n## Interactivity    {#org1aa4893}\n\n-   Sliders are added automatically\n-   Views can be saved with `Shift + middle mouse click` in the figure if used in\n    pure `matplotlib` mode and by click on the camera button in `jupyter`\n\n\n# Examples    {#org69b706b}\n\nFirst we get the environment ready (leave out the lines starting with `%` for\nnon-ipython shells).\n\n    %matplotlib qt\n    %load_ext autoreload\n    %autoreload 2\n    import matplotlib as mpl\n    from matplotlib import pyplot as plt\n    import numpy as np\n    from manipylate import ifigure\n\n    The autoreload extension is already loaded. To reload it, use:\n      %reload_ext autoreload\n\n\n## 1d cut through a 2d array    {#orgd93ca72}\n\nLet&rsquo;s create some data:\n\n    x = np.linspace(-5, 5, 200)\n    X, Y = np.meshgrid(x, x)\n    data = np.sinc(X * Y**2)\n\nThe figure is created by creating an `ifigure` object. We can then call its\n`add_plot` method to add an axis and a line plot. Here `axpos` defines where the\nplot shall be placed, `x` is the *x*-axis data. `data` the 2d array of which we\nwant to plot a cut along the axis given by `plot_ax`, and `parameters` is a list\nof dimension parameters we want to change using sliders.\n\nCalling `show` creates the figure. It needs to be called after all plots have been\nadded to the figure since here we&rsquo;ll create the sliders and arange the slider\naxes (in case of execution outside jupyter).\n\n    ifig = ifigure(1,1)\n    ifig.add_plot(axpos=[0,0],x=x,data=data,parameters=['x'],plot_ax=1)\n    ifig.show()\n\n![img](docs/ex1.gif)\n\n\n### In jupyter notebook    {#org51186c9}\n\nIn order to use the `ipywidget` widgets, we call `ifigure` with the\n`jupyterwidget` keyword argument.\n\n    ifig = ifigure(1,1,jupyterwidget=True)\n    ifig.add_plot(axpos=[0,0],x=x,data=data,parameters=['x'],plot_ax=1)\n    ifig.show()\n\n![img](docs/ex1a.gif)\n\n\n## Adding a second plot    {#orgb7c979f}\n\n\n### In the same axis    {#orgc24bc08}\n\nAxes are remembered by the `ifigure` object based on their position, so we can\ncall the same `add_plot` command with another dataset. Note that any keyword\narguments are passed to `matplotlib.axes.plot`, so we can use this to change the\nline style.\n\n    ifig = ifigure(1,1)\n    ifig.add_plot(axpos=[0,0],x=x,data=data,parameters=['x'],plot_ax=1)\n    ifig.add_plot(axpos=[0,0],x=x,data=-data,parameters=['x'],plot_ax=1,ls=':')\n    ifig.show()\n\n![img](docs/ex2.png)\n\nNote that here both plots share the same parameter. In the next example we will\nsee that if called with a different name, a new slider will be created.\n\n\n### As twinned axis    {#orgd05a4f2}\n\nSometimes I want to compare two different values (like amplitude and phase) over\nthe same x axis. This can be done by passing the `twinx=True` to the `add_plot`\nmethod. Here I also use the `fix_lim` flag to prevent the phase axis from\nupdating.\nNote that `add_plot` returns a matplotlib axis instance which we can modify as\nusual (here setting the y scale to logarithmic).\n\n    fc = np.linspace(-5, 5, 50) ** 2 + 250\n    x = np.linspace(200, 300, 120)\n    FC, X = np.meshgrid(fc, x, indexing=\"ij\")\n    data = 1 / ((FC ** 2 - X ** 2 - 1j * X * 1) ** 2)\n    \n    ifig = ifigure(1, 1)\n    ax = ifig.add_plot(axpos=[0, 0], x=x, data=np.abs(data), parameters=[\"fc\"], plot_ax=1)\n    ax.set_yscale(\"log\")\n    ifig.add_plot(\n        axpos=[0, 0],\n        x=x,\n        data=np.angle(data, deg=True),\n        parameters=[\"x\"],\n        plot_ax=1,\n        twinx=True,\n        ls=\":\",\n        fix_lim=True,\n    )\n    ifig.show()\n\n![img](docs/ex3.gif)\n\n\n### As new axis    {#org08b1530}\n\nIn order to add more than one subplots we adjust the `ifigure` creation.\nHere we also use another parameter for the second plot.\n\n    fc = np.linspace(-5, 5, 50) ** 2 + 250\n    x = np.linspace(200, 300, 120)\n    FC, X = np.meshgrid(fc, x, indexing=\"ij\")\n    data = 1 / ((FC ** 2 - X ** 2 - 1j * X * 1) ** 2)\n    \n    ifig = ifigure(2, 1)\n    ax = ifig.add_plot(axpos=[0, 0], x=x, data=np.abs(data), parameters=[\"fc\"], plot_ax=1)\n    ax.set_yscale(\"log\")\n    ifig.add_plot(\n        axpos=[1, 0],\n        x=fc,\n        data=np.abs(data),\n        parameters=[\"x\"],\n        plot_ax=0,\n        ls=\":\",\n    )\n    ifig.show()\n\n![img](docs/ex4.png)\n\n\n## 2d cut trough nd array    {#orgb43b3a9}\n\nPlotting a 2d cut is nearly the same as a 1d line. `ifigure` creates an `imshow`\nplot when being passed data which has two more dimensions than the number of\nparameters passed to the function.\nFor the 2d plot we need to specify along which axes we want to cut by changing\nthe `plot_ax` argument to a list of length 2. \n\n    x = np.linspace(-5, 5, 200)\n    y = np.linspace(-3, 3, 100)\n    z = np.linspace(-4, 4, 80)\n    X, Y ,Z = np.meshgrid(x, y, z,indexing='ij')\n    data = np.sinc(X * Y**2 * Z**3)\n    \n    ifig=ifigure(1,1)\n    \n    ifig.add_plot(axpos=[0,0],x=[x,y],data=data,parameters=['x'],plot_ax=[0,1])\n    ifig.show()\n\n![img](docs/ex5.gif)\n\n\n## Plotting a functions value    {#org86172e6}\n\nThe `data` argument can be replaced by a function that returns either a 1d\narray for a line plot or a 2d array for a map plot. \n\n\n### In 1d    {#org01d16db}\n\nThe main difference to calling the plot on an array is that we do not need to\nspecify the `plot_ax` parameter but we need to define a range and step size for\nthe slider, which is done by replacing the string argument in the parameter list\nby a list containing name,minimum, maximum and step size.\n\n    fc = 250\n    x = np.linspace(200, 800, 120)\n    def lor(y):\n        return np.abs(1 / ((4*fc ** 2 - (x+y) ** 2 - 1j * x * 20) ** 2))\n    \n    ifig = ifigure(1, 1)\n    ax = ifig.add_plot(axpos=[0, 0], x=x, data=lor, parameters=[[\"y\",-100,100,1]])\n    ax.set_yscale(\"log\")\n    ifig.show()\n\n![img](docs/ex6a.gif)\n\nFurthermore it is possible to do parametric plots using a function for `x` and\n`data` arguments. Make sure that the variable names are the same in the\ndefinition and `add_plot` call. \n\n    import numpy as np\n    from manipylate import ifigure\n    \n    def x(theta,npts):\n        th = np.linspace(1,theta,npts)\n        return th/50*np.cos(th)\n    def y(theta,npts):\n        th = np.linspace(1,theta,npts)\n        return -th/50*np.sin(th)\n    \n    ifig = ifigure(1,1)\n    ax = ifig.add_plot(axpos=[0,0],x=x,data=y,parameters=[['theta',1,100,1],['npts',10,1000,1]],fix_lim=True)\n    ax.set_ylim(-2,2)\n    ax.set_xlim(-2,2)\n    ax.set_aspect('equal')\n    ifig.show()\n\n![img](docs/ex6b.gif)\n\nIf one of the functions `x,y` takes more arguments than the other just add a\n`**kwargs` to its definition (e.g. `def x(theta,npts,**kwargs)`).\n\n\n### In 2d    {#org898b6eb}\n\n\n## Complex figure layout    {#org3f5c33c}\n\nSince the subplot layout creation is based on `GridSpec`, we can create more\ncomplicated layouts. We use the handy `numpy.s_` to create the exact slices to\nindex the `GridSpec`.\n\n    x = np.linspace(-5, 5, 200)\n    y = np.linspace(-3, 3, 100)\n    z = np.linspace(-4, 4, 80)\n    X, Y ,Z = np.meshgrid(x, y, z,indexing='ij')\n    data = np.sinc(X * Y**2 + Z)\n    \n    ifig = ifigure(6, 4,figsize=(12,8))\n    ax=ifig.add_plot(axpos=np.s_[0,:], x=x, data=data, parameters=[\"y\",'z'],plot_ax=0)\n    ax.set(xlabel='x')\n    ax=ifig.add_plot(axpos=np.s_[1,:2], x=y, data=data, parameters=[\"x\",\"z\"],plot_ax=1)\n    ax.set(xlabel='y')\n    ax=ifig.add_plot(axpos=np.s_[1,2:], x=z, data=data, parameters=[\"x\",\"y\"],plot_ax=2)\n    ax.set(xlabel='z')\n    ax=ifig.add_plot(axpos=np.s_[2::,:], x=[x,z], data=data, parameters=[\"y\"],plot_ax=[0,2])\n    ax.set(xlabel='x',ylabel='y')\n    ifig.show()\n\n![img](docs/ex7.gif)\n\n\n## Naming and saving views    {#org6c3014c}\n\nThe `ifigure` class can be called with the `figurename` parameter which will\ndetermine the base name and the extension for individually saved views. The full\nfilename is constructed from the `figurename` and the current slider names and\nvalues.\nSlider axes are removed during saving.\n\n\n# TODOs    {#orgab035fc}\n\n\n## TODOs    {#org5997233}\n\n-   Comment and document code\n-   \n\n\n## Bugs    {#org662cf6f}\n\n\n## Missing Features    {#org873105d}\n\n-   add `convert_param` method to display physical parameter values (e.g. 0-1Î¼m\n    instead of index values 1-51)\n-   3d plots ?\n-   choice for 2d plots (contour)\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bottom-bracket/manipylate",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "manipylate",
    "package_url": "https://pypi.org/project/manipylate/",
    "platform": "any",
    "project_url": "https://pypi.org/project/manipylate/",
    "project_urls": {
      "Homepage": "https://github.com/bottom-bracket/manipylate",
      "Source": "https://github.com/bottom-bracket/manipylate"
    },
    "release_url": "https://pypi.org/project/manipylate/0.1.4/",
    "requires_dist": [
      "importlib-metadata ; python_version < \"3.8\"",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Manipulate like plotting in python",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15842307,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "184a6ef82309b117c69b4194c79f8745060da27c8ac65eef1f1fb7b56c28679b",
          "md5": "46d3fb495565bba9d4ea0c70e8659051",
          "sha256": "0a9276bdfa3eeaf04a357ba901be180fd808d12b532ec9af2968e84b93889ed4"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46d3fb495565bba9d4ea0c70e8659051",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9359,
        "upload_time": "2022-06-17T09:32:56",
        "upload_time_iso_8601": "2022-06-17T09:32:56.188236Z",
        "url": "https://files.pythonhosted.org/packages/18/4a/6ef82309b117c69b4194c79f8745060da27c8ac65eef1f1fb7b56c28679b/manipylate-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc2ca069149046ad22646bf1aed6b0dfc3bc8c933a0d1209c05e13db8bf7e51e",
          "md5": "c6969c3261b7813b930458d75c670ed9",
          "sha256": "da7267a3722a55863996523bfcf4003487f66dd0681f76e84e8a10c20d615f97"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c6969c3261b7813b930458d75c670ed9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4447111,
        "upload_time": "2022-06-17T09:32:58",
        "upload_time_iso_8601": "2022-06-17T09:32:58.519118Z",
        "url": "https://files.pythonhosted.org/packages/fc/2c/a069149046ad22646bf1aed6b0dfc3bc8c933a0d1209c05e13db8bf7e51e/manipylate-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aff29ce2803c8d62364479f2432a58cd725a61ed055f73b4ebde56002c95ff88",
          "md5": "06c7a8e23cdd3e4af15a89555ba99b6d",
          "sha256": "b0fe0adf131cb1178e919f7c31dd681a00dc7c01d3b0ad3adf0f9677fa4dc372"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06c7a8e23cdd3e4af15a89555ba99b6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9405,
        "upload_time": "2022-06-27T15:53:46",
        "upload_time_iso_8601": "2022-06-27T15:53:46.846653Z",
        "url": "https://files.pythonhosted.org/packages/af/f2/9ce2803c8d62364479f2432a58cd725a61ed055f73b4ebde56002c95ff88/manipylate-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "584d961c890d1c0a6b16a509893a17489787d89ea5fdbedbbd7b2ccdcf1f8c0c",
          "md5": "f4438c045490c1a0583ad58f1e763941",
          "sha256": "15c4b73ce6416b126526b9e80f1865b8fd1953f60797a4667285f7f2924c95c9"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f4438c045490c1a0583ad58f1e763941",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4447034,
        "upload_time": "2022-06-27T15:53:57",
        "upload_time_iso_8601": "2022-06-27T15:53:57.293950Z",
        "url": "https://files.pythonhosted.org/packages/58/4d/961c890d1c0a6b16a509893a17489787d89ea5fdbedbbd7b2ccdcf1f8c0c/manipylate-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92e3b330bf2b075a07e596f0a3fb7c147e8418125159805e3d7939492c71beea",
          "md5": "71af414306b2dee327558f32d58b13fe",
          "sha256": "3e1302065b107a06ad207b1189dae6fa10e3000a18825e39e057a9abc572c700"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71af414306b2dee327558f32d58b13fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15441,
        "upload_time": "2022-07-07T09:43:05",
        "upload_time_iso_8601": "2022-07-07T09:43:05.860898Z",
        "url": "https://files.pythonhosted.org/packages/92/e3/b330bf2b075a07e596f0a3fb7c147e8418125159805e3d7939492c71beea/manipylate-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f1486aca9c3c40761f64ca3658bba5d7a54503f28a7a4f26d9b8c467e7b49f2",
          "md5": "1ada585995e9da1b0da5ebae3393b549",
          "sha256": "d570dedf9f8d6a8398e14d2bc8399a90d54a2b05ae92bdf843d71ab867306f96"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ada585995e9da1b0da5ebae3393b549",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4448777,
        "upload_time": "2022-07-07T09:43:10",
        "upload_time_iso_8601": "2022-07-07T09:43:10.935226Z",
        "url": "https://files.pythonhosted.org/packages/8f/14/86aca9c3c40761f64ca3658bba5d7a54503f28a7a4f26d9b8c467e7b49f2/manipylate-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2352922811ca49f1f326893355146b59801dadff24d68f440678583f6975e52e",
          "md5": "a49bcc5d6543aedac05609b5e5978516",
          "sha256": "a4c37a607591645c0c2a8b5b333287a48932aa25684c328c9cf85882cc88c867"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a49bcc5d6543aedac05609b5e5978516",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16456,
        "upload_time": "2022-11-21T15:28:41",
        "upload_time_iso_8601": "2022-11-21T15:28:41.438506Z",
        "url": "https://files.pythonhosted.org/packages/23/52/922811ca49f1f326893355146b59801dadff24d68f440678583f6975e52e/manipylate-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6822d9788b1d6501576ff06a18be4bbf611c3a5256b7914c1d8a1a45c66bb222",
          "md5": "1d1cd15ceaf85f8a6dbc6b595c347e19",
          "sha256": "dc4c311e2d0609548612b82bff0d9b691ac79456126569b38993b9b6465f533d"
        },
        "downloads": -1,
        "filename": "manipylate-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1d1cd15ceaf85f8a6dbc6b595c347e19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5131279,
        "upload_time": "2022-11-21T15:28:48",
        "upload_time_iso_8601": "2022-11-21T15:28:48.336990Z",
        "url": "https://files.pythonhosted.org/packages/68/22/d9788b1d6501576ff06a18be4bbf611c3a5256b7914c1d8a1a45c66bb222/manipylate-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2352922811ca49f1f326893355146b59801dadff24d68f440678583f6975e52e",
        "md5": "a49bcc5d6543aedac05609b5e5978516",
        "sha256": "a4c37a607591645c0c2a8b5b333287a48932aa25684c328c9cf85882cc88c867"
      },
      "downloads": -1,
      "filename": "manipylate-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a49bcc5d6543aedac05609b5e5978516",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16456,
      "upload_time": "2022-11-21T15:28:41",
      "upload_time_iso_8601": "2022-11-21T15:28:41.438506Z",
      "url": "https://files.pythonhosted.org/packages/23/52/922811ca49f1f326893355146b59801dadff24d68f440678583f6975e52e/manipylate-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6822d9788b1d6501576ff06a18be4bbf611c3a5256b7914c1d8a1a45c66bb222",
        "md5": "1d1cd15ceaf85f8a6dbc6b595c347e19",
        "sha256": "dc4c311e2d0609548612b82bff0d9b691ac79456126569b38993b9b6465f533d"
      },
      "downloads": -1,
      "filename": "manipylate-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1d1cd15ceaf85f8a6dbc6b595c347e19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5131279,
      "upload_time": "2022-11-21T15:28:48",
      "upload_time_iso_8601": "2022-11-21T15:28:48.336990Z",
      "url": "https://files.pythonhosted.org/packages/68/22/d9788b1d6501576ff06a18be4bbf611c3a5256b7914c1d8a1a45c66bb222/manipylate-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}