{
  "info": {
    "author": "Rafsan Mazumder",
    "author_email": "rafsan.mazumder@bytedance.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# ByteHouse Python Driver\n## Introduction \nByteHouse provides a Python driver that supports Python Database API Specification v2.0. The driver can be used with \nmost client tools/applications/BI tools which accept python driver following python DB API 2.0. The driver uses \nTCP/Native protocol to connect to ByteHouse.\n\n## Requirements\nPython v3.6 or higher\n\n## Installation from PyPI\nLatest release version can be installed from here:\n```commandline\npip install bytehouse-driver\n```\n## Installation from github\nCurrent development version can be installed from here:\n```commandline\npip install git+https://github.com/bytehouse-cloud/driver-py@master#egg=bytehouse-driver\n```\n## Creating ByteHouse Account\nYou need to create ByteHouse account in order to use Python Driver. You can simply create a free account with the \nprocess mentioned in our official website documentation: https://docs.bytehouse.cloud/en/docs/quick-start<br/>\n\nYou can also create ByteHouse account through Volcano Engine by ByteDance: \nhttps://www.volcengine.com/product/bytehouse-cloud\n\n## ByteHouse Regions\nCurrently, the driver supports the following region names across different cloud providers. Alternatively, if you know\nthe host address of ByteHouse server, you can directly use host address & omit region name. \n<table>\n    <tr>\n        <td>Region Name</td>\n        <td>Target Server</td>\n    </tr>\n    <tr>\n        <td>AP-SOUTHEAST-1</td>\n        <td>gateway.aws-ap-southeast-1.bytehouse.cloud:19000</td>\n    </tr>\n    <tr>\n        <td>VOLCANO-CN-NORTH-1</td>\n        <td>bytehouse-cn-beijing.volces.com:19000</td>\n    </tr>\n</table>\n\n## URI format for Connection & Authentication\n### Region & Password Format\n*Required parameters:* `region` `account` `user` `password`\n```python\n'bytehouse:///?region={}&account={}&user={}&password={}'.format(REGION, ACCOUNT, USER, PASSWORD)\n```\n### Host Address & Password Format\n*Required parameters:* `host` `port` `account` `user` `password`\n```python\n'bytehouse://{}:{}/?account={}&user={}&password={}'.format(HOST, PORT, ACCOUNT, USER, PASSWORD)\n```\n> For API Key authentication, user is always 'bytehouse'\n### Region & API Key Format\n*Required parameters:* `region` `password`\n```python\n'bytehouse:///?region={}&user=bytehouse&password={}'.format(REGION, API_KEY)\n```\n### Host Address & API Key Format\n*Required parameters:* `host` `port` `password`\n```python\n'bytehouse://{}:{}/?user=bytehouse&password={}'.format(HOST, PORT, API_KEY)\n```\n## Virtual warehouse & Role Management\nConnection initialiaztion with ByteHouse always assumes default virtual warehouse & active role, therefore these values\ncannot be empty. So before using the driver, users need to set/ensure these values through \nhttps://console.bytehouse.cloud/account/details\n![Default Settings](./default_settings.png)\n## Constructing Client Object\n### Passing parameters\n```python\nfrom bytehouse_driver import Client\n\nclient = Client(\n    region=REGION,\n    account=ACCOUNT,\n    user=USER,\n    password=PASSWORD\n)\n```\n### From URI\n```python\nfrom bytehouse_driver import Client\n\nclient = Client.from_url('bytehouse:///?region={}&account={}&user={}&password{}'.format(\n     REGION, ACCOUNT, USER, PASSWORD)\n)\n```\n## Performing SQL queries\n```python\nfrom bytehouse_driver import Client\n\nclient = Client(\n    region=REGION,\n    account=ACCOUNT,\n    user=USER,\n    password=PASSWORD\n)\n# DDL Query\nclient.execute(\"CREATE DATABASE demo_db\")\nclient.execute(\"CREATE TABLE demo_db.demo_tb (id INT) ENGINE=CnchMergeTree() ORDER BY tuple()\")\n\n# DML Query\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", [[1], [2], [3]])\n\n# DQL Query\nresult_set = client.execute(\"SELECT * FROM demo_db.demo_tb\")\nfor result in result_set:\n    print(result)\n\nclient.execute(\"DROP DATABASE demo_db\")\n```\n## Supported Datatypes\n| **ByteHouse type**                                                       | **Python type for INSERT**               | **Python type for SELECT**  |\n|----------------------------------------------------------------------|--------------------------------------|-------------------------|\n| Integar family (UInt8/UInt16/UInt32/UInt64 / Int8/Int16/Int32/Int64) | `int` `long`                             | `int`                     |\n| Float family (Float32/Float64)                                       | `float` `int` `long`                       | `float`                   |\n| String                                                               | `str` `bytes`                            | `str` `bytes`               |\n| FixedString                                                          | `str` `bytes`                            | `str` `bytes`               |\n| Nullable<T>                                                          | `None` `T`                               | `None` `T`                  |\n| Date                                                                 | `date` `datetime`                        | `date`                    |\n| DateTime                                                             | `datetime` `int` `long`                    | `datetime`                |\n| Array                                                                | `list` `tuple`                           | `list`                    |\n| Enum family                                                          | `Enum` `int` `long` `str`                    | `str`                     |\n| Decimal                                                              | `Decimal` `float` `int` `long`               | `Decimal`                 |\n| IP family                                                            | `IPv4Address` `IPv6Address` `int` `long` `str` | `IPv4Address` `IPv6Address` |\n| Map                                                                  | `dict`                                 | `dict`                    |\n| LowCardinality<T>                                                    | `T`                                    | `T`                       |\n| UUID                                                                 | `UUID` `str`                             | `UUID`                    |\n### Settings types_check=True\nDefault value for 'types_check' is false for performance. If set to true, then explicit type checking and transformation\nwould happen before passing the data onto the server. Recommended to set it to true, for float/decimal or any other \ntypes, where raw data needs to be transformed into appropriate type. \n### Integer family\n`Int8` `Int16` `Int32` `Int64` `UInt8` `UInt16` `UInt32` `UInt64`\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Int8, b Int16, c Int32, d Int64, e UInt8, f UInt16, g UInt32, h UInt64) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [\n    (-10, -300, -123581321, -123581321345589144, 10, 300, 123581321, 123581321345589144)\n]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Float family\n`Float32` `Float64`\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Float32, b Float64) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [\n    (3.4028235e38, 3.4028235e38),\n    (3.4028235e39, 3.4028235e39),\n    (-3.4028235e39, 3.4028235e39),\n    (1, 2)\n]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data, types_check=True)\n```\n### String\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a String) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [('axdfgrt', )]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### FixedString\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a FixedString(4)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [('a', ), ('bb', ), ('ccc', ), ('dddd', ), ('—è', )]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Nullable\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Nullable(Int32)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(3, ), (None, ), (2, )]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Date\n```python\nfrom datetime import date, datetime\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Date) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(date(1970, 1, 1), ), (datetime(2015, 6, 6, 12, 30, 54), )]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### DateTime\n```python\nfrom datetime import datetime\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a DateTime) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(datetime(2015, 6, 6, 12, 30, 54), ), (1530211034,)]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Array\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Array(Int32)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [([], ), ([100, 500], )]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Enum family\n`Enum8` `Enum16`\n```python\nfrom enum import IntEnum\n\nclass A(IntEnum):\n    hello = -1\n    world = 2\n\nclass B(IntEnum):\n    foo = -300\n    bar = 300\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Enum8('hello' = -1, 'world' = 2), b Enum16('foo' = -300, 'bar' = 300)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(A.hello, B.bar), (A.world, B.foo), (-1, 300), (2, -300)]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### Decimal\n```python\nfrom decimal import Decimal\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Decimal(9, 5)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(Decimal('300.42'),), (300.42,), (-300,)]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data, types_check=True)\n```\n### IP family\n`IPv4` `IPv6`\n```python\nfrom ipaddress import IPv6Address, IPv4Address\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a IPv4, b IPv6) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [\n    (IPv4Address(\"10.0.0.1\"), IPv6Address('79f4:e698:45de:a59b:2765:28e3:8d3a:35ae'),),\n]\nclient.execute(\"INSERT INTO demo_db.demo_tb (a, b) VALUES\", data)\n```\n### Map\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a Map(String, UInt64)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [\n    ({},),\n    ({'key1': 1},),\n    ({'key1': 2, 'key2': 20},),\n    ({'key1': 3, 'key2': 30, 'key3': 50},)\n]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### LowCardinality\n```python\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a LowCardinality(UInt8)) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [(x,) for x in range(255)]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n### UUID\n```python\nfrom uuid import UUID\n\nclient.execute(\"CREATE TABLE demo_db.demo_tb (a UUID) ENGINE=CnchMergeTree() ORDER BY tuple()\")\ndata = [\n    (UUID('c0fcbba9-0752-44ed-a5d6-4dfb4342b89d'),),\n    ('2efcead4-ff55-4db5-bdb4-6b36a308d8e0',)\n]\nclient.execute(\"INSERT INTO demo_db.demo_tb VALUES\", data)\n```\n## Cursor Support: DB API 2.0\nCursors are supported following DB API 2.0 specifications. Cursors are created by the connection.cursor() method. They \nare bound to the connection for the entire lifetime and all the commands are executed in the context of the database \nsession wrapped by the connection.\n```python\nfrom bytehouse_driver import connect\n\nkwargs = {}\nkwargs.setdefault('region', REGION)\nkwargs.setdefault('account', ACCOUNT)\nkwargs.setdefault('user', USER)\nkwargs.setdefault('password', PASSWORD)\n\nconnection = connect(**kwargs)\ncursor = connection.cursor()\n\ncursor.execute(\"DROP TABLE IF EXISTS cursor_tb\")\ncursor.execute(\"CREATE TABLE cursor_tb (id INT) ENGINE=CnchMergeTree() ORDER BY tuple()\")\n\ncursor.executemany(\"INSERT INTO cursor_tb (id) VALUES\", [{'id': 100}])\n\nresult_set = cursor.execute(\"SELECT * FROM cursor_tb\")\nfor result in result_set:\n    print(result)\n\nconnection.close()\n```\n## User defined query-id\nUser can manually supply query-id for each query execution. Users are encouraged to maintain uniqueness or relevancy \nof the query-id string. If not set, then server will assign a randomly generated UUID as the query-id. \n```python\nclient = Client(\n    region=self.region,\n    account=self.account,\n    user=self.user,\n    password=self.password\n)\nclient.execute(\"SELECT 1\", query_id=\"ba2e2cea-2a11-4926-a0b8-e694ded0cf65\")\n```\n## Local Development\nChange `setup.cfg` file to include your connection credentials. For running tests locally, follow these steps:\n```python\npython testsrequire.py && python setup.py develop\npy.test -v\n```\n## Issue Reporting\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. \nAlternatively, you can directly create an issue with our support platform here: https://bytehouse.cloud/support\n## Original Author\nByteHouse wants to thank original author @Konstantin Lebedev & ClickHouse for original contribution to this driver. \n## License\nThis project is distributed under the terms of the MIT license: http://www.opensource.org/licenses/mit-license.php\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bytehouse-cloud/driver-py",
    "keywords": "ByteHouse db database cloud analytics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bytehouse-driver",
    "package_url": "https://pypi.org/project/bytehouse-driver/",
    "platform": null,
    "project_url": "https://pypi.org/project/bytehouse-driver/",
    "project_urls": {
      "Changes": "https://github.com/bytehouse-cloud/driver-py/blob/main/CHANGELOG.md",
      "Documentation": "https://github.com/bytehouse-cloud/driver-py",
      "Homepage": "https://github.com/bytehouse-cloud/driver-py"
    },
    "release_url": "https://pypi.org/project/bytehouse-driver/1.0.2/",
    "requires_dist": [
      "pytz",
      "tzlocal",
      "clickhouse-cityhash (>=1.0.2.1) ; extra == 'lz4'",
      "lz4 ; (implementation_name != \"pypy\") and extra == 'lz4'",
      "lz4 (<=3.0.1) ; (implementation_name == \"pypy\") and extra == 'lz4'",
      "numpy (>=1.12.0) ; extra == 'numpy'",
      "pandas (>=0.24.0) ; extra == 'numpy'",
      "zstd ; extra == 'zstd'",
      "clickhouse-cityhash (>=1.0.2.1) ; extra == 'zstd'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Python driver with native interface for ByteHouse",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17186853,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f682d430859bd12ce09f0cc526c429bbf7d4fcd1f2d14ae85c29714c98ab5ec2",
          "md5": "83e0c730b2a6c21b5f0aa9d793069312",
          "sha256": "910d2431a23ff3e0b75e0aaa603d2338f4a7f064fa1ae606c41e3ca40a4d0c4b"
        },
        "downloads": -1,
        "filename": "bytehouse_driver-1.0.0-cp38-cp38-macosx_12_0_x86_64.whl",
        "has_sig": false,
        "md5_digest": "83e0c730b2a6c21b5f0aa9d793069312",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6, <4",
        "size": 235950,
        "upload_time": "2023-02-07T08:57:59",
        "upload_time_iso_8601": "2023-02-07T08:57:59.517236Z",
        "url": "https://files.pythonhosted.org/packages/f6/82/d430859bd12ce09f0cc526c429bbf7d4fcd1f2d14ae85c29714c98ab5ec2/bytehouse_driver-1.0.0-cp38-cp38-macosx_12_0_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52dcb7dd8851f9af6f3f9d821ac10329ff83eb44c6c7ed77d849648c6e37bb75",
          "md5": "c62a2dc34a5a5139de5198f15734b84a",
          "sha256": "32e4c4d71dc087561d625a57f097b60c9a4374c696da9abb9cb2781d061feeaf"
        },
        "downloads": -1,
        "filename": "bytehouse-driver-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c62a2dc34a5a5139de5198f15734b84a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 254214,
        "upload_time": "2023-02-07T08:58:01",
        "upload_time_iso_8601": "2023-02-07T08:58:01.747928Z",
        "url": "https://files.pythonhosted.org/packages/52/dc/b7dd8851f9af6f3f9d821ac10329ff83eb44c6c7ed77d849648c6e37bb75/bytehouse-driver-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c66568ecc2f3e87da81f292fc1f558da783903843b49f8449eecf511a9b2df7",
          "md5": "51b9e04ac3deb8d58bf3d87923f09d69",
          "sha256": "2129a2b8e8ac247363274a9873568b78634ecaa782079e8323300e602c3fe1bb"
        },
        "downloads": -1,
        "filename": "bytehouse_driver-1.0.1-cp38-cp38-macosx_13_0_x86_64.whl",
        "has_sig": false,
        "md5_digest": "51b9e04ac3deb8d58bf3d87923f09d69",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6, <4",
        "size": 236044,
        "upload_time": "2023-03-07T06:02:24",
        "upload_time_iso_8601": "2023-03-07T06:02:24.794022Z",
        "url": "https://files.pythonhosted.org/packages/1c/66/568ecc2f3e87da81f292fc1f558da783903843b49f8449eecf511a9b2df7/bytehouse_driver-1.0.1-cp38-cp38-macosx_13_0_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "148ccca9fb734f8f718aa9e31a69cdb4483f1bc770b4a110a0168ef81046a62f",
          "md5": "138bb7bd889993a44cb9c32d4640a7cb",
          "sha256": "3e464d0ed1a84401a9174ea971175250b2ffd50e0b7a7229ee9ea640f8dea3e4"
        },
        "downloads": -1,
        "filename": "bytehouse_driver-1.0.1-cp39-cp39-macosx_10_9_universal2.whl",
        "has_sig": false,
        "md5_digest": "138bb7bd889993a44cb9c32d4640a7cb",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6, <4",
        "size": 335870,
        "upload_time": "2023-03-07T06:02:27",
        "upload_time_iso_8601": "2023-03-07T06:02:27.420869Z",
        "url": "https://files.pythonhosted.org/packages/14/8c/cca9fb734f8f718aa9e31a69cdb4483f1bc770b4a110a0168ef81046a62f/bytehouse_driver-1.0.1-cp39-cp39-macosx_10_9_universal2.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c97617296ae3a9e549d8c0f6b942c0ae4387cf24218d40ca4b5a6e93ce98319f",
          "md5": "742500f995b91efe4b613ffefe3386a1",
          "sha256": "7906a864e71c2593f275770efff2505f67083bb6d4688b5923c40e9696f23200"
        },
        "downloads": -1,
        "filename": "bytehouse-driver-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "742500f995b91efe4b613ffefe3386a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 254114,
        "upload_time": "2023-03-07T06:02:30",
        "upload_time_iso_8601": "2023-03-07T06:02:30.055887Z",
        "url": "https://files.pythonhosted.org/packages/c9/76/17296ae3a9e549d8c0f6b942c0ae4387cf24218d40ca4b5a6e93ce98319f/bytehouse-driver-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "949a58a865e72347711e5d7f5052f20834f0d1cbd8a5636d9b8754015969a491",
          "md5": "e17ecae610bd73ef7d92fbb545696969",
          "sha256": "f92439dea330e779f4d04d071b59c7d2c91f1413c664f7b09690e05faac7ffab"
        },
        "downloads": -1,
        "filename": "bytehouse_driver-1.0.2-cp38-cp38-macosx_13_0_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e17ecae610bd73ef7d92fbb545696969",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6, <4",
        "size": 236074,
        "upload_time": "2023-03-07T06:42:21",
        "upload_time_iso_8601": "2023-03-07T06:42:21.084531Z",
        "url": "https://files.pythonhosted.org/packages/94/9a/58a865e72347711e5d7f5052f20834f0d1cbd8a5636d9b8754015969a491/bytehouse_driver-1.0.2-cp38-cp38-macosx_13_0_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4dabf4cfdb27520089b00d778ec810c098dda1727426f2ef2c93b3ffbb4a03e",
          "md5": "b499806b4084d91743ec4c06fc5b0f3d",
          "sha256": "834bb4b2b513e1d827025e48fc008e29ce13a0ac1a28356df9e16ef975fc733a"
        },
        "downloads": -1,
        "filename": "bytehouse-driver-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b499806b4084d91743ec4c06fc5b0f3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 254221,
        "upload_time": "2023-03-07T06:42:24",
        "upload_time_iso_8601": "2023-03-07T06:42:24.486078Z",
        "url": "https://files.pythonhosted.org/packages/c4/da/bf4cfdb27520089b00d778ec810c098dda1727426f2ef2c93b3ffbb4a03e/bytehouse-driver-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "949a58a865e72347711e5d7f5052f20834f0d1cbd8a5636d9b8754015969a491",
        "md5": "e17ecae610bd73ef7d92fbb545696969",
        "sha256": "f92439dea330e779f4d04d071b59c7d2c91f1413c664f7b09690e05faac7ffab"
      },
      "downloads": -1,
      "filename": "bytehouse_driver-1.0.2-cp38-cp38-macosx_13_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e17ecae610bd73ef7d92fbb545696969",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6, <4",
      "size": 236074,
      "upload_time": "2023-03-07T06:42:21",
      "upload_time_iso_8601": "2023-03-07T06:42:21.084531Z",
      "url": "https://files.pythonhosted.org/packages/94/9a/58a865e72347711e5d7f5052f20834f0d1cbd8a5636d9b8754015969a491/bytehouse_driver-1.0.2-cp38-cp38-macosx_13_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4dabf4cfdb27520089b00d778ec810c098dda1727426f2ef2c93b3ffbb4a03e",
        "md5": "b499806b4084d91743ec4c06fc5b0f3d",
        "sha256": "834bb4b2b513e1d827025e48fc008e29ce13a0ac1a28356df9e16ef975fc733a"
      },
      "downloads": -1,
      "filename": "bytehouse-driver-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b499806b4084d91743ec4c06fc5b0f3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 254221,
      "upload_time": "2023-03-07T06:42:24",
      "upload_time_iso_8601": "2023-03-07T06:42:24.486078Z",
      "url": "https://files.pythonhosted.org/packages/c4/da/bf4cfdb27520089b00d778ec810c098dda1727426f2ef2c93b3ffbb4a03e/bytehouse-driver-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}