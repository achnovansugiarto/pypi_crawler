{
  "info": {
    "author": null,
    "author_email": "Aaron <aaron@framelunch.jp>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "yaclipy\n=======\n\nYet another python command-line interface that has a consistent way to call any kind of function/method from the command line.\n\nFeatures\n--------\n\n* Sub commands are known deterministically.  They are parsed before any commands are executed.\n* Easy-to-read documentation automatically shown from the docstring with `=h` or `--help`.\n* The function's annotations and default values are used to coerce the command line arguments to the correct type.\n* A consistent way to call all kinds of function signatures (using inspect.signature to the fullest extent).\n* Ability to accept multiple list-typed parameters.\n* \\*args and \\*\\*kwargs have useful abilities.\n\n\n\nGetting Started\n===============\n\nWhile not the recommended way of using yaclipy, this is the simplest yet meaningful example.\n\nGiven the following file named `cli.py`:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    import sys\n    from print_ext import print, PrettyException\n    import yaclipy as CLI\n\n    def main(say, times__t=1) -> str:\n        ''' Say something multiple times\n\n        Parameters:\n            <message>, --say <message>\n                What you want to say\n            <int>, --times <int>, -t <int>\n                How many times you want to say it.\n        '''\n        return ' '.join([say] * times__t)\n\n    if __name__ == '__main__':\n        try:\n            CLI.Command(main)(sys.argv[1:]).run()\n        except PrettyException as e:\n            print.pretty(e)\n\n\nGiven that the file is executable ``chmod +x cli.py``, you can use it as follows.\n\n.. code-block:: console\n\n   $ ./cli.py -h\n   <doc string>\n\nUsing ``-h`` or ``--help`` will show the docstring documentation, along with a list of possible sub-commands.\nSub-commands are determined explicitly with the ``sub_cmds`` decorator, or by the return type annotation.\n\n.. code-block:: console\n\n    $ ./cli.py -t 3 --say Ho\n    Ho Ho Ho\n\nYou may use a single dash for single character names, otherwise use double-dashes.\nNames defined with double underscores separate the aliases that can be used on the command line (``--times`` or ``-t``).\n\nThe ``say`` parameter has no type information so it will be a string.\nThe ``times__t`` parameter's default value is an int, so you can only pass integers.  ``-t hi`` will fail with an error.\n\n.. code-block:: console\n\n   $ ./cli.py \"Hello World\" 2\n   Hello World Hello World\n\nSince the parameters are defined as keyword *or* positional, you can pass them positionally.\n\n.. code-block:: console\n\n   $ ./cli.py go --times 3 upper\n   GO GO GO\n\nWhen positional and keyword parameters are used simultaneously, positional arguments always come first.\n``upper`` is the start of a new command.  In this case it is executed on the return value ``str`` of the previous command.\n\nIf the value returned from a command is not ``None`` then the value is pretty printed.\n\n.. code-block:: console\n\n   $ ./cli.py \\\\--times\n   --times\n\nKeyword arguments are identified with dashes.\nIf you want to use a value that starts with a dash then it must be escaped with a backslash.  \nThe shell eats one backslash if you don't surround the argument in quotes.\n\nOnly the leading backslash is removed.  If you specify only a backslash ``./cli.py \\\\`` then an empty string will be consumed as the first argument.\n\nNegative numbers such as ``-.3``, ``-0.5e33`` don't need to be escaped.\n\n----\n\nThe following examples introduce more complicated examples.\nThey just show the function declaration for brevity.\n\n\n\nPositional vs. Keyword\n----------------------\n\n.. code-block:: python\n\n    def foo(a=3, /, banana__b='hi', *, carrot__c:int=None):\n        ''' Foo\n\n        Parameters:\n            <int>\n                Positional only\n            <str>, --banana <str>, -b <str>\n                Positional or keyword\n            --carrot <int>, -c <int>\n                Keyword only\n        '''\n        # foo 4 bye --carrot 42\n        # foo 4 -c 42 -b bye\n        a == 4\n        banana__b == 'bye'\n        carrot__c == 42\n\nThe distinction between position-only, positional or keyword and keyword-only parameters is important.\nParameters before the ``/`` cannot be specified by name.  Parameters after the ``*`` `must` be given by name.\nOther parameters may be given either way.\n\nNotice how the docstring documentation indicates the positionally.\n\n\n\nFlags\n-----\n\n.. code-block:: python\n\n    def foo(*, verbose__v=False, times__t:int):\n        ''' Flags example\n\n        Parameters:\n            --verbose, -v\n                More verbose\n            --times <int>, -t <int>\n                How many times\n        '''\n        # foo -vt 3 --verbose\n        # foo -vv --times 3\n        verbose__v == 2\n        times__t == 3\n\nFlags are specified by a default value of ``False``.\nYou can't use ``bool`` as a type in any other way such as ``x:bool`` or ``y:[bool]``.\n\nFlags can be specified multiple times in which case its value won't be ``True``, but an integer specifying how many times it was given.\nSince ``int(True) == 1`` you can use ``int(verbose__v)`` to get the number of times it was specified.\n\nSince flag arguments don't take value, single letter flags can be combined together in the usual way.\nThe last letter of the group may be a non-flag type that consumes the succeeding value.\n\n\n\nSpecial Names\n-------------\n\n.. code-block:: python\n\n    def foo(*, if_=1, happy_days=2, lots__of__aliases__t__q=3, _hidden=4):\n        # foo --if 10 --happy-days 20 --happy_days 200 --lots 30 --of 40 --aliases 50 -t 60 -q 70\n        if_ == 10\n        happy_days == 200\n        lots__of__aliases__t__q == 70\n        _hidden= == 4\n\nThis shows the various naming schemes that exist.\n\n* A trailing underscore is ignored and used to alias keywords.\n* Single underscores may be given as dashes instead\n* Double dashes separate aliases.  There can be multiple.\n* Leading underscores indicate private variables that cannot be set from the command line.\n  They must have a default value or be set from the previous call in the call chain (described below).\n\n\n\nSub-Commands\n------------\n\n.. code-block:: python\n\n    import yaclipy as CLI\n\n    def foo(*, name, _value): pass\n\n    def bar(*, name, _value): pass\n\n    @CLI.sub_cmds(foo, baz=bar)\n    def root(*, verbose__v=False):\n        return dict(name='jim', _value = 'hi' * int(verbose__v))\n\n    # root -v foo -h\n    # root -v baz --name bob\n\nCommands can be chained together.\nThe sub-commands available are known deterministically, either explicitly with the ``sub_cmds`` decorator, or implicitly from the return type annotation.\n\nThe complete chain of commands is fully parsed before any commands are actually executed.\nBy making the sub-command lookup deterministic we can provide better help and documentation support.\nAlso, any command-line syntax errors in sub-commands are caught before anything is executed.\n\nThe return value of the previous command is passed to the next command.\nIf the return value is a dictionary then its values will be initially applied to the function's keyword parameters.\n\nThe values override the parameter's default value, but a matching command line argument has highest priority.\nIn the second example above, the name argument ``bob`` overwrites ``jim`` that was provided in the return value.\n\nIf the function defines a special ``_input`` parameter then the return value of the parent will be applied to it directly.\n\n\n\nGenerators\n----------\n\n.. code-block:: python\n    \n    def show(*, _input):\n        x, xxx = _input\n        print(f'3^{x} == {xxx}')\n\n    @CLI.sub_cmds(show)\n    def foo(*, times__t=3):\n        for i in range(times__t):\n            yield i, pow(3,i)\n\n    # foo -t 4 show\n    \nIf a generator is used then it can yield a value to the sub-command and then continue with cleanup-code after the sub-command completes.\n\nBy returning or yielding a dictionary you can set keyword parameters of the sub-command.\nIf the function defines a special ``_input`` parameter then the return value of the parent will be applied to it directly.\n\n\n\nLists\n-----\n\n.. code-block:: python\n\n    def foo(a:int, b:[float], c=[]):\n        # foo 3 1.1 -.1 1e3 - 66 \\\\-apples\n        # foo -c 66 -c \\\\-apples -b#3 1.1 -0.1 1e3 -a 3\n        # 3 1.1 - -c# 66 \\\\-apples - -b#2 -.1 1e3\n        a == 3\n        b == [1.1, -0.1, 1e3]\n        c == ['66', '-apples']\n\nIn this example type annotations are used for the first two parameters.\nSince the inside of the third list is unknown, `str` is assumed.\n\nThe two examples above are equivalent ways of setting the parameters.\n\nThere are three ways to set lists.\n\n1. For positional parameter lists, values are taken until a value that starts with a dash is encountered.\n   A single dash ``-`` may be used to to indicate that we are done with this positional parameter.\n   To include a value that starts with a dash (such as a single dash) the leading dash needs to be escaped ``\\\\-``.\n   Negative numbers don't need to be escaped.\n2. For keyword parameters you can use repeated application of the argument ``-c 66 -c \\\\-apples``.\n   If the argument's value starts with a dash then it needs to be escaped or it will be treated as the next keyword argument.\n3. For keyword parameters you can use the ``--arg#N`` syntax to specify that the following ``N`` values are in the list.  If you don't specify N, ``--arg#``, then values are taken just like a positional parameter until a single dash, or another keyword argument, is encountered.\n\nThe three ways can be mixed and matched, but positional arguments must always precede keyword arguments.\n\n\n\nJSON\n----\n\n.. code-block::python\n\n    def foo(*, x={}, y:dict):\n        # foo -x \"{\"x\":[1,2,3]}\" -y null\n        x == {'x':[1,2,3]}\n        y == None\n\nA parameter of type ``dict`` is parsed as json.  It may, or may not parse to a dict.\n\n\n\n\\*args\n------\n\nThe `lists` section above discussed how to get lists of values.\nBut that way has a couple of limitations.\nKeyword arguments must follow the position arguments which is unnatural for commands that deal with file globs.\nAlso, values starting with a dash must be escaped.\n\nBy specifying ``*args`` you can get around these limitations because it just captures all un-processed trailing arguments.\nThis comes with its own limitations.  Obviously, it can't have any sub-commands.\n\n.. code-block:: python\n\n    def foo(first=None, *files, verbose__v=False):\n        # foo *\n        # foo - *\n        # foo - - *\n        # foo -- *\n\nIn the first example, the first file name is captured by ``first`` and the remaining files would go to ``files``.\nIn the second example, ``first`` is skipped so all files go to ``files``.  \n\nBoth the first and second examples have a tricky corner-case.\nIf you have a file named ``-v`` *(Why!?)* then it would try to set the verbose flag and (hopefully) generate an error.\n\nBy explicitly ending the positional and keyword sections with ``-`` you can safely capture all of the files.  The two separate dashes in the third example can be combined together for aesthetics.\nIf you know that there are no crazy files starting with a dash then the first two ways are fine.\n\n\n\n\\*\\*kwargs\n----------\n\n.. code-block:: python\n\n    def foo(a=False, **kwargs) -> str:\n        # foo -axd 33 -d 44 --apple x --banana - upper\n        a == True\n        kwargs == {'x':True, 'd':['33','44'], 'apple':'x', 'banana':True}\n        return str(kwargs)\n\nThe rules for capturing arbitrary key-values are as follows.\n\n* If it must be a flag, either because it is at the end or in the middle of a flag group, then assume the type is a flag.\n* Otherwise, assume a ``str`` if the argument appears once, otherwise ``[str]``\n\nA single dash can be used to stop taking keyword arguments and go to the next command.\n\n\n\nConfig\n======\n\nOften programs need configuration values that can be set for a specific user's environment, or to configure environments such production or test.\n\nThe Config system of yaclipy uses the standard python import system for namespacing.\n`ConfigVar` objects are declared with ``Config.var()``. \n\n.. code-block:: python\n    \n    answer = Config.var(\"The answer to everything.\", 42)\n    speech = Config.var(\"What does the leader say?\", \"I declare that...\")\n    a, b = Config.var(), Config.var() # These names will not be 'a' and 'b'.  They will be 'unk'.\n\nThe variable name is grepped from the stacktrace, so anything other than ``var = Config.var()`` will result in a name being \"unk\".\n\nWhen a variable needs be used, or set it can be brought into scope in the usual way and then read ``a()`` or set ``a(\"Hello World\")``.\n\nConfig vars should only be set from special ``@Config.option()`` decorated functions.  This creates a ``ConfigOption`` class that can configure all of the necessary variables for a specific application environment or purpose.\n\n.. code-block:: python\n\n    @Config.option()\n    def one():\n        answer(1)\n        speech(\"I am the one\")\n\n    @Config.option()\n    def two():\n        answer(2)\n        speech(\"I am not the one\")\n\nThis creates two different configuration options.\nUse ``Config.configure('one')`` to execute the ``one()`` option and set the corresponding config vars.\n\nAdditional config files can be imported in the usual way from your main ``config.py`` root file.\n``with Config.include: import local.config`` can be used for optional, possibly non-existent modules.\n\nIn these local config modules it is common to want to override and existing option.\n\n.. code-block:: python\n\n    # local/config.py\n    import config\n\n    @config.two.override()\n    def two(super):\n        super() # This is the old two() function\n        answer(-answer())\n\n\n\ncli.py\n======\n\nInstead of installing yaclipy into the system, it is better to manage python packages on a per-project basis with virtual environments.\n\nTo easily facilitate this style, copy the contents of `examples/venv` to your project directory and then run `./cli.py`.\n\nThe `cli.py` file simply bootstraps a project-local virtual environment ``VENV_DIR``, installs yaclipy into it, and then turns control over to yaclipy.\n\nThe ``requirements.txt`` file holds the package dependencies that need to be installed into the virtual environment.  When changing dependencies make sure to delete the corresponding lock file so that the changes are picked-up.\n\n\n\nInstallation\n============\n\nInstead of installing this manually, use the bootstrapping method shown above in ``examples/venv``.\n\n.. code-block:: console\n   \n   $ pip install yaclipy\n\n\n.. image:: https://img.shields.io/pypi/v/yaclipy.svg\n   :target: https://pypi.org/project/yaclipy\n\n\n.. image:: https://img.shields.io/pypi/pyversions/yaclipy.svg\n   :target: https://pypi.org/project/yaclipy\n\n\n\nPlugins\n=======\n\nOther libraries may be imported and used as sub-commands.\n\n\n\nTest\n====\n\n.. code-block:: console\n\n   $ hatch shell\n   $ pytest\n\n\n\nLicense\n=======\n\n`yaclipy` is distributed under the terms of the `MIT <https://spdx.org/licenses/MIT.html>`_ license.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "yaclipy",
    "package_url": "https://pypi.org/project/yaclipy/",
    "platform": null,
    "project_url": "https://pypi.org/project/yaclipy/",
    "project_urls": {
      "Documentation": "https://github.com/aaron-fl/yaclipy#readme",
      "Issues": "https://github.com/aaron-fl/yaclipy/issues",
      "Source": "https://github.com/aaron-fl/yaclipy"
    },
    "release_url": "https://pypi.org/project/yaclipy/1.1.1/",
    "requires_dist": [
      "docstring-parser",
      "print-ext>=2.1.1"
    ],
    "requires_python": ">=3.7",
    "summary": "Yet another python command-line interface that has a consistent way to call any kind of function/method from the command line.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17470450,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6c9bc8baf22ac09e2ffa2289e4212eb1b36de51bd3ec62aa99e327976c86b8f8",
          "md5": "d0b5a32aa43885ae93c88b3189c3d5cf",
          "sha256": "8fdb1ff3cb88b8391876e9ceba1f65ce9d661b126dc68474044001051ab3b63e"
        },
        "downloads": -1,
        "filename": "yaclipy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0b5a32aa43885ae93c88b3189c3d5cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4026,
        "upload_time": "2023-03-03T01:53:48",
        "upload_time_iso_8601": "2023-03-03T01:53:48.468325Z",
        "url": "https://files.pythonhosted.org/packages/6c/9b/c8baf22ac09e2ffa2289e4212eb1b36de51bd3ec62aa99e327976c86b8f8/yaclipy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ceba4799776f2bbfddd7efb213b7c47a5492ba6cd8c170e783bf657c4a14740c",
          "md5": "0239e4b2c7cbf44b1d5717b30434b99e",
          "sha256": "61f833c52ce7d1dff1ac3cb108634a4dad680248a126dbb40bdb10dc05e4141d"
        },
        "downloads": -1,
        "filename": "yaclipy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0239e4b2c7cbf44b1d5717b30434b99e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3773,
        "upload_time": "2023-03-03T01:53:44",
        "upload_time_iso_8601": "2023-03-03T01:53:44.789803Z",
        "url": "https://files.pythonhosted.org/packages/ce/ba/4799776f2bbfddd7efb213b7c47a5492ba6cd8c170e783bf657c4a14740c/yaclipy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c68e20930ffe41d5be21ca9d0daf40b6c11954ce3831279745345be80e106c27",
          "md5": "b795f028ac97cd311a3af504504aa910",
          "sha256": "f653080fbfe05089e71f3a26de4b2e95b28802542983991c4899b3126e0ab2fb"
        },
        "downloads": -1,
        "filename": "yaclipy-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b795f028ac97cd311a3af504504aa910",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14826,
        "upload_time": "2023-03-07T10:17:21",
        "upload_time_iso_8601": "2023-03-07T10:17:21.397917Z",
        "url": "https://files.pythonhosted.org/packages/c6/8e/20930ffe41d5be21ca9d0daf40b6c11954ce3831279745345be80e106c27/yaclipy-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c8ec47d1f2a301138934f0e9c8652023d119dd59f0eedb7a1af3eb9e18d7f321",
          "md5": "fad8f7c8241e43826d72b41564ddb783",
          "sha256": "65c25e60ee619bd03d2ba427f93ebe7f667e1740e87f55a2e506245272f088c0"
        },
        "downloads": -1,
        "filename": "yaclipy-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fad8f7c8241e43826d72b41564ddb783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17875,
        "upload_time": "2023-03-07T10:17:15",
        "upload_time_iso_8601": "2023-03-07T10:17:15.857758Z",
        "url": "https://files.pythonhosted.org/packages/c8/ec/47d1f2a301138934f0e9c8652023d119dd59f0eedb7a1af3eb9e18d7f321/yaclipy-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "aaf493904465016ca9652c8401f66f61eb7f3326dcb01cd16e9b2a553378ab81",
          "md5": "428790d1b294292ffedfc10cd525f227",
          "sha256": "c95a5f8eb69e346f0f041a2dc281a0a5590757125a50027f45ee0e685846d7ad"
        },
        "downloads": -1,
        "filename": "yaclipy-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "428790d1b294292ffedfc10cd525f227",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15879,
        "upload_time": "2023-03-07T10:17:18",
        "upload_time_iso_8601": "2023-03-07T10:17:18.317409Z",
        "url": "https://files.pythonhosted.org/packages/aa/f4/93904465016ca9652c8401f66f61eb7f3326dcb01cd16e9b2a553378ab81/yaclipy-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9f6f8f3d2ab45cf73f6351c79336e017896243e58fae993d744de8eef7cc1a8c",
          "md5": "51fc7946769817107e7958928761e57a",
          "sha256": "86936c3ee2de82d9a934a80b7d6ff1e094dcf7f992442dd5a27036e153c3597d"
        },
        "downloads": -1,
        "filename": "yaclipy-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51fc7946769817107e7958928761e57a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20196,
        "upload_time": "2023-03-07T10:17:13",
        "upload_time_iso_8601": "2023-03-07T10:17:13.531399Z",
        "url": "https://files.pythonhosted.org/packages/9f/6f/8f3d2ab45cf73f6351c79336e017896243e58fae993d744de8eef7cc1a8c/yaclipy-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d041da8fdace34934b89d8f54cfcf1b7188c5627a084d32c75cb6b58c2887b67",
          "md5": "e55c5931420ba08e826d5fb30288e916",
          "sha256": "1ddb76b0c11b695cd3386e71a588aaa99c3ebf6d2f81d805f4fbec8f47aaf0e6"
        },
        "downloads": -1,
        "filename": "yaclipy-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e55c5931420ba08e826d5fb30288e916",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15879,
        "upload_time": "2023-03-07T10:27:42",
        "upload_time_iso_8601": "2023-03-07T10:27:42.244142Z",
        "url": "https://files.pythonhosted.org/packages/d0/41/da8fdace34934b89d8f54cfcf1b7188c5627a084d32c75cb6b58c2887b67/yaclipy-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8a193079ebf58533b6e1863417f250ffe4d8e95195e9e239c45c540f17baf2fc",
          "md5": "b480e1d6e152b050f613424ae96ead00",
          "sha256": "90383e6e88597df11064c19dcbffbdb04119de1603b12cb679369a2736bbdca9"
        },
        "downloads": -1,
        "filename": "yaclipy-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b480e1d6e152b050f613424ae96ead00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20217,
        "upload_time": "2023-03-07T10:27:44",
        "upload_time_iso_8601": "2023-03-07T10:27:44.911402Z",
        "url": "https://files.pythonhosted.org/packages/8a/19/3079ebf58533b6e1863417f250ffe4d8e95195e9e239c45c540f17baf2fc/yaclipy-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7bd9826cbba73f6e0976322576a8587b21700419e7ae6a25ae4a859a9e5d8d06",
          "md5": "cc7df252c0176d2e2b9c15f65cf77a23",
          "sha256": "f1530ded54a1507d3610944ca52af2364429bc8f8ad2ab91f4fbff47cc6e384a"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc7df252c0176d2e2b9c15f65cf77a23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15596,
        "upload_time": "2023-03-08T10:00:15",
        "upload_time_iso_8601": "2023-03-08T10:00:15.725549Z",
        "url": "https://files.pythonhosted.org/packages/7b/d9/826cbba73f6e0976322576a8587b21700419e7ae6a25ae4a859a9e5d8d06/yaclipy-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a03af8a24962a1b898a7bb413b11040de588cac409f83d4506012a1071878e1e",
          "md5": "26084ca738beb201c0174292bb7dee70",
          "sha256": "2f76a950480bfd09858082a7c42ff2aef8a5457060643fa2eb4993692512f995"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "26084ca738beb201c0174292bb7dee70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20316,
        "upload_time": "2023-03-08T10:00:13",
        "upload_time_iso_8601": "2023-03-08T10:00:13.034692Z",
        "url": "https://files.pythonhosted.org/packages/a0/3a/f8a24962a1b898a7bb413b11040de588cac409f83d4506012a1071878e1e/yaclipy-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "34d1b7eaa32efb997c0d1d50f3390040555ac1887af1bf5ce3910a3d33d040ef",
          "md5": "d54cae23bb2a35cecb4926e6703b4a63",
          "sha256": "bfe9f0969a961b870e7eae76a850c189aa88a40f1adea3471ede5ce4eb621408"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d54cae23bb2a35cecb4926e6703b4a63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15595,
        "upload_time": "2023-03-13T12:27:09",
        "upload_time_iso_8601": "2023-03-13T12:27:09.668368Z",
        "url": "https://files.pythonhosted.org/packages/34/d1/b7eaa32efb997c0d1d50f3390040555ac1887af1bf5ce3910a3d33d040ef/yaclipy-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c51d188be0bae6ad5e03d77f5418aba5fa6a307cd04f4a45256dd0211cba8180",
          "md5": "2161dd591ab40ac6f6048e03dcb1df45",
          "sha256": "cc6490523dbcf49a0130e280b3bb6fdbe9f8574ea0bf6e9986784c5bf78d4acd"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2161dd591ab40ac6f6048e03dcb1df45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20440,
        "upload_time": "2023-03-13T12:27:07",
        "upload_time_iso_8601": "2023-03-13T12:27:07.010900Z",
        "url": "https://files.pythonhosted.org/packages/c5/1d/188be0bae6ad5e03d77f5418aba5fa6a307cd04f4a45256dd0211cba8180/yaclipy-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4f999a2879fc16ca18cc4a190dbcf163d1e4a228092b49bfc1a0d1382c0633e7",
          "md5": "bf5fde810f3ba0ffe918e19c07717c5a",
          "sha256": "b9fc96812ce3bfdd2e0dcf23f192ff300ab4f1a8cdf297c6a07b7f1ef698e011"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf5fde810f3ba0ffe918e19c07717c5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15571,
        "upload_time": "2023-03-15T10:03:03",
        "upload_time_iso_8601": "2023-03-15T10:03:03.485482Z",
        "url": "https://files.pythonhosted.org/packages/4f/99/9a2879fc16ca18cc4a190dbcf163d1e4a228092b49bfc1a0d1382c0633e7/yaclipy-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0ba8bc9b408af538fcf9abbeaa55f8488798a3a9a903f80e6e0309a93f6ef2d2",
          "md5": "b2aebc44cc064c5ac7834111ca273671",
          "sha256": "302db8e0edcd31ab2f2a0a37b3edbaa8d179173b90e81329901c891ce90f3573"
        },
        "downloads": -1,
        "filename": "yaclipy-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b2aebc44cc064c5ac7834111ca273671",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20445,
        "upload_time": "2023-03-15T10:03:01",
        "upload_time_iso_8601": "2023-03-15T10:03:01.027484Z",
        "url": "https://files.pythonhosted.org/packages/0b/a8/bc9b408af538fcf9abbeaa55f8488798a3a9a903f80e6e0309a93f6ef2d2/yaclipy-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "37c718d89a289189a627a24a16ed3ad176828a8983280057e3fe6f0b77a4b594",
          "md5": "c8ca1a1537a8a8a32f835fc645b02924",
          "sha256": "203fb8967773a6dcfbcbdbd27c31ba8e18340226e155a8327c29a3bb571dbc44"
        },
        "downloads": -1,
        "filename": "yaclipy-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8ca1a1537a8a8a32f835fc645b02924",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18134,
        "upload_time": "2023-03-18T22:01:13",
        "upload_time_iso_8601": "2023-03-18T22:01:13.934290Z",
        "url": "https://files.pythonhosted.org/packages/37/c7/18d89a289189a627a24a16ed3ad176828a8983280057e3fe6f0b77a4b594/yaclipy-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d51eef71fe5a54374a26f1ac7f34f3e2d160eb8535c486e854090affb82c01a2",
          "md5": "af5305698de6e47a7560baef230dab4e",
          "sha256": "f6551520d5b6db1c5662341ecc4f9f71916651f108ad9356c3893899a0878bf1"
        },
        "downloads": -1,
        "filename": "yaclipy-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af5305698de6e47a7560baef230dab4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23900,
        "upload_time": "2023-03-18T22:01:18",
        "upload_time_iso_8601": "2023-03-18T22:01:18.060112Z",
        "url": "https://files.pythonhosted.org/packages/d5/1e/ef71fe5a54374a26f1ac7f34f3e2d160eb8535c486e854090affb82c01a2/yaclipy-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "628ff9cdaee19783264129d25f7233aac9ca2fd07cb8f474b1e2e7b47b701b51",
          "md5": "cdb64129deb13b9126878e0ceca79a39",
          "sha256": "3bcad58bacb5f306b21ea2876a370584f707cf3ed7e6e0aa09df19d933055912"
        },
        "downloads": -1,
        "filename": "yaclipy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdb64129deb13b9126878e0ceca79a39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18951,
        "upload_time": "2023-03-25T12:38:28",
        "upload_time_iso_8601": "2023-03-25T12:38:28.797652Z",
        "url": "https://files.pythonhosted.org/packages/62/8f/f9cdaee19783264129d25f7233aac9ca2fd07cb8f474b1e2e7b47b701b51/yaclipy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e2eb5476aa13d1f9d6954b76265ba29172e5e892b4e6f95b03d59b3673e99f72",
          "md5": "36256d49b79c5c1e259bb6226c72886f",
          "sha256": "ef5364926bef665006639ff527a970443d4a774acbdb5c27ecf8c503bc34d1df"
        },
        "downloads": -1,
        "filename": "yaclipy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36256d49b79c5c1e259bb6226c72886f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25274,
        "upload_time": "2023-03-25T12:38:32",
        "upload_time_iso_8601": "2023-03-25T12:38:32.419538Z",
        "url": "https://files.pythonhosted.org/packages/e2/eb/5476aa13d1f9d6954b76265ba29172e5e892b4e6f95b03d59b3673e99f72/yaclipy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "313408cefebb4e2eecea7fb56b14c7aedba4367683d74e5bd61a2f8c38f14489",
          "md5": "696e7aec87822eae11e345cacca529a5",
          "sha256": "501dc191672e9805e5fc30eb7eca3949faa0bb02e1c0723ab5f0720a228ae138"
        },
        "downloads": -1,
        "filename": "yaclipy-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "696e7aec87822eae11e345cacca529a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18946,
        "upload_time": "2023-03-28T00:46:05",
        "upload_time_iso_8601": "2023-03-28T00:46:05.478148Z",
        "url": "https://files.pythonhosted.org/packages/31/34/08cefebb4e2eecea7fb56b14c7aedba4367683d74e5bd61a2f8c38f14489/yaclipy-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "278ad05e382e24cb9d56697bc11aa81c85ffed5988303835e54d6c121957d46d",
          "md5": "a6f4651c04784cef5424650bbbf8506c",
          "sha256": "2517dd4aa9f7a4085d374fc9944315fb5a3a27ff9b03f2be8d46ed5cae83bde7"
        },
        "downloads": -1,
        "filename": "yaclipy-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6f4651c04784cef5424650bbbf8506c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25274,
        "upload_time": "2023-03-28T00:46:08",
        "upload_time_iso_8601": "2023-03-28T00:46:08.165019Z",
        "url": "https://files.pythonhosted.org/packages/27/8a/d05e382e24cb9d56697bc11aa81c85ffed5988303835e54d6c121957d46d/yaclipy-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "313408cefebb4e2eecea7fb56b14c7aedba4367683d74e5bd61a2f8c38f14489",
        "md5": "696e7aec87822eae11e345cacca529a5",
        "sha256": "501dc191672e9805e5fc30eb7eca3949faa0bb02e1c0723ab5f0720a228ae138"
      },
      "downloads": -1,
      "filename": "yaclipy-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "696e7aec87822eae11e345cacca529a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18946,
      "upload_time": "2023-03-28T00:46:05",
      "upload_time_iso_8601": "2023-03-28T00:46:05.478148Z",
      "url": "https://files.pythonhosted.org/packages/31/34/08cefebb4e2eecea7fb56b14c7aedba4367683d74e5bd61a2f8c38f14489/yaclipy-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "278ad05e382e24cb9d56697bc11aa81c85ffed5988303835e54d6c121957d46d",
        "md5": "a6f4651c04784cef5424650bbbf8506c",
        "sha256": "2517dd4aa9f7a4085d374fc9944315fb5a3a27ff9b03f2be8d46ed5cae83bde7"
      },
      "downloads": -1,
      "filename": "yaclipy-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a6f4651c04784cef5424650bbbf8506c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 25274,
      "upload_time": "2023-03-28T00:46:08",
      "upload_time_iso_8601": "2023-03-28T00:46:08.165019Z",
      "url": "https://files.pythonhosted.org/packages/27/8a/d05e382e24cb9d56697bc11aa81c85ffed5988303835e54d6c121957d46d/yaclipy-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}