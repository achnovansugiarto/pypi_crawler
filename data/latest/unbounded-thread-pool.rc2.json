{
  "info": {
    "author": "romasku",
    "author_email": "romasku135@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Unbounded Thread Pool\n\nImplementation of python's [`concurrent.futures.Executor`] that creates new threads on demand \nand stops them if they are not needed anymore. \n\nIt is designed to allow infinite recursive submitting of tasks, so the following code works properly, \ndespite creating of 10k threads:\n\n```python\nfrom unbounded_thread_pool import UnboundedThreadPoolExecutor\n\nwith UnboundedThreadPoolExecutor() as executor:\n    def factorial(n: int):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return executor.submit(factorial, n - 1).result() * n\n    print(factorial(10000))\n```\n\n# Installation\n\n```\npip install unbounded_thread_pool\n```\n\n# Requirements\n\n- Python (3.6, 3.7, 3.8)\n\n# Usage \n\n`UnboundedThreadPoolExecutor` supports the following constructor parameters:\n- `name: str`: Name of executor, all thread names are prefixed with it.\nDefault is `UnboundedThreadPoolExecutor`. \n- `max_thread_idle_time: float`: How many seconds idling worker thread should live.\nDefault is `30` seconds.\n\nFor more details about methods check official python docs about [`concurrent.futures.Executor`].\n\n# Usage with `asyncio`\n\nWhen you write a lot of sync code that calls async code and vice versa (for example, if you use\n[asgiref] `sync_to_async` and `async_to_sync`) default asyncio executor can stuck. It happens \nin case you have the following code flow:\n\nasync code ---> sync code (1) ---> async code ---> sync code(2)\n\nHere the second (2) sync code requires free worker to be available in thread pool, but \nthread pool can be already exhausted by the first (1) sync code. This causes deadlock, \nas (1) waits for (2), while (2) waits for (1) to free thread pool. To eliminate this issue, \nyou can use `UnboundedThreadPoolExecutor`:\n\n```python\nloop = asyncio.get_running_loop()\nloop.set_default_executor(UnboundedThreadPoolExecutor(name='AsyncioExecutor'))\n```\n\n---\n\n[`concurrent.futures.Executor`]: https://hub.docker.com/r/kartoza/postgis/\n[asgiref]: https://github.com/django/asgiref#function-wrappers\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/romasku/unbounded-thread-pool",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unbounded-thread-pool",
    "package_url": "https://pypi.org/project/unbounded-thread-pool/",
    "platform": "",
    "project_url": "https://pypi.org/project/unbounded-thread-pool/",
    "project_urls": {
      "Homepage": "https://github.com/romasku/unbounded-thread-pool"
    },
    "release_url": "https://pypi.org/project/unbounded-thread-pool/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "ThreadPool with unlimited workers count.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7285474,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7413e238d4dbe547d88861c5a57c39cc30f9c4b12172d8ac67cbe6ab7323e45",
          "md5": "dd475e88de718e3c6bb6bcfd988aa14b",
          "sha256": "9d2313dd2a31fb851e410ff0b0e94ac10051330eaa42c85701f98f11d461ae55"
        },
        "downloads": -1,
        "filename": "unbounded_thread_pool-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd475e88de718e3c6bb6bcfd988aa14b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4959,
        "upload_time": "2020-05-19T21:21:19",
        "upload_time_iso_8601": "2020-05-19T21:21:19.224250Z",
        "url": "https://files.pythonhosted.org/packages/b7/41/3e238d4dbe547d88861c5a57c39cc30f9c4b12172d8ac67cbe6ab7323e45/unbounded_thread_pool-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a39824bf5b8820114049c95b0f42f56d4c5a544fa8f6b9702f3ffb564853675",
          "md5": "e552e216766ddca302a95da6e46680e5",
          "sha256": "c2a4e9890b210ab3b6d9283cb4bb27e17f4d929c4b12447780edaceece838ea4"
        },
        "downloads": -1,
        "filename": "unbounded-thread-pool-0.2.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "e552e216766ddca302a95da6e46680e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6915,
        "upload_time": "2020-05-20T12:09:08",
        "upload_time_iso_8601": "2020-05-20T12:09:08.763936Z",
        "url": "https://files.pythonhosted.org/packages/8a/39/824bf5b8820114049c95b0f42f56d4c5a544fa8f6b9702f3ffb564853675/unbounded-thread-pool-0.2.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4abd7327623d16f52abb0d78281bc961726026f7944c6dfc12f762799b71fd30",
          "md5": "5bbd50e0e9aea1817f32eb5475f5b1c5",
          "sha256": "cd349bd0859ef98604b496e8131cec1a28ebfcb0afd844fbae9a1b1e6d7c3847"
        },
        "downloads": -1,
        "filename": "unbounded_thread_pool-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bbd50e0e9aea1817f32eb5475f5b1c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5318,
        "upload_time": "2020-05-20T12:09:07",
        "upload_time_iso_8601": "2020-05-20T12:09:07.406886Z",
        "url": "https://files.pythonhosted.org/packages/4a/bd/7327623d16f52abb0d78281bc961726026f7944c6dfc12f762799b71fd30/unbounded_thread_pool-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a39824bf5b8820114049c95b0f42f56d4c5a544fa8f6b9702f3ffb564853675",
        "md5": "e552e216766ddca302a95da6e46680e5",
        "sha256": "c2a4e9890b210ab3b6d9283cb4bb27e17f4d929c4b12447780edaceece838ea4"
      },
      "downloads": -1,
      "filename": "unbounded-thread-pool-0.2.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "e552e216766ddca302a95da6e46680e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6915,
      "upload_time": "2020-05-20T12:09:08",
      "upload_time_iso_8601": "2020-05-20T12:09:08.763936Z",
      "url": "https://files.pythonhosted.org/packages/8a/39/824bf5b8820114049c95b0f42f56d4c5a544fa8f6b9702f3ffb564853675/unbounded-thread-pool-0.2.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4abd7327623d16f52abb0d78281bc961726026f7944c6dfc12f762799b71fd30",
        "md5": "5bbd50e0e9aea1817f32eb5475f5b1c5",
        "sha256": "cd349bd0859ef98604b496e8131cec1a28ebfcb0afd844fbae9a1b1e6d7c3847"
      },
      "downloads": -1,
      "filename": "unbounded_thread_pool-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5bbd50e0e9aea1817f32eb5475f5b1c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5318,
      "upload_time": "2020-05-20T12:09:07",
      "upload_time_iso_8601": "2020-05-20T12:09:07.406886Z",
      "url": "https://files.pythonhosted.org/packages/4a/bd/7327623d16f52abb0d78281bc961726026f7944c6dfc12f762799b71fd30/unbounded_thread_pool-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}