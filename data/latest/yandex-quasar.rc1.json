{
  "info": {
    "author": "",
    "author_email": "me@biteof.space",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Yandex Quasar API\r\n![](https://img.shields.io/badge/httpx-0.13.3-green)\r\n![](https://img.shields.io/badge/dacite-1.6.0-brightgreen)\r\n## Installation\r\n```\r\n$ python3 -m pip install yandex_quasar\r\n```\r\n## Authorization\r\nMy library uses cookie login - it's easier and more reliable.  \r\nInstall [this](https://chrome.google.com/webstore/detail/copy-cookies/jcbpglbplpblnagieibnemmkiamekcdg) extenstion and go to [passport.yandex.ru](https://passport.yandex.ru) (this is VERY important, follow this link) and copy the cookie by clicking on the extension icon.  \r\nThen, in the folder where you plan to create the code, make a file with any name with the txt extension (you need to remember it), for example `btfspace.txt` and paste the copied cookies into this file.  \r\nWith authorization, consider it over.\r\n## Supported devices\r\n- Sensors (like Mi Temp & Humidity Sensor)\r\n- Switches\r\n- Sockets\r\n- Lights (includes color, brightness changing)\r\n- Yandex Smart Remote Cotroller (custom buttons and TV)\r\n## Using\r\n```python\r\nfrom quasar_api import Quasar\r\n\r\napi = Quasar('btfspace') # place here name of your file without .txt\r\n```\r\nNow you can use any methods of the class (if you didn't get an error).\r\n### api.get_devices()\r\n```python\r\ndevices = api.get_devices()\r\nprint(devices)\r\n\r\n[Device(created=datetime.datetime(2022, 6, 27, 16, 29, 22), id='secret', name='Яндекс Мини', room=None, room_id=None, type='devices.types.smart_speaker.yandex.station.mini', manufacturer='Yandex Services AG', model='YNDX-0004', sw_version=None)...]\r\n```\r\nThis method returns you a list of all devices and general information about them (there are NO control methods such as turn_on/off, they will be further in the documentation).\r\n### api.get_device(id = 'secret')\r\nThis method returns detailed information and device management methods by ID.  \r\n\r\n#### Lights\r\n```python\r\nled_strip = api.get_device('secret')\r\nprint(led_strip)\r\n\r\nExtended(is_favorite=False, id='secret', name='Лента', names=['Лента'], room='Спальня', online=True, type='devices.types.light', external_id='light.strip', sensors=[], skill_id='secret', capabilities=[OnOffCapability(type='devices.capabilities.on_off', instance='on', value=True), ColorCapability(type='devices.capabilities.color_setting', instance='color', value=CurrentColor(id='', name='', type='multicolor', color={'h': 357, 's': 83, 'v': 100}), palette=[{'id': 'white', 'name': 'Белый', 'type': 'white', 'value': {'h': 33, 's': 28, 'v': 100}}, {'id': 'red', 'name': 'Красный', 'type': 'multicolor', 'value': {'h': 0, 's': 65, 'v': 10...]), RangeCapability(type='devices.capabilities.range', instance='brightness', value=54, range=Range(min=1, max=100, precision=1), unit='unit.percent')], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket...')\r\n```\r\nIn this type of device you can:\r\n- `led_strip.turn_on()` - turn on device\r\n- `led_strip.turn_off()` - turn off device\r\n- `led_strip.set_brightness(77)` - set brightness (from 1 to 100)\r\n- `led_strip.set_color('red')` - set color (available colors in Extended object in ColorCapability in palette)\r\n\r\n#### Sockets and switches\r\n```python\r\nsocket = api.get_device('secret')\r\nprint(socket)\r\n\r\nExtended(is_favorite=False, id='secret', name='Ночник', names=['Ночник'], room='Спальня', online=True, type='devices.types.light', external_id='secret', sensors=[Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 48, 52), instance='voltage', name='текущее напряжение', percent=None, status=None, value=233, type='devices.properties.float', unit='unit.volt'), Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 48, 52), instance='power', name='потребляемая мощность', percent=None, status=None, value=0, type='devices.properties.float', unit='unit.watt'), Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 48, 52), instance='amperage', name='потребление тока', percent=None, status=None, value=0, type='devices.properties.float', unit='unit.ampere')], skill_id='T', capabilities=[OnOffCapability(type='devices.capabilities.on_off', instance='on', value=True)], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket..')\r\n```\r\nIn this type of device you can:\r\n- `socket.turn_on()` - turn on device\r\n- `socket.turn_off()` - turn off device\r\n\r\n#### Yandex Smart Remote Cotroller\r\n```python\r\nhub = api.get_device('secret')\r\nprint(hub)\r\n\r\nExtended(is_favorite=False, id='secret', name='Пульт', names=['Пульт'], room='Спальня', online=True, type='devices.types.hub', external_id='secret', sensors=[], skill_id='T', capabilities=[], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket...')\r\n```\r\nIn this type of device you can:\r\n- `hub.get_linked()` - returns linked to remote controller devices\r\n#### Sensor\r\n```python\r\nsensor = api.get_device('secret')\r\nprint(sensor)\r\n\r\nExtended(is_favorite=False, id='secret', name='Датчик температуры', names=['Датчик температуры'], room='Спальня', online=True, type='devices.types.sensor', external_id='secret', sensors=[Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 55, 9), instance='temperature', name='температура', percent=None, status=None, value=28.4, type='devices.properties.float', unit='unit.temperature.celsius'), Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 55, 9), instance='humidity', name='влажность', percent=51, status='normal', value=51, type='devices.properties.float', unit='unit.percent'), Sensor(last_updated=datetime.datetime(2022, 7, 11, 17, 55, 9), instance='battery_level', name='уровень заряда', percent=100, status='normal', value=100, type='devices.properties.float', unit='unit.percent')], skill_id='secret', capabilities=[], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket...')\r\n```\r\n#### TV\r\n```python\r\ntv = api.get_device('secret')\r\nprint(tv)\r\n\r\nExtended(is_favorite=False, id='secret', name='Телевизор', names=['Телевизор'], room='Спальня', online=True, type='devices.types.media_device.tv', external_id='secret', sensors=[], skill_id='T', capabilities=[], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket...')\r\n```\r\nIn this type of device you can:\r\n- `tv.power()` - emulating Power button\r\n- `tv.set_channel(13)` - setting channel\r\n- `tv.channel_up()` - emulatuing Channel Up Button\r\n- `tv.channel_down()` - emulatuing Channel Down Button\r\n- `tv.volume_up()` - emulatuing Volume Up Button\r\n- `tv.volume_down()` - emulatuing Volume Down Button\r\n#### Custom buttons\r\n```python\r\ncustom = api.get_device('secret')\r\nprint(custom)\r\n\r\nExtended(is_favorite=False, id='esecret', name='Светильник', names=['Светильник'], room='Спальня', online=True, type='devices.types.other', external_id='secret', sensors=[], skill_id='T', capabilities=[CustomButton(name='Включи', instance='16567707109928'), CustomButton(name='Выключи', instance='1656773379813671'), CustomButton(name='Измени яркость', instance='16567753933715')], groups=[], wss_url='wss://push.yandex.ru/v2/subscribe/websocket...')\r\n```\r\nIn this type of device you can:\r\n- `custom.use_custom('16567753933715')` - emulating yourcustom signal, argument - instance\r\n### api.get_smart_speakers()\r\nReturns a list of smart speakers\r\n```python\r\nspeakers = api.get_smart_speakers()\r\nprint(speakers)\r\n\r\n[Speaker(icon='https://avatars.mds.yandex.net/get-yandex-station/1/yandexstationicon/orig', id='1', name='Яндекс Станция', online=True, platform='yandexstation', screen_capable=True, screen_present=True), Speaker(icon='https://avatars.mds.yandex.net/get-yandex-station/1/unknowndeviceicon/orig', id='1', name='Яндекс Мини', online=True, platform='yandexmini', screen_capable=False, screen_present=False)]\r\n```\r\n### api.play_youtube_video(id, url)\r\nThe function plays videos on YouTube on a smart speaker\r\n```python\r\napi.play_youtube_video('SMART_SPEAKER_ID', 'https://www.youtube.com/watch?v=dQw4w9WgXcQ')\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/btfspace/yandex-quasar",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yandex-quasar",
    "package_url": "https://pypi.org/project/yandex-quasar/",
    "platform": null,
    "project_url": "https://pypi.org/project/yandex-quasar/",
    "project_urls": {
      "Homepage": "https://github.com/btfspace/yandex-quasar"
    },
    "release_url": "https://pypi.org/project/yandex-quasar/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Yandex Quasar API",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14401999,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1dd30ae579f085cbd4204b54b3fd6a089d17a2082ac39e8977860015ac0f90f",
          "md5": "4f596e07933361949892ba75038f4ef2",
          "sha256": "ba80c16033e3faa7f48299d3d8460fe3435e369c06b51a45d7a30035d1eb7398"
        },
        "downloads": -1,
        "filename": "yandex_quasar-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f596e07933361949892ba75038f4ef2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9813,
        "upload_time": "2022-07-11T18:11:15",
        "upload_time_iso_8601": "2022-07-11T18:11:15.005461Z",
        "url": "https://files.pythonhosted.org/packages/e1/dd/30ae579f085cbd4204b54b3fd6a089d17a2082ac39e8977860015ac0f90f/yandex_quasar-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1dd30ae579f085cbd4204b54b3fd6a089d17a2082ac39e8977860015ac0f90f",
        "md5": "4f596e07933361949892ba75038f4ef2",
        "sha256": "ba80c16033e3faa7f48299d3d8460fe3435e369c06b51a45d7a30035d1eb7398"
      },
      "downloads": -1,
      "filename": "yandex_quasar-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4f596e07933361949892ba75038f4ef2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9813,
      "upload_time": "2022-07-11T18:11:15",
      "upload_time_iso_8601": "2022-07-11T18:11:15.005461Z",
      "url": "https://files.pythonhosted.org/packages/e1/dd/30ae579f085cbd4204b54b3fd6a089d17a2082ac39e8977860015ac0f90f/yandex_quasar-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}