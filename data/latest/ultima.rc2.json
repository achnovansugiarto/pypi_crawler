{
  "info": {
    "author": "Yonatan Perry, Assaf Ben-David, Uri Sternfeld",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Ultima - intuitive parallel `map()` for Python\n[![Ultima CI](https://github.com/Cybereason/ultima/actions/workflows/ci.yml/badge.svg)](https://github.com/Cybereason/ultima/actions/workflows/ci.yml)\n\n## What is it?\n\n**ultima** is a Python package that provides a simple yet powerful interface to do `map()` in parallel.\nIt uses `concurrent.futures` as its execution backend and can run tasks in either threads or sub-processes.\nIt is designed to squeeze maximum performance (let those CPUs burn ðŸ”¥) with the same simple interface.\n\n## Usage examples:\n\nRun a heavy function in sub-processes:\n\n```python\nfrom ultima import Workforce\n\ninputs = open(\"input_data.txt\")\n\nwith Workforce() as wf:\n    for result in wf.map(cpu_intensive_function, inputs):\n        ...\n```\n\nAn equivalent one-liner:\n\n```python\nfrom ultima import ultimap\n\nfor result in ultimap(cpu_intensive_function, inputs):\n    ...\n```\n\nThe default backend is multiprocessing, but you can easily use threads instead:\n\n```python\nfrom ultima import ultimap\n\nfor result in ultimap(io_bound_function, inputs, backend='threading', n_workers=64):\n    ...\n```\n\nTo chain an IO-intensive task with a CPU-intensive task:\n\n```python\nfrom ultima import ultimap\n\ndef io_intensive(url):\n    import requests\n    return requests.get(url).text\n\ndef cpu_intensive(page):\n    import hashlib\n    return hashlib.sha1(page.encode()).hexdigest()\n\nurls = open(\"urls.txt\")\nwebpages = ultimap(io_intensive, urls, backend='threading', n_workers=64)\nhashes = ultimap(cpu_intensive, webpages, backend='multiprocessing')\nprint(len(set(hashes)))\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Cybereason/ultima",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ultima",
    "package_url": "https://pypi.org/project/ultima/",
    "platform": null,
    "project_url": "https://pypi.org/project/ultima/",
    "project_urls": {
      "Homepage": "https://github.com/Cybereason/ultima"
    },
    "release_url": "https://pypi.org/project/ultima/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Intuitive parallel map calls for Python",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16463834,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca24ad193d03e064b4a61c1e2b37b61fd7e33f9635ead6aedaad17bee1fbf775",
          "md5": "865b031a9d41db97707ee03688f80b7e",
          "sha256": "9c7cbc21f9e89dae9859334fc3485a79aaeae6ac0eb32957dba991a1330c7968"
        },
        "downloads": -1,
        "filename": "ultima-1.0.3.zip",
        "has_sig": false,
        "md5_digest": "865b031a9d41db97707ee03688f80b7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 65429,
        "upload_time": "2022-12-08T17:25:52",
        "upload_time_iso_8601": "2022-12-08T17:25:52.766629Z",
        "url": "https://files.pythonhosted.org/packages/ca/24/ad193d03e064b4a61c1e2b37b61fd7e33f9635ead6aedaad17bee1fbf775/ultima-1.0.3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b23d022f79b67c2dcc4141943c1a23ba0f780b5c6c5b972036df3a1b70ea915",
          "md5": "8efe3ae1d57c8975591deec87f6c8cb6",
          "sha256": "f2154e487690069b6486337956363b91ef7599fd9207bd815e82cadfb368e9e0"
        },
        "downloads": -1,
        "filename": "ultima-1.1.1.zip",
        "has_sig": false,
        "md5_digest": "8efe3ae1d57c8975591deec87f6c8cb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 58495,
        "upload_time": "2023-01-17T21:49:22",
        "upload_time_iso_8601": "2023-01-17T21:49:22.567251Z",
        "url": "https://files.pythonhosted.org/packages/8b/23/d022f79b67c2dcc4141943c1a23ba0f780b5c6c5b972036df3a1b70ea915/ultima-1.1.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b23d022f79b67c2dcc4141943c1a23ba0f780b5c6c5b972036df3a1b70ea915",
        "md5": "8efe3ae1d57c8975591deec87f6c8cb6",
        "sha256": "f2154e487690069b6486337956363b91ef7599fd9207bd815e82cadfb368e9e0"
      },
      "downloads": -1,
      "filename": "ultima-1.1.1.zip",
      "has_sig": false,
      "md5_digest": "8efe3ae1d57c8975591deec87f6c8cb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 58495,
      "upload_time": "2023-01-17T21:49:22",
      "upload_time_iso_8601": "2023-01-17T21:49:22.567251Z",
      "url": "https://files.pythonhosted.org/packages/8b/23/d022f79b67c2dcc4141943c1a23ba0f780b5c6c5b972036df3a1b70ea915/ultima-1.1.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}