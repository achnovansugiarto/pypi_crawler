{
  "info": {
    "author": "mik3y",
    "author_email": "opensource@hoho.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# django-spicy-id\n\nA drop-in replacement for Django's `AutoField` that gives you \"Stripe-style\" self-identifying string object IDs, like `user_1234`.\n\n**Status:** Experimental! No warranty. See `LICENSE.txt`.\n\n[![PyPI version](https://badge.fury.io/py/django-spicy-id.svg)](https://badge.fury.io/py/django-spicy-id)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/django-spicy-id.svg)](https://pypi.python.org/pypi/django-spicy-id/) ![Test status](https://github.com/mik3y/django-spicy-id/actions/workflows/test.yml/badge.svg)\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [What is a \"spicy\" id?](#what-is-a-spicy-id)\n- [_Why_ use spicy ids?](#_why_-use-spicy-ids)\n- [Installation](#installation)\n  - [Requirements](#requirements)\n  - [Instructions](#instructions)\n- [Usage](#usage)\n  - [Field types](#field-types)\n  - [Required Parameters](#required-parameters)\n  - [Optional Parameters](#optional-parameters)\n  - [Field Attributes](#field-attributes)\n    - [`.validate_string(strval)`](#validate_stringstrval)\n    - [`.re`](#re)\n  - [Errors](#errors)\n    - [`django.db.utils.ProgrammingError`](#djangodbutilsprogrammingerror)\n    - [`django_spicy_id.MalformedSpicyIdError`](#django_spicy_idmalformedspicyiderror)\n- [Tips and tricks](#tips-and-tricks)\n  - [Don't change field configuration](#dont-change-field-configuration)\n- [Changelog](#changelog)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## What is a \"spicy\" id?\n\nIt's a made-up name (because I couldn't think of a better one) for a numeric primary keys type that is shown and manipulated as a string, prefixed with a constant value.\n\nHere are some examples. You can use this library to make your Django row IDs look like:\n\n- `user_1234`\n- `account-00000000deadbeef`\n- `bloop:1a2k3841x`\n\nAlthough you should always treat these values as opaque and _never_ decode or parse the string's contents elsewhere (see _Errors_), you can think of every spicy id as being composed of:\n\n```\n<prefix> <separator> <encoded_value>\n```\n\n- **`prefix`**: A fixed string value that will be the same for all IDs of this record type, forever.\n- **`separator`**: A configurable separator which, like `prefix`, is fixed forever; usually `_` (the default) or `-` (another popular choice).\n- **`encoded_value`**: The numeric portion of the id. This library supports using base 16 (hex) or base 62.\n\nImportantly, the underlying database value is still stored and retrieved as a _numeric type_, just like an `AutoField`, `SmallAutoField`, or `BigAutoField`.\n\n## _Why_ use spicy ids?\n\nBriefly: Because they're so much nicer for humans to work with.\n\n- **Readability:** While row-level primary keys are typically treated as \"anonymous\" (as in \"not something anyone should have to care about\"), the fact is these values still _show up_ in lots of situations: They're in URLs, dumped in logfiles, shown in queries, and so on. In these situations, it's just plain faster to understand \"what am I looking at\" when the identifier itself tells you its type.\n- **Conflict and accident prevention:** When your systems require you to pass around typed identifiers like `acct_1234` and `invoice_5432beef`, certain kinds of accidents become impossible. For example, `HTTP DELETE /users/invoice_21` fails fast.\n- **Future-proofing:** Adopting spicy IDs means your systems and APIs are developed to accept a basically-opaque string as an ID. While their underlying type is numeric, in very advanced situations you may be able to migrate to a different type or datastore \"behind\" the abstraction the string ID creates.\n\nFor a more detailed look at this pattern, see Stripe's [\"Object IDs: Designing APIs for Humans\"](https://dev.to/stripe/designing-apis-for-humans-object-ids-3o5a).\n\n## Installation\n\n### Requirements\n\nThis package supports and is tested against the latest patch versions of:\n\n- **Python:** 3.8, 3.9, 3.10, 3.11\n- **Django:** 2.2, 3.1, 4.1\n- **MySQL:** 5.7, 8.0\n- **PostgreSQL:** 9.5, 10, 11, 12\n- **SQLite:** 3.9.0+\n\nAll database backends are tested with the latest versions of their drivers. SQLite is also tested on GitHub Actions' latest macOS virtual environment.\n\n### Instructions\n\n```\npip install django_spicy_id\n```\n\n## Usage\n\nGiven the following example model:\n\n```py\nfrom django.db import models\nfrom django_spicy_id import SpicyBigAutoField\n\nclass User(models.model):\n    id = SpicyBigAutoField(primary_key=True, prefix='usr')\n```\n\nExample usage:\n\n```py\n>>> u = models.User.objects.create()\n>>> u.id\n'usr_1'\n>>> u2 = models.User.objects.create(id=123456789)\n>>> u2.id\n'usr_8M0kX'\n>>> found_user = models.User.objects.filter(id='usr_8M0kX').first()\n>>> found_user == u2\nTrue\n```\n\n### Field types\n\n- `SpicyBigAutoField`: A spicy id which is backed by a `BigAutoField` (i.e. 64-bit int) column.\n- `SpicyAutoField`: A spicy id which is backed by a `AutoField` (i.e. 32-bit int) column.\n- `SpicySmallAutoField`: A spicy id which is backed by a `SmallAutoField` (i.e. 16-bit int) column.\n\n### Required Parameters\n\nThe following parameters are required at declaration:\n\n* **`prefix`**: The prefix to use in the encoded form. Typically this is a short, descriptive string, like `user` or `acct` and similar. **Note:** This library does not ensure the string you provide is unique within your project. You should ensure of that.\n\n### Optional Parameters\n\nIn addition to all parameters you can provide a normal `AutoField`, each of the field types above supports the following additional optional paramters:\n\n- **`encoding`**: What numeric encoding scheme to use. One of `django_spicy_id.ENCODING_BASE_62` (default), `django_spicy_id.ENCODING_BASE_58`, or `django_spicy_id.ENCODING_HEX`.\n- **`sep`**: The separator character. Defaults to `_`. Can be any string.\n- **`pad`**: Whether the encoded portion of the id should be zero-padded so that all values are the same string length. Either `False` (default) or `True`.\n  - Example without padding: `user_8M0kX`\n  - Example with padding: `user_0000008M0kX`\n- **`randomize`**: If `True`, the default value of a new record will be generated randomly using `secrets.randbelow()`. If `False` (the default), works just like a normal `AutoField` i.e. the default value comes from the database upon `INSERT`.\n  - When `randomize` is set, an error will be thrown if `default` is also set, since `randomize` is essentially a special and built-in `default` function.\n  - If you use this feature, be aware of its hazards: \n      - The generated ID may conflict with an existing row, with probability [determined by the birthday problem](https://en.wikipedia.org/wiki/Birthday_problem#Probability_table) (i.e. the column size and the size of the existing dataset).\n      - A conflict can also arise if two processes generate the same value for `secrets.randbelow()` (i.e. if system entropy is identical or misconfigured for some reason),\n\n### Field Attributes\n\nThe following attributes are available on the field once constructed\n\n#### `.validate_string(strval)`\n\nChecks whether `strval` is a legal value for the field, throwing `django_spicy_id.errors.MalformedSpicyIdError` if not.\n\n#### `.re`\n\nA compiled regex which can be used to validate a string, e.g. in Django `urlpatterns`.\n\n### Errors\n\n#### `django.db.utils.ProgrammingError`\n\nThrown when attempting to access or query this field using an illegal value. Some examples of this situation:\n\n* Providing a spicy id with the wrong prefix or separator (e.g `id=\"acct_1234\"` where `id=\"invoice_1234\"` is expected).\n* Providing a string with illegal characters in it (i.e. where the encoded part isn't decodable)\n* Providing an unpadded value when padding is enabled.\n* Providing a padded value when padded is disabled.\n\nYou can consider these situations analogous to providing a wrongly-typed object to any other field type, for example `SomeModel.objects.filter(id=object())`.\n\nYou can avoid this situation by validating inputs first. See _Field Attributes_.\n\n**ðŸš¨ Warning:** Regardless of field configuration, the string value of a spicy id must **always** be treated as an _exact value_. Just like you would never modify the contents of a `UUID4`, a spicy id string must never be translated, re-interpreted, or changed by a client.\n\n#### `django_spicy_id.MalformedSpicyIdError`\n\nA subclass of `ValueError`, raised by `.validate_string(strval)` when the provided string is invalid for the field's configuration.\n\n## Tips and tricks\n\n### Don't change field configuration\n\nChanging `prefix`, `sep`, `pad`, or `encoding` after you have started using the field should be considered a _breaking change_ for any external callers.\n\nAlthough the stored row IDs are never changed, any spicy IDs generated previously, with a different encoding configuration, may now be invalid or (potentially catastrophically) resolve to a different object.\n\nFor just one example, `user_10` would naturally refer to a different numeric row id if parsed as `hex` versus `base62` or `base58`. You should avoid changing the field configuration.\n\n## Changelog\n\nSee [`CHANGELOG.md`](https://github.com/mik3y/django-spicy-id/blob/main/CHANGELOG.md) for a summary of changes.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mik3y/django-spicy-id",
    "keywords": "django timeseries",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-spicy-id",
    "package_url": "https://pypi.org/project/django-spicy-id/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-spicy-id/",
    "project_urls": {
      "Homepage": "https://github.com/mik3y/django-spicy-id"
    },
    "release_url": "https://pypi.org/project/django-spicy-id/0.3.1/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.8.1",
    "summary": "Fancy ID fields for django models.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16104525,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afbc56f899cfbaa493737b1c9d10a7a3133bda86ce6d4b7fb8b7c85322c8d5c5",
          "md5": "fd3592c0110e3b710fe1bcfab64fc3bc",
          "sha256": "fac2bddca1d58602b3622fb37d485ef665d2bd827be2b60e5f6815bb70182086"
        },
        "downloads": -1,
        "filename": "django_spicy_id-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd3592c0110e3b710fe1bcfab64fc3bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 8606,
        "upload_time": "2022-12-14T06:24:15",
        "upload_time_iso_8601": "2022-12-14T06:24:15.858192Z",
        "url": "https://files.pythonhosted.org/packages/af/bc/56f899cfbaa493737b1c9d10a7a3133bda86ce6d4b7fb8b7c85322c8d5c5/django_spicy_id-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92b78fa85b31e16dc6e0c65d43c138cfcece8126c54d55555020a3f871d6bee6",
          "md5": "8385b0518755f902f8b1852652e0712a",
          "sha256": "795c735032c2674115f017c4b11352cf6c004398de77b098b078669ddb8b6449"
        },
        "downloads": -1,
        "filename": "django-spicy-id-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8385b0518755f902f8b1852652e0712a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 8885,
        "upload_time": "2022-12-14T06:21:50",
        "upload_time_iso_8601": "2022-12-14T06:21:50.536881Z",
        "url": "https://files.pythonhosted.org/packages/92/b7/8fa85b31e16dc6e0c65d43c138cfcece8126c54d55555020a3f871d6bee6/django-spicy-id-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "729c65008aeaf4cfba76894d3c46ecc8b229f67fc2c5d9e9c177147e3b98e2d9",
          "md5": "792c0e2c31534660dc0376dabd7d1039",
          "sha256": "51b985547aff5e1bf9341aea22a10fe37d74ddcff48264d4196c1f409d84beeb"
        },
        "downloads": -1,
        "filename": "django_spicy_id-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "792c0e2c31534660dc0376dabd7d1039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 8669,
        "upload_time": "2022-12-14T06:30:17",
        "upload_time_iso_8601": "2022-12-14T06:30:17.978181Z",
        "url": "https://files.pythonhosted.org/packages/72/9c/65008aeaf4cfba76894d3c46ecc8b229f67fc2c5d9e9c177147e3b98e2d9/django_spicy_id-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b63394ee7ab3612f5014eb3d105e28555adc07e54057b209cfc1334e695759",
          "md5": "8af7b66055c32762a27b70d028a567ea",
          "sha256": "33ebd9226eb5894f6c684be863e3ccdf2171721f4964bdb315bbed46b5e7e661"
        },
        "downloads": -1,
        "filename": "django-spicy-id-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8af7b66055c32762a27b70d028a567ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 8827,
        "upload_time": "2022-12-14T06:30:19",
        "upload_time_iso_8601": "2022-12-14T06:30:19.148324Z",
        "url": "https://files.pythonhosted.org/packages/c5/b6/3394ee7ab3612f5014eb3d105e28555adc07e54057b209cfc1334e695759/django-spicy-id-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406da5c81d7f22d8be7fc276d4776a3e529fc0e54b5ddb0aa7d2cddb0e860aa9",
          "md5": "4d7ca52e9188288a1ac77c88dcf06ffd",
          "sha256": "a525a02837d91fe71ea2c6a1a3924efb5f8bac4a2c609ba4a211921a6068bcda"
        },
        "downloads": -1,
        "filename": "django_spicy_id-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d7ca52e9188288a1ac77c88dcf06ffd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 10175,
        "upload_time": "2022-12-14T20:34:24",
        "upload_time_iso_8601": "2022-12-14T20:34:24.459116Z",
        "url": "https://files.pythonhosted.org/packages/40/6d/a5c81d7f22d8be7fc276d4776a3e529fc0e54b5ddb0aa7d2cddb0e860aa9/django_spicy_id-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a5e0f5db29f203c06d3a03de9034eb18f8b52f7f2b8dc608d01a3b1a9d029c8",
          "md5": "40fb131f1521ff245fcb98d0ac071b54",
          "sha256": "884e07ba832fa9294ff157e3d28a55490f9cb49a38a12c9da9871c7e903b3ada"
        },
        "downloads": -1,
        "filename": "django-spicy-id-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40fb131f1521ff245fcb98d0ac071b54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 10267,
        "upload_time": "2022-12-14T20:34:25",
        "upload_time_iso_8601": "2022-12-14T20:34:25.593957Z",
        "url": "https://files.pythonhosted.org/packages/7a/5e/0f5db29f203c06d3a03de9034eb18f8b52f7f2b8dc608d01a3b1a9d029c8/django-spicy-id-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d09aa9f0672d80917fc4396265618fd3c40f95af0dc29255f5d610ec8991483d",
          "md5": "feb531f3c55f35a8d7f5f90bf28b49be",
          "sha256": "fb6f270ec97ccad88854fbe3003fc5ea8cee9365788738266fefc09ecba84bdc"
        },
        "downloads": -1,
        "filename": "django_spicy_id-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feb531f3c55f35a8d7f5f90bf28b49be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 10176,
        "upload_time": "2022-12-14T20:51:37",
        "upload_time_iso_8601": "2022-12-14T20:51:37.612168Z",
        "url": "https://files.pythonhosted.org/packages/d0/9a/a9f0672d80917fc4396265618fd3c40f95af0dc29255f5d610ec8991483d/django_spicy_id-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46d762428a397d8a385c84e245061a2676b7a18b7b7eb51b5aa3a70bb5302ad",
          "md5": "005b9dc1befa97a2eca5312b633457cc",
          "sha256": "453aea31d22470fa490c0356f46b39f90ad6d7f8cc0bf25d74cf1a9681b50195"
        },
        "downloads": -1,
        "filename": "django-spicy-id-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "005b9dc1befa97a2eca5312b633457cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 10249,
        "upload_time": "2022-12-14T20:51:38",
        "upload_time_iso_8601": "2022-12-14T20:51:38.873570Z",
        "url": "https://files.pythonhosted.org/packages/a4/6d/762428a397d8a385c84e245061a2676b7a18b7b7eb51b5aa3a70bb5302ad/django-spicy-id-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d09aa9f0672d80917fc4396265618fd3c40f95af0dc29255f5d610ec8991483d",
        "md5": "feb531f3c55f35a8d7f5f90bf28b49be",
        "sha256": "fb6f270ec97ccad88854fbe3003fc5ea8cee9365788738266fefc09ecba84bdc"
      },
      "downloads": -1,
      "filename": "django_spicy_id-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "feb531f3c55f35a8d7f5f90bf28b49be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1",
      "size": 10176,
      "upload_time": "2022-12-14T20:51:37",
      "upload_time_iso_8601": "2022-12-14T20:51:37.612168Z",
      "url": "https://files.pythonhosted.org/packages/d0/9a/a9f0672d80917fc4396265618fd3c40f95af0dc29255f5d610ec8991483d/django_spicy_id-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a46d762428a397d8a385c84e245061a2676b7a18b7b7eb51b5aa3a70bb5302ad",
        "md5": "005b9dc1befa97a2eca5312b633457cc",
        "sha256": "453aea31d22470fa490c0356f46b39f90ad6d7f8cc0bf25d74cf1a9681b50195"
      },
      "downloads": -1,
      "filename": "django-spicy-id-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "005b9dc1befa97a2eca5312b633457cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1",
      "size": 10249,
      "upload_time": "2022-12-14T20:51:38",
      "upload_time_iso_8601": "2022-12-14T20:51:38.873570Z",
      "url": "https://files.pythonhosted.org/packages/a4/6d/762428a397d8a385c84e245061a2676b7a18b7b7eb51b5aa3a70bb5302ad/django-spicy-id-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}