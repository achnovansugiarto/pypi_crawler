{
  "info": {
    "author": "Ivan Y. Fernandez-Rosales",
    "author_email": "ifdezr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "# eLearning API Documentation\n\neLearning is an API dedicated to managing the backend infrastructure of an e-learning system. eLearning is totally developed with Python 3.6+ and the data storing is a MongoDB implementation through the third-party API pymongo 3.9.0. \n\n## Installation\n\nAssuming, Python 3 (>=3.6) is already installed and a [MongoDB](https://www.mongodb.com/) Cluster connection is working, eLearning API needs the next requirements:\n\n1.\t[pymongo 3.9.0](https://api.mongodb.com/python/current/). Or, it can be easily installed with:\n\n\t```\n\t$ python -m pip install pymongo\n\t```\n\n2.\t[dnspython](https://pypi.org/project/dnspython/). Or, it can be easily installed with:\n\n\t```\n\t$ python -m pip install pymongo[srv]\n\t```\n\n3.\t[pip](https://pip.pypa.io/en/stable/installing/). Or, it can be easily installed with:\n\n\t```\n\t$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\t$ python get-pip.py\n\t```\n\n4. Install with:\n\n   ```\n   $ pip install eLearning\n   ```\n\n5. Import and hello-world:\n\n\t```\n\timport eLearning as el\n\telc = el.eLearning_connector()\n\tprint(elc.client)\n\tprint(elc.db)\n\tprint(elc.db.list_collection_names())\n\telc._tabula_rasa()\n\telc.insert_professor( 'Paul ErdÅ‘s', 'erdos@princeton.edu' )\n\telc.insert_student( 'Terence Tao', 'tao@princeton.edu' )\n\t```\n\n___\n\n## Testing\n\nTo test the API, please try the next lines at your Python command-line interface:\n\n\timport eLearning as el\n\tel.eLearning_test.run()\n___\n\n\n## eLearning API documentation\n\n### Connector level operations\n\n\n_class **eLearning_connector** ( )_\n\n   An eLearning_connector is the object used to communicate with MongoDB cluster and databases. eLearning_connector object has the next attributes:\n\n   * eLearning_connector.**client** : informative dictionary about the connector.\n   * eLearning_connector.**db** : informative dictionary about the database.\n   * eLearning_connector.**course_collection** : MongoDB collection object with the courses information.\n   * eLearning_connector.**lesson_collection** : MongoDB collection object with the lessons information.\n   * eLearning_connector.**question_collection** : MongoDB collection object with the questions information.\n   * eLearning_connector.**binnacle_collection** : MongoDB collection object with the binnacles information.\n   * eLearning_connector.**record_collection** : MongoDB collection object with the records information.\n   * eLearning_connector.**user_collection** : MongoDB collection object with the users information.\n___\n\n_eLearning_connector.**insert_professor** ( fullname, email )_\n\n> Return the tuple `('200 - OK',\"\")` if the professor-user with given _fullname_ and _email_ was inserted successfully in the database. Otherwise, return `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_connector.**insert_student** ( fullname, email )_\n\n> Return the tuple `('200 - OK',\"\")` if the student-user with given _fullname_ and _email_ was inserted successfully in the database. Otherwise, return `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_connector.**delete_user_by_email** ( email )_\n\n> Return the tuple `('200 - OK',\"\")` if the user with given _email_ was deleted successfully from the database. Otherwise, return `('409 - Conflict',\"Deletion error.\")`.\n\n\n_eLearning_connector.**get_user_by_email** ( email )_\n\n> Return a _class **eLearning_professor**_ instance if the given _email_ results of a professor-user. Return a _class **eLearning_student**_ instance if the given _email_ results of a student-user. Otherwise, return `None`.\n\n\n_eLearning_connector.**list_professors** ()_\n\n> Return a Python _list_ object with all existing professor-user documents, each document is arranged into a Python _dict_ object. If there are not professor-users in database, an empty list is returned.\n\n\n_eLearning_connector.**list_students** ()_\n\n> Return a Python _list_ object with all existing student-user documents, each document is arranged into a Python _dict_ object. If there are not student-users in database, an empty list is returned.\n\n\n_eLearning_connector.**list_courses** ()_\n\n> Return a Python _list_ object with all existing course documents, each document is arranged into a Python _dict_ object. If there are not courses in database, an empty list is returned.\n\n\n_eLearning_connector.**list_lessons** ( parent_course_code )_\n\n> Return a Python _list_ object with all associated lesson documents to a given _parent_course_code_, each document is arranged into a Python _dict_ object. If there are not such lessons in database, an empty list is returned.\n\n\n_eLearning_connector.**list_questions** ( parent_lesson_code )_\n\n> Return a Python _list_ object with all associated question documents to a given _parent_lesson_code_, each document is arranged into a Python _dict_ object. If there are not such questions in database, an empty list is returned.\n___\n\n\n### User level operations\n\n\n_class **eLearning_professor** ( )_\n\n   An eLearning_professor instance corresponds to the valid professor-users' attributes and methods:\n\n   * eLearning_professor.**fullname** :`<str>` Fullname of the user.\n   * eLearning_professor.**email** : `<str>` e-mail address of the user.\n   * eLearning_professor.**role** : `<str>` it always set as \"professor\".\n___\n\n_eLearning_professor.**create_course** ( title, code, description=`None`, required_course_code=`None` )_\n\n> Parameters :\n> * _title_: `<str>` Customized title for the course.\n> * _code_: `<str>` Customized code for the course.\n> * _description_: `<str>` Description of the course.\n> * _required_course_code_: `<str>` Code of required approved-course. \n\n> Return the tuple `('200 - OK',\"\")` if the course with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Course's code already exists.\")` , `('404 - Not Found',\"Required-course's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**create_lesson** ( title, code, content, parent_course_code, approval_score=`1.0`, required_lesson_code=`None` )_\n\n> Parameters :\n> * _title_: `<str>` Customized title for the lesson.\n> * _code_: `<str>` Customized code for the lesson.\n> * _content_: `<str>` Description of the lesson.\n> * _correct_answers_: `<list>` List of the correct answer labels (`<str>`).\n> * _parent_course_code_: `<str>` Code of the parent-course.\n> * _approval_score_: `<float>` Floating number between `0.0` (minimal score) and `1.0` (maximal score).\n> * _required_lesson_code_: `<str>` Code of required approved-lesson. \n\n> Return the tuple `('200 - OK',\"\")` if the lesson with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Lesson's code already exists.\")` , `('404 - Not Found',\"Required-lesson's code not found.\")` , `('404 - Not Found',\"Parent-course's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**create_question** ( code, mode, content, correct_answers, parent_lesson_code )_\n\n> Parameters :\n> * _code_: `<str>` Customized code for the question.\n> * _mode_: `<str>` \"Bool\",\"MC1A\",\"MCMA\\+\",\"MCMA\\*\" only.\n> * _content_: `<str>` Description of the question.\n> * _correct_answers_: `<list>` List of option labels.\n> * _parent_lesson_code_: `<str>` Code of the parent-course.\n\n> Return the tuple `('200 - OK',\"\")` if the question with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Invalid question mode.\")` , `('400 - Bad Request',\"Answers have to be a list of strings.\")`, `('404 - Not Found',\"Parent-lesson's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**list_courses** ( )_\n\n> Return the Python object _list_ with all current courses. \n\n\n_eLearning_professor.**read_course** ( code, full=`False` )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n> * _full_: `<bool>` `False` or `True`.\n\n> Return the Python object _dict_ with the given course attributes at creation time. Moreover, if _full_ is set to `True`, the information of all subscribed lessons and questions will be included.\n\n\n_eLearning_professor.**read_lesson** ( code, full=`False` )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n> * _full_: `<bool>` `False` or `True`.\n\n> Return the Python object _dict_ with the given lesson attributes at creation time. Moreover, if _full_ is set to `True`, the information of all subscribed questions will be included.\n\n\n_eLearning_professor.**read_question** ( code )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n\n> Return the Python object _dict_ with the given question attributes at creation time.\n\n\n_eLearning_professor.**update_course** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given course.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**update_lesson** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given lesson.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**update_question** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given question.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**delete_course** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n\n> Return an integer with the count of deleted objects.\n\n\n_eLearning_professor.**delete_lesson** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n\n> Return an integer with the count of deleted objects.\n\n\n_eLearning_professor.**delete_question** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n\n> Return an integer with the count of deleted objects.\n___\n\n\n_class **eLearning_student** ( )_\n\n   An eLearning_student instance corresponds to the valid student-users' attributes and methods:\n\n   * eLearning_student.**fullname** :`<str>` Fullname of the user.\n   * eLearning_student.**email** : `<str>` e-mail address of the user.\n   * eLearning_student.**role** : `<str>` it always set as \"student\".\n   * eLearning_student.**score** : `<float>` Main score.\n___\n\n_eLearning_student.**get_record_summary** ( )_\n\n> Return a Python object _list_ with informative _dict_ about the type, code, status, score and datetime of all courses and lessons taken by the student.\n\n\n_eLearning_student.**list_courses_and_availability** ( )_\n\n> Return a Python object _list_ with all current courses. Every course is represented by an informative _dict_, where the key `'available'` indicate with `True`, whether the course is available for the student or with `False` otherwise.\n\n\n _eLearning_student.**list_lessons_and_availability** ( parent_course_code )_\n\n> Parameters :\n> * parent_course_code: `<str>` Code of the parent-course.\n\n> Return a Python object _list_ with all current lessons. Every lesson is represented by an informative _dict_, where the key `'available'` indicate with `True`, whether the lesson is available for the student or with `False` otherwise.\n\n\n_eLearning_student.**get_full_lesson** ( code )_\n\n> Parameters :\n> * code: `<str>` Code of the claimed lesson.\n\n> Return a Python object _dict_ with the claimed lesson information and its subscrited questions.\n\n\n_eLearning_student.**take_lesson** ( code, answers_list )_\n\n> Parameters :\n> * code: `<str>` Code of the taken lesson.\n> * answer_list: `<list>` List with lists of the correct answers labels; _e.g._ `[['A','C'],['A'],[True]]`.\n\n> Return a Python object _dict_ resuming the score, status of the taken lesson and the parent-course status whether was approved.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ivanfdezr/DACODES-CHALLENGE",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eLearning",
    "package_url": "https://pypi.org/project/eLearning/",
    "platform": "",
    "project_url": "https://pypi.org/project/eLearning/",
    "project_urls": {
      "Homepage": "https://github.com/Ivanfdezr/DACODES-CHALLENGE"
    },
    "release_url": "https://pypi.org/project/eLearning/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "eLearning is an API dedicated to managing the backend infrastructure of an e-learning system.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6276716,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "404a0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb",
          "md5": "badaac82e34df2e8a2f17aedb496a5b0",
          "sha256": "b302c02c5c4a4f0cdcfd0b9d778609492cd284c89d10c69313a3c250b6c08e76"
        },
        "downloads": -1,
        "filename": "eLearning-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "badaac82e34df2e8a2f17aedb496a5b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22279,
        "upload_time": "2019-12-11T02:46:09",
        "upload_time_iso_8601": "2019-12-11T02:46:09.565946Z",
        "url": "https://files.pythonhosted.org/packages/40/4a/0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb/eLearning-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b28f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7",
          "md5": "25dcf9ecbd0f1a2dededc6217b96183a",
          "sha256": "3e033cc9bf1c04c277d61cb265f6e81a3fb8f832db2f97fac4fb378c9c42fd55"
        },
        "downloads": -1,
        "filename": "eLearning-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "25dcf9ecbd0f1a2dededc6217b96183a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9159,
        "upload_time": "2019-12-11T02:46:12",
        "upload_time_iso_8601": "2019-12-11T02:46:12.006924Z",
        "url": "https://files.pythonhosted.org/packages/a7/b2/8f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7/eLearning-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "404a0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb",
        "md5": "badaac82e34df2e8a2f17aedb496a5b0",
        "sha256": "b302c02c5c4a4f0cdcfd0b9d778609492cd284c89d10c69313a3c250b6c08e76"
      },
      "downloads": -1,
      "filename": "eLearning-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "badaac82e34df2e8a2f17aedb496a5b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22279,
      "upload_time": "2019-12-11T02:46:09",
      "upload_time_iso_8601": "2019-12-11T02:46:09.565946Z",
      "url": "https://files.pythonhosted.org/packages/40/4a/0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb/eLearning-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7b28f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7",
        "md5": "25dcf9ecbd0f1a2dededc6217b96183a",
        "sha256": "3e033cc9bf1c04c277d61cb265f6e81a3fb8f832db2f97fac4fb378c9c42fd55"
      },
      "downloads": -1,
      "filename": "eLearning-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "25dcf9ecbd0f1a2dededc6217b96183a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9159,
      "upload_time": "2019-12-11T02:46:12",
      "upload_time_iso_8601": "2019-12-11T02:46:12.006924Z",
      "url": "https://files.pythonhosted.org/packages/a7/b2/8f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7/eLearning-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}