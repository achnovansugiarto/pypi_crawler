{
  "info": {
    "author": "Manodeep Sinha",
    "author_email": "manodeep@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "|logo|\n\n|Release| |PyPI| |MIT licensed| |Travis Build| |GitHub CI| |RTD| |Issues|\n\n|CoreInfra| |FAIRSoft|\n\n|Paper I| |Paper II|\n\n\nDescription\n===========\n\nThis repo contains a suite of codes to calculate correlation functions and\nother clustering statistics for **simulated** galaxies in a cosmological box (co-moving XYZ)\nand on **observed** galaxies with on-sky positions (RA, DEC, CZ). Read the\ndocumentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_.\n\nWhy Should You Use it\n======================\n\n1. **Fast** Theory pair-counting is **7x** faster than ``SciPy cKDTree``, and at least **2x** faster than all existing public codes.\n2. **OpenMP Parallel** All pair-counting codes can be done in parallel (with strong scaling efficiency >~ 95% up to 10 cores)\n3. **Python Extensions** Python extensions allow you to do the compute-heavy bits using C while retaining all of the user-friendliness of Python.\n4. **Weights** All correlation functions now support *arbitrary, user-specified* weights for individual points\n5. **Modular** The code is written in a modular fashion and is easily extensible to compute arbitrary clustering statistics.\n6. **Future-proof** As we get access to newer instruction-sets, the codes will get updated to use the latest and greatest CPU features.\n\n*If you use the codes for your analysis, please star this repo -- that helps us keep track of the number of users.*\n\nBenchmark against Existing Codes\n================================\n\nPlease see this\n`gist <https://gist.github.com/manodeep/cffd9a5d77510e43ccf0>`__ for\nsome benchmarks with current codes. If you have a pair-counter that you would like to compare, please add in a corresponding function and update the timings.\n\nInstallation\n============\n\nPre-requisites\n--------------\n\n1. ``make >= 3.80``\n2. OpenMP capable compiler like ``icc``, ``gcc>=4.6`` or ``clang >= 3.7``. If\n   not available, please disable ``USE_OMP`` option option in\n   ``theory.options`` and ``mocks.options``. On a HPC cluster, consult the cluster\n   documentation for how to load a compiler (often ``module load gcc`` or similar).\n   If you are using Corrfunc with Anaconda Python, then ``conda install gcc`` (MAC/linux)\n   should work.  On MAC, ``(sudo) port install gcc5`` is also an option.\n3. ``gsl >= 2.4``.  On an HPC cluster, consult the cluster documentation\n   (often ``module load gsl`` will work).  With Anaconda Python, use\n   ``conda install -c conda-forge gsl`` (MAC/linux).  On MAC, you can use\n   ``(sudo) port install gsl`` (MAC) if necessary.\n4. ``python >= 2.7`` or ``python>=3.4`` for compiling the CPython extensions.\n5. ``numpy>=1.7`` for compiling the CPython extensions.\n\nMethod 1: Source Installation (Recommended)\n-------------------------------------------\n\n::\n\n    $ git clone https://github.com/manodeep/Corrfunc.git\n    $ cd Corrfunc\n    $ make\n    $ make install\n    $ python -m pip install . [--user]\n    \n    $ make tests  # run the C tests\n    $ python -m pip install pytest\n    $ python -m pytest  # run the Python tests\n\nAssuming you have ``gcc`` in your ``PATH``, ``make`` and\n``make install`` should compile and install the C libraries + Python\nextensions within the source directory. If you would like to install the\nCPython extensions in your environment, then\n``python -m pip install . [--user]`` should be sufficient. If you are primarily\ninterested in the Python interface, you can condense all of the steps\nby using ``python -m pip install . [--user] --install-option=\"CC=yourcompiler\"``\nafter ``git clone [...]`` and ``cd Corrfunc``.\n\nCompilation Notes\n~~~~~~~~~~~~~~~~~\n\n- If Python and/or numpy are not available, then the CPython extensions will not be compiled.\n\n- ``make install`` simply copies files into the ``lib/bin/include`` sub-directories. You do not need ``root`` permissions\n\n- Default compiler on MAC is set to ``clang``, if you want to specify a different compiler, you will have to call ``make CC=yourcompiler``,  ``make install CC=yourcompiler``, ``make tests CC=yourcompiler`` etc. If you want to permanently change the default compiler, then please edit the `common.mk <common.mk>`__ file in the base directory.\n\n- If you are directly using ``python -m pip install . [--user] --install-option=\"CC=yourcompiler\"``, please run a ``make distclean`` beforehand (especially if switching compilers)\n\n- Please note that Corrfunc is compiling with optimizations for the architecture\n  it is compiled on.  That is, it uses ``gcc -march=native`` or similar.\n  For this reason, please try to compile Corrfunc on the architecture it will\n  be run on (usually this is only a concern in heterogeneous compute environments,\n  like an HPC cluster with multiple node types).  In many cases, you can\n  compile on a more capable architecture (e.g. with AVX-512 support) then\n  run on a less capable architecture (e.g. with only AVX2), because the\n  runtime dispatch will select the appropriate kernel.  But the non-kernel\n  elements of Corrfunc may emit AVX-512 instructions due to ``-march=native``.\n  If an ``Illegal instruction`` error occurs, then you'll need to recompile\n  on the target architecture.\n\nInstallation notes\n~~~~~~~~~~~~~~~~~~\n\nIf compilation went smoothly, please run ``make tests`` to ensure the\ncode is working correctly. Depending on the hardware and compilation\noptions, the tests might take more than a few minutes. *Note that the\ntests are exhaustive and not traditional unit tests*.\n\nFor Python tests, please run ``python -m pip install pytest`` and ``python -m pytest``\nfrom the Corrfunc root dir.\n\nWhile we have tried to ensure that the package compiles and runs out of\nthe box, cross-platform compatibility turns out to be incredibly hard.\nIf you run into any issues during compilation and you have all of the\npre-requisites, please see the `FAQ <FAQ>`__ or `email\nthe Corrfunc mailing list <mailto:corrfunc@googlegroups.com>`__. Also, feel free to create a new issue\nwith the ``Installation`` label.\n\n\nMethod 2: pip installation\n--------------------------\n\nThe Python package is directly installable via ``python -m pip install Corrfunc``. However, in that case you will lose the ability to recompile the code.  This usually fine if you are only using the Python interface and are on a single machine, like a laptop.  For usage on a cluster or other environment with multiple CPU architectures, you may find it more useful to use the Source Installation method above in case you need to compile for a different architecture later.\n\nTesting a pip-installed Corrfunc\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can check that a pip-installed Corrfunc is working with:\n\n::\n\n   $ python -m pytest --pyargs Corrfunc\n\n\nThe pip installation does not include all of the test data contained in the main repo,\nsince it would total over 100 MB and the tests that generate on-the-fly data are similarly\nexhaustive.  pytest will mark tests where the data files are not availabe as \"skipped\".\nIf you would like to run the data-based tests, please use the Source Installation method.\n\n\nOpenMP on OSX\n--------------\n\nAutomatically detecting OpenMP support from the compiler and the runtime is a\nbit tricky. If you run into any issues compiling (or running) with OpenMP,\nplease refer to the `FAQ <FAQ>`__ for potential solutions.\n\n\nClustering Measures on simulated galaxies\n=========================================\n\nInput data\n----------\n\nThe input galaxies (or any discrete distribution of points) are derived from a\nsimulation. For instance, the galaxies could be a result of an Halo Occupation\nDistribution (HOD) model, a Subhalo Abundance matching (SHAM) model, a\nSemi-Empirical model (SEM), or a Semi-Analytic model (SAM) etc. The input set of\npoints can also be the dark matter halos, or the dark matter particles from\na cosmological simulation. The input set of points are expected to have\npositions specified in Cartesian XYZ.\n\nTypes of available clustering statistics\n----------------------------------------\n\nAll codes that work on cosmological boxes with co-moving positions are\nlocated in the ``theory`` directory. The various clustering measures\nare:\n\n1. ``DD`` -- Measures auto/cross-correlations between two boxes.\n   The boxes do not need to be cubes.\n\n2. ``xi`` -- Measures 3-d auto-correlation in a cubic cosmological box.\n   Assumes PERIODIC boundary conditions.\n\n3. ``wp`` -- Measures auto 2-d point projected correlation function in a\n   cubic cosmological box. Assumes PERIODIC boundary conditions.\n\n4. ``DDrppi`` -- Measures the auto/cross correlation function between\n   two boxes. The boxes do not need to be cubes.\n\n5. ``DDsmu`` -- Measures the auto/cross correlation function between\n   two boxes. The boxes do not need to be cubes.\n\n6. ``vpf`` -- Measures the void probability function + counts-in-cells.\n\nClustering measures on observed galaxies\n========================================\n\nInput data\n----------\n\nThe input galaxies are typically observed galaxies coming from a large-scale\ngalaxy survey. In addition, simulated galaxies that have been projected onto the sky\n(i.e., where observational systematics have been incorporated and on-sky\npositions have been generated) can also be used. We generically refer to both\nthese kinds of galaxies as \"mocks\".\n\n\nThe input galaxies are expected to have positions specified in spherical\nco-ordinates with at least right ascension (RA) and declination (DEC).\nFor spatial correlation functions, an approximate \"co-moving\" distance\n(speed of light multiplied by redshift, CZ) is also required.\n\n\nTypes of available clustering statistics\n----------------------------------------\n\nAll codes that work on mock catalogs (RA, DEC, CZ) are located in the\n``mocks`` directory. The various clustering measures are:\n\n1. ``DDrppi_mocks`` -- The standard auto/cross correlation between two data\n   sets. The outputs, DD, DR and RR can be combined using ``wprp`` to\n   produce the Landy-Szalay estimator for `wp(rp)`.\n\n2. ``DDsmu_mocks`` -- The standard auto/cross correlation between two data\n   sets. The outputs, DD, DR and RR can be combined using the Python utility\n   ``convert_3d_counts_to_cf`` to produce the Landy-Szalay estimator for `xi(s, mu)`.\n\n3. ``DDtheta_mocks`` -- Computes angular correlation function between two data\n   sets. The outputs from ``DDtheta_mocks`` need to be combined with\n   ``wtheta`` to get the full `\\omega(\\theta)`\n\n4. ``vpf_mocks`` -- Computes the void probability function on mocks.\n\nScience options\n===============\n\nIf you plan to use the command-line, then you will have to specify the\ncode runtime options at compile-time. For theory routines, these options\nare in the file `theory.options <theory.options>`__ while for the mocks, these options are\nin file `mocks.options <mocks.options>`__.\n\n**Note** All options can be specified at\nruntime if you use the Python interface or the static libraries. Each one of\nthe following ``Makefile`` option has a corresponding entry for the runtime\nlibraries.\n\nTheory (in `theory.options <theory.options>`__)\n-------------------------------------------------\n\n1. ``PERIODIC`` (ignored in case of wp/xi) -- switches periodic boundary\n   conditions on/off. Enabled by default.\n\n2. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\n   bin. Can be a massive performance hit (~ 2.2x in case of wp).\n   Disabled by default.\n\nMocks (in `mocks.options <mocks.options>`__)\n----------------------------------------------\n\n1. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\n   bin for ``DDrppi_mocks``. Enabled by default.\n\n2. ``OUTPUT_THETAAVG`` -- switches on output of in each theta bin. Can\n   be extremely slow (~5x) depending on compiler, and CPU capabilities.\n   Disabled by default.\n\n3. ``LINK_IN_DEC`` -- creates binning in declination for ``DDtheta_mocks``. Please\n   check that for your desired limits ``\\theta``, this binning does not\n   produce incorrect results (due to numerical precision). Generally speaking,\n   if your ``\\thetamax`` (the max. ``\\theta`` to consider pairs within) is too\n   small (probaly less than 1 degree), then you should check with and without\n   this option. Errors are typically sub-percent level.\n\n4. ``LINK_IN_RA`` -- creates binning in RA once binning in DEC has been\n   enabled for ``DDtheta_mocks``. Same numerical issues as ``LINK_IN_DEC``\n\n5. ``FAST_ACOS`` -- Relevant only when ``OUTPUT_THETAAVG`` is enabled for\n   ``DDtheta_mocks``. Disabled by default. An ``arccos`` is required to\n   calculate ``<\\theta>``. In absence of vectorized ``arccos`` (intel compiler,\n   ``icc`` provides one via intel Short Vector Math Library), this calculation is extremely slow. However, we can approximate\n   ``arccos`` using polynomials (with `Remez Algorithm <https://en.wikipedia.org/wiki/Remez_algorithm>`_).\n   The approximations are taken from implementations released by `Geometric Tools <http://geometrictools.com/>`_.\n   Depending on the level of accuracy desired, this implementation of ``fast acos``\n   can be tweaked in the file `utils/fast_acos.h <utils/fast_acos.h>`__. An alternate, less\n   accurate implementation is already present in that file. Please check that the loss of\n   precision is not important for your use-case.\n\n6. ``COMOVING_DIST`` -- Currently there is no support in ``Corrfunc`` for different cosmologies. However, for the\n   mocks routines like, ``DDrppi_mocks`` and ``vpf_mocks``, cosmology parameters are required to convert between\n   redshift and co-moving distance. Both ``DDrppi_mocks`` and ``vpf_mocks`` expects to receive a ``redshift`` array\n   as input; however, with this option enabled, the ``redshift`` array will be assumed to contain already converted\n   co-moving distances. So, if you have redshifts and want to use an arbitrary cosmology, then convert the redshifts\n   into co-moving distances, enable this option, and pass the co-moving distance array into the routines.\n\nCommon Code options for both Mocks and Theory\n==============================================\n\n1. ``DOUBLE_PREC`` -- switches on calculations in double\n   precision. Calculations are performed in double precision when enabled. This\n   option is disabled by default in theory and enabled by default in the mocks\n   routines.\n\n2. ``USE_OMP`` -- uses OpenMP parallelization. Scaling is great for DD\n   (close to perfect scaling up to 12 threads in our tests) and okay (runtime\n   becomes constant ~6-8 threads in our tests) for ``DDrppi`` and ``wp``.\n   Enabled by default. The ``Makefile`` will compare the `CC` variable with\n   known OpenMP enabled compilers and set compile options accordingly.\n   Set in `common.mk <common.mk>`__ by default.\n\n3. ``ENABLE_MIN_SEP_OPT`` -- uses some further optimisations based on the\n   minimum separation between pairs of cells. Enabled by default.\n\n4. ``COPY_PARTICLES`` -- whether or not to create a copy of the particle\n   positions (and weights, if supplied). Enabled by default (copies of the\n   particle arrays **are** created)\n\n5. ``FAST_DIVIDE`` -- Disabled by default. Divisions are slow but required\n   ``DDrppi_mocks(r_p,\\pi)``, ``DDsmu_mocks(s, \\mu)`` and ``DD(s, \\mu)``.\n   Enabling this option, replaces the divisions with a reciprocal\n   followed by a Newton-Raphson. The code will run ~20% faster at the expense\n   of some numerical precision. Please check that the loss of precision is not\n   important for your use-case.\n\n*Optimization for your architecture*\n\n1. The values of ``bin_refine_factor`` and/or ``zbin_refine_factor`` in\n   the ``countpairs\\_\\*.c`` files control the cache-misses, and\n   consequently, the runtime. In trial-and-error methods, Manodeep has seen\n   any values larger than 3 are generally slower for theory routines but\n   can be faster for mocks. But some different\n   combination of 1/2 for ``(z)bin_refine_factor`` might be faster on\n   your platform.\n\n2. If you are using the angular correlation function and need ``thetaavg``,\n   you might benefit from using the INTEL MKL library. The vectorized\n   trigonometric functions provided by MKL can provide significant speedup.\n\n\nRunning the codes\n=================\n\nRead the documentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_.\n\n\nUsing the command-line interface\n--------------------------------\n\nNavigate to the correct directory. Make sure that the options, set in\neither `theory.options <theory.options>`__ or `mocks.options <mocks.options>`__ in the root directory are\nwhat you want. If not, edit those two files (and possibly\n`common.mk <common.mk>`__), and recompile. Then, you can use the command-line\nexecutables in each individual subdirectory corresponding to the\nclustering measure you are interested in. For example, if you want to\ncompute the full 3-D correlation function, ``\\xi(r)``, then run the\nexecutable ``theory/xi/xi``. If you run executables without any arguments,\nthe program will output a message with all the required arguments.\n\nCalling from C\n--------------\n\nLook under the `run_correlations.c <theory/examples/run_correlations.c>`__ and\n`run_correlations_mocks.c <mocks/examples/run_correlations_mocks.c>`__ to see examples of\ncalling the C API directly. If you run the executables,\n``run_correlations`` and ``run_correlations_mocks``, the output will\nalso show how to call the command-line interface for the various\nclustering measures.\n\nCalling from Python\n-------------------\n\nIf all went well, the codes can be directly called from ``python``.\nPlease see `call_correlation_functions.py <Corrfunc/call_correlation_functions.py>`__ and\n`call_correlation_functions_mocks.py <Corrfunc/call_correlation_functions_mocks.py>`__ for examples on how to\nuse the CPython extensions directly. Here are a few examples:\n\n.. code:: python\n\n    from __future__ import print_function\n    import os.path as path\n    import numpy as np\n    import Corrfunc\n    from Corrfunc.theory import wp\n\n    # Setup the problem for wp\n    boxsize = 500.0\n    pimax = 40.0\n    nthreads = 4\n\n    # Create a fake data-set.\n    Npts = 100000\n    x = np.float32(np.random.random(Npts))\n    y = np.float32(np.random.random(Npts))\n    z = np.float32(np.random.random(Npts))\n    x *= boxsize\n    y *= boxsize\n    z *= boxsize\n\n    # Setup the bins\n    rmin = 0.1\n    rmax = 20.0\n    nbins = 20\n\n    # Create the bins\n    rbins = np.logspace(np.log10(0.1), np.log10(rmax), nbins + 1)\n\n    # Call wp\n    wp_results = wp(boxsize, pimax, nthreads, rbins, x, y, z, verbose=True, output_rpavg=True)\n\n    # Print the results\n    print(\"#############################################################################\")\n    print(\"##       rmin           rmax            rpavg             wp            npairs\")\n    print(\"#############################################################################\")\n    print(wp_results)\n\n\nAuthor & Maintainers\n=====================\n\nCorrfunc was designed and implemented by `Manodeep Sinha <https://github.com/manodeep>`_,\nwith contributions from `Lehman Garrison <https://github.com/lgarrison>`_,\n`Nick Hand <https://github.com/nickhand>`_, and `Arnaud de Mattia <https://github.com/adematti>`_.\nCorrfunc is currently maintained by Manodeep Sinha and Lehman Garrison.\n\nCiting\n======\n\nIf you use ``Corrfunc`` for research, please cite using the MNRAS code paper with the following\nbibtex entry:\n\n::\n\n   @ARTICLE{2020MNRAS.491.3022S,\n       author = {{Sinha}, Manodeep and {Garrison}, Lehman H.},\n       title = \"{CORRFUNC - a suite of blazing fast correlation functions on\n       the CPU}\",\n       journal = {\\mnras},\n       keywords = {methods: numerical, galaxies: general, galaxies:\n       haloes, dark matter, large-scale structure of Universe, cosmology:\n       theory},\n       year = \"2020\",\n       month = \"Jan\",\n       volume = {491},\n       number = {2},\n       pages = {3022-3041},\n       doi = {10.1093/mnras/stz3157},\n       adsurl =\n       {https://ui.adsabs.harvard.edu/abs/2020MNRAS.491.3022S},\n       adsnote = {Provided by the SAO/NASA\n       Astrophysics Data System}\n   }\n\n\nIf you are using ``Corrfunc v2.3.0`` or later, **and** you benefit from the\nenhanced vectorised kernels, then please additionally cite this paper:\n\n::\n\n      @InProceedings{10.1007/978-981-13-7729-7_1,\n          author=\"Sinha, Manodeep and Garrison, Lehman\",\n          editor=\"Majumdar, Amit and Arora, Ritu\",\n          title=\"CORRFUNC: Blazing Fast Correlation Functions with AVX512F SIMD Intrinsics\",\n          booktitle=\"Software Challenges to Exascale Computing\",\n          year=\"2019\",\n          publisher=\"Springer Singapore\",\n          address=\"Singapore\",\n          pages=\"3--20\",\n          isbn=\"978-981-13-7729-7\",\n          url={https://doi.org/10.1007/978-981-13-7729-7_1}\n      }\n\n\n\nMailing list\n============\n\nIf you have questions or comments about the package, please do so on the\nmailing list: https://groups.google.com/forum/#!forum/corrfunc\n\nLICENSE\n=======\n\nCorrfunc is released under the MIT license. Basically, do what you want\nwith the code, including using it in commercial application.\n\nProject URLs\n============\n\n-  Documentation (http://corrfunc.rtfd.io/)\n-  Source Repository (https://github.com/manodeep/Corrfunc)\n-  Entry in the Astrophysical Source Code Library (ASCL) |ASCL|\n-  Zenodo Releases |Zenodo|\n\n.. |logo| image:: https://github.com/manodeep/Corrfunc/blob/master/corrfunc_logo.png\n    :target: https://github.com/manodeep/Corrfunc\n    :alt: Corrfunc logo\n.. |Release| image:: https://img.shields.io/github/release/manodeep/Corrfunc.svg\n   :target: https://github.com/manodeep/Corrfunc/releases/latest\n   :alt: Latest Release\n.. |PyPI| image:: https://img.shields.io/pypi/v/Corrfunc.svg\n   :target: https://pypi.python.org/pypi/Corrfunc\n   :alt: PyPI Release\n.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://raw.githubusercontent.com/manodeep/Corrfunc/master/LICENSE\n   :alt: MIT License\n.. |Travis Build| image:: https://travis-ci.com/manodeep/Corrfunc.svg?branch=master\n   :target: https://travis-ci.com/manodeep/Corrfunc\n   :alt: Build Status\n.. |GitHub CI| image:: https://github.com/manodeep/Corrfunc/workflows/GitHub%20CI/badge.svg\n   :target: https://github.com/manodeep/Corrfunc/actions\n   :alt: GitHub Actions Status\n.. |Issues| image:: https://img.shields.io/github/issues/manodeep/Corrfunc.svg\n   :target: https://github.com/manodeep/Corrfunc/issues\n   :alt: Open Issues\n.. |RTD| image:: https://readthedocs.org/projects/corrfunc/badge/?version=master\n   :target: http://corrfunc.readthedocs.io/en/master/?badge=master\n   :alt: Documentation Status\n\n.. |CoreInfra| image:: https://bestpractices.coreinfrastructure.org/projects/5037/badge\n   :target: https://bestpractices.coreinfrastructure.org/en/projects/5037\n   :alt: Core Infrastructure Best Practices Status\n\n.. |FAIRSoft| image:: https://img.shields.io/badge/fair--software.eu-%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F-green\n   :target: https://fair-software.eu\n   :alt: Fair Software (EU) Compliance\n\n.. |Paper I| image:: https://img.shields.io/badge/arXiv-1911.03545-%23B31B1B\n   :target: https://arxiv.org/abs/1911.03545\n   :alt: Corrfunc Paper I\n.. |Paper II| image:: https://img.shields.io/badge/arXiv-1911.08275-%23B31B1B\n   :target: https://arxiv.org/abs/1911.08275\n   :alt: Corrfunc Paper II\n\n.. |ASCL| image:: https://img.shields.io/badge/ascl-1703.003-blue.svg?colorB=262255\n   :target: http://ascl.net/1703.003\n   :alt: ascl:1703.003\n.. |Zenodo| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.3634195.svg\n   :target: https://doi.org/10.5281/zenodo.3634195",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/manodeep/Corrfunc/archive/Corrfunc-2.5.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manodeep/Corrfunc",
    "keywords": "correlation functions,simulations,surveys,galaxies",
    "license": "MIT",
    "maintainer": "Manodeep Sinha",
    "maintainer_email": "manodeep@gmail.com",
    "name": "Corrfunc",
    "package_url": "https://pypi.org/project/Corrfunc/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/Corrfunc/",
    "project_urls": {
      "Download": "https://github.com/manodeep/Corrfunc/archive/Corrfunc-2.5.0.tar.gz",
      "Homepage": "https://github.com/manodeep/Corrfunc"
    },
    "release_url": "https://pypi.org/project/Corrfunc/2.5.0/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
    "summary": "Blazing fast correlation functions on the CPU",
    "version": "2.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16196402,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b7de63bf224672af72a58a7f04490910cc83afeabe0f46006282168839e3b38",
          "md5": "20e4a0e0f78275308cdcae23b270e9c9",
          "sha256": "8955c9b0780d5913c968856ce3456316c3fc9fb1bccaa8fc92c92e123a53e8f2"
        },
        "downloads": -1,
        "filename": "Corrfunc-0.2.2.tar.gz",
        "has_sig": true,
        "md5_digest": "20e4a0e0f78275308cdcae23b270e9c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32341581,
        "upload_time": "2016-02-09T07:10:32",
        "upload_time_iso_8601": "2016-02-09T07:10:32.020718Z",
        "url": "https://files.pythonhosted.org/packages/9b/7d/e63bf224672af72a58a7f04490910cc83afeabe0f46006282168839e3b38/Corrfunc-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75907f6c891c4b19ebf23361566228d4c67c620c058d4a40506c11eb869c32b6",
          "md5": "320b10018fa23a27fe409dc0440ad4de",
          "sha256": "2875e22fdac535d2523b59634c62da0665c5f2d84f28a1e26d1e125dc2fd8768"
        },
        "downloads": -1,
        "filename": "Corrfunc-0.2.3.tar.gz",
        "has_sig": true,
        "md5_digest": "320b10018fa23a27fe409dc0440ad4de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32357675,
        "upload_time": "2016-03-30T02:43:25",
        "upload_time_iso_8601": "2016-03-30T02:43:25.971514Z",
        "url": "https://files.pythonhosted.org/packages/75/90/7f6c891c4b19ebf23361566228d4c67c620c058d4a40506c11eb869c32b6/Corrfunc-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef3b2a81e0cb6d05a0084bd795d11d2074e67b75cdcf78298345f477b7683f8a",
          "md5": "1d1ec7b56bca4ddc06edc981291f4008",
          "sha256": "1a2e43c6fc4c902111d5cd43b8936e581883b334522558277c07a55a3048945a"
        },
        "downloads": -1,
        "filename": "Corrfunc-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "1d1ec7b56bca4ddc06edc981291f4008",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32360529,
        "upload_time": "2016-04-14T08:30:09",
        "upload_time_iso_8601": "2016-04-14T08:30:09.573360Z",
        "url": "https://files.pythonhosted.org/packages/ef/3b/2a81e0cb6d05a0084bd795d11d2074e67b75cdcf78298345f477b7683f8a/Corrfunc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120fb6bafcb41103b65b807c29d8f045811ea82db933be7524241b28f2e3d7f9",
          "md5": "918ad7ed0559c601daee69f047539580",
          "sha256": "46ca28ecd0daf1baebdc37b74ac519c24fb364f5ca3fb3e36c7d7a7687c6e5b1"
        },
        "downloads": -1,
        "filename": "Corrfunc-1.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "918ad7ed0559c601daee69f047539580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32371854,
        "upload_time": "2016-06-08T07:53:50",
        "upload_time_iso_8601": "2016-06-08T07:53:50.229012Z",
        "url": "https://files.pythonhosted.org/packages/12/0f/b6bafcb41103b65b807c29d8f045811ea82db933be7524241b28f2e3d7f9/Corrfunc-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eedb20c8e79de6c26eb2cc08c0a4181b04193bbc6d0beabd40eb5ea716c06ab3",
          "md5": "1ef4ba2d917929aede23efddfcfbc78a",
          "sha256": "22176ee45188a3606df298af31f869fb9073957ad4de9417d3dfae683cb621e4"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ef4ba2d917929aede23efddfcfbc78a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25948875,
        "upload_time": "2017-04-06T06:53:31",
        "upload_time_iso_8601": "2017-04-06T06:53:31.780080Z",
        "url": "https://files.pythonhosted.org/packages/ee/db/20c8e79de6c26eb2cc08c0a4181b04193bbc6d0beabd40eb5ea716c06ab3/Corrfunc-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e0659ff1e5c05b96961eef93a998e14cca2e5d15faff83bfe46d6fafd259f8a",
          "md5": "9fa4e4d94e120bd9ab4671c99af31dad",
          "sha256": "017e8297c8741fed7ca6d66e2f3fcec1782cf263c377c39f5b239b745105b92a"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9fa4e4d94e120bd9ab4671c99af31dad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26041258,
        "upload_time": "2018-08-17T21:58:29",
        "upload_time_iso_8601": "2018-08-17T21:58:29.975032Z",
        "url": "https://files.pythonhosted.org/packages/8e/06/59ff1e5c05b96961eef93a998e14cca2e5d15faff83bfe46d6fafd259f8a/Corrfunc-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c17b79988e20800a981e2ed8459f294e98d31e9da4f1e9caba4af3c6f1c8b96",
          "md5": "aba091d90f69e72cf6764a48b6940984",
          "sha256": "9a62ca59c13685de0bca3e74f89666eaa8d19fb63b1d3586a5688b0674a0fc23"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "aba091d90f69e72cf6764a48b6940984",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26041728,
        "upload_time": "2018-08-19T00:10:45",
        "upload_time_iso_8601": "2018-08-19T00:10:45.943483Z",
        "url": "https://files.pythonhosted.org/packages/3c/17/b79988e20800a981e2ed8459f294e98d31e9da4f1e9caba4af3c6f1c8b96/Corrfunc-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bf3af25e81e97286ecee79bdabc53e72673e766f326f79717540c17f2c5d69d",
          "md5": "2a3a9dd11476fc6ae0c745289f800b6a",
          "sha256": "6d873d098eff3fb5da0cf26368b62365751aefaa6c7c19dea5c8864c6c34ab02"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a3a9dd11476fc6ae0c745289f800b6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26046581,
        "upload_time": "2019-05-21T08:26:57",
        "upload_time_iso_8601": "2019-05-21T08:26:57.853342Z",
        "url": "https://files.pythonhosted.org/packages/9b/f3/af25e81e97286ecee79bdabc53e72673e766f326f79717540c17f2c5d69d/Corrfunc-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "574cce270409fce8183076a636be0cb59d1f3a132c5fca3af2134c5f40bd09b9",
          "md5": "885f795fb03b3791b4f9fff5a439ad5e",
          "sha256": "32d0c6c2e6bc3dc237a4eabcdebadd27b3ebd16a1290c03f762d02e0af5d889f"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "885f795fb03b3791b4f9fff5a439ad5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26072917,
        "upload_time": "2019-06-21T21:14:55",
        "upload_time_iso_8601": "2019-06-21T21:14:55.727239Z",
        "url": "https://files.pythonhosted.org/packages/57/4c/ce270409fce8183076a636be0cb59d1f3a132c5fca3af2134c5f40bd09b9/Corrfunc-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3360487aba84ade8a0bbf21b0c08fa933ed9c1fa119b89f4d0bdeeb4869fbfaf",
          "md5": "e175c9ee53f1e209367d25e1abea3833",
          "sha256": "beaa3f96316f5fca94ddfe7052bd860c0170057b73d43a575e00cbd103bd1036"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e175c9ee53f1e209367d25e1abea3833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26062666,
        "upload_time": "2019-12-24T02:26:28",
        "upload_time_iso_8601": "2019-12-24T02:26:28.640979Z",
        "url": "https://files.pythonhosted.org/packages/33/60/487aba84ade8a0bbf21b0c08fa933ed9c1fa119b89f4d0bdeeb4869fbfaf/Corrfunc-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eefdcc2097c9357370503f5e1eb8d5de91a35418f28529ff550e2db9af247ba",
          "md5": "e361a1f3e684680213388e52e12766f2",
          "sha256": "158d0082412a2b13736805e761d3083f752640ba52cf71f06dd81be8b57e11bc"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e361a1f3e684680213388e52e12766f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26062026,
        "upload_time": "2020-02-03T03:29:53",
        "upload_time_iso_8601": "2020-02-03T03:29:53.712949Z",
        "url": "https://files.pythonhosted.org/packages/6e/ef/dcc2097c9357370503f5e1eb8d5de91a35418f28529ff550e2db9af247ba/Corrfunc-2.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc00c45b1e2517aae7723169d2778108825142c413bbf5e4c70bb57a3bf55849",
          "md5": "f7174bcfee4b9a9989af28a5c511bf13",
          "sha256": "b078d898eea7158ddfa8f9b908fcedcbce5d09f3f240da227f64c9337b48e850"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f7174bcfee4b9a9989af28a5c511bf13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26064234,
        "upload_time": "2020-07-21T04:27:06",
        "upload_time_iso_8601": "2020-07-21T04:27:06.126779Z",
        "url": "https://files.pythonhosted.org/packages/bc/00/c45b1e2517aae7723169d2778108825142c413bbf5e4c70bb57a3bf55849/Corrfunc-2.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c52d9ea1f47a052a5233470f15671030a966993cc142665fe3b56901cfedb47",
          "md5": "9150c6282b045f6eefd1501a23edb18a",
          "sha256": "7fd177ba245c5aeb3ea5c2006f071a1c6134736d9b25530bd46b321162e7335a"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9150c6282b045f6eefd1501a23edb18a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26066191,
        "upload_time": "2021-09-30T08:01:25",
        "upload_time_iso_8601": "2021-09-30T08:01:25.625473Z",
        "url": "https://files.pythonhosted.org/packages/5c/52/d9ea1f47a052a5233470f15671030a966993cc142665fe3b56901cfedb47/Corrfunc-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "456a8bbe83eeb3027278dbf85be2f96dd3038ff4b0af431e5c672d91550b27d3",
          "md5": "c36bc8172eea856264c59b7a979440b1",
          "sha256": "91c41ef0266daf644ba19ecd9d536a82018bd0d596854f0607d9e7485cfcfb95"
        },
        "downloads": -1,
        "filename": "Corrfunc-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c36bc8172eea856264c59b7a979440b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 26062830,
        "upload_time": "2022-12-23T11:19:14",
        "upload_time_iso_8601": "2022-12-23T11:19:14.025281Z",
        "url": "https://files.pythonhosted.org/packages/45/6a/8bbe83eeb3027278dbf85be2f96dd3038ff4b0af431e5c672d91550b27d3/Corrfunc-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "456a8bbe83eeb3027278dbf85be2f96dd3038ff4b0af431e5c672d91550b27d3",
        "md5": "c36bc8172eea856264c59b7a979440b1",
        "sha256": "91c41ef0266daf644ba19ecd9d536a82018bd0d596854f0607d9e7485cfcfb95"
      },
      "downloads": -1,
      "filename": "Corrfunc-2.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c36bc8172eea856264c59b7a979440b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 26062830,
      "upload_time": "2022-12-23T11:19:14",
      "upload_time_iso_8601": "2022-12-23T11:19:14.025281Z",
      "url": "https://files.pythonhosted.org/packages/45/6a/8bbe83eeb3027278dbf85be2f96dd3038ff4b0af431e5c672d91550b27d3/Corrfunc-2.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}