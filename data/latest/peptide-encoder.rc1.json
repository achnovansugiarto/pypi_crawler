{
  "info": {
    "author": "Brandon Malone",
    "author_email": "bmmalone@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Peptide Encoder\n\nAn encoder for peptides (short amino acid sequences) based on BLOSUM similarity.\n\nIn particular, this package includes a model for learning peptide embeddings such that the embedding of two peptides in\nthe vector space is proportional to their BLOSUM62 similarity.\n\n### Installation\n\nThis project is written in `python3` and can be installed with `pip`. It is available on PyPI.\n\n\n```\npip3 install --find-links https://download.pytorch.org/whl/cu113/torch_stable.html peptide-encoder\n```\n\nAlternatively, the package can be installed from source.\n\n```\ngit clone https://github.com/bmmalone/peptide-encoder.git\ncd piptide-encoder\npip3 install -r requirements.txt .\n```\n\n(The \"period\" at the end is required.)\n\n**Prerequisites**: This project relies on quite a few prerequisites, such as pytorch, ray, cudnn, and others. Both the\n`requirements.txt` and `setup.py` files aim to install these dependencies correctly; nevertheless, it may still be\npreferable to install these dependencies before installing this package.\n\nIn particular, the `find-links` argument to pip may need to be adjusted depending on the available version of CUDA.\n\n### Usage\n\nAfter installation, models can be trained using a command similar to the following:\n\n```\ntrain-pepenc-models /prj/peptide-encoder/conf/base/config.yaml --num-hyperparameter-configurations 500 --max-training-iterations 30 --name my-pepenc-tune-exp --out-dir /tmp\n```\n\nThe `--help` flag can be used to see a description of all arguments to the script.\n\nFor adjusting the hyperparameter search space, algorithms, or schedulers, the `pepenc/models/train_pepenc_models.py`\nscript can be adjusted. If the package was not installed in `pip` \"editable\" mode, then make sure to re-run `pip install`\nso that the changes take effect for the next run of ray.\n\n### Documentation\n\nUnfortunately, there is no sphinx, etc., documentation at this time. The file `conf/base/config.yaml` shows examples of\nall hyperparameters, data files, etc., for training models.\n\n#### Data format\n\nThe models in this project require an input csv file that has one row which is a header and remaining rows which are\nthe peptides for the various datasets. The column in the csv file with the peptide sequences must be named `sequence`.\n(This can be adjusted if calling the `pepenc` library from python code.)\n\n### Tensorboard visualization\n\nThe `<out_dir>/<name>` directory (based on the arguments to `train-pepenc-models`) will contain output suitable for\nvisualization with Tensorboard. The following command uses Docker to expose the results on port 6007.\n\n```\ndocker run --rm --mount type=bind,source=/tmp/my-pepenc-tune-exp,target=/tensorboard --publish 6007:6006 nvcr.io/nvidia/tensorflow:21.12-tf2-py3 tensorboard --logdir /tensorboard\n```\n\nThe tensorflow image can be updated as necessary.\n\n**N.B.** The `source` of the bind mount must be the `<out_dir>/<name>` directory (based on the arguments to `train-pepenc-models`).\n\n### Training the model\n\nThe model consistently experiences vanishing (or, improbably, exploding) gradient issues when using a single LSTM layer.\nIt is not clear why this happens, and it is currently suggested to avoid allowing `lstm_layers == 1` in the\nhyperparameter search space (or directly setting it that way in the config).\n\n### Testing the code\n\nThe project uses `pytest` for unit testing. The testing prerequisites (though not other dependencies, as described\nabove) can be installed as follows.\n\n```\npip3 install .[test]\n```\n\nAfter installing `pytest` and other testing dependencies, tests can be performed as follows.\n\n```\ncd /path/to/peptide-encoder\npytest .\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bmmalone/peptide-encoder",
    "keywords": "peptide encoding blossum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peptide-encoder",
    "package_url": "https://pypi.org/project/peptide-encoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/peptide-encoder/",
    "project_urls": {
      "Homepage": "https://github.com/bmmalone/peptide-encoder"
    },
    "release_url": "https://pypi.org/project/peptide-encoder/0.2.2/",
    "requires_dist": [
      "joblib",
      "numpy",
      "lifesci",
      "pyllars",
      "tqdm",
      "pandas",
      "pyyaml",
      "ray[tune]",
      "torch",
      "gym",
      "dm-tree",
      "opencv-python",
      "pytest ; extra == 'all'",
      "coverage ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "coveralls ; extra == 'all'",
      "pytest-runner ; extra == 'all'",
      "sphinx ; extra == 'all'",
      "sphinx-rtd-theme ; extra == 'all'",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "pytest ; extra == 'test'",
      "coverage ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "coveralls ; extra == 'test'",
      "pytest-runner ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "An encoder for peptides (short amino acid sequences) based on BLOSUM similarity.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12856097,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6e24bae4d7526864c4fc69136b1a0c5c5ddb35d821e7f869d63e038e5b9d224",
          "md5": "55c42330cc7f5c0cae2420227e14b702",
          "sha256": "52ea6490d18c5e4c17f43b0586646ba78b70f8c35c2acc0e80a1975662dc7f8f"
        },
        "downloads": -1,
        "filename": "peptide_encoder-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55c42330cc7f5c0cae2420227e14b702",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 174654,
        "upload_time": "2022-02-11T00:55:27",
        "upload_time_iso_8601": "2022-02-11T00:55:27.893720Z",
        "url": "https://files.pythonhosted.org/packages/d6/e2/4bae4d7526864c4fc69136b1a0c5c5ddb35d821e7f869d63e038e5b9d224/peptide_encoder-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6613ea0935280a3da28e1c77eef147cfb8511f8ee830bc4a7b7b0dc57e7d6647",
          "md5": "00186dd7d4910299f705209f7d712e0f",
          "sha256": "d4399249d05b6fe0a97ffbad7b33a2e3b80d20172418ef1ff28c49f381b3fbf1"
        },
        "downloads": -1,
        "filename": "peptide_encoder-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "00186dd7d4910299f705209f7d712e0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 175516,
        "upload_time": "2022-02-11T00:55:29",
        "upload_time_iso_8601": "2022-02-11T00:55:29.628669Z",
        "url": "https://files.pythonhosted.org/packages/66/13/ea0935280a3da28e1c77eef147cfb8511f8ee830bc4a7b7b0dc57e7d6647/peptide_encoder-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6e24bae4d7526864c4fc69136b1a0c5c5ddb35d821e7f869d63e038e5b9d224",
        "md5": "55c42330cc7f5c0cae2420227e14b702",
        "sha256": "52ea6490d18c5e4c17f43b0586646ba78b70f8c35c2acc0e80a1975662dc7f8f"
      },
      "downloads": -1,
      "filename": "peptide_encoder-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55c42330cc7f5c0cae2420227e14b702",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 174654,
      "upload_time": "2022-02-11T00:55:27",
      "upload_time_iso_8601": "2022-02-11T00:55:27.893720Z",
      "url": "https://files.pythonhosted.org/packages/d6/e2/4bae4d7526864c4fc69136b1a0c5c5ddb35d821e7f869d63e038e5b9d224/peptide_encoder-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6613ea0935280a3da28e1c77eef147cfb8511f8ee830bc4a7b7b0dc57e7d6647",
        "md5": "00186dd7d4910299f705209f7d712e0f",
        "sha256": "d4399249d05b6fe0a97ffbad7b33a2e3b80d20172418ef1ff28c49f381b3fbf1"
      },
      "downloads": -1,
      "filename": "peptide_encoder-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "00186dd7d4910299f705209f7d712e0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 175516,
      "upload_time": "2022-02-11T00:55:29",
      "upload_time_iso_8601": "2022-02-11T00:55:29.628669Z",
      "url": "https://files.pythonhosted.org/packages/66/13/ea0935280a3da28e1c77eef147cfb8511f8ee830bc4a7b7b0dc57e7d6647/peptide_encoder-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}