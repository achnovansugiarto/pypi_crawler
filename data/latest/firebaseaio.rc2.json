{
  "info": {
    "author": "09ghostrider",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Firebase-aio\r\n\r\nA simple async python wrapper for the [Firebase API](https://firebase.google.com).\r\n\r\n## Installation\r\n\r\n```python\r\npip install git+https://github.com/09ghostrider/firebase-aio\r\n```\r\n\r\n## Getting Started\r\n\r\n### Python Version\r\n\r\nFirebase-aio was written for python 3 and will not work correctly with python 2.\r\n\r\n### Add firebase-aio to your application\r\n\r\nFor use with only user based authentication we can create the following configuration:\r\n\r\n```python\r\nimport firebaseaio\r\nconfig = {\r\n  \"apiKey\": \"apiKey\",\r\n  \"authDomain\": \"projectId.firebaseapp.com\",\r\n  \"databaseURL\": \"https://databaseName.firebaseio.com\",\r\n  \"storageBucket\": \"projectId.appspot.com\"\r\n}\r\nfirebase = firebaseaio.initialize_app(config)\r\n```\r\n\r\nWe can optionally add a [service account credential](https://firebase.google.com/docs/server/setup#prerequisites) to our\r\nconfiguration that will allow our server to authenticate with Firebase as an admin and disregard any security rules.\r\n\r\n```python\r\nimport firebaseaio\r\nconfig = {\r\n  \"apiKey\": \"apiKey\",\r\n  \"authDomain\": \"projectId.firebaseapp.com\",\r\n  \"databaseURL\": \"https://databaseName.firebaseio.com\",\r\n  \"storageBucket\": \"projectId.appspot.com\",\r\n  \"serviceAccount\": \"path/to/serviceAccountCredentials.json\"\r\n}\r\nfirebase = firebaseaio.initialize_app(config)\r\n```\r\n\r\nAdding a service account will authenticate as an admin by default for all database queries, check out the\r\n[Authentication documentation](#authentication) for how to authenticate users.\r\n\r\n### Use Services\r\n\r\nA firebase-aio app can only use Firebase database services.\r\n\r\n```firebase.database()``` - \r\nCheck out the [Database documentation](#database) for further details.\r\n\r\n## Database\r\n\r\nYou can build paths to your data by using the ```child()``` method.\r\n\r\n```python\r\ndb = firebase.database()\r\ndb.child(\"users\").child(\"Morty\")\r\n```\r\n\r\n### Save Data\r\n\r\n#### push\r\n\r\nTo save data with a unique, auto-generated, timestamp-based key, use the ```push()``` method.\r\n\r\n```python\r\ndata = {\"name\": \"Mortimer 'Morty' Smith\"}\r\nawait db.child(\"users\").push(data)\r\n```\r\n\r\n#### set\r\n\r\nTo create your own keys use the ```set()``` method. The key in the example below is \"Morty\".\r\n\r\n```python\r\ndata = {\"name\": \"Mortimer 'Morty' Smith\"}\r\nawait db.child(\"users\").child(\"Morty\").set(data)\r\n```\r\n\r\n#### update\r\n\r\nTo update data for an existing entry use the ```update()``` method.\r\n\r\n```python\r\nawait db.child(\"users\").child(\"Morty\").update({\"name\": \"Mortiest Morty\"})\r\n```\r\n\r\n#### remove\r\n\r\nTo delete data for an existing entry use the ```remove()``` method.\r\n\r\n```python\r\nawait db.child(\"users\").child(\"Morty\").remove()\r\n```\r\n\r\n#### multi-location updates\r\n\r\nYou can also perform [multi-location updates](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html) with the ```update()``` method.\r\n\r\n```python\r\ndata = {\r\n    \"users/Morty/\": {\r\n        \"name\": \"Mortimer 'Morty' Smith\"\r\n    },\r\n    \"users/Rick/\": {\r\n        \"name\": \"Rick Sanchez\"\r\n    }\r\n}\r\nawait db.update(data)\r\n```\r\n\r\nTo perform multi-location writes to new locations we can use the ```generate_key()``` method.\r\n\r\n```python\r\ndata = {\r\n    \"users/\"+ref.generate_key(): {\r\n        \"name\": \"Mortimer 'Morty' Smith\"\r\n    },\r\n    \"users/\"+ref.generate_key(): {\r\n        \"name\": \"Rick Sanchez\"\r\n    }\r\n}\r\nawait db.update(data)\r\n```\r\n\r\n### Retrieve Data\r\n\r\n#### val\r\nQueries return a PyreResponse object. Calling ```val()``` on these objects returns the query data.\r\n\r\n```python\r\nusers = await db.child(\"users\").get()\r\nprint(users.val()) # {\"Morty\": {\"name\": \"Mortimer 'Morty' Smith\"}, \"Rick\": {\"name\": \"Rick Sanchez\"}}\r\n```\r\n\r\n#### key\r\nCalling ```key()``` returns the key for the query data.\r\n\r\n```python\r\nuser = await db.child(\"users\").get()\r\nprint(user.key()) # users\r\n```\r\n\r\n#### each\r\nReturns a list of objects on each of which you can call ```val()``` and ```key()```.\r\n\r\n```python\r\nall_users = await db.child(\"users\").get()\r\nfor user in all_users.each():\r\n    print(user.key()) # Morty\r\n    print(user.val()) # {name\": \"Mortimer 'Morty' Smith\"}\r\n```\r\n\r\n#### get\r\n\r\nTo return data from a path simply call the ```get()``` method.\r\n\r\n```python\r\nall_users = await db.child(\"users\").get()\r\n```\r\n\r\n#### Conditional Requests\r\n\r\nIt's possible to do conditional sets and removes by using the `conditional_set()` and `conitional_remove()` methods respectively. You can read more about conditional requests in Firebase [here](https://firebase.google.com/docs/reference/rest/database/#section-conditional-requests).\r\n\r\nTo use these methods, you first get the ETag of a particular path by using the `get_etag()` method. You can then use that tag in your conditional request.\r\n\r\n```python\r\netag = await db.child(\"users\").child(\"Morty\").get_etag()\r\ndata = {\"name\": \"Mortimer 'Morty' Smith\"}\r\nawait db.child(\"users\").child(\"Morty\").conditional_set(data, etag)\r\n```\r\n\r\nIf the passed ETag does not match the ETag of the path in the database, the data will not be written, and both conditional request methods will return a single key-value pair with the new ETag to use of the following form:\r\n\r\n```json\r\n{ \"ETag\": \"8KnE63B6HiKp67Wf3HQrXanujSM=\" }\r\n```\r\n\r\nHere's an example of checking whether or not a conditional removal was successful:\r\n\r\n```python\r\netag = await db.child(\"users\").child(\"Morty\").get_etag()\r\nresponse = await db.child(\"users\").child(\"Morty\").conditional_remove(etag)\r\nif \"ETag\" in response:\r\n    etag = response[\"ETag\"] # our ETag was out-of-date\r\nelse:\r\n    print(\"We removed the data successfully!\")\r\n```\r\n\r\n\r\n#### shallow\r\n\r\nTo return just the keys at a particular path use the ```shallow()``` method.\r\n\r\n```python\r\nall_user_ids = await db.child(\"users\").shallow().get()\r\n```\r\n\r\nNote: ```shallow()``` can not be used in conjunction with any complex queries.\r\n\r\n#### streaming\r\n\r\nYou can listen to live changes to your data with the ```stream()``` method.\r\n\r\n```python\r\ndef stream_handler(message):\r\n    print(message[\"event\"]) # put\r\n    print(message[\"path\"]) # /-K7yGTTEp7O549EzTYtI\r\n    print(message[\"data\"]) # {'title': 'firebaseaio', \"body\": \"etc...\"}\r\nmy_stream = db.child(\"posts\").stream(stream_handler)\r\n```\r\n\r\nYou should at least handle `put` and `patch` events. Refer to [\"Streaming from the REST API\"][streaming] for details.\r\n\r\n[streaming]: https://firebase.google.com/docs/reference/rest/database/#section-streaming\r\n\r\nYou can also add a ```stream_id``` to help you identify a stream if you have multiple running:\r\n\r\n```python\r\nmy_stream = db.child(\"posts\").stream(stream_handler, stream_id=\"new_posts\")\r\n```\r\n\r\n#### close the stream\r\n\r\n```python\r\nmy_stream.close()\r\n```\r\n\r\n### Complex Queries\r\n\r\nQueries can be built by chaining multiple query parameters together.\r\n\r\n```python\r\nusers_by_name = await db.child(\"users\").order_by_child(\"name\").limit_to_first(3).get()\r\n```\r\nThis query will return the first three users ordered by name.\r\n\r\n#### order_by_child\r\n\r\nWe begin any complex query with ```order_by_child()```.\r\n\r\n```python\r\nusers_by_name = await db.child(\"users\").order_by_child(\"name\").get()\r\n```\r\nThis query will return users ordered by name.\r\n\r\n#### equal_to\r\n\r\nReturn data with a specific value.\r\n\r\n```python\r\nusers_by_score = await db.child(\"users\").order_by_child(\"score\").equal_to(10).get()\r\n```\r\nThis query will return users with a score of 10.\r\n\r\n#### start_at and end_at\r\n\r\nSpecify a range in your data.\r\n\r\n```python\r\nusers_by_score = await db.child(\"users\").order_by_child(\"score\").start_at(3).end_at(10).get()\r\n```\r\nThis query returns users ordered by score and with a score between 3 and 10.\r\n\r\n#### limit_to_first and limit_to_last\r\n\r\nLimits data returned.\r\n\r\n```python\r\nusers_by_score = await db.child(\"users\").order_by_child(\"score\").limit_to_first(5).get()\r\n```\r\nThis query returns the first five users ordered by score.\r\n\r\n#### order_by_key\r\n\r\nWhen using ```order_by_key()``` to sort your data, data is returned in ascending order by key.\r\n\r\n```python\r\nusers_by_key = await db.child(\"users\").order_by_key().get()\r\n```\r\n\r\n#### order_by_value\r\n\r\nWhen using ```order_by_value()```, children are ordered by their value.\r\n\r\n```python\r\nusers_by_value = await db.child(\"users\").order_by_value().get()\r\n```\r\n\r\n### Helper Methods\r\n\r\n#### generate_key\r\n\r\n```db.generate_key()``` is an implementation of Firebase's [key generation algorithm](https://www.firebase.com/blog/2015-02-11-firebase-unique-identifiers.html).\r\nSee multi-location updates for a potential use case.\r\n#### sort\r\nSometimes we might want to sort our data multiple times. For example, we might want to retrieve all articles written between a\r\ncertain date then sort those articles based on the number of likes.\r\nCurrently the REST API only allows us to sort our data once, so the ```sort()``` method bridges this gap.\r\n```python\r\narticles = await db.child(\"articles\").order_by_child(\"date\").start_at(startDate).end_at(endDate).get()\r\narticles_by_likes = db.sort(articles, \"likes\")\r\n```\r\n\r\n### Common Errors\r\n\r\n#### Index not defined\r\n\r\nIndexing is [not enabled](https://firebase.google.com/docs/database/security/indexing-data) for the database reference.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/09ghostrider/firebase-aio",
    "keywords": "firebaseaio,firebase-aio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firebaseaio",
    "package_url": "https://pypi.org/project/firebaseaio/",
    "platform": null,
    "project_url": "https://pypi.org/project/firebaseaio/",
    "project_urls": {
      "Bug Tracker": "https://github.com/09ghostrider/firebase-aio/issues",
      "Homepage": "https://github.com/09ghostrider/firebase-aio"
    },
    "release_url": "https://pypi.org/project/firebaseaio/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple async python wrapper for the [Firebase API](https://firebase.google.com).",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14448430,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac0114a9385f763821f6dcfaec75f3aaad7f6bf4c488c57b938bd575c82ba740",
          "md5": "bdd66ba51e2a1b49fa00e9546e068b09",
          "sha256": "a21e79900c71db27a61d708b4256203073662c75cbeec5820058bb7f4f2d01a5"
        },
        "downloads": -1,
        "filename": "firebaseaio-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd66ba51e2a1b49fa00e9546e068b09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9749,
        "upload_time": "2022-07-15T18:22:11",
        "upload_time_iso_8601": "2022-07-15T18:22:11.190643Z",
        "url": "https://files.pythonhosted.org/packages/ac/01/14a9385f763821f6dcfaec75f3aaad7f6bf4c488c57b938bd575c82ba740/firebaseaio-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92cd2cd5c62ad2a13117707453328cae896c5539be2f92e5d875c2d8ab263a56",
          "md5": "3eb2dc4b5a84a738236cff2dde815d03",
          "sha256": "83d17e1b1da738a3393bb8f17fa0c82f9f8d977d9a008341d37768c8992c20a1"
        },
        "downloads": -1,
        "filename": "firebaseaio-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3eb2dc4b5a84a738236cff2dde815d03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12530,
        "upload_time": "2022-07-15T18:30:28",
        "upload_time_iso_8601": "2022-07-15T18:30:28.272667Z",
        "url": "https://files.pythonhosted.org/packages/92/cd/2cd5c62ad2a13117707453328cae896c5539be2f92e5d875c2d8ab263a56/firebaseaio-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92cd2cd5c62ad2a13117707453328cae896c5539be2f92e5d875c2d8ab263a56",
        "md5": "3eb2dc4b5a84a738236cff2dde815d03",
        "sha256": "83d17e1b1da738a3393bb8f17fa0c82f9f8d977d9a008341d37768c8992c20a1"
      },
      "downloads": -1,
      "filename": "firebaseaio-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3eb2dc4b5a84a738236cff2dde815d03",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12530,
      "upload_time": "2022-07-15T18:30:28",
      "upload_time_iso_8601": "2022-07-15T18:30:28.272667Z",
      "url": "https://files.pythonhosted.org/packages/92/cd/2cd5c62ad2a13117707453328cae896c5539be2f92e5d875c2d8ab263a56/firebaseaio-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}