{
  "info": {
    "author": "",
    "author_email": "Ask Solem <ask@celeryproject.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: No Input/Output (Daemon)",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "=====================\nMode AsyncIO Services\n=====================\n\n|license| |wheel| |pyversion| |pyimp| |black|\n\n:Version: 0.6.1\n:Web: http://mode-ng.readthedocs.org/\n:Download: https://pypi.org/project/mode-ng\n:Source: https://github.com/lqhuang/mode-ng\n:Keywords: async, service, framework, actors, bootsteps, graph\n\n.. |license| image:: https://img.shields.io/pypi/l/mode-ng.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n.. |wheel| image:: https://img.shields.io/pypi/wheel/mode-ng.svg\n    :alt: Mode can be installed via wheel\n    :target: http://pypi.org/project/mode-ng/\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/mode-ng.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.org/project/mode-ng/\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/mode-ng.svg\n    :alt: Supported Python implementations.\n    :target: http://pypi.org/project/mode-ng/\n.. |black| image:: https://img.shields.io/badge/code_style-black-000000.svg?style=flat\n    :alt: Use ``black`` as code formatter\n    :target: https://github.com/psf/black\n\nWhy the fork\n============\n\nOriginal ``mode`` homepage: https://github.com/ask/mode. Thanks to its creator Ask Solem (@ask).\n\nFirst fork: ``mode-streaming``\n------------------------------\n\nProject homepage: https://github.com/faust-streaming/mode\n\nWe have decided to fork the original *Mode* project because there is a critical process of releasing new versions which causes uncertainty in the community. Everybody is welcome to contribute to this *fork*, and you can be added as a manitainer.\n\nWe want to:\n\n- Ensure continues release\n- Code quality\n- Support latest Python versions\n- Update the documentation\n\nand more...\n\nA new fork: ``mode-ng``\n-----------------------\n\n**WIP** notice. Welcome to try it in your programs and feedback!\n\nWell, here is an another fork for ``mode``. Generally, my target is to\ncreate an individual and separated repository to develop ``mode`` for next\nstage/generation and keep rolling forward fastly.\n\n``mode`` could be a very potential and powerful framework for various\napplications. So I very care about how ``faust-streaming`` and ``mode-streaming``\ngoes in future. Currently the most important thing in developing ``mode-streaming``\nis to fix bugs and keep back compatibility for ``faust-streaming``, it would be\nuncertain or not-willing to add new features. For now, one big problem is if I\ntry to continue working on current ``mode-streaming`` branch, it's hard to me\nto know its consequences in ``faust-streaming``. I don't want to introduce\nbreak changes and inconsistent behaviors.\n\nHence, ``mode-ng`` provides a new package to make some aggressive improvements, do some experiments,\nand do not consider compatible problems from ``faust-streaming``. At least,\n``mode-ng`` can be quickly used by more users with more advanced features to\nbuild their own applications. In the future, if this fork could be ported back\nto ``mode-streaming`` or used as base framework of ``faust-streaming``, that\nwould be really great!\n\nHere are some thoughts from practical experiences and what I want to do next step:\n\n- Bug fixes: yeah, why not.\n- Use standard library implementations: When mode was first developed,\n  many features haven't exist, so there are many hacks and tricky solutions in\n  ``mode`` codes. Like ``cached_property``, ``AsyncMock``, ``loop arguments``,\n  even ``Object`` class (missing some inner ``__xxx__`` attrs after redefinition).\n- Port some features from faust: ``web`` module in faust is really useful for\n  building application. With web part, ``mode`` is able to expose, control,\n  monitor and more from outside api.\n- Improve or complete left part of ``signal`` module: Some modules like ``Signal``\n  are unfinished. It will be useful for some observer patterns in programming.\n- Add some message commuting behaviors like real actors? (for thread serices?)\n- More documents and more examples\n\nWhy minimal supported Python version is ``3.10``?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's more like a personal flavor for now. But if we say ``py3.6`` bring us stable ``async/await`` syntax firstly to introduce wonderful coroutine concurrency, I thought ``py3.10`` would be the next major popular minimal supported version with a more matured ``asyncio`` api interfaces. From feedbacks from many real cases, ``asyncio`` interfaces have changed a lot. Happy news is it stabilized by development of std library. And Python 3.10 is faster than before, though Python is not a language which cares about speed, seldom people don't want to higher performance.\n\nThis is not absolute, it aslo depends how many people want back compatibility for older versions.\n\nInstallation\n============\n\nYou can install Mode either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``:\n\n.. code:: console\n\n    $ pip install -U mode-ng\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Mode from http://pypi.org/project/mode-ng\n\nYou can install it by doing the following:\n\n.. code:: console\n\n    $ tar xvfz mode-ng-0.6.1.tar.gz\n    $ cd mode-0.6.1\n    $ python setup.py build\n    $ python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of Mode using the following\npip command:\n\n.. code:: console\n\n    $ pip install https://github.com/lqhuang/mode-ng/zipball/master#egg=mode-ng\n\nWhat is Mode?\n=============\n\nMode is a very minimal Python library built-on top of AsyncIO that makes\nit much easier to use.\n\nIn Mode your program is built out of services that you can start, stop,\nrestart and supervise.\n\nA service is just a class:\n\n.. code:: python\n\n    class PageViewCache(Service):\n        redis: Redis = None\n\n        async def on_start(self) -> None:\n            self.redis = connect_to_redis()\n\n        async def update(self, url: str, n: int = 1) -> int:\n            return await self.redis.incr(url, n)\n\n        async def get(self, url: str) -> int:\n            return await self.redis.get(url)\n\n\nServices are started, stopped and restarted and have\ncallbacks for those actions.\n\nIt can start another service:\n\n.. code:: python\n\n    class App(Service):\n        page_view_cache: PageViewCache = None\n\n        async def on_start(self) -> None:\n            await self.add_runtime_dependency(self.page_view_cache)\n\n        @cached_property\n        def page_view_cache(self) -> PageViewCache:\n            return PageViewCache()\n\nIt can include background tasks:\n\n.. code:: python\n\n    class PageViewCache(Service):\n\n        @Service.timer(1.0)\n        async def _update_cache(self) -> None:\n            self.data = await cache.get('key')\n\nServices that depends on other services actually form a graph\nthat you can visualize.\n\nWorker\n------\n\nMode optionally provides a worker that you can use to start the program,\nwith support for logging, blocking detection, remote debugging and more.\n\nTo start a worker add this to your program:\n\n.. code:: python\n\n    if __name__ == \"__main__\":\n        from mode import Worker\n        Worker(Service(), loglevel=\"info\").execute_from_commandline()\n\nThen execute your program to start the worker:\n\n.. code:: console\n\n    $ python examples/tutorial.py\n    [2018-03-27 15:47:12,159: INFO]: [^Worker]: Starting...\n    [2018-03-27 15:47:12,160: INFO]: [^-AppService]: Starting...\n    [2018-03-27 15:47:12,160: INFO]: [^--Websockets]: Starting...\n    STARTING WEBSOCKET SERVER\n    [2018-03-27 15:47:12,161: INFO]: [^--UserCache]: Starting...\n    [2018-03-27 15:47:12,161: INFO]: [^--Webserver]: Starting...\n    [2018-03-27 15:47:12,164: INFO]: [^--Webserver]: Serving on port 8000\n    REMOVING EXPIRED USERS\n    REMOVING EXPIRED USERS\n\nTo stop it hit ``Control-c``:\n\n.. code:: console\n\n    [2018-03-27 15:55:08,084: INFO]: [^Worker]: Stopping on signal received...\n    [2018-03-27 15:55:08,084: INFO]: [^Worker]: Stopping...\n    [2018-03-27 15:55:08,084: INFO]: [^-AppService]: Stopping...\n    [2018-03-27 15:55:08,084: INFO]: [^--UserCache]: Stopping...\n    REMOVING EXPIRED USERS\n    [2018-03-27 15:55:08,085: INFO]: [^Worker]: Gathering service tasks...\n    [2018-03-27 15:55:08,085: INFO]: [^--UserCache]: -Stopped!\n    [2018-03-27 15:55:08,085: INFO]: [^--Webserver]: Stopping...\n    [2018-03-27 15:55:08,085: INFO]: [^Worker]: Gathering all futures...\n    [2018-03-27 15:55:08,085: INFO]: [^--Webserver]: Closing server\n    [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Waiting for server to close handle\n    [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Shutting down web application\n    [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Waiting for handler to shut down\n    [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Cleanup\n    [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: -Stopped!\n    [2018-03-27 15:55:08,086: INFO]: [^--Websockets]: Stopping...\n    [2018-03-27 15:55:08,086: INFO]: [^--Websockets]: -Stopped!\n    [2018-03-27 15:55:08,087: INFO]: [^-AppService]: -Stopped!\n    [2018-03-27 15:55:08,087: INFO]: [^Worker]: -Stopped!\n\nBeacons\n-------\n\nThe ``beacon`` object that we pass to services keeps track of the services\nin a graph.\n\nThey are not stricly required, but can be used to visualize a running\nsystem, for example we can render it as a pretty graph.\n\nThis requires you to have the ``pydot`` library and GraphViz\ninstalled:\n\n.. code:: console\n\n    $ pip install pydot\n\nLet's change the app service class to dump the graph to an image at startup:\n\n.. code:: python\n\n    class AppService(Service):\n\n        async def on_start(self) -> None:\n            print('APP STARTING')\n            import pydot\n            import io\n\n            o = io.StringIO()\n            beacon = self.app.beacon.root or self.app.beacon\n            beacon.as_graph().to_dot(o)\n            graph, = pydot.graph_from_dot_data(o.getvalue())\n\n            print('WRITING GRAPH TO image.png')\n            with open('image.png', 'wb') as fh:\n                fh.write(graph.create_png())\n\n\nCreating a Service\n==================\n\nTo define a service, simply subclass and fill in the methods\nto do stuff as the service is started/stopped etc.:\n\n.. code:: python\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            print('Im starting now')\n\n        async def on_started(self) -> None:\n            print('Im ready')\n\n        async def on_stop(self) -> None:\n            print('Im stopping now')\n\nTo start the service, call ``await service.start()``:\n\n.. code:: python\n\n    await service.start()\n\nOr you can use ``mode.Worker`` (or a subclass of this) to start your\nservices-based asyncio program from the console:\n\n.. code:: python\n\n    if __name__ == '__main__':\n        import mode\n        worker = mode.Worker(\n            MyService(),\n            loglevel='INFO',\n            logfile=None,\n            daemon=False,\n        )\n        worker.execute_from_commandline()\n\nIt's a Graph!\n=============\n\nServices can start other services, coroutines, and background tasks.\n\n1) Starting other services using ``add_depenency``:\n\n.. code:: python\n\n    class MyService(Service):\n\n        def __post_init__(self) -> None:\n           self.add_dependency(OtherService(loop=self.loop))\n\n2) Start a list of services using ``on_init_dependencies``:\n\n.. code:: python\n\n    class MyService(Service):\n\n        def on_init_dependencies(self) -> None:\n            return [\n                ServiceA(loop=self.loop),\n                ServiceB(loop=self.loop),\n                ServiceC(loop=self.loop),\n            ]\n\n3) Start a future/coroutine (that will be waited on to complete on stop):\n\n.. code:: python\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            self.add_future(self.my_coro())\n\n        async def my_coro(self) -> None:\n            print('Executing coroutine')\n\n4) Start a background task:\n\n.. code:: python\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            print('Executing coroutine')\n\n\n5) Start a background task that keeps running:\n\n.. code:: python\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            while not self.should_stop:\n                # NOTE: self.sleep will wait for one second, or\n                #       until service stopped/crashed.\n                await self.sleep(1.0)\n                print('Background thread waking up')\n\nFAQ\n===\n\nCan I use Mode with Django/Flask/etc.?\n--------------------------------------\n\nYes! Use gevent/eventlet as a bridge to integrate with asyncio.\n\nUsing ``gevent``\n~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with gevent.\n\nUsing gevent requires you to install the ``aiogevent`` module,\nand you can install this as a bundle with Mode:\n\n.. code:: console\n\n    $ pip install -U mode-ng[gevent]\n\nThen to actually use gevent as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported:\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('gevent')\n    # execute program\n\nREMEMBER: This must be located at the very top of the module,\nin such a way that it executes before you import other libraries.\n\nUsing ``eventlet``\n~~~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with eventlet.\n\nUsing eventlet requires you to install the ``aioeventlet`` module,\nand you can install this as a bundle with Mode:\n\n.. code:: console\n\n    $ pip install -U mode-ng[eventlet]\n\nThen to actually use eventlet as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported:\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('eventlet')\n    # execute program\n\nREMEMBER: It's very important this is at the very top of the module,\nand that it executes before you import libraries.\n\nCan I use Mode with Tornado?\n----------------------------\n\nYes! Use the ``tornado.platform.asyncio`` bridge:\nhttp://www.tornadoweb.org/en/stable/asyncio.html\n\nCan I use Mode with Twisted?\n-----------------------------\n\nYes! Use the asyncio reactor implementation:\nhttps://twistedmatrix.com/documents/17.1.0/api/twisted.internet.asyncioreactor.html\n\nAt Shutdown I get lots of warnings, what is this about?\n-------------------------------------------------------\n\nIf you get warnings such as this at shutdown:\n\n.. code:: text\n\n    Task was destroyed but it is pending!\n    task: <Task pending coro=<Service._execute_task() running at /opt/devel/mode/mode/services.py:643> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x1100a7468>()]>>\n    Task was destroyed but it is pending!\n    task: <Task pending coro=<Service._execute_task() running at /opt/devel/mode/mode/services.py:643> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x1100a72e8>()]>>\n    Task was destroyed but it is pending!\n    task: <Task pending coro=<Service._execute_task() running at /opt/devel/mode/mode/services.py:643> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x1100a7678>()]>>\n    Task was destroyed but it is pending!\n    task: <Task pending coro=<Event.wait() running at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/locks.py:269> cb=[_release_waiter(<Future pendi...1100a7468>()]>)() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:316]>\n    Task was destroyed but it is pending!\n        task: <Task pending coro=<Event.wait() running at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/locks.py:269> cb=[_release_waiter(<Future pendi...1100a7678>()]>)() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:316]>\n\nIt usually means you forgot to stop a service before the process exited.\n\n\nContributing\n============\n\nFor guidance on setting up a development environment and how to make a contribution\nto `mode-ng`, see the `contributing guidelines`_.\n\n.. _contributing guidelines: https://github.com/lqhuang/mode-ng/blob/master/CONTRIBUTING.md\n\nCode of Conduct\n===============\n\nCheck `code of conduct`_ for recommended or discouraged behaviors while communicating.\n\n.. _code of conduct: https://github.com/lqhuang/mode-ng/blob/master/CODE_OF_CONDUCT.md\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "asyncio,service,bootsteps,graph,coroutine,actor",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "Lanqing Huang <lqhuang@outlook.com>",
    "name": "mode-ng",
    "package_url": "https://pypi.org/project/mode-ng/",
    "platform": null,
    "project_url": "https://pypi.org/project/mode-ng/",
    "project_urls": {
      "homepage": "https://github.com/lqhuang/mode-ng"
    },
    "release_url": "https://pypi.org/project/mode-ng/0.6.1/",
    "requires_dist": [
      "colorlog (>=2.9.0)",
      "croniter (>=0.3.16)",
      "mypy-extensions",
      "aioeventlet (~=0.5.1) ; extra == 'eventlet'",
      "dnspython ; extra == 'eventlet'",
      "aiogevent (~=0.2) ; extra == 'gevent'",
      "uvloop (>=0.8.1) ; extra == 'uvloop'"
    ],
    "requires_python": ">=3.10",
    "summary": "AsyncIO Service-based programming.",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16032137,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86f5db32791a00ab8fb6660bc27adee5de45497d2e21fefdf000ffe90dd825bb",
          "md5": "92622c9781a593c03aa7517bb44b3f64",
          "sha256": "d6d20bede6a15f16fe076f6cd5671572f6889dd592c55607e09c5aea3e6ece06"
        },
        "downloads": -1,
        "filename": "mode_ng-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92622c9781a593c03aa7517bb44b3f64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 101888,
        "upload_time": "2021-11-16T10:24:50",
        "upload_time_iso_8601": "2021-11-16T10:24:50.159520Z",
        "url": "https://files.pythonhosted.org/packages/86/f5/db32791a00ab8fb6660bc27adee5de45497d2e21fefdf000ffe90dd825bb/mode_ng-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1199be12829ad9530f9a310de30fe77fab06c95f79a9d7925f7fbfa2d65ce85",
          "md5": "0100d8b682f9e477b455bb75930c78c0",
          "sha256": "ea22f8c92619a63276297fb2ae4ce5acc222e97b8e25fb9960eb05a5c20f4ea1"
        },
        "downloads": -1,
        "filename": "mode-ng-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0100d8b682f9e477b455bb75930c78c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 270688,
        "upload_time": "2021-11-16T10:24:53",
        "upload_time_iso_8601": "2021-11-16T10:24:53.034368Z",
        "url": "https://files.pythonhosted.org/packages/e1/19/9be12829ad9530f9a310de30fe77fab06c95f79a9d7925f7fbfa2d65ce85/mode-ng-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9406f66806f012119e22634a7de35b8aa605c52260f12e8f5a656d25b5806009",
          "md5": "6500ea956c9cd087678cb5fb0a094419",
          "sha256": "8ea0e3c0bbf085ec3b26b683028e02ba75675ec85eaba9ab410d4e3ca6a91852"
        },
        "downloads": -1,
        "filename": "mode_ng-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6500ea956c9cd087678cb5fb0a094419",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 96274,
        "upload_time": "2021-11-21T15:35:25",
        "upload_time_iso_8601": "2021-11-21T15:35:25.523966Z",
        "url": "https://files.pythonhosted.org/packages/94/06/f66806f012119e22634a7de35b8aa605c52260f12e8f5a656d25b5806009/mode_ng-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db6aa159d43f270ef3d55277958274b37da9589f2a7de4e396f61dc9662d5c4f",
          "md5": "a69ec5058dcda67a0726519f8ea49d05",
          "sha256": "1ce0be82cfad8087390875f513fe52db26a5690ce8dc61282b3bddc67953f317"
        },
        "downloads": -1,
        "filename": "mode-ng-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a69ec5058dcda67a0726519f8ea49d05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 266394,
        "upload_time": "2021-11-21T15:35:28",
        "upload_time_iso_8601": "2021-11-21T15:35:28.490704Z",
        "url": "https://files.pythonhosted.org/packages/db/6a/a159d43f270ef3d55277958274b37da9589f2a7de4e396f61dc9662d5c4f/mode-ng-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9117d416292bd6e4c94a694249ab771b7897b822ebd8df397e858df4b103940",
          "md5": "2bed02fad7a9723271acfca605d225b1",
          "sha256": "a43228b1cbb151fb779044e024c8a2c4032987f6e8b2d8051a45c18c5c529222"
        },
        "downloads": -1,
        "filename": "mode_ng-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bed02fad7a9723271acfca605d225b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 96243,
        "upload_time": "2022-06-21T09:08:35",
        "upload_time_iso_8601": "2022-06-21T09:08:35.563878Z",
        "url": "https://files.pythonhosted.org/packages/a9/11/7d416292bd6e4c94a694249ab771b7897b822ebd8df397e858df4b103940/mode_ng-0.3.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Deprecated and buggy"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00c640ad30f87c3e78476bea119cf92175cee7d7be18f7aa78debff86b837b9",
          "md5": "a9c512254bcfd64a83f668d1b16bf717",
          "sha256": "7ae69e5853b0a1e1a0acc5abccf392634ee9c20a3423e6775f77450c57b431cd"
        },
        "downloads": -1,
        "filename": "mode-ng-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9c512254bcfd64a83f668d1b16bf717",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 263116,
        "upload_time": "2022-06-21T09:08:39",
        "upload_time_iso_8601": "2022-06-21T09:08:39.304884Z",
        "url": "https://files.pythonhosted.org/packages/e0/0c/640ad30f87c3e78476bea119cf92175cee7d7be18f7aa78debff86b837b9/mode-ng-0.3.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Deprecated and buggy"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a828107f847b3c1229093bb8b124820deb9f01e1a4cba7f7bce6b794f4b53323",
          "md5": "44d968f24cc624fdbfebcf502feeaf6a",
          "sha256": "a8e24c74e86fc522f83f00612245fb8026ab27ad17bd906a37df034319852379"
        },
        "downloads": -1,
        "filename": "mode_ng-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d968f24cc624fdbfebcf502feeaf6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 96523,
        "upload_time": "2022-06-27T15:08:07",
        "upload_time_iso_8601": "2022-06-27T15:08:07.728881Z",
        "url": "https://files.pythonhosted.org/packages/a8/28/107f847b3c1229093bb8b124820deb9f01e1a4cba7f7bce6b794f4b53323/mode_ng-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7368238561cf1b36e1102ef178c80468d2135ec02718e0e7fefd9cd787fc2003",
          "md5": "d61282eae523070de91f0deff63adc8d",
          "sha256": "94622b38eba0772126b3a807d29b768a3bedea51c6311dc3d9c9b9a39b6d5e28"
        },
        "downloads": -1,
        "filename": "mode-ng-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d61282eae523070de91f0deff63adc8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 263926,
        "upload_time": "2022-06-27T15:08:22",
        "upload_time_iso_8601": "2022-06-27T15:08:22.856886Z",
        "url": "https://files.pythonhosted.org/packages/73/68/238561cf1b36e1102ef178c80468d2135ec02718e0e7fefd9cd787fc2003/mode-ng-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bac50e3fbfba333f6dc0d64f3a5e49d532fecf611b85ccf5edbcdaa911a816e",
          "md5": "0c7230422b8b3ac1c1ee7e80596720ee",
          "sha256": "56841c3c1fbacf1541b60450f2b15b8558d6e9c6f1a871cbaa6fdbdfb0df4fbd"
        },
        "downloads": -1,
        "filename": "mode_ng-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c7230422b8b3ac1c1ee7e80596720ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 95220,
        "upload_time": "2022-07-04T12:49:33",
        "upload_time_iso_8601": "2022-07-04T12:49:33.652888Z",
        "url": "https://files.pythonhosted.org/packages/5b/ac/50e3fbfba333f6dc0d64f3a5e49d532fecf611b85ccf5edbcdaa911a816e/mode_ng-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4b1bdff7986ee7e48ba7e3415934b41648dd191d5097222b0a17c003bb785dd",
          "md5": "53843a9470bc45f6a3c0940f994aacae",
          "sha256": "eb88119e11fe75bd50f94961131098697a243669f4d0800da2838ad472206782"
        },
        "downloads": -1,
        "filename": "mode-ng-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53843a9470bc45f6a3c0940f994aacae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 264331,
        "upload_time": "2022-07-04T12:49:37",
        "upload_time_iso_8601": "2022-07-04T12:49:37.348237Z",
        "url": "https://files.pythonhosted.org/packages/c4/b1/bdff7986ee7e48ba7e3415934b41648dd191d5097222b0a17c003bb785dd/mode-ng-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "858349a95380cd483c74037ae628f6d456c5e7ddd56818dd5ecfa51ad94a641f",
          "md5": "015983f21c04987517c5f660c0c03d54",
          "sha256": "81f56234661fefd7cf5693483d369070788b9ac20d991e8ccb7eacaa97d2d5bf"
        },
        "downloads": -1,
        "filename": "mode_ng-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "015983f21c04987517c5f660c0c03d54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 95360,
        "upload_time": "2022-10-20T09:05:28",
        "upload_time_iso_8601": "2022-10-20T09:05:28.295928Z",
        "url": "https://files.pythonhosted.org/packages/85/83/49a95380cd483c74037ae628f6d456c5e7ddd56818dd5ecfa51ad94a641f/mode_ng-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa66d3030451e16e8341e1c546f97b3fc7135d74afa6f5c79201b63f5f581a80",
          "md5": "9f3d19f1c55d4a2f376460bad0a71427",
          "sha256": "188ad4a39a4f20d9d9bce6e10b12dca1f9d96ba78521c27b917870369111e14c"
        },
        "downloads": -1,
        "filename": "mode-ng-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f3d19f1c55d4a2f376460bad0a71427",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 1276013,
        "upload_time": "2022-10-20T09:05:31",
        "upload_time_iso_8601": "2022-10-20T09:05:31.864047Z",
        "url": "https://files.pythonhosted.org/packages/fa/66/d3030451e16e8341e1c546f97b3fc7135d74afa6f5c79201b63f5f581a80/mode-ng-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4602607938c2b2b3f65b288c125ffa2ee71f3b5e0b1daf93957c753bae752695",
          "md5": "a4967b4f989557f0ff16068096f3d797",
          "sha256": "cc6113d80b5517106c371f882fd7fdb915c58914689ee0616e462fe44ad9b0cb"
        },
        "downloads": -1,
        "filename": "mode_ng-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4967b4f989557f0ff16068096f3d797",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 95350,
        "upload_time": "2022-10-20T14:13:58",
        "upload_time_iso_8601": "2022-10-20T14:13:58.635693Z",
        "url": "https://files.pythonhosted.org/packages/46/02/607938c2b2b3f65b288c125ffa2ee71f3b5e0b1daf93957c753bae752695/mode_ng-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33ee60b4537014f99f5485216bc704e01bf22af92b6509f5b901f459d4decced",
          "md5": "bc657fea6f0e5d1228f14eb3c6988412",
          "sha256": "454b9b447b2e4dd207c850250ae73af9a961c2d91cc03bfb973e7d2fff64347a"
        },
        "downloads": -1,
        "filename": "mode-ng-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc657fea6f0e5d1228f14eb3c6988412",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 1276025,
        "upload_time": "2022-10-20T14:14:02",
        "upload_time_iso_8601": "2022-10-20T14:14:02.110140Z",
        "url": "https://files.pythonhosted.org/packages/33/ee/60b4537014f99f5485216bc704e01bf22af92b6509f5b901f459d4decced/mode-ng-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de3ff88427e0eb6b040c891a43bb4d8bfec88a7d53aa978b669bb015aa194ee6",
          "md5": "19f18bae2ff09f6d776e4b3ff0a9336e",
          "sha256": "52e07e544b33f84e242beb1641aa305617656f1f9c33090ac5cca0b2929df3b2"
        },
        "downloads": -1,
        "filename": "mode_ng-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19f18bae2ff09f6d776e4b3ff0a9336e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 93640,
        "upload_time": "2022-11-20T12:42:12",
        "upload_time_iso_8601": "2022-11-20T12:42:12.023173Z",
        "url": "https://files.pythonhosted.org/packages/de/3f/f88427e0eb6b040c891a43bb4d8bfec88a7d53aa978b669bb015aa194ee6/mode_ng-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff78f66d5646061037ce78a2a8df1a0dddec23c82e9cd02d6770566136347c58",
          "md5": "5a3f93f067a5af7e9ffae4ea78dde8ff",
          "sha256": "8cc2e2b88ff2201bf8622966a1c362d859deda99cca2b237a142f2e776b03b5d"
        },
        "downloads": -1,
        "filename": "mode-ng-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a3f93f067a5af7e9ffae4ea78dde8ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 262230,
        "upload_time": "2022-11-20T12:42:15",
        "upload_time_iso_8601": "2022-11-20T12:42:15.630681Z",
        "url": "https://files.pythonhosted.org/packages/ff/78/f66d5646061037ce78a2a8df1a0dddec23c82e9cd02d6770566136347c58/mode-ng-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e62cd61c3e9791d4342c8069fcff65fd7b1879243b966a9ecfdd1df23adfd2",
          "md5": "41ab777e8643ea23c68c93a5952ae039",
          "sha256": "ade9aa3e3e15b2a66139ce3f6d39fb68e03b4aee51ea49137378fdd86c2f1b4e"
        },
        "downloads": -1,
        "filename": "mode_ng-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41ab777e8643ea23c68c93a5952ae039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 93342,
        "upload_time": "2022-12-08T09:49:20",
        "upload_time_iso_8601": "2022-12-08T09:49:20.294202Z",
        "url": "https://files.pythonhosted.org/packages/95/e6/2cd61c3e9791d4342c8069fcff65fd7b1879243b966a9ecfdd1df23adfd2/mode_ng-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf1b6bed9e6bfa136c8f987db190c3cf342cefef2b5a0929d6953f0dc8b4d108",
          "md5": "78827300f5b6f024db2119d66169f25d",
          "sha256": "f6d42e831660a31e155fed69e920147680749e5f625cc9e35e660fcc799960bd"
        },
        "downloads": -1,
        "filename": "mode-ng-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78827300f5b6f024db2119d66169f25d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 263459,
        "upload_time": "2022-12-08T09:49:24",
        "upload_time_iso_8601": "2022-12-08T09:49:24.417045Z",
        "url": "https://files.pythonhosted.org/packages/cf/1b/6bed9e6bfa136c8f987db190c3cf342cefef2b5a0929d6953f0dc8b4d108/mode-ng-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95e62cd61c3e9791d4342c8069fcff65fd7b1879243b966a9ecfdd1df23adfd2",
        "md5": "41ab777e8643ea23c68c93a5952ae039",
        "sha256": "ade9aa3e3e15b2a66139ce3f6d39fb68e03b4aee51ea49137378fdd86c2f1b4e"
      },
      "downloads": -1,
      "filename": "mode_ng-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "41ab777e8643ea23c68c93a5952ae039",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 93342,
      "upload_time": "2022-12-08T09:49:20",
      "upload_time_iso_8601": "2022-12-08T09:49:20.294202Z",
      "url": "https://files.pythonhosted.org/packages/95/e6/2cd61c3e9791d4342c8069fcff65fd7b1879243b966a9ecfdd1df23adfd2/mode_ng-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf1b6bed9e6bfa136c8f987db190c3cf342cefef2b5a0929d6953f0dc8b4d108",
        "md5": "78827300f5b6f024db2119d66169f25d",
        "sha256": "f6d42e831660a31e155fed69e920147680749e5f625cc9e35e660fcc799960bd"
      },
      "downloads": -1,
      "filename": "mode-ng-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "78827300f5b6f024db2119d66169f25d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 263459,
      "upload_time": "2022-12-08T09:49:24",
      "upload_time_iso_8601": "2022-12-08T09:49:24.417045Z",
      "url": "https://files.pythonhosted.org/packages/cf/1b/6bed9e6bfa136c8f987db190c3cf342cefef2b5a0929d6953f0dc8b4d108/mode-ng-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}