{
  "info": {
    "author": "Filip UhlÃ­k",
    "author_email": "filipfilauhlik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sa_decor\n\nSQLAlchemy decorators for an optional connection/session dependency injection.\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## usage with SQLAlchemy Core\nYou can set a global **engine** if you're using only one in your application.\n```python\nimport sa_decor\n\nsa_decor.set_global_engine(my_engine)\n```\n\nAnnotate a function and add a named parameter **connection**.\n```python\nfrom sa_decor import with_connection\n\n@with_connection()\ndef foo(a, b, *, connection):\n    ...\n    connection.execute(stmt)\n    ...\n```\n\nIf you're using multiple engines, you can provide them to each function separately.\n```python\n@with_connection(engine=my_other_engine)\ndef bar(a, b, *, connection):\n    ...\n    connection.execute(stmt)\n    ...\n```\n\nThen either call the function without the parameter to let the decorator connect for you, or supply an existing connection.\n```python\nfoo(1, 2)\nfoo(1, 2, connection=my_connection)\n``` \n\n## usage with SQLAlchemy ORM sessions\nThere is a similar functionality available for ORM sessions, but you need to provide a **sessionmaker** object instead of an **engine** and add a **session** parameter. You also need to choose whether the session should be committed when the function finishes or even when the function raises an exception.\n```python\nsa_decor.set_global_sessionmaker(my_sessionmaker)\n\n\n@with_session(commit=False)\ndef function_that_only_queries_data(*, session):\n    ...\n    session.execute(select_stmt)\n    ...\n\n@with_session(commit=True)\ndef function_that_updates_the_db(*, session):\n    ...\n    session.execute(insert_stmt)\n    ...\n    raise Exception  # the insert WILL NOT be commited\n\n@with_session(force_commit=True)\ndef function_that_commits_no_matter_what(*, session):\n    ...\n    session.execute(insert_stmt)\n    ...\n    raise Exception  # the insert WILL be commited\n```\n\nThe commit behaviour is ignored when the function is called with an existing session.\n```python\nfunction_that_commits_no_matter_what(session=my_session)\n# not commited automatically!\nmy_session.commit()\n```\n\n## notes\nThis is the most useful when you have a bunch of functions that all rely on a connection/session but are sometimes called independently and sometimes from within a different function that also needs a connection.\n```python\n@with_connection()\ndef get_stuff(*, connection):\n    ...\n\n@with_connection()\ndef do_stuff(*, connection):\n    ...\n    get_stuff(connection=connection)  # nested calls can use the same connection\n    ...\n\n\n# somewhere else in the code, e.g. an API controller\ndef get():\n    ...\n    stuff = get_stuff()\n    ...\n\ndef post():\n    ...\n    result = do_stuff()\n    ...\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uhlikfil/sa_decor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sa-decor",
    "package_url": "https://pypi.org/project/sa-decor/",
    "platform": null,
    "project_url": "https://pypi.org/project/sa-decor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/uhlikfil/sa_decor/issues",
      "Homepage": "https://github.com/uhlikfil/sa_decor"
    },
    "release_url": "https://pypi.org/project/sa-decor/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "SQLAlchemy decorators for an optional connection/session dependency injection.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14137787,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a5f6a7086d6796682342c5705e435ce74e4a44dda08934b2f8d259b8a9c7d27",
          "md5": "7d65b01415347d8bd7e3b839f1f47bb2",
          "sha256": "1d7e6bfea76fa1098e43bc90c5f945dd66ddf9c3d41d06e75bad7cf52a16b386"
        },
        "downloads": -1,
        "filename": "sa_decor-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d65b01415347d8bd7e3b839f1f47bb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5246,
        "upload_time": "2022-06-15T09:43:53",
        "upload_time_iso_8601": "2022-06-15T09:43:53.217214Z",
        "url": "https://files.pythonhosted.org/packages/1a/5f/6a7086d6796682342c5705e435ce74e4a44dda08934b2f8d259b8a9c7d27/sa_decor-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f9bf830cb0a6b3fa6ba8bf2ce22c1a29dfdbbb08e559ecd84bb7dea95d413bd",
          "md5": "5a788f7b5aa0d21486b9e1c94309a692",
          "sha256": "b55e71cdb235db7964f6dbe0b6dfc76870c57f2b265d2b5bb09449701b38b1a0"
        },
        "downloads": -1,
        "filename": "sa_decor-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5a788f7b5aa0d21486b9e1c94309a692",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4849,
        "upload_time": "2022-06-15T09:43:54",
        "upload_time_iso_8601": "2022-06-15T09:43:54.271570Z",
        "url": "https://files.pythonhosted.org/packages/0f/9b/f830cb0a6b3fa6ba8bf2ce22c1a29dfdbbb08e559ecd84bb7dea95d413bd/sa_decor-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a5f6a7086d6796682342c5705e435ce74e4a44dda08934b2f8d259b8a9c7d27",
        "md5": "7d65b01415347d8bd7e3b839f1f47bb2",
        "sha256": "1d7e6bfea76fa1098e43bc90c5f945dd66ddf9c3d41d06e75bad7cf52a16b386"
      },
      "downloads": -1,
      "filename": "sa_decor-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d65b01415347d8bd7e3b839f1f47bb2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5246,
      "upload_time": "2022-06-15T09:43:53",
      "upload_time_iso_8601": "2022-06-15T09:43:53.217214Z",
      "url": "https://files.pythonhosted.org/packages/1a/5f/6a7086d6796682342c5705e435ce74e4a44dda08934b2f8d259b8a9c7d27/sa_decor-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f9bf830cb0a6b3fa6ba8bf2ce22c1a29dfdbbb08e559ecd84bb7dea95d413bd",
        "md5": "5a788f7b5aa0d21486b9e1c94309a692",
        "sha256": "b55e71cdb235db7964f6dbe0b6dfc76870c57f2b265d2b5bb09449701b38b1a0"
      },
      "downloads": -1,
      "filename": "sa_decor-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5a788f7b5aa0d21486b9e1c94309a692",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4849,
      "upload_time": "2022-06-15T09:43:54",
      "upload_time_iso_8601": "2022-06-15T09:43:54.271570Z",
      "url": "https://files.pythonhosted.org/packages/0f/9b/f830cb0a6b3fa6ba8bf2ce22c1a29dfdbbb08e559ecd84bb7dea95d413bd/sa_decor-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}