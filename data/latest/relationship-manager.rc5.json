{
  "info": {
    "author": "Andy Bulka",
    "author_email": "abulka@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Relationship Manager - a lightweight Object Database class\n\nA central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of classes. \n\n## What is it?\n\nClasses that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional \"pointer\" and \"arraylist\" techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.\n\nUsing a `Relationship Manager` object to manage the relationships can mitigate these problems and make managing relationships straightforward. It also opens up the possibility of powerful querying of relationships, a very simple version of something like [LINQ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/).\n\nIn a sense, an [Object Database](https://en.wikipedia.org/wiki/Object_database)\nis an elaborate implementation of the Relationship Manager pattern. However the\n*intent* of the Relationship Manager pattern is lighter weight, to replace the\nwirings between objects rather than acting as a huge central database on disk -\nthough persistence is built into Relationship Manager too.\n\nHere are various implementations of the Relationship Manager Pattern in this GitHub repository:\n\n- Python: Uses Python 3, there are no dependencies.\n- Java\n- C#: Visual Studio 2005 project with unit test. Very fast implementation used in at least one commercial product.\n\n# Python\n\n## Installation\n\n```shell\npip install relationship-manager\n```\n\n## Usage\n\n```python\nfrom relmgr import RelationshipManager\n\nrm = RelationshipManager()\nrm.enforce(\"xtoy\", \"onetoone\", \"directional\")\nx = object()\ny = object()\nrm.add_rel(x, y, \"xtoy\")\nassert rm.find_target(x, \"xtoy\") == y\n```\n\n- Read the unit tests to see all functionality being exercised, incl. backpointer queries. \n- See the examples below and in the `relmgr/examples/` directory of this repository.\n- See full [API documentation](https://abulka.github.io/relationship-manager/relmgr/index.html).\n- See the Relationship Manager pattern referred to above for lots more documentation.\n\n## Python API\n\nQuick summary of the v2 API:\n\n```python\ndef add_rel(self, source, target, rel_id: Union[int,str]=1) -> None:\ndef remove_rel(self, source, target, rel_id=1) -> None:\ndef enforce(self, rel_id, cardinality, directionality=\"directional\"):\ndef clear(self) -> None:\n\n# query API\ndef find_targets(self, source, rel_id) -> List:\ndef find_target(self, source, rel_id) -> object:\ndef find_sources(self, target, rel_id) -> List: # Back pointer query\ndef find_source(self, target, rel_id) -> object: # Back pointer query\ndef find_rels(self, source, target) -> List:\ndef is_rel(self, source, target, rel_id=1) -> bool:\n\n# persistence related\nobjects: Namespace\nrelationships = property(_get_relationships, _set_relationships)  # flat list of rel. tuples\ndef dumps(self) -> bytes:\ndef loads(asbytes: bytes) -> RelationshipManager:  # @staticmethod\n```\n\nSee full [API documentation](https://abulka.github.io/relationship-manager/relmgr/index.html).\n\n## Hiding the use of Relationship Manager\n\nIts probably best practice to hide the use of Relationship Manager and simply use it as\nan implementation underneath traditional wiring methods like `.add()` and\n`setY()` or properties like `.subject` etc. \n\nFor example, to implement:\n```\n         ______________        ______________\n        |       X      |      |       Y      |\n        |______________|      |______________|\n        |              |      |              |\n        |void  setY(y) |1    1|              |\n        |Y     getY()  |----->|              |\n        |void  clearY()|      |              |\n        |______________|      |______________|\n```\n\nwrite the Python code like this:\n```python\nfrom relmgr import RelMgr\n\nRM = RelMgr()\n\nclass X:\n    def __init__(self):        rm.enforce(\"xtoy\", \"onetoone\", \"directional\")\n    def setY(self, y):         rm.add_rel(self, y, \"xtoy\")\n    def getY(self):     return rm.find_target(source=self, rel_id=\"xtoy\")\n    def clearY(self):          rm.remove_rel(self, self.getY(), \"xtoy\")\n\nclass Y:\n    pass\n```\n\nNote the use of the abbreviated Relationship Manager API in this example.\n\n### Another example\n\nHere is another example of hiding the use of Relationship Manager, \nfound in the examples folder as `relmgr/examples/observer.py` - the\nclassic Subject/Observer pattern:\n\n```python\nfrom relmgr import RelationshipManager\n\n\nrm = RelationshipManager()\n\n\nclass Observer:\n\n    @property\n    def subject(self):\n        return rm.find_target(self)\n\n    @subject.setter\n    def subject(self, _subject):\n        rm.add_rel(self, _subject)\n\n    def notify(self, subject, notification_type):\n        pass  # implementations override this and do something\n\n\nclass Subject:\n\n    def notify_all(self, notification_type: str):\n        observers = rm.find_sources(self)  # all things pointing at me\n        for o in observers:\n            o.Notify(self, notification_type)\n\n    def add_observer(self, observer):\n        rm.add_rel(observer, self)\n\n    def remove_observer(self, observer):\n        rm.remove_rel(source=observer, target=self)\n\n```\n\n## Persistence\n\nThe easiest approach to persistence is to use the built in `dumps` and `loads`\nmethods of `RelationshipManager`. Relationship Manager also provides an attribute\nobject called `.objects` where you should keep all the objects involved in\nrelationships e.g.\n\n```python\nrm.objects.obj1 = Entity(strength=1, wise=True, experience=80)\n```\n\nThen when you persist the Relationship Manager both the objects and\nrelations are pickled and later restored. This means your objects are\naccessible by attribute name e.g. `rm.objects.obj1` at all times. You can\nassign these references to local variables for convenience e.g. `obj1 = rm.objects.obj1`.\n\nHere is complete example of creating three entitys, wiring them up, \npersisting them then restoring them:\n\n```python\nimport pprint\nimport random\nfrom dataclasses import dataclass\nfrom relmgr import RelationshipManager\n\n@dataclass\nclass Entity:\n    strength: int = 0\n    wise: bool = False\n    experience: int = 0\n\n    def __hash__(self):\n        hash_value = hash(self.strength) ^ hash(\n            self.wise) ^ hash(self.experience)\n        return hash_value\n\n\nrm = RelationshipManager()\nobj1 = rm.objects.obj1 = Entity(strength=1, wise=True, experience=80)\nobj2 = rm.objects.obj2 = Entity(strength=2, wise=False, experience=20)\nobj3 = rm.objects.obj3 = Entity(strength=3, wise=True, experience=100)\n\nrm.add_rel(obj1, obj2)\nrm.add_rel(obj1, obj3)\nassert rm.find_targets(obj1) == [obj2, obj3]\n\n# persist\nasbytes = rm.dumps()\n\n# resurrect\nrm2 = RelationshipManager.loads(asbytes)\n\n# check things worked\nnewobj1 = rm2.objects.obj1\nnewobj2 = rm2.objects.obj2\nnewobj3 = rm2.objects.obj3\nassert rm2.find_targets(newobj1) == [newobj2, newobj3]\nassert rm2.find_target(newobj1) is newobj2\n\nprint('done, all OK')\n```\n\n### Persistence API\n\nAs a reminder, the persistence API of `RelationshipManager` is:\n\n```python\nobjects: Namespace  \n\ndef dumps(self) -> bytes:\n\n@staticmethod\ndef loads(asbytes: bytes) -> RelationshipManager:\n```\n\nPlease create attributes on the `objects` property of the relationship manager, pointing to those objects involved in relationships. It is however optional, and only provides a guaranteed way of pickling and persisting the objects involved in the relationships along with the relationships themselves, when persisting the relationship manager.  \n\nYou could attach your other application state to this `objects` property of the relationship manager and thus save your entire application state into the same file.  Alternively save the pickeled bytes into your own persistence file solution.\n\nThere are currently no `dump()` or `load()` methods implemented, which would pickle\nto and from a *file*. These can easily be added in a subclass or just write and\nread the results of the existing `dumps()` and `loads()` methods to a file\nyourself, as bytes.\n\n### Manual Control of Persistence\n\nPersistence can be a bit tricky because you need to persist both objects and relationships between those objects.\n\nOther libraries that implement models, schemas, serializers/deserializers,\nODM's/ORM's, Active Records or similar patterns will require you to define your\nclasses in a particular way. Relationship Manager works with any Python objects\nlike dataclass objects etc. without any special decoration or structure\nrequired.\n\nWhilst it is possible to simply pickle a Relationship Manager instance and\nrestore it, you won't have easy access to the objects involved. Sure,\nRelationship Manager will return objects which have been resurrected from\npersistence correctly but how, in such a unpickled situation, will you pass\nobject instances to the Relationship Manager API? Thus its better to prepare\nyour persitence properly and store all your objects in a dictionary or object\nand pickle that together with the Relationship Manager.  E.g.\n\nFor code examples of custom persistence, see \n`research/python persistence research/persist_pickle_simple.py`\nas well as other persistence approaches in that directory, including an approach which \nstores objects in dictionaries with ids and uses the Relationship Manager to store relationships between those ids, rather than relationships between object references.\n\n## Running the tests\n\n### Python tests\n\nCheck our this project from GitHub, open the project directory in vscode and there is a local `settings.json` and `launch.json` already populated which means you can choose the launch profile `Run all tests: using -m unittest` or use the vscode built in GUI test runner (hit the `Discover Tests` button then the `Run all tests` button).\n\nOr simply:\n\n```shell\npython -m unittest discover -p 'test*' -v tests\n```\n\n### C# and Java tests\n\nOpen the projects and run the tests from your IDE.\n\n## Appendix: Installing into a new virtual environment\n\nEither use `pipenv` to manage a new virtual environment or use Python's built in `venv`:\n\n```shell\nmkdir proj1\ncd proj1\npython -m venv env\n\nenv/bin/pip install relationship-manager\nenv/bin/python\n> from relmgr import RelationshipManager\n```\n\nYou can activate the virtual environment after you create it, which makes running `pip` and `python` etc. easier\n\n```\nmkdir proj1\ncd proj1\npython -m venv env\n\nsource env/bin/activate\npip install relationship-manager\npython\n> from relmgr import RelationshipManager\n```\n\n# Final Thoughts on the Python Implementation\n\n## References and memory\n\nBe careful - the Relationship Manager will have references to your objects so garbage collection may not be able to kick in. If you remove all relationships for an object it should be removed from the Relationship Manager, but this needs to be verified in these implementations.\n\n## Performance\n\nBe mindful that normal object to object wiring using references and lists of references is going to be much faster than a Relationship Manager.\n\nYou can have multiple relationship manager instances to manage different areas of your programming domain, which increases efficiency and comprehensibility.\n\nYou may want to google for other more professional [Object Databases](https://en.wikipedia.org/wiki/Object_database). For example, in the Python space we have:\n\n- https://github.com/grundic/awesome-python-models - A curated list of awesome Python libraries, which implement models, schemas, serializers/deserializers, ODM's/ORM's, Active Records or similar patterns.\n- https://www.opensourceforu.com/2017/05/three-python-databases-pickledb-tinydb-zodb/ - A peek at three Python databases: PickleDB, TinyDB and ZODB\n- https://tinydb.readthedocs.io/en/stable/usage.html#queries - Welcome to TinyDB, your tiny, document oriented database optimized for your happiness\n- https://divmod.readthedocs.io/en/latest/products/axiom/index.html - Axiom is an object database whose primary goal is to provide an object-oriented layer to an SQL database\n- http://www.newtdb.org/en/latest/getting-started.html - Newt DB - You’ll need a Postgres Database server.\n- http://www.zodb.org/en/latest/tutorial.html#tutorial-label - This tutorial is intended to guide developers with a step-by-step introduction of how to develop an application which stores its data in the ZODB.\n\nHowever most of these need a backing SQL database - Relationship Manager does not, which may be a benefit - no databases to set up - just get on with coding.\n\n# Other implementations of Relationship Manager \n\nIn this Github repository there are several other implementations of Relationship Manager. Their APIs are not the latest however - the methods names have evolved - the Python implementation is the gold standard API and implementation.\n\n## C#\n\nVery fast implementation for .NET - has been used in a commercial project. Note that the Visual Studio 2005 projects/solutions need updating to a more recent version of Visual Studio.\n\n## Boo\n\nThe [boo language](http://boo-language.github.io/) for .NET is now dead, however this implementation created a .net `.dll` that was usable by other .NET languages.  This dll is still in the project and perfectly usable, however the C# implementation is much faster.\n\n## Java\n\nA Java implementation.  Needs a bit of dusting off, but should run.\n\nNote that the C# and Java implementations have a slightly cleaner set of methods and a few extra methods - and also use a nice interface to talk to.  The method names are substantially the same though.\n\n### C# and Java API\n\n> Note: C# and Java implementations use the original older v1 API, not the new v2 API implemented in Python, above.\n\n```java\npublic enum Cardinality  \n{  \n    OneToOne,  \n    OneToMany,  \n    ManyToOne,  \n    ManyToMany  \n}\n\npublic enum Directionality  \n{  \n    UniDirectional,  \n    DirectionalWithBackPointer,  \n    DoubleDirectional  \n}\n\ninterface IRelationshipManager {\n  void AddRelationship(object fromObj, object toObj, string relId);  \n  void AddRelationship(object fromObj, object toObj);  \n  void EnforceRelationship(string relId, Cardinality cardinality);  \n  void EnforceRelationship(string relId, Cardinality cardinality, Directionality directionality);  \n  IList FindObjectsPointedToByMe(object fromObj, string relId);  \n  object FindObjectPointedToByMe(object fromObj, string relId);  \n   IList FindObjectsPointingToMe(object toObj, string relId);  \n  object FindObjectPointingToMe(object toObj, string relId);  \n  void RemoveRelationship(object fromObj, object toObj, string relId);  \n  void RemoveAllRelationshipsInvolving(object obj, string relId);  \n  int Count();  \n  int CountRelationships(string relId);  \n  void Clear();  \n  bool DoesRelIdExistBetween(object fromObj, object toObj, string relId);  \n  IList FindRelIdsBetween(object fromObj, object toObj);\n}\n```\n\n### C# and Java abbreviated API\n\nThe abbreviated API is more succinct, but is only recommended for unit tests.\n\n| Return Type            | Function Name           | Short-hand |\n|-------------------|-----------------|------|\n| void | addRelationship(from, to, id) | R(f,t) |\n| void | removeRelationship(from, to, id) | NR(f,t) |\n| List | findObjectsPointedToByMe(from, id) | PS(f) |\n| List | findObjectsPointingToMe(to, id) | BS(t) |\n| void  | EnforceRelationship(id, cardinality, bidirectionality) | ER(id, c, bi) |\n| Object | findObjectPointedToByMe(fromMe, id, cast) | P(f) |\n| Object | findObjectPointingToMe(toMe, id, cast) | B(t) |\n| void | removeAllRelationshipsInvolving(object, id) | NRS(o) |\n\nFor example `Object` is just one of *your* objects which you added with `addRelationship()`.\n\nRe `cast` that's just in case you need to cast to a type. This might have been possible in the [boo language](http://boo-language.github.io/) for .NET (which is now dead). Please adapt to your language as needed. Dynamic languages don't need casting.\n\n### C# and Java - Finding just one object\n\nThe pair of find methods `FindObjectPointedToByMe()` and `FindObjectPointedToByMe()` only find _one_ object (even though there may be more), and cast it to the appropriate type.  This is a commonly used convenience method - the more painful way would be to use `FindObjectsPointingToMe()` and just grab the first object from the returned list.\nExactly which object is found is undefined, but would typically be the first one added.\n\n### C# and Java - Relationship Id\n\nWhat to use as the Relationship Id?\n\nThis is traditionally either an integer or a string in the Python implementation.  I have chosen to use a string in the C# and Java implementations, since you can describe relationships easily in this way rather than having to map from an integer back to some meaningful description.\n\n```java\nrm.addRelationship(fromObject, toObject, relationshipId)\n```\n\nwill raise an exception if relationshipId is an empty string.  \n\nAll other functions (except for `addRelationship`) can pass either an empty string or \"\\*\" as the `relationshipId`, which means you are searching for any relationship at all.  You would usually only want to do this if there is only _one_ relationship between class X and class Y, then your P and NR calls can specify \"\\*\" as the `relationshipId` in order to match any relationship between these two objects.  Alternatively, you can use relationship manager's overloaded versions of all its routines (except for `addRelationship`) which don't take a `relationshipId` where `relationshipId` defaults to \"\\*\".\n\n# Resources\n\n- Full [API documentation](https://abulka.github.io/relationship-manager/relmgr/index.html).\n\n- Official [Relationship Manager Pattern](https://abulka.github.io/projects/patterns/relationship-manager/) page incl. academic paper by Andy Bulka.\n\n- Python Implementation [README](https://github.com/abulka/relationship-manager) (this page) and [GitHub project](https://github.com/abulka/relationship-manager).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abulka/relationship-manager",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "relationship-manager",
    "package_url": "https://pypi.org/project/relationship-manager/",
    "platform": "",
    "project_url": "https://pypi.org/project/relationship-manager/",
    "project_urls": {
      "Homepage": "https://github.com/abulka/relationship-manager"
    },
    "release_url": "https://pypi.org/project/relationship-manager/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lightweight Object Database, manages relationships between classes",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8481168,
  "releases": {
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71410224f586832c318f8a404935839488ca40a328f6c6443b9d78348bf8d889",
          "md5": "a660a7c41a217cf196df2b930bb1dbeb",
          "sha256": "4a36dddd0d95bd68a0096619ab09169b71e0e6f63d5389532e81c7908214e648"
        },
        "downloads": -1,
        "filename": "relationship_manager-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a660a7c41a217cf196df2b930bb1dbeb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10563,
        "upload_time": "2020-10-16T04:07:08",
        "upload_time_iso_8601": "2020-10-16T04:07:08.869797Z",
        "url": "https://files.pythonhosted.org/packages/71/41/0224f586832c318f8a404935839488ca40a328f6c6443b9d78348bf8d889/relationship_manager-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fee6c31cf4ae2b5b8da9fb622bddad5e700a1f94bf8974286191cde576167554",
          "md5": "df4d09b023e5ecfbfea37455aa470ac2",
          "sha256": "a333a0cc0b3d6c05b43f0503880b5aa1a64727fbf8105c8bbcd97e2b9679d7c2"
        },
        "downloads": -1,
        "filename": "relationship-manager-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df4d09b023e5ecfbfea37455aa470ac2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12571,
        "upload_time": "2020-10-16T04:07:12",
        "upload_time_iso_8601": "2020-10-16T04:07:12.355341Z",
        "url": "https://files.pythonhosted.org/packages/fe/e6/c31cf4ae2b5b8da9fb622bddad5e700a1f94bf8974286191cde576167554/relationship-manager-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1065b404f60161ff5e66f161a9dd6b3479b24dd6eb87a64210f33e1e87a15e05",
          "md5": "d831c9de1d65f0dc20e0aa11c79900ca",
          "sha256": "995dfd887cb1ada644d2d116e370dcc56181e219b555e951a87be40bd1ba8735"
        },
        "downloads": -1,
        "filename": "relationship_manager-1.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d831c9de1d65f0dc20e0aa11c79900ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14741,
        "upload_time": "2020-10-16T23:22:53",
        "upload_time_iso_8601": "2020-10-16T23:22:53.878613Z",
        "url": "https://files.pythonhosted.org/packages/10/65/b404f60161ff5e66f161a9dd6b3479b24dd6eb87a64210f33e1e87a15e05/relationship_manager-1.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37ed04bf94b6370b77e13930885e5e6c235da0c469b019d77c6999c0b653562a",
          "md5": "8337fa72490e9540d7e70b0b20ec7a29",
          "sha256": "370fcb5fad79e07f3ed353885cf07a4dbfeec963c00563fbd2e864c3680ca514"
        },
        "downloads": -1,
        "filename": "relationship-manager-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8337fa72490e9540d7e70b0b20ec7a29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12758,
        "upload_time": "2020-10-16T23:22:55",
        "upload_time_iso_8601": "2020-10-16T23:22:55.844197Z",
        "url": "https://files.pythonhosted.org/packages/37/ed/04bf94b6370b77e13930885e5e6c235da0c469b019d77c6999c0b653562a/relationship-manager-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a28e8f2e27310a0c00f27ceacf3524ffaeb03842bffcb24c7730649cf672438",
          "md5": "fe96b982ffd7c8a07a7c71dfe2e3d18c",
          "sha256": "14f4894e9caabcb4a28bcdfe12bb23b291db65d5654a78d6eccdb17789a1ffe7"
        },
        "downloads": -1,
        "filename": "relationship_manager-1.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe96b982ffd7c8a07a7c71dfe2e3d18c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14734,
        "upload_time": "2020-10-16T23:28:13",
        "upload_time_iso_8601": "2020-10-16T23:28:13.251170Z",
        "url": "https://files.pythonhosted.org/packages/0a/28/e8f2e27310a0c00f27ceacf3524ffaeb03842bffcb24c7730649cf672438/relationship_manager-1.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2458e132487b688c7621455687f2cea1fa3a874f9e9137ef2d5bf804b23a47f9",
          "md5": "0fb1d32f990d72323e0cdae5f29abd03",
          "sha256": "7ef72b743ea7c9acfe75abcaebb786bf0420821a511546dd631825b162752f23"
        },
        "downloads": -1,
        "filename": "relationship-manager-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0fb1d32f990d72323e0cdae5f29abd03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12776,
        "upload_time": "2020-10-16T23:28:15",
        "upload_time_iso_8601": "2020-10-16T23:28:15.112972Z",
        "url": "https://files.pythonhosted.org/packages/24/58/e132487b688c7621455687f2cea1fa3a874f9e9137ef2d5bf804b23a47f9/relationship-manager-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c668bb784fbe5d9f7344c52740ae6635d8dabbbb949a29491dd5fe9473f9e6d2",
          "md5": "9190584d20e33bf1f7f08d8e572c9b7c",
          "sha256": "096a90c2392d8a7a1d3a7ccd111b45beaeea4d4889dc491f922242ec401c05c1"
        },
        "downloads": -1,
        "filename": "relationship_manager-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9190584d20e33bf1f7f08d8e572c9b7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14292,
        "upload_time": "2020-10-21T10:00:16",
        "upload_time_iso_8601": "2020-10-21T10:00:16.125892Z",
        "url": "https://files.pythonhosted.org/packages/c6/68/bb784fbe5d9f7344c52740ae6635d8dabbbb949a29491dd5fe9473f9e6d2/relationship_manager-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "414e26dec6019d559178a88ef04b689ecd84243a2c2a379b1ada95b7b7aaa385",
          "md5": "c10851e698b55a07646588aadcbc6ecd",
          "sha256": "001569ddcfbd2151177c405bbdccc3c256398936764e43090a7dc2ec674f3f2a"
        },
        "downloads": -1,
        "filename": "relationship-manager-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c10851e698b55a07646588aadcbc6ecd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14461,
        "upload_time": "2020-10-21T10:00:18",
        "upload_time_iso_8601": "2020-10-21T10:00:18.237616Z",
        "url": "https://files.pythonhosted.org/packages/41/4e/26dec6019d559178a88ef04b689ecd84243a2c2a379b1ada95b7b7aaa385/relationship-manager-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9c378e2348d80e2720a93fe821786ef02b837fc9f00f33c0f5f0b845aeb53e0",
          "md5": "75f3d2bb918b5766404b87be50183000",
          "sha256": "84b606c1d9dab22c3127a4a118d7b18df6bcc60dcd4308b18f3271a2321bc61b"
        },
        "downloads": -1,
        "filename": "relationship_manager-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75f3d2bb918b5766404b87be50183000",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26465,
        "upload_time": "2020-10-23T03:15:59",
        "upload_time_iso_8601": "2020-10-23T03:15:59.344880Z",
        "url": "https://files.pythonhosted.org/packages/e9/c3/78e2348d80e2720a93fe821786ef02b837fc9f00f33c0f5f0b845aeb53e0/relationship_manager-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a299bff23045850c8d18f89fd4ef06ba731a330a77ef26662ed2dcce5a8082aa",
          "md5": "a56a844a632577cac48cb0e031275f43",
          "sha256": "82d76a315cd7cdd0f1102bfb886fc5f87a57ccca458984a824022aaa14b43121"
        },
        "downloads": -1,
        "filename": "relationship-manager-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a56a844a632577cac48cb0e031275f43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16709,
        "upload_time": "2020-10-23T03:16:01",
        "upload_time_iso_8601": "2020-10-23T03:16:01.298202Z",
        "url": "https://files.pythonhosted.org/packages/a2/99/bff23045850c8d18f89fd4ef06ba731a330a77ef26662ed2dcce5a8082aa/relationship-manager-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9c378e2348d80e2720a93fe821786ef02b837fc9f00f33c0f5f0b845aeb53e0",
        "md5": "75f3d2bb918b5766404b87be50183000",
        "sha256": "84b606c1d9dab22c3127a4a118d7b18df6bcc60dcd4308b18f3271a2321bc61b"
      },
      "downloads": -1,
      "filename": "relationship_manager-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75f3d2bb918b5766404b87be50183000",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26465,
      "upload_time": "2020-10-23T03:15:59",
      "upload_time_iso_8601": "2020-10-23T03:15:59.344880Z",
      "url": "https://files.pythonhosted.org/packages/e9/c3/78e2348d80e2720a93fe821786ef02b837fc9f00f33c0f5f0b845aeb53e0/relationship_manager-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a299bff23045850c8d18f89fd4ef06ba731a330a77ef26662ed2dcce5a8082aa",
        "md5": "a56a844a632577cac48cb0e031275f43",
        "sha256": "82d76a315cd7cdd0f1102bfb886fc5f87a57ccca458984a824022aaa14b43121"
      },
      "downloads": -1,
      "filename": "relationship-manager-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a56a844a632577cac48cb0e031275f43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16709,
      "upload_time": "2020-10-23T03:16:01",
      "upload_time_iso_8601": "2020-10-23T03:16:01.298202Z",
      "url": "https://files.pythonhosted.org/packages/a2/99/bff23045850c8d18f89fd4ef06ba731a330a77ef26662ed2dcce5a8082aa/relationship-manager-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}