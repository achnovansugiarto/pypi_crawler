{
  "info": {
    "author": "TheCheapestPixels",
    "author_email": "TheCheapestPixels@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers"
    ],
    "description": "pychology\n=========\n\nSimple Python implementations of popular game AI techniques.\n\nCurrent State: Very alpha. Only behavior trees are implemented.\n\n\nBehavior Trees\n--------------\n\nBehavior trees are tree structures that represent the logic of choosing\nand switching the current task. Each node in the tree can be considered\nas a function that is called, and returns an indication of the current\ntask's state; Whether it is active, done, or has failed.\n\nThe tasks themselves are the leafs of the tree. `pychology` expects you\nto provide functions to call when a task is started or continued, and\nthat it returns one of the above mentioned node states, namely\n`NodeState.ACTIVE`, `NodeState.DONE`, or `NodeState.FAILED`. These\nfunctions then are plugged into `pychology.behavior_trees.Action`.\n\nInner nodes either have a single child and do some logic; These are\ncalled decorators, and do a lot of heavy lifting. They can change the\nreturning node state, prevent sub-trees from being executed, check for\nconditions, count how often or for how long a sub-tree has been active,\nprovide debug information, and much more.\n\nThere's also nodes that have multiple children. The two most popular are\nthe Chain (usually called Sequence), which executes a series of tasks\n(or rather sub-trees) one after the other, and Priorities (also called\nSelector or Fallback) which tries running one sub-tree after the other\nuntil one reports something other than failure.\n\nThe class `pychology.behavior_trees.BehaviorTree` can act as a root node\nthat automatically resets the tree's state after it has finished or\nfailed, and can also run arbitrary code to integrate with the wider\nenvironment that the tree is embedded in.\n\nAn example on how to go through a door:\n\n```python\nBehaviorTree(\n    Chain(\n        DoneOnPrecondition(                  # The first task is done\n            is_door_open,                    # if the door is open,\n            Priorities(                      # otherwise try to\n                Action(open_door),           # open it\n                ReturnActiveOnDone(          # or try again after\n                    Action(unlock_door),     # unlocking it,\n                ),\n                ReturnActiveOnDone(          # or try again after\n                    Action(pick_door_lock),  # picking the lock,\n                ),\n                FailOnPrecounter(            # or try\n                    4,                       # three times to\n                    Action(kick_in_door),    # kick in the door.\n                ),\n            ),\n        ),\n        Action(walk_through_door),           # Afterwards, go through.\n    ),\n)\n```\n\n\nTODO\n----\n\n* Project\n  * Packaging\n* Behavior Trees\n  * Multinodes: Parallel, weighted random choice\n  * Decorators: More return value logic\n  * Blackboard support\n  * Debug tools\n  * Visualization\n  * De-/Serialization\n  * Tests\n* Hierarchical Finite State Machines (HFSM): Everything\n* Goal-Oriented Action Planning (GOAP): Everything\n* Hierarchical Task Planning (HTN): Everything\n* [Whatever this is](https://www.youtube.com/watch?v=Z-xU96pAuqs)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TheCheapestPixels/pychology",
    "keywords": "behavior tree",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pychology",
    "package_url": "https://pypi.org/project/pychology/",
    "platform": "",
    "project_url": "https://pypi.org/project/pychology/",
    "project_urls": {
      "Homepage": "https://github.com/TheCheapestPixels/pychology",
      "Source": "https://github.com/TheCheapestPixels/pychology"
    },
    "release_url": "https://pypi.org/project/pychology/0.1a0/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "Game AI algorithms in pure Python",
    "version": "0.1a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14165458,
  "releases": {
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60d0d8cdd9da046419e5b02ef6325b5c323dc4381cc87dec3dffa597b502ec3",
          "md5": "d6b72fd30d922181aab088b46679efef",
          "sha256": "7b70fd245101a91ff78c41ca270ce0ccbeeacf66e1c6c947a2cd7adb00ac3d64"
        },
        "downloads": -1,
        "filename": "pychology-0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6b72fd30d922181aab088b46679efef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 7053,
        "upload_time": "2021-08-20T18:28:53",
        "upload_time_iso_8601": "2021-08-20T18:28:53.426877Z",
        "url": "https://files.pythonhosted.org/packages/c6/0d/0d8cdd9da046419e5b02ef6325b5c323dc4381cc87dec3dffa597b502ec3/pychology-0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c60d0d8cdd9da046419e5b02ef6325b5c323dc4381cc87dec3dffa597b502ec3",
        "md5": "d6b72fd30d922181aab088b46679efef",
        "sha256": "7b70fd245101a91ff78c41ca270ce0ccbeeacf66e1c6c947a2cd7adb00ac3d64"
      },
      "downloads": -1,
      "filename": "pychology-0.1a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6b72fd30d922181aab088b46679efef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 7053,
      "upload_time": "2021-08-20T18:28:53",
      "upload_time_iso_8601": "2021-08-20T18:28:53.426877Z",
      "url": "https://files.pythonhosted.org/packages/c6/0d/0d8cdd9da046419e5b02ef6325b5c323dc4381cc87dec3dffa597b502ec3/pychology-0.1a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}