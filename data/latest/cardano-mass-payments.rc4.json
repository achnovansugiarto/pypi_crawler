{
  "info": {
    "author": "ADAPlus",
    "author_email": "hello@adaplus.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Office/Business :: Financial :: Accounting"
    ],
    "description": "# Cardano Mass Payments\n\n\n---------------------\n\n\n\nCardano Mass Payments is a Cardano python package that automates and optimizes the sending of large numbers of transactions using a single command.\n\n\n\n### Table of contents\n\n\n\n*   [Requirements](#requirements)\n*   [Installation](#installation)\n*   [Features](#features)\n*   [Package Usage](#package-usage)\n    *   [Parameter Details](#parameter-details)\n    *   [Flag Details](#flag-details)\n    *   [Example Command](#example-command)\n*   [Code for Transaction Plan Generation](#code-for-transaction-plan-generation)\n*   [Code for Mass Payments Script Generation](#code-for-mass-payments-script-generation)\n*   [Algorithm](#algorithm)\n*   [Possible Errors](#possible-errors)\n\n\n\n### Requirements\n\n\n\nThe package can only be run on `python >= 3.7`.\n\nThese are the minimum required versions of the required tools:\n\n*   `pycardano >= 0.7.0`\n\nCurrently, all Script methods requires the following cardano tools:\n- Cardano Node: `>=1.35.5`\n\n\n### Installation\n\n\n\nInstall the library using [pip](https://pip.pypa.io/en/stable/):\n\n\n\n```plain\npip install cardano-mass-payments\n```\n\n\n\n### Features\n\n*   **Can be used as a Python script** - Mass Payments Script can be generated just by calling the `cardano-mass-payments-generate` command.\n*   **Can be used as a Python library** - Mass Payments Script can be generated by incorporating the `cardano-mass-payments` library in your python code.\n*   **Fee optimization** - The library groups the payments into transaction groups, making fees significantly less than the total fees when sending these payments individually.\n*   **Support for both Cardano CLI and PyCardano** - Currently, `cardano-mass-payments` supports communication to Cardano via `cardano-cli` and `pycardano`\n*   **Transaction plan generation** - Alongside the scripts, `cardano-mass-payments` also includes generation of a file which contains the final and adjusted transaction plan which will be the basis of the mass payments script. The script also includes commands that update the transaction plan file.\n*   **Can recover and continue in case of an error during execution** - Whenever an error is encountered in the script, the library can create an updated script using the updated transaction plan file (which skips already submitted transactions) and can go straight to pending transactions.\n*   **Support for custom metadata and messages to be included in the transactions** - Cardano Metadata is supported and Transaction Messages will be automatically fixed by the script to satisfy Cardano's policy regarding transaction messages.\n*   **Structured JSON output** - With JSON Output Type, script output will be on a structured JSON format, from the final output, to the error messages as well.\n*   **Dust collection** - Allows for handling Input UTxOs with less than a specified amount (dust) and combining them into one Input UTxO.\n*   **Immediate execution** - Allows for automatically executing the newly generated script from the `cardano-mass-payments-generate` command.\n\n\n\n### Package Usage\n\n\n#### Parameter Details\n\n\n| **Parameter**                 | **Description**                                                                                                                                                                                                                                                                                                                                                                                   |\n|-------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `--cardano-network`           | Dictates which Cardano network the package will connect to.<br>Possible values:<br>\\- `MAINNET`<br>\\- `TESTNET`                                                                                                                                                                                                                                                                                   |\n| `--script-method`             | Dictates which method to use for handling the internal logic (getting protocol parameters, getting user utxos).<br>Possible values:<br>\\- `HOST_CLI` - connects package to the Cardano CLI installed in the machine<br>\\- `DOCKER_CLI` - connects package to the Cardano CLI Docker Image<br>\\- `PYCARDANO` - uses Pycardano in the package                                                       |\n| `--output-type`               | Dictates the type of the generated output.<br>Possible values:<br>\\- `BASH_SCRIPT` - Creates a bash file and displays the file name in the console<br>\\- `CONSOLE` - Displays the script contents in console<br>\\- `JSON` - Display a JSON object in console containing the script file name<br>\\- `TRANSACTION_PLAN` - Only create the transaction plan and display the file name in the console |\n| `--sources-csv`               | CSV File containing the source address details<br>Format per line:<br>`<source_address>,<signing_key_file_of_address_1>,<signing_key_file_of_address_2>,...,<signing_key_file_of_address_n>`                                                                                                                                                                                                      |\n| `--payments-csv`              | CSV File containing the payment details that will be sent to Cardano.<br>Format per line:<br>`<destination_address>,<amount_in_lovelace>`                                                                                                                                                                                                                                                         |\n| `--allowed-ttl-slots`         | Number of slots allowed before the transaction to be deemed invalid.<br>Default: `1000`                                                                                                                                                                                                                                                                                                           |\n| `--dust-collection-method`    | Method used for dust collection.<br>Possible values:<br>\\- `COLLECT_TO_SOURCE` - dust will all be collected and sent to the primary source address<br>\\- `COLLECT_PER_ADDRESS` - dust will be collected and sent per address                                                                                                                                                                      |\n| `--dust-collection-threshold` | Allowable amount in lovelace that will be used for checking if the transaction is deemed as a dust.<br>Default: `10000000`                                                                                                                                                                                                                                                                        |\n| `--source-address`            | Primary Source Address (should be in the `--sources-csv` file). If not provided, will use the first address in the `--sources-csv` file.                                                                                                                                                                                                                                                          |\n| `--source-signing-key-file`   | Signing Key File of Primary Source Address. If not provided, will use the corresponding signing key file of the primary source address in the `--sources-csv` file.                                                                                                                                                                                                                               |\n| `--metadata-json-file`        | JSON File containing the metadata template that will be included in the cardano transaction.                                                                                                                                                                                                                                                                                                      |\n| `--metadata-message-file`     | TXT File containing the message that will be added in the transaction metadata.                                                                                                                                                                                                                                                                                                                   |\n| `--transaction-plan-file`     | TXT Transaction Plan File which can be used to generate the script.                                                                                                                                                                                                                                                                                                                               |\n| `--magic-number`              | Cardano Network Magic Number where the python script will connect to.                                                                                                                                                                                                                                                                                                                             |\n| `--cardano-node-docker-image` | Docker Image name of the Cardano node.                                                                                                                                                                                                                                                                                                                                                            |\n\n\n#### Flag Details\n\n\n\n| **Flag**                         | **Description**                                                                                                         |\n|----------------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| `--add-comments`                 | Add comments in the generated bash script                                                                               |\n| `--use-docker-cli-for-pycardano` | By default, Pycardano connects to Cardano CLI. This flag is used if the connected cli is the host one or the docker one |\n| `--enable-dust-collection`       | Enable Dust Collection (Additional Step of combining small utxos into 1 utxo)                                           |\n| `--execute-script-now`           | Execute the script right after it's generated                                                                           |\n| `--include-rewards`              | Withdraw rewards of source address and include it in the transaction                                                    |\n\n\n\n#### Example Command\n\n\n\n```plain\ncardano-mass-payments-generate --sources-csv source.csv --payments-csv payments.csv --cardano-network TESTNET\n--add-comments --output-type BASH_SCRIPT --metadata-message-file metadata.txt --metadata-json-file metadata.json\n--execute-script-now --enable-dust-collection --script-method PYCARDANO --use-docker-cli-for-pycardano\n```\n\n\n\n### Code for Transaction Plan Generation\n\n\n\nUsing the python package, we can generate the transaction plan object and save it in as a json file\n\n\n\n```plain\nfrom cardano_mass_payments.masspayments import generate_transaction_plan\nfrom cardano_mass_payments.constants.common import (\n    ScriptOutputFormats,\n    CardanoNetwork,\n    ScriptMethod,\n    DustCollectionMethod,\n)\n\ntransaction_plan = generate_transaction_plan(\n    output_format=ScriptOutputFormats.BASH_SCRIPT,\n    source_address=\"test_source_address\",\n    source_details={\n        \"test_source_address\": \"test_signing_key_file\"\n    },\n    payments_csv_file=\"payments.csv\",\n    cardano_network=CardanoNetwork.TESTNET,\n    script_method=ScriptMethod.METHOD_DOCKER_CLI,\n    allowed_ttl_slots=1000,\n    dust_collection_method=DustCollectionMethod.COLLECT_TO_SOURCE,\n    dust_collection_threshold=10000000,\n    enable_dust_collection=True,\n)\nwith open(\"transaction_plan_filename\", \"w+\") as transaction_plan_file:\n    transaction_plan_file.write(transaction_plan.json())\n```\n\n\n\n### Code for Mass Payments Script Generation\n\n\n\nUsing the python package, we can also generate the mass payments script\n\n\n\n```plain\nfrom cardano_mass_payments.masspayments import generate_bash_script\nfrom cardano_mass_payments.constants.common import (\n    CardanoNetwork,\n    ScriptMethod,\n)\n\nbash_script_result = generate_bash_script(\n    transaction_plan=transaction_plan,  # Generated transaction plan from generate_transaction_plan\n    source_details={\n        \"test_source_address\": \"test_signing_key_file\"\n    },\n    source_address=\"test_source_address\",\n    metadata_file=\"metadata.json\",\n    allow_ttl_slots=1000,\n    add_comments=True,\n    store_in_file=False,\n    network=CardanoNetwork.TESTNET,\n    method=ScriptMethod.METHOD_DOCKER_CLI,\n)\n```\n\n\n\n### Algorithm\n\n1.  Parse the source and payment CSV files.\n2.  If `--transaction-plan-file` is provided, parse the transaction plan file.\n3.  Else, generate a transaction plan based on the parsed source and payment details.\n    1.  Create the initial transaction plan setup.\n        1.  Check the initial transaction byte size of the possible payment group UTxO (1 input, n payments).\n        2.  If the transaction size is greater than the maximum, adjust the number of payments until the transaction size satisfies the size check.\n        3.  Divide the payments into k groups with n (obtained from step `3.1.2`) payments.\n        4.  Select Input UTxOs that can satisfy the total transaction amounts and fees.\n        5.  Create a mock transaction with the selected input utxos and payments based on the payment groups + 1 payment utxo for the change.\n        6.  Get the size of the mock transaction. This will determine if dust collection is required or not.\n            1.  If it's greater than the maximum, dust collection is required.\n    2.  Dust Collection Step\n        1.  While all selected input utxos are not yet used,\n            1.  Select Input UTxOs that can satisfy the maximum transaction byte size\n                1.  n inputs, 1 payment for 1st group\n                2.  n+1 inputs, 1 payment for the remaining groups (the additional input is the input utxo from the previous dust group)\n            2.  Create a Dust Group with the selected inputs\n    3.  Adjust UTxO Step\n        1.  Classify the payment groups on whether their transaction size is above/below the maximum transaction size.\n        2.  For those above the maximum,\n            1.  Remove payments until transaction satisfy the maximum size.\n            2.  Move the removed payments in a temporary list.\n        3.  For those below the maximum,\n            1.  Get payments from the temporary list and add them until transaction doesn't satisfy the maximum size.\n        4.  If there are payments in the temporary list,\n            1.  If the preparation transaction size is less than the maximum, add payments until transaction doesn't satisfy the maximum size.\n        5.  If there are remaining payments in the temporary list, treat them as a new payment group.\n    4.  Generate the transaction plan using the adjusted details obtained in step `3.3`.\n4.  Create a transaction plan file from the generated transaction plan.\n5.  If `--output-type` is `TRANSACTION_PLAN`, return the transaction plan filename.\n6.  Else, create a bash script from the transaction plan and print the corresponding `--output-type`.\n    *   `BASH_SCRIPT` - Display the file name in the console.\n    *   `CONSOLE` - Displays the script contents in console.\n    *   `JSON` - Display a JSON object in console containing the script file name.\n7.  If `--execute-script-now`,\n    1.  Display transaction plan details.\n        *   Transaction Plan Filename\n        *   Number of Dust Transactions to be Generated\n        *   Number of Payment Transaction Groups Generated\n        *   Total Amount Required\n        *   Expected Maximum Change Returned\n    2.  A prompt will be displayed asking the user to review the plan and asks to continue with the execution.\n    3.  Repeat asking for input if the user inputs any value other than yes/no.\n    4.  If yes, execute the script.\n    5.  If no, a \"Thank You\" message will be displayed.\n\n\n\n### Possible Errors\n\n\n\n| **Error**                     | **JSON Output**                                                                                                                                                                            | **Description**                                                                                                                                           |\n|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| <br>`ScriptError`<br>         | {<br> &emsp;\"code\": 500001,<br> &emsp;\"message\": STR,<br> &emsp;\"context\": DICT<br>}                                                                                                       | Unexpected Errors encountered during any part of the mass payments script generation                                                                      |\n| <br>`InsufficientBalance`<br> | {<br> &emsp;\"code\": 400001,<br> &emsp;\"message\": STR,<br> &emsp;\"context\": {<br> &emsp; &emsp;\"required\\_amount\": INT,<br> &emsp; &emsp;\"current\\_amount\": INT<br> &emsp;}<br>}            | Current Balance doesn't satisfy the total transaction amount and fee required for submission                                                              |\n| <br>`InvalidMethod`<br>       | {<br> &emsp;\"code\": 400002,<br> &emsp;\"message\": \"Invalid Method\",<br> &emsp;\"context\": {<br> &emsp; &emsp;\"allowed\\_methods\": STR\\[\\],<br> &emsp; &emsp;\"method\": STR<br> &emsp;}<br>}    | Method is not included in the allowed methods. This will show on invalid command argument value.                                                          |\n| <br>`InvalidNetwork`<br>      | {<br> &emsp;\"code\": 400003,<br> &emsp;\"message\": \"Invalid Network\",<br> &emsp;\"context\": {<br> &emsp; &emsp;\"allowed\\_networks\": STR\\[\\],<br> &emsp; &emsp;\"network\": STR<br> &emsp;}<br>} | Network is not included in the allowed networks. This will show on invalid command argument value.                                                        |\n| <br>`InvalidFileError`<br>    | {<br> &emsp;\"code\": 400004,<br> &emsp;\"message\": STR,<br> &emsp;\"context\": {<br> &emsp; &emsp;\"file\":STR<br> &emsp;}<br>}                                                                  | Unexpected Errors encountered while doing file related function (Source and Payment CSV Files, Signing Key Files, Metadata Files, Transaction Plan Files) |\n| <br>`InvalidType`<br>         | {<br> &emsp;\"code\": 400005,<br> &emsp;\"message\": STR,<br> &emsp;\"context\": {<br> &emsp; &emsp;\"type\":STR<br> &emsp;}<br>}                                                                  | Value Type doesn't match with the required field type. This will show on invalid command argument values.                                                 |\n| <br>`EmptyList`<br>           | {<br> &emsp;\"code\": 400006,<br> &emsp;\"message\": STR<br>}                                                                                                                                  | List is empty.                                                                                                                                            |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adaplus/cardano-mass-payments",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cardano-mass-payments",
    "package_url": "https://pypi.org/project/cardano-mass-payments/",
    "platform": null,
    "project_url": "https://pypi.org/project/cardano-mass-payments/",
    "project_urls": {
      "Homepage": "https://github.com/adaplus/cardano-mass-payments"
    },
    "release_url": "https://pypi.org/project/cardano-mass-payments/0.1.3/",
    "requires_dist": [
      "pycardano (==0.7.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool for handling mass payments for Cardano (ADA)",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17270852,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bebebb0e94d448e8f6770a2be72a26e3def5080a946d14122c99dc1fa2c44399",
          "md5": "fa9f8a9c7a5e0bf3378e74b03ab54bbe",
          "sha256": "c3e6402475e51e62685c9a94eb512ce0430394645ec1e3b733d9914ba7ae4e41"
        },
        "downloads": -1,
        "filename": "cardano_mass_payments-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa9f8a9c7a5e0bf3378e74b03ab54bbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 83473,
        "upload_time": "2022-05-20T11:29:13",
        "upload_time_iso_8601": "2022-05-20T11:29:13.862248Z",
        "url": "https://files.pythonhosted.org/packages/be/be/bb0e94d448e8f6770a2be72a26e3def5080a946d14122c99dc1fa2c44399/cardano_mass_payments-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d49b988923abbe3d5332be8fb4a4736111fbd10c1010969666feb028086521f5",
          "md5": "f8a3d4c9b0c6c906506f4d593f4f11f9",
          "sha256": "28cf9431f3638ed876a393f822828ca55ae0457aca5e8f8cc1e7a699e4dcd29d"
        },
        "downloads": -1,
        "filename": "cardano-mass-payments-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f8a3d4c9b0c6c906506f4d593f4f11f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 65252,
        "upload_time": "2022-05-20T11:29:16",
        "upload_time_iso_8601": "2022-05-20T11:29:16.917821Z",
        "url": "https://files.pythonhosted.org/packages/d4/9b/988923abbe3d5332be8fb4a4736111fbd10c1010969666feb028086521f5/cardano-mass-payments-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b287d90dfe4ee8141c32f0d99792494d6b1b71da20929820b73e1f3aa7e87879",
          "md5": "4b9ed3550acdd68db64ac6e1c995a401",
          "sha256": "bbbd7fce88dcc21cf4ff4594bee152a7bcde2444d85117065c12f93fc0f75bc0"
        },
        "downloads": -1,
        "filename": "cardano_mass_payments-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b9ed3550acdd68db64ac6e1c995a401",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 83686,
        "upload_time": "2022-06-02T11:01:44",
        "upload_time_iso_8601": "2022-06-02T11:01:44.619664Z",
        "url": "https://files.pythonhosted.org/packages/b2/87/d90dfe4ee8141c32f0d99792494d6b1b71da20929820b73e1f3aa7e87879/cardano_mass_payments-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be09fa9899f1d7a34d0da402c27cf6d4f78598525970010235df0e3d1ad1256",
          "md5": "6f1747e5513e62ecd5289b6c06b46322",
          "sha256": "c8bfbe354a538cd6b98c55a9f9a222fe63d9c9104fbded9ebe5bc441161bc8e5"
        },
        "downloads": -1,
        "filename": "cardano-mass-payments-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f1747e5513e62ecd5289b6c06b46322",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 65489,
        "upload_time": "2022-06-02T11:01:47",
        "upload_time_iso_8601": "2022-06-02T11:01:47.587959Z",
        "url": "https://files.pythonhosted.org/packages/3b/e0/9fa9899f1d7a34d0da402c27cf6d4f78598525970010235df0e3d1ad1256/cardano-mass-payments-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94c760bcfbfe532219a0b2cce0dd5c431a7c08e7ed6f0c2d8c24d4086cf30d87",
          "md5": "a9fd414c95ca850e85eb542678d6b324",
          "sha256": "1c9ccdc8d43b054695d4f2c2dfda31c534d2061c67e87b1b3f37406119d877ef"
        },
        "downloads": -1,
        "filename": "cardano_mass_payments-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9fd414c95ca850e85eb542678d6b324",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 90199,
        "upload_time": "2022-07-05T09:06:08",
        "upload_time_iso_8601": "2022-07-05T09:06:08.661887Z",
        "url": "https://files.pythonhosted.org/packages/94/c7/60bcfbfe532219a0b2cce0dd5c431a7c08e7ed6f0c2d8c24d4086cf30d87/cardano_mass_payments-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a193e93f722ad9f7032a78a12eda99e978267441443d93e4f680e795b766c376",
          "md5": "22269fdc084ea9e157f3f335f9ace5ff",
          "sha256": "b4b761be46e2d297140ba8626e05de1ada79be3768391a59b66615c6f2d3b918"
        },
        "downloads": -1,
        "filename": "cardano-mass-payments-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "22269fdc084ea9e157f3f335f9ace5ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 70336,
        "upload_time": "2022-07-05T09:06:13",
        "upload_time_iso_8601": "2022-07-05T09:06:13.156960Z",
        "url": "https://files.pythonhosted.org/packages/a1/93/e93f722ad9f7032a78a12eda99e978267441443d93e4f680e795b766c376/cardano-mass-payments-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d466a1a030cfe3db2f1443f4a2289e5e69ee97c33f26524ca5800874e75d6227",
          "md5": "4b329e52d41644f4aa06d052ab690760",
          "sha256": "1cfa0f705e65080b414dd441e9a11c441d9b1c8afd74e056ae5f37ba9c09b423"
        },
        "downloads": -1,
        "filename": "cardano_mass_payments-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b329e52d41644f4aa06d052ab690760",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 91249,
        "upload_time": "2023-03-13T12:36:27",
        "upload_time_iso_8601": "2023-03-13T12:36:27.493571Z",
        "url": "https://files.pythonhosted.org/packages/d4/66/a1a030cfe3db2f1443f4a2289e5e69ee97c33f26524ca5800874e75d6227/cardano_mass_payments-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98a523d162f1a3193b0b8cbdaa1f5367f89f5c14a2adf27c4a3b3fe9276bc3b3",
          "md5": "24081cc2ec4de5400db46270d7b57184",
          "sha256": "c32a6cd32f07b1a15113a85e4711fb5879c4dbb8fbd3a56fa76d58ec607289cd"
        },
        "downloads": -1,
        "filename": "cardano-mass-payments-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "24081cc2ec4de5400db46270d7b57184",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 73795,
        "upload_time": "2023-03-13T12:36:29",
        "upload_time_iso_8601": "2023-03-13T12:36:29.695458Z",
        "url": "https://files.pythonhosted.org/packages/98/a5/23d162f1a3193b0b8cbdaa1f5367f89f5c14a2adf27c4a3b3fe9276bc3b3/cardano-mass-payments-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d466a1a030cfe3db2f1443f4a2289e5e69ee97c33f26524ca5800874e75d6227",
        "md5": "4b329e52d41644f4aa06d052ab690760",
        "sha256": "1cfa0f705e65080b414dd441e9a11c441d9b1c8afd74e056ae5f37ba9c09b423"
      },
      "downloads": -1,
      "filename": "cardano_mass_payments-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b329e52d41644f4aa06d052ab690760",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 91249,
      "upload_time": "2023-03-13T12:36:27",
      "upload_time_iso_8601": "2023-03-13T12:36:27.493571Z",
      "url": "https://files.pythonhosted.org/packages/d4/66/a1a030cfe3db2f1443f4a2289e5e69ee97c33f26524ca5800874e75d6227/cardano_mass_payments-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98a523d162f1a3193b0b8cbdaa1f5367f89f5c14a2adf27c4a3b3fe9276bc3b3",
        "md5": "24081cc2ec4de5400db46270d7b57184",
        "sha256": "c32a6cd32f07b1a15113a85e4711fb5879c4dbb8fbd3a56fa76d58ec607289cd"
      },
      "downloads": -1,
      "filename": "cardano-mass-payments-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "24081cc2ec4de5400db46270d7b57184",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 73795,
      "upload_time": "2023-03-13T12:36:29",
      "upload_time_iso_8601": "2023-03-13T12:36:29.695458Z",
      "url": "https://files.pythonhosted.org/packages/98/a5/23d162f1a3193b0b8cbdaa1f5367f89f5c14a2adf27c4a3b3fe9276bc3b3/cardano-mass-payments-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}