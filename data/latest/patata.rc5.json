{
  "info": {
    "author": "",
    "author_email": "Oriol Alfonso <oriol@oalfonso.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Framework :: aiohttp",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Patata\n\n<p align=\"center\">\n    <em>Easy parallel and concurrent requests</em>\n</p>\n\n<p align=\"center\">\n<a href=\"https://github.com/oalfonso-o/patata/actions?query=workflow%3ACI+event%3Apush+branch%3Amain\" target=\"_blank\">\n    <img src=\"https://github.com/oalfonso-o/patata/workflows/CI/badge.svg?event=push&branch=main\" alt=\"Test\">\n</a>\n<a href=\"https://pypi.org/project/patata\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/patata?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n<a href=\"https://pypi.org/project/patata\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/pyversions/patata.svg?color=%2334D058\" alt=\"Supported Python versions\">\n</a>\n</p>\n\nThe idea of this package is to wrap `multiprocessing` and `async` concurrency and allow the user to perform thousands of requests in parallel and concurrently without having to worry about pools of processes and async event loops.\n\nIt only supports GET and POST requests. More methods will be implemented in later versions.\n\nThe input is an iterable and the output is a generator. As soon as the requests get their response they are yielded until all the requests of the input are done.\n\nEach element of the iterable is a patata.Request object with `id_`, `url` and `data`.\nEach element yielded is a patata.Response with the same `id_`, `status_code` and `data` which is the json response. With the `id_` you can map the responses to the input requests.\n\nThis is useful for cases where you have a huge amount of requests to perform to an API and you\nneed to do them as fast as possible.\n\nThe client by default detects the number of CPUs available and starts one process per each CPU.\nThen chunks the input iterator to provide requests to all the processes.\nEach process for each task opens an event loop and performs all those requests concurrently. Once\nall requests are awaited, the chunk with all the responses is returned back to the main process.\nThis is why we can see that our generator is receiving the responses un bulks.\n\n## Install:\n\nFrom PyPi:\n```\npip install patata\n```\n\n## Usage:\n\nUse always context manager, for example for GET:\n\n``` python\n>>> from patata.models import Request\n>>> from collections import deque\n>>> \n>>> def mygen():\n...     for i in range(10_000):\n...          yield Request(id_=i, url=\"http://localhost:12345/\")\n... \n>>> with Patata() as client:\n...     responses = client.http(\"get\", mygen())\n...     _ = deque(responses)\n... \npatata              INFO      Start processing requests with Patata parameters:\npatata              INFO        method:             GET\npatata              INFO        num_workers:        8\npatata              INFO        multiprocessing:    True\npatata              INFO        queue_max_size:     100000\npatata              INFO        input_chunk_size:   10000\npatata              INFO        pool_submit_size:   1000\npatata              INFO      All requests processed:\npatata              INFO        Total requests:     10000\npatata              INFO        Total time (s):     5.00\npatata              INFO        Requests/s:         1998.37\n>>> _.pop()\nResponse(id_=9000, status_code=200, data={'message': 'Hello world!'})\n```\n\nIn this example are providing a generator as input but you can provide any kind of iterable.\n\nYou can also provide callbacks to process the responses in each process before being yielded, so you can add your own post-processing of the responses taking benefit of multiprocessing. Example:\n``` python\n>>> from patata import Patata\n>>> from patata.models import Request\n>>> from collections import deque\n>>> \n>>> def mycallback(response):\n...     response.id_ = 1337\n...     return response\n... \n>>> def mygen():\n...     for i in range(10_000):\n...          yield Request(id_=i, url=\"http://localhost:12345/\")\n... \n>>> with Patata() as client:\n...     responses = client.http(\"get\", mygen(), callbacks=[mycallback])\n...     _ = deque(responses)\n... \npatata              INFO      Start processing requests with Patata parameters:\npatata              INFO        method:             GET\npatata              INFO        num_workers:        8\npatata              INFO        multiprocessing:    True\npatata              INFO        queue_max_size:     100000\npatata              INFO        input_chunk_size:   10000\npatata              INFO        pool_submit_size:   1000\npatata              INFO      All requests processed:\npatata              INFO        Total requests:     10000\npatata              INFO        Total time (s):     4.89\npatata              INFO        Requests/s:         2046.95\n>>> _.pop()\nResponse(id_=1337, status_code=200, data={'message': 'Hello world!'})\n```\n\n## Parameters\n\nYou can configure some parameters:\n\n[patata.Patata](https://github.com/oalfonso-o/patata/blob/main/patata/client.py#L24) parameters:\n\n- `num_workers`:\n    - type: int\n    - required: False\n    - default: os.cpu_count()\n    - description: Number of processes to open with multiprocessing\n- `queue_max_size`:\n    - type: int\n    - required: False\n    - default: 100.000\n    - description: Maximum number of items that can be enqueued. This default number proved to not blow up the memory and to have enough items in the queue to have always work to do with 8 processes. Feel free to adjust it, just watch out the memory usage.\n- `input_chunk_size`:\n    - type: int\n    - required: False\n    - default: 10.000\n    - description: This is the size of the chunks for the input. We will be reading the input iterator in chunks of this size up to `queue_max_size`.\n- `pool_submit_size`:\n    - type: int\n    - required: False\n    - default: 1.000\n    - description: Each chunk of `input_chunk_size` will also be chunked to minor chunks of this size before being submited to the pool. The workers will be consuming chunks of this size and each of these chunks will be requested in an event loop.\n\n\n[patata.Patata.http](https://github.com/oalfonso-o/patata/blob/main/patata/client.py#L42)\n\nParameters:\n\n- `method`:\n    - type: str\n    - required: True\n    - description: Specify the method of the requests. Valid values: GET, POST.\n- `requests`:\n    - type: Iterable[Tuple[int, str]]\n    - required: True\n    - description: Provide the tuples containing the ID of the request and the URL to be requested.\n- `callbacks`:\n    - type: Iterable[Tuple[int, str]]\n    - required: False\n    - default: []\n    - description: Callables that will be executed for each response, they must expect receiving a Response and must return another Response\n\nResponse: Generator[Tuple[int, str], None, None]. For each input tuple an output tuple will be returned containing the same ID + the JSON of the response.\n\n\nTODO:\n- tests\n- define proper exceptions\n- add flag to specify how many requests can fail, this will need to specify also which codes are \"ok\" or which are \"not ok\" do decide when to increment this count and decide to stop\n- include the missing methods like PUT, DELETE, etc",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2023 Oriol Alfonso Riba  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "patata",
    "package_url": "https://pypi.org/project/patata/",
    "platform": null,
    "project_url": "https://pypi.org/project/patata/",
    "project_urls": {
      "documentation": "https://github.com/oalfonso-o/patata/blob/main/README.md",
      "repository": "https://github.com/oalfonso-o/patata"
    },
    "release_url": "https://pypi.org/project/patata/3.2.1/",
    "requires_dist": [
      "aiohttp<4,>=3.8.4",
      "importlib-metadata; python_version < '3.9'",
      "pydantic<2,>=1.9"
    ],
    "requires_python": ">=3.8",
    "summary": "Simple lightweight HTTP client to perform GET or POST requests in parallel with multiprocessing and in each process use aiohttp to do them concurrently and maximize the throughtput.",
    "version": "3.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17475758,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c869422a920037f53633a3d73076368fd7ee26720d157bf45f8de4a311c99bc3",
          "md5": "c3f7817d0e0707aa41c01101587a02e6",
          "sha256": "7131866788c2b023ea2fd086de0af33d29ddc2dbe6b84bac7aa4a9ca93b2f070"
        },
        "downloads": -1,
        "filename": "patata-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3f7817d0e0707aa41c01101587a02e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7004,
        "upload_time": "2023-03-23T17:20:34",
        "upload_time_iso_8601": "2023-03-23T17:20:34.078716Z",
        "url": "https://files.pythonhosted.org/packages/c8/69/422a920037f53633a3d73076368fd7ee26720d157bf45f8de4a311c99bc3/patata-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "273a66c6c3a9b1d6911cffeb794168025aeb7efc59357cde79355aa37772548b",
          "md5": "c0b91c2cb6e6253db9d280e0c3014db4",
          "sha256": "c852cc8dca891811b02db5f7da01b62dcc6dce6aa60146cf769c7459f120219c"
        },
        "downloads": -1,
        "filename": "patata-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c0b91c2cb6e6253db9d280e0c3014db4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6594,
        "upload_time": "2023-03-23T17:20:35",
        "upload_time_iso_8601": "2023-03-23T17:20:35.971773Z",
        "url": "https://files.pythonhosted.org/packages/27/3a/66c6c3a9b1d6911cffeb794168025aeb7efc59357cde79355aa37772548b/patata-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eff8822a147c805b976bffb0117d9a22d24e9941036c250fda3ad426e755a3c",
          "md5": "6c52b8c80156ef26501706d6a04fddc3",
          "sha256": "96d90bf2c1f84342cf6259d2c85ab1ba7b30e361253f95d4a246bfca5fcc8ca0"
        },
        "downloads": -1,
        "filename": "patata-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c52b8c80156ef26501706d6a04fddc3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7811,
        "upload_time": "2023-03-23T20:25:44",
        "upload_time_iso_8601": "2023-03-23T20:25:44.158954Z",
        "url": "https://files.pythonhosted.org/packages/9e/ff/8822a147c805b976bffb0117d9a22d24e9941036c250fda3ad426e755a3c/patata-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62cb9dfc4884bb209325025942439a3e445dd7ab8fe5b96ed2162b3e25cbedd8",
          "md5": "076922d169ed7df7d8da60e2afe93809",
          "sha256": "7fcf4ddc575b803c348fd79424c702d2c4ea4b6ef4ec9633cfc507aaa845cc4a"
        },
        "downloads": -1,
        "filename": "patata-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "076922d169ed7df7d8da60e2afe93809",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7225,
        "upload_time": "2023-03-23T20:25:46",
        "upload_time_iso_8601": "2023-03-23T20:25:46.056194Z",
        "url": "https://files.pythonhosted.org/packages/62/cb/9dfc4884bb209325025942439a3e445dd7ab8fe5b96ed2162b3e25cbedd8/patata-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeaac26b5b4a48b2a10be9da702a14bf03802be09f32fcf9d255bfb49ae2ee2c",
          "md5": "9db41a0357b783826806882738b61cec",
          "sha256": "9980acc8e3e397438726568ccf66e6c6d96953e906ac71a35f3c73fcdc6ee670"
        },
        "downloads": -1,
        "filename": "patata-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9db41a0357b783826806882738b61cec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7932,
        "upload_time": "2023-03-23T21:41:09",
        "upload_time_iso_8601": "2023-03-23T21:41:09.545142Z",
        "url": "https://files.pythonhosted.org/packages/ae/aa/c26b5b4a48b2a10be9da702a14bf03802be09f32fcf9d255bfb49ae2ee2c/patata-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d67c863660295bebd8b0b9cd8cfbf55ad6acb73308b7b017ba8299c8741f3af",
          "md5": "89066c7085f1c618ed762766fcbf2f57",
          "sha256": "2974224ab825dc16a69a7c51da78fc48e5751aa72f95913a321fce7132e118c2"
        },
        "downloads": -1,
        "filename": "patata-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "89066c7085f1c618ed762766fcbf2f57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7300,
        "upload_time": "2023-03-23T21:41:13",
        "upload_time_iso_8601": "2023-03-23T21:41:13.702353Z",
        "url": "https://files.pythonhosted.org/packages/8d/67/c863660295bebd8b0b9cd8cfbf55ad6acb73308b7b017ba8299c8741f3af/patata-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a75a1d3afadb859e1b5c6c9547d0751524e125d6afdb773c21d3e2023eeb712",
          "md5": "26f3825460071ea9fa5c21ee56e8fe3c",
          "sha256": "bc39aee1cf1cd999970efb07a9eeaa77af07b2f2d48190b589b172a23f2eb023"
        },
        "downloads": -1,
        "filename": "patata-3.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26f3825460071ea9fa5c21ee56e8fe3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8200,
        "upload_time": "2023-03-23T21:41:11",
        "upload_time_iso_8601": "2023-03-23T21:41:11.600627Z",
        "url": "https://files.pythonhosted.org/packages/1a/75/a1d3afadb859e1b5c6c9547d0751524e125d6afdb773c21d3e2023eeb712/patata-3.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c71990dad10da5bc1680d6c50ad6e1c12be4692435ad2ab67b3c9c4a127901c6",
          "md5": "4af751bc1dfd89982e293eeb924ac53d",
          "sha256": "c49533b27545864569bb2f13e42e46cce459668d31764ae9e581869dc01c5a18"
        },
        "downloads": -1,
        "filename": "patata-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4af751bc1dfd89982e293eeb924ac53d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7541,
        "upload_time": "2023-03-23T21:41:15",
        "upload_time_iso_8601": "2023-03-23T21:41:15.683946Z",
        "url": "https://files.pythonhosted.org/packages/c7/19/90dad10da5bc1680d6c50ad6e1c12be4692435ad2ab67b3c9c4a127901c6/patata-3.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ba1aa336cb071f47bbc69d6e3fc054915175d39c2885c1225fa3db811bea210",
          "md5": "ab4515e6f8d531b8f114610407e23dbf",
          "sha256": "ae0f1d11f2f8dcba775efaff492332cd1647c67b72d27408aa6a0e9f466206ab"
        },
        "downloads": -1,
        "filename": "patata-3.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab4515e6f8d531b8f114610407e23dbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8204,
        "upload_time": "2023-03-28T09:44:47",
        "upload_time_iso_8601": "2023-03-28T09:44:47.342637Z",
        "url": "https://files.pythonhosted.org/packages/3b/a1/aa336cb071f47bbc69d6e3fc054915175d39c2885c1225fa3db811bea210/patata-3.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b957ff9be07b77721904cb657b93a1bc78f80f6c20cf6696d224470b7b32377f",
          "md5": "5ef1aac87f6c7f4562c69c5728ffb8fe",
          "sha256": "50b7425705916a31c11b7706653f325db33ccaeb0be5b3ceca0b0fc53d6a56a7"
        },
        "downloads": -1,
        "filename": "patata-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ef1aac87f6c7f4562c69c5728ffb8fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7539,
        "upload_time": "2023-03-28T09:44:49",
        "upload_time_iso_8601": "2023-03-28T09:44:49.108469Z",
        "url": "https://files.pythonhosted.org/packages/b9/57/ff9be07b77721904cb657b93a1bc78f80f6c20cf6696d224470b7b32377f/patata-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ba1aa336cb071f47bbc69d6e3fc054915175d39c2885c1225fa3db811bea210",
        "md5": "ab4515e6f8d531b8f114610407e23dbf",
        "sha256": "ae0f1d11f2f8dcba775efaff492332cd1647c67b72d27408aa6a0e9f466206ab"
      },
      "downloads": -1,
      "filename": "patata-3.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab4515e6f8d531b8f114610407e23dbf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 8204,
      "upload_time": "2023-03-28T09:44:47",
      "upload_time_iso_8601": "2023-03-28T09:44:47.342637Z",
      "url": "https://files.pythonhosted.org/packages/3b/a1/aa336cb071f47bbc69d6e3fc054915175d39c2885c1225fa3db811bea210/patata-3.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b957ff9be07b77721904cb657b93a1bc78f80f6c20cf6696d224470b7b32377f",
        "md5": "5ef1aac87f6c7f4562c69c5728ffb8fe",
        "sha256": "50b7425705916a31c11b7706653f325db33ccaeb0be5b3ceca0b0fc53d6a56a7"
      },
      "downloads": -1,
      "filename": "patata-3.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5ef1aac87f6c7f4562c69c5728ffb8fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7539,
      "upload_time": "2023-03-28T09:44:49",
      "upload_time_iso_8601": "2023-03-28T09:44:49.108469Z",
      "url": "https://files.pythonhosted.org/packages/b9/57/ff9be07b77721904cb657b93a1bc78f80f6c20cf6696d224470b7b32377f/patata-3.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}