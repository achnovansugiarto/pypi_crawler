{
  "info": {
    "author": "Thomas Harr",
    "author_email": "xDevThomas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "\nA helper library in Python for authors of workflows for  `Alfred 4 and 5`_.\n\nSupports Alfred 4 and Alfred 5 on macOS with Python 3.7+.\n\n`Alfred-PyWorkflow`_ is a Python 3 port of the original `Alfred-Workflow`_.\n\nAlfred-PyWorkflow takes the grunt work out of writing a workflow by giving you the tools to create\na fast and featureful Alfred workflow from an API, application or library in minutes.\n\nAlways supports all current Alfred features.\n\nhttp://www.xdevcloud.de/alfred-pyworkflow/\n\n\nFeatures\n========\n\n* Auto-saves settings\n* Super-simple data caching with expiry\n* Fuzzy, Alfred-like search/filtering with diacritic folding\n* Keychain support for secure storage of passwords, API keys etc.\n* Lightweight web API with `requests`_-like interface\n* Background tasks to keep your workflow responsive\n* Simple generation of Alfred JSON feedback\n* Full support of Alfred's AppleScript/JXA API\n* Catches and logs workflow errors for easier development and support\n* \"Magic\" arguments to help development/debugging\n* Pre-configured logging\n* Automatically check for workflow updates via GitHub releases\n* Post notifications via Notification Center\n* Advanced modifiers\n* Set `workflow variables`_ from code\n* Re-running Script Filters\n\n\nInstallation\n============\n\n**Note**: If you're new to Alfred workflows, check out\n`the tutorial`_ in the docs.\n\n\nWith pip\n--------\n\nYou can install Alfred-PyWorkflow directly into your workflow with::\n\n    # from your workflow directory\n    pip install --target=. Alfred-PyWorkflow\n\nYou can install any other library available on the `Cheese Shop`_ the same way. See the\n`pip documentation`_ for more information.\n\nIt is highly advisable to bundle all your workflow's dependencies with your workflow in this way.\nThat way, it will \"just work\".\n\n\nFrom source\n-----------\n\n1. Download the ``alfred-pyworkflow-X.X.X.zip`` file from the `GitHub releases page`_.\n2. Extract the ZIP archive and place the `workflow` directory in the root folder of your workflow\n   (where ``info.plist`` is).\n\nYour workflow directory should look something like this (where ``yourscript.py`` contains your\nworkflow code and ``info.plist`` is the workflow information file generated by Alfred)::\n\n    Your Workflow/\n        info.plist\n        icon.png\n        workflow/\n            __init__.py\n            background.py\n            notify.py\n            update.py\n            version\n            web.py\n            workflow.py\n        yourscript.py\n        etc.\n\nAlternatively, you can clone/download the Alfred-PyWorkflow `GitHub repository`_ and copy the\n``workflow`` subfolder to your workflow's root directory.\n\n\nUsage\n=============\n\nA few examples of how to use Alfred-PyWorkflow.\n\n\nWorkflow script skeleton\n------------------------\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    # encoding: utf-8\n\n    import sys\n\n    from workflow import Workflow\n\n\n    def main(wf):\n        # The Workflow instance will be passed to the function\n        # you call from `Workflow.run`.\n        # Not super useful, as the `wf` object created in\n        # the `if __name__ ...` clause below is global...\n        #\n        # Your imports go here if you want to catch import errors, which\n        # is not a bad idea, or if the modules/packages are in a directory\n        # added via `Workflow(libraries=...)`\n        import somemodule\n        import anothermodule\n\n        # Get args from Workflow, already as normalized string.\n        # This is also necessary for \"magic\" arguments to work.\n        args = wf.args\n\n        # Do stuff here ...\n\n        # Add an item to Alfred feedback\n        wf.add_item('Item title', 'Item subtitle')\n\n        # Send output to Alfred. You can only call this once.\n        # Well, you *can* call it multiple times, but subsequent calls\n        # are ignored (otherwise the JSON sent to Alfred would be invalid).\n        wf.send_feedback()\n\n\n    if __name__ == '__main__':\n        # Create a global `Workflow` object\n        wf = Workflow()\n        # Call your entry function via `Workflow.run()` to enable its\n        # helper functions, like exception catching, ARGV normalization,\n        # magic arguments etc.\n        sys.exit(wf.run(main))\n\n\nExamples\n--------\n\nCache data for 30 seconds:\n\n.. code-block:: python\n\n    def get_web_data():\n        return web.get('http://www.example.com').json()\n\n    def main(wf):\n        # Save data from `get_web_data` for 30 seconds under\n        # the key ``example``\n        data = wf.cached_data('example', get_web_data, max_age=30)\n        for datum in data:\n            wf.add_item(datum['title'], datum['author'])\n\n        wf.send_feedback()\n\n\nWeb\n---\n\nGrab data from a JSON web API:\n\n.. code-block:: python\n\n    data = web.get('http://www.example.com/api/1/stuff').json()\n\nPost a form:\n\n.. code-block:: python\n\n    r = web.post('http://www.example.com/',\n             data={'artist': 'Tom Jones', 'song': \"It's not unusual\"})\n\nUpload a file:\n\n.. code-block:: python\n\n    files = {'fieldname' : {'filename': \"It's not unusual.mp3\",\n                            'content': open(\"It's not unusual.mp3\", 'rb').read()}\n    }\n    r = web.post('http://www.example.com/upload/', files=files)\n\nKeychain access\n---------------\n\nSave password:\n\n.. code-block:: python\n\n    wf = Workflow()\n    wf.save_password('name of account', 'password1lolz')\n\nRetrieve password:\n\n.. code-block:: python\n\n    wf = Workflow()\n    wf.get_password('name of account')\n\n\nDocumentation\n=============\n\nThe full documentation, including API docs and a tutorial, can be found at `xdevcloud.de/alfred-pyworkflow`_.\n\n.. _requests: http://docs.python-requests.org/en/latest/\n.. _Alfred-PyWorkflow: https://github.com/harrtho/alfred-pyworkflow\n.. _Alfred-Workflow: https://github.com/deanishe/alfred-workflow\n.. _Alfred 4 and 5: http://www.alfredapp.com/\n.. _GitHub releases page: https://github.com/harrtho/alfred-pyworkflow/releases\n.. _the tutorial: https://xdevcloud.de/alfred-pyworkflow/tutorial.html\n.. _GitHub repository: https://github.com/harrtho/alfred-pyworkflow\n.. _Cheese Shop: https://pypi.org\n.. _pip documentation: https://pip.pypa.io/en/latest/\n.. _workflow variables: https://xdevcloud.de/alfred-pyworkflow/guide/variables.html#workflow-variables\n.. _xdevcloud.de/alfred-pyworkflow: https://xdevcloud.de/alfred-pyworkflow/\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://xdevcloud.de/alfred-pyworkflow/",
    "keywords": "alfred workflow alfred4 alfred5",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Alfred-PyWorkflow",
    "package_url": "https://pypi.org/project/Alfred-PyWorkflow/",
    "platform": null,
    "project_url": "https://pypi.org/project/Alfred-PyWorkflow/",
    "project_urls": {
      "Homepage": "https://xdevcloud.de/alfred-pyworkflow/"
    },
    "release_url": "https://pypi.org/project/Alfred-PyWorkflow/2.0.0b2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Full-featured helper library for writing Alfred 4 and 5 workflows",
    "version": "2.0.0b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16173898,
  "releases": {
    "2.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cb766a5a0ae127cf9ac53b4048df7bf3ef774ae2d5e2f69e4bc8d550eb7f7e5",
          "md5": "f894b8cf7b540dcae8971049781d0c10",
          "sha256": "816069a6c97be8651fe91c2301e41a307a291ce1be7f14c279444ee11cdde8ac"
        },
        "downloads": -1,
        "filename": "Alfred-PyWorkflow-2.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "f894b8cf7b540dcae8971049781d0c10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53511,
        "upload_time": "2022-10-30T20:29:26",
        "upload_time_iso_8601": "2022-10-30T20:29:26.716103Z",
        "url": "https://files.pythonhosted.org/packages/5c/b7/66a5a0ae127cf9ac53b4048df7bf3ef774ae2d5e2f69e4bc8d550eb7f7e5/Alfred-PyWorkflow-2.0.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e765175aac1ab8df5341e71124e88227bb93a1b58b8de39253cdb8241a826043",
          "md5": "75cc5990cf8679294385115ddf7534d4",
          "sha256": "5494205d61c9d3519ce2136fe40906bb6a2665010d8f90f45f72af43554126dc"
        },
        "downloads": -1,
        "filename": "Alfred-PyWorkflow-2.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "75cc5990cf8679294385115ddf7534d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53497,
        "upload_time": "2022-12-21T12:17:56",
        "upload_time_iso_8601": "2022-12-21T12:17:56.390986Z",
        "url": "https://files.pythonhosted.org/packages/e7/65/175aac1ab8df5341e71124e88227bb93a1b58b8de39253cdb8241a826043/Alfred-PyWorkflow-2.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e412c58c2990367479bd5bb7393ed472e88fbc0f91658f16e45a309879b92eb3",
          "md5": "74ffa9dce2779d58a7281aa525d85075",
          "sha256": "c573860a27fe834e37eb420f218fabc2bcc706f35192335308a8ab8d8732b185"
        },
        "downloads": -1,
        "filename": "Alfred-PyWorkflow-2.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "74ffa9dce2779d58a7281aa525d85075",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53496,
        "upload_time": "2022-12-21T13:54:33",
        "upload_time_iso_8601": "2022-12-21T13:54:33.747565Z",
        "url": "https://files.pythonhosted.org/packages/e4/12/c58c2990367479bd5bb7393ed472e88fbc0f91658f16e45a309879b92eb3/Alfred-PyWorkflow-2.0.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e412c58c2990367479bd5bb7393ed472e88fbc0f91658f16e45a309879b92eb3",
        "md5": "74ffa9dce2779d58a7281aa525d85075",
        "sha256": "c573860a27fe834e37eb420f218fabc2bcc706f35192335308a8ab8d8732b185"
      },
      "downloads": -1,
      "filename": "Alfred-PyWorkflow-2.0.0b2.tar.gz",
      "has_sig": false,
      "md5_digest": "74ffa9dce2779d58a7281aa525d85075",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 53496,
      "upload_time": "2022-12-21T13:54:33",
      "upload_time_iso_8601": "2022-12-21T13:54:33.747565Z",
      "url": "https://files.pythonhosted.org/packages/e4/12/c58c2990367479bd5bb7393ed472e88fbc0f91658f16e45a309879b92eb3/Alfred-PyWorkflow-2.0.0b2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}