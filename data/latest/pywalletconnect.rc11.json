{
  "info": {
    "author": "BitLogiK",
    "author_email": "contact@bitlogik.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\n# pyWalletConnect\n\n![pyWalletConnect logo](logo.png)\n\n### A WalletConnect implementation for wallets in Python\n\nA Python3 library to link a wallet with a WalletConnect web3 app. This library connects a Python wallet with a web3 app online, using the WalletConnect standard.\n\nThanks to WalletConnect, a Dapp is able to send JSON-RPC call requests to be handled by the Wallet, sign requests for transactions or messages remotely. Using WalletConnect, the wallet is a JSON-RPC service that the dapp can query through an encrypted tunnel and an online relay. This library is built for the wallet part, which establishes a link with the dapp and receives requests.\n\nWalletConnect version 2 support is beta.\n\npyWalletConnect manages automatically on its own all the WalletConnect stack :\n\n```\nWalletConnect\n    |\n Topics managt\n    |\n JSON-RPC\n    |\nEncryptedTunnel\n    |\n WebSocket\n    |\n   HTTP\n    |\n   TLS\n    |\n  Socket\n```\n\n## Installation and requirements\n\nWorks with Python >= 3.6.\n\n### Installation of this library\n\nEasiest way :  \n`python3 -m pip install pyWalletConnect`  \n\nFrom sources, download and run in this directory :  \n`python3 -m pip  install .`\n\n### Use\n\nInstanciate with `pywalletconnect.WCClient.from_wc_uri`, then use methods functions of this object.\n\nBasic example :\n\n```python\nfrom pywalletconnect import WCClient, WCClientInvalidOption\n# Input the wc URI\nstring_uri = input(\"Input the WalletConnect URI : \")\nWCClient.set_wallet_metadata(WALLET_METADATA)  # Optional, else identify pyWalletConnect as wallet\nWCClient.set_project_id(WALLETCONNECT_PROJECT_ID)  # Required for v2\nWCClient.set_origin(WALLETCONNECT_ORIGIN_DOMAIN)  # Optional for v2\ntry:\n    wallet_dapp = WCClient.from_wc_uri(string_uri)\nexcept WCClientInvalidOption as exc:\n    # In case error in the wc URI provided\n    wallet_dapp.close()\n    raise InvalidOption(exc)\n# Wait for the sessionRequest info\n# Can throw WCClientException \"sessionRequest timeout\"\nreq_id, req_chain_id, request_info = wallet_dapp.open_session()\nif req_chain_id != account.chainID:\n    # Chain id mismatch\n    wallet_dapp.close()\n    raise InvalidOption(\"Chain ID from Dapp is not the same as the wallet.\")\n# Display to the user request details provided by the Dapp.\nuser_ok = input(f\"WalletConnect link request from : {request_info['name']}. Approve? [y/N]\")\nif user_ok.lower() == \"y\":\n    # User approved\n    wallet_dapp.reply_session_request(req_id, account.chainID, account.address)\n    # Now the session with the Dapp is opened\n    <...>\nelse:\n    # User rejected\n    wclient.reject_session_request(req_id)\n    wallet_dapp.close()\n    raise UserInteration(\"user rejected the dapp connection request.\")\n```\n\nThere's a basic minimal working CLI demo at: https://gist.github.com/bitlogik/89b41bb60443c041704f82bcd9b43901\n\npyWalletConnect maintains a TLS WebSocket opened with the host relay. It builds an internal pool of received request messages from the dapp.\n\nOnce the session is opened, you can read the pending messages received from the Dapp from time to time. And then your wallet app can process these requests, and send back the reply.\n\nUse a daemon thread timer for example, to call the `get_message()` method in a short time frequency. 3-6 seconds is an acceptable delay. This can also be performed in a blocking *for* loop with a sleeping time. Then process the Dapp queries for further user wallet actions.\n\nRemember to keep track of the request id, as it is needed for `.reply(req_id, result)` ultimately when sending the processing result back to the dapp service. One way is to provide the id in argument in your processing methods. Also this can be done with global or shared parameters.\n\nWhen a WCClient object created from a WC link is closed or deleted, it will send to the dapp a closing session message.\n\n```python\ndef process_sendtransaction(call_id, tx):\n    # Processing the RPC query eth_sendTransaction\n    # Collect the user approval about the tx query\n    < Accept (tx) ? >\n    if approved :\n        # Build and sign the provided transaction\n        <...>\n        # Broadcast the tx\n        # Provide the transaction id as result\n        return \"0x...\" # Tx id\n\ndef watch_messages():\n    # Watch for messages received.\n    # For WalletConnect calls reading.\n    # Read all the message requests received from the dapp.\n    # Then dispatch to the wallet service handlers.\n    # get_message gives (id, method, params) or (None, \"\", [])\n    wc_message = wallet_dapp.get_message()\n    # Loop in the waiting messages pool, until depleted\n    while wc_message[0] is not None:\n        # Read a WalletConnect call message available\n        id_request = wc_message[0]\n        method = wc_message[1]\n        parameters = wc_message[2]\n        if \"wc_sessionUpdate\" == method:\n            if parameters[0].get(\"approved\") is False:\n                raise Exception(\"Disconnected by the Dapp.\")\n        # Dispatch query processing\n        elif \"eth_signTypedData\" == method:\n            result = process_signtypeddata(id_request, parameters[1])\n            wallet_dapp.reply(call_id, result)\n        elif \"eth_sendTransaction\" == method:\n            tx_to_sign = parameters[1]\n            result = process_sendtransaction(id_request, tx_to_sign)\n            wallet_dapp.reply(call_id, result)\n        elif \"eth_sign\" == method:\n            result = process_signtransaction(parameters[1])\n            wallet_dapp.reply(call_id, result)\n        <...>\n        # Next loop\n        wc_message = wallet_dapp.get_message()\n\n\n# GUI timer repeated or threading daemon\n# Will call watch_messages every 4 seconds\napptimer = Timer(4000)\n# Call watch_messages when expires periodically\napptimer.notify = watch_messages\n\n```\n\nSee also the [RPC methods in WalletConnect](https://docs.walletconnect.org/v/1.0/json-rpc-api-methods/ethereum) to know more about the expected result regarding a specific RPC call.\n\n## Interface methods of WCClient\n\n`WCClient.set_wallet_metadata( wallet_metadata )`  \nClass method to set the wallet metadata as object (v2). See WalletConnect standard for the format.  \nOptional. If not provided, when v2, it sends the default pyWalletConnect metadata as wallet identification.\n\n`WCClient.set_project_id( project_id )`  \nClass method to set the WalletConnect project id. This is mandatory to use a project id when  \nusing WC v2 with the official central bridge relay.\n\n`WCClient.set_origin( origin_domain )`  \nClass method to set the origin of the first HTTP query for websocket. Only for v2, optional.\n\n`WCClient.from_wc_uri( wc_uri_str )`  \nCreate a WalletConnect wallet client from a wc v1 or v2 URI. (class method constructor)  \n*wc_uri_str* : the wc full EIP1328 URI provided by the Dapp.  \nYou need to call *open_session* immediately after to get the session request info.\n\n`.close()`  \nSend a session close message, and close the underlying WebSocket connection.\n\n`.get_relay_url()`  \nGive the page address of the WebSocket relay bridge.\n\n`.get_message()`  \nGet a RPC call message from the internal waiting list. pyWalletConnect maintains an internal pool of received request messages from the dapp. And this get_message method pops out a message in a FIFO manner : the first method call provides the oldest (first) received message. It can be used like a pump : call *get_message()* until an empty response. Because it reads a message from the receiving bucket one by one.  \nThis needs to be called periodically because this triggers the auto reconnection (When the WebSocket is abruptly disconnected by the relay).  \nReturn : (RPCid, method, params) or (None, \"\", []) when no data were received since the last call (or from the initial session connection).  \nNon-blocking, so always returns immediately when there's no message, and returns (None, \"\", []).  \nWhen a v2 ping *wc_sessionPing* is received, it is automatically replied when getting it with get_message. In this case, the *get_message* method returns an empty method and no params. So filter *get_message* calls with 'id is None', means no more message left.\n\n`.reply( req_id, result_str )`  \nSend a RPC response to the webapp (through the relay).  \n*req_id* is the JSON-RPC id of the corresponding query request, where the result belongs to. One must kept track this id from the get_message, up to this reply. So a reply result is given back with its associated call query id.  \n*result_str* is the result field to provide in the RPC result response.\n\n`.open_session()`  \nStart a WalletConnect session : wait for the session call request message.  \nMust be called right after a WCClient creation.  \nReturns : (message RPCid, chain ID, peerMeta data object).  \nOr throws WalletConnectClientException(\"sessionRequest timeout\")\nafter 8 seconds and no sessionRequest received.\n\n`reply_session_request( msg_id, chain_id, account_address )`  \nSend a session approval message, when user approved the connection session request in the wallet.  \n*msg_id* is the RPC id of the session approval request.\n\n`.reject_session_request( req_id )`  \nSend a session rejection message to the webapp (through the relay). *req_id* is the RPC id of the session approval request.\n\n\n## License\n\nCopyright (C) 2021-2023  BitLogiK SAS\n\nThis program is free software: you can redistribute it and/or modify  \nit under the terms of the GNU General Public License as published by  \nthe Free Software Foundation, version 3 of the License.\n\nThis program is distributed in the hope that it will be useful,  \nbut WITHOUT ANY WARRANTY; without even the implied warranty of  \nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \nSee the GNU General Public License for more details.\n\n\n## Support\n\nOpen an issue in the Github repository for help about its use.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitlogik/pyWalletConnect",
    "keywords": "blockchain wallet cryptography security",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyWalletConnect",
    "package_url": "https://pypi.org/project/pyWalletConnect/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyWalletConnect/",
    "project_urls": {
      "Homepage": "https://github.com/bitlogik/pyWalletConnect"
    },
    "release_url": "https://pypi.org/project/pyWalletConnect/1.3.3/",
    "requires_dist": [
      "cryptography (>=3.3)",
      "wsproto (>=1.0.0)"
    ],
    "requires_python": ">=3.6.1",
    "summary": "WalletConnect implementation for Python wallets",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17061832,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9fd244a0c671148e29dc1238d4fe820b5240e2d9cb95a55f51a8a3e03695578",
          "md5": "916a1a37a23497e229b1a5254650452a",
          "sha256": "5fea418419a1021f4a8e018e083da5c7d25cc752c13ae7f990cb13a96f616d6c"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "916a1a37a23497e229b1a5254650452a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26599,
        "upload_time": "2021-08-16T10:02:25",
        "upload_time_iso_8601": "2021-08-16T10:02:25.307925Z",
        "url": "https://files.pythonhosted.org/packages/f9/fd/244a0c671148e29dc1238d4fe820b5240e2d9cb95a55f51a8a3e03695578/pyWalletConnect-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ef857df6b32c200d4b6033abdb2685ac828afbe2616d36ffe1bd4368d8d2a62",
          "md5": "890453a0d87d7968e15a2c4750323e0e",
          "sha256": "544544831729372e0079bfbc41f3106c4cc5260dba77eb9597d2c9116543c6bd"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "890453a0d87d7968e15a2c4750323e0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26744,
        "upload_time": "2021-08-21T15:10:36",
        "upload_time_iso_8601": "2021-08-21T15:10:36.204247Z",
        "url": "https://files.pythonhosted.org/packages/7e/f8/57df6b32c200d4b6033abdb2685ac828afbe2616d36ffe1bd4368d8d2a62/pyWalletConnect-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9eb103ea3ee6be76d2192b75eae569ce63c596036cb2593b0f09ac846b8ae9e",
          "md5": "8dae61aacbeb57aab0ca4a0487e5398a",
          "sha256": "c36a67ed10c11d2bc5d604852ceb4f9474a4bc3695f9c6237b71e4920a6e64fd"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dae61aacbeb57aab0ca4a0487e5398a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26744,
        "upload_time": "2021-08-27T10:28:06",
        "upload_time_iso_8601": "2021-08-27T10:28:06.995210Z",
        "url": "https://files.pythonhosted.org/packages/a9/eb/103ea3ee6be76d2192b75eae569ce63c596036cb2593b0f09ac846b8ae9e/pyWalletConnect-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94e8199ada90ee957859cf07494f9563d50ab144eb3ddff12d67aebc047eb480",
          "md5": "1c10de937acef5157d8c922091606883",
          "sha256": "ef18ff88ee9ae0db2042d5ecb9b9d7e44a2211b7031b7102d750b77ebaf7d873"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c10de937acef5157d8c922091606883",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27233,
        "upload_time": "2021-09-01T20:21:36",
        "upload_time_iso_8601": "2021-09-01T20:21:36.198694Z",
        "url": "https://files.pythonhosted.org/packages/94/e8/199ada90ee957859cf07494f9563d50ab144eb3ddff12d67aebc047eb480/pyWalletConnect-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88e3c61b7035559357de507abf7204ec5d00c08e4fc218fd4e23defe6dd911d7",
          "md5": "35c1f5fb864dadd373988479bc80f1f8",
          "sha256": "6b0d8df95d27e2ad60cedc2f76f28e7c1e16c826b4b87fc1b00d948eea40bd38"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35c1f5fb864dadd373988479bc80f1f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27248,
        "upload_time": "2021-10-02T17:20:50",
        "upload_time_iso_8601": "2021-10-02T17:20:50.671783Z",
        "url": "https://files.pythonhosted.org/packages/88/e3/c61b7035559357de507abf7204ec5d00c08e4fc218fd4e23defe6dd911d7/pyWalletConnect-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85cf778367bfeaf56695b89c3c801faae316c2eb5bdf9054cb9b60d3c41a3f2b",
          "md5": "9ffc11f3a53a945a9dd44d80e358185b",
          "sha256": "2d5df1361af2e0958cfca7e8db94b5d7b18e7b35a6f7cdddb1cc183f8489e615"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ffc11f3a53a945a9dd44d80e358185b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27287,
        "upload_time": "2021-12-13T15:54:25",
        "upload_time_iso_8601": "2021-12-13T15:54:25.737290Z",
        "url": "https://files.pythonhosted.org/packages/85/cf/778367bfeaf56695b89c3c801faae316c2eb5bdf9054cb9b60d3c41a3f2b/pyWalletConnect-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "468da268b21b8689ca2cb44311d7156d12e1f7c97300b4db4880312237b8f012",
          "md5": "c45ec7030a7770a775750fffb6b3e281",
          "sha256": "62711bb5843d66aa24cdad1427c987a750304d6a2fbde49fd032d36e73e40a2b"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c45ec7030a7770a775750fffb6b3e281",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31300,
        "upload_time": "2022-01-30T13:32:53",
        "upload_time_iso_8601": "2022-01-30T13:32:53.257331Z",
        "url": "https://files.pythonhosted.org/packages/46/8d/a268b21b8689ca2cb44311d7156d12e1f7c97300b4db4880312237b8f012/pyWalletConnect-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40046bd519096316f0ab53b1a5c4de95f77e50f87b9097846e7165f36cbc55fb",
          "md5": "20e159e9030ecae267ad13bd1ef14998",
          "sha256": "a8075adb435bf3616783445c9037ff0f9d156bb0b84b357a35843550604efd52"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20e159e9030ecae267ad13bd1ef14998",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 31613,
        "upload_time": "2022-02-07T21:49:05",
        "upload_time_iso_8601": "2022-02-07T21:49:05.707139Z",
        "url": "https://files.pythonhosted.org/packages/40/04/6bd519096316f0ab53b1a5c4de95f77e50f87b9097846e7165f36cbc55fb/pyWalletConnect-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b29b390966528155a209ff529e3d0e5143c032b98c4966c2d269cca999822827",
          "md5": "cda4a0b2b4303f0a1b06ebe01cdd2965",
          "sha256": "6349b69e3936a5672b86fa70808c628b14be68bf1bcb49fa21840e0b00ad770b"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cda4a0b2b4303f0a1b06ebe01cdd2965",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 41132,
        "upload_time": "2023-01-25T20:12:01",
        "upload_time_iso_8601": "2023-01-25T20:12:01.860066Z",
        "url": "https://files.pythonhosted.org/packages/b2/9b/390966528155a209ff529e3d0e5143c032b98c4966c2d269cca999822827/pyWalletConnect-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeddfcb45fd71fa6e55b59281f07a1bcee8909e827bc031e4d4ac1317b703c15",
          "md5": "3cc515fc7d28c1b32492247e1fd70c76",
          "sha256": "a298967a9433581fde402d0745812538174c14e7e62a49789a46d8d9477e7f32"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cc515fc7d28c1b32492247e1fd70c76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 41189,
        "upload_time": "2023-02-10T16:50:15",
        "upload_time_iso_8601": "2023-02-10T16:50:15.334605Z",
        "url": "https://files.pythonhosted.org/packages/ee/dd/fcb45fd71fa6e55b59281f07a1bcee8909e827bc031e4d4ac1317b703c15/pyWalletConnect-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d8e6095242530a41df6a7e654635af8f8f31361a0362b7df44cd58c9c67f487",
          "md5": "8ca289387d31421f88e2aaeb20ca8a96",
          "sha256": "724568af7480d27037e7b66279d1b3fe75e65f98165f508be798764c9723bc80"
        },
        "downloads": -1,
        "filename": "pyWalletConnect-1.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ca289387d31421f88e2aaeb20ca8a96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 41158,
        "upload_time": "2023-02-27T09:26:32",
        "upload_time_iso_8601": "2023-02-27T09:26:32.939100Z",
        "url": "https://files.pythonhosted.org/packages/9d/8e/6095242530a41df6a7e654635af8f8f31361a0362b7df44cd58c9c67f487/pyWalletConnect-1.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d8e6095242530a41df6a7e654635af8f8f31361a0362b7df44cd58c9c67f487",
        "md5": "8ca289387d31421f88e2aaeb20ca8a96",
        "sha256": "724568af7480d27037e7b66279d1b3fe75e65f98165f508be798764c9723bc80"
      },
      "downloads": -1,
      "filename": "pyWalletConnect-1.3.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ca289387d31421f88e2aaeb20ca8a96",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1",
      "size": 41158,
      "upload_time": "2023-02-27T09:26:32",
      "upload_time_iso_8601": "2023-02-27T09:26:32.939100Z",
      "url": "https://files.pythonhosted.org/packages/9d/8e/6095242530a41df6a7e654635af8f8f31361a0362b7df44cd58c9c67f487/pyWalletConnect-1.3.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}