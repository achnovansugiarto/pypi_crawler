{
  "info": {
    "author": "Ilse Dippenaar",
    "author_email": "ilsedipp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Typing :: Typed"
    ],
    "description": "signpost\n========\n\n|pypi-version| |pypi-python-versions| |build-status| |coverage|\n\nThis is a simple library for annotating and enforcing properties of\npandas DataFrames at runtime. By showing which columns and types\nare expected before execution of a function begins, we can catch errors\nearlier with a message that makes sense and also document the inputs and\noutputs of functions more concisely.\n\nThis project is related to a number of others that all share similar goals.\nWhile perhaps stumbling straight headlong the Lisp curse, signpost is yet\nanother pandas validation library. Here is a list of other similar projects:\n\n* `Bulwark <https://github.com/zaxr/bulwark>`_\n* `pandera <https://github.com/pandera-dev/pandera>`_\n* `Table Enforcer <https://github.com/xguse/table_enforcer>`_\n* `pandas-validation <https://github.com/jmenglund/pandas-validation>`_\n* `PandasSchema <https://github.com/TMiguelT/PandasSchema>`_\n* `Opulent-Pandas <https://github.com/danielvdende/opulent-pandas>`_\n\nSo why reinvent the wheel? Signpost offers a few advantages:\n\n#. Support for delayed evaluation of property inputs through the use of ``Meta``.\n   This technique works especially well in settings where class variables may hold information\n   about the data being operated on by the class.\n#. Qualifiers allow for richer and more flexible descriptions of data\n#. Straightforward approach to function decorators that uses the same logic as Python itself\n   to match properties to DataFrames\n#. Strict Python type checking via mypy\n\n\nExample Usage\n-------------\n\nHere is an example of standard usage to decorate a fairly strange function.\nNote that any valid pandas index value can be used, including numbers. We\ncan combine ``Property``'s together using ``And`` and ``Or`` if desired\nas well as qualify them using \"all\", \"any\", \"just\", or \"none\".\n\n.. code-block:: python\n\n    from signpost import Cols, Schema, Values, Superkey, And, df_args, df_return\n\n    @df_args(\n        Cols(\"all\", [\"thing_1\", 2]) & Superkey(\"thing_1\", over=2),\n        other=Schema(\"just\", {\"thing_2\": int, \"thing_3\": \"string\"})\n    )\n    @df_return(\n        None,\n        And(\n            Cols(\"all\", [\"thing_1\", \"thing_2\", \"thing_3\"]),\n            Values(\"any\", {\"thing_1\": [1, 2], \"thing_3\": [\"foo\", \"bar\"]}),\n            Values(\"none\", {\"thing_1\": [3]}),\n        )\n    )\n    def do_a_thing(df: pd.DataFrame, other: pd.DataFrame) -> Tuple[int, pd.DataFrame]:\n        ...\n\nHowever, there are times when the particular properties of a data frame depend on other\ninputs to a function. For example, a function may take a list of columns to subset\nby or a set of values to query with. This behavior is somewhat analogous to a function\ntaking a ``List[T]`` and a parameter of type ``T`` â€“ we are essentially making the data\nframe generic over a parameter specified by the caller. In these cases, we can\nuse the ``Meta`` constructor, which is constructed with a string of Python code.\nThe code is then evaluated with the environment of the function.\nFor example, we can implement a checked \"project\" function\n(analogous to ``SELECT DISTINCT`` in SQL) as follows:\n\n.. code-block:: python\n\n    from signpost import df_args, df_return, Cols, Meta\n\n    @df_args(Cols(\"all\", Meta(\"cols\")))\n    @df_return(Cols(\"just\", Meta(\"cols\")))\n    def project(df: pd.DataFrame, cols: List[str]) -> pd.DataFrame:\n        return df.loc[:, cols].drop_duplicates()\n\nSince the expressions passed to these meta properties can be arbitrary Python strings,\nwe can express some fairly powerful logic using relatively little code. Note that\nsince pandas DataFrames are dict-like, we can treat them as sequences of column names.\n\n.. code-block:: python\n\n    from signpost import df_args, df_return, Cols, Meta\n\n    @df_args(left=Cols(\"any\", Meta(\"right\")), right=Cols(\"any\", Meta(\"left\")))\n    @df_return(Cols(\"just\", Meta(\"set(left) | set(other)\"))\n    def merge(left, right):\n        return pd.merge(left, right)\n\nOther use cases\n^^^^^^^^^^^^^^^\nFor usage inside scripts, it is useful to use the ``Checker`` inner class for various properties.\nFor example,\n\n.. code-block:: python\n\n    from signpost import Cols, Values\n\n    df = pd.read_csv(\"my_file.csv\")\n    df = Cols.Checker(\"just\", [\"col_a\", \"col_b\"]).validate(df)\n    df = Values.Checker(\"all\", {\"col_a\": [1, 2], \"col_b\": [1, 1]}).validate(df)\n\nWhen combined with ``pd.DataFrame.pipe``, ``validate`` can provide expressive sanity checking.\nIf you would like more custom handling, you can use the ``check`` method as follows:\n\n.. code-block:: python\n\n    from signpost import Cols\n\n    df = ...\n    error: Optional[str] = Cols.Checker(\"just\", [\"col_a\", \"col_b\"]).check(df)\n    if error is not None:\n        print(error)\n        # more handling\n        ...\n\n\nList of Properties\n------------------\n\n* Cols: checks that the specified columns are in the data\n* Schema: checks whether the specified column / data type pairs match the data\n* Values: enforces which values (and combinations of values) need to be present in the data\n* Superkey: checks that the specified columns uniquely identify the data\n* Notna: enforces that the specified columns do not contain NA / missing values\n* MergeResult: checks whether a merge was a inner, left, or right join\n* Bounded: enforces that the values in the specified columns fall between two (potentially unbounded) values\n\nSpecial properties\n^^^^^^^^^^^^^^^^^^\n* Function: wraps a bare function into a property, useful for quick checks\n* And: combines two properties into a new property that checks each in turn, stopping if an error is found\n* Or: combines two properties into a new property that checks each in turn, stopping once a property succeeds\n* Assume: wraps a property to always be true, useful for documenting a property without doing unnecessary computation\n\n\nInstallation\n------------\n\nInstallation is easy! Just type:\n\n.. code-block:: console\n\n    pip install signpost\n\nExtending signpost\n------------------\nThere are a couple of ways to extend signpost. The first is using the ``Function`` property.\nIt simply accepts a function that takes a pandas DataFrame and a context dictionary and returns\na ``Optional[str]``.\n\n.. code-block:: python\n\n    from signpost import df_args, Function\n\n    @df_args(Function(lambda df, context: \"bad\" if df.empty else None))\n    def do_another_thing(df: pd.DataFrame):\n        ...\n\nIt is also possible to create new ``Property``'s simply by implementing the ``Property``\nor ``ContextProperty`` interface found in ``signpost.properties``.\n\n\n.. |pypi-version| image:: https://img.shields.io/pypi/v/signpost\n    :alt: PyPI\n    :target: https://pypi.org/project/signpost\n\n.. |pypi-python-versions| image:: https://img.shields.io/pypi/pyversions/signpost\n    :alt: PyPI - Python Version\n    :target: https://pypi.org/project/signpost\n\n.. |build-status| image:: https://travis-ci.com/ilsedippenaar/signpost.svg?branch=main\n    :alt: Build Status\n    :target: https://travis-ci.com/ilsedippenaar/signpost\n\n.. |coverage| image:: https://codecov.io/gh/ilsedippenaar/signpost/branch/main/graph/badge.svg\n    :alt: Code Coverage\n    :target: https://codecov.io/gh/ilsedippenaar/signpost\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ilsedippenaar/signpost",
    "keywords": "pandas,verification,types,annotate",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "signpost",
    "package_url": "https://pypi.org/project/signpost/",
    "platform": "",
    "project_url": "https://pypi.org/project/signpost/",
    "project_urls": {
      "Homepage": "https://github.com/ilsedippenaar/signpost",
      "Repository": "https://github.com/ilsedippenaar/signpost"
    },
    "release_url": "https://pypi.org/project/signpost/0.2.1/",
    "requires_dist": [
      "pandas (>=0.17)",
      "numpy (>=1.8,<2.0)"
    ],
    "requires_python": ">=3.6.1,<4.0.0",
    "summary": "Simple decorators and functions for type checking pandas DataFrames at runtime",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9514912,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db04247a49bf93f4c77ba8f387c5740bbedcfc18aaf2395a9d8a2d944224d5af",
          "md5": "6fcf1be59b4d1293a877e6bc3e59f435",
          "sha256": "279823cf3b44a2055e95ad4f4b58054a8e121bf283cd5e5fed52b7463990cc33"
        },
        "downloads": -1,
        "filename": "signpost-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fcf1be59b4d1293a877e6bc3e59f435",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 18503,
        "upload_time": "2020-06-05T04:26:16",
        "upload_time_iso_8601": "2020-06-05T04:26:16.349923Z",
        "url": "https://files.pythonhosted.org/packages/db/04/247a49bf93f4c77ba8f387c5740bbedcfc18aaf2395a9d8a2d944224d5af/signpost-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09fea89b670785fc66a9eebc571cf15c7b739b94be984b37793aae30c2c70d68",
          "md5": "71c87247ca086acdca2f801c8ccb0383",
          "sha256": "5cda10a073752afdf81b57d246fb2d6f7e092646f04dbe6b03bebdb666e70369"
        },
        "downloads": -1,
        "filename": "signpost-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71c87247ca086acdca2f801c8ccb0383",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 18285,
        "upload_time": "2020-06-05T04:26:18",
        "upload_time_iso_8601": "2020-06-05T04:26:18.566441Z",
        "url": "https://files.pythonhosted.org/packages/09/fe/a89b670785fc66a9eebc571cf15c7b739b94be984b37793aae30c2c70d68/signpost-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f329108f897ee0c40d4e6812bf6b6e089650e5f2a6ed3d394aae87102441b52e",
          "md5": "ca465f34b81099cd830eb4f22de48dd9",
          "sha256": "16ee13dae77001f971b943a0cb62da8da93a51b23baad3255693c7216a46f053"
        },
        "downloads": -1,
        "filename": "signpost-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca465f34b81099cd830eb4f22de48dd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 21864,
        "upload_time": "2020-09-08T02:29:25",
        "upload_time_iso_8601": "2020-09-08T02:29:25.713539Z",
        "url": "https://files.pythonhosted.org/packages/f3/29/108f897ee0c40d4e6812bf6b6e089650e5f2a6ed3d394aae87102441b52e/signpost-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c9346f4d00cc862c4ddf86b7a4bc5cd442d78eff950d15b8fb6c934964228d4",
          "md5": "43674036bfad9ea1e279c1cbd2e83ff4",
          "sha256": "4179d1810e72767d67b01a2e3f8b89d25024fcaa3eef1bd8d5d22dd0334b57c2"
        },
        "downloads": -1,
        "filename": "signpost-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43674036bfad9ea1e279c1cbd2e83ff4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 24021,
        "upload_time": "2020-09-08T02:29:26",
        "upload_time_iso_8601": "2020-09-08T02:29:26.997194Z",
        "url": "https://files.pythonhosted.org/packages/3c/93/46f4d00cc862c4ddf86b7a4bc5cd442d78eff950d15b8fb6c934964228d4/signpost-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d59f62d7396a1d65641c8a738805999176e592f980df5b3f7b40f1ce89226a97",
          "md5": "cbb82507df7d013eba72771d9511d9a5",
          "sha256": "3d01cd39492bb677b7df9de47981abf440beda5d517867ebf1036630db719d2e"
        },
        "downloads": -1,
        "filename": "signpost-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbb82507df7d013eba72771d9511d9a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 21866,
        "upload_time": "2021-02-24T20:45:50",
        "upload_time_iso_8601": "2021-02-24T20:45:50.085600Z",
        "url": "https://files.pythonhosted.org/packages/d5/9f/62d7396a1d65641c8a738805999176e592f980df5b3f7b40f1ce89226a97/signpost-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b99a2c44aa1c1cdb2d57a6be929a5ade9c8f286a4eb97e870bfaa1b8a7126e3d",
          "md5": "9e76b09e96ce05538dfa6da19b4c9d92",
          "sha256": "b78b24f680f8a2a06aa22a9b9fac8d9c1b51f9a86a3df2a7007a37f278f8f472"
        },
        "downloads": -1,
        "filename": "signpost-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e76b09e96ce05538dfa6da19b4c9d92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 24055,
        "upload_time": "2021-02-24T20:45:51",
        "upload_time_iso_8601": "2021-02-24T20:45:51.673342Z",
        "url": "https://files.pythonhosted.org/packages/b9/9a/2c44aa1c1cdb2d57a6be929a5ade9c8f286a4eb97e870bfaa1b8a7126e3d/signpost-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d59f62d7396a1d65641c8a738805999176e592f980df5b3f7b40f1ce89226a97",
        "md5": "cbb82507df7d013eba72771d9511d9a5",
        "sha256": "3d01cd39492bb677b7df9de47981abf440beda5d517867ebf1036630db719d2e"
      },
      "downloads": -1,
      "filename": "signpost-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbb82507df7d013eba72771d9511d9a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 21866,
      "upload_time": "2021-02-24T20:45:50",
      "upload_time_iso_8601": "2021-02-24T20:45:50.085600Z",
      "url": "https://files.pythonhosted.org/packages/d5/9f/62d7396a1d65641c8a738805999176e592f980df5b3f7b40f1ce89226a97/signpost-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b99a2c44aa1c1cdb2d57a6be929a5ade9c8f286a4eb97e870bfaa1b8a7126e3d",
        "md5": "9e76b09e96ce05538dfa6da19b4c9d92",
        "sha256": "b78b24f680f8a2a06aa22a9b9fac8d9c1b51f9a86a3df2a7007a37f278f8f472"
      },
      "downloads": -1,
      "filename": "signpost-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9e76b09e96ce05538dfa6da19b4c9d92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 24055,
      "upload_time": "2021-02-24T20:45:51",
      "upload_time_iso_8601": "2021-02-24T20:45:51.673342Z",
      "url": "https://files.pythonhosted.org/packages/b9/9a/2c44aa1c1cdb2d57a6be929a5ade9c8f286a4eb97e870bfaa1b8a7126e3d/signpost-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}