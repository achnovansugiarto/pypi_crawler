{
  "info": {
    "author": "Anselmo Lira (https://github.com/aberriel)",
    "author_email": "anselmo.lira1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=================================================\n       Clean Architecture MongoDB Adapter\n=================================================\n\n\nConcrete implementation of adapter to MongoDB, using clean architecture adapter layer.\n\n\nIntroduction\n------------\n\nIf you don't know the clean architecture pattern, you can learn about on this `book\n<https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=sr_1_1?dchild=1&keywords=clean+architecture&qid=1612138443&sr=8-1>`_.\n\nClean architecture pattern, in resume, can develop complex systems with a hight flexible architecture that can maintain easily.\nThis model provides a set of layers can be isolates all logic levels. Simply, it has these layers:\n\n- Domain-entity layer: all entity classes that provide system objects or \"actors\". In a common \"entity layer\", we can instantialize business elements as objects.\n- Data-access layer (adapters): all data access classes.\n- Interactors: where exists all business logic. Here, we implement business use-cases as a flow peocess.\n- API and other edge interfaces: all edge interfaces, as APIs, events (to a desktop app), and others.\n\n\nHow to Use\n----------\n\nIn an example, I have a User model with some common user fields (username, name, password). This model needs to import marshmallow tom implement a model check.\nFirst, I present the basic entity structure:\n\n.. code-block:: python\n\n    from marshmallow import Schema, fields\n    from uuid import uuid4\n\n    class BasicEntity(BasicValue):\n        def __init__(self, _id=None):\n            self._id = _id or str(uuid4())\n            self.adapter = None\n\n        def set_adapter(self, adapter):\n            self.adapter = adapter\n\n        def save(self):\n            my_id = self.adapter.save(self.to_json())\n            return my_id\n\n        def update(self):\n            my_id = self.adapter.save(self.to_json())\n            return my_id\n\n        def delete(self):\n            self.adapter.delete(self._id)\n\n        @classmethod\n        def from_json(cls, dict_data):\n            return cls.Schema().load(dict_data)\n\n        def to_json(self):\n            return self.Schema().dump(self)\n\n        def __eq__(self, other):\n            return all([getattr(self, attr) == getattr(other, attr)\n                        for attr in self.Schema().fields.keys()])\n\n        class Schema(Schema):\n            _id = fields.String(required=True, allow_none=True)\n\n\nSecond, you can see the User model:\n\n.. code-block:: python\n\n    from .basic_entity import BasicEntity\n\n    class User(BasicEntity):\n        def __init__(self,\n                     username: str,\n                     password: str = None,\n                     name: str = None,\n                     _id: str = None):\n            super(User, self).__init__(_id=_id)\n            self.name = name\n            self.username = username\n            self.password = password\n\n        class Schema(BasicEntity.Schema):\n            name = fields.Str(required=False, allow_none=True)\n            username = fields.String(required=True, allow_none=False)\n            password = fields.String(required=True, allow_none=False)\n\n            @post_load\n            def post_load(self, data, many, partial):\n                return User(**data)\n\n\nOn a example, if you want to create a new user (on a interactor, for example), first you need to define a User adapter.\nBecause all persist logic exists on basic adapter, you only need to inherit from basic adapter.\nFor example:\n\n.. code-block:: python\n\n    from .basic_mongodb_adapter import BasicMongodbAdapter\n    from app_example.app_domain import User\n\n\n    class UserAdapter(BasicMongodbAdapter):\n        def __init__(self, table_name: str,\n                     db_name: str,\n                     db_url: str,\n                     db_username: str,\n                     db_password: str):\n            super(UserAdapter, self).__init__(\n                  table_name=table_name,\n                  db_name=db_name,\n                  db_url=db_url,\n                  db_username=db_username,\n                  db_password=db_password,\n                  adapted_class=User)\n\nWith it, you can create your interactor or other code layer to create users.\nIn this case, I assume that you use a config.py file with this format:\n\n.. code-block:: python\n\n    from decouple import config\n\n    class Config:\n\t    MONGODB_URL = config('MONGODB_URL', 'mongo_url')\n\t    MONGODB_DATABASE = config('MONGODB_DATABASE', 'database_name')\n\t    MONGODB_USERNAME = config('MONGODB_USERNAME', 'username')\n\t    MONGODB_PASSWORD = config('MONGODB_PASSWORD', 'password')\n\t    USER_TABLE_NAME = config('USER_TABLE_NAME', 'user')\n\nWith it, I instantiate an user adapter and can create easily the user:\n\n.. code-block:: python\n\n    from app_example.app_adapters import UserAdapter\n    from app_examploe.app_domain import User\n\n    def get_user_adapter(self):\n        config_obj = Config()\n        adapter = UserAdapter(\n            table_name=config_obj.USER_TABLE_NAME,\n            db_name=config_obj.MONGODB_DATABASE,\n            db_url=config_obj.MONGODB_URL,\n            db_username=config_obj.MONGODB_USERNAME,\n            db_password=config_obj.MONGODB_PASSWORD)\n        return adapter\n\n    def create_user(username: str,\n                    password: str,\n                    name: str):\n        user_adapter = get_user_adapter()\n        user_obj = User(username=username,\n                        password=password,\n                        name=name)\n        user.set_adapter(user_adapter)\n        user.save()\n\nInstallation\n------------\n\nInstall via `pip:\n<https://github.com/pypa/pip>`_\n\n::\n\n    $ pip install clean-architecture-mongodb-adapter\n\nInstall from source:\n\n::\n\n    $ git clone https://github.com/aberriel/clean_architecture_mongodb_adapter.git\n    $ cd boto\n    $ python setup.py install\n\n\n\n=======\nHistory\n=======\n\n0.1.0 (2021-01-25)\n------------------\n\n* First release on PyPI.\n* Implementation of basic CRUD methods (GET, UPDATE, DELETE, LIST), with json node normalization\n* 100% code coverage in tests (TDD)\n* Initial README and HISTORY\n\n0.1.1 (2021-01-31)\n\n* How to use basic adapter on in clean architecture projects.\n\n0.1.3 (2021-11-10)\n\n* Updating line length to flake8 tests\n* Updating clean_architecture_basic_classes version, from 0.1.1 to 0.1.3\n* Adjusting all code by according new line size\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aberriel/clean_architecture_mongodb_adapter",
    "keywords": "clean_architecture_mongodb_adapter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clean-architecture-mongodb-adapter",
    "package_url": "https://pypi.org/project/clean-architecture-mongodb-adapter/",
    "platform": "",
    "project_url": "https://pypi.org/project/clean-architecture-mongodb-adapter/",
    "project_urls": {
      "Homepage": "https://github.com/aberriel/clean_architecture_mongodb_adapter"
    },
    "release_url": "https://pypi.org/project/clean-architecture-mongodb-adapter/0.1.3/",
    "requires_dist": [
      "bumpversion (==0.6.0)",
      "dnspython (==2.1.0)",
      "itsdangerous (==2.0.1)",
      "pymongo (==3.12.1)",
      "python-decouple (==3.5)",
      "requests (==2.26.0)",
      "clean-architecture-basic-classes (>=0.1.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "Concrete implementation of adapter to MongoDB",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11989957,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea99050e7b8acc285c715a9c76116ec9140ec01d2c511695d5110f853c031f63",
          "md5": "5b7e55fed41ae6c37fb24304b22a559e",
          "sha256": "471b5059a5ad853d06b230108e144c0b745a612f59f18dc6ce5e5450e900e97f"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b7e55fed41ae6c37fb24304b22a559e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 4959,
        "upload_time": "2021-01-27T00:35:13",
        "upload_time_iso_8601": "2021-01-27T00:35:13.518256Z",
        "url": "https://files.pythonhosted.org/packages/ea/99/050e7b8acc285c715a9c76116ec9140ec01d2c511695d5110f853c031f63/clean_architecture_mongodb_adapter-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b319ccf5d478f931dcf4fd24dde3efb1f400ee22b8df4a0793cc313c04742e98",
          "md5": "9bd6e685d584f26241f993e80f2267df",
          "sha256": "7b9d05171302f3f2a0755e7786ddf315108542db9ae1f672921565d7dd78da52"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9bd6e685d584f26241f993e80f2267df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7124,
        "upload_time": "2021-01-27T00:35:15",
        "upload_time_iso_8601": "2021-01-27T00:35:15.021606Z",
        "url": "https://files.pythonhosted.org/packages/b3/19/ccf5d478f931dcf4fd24dde3efb1f400ee22b8df4a0793cc313c04742e98/clean_architecture_mongodb_adapter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "355769e9c180e4b4bb4f07a5e5a403543f4db637c21bc8dfe850a9c149379f53",
          "md5": "2938579212e089ff96cb715e8e64871a",
          "sha256": "9aeb2317efe924d1883e484d2431cf74a3e4dbdc7e316388d0f978c7511b3c91"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2938579212e089ff96cb715e8e64871a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 6866,
        "upload_time": "2021-02-01T03:06:30",
        "upload_time_iso_8601": "2021-02-01T03:06:30.329071Z",
        "url": "https://files.pythonhosted.org/packages/35/57/69e9c180e4b4bb4f07a5e5a403543f4db637c21bc8dfe850a9c149379f53/clean_architecture_mongodb_adapter-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ddd5821691742b6e23f2a0a4e8bac3538ac0625d16e6bf3bdd2798175187b23",
          "md5": "ed6ff2671b413648b862558bbab67710",
          "sha256": "7104b2eeb81f96a2aba500684df3c4cc81029f8fd3453d1104b3182ab64ed823"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed6ff2671b413648b862558bbab67710",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9579,
        "upload_time": "2021-02-01T03:06:32",
        "upload_time_iso_8601": "2021-02-01T03:06:32.096385Z",
        "url": "https://files.pythonhosted.org/packages/4d/dd/5821691742b6e23f2a0a4e8bac3538ac0625d16e6bf3bdd2798175187b23/clean_architecture_mongodb_adapter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e76f1ff3ebbe67cb49b5743938cfe8a910eb6e6c51802f4e13ce22ee6e60a2",
          "md5": "21fa5ec0e5225b8fcaf3bfd6c6317f59",
          "sha256": "69b11e259cc26853986563fa7c66275d2f2629495d951d9ec2dc6a68c7a34452"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21fa5ec0e5225b8fcaf3bfd6c6317f59",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 6960,
        "upload_time": "2021-11-11T01:22:41",
        "upload_time_iso_8601": "2021-11-11T01:22:41.503221Z",
        "url": "https://files.pythonhosted.org/packages/51/e7/6f1ff3ebbe67cb49b5743938cfe8a910eb6e6c51802f4e13ce22ee6e60a2/clean_architecture_mongodb_adapter-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9345166fb781e657ad687af4fd64c0ec0d4c6a2584e8dfd67e6ba83d01928537",
          "md5": "416067643f5e604f00347f56febbcaf1",
          "sha256": "29273f03ab809310a40db72a665781972d37f0c1fb4d5e653b404d9e762d5a30"
        },
        "downloads": -1,
        "filename": "clean_architecture_mongodb_adapter-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "416067643f5e604f00347f56febbcaf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9089,
        "upload_time": "2021-11-11T01:22:43",
        "upload_time_iso_8601": "2021-11-11T01:22:43.457213Z",
        "url": "https://files.pythonhosted.org/packages/93/45/166fb781e657ad687af4fd64c0ec0d4c6a2584e8dfd67e6ba83d01928537/clean_architecture_mongodb_adapter-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51e76f1ff3ebbe67cb49b5743938cfe8a910eb6e6c51802f4e13ce22ee6e60a2",
        "md5": "21fa5ec0e5225b8fcaf3bfd6c6317f59",
        "sha256": "69b11e259cc26853986563fa7c66275d2f2629495d951d9ec2dc6a68c7a34452"
      },
      "downloads": -1,
      "filename": "clean_architecture_mongodb_adapter-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21fa5ec0e5225b8fcaf3bfd6c6317f59",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 6960,
      "upload_time": "2021-11-11T01:22:41",
      "upload_time_iso_8601": "2021-11-11T01:22:41.503221Z",
      "url": "https://files.pythonhosted.org/packages/51/e7/6f1ff3ebbe67cb49b5743938cfe8a910eb6e6c51802f4e13ce22ee6e60a2/clean_architecture_mongodb_adapter-0.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9345166fb781e657ad687af4fd64c0ec0d4c6a2584e8dfd67e6ba83d01928537",
        "md5": "416067643f5e604f00347f56febbcaf1",
        "sha256": "29273f03ab809310a40db72a665781972d37f0c1fb4d5e653b404d9e762d5a30"
      },
      "downloads": -1,
      "filename": "clean_architecture_mongodb_adapter-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "416067643f5e604f00347f56febbcaf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 9089,
      "upload_time": "2021-11-11T01:22:43",
      "upload_time_iso_8601": "2021-11-11T01:22:43.457213Z",
      "url": "https://files.pythonhosted.org/packages/93/45/166fb781e657ad687af4fd64c0ec0d4c6a2584e8dfd67e6ba83d01928537/clean_architecture_mongodb_adapter-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}