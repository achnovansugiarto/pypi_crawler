{
  "info": {
    "author": "Mitch Garnaat",
    "author_email": "mitch@garnaat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=====\nkappa\n=====\n\n.. image:: https://travis-ci.org/garnaat/kappa.svg?branch=develop\n    :target: https://travis-ci.org/garnaat/kappa\n\n.. image:: https://landscape.io/github/garnaat/kappa/develop/landscape.svg\n    :target: https://landscape.io/github/garnaat/kappa/develop\n\n**Kappa** is a command line tool that (hopefully) makes it easier to\ndeploy, update, and test functions for AWS Lambda.\n\nThere are quite a few steps involved in developing a Lambda function.\nYou have to:\n\n* Write the function itself\n* Create the IAM role required by the Lambda function itself (the executing role) to allow it access to any resources it needs to do its job\n* Add additional permissions to the Lambda function if it is going to be used in a Push model (e.g. S3, SNS) rather than a Pull model.\n* Zip the function and any dependencies and upload it to AWS Lambda\n* Test the function with mock data\n* Retrieve the output of the function from CloudWatch Logs\n* Add an event source to the function\n* View the output of the live function\n\nKappa tries to help you with some of this.  It creates all IAM policies for you\nbased on the resources you have told it you need to access.  It creates the IAM\nexecution role for you and associates the policy with it.  Kappa will zip up\nthe function and any dependencies and upload them to AWS Lambda.  It also sends\ntest data to the uploaded function and finds the related CloudWatch log stream\nand displays the log events.  Finally, it will add the event source to turn\nyour function on.\n\nIf you need to make changes, kappa will allow you to easily update your Lambda\nfunction with new code or update your event sources as needed.\n\nInstallation\n============\n\nThe quickest way to get kappa is to install the latest stable version via pip::\n\n    pip install kappa\n\nOr for the development version::\n\n    pip install git+https://github.com/garnaat/kappa.git\n\n\nQuick Start\n===========\n\nTo get a feel for how kappa works, let's take a look at a very simple example\ncontained in the ``samples/simple`` directory of the kappa distribution.  This\nexample is so simple, in fact, that it doesn't really do anything.  It's just a\nsmall Lambda function (written in Python) that accepts some JSON input, logs\nthat input to CloudWatch logs, and returns a JSON document back.\n\nThe structure of the directory is::\n\n    simple/\n    ├── _src\n    │   ├── README.md\n    │   ├── requirements.txt\n    │   ├── setup.cfg\n    │   └── simple.py\n    ├── _tests\n    │   └── test_one.json\n    └── kappa.yml.sample\n\nWithin the directory we see:\n\n* ``kappa.yml.sample`` which is a sample YAML configuration file for the project\n* ``_src`` which is a directory containing the source code for the Lambda function\n* ``_test`` which is a directory containing some test data\n\nThe first step is to make a copy of the sample configuration file:\n\n.. code-block:: bash\n\n    cd simple\n    cp kappa.yml.sample kappa.yml\n\nNow you will need to edit ``kappa.yml`` slightly for your use.  The file looks\nlike this:\n\n.. code-block:: yaml\n\n    ---\n    name: kappa-simple\n    environments:\n      dev:\n        profile: <your profile here>\n        region: <your region here>\n        environment_variables:\n          <key 1>: <value 1>\n          <key 2>: <value 2>\n        policy:\n          resources:\n            - arn: arn:aws:logs:*:*:*\n              actions:\n                - \"*\"\n      prod:\n        profile: <your profile here>\n        region: <your region here>\n        policy:\n          resources:\n            - arn: arn:aws:logs:*:*:*\n              actions:\n              - \"*\"\n    lambda:\n      description: A very simple Kappa example\n      handler: simple.handler\n      runtime: python2.7\n      memory_size: 128\n      timeout: 3\n      log_retention_policy: 7\n\nThe ``name`` at the top is just a name used for this Lambda function and other\nthings we create that are related to this Lambda function (e.g. roles,\npolicies, etc.).\n\nThe ``environments`` section is where we define the different environments into\nwhich we wish to deploy this Lambda function.  Each environment is identified\nby a ``profile`` (as used in the AWS CLI and other AWS tools) and a\n``region``.  You can define as many environments as you wish but each\ninvocation of ``kappa`` will deal with a single environment.  An environment\ncan optionally contain ``environment variables`` as key-value pairs.  Each\nenvironment section also includes a ``policy`` section.  This is where we tell\nkappa about AWS resources that our Lambda function needs access to and what\nkind of access it requires.  For example, your Lambda function may need to\nread from an SNS topic or write to a DynamoDB table and this is where you would\nprovide the ARN (`Amazon Resource Name`_) that identifies those resources.\nSince this is a very simple example, the only resource listed here is for\nCloudWatch logs so that our Lambda function is able to write to the CloudWatch\nlog group that will be created for it automatically by AWS Lambda.\n\n.. _`Amazon Resource Name`: http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\n\nThe ``lambda`` section contains the configuration information about our Lambda\nfunction.  These values are passed to Lambda when we create the function and\ncan be updated at any time after. ``log_retention_policy`` is an optional\nparameter. When supplied, it defines the number of days our Lambda function\nCloudwatch logs kept for. By default, these logs are never removed.\n\nTo modify this for your own use, you just need to put in the right values for\n``profile`` and ``region`` in one of the environment sections.  You can also\nchange the names of the environments to be whatever you like but the name\n``dev`` is the default value used by kappa so it's kind of handy to avoid\ntyping.\n\nOnce you have made the necessary modifications, you should be ready to deploy\nyour Lambda function to the AWS Lambda service.  To do so, just do this:\n\n.. code-block:: bash\n\n    kappa deploy\n\nThis assumes you want to deploy the default environment called ``dev`` and that\nyou have named your config file ``kappa.yml``.  If, instead, you called your\nenvironment ``test`` and named your config file foo.yml, you would do this:\n\n.. code-block:: bash\n\n    kappa --env test --config foo.yml deploy\n\nIn either case, you should see output that looks something like this:\n\n.. code-block:: bash\n\n    kappa deploy\n    # deploying\n    # ...deploying policy kappa-simple-dev\n    # ...creating function kappa-simple-dev\n    # done\n\nSo, what kappa has done is it has created a new Managed Policy called\n``kappa-simple-dev`` that grants access to the CloudWatch Logs service.  It has\nalso created an IAM role called ``kappa-simple-dev`` that uses that policy.\nAnd finally it has zipped up our Python code and created a function in AWS\nLambda called kappa-simple-dev.\n\nTo test this out, try this:\n\n.. code-block:: bash\n\n    kappa invoke _tests/test_one.json\n    # invoking\n    # START RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f Version: $LATEST\n    # [DEBUG]\t2015-12-08T22:00:15.363Z\t0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f\t{u'foo': u'bar', u'fie': u'baz'}\n    # END RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f\n    # REPORT RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f\tDuration: 0.40 ms\tBilled Duration: 100 ms \tMemory Size: 256 MB\tMax Memory Used: 23 MB\n    #\n    # Response:\n    # {\"status\": \"success\"}\n    # done\n\nWe have just called our Lambda function, passing in the contents of the file\n``_tests/test_one.json`` as input to our function.  We can see the output of\nthe CloudWatch logs for the call and we can see the logging call in the Python\nfunction that prints out the ``event`` (the data) passed to the function.  And\nfinally, we can see the Response from the function which, for now, is just a\nhard-coded data structure returned by the function.\n\nNeed to make a change in your function, your list of resources, or your\nfunction configuration?  Just go ahead and make the change and then re-run the\n``deploy`` command:\n\n.. code-block:: bash\n\n    kappa deploy\n\nKappa will figure out what has changed and make the necessary updates for you.\n\nThat gives you a quick overview of kappa.  To learn more about it, I recommend\nyou check out the tutorial.\n\nPolicies\n========\n\nHands up who loves writing IAM policies. Yeah, that's what I thought. With\nKappa, there is a simplified way of writing policies and granting your Lambda\nfunction the permissions it needs.\n\nThe simplified version allows you to specify, in your ``kappa.yml`` file, the\nARN of the resource you want to access, and then a list of the API methods you\nwant to allow. For example:\n\n.. code-block:: yaml\n\n    policy:\n      resources:\n        - arn: arn:aws:logs:*:*:*\n          actions:\n            - \"*\"\n\nTo express this using the official IAM policy format, you can instead use a\nstatement:\n\n.. code-block:: yaml\n\n    policy:\n      statements:\n        - Effect: Allow\n          Resource: \"*\"\n          Action:\n            - \"logs:*\"\n\nBoth of these do the same thing.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jxltom/kappa",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jxltom-kappa",
    "package_url": "https://pypi.org/project/jxltom-kappa/",
    "platform": "",
    "project_url": "https://pypi.org/project/jxltom-kappa/",
    "project_urls": {
      "Homepage": "https://github.com/jxltom/kappa"
    },
    "release_url": "https://pypi.org/project/jxltom-kappa/0.7.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A CLI tool for AWS Lambda developers",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6440035,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed5b32070ba04aedc953c47d4881ee7342dc20cf619ef596ff716942d7f1fe0d",
          "md5": "e88aebaf9f27dfc24b4f3df817141268",
          "sha256": "7620d48a06c978ef519007449038a18965d329641e4777013f9c11ec0624a4fb"
        },
        "downloads": -1,
        "filename": "jxltom-kappa-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e88aebaf9f27dfc24b4f3df817141268",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30749,
        "upload_time": "2020-01-12T14:59:24",
        "upload_time_iso_8601": "2020-01-12T14:59:24.585192Z",
        "url": "https://files.pythonhosted.org/packages/ed/5b/32070ba04aedc953c47d4881ee7342dc20cf619ef596ff716942d7f1fe0d/jxltom-kappa-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed5b32070ba04aedc953c47d4881ee7342dc20cf619ef596ff716942d7f1fe0d",
        "md5": "e88aebaf9f27dfc24b4f3df817141268",
        "sha256": "7620d48a06c978ef519007449038a18965d329641e4777013f9c11ec0624a4fb"
      },
      "downloads": -1,
      "filename": "jxltom-kappa-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e88aebaf9f27dfc24b4f3df817141268",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30749,
      "upload_time": "2020-01-12T14:59:24",
      "upload_time_iso_8601": "2020-01-12T14:59:24.585192Z",
      "url": "https://files.pythonhosted.org/packages/ed/5b/32070ba04aedc953c47d4881ee7342dc20cf619ef596ff716942d7f1fe0d/jxltom-kappa-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}