{
  "info": {
    "author": "TransferWise",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# pipelinewise-tap-mysql\n\n[![PyPI version](https://badge.fury.io/py/pipelinewise-tap-mysql.svg)](https://badge.fury.io/py/pipelinewise-tap-mysql)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-tap-mysql.svg)](https://pypi.org/project/pipelinewise-tap-mysql/)\n[![License: MIT](https://img.shields.io/badge/License-GPLv3-yellow.svg)](https://opensource.org/licenses/GPL-3.0)\n\n[Singer](https://www.singer.io/) tap that extracts data from a [MySQL](https://www.mysql.com/) database and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).\n\nThis is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector.\n\n## How to use it\n\nThe recommended method of running this tap is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at [Tap MySQL](https://transferwise.github.io/pipelinewise/connectors/taps/mysql.html)\n\nIf you want to run this [Singer Tap](https://singer.io) independently please read further.\n\n## Usage\n\nThis section dives into basic usage of `tap-mysql` by walking through extracting\ndata from a table. It assumes that you can connect to and read from a MySQL\ndatabase.\n\n### Install\n\nFirst, make sure Python 3 is installed on your system or follow these\ninstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or\n[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).\n\nIt's recommended to use a virtualenv:\n\n```bash\n  python3 -m venv venv\n  pip install pipelinewise-tap-mysql\n```\n\nor\n\n```bash\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .\n```\n\n### Have a source database\n\nThere's some important business data siloed in this MySQL database -- we need to\nextract it. Here's the table we'd like to sync:\n\n```\nmysql> select * from example_db.animals;\n+----|----------|----------------------+\n| id | name     | likes_getting_petted |\n+----|----------|----------------------+\n|  1 | aardvark |                    0 |\n|  2 | bear     |                    0 |\n|  3 | cow      |                    1 |\n+----|----------|----------------------+\n3 rows in set (0.00 sec)\n```\n\n### Create the configuration file\n\nCreate a config file containing the database connection credentials, e.g.:\n\n```json\n{\n  \"host\": \"localhost\",\n  \"port\": \"3306\",\n  \"user\": \"root\",\n  \"password\": \"password\"\n}\n```\n\nThese are the same basic configuration properties used by the MySQL command-line\nclient (`mysql`).\n\n### Optional config parameters\n\n`filter_db`: Comma separated list of schemas to extract tables only from particular schemas and to improve data extraction performance\n\n`session_sqls`: List of SQL commands to run when a connection made. This allows to set session variables dynamically, like timeouts. If not set then the following commands will be executed:\n```\nSET @@session.time_zone=\"+0:00\"\nSET @@session.wait_timeout=28800\nSET @@session.net_read_timeout=3600\nSET @@session.innodb_lock_wait_timeout=3600\n```\n\n### Discovery mode\n\nThe tap can be invoked in discovery mode to find the available tables and\ncolumns in the database:\n\n```bash\n$ tap-mysql --config config.json --discover\n\n```\n\nA discovered catalog is output, with a JSON-schema description of each table. A\nsource table directly corresponds to a Singer stream.\n\n```json\n{\n  \"streams\": [\n    {\n      \"tap_stream_id\": \"example_db-animals\",\n      \"table_name\": \"animals\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"inclusion\": \"available\",\n            \"type\": [\n              \"null\",\n              \"string\"\n            ],\n            \"maxLength\": 255\n          },\n          \"id\": {\n            \"inclusion\": \"automatic\",\n            \"minimum\": -2147483648,\n            \"maximum\": 2147483647,\n            \"type\": [\n              \"null\",\n              \"integer\"\n            ]\n          },\n          \"likes_getting_petted\": {\n            \"inclusion\": \"available\",\n            \"type\": [\n              \"null\",\n              \"boolean\"\n            ]\n          }\n        }\n      },\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"row-count\": 3,\n            \"table-key-properties\": [\n              \"id\"\n            ],\n            \"database-name\": \"example_db\",\n            \"selected-by-default\": false,\n            \"is-view\": false,\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"id\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"int(11)\",\n            \"selected-by-default\": true\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"name\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"varchar(255)\",\n            \"selected-by-default\": true\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"likes_getting_petted\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"tinyint(1)\",\n            \"selected-by-default\": true\n          }\n        }\n      ],\n      \"stream\": \"animals\"\n    }\n  ]\n}\n\n```\n\n### Field selection\n\nIn sync mode, `tap-mysql` consumes the catalog and looks for tables and fields\nhave been marked as _selected_ in their associated metadata entries.\n\nRedirect output from the tap's discovery mode to a file so that it can be\nmodified:\n\n```bash\n$ tap-mysql -c config.json --discover > properties.json\n```\n\nThen edit `properties.json` to make selections. In this example we want the\n`animals` table. The stream's metadata entry (associated with `\"breadcrumb\": []`) \ngets a top-level `selected` flag, as does its columns' metadata entries. Additionally,\nwe will mark the `animals` table to replicate using a `FULL_TABLE` strategy. For more,\ninformation, see [Replication methods and state file](#replication-methods-and-state-file).\n\n```json\n[\n  {\n    \"breadcrumb\": [],\n    \"metadata\": {\n      \"row-count\": 3,\n      \"table-key-properties\": [\n        \"id\"\n      ],\n      \"database-name\": \"example_db\",\n      \"selected-by-default\": false,\n      \"is-view\": false,\n      \"selected\": true,\n      \"replication-method\": \"FULL_TABLE\"\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"id\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"int(11)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"name\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"varchar(255)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"likes_getting_petted\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"tinyint(1)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  }\n]\n```\n\n### Sync mode\n\nWith a properties catalog that describes field and table selections, the tap can be invoked in sync mode:\n\n```bash\n$ tap-mysql -c config.json --properties properties.json\n```\n\nMessages are written to standard output following the Singer specification. The\nresultant stream of JSON data can be consumed by a Singer target.\n\n```json\n{\"value\": {\"currently_syncing\": \"example_db-animals\"}, \"type\": \"STATE\"}\n\n{\"key_properties\": [\"id\"], \"stream\": \"animals\", \"schema\": {\"properties\": {\"name\": {\"inclusion\": \"available\", \"maxLength\": 255, \"type\": [\"null\", \"string\"]}, \"likes_getting_petted\": {\"inclusion\": \"available\", \"type\": [\"null\", \"boolean\"]}, \"id\": {\"inclusion\": \"automatic\", \"minimum\": -2147483648, \"type\": [\"null\", \"integer\"], \"maximum\": 2147483647}}, \"type\": \"object\"}, \"type\": \"SCHEMA\"}\n\n{\"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"ACTIVATE_VERSION\"}\n\n{\"record\": {\"name\": \"aardvark\", \"likes_getting_petted\": false, \"id\": 1}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"record\": {\"name\": \"bear\", \"likes_getting_petted\": false, \"id\": 2}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"record\": {\"name\": \"cow\", \"likes_getting_petted\": true, \"id\": 3}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"ACTIVATE_VERSION\"}\n\n{\"value\": {\"currently_syncing\": \"example_db-animals\", \"bookmarks\": {\"example_db-animals\": {\"initial_full_table_complete\": true}}}, \"type\": \"STATE\"}\n\n{\"value\": {\"currently_syncing\": null, \"bookmarks\": {\"example_db-animals\": {\"initial_full_table_complete\": true}}}, \"type\": \"STATE\"}\n```\n\n## Replication methods and state file\n\nIn the above example, we invoked `tap-mysql` without providing a _state_ file\nand without specifying a replication method. The two ways to replicate a given\ntable are `FULL_TABLE` and `INCREMENTAL`.\n\n### Full Table\n\nFull-table replication extracts all data from the source table each time the tap\nis invoked.\n\n### Incremental\n\nIncremental replication works in conjunction with a state file to only extract\nnew records each time the tap is invoked. This requires a replication key to be\nspecified in the table's metadata as well.\n\n#### Example\n\nLet's sync the `animals` table again, but this time using incremental\nreplication. The replication method and replication key are set in the\ntable's metadata entry in properties file:\n\n```json\n{\n  \"streams\": [\n    {\n      \"tap_stream_id\": \"example_db-animals\",\n      \"table_name\": \"animals\",\n      \"schema\": { ... },\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"row-count\": 3,\n            \"table-key-properties\": [\n              \"id\"\n            ],\n            \"database-name\": \"example_db\",\n            \"selected-by-default\": false,\n            \"is-view\": false,\n            \"replication-method\": \"INCREMENTAL\",\n            \"replication-key\": \"id\"\n          }\n        },\n        ...\n      ],\n      \"stream\": \"animals\"\n    }\n  ]\n}\n```\n\nWe have no meaningful state so far, so just invoke the tap in sync mode again\nwithout a state file:\n\n```bash\n$ tap-mysql -c config.json --properties properties.json\n```\n\nThe output messages look very similar to when the table was replicated using the\ndefault `FULL_TABLE` replication method. One important difference is that the\n`STATE` messages now contain a `replication_key_value` -- a bookmark or\nhigh-water mark -- for data that was extracted:\n\n```json\n{\"type\": \"STATE\", \"value\": {\"currently_syncing\": \"example_db-animals\"}}\n\n{\"stream\": \"animals\", \"type\": \"SCHEMA\", \"schema\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": [\"null\", \"integer\"], \"minimum\": -2147483648, \"maximum\": 2147483647, \"inclusion\": \"automatic\"}, \"name\": {\"type\": [\"null\", \"string\"], \"inclusion\": \"available\", \"maxLength\": 255}, \"likes_getting_petted\": {\"type\": [\"null\", \"boolean\"], \"inclusion\": \"available\"}}}, \"key_properties\": [\"id\"]}\n\n{\"stream\": \"animals\", \"type\": \"ACTIVATE_VERSION\", \"version\": 1509135204169}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 1, \"name\": \"aardvark\", \"likes_getting_petted\": false}}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 2, \"name\": \"bear\", \"likes_getting_petted\": false}}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 3, \"name\": \"cow\", \"likes_getting_petted\": true}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"version\": 1509135204169, \"replication_key_value\": 3, \"replication_key\": \"id\"}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"version\": 1509135204169, \"replication_key_value\": 3, \"replication_key\": \"id\"}}, \"currently_syncing\": null}}\n```\n\nNote that the final `STATE` message has a `replication_key_value` of `3`,\nreflecting that the extraction ended on a record that had an `id` of `3`.\nSubsequent invocations of the tap will pick up from this bookmark.\n\nNormally, the target will echo the last `STATE` after it's finished processing\ndata. For this example, let's manually write a `state.json` file using the\n`STATE` message:\n\n```json\n{\n  \"bookmarks\": {\n    \"example_db-animals\": {\n      \"version\": 1509135204169,\n      \"replication_key_value\": 3,\n      \"replication_key\": \"id\"\n    }\n  },\n  \"currently_syncing\": null\n}\n```\n\nLet's add some more animals to our farm:\n\n```\nmysql> insert into animals (name, likes_getting_petted) values ('dog', true), ('elephant', true), ('frog', false);\n```\n\n```bash\n$ tap-mysql -c config.json --properties properties.json --state state.json\n```\n\nThis invocation extracts any data since (and including) the\n`replication_key_value`:\n\n```json\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 3}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"key_properties\": [\"id\"], \"schema\": {\"properties\": {\"name\": {\"maxLength\": 255, \"inclusion\": \"available\", \"type\": [\"null\", \"string\"]}, \"id\": {\"maximum\": 2147483647, \"minimum\": -2147483648, \"inclusion\": \"automatic\", \"type\": [\"null\", \"integer\"]}, \"likes_getting_petted\": {\"inclusion\": \"available\", \"type\": [\"null\", \"boolean\"]}}, \"type\": \"object\"}, \"type\": \"SCHEMA\", \"stream\": \"animals\"}\n\n{\"type\": \"ACTIVATE_VERSION\", \"version\": 1509135204169, \"stream\": \"animals\"}\n\n{\"record\": {\"name\": \"cow\", \"id\": 3, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"dog\", \"id\": 4, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"elephant\", \"id\": 5, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"frog\", \"id\": 6, \"likes_getting_petted\": false}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 6}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 6}}, \"currently_syncing\": null}}\n```\n\n---\n\nBased on Stitch documentation",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lfalvey/pipelinewise-tap-mysql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "raygun-tap-mysql",
    "package_url": "https://pypi.org/project/raygun-tap-mysql/",
    "platform": "",
    "project_url": "https://pypi.org/project/raygun-tap-mysql/",
    "project_urls": {
      "Homepage": "https://github.com/lfalvey/pipelinewise-tap-mysql"
    },
    "release_url": "https://pypi.org/project/raygun-tap-mysql/1.3.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Singer.io tap for extracting data from MySQL - PipelineWise compatible",
    "version": "1.3.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8164611,
  "releases": {
    "1.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2c803a2d363f7f214cc5d444853d3783ebe6ea6a0005015ff9f9480b3cf4202",
          "md5": "d510b7841960d777a3c29c8af3bf8b9d",
          "sha256": "4b7734677ad3ad222f52d23349fff49583dca2056baf13564878442eb385b6a3"
        },
        "downloads": -1,
        "filename": "raygun-tap-mysql-1.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d510b7841960d777a3c29c8af3bf8b9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22682,
        "upload_time": "2020-09-11T13:13:38",
        "upload_time_iso_8601": "2020-09-11T13:13:38.574779Z",
        "url": "https://files.pythonhosted.org/packages/d2/c8/03a2d363f7f214cc5d444853d3783ebe6ea6a0005015ff9f9480b3cf4202/raygun-tap-mysql-1.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b153088fe4e402f2b2ab03600046a8ef92d210367cfa0a1506cf2101f24dcbc",
          "md5": "4775489c083be7b45edc0afaf465fb5b",
          "sha256": "c50836c998869158e454ce188caa96bb8577553f923c95998e2829705cd1e50e"
        },
        "downloads": -1,
        "filename": "raygun-tap-mysql-1.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "4775489c083be7b45edc0afaf465fb5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22691,
        "upload_time": "2020-09-11T13:06:03",
        "upload_time_iso_8601": "2020-09-11T13:06:03.836199Z",
        "url": "https://files.pythonhosted.org/packages/5b/15/3088fe4e402f2b2ab03600046a8ef92d210367cfa0a1506cf2101f24dcbc/raygun-tap-mysql-1.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2c803a2d363f7f214cc5d444853d3783ebe6ea6a0005015ff9f9480b3cf4202",
        "md5": "d510b7841960d777a3c29c8af3bf8b9d",
        "sha256": "4b7734677ad3ad222f52d23349fff49583dca2056baf13564878442eb385b6a3"
      },
      "downloads": -1,
      "filename": "raygun-tap-mysql-1.3.10.tar.gz",
      "has_sig": false,
      "md5_digest": "d510b7841960d777a3c29c8af3bf8b9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22682,
      "upload_time": "2020-09-11T13:13:38",
      "upload_time_iso_8601": "2020-09-11T13:13:38.574779Z",
      "url": "https://files.pythonhosted.org/packages/d2/c8/03a2d363f7f214cc5d444853d3783ebe6ea6a0005015ff9f9480b3cf4202/raygun-tap-mysql-1.3.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}