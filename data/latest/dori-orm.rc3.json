{
  "info": {
    "author": "Mohammad Dori",
    "author_email": "mr.dori.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# My ORM\n\nIt's a simple ORM built with Python and sqlite.<br>This is not a real ORM to use in your project.\n\n#\n\n# Use My ORM\n\nYou can see sample codes in [examples.py](examples.py).<br>\nI will be glad if you cooperate in the development of this project ðŸ˜Š\n\n#\n\n## Install My ORM\n\n```\npip install dori-orm\n```\n\n#\n\n## Imports\n\nImport DB, ResultConfig, operators and columns from the _dori-orm_ library.\n<br>\n**DB**: For create classes and database table.<br>\n**ResultConfig**: Change the result, e.g. ordering and limit.<br>\n**operators**: SQL operators like AND, OR, NOT<br>\n**columns**: To create table columns with specific _data type_ and _constraints_. For example `age = columns.Integer(nullable=False)` means `age INTEGER NOT NULL`\n\n```python\nfrom dori_orm import DB, ResultConfig\nfrom dori_orm.operators import AND, OR, NOT\nfrom dori_orm import columns\n```\n\n#\n\n## Create Table\n\nCreate class and inheritance from `DB`, tables created automatically in database(set db name with file name) when you inheritance from DB, you can define class variable and use `columns` to create table column.\n\n```python\nclass Person(DB):\n    name = columns.Text(nullable=False)\n    family = columns.Text(nullable=False)\n    age = columns.Integer()\n    phone = columns.Integer()\n    salary = columns.Real(default=100_000)\n\n\nclass School(DB):\n    name = columns.VarChar(nullable=False, unique=True)\n    created_at = columns.Date()\n    address = columns.Text()\n    students_count = columns.SmallInt(default=300)\n\n\nclass Student(DB):\n    person = columns.ForeignKey(Person)\n    school = columns.ForeignKey(School)\n    class_name = columns.VarChar()\n```\n\n#\n\n## Insert Data\n\nInsert data to table with create instance from class. this code create two row in database with this arguments.\n\n```python\nperson1 = Person(\n    name='Mohammad',\n    family='Dori',\n    age=20,\n    phone=1234567890,\n    salary=110_000,\n)\nprint(person1.age)  # 20\n\nperson2 = Person(\n    name='John',\n    family='Gits',\n    age=30,\n    phone=1234567890,\n)\n```\n\n#\n\n## Select Data\n\nSelect rows from table.<br>\n`all` method select all rows from table.<br>\n`get` method, select all rows with defined columns.\n`filter` method select all rows that match the given conditions.\n\n```python\nprint(Person.all())\n```\n\n```python\n# Result:\n[\n    <'id':1, 'name':'Mohammad', 'family':'Dori', 'age':20, 'phone':1234567890, 'salary':110000.0>,\n    <'id':2, 'name':'John', 'family':'Gits', 'age':30, 'phone':1234567890, 'salary':100000.0>\n]\n```\n\n```python\nprint(Person.get('id', 'name', 'family'))\n```\n\n```python\n# Result:\n[\n    <'id':1, 'name':'Mohammad', 'family':'Dori'>,\n    <'id':2, 'name':'John', 'family':'Gits'>\n]\n```\n\n```python\nprint(Person.filter(id=1, name='Mohammad'))\n```\n\n```python\n# Result:\n[\n    <'id':1, 'name':'Mohammad', 'family':'Dori', 'age':20, 'phone':1234567890, 'salary':110000.0>\n]\n```\n\n#\n\n## Advance Filtering\n\nYou can use operators in filter method. like AND, OR, NOT, BETWEEN, LIKE, IN, =, !=, <, <=, >, >=.\n\n**AND**: e.g. `AND(x='', y=123)` that means `x='' AND y=123`\n\n```python\nrows = Person.filter(\n    AND(id=2, name='Ali')\n)\n```\n\n**OR**: e.g. `OR(x='', y=123)` that means `x='' OR y=123`\n\n```python\nrows = Person.filter(\n    OR(id=2, name='Ali')\n)\n```\n\n**NOT**: e.g. `NOT(OR(x='', y=123))` that means `NOT (x='' OR y=123)`\n\n```python\nrows = Person.filter(\n    NOT(AND(id=2, name='Ali'))\n)\n```\n\nYou can use another operator in operator.\n\n```python\nrows = Person.filter(\n    OR(OR(name='Ali', id=2), OR(salary=10, age=20))\n)\n```\n\n**BETWEEN**: Return row, if it value between x and y.\n\n```python\nprint(Person.filter(id__between=(2, 8)))\n```\n\n**LIKE**: Use pattern with % and \\_ to filter rows.\n\n```python\nprint(Person.filter(\n    name__like='Mo%',\n    config=ResultConfig(\n        limit=2,\n        order_by='age',\n    )\n))\n```\n\n**lt**: less than, means `<`\n\n```python\nprint(Person.filter(id__lt=5))\n```\n\n**lte**: less than or equal, means `<=`\n\n```python\nprint(Person.filter(id__lte=5))\n```\n\n**gt**: greater than, means `>`\n\n```python\nprint(Person.filter(id__gt=5))\n```\n\n**gte**: greater than or equal, means `>=`\n\n```python\nprint(Person.filter(id__gte=5))\n```\n\n**not**: not equal, means `!=`\n\n```python\nprint(Person.filter(id__n=5))\n```\n\nYou can use any filter together.\n\n```python\nprint(Person.filter(\n    OR(\n        id__n=5,\n        name__in=('Mohammad', 'Salar'),\n        age__gte=8\n    )\n))\n```\n\n#\n\n## Result Methods\n\n`result.count()` return count of results.<br>\n`result.first()` return first row in result.<br>\n`result.last()` return last row in result.\n\n```python\nnot_mohammad = Person.filter(name__n='Mohammad')\nprint(not_mohammad.count())\nprint(not_mohammad.first())\nprint(not_mohammad.last())\n```\n\nIterate on result.\n\n```python\nfor row in not_mohammad:\n    print(row.name)\n    row.remove()\n    # row.update(...)\n```\n\n#\n\n## Update Row\n\n```python\nperson1 = Person(\n    name='Mohammad',\n    family='Dori',\n    age=20,\n    phone=1234567890,\n    salary=110_000,\n)\n\nprint(person1)\nperson1.update(name='Salar')\nprint(person1)\n```\n\n#\n\n## Table Class Method\n\n**max**: Return maximum value of column.\n\n```python\nprint(Person.max('salary'))\n```\n\n**min**: Return minimum value of column.\n\n```python\nprint(Person.min('salary'))\n```\n\n**sum**: Return sum of column values.\n\n```python\nprint(Person.sum('salary'))\n```\n\n**avg**: Return average of column values.\n\n```python\nprint(Person.avg('salary'))\n```\n\n**count**: Return count of rows in table.\n\n```python\nprint(Person.count())\n```\n\n**first**: Return first row of table.\n\n```python\nprint(Person.first())\n```\n\n**last**: Return last row of table.\n\n```python\nprint(Person.last())\n```\n\n#\n\n## Result configuration\n\n`limit` Limit the number of result rows.<br>\n`order_by` Order result by columns.<br>\n`reverse` Use with order_by, False means sort ASC and True means sort DESC.\n\n```python\nprint(Person.all(\n    config=ResultConfig(\n        order_by='id',\n        reverse=True\n    )\n))\nprint(Person.get(\n    config=ResultConfig(\n        limit=5\n    )\n))\n```\n\n#\n\n## Foreign Key\n\n```python\nperson1 = Person(\n    name='Mohammad',\n    family='Dori',\n    age=20,\n    phone=1234567890,\n    salary=110_000,\n)\nschool1 = School(\n    name='The Sample School',\n    created_at='2002-01-04',\n    address='1600 Amphitheatre Parkway in Mountain View, California',\n)\n\nprint(school1)\n\nstudent = Student(\n    person=person1,\n    school=school1,\n    class_name='A3',\n)\n\nprint(school1.id)\nprint(person1.id)\n\nprint(student)\n```\n\n#\n\n## Change Easy\n\nRemove `class_name` column and add gpa column. now add a row to table.\n\n```python\nclass Student(DB):\n    person = columns.ForeignKey(Person)\n    school = columns.ForeignKey(School)\n    gpa = columns.TinyInt(default=20)\n\nperson1 = Person(\n    name='Mohammad',\n    family='Dori',\n    age=20,\n    phone=1234567890,\n    salary=110_000,\n)\nschool1 = School(\n    name='The Sample School',\n    created_at='2002-01-04',\n    address='1600 Amphitheatre Parkway in Mountain View, California',\n)\n\nprint(school1)\n\nstudent = Student(\n    person=person1,\n    school=school1,\n    gpa=10,\n)\n\nprint(school1.id)\nprint(person1.id)\n\nprint(student)\n```\n\n#\n\n## See All Query Usage\n\n```python\nprint(Person.queries())\n```\n\n#\n\n# Links\n\nDownload Source Code: [Click Here](https://github.com/dori-dev/my-orm/archive/refs/heads/main.zip)\n\nMy Github Account: [Click Here](https://github.com/dori-dev/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dori-dev/my-orm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dori-orm",
    "package_url": "https://pypi.org/project/dori-orm/",
    "platform": null,
    "project_url": "https://pypi.org/project/dori-orm/",
    "project_urls": {
      "Homepage": "https://github.com/dori-dev/my-orm"
    },
    "release_url": "https://pypi.org/project/dori-orm/4.6.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "simple orm, to manage your database.",
    "version": "4.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14944617,
  "releases": {
    "4.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e15629c3911667b8bb62ada8a31f844d4a39fa2319de2b116ae6bf3d6f9e241d",
          "md5": "1825a13b55400bd1706aa165912cb979",
          "sha256": "74b7588a63ce49aa1e04583bffa08ca791ffd73d93f815f5d947520203fabdec"
        },
        "downloads": -1,
        "filename": "dori-orm-4.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1825a13b55400bd1706aa165912cb979",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6068,
        "upload_time": "2022-08-31T05:16:06",
        "upload_time_iso_8601": "2022-08-31T05:16:06.977797Z",
        "url": "https://files.pythonhosted.org/packages/e1/56/29c3911667b8bb62ada8a31f844d4a39fa2319de2b116ae6bf3d6f9e241d/dori-orm-4.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e78b10c51b2dfc49ab861eac90a1656456868a2c3da905f2997991a008abe4ed",
          "md5": "3c826c79332a9efb5e6586a66fe3e2b6",
          "sha256": "982acb463cf7931ef7a76cd777ba71029ce11fef26105d4849bc58bd387fc834"
        },
        "downloads": -1,
        "filename": "dori-orm-4.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c826c79332a9efb5e6586a66fe3e2b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7680,
        "upload_time": "2022-08-31T05:20:23",
        "upload_time_iso_8601": "2022-08-31T05:20:23.547830Z",
        "url": "https://files.pythonhosted.org/packages/e7/8b/10c51b2dfc49ab861eac90a1656456868a2c3da905f2997991a008abe4ed/dori-orm-4.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b698aff6f070a95d161d309d409019750d67709380cd5202850577075472a605",
          "md5": "7613e976af022a83b6ffe2a1291c66a2",
          "sha256": "94c605119404426c2271c8cc960981cb32a8dea889d1532b4d4fa8ca08fc7b9d"
        },
        "downloads": -1,
        "filename": "dori-orm-4.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7613e976af022a83b6ffe2a1291c66a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10145,
        "upload_time": "2022-08-31T06:30:55",
        "upload_time_iso_8601": "2022-08-31T06:30:55.702970Z",
        "url": "https://files.pythonhosted.org/packages/b6/98/aff6f070a95d161d309d409019750d67709380cd5202850577075472a605/dori-orm-4.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b698aff6f070a95d161d309d409019750d67709380cd5202850577075472a605",
        "md5": "7613e976af022a83b6ffe2a1291c66a2",
        "sha256": "94c605119404426c2271c8cc960981cb32a8dea889d1532b4d4fa8ca08fc7b9d"
      },
      "downloads": -1,
      "filename": "dori-orm-4.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7613e976af022a83b6ffe2a1291c66a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10145,
      "upload_time": "2022-08-31T06:30:55",
      "upload_time_iso_8601": "2022-08-31T06:30:55.702970Z",
      "url": "https://files.pythonhosted.org/packages/b6/98/aff6f070a95d161d309d409019750d67709380cd5202850577075472a605/dori-orm-4.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}