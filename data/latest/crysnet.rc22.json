{
  "info": {
    "author": "Zongxiang Hu",
    "author_email": "huzongxiang@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![](https://img.shields.io/badge/license-BSD--2--Clause-green)\r\n![](https://img.shields.io/badge/build-passing-brightgreen)\r\n![](https://img.shields.io/pypi/v/crysnet)\r\n![](https://img.shields.io/pypi/dm/crysnet)\r\n![](https://img.shields.io/badge/python-3.8-blue)\r\n![](https://img.shields.io/badge/tensorflow-2.6.0-red)\r\n![](https://img.shields.io/github/stars/huzongxiang/CrystalNetwork?style=social)\r\n\r\n# CrysNet\r\nGrysNet is a neural network package that allows researchers to train custom models for crystal modeling tasks. It aims to accelerate the research and application of material science. It provides user a series of state-of-the-art models and supports user's innovative researches.\r\n\r\n## Table of Contents\r\n\r\n* [Hightlights](#hightlights)\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n* [Framework](#crysnet-framework)\r\n* [Implemented-models](#implemented-models)\r\n* [Contributors](#contributors)\r\n* [References](#references)\r\n* [Contact](#Contact)\r\n\r\n<a name=\"Hightlights\"></a>\r\n## Hightlights\r\n+ Easy to installation.\r\n+ Three steps to fast testing.\r\n+ Flexible and adaptive to user's trainning task.\r\n\r\n<a name=\"Installation\"></a>\r\n## Installation\r\n\r\nCrysNet can be installed easily through anaconda! As follows:\r\n\r\n+ Create a new conda environment named \"crysnet\" by command, then activate environment \"crysnet\":    \r\n    ```bash\r\n    conda create -n crysnet python=3.8  \r\n    conda activate crysnet \r\n    ```  \r\n   It's necessary to create a new conda environment to aviod bugs causing by version conflict.   \r\n \r\n+ Configure dependencies of crysnet:\r\n    ```bash\r\n    conda install -c conda-forge tensorflow-gpu==2.6.0\r\n    ```\r\n\r\n+ Install pymatgen:  \r\n    ```bash\r\n    conda install --channel conda-forge pymatgen  \r\n    ```    \r\n\r\n+ Install other dependencies:  \r\n    ```bash\r\n    conda install --channel conda-forge mendeleev  \r\n    conda install --channel conda-forge graphviz  \r\n    conda install --channel conda-forge pydot  \r\n    conda install --channel conda-forge sklearn\r\n    ```   \r\n\r\n+ Install crysnet:  \r\n    ```bash\r\n    pip install crysnet  \r\n    ```  \r\n  \r\n\r\n<a name=\"Usage\"></a>\r\n## Usage\r\n### Quick start\r\nCrysNet is very easy to use!  \r\nJust ***three steps*** can finish a fast test using crysnet:\r\n+ **download test data**  \r\nGet test datas from https://github.com/huzongxiang/CrystalNetwork/tree/main/datas/    \r\nThere are three json files in datas: dataset_classification.json, dataset_multiclassification.json and dataset_regression.json.  \r\n+ **prepare workdir**  \r\nDownload datas and put it in your trainning work directory, test.py file should also be put in the directory  \r\n+ **run command**  \r\nrun command:  \r\n\t```bash\r\n\tpython test.py  \r\n\t```  \r\nYou have finished your testing multi-classification trainning! The trainning results and model weight could be saved in /results and /models, respectively.  \r\n\r\n### Understanding trainning script  \r\nYou can use crysnet by provided trainning scripts in user_easy_trainscript only, but understanding script will help you custom your trainning task!   \r\n     \r\n+ **get datas**  \r\nGet current work directory of running trainning script, the script will read datas from 'workdir/datas/' , then saves results and models to 'workdir/results/' and 'workdir/models/'  \r\n\t```python\r\n\tfrom pathlib import Path\r\n\tModulePath = Path(__file__).parent.absolute() # workdir\r\n\t```  \r\n\r\n+ **fed trainning datas**   \r\nModule Dataset will read data from 'ModulePath/datas/dataset.json', 'task_type' defines regression/classification/multi-classification, 'data_path' gets path of trainning datas.  \r\n\t```python\r\n\tfrom crysnet.data import Dataset\r\n\tdataset = Dataset(task_type='multiclassfication', data_path=ModulePath)\r\n\t```  \r\n\r\n+ **generator**  \r\nModule GraphGenerator feds datas into model during trainning. The Module splits datas into train, valid, test sets, and transform structures data into labelled graphs and gets three generators.\r\nBATCH_SIZE is batch size during trainning, DATA_SIZE defines number of datas your used in entire datas, CUTOFF is cutoff of graph edges in crystal.   \r\n\t```python\r\n\tfrom crysnet.data.generator import GraphGenerator\r\n\tBATCH_SIZE = 128\r\n\tDATA_SIZE = None\r\n\tCUTOFF = 2.5\r\n\tGenerators = GraphGenerator(dataset, data_size=DATA_SIZE, batch_size=BATCH_SIZE, cutoff=CUTOFF)\r\n\ttrain_data = Generators.train_generator\r\n\tvalid_data = Generators.valid_generator\r\n\ttest_data = Generators.test_generator\r\n\r\n\t#if task is multiclassfication, should define variable multiclassifiction\r\n\tmulticlassification = Generators.multiclassification  \r\n\t```  \r\n\r\n+ **building model**  \r\nModule GNN defines a trainning framework that accepts a series of models. Crysnet provides a series of mainstream models as your need.  \r\n\t```python\r\n\tfrom crysnet.models import GNN\r\n\tfrom crysnet.models.gnnmodel import MpnnBaseModel, TransformerBaseModel, CgcnnModel, GraphAttentionModel\r\n\r\n\tgnn = GNN(model=MpnnBaseModel,\r\n\t\tatom_dim=16\r\n\t\tbond_dim=64\r\n\t\tnum_atom=118\r\n\t\tstate_dim=16\r\n\t\tsp_dim=230\r\n\t\tunits=32\r\n\t\tedge_steps=1\r\n\t\tmessage_steps=1\r\n\t\ttransform_steps=1\r\n\t\tnum_attention_heads=8\r\n\t\tdense_units=64\r\n\t\toutput_dim=64\r\n\t\treadout_units=64\r\n\t\tdropout=0.0\r\n\t\treg0=0.00\r\n\t\treg1=0.00\r\n\t\treg2=0.00\r\n\t\treg3=0.00\r\n\t\treg_rec=0.00\r\n\t\tbatch_size=BATCH_SIZE\r\n\t\tspherical_harmonics=True\r\n\t\tregression=dataset.regression\r\n\t\toptimizer = 'Adam'\r\n\t\t)\r\n\t```\r\n\r\n+ **trainning**  \r\nUsing trainning function of model to train. Common trainning parameters can be defined, workdir is current directory of trainning script, it saves results of model during trainning. If test_data exists, model will predict on test_data.  \r\n\t```python\r\n\tgnn.train(train_data, valid_data, test_data, epochs=700, lr=3e-3, warm_up=True, load_weights=False, verbose=1, checkpoints=None, save_weights_only=True, workdir=ModulePath)\r\n\t```\r\n\r\n+ **prediction**  \r\nThe simplest method for predicting is using script predict.py in /user_easy_train_scripts.  \r\nUsing predict_data funciton to predict.  \r\n\t```python\r\n\tgnn.predict_datas(test_data, workdir=ModulePath)    # predict on test datas with labels\r\n\ty_pred_keras = gnn.predict(datas)                   # predict on new datas without labels\r\n\t```\r\n\r\n+ **preparing your custom datas**  \r\nIf you have your structures (and labels), the Dataset receives pymatgen.core.Structure type. So you should transform your POSCAR or cif to pymatgen.core.Structure type.  \r\n\t```python\r\n\timport os\r\n\tfrom pymatgen.core.structure import Structure\r\n\tstructures = []                                      # your structure list\r\n\tfor cif in os.listdir(cif_path):\r\n\t\tstructures.append(Structure.from_file(cif))    # for POSCAR too\r\n\r\n\t# construct your dataset\r\n\tfrom crysnet.data import Dataset\r\n\tdataset = Dataset(task_type='my_classification', data_path=ModulePath)  # task_type could be my_regression, my_classification, my_multiclassification\r\n\tdataset.prepare_x(structures)\r\n\tdataset.prepare_y(labels)   # if you have labels used to trainning model, labels could be None in prediction on new datas without labels\r\n\r\n\t# alternatively, you can construct dataset as follow\r\n\tdataset.structures = structures\r\n\tdataset.labels = labels\r\n\r\n\t# save your structures and labels to dataset in dataset_my*.json\r\n\tdataset.save_datasets(strurtures, labels)\r\n\r\n\t# for prediction on new datas without labels, Generators has not attribute multiclassification, should assign definite value\r\n\tGenerators = GraphGenerator(dataset, data_size=DATA_SIZE, batch_size=BATCH_SIZE, cutoff=CUTOFF)     # dataset.labels is None\r\n\tGenerators.multiclassification = 5\r\n\tmulticlassification = Generators.multiclassification  # multiclassification = 5\r\n\t```\r\n\r\n+ **models provided by crysnet**  \r\n We provide GraphModel, MpnnBaseModel, TransformerBaseModel, MpnnModel, TransformerModel, DirectionalMpnnModel, DirectionalTransformerModel and CGCNN model according to your demends. TransformerModel, GraphModel and MpnnModel are different models. TransformerModel is a graph transformer. MpnnModel is a massege passing neural network. GraphModel is a combination of TransformerModel and MpnnModel. MpnnBaseModel and TransformerBaseModel don't take directional informations of crystal into count so them run faster. MpnnBaseModel is the fastest model but accuracy is enough for most tasks. TransformerModel can achieve the hightest accuracy in most tasks. The CGCNN model is the crystal graph convolution neural network model. The GraphAttentionModel is the graph attention neural network.  \r\n\t```python\r\n\tfrom crysnet.models import GNN\r\n\tfrom crysnet.models.gnnmodel import MpnnBaseModel, TransformerBaseModel , DirectionalMpnnModel, DirectionalTransformerModel, MpnnModel, TransformerModel, GraphModel, CgcnnModel, GraphAttentionModel\r\n\t```\r\n\r\n+ **custom your model and trainning**  \r\nThe Module GNN provides a flexible trainning framework to accept tensorflow.keras.models.Model type customized by user. Yon can custom your model and train the model according to the following example.  \r\n\t```python\r\n\tfrom tensorflow.keras.models import Model\r\n\tfrom tensorflow.keras import layers\r\n\tfrom crysnet.layers import MessagePassing\r\n\tfrom crysnet.layers import PartitionPadding\r\n\r\n\tdef MyModel(\r\n\t\tbond_dim,\r\n\t\tatom_dim=16,\r\n\t\tnum_atom=118,\r\n\t\tstate_dim=16,\r\n\t\tsp_dim=230,\r\n\t\tunits=32,\r\n\t\tmessage_steps=1,\r\n\t\treadout_units=64,\r\n\t\tbatch_size=16,\r\n\t\t):\r\n\t\tatom_features = layers.Input((), dtype=\"int32\", name=\"atom_features_input\")\r\n\t\tatom_features_ = layers.Embedding(num_atom, atom_dim, dtype=\"float32\", name=\"atom_features\")(atom_features)\r\n\t\tbond_features = layers.Input((bond_dim), dtype=\"float32\", name=\"bond_features\")\r\n\t\tlocal_env = layers.Input((6), dtype=\"float32\", name=\"local_env\")\r\n\t\tstate_attrs = layers.Input((), dtype=\"int32\", name=\"state_attrs_input\")   \r\n\t\tstate_attrs_ = layers.Embedding(sp_dim, state_dim, dtype=\"float32\", name=\"state_attrs\")(state_attrs)\r\n\r\n\t\tpair_indices = layers.Input((2), dtype=\"int32\", name=\"pair_indices\")\r\n\r\n\t\tatom_graph_indices = layers.Input(\r\n\t\t(), dtype=\"int32\", name=\"atom_graph_indices\"\r\n\t\t)\r\n\r\n\t\tbond_graph_indices = layers.Input(\r\n\t\t(), dtype=\"int32\", name=\"bond_graph_indices\"\r\n\t\t)\r\n\r\n\t\tpair_indices_per_graph = layers.Input((2), dtype=\"int32\", name=\"pair_indices_per_graph\")\r\n\r\n\t\tx = MessagePassing(message_steps)(\r\n\t\t[atom_features_, edge_features, state_attrs_, pair_indices,\r\n\t\t\tatom_graph_indices, bond_graph_indices]\r\n\t\t)\r\n\r\n\t\tx = PartitionPadding(batch_size)([x[0], atom_graph_indices])\r\n\t\tx = layers.BatchNormalization()(x)\r\n\t\tx = layers.GlobalAveragePooling1D()(x)\r\n\t\tx = layers.Dense(readout_units, activation=\"relu\", name='readout0')(x)\r\n\t\tx = layers.Dense(1, activation=\"sigmoid\", name='final')(x)\r\n\r\n\t\tmodel = Model(\r\n\t\tinputs=[atom_features, bond_features, local_env, state_attrs, pair_indices, atom_graph_indices,\r\n\t\t\t\t\tbond_graph_indices, pair_indices_per_graph],\r\n\t\toutputs=[x],\r\n\t\t)\r\n\t\treturn model\r\n\r\n\tfrom crysnet.models import GNN\r\n\tgnn = GNN(model=MyModel,     \r\n\t\tatom_dim=16,\r\n\t\tbond_dim=64,\r\n\t\tnum_atom=118,\r\n\t\tstate_dim=16,\r\n\t\tsp_dim=230,\r\n\t\tunits=32,\r\n\t\tmessage_steps=1,\r\n\t\treadout_units=64,\r\n\t\tbatch_size=16,\r\n\t\toptimizer='Adam',\r\n\t\tregression=False,\r\n\t\tmulticlassification=None,)\r\n\tgnn.train(train_data, valid_data, test_data, epochs=700, lr=3e-3, warm_up=True, load_weights=False, verbose=1, checkpoints=None, save_weights_only=True, workdir=ModulePath)  \r\n\t```  \r\n\tYou can set edge as your model output.   \r\n\t```python\r\n\tfrom crysnet.layers import EdgeMessagePassing\r\n\tdef MyModel(\r\n\t\tbond_dim,\r\n\t\tatom_dim=16,\r\n\t\tnum_atom=118,\r\n\t\tstate_dim=16,\r\n\t\tsp_dim=230,\r\n\t\tunits=32,\r\n\t\tmessage_steps=1,\r\n\t\treadout_units=64,\r\n\t\tbatch_size=16,\r\n\t\t):\r\n\t\tatom_features = layers.Input((), dtype=\"int32\", name=\"atom_features_input\")\r\n\t\tatom_features_ = layers.Embedding(num_atom, atom_dim, dtype=\"float32\", name=\"atom_features\")(atom_features)\r\n\t\tbond_features = layers.Input((bond_dim), dtype=\"float32\", name=\"bond_features\")\r\n\t\tlocal_env = layers.Input((6), dtype=\"float32\", name=\"local_env\")\r\n\t\tstate_attrs = layers.Input((), dtype=\"int32\", name=\"state_attrs_input\")   \r\n\t\tstate_attrs_ = layers.Embedding(sp_dim, state_dim, dtype=\"float32\", name=\"state_attrs\")(state_attrs)\r\n\r\n\t\tpair_indices = layers.Input((2), dtype=\"int32\", name=\"pair_indices\")\r\n\r\n\t\tatom_graph_indices = layers.Input(\r\n\t\t(), dtype=\"int32\", name=\"atom_graph_indices\"\r\n\t\t)\r\n\r\n\t\tbond_graph_indices = layers.Input(\r\n\t\t(), dtype=\"int32\", name=\"bond_graph_indices\"\r\n\t\t)\r\n\r\n\t\tpair_indices_per_graph = layers.Input((2), dtype=\"int32\", name=\"pair_indices_per_graph\")\r\n\r\n\t\tx = EdgeMessagePassing(units,\r\n\t\t\t\t\tedge_steps,\r\n\t\t\t\t\tkernel_regularizer=l2(reg0),\r\n\t\t\t\t\tsph=spherical_harmonics\r\n\t\t\t\t\t)([bond_features, local_env, pair_indices])\r\n\r\n\t\tx = PartitionPadding(batch_size)([x[1], bond_graph_indices])\r\n\t\tx = layers.BatchNormalization()(x)\r\n\t\tx = layers.GlobalAveragePooling1D()(x)\r\n\t\tx = layers.Dense(readout_units, activation=\"relu\", name='readout0')(x)\r\n\t\tx = layers.Dense(readout_units//2, activation=\"relu\", name='readout1')(x)\r\n\t\tx = layers.Dense(1, name='final')(x)\r\n\r\n\t\tmodel = Model(\r\n\t\tinputs=[atom_features, bond_features, local_env, state_attrs, pair_indices, atom_graph_indices,\r\n\t\t\t\t\tbond_graph_indices, pair_indices_per_graph],\r\n\t\toutputs=[x],\r\n\t\t)\r\n\t\treturn model\r\n\t```  \r\n\r\n\tThe Module GNN has some basic parameter necessary to be defined but not necessary to be used:  \r\n\t```python\r\n\tclass GNN:\r\n\t    def __init__(self,\r\n\t\tmodel: Model,\r\n\t\tatom_dim=16,\r\n\t\tbond_dim=32,\r\n\t\tnum_atom=118,\r\n\t\tstate_dim=16,\r\n\t\tsp_dim=230,\r\n\t\tbatch_size=16,\r\n\t\tregression=True,\r\n\t\toptimizer = 'Adam',\r\n\t\tmulticlassification=None,\r\n\t\t**kwargs,\r\n\t\t):\r\n\t\t\"\"\"\r\n\t\tpass\r\n\t\t\"\"\"  \r\n\t```  \r\n\r\n\r\n<a name=\"Crysnet-framework\"></a>\r\n## Framework  \r\nCrysNet \r\n\r\n\r\n<a name=\"Implemented-models\"></a>\r\n## Implemented-models  \r\nWe list currently supported GNN models:\r\n* **GCN** from Kipf and Welling: [Semi-Supervised Classification with Graph Convolutional Networks](https://arxiv.org/abs/1609.02907) (ICLR 2017)  \r\n* **GAT** from Veličković *et al.*: [Graph Attention Networks](https://arxiv.org/abs/1710.10903) (ICLR 2018)  \r\n* **GN** from Battaglia *et al.*: [Relational inductive biases, deep learning, and graph networks](https://arxiv.org/pdf/1806.01261v1)   \r\n* **Transformer** from Vaswani *et al.*: [Attention Is All You Need](https://arxiv.org/pdf/1706.03762) (NIPS 2017)  \r\n\r\n\r\n<a name=\"Contributors\"></a>\r\n## Contributors\r\nZongxiang Hu\r\n\r\n\r\n<a name=\"References\"></a>\r\n## References\r\n\r\n\r\n<a name=\"Contact\"></a>\r\n## Contact\r\nPlease contact me if you have any questions.  \r\nMail: huzongxiang@yahoo.com  \r\nWechat: voodoozx2015\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/huzongxiang/CrystalNetwork/tree/main/crysnet",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "materials,science,machine,learning,deep,graph,networks,neural,transformer,massagepassing,topology,tight,bingding,twisted,graphene",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crysnet",
    "package_url": "https://pypi.org/project/crysnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/crysnet/",
    "project_urls": {
      "Download": "https://github.com/huzongxiang/CrystalNetwork/tree/main/crysnet"
    },
    "release_url": "https://pypi.org/project/crysnet/0.2.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Labelled Graph Networks for machine learning of crystal.",
    "version": "0.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13884740,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fa7084d95c55e8415ac1e12ab1ff404f10185ec0cb9d9bb5529574f24d382af",
          "md5": "8d2e284afc5f6636b3f282abc4b324fb",
          "sha256": "942a750fc3af1df5b0a6ae0b7f433f0d03f50a849867cddc303c6372f3bed68b"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8d2e284afc5f6636b3f282abc4b324fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33426,
        "upload_time": "2022-01-09T09:26:41",
        "upload_time_iso_8601": "2022-01-09T09:26:41.103633Z",
        "url": "https://files.pythonhosted.org/packages/9f/a7/084d95c55e8415ac1e12ab1ff404f10185ec0cb9d9bb5529574f24d382af/crysnet-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b192df175e8d90476f9895d7329e77fc9bfae4c279743b125017cc49e68aaca7",
          "md5": "2b258cb73ebb09883d4619d4209c8fe8",
          "sha256": "8d7ac05c64e7a257a2a838b164a0cd0cdd3aae0c92e7bdde3e831cf0fbd2f267"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2b258cb73ebb09883d4619d4209c8fe8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37847,
        "upload_time": "2022-01-09T11:38:51",
        "upload_time_iso_8601": "2022-01-09T11:38:51.552501Z",
        "url": "https://files.pythonhosted.org/packages/b1/92/df175e8d90476f9895d7329e77fc9bfae4c279743b125017cc49e68aaca7/crysnet-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cbd8a27afa04e3aa02f3bf4dac170418dd82cc22fd5cd726e3036c836745a99",
          "md5": "6b93b08898fcdbeaea26c7b8f92e06db",
          "sha256": "39acb6c6445bda4cbefa5c34e4e5c48d37949efaa3119753f0454113afd96062"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6b93b08898fcdbeaea26c7b8f92e06db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37712,
        "upload_time": "2022-01-10T08:55:26",
        "upload_time_iso_8601": "2022-01-10T08:55:26.102674Z",
        "url": "https://files.pythonhosted.org/packages/9c/bd/8a27afa04e3aa02f3bf4dac170418dd82cc22fd5cd726e3036c836745a99/crysnet-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5298b7f0fba8f9850415983cc321be02004fc93922fa373477f4dd3917f95bef",
          "md5": "bb5f37db21da0780f5ec2e6f258867d2",
          "sha256": "cc8efb052c2f54ff90befff636c5965d79d68d45bf81f3a5c3b0f0fd7ede516a"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5f37db21da0780f5ec2e6f258867d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2727560,
        "upload_time": "2022-01-10T12:50:43",
        "upload_time_iso_8601": "2022-01-10T12:50:43.176669Z",
        "url": "https://files.pythonhosted.org/packages/52/98/b7f0fba8f9850415983cc321be02004fc93922fa373477f4dd3917f95bef/crysnet-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c49ed430a251bcfb86292e9abe3abf739649518b71dc2884f26d28b0223128",
          "md5": "722ea62e94e6aa1bcf6bbb293a0ff047",
          "sha256": "d0b449dce39be1967ee19a83b4f85710da7e41431e386fb88665b847c24b2d59"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "722ea62e94e6aa1bcf6bbb293a0ff047",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2727581,
        "upload_time": "2022-01-10T12:55:51",
        "upload_time_iso_8601": "2022-01-10T12:55:51.334567Z",
        "url": "https://files.pythonhosted.org/packages/79/c4/9ed430a251bcfb86292e9abe3abf739649518b71dc2884f26d28b0223128/crysnet-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2d26003d6f980fb637b766849f08dca17176606aade76da2929c708bd0a6085",
          "md5": "288ea45625643cba438403b03abfad99",
          "sha256": "c85017e29d6783b05a66b243079666c13ddccc61cb5bfb11eb8b06696e498753"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "288ea45625643cba438403b03abfad99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2728201,
        "upload_time": "2022-01-11T08:12:15",
        "upload_time_iso_8601": "2022-01-11T08:12:15.308825Z",
        "url": "https://files.pythonhosted.org/packages/d2/d2/6003d6f980fb637b766849f08dca17176606aade76da2929c708bd0a6085/crysnet-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b22d4c3f7cc337d0e3a251624bd492663e213d29c8a4040c658df16416c166c7",
          "md5": "ed27bdfed8edf593f7d41590592cf762",
          "sha256": "f01aa07bf01af925241607f3c5bbe11a4359c48a493e8930e5f9e96343740491"
        },
        "downloads": -1,
        "filename": "crysnet-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ed27bdfed8edf593f7d41590592cf762",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2728046,
        "upload_time": "2022-01-11T08:24:47",
        "upload_time_iso_8601": "2022-01-11T08:24:47.704354Z",
        "url": "https://files.pythonhosted.org/packages/b2/2d/4c3f7cc337d0e3a251624bd492663e213d29c8a4040c658df16416c166c7/crysnet-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faa922d343667a1816728ae2efd19485deecac072cdbb5ec8b40fc98d7c261de",
          "md5": "dd806ed6d18e979265ef74ef24cfb05d",
          "sha256": "e756bb031302d9f6ca31887a04e155b1d3cf032cb3b32bb9759f547f864731fc"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd806ed6d18e979265ef74ef24cfb05d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2728068,
        "upload_time": "2022-01-11T12:08:11",
        "upload_time_iso_8601": "2022-01-11T12:08:11.592776Z",
        "url": "https://files.pythonhosted.org/packages/fa/a9/22d343667a1816728ae2efd19485deecac072cdbb5ec8b40fc98d7c261de/crysnet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686064e9f46e102515c8325af6ca61bde8bcdaeaed358e2b6f365f0a45575f3a",
          "md5": "11d0f6d4aba1cee58cedbb7945db6508",
          "sha256": "5c730afea2f23a40a4e70eccd86a0ed3e75b3e5752e3a5bcb6baa85242263836"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11d0f6d4aba1cee58cedbb7945db6508",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2728536,
        "upload_time": "2022-01-12T06:10:06",
        "upload_time_iso_8601": "2022-01-12T06:10:06.476996Z",
        "url": "https://files.pythonhosted.org/packages/68/60/64e9f46e102515c8325af6ca61bde8bcdaeaed358e2b6f365f0a45575f3a/crysnet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04bfe852e2668e960ecf6c9a9f3622fff36b480f2541d74aa627b43eb4e909c0",
          "md5": "ce9bfcc777b6da13d7d988ed27907e12",
          "sha256": "a31534e7c8d7fc546e93e3dcb502472272e03ceb91d166d8216a2151a04ac4de"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ce9bfcc777b6da13d7d988ed27907e12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2730466,
        "upload_time": "2022-01-13T06:37:19",
        "upload_time_iso_8601": "2022-01-13T06:37:19.417722Z",
        "url": "https://files.pythonhosted.org/packages/04/bf/e852e2668e960ecf6c9a9f3622fff36b480f2541d74aa627b43eb4e909c0/crysnet-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8938f6a1bbbcc1ff53a6b58370e052548d6a94be4a0ff2cc4fec738f159dae2",
          "md5": "778b8b9b20caf1e8a6862af9629c5401",
          "sha256": "25c4664da5809369c0d5bd1b196af2d17a3323edee0f36ab139dd69154d43e54"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "778b8b9b20caf1e8a6862af9629c5401",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732282,
        "upload_time": "2022-01-13T13:04:22",
        "upload_time_iso_8601": "2022-01-13T13:04:22.411618Z",
        "url": "https://files.pythonhosted.org/packages/f8/93/8f6a1bbbcc1ff53a6b58370e052548d6a94be4a0ff2cc4fec738f159dae2/crysnet-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61492bc199d1c137f22e905bec79a5b9f8ea07a87aee24fd45b14e98a6dd87b2",
          "md5": "a28b9e911483e874d0e462c1ab54287e",
          "sha256": "591f0d3d8b0bcd60d6f5d1608ad3b1b7ed57cfbc7d88e2eed25eb6aafcc6e1f3"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a28b9e911483e874d0e462c1ab54287e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2730788,
        "upload_time": "2022-01-14T09:21:44",
        "upload_time_iso_8601": "2022-01-14T09:21:44.111749Z",
        "url": "https://files.pythonhosted.org/packages/61/49/2bc199d1c137f22e905bec79a5b9f8ea07a87aee24fd45b14e98a6dd87b2/crysnet-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f05ba04cbced8dd9ff83025ae332d87efef862a917959c82e924dcd27ad1a56",
          "md5": "64516b16b4bc6115093ad30d6df82e2b",
          "sha256": "16f91a46401bc19baa0cdd6b655bdc0c3a40b95bdc37f81f45dd3c5315f3fef2"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "64516b16b4bc6115093ad30d6df82e2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732188,
        "upload_time": "2022-01-19T10:41:53",
        "upload_time_iso_8601": "2022-01-19T10:41:53.187731Z",
        "url": "https://files.pythonhosted.org/packages/0f/05/ba04cbced8dd9ff83025ae332d87efef862a917959c82e924dcd27ad1a56/crysnet-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6365191fc1a5c409fb2063dbc587f5d37fa38709c172c3d994f0e76417ec412",
          "md5": "3a27ca1cc540f1bc400672ea81a9f555",
          "sha256": "7971096e9520966ca6b6a85bf7b66f2e30e2bbb3d2407d8e006f2a771afeb533"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3a27ca1cc540f1bc400672ea81a9f555",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732332,
        "upload_time": "2022-01-27T06:16:22",
        "upload_time_iso_8601": "2022-01-27T06:16:22.091225Z",
        "url": "https://files.pythonhosted.org/packages/b6/36/5191fc1a5c409fb2063dbc587f5d37fa38709c172c3d994f0e76417ec412/crysnet-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee7cc3edaf07dedd6f546149bc28d4a5d53c2c90553e923bc7277abc0358245",
          "md5": "351a616ce0be897948bc68d56bc6ebbd",
          "sha256": "38759aeffdabe1676948ac5e3786b432b9dc8807374de193e6dfe038eaabe70a"
        },
        "downloads": -1,
        "filename": "crysnet-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "351a616ce0be897948bc68d56bc6ebbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732465,
        "upload_time": "2022-02-02T07:06:08",
        "upload_time_iso_8601": "2022-02-02T07:06:08.042797Z",
        "url": "https://files.pythonhosted.org/packages/6e/e7/cc3edaf07dedd6f546149bc28d4a5d53c2c90553e923bc7277abc0358245/crysnet-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "facd3ca6c3e66b7d71d422d6cd303a494fcf07d162ab5331948bec5bd737e26e",
          "md5": "47571ee512c1f84c444398fcd4abe2f1",
          "sha256": "30fe022427a98fa57b232f727f8ec44270015f6f9ea3adf5ed81efec5620a1af"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47571ee512c1f84c444398fcd4abe2f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732475,
        "upload_time": "2022-02-10T07:38:09",
        "upload_time_iso_8601": "2022-02-10T07:38:09.824048Z",
        "url": "https://files.pythonhosted.org/packages/fa/cd/3ca6c3e66b7d71d422d6cd303a494fcf07d162ab5331948bec5bd737e26e/crysnet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b03d9913938d0fbcb0242fbc15570ca8ecad13baf962b4e233f7932f63990572",
          "md5": "74ce6ff3efcaab97279666eb6e2f9f97",
          "sha256": "1cc787d0fbf6db0d7c4082b03dec24bf804a611207a4fecfbdbb95a95c2f5b2d"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74ce6ff3efcaab97279666eb6e2f9f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732479,
        "upload_time": "2022-02-10T08:51:44",
        "upload_time_iso_8601": "2022-02-10T08:51:44.338076Z",
        "url": "https://files.pythonhosted.org/packages/b0/3d/9913938d0fbcb0242fbc15570ca8ecad13baf962b4e233f7932f63990572/crysnet-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c3cb2871e64ac12f6212d3adde16ad547b0f57c7c2a6f6f5af190846ee831a6",
          "md5": "1cdb4c8c91a36981638b6f22f3415571",
          "sha256": "9e4d9856c829826f536567cf34db1d085325e5dd60435e187c6e3841c9ca9e81"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1cdb4c8c91a36981638b6f22f3415571",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732476,
        "upload_time": "2022-02-10T09:02:43",
        "upload_time_iso_8601": "2022-02-10T09:02:43.999088Z",
        "url": "https://files.pythonhosted.org/packages/7c/3c/b2871e64ac12f6212d3adde16ad547b0f57c7c2a6f6f5af190846ee831a6/crysnet-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2270687e8332779e830d43d2b1a8be22a452134f2b854f02f7a0c40ca8e9ec40",
          "md5": "deded219acd60086ca39681535aece95",
          "sha256": "11deba8c2e6883e38752ec55d1a261e02525e5c361f2e9081ba5b9e06b1f303b"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "deded219acd60086ca39681535aece95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732799,
        "upload_time": "2022-04-07T14:44:56",
        "upload_time_iso_8601": "2022-04-07T14:44:56.189878Z",
        "url": "https://files.pythonhosted.org/packages/22/70/687e8332779e830d43d2b1a8be22a452134f2b854f02f7a0c40ca8e9ec40/crysnet-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b04a0181cf23730c4835963292b812c44b2bc672684cbf59fc509855ac8732f",
          "md5": "4d5a8b233ee8fb9a0e3d288cc8275526",
          "sha256": "62704c99305f516a3a108c9bdc6b98b3a408dcfca8612731541eff68ff0d66aa"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4d5a8b233ee8fb9a0e3d288cc8275526",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2732915,
        "upload_time": "2022-04-08T02:01:18",
        "upload_time_iso_8601": "2022-04-08T02:01:18.776736Z",
        "url": "https://files.pythonhosted.org/packages/3b/04/a0181cf23730c4835963292b812c44b2bc672684cbf59fc509855ac8732f/crysnet-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2c92e1e7f729c5860628e36f90ee226fcc5b72223d3c1c85ec59e5b944b6116",
          "md5": "54a5012d622e5b4068089bb5929e5086",
          "sha256": "d5e9d6d46e992bfffd10acdd04dc0a1bafaac2aa3aac28d24faec8ded26639f5"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "54a5012d622e5b4068089bb5929e5086",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2733600,
        "upload_time": "2022-04-08T05:33:14",
        "upload_time_iso_8601": "2022-04-08T05:33:14.931190Z",
        "url": "https://files.pythonhosted.org/packages/f2/c9/2e1e7f729c5860628e36f90ee226fcc5b72223d3c1c85ec59e5b944b6116/crysnet-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd5e2921891224866dbc009883c3f5bb1ff4d441dce4ec56fab7e40df0d04f7",
          "md5": "531660b3713491aaa625ad9373787476",
          "sha256": "ece2d3a4ded7f0f62245738ac4e8875f1fa1fdc0797690798736d638cbe31059"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.8-py3.9.egg",
        "has_sig": false,
        "md5_digest": "531660b3713491aaa625ad9373787476",
        "packagetype": "bdist_egg",
        "python_version": "0.2.8",
        "requires_python": null,
        "size": 2817070,
        "upload_time": "2022-05-21T04:39:25",
        "upload_time_iso_8601": "2022-05-21T04:39:25.606781Z",
        "url": "https://files.pythonhosted.org/packages/7f/d5/e2921891224866dbc009883c3f5bb1ff4d441dce4ec56fab7e40df0d04f7/crysnet-0.2.8-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a345f598fefff17160d8ea339627c085b0bf550633b232d2af94d52807b2ff3a",
          "md5": "4d038081d6edc7216d6a8c36d70d3b35",
          "sha256": "b8f33ed1eaf29935d20b2d6a4a135ae2484594b0402f681f2d902cafccd5ecee"
        },
        "downloads": -1,
        "filename": "crysnet-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4d038081d6edc7216d6a8c36d70d3b35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2734055,
        "upload_time": "2022-05-21T04:39:28",
        "upload_time_iso_8601": "2022-05-21T04:39:28.424529Z",
        "url": "https://files.pythonhosted.org/packages/a3/45/f598fefff17160d8ea339627c085b0bf550633b232d2af94d52807b2ff3a/crysnet-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fd5e2921891224866dbc009883c3f5bb1ff4d441dce4ec56fab7e40df0d04f7",
        "md5": "531660b3713491aaa625ad9373787476",
        "sha256": "ece2d3a4ded7f0f62245738ac4e8875f1fa1fdc0797690798736d638cbe31059"
      },
      "downloads": -1,
      "filename": "crysnet-0.2.8-py3.9.egg",
      "has_sig": false,
      "md5_digest": "531660b3713491aaa625ad9373787476",
      "packagetype": "bdist_egg",
      "python_version": "0.2.8",
      "requires_python": null,
      "size": 2817070,
      "upload_time": "2022-05-21T04:39:25",
      "upload_time_iso_8601": "2022-05-21T04:39:25.606781Z",
      "url": "https://files.pythonhosted.org/packages/7f/d5/e2921891224866dbc009883c3f5bb1ff4d441dce4ec56fab7e40df0d04f7/crysnet-0.2.8-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a345f598fefff17160d8ea339627c085b0bf550633b232d2af94d52807b2ff3a",
        "md5": "4d038081d6edc7216d6a8c36d70d3b35",
        "sha256": "b8f33ed1eaf29935d20b2d6a4a135ae2484594b0402f681f2d902cafccd5ecee"
      },
      "downloads": -1,
      "filename": "crysnet-0.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "4d038081d6edc7216d6a8c36d70d3b35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2734055,
      "upload_time": "2022-05-21T04:39:28",
      "upload_time_iso_8601": "2022-05-21T04:39:28.424529Z",
      "url": "https://files.pythonhosted.org/packages/a3/45/f598fefff17160d8ea339627c085b0bf550633b232d2af94d52807b2ff3a/crysnet-0.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}