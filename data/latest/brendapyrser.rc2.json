{
  "info": {
    "author": "Semidán Robaina Estévez",
    "author_email": "srobaina@ull.edu.es",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# A python parser for the BRENDA database\n\nThis project provides python classes and functions to parse the text file containing the entire BRENDA enzyme database (https://www.brenda-enzymes.org)\n\nDue to BRENDA's license, BRENDA's database cannot be downloaded directly by the parser, instead, the user is asked to download the database as a text file after accepting usage conditions [here](https://www.brenda-enzymes.org/download_brenda_without_registration.php).\n\nThis is an ongoing project!\n\n## Installation\n1. ```pip install brendapyrser```\n\nor\n\n2. Git clone project to local directory.\n\n   In terminal navigate to directory and enter: ```python setup.py install```\n\n\n```python\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom brendapyrser import BRENDA\n\ndataFile = 'data/brenda_download.txt'\n```\n\n## 1. Parsing BRENDA\n\n\n```python\n# Let's load the database\nbrenda = BRENDA(dataFile)\nbrenda\n```\n\n\n\n\n\n<table>\n    <tr>\n        <td><strong>Number of Enzymes</strong></td><td>7609</td>\n    </tr><tr>\n        <td><strong>BRENDA copyright</strong></td><td>Copyrighted by Dietmar Schomburg, Techn. University\nBraunschweig, GERMANY. Distributed under the License as stated\nat http:/www.brenda-enzymes.org</td>\n    </tr><tr>\n        <td><strong>Parser version</strong></td><td>0.0.1</td>\n    </tr><tr>\n        <td><strong>Author</strong></td><td>Semidán Robaina Estévez, 2020</td>\n    </tr>\n</table>\n\n\n\n\n\n```python\n# Plot all Km values in the database\nBRENDA_KMs = np.array([v for r in brenda.reactions \n                       for v in r.KMvalues.get_values()])\nvalues = BRENDA_KMs[(BRENDA_KMs < 1000) & (BRENDA_KMs >= 0)]\nplt.hist(values)\nplt.title(f'Median KM value: {np.median(values)}')\nplt.xlabel('KM (mM)')\nplt.show()\nprint(f'Minimum and maximum values in database: {values.min()} mM, {values.max()} mM')\n```\n\n\n    \n![png](README_files/output_5_0.png)\n    \n\n\n    Minimum and maximum values in database: 0.0 mM, 997.0 mM\n\n\n\n```python\n# Plot all Km values in the database\nBRENDA_Kcats = np.array([v for r in brenda.reactions \n                       for v in r.Kcatvalues.get_values()])\nvalues = BRENDA_Kcats[(BRENDA_Kcats < 1000) & (BRENDA_Kcats >= 0)]\nplt.hist(values)\nplt.title(f'Median Kcat value: {np.median(values)}')\nplt.xlabel('Kcat (1/s)')\nplt.show()\nprint(f'Minimum and maximum values in database: {values.min()} 1/s, {values.max()} 1/s')\n```\n\n\n    \n![png](README_files/output_6_0.png)\n    \n\n\n    Minimum and maximum values in database: 5.83e-10 1/s, 997.0 1/s\n\n\n\n```python\n# Plot all enzyme optimal temperature values in the database\nBRENDA_TO = np.array([v for r in brenda.reactions \n                       for v in r.temperature.filter_by_condition(\n                           'optimum').get_values()])\nvalues = BRENDA_TO[(BRENDA_TO >= 0)]\nplt.hist(values)\nplt.title(f'Median Optimum Temperature: {np.median(values)}')\nplt.xlabel('TO (${}^oC$)')\nplt.show()\nprint(f'Minimum and maximum values in database: {values.min()} °C, {values.max()} °C')\n```\n\n\n    \n![png](README_files/output_7_0.png)\n    \n\n\n    Minimum and maximum values in database: 0.0 °C, 125.0 °C\n\n\nWe see that the median optimal temperature for all enzymes in the BRENDA database is 37 °C! That's interesting... perhaps all organisms have agreed to prefer that temperature over other ones... or, more likely, it could be that BRENDA database is biased towards mammals and microorganisms that live within mammals... such as human pathogens.\n\nLet's filter results for a particular species, let's try with a hyperthermophylic baterial genus, _Thermotoga_\n\n\n```python\n# Plot all enzyme optimal temperature values in the database\nspecies = 'Thermotoga'\nBRENDA_TO = np.array([v for r in brenda.reactions.filter_by_organism(species)\n                       for v in r.temperature.filter_by_condition('optimum').filter_by_organism(species).get_values()])\nvalues = BRENDA_TO[(BRENDA_TO >= 0)]\nplt.hist(values)\nplt.title(f'Median Optimum Temperature: {np.median(values)}')\nplt.xlabel('TO (${}^oC$)')\nplt.show()\nprint(f'Minimum and maximum values in database: {values.min()} °C, {values.max()} °C')\n```\n\n\n    \n![png](README_files/output_9_0.png)\n    \n\n\n    Minimum and maximum values in database: 20.0 °C, 105.0 °C\n\n\nWe can see that the median optimal temperature among all enzymes in the genus, 80°C, is much higher than in the case of the entire database. That's consistent with the fact that _Thermotoga_ are hyperthermophylic... alright!\n\n## 2. Extracting data for _Pyruvate kinase_\n\n\n```python\n# We can retrieve an enzyme entry by its EC number like this\nr = brenda.reactions.get_by_id('2.7.1.40')\nr\n```\n\n\n\n\n\n<table>\n    <tr>\n        <td><strong>Enzyme identifier</strong></td><td>2.7.1.40</td>\n    </tr><tr>\n        <td><strong>Name</strong></td><td>Pyruvate kinase</td>\n    </tr><tr>\n        <td><strong>Systematic name</strong></td><td>ATP:pyruvate 2-O-phosphotransferase</td>\n    </tr><tr>\n        <td><strong>Reaction type</strong></td><td>Phospho group transfer</td>\n    </tr><tr>\n        <td><strong>Reaction</strong></td><td>ATP + pyruvate <=> ADP + phosphoenolpyruvate</td>\n    </tr>\n</table>\n\n\n\n\n\n```python\n# Here are all the KM values for phosphoenolpyruvate associated with this enzyme class\ncompound = 'phosphoenolpyruvate'\nkms = r.KMvalues.filter_by_compound(compound).get_values()\nplt.hist(kms)\nplt.xlabel('KM (mM)')\nplt.title(f'{r.name} ({compound})')\nplt.show()\n```\n\n\n    \n![png](README_files/output_13_0.png)\n    \n\n\n\n```python\n# Here are all the KM values for phosphoenolpyruvate associated with this enzyme class\ncompound = 'phosphoenolpyruvate'\nKMs = r.KMvalues.filter_by_compound(compound).get_values()\nplt.hist(KMs)\nplt.xlabel('KM (mM)')\nplt.title(f'{r.name} ({compound})')\nplt.show()\n```\n\n\n    \n![png](README_files/output_14_0.png)\n    \n\n\n\n```python\n# And further filtered by organism\nr.KMvalues.filter_by_organism('Bos taurus').filter_by_compound('phosphoenolpyruvate').get_values()\n```\n\n\n\n\n    [0.051500000000000004, 0.18]\n\n\n\n\n```python\n# Here are all the Kcat values for phosphoenolpyruvate associated with this enzyme class\ncompound = 'phosphoenolpyruvate'\nkcats = r.Kcatvalues.filter_by_compound(compound).get_values()\nplt.hist(kcats)\nplt.xlabel('Kcat ($s^{-1}$)')\nplt.title(f'{r.name} ({compound})')\nplt.show()\n```\n\n\n    \n![png](README_files/output_16_0.png)\n    \n\n\n## 3 Finding all KM values for a given substrate and organism\nNext, we will retrieve KM values associated to a particular substrate for all enzymes in a given species. Will t he KM values distribute around a narrow or wider concentration range? Since substrate concentration in cytoplasma is the same for all enzymes it makes sense that all cytoplasmi enzymes utilizing that substrate have similar KM values. Let's test this idea with _Escherichia coli_ and some common substrates participating in the central carbon metabolism.\n\n\n```python\nspecies, compound = 'Escherichia coli', 'NADH'\nKMs = np.array([v for r in brenda.reactions.filter_by_organism(species)\n                for v in r.KMvalues.filter_by_compound(compound).filter_by_organism(species).get_values()])\n\nif len(KMs) > 0:\n    plt.hist(KMs)\n    plt.xlabel('KM (mM)')\n    plt.title(f'{species} KMs ({compound}), median = {np.median((KMs))}')\n    plt.show()\nelse:\n    print('No KM values for compound')\n```\n\n\n    \n![png](README_files/output_18_0.png)\n    \n\n\nThat's interesting! typical NADH concentrations are low in _Escherichia coli_, e.g., from [BioNumbers](http://book.bionumbers.org/what-are-the-concentrations-of-free-metabolites-in-cells/) we get a value of 0.083 mM. The median KM value for NADH among all enzymes binding it is lower as we see in the plot above! Hence, it looks like most enzymes are (nearly) saturated for NADH and thus fluxes are sort of independent of NADH concentration.\n\n# 4 Filtering reactions by specific compound\n\nWe can also filter reactions in BRENDA by a specific compound: substrate, product or either of the two. Let's filter reactions containg _geraniol_ as a substrate, product or both to exemplify this feature\n\n\n```python\nsubstrate_rxns = brenda.reactions.filter_by_substrate(\"phosphoenolpyruvate\")\nsubstrate_rxns[2]\n```\n\n\n\n\n\n<table>\n    <tr>\n        <td><strong>Enzyme identifier</strong></td><td>2.5.1.19</td>\n    </tr><tr>\n        <td><strong>Name</strong></td><td>3-phosphoshikimate 1-carboxyvinyltransferase</td>\n    </tr><tr>\n        <td><strong>Systematic name</strong></td><td>phosphoenolpyruvate:3-phosphoshikimate 5-O-(1-carboxyvinyl)-transferase</td>\n    </tr><tr>\n        <td><strong>Reaction type</strong></td><td>Enolpyruvate group transfer (#3,52,55# induced-fit mechanism, formation</td>\n    </tr><tr>\n        <td><strong>Reaction</strong></td><td>phosphoenolpyruvate + 3-phosphoshikimate <=> phosphate +5-O-</td>\n    </tr>\n</table>\n\n\n\n\n\n```python\ncompound_rxns = brenda.reactions.filter_by_compound(\"phosphoenolpyruvate\")\ncompound_rxns[7]\n```\n\n\n\n\n\n<table>\n    <tr>\n        <td><strong>Enzyme identifier</strong></td><td>2.5.1.7</td>\n    </tr><tr>\n        <td><strong>Name</strong></td><td>Udp-n-acetylglucosamine 1-carboxyvinyltransferase</td>\n    </tr><tr>\n        <td><strong>Systematic name</strong></td><td>phosphoenolpyruvate:UDP-N-acetyl-D-glucosamine</td>\n    </tr><tr>\n        <td><strong>Reaction type</strong></td><td>Carboxyvinyl group transfer</td>\n    </tr><tr>\n        <td><strong>Reaction</strong></td><td>phosphoenolpyruvate + UDP-N-acetyl-alpha-D-glucosamine <=> phosphate +UDP-N-acetyl-3-O-</td>\n    </tr>\n</table>\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robaina/BRENDA_database",
    "keywords": "",
    "license": "Creative Commons Attribution 4.0 International",
    "maintainer": "Semidán Robaina Estévez",
    "maintainer_email": "srobaina@ull.edu.es",
    "name": "brendapyrser",
    "package_url": "https://pypi.org/project/brendapyrser/",
    "platform": null,
    "project_url": "https://pypi.org/project/brendapyrser/",
    "project_urls": {
      "Homepage": "https://github.com/robaina/BRENDA_database"
    },
    "release_url": "https://pypi.org/project/brendapyrser/0.0.2/",
    "requires_dist": [
      "numpy",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Tools to parse the BRENDA database",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14792998,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e42ad7c5b4efe3dc4caf4ab54c2f8a30c3e39ffb228eafe0c9dde059e478bdaf",
          "md5": "49205040b7fb3c749ed431bfeeae50f0",
          "sha256": "130f239f6de436d96fe0a8edfd53b7f28dfc5d4c6ca1180f2884b445abb09910"
        },
        "downloads": -1,
        "filename": "brendapyrser-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49205040b7fb3c749ed431bfeeae50f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14953,
        "upload_time": "2021-08-14T19:27:49",
        "upload_time_iso_8601": "2021-08-14T19:27:49.048886Z",
        "url": "https://files.pythonhosted.org/packages/e4/2a/d7c5b4efe3dc4caf4ab54c2f8a30c3e39ffb228eafe0c9dde059e478bdaf/brendapyrser-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48274d8add4d2c5056842f62cc070046ba29524c766529b68d1bf436ad2eff7f",
          "md5": "50e0308d4ee9ab1c2a23a20e69c97435",
          "sha256": "6fbb7adbc5043bfc2d0e50db5435c5aabf9b5d432b3691e4e097061c9d7471df"
        },
        "downloads": -1,
        "filename": "brendapyrser-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50e0308d4ee9ab1c2a23a20e69c97435",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16441,
        "upload_time": "2021-08-14T19:27:50",
        "upload_time_iso_8601": "2021-08-14T19:27:50.853162Z",
        "url": "https://files.pythonhosted.org/packages/48/27/4d8add4d2c5056842f62cc070046ba29524c766529b68d1bf436ad2eff7f/brendapyrser-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41709fcc9043f2d61c710c317d62a77bc53dc70faedfbf39e0a7fa6040fcf3b6",
          "md5": "e032ae18a5d64da312034166649b126b",
          "sha256": "924234335bcf90001ec8728d72ab8b648498dbacd0a1b307b7b45728cd2075e4"
        },
        "downloads": -1,
        "filename": "brendapyrser-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e032ae18a5d64da312034166649b126b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15246,
        "upload_time": "2022-08-17T20:54:46",
        "upload_time_iso_8601": "2022-08-17T20:54:46.830243Z",
        "url": "https://files.pythonhosted.org/packages/41/70/9fcc9043f2d61c710c317d62a77bc53dc70faedfbf39e0a7fa6040fcf3b6/brendapyrser-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ded25d9b354174291425e324d31fd7cc9444d4b532e49d7a187bda344ed66e5",
          "md5": "8378d93efced9926f5e94be0b909b596",
          "sha256": "8e95ed0d8b2940a752e1f7caca1f9ce6f56c24e37fb912d5c6c90ebf97b3c508"
        },
        "downloads": -1,
        "filename": "brendapyrser-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8378d93efced9926f5e94be0b909b596",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17082,
        "upload_time": "2022-08-17T20:54:48",
        "upload_time_iso_8601": "2022-08-17T20:54:48.574207Z",
        "url": "https://files.pythonhosted.org/packages/8d/ed/25d9b354174291425e324d31fd7cc9444d4b532e49d7a187bda344ed66e5/brendapyrser-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41709fcc9043f2d61c710c317d62a77bc53dc70faedfbf39e0a7fa6040fcf3b6",
        "md5": "e032ae18a5d64da312034166649b126b",
        "sha256": "924234335bcf90001ec8728d72ab8b648498dbacd0a1b307b7b45728cd2075e4"
      },
      "downloads": -1,
      "filename": "brendapyrser-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e032ae18a5d64da312034166649b126b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15246,
      "upload_time": "2022-08-17T20:54:46",
      "upload_time_iso_8601": "2022-08-17T20:54:46.830243Z",
      "url": "https://files.pythonhosted.org/packages/41/70/9fcc9043f2d61c710c317d62a77bc53dc70faedfbf39e0a7fa6040fcf3b6/brendapyrser-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ded25d9b354174291425e324d31fd7cc9444d4b532e49d7a187bda344ed66e5",
        "md5": "8378d93efced9926f5e94be0b909b596",
        "sha256": "8e95ed0d8b2940a752e1f7caca1f9ce6f56c24e37fb912d5c6c90ebf97b3c508"
      },
      "downloads": -1,
      "filename": "brendapyrser-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8378d93efced9926f5e94be0b909b596",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17082,
      "upload_time": "2022-08-17T20:54:48",
      "upload_time_iso_8601": "2022-08-17T20:54:48.574207Z",
      "url": "https://files.pythonhosted.org/packages/8d/ed/25d9b354174291425e324d31fd7cc9444d4b532e49d7a187bda344ed66e5/brendapyrser-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}