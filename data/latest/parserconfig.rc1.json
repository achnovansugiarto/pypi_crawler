{
  "info": {
    "author": "Steven Cassamajor",
    "author_email": "contributor@networkaxis.org",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# ParserConfig\n\nParserConfig initializes ConfigParser in fewer lines of code.\n\n## Installation\nRequires Python 3.7+:\n```shell\npython -m pip install parserconfig\n```\n\n## Usage\nTo follow along, create a `settings.ini` file in your home directory with the following content:\n```ini\n[tutorial]\nusername = my_username\npassword = my_password\nbearer_token = my_bearer_token\n```\n\nThe configuration file can be read using the following code:\n```python\nfrom pathlib import Path\nfrom parserconfig import ParserConfig\n\nconfiguration_file = Path.home().joinpath('settings.ini')\nsettings = ParserConfig(configuration_file=configuration_file)\n```\n\nThe `credentials` helper method returns a dictionary containing key/value pairs. This can be leveraged in several ways:\n```python\ncredentials = settings.credentials('username', 'password', section='tutorial')\nprint(f'{credentials = }. Kwargs unpacking is supported via **credentials')\n\nusername, password = credentials.values()\nprint(f'{username = }, {password = }')\n```\n\nThe pattern for querying a single value varies slightly: \n```python\nbearer_token = settings.credentials('bearer_token', section='tutorial')\nprint(f'{bearer_token = }. Single value also supports kwargs unpacking via **bearer_token')\n\nbearer = bearer_token.get('bearer_token')\nprint(f'{bearer = }')\n\ntoken, *_ = bearer_token.values()\nprint(f'{token = }')\n```\n\nAccess to [ConfigParser](https://docs.python.org/3/library/configparser.html) is provided via `configuration_file_parser`, and can be used to enable ExtendedInterpolation:\n```python\nfrom configparser import ConfigParser, ExtendedInterpolation\n\nsettings.configuration_file_parser = ConfigParser(interpolation=ExtendedInterpolation())\nsettings.load_configuration_file()\n```\n\n### Advanced Usage\n- [management_api_tools](https://github.com/Fauxsys/management_api_tools.git) uses parserconfig to insert data into pytest during test execution.\n- [offprem](https://github.com/Fauxsys/offprem.git) creates subclasses of parserconfig.\n\n## Local Development and Testing\n### Development\nDevelopment and testing should be done in a virtual environment.\n```shell\n$ git clone https://github.com/Fauxsys/parserconfig.git\n$ cd parserconfig\n$ python -m venv venv --prompt parserconfig\n$ source venv/bin/activate\n(parserconfig) $ python -m pip install -U pip\n```\nInstall parserconfig locally.\n```shell\n(parserconfig) $ python -m pip install -e \".[test]\"\n```\n\n### Testing\nYou can test any changes locally with pytest.\n```shell\n(parserconfig) $ python -m pytest --cov=parserconfig \n```\n\nYou can also test parserconfig as an installed package.\n```shell\n(parserconfig) $ python -m tox\n```\n\n### Building a wheel\n```shell\n(parserconfig) $ python -m pip install build\n(parserconfig) $ python -m build --wheel\n```\n\nThere should now be a wheel in the `dist` directory.\n```shell\n(parserconfig) $ ls -1 dist\nparserconfig-1.0.0-py3-none-any.whl\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fauxsys/parserconfig.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parserconfig",
    "package_url": "https://pypi.org/project/parserconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/parserconfig/",
    "project_urls": {
      "Homepage": "https://github.com/Fauxsys/parserconfig.git"
    },
    "release_url": "https://pypi.org/project/parserconfig/1.0.0/",
    "requires_dist": [
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "tox ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Plug-n-Play ConfigParser for extensible use cases.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11327147,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "373ed9d1bb3330802590c6a7a66e63d49eabffa79136d8ba5af2d16c3ece2ffe",
          "md5": "969a591280c6ca4338f817b6e24cc024",
          "sha256": "9c69df7d809bf3ad0246914c0b7f5ad0451b24a482c3145dbf8f012941ca67a7"
        },
        "downloads": -1,
        "filename": "parserconfig-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "969a591280c6ca4338f817b6e24cc024",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15912,
        "upload_time": "2021-08-31T17:44:51",
        "upload_time_iso_8601": "2021-08-31T17:44:51.877173Z",
        "url": "https://files.pythonhosted.org/packages/37/3e/d9d1bb3330802590c6a7a66e63d49eabffa79136d8ba5af2d16c3ece2ffe/parserconfig-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "373ed9d1bb3330802590c6a7a66e63d49eabffa79136d8ba5af2d16c3ece2ffe",
        "md5": "969a591280c6ca4338f817b6e24cc024",
        "sha256": "9c69df7d809bf3ad0246914c0b7f5ad0451b24a482c3145dbf8f012941ca67a7"
      },
      "downloads": -1,
      "filename": "parserconfig-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "969a591280c6ca4338f817b6e24cc024",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15912,
      "upload_time": "2021-08-31T17:44:51",
      "upload_time_iso_8601": "2021-08-31T17:44:51.877173Z",
      "url": "https://files.pythonhosted.org/packages/37/3e/d9d1bb3330802590c6a7a66e63d49eabffa79136d8ba5af2d16c3ece2ffe/parserconfig-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}