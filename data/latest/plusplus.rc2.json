{
  "info": {
    "author": "Alexander Borzunov",
    "author_email": "borzunov.alexander@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "plusplus\n========\n\n[![PyPI version](https://img.shields.io/pypi/v/plusplus.svg?color=blue)](https://pypi.org/project/hivemind/)\n[![CI status](https://img.shields.io/github/workflow/status/borzunov/plusplus/Tests)](https://github.com/borzunov/plusplus/actions)\n![Codecov](https://img.shields.io/codecov/c/github/borzunov/plusplus?token=SCAU424JFE)\n\nEnable the `++x` and `--x` expressions in Python\n\nWhat's this?\n------------\n\nBy default, Python does not support neither pre-increments (like `++x`) nor post-increments (like `x++`).\nHowever, the first ones are _syntactically correct_ since Python parses them as two subsequent `+x` operations,\nwhere `+` is the [unary plus operator](https://docs.python.org/3/reference/datamodel.html#object.__pos__)\n(same with `--x` and the [unary minus](https://docs.python.org/3/reference/datamodel.html#object.__neg__)).\nThey both have no effect, since in practice `-(-x) == +(+x) == x`.\n\nThis module turns the `++x`-like expressions into `x += 1` at the bytecode level.\nIncrements and decrements of collection items and object attributes are supported as well, for example:\n\n```python\ndictionary = {'key': 42}\n++dictionary['key']\nassert dictionary['key'] == 43\n```\n\nUnlike `x += 1`, `++x` is still an expression, so the increments work fine inside other expressions,\n`if`/`while` conditions, lambda functions, and list/dict comprehensions:\n\n```python\narray[++index] = new_value\n\nif --connection.num_users == 0:\n    connection.close()\n\nbutton.add_click_callback(lambda: ++counter)\n\nindex = 0\nindexed_cells = {++index: cell for row in table for cell in row}\n```\n\nSee [tests](tests/test_plusplus.py) for more sophisticated examples.\n\n[[How it works](#how-it-works)] [[Installation](#how-to-use-it)]\n\nWhy?\n----\n\nThis module is made for fun, as a demonstration of Python flexibility and bytecode manipulation techniques.\nNote that enabling increments in real projects may be risky: such code may confuse new developers and\nbehave differently if copied to environments without the `plusplus` module. Also, this feature gives more opportunities\nto write unreadable code in general.\n\nNevertheless, there are situations where increments (if used with care) may allow to avoid repetitions or\nmake code more readable. Some of them are listed [here](docs/stdlib_examples.md) with the examples from\nthe source code of the Python standard library.\n\nAlso, having the increment expressions seems consistent with\n[PEP 572 \"Assignment Expressions\"](https://www.python.org/dev/peps/pep-0572/)\nthat introduced the `x := value` expressions in Python 3.8+.\nThey can be used inside `if`/`while` conditions and lambda functions as well.\n\nHow it works?\n-------------\n\n### Patching bytecode\n\nPython compiles all source code to a low-level [bytecode](https://docs.python.org/3.7/library/dis.html)\nexecuted on the Python's stack-based virtual machine. Each bytecode instruction consumes a few items from the stack,\ndoes something with them, and pushes the results back to the stack.\n\nThe `++x` expressions are compiled into two consecutive\n[`UNARY_POSITIVE`](https://docs.python.org/3.7/library/dis.html#opcode-UNARY_POSITIVE) instructions\nthat do not save the intermediate result in between (same with `--x` and two\n[`UNARY_NEGATIVE`](https://docs.python.org/3.7/library/dis.html#opcode-UNARY_NEGATIVE) instructions).\nNo other expressions produce a similar bytecode pattern.\n\n`plusplus` replaces these patterns with the bytecode for `x += 1`, then adds the bytecode for storing\nthe resulting value to the place where the initial value was taken.\n\nThis is what happens for the `y = ++x` line:\n\n![](docs/images/plusplus_bytecode_load_fast.svg)\n\nA similar but more complex transformation happens for the code with subscription expressions\nlike `value = ++dictionary['key']`. We need the instructions from the yellow boxes to save the initial location and\nrecall it when the increment is done (see the explanation below):\n\n![](docs/images/plusplus_bytecode_binary_subscr.svg)\n\nThis bytecode is similar to what the string `dictionary['key'] += 1` compiles to. The only difference is that it\nkeeps an extra copy of the incremented value,\nso we can return it from the expression and assign it to the `value` variable.\n\nArguably, the least clear part here is the second yellow box. Actually, it is only needed to reorder\nthe top 4 items of the stack. If we need to reorder the top 2 or 3 items of the stack, we can just use\nthe [`ROT_TWO`](https://docs.python.org/3.7/library/dis.html#opcode-ROT_TWO) and\n[`ROT_THREE`](https://docs.python.org/3.7/library/dis.html#opcode-ROT_THREE) instructions (they do a circular shift\nof the specified number of items of the stack). If we had a `ROT_FOUR` instruction, we would be able to just\nreplace the second yellow box with two `ROT_FOUR`s to achieve the desired order.\n\nHowever, `ROT_FOUR` was removed in Python 3.2\n(since it was [rarely used](https://bugs.python.org/issue929502) by the compiler) and\nrecovered back only in Python 3.8. If we want to support Python 3.3 - 3.7, we need to use a workaround,\ne.g. the [`BUILD_TUPLE`](https://docs.python.org/3.7/library/dis.html#opcode-BUILD_TUPLE) and\n[`UNPACK_SEQUENCE`](https://docs.python.org/3.7/library/dis.html#opcode-UNPACK_SEQUENCE) instructions.\nThe first one replaces the top N items of the stack with a tuple made of these N items. The second unpacks the tuple\nputting the values on the stack right-to-left, i.e. _in reverse order_. We use them to reverse the top 4 items,\nthen swap the top two to achieve the desired order.\n\n[[Source code](src/plusplus/patching.py)]\n\n### The @enable_increments decorator\n\nThe first way to enable the increments is to use a decorator that would patch the bytecode of a given function.\n\nThe decorator disassembles the bytecode, patches the patterns described above, and recursively calls itself\nfor any nested bytecode objects (this way, the nested function and class definitions are also patched).\n\nThe bytecode is disassembled and assembled back\nusing the [MatthieuDartiailh/bytecode](https://github.com/MatthieuDartiailh/bytecode) library.\n\n[[Source code](src/plusplus/wrappers.py#L11)]\n\n### Enabling increments in the whole package\n\nThe Python import system allows loading modules not only from files but from any reasonable place\n(e.g. there was a [module](https://github.com/drathier/stack-overflow-import) that enables importing code\nfrom Stack Overflow answers). The only thing you need is to provide module contents, including its bytecode.\n\nWe can leverage this to implement a wrapping loader that imports the module as usual but patching its bytecode\nas described above. To do this, we can create a new\n[MetaPathFinder](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder) and install it\nto [sys.meta_path](https://docs.python.org/3/library/sys.html#sys.meta_path).\n\n[[Source code](src/plusplus/wrappers.py#L27)]\n\n### Why not just override unary plus operator?\n\nOverriding operators via magic methods\n(such as [`__pos__()`](https://docs.python.org/3/reference/datamodel.html#object.__pos__) and\n[`__neg__()`](https://docs.python.org/3/reference/datamodel.html#object.__neg__))\ndo not work for built-in Python types like `int`, `float`, etc.\nIn contrast, `plusplus` works with all built-in and user-defined types.\n\n### Caveats\n\n- `pytest` does its own bytecode modifications in tests, adding the code to save intermediate expression results\n    to the `assert` statements. This is necessary to show these results if the test fails\n    (see [pytest docs](https://docs.pytest.org/en/stable/assert.html#assertion-introspection-details)).\n\n    By default, this breaks the `plusplus` patcher because the two `UNARY_POSITIVE` instructions become\n    separated by the code saving the result of the first `UNARY_POSITIVE`.\n\n    We fix that by removing the code saving some of the intermediate results, which does not break\n    the pytest introspection.\n\n    [[Source code](src/plusplus/patching.py#L87)]\n\nHow to use it?\n--------------\n\nYou can install this module with pip:\n\n```\npip install plusplus\n```\n\n### For a particular function or method\n\nAdd a decorator:\n\n```python\nfrom plusplus import enable_increments\n\n@enable_increments\ndef increment_and_return(x):\n    return ++x\n```\n\nThis enables increments for all code inside the function, including nested function and class definitions.\n\n### For all code in your package\n\nIn `package/__init__.py`, make this call __before__ you import submodules:\n\n```python\nfrom plusplus import enable_increments\n\nenable_increments(__name__)\n\n# Import submodules here\n...\n```\n\nThis enables increments in the submodules, but not in the `package/__init__.py` code itself.\n\nSee also\n--------\n\n- [cpmoptimize](https://github.com/borzunov/cpmoptimize) &mdash; a module that optimizes a Python code\n    calculating linear recurrences, reducing the time complexity from O(n) to O(log n).\n- [dontasq](https://github.com/borzunov/dontasq) &mdash; a module that adds functional-style methods\n    (such as `.where()`, `.group_by()`, `.order_by()`) to built-in Python collections.\n\nAuthors\n-------\n\nCopyright &copy; 2021 [Alexander Borzunov](https://github.com/borzunov)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/borzunov/plusplus",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plusplus",
    "package_url": "https://pypi.org/project/plusplus/",
    "platform": "",
    "project_url": "https://pypi.org/project/plusplus/",
    "project_urls": {
      "Bug Tracker": "https://github.com/borzunov/plusplus/issues",
      "Homepage": "https://github.com/borzunov/plusplus"
    },
    "release_url": "https://pypi.org/project/plusplus/0.1.post1/",
    "requires_dist": [
      "bytecode (>=0.12.0)",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Enable the ++x and --x expressions in Python",
    "version": "0.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11435881,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b6c48213412cdbaf777bb97ea100a73e9b945331c9d24176baa2d3921ba0cc7",
          "md5": "6078001138845d12acb3b4f9b419dadf",
          "sha256": "d146c5681169d6f7f5718794bb39e0e39e22f7e09bc2b9dae2a01feaa589939a"
        },
        "downloads": -1,
        "filename": "plusplus-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6078001138845d12acb3b4f9b419dadf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8179,
        "upload_time": "2021-09-12T04:31:23",
        "upload_time_iso_8601": "2021-09-12T04:31:23.528519Z",
        "url": "https://files.pythonhosted.org/packages/7b/6c/48213412cdbaf777bb97ea100a73e9b945331c9d24176baa2d3921ba0cc7/plusplus-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c996aeaa73454fa5a23487808ba2843fd357a97894fa8a15e923846d431f12f",
          "md5": "900d9e6a506b980177f8c674ea3c97e4",
          "sha256": "f7faf00470bfb544b4b19fb8cc7b49b140e1c9d427b1c795dd0f9f3486e81dee"
        },
        "downloads": -1,
        "filename": "plusplus-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "900d9e6a506b980177f8c674ea3c97e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7485,
        "upload_time": "2021-09-12T04:31:25",
        "upload_time_iso_8601": "2021-09-12T04:31:25.409717Z",
        "url": "https://files.pythonhosted.org/packages/3c/99/6aeaa73454fa5a23487808ba2843fd357a97894fa8a15e923846d431f12f/plusplus-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc28d56b9829bc4845f34d09f6fe0f17e79043ea794858a82e0f4d9f3b8628e",
          "md5": "017ac7c5771704a5796b5ab1d596b535",
          "sha256": "18df597c5d6286855e6cef10b29e78028e86ff2ea7071700b919b7d92c31f01b"
        },
        "downloads": -1,
        "filename": "plusplus-0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "017ac7c5771704a5796b5ab1d596b535",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8494,
        "upload_time": "2021-09-13T09:53:31",
        "upload_time_iso_8601": "2021-09-13T09:53:31.671456Z",
        "url": "https://files.pythonhosted.org/packages/5f/c2/8d56b9829bc4845f34d09f6fe0f17e79043ea794858a82e0f4d9f3b8628e/plusplus-0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f2a7ed3fa1fd5c643ab4e145b63266e1a93c3ac516fc2f5496d43ce4f62d26f",
          "md5": "9631bdd5c83f30a65a996f4d46bd48a1",
          "sha256": "0ff237db3c02fa1e02c2bf8788ebae80f195fac8b0f9af148a0261ea79842fc3"
        },
        "downloads": -1,
        "filename": "plusplus-0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "9631bdd5c83f30a65a996f4d46bd48a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7977,
        "upload_time": "2021-09-13T09:53:33",
        "upload_time_iso_8601": "2021-09-13T09:53:33.054405Z",
        "url": "https://files.pythonhosted.org/packages/9f/2a/7ed3fa1fd5c643ab4e145b63266e1a93c3ac516fc2f5496d43ce4f62d26f/plusplus-0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fc28d56b9829bc4845f34d09f6fe0f17e79043ea794858a82e0f4d9f3b8628e",
        "md5": "017ac7c5771704a5796b5ab1d596b535",
        "sha256": "18df597c5d6286855e6cef10b29e78028e86ff2ea7071700b919b7d92c31f01b"
      },
      "downloads": -1,
      "filename": "plusplus-0.1.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "017ac7c5771704a5796b5ab1d596b535",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8494,
      "upload_time": "2021-09-13T09:53:31",
      "upload_time_iso_8601": "2021-09-13T09:53:31.671456Z",
      "url": "https://files.pythonhosted.org/packages/5f/c2/8d56b9829bc4845f34d09f6fe0f17e79043ea794858a82e0f4d9f3b8628e/plusplus-0.1.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f2a7ed3fa1fd5c643ab4e145b63266e1a93c3ac516fc2f5496d43ce4f62d26f",
        "md5": "9631bdd5c83f30a65a996f4d46bd48a1",
        "sha256": "0ff237db3c02fa1e02c2bf8788ebae80f195fac8b0f9af148a0261ea79842fc3"
      },
      "downloads": -1,
      "filename": "plusplus-0.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "9631bdd5c83f30a65a996f4d46bd48a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7977,
      "upload_time": "2021-09-13T09:53:33",
      "upload_time_iso_8601": "2021-09-13T09:53:33.054405Z",
      "url": "https://files.pythonhosted.org/packages/9f/2a/7ed3fa1fd5c643ab4e145b63266e1a93c3ac516fc2f5496d43ce4f62d26f/plusplus-0.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}