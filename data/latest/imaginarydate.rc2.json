{
  "info": {
    "author": "MickBad",
    "author_email": "prog@mickbad.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: French",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Utilities"
    ],
    "description": "# imaginarydate\n\n> Fast tool to manipulate imaginary date for RPG or else...\n\nStatus: Beta\n\nCompatibilité : Python 3.6, 3.7, 3.8, 3.9, 3.10.\n\n### installation\n\n**imagniarydate** s'installe comme les autres packages à l'aide de ``pip``, de préférence dans une environnement virtuel\ntel que ``virtualenv`` ou ``pipenv``.\n\n```bash\n$ pip install imaginarydate\n```\n\nPour contribuer avec le code, clonez le dépôt et installez le mode développement : [https://github.com/mickbad/pyImaginaryDate]()\n\n```bash\n$ git clone git@github.com:mickbad/pyImaginaryDate.git\n$ cd pyImaginaryDate\n$ pipenv install\n$ pipenv shell\n(pyImaginaryDate) $ \n```\n\n### utilisation\n\nUtilisation basique de tests sur les calendriers déjà programmés\n\n```bash\n(pyImaginaryDate) $ python main.py\n** testing add date\n...\nIron Throne: 479 days per year, 22 months per year, 11 days per week\n...\n1/4/1900 +1 day, +2 months => Jüman 2 Pern 1900\n...\nOsabuñ: 100 days per year, 10 months per year, 1 days per week\n...\n[Reference date] date 01/01/00 from Iron Throne <=> 00/09/01 from Osabuñ\ndate 25/12/925 from Iron Throne <=> 4434/04/01 from Osabuñ\ndate 13/05/1764 from Iron Throne <=> 8451/04/10 from Osabuñ\ndate 14/07/1255 from Iron Throne <=> 6013/07/10 from Osabuñ\ndate 12/02/1814 from Iron Throne <=> 8690/02/08 from Osabuñ\ndate 08/13/4014 from Iron Throne <=> 19230/07/10 from Osabuñ\n```\n\nUtilisation console\n\n```python\n>>> from imaginarydate import ImaginaryTestingDate\n>>> ImaginaryTestingDate(day=-10, month=2, year=1900).human\n'dimanche 21 janvier 1900'\n\n>>> ImaginaryTestingDate(day=-10, month=2, year=1900).add(day=10).human\n'mercredi 31 janvier 1900'\n\n>>> print(ImaginaryTestingDate(day=-10, month=2, year=1900).add(year=10))\n21/01/1910\n\n>>> print(ImaginaryTestingDate(day=10, month=2, year=1900).datestamp)\n228041\n\n>>> from imaginarydate.nakarina import IronThroneDate\n>>> # convertion date différents calendrier sachant que IronThrone a un décalage de 9 mois sur le début du calendrier Testing\n>>> IronThroneDate().from_date(ImaginaryTestingDate(day=10, month=2, year=1900), date_offset=IronThroneDate(month=1)).human\n'Ģan 17 Magnolia 476'\n```\n\n### Origine\n\nCette bibliothèque a pour origine de faciliter les convertions des différents univers de [www.nakarina.com](https://www.nakarina.com/). \nCela sert dans JDR/RPG (jeux de rôles) de manière plus générale\n\n### Création\n\nOn peut créer un calendrier particulier à partir de la base de ce module afin d'établir son propre gestion de dates.\n\nIl suffit de créer une classe de configuration.\n\n```python\nfrom imaginarydate import ImaginaryCalendarFormat, ImaginaryDate\n\n\nclass MyTestingDate(ImaginaryDate):\n    \"\"\"\n    Class for testing\n    \"\"\"\n    calendar_config = ImaginaryCalendarFormat(\n        name=\"TestingCal\",\n        days_per_week=[\n          \"lundi\", \n          \"mardi\", \n          \"mercredi\", \n          \"jeudi\", \n          \"vendredi\", \n          \"samedi\", \n          \"dimanche\"\n        ],\n        start_day_week_initial=\"vendredi\",\n        months_per_year=[\n            {\"name\": \"janvier\", \"count\": 31},\n            {\"name\": \"février\", \"count\": 28},\n            {\"name\": \"mars\", \"count\": 31},\n            {\"name\": \"avril\", \"count\": 30},\n        ]\n    )\n\n# >>> print(MyTestingDate().human)\n# vendredi 1 janvier 00\n```\n\nLa propriété ```calendar_config``` contient la configuration du calendrier fictif mais on peut le traduire directement dans le constructeur comme suit.\nCela permet de gérer des cas particulier suivant les circonstances du jeu de construction.\n\n```python\nfrom imaginarydate import ImaginaryCalendarFormat, ImaginaryDate\n\n\nclass MyTestingDate(ImaginaryDate):\n    \"\"\"\n    Class for testing\n    \"\"\"\n    def __init__(self, day=0, month=0, year=0):\n        \"\"\"\n        pick a date constructor\n\n        :param day: current day\n        :param month: current month\n        :param year: current year\n        \"\"\"\n        # new calendar configuration\n        greg = ImaginaryCalendarFormat(\n            name=\"TestingCal\",\n            days_per_week=[\n              \"lundi\", \n              \"mardi\", \n              \"mercredi\", \n              \"jeudi\", \n              \"vendredi\", \n              \"samedi\", \n              \"dimanche\"\n            ],\n            start_day_week_initial=\"vendredi\",\n            months_per_year=[\n                {\"name\": \"janvier\", \"count\": 31},\n                {\"name\": \"février\", \"count\": 28},\n                {\"name\": \"mars\", \"count\": 31},\n                {\"name\": \"avril\", \"count\": 30},\n            ]\n        )\n\n        # make object\n        super(MyTestingDate, self).__init__(\n          calendar=greg, \n          day=day, \n          month=month,\n          year=year\n        )\n\n# >>> print(MyTestingDate().human)\n# vendredi 1 janvier 00\n```\n\nLa classe ``ImaginaryCalendarFormat`` contient des paramètres de configuration\n* ``name`` (obligatoire) : nom du calendrier\n* ``days_per_week`` (optionnel) : liste des noms de jours d'une semaine (si vide, un seul jour numérique est créé)\n* ``start_day_week_initial`` (optionnel) : jour commençant l'origine du calendrier (différent du premier jour de la semaine, ici lundi) : 1/1/00 donne ici un vendredi\n* ``months_per_year`` (obligatoire) : dictionnaire pour configurer la liste des mois d'une année\n  * ``name`` (optionnel) : nom du mois (si vide, il est remplacé par une valeur numérique)\n  * ``count`` (obligatoire) : nombre de jour dans le mois courant\n\nParfois la représentation d'un jour ne se fait pas normalement si par exemple il n'y a pas de nom du jour de la semaine ou de nom des mois. \nOn peut surcharger la représentation dans la classe comme ceci\n\n```python\nfrom imaginarydate import ImaginaryCalendarFormat, ImaginaryDate\n\n\nclass MyTestingDate(ImaginaryDate):\n    \"\"\"\n    Class for testing\n    \"\"\"\n    calendar_config = ImaginaryCalendarFormat(\n        name=\"TestingCal\",\n        days_per_week=[\n          \"lundi\", \n          \"mardi\", \n          \"mercredi\", \n          \"jeudi\", \n          \"vendredi\", \n          \"samedi\", \n          \"dimanche\"\n        ],\n        start_day_week_initial=\"vendredi\",\n        months_per_year=[\n            {\"name\": \"janvier\", \"count\": 31},\n            {\"name\": \"février\", \"count\": 28},\n            {\"name\": \"mars\", \"count\": 31},\n            {\"name\": \"avril\", \"count\": 30},\n        ]\n    )\n    \n    # représentation de l'objet au format string\n    def __str__(self):\n      \"\"\"\n      string representation\n      :return: str\n      \"\"\"\n      return f\"{self.year:02d}/{self.month:02d}/{self.day:02d}\"\n\n\n    # sortie plus évolué pour l'humain\n    @property\n    def human(self):\n        \"\"\"\n        string representation\n        :return: str\n        \"\"\"\n        return f\"Le jour est '{self.day_of_week_human} {self}'\"\n\n\n# >>> print(MyTestingDate(year=1900).human)\n# Le jour est 'vendredi 1900/01/01'\n```\n\nPour bénéficier du moteur interne de tests sur des dates pseudos aléatoires, la classe doit hériter de ``ImaginaryTestingDate``\n\n```python\nfrom imaginarydate import ImaginaryCalendarFormat, ImaginaryTestingDate\n\n\nclass MyTesting2Date(ImaginaryTestingDate):\n    \"\"\"\n    Class for testing 2\n    \"\"\"\n    # calendar configuration\n    calendar_config = ImaginaryCalendarFormat(\n        name=\"Testing 2\",\n        months_per_year=[\n            {\"count\": 10},\n            {\"count\": 10},\n        ]\n    )\n\nprint(MyTesting2Date.calendar_config)\n# Testing 2: 20 days per year, 2 months per year, 1 days per week\n\nMyTesting2Date().tests()\n# ... results...\n```\n\n### Limitations\n\nLes calendriers inventés ou déjà configurés ne gèrent pas :\n* les années bisextilles\n* les doublons de nom de mois (_à venir_)\n* les doublons de nom de semaine (_à venir_)\n\n### licence\n\nCe projet est librement utilisable, publié sous licence MIT.\n\nMIT Licence.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mickbad/pyImaginaryDate",
    "keywords": "development tools calendar RPG",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imaginarydate",
    "package_url": "https://pypi.org/project/imaginarydate/",
    "platform": null,
    "project_url": "https://pypi.org/project/imaginarydate/",
    "project_urls": {
      "Homepage": "https://github.com/mickbad/pyImaginaryDate"
    },
    "release_url": "https://pypi.org/project/imaginarydate/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast imaginary calendar for RPG or other",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13505061,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a6b2f78955950d03006b37bd9276afae36b8bf1fe6c56587ef6d3cffe45bdb5",
          "md5": "3f04999f69b1a1844de47918eddfdc57",
          "sha256": "2b1f388b81a0ff37d194642639998f9c1eafe5abbbed04a12ca660b0e95dbf91"
        },
        "downloads": -1,
        "filename": "imaginarydate-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f04999f69b1a1844de47918eddfdc57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11123,
        "upload_time": "2022-04-13T09:45:30",
        "upload_time_iso_8601": "2022-04-13T09:45:30.616669Z",
        "url": "https://files.pythonhosted.org/packages/7a/6b/2f78955950d03006b37bd9276afae36b8bf1fe6c56587ef6d3cffe45bdb5/imaginarydate-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3c5e4251a75f5d17866d0cff97e8dff6d49033fbee0b4a83370a1b71af746b5",
          "md5": "83820a85985c16dfa0eed5322f45cc7c",
          "sha256": "f30cc5b12a170d9c8714e98484ed9911f2b990a104e603b64fbc36155879e4dc"
        },
        "downloads": -1,
        "filename": "imaginarydate-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83820a85985c16dfa0eed5322f45cc7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11132,
        "upload_time": "2022-04-13T17:18:19",
        "upload_time_iso_8601": "2022-04-13T17:18:19.260126Z",
        "url": "https://files.pythonhosted.org/packages/b3/c5/e4251a75f5d17866d0cff97e8dff6d49033fbee0b4a83370a1b71af746b5/imaginarydate-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3c5e4251a75f5d17866d0cff97e8dff6d49033fbee0b4a83370a1b71af746b5",
        "md5": "83820a85985c16dfa0eed5322f45cc7c",
        "sha256": "f30cc5b12a170d9c8714e98484ed9911f2b990a104e603b64fbc36155879e4dc"
      },
      "downloads": -1,
      "filename": "imaginarydate-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "83820a85985c16dfa0eed5322f45cc7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11132,
      "upload_time": "2022-04-13T17:18:19",
      "upload_time_iso_8601": "2022-04-13T17:18:19.260126Z",
      "url": "https://files.pythonhosted.org/packages/b3/c5/e4251a75f5d17866d0cff97e8dff6d49033fbee0b4a83370a1b71af746b5/imaginarydate-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}