{
  "info": {
    "author": "Jan Jancar",
    "author_email": "johny@neuromancer.sk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# ![](docs/_static/logo_black_full.png)\n\n[![docs](https://img.shields.io/badge/docs-neuromancer.sk-brightgreen.svg)](https://neuromancer.sk/pyecsca/)  [![License MIT ](https://img.shields.io/github/license/J08nY/pyecsca?color=brightgreen)](https://github.com/J08nY/pyecsca/blob/master/LICENSE) [![Build Status](https://travis-ci.com/J08nY/pyecsca.svg?branch=master)](https://travis-ci.com/J08nY/pyecsca) [![Codecov](https://img.shields.io/codecov/c/gh/J08nY/pyecsca?color=brightgreen&logo=codecov)](https://codecov.io/gh/J08nY/pyecsca) ![](https://img.shields.io/static/v1?label=mypy&message=No%20issues&color=brightgreen)\n\n**Py**thon **E**lliptic **C**urve cryptography **S**ide-**C**hannel **A**nalysis toolkit.\n\nFor more info, see the [![docs](https://img.shields.io/badge/docs-neuromancer.sk-brightgreen.svg)](https://neuromancer.sk/pyecsca/).\n\n## Functionality\n\n**pyecsca** aims to fill a gap in SCA tooling for Elliptic Curve Cryptography, it focuses on\nblack-box implementations of ECC and presents a way to extract implementation information\nabout a black-box implementation of ECC through side-channels. The main goal of **pyecsca**\nis to be able to reverse engineer the curve model, coordinate system, addition formulas, scalar\nmultiplier and even finite-field implementation details.\n\nIt is currently in an alpha stage of development and thus only provides:\n - Enumeration of millions of possible ECC implementation configurations (see [notebook/configuration_space](https://neuromancer.sk/pyecsca/notebook/configuration_space.html))\n - Simulation and execution tracing of key generation, ECDH and ECDSA (see [notebook/simulation](https://neuromancer.sk/pyecsca/notebook/simulation.html))\n - Synthesis of C implementations of ECC for embedded devices, given any implementation configuration (see [notebook/codegen](https://neuromancer.sk/pyecsca/notebook/codegen.html))\n - Trace acquisition using PicoScope/ChipWhisperer oscilloscopes (see [notebook/measurement](https://neuromancer.sk/pyecsca/notebook/measurement.html))\n - Trace processing capabilities, e.g. signal-processing, filtering, averaging, cutting, aligning ([pyecsca.sca](https://neuromancer.sk/pyecsca/api/pyecsca.sca.html))\n - Trace visualization using holoviews and datashader (see [notebook/visualization](https://neuromancer.sk/pyecsca/notebook/visualization.html))\n\n**pyecsca** consists of three packages:\n - the core: https://github.com/J08nY/pyecsca\n - the codegen package: https://github.com/J08nY/pyecsca-codegen\n - the notebook package: https://github.com/J08nY/pyecsca-notebook\n\n## Requirements\n\n - [Numpy](https://www.numpy.org/)\n - [Scipy](https://www.scipy.org/)\n - [sympy](https://sympy.org/)\n - [atpublic](https://public.readthedocs.io/)\n - [fastdtw](https://github.com/slaypni/fastdtw)\n - [asn1crypto](https://github.com/wbond/asn1crypto)\n - [h5py](https://www.h5py.org/)\n - [holoviews](https://holoviews.org)\n - [bokeh](https://bokeh.org)\n - [datashader](https://datashader.org)\n - [matplotlib](https://matplotlib.org/)\n - [xarray](https://xarray.pydata.org/en/stable/)\n - [astunparse](https://astunparse.readthedocs.io/)\n - **Optionally**:\n   - **Oscilloscope support:**\n     - [picosdk](https://github.com/picotech/picosdk-python-wrappers/)\n     - [picoscope](https://github.com/colinoflynn/pico-python)\n     - [chipwhisperer](https://github.com/newaetech/chipwhisperer)\n   - **Smartcard support:**\n     - [pyscard](https://pyscard.sourceforge.io/)\n   - **Faster arithmetic:**\n     - [gmpy2](https://gmpy2.readthedocs.io/) (and also GMP library)\n\n\n*pyecsca* contains data from the [Explicit-Formulas Database](https://www.hyperelliptic.org/EFD/index.html) by Daniel J. Bernstein and Tanja Lange.\nThe data was partially changed, to make working with it easier.\n\nIt also supports working with [Riscure](https://www.riscure.com) Inspector trace sets, which are of a proprietary format.\n\n### Testing\n\n - [nose2](https://nose2.readthedocs.io)\n - [green](https://github.com/CleanCut/green)\n - [mypy](http://mypy-lang.org/)\n - [parameterized](https://github.com/wolever/parameterized)\n - [flake8](https://flake8.pycqa.org/)\n - [coverage](https://coverage.readthedocs.io/)\n\n### Docs\n\n - [sphinx](https://www.sphinx-doc.org/)\n - [sphinx-autodoc-typehints](https://pypi.org/project/sphinx-autodoc-typehints/)\n - [nbsphinx](https://nbsphinx.readthedocs.io/)\n\n\n## License\n\n    MIT License\n\n    Copyright (c) 2018-2020 Jan Jancar\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n\n\n*Development is supported by the Masaryk University grant [MUNI/C/1701/2018](https://www.muni.cz/en/research/projects/46834),\nthis support is very appreciated.*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://neuromancer.sk/pyecsca/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyecsca",
    "package_url": "https://pypi.org/project/pyecsca/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyecsca/",
    "project_urls": {
      "Homepage": "https://neuromancer.sk/pyecsca/"
    },
    "release_url": "https://pypi.org/project/pyecsca/0.1.0/",
    "requires_dist": [
      "numpy",
      "scipy",
      "sympy (>=1.7.1)",
      "atpublic",
      "cython",
      "fastdtw",
      "asn1crypto",
      "h5py",
      "holoviews",
      "bokeh",
      "matplotlib",
      "datashader",
      "xarray",
      "astunparse",
      "chipwhisperer ; extra == 'chipwhisperer'",
      "mypy ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "interrogate ; extra == 'dev'",
      "gmpy2 ; extra == 'gmp'",
      "picoscope ; extra == 'picoscope_alt'",
      "picosdk ; extra == 'picoscope_sdk'",
      "pyscard ; extra == 'smartcard'",
      "nose2 ; extra == 'test'",
      "parameterized ; extra == 'test'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Python Elliptic Curve cryptography Side Channel Analysis toolkit.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9152260,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae81a102aff28902b9451552d7b6e444b44da93903228f81e324e0d5b014e71d",
          "md5": "2b6886bbc4358d75e6882d0b2672b6f3",
          "sha256": "d179574a3d394c4b97c4ac40675cf38b8f86da80ba8dcbb21ffede710dc9fb58"
        },
        "downloads": -1,
        "filename": "pyecsca-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b6886bbc4358d75e6882d0b2672b6f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 357441,
        "upload_time": "2021-01-16T17:51:17",
        "upload_time_iso_8601": "2021-01-16T17:51:17.560638Z",
        "url": "https://files.pythonhosted.org/packages/ae/81/a102aff28902b9451552d7b6e444b44da93903228f81e324e0d5b014e71d/pyecsca-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6fc51a4711dbcb356ac20bf2eec3aeed6e93ca6d4fb174b1538d757f06df82e",
          "md5": "c66f24cf52407fa6e8b81870547ad4a9",
          "sha256": "ff1b4a18e501f0ed9d120f19e6bc47d94f07036637f3aaad2761fc895e453b0e"
        },
        "downloads": -1,
        "filename": "pyecsca-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c66f24cf52407fa6e8b81870547ad4a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 183174,
        "upload_time": "2021-01-16T17:54:06",
        "upload_time_iso_8601": "2021-01-16T17:54:06.924531Z",
        "url": "https://files.pythonhosted.org/packages/e6/fc/51a4711dbcb356ac20bf2eec3aeed6e93ca6d4fb174b1538d757f06df82e/pyecsca-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae81a102aff28902b9451552d7b6e444b44da93903228f81e324e0d5b014e71d",
        "md5": "2b6886bbc4358d75e6882d0b2672b6f3",
        "sha256": "d179574a3d394c4b97c4ac40675cf38b8f86da80ba8dcbb21ffede710dc9fb58"
      },
      "downloads": -1,
      "filename": "pyecsca-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b6886bbc4358d75e6882d0b2672b6f3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 357441,
      "upload_time": "2021-01-16T17:51:17",
      "upload_time_iso_8601": "2021-01-16T17:51:17.560638Z",
      "url": "https://files.pythonhosted.org/packages/ae/81/a102aff28902b9451552d7b6e444b44da93903228f81e324e0d5b014e71d/pyecsca-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6fc51a4711dbcb356ac20bf2eec3aeed6e93ca6d4fb174b1538d757f06df82e",
        "md5": "c66f24cf52407fa6e8b81870547ad4a9",
        "sha256": "ff1b4a18e501f0ed9d120f19e6bc47d94f07036637f3aaad2761fc895e453b0e"
      },
      "downloads": -1,
      "filename": "pyecsca-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c66f24cf52407fa6e8b81870547ad4a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 183174,
      "upload_time": "2021-01-16T17:54:06",
      "upload_time_iso_8601": "2021-01-16T17:54:06.924531Z",
      "url": "https://files.pythonhosted.org/packages/e6/fc/51a4711dbcb356ac20bf2eec3aeed6e93ca6d4fb174b1538d757f06df82e/pyecsca-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}