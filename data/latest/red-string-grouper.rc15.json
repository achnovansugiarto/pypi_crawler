{
  "info": {
    "author": "Particular Miner",
    "author_email": "particularminer@fake.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Red String Grouper\n*R*ecord *E*quivalence *D*iscoverer based on \n*[String Grouper](https://github.com/Bergvca/string_grouper)* \n(Red String Grouper) is a python package that finds similarities between \nrows/records of a table with multiple fields.  \nIt is an extension of \n*[String Grouper](https://github.com/Bergvca/string_grouper)*, a library that \nmakes finding groups of similar strings within one or two lists of strings \neasy &mdash; and fast.\n\n# Installation\n\n    pip install red_string_grouper\n\n# Usage\nHow do we achieve matching for multiple fields and priorities?\n\nImport the function `record_linkage()` from `red_string_grouper` and specify \nthe fields of the table over which the comparisons will be made.\n\n```python\nimport pandas as pd \nimport numpy as np \nfrom red_string_grouper import record_linkage, field, field_pair\n\nmatches = record_linkage(data_frames, fields_2b_matched_fuzzily,\n                         fields_2b_matched_exactly=None,\n                         hierarchical=True, **kwargs)\n```\n                   \nThis is a function that combines similarity-matching results of several fields of one \nor two DataFrames (`data_frames`) and returns them in another DataFrame (`matches`).  \n\nExamples are given [below](#eg).\n\n|Parameter |Status |Description|\n|:---|:---:|:---|\n|`data_frames`| Required | Either a `pandas.DataFrame` or a list of two `pandas.DataFrame`s of strings which are the tables over which the comparisons will be made.|\n|`fields_2b_matched_fuzzily`|Required| List of tuples.  When `data_frames` is a `DataFrame`, each tuple must be a triple: <br>(&#9001;***field name***&#9002;, &#9001;***weight***&#9002;, &#9001;***field_kwargs***&#9002;) <br> which is best input using the provided auxiliary function: `field()` in the following way: <br>`field(<field name>, weight=<weight>, **kwargs)`. <br> &#9001;***field name***&#9002; is a string denoting the name of a field in `data_frame` whose values are to be matched.  <br><br>When `data_frames` is a list of two `DataFrame`s, then each tuple must be a quadruple:<br>(&#9001;***field name 1***&#9002;, &#9001;***field name 2***&#9002;, &#9001;***weight***&#9002;, &#9001;***field_kwargs***&#9002;) <br> which is best input using the provided auxiliary function: `field_pair()` in the following way: <br>`field_pair(<field name1>, <field name2>, weight=<weight>, **kwargs)`. <br> &#9001;***field name1***&#9002; is a string denoting the name of a field in `data_frames[0]`.  Similarly, ***field name2***&#9002; is a string denoting the name of a field in `data_frames[1]` whose values are to be matched with those of &#9001;***field name1***&#9002;.  <br><br> &#9001;***weight***&#9002; is a number (default: 1.0) that defines the **relative** importance of the field (or field-pair) to other fields (or field-pairs) -- the field's (or field-pair's) contribution to the mean similarity will be weighted by this number. <br>&#9001;***weighted mean similarity score***&#9002; = <br> &nbsp; &nbsp; &nbsp; &nbsp; (**&Sigma;**<sub>*field*</sub> &#9001;***weight***&#9002;<sub>*field*</sub> &times; &#9001;***similarity***&#9002;<sub>*field*</sub>) / (**&Sigma;**<sub>*field*</sub>&#9001;***weight***&#9002;<sub>*field*</sub>), <br> where **&Sigma;**<sub>*field*</sub> means \"sum over fields\". <br><br> &#9001;***field_kwargs***&#9002; is a `dict` capturing any keyword arguments to be passed to `StringGrouper` for this field.  Any [`StringGrouper` keyword arguments](https://github.com/Bergvca/string_grouper#kwargs) specified for the \\*\\*kwargs of the `field()` (or `field_pair()`) function will be captured by &#9001;***field_kwargs***&#9002;.|\n|`fields_2b_matched_exactly`| Optional| List of tuples.  When `data_frames` is a `DataFrame`, each tuple must be a pair: <br> (&#9001;***field name***&#9002;, &#9001;***weight***&#9002;).<br><br> &#9001;***field name***&#9002; is the name of a field in `data_frame` which is to be matched exactly.  The auxiliary function: `field()` may be used to enter each tuple in the following way: <br>`field(<field name>, weight=<weight>, **kwargs)`.  <br><br>When `data_frames` is a list of two `DataFrame`s, then each tuple must be a triple:<br>(&#9001;***field name 1***&#9002;, &#9001;***field name 2***&#9002;, &#9001;***weight***&#9002;) <br> which is best input using the provided auxiliary function: `field_pair()` in the following way: <br>`field_pair(<field name1>, <field name2>, weight=<weight>)`. <br><br> &#9001;***field name1***&#9002; is a string denoting the name of a field in `data_frames[0]`.  Similarly, ***field name2***&#9002; is a string denoting the name of a field in `data_frames[1]` whose values are to be matched with those of &#9001;***field name1***&#9002;.  <br><br> &#9001;***weight***&#9002; has the same meaning as in parameter `fields_2b_matched_fuzzily`. Defaults to `None`. |\n|`hierarchical`| Optional | `bool`.  Determines if the output DataFrame will have a hierarchical column-structure (`True`) or not (`False`). Defaults to `True`.|\n|`**kwargs`| Optional| Any `string_grouper` keyword arguments may be specified here.  These will apply to all fields (or field-pairs) in `fields_2b_matched_fuzzily`.  However, any keyword arguments already given in `fields_2b_matched_fuzzily` take precedence over those specified here.  |\n\n# Examples <a name=\"eg\"></a>\n\n```python\nimport pandas as pd \nimport numpy as np\nfrom red_string_grouper import record_linkage, field\n```\n\n## Prepare the Input Data:\nHere's some sample data:\n\n```python\nfile = 'data/us-cities-real-estate-sample-zenrows.csv'\ndf = pd.read_csv(file, dtype = str, keep_default_na=False)  # all strings\ndfna = pd.read_csv(file, dtype = str, keep_default_na=True) # has null-values\n```\n\nNote that the data has been read into memory as strings (`dtype=str`), since \n`red_string_grouper` is based on string comparison.\n\nThe dataset is a table of 10 000 records:\n\n```python\nlen(df)\n```\n\n\n    10000\n\n\nLet us examine the data to determine which fields are good to compare \n(that is, we will use only columns without *null* or *NaN* data).\nAt the same time, we will also check how many unique values each field has \nand its maximum string-length (to inform our choice of its n-gram size): \n\n```python\ncolumn_info = pd.concat(\n    [\n        df.nunique().rename('#unique'),\n        dfna.isna().any().rename('has null?'),\n        df.applymap(len).max().rename('max strlen')\n    ],\n    axis=1\n).rename_axis(\"column\").reset_index()\n\ncolumn_info[\n    (column_info['#unique'] > 1) & (~column_info['has null?'])\n]\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column</th>\n      <th>#unique</th>\n      <th>has null?</th>\n      <th>max strlen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>zpid</td>\n      <td>10000</td>\n      <td>False</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>id</td>\n      <td>10000</td>\n      <td>False</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>imgSrc</td>\n      <td>9940</td>\n      <td>False</td>\n      <td>231</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>detailUrl</td>\n      <td>10000</td>\n      <td>False</td>\n      <td>121</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>statusText</td>\n      <td>24</td>\n      <td>False</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>address</td>\n      <td>10000</td>\n      <td>False</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>addressState</td>\n      <td>51</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>addressZipcode</td>\n      <td>6446</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>isUndisclosedAddress</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>isZillowOwned</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>has3DModel</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>hasVideo</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>isFeaturedListing</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>list</td>\n      <td>2</td>\n      <td>False</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\nThus we may set field `'zpid'` as the index, since it has exactly the same number \nof unique values as the number of rows.  `zpid` will thus be used to identify \neach row in the matching results.\n\n\n```python\ndf.set_index('zpid', inplace=True)\n```\n\n## Call `record_linkage()`:\nThere is more than one way to achieve the same matching result.  But some ways are faster than others, depending on the data.\n\n### Plot comparing run-times of `record_linkage()` calls with and without grouping on a test field having a varying number of unique values in a 10 000-row DataFrame\n<img width=\"100%\" src=\"https://raw.githubusercontent.com/ParticularMiner/red_string_grouper/master/images/Fuzzy_vs_Exact.png\">\n\n### 1. Grouping by fields that are to be matched exactly\nNote that those fields that have very few unique values distributed among a \nlarge number of rows, such as 'hasVideo' (2 unique values) and 'addressState' \n(51 unique values), can be specified as \"fields that are to be matched exactly\" \n(that is, in parameter `fields_2b_matched_exactly`) which can lead to a significant \nperformance boost.\n\nBehind the scenes, this allows `record_linkage()` to avoid using cosine-\nsimilarity matching on these fields (which is time-consuming, since many \nmatches are likely to be found), and instead group the data by these fields.\n\nIn this way, cosine-similarity matching can be performed only on the other \nfields (in parameter `fields_2b_matched_fuzzily`) for each group.\n\nOn the other hand, grouping by 'addressZipcode' (which has 6446 unique values) \ndegrades performance, since the groups by this field are so many.  \n\nTo illustrate, the following call took \n&approx; 5 minutes to run:\n\n```python\nmatches = record_linkage(\n    df,\n    fields_2b_matched_fuzzily=[\n        field('statusText'),\n        field('address')\n    ],\n    fields_2b_matched_exactly=[\n        field('addressZipcode', weight=2),\n        field('addressState', weight=4),\n        field('hasVideo')\n    ]\n)\n```\nwhereas, the following call (which produces the same result) took &approx;8 seconds to run:\n\n\n```python\nmatches = record_linkage(\n    df,\n    fields_2b_matched_fuzzily=[\n        field('statusText'),\n        field('address'),\n        field('addressZipcode', weight=2, min_similarity=0.9999)\n    ],\n    fields_2b_matched_exactly=[\n        field('addressState', weight=4),\n        field('hasVideo')\n    ]\n)\n```\n\nNote that in the above calls, unspecified options, such as `weight` and [`string_grouper keyword arguments`](https://github.com/Bergvca/string_grouper#kwargs)) such as `min_similarity` and `ngram_size` take up their default values.  The default value for `weight` is `1.0`, while the default values for the `string_grouper` keyword arguments can be found at [this link](https://github.com/Bergvca/string_grouper#kwargs).\nLet's display the results:\n```python\nmatches\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">Exactly Matched Fields</th>\n      <th colspan=\"9\" halign=\"left\">Fuzzily Matched Fields</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>addressState</th>\n      <th>hasVideo</th>\n      <th colspan=\"3\" halign=\"left\">statusText</th>\n      <th colspan=\"3\" halign=\"left\">address</th>\n      <th colspan=\"3\" halign=\"left\">addressZipcode</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>Weighted Mean Similarity Score</th>\n      <th></th>\n      <th></th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n    </tr>\n    <tr>\n      <th>left_zpid</th>\n      <th>right_zpid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2077667803</th>\n      <th>2077679643</th>\n      <td>1.000000</td>\n      <td>WY</td>\n      <td>false</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>Jlda Minor Sub Division LOT C, Buffalo, WY 82834</td>\n      <td>1.000000</td>\n      <td>Jlda Minor Subdivision LOT C, Buffalo, WY 82834</td>\n      <td>82834</td>\n      <td>1.0</td>\n      <td>82834</td>\n    </tr>\n    <tr>\n      <th>2075244057</th>\n      <th>2075358943</th>\n      <td>0.997100</td>\n      <td>OH</td>\n      <td>false</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>0 Township Road 118, Kimbolton, OH 43749</td>\n      <td>0.973904</td>\n      <td>Township Road 118, Kimbolton, OH 43749</td>\n      <td>43749</td>\n      <td>1.0</td>\n      <td>43749</td>\n    </tr>\n    <tr>\n      <th>2077676622</th>\n      <th>2077676809</th>\n      <td>0.993867</td>\n      <td>ND</td>\n      <td>false</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>4 55th St SE, Christine, ND 58015</td>\n      <td>0.944802</td>\n      <td>2 55th St SE, Christine, ND 58015</td>\n      <td>58015</td>\n      <td>1.0</td>\n      <td>58015</td>\n    </tr>\n    <tr>\n      <th>2077093064</th>\n      <th>2078843498</th>\n      <td>0.993328</td>\n      <td>SD</td>\n      <td>false</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>17 Sidney Park Rd, Custer, SD 57730</td>\n      <td>0.939948</td>\n      <td>Sidney Park Rd, Custer, SD 57730</td>\n      <td>57730</td>\n      <td>1.0</td>\n      <td>57730</td>\n    </tr>\n    <tr>\n      <th>150690392</th>\n      <th>2076123604</th>\n      <td>0.992909</td>\n      <td>NJ</td>\n      <td>false</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>5 Windsor Ln, Gladstone, NJ 07934</td>\n      <td>0.936180</td>\n      <td>0 Windsor Ln, Gladstone, NJ 07934</td>\n      <td>7934</td>\n      <td>1.0</td>\n      <td>7934</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2070837516</th>\n      <th>2072047318</th>\n      <td>0.978032</td>\n      <td>HI</td>\n      <td>false</td>\n      <td>New construction</td>\n      <td>1.0</td>\n      <td>New construction</td>\n      <td>D12C Plan, Kaikoi at Hoopili</td>\n      <td>0.802290</td>\n      <td>D12B Plan, Kaikoi at Hoopili</td>\n      <td>96706</td>\n      <td>1.0</td>\n      <td>96706</td>\n    </tr>\n    <tr>\n      <th>305578084</th>\n      <th>90035758</th>\n      <td>0.977991</td>\n      <td>MO</td>\n      <td>false</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>210 N 17th St UNIT 203, Saint Louis, MO 63103</td>\n      <td>0.801920</td>\n      <td>210 N 17th St UNIT 1202, Saint Louis, MO 63103</td>\n      <td>63103</td>\n      <td>1.0</td>\n      <td>63103</td>\n    </tr>\n    <tr>\n      <th>2071195670</th>\n      <th>88086529</th>\n      <td>0.977983</td>\n      <td>MI</td>\n      <td>false</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>6533 E Jefferson Ave APT 426, Detroit, MI 48207</td>\n      <td>0.801844</td>\n      <td>6533 E Jefferson Ave APT 102E, Detroit, MI 48207</td>\n      <td>48207</td>\n      <td>1.0</td>\n      <td>48207</td>\n    </tr>\n    <tr>\n      <th>247263033</th>\n      <th>247263136</th>\n      <td>0.977941</td>\n      <td>IA</td>\n      <td>false</td>\n      <td>New construction</td>\n      <td>1.0</td>\n      <td>New construction</td>\n      <td>1 University Way #511, Iowa City, IA 52246</td>\n      <td>0.801474</td>\n      <td>1 University Way #503, Iowa City, IA 52246</td>\n      <td>52246</td>\n      <td>1.0</td>\n      <td>52246</td>\n    </tr>\n    <tr>\n      <th>2083656138</th>\n      <th>2083656146</th>\n      <td>0.977873</td>\n      <td>IN</td>\n      <td>false</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>3789 S Anderson Dr, Terre Haute, IN 47803</td>\n      <td>0.800855</td>\n      <td>3776 S Anderson Dr, Terre Haute, IN 47803</td>\n      <td>47803</td>\n      <td>1.0</td>\n      <td>47803</td>\n    </tr>\n  </tbody>\n</table>\n<p>94 rows &times; 12 columns</p>\n</div>\n\n\n\n### 2. No grouping\n\nThe results above can be obtained in yet another way.  However, as mentioned \nabove, it can take much longer to compute in cases where some fuzzily matched \nfields have very few uniques values.  \n\nThe following call took &approx;3 minutes 30 seconds to run:\n\n```python\nrecord_linkage(\n    df,\n    fields_2b_matched_fuzzily=[\n        field('statusText'),\n        field('address'),\n        field('addressZipcode', weight=2, min_similarity=0.9999),\n        field('addressState', weight=4, ngram_size=2, min_similarity=0.9999),\n        field('hasVideo', min_similarity=0.9999)\n    ]\n)\n```\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">statusText</th>\n      <th colspan=\"3\" halign=\"left\">address</th>\n      <th colspan=\"3\" halign=\"left\">addressZipcode</th>\n      <th colspan=\"3\" halign=\"left\">hasVideo</th>\n      <th colspan=\"3\" halign=\"left\">addressState</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>Weighted Mean Similarity Score</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n      <th>left</th>\n      <th>similarity</th>\n      <th>right</th>\n    </tr>\n    <tr>\n      <th>left_zpid</th>\n      <th>right_zpid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2077667803</th>\n      <th>2077679643</th>\n      <td>1.000000</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>Jlda Minor Sub Division LOT C, Buffalo, WY 82834</td>\n      <td>1.000000</td>\n      <td>Jlda Minor Subdivision LOT C, Buffalo, WY 82834</td>\n      <td>82834</td>\n      <td>1.0</td>\n      <td>82834</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>WY</td>\n      <td>1.0</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>2075244057</th>\n      <th>2075358943</th>\n      <td>0.997100</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>0 Township Road 118, Kimbolton, OH 43749</td>\n      <td>0.973904</td>\n      <td>Township Road 118, Kimbolton, OH 43749</td>\n      <td>43749</td>\n      <td>1.0</td>\n      <td>43749</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>OH</td>\n      <td>1.0</td>\n      <td>OH</td>\n    </tr>\n    <tr>\n      <th>2077676622</th>\n      <th>2077676809</th>\n      <td>0.993867</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>4 55th St SE, Christine, ND 58015</td>\n      <td>0.944802</td>\n      <td>2 55th St SE, Christine, ND 58015</td>\n      <td>58015</td>\n      <td>1.0</td>\n      <td>58015</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>ND</td>\n      <td>1.0</td>\n      <td>ND</td>\n    </tr>\n    <tr>\n      <th>2077093064</th>\n      <th>2078843498</th>\n      <td>0.993328</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>17 Sidney Park Rd, Custer, SD 57730</td>\n      <td>0.939948</td>\n      <td>Sidney Park Rd, Custer, SD 57730</td>\n      <td>57730</td>\n      <td>1.0</td>\n      <td>57730</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>SD</td>\n      <td>1.0</td>\n      <td>SD</td>\n    </tr>\n    <tr>\n      <th>150690392</th>\n      <th>2076123604</th>\n      <td>0.992909</td>\n      <td>Lot / Land for sale</td>\n      <td>1.0</td>\n      <td>Lot / Land for sale</td>\n      <td>5 Windsor Ln, Gladstone, NJ 07934</td>\n      <td>0.936180</td>\n      <td>0 Windsor Ln, Gladstone, NJ 07934</td>\n      <td>7934</td>\n      <td>1.0</td>\n      <td>7934</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>NJ</td>\n      <td>1.0</td>\n      <td>NJ</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2070837516</th>\n      <th>2072047318</th>\n      <td>0.978032</td>\n      <td>New construction</td>\n      <td>1.0</td>\n      <td>New construction</td>\n      <td>D12C Plan, Kaikoi at Hoopili</td>\n      <td>0.802290</td>\n      <td>D12B Plan, Kaikoi at Hoopili</td>\n      <td>96706</td>\n      <td>1.0</td>\n      <td>96706</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>HI</td>\n      <td>1.0</td>\n      <td>HI</td>\n    </tr>\n    <tr>\n      <th>305578084</th>\n      <th>90035758</th>\n      <td>0.977991</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>210 N 17th St UNIT 203, Saint Louis, MO 63103</td>\n      <td>0.801920</td>\n      <td>210 N 17th St UNIT 1202, Saint Louis, MO 63103</td>\n      <td>63103</td>\n      <td>1.0</td>\n      <td>63103</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>MO</td>\n      <td>1.0</td>\n      <td>MO</td>\n    </tr>\n    <tr>\n      <th>2071195670</th>\n      <th>88086529</th>\n      <td>0.977983</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>6533 E Jefferson Ave APT 426, Detroit, MI 48207</td>\n      <td>0.801844</td>\n      <td>6533 E Jefferson Ave APT 102E, Detroit, MI 48207</td>\n      <td>48207</td>\n      <td>1.0</td>\n      <td>48207</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>MI</td>\n      <td>1.0</td>\n      <td>MI</td>\n    </tr>\n    <tr>\n      <th>247263033</th>\n      <th>247263136</th>\n      <td>0.977941</td>\n      <td>New construction</td>\n      <td>1.0</td>\n      <td>New construction</td>\n      <td>1 University Way #511, Iowa City, IA 52246</td>\n      <td>0.801474</td>\n      <td>1 University Way #503, Iowa City, IA 52246</td>\n      <td>52246</td>\n      <td>1.0</td>\n      <td>52246</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>IA</td>\n      <td>1.0</td>\n      <td>IA</td>\n    </tr>\n    <tr>\n      <th>2083656138</th>\n      <th>2083656146</th>\n      <td>0.977873</td>\n      <td>Condo for sale</td>\n      <td>1.0</td>\n      <td>Condo for sale</td>\n      <td>3789 S Anderson Dr, Terre Haute, IN 47803</td>\n      <td>0.800855</td>\n      <td>3776 S Anderson Dr, Terre Haute, IN 47803</td>\n      <td>47803</td>\n      <td>1.0</td>\n      <td>47803</td>\n      <td>false</td>\n      <td>1.0</td>\n      <td>false</td>\n      <td>IN</td>\n      <td>1.0</td>\n      <td>IN</td>\n    </tr>\n  </tbody>\n</table>\n<p>94 rows &times; 16 columns</p>\n</div>\n\n\nOne may choose to remove the field-values and output single-level column-\nheadings by setting hierarchical to `False`:  \n\n\n```python\nrecord_linkage(\n    df,\n    fields_2b_matched_fuzzily=[\n        field('statusText'),\n        field('address'),\n        field('addressZipcode', weight=2, min_similarity=0.9999),\n        field('addressState', weight=4, ngram_size=2, min_similarity=0.9999),\n        field('hasVideo', min_similarity=0.9999)\n    ],\n    hierarchical=False\n)\n```\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Weighted Mean Similarity Score</th>\n      <th>statusText</th>\n      <th>address</th>\n      <th>addressZipcode</th>\n      <th>hasVideo</th>\n      <th>addressState</th>\n    </tr>\n    <tr>\n      <th>left_zpid</th>\n      <th>right_zpid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2077667803</th>\n      <th>2077679643</th>\n      <td>1.000000</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2075244057</th>\n      <th>2075358943</th>\n      <td>0.997100</td>\n      <td>1.0</td>\n      <td>0.973904</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2077676622</th>\n      <th>2077676809</th>\n      <td>0.993867</td>\n      <td>1.0</td>\n      <td>0.944802</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2077093064</th>\n      <th>2078843498</th>\n      <td>0.993328</td>\n      <td>1.0</td>\n      <td>0.939948</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>150690392</th>\n      <th>2076123604</th>\n      <td>0.992909</td>\n      <td>1.0</td>\n      <td>0.936180</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2070837516</th>\n      <th>2072047318</th>\n      <td>0.978032</td>\n      <td>1.0</td>\n      <td>0.802290</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>305578084</th>\n      <th>90035758</th>\n      <td>0.977991</td>\n      <td>1.0</td>\n      <td>0.801920</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2071195670</th>\n      <th>88086529</th>\n      <td>0.977983</td>\n      <td>1.0</td>\n      <td>0.801844</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>247263033</th>\n      <th>247263136</th>\n      <td>0.977941</td>\n      <td>1.0</td>\n      <td>0.801474</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2083656138</th>\n      <th>2083656146</th>\n      <td>0.977873</td>\n      <td>1.0</td>\n      <td>0.800855</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>94 rows &times; 6 columns</p>\n</div>\n\n# Performance<a name=\"perf\"></a>\n\n### Plots of run-times of `record_linkage()` vs the number `n_blocks[1]` of blocks into which the right matrix-operand of the dataset (663 000 strings from sec__edgar_company_info.csv) was split before performing the string comparison.  As shown in the legend, each plot corresponds to the number `n_blocks[0]` of blocks into which the left matrix-operand was split.\n<img width=\"100%\" src=\"https://raw.githubusercontent.com/ParticularMiner/red_string_grouper/master/images/BlockNumberSpaceExploration1.png\">\n\nString comparison, as implemented by `string_grouper`, is essentially matrix \nmultiplication.  A DataFrame of strings is converted (tokenized) into a \nmatrix.  Then that matrix is multiplied by itself (or another) transposed.  \n\nHere is an illustration of multiplication of two matrices ***D*** and ***M***<sup>T</sup>:\n![Block Matrix 1 1](https://raw.githubusercontent.com/ParticularMiner/red_string_grouper/master/images/BlockMatrix_1_1.png)\n\nIt turns out that when the matrix (or DataFrame) is very large, the computer \nproceeds quite slowly with the multiplication (apparently due to the RAM being \ntoo full).  Some computers give up with an `OverflowError`.\n\nTo circumvent this issue, `red_string_grouper` allows to divide the DataFrame \ninto smaller chunks (or blocks) and multiply the chunks one pair at a time \ninstead to get the same result:\n\n![Block Matrix 2 2](https://raw.githubusercontent.com/ParticularMiner/red_string_grouper/master/images/BlockMatrix_2_2.png)\n\nBut surprise ... the run-time of the process is sometimes drastically reduced \nas a result.  For example, the speed-up of the following call is about 500% \n(here, the DataFrame is divided into 200 blocks on the right operand, that is, \n1 block on the left &times; 200 on the right) compared to the same call with no\nsplitting \\[`n_blocks=(1, 1)`, the default, which is equivalent to `match_strings`\ncall of  `string_grouper` (versions 0.5.0 and earlier)\\]:\n\n```python\n# 663000 records:\ncompanies = pd.read_csv('data/sec__edgar_company_info.csv')\n\n# the following call produces the same result as \n# string_grouper using \n# match_strings(companies['Company Name'])\n# but is more than 3 times faster!\nrecord_linkage( \n\tcompanies,\n\tfields_2b_matched_fuzzily=[field('Company Name')],\n\tn_blocks=(1, 200)\n)\n```\n\n\nFurther exploration of the block number space (see plot above) has revealed that for any fixed \nnumber of right blocks, the run-time gets longer the larger the number of left \nblocks specified.  For this reason, it is recommended *not* to split the left matrix.\n\n![Block Matrix 1 2](https://raw.githubusercontent.com/ParticularMiner/red_string_grouper/master/images/BlockMatrix_1_2.png)\n\nSo what are the optimum block number values for any given DataFrame? That is \nanyone's guess, and the answer may vary from computer to computer.  \n\nWe however encourage the user to make judicious use of the `n_blocks` \nparameter to boost performance of `record_linkage()`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ParticularMiner/red_string_grouper/archive/refs/tags/v0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ParticularMiner/red_string_grouper",
    "keywords": "record-linkage string-comparison cosine-similarity tf-idfstring_grouper sparse_dot_topn python cython",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "red-string-grouper",
    "package_url": "https://pypi.org/project/red-string-grouper/",
    "platform": "",
    "project_url": "https://pypi.org/project/red-string-grouper/",
    "project_urls": {
      "Download": "https://github.com/ParticularMiner/red_string_grouper/archive/refs/tags/v0.1.0.tar.gz",
      "Homepage": "https://github.com/ParticularMiner/red_string_grouper"
    },
    "release_url": "https://pypi.org/project/red-string-grouper/0.1.0.post5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Row Equivalence Discoverer (red) based on string_grouper. This package finds similarities between rows of one or two tables.",
    "version": "0.1.0.post5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11758767,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce76280dca9b9cccbba0e43796648de8365f7c31689ca408eb72d8b45d4dbee3",
          "md5": "806f9eb9f9d7c82accdcf24c1f75a582",
          "sha256": "064287af26423187fa02d9ffaddaf8a9a3d815f1fe5c05c6d09ab297c30c119b"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "806f9eb9f9d7c82accdcf24c1f75a582",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34880,
        "upload_time": "2021-09-16T13:00:23",
        "upload_time_iso_8601": "2021-09-16T13:00:23.022131Z",
        "url": "https://files.pythonhosted.org/packages/ce/76/280dca9b9cccbba0e43796648de8365f7c31689ca408eb72d8b45d4dbee3/red_string_grouper-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "884ac2cc312020089570df1b08fa5e42cab0598d01d7a28678ccf605f639fd90",
          "md5": "7d2d64570fd8e10c4182a60e0f56b864",
          "sha256": "4a90d3ec38657bb0ef033efa4a893df530ba52238fb7023a2126528859dabb3f"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7d2d64570fd8e10c4182a60e0f56b864",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34945,
        "upload_time": "2021-09-16T13:14:51",
        "upload_time_iso_8601": "2021-09-16T13:14:51.970306Z",
        "url": "https://files.pythonhosted.org/packages/88/4a/c2cc312020089570df1b08fa5e42cab0598d01d7a28678ccf605f639fd90/red_string_grouper-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f67862e9519a86bc15084c98b7d9652e55218c5987239b5205d3e225a1ca9544",
          "md5": "937503e31437eebb288c58e9511a1d9f",
          "sha256": "6d14900a2e040d3b4cda86b1cbe7c0d65063ca93d2a3efb628e11607c90670b5"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "937503e31437eebb288c58e9511a1d9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35023,
        "upload_time": "2021-09-16T17:31:10",
        "upload_time_iso_8601": "2021-09-16T17:31:10.950877Z",
        "url": "https://files.pythonhosted.org/packages/f6/78/62e9519a86bc15084c98b7d9652e55218c5987239b5205d3e225a1ca9544/red_string_grouper-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "957ba257adc3f29e98aa647a129274f1f15134349723407793533e8496335df0",
          "md5": "94db26c55d016602b2b625b7cc8f992b",
          "sha256": "c9cc29212c8c457ab2730d9447914a1f66d9f73e054809e806ac233dcca5111c"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94db26c55d016602b2b625b7cc8f992b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36593,
        "upload_time": "2021-09-17T07:23:08",
        "upload_time_iso_8601": "2021-09-17T07:23:08.431960Z",
        "url": "https://files.pythonhosted.org/packages/95/7b/a257adc3f29e98aa647a129274f1f15134349723407793533e8496335df0/red_string_grouper-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a31ada9389c56eda60f3cced651cab45243bee40ee6aa087ea06d49084b125",
          "md5": "dc11a47ff77ab5853fd6438c123a7bea",
          "sha256": "ea67d87fb14bb88bf8ec827d4ac3e21e0286c63d6f111409930ac13409928089"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc11a47ff77ab5853fd6438c123a7bea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37832,
        "upload_time": "2021-09-18T13:39:06",
        "upload_time_iso_8601": "2021-09-18T13:39:06.147581Z",
        "url": "https://files.pythonhosted.org/packages/c3/a3/1ada9389c56eda60f3cced651cab45243bee40ee6aa087ea06d49084b125/red_string_grouper-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a22180c4b4ea4a192e2021b9eeb9e4933589d1e90aafda4a112e1b5ead55591",
          "md5": "de0290df31cd7832cd874329852d346e",
          "sha256": "bb09ce2269d44d1965e391296523b994eb659d6b044325f83f7889878e1abe7d"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "de0290df31cd7832cd874329852d346e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37882,
        "upload_time": "2021-09-18T18:33:21",
        "upload_time_iso_8601": "2021-09-18T18:33:21.349289Z",
        "url": "https://files.pythonhosted.org/packages/1a/22/180c4b4ea4a192e2021b9eeb9e4933589d1e90aafda4a112e1b5ead55591/red_string_grouper-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e1ba77ec9788d992d308cc6035ce8c406df89cdbb852ec7e521639442e2c21e",
          "md5": "fed9ad3fd72506679c7adc44dc06f829",
          "sha256": "ff5f7daf029d8088de25c878d58f798535fcf503a5388f939107f80f06360564"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fed9ad3fd72506679c7adc44dc06f829",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37663,
        "upload_time": "2021-09-19T11:46:49",
        "upload_time_iso_8601": "2021-09-19T11:46:49.419439Z",
        "url": "https://files.pythonhosted.org/packages/0e/1b/a77ec9788d992d308cc6035ce8c406df89cdbb852ec7e521639442e2c21e/red_string_grouper-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "161269491b6e20d579f6436cecf2065c9281d7dcde3503e149453c1466ef8474",
          "md5": "28651ce0f48940dba045a53e20d6a9b5",
          "sha256": "7feb0edb056633832aa94e3bdc12a4546811cf2a32211386b8e5bb5838511122"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "28651ce0f48940dba045a53e20d6a9b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37658,
        "upload_time": "2021-09-19T14:14:12",
        "upload_time_iso_8601": "2021-09-19T14:14:12.360201Z",
        "url": "https://files.pythonhosted.org/packages/16/12/69491b6e20d579f6436cecf2065c9281d7dcde3503e149453c1466ef8474/red_string_grouper-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bdb8ea0bcde107602616d357e80ed304d8bf96fa6fab4d232faddd9f042370c",
          "md5": "8d9f3dbaa8f75b5bebe528c784bf8dfe",
          "sha256": "d0d244751f32f84f7c35726714ff530f8961538394358093df9e998dd648710e"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8d9f3dbaa8f75b5bebe528c784bf8dfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37694,
        "upload_time": "2021-09-20T14:06:39",
        "upload_time_iso_8601": "2021-09-20T14:06:39.524346Z",
        "url": "https://files.pythonhosted.org/packages/6b/db/8ea0bcde107602616d357e80ed304d8bf96fa6fab4d232faddd9f042370c/red_string_grouper-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaeaee97296e3444a4304ba076bb917509c32e868106bf1852b49ab729e4771c",
          "md5": "8b7c288cc1c3df242ee45defeab750bd",
          "sha256": "d131d6ed85fea766d8176ec7edc1d4760e195e9f94613cb756b07592c490eb34"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b7c288cc1c3df242ee45defeab750bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40128,
        "upload_time": "2021-10-10T21:32:36",
        "upload_time_iso_8601": "2021-10-10T21:32:36.970213Z",
        "url": "https://files.pythonhosted.org/packages/ea/ea/ee97296e3444a4304ba076bb917509c32e868106bf1852b49ab729e4771c/red_string_grouper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40c7cf9a329818bac6bf6985bd13ab9941fb9dd4c51df404d951cc778c2e853a",
          "md5": "254dbf1997e0aaa83dd3ea7352b48e9a",
          "sha256": "b64adb6b330fe8a639ebd6adbdb9168bbdc4a01f5edda2fe802c5fc60072b559"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "254dbf1997e0aaa83dd3ea7352b48e9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40990,
        "upload_time": "2021-10-11T12:53:41",
        "upload_time_iso_8601": "2021-10-11T12:53:41.917746Z",
        "url": "https://files.pythonhosted.org/packages/40/c7/cf9a329818bac6bf6985bd13ab9941fb9dd4c51df404d951cc778c2e853a/red_string_grouper-0.1.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaa8149e21b09c937b9e33d09bc4f2584d155722c01234f351dd035dc729c6fa",
          "md5": "9737f0c0c56586dbac727d281e9a261f",
          "sha256": "75ae5022ef35ebe0550a1c9f92840614ab2697449c4d687b9b4be9431863363f"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "9737f0c0c56586dbac727d281e9a261f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42253,
        "upload_time": "2021-10-12T15:10:45",
        "upload_time_iso_8601": "2021-10-12T15:10:45.536967Z",
        "url": "https://files.pythonhosted.org/packages/aa/a8/149e21b09c937b9e33d09bc4f2584d155722c01234f351dd035dc729c6fa/red_string_grouper-0.1.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d19b25288267699a82827fc1f7daaef492902fe0ada28fddc0ce23976edc500",
          "md5": "8201dedcdc237054bcfede117862010f",
          "sha256": "581463f0a36374ed59a8349e9f55e4ba43607d94f69e607263382604be925a71"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.post3.tar.gz",
        "has_sig": false,
        "md5_digest": "8201dedcdc237054bcfede117862010f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42279,
        "upload_time": "2021-10-12T15:31:18",
        "upload_time_iso_8601": "2021-10-12T15:31:18.102004Z",
        "url": "https://files.pythonhosted.org/packages/6d/19/b25288267699a82827fc1f7daaef492902fe0ada28fddc0ce23976edc500/red_string_grouper-0.1.0.post3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6538a07407a27b6f853fb3eed25d05fd70f30c02635eca85f56c9e237ad87b3",
          "md5": "0e37bceba38f85faa5811dee064e178a",
          "sha256": "bbe2c1612e0fb05c2314d7210e6a29375d3b419b703dbd704c0d83cedc69eeda"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.post4.tar.gz",
        "has_sig": false,
        "md5_digest": "0e37bceba38f85faa5811dee064e178a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42667,
        "upload_time": "2021-10-12T15:58:47",
        "upload_time_iso_8601": "2021-10-12T15:58:47.837028Z",
        "url": "https://files.pythonhosted.org/packages/e6/53/8a07407a27b6f853fb3eed25d05fd70f30c02635eca85f56c9e237ad87b3/red_string_grouper-0.1.0.post4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85d631cb38527af21b9e1571325ee7f009159a11135641f52e77a141ef694569",
          "md5": "984fe7bddad23a92cc44dc44a6ad1095",
          "sha256": "736bd61ee4d8072dba2cc3f73c561457c4e94e14682c16e7766d61d5c8d209f4"
        },
        "downloads": -1,
        "filename": "red_string_grouper-0.1.0.post5.tar.gz",
        "has_sig": false,
        "md5_digest": "984fe7bddad23a92cc44dc44a6ad1095",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42675,
        "upload_time": "2021-10-18T15:21:25",
        "upload_time_iso_8601": "2021-10-18T15:21:25.353020Z",
        "url": "https://files.pythonhosted.org/packages/85/d6/31cb38527af21b9e1571325ee7f009159a11135641f52e77a141ef694569/red_string_grouper-0.1.0.post5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85d631cb38527af21b9e1571325ee7f009159a11135641f52e77a141ef694569",
        "md5": "984fe7bddad23a92cc44dc44a6ad1095",
        "sha256": "736bd61ee4d8072dba2cc3f73c561457c4e94e14682c16e7766d61d5c8d209f4"
      },
      "downloads": -1,
      "filename": "red_string_grouper-0.1.0.post5.tar.gz",
      "has_sig": false,
      "md5_digest": "984fe7bddad23a92cc44dc44a6ad1095",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42675,
      "upload_time": "2021-10-18T15:21:25",
      "upload_time_iso_8601": "2021-10-18T15:21:25.353020Z",
      "url": "https://files.pythonhosted.org/packages/85/d6/31cb38527af21b9e1571325ee7f009159a11135641f52e77a141ef694569/red_string_grouper-0.1.0.post5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}