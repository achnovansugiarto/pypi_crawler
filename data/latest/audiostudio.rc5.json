{
  "info": {
    "author": "Daniel Rabayda",
    "author_email": "rabaydadp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# AudioStudio\nby Daniel Rabayda\n### A pip package that makes quick work of converting time-series data into spectrograms as well as playable audio\n\n\nHere is a list of the functions as well as explanations for each in a shortened list:\n\nflat(bl)\nflattens a list of lists into just a list\n\ni_str(i)\nmakes 0,1,2,...13,14,etc into 00,01,02,...,13,14,etc for file saving purposes\n\nreduce_seq(s,xlr)\ntakes in a sequence and reduces it to a 1d list only if it is 2d and based on the LRB parameter\n\nnormalize_seq(s)\nnormalizes sequence s to 0 to 1\n\nxlr(lrb)\nused to read the left or right audio parameter quickly, options for lrb are \"L\", \"R\", and any other string like \"B\" which will default to both channels\n\npydub_to_np(audio, r_smp=44100)\nConverts pydub audio segment into np.float32 of shape [duration_in_seconds*sample_rate, channels], where each value is in range [-1.0, 1.0]. Returns audio_np_array\n\nsequence_to_spectrogram(s,r_smp,v_res,f_len,t_len)\ntakes in a sequence (1 ch) and ouputs it as a log spectrogram in greyscale (1 ch)\n\nnorm_seq_to_spg(s,r_smp,v_res,f_len,t_len,filt)\ntakes in raw sample data s, normalizes it, creates a spectrogram from it, then returns a normalized spectrogram\n\nnormalize_spectrogram(sp)\nnormalizes a spectrogram sp to a range 0 to 1\n\nquick_spectrogram(s,r_smp=44100,v_res=2**9)\nuses default values for everything so you only need to give it a segment of samples\n\nquick_sound(s,r_smp=44100)\nmake an Audiosegment from a sequence\n\nquick_plot(sp)\nmake a quick plot using default values\n\nquick_example(s,r_smp=44100)\ndoes a quickplot for sequence s and shows a play and save button to play or save the audio of that sequence\n\ndecimate(s,new_rate,old_rate=44100)\nrough downsampling from one freq to a new lower one, I made this becasue scipy.signal.decimate only does integer downsampling, mine is general\n\nlengthwise_median_filter(sp,res,stride=1) \nmedian filter in only the lengthwise direction for a greyscale spectrogram. the resolution is the number of pixels lengthwise to include in the filter.\n\nmultiple_filter(funcs,params,ai) \niterates one function f at a time to make f(f(f(a,pi))), where params=[p1,p2,p3]. The number of iterations equal to the length of params & funcs arrays. Available funcs are 'm' (median filter), 'g' (gaussian filter), and 'l' (lengthwise median filter), the params for these specifically are integer filter resolutions.\n\nvdir(directory)\nverify a directory exists, if not make it\n\nvdirs(directory1,directory2)\njust does vdir(os.path.join(directory1,directory2))\n\nvdir_batch(dirs): #batch creates dirs in the current directory and returns a tuple of strings representing their locations\n\n\n### 0.0.4\nvdirs_batch(parent_dir,subdirs): #batch creates dirs in the parent directory and returns a tuple of strings representing their locations\n\ndropout_filter(sp,thr=0.75): #a filter that drops any pixel values below the threshold thr down to 0, e.g. [0,0.3,0.7,0.8,0.3] would become [0,0,0,0.8,0] for thr=0.75\n\nget_spectrogram_dims(pdict): #returns the default spectrogram dims for a given pdict using scipy's values unless the dims are resized using pdict['rd']\n\nattempt_instantiation(pdict,param_str,except_val): #attempts instantiating param = pdict[param_str] and if there is no pdict entry it sets param=except_val\n\naverage_frequency_band_filter(data, pdict): #creates a custom bandpass filter using a spectrogram of the entire data file data_array[dind]=data\n\nscale_arr(arr,sc): #same as decimate but with a range of sc=0.0001 to 1\n\nplace_arr(arr,new_size,spos,fill): #places arr inside a new_arr with length new_size>old_size at position spos (0 to 1)\n\nscpl_sp(sp,scales,places): #scale and place spectrogram columns according to set parameters\n\nrandom_augmenter(sp,deg,sig_prob=0.5): #automatically augments spectrogram sp using sigmoid, linear, expansion and contraction with a degree from 0 to 1 and a probability of sigmoid placements as sig_prob\n\nget_lengths_under_ws(lengths,r_smp,w): #grabs a reverse list of length indices for lengths less than w seconds\n\npop_lengths_under_ws(metadata,r_smp,w): #pops lengths under w seconds\n\nlabels_to_labels_c(labels,classes): #converts raw labels into indices referencing classes\n\nclass_grouper(labels_c,times,n_classes): #returns class-grouped metadata (metadata grouped by class). e.g. class_groups[3] contains all the [file, [time]] references for class 3\n\ncg_splitter(class_groups,split): #splits class_groups into train, validation, and test sets\n\nequalize_class_groups(class_groups): #Our generator picks from all available classes with equal probability, so this is a bit unnecessary, only needed if you want to do a final test or validate against research data (like the drone data)\n\n#legacy: genC_plot(nP,nK,spectrograms,ls,classes,sps=[],files_as_labels=True): #plots generatorC's output\n\n# 0.0.5\ndef plot_generator(pdict,spectrograms,ls,classes,sps=[],files_as_labels=True): #replaces genC_plot, plots generator's output\nbatch_attempt_instantiation(pdict,params,exceptions): #attempt_instantiation on a batch \nparam2name(pdict): #takes in pdict and generates a name string\nname2param(name): #takes in the name string and returns a pdict\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danrabayda/AudioStudio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "AudioStudio",
    "package_url": "https://pypi.org/project/AudioStudio/",
    "platform": null,
    "project_url": "https://pypi.org/project/AudioStudio/",
    "project_urls": {
      "Homepage": "https://github.com/danrabayda/AudioStudio"
    },
    "release_url": "https://pypi.org/project/AudioStudio/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for working with audio data",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14801882,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b4e46f3efee2f009f9aa0d6036f05494e7ce7fdf170724e0e3a0ffc27ebe82",
          "md5": "36b9c40130a28e0a688dacf20347ec0d",
          "sha256": "f90b9f6edecdc496f2c93e06279d5eff6b01a2ede20b8bf2a707d583cc830b9c"
        },
        "downloads": -1,
        "filename": "AudioStudio-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36b9c40130a28e0a688dacf20347ec0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4555,
        "upload_time": "2022-07-14T18:22:43",
        "upload_time_iso_8601": "2022-07-14T18:22:43.227974Z",
        "url": "https://files.pythonhosted.org/packages/b7/b4/e46f3efee2f009f9aa0d6036f05494e7ce7fdf170724e0e3a0ffc27ebe82/AudioStudio-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a7b01d6e2d48e20e4759ab8d0a64d30e0055517268c0261f84091b80ff1572c",
          "md5": "2ebea982997ae8c1d9630830cb552e90",
          "sha256": "9dcf10cde6cef83ce0791af7330e610748a8481d126c81d1a1d7288cb50f9d66"
        },
        "downloads": -1,
        "filename": "AudioStudio-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2ebea982997ae8c1d9630830cb552e90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5144,
        "upload_time": "2022-07-15T13:02:31",
        "upload_time_iso_8601": "2022-07-15T13:02:31.192377Z",
        "url": "https://files.pythonhosted.org/packages/7a/7b/01d6e2d48e20e4759ab8d0a64d30e0055517268c0261f84091b80ff1572c/AudioStudio-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23e9a6696cf4018e0cac1e261593599a6e8f6fade62c182c4402376db0270482",
          "md5": "1ae51267694ce4fe46da9a2b8085470e",
          "sha256": "ea1d866f6c11919d0a6f68c76b0199e1620f3637e5dae7510a3ec5276f95f90d"
        },
        "downloads": -1,
        "filename": "AudioStudio-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ae51267694ce4fe46da9a2b8085470e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8107,
        "upload_time": "2022-08-12T13:25:00",
        "upload_time_iso_8601": "2022-08-12T13:25:00.009397Z",
        "url": "https://files.pythonhosted.org/packages/23/e9/a6696cf4018e0cac1e261593599a6e8f6fade62c182c4402376db0270482/AudioStudio-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "effd5d88d3c9a4caf6b5ed2f3d572a90946308f6874d5860b9f6d1597850fd1d",
          "md5": "20b1a9d99fda41e0cdc52a7b78783ed4",
          "sha256": "eb2cadb9ad8df5c3b39f0a3ab55e6f5b393b37ad6b18babdd1b979cc4a863ace"
        },
        "downloads": -1,
        "filename": "AudioStudio-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "20b1a9d99fda41e0cdc52a7b78783ed4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8093,
        "upload_time": "2022-08-12T13:32:50",
        "upload_time_iso_8601": "2022-08-12T13:32:50.069162Z",
        "url": "https://files.pythonhosted.org/packages/ef/fd/5d88d3c9a4caf6b5ed2f3d572a90946308f6874d5860b9f6d1597850fd1d/AudioStudio-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5947c3d10dbae7d1d2e6bf615635662497a8892df8941db8feb10e6accc76ba6",
          "md5": "606c80d9dd3846252175c6aebba23ce4",
          "sha256": "78d3ce9713e698dd4934e0a86c1ceb3f5d41c153b10c2f9e4db4b3fec0dfb28a"
        },
        "downloads": -1,
        "filename": "AudioStudio-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "606c80d9dd3846252175c6aebba23ce4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8571,
        "upload_time": "2022-08-18T13:45:00",
        "upload_time_iso_8601": "2022-08-18T13:45:00.166024Z",
        "url": "https://files.pythonhosted.org/packages/59/47/c3d10dbae7d1d2e6bf615635662497a8892df8941db8feb10e6accc76ba6/AudioStudio-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5947c3d10dbae7d1d2e6bf615635662497a8892df8941db8feb10e6accc76ba6",
        "md5": "606c80d9dd3846252175c6aebba23ce4",
        "sha256": "78d3ce9713e698dd4934e0a86c1ceb3f5d41c153b10c2f9e4db4b3fec0dfb28a"
      },
      "downloads": -1,
      "filename": "AudioStudio-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "606c80d9dd3846252175c6aebba23ce4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8571,
      "upload_time": "2022-08-18T13:45:00",
      "upload_time_iso_8601": "2022-08-18T13:45:00.166024Z",
      "url": "https://files.pythonhosted.org/packages/59/47/c3d10dbae7d1d2e6bf615635662497a8892df8941db8feb10e6accc76ba6/AudioStudio-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}