{
  "info": {
    "author": "Fernando Garcia",
    "author_email": "fernando.garciagu@alumnos.upm.es",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyWinEA\n\n[![Contributors][contributors-shield]][contributors-url]\n[![Forks][forks-shield]][forks-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n[![MIT License][license-shield]][license-url]\n[![LinkedIn][linkedin-shield]][linkedin-url]\n<br />\n<p align=\"center\">\n\t<img src=\"https://github.com/FernandoGaGu/pywinEA/blob/master/img/PyWinEA_logo.gif\" alt=\"Logo\">\n</p>\n\n> Python package with lightweight implementations of genetic algorithms for classification/regression tasks.\n\n## Description\n\nThe pywinEA module is a native python implementation of some of the most widely used genetic algorithms. \nThis package has been developed on the top of scikit-learn which allows to use any model already implemented. This module aims to provide a good alternative to other feature selection techniques with full scikit-learn compatibility.\n\n**Why evolutionary algorithms?**\n\nOne of the first stages in the development of any machine learning model is to filter out redundant and/or irrelevant attributes. However, the complexity of finding the best combination of attributes is most often an NP problem.\n\nAmong the most frequent feature selection strategies are embedded methods. These methods combine a heuristic search strategy with a classification/regression model. This is where genetic algorithms come into play. This type of strategy represents one of the best alternatives to address the immense search space generally reaching good solutions.\n\n## Install\n\n### Dependencies\n\nPyWinEA requires:\n- Python (>= 3.6)\n- NumPy (>= 1.13.3)\n- SciPy (>= 0.19.1)\n- Scikit-learn (>= 0.20.0)\n- tqdm (>= 4.42.1)\n- matplotlib (>= 3.1.3)\n- pandas (>= 1.0.1)\n\n```sh\npip install pywinEA\n```\nIt is possible that older versions of the packages listed above may work. However, full compatibility is not guaranteed.\n\n## Usage\n\nExamples of the basic use of the package can be found in the notebooks directory. A diagram of the module structure is also shown below. For more advanced use it is recommended to look at the documentation. \n\nAdditionally by using the classes defined in the interface subpackage it is possible to implement new operators, algorithms, etc. Feel free to add things.\n\nThe following is an example of the most basic implementation of a genetic algorithm.\n```python\n#Â Basic GA\nfrom pywinEAt.algorithm import GA\nfrom sklearn.naive_bayes import GaussianNB  #Â Fitness function\n\n#Â Data loading and processing...\n\nPOPULATION_SIZE = 50\nGENERATIONS = 200\nFITNESS = GaussianNB()\nCV = 5\nANNHILATION = 0.1\nELITISM = 0.2\nMUTATION = 0.1\n\nga_basic = GA(\n    population_size=POPULATION_SIZE, generations=GENERATIONS, cv=CV,\n    fitness=FITNESS, annihilation=ANNHILATION, elitism=ELITISM, \n    mutation_rate=MUTATION, positive_class=1, id=\"BasicGA\"\n)\n\nga_basic.set_features(feature_names)   # Selection of the feature names (optional)\n\n#Â Fit algorithm \nga_basic.fit(x_data, y_data) \n\n#Â Get the names of the most relevant features\nga_basic.best_features \n```\n<br />\n<p align=\"center\">\n\t<img src=\"https://github.com/FernandoGaGu/pywinEA/blob/master/img/basic-example.gif\" alt=\"Example\">\n</p>\n\nThis type of algorithm usually works well, however we may be interested in maximizing two objectives, for example the performance of the classifier (maximization) and the number of characteristics (minimization). In this case the multi-target algorithms (NSGA2 and SPEA2) are the best alternative.\n\n```python\n#Â Multi-objective\nfrom pywinEA.algorithm import NSGA2\nfrom sklearn.naive_bayes import GaussianNB  #Â Fitness function\n\n#Â Data loading and processing...\n\nPOPULATION_SIZE = 50\nGENERATIONS = 200\nFITNESS = GaussianNB()\nCV = 5\nMUTATION = 0.1\n\nnsga = NSGA2(\n    population_size=POPULATION_SIZE, generations=GENERATIONS, \n    fitness=FITNESS, cv=CV, mutation_rate=MUTATION, \n    optimize_features=True, positive_class=1, id=\"NSGA2\"\n)\n\nnsga.set_features(feature_names)   # Selection of the feature names (optional)\n\n#Â Fit algorithm \nnsga.fit(x_data, y_data) \n\n#Â Get the names of the most relevant features\nnsga.best_features \n```\nThe result of the multi-objective algorithms is a non-dominant front of solutions. For example:\n\n<br />\n<p align=\"center\">\n\t<img src=\"https://github.com/FernandoGaGu/pywinEA/blob/master/img/Pareto-front-example.png\" alt=\"Example\">\n</p>\n\nFor more examples it is recommended to take a look at the [notebooks](https://github.com/FernandoGaGu/pywinEA/tree/master/notebooks/).\n\n## Module structure\n\n<br />\n<p align=\"center\">\n\t<img src=\"https://github.com/FernandoGaGu/pywinEA/blob/master/img/PyWinEAStructure.png\" alt=\"Structure\">\n</p>\n\n\n## Notes\n\nThe package is still in testing, it is possible to find some unexpected errors. Any problem ðŸ‘‰  <a href=\"https://github.com/FernandoGaGu/pywinEA/issues\"> issues </a>\n\n\n\n## License\n\n[MIT](LICENSE) Â© \n\n[contributors-shield]: https://img.shields.io/github/contributors/FernandoGaGu/pywinEA.svg?style=flat-square\n[contributors-url]: https://github.com/FernandoGaGu/pywinEA/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/FernandoGaGu/pywinEA.svg?style=flat-square\n[forks-url]: https://github.com/FernandoGaGu/pywinEA/network/members\n[stars-shield]: https://img.shields.io/github/stars/FernandoGaGu/pywinEA.svg?style=flat-square\n[stars-url]: https://github.com/FernandoGaGu/pywinEA/stargazers\n[issues-shield]: https://img.shields.io/github/issues/FernandoGaGu/pywinEA.svg?style=flat-square\n[issues-url]: https://github.com/FernandoGaGu/pywinEA/issues\n[license-shield]: https://img.shields.io/github/license/FernandoGaGu/pywinEA.svg?style=flat-square\n[license-url]: https://github.com/FernandoGaGu/pywinEA/blob/master/LICENSE\n[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555\n[linkedin-url]: https://linkedin.com/in/GarciaGu-Fernando\n[product-screenshot]: img/PyWinEAlogo.png\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FernandoGaGu/pywinEA",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pywinEA",
    "package_url": "https://pypi.org/project/pywinEA/",
    "platform": "",
    "project_url": "https://pypi.org/project/pywinEA/",
    "project_urls": {
      "Homepage": "https://github.com/FernandoGaGu/pywinEA"
    },
    "release_url": "https://pypi.org/project/pywinEA/0.0.2/",
    "requires_dist": [
      "numpy",
      "sklearn",
      "tqdm",
      "pandas",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Package with basic implementations of mono and multi-objective genetic algorithms for feature selection.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7685826,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6acaa83630a0f49384ab1820473c8153d64f23cb987987c6d14b13b74c8660b1",
          "md5": "8ad406a17661af48d44ac45ab0d5be25",
          "sha256": "cecc61a557e6bb5d63902e9320c97970ea8ddab9940105d97ea4194824fa7e2b"
        },
        "downloads": -1,
        "filename": "pywinEA-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ad406a17661af48d44ac45ab0d5be25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 115887,
        "upload_time": "2020-06-14T09:52:51",
        "upload_time_iso_8601": "2020-06-14T09:52:51.829554Z",
        "url": "https://files.pythonhosted.org/packages/6a/ca/a83630a0f49384ab1820473c8153d64f23cb987987c6d14b13b74c8660b1/pywinEA-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d44b75bac84841de32a33f42654d64c96e0a77994145c14316dbb7b0e384381b",
          "md5": "7becbd07fac2e14d4525562c53f95b6f",
          "sha256": "f55840c4bf45a1b5bea937ddab3d59b353edf34fae07b73edc2a5fb4d77ace80"
        },
        "downloads": -1,
        "filename": "pywinEA-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7becbd07fac2e14d4525562c53f95b6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 99023,
        "upload_time": "2020-06-14T09:52:55",
        "upload_time_iso_8601": "2020-06-14T09:52:55.192138Z",
        "url": "https://files.pythonhosted.org/packages/d4/4b/75bac84841de32a33f42654d64c96e0a77994145c14316dbb7b0e384381b/pywinEA-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad79dae2eb1be29a3234e0dd6709a9edcafa4b083acbbe3ec518159e13f5f29a",
          "md5": "a77f151d7928e796944193acbf576420",
          "sha256": "6872e7bf8ed99b8edd2c121cd8a93a211c10758ae1ace43a6cbf4f7e413cc157"
        },
        "downloads": -1,
        "filename": "pywinEA-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a77f151d7928e796944193acbf576420",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 116368,
        "upload_time": "2020-07-12T17:07:03",
        "upload_time_iso_8601": "2020-07-12T17:07:03.886783Z",
        "url": "https://files.pythonhosted.org/packages/ad/79/dae2eb1be29a3234e0dd6709a9edcafa4b083acbbe3ec518159e13f5f29a/pywinEA-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad79dae2eb1be29a3234e0dd6709a9edcafa4b083acbbe3ec518159e13f5f29a",
        "md5": "a77f151d7928e796944193acbf576420",
        "sha256": "6872e7bf8ed99b8edd2c121cd8a93a211c10758ae1ace43a6cbf4f7e413cc157"
      },
      "downloads": -1,
      "filename": "pywinEA-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a77f151d7928e796944193acbf576420",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 116368,
      "upload_time": "2020-07-12T17:07:03",
      "upload_time_iso_8601": "2020-07-12T17:07:03.886783Z",
      "url": "https://files.pythonhosted.org/packages/ad/79/dae2eb1be29a3234e0dd6709a9edcafa4b083acbbe3ec518159e13f5f29a/pywinEA-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}