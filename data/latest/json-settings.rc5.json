{
  "info": {
    "author": "Riskaware Ltd",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# json-settings \n\njson-settings is a Python framework for JSON configuration file handling. It\nprovides the following features\n\n- Define a nested Python class structure that mirrors the desired configuration\n  file. \n- Automatic type checking. \n- Implicit recursive error messaging that provides human readable information on\n  the location and nature of an error in a configuration file.\n- Easy and adaptable value bounding validation.\n- Array and range support for numerical values.\n- Ability to convert a setting object with range values into a multidimensional\n  array of the settings object with singular values for each setting.\n\n# Contents\n- [json-settings](#json-settings)\n- [Contents](#contents)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n  - [Primitive-Types](#primitive-types)\n  - [Reference-Types](#reference-types)\n  - [Null-Types](#null-types)\n  - [Terminus-Setting](#terminus-setting)\n  - [Setting-Error-Messages](#setting-error-messages)\n  - [Number-Settings](#number-settings)\n    - [Spaces](#spaces)\n    - [Range-Matching](#range-matching)\n  - [String-Set-Settings](#string-set-settings)\n  - [List-Settings](#list-settings)\n  - [Dictionary-Settings](#dictionary-settings)\n\n\n# Installation \n\nInstall the json-settings package with the command `pip install json_settings`.\n\n# Getting Started\n\n## Primitive-Types\n\nWe would like to create a simple configuration file, my_json_config_file.json,\nwith a single setting that is an integer. The JSON file will look like this:\n\n```json\n{\n    \"my_integer\": 1\n}\n```\n\nSo we use the basic unit of json_settings, the `Settings` base class, to define\na new `Settings` derived class\n```python\nimport json\n\nfrom json_settings import Settings\n\nclass MyCoolSetting(Settings):\n\n    @Settings.assign\n    def __init__(self, value: dict):\n        self.my_integer = int\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    my_cool_setting = MyCoolSetting(values)\n\n    print(my_cool_setting.my_integer)\n    print(type(my_cool_setting.my_integer))\n```\n\nIf we run the Python above the output will be\n```\n1\n<class `int`>\n```\nA few things to note:\n\n- All user defined settings classes must call their base class' `assign`\ndecorator on the `__init__` method.\n- All user define settings class' `__init__` method take a single argument (in\n  addition to `self`).\n- All settings defined in the `__init__` method must be equal to their required type.\n- Any variables defined in the `__init__` method will be enforced at runtime.\n- JSON entries cannot contain hyphens in their id string.\n\n## Reference-Types\n\nWe now want to have a settings file that is more complex. The configuration file\nwill look like this:\n\n```json\n{\n    \"footware\": {\n        \"type\": \"formal\",\n        \"quantity\": 2\n    },\n    \"gloves\": true\n}\n```\n\nThe corresponding Python class structure is as follows:\n```python\nimport json\n\nfrom json_settings import Settings\n\nclass FootwareSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.type = str\n        self.quantity = int\n\n\nclass MyCoolSetting(Settings):\n\n    @Settings.assign\n    def __init__(self, value: dict):\n        self.footware = FootwareSettings \n        self.gloves = bool\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    my_cool_setting = MyCoolSetting(values)\n\n    print(my_cool_setting.footware.type)\n    print(my_cool_setting.footware.quantity)\n    print(my_cool_setting.gloves)\n```\n\nIf we run the Python above the output will be\n```\nformal\n2\nTrue\n```\n\nThis nesting can be of an arbitrary depth, and all error handling is automatic\nand recursive, allowing for easy construction of complex configuration files.\n\n## Null-Types\n\nThe standard json package converts `null` values to `None` type values. By\ndefault `Settings` derived classes will assign `None` regardless of the required\ntype. This can be restricted by using a `TerminusSetting` derived type.\n\n## Terminus-Setting\n\nSometimes we need to define a setting which has more rigorous constraints. To do\nthis we define a `TerminusSetting` derived class.\n\nWe want to define a setting that is the name of a king, however we require that\nit starts with \"king_\".\n\n```json\n{\n    \"my_king\": \"king_james\"\n}\n```\n\nThe corresponding Python class structure is as follows:\n```python\nimport json\n\nfrom json_settings import TerminusSetting\nfrom json_settings import Settings \n\nclass MyCoolSetting(Settings):\n\n    @Settings.assign\n    def __init__(self):\n        self.my_king = KinglyName\n\n\nclass KinglyName(TerminusSetting):\n\n    @TerminusSetting.assign\n    def __init__(self, value: dict):\n        self.type = str\n\n    def check(self):\n        if not self.value.startswith(\"king_\"):\n            raise ValueError('Name must start with \"king_\"')\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    my_kingly_setting = MyCoolSetting(values)\n\n    print(my_kingly_setting.my_king)\n```\n\nIf we run the Python above the output will be\n```\nking_james\n```\n\nA few things to note:\n\n- TerminusSetting derived classes must define only one attribute `type` in the\n  `__init__` method, which is the type of the variable stored.\n- The abstract `check` method must be defined for all TerminusSetting derived\n  classes.\n- The check method will catch `ValueError` and `TypeError` and raise\n  `SettingCheckError`, which in turn is caught by the enclosing `Settings`\n  derived instance and raised as a `SettingErrorMessage`.\n- The value of the setting in a `TerminusSetting` derived class is stored in the\n  `value` attribute.\n- When an attribute of a `Settings` object which is a `TerminusSetting` derived\n  type is accessed, the value stored in the `TerminusSetting` derived instances\n  is returned, NOT the `TerminusSettings` derived instance itself.\n\n## Setting-Error-Messages\n\nOne of the key features of json_settings is the recursive exception handling. To\ndemonstrate we define the following configuration file and corresponding Python\nclass structure\n\n```json\n{\n    \"first\": {\n        \"second\": {\n            \"fourth\": 1,\n            \"fith\": \"fith\"\n        },\n        \"third\": false\n    }\n}\n```\n\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import TerminusSetting\nfrom json_settings import SettingErrorMessage\n\nclass MainSettings(Settings):\n    @Settings.assign\n    def __init__(self, values):\n        self.first = SecondSettings\n\n\nclass SecondSettings(Settings):\n    @Settings.assign\n    def __init__(self, values):\n        self.second = FinalSettings\n        self.third = bool\n\n\nclass FinalSettings(Settings):\n    @Settings.assign\n    def __init__(self, values):\n        self.fourth = int\n        self.fith = FithSetting\n\n\nclass FithSetting(TerminusSetting):\n    @TerminusSetting.assign\n    def __init__(self, value):\n        self.type = str\n\n    def check(self):\n        if \"f\" not in self.value:\n            raise ValueError('Must contain the letter \"f\"')\n\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings= MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n```\n\nInstead of running the above code with the correct JSON configuration file, we\nwill use the following, which contains an error\n\n```json\n{\n    \"first\": {\n        \"second\": {\n            \"fourth\": 1,\n            \"fith\": \"badger\"\n        },\n        \"third\": false\n    }\n}\n```\n\nRunning the above code will yield the following output\n```\nfirst -> second -> fith -> Must contain the letter \"f\"\n```\n\nIf we have an error in a different setting like so\n\n```json\n{\n    \"first\": {\n        \"second\": {\n            \"fourth\": 1,\n            \"fith\": \"fith\"\n        },\n        \"third\": 1\n    }\n}\n```\n\nwe get the following error message\n```\nfirst -> third -> Expecting : <class 'bool'> | Received: <class 'int'>\n```\n\nIn each case the location and nature of the error in the configuration file is\nindicated in the error message yielded to the user.\n\n## Number-Settings\n\njson_settings provides a special base class for numerical settings.\n`NumberSettings` is itself derived from `TerminusSetting`, but with some extra\nfunctionality.\n\nImagine we wish to create a settings object with a `float` setting, that must be\ngreater than or equal to zero:\n\n```json\n{\n    \"important_number\": 1.0\n}\n\n```\n\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import NumberSetting \nfrom json_settings import SettingErrorMessage\n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.important_number = ImportantNumberSetting\n\n\nclass ImportantNumberSetting(NumberSetting):\n    @NumberSetting.assign\n    def __init__(self, value):\n        self.type = float\n\n    def check(self):\n        self.lower_bound(0.0)\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    print(f\"Important Number is: {my_cool_settings.important_number})\n```\n\nNotes:\n\n- `NumberSetting` comes with several inbuild check methods for enforcing\n  numberical bounds\n  - `lower_bound`\n  - `upper_bound`\n  - `lower_bound_exclusive`\n  - `upper_bound_exclusive`\n\nRunning the above code will return\n```\nImportant Number is: 1.0\n```\n\nHowever `NumberSetting` derived settings objects also accept array and range\ndefinitions. For example, if we use the following configuration file\n\n```json\n{\n    \"important_number\": {\n        \"array\": [1.0, 2.0, 3.0]\n    } \n}\n```\n\nwe get the following output\n```\nImportant Number is: [1.0, 2.0, 3.0]\n```\n\nWe also note that if one of entries in the array does not satisfy the range\ncondition we get the following output\n\n```\nimportant_number -> must be >= 0.\n```\n\nWe can also define a set of values in the following way\n\n```json\n{\n    \"important_number\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num\": 6\n    }\n}\n\n```\n\nwhich gives the following output\n\n```\nImportant Number is: [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]\n```\n\nwhere we can see a linear space has been created over the defined range.\n\nErrors in the range definition are caught and yielded to the user such as\n\n```\nimportant_number -> No 'min' parameter provided for range\n```\n\nNote:\n\n- The order of the range or array does not matter.\n\n### Spaces\n\nConsider a situation where we have some `NumberSetting` settings in our\nconfiguration file\n\n```json\n{\n    \"primary_number\": {\n        \"array\": [1.0, 2.0, 3.0]\n    },\n    \"secondary_number\": {\n        \"min\": 4.0,\n        \"max\": 6.0,\n        \"num\": 3\n    }\n}\n```\n\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import NumberSetting \nfrom json_settings import SettingErrorMessage\n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.primary_number = ImportantNumberSetting\n        self.secondary_number = ImportantNumberSetting\n\n\nclass ImportantNumberSetting(NumberSetting):\n    @NumberSetting.assign\n    def __init__(self, value):\n        self.type = float\n\n    def check(self):\n        self.lower_bound(0.0)\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    print(f\"Primary Number: {my_cool_settings.primary_number}\")\n    print(f\"Secondary Number: {my_cool_settings.secondary_number}\")\n```\n\nRunning the above will output the following, indicating that the two arrays are\nstored\n\n```\nPrimary Number: [1.0, 2.0, 3.0]\nSecondary Number: [4.0, 5.0, 6.0]\n```\n\nHowever what if we want to generate a set of `MainSettings` instances, each one\nrepresenting a single point in combined cartesian product space of\n`primary_number` and `secondary_number`. We can do so using the `Space` class.\n\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import NumberSetting \nfrom json_settings import SettingErrorMessage\nfrom json_settings import Space \n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.primary_number = ImportantNumberSetting\n        self.secondary_number = ImportantNumberSetting\n\n\nclass ImportantNumberSetting(NumberSetting):\n    @NumberSetting.assign\n    def __init__(self, value):\n        self.type = float\n\n    def check(self):\n        self.lower_bound(0.0)\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    settings_space = Space(my_cool_settings)\n\n    print(f\"Primary Number[0, 0]: {settings_space[0, 0].primary_number}\")\n    print(f\"Secondary Number[0, 0]: {settings_space[0, 0].secondary_number}\")\n    print(f\"Type of [0, 0] element: {settings_space[0, 0]}\")\n    print(f\"Primary Number[0, 1]: {settings_space[0, 1].primary_number}\")\n    print(f\"Secondary Number[0, 1]: {settings_space[0, 1].secondary_number}\")\n    print(f\"Primary Number[2, 2]: {settings_space[2, 2].primary_number}\")\n    print(f\"Secondary Number[2, 2]: {settings_space[2, 2].secondary_number}\")\n    print(f\"Space dimensions: {settings_space.shape}\")\n    print(f\"Space summary: {settings_space.cout_summary()}\")\n    print(f\"Total number of elements: {len(settings_space)}\")\n```\n\nThe above will output\n\n```\nPrimary Number[0, 0]: 1.0\nSecondary Number[0, 0]: 4.0\nType of [0, 0] element: <__main__.MainSettings object at 0x000001BF79B40F10>\nPrimary Number[0, 1]: 1.0\nSecondary Number[0, 1]: 5.0\nPrimary Number[2, 2]: 3.0\nSecondary Number[2, 2]: 6.0\nSpace dimensions: (3, 3)\nSpace summary: Computational space dimensions: 3 x 3\n\naxis: 0:\n        primary_number\n        values:  [1.0, 2.0, 3.0]\naxis: 1:\n        secondary_number\n        values:  [4.0, 5.0, 6.0]\n\nTotal number of elements: 9\n```\n\nThe `Space` instances behaves as a multidimensional `numpy` array.\n\nA few things to note:\n\n- You can define an arbitrary number of ranged parameters. The resultant `Space`\n  instance will have the corresponding number of dimensions.\n- You can restrict the space range expansion to a particular subset of the\n  available settings by passing the optional `restrict` parameter to the `Space`\n  constructor\n  - restrict : `dict`[`str`, `str`]\n            A dictionary of `str`: `str` pairs that are used to exclude\n            subsetting branches from the exploration function for finding ranges.\n            If when searching the settings object for ranges, a setting with the\n            same name as a key in `restrict` is found, only subsettings with\n            name equal to the corresponding value will be searched.\n\n### Range-Matching\n\nSometimes we might have several ranges, however we want to couple some of them\ntogether such that the resulting `Space` instance is of reduced dimension.\n\n```json\n{\n    \"primary_number\": {\n        \"array\": [1.0, 2.0, 3.0]\n    },\n    \"secondary_number\": {\n        \"min\": 4.0,\n        \"max\": 6.0,\n        \"num\": 3\n    },\n    \"tertiary_number\": {\n        \"array\": [-1.0, -2.0, -3.0]\n    }\n}\n```\n\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import NumberSetting \nfrom json_settings import SettingErrorMessage\nfrom json_settings import Space \n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.primary_number = ImportantNumberSetting\n        self.secondary_number = ImportantNumberSetting\n        self.tertiary_number = MinorNumberSetting\n\n\nclass ImportantNumberSetting(NumberSetting):\n    @NumberSetting.assign\n    def __init__(self, value):\n        self.type = float\n\n    def check(self):\n        self.lower_bound(0.0)\n\n\nclass MinorNumberSetting(NumberSetting):\n    @NumberSetting.assign\n    def __init__(self, value):\n        self.type = float\n\n    def check(self):\n        pass\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    settings_space = Space(my_cool_settings)\n\n    print(f\"Space dimensions: {settings_space.shape}\")\n    print(f\"Space summary: {settings_space.cout_summary()}\")\n    print(f\"Total number of elements: {len(settings_space)}\")\n```\n\nThis will result in the following output\n```\nSpace dimensions: (3, 3, 3)\nSpace summary: Computational space dimensions: 3 x 3 x 3\n\naxis: 0:\n        primary_number\n        values:  [1.0, 2.0, 3.0]\naxis: 1:\n        secondary_number\n        values:  [4.0, 5.0, 6.0]\naxis: 2:\n        tertiary_number\n        values:  [-1.0, -2.0, -3.0]\n\nTotal number of elements: 27\n```\n\nWe can couple two of the ranges together, such that the resultant space iterates\nthrough matched parameters in step. Using the following JSON file\n```json\n{\n    \"primary_number\": {\n        \"array\": [1.0, 2.0, 3.0],\n        \"match\": \"best_match\"\n    },\n    \"secondary_number\": {\n        \"min\": 4.0,\n        \"max\": 6.0,\n        \"num\": 3,\n    },\n    \"tertiary_number\": {\n        \"array\": [-1.0, -2.0, -3.0],\n        \"match\": \"best_match\"\n    }\n}\n```\nthe resultant output is\n```\nSpace dimensions: (3, 3)\nSpace summary: Computational space dimensions: 3 x 3\n\naxis: 0:\n        secondary_number\n        values:  [4.0, 5.0, 6.0]\n\naxis: 1:\n        match_id: best_match\n        primary_number\n        tertiary_number\n        values: [(1.0, -1.0), (2.0, -2.0), (3.0, -3.0)]\nTotal number of elements: 9\n```\n\nWe can see that `primary_number` and `tertiary_number are coupled in order along\none axis.\n\nA few things to note:\n\n- You can match an arbitary number of ranges together at different and arbitrary\n  depth.\n- You can use any match string, and two ranges with the same match string will\n  be coupled.\n- You can define an arbitrary number of match strings.\n\n## String-Set-Settings\n\nA common type of setting is a restricted set of string values. As such\n`json_settings` has a special base class `StringSetSetting`. For example, we\nmight want to define a setting that is a type of vehicle\n\n```json\n{\n    \"vehicle_type\": \"car\"\n}\n```\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import StringSetSetting\nfrom json_settings import SettingErrorMessage\n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.vehicle_type = VehicleTypeSetting\n\n\nclass VehicleTypeSetting(StringSetSetting):\n    @StringSetSetting.assign\n    def __init__(self, value):\n        self.options = [\n            \"car\",\n            \"plane\",\n            \"boat\"\n        ]\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n```\n\nA few things to note:\n\n- `StringSetSetting` derived classes must have only one attribute `options`\n  defined in the `__init__` method. `options` must be a `list` of `str` values.\n\nIf a value that is not in the defined list is passed in the JSON file, the\nfollowing error message is yielded to the user\n\n```\nvehicle_type -> must be one of ['car', 'plane', 'boat']\n```\n\n## List-Settings\n\nWe want to define a setting that is a list of a single arbitrary type\n\n```json\n{\n    \"entries\": [\n        {\n            \"kind\": \"car\",\n            \"cost\": 1000\n        },\n        {\n            \"kind\": \"car\",\n            \"cost\": 3000\n        },\n        {\n            \"kind\": \"plane\",\n            \"cost\": 10000 \n        }\n    ]\n}\n```\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import ListSetting\nfrom json_settings import StringSetSetting\nfrom json_settings import SettingErrorMessage\n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.entries = EntryListSetting \n\nclass EntryListSetting(ListSetting):\n    @ListSetting.assign\n    def __init__(self, values):\n        self.type = EntrySetting\n\nclass EntrySetting(Settings):\n    @Settings.assign\n    def __init__(self, values):\n        self.kind = VehicleTypeSetting\n        self.cost = int\n\nclass VehicleTypeSetting(StringSetSetting):\n    @StringSetSetting.assign\n    def __init__(self, value):\n        self.options = [\n            \"car\",\n            \"plane\",\n            \"boat\"\n        ]\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    print(f\"Element type: {type(my_cool_settings[0])}\")\n    print(f\"First element.kind: {my_cool_settings.entries[0].kind}\")\n    print(f\"First element.cost: {my_cool_settings.entries[0].cost}\")\n    print(f\"Third element.kind: {my_cool_settings.entries[2].kind}\")\n    print(f\"Third element.cost: {my_cool_settings.entries[2].cost}\")\n\n```\n\nThe above code will result in the following output\n\n```\nElement type: <class '__main__.EntrySetting'>\nFirst element.kind: car\nFirst element.cost: 1000\nThird element.kind: plane\nThird element.cost: 10000\n```\n\nIf we introduce an error in the configuration file\n```json\n{\n    \"entries\": [\n        {\n            \"kind\": \"caravan\",\n            \"cost\": 1000\n        },\n        {\n            \"kind\": \"car\",\n            \"cost\": 3000\n        },\n        {\n            \"kind\": \"plane\",\n            \"cost\": 10000 \n        }\n    ]\n}\n```\n\nThe following error message will be yielded to the user, noting the element of\nthe list where the error occurred\n```\nentries[0] -> kind -> must be one of ['car', 'plane', 'boat']\n```\n\nA few things to note:\n\n- `ListSettings` derived classes must define only one attribute `type` in the\n  `__init__` method, which is the type of the values stored.\n- A list can contain an arbitrary number of elements.\n- All elements of the list must adhere to the constrants of all sub elements of\n  any settings objects contain within it.\n- Any `ListSetting` derived object behaves like an immutable `list`.\n- List order from configuration files is maintained.\n\n## Dictionary-Settings\n\nWe want to define a setting that is a dictionary where all values are of a\nsingle arbitrary type \n\n```json\n{\n    \"entries\": {\n        \"cheap_car\": {\n            \"kind\": \"car\",\n            \"cost\": 1000\n        },\n        \"expensive_car\": {\n            \"kind\": \"car\",\n            \"cost\": 3000\n        },\n        \"cheap_plane\": {\n            \"kind\": \"plane\",\n            \"cost\": 10000 \n        }\n    }\n}\n```\n```python\nimport sys\nimport json\n\nfrom json_settings import Settings\nfrom json_settings import DictionarySetting \nfrom json_settings import StringSetSetting\nfrom json_settings import SettingErrorMessage\n\n\nclass MainSettings(Settings):\n\n    @Settings.assign\n    def __init__(self, values):\n        self.entries = EntryListSetting \n\nclass EntryListSetting(DictionarySetting):\n    @DictionarySetting.assign\n    def __init__(self, values):\n        self.type = EntrySetting\n\nclass EntrySetting(Settings):\n    @Settings.assign\n    def __init__(self, values):\n        self.kind = VehicleTypeSetting\n        self.cost = int\n\nclass VehicleTypeSetting(StringSetSetting):\n    @StringSetSetting.assign\n    def __init__(self, value):\n        self.options = [\n            \"car\",\n            \"plane\",\n            \"boat\"\n        ]\n\nif __name__ == \"__main__\":\n\n    with open(\"my_json_config_file.json\", 'r') as f:\n        values = json.loads(f.read())\n\n    try:\n        my_cool_settings = MainSettings(values)\n    except SettingErrorMessage as e:\n        sys.exit(e)\n\n    print(f\"Element type: {type(my_cool_settings['cheap_car'])}\")\n    print(f\"First element.kind: {my_cool_settings.entries['cheap_car'].kind}\")\n    print(f\"First element.cost: {my_cool_settings.entries['cheap_car'].cost}\")\n    print(f\"Third element.kind: {my_cool_settings.entries['cheap_plane'].kind}\")\n    print(f\"Third element.cost: {my_cool_settings.entries['cheap_plane'].cost}\")\n```\n\nThe above code will result in the following output\n\n```\nElement type: <class '__main__.EntrySetting'>\nFirst element.kind: car\nFirst element.cost: 1000\nThird element.kind: plane\nThird element.cost: 10000\n```\n\nIf we introduce an error in the configuration file\n```json\n{\n    \"entries\": {\n        \"cheap_car\": {\n            \"kind\": \"fish\",\n            \"cost\": 1000\n        },\n        \"expensive_car\": {\n            \"kind\": \"car\",\n            \"cost\": 3000\n        },\n        \"cheap_plane\": {\n            \"kind\": \"plane\",\n            \"cost\": 10000 \n        }\n    }\n}\n```\n\nThe following error message will be yielded to the user, noting the key of\nthe dictionary where the error occurred\n```\nentries -> cheap_car -> kind -> must be one of ['car', 'plane', 'boat']\n```\n\nA few things to note:\n\n- `DictionarySettings` derived classes must define only one attribute `type` in the\n  `__init__` method, which is the type of the values stored.\n- A dictionary can contain an arbitrary number of key value pairs.\n- All values of the dictionary must adhere to the constrants of all sub elements of\n  any settings objects contain within it.\n- Any `DictionarySetting` derived object behaves like an immutable `dict`.\n- The key difference between this and a normal `Settings` derived object is the\n  ability for the user to define arbitrary numbers of the same type of object to a\n  configuration file.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/riskaware-ltd/json-settings",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "json-settings",
    "package_url": "https://pypi.org/project/json-settings/",
    "platform": "",
    "project_url": "https://pypi.org/project/json-settings/",
    "project_urls": {
      "Homepage": "https://github.com/riskaware-ltd/json-settings"
    },
    "release_url": "https://pypi.org/project/json-settings/0.1.4/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "JSON Configuration File Framework",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8427254,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0114122053ab5f2089583263a33c2f2c8183044b57ef26397980a471fbca3a3a",
          "md5": "24a774ae4d974e09edf22648b2100a0c",
          "sha256": "e620f910e91d1b45dd46dccd39ea52142c5a6d665d5070269a79adddb4915b9f"
        },
        "downloads": -1,
        "filename": "json_settings-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24a774ae4d974e09edf22648b2100a0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19008,
        "upload_time": "2020-10-13T10:22:14",
        "upload_time_iso_8601": "2020-10-13T10:22:14.648521Z",
        "url": "https://files.pythonhosted.org/packages/01/14/122053ab5f2089583263a33c2f2c8183044b57ef26397980a471fbca3a3a/json_settings-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "503d3ec952a1315f9aa6d0a3f19d0046904014486b16d4cf53e2436b878105ac",
          "md5": "3ec1e7de023c53fdf278230ca98b7e60",
          "sha256": "f7732c2d1ef1e3543f81b0089997f5ad08fef957cb8c097dc8dc399b1bd3a61e"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ec1e7de023c53fdf278230ca98b7e60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11066,
        "upload_time": "2020-10-13T10:22:17",
        "upload_time_iso_8601": "2020-10-13T10:22:17.298046Z",
        "url": "https://files.pythonhosted.org/packages/50/3d/3ec952a1315f9aa6d0a3f19d0046904014486b16d4cf53e2436b878105ac/json_settings-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64b33566c6973e6943231d2f9e500661c18cf82d216b8004efbdb3eb3559f800",
          "md5": "23501b0c76ddf5519e5e34685451dff5",
          "sha256": "ab04ba98477f9f5a36f1f874fb6dbec5e92a27aed729bbf8dbaf89699143a12e"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23501b0c76ddf5519e5e34685451dff5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19026,
        "upload_time": "2020-10-15T09:03:57",
        "upload_time_iso_8601": "2020-10-15T09:03:57.264021Z",
        "url": "https://files.pythonhosted.org/packages/64/b3/3566c6973e6943231d2f9e500661c18cf82d216b8004efbdb3eb3559f800/json_settings-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e520e632888c99c8165e5c9f88b767a6daadd52d9262fcfbb9c2cd8729805a85",
          "md5": "37b213c21a2ce17032bca77effb26242",
          "sha256": "94ab3e0a74ccf69663fec84926f16254c5f01c5117d1daae1721e40d59fad963"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37b213c21a2ce17032bca77effb26242",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12086,
        "upload_time": "2020-10-15T09:03:58",
        "upload_time_iso_8601": "2020-10-15T09:03:58.481559Z",
        "url": "https://files.pythonhosted.org/packages/e5/20/e632888c99c8165e5c9f88b767a6daadd52d9262fcfbb9c2cd8729805a85/json_settings-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeed0dccf26b5531aac90ef6c43a0a6e1b4bcfa7219695db926e48d93b1e3f1e",
          "md5": "9dc15bd8cb44038f99a5ee819a72b83b",
          "sha256": "fe483cddb31b621fb713472b01b1db347fce8d520d4bdec545a6a91e6f4efb20"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dc15bd8cb44038f99a5ee819a72b83b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24235,
        "upload_time": "2020-10-15T14:46:05",
        "upload_time_iso_8601": "2020-10-15T14:46:05.358693Z",
        "url": "https://files.pythonhosted.org/packages/ae/ed/0dccf26b5531aac90ef6c43a0a6e1b4bcfa7219695db926e48d93b1e3f1e/json_settings-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad735cb721716f91b7b6e46e2d3098efe611293a73f08d630455f623bb9f158d",
          "md5": "32530a7c53732b693c2727c0272dc589",
          "sha256": "ae4bb79c101e41cde3bd86f67783ede02517303b27da9fab30453f3831211026"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "32530a7c53732b693c2727c0272dc589",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26253,
        "upload_time": "2020-10-15T14:46:07",
        "upload_time_iso_8601": "2020-10-15T14:46:07.370781Z",
        "url": "https://files.pythonhosted.org/packages/ad/73/5cb721716f91b7b6e46e2d3098efe611293a73f08d630455f623bb9f158d/json_settings-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d978692a7b66ce332d9c2c9eb8bca1dd494213f5d9b2f29b857aea00bab5cc81",
          "md5": "eff06efd63b0e4d2216fb7f7b12e04eb",
          "sha256": "bef45a74c40a24d8388841d175a6713731b99f3f60f528bb3c90bc6841f652c3"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eff06efd63b0e4d2216fb7f7b12e04eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24055,
        "upload_time": "2020-10-15T17:12:46",
        "upload_time_iso_8601": "2020-10-15T17:12:46.431782Z",
        "url": "https://files.pythonhosted.org/packages/d9/78/692a7b66ce332d9c2c9eb8bca1dd494213f5d9b2f29b857aea00bab5cc81/json_settings-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2b07d3a2e77801c1626da435161001f3ff8788cd7f52b6536df126e07c1614d",
          "md5": "ee7c95273f089a26af532d8a609bdcef",
          "sha256": "7f0a29584b5bfe62722be164d8c250b2b3701268e46daca8b3b5e422807c0add"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ee7c95273f089a26af532d8a609bdcef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25704,
        "upload_time": "2020-10-15T17:12:48",
        "upload_time_iso_8601": "2020-10-15T17:12:48.479084Z",
        "url": "https://files.pythonhosted.org/packages/c2/b0/7d3a2e77801c1626da435161001f3ff8788cd7f52b6536df126e07c1614d/json_settings-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4b62e4a787f721a2f2efd4c449673a22ed18442d14b2988b948557f160d3916",
          "md5": "f1582e9e6cae8f25bdc9287e7f219c1c",
          "sha256": "61c5ecab85fcbbf48d8d7ea856e32ba109bd378135d8433a6bb52deb63aab004"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1582e9e6cae8f25bdc9287e7f219c1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25561,
        "upload_time": "2020-10-16T11:08:45",
        "upload_time_iso_8601": "2020-10-16T11:08:45.773040Z",
        "url": "https://files.pythonhosted.org/packages/b4/b6/2e4a787f721a2f2efd4c449673a22ed18442d14b2988b948557f160d3916/json_settings-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53a8966099dbbf7a0dbc469946baeda1f2c60d78b4d95e464db6daf2b395e44b",
          "md5": "18461d08533acda68f88e41980fce919",
          "sha256": "a07ff0f13919c526057e5149b684b4101f031545dda70a1b2887f176c0067ed2"
        },
        "downloads": -1,
        "filename": "json_settings-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "18461d08533acda68f88e41980fce919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26682,
        "upload_time": "2020-10-16T11:08:47",
        "upload_time_iso_8601": "2020-10-16T11:08:47.634787Z",
        "url": "https://files.pythonhosted.org/packages/53/a8/966099dbbf7a0dbc469946baeda1f2c60d78b4d95e464db6daf2b395e44b/json_settings-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4b62e4a787f721a2f2efd4c449673a22ed18442d14b2988b948557f160d3916",
        "md5": "f1582e9e6cae8f25bdc9287e7f219c1c",
        "sha256": "61c5ecab85fcbbf48d8d7ea856e32ba109bd378135d8433a6bb52deb63aab004"
      },
      "downloads": -1,
      "filename": "json_settings-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1582e9e6cae8f25bdc9287e7f219c1c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25561,
      "upload_time": "2020-10-16T11:08:45",
      "upload_time_iso_8601": "2020-10-16T11:08:45.773040Z",
      "url": "https://files.pythonhosted.org/packages/b4/b6/2e4a787f721a2f2efd4c449673a22ed18442d14b2988b948557f160d3916/json_settings-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53a8966099dbbf7a0dbc469946baeda1f2c60d78b4d95e464db6daf2b395e44b",
        "md5": "18461d08533acda68f88e41980fce919",
        "sha256": "a07ff0f13919c526057e5149b684b4101f031545dda70a1b2887f176c0067ed2"
      },
      "downloads": -1,
      "filename": "json_settings-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "18461d08533acda68f88e41980fce919",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26682,
      "upload_time": "2020-10-16T11:08:47",
      "upload_time_iso_8601": "2020-10-16T11:08:47.634787Z",
      "url": "https://files.pythonhosted.org/packages/53/a8/966099dbbf7a0dbc469946baeda1f2c60d78b4d95e464db6daf2b395e44b/json_settings-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}