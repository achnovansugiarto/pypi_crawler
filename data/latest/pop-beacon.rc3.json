{
  "info": {
    "author": "Tyler Johnson",
    "author_email": "tyjohnson@vmware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "======\nBEACON\n======\n\nA system to continually watch interfaces for events and forward them respectively through the event bus\n\nINSTALLATION\n============\n\n.. code-block:: bash\n\n    pip install pop-beacon\n\nUSAGE\n=====\n\n`beacon` is mainly an app-merge component for larger projects.\nHowever, it includes a script that can be useful for testing your beacons.\nThis testing script will listen to all beacons and print out events that any of them receive.\nA listener iterates over the internal beacon queues and prints everything that gets posted to them.\nThe the outputter to format the printed data can be specified with `--output`.\n\n.. code-block:: bash\n\n    beacon_test --output json\n\nTESTING\n=======\n\nInstall `beacon` locally with testing libraries:\n\n.. code-block:: bash\n\n    $ git clone git@gitlab.com:saltstack/pop/beacon.git\n    $ pip install -e beacon -r requirements-test.txt\n\nIf you have a rabbitmq-server binary installed via your system's package manager, the pika tests won't be skipped.\nStart a local rabbitmq-server with the default parameters:\n\n.. code-block:: bash\n\n    sudo rabbitmq-server\n\nRun the tests with pytest:\n\n.. code-block:: bash\n\n    $ pytest beacon/tests\n\n\nACCT PROFILES\n=============\n\n`beacon` will read credentials that are encrypted using the `acct` system.\nTo use this system, create a yaml file that has the plaintext credentials and information needed\nto connect with the various beacon plugins.\nFor example, to connect to a rabbitmq server, or any amqp implementation,\nhave a profile in your `acct` credentials file that specifies the \"pika\" acct plugin:\n\ncredentials.yml\n\n.. code-block:: yaml\n\n    pika:\n      profile_name:\n        host: localhost\n        port: 5672\n        username: XXXXXXXXXXXX\n        password: XXXXXXXXXXXX\n        beacon_channels:\n          - channel1\n          - channel2\n\nNext use the `acct` command to encrypt this file using the fernet algorithm:\n\n.. code-block:: bash\n\n    $ acct encrypt credentials.yml\n    YeckEnWEGOjBDVxxytw13AsdLgquzhCtFHOs7kDsna8=\n\nThe `acct` information can now be stored in environment variables:\n\n.. code-block:: bash\n\n    $ export ACCT_FILE = $PWD/credentials.yml.fernet\n    $ export ACCT_KEY = \"YeckEnWEGOjBDVxxytw13AsdLgquzhCtFHOs7kDsna8=\"\n\nThey can also be used on the command line:\n\n.. code-block:: bash\n\n    $ beacon_test --acct-file=credentials.yml.fernet --acct-key=\"YeckEnWEGOjBDVxxytw13AsdLgquzhCtFHOs7kDsna8=\"\n\n\nINTEGRATION\n===========\n\nYour own app can extend `acct`'s command line interface to use the `--acct-file` and `--acct-key` options for beacon:\n\nmy_project/conf.py\n\n.. code-block:: python\n\n    CLI_CONFIG = {\n        \"acct_file\": {\"source\": \"acct\", \"os\": \"ACCT_FILE\"},\n        \"acct_key\": {\"source\": \"acct\", \"os\": \"ACCT_KEY\"},\n        \"beacon_profiles\": {\"source\": \"beacon\"},\n    }\n\n\nIn your own project, you can vertically merge `beacon` and extend it with your own beacon plugins:\n\nmy_project/conf.py\n\n.. code-block:: python\n\n    DYNE = {\n        \"acct\": [\"acct\"],\n        \"beacon\": [\"beacon\"],\n        \"my_project\": [\"my_project\"],\n    }\n\nCreate the directory `my_project/beacon` and add your beacon plugins there.\n\nBeacon plugins need a function called \"listen\" that is an asynchronous generator.\n\nmy_project/beacon/my_plugin.py\n\n.. code-block:: python\n\n    from typing import AsyncGenerator\n\n\n    async def listen(hub) -> AsyncGenerator:\n        async for event in my_queue:\n            yield event\n\nThe \"listen\" function can optionally have a `ctx` parameter if your beacon plugin requires login credentials.\nThe `ctx` parameter will be automatically be populated by `acct`  and `evbus` if a profile that specifies your\nplugin is included in the encrypted acct file.\n\nmy_project/beacon/my_plugin.py\n\n.. code-block:: python\n\n    from typing import AsyncGenerator\n\n\n    async def listen(hub, ctx) -> AsyncGenerator:\n        if not ctx.connected:\n            return\n\n        # Many message queues have named channels that can be specified\n        # Create a listener for every channel on this connection\n        # A listener is another function that returns an async generator\n        channel_listeners = [\n            await ctx.connection.channel_listener(channel) for channel in ctx.channels\n        ]\n        # Use hub.pop.loop.as_yielded to combine all the channel async generators into a single async generator\n        generator = hub.pop.loop.as_yielded(channel_listeners)\n\n        # Listen for events as they come from any of the channels\n        async for event in generator:\n            yield event\n\nCreate the directory  `my_project/acct/beacon` and add your acct plugins there.\n`acct` plugins need to implement a `gather` function, which reads the appropriate information from\n`hub.acct.PROFILES` and turns it into processed profile information in `hub.acct.SUB_PROFILES`.\nThis processing can include operations such as opening a connection to a remote server.\n\nmy_project/acct/beacon/my_plugin.py\n\n.. code-block:: python\n\n        async def gather(hub):\n            \"\"\"\n            Get [my_plugin] profiles from an encrypted file\n\n            Example:\n\n            .. code-block:: yaml\n\n                my_plugin:\n                  profile_name:\n                    host: localhost\n                    port: 12345\n                    username: XXXXXXXXXXXX\n                    password: XXXXXXXXXXXX\n                    beacon_channels:\n                      - channel1\n                      - channel2\n            \"\"\"\n            sub_profiles = {}\n            for profile, ctx in hub.acct.PROFILES.get(\"my_plugin\", {}).items():\n                # Create a connection through [some_library] for each of the profiles\n                sub_profiles[profile] = {\n                    \"connected\": False,\n                    \"connection\": await some_library.connect(**ctx),\n                    \"channels\": ctx.pop(\"beacon_channels\", []),\n                }\n            # Return these to be automatically processed by acct and injected into the `ctx` parameter of appropriate beacon publish calls.\n            return sub_profiles\n\n\nAdd beacon startup code to your project's initializer:\n\nmy_project/my_project/init.py\n\n.. code-block:: python\n\n    def __init__(hub):\n        # Horizontally merge the beacon dynamic namespace into your project\n        hub.pop.sub.add(dyne_name=\"beacon\")\n\n\n    def cli(hub):\n        # Load the config from beacon onto hub.OPT\n        hub.pop.config.load([\"my_project\", \"beacon\", \"evbus\", \"acct\"], cli=\"my_project\")\n\n        # Create the asyncio loop\n        hub.pop.loop.create()\n\n        # Create the beacon coroutine\n        coro = hub.beacon.init.start(\n            format_plugin=hub.OPT.beacon.format,\n            acct_file=hub.OPT.acct.acct_file,\n            acct_key=hub.OPT.acct.acct_key,\n            beacon_profiles=hub.OPT.beacon.beacon_profiles,\n        )\n\n        # Start the main beacon listener\n        hub.pop.Loop.run_until_complete(coro)\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/saltstack/pop/beacon",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pop-beacon",
    "package_url": "https://pypi.org/project/pop-beacon/",
    "platform": "",
    "project_url": "https://pypi.org/project/pop-beacon/",
    "project_urls": {
      "Homepage": "https://gitlab.com/saltstack/pop/beacon"
    },
    "release_url": "https://pypi.org/project/pop-beacon/3.0.0/",
    "requires_dist": [
      "acct (>=5)",
      "aio-pika",
      "pop (>=16.3)",
      "pop-evbus (>=3.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A system to continually watch interfaces for events and forward them respectively",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11873976,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6310b05cd0ae8863cfeb79404c315b188b32e985f514b21effc15aed10fb3a6",
          "md5": "62aba2ad0630d775ceace99b0cb53f8a",
          "sha256": "b73be210af3df125fd7dfa168b3de3a849179a9dc909265c63dd8d241d99de6a"
        },
        "downloads": -1,
        "filename": "pop_beacon-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62aba2ad0630d775ceace99b0cb53f8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11068,
        "upload_time": "2021-01-29T10:55:20",
        "upload_time_iso_8601": "2021-01-29T10:55:20.039619Z",
        "url": "https://files.pythonhosted.org/packages/d6/31/0b05cd0ae8863cfeb79404c315b188b32e985f514b21effc15aed10fb3a6/pop_beacon-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "266a9fffa9a0181516ca1f2186d0451798341e14d3693c0d0376cd9706d8dc87",
          "md5": "fbd7066708edd2a6a69718e81b37a5f1",
          "sha256": "784aa3a181a772138a27a399d260f60e1f646d7dcde9be91770474a2f65a4a85"
        },
        "downloads": -1,
        "filename": "pop-beacon-1.tar.gz",
        "has_sig": false,
        "md5_digest": "fbd7066708edd2a6a69718e81b37a5f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11043,
        "upload_time": "2021-01-29T10:55:21",
        "upload_time_iso_8601": "2021-01-29T10:55:21.328296Z",
        "url": "https://files.pythonhosted.org/packages/26/6a/9fffa9a0181516ca1f2186d0451798341e14d3693c0d0376cd9706d8dc87/pop-beacon-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "340fa0c5619afd434c1de84bc19619ad996292aa8b153bde56504429460fbc5c",
          "md5": "85290742400665c07bb928dad8dfe04b",
          "sha256": "ab1473eea3647be90bb6ee4608a1bfd1d2365edae3f9378df1b4a6d083f66051"
        },
        "downloads": -1,
        "filename": "pop_beacon-2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85290742400665c07bb928dad8dfe04b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11099,
        "upload_time": "2021-02-04T05:35:36",
        "upload_time_iso_8601": "2021-02-04T05:35:36.314350Z",
        "url": "https://files.pythonhosted.org/packages/34/0f/a0c5619afd434c1de84bc19619ad996292aa8b153bde56504429460fbc5c/pop_beacon-2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f80428ae9f8545130362c69c776919690fb41b9564ecacd307de9109cedd0df2",
          "md5": "8d1ecca297f9f9fcde1342da047e1745",
          "sha256": "67218fe3ad3c3102e4803a47a0f61719c040944c57eaf55d362b0445fc196d8d"
        },
        "downloads": -1,
        "filename": "pop-beacon-2.tar.gz",
        "has_sig": false,
        "md5_digest": "8d1ecca297f9f9fcde1342da047e1745",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11153,
        "upload_time": "2021-02-04T05:35:37",
        "upload_time_iso_8601": "2021-02-04T05:35:37.586869Z",
        "url": "https://files.pythonhosted.org/packages/f8/04/28ae9f8545130362c69c776919690fb41b9564ecacd307de9109cedd0df2/pop-beacon-2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "production",
        "digests": {
          "blake2b_256": "e39b3ffcf5585b78ffe181857338232293ac19d82bced47047cda25f61d2d5f1",
          "md5": "0e19b86293a7f39613be179384830833",
          "sha256": "1736b5a47bdfc10fe93de09b08036b105ee71789c67d1a6c97cd96e1c3ca4061"
        },
        "downloads": -1,
        "filename": "pop_beacon-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e19b86293a7f39613be179384830833",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15388,
        "upload_time": "2021-10-25T19:13:10",
        "upload_time_iso_8601": "2021-10-25T19:13:10.606600Z",
        "url": "https://files.pythonhosted.org/packages/e3/9b/3ffcf5585b78ffe181857338232293ac19d82bced47047cda25f61d2d5f1/pop_beacon-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "production",
        "digests": {
          "blake2b_256": "b71527662bbc9b6fb567e67d7e278afb791565c281bbe1579ab77051683b5d19",
          "md5": "0daaa6c8871c763b8ed51f29db630fbb",
          "sha256": "30e3fecb5393daea0895594d2335f1eec4cb6b114982282f5accaf09ca5389e5"
        },
        "downloads": -1,
        "filename": "pop-beacon-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0daaa6c8871c763b8ed51f29db630fbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14175,
        "upload_time": "2021-10-25T19:13:12",
        "upload_time_iso_8601": "2021-10-25T19:13:12.502217Z",
        "url": "https://files.pythonhosted.org/packages/b7/15/27662bbc9b6fb567e67d7e278afb791565c281bbe1579ab77051683b5d19/pop-beacon-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "production",
      "digests": {
        "blake2b_256": "e39b3ffcf5585b78ffe181857338232293ac19d82bced47047cda25f61d2d5f1",
        "md5": "0e19b86293a7f39613be179384830833",
        "sha256": "1736b5a47bdfc10fe93de09b08036b105ee71789c67d1a6c97cd96e1c3ca4061"
      },
      "downloads": -1,
      "filename": "pop_beacon-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e19b86293a7f39613be179384830833",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15388,
      "upload_time": "2021-10-25T19:13:10",
      "upload_time_iso_8601": "2021-10-25T19:13:10.606600Z",
      "url": "https://files.pythonhosted.org/packages/e3/9b/3ffcf5585b78ffe181857338232293ac19d82bced47047cda25f61d2d5f1/pop_beacon-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "production",
      "digests": {
        "blake2b_256": "b71527662bbc9b6fb567e67d7e278afb791565c281bbe1579ab77051683b5d19",
        "md5": "0daaa6c8871c763b8ed51f29db630fbb",
        "sha256": "30e3fecb5393daea0895594d2335f1eec4cb6b114982282f5accaf09ca5389e5"
      },
      "downloads": -1,
      "filename": "pop-beacon-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0daaa6c8871c763b8ed51f29db630fbb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14175,
      "upload_time": "2021-10-25T19:13:12",
      "upload_time_iso_8601": "2021-10-25T19:13:12.502217Z",
      "url": "https://files.pythonhosted.org/packages/b7/15/27662bbc9b6fb567e67d7e278afb791565c281bbe1579ab77051683b5d19/pop-beacon-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}