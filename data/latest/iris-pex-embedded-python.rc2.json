{
  "info": {
    "author": "grongier",
    "author_email": "guillaume.rongier@intersystems.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# 1. interoperability-embedded-python\n\nThis proof of concept aims to show how the **iris interoperability framework** can be use with **embedded python**.\n\n## 1.1. Table of Contents\n\n- [1. interoperability-embedded-python](#1-interoperability-embedded-python)\n  - [1.1. Table of Contents](#11-table-of-contents)\n  - [1.2. Example](#12-example)\n  - [1.3. Register a component](#13-register-a-component)\n- [2. Demo](#2-demo)\n- [3. Prerequisites](#3-prerequisites)\n- [4. Installation](#4-installation)\n  - [4.1. With Docker](#41-with-docker)\n  - [4.2. Without Docker](#42-without-docker)\n  - [4.3. With ZPM](#43-with-zpm)\n- [5. How to Run the Sample](#5-how-to-run-the-sample)\n  - [5.1. Docker containers](#51-docker-containers)\n  - [5.2. Management Portal and VSCode](#52-management-portal-and-vscode)\n  - [5.3. Open the production](#53-open-the-production)\n- [6. What's inside the repository](#6-whats-inside-the-repository)\n  - [6.1. Dockerfile](#61-dockerfile)\n  - [6.2. .vscode/settings.json](#62-vscodesettingsjson)\n  - [6.3. .vscode/launch.json](#63-vscodelaunchjson)\n  - [6.4. .vscode/extensions.json](#64-vscodeextensionsjson)\n  - [6.5. src folder](#65-src-folder)\n- [7. How it works](#7-how-it-works)\n  - [7.1. The `__init__.py`file](#71-the-__init__pyfile)\n  - [7.2. The `common` class](#72-the-common-class)\n  - [7.3. The `business_host` class](#73-the-business_host-class)\n  - [7.4. The `inbound_adapter` class](#74-the-inbound_adapter-class)\n  - [7.5. The `outbound_adapter` class](#75-the-outbound_adapter-class)\n  - [7.6. The `business_service` class](#76-the-business_service-class)\n  - [7.7. The `business_process` class](#77-the-business_process-class)\n  - [7.8. The `business_operation` class](#78-the-business_operation-class)\n    - [7.8.1. The dispacth system](#781-the-dispacth-system)\n    - [7.8.2. The methods](#782-the-methods)\n  - [7.9. The `director` class](#79-the-director-class)\n  - [7.10. The `objects`](#710-the-objects)\n  - [7.11. The `messages`](#711-the-messages)\n  - [7.12. How to regsiter a component](#712-how-to-regsiter-a-component)\n    - [7.12.1. register_component](#7121-register_component)\n    - [7.12.2. register_file](#7122-register_file)\n    - [7.12.3. register_folder](#7123-register_folder)\n  - [7.13. Direct use of Grongier.PEX](#713-direct-use-of-grongierpex)\n- [8. Credits](#8-credits)\n\n## 1.2. Example\n\n```python\nfrom grongier.pex import BusinessOperation,Message\n\nclass MyBusinessOperation(BusinessOperation):\n    \n    def on_init(self):\n        #This method is called when the component is becoming active in the production\n\n        self.log_info(\"[Python] ...MyBusinessOperation:on_init() is called\")\n\n        return\n\n    def on_teardown(self):\n        #This method is called when the component is becoming inactive in the production\n\n        self.log_info(\"[Python] ...MyBusinessOperation:on_teardown() is called\")\n\n        return\n\n    def on_message(self, message_input:MyRequest):\n        # called from service/process/operation, message is of type MyRequest with property request_string\n\n        self.log_info(\"[Python] ...MyBusinessOperation:on_message() is called with message:\"+message_input.request_string)\n\n        response = MyResponse(\"...MyBusinessOperation:on_message() echos\")\n\n        return response\n\n@dataclass\nclass MyRequest(Message):\n\n    request_string:str = None\n\n@dataclass\nclass MyResponse(Message):\n\n    my_string:str = None\n\n```\n\n## 1.3. Register a component \n\nThanks to the method grongier.pex.Utils.register_component() : \n\nStart an embedded python shell :\n\n```sh\n/usr/irissys/bin/irispython\n```\n\nThen use this class method to add a python class to the component list for interoperability.\n```python\nfrom grongier.pex import Utils\n\nUtils.register_component(<ModuleName>,<ClassName>,<PathToPyFile>,<OverWrite>,<NameOfTheComponent>)\n```\n\ne.g :\n```python\nfrom grongier.pex import Utils\n\nUtils.register_component(\"MyCombinedBusinessOperation\",\"MyCombinedBusinessOperation\",\"/irisdev/app/src/python/demo/\",1,\"PEX.MyCombinedBusinessOperation\")\n```\n\nThis is a hack, this not for production.\n# 2. Demo\n\nThe demo can be found inside `src/python/demo/reddit/` and is composed of :\n- An `adapter.py` file that holds a `RedditInboundAdapter` that will, given a service, fetch Reddit recent posts.\n<br>\n\n- A `bs.py` file that holds three `services` that does the same thing, they will call our `Process` and send it reddit post. One work on his own, one use the `RedditInBoundAdapter` we talked about earlier and the last one use a reddit inbound adapter coded in ObjectScript.\n<br>\n\n- A `bp.py` file that holds a `FilterPostRoutingRule` process that will analyze our reddit posts and send it to our `operations` if it contains certain words.\n<br>\n\n- A `bo.py` file that holds :\n    - Two **email operations** that will send a mail to a certain company depending on the words analyzed before, one works on his own and the other one works with an OutBoundAdapter.\n    - Two **file operations** that will write in a text file depending on the words analyzed before, one works on his own and the other one works with an OutBoundAdapter.\n<br>\n\nNew json trace for python native messages :\n<img width=\"910\" alt=\"json-message-trace\" src=\"https://user-images.githubusercontent.com/47849411/131305211-b8beb2c0-438d-4afc-a6d2-f94d854373ae.png\">\n\n# 3. Prerequisites\nMake sure you have [git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and [Docker desktop](https://www.docker.com/products/docker-desktop) installed.\n\n# 4. Installation \n## 4.1. With Docker\n\nClone/git pull the repo into any local directory\n\n```sh\ngit clone https://github.com/grongierisc/interpeorability-embedded-python\n```\n\nOpen the terminal in this directory and run:\n\n```sh\ndocker-compose build\n```\n\nRun the IRIS container with your project:\n\n```sh\ndocker-compose up -d\n```\n\n## 4.2. Without Docker\n\nInstall the *grongier_pex-1.2.4-py3-none-any.whl* on you local iris instance :\n\n```sh\n/usr/irissys/bin/irispython -m pip install grongier_pex-1.2.4-py3-none-any.whl\n```\n\nThen load the ObjectScript classes :\n\n```ObjectScript\ndo $System.OBJ.LoadDir(\"/opt/irisapp/src\",\"cubk\",\"*.cls\",1)\n```\n## 4.3. With ZPM \n\n```objectscript\nzpm \"install pex-embbeded-python\" \n```\n\n# 5. How to Run the Sample\n\n## 5.1. Docker containers\n\n\nIn order to have access to the InterSystems images, we need to go to the following url: http://container.intersystems.com. After connecting with our InterSystems credentials, we will get our password to connect to the registry. In the docker VScode addon, in the image tab, by pressing connect registry and entering the same url as before (http://container.intersystems.com) as a generic registry, we will be asked to give our credentials. The login is the usual one but the password is the one we got from the website.\n\nFrom there, we should be able to build and compose our containers (with the `docker-compose.yml` and `Dockerfile` files given).\n\n## 5.2. Management Portal and VSCode\n\nThis repository is ready for [VS Code](https://code.visualstudio.com/).\n\nOpen the locally-cloned `interoperability-embedeed-python` folder in VS Code.\n\nIf prompted (bottom right corner), install the recommended extensions.\n\n**IMPORTANT**: When prompted, reopen the folder inside the container so you will be able to use the python components within it. The first time you do this it may take several minutes while the container is readied.\n\nBy opening the folder remote you enable VS Code and any terminals you open within it to use the python components within the container. Configure these to use `/usr/irissys/bin/irispython`\n\n<img width=\"1614\" alt=\"PythonInterpreter\" src=\"https://user-images.githubusercontent.com/47849411/145864423-2de24aaa-036c-4beb-bda0-3a73fe15ccbd.png\">\n\n## 5.3. Open the production\nTo open the production you can go to [production](http://localhost:52773/csp/irisapp/EnsPortal.ProductionConfig.zen?PRODUCTION=PEX.Production).<br>\nYou can also click on the bottom on the `127.0.0.1:52773[IRISAPP]` button and select `Open Management Portal` then, click on [Interoperability] and [Configure] menus then click [productions] and [Go].\n\nThe production already has some code sample.\n\nHere we can see the production and our pure python services and operations:\n<img width=\"1177\" alt=\"interop-screenshot\" src=\"https://user-images.githubusercontent.com/47849411/131305197-d19511fd-6e05-4aec-a525-c88e6ebd0971.png\">\n\n<br>\n\nNew json trace for python native messages :\n<img width=\"910\" alt=\"json-message-trace\" src=\"https://user-images.githubusercontent.com/47849411/131305211-b8beb2c0-438d-4afc-a6d2-f94d854373ae.png\">\n\n# 6. What's inside the repository\n\n## 6.1. Dockerfile\n\nA dockerfile which install some python dependancies (pip, venv) and sudo in the container for conviencies.\nThen it create the dev directory and copy in it this git repository.\n\nIt starts IRIS and activates **%Service_CallIn** for **Python Shell**.\nUse the related docker-compose.yml to easily setup additional parametes like port number and where you map keys and host folders.\n\nThis dockerfile ends with the installation of requirements for python modules.\n\nUse .env/ file to adjust the dockerfile being used in docker-compose.\n\n## 6.2. .vscode/settings.json\n\nSettings file to let you immedietly code in VSCode with [VSCode ObjectScript plugin](https://marketplace.visualstudio.com/items?itemName=daimor.vscode-objectscript)\n\n## 6.3. .vscode/launch.json\nConfig file if you want to debug with VSCode ObjectScript\n\n[Read about all the files in this article](https://community.intersystems.com/post/dockerfile-and-friends-or-how-run-and-collaborate-objectscript-projects-intersystems-iris)\n\n## 6.4. .vscode/extensions.json\nRecommendation file to add extensions if you want to run with VSCode in the container.\n\n[More information here](https://code.visualstudio.com/docs/remote/containers)\n\n![Archiecture](https://code.visualstudio.com/assets/docs/remote/containers/architecture-containers.png)\n\nThis is very useful to work with embedded python.\n\n## 6.5. src folder\n\n```\nsrc\n├── Grongier\n│   └── PEX // ObjectScript classes that wrap python code\n│       ├── BusinessOperation.cls\n│       ├── BusinessProcess.cls\n│       ├── BusinessService.cls\n│       ├── Common.cls\n│       ├── Director.cls\n│       ├── InboundAdapter.cls\n│       ├── Message.cls\n│       ├── OutboundAdapter.cls\n│       ├── Python.cls\n│       ├── Test.cls\n│       └── _utils.cls\n├── PEX // Some example of wrapped classes\n│   └── Production.cls\n└── python\n    ├── demo // Actual python code to run this demo\n    |   `-- reddit\n    |       |-- adapter.py\n    |       |-- bo.py\n    |       |-- bp.py\n    |       |-- bs.py\n    |       |-- message.py\n    |       `-- obj.py\n    ├── dist // Wheel used to implement python interoperability components\n    │   └── grongier_pex-1.2.4-py3-none-any.whl\n    ├── grongier\n    │   └── pex // Helper classes to implement interoperability components\n    │       ├── _business_host.py\n    │       ├── _business_operation.py\n    │       ├── _business_process.py\n    │       ├── _business_service.py\n    │       ├── _common.py\n    │       ├── _director.py\n    │       ├── _inbound_adapter.py\n    │       ├── _message.py\n    │       ├── _outbound_adapter.py\n    │       ├── __init__.py\n    │       └── _utils.py\n    └── setup.py // setup to build the wheel\n```\n# 7. How it works\n\n## 7.1. The `__init__.py`file\nThis file will allow us to create the classes to import in the code.<br>\nIt gets from the multiple files seen earlier the classes and make them into callable classes.\nThat way, when you wish to create a business operation, for example, you can just do:\n```python\nfrom grongier.pex import BusinessOperation\n```\n\n## 7.2. The `common` class\nThe common class shouldn't be called by the user, it defines almost all the other classes.<br>\nThis class defines:\n\n`on_init`: The on_init() method is called when the component is started.<br> Use the on_init() method to initialize any structures needed by the component.\n\n`on_tear_down`: Called before the component is terminated.<br> Use it to free any structures.\n\n`on_connected`: The on_connected() method is called when the component is connected or reconnected after being disconnected.<br>Use the on_connected() method to initialize any structures needed by the component.\n\n`log_info`: Write a log entry of type \"info\". :log entries can be viewed in the management portal.\n\n`log_alert`: Write a log entry of type \"alert\". :log entries can be viewed in the management portal.\n\n`log_warning`: Write a log entry of type \"warning\". :log entries can be viewed in the management portal.\n\n`log_error`: Write a log entry of type \"error\". :log entries can be viewed in the management portal.\n\n## 7.3. The `business_host` class\nThe business host class shouldn't be called by the user, it is the base class for all the business classes.<br>\nThis class defines:\n\n`send_request_sync`: Send the specified message to the target business process or business operation synchronously.            \n**Parameters**:<br>\n- **target**: a string that specifies the name of the business process or operation to receive the request. <br>\n    The target is the name of the component as specified in the Item Name property in the production definition, not the class name of the component.\n- **request**: specifies the message to send to the target. The request is either an instance of a class that is a subclass of Message class or of IRISObject class.<br>\n    If the target is a build-in ObjectScript component, you should use the IRISObject class. The IRISObject class enables the PEX framework to convert the message to a class supported by the target.\n- **timeout**: an optional integer that specifies the number of seconds to wait before treating the send request as a failure. The default value is -1, which means wait forever.<br>\ndescription: an optional string parameter that sets a description property in the message header. The default is None.\n\n**Returns**:\n    the response object from target.\n\n**Raises**:\nTypeError: if request is not of type Message or IRISObject.\n\n<br><br>\n\n`send_request_async`: Send the specified message to the target business process or business operation asynchronously.\n**Parameters**:<br>\n- **target**: a string that specifies the name of the business process or operation to receive the request. <br>\n    The target is the name of the component as specified in the Item Name property in the production definition, not the class name of the component.\n- **request**: specifies the message to send to the target. The request is an instance of IRISObject or of a subclass of Message.<br>\n    If the target is a built-in ObjectScript component, you should use the IRISObject class. The IRISObject class enables the PEX framework to convert the message to a class supported by the target.\n- **description**: an optional string parameter that sets a description property in the message header. The default is None.\n\n**Raises**:\nTypeError: if request is not of type Message or IRISObject.\n\n<br><br>\n\n`get_adapter_type`: Name of the registred Adapter.\n\n\n## 7.4. The `inbound_adapter` class\nInbound Adapter in Python are subclass from grongier.pex.InboundAdapter in Python, that inherit from all the functions of the [common class](#72-the-common-class).<br>\nThis class is responsible for receiving the data from the external system, validating the data, and sending it to the business service by calling the BusinessHost process_input method.\nThis class defines:\n\n`on_task`: Called by the production framework at intervals determined by the business service CallInterval property.<br>\nThe message can have any structure agreed upon by the inbound adapter and the business service.\n\nExample of an inbound adapter ( situated in the src/python/demo/reddit/adapter.py file ):\n```python\nfrom grongier.pex import InboundAdapter\nimport requests\nimport iris\nimport json\n\nclass RedditInboundAdapter(InboundAdapter):\n    \"\"\"\n    This adapter use requests to fetch self.limit posts as data from the reddit\n    API before calling process_input for each post.\n    \"\"\"\n    def on_init(self):\n        \n        if not hasattr(self,'feed'):\n            self.feed = \"/new/\"\n        \n        if self.limit is None:\n            raise TypeError('no Limit field')\n        \n        self.last_post_name = \"\"\n        \n        return 1\n\n    def on_task(self):\n        self.log_info(f\"LIMIT:{self.limit}\")\n        if self.feed == \"\" :\n            return 1\n        \n        tSC = 1\n        # HTTP Request\n        try:\n            server = \"https://www.reddit.com\"\n            request_string = self.feed+\".json?before=\"+self.last_post_name+\"&limit=\"+self.limit\n            self.log_info(server+request_string)\n            response = requests.get(server+request_string)\n            response.raise_for_status()\n\n            data = response.json()\n            updateLast = 0\n\n            for key, value in enumerate(data['data']['children']):\n                if value['data']['selftext']==\"\":\n                    continue\n                post = iris.cls('dc.Reddit.Post')._New()\n                post._JSONImport(json.dumps(value['data']))\n                post.OriginalJSON = json.dumps(value)\n                if not updateLast:\n                    self.LastPostName = value['data']['name']\n                    updateLast = 1\n                response = self.BusinessHost.ProcessInput(post)\n        except requests.exceptions.HTTPError as err:\n            if err.response.status_code == 429:\n                self.log_warning(err.__str__())\n            else:\n                raise err\n        except Exception as err: \n            self.log_error(err.__str__())\n            raise err\n\n        return tSC\n```\n\n## 7.5. The `outbound_adapter` class\nOutbound Adapter in Python are subclass from grongier.pex.OutboundAdapter in Python, that inherit from all the functions of the [common class](#72-the-common-class).<br>\nThis class is responsible for sending the data to the external system.\n\nThe Outbound Adapter gives the Operation the possibility to have a heartbeat notion.\nTo activate this option, the CallInterval parameter of the adapter must be strictly greater than 0.\n\n<img width=\"301\" alt=\"image\" src=\"https://user-images.githubusercontent.com/47849411/178230243-39806602-a63d-4a89-9563-fcf6836d0515.png\">\n\nExample of an outbound adapter ( situated in the src/python/demo/reddit/adapter.py file ):\n\n```python\nclass TestHeartBeat(OutboundAdapter):\n\n    def on_keepalive(self):\n        self.log_info('beep')\n\n    def on_task(self):\n        self.log_info('on_task')\n```\n\n## 7.6. The `business_service` class\nThis class is responsible for receiving the data from external system and sending it to business processes or business operations in the production.<br>\nThe business service can use an adapter to access the external system, which is specified overriding the get_adapter_type method.<br>\nThere are three ways of implementing a business service:<br>\n- Polling business service with an adapter - The production framework at regular intervals calls the adapter’s OnTask() method, \n    which sends the incoming data to the the business service ProcessInput() method, which, in turn calls the OnProcessInput method with your code.\n\n- Polling business service that uses the default adapter - In this case, the framework calls the default adapter's OnTask method with no data. \n    The OnProcessInput() method then performs the role of the adapter and is responsible for accessing the external system and receiving the data.\n\n- Nonpolling business service - The production framework does not initiate the business service. Instead custom code in either a long-running process \n    or one that is started at regular intervals initiates the business service by calling the Director.CreateBusinessService() method.\n\nBusiness service in Python are subclass from grongier.pex.BusinessService in Python, that inherit from all the functions of the [business host](#73-the-business_host-class).<br>\nThis class defines:\n\n`on_process_input`: Receives the message from the inbond adapter via the PRocessInput method and is responsible for forwarding it to target business processes or operations.<br>\nIf the business service does not specify an adapter, then the default adapter calls this method with no message and the business service is responsible for receiving the data from the external system and validating it.\n**Parameters**:<br>\n- **message_input**: an instance of IRISObject or subclass of Message containing the data that the inbound adapter passes in.<br>\nThe message can have any structure agreed upon by the inbound adapter and the business service. \n\n<br><br>\n\nExample of a business service ( situated in the src/python/demo/reddit/bs.py file ):\n```python\nfrom grongier.pex import BusinessService\n\nimport iris\n\nfrom message import PostMessage\nfrom obj import PostClass\n\nclass RedditServiceWithPexAdapter(BusinessService):\n    \"\"\"\n    This service use our python Python.RedditInboundAdapter to receive post\n    from reddit and call the FilterPostRoutingRule process.\n    \"\"\"\n    def get_adapter_type():\n        \"\"\"\n        Name of the registred Adapter\n        \"\"\"\n        return \"Python.RedditInboundAdapter\"\n\n    def on_process_input(self, message_input):\n        msg = iris.cls(\"dc.Demo.PostMessage\")._New()\n        msg.Post = message_input\n        return self.send_request_sync(self.target,msg)\n\n    def on_init(self):\n        \n        if not hasattr(self,'target'):\n            self.target = \"Python.FilterPostRoutingRule\"\n        \n        return\n```\n\n\n## 7.7. The `business_process` class\nTypically contains most of the logic in a production.<br>\nA business process can receive messages from a business service, another business process, or a business operation.<br>\nIt can modify the message, convert it to a different format, or route it based on the message contents.<br>\nThe business process can route a message to a business operation or another business process.<br>\nBusiness processes in Python are subclass from grongier.pex.BusinessProcess in Python, that inherit from all the functions of the [business host](#73-the-business_host-class).<br>\nThis class defines:\n\n`on_request`: Handles requests sent to the business process. A production calls this method whenever an initial request for a specific business process arrives on the appropriate queue and is assigned a job in which to execute.<br>\n**Parameters**:<br>\n- **request**: An instance of IRISObject or subclass of Message that contains the request message sent to the business process.\n\n**Returns**:\nAn instance of IRISObject or subclass of Message that contains the response message that this business process can return\nto the production component that sent the initial message.\n\n<br><br>\n\n`on_response`: Handles responses sent to the business process in response to messages that it sent to the target.<br>\nA production calls this method whenever a response for a specific business process arrives on the appropriate queue and is assigned a job in which to execute.<br>\nTypically this is a response to an asynchronous request made by the business process where the responseRequired parameter has a true value.<br>\n**Parameters**:<br>\n- **request**: An instance of IRISObject or subclass of Message that contains the initial request message sent to the business process.\n- **response**: An instance of IRISObject or subclass of Message that contains the response message that this business process can return to the production component that sent the initial message.\n- **callRequest**: An instance of IRISObject or subclass of Message that contains the request that the business process sent to its target.\n- **callResponse**: An instance of IRISObject or subclass of Message that contains the incoming response.\n- **completionKey**: A string that contains the completionKey specified in the completionKey parameter of the outgoing SendAsync() method.\n\n**Returns**:\nAn instance of IRISObject or subclass of Message that contains the response message that this business process can return\nto the production component that sent the initial message.\n\n<br><br>\n\n`on_complete`: Called after the business process has received and handled all responses to requests it has sent to targets.<br>\n**Parameters**: \n- **request**: An instance of IRISObject or subclass of Message that contains the initial request message sent to the business process.<br>\n- **response**: An instance of IRISObject or subclass of Message that contains the response message that this business process can return to the production component that sent the initial message.\n\n**Returns**:\nAn instance of IRISObject or subclass of Message that contains the response message that this business process can return to the production component that sent the initial message.\n\n<br><br>\n\nExample of a business process ( situated in the src/python/demo/reddit/bp.py file ):\n```python\nfrom grongier.pex import BusinessProcess\n\nfrom message import PostMessage\nfrom obj import PostClass\n\nclass FilterPostRoutingRule(BusinessProcess):\n    \"\"\"\n    This process receive a PostMessage containing a reddit post.\n    It then understand if the post is about a dog or a cat or nothing and\n    fill the right infomation inside the PostMessage before sending it to\n    the FileOperation operation.\n    \"\"\"\n    def on_init(self):\n        \n        if not hasattr(self,'target'):\n            self.target = \"Python.FileOperation\"\n        \n        return\n\n    def on_request(self, request):\n\n        if 'dog'.upper() in request.post.selftext.upper():\n            request.to_email_address = 'dog@company.com'\n            request.found = 'Dog'\n        if 'cat'.upper() in request.post.selftext.upper():\n            request.to_email_address = 'cat@company.com'\n            request.found = 'Cat'\n\n        if request.found is not None:\n            return self.send_request_sync(self.target,request)\n        else:\n            return\n```\n\n## 7.8. The `business_operation` class\nThis class is responsible for sending the data to an external system or a local system such as an iris database.<br>\nThe business operation can optionally use an adapter to handle the outgoing message which is specified overriding the get_adapter_type method.<br>\nIf the business operation has an adapter, it uses the adapter to send the message to the external system.<br>\nThe adapter can either be a PEX adapter, an ObjectScript adapter or a [python adapter](#75-the-outbound_adapter-class).<br>\nBusiness operation in Python are subclass from grongier.pex.BusinessOperation in Python, that inherit from all the functions of the [business host](#73-the-business_host-class).<br>\n\n### 7.8.1. The dispacth system\nIn a business operation it is possbile to create any number of function [similar to the on_message method](#782-the-methods) that will take as argument a [typed request](#711-the-messages) like this `my_special_message_method(self,request: MySpecialMessage)`.\n\nThe dispatch system will automatically analyze any request arriving to the operation and dispacth the requests depending of their type. If the type of the request is not recognized or is not specified in any **on_message like function**, the dispatch system will send it to the `on_message` function.\n\n### 7.8.2. The methods\nThis class defines:\n\n`on_message`: Called when the business operation receives a message from another production component [that can not be dispatched to another function](#781-the-dispacth-system).<br>\nTypically, the operation will either send the message to the external system or forward it to a business process or another business operation.\nIf the operation has an adapter, it uses the Adapter.invoke() method to call the method on the adapter that sends the message to the external system.\nIf the operation is forwarding the message to another production component, it uses the SendRequestAsync() or the SendRequestSync() method.<br>\n**Parameters**:\n- **request**: An instance of either a subclass of Message or of IRISObject containing the incoming message for the business operation.\n\n**Returns**:\nThe response object\n\nExample of a business operation ( situated in the src/python/demo/reddit/bo.py file ):\n```python\nfrom grongier.pex import BusinessOperation\n\nfrom message import MyRequest,MyMessage\n\nimport iris\n\nimport os\nimport datetime\nimport smtplib\nfrom email.mime.text import MIMEText\n\nclass EmailOperation(BusinessOperation):\n    \"\"\"\n    This operation receive a PostMessage and send an email with all the\n    important information to the concerned company ( dog or cat company )\n    \"\"\"\n\n    def my_message(self,request:MyMessage):\n        sender = 'admin@example.com'\n        receivers = 'toto@example.com'\n        port = 1025\n        msg = MIMEText(request.toto)\n\n        msg['Subject'] = 'MyMessage'\n        msg['From'] = sender\n        msg['To'] = receivers\n\n        with smtplib.SMTP('localhost', port) as server:\n            server.sendmail(sender, receivers, msg.as_string())\n            print(\"Successfully sent email\")\n\n    def on_message(self, request):\n\n        sender = 'admin@example.com'\n        receivers = [ request.to_email_address ]\n\n\n        port = 1025\n        msg = MIMEText('This is test mail')\n\n        msg['Subject'] = request.found+\" found\"\n        msg['From'] = 'admin@example.com'\n        msg['To'] = request.to_email_address\n\n        with smtplib.SMTP('localhost', port) as server:\n            \n            # server.login('username', 'password')\n            server.sendmail(sender, receivers, msg.as_string())\n            print(\"Successfully sent email\")\n\n```\nIf this operation is called using a MyRequest message, the my_message function will be called thanks to the dispatcher, otherwise the on_message function will be called.\n\n## 7.9. The `director` class\nThe Directorclass is used for nonpolling business services, that is, business services which are not automatically called by the production framework (through the inbound adapter) at the call interval.<br>\nInstead these business services are created by a custom application by calling the Director.create_business_service() method.<br>\nThis class defines:\n\n`create_business_service`: The create_business_service() method initiates the specified business service.<br>\n**Parameters**:\n- **connection**: an IRISConnection object that specifies the connection to an IRIS instance for Java.\n- **target**: a string that specifies the name of the business service in the production definition.\n\n**Returns**:\nan object that contains an instance of IRISBusinessService\n\nWIP example\n\n## 7.10. The `objects`\nWe will use `dataclass` to hold information in our [messages](#711-the-messages) in a `obj.py` file.\n\nExample of an object ( situated in the src/python/demo/reddit/obj.py file ):\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass PostClass:\n    title: str\n    selftext : str\n    author: str\n    url: str\n    created_utc: float = None\n    original_json: str = None\n```\n\n## 7.11. The `messages`\nThe messages will contain one or more [objects](#710-the-objects), located in the `obj.py` file.<br>\nMessages, requests and responses all inherit from the `grongier.pex.Message` class.\n\nThese messages will allow us to transfer information between any business service/process/operation.\n\nExample of a message ( situated in the src/python/demo/reddit/message.py file ):\n```python\nfrom grongier.pex import Message\n\nfrom dataclasses import dataclass\n\nfrom obj import PostClass\n\n@dataclass\nclass PostMessage(Message):\n    post:PostClass = None\n    to_email_address:str = None\n    found:str = None\n```\n\nWIP It is to be noted that it is needed to use types when you define an object or a message.\n\n## 7.12. How to regsiter a component \n\nYou can register a component to iris in many way :\n* Only one component with `register_component` \n* All the component in a file with `register_file` \n* All the component in a folder with `register_folder` \n\n### 7.12.1. register_component\n\nStart an embedded python shell :\n\n```sh\n/usr/irissys/bin/irispython\n```\n\nThen use this class method to add a new py file to the component list for interoperability.\n\n```python\nfrom grongier.pex import Utils\nUtils.register_component(<ModuleName>,<ClassName>,<PathToPyFile>,<OverWrite>,<NameOfTheComponent>)\n```\n\ne.g :\n```python\nfrom grongier.pex import Utils\nUtils.register_component(\"MyCombinedBusinessOperation\",\"MyCombinedBusinessOperation\",\"/irisdev/app/src/python/demo/\",1,\"PEX.MyCombinedBusinessOperation\")\n```\n\n### 7.12.2. register_file\n\nStart an embedded python shell :\n\n```sh\n/usr/irissys/bin/irispython\n```\n\nThen use this class method to add a new py file to the component list for interoperability.\n\n```python\nfrom grongier.pex import Utils\nUtils.register_file(<File>,<OverWrite>,<PackageName>)\n```\n\ne.g :\n```python\nfrom grongier.pex import Utils\nUtils.register_file(\"/irisdev/app/src/python/demo/bo.py\",1,\"PEX\")\n```\n\n### 7.12.3. register_folder\n\nStart an embedded python shell :\n\n```sh\n/usr/irissys/bin/irispython\n```\n\nThen use this class method to add a new py file to the component list for interoperability.\n\n```python\nfrom grongier.pex import Utils\nUtils.register_folder(<Path>,<OverWrite>,<PackageName>)\n```\n\ne.g :\n```python\nfrom grongier.pex import Utils\nUtils.register_folder(\"/irisdev/app/src/python/demo/\",1,\"PEX\")\n```\n\n## 7.13. Direct use of Grongier.PEX\n\nIf you don't want to use the register_component util. You can add a Grongier.PEX.BusinessService component directly into the management portal and configure the properties :\n- %module :\n  - Module name of your python code\n- %classname :\n  - Classname of you component\n- %classpaths\n  - Path where you component is.\n    - This can one or more Classpaths (separated by '|' character) needed in addition to PYTHON_PATH\n\ne.g :\n<img width=\"800\" alt=\"component-config\" src=\"https://user-images.githubusercontent.com/47849411/131316308-e1898b19-11df-433b-b1c6-7f69d5cc9974.png\">\n\n# 8. Credits\n\nMost of the code came from PEX for Python by Mo Cheng and Summer Gerry.\n\nWorks only on IRIS 2021.2 +\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grongierisc/interoperability-embedded-python",
    "keywords": "iris_pex_embedded_python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iris-pex-embedded-python",
    "package_url": "https://pypi.org/project/iris-pex-embedded-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/iris-pex-embedded-python/",
    "project_urls": {
      "Homepage": "https://github.com/grongierisc/interoperability-embedded-python"
    },
    "release_url": "https://pypi.org/project/iris-pex-embedded-python/2.0.1/",
    "requires_dist": [
      "dacite (>=1.6.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "iris_pex_embedded_python",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16128022,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd7fa7e78686df7fbe9e7ebb2e890823214ee109d16dcc37bdc7dd694f766c5d",
          "md5": "d6c8de08cf690bc3bd323f2752db4e89",
          "sha256": "fca8cb19e10cedede8b954d57a528d9cf12e99a8a5919b9e0945144eb0341c1d"
        },
        "downloads": -1,
        "filename": "iris_pex_embedded_python-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6c8de08cf690bc3bd323f2752db4e89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 54418,
        "upload_time": "2022-12-16T15:37:35",
        "upload_time_iso_8601": "2022-12-16T15:37:35.815309Z",
        "url": "https://files.pythonhosted.org/packages/fd/7f/a7e78686df7fbe9e7ebb2e890823214ee109d16dcc37bdc7dd694f766c5d/iris_pex_embedded_python-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a73e2574b0b5d7a5eb36415372047c1f22722cb8569eb81e61e4162400c1209",
          "md5": "fee4862c4eff8904b8b775c02affe923",
          "sha256": "8ff8eda9d294619743c88b2d3e72cdbe6eb3c07b1615fc4d0070acb786446bc7"
        },
        "downloads": -1,
        "filename": "iris_pex_embedded_python-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fee4862c4eff8904b8b775c02affe923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 56808,
        "upload_time": "2022-12-16T15:37:38",
        "upload_time_iso_8601": "2022-12-16T15:37:38.102777Z",
        "url": "https://files.pythonhosted.org/packages/0a/73/e2574b0b5d7a5eb36415372047c1f22722cb8569eb81e61e4162400c1209/iris_pex_embedded_python-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d5d35189730c7cfa576ebb2fa61aefe4a18992be71d725593665a33cde7ffe4",
          "md5": "1cff28e979da93e03fed60e28bc42ebf",
          "sha256": "74f5caa06a35e87dd0c372692e1977c6640871b19d679775c1aacec0b9ac9754"
        },
        "downloads": -1,
        "filename": "iris_pex_embedded_python-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cff28e979da93e03fed60e28bc42ebf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 54443,
        "upload_time": "2022-12-16T16:10:49",
        "upload_time_iso_8601": "2022-12-16T16:10:49.107997Z",
        "url": "https://files.pythonhosted.org/packages/8d/5d/35189730c7cfa576ebb2fa61aefe4a18992be71d725593665a33cde7ffe4/iris_pex_embedded_python-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92a5c16e1da3472ca9ab08e54da75ff8bafa95b196598c4230f70f6acd02ddb9",
          "md5": "41e6d96bcea9112eba6f72073d9d2533",
          "sha256": "fd22e042122c411c019060dd0f3fc0320c10872ca5506aaad909c6600880e746"
        },
        "downloads": -1,
        "filename": "iris_pex_embedded_python-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41e6d96bcea9112eba6f72073d9d2533",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 56926,
        "upload_time": "2022-12-16T16:10:52",
        "upload_time_iso_8601": "2022-12-16T16:10:52.304620Z",
        "url": "https://files.pythonhosted.org/packages/92/a5/c16e1da3472ca9ab08e54da75ff8bafa95b196598c4230f70f6acd02ddb9/iris_pex_embedded_python-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d5d35189730c7cfa576ebb2fa61aefe4a18992be71d725593665a33cde7ffe4",
        "md5": "1cff28e979da93e03fed60e28bc42ebf",
        "sha256": "74f5caa06a35e87dd0c372692e1977c6640871b19d679775c1aacec0b9ac9754"
      },
      "downloads": -1,
      "filename": "iris_pex_embedded_python-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1cff28e979da93e03fed60e28bc42ebf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 54443,
      "upload_time": "2022-12-16T16:10:49",
      "upload_time_iso_8601": "2022-12-16T16:10:49.107997Z",
      "url": "https://files.pythonhosted.org/packages/8d/5d/35189730c7cfa576ebb2fa61aefe4a18992be71d725593665a33cde7ffe4/iris_pex_embedded_python-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92a5c16e1da3472ca9ab08e54da75ff8bafa95b196598c4230f70f6acd02ddb9",
        "md5": "41e6d96bcea9112eba6f72073d9d2533",
        "sha256": "fd22e042122c411c019060dd0f3fc0320c10872ca5506aaad909c6600880e746"
      },
      "downloads": -1,
      "filename": "iris_pex_embedded_python-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41e6d96bcea9112eba6f72073d9d2533",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 56926,
      "upload_time": "2022-12-16T16:10:52",
      "upload_time_iso_8601": "2022-12-16T16:10:52.304620Z",
      "url": "https://files.pythonhosted.org/packages/92/a5/c16e1da3472ca9ab08e54da75ff8bafa95b196598c4230f70f6acd02ddb9/iris_pex_embedded_python-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}