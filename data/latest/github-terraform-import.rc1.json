{
  "info": {
    "author": "Brae Webb",
    "author_email": "email@braewebb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Github Terraform Import\n\nPython library to allow simple programmatic control of importing a Github organization as terraform resources.\n\nThe library exposes four key components:\n* Dataclass definitions of all terraform resources in the Github Provider (`github_terraform_import.formatter.github_types.*`)\n* Formatter to easily convert dataclass types into valid terraform configuration syntax (`github_terraform_import.formatter.Formatter`)\n* A metaclass required to implement a visitor pattern for all resources ([`github_terraform_import.visitor.VisitMethodInjector`](#visitmethodinjector))\n* An interface with the Github REST API that will dynamically load Github resources based on methods defined in the given visitor class `github_terraform_import.provider.GithubProvider`\n\n\n## Usage\nCreate a file for each repository which contains the following repository specific resources `github_repository`, `github_repository_collaborator`, `github_team_repository`.\n\n```python\nimport os\nimport sys\n\nfrom github_terraform_import.visitor import VisitMethodInjector\nfrom github_terraform_import.github_types import (\n    GithubRepository,\n    GithubRepositoryCollaborator,\n    GithubTeamRepository,\n)\nfrom github_terraform_import.provider import GithubProvider\nfrom github_terraform_import.formatter import Formatter\n\n\nclass RepositoryConfigurationGenerator(metaclass=VisitMethodInjector):\n    def __init__(self, path):\n        self._root = path\n\n    def visit_github_repository(self, repository: GithubRepository):\n        file_ = os.path.join(self._root, f\"{repository.name}.tf\")\n        with open(file_, \"a+\") as f:\n            Formatter.format(repository.name, repository, out=f)\n\n    def visit_github_repository_collaborator(\n        self, collaborator: GithubRepositoryCollaborator\n    ):\n        file_ = os.path.join(self._root, f\"{collaborator.repository}.tf\")\n        with open(file_, \"a+\") as f:\n            Formatter.format(collaborator.username, collaborator, out=f)\n\n    def visit_github_team_repository(self, team: GithubTeamRepository):\n        file_ = os.path.join(self._root, f\"{team.repository}.tf\")\n        with open(file_, \"a+\") as f:\n            Formatter.format(team.team_id, team, out=f)\n\n\ndef main():\n    if len(sys.argv) < 4:\n        print(\"Usage: example {token} {organization} {output_directory}\")\n        exit()\n\n    directory = sys.argv[3]\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    generator = RepositoryConfigurationGenerator(directory)\n    provider = GithubProvider(sys.argv[1], sys.argv[2])\n    provider.visit(generator)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Features\n* Wrap around the Github API to provide terraform resources\n* Typed resources for each of the terraform resources\n* Dynamic resource fetching based on declared visitor methods\n* Automatic caching of resources on multiple runs\n* Formatting of resource classes to terraform configuration\n* Detectable missing visitor methods\n\n\n## Supported Resources\n| Resource | Supported | Notes |\n| - | - | - |\n| github_actions_secret | :heavy_check_mark: | `plaintext_value` value cannot be imported from Github API, this must be added manually. Defaults to 'WARNING: Secrets cannot be imported via Github API' |\n| github_branch |  |\n| github_branch_protection | :heavy_check_mark: |\n| github_issue_label | :heavy_check_mark: |\n| github_membership | :heavy_check_mark: |\n| github_organization_block | :heavy_check_mark: |\n| github_organization_project | :heavy_check_mark: |\n| github_organization_webhook | :heavy_check_mark: |\n| github_project_column | :heavy_check_mark: |\n| github_repository | :heavy_check_mark: | `delete_branch_on_merge`, `auto_init`, `gitignore_template`, `license_template` are not provided by the API |\n| github_repository_collaborator | :heavy_check_mark: |\n| github_repository_deploy_key | :heavy_check_mark: |\n| github_repository_file |  |\n| github_repository_project | :heavy_check_mark: |\n| github_repository_webhook | :heavy_check_mark: |\n| github_team | :heavy_check_mark: | `ldap_dn` not provided by the API |\n| github_team_membership | :heavy_check_mark: |\n| github_team_repository | :heavy_check_mark: |\n| github_user_gpg_key |  |\n| github_user_invitation_accepter |  |\n| github_user_ssh_key |  |\n\n\n## VisitMethodInjector\nUse the `VisitMethodInjector` metaclass in your customised visitor class to provide instructions for handling various fetched resources.\n\n### Standard Use\nThe standard use case for your visitor class is to define a method for each of the resources you wish to import. For example if you wish to import all the repository webhooks, a class like `FetchRepositoryWebhooks` would suffice.\n\n```python\nclass FetchRepositoryWebhooks(metaclass=VisitMethodInjector):\n    def visit_github_repository_webhook(self, webhook: GithubRepositoryWebhook):\n        pass\n```\n\nVisit methods must be named, as `visit_{resource_name}`.\n\n### Default Method\nIf there is some method that should be run for every resource without an implemented visitor method, you can use the default method for this purpose.\n\n```python\nclass FetchWithDefault(metaclass=VisitMethodInjector):\n    def visit_github_repository_webhook(self, webhook: GithubRepositoryWebhook):\n        pass\n\n    def default(self, resource: Resource):\n        print(resource)\n```\n\n`FetchWithDefault` will call default for all of the resources except `github_repository_webhook`.\n\n### Validation\nIf you want to ensure that every resource has an implemented visitor method, then setting the class variable `ignore_missing` to `False` will cause a `TypeError` to be thrown if there are any missing visitor methods.\n\n```python\nclass FetchWithValidation(metaclass=VisitMethodInjector):\n    ignore_missing = False\n```\n\n`FetchWithValidation` will throw a type exception when constructed listing all of the missing visit methods.\n\n\n## Formatter\nThe `Formatter` class provides a way of converting the supplied dataclasses for each resource into an appropriately formatted Terraform resource.\n\nThis is accomplished by calling the `Formatter.format` method. The method can also be used for any custom dataclasses so long as they inherit from `github_terraform_import.github_types.Resource`.\n\nAny member variables starting with an underscore, conventionally private, are not generated in the resource.\n\n```python\n@dataclass\nclass NestedDetails(Block):\n    description: str\n    topics: List[str]\n\n@dataclass\nclass MyTerraformResource(Resource):\n    name: str\n    id: int\n    valid: bool\n\n    friends: List[str]\n\n    details: NestedDetails\n```\n\nThe above `MyTerraformResource` is an example dataclass definition which showcases the various supported types of the formatter.\n\nExecuting the following will write the resource to `out.txt`\n```python\ndetails = NestedDetails(\n    description=\"Things I like\",\n    topics=[\"verification\", \"optimisation\"],\n)\n\nresource = MyTerraformResource(\n    name=\"a special resource\",\n    id=\"special\",\n    valid=True,\n    friends=[],\n    details=details,\n)\n\n\nwith open(\"out.txt\", \"w\") as file:\n    Formatter.format(\"my_resource_name\", resource, out=file)\n```\n\nThe contents of out should then be:\n```\nresource \"my_terraform_resource\" \"my_resource_name\" {\n    name = \"a special resource\"\n    id = special\n    valid = true\n    friends = []\n    details {\n        description = \"Things I like\"\n        topics = [\n            \"verification\"\n            \"optimisation\"\n        ]\n    }\n}\n```\n\nIf the `out` keyword argument is omitted from the `Formatter.format` method then the resource will be printed to standard out.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BraeWebb/github-terraform-import",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "github-terraform-import",
    "package_url": "https://pypi.org/project/github-terraform-import/",
    "platform": "",
    "project_url": "https://pypi.org/project/github-terraform-import/",
    "project_urls": {
      "Homepage": "https://github.com/BraeWebb/github-terraform-import"
    },
    "release_url": "https://pypi.org/project/github-terraform-import/0.0.1/",
    "requires_dist": [
      "requests (>=2.0)"
    ],
    "requires_python": "",
    "summary": "Import or sync existing Github infrastructure into terraform",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7246000,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c0f419fffa4ab4cb70cc5eeb930bd56e4a9836dad6e8aeda01adf68a18797f5",
          "md5": "dc475274a3e3f62d0ff9a97bf5ba795b",
          "sha256": "1cad689d84e81c3884068bbaf774a9e263c8ca7e7d17c8330f9b2368cdedab61"
        },
        "downloads": -1,
        "filename": "github_terraform_import-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc475274a3e3f62d0ff9a97bf5ba795b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22315,
        "upload_time": "2020-05-15T05:07:55",
        "upload_time_iso_8601": "2020-05-15T05:07:55.460503Z",
        "url": "https://files.pythonhosted.org/packages/5c/0f/419fffa4ab4cb70cc5eeb930bd56e4a9836dad6e8aeda01adf68a18797f5/github_terraform_import-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae38a94403201cd18b248dc33a06eacaa2af4844ce0f1cb13c475e8f3b484e1",
          "md5": "841c9e7e9b5d43e5f6437157d90b201b",
          "sha256": "e1e00060be1bf21420fd308f11e179cc32d9fa32bc004e50ea46452751b97d31"
        },
        "downloads": -1,
        "filename": "github_terraform_import-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "841c9e7e9b5d43e5f6437157d90b201b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15433,
        "upload_time": "2020-05-15T05:07:58",
        "upload_time_iso_8601": "2020-05-15T05:07:58.181112Z",
        "url": "https://files.pythonhosted.org/packages/ca/e3/8a94403201cd18b248dc33a06eacaa2af4844ce0f1cb13c475e8f3b484e1/github_terraform_import-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c0f419fffa4ab4cb70cc5eeb930bd56e4a9836dad6e8aeda01adf68a18797f5",
        "md5": "dc475274a3e3f62d0ff9a97bf5ba795b",
        "sha256": "1cad689d84e81c3884068bbaf774a9e263c8ca7e7d17c8330f9b2368cdedab61"
      },
      "downloads": -1,
      "filename": "github_terraform_import-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc475274a3e3f62d0ff9a97bf5ba795b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22315,
      "upload_time": "2020-05-15T05:07:55",
      "upload_time_iso_8601": "2020-05-15T05:07:55.460503Z",
      "url": "https://files.pythonhosted.org/packages/5c/0f/419fffa4ab4cb70cc5eeb930bd56e4a9836dad6e8aeda01adf68a18797f5/github_terraform_import-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cae38a94403201cd18b248dc33a06eacaa2af4844ce0f1cb13c475e8f3b484e1",
        "md5": "841c9e7e9b5d43e5f6437157d90b201b",
        "sha256": "e1e00060be1bf21420fd308f11e179cc32d9fa32bc004e50ea46452751b97d31"
      },
      "downloads": -1,
      "filename": "github_terraform_import-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "841c9e7e9b5d43e5f6437157d90b201b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15433,
      "upload_time": "2020-05-15T05:07:58",
      "upload_time_iso_8601": "2020-05-15T05:07:58.181112Z",
      "url": "https://files.pythonhosted.org/packages/ca/e3/8a94403201cd18b248dc33a06eacaa2af4844ce0f1cb13c475e8f3b484e1/github_terraform_import-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}