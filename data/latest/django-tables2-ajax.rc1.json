{
  "info": {
    "author": "Tristan Balon",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# django_tables2_ajax\n\nThis project is intended to provide added functionality to the already outstanding [django_tables2](https://github.com/jieter/django-tables2) library, inspired & based off of [django-ajax-tables](https://github.com/KiwiTrinsic/django-ajax-tables). Using this package, you'll be able to easily implement responsive full-text search capabilities, pagination and more.\n\nSee project on [GitHub](https://github.com/LegendaryFire/django-tables2-ajax).\n\n## Installation\n\nThis can be installed using pip by following the steps below.\n\nIn your Python environment, install django_tables2_ajax.\n\n```\npip install django_tables2_ajax\n```\n\nAdd the following to your projects *INSTALLED_APPS* variable found in *settings.py* so it looks as such.\n\n```\nINSTALLED_APPS = [\n    'django_tables2',\n    'django_tables2_ajax',\n]\n```\n\nFrom there, we can begin by adding a table class in a new file named *tables.py* located in your apps directory, as we would with [django_tables2](https://django-tables2.readthedocs.io/en/latest/pages/tutorial.html).\n\n```\nclass PersonTable(tables.Table):\n    class Meta:\n        model = Person\n        template_name = \"django_tables2/bootstrap.html\"\n        fields = (\"name\", )\n```\n\nOnce we've made our table class, we can add a function in our apps *views.py* file to handle AJAX requests for table data. You will find below a function named *build_filter*, however this mainly intended for development purposes, and a more efficient full-text search algorithm should be used for production.\n```\ndef build_filter(search, *args, **kwargs):\n    \"\"\"\n    Builds a search filter given the search parameters & search text.\n    Use like a regular filter, except set any values you want searched set to True.\n    \"\"\"\n    children = [*args, *sorted(kwargs.items())]\n    search_keywords = search.split()\n    search_filter = Q(_connector=\"AND\")\n    for keyword in search_keywords:\n        current_filter = Q(_connector=\"OR\")\n        for (key, value) in children:\n            if value is True:\n                current_filter.children.append((key, keyword))\n        search_filter.children.append(current_filter)\n    return search_filter\n\n\ndef table_person(request):\n    # Get the search query, if it exists.\n    search = request.GET.get(\"search\")\n    # Check to see if the search query exists.\n    if search:\n        # Search for specified fields, etc.\n        search_filter = build_filter(search, first_name__icontains=True, last_name__icontains=True)\n        table = PersonTable(Person.objects.filter(search_filter))\n    else:\n        table = PersonTable(Person.objects.all())\n\n    RequestConfig(request).configure(table)\n    return HttpResponse(table.as_html(request))\n```\n\nFrom there, we must add a URL pattern so the table can fetch the tables contents, and update the table contents when something is searched, or a page is changed. In our apps *urls.py* file, we can add the following URL routing.\n\n```\npath('table-person/', views.table_person, name=\"TablePerson\")\n```\n\nNow that we have our table requests, search handling & URL routing finished, we can begin to implement it into one of our views templates. There is nothing needed in the context of the view you want the table on, the only thing that is required for having the table appear on your page is to have it implemented into your views template.\n\nInside the template of the view you'd like the table to appear, add the following script to the bottom of the body tag, or to the head tag.\n\n```\n<script src=\"{% static 'django_tables2_ajax/tables.js' %}\" type=\"application/javascript\"></script>\n```\n\nThen, wherever you would like the table to show on your template, insert the table as such. The first argument is the HTML ID of the table & related objects. This can be anything you'd like however if there are multiple tables on your page these must be different. The second argument is the URL pattern we created for handling the AJAX requests.\n\n```\n{% responsive_table \"myTableID\" \"example:TablePerson\" %}\n```\n\nAll done! From there we can add as many more tables to our template as we please.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LegendaryFire/django-tables2-ajax",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tables2-ajax",
    "package_url": "https://pypi.org/project/django-tables2-ajax/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-tables2-ajax/",
    "project_urls": {
      "Homepage": "https://github.com/LegendaryFire/django-tables2-ajax"
    },
    "release_url": "https://pypi.org/project/django-tables2-ajax/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-tables2 but with AJAX searching.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17052849,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c4cdee956fbd83d716e1c76e26a3a62620d59e2e1f03f84df7879059252a28b",
          "md5": "20941a5c88a7eefa21fdbe2c4354e131",
          "sha256": "1e08e20a0251f53db724a56ef832320d01d5321a86271fc3d6a7706a30e4f5ec"
        },
        "downloads": -1,
        "filename": "django_tables2_ajax-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20941a5c88a7eefa21fdbe2c4354e131",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6057,
        "upload_time": "2023-02-26T20:36:51",
        "upload_time_iso_8601": "2023-02-26T20:36:51.697597Z",
        "url": "https://files.pythonhosted.org/packages/2c/4c/dee956fbd83d716e1c76e26a3a62620d59e2e1f03f84df7879059252a28b/django_tables2_ajax-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c4cdee956fbd83d716e1c76e26a3a62620d59e2e1f03f84df7879059252a28b",
        "md5": "20941a5c88a7eefa21fdbe2c4354e131",
        "sha256": "1e08e20a0251f53db724a56ef832320d01d5321a86271fc3d6a7706a30e4f5ec"
      },
      "downloads": -1,
      "filename": "django_tables2_ajax-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20941a5c88a7eefa21fdbe2c4354e131",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6057,
      "upload_time": "2023-02-26T20:36:51",
      "upload_time_iso_8601": "2023-02-26T20:36:51.697597Z",
      "url": "https://files.pythonhosted.org/packages/2c/4c/dee956fbd83d716e1c76e26a3a62620d59e2e1f03f84df7879059252a28b/django_tables2_ajax-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}