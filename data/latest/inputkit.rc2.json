{
  "info": {
    "author": "Alawi Hussein Adnan Al Sayegh",
    "author_email": "programming.laboratorys@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# inputkit\nlibrary of input functions. and an input API\n\n\ntested in windows 10('10.0.19041') and python 3(Python 3.9.2)\n# installation\n\nRun the following to install:\n```cmd\npip install inputkit\n```\n### or\n```cmd\npython -m pip install inputkit\n```\nif that didn't work, try replacing `pip` with `pip3`.\n\nneed help? or have bugs to report, my discord: [lab](https://discord.gg/vzEZnC7CM8)\n\n# Welcome to the inputkit wiki!\n#### [github wiki](https://github.com/programminglaboratorys/inputkit/wiki)\n### library of input functions. and an input API\nthat can be used easily.\n\nthat can be helpful when getting inputs from the users\n\n\n> ## pages\n- [codes](https://github.com/programminglaboratorys/inputkit/wiki/CODES)\n- [inputlib module](https://github.com/programminglaboratorys/inputkit/wiki/inputlib-module)\n- [inputs module](https://github.com/programminglaboratorys/inputkit/wiki/inputs-module)\n- [inputstools module](https://github.com/programminglaboratorys/inputkit/wiki/inputstools-module)\n\n# codes\ncodes to copy ;)\n## import everything\n```python\nimport inputkit.inputstools as inputstools # some functions that i made for testing&fun\nimport inputkit.inputs as inputs\nprint(\"inputstools attrs\",dir(inputstools))\nprint(\"inputs attrs\",dir(inputs))\nfrom inputkit import *\n```\n\n## those wait for a char/key lkinput\n```python\nkey,char = any_input () # wait for user input. returns ((char|key) or together)\nchar     = char_input() # wait for user input. returns char\nkey      = key_input () # wait for user input. returns key\n```\n\n## hide a password\n```python\npassword = password_input(\"Enter your password: \") # hide the input with (star=\"*\")\n```\n\n## eval an input\n```python\ntype = amazing_input(\"enter a type: \") # returns a type \"10\"=>int(\"10\")\n```\n\n## parse an input to commandline list\n```python\ncmd,laststr = commandline_input(\"enter a command>\") # parser the command returns list,laststr \"hello \\\"hi i am a big string\\\" more stuff\" => (['hello', 'hi i am a big string', 'more', 'stuff'], None)\n```\n\n## parser url\n```python\nparserUrl,querys = urlparse_input(\"enter a url: \") # string to ParseUrl \"https://google.com/kit?hi=1&yay=omg\" => (ParseResult(snetloc='google.com', path='/kit', params='', query='hi=1&yay=omg', fragment=''), {'hi': ['1'], 'yay': ['omg']})\n```\n\n## wait for a type\n```python\n# going to change the default check function\ndef check(i,x,y,z): # x is the input value\n\tif x.__class__.__name__== \"int\": # check if the type is int by name\n\t\ti.stop() # i = Input(); stop(the loop)\nnum = input_wait_for(\"int\",\"enter a number\",check=check) # wait for input type int,list,dict,etc  \n```\n\n## check input\n```python\ndef check(cls,input):\n\tinput = input.lower()\n\tif input==\"hello\":\n\t\tprint(\"hello\")\n\telif input==\"yo\":\n\t\tprint(\"yo, bro\")\n\telif input==\"good\":\n\t\tprint(\"me too\")\n\telse:\n\t\tprint(\"whats up?\")\n\t\treturn \"no input\" # return before we stop the input\n\tcls.stop() # stop the input loop\n\treturn \"bye\"\noutput = check_input(prompt,check=check) # check_input(prompt=\"\",check=None,input=input); (input = input) default input function\nprint(output) # output: bye\n```\n\n## limit input length\n```python\nlimited_string = limit_input(\"prompt:\",length=14) # Limit an input length return when the len(input) is equal to length\n```\n\n## child process\n```python\n# porcess keyword is a function. that can be replaced\nproc = subprocess_input(\"enter process command:\") # run a child process. warpper for commandline_input\n\"\"\"\nanother example subprocess_input(prompt=\"\",process=None,*args,**kw):\n\t>>> subprocess_input(\"enter process command:\",timeout=10,stdout=-1,process=subprocess.run)\n\tenter process command:python -c \"print('Hello')\"\n\tCompletedProcess(args=['python', '-c', \"print('Hello')\"], returncode=0, stdout=b'Hello\\r\\n')\n\"\"\"\n```\n\n## os.system input\n```python\ncode = system_input(\"enter a command:\") # run a commandline command returns the exit code\n```\n\n## ignore input\n```\nignore_input() # a just input to ignore any inputs. help (\"\"\"ignore_input will wait for enter or ^C\"\"\")\n```\n\n## yes or no input\n```python\nf_t = yn_input(\"Do you want to eat some vegetables?(y/n):\") # warpper for check_input \"\"\" yes|no input wait for the user to input ([yes,y,true] or [no,n,false]) returns booling\"\"\"\n\"\"\"\nanother example yn_input(prompt=\"\"):\n\t>>> yn_input(\"Do you want to eat some vegetables?(y/n):\")\n\tDo you want to eat some vegetables?(y/n):what\n\tinvalid option for (y/n). try again\n\tDo you want to eat some vegetables?(y/n):no\n\tFalse # returns False cuz i enter no\n\"\"\"\n```\n## Input class\nInput API(tested in windows 10)\n```python\nfrom Input import *\nfrom inputstools import parser_keys\n# how to create attr 'proxy_string'\nwith Input(\"Hello World!:\",proxy_string=[],extra_events=dict()) as _input:\n\t_input.add_event(\"on_newline\",built_in_events_Input.on_newline)\n\t@_input.event\n\tdef on_update(cls,start=\"\\x0D\",deleted=False):\n\t\tif deleted: # going to delete char from the prompt\n\t\t\ttry:\n\t\t\t\tcls.proxy_string[len(cls)] = \" \" # replace it with\n\t\t\t\tprint(start+cls.prompt+\"\".join(cls.proxy_string),end=\"\")\n\t\t\t\tdel cls.proxy_string[len(cls)] # deleted the space after printing it\n\t\t\texcept IndexError: # handler\n\t\t\t\tcls.proxy_string = list(cls) # replace cls.proxy_string with the input\n\t\tprint(start+cls.prompt+\"\".join(cls.proxy_string),end=\"\")\n\n\t@_input.event\n\tdef on_write(cls,module,prompt):\n\t\tcls.dispatch(\"update\") # create an event\n\t@_input.event\n\tdef on_start(cls):\n\t\tcls.run() # start running\n\t@_input.event\n\tdef on_read(cls,k,c):\n\t\tif c == b\"\\r\": # pressed enter or ^M\n\t\t\tcls.stop() # stop running\n\t\telif k == b\"\\x08\": # on press BackSpace\n\t\t\tcls-=1\n\t\t\tcls.dispatch(\"update\",deleted=True) # create an event\n\t\telif k == b'\\xe0' or k == b\"\\x00\": # type ignore\n\t\t\t#key = parser_keys(c.decode())  # get KeyError if the key is not defind\n\t\t\t#print(key,\"has been prassed\")\n\t\t\t# Parser(UP = \"H\", DOWN = \"P\", RIGHT = \"M\", LEFT = \"K\")\n\t\t\tpass # we're going to ignore this.\n\t\telse:\n\t\t\tcls+=c.decode() # add char to cls.input\n\t\t\tcls.proxy_string=list(cls)\n\t@_input.event\n\tdef on_close(cls,output):\n\t\tprint(cls.proxy_string)\n\n\toutput = _input.start()\n\tprint()\n\tprint(repr(output)) # the input\n```\n> **Note**\n> cls.input type of String not str.\n> str doesn't support -=\n\n\n\n\n\nChange Log\n==========\n\n0.2.0 (2022/09/19)\n-------------------\n- First Release\n- supporting linux\n- removing join, filter. and debugging password_input_\n- fixing install_requires\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "inputs,inputing,inputed,input,inputtools,tools,toolkit,tooling,useful_input,useful",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inputkit",
    "package_url": "https://pypi.org/project/inputkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/inputkit/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/inputkit/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "library of input functions. and an input API",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15146641,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a85b7aebd157b4005c72675a71fb1f737d29deaf0e61e18af72d8b80ae24e5",
          "md5": "b52e78239d0dfdfb002107748744d241",
          "sha256": "9ee5cd76d8ed6a2e21a1a0ef2727760620fad66f67ab9b8fe0158bc585dd949f"
        },
        "downloads": -1,
        "filename": "inputkit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b52e78239d0dfdfb002107748744d241",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11383,
        "upload_time": "2022-07-31T21:46:13",
        "upload_time_iso_8601": "2022-07-31T21:46:13.159728Z",
        "url": "https://files.pythonhosted.org/packages/59/a8/5b7aebd157b4005c72675a71fb1f737d29deaf0e61e18af72d8b80ae24e5/inputkit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "382dc2ee31cf9696d250ab53176d08fb46319508b781e675e9660097e562fe25",
          "md5": "4b90002b5c1d271ad0fd686ad0a6793b",
          "sha256": "eeab927d949de25db91bef9b17d7797f966cb6890efe21810bd4fca909650ee2"
        },
        "downloads": -1,
        "filename": "inputkit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b90002b5c1d271ad0fd686ad0a6793b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14411,
        "upload_time": "2022-07-31T21:46:15",
        "upload_time_iso_8601": "2022-07-31T21:46:15.235800Z",
        "url": "https://files.pythonhosted.org/packages/38/2d/c2ee31cf9696d250ab53176d08fb46319508b781e675e9660097e562fe25/inputkit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95682e8ebbeaa0b508c925d047f5fc22e2378ef90ee78ba5723a95ae38a6b9ae",
          "md5": "f2bdf1350540c1f6a3740379a943f39c",
          "sha256": "a365a3ac2949882e70a91561eca1a7ef8cd941655872bb92acc93a57b55deae6"
        },
        "downloads": -1,
        "filename": "inputkit-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2bdf1350540c1f6a3740379a943f39c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13411,
        "upload_time": "2022-09-19T19:32:56",
        "upload_time_iso_8601": "2022-09-19T19:32:56.527447Z",
        "url": "https://files.pythonhosted.org/packages/95/68/2e8ebbeaa0b508c925d047f5fc22e2378ef90ee78ba5723a95ae38a6b9ae/inputkit-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7535922838d1b96af5cbe249820ed0cdb0e80d566095bc8f5a08621f60b35e51",
          "md5": "347f39e45eb57bf3bcd6b01d9d95613b",
          "sha256": "dec4b8f07996e708156e85341edbca46f2c07fb39c89ae74237b56e13ae17bcb"
        },
        "downloads": -1,
        "filename": "inputkit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "347f39e45eb57bf3bcd6b01d9d95613b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22838,
        "upload_time": "2022-09-19T19:32:58",
        "upload_time_iso_8601": "2022-09-19T19:32:58.267377Z",
        "url": "https://files.pythonhosted.org/packages/75/35/922838d1b96af5cbe249820ed0cdb0e80d566095bc8f5a08621f60b35e51/inputkit-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95682e8ebbeaa0b508c925d047f5fc22e2378ef90ee78ba5723a95ae38a6b9ae",
        "md5": "f2bdf1350540c1f6a3740379a943f39c",
        "sha256": "a365a3ac2949882e70a91561eca1a7ef8cd941655872bb92acc93a57b55deae6"
      },
      "downloads": -1,
      "filename": "inputkit-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2bdf1350540c1f6a3740379a943f39c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13411,
      "upload_time": "2022-09-19T19:32:56",
      "upload_time_iso_8601": "2022-09-19T19:32:56.527447Z",
      "url": "https://files.pythonhosted.org/packages/95/68/2e8ebbeaa0b508c925d047f5fc22e2378ef90ee78ba5723a95ae38a6b9ae/inputkit-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7535922838d1b96af5cbe249820ed0cdb0e80d566095bc8f5a08621f60b35e51",
        "md5": "347f39e45eb57bf3bcd6b01d9d95613b",
        "sha256": "dec4b8f07996e708156e85341edbca46f2c07fb39c89ae74237b56e13ae17bcb"
      },
      "downloads": -1,
      "filename": "inputkit-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "347f39e45eb57bf3bcd6b01d9d95613b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22838,
      "upload_time": "2022-09-19T19:32:58",
      "upload_time_iso_8601": "2022-09-19T19:32:58.267377Z",
      "url": "https://files.pythonhosted.org/packages/75/35/922838d1b96af5cbe249820ed0cdb0e80d566095bc8f5a08621f60b35e51/inputkit-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}