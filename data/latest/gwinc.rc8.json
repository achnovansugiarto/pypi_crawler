{
  "info": {
    "author": "LIGO Scientific Collaboration",
    "author_email": "jameson.rollins@ligo.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "[![pipeline status](https://git.ligo.org/gwinc/pygwinc/badges/master/pipeline.svg)](https://git.ligo.org/gwinc/pygwinc/commits/master)\n\n# Python Gravitational Wave Interferometer Noise Calculator\n\n[![aLIGO](https://gwinc.docs.ligo.org/pygwinc/ifo/aLIGO.png \"Canonical\nIFOs\")](IFO.md)\n\n`pygwinc` is a multi-faceted tool for processing and plotting noise\nbudgets for ground-based gravitational wave detectors.  It's primary\nfeature is a collection of mostly analytic [noise calculation\nfunctions](#noise-functions) for various sources of noise affecting\ndetectors (`gwinc.noise`):\n\n* quantum noise\n* mirror coating thermal noise\n* mirror substrate thermal noise\n* suspension fiber thermal noise\n* seismic noise\n* Newtonian/gravity-gradient noise\n* residual gas noise\n\n`pygwinc` is also a generalized noise budgeting tool (`gwinc.nb`) that\nallows users to create arbitrary noise budgets (for any experiment,\nnot just ground-based GW detectors) using measured or analytically\ncalculated data.  See the [budget interface](#Budget-interface)\nsection below.\n\n`pygwinc` includes canonical budgets for various well-known current\nand future GW detectors (`gwinc.ifo`):\n\n* [aLIGO](https://gwinc.docs.ligo.org/pygwinc/ifo/aLIGO.png)\n* [A+](https://gwinc.docs.ligo.org/pygwinc/ifo/Aplus.png)\n* [Voyager](https://gwinc.docs.ligo.org/pygwinc/ifo/Voyager.png)\n* [Cosmic Explorer 1](https://gwinc.docs.ligo.org/pygwinc/ifo/CE1.png)\n* [Cosmic Explorer 2 (Silica)](https://gwinc.docs.ligo.org/pygwinc/ifo/CE2silica.png)\n* [Cosmic Explorer 2 (Silicon)](https://gwinc.docs.ligo.org/pygwinc/ifo/CE2silicon.png)\n\nSee [IFO.md](IFO.md) for the latest CI-generated plots and hdf5 cached\ndata.\n\nThe [`inspiral_range`](https://git.ligo.org/gwinc/inspiral-range)\npackage can be used to calculate various common \"inspiral range\"\nfigures of merit for gravitational wave detector budgets.  See the\n[inspiral range](#inspiral-range) section below.\n\n\n## usage\n\n### command line interface\n\n`pygwinc` provides a command line interface that can be used to\ncalculate and plot the various canonical IFO noise budgets described\nabove.  For most distributions this should be available via\n`gwinc` at the command line, or `python3 -m gwinc` otherwise:\n```shell\n$ gwinc aLIGO\n```\nOr [custom budgets](#budget-interface) may also be processed by providing\nthe path to the budget module/package:\n```shell\n$ gwinc path/to/mybudget\n```\n\nBudget plots can be saved in various formats (.png, .svg, .pdf):\n```shell\n$ gwinc --save aLIGO.png aLIGO\n```\nOr trace data can be saved to an\n[HDF5](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) file:\n```shell\n$ gwinc --save aLIGO.hdf5 aLIGO\n```\nTrace HDF5 files can also be plotted directly:\n```shell\n$ gwinc aLIGO.hdf5\n```\n\nThe `--range` option can be used to include the values of various\ninspiral ranges for the overall noise in the output.\n\nIFO parameters can be manipulated from the command line with the\n`--ifo` option:\n```shell\n$ gwinc aLIGO --ifo Optics.SRM.Tunephase=3.14\n```\nYou can also dump the IFO parameters to a [YAML-formatted parameter\nfile](#yaml-parameter-files):\n```shell\n$ gwinc --yaml aLIGO > my_aLIGO.yaml\n$ edit my_aLIGO.yaml\n$ gwinc -d my_aLIGO.yaml aLIGO\n                             aLIGO    my_aLIGO.yaml\nMaterials.Coating.Philown    5e-05            3e-05\n$ gwinc my_aLIGO.yaml\n```\nStand-alone YAML files assume the nominal ['aLIGO' budget\ndescription](gwinc/ifo/aLIGO).\n\nThe command line interface also includes an \"interactive\" mode which\nprovides an [IPython](https://ipython.org/) shell for interacting with\na processed budget:\n```shell\n$ gwinc -i Aplus\nGWINC interactive shell\n\nThe 'ifo' Struct and 'trace' data are available for inspection.\nUse the 'whos' command to view the workspace.\n\nYou may interact with the plot using the 'plt' functions, e.g.:\n\nIn [.]: plt.title(\"My Special Budget\")\nIn [.]: plt.savefig(\"mybudget.pdf\")\n\nIn [1]: \n```\n\nSee command help for more info:\n```shell\n$ gwinc --help\n```\n\n\n### library interface\n\nFor custom plotting, parameter optimization, etc. all functionality can be\naccessed directly through the `gwinc` library interface:\n```python\n>>> import gwinc\n>>> budget = gwinc.load_budget('aLIGO')\n>>> trace = budget.run()\n>>> fig = trace.plot()\n>>> fig.show()\n```\nA default frequency array is used, but alternative frequencies can be\nprovided to `load_budget()` either in the form of a numpy array:\n```python\n>>> import numpy as np\n>>> freq = np.logspace(1, 3, 1000)\n>>> budget = gwinc.load_budget('aLIGO', freq=freq)\n```\nor frequency specification string ('FLO:[NPOINTS:]FHI'):\n```python\n>>> budget = gwinc.load_budget('aLIGO', freq='10:1000:1000')\n```\n\nThe `load_budget()` function takes most of the same inputs as the\ncommand line interface (e.g. IFO names, budget module paths, YAML\nparameter files), and returns the instantiated `Budget` object defined\nin the specified budget module (see [budget\ninterface](#budget-interface) below).  The budget `ifo` `gwinc.Struct`\nis available in the `budget.ifo` attribute.\n\nThe budget `run()` method calculates all budget noises and the noise\ntotal and returns a `BudgetTrace` object with `freq`, `psd`, and `asd`\nproperties.  The budget sub-traces are available through a dictionary\n(`trace['QuantumVacuum']`) interface and via attributes\n(`trace.QuantumVacumm`).\n\nThe budget `freq` and `ifo` attributes can be updated at run time by\npassing them as keyword arguments to the `run()` method:\n```python\n>>> budget = load_budget('aLIGO')\n>>> freq = np.logspace(1, 3, 1000)\n>>> ifo = Struct.from_file('/path/to/ifo_alt.yaml')\n>>> trace = budget.run(freq=freq, ifo=ifo)\n```\n\n\n## noise functions\n\nThe `pygwinc` analytical noise functions are available in the\n`gwinc.noise` package.  This package includes multiple sub-modules for\nthe different types of noises, e.g. `suspensionthermal`,\n`coatingthermal`, `quantum`, etc.)\n\nThe various noise functions need many different parameters to\ncalculate their noise outputs.  Many parameters are expected to be in\nthe form of object attributes of a class-like container that is passed\nto the calculation function.  The pygwinc\n[`Struct`](#gwinc.Struct-objects) object is designed to hold such\nparameters.\n\nFor instance, the `coating_brownian` function expects a `materials`\nstructure as input argument, that holds the various mirror materials\nparameters (e.g. `materials.Substrate.MirrorY`):\n```python\ndef coating_brownian(f, materials, wavelength, wBeam, dOpt):\n    ...\n    # extract substructures\n    sub = materials.Substrate\n    ...\n    # substrate properties\n    Ysub = sub.MirrorY\n```\n\n\n## `gwinc.Struct` objects\n\n`pygwinc` provides a `Struct` class that can hold parameters in\nattributes and additionally acts like a dictionary, for passing to the\nnoise calculation functions.  `Struct`s can be created from\ndictionaries, or loaded from various file formats (see below).\n\n\n### YAML parameter files\n\nThe easiest way to store all budget parameters is in a YAML file.\nYAML files can be loaded directly into `gwinc.Struct` objects via\nthe `Struct.from_file()` class method:\n```python\nfrom gwinc import Struct\nifo = Struct.from_file('/path/to/ifo.yaml')\n```\n\nYAML parameter files can also be given to the `load_budget()` function\nas described above, in which case the base 'aLIGO' budget structure\nwill be assumed and returned, with the YAML Struct inserted in the\n`Budget.ifo` class attribute.\n\nHere are the included ifo.yaml files for all the canonical IFOs:\n\n* [aLIGO.yaml](gwinc/ifo/aLIGO/ifo.yaml)\n* [Aplus.yaml](gwinc/ifo/Aplus/ifo.yaml)\n* [Voyager.yaml](gwinc/ifo/Voyager/ifo.yaml)\n* [CE1.yaml](gwinc/ifo/CE1/ifo.yaml)\n* [CE2.yaml](gwinc/ifo/CE2/ifo.yaml)\n\nThe `Struct.from_file()` class method can also load MATLAB structs\ndefined in .mat files, for compatibility with\n[matgwinc](https://git.ligo.org/gwinc/matgwinc), and MATLAB .m files,\nalthough the later requires the use of the [python MATLAB\nengine](https://www.mathworks.com/help/matlab/matlab-engine-for-python.html).\n\n\n## budget interface\n\n`pygwinc` provides a generic noise budget interface, `gwinc.nb`, that\ncan be used to define custom noise budgets (it also underlies the\n\"canonical\" budgets included in `gwinc.ifo`).  Budgets are defined in\na \"budget module\" which includes `BudgetItem` definitions.\n\n### BudgetItem classes\n\nThe `gwinc.nb` package provides three `BudgetItem` classes that can be\ninherited to define the various components of a budget:\n\n* `nb.Noise`: a noise source\n* `nb.Calibration`: a noise calibration\n* `nb.Budget`: a group of noises\n\nThe primary action of a `BudgetItem` happens in it's `calc()` method.\nFor `Noise` classes, the `calc` method should return the noise PSD at\nthe specified frequency points.  For the `Calibration` class, `calc`\nshould return a frequency response.  `Budget` classes should not have\na special `calc` method defined as they already know how to calculate\nthe overall noise from their constituent noises and calibrations.\n\nAdditionally `BudgetItem`s have two other methods, `load` and\n`update`, that can be overridden by the user to handle arbitrary data\nprocessing.  These are useful for creating budgets from \"live\" dynamic\nnoise measurements and the like.  The three core methods therefore\nare:\n\n* `load()`: initial loading of static data\n* `update(**kwargs)`: update data/attributes\n* `calc()`: return final data array\n\nGenerally these methods are not called directly.  Instead, the `Noise`\nand `Budget` classes include a `run` method that smartly executes them\nin sequence and returns a `BudgetTrace` object for the budget.\n\nSee the built-in `BudgetItem` documentation for more info\n(e.g. `pydoc3 gwinc.nb.BudgetItem`)\n\n\n### budget module definition\n\nA budget module is a standard python module (single `.py` file) or\npackage (directory containing `__inti__.py` file) containing\n`BudgetItem` definitions describing the various noises and\ncalibrations of a budget, as well as the overall budget calculation\nitself.  Each budget module should include one `nb.Budget` class\ndefinition named after the module name.\n\nHere's an example of a budget module named `MyBudget`.  It defines two\n`Noise` classes and one `Calibration` class, as well as the overall\n`Budget` class (name `MyBudget` that puts them all together):\n```shell\n$ find MyBudget\nMyBudget/\nMyBudget/__init__.py\nMyBudget/ifo.yaml\n$\n```\n\n```python\n# MyBudget/__init__.py\n\nimport numpy as np\nfrom gwinc import nb\nfrom gwinc import noise\n\n\nclass SuspensionThermal(nb.Noise):\n    \"\"\"Suspension thermal noise\"\"\"\n    style = dict(\n        label='Suspension Thermal',\n        color='#ad900d',\n        linestyle='--',\n    )\n\n    def calc(self):\n        n = noise.suspensionthermal.suspension_thermal(\n            self.freq, self.ifo.Suspension)\n        return 2 * n\n\n\nclass MeasuredNoise(nb.Noise):\n    style = dict(\n        label='Measured Noise',\n        color='#838209',\n        linestyle='-',\n    )\n\n    def load(self):\n        psd, freq = np.loadtxt('/path/to/measured/psd.txt')\n        self.data = self.interpolate(freq, psd)\n\n    def calc(self):\n        return self.data\n\n\nclass MyCalibration(nb.Calibration):\n    def calc(self):\n        return np.ones_like(self.freq) * 1234\n\n\nclass MyBudget(nb.Budget):\n    noises = [\n        SuspensionThermal,\n        MeasuredNoise,\n    ]\n    \n    calibrations = [\n        MyCalibration,\n    ]\n```\n\nThe `style` attributes of the various `Noise` classes define plot\nstyle for the noise.\n\nThis budget can be loaded with the `gwinc.load_budget()` function, and\nprocessed as usual with the `Budget.run()` method:\n```python\nbudget = load_budget('/path/to/MyBudget', freq)\ntrace = budget.run()\n```\n\nOther than the necessary `freq` initialization argument that defines\nthe frequency array, any additional keyword arguments are assigned as\nclass attributes to the budget object, and to all of it's constituent\nsub noises/calibrations/budgets.\n\nNote that the `SuspensionThermal` Noise class above uses the\n`suspension_thermal` analytic noise calculation function, which takes\na \"suspension\" Struct as input argument.  In this case, this\nsuspension Struct is extracted from the `self.ifo` Struct at\n`self.ifo.Suspension`.\n\nIf a budget module defined as a package includes an `ifo.yaml`\n[parameter file](#parameter-files) in the package directory, the\n`load_budget()` function will automatically load the YAML data into an\n`ifo` `gwinc.Struct` and assign it to the `budget.ifo` attribute.\n\nThe IFOs included in `gwinc.ifo` provide examples of the use of the\nbudget interface (e.g. [gwinc.ifo.aLIGO](gwinc/ifo/aLIGO)).\n\n\n### the \"precomp\" decorator\n\nThe `BudgetItem` supports \"precomp\" functions that can be used to\ncalculate common derived values needed in multiple `BudgetItems`.\nThey are specified using the `nb.precomp` decorator applied to the\n`BudgetItem.calc()` method.  These functions are executed during the\n`update()` method call, supplied with the budget `freq` and `ifo`\nattributes as input arguments.  The execution state of the precomp\nfunctions is cached at the Budget level, to prevent needlessly\nre-calculating them multiple times.  For example:\n```python\nfrom gwinc import nb\n\n\ndef precomp_foo(freq, ifo):\n    pc = Struct()\n    ...\n    return pc\n\n\ndef precomp_bar(freq, ifo):\n    pc = Struct()\n    ...\n    return pc\n\n\nclass Noise0(nb.Noise):\n    @nb.precomp(foo=precomp_foo)\n    def calc(self, foo):\n        ...\n\nclass Noise1(nb.Noise):\n    @nb.precomp(foo=precomp_foo)\n    @nb.precomp(bar=precomp_bar)\n    def calc(self, foo, bar):\n        ...\n\nclass MyBudget(nb.Budget):\n    noises = [\n        Noise0,\n        Noise1,\n    ]\n```\nWhen `MyBudget.run()` is called, all the `precomp` functions will be\nexecuted, e.g.:\n```python\nprecomp_foo(self.freq, self.ifo)\nprecomp_bar(self.freq, self.ifo)\n```\nBut the `precomp_foo` function will only be calculated once even\nthough it's specified as needed by both `Noise0` and `Noise1`.\n\n\n### extracting single noise terms\n\nThere are various way to extract single noise terms from the Budget\ninterface.  The most straightforward way is to run the full budget,\nand extract the noise data the output traces dictionary:\n\n```python\nbudget = load_budget('/path/to/MyBudget', freq)\ntrace = budget.run()\nquantum_trace = trace['QuantumVacuum']\n```\n\nYou can also calculate the final calibrated output noise for just a\nsingle term using the Budget `calc_noise()` method:\n```python\ndata = budget.calc_noise('QuantumVacuum')\n```\n\nYou can also calculate a noise at it's source, without applying any\ncalibrations, by using the Budget `__getitem__` interface to extract\nthe specific Noise BudgetItem for the noise you're interested in, and\nrunning it's `calc()` method directly:\n```python\ndata = budget['QuantumVacuum'].calc()\n```\n\n\n# inspiral range\n\nThe [`inspiral_range`](https://git.ligo.org/gwinc/inspiral-range)\npackage can be used to calculate various common \"inspiral range\"\nfigures of merit for gravitational wave detector budgets.  Here's an\nexample of how to use it to calculate the inspiral range of the\nbaseline 'Aplus' detector:\n```python\nimport gwinc\nimport inspiral_range\nimport numpy as np\n\nfreq = np.logspace(1, 3, 1000)\nbudget = gwinc.load_budget('Aplus', freq)\ntrace = budget.run()\n\nrange = inspiral_range.range(\n    freq, trace.psd,\n    m1=30, m2=30,\n)\n```\n\nSee the [`inspiral_range`](https://git.ligo.org/gwinc/inspiral-range)\npackage for more details.\n\n\n<!-- ## comparison with MATLAB gwinc -->\n\n<!-- `pygwinc` includes the ability use MATLAB gwinc directly via the -->\n<!-- MATLAB python interface (see the CLI '--matlab' option above).  This -->\n<!-- also allows for easy direct comparison between the pygwinc and -->\n<!-- matgwinc noise budgets. -->\n\n<!-- If you have a local checkout of matgwinc (at e.g. /path/to/gwinc) and -->\n<!-- a local installation of MATLAB and it's python interface (at -->\n<!-- e.g. /opt/matlab/python/lib/python3.6/site-packages) you can run the -->\n<!-- comparison as so: -->\n<!-- ```shell -->\n<!-- $ export GWINCPATH=/path/to/matgwinc -->\n<!-- $ export PYTHONPATH=/opt/matlab/python/lib/python3.6/site-packages -->\n<!-- $ python3 -m gwinc.test -p aLIGO -->\n<!-- ``` -->\n<!-- This will produce a summary page of the various noise spectra that -->\n<!-- differ between matgwinc and pygwinc. -->\n\n<!-- Latest comparison plots from continuous integration: -->\n\n<!-- * [aLIGO comparison](https://gwinc.docs.ligo.org/pygwinc/aLIGO_test.png) -->\n<!-- * [A+ comparison](https://gwinc.docs.ligo.org/pygwinc/A+_test.png) -->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.ligo.org/gwinc/pygwinc",
    "keywords": "",
    "license": "UNLICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gwinc",
    "package_url": "https://pypi.org/project/gwinc/",
    "platform": "",
    "project_url": "https://pypi.org/project/gwinc/",
    "project_urls": {
      "Bug Tracker": "https://git.ligo.org/gwinc/pygwinc/issues",
      "Homepage": "https://git.ligo.org/gwinc/pygwinc",
      "Source Code": "https://git.ligo.org/gwinc/pygwinc"
    },
    "release_url": "https://pypi.org/project/gwinc/0.4.1/",
    "requires_dist": [
      "h5py",
      "ipython",
      "matplotlib",
      "numpy",
      "pyyaml",
      "scipy",
      "inspiral-range ; extra == 'range'"
    ],
    "requires_python": ">=3.6",
    "summary": "Gravitation Wave Interferometer Noise Calculator",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12103429,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ff67b6c46bee5944f6649f9ac2cc1802d69221246d8f3cad76dfd7990bb8c5",
          "md5": "1772082499130532930126726ed732b9",
          "sha256": "7441218866746e5ccbfb3a524ac74d50bfdbbc3286e171bce4db0b4bb404b6cf"
        },
        "downloads": -1,
        "filename": "gwinc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1772082499130532930126726ed732b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92031,
        "upload_time": "2020-10-21T04:19:17",
        "upload_time_iso_8601": "2020-10-21T04:19:17.508209Z",
        "url": "https://files.pythonhosted.org/packages/51/ff/67b6c46bee5944f6649f9ac2cc1802d69221246d8f3cad76dfd7990bb8c5/gwinc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c97d5747cd8d991a75f1578ccf6b4b3ab335cf92a548c35928d51c6445cfa3b9",
          "md5": "ea48079c9155f775c77ccb4da871ae6d",
          "sha256": "0d34f49d9ff1bdb3f0cdfe1271b8904b5a20f4b070560c62e6b1380b386847d1"
        },
        "downloads": -1,
        "filename": "gwinc-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea48079c9155f775c77ccb4da871ae6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92194,
        "upload_time": "2020-10-27T18:12:49",
        "upload_time_iso_8601": "2020-10-27T18:12:49.196728Z",
        "url": "https://files.pythonhosted.org/packages/c9/7d/5747cd8d991a75f1578ccf6b4b3ab335cf92a548c35928d51c6445cfa3b9/gwinc-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b1c29c156695110ed93aea86f070cf9f0e8a54bce98a3f69b8511ed1c8c7d61",
          "md5": "6ac08d6848b934d1854d5a71d2f51201",
          "sha256": "57e4bedbc0706fbbf9c3c1ffc03e2aad6db02dab9d71c5dc9e41fcb9ba678f5b"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ac08d6848b934d1854d5a71d2f51201",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 119630,
        "upload_time": "2021-01-05T21:14:16",
        "upload_time_iso_8601": "2021-01-05T21:14:16.812614Z",
        "url": "https://files.pythonhosted.org/packages/5b/1c/29c156695110ed93aea86f070cf9f0e8a54bce98a3f69b8511ed1c8c7d61/gwinc-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69dc6003e4c35436b66c4338d1b214ace01b2e9f346c4fb2d5da095dc86f3f85",
          "md5": "1fca30856a4aafcc1f318b1e967e2bdb",
          "sha256": "e1a332bef6c0c16348505ad76480a13d7a9b1a6b36532840c838c87b129d53a7"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1fca30856a4aafcc1f318b1e967e2bdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 95061,
        "upload_time": "2021-01-05T21:14:18",
        "upload_time_iso_8601": "2021-01-05T21:14:18.410328Z",
        "url": "https://files.pythonhosted.org/packages/69/dc/6003e4c35436b66c4338d1b214ace01b2e9f346c4fb2d5da095dc86f3f85/gwinc-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d8dc107c76a09221cf736155aac4be9234a5426dbccfe5c345019d83e486c4f",
          "md5": "345cf79e590358bbf8bded5f8d592bf6",
          "sha256": "e634813c52bdd08bed32068ad116d37a159071fb7baea3b138ad9d9b33661500"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "345cf79e590358bbf8bded5f8d592bf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 119633,
        "upload_time": "2021-01-09T06:30:40",
        "upload_time_iso_8601": "2021-01-09T06:30:40.549789Z",
        "url": "https://files.pythonhosted.org/packages/1d/8d/c107c76a09221cf736155aac4be9234a5426dbccfe5c345019d83e486c4f/gwinc-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dcfb0fc957b893a5eb73ad49837e266df08943d3cc112aa884ccfc13ea1f8ab",
          "md5": "6418f49769adbd3ae2a4ca8249288b6e",
          "sha256": "33ab62cf88dd9acb986ec22908c5d9240a27140fbaa0d38d8b24c0d95a87080b"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6418f49769adbd3ae2a4ca8249288b6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 95092,
        "upload_time": "2021-01-09T06:32:47",
        "upload_time_iso_8601": "2021-01-09T06:32:47.760328Z",
        "url": "https://files.pythonhosted.org/packages/8d/cf/b0fc957b893a5eb73ad49837e266df08943d3cc112aa884ccfc13ea1f8ab/gwinc-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abae3c5e6172555133b61738f9d4315b93b73df53fb6f38376d9526c3f09b924",
          "md5": "4c5fd271a4124d1d117404c0400ea8fe",
          "sha256": "3a3efe92ce4aeef503c11d1e48f177b21d2763bf72c1cc236fbf2846c7f93798"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c5fd271a4124d1d117404c0400ea8fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 119634,
        "upload_time": "2021-01-09T16:54:20",
        "upload_time_iso_8601": "2021-01-09T16:54:20.848130Z",
        "url": "https://files.pythonhosted.org/packages/ab/ae/3c5e6172555133b61738f9d4315b93b73df53fb6f38376d9526c3f09b924/gwinc-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63cbf1947bf2dc219f9fc4baaa9a8bd13549ffdbeaddda476ec602afe9bbc073",
          "md5": "349dafe643813d574a4dd792a17ec22b",
          "sha256": "959f7f2989ca7bfc1674b702cb7bac1134db2be9a36702321ca03948e61a427a"
        },
        "downloads": -1,
        "filename": "gwinc-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "349dafe643813d574a4dd792a17ec22b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 95069,
        "upload_time": "2021-01-09T16:54:22",
        "upload_time_iso_8601": "2021-01-09T16:54:22.284372Z",
        "url": "https://files.pythonhosted.org/packages/63/cb/f1947bf2dc219f9fc4baaa9a8bd13549ffdbeaddda476ec602afe9bbc073/gwinc-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a5eeec446f39013c6aa1c3ea0b9ac3c9fa80a389102f2c97a507d60b4576da0",
          "md5": "a794d63f488d22a346c1d72e78f93792",
          "sha256": "bce60b60ca935c6d2ee0e6a616a94f1d898dc77808810eff6efaa9ae2bc3c42b"
        },
        "downloads": -1,
        "filename": "gwinc-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a794d63f488d22a346c1d72e78f93792",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 120342,
        "upload_time": "2021-06-10T03:18:39",
        "upload_time_iso_8601": "2021-06-10T03:18:39.243454Z",
        "url": "https://files.pythonhosted.org/packages/4a/5e/eec446f39013c6aa1c3ea0b9ac3c9fa80a389102f2c97a507d60b4576da0/gwinc-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e70e9a232f25d7cb8323198fd3d7480e6276c1852be88a79ba5566a4bca244d7",
          "md5": "5a2f1b610cc733bb2b9b14a47ea0f460",
          "sha256": "64a8756df5728393966368ef844f1322aa32e7e1753148697c2700bd9371363b"
        },
        "downloads": -1,
        "filename": "gwinc-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a2f1b610cc733bb2b9b14a47ea0f460",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 98411,
        "upload_time": "2021-06-10T03:18:41",
        "upload_time_iso_8601": "2021-06-10T03:18:41.606433Z",
        "url": "https://files.pythonhosted.org/packages/e7/0e/9a232f25d7cb8323198fd3d7480e6276c1852be88a79ba5566a4bca244d7/gwinc-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01f1e98c6e90eaf124fe2286b70ac2147264d643dd728d9ac9c5abe58d94522c",
          "md5": "71736f0d1946f44cbf47f30924866e8d",
          "sha256": "f7dc7bbe072b1528a3fde8661c244dc4ad9e2190dc6aaec21e3245a2352265bc"
        },
        "downloads": -1,
        "filename": "gwinc-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71736f0d1946f44cbf47f30924866e8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 154935,
        "upload_time": "2021-11-12T16:49:46",
        "upload_time_iso_8601": "2021-11-12T16:49:46.266558Z",
        "url": "https://files.pythonhosted.org/packages/01/f1/e98c6e90eaf124fe2286b70ac2147264d643dd728d9ac9c5abe58d94522c/gwinc-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc3d7a4e95f22605e9532e8b227c3cbcec370c4f59b093d75f925f9c1cd53d27",
          "md5": "34d45879afe92a12e4b0ee5e4111eb5a",
          "sha256": "91cdf8c08cef6c67fa0462c7c522ed1f4ff4e727c969e7f6467b088951ebb6c0"
        },
        "downloads": -1,
        "filename": "gwinc-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34d45879afe92a12e4b0ee5e4111eb5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 102465,
        "upload_time": "2021-11-12T16:49:47",
        "upload_time_iso_8601": "2021-11-12T16:49:47.846259Z",
        "url": "https://files.pythonhosted.org/packages/cc/3d/7a4e95f22605e9532e8b227c3cbcec370c4f59b093d75f925f9c1cd53d27/gwinc-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9bdee2e73e839c6f3e55985379fe042708a6e7ca7f83217927ae0547ac9a865",
          "md5": "cbda564139f3154abc0126900d987911",
          "sha256": "36df9a1a3616f77284ce6960b5f094fa3e5e3a9c839ee22e7edf47b1a410ad37"
        },
        "downloads": -1,
        "filename": "gwinc-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbda564139f3154abc0126900d987911",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 154938,
        "upload_time": "2021-11-23T15:55:31",
        "upload_time_iso_8601": "2021-11-23T15:55:31.921301Z",
        "url": "https://files.pythonhosted.org/packages/c9/bd/ee2e73e839c6f3e55985379fe042708a6e7ca7f83217927ae0547ac9a865/gwinc-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb42b0368c21528c19c6b4c6c28e0f97b75186861e835f3de3dacbf2fbe500d7",
          "md5": "9895157933812cf7f92d9e3536bd600e",
          "sha256": "b6ea1de8592d3f07f6deac649d54689355502b275beef75496762c0c2265368f"
        },
        "downloads": -1,
        "filename": "gwinc-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9895157933812cf7f92d9e3536bd600e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 102555,
        "upload_time": "2021-11-23T15:55:34",
        "upload_time_iso_8601": "2021-11-23T15:55:34.763642Z",
        "url": "https://files.pythonhosted.org/packages/eb/42/b0368c21528c19c6b4c6c28e0f97b75186861e835f3de3dacbf2fbe500d7/gwinc-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9bdee2e73e839c6f3e55985379fe042708a6e7ca7f83217927ae0547ac9a865",
        "md5": "cbda564139f3154abc0126900d987911",
        "sha256": "36df9a1a3616f77284ce6960b5f094fa3e5e3a9c839ee22e7edf47b1a410ad37"
      },
      "downloads": -1,
      "filename": "gwinc-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbda564139f3154abc0126900d987911",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 154938,
      "upload_time": "2021-11-23T15:55:31",
      "upload_time_iso_8601": "2021-11-23T15:55:31.921301Z",
      "url": "https://files.pythonhosted.org/packages/c9/bd/ee2e73e839c6f3e55985379fe042708a6e7ca7f83217927ae0547ac9a865/gwinc-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb42b0368c21528c19c6b4c6c28e0f97b75186861e835f3de3dacbf2fbe500d7",
        "md5": "9895157933812cf7f92d9e3536bd600e",
        "sha256": "b6ea1de8592d3f07f6deac649d54689355502b275beef75496762c0c2265368f"
      },
      "downloads": -1,
      "filename": "gwinc-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9895157933812cf7f92d9e3536bd600e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 102555,
      "upload_time": "2021-11-23T15:55:34",
      "upload_time_iso_8601": "2021-11-23T15:55:34.763642Z",
      "url": "https://files.pythonhosted.org/packages/eb/42/b0368c21528c19c6b4c6c28e0f97b75186861e835f3de3dacbf2fbe500d7/gwinc-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}