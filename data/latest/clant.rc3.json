{
  "info": {
    "author": "David Robillard",
    "author_email": "d@drobilla.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Objective C",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Clant\n=====\n\nClant (CLAng liNT) is a fast and easy to use wrapper script for checking C and\nC++ code with the clang-based tools [clang-tidy][] and\n[include-what-you-use][].\n\nThough these tools are helpful, they can be tricky to configure correctly.  For\nexample, checks in headers can be mistakenly skipped, mixing C and C++ code can\nbe a hassle, and the interface and output of the bundled wrapper scripts are\ninconsistent.\n\nClant aims to handle all of these details and provide a simple interface for\nrunning these tools on a project with nice output.  Tools are run in parallel\nfor maximum speed, and output is printed in the standard make and GCC format\nsupported by most editors.\n\nExample\n-------\n\nUsing Clant looks something like this:\n\n    $ cd /mylib\n    $ clant\n    clant: Entering directory `/mylib/build'\n    clant: Loading compilation database `compile_commands.json'\n    ../include/mylib/mylib.h:1:1: note: includes are correct\n    ../src/mylib.c:239:1: error: function 'run' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]\n    run(Thing* result);\n    ^\n    ../src/mylib.c:576:1: note: the definition seen here\n    run(Thing* out)\n    ^\n    ../src/rerex.c:239:1: note: differing parameters are named here: ('result'), in definition: ('out')\n    run(Something* result);\n    ^              ~~~~~~\n                   out\n\n    ../test/test_something.c:26:1: error: remove this line\n    #include <stdlib.h>\n    ../test/test_something.c:1:1: note: code is tidy\n    clant: Leaving directory `/mylib/build/build'\n\nInstallation\n------------\n\nClant is a Python script that can simply be run anywhere, installation is not\nnecessary.\n\nIt can, however, be installed with [pip][]:\n\n    pip install clant\n\nInstallation from the source directory is also possible:\n\n    cd path_to_clant_source\n    pip install .\n\nUsage\n-----\n\nIdeally, you can simply run clant from your project directory:\n\n    cd path_to_my_project\n    clant\n\nClant will assume that a build exists in the `build` subdirectory, and look for\n`compile_commands.json` there.  To use a different build directory, pass it as\na parameter:\n\n    clant release\n\nBy default, the number of threads supported by the CPU will be used.  To use a\ndifferent number of threads, use the `-j` option:\n\n    clant -j 4\n\nIndividual tools can be disabled for faster runs or to suppress warnings while\nworking on issues:\n\n    clant --no-tidy\n    clant --no-iwyu\n\n### Checking Headers\n\nClant attempts to run tools in a way that automatically includes appropriate\nheaders in checks, but this may miss headers that are not included in the\nbuild, or that are not inside the project directory.  Additional headers can be\nchecked by providing include directories with the `--include` option.\nThis will run checks on all the headers in that directory, recursively:\n\n    clant --include include\n\n### Include Mapping Files\n\n[Mapping files][] are supported by include-what-you-use to specify include file\nmappings for third-party libraries or other things that the tool does not\nautomatically understand.  Additional mapping files can be given with the\n`--mapping` option:\n\n    clant --mapping /path/to/somelibrary.imp\n    clant --mapping someotherlibrary.imp\n\nIf they are not absolute paths, mapping files will be searched for first in the\nproject directory, then in the system include-what-you-use directory (relative\nto the binary, typically `/usr/share/include-what-you-use`).\n\n### Excluding Files\n\nSometimes, certain files can't be realistically changed to reach the same level\nof cleanliness as the rest of the project, for example generated or third-party\ncode.  Such files can be excluded by providing a regular expression with the\n`--exclude` option:\n\n    clant --exclude '.*generated.*\\.c'\n\nWarnings\n--------\n\nWarnings are configured using the standard `.clang-tidy` mechanism.  The\nsimplest approach is to simply add a single `.clang-tidy` file to the project\nroot, and enable or suppress any warnings there.\n\nTo be more fine-grained, for example to specify stricter warnings for headers\nthan implementations, separate files can be used.  The `.clang-tidy` file in\nthe closest parent directory to the source being checked will be used.  Note,\nhowever, that `clang-tidy` does not check headers on their own by default, and\nthat included headers will be checked using the settings for that compilation\n(including the language), not the `.clang-tidy` file associated with the\nheader.\n\nThis can be especially tricky for projects that contain both C and C++.  To get\naround this problem, unless the `--no-auto-headers` option is given, Clant\nautomatically includes headers of the matching language based on their\nextension, which overrides the `HeaderFilterRegex` option in the `.clang-tidy`\nfile.  This prevents C++ warnings from being produced for C headers, or\nvice-versa.  For C sources with extension `.c`, any included `.h` files within\nthe project are checked.  For C++ sources with extension `.cpp` or `.cc`, any\nincluded `.hh`, `.hpp`, or `.ipp` files within the project are checked.\n\nThe extra headers given with the `--include` option are always checked on their\nown, avoiding these issues.  Since there is no associated command in the\ncompilation database for headers, Clant combines all of the include paths given\nto any compile command to run tools on these headers.\n\nUsing from Python\n-----------------\n\nClant is also installed as a Python package called `clant`, which contains a\nsingle module, also called `clant`.\n\nThe command-line utility is implemented in `clant.main()`, which takes no\narguments since they are read from `sys.argv`.\n\nThat is a simple wrapper for `clant.run()`, which takes parameters that loosely\ncorrespond with command line parameters, but using lists for multiple values\nand more appropriate names.  Only `build_dir` is required.  For example:\n\n```python\n\nfrom clant import clant\n\nclant.run(auto_headers=True,\n          build_dir=\"build\",\n          exclude_patterns=[\".*gen.*\"],\n          iwyu=False,\n          jobs=4,\n          mapping_files=[\"qt5_11.imp\"],\n          tidy=True,\n          verbose=False)\n```\n\nConfiguration File\n------------------\n\nA configuration can be included in a project by adding a `.clant.json` file in\nthe project root directory.  This file must be a JSON object, where the keys\ncorrespond to the keyword parameters of `clant.run()` described above.\n\nThe one exception is the `version` key, which must be present, and represents\nthe version of Clant the configuration file is for.  Currently, this is only\nused to print a warning if the configuration is newer, but it may be used in\nthe future to handle any potential compatibility issues.\n\nFor example, this configuration uses all of the supported keys:\n\n```json\n{\n  \"auto_headers\": true,\n  \"build_dir\": \"release\",\n  \"exclude_patterns\": [\".*gen.*\"],\n  \"iwyu\": false,\n  \"jobs\": 4,\n  \"mapping_files\": [\"qt5_11.imp\"],\n  \"tidy\": true,\n  \"verbose\": false,\n  \"version\": \"1.0.0\"\n}\n```\n\nIf command line parameters are also given, then values from the configuration\nfile will override them, except for lists, which will be added.\n\nAssumptions\n-----------\n\nAside from some of the defaults described above, Clant is a somewhat\nopinionated tool that assumes a few things for ease of use:\n\n  - `clang-tidy` and `include-what-you-use` are installed, that is, these\n    commands are available in the `PATH`.\n\n  - The build directory is an immediate child of the project directory.\n\n  - The build directory contains a valid [JSON Compilation Database][] named\n    `compile_commands.json`.\n\n  - For the auto headers feature:\n\n    - C sources have extension `.c`, C headers have extension `.h`.\n\n    - C++ sources have extension `.cpp` or `.cc`, C++ headers have extension\n      `.hpp`, `.hh`, or `.ipp`.\n\n  - For checking extra headers:\n\n    - Headers can be \"compiled\" by including every `-I` given to every compile\n      command, so there are no conflicting header names.\n\nFeel free to submit a patch if any of these are problematic for you.\n\n -- David Robillard <d@drobilla.net>\n\n[clang-tidy]: https://clang.llvm.org/extra/clang-tidy/\n[include-what-you-use]: https://include-what-you-use.org/\n[pip]: https://pypi.org/project/pip/\n[Mapping files]: https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/IWYUMappings.md\n[JSON Compilation Database]: https://clang.llvm.org/docs/JSONCompilationDatabase.html\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/drobilla/clant",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clant",
    "package_url": "https://pypi.org/project/clant/",
    "platform": null,
    "project_url": "https://pypi.org/project/clant/",
    "project_urls": {
      "Homepage": "https://gitlab.com/drobilla/clant"
    },
    "release_url": "https://pypi.org/project/clant/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A unified frontend for clang linting tools",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14405407,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf670c2b70ec6c1832ea862ec25f85467f37105004fe2a8960dd10d2d25e6c2",
          "md5": "6c2a8d380ff35cf1f19b0870a21c424c",
          "sha256": "c536cbb2d635d76b6b4b677070ef012d3b05fe3336d2ef8697dce7f0121ba7bf"
        },
        "downloads": -1,
        "filename": "clant-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "6c2a8d380ff35cf1f19b0870a21c424c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13752,
        "upload_time": "2020-12-13T19:06:16",
        "upload_time_iso_8601": "2020-12-13T19:06:16.244211Z",
        "url": "https://files.pythonhosted.org/packages/0c/f6/70c2b70ec6c1832ea862ec25f85467f37105004fe2a8960dd10d2d25e6c2/clant-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18570c0f6e4aa2a2f59923e467f7f47dfa1ea2c2de073844ebd20fab82567daa",
          "md5": "53d7a5e102c50d1d24ab3fea45c01b13",
          "sha256": "0e566bfcc1bfcad64053df772f81cc52a2e29974dbdaa0d82efb028b9aecf619"
        },
        "downloads": -1,
        "filename": "clant-1.0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "53d7a5e102c50d1d24ab3fea45c01b13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15142,
        "upload_time": "2021-01-06T22:42:54",
        "upload_time_iso_8601": "2021-01-06T22:42:54.879173Z",
        "url": "https://files.pythonhosted.org/packages/18/57/0c0f6e4aa2a2f59923e467f7f47dfa1ea2c2de073844ebd20fab82567daa/clant-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "577c9d77dead719c2f8b9f8d75a525f53d07748c16465681b4fc1c947aaa79ce",
          "md5": "5a26a555bd0cdc0292ae1e71f2c5dc5c",
          "sha256": "cb1aaefdd065f911c9ee55297ec3dbd39302256efa74a9a319a004b234498e54"
        },
        "downloads": -1,
        "filename": "clant-1.0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "5a26a555bd0cdc0292ae1e71f2c5dc5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14583,
        "upload_time": "2022-07-12T00:16:55",
        "upload_time_iso_8601": "2022-07-12T00:16:55.692399Z",
        "url": "https://files.pythonhosted.org/packages/57/7c/9d77dead719c2f8b9f8d75a525f53d07748c16465681b4fc1c947aaa79ce/clant-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "577c9d77dead719c2f8b9f8d75a525f53d07748c16465681b4fc1c947aaa79ce",
        "md5": "5a26a555bd0cdc0292ae1e71f2c5dc5c",
        "sha256": "cb1aaefdd065f911c9ee55297ec3dbd39302256efa74a9a319a004b234498e54"
      },
      "downloads": -1,
      "filename": "clant-1.0.4.tar.gz",
      "has_sig": true,
      "md5_digest": "5a26a555bd0cdc0292ae1e71f2c5dc5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14583,
      "upload_time": "2022-07-12T00:16:55",
      "upload_time_iso_8601": "2022-07-12T00:16:55.692399Z",
      "url": "https://files.pythonhosted.org/packages/57/7c/9d77dead719c2f8b9f8d75a525f53d07748c16465681b4fc1c947aaa79ce/clant-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}