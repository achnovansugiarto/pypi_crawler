{
  "info": {
    "author": "Lucas Wolf",
    "author_email": "iamlucaswolf@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# gym-chess: OpenAI Gym environments for Chess\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n3. [Chess-v0](#chess-v0)\n4. [ChessAlphaZero-v0](#chessalphazero-v0)\n5. [Acknowledgements](#acknowledgements)\n\n## Introduction\n\ngym-chess provides [OpenAI Gym](https://gym.openai.com) environments for the \ngame of Chess. It comes with an implementation of the board and move \nencoding used in [AlphaZero](https://deepmind.com/blog/article/alphazero-shedding-new-light-grand-games-chess-shogi-and-go), \nyet leaves you the freedom to define your own encodings via wrappers.\n\nLet's watch a random agent play against itself:\n\n```python\n>>> import gym\n>>> import gym_chess\n>>> import random\n\n>>> env = gym.make('Chess-v0')\n>>> print(env.render())\n\n>>> env.reset()\n>>> done = False\n\n>>> while not done:\n>>>     action = random.sample(env.legal_moves)\n>>>     env.step(action)\n>>>     print(env.render(mode='unicode'))\n\n>>> env.close()\n```\n\n## Installation\n\ngym-chess requires Python 3.6 or later.\n\nTo install gym-chess, run:\n\n```shell\n$ pip install gym-chess\n```\n\nImporting gym-chess will automatically register the `Chess-v0` and \n`ChessAlphaZero-v0` envs with gym:\n\n```python\n>>> import gym\n>>> import gym_chess\n\n>>> gym.envs.registry.all()\ndict_values([... EnvSpec(Chess-v0), EnvSpec(ChessAlphaZero-v0)])\n```\n\n\n## Chess-v0\n\ngym-chess defines a basic `Chess-v0` environment which represents \nobservations and actions as objects of type `chess.Board` and `chess.Move`, \nrespectively. These classes come from the\n[python-chess](https://github.com/niklasf/python-chess) package which implements\nthe game logic.\n\n```python\n\n>>> env = gym.make('Chess-v0')\n>>> state = env.reset()\n>>> type(state)\nchess.Board\n\n>>> print(env.render(mode='unicode'))\n♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜\n♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙\n♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖\n\n>>> move = chess.Move.from_uci('e2e4')\n>>> env.step(move)\n>>> print(env.render(mode='unicode'))\n♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜\n♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ♙ ⭘ ⭘ ⭘\n⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘ ⭘\n♙ ♙ ♙ ♙ ⭘ ♙ ♙ ♙\n♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖\n\n```\n\nA list of legal moves for the current position is exposed via the `legal_moves`\nproperty:\n\n```\n>>> env.reset()\n>>> env.legal_moves\n[Move.from_uci('g1h3'),\n Move.from_uci('g1f3'),\n Move.from_uci('b1c3'),\n Move.from_uci('b1a3'),\n Move.from_uci('h2h3'),\n Move.from_uci('g2g3'),\n Move.from_uci('f2f3'),\n Move.from_uci('e2e3'),\n Move.from_uci('d2d3'),\n Move.from_uci('c2c3'),\n Move.from_uci('b2b3'),\n Move.from_uci('a2a3'),\n Move.from_uci('h2h4'),\n Move.from_uci('g2g4'),\n Move.from_uci('f2f4'),\n Move.from_uci('e2e4'),\n Move.from_uci('d2d4'),\n Move.from_uci('c2c4'),\n Move.from_uci('b2b4'),\n Move.from_uci('a2a4')]\n\n```\n\nUsing ordinary Python objects (rather than NumPy arrays) as an agent interface \nis arguably unorthodox. An immideate consequence of this approach is that \n`Chess-v0` has no well-defined `observation_space` and `action_space`; hence \nthese member variables are set to `None`. However, this design allows us to \nseperate the game's _implementation_ from its _representation_, which is left to \nwrapper classes.\n\n\nThe agent plays for both players, black **and** white, by making moves\nfor either color in turn. An episode ends when a player wins (i.e. the agent\nmakes a move that puts the opponent player into checkmate), or the game results \nin a draw (e.g. by reaching a stalemate position, insufficient material, or one\nor more other draw conditions according to the \n[FIDE Rules of Chess](https://en.wikipedia.org/wiki/Rules_of_chess)). \nNote that there is currently no option for the agent to let a player resign or\noffer a draw voluntarily.\n\nThe agent receives a reward of +1 when the white player makes a winning move,\nand a reward of -1 when the black player makes a winning move. All other rewards\nare zero.\n\n\n## ChessAlphaZero-v0\n\ngym-chess ships with an implementation of the board and move encoding proposed \nby [AlphaZero]() (see [Silver et al., 2017]()).\n\n```python\n>>> env = gym.make('ChessAlphaZero-v0')\n>>> env.observation_space\nBox(8, 8, 119)\n\n>>> env.action_space\nDiscrete(4672)\n```\n\nFor a detailed description of how these encodings work, consider reading the \npaper or consult the docstring of the respective classes.\n\nIn addition to `legal_moves`, ChessAlphaZero-v0 also exposes a list of all\nlegal actions (i.e. encoded legal moves):\n\n```python\n>>> env.legal_actions\n[494,\n 501,\n 129,\n 136,\n 1095,\n 1022,\n 949,\n 876,\n 803,\n 730,\n 657,\n 584,\n 1096,\n 1023,\n 950,\n 877,\n 804,\n 731,\n 658,\n 585]\n```\n\nMoves can be converted to actions and vice versawith the `encode` and `decode` \nmethods, which may facilitate debugging and experimentation:\n\n```\n>>> move = chess.Move.from_uci('e2e4')\n>>> env.encode(move)\n877\n>>> env.encode(move) in env.legal_actions\nTrue\n\n>>> env.decode(877)\nMove.from_uci('e2e4')\n```\n\nInternally, the encoding is implemented via wrapper classes \n(`gym_chess.alphazero.BoardEncoding` and `gym_chess.alphazero.MoveEncoding`,\nrespectively), which can be used independently of one another. This gives you \nthe flexibility to define your own board and move representations, and easily\nswitch between them.\n\n```python\n>>> import gym_chess\n>>> from gym_chess.alphazero import BoardEncoding\n\n>>> env = gym.make('Chess-v0')\n>>> env = BoardEncoding(env, history_length=4)\n>>> env = MyEsotericMoveEncoding(env)\n```\n\n\n## Acknowledgements\n\nThanks to @niklasf for providing the awesome \n[python-chess](https://github.com/niklasf/python-chess) package.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iamlucaswolf/gym-chess",
    "keywords": "",
    "license": "GPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gym-chess",
    "package_url": "https://pypi.org/project/gym-chess/",
    "platform": "",
    "project_url": "https://pypi.org/project/gym-chess/",
    "project_urls": {
      "Homepage": "https://github.com/iamlucaswolf/gym-chess",
      "Repository": "https://github.com/iamlucaswolf/gym-chess"
    },
    "release_url": "https://pypi.org/project/gym-chess/0.1.1/",
    "requires_dist": [
      "python-chess (>=0.31.1,<0.32.0)",
      "gym (>=0.17.2,<0.18.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "OpenAI Gym environments for Chess",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8890098,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3587abf42ca064646d23adffda4fbdfcc7c991db836d534a14d220e795000db",
          "md5": "1751d9150567b40c19d7da4cf7dd7232",
          "sha256": "156a06edc0aebd5f19adc8d0909fe1e84648ad107bdfdadd87ff64c6cda7e149"
        },
        "downloads": -1,
        "filename": "gym_chess-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1751d9150567b40c19d7da4cf7dd7232",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 27931,
        "upload_time": "2020-06-03T22:08:43",
        "upload_time_iso_8601": "2020-06-03T22:08:43.526861Z",
        "url": "https://files.pythonhosted.org/packages/c3/58/7abf42ca064646d23adffda4fbdfcc7c991db836d534a14d220e795000db/gym_chess-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26fb259794c4cdda5949eb9e33e9a3236254d9991112be655c64ba41f1697164",
          "md5": "d4ad6979c1f5f44562883500b375fe97",
          "sha256": "2183f55791f40a6635f986490a4b066d0923ef1f0b04aa752a83b0fa3ee6b2d1"
        },
        "downloads": -1,
        "filename": "gym-chess-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4ad6979c1f5f44562883500b375fe97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 26021,
        "upload_time": "2020-06-03T22:08:41",
        "upload_time_iso_8601": "2020-06-03T22:08:41.195622Z",
        "url": "https://files.pythonhosted.org/packages/26/fb/259794c4cdda5949eb9e33e9a3236254d9991112be655c64ba41f1697164/gym-chess-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f04155cf6a2dd5019b05e3ed93e9691b8ebbf209b28c84ee9d2a343eefb70446",
          "md5": "7de8b856c52d201297b71a51e14bb633",
          "sha256": "df076dea2fef9451b4ad24c27dd4880dcaf0d8ecb62a804dcbd2e1e4bab721c9"
        },
        "downloads": -1,
        "filename": "gym_chess-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7de8b856c52d201297b71a51e14bb633",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 27984,
        "upload_time": "2020-12-13T16:08:19",
        "upload_time_iso_8601": "2020-12-13T16:08:19.183622Z",
        "url": "https://files.pythonhosted.org/packages/f0/41/55cf6a2dd5019b05e3ed93e9691b8ebbf209b28c84ee9d2a343eefb70446/gym_chess-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "424b5a499f6b56dbce91e270b882c27e53e873811fdcdb1062841c59703a1d4f",
          "md5": "96b1f6384f6d68b4af4fec71d9439937",
          "sha256": "97e5b44296b6bba582b868a55522bd9d48a8eb884e5ead239c376bc1eace3aeb"
        },
        "downloads": -1,
        "filename": "gym-chess-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "96b1f6384f6d68b4af4fec71d9439937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 26130,
        "upload_time": "2020-12-13T16:08:17",
        "upload_time_iso_8601": "2020-12-13T16:08:17.393499Z",
        "url": "https://files.pythonhosted.org/packages/42/4b/5a499f6b56dbce91e270b882c27e53e873811fdcdb1062841c59703a1d4f/gym-chess-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f04155cf6a2dd5019b05e3ed93e9691b8ebbf209b28c84ee9d2a343eefb70446",
        "md5": "7de8b856c52d201297b71a51e14bb633",
        "sha256": "df076dea2fef9451b4ad24c27dd4880dcaf0d8ecb62a804dcbd2e1e4bab721c9"
      },
      "downloads": -1,
      "filename": "gym_chess-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7de8b856c52d201297b71a51e14bb633",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 27984,
      "upload_time": "2020-12-13T16:08:19",
      "upload_time_iso_8601": "2020-12-13T16:08:19.183622Z",
      "url": "https://files.pythonhosted.org/packages/f0/41/55cf6a2dd5019b05e3ed93e9691b8ebbf209b28c84ee9d2a343eefb70446/gym_chess-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "424b5a499f6b56dbce91e270b882c27e53e873811fdcdb1062841c59703a1d4f",
        "md5": "96b1f6384f6d68b4af4fec71d9439937",
        "sha256": "97e5b44296b6bba582b868a55522bd9d48a8eb884e5ead239c376bc1eace3aeb"
      },
      "downloads": -1,
      "filename": "gym-chess-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "96b1f6384f6d68b4af4fec71d9439937",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 26130,
      "upload_time": "2020-12-13T16:08:17",
      "upload_time_iso_8601": "2020-12-13T16:08:17.393499Z",
      "url": "https://files.pythonhosted.org/packages/42/4b/5a499f6b56dbce91e270b882c27e53e873811fdcdb1062841c59703a1d4f/gym-chess-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}