{
  "info": {
    "author": "Luke",
    "author_email": "lukepc@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# BotballKit\n\nAn object-oriented wrapper for the KIPR library\n\n## Why\n\nThe KIPR library is bad in many ways. First of all, it's not even a real Python library, it's just a rushed implementation of its C library.\n\nThis is how you import it:\n\n```python\nkipr = ctypes.CDLL('/usr/lib/libkipr.so')\n```\n\nOkay, so it's technically not a pure Python library, but it still looks like one, right?\n\n```python\nkipr = ctypes.CDLL('/usr/lib/libkipr.so')\n\nstatus = kipr.digital(0)\nprint(status)\n\nkipr.motor(0, 100)\nkipr.motor(1, 100)\nkipr.msleep(2000)\n```\n\nNo. This looks like a C library, because that's all it is. It's barely object-oriented and the names of the functions are inconsistent and not Pythonic.\n\n### The Solution\n\nThe solution to this is a nice, object-oriented wrapper for the official KIPR library. Here's an example that sees if a push sensor is being pressed.\n\n```python\nfrom BotballKit import Bot, Sensor, SensorType\n\nbot = Bot()\nsensor = Sensor(bot, SensorType.DIGITAL, 0)\nleft_motor = Motor(bot, 0)\nright_motor = Motor(bot, 1)\n\nstatus = sensor.status()\nprint(status)\n\nleft_motor.move_async(100, 2)\nright_motor.move(100, 2)\n```\n\nMuch better, right? You create a bot object, a sensor object, two motor objects for each wheel, then you simply get the status of the sensor and print it and move the bot forward for two seconds.\n\n### But It's Longer\n\nWhile in this example the code is longer than the same example with the official library, as you keep adding on to this program the code *will* be shorter.\n\nAlso having an object-oriented library with much more consistent method names can make it easier to remember and harder to make mistakes.\n\n## Documentation\n\n### Creating a Bot\n\nThe first step to using this library is to create a `Bot` object. Doing that is as simple as:\n\n```python\nfrom BotballKit import Bot\n\nbot = Bot()\n```\n\nNow we have a `Bot` object stored in the `bot` variable.\n\nThe `Bot` constructor can optionally take these parameters:\n\n- `wait_for_port: Optional[int] = None`: Waits for a sensor on the specified port to be `True` before starting anything else. This will block the thread until the condition is met.\n\n- `time_limit: Optional[float] = None`: Stops the program after the specified number of seconds.\n\n`Bot` objects also have these methods:\n\n- `Bot.stop_all_motors()`: Stops all motors associated with the bot.\n\n- `Bot.enable_all_servos()`: Enables all servos associated with the bot.\n\n- `Bot.disable_all_servos()`: Disables all servos associated with the bot.\n\n### Sensors\n\nCreating `Sensor` objects is also very simple:\n\n```python\nfrom BotballKit import Sensor, SensorType\n\nsensor = Sensor(bot, SensorType.DIGITAL, 0)\n```\n\nThe `Sensor` constructor must have these parameters:\n\n- `bot: Bot`: Your bot object.\n\n- `type: SensorType`: The type of sensor you want to use. The two options are `SensorType.DIGITAL` and `SensorType.ANALOG`.\n\n- `port: int`: The port your sensor is physically connected to.\n\nIt has this method available:\n\n- `Sensor.status() -> Union[bool, int]`: Gets the status of the sensor. If the sensor is digital, it will return a `bool`. If the sensor is analog, it will return an `int`.\n\n### Motors\n\nTo create a `Motor`, all you have to do is:\n\n```python\nfrom BotballKit import Motor\n\nmotor = Motor(bot, 0)\n```\n\nThe `Motor` constructor requires these parameters be passed:\n\n- `bot: Bot`: Your bot object.\n\n- `port: int`: The port your motor is physically connected to.\n\nThey have these methods available:\n\n- `Motor.stop()`: Stops the motor.\n\n- `Motor.move(power: int, seconds: float)`: Moves the motor with the specified power between `-100` and `100` for the specified amount of seconds.\n\n- `Motor.move_async(power: int, seconds: float)`: Does the same thing as the `Motor.move` method except it runs asynchronously.\n\n### Servos\n\nCreating servos is also easy:\n\n```python\nfrom BotballKit import Servo\n\nservo = Servo(bot, 0)\nservo.enable()\n```\n\nAll servos need to be enabled to work. This can be done with the `Servo.enable` method or the `Bot.enable_all_servos` method.\n\nIts constructor takes the following parameters:\n\n- `Servo.enable(default_position: Optional[int] = None)`: Enables the servo. If the `default_position` parameter is specified, the servo will be set to that position when enabled.\n\n- `Servo.disable(default_position: Optional[int] = None)`: Disables the servo. If the `default_position` parameter is specified, the servo will be set to that position when disabled.\n\n- `Servo.is_enabled() -> bool`: Returns whether the servo is enabled or not.\n\n- `Servo.toggle(default_position: Optional[int] = None)`: Toggles the servo. If the `default_position` parameter is specified, the servo will be set to that position when toggled.\n\n- `Servo.position(position: Optional[int] = None) -> Optional[int]`: Gets or sets the position of the servo. If no parameters are specified, it will return the current position as an `int`. If the `position` parameter is specified, it will set the servo position to that value and return `None`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/devluke/botballkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BotballKit",
    "package_url": "https://pypi.org/project/BotballKit/",
    "platform": "",
    "project_url": "https://pypi.org/project/BotballKit/",
    "project_urls": {
      "Homepage": "https://gitlab.com/devluke/botballkit"
    },
    "release_url": "https://pypi.org/project/BotballKit/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An object-oriented wrapper for the KIPR library",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6712976,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a4454c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe",
          "md5": "548d377777792d8935d05bf253ed1865",
          "sha256": "c4eebddcd66e8b6f90c5359dfc74121682c7d6ccf483915a5c93702453823aed"
        },
        "downloads": -1,
        "filename": "BotballKit-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "548d377777792d8935d05bf253ed1865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16557,
        "upload_time": "2020-02-27T19:52:10",
        "upload_time_iso_8601": "2020-02-27T19:52:10.358211Z",
        "url": "https://files.pythonhosted.org/packages/5a/44/54c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe/BotballKit-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10a38ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab",
          "md5": "562aaa1a2851dc4fb23a7e1f9d68949f",
          "sha256": "e0df593a088883c539995ef755f0ccee2154252d589b4aae5f0fc6d5fc23fb92"
        },
        "downloads": -1,
        "filename": "BotballKit-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "562aaa1a2851dc4fb23a7e1f9d68949f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3913,
        "upload_time": "2020-02-27T19:52:12",
        "upload_time_iso_8601": "2020-02-27T19:52:12.772153Z",
        "url": "https://files.pythonhosted.org/packages/10/a3/8ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab/BotballKit-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a4454c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe",
        "md5": "548d377777792d8935d05bf253ed1865",
        "sha256": "c4eebddcd66e8b6f90c5359dfc74121682c7d6ccf483915a5c93702453823aed"
      },
      "downloads": -1,
      "filename": "BotballKit-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "548d377777792d8935d05bf253ed1865",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16557,
      "upload_time": "2020-02-27T19:52:10",
      "upload_time_iso_8601": "2020-02-27T19:52:10.358211Z",
      "url": "https://files.pythonhosted.org/packages/5a/44/54c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe/BotballKit-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10a38ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab",
        "md5": "562aaa1a2851dc4fb23a7e1f9d68949f",
        "sha256": "e0df593a088883c539995ef755f0ccee2154252d589b4aae5f0fc6d5fc23fb92"
      },
      "downloads": -1,
      "filename": "BotballKit-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "562aaa1a2851dc4fb23a7e1f9d68949f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 3913,
      "upload_time": "2020-02-27T19:52:12",
      "upload_time_iso_8601": "2020-02-27T19:52:12.772153Z",
      "url": "https://files.pythonhosted.org/packages/10/a3/8ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab/BotballKit-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}