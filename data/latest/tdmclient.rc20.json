{
  "info": {
    "author": "Yves Piguet",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# tdmclient\n\nPython package to connect to a [Thymio II robot](https://thymio.org) via the Thymio Device Manager (TDM), a component of the Thymio Suite. The connection between Python and the TDM is done over TCP to the port number advertised by zeroconf. Simple Python programs can run directly on the Thymio thanks to a transpiler.\n\n## Introduction\n\nThere are basically three ways to use tdmclient. From easy to more advanced:\n\n- If there is no need to communicate with the robot while the program runs, or if it's limited to messages and values displayed by the function `print()`, Python programs in .py files can be run on the Thymio with the following terminal command:\n\n    ```\n    python3 -m tdmclient run program.py\n    ```\n\n    The program is converted from Python to Aseba, the main programming language of the Thymio. The Thymio microcontroller has very limited processing power and memory; only a small part of Python is supported. For more information, see section [Python-to-Aseba transpiler](#Python-to-Aseba_transpiler).\n\n    Instead of a terminal window, you can run Python programs from the simple programming environment [Thonny](https://thonny.org/) with the plug-in [tdmclient-ty](https://pypi.org/project/tdmclient-ty/).\n\n    In a terminal, tdmclient offers other tools to list robots, watch the Thymio internal variables, etc. They're described in section [Tools](#Tools).\n\n- Jupyter is a programming environment based on documents which contain text, executable code, graphics, etc. called _notebooks_ (ipynb files). Specific support for Jupyter is provided by tdmclient to interact directly with Thymio variables, embed Thymio programs in Python, run them, display results, and exchange data between the robot and the computer to benefit from the strengths of both: the Thymio for very reactive code close to its sensors and actuators, and your computer for its much more powerful processing capabilities, the complete Python language and ecosystem, graphics and user interface, files, the Internet... You can also control multiple robots.\n\n    In Jupyter notebooks, the most basic way to execute Python code is one statement at a time. This is also possible directly with Python itself, without Jupyter, with what is known as _repl_ (read-eval-print loop): Python reads the statement you type, it evaluates it when you hit the Return key, it prints the result, and it loops by prompting you for more. The tdmclient module can also be used at that level, where the internal Thymio variables (leds, proximity sensors, motors...) are synchronized with Python and you have a direct access to them as if you were running the repl directly on the robot. You can also create Python programs running on the Thymio from the repl. This is explained in section [Python repl for Thymio](#Python_repl_for_Thymio).\n\n- With `Client` and `Node` objects. `Client` is the base Python class for objects which manage the connection between your Python program and Thymio Suite, or more specifically the Thymio Device Manager (tdm), the part involved with the communication with the robots. `Node` is the base Python class for objects which are the counterpart of robots on the other side of the connection. Controlling robots with these objects is described in section [tdmclient classes and objects](#tdmclient_classes_and_objects).\n\nThe package available on [pypi.org](https://pypi.org/project/tdmclient/), which can be installed with `pip`, contains just tdmclient and its documentation. The [Github code repository](https://github.com/epfl-mobots/tdm-python) also contains [Jupyter notebooks](https://github.com/epfl-mobots/tdm-python/tree/main/notebooks) (begin with [intro.ipynb](https://github.com/epfl-mobots/tdm-python/blob/main/notebooks/intro.ipynb)) and examples of [programs for the Thymio](https://github.com/epfl-mobots/tdm-python/tree/main/examples/robot) to run with `run`.\n\n## Installation\n\nMake sure that Thymio&nbsp;Suite, Python&nbsp;3, and pip, the package installer for Python, are installed on your computer. You can find instructions at [https://www.thymio.org/program/](https://www.thymio.org/program/), [https://www.python.org/downloads/](https://www.python.org/downloads/) and [https://pypi.org/project/pip/](https://pypi.org/project/pip/), respectively.\n\nThen in a terminal window, install tdmclient by typing\n```\npython3 -m pip install tdmclient\n```\n\n## Tools\n\nConnect a robot to your computer via a USB cable or the RF dongle and launch Thymio Suite. In Thymio Suite, you can click the Aseba Studio icon to check that the Thymio is recognized, and, also optionally, start Aseba Studio (select the robot and click the button \"Program with Aseba Studio\"). Only one client can control the robot at the same time to change a variable or run a program. If that's what you want to do from Python, either don't start Aseba Studio or unlock the robot by clicking the little lock icon in the tab title near the top left corner of the Aseba Studio window.\n\nSome features of the library can be accessed directly from the command window by typing `python3 -m tdmclient abc arguments`, where `abc` is the name of the tool. To get the list of tools:\n```\npython3 -m tdmclient --help\n```\n\n### tdmdiscovery\n\nDisplay the address and port of TDM advertised by zeroconf until control-C is typed:\n```\npython3 -m tdmclient tdmdiscovery\n```\n\n### list\n\nDisplay the list of nodes with their id, group id, name, status, capability, and firmware version:\n```\npython3 -m tdmclient list\n```\n\nDisplay options:\n```\npython3 -m tdmclient list --help\n```\n\n### run\n\nRun an Aseba program on the first Thymio II robot and store it into the scratchpad so that it's seen in Aseba Studio:\n```\npython3 -m tdmclient run --scratchpad examples/blink.aseba\n```\n\nStop the program:\n```\npython3 -m tdmclient run --stop\n```\n\nTo avoid having to learn the Aseba language, a small subset of Python can also be used:\n```\npython3 -m tdmclient run --scratchpad examples/blink.py\n```\n\nThe `print` statement, with scalar numbers and constant strings, is supported. Work is shared between the robot and the PC.\n```\npython3 -m tdmclient run --scratchpad examples/print.py\n```\n\nDisplay other options:\n```\npython3 -m tdmclient run --help\n```\n\n### sendevent\n\nSend an event to a robot:\n```\npython3 -m tdmclient sendevent --event foo --data 123\n```\n\nThis assumes that the program running on the robot accepts events with name `foo` and a payload of length 1. The robot must be in the available state (not locked). You can run the progam below in Aseba Studio. In the Events list on the right, click the `+` button and set the name to `foo` and the number of arguments to 1. Once the program is running, unlock the robot (clock the little lock icon in the panel tab) and observe the content of variable `x` when you execute `tdmclient sendevent`.\n```\nvar x\n\nonevent foo\n    x = event.args[0]\n```\n\n### watch\n\nDisplay all node changes (variables, events and program in the scratchpad) until control-C is typed:\n```\npython3 -m tdmclient watch\n```\n\n### gui\n\nRun the variable browser in a window. The GUI is implemented with TK.\n```\npython3 -m tdmclient gui\n```\n\nAt launch, the robot is unlocked, i.e. the variables are just fetched and displayed: _Observe_ is displayed in the status area at the bottom of the window. To be able to change them, activate menu Robot>Control. Then you can click any variable, change its value and type Return to confirm or Esc to cancel.\n\n## Python-to-Aseba transpiler\n\nThe official programming language of the Thymio is Aseba, a rudimentary event-driven text language. In the current official software environment, it's compiled by the TDM to machine code for a virtual processor, which is itself a program which runs on the Thymio. Virtual processors are common on many platforms; they're often referred as _VM_ (Virtual Machine), and their machine code as _bytecode_.\n\nMost programming languages for the Thymio eventually involve bytecode running on its VM. They can be divided into two main categories:\n- Programs compiled to bytecode running autonomously in the VM on the microcontroller of the Thymio. In Thymio Suite and its predecessor Aseba Studio, this includes the Aseba language; and VPL, VPL&nbsp;3, and Blockly, where programs are made of graphical representations of programming constructs and converted to bytecode in two steps, first to Aseba, then from Aseba to bytecode with the standard TDM Aseba compiler.\n- Programs running on the computer and controlling the Thymio remotely. In Thymio Suite and Aseba Studio, this includes Scratch. Python programs which use `thymiodirect` or `tdmclient` can also belong to this category. A small Aseba program runs on the Thymio, receives commands and sends back data via events.\n\nExceptions would include programs which control remotely the Thymio exclusively by fetching and changing variables; and changing the Thymio firmware, the low-level program compiled directly for its microcontroller.\n\nRemote programs can rely on much greater computing power and virtually unlimited data storage capacity. On the other hand, communication is slow, especially with the USB radio dongle. It restricts what can be achieved in feedback loops when commands to actuators are based on sensor measurements.\n\nAlternative compilers belonging to the first category, not needing the approval of Mobsya, are possible and have actually been implemented. While the Thymio VM is tightly coupled to the requirements of the Aseba language, some of the most glaring Aseba language limitations can be circumvented. Ultimately, the principal restrictions are the amount of code and data memory and the execution speed.\n\nSending arbitrary bytecode to the Thymio cannot be done by the TDM. The TDM accepts only Aseba source code, compiles it itself, and sends the resulting bytecode to the Thymio. So with the TDM, to support alternative languages, we must convert them to Aseba programs. To send bytecode, or assembly code which is a bytecode text representation easier to understand for humans, an alternative would be the Python package `thymiodirect`.\n\nConverting source code (the original text program representation) from a language to another one is known as _transpilation_ (or _transcompilation_). This document describes a transpiler which converts programs from Python to Aseba. Its goal is to run Python programs locally on the Thymio, be it for autonomous programs or for control and data acquisition in cooperation with the computer via events. Only a small subset of Python is supported. Most limitations of Aseba are still present.\n\n### Features\n\nThe transpiler is implemented in class `ATranspiler`, completely independently of other `tdmclient` functionality. The input is a complete program in Python; the output is an Aseba program.\n\nHere are the implemented features:\n- Python syntax. The official Python parser is used, hence no surprise should be expected, including with spaces, tabs, parentheses, and comments.\n- Integer and boolean base types. Both are stored as signed 16-bit numbers, without error on overflow.\n- Global variables. Variables are collected from the left-hand side part of plain assignments (assignment to variables without indexing). For arrays, there must exist at least one assignment of a list, directly or indirectly (i.e. `a=[1,2];b=a` is valid). Size conflicts are flagged as errors.\n- Expressions with scalar arithmetic, comparisons (including chained comparisons), and boolean logic and conditional expressions with short-circuit evaluation. Numbers and booleans can be mixed freely. The following Python operators and functions are supported: infix operators `+`, `-`, `*`, `//` (integer division), `%` (converted to modulo instead of remainder, whose sign can differ with negative operands), `&`, `|`, `^`, `<<`, `>>`, `==`, `!=`, `>`, `>=`, `<`, `<=`, `and`, `or`; prefix operators `+`, `-`, `~`, `not`; and functions `abs` and `len`.\n- Constants `False` and `True`.\n- Assignments of scalars to scalar variables or array elements; or lists to whole array variables.\n- Augmented assignments `+=`, `-=`, `*=`, `//=`, `%=`, `&=`, `|=`, `^=`, `<<=`, `>>=`.\n- Lists as the values of assignments to list variables, the argument of `len`, or the arguments of native functions which expect arrays. Lists can be list variables, values between square brackets (`[expr1, expr2, ...]`), or product of a number with values between square brackets (`2 * [expr1, expr2, ...]` or `[expr1, expr2, ...] * 3`).\n- Programming constructs `if` `elif` `else`, `while` `else`, `for` `in range` `else`, `pass`, `return`. The `for` loop must use a `range` generator with 1, 2 or 3 arguments.\n- Functions with scalar arguments, with or without return value (either a scalar value in all `return` statement; or no `return` statement or only without value, and call from the top level of expression statements, i.e. not at a place where a value is expected). Variable-length arguments `*args` and `**kwargs`, default values and multiple arguments with the same name are forbidden. Variables are local unless declared as global or not assigned to. Thymio predefined variables must also be declared explicitly as global when used in functions. In Python, dots are replaced by underscores; e.g. `leds_top` in Python corresponds to `leds.top` in Aseba.\n- Function definitions for event handlers with the `@onevent` decorator. The function name must match the event name (such as `def timer0():` for the first timer event); except that dots are replaced by underscores in Python (e.g. `def button_left():`). Arguments are supported for custom events; they're initialized to `event.args[0]`, `event.args[1]`, etc. (the values passed to `emit`). Variables in event handlers behave like in plain function definitions.\n- Option to check that local variables in plain functions or `@onevent` don't hide variables defined in the outer scope, which could result from forgetting to declare them global. This is implemented in `missing_global_decl` in `tdmclient.atranspiler_warnings` and enabled in command-line tools and Jupyter support with option `--warning-missing-global`.\n- Function call `emit(\"name\")` or `emit(\"name\", param1, param2, ...)` to emit an event without or with parameters. The first argument must be a literal string, delimited with single or double quotes. Raw strings (prefixed with `r`) are allowed, f-strings or byte strings are not. Remaining arguments, if any, must be scalar expressions and are passed as event data.\n- Function call `exit()` or `exit(code)`. An event `_exit` is emitted with the code value (0 by default). It's up to the program on the PC side to accept events, recognize those named `_exit`, stop the Thymio, and handle the code in a suitable way. The tool `run` exits with the code value as its status.\n- Function call `print` with arguments which can be any number of constant strings and scalar values. An event `_print` is emitted where the first value is the print statement index, following values are scalar values (int or boolean sent as signed 16-bit integer), with possibly additional 0 to have the same number of values for all the print statements. Format strings, built by concatenating the string arguments of `print` and `'%d'` to stand for numbers, can be retrieved separately. E.g. `print(\"left\",motor_left_target)` could be transpiled to `emit _print [0, motor.left.target]` and the corresponding format string is `'left %d'`. It's up to the program on the PC side to accept events, recognize those named `_print`, extract the format string index and the arguments, and produce an output string with the `%` operator. The tool `run` and the Jupyter notebook handle that.\n- In expression statements, in addition to function calls, the ellipsis `...` can be used as a synonym of `pass`.\n\nPerhaps the most noticeable yet basic missing features are the non-integer division operator `/` (Python has operator `//` for the integer division), and the `break` and `continue` statements, also missing in Aseba and difficult to transpile to sane code without `goto`. More generally, everything related to object-oriented programming, dynamic types, strings, and nested functions is not supported.\n\nThe transpilation is mostly straightforward. Mixing numeric and boolean expressions often requires splitting them into multiple statements and using temporary variables. The `for` loop is transpiled to an Aseba `while` loop because in Aseba, `for` is limited to constant ranges. Comments are lost because the official Python parser used for the first phase ignores them. Since functions are transpiled to subroutines, recursive functions are forbidden.\n\n### Examples\n\n#### Blinking\n\nBlinking top RGB led:\n```\non = False\ntimer_period[0] = 500\n\n@onevent\ndef timer0():\n    global on, leds_top\n    on = not on\n    if on:\n        leds_top = [32, 32, 0]\n    else:\n        leds_top = [0, 0, 0]\n```\n\nTo transpile this program, assuming it's stored in `examples/blink.py`:\n```\npython3 -m tdmclient transpile examples/blink.py\n```\n\nThe result is\n```\nvar on\nvar _timer0__tmp[1]\n\non = 0\ntimer.period[0] = 500\n\nonevent timer0\n    if on == 0 then\n        _timer0__tmp[0] = 1\n    else\n        _timer0__tmp[0] = 0\n    end\n    on = _timer0__tmp[0]\n    if on != 0 then\n        leds.top = [32, 32, 0]\n    else\n        leds.top = [0, 0, 0]\n    end\n```\n\nTo run this program:\n```\npython3 -m tdmclient run examples/blink.py\n```\n\n#### Print\n\nConstant strings and numeric values can be displayed on the computer with the `print` function. Here is an example which increments a counter every second and prints its value and whether it's odd or even:\n```\ni = 0\n\ntimer_period[0] = 1000\n\n@onevent\ndef timer0():\n    global i, leds_top\n    i += 1\n    is_odd = i % 2 == 1\n    if is_odd:\n        print(i, \"odd\")\n        leds_top = [0, 32, 32]\n    else:\n        print(i, \"even\")\n        leds_top = [0, 0, 0]\n```\n\nRunning this program can also be done with `run`. Assuming it's stored in `examples/print.py`:\n```\npython3 -m tdmclient run examples/print.py\n```\n`run` continues running forever to receive and display the outcome of `print`. To interrupt it, type control-C.\n\nTo understand what happens behind the scenes, display the transpiled program:\n```\npython3 -m tdmclient transpile examples/print.py\n```\n\nThe result is\n```\nvar i\nvar _timer0_is_odd\nvar _timer0__tmp[1]\n\ni = 0\ntimer.period[0] = 1000\n\nonevent timer0\n    i += 1\n    if i % 2 == 1 then\n        _timer0__tmp[0] = 1\n    else\n        _timer0__tmp[0] = 0\n    end\n    _timer0_is_odd = _timer0__tmp[0]\n    if _timer0_is_odd != 0 then\n        emit _print [0, i]\n        leds.top = [0, 32, 32]\n    else\n        emit _print [1, i]\n        leds.top = [0, 0, 0]\n    end\n```\n\nEach `print` statement in Python is converted to `emit _print`. The event data contains the `print` statement index (numbers 0, 1, 2, ...) and the numeric values. The string values aren't sent, because the Aseba programming language doesn't support strings. It's the responsibility of the receiver of the event, i.e. tool `run` on the computer, to use the `print` statement index and assemble the text to be displayed from the constant strings and the numeric values received from the robot.\n\nWith the option `--print`, `transpile` shows the Python dictionary which contains the format string for each `print` statement and the number of numeric arguments:\n```\npython3 -m tdmclient transpile --print examples/print.py\n```\n\nThe result is\n```\n{0: ('%d odd', 1), 1: ('%d even', 1)}\n```\n\n### Feature comparison\n\nThe table below shows a mapping between Aseba and Python features. Empty cells stand for lack of a direct equivalent. Prefixes `const_`, `numeric_` or `bool_` indicate restrictions on what's permitted. Standard Python features which are missing are not transpiled; they cause an error.\n\n| Aseba | Python\n| --- | ---\n| infix `+` `-` `*` `/` | infix `+` `-` `*` `//`\n| infix `%` (remainder) | infix `%` (modulo)\n| infix `<<` `>>` <code>&#124;</code> `&` `^` | infix `<<` `>>` <code>&#124;</code> `&` `^`\n| prefix `-` `~` `not` | prefix `-` `~` `not`\n| | prefix `+`\n| `==` `!=` `<` `<=` `>` `>=` | `==` `!=` `<` `<=` `>` `>=`\n| | `a < b < c` (chained comparisons)\n| `and` `or` (without shortcut) | `and` `or` (with shortcut)\n| | `val1 if test else val2`\n| prefix `abs` | function `abs(expr)`\n| | `len(variable)`\n| `var v` | no declarations\n| `var a[size]` |\n| `var a[] = [...]` | `a = [...]`\n| | `a = number * [...]` `a = [...] * number`\n| `v = numeric_expr` | `v = any_expr`\n| `+=` `-=` `*=` `/=` `%=` `<<=` `>>=` `&=` <code>&#124;=</code> | `+=` `-=` `*=` `//=` `%=` `<<=` `>>=` `&=` <code>&#124;=</code>\n| `v++` `v--` | `v += 1` `v -= 1`\n| `a = b` (array assignment) | `a = b`\n| `a[index_expr]` | `a[index_expr]`\n| `a[constant_range]` |\n| `if bool_expr then` | `if any_expr:`\n| `elseif bool_expr then` | `elif any_expr:`\n| `else` | `else:`\n| `end` | indenting\n| `when bool_expr do` |\n| `while bool_expr do` | `while any_expr:`\n| `for v in 0 : const_b - 1 do` | `for v in range(expr_b):`\n| `for v in const_a : const_b - 1 do` | `for v in range(expr_a, expr_b):`\n| `for v in const_a : const_b -/+ 1 step const_s do` | `for v in range(expr_a, expr_b, expr_s):`\n| `sub fun` | `def fun():`\n| all variables are global | `global g`\n| | assigned variables are local by default\n| | `def fun(arg1, arg2, ...):`\n| `return` | `return`\n| | `return expr`\n| `callsub fun` | `fun()`\n| | `fun(expr1, expr2, ...)`\n| | `fun(...)` in expression\n| `onevent name` | `@onevent` `def name():`\n| `onevent name` `arg1=event.args[0] ...` | `@onevent` `def name(arg1, ...):`\n| all variables are global | `global g`\n| | assigned variables are local by default\n| `emit name` | `emit(\"name\")`\n| `emit name [expr1, expr2, ...]` | `emit(\"name\", expr1, expr2, ...)`\n| explicit event declaration outside program | no event declaration\n| | `print(...)`\n| `call natfun(expr1, expr2, ...)` | `nf_natfun(expr1, expr2, ...)` (see below)\n| | `natfun(expr1, ...)` in expressions\n\nIn Python, the names of native functions have underscores instead of dots. Many native functions can be called with the syntax of a plain function call, with a name prefixed with `nf_` and the same arguments as in Aseba. In the table below, uppercase letters stand for arrays (lists in Python), lowercase letters for scalar values, `A`, `B`, `a` and `b` for inputs, `R` and `r` for result, and `P` for both input and result. Lists can be variables or lists of numbers and/or booleans.\n\nArguments are the same in the same order, except for `_system.settings.read` which returns a single scalar value. In Python, scalar numbers are passed by value and not by reference, contrary to Aseba; therefore the result is passed as a return value and can be used directly in any expression. Note also that in Python, lists (arrays) of length 1 are _not_ interchangeable with scalars, contrary to Aseba.\n\n| Aseba | Python\n| --- | ---\n| `call math.copy(R, A)` | `nf_math_copy(R, A)`\n| `call math.fill(R, a)` | `nf_math_fill(R, a)`\n| `call math.addscalar(R, A, b)` | `nf_math_addscalar(R, A, b)`\n| `call math.add(R, A, B)` | `nf_math_add(R, A, B)`\n| `call math.sub(R, A, B)` | `nf_math_sub(R, A, B)`\n| `call math.mul(R, A, B)` | `nf_math_mul(R, A, B)`\n| `call math.div(R, A, B)` | `nf_math_div(R, A, B)`\n| `call math.min(R, A, B)` | `nf_math_min(R, A, B)`\n| `call math.max(R, A, B)` | `nf_math_max(R, A, B)`\n| `call math.clamp(R, A, B, C)` | `nf_math_clamp(R, A, B, C)`\n| `call math.rand(R)` | `nf_math_rand(R)`\n| `call math.sort(P)` | `nf_math_sort(P)`\n| `call math.muldiv(R, A, B, C)` | `nf_math_muldiv(R, A, B, C)`\n| `call math.atan2(R, A, B)` | `nf_math_atan2(R, A, B)`\n| `call math.sin(R, A)` | `nf_math_sin(R, A)`\n| `call math.cos(R, A)` | `nf_math_cos(R, A)`\n| `call math.rot2(R, A, b)` | `nf_math_rot2(R, A, b)`\n| `call math.sqrt(R, A)` | `nf_math_sqrt(R, A)`\n| `call _leds.set(a, b)` | `nf__leds_set(a, b)`\n| `call _poweroff()` | `nf__poweroff()`\n| `call _system.reboot()` | `nf__system_reboot()`\n| `call _system.settings.read(a, r)` | `r = nf__system_settings_read(a)`\n| `call _system.settings.write(a, b)` | `nf__system_settings_write(a, b)`\n| `call _leds.set(i, br)` | `nf__leds_set(i, br)`\n| `call sound.record(i)` | `nf_sound_record(i)`\n| `call sound.play(i)` | `nf_sound_play(i)`\n| `call sound.replay(i)` | `nf_sound_replay(i)`\n| `call sound.duration(i, d)` | `d = nf_sound_duration(i)`\n| `call sound.system(i)` | `nf_sound_system(i)`\n| `call leds.circle(br0,br1,br2,br3,br4,br5,br6,br7)` | `nf_leds_circle(br0,br1,br2,br3,br4,br5,br6,br7)`\n| `call leds.top(r, g, b)` | `nf_leds_top(r, g, b)`\n| `call leds.bottom.right(r, g, b)` | `nf_leds_bottom.right(r, g, b)`\n| `call leds.bottom.left(r, g, b)` | `nf_leds_bottom_left(r, g, b)`\n| `call leds.buttons(br0,br1,br2,br3)` | `nf_leds_buttons(br0,br1,br2,br3)`\n| `call leds.leds.prox.h(br0,br1,br2,br3,br4,br5,br6,br7)` | `nf_leds_prox_h(br0,br1,br2,br3,br4,br5,br6,br7)`\n| `call leds.leds.prox.v(br0, br1)` | `nf_leds_prox_v(br0, br1)`\n| `call leds.rc(br)` | `nf_leds_rc(br)`\n| `call leds.sound(br)` | `nf_leds_sound(br)`\n| `call leds.temperature(r, g)` | `nf_leds_temperature(r, g)`\n| `call sound.freq(f, d)` | `nf_sound_freq(f, d)`\n| `call sound.wave(W)` | `nf_sound_wave(W)`\n| `call prox.comm.enable(en)` | `nf_prox_comm_enable(en)`\n| `call sd.open(i, status)` | `status = nf_sd_open(i)`\n| `call sd.write(data, n)` | `n = nf_sd_write(data)`\n| `call sd.read(data, n)` | `n = nf_sd_read(data)`\n| `call sd.seek(pos, status)` | `status = nf_sd_seek(pos)`\n| `call deque.size(queue, n)` | `n = nf_deque_size(queue)`\n| `call deque.push_front(queue, data)` | `nf_deque_push_front(queue, data)`\n| `call deque.push_back(queue, data)` | `nf_deque_push_back(queue, data)`\n| `call deque.pop_front(queue, data)` | `nf_deque_pop_front(queue, data)`\n| `call deque.pop_back(queue, data)` | `nf_deque_pop_back(queue, data)`\n| `call deque.get(queue, data, i)` | `nf_deque_get(queue, data, i)`\n| `call deque.set(queue, data, i)` | `nf_deque_set(queue, data, i)`\n| `call deque.insert(queue, data, i)` | `nf_deque_insert(queue, data, i)`\n| `call deque.erase(queue, i, len)` | `nf_deque_erase(queue, i, len)`\n\n\nSome math functions have an alternative name without the `nf_` prefix, scalar arguments and a single scalar result. They can be used in assignments or other expressions.\n\n| Aseba native function | Python function call\n| --- | ---\n| `math.min` | `math_min(a, b)`\n| `math.max` | `math_max(a, b)`\n| `math.clamp` | `math_clamp(a, b, c)`\n| `math.rand` | `math_rand()`\n| `math.muldiv` | `math_muldiv(a, b, c)`\n| `math.atan2` | `math_atan2(a, b)`\n| `math.sin` | `math_sin(a)`\n| `math.cos` | `math_cos(a)`\n| `math.sqrt` | `math_sqrt(a)`\n\n## Thymio variables and native functions\n\nThymio variables and native functions are mapped to Thymio's. Their names contain underscores `_` instead of dots '.'; e.g. `leds_top` in Python instead of `leds.top` in Aseba. By default, they're predefined in the global scope. Alternatively, with option `--nothymio` in  tools `transpile` or `run`, they aren't, but can be imported from module `thymio` as follows:\n- `import thymio` in the global scope: variables can be accessed everywhere in expressions or assignments as e.g. `thymio.leds_top`.\n- `import thymio as A` in global scope: variables can be accessed everywhere in expressions or assignments as e.g. `A.leds_top` (`A` can be any valid symbol).\n- `import thymio` or `import thymio as A` in function definition scope: variables can be accessed in expressions or assignments in the function.\n- `from thymio import s1, s2, ...` in the global scope: variables can be accessed in expressions everywhere (except in functions where a local variables with the same name is assigned to), in assignments in the global scope, and in functions where `s1`, `s2` etc. are declared global.\n- `from thymio import *` in the global scope: all Thymio symbols are imported and can be accessed directly by their name.\n- `from thymio import s1 as a1, s2 as a2, ...` in the global scope: same as above, but variables (or only some of them) are aliased to a different name.\n- `from thymio import ...` in function definition scope: variables can be accessed in expressions or assignments in the function.\n\nIn other words, the expected Python rules apply.\n\nIn addition to variables and native functions, the following constants are defined:\n\n| Name | Value\n| --- | ---\n| `BLACK` | `[0, 0, 0]`\n| `BLUE` | `[0, 0, 32]`\n| `CYAN` | `[0, 32, 32]`\n| `GREEN` | `[0, 32, 0]`\n| `MAGENTA` | `[32, 0, 32]`\n| `RED` | `[32, 0, 0]`\n| `WHITE` | `[32, 32, 32]`\n| `YELLOW` | `[32, 32, 0]`\n\nFunction `emit` and decorator `@onevent` are always predefined. This is also the case for `abs`, `exit`, `len` and `print`, like in plain Python.\n\nHere are examples which all transpile to the same Aseba program `leds.top = [32, 0, 0]`:\n```\nimport thymio\nthymio.leds_top = thymio.RED\n```\n```\nfrom thymio import leds_top, RED\nleds_top = RED\n```\n```\nfrom thymio import leds_top\nfrom thymio import RED\nleds_top = RED\n```\n```\nimport thymio\nfrom thymio import leds_top\nleds_top = thymio.RED\n```\n```\nfrom thymio import *\nleds_top = RED\n```\n```\nfrom thymio import leds_top as led, RED as color\nled = color\n```\n\n## Module `clock`\n\nIn addition to `thymio`, there is one other module available. The module `clock` provides functions to get the current time since the start of the program or the last call to its function `reset()`. It can be used to measure the time between two events or to add time information to data sent from the robot to the PC with events.\n\nThe module implements the following functions:\n\n| Function | Description\n| --- | ---\n| `reset()` | reset the tick counter (restart times from 0)\n| `seconds()` | time in second\n| `ticks_50Hz()` | time in 1/50 second\n\nThe values are based on a counter incremented 50 times per second. Since it's stored in a signed 16-bit integer, like all Thymio variables, there is an overflow after 32767/50 seconds, or 5 minutes and 55 seconds. If your program runs longer, use the clock to measure smaller intervals and reset it for each new interval.\n\n## Python repl for Thymio\n\nThe easiest way to explore the Thymio from Python is to use a special version of the Python _repl_ customized so that you're almost on the robot. A repl is a read-eval-print loop, i.e. the interactive environment where you type some code fragment (an expression, an assignment, a function call, or a longer piece of program), you hit the Return key and Python will evaluate your code, print the result and wait for more input.\n\nTo start the TDM repl, make sure that Thymio Suite is running and that a Thymio is connected. Then type the following command in your shell:\n```\npython3 -m tdmclient repl\n```\n\nA connection with the TDM will be established, the first robot will be found and locked, a message will be displayed to confirm that everything is fine, and you'll get the familiar Python prompt:\n```\nTDM:      192.168.1.20:57785\nRobot:    AA003\nRobot ID: 36d6627a-d1af-9571-9458-d9192d951664\n\n>>>\n```\n\nEverything will work as expected: you can evaluate expressions, assign values to variables, create objects, define functions and classes, import modules and packages, open files on your hard disk to read or write to them, connect to the Internet... There are just two differences:\n- Every time you type a command, the repl will check if your variables are known to the Thymio. Those whose name matches are synchronized with the Thymio before being used in expressions or after being assigned to. Python names are the same as Thymio name as they appear in the documentation and in Aseba Studio, except that dots are replaced with underscores (`leds.top` on the Thymio becomes `leds_top` in the repl). And the source code of function definitions will be remembered in case we need it later.\n- A few functions specific to the Thymio are defined.\n\nHere are a few examples of what you can do. Check that you can still use all the functions of Python:\n```\n>>> 1 + 2\n3\n>>> import math\n>>> 2.3 * math.sin(3)\n0.3245760185376946\n>>>\n```\n\nChange the color of the RGB led on the top of the Thymio:\n```\n>>> leds_top = [0, 0, 32]\n>>>\n```\n\nGet the Thymio temperature and convert it from tenths of degree Celsius to Kelvin. Notice we've waited a little too long between the two commands: the temperature has changed, or maybe the sensor measurement is corrupted by noise.\n```\n>>> temperature\n281\n>>> temp_K = temperature / 10 + 273.15\n>>> temp_K\n301.65\n>>>\n```\n\nThe function `sleep(t)`, specific to the TDM repl, waits for `t` seconds. The argument `t` is expressed in seconds and can be fractional and less than 1. The next code example stores 10 samples of the front proximity sensor, acquired with a sampling period of 0.5. We brought a hand close to the front of the robot twice during the 5 seconds the loop lasted.\n```\n>>> p = []\n>>> for i in range(10):\n...     p.append(prox_horizontal[2])\n...     sleep(0.5)\n...\n>>> p\n[0, 0, 0, 0, 2639, 3440, 0, 1273, 2974, 4444]\n>>>\n```\n\nThe code above runs on the computer, not on the Thymio. This is fine as long as the communication is fast enough for our needs. If you want to scan a barcode with the ground sensor by moving over it, depending on the robot speed, the sampling rate must be higher than what's allowed by the variable synchronization, especially between the TDM and the Thymio if you have a wireless dongle.\n\nIt's also possible to run code on the Thymio. You can define functions with the function decorator `@onevent` to specify that it should be called when the event which corresponds to the function name is emitted. Here is an example where the robot toggles its top RGB led between yellow and switched off every 0.5 second.\n```\non = False\ntimer_period[0] = 500\n@onevent\ndef timer0():\n    global on, leds_top\n    on = not on\n    if on:\n        leds_top = [32, 32, 0]\n    else:\n        leds_top = [0, 0, 0]\n```\n\nYou can copy-paste the code above to the repl. We show it below with the repl prompts, which as usual you must not type:\n```\n>>> on = False\n>>> timer_period[0] = 500\n>>> @onevent\n... def timer0():\n...     global on, leds_top\n...     on = not on\n...     if on:\n...         leds_top = [32, 32, 0]\n...     else:\n...         leds_top = [0, 0, 0]\n...\n>>>\n```\n\nOnce you've defined the function in Python running on your computer, nothing more happens. On the Thymio, there is just the variable `timer.period[0]` which has been set to 500. The magic happens with the `run()` function:\n```\n>>> run()\n>>>\n```\n\nThe TDM repl will gather all the functions decorated with `@onevent`, all the Thymio variables which have been assigned to, global variables and other functions called from `@onevent` functions (directly or not), and make a Python program for the Thymio with all that. Then this program is converted to the Aseba programming language (the language accepted by the TDM), sent to the Thymio and executed.\n\nIf you want to check what `run()` does behind the scenes, call `robot_code()` to get the Python program, or `robot_code(\"aseba\")` to get its conversion to Aseba:\n```\n>>> print(robot_code())\ntimer_period = [500, 0]\n@onevent\ndef timer0():\n    global on, leds_top\n    on = not on\n    if on:\n        leds_top = [32, 32, 0]\n    else:\n        leds_top = [0, 0, 0]\non = False\n\n>>> print(robot_code(\"aseba\"))\nvar on\nvar _timer0__tmp[1]\n\ntimer.period = [500, 0]\non = 0\n\nonevent timer0\n    if on == 0 then\n        _timer0__tmp[0] = 1\n    else\n        _timer0__tmp[0] = 0\n    end\n    on = _timer0__tmp[0]\n    if on != 0 then\n        leds.top = [32, 32, 0]\n    else\n        leds.top = [0, 0, 0]\n    end\n\n>>>\n```\n\nTo retrieve data from the robot and process them further or store them on your computer, you can send events with `emit`. Let's write a short demonstration. But first, to avoid any interference with our previous definitions, we ask Python to forget the list of `@onevent` functions and assignments to Thymio's variables:\n```\nrobot_code_new()\n```\n\nHere is a short program which collects 20 samples of the front proximity sensor, one every 200ms (5 per second), i.e. during 4 seconds:\n```\ni = 0\ntimer_period[0] = 200\n\n@onevent\ndef timer0():\n    global i, prox_horizontal\n    i += 1\n    if i > 20:\n        exit()\n    emit(\"front\", prox_horizontal[2])\n```\n\nNote how the Thymio program terminates with a call to the `exit()` function. Running it is done as usual with `run()`. Since the program emits events, `run` continues running to process the events it receives until it receives `_exit` (emitted by `exit()`) or you type control-C. All events, except for `_exit` and `_print`, are collected with their data. Event data are retrieved with `get_event_data(event_name)`:\n```\n>>> run()  # 4 seconds to move your hand in front of the robot\n>>> get_event_data(\"front\")\n[[0], [0], [0], [0], [1732], [2792], [4182], [4325], [3006], [1667], [0], [1346], [2352], [3972], [4533], [2644], [1409], [0], [0], [0], [0]]\n```\n\nYou can send events with different names. You can also reset an event collection by calling `clear_event_data(event_name)`, or without argument to clear all the events:\n```\n>>> clear_event_data()\n```\n\nWe've mentionned the `_print` event. It's emitted by the `print()` function, an easy way to check what the program does. The Thymio robot is limited to handling integer numbers, but `print` still accepts constant strings. The robot and the computer work together to display what's expected.\n```\n>>> robot_code_new()\n>>> @onevent\n... def button_forward():\n...    print(\"Temperature:\", temperature)\n...\n>>> run()  # press the forward button a few times, then control-C\nTemperature: 292\nTemperature: 293\n^C\n```\n\n## Jupyter notebooks\n\nJupyter notebooks offer a nice alternative to the plain Python prompt in a terminal. In notebooks, you can easily store a sequence of commands, edit them, repeat them, document them, have larger code fragments, produce graphics, or have interactive controls such as sliders and checkboxes. This section describes features specific to the use of tdmclient to connect and interact with a Thymio II robot. For general informations about Jupyter, how to install it and how to open an existing notebook or create a new one, please refer to its [documentation](https://jupyter.org/).\n\nThe next subsections describe how to install tdmclient in the context of a notebook, how to connect and interact with a robot with the classes and methods of tdmclient, and how to have a notebook where variables are synchronized with the robot's (the equivalent of the TDM repl).\n\n### Installing tdmclient in a notebook\n\nIn notebooks, the context of Python is not the same as when you run it in a terminal window. To make sure that tdmclient is available, you can have a code cell with the following content at the beginning of your notebook and evaluate it before importing tdmclient:\n```\n%pip install --upgrade tdmclient\n```\n\nThis will make sure you have the last version available at [https://pypi.org](https://pypi.org).\n\nAlternatively, if you develop your own version of tdmclient, you can make a `.whl` file by typing the following command in a terminal:\n```\npython3 setup.py bdist_wheel\n```\nThen in your notebook, replace the `%pip` cell above with\n```\n%pip install --quiet --force-reinstall /.../tdm-python/dist/tdmclient-0.1.3-py3-none-any.whl\n```\nreplacing `/.../tdm-python/dist/tdmclient-0.1.3-py3-none-any.whl` with the actual location of the `.whl` file.\n\n### Using tdmclient classes and methods\n\nThis section describes the use of the class `ClientAsync` in a notebook.\n\nThe main difference between using tdmclient in a notebook and in the standard Python repl (read-eval-print loop) is that you can use directly the `await` keyword to execute `async` methods and wait for their result. Therefore:\n- You can avoid writing async functions if it's just to run them with `run_async_program`.\n- If you still write async functions, run them with `await prog()` instead of `client.run_async_program(prog)`.\n\nIn the code fragments below, you can put separate statements in distinct cells and intersperse text cells. Only larger Python constructs such as `with`, loops, or function definitions, must be contained as a whole in a single cell.\n\nFirst, import what's needed from the tdmclient package, create client and node object, and lock the node to be able to set variables or run programs:\n```\nfrom tdmclient import ClientAsync\nclient = ClientAsync()\nnode = await client.wait_for_node()\nawait node.lock()\n```\n\nThen continue as with the Python repl, just replacing `aw(...)` with `await ...`.\n\n### Synchronized variables\n\nThis section parallels the TDM repl where the Thymio variables are shared with your local Python session.\n\nFirst, import what's needed from the tdmclient package and start the session:\n```\nimport tdmclient.notebook\nawait tdmclient.notebook.start()\n```\n\nThen the variables which match the robot's are synchronized in both directions. Dots are replaced by underscores: `leds.top` on Thymio becomes `leds_top` in Python.\n```\n# cyan\nleds_top = [0, 32, 32]\n```\n\nYou can also define event handlers with functions decorated with `@onevent`:\n```\non = False\ntimer_period[0] = 500\n@onevent\ndef timer0():\n    global on, leds_top\n    on = not on\n    if on:\n        leds_top = [32, 32, 0]\n    else:\n        leds_top = [0, 0, 0]\n```\n\nRun and stop them with `run()` and `stop()`, respectively.\n\n`run()` collects all the event handlers, the functions they call, the Thymio variables which have been set, and other global variables they use to make a Python program to be converted from Python to Aseba, compiled, and run on the Thymio. But you can also provide program code as a whole in a cell and perform these steps separately:\n```\n%%run_python\nv = [32, 0, 32, 0, 32, 0, 32, 0]\nleds_circle = v\n```\n```\n%%run_aseba\nvar v[] = [32, 32, 32, 0, 0, 0, 32, 32]\nleds.circle = v\n```\n```\n%%transpile_to_aseba\nv = [32, 0, 32, 0, 32, 0, 32, 0]\nleds_circle = v\n```\n\nVariables accessed or changed in the notebook are synchronized with the robot only if the statements are located directly in notebook cells. This isn't automatically the case for functions, to let you decide when it's efficient to receive or send values to the robot. There are two ways to do it:\n- Function `get_var(\"var1\", \"var2\", ...)` retrieves the value of variables `var1`, `var2` etc. and returns them in a tuple in the same order. The typical use is to unpack the tuple directly into variables in an assignment: `var1,var2,...=get_var(\"var1\",\"var2\",...)`; beware to have a trailing comma if you retrieve only one variable, else you'll get a plain assignment of the tuple itself.\n\n    Function `set_var(var1=value1,var2=value2,...)` sends new values to the robot.\n\n    Here is an example which sets the color of the robot to red or blue depending on its temperature:\n    ```\n    def f(temp_limit=30):\n        temperature, = get_var(\"temperature\")\n        if temperature > temp_limit * 10:\n            set_var(leds_top=[32, 0, 0])\n        else:\n            set_var(leds_top=[0, 10, 32])\n    ```\n- To synchronized global variables whose names match the robot's, the function can be decorated with `@tdmclient.notebook.sync_var`. The effect of the decorator is to extend the function so that these variables are fetched at the beginning and sent back to the robot before the function returns.\n\n    Here is the same example:\n    ```\n    @tdmclient.notebook.sync_var\n    def f(temp_limit=30):\n        global temperature, leds_top\n        if temperature > temp_limit * 10:\n            leds_top = [32, 0, 0]\n        else:\n            leds_top = [0, 10, 32]\n    ```\n\n### Passing results to the robot\n\nTo define a variable in a program for the robot with a value calculated in the notebook, the simplest way is to add an option to `%%run_python` or `%%run_aseba`. In the first example, we pass the variable `speed`:\n```\nspeed = 20\n```\n\n```\n%%run_python --var speed=speed\nmotor_left_target = speed\nmotor_right_target = speed\n```\n\nIn the assignment which follows `--var`, what's on the left side of `=` is the name of the variable to define in the robot program; what's on the right side is any expression (a constant, a variable, or something more complicated) evaluated in the context of the notebook. If the assignment contains spaces, you must quote it:\n```\n%%run_python --var \"speed = 2 * speed\"\nmotor_left_target = speed\nmotor_right_target = speed\n```\n\nThe expression can also evaluate to a list:\n```\ncolor = [0, 32, 0]  # green\n```\n\n```\n%%run_python --var \"c = [32-component for component in color]\"\nleds_top = c  # [32,0,32] = magenta\n```\n\nTo pass values during the execution once or multiple times, use custom events or change variables after the program has started, as explained below.\n\n### Custom events\n\nTo retrieve data from the robot and process them further in your notebook, you can send events with `emit`. In the program below, we collects 20 samples of the front proximity sensor, one every 200ms (5 per second), i.e. during 4 seconds.\n```\n%%run_python --wait\n\ni = 0\ntimer_period[0] = 200\n\n@onevent\ndef timer0():\n    global i, prox_horizontal\n    i += 1\n    if i > 20:\n        exit()\n    emit(\"front\", prox_horizontal[2])\n```\n\nEvents received by the computer are collected automatically. We retrieve them with `get_event_data(event_name)`, a list of all the data sent by `emit`, which are lists themselves.\n```\ndata = get_event_data(\"front\")\nprint(data)\n```\n\nYou can send events with different names. You can also reset an event collection by calling `clear_event_data(event_name)`, or without argument to clear all the events:\n```\nclear_event_data()\n```\n\nInstead of calling `clear_event_data()` without argument, the option `--clear-event-data` of the magic command `%%run_python` has the same effect and avoids to evaluate a separate notebook cell.\n\nYou can also send events in the other direction, from the notebook to the robot. This can be useful for instance if you implement a low-level behavior on the robot, such as obstacle avoidance and sensor acquisition, and send at a lower rate high-level commands which require more computing power available only on the PC.\n\nThe Thymio program below listens for events named `color` and changes the top RGB led color based on a single number. Bits 0, 1 and 2 represent the red, green, and blue components respectively.\n```\n%%run_python\n\n@onevent\ndef color(c):\n    global leds_top\n    leds_top[0] = 32 if c & 1 else 0\n    leds_top[1] = 32 if c & 2 else 0\n    leds_top[2] = 32 if c & 4 else 0\n```\n\nNow that the program runs on the robot, we can send it `color` events. The number of values in `send_event` should match the `@onevent` declaration. They can be passed as numeric arguments or as arrays.\n```\nfor col in range(8):\n    send_event(\"color\", col)\n    sleep(0.5)\n```\n\n### Connection and disconnection\n\nUsually, once we've imported the notebook support with `import tdmclient.notebook`, we would connect to the first robot, assuming there is just one. It's also possible to get the list of robots:\n```\nawait tdmclient.notebook.list()\n```\n```\nid:       67a5510c-d1af-4386-9458-d9145d951664\ngroup id: 7dcf1f69-85a8-4fd4-9c4b-b74d155a1246\nname:     AA003\nstatus:   2 (available)\ncap:      7\nfirmware: 14\n```\n\nWhen you start the notebook session, you can add options to `tdmclient.notebook.start` to specify which robot to use. Robots can be identified by their id, which is unique hence unambiguous but difficult to type and remember, or by their name which you can define yourself.\n\nSince we don't know the id or name of your robot, we'll cheat by picking the actual id and name of the first robot. To get the list of robots (or nodes), instead of `tdmclient.notebook.list` as above where the result is displayed in a nice list of properties, we call `tdmclient.notebook.get_nodes` which returns a list.\n```\nnodes = await tdmclient.notebook.get_nodes()\nid_first_node = nodes[0].id_str\nname_first_node = nodes[0].props[\"name\"]\nprint(f\"id: {id_first_node}\")\nprint(f\"name: {name_first_node}\")\n```\n```\nid: 67a5510c-d1af-4386-9458-d9145d951664\nname: AA003\n```\n\nThen you can specify the robot id:\n```\nawait tdmclient.notebook.start(node_id=id_first_node)\n```\n\nWe want to show you how to use the robot's name instead of its id, but first we must close the connection:\n```\nawait tdmclient.notebook.stop()\n```\n\nNow the robot is available again.\n```\nawait tdmclient.notebook.start(node_name=name_first_node)\n```\n\n### Addressing robots\n\nWhen several robots are connected to the computer, access to the default (first or specified in `start()`) robot's variables, running or stopping a program is done as if there was no other robot connected to the TDM. To refer to another robot, you have to specify it, with options in magic commands `%%run_python` or `%%run_aseba`, and with key arguments in functions `run()` or `stop()`. In all cases, you can do it with the node id, the node name, or the node index, a number which is 0 for the first robot (the default robot used by `tdmclient.notebook.start()`), 1 for the second robot and so on.\n\n| Robot specification | Magic command option | Function key argument |\n| --- | --- | --- |\n| id | `--robotid ...` | `robot_id=\"...\"` |\n| name | `--robotname ...` | `robot_name=\"...\"` |\n| index | `--robotindex ...` | `robot_index=\"...\"` |\n\nIf the robot name contains spaces, enclose it between double-quotes also for the magic command option:\n```\n%%run_python --robotname \"my Thymio\"\n...\n```\n\nTo have a notebook which works unmodified with any robots, not only those of its author, we'll use the robot index. We'll also include it for the default robot (`robot_index=0`) to make clear it's one among a group of two robots.\n\nTo illustrate running programs on specific robots, here is how to change the color of the top led to blue on robot 0 and green on robot 1:\n```\n%%run_python --robotindex 0\nleds_top = [0, 0, 32]\n```\n```\n%%run_python --robotindex 1\nleds_top = [0, 20, 0]\n```\n\nIf you want to run the same program on multiple robots, you can do it with a single `%%run_python` or `%%run_aseba` cell by specifying the id, name or index of all the target robots separated with commas, without additional spaces. If the robot names contain spaces, enclose the whole list of names between double-quotes, keeping exactly the spaces in the names but without additional spaces around the commas.\n```\n%%run_aseba --robotindex 0,1\nleds.bottom.right = [32, 0, 32]  # purple\nleds.bottom.left = [32, 16, 0]   # orange\n```\n\nWhen the option `--wait` is specified, the cell execution proceeds until each program has called `exit()` (in Python), or the execution is interrupted. The output of `print()` functions, and `exit(status)` functions with a non-zero status, is prefixed with the index of the robot among those the program run on. (In the following program, since `exit()` just sends an `_exit` event to the computer without terminating immediately itself its own execution on the robot, `print()` is executed one more time).\n```\n%%run_python --robotindex 0,1 --wait\n\ntimer_period[0] = 250\ni = 0\n\n@onevent\ndef timer0():\n    global i\n    i += 1\n    if i > 3:\n        exit(1)\n    print(i)\n```\n```\n[R0] 1\n[R0] 2\n[R0] 3\n[R1] 1\n[R0] Exit, status=1\n[R1] 3\n[R1] Exit, status=1\n[R1] 4\n```\n\n### Controlling multiple robots with events from Jupyter\n\nFunction `get_event_data()` retrieves the events sent by a robot. It can take a key argument `robot_id`, `robot_name` or `robot_index` to specify which robot is concerned.\n\nTo illustrate this, here is a program which emits an event `\"b\"` with data suitable for `leds_circle`. It accepts an event `\"c\"` to set `leds_circle`. We run it on both robots (`--robotindex 0,1`).\n```\n%%run_python --robotindex 0,1 --clear-event-data\n\n@onevent\ndef button_center():\n    emit(\"b\", 0, 0, 0, 0, 0, 0, 0, 0)\n@onevent\ndef button_forward():\n    emit(\"b\", 32, 32, 0, 0, 0, 0, 0, 32)\n@onevent\ndef button_right():\n    emit(\"b\", 0, 32, 32, 32, 0, 0, 0, 0)\n@onevent\ndef button_backward():\n    emit(\"b\", 0, 0, 0, 32, 32, 32, 0, 0)\n@onevent\ndef button_left():\n    emit(\"b\", 0, 0, 0, 0, 0, 32, 32, 32)\n\n@onevent\ndef c(l0, l1, l2, l3, l4, l5, l6, l7):\n    global leds_circle\n    leds_circle = [l0, l1, l2, l3, l4, l5, l6, l7]\n```\n\nWe make the robot communicate by forwarding the messages in Jupyter. When Jupyter receives events, the robot sender is identified by a node object. In order to deduce which is the receiver robot, we first get the list of all nodes.\n```\nnodes = await tdmclient.notebook.get_nodes()\n```\n\nIf the sender is `node` then its index is `nodes.index(node)` and the index of the receiver (the other among the first two robots) is `1-nodes.index(node)`.\n\nHere is a program to forward the events. Touch the buttons on one robot to switch corresponding leds on the other one. The loop runs until you interrupt it with the Interrupt button (little black square).\n```\ndef on_event_data(node, event_name):\n    src_index = nodes.index(node)\n    dest_index = 1 - src_index\n    event_data_list = get_event_data(\"b\", robot_index=src_index)\n    for data in event_data_list:\n        send_event(\"c\", *data, robot_index=dest_index)\n    clear_event_data(\"b\", robot_index=src_index)\n\ntdmclient.notebook.process_events(all_nodes=True, on_event_data=on_event_data)\n```\n\n### Infrared communication between robots\n\nSimple messages made of a single number can be sent between robots via the same infrared leds and sensors as those used as active proximity sensors. The program below reproduces the same behavior as the robot and computer programs in the previous section, where touching a button switches on the corresponding yellow leds of the other robot. Once the robot programs are launched, the computer isn't involved anymore.\n```\n%%run_python --robotindex 0,1\n\nnf_prox_comm_enable(True)\n\ndef send_msg(code):\n    global prox_comm_tx\n    prox_comm_tx = code\n\n@onevent\ndef button_center():\n    send_msg(99)\n@onevent\ndef button_forward():\n    send_msg(1)\n@onevent\ndef button_right():\n    send_msg(2)\n@onevent\ndef button_backward():\n    send_msg(3)\n@onevent\ndef button_left():\n    send_msg(4)\n\n@onevent\ndef prox_comm():\n    global prox_comm_rx, leds_circle\n    msg = prox_comm_rx\n    if msg == 99:\n        leds_circle = [0, 0, 0, 0, 0, 0, 0, 0]\n    elif msg == 1:\n        leds_circle = [32, 32, 0, 0, 0, 0, 0, 32]\n    elif msg == 2:\n        leds_circle = [0, 32, 32, 32, 0, 0, 0, 0]\n    elif msg == 3:\n        leds_circle = [0, 0, 0, 32, 32, 32, 0, 0]\n    elif msg == 4:\n        leds_circle = [0, 0, 0, 0, 0, 32, 32, 32]\n```\n\n### Direct use of node objects\n\nOnce connected, the node object used to communicate with the robot can be obtained with `get_node()`:\n```\nrobot = tdmclient.notebook.get_node()\n```\n\nThen all the methods and properties defined for `ClientAsyncCacheNode` objects can be used. For example, you can get the list of its variables:\n```\nrobot_variables = list(await robot.var_description())\nrobot_variables\n```\n```\n['_id',\n 'event.source',\n 'event.args',\n ...\n 'sd.present']\n ```\n\nOr set the content of the scratchpad, used by the tdm to share the source code amoung all the clients. No need to use the actual source code, you can set it to any string. Check then in Aseba Studio.\n```\nawait robot.set_scratchpad(\"Hello from a notebook, Studio!\")\n```\n\nThe client object is also available as a `ClientAsync` object:\n```\nclient = tdmclient.notebook.get_client()\n```\n\nThe client object doesn't have many intersting usages, because there are simpler alternatives with higher-level functions. Let's check whether the tdm is local:\n```\nclient.localhost_peer\n```\n```\nTrue\n```\n\n### Interactive widgets\n\nThis section illustrates the use of `tdmclient.notebook` with interactive widgets provided by the `ipywidgets` package.\n\nImport the required classes and connect to the robot. In addition to `tdmclient.notebook`, `ipywidgets` provides support for interactive widgets, i.e. GUI elements which you can control with the mouse.\n```\nimport tdmclient.notebook\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nawait tdmclient.notebook.start()\n```\n\nA function can be made interactive by adding a decorator `@interact` which specifies the range of values of each argument. When the cell is executed, sliders are displayed for each interactive argument. `(0,32,1)` means a range of integer values from 0 to 32 with a step of 1. Since the default value of the step is 1, we can just write `(0,32)`. The initial value of the arguments is given by their default value in the function definition.\n\nThymio variables aren't synchronized automatically when they're located inside functions. By adding a decorator `@tdmclient.notebook.sync_var`, all Thymio variables referenced in the function are fetched from the robot before the function execution and sent back to the robot afterwards. Note the order of the decorators: `@tdmclient.notebook.sync_var` modifies the function to make its variables synchronized with the robot, and `@interact` makes this modified function interactive.\n```\n@interact(red=(0,32), green=(0,32), blue=(0,32))\n@tdmclient.notebook.sync_var\ndef rgb(red=0, green=0, blue=0):\n    global leds_top\n    leds_top = [red, green, blue]\n```\n\nHere are alternative ways for the same result. Instead of a decorator in front of the function, you can call `interact` as a normal function, passing it the function whose arguments are manipulated interactively. Instead of decorating the function with `@tdmclient.notebook.sync_var`, you can call explicitly `set_var` to change the robot variables. And if your function is just a simple expression (a call to `set_var` or to another function if the values of its arguments don't fit directly the sliders of `interact`), you can replace it with a lambda expression.\n```\ninteract(lambda red=0,green=0,blue=0: set_var(leds_top=[red,green,blue]), red=(0,32), green=(0,32), blue=(0,32));\n```\n\nYou can combine a program running on the robot and interactive controls in the notebook to change variables. Here is a program which uses its front proximity sensor to remain at some distance from an obstacle. Put your hand or a white box in front of the Thymio before you run the cell, or be ready to catch it before it falls off the table.\n```\n%%run_python\n\nprox0 = 1000\ngain_prc = 2\ntimer_period[0] = 100\n\n@onevent\ndef timer0():\n    global prox_horizontal, motor_left_target, motor_right_target, prox0, gain_prc\n    speed = math_muldiv(prox0 - prox_horizontal[2], gain_prc, 100)\n    motor_left_target = speed\n    motor_right_target = speed\n```\n\nThe global variables created by the program are also synchronized with those in the notebook:\n```\nprox0\n```\n```\n1000\n```\n```\ngain_prc = 5\n```\n\nChanging the value of `prox0`, which is related to the distance the robot will maintain with respect to the obstacle, can be done with a slider as for `leds_top` above:\n```\n@interact(prox_target=(0, 4000, 10))\n@tdmclient.notebook.sync_var\ndef change_prox0(prox_target):\n    global prox0\n    prox0 = prox_target\n```\n\nChange the value of the target value of the proximity sensor with the slider and observe how the robot moves backward or forward until it reaches a position where the expression `prox0 - prox_horizontal[2]` is 0, hence the speed is 0. Actually because it's unlikely the sensor reading remains perfectly constant, the robot will continue making small adjustments.\n\nWhen you've finished experimenting, stop the program:\n```\nstop()\n```\n\n### Graphics\n\nThe usual Python module for graphics is `matplotlib`. To plot a sensor value, or any computed value, as a function of time, you can retrieve the values with events.\n```\nimport matplotlib.pyplot as plt\n```\n\nWe can begin with the example presented to illustrate the use of events:\n```\n%%run_python --clear-event-data --wait\n\ni = 0\ntimer_period[0] = 200\n\n@onevent\ndef timer0():\n    global i, prox_horizontal\n    i += 1\n    if i > 20:\n        exit()\n    emit(\"front\", prox_horizontal[2])\n```\n\nThen we retrieve and plot the event data:\n```\n%matplotlib inline\nprox_front = get_event_data(\"front\")\nplt.plot(prox_front);\n```\n\nThe horizontal scale shows the sample index, from 0 to 20 (the `_exit` event sent by the call to `exit()` is processed by the PC after the complete execution of `timer0()`; thus the program emits values for `i` from 1 to 21).\n\nYou may prefer to use a time scale. If the events are produced in a timer event at a known rate, the time can be computed in the notebook. But often it's more convenient to get the actual time on the robot by reading its clock. For that, we use the `ticks_50Hz()` function defined in the `clock` module, which returns a value incremented 50 times per second. Instead of counting samples, we stop when the clock reaches 4 seconds. Both `clock.ticks_50Hz()` and `clock.seconds()` are reset to 0 when the program starts or when `clock.reset()` is called. Here is a new version of the robot program:\n```\n%%run_python --clear-event-data --wait\n\nimport clock\n\ntimer_period[0] = 200\n\n@onevent\ndef timer0():\n    global prox_horizontal\n    if clock.seconds() >= 4:\n        exit()\n    emit(\"front\", clock.ticks_50Hz(), prox_horizontal[2])\n```\n\nThe events produced by `emit()` contain 2 values, the number of ticks and the front proximity sensor. We can extract them into `t` and `y` with list comprehensions, a compact way to manipulate list values. The time is converted to seconds as fractional number, something which cannot be done on the Thymio where all numbers are integers.\n```\n%matplotlib inline\nprox_front = get_event_data(\"front\")\nt = [data[0] / 50 for data in prox_front]\ny = [data[1] for data in prox_front]\nplt.plot(t, y);\n```\n\n### Live graphics\n\nSupport for animated graphics, where new data are displayed when there're available, depends on the version of Jupyter and the extensions which are installed. This section describes one way to update a figure in JupyterLab without any extension.\n\nWe modify the program and plot above to run continuously with a sliding time window of 10 seconds. The call to `exit()` is removed from the robot program, and we don't wait for the program to terminate.\n```\n%%run_python --clear-event-data\n\nimport clock\n\ntimer_period[0] = 200\n\n@onevent\ndef timer0():\n    global prox_horizontal\n    emit(\"front\", clock.ticks_50Hz(), prox_horizontal[2])\n```\n\nThe figure below displays the last 10 seconds of data in a figure which is updated everytime new events are received. For each event received, the first data value is the time in 1/50 second, and the remaining values are displayed as separate lines. Thus you can keep the same code with different robot programs, as long as you emit events with a unique name and a fixed number of values.\n\nClick the stop button in the toolbar above to interrupt the kernel (the Python session which executes the notebook cells).\n```\nfrom IPython.display import clear_output\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndef on_event_data(node, event_name):\n\n    def update_plot(t, y, time_span=10):\n        clear_output(wait=True)\n        plt.figure()\n\n        if len(t) > 1:\n            plt.plot(t, y)\n            t_last = t[-1]\n            plt.xlim(t_last - time_span, t_last)\n\n        plt.grid(True)\n        plt.show();\n\n    data_list = get_event_data(event_name)\n    t = [data[0] / 50 for data in data_list]\n    y = [data[1:] for data in data_list]\n\n    update_plot(t, y)\n\nclear_event_data()\ntdmclient.notebook.process_events(on_event_data)\n```\n\n## tdmclient classes and objects\n\n### Interactive Python\n\nThis section describes only the use of `ClientAsync`, the highest-level way to interact with a robot, with asynchronous methods which behave nicely in a non-blocking way if you need to perform other tasks such as running a user interface. All the tools described above use `ClientAsync`, except for `tdmdiscovery` which doesn't communicate with the robots.\n\nFirst we'll type commands interactively by starting Python&nbsp;3 without argument. To start Python&nbsp;3, open a terminal window (Windows Terminal or Command Prompt in Windows, Terminal in macOS or Linux) and type `python3`. TDM replies should arrive quicker than typing at the keyboard. Next section shows how to interact with the TDM from a program where you wait for replies and use them immediately to run as fast as possible.\n\nStart Python&nbsp;3, then import the required class. We also import the helper function `aw`, an alias of the static method `ClientAsync.aw` which is useful when typing commands interactively.\n```\nfrom tdmclient import ClientAsync, aw\n```\n\nCreate a client object:\n```\nclient = ClientAsync()\n```\n\nIf the TDM runs on your local computer, its address and port number will be obtained from zeroconf. You can check their value:\n```\nclient.tdm_addr\n```\n```\nclient.tdm_port\n```\n\nThe client will connect to the TDM which will send messages to us, such as one to announce the existence of a robot. There are two ways to receive and process them:\n- Call explicitly\n    ```\n    client.process_waiting_messages()\n    ```\n    If a robot is connected, you should find its description in an array of nodes in the client object:\n    ```\n    node = client.nodes[0]\n    ```\n- Call an asynchronous function in such a way that its result is waited for. This can be done in a coroutine, a special function which is executed at the same time as other tasks your program must perform, with the `await` Python keyword; or handled by the helper function `aw`. In plain Python, keyword `await` is valid only in a function, hence we cannot call it directly from the Python prompt (IPython, an improved command interpreter which is used in Jupyter, supports directly `await`). In this section, we'll use `aw`. Robots are associated to nodes. To get the first node once it's available (i.e. an object which refers to the first or only robot after having received and processed enough messages from the TDM to have this information), type\n    ```\n    node = aw(client.wait_for_node())\n    ```\n    Avoiding calling yourself `process_waiting_messages()` is safer, because other methods like `wait_for_node()` make sure to wait until the expected reply has been received from the TDM.\n\nThe value of `node` is an object which contains some properties related to the robot and let you communicate with it. The node id is displayed when you just print the node:\n```\nnode\n```\nor\n```\nprint(node)\n```\n\nIt's also available as a string:\n```\nnode_id_str = node.id_str\n```\n\nThe node properties are stored as a dict in `node.props`. For example `node.props[\"name\"]` is the robot's name, which you can change:\n```\naw(node.rename(\"my white Thymio\"))\n```\n\nLock the robot to change variables or run programs (make sure it isn't already used in Thymio Suite):\n```\naw(node.lock())\n```\n\nCompile and load an Aseba program:\n```\nprogram = \"\"\"\nvar on = 0  # 0=off, 1=on\ntimer.period[0] = 500\n\nonevent timer0\n    on = 1 - on  # \"on = not on\" with a syntax Aseba accepts\n    leds.top = [32 * on, 32 * on, 0]\n\"\"\"\nr = aw(node.compile(program))\n```\n\nThe result `r` is None if the call is successful, or an error number if it has failed. In interactive mode, we won't store anymore the result code if we don't expect and check errors anyway. But it's usually a good thing to be more careful in programs.\n\nNo need to store the actual source code for other clients, or anything at all.\n```\naw(node.set_scratchpad(\"Hello, Studio!\"))\n```\n\nRun the program compiled by `compile`:\n```\naw(node.run())\n```\n\nStop it:\n```\naw(node.stop())\n```\n\nMake the robot move forward by setting both variables `motor.left.target` and `motor.right.target`:\n```\nv = {\n    \"motor.left.target\": [50],\n    \"motor.right.target\": [50],\n}\naw(node.set_variables(v))\n```\n\nMake the robot stop:\n```\nv = {\n    \"motor.left.target\": [0],\n    \"motor.right.target\": [0],\n}\naw(node.set_variables(v))\n```\n\nUnlock the robot:\n```\naw(node.unlock())\n```\n\nGetting variable values is done by observing changes, which requires a function; likewise to receive events. This is easier to do in a Python program file. We'll do it in the next section.\n\nHere is how to send custom events from Python to the robot. The robot must run a program which defines an `onevent` event handler; but in order to accept a custom event name, we have to declare it first to the TDM, outside the program. We'll define an event to send two values for the speed of the wheels, `\"speed\"`. Method `node.register_events` has one argument, an array of tuples where each tuple contains the event name and the size of its data between 0 for none and a maximum of 32. The robot must be locked if it isn't already to accept `register_events`, `compile`, `run`, and `send_events`.\n```\naw(node.lock())\naw(node.register_events([(\"speed\", 2)]))\n```\n\nThen we can send and run the program. The event data are obtained from variable `event.args`; in our case only the first two elements are used.\n```\nprogram = \"\"\"\nonevent speed\n    motor.left.target = event.args[0]\n    motor.right.target = event.args[1]\n\"\"\"\naw(node.compile(program))\naw(node.run())\n```\n\nFinally, the Python program can send events. Method `node.send_events` has one argument, a dict where keys correspond to event names and values to event data.\n```\n# turn right\naw(node.send_events({\"speed\": [40, 20]}))\n# wait 1 second, or wait yourself before typing the next command\naw(client.sleep(1))\n# stop the robot\naw(node.send_events({\"speed\": [0, 0]}))\n```\n\n### Python program\n\nIn a program, instead of executing asynchronous methods synchronously with `aw` or `ClientAsync.aw`, we put them in an `async` function and we `await` for their result. The whole async function is executed with method `run_async_program`.\n\nMoving forward, waiting for 2 seconds and stopping could be done with the following code. You can store it in a .py file or paste it directly into an interactive Python&nbsp;3 session, as you prefer; but make sure you don't keep the robot locked, you wouldn't be able to lock it a second time. Quitting and restarting Python is a sure way to start from a clean state.\n```\nfrom tdmclient import ClientAsync\n\ndef motors(left, right):\n    return {\n        \"motor.left.target\": [left],\n        \"motor.right.target\": [right],\n    }\n\nclient = ClientAsync()\n\nasync def prog():\n    node = await client.wait_for_node()\n    await node.lock()\n    await node.set_variables(motors(50, 50))\n    await client.sleep(2)\n    await node.set_variables(motors(0, 0))\n    await node.unlock()\n\nclient.run_async_program(prog)\n```\n\nThis can be simplified a little bit with the help of `with` constructs:\n```\nfrom tdmclient import ClientAsync\n\ndef motors(left, right):\n    return {\n        \"motor.left.target\": [left],\n        \"motor.right.target\": [right],\n    }\n\nwith ClientAsync() as client:\n    async def prog():\n        with await client.lock() as node:\n            await node.set_variables(motors(50, 50))\n            await client.sleep(2)\n            await node.set_variables(motors(0, 0))\n    client.run_async_program(prog)\n```\n\nTo read variables, the updates must be observed with a function. The following program calculates a motor speed based on the front proximity sensor to move backward when it detects an obstacle. Instead of calling the async method `set_variables` which expects a result code in a message from the TDM, it just sends a message to change variables with `send_set_variables` without expecting any reply. The TDM will send a reply anyway, but the client will ignore it without trying to associate it with the request message. `sleep()` without argument (or with a negative duration) waits forever, until you interrupt it by typing control-C.\n```\nfrom tdmclient import ClientAsync\n\ndef motors(left, right):\n    return {\n        \"motor.left.target\": [left],\n        \"motor.right.target\": [right],\n    }\n\ndef on_variables_changed(node, variables):\n    try:\n        prox = variables[\"prox.horizontal\"]\n        prox_front = prox[2]\n        speed = -prox_front // 10\n        node.send_set_variables(motors(speed, speed))\n    except KeyError:\n        pass  # prox.horizontal not found\n\nwith ClientAsync() as client:\n    async def prog():\n        with await client.lock() as node:\n            await node.watch(variables=True)\n            node.add_variables_changed_listener(on_variables_changed)\n            await client.sleep()\n    client.run_async_program(prog)\n```\n\nCompare with an equivalent Python program running directly on the Thymio:\n```\n@onevent\ndef prox():\n    global prox_horizontal, motor_left_target, motor_right_target\n    prox_front = prox_horizontal[2]\n    speed = -prox_front // 10\n    motor_left_target = speed\n    motor_right_target = speed\n```\n\nYou could save it as a .py file and run it with `run` as explained above. If you want to do everything yourself, to understand precisely how tdmclient works or because you want to eventually combine processing on the Thymio and on your computer, here is a Python program running on the PC to convert it to Aseba, compile and load it, and run it.\n```\nfrom tdmclient import ClientAsync\nfrom tdmclient.atranspiler import ATranspiler\n\nthymio_program_python = r\"\"\"\n@onevent\ndef prox():\n    global prox_horizontal, motor_left_target, motor_right_target\n    prox_front = prox_horizontal[2]\n    speed = -prox_front // 10\n    motor_left_target = speed\n    motor_right_target = speed\n\"\"\"\n\n# convert program from Python to Aseba\nthymio_program_aseba = ATranspiler.simple_transpile(thymio_program_python)\n\nwith ClientAsync() as client:\n    async def prog():\n        with await client.lock() as node:\n            error = await node.compile(thymio_program_aseba)\n            error = await node.run()\n    client.run_async_program(prog)\n```\n\n### Cached variables\n\ntdmclient offers a simpler way, if slightly slower, to obtain and change Thymio variables. They're accessible as `node[\"variable_name\"]` or `node.v.variable_name`, both for getting and setting values, also when `variable_name` contains dots. Here is an alternative implementation of the remote control version of the program which makes the robot move backward when an obstacle is detected by the front proximity sensor.\n```\nfrom tdmclient import ClientAsync\n\nwith ClientAsync() as client:\n    async def prog():\n        with await client.lock() as node:\n            await node.wait_for_variables({\"prox.horizontal\"})\n            while True:\n                prox_front = node.v.prox.horizontal[2]\n                speed = -prox_front // 10\n                node.v.motor.left.target = speed\n                node.v.motor.right.target = speed\n                node.flush()\n                await client.sleep(0.1)\n    client.run_async_program(prog)\n```\n\nScalar variables have an `int` value. Array variables are iterable, i.e. they can be used in `for` loops, converted to lists with function `list`, and used by functions such as `max` and `sum`. They can be stored as a whole and retain their link with the robot: getting an element retieves the most current value, and setting an element caches the value so that it will be sent to the robot by the next call to `node.flush()`.\nHere is an interactive session which illustrates what can be done.\n```\n>>> from tdmclient import ClientAsync\n>>> client = ClientAsync()\n>>> node = client.aw(client.wait_for_node())\n>>> client.aw(node.wait_for_variables({\"leds.top\"}))\n>>> rgb = node.v.leds.top\n>>> rgb\nNode array variable leds.top[3]\n>>> list(rgb)\n[0, 0, 0]\n>>> client.aw(node.lock_node())\n>>> rgb[0] = 32  # red\n>>> node.var_to_send\n{'leds.top': [32, 0, 0]}\n>>> node.flush()  # robot turns red\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/epfl-mobots/tdm-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tdmclient",
    "package_url": "https://pypi.org/project/tdmclient/",
    "platform": null,
    "project_url": "https://pypi.org/project/tdmclient/",
    "project_urls": {
      "Homepage": "https://github.com/epfl-mobots/tdm-python"
    },
    "release_url": "https://pypi.org/project/tdmclient/0.1.19/",
    "requires_dist": [
      "websockets",
      "zeroconf"
    ],
    "requires_python": ">=3.6",
    "summary": "Communication with Thymio II robot via the Thymio Device Manager",
    "version": "0.1.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15217974,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2975be48eb2467ef7dd033625b5d0beda38da81633057694a191e74c0587c7f",
          "md5": "a4555a6062b06448e74cf3ac3ddbdd3f",
          "sha256": "c452dcd45a1d36e623fab82346795d982cb7e1b393efbdd0325ffc4d6edb7de2"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4555a6062b06448e74cf3ac3ddbdd3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20792,
        "upload_time": "2021-03-17T09:54:04",
        "upload_time_iso_8601": "2021-03-17T09:54:04.095971Z",
        "url": "https://files.pythonhosted.org/packages/b2/97/5be48eb2467ef7dd033625b5d0beda38da81633057694a191e74c0587c7f/tdmclient-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23c16c34caffd140cda210947353c3969dddeece389a09baa845fcfb366a5eda",
          "md5": "1c0b3d2072cf564959e5267797382073",
          "sha256": "01a719fbbb2e44ae28f84a3f482bae3bdab204cef30575b60116cafc9e5ca53f"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1c0b3d2072cf564959e5267797382073",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20728,
        "upload_time": "2021-03-17T09:54:05",
        "upload_time_iso_8601": "2021-03-17T09:54:05.042879Z",
        "url": "https://files.pythonhosted.org/packages/23/c1/6c34caffd140cda210947353c3969dddeece389a09baa845fcfb366a5eda/tdmclient-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c02a372f79ac28550b0794df230a1908ec3271c47246dc2222c4c3d1d4bac9c",
          "md5": "2642f83b5ffb54b08a93b13423854097",
          "sha256": "1cdcca9593bb6713cfdaf30aeb180859cb23a50b65afab6ff2d04970aa0ee0e6"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2642f83b5ffb54b08a93b13423854097",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29955,
        "upload_time": "2021-03-25T10:52:09",
        "upload_time_iso_8601": "2021-03-25T10:52:09.958788Z",
        "url": "https://files.pythonhosted.org/packages/2c/02/a372f79ac28550b0794df230a1908ec3271c47246dc2222c4c3d1d4bac9c/tdmclient-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "506861d0bc478cda147624ace662b7e535c8c5d80753aa4a007e22533d71f48b",
          "md5": "38787f76cf65af7bf5a6ae4bf98e3181",
          "sha256": "b8d25f386dfcef7089c691204f5331b58c61ba8ed229f90bd2289bea70b51321"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "38787f76cf65af7bf5a6ae4bf98e3181",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32583,
        "upload_time": "2021-03-25T10:52:11",
        "upload_time_iso_8601": "2021-03-25T10:52:11.068671Z",
        "url": "https://files.pythonhosted.org/packages/50/68/61d0bc478cda147624ace662b7e535c8c5d80753aa4a007e22533d71f48b/tdmclient-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e5d0c72e600ca4ede293660f99f89e09a0ac360cd720ff438413a0344507d3",
          "md5": "5e7a1f3a873b83f55e20bffebd14b9c7",
          "sha256": "11c4a3e4f8e9f8e1c1607e1c42a3c4f9fac40d3bea386a5c2970ceaf56794917"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e7a1f3a873b83f55e20bffebd14b9c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82375,
        "upload_time": "2021-11-04T09:53:59",
        "upload_time_iso_8601": "2021-11-04T09:53:59.269107Z",
        "url": "https://files.pythonhosted.org/packages/75/e5/d0c72e600ca4ede293660f99f89e09a0ac360cd720ff438413a0344507d3/tdmclient-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c551ec9ba03c497b2c306e68e456ef8f9fdbcff95a758eacc794c8ae8fc9b25f",
          "md5": "b63ea81769c49373623936dc52e449c6",
          "sha256": "78d29b29c209eee58ea4cac208a0471be55c52040fe81c050fa87b088a1c712f"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "b63ea81769c49373623936dc52e449c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 125307,
        "upload_time": "2021-11-04T09:54:01",
        "upload_time_iso_8601": "2021-11-04T09:54:01.046422Z",
        "url": "https://files.pythonhosted.org/packages/c5/51/ec9ba03c497b2c306e68e456ef8f9fdbcff95a758eacc794c8ae8fc9b25f/tdmclient-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eedf0b35e3c4be079adc7bd733915fa6a60cb7f0c0f12be066473b9a047ab75",
          "md5": "6b8bb0a62a89e86e6b63314d24d8d166",
          "sha256": "dc0119c6bdacf297a456df5aa36ccef66d48fd6592390fd9cb1e6f75bc758991"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b8bb0a62a89e86e6b63314d24d8d166",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82898,
        "upload_time": "2021-11-17T09:53:57",
        "upload_time_iso_8601": "2021-11-17T09:53:57.337788Z",
        "url": "https://files.pythonhosted.org/packages/5e/ed/f0b35e3c4be079adc7bd733915fa6a60cb7f0c0f12be066473b9a047ab75/tdmclient-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fecb92c6414ece033f51ec66b7d0fbc6a96b9aaf0582b26f66db8907d49a06b",
          "md5": "ee17711e145664d5919d88ffe088f287",
          "sha256": "8fbc14567189a8e447a61aa01e353f58e9cf0b28dc80e797611d268531d082f9"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "ee17711e145664d5919d88ffe088f287",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 126259,
        "upload_time": "2021-11-17T09:53:59",
        "upload_time_iso_8601": "2021-11-17T09:53:59.229815Z",
        "url": "https://files.pythonhosted.org/packages/7f/ec/b92c6414ece033f51ec66b7d0fbc6a96b9aaf0582b26f66db8907d49a06b/tdmclient-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b78d1da6d20fb78529272ea4221e2b9b569bea116b51ee97480dda32812dafd8",
          "md5": "ad4e25c4598c69758514636a4fd224a9",
          "sha256": "e53f28251cc3300d45e52debccc590e87199cc11b8fe0925c2cd9cdf6b2c3528"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad4e25c4598c69758514636a4fd224a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 90743,
        "upload_time": "2021-12-07T13:06:41",
        "upload_time_iso_8601": "2021-12-07T13:06:41.224771Z",
        "url": "https://files.pythonhosted.org/packages/b7/8d/1da6d20fb78529272ea4221e2b9b569bea116b51ee97480dda32812dafd8/tdmclient-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccf465d4d0eb98254982186336328c533cacc521d808057eaa5c0fcd0622a8e9",
          "md5": "872e9db97e92b9629bcd41ff21a130fc",
          "sha256": "e2d9943f34772d272c48e876d8a28be333cb5052fc9b9e650b96f27ad52ce41b"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "872e9db97e92b9629bcd41ff21a130fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 126598,
        "upload_time": "2021-12-07T13:06:43",
        "upload_time_iso_8601": "2021-12-07T13:06:43.040129Z",
        "url": "https://files.pythonhosted.org/packages/cc/f4/65d4d0eb98254982186336328c533cacc521d808057eaa5c0fcd0622a8e9/tdmclient-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "822cef18d57021b7aa402766620e912a02a2f46a5ef108288dcd187b731784c0",
          "md5": "631c26cb269a26aa8bc8981abeb717a3",
          "sha256": "99a2a9a2cb3d1120c13afd66f4b16f44c4374da7f4809c518dc768ed17bf9af3"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "631c26cb269a26aa8bc8981abeb717a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 99548,
        "upload_time": "2022-01-11T13:33:54",
        "upload_time_iso_8601": "2022-01-11T13:33:54.376641Z",
        "url": "https://files.pythonhosted.org/packages/82/2c/ef18d57021b7aa402766620e912a02a2f46a5ef108288dcd187b731784c0/tdmclient-0.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40c9015c9a0ac47bcb4149ff82fee378e3369301395f3097840d9a75896894fa",
          "md5": "b12d493488129cd2b86897ed5d8f962f",
          "sha256": "05904e19741177b63978dbe40e037cb5f21bd5ea8ceb1b8da2dcd18f98ebc0bc"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "b12d493488129cd2b86897ed5d8f962f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 133740,
        "upload_time": "2022-01-11T13:33:56",
        "upload_time_iso_8601": "2022-01-11T13:33:56.052976Z",
        "url": "https://files.pythonhosted.org/packages/40/c9/015c9a0ac47bcb4149ff82fee378e3369301395f3097840d9a75896894fa/tdmclient-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76e863d2bb2fa65ca65421435b609ffc0c8909ecffc2052dc03e77d8f370ca9b",
          "md5": "43ac73be0c5ccf0fd2e88e8ee47360aa",
          "sha256": "740b71d456e2daa29cb3938f5f3512af5875deccefefd9de8841212f7a3a298d"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43ac73be0c5ccf0fd2e88e8ee47360aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 100088,
        "upload_time": "2022-02-23T14:28:31",
        "upload_time_iso_8601": "2022-02-23T14:28:31.096091Z",
        "url": "https://files.pythonhosted.org/packages/76/e8/63d2bb2fa65ca65421435b609ffc0c8909ecffc2052dc03e77d8f370ca9b/tdmclient-0.1.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2613f2baff343e176c2eae686b86eb0d4495410cf1e94e04709c4a9cbeffd30f",
          "md5": "fc0e3ea697e61370da6935f02e049d70",
          "sha256": "9bad60014bf20e9d1c1b08fc22710f9a19f0eae2c77aa8284b651c4d4312f87c"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "fc0e3ea697e61370da6935f02e049d70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 134473,
        "upload_time": "2022-02-23T14:28:32",
        "upload_time_iso_8601": "2022-02-23T14:28:32.965107Z",
        "url": "https://files.pythonhosted.org/packages/26/13/f2baff343e176c2eae686b86eb0d4495410cf1e94e04709c4a9cbeffd30f/tdmclient-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72ccbab4e3d407cd4f5bf5dd104c046cfdd501a5919cd736e01ef7a39217f0a0",
          "md5": "4896dc0465ed831e33d4121607e8edd7",
          "sha256": "f5dc98ea1176e6dba4c9a412ef266d37325c791a43a864197385fbbe3e5e0c1d"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4896dc0465ed831e33d4121607e8edd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 104295,
        "upload_time": "2022-04-05T12:17:09",
        "upload_time_iso_8601": "2022-04-05T12:17:09.177422Z",
        "url": "https://files.pythonhosted.org/packages/72/cc/bab4e3d407cd4f5bf5dd104c046cfdd501a5919cd736e01ef7a39217f0a0/tdmclient-0.1.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d1e1849c0e23799a3ff6cfdba5feb0cc686a5afe713a65b380b9ef3787a9880",
          "md5": "0d0852ce6b58446ad6514c0a96e0ce89",
          "sha256": "33fa3cb48678bff8df9351b1aecee4fadbfdeb43c01805c4efe79f3c39554c0f"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "0d0852ce6b58446ad6514c0a96e0ce89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 138746,
        "upload_time": "2022-04-05T12:17:11",
        "upload_time_iso_8601": "2022-04-05T12:17:11.237411Z",
        "url": "https://files.pythonhosted.org/packages/9d/1e/1849c0e23799a3ff6cfdba5feb0cc686a5afe713a65b380b9ef3787a9880/tdmclient-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4141a0fe1b6dc3b663f2fd19cbb21f0ec3d6c3bd099b1797d479e24edce7b210",
          "md5": "78b2b4a42bec0d7ea52a9fb04d2a071f",
          "sha256": "6c0fda140efdedcd282c1fa7cc9865da78f7348fbb7690c40bc5b237ba926598"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78b2b4a42bec0d7ea52a9fb04d2a071f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 102446,
        "upload_time": "2022-05-16T07:30:25",
        "upload_time_iso_8601": "2022-05-16T07:30:25.370587Z",
        "url": "https://files.pythonhosted.org/packages/41/41/a0fe1b6dc3b663f2fd19cbb21f0ec3d6c3bd099b1797d479e24edce7b210/tdmclient-0.1.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b5a0d96cdc8caa9004e5f5d5cf06dd1ae0e2998450cad7f60656da3168026e2",
          "md5": "54031f7a3e3e19306b6294b11c7222cc",
          "sha256": "68f3785a48a9932360e3d0c10ab39be5f0430d83823f9318d748a92230404f62"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "54031f7a3e3e19306b6294b11c7222cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 140676,
        "upload_time": "2022-05-16T07:30:27",
        "upload_time_iso_8601": "2022-05-16T07:30:27.443758Z",
        "url": "https://files.pythonhosted.org/packages/3b/5a/0d96cdc8caa9004e5f5d5cf06dd1ae0e2998450cad7f60656da3168026e2/tdmclient-0.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45a9cc85eab64ed45414c74565c7a1e9156b1392f43db01ab35a8a2d3fc65e8d",
          "md5": "a93b6c07b6157e268c989b88eb7903b9",
          "sha256": "3c27249337234746ad840ba08bd4cab8399f13ad54d0a7f77d7120eed3874fe8"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a93b6c07b6157e268c989b88eb7903b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 102507,
        "upload_time": "2022-06-13T08:50:16",
        "upload_time_iso_8601": "2022-06-13T08:50:16.994623Z",
        "url": "https://files.pythonhosted.org/packages/45/a9/cc85eab64ed45414c74565c7a1e9156b1392f43db01ab35a8a2d3fc65e8d/tdmclient-0.1.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deb893510c21f749dcd36ac27b68d6025c7ca04cef5c0c8120de2c19d9255411",
          "md5": "d6d62bf18b8a30ce97e445f05ca1a0f5",
          "sha256": "4556d438caba26dd8f1286271ce8197962606f3407b78c4bfff55b56f0c1d20b"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d62bf18b8a30ce97e445f05ca1a0f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 140806,
        "upload_time": "2022-06-13T08:50:19",
        "upload_time_iso_8601": "2022-06-13T08:50:19.256461Z",
        "url": "https://files.pythonhosted.org/packages/de/b8/93510c21f749dcd36ac27b68d6025c7ca04cef5c0c8120de2c19d9255411/tdmclient-0.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9fb7bc913ec5e50028caafb0020d442be792049e5e05c69b4aecef9efdfbffa",
          "md5": "9d77b8974d73d8be3bf98588c4fb0820",
          "sha256": "96d6b9b10686504feaf42af66a0089e9f52787bfe8236f377c6e37f1054b25c1"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d77b8974d73d8be3bf98588c4fb0820",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 102644,
        "upload_time": "2022-06-23T13:35:11",
        "upload_time_iso_8601": "2022-06-23T13:35:11.031576Z",
        "url": "https://files.pythonhosted.org/packages/c9/fb/7bc913ec5e50028caafb0020d442be792049e5e05c69b4aecef9efdfbffa/tdmclient-0.1.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72eb836b78934dc737960def50dbe8b41b257902a216ab2b5f8dc8c30cf7cbb4",
          "md5": "ba25b50b6038d39a369dfa90bc9b72a1",
          "sha256": "26859fbf9f678cedb6e028fda2f4564c36341f1e2520740b5ef4f9de6eb99b8d"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "ba25b50b6038d39a369dfa90bc9b72a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141032,
        "upload_time": "2022-06-23T13:35:13",
        "upload_time_iso_8601": "2022-06-23T13:35:13.428972Z",
        "url": "https://files.pythonhosted.org/packages/72/eb/836b78934dc737960def50dbe8b41b257902a216ab2b5f8dc8c30cf7cbb4/tdmclient-0.1.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1292843717961dcfbfedbb996911524c65f400ef66879e4abc6188b4cba5e215",
          "md5": "1b8a33fcf953eeb58fc9b2ba5a02fefa",
          "sha256": "00771dacfd9c7ebbb7e0db1bdebc7d904a016d97f79f9455e5caa1f57a5cf32b"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b8a33fcf953eeb58fc9b2ba5a02fefa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 106513,
        "upload_time": "2022-09-26T18:02:34",
        "upload_time_iso_8601": "2022-09-26T18:02:34.134097Z",
        "url": "https://files.pythonhosted.org/packages/12/92/843717961dcfbfedbb996911524c65f400ef66879e4abc6188b4cba5e215/tdmclient-0.1.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b66d8382e71cfe77172bffef99ee3cdcbac136f90768351a281197465b51576",
          "md5": "eb1daf10e131cd0371796d70ec25ecfc",
          "sha256": "16e08b23b38ab9c4d202a125cb0293317fd51e0140766aae55554aa9863e3ab9"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "eb1daf10e131cd0371796d70ec25ecfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 144304,
        "upload_time": "2022-09-26T18:02:37",
        "upload_time_iso_8601": "2022-09-26T18:02:37.057410Z",
        "url": "https://files.pythonhosted.org/packages/1b/66/d8382e71cfe77172bffef99ee3cdcbac136f90768351a281197465b51576/tdmclient-0.1.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5de2ff5c2ac99075e35382b3c42efe68d7e00ee4f93f56c5cbf8268f96b6cae",
          "md5": "304fe8c49a039e64afdabc5dd66134bc",
          "sha256": "b9e6691aa9877deab5924674f3317cf169881153915e43010144c36682d15b01"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "304fe8c49a039e64afdabc5dd66134bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59509,
        "upload_time": "2021-04-27T09:14:32",
        "upload_time_iso_8601": "2021-04-27T09:14:32.885117Z",
        "url": "https://files.pythonhosted.org/packages/e5/de/2ff5c2ac99075e35382b3c42efe68d7e00ee4f93f56c5cbf8268f96b6cae/tdmclient-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83f08e5bab8633c28fc1ef4a38b41f989e11a0155b0632d4df30d46295a92bef",
          "md5": "d239b0f41e45dac32215034812db9c5a",
          "sha256": "a010753feb57927573da75819674e58d5ef85e5b82c3fa211337327f34e89d8d"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d239b0f41e45dac32215034812db9c5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 62433,
        "upload_time": "2021-04-27T09:14:33",
        "upload_time_iso_8601": "2021-04-27T09:14:33.955300Z",
        "url": "https://files.pythonhosted.org/packages/83/f0/8e5bab8633c28fc1ef4a38b41f989e11a0155b0632d4df30d46295a92bef/tdmclient-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6110351d23cddbc192f928a71b983fc00d3cf03a7e9c3a3856bd02443d2e6c12",
          "md5": "60ee63308292b179709dadccb2048bd0",
          "sha256": "77363315db618a947857a4e4b986a84fb2221a96eb9cb1b2183e310864835f46"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60ee63308292b179709dadccb2048bd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72868,
        "upload_time": "2021-05-06T07:55:49",
        "upload_time_iso_8601": "2021-05-06T07:55:49.036092Z",
        "url": "https://files.pythonhosted.org/packages/61/10/351d23cddbc192f928a71b983fc00d3cf03a7e9c3a3856bd02443d2e6c12/tdmclient-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d031c93259dacf4ae860f40151380052ac8f4d1614943da35b8c8e5ea97213b",
          "md5": "47a17d2fd3b47a78d1ec78c82c1c8c7c",
          "sha256": "8d5e04c104a2747b3625677f004c4f4e9c5bfd271cb3bd04f35789a016798f71"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "47a17d2fd3b47a78d1ec78c82c1c8c7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66773,
        "upload_time": "2021-05-06T07:55:51",
        "upload_time_iso_8601": "2021-05-06T07:55:51.967772Z",
        "url": "https://files.pythonhosted.org/packages/6d/03/1c93259dacf4ae860f40151380052ac8f4d1614943da35b8c8e5ea97213b/tdmclient-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09ee2b5b2113eb49da9053e0c61b00651c7d564e0cc8433cebcd012319d3730a",
          "md5": "38cb224140515d4cc4be0c012965a398",
          "sha256": "4ac766f69001476e3141636feda46d945308258e3199eadcb19a53f7a728fd92"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38cb224140515d4cc4be0c012965a398",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 89115,
        "upload_time": "2021-08-30T15:16:26",
        "upload_time_iso_8601": "2021-08-30T15:16:26.494555Z",
        "url": "https://files.pythonhosted.org/packages/09/ee/2b5b2113eb49da9053e0c61b00651c7d564e0cc8433cebcd012319d3730a/tdmclient-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96b295df45c6e20b22a5b87979b621625e1b7250bcd08d67cdf7e3e771ed1a2",
          "md5": "76da02d1865a707df90ab52cedf64548",
          "sha256": "9d64b3eb432fdf11d0bd6bfd8a0bb5cf74ef624a2c9c0f7054590fc822e25367"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "76da02d1865a707df90ab52cedf64548",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 74263,
        "upload_time": "2021-08-30T15:16:27",
        "upload_time_iso_8601": "2021-08-30T15:16:27.927608Z",
        "url": "https://files.pythonhosted.org/packages/d9/6b/295df45c6e20b22a5b87979b621625e1b7250bcd08d67cdf7e3e771ed1a2/tdmclient-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e2f797583dd36e0cd1006ea65c64c84021b980e5d57565d7602ed4ff5a18d1",
          "md5": "a6f3d59043211f739db1f471b4d6bcae",
          "sha256": "edb061d858009d15e1a76f1513c50776f1bc3b1e7f613d9f865782a499f036c9"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6f3d59043211f739db1f471b4d6bcae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 91519,
        "upload_time": "2021-09-14T10:02:31",
        "upload_time_iso_8601": "2021-09-14T10:02:31.245021Z",
        "url": "https://files.pythonhosted.org/packages/95/e2/f797583dd36e0cd1006ea65c64c84021b980e5d57565d7602ed4ff5a18d1/tdmclient-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0267f92bbae636867e4bf1ca07d3d2e12856f5fcdef8d902a37daa255eaa151",
          "md5": "9d20c6fd977080e170fed31c9928f828",
          "sha256": "babbdeb3d05f1eab741880fd6ef6da61e2d0f8c74042b08db80168acd05a0bc6"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9d20c6fd977080e170fed31c9928f828",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 76966,
        "upload_time": "2021-09-14T10:02:32",
        "upload_time_iso_8601": "2021-09-14T10:02:32.474438Z",
        "url": "https://files.pythonhosted.org/packages/a0/26/7f92bbae636867e4bf1ca07d3d2e12856f5fcdef8d902a37daa255eaa151/tdmclient-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00bfa43f5748cce716f097756480fa30b268131d78cf37b6b364ed57f4674d22",
          "md5": "9a2cc0ae28368f19304320dca2a0d421",
          "sha256": "3375ae8c18b430213e5bd2b1c7d80a47a038b4776b353f2ccce5636a9578eea0"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a2cc0ae28368f19304320dca2a0d421",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 92657,
        "upload_time": "2021-09-22T14:56:25",
        "upload_time_iso_8601": "2021-09-22T14:56:25.265891Z",
        "url": "https://files.pythonhosted.org/packages/00/bf/a43f5748cce716f097756480fa30b268131d78cf37b6b364ed57f4674d22/tdmclient-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3dd65397da9c6e7420e0ac06bf5795c69255f79ec8046908f3cbbe85372cc13",
          "md5": "af627bc2ee4bb69d75f58c1a9fd7e449",
          "sha256": "96b26140930a608e775d00cc1a55656a7da7c0ef92a2a505249eca5563fb05b3"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "af627bc2ee4bb69d75f58c1a9fd7e449",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 78686,
        "upload_time": "2021-09-22T14:56:26",
        "upload_time_iso_8601": "2021-09-22T14:56:26.640254Z",
        "url": "https://files.pythonhosted.org/packages/d3/dd/65397da9c6e7420e0ac06bf5795c69255f79ec8046908f3cbbe85372cc13/tdmclient-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abe13b8d8ee4801832c899aff05be361b4c5b53a210849d24afe928a675d1cb1",
          "md5": "3ccc883fd7844cf9eec918c8dbf38c29",
          "sha256": "560d20104f2d2cb8369ec0164a9fce311c1fac2c1ad82b840b6f840dc7d3a5ca"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ccc883fd7844cf9eec918c8dbf38c29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 93701,
        "upload_time": "2021-09-27T14:33:34",
        "upload_time_iso_8601": "2021-09-27T14:33:34.593960Z",
        "url": "https://files.pythonhosted.org/packages/ab/e1/3b8d8ee4801832c899aff05be361b4c5b53a210849d24afe928a675d1cb1/tdmclient-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c935f89c439b938a67214ee10030427aac66af00bc74795a6140cbe8e2d4ad7a",
          "md5": "539e2ddb31dc1eef47d3e5f0cb17a84b",
          "sha256": "85ab1265c349bb9d936fb8be3c234eb64a45777ad53090abb95c94c606105690"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "539e2ddb31dc1eef47d3e5f0cb17a84b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80292,
        "upload_time": "2021-09-27T14:33:36",
        "upload_time_iso_8601": "2021-09-27T14:33:36.037483Z",
        "url": "https://files.pythonhosted.org/packages/c9/35/f89c439b938a67214ee10030427aac66af00bc74795a6140cbe8e2d4ad7a/tdmclient-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e21ddcb3cd21f803c4fdddb5360122e5a0459874dfecc7b0154a3b23b58fe2e",
          "md5": "a8c9cb380bc00522a90d32f74a7c552e",
          "sha256": "92b4bcdad188f9814c9b09a646414a976f4d3f531bd19c78e488c870d0344bd5"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8c9cb380bc00522a90d32f74a7c552e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81653,
        "upload_time": "2021-10-13T13:57:35",
        "upload_time_iso_8601": "2021-10-13T13:57:35.873576Z",
        "url": "https://files.pythonhosted.org/packages/5e/21/ddcb3cd21f803c4fdddb5360122e5a0459874dfecc7b0154a3b23b58fe2e/tdmclient-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15a84afdb7a1d714d036233bf509eac87cbba7f102fc4e041dd46b940266a254",
          "md5": "afc153a5b9a89a30eb777fb0196c9d52",
          "sha256": "057b19f68670c0f790c36b365770018269f7faedca39574f8dc3242ef0e00e78"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "afc153a5b9a89a30eb777fb0196c9d52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 127829,
        "upload_time": "2021-10-13T13:57:37",
        "upload_time_iso_8601": "2021-10-13T13:57:37.754611Z",
        "url": "https://files.pythonhosted.org/packages/15/a8/4afdb7a1d714d036233bf509eac87cbba7f102fc4e041dd46b940266a254/tdmclient-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2a6247cf357ca1e8a3139c000daa5c55f3029a5102103b15d08d63d0b79cc4a",
          "md5": "c1adb362d08bf501b4a4e769d73d4768",
          "sha256": "7e884836ddd3a945c3ff55278cc8448c0ed3697903cf99bf1b60013f630843c4"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1adb362d08bf501b4a4e769d73d4768",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81919,
        "upload_time": "2021-10-20T13:33:31",
        "upload_time_iso_8601": "2021-10-20T13:33:31.797330Z",
        "url": "https://files.pythonhosted.org/packages/c2/a6/247cf357ca1e8a3139c000daa5c55f3029a5102103b15d08d63d0b79cc4a/tdmclient-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29a74b73677f89283268b90257029e23890ddcdc7eac83284a0f86927b5bde1f",
          "md5": "e935bfb34df658319c3663e4628c214b",
          "sha256": "cdd1d7bf17c19542a534547c3b1b0e5c4cdc3988ae404d28412565d49966ebb9"
        },
        "downloads": -1,
        "filename": "tdmclient-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e935bfb34df658319c3663e4628c214b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 126564,
        "upload_time": "2021-10-20T13:33:33",
        "upload_time_iso_8601": "2021-10-20T13:33:33.440466Z",
        "url": "https://files.pythonhosted.org/packages/29/a7/4b73677f89283268b90257029e23890ddcdc7eac83284a0f86927b5bde1f/tdmclient-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1292843717961dcfbfedbb996911524c65f400ef66879e4abc6188b4cba5e215",
        "md5": "1b8a33fcf953eeb58fc9b2ba5a02fefa",
        "sha256": "00771dacfd9c7ebbb7e0db1bdebc7d904a016d97f79f9455e5caa1f57a5cf32b"
      },
      "downloads": -1,
      "filename": "tdmclient-0.1.19-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b8a33fcf953eeb58fc9b2ba5a02fefa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 106513,
      "upload_time": "2022-09-26T18:02:34",
      "upload_time_iso_8601": "2022-09-26T18:02:34.134097Z",
      "url": "https://files.pythonhosted.org/packages/12/92/843717961dcfbfedbb996911524c65f400ef66879e4abc6188b4cba5e215/tdmclient-0.1.19-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b66d8382e71cfe77172bffef99ee3cdcbac136f90768351a281197465b51576",
        "md5": "eb1daf10e131cd0371796d70ec25ecfc",
        "sha256": "16e08b23b38ab9c4d202a125cb0293317fd51e0140766aae55554aa9863e3ab9"
      },
      "downloads": -1,
      "filename": "tdmclient-0.1.19.tar.gz",
      "has_sig": false,
      "md5_digest": "eb1daf10e131cd0371796d70ec25ecfc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 144304,
      "upload_time": "2022-09-26T18:02:37",
      "upload_time_iso_8601": "2022-09-26T18:02:37.057410Z",
      "url": "https://files.pythonhosted.org/packages/1b/66/d8382e71cfe77172bffef99ee3cdcbac136f90768351a281197465b51576/tdmclient-0.1.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}