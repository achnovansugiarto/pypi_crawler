{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n## Some useful Pandas methods for df.index and df.columns\n\n\n\n```python\n\npip install a-pandas-ex-columns-and-index \n\n```\n\n\n\n```python\n\nfrom a_pandas_ex_columns_and_index import pd_add_index_and_columns\n\npd_add_index_and_columns()\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://github.com/pandas-dev/pandas/raw/main/doc/data/air_quality_long.csv\")\n\n```\n\n\n\n**The code above will add some new methods to your df**\n\n\n\n- df.d_swap_2_columns \n\n- df.ds_sort_by_str_length \n\n- df.d_insert_column_before_another \n\n- df.ds_reverse \n\n- df.d_add_prefix_to_column_when_regex_match \n\n- df.d_add_prefix_to_index_when_regex_match \n\n- df.d_filter_df_by_regex_in_index \n\n- df.d_filter_df_by_regex_in_columns \n\n- df.d_columns_upper \n\n- df.d_index_upper \n\n- df.d_index_lower \n\n- df.d_columns_lower \n\n- df.d_make_columns_dot_compatible \n\n- df.d_natsort_index \n\n- df.d_natort_columns \n\n- df.d_natsort_df_by_column \n\n- d_rename_index\n\n- d_rename_columns\n\n\n\n**All methods added to pandas have one of this prefixes:**\n\n\n\n- **ds_** (for DataFrames and Series)\n\n\n\n- **s_** (only for Series)\n\n\n\n- **d_** (only for DataFrames)\n\n\n\n### df.d_swap_2_columns\n\n\n\n```python\n\ndf.columns\n\nOut[3]: \n\nIndex(['city', 'country', 'date.utc', 'location', 'parameter', 'value',\n\n       'unit'],\n\n      dtype='object')\n\nprint(df)\n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf2=df.d_swap_2_columns('city', 'country')\n\nprint(df2.columns)\n\nprint(df2)\n\nIndex(['country', 'city', 'date.utc', 'location', 'parameter', 'value',\n\n       'unit'],\n\n      dtype='object')\n\n     country       city                   date.utc  ... parameter value   unit\n\n0         BE  Antwerpen  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1         BE  Antwerpen  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2         BE  Antwerpen  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3         BE  Antwerpen  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4         BE  Antwerpen  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n      ...        ...                        ...  ...       ...   ...    ...\n\n5267      GB     London  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268      GB     London  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269      GB     London  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270      GB     London  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271      GB     London  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### df.ds_sort_by_str_length\n\n\n\n```python\n\ndf\n\nOut[3]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf2=df.ds_sort_by_str_length('city')\n\nprint(df2)\n\n           city country                   date.utc  ... parameter value   unit\n\n2635      Paris      FR  2019-05-15 05:00:00+00:00  ...       no2  46.5  µg/m³\n\n2182      Paris      FR  2019-06-03 09:00:00+00:00  ...       no2  46.0  µg/m³\n\n2183      Paris      FR  2019-06-03 08:00:00+00:00  ...       no2  43.9  µg/m³\n\n2184      Paris      FR  2019-06-03 07:00:00+00:00  ...       no2  50.0  µg/m³\n\n2185      Paris      FR  2019-06-03 06:00:00+00:00  ...       no2  44.1  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n3554  Antwerpen      BE  2019-05-19 15:00:00+00:00  ...       no2  33.0  µg/m³\n\n3555  Antwerpen      BE  2019-05-19 14:00:00+00:00  ...       no2  23.0  µg/m³\n\n3556  Antwerpen      BE  2019-05-19 13:00:00+00:00  ...       no2  14.5  µg/m³\n\n3548  Antwerpen      BE  2019-05-19 21:00:00+00:00  ...       no2  12.5  µg/m³\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### d_insert_column_before_another\n\n\n\n```python\n\ndf\n\nOut[6]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_insert_column_before_another(df.city + df.country, 'city_country', 'value')\n\nOut[7]: \n\n           city country                   date.utc  ... city_country value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...  AntwerpenBE  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...  AntwerpenBE   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...  AntwerpenBE  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...  AntwerpenBE  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...  AntwerpenBE   7.5  µg/m³\n\n         ...     ...                        ...  ...          ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...     LondonGB  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...     LondonGB  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...     LondonGB  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...     LondonGB  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...     LondonGB  67.0  µg/m³\n\n[5272 rows x 8 columns]\n\n```\n\n\n\n### df.ds_reverse\n\n\n\n```python\n\ndf\n\nOut[3]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.ds_reverse()\n\nOut[4]: \n\n           city country                   date.utc  ... parameter value   unit\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### df.d_add_prefix_to_column_when_regex_match\n\n\n\n```python\n\ndf\n\nOut[8]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_add_prefix_to_column_when_regex_match(prefix='aa_', regular_expression='^c')\n\nOut[9]: \n\n        aa_city aa_country                   date.utc  ... parameter value   unit\n\n0     Antwerpen         BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen         BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen         BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen         BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen         BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...        ...                        ...  ...       ...   ...    ...\n\n5267     London         GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London         GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London         GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London         GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London         GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### df.d_add_prefix_to_index_when_regex_match\n\n\n\n```python\n\nOut[12]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_add_prefix_to_index_when_regex_match('five_', regular_expression='^5')\n\nOut[13]: \n\n                city country                   date.utc  ... parameter value   unit\n\n0          Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1          Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2          Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3          Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4          Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n              ...     ...                        ...  ...       ...   ...    ...\n\nfive_5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\nfive_5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\nfive_5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\nfive_5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\nfive_5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### df.d_filter_df_by_regex_in_columns\n\n\n\n```python\n\ndf\n\nOut[14]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_filter_df_by_regex_in_columns('^[cu]')\n\nOut[15]: \n\n           city country   unit\n\n0     Antwerpen      BE  µg/m³\n\n1     Antwerpen      BE  µg/m³\n\n2     Antwerpen      BE  µg/m³\n\n3     Antwerpen      BE  µg/m³\n\n4     Antwerpen      BE  µg/m³\n\n         ...     ...    ...\n\n5267     London      GB  µg/m³\n\n5268     London      GB  µg/m³\n\n5269     London      GB  µg/m³\n\n5270     London      GB  µg/m³\n\n5271     London      GB  µg/m³\n\n[5272 rows x 3 columns]\n\n```\n\n\n\n### df.d_filter_df_by_regex_in_index\n\n\n\n```python\n\ndf\n\nOut[16]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_filter_df_by_regex_in_index(r'^5\\d\\d0$')\n\nOut[17]: \n\n        city country                   date.utc  ... parameter value   unit\n\n5000  London      GB  2019-04-20 16:00:00+00:00  ...       no2  48.0  µg/m³\n\n5010  London      GB  2019-04-20 06:00:00+00:00  ...       no2  33.0  µg/m³\n\n5020  London      GB  2019-04-19 20:00:00+00:00  ...       no2  58.0  µg/m³\n\n5030  London      GB  2019-04-19 10:00:00+00:00  ...       no2  44.0  µg/m³\n\n5040  London      GB  2019-04-18 23:00:00+00:00  ...       no2  61.0  µg/m³\n\n5050  London      GB  2019-04-18 13:00:00+00:00  ...       no2  49.0  µg/m³\n\n5060  London      GB  2019-04-18 03:00:00+00:00  ...       no2  50.0  µg/m³\n\n5070  London      GB  2019-04-17 17:00:00+00:00  ...       no2  54.0  µg/m³\n\n5080  London      GB  2019-04-17 07:00:00+00:00  ...       no2  51.0  µg/m³\n\n5090  London      GB  2019-04-16 20:00:00+00:00  ...       no2  83.0  µg/m³\n\n5100  London      GB  2019-04-16 09:00:00+00:00  ...       no2  66.0  µg/m³\n\n5110  London      GB  2019-04-15 22:00:00+00:00  ...       no2  47.0  µg/m³\n\n5120  London      GB  2019-04-15 12:00:00+00:00  ...       no2  27.0  µg/m³\n\n5130  London      GB  2019-04-15 02:00:00+00:00  ...       no2  32.0  µg/m³\n\n5140  London      GB  2019-04-14 16:00:00+00:00  ...       no2  23.0  µg/m³\n\n5150  London      GB  2019-04-14 06:00:00+00:00  ...       no2  35.0  µg/m³\n\n5160  London      GB  2019-04-13 20:00:00+00:00  ...       no2  29.0  µg/m³\n\n5170  London      GB  2019-04-13 10:00:00+00:00  ...       no2  45.0  µg/m³\n\n5180  London      GB  2019-04-13 00:00:00+00:00  ...       no2  29.0  µg/m³\n\n5190  London      GB  2019-04-12 14:00:00+00:00  ...       no2  39.0  µg/m³\n\n5200  London      GB  2019-04-12 04:00:00+00:00  ...       no2  33.0  µg/m³\n\n5210  London      GB  2019-04-11 16:00:00+00:00  ...       no2  34.0  µg/m³\n\n5220  London      GB  2019-04-11 06:00:00+00:00  ...       no2  46.0  µg/m³\n\n5230  London      GB  2019-04-10 19:00:00+00:00  ...       no2  35.0  µg/m³\n\n5240  London      GB  2019-04-10 09:00:00+00:00  ...       no2  35.0  µg/m³\n\n5250  London      GB  2019-04-09 23:00:00+00:00  ...       no2  38.0  µg/m³\n\n5260  London      GB  2019-04-09 13:00:00+00:00  ...       no2  56.0  µg/m³\n\n5270  London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n[28 rows x 7 columns]\n\n```\n\n\n\n### df.d_columns_upper, df.d_columns_lower,df.d_make_columns_dot_compatible,df.d_index_upper,df.d_index_lower\n\n\n\n```python\n\nprint(df.columns)\n\nprint(df.d_make_columns_dot_compatible().columns)\n\nprint(df.d_columns_upper().columns)\n\nprint(df.d_columns_lower().columns)\n\ndf2=df.copy()\n\ndf2.index = df2.parameter\n\nprint(df2.index)\n\nprint(df2.d_index_upper().index)\n\nprint(df2.d_index_lower().index)\n\nIndex(['city', 'country', 'date.utc', 'location', 'parameter', 'value',\n\n       'unit'],\n\n      dtype='object')\n\nIndex(['city', 'country', 'date_utc', 'location', 'parameter', 'value',\n\n       'unit'],\n\n      dtype='object')\n\nIndex(['CITY', 'COUNTRY', 'DATE_UTC', 'LOCATION', 'PARAMETER', 'VALUE',\n\n       'UNIT'],\n\n      dtype='object')\n\nIndex(['city', 'country', 'date_utc', 'location', 'parameter', 'value',\n\n       'unit'],\n\n      dtype='object')\n\nIndex(['pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25',\n\n       'pm25',\n\n       ...\n\n       'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2'],\n\n      dtype='object', name='parameter', length=5272)\n\nIndex(['PM25', 'PM25', 'PM25', 'PM25', 'PM25', 'PM25', 'PM25', 'PM25', 'PM25',\n\n       'PM25',\n\n       ...\n\n       'NO2', 'NO2', 'NO2', 'NO2', 'NO2', 'NO2', 'NO2', 'NO2', 'NO2', 'NO2'],\n\n      dtype='object', length=5272)\n\nIndex(['pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25', 'pm25',\n\n       'pm25',\n\n       ...\n\n       'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2', 'no2'],\n\n      dtype='object', length=5272)\n\n```\n\n\n\n### df.d_natsort_index\n\n\n\n```python\n\ndf2 = df.sample(len(df)).copy()\n\ndftempindex = df2.index[:2500].to_list()\n\ntempvalue = df2.loc[dftempindex].parameter.copy()\n\ntempvalue = tempvalue.apply(lambda x: str(x).upper())\n\ndf2.loc[dftempindex, 'parameter'] = tempvalue\n\nprint(df2)\n\ndf2.index = df2.parameter\n\nprint(df2.d_natsort_index())\n\nfor a,b,c,d in zip(df2.d_natsort_index(sort_numbers_after_non_numbers=True).index.to_list(), df2.d_natsort_index(lowercase_first=True).index.to_list(),df2.d_natsort_index(group_lower_and_uppercase=True).index.to_list(),df2.d_natsort_index(uppercase_first=True).index.to_list()):\n\n    print(a,b,c,d)\n\n\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 no2 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\nno2 NO2 PM25 no2\n\n```\n\n\n\n### df.d_natsort_df_by_column\n\n\n\n```python\n\ndf\n\nOut[3]: \n\n           city country                   date.utc  ... parameter value   unit\n\n0     Antwerpen      BE  2019-06-18 06:00:00+00:00  ...      pm25  18.0  µg/m³\n\n1     Antwerpen      BE  2019-06-17 08:00:00+00:00  ...      pm25   6.5  µg/m³\n\n2     Antwerpen      BE  2019-06-17 07:00:00+00:00  ...      pm25  18.5  µg/m³\n\n3     Antwerpen      BE  2019-06-17 06:00:00+00:00  ...      pm25  16.0  µg/m³\n\n4     Antwerpen      BE  2019-06-17 05:00:00+00:00  ...      pm25   7.5  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n5267     London      GB  2019-04-09 06:00:00+00:00  ...       no2  41.0  µg/m³\n\n5268     London      GB  2019-04-09 05:00:00+00:00  ...       no2  41.0  µg/m³\n\n5269     London      GB  2019-04-09 04:00:00+00:00  ...       no2  41.0  µg/m³\n\n5270     London      GB  2019-04-09 03:00:00+00:00  ...       no2  67.0  µg/m³\n\n5271     London      GB  2019-04-09 02:00:00+00:00  ...       no2  67.0  µg/m³\n\n[5272 rows x 7 columns]\n\ndf.d_natsort_df_by_column('date.utc')\n\nOut[4]: \n\n           city country                   date.utc  ... parameter value   unit\n\n176   Antwerpen      BE  2019-04-09 01:00:00+00:00  ...      pm25  76.0  µg/m³\n\n3500      Paris      FR  2019-04-09 01:00:00+00:00  ...       no2  24.4  µg/m³\n\n3663  Antwerpen      BE  2019-04-09 01:00:00+00:00  ...       no2  22.5  µg/m³\n\n175   Antwerpen      BE  2019-04-09 02:00:00+00:00  ...      pm25  91.5  µg/m³\n\n1824     London      GB  2019-04-09 02:00:00+00:00  ...      pm25  42.0  µg/m³\n\n         ...     ...                        ...  ...       ...   ...    ...\n\n1827      Paris      FR  2019-06-20 22:00:00+00:00  ...       no2  26.5  µg/m³\n\n178      London      GB  2019-06-20 23:00:00+00:00  ...      pm25   7.0  µg/m³\n\n1826      Paris      FR  2019-06-20 23:00:00+00:00  ...       no2  21.8  µg/m³\n\n177      London      GB  2019-06-21 00:00:00+00:00  ...      pm25   7.0  µg/m³\n\n1825      Paris      FR  2019-06-21 00:00:00+00:00  ...       no2  20.0  µg/m³\n\n[5272 rows x 7 columns]\n\n```\n\n\n\n### df.d_rename_columns / df.d_rename_index\n\n\n\n```python\n\ndf = pd.read_csv(    \"https://github.com/pandas-dev/pandas/raw/main/doc/data/titanic.csv\")\n\n\n\nprint(df)\n\n     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n\n0              1         0       3  ...   7.2500   NaN         S\n\n1              2         1       1  ...  71.2833   C85         C\n\n2              3         1       3  ...   7.9250   NaN         S\n\n3              4         1       1  ...  53.1000  C123         S\n\n4              5         0       3  ...   8.0500   NaN         S\n\n..           ...       ...     ...  ...      ...   ...       ...\n\n886          887         0       2  ...  13.0000   NaN         S\n\n887          888         1       1  ...  30.0000   B42         S\n\n888          889         0       3  ...  23.4500   NaN         S\n\n889          890         1       1  ...  30.0000  C148         C\n\n890          891         0       3  ...   7.7500   NaN         Q\n\n\n\n\n\ndf.d_rename_columns(Fare='Embarked',Embarked='Fare',Cabin='cabin2')\n\ndf.d_rename_index({1: 1000000,2:50022})\n\nprint(df)\n\n\n\n         PassengerId  Survived  Pclass  ... Embarked cabin2  Fare\n\n0                  1         0       3  ...   7.2500    NaN     S\n\n1000000            2         1       1  ...  71.2833    C85     C\n\n50022              3         1       3  ...   7.9250    NaN     S\n\n3                  4         1       1  ...  53.1000   C123     S\n\n4                  5         0       3  ...   8.0500    NaN     S\n\n              ...       ...     ...  ...      ...    ...   ...\n\n886              887         0       2  ...  13.0000    NaN     S\n\n887              888         1       1  ...  30.0000    B42     S\n\n888              889         0       3  ...  23.4500    NaN     S\n\n889              890         1       1  ...  30.0000   C148     C\n\n890              891         0       3  ...   7.7500    NaN     Q\n\n[891 rows x 12 columns]\n\n\n\ndf.d_rename_columns({'Embarked': 'Fare', 'Fare' : 'Embarked', 'cabin2' : 'Cabin'})\n\ndf.index = df.index.astype('string')\n\ndf.index = 'a' + df.index\n\ndf.d_rename_index(a1000000= 1,a50022=2)\n\nprint(df)\n\n\n\n      PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n\na0              1         0       3  ...   7.2500   NaN         S\n\n1               2         1       1  ...  71.2833   C85         C\n\n2               3         1       3  ...   7.9250   NaN         S\n\na3              4         1       1  ...  53.1000  C123         S\n\na4              5         0       3  ...   8.0500   NaN         S\n\n           ...       ...     ...  ...      ...   ...       ...\n\na886          887         0       2  ...  13.0000   NaN         S\n\na887          888         1       1  ...  30.0000   B42         S\n\na888          889         0       3  ...  23.4500   NaN         S\n\na889          890         1       1  ...  30.0000  C148         C\n\na890          891         0       3  ...   7.7500   NaN         Q\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/a_pandas_ex_columns_and_index",
    "keywords": "pandas,numpy,dataframe,series,regex,natsort",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "a-pandas-ex-columns-and-index",
    "package_url": "https://pypi.org/project/a-pandas-ex-columns-and-index/",
    "platform": null,
    "project_url": "https://pypi.org/project/a-pandas-ex-columns-and-index/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/a_pandas_ex_columns_and_index"
    },
    "release_url": "https://pypi.org/project/a-pandas-ex-columns-and-index/0.13/",
    "requires_dist": [
      "flatten-any-dict-iterable-or-whatsoever",
      "natsort",
      "numpy",
      "pandas",
      "regex"
    ],
    "requires_python": "",
    "summary": "Some useful methods for columns / index in Pandas DataFrames",
    "version": "0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15341729,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd34afd569f1579fe237df995e79b755ead3fd3c6f4b247faa959fe49aa88c1b",
          "md5": "6bb98307707516d1a4dd6728064ac509",
          "sha256": "f28748689a6762b627b0662585aba140303a80704536a83c44c1873a5930cc00"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bb98307707516d1a4dd6728064ac509",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28397,
        "upload_time": "2022-09-27T07:44:19",
        "upload_time_iso_8601": "2022-09-27T07:44:19.144367Z",
        "url": "https://files.pythonhosted.org/packages/fd/34/afd569f1579fe237df995e79b755ead3fd3c6f4b247faa959fe49aa88c1b/a_pandas_ex_columns_and_index-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c32e7fd5a32f2239a2ffd700e960fba17f311201861e309bc1a7eb912ca73388",
          "md5": "a5beadd86efa814b3a86d6fd003ab791",
          "sha256": "6fd5bc5d82ab63c24c4c9e11978d2b1252dac7555d05c85a06311d02213057ef"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5beadd86efa814b3a86d6fd003ab791",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32069,
        "upload_time": "2022-09-27T07:44:23",
        "upload_time_iso_8601": "2022-09-27T07:44:23.379082Z",
        "url": "https://files.pythonhosted.org/packages/c3/2e/7fd5a32f2239a2ffd700e960fba17f311201861e309bc1a7eb912ca73388/a_pandas_ex_columns_and_index-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1272ba20b646d96670f239611870fb52efd454614bb23027d615dce98a897c85",
          "md5": "c4f0bd8493e2797fe87302025c530a76",
          "sha256": "31ba855cb5bfc6b6cc22347c7593e2388b7c55a4804eac4081d1059ee05441a0"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4f0bd8493e2797fe87302025c530a76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31904,
        "upload_time": "2022-10-02T05:50:14",
        "upload_time_iso_8601": "2022-10-02T05:50:14.477054Z",
        "url": "https://files.pythonhosted.org/packages/12/72/ba20b646d96670f239611870fb52efd454614bb23027d615dce98a897c85/a_pandas_ex_columns_and_index-0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c4e9460c00d8e632eb96b5f9484e68282ecbddd22585a5dcaf058c43c42c077",
          "md5": "a8059d271626b08edb4e83df01990f91",
          "sha256": "04c0c3202c4df03f4b300d98ce4de0e402539513757580fc1e43ff4f908a0d90"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "a8059d271626b08edb4e83df01990f91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33130,
        "upload_time": "2022-10-02T05:50:17",
        "upload_time_iso_8601": "2022-10-02T05:50:17.834159Z",
        "url": "https://files.pythonhosted.org/packages/5c/4e/9460c00d8e632eb96b5f9484e68282ecbddd22585a5dcaf058c43c42c077/a_pandas_ex_columns_and_index-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f64cee5a1cd3d1611ba477169ce4e3b6b2ee2e293c8c2f8442413c7086c6ca95",
          "md5": "5c833e50f442148509303681a0b9ef19",
          "sha256": "6bf1baddc683b45dd95fe5ee44c1d5fad1d63ced4fdabfa307bb9de24f7c429c"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c833e50f442148509303681a0b9ef19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11666,
        "upload_time": "2022-10-06T04:14:26",
        "upload_time_iso_8601": "2022-10-06T04:14:26.586198Z",
        "url": "https://files.pythonhosted.org/packages/f6/4c/ee5a1cd3d1611ba477169ce4e3b6b2ee2e293c8c2f8442413c7086c6ca95/a_pandas_ex_columns_and_index-0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce1b2619f292f9b0b90bcf92d12668ec0777ff48f936a8b0392e78eb32a62d3c",
          "md5": "627c9fe23d4fa866688bfced71c95750",
          "sha256": "0eac27a79d109547ebfc86d69c19eea95540db0299819ece00ec4c8f81f1b98e"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "627c9fe23d4fa866688bfced71c95750",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12161,
        "upload_time": "2022-10-06T04:14:28",
        "upload_time_iso_8601": "2022-10-06T04:14:28.956355Z",
        "url": "https://files.pythonhosted.org/packages/ce/1b/2619f292f9b0b90bcf92d12668ec0777ff48f936a8b0392e78eb32a62d3c/a_pandas_ex_columns_and_index-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ec99b936f293932c1f32c0598f48c5db2b4022445b03596a2f0165d536b4c9",
          "md5": "7fe4f4db5573ece4aaf27a180e93aef6",
          "sha256": "11ffaffdc851db9fd35fd1642b4199a0a39c19560b76394f2ea46b31f95a97bc"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fe4f4db5573ece4aaf27a180e93aef6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13218,
        "upload_time": "2022-10-08T03:41:34",
        "upload_time_iso_8601": "2022-10-08T03:41:34.710951Z",
        "url": "https://files.pythonhosted.org/packages/79/ec/99b936f293932c1f32c0598f48c5db2b4022445b03596a2f0165d536b4c9/a_pandas_ex_columns_and_index-0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d184b7e02dd5436b2f85a5b2bdfd5695b1e6b2785949aed88475a44ed057fe8d",
          "md5": "d1445fd6a84e7e5eba7217830a124098",
          "sha256": "6e5419e62d9a8eb9d33b16b5e9ea3e97d421a67ad1afd6fb3c55766d812762a0"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_columns_and_index-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "d1445fd6a84e7e5eba7217830a124098",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16020,
        "upload_time": "2022-10-08T03:41:37",
        "upload_time_iso_8601": "2022-10-08T03:41:37.386240Z",
        "url": "https://files.pythonhosted.org/packages/d1/84/b7e02dd5436b2f85a5b2bdfd5695b1e6b2785949aed88475a44ed057fe8d/a_pandas_ex_columns_and_index-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79ec99b936f293932c1f32c0598f48c5db2b4022445b03596a2f0165d536b4c9",
        "md5": "7fe4f4db5573ece4aaf27a180e93aef6",
        "sha256": "11ffaffdc851db9fd35fd1642b4199a0a39c19560b76394f2ea46b31f95a97bc"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_columns_and_index-0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7fe4f4db5573ece4aaf27a180e93aef6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13218,
      "upload_time": "2022-10-08T03:41:34",
      "upload_time_iso_8601": "2022-10-08T03:41:34.710951Z",
      "url": "https://files.pythonhosted.org/packages/79/ec/99b936f293932c1f32c0598f48c5db2b4022445b03596a2f0165d536b4c9/a_pandas_ex_columns_and_index-0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d184b7e02dd5436b2f85a5b2bdfd5695b1e6b2785949aed88475a44ed057fe8d",
        "md5": "d1445fd6a84e7e5eba7217830a124098",
        "sha256": "6e5419e62d9a8eb9d33b16b5e9ea3e97d421a67ad1afd6fb3c55766d812762a0"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_columns_and_index-0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "d1445fd6a84e7e5eba7217830a124098",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16020,
      "upload_time": "2022-10-08T03:41:37",
      "upload_time_iso_8601": "2022-10-08T03:41:37.386240Z",
      "url": "https://files.pythonhosted.org/packages/d1/84/b7e02dd5436b2f85a5b2bdfd5695b1e6b2785949aed88475a44ed057fe8d/a_pandas_ex_columns_and_index-0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}