{
  "info": {
    "author": "Tomasz Łaszczuk(original), Franky Quintero(New version), Rafat Hossain(Django 4.0)",
    "author_email": "t.laszczuk@futuremind.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "DRF Friendly Errors (New Version: Django & DRF)\n===============================================\n\n**Extension for Django REST framework error display**\n\n.. image:: https://travis-ci.org/frankyjquintero/drf-friendly-errors.svg?branch=master\n    :target: https://travis-ci.org/frankyjquintero/drf-friendly-errors\n\n\n* Fork From: https://github.com/FutureMind/drf-friendly-errors\n* Added support for django >= 4.0\n\nOverview\n--------\n\nThis package extends default error JSON body providing configurable error codes\nand more consumable response structure.\n\nIt turns default JSON body of HTTP 400 response, which look like this\n\n.. code:: python\n\n    {\n        \"name\": [\"This field is required.\"],\n        \"password\": [\"This field may not be blank.\"]\n        \"age\": [\"This field may not be null.\"]\n        \"description\": [\"Ensure this field has no more than 100 characters.\"]\n    }\n\ninto\n\n.. code:: python\n\n    {\n        \"code\" : 1001,\n        \"message\" : \"Validation Failed\",\n        \"errors\" : [\n            {\n                \"code\" : 2002,\n                \"field\" : \"name\",\n                \"message\" : \"This field is required.\"\n            },\n            {\n                \"code\" : 2031,\n                \"field\" : \"password\",\n                \"message\" : \"This field may not be blank.\"\n            },\n            {\n                \"code\" : 2023,\n                \"field\" : \"age\",\n                \"message\" : \"This field may not be null.\"\n            },\n            {\n                \"code\" : 2041,\n                \"field\" : \"description\",\n                \"message\" : \"Ensure this field has no more than 100 characters.\"\n            },\n        ]\n    }\n\nLibrary handles all `Django REST framework`_ built-in serializer validation.\n\nRequirements\n------------\n-  Python (3.6, 3.7, 3.8-dev)\n-  Django (1.11, 2.0, 2.1, 2.2, 2.2.5)\n-  Django REST framework (3.7, 3.8, 3.9, 3.10)\n\nInstallation\n------------\n\nBy running installation script\n\n.. code:: bash\n\n    $ python setup.py install\n\nOr using pip (pendent register xD)\n\n.. code:: bash\n\n    $ pip install drf-friendly-errors\n\nUsage\n-----\n\nSimply add a FriendlyErrorMessagesMixin to your serializer or model serializer class\n\n.. code:: python\n\n    from rest_framework_friendly_errors.mixins import FriendlyErrorMessagesMixin\n\n    class MySerializer(FriendlyErrorMessagesMixin, ModelSerializer):\n\nIf you want to change default library settings and provide your own set of error codes just add following in your\nsettings.py\n\n.. code:: python\n\n    FRIENDLY_ERRORS = {\n        FIELD_ERRORS = {\n            'CharField': {'required': 10, 'null':11, 'blank': 12, 'max_length': 13, 'min_length': 14}\n        }\n        VALIDATOR_ERRORS = {\n            'UniqueValidator': 50\n        },\n        EXCEPTION_DICT = {\n            'PermissionDenied': 100\n        }\n    }\n\nCustom serializer validation\n----------------------------\n\nIf you need custom field validation or validation for whole serializer register your validation in serializer class\n\n.. code:: python\n\n    class PostSerializer(FriendlyErrorMessagesMixin,\n                         serializers.ModelSerializer):\n        class Meta:\n            model = Post\n\n        def validate_title(self, value):\n            if value[0] != value[0].upper():\n                raise ValidationError('First letter must be an uppercase')\n            return value\n\n        def validate(self, attrs):\n            category = attrs.get('category)\n            title = attrs.get('title')\n            if category and category not in title:\n                raise ValidationError('Title has to include category')\n            return attrs\n\n        FIELD_VALIDATION_ERRORS = {'validate_title': 5000} # register your own validation method and assign it to error code\n        NON_FIELD_ERRORS = {'Title has to include category': 8000} # register non field error messages and assign it to error code\n\nIf you want to raise field error in validate method use register_error method provided by a mixin\n\n.. code:: python\n\n    class PostSerializer(FriendlyErrorMessagesMixin,\n                         serializers.ModelSerializer):\n        class Meta:\n            model = Post\n\n        def validate(self, attrs):\n            category = attrs.get('category')\n            title = attrs.get('title')\n            if category and category not in title:\n                self.register_error(error_message='Title has to include category',\n                                    error_code=8000,\n                                    field_name='title')\n            return attrs\n\nError codes not related to serializer validation\n------------------------------------------------\n\nTo turn other type of errors responses into friendly errors responses with error codes\nadd this exception handler to your REST_FRAMEWORK settings\n\n.. code:: python\n\n    REST_FRAMEWORK = {\n        'EXCEPTION_HANDLER':\n        'rest_framework_friendly_errors.handlers.friendly_exception_handler'\n    }\n\nDefault error codes\n-------------------\n\nFollowing conventions were used:\n\n1xxx - Are reserved for non field errors\n\n2xxx - Are reserved for field errors\n\n3xxx - Are reserved for validator errors\n\n4xxx - Are reserved for other errors not related to serializer validation\n\nDefault field error codes\n-------------------------\n\nField is required\n\n- 2001: BooleanField, NullBooleanField\n- 2002: CharField, EmailField, RegexField, SlugField, URLField, UUIDField, FilePathField, IPAddressField\n- 2003: IntegerField, FloatField, DecimalField\n- 2004: ChoiceField, MultipleChoiceField\n- 2005: FileField, ImageField\n- 2006: ListField, DictField, JSONField\n- 2007: StringRequiredField, PrimaryKeyRelatedField, HyperlinkedRelatedField, SlugRelatedField, HyperlinkedIdentityField, ManyRelatedField\n- 2008: ReadOnlyField, HiddenField, ModelField, SerializerMethodField\n\nField data is invalid (invalid regex, string instead of number, date, etc.)\n\n- 2011: BooleanField, NullBooleanField\n- 2012: EmailField, RegexField, SlugField, URLField, UUIDField, IPAddressField\n- 2013: IntegerField, FloatField, DecimalField\n- 2014: FileField, ImageField\n- 2015: DateTimeField, DateField, TimeField, DurationField\n\nField data cannot be null\n\n- 2021: BooleanField, NullBooleanField\n- 2022: CharField, EmailField, RegexField, SlugField, URLField, UUIDField, FilePathField, IPAddressField\n- 2023: IntegerField, FloatField, DecimalField\n- 2024: ChoiceField, MultipleChoiceField\n- 2025: FileField, ImageField\n- 2026: ListField, DictField, JSONField\n- 2027: StringRequiredField, PrimaryKeyRelatedField, HyperlinkedRelatedField, SlugRelatedField, HyperlinkedIdentityField, ManyRelatedField\n- 2028: ReadOnlyField, HiddenField, ModelField, SerializerMethodField\n\nField data cannot be blank\n\n- 2031: CharField, EmailField, RegexField, SlugField, URLField, UUIDField, IPAddressField\n\nField data is too long string\n\n- 2041: CharField, EmailField, RegexField, SlugField, URLField, UUIDField, IPAddressField\n- 2042: IntegerField, FloatField, DecimalField\n- 2043: FileField, ImageField\n\nField data is too short string\n\n- 2051: CharField, EmailField, RegexField, SlugField, URLField, UUIDField, IPAddressField\n\nField data is too big number\n\n- 2061: IntegerField, FloatField, DecimalField\n\nField data is too small number\n\n- 2071: IntegerField, FloatField, DecimalField\n\nField data do not match any value from available choices\n\n- 2081: ChoiceField, MultipleChoiceField\n- 2082: FilePathField\n- 2083: ManyRelatedField\n\nField is empty\n\n- 2091: FileField, ImageField\n- 2092: MultipleChoiceField\n- 2093: ManyRelatedField\n\nFile has no name\n\n- 2101: FileField, ImageField\n\nFile is an invalid image\n\n- 2111: ImageField\n\nField is not a list\n\n- 2121: MultipleChoiceField\n- 2122: ListField\n- 2123: ManyRelatedField\n\nField is not a dict\n\n- 2131: DictField\n\nField is not a json\n\n- 2141: JSONField\n\nField does not exist (invalid hyperlink, primary key, etc.)\n\n- 2151: PrimaryKeyRelatedField, HyperlinkedRelatedField, SlugRelatedField, HyperlinkedIdentityField\n\nIncorrect type for relation key\n\n- 2161: PrimaryKeyRelatedField, HyperlinkedRelatedField, SlugRelatedField, HyperlinkedIdentityField\n\nCouldn't match url or name to a view\n\n- 2171: HyperlinkedRelatedField, HyperlinkedIdentityField\n\nExpected a DateTime, got Date\n\n- 2181: DateTimeField\n\nExcpected a Date, got DateTime\n\n- 2191: DateField\n\nToo many digits for defined Decimal\n\n- 2201: DecimalField\n\nToo many whole digits for defined Decimal\n\n- 2211: DecimalField\n\nToo many decimal digits for defined Decimal\n\n- 2221: DecimalField\n\nDefault built-in validators error codes\n---------------------------------------\n\n- UniqueValidator: 3001\n- UniqueTogetherValidator: 3003\n- UniqueForDateValidator: 3004\n- UniqueForMonthValidator: 3004\n- UniqueForYearValidator: 3005\n- RegexValidator: 3006\n- EmailValidator: 3007\n- URLValidator: 3008\n- MaxValueValidator: 3009\n- MinValueValidator: 3010\n- MaxLengthValidator: 3011\n- MinLengthValidator: 3012\n- DecimalValidator: 3013\n- validate_email: 3014\n- validate_slug: 3015\n- validate_unicode_slug: 3016\n- validate_ipv4_address: 3017\n- validate_ipv46_address: 3018\n- validate_comma_separated_integer_list: 3019\n- int_list_validator: 3020\n\nOther error codes not related to serializer validation\n------------------------------------------------------\n\nAPI Reference - APIException : https://www.django-rest-framework.org/api-guide/exceptions/#api-reference\n\n\n- Server Error: 4000\n- Parser Error (exception was raised by Parser class): 4001,\n- Authentication Failed (invalid credentials were provided): 4002,\n- Not Authenticated (no credentials were provided): 4003,\n- Not Found (Http404): 4004,\n- Permission Denied: 4005,\n- Method Not Allowed (invalid HTTP method): 4006,\n- Not Acceptable (Could not satisfy the request Accept header): 4007,\n- Unsupported Media-Type: 4008,\n- Throttled (Too many requests): 4009\n- ValidationError: 4010\n\nTests\n-----\n\nPull requests won't be accepted without passing tests. You can run the test suite with:\n\n.. code:: python\n\n    python runtests.py\n\n.. _Django Rest framework: http://django-rest-framework.org/\n\nContributors\n------------\n- Geoffrey Lehée <socketubs>\n- Franky Quintero <frankyjquintero>\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/citixensas/drf-friendly-errors",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-friendly-errors-django-4",
    "package_url": "https://pypi.org/project/drf-friendly-errors-django-4/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-friendly-errors-django-4/",
    "project_urls": {
      "Homepage": "https://github.com/citixensas/drf-friendly-errors"
    },
    "release_url": "https://pypi.org/project/drf-friendly-errors-django-4/0.15.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extension for displaying serializer validation errors in Django Rest Framework",
    "version": "0.15.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13536180,
  "releases": {
    "0.15.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9335ca9f7e34ef4545b208b2d067e76f3511167bb368e65de15788a012bbcfd0",
          "md5": "9d16e408f04c38b2be9eccf62f902898",
          "sha256": "9a22d6555bb071897b6deb70abb29f144d770c07d67301aed93f6602ede998f8"
        },
        "downloads": -1,
        "filename": "drf-friendly-errors-django-4-0.15.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d16e408f04c38b2be9eccf62f902898",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11292,
        "upload_time": "2022-04-16T13:48:04",
        "upload_time_iso_8601": "2022-04-16T13:48:04.344289Z",
        "url": "https://files.pythonhosted.org/packages/93/35/ca9f7e34ef4545b208b2d067e76f3511167bb368e65de15788a012bbcfd0/drf-friendly-errors-django-4-0.15.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e82a4966db4279da1c20309379091c938945e87f56ca58c569f64f0c58d92914",
          "md5": "08c0bfcc56998663633972b8cbcc3da8",
          "sha256": "8bc80583c46a1807f3d9427542a7daa3819b64cd638ba93f88bad58819e5f5df"
        },
        "downloads": -1,
        "filename": "drf-friendly-errors-django-4-0.15.1.tar.gz",
        "has_sig": false,
        "md5_digest": "08c0bfcc56998663633972b8cbcc3da8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11588,
        "upload_time": "2022-04-16T13:52:48",
        "upload_time_iso_8601": "2022-04-16T13:52:48.292468Z",
        "url": "https://files.pythonhosted.org/packages/e8/2a/4966db4279da1c20309379091c938945e87f56ca58c569f64f0c58d92914/drf-friendly-errors-django-4-0.15.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2222fd2837a7834042a4fd3694ba235591de96a41172150f8303e5fc2ebd73bf",
          "md5": "75f57ed54eb8887ae6228574c2a6c7b9",
          "sha256": "69e4c2600c9887b989174dc37030be3510dcb854535f2bdfbffad9817d1bbfcb"
        },
        "downloads": -1,
        "filename": "drf-friendly-errors-django-4-0.15.2.tar.gz",
        "has_sig": false,
        "md5_digest": "75f57ed54eb8887ae6228574c2a6c7b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11611,
        "upload_time": "2022-04-17T06:30:15",
        "upload_time_iso_8601": "2022-04-17T06:30:15.260303Z",
        "url": "https://files.pythonhosted.org/packages/22/22/fd2837a7834042a4fd3694ba235591de96a41172150f8303e5fc2ebd73bf/drf-friendly-errors-django-4-0.15.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2222fd2837a7834042a4fd3694ba235591de96a41172150f8303e5fc2ebd73bf",
        "md5": "75f57ed54eb8887ae6228574c2a6c7b9",
        "sha256": "69e4c2600c9887b989174dc37030be3510dcb854535f2bdfbffad9817d1bbfcb"
      },
      "downloads": -1,
      "filename": "drf-friendly-errors-django-4-0.15.2.tar.gz",
      "has_sig": false,
      "md5_digest": "75f57ed54eb8887ae6228574c2a6c7b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11611,
      "upload_time": "2022-04-17T06:30:15",
      "upload_time_iso_8601": "2022-04-17T06:30:15.260303Z",
      "url": "https://files.pythonhosted.org/packages/22/22/fd2837a7834042a4fd3694ba235591de96a41172150f8303e5fc2ebd73bf/drf-friendly-errors-django-4-0.15.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}