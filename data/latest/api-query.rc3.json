{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Communications",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# api-query\n\nA simple tool to query REST APIs with very little boilerplate. For example, to query and print the\ntitle and URL of new stories on HackerNews:\n\n```\nGET https://hacker-news.firebaseio.com/v0/newstories.json\n[\n    -> STORY_ID\n\n    GET https://hacker-news.firebaseio.com/v0/item/{STORY_ID}.json\n    { title? -> TITLE, url? -> URL }\n\n    ! print(f'Story {STORY_ID}: {TITLE} ({URL})')\n]\n```\n([examples/hn.query](examples/hn.query))\n\n## Installation\n\n`pip install api-query`\n\nPython 3.10+ is required.\n\n## Usage\n\n```\napi-query\n    [--max-concurrent 1]\n    [--log-level info]\n    [--compile-only]\n    [--http-rate-limit 1]\n    [--http-retry-count 1]\n    [--http-base-delay 1.0]\n    [--http-max-delay 10.0]\n    query-to-run.query\n```\n\n`query-to-run.query` should be of the format described in the next section.\n\n`--max-concurrent` specifies the maximum number of concurrently running statements.\n\n`--compile-only` causes the generated Python program to only be printed to stdout, instead of being run.\n\n`--http-rate-limit` is the maximum number of HTTP requests sent per second (on average).\n\n`--http-retry-count` is the maximum number of times HTTP requests will be retried. The time between\nretries starts with the value of `--http-base-delay` (in seconds), and follows binary exponential\nbackoff until it hits `--http-max-delay` (in seconds).\n\n## Query Format\n\nQuery files consist of four types of statements:\n\n### Assignment\n\nA line of the form:\n```\nVAR_NAME = value here\n```\nassigns `\"value here\"` to `VAR_NAME`. The value is treated as a Python f-string, so you may write, e.g. `VAR_NAME_1 = {VAR_NAME}.jpg`.\n\nIf no value is provided, e.g.\n```\nPASSWORD =\n```\nthen the environmental variable of the same name is used instead (`$PASSWORD` in this case).\n\n### Python Statement\n\nPython statements can be inserted inline by prefixing them with a `!`. For example,\n```\n! print('hello')\n```\n\nImports are handled automatically, but can also be specified manually with a Python statement.\n\n### Shell Command\n\nShell commands can be inserted inline by prefixing them with a `>`. For example,\n```\n> ls\n```\n\nOutput of these commands is not captured (and gets mixed into STDOUT), but the command itself is\ntreated as a f-string, and thus can use variables:\n```\n> ffmpeg -i {URL} -c copy \"{TITLE}.mp4\"\n```\n\n### HTTP Query\n\nAn HTTP query must be of the format:\n```\nMETHOD http://...\n- Header1: value (as needed)\n...\n- Request Body Here (as needed)\nResponse Handler Here\n```\n\nFor example, a simple GET query can be done with:\n```\nGET http://example.com\n- User-Agent: value\n- Another-HTTP-Header: value\n-> EXAMPLE_COM_RESPONSE\n```\n\nThe URL, as well as the HTTP header values, are converted to f-strings, so you may write, e.g. `- Authorization: Bearer {TOKEN}`.\n\n#### Request Body\n\nThe request body must come after all headers, before the response handler, and is optional. There are two options for the request body:\n\n##### String\n\nYou can specify the response body as a string. This will be treated as an f-string.\n\n```\n- \"response_body_here {VAR_NAME}\"\n```\n\n##### JSON\n\nYou can alternatively specify the request body in the following format, which will be encoded and sent as application/json.\n\n```\n- {\n      field1: \"FIELD 1\",\n      field2: VAR_NAME,\n      field3.subfield[0].id: USER_ID,\n      field4: [\n          { subfield: 3 }\n      ]\n  }\n```\nwhich will be converted into\n```\n{\n    \"field1\": \"FIELD 1\",\n    \"field2\": \"VALUE OF VAR_NAME HERE\",\n    \"field3\": {\n        \"subfield\": [\n            { \"id\": \"VALUE OF USER_ID HERE\" }\n        ]\n    },\n    \"field4\": [\n        { \"subfield\": 3 }\n    ]\n}\n```\n\n#### Response Handler\n\nThere are two types of ways to handle HTTP responses, similar to the two ways to specify request body.\n\n##### String\n\nYou can save the response body as a string to a variable with:\n```\n-> OUTPUT_VAR\n```\n\n##### JSON\n\nYou can also deconstruct a JSON response body to only check certain fields and extract certain values. For example:\n```\n{\n    status: 200,\n    response: {\n        userId: USER_ID,\n        documents[0].id -> FIRST_DOCUMENT_ID\n    }\n}\n```\nThis checks that the response is of the format:\n```\n{\n    \"status\": 200,\n    \"response\": {\n        \"userId\": \"VALUE OF USER_ID HERE\",\n        \"documents\": [\n            { \"id\": ..., ... },\n            ...\n        ],\n        ...\n    },\n    ...\n}\n```\nand saves the value of the first document id to `FIRST_DOCUMENT_ID`.\n\nIt is also possible to loop through an array in the response, and do further work, for example:\n```\n{\n    documents: [\n        { id -> DOCUMENT_ID }\n\n        GET http://.../{DOCUMENT_ID}\n        -> DOCUMENT_CONTENTS\n\n        ! print(DOCUMENT_CONTENTS)\n    ]\n}\n```\nThis will iterate through every item of the `documents` array in the response, perform a GET request, then print out the response.\n\nFor object keys, adding a `?` between the end of the key and the start of the arrow will allow\nthe key to not exist, in which case the variable is set to `None` instead, e.g.\n```\n{\n    user_id? -> USER_ID\n}\n```\nwill set `USER_ID = None` if `user_id` is not a key in the response, instead of throwing an error.\n\n## Example\n\nFor examples, please see [the examples directory](examples/).\n\n## Generated Code\n\nTo only view the generated code without running, you can run:\n\n```bash\napi-query --compile-only file.query\n```\n\nor use:\n```py\nimport api_query\n\ngenerated_code = '\\n'.join(api_query.compile(api_query.parse(api_query.lex(query_source))))\n```\n\n## License\n\nThis utility is licensed under the MIT License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/es1024/api-query",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "api-query",
    "package_url": "https://pypi.org/project/api-query/",
    "platform": null,
    "project_url": "https://pypi.org/project/api-query/",
    "project_urls": {
      "Homepage": "https://github.com/es1024/api-query"
    },
    "release_url": "https://pypi.org/project/api-query/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool to generate and run a script to navigate a REST API.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14684392,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2a10d9a8e040e2bad26b81e6f7d5f02bdf06e791ecf3d9f717712692a7bc708",
          "md5": "a408bcbc0a9d2fd35bc516c71bca6937",
          "sha256": "d67885a5ac6b88a80bebb3d66ddbe0a5a8b888bebf920231be83bcb4527c4ce5"
        },
        "downloads": -1,
        "filename": "api-query-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a408bcbc0a9d2fd35bc516c71bca6937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11115,
        "upload_time": "2022-08-07T10:58:12",
        "upload_time_iso_8601": "2022-08-07T10:58:12.528917Z",
        "url": "https://files.pythonhosted.org/packages/d2/a1/0d9a8e040e2bad26b81e6f7d5f02bdf06e791ecf3d9f717712692a7bc708/api-query-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ecf94d98d419c53bb7948cd4bfe6a366c1e6abf354cfc63612fc308b5e7d59d",
          "md5": "95104dea93976903938d56fa1002f558",
          "sha256": "467b9039a6cbbb2ee4070956929b769b89c235d7d770d549b8166dcc18a1be17"
        },
        "downloads": -1,
        "filename": "api-query-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95104dea93976903938d56fa1002f558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12763,
        "upload_time": "2022-08-07T11:08:16",
        "upload_time_iso_8601": "2022-08-07T11:08:16.687728Z",
        "url": "https://files.pythonhosted.org/packages/3e/cf/94d98d419c53bb7948cd4bfe6a366c1e6abf354cfc63612fc308b5e7d59d/api-query-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaabeb7bdb18f873af3de546d82cd8524e2441c11d521e4fed69933df14a07b6",
          "md5": "b5899eea946d34fa332360150ef34ec8",
          "sha256": "2ec4540a497cf36675f6884041d1438d1de58fca1be3cd78faced4addb10d830"
        },
        "downloads": -1,
        "filename": "api-query-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5899eea946d34fa332360150ef34ec8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15501,
        "upload_time": "2022-08-08T03:55:46",
        "upload_time_iso_8601": "2022-08-08T03:55:46.111701Z",
        "url": "https://files.pythonhosted.org/packages/ea/ab/eb7bdb18f873af3de546d82cd8524e2441c11d521e4fed69933df14a07b6/api-query-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaabeb7bdb18f873af3de546d82cd8524e2441c11d521e4fed69933df14a07b6",
        "md5": "b5899eea946d34fa332360150ef34ec8",
        "sha256": "2ec4540a497cf36675f6884041d1438d1de58fca1be3cd78faced4addb10d830"
      },
      "downloads": -1,
      "filename": "api-query-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b5899eea946d34fa332360150ef34ec8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15501,
      "upload_time": "2022-08-08T03:55:46",
      "upload_time_iso_8601": "2022-08-08T03:55:46.111701Z",
      "url": "https://files.pythonhosted.org/packages/ea/ab/eb7bdb18f873af3de546d82cd8524e2441c11d521e4fed69933df14a07b6/api-query-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}