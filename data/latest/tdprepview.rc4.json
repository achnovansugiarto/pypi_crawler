{
  "info": {
    "author": "Martin Hillebrand",
    "author_email": "martin.hillebrand@teradata.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database"
    ],
    "description": "# tdprepview\n\nPython Package that creates Data Preparation Pipelines in Views written in Teradata-SQL.\n\n## Installation\n\n\n* pip install tdprepview\n\n## Features\n\n* Pipeline class that allows creating in-DB preprocessing pipelines\n* Several Preprocessor functions\n* API similar to sklearn.Pipeline\n\n## Quickstart\n\n### 1. setting up the pipeline\n\n```python\nimport teradataml as tdml\ndatabase_credentials = {\n    # ...\n}\nDbCon = tdml.create_context(**database_credentials)\n\nmyschema, table_train, table_score = \"...\", \"...\", \"...\"\nDF_train = tdml.DataFrame(tdml.in_schema(myschema,table_train))\nDF_score = tdml.DataFrame(tdml.in_schema(myschema,table_score))\n\nfrom tdprepview import Pipeline\nfrom tdprepview import (\n    StandardScaler, IterativeImputer, PCA, DecisionTreeBinning )\n\nsteps = [\n    ({\"pattern\":\"^floatfeat_[1-5]$\"}, [StandardScaler(), IterativeImputer()], {\"suffix\":\"_imputed\"}),\n    ({\"suffix\":\"_imputed\"}, PCA(n_components=2), {\"prefix\":\"mypca_\"}),\n    ({\"prefix\":\"mypca_\"}, DecisionTreeBinning(target_var=\"target_class\", no_bins=3))\n]\n\nmypipeline = Pipeline(steps=steps)\n\n```\n\n### 2.a transform DataFrames directly\nthis is suitable if you are working in a sandbox Jupyter Notebook\n```python\n# fit() calculates all necessary statistics in DB\nmypipeline.fit(DF=DF_train)\n# transform generates SQL syntax based on the chosen Preprocessors and the statistics from fit()\nDF_train_transf = mypipeline.transform(DF_train)\nDF_score_transf = mypipeline.transform(DF_score)\n#... go on with some modelling (e.g. sklearn, TD_DecisionForest,...) \n# and scoring (via BYOM, TD_DecisionForestPredict, ...)\n```\n\n### 2.b inspect produced queries\nif you want to check the SQL code, that is generated py tdprepview\n```python\nmypipeline.fit(DF=DF_train)\nquery_train = mypipeline.transform(DF_train, return_type = \"str\")\nprint(query_train)\n```\nthe output: (Note how columns not part of the pipeline are simply forwarded)\n```sql\nWITH preprocessing_steps AS\n(\n    SELECT\n    row_id AS c_i_35,\n    floatfeat_1 AS c_i_36,\n    floatfeat_2 AS c_i_37,\n    floatfeat_3 AS c_i_38,\n    target_class AS c_i_39,\n    ZEROIFNULL( (( c_i_36 ) - -0.2331302 ) / NULLIF( 1.747159 , 0) ) AS c_i_40,\n    ZEROIFNULL( (( c_i_37 ) - 0.03895576 ) / NULLIF( 1.722347 , 0) ) AS c_i_41,\n    ZEROIFNULL( (( c_i_38 ) - 0.2363556 ) / NULLIF( 2.808312 , 0) ) AS c_i_42,\n    -1.118451e-08  +  (-0.07714142) * (COALESCE(c_i_41, 1.610355e-09))  +  (-0.1758817) * (COALESCE(c_i_42, -4.838372e-09)) AS c_i_43,\n    4.261288e-09  +  (-0.0431946) * (COALESCE(c_i_40, -1.045776e-08))  +  (0.6412595) * (COALESCE(c_i_42, -4.838372e-09)) AS c_i_44,\n    -7.079888e-09  +  (-0.118112) * (COALESCE(c_i_40, -1.045776e-08))  +  (0.624912) * (COALESCE(c_i_41, 1.610355e-09)) AS c_i_45,\n    (0.2604757) * (c_i_43)  +  (-0.681657) * (c_i_44)  +  (-0.6837369) * (c_i_45) AS c_i_46,\n    (-0.1047098) * (c_i_43)  +  (0.6840609) * (c_i_44)  +  (-0.7218702) * (c_i_45) AS c_i_47,\n    CASE     WHEN c_i_46 < -2.0 THEN 0     WHEN c_i_46 < -1.236351 THEN 1     WHEN c_i_46 < -1.182989 THEN 2     ELSE 3 END AS c_i_48,\n    CASE     WHEN c_i_47 < -2.0 THEN 0     WHEN c_i_47 < -0.3139175 THEN 1     WHEN c_i_47 < 0.2286314 THEN 2     ELSE 3 END AS c_i_49\n    FROM\n        <input_schema>.<input_table_view> t\n)\n\nSELECT\n    c_i_35 AS row_id,\n    c_i_48 AS mypca_pc_1,\n    c_i_49 AS mypca_pc_2,\n    c_i_39 AS target_class\nFROM\npreprocessing_steps t\n```\n\nif you want to inspect the pipeline as a chart\n```python\nmypipeline.plot_sankey()\n```\nOutput:\n\n![Sankey](docs/example_sankey.png)\n\n\n### 2.c persist transformed data as a view for later use\nthis is suitable and compliant with the Teradata ModelOps-Framework, where training.py and scoring.py \nare separate scripts.\n\n__in `training.py`:__\n```python\nview_train_transf = table_train+\"_transf_v\"\nview_score_transf = table_score+\"_transf_v\"\n\nmypipeline.fit(schema_name = myschema, \n               table_name = table_train)\n\n# 3. transform: create views for pipelines\n# DF_train_transf is already based on the newly created View\nDF_train_transf = mypipeline.transform(\n                        schema_name = myschema, \n                        table_name = table_train,\n                        # this triggeres the creation of a VIEW, thus the transformation \n                        # pipeline is persited\n                        create_replace_view = True, \n                        output_schema_name = myschema, \n                        output_view_name= view_train_transf)\n\n# 3.b create view for scoring table - no need for further inspection, thus no return\nmypipeline.transform(   schema_name = myschema, \n                        table_name = table_score,\n                        return_type = None,\n                        create_replace_view = True, \n                        output_schema_name = myschema, \n                        output_view_name= view_score_transf)\n\n# further steps:\n# Model training with DF_train_transf, \n# e.g. local and use BYOM, or in-DB with TD_DecisionForest\n# save model in DB\n```\n\n__in `scoring.py`:__\n```python\nview_score_transf = table_score+\"_transf_v\"\n# 1. get DataFrame based on View, transform is happening as per view definition\nDF_score_transf = tdml.DataFrame(tdml.in_schema(myschema, view_score_transf))\n\n# 2. Model Scoring with trained model \n# (e.g. PMMLPredict, TD_DecisionForestPredict,...)\n# get pointer for model from DB + execute scoring in DB\n\n# 3. Save Scored Data in DB\n```\n\n\n\n# History\n\n## v0.1.0 (2023-02-15)\n\n### added\n\n* First release on PyPI.\n* Pipeline with fit and transform functions\n* Preprocessor Functions\n    * Impute\n    * ImputeText\n    * TryCast\n    * Scale\n    * CutOff\n    * FixedWidthBinning\n    * ThresholdBinarizer\n    * ListBinarizer\n    * VariableWidthBinning\n    * LabelEncoder\n    * CustomTransformer\n* Notebooks for tests\n* Demo Notebook\n\n## v0.1.2 (2023-02-15)\n\n### fixed\n\n* added *.sql to MANIFEST.ln such that SQL templates are also part of the distribution.\n\n### changed\n\n* HISTORY and README file from rst to Markdown\n\n## v0.1.3 (2023-02-16)\n\n### added\n\n* Quickstart in README file\n\n## v0.1.4 (2023-02-17)\n\n### added\n\n* DecisionTreeBinning as Preprocessing function\n\n## v1.0.2 (2023-03-06)\n\nMajor Overhaul of tdprepview. It now supports transformations that change the schema of the Input DataFrame, like OneHotEncoding. This implementation is based on a directed acyclic graph (DAG). \n\n### added\n\n* plot_sankey() Function for Pipeliine class, which plots the DAG as sankey chart.\n* Preprocessing functions\n  * SimpleImputer (adapted from sklearn, based on Impute)\n  * IterativeImputer (adapted from sklearn)\n  * StandardScaler (adapted from sklearn, based on Scale)\n  * MaxAbsScaler (adapted from sklearn, based on Scale)\n  * MinMaxScaler (adapted from sklearn, based on Scale)\n  * RobustScaler (adapted from sklearn, based on Scale)\n  * Normalizer (adapted from sklearn)\n  * QuantileTransformer (adapted from sklearn, based on VariableWidthBinning)\n  * Binarizer (adapted from sklearn, based on ThresholdBinarizer)\n  * PolynomialFeatures (adapted from sklearn)\n  * OneHotEncoder (adapted from sklearn)\n  * PCA (adapted from sklearn)\n\n### changed\n\n* exctly one query is generated, with one WITH AS part, that contains all preprocessing, one final SELECT, that contains all final columns with the correct column names.\n* the steps in the steps argument of Pipeline are more flexible. They are either tuples with two elements (input_column(s), preprocessor(s)) or tuples with three elements (input_column(s), preprocessor(s), options)\n  * input_column(s): string, list of strings or _NEW_ dictionary for dynamic filtering:\n    * `{'pattern':<regex pattern to search for column names>}`\n    * `{'prefix':<string column names start with>}`\n    * `{'suffix':<string column names end with>}`\n    * `{'dtype_include':<list of tdtypes to include>}`\n    * `{'dtype_exclude':<list of tdtypes to exclude>}`\n    * filter conditions can be combined\n  * preprocessor(s): one or list of Preprocessors.\n  * options: dict for renaming column names after applying preprocessor. Useful for filtering them in a later step\n    * `{'prefix':<adds string to beginning of column names>}`\n    * `{'suffix':<adds string to end of column names>}`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "tdprepview,teradata,database,preprocessing,data engineering,data science",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tdprepview",
    "package_url": "https://pypi.org/project/tdprepview/",
    "platform": null,
    "project_url": "https://pypi.org/project/tdprepview/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tdprepview/1.0.2/",
    "requires_dist": [
      "teradataml (>=17.10.00.02)",
      "pandas",
      "numpy",
      "sklearn",
      "plotly",
      "seaborn"
    ],
    "requires_python": ">=3.8",
    "summary": "Python Package that creates Data Preparation Pipeline in Teradata-SQL in Views",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17175718,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91c42f30a85798e41c02863ba22056c72dcba4e6b4a768b4edbe5b723dd8c080",
          "md5": "acd8bc2411291bb6e5577d6a537cd299",
          "sha256": "025200ecb72424ecee4a84034debd0e7763501e869b5f6fc69af47fea737d943"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acd8bc2411291bb6e5577d6a537cd299",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 34049,
        "upload_time": "2023-02-15T14:30:12",
        "upload_time_iso_8601": "2023-02-15T14:30:12.952999Z",
        "url": "https://files.pythonhosted.org/packages/91/c4/2f30a85798e41c02863ba22056c72dcba4e6b4a768b4edbe5b723dd8c080/tdprepview-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b2207d21bf7ef5216bcd79f92f634c3f166a00e2c6f659c243715dac68b8cab",
          "md5": "564217d36d75c8127c1e8e6bf6168337",
          "sha256": "dabd478fbb01480829a9bcf4a53827e1e83de02ff126fa833cfb36c29714bc01"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "564217d36d75c8127c1e8e6bf6168337",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34247,
        "upload_time": "2023-02-15T14:30:14",
        "upload_time_iso_8601": "2023-02-15T14:30:14.494135Z",
        "url": "https://files.pythonhosted.org/packages/7b/22/07d21bf7ef5216bcd79f92f634c3f166a00e2c6f659c243715dac68b8cab/tdprepview-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "051227bb8cbd3b20a99344f8774d33a4de80156abba35b3eae8917ae160a9167",
          "md5": "b536738b98d63f6688de78c38f622ec9",
          "sha256": "491a1ecb21cd6d0a1d46946e77b00f692bb9cc3b34ca30190af90c2f7c8542ea"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b536738b98d63f6688de78c38f622ec9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 34866,
        "upload_time": "2023-02-15T15:24:58",
        "upload_time_iso_8601": "2023-02-15T15:24:58.432656Z",
        "url": "https://files.pythonhosted.org/packages/05/12/27bb8cbd3b20a99344f8774d33a4de80156abba35b3eae8917ae160a9167/tdprepview-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf57e747e0699ef5873150eabe2e78acdaff30c65da88fcb5f9371805fc9bc1",
          "md5": "ab22531accfc6c2bde4a9a3211117899",
          "sha256": "7b20a4fab1470a8b3f75d954c669fa5a4aba0a22354b32797124da5a2058996c"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ab22531accfc6c2bde4a9a3211117899",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34294,
        "upload_time": "2023-02-15T15:25:00",
        "upload_time_iso_8601": "2023-02-15T15:25:00.989882Z",
        "url": "https://files.pythonhosted.org/packages/6c/f5/7e747e0699ef5873150eabe2e78acdaff30c65da88fcb5f9371805fc9bc1/tdprepview-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e61550169ce37cced882d497df28592313de63c6350df751416bfe20826849d",
          "md5": "67ebe6c066dfa0922d667ae87dd0020c",
          "sha256": "a193d5e5533369a513b23d6eb05026e58bf40a73b7b40b9e427680e8b11047bb"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67ebe6c066dfa0922d667ae87dd0020c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 36552,
        "upload_time": "2023-02-16T15:30:31",
        "upload_time_iso_8601": "2023-02-16T15:30:31.314548Z",
        "url": "https://files.pythonhosted.org/packages/9e/61/550169ce37cced882d497df28592313de63c6350df751416bfe20826849d/tdprepview-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64c1a80b38ccb6777d7410e6f660bd94b94bf5a4443e03dc46e57a52b26aef4c",
          "md5": "11354ae1d29073865bbb937645a27037",
          "sha256": "284edcc6e72efb82ba0f07637a723f866b20f01e36eaaa5a9f0a0125225ef1f9"
        },
        "downloads": -1,
        "filename": "tdprepview-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "11354ae1d29073865bbb937645a27037",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 38182,
        "upload_time": "2023-02-16T15:30:33",
        "upload_time_iso_8601": "2023-02-16T15:30:33.020762Z",
        "url": "https://files.pythonhosted.org/packages/64/c1/a80b38ccb6777d7410e6f660bd94b94bf5a4443e03dc46e57a52b26aef4c/tdprepview-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f654485f9026110488b69cc4fd4019a78238c7719a514a095ec734e61255cd8",
          "md5": "c43a0c456fb6b63f4443f92814e6f218",
          "sha256": "5e0f1e8ec72108da42282f71c26bac8b0aa973935287af6e04c62e034b1d179e"
        },
        "downloads": -1,
        "filename": "tdprepview-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c43a0c456fb6b63f4443f92814e6f218",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 64167,
        "upload_time": "2023-03-06T13:38:36",
        "upload_time_iso_8601": "2023-03-06T13:38:36.650302Z",
        "url": "https://files.pythonhosted.org/packages/4f/65/4485f9026110488b69cc4fd4019a78238c7719a514a095ec734e61255cd8/tdprepview-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d58cf59d2b322d0b69e86c70314e92a96fc91662758655b554603b894152dea6",
          "md5": "5dad0783b553e664825b718be8a413b9",
          "sha256": "3dba58c57fd6cf6880ca5ec707fd8acced6b3e7d45a28c81a810b41b56592d84"
        },
        "downloads": -1,
        "filename": "tdprepview-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5dad0783b553e664825b718be8a413b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 115811,
        "upload_time": "2023-03-06T13:38:39",
        "upload_time_iso_8601": "2023-03-06T13:38:39.016518Z",
        "url": "https://files.pythonhosted.org/packages/d5/8c/f59d2b322d0b69e86c70314e92a96fc91662758655b554603b894152dea6/tdprepview-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f654485f9026110488b69cc4fd4019a78238c7719a514a095ec734e61255cd8",
        "md5": "c43a0c456fb6b63f4443f92814e6f218",
        "sha256": "5e0f1e8ec72108da42282f71c26bac8b0aa973935287af6e04c62e034b1d179e"
      },
      "downloads": -1,
      "filename": "tdprepview-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c43a0c456fb6b63f4443f92814e6f218",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 64167,
      "upload_time": "2023-03-06T13:38:36",
      "upload_time_iso_8601": "2023-03-06T13:38:36.650302Z",
      "url": "https://files.pythonhosted.org/packages/4f/65/4485f9026110488b69cc4fd4019a78238c7719a514a095ec734e61255cd8/tdprepview-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d58cf59d2b322d0b69e86c70314e92a96fc91662758655b554603b894152dea6",
        "md5": "5dad0783b553e664825b718be8a413b9",
        "sha256": "3dba58c57fd6cf6880ca5ec707fd8acced6b3e7d45a28c81a810b41b56592d84"
      },
      "downloads": -1,
      "filename": "tdprepview-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5dad0783b553e664825b718be8a413b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 115811,
      "upload_time": "2023-03-06T13:38:39",
      "upload_time_iso_8601": "2023-03-06T13:38:39.016518Z",
      "url": "https://files.pythonhosted.org/packages/d5/8c/f59d2b322d0b69e86c70314e92a96fc91662758655b554603b894152dea6/tdprepview-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}