{
  "info": {
    "author": "Conceptual Vision Consulting LLC",
    "author_email": "seroukhov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# <img src=\"https://uploads-ssl.webflow.com/5ea5d3315186cf5ec60c3ee4/5edf1c94ce4c859f2b188094_logo.svg\" alt=\"Pip.Services Logo\" width=\"200\"> <br/> SQLServer components for Python\r\n\r\nThis module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\r\n\r\nThe module contains the following packages:\r\n \r\n- **Build** - a standard factory for constructing components\r\n- **Connect** - instruments for configuring connections to the database.\r\n- **Persistence** - abstract classes for working with the database that can be used for connecting to collections and performing basic CRUD operations\r\n\r\n<a name=\"links\"></a> Quick links:\r\n\r\n* [ODBC Driver for SQL Server](https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15)\r\n* [Configuration](https://www.pipservices.org/recipies/configuration)\r\n* [API Reference](https://pip-services3-python.github.io/pip-services3-sqlserver-python/)\r\n* [Change Log](CHANGELOG.md)\r\n* [Get Help](https://www.pipservices.org/community/help)\r\n* [Contribute](https://www.pipservices.org/community/contribute)\r\n\r\n## Use\r\n\r\nInstall the Python package as\r\n```bash\r\npip install pip-services3-sqlserver\r\n```\r\n\r\nAs an example, lets create persistence for the following data object.\r\n\r\n```python\r\nclass MyObject(IStringIdentifiable):\r\n    def __init__(self, id: str = None, key: str = None, content: str = None):\r\n        self.id = id\r\n        self.key = key\r\n        self.content = content\r\n```\r\n\r\nThe persistence component shall implement the following interface with a basic set of CRUD operations.\r\n\r\n```python\r\nfrom abc import ABC\r\nfrom typing import Union, List\r\n\r\nfrom pip_services3_commons.data import IIdentifiable, PagingParams, FilterParams, DataPage\r\n\r\nclass IMyPersistence(ABC):\r\n    def get_page_by_filter(self, correlation_id: Optional[str], filter: Any,\r\n                           paging: Any) -> DataPage:\r\n        raise NotImplemented()\r\n\r\n    def get_one_by_id(self, correlation_id: Optional[str], id: str) -> MyObject:\r\n        raise NotImplemented()\r\n\r\n    def get_one_by_key(self, correlation_id: Optional[str], key: List[str]) -> MyObject:\r\n        raise NotImplemented()\r\n\r\n    def create(self, correlation_id: Optional[str], item: MyObject) -> MyObject:\r\n        raise NotImplemented()\r\n\r\n    def update(self, correlation_id: Optional[str], item: MyObject) -> MyObject:\r\n        raise NotImplemented()\r\n\r\n    def delete_by_id(self, correlation_id: Optional[str], id: str):\r\n        raise NotImplemented()\r\n```\r\n\r\nTo implement sql server persistence component you shall inherit `IdentifiableSqlServerPersistence`. \r\nMost CRUD operations will come from the base class. You only need to override `get_page_by_filter` method with a custom filter function.\r\nAnd implement a `get_one_by_key` custom persistence method that doesn't exist in the base class.\r\n\r\n```python\r\nclass MySqlServerPersistence(IdentifiableSqlServerPersistence):\r\n    def __init__(self):\r\n        super(MySqlServerPersistence, self).__init__('myobjects')\r\n        self._auto_create_object(\"CREATE TABLE [myobjects] ([id] VARCHAR(32) PRIMARY KEY, [key] VARCHAR(50), [value] NVARCHAR(255)\")\r\n        self._ensure_index(\"myobjects_key\", { '[key]': 1 }, { 'unique': True })\r\n\r\n    def __compose_filter(self, filter):\r\n        filter = filter or FilterParams()\r\n\r\n        criteria = []\r\n\r\n        id = filter.get_as_nullable_string('id')\r\n        if id is not None:\r\n            criteria.append(\"[id]='\" + id + \"'\")\r\n\r\n        temp_ids = filter.get_as_nullable_string('ids')\r\n        if temp_ids is not None:\r\n            ids = temp_ids.split(',')\r\n            criteria.append(\"[id] IN ('\" + \"','\".join(ids) + \"')\")\r\n\r\n        key = filter.get_as_nullable_string('key')\r\n        if key is not None:\r\n            criteria.append(\"[key]='\" + key + \"'\")\r\n\r\n        return \" AND \".join(criteria) if len(criteria) > 0 else None\r\n\r\n    def get_page_by_filter(self, correlation_id, filter, paging, sort, select):\r\n        return super().get_page_by_filter(correlation_id, self.__compose_filter(filter), paging, 'id', None)\r\n\r\n    def get_one_by_key(self, correlation_id, key):\r\n        query = \"SELECT * FROM \" + self._quoted_table_name() + \" WHERE [key]=?\"\r\n        params = [key]\r\n\r\n        result = self._request(query, params)\r\n        item = result[0] or None if result and result[0] else None\r\n\r\n        if item is None:\r\n            self._logger.trace(correlation_id, \"Nothing found from %s with key = %s\", self._table_name, key)\r\n        else:\r\n            self._logger.trace(correlation_id, \"Retrieved from %s with key = %s\", self._table_name, key)\r\n\r\n        item = self._convert_to_public(item)\r\n\r\n        return item\r\n```\r\n\r\nAlternatively you can store data in non-relational format using `IdentificableJsonSqlServerPersistence`.\r\nIt stores data in tables with two columns - `id` with unique object id and `data` with object data serialized as JSON.\r\nTo access data fields you shall use `JSON_VALUE([data],'$.field')` expression.\r\n\r\n```python\r\nfrom pip_services3_sqlserver.persistence.IdentifiableJsonSqlServerPersistence import IdentifiableJsonSqlServerPersistence\r\n\r\n\r\nclass MySqlServerPersistence(IdentifiableJsonSqlServerPersistence):\r\n    def __init__(self):\r\n        super(MySqlServerPersistence, self).__init__('myobjects')\r\n        self._ensure_table()\r\n        self._auto_create_object(\"ALTER TABLE [myobjects] ADD [data_key] AS JSON_VALUE([data],'$.key')\")\r\n        self._ensure_index(\"myobjects_key\", { 'data_key': 1 }, { 'unique': True })\r\n\r\n    def __compose_filter(self, filter):\r\n        filter = filter or FilterParams()\r\n\r\n        criteria = []\r\n\r\n        id = filter.get_as_nullable_string('id')\r\n        if id is not None:\r\n            criteria.append(\"JSON_VALUE([data],'$.id')='\" + id + \"'\")\r\n\r\n        temp_ids = filter.get_as_nullable_string('ids')\r\n        if temp_ids is not None:\r\n            ids = temp_ids.split(',')\r\n            criteria.append(\"JSON_VALUE([data],'$.id') IN ('\" + \"','\".join(ids) + \"')\")\r\n\r\n        key = filter.get_as_nullable_string('key')\r\n        if key is not None:\r\n            criteria.append(\"JSON_VALUE([data],'$.key')='\" + key + \"'\")\r\n\r\n        return \" AND \".join(criteria) if len(criteria) > 0 else None\r\n\r\n    def get_page_by_filter(self, correlation_id, filter, paging, sort, select):\r\n        return super().get_page_by_filter(correlation_id, self.__compose_filter(filter), paging, 'id', None)\r\n\r\n    def get_one_by_key(self, correlation_id, key):\r\n        query = \"SELECT * FROM \" + self._quoted_table_name() + \" WHERE JSON_VALUE([data],'$.key')=?\"\r\n        params = [key]\r\n\r\n        result = self._request(query, params)\r\n        item = result[0] or None if result and result[0] else None\r\n\r\n        if item is None:\r\n            self._logger.trace(correlation_id, \"Nothing found from %s with key = %s\", self._table_name, key)\r\n        else:\r\n            self._logger.trace(correlation_id, \"Retrieved from %s with key = %s\", self._table_name, key)\r\n\r\n        item = self._convert_to_public(item)\r\n\r\n        return item\r\n```\r\n\r\nConfiguration for your microservice that includes sqlserver persistence may look the following way.\r\n\r\n```yaml\r\n...\r\n{{#if SQLSERVER_ENABLED}}\r\n- descriptor: pip-services:connection:sqlserver:con1:1.0\r\n  table: {{SQLSERVER_TABLE}}{{#unless SQLSERVER_TABLE}}myobjects{{/unless}}\r\n  connection:\r\n    uri: {{{SQLSERVER_SERVICE_URI}}}\r\n    host: {{{SQLSERVER_SERVICE_HOST}}}{{#unless SQLSERVER_SERVICE_HOST}}localhost{{/unless}}\r\n    port: {{SQLSERVER_SERVICE_PORT}}{{#unless SQLSERVER_SERVICE_PORT}}1433{{/unless}}\r\n    database: {{SQLSERVER_DB}}{{#unless SQLSERVER_DB}}app{{/unless}}\r\n  credential:\r\n    username: {{SQLSERVER_USER}}\r\n    password: {{SQLSERVER_PASS}}\r\n    \r\n- descriptor: myservice:persistence:sqlserver:default:1.0\r\n  dependencies:\r\n    connection: pip-services:connection:sqlserver:con1:1.0\r\n{{/if}}\r\n...\r\n```\r\n\r\n## Develop\r\n\r\nFor development you shall install the following prerequisites:\r\n* Python 3.7+\r\n* Visual Studio Code or another IDE of your choice\r\n* Docker\r\n\r\nInstall dependencies:\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\nRun automated tests:\r\n```bash\r\npython test.py\r\n```\r\n\r\nGenerate API documentation:\r\n```bash\r\n./docgen.ps1\r\n```\r\n\r\nBefore committing changes run dockerized build and test as:\r\n```bash\r\n./build.ps1\r\n./test.ps1\r\n./clear.ps1\r\n```\r\n\r\n## Contacts\r\n\r\nThe library is created and maintained by:\r\n- **Sergey Seroukhov**\r\n- **Danil Prisiazhnyi**\r\n\r\nThe documentation is written by **Mark Makarychev**.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/pip-services3-python/pip-services3-sqlserver-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pip-services3-sqlserver",
    "package_url": "https://pypi.org/project/pip-services3-sqlserver/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pip-services3-sqlserver/",
    "project_urls": {
      "Homepage": "http://github.com/pip-services3-python/pip-services3-sqlserver-python"
    },
    "release_url": "https://pypi.org/project/pip-services3-sqlserver/3.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SqlServer persistence components for Pip.Services in Python",
    "version": "3.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14837716,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6565650795ca67367820cdc199ccaee0de1c16c87ba00d0533b4e7a039ea434a",
          "md5": "ff4c3677075e9f734a1c7fb4541922b2",
          "sha256": "58ca66ccc34dc78ee99330a53cb3d792c41d14c9e9ae633c335e6f17cacc6d03"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ff4c3677075e9f734a1c7fb4541922b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20778,
        "upload_time": "2021-03-04T00:12:03",
        "upload_time_iso_8601": "2021-03-04T00:12:03.796243Z",
        "url": "https://files.pythonhosted.org/packages/65/65/650795ca67367820cdc199ccaee0de1c16c87ba00d0533b4e7a039ea434a/pip_services3_sqlserver-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfdbe3bb0f7db749531ffaf604166a0fe59e3def146fb0c20a8a928dc744cad2",
          "md5": "2fba33a8ce4911aff92188995c6b7860",
          "sha256": "334b2e77b7b197ceec489042df8096d0eaf13aef3c9aab0c9b33c51dcd212e57"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2fba33a8ce4911aff92188995c6b7860",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21478,
        "upload_time": "2021-06-10T12:44:12",
        "upload_time_iso_8601": "2021-06-10T12:44:12.575014Z",
        "url": "https://files.pythonhosted.org/packages/cf/db/e3bb0f7db749531ffaf604166a0fe59e3def146fb0c20a8a928dc744cad2/pip_services3_sqlserver-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23c4bcef91f279db1fba30b0d2fed2c1f5e236a9bdf59a9ff87fb8328c1a1234",
          "md5": "331998e89efde193e58d664c41385d81",
          "sha256": "b427c836dc287924be25d45d8000afd4eea5fadf78fe65d19c04262ffed57e8a"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "331998e89efde193e58d664c41385d81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21498,
        "upload_time": "2021-06-10T12:44:14",
        "upload_time_iso_8601": "2021-06-10T12:44:14.126831Z",
        "url": "https://files.pythonhosted.org/packages/23/c4/bcef91f279db1fba30b0d2fed2c1f5e236a9bdf59a9ff87fb8328c1a1234/pip_services3_sqlserver-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5219e00f4025a8834e0d35106aed55e499d80b450e8a091f2f0b585cf6893b12",
          "md5": "700c840c366a61c699e01884eee81de9",
          "sha256": "3323e5cee56976c05a3c285893066c8463a1c7968e47b49e9d1b730f8d4df8fb"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "700c840c366a61c699e01884eee81de9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21993,
        "upload_time": "2021-08-29T18:04:27",
        "upload_time_iso_8601": "2021-08-29T18:04:27.107835Z",
        "url": "https://files.pythonhosted.org/packages/52/19/e00f4025a8834e0d35106aed55e499d80b450e8a091f2f0b585cf6893b12/pip_services3_sqlserver-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24102c5105540f6b0e1c2086d956beb521f5e2f6d71932d1547a28e0a82da8e8",
          "md5": "43c6af8a6055a69b772a70ae9a88b236",
          "sha256": "e91214be9733c3d1adfa12106e466fab3479b387e6fc343070ad0315202a3fe8"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "43c6af8a6055a69b772a70ae9a88b236",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22104,
        "upload_time": "2021-11-22T13:14:40",
        "upload_time_iso_8601": "2021-11-22T13:14:40.558886Z",
        "url": "https://files.pythonhosted.org/packages/24/10/2c5105540f6b0e1c2086d956beb521f5e2f6d71932d1547a28e0a82da8e8/pip_services3_sqlserver-3.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cae35389067e40ca543f779d1abc341753797358f7947060975435ace0d1d78",
          "md5": "4c8701b1851e321ac8c331bf4ce1bb6f",
          "sha256": "b17b6e3bca0d6caff6cb7238b8558a424380d3f3d7f3df02ac2155fca510d0f7"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4c8701b1851e321ac8c331bf4ce1bb6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22182,
        "upload_time": "2021-11-25T23:22:04",
        "upload_time_iso_8601": "2021-11-25T23:22:04.198908Z",
        "url": "https://files.pythonhosted.org/packages/4c/ae/35389067e40ca543f779d1abc341753797358f7947060975435ace0d1d78/pip_services3_sqlserver-3.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d18d995e91f7d3c37c04e968db3a99a4af1d86ce537874f26ce587b71a0326b",
          "md5": "765822adb91ddafa10c848ea01e240c6",
          "sha256": "66d433c8ebae661ef418f5fc69e2b7cb9d6bca540e42bb2954aca8eebf4874c4"
        },
        "downloads": -1,
        "filename": "pip_services3_sqlserver-3.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "765822adb91ddafa10c848ea01e240c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22194,
        "upload_time": "2021-11-26T00:05:31",
        "upload_time_iso_8601": "2021-11-26T00:05:31.229713Z",
        "url": "https://files.pythonhosted.org/packages/4d/18/d995e91f7d3c37c04e968db3a99a4af1d86ce537874f26ce587b71a0326b/pip_services3_sqlserver-3.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d18d995e91f7d3c37c04e968db3a99a4af1d86ce537874f26ce587b71a0326b",
        "md5": "765822adb91ddafa10c848ea01e240c6",
        "sha256": "66d433c8ebae661ef418f5fc69e2b7cb9d6bca540e42bb2954aca8eebf4874c4"
      },
      "downloads": -1,
      "filename": "pip_services3_sqlserver-3.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "765822adb91ddafa10c848ea01e240c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22194,
      "upload_time": "2021-11-26T00:05:31",
      "upload_time_iso_8601": "2021-11-26T00:05:31.229713Z",
      "url": "https://files.pythonhosted.org/packages/4d/18/d995e91f7d3c37c04e968db3a99a4af1d86ce537874f26ce587b71a0326b/pip_services3_sqlserver-3.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}