{
  "info": {
    "author": "ret2happy",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===============================\nxmljson advanced\n===============================\n\n.. image:: https://img.shields.io/travis/sanand0/xmljson.svg\n        :target: https://travis-ci.org/sanand0/xmljson\n\n.. image:: https://img.shields.io/pypi/v/xmljson.svg\n        :target: https://pypi.python.org/pypi/xmljson\n\nThis library is not actively maintained. Alternatives are `xmltodict`_ and `untangle`_.\nUse only if you need to parse using specific XML to JSON `conventions`_.\n\n.. _conventions: http://wiki.open311.org/JSON_and_XML_Conversion/\n.. _xmltodict: https://github.com/martinblech/xmltodict\n.. _untangle: https://untangle.readthedocs.io/en/latest/\n\nxmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.\n\nAbout\n-----\n\nXML can be converted to a data structure (such as JSON) and back. For example::\n\n    <employees>\n        <person>\n            <name value=\"Alice\"/>\n        </person>\n        <person>\n            <name value=\"Bob\"/>\n        </person>\n    </employees>\n\ncan be converted into this data structure (which also a valid JSON object)::\n\n    {\n        \"employees\": [{\n            \"person\": {\n                \"name\": {\n                    \"@value\": \"Alice\"\n                }\n            }\n        }, {\n            \"person\": {\n                \"name\": {\n                    \"@value\": \"Bob\"\n                }\n            }\n        }]\n    }\n\nThis uses the `BadgerFish`_ convention that prefixes attributes with ``@``.\nThe conventions supported by this library are:\n\n* `Abdera`_: Use ``\"attributes\"`` for attributes, ``\"children\"`` for nodes\n* `BadgerFish`_: Use ``\"$\"`` for text content, ``@`` to prefix attributes\n* `Cobra`_: Use ``\"attributes\"`` for sorted attributes (even when empty), ``\"children\"`` for nodes, values are strings\n* `GData`_: Use ``\"$t\"`` for text content, attributes added as-is\n* `Parker`_: Use tail nodes for text content, ignore attributes\n* `Yahoo`_ Use ``\"content\"`` for text content, attributes added as-is\n\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\n.. _BadgerFish: http://www.sklar.com/badgerfish/\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\n.. _GData: http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention\n.. _Parker: https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\n\n\nConvert data to XML\n-------------------\n\nTo convert from a data structure to XML using the BadgerFish convention::\n\n    >>> from xmljson import badgerfish as bf\n    >>> bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})\n\nThis returns an **array** of `etree.Element`_ structures. In this case, the\nresult is identical to::\n\n    >>> from xml.etree.ElementTree import fromstring\n    >>> [fromstring('<p id=\"main\">Hello<b>bold</b></p>')]\n\n.. _etree.Element: http://effbot.org/zone/element-index.htm\n\nThe result can be inserted into any existing root `etree.Element`_::\n\n    >>> from xml.etree.ElementTree import Element, tostring\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))\n    >>> tostring(result)\n    '<root><p id=\"main\"/></root>'\n\nThis includes `lxml.html <http://lxml.de/lxmlhtml.html>`_ as well::\n\n    >>> from lxml.html import Element, tostring\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))\n    >>> tostring(result, doctype='<!DOCTYPE html>')\n    '<!DOCTYPE html>\\n<html><p id=\"main\"></p></html>'\n\nFor ease of use, strings are treated as node text. For example, both the\nfollowing are the same::\n\n    >>> bf.etree({'p': {'$': 'paragraph text'}})\n    >>> bf.etree({'p': 'paragraph text'})\n\nBy default, non-string values are converted to strings using Python's ``str``,\nexcept for booleans -- which are converted into ``true`` and ``false`` (lower\ncase). Override this behaviour using ``xml_fromstring``::\n\n    >>> tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))\n    '<root><y>true</y><x>1.23</x></root>'\n    >>> from xmljson import BadgerFish              # import the class\n    >>> bf_str = BadgerFish(xml_tostring=str)       # convert using str()\n    >>> tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))\n    '<root><y>True</y><x>1.23</x></root>'\n\nIf the data contains invalid XML keys, these can be dropped via\n``invalid_tags='drop'`` in the constructor::\n\n    >>> bf_drop = BadgerFish(invalid_tags='drop')\n    >>> data = bf_drop.etree({'$': '1', 'x': '1'}, root=Element('root'))    # Drops invalid <$> tag\n    >>> tostring(data)\n    '<root>1<x>1</x></root>'\n\n\nConvert XML to data\n-------------------\n\nTo convert from XML to a data structure using the BadgerFish convention::\n\n    >>> bf.data(fromstring('<p id=\"main\">Hello<b>bold</b></p>'))\n    {\"p\": {\"$\": \"Hello\", \"@id\": \"main\", \"b\": {\"$\": \"bold\"}}}\n\nTo convert this to JSON, use::\n\n    >>> from json import dumps\n    >>> dumps(bf.data(fromstring('<p id=\"main\">Hello<b>bold</b></p>')))\n    '{\"p\": {\"b\": {\"$\": \"bold\"}, \"@id\": \"main\", \"$\": \"Hello\"}}'\n\nTo preserve the order of attributes and children, specify the ``dict_type`` as\n``OrderedDict`` (or any other dictionary-like type) in the constructor::\n\n    >>> from collections import OrderedDict\n    >>> from xmljson import BadgerFish              # import the class\n    >>> bf = BadgerFish(dict_type=OrderedDict)      # pick dict class\n\nBy default, values are parsed into boolean, int or float where possible (except\nin the Yahoo method). Override this behaviour using ``xml_fromstring``::\n\n    >>> dumps(bf.data(fromstring('<x>1</x>')))\n    '{\"x\": {\"$\": 1}}'\n    >>> bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings\n    >>> dumps(bf_str.data(fromstring('<x>1</x>')))\n    '{\"x\": {\"$\": \"1\"}}'\n    >>> bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser\n    '{\"x\": {\"$\": \"\\'1\\'\"}}'\n\n``xml_fromstring`` can be any custom function that takes a string and returns a\nvalue. In the example below, only the integer ``1`` is converted to an integer.\nEverything else is retained as a float::\n\n    >>> def convert_only_int(val):\n    ...     return int(val) if val.isdigit() else val\n    >>> bf_int = BadgerFish(xml_fromstring=convert_only_int)\n    >>> dumps(bf_int.data(fromstring('<p><x>1</x><y>2.5</y><z>NaN</z></p>')))\n    '{\"p\": {\"x\": {\"$\": 1}, \"y\": {\"$\": \"2.5\"}, \"z\": {\"$\": \"NaN\"}}}'\n\n\nConventions\n-----------\n\nTo use a different conversion method, replace ``BadgerFish`` with one of the\nother classes. Currently, these are supported::\n\n    >>> from xmljson import abdera          # == xmljson.Abdera()\n    >>> from xmljson import badgerfish      # == xmljson.BadgerFish()\n    >>> from xmljson import cobra           # == xmljson.Cobra()\n    >>> from xmljson import gdata           # == xmljson.GData()\n    >>> from xmljson import parker          # == xmljson.Parker()\n    >>> from xmljson import yahoo           # == xmljson.Yahoo()\n\n\nOptions\n-------\n\nConventions may support additional options.\n\nThe `Parker`_ convention absorbs the root element by default.\n``parker.data(preserve_root=True)`` preserves the root instance::\n\n    >>> from xmljson import parker, Parker\n    >>> from xml.etree.ElementTree import fromstring\n    >>> from json import dumps\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>')))\n    '{\"a\": 1, \"b\": 2}'\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>'), preserve_root=True))\n    '{\"x\": {\"a\": 1, \"b\": 2}}'\n\n\nInstallation\n------------\n\nThis is a pure-Python package built for Python 2.7+ and Python 3.0+. To set up::\n\n    pip install xmljson\n\n\nSimple CLI utility\n------------------\n\nAfter installation, you can benefit from using this package as simple CLI utility. By now only XML to JSON conversion supported. Example::\n\n    $ python -m xmljson -h\n    usage: xmljson [-h] [-o OUT_FILE]\n                [-d {abdera,badgerfish,cobra,gdata,parker,xmldata,yahoo}]\n                [in_file]\n\n    positional arguments:\n    in_file               defaults to stdin\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -o OUT_FILE, --out_file OUT_FILE\n                            defaults to stdout\n    -d {abdera,badgerfish,...}, --dialect {...}\n                            defaults to parker\n\n    $ python -m xmljson -d parker tests/mydata.xml\n    {\n      \"foo\": \"spam\",\n      \"bar\": 42\n    }\n\nThis is a typical UNIX filter program: it reads file (or ``stdin``), processes it in some way (convert XML to JSON in this case), then prints it to ``stdout`` (or file). Example with pipe::\n\n    $ some-xml-producer | python -m xmljson | some-json-processor\n\nThere is also ``pip``'s ``console_script`` entry-point, you can call this utility as ``xml2json``::\n\n    $ xml2json -d abdera mydata.xml\n\nRoadmap\n-------\n\n* Test cases for Unicode\n* Support for namespaces and namespace prefixes\n* Support XML comments\n\n\n\n\nHistory\n-------\n0.2.0 (21 Nov 2018)\n~~~~~~~~~~~~~~~~~~~~~\n- ``xmljson`` command line script converts from XML to JSON (@tribals)\n- ``invalid_tags='drop'`` in the constructor drops invalid XML tags in ``.etree()`` (@Zurga)\n- Bugfix: Parker converts `{'x': null}` to `<x></x>` instead of `<x>None</x>` (@jorndoe #29)\n\n0.1.9 (1 Aug 2017)\n~~~~~~~~~~~~~~~~~~\n\n- Bugfix and test cases for multiple nested children in Abdera_ convention\n\nThanks to @mukultaneja\n\n0.1.8 (9 May 2017)\n~~~~~~~~~~~~~~~~~~\n\n- Add Abdera_ and Cobra_ conventions\n- Add ``Parker.data(preserve_root=True)`` option to preserve root element in\n  Parker convention.\n\nThanks to @dagwieers\n\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\n\n0.1.6 (18 Feb 2016)\n~~~~~~~~~~~~~~~~~~~\n\n- Add ``xml_fromstring=`` and ``xml_tostring=`` parameters to constructor to\n  customise string conversion from and to XML.\n\n\n0.1.5 (23 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Add the Yahoo_ XML to JSON conversion method.\n\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\n\n0.1.4 (20 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Fix ``GData.etree()`` conversion of attributes. (They were ignored. They\n  should be added as-is.)\n\n0.1.3 (20 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Simplify ``{'p': {'$': 'text'}}`` to ``{'p': 'text'}`` in BadgerFish and GData\n  conventions.\n- Add test cases for ``.etree()`` -- mainly from the `MDN JXON article`_.\n- ``dict_type``/``list_type`` do not need to inherit from ``dict``/``list``\n\n.. _MDN JXON article: https://developer.mozilla.org/en-US/docs/JXON#In_summary\n\n0.1.2 (18 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Always use the ``dict_type`` class to create dictionaries (which defaults to\n  ``OrderedDict`` to preserve order of keys)\n- Update documentation, test cases\n- Remove support for Python 2.6 (since we need ``collections.Counter``)\n- Make the `Travis CI build`_ pass\n\n.. _Travis CI build: https://travis-ci.org/sanand0/xmljson\n\n0.1.1 (18 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Convert ``true``, ``false`` and numeric values from strings to Python types\n- ``xmljson.parker.data()`` is compliant with Parker convention (bugs resolved)\n\n0.1.0 (15 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Two-way conversions via BadgerFish, GData and Parker conventions.\n- First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sanand0/xmljson",
    "keywords": "xmljson_adv",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xmljson-adv",
    "package_url": "https://pypi.org/project/xmljson-adv/",
    "platform": "",
    "project_url": "https://pypi.org/project/xmljson-adv/",
    "project_urls": {
      "Homepage": "https://github.com/sanand0/xmljson"
    },
    "release_url": "https://pypi.org/project/xmljson-adv/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Converts XML into JSON/Python dicts/arrays and vice-versa. (Modified Version)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12527168,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbf091d0b149b45e738f8a4f334e9285e4c65e1ef6e12464bc22ed5258955d61",
          "md5": "61aa15f86666a20b9824c9716ddda3ff",
          "sha256": "d3798a0655bc1238a63a3b864dc8d1404a78f702d4280d01e80b651f241be9ea"
        },
        "downloads": -1,
        "filename": "xmljson_adv-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61aa15f86666a20b9824c9716ddda3ff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10189,
        "upload_time": "2022-01-10T10:31:51",
        "upload_time_iso_8601": "2022-01-10T10:31:51.640792Z",
        "url": "https://files.pythonhosted.org/packages/bb/f0/91d0b149b45e738f8a4f334e9285e4c65e1ef6e12464bc22ed5258955d61/xmljson_adv-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537a4931a0253d70dc749aafd56f913f744d34984d029db7720339365826aea0",
          "md5": "107c87793c3daf1dff976d74dc9e74a9",
          "sha256": "bb4ef413b24b59bad41d3b906d3002b1d7a36f08f2e8fb5425e41a6c546cbfe6"
        },
        "downloads": -1,
        "filename": "xmljson_adv-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "107c87793c3daf1dff976d74dc9e74a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28507,
        "upload_time": "2022-01-10T10:31:53",
        "upload_time_iso_8601": "2022-01-10T10:31:53.902379Z",
        "url": "https://files.pythonhosted.org/packages/53/7a/4931a0253d70dc749aafd56f913f744d34984d029db7720339365826aea0/xmljson_adv-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbf091d0b149b45e738f8a4f334e9285e4c65e1ef6e12464bc22ed5258955d61",
        "md5": "61aa15f86666a20b9824c9716ddda3ff",
        "sha256": "d3798a0655bc1238a63a3b864dc8d1404a78f702d4280d01e80b651f241be9ea"
      },
      "downloads": -1,
      "filename": "xmljson_adv-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "61aa15f86666a20b9824c9716ddda3ff",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10189,
      "upload_time": "2022-01-10T10:31:51",
      "upload_time_iso_8601": "2022-01-10T10:31:51.640792Z",
      "url": "https://files.pythonhosted.org/packages/bb/f0/91d0b149b45e738f8a4f334e9285e4c65e1ef6e12464bc22ed5258955d61/xmljson_adv-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "537a4931a0253d70dc749aafd56f913f744d34984d029db7720339365826aea0",
        "md5": "107c87793c3daf1dff976d74dc9e74a9",
        "sha256": "bb4ef413b24b59bad41d3b906d3002b1d7a36f08f2e8fb5425e41a6c546cbfe6"
      },
      "downloads": -1,
      "filename": "xmljson_adv-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "107c87793c3daf1dff976d74dc9e74a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28507,
      "upload_time": "2022-01-10T10:31:53",
      "upload_time_iso_8601": "2022-01-10T10:31:53.902379Z",
      "url": "https://files.pythonhosted.org/packages/53/7a/4931a0253d70dc749aafd56f913f744d34984d029db7720339365826aea0/xmljson_adv-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}