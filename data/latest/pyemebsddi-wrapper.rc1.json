{
  "info": {
    "author": "Zihao Ding",
    "author_email": "ding@cmu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# PyEMEBSDDI_wrapper\n[**PyEMEBSDDI_wrapper**](https://github.com/Darkhunter9/PyEMEBSDDI_wrapper) is a high level wrapper for [**PyEMEBSDDI**](https://github.com/EMsoft-org/EMsoft/tree/develop/Source/EMsoftWrapperLib/DictionaryIndexing) module\nunder [**EMsoft**](https://github.com/EMsoft-org/EMsoft), providing Python wrappers for Dictionary Indexing (DI) functions.\n\nThe objective is to allow users to apply dictionary indexing and refinement conveniently inside Python.\n\nWhile **PyEMEBSDDI** maintain the same arguments as original functions written in Fortran, **PyEMEBSDDI_wrapper** offers a more intuitive method to pass all parameters, high efficient multi-GPU support, and process EBSD patterns.\n\n\n## Features\n1. Using nml file to pass all parameters;\n2. Provide useful EBSD pattern processing methods;\n3. High efficient multi-GPU support for PyEMEBSDDI;\n\n\n## Source\n1. [**EMsoft**](https://github.com/EMsoft-org/EMsoft) github page;\n2. [**PyEMEBSDDI**](https://github.com/EMsoft-org/EMsoft/tree/develop/Source/EMsoftWrapperLib/DictionaryIndexing) github page (under **EMsoft**)\n3. [**PyEMEBSDDI_wrapper**](https://github.com/Darkhunter9/PyEMEBSDDI_wrapper) github page;\n4. [**PyEMEBSDDI_wrapper**](https://pypi.org/project/PyEMEBSDDI-wrapper/) PyPI page;\n\n[This site](http://vbff.materials.cmu.edu/EMsoft) conveniently brings all EMsoft stuff together in one place.\n\n<!-- To obtain higher-level Python wrappers for PyEMEBSDDI, please refer to the project repository [**EBSDDI-CNN**](https://github.com/Darkhunter9/EBSDDI_CNN). -->\n\n\n## Contributors\n- [**Zihao Ding**](https://github.com/Darkhunter9)\n- [**Elena Pascal**](https://github.com/elena-pascal)\n\n\n## Installation\nYou should have **EMsoft** with **PyEMEBSDDI** built before installing **PyEMEBSDDI_wrapper**. Refer to [this site](https://github.com/EMsoft-org/EMsoft) and [this site](https://github.com/EMsoft-org/EMsoft/tree/develop/Source/EMsoftWrapperLib/DictionaryIndexing) for building directions.\n\n\nBesides prerequisites in building [**EMsoft**](https://github.com/EMsoft-org/EMsoft) and [**EMsoftSuperbuild**](https://github.com/EMsoft-org/EMsoftSuperbuild), the following packages are also required:\n\n| Package  | Version  |\n| :------------ |:---------------|\n| [Python](https://www.python.org/)      | &ge; 3.7    |\n| [numpy](https://numpy.org/)            | &ge; 1.18.1 |\n| [h5py](http://docs.h5py.org/en/stable/)            | &ge; 2.10.0   |\n| [f90nml](https://pypi.org/project/f90nml/)         | &ge; 1.2      |\n| [matplotlib](https://matplotlib.org/)              | &ge; 3.2.2    |\n| [opencv](https://pypi.org/project/opencv-python/)  | &ge; 4.2.0.34 |\n\nThey can be installed through pip or conda to current Python environment.\n\nThree ways to install PyEMEBSDDI_wrapper package (You need to provide the directory to EMsoft Bin folder):\n1. Without downloaded package:\n\n`pip install PyEMEBSDDI_wrapper --install-option=\"--EMsoftBinDIR=abs/dir/to/EMsoft/Bin\"`\n\n2. With downloaded package:\n\n`pip install . --install-option=\"--EMsoftBinDIR=abs/dir/to/EMsoft/Bin\"`\n\n3. With downloaded package:\n\n`python3 setup.py --EMsoftBinDIR=\"abs/dir/to/EMsoft/Bin\"`\n\n\n## How to use?\n\nTo import **PyEMEBSDDI_wrapper** into Python program:\n```python\nimport PyEMEBSDDI_wrapper\n# utils functions\nfrom PyEMEBSDDI_wrapper.utils import *\n# two main high-level wrapper functions\nfrom PyEMEBSDDI_wrapper import PyEMEBSDDI_wrapper, PyEMEBSDRefine_wrapper\n```\n\n\n## API Reference\nThe module is composed of two parts: high-level wrapper functions and utility functions. \n\nUtility functions include conversion between Euler angles and quaternions, and many useful pattern processing methods.\n\nAPI list:\n\n**`PyEMEBSDDI_wrapper.utils`**\n1. `eu2qu(eu)`\n2. `qu2eu(qu)`\n3. `binning(img, bsize=(2, 2))`\n4. `circularmask(img)`\n5. `squaremask(img)`\n6. `bac(img, a=1, b=0)`\n7. `autobac(img)`\n8. `gamma_trans(img, gamma)`\n9. `autogamma(img)`\n10. `clahe(img, limit=10, tileGridSize=(10, 10))`\n11. `poisson_noise(img, c=1.)`\n\n**`PyEMEBSDDI_wrapper`**\n1. `PyEMEBSDDI_wrapper(epatterns, dpatterns, orientations, nml_dir, epatterns_processing=None, dpatterns_processing=None, gpu=None, refine=False)`\n2. `PyEMEBSDRefine_wrapper(epatterns, startOrientations, startdps, variants, nml_dir, h5_dir, epatterns_processing=None)`\n\n**`PyEMEBSDDI_wrapper.utils`**\n--------------------------------\n\n`eu2qu(eu)`\n\nConvert Euler angles group to quaternions. Default value of eps = 1.\n\nInput:\n- Euler angles: array-like, float, (3,);\n  \nOutput:\n- Quaternions, 1darray, float, (4,);\n\n`qu2eu(qu)`\n\nConvert quaternions to Euler angles group. Default value of eps = 1.\n\nInput:\n- Quaternions: array-like, float, (4,);\n\nOutput:\n- Euler angles, 1darray, float, (3,);\n\n`binning(img, bsize=(2, 2))`\n\nBin images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n- bsize: list of 2 ints, bin size at axis of row and column;\n\nOutput:\n- img_binning: 3darray, 8bit, (n, floor(numsx/bsize[0]), floor(numsy/bsize[1]));\n\n`circularmask(img)`\n\nApply circularmask to images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n\nOutput:\n- img_with_mask: 3darray, 8bit, (n, numsx, numsy);\n\n`squaremask(img)`\n\nApply squaremask to images. Will change the size.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n\nOutput:\n- img_with_mask: 3darray, 8bit, (n, numsx_mask, numsy_mask);\n\n`bac(img, a=1, b=0)`\n\nAdjust brigtness and contrast of images. img = a*img+b.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n- a: contrast coefficient, float;\n- b: brigtness coefficient, float;\n\nOutput:\n- img_bac: 3darray, 8bit, (n, numsx, numsy);\n\n`autobac(img)`\n\nAutomatically adjust brigtness and contrast of images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n\nOutput:\n- img_bac: 3darray, 8bit, (n, numsx, numsy);\n\n`gamma_trans(img, gamma)`\n\nAdjust gamma value of images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n- gamma: gamma coefficient;\n\nOutput:\n- img_gamma: 3darray, 8bit, (n, numsx, numsy);\n\n`autogamma(img)`\n\nAutomatically adjust gamma value of images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n\nOutput:\n- img_gamma: 3darray, 8bit, (n, numsx, numsy);\n\n`clahe(img, limit=10, tileGridSize=(10, 10))`\n\nApply contrast limit adaptive histogram equalization.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n- limit: limit of count in each value bin;\n- tileGridSize: tuple of 2 ints, number of grid at axis of row and column;\n\nOutput:\n- img_clahe: 3darray, 8bit, (n, numsx, numsy);\n\n`poisson_noise(img, c=1.)`\n\nApply poisson noise on images.\n\nInput:\n- img: 3darray, 8bit, (n, numsx, numsy);\n- c: poisson coefficient. Smaller c brings higher noise level;\n\nOutput:\n- img_poisson: 3darray, 8bit, (n, numsx, numsy);\n\n\n**`PyEMEBSDDI_wrapper`**\n--------------------------------\nTwo NML templates `PyEMEBSDDI.nml` and `PyEMEBSDRefine.nml` are provided in the package.\n\n`PyEMEBSDDI_wrapper(epatterns, dpatterns, orientations, nml_dir, epatterns_processing=None, dpatterns_processing=None, gpu=None, refine=False)`\n\nHigh-level wrapper for PyEMEBSDDI.\n\nInput:\n- epatterns: experimental patterns, 3darray, 8bit, (n, numsx, numsy);\n- dpatterns: dictionary patterns, 3darray, 8bit, (n, numsx, numsy);\n- orientations: orientations of dictionary patterns, unit quaternions, 2darray, float, (n, 4);\n- nml_dir: PyEMEBSDDI nml file dir, string;\n- epatterns_processing: img processing recipe for epatterns, list of strings;\n- dpatterns_processing: img processing recipe for dpatterns, list of strings;\n\n  All methods in `PyEMEBSDDI_wrapper.utils` can be applied;\n\n  Example: `['clahe(10, (4, 4))','circularmask()',]` (exclude `img` parameter from each method);\n\n- gpu: multiple gpu choice, None or list of device id (int);\n\n  If single gpu, `gpu = None` or `len(gpu) = 1`, actual gpu used is determined by devid (ipar[5]);\n\n  If multiple gpu, gpu is the list of devid of all gpu used;\n\n  Attention: full use of multiplt gpu needs more cpu resource and memory!\n\n- refine: whether to refine indexing, bool, currently unavailable;\n\nOutput:\n\n`[pred, resultmain]`\n- pred: orientations output by PyEMEBSDDI, 2darray, float, (n,4);\n- resultmain: dot products for each orientation prediction, 1darray, float, (n,);\n\n`PyEMEBSDRefine_wrapper(epatterns, startOrientations, startdps, variants, nml_dir, h5_dir, epatterns_processing=None)`\n\nHigh-level wrapper for PyEMEBSDRefine.\n\nInput:\n- epatterns: experimental patterns, 3darray, 8bit, (n, numsx, numsy);\n- startOrientations: initial orientation predictions in form of unit quaternions, 2darray, float, (n, 4);\n- startdps: initial dot products for each orientation prediction, 1darray, float, (n,);\n- variants: quaternions defining the potential pseudosymmetry variants, 2darray, float, (m, 4);\n\n  default value is `np.array([[1,0,0,0]])` (pseudosymmetry not involved);\n\n- nml_dir: nml file dir, string;\n- h5_dir: h5 file dir that stores master pattern data, generated by EMEBSD, string;\n- epatterns_processing: img processing recipe for epatterns, list of strings;\n\nOutput:\n- orientations output by PyEMEBSDRefine, 2darray, float, (n,4);\n\n\n## Contribute\nHave you spotted a typo, would you like to fix a bug, or is there something youâ€™d like to suggest? You are welcome to open a pull request. We will do our best to review your proposal in due time.\n\nIn addition, you can also email [**Zihao**](mailto:ding@cmu.edu) should you have any questions or suggestions.\n\n## Credits\nWe want to express our sincere thanks to those who provided help during the development of this project (in no particular order):\n\n- Saransh Singh\n- Michael Jackson\n\n## License\n```\nBSD 3-Clause License\n\nCopyright (c) 2020, Zihao Ding, Marc De Graef Research Group/Carnegie Mellon University\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Darkhunter9/PyEMEBSDDI_wrapper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyEMEBSDDI-wrapper",
    "package_url": "https://pypi.org/project/PyEMEBSDDI-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyEMEBSDDI-wrapper/",
    "project_urls": {
      "Bug Reports": "https://github.com/Darkhunter9/PyEMEBSDDI_wrapper/issues",
      "Funding": "http://vbff.materials.cmu.edu/EMsoft/",
      "Homepage": "https://github.com/Darkhunter9/PyEMEBSDDI_wrapper",
      "Source": "https://github.com/Darkhunter9/PyEMEBSDDI_wrapper"
    },
    "release_url": "https://pypi.org/project/PyEMEBSDDI-wrapper/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python high level wrapper for PyEMEBSDDI under EMsoft",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7582991,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f803c1fb708b20ea14c29e0542b065ae148ad2c464eaffe47d765b2afaeff447",
          "md5": "9c40588ff51bc1e5198dada60071b134",
          "sha256": "686b04081df7c1854e70292f53808c6d2da7cdb156a5391a7f33820b1329ca0e"
        },
        "downloads": -1,
        "filename": "PyEMEBSDDI_wrapper-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c40588ff51bc1e5198dada60071b134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19340,
        "upload_time": "2020-06-28T20:51:14",
        "upload_time_iso_8601": "2020-06-28T20:51:14.996723Z",
        "url": "https://files.pythonhosted.org/packages/f8/03/c1fb708b20ea14c29e0542b065ae148ad2c464eaffe47d765b2afaeff447/PyEMEBSDDI_wrapper-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f803c1fb708b20ea14c29e0542b065ae148ad2c464eaffe47d765b2afaeff447",
        "md5": "9c40588ff51bc1e5198dada60071b134",
        "sha256": "686b04081df7c1854e70292f53808c6d2da7cdb156a5391a7f33820b1329ca0e"
      },
      "downloads": -1,
      "filename": "PyEMEBSDDI_wrapper-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9c40588ff51bc1e5198dada60071b134",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19340,
      "upload_time": "2020-06-28T20:51:14",
      "upload_time_iso_8601": "2020-06-28T20:51:14.996723Z",
      "url": "https://files.pythonhosted.org/packages/f8/03/c1fb708b20ea14c29e0542b065ae148ad2c464eaffe47d765b2afaeff447/PyEMEBSDDI_wrapper-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}