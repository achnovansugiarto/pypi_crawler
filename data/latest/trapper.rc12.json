{
  "info": {
    "author": "OBSS",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<h1 align=\"center\">Trapper (Transformers wRAPPER)</h1>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/trapper\"><img src=\"https://img.shields.io/pypi/pyversions/trapper\" alt=\"Python versions\"></a>\n<a href=\"https://pypi.org/project/trapper\"><img src=\"https://img.shields.io/pypi/v/trapper?color=blue\" alt=\"PyPI version\"></a>\n<a href=\"https://github.com/obss/trapper/releases/latest\"><img alt=\"Latest Release\" src=\"https://img.shields.io/github/release-date/obss/trapper\"></a>\n<a href=\"https://colab.research.google.com/github/obss/trapper/blob/main/examples/question_answering/question_answering.ipynb\"><img alt=\"Open in Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\"></a>\n<br>\n<a href=\"https://github.com/obss/trapper/actions\"><img alt=\"Build status\" src=\"https://github.com/obss/trapper/actions/workflows/ci.yml/badge.svg\"></a>\n<a href=\"https://libraries.io/pypi/trapper\"><img alt=\"Dependencies\" src=\"https://img.shields.io/librariesio/release/pypi/trapper\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/obss/trapper/blob/main/LICENSE\"><img alt=\"License: MIT\" src=\"https://img.shields.io/github/license/obss/trapper\"></a>\n</p>\n\nTrapper is an NLP library that aims to make it easier to train transformer based\nmodels on downstream tasks. It\nwraps [huggingface/transformers](http://github.com/huggingface/transformers) to\nprovide the transformer model implementations and training mechanisms. It defines\nabstractions with base classes for common tasks encountered while using transformer\nmodels. Additionally, it provides a dependency-injection mechanism and allows\ndefining training and/or evaluation experiments via configuration files. By this\nway, you can replicate your experiment with different models, optimizers etc by only\nchanging their values inside the configuration file without writing any new code or\nchanging the existing code. These features foster code reuse, less boiler-plate\ncode, as well as repeatable and better documented training experiments which is\ncrucial in machine learning.\n\n## Why You Should Use Trapper\n\n- You have been a `Transformers` user for quite some time now. However, you started\n  to feel that some computation steps could be standardized through new\n  abstractions. You wish to reuse the scripts you write for data processing,\n  post-processing etc with different models/tokenizers easily. You would like to\n  separate the code from the experiment details, mix and match components through\n  configuration files while keeping your codebase clean and free of duplication.\n\n\n- You are an `AllenNLP` user who is really happy with the dependency-injection\n  system, well-defined abstractions and smooth workflow. However, you would like to\n  use the latest transformer models without having to wait for the core developers\n  to integrate them. Moreover, the `Transformers` community is scaling up rapidly,\n  and you would like to join the party while still enjoying an `AllenNLP` touch.\n\n\n- You are an NLP researcher / practitioner, and you would like to give a shot to a\n  library aiming to support state-of-the-art models along with datasets, metrics and\n  more in unified APIs.\n\nTo see more, check the \n[official Trapper blog post](https://medium.com/codable/trapper-an-nlp-library-for-transformer-models-b8917bbc8796).\n\n## Key Features\n\n### Compatibility with HuggingFace Transformers\n\n**Trapper extends Transformers!**\n\nWhile implementing the components of trapper, we try to reuse the classes from the\nTransformers library as much as we can. For example, trapper uses the models, and\nthe trainer as they are in Transformers. This makes it easy to use the models\ntrained with trapper on other projects or libraries that depend on Transformers\n(or pytorch in general).\n\nWe strive to keep trapper fully compatible with Transformers, so you can always use\nsome of our components to write a script for your own needs while not using the full\npipeline (e.g. for training).\n\n### Dependency Injection and Training Based on Configuration Files\n\nWe use the registry mechanism of [AllenNLP](http://github.com/allenai/allennlp) to\nprovide dependency injection and enable reading the experiment details from the\nconfiguration files in `json`\nor `jsonnet` format. You can look at the\n[AllenNLP guide on dependency injection](https://guide.allennlp.org/using-config-files)\nto learn more about how the registry system and dependency injection works as well\nas how to write configuration files. In addition, we strongly recommend reading the\nremaining parts of the [AllenNLP guide](https://guide.allennlp.org/)\nto learn more about its design philosophy, the importance of abstractions etc.\n(especially Part2: Abstraction, Design and Testing). As a warning, please note that\nwe do not use AllenNLP's abstractions and base classes in general, which means you\ncan not mix and match the trapper's and AllenNLP's components. Instead, we just use\nthe class registry and dependency injection mechanisms and only adapt its very\nlimited set of components, first by wrapping and registering them as trapper\ncomponents. For example, we use the optimizers from AllenNLP since we can\nconveniently do so without hindering our full compatibility with Transformers.\n\n### Full Integration with HuggingFace Datasets\n\nIn trapper, we officially use the format of the datasets\nfrom [datasets](http://github.com/huggingface/datasets) and provide full integration\nwith it. You can directly use all datasets published\nin [datasets hub](https://huggingface.co/datasets) without doing any extra work. You\ncan write the dataset name and extra loading arguments (if there are any) in your\ntraining config file, and trapper will automatically download the dataset and pass\nit to the trainer. If you have a local or private dataset, you can still use it\nafter converting it to the HuggingFace `datasets` format by writing a dataset\nloading script as explained\n[here](https://huggingface.co/docs/datasets/dataset_script.html).\n\n### Support for Metrics through Jury\n\nTrapper supports the common NLP metrics through\n[jury](https://github.com/obss/jury). Jury is an NLP library dedicated to provide\nmetric implementations by adopting and extending the datasets library. For metric\ncomputation during training you can use jury style metric\ninstantiation/configuration to set up on your trapper configuration file to compute\nmetrics on the fly on eval dataset with a specified `eval_steps` value. If your\ndesired metric is not yet available on jury or datasets, you can still create your\nown by extending `trapper.Metric` and utilizing either\n`jury.Metric` or `datasets.Metric` for handling larger set of cases on predictions.\n\n### Abstractions and Base Classes\n\nFollowing AllenNLP, we implement our own registrable base classes to abstract away\nthe common operations for data processing and model training.\n\n* Data reading and preprocessing base classes including\n\n    - The classes to be used directly: `DatasetReader`, `DatasetLoader`\n      and `DataCollator`.\n\n    - The classes that you may need to extend: `LabelMapper`,`DataProcessor`\n      , `DataAdapter` and `TokenizerWrapper`.\n\n    - `TokenizerWrapper` classes utilizing `AutoTokenizer` from Transformers are\n      used as factories to instantiate wrapped tokenizers into which task-specific\n      special tokens are registered automatically.\n\n\n* `ModelWrapper` classes utilizing the `AutoModelFor...` classes from Transformers\n  are used as factories to instantiate the actual task-specific models from the\n  configuration files dynamically.\n\n* Optimizers from AllenNLP: Implemented as children of the base `Optimizer` class.\n\n* Metric computation is supported through `jury`. In order to make the metrics\n  flexible enough to work with the trainer in a common interface, we introduced\n  metric handlers. You may need to extend these classes accordingly\n    * For conversion of predictions and references to a suitable form for a\n      particular metric or metric set: `MetricInputHandler`.\n    * For manipulating resulting score object containing the metric\n      results: `MetricOutputHandler`.\n\n## Usage\n\nTo use trapper, you need to select the common NLP formulation of the problem you are\ntackling as well as decide on its input representation, including the special\ntokens.\n\n### Modeling the Problem\n\nThe first step in using trapper is to decide on how to model the problem. First, you\nneed to model your problem as one of the common modeling tasks in NLP such as\nseq-to-seq, sequence classification etc. We stick with the Transformers' way of\ndividing the tasks into common categories as it does in its `AutoModelFor...`\nclasses. To be compatible with Transformers and reuse its model factories, trapper\nformalizes the tasks by wrapping the `AutoModelFor...` classes and matching them to\na name that represents a common task in NLP. For example, the natural choice for POS\ntagging is to model it as a token classification (i.e. sequence labeling) task. On\nthe other hand, for question answering task, you can directly use the question\nanswering formulation since Transformers already has a support for that task.\n\n### Modeling the Input\n\nYou need to decide on how to represent the input including the common special tokens\nsuch as BOS, EOS. This formulation is directly used while creating the\n`input_ids` value of the input instances. As a concrete example, you can represent a\nsequence classification input with `BOS ... actual_input_tokens ... EOS` format.\nMoreover, some tasks require extra task-specific special tokens as well. For\nexample, in conditional text generation, you may need to prompt the generation with\na special signaling token. In tasks that utilizes multiple sequences, you may need\nto use segment embeddings (via `token_type_ids`) to label the tokens according to\ntheir sequence.\n\n## Class Reference\n\n<p align=\"center\">\n  <img src=\"https://github.com/obss/trapper/blob/main/resources/trapper_diagram.png?raw=true\" alt=\"trapper_components\"/>\n</p>\n\nThe above diagram shows the basic components in Trapper. To use trapper on training,\nevaluation on a task that is not readily supported in Transformers, you need to\nextend the provided base classes according to your own needs. These are as follows:\n\n**For Training & Evaluation**: LabelMapper, DataProcessor, DataAdapter,\nTokenizerWrapper, MetricInputHandler, MetricOutputHandler.\n\n**For Inference**: In addition to the ones listed above, you may need to implement\na `transformers.Pipeline` or directly use one from Transformers if they already\nimplemented one that matches your need.\n\n**Typically Extended Classes**\n\n1) **LabelMapper**:\n   Used in tasks that require mapping between categorical labels and integer ids\n   such as token classification.\n\n\n2) **DataProcessor**:\n   This class is responsible for taking a single instance in dict format, typically\n   coming from a `datasets.Dataset`, extracting the information fields suitable for\n   the task and hand, and converting their values to integers or collections of\n   integers. This includes, tokenizing the string fields, and getting the token ids,\n   converting the categoric labels to integer ids and so on.\n\n\n3) **DataAdapter**:\n   This is responsible for converting the information fields inside an instance dict\n   that was previously processed by a `DataProcessor` to a format suitable for\n   feeding into a transformer model. This also includes handling the special tokens\n   signaling the start or end of a sequence, the separation of tho sequence for a\n   sequence-pair task as well as chopping excess tokens etc.\n\n\n4) **TokenizerWrapper**:\n   This class wraps a pretrained tokenizer from the Transformers while also\n   recording the special tokens needed for the task to the wrapped tokenizer. It\n   also stores the missing values from BOS - CLS, EOS - SEP token pairs for the\n   tokenizers that only support one of them. This means you can model your input\n   sequence by using the bos_token for start and eos_token for end without thinking\n   which model you are working with. If your task and input modeling needs extra\n   special tokens e.g. the `<CONTEXT>` for a context dependent task, you can store\n   these tokens by setting the `_TASK_SPECIFIC_SPECIAL_TOKENS` class variable in\n   your TokenizerWrapper subclass. Otherwise, you can directly use TokenizerWrapper.\n\n\n5) **MetricInputHandler**:\n   This class is mainly responsible for preprocessing applied to predictions and\n   labels (references). This is performed for transforming the predictions and\n   labels to a suitable format to be fed in metrics for computation. For example,\n   while using BLEU in a language generation task, the predictions and labels need\n   to be converted to a string or list of strings. However, for extractive question\n   answering task in which the predictions are returned as start and end indices\n   pointing the answer within the context, additional information (e.g context in\n   such case) may be needed, so directly returning the start and end indices in this\n   case does not help, and additional operation is needed to be done by converting\n   predictions to actual answers extracted from the context. You are able to do this\n   kind of operations through `MetricInputHandler`, storing additional information,\n   converting predictions and labels to a suitable format, manipulating resulting\n   score. Furthermore, in child classes helper classes can also be implemented (e.g\n   `TokenizerWrapper`, `LabelMapper`) for required tasks. In this class, we provide\n   three main functionality:\n    * `_extract_metadata()`: This method allows user to extract metadata from\n      dataset instances to be later used for preprocessing predictions and labels\n      in `preprocess()` method.\n    * `__call__()`: This method allows converting predictions and labels into a\n      suitable form for metric computation. The default behavior is defined as\n      directly returning predictions and labels without manipulation, but only\n      applying `argmax()` to predictions to convert the model predictions to\n      predictions input for metrics.\n\n7) **MetricOutputHandler**:\n   The intention of this class is to support for manipulating the score object\n   returned by the metric computation phase. Jury returns a well-constructed\n   dictionary output for all metrics; however, to shorten dictionary items,\n   manipulate the information within the output or to add additional information to\n   score dictionary, this class can be extended as desired.\n\n\n7) **transformers.Pipeline**:\n   The pipeline mechanism from Transformers have not been fully integrated yet. For\n   now, you should check Transformers to find a pipeline that is suitable for your\n   needs and does the same pre-processing. If you could not find one, you may need\n   to write your own `Pipeline` by extending\n   `transformers.Pipeline` or one of its subclasses and add it\n   to `transformers.pipelines.SUPPORTED_TASKS` map. To enable instantiation of the\n   pipelines from the checkpoint folders, we provide a factory,\n   `create_pipeline_from_checkpoint` function. It accepts a checkpoint directory of\n   a completed experiment, the path to the config file (already saved in that\n   directory), as well as the task name that you used while adding the pipeline\n   to `SUPPORTED_TASKS`. It re-creates the objects you used while training such\n   as `model wrapper`, `label mapper` etc and provides them as keyword arguments to\n   constructor of the pipeline you implemented.\n\n#### Registering classes from custom modules to the library\n\nWe support both file based and command line argument based approaches to register\nthe external modules written by the users.\n\n##### Option 1 - File based\n\nYou should list the packages or modules (for stand-alone modules not residing inside\nany package) containing the classes to be registered as plugins to a local file\nnamed `.trapper_plugins`. This file must reside in the same directory where you run\nthe `trapper run` command. Moreover, it is recommended to put the plugins file where\nthe modules to be registered resides (e.g. the project root) for convenience since\nthat directory will be added to the `PYTHONPATH`. Otherwise, you need to add the\nplugin module/packages to the `PYTHONPATH` manually. Another reminder is that each\nlisted package must have an `__init__.py` file that imports the modules containing\nthe custom classes to be registered.\n\nE.g., let's say our project's root directory is `project_root` and the experiment\nconfig file is inside the root with a name `test_experiment.jsonnet`. To run the\nexperiment, you should run the following commands:\n\n```shell\ncd project_root\ntrapper run test_experiment.jsonnet\n```\n\nBelow output shows the content of the project_root directory.\n\n```console\nls project_root\n\n  ner\n  tests\n  datasets\n  .trapper_plugins\n  test_experiment.jsonnet\n```\n\nAdditionally, here is the content of the project_root/.trapper_plugins.\n\n```console\ncat project_root/.trapper_plugins\n\n  ner.core.models\n  ner.data.dataset_readers\n```\n\n##### Option 2 - Using the command line argument\n\nYou can specify the packages and/or modules you want to be registered using the\n--include-package argument. However, note that you need to repeat the argument for\neach package/module to be registered.\n\nE.g. the running the following commands is an alternative to `Option-1` to start the\nexperiment specified in the `test_experiment.jsonnet`.\n\n```console\ntrapper run test_experiment.jsonnet \\\n--include-package ner.core.models \\\n--include-package ner.data.dataset_readers\n```\n\n#### Running a training and/or evaluation experiment\n\n##### Config File Based Training Using the CLI\n\nGo to your project root and execute the `trapper run` command with a config file\nspecifying the details of the training experiment. E.g.\n\n```shell\ntrapper run SOME_DIRECTORY/experiment.jsonnet\n```\n\nDon't forget to provide the args[\"output_dir\"] and args[\"result_dir\"] values in your\nexperiment file. Please look at the `examples/pos_tagging/README.md` for a detailed\nexample.\n\n##### Script Based Training\n\nGo to your project root and execute the `trapper run` command with a config file\nspecifying the details of the training experiment. E.g.\n\n```shell\ntrapper run SOME_DIRECTORY/experiment.jsonnet\n```\n\nDon't forget to provide the args[\"output_dir\"] and args[\"result_dir\"] values in your\nexperiment file. Please look at the `examples/pos_tagging/README.md` for a detailed\nexample.\n\n## Examples for Using Trapper as a Library\n\nWe created an `examples` folder that includes example projects to help you get\nstarted using trapper. Currently, it includes a POS tagging project using the\nCONLL2003 dataset, and a question answering project using the SQuAD dataset. The POS\ntagging example shows how to use trapper on a task that does not have a direct\nsupport from Transformers. It implements all custom components and provides a\ncomplete project structure including the tests. On the other hand, the question\nanswering example shows using trapper on a task that Transformers already supported.\nWe implemented it to demonstrate how trapper may still be helpful thanks to\nconfiguration file based experiments.\n\n### Training a POS Tagging Model on CONLL2003\n\nSince transformers lacks a direct support for POS tagging, we added an\n[example project](./examples/pos_tagging) that trains a transformer model\non `CONLL2003` POS tagging dataset and perform inference using it. It is a\nself-contained project including its own requirements file, therefore you can copy\nthe folder into another directory to use as a template for your own project. Please\nfollow its `README.md` to get started.\n\n### Training a Question Answering Model on SQuAD Dataset\n\nYou can use the notebook in\nthe [Example QA Project](./examples/question_answering) `examples/question_answering/question_answering.ipynb`\nto follow the steps while training a transformer model on SQuAD v1.\n\n## Currently Supported Tasks and Models From Transformers\n\nHypothetically, nearly all models should work on any task if it has an entry in the\ntable of `AutoModelFor...` factories for that task. However, since some models\nrequire more (or less) parameters compared to most of the models in the library, you\nmight get errors while using such models. We try to cover these edge cases them by\nadding the extra parameters they require. Feel free to open an issue/PR if you\nencounter/solve such issues in a model-task combination. We have used trapper on a\nlimited set of model-task combinations so far. We list these combinations below to\nindicate that they have been tested and validated to work without problems.\n\n### Table of Model-task Combinations Tested so far\n\n| model       | question_answering | token_classification |\n|-------------|--------------------|----------------------|\n| BERT        | &#10004;           | &#10004;             |\n| ALBERT      | &#10004;           | &#10004;             |\n| DistillBERT | &#10004;           | &#10004;             |\n| ELECTRA     | &#10004;           | &#10004;             |\n| RoBERTa     | &#10004;           | &#10004;             |\n\n## Installation\n\n### Environment Creation\n\nIt is strongly recommended creating a virtual environment using conda or virtualenv\netc. before installing this package and its dependencies. For example, the following\ncode creates a conda environment with name trapper and python version 3.7.10, and\nactivates it.\n\n```console\nconda create --name trapper python=3.7.10\nconda activate trapper\n```\n\n#### Regular Installation\n\nYou can install trapper and its dependencies by pip as follows.\n\n```console\npip install trapper\n```\n\n## Contributing\n\nIf you would like to open a PR, please create a fresh environment as described\nbefore, clone the repo locally and install trapper in editable mode as follows.\n\n```console\ngit clone https://github.com/obss/trapper.git\ncd trapper\npip install -e .[dev]\n```\n\nAfter your changes, please ensure that the tests are still passing, and do not\nforget to apply code style formatting.\n\n### Testing trapper\n\n#### Caching the test fixtures from the HuggingFace datasets library\n\nTo speed up the data-related tests, we cache the test dataset fixtures from\nHuggingFace's datasets library using the following command.\n\n```console\npython -m scripts.cache_hf_datasets_fixtures\n```\n\nThen, you can simply run the tests with the following command:\n\n```console\npython -m scripts.run_tests\n```\n\n**NOTE:** To significantly speed up the tests depending on HuggingFace's\nTransformers and datasets libraries, you can set the following environment variables\nto make them work in offline mode. However, beware that you may need to run the\ntests once first without setting these environment variables so that the pretrained\nmodels, tokenizers etc. are downloaded and cached.\n\n```shell\nexport TRANSFORMERS_OFFLINE=1 HF_DATASETS_OFFLINE=1\n```\n\n### Code Style\n\nTo check code style,\n\n```console\npython -m scripts.run_code_style check\n```\n\nTo format codebase,\n\n```console\npython -m scripts.run_code_style format\n```\n\n### Contributors\n\n- [Cemil Cengiz](https://github.com/cemilcengiz)\n- [Devrim Çavuşoğlu](https://github.com/devrimcavusoglu)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/obss/trapper",
    "keywords": "python,nlp,natural-language-processing,deep-learning,transformer,pytorch,transformers,allennlp,pytorch-transformers",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trapper",
    "package_url": "https://pypi.org/project/trapper/",
    "platform": null,
    "project_url": "https://pypi.org/project/trapper/",
    "project_urls": {
      "Homepage": "https://github.com/obss/trapper"
    },
    "release_url": "https://pypi.org/project/trapper/0.0.13/",
    "requires_dist": [
      "allennlp (<2.11,>=2.10.0)",
      "datasets (<2.5,>=2.3.0)",
      "deepdiff (>=5.2.0)",
      "jury (<2.3,>=2.2.3)",
      "numpy (>=1.21.2)",
      "seqeval (==1.2.2)",
      "tensorboardX (==2.1)",
      "transformers (<4.21,>=4.18)",
      "black (==22.3.0) ; extra == 'dev'",
      "flake8 (==3.9.2) ; extra == 'dev'",
      "isort (==5.9.2) ; extra == 'dev'",
      "pytest (>=6.2.4) ; extra == 'dev'",
      "pytest-cov (>=2.12.1) ; extra == 'dev'",
      "pylint (>=2.11) ; extra == 'dev'",
      "mypy (>=0.9) ; extra == 'dev'",
      "importlib-metadata (<4.3,>=1.1.0) ; (python_version < \"3.8\") and extra == 'dev'"
    ],
    "requires_python": ">=3.7.1",
    "summary": "State-of-the-art NLP through transformer models in a modular design and consistent APIs.",
    "version": "0.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16680452,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8697beab1aef929bd8fa030066df982fddfb42eac9ac71a81115e62e70b611",
          "md5": "160c3ef9e2ef77f5a8fe323e7fddbd06",
          "sha256": "966708d90187ec29019fdb536227454fdadd37c83792a36bd9d047f283f7da5e"
        },
        "downloads": -1,
        "filename": "trapper-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "160c3ef9e2ef77f5a8fe323e7fddbd06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 68951,
        "upload_time": "2022-09-26T14:47:16",
        "upload_time_iso_8601": "2022-09-26T14:47:16.862253Z",
        "url": "https://files.pythonhosted.org/packages/ab/86/97beab1aef929bd8fa030066df982fddfb42eac9ac71a81115e62e70b611/trapper-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47cd3e2c80075251ba95707609743387e3597c6b4ea985206edf6ab3f33aba0c",
          "md5": "dd3b1a8a63b64ac7eb8d603c229250e2",
          "sha256": "48ee7b9133a9ef5f1107f5482f04777c23636171dcf650035efde7e35dd4b3cc"
        },
        "downloads": -1,
        "filename": "trapper-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "dd3b1a8a63b64ac7eb8d603c229250e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59443,
        "upload_time": "2022-09-26T14:47:18",
        "upload_time_iso_8601": "2022-09-26T14:47:18.069825Z",
        "url": "https://files.pythonhosted.org/packages/47/cd/3e2c80075251ba95707609743387e3597c6b4ea985206edf6ab3f33aba0c/trapper-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd772018c994bf7e2668f92783be35b6ec371bf8b251cfefa4cde014508c964e",
          "md5": "53d8173d1def070a39a24e529ec0b7a6",
          "sha256": "fc4289d9af95e6bccd9b10505ac33ca1fb0ec07c8900a9baed596a806b9bd060"
        },
        "downloads": -1,
        "filename": "trapper-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53d8173d1def070a39a24e529ec0b7a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 70103,
        "upload_time": "2022-11-03T14:12:38",
        "upload_time_iso_8601": "2022-11-03T14:12:38.861121Z",
        "url": "https://files.pythonhosted.org/packages/dd/77/2018c994bf7e2668f92783be35b6ec371bf8b251cfefa4cde014508c964e/trapper-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a1130e2c336c44618cdb6576a4621e97cddfca15ffab6f9b7fe116fb407bd9",
          "md5": "414bebe79d8b8d8afce245d4992e7b22",
          "sha256": "70f717af3b27a9ffc5f0b030d4265e9d7c8570e8137584dfdec03df72003b9dd"
        },
        "downloads": -1,
        "filename": "trapper-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "414bebe79d8b8d8afce245d4992e7b22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 60048,
        "upload_time": "2022-11-03T14:12:40",
        "upload_time_iso_8601": "2022-11-03T14:12:40.629254Z",
        "url": "https://files.pythonhosted.org/packages/08/a1/130e2c336c44618cdb6576a4621e97cddfca15ffab6f9b7fe116fb407bd9/trapper-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1b7aaba197d6f6375ee58e6fcce22e24884355744d9db8bddb4fe28a8adb631",
          "md5": "0ee9d850da6750e54aa904c38910cf58",
          "sha256": "46c7588697c749a6eb278d71ee0ba3134b10d949fb25c8d14156129f5bdaa1a3"
        },
        "downloads": -1,
        "filename": "trapper-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ee9d850da6750e54aa904c38910cf58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 73551,
        "upload_time": "2023-01-17T10:27:32",
        "upload_time_iso_8601": "2023-01-17T10:27:32.251963Z",
        "url": "https://files.pythonhosted.org/packages/a1/b7/aaba197d6f6375ee58e6fcce22e24884355744d9db8bddb4fe28a8adb631/trapper-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa435464db78c7fd2b9f5e7740ef26c25af2a8fbe46071add378f005c8af15f",
          "md5": "9a85eade3459aa41dbfec5c01823261a",
          "sha256": "198e893916364e4e38ee394de84b5d91fe07bbc74e433f57aa34dc8301d41a5a"
        },
        "downloads": -1,
        "filename": "trapper-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "9a85eade3459aa41dbfec5c01823261a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 62645,
        "upload_time": "2023-01-17T10:27:33",
        "upload_time_iso_8601": "2023-01-17T10:27:33.368787Z",
        "url": "https://files.pythonhosted.org/packages/4f/a4/35464db78c7fd2b9f5e7740ef26c25af2a8fbe46071add378f005c8af15f/trapper-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b418f6ea373f9d5aa68cf9536e4f3723d23e6d76b7f9870b68163fd67b48210",
          "md5": "560f84f91d7fb780784d9628834b8ae4",
          "sha256": "664ea75d6ca70338a10b69695a25ad8c5067459df58b43da82933908baf857e8"
        },
        "downloads": -1,
        "filename": "trapper-0.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "560f84f91d7fb780784d9628834b8ae4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 73589,
        "upload_time": "2023-02-03T11:07:19",
        "upload_time_iso_8601": "2023-02-03T11:07:19.359258Z",
        "url": "https://files.pythonhosted.org/packages/3b/41/8f6ea373f9d5aa68cf9536e4f3723d23e6d76b7f9870b68163fd67b48210/trapper-0.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b69d7ae7e756951033b0a4991d92144c0574c0684ba978536cd6983add58e55",
          "md5": "710493dd8c90b38129a7a84ceaf1a133",
          "sha256": "d9c67b5ad2b3754b779be80f22f1bceeb2be35bb6ccc37d77dd58920be9530ec"
        },
        "downloads": -1,
        "filename": "trapper-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "710493dd8c90b38129a7a84ceaf1a133",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 62659,
        "upload_time": "2023-02-03T11:07:20",
        "upload_time_iso_8601": "2023-02-03T11:07:20.948189Z",
        "url": "https://files.pythonhosted.org/packages/9b/69/d7ae7e756951033b0a4991d92144c0574c0684ba978536cd6983add58e55/trapper-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e473a99f0e0e632e083dc7f3a1f36dc44bffd01b11506b846ed52acc60b35f",
          "md5": "3a37bbb5572594319719b4686bcd5781",
          "sha256": "df0f004b532335086ca39b1ea29251ef27ca4600b98e132c9852fd0d0b9709c0"
        },
        "downloads": -1,
        "filename": "trapper-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a37bbb5572594319719b4686bcd5781",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 60827,
        "upload_time": "2021-11-01T17:24:15",
        "upload_time_iso_8601": "2021-11-01T17:24:15.459968Z",
        "url": "https://files.pythonhosted.org/packages/06/e4/73a99f0e0e632e083dc7f3a1f36dc44bffd01b11506b846ed52acc60b35f/trapper-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d85780a01c6ee287e2ac5e9991a321718fc9489d644832bb7a69924c4f74ca04",
          "md5": "593e150c26c370e8d9934fda58f3bcb9",
          "sha256": "43342810f9132db8499a49a802923277650f7f12cf629d00d0879913ab447746"
        },
        "downloads": -1,
        "filename": "trapper-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "593e150c26c370e8d9934fda58f3bcb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 51983,
        "upload_time": "2021-11-01T17:24:16",
        "upload_time_iso_8601": "2021-11-01T17:24:16.422418Z",
        "url": "https://files.pythonhosted.org/packages/d8/57/80a01c6ee287e2ac5e9991a321718fc9489d644832bb7a69924c4f74ca04/trapper-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "739c8326a2dffdf260af8ec567d0728901c2bd5d5205ad4ca30abdcf834e9c77",
          "md5": "c0e09f3ef2f504fd5de4b7cdf86f4226",
          "sha256": "509fbf149e0f4497489afaac3a388fff384fc7618b3395ea45ab37fb6c80e8c6"
        },
        "downloads": -1,
        "filename": "trapper-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0e09f3ef2f504fd5de4b7cdf86f4226",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 59519,
        "upload_time": "2021-11-01T20:10:32",
        "upload_time_iso_8601": "2021-11-01T20:10:32.377505Z",
        "url": "https://files.pythonhosted.org/packages/73/9c/8326a2dffdf260af8ec567d0728901c2bd5d5205ad4ca30abdcf834e9c77/trapper-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8803eb6007de07da5263f1705d7555ee0d9f9e687dccffc3d5440b7bedb1e0ae",
          "md5": "1c533eb21ec762c3c152caec170738fb",
          "sha256": "f52154a6e9cf601245d27e4a858ddaa0a54ca3b42adb8ed7e8b4ac50e34460f5"
        },
        "downloads": -1,
        "filename": "trapper-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1c533eb21ec762c3c152caec170738fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 51343,
        "upload_time": "2021-11-01T20:10:33",
        "upload_time_iso_8601": "2021-11-01T20:10:33.377802Z",
        "url": "https://files.pythonhosted.org/packages/88/03/eb6007de07da5263f1705d7555ee0d9f9e687dccffc3d5440b7bedb1e0ae/trapper-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7efd4af02986426aa47a8552bbabaea8cd3716f017a6c18af73c6900d148fae",
          "md5": "4a6e1d96d74370e491c921580a115ae3",
          "sha256": "4662ad0f01801cae5bd50f84798b590b5934876687e96b3c34ae6318ccb09674"
        },
        "downloads": -1,
        "filename": "trapper-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a6e1d96d74370e491c921580a115ae3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 69083,
        "upload_time": "2021-11-09T09:26:17",
        "upload_time_iso_8601": "2021-11-09T09:26:17.795424Z",
        "url": "https://files.pythonhosted.org/packages/b7/ef/d4af02986426aa47a8552bbabaea8cd3716f017a6c18af73c6900d148fae/trapper-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f75e8a2e7dcc4bf3c896b8192d7ddd8e8a29d7755af946a664f613462d661401",
          "md5": "a4c3ee626ba1f7277a89ed77bb8cdcaf",
          "sha256": "f82e5b5dcf782cbad7d652bbd3427410c2c87186d8d93ac722a4f9b07b5d3adc"
        },
        "downloads": -1,
        "filename": "trapper-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a4c3ee626ba1f7277a89ed77bb8cdcaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59455,
        "upload_time": "2021-11-09T09:26:18",
        "upload_time_iso_8601": "2021-11-09T09:26:18.752432Z",
        "url": "https://files.pythonhosted.org/packages/f7/5e/8a2e7dcc4bf3c896b8192d7ddd8e8a29d7755af946a664f613462d661401/trapper-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8cb3e9b3c82304879a72ed9853ef856a6d71e5d1a3377f919bcef93afd9314b",
          "md5": "64d2f6169f491250eeab05f9ef2743e6",
          "sha256": "f3042b2ed3e8273812fd9200b737f0ffd613b4f226f733286283420cacde5579"
        },
        "downloads": -1,
        "filename": "trapper-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64d2f6169f491250eeab05f9ef2743e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 69306,
        "upload_time": "2021-11-10T12:08:48",
        "upload_time_iso_8601": "2021-11-10T12:08:48.426751Z",
        "url": "https://files.pythonhosted.org/packages/b8/cb/3e9b3c82304879a72ed9853ef856a6d71e5d1a3377f919bcef93afd9314b/trapper-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ca3577a6ef5020893761daffffeab3baf0c834e26eed811d517289e9ed8a406",
          "md5": "79b8066db6985951e580925330335e99",
          "sha256": "b95c0501440e2630f7a8c3737d7356dcd4cf8625e4c90e5609de3621f5d7e2f5"
        },
        "downloads": -1,
        "filename": "trapper-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "79b8066db6985951e580925330335e99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59758,
        "upload_time": "2021-11-10T12:08:49",
        "upload_time_iso_8601": "2021-11-10T12:08:49.901726Z",
        "url": "https://files.pythonhosted.org/packages/2c/a3/577a6ef5020893761daffffeab3baf0c834e26eed811d517289e9ed8a406/trapper-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0837130a937bd0752190a4107cd2bbbbc2bce8b58e0f1059463a81228fe1c2",
          "md5": "682557709c57129fad9c6b9fa0317b2b",
          "sha256": "fa35ce8861c1a4e6063e1ce96d98168a7b9c1486108dd62f3228640d69a5df56"
        },
        "downloads": -1,
        "filename": "trapper-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "682557709c57129fad9c6b9fa0317b2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 69390,
        "upload_time": "2021-12-30T14:45:27",
        "upload_time_iso_8601": "2021-12-30T14:45:27.753719Z",
        "url": "https://files.pythonhosted.org/packages/6d/08/37130a937bd0752190a4107cd2bbbbc2bce8b58e0f1059463a81228fe1c2/trapper-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adee850e787c5dc0727c98f8a2f9cbeffdc07d66d5ee6d8b820b4733c061051d",
          "md5": "b511cb39a712173da34a3a7e3728bee9",
          "sha256": "6487028ff3c76aedebe5ba07e32ce36f9f7677eeab67ef9f9a150fa93c712680"
        },
        "downloads": -1,
        "filename": "trapper-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b511cb39a712173da34a3a7e3728bee9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59906,
        "upload_time": "2021-12-30T14:45:29",
        "upload_time_iso_8601": "2021-12-30T14:45:29.499765Z",
        "url": "https://files.pythonhosted.org/packages/ad/ee/850e787c5dc0727c98f8a2f9cbeffdc07d66d5ee6d8b820b4733c061051d/trapper-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d273b60b328b5cf2f3c15c051d2263845084e4bf084e42c33f0362021e11943",
          "md5": "5364567d2e24a45265e06b1fa409c101",
          "sha256": "2a17eb8c2acc38aa5908c15e7d4d1036d4a2dc0f8e8f8f9bdb78e7889455089a"
        },
        "downloads": -1,
        "filename": "trapper-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5364567d2e24a45265e06b1fa409c101",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 69379,
        "upload_time": "2021-12-30T15:25:31",
        "upload_time_iso_8601": "2021-12-30T15:25:31.701956Z",
        "url": "https://files.pythonhosted.org/packages/3d/27/3b60b328b5cf2f3c15c051d2263845084e4bf084e42c33f0362021e11943/trapper-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e72c28dcf4bea525f06dd33b006bf43d7fad4fe35348c7d54e2d5aac0f2b6bf4",
          "md5": "d6f8975ae6dfbf4ddf6708618fa1f69b",
          "sha256": "d4d1dfec6356d9bbe05c02003dd5fd880486efad9bf6c273531666f2eeb9fd98"
        },
        "downloads": -1,
        "filename": "trapper-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d6f8975ae6dfbf4ddf6708618fa1f69b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59944,
        "upload_time": "2021-12-30T15:25:32",
        "upload_time_iso_8601": "2021-12-30T15:25:32.760277Z",
        "url": "https://files.pythonhosted.org/packages/e7/2c/28dcf4bea525f06dd33b006bf43d7fad4fe35348c7d54e2d5aac0f2b6bf4/trapper-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdcea1cfb89173212dfa54c4bbaabbd21a4432ebf4698c8caa462bd932f7f2d3",
          "md5": "b1802d946ad1dcf67cf0f603670e6350",
          "sha256": "3561ad5832238fb3c44bfa5d62b585f24a9b957edb4778060142746599c30f12"
        },
        "downloads": -1,
        "filename": "trapper-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1802d946ad1dcf67cf0f603670e6350",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 69377,
        "upload_time": "2021-12-31T01:53:02",
        "upload_time_iso_8601": "2021-12-31T01:53:02.319762Z",
        "url": "https://files.pythonhosted.org/packages/bd/ce/a1cfb89173212dfa54c4bbaabbd21a4432ebf4698c8caa462bd932f7f2d3/trapper-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ff7d394a14bc456d58602052189659b1ea48c4ab22e10215f78a64d841c9d45",
          "md5": "6d8447066ef0782d8b10c51f4818cfb2",
          "sha256": "dd07a01edff36271afa3d296f2d8e8cd8dc357664561513e9dc2bde8576f06ab"
        },
        "downloads": -1,
        "filename": "trapper-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6d8447066ef0782d8b10c51f4818cfb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59910,
        "upload_time": "2021-12-31T01:53:03",
        "upload_time_iso_8601": "2021-12-31T01:53:03.814005Z",
        "url": "https://files.pythonhosted.org/packages/7f/f7/d394a14bc456d58602052189659b1ea48c4ab22e10215f78a64d841c9d45/trapper-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfe096be7b65b39ce12f9ebb254028d17081baaedec0070ffcd924e28a5c6a4b",
          "md5": "c4a33aa862d2f6659fd0b93c17362ce4",
          "sha256": "781a2e3822911ec96dcfec72c65c647e9e373a9517e7377e755c7b6e1c84fb60"
        },
        "downloads": -1,
        "filename": "trapper-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4a33aa862d2f6659fd0b93c17362ce4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 68942,
        "upload_time": "2022-08-11T13:24:20",
        "upload_time_iso_8601": "2022-08-11T13:24:20.239236Z",
        "url": "https://files.pythonhosted.org/packages/cf/e0/96be7b65b39ce12f9ebb254028d17081baaedec0070ffcd924e28a5c6a4b/trapper-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce846c2559ee90434cd8bfea1ee5244155d44f1c0bbeecdac60762f8a26404da",
          "md5": "f136634ff6074193f76b25de2f7b1a0a",
          "sha256": "688383c5bd9ce56d640d30576a105e6fa39ab4dbd6328c67b3951a45e0f78205"
        },
        "downloads": -1,
        "filename": "trapper-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f136634ff6074193f76b25de2f7b1a0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 59425,
        "upload_time": "2022-08-11T13:24:21",
        "upload_time_iso_8601": "2022-08-11T13:24:21.735095Z",
        "url": "https://files.pythonhosted.org/packages/ce/84/6c2559ee90434cd8bfea1ee5244155d44f1c0bbeecdac60762f8a26404da/trapper-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b418f6ea373f9d5aa68cf9536e4f3723d23e6d76b7f9870b68163fd67b48210",
        "md5": "560f84f91d7fb780784d9628834b8ae4",
        "sha256": "664ea75d6ca70338a10b69695a25ad8c5067459df58b43da82933908baf857e8"
      },
      "downloads": -1,
      "filename": "trapper-0.0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "560f84f91d7fb780784d9628834b8ae4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.1",
      "size": 73589,
      "upload_time": "2023-02-03T11:07:19",
      "upload_time_iso_8601": "2023-02-03T11:07:19.359258Z",
      "url": "https://files.pythonhosted.org/packages/3b/41/8f6ea373f9d5aa68cf9536e4f3723d23e6d76b7f9870b68163fd67b48210/trapper-0.0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b69d7ae7e756951033b0a4991d92144c0574c0684ba978536cd6983add58e55",
        "md5": "710493dd8c90b38129a7a84ceaf1a133",
        "sha256": "d9c67b5ad2b3754b779be80f22f1bceeb2be35bb6ccc37d77dd58920be9530ec"
      },
      "downloads": -1,
      "filename": "trapper-0.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "710493dd8c90b38129a7a84ceaf1a133",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.1",
      "size": 62659,
      "upload_time": "2023-02-03T11:07:20",
      "upload_time_iso_8601": "2023-02-03T11:07:20.948189Z",
      "url": "https://files.pythonhosted.org/packages/9b/69/d7ae7e756951033b0a4991d92144c0574c0684ba978536cd6983add58e55/trapper-0.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}