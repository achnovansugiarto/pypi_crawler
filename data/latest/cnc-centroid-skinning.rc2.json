{
  "info": {
    "author": "Frantz Capiez",
    "author_email": "cnc@epi-rf.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "unofficial cnc_centroid_skinning - A wrapper to the CNC12 API language.\n========================================================\n\n# Introduction. \n\nI use for my cnc activities, the products developped by  centroidcnc : https://www.centroidcnc.com/\n\ncentroidcnc has developped a  controller card  named ACORN : \nhttps://www.centroidcnc.com/centroid_diy/acorn_cnc_controller.html\n\n and ACORN Mill and Lathe *CNC12* software for use with the Centroid Acorn CNC controller \n https://www.centroidcnc.com/centroid_diy/centroid_cnc_software_downloads.html\n \n \n# The goal: A Wrapper for python\n\nIn chapter **1.11** of CNC12's documentation: \"CNC12 gives the user the ability to create a custom interface that can be \napplied in many different ways\". \n\nThis wrapper allows to use this API in python language, with (almost) the same \ninterface than c#.  ( https://centroidcncforum.com/viewtopic.php?f=60&t=3397 )\n\n## Example of use case: a video probing   \n \nWith this wrapper, I have developed for internal use, a 'video probing'.\nA  camera is placed on the head of cnc, and detects the center on a hole( thanks to opencv library https://pypi.org/project/opencv-python/ ).\nThis center is used as origin and the coordinate are sent directly to the CNC12 software. The head moves immediatly ( thanks to  *job.RunCommand()*). \nthe second step is to move  the head exactly above  the center of this hole.\n   \nWrite this kind of application is quite simply in python language with help of library and the cncSkinning api. \n\n*Image Recognition library I used with camera for assertions is not included in this library.* \n\n# First release  \n  \nThis is the very first release of this wrapper, I couldn't test everything, but the main features **seem** to work. \nThe goal is to make it easy for everyone to use python to send and receive data for the CNC12 program. \n\n\nThe version of  CNC12 used for my unittest is :4.5.\n\n\nI hope this wrapper allows enthusiasts like me, to simply develop their applications with CNC12. \nPython is easy to use and allows rapid prototyping.\n\n# Warning\n\nBe careful when you go to send commands, or update settings. \nKeep in mind that you can move (see destroy) your material (it's not the worst...). There is no \nprotection like on the 'acorn wizard' and you can send many bad values. verify each time if the wrapper method is correct \nand respond like described in the documentation.  \nThis interface is not **really tested, don't trust it**. \n\n\n### I disclaim any responsibility for any accident, injury or damage suffered by anyone would use this wrapper. \n\n\n\n\nPlease, read the chapter : **'CNC Machine Tool Safety'**  in the documentation of CNC centroid.  \n\n## Installation\n\nIf you have pip, installation is straightforward\n\n    pip install cnc-centroid-skinning\n\nThis will automatically install dependencies as well as their dependencies.\n\n# The documentation. \n\nThe /CncSkinningDocumentation given by Cnc Centroid has the same packages with the same \nreference. There are some differences, however:\n\n- The methods begin with a lowercase. \n- The return code is not given, but in case of a value different of 'SUCCESS' , an ErrorCodeException is raised.\n  \n[documentation](https://htmlpreview.github.io/?https://github.com/fca1/cnc_centroid_skinning/blob/master/cnc_centroid_skinning/doc/cnc_centroid_skinning/index.html)\n\n\n## Examples \n\nVerify the communication betwwen this wrapper and CNC12 (Of course, your CNC12 software is already launched, else no communication is possible):\n\nthe function **detect_cnc(path_of_cnc12) ** is written for that. \n\n    >>> from cnc_centroid_skinning import detect_cnc\n    >>> detect_cnc(\"c:\\cnct\")  \n    'cnc_centroid_skinning communicates... OK' \n    >>>\n    \n### Ask configuration\n \n    >>> from cnc_centroid_skinning import CncSkinning\n    >>> sk = CncSkinning(\"c:\\cnct\")                     # create the instance \n    >>> sk.isConstructed()                  \n    True\n    >>> sk.state.getAcornBoardRevision()\n    4\n    >>> sk.system.getSystemIdentifier()\n    115202849\n    >>> from cnc_centroid_skinning  import Axes,Direction\n    >>> sk.axis.getLabel(Axes.AXIS_1)\n    'Z'\n    >>> sk.axis.getTravelLimit(Axes.AXIS_1,Direction.PLUS)\n    300\n\n### Send a string message to the window message:\n\n    \n\n    >>> sk.message_window.addMessage('move in 5 seconds...')\n    >>> sk.message_window.getMessages()[-1]\n    'move in 5 seconds...'\nor\n\n    >>> sk.message_window.message = 'move in 5 seconds...'\n    >>> sk.message_window.message\n    'move in 5 seconds...'\n\n### Run command (more than one way is possible) with a message window given. \n\n\n**Verify machine is clear to move the following distance: Z0 -> +Z50**\n    \n*Be carrefully with this order, if a command is already running, the next command is ignored\nuntil the job is finished. \nYou can see below a method  to detect than the job is finished by  poll the last messagen\n'306 job finished', but it's not a real good way.*\n \n\n    >>>  sk.job.RunCommand(\"G4 P5.0\\nG53 G0 Z0\\nZ50\",require_cycle_start=False)\n    >>>  while not sk.message_window.message.startswith('306'): time.sleep(0.3) # job finished\n    >>>  sk.job.RunCommand(\"G53 G0 Z0\",require_cycle_start=False)\nor     \n\n    >>>  sk.job.gcode =\"G4 P5.0\", \"G53 G0 Z0\",\"Z50\" \n    >>> while not sk.message_window.message.startswith('306'): time.sleep(0.3) # job finished\n    >>>\n  \n    \n     \n   \n### Use the french language for menus, prompt.... \n(see 12.3.11 Parameter 9 â€“ Display Language)\n\n    >>> sk.param.getMachineParameterValue(9)   # 0 = english\n    0\n    >>> sk.param.setMachineParameter(9,2)\n    >>> sk.system.exitSoftware() # Restart is mandatory \n\nor \n\n    >>> sk.parameter[9] \n    0\n    >>> sk.parameter[9] = 2  \n    >>> sk.system.exitSoftware() # Restart is mandatory\n\n### todo list\n- Vcp is not tested\n- Improve unittest's behavior\n- It's the first version of docstring, le param values are not described. \n- ...",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fca1/cnc_centroid_skinning/",
    "keywords": "",
    "license": "Mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cnc-centroid-skinning",
    "package_url": "https://pypi.org/project/cnc-centroid-skinning/",
    "platform": "",
    "project_url": "https://pypi.org/project/cnc-centroid-skinning/",
    "project_urls": {
      "Documentation": "https://htmlpreview.github.io/?https://github.com/fca1/cnc_centroid_skinning/blob/master/cnc_centroid_skinning/doc/cnc_centroid_skinning/index.html",
      "Homepage": "https://github.com/fca1/cnc_centroid_skinning/",
      "Source Code": "https://github.com/fca1/cnc_centroid_skinning/tree/master/cnc_centroid_skinning/cnc_centroid_skinning/"
    },
    "release_url": "https://pypi.org/project/cnc-centroid-skinning/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "wrapper for the CncSkinning API (C#)",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7865857,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27cf8e997181ed89cdbe4d7275f13e05d4b0449cc0f7f948130fcbd3863becc5",
          "md5": "cf1cf63d0e6c0c21343def47358b1020",
          "sha256": "30d81f8ad111e548b53d58bd9e054d2446c6fa17faab111e5a103ceaf115b88b"
        },
        "downloads": -1,
        "filename": "cnc_centroid_skinning-0.0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "cf1cf63d0e6c0c21343def47358b1020",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": null,
        "size": 48394,
        "upload_time": "2020-08-02T09:33:58",
        "upload_time_iso_8601": "2020-08-02T09:33:58.566377Z",
        "url": "https://files.pythonhosted.org/packages/27/cf/8e997181ed89cdbe4d7275f13e05d4b0449cc0f7f948130fcbd3863becc5/cnc_centroid_skinning-0.0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd89078efa8a2648e7d7ce7cd54f200a34d28838ec67a7f531871b021f4c4adb",
          "md5": "59853536f730a62f5074ece81e779348",
          "sha256": "6ac1ccf287565324d7934547543b8ca9ec23b983636fab115c20cba861999118"
        },
        "downloads": -1,
        "filename": "cnc_centroid_skinning-0.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "59853536f730a62f5074ece81e779348",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": null,
        "size": 48482,
        "upload_time": "2020-08-02T10:03:33",
        "upload_time_iso_8601": "2020-08-02T10:03:33.018966Z",
        "url": "https://files.pythonhosted.org/packages/fd/89/078efa8a2648e7d7ce7cd54f200a34d28838ec67a7f531871b021f4c4adb/cnc_centroid_skinning-0.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd89078efa8a2648e7d7ce7cd54f200a34d28838ec67a7f531871b021f4c4adb",
        "md5": "59853536f730a62f5074ece81e779348",
        "sha256": "6ac1ccf287565324d7934547543b8ca9ec23b983636fab115c20cba861999118"
      },
      "downloads": -1,
      "filename": "cnc_centroid_skinning-0.0.2-py3.8.egg",
      "has_sig": false,
      "md5_digest": "59853536f730a62f5074ece81e779348",
      "packagetype": "bdist_egg",
      "python_version": "3.8",
      "requires_python": null,
      "size": 48482,
      "upload_time": "2020-08-02T10:03:33",
      "upload_time_iso_8601": "2020-08-02T10:03:33.018966Z",
      "url": "https://files.pythonhosted.org/packages/fd/89/078efa8a2648e7d7ce7cd54f200a34d28838ec67a7f531871b021f4c4adb/cnc_centroid_skinning-0.0.2-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}