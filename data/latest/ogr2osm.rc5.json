{
  "info": {
    "author": "Roel Derickx",
    "author_email": "ogr2osm.pypi@derickx.be",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# ogr2osm\n\n![license](https://img.shields.io/github/license/roelderickx/ogr2osm) [![test](https://github.com/roelderickx/ogr2osm/actions/workflows/test.yml/badge.svg)](https://github.com/roelderickx/ogr2osm/actions/workflows/test.yml)\n\nA tool for converting ogr-readable files like shapefiles into .pbf or .osm data\n\n## Installation\n\nOgr2osm requires python 3, gdal with python bindings, lxml and optionally protobuf if you want to generate pbf files. Depending on the file formats you want to read you may have to compile gdal yourself but there should be no issues with shapefiles.\n\n### Via Linux package manager\n\n#### Arch Linux\n\nInstall via\n\n```console\nparu -Syu ogr2osm-git\n```\n\n### Using pip\n\n```console\npip install --upgrade ogr2osm\n```\n\n### From source\n\n```console\ngit clone https://github.com/roelderickx/ogr2osm.git\ncd ogr2osm\npython setup.py install\n```\n\n### Running from source without installation\n\nIf you do not have the required permissions to install ogr2osm, you can run the package as a module directly from the cloned source.\n```console\ngit clone https://github.com/roelderickx/ogr2osm.git\ncd ogr2osm\npython -m ogr2osm\n```\n\n## Upgrading\n\nIf you are upgrading from pnorman's version and you use a translation file for your data, be sure to read about [the modifications you will need to do](https://github.com/roelderickx/ogr2osm-translations).\n\n## About\n\nThis program is based on [pnorman's version of ogr2osm](https://github.com/pnorman/ogr2osm), but is rewritten to make it useable as a general purpose library.\n\nOgr2osm will read any data source that ogr can read and handle reprojection for you. It takes a python file to translate external data source tags into OSM tags, allowing you to use complicated logic. If no translation is specified it will use an identity translation, carrying all tags from the source to the .pbf or .osm output.\n\n## Import Cautions\n\nAnyone planning an import into OpenStreetMap should read and review the import guidelines located [on the wiki](http://wiki.openstreetmap.org/wiki/Import/Guidelines). When writing your translation file you should look at other examples and carefully consider each external data source tag to see if it should be converted to an OSM tag.\n\n## Usage\n\nOgr2osm can be used as a standalone application, but you can also use its classes in your own python project.\n\n### Standalone\n\n```console\nusage: ogr2osm [-h] [--version] [-t TRANSLATION] [--encoding ENCODING]\n               [--sql SQLQUERY] [--no-memory-copy] [-e EPSG_CODE]\n               [-p PROJ4_STRING] [--gis-order]\n               [--rounding-digits ROUNDINGDIGITS]\n               [--significant-digits SIGNIFICANTDIGITS]\n               [--split-ways MAXNODESPERWAY] [--id ID] [--idfile IDFILE]\n               [--saveid SAVEID] [-o OUTPUT] [-f] [--pbf] [--no-upload-false]\n               [--never-download] [--never-upload] [--locked] [--add-bounds]\n               [--suppress-empty-tags]\n               DATASOURCE\n\npositional arguments:\n  DATASOURCE            DATASOURCE can be a file path or a org PostgreSQL\n                        connection string such as: \"PG:dbname=pdx_bldgs\n                        user=emma host=localhost\" (including the quotes)\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -t TRANSLATION, --translation TRANSLATION\n                        Select the attribute-tags translation method. See the\n                        translations/ directory for valid values.\n  --encoding ENCODING   Encoding of the source file. If specified, overrides\n                        the default of utf-8\n  --sql SQLQUERY        SQL query to execute on a PostgreSQL source\n  --no-memory-copy      Do not make an in-memory working copy\n  -e EPSG_CODE, --epsg EPSG_CODE\n                        EPSG code of source file. Do not include the 'EPSG:'\n                        prefix. If specified, overrides projection from source\n                        metadata if it exists.\n  -p PROJ4_STRING, --proj4 PROJ4_STRING\n                        PROJ.4 string. If specified, overrides projection from\n                        source metadata if it exists.\n  --gis-order           Consider the source coordinates to be in traditional\n                        GIS order\n  --rounding-digits ROUNDINGDIGITS\n                        Number of decimal places for rounding when snapping\n                        nodes together (default: 7)\n  --significant-digits SIGNIFICANTDIGITS\n                        Number of decimal places for coordinates to output\n                        (default: 9)\n  --split-ways MAXNODESPERWAY\n                        Split ways with more than the specified number of\n                        nodes. Defaults to 1800. Any value below 2 - do not\n                        split.\n  --id ID               ID to start counting from for the output file.\n                        Defaults to 0.\n  --idfile IDFILE       Read ID to start counting from from a file.\n  --saveid SAVEID       Save last ID after execution to a file.\n  -o OUTPUT, --output OUTPUT\n                        Set destination .osm file name and location.\n  -f, --force           Force overwrite of output file.\n  --pbf                 Write the output as a PBF file in stead of an OSM file\n  --no-upload-false     Omit upload=false from the completed file to suppress\n                        JOSM warnings when uploading.\n  --never-download      Prevent JOSM from downloading more data to this file.\n  --never-upload        Completely disables all upload commands for this file\n                        in JOSM, rather than merely showing a warning before\n                        uploading.\n  --locked              Prevent any changes to this file in JOSM, such as\n                        editing or downloading, and also prevents uploads.\n                        Implies upload=\"never\" and download=\"never\".\n  --add-bounds          Add boundaries to output file\n  --suppress-empty-tags\n                        Suppress empty tags\n```\n\n### As a library\n\nExample code:\n```python\nimport logging\nimport ogr2osm\n\n# 1. Set the logging level of the logger object named 'ogr2osm' to the desired output level\n\nogr2osmlogger = logging.getLogger('ogr2osm')\nogr2osmlogger.setLevel(logging.ERROR)\nogr2osmlogger.addHandler(logging.StreamHandler())\n\n# 2. Required parameters for this example:\n\n# - datasource_parameter is a variable holding the input filename, or a\n#   database connection such as \"PG:dbname=pdx_bldgs user=emma host=localhost\"\ndatasource_parameter = ...\n\n# - in case your datasource is a database, you will need a query\nquery = ...\n\n# - the output file to write\noutput_file = ...\n\n# 3. Create the translation object. If no translation is required you\n#    can use the base class from ogr2osm, otherwise you need to instantiate\n#    a subclass of ogr2osm.TranslationBase\ntranslation_object = ogr2osm.TranslationBase()\n\n# 4. Create the ogr datasource. You can specify a source projection but\n#    EPSG:4326 will be assumed if none is given and if the projection of the\n#    datasource is unknown.\ndatasource = ogr2osm.OgrDatasource(translation_object)\n# Optional constructor parameters:\n# - source_proj4: --proj4 parameter\n# - source_epsg: --epsg parameter\n# - gisorder: --gis-order parameter\n# - source_encoding: --encoding parameter\ndatasource.open_datasource(datasource_parameter)\n# Optional open_datasource parameters:\n# - prefer_mem_copy: --no-memory-copy parameter\n\n# 5. If the datasource is a database then you must set the query to use.\n#    Setting the query for any other datasource is useless but not an error.\ndatasource.set_query(query)\n\n# 6. Instantiate the ogr to osm converter class ogr2osm.OsmData and start the\n#    conversion process\nosmdata = ogr2osm.OsmData(translation_object)\n# Optional constructor parameters:\n# - rounding_digits: --rounding-digits parameter\n# - max_points_in_way: --split-ways parameter\n# - add_bounds: --add-bounds parameter\n# - start_id: --id parameter\nosmdata.process(datasource)\n\n# 7. Instantiate either ogr2osm.OsmDataWriter or ogr2osm.PbfDataWriter and\n#    invoke output() to write the output file. If required you can write a\n#    custom datawriter class by subclassing ogr2osm.DataWriterBase.\ndatawriter = ogr2osm.OsmDataWriter(output_file)\n# Optional constructor parameters:\n# - never_upload: --never-upload parameter\n# - no_upload_false: --no-upload-false parameter\n# - never_download: --never-download parameter\n# - locked: --locked parameter\n# - significant_digits: --significant-digits parameter\n# - suppress_empty_tags: --suppress-empty-tags parameter\nosmdata.output(datawriter)\n```\n\nRefer to [contour-osm](https://github.com/roelderickx/contour-osm) for a complete example with a custom translation class and coordinate reprojection.\n\n## Translations\n\nogr2osm supports custom translations for your data. To do this you need to subclass ogr2osm.TranslationBase and override the methods in which you want to run custom code.\n\n```python\nclass TranslationBase:\n    def filter_layer(self, layer):\n        '''\n        Override this method if you want to modify the given layer,\n        or return None if you want to suppress the layer\n        '''\n        return layer\n\n\n    def filter_feature(self, ogrfeature, layer_fields, reproject):\n        '''\n        Override this method if you want to modify the given feature,\n        or return None if you want to suppress the feature\n        Note 1: layer_fields contains a tuple (index, field_name, field_type)\n        Note 2: reproject is a function to convert the feature to 4326 projection\n        with coordinates in traditional gis order. However, do not return the\n        reprojected feature since it will be done again in ogr2osm.\n        '''\n        return ogrfeature\n\n\n    def filter_tags(self, tags):\n        '''\n        Override this method if you want to modify or add tags to the xml output\n        '''\n        return tags\n\n\n    def merge_tags(self, geometry_type, tags_existing_geometry, tags_new_geometry):\n        '''\n        This method is called when two geometries are found to be duplicates.\n        Override this method if you want to customize how the tags of both\n        geometries should be merged. The parameter geometry_type is a string\n        containing either 'node', 'way', 'reverse_way' or 'relation', depending\n        on which type of geometry the tags belong to. Type 'reverse_way' is a\n        special case of 'way', it indicates both ways are duplicates when one\n        of them is reversed. The parameter tags_existing_geometry is a\n        dictionary containing a list of values for each key, the list will be\n        concatenated to a comma-separated string when writing the output file.\n        The parameter tags_new_geometry is a dictionary containing a string\n        value for each key.\n        Return None if the tags cannot be merged. As a result both geometries\n        will be included in the output file, each with their respective tags.\n        Warning: not merging geometries will lead to invalid osm files and\n        has an impact on the detection of duplicates among their parents.\n        '''\n        tags = {}\n        # ...\n        # Default behaviour: add all tags from both geometries\n        # If both contain the same key with a different value, then relate\n        # the key to a comma separated list of both values\n        # ...\n        return tags\n\n\n    def get_unique_node_identifier(self, rounded_x, rounded_y, tags):\n        '''\n        DEPRECATED -- USE merge_tags IF YOU WANT TO DISABLE MERGING!\n        '''\n        return (rounded_x, rounded_y)\n\n\n    def process_feature_post(self, osmgeometry, ogrfeature, ogrgeometry):\n        '''\n        This method is called after the creation of an OsmGeometry object. The\n        ogr feature and ogr geometry used to create the object are passed as\n        well. Note that any return values will be discarded by ogr2osm.\n        '''\n        pass\n\n\n    def process_output(self, osmnodes, osmways, osmrelations):\n        '''\n        Override this method if you want to modify the list of nodes, ways or\n        relations, or take any additional actions right before writing the\n        objects to the OSM file. Note that any return values will be discarded\n        by ogr2osm.\n        '''\n        pass\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/roelderickx/ogr2osm",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ogr2osm",
    "package_url": "https://pypi.org/project/ogr2osm/",
    "platform": null,
    "project_url": "https://pypi.org/project/ogr2osm/",
    "project_urls": {
      "Homepage": "https://github.com/roelderickx/ogr2osm"
    },
    "release_url": "https://pypi.org/project/ogr2osm/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A tool for converting ogr-readable files like shapefiles into .osm or .pbf data",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15587699,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc07bd6325c5be467cdfbd59e9ceb198791baa1b8e829684a65114c1b1897781",
          "md5": "3ac868c311e4cfaa1ac5845be45fde8c",
          "sha256": "7b809345faf7e830f5087e5886fb890049e1a1af144cca331da1b1f81b54ffd4"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ac868c311e4cfaa1ac5845be45fde8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29019,
        "upload_time": "2021-08-06T05:50:27",
        "upload_time_iso_8601": "2021-08-06T05:50:27.516911Z",
        "url": "https://files.pythonhosted.org/packages/dc/07/bd6325c5be467cdfbd59e9ceb198791baa1b8e829684a65114c1b1897781/ogr2osm-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35019172d8e3a11470307df370dea3945d403b6b709cdc4a823c05449ae3d94c",
          "md5": "f504ba3c0b34b77e7728ad7be58792a6",
          "sha256": "18187db9dbec74f141836ebd9db731b9f11e4df4d695a9d1a23583fe705eeb96"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f504ba3c0b34b77e7728ad7be58792a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27006,
        "upload_time": "2021-08-06T05:50:29",
        "upload_time_iso_8601": "2021-08-06T05:50:29.060617Z",
        "url": "https://files.pythonhosted.org/packages/35/01/9172d8e3a11470307df370dea3945d403b6b709cdc4a823c05449ae3d94c/ogr2osm-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74508e63cf77bb1368e5d20f8b732154b7df0aa814505506ae1be1837b271c1e",
          "md5": "3840d51e1a67a675a47fb2872d90b221",
          "sha256": "31c70a6f1f664c44793bd107bd706b07d01843e61112a38e83a075bde25d5e77"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3840d51e1a67a675a47fb2872d90b221",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29013,
        "upload_time": "2021-08-06T05:51:24",
        "upload_time_iso_8601": "2021-08-06T05:51:24.628069Z",
        "url": "https://files.pythonhosted.org/packages/74/50/8e63cf77bb1368e5d20f8b732154b7df0aa814505506ae1be1837b271c1e/ogr2osm-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4210f8656d8f6763ca9c0cd081c9733a6411413ec053f4fbab48276fc92f7b10",
          "md5": "d0ce9ad8d99454caa39fe1b05f4ecacf",
          "sha256": "48222615b19faa9168b8786b502140af349a73901f88a5f36fb10135edb52cd6"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d0ce9ad8d99454caa39fe1b05f4ecacf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26254,
        "upload_time": "2021-08-06T05:51:26",
        "upload_time_iso_8601": "2021-08-06T05:51:26.705103Z",
        "url": "https://files.pythonhosted.org/packages/42/10/f8656d8f6763ca9c0cd081c9733a6411413ec053f4fbab48276fc92f7b10/ogr2osm-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d8fc565f15c827ec1969f2a3f87591be2259474fb24585a0362b4d5b5e72c05",
          "md5": "d0fcd5e592fd157942323875345035f4",
          "sha256": "e7fb223b8f016655c02ed596f7c0c6c5db318d10cce9e9c622821af974c60756"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0fcd5e592fd157942323875345035f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31681,
        "upload_time": "2021-08-06T05:51:49",
        "upload_time_iso_8601": "2021-08-06T05:51:49.740257Z",
        "url": "https://files.pythonhosted.org/packages/2d/8f/c565f15c827ec1969f2a3f87591be2259474fb24585a0362b4d5b5e72c05/ogr2osm-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5233b8f1f773ab118d12afe2e9ef01750211b6da2fb6a368919abe01f3811d4",
          "md5": "bded70b3e0edb98d1d5377fd487c578e",
          "sha256": "fb346842444800a9578da92c8afea526f85beebf03ea0ada52dc272b2d7cedcb"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bded70b3e0edb98d1d5377fd487c578e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28726,
        "upload_time": "2021-08-06T05:51:51",
        "upload_time_iso_8601": "2021-08-06T05:51:51.022438Z",
        "url": "https://files.pythonhosted.org/packages/b5/23/3b8f1f773ab118d12afe2e9ef01750211b6da2fb6a368919abe01f3811d4/ogr2osm-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e62918e09fcd874ea21add26ece8f13c698c720fc879f134129b4de503d1a542",
          "md5": "fdcecc3636592b29e2c3f24fca3e4211",
          "sha256": "64208785d08099ac08f6117f5601a07e5e30ac8dcb97eaeb052d61846ac83db5"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdcecc3636592b29e2c3f24fca3e4211",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31989,
        "upload_time": "2021-11-11T13:17:12",
        "upload_time_iso_8601": "2021-11-11T13:17:12.690870Z",
        "url": "https://files.pythonhosted.org/packages/e6/29/18e09fcd874ea21add26ece8f13c698c720fc879f134129b4de503d1a542/ogr2osm-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5917f4ea80a948cdae4e44de62511868cc0c6a3d9ae940c3412d63b743dad3a5",
          "md5": "84071934d5d34e99b291c4c1c5b2c72f",
          "sha256": "fb0dfa6b3b48394e7df1bd3171852b3dc657c247061827a06e28d2b602878e51"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "84071934d5d34e99b291c4c1c5b2c72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29086,
        "upload_time": "2021-11-11T13:17:14",
        "upload_time_iso_8601": "2021-11-11T13:17:14.226725Z",
        "url": "https://files.pythonhosted.org/packages/59/17/f4ea80a948cdae4e44de62511868cc0c6a3d9ae940c3412d63b743dad3a5/ogr2osm-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bf24bf6db3bbc346b2bc90290d72db312393fa0a144f6742445dc5eb997194a",
          "md5": "f6139ccbf5995281479036f9f5934536",
          "sha256": "8eaa69de46f6d31d131be0c223c61e75c8867405e9d890ac57336a0d95c440e7"
        },
        "downloads": -1,
        "filename": "ogr2osm-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f6139ccbf5995281479036f9f5934536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26972,
        "upload_time": "2022-10-30T16:21:23",
        "upload_time_iso_8601": "2022-10-30T16:21:23.381228Z",
        "url": "https://files.pythonhosted.org/packages/4b/f2/4bf6db3bbc346b2bc90290d72db312393fa0a144f6742445dc5eb997194a/ogr2osm-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bf24bf6db3bbc346b2bc90290d72db312393fa0a144f6742445dc5eb997194a",
        "md5": "f6139ccbf5995281479036f9f5934536",
        "sha256": "8eaa69de46f6d31d131be0c223c61e75c8867405e9d890ac57336a0d95c440e7"
      },
      "downloads": -1,
      "filename": "ogr2osm-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f6139ccbf5995281479036f9f5934536",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26972,
      "upload_time": "2022-10-30T16:21:23",
      "upload_time_iso_8601": "2022-10-30T16:21:23.381228Z",
      "url": "https://files.pythonhosted.org/packages/4b/f2/4bf6db3bbc346b2bc90290d72db312393fa0a144f6742445dc5eb997194a/ogr2osm-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}