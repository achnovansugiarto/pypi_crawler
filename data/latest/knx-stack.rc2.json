{
  "info": {
    "author": "Maja Massarini",
    "author_email": "maja.massarini@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.8",
      "Topic :: Communications"
    ],
    "description": "# knx-stack\n\n[![Build Status](https://travis-ci.com/majamassarini/knx-stack.svg?branch=master)](https://travis-ci.com/majamassarini/knx-stack)\n[![codecov](https://codecov.io/gh/majamassarini/knx-stack/branch/master/graph/badge.svg?token=HQ27JK26MT)](https://codecov.io/gh/majamassarini/knx-stack)\n[![Documentation Status](https://readthedocs.org/projects/knx-stack/badge/?version=latest)](https://knx-stack.readthedocs.io/en/latest/?badge=latest)\n\nA Python 3 KNX stack, not complete but easily extensible.\n\nIt is able to *encode/decode* knx messages for both **USB HID** and **KNXnet IP**.\n\nIt can be used with an **asynchronous** or **synchronous** client.\n\n## Examples\n\n### Setup \n```python\n    >>> import knx_stack\n    >>> individual_address = knx_stack.Address(0x0001)\n    >>> abcd = knx_stack.GroupAddress(free_style=0xABCD)\n    >>> abce = knx_stack.GroupAddress(three_level_style=knx_stack.address.ThreeLevelStyle(main=21, middle=3, sub=206))\n    >>> abcf = knx_stack.GroupAddress(two_level_style=knx_stack.address.TwoLevelStyle(main=21, sub=975))\n\n    >>> asap_1 = knx_stack.ASAP(1, \"on/off light\")\n    >>> asap_2 = knx_stack.ASAP(2, \"info on/off light\")\n    >>> asap_3 = knx_stack.ASAP(3, \"two temperature sensors (together)\")\n\n    >>> address_table = knx_stack.AddressTable(individual_address, [], 255)\n    >>> association_table = knx_stack.AssociationTable(address_table, [])\n    >>> association_table.associate(asap_1, [abcd])\n    >>> association_table.associate(asap_2, [abcd])\n    >>> association_table.associate(asap_3, [abce, abcf])\n\n    >>> group_object_table = knx_stack.GroupObjectTable({asap_1: knx_stack.datapointtypes.DPT_Switch,\n    ...                                                  asap_2: knx_stack.datapointtypes.DPT_Switch,\n    ...                                                  asap_3: knx_stack.datapointtypes.DPT_Value_Temp,\n    ...                                                  })\n\n    >>> association_table\n    AssociationTable: asap -> addresses\n        0 (individual address) -> [0x0001]\n        1 (on/off light) -> [(0xABCD 21/973 21/3/205)]\n        2 (info on/off light) -> [(0xABCD 21/973 21/3/205)]\n        3 (two temperature sensors (together)) -> [(0xABCE 21/974 21/3/206), (0xABCF 21/975 21/3/207)]\n    AddressTable: individual address: 0x0001, max_size=255\n    <BLANKLINE>\n        tsap -> individual address\n        0 -> 0x0001\n        tsap -> group address (hex_free_style two_level_style three_level_style)\n        1 -> (0xABCD 21/973 21/3/205)\n        2 -> (0xABCE 21/974 21/3/206)\n        3 -> (0xABCF 21/975 21/3/207)\n    <BLANKLINE>\n\n    >>> group_object_table\n    GroupObjectTable: ASAP -> datapointtype\n        1 (on/off light) -> DPT_Switch\n        2 (info on/off light) -> DPT_Switch\n        3 (two temperature sensors (together)) -> DPT_Value_Temp\n    <BLANKLINE>\n```\n\n### USB HID decode/encode\n\n```python\n    >>> state = knx_stack.State(knx_stack.state.Medium.usb_hid, association_table, group_object_table)\n\n    >>> msg = knx_stack.Msg.make_from_str(\"0113130008000B010300002900BCE00001ABCD010080\")\n    >>> knx_stack.decode_msg(state, msg)\n    [GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 1 (on/off light)), GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 2 (info on/off light))]\n    >>> msg = knx_stack.Msg.make_from_str(\"0113130008000B010300002900BCE00001ABCC010081\")\n    >>> knx_stack.decode_msg(state, msg)\n    []\n\n    >>> msg = knx_stack.Msg.make_from_str(\"0113140008000C010300002900B4E00001ABCE02008005\")\n    >>> knx_stack.decode_msg(state, msg)\n    [GroupValueWriteInd (DPT_Value_Temp: {'decoded_value': 0.05} for asap 3 (two temperature sensors (together)))]\n\n    >>> req = knx_stack.layer.application.a_group_value_read.req.Msg(asap=asap_3)\n    >>> knx_stack.encode_msg(state, req)\n    0113130008000B01030000110096E00000ABCE010000\n\n    >>> dpt = knx_stack.datapointtypes.DPT_Value_Temp()\n    >>> dpt.encode(0.05)\n    >>> req = knx_stack.layer.application.a_group_value_write.req.Msg(asap=asap_3, dpt=dpt)\n    >>> knx_stack.encode_msg(state, req)\n    0113150008000D01030000110096E00000ABCE0300800005\n```\n\n### KNXnet IP decode/encode\n\n```python\n    >>> state = knx_stack.knxnet_ip.State(knx_stack.state.Medium.knxnet_ip, association_table, group_object_table)\n\n    >>> state.sequence_counter_remote = 1\n    >>> msg = knx_stack.knxnet_ip.Msg.make_from_str(\"061004200015047401002900BCE00001ABCD010080\")\n    >>> knx_stack.decode_msg(state, msg)\n    [TunnelingReq(sequence counter=1, status=<ErrorCodes.E_NO_ERROR: 0>), GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 1 (on/off light)), GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 2 (info on/off light))]\n    >>> msg = knx_stack.knxnet_ip.Msg.make_from_str(\"061004200016047401002900B4E00001ABCE02008005\")\n    >>> knx_stack.decode_msg(state, msg)\n    [TunnelingReq(sequence counter=1, status=<ErrorCodes.E_NO_ERROR: 0>), GroupValueWriteInd (DPT_Value_Temp: {'decoded_value': 0.05} for asap 3 (two temperature sensors (together)))]\n    >>> req = knx_stack.layer.application.a_group_value_read.req.Msg(asap=asap_3)\n    >>> knx_stack.encode_msg(state, req)\n    06100420001504000000110096E00000ABCE010000\n\n    >>> dpt = knx_stack.datapointtypes.DPT_Value_Temp()\n    >>> dpt.encode(0.05)\n    >>> req = knx_stack.layer.application.a_group_value_write.req.Msg(asap=asap_3, dpt=dpt)\n    >>> knx_stack.encode_msg(state, req)\n    06100420001704000000110096E00000ABCE0300800005\n```\n\n### Encode from a dictionary\n\n```python\n    >>> state = knx_stack.State(knx_stack.state.Medium.usb_hid, association_table, group_object_table)\n\n    >>> factory = knx_stack.datapointtypes.DPT_Factory()\n    >>> dpt = factory.make(\"DPT_Switch\", {\"action\": \"off\"})\n    >>> req = knx_stack.layer.application.a_group_value_write.req.Msg(asap=asap_1, dpt=dpt)\n    >>> req\n    GroupValueWriteReq (DPT_Switch {'action': 'off'} for asap 1 (on/off light))\n    >>> knx_stack.encode_msg(state, req)\n    0113130008000B01030000110096E00000ABCD010080\n```\n\n### Decode to a dictionary\n\n```python\n    >>> state = knx_stack.State(knx_stack.state.Medium.usb_hid, association_table, group_object_table)\n\n    >>> msg = knx_stack.knxnet_ip.Msg.make_from_str(\"0113130008000B01030000290096E00000ABCD010080\")\n    >>> msgs = knx_stack.decode_msg(state, msg)\n    >>> msgs\n    [GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 1 (on/off light)), GroupValueWriteInd (DPT_Switch {'action': 'off'} for asap 2 (info on/off light))]\n    >>> factory = knx_stack.datapointtypes.Description_Factory()\n    >>> factory.make(msgs[0].dpt)\n    ('DPT_Switch', {'action': 'off'})\n```\n\n\n## Installation\n\n```\npip install knx-stack\n```\n\n## Diving In\n\n[Documentation](https://knx-stack.readthedocs.io/en/latest/?badge=latest)\n\n## Contributing\n\nPull requests are welcome, and I am waiting for them.\n\n## License\n\nknx-stack is licensed under the MIT license.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/majamassarini/knx-stack",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "knx-stack",
    "package_url": "https://pypi.org/project/knx-stack/",
    "platform": "",
    "project_url": "https://pypi.org/project/knx-stack/",
    "project_urls": {
      "Homepage": "https://github.com/majamassarini/knx-stack"
    },
    "release_url": "https://pypi.org/project/knx-stack/0.9.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python3 KNX stack for USB HID and KNXnet IP",
    "version": "0.9.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12323025,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1072f242ac050ff65f47624a48ff27d247d28d13f8e9666a6dad2a4696b37d4",
          "md5": "02a2c557b579bb69dafeb919ac06b9af",
          "sha256": "10f314934c80443b9263b2dc24dd98f29290dc3f298cd6c31b16e4a3b3a12a73"
        },
        "downloads": -1,
        "filename": "knx-stack-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02a2c557b579bb69dafeb919ac06b9af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48211,
        "upload_time": "2021-07-26T19:21:31",
        "upload_time_iso_8601": "2021-07-26T19:21:31.482788Z",
        "url": "https://files.pythonhosted.org/packages/e1/07/2f242ac050ff65f47624a48ff27d247d28d13f8e9666a6dad2a4696b37d4/knx-stack-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f278ce98aa4b65ab94c0fecc859414ecd601896e9ef5fb466d951cfc5c88e6f1",
          "md5": "3b143996ba6304b3d064944d968ebd48",
          "sha256": "7460cb214586628d528e9af9a71d167e770cfc997c2ae57f931b59a7e9795e9c"
        },
        "downloads": -1,
        "filename": "knx_stack-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b143996ba6304b3d064944d968ebd48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 126235,
        "upload_time": "2021-12-16T11:20:56",
        "upload_time_iso_8601": "2021-12-16T11:20:56.874872Z",
        "url": "https://files.pythonhosted.org/packages/f2/78/ce98aa4b65ab94c0fecc859414ecd601896e9ef5fb466d951cfc5c88e6f1/knx_stack-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da5ec0e6692a415599a90c3c483f91ab118281061a3337122cabb01ead22f05",
          "md5": "bbab241b0336a86806316882b8cd7efa",
          "sha256": "9062e69be2890c9ec12b951255109a4458231a02b148c506aee206f319208d50"
        },
        "downloads": -1,
        "filename": "knx-stack-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bbab241b0336a86806316882b8cd7efa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48920,
        "upload_time": "2021-12-16T11:20:58",
        "upload_time_iso_8601": "2021-12-16T11:20:58.908083Z",
        "url": "https://files.pythonhosted.org/packages/8d/a5/ec0e6692a415599a90c3c483f91ab118281061a3337122cabb01ead22f05/knx-stack-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f278ce98aa4b65ab94c0fecc859414ecd601896e9ef5fb466d951cfc5c88e6f1",
        "md5": "3b143996ba6304b3d064944d968ebd48",
        "sha256": "7460cb214586628d528e9af9a71d167e770cfc997c2ae57f931b59a7e9795e9c"
      },
      "downloads": -1,
      "filename": "knx_stack-0.9.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b143996ba6304b3d064944d968ebd48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 126235,
      "upload_time": "2021-12-16T11:20:56",
      "upload_time_iso_8601": "2021-12-16T11:20:56.874872Z",
      "url": "https://files.pythonhosted.org/packages/f2/78/ce98aa4b65ab94c0fecc859414ecd601896e9ef5fb466d951cfc5c88e6f1/knx_stack-0.9.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8da5ec0e6692a415599a90c3c483f91ab118281061a3337122cabb01ead22f05",
        "md5": "bbab241b0336a86806316882b8cd7efa",
        "sha256": "9062e69be2890c9ec12b951255109a4458231a02b148c506aee206f319208d50"
      },
      "downloads": -1,
      "filename": "knx-stack-0.9.2.tar.gz",
      "has_sig": false,
      "md5_digest": "bbab241b0336a86806316882b8cd7efa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48920,
      "upload_time": "2021-12-16T11:20:58",
      "upload_time_iso_8601": "2021-12-16T11:20:58.908083Z",
      "url": "https://files.pythonhosted.org/packages/8d/a5/ec0e6692a415599a90c3c483f91ab118281061a3337122cabb01ead22f05/knx-stack-0.9.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}