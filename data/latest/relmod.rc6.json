{
  "info": {
    "author": "Roger D. Serwy",
    "author_email": "roger.serwy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "# `relmod` - auto-reloading module development library\n\nPlace your Python code in a directory and start using it immediately.\n\n* Import file names as auto-deep-reloading modules.\n* Import directories as auto-reloading namespaces.\n* Run `unittest` cases easily.\n\nRunning the following:\n\n    import relmod\n\n    with open('./myfunc.py', 'w') as f:    # create a file with a function\n        f.write(\"\"\"\n    def add(x, y):\n        return x + y\n    \"\"\")\n\n    myfunc = relmod.at('./myfunc.py')      # load file as a module\n\n    print(myfunc.add(3, 4))                # call the function\n\n    import unittest\n    class TestMyFunc(unittest.TestCase):   # create a test\n        def test_add(self):\n            self.assertEqual(\n                myfunc.add(3, 4), 7)\n\n    relmod.runtest(TestMyFunc)             # run the test\n\nproduces this output:\n\n    7\n    test_add (__main__.TestMyFunc) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 1 test in 0.003s\n\n    OK\n\n\n## Motivation\n\nThe `relmod` library allows for placing helper modules and functions\nin a directory and making them quickly available, with reloading if needed.\nThis helps with converting existing notebook cells into re-usable\nlibrary code.\n\nTests for these library functions can be developed easily along the way.\n\nWhen you're finished, you no longer need `relmod`. You have a readily usable\nPython library. Packaging is up to you.\n\n\n## Examples\n\nUse the current working directory as a namespace module:\n\n    lib = relmod.at('.')\n\nEntering folders that are not valid Python identifiers is supported:\n\n    py = lib['./Documents and Settings'].sub.folders\n\nRelative directories can be given:\n\n    parent = lib['../']  # go up a directory, using []\n\n\n### Importing\n\nImport an object from a module into the global namespace:\n\n    relmod.imp('./myfunc.py', 'add')\n\nRename references in the import using `as`\n\n    relmod.imp('./myfunc.py', 'add as add2')\n    print(add2(3, 4))\n\nNames can be comma-separated, e.g. `'add, sub, mult, div'`.\n\n\nImport a filename as another name:\n\n    relmod.imp('./myfunc.py as mfunc')\n    mfunc.add(1, 2)\n\n__Note:__ Non-module objects imported using `relmod.imp` are not automatically\nreloaded if changes occur to the file. You will need to reimport them.\n\n\n### Cell Mode\n\nThe `.install` function will use the current working directory\nif `__file__` is not defined. This is useful in a cell-mode\nenvironment.\n\n    here = relmod.install(globals())\n\nUsing `.install` allows for relative imports within `__main__`:\n\n    from . import myfunc\n    print(myfunc.add(3, 4))\n\nUse the parent directory of `__file__` as a namespace:\n\n    here = relmod.up(__file__)\n\n\n### Top-level Modules\n\nYou can register a directory or file as a top-level module and then import it.\n\n    relmod.toplevel('myfunc', './myfunc.py')\n    import myfunc\n    myfunc.add(3, 4)\n\n\n### Testing\n\nRun a single test case method:\n\n    relmod.runtest(TestMyFunc, 'test_add')\n\nFind and run all `unittest.TestCase` classes in a module:\n\n    relmod.testmod(mod)\n\nOnly run a single class in a test file and exit:\n\n    @relmod.testonly()\n    class Test(unittest.TestCase):\n        ...\n\n        @relmod.testfocus  # optionally focus only on this test\n        def test_thing(self):\n            ...\n\n\n## How it works\n\nThe `.imp`, `.at`, `.up`, `.use`, and `.install` functions return `FakeModuleType`\nobjects wrapped in a `ModuleProxy` object that trigger reloading when\naccessing its attributes, if needed. Namespace and `__init__.py` fake\nmodules perform auto-reloading on attribute access as well.\n\nThe files and directories accessed via `relmod` are not found in\n`sys.modules`. These \"fake modules\" are handled separately and\nbehave as regular Python modules, with enhancements. Relative\nimports within a fake module perform dependency tracking,\nallowing for lazy deep-reloading of modules.\n\nThe auto-reloading of a module's source __will not hot-patch__ existing\nobjects like the `%autoreload` magic from IPython. Hot-patching makes\ncertain assumptions about your code, and if violated, will introduce\nsubtle bugs.\n\n### Relative Path Resolution\n\nThe `relmod.at` and `relmod.up` functions use `os.getcwd()` when resolving\nrelative paths.\n\nThe `relmod.use` and `relmod.imp` functions use `__file__` from the calling\nframe's globals dictionary, and uses `os.getcwd()` as a fallback if `__file__`\nis not defined.\n\nIt is recommended to use `.use` and `.imp` in library scripts where relative\npaths must resolve relative to the script's file path rather than the current\nworking directory.\n\nHere is a comparison of different ways to resolve the path `\".\"`:\n\n    lib = relmod.at('.')     # resolved using os.getcwd()\n\n    lib = relmod.use('.')    # resolved using __file__\n\n    relmod.imp('. as lib')   # resolved using __file__,\n                             # injects `lib` into caller's global namespace\n\n\n## Other Utilities\n\nThere are other utilities in `relmod` that are useful for quick development.\n\nAPI | Description\n:-- | :--\n`relmod.execfile()`  | Executes a file's contents in a provided namespace\n`relmod.auto`        | Auto-imports toplevel modules on attribute access\n`relmod.site`        | Predefined site module names, see `fakesite.py`\n\n\n## Install\n\n    pip3 install relmod\n\n\n## Zen\n* Beautiful is better than ugly.\n    - `relmod` is a useful alternative to `importlib.reload`\n       and `sys.path` hacking.\n\n* Explicit is better than implicit.\n    - If you want a file, request it.\n\n* Namespaces are one honking great idea -- let's do more of those!\n    - `relmod` turns the filesystem into a namespace\n\n* There should be one-- and preferably only one --obvious way to do it.\n    - `relmod` is the way ;-)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/serwy/relmod",
    "keywords": "reload module",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "relmod",
    "package_url": "https://pypi.org/project/relmod/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/relmod/",
    "project_urls": {
      "Homepage": "http://github.com/serwy/relmod"
    },
    "release_url": "https://pypi.org/project/relmod/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Auto-Reloadable Modules and Namespaces",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12583832,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1533a47370d47b5316dee49fa763e2072b9b31522f76cfea7c733c3b88e69f6d",
          "md5": "47f1affc146711af4777beffb8e72ac1",
          "sha256": "954294930f143164078929126c1f8a4cd294235071ffd1c46947bd4680a56e0d"
        },
        "downloads": -1,
        "filename": "relmod-0.0.0.zip",
        "has_sig": false,
        "md5_digest": "47f1affc146711af4777beffb8e72ac1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2509,
        "upload_time": "2021-05-18T14:22:24",
        "upload_time_iso_8601": "2021-05-18T14:22:24.530988Z",
        "url": "https://files.pythonhosted.org/packages/15/33/a47370d47b5316dee49fa763e2072b9b31522f76cfea7c733c3b88e69f6d/relmod-0.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e720c9e4f178350ce8df88788adadebbbdf68c66fd1808b1f33aeda4d7fbbe79",
          "md5": "49866f67ec7f43e23e127e481b7f0cf1",
          "sha256": "a9eaa834cd83a52e1237419f7ba119ea92c2db16cdf7f1997e0473c607c37d2e"
        },
        "downloads": -1,
        "filename": "relmod-0.4.0.zip",
        "has_sig": false,
        "md5_digest": "49866f67ec7f43e23e127e481b7f0cf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27002,
        "upload_time": "2021-05-22T17:42:53",
        "upload_time_iso_8601": "2021-05-22T17:42:53.206743Z",
        "url": "https://files.pythonhosted.org/packages/e7/20/c9e4f178350ce8df88788adadebbbdf68c66fd1808b1f33aeda4d7fbbe79/relmod-0.4.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3d9733f8df8a5ce5c3b58032b17470a58caac190d8f8accbb7abf2ac7f9cfea",
          "md5": "118c938e0bd81459ee535b57918b57a7",
          "sha256": "6296174536a59056aa654102cb20108b9f915c90ed8d03879f427b725b1b191d"
        },
        "downloads": -1,
        "filename": "relmod-0.4.1.zip",
        "has_sig": false,
        "md5_digest": "118c938e0bd81459ee535b57918b57a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27635,
        "upload_time": "2021-05-29T16:53:40",
        "upload_time_iso_8601": "2021-05-29T16:53:40.632693Z",
        "url": "https://files.pythonhosted.org/packages/a3/d9/733f8df8a5ce5c3b58032b17470a58caac190d8f8accbb7abf2ac7f9cfea/relmod-0.4.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43f758b772f974c674a8207bc7a8f664eb0f540c8fcbf5e0a32805e9e469958f",
          "md5": "1559b667c46b78876cb156d46abaf760",
          "sha256": "faca6e2ff045735b9a29f90927a7c57d0b5a3aa1cdc793e8a5e17c356d268fa7"
        },
        "downloads": -1,
        "filename": "relmod-0.4.2.zip",
        "has_sig": false,
        "md5_digest": "1559b667c46b78876cb156d46abaf760",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27750,
        "upload_time": "2021-10-02T14:41:01",
        "upload_time_iso_8601": "2021-10-02T14:41:01.590803Z",
        "url": "https://files.pythonhosted.org/packages/43/f7/58b772f974c674a8207bc7a8f664eb0f540c8fcbf5e0a32805e9e469958f/relmod-0.4.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "662a7ea8e416dea012b5b7633d84fa3fc71605208fe6ba7c6bfb1d58105906ef",
          "md5": "e312dc2bca60c4cb2dc5040d92d297b4",
          "sha256": "4102f1e2a3161b24ca0216c0ee76cb6302d8916ba2f2ee156216d8f01197b86c"
        },
        "downloads": -1,
        "filename": "relmod-0.4.3.zip",
        "has_sig": false,
        "md5_digest": "e312dc2bca60c4cb2dc5040d92d297b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29456,
        "upload_time": "2021-11-07T19:34:18",
        "upload_time_iso_8601": "2021-11-07T19:34:18.045289Z",
        "url": "https://files.pythonhosted.org/packages/66/2a/7ea8e416dea012b5b7633d84fa3fc71605208fe6ba7c6bfb1d58105906ef/relmod-0.4.3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91abca76d42d9b8348f02917276c0fe5dd52d5c3b2a5444a2cdd6438125929a1",
          "md5": "f0e9e31c996aff4fc163efa045a70d3c",
          "sha256": "880e25b502d3a76cc161d0257d78ea29e6ab83fb891194e17c9c70075ef0f861"
        },
        "downloads": -1,
        "filename": "relmod-0.5.0.zip",
        "has_sig": false,
        "md5_digest": "f0e9e31c996aff4fc163efa045a70d3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31160,
        "upload_time": "2022-01-15T17:30:38",
        "upload_time_iso_8601": "2022-01-15T17:30:38.959795Z",
        "url": "https://files.pythonhosted.org/packages/91/ab/ca76d42d9b8348f02917276c0fe5dd52d5c3b2a5444a2cdd6438125929a1/relmod-0.5.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91abca76d42d9b8348f02917276c0fe5dd52d5c3b2a5444a2cdd6438125929a1",
        "md5": "f0e9e31c996aff4fc163efa045a70d3c",
        "sha256": "880e25b502d3a76cc161d0257d78ea29e6ab83fb891194e17c9c70075ef0f861"
      },
      "downloads": -1,
      "filename": "relmod-0.5.0.zip",
      "has_sig": false,
      "md5_digest": "f0e9e31c996aff4fc163efa045a70d3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31160,
      "upload_time": "2022-01-15T17:30:38",
      "upload_time_iso_8601": "2022-01-15T17:30:38.959795Z",
      "url": "https://files.pythonhosted.org/packages/91/ab/ca76d42d9b8348f02917276c0fe5dd52d5c3b2a5444a2cdd6438125929a1/relmod-0.5.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}