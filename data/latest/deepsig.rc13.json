{
  "info": {
    "author": "Dennis Ulmer",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# deep-significance: Easy and Better Significance Testing for Deep Neural Networks\n\n[![Build Status](https://travis-ci.com/Kaleidophon/deep-significance.svg?branch=main)]()\n[![Coverage Status](https://coveralls.io/repos/github/Kaleidophon/deep-significance/badge.svg?branch=main&service=github)](https://coveralls.io/github/Kaleidophon/deep-significance?branch=main)\n[![Compatibility](https://img.shields.io/badge/python-v3.7-blue)]()\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n[![DOI](https://zenodo.org/badge/341677886.svg)](https://zenodo.org/badge/latestdoi/341677886)\n\n![](img/logo.png)\n\n**Contents**\n\n* [:interrobang: Why](#interrobang-why)\n* [:inbox_tray: Installation](#inbox_tray-installation)\n* [:bookmark: Examples](#bookmark-examples)\n  * [Intermezzo: Almost Stochastic Order - a better significance test for Deep Neural Networks](#intermezzo-almost-stochastic-order---a-better-significance-test-for-deep-neural-networks)\n  * [Scenario 1: Comparing multiple runs of two models](#scenario-1---comparing-multiple-runs-of-two-models)\n  * [Scenario 2: Comparing multiple runs across datasets](#scenario-2---comparing-multiple-runs-across-datasets) \n  * [Scenario 3: Comparing sample-level scores](#scenario-3---comparing-sample-level-scores)\n  * [Scenario 4: Comparing more than two models](#scenario-4---comparing-more-than-two-models)\n  * [How to report results](#newspaper-how-to-report-results)\n  * [Sample size](#control_knobs-sample-size)\n  * [Other features](#sparkles-other-features)\n  * [General Recommendations & other notes](#general-recommendations) \n* [:mortar_board: Cite](#mortar_board-cite)\n* [:medal_sports: Acknowledgements](#medal_sports-acknowledgements)\n* [:people_holding_hands: Papers using deep-significance](#people_holding_hands-papers-using-deep-significance)\n* [:books: Bibliography](#books-bibliography)\n\n### :interrobang: Why?\n\nAlthough Deep Learning has undergone spectacular growth in the recent decade,\na large portion of experimental evidence is not supported by statistical hypothesis tests. Instead, \nconclusions are often drawn based on single performance scores. \n\nThis is problematic: Neural network display highly non-convex\nloss surfaces (Li et al., 2018) and their performance depends on the specific hyperparameters that were found, or stochastic factors \nlike Dropout masks, making comparisons between architectures more difficult. Based on comparing only (the mean of) a \nfew scores, **we often cannot \nconclude that one model type or algorithm is better than another**.\nThis endangers the progress in the field, as seeming success due to random chance might lead practitioners astray. \n\nFor instance, a recent study in Natural Language Processing by Narang et al. (2021) has found that many modifications proposed to \ntransformers do not actually improve performance. Similar issues are known to plague other fields like e.g., \nReinforcement Learning (Henderson et al., 2018) and Computer Vision (Borji, 2017) as well. \n\nTo help mitigate this problem, this package supplies fully-tested re-implementations of useful functions for significance\ntesting:\n* Statistical Significance tests such as Almost Stochastic Order (del Barrio et al, 2017; Dror et al., 2019), \n  bootstrap (Efron & Tibshirani, 1994) and permutation-randomization (Noreen, 1989).\n* Bonferroni correction methods for multiplicity in datasets (Bonferroni, 1936). \n* Bootstrap power analysis (Yuan & Hayashi, 2003) and other functions to determine the right sample size.\n\nAll functions are fully tested and also compatible with common deep learning data structures, such as PyTorch / \nTensorflow tensors as well as NumPy and Jax arrays.  For examples about the usage, consult the documentation \n[here](https://deep-significance.readthedocs.io/en/latest/) , the scenarios in the section [Examples](#examples) or \nthe [demo Jupyter notebook](https://github.com/Kaleidophon/deep-significance/tree/main/paper/deep-significance%20demo.ipynb).\n\n## :inbox_tray: Installation\n\nThe package can simply be installed using `pip` by running\n\n    pip3 install deepsig\n\nAnother option is to clone the repository and install the package locally:\n\n    git clone https://github.com/Kaleidophon/deep-significance.git\n    cd deep-significance\n    pip3 install -e .\n\n**Warning**: Installed like this, imports will fail when the clones repository is moved.\n\n## :bookmark: Examples\n\n---\n**tl;dr**: Use `aso()` to compare scores for two models. If the returned `eps_min < 0.5`, A is better than B. The lower\n`eps_min`, the more confident the result (we recommend to check `eps_min < 0.2` and record `eps_min` alongside \nexperimental results). \n\n:warning: Testing models with only one set of hyperparameters and only one test set will be able to guarantee superiority\nin all settings. See [General Recommendations & other notes](#general-recommendations).\n\n---\n\nIn the following, we will lay out three scenarios that describe common use cases for ML practitioners and how to apply \nthe methods implemented in this package accordingly. For an introduction into statistical hypothesis testing, please\nrefer to resources such as [this blog post](https://machinelearningmastery.com/statistical-hypothesis-tests/) for a general\noverview or [Dror et al. (2018)](https://www.aclweb.org/anthology/P18-1128.pdf) for a NLP-specific point of view. \n\nWe assume that we have two sets of scores we would like to compare, $\\mathbb{S}_\\mathbb{A}$ and $\\mathbb{S}_\\mathbb{B}$,\nfor instance obtained by running two models $\\mathbb{A}$ and $\\mathbb{B}$ multiple times with a different random seed. \nWe can then define a one-sided test statistic  $\\delta(\\mathbb{S}_\\mathbb{A}, \\mathbb{S}_\\mathbb{B})$ based on the gathered observations. \nAn example of such test statistics is for instance the difference in observation means. We then formulate the following null-hypothesis:\n\n$$\nH_0: \\delta(\\mathbb{S}_\\mathbb{A}, \\mathbb{S}_\\mathbb{B}) \\le 0\n$$\n\nThat means that we actually assume the opposite of our desired case, namely that $\\mathbb{A}$ is not better than $\\mathbb{B}$, \nbut equally as good or worse, as indicated by the value of the test statistic. \nUsually, the goal becomes to reject this null hypothesis using the SST. \n*p*-value testing is a frequentist method in the realm of SST. \nIt introduces the notion of data that *could have been observed* if we were to repeat our experiment again using \nthe same conditions, which we will write with superscript $\\text{rep}$ in order to distinguish them from our actually \nobserved scores (Gelman et al., 2021). \nWe then define the *p*-value as the probability that, under the null hypothesis, the test statistic using replicated \nobservation is larger than or equal to the *observed* test statistic:\n\n$$\np(\\delta(\\mathbb{S}_\\mathbb{A}^\\text{rep}, \\mathbb{S}_\\mathbb{B}^\\text{rep}) \\ge \\delta(\\mathbb{S}_\\mathbb{A}, \\mathbb{S}_\\mathbb{B})|H_0)\n$$\n\nWe can interpret this expression as follows: Assuming that $\\mathbb{A}$ is not better than $\\mathbb{B}$, the test \nassumes a corresponding distribution of statistics that $\\delta$ is drawn from. So how does the observed test statistic \n$\\delta(\\mathbb{S}_\\mathbb{A}, \\mathbb{S}_\\mathbb{B})$ fit in here? This is what the $p$-value expresses: When the \nprobability is high, $\\delta(\\mathbb{S}_\\mathbb{A}, \\mathbb{S}_\\mathbb{B})$ is in line with what we expected under the \nnull hypothesis, so we can *not* reject the null hypothesis, or in other words, we \\emph{cannot} conclude \n$\\mathbb{A}$ to be better than $\\mathbb{B}$. If the probability is low, that means that the observed \n$\\delta(\\mathbb{S}, \\mathbb{S}_\\mathbb{B})$ is quite unlikely under the null hypothesis and that the reverse case is \nmore likely - i.e. that it is likely larger than - and we conclude that $\\mathbb{A}$ is indeed better than \n$\\mathbb{B}$. Note that **the $p$-value does not express whether the null hypothesis is true**. To make our decision \nabout whether or not to reject the null hypothesis, we typically determine a threshold - the significance level \n$\\alpha$, often set to 0.05 - that the *p*-value has to fall below. However, it has been argued that a better practice \ninvolves reporting the *p*-value alongside the results without a pidgeonholing of results into significant and non-significant\n(Wasserstein et al., 2019).\n\n\n### Intermezzo: Almost Stochastic Order - a better significance test for Deep Neural Networks\n\nDeep neural networks are highly non-linear models, having their performance highly dependent on hyperparameters, random \nseeds and other (stochastic) factors. Therefore, comparing the means of two models across several runs might not be \nenough to decide if a model A is better than B. In fact, **even aggregating more statistics like standard deviation, minimum\nor maximum might not be enough** to make a decision. For this reason, del Barrio et al. (2017) and Dror et al. (2019) \nintroduced *Almost Stochastic Order* (ASO), a test to compare two score distributions. \n\nIt builds on the concept of *stochastic order*: We can compare two distributions and declare one as *stochastically dominant*\nby comparing their cumulative distribution functions: \n\n![](img/so.png)\n\nHere, the CDF of A is given in red and in green for B. If the CDF of A is lower than B for every $x$, we know the \nalgorithm A to score higher. However, in practice these cases are rarely so clear-cut (imagine e.g. two normal \ndistributions with the same mean but different variances).\nFor this reason, del Barrio et al. (2017) and Dror et al. (2019) consider the notion of *almost stochastic dominance* \nby quantifying the extent to which stochastic order is being violated (red area):\n\n![](img/aso.png)\n\nASO returns a value $\\epsilon_\\text{min}$, which expresses (an upper bound to) the amount of violation of stochastic order. If \n$\\epsilon_\\text{min} < \\tau$ (where \\tau is 0.5 or less), A is stochastically dominant over B in more cases than vice versa, then the corresponding algorithm can be declared as \nsuperior. We can also interpret $\\epsilon_\\text{min}$ as a *confidence score*. The lower it is, the more sure we can be \nthat A is better than B. Note: **ASO does not compute p-values.** Instead, the null hypothesis formulated as \n\n$$\nH_0: \\epsilon_\\text{min} \\ge \\tau\n$$\n\nIf we want to be more confident about the result of ASO, we can also set the rejection threshold to be lower than 0.5 \n(see the discussion in [this section](#general-recommendations)).\nFurthermore, the significance level $\\alpha$ is determined as an input argument when running ASO and actively influence \nthe resulting $\\epsilon_\\text{min}$.\n\n\n### Scenario 1 - Comparing multiple runs of two models \n\nIn the simplest scenario, we have retrieved a set of scores from a model A and a baseline B on a dataset, stemming from \nvarious model runs with different seeds. We want to test whether our model A is better than B (higher scores = better)- \nWe can now simply apply the ASO test:\n\n```python\nimport numpy as np\nfrom deepsig import aso\n\nseed = 1234\nnp.random.seed(seed)\n\n# Simulate scores\nN = 5  # Number of random seeds\nmy_model_scores = np.random.normal(loc=0.9, scale=0.8, size=N)\nbaseline_scores = np.random.normal(loc=0, scale=1, size=N)\n\nmin_eps = aso(my_model_scores, baseline_scores, seed=seed)  # min_eps = 0.225, so A is better\n```\n\nNote that ASO **does not make any assumptions about the distributions of the scores**. \nThis means that we can apply it to any kind of test metric, as long as a higher score indicates a better performance \n(to apply ASO to cases where lower scores indicate better performances, just multiple your scores by -1 before feeding\nthem into the function). The more scores of model runs is supplied, the more reliable \nthe test becomes, so try to collect scores from as many runs as possible to reject the null hypothesis confidently.\n\n### Scenario 2 - Comparing multiple runs across datasets\n\nWhen comparing models across datasets, we formulate one null hypothesis per dataset. However, we have to make sure not to \nfall prey to the [multiple comparisons problem](https://en.wikipedia.org/wiki/Multiple_comparisons_problem): In short, \nthe more comparisons between A and B we are conducting, the more likely gets is to reject a null-hypothesis accidentally.\nThat is why we have to adjust our significance threshold $\\alpha$ accordingly by dividing it by the number of comparisons, \nwhich corresponds to the Bonferroni correction (Bonferroni et al., 1936):\n\n```python \nimport numpy as np\nfrom deepsig import aso \n\nseed = 1234\nnp.random.seed(seed)\n\n# Simulate scores for three datasets\nM = 3  # Number of datasets\nN = 5  # Number of random seeds\nmy_model_scores_per_dataset = [np.random.normal(loc=0.3, scale=0.8, size=N) for _ in range(M)]\nbaseline_scores_per_dataset  = [np.random.normal(loc=0, scale=1, size=N) for _ in range(M)]\n\n# epsilon_min values with Bonferroni correction \neps_min = [aso(a, b, confidence_level=0.95, num_comparisons=M, seed=seed) for a, b in zip(my_model_scores_per_dataset, baseline_scores_per_dataset)]\n# eps_min = [0.006370113450148568, 0.6534772728574852, 0.0]\n```\n\n### Scenario 3 - Comparing sample-level scores\n\nIn previous examples, we have assumed that we compare two algorithms A and B based on their performance per run, i.e. \nwe run each algorithm once per random seed and obtain exactly one score on our test set. In some cases however, \nwe would like to compare two algorithms based on scores **for every point in the test set**. If we only use one seed\nper model, then this case is equivalent to scenario 1. But what if we also want to use multiple seeds per model?\n\nIn this scenario, we can do pair-wise comparisons of the score distributions between A and B and use the Bonferroni \ncorrection accordingly:\n\n```python \nfrom itertools import product \n\nimport numpy as np\nfrom deepsig import aso \n\nseed = 1234\nnp.random.seed(seed)\n\n# Simulate scores for three datasets\nM = 40   # Number of data points\nN = 3  # Number of random seeds\nmy_model_scored_samples_per_run = [np.random.normal(loc=0.3, scale=0.8, size=M) for _ in range(N)]\nbaseline_scored_samples_per_run = [np.random.normal(loc=0, scale=1, size=M) for _ in range(N)]\npairs = list(product(my_model_scored_samples_per_run, baseline_scored_samples_per_run))\n\n# epsilon_min values with Bonferroni correction \neps_min = [aso(a, b, confidence_level=0.95, num_comparisons=len(pairs), seed=seed) for a, b in pairs]\n# eps_min = [0.3831678636198528, 0.07194780234194881, 0.9152792807128325, 0.5273463008857844, 0.14946944524461184, 1.0, \n# 0.6099543280369378, 0.22387448804041898, 1.0]\n```\n\n### Scenario 4 - Comparing more than two models \n\nSimilarly, when comparing multiple models (now again on a per-seed basis), we can use a similar approach like in the \nprevious example. For instance, for three models, we can create a $3 \\times 3$ matrix and fill the entries \nwith the corresponding $\\epsilon_\\text{min}$ values.\n\nThe package implements the function `multi_aso()` exactly for this purpose. It has the same arguments as `aso()`, with \na few differences. First of all, the function takes a single `scores` argument, which can be a list of lists (of scores),\nor a nested NumPy array or Tensorflow / PyTorch / Jax tensor or dictionary (more about that later). \nLet's look at an example:\n\n```python \nimport numpy as np \nfrom deepsig import multi_aso \n\nseed = 1234\nnp.random.seed(seed)\n\nN = 5  # Number of random seeds\nM = 3  # Number of different models / algorithms\n\n# Simulate different model scores by sampling from normal distributions with increasing means\n# Here, we will sample from N(0.1, 0.8), N(0.15, 0.8), N(0.2, 0.8)\nmy_models_scores = np.array([np.random.normal(loc=loc, scale=0.8, size=N) for loc in np.arange(0.1, 0.1 + 0.05 * M, step=0.05)])\n\neps_min = multi_aso(my_models_scores, confidence_level=0.95, seed=seed)\n\n# eps_min =\n# array([[1.       , 0.92621655, 1.        ],\n#       [1.        , 1.        , 1.        ],\n#       [0.82081635, 0.73048716, 1.        ]])\n```\n\nIn the example, `eps_min` is now a matrix, containing the $\\epsilon_\\text{min}$ score between all pairs of models (for \nthe same model, it set to 1 by default). The matrix is always to be read as ASO(row, column).\n\nThe function applies the bonferroni correction for multiple comparisons by \ndefault, but this can be turned off by using `use_bonferroni=False`.\n\nLastly, when the `scores` argument is a dictionary and the function is called with `return_df=True`, the resulting matrix is \ngiven as a `pandas.DataFrame` for increased readability:\n\n```python \nimport numpy as np \nfrom deepsig import multi_aso \n\nseed = 1234\nnp.random.seed(seed)\n\nN = 5  # Number of random seeds\nM = 3  # Number of different models / algorithms\n\n# Same setup as above, but use a dict for scores\nmy_models_scores = {\n  f\"model {i+1}\": np.random.normal(loc=loc, scale=0.8, size=N) \n  for i, loc in enumerate(np.arange(0.1, 0.1 + 0.05 * M, step=0.05))\n}\n\n# my_model_scores = {\n#   \"model 1\": array([...]),\n#   \"model 2\": array([...]),\n#   ...\n# }\n\neps_min = multi_aso(my_models_scores, confidence_level=0.95, return_df=True, seed=seed)\n\n# This is now a DataFrame!\n# eps_min =\n#          model 1   model 2  model 3\n# model 1  1.000000  0.926217      1.0\n# model 2  1.000000  1.000000      1.0\n# model 3  0.820816  0.730487      1.0\n\n```\n\n### :newspaper: How to report results\n\nWhen ASO used, two important details have to be reported, namely the confidence level $\\alpha$ and the $\\epsilon_\\text{min}$\nscore. Below lists some example snippets reporting the results of scenarios 1 and 4:\n\n    Using ASO with a confidence level $\\alpha = 0.05$, we found the score distribution of algorithm A based on three \n    random seeds to be stochastically dominant over B ($\\epsilon_\\text{min} = 0$).\n\n    We compared all pairs of models based on five random seeds each using ASO with a confidence level of \n    $\\alpha = 0.05$ (before adjusting for all pair-wise comparisons using the Bonferroni correction). Almost stochastic \n    dominance ($\\epsilon_\\text{min} < \\tau$ with $\\tau = 0.2$) is indicated in table X.\n\n### :control_knobs: Sample size\n\nIt can be hard to determine whether the currently collected set of scores is large enough to allow for reliable \nsignificance testing or whether more scores are required. For this reason, `deep-significance` also implements functions to aid the decision of whether to \ncollect more samples or not. \n\nFirst of all, it contains *Bootstrap power analysis* (Yuan & Hayashi, 2003): Given a set of scores, it gives all of them a uniform lift to \ncreate an artificial, second sample. Then, the analysis runs repeated analyses using bootstrapped versions of both \nsamples, comparing them with a significance test. Ideally, this should yield a significant result: If the difference \nbetween the re-sampled original and the lifted sample is non-significant, the original sample has too high of a variance. The \nanalyses then returns the *percentage of comparisons* that yielded significant results. If the number is too low, \nmore scores should be collected and added to the sample. \n\nThe result of the analysis is the *statistical power*: The \nhigher the power, the smaller the risk of falling prey to a Type II error - the probability of mistakenly accepting the \nnull hypothesis, when in fact it should actually be rejected. Usually, a power of ~ 0.8 is recommended (although that is\nsometimes hard to achieve in a machine learning setup).\n\nThe function can be used in the following way:\n\n```python\nimport numpy as np\nfrom deepsig import bootstrap_power_analysis\n\nscores = np.random.normal(loc=0, scale=20, size=5)  # Create too small of a sample with high variance\npower = bootstrap_power_analysis(scores, show_progress=False)  # 0.081, way too low\n\nscores2 = np.random.normal(loc=0, scale=20, size=50)  # Let's collect more samples\npower2 = bootstrap_power_analysis(scores2, show_progress=False)  # Better power with 0.2556\n```\n\nBy default, `bootstrap_power_analysis()` uses a one-sided Welch's t-test. However, this can be modified by passing \na function to the `significance_test` argument, which expects a function taking two sets of scores and returning a \np-value.\n\nSecondly, if the Almost Stochastic Order test (ASO) is being used, there is a second function available. ASO estimates\nthe violation ratio of two samples using bootstrapping. However, there is necessarily some uncertainty around that \nestimate, given that we only possess a finite number of samples. Using more samples decreases the uncertainty and makes the estimate tighter.\nThe degree to which collecting more samples increases the tightness can be computed using the following function:\n\n```python\nimport numpy as np\nfrom deepsig import aso_uncertainty_reduction\n\nscores1 = np.random.normal(loc=0, scale=0.3, size=5)  # First sample with five scores\nscores2 = np.random.normal(loc=0.2, scale=5, size=3)  # Second sample with three scores\n\nred1 = aso_uncertainty_reduction(m_old=len(scores1), n_old=len(scores2), m_new=5, n_new=5)  # 1.1547005383792515\nred2 = aso_uncertainty_reduction(m_old=len(scores1), n_old=len(scores2), m_new=7, n_new=3)  # 1.0583005244258363\n\n# Adding two runs to scores1 increases tightness of estimate by 1.15\n# But adding two runs to scores2 only increases tightness by 1.06! So spending two more runs on scores1 is better\n```\n\n### :sparkles: Other features\n\n#### :rocket: For the impatient: ASO with multi-threading\n\nWaiting for all the bootstrap iterations to finish can feel tedious, especially when doing many comparisons. Therefore, \nASO supports multithreading using `joblib`\nvia the `num_jobs` argument. \n\n```python\nfrom deepsig import aso\nimport numpy as np\nfrom timeit import timeit\n\na = np.random.normal(size=1000)\nb = np.random.normal(size=1000)\n\nprint(timeit(lambda: aso(a, b, num_jobs=1, show_progress=False), number=5))  # 616.2249192680001\nprint(timeit(lambda: aso(a, b, num_jobs=4, show_progress=False), number=5))  # 208.05637107000007\n```\n\nIf you want to select the maximum number of jobs possible on your device, you can set `num_jobs=-1`:\n\n```pythons\nprint(timeit(lambda: aso(a, b, num_jobs=-1, show_progress=False), number=5))  # 187.26257274800003\n```\n\n#### :electric_plug: Compatibility with PyTorch, Tensorflow, Jax & Numpy\n\nAll tests implemented in this package also can take PyTorch / Tensorflow tensors and Jax or NumPy arrays as arguments:\n\n```python\nfrom deepsig import aso \nimport torch\n\na = torch.randn(5, 1)\nb = torch.randn(5, 1)\n\naso(a, b)  # It just works!\n```\n\n#### :woman_farmer: Setting seeds for replicability\n\nIn order to ensure replicability, both `aso()` and `multi_aso()` supply as `seed` argument. This even works \nwhen multiple jobs are used!\n\n#### :game_die: Permutation and bootstrap test \n\nShould you be suspicious of ASO and want to revert to the good old faithful tests, this package also implements \nthe paired-bootstrap as well as the permutation randomization test. Note that as discussed in the next section, these \ntests have less statistical power than ASO. Furthermore, a function for the Bonferroni-correction using \np-values can also be found using `from deepsig import bonferroni_correction`.\n\n```python3\nimport numpy as np\nfrom deepsig import bootstrap_test, permutation_test\n\na = np.random.normal(loc=0.8, size=10)\nb = np.random.normal(size=10)\n\nprint(permutation_test(a, b))  # 0.16183816183816183\nprint(bootstrap_test(a, b))    # 0.103\n```\n\n\n### General recommendations & other notes\n\n* Naturally, the CDFs built from `scores_a` and `scores_b` can only be approximations of the true distributions. Therefore,\nas many scores as possible should be collected, especially if the variance between runs is high. If only one run is available,\n  comparing sample-wise score distributions like in scenario 3 can be an option, but comparing multiple runs will \n  **always** be preferable. Ideally, scores should be obtained even using different sets of hyperparameters per model.\n  Because this is usually infeasible in practice, Bouthilier et al. (2020) recommend to **vary all other sources of variation**\n  between runs to obtain the most trustworthy estimate of the \"true\" performance, such as data shuffling, weight initialization etc.\n\n* `num_bootstrap_iterations` can be reduced to increase the speed of `aso()`. However, this is not \nrecommended as the result of the test will also become less accurate. Technically, $\\epsilon_\\text{min}$ is a upper bound\n  that becomes tighter with the number of samples and bootstrap iterations (del Barrio et al., 2017). Thus, increasing \n  the number of jobs with `num_jobs` instead is always preferred.\n\n* While we could declare a model stochastically dominant with $\\epsilon_\\text{min} < 0.5$, we found this to have a comparatively high\nType I error (false positives). Tests [in our paper](https://arxiv.org/pdf/2204.06815.pdf) have shown that a more useful threshold that trades of Type I and \n  Type II error between different scenarios might be $\\tau = 0.2$.\n\n* Bootstrap and permutation-randomization are all non-parametric tests, i.e. they don't make any assumptions about \nthe distribution of our test metric. Nevertheless, they differ in their *statistical power*, which is defined as the probability\n  that the null hypothesis is being rejected given that there is a difference between A and B. In other words, the more powerful \n  a test, the less conservative it is and the more it is able to pick up on smaller difference between A and B. Therefore, \n  if the distribution is known or found out why normality tests (like e.g. Anderson-Darling or Shapiro-Wilk), something like \n  a parametric test like Student's or Welch's t-test is preferable to bootstrap or permutation-randomization. However, \n  because these test are in turn less applicable in a Deep Learning setting due to the reasons elaborated on in \n  [Why?](#interrobang-why), ASO is still a better choice.\n\n### :mortar_board: Cite\n\nUsing this package in general, please cite the following:\n\n    @article{ulmer2022deep,\n      title={deep-significance-Easy and Meaningful Statistical Significance Testing in the Age of Neural Networks},\n      author={Ulmer, Dennis and Hardmeier, Christian and Frellsen, Jes},\n      journal={arXiv preprint arXiv:2204.06815},\n      year={2022}\n    }\n\n\nIf you use the ASO test via `aso()` or `multi_aso, please cite the original works:\n\n    @inproceedings{dror2019deep,\n      author    = {Rotem Dror and\n                   Segev Shlomov and\n                   Roi Reichart},\n      editor    = {Anna Korhonen and\n                   David R. Traum and\n                   Llu{\\'{\\i}}s M{\\`{a}}rquez},\n      title     = {Deep Dominance - How to Properly Compare Deep Neural Models},\n      booktitle = {Proceedings of the 57th Conference of the Association for Computational\n                   Linguistics, {ACL} 2019, Florence, Italy, July 28- August 2, 2019,\n                   Volume 1: Long Papers},\n      pages     = {2773--2785},\n      publisher = {Association for Computational Linguistics},\n      year      = {2019},\n      url       = {https://doi.org/10.18653/v1/p19-1266},\n      doi       = {10.18653/v1/p19-1266},\n      timestamp = {Tue, 28 Jan 2020 10:27:52 +0100},\n    }\n\n    @incollection{del2018optimal,\n      title={An optimal transportation approach for assessing almost stochastic order},\n      author={Del Barrio, Eustasio and Cuesta-Albertos, Juan A and Matr{\\'a}n, Carlos},\n      booktitle={The Mathematics of the Uncertain},\n      pages={33--44},\n      year={2018},\n      publisher={Springer}\n    }\n\nFor instance, you can write\n\n    In order to compare models, we use the Almost Stochastic Order test \\citep{del2018optimal, dror2019deep} as \n    implemented by \\citet{ulmer2022deep}.\n\n### :medal_sports: Acknowledgements\n\nThis package was created out of discussions of the [NLPnorth group](https://nlpnorth.github.io/) at the IT University \nCopenhagen, whose members I want to thank for their feedback. The code in this repository is in multiple places based on\nseveral of [Rotem Dror's](https://rtmdrr.github.io/) repositories, namely \n[this](https://github.com/rtmdrr/replicability-analysis-NLP), [this](https://github.com/rtmdrr/testSignificanceNLP)\nand [this one](https://github.com/rtmdrr/DeepComparison). Thanks also go out to her personally for being available to \nanswer questions and provide feedback to the implementation and documentation of this package.\n\nThe commit message template used in this project can be found [here](https://github.com/Kaleidophon/commit-template-for-humans).\nThe inline latex equations were rendered using [readme2latex](https://github.com/leegao/readme2tex).\n\n### :people_holding_hands: Papers using deep-significance\n\nIn this last section of the readme, I would like to refer to works already using `deep-significance`. Open an issue or \npull request if you would like to see your work added here!\n\n* [\"From Masked Language Modeling to Translation: Non-English Auxiliary Tasks Improve Zero-shot Spoken Language Understanding\" (van der Groot et al., 2021)](https://robvanderg.github.io/doc/naacl2021.pdf)\n* [\"Cartography Active Learning\" (Zhang & Plank, 2021)](https://arxiv.org/pdf/2109.04282.pdf)\n* [\"SkillSpan: Hard and Soft Skill Extraction from English Job Postings\" (Zhang et al., 2022a)](https://arxiv.org/pdf/2204.12811.pdf)\n* [\"What do you mean by Relation Extraction? A Survey on Datasets and Study on Scientific Relation Classification\" (Bassignana & Plank, 2022)](https://arxiv.org/pdf/2204.13516.pdf)\n* [\"KOMPETENCER: Fine-grained Skill Classification in Danish Job Postings\nvia Distant Supervision and Transfer Learning\" (Zhang et al., 2022b)](https://arxiv.org/pdf/2205.01381.pdf)\n\n### :books: Bibliography\n\nDel Barrio, Eustasio, Juan A. Cuesta-Albertos, and Carlos Matrán. \"An optimal transportation approach for assessing almost stochastic order.\" The Mathematics of the Uncertain. Springer, Cham, 2018. 33-44.\n\nBonferroni, Carlo. \"Teoria statistica delle classi e calcolo delle probabilita.\" Pubblicazioni del R Istituto Superiore di Scienze Economiche e Commericiali di Firenze 8 (1936): 3-62.\n\nBorji, Ali. \"Negative results in computer vision: A perspective.\" Image and Vision Computing 69 (2018): 1-8.\n\nBouthillier, Xavier, et al. \"Accounting for variance in machine learning benchmarks.\" Proceedings of Machine Learning and Systems 3 (2021).\n\nDror, Rotem, et al. \"The hitchhiker’s guide to testing statistical significance in natural language processing.\" Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 2018.\n\nDror, Rotem, Shlomov, Segev, and Reichart, Roi. \"Deep dominance-how to properly compare deep neural models.\" Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics. 2019.\n\nEfron, Bradley, and Robert J. Tibshirani. \"An introduction to the bootstrap.\" CRC press, 1994.\n\nAndrew Gelman, John B Carlin, Hal S Stern, David B Dunson, Aki Vehtari, Donald B Rubin, John\nCarlin, Hal Stern, Donald Rubin, and David Dunson. Bayesian data analysis third edition, 2021.\n\nHenderson, Peter, et al. \"Deep reinforcement learning that matters.\" Proceedings of the AAAI Conference on Artificial Intelligence. Vol. 32. No. 1. 2018.\n\nHao Li, Zheng Xu, Gavin Taylor, Christoph Studer, Tom Goldstein. \"Visualizing the Loss Landscape of Neural Nets.\" NeurIPS 2018: 6391-6401\n\nNarang, Sharan, et al. \"Do Transformer Modifications Transfer Across Implementations and Applications?.\" arXiv preprint arXiv:2102.11972 (2021).\n\nNoreen, Eric W. \"Computer intensive methods for hypothesis testing: An introduction.\" Wiley, New York (1989).\n\nRonald L Wasserstein, Allen L Schirm, and Nicole A Lazar. Moving to a world beyond “p< 0.05”,\n2019\n\nYuan, Ke‐Hai, and Kentaro Hayashi. \"Bootstrap approach to inference and power analysis based on three test statistics for covariance structure models.\" British Journal of Mathematical and Statistical Psychology 56.1 (2003): 93-110.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kaleidophon/deep-significance",
    "keywords": "machine learning,deep learning,reinforcement learning,computer vision,natural language processing,nlp,rl,cv,statistical significance testing,statistical hypothesis testing,significance test,statistical significance,pytorch,tensorflow,numpy,jax",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deepsig",
    "package_url": "https://pypi.org/project/deepsig/",
    "platform": null,
    "project_url": "https://pypi.org/project/deepsig/",
    "project_urls": {
      "Homepage": "https://github.com/Kaleidophon/deep-significance"
    },
    "release_url": "https://pypi.org/project/deepsig/1.2.6/",
    "requires_dist": [
      "numpy (>=1.19.5)",
      "scipy (>=1.6.0)",
      "tqdm (>=4.59.0)",
      "joblib (>=1.0.1)",
      "pandas (>=1.3.3)",
      "dill (>=0.3.4)",
      "psutil (>=5.9.0)"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Easy Significance Testing for Deep Neural Networks.",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14362840,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "437837453b65a6c67316a21dfe3d496a600a09fb57ada8e70d594af67802c815",
          "md5": "28daebe9402a2dc3a5b24fee07a00f8f",
          "sha256": "852038f3c44de947c5f138a8698b786fa8d118ae8f637143bea4ad4a5a3b8143"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28daebe9402a2dc3a5b24fee07a00f8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 35012,
        "upload_time": "2021-03-25T16:18:00",
        "upload_time_iso_8601": "2021-03-25T16:18:00.522854Z",
        "url": "https://files.pythonhosted.org/packages/43/78/37453b65a6c67316a21dfe3d496a600a09fb57ada8e70d594af67802c815/deepsig-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdcb157f18597c71e576cca6e2cfd8f1d30f50e026490b2f4cbf80ea45e91085",
          "md5": "14e95edfda044fa48d5772aa7efde540",
          "sha256": "c95ab8ee362702ae874ae5d4a4c9ac0acdbf7c771231219ac6a95defd9e51274"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "14e95edfda044fa48d5772aa7efde540",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 20076,
        "upload_time": "2021-03-25T16:18:02",
        "upload_time_iso_8601": "2021-03-25T16:18:02.245229Z",
        "url": "https://files.pythonhosted.org/packages/cd/cb/157f18597c71e576cca6e2cfd8f1d30f50e026490b2f4cbf80ea45e91085/deepsig-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e97d3a9f232b594c6598d5691fbb28f063c9182bc943195358922c7cfaa4e6",
          "md5": "e2dce253619afab6257acd2f15093d95",
          "sha256": "93aee21ced4cd4e34e214f7554c0c5b1c92a76a3268d67d0324b6408f39634d0"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2dce253619afab6257acd2f15093d95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 35777,
        "upload_time": "2021-04-28T12:58:57",
        "upload_time_iso_8601": "2021-04-28T12:58:57.744843Z",
        "url": "https://files.pythonhosted.org/packages/21/e9/7d3a9f232b594c6598d5691fbb28f063c9182bc943195358922c7cfaa4e6/deepsig-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feb655bc66226bdbe422717dae9997c899eb4055df630c619e4825277154b05f",
          "md5": "f9027664e9c1d50e80ff352ababb8d0e",
          "sha256": "b51e062bd13ce363391f2f44ce620e67e31612c01d833db0fa2aaddee15cde4f"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9027664e9c1d50e80ff352ababb8d0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 28942,
        "upload_time": "2021-04-28T12:58:59",
        "upload_time_iso_8601": "2021-04-28T12:58:59.483512Z",
        "url": "https://files.pythonhosted.org/packages/fe/b6/55bc66226bdbe422717dae9997c899eb4055df630c619e4825277154b05f/deepsig-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f9c6e418be5104bb118de1554b882ba0d456a5c0cd781bc53fd861cba51a24",
          "md5": "67dce9be9fcabd6e190f562246ef6754",
          "sha256": "118153d4cdf8f44a535da9790e7a931bb0e09a65f127c2c2b8fa991a62f9a777"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67dce9be9fcabd6e190f562246ef6754",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 36321,
        "upload_time": "2021-08-10T09:01:20",
        "upload_time_iso_8601": "2021-08-10T09:01:20.110445Z",
        "url": "https://files.pythonhosted.org/packages/34/f9/c6e418be5104bb118de1554b882ba0d456a5c0cd781bc53fd861cba51a24/deepsig-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef3e474d7cfd128eb1739f60a8c5e26e50e8dc2a51ae4f0719ef045d5388c6fd",
          "md5": "4e28ec4ce02906273986347779ced5cf",
          "sha256": "8c6635c8fcb8201c86b3892768b3acdcc24b80e0812f10019178058b76d9e447"
        },
        "downloads": -1,
        "filename": "deepsig-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4e28ec4ce02906273986347779ced5cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 32622,
        "upload_time": "2021-08-10T09:01:22",
        "upload_time_iso_8601": "2021-08-10T09:01:22.649142Z",
        "url": "https://files.pythonhosted.org/packages/ef/3e/474d7cfd128eb1739f60a8c5e26e50e8dc2a51ae4f0719ef045d5388c6fd/deepsig-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71459d4135cc52fd8fbcec5a3a707e8b5adaa957a338ceadfbd85bd08ac54681",
          "md5": "a08d807d5e654a632c8981dbe7a97486",
          "sha256": "3e75bc80b0cfadaa977bb7a830ce4f35364e9db157675a5cc5345688031cc450"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a08d807d5e654a632c8981dbe7a97486",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 38671,
        "upload_time": "2021-10-15T12:16:46",
        "upload_time_iso_8601": "2021-10-15T12:16:46.358399Z",
        "url": "https://files.pythonhosted.org/packages/71/45/9d4135cc52fd8fbcec5a3a707e8b5adaa957a338ceadfbd85bd08ac54681/deepsig-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c4a890cdf59d061d634cbc751b768f11fada15e8babd70be9b29ff2c576cd29",
          "md5": "411d400427895a13ee904b89391cc16a",
          "sha256": "8920577ac4974ba6a93701407391e8ee92e417120c75f1904f0d0e8c7e9b4849"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "411d400427895a13ee904b89391cc16a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 34501,
        "upload_time": "2021-10-15T12:16:49",
        "upload_time_iso_8601": "2021-10-15T12:16:49.481006Z",
        "url": "https://files.pythonhosted.org/packages/8c/4a/890cdf59d061d634cbc751b768f11fada15e8babd70be9b29ff2c576cd29/deepsig-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ab7394840b46338ef59c88defad7b6c8c939691cf89fcd77b481715ed3c692",
          "md5": "9abc4299913ff13ed056091047388eba",
          "sha256": "b3cbab896a294e0a46841263b1e6baf8af318cb64b5155a4050f11d2d3f4c5b4"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9abc4299913ff13ed056091047388eba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 38679,
        "upload_time": "2021-10-15T12:49:45",
        "upload_time_iso_8601": "2021-10-15T12:49:45.923482Z",
        "url": "https://files.pythonhosted.org/packages/60/ab/7394840b46338ef59c88defad7b6c8c939691cf89fcd77b481715ed3c692/deepsig-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "145a54c2afbdb539833f475862d97531792f994fcd0469cec469f76c31c7f54c",
          "md5": "e26ccb79a7bbcabef0c804b50edcfaae",
          "sha256": "4ddf971b0b0eb64f685e39a4e41321d36af7bb3044f5e6f858d1683893ea68ae"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e26ccb79a7bbcabef0c804b50edcfaae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 34510,
        "upload_time": "2021-10-15T12:49:47",
        "upload_time_iso_8601": "2021-10-15T12:49:47.864882Z",
        "url": "https://files.pythonhosted.org/packages/14/5a/54c2afbdb539833f475862d97531792f994fcd0469cec469f76c31c7f54c/deepsig-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9faa18ec18e087d1f248e566f510743b734374a69841637f89fa76c9b5624227",
          "md5": "433a1be43ae2cf648506ee61fb3521a0",
          "sha256": "0e8f1a7ed5a505c07ec5b4489673dca59b103db7fe581fdcd7056d8f4be0a637"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "433a1be43ae2cf648506ee61fb3521a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 38893,
        "upload_time": "2021-10-26T13:50:51",
        "upload_time_iso_8601": "2021-10-26T13:50:51.665404Z",
        "url": "https://files.pythonhosted.org/packages/9f/aa/18ec18e087d1f248e566f510743b734374a69841637f89fa76c9b5624227/deepsig-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34430e9dfff266ecd2fe25971f9113d930188bcdf3c7080ef97ee08c5d33511c",
          "md5": "c681a769bdaa3da35afbafafc3c8787b",
          "sha256": "e7e5d28536c91cd3981fc3e30357b4bd4411f0ac1d696a4beb9c3eb6e303a3c7"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c681a769bdaa3da35afbafafc3c8787b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 34742,
        "upload_time": "2021-10-26T13:50:55",
        "upload_time_iso_8601": "2021-10-26T13:50:55.014119Z",
        "url": "https://files.pythonhosted.org/packages/34/43/0e9dfff266ecd2fe25971f9113d930188bcdf3c7080ef97ee08c5d33511c/deepsig-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88d30748cc47a586925693bf28bcee98dd892dd74672b5c63034d1a701cdd01f",
          "md5": "a822bec90f902abdd4514808c119cd75",
          "sha256": "063614b1d4bef75b60b4f39ae637f4a319227095468fe1dde85b5dd35e60f5b3"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a822bec90f902abdd4514808c119cd75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 39201,
        "upload_time": "2021-10-27T17:21:18",
        "upload_time_iso_8601": "2021-10-27T17:21:18.690551Z",
        "url": "https://files.pythonhosted.org/packages/88/d3/0748cc47a586925693bf28bcee98dd892dd74672b5c63034d1a701cdd01f/deepsig-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcba635478b65e4f202832f447cc53ce5bf1c0b2d792946b0267d2cbcc0db28b",
          "md5": "8d66464ac8b5fb25a3af59dc6f5d03e2",
          "sha256": "2c06fd2c69d5a9058982919dc575d87433649b5a352ddbd6dd0e05e3eaf20132"
        },
        "downloads": -1,
        "filename": "deepsig-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8d66464ac8b5fb25a3af59dc6f5d03e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 34990,
        "upload_time": "2021-10-27T17:21:21",
        "upload_time_iso_8601": "2021-10-27T17:21:21.676228Z",
        "url": "https://files.pythonhosted.org/packages/bc/ba/635478b65e4f202832f447cc53ce5bf1c0b2d792946b0267d2cbcc0db28b/deepsig-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7eec22656a9a0f352a09056f1c5b572ad502706010901de9b10f488f16068a70",
          "md5": "85f4bb37db628aaad393be63ab86ae00",
          "sha256": "a1087489f19d27ba00f3cd5b8431c6f106eb5e4e1b1646094e3c1bdaf9cdc0f1"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85f4bb37db628aaad393be63ab86ae00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 44461,
        "upload_time": "2021-12-03T15:12:31",
        "upload_time_iso_8601": "2021-12-03T15:12:31.853145Z",
        "url": "https://files.pythonhosted.org/packages/7e/ec/22656a9a0f352a09056f1c5b572ad502706010901de9b10f488f16068a70/deepsig-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b578ebc137dae4894b3b41c5dbadb2f1d00396611272781370656ecf789d12b5",
          "md5": "6a35a848bd26ae5e8c5792283157b5fa",
          "sha256": "52d3b6c4c7198229ab52833914264252a0598e8ebd1701f512154db6483f3a9b"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a35a848bd26ae5e8c5792283157b5fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 48681,
        "upload_time": "2021-12-03T15:12:37",
        "upload_time_iso_8601": "2021-12-03T15:12:37.882698Z",
        "url": "https://files.pythonhosted.org/packages/b5/78/ebc137dae4894b3b41c5dbadb2f1d00396611272781370656ecf789d12b5/deepsig-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb660c530dc27ea0c6063b654ad0ed05a852f34e71ff59c9af5dc54891cb8d71",
          "md5": "eaa2bef4e9bb439ee98e7e686571ea0b",
          "sha256": "f0d2c20d0521c87dea5bb36c25ba755d8502121309c2c8d6efdb240cea978bc8"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eaa2bef4e9bb439ee98e7e686571ea0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 44480,
        "upload_time": "2022-02-17T09:38:32",
        "upload_time_iso_8601": "2022-02-17T09:38:32.276893Z",
        "url": "https://files.pythonhosted.org/packages/bb/66/0c530dc27ea0c6063b654ad0ed05a852f34e71ff59c9af5dc54891cb8d71/deepsig-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27a829045403a1b2889b2d351fed581a250b7aee1b244dad082741ddbf0eae89",
          "md5": "5e1c38a9705e9bfafaa3d4f589f8872f",
          "sha256": "8543630c00264898116a065f6461c131d026ef75d8703bc631a4fd2bafb31f89"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e1c38a9705e9bfafaa3d4f589f8872f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 48901,
        "upload_time": "2022-02-17T09:38:38",
        "upload_time_iso_8601": "2022-02-17T09:38:38.976003Z",
        "url": "https://files.pythonhosted.org/packages/27/a8/29045403a1b2889b2d351fed581a250b7aee1b244dad082741ddbf0eae89/deepsig-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1410f6d001917854d86a871a2d901e5b7aa39dc7d7bb50211d890fa1448bf60c",
          "md5": "cb222cb1b3c0efaa026d49ba14f84be1",
          "sha256": "7ddbe7a9b44177dc9b2f2e2b538c4e24eb24cb5b1a6a88960b34b97a722fd269"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb222cb1b3c0efaa026d49ba14f84be1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 44420,
        "upload_time": "2022-03-14T15:42:18",
        "upload_time_iso_8601": "2022-03-14T15:42:18.401627Z",
        "url": "https://files.pythonhosted.org/packages/14/10/f6d001917854d86a871a2d901e5b7aa39dc7d7bb50211d890fa1448bf60c/deepsig-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3228eff52070de6c722a95c324a29b4679cdd797fbe7c836efa39d600af5b531",
          "md5": "703cca7c796a351741fe1817178f80a1",
          "sha256": "fff3d09661dce909b3291afd06cfcd77043b5d451375d0a807d2c45e82bf3f7b"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "703cca7c796a351741fe1817178f80a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 48886,
        "upload_time": "2022-03-14T15:42:20",
        "upload_time_iso_8601": "2022-03-14T15:42:20.498414Z",
        "url": "https://files.pythonhosted.org/packages/32/28/eff52070de6c722a95c324a29b4679cdd797fbe7c836efa39d600af5b531/deepsig-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18e1b2f7f014c1c354ee263e7f193f178da294cadd7db46fa581043f55be5c27",
          "md5": "a7048af2799aeaed6c1e92e810217883",
          "sha256": "1d869a4cb48d047236c40574de8d7e5fb8a5f94aaf72e81a832378c284124c83"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7048af2799aeaed6c1e92e810217883",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 44545,
        "upload_time": "2022-03-24T14:20:35",
        "upload_time_iso_8601": "2022-03-24T14:20:35.280695Z",
        "url": "https://files.pythonhosted.org/packages/18/e1/b2f7f014c1c354ee263e7f193f178da294cadd7db46fa581043f55be5c27/deepsig-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7128f0fb56ffbf9f30a2bb58268fca8be373e71cfeb8c55a8ff5fbd78a1de81e",
          "md5": "a1c8716c2a1b142788c34055876f4143",
          "sha256": "7d3781c84820b36ca45bfe09044f9cdcc55ac107e5c1010dedcaa6b48252c08a"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a1c8716c2a1b142788c34055876f4143",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 49002,
        "upload_time": "2022-03-24T14:20:36",
        "upload_time_iso_8601": "2022-03-24T14:20:36.879948Z",
        "url": "https://files.pythonhosted.org/packages/71/28/f0fb56ffbf9f30a2bb58268fca8be373e71cfeb8c55a8ff5fbd78a1de81e/deepsig-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a9a257e7839509011ad32914089878411505e213e14afa9a490a1c639231ac",
          "md5": "475ca7edb85dc1156dbbba28713590a2",
          "sha256": "e4c5c44de2b666b06c28f7c384a5841afa129702e3784775d948f1a1dec1d15a"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "475ca7edb85dc1156dbbba28713590a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 47873,
        "upload_time": "2022-04-20T12:28:29",
        "upload_time_iso_8601": "2022-04-20T12:28:29.785897Z",
        "url": "https://files.pythonhosted.org/packages/59/a9/a257e7839509011ad32914089878411505e213e14afa9a490a1c639231ac/deepsig-1.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d7027d02a4c008b79787b42f62df54de3e2eefcc8fd273242a9cbb83c2e9bf9",
          "md5": "bcd5e9f5ca97882ea8c6147046204a6a",
          "sha256": "102232bcd9d7a09383eb674c981f2a2b2710d7a9e3b9977ad37b980b390b26d0"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bcd5e9f5ca97882ea8c6147046204a6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 64724,
        "upload_time": "2022-04-20T12:28:31",
        "upload_time_iso_8601": "2022-04-20T12:28:31.593115Z",
        "url": "https://files.pythonhosted.org/packages/1d/70/27d02a4c008b79787b42f62df54de3e2eefcc8fd273242a9cbb83c2e9bf9/deepsig-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed08b7e457bc3381458157701ed232399a50da520c9c087179e8e81e8d3c695b",
          "md5": "e9babe80e6973d637ffa50ab08509ff8",
          "sha256": "c34162796d44a5e1695190e6d019b932370a21c87a96b556540655bd7d1d8d76"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9babe80e6973d637ffa50ab08509ff8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 48059,
        "upload_time": "2022-07-07T10:09:17",
        "upload_time_iso_8601": "2022-07-07T10:09:17.037468Z",
        "url": "https://files.pythonhosted.org/packages/ed/08/b7e457bc3381458157701ed232399a50da520c9c087179e8e81e8d3c695b/deepsig-1.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a983833c2537f4af775e671776ae766de4e099503dfef50f60d4e491a8f56d96",
          "md5": "1c8049294187335c037929beeafe40b4",
          "sha256": "8268cd5a7c0bd67fb0f47f31eef6db66b18698bf0c623b31b8d5c87c0a9617a9"
        },
        "downloads": -1,
        "filename": "deepsig-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1c8049294187335c037929beeafe40b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 65577,
        "upload_time": "2022-07-07T10:09:21",
        "upload_time_iso_8601": "2022-07-07T10:09:21.150103Z",
        "url": "https://files.pythonhosted.org/packages/a9/83/833c2537f4af775e671776ae766de4e099503dfef50f60d4e491a8f56d96/deepsig-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed08b7e457bc3381458157701ed232399a50da520c9c087179e8e81e8d3c695b",
        "md5": "e9babe80e6973d637ffa50ab08509ff8",
        "sha256": "c34162796d44a5e1695190e6d019b932370a21c87a96b556540655bd7d1d8d76"
      },
      "downloads": -1,
      "filename": "deepsig-1.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9babe80e6973d637ffa50ab08509ff8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 48059,
      "upload_time": "2022-07-07T10:09:17",
      "upload_time_iso_8601": "2022-07-07T10:09:17.037468Z",
      "url": "https://files.pythonhosted.org/packages/ed/08/b7e457bc3381458157701ed232399a50da520c9c087179e8e81e8d3c695b/deepsig-1.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a983833c2537f4af775e671776ae766de4e099503dfef50f60d4e491a8f56d96",
        "md5": "1c8049294187335c037929beeafe40b4",
        "sha256": "8268cd5a7c0bd67fb0f47f31eef6db66b18698bf0c623b31b8d5c87c0a9617a9"
      },
      "downloads": -1,
      "filename": "deepsig-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1c8049294187335c037929beeafe40b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 65577,
      "upload_time": "2022-07-07T10:09:21",
      "upload_time_iso_8601": "2022-07-07T10:09:21.150103Z",
      "url": "https://files.pythonhosted.org/packages/a9/83/833c2537f4af775e671776ae766de4e099503dfef50f60d4e491a8f56d96/deepsig-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}