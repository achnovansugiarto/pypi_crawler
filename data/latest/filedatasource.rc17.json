{
  "info": {
    "author": "José Manuel Gómez Soriano",
    "author_email": "jmgomez.soriano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# File data-source\nThe easiest way to parse CSV and Excel files, even compressed CSV files.\n\nFor example, with 2 or 1 line you can read a Excel or CSV file, even if it is a compressed CSV file:\n\n```python\nfrom filedatasource import open_reader, excel2objects\n# Read a whole Excel file and obtain a list of objects,\n# with the fieldnames as object attributes\nwith open_reader('data.csv.gz') as reader:\n    objs = reader.read_objects()\nprint(objs[0].name)\n\n# Or, even, easier:\nobjs = excel2objects('data.xlsx')\nprint(objs[0].name)\n\n# If you do not want to load all the file to memory, you can do\nwith open_reader('data.csv.gz') as reader:\n    for obj in reader:\n       print(obj.name)\n```\n\n## Install\n\n```shell script\npip install filedatasource\n```\nIf you want to read an Excel file in xlsx format, you need to install the openpyxl module:\n\n```shell script\npip install openpyxl\n```\nIf you want to create an Excel file in xlsx format, you need to install the xlsxwriter module:\n\n```shell script\npip install xlsxwriter\n```\n\nIf you want to read an Excel file in old xls format, you need to install the __xlrd__ module:\n\n```shell script\npip install xlrd\n```\n\nFinally, if you want to write into an old xls format, you need to install the __xlwt__ module:\n\n```shell script\npip install xlwt\n```\n\n## For what kind of file formats it is used\n**filedatasource** is a Python module that allows to extract the data form typical CSV or Excel files with the\nfollowing format:\n\n```text\nfield_1,field_2,field_3,...\ncell_1_1,cell_1_2,cell_1_3,...\ncell_2_1,cell_2_2,cell_3_3,...\n...\n```\n\nThat means, the first row is used for the column names, and the rest of rows are the value of those columns. \nFor example, with this **data.csv** file:\n\n```text\nname,surname,address\nJhon,Smith,Oxford street\nMaria,Ortega,George Washington street \n```\n\nOr an Excel file with the following content:\n\n|name |surname|address                 |\n|-----|-------|------------------------|\n|Jhon |Smith  |Oxford street           |\n|Maria|Ortega |George Washington street|\n\n**Note**: This module does not work with other formats. If you need to parse more complex files, you need to use\nPanda or native modules as openpyxl or xlsxwriter. This module is thought for parsing or generating typical data sources\nbased on files in data scientists processes.\n\n##  How to read\n\nThe standard way to read a CSV is:\n\n```python\nfrom filedatasource import CsvReader\n\nwith CsvReader('data.csv') as reader:\n    for person in reader:\n        print(person.name, person.surname, person.address)\n```\n\nIf the file name ends with .gz then, __CsvReader()__ will decompress the file during the reading. \nBy default, __ExcelReader__ or __CsvReader__ obtain objects with the fieldnames as attributes. \n\n**Note**: All the data extracted with CsvReader will be of type str.\n\n### Important note\nThis method is not recommended when the column names are not valid Python identifiers because this method will change\nthe no valid identifiers following these rules:\n* If the field name has a character that is not valid as Python identifier, it will be replaced by _.\n* If the field name starts with a number, then the character 'n' is added at the beginning.\n\nFor example, if you have the following data file in CSV:\n\n```text\n1d,D&D,Figures\n20,Main dice all\n...\n```\n\nThe identifier for the object attributes will be __n1d__, __D_D__ and __Figures__, respectively. The last field does not\nchange because it is a valid Python identifier.\n\nFor this reason in these cases it is better to use the parameter __mode__, which allows to change the mode to obtain\nthe information in each iteration. This way, you can obtain a dictionary (__mode=ReadMode.DICT__) or a list \n(__mode=ReadMode.LIST__) instead of a Python object. For example, this sentences do the same that the previous code\ndoes:\n\n```python\nfrom filedatasource import CsvReader, ReadMode\n\n# To get a dictionary instead an objects in each iteration\nwith CsvReader('data.csv', mode=ReadMode.DICT) as reader:\n    for person in reader:\n        print(person['name'], person['surname'], person['fullname'])\n        \n# To get a list of values instead of an object with attributes\nwith CsvReader('data.csv', mode=ReadMode.LIST) as reader:\n    for person in reader:\n        print(person[0], person[1], person[2])\n```\n\nAll these operations can be done with Excel files using __ExcelReader__. For example, to read the **data.xlsx** with\nthe above content you can do the following:\n\n```python\nfrom filedatasource import ExcelReader\n\nwith ExcelReader('data.xslx') as reader:\n    for person in reader:\n        print(person.name, person.surname, person.address)\n```\n\nIf the file name ends with **.xls** instead of **.xlsx**, this class will read it correctly too.\n\nRegardless of using __CsvReader__ or __ExcelReader__, you can use the __tqdm()__ method to measure the time that\nyou process will take. For example:\n\n```python\nfrom filedatasource import ExcelReader, CsvReader\nfrom tqdm import tqdm\n\nwith ExcelReader('data.xslx') as reader:\n    for person in tqdm(reader, desc='Reading the Excel file'):\n        print(person.name, person.surname, person.address)\n\nwith CsvReader('data.xslx') as reader:\n    for person in tqdm(reader, desc='Reading the CSV file'):\n        print(person.name, person.surname, person.address)\n```\n\nHowever, the __CsvReader__ needs, previously, to pre-read the entire file to calculate the number of rows, and it \nmight take a bit longer. This problem does not occur with the Excel file because it is fully loaded into memory.\n\nIn an Excel file you can know the list of sheet names by means of sheets():\n\n```python\nfrom filedatasource import sheets\n\n# It detects the type of the Excel file by the extension of the filename.\nsheets('test/Example.xlsx')\nsheets('test/Example.xls')\n```\n\n## How to write a data file\n\nWith **filedatasource** is very easy to write, both, a CSV file (compressed or not) and an Excel file (xls or xlsx).\nOnly you need to use __CsvWriter__ or __ExcelWriter__ writing the rows by parameters, with a list of values or \nwith a dictionary. For example:\n\n```python\nfrom filedatasource import CsvWriter\n\n# Writing a row by means of parameters, a list of values or a dictionary.\nwith CsvWriter('data.csv.gz', fieldnames=['a', 'b', 'c']) as writer:\n    writer.write_row(a=1, b=2, c=3)\n    writer.write([2, 4, 7])\n    writer.write({'a': 4, 'b': 8, 'c': 31})\n```\n\nIf the file name ends with .gz, it will be compressed automatically. Moreover, you can store an object like this:\n\n```python\nfrom filedatasource import CsvWriter\n\nclass Example(object):\n    def __init__(self, a: int, b: int, c: int):\n        self.a = a\n        self.b = b\n        self.c = c\n\n# Writing with Python objects\nwith CsvWriter('data.csv.gz', fieldnames=['a', 'b', 'c']) as writer:\n    writer.write(Example(1, 2, 3))\n    writer.write(Example(4, 5, 6))\n```\n\nIf you in your object class defines properties, you can use it directly as __fieldnames__ parameter. For example:\n\n```python\nfrom filedatasource import CsvWriter\n\nclass Employee(object):\n    @property\n    def full_name(self) -> str:\n        return self.name + ' ' + self.surname\n\n    @property\n    def name(self) -> str:\n        return self.__name\n\n    @property\n    def surname(self) -> str:\n        return self.__surname\n\n    def __init__(self, name: str, surname: str):\n        self.__name = name\n        self.__surname = surname\n\n# Writing an object and defining the fieldnames automatically from the object property\nwith CsvWriter('data.csv', fieldnames=Employee) as writer:\n    writer.write(Employee('John', 'Smith'))\n    writer.write(Employee('Maria', 'Ortega'))\n```\n\nBy default, if the file 'data.csv' exists, it will be removed. In order to avoid it and add the rows at the end of the \nfile, you can use the __mode__ parameter with the value __Mode.APPEND__ like this:\n\n```python\nfrom filedatasource import CsvWriter, Mode\n\n# Creating a CsvWriter in APPEND mode\nwith CsvWriter('data.csv', fieldnames=['a', 'b', 'c'], mode=Mode.APPEND) as writer:\n    writer.write_dicts([\n        {'a': 10, 'b': 11, 'c': 12},\n        {'a': 13, 'b': 14, 'c': 15}\n    ])\n\nfrom filedatasource import ExcelWriter, Mode\n\n# Creating a ExcelWriter in APPEND mode (important note below)\nwith ExcelWriter('data.xlsx', fieldnames=['a', 'b', 'c'], mode=Mode.APPEND) as writer:\n    writer.write_dicts([\n        {'a': 10, 'b': 11, 'c': 12},\n        {'a': 13, 'b': 14, 'c': 15}\n    ])\n```\n\n**Important note**: If an Excel file has more than one sheet, the append mode will remove all the rest sheets.\n\n## Working with Excel sheets\n\n__ExcelReader__ only works with one Excel sheet at a time. You can select the sheet to read using the parameter \n__sheet__ using the sheet name or its number (starting by 0). For example, if we have the file **Example.xls** with\ntwo sheets, the first one named **Clients**, and the second one named **Suppliers**, you can do the following:\n\n```python\nfrom filedatasource import ExcelReader\n\n# Reading the first sheet of the file 'Example.xls'\nwith ExcelReader('Example.xls', sheet=0) as reader:\n    for row in reader:\n        print(row)\n# Reading the second sheet of the file 'Example.xls'\nwith ExcelReader('Example.xls', sheet=1) as reader:\n    for row in reader:\n        print(row)\n# Reading the sheet named 'Clients' of the file 'Example.xls'\nwith ExcelReader('Example.xls', sheet='Clients') as reader:\n    for row in reader:\n        print(row)\n# Reading the sheet named 'Suppliers' of the file 'Example.xls'\nwith ExcelReader('Example.xls', sheet='Suppliers') as reader:\n    for row in reader:\n        print(row)\n```\n\n## Reading and writing whole files\n\nWith **filedatasource** you can read or write a whole data file in two lines using __DataWriter.write_lists()__,\n__DataWriter.write_dicts()__, and __DataWriter.write_objects()__ for writing list of lists, dictionaries and object,\nrespectively; and __DataReader.read_lists()__, __DataReader.read_rows()__, and __DataReader.read_objects()__ for \ngetting a list of lists, dictionaries or objects with the all the file data.\n\nFor example, writing several rows:\n\n```python\nfrom filedatasource import CsvWriter\n\nwith CsvWriter('data.xlsx', fieldnames=['a', 'b', 'c']) as writer:\n    writer.write_lists([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ])\n    writer.write_dicts([\n        {'a': 10, 'b': 11, 'c': 12},\n        {'a': 13, 'b': 14, 'c': 15}\n    ])\n    writer.write_objects([\n        Example(16, 17, 18),\n        Example(19, 20, 21),\n        Example(22, 23, 24)\n    ])\n```\nAll these methods also work with __ExcelWriter__.\n\nFor reading a whole file, you only need to write the following sentences:\n\n```python\nfrom filedatasource import CsvReader, ExcelReader\n\n# Read a whole compressed CSV file and get a list of lists\nwith CsvReader('data.csv.gz') as reader:\n    lists = reader.read_lists()\nfieldnames = reader.fieldnames  # This line is only necessary if you want to get the fieldnames for read_lists()\nprint(fieldnames[0], lists[0][0])\n    \n# Read a whole CSV file and obtain a list of dictionaries, with the fieldnames as key and the data the values.\nwith CsvReader('data.csv') as reader:\n    dicts = reader.read_rows()\nprint(lists[0]['name'])\n\n# Read a whole Excel file and obtain a list of objects, with the fieldnames as object attributes\nwith ExcelReader('data.xlsx') as reader:\n    objs = reader.read_objects()\nprint(lists[0].name)\n```\n\n## Convert from CSV to Excel and vice-versa\n\nWith these tools, it is very simply to convert from a CSV to an Excel file and viceversa:\n\n```python\nfrom filedatasource import ExcelWriter, CsvReader\n\nwith CsvReader('data.csv') as reader:\n    with ExcelWriter('data.xlsx', fieldnames=reader.fieldnames) as writer:\n        for obj in reader:\n            writer.write(obj)\n```\n\nHowever, it can be made easier: \n\n```python\nfrom filedatasource import ExcelWriter, CsvReader\n\nwith CsvReader('data.csv') as reader:\n    with ExcelWriter('data.xlsx', fieldnames=reader.fieldnames) as writer:\n        writer.import_reader(reader)\n```\n\nWhat's more, it can be even easier: \n\n```python\nfrom filedatasource import convert\n\nconvert('data.csv', 'data.xlsx')\n```\n\n## Compare the content of two files\n\nYou can use __equals()__ to check if two file data sources have the same content independently \nif they are the same file type or different.\nHowever, if one of the files are CSV and the other Excel, and some columns are not strings,\nthe comparison are going to fail. It is better to compare the same type of files or\nto work only with strings to be sure the comparison is correct.\n\nThe syntax os __equals()__ is very easy:\n\n```python\nfrom filedatasource import equals\n\nprint(equals('test.xlsx', 'test.csv.gz'))\n```\n\n## Reading CSV with field types\n\nIn Excel files you can save information maintaining their original data types. For example, if you store a row with\ndifferent field types, you can retrieve the information with the same vale types. For instance:\n\n```python\nfrom filedatasource import  ExcelWriter, ExcelReader\n\nwith ExcelWriter('data.xlsx', fieldnames=['a', 'b', 'c', 'd']) as writer:\n    writer.write(['One', 2, 3.0, True])\nwith ExcelReader('data.xlsx') as reader:\n    print(reader.read_list()) # --> print ['One', 2, 3.0, True]\n```\n\nHowever, a CSV file does not contain any information about field types. And using CsvWriter and CsvReader in the \nsame way you will get the list ['One', '2', '3.0', 'True']. That means, all the values in string format. \nTo solve this, you can use the **types** parameter as following:\n\n```python\nfrom filedatasource import  CsvWriter, CsvReader\n\nwith CsvWriter('data.csv', fieldnames=['a', 'b', 'c', 'd']) as writer:\n    writer.write(['One', 2, 3.0, True])\n# Define how the data type of each field using a list\nwith CsvReader('data.csv', types=[str, int, float, bool]) as reader:\n    print(reader.read_list()) # -> print ['One', 2, 3.0, True])\n# Define how the data type of each field using a dictionary\nwith CsvReader('data.csv', types={'a': str, 'b': int, 'c': float, 'd': bool}) as reader:\n    print(reader.read_list()) # -> print ['One', 2, 3.0, True])\n```\n\nThis way, you can define the data values in the correct field type. If there are fields without defining, then \na string value will be returned for those fields.\n\n## Writers with predefined fieldnames\n\nIf you are using the same writer several times, you can use a subclass in order to avoid define the __fieldnames__ \nseveral times overwriting the fieldnames property. For example:\n\n```python\nfrom filedatasource import CsvWriter, Mode\nfrom typing import List\n\nclass TestWriter(CsvWriter):\n    @property\n    def fieldnames(self) -> List[str]:\n        return ['a', 'b', 'c']\n\nwith TestWriter('data.csv') as writer:\n    writer.write_lists([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ])\nwith TestWriter(('data.csv', mode=Mode.APPEND) as writer:\n    writer.write_dicts([\n        {'a': 10, 'b': 11, 'c': 12},\n        {'a': 13, 'b': 14, 'c': 15}\n    ])\n```\n\nHowever, it could be easier using just one line using the functions __load()__ and  __save()__, \n__save_dicts()__ or __save_lists()__. This method load and/or save Excel or CSV files based on the file extension.\n\n```python\nfrom filedatasource import load, save, save_dicts, save_lists, ReadMode\n\n# Obtain a list of objects from a CSV file and print the first row.\nobjs = load('data.csv')\nprint(objs[0].a, objs[0].b, objs[0].c)\n\n# Obtain a list of dictionaries from a compressed CSV file and print the first row.\ndicts = load('data.csv.gz', mode=ReadMode.DICT)\nprint(dicts[0]['a'], dicts[0]['b'], dicts[0]['c'])\n\n# Obtain a list of lists from an Excel file and print the first row.\nlists = load('data.xlsx', mode=ReadMode.LIST)\nprint(lists[0][0], lists[0][1], lists[0][2])\n\n# Write a list of objects in a XLS file\ndata_objects = [\n    Example(16, 17, 18),\n    Example(19, 20, 21),\n    Example(22, 23, 24)\n]\nsave('data.xls', data_objects)\n\n# Write a list of dictionaries in a XLS file\ndata_dict = [\n    {'a': 10, 'b': 11, 'c': 12},\n    {'a': 13, 'b': 14, 'c': 15}\n]\nsave_dicts('data.xls', data_dict)\n\n# Write a list of lists in a XLSX file with the column names 'a', 'b' and 'c'\ndata_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nsave_lists('data.xlsx', data_list, fieldnames=['a', 'b', 'c'])\n```\n\nIt is possible to use the function __load_objs()__, __load_dicts()__ and __load_lists()__ instead of \nthe function __load()__ with the parameter __mode__.\n\nAlso, it is possible to use the functions __list2csv()__, __dict2csv()__, __objects2csv()__, __list2excel()__,\n__dict2excel()__ and __objects2excel()__ in order to force the format of the output file independently of the file\nextension:\n\n```python\nfrom filedatasource import list2csv, dict2csv, objects2csv\nfrom filedatasource import list2excel, dict2excel, objects2excel\n\ndata_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\ndata_dict = [\n    {'a': 10, 'b': 11, 'c': 12},\n    {'a': 13, 'b': 14, 'c': 15}\n]\ndata_objects = [\n    Example(16, 17, 18),\n    Example(19, 20, 21),\n    Example(22, 23, 24)\n]\n\n# Write a list of lists into a CSV file\nlist2csv('data.csv', data_list, fieldnames=['a', 'b', 'c'])\n# Write a list of dicts into a CSV file\ndict2csv('data.csv', data_dict, fieldnames=['a', 'b', 'c'])\ndict2csv('data.csv', data_dict) # Use the key as fieldnames\n# Write a list of objects into a compressed CSV file\nobjects2csv('data.csv.gz', data_objects, fieldnames=['a', 'b', 'c'])\nobjects2csv('data.csv.gz', data_objects) # Use object attributes as fieldnames\n# Write a list of lists into an Excel file\nlist2excel('data.xlsx', data_list, fieldnames=['a', 'b', 'c'])\n# Write a list of dicts into an Excel file\ndict2excel('data.xlsx', data_dict, fieldnames=['a', 'b', 'c'])\n# Write a list of objects into a XLS file\nobjects2excel('data.xls', data_objects, fieldnames=['a', 'b', 'c'])\n```\n\nAnd, you can also use the equivalent functions __csv2list()__, __csv2dict()__, __csv2objects()__,\n__excel2list()__, __excel2dict()__, and __excel2objects()__. For example:\n\n```python\nfrom filedatasource import csv2list, csv2dict, excel2objects\n\n# Read a whole compressed CSV file and get a list of lists\nlists = csv2list('data.csv.gz')\nprint(lists[0][0])\n\n# Read a whole CSV file and obtain a list of dictionaries, with the fieldnames as key and the data the values.\ndicts = csv2dict('data.csv')\nprint(lists[0]['name'])\n\n# Read a whole Excel file and obtain a list of objects, with the fieldnames as object attributes\nobjs = excel2objects('data.xlsx')\nprint(lists[0].name)\n```\n## Builders\n\nYou have two builders to create readers or writers based on the file extension with default arguments.\n\n```python\nfrom filedatasource import open_reader, open_writer\n\n# Read a CSV\nwith open_reader('data.csv') as reader:\n    ...\n\n# Read a compressed CSV\nwith open_reader('data.csv.gz') as reader:\n    ...\n\n# Read the first sheet from an Excel\nwith open_reader('data.xlsx') as reader:\n   ...\n\n# Write a CSV\nwith open_writer('data.csv', fieldnames=[...]) as writer:\n    ...\n\n# Write a compressed CSV\nwith open_writer('data.csv.gz', fieldnames=[...]) as writer:\n    ...\n\n# Write an Excel file creating a default sheet\nwith open_writer('data.xlsx', fieldnames=[...]) as writer:\n   ...\n```\n\nUsing the __open_reader()__ you can use the __mode__ parameter to set how get each row.\n\n```python\nfrom filedatasource import open_reader, ReadMode\n\n# Reading the file and returning objects\nwith open_reader('data.xlsx') as reader:\n   for obj in reader:\n        print(obj.a, obj.b, obj.c)\n\n# Read the file and returning dictionaries\nwith open_reader('data.csv', mode=ReadMode.DICT) as reader:\n   for d in reader:\n        print(d['a'], d['b'], d['c'])\n\n# Read the file and returning lists of values\nwith open_reader('data.csv.gz', mode=ReadMode.LIST) as reader:\n   for lst in reader:\n        print(lst[0], lst[1], lst[2])\n```\n\n## Size calculation\n\nIt is possible to know how many rows has a data source for both, writer or reader. For example:\n\n```python\nfrom filedatasource import open_reader, open_writer\n\n# How to know the number of rows in a reader with data\nwith open_reader('data.csv') as reader:\n    print(len(reader))\n\n# How to know the number of rows in a writer\nwith open_writer('data.csv', fieldnames=['a', 'b', 'c']) as writer:\n    print(len(writer))  # Print 0 because the file is opened for write.\n    writer.write(a=1, b=2, c=3)\n    writer.write(a=4, b=5, c=6)\n    print(len(writer))  # Print 2 because has been added two rows.\n```\n\n**Note**: The file length calculation does not work with readers oppened with a file stream instead of a file path or \nwith a writer opened with append mode and from a file stream.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmgomezsoriano/filedatasource",
    "keywords": "",
    "license": "lGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "filedatasource",
    "package_url": "https://pypi.org/project/filedatasource/",
    "platform": "",
    "project_url": "https://pypi.org/project/filedatasource/",
    "project_urls": {
      "Homepage": "https://github.com/jmgomezsoriano/filedatasource"
    },
    "release_url": "https://pypi.org/project/filedatasource/1.1.19/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Convert several file data sources (like typical CSV or Excel) to python objects in a easy manner.",
    "version": "1.1.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13033863,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b41a0ed231df06b4ca9ce42429c68c560499d2bca4f6189eaffa5f13ebbb15",
          "md5": "1d540869e5d1ba4b9e1a368a536bba58",
          "sha256": "ec6444f533dd135c77401f3215f109240194929876dcc625995d7a76ada444e9"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d540869e5d1ba4b9e1a368a536bba58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25723,
        "upload_time": "2021-02-08T15:51:41",
        "upload_time_iso_8601": "2021-02-08T15:51:41.525376Z",
        "url": "https://files.pythonhosted.org/packages/24/b4/1a0ed231df06b4ca9ce42429c68c560499d2bca4f6189eaffa5f13ebbb15/filedatasource-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b81b97e6f461f238a595ff83e8b2e345865f5b276c6bc40cbce5ccf37d96f621",
          "md5": "6c8d418c35af301e6c4e971384072713",
          "sha256": "ef375edc8db7da672c4411a3c13c326b8b2933cf32ce99648e539b8b348615fa"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c8d418c35af301e6c4e971384072713",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15175,
        "upload_time": "2021-02-08T15:51:42",
        "upload_time_iso_8601": "2021-02-08T15:51:42.853755Z",
        "url": "https://files.pythonhosted.org/packages/b8/1b/97e6f461f238a595ff83e8b2e345865f5b276c6bc40cbce5ccf37d96f621/filedatasource-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afc9a5b52a6920e1846944627bca0c7dfec7ec62a7eeb24218d3d848eb0430d8",
          "md5": "8206251a58e8d367e77ffe594c686523",
          "sha256": "c33d37e3546b482b486583b3b8c33f9318b836df688f3b05547c434fbb2c43d6"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8206251a58e8d367e77ffe594c686523",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29925,
        "upload_time": "2021-03-13T16:06:44",
        "upload_time_iso_8601": "2021-03-13T16:06:44.523090Z",
        "url": "https://files.pythonhosted.org/packages/af/c9/a5b52a6920e1846944627bca0c7dfec7ec62a7eeb24218d3d848eb0430d8/filedatasource-1.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bcce5dd2f1ce5d1841bf577a4076312a308441f9cb5a42e066725aa0c274233",
          "md5": "aff08e47ad74f22aa7c8706c57bc7559",
          "sha256": "ddc6f2c08a0368700bdd0d409fa9e6e4c34705d134142739605a372fb2699780"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "aff08e47ad74f22aa7c8706c57bc7559",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24009,
        "upload_time": "2021-03-13T16:06:46",
        "upload_time_iso_8601": "2021-03-13T16:06:46.356185Z",
        "url": "https://files.pythonhosted.org/packages/6b/cc/e5dd2f1ce5d1841bf577a4076312a308441f9cb5a42e066725aa0c274233/filedatasource-1.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b035fbd1eb97d1c363db9c8b4a5698a5bf783c6e3baee7f4619633229aad6fcf",
          "md5": "4802832a2bec87373096f3fedd967172",
          "sha256": "265e82d64bd4be8d33c0db724325a1db9ffdcac2290d92bf147ac26706a27e77"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "4802832a2bec87373096f3fedd967172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24284,
        "upload_time": "2021-07-22T08:52:47",
        "upload_time_iso_8601": "2021-07-22T08:52:47.714784Z",
        "url": "https://files.pythonhosted.org/packages/b0/35/fbd1eb97d1c363db9c8b4a5698a5bf783c6e3baee7f4619633229aad6fcf/filedatasource-1.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bce0ed8e316f63c7039ced22e9cf2bee88f608d534e35377d501322fe289e24",
          "md5": "38172a05d20e144a852a70bb0d9bf490",
          "sha256": "4d13caa8fd4f61be3fb319d45fd52ee4630d379c99cb15e6370af80631be19c0"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38172a05d20e144a852a70bb0d9bf490",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30137,
        "upload_time": "2021-08-02T12:01:23",
        "upload_time_iso_8601": "2021-08-02T12:01:23.133972Z",
        "url": "https://files.pythonhosted.org/packages/4b/ce/0ed8e316f63c7039ced22e9cf2bee88f608d534e35377d501322fe289e24/filedatasource-1.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d41827d8fceb647153b5f919b06e49a956107c77ab0559e0cf8888eaaf11e09d",
          "md5": "286dc460f77c61673fd6d8b2df6b2d12",
          "sha256": "52f26c329a33b2d0ebcc0f95882023d3c0cfbaa67c07348b0afa258f753410b5"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "286dc460f77c61673fd6d8b2df6b2d12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24395,
        "upload_time": "2021-08-02T12:01:25",
        "upload_time_iso_8601": "2021-08-02T12:01:25.641371Z",
        "url": "https://files.pythonhosted.org/packages/d4/18/27d8fceb647153b5f919b06e49a956107c77ab0559e0cf8888eaaf11e09d/filedatasource-1.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97fadf604edf4a3a7ce6f15a2dfd4a9eed82dfa22e8853c30ad945388c10fe18",
          "md5": "1bee1b7d6c3fc544d2beb4c3b1c43307",
          "sha256": "5701b117f40705cb57bc7915b003dd3e1db071bec0d0ca9ff7f51fa2ebcdd40c"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "1bee1b7d6c3fc544d2beb4c3b1c43307",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24743,
        "upload_time": "2021-10-15T06:56:00",
        "upload_time_iso_8601": "2021-10-15T06:56:00.555581Z",
        "url": "https://files.pythonhosted.org/packages/97/fa/df604edf4a3a7ce6f15a2dfd4a9eed82dfa22e8853c30ad945388c10fe18/filedatasource-1.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90e2f6208dbb01edd4ab7a7a780fbfb05b9e7d9992a541d970ebc38dec1633f5",
          "md5": "344371946bf146a56bc4ad30dda65d27",
          "sha256": "138eff4be88087627f7b2189fedb90b6f507550bc6c85e0250fa607c3ba7500f"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "344371946bf146a56bc4ad30dda65d27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26412,
        "upload_time": "2022-01-26T13:37:07",
        "upload_time_iso_8601": "2022-01-26T13:37:07.594430Z",
        "url": "https://files.pythonhosted.org/packages/90/e2/f6208dbb01edd4ab7a7a780fbfb05b9e7d9992a541d970ebc38dec1633f5/filedatasource-1.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282d4c65ba8e4878ac11152cfd8fef4c558e5e751b6adcf7fa1db8ff1d2d91b7",
          "md5": "6ce299a483e7758694ebfc74ba1501b9",
          "sha256": "02ee244fb9be7bad9822e5eb7798fa3b9fe5fcf26f2244d6689a1c2aea4e9c76"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "6ce299a483e7758694ebfc74ba1501b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26695,
        "upload_time": "2022-02-17T16:05:56",
        "upload_time_iso_8601": "2022-02-17T16:05:56.260678Z",
        "url": "https://files.pythonhosted.org/packages/28/2d/4c65ba8e4878ac11152cfd8fef4c558e5e751b6adcf7fa1db8ff1d2d91b7/filedatasource-1.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b2ca6aa60764771519b394b44d1f2a7c272a62709dea065d9b7e6dea1d2106",
          "md5": "e011c684c356f914c5e1bbb8c0fedbf4",
          "sha256": "283e04587f8acf37b9fa6f26f9c4eb6b7353febf2d21fb18226a343401519712"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "e011c684c356f914c5e1bbb8c0fedbf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26795,
        "upload_time": "2022-02-25T14:49:23",
        "upload_time_iso_8601": "2022-02-25T14:49:23.417337Z",
        "url": "https://files.pythonhosted.org/packages/d9/b2/ca6aa60764771519b394b44d1f2a7c272a62709dea065d9b7e6dea1d2106/filedatasource-1.1.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f76182094cc96d0954cd768b58b504e973f8235c031b4f80291c06dfbc87740e",
          "md5": "69d0d2a4df3f34e2a39332a4f2881856",
          "sha256": "5edf75a52278d2b33251a0610fcf17a6ac644c2793e9d242dd9501ea44c8f16f"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "69d0d2a4df3f34e2a39332a4f2881856",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26834,
        "upload_time": "2022-02-28T14:06:35",
        "upload_time_iso_8601": "2022-02-28T14:06:35.345715Z",
        "url": "https://files.pythonhosted.org/packages/f7/61/82094cc96d0954cd768b58b504e973f8235c031b4f80291c06dfbc87740e/filedatasource-1.1.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45e6c047aabbce1fc61ede5cf0d5e8b2f42cfa20a5e786d90c8d9332947706f3",
          "md5": "f52f7d33417effc86e49b2b199baffbb",
          "sha256": "80eb8acd37496d14b79f920c90dbe450e3d0f124101a92035e8a7f8ea1bc4055"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f52f7d33417effc86e49b2b199baffbb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25839,
        "upload_time": "2021-02-08T17:51:00",
        "upload_time_iso_8601": "2021-02-08T17:51:00.938356Z",
        "url": "https://files.pythonhosted.org/packages/45/e6/c047aabbce1fc61ede5cf0d5e8b2f42cfa20a5e786d90c8d9332947706f3/filedatasource-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3f527826c6fad4fc300d7dade7f346be928cdc85c4f27911c5189d165e61e63",
          "md5": "f50a852c8f0f443ca1cc9e34122000f1",
          "sha256": "2ec54b260585acb06a9887555a0a9b2dab61599561d221780fb05106352fbb0a"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f50a852c8f0f443ca1cc9e34122000f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15254,
        "upload_time": "2021-02-08T17:51:02",
        "upload_time_iso_8601": "2021-02-08T17:51:02.676120Z",
        "url": "https://files.pythonhosted.org/packages/d3/f5/27826c6fad4fc300d7dade7f346be928cdc85c4f27911c5189d165e61e63/filedatasource-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e67ce920444fc689020d1fcab1160d6603463050241988f41c0926d0dc1a1417",
          "md5": "8bdfaf3a41085a9e319a8db2b9492ea5",
          "sha256": "b34efc698696dfe642e34d89fb4685ebafabc331971358e665d93efa41643b8f"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bdfaf3a41085a9e319a8db2b9492ea5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25820,
        "upload_time": "2021-02-08T19:13:30",
        "upload_time_iso_8601": "2021-02-08T19:13:30.659419Z",
        "url": "https://files.pythonhosted.org/packages/e6/7c/e920444fc689020d1fcab1160d6603463050241988f41c0926d0dc1a1417/filedatasource-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e6615121cf72cf1748a843a642ec4522df34bf704f1e268049acaf50f835c03",
          "md5": "1160aca051ae2ccc3a1f76c3badf8a0a",
          "sha256": "b0b3040b42ef0499bb939626ada0606cda51915d95011d3ebfe839b2a9d66b51"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1160aca051ae2ccc3a1f76c3badf8a0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15232,
        "upload_time": "2021-02-08T19:13:32",
        "upload_time_iso_8601": "2021-02-08T19:13:32.503421Z",
        "url": "https://files.pythonhosted.org/packages/0e/66/15121cf72cf1748a843a642ec4522df34bf704f1e268049acaf50f835c03/filedatasource-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fa4edbe47ff16df5e377ffe0ee7916181fab21d6dad8f94f6f9161df891b864",
          "md5": "6e4ea15669d01300d5646770b9c09fa1",
          "sha256": "e49e523d2b165458395f976a78294b2be0d9e33722ed05f8da3ebfcd439fe01b"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e4ea15669d01300d5646770b9c09fa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26242,
        "upload_time": "2021-02-13T19:00:39",
        "upload_time_iso_8601": "2021-02-13T19:00:39.887035Z",
        "url": "https://files.pythonhosted.org/packages/8f/a4/edbe47ff16df5e377ffe0ee7916181fab21d6dad8f94f6f9161df891b864/filedatasource-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cca1b53d7f5ac66f5ca0e13df9ab92c6bca052e907eb8ee0fe8f9bdb5b74cd5",
          "md5": "fcb3287ebed286a22d3a0af0a8e50f48",
          "sha256": "c5c7d6997518edfbc35d379b83c252b8a71a54fa38d051731adadef75d1955ef"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fcb3287ebed286a22d3a0af0a8e50f48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15896,
        "upload_time": "2021-02-13T19:00:41",
        "upload_time_iso_8601": "2021-02-13T19:00:41.465911Z",
        "url": "https://files.pythonhosted.org/packages/2c/ca/1b53d7f5ac66f5ca0e13df9ab92c6bca052e907eb8ee0fe8f9bdb5b74cd5/filedatasource-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc2705abead4cd1ca276c802be4a093390795757442ffc315dfe1d2c3323c0bd",
          "md5": "2ee31f24250370991730921241137cfc",
          "sha256": "42a8daf2ebec6d538f9f0a2c51592345abd83cf2dd681f67f017f54c053e6f85"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ee31f24250370991730921241137cfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27154,
        "upload_time": "2021-02-24T15:55:55",
        "upload_time_iso_8601": "2021-02-24T15:55:55.252716Z",
        "url": "https://files.pythonhosted.org/packages/fc/27/05abead4cd1ca276c802be4a093390795757442ffc315dfe1d2c3323c0bd/filedatasource-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1203d4c067dbd12395a18d9a8d53e3ec81bfb221dd3885c8801583f4c623d081",
          "md5": "77be82336058a865a933a6f43052d09c",
          "sha256": "c9dc851d2356d99261a15983711d4754fd4b24d54296ad0f8a82f86c47cb8565"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "77be82336058a865a933a6f43052d09c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16511,
        "upload_time": "2021-02-24T15:55:56",
        "upload_time_iso_8601": "2021-02-24T15:55:56.792298Z",
        "url": "https://files.pythonhosted.org/packages/12/03/d4c067dbd12395a18d9a8d53e3ec81bfb221dd3885c8801583f4c623d081/filedatasource-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d17c8ca09a1004c45b4a50521050a6558541cf9891782615afa98cdc8cf5c82",
          "md5": "1541077d06ad95607823d913943a03b4",
          "sha256": "c84c3c92324cabfdacf05b2b8f42e379594b016dab38e3e7914b84ac5d0a8f2e"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1541077d06ad95607823d913943a03b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27881,
        "upload_time": "2021-02-25T09:44:35",
        "upload_time_iso_8601": "2021-02-25T09:44:35.822543Z",
        "url": "https://files.pythonhosted.org/packages/5d/17/c8ca09a1004c45b4a50521050a6558541cf9891782615afa98cdc8cf5c82/filedatasource-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d571d0bf8d454b6b04b22f3af9dc16a2b283e7431443a3ca208e4ff00d2f0c3",
          "md5": "453691ca9093bf92d52ae0206d23d27b",
          "sha256": "aa5518e6efb6964e758834e26071edf28bb5e45ee9843b15c5948a0ee6ff8453"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "453691ca9093bf92d52ae0206d23d27b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18236,
        "upload_time": "2021-02-25T09:44:37",
        "upload_time_iso_8601": "2021-02-25T09:44:37.365633Z",
        "url": "https://files.pythonhosted.org/packages/6d/57/1d0bf8d454b6b04b22f3af9dc16a2b283e7431443a3ca208e4ff00d2f0c3/filedatasource-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0510350e0522a5cac363fd8ed40d72e97321f283c9be9c5ca00a87687a848e4f",
          "md5": "09af1027cb7051c0bf9b4469b1950a85",
          "sha256": "f59ef49d0420a3ad26be70befffb13d74f246f77ac034bbeb935a206c65aa783"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09af1027cb7051c0bf9b4469b1950a85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28504,
        "upload_time": "2021-03-10T20:09:39",
        "upload_time_iso_8601": "2021-03-10T20:09:39.755523Z",
        "url": "https://files.pythonhosted.org/packages/05/10/350e0522a5cac363fd8ed40d72e97321f283c9be9c5ca00a87687a848e4f/filedatasource-1.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8cd7529299ed8fcaa0ef08ccc85d6c6c8517c854ad6f7211c61a75f3ff017f1",
          "md5": "3565aedd0a9437b0ce047d6c6d02ba95",
          "sha256": "a8f25b98e0a316a0e4bbc31358b4123d1f419166e6d3fdc3959ecbb765cf47af"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3565aedd0a9437b0ce047d6c6d02ba95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21593,
        "upload_time": "2021-03-10T20:09:41",
        "upload_time_iso_8601": "2021-03-10T20:09:41.461572Z",
        "url": "https://files.pythonhosted.org/packages/a8/cd/7529299ed8fcaa0ef08ccc85d6c6c8517c854ad6f7211c61a75f3ff017f1/filedatasource-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29f86182d58429d741f40fd9d4d37eaa3e8a24dc7715e19f2b145bd08a2b0900",
          "md5": "9ff68dd5dcc8a4163361a2eb775ac20c",
          "sha256": "8ab2e0028be95bf26c34479edaef474d41e022f1cedf6a93aae5a29998b8ed74"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ff68dd5dcc8a4163361a2eb775ac20c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28861,
        "upload_time": "2021-03-11T11:19:37",
        "upload_time_iso_8601": "2021-03-11T11:19:37.181890Z",
        "url": "https://files.pythonhosted.org/packages/29/f8/6182d58429d741f40fd9d4d37eaa3e8a24dc7715e19f2b145bd08a2b0900/filedatasource-1.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4d9a8e2f04269c014056f8d1216c9d4836feb242fa01195734fca18d6d16510",
          "md5": "26ce199a337cd9fe1117708e0cb7917f",
          "sha256": "445cf2ffff7eb5f14e0b1d092fbb68d3df46946bc4d1792065c366456e1483f9"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "26ce199a337cd9fe1117708e0cb7917f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21998,
        "upload_time": "2021-03-11T11:19:38",
        "upload_time_iso_8601": "2021-03-11T11:19:38.924726Z",
        "url": "https://files.pythonhosted.org/packages/a4/d9/a8e2f04269c014056f8d1216c9d4836feb242fa01195734fca18d6d16510/filedatasource-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75f82c1fd4654aa2e336ad3b63efe64cb24624c4d4edd74e00b794f809a9d1e6",
          "md5": "f60eb5618403559442800f24d88ad5ea",
          "sha256": "7b14d20063ae3857eea744144cea5d3bd54da9cabf2340be49e72dd3ab45fda1"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f60eb5618403559442800f24d88ad5ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29332,
        "upload_time": "2021-03-13T10:50:43",
        "upload_time_iso_8601": "2021-03-13T10:50:43.678043Z",
        "url": "https://files.pythonhosted.org/packages/75/f8/2c1fd4654aa2e336ad3b63efe64cb24624c4d4edd74e00b794f809a9d1e6/filedatasource-1.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81af64940b2d44bdbd357609e9104fa15b9acd2c2c9a3fff21dd6cc51896c5db",
          "md5": "315b7bf8395f2fec4e15a05cf4b20d9a",
          "sha256": "1ed507f04728113d085c3e19b4df07d77ecbc7edf561f33556b654c593bdfac2"
        },
        "downloads": -1,
        "filename": "filedatasource-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "315b7bf8395f2fec4e15a05cf4b20d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22714,
        "upload_time": "2021-03-13T10:50:45",
        "upload_time_iso_8601": "2021-03-13T10:50:45.484517Z",
        "url": "https://files.pythonhosted.org/packages/81/af/64940b2d44bdbd357609e9104fa15b9acd2c2c9a3fff21dd6cc51896c5db/filedatasource-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f76182094cc96d0954cd768b58b504e973f8235c031b4f80291c06dfbc87740e",
        "md5": "69d0d2a4df3f34e2a39332a4f2881856",
        "sha256": "5edf75a52278d2b33251a0610fcf17a6ac644c2793e9d242dd9501ea44c8f16f"
      },
      "downloads": -1,
      "filename": "filedatasource-1.1.19.tar.gz",
      "has_sig": false,
      "md5_digest": "69d0d2a4df3f34e2a39332a4f2881856",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26834,
      "upload_time": "2022-02-28T14:06:35",
      "upload_time_iso_8601": "2022-02-28T14:06:35.345715Z",
      "url": "https://files.pythonhosted.org/packages/f7/61/82094cc96d0954cd768b58b504e973f8235c031b4f80291c06dfbc87740e/filedatasource-1.1.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}