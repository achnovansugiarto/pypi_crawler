{
  "info": {
    "author": "",
    "author_email": "Peter Linss <peter@linss.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# configuration_settings module\n\nGeneral purpose config file parser.\n\n\n### Installation\n\nInstall with pip:\n\n    pip install configuration-settings\n\n\n### Usage\n\nLoad a set of config files:\n\n    from configuration_settings import Config\n\n    config = Config.load(__file__)\n\nYou may optionally pass a path to a specific config file (generally passed as a command line argument),\nand a dict containing default values.\n\n    def load(cls, script_path: str, config_path: str = None, default: Mapping[str, Any] = None) -> Config:\n\nConfig files may be JSON or YAML, and can contain arbitrary structure.\nDicts in config files are converted to Config objects.\nNames (keys) are case-insensitive.\n\nConfig files are loaded from the following locations:\n\n* If no config path is provided:\n\n  * All parent directories from the location the script is located\n  * The directory the script is located\n  * /etc/{script_name}\n  * The current directory\n\n* If a config path is provided \n\n  * All parent directories from the location the script is located\n  * The directory the script is located\n  * The provided config path\n\nFor each location,\nif the location is a file, load that file, \nthen search the file's directory for directories named: \n'conf.d', 'config.d', '{script_name}.d', '{file_name}.d',\nload all files in those directories in alphabetical order.\nIf the location is a directory, search for files named: \n'config', 'config.local', '{script_name}', '{script_name}.local',\nthen search for subdirectories named:\n'conf.d', 'config.d', '{script_name}.d', '{file_name}.d'.\n\nFiles loaded later override values found in earlier files.\nDict values are merged so only provided keys are replaced.\n\nConfig files may have the following extensions: '.json', '.yml', '.yaml'.\n\nCommon usage would be to have a config file with default values installed in the same location as the main script,\nand then the user would override settings in /etc/{script_name}/config.yaml and /etc/{script_name}/config.d/*.yaml.\n\nConfig objects are dict-like and also allow accessing values as properties.\n\n\nIn addition, there are methods to get values as a specific type:\n\n    def get_int(self, name: str, default: int = None) -> (int | None):\n        \"\"\"\n        Get an item as an int.\n\n        Returns default if missing or not an int.\n        \"\"\"\n\n    def get_float(self, name: str, default: float = None) -> (float | None):\n        \"\"\"\n        Get an item as a float.\n\n        Returns default if missing or not a float.\n        \"\"\"\n\n    def get_bool(self, name: str, default: bool = None) -> (bool | None):\n        \"\"\"\n        Get an item as a bool.\n\n        Returns default if missing or not a bool.\n        \"\"\"\n\n    def get_path(self, name: str, default: str = None) -> (str | None):\n        \"\"\"\n        Get an item as an absolute path.\n\n        Relative paths are resolved to the config file the item was loaded from.\n        Returns default if missing.\n        \"\"\"\n    def get_duration(self, name: str, default: timedelta = None) -> (timedelta | None):\n        \"\"\"\n        Get an item as a timedelta.\n\n        Accepts int values (seconds),\n        or string values with s|m|h|d|w suffix for seconds, minutes, hours, days, or weeks.\n        \"\"\"\n\n\nYou can set a default value for any item via:\n\n    def set_default(self, name: str, value: Any) -> None:\n\n\nYou can retrieve the full set of patsh to config files via the `config_file_paths` property,\nor get the file a specific value was loaded from via:\n\n    def get_config_file_path(self, name: str) -> (str | None):\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "config",
    "license": "GNU Lesser General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "configuration-settings",
    "package_url": "https://pypi.org/project/configuration-settings/",
    "platform": null,
    "project_url": "https://pypi.org/project/configuration-settings/",
    "project_urls": {
      "homepage": "https://gitlab.linss.com/open-source/python/configuration-settings"
    },
    "release_url": "https://pypi.org/project/configuration-settings/1.0.0/",
    "requires_dist": [
      "PyYAML (<7.0,>=6.0)",
      "types-PyYAML ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-annotations ; extra == 'dev'",
      "flake8-bandit ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8-commas ; extra == 'dev'",
      "flake8-comprehensions ; extra == 'dev'",
      "flake8-continuation ; extra == 'dev'",
      "flake8-datetimez ; extra == 'dev'",
      "flake8-docstrings ; extra == 'dev'",
      "flake8-import-order ; extra == 'dev'",
      "flake8-literal ; extra == 'dev'",
      "flake8-modern-annotations ; extra == 'dev'",
      "flake8-noqa ; extra == 'dev'",
      "flake8-pyproject ; extra == 'dev'",
      "flake8-requirements ; extra == 'dev'",
      "flake8-typechecking-import ; extra == 'dev'",
      "flake8-use-fstring ; extra == 'dev'",
      "pep8-naming ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "General purpose config file parser",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15492218,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6b36b782e3a6107649081938b50a2666f6fda9595eebf55ff4763815492fac5",
          "md5": "2f12605dac52c7782b65c1f549d3a5ee",
          "sha256": "1d259783fda11e55d9c4c8a3a062f2ef51661017ed472387e52da2c2560a0810"
        },
        "downloads": -1,
        "filename": "configuration_settings-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f12605dac52c7782b65c1f549d3a5ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19287,
        "upload_time": "2022-10-22T00:53:13",
        "upload_time_iso_8601": "2022-10-22T00:53:13.243228Z",
        "url": "https://files.pythonhosted.org/packages/b6/b3/6b782e3a6107649081938b50a2666f6fda9595eebf55ff4763815492fac5/configuration_settings-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "482c709ef66523d7a053fc94f0dcb8a0cc274fcd339a7f6e0a971d00e0fef8e4",
          "md5": "8382b10c69f4339ee1179f1776667e6a",
          "sha256": "cfb7956784c733023b399d6ec4b9fd005bb3bcf57d8cf4f64d37246d4cd2fd97"
        },
        "downloads": -1,
        "filename": "configuration-settings-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8382b10c69f4339ee1179f1776667e6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19871,
        "upload_time": "2022-10-22T00:53:15",
        "upload_time_iso_8601": "2022-10-22T00:53:15.380377Z",
        "url": "https://files.pythonhosted.org/packages/48/2c/709ef66523d7a053fc94f0dcb8a0cc274fcd339a7f6e0a971d00e0fef8e4/configuration-settings-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6b36b782e3a6107649081938b50a2666f6fda9595eebf55ff4763815492fac5",
        "md5": "2f12605dac52c7782b65c1f549d3a5ee",
        "sha256": "1d259783fda11e55d9c4c8a3a062f2ef51661017ed472387e52da2c2560a0810"
      },
      "downloads": -1,
      "filename": "configuration_settings-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f12605dac52c7782b65c1f549d3a5ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 19287,
      "upload_time": "2022-10-22T00:53:13",
      "upload_time_iso_8601": "2022-10-22T00:53:13.243228Z",
      "url": "https://files.pythonhosted.org/packages/b6/b3/6b782e3a6107649081938b50a2666f6fda9595eebf55ff4763815492fac5/configuration_settings-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "482c709ef66523d7a053fc94f0dcb8a0cc274fcd339a7f6e0a971d00e0fef8e4",
        "md5": "8382b10c69f4339ee1179f1776667e6a",
        "sha256": "cfb7956784c733023b399d6ec4b9fd005bb3bcf57d8cf4f64d37246d4cd2fd97"
      },
      "downloads": -1,
      "filename": "configuration-settings-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8382b10c69f4339ee1179f1776667e6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 19871,
      "upload_time": "2022-10-22T00:53:15",
      "upload_time_iso_8601": "2022-10-22T00:53:15.380377Z",
      "url": "https://files.pythonhosted.org/packages/48/2c/709ef66523d7a053fc94f0dcb8a0cc274fcd339a7f6e0a971d00e0fef8e4/configuration-settings-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}