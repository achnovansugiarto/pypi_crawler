{
  "info": {
    "author": "Conceptual Vision Consulting LLC",
    "author_email": "seroukhov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# <img src=\"https://uploads-ssl.webflow.com/5ea5d3315186cf5ec60c3ee4/5edf1c94ce4c859f2b188094_logo.svg\" alt=\"Pip.Services Logo\" width=\"200\"> <br/> Client library for sample data microservice\r\n\r\nThis is a client library to the sample data microservice. This library shall be used\r\nas a template to create clients to general purpose data microservices.\r\n\r\nSupported functionality:\r\n* Null and Mock clients for testing\r\n* HTTP clients: REST and Commandable\r\n* GRPC clients: Plain and Commandable\r\n* AWS Lambda clients: Plain and Commandable\r\n\r\nKey patterns implemented in this library:\r\n\r\n**Zero-time onboarding:** A new developer doesn't have to have a prior khowledge of the code\r\nnor preinstalled and preconfigured development environment.\r\nTo get started with any component he/she just need to do 3 simple steps:\r\n+ Checkout the code\r\n+ Launch dependencies via [docker-compose.dev.yml](docker/docker-compose.dev.yml)\r\n+ Execute **npm test**.\r\n\r\n**Automated build and test processes:** Clear, build and test actions are dockerized and scripted.\r\nThe scripts shall be run before committing the code. And the same scripts shall be executed in automated\r\nCI/CD pipelines. That approach allows to make identical build and test actions across the entire delivery\r\npipeline. And have a clear separation between developer and DevOps roles (developers are responsible\r\nfor individual components, their build, test and packaging. DevOps are responsible for running CI/CD pipelines, assembling and testing entire system from individual components).\r\n\r\n**Multiple communication protocols:** The library contains clients that allow to connect to the microservice several different ways, depending on the environment or client requirements. For instance: on-premises the microservice can be deployed as a docker container. Locally it can be called via GRPC interface and externally via REST. When the same microservice is deployed on AWS cloud as a Lambda function, it can be called using the LambdaClient. Moreover, several microservice can be packaged into a single process, essentially represending a monolith. In that scenario, then can be called using in-process calls using the DirectClient.\r\n\r\n**Monitoring and Observability:** All clients are instrumented to collect logs of called operations, metrics that collect number of calls, average call times and number of erors, and traces. Depending on the deployment configuration that information can be sent to different destinations: console, Promethous, DataDog service, ApplicationInsights, CloudWatch and others.\r\n\r\n**Versioning:** Data objects and clients are versioned from the beginning. When breaking changes are introduced into the microservice, it shall keep the old version of the interface for backward-compatibility and expose a new version of the interface simultaniously. Then client library will have a new set of objects and clients for the new version, while keeping the old one intact. That will provide a clear versioning and backward-compatibility for users of the microservice.\r\n\r\n<a name=\"links\"></a> Quick links:\r\n\r\n* Communication Protocols:\r\n  - [gRPC Version 1](pip_client_data_python/protos/entities_v1.proto)\r\n  - [HTTP Version 1](https://github.com/pip-templates-services/pip-service-data-python/blob/main/pip_service_data_python/swagger/entities_v1.yaml)\r\n* [Microservice](https://github.com/pip-templates-services/pip-service-data-python)\r\n* [API Reference](https://pip-templates-services.github.io/pip-client-data-python/index.html)\r\n* [Change Log](CHANGELOG.md)\r\n\r\n\r\n## Contract\r\n\r\nThe contract of the microservice is presented below.\r\n\r\n```python\r\n\r\nclass EntityV1(IStringIdentifiable):\r\n    def __init__(self, id: str = None, site_id: str = None, type: str = None, name: str = None, content: str = None):\r\n        self.id = id            # Entity ID\r\n        self.type = type        # ID of a work site (field installation)\r\n        self.site_id = site_id  # Entity type: Type2, Type1 or Type3\r\n        self.name = name        # Human readable name\r\n        self.content = content  # String content\r\n\r\nclass IEntitiesClientV1(ABC):\r\n\r\n    def get_entities(self, correlation_id: Optional[str], filter_params: FilterParams, paging: PagingParams) -> DataPage:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n    def get_entities_by_id(self, correlation_id: Optional[str], entity_id: str) -> EntityV1:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n    def get_entity_by_name(self, correlation_id: Optional[str], entity_name: str) -> EntityV1:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n    def create_entity(self, correlation_id: Optional[str], entity: EntityV1) -> EntityV1:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n    def update_entity(self, correlation_id: Optional[str], entity: EntityV1) -> EntityV1:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n    def delete_entity_by_id(self, correlation_id: Optional[str], entity_id: str) -> EntityV1:\r\n        raise NotImplementedError(\"Method is not implemented\")\r\n\r\n\r\n```\r\n\r\n## Get\r\n\r\nGet the microservice source from GitHub:\r\n```bash\r\ngit clone git@github.com:pip-templates-services/pip-service-data-python.git\r\n```\r\n\r\nInstall the microservice dependencies:\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\nInstall the client library as a binary dependency:\r\n```bash\r\npip install pip-client-data-python\r\n```\r\n\r\n## Use\r\n\r\nInstall the client pip package as\r\n```bash\r\npip install install pip-client-data-python\r\n```\r\n\r\nInside your code get the reference to the client SDK\r\n```python\r\nfrom pip_services3_commons.config import ConfigParams\r\nfrom pip_services3_commons.data import FilterParams, PagingParams\r\n\r\nfrom pip_service_data_python.data.EntityTypeV1 import EntityTypeV1\r\nfrom pip_service_data_python.data.EntityV1 import EntityV1\r\n\r\nfrom pip_client_data_python.clients.version1 import EntitiesCommandableHttpClientV1\r\n```\r\n\r\nInstantiate the client\r\n```python\r\n# Create the client instance\r\nclient = EntitiesCommandableHttpClientV1()\r\n```\r\n\r\nDefine client connection parameters\r\n```python\r\n# Client configuration\r\nhttp_config = ConfigParams.from_tuples(\r\n\t\"connection.protocol\", \"http\",\r\n\t\"connection.host\", \"localhost\",\r\n\t\"connection.port\", 8080\r\n)\r\n# Configure the client\r\nclient.configure(http_config)\r\n```\r\n\r\nConnect to the microservice\r\n```python\r\n# Connect to the microservice\r\nclient.open(None)\r\n\r\n# Work with the microservice\r\n...\r\n```\r\n\r\nCall the microservice using the client API\r\n```python\r\n# Define a entity\r\nentity = EntityV1(\r\n    id= '1',\r\n    site_id= '1',\r\n    type= EntityTypeV1.Type1,\r\n    name= '00001',\r\n    content= 'ABC'\r\n)\r\n\r\n# Create the entity\r\nentity = self.client.create_entity(None, ENTITY1)\r\n\r\n# Do something with the returned entity...\r\n\r\n# Get a list of entities\r\npage = self.client.get_entities(\r\n    None,\r\n    FilterParams.from_tuples(\r\n        \"name\", \"TestEntity\",\r\n    ),\r\n    PagingParams(0, 10)\r\n)\r\n\r\n# Do something with the returned page...\r\n# E.g. entity = page['data'][0]\r\n```\r\n\r\n## Develop\r\n\r\nFor development you shall install the following prerequisites:\r\n* Python 3.6+\r\n* Visual Studio Code or another IDE of your choice\r\n* Docker\r\n\r\nInstall dependencies:\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\nBefore running tests launch infrastructure services and required microservices:\r\n```bash\r\ndocker-compose -f ./docker-compose.dev.yml up\r\n```\r\n\r\nRun automated tests:\r\n```bash\r\npytest\r\n```\r\n\r\nGenerate GRPC protobuf stubs:\r\n```bash\r\n./protogen.ps1\r\n```\r\n\r\nGenerate API documentation:\r\n```bash\r\n./docgen.ps1\r\n```\r\n\r\nBefore committing changes run dockerized build and test as:\r\n```bash\r\n./build.ps1\r\n./test.ps1\r\n./package.ps1\r\n./run.ps1\r\n./clear.ps1\r\n```\r\n\r\n## Contacts\r\n\r\nThis microservice was created and currently maintained by *Sergey Seroukhov* and *Danil Prisyzhniy*.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pip-templates-services/pip-client-data-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pip-client-data-python",
    "package_url": "https://pypi.org/project/pip-client-data-python/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pip-client-data-python/",
    "project_urls": {
      "Homepage": "https://github.com/pip-templates-services/pip-client-data-python"
    },
    "release_url": "https://pypi.org/project/pip-client-data-python/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Communication components for Pip.Services in Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14837727,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28e2ea2ebda7d7de73f482a8fff4e211524354323e3b76d9d5aeb9c93d041897",
          "md5": "488e1101146433570251c1a1d3a0147c",
          "sha256": "159a3a05953e2684cb7adaeb96fa32753aaa6137a2a2f7712e588a1ca6f61bc7"
        },
        "downloads": -1,
        "filename": "pip_client_data_python-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "488e1101146433570251c1a1d3a0147c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16159,
        "upload_time": "2021-09-06T17:07:16",
        "upload_time_iso_8601": "2021-09-06T17:07:16.304478Z",
        "url": "https://files.pythonhosted.org/packages/28/e2/ea2ebda7d7de73f482a8fff4e211524354323e3b76d9d5aeb9c93d041897/pip_client_data_python-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28e2ea2ebda7d7de73f482a8fff4e211524354323e3b76d9d5aeb9c93d041897",
        "md5": "488e1101146433570251c1a1d3a0147c",
        "sha256": "159a3a05953e2684cb7adaeb96fa32753aaa6137a2a2f7712e588a1ca6f61bc7"
      },
      "downloads": -1,
      "filename": "pip_client_data_python-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "488e1101146433570251c1a1d3a0147c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16159,
      "upload_time": "2021-09-06T17:07:16",
      "upload_time_iso_8601": "2021-09-06T17:07:16.304478Z",
      "url": "https://files.pythonhosted.org/packages/28/e2/ea2ebda7d7de73f482a8fff4e211524354323e3b76d9d5aeb9c93d041897/pip_client_data_python-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}