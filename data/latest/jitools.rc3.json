{
  "info": {
    "author": "M.O. Abbott",
    "author_email": "moab_bot@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## jitools - Python Utilities for JI\n\n### Introduction\n\n**jitools** is a Python-based set of utilities for **just intonation (JI)** pitch and pitch collection research and analysis. It may also be incorporated into workflows for computer-assisted algorithmic composition.\n\n**jitools** shares some functionalities with **[Thomas Nicholson](https://thomasnicholson.ca/)**'s JavaScript-based online resource, the **[Plainsound Harmonic Space Calculator](https://www.plainsound.org/HEJI/)**.\n\n**jitools** works on Python 3.9.4+.\n\n### Just Intonation\n\nJI is a musical model wherein the intervals between pitches are, as best as possible, tuned as small natural number frequency ratios. Aside from this basic tenet, there are no restrictions on the aesthetic or style of JI music. That said, music in JI often has certain tendencies that highlight or enable its very precise tuning.\n\nJI has its own particular set of analytical concerns for composers, music theorists, and musicians. Many of these issues are well-described in the 2018 paper **[\"Fundamental Principles of Just Intonation and Microtonal Composition\"](https://marsbat.space/pdfs/JI.pdf)** by Thomas Nicholson and **[Marc Sabat](https://www.marsbat.space/)**. This paper is essential reading for anyone interested in JI and for anyone who wants to use or understand **jitools**.\n\n### jitools - Installation\n\n~$ pip3 install jitools\n\n### jitools.Pitch()\n\nIn JI pitches are conceptualized as **frequency ratios**, which are often expressed as fractions with respect to some known reference pitch. The reference pitch is, by convention, labeled as **1/1**. Any pitch can function as 1/1, its frequency just needs to be known. \n\nAll other pitches are then labeled according to their frequency ratio relationship to 1/1. For example, if 1/1 = A4 = 440Hz, then the frequency of 3/2 would be 440 * 3/2 = 660Hz. But, if 1/1 = G4 = 392Hz, then the frequency of 3/2 would be 392 * 3/2 = 588Hz.\n\nThe most essential class in jitools is **jitools.Pitch()**, which holds information about any single pitch. The principal argument of the class is ```p```, a tuple consisting of two positive integers that represent the numerator and denominator of the pitch's ratio. Since the ratio only has meaning with respect to a known reference pitch, when creating an instance of  **jitools.Pitch()** the user may optionally define the letter-name pitch ```rp``` and frequency ```rf``` of 1/1. The default values are ```\"A4\"``` and ```440``` (Hz).\n\nAfter defining an instance of **jitools.Pitch()** in terms of its ratio, the class automatically calculates many attributes relevant for JI analysis. These values can later be referenced by the user. Here are a few examples of such attributes:\n\n```\n>>> import jitools\n>>> test_pitch = jitools.Pitch(p=(3, 2))\n>>> test_pitch.freq\n660.0\n>>> test_pitch.keynum\n76.01955000865388\n>>> test_pitch.distance_in_cents_from_reference\n701.955000865388\n```\nHere is the same information about 3/2, but with 1/1 defined as G4 = 392Hz:\n\n```\n>>> test_pitch = jitools.Pitch(p=(3, 2), rp=\"G4\", rf=392)\n>>> test_pitch.freq\n588.0\n>>> test_pitch.keynum\n74.01955000865388\n>>> test_pitch.distance_in_cents_from_reference\n701.955000865388\n```\nJI pitches usually deviate from a nearby 12-tone equal temperament (12-ED2) pitch by some number of **cents** (1 cent = 1/100 of a 12-ED2 semitone or 1/1200 of an octave), a measure developed by Alexander J. Ellis. Knowing a JI pitch's \"cent deviation\" is useful for comparing it to its closest 12-ED2 counterpart:\n\n```\n>>> test_pitch = jitools.Pitch(p=(4, 7))\n>>> test_pitch.letter_name_and_octave_and_cents\n'B3 +31.17409'\n```\n### jitools.Pitch() - Notation\nThere are various methods for JI pitch notation, including **[Ben Johnston's well-known system](https://www.kylegann.com/BJNotation.html)** and **[Sagittal](http://sagittal.org/)** notation, among others. Perhaps the foremost JI pitch notation system in wide use today is the **[Extended Helmholtz-Ellis JI Pitch Notation (HEJI)](https://marsbat.space/pdfs/HEJI2legend+series.pdf)**, originally developed by Marc Sabat and **[Wolfgang von Schweinitz](https://plainsound.org/artist/wolfgang_von_schweinitz.html)** in the early 2000s, and revised in 2020 by Sabat and Thomas Nicholson in collaboration with Schweinitz, **[Catherine Lamb](http://www.sacredrealism.org/catlamb/index.html)**, and myself. The revised version is known as **HEJI2**.\n\nIn HEJI/HEJI2, each prime factor of a frequency ratio is denoted with a distinctive accidental glyph. These accidentals appear, alone or in various combinations, in front of letter-name notes on a conventional 5-line musical staff. Musicians familiar with the notation can then interpret the ratios and produce the desired sounds.\n\nThe HEJI2 font is available as a cross-platform free download **[here](https://marsbat.space/2021_HEJI2_web_release.zip)**. Once installed the HEJI2 fonts may be used with any modern music notation program. The glyphs are mapped to ordinary keyboard characters and may be typed. Accidentals and combinations of accidentals may be stored as text strings.\n\n**jitools.Pitch()** handles the creation of these HEJI2 text strings based on the provided ratio and reference pitch information, and also assigns the correct letter-name pitch. This hastens the translation from ratio-based thinking to HEJI2 notation. One may copy-and-paste the strings while using the HEJI2 font in a notation program, for example. The ```.notation``` attribute stores a duple consisting of the HEJI2 text string and letter-name pitch:\n\n```\n>>> test_pitch = jitools.Pitch(p=(25, 13))\n>>> test_pitch.notation\n('9t', 'G')\n```\n### jitools.Pitch() - Print and Write to File\nSince attributes of **jitools.Pitch()** can be opaque and difficult to get at, detailed reports about a pitch's attributes can be printed to the console in an easy-to-read format, with a simple method:\n\n```\n>>> test_pitch = jitools.Pitch(p=(17, 11))\n>>> test_pitch.print_info()\n\nBASIC INFO\nratio: 17/11\nmonzo: [0, 0, 0, 0, -1, 0, 1]\nconstituent primes: [11, 17]\nfrequency (Hz): 680.0\nMIDI key number: 76.53637\ndistance from 1/1 (cents): 753.63747\nharmonic distance: 7.54689\nHelmholtz-Ellis notation (text string, letter name): (':5v', 'E')\n12-ED2 pitch and cent deviation: F5 -46.36253\n\n```\nSuch reports can also be written to ```txt``` files. By default files are written to the user's current working directory, although the ```output_directory``` and ```filename``` can also be customized by the user:\n\n```\n>>> test_pitch = jitools.Pitch(p=(17, 11))\n>>> test_pitch.write_info_to_txt()\nfile written to /current/working/directory/pitch_info.txt\n>>> test_pitch.write_info_to_txt(output_directory=\"/path/to/file\", filename=\"myfile.txt\")\nfile written to /path/to/file/myfile.txt\n```\n### jitools.Pitch() - Enharmonic Search\nAnother functionality of **jitools.Pitch()** is **enharmonic search**. Enharmonics in JI are two rational pitches that are extremely close to each other in terms of pitch height -- generally within about 4 cents or less -- so close that the difference between their pitch heights cannot be perceived by ear, or at worst can barely be perceived in a harmonic context (see **[Nicholson/Sabat](https://marsbat.space/pdfs/JI.pdf)**, p. 16-19). \n\nEnharmonic assessment can be useful for a variety of purposes, particularly when one has arrived at an extremely complex ratio that is unfamiliar or cumbersome to notate/interpret. Often, one or more simpler nearby ratios are available as alternatives.\n\nIn **jitools.Pitch()** enharmonic information may be generated and stored internally as a list:\n\n```\n>>> test_pitch = jitools.Pitch((711, 184))\n>>> test_pitch.get_enharmonics()\n[[Fraction(800, 207), 0.27053, 17.337343147274048, Fraction(6399, 6400)], [Fraction(2816, 729), -0.58462, 20.969206622964233, Fraction(518319, 518144)], [Fraction(11875, 3072), 0.64032, 25.12060239371419, Fraction(273024, 273125)], [Fraction(495, 128), 1.36911, 15.95128471496697, Fraction(1264, 1265)]]\n```\n\nAs a list this information is a little opaque, so enharmonics information may also be printed to the console in a easy-to-read format, or written to ```txt``` or ```csv``` files:\n\n```\n>>> test_pitch = jitools.Pitch((711, 184))\n>>> test_pitch.print_enharmonics_info()\n\nORIGINAL PITCH INFO\nratio: 711/184\nmonzo: [-3, 2, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\nconstituent primes: [2, 3, 23, 79]\nfrequency (Hz): 1700.21739\nMIDI key number: 92.40173\ndistance from 1/1 (cents): 2340.17255\nharmonic distance: 16.99727\nHelmholtz-Ellis notation (text string, letter name): ('undefined', 'undefined')\n12-ED2 pitch and cent deviation: G#/Ab6 +40.17255\n\nENHARMONIC SELECTION CRITERIA\ntolerance (cents): 1.95\nprime limit: 23\nmaximum number of HEJI symbols: 2\nmaximum mumber of candidates: 10\nsorted by: tolerance\ntotal number of qualifying candidates: 4\n\nENHARMONIC NO. 1\nratio: 800/207\nmonzo: [5, -2, 2, 0, 0, 0, 0, 0, -1]\nconstituent primes: [2, 3, 5, 23]\nfrequency (Hz): 1700.48309\nMIDI key number: 92.40443\ndistance from 1/1 (cents): 2340.44308\nharmonic distance: 17.33734\nHelmholtz-Ellis notation (text string, letter name): ('6l', 'A')\n12-ED2 pitch and cent deviation: G#/Ab6 +40.44308\nmelodic interval from 711/184: 6399:6400\nenharmonic interval size (cents): +0.27053\n\nENHARMONIC NO. 2\nratio: 2816/729\nmonzo: [8, -6, 0, 0, 1]\nconstituent primes: [2, 3, 11]\nfrequency (Hz): 1699.64335\nMIDI key number: 92.39588\ndistance from 1/1 (cents): 2339.58794\nharmonic distance: 20.96921\nHelmholtz-Ellis notation (text string, letter name): ('4e', 'A')\n12-ED2 pitch and cent deviation: G#/Ab6 +39.58794\nmelodic interval from 711/184: 518319:518144\nenharmonic interval size (cents): -0.58462\n\nENHARMONIC NO. 3\nratio: 11875/3072\nmonzo: [-10, -1, 4, 0, 0, 0, 0, 1]\nconstituent primes: [2, 3, 5, 19]\nfrequency (Hz): 1700.84635\nMIDI key number: 92.40813\ndistance from 1/1 (cents): 2340.81287\nharmonic distance: 25.1206\nHelmholtz-Ellis notation (text string, letter name): ('/R', 'G')\n12-ED2 pitch and cent deviation: G#/Ab6 +40.81287\nmelodic interval from 711/184: 273024:273125\nenharmonic interval size (cents): +0.64032\n\nENHARMONIC NO. 4\nratio: 495/128\nmonzo: [-7, 2, 1, 0, 1]\nconstituent primes: [2, 3, 5, 11]\nfrequency (Hz): 1701.5625\nMIDI key number: 92.41542\ndistance from 1/1 (cents): 2341.54166\nharmonic distance: 15.95128\nHelmholtz-Ellis notation (text string, letter name): ('4u', 'G')\n12-ED2 pitch and cent deviation: G#/Ab6 +41.54166\nmelodic interval from 711/184: 1264:1265\nenharmonic interval size (cents): +1.36911\n\n>>> test_pitch.write_enharmonics_info_to_txt()\nfile written to /current/working/directory/enharmonic_candidates.txt\n>>> test_pitch.write_enharmonics_info_to_csv()\nfile written to /current/working/directory/enharmonic_candidates.csv\n```\nVarious constraints on an enharmonic search may be customized by the user, including:\n\n*  ```tolerance```: how close the enharmonic must be to the original pitch, in cents (default = 1.95)\n*  ```limit```: maximum prime factor allowed (default = 23)  \n*  ```exclude_primes```: prime factors to be excluded, as a list (default = [])\n*  ```max_symbols```: maximum number of HEJI2 symbols (default = 2)\n\nThe ```sort_by``` method of an enharmonic search can also be changed. The default is to sort by ```\"tolerance\"```, which orders the enharmonics by how closely they match the pitch height of the original pitch (enharmonic melodic interval size). But, the results may also be sorted by ```\"harmonic distance\"```, a measure developed by James Tenney which generally correlates to interval/ratio simplicity. (See **[Nicholson/Sabat](https://marsbat.space/pdfs/JI.pdf)**, p. 26-28, for more information about harmonic distance and other metrics invented by Tenney.)\n\nIn the example below, the same original pitch is used as in the example above, but the tolerance and allowed prime factors are more restricted. This disqualifies all of the enharmonics returned in the previous example. Even so, increasing the maximum allowed number of HEJI2 symbols yields two new 3-symbol enharmonics. The enharmonics are sorted by harmonic distance, which in this case does not correlate to tolerance:\n\n```\n>>> test_pitch = jitools.Pitch((711, 184))\n>>> test_pitch.print_enharmonics_info(tolerance=0.5, limit=17, exclude_primes=[7, 23], max_symbols=3, sort_by=\"harmonic distance\")\n\nORIGINAL PITCH INFO\nratio: 711/184\nmonzo: [-3, 2, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\nconstituent primes: [2, 3, 23, 79]\nfrequency (Hz): 1700.21739\nMIDI key number: 92.40173\ndistance from 1/1 (cents): 2340.17255\nharmonic distance: 16.99727\nHelmholtz-Ellis notation (text string, letter name): ('undefined', 'undefined')\n12-ED2 pitch and cent deviation: G#/Ab6 +40.17255\n\nENHARMONIC SELECTION CRITERIA\ntolerance (cents): 0.5\nprime limit: 17\nexcluded primes: [7, 23]\nmaximum number of HEJI symbols: 3\nmaximum mumber of candidates: 10\nsorted by: harmonic distance\ntotal number of qualifying candidates: 2\n\nENHARMONIC NO. 1\nratio: 85/22\nmonzo: [-1, 0, 1, 0, -1, 0, 1]\nconstituent primes: [2, 5, 11, 17]\nfrequency (Hz): 1700.0\nMIDI key number: 92.39951\ndistance from 1/1 (cents): 2339.95118\nharmonic distance: 10.86882\nHelmholtz-Ellis notation (text string, letter name): (':5U', 'G')\n12-ED2 pitch and cent deviation: G#/Ab6 +39.95118\nmelodic interval from 711/184: 7821:7820\nenharmonic interval size (cents): -0.22137\n\nENHARMONIC NO. 2\nratio: 8450/2187\nmonzo: [1, -7, 2, 0, 0, 2]\nconstituent primes: [2, 3, 5, 13]\nfrequency (Hz): 1700.04572\nMIDI key number: 92.39998\ndistance from 1/1 (cents): 2339.99775\nharmonic distance: 24.13947\nHelmholtz-Ellis notation (text string, letter name): ('00t', 'A')\n12-ED2 pitch and cent deviation: G#/Ab6 +39.99775\nmelodic interval from 711/184: 1554957:1554800\nenharmonic interval size (cents): -0.17481\n\n```\n### jitools.PitchCollection()\nThe second essential class in jitools is **jitools.PitchCollection()**. This class allows for collections of **jitools.Pitch()** instances -- which can be regarded as chords, scales, aggregates, or gamuts -- to be collectively analyzed as a group.\n\n**jitools.PitchCollection()** takes ```pc``` as its principal argument, a list of two-element duples. Each duple represents the ratio of a single pitch in the collection. As with **jitools.Pitch()**, a letter-name reference pitch ```rp``` and reference frequency ```rf``` may be optionally defined, otherwise the default values of ```\"A4\"``` and ```440``` (Hz) are used.\n\nAs with **jitools.Pitch()**, a **jitools.PitchCollection()** instance stores several important attributes about the pitch collection that may be directly referred to by the user:\n\n```\n>>> test_chord = jitools.PitchCollection([(1, 1), (5, 4), (3, 2)])\n>>> test_chord.ratios\n[Fraction(1, 1), Fraction(5, 4), Fraction(3, 2)]\n>>> test_chord.freqs\n[440.0, 550.0, 660.0]\n>>> test_chord.keynums\n[69.0, 72.86313713864834, 76.01955000865388]\n>>> test_chord.intervals\n[Fraction(6, 5), Fraction(5, 4), Fraction(3, 2)]\n```\nOne may also print information about a pitch collection to the console in an easy-to-read format:\n\n```\n>>> test_chord = jitools.PitchCollection([(7, 8), (9, 7), (13, 8), (11, 6)])\n>>> test_chord.print_info()\n\nBASIC INFO\nratios: ['7/8', '9/7', '13/8', '11/6']\nfrequencies (Hz): ['385.0', '565.71429', '715.0', '806.66667']\nMIDI key numbers: ['66.68826', '73.35084', '77.40528', '79.49363']\nHelmholtz-Ellis notations (text string, letter name): [('<', 'G'), ('>v', 'C'), ('0v', 'F'), ('4', 'G')]\n12-ED2 pitch and cent deviations: ['G4 -31.17409', 'C#/Db5 +35.0841', 'F5 +40.52766', 'G5 +49.36294']\nharmonic constellation: 147:216:273:308\nsequential intervals: ['72/49', '91/72', '44/39']\nnormalized ratios: ['9/7', '13/8', '7/4', '11/6']\ninversion: ['7/8', '77/78', '539/432', '11/6']\n\n```\nThe above is the ```\"basic\"``` information about a pitch collection, which is the default information type returned when printing (or writing to ```txt```, see below). Various other kinds of information can also be printed or written to ```txt```:\n\n```\n>>> test_chord = jitools.PitchCollection([(7, 8), (9, 7), (13, 8), (11, 6)])\n>>> test_chord.print_info(\"quantitative\")\n\nQUANTITATIVE INFO\naverage ratio: 59/42\nminimum ratio: 7/8\nmaximum ratio: 11/6\nratio span: 44/21\naverage frequency (Hz): 618.09524\nminimum frequency (Hz): 385.0\nmaximum frequency (Hz): 806.66667\nfrequency span (Hz): 421.66667\naverage MIDI key number: 74.88391\nminimum MIDI key number: 66.68826\nmaximum MIDI key number: 79.49363\nMIDI key number span: 12.80537\nspan in cents: 1280.53704\n\n>>> test_chord.print_info(\"analytic\")\n\nANALYTIC INFO\nall intervals: ['44/39', '91/72', '77/54', '72/49', '13/7', '44/21']\ntuneable intervals: ['13/7']\nperiodicity pitch (Hz): 2.61905\nleast common partial (of periodicity pitch): 1513512\nleast common partial frequency (Hz): 3963960.0\nconstituent primes: [2, 3, 7, 11, 13]\nharmonic distance sum: 24.52947\naverage harmonic distance: 6.13237\nharmonic intersection: 4391/252252 (0.01741)\nharmonic disjunction: 247861/252252 (0.98259)\n\n>>> test_chord.print_info(\"normalized\")\n\nNORMALIZED INFO\nratios: ['9/7', '13/8', '7/4', '11/6']\nfrequencies (Hz): ['565.71429', '715.0', '770.0', '806.66667']\nMIDI key numbers: ['73.35084', '77.40528', '78.68826', '79.49363']\nHelmholtz-Ellis notations (text string, letter name): [('>v', 'C'), ('0v', 'F'), ('<', 'G'), ('4', 'G')]\n12-ED2 pitch and cent deviations: ['C#/Db5 +35.0841', 'F5 +40.52766', 'G5 -31.17409', 'G5 +49.36294']\nharmonic constellation: 216:273:294:308\nsequential intervals: ['91/72', '14/13', '22/21']\ninversion: ['9/7', '66/49', '132/91', '11/6']\n\n>>> test_chord.print_info(\"inversion\")\n\nINVERSION INFO\nratios: ['7/8', '77/78', '539/432', '11/6']\nfrequencies (Hz): ['385.0', '434.35897', '548.98148', '806.66667']\nMIDI key numbers: ['66.68826', '68.77661', '72.83105', '79.49363']\nHelmholtz-Ellis notations (text string, letter name): [('<', 'G'), ('94<e', 'A'), ('4,e', 'D'), ('4', 'G')]\n12-ED2 pitch and cent deviations: ['G4 -31.17409', 'A4 -22.33881', 'C#/Db5 -16.89525', 'G5 +49.36294']\nharmonic constellation: 4914:5544:7007:10296\nsequential intervals: ['44/39', '91/72', '72/49']\nnormalized ratios: ['539/432', '7/4', '11/6', '77/39']\n\n>>> test_chord.print_info(\"resultants\")\n\nFIRST-ORDER DIFFERENCE TONES\nratios: ['5/24', '19/56', '23/56', '23/42', '3/4', '23/24']\ntuneable ratios: ['5/24', '3/4']\nfrequencies (Hz): ['91.66667', '149.28571', '180.71429', '240.95238', '330.0', '421.66667']\nMIDI key numbers: ['41.84359', '50.28687', '53.59448', '58.57493', '64.01955', '68.26319']\nHelmholtz-Ellis notations (text string, letter name): [('u', 'F'), ('/>', 'D'), ('3>v', 'E'), ('3>v', 'A'), ('n', 'E'), ('3v', 'G')]\n12-ED2 pitch and cent deviations: ['F#/Gb2 -15.64129', 'D3 +28.68711', 'F#/Gb3 -40.55156', 'B3 -42.50656', 'E4 +1.955', 'G#/Ab4 +26.31935']\n\nFIRST-ORDER SUMMATION TONES\nratios: ['121/56', '5/2', '65/24', '163/56', '131/42', '83/24']\ntuneable ratios: ['5/2', '65/24']\nfrequencies (Hz): ['950.71429', '1100.0', '1191.66667', '1280.71429', '1372.38095', '1521.66667']\nMIDI key numbers: ['82.3381', '84.86314', '86.24886', '87.49648', '88.69327', '90.48092']\nHelmholtz-Ellis notations (text string, letter name): [('44>', 'A'), ('u', 'C'), ('0u', 'D'), ('undefined', 'undefined'), ('undefined', 'undefined'), ('undefined', 'undefined')]\n12-ED2 pitch and cent deviations: ['A#/Bb5 +33.80998', 'C#/Db6 -13.68629', 'D6 +24.88637', 'D#/Eb6 +49.64788', 'F6 -30.67331', 'F#/Gb6 +48.09232']\n\n>>> test_chord.print_info(\"reference\")\n\nREFERENCE INFO\nreference pitch (1/1): A4\nreference key number: 69\nreference frequency: 440.0 Hz\n\n```\n\n**jitools.PitchCollection()** information, as with **jitools.Pitch()** information, may be written to file, in this case as ```txt``` or ```csv```:\n\n```\n>>> test_chord = jitools.PitchCollection([(9, 4), (15, 48), (21, 17)])\n>>> test_chord.write_info_to_txt()\nfile written to /current/working/directory/pitch_collection_info.txt\n>>> test_chord.write_info_to_csv()\nfile written to /current/working/directory/pitch_collection_info.csv\n```\n### State of the Project\nI view this project as being in its infancy, and I intend continually refine the code and add more features/tools as time allows. I am aware of the need for:\n\n*  comprehensive documentation\n*  tutorials and additional examples (with notation)\n*  improving performance of **jitools.PitchCollection()** for larger pitch sets (> c. 12 pitches)\n*  exception/error handling\n\nFeel free to contact me if you have any feedback, suggestions, or requests.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/moab-bot/jitools/archive/v_03.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moab-bot/jitools",
    "keywords": "",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jitools",
    "package_url": "https://pypi.org/project/jitools/",
    "platform": "",
    "project_url": "https://pypi.org/project/jitools/",
    "project_urls": {
      "Download": "https://github.com/moab-bot/jitools/archive/v_03.tar.gz",
      "Homepage": "https://github.com/moab-bot/jitools"
    },
    "release_url": "https://pypi.org/project/jitools/0.3/",
    "requires_dist": null,
    "requires_python": ">=3.9.4",
    "summary": "a Python-based set of utilities for just intonation (JI) pitch and pitch collection research and analysis",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10013626,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3c36ea15132a507e61322ce852781ca2fb5a903ae2dd7375f052d952ea61484",
          "md5": "b14452c0d7cfdc9980040385341af68a",
          "sha256": "8df4470749869b25fdecf7d3238b9545845e2e02ccce3b19771fd94f55f1579d"
        },
        "downloads": -1,
        "filename": "jitools-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b14452c0d7cfdc9980040385341af68a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 20060,
        "upload_time": "2020-09-03T22:47:07",
        "upload_time_iso_8601": "2020-09-03T22:47:07.696170Z",
        "url": "https://files.pythonhosted.org/packages/d3/c3/6ea15132a507e61322ce852781ca2fb5a903ae2dd7375f052d952ea61484/jitools-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29de7d721ffaa01d03f05f8a439a271ec55c18d52438c9adf1229a22ae5bb0e5",
          "md5": "ee1f057aa914a727b1220fe6673f132c",
          "sha256": "faf58ccf0d5c012ccee66db56d0a2282627a61c7678ae67e3ed59098fc853958"
        },
        "downloads": -1,
        "filename": "jitools-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee1f057aa914a727b1220fe6673f132c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 33758,
        "upload_time": "2020-09-06T22:12:31",
        "upload_time_iso_8601": "2020-09-06T22:12:31.038691Z",
        "url": "https://files.pythonhosted.org/packages/29/de/7d721ffaa01d03f05f8a439a271ec55c18d52438c9adf1229a22ae5bb0e5/jitools-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af197e0aacaee54d1d8c79a83166b1fc92a2f2494d01bcab0b8f18ca671be588",
          "md5": "0869581761e8f216cc6563ac3b4c9c5e",
          "sha256": "048d9ad0624851f308a06d80b1ab5360ae6701296afa7d653541a43186e5e5fb"
        },
        "downloads": -1,
        "filename": "jitools-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0869581761e8f216cc6563ac3b4c9c5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 27717,
        "upload_time": "2020-09-06T22:12:32",
        "upload_time_iso_8601": "2020-09-06T22:12:32.266354Z",
        "url": "https://files.pythonhosted.org/packages/af/19/7e0aacaee54d1d8c79a83166b1fc92a2f2494d01bcab0b8f18ca671be588/jitools-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d63439a36a100ad00f88a1fdba2f1e8788685c7a2085db029f8d3bed891a93",
          "md5": "0d3c18ff479f6ec1ea747d86390c1e3b",
          "sha256": "29416ae81095250fb1d0c86c639907f3431ae505628dec568759cdd612d2d6b7"
        },
        "downloads": -1,
        "filename": "jitools-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d3c18ff479f6ec1ea747d86390c1e3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.4",
        "size": 3670043,
        "upload_time": "2021-04-08T22:43:06",
        "upload_time_iso_8601": "2021-04-08T22:43:06.763005Z",
        "url": "https://files.pythonhosted.org/packages/e2/d6/3439a36a100ad00f88a1fdba2f1e8788685c7a2085db029f8d3bed891a93/jitools-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e70b54ac6d5ca2f8d96ba68786b2eec846fb84f64b2470d2ae32ae2824a0c92b",
          "md5": "e89af47c5572200c95e2e506c7177011",
          "sha256": "17e20bd1af918294f343f9883c7ccc38f200f880cfd9d6645e6b9a541dab57dd"
        },
        "downloads": -1,
        "filename": "jitools-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e89af47c5572200c95e2e506c7177011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.4",
        "size": 3536858,
        "upload_time": "2021-04-08T22:43:17",
        "upload_time_iso_8601": "2021-04-08T22:43:17.192566Z",
        "url": "https://files.pythonhosted.org/packages/e7/0b/54ac6d5ca2f8d96ba68786b2eec846fb84f64b2470d2ae32ae2824a0c92b/jitools-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2d63439a36a100ad00f88a1fdba2f1e8788685c7a2085db029f8d3bed891a93",
        "md5": "0d3c18ff479f6ec1ea747d86390c1e3b",
        "sha256": "29416ae81095250fb1d0c86c639907f3431ae505628dec568759cdd612d2d6b7"
      },
      "downloads": -1,
      "filename": "jitools-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0d3c18ff479f6ec1ea747d86390c1e3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.4",
      "size": 3670043,
      "upload_time": "2021-04-08T22:43:06",
      "upload_time_iso_8601": "2021-04-08T22:43:06.763005Z",
      "url": "https://files.pythonhosted.org/packages/e2/d6/3439a36a100ad00f88a1fdba2f1e8788685c7a2085db029f8d3bed891a93/jitools-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e70b54ac6d5ca2f8d96ba68786b2eec846fb84f64b2470d2ae32ae2824a0c92b",
        "md5": "e89af47c5572200c95e2e506c7177011",
        "sha256": "17e20bd1af918294f343f9883c7ccc38f200f880cfd9d6645e6b9a541dab57dd"
      },
      "downloads": -1,
      "filename": "jitools-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e89af47c5572200c95e2e506c7177011",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.4",
      "size": 3536858,
      "upload_time": "2021-04-08T22:43:17",
      "upload_time_iso_8601": "2021-04-08T22:43:17.192566Z",
      "url": "https://files.pythonhosted.org/packages/e7/0b/54ac6d5ca2f8d96ba68786b2eec846fb84f64b2470d2ae32ae2824a0c92b/jitools-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}