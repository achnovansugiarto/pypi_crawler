{
  "info": {
    "author": "Mihhail Mati≈°inets",
    "author_email": "mihhail.matisinets@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# avaandmed-py\n[![build](https://github.com/Michanix/avaandmed-py/actions/workflows/avaandmed.yml/badge.svg?branch=main)](https://github.com/Michanix/avaandmed-py/actions/workflows/avaandmed.yml)\n[![codecov](https://codecov.io/gh/Michanix/avaandmed-py/branch/main/graph/badge.svg?token=DS5MNSZOII)](https://codecov.io/gh/Michanix/avaandmed-py)\n\n## Documentation\n- Official [Avaandmed API Swagger](https://avaandmed.eesti.ee/api/dataset-docs/#/)\n- Official general [documentation](https://avaandmed.eesti.ee/instructions/api-uldjuhend) about API. Available only in Estonian.\n\n## Requirements\n- Python 3.6+\n\n## Installation\n## TODO\n\n## Usage\nFirstly you going to need to import `avaandmed` package and create client instance. \nThrough that you can access necessary information for you Avaandmed account. You can create multiple instances for different accounts as well.\n\nLibrary trying to copy workflow of API as much as possible.\n\n```python\nkey_id = 'key_id_value'\ntoken = 'token_value'\nclient = Avaandmed(api_token=token, key_id=key_id)\n```\n\n### Generic datasets\nGetting some [Generic datasets](https://avaandmed.eesti.ee/api/dataset-docs/#/Generic%20dataset) is quite straightforward. Just use `datasets` property provided by `client` instance.\n\n```python\ndatasets: Datasets = client.datasets\nspecific_ds: Dataset = datasets.get_by_id(some_ds_id)\n```\n\nGetting list of publicly available datasets. By default it will return first 20 datasets, but this can be adjusted by providing `limit` value.\n\n```python\nall_datasets: List[Dataset] = client.datasets.get_dataset_list() # retrieve first 20 datasets in the list\nget_5_datasets: List[Dataset] = client.datasets.get_dataset_list(limit=5) # retrieves 5 datasets in the list\n```\n\nYou can apply for access permissions for specific dataset as well. Or submit privacy violations for specific dataset.\n\n```python\nclient.datasets.apply_for_access('dataset_id', 'description')\nclient.dataset.file_privacy_violations('dataset_id', 'description')\n```\n\n\n### User's datasets\n[User](https://avaandmed.eesti.ee/api/dataset-docs/#/User's%20datasets)'s own datasets can be accessed and interacted in the following way.\n\n```python\nme: Me = client.users.me\n# List all user's dataset\nmy_dataset: UserDataset = me.dataset\n\n# Retrieves specific dataset\nspecific_ds: Dataset = me.get_by_id('dataset_id') \n# Delete specific dataset\nmy_dataset.delete('dataset_id')\n# Update dataset\n# To update dataset you need to provide a dictionary with fields you wish to update.\n# Fields should be camelCased as per official Swagger document.\nupdateParams = {\n    \"maintainerPhone\": \"37255511122\",\n    \"maintenerEmail\": \"maintainer@mail.com\"\n}\nmy_dataset.update(updateParams)\n\n# Create dataset metadata\n# To create dataset's metadata you can use DatasetMetadata model.\n# For user's convinience parameters can be provided in camelCase manner to match \n# naming convention of the JSON that is used by Open Data.\n# There are fields that are required to be filled and some don't. Optional fields can be left \n# out.\nmetadata: DatasetMetadata = DatasetMetadata(nameEn=\"new dataset\", nameEt=\"new dataset\"...)\nmy_dataset.create_dataset_metadata(metadata)\n# You can consider specific privacy violations for your dataset\nmy_dataset.consider_privacy_violation('id')\n\n# Or you can discard it\nmy_dataset.discard_privacy_violation('id')\n\n# Approve access permission by its ID\nmy_dataset.approve_access_permission('permission_id')\n\n# Decline access permission by its ID\nmy_dataset.decline_access_permission('permission_id')\n```\n\n### Organization's API\n[Organization](https://avaandmed.eesti.ee/api/dataset-docs/#/Organization's%20datasets)'s datasets can be accessed and interacted in the similar way as User's.\n\n```python\nmy_org = client.organization('org_id').my_organization\nmy_org_ds = my_org.dataset\n\n# List all organizations \nall_orgs = my_org.get_list_my_orgs()\n\n# Retrieve specifc organization\nspecifc_org = my_org.get_my_org_by_id('org_id')\n\n# Retrieves specific dataset\nspecific_ds: Dataset = my_org_ds.get_by_id('dataset_id') \n# Delete specific dataset\nmy_org_ds.delete('dataset_id')\n# Update dataset\n# To update dataset you need to provide a dictionary with fields you wish to update.\n# Fields should be camelCased as per official Swagger document.\nupdateParams = {\n    \"maintainerPhone\": \"37255511122\",\n    \"maintenerEmail\": \"maintainer@mail.com\"\n}\nmy_org_ds.update(updateParams)\n\n# Create dataset metadata\n# To create dataset's metadata you can use DatasetMetadata model.\n# For user's convinience parameters can be provided in camelCase manner to match \n# naming convention of the JSON that is used by Open Data.\n# There are fields that are required to be filled and some don't. Optional fields can be left \n# out.\nmetadata: DatasetMetadata = DatasetMetadata(nameEn=\"new dataset\", nameEt=\"new dataset\"...)\nmy_org_ds.create_dataset_metadata(metadata)\n# You can consider specific privacy violations for your dataset\nmy_org_ds.consider_privacy_violation('id')\n\n# Or you can discard it\nmy_org_ds.discard_privacy_violation('id')\n\n# Approve access permission by its ID\nmy_org_ds.approve_access_permission('permission_id')\n\n# Decline access permission by its ID\nmy_org_ds.decline_access_permission('permission_id')\n```\n\n### Core's API\nInformation from [Core](https://avaandmed.eesti.ee/api/dataset-docs/#/Core) endpoints also can be retrieved.\n\n```python\nkey_id = 'key_id_value'\ntoken = 'token_value'\nclient = Avaandmed(api_token=token, key_id=key_id)\n\nregions: List[Region] = client.get_regions() # return list of available regions\ncategories: List[Category] = client.get_categories() # returns list of available categories\n\n# Since there are a lot of available keywords you can query keywords by providing\n# some specific word and also extend/limit returned list of keywords.\n# By default this methods returns just first 20 keywords.\nkeywords: List[KeywordInfo] = client.get_keywords(search_word='some_word', limit=5)\n```\n\n### Note on DatasetMetadata class\nThis class has required and optional fields. Due to amount of fields that this class contains it is easier to put documentation of that class in here rather that trying to compress it into docstring. Hence this section.\n\n```python\nclass DatasetMetadata(ApiResource):\n    name_et: str = Field(...)\n    name_en: str = Field(...)\n    description_et: str = Field(...)\n    description_en: str = Field(...)\n    maintainer: str = Field(...)\n    maintainer_email: str = Field(...)\n    maintainer_phone: str = Field(...)\n    keyword_ids: List[int] = Field(...)\n    category_ids: List[int] = Field(...)\n    region_ids: List[int] = Field(...)\n    data_from: datetime = Field(...)\n    available_to: datetime = Field(...)\n    update_interval_unit: UpdateIntervalUnit = Field(...)\n    update_interval_frequency: int = Field(...)\n    # optional fields\n    conformities: Optional[List[Conformity]] = []\n    lineage: Optional[str]\n    spatial_representation_type: Optional[str]\n    spatial_data_service_type: Optional[str]\n    topic_categories: Optional[List[TopicCategory]] = []\n    pixel_size: Optional[int]\n    coordinate_reference_system_ids: Optional[List[int]] = []\n    south_latitude: Optional[str]\n    north_latitude: Optional[str]\n    west_longitude: Optional[str]\n    east_longitude: Optional[str]\n    language: Optional[str]\n    qualified_attribution: Optional[str]\n    was_generated_by: Optional[str]\n    spatial_resolution: Optional[str]\n    temporal_resolution: Optional[str]\n    maturity: Optional[str]\n    parent_dataset_ids: Optional[List[str]]\n    child_dataset_ids: Optional[List[str]]\n    version_notes: Optional[str]\n    data_to: Optional[datetime]\n    landing_page: Optional[str]\n    resource_type: Optional[ResourceType]\n```\n\n### File uploading\nUsers and Organizations can upload files for specific datasets.\n\nHowever there is something that needs to kept in mind before uploading files for freshly created datasets. \n\nWhen uploading files for new datasets, make sure that dataset already has been *granted access* and *license*. Otherwise, unexpected my occur when trying to access dataset if file was uploaded beforehand.\n\nFile uploading process is same for both User's and Organization's datasets.\n\n```python\nfile_name: str = 'file.csv' # This is how your file will be called in Open Data.\nfile_type: str = 'text/csv'\nfile_path: str = 'path_to_file'\ndataset_id: str = 'dataset_id'\n\n# This will return object of type File\nfile: File = my_datasets.upload_file(dataset_id, file_name, file_type, file_path)\n\n# And you can obviously access different attributes of the file provided by Open Data\nprint(file.id)\nprint(file.name)\nprint(file.size)\n```\n\n## Development\nIt's recommend to use virtual enviroment during the development.\n\nMore information on virtual enviroments can be found [here](https://docs.python.org/3/library/venv.html).\n\n```\ngit clone https://github.com/Michanix/avaandmed-py.git\ncd avaandmed-py\npip install -r requirements.txt\n```\n\n### Run tests\n[Pytest](https://docs.pytest.org/en/6.2.x/) is used for testing.\n\n[Reponses](https://github.com/getsentry/responses) library is used for mocking responses from Avaadmed API. \n\n[tox](https://tox.wiki/en/latest/index.html) is used to run tests with different Python versions.\n\nAll data for testing is available in **tests/data** folder.\n\n```\ncd tests\npytest # to run all tests\npytest path/to/test_file.py # to run specific set of tests\n```\n\nOr if you want to use `tox` just run in the root of the folder and it should run tests for all Python versions specified in `tox.ini` file.\nHowever, you probably gonna need to have multiple Python versions on your machine to test with each version. \nOtherwise it will only for tests for version that is currently installed.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Michanix/avaandmed-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avaandmed",
    "package_url": "https://pypi.org/project/avaandmed/",
    "platform": null,
    "project_url": "https://pypi.org/project/avaandmed/",
    "project_urls": {
      "Homepage": "https://github.com/Michanix/avaandmed-py"
    },
    "release_url": "https://pypi.org/project/avaandmed/0.5.0/",
    "requires_dist": [
      "requests (>=2.25)",
      "pydantic (>=1.8)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Python library for Avaandmed(Open Data) portal API",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13498721,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2da4dcdd722841d979497854d38d0305018cf9ed8e24de4c9e9b6dbd20bdb8fc",
          "md5": "6ce9de4e733607cb6b1cb50dc2e4b6b9",
          "sha256": "001e85dbce0b6c87c98b37ec1ebbd15affcefa4f1fec980a632767415bd5f731"
        },
        "downloads": -1,
        "filename": "avaandmed-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ce9de4e733607cb6b1cb50dc2e4b6b9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6, <4",
        "size": 22245,
        "upload_time": "2022-04-13T06:26:05",
        "upload_time_iso_8601": "2022-04-13T06:26:05.539121Z",
        "url": "https://files.pythonhosted.org/packages/2d/a4/dcdd722841d979497854d38d0305018cf9ed8e24de4c9e9b6dbd20bdb8fc/avaandmed-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d39df9122df16f8702ce8c6052631a3f15198c5d7335343d64d9156d71718cad",
          "md5": "0dfa076923e5c93bf35d26bb04fdfb4e",
          "sha256": "f4716ee9f52ef684391b57e26568d25e9b1702a0a8496b0c8b01762c2be90425"
        },
        "downloads": -1,
        "filename": "avaandmed-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0dfa076923e5c93bf35d26bb04fdfb4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 18409,
        "upload_time": "2022-04-13T06:26:08",
        "upload_time_iso_8601": "2022-04-13T06:26:08.060140Z",
        "url": "https://files.pythonhosted.org/packages/d3/9d/f9122df16f8702ce8c6052631a3f15198c5d7335343d64d9156d71718cad/avaandmed-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2da4dcdd722841d979497854d38d0305018cf9ed8e24de4c9e9b6dbd20bdb8fc",
        "md5": "6ce9de4e733607cb6b1cb50dc2e4b6b9",
        "sha256": "001e85dbce0b6c87c98b37ec1ebbd15affcefa4f1fec980a632767415bd5f731"
      },
      "downloads": -1,
      "filename": "avaandmed-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ce9de4e733607cb6b1cb50dc2e4b6b9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6, <4",
      "size": 22245,
      "upload_time": "2022-04-13T06:26:05",
      "upload_time_iso_8601": "2022-04-13T06:26:05.539121Z",
      "url": "https://files.pythonhosted.org/packages/2d/a4/dcdd722841d979497854d38d0305018cf9ed8e24de4c9e9b6dbd20bdb8fc/avaandmed-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d39df9122df16f8702ce8c6052631a3f15198c5d7335343d64d9156d71718cad",
        "md5": "0dfa076923e5c93bf35d26bb04fdfb4e",
        "sha256": "f4716ee9f52ef684391b57e26568d25e9b1702a0a8496b0c8b01762c2be90425"
      },
      "downloads": -1,
      "filename": "avaandmed-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0dfa076923e5c93bf35d26bb04fdfb4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 18409,
      "upload_time": "2022-04-13T06:26:08",
      "upload_time_iso_8601": "2022-04-13T06:26:08.060140Z",
      "url": "https://files.pythonhosted.org/packages/d3/9d/f9122df16f8702ce8c6052631a3f15198c5d7335343d64d9156d71718cad/avaandmed-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}