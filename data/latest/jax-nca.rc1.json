{
  "info": {
    "author": "Shyam Sudhakaran",
    "author_email": "shyamsnair@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Neural Cellular Automata (Based on https://distill.pub/2020/growing-ca/) implemented in Jax (Flax)\n\n![Gecko gif](https://raw.githubusercontent.com/shyamsn97/jax-nca/main/images/gecko.gif?token=GHSAT0AAAAAABTB4G7FLAJSLDHSIOQONS3IYTB5ZEA)\n\n---\n\n\n## Installation\nfrom source:\n```\ngit clone git@github.com:shyamsn97/jax-nca.git\ncd jax-nca\npython setup.py install\n```\n\nfrom PYPI\n```\npip install jax-nca\n```\n---\n\n## How do NCAs work?\nFor more information, view the awesome article https://distill.pub/2020/growing-ca/ -- Mordvintsev, et al., \"Growing Neural Cellular Automata\", Distill, 2020\n\nImage below describes a single update step: https://github.com/distillpub/post--growing-ca/blob/master/public/figures/model.svg\n\n![NCA update](https://raw.githubusercontent.com/shyamsn97/jax-nca/main/images/model.svg?token=GHSAT0AAAAAABTB4G7FOWOPXEUYVLBGRNSWYTB5YUA)\n\n---\n\n## Why Jax?\n\n<b> Note: This project served as a nice introduction to jax, so its performance can probably be improved </b>\n\nNCAs are autoregressive models like RNNs, where new states are calculated from previous ones. With jax, we can make these operations a lot more performant with `jax.lax.scan`  and `jax.jit` (https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html)\n\nInstead of writing the nca growth process as:\n\n```python\ndef multi_step(params, nca, current_state, num_steps):\n    # params: parameters for NCA\n    # nca: Flax Module describing NCA\n    # current_state: Current NCA state\n    # num_steps: number of steps to run\n\n    for i in range(num_steps):\n        current_state = nca.apply(params, current_state)\n    return current_state\n```\n\nWe can write this with `jax.lax.scan`\n\n```python\ndef multi_step(params, nca, current_state, num_steps):\n    # params: parameters for NCA\n    # nca: Flax Module describing NCA\n    # current_state: Current NCA state\n    # num_steps: number of steps to run\n\n    def forward(carry, inp):\n        carry = nca.apply({\"params\": params}, carry)\n        return carry, carry\n\n    final_state, nca_states = jax.lax.scan(forward, current_state, None, length=num_steps)\n    return final_state\n```\nThe actual multi_step implementation can be found here: https://github.com/shyamsn97/jax-nca/blob/main/jax_nca/nca.py#L103\n\n---\n\n## Usage\nSee [notebooks/Gecko.ipynb](notebooks/Gecko.ipynb) for a full example\n\n<b> Currently there's a bug with the stochastic update, so only `cell_fire_rate = 1.0` works at the moment </b>\n\nCreating and using NCA:\n\n```python\nclass NCA(nn.Module):\n    num_hidden_channels: int\n    num_target_channels: int = 3\n    alpha_living_threshold: float = 0.1\n    cell_fire_rate: float = 1.0\n    trainable_perception: bool = False\n    alpha: float = 1.0\n\n    \"\"\"\n        num_hidden_channels: Number of hidden channels for each cell to use\n        num_target_channels: Number of target channels to be used\n        alpha_living_threshold: threshold to determine whether a cell lives or dies\n        cell_fire_rate: probability that a cell receives an update per step\n        trainable_perception: if true, instead of using sobel filters use a trainable conv net\n        alpha: scalar value to be multiplied to updates\n    \"\"\"\n    ...\n\nfrom jax_nca.nca import NCA\n\n# usage\nnca = NCA(\n    num_hidden_channels = 16, \n    num_target_channels = 3,\n    trainable_perception = False,\n    cell_fire_rate = 1.0,\n    alpha_living_threshold = 0.1\n)\n\nnca_seed = nca.create_seed(\n    nca.num_hidden_channels, nca.num_target_channels, shape=(64,64), batch_size=1\n)\nrng = jax.random.PRNGKey(0)\nparams = = nca.init(rng, nca_seed, rng)[\"params\"]\nupdate = nca.apply({\"params\":params}, nca_seed, jax.random.PRNGKey(10))\n\n# multi step\n\nfinal_state, nca_states = nca.multi_step(poarams, nca_seed, jax.random.PRNGKey(10), num_steps=32)\n```\n\nTo train the NCA:\n```python\nfrom jax_nca.dataset import ImageDataset\nfrom jax_nca.trainer import EmojiTrainer\n\n\ndataset = ImageDataset(emoji='ðŸ¦Ž', img_size=64)\n\n\nnca = NCA(\n    num_hidden_channels = 16, \n    num_target_channels = 3,\n    trainable_perception = False,\n    cell_fire_rate = 1.0,\n    alpha_living_threshold = 0.1\n)\n\ntrainer = EmojiTrainer(dataset, nca, n_damage=0)\n\ntrainer.train(100000, batch_size=8, seed=10, lr=2e-4, min_steps=64, max_steps=96)\n\n# to access train state:\n\nstate = trainer.state\n\n# save\nnca.save(state.params, \"saved_params\")\n\n# load params\nloaded_params = nca.load(\"saved_params\")\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shyamsn97/jax-nca",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jax-nca",
    "package_url": "https://pypi.org/project/jax-nca/",
    "platform": null,
    "project_url": "https://pypi.org/project/jax-nca/",
    "project_urls": {
      "Homepage": "https://github.com/shyamsn97/jax-nca"
    },
    "release_url": "https://pypi.org/project/jax-nca/0.1.2/",
    "requires_dist": [
      "numpy",
      "jax",
      "flax",
      "matplotlib",
      "einops",
      "tensorflow",
      "tensorboardX",
      "optax",
      "tqdm",
      "pandas",
      "pillow",
      "ipycanvas",
      "orjson",
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Neural Cellular Automata (https://distill.pub/2020/growing-ca/ -- Mordvintsev, et al., \"Growing Neural Cellular Automata\", Distill, 2020) implemented in JAX",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13584351,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bee6811b27e32474ab545f80715200341c3e46d908809a045f022fd0837123e",
          "md5": "46ae1df55e682c1c4252b820e70cd732",
          "sha256": "90815f020aceafec880b2f8845be9e56e3cc9ed5bf21563cecd812df9cdc22d7"
        },
        "downloads": -1,
        "filename": "jax_nca-0.1.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "46ae1df55e682c1c4252b820e70cd732",
        "packagetype": "bdist_egg",
        "python_version": "0.1.2",
        "requires_python": null,
        "size": 18383,
        "upload_time": "2022-04-21T22:59:28",
        "upload_time_iso_8601": "2022-04-21T22:59:28.922310Z",
        "url": "https://files.pythonhosted.org/packages/4b/ee/6811b27e32474ab545f80715200341c3e46d908809a045f022fd0837123e/jax_nca-0.1.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8df994ead5c7832ce3ac17889c9520c02b077c9f11712b588451b5f679d5c19a",
          "md5": "7a256ce22f624135bbee21c5dbc81dcb",
          "sha256": "2b912a0aab06507fe73f4c7b1a3caac8b17fd81a511510e17ac0cd0b5ce89495"
        },
        "downloads": -1,
        "filename": "jax_nca-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a256ce22f624135bbee21c5dbc81dcb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9786,
        "upload_time": "2022-04-21T22:59:27",
        "upload_time_iso_8601": "2022-04-21T22:59:27.357755Z",
        "url": "https://files.pythonhosted.org/packages/8d/f9/94ead5c7832ce3ac17889c9520c02b077c9f11712b588451b5f679d5c19a/jax_nca-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c4ed28158252c4a1a6937fbba1d0adc22d7970369429a659a3cfc3ccd0366fd",
          "md5": "772b54f5e9963cdc8966dfb595e5676c",
          "sha256": "11b3336d19b08a02906a2da96a9fa42901ba61673d277f8bf2ca8fc9fb115b47"
        },
        "downloads": -1,
        "filename": "jax_nca-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "772b54f5e9963cdc8966dfb595e5676c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9771,
        "upload_time": "2022-04-21T22:59:30",
        "upload_time_iso_8601": "2022-04-21T22:59:30.383116Z",
        "url": "https://files.pythonhosted.org/packages/5c/4e/d28158252c4a1a6937fbba1d0adc22d7970369429a659a3cfc3ccd0366fd/jax_nca-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bee6811b27e32474ab545f80715200341c3e46d908809a045f022fd0837123e",
        "md5": "46ae1df55e682c1c4252b820e70cd732",
        "sha256": "90815f020aceafec880b2f8845be9e56e3cc9ed5bf21563cecd812df9cdc22d7"
      },
      "downloads": -1,
      "filename": "jax_nca-0.1.2-py3.9.egg",
      "has_sig": false,
      "md5_digest": "46ae1df55e682c1c4252b820e70cd732",
      "packagetype": "bdist_egg",
      "python_version": "0.1.2",
      "requires_python": null,
      "size": 18383,
      "upload_time": "2022-04-21T22:59:28",
      "upload_time_iso_8601": "2022-04-21T22:59:28.922310Z",
      "url": "https://files.pythonhosted.org/packages/4b/ee/6811b27e32474ab545f80715200341c3e46d908809a045f022fd0837123e/jax_nca-0.1.2-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8df994ead5c7832ce3ac17889c9520c02b077c9f11712b588451b5f679d5c19a",
        "md5": "7a256ce22f624135bbee21c5dbc81dcb",
        "sha256": "2b912a0aab06507fe73f4c7b1a3caac8b17fd81a511510e17ac0cd0b5ce89495"
      },
      "downloads": -1,
      "filename": "jax_nca-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a256ce22f624135bbee21c5dbc81dcb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9786,
      "upload_time": "2022-04-21T22:59:27",
      "upload_time_iso_8601": "2022-04-21T22:59:27.357755Z",
      "url": "https://files.pythonhosted.org/packages/8d/f9/94ead5c7832ce3ac17889c9520c02b077c9f11712b588451b5f679d5c19a/jax_nca-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c4ed28158252c4a1a6937fbba1d0adc22d7970369429a659a3cfc3ccd0366fd",
        "md5": "772b54f5e9963cdc8966dfb595e5676c",
        "sha256": "11b3336d19b08a02906a2da96a9fa42901ba61673d277f8bf2ca8fc9fb115b47"
      },
      "downloads": -1,
      "filename": "jax_nca-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "772b54f5e9963cdc8966dfb595e5676c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9771,
      "upload_time": "2022-04-21T22:59:30",
      "upload_time_iso_8601": "2022-04-21T22:59:30.383116Z",
      "url": "https://files.pythonhosted.org/packages/5c/4e/d28158252c4a1a6937fbba1d0adc22d7970369429a659a3cfc3ccd0366fd/jax_nca-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}