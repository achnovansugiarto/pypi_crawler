{
  "info": {
    "author": "Miguel Carcamo",
    "author_email": "miguel.carcamo@manchester.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Object Oriented Framework for Self-calibration of radio-interferometric datasets\n\nMany radioastronomers repeat the process of writing different scripts for self-calibration depending on their datasets. This repository holds an object oriented Framework for self-calibration of radio-interferometric datasets that will help radioastronomers to minimize the tedious work of writing self-calibration scripts once again. The idea is to call just one main Python script that will run an imager (tclean, wsclean, gpuvmem, rascil, etc.) and one or multuple self-calibration objects (phase, amplitude, amplitude-phase) having the self-calibrated dataset as a result. **It is important to recall that this repository is heavily under development!**\n## Requirements\n\n1. CASA (https://casa.nrao.edu/casa_obtaining.shtml)\n\n## Installation\nWe need to install the selfcalframework modules in CASA in order to call the different objects (selfcal and imager). The installation is very similar to the astropy installation in CASA.\n\n- If you want to modify or develop modules and test them:\n\n  1. Open CASA in the repository folder of the framework\n  2. Install pip inside CASA\n  ```Python\n  CASA <2>: from setuptools.command import easy_install\n  CASA <3>: easy_install.main(['--user', 'pip'])\n  ```\n  3. Quit CASA, re-open it and install the selfcalframework modules\n  ```Python\n  CASA <2>: import subprocess, sys\n  CASA <3>: subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', '-e', '.'])\n  ```\n  4. Then close CASA again and open it, and you should be able to import `selfcalframework` from CASA or your CASA scripts\n  ```Python\n  CASA <2>: from selfcalframework.imager import *\n  CASA <3>: from selfcalframework.selfcal import *\n  ```\n- If you just want to use the modules inside CASA:\n\n  1. Open CASA\n  2. Install pip inside CASA\n  ```Python\n  CASA <2>: from setuptools.command import easy_install\n  CASA <3>: easy_install.main(['--user', 'pip'])\n  ```\n  3. Quit CASA, re-open it and install the selfcalframework modules\n  ```Python\n  CASA <2>: import subprocess, sys\n  CASA <3>: subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'selfcalframework'])\n  ```\n  4. Then close CASA again and open it, and you should be able to import `selfcalframework` from CASA or your CASA scripts\n  ```Python\n  CASA <2>: from selfcalframework.imager import *\n  CASA <3>: from selfcalframework.selfcal import *\n  ```\n\n\n## Run your scripts\n\nIn the `main_files` folder there is a set of examples script to run your self-calibration. As a example we will show one of them here:\n\n```Python\n# Import the modules that you want to use\nimport sys\nimport numpy as np\nfrom selfcalframework.selfcal import *\nfrom selfcalframework.imager import *\n\nif __name__ == '__main__':\n    # This step is up to you, and option to capture your arguments from terminal is using sys.argv\n    visfile = sys.argv[3]\n    output = sys.argv[4]\n    want_plot = eval(sys.argv[5])\n\n    # Create your clean object with the arguments that tclean would receive\n    # Table for automasking on long or short baselines can be found here: https://casaguides.nrao.edu/index.php/        Automasking_Guide\n    # The default clean object will use automasking values for short baselines\n    # In this case we will use automasking values for long baselines\n    clean_imager = Clean(inputvis=visfile, output=output, niter=100, M=1024, N=1024, deltax=\"0.2arcsec\", stokes=\"I\", datacolumn=\"corrected\",\n                         robust=0.5, specmode=\"mfs\", deconvolver=\"hogbom\", gridder=\"standard\",\n                         pbcor=True, savemodel=\"modelcolumn\", usemask='auto-multithresh', sidelobethreshold=1.25, noisethreshold=5.0,\n                         minbeamfrac=0.1, lownoisethreshold=2.0, negativethreshold=0.0, interactive=True)\n\n    # Here you will create a parent selfcal object which receives the shared arguments between different kind of self-calibrations\n    parent_selfcal = Selfcal(visfile=clean_imager.getVis(), minblperant=2, refant=\"VA05\", spwmap=[\n                             0, 0, 0, 0], Imager=clean_imager, want_plot=want_plot)\n\n    # Declare your solution intervals, in this case we will not do an amplitude self-calibration so that lines are commented.\n    solint_phs = ['128s', '64s', '32s', '16s']\n    # solint_amp = ['1h']\n    solint_ap = ['inf']\n\n    # Create child objects that inherit variables and methods from the parent\n    # Create a child phasecal object and run it\n    phscal = Phasecal(minsnr=2.0, solint=solint_phs,\n                      combine=\"spw\", selfcal_object=parent_selfcal)\n\n    phs_caltable = phscal.run()\n\n    # ampcal = Ampcal(minsnr=2.0, solint=solint_amp, combine=\"scan\",\n    #                selfcal_object=parent_selfcal, input_caltable=phs_caltable)\n\n    #amp_caltable = ampcal.run()\n\n    # Create another child, but in this case will be an amplitude-phasecal object\n    apcal = AmpPhasecal(minsnr=2.0, solint=solint_ap, combine=\"\",\n                        input_caltable=phs_caltable, selfcal_object=parent_selfcal)\n\n    apcal.run()\n\n    # The parent selfcal object outputs your selfcal measurement set\n    parent_selfcal.selfcal_output(overwrite=True)\n```\n\nThen you can simply run the main script using `casa -c yourscript.py`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/miguelcarcamov/objectoriented_selfcal",
    "keywords": "",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "selfcalframework",
    "package_url": "https://pypi.org/project/selfcalframework/",
    "platform": "",
    "project_url": "https://pypi.org/project/selfcalframework/",
    "project_urls": {
      "Homepage": "https://github.com/miguelcarcamov/objectoriented_selfcal"
    },
    "release_url": "https://pypi.org/project/selfcalframework/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python object oriented framework to do self-calibration",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7944765,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89e56e839fe279df62d0fc3bb411685e8f7b621ad5783ccf10f4501be2515006",
          "md5": "a238bc708c893442c7fab294feab94ea",
          "sha256": "4c102bd0654e6363d5651714be2c93693ee525176d9314d3f85d1533549eccf0"
        },
        "downloads": -1,
        "filename": "selfcalframework-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a238bc708c893442c7fab294feab94ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16225,
        "upload_time": "2020-07-27T17:41:41",
        "upload_time_iso_8601": "2020-07-27T17:41:41.710236Z",
        "url": "https://files.pythonhosted.org/packages/89/e5/6e839fe279df62d0fc3bb411685e8f7b621ad5783ccf10f4501be2515006/selfcalframework-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1a8127ce4c5092e7b52fe5099668d4210624abaa58624401f6f7565d52981f2",
          "md5": "172410eac0534ec6b6dafc8cb103795f",
          "sha256": "7e5f4d0248c47a743262580d67f1dadb6ff5afde51d77e29625a44ed715b1782"
        },
        "downloads": -1,
        "filename": "selfcalframework-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "172410eac0534ec6b6dafc8cb103795f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2827,
        "upload_time": "2020-07-27T17:41:44",
        "upload_time_iso_8601": "2020-07-27T17:41:44.698786Z",
        "url": "https://files.pythonhosted.org/packages/c1/a8/127ce4c5092e7b52fe5099668d4210624abaa58624401f6f7565d52981f2/selfcalframework-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d6493dba0f8b70049d012715792068a2f8eed67fb14ad8f7bb112ffaad2fd01",
          "md5": "8d286ecb65f8fd3d892f3d6682236f9a",
          "sha256": "4f4ee088f0c69fa411802c6cfa7ecca81d6fd19e202fc1c7a12261451dc6383f"
        },
        "downloads": -1,
        "filename": "selfcalframework-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d286ecb65f8fd3d892f3d6682236f9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18123,
        "upload_time": "2020-08-12T14:19:12",
        "upload_time_iso_8601": "2020-08-12T14:19:12.233616Z",
        "url": "https://files.pythonhosted.org/packages/7d/64/93dba0f8b70049d012715792068a2f8eed67fb14ad8f7bb112ffaad2fd01/selfcalframework-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0698dc9907a99e9d57ebde5a85ed7f34d5d7e5c61ae377c5d62dccd8427c3de",
          "md5": "6954b70947303b88c947fdee246eb60c",
          "sha256": "f096488fcbcff4762044c6023141033c3a68c83cd0a07cd3f3ea707cdef9ff40"
        },
        "downloads": -1,
        "filename": "selfcalframework-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6954b70947303b88c947fdee246eb60c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5028,
        "upload_time": "2020-08-12T14:19:13",
        "upload_time_iso_8601": "2020-08-12T14:19:13.693793Z",
        "url": "https://files.pythonhosted.org/packages/a0/69/8dc9907a99e9d57ebde5a85ed7f34d5d7e5c61ae377c5d62dccd8427c3de/selfcalframework-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d6493dba0f8b70049d012715792068a2f8eed67fb14ad8f7bb112ffaad2fd01",
        "md5": "8d286ecb65f8fd3d892f3d6682236f9a",
        "sha256": "4f4ee088f0c69fa411802c6cfa7ecca81d6fd19e202fc1c7a12261451dc6383f"
      },
      "downloads": -1,
      "filename": "selfcalframework-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d286ecb65f8fd3d892f3d6682236f9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18123,
      "upload_time": "2020-08-12T14:19:12",
      "upload_time_iso_8601": "2020-08-12T14:19:12.233616Z",
      "url": "https://files.pythonhosted.org/packages/7d/64/93dba0f8b70049d012715792068a2f8eed67fb14ad8f7bb112ffaad2fd01/selfcalframework-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0698dc9907a99e9d57ebde5a85ed7f34d5d7e5c61ae377c5d62dccd8427c3de",
        "md5": "6954b70947303b88c947fdee246eb60c",
        "sha256": "f096488fcbcff4762044c6023141033c3a68c83cd0a07cd3f3ea707cdef9ff40"
      },
      "downloads": -1,
      "filename": "selfcalframework-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6954b70947303b88c947fdee246eb60c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5028,
      "upload_time": "2020-08-12T14:19:13",
      "upload_time_iso_8601": "2020-08-12T14:19:13.693793Z",
      "url": "https://files.pythonhosted.org/packages/a0/69/8dc9907a99e9d57ebde5a85ed7f34d5d7e5c61ae377c5d62dccd8427c3de/selfcalframework-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}