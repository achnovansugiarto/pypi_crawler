{
  "info": {
    "author": "Jingdi Li",
    "author_email": "lijingdioo@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# iqKM (Identification and Quantification of KEGG Modules)\n\niqKM is an easy to use pipeline to assign and/or quantify KEGG Orthology (KO) and KEGG modules (KMs) in metagenome/genome.\n\n```bash\niqKM -i genome.fna -o out_dir --help_dir help_dir\niqKM -i metagenome.fna -o out_dir --help_dir help_dir --fq raw_reads.fastq(.gz) --meta --quantify\niqKM -h\n```\n\n## Detailed pipeline walkthrough\n\n![iqKM workflow](https://github.com/lijingdi/iqKM/blob/master/iqkm_workflow.jpg)\n\n## Installation\n\niqKM is a command line tool developed for Linux and macOS and is available to install from [github](https://github.com/lijingdi/iqKM), [bioconda](https://github.com/lijingdi/iqKM) or [pypi](https://github.com/lijingdi/iqKM).\n\n\n### Install via conda (recommended)\n\nInstalling iqKM via conda will automatically install all dependencies. \n\n* **Step 1: Create the iqKM environment**\n```bash\nconda create -n iqkm -c bioconda iqKM\n```\n\n* **Step 2: Download Kofam HMM db and help files**\n```bash\nconda activate iqkm\n\n# download help_dir, which contains Kofam HMM db and other help_files\nwget ftp_link && unzip help_dir\n\n```\n\n### Install via pip\n* **Step 1: Install third-party dependencies**\n\nBefore installing iqKM using pip, make sure the following softwares are on the system path, they are all easy-to-install tools. \n\n|    Software     | Version  |\n|:---------------:|:---------------:| \n| [HMMER](http://hmmer.org/documentation.html) | >=3.1 |\n| [Prodigal](https://github.com/hyattpd/Prodigal) | >=2.6.3 | \n| [bwa](https://github.com/lh3/bwa) | >= 0.7.17 |\n| [samtools](http://www.htslib.org/download/) |  >= 1.3.1 | \n\n\n* **Step 2: Install iqKM**\n```bash\npip install iqKM\n```\n\n* **Step 3: Download Kofam HMM db and help files**\n```bash\n\n# download help_dir, which contains Kofam HMM db and other help_files\nwget ftp_link && unzip help_dir\n\n```\n\n\n### Install from github\n* **Step 1: Install third-party dependencies**\n\nBefore installing iqKM, make sure the following softwares are on the system path, they are all easy-to-install tools. \n\n|    Software     | Version  | \n|:---------------:|:---------------:|\n| [HMMER](http://hmmer.org/documentation.html) | >=3.1 | \n| [Prodigal](https://github.com/hyattpd/Prodigal) | >=2.6.3 |\n| [bwa](https://github.com/lh3/bwa) | >= 0.7.17 | \n| [samtools](http://www.htslib.org/download/) |  >= 1.3.1 | \n\n\n* **Step 2: Clone the repo and install**\n```bash\ngit clone https://github.com/lijingdi/iqKM.git\ncd /path/to/iqKM\npython3 setup.py install\n```\n\n* **Step 3: Download Kofam HMM db and help files**\n```bash\n# go to our ftp site https://drive.google.com/u/0/uc?export=download&confirm=H3_U&id=1_Kxhox_hqrs7c_fVD8LC8mbwf4vp0ehX and download help_dir.zip\nunzip help_dir && cd help_dir\npwd\n# /path/to/help_dir\n# now you can use above path as --help_dir /path/to/help_dir when running iqkm\n```\n\n\n\n## Usage\n### Basic usage\n* **KMs assignment for individual genomes**\n```bash\niqKM -i genome.fna -o out_dir --help_dir help_dir\n```\n* **KMs assignment and quantification for individual genomes**\n```bash\niqKM -i genome.fna -o out_dir --help_dir help_dir --fq raw_reads_1.fastq(.gz) --rq raw_reads_2.fastq(.gz) --quantify\n```\n\n* **KMs assignment for metagenomes**\n```bash\niqKM -i metagenome.fna -o out_dir --help_dir help_dir --meta\n```\n* **KMs assignment and quantification for metagenomes**\n```bash\niqKM -i metagenome.fna -o out_dir --help_dir help_dir --fq raw_reads_1.fastq(.gz) --rq raw_reads_2.fastq(.gz) --meta --quantify\n```\n\n### Arguments\n\n**`iqKM -h`**\n\n***`iqkm -i input_genome -o out_dir`*** \n*`[--fq fastq_1.gz] [--rq fastq_2.gz] [--prefix PREFIX] [--db HMMdb] [--com float] [--skip] [--quantify] [--meta] [-w] [-n int] [-f] [-d] [-g file]`*\n\n\n| Required arguments        |     |\n|:---------------:|:---------------:|\n| -i, --input | input genome/metagenome |\n| -o, --out_dir | output folder |\n| --help_dir | Folder containing Kofam HMM database and essential help files, refer to [install](https://github.com/lijingdi/iqKM#installation) to download |\n\n\n| Optional arguments         |     |\n|:---------------:|:---------------:|\n| --fq | input first/single read file, fastq(.gz), only required when '--quantify' is specified|\n| --rq | input reverse read file, fastq(.gz), only required when '--quantify' is specified|\n| --prefix | prefix of output files, default: input genome filename without postfix|\n| --db | Your customised Kofam HMM database, default=None |\n| --com | KM completeness threshold (%) on contig basis, default=66.67 |\n| --skip | Force skipping steps if output files exist, default=False |\n| -q, --quantify | Run both KM assignment and quantification, default=False |\n| -m, --meta | Run in metagenome mode, default=False |\n| -w,--include_weights | Enable normalizing KM abundance using KO weights, default=True |\n| -n, --threads | Number of threads used for computation, default=1 |\n| -f, --force | Force rerunning the whole pipeline, don't resume previous run, default=False |\n| -d, --dist | Apply KM minimum distance threshold, default=True |\n| -g,--genome_equivalent | Genome equivalent output generated from microbe-census, can be used for library-size normalization, optional |\n\n### Files output\n* **[output](https://github.com/lijingdi/iqKM/blob/master/tests/output)**\n    * **[prodigal](https://github.com/lijingdi/iqKM/blob/master/tests/output/prodigal)(intermediate output files)** \n        * *[[prefix].cds](https://github.com/lijingdi/iqKM/blob/master/tests/output/prodigal/example.cds)*\n        * *[[prefix].pep](https://github.com/lijingdi/iqKM/blob/master/tests/output/prodigal/example.pep)*\n        * *[[prefix].gff](https://github.com/lijingdi/iqKM/blob/master/tests/output/prodigal/example.gff)*\n        * *[[prefix].cds.bwa_index](https://github.com/lijingdi/iqKM/blob/master/tests/output/prodigal)* (only when '--quantify' is specified)\n    * **[hmmsearch](https://github.com/lijingdi/iqKM/blob/master/tests/output/hmmsearch) (intermediate output files)**\n        * *[[prefix]_hmmsearch.log](https://github.com/lijingdi/iqKM/blob/master/tests/output/hmmsearch/example_hmmsearch.log)*\n        * *[[prefix]_hmmsearch.tbl](https://github.com/lijingdi/iqKM/blob/master/tests/output/hmmsearch/example_hmmsearch.tbl)*\n    * **[KO_parsing](https://github.com/lijingdi/iqKM/blob/master/tests/output/KO_parsing) (intermediate output files)**\n        * *[[prefix].ko](https://github.com/lijingdi/iqKM/blob/master/tests/output/KO_parsing/example.ko)*\n    * **[KM_assignment_unfiltered](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_unfiltered) (intermediate output files)**\n        * *[[prefix].summary.kegg_contigs.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_unfiltered/example.summary.kegg_contigs.tsv)*\n        * *[[prefix].summary.kegg_pathways.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_unfiltered/example.summary.kegg_pathways.tsv)*\n    * **[KM_assignment_filtered](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_filtered) (KM assignment output)**\n        * *[[prefix]_km_on_contig.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_filtered/example_km_on_contig.tsv)*\n        * *[[prefix]_km_sample_count.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/KM_assignment_filtered/example_km_sample_count.tsv)*\n    * **[out_remap](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_remap) (intermediate output files, only when '--quantify' is specified)**\n        * *[[prefix]_remapping.log](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_remap/example_remapping.log)*\n        * *[[prefix]_unique.tab](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_remap/example_unique.tab)*\n    * **[out_abundance](https://github.com/lijingdi/iqKM/tree/master/tests/output/out_abundance) (KM abundance output, only when '--quantify' is specified)**\n        * **[km_abd_contig](https://github.com/lijingdi/iqKM/tree/master/tests/output/out_abundance/km_abd_contig)**\n           * *[[prefix]_km_contig_abd.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_abundance/km_abd_contig/example_km_contig_abd.tsv)*\n        * **[km_abd_sample](https://github.com/lijingdi/iqKM/tree/master/tests/output/out_abundance/km_abd_sample)**\n           * *[[prefix]_km_sample_abd.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_abundance/km_abd_sample/example_km_sample_abd.tsv)*\n        * **[ko_abd](https://github.com/lijingdi/iqKM/tree/master/tests/output/out_abundance/ko_abd)**\n           * *[[prefix]_ko_abd.tsv](https://github.com/lijingdi/iqKM/blob/master/tests/output/out_abundance/ko_abd/example_ko_abd.tsv)*\n\n\n## Acknowledgements\nAuthor of pipeline: [Jingdi Li](https://github.com/lijingdi/)\n\nPrincipal Investigators: [Rob Finn](https://www.ebi.ac.uk/about/people/rob-finn)\n\nIf you find any errors or bugs, please do not hesitate to contact lijingdioo@outlook.com or open a new Issue thread on this github page, we will get back to you as soon as possible.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Finn-Lab/iqKM/",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iqkm",
    "package_url": "https://pypi.org/project/iqkm/",
    "platform": "",
    "project_url": "https://pypi.org/project/iqkm/",
    "project_urls": {
      "Homepage": "https://github.com/Finn-Lab/iqKM/"
    },
    "release_url": "https://pypi.org/project/iqkm/1.0/",
    "requires_dist": [
      "networkx",
      "pysam",
      "markdown",
      "pytest",
      "pylint"
    ],
    "requires_python": ">=3.6",
    "summary": "Identification and quantification of KEGG Modules in metagenomes/genomes",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9350788,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ff902c7b48007c6dca3eb5f6d8d272c2de0f3e13121623b40c55434b2001ccc",
          "md5": "e2ac0d7c7d81b12e9b679a4e68a02a47",
          "sha256": "c6354867ae727694f999b80e5b91e852913ae01aade1600b8fdae675c610eaa6"
        },
        "downloads": -1,
        "filename": "iqkm-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2ac0d7c7d81b12e9b679a4e68a02a47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37111,
        "upload_time": "2021-02-08T11:44:44",
        "upload_time_iso_8601": "2021-02-08T11:44:44.445419Z",
        "url": "https://files.pythonhosted.org/packages/1f/f9/02c7b48007c6dca3eb5f6d8d272c2de0f3e13121623b40c55434b2001ccc/iqkm-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d64fabc768dd740b41520cdc3040b28c5939552c0ac4e1889e0609811d6be78",
          "md5": "7107e22249c548f2ebbdedea2adc4f7d",
          "sha256": "45efd4b0977bdc487b22993cffe327ef0b55ebfa2e29fbbb5b987e9303e4fe14"
        },
        "downloads": -1,
        "filename": "iqkm-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7107e22249c548f2ebbdedea2adc4f7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21504,
        "upload_time": "2021-02-08T11:44:45",
        "upload_time_iso_8601": "2021-02-08T11:44:45.822827Z",
        "url": "https://files.pythonhosted.org/packages/9d/64/fabc768dd740b41520cdc3040b28c5939552c0ac4e1889e0609811d6be78/iqkm-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ff902c7b48007c6dca3eb5f6d8d272c2de0f3e13121623b40c55434b2001ccc",
        "md5": "e2ac0d7c7d81b12e9b679a4e68a02a47",
        "sha256": "c6354867ae727694f999b80e5b91e852913ae01aade1600b8fdae675c610eaa6"
      },
      "downloads": -1,
      "filename": "iqkm-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2ac0d7c7d81b12e9b679a4e68a02a47",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 37111,
      "upload_time": "2021-02-08T11:44:44",
      "upload_time_iso_8601": "2021-02-08T11:44:44.445419Z",
      "url": "https://files.pythonhosted.org/packages/1f/f9/02c7b48007c6dca3eb5f6d8d272c2de0f3e13121623b40c55434b2001ccc/iqkm-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d64fabc768dd740b41520cdc3040b28c5939552c0ac4e1889e0609811d6be78",
        "md5": "7107e22249c548f2ebbdedea2adc4f7d",
        "sha256": "45efd4b0977bdc487b22993cffe327ef0b55ebfa2e29fbbb5b987e9303e4fe14"
      },
      "downloads": -1,
      "filename": "iqkm-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7107e22249c548f2ebbdedea2adc4f7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21504,
      "upload_time": "2021-02-08T11:44:45",
      "upload_time_iso_8601": "2021-02-08T11:44:45.822827Z",
      "url": "https://files.pythonhosted.org/packages/9d/64/fabc768dd740b41520cdc3040b28c5939552c0ac4e1889e0609811d6be78/iqkm-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}