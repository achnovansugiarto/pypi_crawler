{
  "info": {
    "author": "Heyn",
    "author_email": "heyunhuan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "libecm\n======\n\nlibecm is a library for EtherCAT master ( NEXTW ECM-SK and NEXTW ECM-XF\n)\n\nInstallation\n------------\n\n.. code:: shell\n\n    # pip3 install libecm\n\nor\n\n.. code:: shell\n\n    # python3 setup.py build\n    # python3 setup.py install\n\nAfter installation you can run unit tests to make sure that the library\nworks fine. Execute\n\n.. code:: shell\n\n    # python3 -m libecm.test.test_csp           # For ECM-SK\n    # python3 -m libecm.test.test_ecmxf_elmo    # For ECM-XF elmo 8 servo\n\nUsage\n-----\n\nIn Python 3 ( ECM-SK 12bits )\n\n.. code:: python\n\n    from libecm import sk12 as ethercat\n\n    from libecm.sk12 import WO, WR\n    from libecm.sk12 import DRIVE, IO\n    from libecm.sk12 import FREERUN, DCSYNC\n    from libecm.sk12 import MODE_CSP, MODE_CSV, MODE_CST\n    from libecm.sk12 import MAX_SLAVES, MAX_CHANNELS, MAX_BYTES\n    from libecm.sk12 import STATE_INIT, STATE_PRE_OP, STATE_SAFE_OP, STATE_OP\n\nIn Python 3 ( ECM-SK 16bits )\n\n.. code:: python\n\n    from libecm import sk16 as ethercat\n\n    from libecm.sk16 import WO, WR\n    from libecm.sk16 import DRIVE, IO\n    from libecm.sk16 import FREERUN, DCSYNC\n    from libecm.sk16 import MODE_CSP, MODE_CSV, MODE_CST\n    from libecm.sk16 import MAX_SLAVES, MAX_CHANNELS, MAX_BYTES\n    from libecm.sk16 import STATE_INIT, STATE_PRE_OP, STATE_SAFE_OP, STATE_OP\n\nIn Python 3( ECM-XF )\n\n.. code:: python\n\n    from libecm.ecmxf import ecmxf_library\n    from libecm.ecmxf import DATA_DEFAULT_SIZE\n    from libecm.ecmxf import MODE_CSP, MODE_CSV, MODE_CST\n    from libecm.ecmxf import STATE_INIT, STATE_PRE_OP, STATE_SAFE_OP, STATE_OP\n\n    # ELMO SERVO\n    from libecm.servo.elmo_gold_pdo_mapping import get_rx_pdo_mapping\n    from libecm.servo.elmo_gold_pdo_mapping import get_tx_pdo_mapping\n\n    # UNIVERSAL SERVO\n    from libecm.servo.universal_pdo_mapping import get_rx_pdo_mapping\n    from libecm.servo.universal_pdo_mapping import get_tx_pdo_mapping\n\nECM-SK Example\n--------------\n\n1. Open EtherCAT\n\n.. code:: python\n\n    ethercat.open( )\n\n2. EtherCAT initial.\n\n.. code:: python\n\n  ethercat.set_state( STATE_PRE_OP )                # Set EtherCAT state    \n  ethercat.axis( group=0, topology=[ DRIVE ]*8 )    # Return number of slaves.    \n  ethercat.set_dc( 1000 )                           # Cycle Time Unit : us                  \n  ethercat.set_mode( slaves=[1], modes=[ MODE_CSP ]*1, types=[ DCSYNC ]*1)    \n  time.sleep( 1 )    \n  ethercat.set_state( STATE_SAFE_OP )    \n  time.sleep( 1 )    \n  ethercat.set_state( STATE_OP )\n\n3. Servo ON\n\n.. code:: python\n\n  ethercat.servo_on( slaves=[1] )\n\n4. CSP, CSV, CST Mode\n\n.. code:: python\n\n  ethercat.csp( slaves=[1], values=[ int(position) ], rw=WR )\n  ethercat.csv( slaves=[1], values=[ int(velocity) ], rw=WR )\n  ethercat.cst( slaves=[1], values=[ int(torque) ],   rw=WR ) \n\n  ethercat.mixing( [ dict( slaves=1, modes=MODE_CSV, values=0x55555555 ), dict( slaves=2, modes=MODE_CSP, values=0xAAAAAAAA ) ] )\n\n\n5. Close EtherCAT\n\n.. code:: python\n\n  result = ethercat.servo_off( slaves=[1] )    # Return list    \"\"\" [ { 'index':0, 'status':0, 'position':0, 'torque':0 }, ]    \"\"\"\n  ethercat.set_state( STATE_INIT )    \n  ethercat.close()\n\n6. Other Functions\n\n.. code:: python\n\n  ethercat.get_status( )\n\n  ethercat.sdo( 1, 0x607A, 0, size=4, alias='Target Position' ).value     # Read SDO\n  ethercat.sdo( 1, 0x60C2, 1, size=1, alias='Interpolation').value = 125  # Write SDO\n\n  ethercat.clear_alarm( slaves=[ 1, 2, 3, 4, 5, 6, 7, 8 ] )\n  ethercat.go_home( [ 1, 2, 3, 4, 5, 6, 7, 8 ] )\n  ethercat.abort_home( [ 1, 2, 3, 4, 5, 6, 7, 8 ] )\n  ethercat.set_ex( 0, 0 ) # Param1 Disable(Enable) Command CRC Verification \n                          # Param2 Disable(Enable) Response CRC Verification\n\n  ethercat.read_dio( slaves=[ 1, 2, 3, 4, 5, 6, 7, 8 ])\n  ethercat.write_dio(slaves=[ 1, 2, 3, 4, 5, 6, 7, 8 ], values=[ 0x55, 0x66, 0x77, 8, 9, 10, 11, 12 ] )\n\n  ethercat.reset( )   # Module hardware reset \n  ethercat.reboot( )  # Module software reset\n  ethercat.ric_io( )  # Read ECM IC DIO \n  ethercat.wic_io( 0x55555555 ) # Write ECM IC DIO\n\n\nECM-XF Example\n--------------\n\n1. Open EtherCAT\n\n.. code:: python\n\n  from libecm.servo.universal_pdo_mapping import get_rx_pdo_mapping \n  from libecm.servo.universal_pdo_mapping import get_tx_pdo_mapping\n\n  COUNT  = 1\n  SLAVES = [ i for i in range( 0, COUNT ) ]\n  MODES  = [ MODE_CSV ]\n\n  RX_PDO_MAPPING = get_rx_pdo_mapping( MODES )\n  TX_PDO_MAPPING = get_rx_pdo_mapping( MODES )\n\n  ethercat = ecmxf_library( SLAVES, RX_PDO_MAPPING, TX_PDO_MAPPING )\n  ethercat.open( dev='/dev/spidev0.0' )\n\n2. EtherCAT initial\n\n.. code:: python\n\n  ethercat.set_dc( 5000000 )    # ns    \n  ethercat.firmware()           # Get ECMXF firmware version    \n  ethercat.axis( )              # Get slave count    \n  ethercat.set_state( STATE_PRE_OP )    \n  ethercat.reconfig( slaves=SLAVES, rx_mapping=RX_PDO_MAPPING, tx_mapping=TX_PDO_MAPPING )   \n  ethercat.set_mode( slaves=SLAVES, modes=MODES )    \n\n  ethercat.set_state( STATE_SAFE_OP )    \n  for slave in SLAVES:                       \n    ethercat.align_position( slave=slave, homing=True, position=0 )    \n\n  ethercat.set_state( STATE_OP )\n\n3. Servo ON\n\n.. code:: python\n\n  ethercat.servo_on( slaves=SLAVES )\n\n4. CSP, CSV, CST Mode\n\n.. code:: python\n\n  ethercat.mixing( slaves=SLAVES, values=[ 0 ]*COUNT, syntax=False )  # Not monitor FIFO \n  ethercat.mixing( slaves=SLAVES, values=[ 0 ]*COUNT, syntax=True  )   # monitor FIFO\n\n  # Get ECMXF feedback values \n  ethercat.feedback( slaves=SLAVES )\n\n\n5. Close EtherCAT\n\n.. code:: python\n\n  ethercat.servo_off( slaves=SLAVES )    \n  ethercat.close( )\n\n6. Other Functions\n\n.. code:: python\n\n  from libecm.ecmxf import sdo\n\n  ethercat.sdo( 1, 0x607A, 0, size=4, alias='Target Position' ).value     # Read SDO \n  ethercat.sdo( 1, 0x60C2, 1, size=1, alias='Interpolation').value = 125  # Write SDO\n\n  ethercat.reset( )   # Module hardware reset \n  ethercat.reboot( )  # Module software reset\n\n  ethercat.show_pdo( slaves=SLAVES, index=0x1C12 ) \n  ethercat.show_pdo( slaves=SLAVES, index=0x1C13 )\n\n  ethercat.show_pdo_size()\n\n\n\nV1.2 (2021-05-31 dev)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  New add hardware reset function ( For Raspberry Pi 4B, RESET PIN =\n   WIRINGPI CODE 3 ).\n\n-  Optimized class hexinSigmoid\n\n-  Fixed some bugs.\n\nV1.1 (2021-05-13)\n~~~~~~~~~~~~~~~~~\n\n-  New add ECMXF library.\n\nV0.6 (2020-09-28)\n~~~~~~~~~~~~~~~~~\n\n-  Optimized code.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hex-in/libecm",
    "keywords": "ETHERCAT,ECM-SK,ECM-XF",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libecm",
    "package_url": "https://pypi.org/project/libecm/",
    "platform": "",
    "project_url": "https://pypi.org/project/libecm/",
    "project_urls": {
      "Homepage": "https://github.com/hex-in/libecm"
    },
    "release_url": "https://pypi.org/project/libecm/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for NEXTW ECM-SK and ECM-XF Module",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11002961,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d3080a94ede8f0b01a96877adaf18be974207d67ee58a5eb0f2634caec0824a",
          "md5": "de11a9e43f93e057f6652c30b0fc32cd",
          "sha256": "50ada73e64fe67a6a5f4df796db1eb8f190f515b64113ed896f023a27790f4ee"
        },
        "downloads": -1,
        "filename": "libecm-1.2-cp36-cp36m-linux_armv7l.whl",
        "has_sig": false,
        "md5_digest": "de11a9e43f93e057f6652c30b0fc32cd",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 267436,
        "upload_time": "2021-07-26T07:37:18",
        "upload_time_iso_8601": "2021-07-26T07:37:18.493068Z",
        "url": "https://files.pythonhosted.org/packages/7d/30/80a94ede8f0b01a96877adaf18be974207d67ee58a5eb0f2634caec0824a/libecm-1.2-cp36-cp36m-linux_armv7l.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6647326ddc22657b19d3b5be71b666bde9e166e426a82a31064e0e7354f1d53e",
          "md5": "fee5dceed04f766dbedf38040bc35d6e",
          "sha256": "5d395949a5f579ddb2afe901f6f928d52fc84d116dcbcc6ce4fc15e5e5b891f9"
        },
        "downloads": -1,
        "filename": "libecm-1.2-cp37-cp37m-linux_armv7l.whl",
        "has_sig": false,
        "md5_digest": "fee5dceed04f766dbedf38040bc35d6e",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 269510,
        "upload_time": "2021-07-26T07:39:37",
        "upload_time_iso_8601": "2021-07-26T07:39:37.483197Z",
        "url": "https://files.pythonhosted.org/packages/66/47/326ddc22657b19d3b5be71b666bde9e166e426a82a31064e0e7354f1d53e/libecm-1.2-cp37-cp37m-linux_armv7l.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "862c8aa623588c7db424577af57eb863ebf129591da882da75c69fe9b435e981",
          "md5": "cd005cce85de0476c0e6911054d5ebb9",
          "sha256": "dfd349b1f702d5d3dc55120bcc936c5c5a681182960df9dc06c9677e11a32291"
        },
        "downloads": -1,
        "filename": "libecm-1.2-cp38-cp38-linux_armv7l.whl",
        "has_sig": false,
        "md5_digest": "cd005cce85de0476c0e6911054d5ebb9",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 269317,
        "upload_time": "2021-07-26T07:39:39",
        "upload_time_iso_8601": "2021-07-26T07:39:39.766157Z",
        "url": "https://files.pythonhosted.org/packages/86/2c/8aa623588c7db424577af57eb863ebf129591da882da75c69fe9b435e981/libecm-1.2-cp38-cp38-linux_armv7l.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d3080a94ede8f0b01a96877adaf18be974207d67ee58a5eb0f2634caec0824a",
        "md5": "de11a9e43f93e057f6652c30b0fc32cd",
        "sha256": "50ada73e64fe67a6a5f4df796db1eb8f190f515b64113ed896f023a27790f4ee"
      },
      "downloads": -1,
      "filename": "libecm-1.2-cp36-cp36m-linux_armv7l.whl",
      "has_sig": false,
      "md5_digest": "de11a9e43f93e057f6652c30b0fc32cd",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 267436,
      "upload_time": "2021-07-26T07:37:18",
      "upload_time_iso_8601": "2021-07-26T07:37:18.493068Z",
      "url": "https://files.pythonhosted.org/packages/7d/30/80a94ede8f0b01a96877adaf18be974207d67ee58a5eb0f2634caec0824a/libecm-1.2-cp36-cp36m-linux_armv7l.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6647326ddc22657b19d3b5be71b666bde9e166e426a82a31064e0e7354f1d53e",
        "md5": "fee5dceed04f766dbedf38040bc35d6e",
        "sha256": "5d395949a5f579ddb2afe901f6f928d52fc84d116dcbcc6ce4fc15e5e5b891f9"
      },
      "downloads": -1,
      "filename": "libecm-1.2-cp37-cp37m-linux_armv7l.whl",
      "has_sig": false,
      "md5_digest": "fee5dceed04f766dbedf38040bc35d6e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 269510,
      "upload_time": "2021-07-26T07:39:37",
      "upload_time_iso_8601": "2021-07-26T07:39:37.483197Z",
      "url": "https://files.pythonhosted.org/packages/66/47/326ddc22657b19d3b5be71b666bde9e166e426a82a31064e0e7354f1d53e/libecm-1.2-cp37-cp37m-linux_armv7l.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "862c8aa623588c7db424577af57eb863ebf129591da882da75c69fe9b435e981",
        "md5": "cd005cce85de0476c0e6911054d5ebb9",
        "sha256": "dfd349b1f702d5d3dc55120bcc936c5c5a681182960df9dc06c9677e11a32291"
      },
      "downloads": -1,
      "filename": "libecm-1.2-cp38-cp38-linux_armv7l.whl",
      "has_sig": false,
      "md5_digest": "cd005cce85de0476c0e6911054d5ebb9",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 269317,
      "upload_time": "2021-07-26T07:39:39",
      "upload_time_iso_8601": "2021-07-26T07:39:39.766157Z",
      "url": "https://files.pythonhosted.org/packages/86/2c/8aa623588c7db424577af57eb863ebf129591da882da75c69fe9b435e981/libecm-1.2-cp38-cp38-linux_armv7l.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}