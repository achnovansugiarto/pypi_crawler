{
  "info": {
    "author": "Joshua Griffin Dunn",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "miniHMM\n=======\n\nSummary\n-------\n\nThis is a toy library that implements first- through Nth-order hidden Markov\nmodels. \n\nAt present, `miniHMM` offers some benefits hard to find in other HMM libraries:\n\n- Its algorithms are numerically stable\n\n- It is able to compute high order hidden Markov models, which allow states\n  to depend on the Nth previous states, rather than only on the immediate\n  previous state. \n  \n  Concretely, high-order models are implemented via a translation layer\n  that converts high-order models of arbitrary degree into mathematically\n  equivalent first-order models over a virtual state space. This implementation\n  allows all algorithms developed for first-order models to be applied in \n  higher dimensions. See `minihmm.represent` for further detail.\n\n- Emissions may be univariate or multivariate (for multidimensional emissions),\n  continuous or discrete. See `minihmm.factors` for examples of\n  distributions that can be built out-of-the-box, and for hints on designing new\n  ones,\n  \n- Multiple distinct estimators are available for probability distributions,\n  enabling e.g. addition of model noise, pseudocounts, et c during model\n  training. See `minihmm.estimators` for details.\n   \n- HMMs of all sorts can be trained via a Baum-Welch implementation with some\n  bells & whistles (e.g.  noise scheduling, parallelization, parameter-tying\n  (via estimator classes), et c)\n\n- In addition to the Viterbi algorithm (the maximum likelihood solution for a\n  total sequence of states), states may be inferred by:\n   \n  - Probabilistically sampling valid sequences from their posterior\n    distribution, given a sequence of emissions. This enables estimates of\n    robustness and non-deterministic samples to be drawn\n\n  - Labeling individual states by highest posterior probabilities (even\n    though this doesn't guarantee a valid path)\n\n\nRunning the tests\n-----------------\n\nTests are currently written to run under `nose` separately under Python 3.6\nand 3.9, with the following virtual environments configured via `tox`:\n\n- `*-pinned` : run using versions of dependencies pinned in ``requirements.txt``\n\n- `*-latest` : run all tests using latest available versions of each dependency.\n  This will enable us to catch breaking changes.\n\nBy default, running ``tox`` from the shell will run all tests in all\nenvironments. To choose which environment(s) or test(s) to run, you can use\nstandard `tox` or `nose` arguments (see their respective documentation\nfor more details)::\n\n    # run tests only under Python 3.6, with pinned requirements\n    $ tox -e py36-pinned \n\n    # run tests under all environments, but only for estimator suite\n    $ tox minihmm.test.test_estimators\n\n    # run tests only for estimator suite, passing verbose mode to nose\n    # note: nose args go after the double dash ('--')\n    $ tox minihmm.test.test_estimators -- -v --nocapture\n\n\nAs these environments assume you have Python 3.6, and 3.9 installed, we have\ndefined a Dockerfile that contains all of them. This is the preferred\nenvironment for testing. Build the image with the following syntax::\n\n    # build image from inside miniHMM folder\n    $ docker build --pull -t minihmm .\n\n    # start a container, mounting current folder as minihmm source\n    $ docker run -it --rm minihmm\n\n    # alternative if you are developing- mount your dev folder within\n    # the container, then run tox inside the container\n    $ docker run -it --rm $(pwd):/usr/src/minihmm minihmm\n\n\nBuilding the documentation\n--------------------------\n\nDocuments may be built via Sphinx, either inside or outside the container.\nTo build the docs, you must first install the package, as well as documentation\ndependencies. In the project folder::\n\n    # install package\n    $ pip install --user -e .\n\n    # install doc dependencies\n    $ pip install -r docs/requirements.txt\n\n    # build docs & open in browser\n    $ make -C docs html\n    $ firefox docs/build/html/index.html\n\n\nNotes\n-----\n\nThis library is in beta, and breaking changes are not uncommon. We try to be\npolite by announcing these in the changelog.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/joshuagryphon/minihmm",
    "keywords": "HMM hidden Markov model machine learning modeling statistics",
    "license": "BSD 3-Clause",
    "maintainer": "Joshua Griffin Dunn",
    "maintainer_email": "",
    "name": "minihmm",
    "package_url": "https://pypi.org/project/minihmm/",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/minihmm/",
    "project_urls": {
      "Homepage": "http://github.com/joshuagryphon/minihmm"
    },
    "release_url": "https://pypi.org/project/minihmm/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lightweight extensible HMM engine, supporting univariate or multivariate, continuous or discrete emissions",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13776965,
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc1dd53dca9a38ea047f83795ca37212cadbc04f3b169ba7cb995137cb5272bb",
          "md5": "8bd1897e371c6b5880aadf14b497e3f3",
          "sha256": "d71fb3f9a7f82c5af40012d1e651cb578364bb7a50017d083136026fed0f08c5"
        },
        "downloads": -1,
        "filename": "minihmm-0.3.2.tar.gz",
        "has_sig": true,
        "md5_digest": "8bd1897e371c6b5880aadf14b497e3f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48512,
        "upload_time": "2022-05-10T23:41:56",
        "upload_time_iso_8601": "2022-05-10T23:41:56.025171Z",
        "url": "https://files.pythonhosted.org/packages/cc/1d/d53dca9a38ea047f83795ca37212cadbc04f3b169ba7cb995137cb5272bb/minihmm-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc1dd53dca9a38ea047f83795ca37212cadbc04f3b169ba7cb995137cb5272bb",
        "md5": "8bd1897e371c6b5880aadf14b497e3f3",
        "sha256": "d71fb3f9a7f82c5af40012d1e651cb578364bb7a50017d083136026fed0f08c5"
      },
      "downloads": -1,
      "filename": "minihmm-0.3.2.tar.gz",
      "has_sig": true,
      "md5_digest": "8bd1897e371c6b5880aadf14b497e3f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48512,
      "upload_time": "2022-05-10T23:41:56",
      "upload_time_iso_8601": "2022-05-10T23:41:56.025171Z",
      "url": "https://files.pythonhosted.org/packages/cc/1d/d53dca9a38ea047f83795ca37212cadbc04f3b169ba7cb995137cb5272bb/minihmm-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}