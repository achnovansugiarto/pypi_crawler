{
  "info": {
    "author": "Martin Larralde",
    "author_email": "martin.larralde@embl.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# üå≤ `torch-treecrf`\n\n*A [PyTorch](https://pytorch.org/) implementation of Tree-structured Conditional Random Fields.*\n\n[![Actions](https://img.shields.io/github/actions/workflow/status/althonos/torch-treecrf/test.yml?branch=main&logo=github&style=flat-square&maxAge=300)](https://github.com/althonos/torch-treecrf/actions)\n[![Coverage](https://img.shields.io/codecov/c/gh/althonos/torch-treecrf?style=flat-square&maxAge=3600)](https://codecov.io/gh/althonos/torch-treecrf/)\n[![License](https://img.shields.io/badge/license-GPLv3-blue.svg?style=flat-square&maxAge=2678400)](https://choosealicense.com/licenses/gpl-3.0/)\n[![PyPI](https://img.shields.io/pypi/v/torch-treecrf.svg?style=flat-square&maxAge=3600)](https://pypi.org/project/torch-treecrf)\n[![Wheel](https://img.shields.io/pypi/wheel/torch-treecrf.svg?style=flat-square&maxAge=3600)](https://pypi.org/project/torch-treecrf/#files)\n[![Python Versions](https://img.shields.io/pypi/pyversions/torch-treecrf.svg?style=flat-square&maxAge=3600)](https://pypi.org/project/torch-treecrf/#files)\n[![Python Implementations](https://img.shields.io/badge/impl-universal-success.svg?style=flat-square&maxAge=3600&label=impl)](https://pypi.org/project/torch-treecrf/#files)\n[![Source](https://img.shields.io/badge/source-GitHub-303030.svg?maxAge=2678400&style=flat-square)](https://github.com/althonos/torch-treecrf/)\n[![GitHub issues](https://img.shields.io/github/issues/althonos/torch-treecrf.svg?style=flat-square&maxAge=600)](https://github.com/althonos/torch-treecrf/issues)\n[![Changelog](https://img.shields.io/badge/keep%20a-changelog-8A0707.svg?maxAge=2678400&style=flat-square)](https://github.com/althonos/torch-treecrf.py/blob/master/CHANGELOG.md)\n[![Downloads](https://img.shields.io/badge/dynamic/json?style=flat-square&color=303f9f&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Ftorch-treecrf)](https://pepy.tech/project/torch-treecrf)\n\n## üó∫Ô∏è Overview\n\n[Conditional Random Fields](https://en.wikipedia.org/wiki/Conditional_random_field)\n(CRF) are a family of discriminative graphical learning models that can be used\nto model the dependencies between variables. The most common\nform of CRFs are Linear-chain CRF, where a prediction depends on\nan observed variable, as well as the prediction before and after it\n(the *context*). Linear-chain CRFs are widely used in Natural Language Processing.\n\n<p align=\"center\">\n  <img height=\"150\" src=\"https://github.com/althonos/torch-treecrf/raw/main/static/linear-chain-crf.svg?raw=true\">\n</p>\n\n$$\nP(Y | X) = \\frac{1}{Z(X)} \\prod_{i=1}^n{ \\Psi_i(y_i, x_i) } \\prod_{i=2}^n{ \\Psi_{i-1,i}(y_{i-1}, y_i)}\n$$\n\nIn 2006, Tang *et al.*[[1]](#ref1) introduced Tree-structured CRFs to model hierarchical\nrelationships between predicted variables, allowing dependencies between\na prediction variable and its parents and children.\n\n<p align=\"center\">\n  <img height=\"280\" src=\"https://github.com/althonos/torch-treecrf/raw/main/static/tree-structured-crf.svg?raw=true\">\n</p>\n\n$$\nP(Y | X) = \\frac{1}{Z(X)} \\prod_{i=1}^{n}{ \\Psi_i(y_i, x_i) } \\prod_{j \\in \\mathcal{N}(i)}{ \\Psi_{j,i}(y_j, y_i)}\n$$\n\nThis package implements a generic Tree-structured CRF layer in PyTorch. The\nlayer can be stacked on top of a [linear layer](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html) to implement a proper Tree-structured CRF, or on any other kind of model\nproducing emission scores in log-space for every class of each label. Computation\nof marginals is implemented using Belief Propagation[[2]](#ref2), allowing for\nexact inference on trees[[3]](#ref3):\n\n$$\n\\begin{aligned}\nP(y_i | X)\n& =\n    \\frac{1}{Z(X)} \\Psi_i(y_i, x_i)\n    & \\underbrace{\\prod_{j \\in \\mathcal{C}(i)}{\\mu_{j \\to i}(y_i)}} &\n    & \\underbrace{\\prod_{j \\in \\mathcal{P}(i)}{\\mu_{j \\to i}(y_i)}} \\\\\n& = \\frac1Z \\Psi_i(y_i, x_i)\n    & \\alpha_i(y_i) &\n    & \\beta_i(y_i)  \\\\\n\\end{aligned}\n$$\n\nwhere for every node $i$, the message from the parents $\\mathcal{P}(i)$ and\nthe children $\\mathcal{C}(i)$ is computed recursively with the sum-product algorithm[[4]](#ref4):\n\n$$\n\\begin{aligned}\n\\forall j \\in \\mathcal{C}(i), \\mu_{j \\to i}(y_i) = \\sum_{y_j}{\n  \\Psi_{i,j}(y_i, y_j)\n  \\Psi_j(y_j, x_j)\n  \\prod_{k \\in \\mathcal{C}(j)}{\\mu_{k \\to j}(y_j)}\n} \\\\\n\\forall j \\in \\mathcal{P}(i), \\mu_{j \\to i}(y_i) = \\sum_{y_j}{\n  \\Psi_{i,j}(y_i, y_j)\n  \\Psi_j(y_j, x_j)\n  \\prod_{k \\in \\mathcal{P}(j)}{\\mu_{k \\to j}(y_j)}\n} \\\\\n\\end{aligned}\n$$\n\n\n*The implementation should be generic enough that any kind of [Directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) can be used as a label hierarchy,\nnot just trees.*\n\n## üîß Installing\n\nInstall the `torch-treecrf` package directly from [PyPi](https://pypi.org/project/peptides)\nwhich hosts universal wheels that can be installed with `pip`:\n```console\n$ pip install torch-treecrf\n```\n\n## üìã Features\n\n- Encoding of directed graphs in an adjacency matrix, with $\\mathcal{O}(1)$ retrieval of children and parents for any node, and $\\mathcal{O}(N+E)$ storage.\n- Support for any acyclic hierarchy representable as a [Directed Acyclic Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) and not just directed trees, allowing prediction of classes such as the [Gene Ontology](https://geneontology.org).\n- Multiclass output, provided all the target labels have the same number of classes: $Y \\in \\left\\\\{ 0, .., C \\right\\\\}^L$.\n- Minibatch support, with vectorized computation of the messages $\\alpha_i(y_i)$ and $\\beta_i(y_i)$.\n\n\n## üí° Example\n\nTo create a Tree-structured CRF, you must first define the tree encoding the\nrelationships between variables. Let's build a simple CRF for a root variable\nwith two children:\n\n<p align=\"center\">\n  <img height=\"150\" src=\"https://github.com/althonos/torch-treecrf/raw/main/static/example.svg?raw=true\">\n</p>\n\nFirst, define an incidence matrix $M$ representing the hierarchy, such that\n$M_{i,j}$ is $1$ if $j$ is a parent of $i$:\n```python\nhierarchy = torch_treecrf.TreeMatrix([\n    [0, 0, 0],\n    [1, 0, 0],\n    [1, 0, 0]\n])\n```\n\nThen, create the a CRF with the right number of features, depending on your\nfeature space, like you would for a `torch.nn.Linear` module, to obtain\na Torch model:\n```python\ncrf = torch_treecrf.TreeCRF(n_features=30, hierarchy=hierarchy)\n```\n\nIf you wish to use the CRF layer only, use the `TreeCRFLayer` module,\nwhich expects and outputs an emission tensor of shape\n$(\\star, L, C)$, where $\\star$ is the minibatch size, $L$ the number of labels and\n$C$ the number of class per label.\n\n\n## üí≠ Feedback\n\n### ‚ö†Ô∏è Issue Tracker\n\nFound a bug ? Have an enhancement request ? Head over to the [GitHub issue\ntracker](https://github.com/althonos/torch-treecrf/issues) if you need to report\nor ask something. If you are filing in on a bug, please include as much\ninformation as you can about the issue, and try to recreate the same bug\nin a simple, easily reproducible situation.\n\n### üèóÔ∏è Contributing\n\nContributions are more than welcome! See\n[`CONTRIBUTING.md`](https://github.com/althonos/torch-treecrf/blob/main/CONTRIBUTING.md)\nfor more details.\n\n## ‚öñÔ∏è License\n\nThis library is provided under the [MIT License](https://choosealicense.com/licenses/mit/).\n\n*This library was developed by [Martin Larralde](https://github.com/althonos/)\nduring his PhD project at the [European Molecular Biology Laboratory](https://www.embl.de/)\nin the [Zeller team](https://github.com/zellerlab).*\n\n## üìö References\n\n- <a id=\"ref1\">[1]</a> Tang, Jie, Mingcai Hong, Juanzi Li, and Bangyong Liang. ‚ÄòTree-Structured Conditional Random Fields for Semantic Annotation‚Äô. In The Semantic Web - ISWC 2006, edited by Isabel Cruz, Stefan Decker, Dean Allemang, Chris Preist, Daniel Schwabe, Peter Mika, Mike Uschold, and Lora M. Aroyo, 640‚Äì53. Lecture Notes in Computer Science. Berlin, Heidelberg: Springer, 2006. [doi:10.1007/11926078_46](https://doi.org/10.1007/11926078_46).\n- <a id=\"ref2\">[2]</a> Pearl, Judea. ‚ÄòReverend Bayes on Inference Engines: A Distributed Hierarchical   Approach‚Äô. In Proceedings of the Second AAAI Conference on Artificial Intelligence, 133‚Äì136. AAAI‚Äô82. Pittsburgh, Pennsylvania: AAAI Press, 1982.\n- <a id=\"ref3\">[3]</a> Bach, Francis, and Guillaume Obozinski. ‚ÄòSum Product Algorithm and Hidden Markov Model‚Äô, ENS Course Material, 2016. http://imagine.enpc.fr/%7Eobozinsg/teaching/mva_gm/lecture_notes/lecture7.pdf.\n- <a id=\"ref4>\">[4]</a> Kschischang, Frank R., Brendan J. Frey, and Hans-Andrea Loeliger. ‚ÄòFactor Graphs and the Sum-Product Algorithm‚Äô. IEEE Transactions on Information Theory 47, no. 2 (February 2001): 498‚Äì519. [doi:10.1109/18.910572](https://doi.org/10.1109/18.910572).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/althonos/torch-treecrf",
    "keywords": "torch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-treecrf",
    "package_url": "https://pypi.org/project/torch-treecrf/",
    "platform": "any",
    "project_url": "https://pypi.org/project/torch-treecrf/",
    "project_urls": {
      "Bug Tracker": "https://github.com/althonos/torch-treecrf/issues",
      "Builds": "https://github.com/althonos/torch-treecrf/actions",
      "Changelog": "https://github.com/althonos/torch-treecrf/blob/master/CHANGELOG.md",
      "Coverage": "https://codecov.io/gh/althonos/torch-treecrf/",
      "Homepage": "https://github.com/althonos/torch-treecrf",
      "PyPI": "https://pypi.org/project/torch-treecrf"
    },
    "release_url": "https://pypi.org/project/torch-treecrf/0.1.1/",
    "requires_dist": [
      "torch (~=1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A PyTorch implementation of Tree-structured Conditional Random Fields.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17355216,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e7b08547e2ac848cece9c4cbb3e7dc2cba6cfdc285c85b0ee4abab2c0563f94",
          "md5": "216c92a4ea0c1714ae6beae0216090f0",
          "sha256": "2d6c843c5cf717919b11e19fdd542fc09f43139ac6186cf5f5c469138907a365"
        },
        "downloads": -1,
        "filename": "torch_treecrf-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "216c92a4ea0c1714ae6beae0216090f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10419,
        "upload_time": "2023-01-17T16:00:07",
        "upload_time_iso_8601": "2023-01-17T16:00:07.188724Z",
        "url": "https://files.pythonhosted.org/packages/1e/7b/08547e2ac848cece9c4cbb3e7dc2cba6cfdc285c85b0ee4abab2c0563f94/torch_treecrf-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4910e3ee8a575799919f32cd7e9b1e4930af376b1cc92f6d757b79b40956b58",
          "md5": "87b3961cbf0ff182ec6ae2bf9ca90099",
          "sha256": "a57297aa913dd6b39c80bb8b0aa62b188d20831c046141ebf9a70d90759152c3"
        },
        "downloads": -1,
        "filename": "torch-treecrf-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "87b3961cbf0ff182ec6ae2bf9ca90099",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12415,
        "upload_time": "2023-01-17T16:00:08",
        "upload_time_iso_8601": "2023-01-17T16:00:08.346925Z",
        "url": "https://files.pythonhosted.org/packages/d4/91/0e3ee8a575799919f32cd7e9b1e4930af376b1cc92f6d757b79b40956b58/torch-treecrf-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89088b22df490d35b9fee1c0a4160c90ebcafa0335549ac07715efa91660d123",
          "md5": "7cb512ed9ba2ec799b62bcbac6c983d3",
          "sha256": "20d6f84b94487a58a99d3652e79a5fcfefd55b633ec86377a41e39d037f7cfe3"
        },
        "downloads": -1,
        "filename": "torch_treecrf-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cb512ed9ba2ec799b62bcbac6c983d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10585,
        "upload_time": "2023-03-19T17:27:56",
        "upload_time_iso_8601": "2023-03-19T17:27:56.723495Z",
        "url": "https://files.pythonhosted.org/packages/89/08/8b22df490d35b9fee1c0a4160c90ebcafa0335549ac07715efa91660d123/torch_treecrf-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb47e665d50d7032c4baa8d44a142879da716782e22cd20bb5744447831b3ef6",
          "md5": "1241e829eb89e4698d79618c4dca680f",
          "sha256": "9028f015e38965610d1285dcf2332a092a0d9d59c71fc477bc19157ad5c737d7"
        },
        "downloads": -1,
        "filename": "torch-treecrf-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1241e829eb89e4698d79618c4dca680f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12820,
        "upload_time": "2023-03-19T17:27:57",
        "upload_time_iso_8601": "2023-03-19T17:27:57.961264Z",
        "url": "https://files.pythonhosted.org/packages/eb/47/e665d50d7032c4baa8d44a142879da716782e22cd20bb5744447831b3ef6/torch-treecrf-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89088b22df490d35b9fee1c0a4160c90ebcafa0335549ac07715efa91660d123",
        "md5": "7cb512ed9ba2ec799b62bcbac6c983d3",
        "sha256": "20d6f84b94487a58a99d3652e79a5fcfefd55b633ec86377a41e39d037f7cfe3"
      },
      "downloads": -1,
      "filename": "torch_treecrf-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7cb512ed9ba2ec799b62bcbac6c983d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10585,
      "upload_time": "2023-03-19T17:27:56",
      "upload_time_iso_8601": "2023-03-19T17:27:56.723495Z",
      "url": "https://files.pythonhosted.org/packages/89/08/8b22df490d35b9fee1c0a4160c90ebcafa0335549ac07715efa91660d123/torch_treecrf-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb47e665d50d7032c4baa8d44a142879da716782e22cd20bb5744447831b3ef6",
        "md5": "1241e829eb89e4698d79618c4dca680f",
        "sha256": "9028f015e38965610d1285dcf2332a092a0d9d59c71fc477bc19157ad5c737d7"
      },
      "downloads": -1,
      "filename": "torch-treecrf-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1241e829eb89e4698d79618c4dca680f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12820,
      "upload_time": "2023-03-19T17:27:57",
      "upload_time_iso_8601": "2023-03-19T17:27:57.961264Z",
      "url": "https://files.pythonhosted.org/packages/eb/47/e665d50d7032c4baa8d44a142879da716782e22cd20bb5744447831b3ef6/torch-treecrf-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}