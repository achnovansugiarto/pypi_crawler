{
  "info": {
    "author": "Sadamori Kojaku",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "[![Unit Test & Deploy](https://github.com/skojaku/cidre/actions/workflows/main.yml/badge.svg)](https://github.com/skojaku/cidre/actions/workflows/main.yml)\n# Python package for the CItation-Donor-REcipient (CIDRE) algorithm.\n\nCIDRE is an algorithm to find anomalous groups in directed and weighted networks.\nAn anomalous group consists of donor and recipient nodes, connected by edges with excessive edge weights (i.e., excessive edges).\nA donor is a node providing excessive edges to other member nodes.\nA recipient is a node having excessive edges from other member nodes.\n\nIf you use this package, please cite:\n\n```latex\n@misc{kojaku2021cartel,\n      title={Detecting citation cartels in journal networks},\n      author={Sadamori Kojaku and Giacomo Livan and Naoki Masuda},\n      year={2021},\n      eprint={2009.09097},\n      archivePrefix={arXiv},\n      primaryClass={physics.soc-ph}\n}\n```\n\n## Requirements\n- Python 3.7 or later\n\n## Install\n\n```\npip install cidre\n```\n\n## Examples\n- [Toy network with communities](examples/example1.ipynb)\n- [Citation network of journals in 2013](examples/example2.ipynb)\n\n## A minimal example\n\n```python\nimport cidre\n\nalg = cidre.Cidre(group_membership)\ngroups = alg.detect(A, threshold = 0.15)\n```\n\n- `group_membership` (*Optional*): If the network has communities, and the communities are not anomalous, tell the communities to CIDRE with this argument. `group_membership` should be numpy.array or list with element, `group_membership[i]`, indicating the group to which node i belongs. Otherwise, set `group_membership=None`.\n- `A`: Adjacency matrix of the input network (can be weighted or directed). Should be either an nx.Graph or scipy.sparse_csr_matrix. In case of scipy.sparse_csr_matrix format, A[i,j] indicates the weight of the edge from node i to j.\n- `threshold`: Threshold for the donor and recipient nodes. A larger threshold will yield tighter and smaller groups.\n- `groups`: List of `Group` instances. See [Group class](#Group-class) section.\n\n## Group class\n\n`Group` is a dedicated class for groups of donor and recipient nodes.\n\nThe donor and recipient nodes of a group, denoted by `group`, can be obtained by\n```python\ngroup.donors # {node_id: donor_score}\ngroup.recipients # {node_id: recipient_score}\n```\n\n- `group.donors` is a dict object taking keys and values corresponding to the node IDs and the donor scores, respectively.\n- `group.recipients` is the analogous dict object for the recipient nodes.\n\nThe number of nodes and edges within the group can be obtained by\n```python\ngroup.size() # Number of nodes\ngroup.get_within_edges() # Number of edges within this group\n```\n\n## Visualization\n\n`cidre` package provides an API to visualize small groups. Before using this API, set up your canvas by\n```python\nimport matplotlib.pyplot as plt\n\nwidth, height = 7, 10\nfig, ax = plt.subplots((width, height))\n```\n\nThen, pass `ax` together with `group` that you want to visualize to `DrawGroup` class:\n```python\nimport cidre\ndc = cidre.DrawGroup()\ndc.draw(group, ax = ax)\n```\n\nThis will show a plot like this:\n\n<p align=\"center\">\n<img src=\"figs/fig-example-1.png\" width=\"40%\" height=\"40%\">\n</p>\n\n- The left and right nodes correspond to the donor and recipients nodes, respectively.\n- The color of each edge corresponds to the color of the source node (i.e., the node from which the edge emanates).\n- The width of each edge is proportional to the weight of the edge.\n- The text next to each node corresponds to the ID of the node, or equivalently the row id of the adjacency matrix `A`.\n\nInstead of node IDs, you may want to display the nodes' labels. To do this, prepare a dict object taking IDs and labels as keys and values, respectively, e.g.,\n\n```python\nnode_labels = {0:\"name 1\", 1:\"name 2\"}\n```\n\nThen, pass it to the `draw` function as `node_labels` argument, i.e.,\n```python\ndc.draw(group, node_labels = node_labels, ax = ax)\n```\n\n<p align=\"center\">\n<img src=\"figs/fig-example-2.png\" width=\"40%\" height=\"40%\">\n</p>\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skojaku/cidre",
    "keywords": "networks,community detection,anomaly detection",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cidre",
    "package_url": "https://pypi.org/project/cidre/",
    "platform": "",
    "project_url": "https://pypi.org/project/cidre/",
    "project_urls": {
      "Homepage": "https://github.com/skojaku/cidre"
    },
    "release_url": "https://pypi.org/project/cidre/0.0.1/",
    "requires_dist": [
      "networkx (>=2.0)",
      "numpy (>=1.16.5)",
      "scipy (>=1.5.2)",
      "seaborn (>=0.11.0)",
      "pandas (>=1.1.0)",
      "tqdm (>=4.49.0)",
      "matplotlib (==3.1.3)",
      "seaborn (==0.11.1)"
    ],
    "requires_python": "",
    "summary": "Algorithm for finding anomalous groups in networks",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10856262,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfacc2ada1403a3635ba563cfb6d4efcc3e22c1971292d62bfccc3e5183fbcab",
          "md5": "4c55f51f5eebab3face6ee69f6e84426",
          "sha256": "069ce7024c164d28ba52c68943f93dd959d6f08e212b17a0aaf5c7b349f966eb"
        },
        "downloads": -1,
        "filename": "cidre-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c55f51f5eebab3face6ee69f6e84426",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15876,
        "upload_time": "2021-06-27T21:13:46",
        "upload_time_iso_8601": "2021-06-27T21:13:46.081610Z",
        "url": "https://files.pythonhosted.org/packages/cf/ac/c2ada1403a3635ba563cfb6d4efcc3e22c1971292d62bfccc3e5183fbcab/cidre-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b709dd570dac612b71e1c3c6d5888013b8bd30dbe3975061a9a3a7a1a6c77f08",
          "md5": "9090e0f7ed78518d09863e093c44fd8d",
          "sha256": "5ab897f87a0790b7a3d61413d6fc02f46cb04acda886da014e06ef0f3e74350a"
        },
        "downloads": -1,
        "filename": "cidre-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9090e0f7ed78518d09863e093c44fd8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11396,
        "upload_time": "2021-06-27T21:13:47",
        "upload_time_iso_8601": "2021-06-27T21:13:47.371779Z",
        "url": "https://files.pythonhosted.org/packages/b7/09/dd570dac612b71e1c3c6d5888013b8bd30dbe3975061a9a3a7a1a6c77f08/cidre-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "567c41dff60a831cd16ef2e1eca140ee9647b40d3ee85437bdfcde327fcf241f",
          "md5": "680b670eff4823a846b44d23beec2fba",
          "sha256": "50b785d5a84487cbd5ed1cb805e4825e273ae00a4b533d7ae7f6771a6de0e939"
        },
        "downloads": -1,
        "filename": "cidre-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "680b670eff4823a846b44d23beec2fba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16639,
        "upload_time": "2021-07-08T15:05:03",
        "upload_time_iso_8601": "2021-07-08T15:05:03.918790Z",
        "url": "https://files.pythonhosted.org/packages/56/7c/41dff60a831cd16ef2e1eca140ee9647b40d3ee85437bdfcde327fcf241f/cidre-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "567c41dff60a831cd16ef2e1eca140ee9647b40d3ee85437bdfcde327fcf241f",
        "md5": "680b670eff4823a846b44d23beec2fba",
        "sha256": "50b785d5a84487cbd5ed1cb805e4825e273ae00a4b533d7ae7f6771a6de0e939"
      },
      "downloads": -1,
      "filename": "cidre-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "680b670eff4823a846b44d23beec2fba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16639,
      "upload_time": "2021-07-08T15:05:03",
      "upload_time_iso_8601": "2021-07-08T15:05:03.918790Z",
      "url": "https://files.pythonhosted.org/packages/56/7c/41dff60a831cd16ef2e1eca140ee9647b40d3ee85437bdfcde327fcf241f/cidre-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}