{
  "info": {
    "author": "Michele Cappellari",
    "author_email": "michele.cappellari@physics.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "The JamPy Package\r\n=================\r\n\r\n**Jeans Anisotropic Modelling for Galactic Dynamics**\r\n\r\n.. image:: http://www-astro.physics.ox.ac.uk/~cappellari/software/jam_logo.svg\r\n    :target: https://www-astro.physics.ox.ac.uk/~cappellari/software/#jam\r\n    :width: 100\r\n.. image:: https://img.shields.io/pypi/v/jampy.svg\r\n    :target: https://pypi.org/project/jampy/\r\n.. image:: https://img.shields.io/badge/arXiv-0806.0042-orange.svg\r\n    :target: https://arxiv.org/abs/0806.0042\r\n.. image:: https://img.shields.io/badge/DOI-10.1111/...-green.svg\r\n    :target: https://doi.org/10.1111/j.1365-2966.2008.13754.x\r\n\r\n``JamPy`` is a Python implementation of the Jeans Anisotropic Modelling (JAM)\r\nformalism for the dynamical modelling of galaxies. \r\n\r\nThis software can be used e.g. to measure the mass of supermassive black holes \r\nin galaxies, to infer their dark-matter content or to measure galaxy masses and\r\ndensity profiles.\r\n\r\nThe method calculates all the first and second velocity moments, for both the\r\nintrinsic and the projected kinematics, in spherical and axisymmetric geometry.\r\n\r\nThe JAM solution assuming a cylindrically-oriented velocity ellipsoid was introduced in \r\n`Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_,\r\nwhile the solution assuming a spherically-oriented velocity ellipsoid was introduced in \r\n`Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/2020MNRAS.494.4819C>`_\r\n\r\n.. contents:: :depth: 2\r\n\r\nAttribution\r\n-----------\r\n\r\nIf you use this software for your research, please cite `Cappellari (2008)`_\r\nfor the cylindrically-aligned JAM solution and `Cappellari (2020)`_\r\nfor the spherically-aligned JAM solution.\r\n\r\nThe BibTeX entry for the two main JAM papers are respectively::\r\n\r\n    @ARTICLE{Cappellari2008,\r\n        author = {{Cappellari}, Michele},\r\n        title = \"{Measuring the inclination and mass-to-light ratio of axisymmetric \r\n            galaxies via anisotropic Jeans models of stellar kinematics}\",\r\n        journal = {MNRAS},\r\n        eprint = {0806.0042},\r\n        year = 2008,\r\n        volume = 390,\r\n        pages = {71-86},\r\n        doi = {10.1111/j.1365-2966.2008.13754.x}\r\n    }\r\n\r\n    @ARTICLE{Cappellari2020,\r\n        author = {{Cappellari}, Michele},\r\n        title = \"{Efficient solution of the anisotropic spherically-aligned axisymmetric\r\n            Jeans equations of stellar hydrodynamics for galactic dynamics}\",\r\n        journal = {MNRAS},\r\n        eprint = {1907.09894},\r\n        year = 2020,\r\n        volume = 494,\r\n        pages = {4819-4837},\r\n        doi = {10.1093/mnras/staa959}\r\n    }\r\n\r\nInstallation\r\n------------\r\n\r\ninstall with::\r\n\r\n    pip install jampy\r\n\r\nWithout writing access to the global ``site-packages`` directory, use::\r\n\r\n    pip install --user jampy\r\n\r\nTo upgrade ``JamPy`` to the latest version use::\r\n\r\n    pip install --upgrade jampy\r\n\r\nDocumentation\r\n-------------\r\n\r\nFull documentation is contained in the individual files docstrings.\r\n\r\nUsage examples are contained in the directory ``jampy/examples`` \r\nwhich is copied by ``pip`` within the global folder\r\n`site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nWhat follows is the documentation of the two main procedures of the ``JamPy``\r\npackage, extracted from their Python docstrings. The other procedures are \r\ndocumented in their respective docstrings.\r\n\r\nThe older ``JamPy`` routines from version < v6.0 are generally redundant,\r\nbut can be imported from ``jampy.legacy`` and used like before.\r\n\r\n###########################################################################\r\n\r\njam_axi_proj\r\n============\r\n\r\nPurpose\r\n-------\r\n\r\nThis procedure calculates a prediction for all the projected first or second\r\nvelocity moments for an anisotropic (three-integral) axisymmetric galaxy model.\r\n\r\nAny of the three components of the first velocity moment or any of the six\r\ncomponents of the symmetric velocity dispersion tensor are supported.\r\nThese include the line-of-sight velocities and the components of the proper motion.\r\n\r\nTwo assumptions for the orientation of the velocity ellipsoid are supported:\r\n\r\n- The cylindrically-aligned ``(R, z, phi)`` solution was presented in\r\n  `Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_\r\n\r\n- The spherically-aligned ``(r, th, phi)`` solution was presented in\r\n  `Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/2020MNRAS.494.4819C>`_\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    jam = jam_axi_proj(\r\n             surf_lum, sigma_lum, qobs_lum, surf_pot, sigma_pot, qobs_pot,\r\n             inc, mbh, distance, xbin, ybin, align='cyl', analytic_los=True,\r\n             beta=None, data=None, epsrel=1e-2, errors=None, flux_obs=None,\r\n             gamma=None, goodbins=None, interp=True, kappa=None, ml=None,\r\n             moment='zz', nang=10, nlos=1500, nodots=False, normpsf=1.,\r\n             nrad=20, pixang=0., pixsize=0., plot=True, quiet=False,\r\n             rbh=0.01, sigmapsf=0., step=0., vmax=None, vmin=None)\r\n\r\n    vrms = jam.model  # with moment='zz' the output is the LOS Vrms\r\n\r\n    jam.plot()   # Generate data/model comparison when data is given\r\n\r\nSee more examples in the ``jampy/examples`` folder inside\r\n`site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nInput Parameters\r\n----------------\r\n\r\nsurf_lum: array_like with shape (n,)\r\n    peak surface values of the `Multi-Gaussian Expansion\r\n    <https://pypi.org/project/mgefit/>`_ (MGE) Gaussians describing the\r\n    surface brightness of the tracer population for which the kinematics\r\n    is derived.\r\n\r\n    The units are arbitrary as they cancel out in the final results.\r\n\r\n    EXAMPLE: when one obtains the kinematics from optical spectroscopy,\r\n    surf_lum contains the galaxy optical surface brightness, which has\r\n    typical units of ``Lsun/pc^2`` (solar luminosities per ``parsec^2``).\r\nsigma_lum: array_like with shape (n,)\r\n    dispersion (sigma) in arcseconds of the MGE Gaussians describing the\r\n    distribution of the kinematic-tracer population.\r\nqobs_lum: array_like with shape (n,)\r\n    observed axial ratio (q') of the MGE Gaussians describing the\r\n    distribution of the kinematic-tracer population.\r\nsurf_pot: array_like with shape (m,)\r\n    peak value of the MGE Gaussians describing the galaxy total-mass\r\n    surface density in units of ``Msun/pc^2`` (solar masses per ``parsec^2``).\r\n    This is the MGE model from which the model gravitational potential is\r\n    computed.\r\n\r\n    EXAMPLE: with a self-consistent model, one has the same Gaussians\r\n    for both the kinematic-tracer and the gravitational potential.\r\n    This implies ``surf_pot = surf_lum``, ``sigma_pot = sigma_lum`` and\r\n    ``qobs_pot = qobs_lum``. The global M/L of the model is fitted by the\r\n    routine when passing the ``data`` and ``errors`` keywords with the\r\n    observed kinematics.\r\nsigma_pot: array_like with shape (m,)\r\n    dispersion in arcseconds of the MGE Gaussians describing the galaxy\r\n    total-mass surface density.\r\nqobs_pot: array_like with shape (m,)\r\n    observed axial ratio of the MGE Gaussians describing the galaxy\r\n    total-mass surface density.\r\ninc: float\r\n    inclination in degrees between the line-of-sight and the galaxy symmetry\r\n    axis (0 being face-on and 90 edge-on).\r\nmbh: float\r\n    Mass of a nuclear supermassive black hole in solar masses.\r\n\r\n    IMPORTANT: The model predictions are computed assuming ``surf_pot``\r\n    gives the total mass. In the self-consistent case, one has\r\n    ``surf_pot = surf_lum`` and if requested (keyword ``ml``) the program\r\n    can scale the output ``model`` to best fit the data. The scaling is\r\n    equivalent to multiplying *both* ``surf_pot`` and ``mbh`` by a factor M/L.\r\n    To avoid mistakes, the actual ``mbh`` used by the output model is\r\n    printed on the screen.\r\ndistance: float\r\n    the distance of the galaxy in ``Mpc``. When the distance is derived \r\n    from redshift one should use the angular diameter distance ``D_A`` here.\r\nxbin: array_like with shape (p,)\r\n    X coordinates in arcseconds of the bins (or pixels) at which one wants\r\n    to compute the model predictions. The X-axis is assumed to coincide with\r\n    the galaxy projected major axis. The galaxy center is at ``(0,0)``.\r\n    \r\n    In general the coordinates ``(xbin, ybin)`` have to be rotated to bring \r\n    the galaxy major axis on the X-axis, before calling ``jam_axi_proj``.\r\n\r\n    When no PSF/pixel convolution is performed (``sigmapsf=0`` or\r\n    ``pixsize=0``) there is a singularity at ``(0,0)`` which must be\r\n    avoided by the user in the input coordinates.\r\nybin: array_like with shape (p,)\r\n    Y coordinates in arcseconds of the bins (or pixels) at which one wants\r\n    to compute the model predictions. The Y-axis is assumed to coincide with\r\n    the projected galaxy symmetry axis.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nalign: {'cyl', 'sph'}, optional.\r\n    Assumed alignment for the velocity ellipsoid during the solution of\r\n    the Jeans equations.\r\n\r\n    - ``align='cyl'`` assumes a cylindrically-aligned velocity ellipsoid\r\n      using the solution of `Cappellari (2008)`_\r\n\r\n    - ``align='sph'`` assumes a spherically-aligned velocity ellipsoid\r\n      using the solution of `Cappellari (2020)`_\r\n\r\nanalytic_los: bool, optional\r\n    This is ``True`` (default) if the line-of-sight integral is performed\r\n    analytically and ``False`` if it is done via numerical quadrature.\r\n\r\n    An analytic integral is only possible with ``align='cyl'`` and only for\r\n    the second velocity moments. For this reason, when comparing the two\r\n    second-moment solutions with ``align='cyl'`` and ``align='sph'``, it\r\n    may be preferable to set ``analytic_los=False`` to ensure that\r\n    numerical interpolation error is exactly the same in both cases.\r\n\r\n    When ``align='sph'``, or when the user requests a first velocity\r\n    moment, this keyword is automatically set to ``False``.\r\nbeta: array_like with shape (n,) or (4,)\r\n    Radial anisotropy of the individual kinematic-tracer MGE Gaussians\r\n    (Default: ``beta=np.zeros(n)``)::\r\n\r\n        beta = 1 - (sigma_th/sigma_r)^2  # with align='sph'\r\n        beta = 1 - (sigma_z/sigma_R)^2   # with align='cyl'\r\n\r\n    When ``len(beta) == 4`` the procedure assumes::\r\n\r\n        beta = [r_a, beta_0, beta_inf, alpha]\r\n\r\n    and the anisotropy of the whole JAM model varies as a logistic\r\n    function of the logarithmic spherical radius (with ``align='sph'``) or\r\n    of the logarithmic distance from the equatorial plane (with ``align='cyl'``)::\r\n\r\n        beta(r) = beta_0 + (beta_inf - beta_0)/[1 + (r_a/r)^alpha]    # with align='sph'\r\n        beta(z) = beta_0 + (beta_inf - beta_0)/[1 + (z_a/|z|)^alpha]  # with align='cyl'\r\n\r\n    Here ``beta_0`` represents the anisotropy at ``r = 0``, ``beta_inf``\r\n    is the anisotropy at ``r = inf`` and ``r_a`` is the anisotropy\r\n    transition radius, with ``alpha`` controlling the sharpness of the\r\n    transition. In the special case ``beta_0 = 0, beta_inf = 1, alpha = 2``\r\n    the anisotropy variation reduces to the form by Osipkov & Merritt, but\r\n    the extra parameters allow for much more realistic anisotropy profiles.\r\ndata: array_like with shape (p,), optional\r\n    observed first or second velocity moment used to fit the model.\r\n\r\n    EXAMPLE: In the common case where one has only line-of-sight velocities\r\n    the second moment is given by::\r\n\r\n        Vrms = np.sqrt(velBin**2 + sigBin**2)\r\n\r\n    at the coordinates positions given by the vectors ``xbin`` and ``ybin``.\r\n\r\n    If ``data`` is set and ``ml`` is negative or ``None``, then the model\r\n    is fitted to the data, otherwise, the adopted ``ml`` is used and just\r\n    the ``chi**2`` is returned.\r\nepsrel: float, optional\r\n    Relative error requested for the numerical computation of the intrinsic\r\n    moments (before line-of-sight quadrature). (Default: ``epsrel=1e-2``)\r\nerrors: array_like with shape (p,), optional\r\n    1sigma uncertainty associated with the ``data`` measurements.\r\n\r\n    EXAMPLE: In the case where the data are given by the\r\n    ``Vrms = np.sqrt(velBin**2 + sigBin**2)``, from the error propagation::\r\n\r\n        errors = np.sqrt((dVel*velBin)**2 + (dSig*sigBin)**2)/Vrms,\r\n\r\n    where ``velBin`` and ``sigBin`` are the velocity and dispersion in each\r\n    bin and ``dVel`` and ``dSig`` are the corresponding 1sigma uncertainties.\r\n    (Default: constant ``errors = 0.05*np.median(data)``)\r\nflux_obs: array_like with shape (p,), optional\r\n    Optional mean surface brightness of each bin for plotting.\r\ngamma: array_like with shape (n,)\r\n    tangential anisotropy of the individual kinematic-tracer MGE Gaussians\r\n    (Default: ``gamma=np.zeros(n)``)::\r\n\r\n        gamma = 1 - (sigma_phi/sigma_r)^2  # with align='sph'\r\n        gamma = 1 - (sigma_phi/sigma_R)^2  # with align='cyl'\r\n\r\n    When ``len(gamma) == 4`` the procedure assumes::\r\n\r\n        gamma = [r_a, gamma_0, gamma_inf, alpha]\r\n\r\n    and the anisotropy of the whole JAM model varies as a logistic\r\n    function of the logarithmic spherical radius (with ``align='sph'``) or\r\n    of the logarithmic distance from the equatorial plane (with ``align='cyl'``)::\r\n\r\n        gamma(r) = gamma_0 + (gamma_inf - gamma_0)/[1 + (r_a/r)^alpha]    # with align='sph'\r\n        gamma(z) = gamma_0 + (gamma_inf - gamma_0)/[1 + (z_a/|z|)^alpha]  # with align='cyl'\r\n\r\n    Here ``gamma_0`` represents the anisotropy at ``r = 0``, ``gamma_inf``\r\n    is the anisotropy at ``r = inf`` and ``r_a`` is the anisotropy\r\n    transition radius, with ``alpha`` controlling the sharpness of the\r\n    transition. In the special case ``gamma_0 = 0, gamma_inf = 1, alpha = 2``\r\n    the anisotropy variation reduces to the form by Osipkov & Merritt, but\r\n    the extra parameters allow for much more realistic anisotropy profiles.\r\n\r\n    IMPORTANT: ``gamma`` only affects the projected first velocity moments.\r\n    The projected second moments are rigorously independent of ``gamma``.\r\ngoodbins: array_like with shape (p,)\r\n    Boolean vector with values ``True`` for the bins/spaxels which have to\r\n    be included in the fit (if requested) and in the ``chi**2`` calculation.\r\n    (Default: fit all bins).\r\ninterp: bool, optional\r\n    This keyword is for advanced use only! Set ``interp=False`` to force \r\n    no-interpolation on the sky plane. In this way ``jam.vel`` and \r\n    ``jam.vel2`` contain all the first and second velocity moments at the \r\n    input coordinates ``(xbin, ybin)``, without PSF convolution.\r\n    By default ``interp=True`` and one should generally not change this.\r\n\r\n    IMPORTANT: If ``sigmapsf=0`` or ``pixsize=0`` or ``interp=False`` then\r\n    PSF convolution is not performed.\r\n\r\n    This keyword is mainly useful for testing against analytic results or\r\n    to compute all moments, including proper motions,  simultaneously.\r\nkappa: float, optional\r\n    When ``kappa=None`` (default) the first velocity moments are scaled in\r\n    such a way that the projected angular momentum of the data and model is\r\n    the same [equation 52 of `Cappellari (2008)`_].\r\n    When ``kappa=1`` the model first velocity moments are output without\r\n    any scaling.\r\nml: float, optional\r\n    Mass-to-light ratio (M/L) to multiply the values given by ``surf_pot``.\r\n    Setting this keyword is completely equivalent to multiplying the\r\n    output ``model`` by ``np.sqrt(M/L)`` after the fit. This implies that\r\n    the BH mass is also scaled and becomes ``mbh*ml``.\r\n\r\n    If ``ml=None`` (default) the M/L is fitted from the data and the\r\n    best-fitting M/L is returned in output. The BH mass of the model is\r\n    also scaled and becomes ``mbh*ml``.\r\nmoment: {'x', 'y', 'z', 'xx', 'yy', 'zz', 'xy', 'xz', 'yz'}, optional\r\n    String specifying the component of the velocity first or second moments\r\n    requested by the user in output. All values ar in ``km/s``.\r\n\r\n    - ``moment='x'`` gives the first moment ``<V_x'>`` of the proper motion\r\n      in the direction orthogonal to the projected symmetry axis.\r\n\r\n    - ``moment='y'`` gives the first moment ``<V_y'>`` of the proper motion\r\n      in the direction parallel to the projected symmetry axis.\r\n\r\n    - ``moment='z'`` gives the first moment ``Vlos = <V_z'>`` of the\r\n      line-of-sight velocity.\r\n\r\n    - ``moment='xx'`` gives ``sqrt<V_x'^2>`` of the component of the proper\r\n      motion dispersion tensor in the direction orthogonal to the projected\r\n      symmetry axis.\r\n\r\n    - ``moment='yy'`` gives ``sqrt<V_y'^2>`` of the component of the proper\r\n      motion dispersion tensor in the direction parallel to the projected\r\n      symmetry axis.\r\n\r\n    - ``moment='zz'`` (default) gives the usual line-of-sight\r\n      ``Vrms = sqrt<V_z'^2>``.\r\n\r\n    - ``moment='xy'`` gives the mixed component ``<V_x'V_y'>`` of the proper\r\n      motion dispersion tensor.\r\n\r\n    - ``moment='xz'`` gives the mixed component ``<V_x'V_z'>`` of the proper\r\n      motion dispersion tensor.\r\n\r\n    - ``moment='yz'`` gives the mixed component ``<V_y'V_z'>`` of the proper\r\n      motion dispersion tensor.\r\nnang: int, optional\r\n    The number of linearly-spaced intervals in the eccentric anomaly at\r\n    which the model is evaluated before interpolation and PSF convolution.\r\n    (default: ``nang=10``)\r\nnlos: int (optional)\r\n    Number of values used for the numerical line-of-sight quadrature.\r\n    (default ``nlos=1500``)\r\nnodots: bool, optional\r\n    Set to ``True`` to hide the dots indicating the centers of the bins in\r\n    the linearly-interpolated two-dimensional map (default ``False``).\r\nnormpsf: array_like with shape (q,)\r\n    fraction of the total PSF flux contained in the circular Gaussians\r\n    describing the PSF of the kinematic observations.\r\n    The PSF will be used for seeing convolution of the model kinematics.\r\n    It has to be ``np.sum(normpsf) = 1``.\r\nnrad: int, optional\r\n    The number of logarithmically spaced radial positions at which the\r\n    model is evaluated before interpolation and PSF convolution. One may\r\n    want to increase this value if the model has to be evaluated over many\r\n    orders of magnitude in radius (default: ``nrad=20``).\r\npixang: float, optional\r\n    Angle between the observed spaxels and the galaxy major axis X.\r\n    This angle only rotates the spaxels around their centers, *not* the\r\n    whole coordinate system ``(xbin, ybin)``, which must be rotated\r\n    independently by the user before calling ``jam_axi_proj``. \r\n    Using the keyword is generally unnecessary.\r\npixsize: float, optional\r\n    Size in arcseconds of the (square) spatial elements at which the\r\n    kinematics is obtained. This may correspond to the side of the spaxel\r\n    or lenslets of an integral-field spectrograph. This size is used to\r\n    compute the kernel for the seeing and aperture convolution.\r\n\r\n    IMPORTANT: If ``sigmapsf=0`` or ``pixsize=0`` or ``interp=False`` then\r\n    PSF convolution is not performed.\r\nplot: bool\r\n    When ``data is not None`` setting this keyword produces a plot with the\r\n    data/model comparison at the end of the calculation.\r\nquiet: bool\r\n    Set this keyword to avoid printing values on the console.\r\nrbh: float, optional\r\n    This scalar gives the sigma in arcsec of the Gaussian representing the\r\n    central black hole of mass MBH [See Section 3.1.2 of `Cappellari (2008)`_]\r\n    The gravitational potential is indistinguishable from a point source\r\n    for ``radii > 2*rbh``, so the default ``rbh=0.01`` arcsec is appropriate\r\n    in most current situations.\r\n\r\n    When using different units as input, e.g. pc instead of arcsec, one\r\n    should check that ``rbh`` is not too many order of magnitude smaller\r\n    than the spatial resolution of the data.\r\nsigmapsf: array_like with shape (q,)\r\n    dispersion in arcseconds of the circular Gaussians describing the PSF\r\n    of the kinematic observations.\r\n\r\n    IMPORTANT: If ``sigmapsf=0`` or ``pixsize=0`` or ``interp=False`` then\r\n    PSF convolution is not performed.\r\n\r\n    IMPORTANT: PSF convolution is done by creating a 2D image, with pixels\r\n    size given by ``step=max(sigmapsf, pixsize/2)/4``, and convolving it\r\n    with the PSF + aperture. If the input radii are very large compared\r\n    to ``step``, the 2D image may require a too large amount of memory.\r\n    If this is the case one may compute the model predictions at small radii\r\n    with a first call to ``jam_axi_proj`` with PSF convolution, and the\r\n    model predictions at large radii with a second call to ``jam_axi_proj``\r\n    without PSF convolution.\r\nstep: float, optional\r\n    Spatial step for the model calculation and PSF convolution in arcsec.\r\n    This value is automatically computed by default as\r\n    ``step=max(sigmapsf,pixsize/2)/4``. It is assumed that when ``pixsize``\r\n    or ``sigmapsf`` are large, high-resolution calculations are not needed. In\r\n    some cases, however, e.g. to accurately estimate the central Vrms in a\r\n    very cuspy galaxy inside a large aperture, one may want to override the\r\n    default value to force smaller spatial pixels using this keyword.\r\nvmax: float, optional\r\n    Maximum value of the ``data`` to plot.\r\nvmin: float, optional\r\n    Minimum value of the ``data`` to plot.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nStored as attributes of the ``jam_axi_proj`` class.\r\n\r\n.chi2: float\r\n    Reduced ``chi**2``, namely per degree of freedom,  describing the \r\n    quality of the fit::\r\n\r\n        d, m = (data/errors)[goodbins], (model/errors)[goodbins]\r\n        chi2 = ((d - m)**2).sum()/goodbins.sum()\r\n\r\n    When no data are given in input, this is returned as ``np.nan``.\r\n.flux: array_like with shape (p,)\r\n    PSF-convolved MGE surface brightness of each bin in ``Lsun/pc^2``,\r\n    used to plot the isophotes of the kinematic-tracer on the model results.\r\n.kappa: float\r\n    Ratio by which the model was scaled to fit the observed velocity\r\n    [defined by equation 52 of `Cappellari (2008)`_]\r\n.ml: float\r\n    Best fitting M/L by which the mass was scaled to fit the observed moments.\r\n.model: array_like with shape (p,)\r\n    Model predictions for the selected velocity moments for each input bin\r\n    ``(xbin, ybin)``. This attribute is the main output from the program.\r\n\r\n    Any of the six components of the symmetric proper motion dispersion\r\n    tensor ``{'xx', 'yy', 'zz', 'xy', 'xz', 'yz'}``, or any of the three \r\n    first velocity moments ``{'x', 'y', 'z'}``` can be returned in output.\r\n    The desired model output is selected using the ``moment`` keyword.\r\n    See the ``moment`` documentation for details.\r\n.vel: array_like with shape (3, p)\r\n    This attribute generally contains an intermediate result of the\r\n    calculation and should not be used. Instead, the output kinematic\r\n    model predictions are contained in the ``.model`` attribute.\r\n\r\n    However, for advanced use only, when setting ``interp=False`` and\r\n    ``analytic_los=False``, this attribute contains the first velocity\r\n    moments for all the x, y and z components, *not* PSF convolved, at the\r\n    sky coordinates ``(xbin, ybin)``.\r\n.vel2: array_like with shape (3, 3, p)\r\n    This attribute generally contains an intermediate result of the\r\n    calculation and should not be used. Instead, the output kinematic\r\n    model predictions are contained in the ``.model`` attribute.\r\n\r\n    However, for advanced use only, when setting ``interp=False`` and\r\n    ``analytic_los=False``, this attribute contains the full 3x3 second\r\n    velocity moment tensor, *not* PSF convolved, at the sky coordinates\r\n    ``(xbin, ybin)``.\r\n\r\n###########################################################################\r\n\r\njam_axi_intr\r\n============\r\n\r\nPurpose\r\n-------\r\n\r\nThis procedure calculates all the intrinsic first and second velocity\r\nmoments for an anisotropic axisymmetric galaxy model.\r\n\r\nThis program is useful e.g. to model the kinematics of galaxies\r\nlike our Milky Way, for which the intrinsic moments can be observed\r\ndirectly, or to compute starting conditions for N-body numerical\r\nsimulations of galaxies.\r\n\r\nTwo assumptions for the orientation of the velocity ellipsoid are supported:\r\n\r\n- The cylindrically-aligned ``(R, z, phi)`` solution was presented in\r\n  `Cappellari (2008) <https://ui.adsabs.harvard.edu/abs/2008MNRAS.390...71C>`_\r\n\r\n- The spherically-aligned ``(r, th, phi)`` solution was presented in\r\n  `Cappellari (2020) <https://ui.adsabs.harvard.edu/abs/2020MNRAS.494.4819C>`_\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    jam = jam_axi_intr(\r\n             dens_lum, sigma_lum, qintr_lum, dens_pot, sigma_pot, qintr_pot,\r\n             mbh, Rbin, zbin, align='cyl', beta=None, data=None,\r\n             epsrel=1e-2, errors=None, gamma=None, goodbins=None,\r\n             interp=True, ml=None, nang=10, nodots=False, nrad=20,\r\n             plot=True, proj_cyl=False, quiet=False, rbh=1)\r\n\r\n    # The meaning of the output is different depending on `align`\r\n    sig2R, sig2z, sig2phi, v2phi = jam.model  # with align='cyl'\r\n    sig2r, sig2th, sig2phi, v2phi = jam.model  # with align='sph'\r\n\r\n    jam.plot()   # Generate data/model comparison\r\n\r\nInput Parameters\r\n----------------\r\n\r\ndens_lum: array_like with shape (n,)\r\n    vector containing the peak value of the MGE Gaussians describing\r\n    the intrinsic density of the tracer population for which the kinematics\r\n    is derived.\r\n    The units are arbitrary as they cancel out in the final results.\r\n    Typical units are e.g. ``Lsun/pc^3`` (solar luminosities per ``parsec^3``)\r\nsigma_lum: array_like with shape (n,)\r\n    vector containing the dispersion (sigma) in ``pc`` of the MGE\r\n    Gaussians describing the galaxy kinematic-tracer population.\r\nqintr_lum: array_like with shape (n,)\r\n    vector containing the intrinsic axial ratio (q) of the MGE\r\n    Gaussians describing the galaxy kinematic-tracer population.\r\nsurf_pot: array_like with shape (m,)\r\n    vector containing the peak value of the MGE Gaussians\r\n    describing the galaxy total-mass density in units of ``Msun/pc^3``\r\n    (solar masses per ``parsec^3``). This is the MGE model from which the\r\n    model gravitational potential is computed.\r\nsigma_pot: array_like with shape (m,)\r\n    vector containing the dispersion in ``pc`` of the MGE\r\n    Gaussians describing the galaxy total-mass density.\r\nqintr_pot: array_like with shape (m,)\r\n    vector containing the intrinsic axial ratio of the MGE\r\n    Gaussians describing the galaxy total-mass density.\r\nmbh: float\r\n    Mass of a nuclear supermassive black hole in solar masses.\r\nRbin: array_like with shape (p,)\r\n    Vector with the ``R`` coordinates in ``pc`` of the bins (or pixels) at\r\n    which one wants to compute the model predictions. This is the first\r\n    cylindrical coordinate ``(R, z)`` with the galaxy center at ``(0,0)``.\r\n\r\n    There is a singularity at ``(0, 0)`` which should be avoided by the user\r\n    in the input coordinates.\r\nzbin: array_like with shape (p,)\r\n    Vector with the ``z`` coordinates in ``pc`` of the bins (or pixels) at\r\n    which one wants to compute the model predictions. This is the second\r\n    cylindrical coordinate ``(R, z)``, with the z-axis coincident with the\r\n    galaxy symmetry axis.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nalign: {'cyl', 'sph'} optional\r\n    If ``align='cyl'`` the program computes the solution of the Jeans\r\n    equations with cylindrically-aligned velocity ellipsoid, presented\r\n    in `Cappellari (2008)`_. If ``align='sph'`` the spherically-aligned\r\n    solution of `Cappellari (2020)`_ is returned.\r\nbeta: array_like with shape (n,) or (4,)\r\n    Vector with the axial anisotropy of the individual kinematic-tracer\r\n    MGE Gaussians (Default: ``beta=np.zeros(n)``)::\r\n\r\n        beta = 1 - (sigma_th/sigma_r)^2  # with align='sph'\r\n        beta = 1 - (sigma_z/sigma_R)^2   # with align='cyl'\r\n\r\n    When ``len(beta) == 4`` the procedure assumes::\r\n\r\n        beta = [r_a, beta_0, beta_inf, alpha]\r\n\r\n    and the anisotropy of the whole JAM model varies as a logistic\r\n    function of the logarithmic spherical radius (with ``align='sph'``) or\r\n    of the logarithmic distance from the equatorial plane (with ``align='cyl'``)::\r\n\r\n        beta(r) = beta_0 + (beta_inf - beta_0)/[1 + (r_a/r)^alpha]    # with align='sph'\r\n        beta(z) = beta_0 + (beta_inf - beta_0)/[1 + (z_a/|z|)^alpha]  # with align='cyl'\r\n\r\n    Here ``beta_0`` represents the anisotropy at ``r = 0``, ``beta_inf``\r\n    is the anisotropy at ``r = inf`` and ``r_a`` is the anisotropy\r\n    transition radius, with ``alpha`` controlling the sharpness of the\r\n    transition. In the special case ``beta_0 = 0, beta_inf = 1, alpha = 2``\r\n    the anisotropy variation reduces to the form by Osipkov & Merritt, but\r\n    the extra parameters allow for much more realistic anisotropy profiles.\r\ndata: array_like of shape (4, p), optional\r\n    Four input vectors with the observed values of:\r\n\r\n    - ``[sigR, sigz, sigphi, vrms_phi]`` in ``km/s``, when ``align='cyl'``\r\n      (or ``align='sph'`` and ``proj_cyl=True``).\r\n\r\n      ``vrms_phi`` is the square root of the velocity second moment in the\r\n      tangential direction. If the velocities ``vphi_j`` are measured from\r\n      individual stars then ``vrms_phi = sqrt(mean(vphi_j^2))``.\r\n      One can also use the relation ``vrms_phi = sqrt(vphi^2 + sigphi^2)``,\r\n      where ``vphi = mean(vphi_j)`` and ``sigphi = std(vphi_j)``\r\n\r\n    - ``[sigr, sigth, sigphi, vrms_phi]`` in ``km/s``, when ``align='sph'``,\r\n      where ``vrms_phi`` is defined above.\r\n\r\nepsrel: float, optional\r\n    Relative error requested for the numerical quadratures, before\r\n    interpolation (Default: ``epsrel=1e-2``).\r\nerrors: array_like of shape (4, p), optional\r\n    ``1sigma`` uncertainties on ``data``, in the same format (default 5 ``km/s``).\r\ngamma: array_like with shape (n,)\r\n    Vector with the tangential anisotropy of the individual kinematic-tracer\r\n    MGE Gaussians (Default: ``gamma=np.zeros(n)``)::\r\n\r\n        gamma = 1 - (sigma_phi/sigma_r)^2  # with align='sph'\r\n        gamma = 1 - (sigma_phi/sigma_R)^2  # with align='cyl'\r\n\r\n    When ``len(gamma) == 4`` the procedure assumes::\r\n\r\n        gamma = [r_a, gamma_0, gamma_inf, alpha]\r\n\r\n    and the anisotropy of the whole JAM model varies as a logistic\r\n    function of the logarithmic spherical radius (with ``align='sph'``) or\r\n    of the logarithmic distance from the equatorial plane (with ``align='cyl'``)::\r\n\r\n        gamma(r) = gamma_0 + (gamma_inf - gamma_0)/[1 + (r_a/r)^alpha]    # with align='sph'\r\n        gamma(z) = gamma_0 + (gamma_inf - gamma_0)/[1 + (z_a/|z|)^alpha]  # with align='cyl'\r\n\r\n    Here ``gamma_0`` represents the anisotropy at ``r = 0``, ``gamma_inf``\r\n    is the anisotropy at ``r = inf`` and ``r_a`` is the anisotropy\r\n    transition radius, with ``alpha`` controlling the sharpness of the\r\n    transition. In the special case ``gamma_0 = 0, gamma_inf = 1, alpha = 2``\r\n    the anisotropy variation reduces to the form by Osipkov & Merritt, but\r\n    the extra parameters allow for much more realistic anisotropy profiles.\r\ngoodbins: array_like with shape (4, p), optional\r\n    Boolean vector of the same shape as ``data`` with values ``True``\r\n    for the bins which have to be included in the fit (if requested) and\r\n    ``chi^2`` calculation (Default: fit all bins).\r\ninterp: bool, optional\r\n    If ``interp=False`` no interpolation is performed and the model is\r\n    computed at every set of input (R, z) coordinates.\r\n    If ``interp=True`` (default), the model is interpolated if the number\r\n    of requested input (R, z) coordinates is larger than ``nang*nrad``.\r\nml: float, optional\r\n    Mass-to-light ratio M/L. If ``ml=None`` (default) the M/L is fitted to\r\n    the data and the best-fitting value is returned in output.\r\n    The ``mbh`` is also scaled and becomes ``mbh*ml``.\r\n    If ``ml=1`` no scaling is applied to the model.\r\nnang: int, optional\r\n    The number of linearly-spaced intervals in the eccentric anomaly at\r\n    which the model is evaluated before interpolation (default: ``nang=10``).\r\nnodots: bool, optional\r\n    Set to ``True`` to hide the dots indicating the centers of the bins in\r\n    the two-dimensional map (default ``False``).\r\nnrad: int, optional\r\n    The number of logarithmically spaced radial positions at which the\r\n    model is evaluated before interpolation. One may want to increase this\r\n    value if the model has to be evaluated over many orders of magnitude in\r\n    radius (default: ``nrad=20``).\r\nplot: bool, optional\r\n    If ``plot=True`` (default) and ``data is not None``, produce a plot of\r\n    the data-model comparison at the end of the calculation.\r\nproj_cyl: bool, optional\r\n    If ``align='sph'`` and ``proj_cyl=True``, the function projects the\r\n    spherically-aligned moments to cylindrical coordinates and returns the\r\n    ``[sig2R, sig2z, sig2phi, v2phi]`` components as in the case\r\n    ``align='cyl'``. This is useful for a direct comparison of results with\r\n    either the spherical or cylindrical alignment, as it allows one to fit\r\n    the same data with both modelling assumptions.\r\nquiet: bool, optional\r\n    If ``quiet=False`` (default), print the best-fitting M/L and chi2 at\r\n    the end for the calculation.\r\nrbh: float, optional\r\n    This scalar gives the sigma in pc of the Gaussian representing the\r\n    central black hole of mass ``mbh`` [See Section 3.1.2 of\r\n    `Cappellari (2008)`_]. The gravitational potential is indistinguishable\r\n    from a point source for ``radii > 2*rbh``, so the default ``rbh=1`` pc\r\n    is appropriate for observations taken with current telescopes.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nReturned as attributes of the ``jam_axi_intr`` class.\r\n\r\n.chi2: float\r\n    Reduced chi^2 (chi^2/DOF) describing the quality of the fit::\r\n\r\n        d = (data/errors)[goodbins]\r\n        m = (model/errors)[goodbins]\r\n        chi2 = ((d - m)**2).sum()/goodbins.sum()\r\n\r\n.flux: array_like  with shape (p,)\r\n    Vector with the MGE luminosity density at each ``(R, z)`` location in\r\n    ``Lsun/pc^3``, used to plot the isophotes on the model results.\r\n.ml: float\r\n    Best fitting M/L. This value is fitted while ignoring ``sigphi`` and it\r\n    is strictly independent of the adopted tangential anisotropy ``gamma``.\r\n.model: array_like with shape (4, p)\r\n    - Contains ``[sig2R, sig2z, sig2phi, v2phi]`` with ``align='cyl'``\r\n\r\n    - Contains ``[sig2r, sig2th, sig2phi, v2phi]`` with ``align='sph'``\r\n\r\n    where the above quantities are defined as follows:\r\n\r\n    sig2R (sig2r): array_like with shape (p,)\r\n        squared intrinsic dispersion in ``(km/s)^2`` along the R (r)\r\n        direction at each ``(R, z)`` location.\r\n\r\n    sig2z (sig2th): array_like with shape (p,)\r\n        squared intrinsic dispersion in ``(km/s)^2`` along the z (th)\r\n        direction at each ``(R, z)`` location.\r\n\r\n    sig2phi: array_like with shape (p,)\r\n        squared intrinsic dispersion in ``(km/s)^2``  along the\r\n        tangential ``phi`` direction at each ``(R, z)`` location.\r\n\r\n    v2phi: array_like with shape (p,)\r\n        the second velocity moment in ``(km/s)^2`` along the\r\n        tangential ``phi`` direction at each ``(R, z)`` location.\r\n\r\n    The mean velocity along the tangential direction can be computed as\r\n    ``vphi = np.sqrt(v2phi - sig2phi)``\r\n\r\n    NOTE: I return squared velocities instead of taking the square root,\r\n    to allow for negative values (unphysical solutions).\r\n\r\n###########################################################################\r\n\r\n\r\nLicense\r\n=======\r\n\r\nOther/Proprietary License\r\n\r\nCopyright (c) 2003-2023 Michele Cappellari\r\n\r\nThis software is provided as is without any warranty whatsoever.\r\nPermission to use, for non-commercial purposes is granted.\r\nPermission to modify for personal or internal use is granted,\r\nprovided this copyright and disclaimer are included in all \r\ncopies of the software. All other rights are reserved.\r\nIn particular, redistribution of the code is not allowed.\r\n\r\nChangelog\r\n=========\r\n\r\nV7.0.10: MC, Oxford, 17 January 2023\r\n    - Introduced an analytic radial variation of the anisotropy ``beta``\r\n      and ``gamma`` using a flexible logistic function of logarithmic radius\r\n      ``beta(r) = beta_0 + (beta_inf - beta_0)/[1 + (r_a/r)^alpha]``.\r\n      This function specifies the inner/outer anisotropy ``beta_0`` and\r\n      ``beta_inf``, the anisotropy radius ``r_a`` and the sharpness ``alpha``\r\n      of the transition. This new function is an alternative to assigning\r\n      different anisotropies to different Gaussians. All procedures\r\n      ``jam_axi_proj``, ``jam_axi_intr``, ``jam_sph_proj`` and ``jam_sph_intr``,\r\n      with both ``align='sph'`` and ``align='cyl'``, were modified, documented\r\n      and extensively tested to support the variable-anisotropy function.\r\n    - ``jam_sph_proj_example``: adapted to show the usage of the new analytic\r\n      radial anisotropy variation.\r\n    - ``jam_axi_intr``: Fixed program stop in the plotting function.\r\n    - ``jam_axi_proj``: Raise an error when ``rbh`` is too small.\r\n    - ``jam_axi_proj``: Raise an error if the user includes the singularity\r\n      ``(x,y) = (0,0)`` in the input coordinates without PSF convolution.\r\n    - ``quad1d``: new defaults ``singular=0`` and ``epsabs=0`` like ``quad2d``.\r\n\r\nV6.4.0: MC, Oxford, 3 October 2022\r\n    - ``jam_sph_proj``: Created this new function by renaming the procedure\r\n      ``legacy.jam_sph_rms`` and changing its interface to be consistent with\r\n      the axisymmetric version.\r\n    - ``jam_sph_proj``: Included special isotropic formula for testing.\r\n    - ``jam_sph_proj``: Included Osipkov-Merritt anisotropy for testing.\r\n    - ``jam_sph_proj``: Made quadrature limits insensitive to scaling.\r\n    - ``jam_sph_proj``: Simplified integrand with formulas of Cappellari (2020)\r\n      and using recurrence relations to reduce calls to special functions.\r\n    - ``jam_sph_proj``: More efficient TANH transformation of the integration\r\n      variable following Cappellari (2020).\r\n    - ``jam_sph_intr``: New function to compute the intrinsic moments in\r\n      spherical symmetry.\r\n    - ``jam_axi_proj``: Removed fixed minimum radius limit in pc for the\r\n      interpolation without PSF convolution. This avoids the risk of artificial \r\n      truncation when using small arbitrary spatial coordinates for testing.\r\n    - ``jam_axi_proj``: Tenfold increase of LOS evaluations to ``nlos=1500``.\r\n    - New procedure ``examples.jam_dark_halo_bayes_example.py``.\r\n    - Renamed ``quadva`` as ``quad1d`` with modified interface and new\r\n      ``singular`` keyword to skip transforming the integration variable.\r\n\r\nV6.3.3: MC, Oxford, 7 July 2021\r\n    - ``jam_axi_proj``: Clarified meaning of ``interp`` keyword in dosctring.     \r\n      Thanks to Kai Zhu (nao.cas.cn) for the feedback.\r\n    - ``jam_axi_proj``: print \"No PSF/pixel convolution\" when ``interp == False``.\r\n\r\nV6.3.2: MC, Oxford, 28 April 2021\r\n    - Use the new ``jam_axi_proj`` instead of ``legacy`` software in the examples.\r\n    - Removed redundant ``legacy`` examples. \r\n\r\nV6.3.1: MC, Oxford, 11 November 2020\r\n    - ``jam_axi_proj``: New keyword ``analytic_los`` to chose between numeric\r\n      or analytic line-of-sight integral for the second velocity moment,\r\n      when ``align='cyl'``.\r\n    - ``jam_axi_proj``: Increased default value of ``nlos`` keyword.\r\n    - ``jam_axi_proj``: Raise an error if ``rbh`` is too small.\r\n    - ``jam_axi_proj`` and ``jam_axi_intr``: Removed ``**kwargs`` argument and\r\n      included new ``nodots`` keyword passed to ``plot_velfield``.\r\n\r\nV6.2.1: MC, Oxford, 15 September 2020\r\n    - ``jam_axi_proj``: Fixed program stop when ``data == ml == None``.\r\n      Thank to Bitao Wang (pku.edu.cn) for reporting.\r\n\r\nV6.2.0: MC, Oxford, 17 August 2020\r\n    - ``jam_axi_proj``: Avoid possible division by zero after convolution,\r\n      when the tracer MGE is much smaller than the field of view.\r\n    - ``jam_axi_proj``: Fully broadcasted ``vmom_proj``.\r\n    - ``jam_axi_proj``: Removed minimum-radius clipping in ``vmom_proj``.\r\n    - ``jam_axi_proj``: New ``interp`` keyword to force no-interpolation\r\n      when using the full first and second velocity moments simultaneously.\r\n    - Made ``jam.plot()`` callable after ``jam_axi_proj`` or ``jam_axi_intr``.\r\n    - New axisymmetric analytic vs MGE test in ``mge_vcirc_example``.\r\n    - ``mge_vcirc``: Upgraded formalism.\r\n    - Fixed Numpy 1.9 ``VisibleDeprecationWarning``.\r\n    - Updated documentation.\r\n\r\nV6.1.5: MC, Oxford, 23 July 2020\r\n    - Fixed program stop in first velocity moment without input data,\r\n      introduced in V6.1.2. Thanks to Bitao Wang (pku.edu.cn) for reporting.\r\n    - Implemented the ``kappa`` input keyword as scalar.\r\n\r\nV6.1.4: MC, Oxford, 16 July 2020\r\n    - Added ``kappa`` to the returned parameters of ``jam_axi_proj``.\r\n    - Compute both velocity and Vrms in ``jam_axi_proj_example``.\r\n\r\nV6.1.3: MC, Oxford, 13 July 2020\r\n    - Fixed program stop in ``legacy.jam_axi_vel`` due to a variable name typo \r\n      introduced in V6.1.2.\r\n\r\nV6.1.2: MC, Oxford, 20 June 2020\r\n    - ``jam_axi_proj``: Fixed input ``ml`` being ignored. Thanks to Sabine\r\n      Thater (univie.ac.at) and Takafumi Tsukui (grad.nao.ac.jp) for reporting.\r\n    - ``jam_axi_rms``: I reduced the interpolation error before the PSF\r\n      convolution for all the rotines in the ``legacy`` sub-folder, as already\r\n      implemented in the new ``jam_axi_proj``. Thanks to Takafumi Tsukui\r\n      (grad.nao.ac.jp) for reporting differences.\r\n    - ``jam_axi_intr``: Request input ``data = [sigR, sigz, sigphi, vrms_phi]``\r\n      instead of ``data = [sigR, sigz, sigphi, vphi]``.\r\n    - ``jam_axi_intr``: exclude ``sigphi`` from ``ml`` fitting. These two\r\n      changes make the fitted ``ml`` strictly independent of the adopted\r\n      tangential anisotropy ``gamma``.\r\n\r\nV6.0.1: MC, Oxford, 23 April 2020\r\n    - Fixed ``model`` output when fitting ``ml``.\r\n      Thanks to Selina Nitschai (mpia-hd.mpg.de) for reporting.\r\n\r\nV6.0.0: MC, Oxford, 22 April 2020\r\n    - Major changes to the whole ``jampy`` package: from this version\r\n      I include the new spherically-aligned solution of the Jeans \r\n      equations from Cappellari (2020, MNRAS).\r\n    - Two new functions ``jam_axi_intr`` and ``jam_axi_proj``\r\n      now provide either the intrinsic or the projected moments,\r\n      respectively, for both the spherically-aligned and \r\n      cylindrically-aligned JAM solutions.\r\n    - I moved the previous procedures ``jam_axi_rms``, ``jam_axi_vel``\r\n      and ``jam_sph_rms`` to the ``jampy.legacy`` folder.  \r\n\r\nV5.0.23: MC, Oxford, 31 October 2019\r\n    - Use analytic mge_surf in convolution.\r\n\r\nV5.0.22: MC, Oxford, 21 March 2019\r\n    - Reformatted documentation of all procedures.\r\n\r\nV5.0.21: MC, Oxford, 14 February 2019\r\n    - Significant speedup of ``mge_vcirc``.\r\n    - Formatted documentation.\r\n    - Created package-wide CHANGELOG: before this version, the\r\n      CHANGELOG file only refers to the procedure ``jam_axi_rms``.\r\n\r\nV5.0.16: MC, Oxford, 27 September 2018\r\n    - Fixed clock DeprecationWarning in Python 3.7.\r\n\r\nV5.0.15: MC, Oxford, 12 May 2018\r\n    - Dropped Python 2.7 support.\r\n\r\nV5.0.14: MC, Oxford, 17 April 2018\r\n    - Fixed MatplotlibDeprecationWarning in Matplotlib 2.2.\r\n    - Changed imports for jam as a package.\r\n    - Removed example.\r\n\r\nV5.0.13: MC, Oxford, 7 March 2018\r\n    - Check that PSF is normalized.\r\n\r\nV5.0.12: MC, Oxford, 22 January 2018\r\n    - Print a message when no PSF convolution was performed.\r\n    - Broadcast kernel and MGE convolution loops.\r\n    - Fixed missing tensor in assertion test.\r\n\r\nV5.0.11: MC, Oxford, 10 September 2017\r\n    - Make default ``step`` depend on ``sigmapsf`` regardless of ``pixsize``.\r\n\r\nV5.0.10: MC, Oxford, 10 August 2017\r\n    - Raise an error if goodbins is all False.\r\n\r\nV5.0.9: MC, Oxford, 17 March 2017\r\n    - Included ``flux_obs`` keyword. Updated documentation.\r\n    - Fixed DeprecationWarning in Numpy 1.12.\r\n\r\nV5.0.8: MC, Oxford, 17 February 2017\r\n    - Use odd kernel size for convolution.\r\n    - Fixed corner case with coordinates falling outside the \r\n      interpolation region, due to finite machine precision.\r\n\r\nV5.0.7: MC, Oxford, 23 February 2016\r\n    - Scale rmsModel by the input M/L also when rms is not given.\r\n      Thanks to Alex Grainger (Oxford) for pointing out the inconsistency.\r\n    - Pass ``**kwargs`` for plotting.\r\n\r\nV5.0.6: MC, Oxford, 18 September 2015\r\n    - Plot bad bins on the data.\r\n\r\nV5.0.5: MC, Oxford, 23 May 2015\r\n    - Changed meaning of goodbins to be a boolean vector.\r\n\r\nV5.0.4: MC, Sydney, 5 February 2015\r\n    - Introduced further checks on matching input sizes.\r\n\r\nV5.0.3: MC, Oxford, 31 October 2014\r\n    - Modified final plot layout.\r\n\r\nV5.0.2: MC, Oxford, 25 May 2014\r\n    - Support both Python 2.7 and Python 3.\r\n\r\nV5.0.1: MC, Oxford, 24 February 2014\r\n    - Plot bi-symmetrized V_rms as in IDL version.\r\n\r\nV5.0.0: MC, Paranal, 11 November 2013\r\n    - Translated from IDL into Python.\r\n\r\nV4.1.5: MC, Paranal, 8 November 2013\r\n    - Use renamed CAP_* routines to avoid potential naming conflicts.\r\n\r\nV4.1.4: MC, Oxford, 12 February 2013\r\n    - Include _EXTRA and RANGE keywords for plotting.\r\n\r\nV4.1.3: MC, Oxford, 1 February 2013\r\n    - Output FLUX in Lsun/pc^2.\r\n\r\nV4.1.2: MC, Oxford, 28 May 2012\r\n    - Updated documentation.\r\n\r\nV4.1.1: MC, Oxford, 8 December 2011\r\n    - Only calculates FLUX if required.\r\n\r\nV4.1.0: MC, Oxford 19 October 2010\r\n    - Included TENSOR keyword to calculate any of the six components of\r\n      the symmetric proper motion dispersion tensor (as in note 5 of the paper).\r\n\r\nV4.0.9: MC, Oxford, 15 September 2010\r\n    - Plot and output with FLUX keyword the PSF-convolved MGE surface brightness.\r\n\r\nV4.0.8: MC, Oxford, 09 August 2010\r\n    - Use linear instead of smooth interpolation. After feedback from Eric Emsellem.\r\n\r\nV4.0.7: MC, Oxford, 01 March 2010\r\n    - Forces q_lum && q_pot < 1.\r\n\r\nV4.0.6: MC, Oxford, 08 February 2010\r\n    - The routine TEST_JAM_AXISYMMETRIC_RMS with the usage example now adopts a\r\n      more realistic input kinematics.\r\n    - Updated documentation.\r\n\r\nV4.0.5: MC, Oxford, 6 July 2009\r\n    - Skip unnecessary interpolation when computing a few points without PSF\r\n      convolution. After feedback from Eric Emsellem.\r\n\r\nV4.0.4: MC, Oxford, 29 May 2009\r\n    - Compute FLUX even when not plotting.\r\n\r\nV4.0.3: MC, Oxford 4 April 2009\r\n    - Added keyword RBH.\r\n\r\nV4.0.2: MC, Oxford, 21 November 2008\r\n    - Added keywords NRAD and NANG. Thanks to Michael Williams for\r\n      reporting possible problems with too coarse interpolation.\r\n\r\nV4.0.1: MC, Windhoek, 29 September 2008\r\n    - Bug fix: when ERMS was not given, the default was not properly set.\r\n      Included keyword STEP. The keyword FLUX is now only used for output:\r\n      the surface brightness for plotting is computed from the MGE model.\r\n\r\nV4.0.0: MC, Oxford, 11 September 2008\r\n    - Implemented PSF convolution using interpolation on a polar grid.\r\n      Dramatic speed-up of calculation. Further documentation.\r\n\r\nV3.2.0: MC, Oxford, 14 August 2008\r\n    - Updated documentation.\r\n\r\nV3.1.3: MC, Oxford, 12 August 2008\r\n    - First released version.\r\n\r\nV2.0.0: MC, Oxford, 20 September 2007\r\n    - Introduced new solution of the MGE Jeans equations with constant\r\n      anisotropy sig_R = b*sig_z.\r\n\r\nV1.0.0: Michele Cappellari, Vicenza, 19 November 2003\r\n    - Written and tested\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://purl.org/cappellari/software",
    "keywords": "",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jampy",
    "package_url": "https://pypi.org/project/jampy/",
    "platform": null,
    "project_url": "https://pypi.org/project/jampy/",
    "project_urls": {
      "Homepage": "https://purl.org/cappellari/software"
    },
    "release_url": "https://pypi.org/project/jampy/7.0.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "JamPy: Jeans Anisotropic Models for Galactic Dynamics",
    "version": "7.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16458440,
  "releases": {
    "5.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f09ca2eefd880183d437644354a83c6d440e744cdfe01886a7ea363e3efbf26",
          "md5": "c6b6a625726d15695cbe7cbee7c036d4",
          "sha256": "b413a97abd059d26d35dc5baa8513daf103f98a26a92c3a366508a815edc1042"
        },
        "downloads": -1,
        "filename": "jampy-5.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c6b6a625726d15695cbe7cbee7c036d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47118,
        "upload_time": "2018-05-21T09:22:14",
        "upload_time_iso_8601": "2018-05-21T09:22:14.710997Z",
        "url": "https://files.pythonhosted.org/packages/3f/09/ca2eefd880183d437644354a83c6d440e744cdfe01886a7ea363e3efbf26/jampy-5.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77dbf8c6da6d8875cd0469e11db483660bf963b7dd4ed24ce0f38e820c76af6a",
          "md5": "ee01ef146b627edbdace5ea119de68be",
          "sha256": "b0e934d3b1f1ebd56adc677c4caf105339e7ea22d4dadc3237c96496c8d6654e"
        },
        "downloads": -1,
        "filename": "jampy-5.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "ee01ef146b627edbdace5ea119de68be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56820,
        "upload_time": "2019-02-14T18:28:43",
        "upload_time_iso_8601": "2019-02-14T18:28:43.047369Z",
        "url": "https://files.pythonhosted.org/packages/77/db/f8c6da6d8875cd0469e11db483660bf963b7dd4ed24ce0f38e820c76af6a/jampy-5.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1ee83b3c129dc5a749d7a7e2c70a6946a45c6dccb2387abcdb84ccc6bcaf073",
          "md5": "1b3ae5a2f356c726d32c8cd4006d685d",
          "sha256": "8c98dec622532511e07c808b78d11d6fbbd356656f07689cdbf4582daae04592"
        },
        "downloads": -1,
        "filename": "jampy-6.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b3ae5a2f356c726d32c8cd4006d685d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83179,
        "upload_time": "2020-04-22T17:50:43",
        "upload_time_iso_8601": "2020-04-22T17:50:43.706446Z",
        "url": "https://files.pythonhosted.org/packages/d1/ee/83b3c129dc5a749d7a7e2c70a6946a45c6dccb2387abcdb84ccc6bcaf073/jampy-6.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6da41a82be6224af3b816424d706799739980e6802c59afb22dea9323713f5d9",
          "md5": "6c881c1b229b2cbf70a503deff5257fa",
          "sha256": "778c56cec23ca1b68a877691cc0ea008441c152901e3e9fdb4ee9f6d1f0b7a93"
        },
        "downloads": -1,
        "filename": "jampy-6.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c881c1b229b2cbf70a503deff5257fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82735,
        "upload_time": "2020-04-23T18:29:07",
        "upload_time_iso_8601": "2020-04-23T18:29:07.142100Z",
        "url": "https://files.pythonhosted.org/packages/6d/a4/1a82be6224af3b816424d706799739980e6802c59afb22dea9323713f5d9/jampy-6.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb41751b9af25ea12e2109514c9d0940e6c7f17f8df6bc0da2299e64ccde25e7",
          "md5": "7536b154c9265669dcbd63c476afa57a",
          "sha256": "d0697cea002122d5bc772106973c6d3c4225374b61da157d8b645c36565d23f3"
        },
        "downloads": -1,
        "filename": "jampy-6.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7536b154c9265669dcbd63c476afa57a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86747,
        "upload_time": "2020-06-20T08:01:35",
        "upload_time_iso_8601": "2020-06-20T08:01:35.890777Z",
        "url": "https://files.pythonhosted.org/packages/eb/41/751b9af25ea12e2109514c9d0940e6c7f17f8df6bc0da2299e64ccde25e7/jampy-6.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bd0bc0ccab251fdc1b620a83268933e3b4435d3e79c66b5f3a464d89825e7fe",
          "md5": "c8f55d7cb0bd7a85a7fc7281f2740aa6",
          "sha256": "4b3cd8fb5904be65f68f784246fe23e01512aa88d095869d9614df3deaa276c8"
        },
        "downloads": -1,
        "filename": "jampy-6.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c8f55d7cb0bd7a85a7fc7281f2740aa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86851,
        "upload_time": "2020-07-13T17:46:51",
        "upload_time_iso_8601": "2020-07-13T17:46:51.367019Z",
        "url": "https://files.pythonhosted.org/packages/4b/d0/bc0ccab251fdc1b620a83268933e3b4435d3e79c66b5f3a464d89825e7fe/jampy-6.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7965e470ec0c5adfc96f5810a77f177397356791c6b1d74ddcd0093b94538932",
          "md5": "14afeafe7516272b7aab3ee87cd2ecd1",
          "sha256": "1544e21d4db839afbfe5ab7a212645fdabfe3c6301f75200d1965b6bf6636e13"
        },
        "downloads": -1,
        "filename": "jampy-6.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "14afeafe7516272b7aab3ee87cd2ecd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87050,
        "upload_time": "2020-07-16T14:59:37",
        "upload_time_iso_8601": "2020-07-16T14:59:37.805372Z",
        "url": "https://files.pythonhosted.org/packages/79/65/e470ec0c5adfc96f5810a77f177397356791c6b1d74ddcd0093b94538932/jampy-6.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aebe62a4a08ca351a18ef911f6948a918c5b161bf0ffa05576170844b171bb84",
          "md5": "2e55580ec65f4ea9e5ebff2785b9f9a5",
          "sha256": "9261121184b86466b29a15c5d48883f4a7f5e4f7629637d7f5d3f3fcff4db841"
        },
        "downloads": -1,
        "filename": "jampy-6.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2e55580ec65f4ea9e5ebff2785b9f9a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88059,
        "upload_time": "2020-07-23T09:58:24",
        "upload_time_iso_8601": "2020-07-23T09:58:24.798883Z",
        "url": "https://files.pythonhosted.org/packages/ae/be/62a4a08ca351a18ef911f6948a918c5b161bf0ffa05576170844b171bb84/jampy-6.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71acc465e113e6c711d0514044115576c59ce7f3bb40b79c8330390b8783d958",
          "md5": "d11dc60fa5a1cdefd17ab4b0a059597e",
          "sha256": "c5930dddb04c8beca75660a977d59d5d960a30ed032bb4f486f3b2bad27483fb"
        },
        "downloads": -1,
        "filename": "jampy-6.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d11dc60fa5a1cdefd17ab4b0a059597e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90519,
        "upload_time": "2020-08-17T17:22:22",
        "upload_time_iso_8601": "2020-08-17T17:22:22.773637Z",
        "url": "https://files.pythonhosted.org/packages/71/ac/c465e113e6c711d0514044115576c59ce7f3bb40b79c8330390b8783d958/jampy-6.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f783c48f820ac39c881cf482e505b01bc6196d85c48215c85acd322d920c37c0",
          "md5": "f8da81759dd88c32b4d49fa9bf6e4bd2",
          "sha256": "ca9279b65e77a032234ce6102df92ebdbbb59b01a8819d93b7a06a65650ef66e"
        },
        "downloads": -1,
        "filename": "jampy-6.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f8da81759dd88c32b4d49fa9bf6e4bd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90612,
        "upload_time": "2020-09-15T13:17:45",
        "upload_time_iso_8601": "2020-09-15T13:17:45.453656Z",
        "url": "https://files.pythonhosted.org/packages/f7/83/c48f820ac39c881cf482e505b01bc6196d85c48215c85acd322d920c37c0/jampy-6.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bb899550eb10eba964fedced6b731981b4ed9d7ff33609811fd3d659d3f7804",
          "md5": "d6fd1b4f4b1bfe6369e60f7cbf6c48df",
          "sha256": "5cb5a474f30a941e75fd9326a498d4260009ad6cb1cd701ebbfc790d59580954"
        },
        "downloads": -1,
        "filename": "jampy-6.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6fd1b4f4b1bfe6369e60f7cbf6c48df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92592,
        "upload_time": "2020-11-11T19:12:15",
        "upload_time_iso_8601": "2020-11-11T19:12:15.594298Z",
        "url": "https://files.pythonhosted.org/packages/6b/b8/99550eb10eba964fedced6b731981b4ed9d7ff33609811fd3d659d3f7804/jampy-6.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eca053b15397d5125e36722916df5b8c82f64176a0c60b04d8a3b4a76f1cfa4a",
          "md5": "ae237a06d6776e8c482d2094ea61c137",
          "sha256": "80eb66647980c1cd6ed3858424c762f7a8cf458f35b283a8db5464beaadb20a4"
        },
        "downloads": -1,
        "filename": "jampy-6.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ae237a06d6776e8c482d2094ea61c137",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92009,
        "upload_time": "2021-04-28T13:41:13",
        "upload_time_iso_8601": "2021-04-28T13:41:13.028666Z",
        "url": "https://files.pythonhosted.org/packages/ec/a0/53b15397d5125e36722916df5b8c82f64176a0c60b04d8a3b4a76f1cfa4a/jampy-6.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d57c5e4488306625934b7be03c6b5bdae7aedab73cf09c7ffa40957c2ee6037",
          "md5": "c93dc442702c832b5803f6f266a9fac2",
          "sha256": "bba0dee5dc7c784228c439424d618192a6bd5d9cb3ea21f5f19c9302dfa3129b"
        },
        "downloads": -1,
        "filename": "jampy-6.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c93dc442702c832b5803f6f266a9fac2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 94085,
        "upload_time": "2021-07-07T10:56:26",
        "upload_time_iso_8601": "2021-07-07T10:56:26.487306Z",
        "url": "https://files.pythonhosted.org/packages/0d/57/c5e4488306625934b7be03c6b5bdae7aedab73cf09c7ffa40957c2ee6037/jampy-6.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cb0f500c6956bafd6fa736fd241c95b6ce53870574d1755c7558de30dacd74f",
          "md5": "72949a6cc969510e3f7463fa8cf58748",
          "sha256": "1df600c4e96b45abc393f48794f7cb118c0759e226b283d0ee831c29cf01af2e"
        },
        "downloads": -1,
        "filename": "jampy-6.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "72949a6cc969510e3f7463fa8cf58748",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 101002,
        "upload_time": "2022-10-03T14:00:24",
        "upload_time_iso_8601": "2022-10-03T14:00:24.299336Z",
        "url": "https://files.pythonhosted.org/packages/9c/b0/f500c6956bafd6fa736fd241c95b6ce53870574d1755c7558de30dacd74f/jampy-6.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5565488b769de648fa1e86d0a30f35bd7cae9a59ee2ffc7a300cf849b6dc52a",
          "md5": "ce3c5725fd1dd37261e004cb53b66513",
          "sha256": "f4c8602522bc2fd634a20f30112b58b5216ac194cdbdac0843371f43b418f42c"
        },
        "downloads": -1,
        "filename": "jampy-7.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "ce3c5725fd1dd37261e004cb53b66513",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 106367,
        "upload_time": "2023-01-17T13:55:50",
        "upload_time_iso_8601": "2023-01-17T13:55:50.298886Z",
        "url": "https://files.pythonhosted.org/packages/e5/56/5488b769de648fa1e86d0a30f35bd7cae9a59ee2ffc7a300cf849b6dc52a/jampy-7.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5565488b769de648fa1e86d0a30f35bd7cae9a59ee2ffc7a300cf849b6dc52a",
        "md5": "ce3c5725fd1dd37261e004cb53b66513",
        "sha256": "f4c8602522bc2fd634a20f30112b58b5216ac194cdbdac0843371f43b418f42c"
      },
      "downloads": -1,
      "filename": "jampy-7.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "ce3c5725fd1dd37261e004cb53b66513",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 106367,
      "upload_time": "2023-01-17T13:55:50",
      "upload_time_iso_8601": "2023-01-17T13:55:50.298886Z",
      "url": "https://files.pythonhosted.org/packages/e5/56/5488b769de648fa1e86d0a30f35bd7cae9a59ee2ffc7a300cf849b6dc52a/jampy-7.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}