{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Binance Public API Connector Python\n[![PyPI version](https://img.shields.io/pypi/v/binance-connector.svg)](https://pypi.python.org/pypi/binance-connector.svg)\n[![Python version](https://img.shields.io/pypi/pyversions/binance-connector)](https://www.python.org/downloads/)\n[![Documentation](https://img.shields.io/badge/docs-latest-blue)](https://binance-connector.readthedocs.io/en/stable/)\n[![Code Style](https://img.shields.io/badge/code_style-black-black)](https://black.readthedocs.io/en/stable/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis is a lightweight library that works as a connector to [Binance public API](https://github.com/binance/binance-spot-api-docs)\n\n- Supported APIs:\n    - `/api/*`\n    - `/sapi/*`\n    - Spot Websocket Market Stream\n    - Spot User Data Stream\n- Inclusion of test cases and examples\n- Customizable base URL, request timeout and HTTP proxy\n- Response metadata can be displayed\n\n## Installation\n\n```bash\npip install binance-connector\n```\n\n## Documentation\n\n[https://binance-connector.readthedocs.io](https://binance-connector.readthedocs.io)\n\n## RESTful APIs\n\nUsage examples:\n```python\nfrom binance.spot import Spot \n\nclient = Spot()\nprint(client.time())\n\nclient = Spot(key='<api_key>', secret='<api_secret>')\n\n# Get account information\nprint(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 9500\n}\n\nresponse = client.new_order(**params)\nprint(response)\n```\nPlease find `examples` folder to check for more endpoints.\n\n### Testnet\n\n[Spot Testnet](https://testnet.binance.vision/) is available, it can be used to test `/api/*` endpoints.\n\n- `/sapi/*` endpoints are not available.\n- No UI.\n- Steps to setup testnet API key.  [https://dev.binance.vision/t/99](https://dev.binance.vision/t/99)\n\nTo use testnet:\n```python\nfrom binance.spot import Spot as Client\n\nclient = Client(base_url='https://testnet.binance.vision')\nprint(client.time())\n```\n\n### Base URL\n\nIf `base_url` is not provided, it defaults to `api.binance.com`.<br/>\nIt's recommended to pass in the `base_url` parameter, even in production as Binance provides alternative URLs\nin case of performance issues:\n- `https://api1.binance.com`\n- `https://api2.binance.com`\n- `https://api3.binance.com`\n\n### Optional parameters\n\nPEP8 suggests _lowercase with words separated by underscores_, but for this connector,\nthe methods' optional parameters should follow their exact naming as in the API documentation.\n\n```python\n# Recognised parameter name\nresponse = client.cancel_oco_order('BTCUSDT', orderListId=1)\n\n# Unrecognised parameter name\nresponse = client.cancel_oco_order('BTCUSDT', order_list_id=1)\n```\n\n### RecvWindow parameter\n\nAdditional parameter `recvWindow` is available for endpoints requiring signature.<br/>\nIt defaults to `5000` (milliseconds) and can be any value lower than `60000`(milliseconds).\nAnything beyond the limit will result in an error response from Binance server.\n\n```python\nfrom binance.spot import Spot as Client\n\nclient = Client(key, secret)\nresponse = client.get_order('BTCUSDT', orderId=11, recvWindow=10000)\n```\n\n### Timeout\n\n`timeout` is available to be assigned with the number of seconds you find most appropriate to wait for a server response.<br/>\nPlease remember the value as it won't be shown in error message _no bytes have been received on the underlying socket for timeout seconds_.<br/>\nBy default, `timeout` is None. Hence, requests do not time out.\n\n```python\nfrom binance.spot import Spot as Client\n\nclient= Client(timeout=1)\n```\n\n### Proxy\n\nProxy is supported.\n\n```python\nfrom binance.spot import Spot as Client\n\nproxies = { 'https': 'http://1.2.3.4:8080' }\n\nclient= Client(proxies=proxies)\n```\n\n\n### Response Metadata\n\nThe Binance API server provides weight usages in the headers of each response.\nYou can display them by initializing the client with `show_limit_usage=True`:\n\n```python\nfrom binance.spot import Spot as Client\n\nclient = Client(show_limit_usage=True)\nprint(client.time())\n```\nreturns:\n\n```python\n{'data': {'serverTime': 1587990847650}, 'limit_usage': {'x-mbx-used-weight': '31', 'x-mbx-used-weight-1m': '31'}}\n```\nYou can also display full response metadata to help in debugging:\n\n```python\nclient = Client(show_header=True)\nprint(client.time())\n```\n\nreturns:\n\n```python\n{'data': {'serverTime': 1587990847650}, 'header': {'Context-Type': 'application/json;charset=utf-8', ...}}\n```\n\nIf `ClientError` is received, it'll display full response meta information.\n\n### Display logs\n\nSetting the log level to `DEBUG` will log the request URL, payload and response text.\n\n### Error\n\nThere are 2 types of error returned from the library:\n- `binance.error.ClientError`\n    - This is thrown when server returns `4XX`, it's an issue from client side.\n    - It has 4 properties:\n        - `status_code` - HTTP status code\n        - `error_code` - Server's error code, e.g. `-1102`\n        - `error_message` - Server's error message, e.g. `Unknown order sent.`\n        - `header` - Full response header. \n- `binance.error.ServerError`\n    - This is thrown when server returns `5XX`, it's an issue from server side.\n\n## Websocket\n\n```python\nfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClient\n\ndef message_handler(message):\n    print(message)\n\nws_client = WebsocketClient()\nws_client.start()\n\nws_client.mini_ticker(\n    symbol='bnbusdt',\n    id=1,\n    callback=message_handler,\n)\n\n# Combine selected streams\nws_client.instant_subscribe(\n    stream=['bnbusdt@bookTicker', 'ethusdt@bookTicker'],\n    callback=message_handler,\n)\n\nws_client.stop()\n```\nMore websocket examples are available in the `examples` folder\n\n### Heartbeat\n\nOnce connected, the websocket server sends a ping frame every 3 minutes and requires a response pong frame back within\na 10 minutes period. This package handles the pong responses automatically.\n\n### Testnet\n\n```python\nfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClient\n\nws_client = WebsocketClient(stream_url='wss://testnet.binance.vision')\n```\n\n## Test Case\n\n```python\n# In case packages are not installed yet\npip install -r requirements/requirements-test.txt\n\npytest\n```\n\n## Limitation\n\nFutures and Vanilla Options APIs are not supported:\n  - `/fapi/*`\n  - `/dapi/*`\n  - `/vapi/*`\n  -  Associated Websocket Market and User Data Streams\n\n## Contributing\n\nContributions are welcome.<br/>\nIf you've found a bug within this project, please open an issue to discuss what you would like to change.<br/>\nIf it's an issue with the API, please open a topic at [Binance Developer Community](https://dev.binance.vision)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aisling11/connector",
    "keywords": "Binance,Public API",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aisling-connector",
    "package_url": "https://pypi.org/project/aisling-connector/",
    "platform": "",
    "project_url": "https://pypi.org/project/aisling-connector/",
    "project_urls": {
      "Homepage": "https://github.com/aisling11/connector"
    },
    "release_url": "https://pypi.org/project/aisling-connector/2/",
    "requires_dist": [
      "autobahn (>=21.2.1)",
      "Twisted (>=21.2.0)",
      "requests (>=2.25.1)",
      "pyOpenSSL (>=19.0.0)",
      "service-identity (>=21.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "This is a lightweight library that works as a connector to Binance public API.",
    "version": "2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13011771,
  "releases": {
    "1.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0552c1ae8af889e57e4fc93aa4b64f515dfc74a22991de4445a3f8faba2f3ac",
          "md5": "ad1ea220eaeffb32a4f9b9c432a70e5f",
          "sha256": "69b9eaa50d5d2ff5ee31838f8cbdbef1236f977601d15f15b87d9322740b506c"
        },
        "downloads": -1,
        "filename": "aisling_connector-1.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad1ea220eaeffb32a4f9b9c432a70e5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43246,
        "upload_time": "2022-02-25T16:50:29",
        "upload_time_iso_8601": "2022-02-25T16:50:29.684890Z",
        "url": "https://files.pythonhosted.org/packages/b0/55/2c1ae8af889e57e4fc93aa4b64f515dfc74a22991de4445a3f8faba2f3ac/aisling_connector-1.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6de2b76a4be9683c54850ff9aaa0370adf4e45eed3c01f034b8a73260721a65",
          "md5": "dc0513c09008a661684520a27cec88fa",
          "sha256": "197fd31392093a914cc1f625dbd9591941da0652a4ef8b38e07b2775646ce434"
        },
        "downloads": -1,
        "filename": "aisling-connector-1.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc0513c09008a661684520a27cec88fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32644,
        "upload_time": "2022-02-25T16:50:31",
        "upload_time_iso_8601": "2022-02-25T16:50:31.380930Z",
        "url": "https://files.pythonhosted.org/packages/c6/de/2b76a4be9683c54850ff9aaa0370adf4e45eed3c01f034b8a73260721a65/aisling-connector-1.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb6793cb1ea57e528e67c73473054829f0241f68701eeca6537bfdc19098777f",
          "md5": "74b3285d6e3a1e836f3db51eb78e53ce",
          "sha256": "e755ab81d035ff483695b3f0db8a4c1cab079de096e91d7ef05a1aa5dc5531e1"
        },
        "downloads": -1,
        "filename": "aisling_connector-2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74b3285d6e3a1e836f3db51eb78e53ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43178,
        "upload_time": "2022-02-25T17:34:07",
        "upload_time_iso_8601": "2022-02-25T17:34:07.256489Z",
        "url": "https://files.pythonhosted.org/packages/cb/67/93cb1ea57e528e67c73473054829f0241f68701eeca6537bfdc19098777f/aisling_connector-2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edb5eef0cb2734abadbc9edcabefd80b1c4dcc7457c64dfed18fc21d8402a66b",
          "md5": "698f2219268604e40beecea125a68ad9",
          "sha256": "d6480ed6c757ef01ba08f2a1f57c61544a3241ef31ddea4b3f2b957d09c48f03"
        },
        "downloads": -1,
        "filename": "aisling-connector-2.tar.gz",
        "has_sig": false,
        "md5_digest": "698f2219268604e40beecea125a68ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32632,
        "upload_time": "2022-02-25T17:34:09",
        "upload_time_iso_8601": "2022-02-25T17:34:09.031980Z",
        "url": "https://files.pythonhosted.org/packages/ed/b5/eef0cb2734abadbc9edcabefd80b1c4dcc7457c64dfed18fc21d8402a66b/aisling-connector-2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb6793cb1ea57e528e67c73473054829f0241f68701eeca6537bfdc19098777f",
        "md5": "74b3285d6e3a1e836f3db51eb78e53ce",
        "sha256": "e755ab81d035ff483695b3f0db8a4c1cab079de096e91d7ef05a1aa5dc5531e1"
      },
      "downloads": -1,
      "filename": "aisling_connector-2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74b3285d6e3a1e836f3db51eb78e53ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 43178,
      "upload_time": "2022-02-25T17:34:07",
      "upload_time_iso_8601": "2022-02-25T17:34:07.256489Z",
      "url": "https://files.pythonhosted.org/packages/cb/67/93cb1ea57e528e67c73473054829f0241f68701eeca6537bfdc19098777f/aisling_connector-2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edb5eef0cb2734abadbc9edcabefd80b1c4dcc7457c64dfed18fc21d8402a66b",
        "md5": "698f2219268604e40beecea125a68ad9",
        "sha256": "d6480ed6c757ef01ba08f2a1f57c61544a3241ef31ddea4b3f2b957d09c48f03"
      },
      "downloads": -1,
      "filename": "aisling-connector-2.tar.gz",
      "has_sig": false,
      "md5_digest": "698f2219268604e40beecea125a68ad9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32632,
      "upload_time": "2022-02-25T17:34:09",
      "upload_time_iso_8601": "2022-02-25T17:34:09.031980Z",
      "url": "https://files.pythonhosted.org/packages/ed/b5/eef0cb2734abadbc9edcabefd80b1c4dcc7457c64dfed18fc21d8402a66b/aisling-connector-2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}