{
  "info": {
    "author": "Seung-been \"Steven\" Lee",
    "author_email": "sbstevenlee@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "..\n   This file was automatically generated by docs/create.py.\n\nREADME\n******\n\n.. image:: https://badge.fury.io/py/pypgx.svg\n    :target: https://badge.fury.io/py/pypgx\n\n.. image:: https://readthedocs.org/projects/pypgx/badge/?version=latest\n    :target: https://pypgx.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://anaconda.org/bioconda/pypgx/badges/version.svg\n   :target: https://anaconda.org/bioconda/pypgx\n\n.. image:: https://anaconda.org/bioconda/pypgx/badges/license.svg\n   :target: https://github.com/sbslee/pypgx/blob/master/LICENSE\n\n.. image:: https://anaconda.org/bioconda/pypgx/badges/downloads.svg\n   :target: https://anaconda.org/bioconda/pypgx/files\n\nIntroduction\n============\n\nThe main purpose of the PyPGx package is to provide a unified platform for\npharmacogenomics (PGx) research. PyPGx is and always will be completely free\nand open source.\n\nThe package is written in Python, and supports both command line interface\n(CLI) and application programming interface (API) whose documentations are\navailable at the `Read the Docs <https://pypgx.readthedocs.io/en/latest/>`_.\n\nQuick links:\n\n- `README <https://pypgx.readthedocs.io/en/latest/readme.html>`__\n- `Genes <https://pypgx.readthedocs.io/en/latest/genes.html>`__\n- `Glossary <https://pypgx.readthedocs.io/en/latest/glossary.html>`__\n- `Tutorials <https://pypgx.readthedocs.io/en/latest/tutorials.html>`__\n- `CLI <https://pypgx.readthedocs.io/en/latest/cli.html>`__\n- `API <https://pypgx.readthedocs.io/en/latest/api.html>`__\n- `SDK <https://pypgx.readthedocs.io/en/latest/sdk.html>`__\n- `FAQ <https://pypgx.readthedocs.io/en/latest/faq.html>`__\n- `Changelog <https://pypgx.readthedocs.io/en/latest/changelog.html>`__\n\nPyPGx can predict PGx genotypes (e.g. ``*4/*5``) and phenotypes (e.g.\n``Poor Metabolizer``) using various genomic data, including data from\nnext-generation sequencing (NGS), single nucleotide polymorphism (SNP) array,\nand long-read sequencing. Importantly, for NGS data the package can detect\n`structural variation (SV) <https://pypgx.readthedocs.io/en/latest/\nglossary.html#structural-variation-sv>`__ using a machine learning-based\napproach. Finally, note that PyPGx is compatible with both of the Genome\nReference Consortium Human (GRCh) builds, GRCh37 (hg19) and GRCh38 (hg38).\n\nThere are currently 59 pharmacogenes in PyPGx:\n\n.. list-table::\n\n   * - ABCB1\n     - ABCG2\n     - CACNA1S\n     - CFTR\n     - CYP1A1\n   * - CYP1A2\n     - CYP1B1\n     - CYP2A6/CYP2A7\n     - CYP2A13\n     - CYP2B6/CYP2B7\n   * - CYP2C8\n     - CYP2C9\n     - CYP2C19\n     - CYP2D6/CYP2D7\n     - CYP2E1\n   * - CYP2F1\n     - CYP2J2\n     - CYP2R1\n     - CYP2S1\n     - CYP2W1\n   * - CYP3A4\n     - CYP3A5\n     - CYP3A7\n     - CYP3A43\n     - CYP4A11\n   * - CYP4A22\n     - CYP4B1\n     - CYP4F2\n     - CYP17A1\n     - CYP19A1\n   * - CYP26A1\n     - DPYD\n     - F5\n     - G6PD\n     - GSTM1\n   * - GSTP1\n     - GSTT1\n     - IFNL3\n     - NAT1\n     - NAT2\n   * - NUDT15\n     - POR\n     - PTGIS\n     - RYR1\n     - SLC15A2\n   * - SLC22A2\n     - SLCO1B1\n     - SLCO1B3\n     - SLCO2B1\n     - SULT1A1\n   * - TBXAS1\n     - TPMT\n     - UGT1A1\n     - UGT1A4\n     - UGT2B7\n   * - UGT2B15\n     - UGT2B17\n     - VKORC1\n     - XPC\n     -\n\nYour contributions (e.g. feature ideas, pull requests) are most welcome.\n\n| Author: Seung-been \"Steven\" Lee\n| Email: sbstevenlee@gmail.com\n| License: MIT License\n\nCitation\n========\n\nIf you use PyPGx in a published analysis, please report the program version\nand cite the following article:\n\n- Lee et al., 2022. `ClinPharmSeq: A targeted sequencing panel for clinical pharmacogenetics implementation <https://doi.org/10.1371/journal.pone.0272129>`__. PLOS ONE.\n\nIn this article, PyPGx was used to call star alleles for genomic DNA\nreference materials from the Centers for Disease Control and Prevention–based\n`Genetic Testing Reference Materials Coordination Program (GeT-RM)\n<https://pypgx.readthedocs.io/en/latest/glossary.html#\ngenetic-testing-reference-materials-coordination-program-get-rm>`__, where it\nshowed almost 100% concordance with genotype results from previous works.\n\nThe development of PyPGx was heavily inspired by `Stargazer <https://\nstargazer.gs.washington.edu/stargazerweb/>`__, another star-allele calling\ntool developed by Steven when he was in his PhD program at the University of\nWashington. Therefore, please also cite the following articles:\n\n- Lee et al., 2019. `Calling star alleles with Stargazer in 28 pharmacogenes with whole genome sequences <https://doi.org/10.1002/cpt.1552>`__. Clinical Pharmacology & Therapeutics.\n- Lee et al., 2018. `Stargazer: a software tool for calling star alleles from next-generation sequencing data using CYP2D6 as a model <https://doi.org/10.1038/s41436-018-0054-0>`__. Genetics in Medicine.\n\nBelow is an incomplete list of publications which have used PyPGx:\n\n- Wroblewski et al., 2022. `Pharmacogenetic variation in Neanderthals and Denisovans and implications for human health and response to medications <https://doi.org/10.1101/2021.11.27.470071>`__. bioRxiv.\n- Botton et al., 2020. `Phased Haplotype Resolution of the SLC6A4 Promoter Using Long-Read Single Molecule Real-Time (SMRT) Sequencing <https://doi.org/10.3390/genes11111333>`__. Genes.\n\nSupport PyPGx\n=============\n\nIf you find my work useful, please consider becoming a `sponsor <https://github.com/sponsors/sbslee>`__.\n\nInstallation\n============\n\nFollowing packages are required to run PyPGx:\n\n.. list-table::\n   :header-rows: 1\n\n   * - Package\n     - Anaconda\n     - PyPI\n   * - ``fuc``\n     - ✅\n     - ✅\n   * - ``scikit-learn``\n     - ✅\n     - ✅\n   * - ``openjdk``\n     - ✅\n     - ❌\n\nThere are various ways you can install PyPGx. The recommended way is via\nconda (`Anaconda <https://www.anaconda.com/>`__):\n\n.. code-block:: text\n\n   $ conda install -c bioconda pypgx\n\nAbove will automatically download and install all the dependencies as well.\nAlternatively, you can use pip (`PyPI <https://pypi.org/>`__) to install\nPyPGx and all of its dependencies except ``openjdk`` (i.e. Java JDK must be\ninstalled separately):\n\n.. code-block:: text\n\n   $ pip install pypgx\n\nFinally, you can clone the GitHub repository and then install PyPGx locally:\n\n.. code-block:: text\n\n   $ git clone https://github.com/sbslee/pypgx\n   $ cd pypgx\n   $ pip install .\n\nThe nice thing about this approach is that you will have access to\ndevelopment versions that are not available in Anaconda or PyPI. For example,\nyou can access a development branch with the ``git checkout`` command. When\nyou do this, please make sure your environment already has all the\ndependencies installed.\n\n.. note::\n    `Beagle <https://faculty.washington.edu/browning/beagle/beagle.html>`__\n    is one of the default software tools used by PyPGx for haplotype phasing\n    SNVs and indels. The program is freely available and published under the\n    `GNU General Public License <https://faculty.washington.edu/browning/\n    beagle/gpl_license>`__. Users do not need to download Beagle separately\n    because a copy of the software (``beagle.22Jul22.46e.jar``) is already\n    included in PyPGx.\n\n.. warning::\n    You're not done yet! Keep scrolling down to obtain the resource bundle\n    for PyPGx, which is essential for running the package.\n\nResource bundle\n===============\n\nStarting with the 0.12.0 version, reference haplotype panel files and\nstructural variant classifier files in PyPGx are moved to the\n``pypgx-bundle`` `repository <https://github.com/sbslee/pypgx-bundle>`__\n(only those files are moved; other files such as ``allele-table.csv`` and\n``variant-table.csv`` are intact). Therefore, the user must clone the\n``pypgx-bundle`` repository with matching PyPGx version to their home\ndirectory in order for PyPGx to correctly access the moved files:\n\n.. code-block:: text\n\n   $ cd ~\n   $ git clone --branch 0.12.0 --depth 1 https://github.com/sbslee/pypgx-bundle\n\nThis is undoubtedly annoying, but absolutely necessary for portability\nreasons because PyPGx has been growing exponentially in file size due to the\nincreasing number of genes supported and their variation complexity, to the\npoint where it now exceeds upload size limit for PyPI (100 Mb). After removal\nof those files, the size of PyPGx has reduced from >100 Mb to <1 Mb.\n\nStructural variation detection\n==============================\n\nMany pharmacogenes are known to have `structural variation (SV)\n<https://pypgx.readthedocs.io/en/latest/glossary.html#structural-variation-\nsv>`__ such as gene deletions, duplications, and hybrids. You can visit the\n`Genes <https://pypgx.readthedocs.io/en/latest/genes.html>`__ page to see the\nlist of genes with SV.\n\nSome of the SV events can be quite challenging to detect accurately with NGS\ndata due to misalignment of sequence reads caused by sequence homology with\nother gene family members (e.g. CYP2D6 and CYP2D7). PyPGx attempts to address\nthis issue by training a `support vector machine (SVM) <https://scikit-\nlearn.org/stable/modules/generated/sklearn.svm.SVC.html>`__-based multiclass\nclassifier using the `one-vs-rest strategy <https://scikit-learn.org/stable\n/modules/generated/sklearn.multiclass.OneVsRestClassifier.html>`__ for each\ngene for each GRCh build. Each classifier is trained using copy number\nprofiles of real NGS samples as well as simulated ones, including those from\n`1KGP <https://pypgx.readthedocs.io/en/latest/glossary.html#genomes-project-\n1kgp>`__ and `GeT-RM <https://pypgx.readthedocs.io/en/latest/\nglossary.html#genetic-testing-reference-materials-coordination-program-get-rm>`__.\n\nYou can plot copy number profile and allele fraction profile with PyPGx to\nvisually inspect SV calls. Below are CYP2D6 examples:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 10 30 60\n\n   * - SV Name\n     - Gene Model\n     - Profile\n   * - Normal\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-1.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-8.png\n   * - WholeDel1\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-2.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-1.png\n   * - WholeDel1Hom\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-3.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-6.png\n   * - WholeDup1\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-4.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-2.png\n   * - Tandem3\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-11.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-9.png\n   * - Tandem2C\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/gene-model-CYP2D6-10.png\n     - .. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/dpsv/GRCh37-CYP2D6-7.png\n\nPyPGx was recently applied to the entire high-coverage WGS dataset from 1KGP\n(N=2,504). Click `here <https://github.com/sbslee/1kgp-pgx-paper/tree/main/\nsv-tables>`__ to see individual SV calls, and corresponding copy number\nprofiles and allele fraction profiles.\n\nGRCh37 vs. GRCh38\n=================\n\nWhen working with PGx data, it's not uncommon to encounter a situation\nwhere you are handling GRCh37 data in one project but GRCh38 in another. You\nmay be tempted to use tools like ``LiftOver`` to convert GRCh37 to GRCh38, or\nvice versa, but deep down you know it's going to be a mess (and please don't\ndo this). The good news is, PyPGx supports both of the builds!\n\nIn many PyPGx actions, you can simply indicate which genome build to use. For\nexample, for GRCh38 data you can use ``--assembly GRCh38`` in CLI and\n``assembly='GRCh38'`` in API. **Note that GRCh37 will always be the\ndefault.** Below is an example of using the API:\n\n.. code:: python3\n\n    >>> import pypgx\n    >>> pypgx.list_variants('CYP2D6', alleles=['*4'], assembly='GRCh37')\n    ['22-42524947-C-T']\n    >>> pypgx.list_variants('CYP2D6', alleles=['*4'], assembly='GRCh38')\n    ['22-42128945-C-T']\n\nHowever, there is one important caveat to consider if your sequencing data is\nGRCh38. That is, sequence reads must be aligned only to the main contigs\n(i.e. ``chr1``, ``chr2``, ..., ``chrX``, ``chrY``), and not to the\nalternative (ALT) contigs such as ``chr1_KI270762v1_alt``. This is because\nthe presence of ALT contigs reduces the sensitivity of variant calling\nand many other analyses including SV detection. Therefore, if you have\nsequencing data in GRCh38, make sure it's aligned to the main contigs only.\n\nThe only exception to above rule is the GSTT1 gene, which is located on\n``chr22`` for GRCh37 but on ``chr22_KI270879v1_alt`` for GRCh38. This gene is\nknown to have an extremely high rate of gene deletion polymorphism in the\npopulation and thus requires SV analysis. Therefore, if you are interested in\ngenotyping this gene with GRCh38 data, then you must include that contig\nwhen performing read alignment. To this end, you can easily filter your\nreference FASTA file before read alignment so that it only contains the main\ncontigs plus the ALT contig. If you don't know how to do this, here's one way\nusing the ``fuc`` program (which should have already been installed along\nwith PyPGx):\n\n.. code-block:: text\n\n    $ cat contigs.list\n    chr1\n    chr2\n    ...\n    chrX\n    chrY\n    chr22_KI270879v1_alt\n    $ fuc fa-filter in.fa --contigs contigs.list > out.fa\n\nArchive file, semantic type, and metadata\n=========================================\n\nIn order to efficiently store and transfer data, PyPGx uses the ZIP archive\nfile format (``.zip``) which supports lossless data compression. Each archive\nfile created by PyPGx has a metadata file (``metadata.txt``) and a data file\n(e.g. ``data.tsv``, ``data.vcf``). A metadata file contains important\ninformation about the data file within the same archive, which is expressed\nas pairs of ``=``-separated keys and values (e.g. ``Assembly=GRCh37``):\n\n.. list-table::\n    :widths: 20 40 40\n    :header-rows: 1\n\n    * - Metadata\n      - Description\n      - Examples\n    * - ``Assembly``\n      - Reference genome assembly.\n      - ``GRCh37``, ``GRCh38``\n    * - ``Control``\n      - Control gene.\n      - ``VDR``, ``chr1:10000-20000``\n    * - ``Gene``\n      - Target gene.\n      - ``CYP2D6``, ``GSTT1``\n    * - ``Platform``\n      - Genotyping platform.\n      - ``WGS``, ``Targeted``, ``Chip``, ``LongRead``\n    * - ``Program``\n      - Name of the phasing program.\n      - ``Beagle``, ``SHAPEIT``\n    * - ``Samples``\n      - Samples used for inter-sample normalization.\n      - ``NA07000,NA10854,NA11993``\n    * - ``SemanticType``\n      - Semantic type of the archive.\n      - ``CovFrame[CopyNumber]``, ``Model[CNV]``\n\nSemantic types\n--------------\n\nNotably, all archive files have defined semantic types, which allows us to\nensure that the data that is passed to a PyPGx command (CLI) or method (API)\nis meaningful for the operation that will be performed. Below is a list of\ncurrently defined semantic types:\n\n- ``CovFrame[CopyNumber]``\n    * CovFrame for storing target gene's per-base copy number which is computed from read depth with control statistics.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``, ``Platform``, ``Control``, ``Samples``.\n- ``CovFrame[DepthOfCoverage]``\n    * CovFrame for storing read depth for all target genes with SV.\n    * Requires following metadata: ``Assembly``, ``SemanticType``, ``Platform``.\n- ``CovFrame[ReadDepth]``\n    * CovFrame for storing read depth for single target gene.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``, ``Platform``.\n- ``Model[CNV]``\n    * Model for calling CNV in target gene.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``, ``Control``.\n- ``SampleTable[Alleles]``\n    * TSV file for storing target gene's candidate star alleles for each sample.\n    * Requires following metadata: ``Platform``, ``Gene``, ``Assembly``, ``SemanticType``, ``Program``.\n- ``SampleTable[CNVCalls]``\n    * TSV file for storing target gene's CNV call for each sample.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``, ``Control``.\n- ``SampleTable[Genotypes]``\n    * TSV file for storing target gene's genotype call for each sample.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``.\n- ``SampleTable[Phenotypes]``\n    * TSV file for storing target gene's phenotype call for each sample.\n    * Requires following metadata: ``Gene``, ``SemanticType``.\n- ``SampleTable[Results]``\n    * TSV file for storing various results for each sample.\n    * Requires following metadata: ``Gene``, ``Assembly``, ``SemanticType``.\n- ``SampleTable[Statistics]``\n    * TSV file for storing control gene's various statistics on read depth for each sample. Used for converting target gene's read depth to copy number.\n    * Requires following metadata: ``Control``, ``Assembly``, ``SemanticType``, ``Platform``.\n- ``VcfFrame[Consolidated]``\n    * VcfFrame for storing target gene's consolidated variant data.\n    * Requires following metadata: ``Platform``, ``Gene``, ``Assembly``, ``SemanticType``, ``Program``.\n- ``VcfFrame[Imported]``\n    * VcfFrame for storing target gene's raw variant data.\n    * Requires following metadata: ``Platform``, ``Gene``, ``Assembly``, ``SemanticType``.\n- ``VcfFrame[Phased]``\n    * VcfFrame for storing target gene's phased variant data.\n    * Requires following metadata: ``Platform``, ``Gene``, ``Assembly``, ``SemanticType``, ``Program``.\n\nWorking with archive files\n--------------------------\n\nTo demonstrate how easy it is to work with PyPGx archive files, below we will\nshow some examples. First, download an archive to play with, which has\n``SampleTable[Results]`` as semantic type:\n\n.. code-block:: text\n\n    $ wget https://raw.githubusercontent.com/sbslee/pypgx-data/main/getrm-wgs-tutorial/grch37-CYP2D6-results.zip\n\nLet's print its metadata:\n\n.. code-block:: text\n\n    $ pypgx print-metadata grch37-CYP2D6-results.zip\n    Gene=CYP2D6\n    Assembly=GRCh37\n    SemanticType=SampleTable[Results]\n\nNow print its main data (but display first sample only):\n\n.. code-block:: text\n\n    $ pypgx print-data grch37-CYP2D6-results.zip | head -n 2\n    \tGenotype\tPhenotype\tHaplotype1\tHaplotype2\tAlternativePhase\tVariantData\tCNV\n    HG00276_PyPGx\t*4/*5\tPoor Metabolizer\t*4;*10;*74;*2;\t*10;*74;*2;\t;\t*4:22-42524947-C-T:0.913;*10:22-42526694-G-A,22-42523943-A-G:1.0,1.0;*74:22-42525821-G-T:1.0;*2:default;\tDeletionHet\n\nWe can unzip it to extract files inside (note that ``tmpcty4c_cr`` is the\noriginal folder name):\n\n.. code-block:: text\n\n    $ unzip grch37-CYP2D6-results.zip\n    Archive:  grch37-CYP2D6-results.zip\n      inflating: tmpcty4c_cr/metadata.txt\n      inflating: tmpcty4c_cr/data.tsv\n\nWe can now directly interact with the files:\n\n.. code-block:: text\n\n    $ cat tmpcty4c_cr/metadata.txt\n    Gene=CYP2D6\n    Assembly=GRCh37\n    SemanticType=SampleTable[Results]\n    $ head -n 2 tmpcty4c_cr/data.tsv\n    \tGenotype\tPhenotype\tHaplotype1\tHaplotype2\tAlternativePhase\tVariantData\tCNV\n    HG00276_PyPGx\t*4/*5\tPoor Metabolizer\t*4;*10;*74;*2;\t*10;*74;*2;\t;\t*4:22-42524947-C-T:0.913;*10:22-42526694-G-A,22-42523943-A-G:1.0,1.0;*74:22-42525821-G-T:1.0;*2:default;\tDeletionHet\n\nWe can easily create a new archive:\n\n.. code-block:: text\n\n    $ zip -r grch37-CYP2D6-results-new.zip tmpcty4c_cr\n      adding: tmpcty4c_cr/ (stored 0%)\n      adding: tmpcty4c_cr/metadata.txt (stored 0%)\n      adding: tmpcty4c_cr/data.tsv (deflated 84%)\n    $ pypgx print-metadata grch37-CYP2D6-results-new.zip\n    Gene=CYP2D6\n    Assembly=GRCh37\n    SemanticType=SampleTable[Results]\n\nPhenotype prediction\n====================\n\nMany genes in PyPGx have a genotype-phenotype table available from the\nClinical Pharmacogenetics Implementation Consortium (CPIC) or\nthe Pharmacogenomics Knowledge Base (PharmGKB). PyPGx uses these tables to\nperform phenotype prediction with one of the two methods:\n\n- Method 1. Simple diplotype-phenotype mapping: This method directly uses the\n  diplotype-phenotype mapping as defined by CPIC or PharmGKB. Using the\n  CYP2B6 gene as an example, the diplotypes \\*6/\\*6, \\*1/\\*29, \\*1/\\*2,\n  \\*1/\\*4, and \\*4/\\*4 correspond to Poor Metabolizer, Intermediate\n  Metabolizer, Normal Metabolizer, Rapid Metabolizer, and Ultrarapid\n  Metabolizer.\n- Method 2. Summation of haplotype activity scores: This method uses a\n  standard unit of enzyme activity known as an activity score. Using the\n  CYP2D6 gene as an example, the fully functional reference \\*1 allele is\n  assigned a value of 1, decreased-function alleles such as \\*9 and \\*17\n  receive a value of 0.5, and nonfunctional alleles including \\*4 and \\*5\n  have a value of 0. The sum of values assigned to both alleles constitutes\n  the activity score of a diplotype. Consequently, subjects with \\*1/\\*1,\n  \\*1/\\*4, and \\*4/\\*5 diplotypes have an activity score of 2 (Normal\n  Metabolizer), 1 (Intermediate Metabolizer), and 0 (Poor Metabolizer),\n  respectively.\n\nPlease visit the `Genes <https://pypgx.readthedocs.io/en/latest/\ngenes.html>`__ page to see the list of genes with a genotype-phenotype\ntable and each of their prediction method.\n\nTo perform phenotype prediction with the API, you can use the\n``pypgx.predict_phenotype`` method:\n\n.. code:: python3\n\n    >>> import pypgx\n    >>> pypgx.predict_phenotype('CYP2D6', '*4', '*5')   # Both alleles have no function\n    'Poor Metabolizer'\n    >>> pypgx.predict_phenotype('CYP2D6', '*5', '*4')   # The order of alleles does not matter\n    'Poor Metabolizer'\n    >>> pypgx.predict_phenotype('CYP2D6', '*1', '*22')  # *22 has uncertain function\n    'Indeterminate'\n    >>> pypgx.predict_phenotype('CYP2D6', '*1', '*1x2') # Gene duplication\n    'Ultrarapid Metabolizer'\n\nTo perform phenotype prediction with the CLI, you can use the\n``call-phenotypes`` command. It takes a ``SampleTable[Genotypes]`` file as\ninput and outputs a ``SampleTable[Phenotypes]`` file:\n\n.. code-block:: text\n\n   $ pypgx call-phenotypes genotypes.zip phenotypes.zip\n\nPipelines\n=========\n\nPyPGx currently provides three pipelines for performing PGx genotype analysis\nof single gene for one or multiple samples: NGS pipeline, chip pipeline, and\nlong-read pipeline. In additional to genotyping, each pipeline will perform\nphenotype prediction based on genotype results. All pipelines are compatible\nwith both GRCh37 and GRCh38 (e.g. for GRCh38 use ``--assembly GRCh38`` in CLI\nand ``assembly='GRCh38'`` in API).\n\nNGS pipeline\n------------\n\n.. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/flowchart-ngs-pipeline.png\n\nImplemented as ``pypgx run-ngs-pipeline`` in CLI and\n``pypgx.pipeline.run_ngs_pipeline`` in API, this pipeline is designed for\nprocessing short-read data (e.g. Illumina). Users must specify whether the\ninput data is from whole genome sequencing (WGS) or targeted sequencing\n(custom targeted panel sequencing or whole exome sequencing).\n\nThis pipeline supports SV detection based on copy number analysis for genes\nthat are known to have SV. Therefore, if the target gene is associated with\nSV (e.g. CYP2D6) it's strongly recommended to provide a\n``CovFrame[DepthOfCoverage]`` file and a ``SampleTable[Statistics]`` file in\naddtion to a VCF file containing SNVs/indels. If the target gene is not\nassociated with SV (e.g. CYP3A5) providing a VCF file alone is enough. You can\nvisit the `Genes <https://pypgx.readthedocs.io/en/latest/genes.html>`__ page\nto see the full list of genes with SV. For details on SV detection algorithm,\nplease see the `Structural variation detection <https://pypgx.readthedocs.io/\nen/latest/readme.html#structural-variation-detection>`__ section.\n\nWhen creating a VCF file (containing SNVs/indels) from BAM files, users have\na choice to either use the ``pypgx create-input-vcf`` command (strongly\nrecommended) or a variant caller of their choice (e.g. GATK4\nHaplotypeCaller). See the `Variant caller choice <https://pypgx.readthedocs.\nio/en/latest/faq.html#variant-caller-choice>`__ section for detailed\ndiscussion on when to use either option.\n\nCheck out the `GeT-RM WGS tutorial <https://pypgx.readthedocs.io/en/latest/\ntutorials.html#get-rm-wgs-tutorial>`__ to see this pipeline in action.\n\nChip pipeline\n-------------\n\n.. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/flowchart-chip-pipeline.png\n\nImplemented as ``pypgx run-chip-pipeline`` in CLI and\n``pypgx.pipeline.run_chip_pipeline`` in API, this pipeline is designed for\nDNA chip data (e.g. Global Screening Array from Illumina). It's recommended\nto perform variant imputation on the input VCF prior to feeding it to the\npipeline using a large reference haplotype panel (e.g. `TOPMed Imputation\nServer <https://imputation.biodatacatalyst.nhlbi.nih.gov/>`__).\nAlternatively, it's possible to perform variant imputation with the 1000\nGenomes Project (1KGP) data as reference within PyPGx using ``--impute`` in\nCLI and ``impute=True`` in API.\n\nThe pipeline currently does not support SV detection. Please post a GitHub\nissue if you want to contribute your development skills and/or data for\ndevising an SV detection algorithm.\n\nCheck out the `Coriell Affy tutorial <https://pypgx.readthedocs.io/en/latest/\ntutorials.html#coriell-affy-tutorial>`__ to see this pipeline in action.\n\nLong-read pipeline\n------------------\n\n.. image:: https://raw.githubusercontent.com/sbslee/pypgx-data/main/flowchart-long-read-pipeline.png\n\nImplemented as ``pypgx run-long-read-pipeline`` in CLI and\n``pypgx.pipeline.run_long_read_pipeline`` in API, this pipeline is designed\nfor long-read data (e.g. Pacific Biosciences and Oxford Nanopore\nTechnologies). The input VCF must be phased using a read-backed haplotype\nphasing tool such as `WhatsHap <https://github.com/whatshap/whatshap>`__.\n\nThe pipeline currently does not support SV detection. Please post a GitHub\nissue if you want to contribute your development skills and/or data for\ndevising an SV detection algorithm.\n\nResults interpretation\n======================\n\nPyPGx outputs per-sample genotype results in a table, which is stored in an\narchive file with the semantic type ``SampleTable[Results]``. Below, we will\nuse the CYP2D6 gene with GRCh37 as an example to illustrate how to interpret\ngenotype results from PyPGx.\n\n.. list-table::\n   :header-rows: 1\n\n   * -\n     - Genotype\n     - Phenotype\n     - Haplotype1\n     - Haplotype2\n     - AlternativePhase\n     - VariantData\n     - CNV\n   * - NA11839\n     - \\*1/\\*2\n     - Normal Metabolizer\n     - \\*1;\n     - \\*2;\n     - ;\n     - \\*1:22-42522613-G-C,22-42523943-A-G:0.5,0.488;\\*2:default\n     - Normal\n   * - NA12006\n     - \\*4/\\*41\n     - Intermediate Metabolizer\n     - \\*41;\\*2;\n     - \\*4;\\*10;\\*2;\n     - \\*69;\n     - \\*69:22-42526694-G-A,22-42523805-C-T:0.5,0.551;\\*4:22-42524947-C-T:0.444;\\*10:22-42523943-A-G,22-42526694-G-A:0.55,0.5;\\*41:22-42523805-C-T:0.551;\\*2:default;\n     - Normal\n   * - HG00276\n     - \\*4/\\*5\n     - Poor Metabolizer\n     - \\*4;\\*10;\\*74;\\*2;\n     - \\*10;\\*74;\\*2;\n     - ;\n     - \\*4:22-42524947-C-T:0.913;\\*10:22-42523943-A-G,22-42526694-G-A:1.0,1.0;\\*74:22-42525821-G-T:1.0;\\*2:default;\n     - WholeDel1\n   * - NA19207\n     - \\*2x2/\\*10\n     - Normal Metabolizer\n     - \\*10;\\*2;\n     - \\*2;\n     - ;\n     - \\*10:22-42523943-A-G,22-42526694-G-A:0.361,0.25;\\*2:default;\n     - WholeDup1\n\nThis list explains each of the columns in the example results.\n\n- **Genotype**: Diplotype call. When there is no SV this simply combines the two top-ranked star alleles from **Haplotype1** and **Haplotype2** with the delimiter '/'. In the presence of SV the final diplotype is determined using one of the genotypers in the ``pypgx.api.genotype`` module (e.g. `CYP2D6Genotyper <https://pypgx.readthedocs.io/en/latest/api.html#pypgx.api.genotype.CYP2D6Genotyper>`__).\n- **Phenotype**: Phenotype call.\n- **Haplotype1**, **Haplotype2**: List of candidate star alleles for each haplotype. For example, if a given haplotype contains three variants ``22-42523943-A-G``, ``22-42524947-C-T``, and ``22-42526694-G-A``, then it will get assigned ``*4;*10;`` because the haplotype pattern can fit both \\*4 (``22-42524947-C-T``) and \\*10 (``22-42523943-A-G`` and ``22-42526694-G-A``). Note that \\*4 comes first before \\*10 because it has higher priority for reporting purposes (see the ``pypgx.sort_alleles`` `method <https://pypgx.readthedocs.io/en/latest/api.html#pypgx.api.core.sort_alleles>`__ for detailed implementation).\n- **AlternativePhase**: List of star alleles that could be missed due to potentially incorrect statistical phasing. For example, let's assume that statistical phasing has put ``22-42526694-G-A`` for **Haplotype1** and ``22-42523805-C-T`` for **Haplotype2**. Even though the two variants are in trans orientation, PyPGx will also consider alternative phase in case the two variants are actually in cis orientation, resulting in ``*69;`` as **AlternativePhase** because \\*69 is defined by ``22-42526694-G-A`` and ``22-42523805-C-T``.\n- **VariantData**: Information for SNVs/indels used to define observed star alleles, including allele fraction which is important for allelic decomposition after identifying CNV (e.g. the sample NA19207). In some situations, there will not be any variants for a given star allele because the allele itself is \"default\" allele for the selected reference assembly (e.g. GRCh37 has \\*2 as default while GRCh38 has \\*1).\n- **CNV**: Structural variation call. See the `Structural variation detection <https://pypgx.readthedocs.io/en/latest/readme.html#structural-variation-detection>`__ section for more details.\n\nGetting help\n============\n\nFor detailed documentations on the CLI and API, please refer to the\n`Read the Docs <https://pypgx.readthedocs.io/en/latest/>`_.\n\nFor getting help on the CLI:\n\n.. code-block:: text\n\n   $ pypgx -h\n\n   usage: pypgx [-h] [-v] COMMAND ...\n   \n   positional arguments:\n     COMMAND\n       call-genotypes      Call genotypes for target gene.\n       call-phenotypes     Call phenotypes for target gene.\n       combine-results     Combine various results for target gene.\n       compare-genotypes   Calculate concordance between two genotype results.\n       compute-control-statistics\n                           Compute summary statistics for control gene from BAM\n                           files.\n       compute-copy-number\n                           Compute copy number from read depth for target gene.\n       compute-target-depth\n                           Compute read depth for target gene from BAM files.\n       create-consolidated-vcf\n                           Create a consolidated VCF file.\n       create-input-vcf    Call SNVs/indels from BAM files for all target genes.\n       create-regions-bed  Create a BED file which contains all regions used by\n                           PyPGx.\n       estimate-phase-beagle\n                           Estimate haplotype phase of observed variants with\n                           the Beagle program.\n       filter-samples      Filter Archive file for specified samples.\n       import-read-depth   Import read depth data for target gene.\n       import-variants     Import SNV/indel data for target gene.\n       plot-bam-copy-number\n                           Plot copy number profile from CovFrame[CopyNumber].\n       plot-bam-read-depth\n                           Plot read depth profile with BAM data.\n       plot-cn-af          Plot both copy number profile and allele fraction\n                           profile in one figure.\n       plot-vcf-allele-fraction\n                           Plot allele fraction profile with VCF data.\n       plot-vcf-read-depth\n                           Plot read depth profile with VCF data.\n       predict-alleles     Predict candidate star alleles based on observed\n                           variants.\n       predict-cnv         Predict CNV from copy number data for target gene.\n       prepare-depth-of-coverage\n                           Prepare a depth of coverage file for all target\n                           genes with SV from BAM files.\n       print-data          Print the main data of specified archive.\n       print-metadata      Print the metadata of specified archive.\n       run-chip-pipeline   Run genotyping pipeline for chip data.\n       run-long-read-pipeline\n                           Run genotyping pipeline for long-read sequencing data.\n       run-ngs-pipeline    Run genotyping pipeline for NGS data.\n       slice-bam           Slice BAM file for all genes used by PyPGx.\n       test-cnv-caller     Test CNV caller for target gene.\n       train-cnv-caller    Train CNV caller for target gene.\n   \n   optional arguments:\n     -h, --help            Show this help message and exit.\n     -v, --version         Show the version number and exit.\n\nFor getting help on a specific command (e.g. call-genotypes):\n\n.. code-block:: text\n\n   $ pypgx call-genotypes -h\n\nBelow is the list of submodules available in the API:\n\n- **core** : The core submodule is the main suite of tools for PGx research.\n- **genotype** : The genotype submodule is primarily used to make final diplotype calls by interpreting candidate star alleles and/or detected structural variants.\n- **pipeline** : The pipeline submodule is used to provide convenient methods that combine multiple PyPGx actions and automatically handle semantic types.\n- **plot** : The plot submodule is used to plot various kinds of profiles such as read depth, copy number, and allele fraction.\n- **utils** : The utils submodule contains main actions of PyPGx.\n\nFor getting help on a specific submodule (e.g. ``utils``):\n\n.. code:: python3\n\n   >>> from pypgx.api import utils\n   >>> help(utils)\n\nFor getting help on a specific method (e.g. ``pypgx.predict_phenotype``):\n\n.. code:: python3\n\n   >>> import pypgx\n   >>> help(pypgx.predict_phenotype)\n\nIn Jupyter Notebook and Lab, you can see the documentation for a python\nfunction by hitting ``SHIFT + TAB``. Hit it twice to expand the view.\n\nCLI examples\n============\n\nWe can print the metadata of an archive file:\n\n.. code-block:: text\n\n    $ pypgx print-metadata grch37-depth-of-coverage.zip\n\nAbove will print:\n\n.. code-block:: text\n\n    Assembly=GRCh37\n    SemanticType=CovFrame[DepthOfCoverage]\n    Platform=WGS\n\nWe can run the NGS pipeline for the CYP2D6 gene:\n\n.. code-block:: text\n\n    $ pypgx run-ngs-pipeline \\\n    CYP2D6 \\\n    grch37-CYP2D6-pipeline \\\n    --variants grch37-variants.vcf.gz \\\n    --depth-of-coverage grch37-depth-of-coverage.zip \\\n    --control-statistics grch37-control-statistics-VDR.zip\n\nAbove will create a number of archive files:\n\n.. code-block:: text\n\n    Saved VcfFrame[Imported] to: grch37-CYP2D6-pipeline/imported-variants.zip\n    Saved VcfFrame[Phased] to: grch37-CYP2D6-pipeline/phased-variants.zip\n    Saved VcfFrame[Consolidated] to: grch37-CYP2D6-pipeline/consolidated-variants.zip\n    Saved SampleTable[Alleles] to: grch37-CYP2D6-pipeline/alleles.zip\n    Saved CovFrame[ReadDepth] to: grch37-CYP2D6-pipeline/read-depth.zip\n    Saved CovFrame[CopyNumber] to: grch37-CYP2D6-pipeline/copy-number.zip\n    Saved SampleTable[CNVCalls] to: grch37-CYP2D6-pipeline/cnv-calls.zip\n    Saved SampleTable[Genotypes] to: grch37-CYP2D6-pipeline/genotypes.zip\n    Saved SampleTable[Phenotypes] to: grch37-CYP2D6-pipeline/phenotypes.zip\n    Saved SampleTable[Results] to: grch37-CYP2D6-pipeline/results.zip\n\nAPI examples\n============\n\nWe can obtain allele function for the CYP2D6 gene:\n\n.. code:: python3\n\n    >>> import pypgx\n    >>> pypgx.get_function('CYP2D6', '*1')\n    'Normal Function'\n    >>> pypgx.get_function('CYP2D6', '*4')\n    'No Function'\n    >>> pypgx.get_function('CYP2D6', '*22')\n    'Uncertain Function'\n    >>> pypgx.get_function('CYP2D6', '*140')\n    'Unknown Function'\n\nWe can predict phenotype for CYP2D6 based on two haplotype calls:\n\n.. code:: python3\n\n    >>> import pypgx\n    >>> pypgx.predict_phenotype('CYP2D6', '*4', '*5')   # Both alleles have no function\n    'Poor Metabolizer'\n    >>> pypgx.predict_phenotype('CYP2D6', '*5', '*4')   # The order of alleles does not matter\n    'Poor Metabolizer'\n    >>> pypgx.predict_phenotype('CYP2D6', '*1', '*22')  # *22 has uncertain function\n    'Indeterminate'\n    >>> pypgx.predict_phenotype('CYP2D6', '*1', '*1x2') # Gene duplication\n    'Ultrarapid Metabolizer'\n\nWe can also obtain recommendation (e.g. CPIC) for certain drug-phenotype combination:\n\n.. code:: python3\n\n    >>> import pypgx\n    >>> # Codeine, an opiate and prodrug of morphine, is metabolized by CYP2D6\n    >>> pypgx.get_recommendation('codeine', 'CYP2D6', 'Normal Metabolizer')\n    'Use codeine label recommended age- or weight-specific dosing.'\n    >>> pypgx.get_recommendation('codeine', 'CYP2D6', 'Ultrarapid Metabolizer')\n    'Avoid codeine use because of potential for serious toxicity. If opioid use is warranted, consider a non-tramadol opioid.'\n    >>> pypgx.get_recommendation('codeine', 'CYP2D6', 'Poor Metabolizer')\n    'Avoid codeine use because of possibility of diminished analgesia. If opioid use is warranted, consider a non-tramadol opioid.'\n    >>> pypgx.get_recommendation('codeine', 'CYP2D6', 'Indeterminate')\n    'None'\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sbslee/pypgx",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypgx",
    "package_url": "https://pypi.org/project/pypgx/",
    "platform": null,
    "project_url": "https://pypi.org/project/pypgx/",
    "project_urls": {
      "Homepage": "https://github.com/sbslee/pypgx"
    },
    "release_url": "https://pypi.org/project/pypgx/0.20.0/",
    "requires_dist": [
      "fuc",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A Python package for pharmacogenomics (PGx) research",
    "version": "0.20.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16395988,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fb4bb420053d2d67347d3bd3ad1f778dd88c58798d891c44b9d91fca2a3926a",
          "md5": "4a92e94c8e97b92b66c28e628c67b20b",
          "sha256": "cc3f49046fa83292f1e03b11d13beec95438b0beaadd7e140232213c83bcedf1"
        },
        "downloads": -1,
        "filename": "pypgx-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a92e94c8e97b92b66c28e628c67b20b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29876543,
        "upload_time": "2021-12-19T10:49:56",
        "upload_time_iso_8601": "2021-12-19T10:49:56.577038Z",
        "url": "https://files.pythonhosted.org/packages/9f/b4/bb420053d2d67347d3bd3ad1f778dd88c58798d891c44b9d91fca2a3926a/pypgx-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "644d5e7cda47b3739a24451e32e3b843fa1e6628f6604ab1e41e862d04b731ee",
          "md5": "f5dc8405889ec0f41663171413e7693a",
          "sha256": "236f804498eba13ea450aa33d5e6a7a73f609cd200f6850098d04a10970ef46f"
        },
        "downloads": -1,
        "filename": "pypgx-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f5dc8405889ec0f41663171413e7693a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29854836,
        "upload_time": "2021-12-19T10:50:06",
        "upload_time_iso_8601": "2021-12-19T10:50:06.126767Z",
        "url": "https://files.pythonhosted.org/packages/64/4d/5e7cda47b3739a24451e32e3b843fa1e6628f6604ab1e41e862d04b731ee/pypgx-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300520a4c8270b83c6458b0d29331ec2e9ca4927b619d75a0d28c126d6158762",
          "md5": "1782213c5a9dff47166553bf90b6c918",
          "sha256": "458f6cca3772b10a008536488240ba40a1a2ff21de18ff8833b995b7e42d8dd1"
        },
        "downloads": -1,
        "filename": "pypgx-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1782213c5a9dff47166553bf90b6c918",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42209489,
        "upload_time": "2021-12-20T00:56:05",
        "upload_time_iso_8601": "2021-12-20T00:56:05.809699Z",
        "url": "https://files.pythonhosted.org/packages/30/05/20a4c8270b83c6458b0d29331ec2e9ca4927b619d75a0d28c126d6158762/pypgx-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aff47cb83311636c414c035c08a146093c83bafc954f1c52f84b97d77e76271",
          "md5": "d149940301508fa71fcb016ffe546a42",
          "sha256": "a9c0c2809220bb9e3dc898b38828dae6229ae797a4138720f0e7bf5fbd15819f"
        },
        "downloads": -1,
        "filename": "pypgx-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d149940301508fa71fcb016ffe546a42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42187267,
        "upload_time": "2021-12-20T00:56:14",
        "upload_time_iso_8601": "2021-12-20T00:56:14.599821Z",
        "url": "https://files.pythonhosted.org/packages/9a/ff/47cb83311636c414c035c08a146093c83bafc954f1c52f84b97d77e76271/pypgx-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d00d45cb236752d09f349241dce2563fbf9d265436ae58fb938a035dc18ffb4",
          "md5": "d20debf1dcab2fbbf504e29ae5625fa7",
          "sha256": "a94350656bf4b71a2e317f7020d690cfb6cb58cf41a753b3107912973ef707d7"
        },
        "downloads": -1,
        "filename": "pypgx-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d20debf1dcab2fbbf504e29ae5625fa7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72687207,
        "upload_time": "2022-01-01T09:41:03",
        "upload_time_iso_8601": "2022-01-01T09:41:03.888069Z",
        "url": "https://files.pythonhosted.org/packages/3d/00/d45cb236752d09f349241dce2563fbf9d265436ae58fb938a035dc18ffb4/pypgx-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5109a1cb350ca2631458d3039de8a6b9a19c3d6e809f4a294d5ae768e4c9709c",
          "md5": "9c2907c04c29e29c7ea758ccb1175f08",
          "sha256": "c5e1a45d2f0a74588ef043bf124266307723be27a46d106702d7e95e379ac30e"
        },
        "downloads": -1,
        "filename": "pypgx-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c2907c04c29e29c7ea758ccb1175f08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72637260,
        "upload_time": "2022-01-01T09:41:18",
        "upload_time_iso_8601": "2022-01-01T09:41:18.083305Z",
        "url": "https://files.pythonhosted.org/packages/51/09/a1cb350ca2631458d3039de8a6b9a19c3d6e809f4a294d5ae768e4c9709c/pypgx-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6de6be549cbfeca7d21ca5682e14f4f6dcfe1f429a94c0c8fe1196dc02a5c4f",
          "md5": "739e455a711660ca9d4738f9e21993d4",
          "sha256": "0ed63f2adb7d8931d1c3ef666f4ee6dc161e6ac65b677685b29c835cfc097774"
        },
        "downloads": -1,
        "filename": "pypgx-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "739e455a711660ca9d4738f9e21993d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 433101,
        "upload_time": "2022-01-29T08:08:18",
        "upload_time_iso_8601": "2022-01-29T08:08:18.043534Z",
        "url": "https://files.pythonhosted.org/packages/e6/de/6be549cbfeca7d21ca5682e14f4f6dcfe1f429a94c0c8fe1196dc02a5c4f/pypgx-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d9ec8466c68de6ff6cec8bfb27eb1a23d863913438ad5242d02604ea3fc2a9",
          "md5": "2ac90411880765e697403442c3e7343c",
          "sha256": "9fbdc28d729c3abf459eea4ffeb8eca70a17206e7664d107955af0aa99db5f5c"
        },
        "downloads": -1,
        "filename": "pypgx-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ac90411880765e697403442c3e7343c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 425607,
        "upload_time": "2022-01-29T08:08:21",
        "upload_time_iso_8601": "2022-01-29T08:08:21.433812Z",
        "url": "https://files.pythonhosted.org/packages/07/d9/ec8466c68de6ff6cec8bfb27eb1a23d863913438ad5242d02604ea3fc2a9/pypgx-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2251fc67a18b11d67547c1455cff497c42e18674d8928cb3676c1862f3025c00",
          "md5": "a6bed5f2cdddbaeab9cb733cdc2e35eb",
          "sha256": "e11568a78d4168b3940f759785bd25e80e173d267899b7d62eb93cacc1f7eb6c"
        },
        "downloads": -1,
        "filename": "pypgx-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6bed5f2cdddbaeab9cb733cdc2e35eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 441692,
        "upload_time": "2022-03-01T05:10:56",
        "upload_time_iso_8601": "2022-03-01T05:10:56.167988Z",
        "url": "https://files.pythonhosted.org/packages/22/51/fc67a18b11d67547c1455cff497c42e18674d8928cb3676c1862f3025c00/pypgx-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc74fc35bfcc8de0947b2c4ba1733d06b6181627bc40a2366989b2e0b64974f2",
          "md5": "62f6d183deb7518eb22626760a087bb9",
          "sha256": "6919978afcdafc95bc9f65e5315afd0958d7a15a11e5ca0916561f8b6f66a865"
        },
        "downloads": -1,
        "filename": "pypgx-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62f6d183deb7518eb22626760a087bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 434848,
        "upload_time": "2022-03-01T05:10:59",
        "upload_time_iso_8601": "2022-03-01T05:10:59.015478Z",
        "url": "https://files.pythonhosted.org/packages/fc/74/fc35bfcc8de0947b2c4ba1733d06b6181627bc40a2366989b2e0b64974f2/pypgx-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d45fbd8a5c6a3fabeca9a31e8c158fd2bc341ae4a42736f34584c0f58549337",
          "md5": "a4514601bf0c0ce994e6204fcbf2650d",
          "sha256": "526cf2f2654681abf6abb5685e53f7bc9506233043da650db54c5d61eb4d8616"
        },
        "downloads": -1,
        "filename": "pypgx-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4514601bf0c0ce994e6204fcbf2650d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 447045,
        "upload_time": "2022-04-02T22:59:38",
        "upload_time_iso_8601": "2022-04-02T22:59:38.033111Z",
        "url": "https://files.pythonhosted.org/packages/2d/45/fbd8a5c6a3fabeca9a31e8c158fd2bc341ae4a42736f34584c0f58549337/pypgx-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dedbb16848fadec4d587d69d700c7f0b48e4d7e152767f4a8e85e79fa63e119",
          "md5": "23f6b9f951efc49a487cd6cb6a728ad6",
          "sha256": "9f5d3a6b68152918acdc3158167462e075aff05db8b5743571f245ed7fd85926"
        },
        "downloads": -1,
        "filename": "pypgx-0.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "23f6b9f951efc49a487cd6cb6a728ad6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 446562,
        "upload_time": "2022-04-02T22:59:40",
        "upload_time_iso_8601": "2022-04-02T22:59:40.233335Z",
        "url": "https://files.pythonhosted.org/packages/4d/ed/bb16848fadec4d587d69d700c7f0b48e4d7e152767f4a8e85e79fa63e119/pypgx-0.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "114afdd0fcf433dbef089d826d97dd7f4e98c5943c4907e48928fb96f4da0b6a",
          "md5": "66b5b74a79cb5c9cfe8826ba77725b49",
          "sha256": "700af8ba32ed836345ff9ebbf502d0f8f06c449b55139d0cdcd2ce3f6a884429"
        },
        "downloads": -1,
        "filename": "pypgx-0.15.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66b5b74a79cb5c9cfe8826ba77725b49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 448715,
        "upload_time": "2022-05-03T08:10:21",
        "upload_time_iso_8601": "2022-05-03T08:10:21.313591Z",
        "url": "https://files.pythonhosted.org/packages/11/4a/fdd0fcf433dbef089d826d97dd7f4e98c5943c4907e48928fb96f4da0b6a/pypgx-0.15.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a09ba1244eed86071cafc062ac79333e848ea0ffd851fdfe19df5c0007e5d322",
          "md5": "85bcde3d52ad461c9f5cec76bd4c6f53",
          "sha256": "2bc71c12b6a5bc80bac9d7a001b682582eda4d1e078edbe81e2489e67d734a38"
        },
        "downloads": -1,
        "filename": "pypgx-0.15.0.tar.gz",
        "has_sig": false,
        "md5_digest": "85bcde3d52ad461c9f5cec76bd4c6f53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 447556,
        "upload_time": "2022-05-03T08:10:24",
        "upload_time_iso_8601": "2022-05-03T08:10:24.278245Z",
        "url": "https://files.pythonhosted.org/packages/a0/9b/a1244eed86071cafc062ac79333e848ea0ffd851fdfe19df5c0007e5d322/pypgx-0.15.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.16.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e978b4552c5ebc1d809c8c67890c6a27eae97eecd11af56aa07036d7d9f475c5",
          "md5": "3e2341fb65df5678389087fd9cd85a45",
          "sha256": "dc13d5300c6ecb614bed34e36b13e56d8582d3b08c6852877e23bd38ebb26da7"
        },
        "downloads": -1,
        "filename": "pypgx-0.16.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e2341fb65df5678389087fd9cd85a45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 449397,
        "upload_time": "2022-06-08T01:40:41",
        "upload_time_iso_8601": "2022-06-08T01:40:41.630092Z",
        "url": "https://files.pythonhosted.org/packages/e9/78/b4552c5ebc1d809c8c67890c6a27eae97eecd11af56aa07036d7d9f475c5/pypgx-0.16.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a60c862782cb8bca1e536134886a413ab587e2edc0bfa2af9e70396e9b798c67",
          "md5": "f94e2a496e3ca0f488554b0fb93b98ec",
          "sha256": "f652277f057cdb79079dd54a11e9ffe6570f5cd58868ca490e0c4b2c5af95b95"
        },
        "downloads": -1,
        "filename": "pypgx-0.16.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f94e2a496e3ca0f488554b0fb93b98ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 448642,
        "upload_time": "2022-06-08T01:40:46",
        "upload_time_iso_8601": "2022-06-08T01:40:46.278512Z",
        "url": "https://files.pythonhosted.org/packages/a6/0c/862782cb8bca1e536134886a413ab587e2edc0bfa2af9e70396e9b798c67/pypgx-0.16.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.17.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d93daf6192534e9136f8357509fee5fa6f0f14b5748cad043586b7b4871225ff",
          "md5": "6d6e48ebc0801ba76b44194c52980c7c",
          "sha256": "de45957a5e73fe279cf6532f2b8f4592dee3b514404be6c9ff71826210757803"
        },
        "downloads": -1,
        "filename": "pypgx-0.17.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d6e48ebc0801ba76b44194c52980c7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 450121,
        "upload_time": "2022-07-12T03:01:19",
        "upload_time_iso_8601": "2022-07-12T03:01:19.063944Z",
        "url": "https://files.pythonhosted.org/packages/d9/3d/af6192534e9136f8357509fee5fa6f0f14b5748cad043586b7b4871225ff/pypgx-0.17.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ca195a8bee74e6176a1e35c946afb5cc14ff792c8ead224d20299e850dc72b7",
          "md5": "9b45bce6d6450fc0403fbe1d22d88241",
          "sha256": "c5e46ce2701ce4af1c0cca29d549626496fe900983e2cebd02895c41f038c49b"
        },
        "downloads": -1,
        "filename": "pypgx-0.17.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9b45bce6d6450fc0403fbe1d22d88241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 450046,
        "upload_time": "2022-07-12T03:01:22",
        "upload_time_iso_8601": "2022-07-12T03:01:22.361233Z",
        "url": "https://files.pythonhosted.org/packages/6c/a1/95a8bee74e6176a1e35c946afb5cc14ff792c8ead224d20299e850dc72b7/pypgx-0.17.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.18.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01cc4b1d06b153696f2987921a9034308def02d30c073a43797d30895356098c",
          "md5": "5b6acf48e02d8b122922c0b493467419",
          "sha256": "a7bd80cdd14597c852a9d4922af135cc4bc4ef03ffeeaca695bd387e15f2dfa8"
        },
        "downloads": -1,
        "filename": "pypgx-0.18.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b6acf48e02d8b122922c0b493467419",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 452646,
        "upload_time": "2022-08-12T07:23:57",
        "upload_time_iso_8601": "2022-08-12T07:23:57.716456Z",
        "url": "https://files.pythonhosted.org/packages/01/cc/4b1d06b153696f2987921a9034308def02d30c073a43797d30895356098c/pypgx-0.18.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca9df8bf3f55d59fb9eecab3c1d781a47da35cf79a3ac7cd76a851429b37b56f",
          "md5": "d0c913988c0fb10327e399666460230e",
          "sha256": "b02e7ac47f9fde360ce8ba5e9edf9d5ef1cc892570b9f3d8d49aaae221ff2a2b"
        },
        "downloads": -1,
        "filename": "pypgx-0.18.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0c913988c0fb10327e399666460230e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 454551,
        "upload_time": "2022-08-12T07:24:01",
        "upload_time_iso_8601": "2022-08-12T07:24:01.585095Z",
        "url": "https://files.pythonhosted.org/packages/ca/9d/f8bf3f55d59fb9eecab3c1d781a47da35cf79a3ac7cd76a851429b37b56f/pypgx-0.18.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.19.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9fe4c60e1b7d77db852f4b2dfce09a9b800e2dd4d1e42c5c705dbe7561265a",
          "md5": "0494aed5906449ce77ae1e2fe753bb33",
          "sha256": "8ce010caf63dd3a3ae123398e8b0943a177c559b2354b5396b0db8a2aaa1c391"
        },
        "downloads": -1,
        "filename": "pypgx-0.19.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0494aed5906449ce77ae1e2fe753bb33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 465833,
        "upload_time": "2022-09-13T00:18:45",
        "upload_time_iso_8601": "2022-09-13T00:18:45.348386Z",
        "url": "https://files.pythonhosted.org/packages/8d/9f/e4c60e1b7d77db852f4b2dfce09a9b800e2dd4d1e42c5c705dbe7561265a/pypgx-0.19.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "701dd599cd6fe3cc0c624d8bbe8872bf69c2940ba3c10fdcdc9dea6b11b3b52e",
          "md5": "67dc3348708b6a302ef55f0f84ac91eb",
          "sha256": "350bfc39182abf1021632e84b86925c6b616af3175cb1ea748d8c30230a88acc"
        },
        "downloads": -1,
        "filename": "pypgx-0.19.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67dc3348708b6a302ef55f0f84ac91eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 469503,
        "upload_time": "2022-09-13T00:18:48",
        "upload_time_iso_8601": "2022-09-13T00:18:48.005983Z",
        "url": "https://files.pythonhosted.org/packages/70/1d/d599cd6fe3cc0c624d8bbe8872bf69c2940ba3c10fdcdc9dea6b11b3b52e/pypgx-0.19.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.20.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b82ee2117a2d5816612d324ed6f6dbd3845a42b524069281d37457c711f4e36",
          "md5": "c99f60bd8ab09e51eb42f351058b9244",
          "sha256": "ad3b81a1fe388a70be81101061a5409b3cc0c947d0e44aceea898a6ea707dd67"
        },
        "downloads": -1,
        "filename": "pypgx-0.20.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c99f60bd8ab09e51eb42f351058b9244",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 465927,
        "upload_time": "2023-01-11T23:49:50",
        "upload_time_iso_8601": "2023-01-11T23:49:50.725828Z",
        "url": "https://files.pythonhosted.org/packages/2b/82/ee2117a2d5816612d324ed6f6dbd3845a42b524069281d37457c711f4e36/pypgx-0.20.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "578a469f27bb7eaedbc1e67ead1bff636b73f64f5c41a97bff9ac3026c1e36e3",
          "md5": "a69abe9dcca15dee741b94d94663ee0e",
          "sha256": "acd27985a7013077a912dc53f10253cb474422c321e694a7ee487d72f666caf3"
        },
        "downloads": -1,
        "filename": "pypgx-0.20.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a69abe9dcca15dee741b94d94663ee0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 469566,
        "upload_time": "2023-01-11T23:49:53",
        "upload_time_iso_8601": "2023-01-11T23:49:53.040662Z",
        "url": "https://files.pythonhosted.org/packages/57/8a/469f27bb7eaedbc1e67ead1bff636b73f64f5c41a97bff9ac3026c1e36e3/pypgx-0.20.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eacd34d9c48071b208c09ef559c2e8c303bc40ec545610cee8465c94ae9bfd6d",
          "md5": "709c614a0dba68e7412491dc535b511f",
          "sha256": "a034158f528211f43d209606826cf2400d7be759acfc3ae506471149210ab619"
        },
        "downloads": -1,
        "filename": "pypgx-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "709c614a0dba68e7412491dc535b511f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1491059,
        "upload_time": "2021-09-21T12:07:39",
        "upload_time_iso_8601": "2021-09-21T12:07:39.304678Z",
        "url": "https://files.pythonhosted.org/packages/ea/cd/34d9c48071b208c09ef559c2e8c303bc40ec545610cee8465c94ae9bfd6d/pypgx-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a8b1a8ab366216dae3537ce418a626536445c679c4aa19c78f6ae691e1dca1c",
          "md5": "1a7f6a8a45c304cd2b142586782fcd87",
          "sha256": "3907bed097fde74d16d011ae196f18fef5496d2a85274b143e772052ffee7aea"
        },
        "downloads": -1,
        "filename": "pypgx-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a7f6a8a45c304cd2b142586782fcd87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1479453,
        "upload_time": "2021-09-21T12:07:41",
        "upload_time_iso_8601": "2021-09-21T12:07:41.841963Z",
        "url": "https://files.pythonhosted.org/packages/9a/8b/1a8ab366216dae3537ce418a626536445c679c4aa19c78f6ae691e1dca1c/pypgx-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22333dab4d929569650614f5404feca8a769a67d62171a22a197e0d70df9161d",
          "md5": "60e59d1289ebd2f7c0f616947db8e942",
          "sha256": "6fff5875d7156a34ea42689d8ede9411e4f5bf44408d382ab138c5ae46671404"
        },
        "downloads": -1,
        "filename": "pypgx-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60e59d1289ebd2f7c0f616947db8e942",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10443920,
        "upload_time": "2021-10-02T06:43:42",
        "upload_time_iso_8601": "2021-10-02T06:43:42.626407Z",
        "url": "https://files.pythonhosted.org/packages/22/33/3dab4d929569650614f5404feca8a769a67d62171a22a197e0d70df9161d/pypgx-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f7eab7229ffdcf03b86f809416d1a4efd503758441aa431fe797457fe96be0",
          "md5": "d8dca2b206f69b0bb04a3c227a3f7eae",
          "sha256": "16c17f072aef1a1df192d45b43e6c8079190274a9c3fc7a93acd8a3a462d0614"
        },
        "downloads": -1,
        "filename": "pypgx-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8dca2b206f69b0bb04a3c227a3f7eae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10430849,
        "upload_time": "2021-10-02T06:43:48",
        "upload_time_iso_8601": "2021-10-02T06:43:48.589048Z",
        "url": "https://files.pythonhosted.org/packages/b6/f7/eab7229ffdcf03b86f809416d1a4efd503758441aa431fe797457fe96be0/pypgx-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e72a8e271381441da47719c988dde7bce3ebbf6f974e9e08add24955a8e9a887",
          "md5": "ffed4bac1a651bf66d2b96cb883236c7",
          "sha256": "8ed2867e35c9ffea2d704ab37daf90f4336d4a196e2bc757a8e2fe722437d4c2"
        },
        "downloads": -1,
        "filename": "pypgx-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffed4bac1a651bf66d2b96cb883236c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10446054,
        "upload_time": "2021-10-09T05:18:57",
        "upload_time_iso_8601": "2021-10-09T05:18:57.864909Z",
        "url": "https://files.pythonhosted.org/packages/e7/2a/8e271381441da47719c988dde7bce3ebbf6f974e9e08add24955a8e9a887/pypgx-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99e8333c910337e399a6f24a3f659d696df11eb39592043894a93bdd54b03b22",
          "md5": "918a972db30f70a01bc08cef409da577",
          "sha256": "0283663bf4339ad559023a001e68b7d371dad123e25616415531a4232e75837d"
        },
        "downloads": -1,
        "filename": "pypgx-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "918a972db30f70a01bc08cef409da577",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10433029,
        "upload_time": "2021-10-09T05:19:01",
        "upload_time_iso_8601": "2021-10-09T05:19:01.321795Z",
        "url": "https://files.pythonhosted.org/packages/99/e8/333c910337e399a6f24a3f659d696df11eb39592043894a93bdd54b03b22/pypgx-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6363eae3b238f7f909665fc927c901333b6771cbace74bba5ef81101390eaf4",
          "md5": "e8c9bfdbb77ed7d0467ac288716c7250",
          "sha256": "3b5a49d5002961739296272e034fefb5a45316843851bf5758fd1d19991fb4b1"
        },
        "downloads": -1,
        "filename": "pypgx-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8c9bfdbb77ed7d0467ac288716c7250",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12163447,
        "upload_time": "2021-10-23T08:58:25",
        "upload_time_iso_8601": "2021-10-23T08:58:25.786600Z",
        "url": "https://files.pythonhosted.org/packages/e6/36/3eae3b238f7f909665fc927c901333b6771cbace74bba5ef81101390eaf4/pypgx-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b328d76857a67c6621c040a69a385dd0a0c303593591f95e407bb83ac8ea31a6",
          "md5": "60216863bb6a134e6aec64eed2f71ec0",
          "sha256": "5f5685b476f4731907c7bc218e60ce521ea521ef6401b8da519d5ce9e75b8498"
        },
        "downloads": -1,
        "filename": "pypgx-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60216863bb6a134e6aec64eed2f71ec0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12150312,
        "upload_time": "2021-10-23T08:58:29",
        "upload_time_iso_8601": "2021-10-23T08:58:29.804888Z",
        "url": "https://files.pythonhosted.org/packages/b3/28/d76857a67c6621c040a69a385dd0a0c303593591f95e407bb83ac8ea31a6/pypgx-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594f9360c588ed6ff0bd8eba05db34f6a251eeffb0bb4cd263a1d6dc747ee289",
          "md5": "237709b410b101bd8c403905f61400b8",
          "sha256": "776fc7178dfc600a130d521cbd057bf4f44b27952ad5a84fdaa60893b38f8d61"
        },
        "downloads": -1,
        "filename": "pypgx-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "237709b410b101bd8c403905f61400b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12183855,
        "upload_time": "2021-11-20T02:20:17",
        "upload_time_iso_8601": "2021-11-20T02:20:17.602569Z",
        "url": "https://files.pythonhosted.org/packages/59/4f/9360c588ed6ff0bd8eba05db34f6a251eeffb0bb4cd263a1d6dc747ee289/pypgx-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb4fd591a486690076994fd0b92e277dbc8975adc010628d96da067ca064d1a9",
          "md5": "84f099cdff2f1b4039ce60bb0db117e2",
          "sha256": "145e4a7441eb0ae8a937ceccd398ea8b5a79b45f86270826254fa3421a3988d1"
        },
        "downloads": -1,
        "filename": "pypgx-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84f099cdff2f1b4039ce60bb0db117e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12170815,
        "upload_time": "2021-11-20T02:20:22",
        "upload_time_iso_8601": "2021-11-20T02:20:22.400757Z",
        "url": "https://files.pythonhosted.org/packages/eb/4f/d591a486690076994fd0b92e277dbc8975adc010628d96da067ca064d1a9/pypgx-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ee0647e87043a8b1f3aabbb22ffef13853b359c27298a5023ad32710705478a",
          "md5": "4f69feee184ef7f9ddb02ff7d43d57f2",
          "sha256": "357fd3750a274207c51cb382d23efda8740ca05cec91b74d1aa91129509173a9"
        },
        "downloads": -1,
        "filename": "pypgx-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f69feee184ef7f9ddb02ff7d43d57f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28992076,
        "upload_time": "2021-12-05T09:03:01",
        "upload_time_iso_8601": "2021-12-05T09:03:01.298511Z",
        "url": "https://files.pythonhosted.org/packages/1e/e0/647e87043a8b1f3aabbb22ffef13853b359c27298a5023ad32710705478a/pypgx-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5846d398dc3684d48ad0838ec0d6cd8c7205b1711c17fb7aba287dfe552b5ef6",
          "md5": "9591fa13d5c8a10ab87c1039531cf643",
          "sha256": "ead347f582f1514e63247c6696bd497549393e67cc9bc9174b0d7eb3bfa1d157"
        },
        "downloads": -1,
        "filename": "pypgx-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9591fa13d5c8a10ab87c1039531cf643",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28972693,
        "upload_time": "2021-12-05T09:03:07",
        "upload_time_iso_8601": "2021-12-05T09:03:07.951568Z",
        "url": "https://files.pythonhosted.org/packages/58/46/d398dc3684d48ad0838ec0d6cd8c7205b1711c17fb7aba287dfe552b5ef6/pypgx-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b82ee2117a2d5816612d324ed6f6dbd3845a42b524069281d37457c711f4e36",
        "md5": "c99f60bd8ab09e51eb42f351058b9244",
        "sha256": "ad3b81a1fe388a70be81101061a5409b3cc0c947d0e44aceea898a6ea707dd67"
      },
      "downloads": -1,
      "filename": "pypgx-0.20.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c99f60bd8ab09e51eb42f351058b9244",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 465927,
      "upload_time": "2023-01-11T23:49:50",
      "upload_time_iso_8601": "2023-01-11T23:49:50.725828Z",
      "url": "https://files.pythonhosted.org/packages/2b/82/ee2117a2d5816612d324ed6f6dbd3845a42b524069281d37457c711f4e36/pypgx-0.20.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "578a469f27bb7eaedbc1e67ead1bff636b73f64f5c41a97bff9ac3026c1e36e3",
        "md5": "a69abe9dcca15dee741b94d94663ee0e",
        "sha256": "acd27985a7013077a912dc53f10253cb474422c321e694a7ee487d72f666caf3"
      },
      "downloads": -1,
      "filename": "pypgx-0.20.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a69abe9dcca15dee741b94d94663ee0e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 469566,
      "upload_time": "2023-01-11T23:49:53",
      "upload_time_iso_8601": "2023-01-11T23:49:53.040662Z",
      "url": "https://files.pythonhosted.org/packages/57/8a/469f27bb7eaedbc1e67ead1bff636b73f64f5c41a97bff9ac3026c1e36e3/pypgx-0.20.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}