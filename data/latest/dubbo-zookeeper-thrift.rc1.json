{
  "info": {
    "author": "rocyuan",
    "author_email": "admin@rocyuan.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "======================================================\n\ndubbo_zookeeper_thrift :\n\nthriftServerManager = ThriftServerManager(\"127.0.0.1:2181\");\nthriftServerManager.getServiceServiceInfo(\"thrift:userService\");\n\n======================================================\n\n\nwhat is inside\n==============================\n\npython_zookeeper_thrift\n::\n * 为了dubbo而写的\n * python setup.py register; python setup.py sdist upload\n * 主要是从zookeeper中拿到服务器节点信息 (ip:port:serviceName)\n * 使得客户端的调用只需要 serviceName即可\n\n * `以 工厂方法替换了iportal里的 make_client过程,即动态生成thrift 里的 make_client()产生的实例`\n\n * ` 将 client实例静态缓存,应该可以加快iportal的访问效率 `\n\n\n\n\n * 这个项目所做的事 其实就是把dubbo源码里的这部分代码 用python 实现了而已,从而使得python的thrift客户端的调用\n   可以脱离IP而存在,不在去管提供服务提供者的IP和端口还有是否停止提供服务\n\n\nwhat is next\n==============================\n\n::\n\n    public class ZookeeperRegistry extends FailbackRegistry {\n\n        private final static Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);\n\n        private final static int DEFAULT_ZOOKEEPER_PORT = 2181;\n\n        private final static String DEFAULT_ROOT = \"dubbo\";\n\n        private final String        root;\n\n        private final Set<String> anyServices = new ConcurrentHashSet<String>();\n\n        private final ConcurrentMap<URL, ConcurrentMap<NotifyListener, ChildListener>> zkListeners = new ConcurrentHashMap<URL, ConcurrentMap<NotifyListener, ChildListener>>();\n\n        private final ZookeeperClient zkClient;\n\n        public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {\n            super(url);\n            if (url.isAnyHost()) {\n                throw new IllegalStateException(\"registry address == null\");\n            }\n            String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);\n            if (! group.startsWith(Constants.PATH_SEPARATOR)) {\n                group = Constants.PATH_SEPARATOR + group;\n            }\n            this.root = group;\n            zkClient = zookeeperTransporter.connect(url);\n            zkClient.addStateListener(new StateListener() {\n                public void stateChanged(int state) {\n                    if (state == RECONNECTED) {\n                        try {\n                            recover();\n                        } catch (Exception e) {\n                            logger.error(e.getMessage(), e);\n                        }\n                    }\n                }\n            });\n        }\n\n        public boolean isAvailable() {\n            return zkClient.isConnected();\n        }\n\n        public void destroy() {\n            super.destroy();\n            try {\n                zkClient.close();\n            } catch (Exception e) {\n                logger.warn(\"Failed to close zookeeper client \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doRegister(URL url) {\n            try {\n                zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to register \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doUnregister(URL url) {\n            try {\n                zkClient.delete(toUrlPath(url));\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to unregister \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doSubscribe(final URL url, final NotifyListener listener) {\n            try {\n                if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {\n                    String root = toRootPath();\n                    ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n                    if (listeners == null) {\n                        zkListeners.putIfAbsent(url, new ConcurrentHashMap<NotifyListener, ChildListener>());\n                        listeners = zkListeners.get(url);\n                    }\n                    ChildListener zkListener = listeners.get(listener);\n                    if (zkListener == null) {\n                        listeners.putIfAbsent(listener, new ChildListener() {\n                            public void childChanged(String parentPath, List<String> currentChilds) {\n                                for (String child : currentChilds) {\n                                    child = URL.decode(child);\n                                    if (! anyServices.contains(child)) {\n                                        anyServices.add(child);\n                                        subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child,\n                                                Constants.CHECK_KEY, String.valueOf(false)), listener);\n                                    }\n                                }\n                            }\n                        });\n                        zkListener = listeners.get(listener);\n                    }\n                    zkClient.create(root, false);\n                    List<String> services = zkClient.addChildListener(root, zkListener);\n                    if (services != null && services.size() > 0) {\n                        for (String service : services) {\n                            service = URL.decode(service);\n                            anyServices.add(service);\n                            subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service,\n                                    Constants.CHECK_KEY, String.valueOf(false)), listener);\n                        }\n                    }\n                } else {\n                    List<URL> urls = new ArrayList<URL>();\n                    for (String path : toCategoriesPath(url)) {\n                        ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n                        if (listeners == null) {\n                            zkListeners.putIfAbsent(url, new ConcurrentHashMap<NotifyListener, ChildListener>());\n                            listeners = zkListeners.get(url);\n                        }\n                        ChildListener zkListener = listeners.get(listener);\n                        if (zkListener == null) {\n                            listeners.putIfAbsent(listener, new ChildListener() {\n                                public void childChanged(String parentPath, List<String> currentChilds) {\n                                    ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));\n                                }\n                            });\n                            zkListener = listeners.get(listener);\n                        }\n                        zkClient.create(path, false);\n                        List<String> children = zkClient.addChildListener(path, zkListener);\n                        if (children != null) {\n                            urls.addAll(toUrlsWithEmpty(url, path, children));\n                        }\n                    }\n                    notify(url, listener, urls);\n                }\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to subscribe \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doUnsubscribe(URL url, NotifyListener listener) {\n            ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n            if (listeners != null) {\n                ChildListener zkListener = listeners.get(listener);\n                if (zkListener != null) {\n                    zkClient.removeChildListener(toUrlPath(url), zkListener);\n                }\n            }\n        }\n\n        public List<URL> lookup(URL url) {\n            if (url == null) {\n                throw new IllegalArgumentException(\"lookup url == null\");\n            }\n            try {\n                List<String> providers = new ArrayList<String>();\n                for (String path : toCategoriesPath(url)) {\n                        List<String> children = zkClient.getChildren(path);\n                        if (children != null) {\n                            providers.addAll(children);\n                        }\n                }\n                return toUrlsWithoutEmpty(url, providers);\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to lookup \" + url + \" from zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        private String toRootDir() {\n            if (root.equals(Constants.PATH_SEPARATOR)) {\n                return root;\n            }\n            return root + Constants.PATH_SEPARATOR;\n        }\n\n        private String toRootPath() {\n            return root;\n        }\n\n        private String toServicePath(URL url) {\n            String name = url.getServiceInterface();\n            if (Constants.ANY_VALUE.equals(name)) {\n                return toRootPath();\n            }\n            return toRootDir() + URL.encode(name);\n        }\n\n        private String[] toCategoriesPath(URL url) {\n            String[] categroies;\n            if (Constants.ANY_VALUE.equals(url.getParameter(Constants.CATEGORY_KEY))) {\n                categroies = new String[] {Constants.PROVIDERS_CATEGORY, Constants.CONSUMERS_CATEGORY,\n                        Constants.ROUTERS_CATEGORY, Constants.CONFIGURATORS_CATEGORY};\n            } else {\n                categroies = url.getParameter(Constants.CATEGORY_KEY, new String[] {Constants.DEFAULT_CATEGORY});\n            }\n            String[] paths = new String[categroies.length];\n            for (int i = 0; i < categroies.length; i ++) {\n                paths[i] = toServicePath(url) + Constants.PATH_SEPARATOR + categroies[i];\n            }\n            return paths;\n        }\n\n        private String toCategoryPath(URL url) {\n            return toServicePath(url) + Constants.PATH_SEPARATOR + url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);\n        }\n\n        private String toUrlPath(URL url) {\n            return toCategoryPath(url) + Constants.PATH_SEPARATOR + URL.encode(url.toFullString());\n        }\n\n        private List<URL> toUrlsWithoutEmpty(URL consumer, List<String> providers) {\n            List<URL> urls = new ArrayList<URL>();\n            if (providers != null && providers.size() > 0) {\n                for (String provider : providers) {\n                    provider = URL.decode(provider);\n                    if (provider.contains(\"://\")) {\n                        URL url = URL.valueOf(provider);\n                        if (UrlUtils.isMatch(consumer, url)) {\n                            urls.add(url);\n                        }\n                    }\n                }\n            }\n            return urls;\n        }\n\n        private List<URL> toUrlsWithEmpty(URL consumer, String path, List<String> providers) {\n            List<URL> urls = toUrlsWithoutEmpty(consumer, providers);\n            if (urls == null || urls.isEmpty()) {\n                int i = path.lastIndexOf('/');\n                String category = i < 0 ? path : path.substring(i + 1);\n                URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);\n                urls.add(empty);\n            }\n            return urls;\n        }\n\n        static String appendDefaultPort(String address) {\n            if (address != null && address.length() > 0) {\n                int i = address.indexOf(':');\n                if (i < 0) {\n                    return address + \":\" + DEFAULT_ZOOKEEPER_PORT;\n                } else if (Integer.parseInt(address.substring(i + 1)) == 0) {\n                    return address.substring(0, i + 1) + DEFAULT_ZOOKEEPER_PORT;\n                }\n            }\n            return address;\n        }\n\n    }\n\n\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.rocyuan.com",
    "keywords": "python wechat dubbo_zookeeper_thrift api",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dubbo_zookeeper_thrift",
    "package_url": "https://pypi.org/project/dubbo_zookeeper_thrift/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dubbo_zookeeper_thrift/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.rocyuan.com"
    },
    "release_url": "https://pypi.org/project/dubbo_zookeeper_thrift/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "a python liberaries  for dubbo_zookeeper_thrift tutorial.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1962894,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8d1129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2",
          "md5": "4fc924c0c475c488ea0c2f437083ed07",
          "sha256": "96a156312fee4c21de67c3bb6aa05bf3e15d1037cb4bdbfbc7e84137f3ce25fd"
        },
        "downloads": -1,
        "filename": "dubbo_zookeeper_thrift-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4fc924c0c475c488ea0c2f437083ed07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10130,
        "upload_time": "2016-02-18T09:36:22",
        "upload_time_iso_8601": "2016-02-18T09:36:22.882284Z",
        "url": "https://files.pythonhosted.org/packages/c8/d1/129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2/dubbo_zookeeper_thrift-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8d1129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2",
        "md5": "4fc924c0c475c488ea0c2f437083ed07",
        "sha256": "96a156312fee4c21de67c3bb6aa05bf3e15d1037cb4bdbfbc7e84137f3ce25fd"
      },
      "downloads": -1,
      "filename": "dubbo_zookeeper_thrift-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4fc924c0c475c488ea0c2f437083ed07",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10130,
      "upload_time": "2016-02-18T09:36:22",
      "upload_time_iso_8601": "2016-02-18T09:36:22.882284Z",
      "url": "https://files.pythonhosted.org/packages/c8/d1/129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2/dubbo_zookeeper_thrift-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}