{
  "info": {
    "author": "cml",
    "author_email": "caimengli0660@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# [Yz-RPC](https://github.com/ml444/yz-rpc)\n--------------\n\n## Introduction\nA gRPC framework for automatically generating protobuf files.\n一个自动生成protobuf文件的grpc框架。\n\nThe purpose of `yzrpc` is to write code in a development method similar \nto http WEB when developing back-end RPC services. The command line generates \nprotobuf with one click without paying attention to the writing on the protobuf file. \nAt the same time, it provides a code structure specification reference.\n\nyzrpc 目的为了开发后端RPC服务时，能够以类似http WEB的开发方式编写代码，\n命令行一键生成protobuf，而不必过关注protobuf协议文件上的编写，\n同时提供一种代码结构规范参考。\n\n\n## Quick start\n可以通过`createproject`和`createtapp`两个命令快速创建工程和内部的接口应用模块。\n**安装模块**\n```shell\n$ pip install yzrpc\n```\n示例：\n1. 创建工程：\n    ```shell\n    $ yzrpc createproject myproject\n    ```\n    **注意：** *创建项目时会检测当前目录是否与项目名同名，\n    如果同名默认已经创建工程根目录，会询问是否覆盖该工程。*\n\n2. 创建工程内部应用：\n    ```shell\n    $ yzrpc createapp myapp01 -D ./myproject/src\n\n    # 或者\n    $ cd myproject\n    $ yzrpc createapp myapp01\n    ```\n\n    经过`createproject` 和 `createapp`两个命令后，会产生如下的代码结构：\n    ```\n    .\n    ├── docs\t\t        说明文档、接口文档等文档的存放目录\n    ├── migrations\t\t    数据表迁移文件存放目录\n    ├── src\n    │   ├── apps 接口应用程序的主目录\n    │   │   ├── __init__.py\n    │   │   ├── myapp01\n    │   │       ├── __init__.py\n    │   │       ├── controllers.py  控制层：封装数据交互操作\n    │   │       ├── models.py       模型层：实现数据表与模型的定义\n    │   │       ├── schemas.py      模式层：定义接口数据参数\n    │   │       ├── tests.py        单元测试文件\n    │   │       └── views.py        视图层：接口定义层\n    │   ├── __init__.py\n    │   ├── conf/\t\t    配置文件的存放目录\n    │   ├── const/\t\t    公共常量存放目录\n    │   ├── protos/\t\t    protobuf文件存放目录\n    │   ├── services/\t\t通过grpc-tools生成的服务调用模块的存放目录\n    │   ├── utils/\t\t    抽离出的公共代码模块存放目录\n    │   ├── settings.py\t程序的设置文件\n    │   └── main.py\t\t程序的入口文件\n    ├── .gitignore\n    ├── requirements.txt\n    └── README.md\n    ```\n\n    生成的MVCS(`models`,`views`, `controllers`, `schemas`)模版中，\n    需要注意`schemas.py`和`views.py`，因为它们是生成protobuf的关键。\n\n    在生成的代码模版中，已经提供相关的示例：\n    `schemas.py`:\n    ```python\n    from enum import Enum\n    from typing import (\n        Optional, Any, List, Tuple, Dict,\n        Mapping, Union, Sequence, Iterable\n    )\n    from yzrpc.schema import SchemaBase\n\n\n    class CommonBase(SchemaBase):\n        class Config:\n            orm_mode = True\n\n\n    class EnumExample(Enum):\n        A = 1\n        B = 2\n        C = 3\n\n\n    class EmbedInfo(CommonBase):\n        name: str\n        age: int\n\n\n    class SchemaExample(CommonBase):\n        int_exa: int\n        str_exa: str\n        bool_exa: bool\n        float_exa: float\n        bytes_exa: bytes\n        tuple_exa: tuple\n        list_exa: list\n        dict_exa: dict\n        enum_exa: EnumExample\n        embed_exa: EmbedInfo\n\n        exa_any: Any\n        exa_list: List\n        exa_tuple: Tuple\n        exa_dict: Dict[str, int]\n        exa_mapping: Mapping[str, int]\n        exa_list_embed: List\n        exa_sequence: Sequence[int]\n        exa_iterable: Iterable[str]\n        exa_list_multi: List[EmbedInfo]\n        exa_union: Union[int, EmbedInfo, EnumExample, str]  # 不推荐\n        exa_optional: Optional[EmbedInfo]                   # 不推荐\n        exa_optional_multi: Optional[EmbedInfo]             # 不推荐\n        exa_optional_multi_l: Optional[list]                # 不推荐\n\n    ```\n    `schemas.py`是继承于`pydantic`这个库来进行类型检测的，\n    在`schemas.py`中定义rpc接口的请求类型和响应类型。\n    **注意：** 请求类型和响应类型必须继承于`SchemaBase`这个基类。\n\n    `views.py`:\n    ```python\n    from typing import Iterable, Iterator\n    from yzrpc.servicer import ServicerBase, GRPCMethod\n\n    # from src.services import myapp01_pb2\n    # from src.services import myapp01_pb2_grpc\n\n    from .schemas import SchemaExample\n\n\n    class Myapp01Servicer(ServicerBase):\n        @GRPCMethod(before_requests=[], after_responses=[])\n        def get_one(self, request: SchemaExample, context) -> SchemaExample:\n            return request\n\n        @GRPCMethod()\n        def get_some(self, request: Iterator[SchemaExample], context) -> Iterable[SchemaExample]:\n            return request\n\n        @GRPCMethod()\n        def list_some(self, request: SchemaExample, context) -> Iterable[SchemaExample]:\n            pass\n\n        @GRPCMethod()\n        def update_some(self, request: Iterator[SchemaExample], context) -> SchemaExample:\n            pass\n    ```\n    需要变成RPC接口的方法用`GRPCMethod()`封装，可传入`before_requests`和`after_responses`参数，作为该接口的预处理操作。\n    **注意：** 请求参数的和返回参数的类型标注不可忽略不写，该类型标注是生成protobuf协议的service数据的关键。\n\n3. 在app的MVCS模块编写相关的业务代码后，运行命令生成protobuf文件:\n    ```shell\n    $ yzrpc generateproto\n    ```\n    ```shell\n    $ tree ./src/protos \n    ./src/protos\n    └── myapp01.proto\n    ```\n\n4. 根据protobuf文件生成pb模块：\n    ```shell\n    $ yzrpc generatemodule\n\n    $ tree ./src/services \n    ./src/services\n    ├── __init__.py\n    ├── myapp01_pb2.py\n    └── myapp01_pb2_grpc.py\n    ```\n\n5. 编写单元测试\n    在`myproject/src/apps/myapp01/tests.py`中，提供了单元测试模版：\n    ```python\n    import pytest\n    from yzrpc.tests import *\n\n\n    from src.services.myapp01_pb2 import SchemaExample\n\n\n    @pytest.fixture(scope='module')\n    def grpc_add_to_server():\n        from src.services.myapp01_pb2_grpc import add_Myapp01Servicer_to_server\n        return add_Myapp01Servicer_to_server\n\n\n    @pytest.fixture(scope='module')\n    def current_servicer():\n        from .views import Myapp01Servicer\n        return Myapp01Servicer\n\n\n    @pytest.fixture(scope='module')\n    def grpc_stub(grpc_channel):\n        from src.services.myapp01_pb2_grpc import Myapp01Stub\n\n        return Myapp01Stub(grpc_channel)\n\n    # 测试用例\n    def test_get_one(grpc_stub):\n        request = SchemaExample(int_exa=1, str_exa='test')\n        context = MockContext()\n        response = grpc_stub.get_one(request, context)\n        assert isinstance(response, SchemaExample)\n        assert response.int_exa == 1\n        assert response.str_exa == 'test'\n    ```\n    开发人员只需关注最下面的测试用例即可，之上的是根据app不同自动导入的模块。无需理会。\n    开发人员根据需要扩展测试用例。\n    该测试模块是基于`pytest`构建的，运行测试时，需要安装`pytest`。\n\n    运行测试：\n    ```shell\n    $ yzrpc runtest\n    ```\n    该命令会自动搜索项目下的所有`tests.py`文件。\n\n6. 启动服务\n    ```shell\n    $ python src/main.py\n    ===>当前环境为：dev!导入的配置文件为：config_dev.ini\n    Starting server at 2021-04-23 11:35:28.902143\n    Server is listening port 50051\n    Registered handlers:\n    ===> -------------->myapp01<---------------\n    ===> Myapp01: get_one(SchemaExample) -> SchemaExample\n    ===> Myapp01: get_some(SchemaExample) -> SchemaExample\n    ===> Myapp01: list_some(SchemaExample) -> SchemaExample\n    ===> Myapp01: update_some(SchemaExample) -> SchemaExample\n    ```\n    服务的启动参数有:\n    - --host=localhost\n    - --port=50051\n    - --max_workers=1   # 最大线程数\n    - --autoreload      # 自动重载功能，开发阶段使用\n    - --async           # 该参数启动异步协程方式\n\n    这些参数都封装在settings里，可以根据需要修改配置。\n\n7. 客户端调用\n    ```python\n    from yzrpc.client import Client\n    from src.apps.myapp01.schemas import SchemaExample\n\n    with Client('localhost:50051', 'myapp01', 'Myapp1') as client:\n        request = SchemaExample(str_exa='testing', ...)\n        response = client.call('get_one', request)\n        print(response)\n        print(type(response))\n        print(response.str_exa)\n    ```\n    或者：\n    ```python\n    from yzrpc.client import Client\n    from src.apps.myapp01.schemas import SchemaExample\n\n    client = Client('localhost:50051', 'myapp01', 'Myapp1')\n    request = SchemaExample(str_exa='testing', ...)\n    response = client.call('get_one', request)\n    print(response)\n    print(type(response))\n    print(response.str_exa)\n    client.close()\n    ```\n    根据具体业务开发需求进行二次封装。\n\n## Documentation\n\n[暂无](https://github.com/ml444/yz-rpc/README.md).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ml444/yz-rpc",
    "keywords": "rpc,grpc,async,yzrpc",
    "license": "Apache License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yzrpc",
    "package_url": "https://pypi.org/project/yzrpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/yzrpc/",
    "project_urls": {
      "Homepage": "https://github.com/ml444/yz-rpc"
    },
    "release_url": "https://pypi.org/project/yzrpc/0.1/",
    "requires_dist": [
      "grpcio (>=1.35.0)",
      "grpcio-tools (>=1.35.0)",
      "Jinja2 (<3,>=2.11.3)",
      "pydantic (<2,>=1.8)"
    ],
    "requires_python": ">=3.6",
    "summary": "A gRPC framework for automatically generating protobuf files.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10181447,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2ab2fda09f645d0b8a7660cfc2cc3bd5e4106e7bad18ef293058b1f45db5c7d",
          "md5": "2d88eb761b3eeefa5d47b4ed74f79c23",
          "sha256": "ad5958b98702c0ace8e23085944f31c7c7d7a27612d1afb16477a8b2083ee27c"
        },
        "downloads": -1,
        "filename": "yzrpc-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d88eb761b3eeefa5d47b4ed74f79c23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 130789,
        "upload_time": "2021-04-27T03:35:04",
        "upload_time_iso_8601": "2021-04-27T03:35:04.174609Z",
        "url": "https://files.pythonhosted.org/packages/b2/ab/2fda09f645d0b8a7660cfc2cc3bd5e4106e7bad18ef293058b1f45db5c7d/yzrpc-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2ab2fda09f645d0b8a7660cfc2cc3bd5e4106e7bad18ef293058b1f45db5c7d",
        "md5": "2d88eb761b3eeefa5d47b4ed74f79c23",
        "sha256": "ad5958b98702c0ace8e23085944f31c7c7d7a27612d1afb16477a8b2083ee27c"
      },
      "downloads": -1,
      "filename": "yzrpc-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2d88eb761b3eeefa5d47b4ed74f79c23",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 130789,
      "upload_time": "2021-04-27T03:35:04",
      "upload_time_iso_8601": "2021-04-27T03:35:04.174609Z",
      "url": "https://files.pythonhosted.org/packages/b2/ab/2fda09f645d0b8a7660cfc2cc3bd5e4106e7bad18ef293058b1f45db5c7d/yzrpc-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}