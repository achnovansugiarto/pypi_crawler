{
  "info": {
    "author": "Andrew Chen Wang",
    "author_email": "acwangpython@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "==================\nDjango Async Redis\n==================\n\n\n.. image:: https://img.shields.io/pypi/v/django-async-redis.svg\n        :target: https://pypi.python.org/pypi/django-async-redis\n\n.. image:: https://travis-ci.com/Andrew-Chen-Wang/django-async-redis.svg?branch=master\n        :target: https://travis-ci.com/Andrew-Chen-Wang/django-async-redis?branch=master\n\n.. image:: https://readthedocs.org/projects/django-async-redis/badge/?version=latest\n        :target: https://django-async-redis.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\nIntroduction\n------------\n\ndjango-async-redis is a full featured Redis cache and session backend for Django.\n\n* Free software: Apache Software License 2.0\n* Documentation: https://django-async-redis.readthedocs.io.\n\nRequirements\n------------\n\n- `Python`_ 3.7+\n- `Django`_ 3.2+\n- `redis-py`_ 4.2+\n- `Redis server`_ 2.8+\n\n.. _Python: https://www.python.org/downloads/\n.. _Django: https://www.djangoproject.com/download/\n.. _redis-py: https://pypi.org/project/redis/\n.. _Redis server: https://redis.io/download\n\nUser guide\n----------\n\nInstallation\n~~~~~~~~~~~~\n\nInstall with pip:\n\n.. code-block:: console\n\n    $ python -m pip install django-async-redis\n\nConfigure as cache backend\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo start using django-async-redis, you should change your Django cache settings to\nsomething like:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            \"BACKEND\": \"django_async_redis.cache.RedisCache\",\n            \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n            \"OPTIONS\": {\n                \"CLIENT_CLASS\": \"django_async_redis.client.DefaultClient\",\n            }\n        }\n    }\n\ndjango-async-redis uses the aioredis native URL notation for connection strings, it\nallows better interoperability and has a connection string in more \"standard\"\nway. Some examples:\n\n- ``redis://[:password]@localhost:6379/0``\n- ``rediss://[:password]@localhost:6379/0``\n- ``unix://[:password]@/path/to/socket.sock?db=0``\n\nThree URL schemes are supported:\n\n- ``redis://``: creates a normal TCP socket connection\n- ``rediss://``: creates a SSL wrapped TCP socket connection\n- ``unix://`` creates a Unix Domain Socket connection\n\nThere are several ways to specify a database number:\n\n- A ``db`` querystring option, e.g. ``redis://localhost?db=0``\n- If using the ``redis://`` scheme, the path argument of the URL, e.g.\n  ``redis://localhost/0``\n\nAdvanced usage\n--------------\n\nPickle version\n~~~~~~~~~~~~~~\n\nFor almost all values, django-async-redis uses pickle to serialize objects.\n\nThe latest available version of pickle is used by default. If you want set a\nconcrete version, you can do it, using ``PICKLE_VERSION`` option:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            # ...\n            \"OPTIONS\": {\n                \"PICKLE_VERSION\": -1  # Use the latest protocol version\n            }\n        }\n    }\n\nMemcached exceptions behavior\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn some situations, when Redis is only used for cache, you do not want\nexceptions when Redis is down. This is default behavior in the memcached\nbackend and it can be emulated in django-async-redis.\n\nFor setup memcached like behaviour (ignore connection exceptions), you should\nset ``IGNORE_EXCEPTIONS`` settings on your cache configuration:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            # ...\n            \"OPTIONS\": {\n                \"IGNORE_EXCEPTIONS\": True,\n            }\n        }\n    }\n\nAlso, you can apply the same settings to all configured caches, you can set the global flag in\nyour settings:\n\n.. code-block:: python\n\n    DJANGO_ASYNC_REDIS_IGNORE_EXCEPTIONS = True\n\nLog Ignored Exceptions\n~~~~~~~~~~~~~~~~~~~~~~\n\nWhen ignoring exceptions with ``IGNORE_EXCEPTIONS`` or\n``DJANGO_ASYNC_REDIS_IGNORE_EXCEPTIONS``, you may optionally log exceptions using the\nglobal variable ``DJANGO_ASYNC_REDIS_LOG_IGNORED_EXCEPTIONS`` in your settings file::\n\n    DJANGO_ASYNC_REDIS_LOG_IGNORED_EXCEPTIONS = True\n\nIf you wish to specify the logger in which the exceptions are output, simply\nset the global variable ``DJANGO_ASYNC_REDIS_LOGGER`` to the string name and/or path\nof the desired logger. This will default to ``__name__`` if no logger is\nspecified and ``DJANGO_ASYNC_REDIS_LOG_IGNORED_EXCEPTIONS`` is ``True``::\n\n    DJANGO_ASYNC_REDIS_LOGGER = 'some.specified.logger'\n\nInfinite timeout\n~~~~~~~~~~~~~~~~\n\ndjango-async-redis comes with infinite timeouts support out of the box.\nAnd it behaves in the same way as the Django BaseCache backend specifies:\n\n- ``timeout=0`` expires the value immediately.\n- ``timeout=None`` infinite timeout\n\n.. code-block:: python\n\n    await cache.aset(\"key\", \"value\", timeout=None)\n\nGet ttl (time-to-live) from key\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWith Redis, you can access to ttl of any stored key, for it,\ndjango-async-redis exposes ``attl`` function.\n\nIt returns:\n\n- 0 if key does not exists (or already expired).\n- None for keys that exists but does not have any expiration.\n- ttl value for any volatile key (any key that has expiration).\n\n.. code-block:: pycon\n\n    >>> from django.core.cache import cache\n    >>> await cache.aset(\"foo\", \"value\", timeout=25)\n    >>> await cache.attl(\"foo\")\n    25\n    >>> await cache.attl(\"not-existent\")\n    0\n\nExpire & Persist\n~~~~~~~~~~~~~~~~\n\nAdditionally to the simple ttl query, you can send persist a concrete key or\nspecify a new expiration timeout using the ``apersist`` and ``aexpire``\nmethods:\n\n.. code-block:: pycon\n\n    >>> await cache.aset(\"foo\", \"bar\", timeout=22)\n    >>> await cache.attl(\"foo\")\n    22\n    >>> await cache.apersist(\"foo\")\n    >>> await cache.attl(\"foo\")\n    None\n\n.. code-block:: pycon\n\n    >>> await cache.aset(\"foo\", \"bar\", timeout=22)\n    >>> await cache.aexpire(\"foo\", timeout=5)\n    >>> await cache.attl(\"foo\")\n    5\n\nScan & Delete keys in bulk\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndjango-async-redis comes with some additional methods that help with searching or\ndeleting keys using glob patterns.\n\n.. code-block:: pycon\n\n    >>> from django.core.cache import cache\n    >>> await cache.akeys(\"foo_*\")\n    [\"foo_1\", \"foo_2\"]\n\nA simple search like this will return all matched values. In databases with a\nlarge number of keys this isn't suitable method. Instead, you can use the\n``aiter_keys`` function that works like the ``akeys`` function but uses Redis\nserver side cursors. Calling ``aiter_keys`` will return a generator that you can\nthen iterate over efficiently.\n\n.. code-block:: pycon\n\n    >>> from django.core.cache import cache\n    >>> await cache.aiter_keys(\"foo_*\")\n    <async_generator object algo at 0x7ffa9c2713a8>\n    >>> (await cache.aiter_keys(\"foo_*\")).__anext__()\n    \"foo_1\"\n\nFor deleting keys, you should use ``adelete_pattern`` which has the same glob\npattern syntax as the ``akeys`` function and returns the number of deleted keys.\n\n.. code-block:: pycon\n\n    >>> from django.core.cache import cache\n    >>> await cache.adelete_pattern(\"foo_*\")\n\nRedis native commands\n~~~~~~~~~~~~~~~~~~~~~\n\ndjango-async-redis has limited support for some Redis atomic operations, such as the\ncommands ``SETNX`` and ``INCR``.\n\nYou can use the ``SETNX`` command through the backend ``aset()`` method with\nthe ``nx`` parameter:\n\n.. code-block:: pycon\n\n    >>> from django.core.cache import cache\n    >>> await cache.aset(\"key\", \"value1\", nx=True)\n    True\n    >>> await cache.aset(\"key\", \"value2\", nx=True)\n    False\n    >>> await cache.aget(\"key\")\n    \"value1\"\n\nAlso, the ``aincr`` and ``adecr`` methods use Redis atomic\noperations when the value that a key contains is suitable for it.\n\nNote that setting ``xx`` to True overrides the ``nx`` flag according\nto aioredis.\n\nConnection pools\n~~~~~~~~~~~~~~~~\n\nBehind the scenes, django-async-redis uses the underlying aioredis connection pool\nimplementation and exposes a simple way to configure it. Alternatively, you\ncan directly customize a connection/connection pool creation for a backend.\n\nThe default aioredis behavior is to not close connections, recycling them when\npossible.\n\nNotes\n-----\n\nSince the majority of this code was ported from django-redis, there was one\ncase that had needed a monkeypatch. In ``django_async_redis.util``, we implement\n``CacheKey`` which subclasses ``str`` which helps us know if a cache key was\nalready created. Since aioredis, checks if the cache key is of type str\n(and others), I had to monkeypatch that check so that a CacheKey instance could\nalso be accepted.\n\nCredit\n~~~~~~\n\n- Hey, I'm Andrew. I'm busy in college, but I wanted to help contribute\n  to Django's async ecosystem.\n- Lots of code and docs is taken from django-redis, including the tests.\n  I just needed to port everything to asyncio and aioredis.\n- I used cookiecutter-pypackage to generate this project.\n- Thank you to Python Discord server's async topical chat\n  for helping me understand when to use coroutines over sync functions\n  and @Bast and @hmmmm in general because they're OG.\n\n\n=======\nHistory\n=======\n\n0.1.0 (2020-09-25)\n------------------\n\n* First release on PyPI.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Andrew-Chen-Wang/django-async-redis",
    "keywords": "django-async-redis",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-async-redis",
    "package_url": "https://pypi.org/project/django-async-redis/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-async-redis/",
    "project_urls": {
      "Homepage": "https://github.com/Andrew-Chen-Wang/django-async-redis"
    },
    "release_url": "https://pypi.org/project/django-async-redis/0.2.0/",
    "requires_dist": [
      "django (>=3.2)",
      "redis (>=4.2.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Full featured async Redis cache backend for Django.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16379563,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "526ac5a0dbf37c502c5f5213fa5ba86859af0b7aea315c65fe5f54a4d856a25e",
          "md5": "5accb0a0999ba7b5b6e09bf21e1dabdf",
          "sha256": "994569dc7f906670f1e871a56c52a75ec080e667776938e8eaef8ebff8e95210"
        },
        "downloads": -1,
        "filename": "django_async_redis-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5accb0a0999ba7b5b6e09bf21e1dabdf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 15913,
        "upload_time": "2020-10-06T18:05:18",
        "upload_time_iso_8601": "2020-10-06T18:05:18.598965Z",
        "url": "https://files.pythonhosted.org/packages/52/6a/c5a0dbf37c502c5f5213fa5ba86859af0b7aea315c65fe5f54a4d856a25e/django_async_redis-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eca8087f48fc8ea46e88c941a18bbe078d2fc63327e27792158b7c5702d2ddf7",
          "md5": "ee2439226131188348a4177fe579bb71",
          "sha256": "b25525110abc5882a8acb0400b28a28063347419c42e2a98526afe2258f48247"
        },
        "downloads": -1,
        "filename": "django-async-redis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee2439226131188348a4177fe579bb71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23752,
        "upload_time": "2020-10-06T18:05:21",
        "upload_time_iso_8601": "2020-10-06T18:05:21.414863Z",
        "url": "https://files.pythonhosted.org/packages/ec/a8/087f48fc8ea46e88c941a18bbe078d2fc63327e27792158b7c5702d2ddf7/django-async-redis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caf9e6886b0ddde55ccad7b395b840045e64ae77888eafb5febbaa8fbbe242ce",
          "md5": "c33c43efbf1d33bcac23a065f2ce50b0",
          "sha256": "d8d1eb6cf3b35708373beb2e18800f2eed3ee5dd4abc8b8e266ca5577f868f1e"
        },
        "downloads": -1,
        "filename": "django_async_redis-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c33c43efbf1d33bcac23a065f2ce50b0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 20957,
        "upload_time": "2023-01-10T19:54:32",
        "upload_time_iso_8601": "2023-01-10T19:54:32.003579Z",
        "url": "https://files.pythonhosted.org/packages/ca/f9/e6886b0ddde55ccad7b395b840045e64ae77888eafb5febbaa8fbbe242ce/django_async_redis-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cc32516a7043d8e9386db34b0ae4d60913a838469f7576956af77932760445d",
          "md5": "933c3c7aee56bc048a51ebe047a2f991",
          "sha256": "af6ac95b1c0ce10ce14cb61e0d36ae92c8bb2e56eb2a4545154dd476de933d07"
        },
        "downloads": -1,
        "filename": "django-async-redis-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "933c3c7aee56bc048a51ebe047a2f991",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28250,
        "upload_time": "2023-01-10T19:54:33",
        "upload_time_iso_8601": "2023-01-10T19:54:33.166275Z",
        "url": "https://files.pythonhosted.org/packages/9c/c3/2516a7043d8e9386db34b0ae4d60913a838469f7576956af77932760445d/django-async-redis-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "caf9e6886b0ddde55ccad7b395b840045e64ae77888eafb5febbaa8fbbe242ce",
        "md5": "c33c43efbf1d33bcac23a065f2ce50b0",
        "sha256": "d8d1eb6cf3b35708373beb2e18800f2eed3ee5dd4abc8b8e266ca5577f868f1e"
      },
      "downloads": -1,
      "filename": "django_async_redis-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c33c43efbf1d33bcac23a065f2ce50b0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 20957,
      "upload_time": "2023-01-10T19:54:32",
      "upload_time_iso_8601": "2023-01-10T19:54:32.003579Z",
      "url": "https://files.pythonhosted.org/packages/ca/f9/e6886b0ddde55ccad7b395b840045e64ae77888eafb5febbaa8fbbe242ce/django_async_redis-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cc32516a7043d8e9386db34b0ae4d60913a838469f7576956af77932760445d",
        "md5": "933c3c7aee56bc048a51ebe047a2f991",
        "sha256": "af6ac95b1c0ce10ce14cb61e0d36ae92c8bb2e56eb2a4545154dd476de933d07"
      },
      "downloads": -1,
      "filename": "django-async-redis-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "933c3c7aee56bc048a51ebe047a2f991",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 28250,
      "upload_time": "2023-01-10T19:54:33",
      "upload_time_iso_8601": "2023-01-10T19:54:33.166275Z",
      "url": "https://files.pythonhosted.org/packages/9c/c3/2516a7043d8e9386db34b0ae4d60913a838469f7576956af77932760445d/django-async-redis-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}