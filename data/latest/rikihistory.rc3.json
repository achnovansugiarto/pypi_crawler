{
  "info": {
    "author": "John Besse",
    "author_email": "bessej1@nku.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "#Page History Feature\n\nImplementer: \nJohn Besse\n\nPython: >=3.7\n\n\n#Problem\n\nThere was no way to see a record of changes made to a page in Riki system\n\n#Solution\n\nA history markdown file is created in parallel to the page markdown file in a content folder (e.g. content\\page.md) it \nis tracking and stored with other history files in a history folder\n\n#Requirement\n\nA user would like a history page in order to see a record of changes made to a Riki page.\n\n#Usage Example 1\n\n    Input:\trecord_history(r'content\\fakepageurl.md', 'action', 'Claude')\n    Output:\t'content/history\\\\fakepageurl_hist.md'\n    Text appended to content\\history\\fakepageurl_hist.md: â€˜action by Claude Sat May 2 18:53:32 2020â€™\n\n#Usage Example 2\n\n    Input:\thisturl('wiki-page')\n    Output:\t'history/wiki-page_hist'\n\n#Usage Example 3\n\n    Navigate to directory with rkhist.py\n    Command Line Input: python rkhist.py -e content\\fakepageurl.md moved Ted\n    Output: none\n    Text appended to content\\history\\fakepageurl_hist.md: â€˜moved by Ted Sun May 10 10:56:30 2020â€™ \n\n\n#User Manual\n\n#In Riki sysem\n\n    1. Call record_history() in any Riki Flask route with path of page object, desired action description, and user ID.\n    2. A history page markdown file is created with provided information in content\\history subfolder.\n\n#Command line\n\n    Run rkhist.py in its directory with -e or --entry option and 3 arguments to make a history file\n        1. path: file name of page markdown file in content directory (ex: content\\fakepageurl.md)\n        2. action: a descripton of action performed on page (ex: edited)\n        3. user: user name or ID (ex: Ted)\n\n#Implementation Goal\n\nTo create a module that when a page is edited or moved an entry composed of the action performed and the userâ€™s name is \nwritten to a history markdown file via a file path derived from a Page object. \n\n#Implementation Details\n\n   A public function was chosen to implement this feature so that it could be included into any Flask route API with one\n    line of code in the Riki system. Markdown files with Page object formatting are used to allow history information to\n     be processed with the same tools that process the wiki pages. An example is this featureâ€™s Jinja template, which is\n      composed of only the URL and page parameters in two blocks. These files are also kept in a separate history folder\n       to segregate them from the page files if they need to be processed differently.\n\n   A history entry is created in a markdown file by record_history(). A new file is created if there is not one present,\n    and record_history() returns this fileâ€™s path for testing purposes. It creates the files with the same methods as \n    the wiki.core.Page.save() method in Riki, so no additional modules are needed except Python time module for the time\n     and date stamp. To complete an entry, the action and user name are concatenated with a time and written to the \n     markdown file. In this implementation, these calls are made in an actionâ€™s Flask route function to synchronize them\n      with the actionâ€™s API call. \n\n   The required parameters are a markdown fileâ€™s path, an action name string, and a user name string. They are as \n   abstract as possible to allow for flexibility implementing history entries. They could be generated by any function \n   that returns a string. In Riki, the user name is generated by current_user.get_id(). The path parameter from a Page \n   object get method also allows any information in the Page to be transcribed into the history file if necessary. The \n   history markdown file is in Page object format, so they can be easily displayed through a Flask API and Jinja \n   template.\n\n   The record_history() and histurl() functions form the basis of creating history pages. Any function that wishes to \n   create a history entry only needs one line of code to call record_history(). This keeps the overall lines of code low\n    and reduces complexity. Some Riki operations that modify pages need to be performed on the history page as well to \n    maintain coherency, such as move or delete. In these cases, the respective method call is performed with the page \n    URL modified by histurl() to also update the history page. \n\n#Modules \n\n\n#1. Files:\n\n#rikihistory\\history.py\n\n\tcontains histurl and record_history methods and doctests\n\n#rikihistory\\rkhist.py\n\n    command line script that creates history entry with command line parameters\n\n#rikihistory\\tests\\test_history.py\n\n\tUnit tests to implement the test plan\n\n#rikihistory\\README.md\n\n\tREADME file\n\n#history_pydoc.html\n\n    Pydoc file\n\n#2. Methods:\n\n#rikihistory.histurl(url: string): string\n\n    This creates and returns the history file name using its associated pageâ€™s file name. This was a frequent operation\n    and reduced complexity using a function.\n\n#rikihistory.record_history(path: string, action: string, user: string): string\n\n\tThis function creates or appends a history page markdown file from a Riki page mardown file located in the â€˜contentâ€™\n\tfolder and whose path is the path parameter. Files are kept in a separate â€˜historyâ€™ subfolder in the â€˜contentâ€™ \n\tfolder also derived from the path parameter. It formats new history markdown files to be compatible with all Page \n\tobject operations in the Riki system and initiates it with a â€˜Createdâ€™ entry with user parameter and time from \n\tPython time module. All other history entries are concatenated strings composed of the action and user from \n\tparameters and the time. It returns the path of the markdown file modified.\n\n\n#3. Tests\n\n#test_givenRandUserName_whenHistoryRecordMade_thenUserNameInNewEntry (test 1): \n\n    With an edit made to the page, a new entry will have the name of the editing user.\n\n    Specify a variable to store the user who edits the page.\n    Compare the user name added to the history entry.\n\n    A unit test was created in tests\\test_history.py (lines 24-30). Mock was used to create a mock Page object with a\n    path to a page in the content folder (lines 6-8). A unique user name was created by appending a random integer \n    0-1000 (lines 10, 25). A history was recorded with this information (line 26). The history file written to was read\n    (lines 27-29). If the unique user was in the file (line 30), then a new record was recorded with the user parameter.\n\n#test_givenMockPage_whenHistoryRecordMade_thenHistFilePathReturned (test 2): \n\n    With a history record made for a page, it will modify a history file with a file name derived from its associate \n    page in the correct directory location.\n\n    1. Specify a variable to store the expected path with directory and file name.\n    2. Compare the path returned by the record_history() function to the expected path.\n\n    A unit test was created in tests\\test_history.py (lines 41-44). Mock was used to create a mock Page object with a \n    specified path (line 43) to a page in the content folder (lines 6-8). A history record was made using the mocked \n    Page and two meaningless string parameters (line 42). If the specified path and the path returned by \n    record_history() are equal (line 44), then the file name and directory are correct because this path is used in the\n    function to make the file (wiki\\core.py line 95-96).\n\n#test_givenRandAction_whenAddingRecordToExistingHistoryFile_thenActionInNewEntry (test 3): \n\n    Same as Test 2 but checking if the action name was used instead of user name.\n\n    A unit test was created in Test\\test_history.py (lines 32-39). It is the same as Test 2 but a random action name was\n    used (line 33).\n\n#test_givenWikiPageURL_thenReturnHistWikiPageURL (test 4): \n\n    With a page url, it will modify it and return the url of the pageâ€™s associated history file.\n\n    1. Specify a variable to store the expected history page url.\n    2. Compare it to the url returned by histurl().\n\n    A unit test was created in Test\\test_history.py (lines 19-22). It checks if the string generate by histurl() matches\n    the expected string.\n\n#4. Lines of Code\n\n    54\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rikihistory",
    "package_url": "https://pypi.org/project/rikihistory/",
    "platform": "",
    "project_url": "https://pypi.org/project/rikihistory/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/rikihistory/0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "riki history page",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7154479,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9e54b0e3648a01deeb91322f05198e727868ffda598e53534f6af6a8eef86e8",
          "md5": "bc76e155c17cecf3d4372d2322d35ea5",
          "sha256": "d7ea1eefc675734a4b0a0d653538fb47750d707994ce607760fbd0e91a4d4386"
        },
        "downloads": -1,
        "filename": "rikihistory-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc76e155c17cecf3d4372d2322d35ea5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6134,
        "upload_time": "2020-05-03T01:51:31",
        "upload_time_iso_8601": "2020-05-03T01:51:31.866235Z",
        "url": "https://files.pythonhosted.org/packages/c9/e5/4b0e3648a01deeb91322f05198e727868ffda598e53534f6af6a8eef86e8/rikihistory-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a9ea990927872fa413fbe211a0870390f5a4feb989019457a58f467b356af73",
          "md5": "0df6607e4754ca222f3ba8e6179be947",
          "sha256": "0e2ebbb52cbd566310232329a334c777a37f9259fd1535eef981658663f6f62c"
        },
        "downloads": -1,
        "filename": "rikihistory-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0df6607e4754ca222f3ba8e6179be947",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6136,
        "upload_time": "2020-05-03T02:16:21",
        "upload_time_iso_8601": "2020-05-03T02:16:21.205973Z",
        "url": "https://files.pythonhosted.org/packages/9a/9e/a990927872fa413fbe211a0870390f5a4feb989019457a58f467b356af73/rikihistory-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ca6090fc1855b8e997670338e17ffcbd3689b339c28f967da98b34851d11e6c",
          "md5": "8d70ecba4b3a9c7ef30f5ccc0527c708",
          "sha256": "f95e086307ee5cf062b20159c37e120d894f36113812279846320c77135a236d"
        },
        "downloads": -1,
        "filename": "rikihistory-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d70ecba4b3a9c7ef30f5ccc0527c708",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6138,
        "upload_time": "2020-05-03T02:27:37",
        "upload_time_iso_8601": "2020-05-03T02:27:37.785480Z",
        "url": "https://files.pythonhosted.org/packages/2c/a6/090fc1855b8e997670338e17ffcbd3689b339c28f967da98b34851d11e6c/rikihistory-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ca6090fc1855b8e997670338e17ffcbd3689b339c28f967da98b34851d11e6c",
        "md5": "8d70ecba4b3a9c7ef30f5ccc0527c708",
        "sha256": "f95e086307ee5cf062b20159c37e120d894f36113812279846320c77135a236d"
      },
      "downloads": -1,
      "filename": "rikihistory-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d70ecba4b3a9c7ef30f5ccc0527c708",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6138,
      "upload_time": "2020-05-03T02:27:37",
      "upload_time_iso_8601": "2020-05-03T02:27:37.785480Z",
      "url": "https://files.pythonhosted.org/packages/2c/a6/090fc1855b8e997670338e17ffcbd3689b339c28f967da98b34851d11e6c/rikihistory-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}