{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[<img width=\"250\" alt=\"ImageKit.io\" src=\"https://raw.githubusercontent.com/imagekit-developer/imagekit-javascript/master/assets/imagekit-light-logo.svg\"/>](https://imagekit.io)\n\n# ImageKit.io Python SDK\n\n[![Python CI](https://github.com/imagekit-developer/imagekit-python/workflows/Python%20CI/badge.svg)](https://github.com/imagekit-developer/imagekit-python/)\n[![imagekitio](https://img.shields.io/pypi/v/imagekitio.svg)](https://pypi.org/project/imagekitio)\n[![codecov](https://codecov.io/gh/imagekit-developer/imagekit-python/branch/master/graph/badge.svg?token=CwKWqBIlCu)](https://codecov.io/gh/imagekit-developer/imagekit-python)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Twitter Follow](https://img.shields.io/twitter/follow/imagekitio?label=Follow&style=social)](https://twitter.com/ImagekitIo)\n\nPython SDK for [ImageKit](https://imagekit.io/) implements the new APIs and interface for different file operations.\n\nImageKit is complete media storage, optimization, and transformation solution that comes with an [image and video CDN](https://imagekit.io/features/imagekit-infrastructure). It can be integrated with your existing infrastructure - storage like AWS S3, web servers, your CDN, and custom domain names, allowing you to deliver optimized images in minutes with minimal code changes.\n\nSupported Python Versions: >=3.6\n\nTable of contents -\n\n-   [Installation](#installation)\n-   [Initialization](#initialization)\n-   [Change Log](#change-log)\n-   [Usage](#usage)\n    -   [URL Generation](#url-generation)\n    -   [File Upload](#file-upload)\n    -   [File Management](#file-management)\n    -   [Utility Functions](#utility-functions)\n-   [Handling errors](#handling-errors)\n-   [Development](#development)\n    -   [Tests](#tests)\n    -   [Sample](#sample)\n-   [Support](#support)\n-   [Links](#links)\n\n## Installation\n\nGo to your terminal and type the following command.\n\n```bash\npip install imagekitio\n```\n\n## Initialization\n\n```python\nfrom imagekitio import ImageKit\n\nimagekit = ImageKit(\n    private_key='your_private_key',\n    public_key='your_public_key',\n    url_endpoint='your_url_endpoint'\n)\n```\n\n## Change log\n\nThis document presents a list of changes that break the existing functionality of previous versions. We try to minimize these disruptions, but they are sometimes unavoidable, especially in significant updates. Therefore, versions are marked semantically and tagged as major upgrades whenever such breaking changes occur.\n\n### Breaking History:\n\nChanges from `2.2.8 -> 3.0.0` are listed below\n\n1. Throw an Error:\n\n**What changed**\n\n-   Before the upgrade, an `error` dict was coming in the return object of any function call. Now, SDK throws an exception in case of an error.\n\n**Who is affected?**\n\n-   This affects any development in your software that calls APIs from ImageKit IO and handles errors based on what's returned.\n\n**How should I update my code?**\n\n-   To avoid failures in an application, you could handle errors as [documented here](#handling-errors)\n\n# Usage\n\nYou can use this Python SDK for three different kinds of methods:\n\n-   [URL Generation](#url-generation)\n-   [File Upload](#file-upload)\n-   [File Management](#file-management)\n-   [Utility Functions](#utility-functions)\n\n## URL Generation\n\n**1. Using Image path and endpoint (hostname)**\n\nThis method allows you to create a URL using the relative file path where the image exists and the URL\nendpoint(url_endpoint) you want to use to access the image. You can refer to the documentation\n[here](https://docs.imagekit.io/integration/url-endpoints) to read more about URL endpoints\nin ImageKit and the section about [image origins](https://docs.imagekit.io/integration/configure-origin) to understand\nabout paths with different kinds of origins.\n\nThe file can be an image, video, or any other static file supported by ImageKit.\n\n```python\nimagekit_url = imagekit.url({\n    \"path\": \"/default-image.jpg\",\n    \"url_endpoint\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/\",\n    \"transformation\": [{\n        \"height\": \"300\",\n        \"width\": \"400\",\n        \"raw\": \"ar-4-3,q-40\"\n    }],\n})\n```\n\nSample Result URL -\n\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/tr:h-300,w-400,ar-4-3,q-40/default-image.jpg\n```\n\n**2. Using full image URL**\n\nThis method allows you to add transformation parameters to an absolute URL using the `src` parameter. This method should be\nused if you have the complete image URL stored in your database.\n\n```python\nimage_url = imagekit.url({\n    \"src\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\",\n    \"transformation\": [{\n        \"height\": \"300\",\n        \"width\": \"400\",\n        \"raw\": \"ar-4-3,q-40\"\n    }]\n})\n```\n\nSample Result URL -\n\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400%2Car-4-3%2Cq-40\n```\n\nThe `.url()` method accepts the following parameters.\n\n| Option                  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| :---------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| url_endpoint            | Optional. The prepended base URL before the path of the image. If not specified, the URL Endpoint specified during SDK initialization gets used. For example, https://ik.imagekit.io/your_imagekit_id/endpoint/                                                                                                                                                                                                                                                                             |\n| path                    | Conditional. A path at which the image exists. For example, `/path/to/image.jpg`. Specify a `path` or `src` parameter for URL generation.                                                                                                                                                                                                                                                                                                                                                   |\n| src                     | Conditional. Complete URL of an image already mapped to ImageKit. For example, `https://ik.imagekit.io/your_imagekit_id/endpoint/path/to/image.jpg`. Specify a `path` or `src` parameter for URL generation.                                                                                                                                                                                                                                                                                |\n| transformation          | Optional. Specify an array of objects with name and the value in key-value pair to apply transformation params in the URL. Append different steps of a [chained transformation](https://docs.imagekit.io/features/image-transformations/chained-transformations) as different objects of the array. This document includes a complete list of supported transformations in the SDK with some examples. If one uses an unspecified transformation name, it gets applied as it is in the URL. |\n| transformation_position | Optional. The default value is `path`, which places the transformation string as a path parameter in the URL. One can also specify it as a query, which adds the transformation string as the query parameter `tr` in the URL. Suppose one uses the `src` parameter to create the URL. In that case, the transformation string is always a query parameter.                                                                                                                                 |\n| query_parameters        | Optional. These are the other query parameters that one wants to add to the final URL. These can be any query parameters and are not necessarily related to ImageKit. Especially useful if one wants to add some versioning parameter to their URLs.                                                                                                                                                                                                                                        |\n| signed                  | Optional. Boolean. The default is `false`. If set to `true`, the SDK generates a signed image URL adding the image signature to the image URL. One can only use this if they create the URL with the `url_endpoint` and `path` parameters, not the `src` parameter.                                                                                                                                                                                                                         |\n| expire_seconds          | Optional. Integer. Used along with the `signed` parameter to specify the time in seconds from `now` when the URL should expire. If specified, the URL contains the expiry timestamp, and the image signature is modified accordingly.                                                                                                                                                                                                                                                       |\n\n## Examples of generating URLs\n\n**1. Chained Transformations as a query parameter**\n\n```python\nimage_url = imagekit.url({\n    \"path\": \"/default-image.jpg\",\n    \"url_endpoint\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/\",\n    \"transformation\": [\n        {\n            \"height\": \"300\",\n            \"width\": \"400\"\n        },\n        {\n            \"rotation\": 90\n        }\n    ],\n    \"transformation_position\": \"query\"\n})\n```\n\nSample Result URL -\n\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400%3Art-90\n```\n\n**2. Sharpening, contrast transform and progressive JPG image**\n\nAdd transformations like [Sharpening](https://docs.imagekit.io/features/image-transformations/image-enhancement-and-color-manipulation) to the URL with or without any other value. To use such transforms without specifying a value, set it as \"-\" in the transformation object. Otherwise, use the value that one wants to add to this transformation.\n\n```python\nimage_url = imagekit.url({\n    \"src\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\",\n    \"transformation\": [{\n        \"format\": \"jpg\",\n        \"progressive\": \"true\",\n        \"effect_sharpen\": \"-\",\n        \"effect_contrast\": \"1\"\n    }]\n})\n```\n\nSample Result URL -\n\n```\n# Note that because the `src` parameter is in effect, the transformation string gets added as a query parameter `tr`\n\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=f-jpg%2Cpr-true%2Ce-sharpen%2Ce-contrast-1\n```\n\n**3. Signed URL that expires in 300 seconds with the default URL endpoint and other query parameters**\n\n```python\nimage_url = imagekit.url({\n    \"path\": \"/default-image.jpg\",\n    \"query_parameters\": {\n        \"p1\": \"123\",\n        \"p2\": \"345\"\n    },\n    \"transformation\": [{\n        \"height\": \"300\",\n        \"width\": \"400\"\n    }],\n    \"signed\": True,\n    \"expire_seconds\": 300\n})\n```\n\nSample Result URL -\n\n```\nhttps://ik.imagekit.io/your_imagekit_id/tr:h-300,w-400/default-image.jpg?p1=123&p2=345&ik-t=1658899345&ik-s=8f03aca28432d4e87f697a48143efb4497bbed9e\n```\n\n**List of transformations**\n\nThe complete list of transformations supported and their usage in ImageKit is available [here](https://docs.imagekit.io/features/image-transformations/resize-crop-and-other-transformations).\nThe SDK gives a name to each transformation parameter, making the code simpler, more straightforward, and readable. If a transformation is supported in ImageKit, though it cannot be found in the table below, then use the transformation code from ImageKit docs as the name when using the `URL` function.\n\nIf you want to generate transformations in your application and add them to the URL as it is, use the raw parameter.\n\n| Supported Transformation Name | Translates to parameter         |\n| ----------------------------- | ------------------------------- |\n| height                        | h                               |\n| width                         | w                               |\n| aspect_ratio                  | ar                              |\n| quality                       | q                               |\n| crop                          | c                               |\n| crop_mode                     | cm                              |\n| x                             | x                               |\n| y                             | y                               |\n| focus                         | fo                              |\n| format                        | f                               |\n| radius                        | r                               |\n| background                    | bg                              |\n| border                        | b                               |\n| rotation                      | rt                              |\n| blur                          | bl                              |\n| named                         | n                               |\n| overlay_x                     | ox                              |\n| overlay_y                     | oy                              |\n| overlay_focus                 | ofo                             |\n| overlay_height                | oh                              |\n| overlay_width                 | ow                              |\n| overlay_image                 | oi                              |\n| overlay_image_trim            | oit                             |\n| overlay_image_aspect_ratio    | oiar                            |\n| overlay_image_background      | oibg                            |\n| overlay_image_border          | oib                             |\n| overlay_image_dpr             | oidpr                           |\n| overlay_image_quality         | oiq                             |\n| overlay_image_cropping        | oic                             |\n| overlay_image_focus           | oifo                            |\n| overlay_text                  | ot                              |\n| overlay_text_font_size        | ots                             |\n| overlay_text_font_family      | otf                             |\n| overlay_text_color            | otc                             |\n| overlay_text_transparency     | oa                              |\n| overlay_alpha                 | oa                              |\n| overlay_text_typography       | ott                             |\n| overlay_background            | obg                             |\n| overlay_text_encoded          | ote                             |\n| overlay_text_width            | otw                             |\n| overlay_text_background       | otbg                            |\n| overlay_text_padding          | otp                             |\n| overlay_text_inner_alignment  | otia                            |\n| overlay_radius                | or                              |\n| progressive                   | pr                              |\n| lossless                      | lo                              |\n| trim                          | t                               |\n| metadata                      | md                              |\n| color_profile                 | cp                              |\n| default_image                 | di                              |\n| dpr                           | dpr                             |\n| effect_sharpen                | e-sharpen                       |\n| effect_usm                    | e-usm                           |\n| effect_contrast               | e-contrast                      |\n| effect_gray                   | e-grayscale                     |\n| original                      | orig                            |\n| raw                           | replaced by the parameter value |\n\n## File Upload\n\nThe SDK provides a simple interface using the `.upload_file()` method to upload files to the ImageKit Media library. It\naccepts all the parameters supported by\nthe [ImageKit Upload API](https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload).\n\nThe `upload_file()` method requires at least the `file` as (URL/Base64/Binary) and the `file_name` parameter to upload a\nfile. The method returns a dict data in case of success, or it will throw a custom exception in case of failure.\nUse the `options` parameter to pass other parameters supported by\nthe [ImageKit Upload API](https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload). Use the same\nparameter name as specified in the upload API documentation.\n\nSimple usage\n\n```python\nfrom imagekitio.models.UploadFileRequestOptions import UploadFileRequestOptions\n\nextensions = [\n    {\n        'name': 'remove-bg',\n        'options': {\n            'add_shadow': True,\n            'bg_color': 'pink'\n        }\n    },\n    {\n        'name': 'google-auto-tagging',\n        'minConfidence': 80,\n        'maxTags': 10\n    }\n]\n\noptions = UploadFileRequestOptions(\n    use_unique_file_name=False,\n    tags=['abc', 'def'],\n    folder='/testing-python-folder/',\n    is_private_file=False,\n    custom_coordinates='10,10,20,20',\n    response_fields=['tags', 'custom_coordinates', 'is_private_file',\n                     'embedded_metadata', 'custom_metadata'],\n    extensions=extensions,\n    webhook_url='https://webhook.site/c78d617f-33bc-40d9-9e61-608999721e2e',\n    overwrite_file=True,\n    overwrite_ai_tags=False,\n    overwrite_tags=False,\n    overwrite_custom_metadata=True,\n    custom_metadata={'testss': 12},\n)\n\nresult = imagekit.upload_file(file='<url|base_64|binary>', # required\n                              file_name='my_file_name.jpg', # required\n                              options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that uploaded file's ID\nprint(result.file_id)\n```\n\nIf the upload succeeds, the `result` will be the `UploadFileResult` class.\n\nIf the upload fails, the custom exception will be thrown with:\n\n-   `response_help` for any kind of help\n-   `response_metadata` with `raw`, `http_status_code` and `headers`\n-   `message` can be called to get the error message received from ImageKit's servers.\n\n## File Management\n\nThe SDK provides a simple interface for all\nthe [media APIs mentioned here](https://docs.imagekit.io/api-reference/media-api)\nto manage your files. This also returns `result`.\n\n**1. List & Search Files**\n\nAccepts an object specifying the parameters used to list and search files. All parameters specified\nin\nthe [documentation here](https://docs.imagekit.io/api-reference/media-api/list-and-search-files#list-and-search-file-api)\ncan be passed with the correct values to get the results.\n\n```Python\nfrom imagekitio.models.ListAndSearchFileRequestOptions import ListAndSearchFileRequestOptions\n\noptions = ListAndSearchFileRequestOptions(\n    type='file',\n    sort='ASC_CREATED',\n    path='/',\n    search_query=\"created_at >= '2d' OR size < '2mb' OR format='png'\",\n    file_type='all',\n    limit=5,\n    skip=0,\n    tags='Software, Developer, Engineer',\n)\n\nresult = imagekit.list_files(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the first file's ID\nprint(result.list[0].file_id)\n```\n\n**2. Get File Details**\n\nAccepts the file ID and fetches the details as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/get-file-details)\n\n```python\nfile_id = \"your_file_id\"\nresult = imagekit.get_file_details(file_id=file_id)  # file_id required\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that file's id\nprint(result.file_id)\n```\n\n**3. Get File Versions**\n\nAccepts the file ID and fetches the details as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/get-file-versions)\n\n```python\nfile_id = \"your_file_id\"\nresult = imagekit.get_file_versions(file_id=file_id)  # file_id required\n\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that file's version id\nprint(result.list[0].version_info.id)\n```\n\n**4. Get File Version details**\n\nAccepts the `file_id` and `version_id` and fetches the details as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/get-file-version-details)\n\n```python\nresult = imagekit.get_file_version_details(\n    file_id='file_id',\n    version_id='version_id'\n)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that file's id\nprint(result.file_id)\n\n# print that file's version id\nprint(result.version_info.id)\n```\n\n**5. Update File Details**\n\nAccepts all the parameters as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/update-file-details).\nThe first argument to the `update_file_details()` method is the file ID, and a second argument is an object with the\nparameters to be\nupdated.\n\n```python\nfrom imagekitio.models.UpdateFileRequestOptions import UpdateFileRequestOptions\n\nextensions = [\n    {\n        'name': 'remove-bg',\n        'options': {\n            'add_shadow': True,\n            'bg_color': 'red'\n        }\n    },\n    {\n        'name': 'google-auto-tagging',\n        'minConfidence': 80,\n        'maxTags': 10\n    }\n]\n\noptions = UpdateFileRequestOptions(\n    remove_ai_tags=['remove-ai-tag-1', 'remove-ai-tag-2'],\n    webhook_url='url',\n    extensions=extensions,\n    tags=['tag-1', 'tag-2'],\n    custom_coordinates='10,10,100,100',\n    custom_metadata={'test': 11},\n)\n\nresult = imagekit.update_file_details(file_id='62cfd39819ca454d82a07182'\n        , options=options)  # required\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that file's id\nprint(result.file_id)\n```\n\n**6. Add tags**\n\nAccepts a list of `file_ids` and `tags` as a parameter to be used to add tags. All parameters specified in\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/add-tags-bulk) can be passed to\nthe `.add_tags()` functions to get the results.\n\n```python\nresult = imagekit.add_tags(file_ids=['file-id-1', 'file-id-2'], tags=['add-tag-1', 'add-tag-2'])\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# list successfully updated file ids\nprint(result.successfully_updated_file_ids)\n\n# print the first file's id\nprint(result.successfully_updated_file_ids[0])\n```\n\n**7. Remove tags**\n\nAccepts a list of `file_ids` and `tags` as a parameter to be used to remove tags. All parameters specified in\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/remove-tags-bulk) can be passed to\nthe `.remove_tags()` functions to get the results.\n\n```python\nresult = imagekit.remove_tags(file_ids=['file-id-1', 'file-id-2'], tags=['remove-tag-1', 'remove-tag-2'])\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# list successfully updated file ids\nprint(result.successfully_updated_file_ids)\n\n# print the first file's id\nprint(result.successfully_updated_file_ids[0])\n```\n\n**8. Remove AI tags**\n\nAccepts a list of `file_ids` and `ai_tags` as a parameter to remove AI tags. All parameters specified in\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/remove-aitags-bulk) can be passed to\nthe `.remove_ai_tags()` functions to get the results.\n\n```python\nresult = imagekit.remove_ai_tags(file_ids=['file-id-1', 'file-id-2'], ai_tags=['remove-ai-tag-1', 'remove-ai-tag-2'])\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# list successfully updated file ids\nprint(result.successfully_updated_file_ids)\n\n# print the first file's id\nprint(result.successfully_updated_file_ids[0])\n```\n\n**9. Delete File**\n\nDelete a file according to the [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-file). It accepts the file ID of the File that has to be\ndeleted.\n\n```python\nfile_id = \"file_id\"\nresult = imagekit.delete_file(file_id=file_id)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**10. Delete FileVersion**\n\nDelete a file version as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-file-version).\nThe method accepts the `file_id` and particular version id of the file that has to be deleted.\n\n```python\nresult = imagekit.delete_file_version(file_id=\"file_id\", version_id=\"version_id\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**11. Bulk File Delete by IDs**\n\nDelete a file as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-files-bulk).\nThe method accepts a list of file IDs that have to be deleted.\n\n```python\nresult = imagekit.bulk_file_delete(file_ids=[\"file_id1\", \"file_id2\"])\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# list successfully deleted file ids\nprint(result.successfully_deleted_file_ids)\n\n# print the first file's id\nprint(result.successfully_deleted_file_ids[0])\n```\n\n**12. Copy file**\n\nCopy a file according to the [API documentation here](https://docs.imagekit.io/api-reference/media-api/copy-file).\nThe method accepts `source_file_path`, `destination_path`, and `include_file_versions` of the file that has to be copied.\n\n```python\nfrom imagekitio.models.CopyFileRequestOptions import CopyFileRequestOptions\n\noptions = \\\n    CopyFileRequestOptions(source_file_path='/source_file_path.jpg',\n                           destination_path='/destination_path',\n                           include_file_versions=True)\nresult = imagekit.copy_file(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**13. Move File**\n\nMove a file as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/move-file).\nThe method accepts `source_file_path` and `destination_path` of the file that has to be moved.\n\n```python\nfrom imagekitio.models.MoveFileRequestOptions import MoveFileRequestOptions\n\noptions = \\\n    MoveFileRequestOptions(source_file_path='/source_file_path.jpg',\n                           destination_path='/destination_path')\nresult = imagekit.move_file(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**14. Rename File**\n\nRename a file per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/rename-file).\nThe method accepts the `file_path`, `new_file_name`, and `purge_cache` boolean that has to be renamed.\n\n```python\nfrom imagekitio.models.RenameFileRequestOptions import RenameFileRequestOptions\n\noptions = RenameFileRequestOptions(file_path='/file_path.jpg',\n                                   new_file_name='new_file_name.jpg',\n                                   purge_cache=True)\nresult = imagekit.rename_file(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the purge request id\nprint(result.purge_request_id)\n```\n\n**15. Restore file Version**\n\nRestore a file as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/restore-file-version).\nThe method accepts the `file_id` and `version_id` of the file that has to be restored.\n\n```python\nresult = imagekit.restore_file_version(file_id=\"file_id\", version_id=\"version_id\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print that file's id\nprint(result.file_id)\n```\n\n**16. Create Folder**\n\nCreate a folder per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/create-folder).\nThe method accepts `folder_name` and `parent_folder_path` as options that must be created.\n\n```Python\nfrom imagekitio.models.CreateFolderRequestOptions import CreateFolderRequestOptions\n\noptions = CreateFolderRequestOptions(folder_name='test',\n                                     parent_folder_path='/')\nresult = imagekit.create_folder(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**17. Delete Folder**\n\nDelete a folder as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-folder).\nThe method accepts `folder_path` as an option that must be deleted.\n\n```python\nfrom imagekitio.models.DeleteFolderRequestOptions import DeleteFolderRequestOptions\n\noptions = DeleteFolderRequestOptions(folder_path='/test/demo')\nresult = imagekit.delete_folder(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n**18. Copy Folder**\n\nCopy a folder as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/copy-folder).\nThe method accepts the `source_folder_path`, `destination_path`, and `include_file_versions` boolean as options that\nhave to be copied.\n\n```python\nfrom imagekitio.models.CopyFolderRequestOptions import CopyFolderRequestOptions\noptions = \\\n    CopyFolderRequestOptions(source_folder_path='/source_folder_path',\n                             destination_path='/destination/path',\n                             include_file_versions=True)\nresult = imagekit.copy_folder(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the job's id\nprint(result.job_id)\n```\n\n**19. Move Folder**\n\nMove a folder as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/move-folder).\nThe method accepts the `source_folder_path` and `destination_path` of a folder as options that must be moved.\n\n```python\nfrom imagekitio.models.MoveFolderRequestOptions import MoveFolderRequestOptions\noptions = \\\n    MoveFolderRequestOptions(source_folder_path='/source_folder_path',\n                             destination_path='/destination_path')\nresult = imagekit.move_folder(options=options)\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the job's id\nprint(result.job_id)\n```\n\n**20. Get Bulk Job Status**\n\nAccepts the `job_id` to get bulk job status as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/copy-move-folder-status).\nThe method takes only jobId.\n\n```python\nresult = imagekit.get_bulk_job_status(job_id=\"job_id\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the job's id\nprint(result.job_id)\n\n# print the status\nprint(result.status)\n```\n\n**21. Purge Cache**\n\nProgrammatically issue an explicit cache request as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/media-api/purge-cache).\nAccepts the full URL of the File for which the cache has to be cleared.\n\n```python\nresult = imagekit.purge_file_cache(file_url=\"full_url_of_file\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the purge file cache request id\nprint(result.request_id)\n```\n\n**22. Purge Cache Status**\n\nGet the purge cache request status using the `cache_request_id` returned when a purge cache request gets submitted as per the\n[API documentation here](https://docs.imagekit.io/api-reference/media-api/purge-cache-status)\n\n```python\nresult = imagekit.get_purge_file_cache_status(purge_cache_id=\"cache_request_id\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the purge file cache status\nprint(result.status)\n```\n\n**23. Get File Metadata**\n\nAccepts the `file_id` and fetches the metadata as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-for-uploaded-media-files)\n\n```python\nresult = imagekit.get_file_metadata(file_id=\"file_id\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the file metadata fields\nprint(result.width)\nprint(result.exif.image.x_resolution)\n```\n\n**24. Get File Metadata from remote URL**\n\nAccepts the `remote_file_url` and fetches the metadata as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-from-remote-url)\n\n```python\nresult = imagekit.get_remote_file_url_metadata(remote_file_url=\"remote_file_url\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the file metadata fields\nprint(result.width)\nprint(result.exif.image.x_resolution)\n```\n\n**25. Create CustomMetaDataFields**\n\nAccepts an option specifying the parameters used to create custom metadata fields. All parameters specified in\nthe [API documentation here](https://docs.imagekit.io/api-reference/custom-metadata-fields-api/create-custom-metadata-field)\ncan be passed as it is with the correct values to get the results.\n\nCheck for the [allowed values in the schema](https://docs.imagekit.io/api-reference/custom-metadata-fields-api/create-custom-metadata-field#allowed-values-in-the-schema-object).\n\n**Example:**\n\n```python\n# Example for the type number\n\nfrom imagekitio.models.CreateCustomMetadataFieldsRequestOptions import CreateCustomMetadataFieldsRequestOptions\nfrom imagekitio.models.CustomMetadataFieldsSchema import CustomMetadataFieldsSchema\nfrom imagekitio.models.CustomMetaDataTypeEnum import CustomMetaDataTypeEnum\nschema = CustomMetadataFieldsSchema(type=CustomMetaDataTypeEnum.Number,\n                                    min_value=100,\n                                    max_value=200)\noptions = CreateCustomMetadataFieldsRequestOptions(name='test',\n                                                   label='test',\n                                                   schema=schema)\nresult = imagekit.create_custom_metadata_fields(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the id of created custom metadata fields\nprint(result.id)\n\n# print the schema's type of created custom metadata fields\nprint(result.schema.type)\n\n```\n\n```python\n# MultiSelect type Example\n\nfrom imagekitio.models.CreateCustomMetadataFieldsRequestOptions import CreateCustomMetadataFieldsRequestOptions\nfrom imagekitio.models.CustomMetadataFieldsSchema import CustomMetadataFieldsSchema\nfrom imagekitio.models.CustomMetaDataTypeEnum import CustomMetaDataTypeEnum\n\nschema = \\\n    CustomMetadataFieldsSchema(type=CustomMetaDataTypeEnum.MultiSelect,\n                               is_value_required=True,\n                               default_value=['small', 30, True],\n                               select_options=[\n                                    'small',\n                                    'medium',\n                                    'large',\n                                    30,\n                                    40,\n                                    True,\n                                ])\noptions = \\\n    CreateCustomMetadataFieldsRequestOptions(name='test-MultiSelect',\n        label='test-MultiSelect', schema=schema)\nresult = imagekit.create_custom_metadata_fields(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the name of created custom metadata fields\nprint(result.name)\n\n# print the schema's select options of created custom metadata fields\nprint(result.schema.select_options)\n\n```\n\n```python\n# Date type Example\n\nfrom imagekitio.models.CreateCustomMetadataFieldsRequestOptions import CreateCustomMetadataFieldsRequestOptions\nfrom imagekitio.models.CustomMetadataFieldsSchema import CustomMetadataFieldsSchema\nfrom imagekitio.models.CustomMetaDataTypeEnum import CustomMetaDataTypeEnum\n\nschema = CustomMetadataFieldsSchema(type=CustomMetaDataTypeEnum.Date,\n                                    min_value='2022-11-29T10:11:10+00:00',\n                                    max_value='2022-11-30T10:11:10+00:00')\noptions = CreateCustomMetadataFieldsRequestOptions(name='test-date',\n                                                   label='test-date',\n                                                   schema=schema)\nresult = imagekit.create_custom_metadata_fields(options=options)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the label of created custom metadata fields\nprint(result.label)\n\n# print the schema's min value of created custom metadata fields\nprint(result.schema.min_value)\n\n```\n\n**26. Get CustomMetaDataFields**\n\nAccepts the `include_deleted` boolean as the initial parameter and fetches the metadata as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/custom-metadata-fields-api/get-custom-metadata-field)\n.\n\n```python\nresult = imagekit.get_custom_metadata_fields()  # in this case, it will consider includeDeleted as a False\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the first customMetadataField's id\nprint(result.list[0].id)\n\n# print the first customMetadataField schema's type\nprint(result.list[0].schema.type)\n```\n\n```python\nresult = imagekit.get_custom_metadata_fields(include_deleted=True)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the first customMetadataField's name\nprint(result.list[0].name)\n\n# print the first customMetadataField schema's default value\nprint(result.list[0].schema.default_value)\n```\n\n**27. Update CustomMetaDataFields**\n\nAccepts a `field_id` and options for specifying the parameters to be used to edit custom metadata fields\nas per\nthe [API documentation here](https://docs.imagekit.io/api-reference/custom-metadata-fields-api/update-custom-metadata-field)\n.\n\n```python\n\nfrom imagekitio.models.CustomMetadataFieldsSchema import CustomMetadataFieldsSchema\nfrom imagekitio.models.UpdateCustomMetadataFieldsRequestOptions import UpdateCustomMetadataFieldsRequestOptions\n\nschema = CustomMetadataFieldsSchema(min_value=100, max_value=200)\noptions = UpdateCustomMetadataFieldsRequestOptions(\n    label='test-update',\n    schema=schema\n)\nresult = imagekit.update_custom_metadata_fields(\n    field_id='id_of_custom_metadata_field',\n    options=options\n)\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n\n# print the label of updated custom metadata fields\nprint(result.label)\n\n# print the schema's min value of updated custom metadata fields\nprint(result.schema.min_value)\n```\n\n**28. Delete CustomMetaDataFields**\n\nAccepts the id to delete the custom metadata fields as per\nthe [API documentation here](https://docs.imagekit.io/api-reference/custom-metadata-fields-api/delete-custom-metadata-field)\n.\n\n```python\nresult = imagekit.delete_custom_metadata_field(field_id=\"id_of_custom_metadata_field\")\n\n# Final Result\nprint(result)\n\n# Raw Response\nprint(result.response_metadata.raw)\n```\n\n## Utility functions\n\nWe have included the following commonly used utility functions in this package.\n\n**Authentication parameter generation**\n\nSuppose one wants to implement client-side file upload. In that case, one will need a token, expiry timestamp, and a valid signature for that upload. The SDK provides a simple method that one can use in their code to generate these authentication parameters.\n\n<em>Note: Any client-side code should never expose The Private API Key. One must always generate these authentications parameters on the server-side</em>\n\nauthentication\n\n`authentication_parameters = imagekit.get_authentication_parameters(token, expire)`\n\nReturns\n\n```python\n{\n    \"token\": \"unique_token\",\n    \"expire\": \"valid_expiry_timestamp\",\n    \"signature\": \"generated_signature\"\n}\n```\n\nBoth the `token` and `expire` parameters are optional. If not specified, the SDK uses the UUID to generate a random token and internally generates a valid expiry timestamp. The `token` and `expire` used to generate `signature` is part of a response returned by the server.\n\n**Distance calculation between two `pHash` values**\n\nPerceptual hashing allows you to construct a has value that uniquely identifies an input image based on the contents\nof an image. [imagekit.io metadata API](https://docs.imagekit.io/api-reference/metadata-api) returns the `pHash`\nvalue of an image in the response. You can use this value\nto [find a duplicate or similar image](https://docs.imagekit.io/api-reference/metadata-api#using-phash-to-find-similar-or-duplicate-images)\nby calculating the distance between the two images.\n\nThis SDK exposes the `phash_distance` function to calculate the distance between two `pHash` values. It accepts two `pHash`\nhexadecimal\nstrings and returns a numeric value indicative of the difference between the two images.\n\n```python\ndef calculate_distance():\n    # fetch metadata of two uploaded image files\n    ...\n    # extract pHash strings from both: say 'first_hash' and 'second_hash'\n    ...\n    # calculate the distance between them:\n\n    distance = imagekit.phash_distance(first_hash, second_hash)\n    return distance\n\n```\n\n**Distance calculation examples**\n\n```Python\nimagekit.phash_distance('f06830ca9f1e3e90', 'f06830ca9f1e3e90')\n# output: 0 (same image)\n\nimagekit.phash_distance('2d5ad3936d2e015b', '2d6ed293db36a4fb')\n# output: 17 (similar images)\n\nimagekit.phash_distance('a4a65595ac94518b', '7838873e791f8400')\n# output: 37 (dissimilar images)\n```\n\n**HTTP response metadata of Internal API**\n\nHTTP response metadata of the internal API call can be accessed using the \\_response_metadata on the Result object.\nExample:\n\n```Python\nresult = imagekit.upload_file(\n    file=\"<url|base_64|binary>\",\n    file_name=\"my_file_name.jpg\",\n)\n\n# Final Result\nprint(result)\nprint(result.response_metadata.raw)\nprint(result.response_metadata.http_status_code)\nprint(result.response_metadata.headers)\n```\n\n### Sample Code Instruction\n\nTo run `sample` code go to the code samples here are hosted on GitHub - https://github.com/imagekit-samples/quickstart/tree/master/python and run.\n\n```shell\npython sample.py\n```\n\n## Handling errors\n\nCatch and respond to invalid data, internal problems, and more.\n\nImageKit Python SDK raises exceptions for many reasons, such as not found, invalid parameters, authentication, and\ninternal server errors. Therefore, we recommend writing code that gracefully handles all possible API exceptions.\n\n#### Example:\n\n```Python\nfrom imagekitio.exceptions.BadRequestException import BadRequestException\nfrom imagekitio.exceptions.UnauthorizedException import UnauthorizedException\nfrom imagekitio.exceptions.ForbiddenException import ForbiddenException\nfrom imagekitio.exceptions.TooManyRequestsException import TooManyRequestsException\nfrom imagekitio.exceptions.InternalServerException import InternalServerException\nfrom imagekitio.exceptions.PartialSuccessException import PartialSuccessException\nfrom imagekitio.exceptions.NotFoundException import NotFoundException\nfrom imagekitio.exceptions.UnknownException import UnknownException\n\ntry:\n\n    # Use ImageKit's SDK to make requests...\n    print('Run image kit api')\nexcept BadRequestException, e:\n    # Missing or Invalid parameters were supplied to Imagekit.io's API\n    print('Status is: ' + e.response_metadata.http_status_code)\n    print('Message is: ' + e.message)\n    print('Headers are: ' + e.response_metadata.headers)\n    print('Raw body is: ' + e.response_metadata.raw)\nexcept UnauthorizedException, e:\n    print(e)\nexcept ForbiddenException, e:\n    # No valid API key was provided.\n    print(e)\nexcept TooManyRequestsException, e:\n    # Can be for the following reasons:\n    # ImageKit could not authenticate your account with the keys provided.\n    # An expired key (public or private) was used with the request.\n    # The account is disabled.\n    # If you use the upload API, the total storage limit (or upload limit) is exceeded.\n    print(e)\nexcept InternalServerException, e:\n    # Too many requests made to the API too quickly\n    print(e)\nexcept PartialSuccessException, e:\n    # Something went wrong with ImageKit.io API.\n    print(e)\nexcept NotFoundException, e:\n    # Error cases on partial success.\n    print(e)\nexcept UnknownException, e:\n    # If any of the field or parameter is not found in the data\n    print(e)\n\n# Something else happened, which can be unrelated to ImageKit; the reason will be indicated in the message field\n```\n\n## Development\n\n### Tests\n\nTests are powered by [Tox](https://tox.wiki/en/latest/).\n\n```bash\n$ git clone https://github.com/imagekit-developer/imagekit-python && cd imagekit-python\n$ pip install tox\n$ tox\n```\n\n### Sample\n\n#### Get & Install local ImageKit Python SDK\n\n```bash\n$ git clone https://github.com/imagekit-developer/imagekit-python && cd imagekit-python\n$ pip install -e .\n```\n\n#### Get samples\n\nTo integrate ImageKit Samples in the Python, the code samples covered here are hosted on GitHub - https://github.com/imagekit-samples/quickstart/tree/master/python.\n\nOpen the `python/sample.py` file and replace placeholder credentials with actual values. You can get the value of [URL-endpoint](https://imagekit.io/dashboard#url-endpoints) from your ImageKit dashboard. API keys can be obtained from the [developer](https://imagekit.io/dashboard/developer/api-keys) section in your ImageKit dashboard.\n\nIn the `python/sample.py` file, set the following parameters for authentication:\n\n```python\nfrom imagekitio import ImageKit\nimagekit = ImageKit(\n    private_key='your private_key',\n    public_key='your public_key',\n    url_endpoint = 'your url_endpoint'\n)\n```\n\nTo install dependencies that are in the `python/requirements.txt` file, can fire this command to install them:\n\n```shell\npip install -r python/requirements.txt\n```\n\nNow run `python/sample.py`. If you are using CLI Tool (Terminal/Command prompt), open the project in CLI and execute it.\n\n```shell\n# if not installed already\npip install imagekitio\n\n# if installing local sdk\npip install -e <path_to_local_sdk>\n\n# to run sample.py file\npython3 python/sample.py\n```\n\n## Support\n\nFor any feedback or to report any issues or general implementation support, please reach out\nto [support@imagekit.io](https://github.com/imagekit-developer/imagekit-python)\n\n## Links\n\n-   [Documentation](https://docs.imagekit.io/)\n\n-   [Main Website](https://imagekit.io/)\n\n## License\n\nReleased under the MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imagekit-developer/imagekit-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imagekitio",
    "package_url": "https://pypi.org/project/imagekitio/",
    "platform": null,
    "project_url": "https://pypi.org/project/imagekitio/",
    "project_urls": {
      "Homepage": "https://github.com/imagekit-developer/imagekit-python"
    },
    "release_url": "https://pypi.org/project/imagekitio/3.0.1/",
    "requires_dist": [
      "requests (>=2.22.0)",
      "requests-toolbelt (==0.9.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python wrapper for the ImageKit API",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15468790,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fb04814268201e6c79fc0e2d9c9bd91c256c4a1e628bec7ebcd92100532c89a",
          "md5": "10182794730f4562fab7952db89ef019",
          "sha256": "144d703e045a3fe8f0ce7901afd356ae25a4220d0bd95c4e3433127388e581e6"
        },
        "downloads": -1,
        "filename": "imagekitio-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10182794730f4562fab7952db89ef019",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5198,
        "upload_time": "2017-03-16T06:16:06",
        "upload_time_iso_8601": "2017-03-16T06:16:06.213021Z",
        "url": "https://files.pythonhosted.org/packages/7f/b0/4814268201e6c79fc0e2d9c9bd91c256c4a1e628bec7ebcd92100532c89a/imagekitio-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6444706f14c44cde35b1705a179c0833bf52dd21fd8118f2e799f827bab596a",
          "md5": "84a3112558853d7d8676c024a1263c6a",
          "sha256": "277e1a10cdb12ea6c3db8ea08a02bc3d8fb749ccd89d4d31e7598bdd5a7c30b3"
        },
        "downloads": -1,
        "filename": "imagekitio-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "84a3112558853d7d8676c024a1263c6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5248,
        "upload_time": "2017-05-29T05:46:19",
        "upload_time_iso_8601": "2017-05-29T05:46:19.270044Z",
        "url": "https://files.pythonhosted.org/packages/f6/44/4706f14c44cde35b1705a179c0833bf52dd21fd8118f2e799f827bab596a/imagekitio-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d5ce3353645871814d030b8e5d5538b09fc001f2de018ce6eb99a7f8305d3a4",
          "md5": "e36ab0f68ad2e0304f748ffcf7afd229",
          "sha256": "37765ff79dd57f4c976b4634e098c3799450b97293fa6a667a6f6b0e48d27787"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e36ab0f68ad2e0304f748ffcf7afd229",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6111,
        "upload_time": "2017-12-08T10:49:13",
        "upload_time_iso_8601": "2017-12-08T10:49:13.086869Z",
        "url": "https://files.pythonhosted.org/packages/2d/5c/e3353645871814d030b8e5d5538b09fc001f2de018ce6eb99a7f8305d3a4/imagekitio-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00ebe5a1c7f669421df952ae1d7ef7bc297071d38ef41b5aae62216dab644446",
          "md5": "533ce41e065ab75c57bb8aae37fd6029",
          "sha256": "87222b59e0f543d9b81290b261194133fa92a40d5062f720a5ef18ef91ce904b"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "533ce41e065ab75c57bb8aae37fd6029",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6077,
        "upload_time": "2018-05-04T07:20:58",
        "upload_time_iso_8601": "2018-05-04T07:20:58.281420Z",
        "url": "https://files.pythonhosted.org/packages/00/eb/e5a1c7f669421df952ae1d7ef7bc297071d38ef41b5aae62216dab644446/imagekitio-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e0e566dc1f1be898f50cd2479da3ea28bf168219eb05c1971b88ad0d37dd078",
          "md5": "cb93c740211b411a7a777b1707d9baab",
          "sha256": "d8000df82c8c2971b960290e04bc23ee80cf1eba7aa69dc327458e699d6d39ae"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cb93c740211b411a7a777b1707d9baab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6167,
        "upload_time": "2018-05-04T13:15:24",
        "upload_time_iso_8601": "2018-05-04T13:15:24.698300Z",
        "url": "https://files.pythonhosted.org/packages/7e/0e/566dc1f1be898f50cd2479da3ea28bf168219eb05c1971b88ad0d37dd078/imagekitio-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a15c44eca06c3eb9b43e14c94f7b8ba78d791d0806820dd3cd1ba0b993209c5",
          "md5": "31954a0ec6ccb0c16cae855963da8a8a",
          "sha256": "1ff5b61e1f9502ac1748e271fc3fc8093cc506b3a33fbb4cd13b5388d5ca29db"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "31954a0ec6ccb0c16cae855963da8a8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6177,
        "upload_time": "2018-10-09T10:12:52",
        "upload_time_iso_8601": "2018-10-09T10:12:52.187975Z",
        "url": "https://files.pythonhosted.org/packages/9a/15/c44eca06c3eb9b43e14c94f7b8ba78d791d0806820dd3cd1ba0b993209c5/imagekitio-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5569a9343dbc119e50ea355a70d72b2ab29033d9bdf6bba98ffa5782f8495f18",
          "md5": "9d5d2022e2c6366291344c3ed2fcdbce",
          "sha256": "8da113d26e8e9513dc6cf5deb6087828275779154090b3b79c07675175c4fa33"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9d5d2022e2c6366291344c3ed2fcdbce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6269,
        "upload_time": "2018-11-01T10:25:29",
        "upload_time_iso_8601": "2018-11-01T10:25:29.520901Z",
        "url": "https://files.pythonhosted.org/packages/55/69/a9343dbc119e50ea355a70d72b2ab29033d9bdf6bba98ffa5782f8495f18/imagekitio-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79bfe8d246c613f67c54ca86295ca8e08fda079d9a674e65cc7b18ca4d686bd2",
          "md5": "c4b0f883655c8b934d17438599485771",
          "sha256": "6b10b301ebdfb3541444494c014355de85e935f3a4e390778f82f9b1d5d337f6"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c4b0f883655c8b934d17438599485771",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6492,
        "upload_time": "2019-01-22T07:56:29",
        "upload_time_iso_8601": "2019-01-22T07:56:29.169883Z",
        "url": "https://files.pythonhosted.org/packages/79/bf/e8d246c613f67c54ca86295ca8e08fda079d9a674e65cc7b18ca4d686bd2/imagekitio-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2045816c1208cd969d8857c48ca219830cfa13f425495cea2c7bbc66f00ceb0",
          "md5": "731278a4a05de506ad4c73404186219c",
          "sha256": "4d8b04403f0124d99a93a1a027c4b7c9a8de046ded9165922ceb2218294d88dd"
        },
        "downloads": -1,
        "filename": "imagekitio-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "731278a4a05de506ad4c73404186219c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6614,
        "upload_time": "2019-07-01T05:57:00",
        "upload_time_iso_8601": "2019-07-01T05:57:00.517526Z",
        "url": "https://files.pythonhosted.org/packages/d2/04/5816c1208cd969d8857c48ca219830cfa13f425495cea2c7bbc66f00ceb0/imagekitio-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ac8946841d7ad1a75e4f3c0df504ebc2865ba484bb6811e465bc17a8c262372",
          "md5": "780843ac8e5a38d8562fbb9165667e01",
          "sha256": "2a1a15150046c47fadd37b257669a8cf3e89f25cda749d0b1c7eedcd88d3b276"
        },
        "downloads": -1,
        "filename": "imagekitio-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "780843ac8e5a38d8562fbb9165667e01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28883,
        "upload_time": "2020-01-20T18:34:02",
        "upload_time_iso_8601": "2020-01-20T18:34:02.324610Z",
        "url": "https://files.pythonhosted.org/packages/8a/c8/946841d7ad1a75e4f3c0df504ebc2865ba484bb6811e465bc17a8c262372/imagekitio-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cc89281ade21f918cd2fcf1e406d32eb320254e53877c71065853d520e2f0a8",
          "md5": "49dec484ca9b3ef32caf914d6d28fa52",
          "sha256": "202bfb5537f6c32acdca5a0030a144a2edbb624e364571c1fd0766076ec7244e"
        },
        "downloads": -1,
        "filename": "imagekitio-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "49dec484ca9b3ef32caf914d6d28fa52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36703,
        "upload_time": "2020-01-20T18:34:03",
        "upload_time_iso_8601": "2020-01-20T18:34:03.933041Z",
        "url": "https://files.pythonhosted.org/packages/1c/c8/9281ade21f918cd2fcf1e406d32eb320254e53877c71065853d520e2f0a8/imagekitio-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b347d3ff6f2787ee80c36fd4c18d83ba73751ee45375dc71f450690174035b1f",
          "md5": "0479e81b573f9e4ea1787bd0f8529357",
          "sha256": "ad415578006cf885921d58976bd45195951734dc96918a6c5d5ba609f773011a"
        },
        "downloads": -1,
        "filename": "imagekitio-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0479e81b573f9e4ea1787bd0f8529357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29812,
        "upload_time": "2020-01-28T07:36:12",
        "upload_time_iso_8601": "2020-01-28T07:36:12.804379Z",
        "url": "https://files.pythonhosted.org/packages/b3/47/d3ff6f2787ee80c36fd4c18d83ba73751ee45375dc71f450690174035b1f/imagekitio-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5617d571e28e3a00eec365536d391dda2a5dafe377fd84d56b3b258083e68a96",
          "md5": "80f8366ed91240798f764304b6e9e0f4",
          "sha256": "d0704eb31aa73f1cad375cb2aa8ad65daa25b319116074256db2800644ce7900"
        },
        "downloads": -1,
        "filename": "imagekitio-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80f8366ed91240798f764304b6e9e0f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38080,
        "upload_time": "2020-01-28T07:36:14",
        "upload_time_iso_8601": "2020-01-28T07:36:14.552908Z",
        "url": "https://files.pythonhosted.org/packages/56/17/d571e28e3a00eec365536d391dda2a5dafe377fd84d56b3b258083e68a96/imagekitio-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52779032ab54b93997637512c1848c0e73f7f6f9cd4ed035afe8b4875a7080d3",
          "md5": "ddbfada9d44b57a20d2f1b3f82cd87de",
          "sha256": "9664beb9d7893d9f2521f97bc8d80199d03845652f9b7916eec51c636964e5c9"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ddbfada9d44b57a20d2f1b3f82cd87de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30021,
        "upload_time": "2020-02-03T16:26:46",
        "upload_time_iso_8601": "2020-02-03T16:26:46.838781Z",
        "url": "https://files.pythonhosted.org/packages/52/77/9032ab54b93997637512c1848c0e73f7f6f9cd4ed035afe8b4875a7080d3/imagekitio-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef1884b77bd59ecdf4d452e8a2bd5e5a088ff2eca900e3d38e47d4f5413f60e3",
          "md5": "f2eeb952881a0e95633a6c7da74d93af",
          "sha256": "2bb9e05ae5187606465f0a1887fe0394de48275e3da449af1da7e9e12fdd7249"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2eeb952881a0e95633a6c7da74d93af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38357,
        "upload_time": "2020-02-03T16:26:48",
        "upload_time_iso_8601": "2020-02-03T16:26:48.498781Z",
        "url": "https://files.pythonhosted.org/packages/ef/18/84b77bd59ecdf4d452e8a2bd5e5a088ff2eca900e3d38e47d4f5413f60e3/imagekitio-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45d7a40bb8fb22cbca8beff6515670dc41ac9a4836bb7a6263b337cba9b7b945",
          "md5": "1b2a39c7db3bdd7e89903f3922514d10",
          "sha256": "46322d97b496d18d32f930d6aa44445d43bcb347fd28bdfd6a8fbe600d9449c9"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b2a39c7db3bdd7e89903f3922514d10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30024,
        "upload_time": "2020-02-13T15:35:43",
        "upload_time_iso_8601": "2020-02-13T15:35:43.308593Z",
        "url": "https://files.pythonhosted.org/packages/45/d7/a40bb8fb22cbca8beff6515670dc41ac9a4836bb7a6263b337cba9b7b945/imagekitio-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51260056fe761296d334cf275f58080687956f90d46884e44fca0e7ba15b7d66",
          "md5": "092658a9d66d41a8134869fde9163e50",
          "sha256": "d201e413900e53495fad9dc626a2f202d7fcf8b4afa3d13bc5f624818579a083"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "092658a9d66d41a8134869fde9163e50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38355,
        "upload_time": "2020-02-13T15:35:45",
        "upload_time_iso_8601": "2020-02-13T15:35:45.048416Z",
        "url": "https://files.pythonhosted.org/packages/51/26/0056fe761296d334cf275f58080687956f90d46884e44fca0e7ba15b7d66/imagekitio-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c3adf810727a3029ba501e4a688b646f71215e6e036e9dfc1737f5e744f7fa6",
          "md5": "69b466dadcb8e22742b5db6e4ca3500b",
          "sha256": "5fc2f9a6d4bdede96622d701080829becacde0b146f71fb3ea39baa623873762"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69b466dadcb8e22742b5db6e4ca3500b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30028,
        "upload_time": "2020-02-13T15:43:10",
        "upload_time_iso_8601": "2020-02-13T15:43:10.981786Z",
        "url": "https://files.pythonhosted.org/packages/0c/3a/df810727a3029ba501e4a688b646f71215e6e036e9dfc1737f5e744f7fa6/imagekitio-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8d010ea4d02f147336ac976c071150f0b72fb6c763dfe3588c94253931c1f19",
          "md5": "bf532cb3e93b0180e49bc5acbc42f3ad",
          "sha256": "29e270a0999d23088239a71490634b777cae13a6e1cc2855553aae0939dde791"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bf532cb3e93b0180e49bc5acbc42f3ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38364,
        "upload_time": "2020-02-13T15:43:12",
        "upload_time_iso_8601": "2020-02-13T15:43:12.830065Z",
        "url": "https://files.pythonhosted.org/packages/b8/d0/10ea4d02f147336ac976c071150f0b72fb6c763dfe3588c94253931c1f19/imagekitio-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1cf81cca01153f4f4c81cf086121fa1ba6aa00f3019f6ab49b39be9ff710f2",
          "md5": "72341b97d68559f75531cc3da5ebdd45",
          "sha256": "7bb3de6a1d755f4e764702cc8a08f19e3f0f0e3d45bf2c97c46e2170dd0b29d7"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72341b97d68559f75531cc3da5ebdd45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30029,
        "upload_time": "2020-02-14T05:25:07",
        "upload_time_iso_8601": "2020-02-14T05:25:07.928216Z",
        "url": "https://files.pythonhosted.org/packages/ca/1c/f81cca01153f4f4c81cf086121fa1ba6aa00f3019f6ab49b39be9ff710f2/imagekitio-2.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c565bfd9f57e51d4b7e0bc4e72f1b44690c9c5e8edd327966debf26028a8bf18",
          "md5": "a92943c85695e9faeb65f89e56c73b78",
          "sha256": "0b2ee966e78fad9700fd7bcc24c1b3e0e0420fc27036e6d79f3d158b17fb042a"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a92943c85695e9faeb65f89e56c73b78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38354,
        "upload_time": "2020-02-14T05:25:09",
        "upload_time_iso_8601": "2020-02-14T05:25:09.342980Z",
        "url": "https://files.pythonhosted.org/packages/c5/65/bfd9f57e51d4b7e0bc4e72f1b44690c9c5e8edd327966debf26028a8bf18/imagekitio-2.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ce37dcfb9e7a11755f0c32d55959bcc684827fa71f31458506e80d08aa5f1e8",
          "md5": "7e082825673b05aff61a7df6cfad3b74",
          "sha256": "e02a140f223b17568d05a845c7a09b1a459d339d8e7b89ff43d49f28046c7f31"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e082825673b05aff61a7df6cfad3b74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29658,
        "upload_time": "2020-04-27T06:15:00",
        "upload_time_iso_8601": "2020-04-27T06:15:00.242276Z",
        "url": "https://files.pythonhosted.org/packages/4c/e3/7dcfb9e7a11755f0c32d55959bcc684827fa71f31458506e80d08aa5f1e8/imagekitio-2.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90c740a0befa5a04b3273117b44e462cff4e039d4efa5b9c87cb2fb86ec43983",
          "md5": "fca69911a2e35efc2509666d939cc99e",
          "sha256": "01f88afca4bc3635aaffbff3442e6eddb6af1bb9c901c6518d2c739670e008f7"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fca69911a2e35efc2509666d939cc99e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28826,
        "upload_time": "2020-04-27T06:15:01",
        "upload_time_iso_8601": "2020-04-27T06:15:01.541194Z",
        "url": "https://files.pythonhosted.org/packages/90/c7/40a0befa5a04b3273117b44e462cff4e039d4efa5b9c87cb2fb86ec43983/imagekitio-2.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75a373365c4f7192c81e6fdc29f2370d9439806f044bffaf2a135b6f7a52c174",
          "md5": "31f889d23481f77d8a4098bfd8e05f76",
          "sha256": "6d0d8ebfcd8346a665d2f1ff9001522c5cd4d4d3ac1885b5bd3a988d98e10e3c"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31f889d23481f77d8a4098bfd8e05f76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30954,
        "upload_time": "2020-11-09T09:44:20",
        "upload_time_iso_8601": "2020-11-09T09:44:20.930859Z",
        "url": "https://files.pythonhosted.org/packages/75/a3/73365c4f7192c81e6fdc29f2370d9439806f044bffaf2a135b6f7a52c174/imagekitio-2.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "874217a0943f183cd4c179778723b7ce3bb948df3c3702a44848bca608a0b99c",
          "md5": "962a7c3704c6fb309bbf028da6bf36b1",
          "sha256": "7be1309aeba895cb62d754b7389e7d162d9371559508170a7f70fa07f2cc91f7"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "962a7c3704c6fb309bbf028da6bf36b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30218,
        "upload_time": "2020-11-09T09:44:22",
        "upload_time_iso_8601": "2020-11-09T09:44:22.923129Z",
        "url": "https://files.pythonhosted.org/packages/87/42/17a0943f183cd4c179778723b7ce3bb948df3c3702a44848bca608a0b99c/imagekitio-2.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da5ff71b770a364a2606aded0e0db11d5e78134c312830777e46536b61291bab",
          "md5": "3e65164bc55af4daeab6818a2cec273b",
          "sha256": "ec10bb34a5e7428361320381dc5a49ff4732c11831ef1bd7ce9828982d6c11da"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e65164bc55af4daeab6818a2cec273b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31017,
        "upload_time": "2021-03-12T13:22:40",
        "upload_time_iso_8601": "2021-03-12T13:22:40.870398Z",
        "url": "https://files.pythonhosted.org/packages/da/5f/f71b770a364a2606aded0e0db11d5e78134c312830777e46536b61291bab/imagekitio-2.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb4ea472a1d9d1e180b5b4a1f5763b5af3457f0995a0e8a6ded779676ea6a646",
          "md5": "a9224dd2b8378a2b40d0973b0d7eade4",
          "sha256": "769de286eb947f0a1d7cbfdd4f185a634a751c7f659db254f6fc75542d670a59"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a9224dd2b8378a2b40d0973b0d7eade4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30258,
        "upload_time": "2021-03-12T13:22:42",
        "upload_time_iso_8601": "2021-03-12T13:22:42.214792Z",
        "url": "https://files.pythonhosted.org/packages/bb/4e/a472a1d9d1e180b5b4a1f5763b5af3457f0995a0e8a6ded779676ea6a646/imagekitio-2.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ed4d169bda18dfb92f2411b7484261c96972682bd14f449321cc26f4eed7505",
          "md5": "c80e74ae161ccee2aa83686d904b8e76",
          "sha256": "53d237356832e8ec709b398174715bfbfabd651bb0e3fa0aaa946751743650f1"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c80e74ae161ccee2aa83686d904b8e76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31012,
        "upload_time": "2021-04-12T07:33:01",
        "upload_time_iso_8601": "2021-04-12T07:33:01.039355Z",
        "url": "https://files.pythonhosted.org/packages/2e/d4/d169bda18dfb92f2411b7484261c96972682bd14f449321cc26f4eed7505/imagekitio-2.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a9e632441465848c23ec029a715f33455602cc5e79fc7d723846b557af63af1",
          "md5": "17101b098db8237feb525e50878e0707",
          "sha256": "1b9779c49d652ee6d291f474cd89dda3c3a017d56235a72bd25d6941ff4b0fec"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "17101b098db8237feb525e50878e0707",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30302,
        "upload_time": "2021-04-12T07:33:02",
        "upload_time_iso_8601": "2021-04-12T07:33:02.162175Z",
        "url": "https://files.pythonhosted.org/packages/8a/9e/632441465848c23ec029a715f33455602cc5e79fc7d723846b557af63af1/imagekitio-2.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64480ff94ce6d81dc390a2fd0626f7d832eb075ea553236f735ca28c8dea4e0f",
          "md5": "ae80b8fb8c5c560e8710ef43cefe73cd",
          "sha256": "3e1d5fe93635a24ba723d389e664c0ed0222673e3b1b0744b3506a81d2702119"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae80b8fb8c5c560e8710ef43cefe73cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31242,
        "upload_time": "2021-06-29T11:02:41",
        "upload_time_iso_8601": "2021-06-29T11:02:41.900624Z",
        "url": "https://files.pythonhosted.org/packages/64/48/0ff94ce6d81dc390a2fd0626f7d832eb075ea553236f735ca28c8dea4e0f/imagekitio-2.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a7a47ceca7786d0f563165c8eb67a9ea6c1ccc1d554c1a72cae8bb770dd3ad0",
          "md5": "91e318261b4fc086e8bfe9654cf2191d",
          "sha256": "24d7572144e07e004722455e41a51d8b0db295de450db66fbe9b79f1f70f8923"
        },
        "downloads": -1,
        "filename": "imagekitio-2.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "91e318261b4fc086e8bfe9654cf2191d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31172,
        "upload_time": "2021-06-29T11:02:43",
        "upload_time_iso_8601": "2021-06-29T11:02:43.451943Z",
        "url": "https://files.pythonhosted.org/packages/8a/7a/47ceca7786d0f563165c8eb67a9ea6c1ccc1d554c1a72cae8bb770dd3ad0/imagekitio-2.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8918ac68d66376cd597e4989c3fabfd2ba11540101eaa1d05c2f92926aedf200",
          "md5": "8403e7513c6eb8307b0d64c9029a3e5a",
          "sha256": "d9074fb104316637b2c1b7633a140bcee3e7e2ab4368c0d16d9ef2c5d34b7335"
        },
        "downloads": -1,
        "filename": "imagekitio-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8403e7513c6eb8307b0d64c9029a3e5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 179027,
        "upload_time": "2022-09-30T10:54:15",
        "upload_time_iso_8601": "2022-09-30T10:54:15.111102Z",
        "url": "https://files.pythonhosted.org/packages/89/18/ac68d66376cd597e4989c3fabfd2ba11540101eaa1d05c2f92926aedf200/imagekitio-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d2369c38f3941046f1d869ac5589dd629e24feea75c946f664b91f88a5efa9f",
          "md5": "32bece67135a8135221493db16a2ce9f",
          "sha256": "2058e801b4e189933523e53cded72528ecb9981eb0fd50367bf1132490614e93"
        },
        "downloads": -1,
        "filename": "imagekitio-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "32bece67135a8135221493db16a2ce9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 176031,
        "upload_time": "2022-09-30T10:54:17",
        "upload_time_iso_8601": "2022-09-30T10:54:17.321967Z",
        "url": "https://files.pythonhosted.org/packages/8d/23/69c38f3941046f1d869ac5589dd629e24feea75c946f664b91f88a5efa9f/imagekitio-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9687de27270bbeb641428ba727d5aa75070281168567d0dce11c7504f70319d5",
          "md5": "ed18bb1708b52451e3b26202f31bf3e8",
          "sha256": "d98c97933a973dfbda7ac4124df8682d5f1126de4fa302dee1645586537f12fa"
        },
        "downloads": -1,
        "filename": "imagekitio-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed18bb1708b52451e3b26202f31bf3e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 178987,
        "upload_time": "2022-10-20T03:39:30",
        "upload_time_iso_8601": "2022-10-20T03:39:30.557808Z",
        "url": "https://files.pythonhosted.org/packages/96/87/de27270bbeb641428ba727d5aa75070281168567d0dce11c7504f70319d5/imagekitio-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4f4405c9c9657627a84c9a0de3a805798e2b75175dd62ec5f46630e0d0ab1d0",
          "md5": "fd1fc132324763e71f644f1a0e3858ce",
          "sha256": "c5e288b748272e01f1bea42e3137ed4a25d1f61c19c4c48f6eeaceecb62c6ff1"
        },
        "downloads": -1,
        "filename": "imagekitio-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd1fc132324763e71f644f1a0e3858ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 175989,
        "upload_time": "2022-10-20T03:39:33",
        "upload_time_iso_8601": "2022-10-20T03:39:33.009821Z",
        "url": "https://files.pythonhosted.org/packages/c4/f4/405c9c9657627a84c9a0de3a805798e2b75175dd62ec5f46630e0d0ab1d0/imagekitio-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9687de27270bbeb641428ba727d5aa75070281168567d0dce11c7504f70319d5",
        "md5": "ed18bb1708b52451e3b26202f31bf3e8",
        "sha256": "d98c97933a973dfbda7ac4124df8682d5f1126de4fa302dee1645586537f12fa"
      },
      "downloads": -1,
      "filename": "imagekitio-3.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed18bb1708b52451e3b26202f31bf3e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 178987,
      "upload_time": "2022-10-20T03:39:30",
      "upload_time_iso_8601": "2022-10-20T03:39:30.557808Z",
      "url": "https://files.pythonhosted.org/packages/96/87/de27270bbeb641428ba727d5aa75070281168567d0dce11c7504f70319d5/imagekitio-3.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4f4405c9c9657627a84c9a0de3a805798e2b75175dd62ec5f46630e0d0ab1d0",
        "md5": "fd1fc132324763e71f644f1a0e3858ce",
        "sha256": "c5e288b748272e01f1bea42e3137ed4a25d1f61c19c4c48f6eeaceecb62c6ff1"
      },
      "downloads": -1,
      "filename": "imagekitio-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fd1fc132324763e71f644f1a0e3858ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 175989,
      "upload_time": "2022-10-20T03:39:33",
      "upload_time_iso_8601": "2022-10-20T03:39:33.009821Z",
      "url": "https://files.pythonhosted.org/packages/c4/f4/405c9c9657627a84c9a0de3a805798e2b75175dd62ec5f46630e0d0ab1d0/imagekitio-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}