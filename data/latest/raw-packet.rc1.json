{
  "info": {
    "author": "Vladimir Ivanov",
    "author_email": "ivanov.vladimir.mail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "Environment :: MacOS X",
      "Intended Audience :: Education",
      "License :: Free For Educational Use",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Security"
    ],
    "description": "Raw-packet project\n===================\n\n[![Official site][site-label]][site-link]\n[![Required OS][os-label]][os-link]\n[![Python3 version][python3-versions-label]][python3-versions-link]\n[![License][license-label]][license-link]\n[![Version][version-label]][version-link]\n[![Stability][stability-label]][stability-link]\n\n[site-label]: https://raw-packet.github.io/static/images/labels/site.svg\n[site-link]: https://raw-packet.github.io/\n[os-label]: https://raw-packet.github.io/static/images/labels/os.svg\n[os-link]: https://en.wikipedia.org/wiki/Operating_system\n[python3-versions-label]: https://raw-packet.github.io/static/images/labels/python3.svg\n[python3-versions-link]: https://www.python.org/downloads/release/python-360/\n[license-label]: https://raw-packet.github.io/static/images/labels/license.svg\n[license-link]: https://github.com/raw-packet/raw-packet/blob/master/LICENSE\n[version-label]: https://raw-packet.github.io/static/images/labels/version.svg\n[version-link]: https://github.com/raw-packet/raw-packet/releases\n[stability-label]: https://raw-packet.github.io/static/images/labels/stability.svg\n[stability-link]: https://github.com/raw-packet/raw-packet/releases\n\n[![Logo](https://raw-packet.github.io/static/images/logo/logo-caption.png)](https://raw-packet.github.io/)\n\n---\n\n# Important information\n***This project is created only for educational purposes and can not be used for \nlaw violation or personal gain.<br/>The author of this project is not responsible for any possible harm caused by the materials of this project.***\n\n# Description \nThis project implements network protocols such as Ethernet ARP IPv4 UDP TCP DHCPv4 ICMPv4 IPv6 DHCPv6 ICMPv6 DNS MDNS on raw socket.\n\n---\n\n# Info\n\nAuthor: [Vladimir Ivanov](https://github.com/Vladimir-Ivanov-Git)\n\nSubAuthors: [Ilja Bulatov](https://github.com/barrracud4)\n\nProject email: [raw.packet.project@gmail.com](mailto:raw.packet.project@gmail.com)\n\nRequired OS: Windows, MacOS, Linux\n\nPython minimum versions: [3.6](https://www.python.org/downloads/release/python-360/)\n\nLicense: [MIT](https://github.com/raw-packet/raw-packet/blob/master/LICENSE)\n\n---\n\n# Install\n\n## Debian based OS install:\n```\nsudo apt update\nsudo apt install -y python3 python3-pip wireless-tools tshark\npip3 install --upgrade pip\nsudo pip3 install raw-packet\n```\n\n## MacOS install:\n\n#### 1. Install Homebrew:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n#### 2. Adding repository to Homebrew:\n```\nbrew tap raw-packet/raw-packet\n```\n\n#### 3. Install Raw-packet:\n```\nbrew install raw-packet\n```\n\n## Windows install:\n\n#### 1. Install [Wireshark](https://www.wireshark.org/download.html)\n\n#### 2. Install [Python 3.8](https://www.microsoft.com/en-us/p/python-38/9mssztt1n39l)\n\n#### 3. Install Raw-packet:\n```\npip3 install --upgrade pip\npip3 install raw-packet\n```\n\n---\n\n## Publications (on russian)\n\n- [Apple security updates](https://support.apple.com/en-us/HT209341)\n\n- [PHDays: Apple, all about MiTM](https://www.phdays.com/en/program/reports/apple-all-about-mitm/)\n\n- [Yandex IT SEC 2018: Apple vs DHCP](https://events.yandex.ru/lib/talks/5519/)\n\n- [Xakep.ru: Advanced Wi-Fi MiTM](https://xakep.ru/2017/09/25/wifi-mitm-advanced/)\n\n- [Attacking DHCP](https://habrahabr.ru/company/dsec/blog/333978/)\n\n- [Attacking DHCP part 2: Wi-Fi](https://habrahabr.ru/post/338860/)\n\n- [Attacking DHCP part 3: Apple](https://habrahabr.ru/post/338864/)\n\n- [Attacking DHCP part 4: Apple + ARP](https://habrahabr.ru/post/339666/)\n\n---\n\n## Performance \n\nThis project was designed specifically to improve the performance and speed of requests needed for network attacks.\n\nOn Linux you can compare perfomance of this project with popular python library [SCAPY](https://scapy.net/) via script [time_test.py](https://github.com/raw-packet/raw-packet/blob/master/Scripts/Others/time_test.py)\n\nOur testing you can see bellow\n\n| Number of Packets                          | 10                | 100              | 1000            | 10000         |\n|--------------------------------------------|-------------------|------------------|-----------------|---------------|\n| ARP requests in Scapy (sec)                | 0,0522048473358   | 0,0785529613495  | 0,302206039429  | 2,95294880867 |\n| ARP requests in Raw-packet (sec)           | 0,00202298164368  | 0,00270104408264 | 0,090922832489  | 1,3037519455  |\n| DHCP discover requests in Scapy (sec)      | 0,397399187088    | 4,16092181206    | 39,5892789364   |       -       |\n| DHCP discover requests in Raw-packet (sec) | 0,00177597999573  | 0,0219049453735  | 0,162989854813  |       -       |\n| DNS requests in Scapy (sec)                | 0.608256101608    | 6.05325508118    | 58.4151289463   |       -       |\n| DNS requests in Raw-packet (sec)           | 0.00274395942688  | 0.0127770900726  | 0.0796978473663 |       -       |\n\n\n![Scapy vs. Raw-packet ARP requests](https://raw-packet.github.io/static/images/others/ARP_requests_timing.png)\n\n![Scapy vs. Raw-packet DHCP discover requests](https://raw-packet.github.io/static/images/others/DHCP_discover_requests_timing.png)\n\n![Scapy vs. Raw-packet DNS requests](https://raw-packet.github.io/static/images/others/DNS_requests_timing.png)\n\n---\n\n# Scripts\n\n# Apple attacks\n\n## Script: [apple_mitm](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/Apple/apple_mitm.py)\n\nThis script automatically finds Apple devices on the local network using an ARP, NMAP or ICMPv6 scan and implements the MiTM attack with the following techniques:\n1. ARP Spoofing\n1. Second DHCP ACK\n1. Predict next DHCP transaction ID\n1. Rogue SLAAC/DHCPv6 server\n1. NA Spoofing (IPv6)\n1. RA Spoofing (IPv6)\n\n```\nroot@kali:~# apple_mitm --help\nusage: apple_mitm [-h] [-T TECHNIQUE] [-D DISCONNECT] [-P PHISHING_SITE] [-i MITM_IFACE]\n                  [-d DEAUTH_IFACE] [-0 DEAUTH_PACKETS] [-g4 GATEWAY_IPV4] [-g6 GATEWAY_IPV6]\n                  [-d4 DNS_IPV4] [-d6 DNS_IPV6] [-m TARGET_MAC] [-t4 TARGET_IPV4]\n                  [-n4 TARGET_NEW_IPV4] [-t6 TARGET_IPV6] [-n6 TARGET_NEW_IPV6]\n                  [--ipv6_prefix IPV6_PREFIX]\n\n            MiTM Apple devices (apple_mitm)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -T TECHNIQUE, --technique TECHNIQUE\n                        Set MiTM technique:\n                        1. ARP Spoofing\n                        2. Second DHCP ACK\n                        3. Predict next DHCP transaction ID\n                        4. Rogue SLAAC/DHCPv6 server\n                        5. NA Spoofing (IPv6)\n                        6. RA Spoofing (IPv6)\n  -D DISCONNECT, --disconnect DISCONNECT\n                        Set device Disconnect technique:\n                        1. IPv4 network conflict detection\n                        2. Send WiFi deauthentication packets\n                        3. Do not disconnect device after MiTM\n  -P PHISHING_SITE, --phishing_site PHISHING_SITE\n                        Set Phishing site \"apple\", \"google\" or Path to your site\n  -i MITM_IFACE, --mitm_iface MITM_IFACE\n                        Set interface name for MiTM\n  -d DEAUTH_IFACE, --deauth_iface DEAUTH_IFACE\n                        Set interface name for send wifi deauth packets\n  -0 DEAUTH_PACKETS, --deauth_packets DEAUTH_PACKETS\n                        Set number of deauth packets (default: 25)\n  -g4 GATEWAY_IPV4, --gateway_ipv4 GATEWAY_IPV4\n                        Set gateway IPv4 address\n  -g6 GATEWAY_IPV6, --gateway_ipv6 GATEWAY_IPV6\n                        Set gateway IPv6 address\n  -d4 DNS_IPV4, --dns_ipv4 DNS_IPV4\n                        Set DNS server IPv4 address\n  -d6 DNS_IPV6, --dns_ipv6 DNS_IPV6\n                        Set DNS server IPv6 address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -t4 TARGET_IPV4, --target_ipv4 TARGET_IPV4\n                        Set target IPv4 address\n  -n4 TARGET_NEW_IPV4, --target_new_ipv4 TARGET_NEW_IPV4\n                        Set new IPv4 address for target\n  -t6 TARGET_IPV6, --target_ipv6 TARGET_IPV6\n                        Set link local target IPv6 address\n  -n6 TARGET_NEW_IPV6, --target_new_ipv6 TARGET_NEW_IPV6\n                        Set new global IPv6 address for target\n  --ipv6_prefix IPV6_PREFIX\n                        Set IPv6 network prefix, default - fde4:8dba:82e1:ffff::/64\n```\n\n### Sample script output:\n![apple_mitm output](https://raw-packet.github.io/static/images/screenshots/apple_mitm_screenshot.png)\n\n---\n\n## Script: [apple_arp_dos](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/Apple/apple_arp_dos.py)\n\nDisconnect Apple device from the local network using ARP packets\n\n```\nroot@kali:~# apple_arp_dos --help\nusage: apple_arp_dos [-h] [-i INTERFACE] [-t TARGET_IP] [-m TARGET_MAC] [-q]\n\nDisconnect Apple device in local network with ARP packets (apple_arp_dos)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set network interface name\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IPv4 address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![apple_arp_dos output](https://raw-packet.github.io/static/images/screenshots/apple_arp_dos_screenshot.png)\n\n---\n\n## Script: [apple_dhcp_server](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/Apple/apple_dhcp_server.py)\n\nRogue DHCPv4 server for Apple device with predict next DHCPv4 transaction ID\n\n```\nroot@kali:~# apple_dhcp_server --help\nusage: apple_dhcp_server [-h] [-i INTERFACE] -t TARGET_IP -m TARGET_MAC [-b] [-q]\n\nRogue DHCPv4 server for Apple devices (apple_dhcp_server)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set network interface name\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set new IPv4 address for target\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -b, --broadcast       Send broadcast DHCPv4 responses\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![apple_dhcp_server output](https://raw-packet.github.io/static/images/screenshots/apple_dhcp_server_screenshot.png)\n\n---\n\n# ARP\n\nThe [Address Resolution Protocol (ARP)](https://en.wikipedia.org/wiki/Address_Resolution_Protocol) is a communication protocol used for discovering the link layer address, such as a MAC address, associated with a given internet layer address, typically an IPv4 address.\n\n---\n\n## Script: [arp_scan](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/ARP/arp_scan.py)\nThis script creates and sends ARP requests (Who has?) to search for alive hosts on the local network.\n\n```\nroot@kali:~# arp_scan --help\nusage: arp_scan [-h] [-i INTERFACE] [-t TARGET_IP] [--timeout TIMEOUT] [--retry RETRY]\n\n                ARP Scanner (arp_scan)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for ARP scanner\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IPv4 address\n  --timeout TIMEOUT     Set timeout (default=5)\n  --retry RETRY         Set number of retry packets (default=5)\n```\n\n### Sample script output:\n![arp_scan output](https://raw-packet.github.io/static/images/screenshots/arp_scan_screenshot.png)\n\n---\n\n## Script: [arp_spoof](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/ARP/arp_spoof.py)\n\nThis script implement the ARP spoofing attack. \nARP spoofing, ARP cache poisoning or ARP poison routing, is a technique that  an attacker sends fake (spoofed) Address Resolution Protocol (ARP) messages onto a local network.\n\n```\nroot@kali:~# arp_spoof --help\nusage: arp_spoof [-h] [-i INTERFACE] [-t TARGET_IP] [-m TARGET_MAC] [-g GATEWAY_IP] [-r] [--ipv4_multicast]\n                 [--ipv6_multicast] [--broadcast] [-q]\n\n               ARP Spoofing (arp_spoof)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send ARP packets\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IP address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -g GATEWAY_IP, --gateway_ip GATEWAY_IP\n                        Set gateway IP address\n  -r, --requests        Send only ARP requests\n  --ipv4_multicast      Send ARP replies/requests to IPv4 multicast MAC address\n  --ipv6_multicast      Send ARP replies/requests to IPv6 multicast MAC address\n  --broadcast           Send ARP replies/requests to broadcast MAC address\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![arp_spoof output](https://raw-packet.github.io/static/images/screenshots/arp_spoof_screenshot.png)\n\n---\n\n# DHCPv4\n\nThe [Dynamic Host Configuration Protocol (DHCP)](https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol) is a network management protocol used on UDP/IP networks whereby a DHCP server dynamically assigns an IP address and other network configuration parameters to each device on a network so they can communicate with other IP networks.\n\n## Script: [dhcpv4_server](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/DHCPv4/dhcpv4_server.py)\n\nThis script implements an attack on network clients by using fake DHCPv4 server which answers with malicius configuration faster than legitimate DHCPv4 server. \nThis attack also known as Rogue DHCPv4 Server Attack.\n\n```\nroot@kali:~# dhcpv4_server --help\nusage: dhcpv4_server [-h] [-i INTERFACE] [-f FIRST_OFFER_IP] [-l LAST_OFFER_IP]\n                     [-m TARGET_MAC] [-t TARGET_IP] [--netmask NETMASK]\n                     [--dhcp_mac DHCP_MAC] [--dhcp_ip DHCP_IP] [--router ROUTER]\n                     [--dns DNS] [--tftp TFTP] [--wins WINS] [--domain DOMAIN]\n                     [--lease_time LEASE_TIME] [--discover] [-O SHELLSHOCK_OPTION_CODE]\n                     [-c SHELLSHOCK_COMMAND] [-b] [-p BIND_PORT] [-N] [-E] [-R]\n                     [-e REVERSE_PORT] [-n] [-B] [--ip_path IP_PATH]\n                     [--iface_name IFACE_NAME] [--broadcast_response] [--dnsop] [--exit]\n                     [--apple] [-q]\n\n             DHCPv4 server (dhcpv4_server)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send reply packets\n  -f FIRST_OFFER_IP, --first_offer_ip FIRST_OFFER_IP\n                        Set first client ip for offering\n  -l LAST_OFFER_IP, --last_offer_ip LAST_OFFER_IP\n                        Set last client ip for offering\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set client IP address with MAC in --target_mac\n  --netmask NETMASK     Set network mask\n  --dhcp_mac DHCP_MAC   Set DHCP server MAC address, if not set use your MAC address\n  --dhcp_ip DHCP_IP     Set DHCP server IP address, if not set use your IP address\n  --router ROUTER       Set router IP address, if not set use your ip address\n  --dns DNS             Set DNS server IP address, if not set use your ip address\n  --tftp TFTP           Set TFTP server IP address\n  --wins WINS           Set WINS server IP address\n  --domain DOMAIN       Set domain name for search, default=local\n  --lease_time LEASE_TIME\n                        Set lease time, default=172800\n  --discover            Send DHCP discover packets in the background thread\n  -O SHELLSHOCK_OPTION_CODE, --shellshock_option_code SHELLSHOCK_OPTION_CODE\n                        Set dhcp option code for inject shellshock payload, default=114\n  -c SHELLSHOCK_COMMAND, --shellshock_command SHELLSHOCK_COMMAND\n                        Set shellshock command in DHCP client\n  -b, --bind_shell      Use awk bind tcp shell in DHCP client\n  -p BIND_PORT, --bind_port BIND_PORT\n                        Set port for listen bind shell (default=1234)\n  -N, --nc_reverse_shell\n                        Use nc reverse tcp shell in DHCP client\n  -E, --nce_reverse_shell\n                        Use nc -e reverse tcp shell in DHCP client\n  -R, --bash_reverse_shell\n                        Use bash reverse tcp shell in DHCP client\n  -e REVERSE_PORT, --reverse_port REVERSE_PORT\n                        Set port for listen bind shell (default=443)\n  -n, --without_network\n                        Do not add network configure in payload\n  -B, --without_base64  Do not use base64 encode in payload\n  --ip_path IP_PATH     Set path to \"ip\" in shellshock payload, default = /bin/\n  --iface_name IFACE_NAME\n                        Set iface name in shellshock payload, default = eth0\n  --broadcast_response  Send broadcast response\n  --dnsop               Do not send DHCP OFFER packets\n  --exit                Exit on success MiTM attack\n  --apple               Add delay before send DHCP ACK\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![dhcpv4_server output](https://raw-packet.github.io/static/images/screenshots/dhcpv4_server_screenshot.png)\n\n---\n\n# DHCPv6\n\nThe [Dynamic Host Configuration Protocol version 6 (DHCPv6)](https://en.wikipedia.org/wiki/DHCPv6) is a network protocol for configuring Internet Protocol version 6 (IPv6) hosts with IP addresses, IP prefixes and other configuration data required to operate in an IPv6 network. It is the IPv6 equivalent of the Dynamic Host Configuration Protocol for IPv4.\n\n## Script: [dhcpv6_server](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/DHCPv6/dhcpv6_server.py)\n\nThis script implements fake DHCPv6 server for perfom SLAAC attack/Rogue DHCPv6.\n\n```\nroot@kali:~# dhcpv6_server --help\nusage: dhcpv6_server [-h] [-i INTERFACE] [-p PREFIX] [-f FIRST_SUFFIX] [-l LAST_SUFFIX]\n                     [-t TARGET_MAC] [-T TARGET_IPV6] [-D] [-d DNS] [-s DNS_SEARCH]\n                     [--delay DELAY] [-q]\n\n          SLAAC/DHCPv6 server (dhcpv6_server)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send reply packets\n  -p PREFIX, --prefix PREFIX\n                        Set network prefix\n  -f FIRST_SUFFIX, --first_suffix FIRST_SUFFIX\n                        Set first suffix client IPv6 for offering\n  -l LAST_SUFFIX, --last_suffix LAST_SUFFIX\n                        Set last suffix client IPv6 for offering\n  -t TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -T TARGET_IPV6, --target_ipv6 TARGET_IPV6\n                        Set client Global IPv6 address with MAC --target_mac\n  -D, --disable_dhcpv6  Do not use DHCPv6 protocol\n  -d DNS, --dns DNS     Set recursive DNS IPv6 address\n  -s DNS_SEARCH, --dns_search DNS_SEARCH\n                        Set DNS search domain\n  --delay DELAY         Set delay between packets\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![dhcpv6_server output](https://raw-packet.github.io/static/images/screenshots/dhcpv6_server_screenshot.png)\n\n---\n\n# DNS\n\n## Script: [dns_server](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/DNS/dns_server.py)\n\nThis script impelements a simple DNS server (like a [dnschef](https://github.com/iphelix/dnschef)), which is useful in MiTM attacks. You can setup A or AAAA records for several domains. \n\n```\nroot@kali:~# dns_server -h\nusage: dns_server [-h] [-i INTERFACE] [-p PORT] [-t TARGET_MAC] [--T4 T4] [--T6 T6]\n                  [-c CONFIG_FILE] [--fake_domains FAKE_DOMAINS]\n                  [--no_such_domains NO_SUCH_DOMAINS] [--fake_ipv4 FAKE_IPV4]\n                  [--fake_ipv6 FAKE_IPV6] [--ipv6] [--disable_ipv4]\n                  [--log_file_name LOG_FILE_NAME] [--log_file_format LOG_FILE_FORMAT] [-f]\n                  [-q]\n\n                DNS server (dns_server)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send DNS reply packets\n  -p PORT, --port PORT  Set UDP port for listen DNS request packets (default: 53)\n  -t TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  --T4 T4               Set target IPv4 address\n  --T6 T6               Set target IPv6 address\n  -c CONFIG_FILE, --config_file CONFIG_FILE\n                        Set json config file name, example: --config_file\n                        \"dns_server_config.json\"\n  --fake_domains FAKE_DOMAINS\n                        Set fake domain regexp or domains, example: --fake_domains\n                        \".*apple.com,.*google.com\"\n  --no_such_domains NO_SUCH_DOMAINS\n                        Set no such domain or domains, example: --no_such_domains\n                        \"apple.com,google.com\"\n  --fake_ipv4 FAKE_IPV4\n                        Set fake IP address or addresses, example: --fake_ipv4\n                        \"192.168.0.1,192.168.0.2\"\n  --fake_ipv6 FAKE_IPV6\n                        Set fake IPv6 address or addresses, example: --fake_ipv6\n                        \"fd00::1,fd00::2\"\n  --ipv6                Enable IPv6\n  --disable_ipv4        Disable IPv4\n  --log_file_name LOG_FILE_NAME\n                        Set file name for save DNS queries (default: \"dns_server_log\")\n  --log_file_format LOG_FILE_FORMAT\n                        Set file format for save results: csv, xml, json, txt (default:\n                        \"json\")\n  -f, --fake_answer     Set your IPv4 or IPv6 address in all answers\n  -q, --quiet           Minimal output\n```\n\n### Sample script configuration:\n```json\n{\n  \".*google.com\": {\n    \"A\": [\"192.168.0.1\", \"192.168.0.2\"],\n    \"AAAA\": \"fd00::1\",\n    \"NS\": [\"ns1.google.com\", \"ns2.google.com\"],\n    \"MX\": \"mail.google.com\"\n  },\n  \".*apple.com\": {\n    \"A\": \"192.168.0.1\",\n    \"AAAA\": [\"fd00::1\", \"fd00::2\"],\n    \"NS\": \"ns.apple.com\",\n    \"MX\": [\"mail1.apple.com\", \"mail2.apple.com\"]\n  },\n  \"gooogle.com\": {\n    \"no such domain\": true\n  },\n  \"evil.com\": {\n    \"success\": true,\n    \"A\": \"my ipv4 address\",\n    \"AAAA\": \"my ipv6 address\"\n  }\n}\n```\n\n### Sample script output (without parameters):\n![dns_server.py output](https://raw-packet.github.io/static/images/screenshots/dns_server_screenshot.png)\n\n### Sample script output (fake answer):\n![dns_server.py output_fake_answer](https://raw-packet.github.io/static/images/screenshots/dns_server_screenshot_fake_answer.png)\n\n---\n\n# ICMPv4\n\n## Script: [icmpv4_redirect](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/ICMPv4/icmpv4_redirect.py)\n\nThis script implement the ICMPv4 redirect attack. \n\n```\nroot@kali:~# icmpv4_redirect --help\nusage: icmpv4_redirect [-h] [-i INTERFACE] [-t TARGET_IP] [-m TARGET_MAC] [-g GATEWAY_IP]\n                       [-r REDIRECT_IP] [-q]\n\n           ICMPv4 redirect (icmpv4_redirect)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send ICMP redirect packets\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IPv4 address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -g GATEWAY_IP, --gateway_ip GATEWAY_IP\n                        Set gateway IPv4 address (default: <your_ipv4_gateway>)\n  -r REDIRECT_IP, --redirect_ip REDIRECT_IP\n                        Set IP addresses where to redirect (example: \"1.1.1.1,8.8.8.8\")\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![icmpv4_redirect output](https://raw-packet.github.io/static/images/screenshots/icmpv4_redirect_screenshot.png)\n\n---\n\n# IPv6\n\n## Script: [ipv6_scan.py](https://github.com/raw-packet/raw-packet/blob/testing/raw_packet/Scripts/IPv6/ipv6_scan.py)\n\nSearch for hosts that support IPv6 in local network using ICMPv6 protocol\n\n```\nroot@kali:~# ipv6_scan --help\nusage: ipv6_scan [-h] [-i INTERFACE] [-m TARGET_MAC] [-t TIMEOUT] [-r RETRY] [-s]\n\n               ICMPv6 scan (icmpv6_scan)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for ARP scanner\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -t TIMEOUT, --timeout TIMEOUT\n                        Set timeout (default=5)\n  -r RETRY, --retry RETRY\n                        Set number of retry (default=5)\n  -s, --router_search   Search router IPv6 link local address\n```\n\n### Sample script output:\n![ipv6_scan output](https://raw-packet.github.io/static/images/screenshots/ipv6_scan_screenshot.png)\n\n### Search IPv6 router:\n![ipv6_router_search output](https://raw-packet.github.io/static/images/screenshots/ipv6_scan_router_search_screenshot.png)\n\n---\n\n## Script: [ipv6_spoof](https://github.com/raw-packet/raw-packet/blob/testing/raw_packet/Scripts/IPv6/ipv6_spoof.py)\n\nThis script implements Router Advertisement and Neighbor Advertisement spoofing attack\n\n```\nroot@kali:~# ipv6_spoof --help\nusage: ipv6_spoof [-h] [-T TECHNIQUE] [-i INTERFACE] [-t TARGET_IP] [-m TARGET_MAC]\n                  [-g GATEWAY_IP] [-p IPV6_PREFIX] [-d DNS_IP] [-n DNS_DOMAIN_SEARCH] [-q]\n\n              IPv6 Spoofing (ipv6_spoof)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -T TECHNIQUE, --technique TECHNIQUE\n                        Set ICMPv6 MiTM technique (example: 1)\n                        1. ICMPv6 RA (Router Advertisement) Spoofing\n                        2. ICMPv6 NA (Neighbor Advertisement) Spoofing\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for send ARP packets\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IPv6 link local address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  -g GATEWAY_IP, --gateway_ip GATEWAY_IP\n                        Set gateway IPv6 link local address\n  -p IPV6_PREFIX, --ipv6_prefix IPV6_PREFIX\n                        Set IPv6 prefix, default=\"fde4:8dba:82e1:ffff::/64\"\n  -d DNS_IP, --dns_ip DNS_IP\n                        Set DNS server IPv6 link local address\n  -n DNS_DOMAIN_SEARCH, --dns_domain_search DNS_DOMAIN_SEARCH\n                        Set DNS domain search; default: \"local\"\n  -q, --quiet           Minimal output\n```\n\n## Router Advertisement spoofing\n\n### Sample script output:\n![ipv6_spoof_ra output](https://raw-packet.github.io/static/images/screenshots/ipv6_spoof_ra_screenshot.png)\n\n## Neighbor Advertisement spoofing\n\n### Sample script output:\n![ipv6_spoof_na output](https://raw-packet.github.io/static/images/screenshots/ipv6_spoof_na_screenshot.png)\n\n---\n\n# Network Conflict Creator (ncc)\n\n## Script: [ncc](https://github.com/raw-packet/raw-packet/blob/testing/raw_packet/Scripts/NCC/ncc.py)\n\nScript for creating network conflicts for varius testing.\n\n```\nroot@kali:~# ncc --help\nusage: ncc [-h] [-i INTERFACE] [-t TARGET_IP] [-m TARGET_MAC] [--replies] [--requests]\n           [--broadcast] [-p PACKETS] [-q] [-e]\n\n            Network Conflict Creator (ncc)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set interface name for listen and send packets\n  -t TARGET_IP, --target_ip TARGET_IP\n                        Set target IP address\n  -m TARGET_MAC, --target_mac TARGET_MAC\n                        Set target MAC address\n  --replies             Send only ARP replies\n  --requests            Send only ARP requests\n  --broadcast           Send broadcast ARP requests\n  -p PACKETS, --packets PACKETS\n                        Number of ARP packets (default: 10)\n  -q, --quiet           Minimal output\n  -e, --exit            Exit on success\n```\n\n### Sample script output:\n![ncc output](https://raw-packet.github.io/static/images/screenshots/ncc_screenshot.png)\n\n---\n\n# Network Security Check (nsc)\n\n## Script: [nsc](https://github.com/raw-packet/raw-packet/blob/master/raw_packet/Scripts/NSC/nsc.py)\n\n### Checking network security mechanisms\n1. Works on Windows, MacOS and Linux\n1. Check ARP Spoofing\n1. Check ICMPv4 Redirect \n1. Check Rogue DHCPv4\n1. Check ICMPv6 Redirect \n1. Check ICMPv6 Router Advertisement Spoofing\n1. Check ICMPv6 Neighbor Advertisement Spoofing\n1. Check Rogue DHCPv6\n1. Check STP spoofing\n\n```\nroot@kali:~# nsc --help\nusage: nsc [-h] [-i SEND_INTERFACE] [-l LISTEN_INTERFACE] [-n TEST_HOST_INTERFACE]\n           [-t TEST_HOST_IP] [-m TEST_HOST_MAC] [-o TEST_HOST_OS] [-u TEST_SSH_USER]\n           [-p TEST_SSH_PASS] [-k TEST_SSH_PKEY] [-G GATEWAY_IP] [-g GATEWAY_MAC]\n           [-r NUMBER_OF_PACKETS] [-L LISTEN_TIME] [-q]\n\n             Network Security Check (nsc)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i SEND_INTERFACE, --send_interface SEND_INTERFACE\n                        Set interface name for send packets\n  -l LISTEN_INTERFACE, --listen_interface LISTEN_INTERFACE\n                        Set interface name for listen packets\n  -n TEST_HOST_INTERFACE, --test_host_interface TEST_HOST_INTERFACE\n                        Set test host network interface for listen packets\n  -t TEST_HOST_IP, --test_host_ip TEST_HOST_IP\n                        Set test host IP address for ssh connection\n  -m TEST_HOST_MAC, --test_host_mac TEST_HOST_MAC\n                        Set test host MAC address for ssh connection\n  -o TEST_HOST_OS, --test_host_os TEST_HOST_OS\n                        Set test host OS (MacOS, Linux, Windows)\n  -u TEST_SSH_USER, --test_ssh_user TEST_SSH_USER\n                        Set test host user name for ssh connection\n  -p TEST_SSH_PASS, --test_ssh_pass TEST_SSH_PASS\n                        Set test host password for ssh connection\n  -k TEST_SSH_PKEY, --test_ssh_pkey TEST_SSH_PKEY\n                        Set test host private key for ssh connection\n  -G GATEWAY_IP, --gateway_ip GATEWAY_IP\n                        Set gateway IPv4 address\n  -g GATEWAY_MAC, --gateway_mac GATEWAY_MAC\n                        Set gateway MAC address\n  -r NUMBER_OF_PACKETS, --number_of_packets NUMBER_OF_PACKETS\n                        Set number of spoofing packets for each test (default: 10)\n  -L LISTEN_TIME, --listen_time LISTEN_TIME\n                        Set time to listen spoofing packets in seconds (default: 60)\n  -q, --quiet           Minimal output\n```\n\n### Sample script output:\n![nsc output](https://raw-packet.github.io/static/images/screenshots/nsc_kali_screenshot.png)\n\n### Sample script output (test host):\n![nsc output](https://raw-packet.github.io/static/images/screenshots/nsc_kali_test_host_screenshot.png)\n\n---\n\n# WiFi\n\n## Script: [wat](https://github.com/raw-packet/raw-packet/blob/testing/raw_packet/Scripts/WiFi/wat.py)\n\n### Cross-platform WiFi attack tool (wat)\n1. Works on MacOS and Linux\n1. Collects wireless AP information\n1. Sends association packets\n1. Sends deauthentication packets\n1. Switch between WiFi channels\n1. Saves WPA handshakes in formats: pcap, hccapx, 22000\n1. Supports PMKID (AP clientless attack)\n1. Saves WPA RSN PMKID in format for hashcat brute\n1. Supports vulnerability CVE-2019-15126 kr00k (decryption of CCMP packet with NULL 128 bits - temporary key)\n\n```\nroot@kali:~# wat --help\nusage: wat [-h] [-i INTERFACE] [-c CHANNEL] [-d]\n\n         Cross platform WiFi attack tool (wat)\n\nCtrl-E Show Wireless access point information\nCtrl-D Send IEEE 802.11 deauth packets\nCtrl-D Switch WiFi channel\nCtrl-A Send IEEE 802.11 association packet\nCtrl-R Start scanner (switch between WiFi channels)\nCtrl-H Show help information\nCtrl-C Exit\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INTERFACE, --interface INTERFACE\n                        Set wireless interface name for sniff packets\n  -c CHANNEL, --channel CHANNEL\n                        Set WiFi channel\n  -d, --debug           Maximum output\n```\n\n### Sample script output:\n![wat output](https://raw-packet.github.io/static/images/screenshots/wat_screenshot.png)\n\n### Video demo:\n[![wat demo video](https://raw-packet.github.io/static/images/gifs/attack_tool.gif)](https://youtu.be/IcZVmDHQvLE)\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://raw-packet.github.io/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "raw-packet",
    "package_url": "https://pypi.org/project/raw-packet/",
    "platform": "",
    "project_url": "https://pypi.org/project/raw-packet/",
    "project_urls": {
      "Homepage": "https://raw-packet.github.io/"
    },
    "release_url": "https://pypi.org/project/raw-packet/0.2.1/",
    "requires_dist": [
      "ipaddress",
      "netaddr",
      "scapy",
      "psutil",
      "prettytable",
      "distro",
      "xmltodict",
      "paramiko",
      "npyscreen",
      "pycryptodomex",
      "getmac",
      "colorama",
      "requests",
      "user-agents",
      "netifaces ; sys_platform==\"darwin\"",
      "netifaces ; sys_platform==\"linux\""
    ],
    "requires_python": ">=3.6",
    "summary": "Raw-packet Project",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7359290,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3b293f0fddbfac16cac26f9a27240e37d0a7e2f37654e019d4e9ec2f798b489",
          "md5": "b6b0ad7a27bdd5a6c8cc24ccb68173b4",
          "sha256": "7af35c3de0a20dab5e8845a04900079ed95833848abc9d90e1ba748a65ac73cf"
        },
        "downloads": -1,
        "filename": "raw_packet-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6b0ad7a27bdd5a6c8cc24ccb68173b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2255105,
        "upload_time": "2020-05-30T14:04:18",
        "upload_time_iso_8601": "2020-05-30T14:04:18.730061Z",
        "url": "https://files.pythonhosted.org/packages/b3/b2/93f0fddbfac16cac26f9a27240e37d0a7e2f37654e019d4e9ec2f798b489/raw_packet-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "474d1bd23d30a3544b9c7f7ecd453c49ef3beb29b5cb0172629a07c8291ed7f7",
          "md5": "d9ec0ff6d8f34891ac5e6af2a328caa4",
          "sha256": "54e716b97d1d1b3b0475fc28aa1c32db6f7c0e1157ec0d7a058c20dcf7d85022"
        },
        "downloads": -1,
        "filename": "raw_packet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9ec0ff6d8f34891ac5e6af2a328caa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2150706,
        "upload_time": "2020-05-30T14:04:22",
        "upload_time_iso_8601": "2020-05-30T14:04:22.320907Z",
        "url": "https://files.pythonhosted.org/packages/47/4d/1bd23d30a3544b9c7f7ecd453c49ef3beb29b5cb0172629a07c8291ed7f7/raw_packet-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3b293f0fddbfac16cac26f9a27240e37d0a7e2f37654e019d4e9ec2f798b489",
        "md5": "b6b0ad7a27bdd5a6c8cc24ccb68173b4",
        "sha256": "7af35c3de0a20dab5e8845a04900079ed95833848abc9d90e1ba748a65ac73cf"
      },
      "downloads": -1,
      "filename": "raw_packet-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b6b0ad7a27bdd5a6c8cc24ccb68173b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 2255105,
      "upload_time": "2020-05-30T14:04:18",
      "upload_time_iso_8601": "2020-05-30T14:04:18.730061Z",
      "url": "https://files.pythonhosted.org/packages/b3/b2/93f0fddbfac16cac26f9a27240e37d0a7e2f37654e019d4e9ec2f798b489/raw_packet-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "474d1bd23d30a3544b9c7f7ecd453c49ef3beb29b5cb0172629a07c8291ed7f7",
        "md5": "d9ec0ff6d8f34891ac5e6af2a328caa4",
        "sha256": "54e716b97d1d1b3b0475fc28aa1c32db6f7c0e1157ec0d7a058c20dcf7d85022"
      },
      "downloads": -1,
      "filename": "raw_packet-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d9ec0ff6d8f34891ac5e6af2a328caa4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2150706,
      "upload_time": "2020-05-30T14:04:22",
      "upload_time_iso_8601": "2020-05-30T14:04:22.320907Z",
      "url": "https://files.pythonhosted.org/packages/47/4d/1bd23d30a3544b9c7f7ecd453c49ef3beb29b5cb0172629a07c8291ed7f7/raw_packet-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}