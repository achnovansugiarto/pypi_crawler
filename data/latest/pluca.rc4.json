{
  "info": {
    "author": null,
    "author_email": "Flavio Veloso Soares <flaviovs@magnux.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "Plugable cache architecture for Python\n=======================================\n\n*pluca* is a plugable cache architecture for Python 3\napplications. The package provides an unified interface to several\ncache implementations, which allows an application to switch cache\nback-ends on an as-needed basis with minimal changes.\n\nFeatures\n--------\n- Unified cache interface - your application can just instantiate a\n  `Cache` object and pass it around — client code just access the\n  cache without having to know any of the details about caching\n  back-ends, expiration logic, etc.\n- Easy interface - writing a *pluca* cache for a new caching back-end\n  is very straightforward\n- It is fast - the library is developed with performance in mind\n- It works out-of-box - a file system cache is provided that can be\n  used out-of-box\n- No batteries needed - *pluca* has no external dependencies\n\nHow to use\n----------\n\nFirst import the cache module:\n\n    >>> import pluca.file  # Use a file system cache.\n\nNow create the cache object:\n\n    >>> cache = pluca.file.Cache()\n\nStore _3.1415_ in the cache using _pi_ as key:\n\n    >>> cache.put('pi', 3.1415)\n\nNow retrieve the value from the cache.\n\n    >>> pi = cache.get('pi')\n    >>> pi\n    3.1415\n    >>> type(pi)\n    <class 'float'>\n\nNon-existent or expired cache entries raise `KeyError`.\n\n    >>> cache.get('notthere')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'notthere'\n\nUse `remove()` to delete entries from the cache:\n\n    >>> cache.put('foo', 'bar')\n    >>> cache.get('foo')\n    'bar'\n    >>> cache.remove('foo')\n    >>> cache.get('foo')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'foo'\n\nTo test if a entry exists, use `has()`:\n\n    >>> cache.put('this', 'is in the cache')\n    >>> cache.has('this')\n    True\n    >>> cache.has('that')\n    False\n\nYou can provide a default value for when the key does not exist or has\nexpired. The method will not raise _KeyError_ in this case, it will\nreturn the default value instead.\n\n    >>> cache.get('notthere', 12345)\n    12345\n\nBy default cache entries are set to “never” expire — cache adapters\ncan expire entries though, for example to use less resource. Here’s an\nexample of how to store a cache entry with an explicit expiration\ntime:\n\n    >>> cache.put('see-you', 'in two secs', 1)  # Expire in 1 second.\n    >>> import time; time.sleep(1)  # Wait for it to expire.\n    >>> cache.get('see-you')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'see-you'\n\nCache keys can be any object (but see _Caveats_ below):\n\n    >>> key = (__name__, True, 'this', 'key', 'has', 'more', 'than', 1, 'value')\n    >>> cache.put(key, 'data')\n    >>> cache.get(key)\n    'data'\n\nCached values can be any pickable data:\n\n    >>> import datetime\n    >>> alongtimeago = datetime.date(2020, 1, 1)\n    >>> cache.put('alongtimeago', alongtimeago)\n    >>> today = cache.get('alongtimeago')\n    >>> today\n    datetime.date(2020, 1, 1)\n    >>> type(today)\n    <class 'datetime.date'>\n\nFlushing the cache remove all entries:\n\n    >>> cache.put('bye', 'tchau')\n    >>> cache.flush()\n    >>> cache.get('bye')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'bye'\n\n## Abstracting cache back-ends\n\nHere’s how to abstract cache back-ends. First, let’s define a function\nthat calculates a factorial. The function also receives a cache object\nto store results, so that the calculation results are cached.\n\n    >>> from math import factorial\n    >>> def cached_factorial(cache, n):\n    ...     try:\n    ...         res = cache.get(('factorial', n))\n    ...     except KeyError:\n    ...         print(f'CACHE MISS - calculating {n}!')\n    ...         res = factorial(n)\n    ...         cache.put(('factorial', n), res)\n    ...     return res\n\nNow let’s try this with the file cache created above. First call\nshould be a cache miss:\n\n    >>> cached_factorial(cache, 10)\n    CACHE MISS - calculating 10!\n    3628800\n\nSubsequent calls should get the results from the cache:\n\n    >>> cached_factorial(cache, 10)\n    3628800\n\nNow let's switch to the “null” back-end (the “null” back-end does not\nstore the data anywhere — see `help(pluca.null.Cache)` for more info):\n\n    >>> import pluca.null\n    >>> null_cache = pluca.null.Cache()\n    >>>\n    >>> cached_factorial(null_cache, 10)\n    CACHE MISS - calculating 10!\n    3628800\n\n\n## Using caches as decorators\n\nCaches can also be used as decorator to cache function return values:\n\n    >>> @cache\n    ... def expensive_calculation(alpha, beta):\n    ...     res = 0\n    ...     print('Doing expensive calculation')\n    ...     for i in range(0, alpha):\n    ...         for j in range(0, beta):\n    ...             res = i * j\n    ...     return res\n    >>>\n    >>> cache.flush()  # Let's start with an empty cache.\n    >>>\n    >>> expensive_calculation(10, 20)\n    Doing expensive calculation\n    171\n\nCalling the function again with the same parameters returns the cached\nresult:\n\n    >>> expensive_calculation(10, 20)\n    171\n\nEach function can have their own expiration:\n\n    >>> @cache(max_age=1)  # Expire after one second.\n    ... def quick_calculation(alpha, beta):\n    ...     print(f'Calculating {alpha} + {beta}')\n    ...     return alpha + beta\n\nFirst call executes the function. Second call gets the cached value.\n\n    >>> quick_calculation(1, 2)\n    Calculating 1 + 2\n    3\n    >>> quick_calculation(1, 2)\n    3\n\nAfter the expiry time the calculation is done again:\n\n    >>> import time; time.sleep(1)\n    >>> quick_calculation(1, 2)\n    Calculating 1 + 2\n    3\n\n\n## Miscellaneous cache methods\n\nUse `get_put()` to conveniently get a value from the cache, or call a\nfunction to generate it, if it is not cached already:\n\n    >>> cache.flush()\n    >>>\n    >>> def calculate_foo():\n    ...    print('Calculating foo')\n    ...    return 'bar'\n    >>>\n    >>> cache.get_put('foo', calculate_foo)\n    Calculating foo\n    'bar'\n\n    >>> cache.get_put('foo', calculate_foo)\n    'bar'\n\nYou can add get many entries to the cache at once by calling\n`put_many()`:\n\n    >>> cache.put_many({'foo': 'bar', 'zee': 'too'})\n    >>> cache.get('zee')\n    'too'\n\nYou can also pass an iterable of _(key, value)_ tuples. This is is\nuseful for caching with non-hashable keys:\n\n    >>> cache.put_many([(['a', 'b', 'c'], 123), ('pi', 3.1415)])\n    >>> cache.get(['a', 'b', 'c'])\n    123\n\nUse `get_many()` to get many results at once. This method returns a\nlist of _(key, value)_ tuples:\n\n    >>> cache.get_many(['zee', 'pi'])\n    [('zee', 'too'), ('pi', 3.1415)]\n\nNotice that `get_many()` does **not** raise _KeyError_ when a key is\nnot found or has expired. Instead, the key will not be present in the\nreturned dict:\n\n    >>> cache.get_many(['pi', 'not-there'])\n    [('pi', 3.1415)]\n\nHowever, you can pass a default value to `get_many()`. This value will\nbe returned for any non-existing keys:\n\n    >>> cache.get_many(['pi', 'not-there', 'also-not-there'], default='yes')\n    [('pi', 3.1415), ('not-there', 'yes'), ('also-not-there', 'yes')]\n\n\n## Garbage collection.\n\nGarbage collection tells the cache to remove expired entries to save\nresources. This is done by the `gc()` method:\n\n    >>> cache.gc()\n\nNotice that **pluca never calls `gc()` automatically** — it is up to\nyour application to call it eventually to do garbage collection.\n\n\nGlobal Cache API\n----------------\n\n_pluca_ comes with a separate cache API that allows libraries and\napplication to benefit from caching in a very flexible way. In one\nhand, it allows libraries that would benefit from caching to use\n_pluca_ even if the calling applications doesn’t support it. On the\nother hand, an application that does support _pluca_ can customize\ncaches for specific libraries without any extra API.\n\nIn the sections below you will see how the Global Cache API works both\nfrom a library and a application perspective, but before it is\nimportant to understand how this API organizes cache objects.\n\n\n## The cache object tree\n\nCache objects are organized in a tree structure. Nodes are positioned\nin this tree by using “.” (dot) separated names. The “” (the empty\nstring) node is special, and points to the root node.\n\nWhen looking up a cache object by name, the API will first look for\nthe exact node name. If none is found, then it will “move up” the tree\nand check for common parents. It will do this until it finds a\nmatching cache name. If none is found, the root cache is returned.\n\nThe _pluca_ Global Cache API hierarchy is pretty much identical to the\nway [Python’s logging\nfacility](https://docs.python.org/3/library/logging.html) organizes\nloggers.\n\nAs a quick example, let’s say you configure three cache objects:\n\n- The root cache is a file cache\n- “pkg“ is a memory cache\n- “pkg.mod“ is a null cache\n\nThen a look up of “pkg.mod” would return the null cache. If you look\nup “pkg.foobar”, then the memory cache would be returned, because\nalthough there’s no cache at “pkg.foobar”, they share the common\nprefix “pkg“. Lastly, if you look up “another.module” then you’ll get\nthe root cache, because neither the name nor any of its ancestors\nexist on the cache tree.\n\n\n## Using the Global Cache API in libraries\n\nLet’s say your library has a module file called `mymodule.py`, and this\nmodule has some functions that would greatly benefit from caching.\n\nHard-coding _pluca_ cache instances inside your library may not be a\ngood idea. You could design some API or configuration system to allow\nyour library to use application-provided caches, but this would make\nthings more complex, both for you and application developers.\n\nThe Global Cache API makes this very simple. In your library, all you\nneed to do is this:\n\n    >>> import pluca.cache\n    >>>\n    >>> cache = pluca.cache.get_cache(__name__)\n\nThat’s it. `cache` is a ready-to-use _pluca_ cache object:\n\n    >>> result = cache.get('my-very-expensive-calculation', None)\n\nNotice that in this example we ask for a cache named `__name__`, which\nis the absolute name of your module or package. By matching modules\nand packages hierarchically, the API allows for fine-grained cache\nconfiguration without any coupling between applications and libraries.\n\n\n## Using the Global Cache API in an application\n\nThe quickest way to configure the API for the most common use case of\na single application using a single cache, you can just call\n`pluca.cache.basic_config()`:\n\n    >>> pluca.cache.basic_config()\n\nThis sets up a file cache as the root cache. If desired, you can use\nanother cache back-end:\n\n    >>> # Configure a memory cache as the cache root.\n    >>> pluca.cache.basic_config('memory')\n\nYou can also customize the cache object:\n\n    >>> pluca.cache.basic_config('file', cache_dir='/tmp')\n\n**Note**: when you call `basic_config()` all existing caches are\nremoved before the new one is set up.\n\nTo configure additional caches, use `pluca.cache.add()`:\n\n    >>> pluca.cache.add('mod', 'memory', max_entries=100)\n    >>> pluca.cache.add('pkg.foo', 'null')\n\nThis adds two caches — one at “mod“ and another at “pkg.foo“. Now, in\nthe “pkg.foo“ module, the call `get_cache(__name__)` will return a\n“null” cache, whereas the same call on the “mod“ module will return a\nmemory cache.\n\n    >>> # In mod.py\n    >>> cache = pluca.cache.get_cache(__name__)\n    >>> cache  # doctest: +SKIP\n    MemoryCache(max_entries=None)\n\nCalling `get_cache()` returns the root cache:\n\n    >>> cache = pluca.cache.get_cache()\n    >>> cache  # doctest: +ELLIPSIS\n    FileCache(name=..., cache_dir=...)\n\n\nA call from another random module would return the root (file) cache:\n\n    >>> # In another.py\n    >>> cache = pluca.cache.get_cache(__name__)\n    >>> cache  # doctest: +ELLIPSIS\n    FileCache(name=..., cache_dir=...)\n\n**NOTE**: a root cache is always required. If don’t set up the root\ncache, then `pluca.cache.basic_config()` will be called to set up one\nfor you.\n\nThe function `add()` has the following signature:\n\n```python\nadd(node: str, cls: str, reuse: bool = True, **kwargs: Any)\n```\n\nHere, `node` is the cache node name. `cls` indicates the cache class\nyou want to instantiate for that node.\n\nThe `cls` parameter must be a fully-qualified class name (for example,\n`mycustomcache.Cache`). If `cls` is a string with no “.” (dot) in it,\ni is assumed to be a cache class from the the standard _pluca_ package\n— for example, `memory` is the same as `pluca.memory.Cache`.\n\nBy default, caches will reuse previously created instances with the\nsame `cls` name and arguments. For example, the two `get_cache()`\ncalls below return the same cache object:\n\n    >>> pluca.cache.add('c1', 'file')\n    >>> pluca.cache.add('c2', 'file')\n    >>> pluca.cache.get_cache('c1') is pluca.cache.get_cache('c2')\n    True\n\nTo prevent this from happening, pass _False_ on the `reuse` parameter:\n\n    >>> pluca.cache.add('c3', 'file', reuse=False)\n    >>> pluca.cache.get_cache('c2') is pluca.cache.get_cache('c3')\n    False\n\nThe remaining arguments to the `add()` function are passed unchanged\nto the cache class constructor.\n\n    >>> pluca.cache.add('c4', 'file', name='c4', cache_dir='/tmp')\n    >>> pluca.cache.get_cache('c4')\n    FileCache(name='c4', cache_dir=PosixPath('/tmp'))\n\nYou can also configure the API using a dict-like object using\n`pluca.cache.dict_config()`:\n\n    >>> pluca.cache.dict_config({\n    ...     'class': 'memory',  # The root cache.\n    ...     'max_entries': 10,\n    ...\n    ...     'caches': {  # Configure extra caches.\n    ...         'mod': {\n    ...             'class': 'null',\n    ...         },\n    ...         'pkg.mod': {\n    ...             'class': 'file',\n    ...             'name': 'pkg_mod',\n    ...             'cache_dir': '/tmp',\n    ...         },\n    ...     },\n    ... })\n    >>> pluca.cache.get_cache('mod')\n    NullCache()\n\nA facility to set up the API using a configuration file is also\nprovided. Heres an example:\n\n    >>> from tempfile import NamedTemporaryFile\n    >>>\n    >>> temp = NamedTemporaryFile(mode='w+', suffix='.ini')\n    >>> n = temp.write('''\n    ...\n    ...     [__root__]\n    ...     class = memory\n    ...     max_entries = 10\n    ...\n    ...     [mod]\n    ...     class = null\n    ...\n    ...     [pkg.mod]\n    ...     class = file\n    ...     name = pkg_mod\n    ...     cache_dir = /tmp\n    ...\n    ... ''')\n    >>> temp.flush()\n    >>>\n    >>> pluca.cache.file_config(temp.name)\n    >>>\n    >>> pluca.cache.get_cache('mod')\n    NullCache()\n\n\n### Removing caches\n\nTo remove cache entries, call `pluca.cache.remove()`:\n\n    >>> pluca.cache.remove('mod')\n\nNotice that removing a cache does not remove its children:\n\n    >>> pluca.cache.add('a.b', 'file')\n    >>> pluca.cache.add('a.b.c', 'file')\n    >>> pluca.cache.remove('a.b')\n    >>> pluca.cache.get_cache('a.b.c')  # doctest: +ELLIPSIS\n    FileCache(name=...)\n\nTo remove all cache entries and effectively reset the Global Cache\nAPI, call `pluca.cache.remove_all()`:\n\n    >>> pluca.cache.remove_all()\n\n\n### Flushing, garbage collection, shutdown\n\nYou can do garbage colletion and flush all Global Cache API caches at\nonce:\n\n    >> pluca.cache.flush()\n    >> pluca.cache.gc()\n\nBoth `remove()` and `remove_all()` functions shutdown removed caches\nautomatically. To prevent this, pass _False_ in `shutdown`:\n\n    >>> pluca.cache.basic_config()\n    >>>\n    >>> pluca.cache.remove(shutdown=False)\n    >>> pluca.cache.remove_all(shutdown=False)\n\n\nCaveats\n-------\n\n* Cache keys are internally converted to strings using Python’s\n  `repr()` function. As long as your keys objects have stable\n  representations, this will cause no problems. However, for types\n  with unstable representation, for example those that have no\n  inherent ordering (e.g., _frozenset_), this can be problematic\n  because there’s no guarantee that `repr(key)` will return the same\n  string value every time. This applies even to objects deep inside\n  your key. For example, this is a bad composite key:\n\n        >>> key = ('foo', ('another', set((1, 2, 3))))  # set is unstable\n\n* By default _pluca_ uses\n  [pickle](https://docs.python.org/3/library/pickle.html) to serialize\n  and unserialize data. A quoted from the Python documentation:\n\n  > It is possible to construct malicious pickle data which will\n  > execute arbitrary code during unpickling. Never unpickle data that\n  > could have come from an untrusted source, or that could have been\n  > tampered with.\n\n  So be careful where you store your cached data.\n\n\nIncluded back-ends\n------------------\n\nThese are the cache back-ends that come with the _pluca_ package:\n\n- *dbm* - store cache entries usim DBM “databases”.\n\n- *file* - store cache entries on the file system.\n\n- *memory* - a memory-only cache that exists for the duration of the\n  cache instance.\n\n- *null* - the null cache - `get()` always raises _KeyError_.\n\n- *sql* - store cache entries in SQL databases.\n\n- *sqlite3* - store cache entries in a SQLite3 database. Based on the\n  _sql_ back-end, but with SQLite3 specific functionalities.\n\nTo obtain help about those cache back-ends, run\n`help(pluca.MODULE.Cache)`, where _MODULE_ is one of the module names\nabove.\n\n\nBenchmarking\n------------\n\nThe _pluca.benchmark_ module can be used to benchmark the back-ends:\n\n```console\n$ python -m pluca.benchmark\n```\n\nPass `-h` to see the benchmark options.\n\n\nIssues? Bugs? Suggestions?\n--------------------------\nVisit: https://github.com/flaviovs/pluca\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "pluca",
    "package_url": "https://pypi.org/project/pluca/",
    "platform": null,
    "project_url": "https://pypi.org/project/pluca/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pluca/0.6.2/",
    "requires_dist": [
      "flake8-bugbear ; extra == \"dev\"",
      "flake8-builtins ; extra == \"dev\"",
      "flake8-docstrings ; extra == \"dev\"",
      "flake8-tidy-imports ; extra == \"dev\"",
      "flake8-walrus ; extra == \"dev\"",
      "flake8 ; extra == \"dev\"",
      "flit ; extra == \"dev\"",
      "mypy ; extra == \"dev\"",
      "pylint ; extra == \"dev\"",
      "taskipy ; extra == \"dev\""
    ],
    "requires_python": ">=3.7",
    "summary": "Pluggable Cache Architecture for Python.",
    "version": "0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17217892,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3a2be8f9188d80cf496fa66f13145a6ef9476a331cf3276d154e3dfb2ece6da",
          "md5": "bb416992f45959d56d26be008e069c37",
          "sha256": "13218e2d7e39ab252e1f741f01aeeb954e5ed31278b58c964ecf14daece39cdf"
        },
        "downloads": -1,
        "filename": "pluca-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb416992f45959d56d26be008e069c37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7440,
        "upload_time": "2021-12-21T01:25:39",
        "upload_time_iso_8601": "2021-12-21T01:25:39.640895Z",
        "url": "https://files.pythonhosted.org/packages/f3/a2/be8f9188d80cf496fa66f13145a6ef9476a331cf3276d154e3dfb2ece6da/pluca-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c345e5aa7549c4a4879c2dd27a5a52366a37db30a5a4b225f8d4badc675bd09a",
          "md5": "46a996f24416bbca568921a1902cd29f",
          "sha256": "0e412179b4cdf25ff54bd7f7e89ebfdb27b712b0acda0a16b9e09f1c63882fb1"
        },
        "downloads": -1,
        "filename": "pluca-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46a996f24416bbca568921a1902cd29f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6996,
        "upload_time": "2021-12-21T01:25:41",
        "upload_time_iso_8601": "2021-12-21T01:25:41.973823Z",
        "url": "https://files.pythonhosted.org/packages/c3/45/e5aa7549c4a4879c2dd27a5a52366a37db30a5a4b225f8d4badc675bd09a/pluca-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aab30e12f0f7d12e480444d2bd8e4ae6682ebeff509ed1088f543749d97dd9b8",
          "md5": "02463ece8b57321d5d28abb35076f8ca",
          "sha256": "f7a9ae3cbfd1479bdf58658790f65efd2956fd870325ac9544c86942824e4f6a"
        },
        "downloads": -1,
        "filename": "pluca-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02463ece8b57321d5d28abb35076f8ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8330,
        "upload_time": "2021-12-22T02:24:17",
        "upload_time_iso_8601": "2021-12-22T02:24:17.721160Z",
        "url": "https://files.pythonhosted.org/packages/aa/b3/0e12f0f7d12e480444d2bd8e4ae6682ebeff509ed1088f543749d97dd9b8/pluca-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df636c00862a751402fd01660b543889b4664430eebb7bf7768c20baeb01925a",
          "md5": "dba1f5e6e0ae6885cece73d06fe0cf3b",
          "sha256": "36cc38735291f98906c14ba6c1d8ea147faf1ea2143fd695c0fe046eb4e6aee7"
        },
        "downloads": -1,
        "filename": "pluca-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dba1f5e6e0ae6885cece73d06fe0cf3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7708,
        "upload_time": "2021-12-22T02:24:19",
        "upload_time_iso_8601": "2021-12-22T02:24:19.478223Z",
        "url": "https://files.pythonhosted.org/packages/df/63/6c00862a751402fd01660b543889b4664430eebb7bf7768c20baeb01925a/pluca-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a1a06fb8ebdfd29e2890def9899b70967efe17ea5aa0b281faf150a18bdb6d62",
          "md5": "658da9b131320e7c2b33251e2c561eda",
          "sha256": "7d637a956fbeac64562b2b8f2e2569feb1c2ecd27d8811b1a88480b78c247439"
        },
        "downloads": -1,
        "filename": "pluca-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "658da9b131320e7c2b33251e2c561eda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17986,
        "upload_time": "2023-03-09T01:57:30",
        "upload_time_iso_8601": "2023-03-09T01:57:30.687113Z",
        "url": "https://files.pythonhosted.org/packages/a1/a0/6fb8ebdfd29e2890def9899b70967efe17ea5aa0b281faf150a18bdb6d62/pluca-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4610e45f05386158a2bbc090b6987a0e33fd4df2039090981da3bb822ed5de62",
          "md5": "6158d66b89945394421052385953370d",
          "sha256": "1abf8da3147729f1addc72798657af90dbfa596d4f27134e8e9c6aef1fbd26b1"
        },
        "downloads": -1,
        "filename": "pluca-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6158d66b89945394421052385953370d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26243,
        "upload_time": "2023-03-09T01:57:32",
        "upload_time_iso_8601": "2023-03-09T01:57:32.241204Z",
        "url": "https://files.pythonhosted.org/packages/46/10/e45f05386158a2bbc090b6987a0e33fd4df2039090981da3bb822ed5de62/pluca-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f2dd19ecc906186b4e4690b94823a791391e8c18cbd2b615df95962cbdd69fc8",
          "md5": "f124359e0ad8b0cfd8ea6321ad58edb7",
          "sha256": "8cc3f381dfa6619e648ab5ac52322df7352bb750a782e101a33ea6d4a62bb938"
        },
        "downloads": -1,
        "filename": "pluca-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f124359e0ad8b0cfd8ea6321ad58edb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24070,
        "upload_time": "2023-03-09T02:00:03",
        "upload_time_iso_8601": "2023-03-09T02:00:03.727831Z",
        "url": "https://files.pythonhosted.org/packages/f2/dd/19ecc906186b4e4690b94823a791391e8c18cbd2b615df95962cbdd69fc8/pluca-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "5d6973a54c206632e63f2a81e4fe127e7ebc69c4a121ae42e013520c0dfe1010",
          "md5": "e5b5e4df7b1414c6fafb975315486ee4",
          "sha256": "d3b9d4e6e328b454ab1e9dce52091fb392740401fa8178e1c5a9dd41944f27fa"
        },
        "downloads": -1,
        "filename": "pluca-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e5b5e4df7b1414c6fafb975315486ee4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32163,
        "upload_time": "2023-03-09T02:00:05",
        "upload_time_iso_8601": "2023-03-09T02:00:05.621574Z",
        "url": "https://files.pythonhosted.org/packages/5d/69/73a54c206632e63f2a81e4fe127e7ebc69c4a121ae42e013520c0dfe1010/pluca-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f2dd19ecc906186b4e4690b94823a791391e8c18cbd2b615df95962cbdd69fc8",
        "md5": "f124359e0ad8b0cfd8ea6321ad58edb7",
        "sha256": "8cc3f381dfa6619e648ab5ac52322df7352bb750a782e101a33ea6d4a62bb938"
      },
      "downloads": -1,
      "filename": "pluca-0.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f124359e0ad8b0cfd8ea6321ad58edb7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24070,
      "upload_time": "2023-03-09T02:00:03",
      "upload_time_iso_8601": "2023-03-09T02:00:03.727831Z",
      "url": "https://files.pythonhosted.org/packages/f2/dd/19ecc906186b4e4690b94823a791391e8c18cbd2b615df95962cbdd69fc8/pluca-0.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "5d6973a54c206632e63f2a81e4fe127e7ebc69c4a121ae42e013520c0dfe1010",
        "md5": "e5b5e4df7b1414c6fafb975315486ee4",
        "sha256": "d3b9d4e6e328b454ab1e9dce52091fb392740401fa8178e1c5a9dd41944f27fa"
      },
      "downloads": -1,
      "filename": "pluca-0.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e5b5e4df7b1414c6fafb975315486ee4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 32163,
      "upload_time": "2023-03-09T02:00:05",
      "upload_time_iso_8601": "2023-03-09T02:00:05.621574Z",
      "url": "https://files.pythonhosted.org/packages/5d/69/73a54c206632e63f2a81e4fe127e7ebc69c4a121ae42e013520c0dfe1010/pluca-0.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}