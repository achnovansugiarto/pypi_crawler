{
  "info": {
    "author": "Thomas Pointhuber",
    "author_email": "thomas.pointhuber@gmx.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"
    ],
    "description": "This repository contains scripts to generate custom KiCAD footprints using python, and a framework which allows us to\ncreate custom KiCAD footprint. A big bunch of footprints of the KiCad library was developed using this framework.\n\n# KicadModTree\n\n**Licence:** GNU GPLv3+\n\n**Maintainer:** Thomas Pointhuber\n\n[![Build Status](https://travis-ci.org/pointhi/kicad-footprint-generator.svg?branch=master)](https://travis-ci.org/pointhi/kicad-footprint-generator)\n[![Code Climate](https://codeclimate.com/github/pointhi/kicad-footprint-generator/badges/gpa.svg)](https://codeclimate.com/github/pointhi/kicad-footprint-generator)\n[![Documentation Status](https://readthedocs.org/projects/kicad-footprint-generator/badge/?version=latest)](http://kicad-footprint-generator.readthedocs.io/en/latest/?badge=latest)\n\n**Supports:** Python 2.7 and 3.3+\n\n## About\n\nI started drawing a bunch of similar footprints for KiCAD, like connectors which are mainly one base shape, and different\namount of pins. To be able to update/improve those footprints quickly I decided to write my own footprint generator Framework,\nto allow simple creation of easy as well complex shapes.\n\nThis is my second approach (the first one can be found in the git history). This solution should be able to be easy to\nuse, to read and also be easy to expand with custom nodes.\n\n\n## Overview\n\nThis framework is mainly based on the idea of scripted CAD systems (for example OpenSCAD). This means, everything is a\nnode, and can be structured like a tree. In other words, you can group parts of the footprint, and translate them in any\nway you want. Also cloning & co. is no problem anymore because of this concept.\n\nTo be able to create custom Nodes, I separated the system in two parts. Base nodes, which represents simple structures\nand also be used by KiCAD itself, and specialized nodes which alter the behaviour of base nodes (for example positioning),\nor represent a specialized usage of base nodes (for example RectLine).\n\nWhen you serialize your footprint, the serialize command only has to handle base nodes, because all other nodes are based\nupon the base nodes. This allows us to write specialized nodes without worrying about the FileHandlers or other core systems.\nYou simply create your special node, and the framework knows how to handle it seamlessly.\n\nPlease look into the **[Documentation](http://kicad-footprint-generator.readthedocs.io/en/latest/)** for further details\n\n```\nKicadModTree        - The KicadModTree framework which is used for footprint generation\ndocs                - Files required to generate a sphinx documentation\nscripts             - scripts which are generating footprints based on this library\n```\n\n## Development\n\n### Install development Dependencies\n\n```sh\nmanage.sh update_dev_packages\n```\n\n### run tests\n\n```sh\nmanage.sh tests\n```\n\n## Example Script\n\n```python\nfrom KicadModTree import *\n\nfootprint_name = \"example_footprint\"\n\n# init kicad footprint\nkicad_mod = Footprint(footprint_name)\nkicad_mod.setDescription(\"A example footprint\")\nkicad_mod.setTags(\"example\")\n\n# set general values\nkicad_mod.append(Text(type='reference', text='REF**', at=[0, -3], layer='F.SilkS'))\nkicad_mod.append(Text(type='value', text=footprint_name, at=[1.5, 3], layer='F.Fab'))\n\n# create silscreen\nkicad_mod.append(RectLine(start=[-2, -2], end=[5, 2], layer='F.SilkS'))\n\n# create courtyard\nkicad_mod.append(RectLine(start=[-2.25, -2.25], end=[5.25, 2.25], layer='F.CrtYd'))\n\n# create pads\nkicad_mod.append(Pad(number=1, type=Pad.TYPE_THT, shape=Pad.SHAPE_RECT,\n                     at=[0, 0], size=[2, 2], drill=1.2, layers=Pad.LAYERS_THT))\nkicad_mod.append(Pad(number=2, type=Pad.TYPE_THT, shape=Pad.SHAPE_CIRCLE,\n                     at=[3, 0], size=[2, 2], drill=1.2, layers=Pad.LAYERS_THT))\n\n# add model\nkicad_mod.append(Model(filename=\"example.3dshapes/example_footprint.wrl\",\n                       at=[0, 0, 0], scale=[1, 1, 1], rotate=[0, 0, 0]))\n\n# output kicad model\nfile_handler = KicadFileHandler(kicad_mod)\nfile_handler.writeFile('example_footprint.kicad_mod')\n```\n## Usage Steps\n\n1. Navigate into the `scripts` directory, and look for the type of footprint you would like to generate. For example, if you wish to generate an SMD inductor footprint, `cd` into `scripts/Inductor_SMD`.\n2. Open the \\*.yaml (or \\*.yml) file in a text editor. Study a few of the existing footprint definitions to get an idea of how your new footprint entry should be structured.\n3. Add your new footprint by inserting your own new section in the file. An easy way to do this is by simply copying an existing footprint definition, and modifying it to suit your part. Note:  You may have to add or remove additional parameters that are not listed.\n4. Save your edits and close the text editor.\n5. Run the python script, passing the \\*.yaml or (\\*.yml) file as a parameter, e.g. `python3 Inductor_SMD.py Inductor_SMD.yml`. This will generate the \\*.kicad_mod files for each footprint defined in the \\*.yaml (or \\*.yml).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pointhi/kicad-footprint-generator",
    "keywords": "",
    "license": "GPL3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "KicadModTree",
    "package_url": "https://pypi.org/project/KicadModTree/",
    "platform": "",
    "project_url": "https://pypi.org/project/KicadModTree/",
    "project_urls": {
      "Homepage": "https://github.com/pointhi/kicad-footprint-generator"
    },
    "release_url": "https://pypi.org/project/KicadModTree/1.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "creating kicad footprints using python scripts",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8348996,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "213d7a2c7d28d3af0f7c1020313a71646afa0ecaf51077143e9fbec7c804ecda",
          "md5": "f39053c1490ded524a189413a649f324",
          "sha256": "cb6ac2eee8216bf21c250eb9147ee6b9248725a2f57d51b43a6695ca8d153bd1"
        },
        "downloads": -1,
        "filename": "KicadModTree-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f39053c1490ded524a189413a649f324",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 59944,
        "upload_time": "2018-08-02T17:38:23",
        "upload_time_iso_8601": "2018-08-02T17:38:23.272185Z",
        "url": "https://files.pythonhosted.org/packages/21/3d/7a2c7d28d3af0f7c1020313a71646afa0ecaf51077143e9fbec7c804ecda/KicadModTree-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32bf03d74cafe091fa62cb7f96134b4ea9b32c3a328727e492fc362e263f2875",
          "md5": "b4bec9366d65ec81c68669d064cb1e5b",
          "sha256": "fe83ed3aacfa029f6b1500635de6a85bd05d23e1a2077dc42f6cbec59274e72b"
        },
        "downloads": -1,
        "filename": "KicadModTree-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4bec9366d65ec81c68669d064cb1e5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35427,
        "upload_time": "2018-08-02T17:38:25",
        "upload_time_iso_8601": "2018-08-02T17:38:25.031584Z",
        "url": "https://files.pythonhosted.org/packages/32/bf/03d74cafe091fa62cb7f96134b4ea9b32c3a328727e492fc362e263f2875/KicadModTree-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94dc72067dcb796f1e62ad1621f0449891d5ff6558ee717dd50424821520a824",
          "md5": "226f3984b35a11deba8bcca65332d62d",
          "sha256": "c600db929478ec7eaa15045f7feb4eba9e654d130c9d2215fd915d4c9519ff6c"
        },
        "downloads": -1,
        "filename": "KicadModTree-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "226f3984b35a11deba8bcca65332d62d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44902,
        "upload_time": "2020-10-06T08:06:57",
        "upload_time_iso_8601": "2020-10-06T08:06:57.150784Z",
        "url": "https://files.pythonhosted.org/packages/94/dc/72067dcb796f1e62ad1621f0449891d5ff6558ee717dd50424821520a824/KicadModTree-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ee0876f0dc49c56411a85224eca81dcec6c879f81b13a2c7c7b427157cb505d",
          "md5": "5cfad0c2934d5a7133446974bc673933",
          "sha256": "d193b2fe350f1710b7b09b4bfa56d2c980b21810fa12a0a1cab66f683f78ddac"
        },
        "downloads": -1,
        "filename": "KicadModTree-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cfad0c2934d5a7133446974bc673933",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44924,
        "upload_time": "2020-10-06T08:16:05",
        "upload_time_iso_8601": "2020-10-06T08:16:05.601316Z",
        "url": "https://files.pythonhosted.org/packages/9e/e0/876f0dc49c56411a85224eca81dcec6c879f81b13a2c7c7b427157cb505d/KicadModTree-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0b0045d0ec00308130201091dcfa4a27af732b76fd92bf3408cbbc58e223d1d",
          "md5": "558b40765242efdb2a7ef035bc407964",
          "sha256": "5dd9d8f45b5e2646b0d5412111b5ed12308fb9b8ad4b32640a3ab6545fb0eca2"
        },
        "downloads": -1,
        "filename": "KicadModTree-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "558b40765242efdb2a7ef035bc407964",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44931,
        "upload_time": "2020-10-06T08:20:14",
        "upload_time_iso_8601": "2020-10-06T08:20:14.771420Z",
        "url": "https://files.pythonhosted.org/packages/c0/b0/045d0ec00308130201091dcfa4a27af732b76fd92bf3408cbbc58e223d1d/KicadModTree-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0b0045d0ec00308130201091dcfa4a27af732b76fd92bf3408cbbc58e223d1d",
        "md5": "558b40765242efdb2a7ef035bc407964",
        "sha256": "5dd9d8f45b5e2646b0d5412111b5ed12308fb9b8ad4b32640a3ab6545fb0eca2"
      },
      "downloads": -1,
      "filename": "KicadModTree-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "558b40765242efdb2a7ef035bc407964",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 44931,
      "upload_time": "2020-10-06T08:20:14",
      "upload_time_iso_8601": "2020-10-06T08:20:14.771420Z",
      "url": "https://files.pythonhosted.org/packages/c0/b0/045d0ec00308130201091dcfa4a27af732b76fd92bf3408cbbc58e223d1d/KicadModTree-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}