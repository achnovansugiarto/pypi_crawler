{
  "info": {
    "author": "Alkihis",
    "author_email": "beranger.louis.bio@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pyquestionit\n\nSimple [QuestionIt.space](https://questionit.space) API client for Python 3.6+.\n\nSee [docs](https://docs.questionit.space) for more details.\n\n> This documencation is a WIP. It should be completed later.\n\n## Installing the package\n\nInstall the package using pip.\n\n```bash\npip install pyquestionit\n```\n\nYou're ready to import it in your project.\n\n```py\nimport pyquestionit\n```\n\n## Getting started\n\n### Make unlogged requests\n\nYou can easily make requests to the QuestionIt.space API with the generic HTTP methods `.get`, `.post`, `.put`, `.patch` and `.delete`.\nFind documentation about every endpoint in the [documentation](https://docs.questionit.space).\n\n```py\n# Instanciate the client\nclient = pyquestionit.QuestionIt()\n\n# Make unlogged requests to allowed endpoints\nusers = client.get('users/find', params={'q': 'questionit'})\n# users == [{'id': '1', 'slug': 'questionitspace', ...}]\n```\n\nFor every method, you can find the following parameters:\n\n- `endpoint` (`str`): Specify the endpoint (mandatory)\n- `params` (`dict`): Specify query or body parameters of your request. It will be automatically formatted.\n- `headers` (`dict`): If you want to set custom headers.\n- `auth` (`bool` or `str`): If `True` (default), request will use registred token. If `str`, use the string as token. If `False` , disable auth.\n- `with_rq` (`boolean`): If `True`, return the response object instead of the direct result. You can use `response.json()` to get result.\n\n**Endpoint** parameter is the remaining part after `https://api.questionit.space/` URL.\nFor example, for endpoint `https://api.questionit.space/users/find`, parameter should be `users/find`.\n\n\n### Make an authentificated request\n\nThis kind of request requires an **access token**. If you don't have it yet, jump to ***Authentification*** part.\n\nYou can specify your token inside `QuestionIt` constructor\n\n```py\nclient = pyquestionit.QuestionIt('some-token-here');\n```\n\nor just use `set_access_token()` method.\n\n```py\nclient.set_access_token('some-token-here');\n```\n\nToken will be automatically added to request headers.\n\n```py\nrelationship = client.get('relationships/with/2');\n\nprint(f\"You {'follow' if relationship.following else 'do not follow'} user #2\")\n```\n\n\n### Errors\n\nThis library uses `requests` package and raise exceptions when HTTP status code is not a success.\nYou can catch exceptions with `requests.exceptions.HTTPError` type:\n\n```py\nimport requests\n\ntry:\n  users = client.get('users/find', params={'q': 'questionit'})\nexcept requests.exceptions.HTTPError as e:\n  request = e.request\n  response = e.response\n  result = response.json() # Usually, result is an APIError result\n\n  # Do something with response or result...\n  print('Error code: ', result['code'])\n```\n\n## Authentification\n\nYou can generate login tokens and get access token through this library.\n\n### Get a request token\n\nA request token is used to ask user to connect to your app.\n\n```py\nimport urllib.parse\n\ntoken = client.get_request_token(\n  'app-key-here', \n  'redirect-url-after-confirm-or-deny' # or 'oob' for no redirection\n)\n\ntoken_encoded = urllib.parse.quote(token)\nurl = 'https://questionit.space/appflow?token=' + token_encoded\n\n# Send user to {url} !\n```\n\n### Get access token\n\nOnce user has approved the app, he will be redirected to your redirect URL (or will have an access PIN displayed).\n\nFor redirect URLs, there's formed like: \n`https://yoursite.com/callback?validator={validator}`.\n\nYou can extract `validator` from query string, they're needed to generate access token.\n\n```py\nresult = client.get_access_token(\n  'app-key-here',\n  # You need to have original token, it should be stored somewhere on your side. \n  # You can give an unique key into callback URL (like in query),\n  # it will be keeped.\n  'token-here', \n  'validator-or-PIN-here'\n)\n\nprint(f\"Access token is {result['token']}.\")\n```\n\nYou can now use this token with the instance.\n\n```py\nclient.set_access_token(result['token'])\n```\n\n## Endpoint-based methods\n\nThis Python library binds most of the endpoints of the API to specific methods, so you don't need to handle boring things by yourself.\nTheir usage is pretty straight-forward and don't need to be explained (the method parameters are usually whats API is taking), except for a few methods (see below).\n\nThe following methods exists:\n- `.verify_token` -> `GET auth/token/verify`\n- `.revoke_token` -> `DELETE auth/token`\n- `.find_users` -> `GET users/find`\n- `.get_user` -> `GET users/id/:id` and `GET users/slug/:slug`\n- `.get_logged` -> `GET users/logged`\n- `.set_pinned` -> `PATCH questions/pin`\n- `.remove_pinned` -> `DELETE questions/pin`\n- `.set_muted_words` -> `POST users/blocked_words`\n- `.get_muted_words` -> `GET users/blocked_words`\n- `.ask` -> `POST questions`, `POST questions/anonymous` and `POST polls`\n- `.waiting_questions` -> `GET questions/waiting`\n- `.reply` -> `POST questions/answer`\n- `.remove_question` -> `DELETE questions`\n- `.remove_muted_questions` -> `DELETE questions/masked`\n- `.like` -> `POST likes`\n- `.unlike` -> `DELETE likes`\n- `.likers_of` -> `GET likes/list/:id`\n- `.likers_ids_of` -> `GET likes/ids/:id`\n- `.questions_of` -> `GET questions`\n- `.asked_questions_of` -> `GET questions/sent`\n- `.home_timeline` -> `GET questions/timeline`\n- `.ancestors_of` -> `GET questions/tree/:root`\n- `.replies_of` -> `GET questions/replies/:id`\n- `.relationship_with` -> `GET relationships/with/:id`\n- `.relationship_between` -> `GET relationships/between`\n- `.follow` -> `POST relationships/:id`\n- `.unfollow` -> `DELETE relationships/:id`\n- `.followers` -> `GET relationships/followers`\n- `.followings` -> `GET relationships/followings`\n- `.block` -> `POST blocks/:id`\n- `.unblock` -> `DELETE blocks/:id`\n- `.get_notifications` -> `GET notifications`\n- `.remove_notification` -> `DELETE notifications/:id`\n- `.get_notification_count` -> `GET notifications/count`\n- `.notifications_all_mark_as_seen` -> `POST notifications/bulk_seen`\n\n### .get_user\n\nThis method can fetch an user by user ID or by slug.\n\nIt automatically choose between ID and slug regarding the given string ; if it's numeric, ID endpoint will be used.\n\n```py\nclient.get_user('2')  # calls users/id/2\nclient.get_user('questionitspace')  # calls users/slug/questionitspace\n```\n\n### .ask\n\nYou can attach multiple choices \"polls\" directly with this method.\nJust give a simple list of strings in the `poll` parameter.\n\n```py\nclient.ask('Cat or dog?', user_id='2', in_reply_to='36', poll=['Cats!!', 'Dogs :('])\n```\n\n### .reply\n\nWhen you reply to a question, you can attach medias (JPEG, PNG and GIF images).\n\nYou must attach the picture in the `picture` parameter of `.reply` by following this example:\n\n```py\nimport mimetypes\n\npath = 'path-to-file.ext'\n\nclient.reply(\n  answer='Yes, cats are the best.', \n  question_id='32',\n  picture=(\n    'picture',  # Name, required for multipart/form-data send \n    open(path, 'rb'),  # Open as 'rb' !\n    mimetypes.guess_type(path)[0]  # MIME type\n  ),\n)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alkihis/pyquestionit",
    "keywords": "questionit,api client",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyquestionit",
    "package_url": "https://pypi.org/project/pyquestionit/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyquestionit/",
    "project_urls": {
      "Homepage": "https://github.com/alkihis/pyquestionit"
    },
    "release_url": "https://pypi.org/project/pyquestionit/1.0.1/",
    "requires_dist": [
      "requests",
      "requests-toolbelt"
    ],
    "requires_python": "",
    "summary": "Official client for QuestionIt.space API",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8124557,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f127e68156fa5e2858b6b9b07ca2d1184b80bb3980f9171e964490d1ad55d59e",
          "md5": "1f8ddf245e373b1841ddaa87c92facd8",
          "sha256": "51f0f1d6107fd942a47e371af64db2067000ef0d5c3c5a8d1459bc31926e32d6"
        },
        "downloads": -1,
        "filename": "pyquestionit-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f8ddf245e373b1841ddaa87c92facd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6023,
        "upload_time": "2020-09-06T13:56:53",
        "upload_time_iso_8601": "2020-09-06T13:56:53.614775Z",
        "url": "https://files.pythonhosted.org/packages/f1/27/e68156fa5e2858b6b9b07ca2d1184b80bb3980f9171e964490d1ad55d59e/pyquestionit-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34ac3adaf252a3e23622288d839f24fa111473e936d94c503cccd0829af3e440",
          "md5": "8cff0340c475df3bd0bd482f2d682502",
          "sha256": "d7d74a615266528822225e8ad7b2b2c73ce4cf6cd17eb4f996830e2a666a07b6"
        },
        "downloads": -1,
        "filename": "pyquestionit-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cff0340c475df3bd0bd482f2d682502",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10206,
        "upload_time": "2020-09-06T15:09:21",
        "upload_time_iso_8601": "2020-09-06T15:09:21.382785Z",
        "url": "https://files.pythonhosted.org/packages/34/ac/3adaf252a3e23622288d839f24fa111473e936d94c503cccd0829af3e440/pyquestionit-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2cf1542b1eedb5dc26bc0949b72fcd18744f71cd05edee3b7319757463de6a3",
          "md5": "a1daafcb3882bc84d63ce02a6e30ca1a",
          "sha256": "e354f83478d4ae2e98d23ded7ba086a4d65555e94d130f70d657ee3ab8d87517"
        },
        "downloads": -1,
        "filename": "pyquestionit-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a1daafcb3882bc84d63ce02a6e30ca1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12274,
        "upload_time": "2020-09-06T15:09:22",
        "upload_time_iso_8601": "2020-09-06T15:09:22.883896Z",
        "url": "https://files.pythonhosted.org/packages/d2/cf/1542b1eedb5dc26bc0949b72fcd18744f71cd05edee3b7319757463de6a3/pyquestionit-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34ac3adaf252a3e23622288d839f24fa111473e936d94c503cccd0829af3e440",
        "md5": "8cff0340c475df3bd0bd482f2d682502",
        "sha256": "d7d74a615266528822225e8ad7b2b2c73ce4cf6cd17eb4f996830e2a666a07b6"
      },
      "downloads": -1,
      "filename": "pyquestionit-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8cff0340c475df3bd0bd482f2d682502",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10206,
      "upload_time": "2020-09-06T15:09:21",
      "upload_time_iso_8601": "2020-09-06T15:09:21.382785Z",
      "url": "https://files.pythonhosted.org/packages/34/ac/3adaf252a3e23622288d839f24fa111473e936d94c503cccd0829af3e440/pyquestionit-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2cf1542b1eedb5dc26bc0949b72fcd18744f71cd05edee3b7319757463de6a3",
        "md5": "a1daafcb3882bc84d63ce02a6e30ca1a",
        "sha256": "e354f83478d4ae2e98d23ded7ba086a4d65555e94d130f70d657ee3ab8d87517"
      },
      "downloads": -1,
      "filename": "pyquestionit-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a1daafcb3882bc84d63ce02a6e30ca1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12274,
      "upload_time": "2020-09-06T15:09:22",
      "upload_time_iso_8601": "2020-09-06T15:09:22.883896Z",
      "url": "https://files.pythonhosted.org/packages/d2/cf/1542b1eedb5dc26bc0949b72fcd18744f71cd05edee3b7319757463de6a3/pyquestionit-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}