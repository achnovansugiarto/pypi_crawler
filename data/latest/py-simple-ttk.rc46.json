{
  "info": {
    "author": "",
    "author_email": "Andrew Spangler <AndrewSpangler@users.noreply.github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# py_simple_ttk 0.2.9<a name=\"mark0\"></a>\r\n\r\n***Themes don't have to be hard.***\r\n\r\n- [About](#mark1)\r\n- [Requirements](#mark2)\r\n- [Configuring ini.json](#mark3)\r\n- [The App Object](#mark4)\r\n\t- [App](#mark5)\r\n- [Core Widgets](#mark6)\r\n\t- [MultiWidgetMixin](#mark7)\r\n\t- [SuperWidgetMixin](#mark8)\r\n- [Tabs](#mark9)\r\n\t- [Tab](#mark10)\r\n\t- [LauncherTab](#mark11)\r\n\t- [BrowserLauncherTab](#mark12)\r\n\t- [CommandLauncherTab](#mark13)\r\n\t- [ConsoleTab](#mark14)\r\n\t- [TableTab](#mark15)\r\n\t- [TreeTableTab](#mark16)\r\n- [Widgets](#mark17)\r\n\t- [Button Widgets](#mark18)\r\n\t\t- [ActiveButton](#mark19)\r\n\t\t- [LabeledButton](#mark20)\r\n\t\t- [LabeledMultiButton](#mark21)\r\n\t\t- [CycleButton](#mark22)\r\n\t\t- [LabeledCycleButton](#mark23)\r\n\t\t- [LabeledMultiCycleButton](#mark24)\r\n\t- [Core Functions](#mark25)\r\n\t\t- [bbox_to_width_and_height](#mark26)\r\n\t\t- [center_window](#mark27)\r\n\t\t- [check_in_bounds](#mark28)\r\n\t\t- [complex_widget_search](#mark29)\r\n\t\t- [copy_to_user_clipboard](#mark30)\r\n\t\t- [create_round_rectangle](#mark31)\r\n\t\t- [default_pack](#mark32)\r\n\t\t- [default_separator](#mark33)\r\n\t\t- [default_vertical_pack](#mark34)\r\n\t\t- [default_vertical_separator](#mark35)\r\n\t\t- [enable_notebook_movement](#mark36)\r\n\t\t- [focus_next](#mark37)\r\n\t\t- [force_aspect](#mark38)\r\n\t\t- [get_asset](#mark39)\r\n\t\t- [get_bundled_themes_list](#mark40)\r\n\t\t- [get_generated_font_images_lookup](#mark41)\r\n\t\t- [get_local_appdata_folder](#mark42)\r\n\t\t- [get_themes_folder](#mark43)\r\n\t\t- [make_aspect_frames](#mark44)\r\n\t\t- [make_temp_config_file](#mark45)\r\n\t\t- [open_link](#mark46)\r\n\t\t- [recursive_widget_search](#mark47)\r\n\t\t- [run_cl](#mark48)\r\n\t- [Canvas Widgets](#mark49)\r\n\t\t- [ResizableCanvas](#mark50)\r\n\t\t- [ScrolledCanvas](#mark51)\r\n\t\t- [TiledCanvas](#mark52)\r\n\t\t- [ExampleTile](#mark53)\r\n\t- [Checkbutton Widgets](#mark54)\r\n\t\t- [ActiveCheckbutton](#mark55)\r\n\t\t- [LabeledCheckbutton](#mark56)\r\n\t\t- [LabeledMultiCheckbutton](#mark57)\r\n\t- [Combobox Widgets](#mark58)\r\n\t\t- [ActiveCombobox](#mark59)\r\n\t\t- [LabeledCombobox](#mark60)\r\n\t\t- [LabeledMultiCombobox](#mark61)\r\n\t- [Console Widgets](#mark62)\r\n\t\t- [ConsoleWidget](#mark63)\r\n\t- [Constraining Functions](#mark64)\r\n\t\t- [check_entry_type](#mark65)\r\n\t\t- [check_entry_int](#mark66)\r\n\t\t- [check_entry_float](#mark67)\r\n\t\t- [check_entry_contents](#mark68)\r\n\t\t- [check_entry_ascii_lowercase](#mark69)\r\n\t\t- [check_entry_ascii_uppercase](#mark70)\r\n\t\t- [check_entry_ascii_letters](#mark71)\r\n\t\t- [check_entry_ascii_digits](#mark72)\r\n\t\t- [check_entry_ascii_uppercase_digits](#mark73)\r\n\t\t- [check_entry_ascii_lowercase_digits](#mark74)\r\n\t\t- [check_entry_ascii_hexdigits](#mark75)\r\n\t\t- [check_entry_ascii_octdigits](#mark76)\r\n\t\t- [check_entry_ascii_letters_digits](#mark77)\r\n\t\t- [check_entry_ascii_printable](#mark78)\r\n\t- [Counter Widgets](#mark79)\r\n\t\t- [Counter](#mark80)\r\n\t\t- [FloatCounter](#mark81)\r\n\t\t- [LabeledCounter](#mark82)\r\n\t\t- [LabeledFloatCounter](#mark83)\r\n\t\t- [LabeledMultiCounter](#mark84)\r\n\t\t- [LabeledMultiFloatCounter](#mark85)\r\n\t- [Entry Widgets](#mark86)\r\n\t\t- [ActiveEntry](#mark87)\r\n\t\t- [ScrolledEntry](#mark88)\r\n\t\t- [LabeledEntry](#mark89)\r\n\t\t- [LabeledMultiEntry](#mark90)\r\n\t\t- [LabeledButtonEntry](#mark91)\r\n\t\t- [LabeledMultiButtonEntry](#mark92)\r\n\t\t- [LabeledPathEntry](#mark93)\r\n\t\t- [LabeledMultiPathEntry](#mark94)\r\n\t\t- [PasswordEntry](#mark95)\r\n\t\t- [LabeledPasswordEntry](#mark96)\r\n\t\t- [LabeledMultiPasswordEntry](#mark97)\r\n\t\t- [ConstrainedEntry](#mark98)\r\n\t\t- [LabeledConstrainedEntry](#mark99)\r\n\t\t- [LabeledMultiConstrainedEntry](#mark100)\r\n\t\t- [IntEntry](#mark101)\r\n\t\t- [LabeledIntEntry](#mark102)\r\n\t\t- [LabeledMultiIntEntry](#mark103)\r\n\t\t- [FloatEntry](#mark104)\r\n\t\t- [LabeledFloatEntry](#mark105)\r\n\t\t- [LabeledMultiFloatEntry](#mark106)\r\n\t\t- [LowercaseEntry](#mark107)\r\n\t\t- [LabeledLowercaseEntry](#mark108)\r\n\t\t- [LabeledMultiLowercaseEntry](#mark109)\r\n\t\t- [UppercaseEntry](#mark110)\r\n\t\t- [LabeledUppercaseEntry](#mark111)\r\n\t\t- [LabeledMultiUppercaseEntry](#mark112)\r\n\t\t- [LettersEntry](#mark113)\r\n\t\t- [LabeledLettersEntry](#mark114)\r\n\t\t- [LabeledMultiLettersEntry](#mark115)\r\n\t\t- [DigitsEntry](#mark116)\r\n\t\t- [LabeledDigitsEntry](#mark117)\r\n\t\t- [LabeledMultiDigitsEntry](#mark118)\r\n\t\t- [UppercaseDigitsEntry](#mark119)\r\n\t\t- [LabeledUppercaseDigitsEntry](#mark120)\r\n\t\t- [LabeledMultiUppercaseDigitsEntry](#mark121)\r\n\t\t- [LowercaseDigitsEntry](#mark122)\r\n\t\t- [LabeledLowercaseDigitsEntry](#mark123)\r\n\t\t- [LabeledMultiLowercaseDigitsEntry](#mark124)\r\n\t\t- [LettersDigitsEntry](#mark125)\r\n\t\t- [LabeledLettersDigitsEntry](#mark126)\r\n\t\t- [LabeledMultiLettersDigitsEntry](#mark127)\r\n\t\t- [HexdigitsEntry](#mark128)\r\n\t\t- [LabeledHexdigitsEntry](#mark129)\r\n\t\t- [LabeledMultiHexdigitsEntry](#mark130)\r\n\t\t- [OctdigitsEntry](#mark131)\r\n\t\t- [LabeledOctdigitsEntry](#mark132)\r\n\t\t- [LabeledMultiOctdigitsEntry](#mark133)\r\n\t\t- [PrintableEntry](#mark134)\r\n\t\t- [LabeledPrintableEntry](#mark135)\r\n\t\t- [LabeledMultiPrintableEntry](#mark136)\r\n\t- [Frame Widgets](#mark137)\r\n\t\t- [ColumnFrame](#mark138)\r\n\t\t- [HamburgerFrame](#mark139)\r\n\t- [KeyPad Widgets](#mark140)\r\n\t\t- [KeypadButton](#mark141)\r\n\t\t- [BaseKeypad](#mark142)\r\n\t\t- [DialerKeypad](#mark143)\r\n\t- [Label Widgets](#mark144)\r\n\t\t- [ActiveLabel](#mark145)\r\n\t\t- [LabeledValue](#mark146)\r\n\t- [Labeler Widget](#mark147)\r\n\t\t- [ActiveButton](#mark148)\r\n\t\t- [LabeledButton](#mark149)\r\n\t\t- [LabeledMultiButton](#mark150)\r\n\t\t- [CycleButton](#mark151)\r\n\t\t- [LabeledCycleButton](#mark152)\r\n\t\t- [LabeledMultiCycleButton](#mark153)\r\n\t- [ListBox Widgets](#mark154)\r\n\t\t- [ScrolledListBox](#mark155)\r\n\t\t- [OrderedListbox](#mark156)\r\n\t\t- [ListManipulator](#mark157)\r\n\t\t- [Table](#mark158)\r\n\t- [OptionMenu Widgets](#mark159)\r\n\t\t- [ActiveOptionMenu](#mark160)\r\n\t\t- [LabeledOptionMenu](#mark161)\r\n\t\t- [LabeledMultiOptionMenu](#mark162)\r\n\t- [ProgressBar Widgets](#mark163)\r\n\t\t- [ActiveProgressbar](#mark164)\r\n\t\t- [LabeledProgressbar](#mark165)\r\n\t\t- [LabeledMultiProgressbar](#mark166)\r\n\t- [Radiobutton Widgets](#mark167)\r\n\t\t- [ActiveRadiobutton](#mark168)\r\n\t\t- [RadioTable](#mark169)\r\n\t\t- [LabeledRadioTable](#mark170)\r\n\t\t- [LabeledMultiRadioTable](#mark171)\r\n\t\t- [SimpleRadioTable](#mark172)\r\n\t\t- [LabeledSimpleRadioTable](#mark173)\r\n\t\t- [LabeledMultiSimpleRadioTable](#mark174)\r\n\t- [Scale Widgets](#mark175)\r\n\t\t- [ActiveScale](#mark176)\r\n\t\t- [LabeledScale](#mark177)\r\n\t\t- [LabeledMultiScale](#mark178)\r\n\t- [Spinbox Widgets](#mark179)\r\n\t\t- [ActiveSpinbox](#mark180)\r\n\t\t- [LabeledSpinbox](#mark181)\r\n\t\t- [LabeledMultiSpinbox](#mark182)\r\n\t- [Text Widgets](#mark183)\r\n\t\t- [ScrolledText](#mark184)\r\n\t\t- [CopyBox](#mark185)\r\n\t\t- [LabeledCopyBox](#mark186)\r\n\t\t- [LabeledMultiCopyBox](#mark187)\r\n\t- [Toplevel Widgets](#mark188)\r\n\t\t- [FocusedToplevel](#mark189)\r\n\t\t- [NoticeWindow](#mark190)\r\n\t\t- [YesNoCancelWindow](#mark191)\r\n\t\t- [PromptWindow](#mark192)\r\n\t\t- [PasswordWindow](#mark193)\r\n\t\t- [ListWindow](#mark194)\r\n\t\t- [TextWindow](#mark195)\r\n\t- [Misc Widgets](#mark196)\r\n\t\t- [ToolTip](#mark197)\r\n\t\t- [EasySizegrip](#mark198)\r\n- [SuperLib.utils](#mark199)\r\n\t- [Utils](#mark200)\r\n\t\t- [check_if_module_installed](#mark201)\r\n\t\t- [check_string_contains](#mark202)\r\n\t\t- [dummy_function](#mark203)\r\n\t\t- [get_friendly_time](#mark204)\r\n\t\t- [get_unix_timestamp](#mark205)\r\n\t\t- [get_unix_timestring](#mark206)\r\n\t\t- [get_user_home_folder](#mark207)\r\n\t\t- [open_folder_in_explorer](#mark208)\r\n\t\t- [sort_dict_by_keys](#mark209)\r\n\t\t- [timer_decorator](#mark210)\r\n\t- [File Generators](#mark211)\r\n\t\t- [HTML_Generator](#mark212)\r\n\t\t- [TXT_Generator](#mark213)\r\n\t\t- [MD_Generator](#mark214)\r\n\t- [History Mixin](#mark215)\r\n\t\t- [HistoryMixin](#mark216)\r\n\t- [Color Functions](#mark217)\r\n\t\t- [reduce_255](#mark218)\r\n\t\t- [rgb_to_hex](#mark219)\r\n\t\t- [rgba_to_hex](#mark220)\r\n\t\t- [hex_to_rgb](#mark221)\r\n\t\t- [hex_to_rgba](#mark222)\r\n\t\t- [get_gradient](#mark223)\r\n\t\t- [rgb_to_scalar](#mark224)\r\n\t\t- [scalar_to_rgb](#mark225)\r\n\t\t- [linear_gradient](#mark226)\r\n\t\t- [get_rainbow](#mark227)\r\n- [MegaWidgets](#mark228)\r\n\t- [Notes MegaWidget](#mark229)\r\n\t\t- [NotesTab](#mark230)\r\n\t- [Conversation MegaWidget](#mark231)\r\n\t\t- [ConversationsTab](#mark232)\r\n\t- [Profile Management](#mark233)\r\n\t\t- [ProfilesSystem](#mark234)\r\n\t\t- [UserProfile](#mark235)\r\n\t\t- [get_profiles_folder](#mark236)\r\n\t\t- [get_profiles_list](#mark237)\r\n- [PIL-Only Widgets and Functions](#mark238)\r\n- [PIL-Only Widgets](#mark239)\r\n\t- [GifLoader](#mark240)\r\n\t- [GifViewer](#mark241)\r\n- [PIL-Only Functions](#mark242)\r\n\t- [convert_image_to_blackandwhite](#mark243)\r\n\t- [convert_image_to_grayscale](#mark244)\r\n\t- [load_image_from_byte_array](#mark245)\r\n\t- [load_tk_image_from_bytes_array](#mark246)\r\n\t- [make_checkerboard](#mark247)\r\n- [Changelog](#mark248)\r\n\t- [0.2.9](#mark249)\r\n\t- [0.2.8](#mark250)\r\n\t- [0.2.7](#mark251)\r\n\t- [0.2.6](#mark252)\r\n\t- [0.2.5](#mark253)\r\n\t- [0.2.4](#mark254)\r\n\t- [0.2.3](#mark255)\r\n\t- [0.2.2](#mark256)\r\n\t- [0.2.1](#mark257)\r\n\t- [0.2.0](#mark258)\r\n\t- [0.1.42](#mark259)\r\n\t- [0.1.41](#mark260)\r\n\t- [0.1.40](#mark261)\r\n\t- [0.1.39](#mark262)\r\n\t- [0.1.38](#mark263)\r\n\t- [0.1.37](#mark264)\r\n\t- [0.1.36](#mark265)\r\n\t- [0.1.35](#mark266)\r\n\t- [0.1.34](#mark267)\r\n\t- [0.1.33](#mark268)\r\n\t- [0.1.32](#mark269)\r\n\t- [0.1.31](#mark270)\r\n\t- [0.1.30](#mark271)\r\n\t- [0.1.29](#mark272)\r\n\t- [0.1.28](#mark273)\r\n\t- [0.1.27](#mark274)\r\n\t- [0.1.26](#mark275)\r\n\t- [0.1.25](#mark276)\r\n\t- [0.1.24](#mark277)\r\n\t- [0.1.23](#mark278)\r\n\t- [0.1.22](#mark279)\r\n\t- [0.1.21](#mark280)\r\n\t- [0.1.20](#mark281)\r\n\t- [0.1.19](#mark282)\r\n\t- [0.1.18](#mark283)\r\n\t- [0.1.17](#mark284)\r\n\t- [0.1.16](#mark285)\r\n\t- [0.1.15](#mark286)\r\n\t- [0.1.14](#mark287)\r\n\t- [0.1.13](#mark288)\r\n\t- [0.1.12](#mark289)\r\n\t- [0.1.11](#mark290)\r\n\t- [0.1.10](#mark291)\r\n\t- [0.1.9](#mark292)\r\n\t- [0.1.8](#mark293)\r\n\t- [0.1.7](#mark294)\r\n\t- [0.1.6](#mark295)\r\n\t- [0.1.5](#mark296)\r\n\t- [0.1.4](#mark297)\r\n\t- [0.1.3](#mark298)\r\n\t- [0.1.2](#mark299)\r\n\t- [0.1.1](#mark300)\r\n\t- [0.1.0](#mark301)\r\n\r\n---\r\n\r\n# About<a name=\"mark1\"></a>[^](#mark0)\r\n\r\npy_simple_ttk exists because I got tired of rewriting the same code over and over for simple projects. The goal is to provide a variety of meta widgets with consistent get/set/enable/disable/destroy methods and mega-widgets that make ttk development easier and faster. Features include built-in theme support, a score of labeled and multi-widgets, tools for easy form building, a sample application demonstrating many of py_simple_ttk's features, a configuration file system, and much more. Also contains a number of widgets and functions only available when PIL (an optional requirement) is installed.\r\n![Lines of code](https://img.shields.io/tokei/lines/github/AndrewSpangler/py_simple_ttk)\r\n\r\n# Requirements<a name=\"mark2\"></a>[^](#mark0)\r\n\r\n['py_simple_lorem']\r\n\r\n# Configuring ini.json<a name=\"mark3\"></a>[^](#mark0)\r\n\r\n```\r\n+------------------------+-------------------------------------------+\r\n|        Key             |                   Value                   |\r\n+------------------------+-------------------------------------------+\r\n| application            | Application Name (String)                 |\r\n| conversations_enabled  | Enable Convo System (Boolean)             |\r\n| default_theme          | Default theme to use if available (String)|\r\n| disable_notebook       | Disable default ttk.Notebook (Boolean)    |\r\n| enable_fullscreen      | Enable Window Fullscreen option (Boolean) |\r\n| enable_launcher        | Enable Dynamic Launcher System (Boolean)  |\r\n| enable_maximized       | Enable Window Maximized (Boolean)         |\r\n| enable_profiles        | Enable a User Profiles System (Boolean)   |\r\n| enable_sizegrip        | Enable Window EasySizegrip (Boolean)      |\r\n| enable_themes_menu     | Enable Themes Dropdown (Boolean)          |\r\n| height                 | Startup Window Height (Int)               |\r\n| icon                   | Application Icon Path (String)            |\r\n| ignored_themes         | Themes to not display in menu (List)      |\r\n| minheight              | Window Minimum Height (Int)               |\r\n| minwidth               | Window Minimum Width (Int)                |\r\n| movable_tabs           | Enable Moveable Notebook Tabs (Boolean)   |\r\n| notes_enabled          | Enable Note System (Boolean)              |\r\n| resizable_height       | Enable Window Height Resizing (Boolean)   |\r\n| resizable_width        | Enable Window Width Resizing (Boolean)    |\r\n| scale_minsize          | Scale application Minimum Size (Boolean)  |\r\n| scale_startsize        | Scale application Start Size (Boolean)    |\r\n| scaling                | Window Scaling (Float)                    |\r\n| start_centered         | Center Window on launch (Boolean)         |\r\n| start_fullscreen       | Start Window in Fullscreen mode (Boolean) |\r\n| start_maximized        | Start Window Maximized (Boolean)          |\r\n| theme_textboxes        | Apply theme colors to tk.Text (Boolean)   |\r\n| version                | Application Version (String)              |\r\n| width                  | Startup Window Width (Int)                |\r\n+------------------------+-------------------------------------------+\r\n```\r\n# The App Object<a name=\"mark4\"></a>[^](#mark0)\r\n\r\n### App<a name=\"mark5\"></a>[^](#mark4)\r\n**Main Application Object**\r\n\r\n```py\r\nclass App(object):\r\n\tdef __init__(self, ini_file: str):\r\n\t\t...\r\n\tdef apply_profile(self, profile: src.py_simple_ttk.utils.ProfilesSystem.UserProfile) -> str:\r\n\t\t\"\"\"Apply settings from the current profile. For more complicated profile systems override this function. `Returns the current theme as a String`\"\"\"\r\n\tdef copy_to_user_clipboard(self, val: str) -> None:\r\n\t\t\"\"\"Copys a text val to the user's keyboard. `Returns None`\"\"\"\r\n\tdef create_profile(self, name: str = None) -> str | None:\r\n\t\t\"\"\"Calling with no name brings up a popup, the popup calls this function again with name kw which instead makes a new profile or asks again for a name if the supplied name was invalid. `Returns the current theme as a String on success or None`\"\"\"\r\n\tdef get_scaling(self) -> None:\r\n\t\t...\r\n\tdef select_profile(self, name: str = None) -> str:\r\n\t\t\"\"\"Calling with no name brings up a popup, the popup calls this function again with the name which instead calls the Profiles System to use a certain profile. `Returns the current theme as a String`\"\"\"\r\n\tdef start(self) -> None:\r\n\t\t\"\"\"Alias for App.mainloop(). `Never returns.`\"\"\"\r\n\tdef toggle_full_screen(self, event=None) -> None:\r\n\t\t\"\"\"Toggles full screen. Returns None`\"\"\"\r\n\tdef toggle_maximized(self, event=None) -> None:\r\n\t\t\"\"\"Toggles maximized window. Returns None`\"\"\"\r\n\tdef update_default_title(self, indicate_profile=True) -> None:\r\n\t\t\"\"\"Update the window title with the default string, optionally with a profile indicator. `Returns None`\"\"\"\r\n\tdef update_title(self, title) -> None:\r\n\t\t\"\"\"Updates the window title. `Returns None`\"\"\"\r\n\tdef use_theme(self, theme: str = None, verbose: bool = False) -> str:\r\n\t\t\"\"\"Updates the app to use a certain theme. `Returns the current theme as a String`\"\"\"\r\n```\r\n# Core Widgets<a name=\"mark6\"></a>[^](#mark0)\r\n\r\n### MultiWidgetMixin<a name=\"mark7\"></a>[^](#mark6)\r\n**An abstract mixin that provides a way to easily instantiate multiple of the same class of a widget and making complicated forms with simple get/set methods.**\r\n\r\nMultiWidgets support a simple get/set system. Calling get without a configuration list returns a dict of subwidget keys mapped to the values of each subwidget's .get value. Passing a list of subwidget keys limits MultiWidgetMixin.get to said subwidgets. Subclassing a multiwidget with one or more instances of one class and then calling multiwidget.add() with different classes after is acceptable assuming the widget supports being added and .get / .set / .enable / .disable / .clear methods.\r\n```py\r\nclass MultiWidgetMixin(object):\r\n\tdef __init__(self, widget_type: type, config: dict = {}, default_kwargs: dict = {}):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### SuperWidgetMixin<a name=\"mark8\"></a>[^](#mark6)\r\n**Mixin to easily bind many of the common tkinter events.**\r\n\r\nThis class serves to add bindings for the majority of common tkinter widget events. The bindings are made in add mode to prevent previous / new bindings from causing unintended side-effects like unmapping etc.\r\n```py\r\nclass SuperWidgetMixin(object):\r\n\tdef __init__(self, on_mouse_enter: Callable = None, on_mouse_leave: Callable = None, on_mouse_move: Callable = None, on_mouse_wheel: Callable = None, on_left_click: Callable = None, on_double_left_click: Callable = None, on_middle_click: Callable = None, on_double_middle_click: Callable = None, on_right_click: Callable = None, on_double_right_click: Callable = None, on_configure: Callable = None):\r\n\t\t...\r\n```\r\n## Tabs<a name=\"mark9\"></a>[^](#mark0)\r\n\r\n### Tab<a name=\"mark10\"></a>[^](#mark9)\r\n**The core Tab class.**\r\n\r\nThe notebook object can be any ttk.Notebook, automatically adds itself to its parent notebook with title being the tab label. This class may be instantiated directly and added to or subclassed based on need.\r\n```py\r\nclass Tab(Frame):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### LauncherTab<a name=\"mark11\"></a>[^](#mark9)\r\n**Basic Tab for launching tasks from a list.**\r\n\r\nPerforms an action on a list of options. The options argument is formatted as such: `options = {\"Button Text 1\": val1,\"Button Text 2\": val2}` Button presses will call `action(val)`\r\n```py\r\nclass LauncherTab(Tab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str, options: dict, action: Callable):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### BrowserLauncherTab<a name=\"mark12\"></a>[^](#mark9)\r\n**LauncherTab that opens a list of URLS/Files**\r\n\r\nTakes a dict of button texts as keys and urls to open as values\r\n```py\r\nclass BrowserLauncherTab(LauncherTab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str, options: dict):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### CommandLauncherTab<a name=\"mark13\"></a>[^](#mark9)\r\n**LauncherTab that runs a list of commands**\r\n\r\nTakes a dict of button texts as keys and command prompt commands to execute as values\r\n```py\r\nclass CommandLauncherTab(LauncherTab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str, options: dict):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### ConsoleTab<a name=\"mark14\"></a>[^](#mark9)\r\n**Basic console tab using a ConsoleWidget**\r\n\r\n```py\r\nclass ConsoleTab(Tab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### TableTab<a name=\"mark15\"></a>[^](#mark9)\r\n**Basic Table Tab**\r\n\r\ntable_contents is a dictionary whose keys map to lists of equal lengths with the column contents\r\n```py\r\nclass TableTab(Tab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str, table_contents: dict, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### TreeTableTab<a name=\"mark16\"></a>[^](#mark9)\r\n**Improved Table Tab**\r\n\r\ntable_contents is a dictionary whose keys map to lists of equal lengths with the column contents\r\n```py\r\nclass TreeTableTab(Tab):\r\n\tdef __init__(self, notebook: tkinter.ttk.Notebook, title: str, table_contents: dict = {}, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n# Widgets<a name=\"mark17\"></a>[^](#mark0)\r\n\r\n## Button Widgets<a name=\"mark18\"></a>[^](#mark17)\r\n\r\n### ActiveButton<a name=\"mark19\"></a>[^](#mark18)\r\n**ttk.Button with added features**\r\n\r\n```py\r\nclass ActiveButton(Button, SuperWidgetMixin):\r\n\tdef __init__(self, parent, default: str = '', command: Callable = None, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set button text to default\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledButton<a name=\"mark20\"></a>[^](#mark18)\r\n**Labeled ActiveButton widget**\r\n\r\n```py\r\nclass LabeledButton(Labeler, ActiveButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, command: Callable = '', default: str = '', is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set button text to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledMultiButton<a name=\"mark21\"></a>[^](#mark18)\r\n**Labeled MultiWidget LabeledButton.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled ActiveButtons\r\n```py\r\nclass LabeledMultiButton(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### CycleButton<a name=\"mark22\"></a>[^](#mark18)\r\n**ActiveButton that cycles through options on each click**\r\n\r\n```py\r\nclass CycleButton(ActiveButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: list, default: int = 0, command: Callable = None, **kw):\r\n\t\t...\r\n\tdef clear(self, event=None):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledCycleButton<a name=\"mark23\"></a>[^](#mark18)\r\n**Labeled CycleButton widget**\r\n\r\n```py\r\nclass LabeledCycleButton(Labeler, CycleButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, options: list, is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self, event=None):\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledMultiCycleButton<a name=\"mark24\"></a>[^](#mark18)\r\n**Labeled MultiWidget LabeledCycleButton**\r\n\r\nUsed when you need multiple, vertically stacked Labeled CycleButtons\r\n```py\r\nclass LabeledMultiCycleButton(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Core Functions<a name=\"mark25\"></a>[^](#mark17)\r\n\r\n### bbox_to_width_and_height<a name=\"mark26\"></a>[^](#mark25)\r\n> **Takes a bbox and converts it to a width and height tuple.**\r\n> \r\n```python\r\ndef bbox_to_width_and_height(bbox: tuple) -> tuple:\r\n> \t...\r\n```\r\n### center_window<a name=\"mark27\"></a>[^](#mark25)\r\n> **Centers spawn window on main window. Call win.update_idletasks() on either window before calling this if said window is not yet shown.**\r\n> \r\n```python\r\ndef center_window(main_window: tkinter.Tk, spawn_window: tkinter.Toplevel) -> None:\r\n> \t...\r\n```\r\n### check_in_bounds<a name=\"mark28\"></a>[^](#mark25)\r\n> **Checks if a position is within a given bounds. Pos is generally a mouse event position tuple, bounds is generally a canvas.bbox(), but a (left, top, right, bottom) tuple will work too.**\r\n> \r\n```python\r\ndef check_in_bounds(pos: tuple, bounds: tuple) -> bool:\r\n> \t...\r\n```\r\n### complex_widget_search<a name=\"mark29\"></a>[^](#mark25)\r\n> **A more robust version of the widget search with lists for multiple widget types found in one go**\r\n> \r\n```python\r\ndef complex_widget_search(node_widget, widget_types_to_find: list | tuple, found_lists: dict = {}) -> dict:\r\n> \t...\r\n```\r\n### copy_to_user_clipboard<a name=\"mark30\"></a>[^](#mark25)\r\n> **Copies a string to the user's clipboard.**\r\n> \r\n```python\r\ndef copy_to_user_clipboard(widget, value: str) -> None:\r\n> \t...\r\n```\r\n### create_round_rectangle<a name=\"mark31\"></a>[^](#mark25)\r\n> **Draws a rounded rectangle of a given radius on a tk.canvas**\r\n> \r\n```python\r\ndef create_round_rectangle(canvas, x1: float, y1: float, x2: float, y2: float, r: float = 20, fill: str = '', outline: str = '#000000', **kwargs):\r\n> \t...\r\n```\r\n### default_pack<a name=\"mark32\"></a>[^](#mark25)\r\n> **Apply a consistent descending packing method.**\r\n> \r\n```python\r\ndef default_pack(widget, bottom: bool = False, padx: tuple = 5) -> None:\r\n> \t...\r\n```\r\n### default_separator<a name=\"mark33\"></a>[^](#mark25)\r\n> **Apply a consistent horizontal separator.**\r\n> \r\n```python\r\ndef default_separator(f: tkinter.ttk.Frame, padx: tuple = 35, pady: tuple = (10, 5)) -> tkinter.ttk.Separator:\r\n> \t...\r\n```\r\n### default_vertical_pack<a name=\"mark34\"></a>[^](#mark25)\r\n> **Apply a consistent packing method to vertically packed widgets.**\r\n> \r\n```python\r\ndef default_vertical_pack(widget, expand: bool = False, fill: str = 'both', padx: tuple = 0) -> None:\r\n> \t...\r\n```\r\n### default_vertical_separator<a name=\"mark35\"></a>[^](#mark25)\r\n> **Apply a consistent vertical separator.**\r\n> \r\n```python\r\ndef default_vertical_separator(frame: tkinter.ttk.Frame, pady: tuple = 15, padx: tuple = 10) -> tkinter.ttk.Separator:\r\n> \t...\r\n```\r\n### enable_notebook_movement<a name=\"mark36\"></a>[^](#mark25)\r\n> **Copyright CJB 2010-07-31: https://wiki.tcl-lang.org/page/Drag+and+Drop+Notebook+Tabs Enables Tab dragging in subsequently created notebooks. Only run this function once.**\r\n> \r\n```python\r\ndef enable_notebook_movement(app) -> None:\r\n> \t...\r\n```\r\n### focus_next<a name=\"mark37\"></a>[^](#mark25)\r\n> **Forces focus to the widget after the one that triggered the event**\r\n> \r\n```python\r\ndef focus_next(event) -> object:\r\n> \t...\r\n```\r\n### force_aspect<a name=\"mark38\"></a>[^](#mark25)\r\n> **Forces an inner frame to maintain an aspect ratio regardless of the outer frame's size**\r\n> \r\n```python\r\ndef force_aspect(inner_frame: tkinter.ttk.Frame, outer_frame: tkinter.ttk.Frame, ratio: float = 1.7777777777777777) -> None:\r\n> \t...\r\n```\r\n### get_asset<a name=\"mark39\"></a>[^](#mark25)\r\n> **Gets an asset from the included assets folder by relative path. Works with pyinstaller.**\r\n> \r\n```python\r\ndef get_asset(path, folder: str = 'C:\\\\Users\\\\arcti\\\\GitHub\\\\py_simple_ttk\\\\src\\\\py_simple_ttk\\\\./assets') -> str:\r\n> \t...\r\n```\r\n### get_bundled_themes_list<a name=\"mark40\"></a>[^](#mark25)\r\n> **None**\r\n> \r\n```python\r\ndef get_bundled_themes_list(verbose: bool = False) -> list:\r\n> \t...\r\n```\r\n### get_generated_font_images_lookup<a name=\"mark41\"></a>[^](#mark25)\r\n> **Makes a lookup for the pre-generated open-sans font monograms that ship with py_simple_ttk.**\r\n> \r\n```python\r\ndef get_generated_font_images_lookup(path: str = None) -> dict:\r\n> \t...\r\n```\r\n### get_local_appdata_folder<a name=\"mark42\"></a>[^](#mark25)\r\n> **Opens user's Windows home folder. Only works on Windows for obvious reasons.**\r\n> \r\n```python\r\ndef get_local_appdata_folder() -> str:\r\n> \t...\r\n```\r\n### get_themes_folder<a name=\"mark43\"></a>[^](#mark25)\r\n> **Gets the absolute path to the included themes folder**\r\n> \r\n```python\r\ndef get_themes_folder() -> str:\r\n> \t...\r\n```\r\n### make_aspect_frames<a name=\"mark44\"></a>[^](#mark25)\r\n> **Creates an outer and inner frame within a parent frame. Forces the inner frame to maintain an aspect ratio. Returns the outer and inner frames.**\r\n> \r\n```python\r\ndef make_aspect_frames(parent: tkinter.ttk.Frame, ratio: float = 1.7777777777777777) -> tuple:\r\n> \t...\r\n```\r\n### make_temp_config_file<a name=\"mark45\"></a>[^](#mark25)\r\n> **Make a one-time-use app config file from a dict in the same form as a normal config json. `Returns file path as String`**\r\n> \r\n```python\r\ndef make_temp_config_file(config: dict):\r\n> \t...\r\n```\r\n### open_link<a name=\"mark46\"></a>[^](#mark25)\r\n> **Opens a link in the user's default web browser. `Returns None`**\r\n> \r\n```python\r\ndef open_link(link: str) -> None:\r\n> \t...\r\n```\r\n### recursive_widget_search<a name=\"mark47\"></a>[^](#mark25)\r\n> **\r\n    Adds widgets of a given type to a list as it travels up,\r\n    away from the root of a widget tree. This method can be slow on\r\n    large widget trees but is useful for retheming tk widgets with\r\n    ttk formatting on theme changes. `Returns a list of widgets`\r\n    **\r\n> \r\n```python\r\ndef recursive_widget_search(node_widget, widget_type_to_find: type, found_list: list = []) -> list:\r\n> \t...\r\n```\r\n### run_cl<a name=\"mark48\"></a>[^](#mark25)\r\n> **Runs something via command line. `Returns None`**\r\n> \r\n```python\r\ndef run_cl(commands: list) -> None:\r\n> \t...\r\n```\r\n## Canvas Widgets<a name=\"mark49\"></a>[^](#mark17)\r\n\r\n### ResizableCanvas<a name=\"mark50\"></a>[^](#mark49)\r\n**Resizeable Canvas**\r\n\r\nCanvas resizes to fit frame on configure event.\r\n```py\r\nclass ResizableCanvas(Canvas):\r\n\tdef __init__(self, parent, **kw):\r\n\t\t...\r\n\tdef create_arc(self, *args, **kw):\r\n\t\t\"\"\"Create arc shaped region with coordinates x1,y1,x2,y2.\"\"\"\r\n\tdef create_bitmap(self, *args, **kw):\r\n\t\t\"\"\"Create bitmap with coordinates x1,y1.\"\"\"\r\n\tdef create_image(self, *args, **kw):\r\n\t\t\"\"\"Create image item with coordinates x1,y1.\"\"\"\r\n\tdef create_line(self, *args, **kw):\r\n\t\t\"\"\"Create line with coordinates x1,y1,...,xn,yn.\"\"\"\r\n\tdef create_oval(self, *args, **kw):\r\n\t\t\"\"\"Create oval with coordinates x1,y1,x2,y2.\"\"\"\r\n\tdef create_polygon(self, *args, **kw):\r\n\t\t\"\"\"Create polygon with coordinates x1,y1,...,xn,yn.\"\"\"\r\n\tdef create_rectangle(self, *args, **kw):\r\n\t\t\"\"\"Create rectangle with coordinates x1,y1,x2,y2.\"\"\"\r\n\tdef create_round_rectangle(self, x1: float, y1: float, x2: float, y2: float, r: float = 20, fill: str = '', outline: str = '#000000', **kwargs) -> None:\r\n\t\t\"\"\"Draws a rounded rectangle of a given radius on a tk.canvas.\"\"\"\r\n\tdef create_text(self, *args, **kw):\r\n\t\t\"\"\"Create text with coordinates x1,y1.\"\"\"\r\n\tdef create_window(self, *args, **kw):\r\n\t\t\"\"\"Create window with coordinates x1,y1,x2,y2.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef refresh(self) -> None:\r\n\t\t\"\"\"Refresh Canvas\"\"\"\r\n```\r\n### ScrolledCanvas<a name=\"mark51\"></a>[^](#mark49)\r\n**Resizeable, Auto-Scrollbarred Canvas**\r\n\r\nCanvas resizes to fit frame on configure event. Canvas has automatic Scrollbars that appear when needed. Canvas background color is based on current theme. Due to how the scrolling is handled the actual Canvas is accessd via `ScrolledCanvas().canvas`.\r\n```py\r\nclass ScrolledCanvas(Frame):\r\n\tdef __init__(self, parent, on_mouse_enter=None, on_mouse_leave=None, on_mouse_move=None, on_mouse_wheel=None, on_left_click=None, on_middle_click=None, on_right_click=None, on_configure=None, configure_delay: int = 100, bind_canvas_scroll=True, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get_adjusted_y_view(self, event) -> int:\r\n\t\t\"\"\"Gets a canvas y-view adjusted based on its scrolled position\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef use_style(self, style) -> None:\r\n\t\t\"\"\"Reformat with a given ttk style. `Returns None`\"\"\"\r\n```\r\n### TiledCanvas<a name=\"mark52\"></a>[^](#mark49)\r\n```py\r\nclass TiledCanvas(ScrolledCanvas):\r\n\tdef __init__(self, *args, tile_width=400, tile_height=100, tile_padx=5, tile_pady=5, tile_color='#424548', text_color='#CCCCCC', border_color='#000000', on_tile_left_click=None, on_tile_middle_click=None, on_tile_right_click=None, override_tile_width=False, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get_adjusted_y_view(self, event) -> int:\r\n\t\t\"\"\"Gets a canvas y-view adjusted based on its scrolled position\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef refresh(self, event=None) -> None:\r\n\t\t\"\"\"Redraw the canvas\"\"\"\r\n\tdef use_style(self, style) -> None:\r\n\t\t\"\"\"Reformat with a given ttk style. `Returns None`\"\"\"\r\n```\r\n### ExampleTile<a name=\"mark53\"></a>[^](#mark49)\r\n**An example tile for a Scrolled Canvas**\r\n\r\n```py\r\nclass ExampleTile(object):\r\n\tdef __init__(self, manager, text: str):\r\n\t\t...\r\n\tdef activate(self) -> None:\r\n\t\t\"\"\"Calls the manager to activate the widget.\"\"\"\r\n\tdef deactivate(self) -> None:\r\n\t\t\"\"\"Calls the manager to deactivate the widget.\"\"\"\r\n\tdef is_in_range(self, pointer_x: float, pointer_y: float) -> bool:\r\n\t\t\"\"\"Checks if the mouse pointer is in the tile.\"\"\"\r\n\tdef set_position(self, x: float, y: float) -> None:\r\n\t\t\"\"\"Sets a tiles position for the draw manager's draw method.\"\"\"\r\n```\r\n## Checkbutton Widgets<a name=\"mark54\"></a>[^](#mark17)\r\n\r\n### ActiveCheckbutton<a name=\"mark55\"></a>[^](#mark54)\r\n**ttk.Checkbutton with added features**\r\n\r\nThe \"replace_output\" keyword argument allows the user to provide a tuple of length 2 to replace the default True/False return values.\r\n```py\r\nclass ActiveCheckbutton(Checkbutton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, replace_output: list = None, default: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets the Checkbutton to its default value, usually *False* `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Checkbutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Checkbutton. `Returns None`\"\"\"\r\n\tdef get(self) -> bool:\r\n\t\t\"\"\"Get Checkbutton value. `Returns a Boolean unless replace_output is set`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: bool) -> None:\r\n\t\t\"\"\"Set Checkbutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledCheckbutton<a name=\"mark56\"></a>[^](#mark54)\r\n**Labeled Checkbutton**\r\n\r\nActiveCheckbutton with a Label\r\n```py\r\nclass LabeledCheckbutton(Labeler, ActiveCheckbutton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str = '', is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets the Checkbutton to its default value, usually *False* `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Checkbutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Checkbutton. `Returns None`\"\"\"\r\n\tdef get(self) -> bool:\r\n\t\t\"\"\"Get Checkbutton value. `Returns a Boolean unless replace_output is set`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: bool) -> None:\r\n\t\t\"\"\"Set Checkbutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiCheckbutton<a name=\"mark57\"></a>[^](#mark54)\r\n**Labeled MultiWidget LabeledCheckbutton.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Checkbuttons\r\n```py\r\nclass LabeledMultiCheckbutton(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Combobox Widgets<a name=\"mark58\"></a>[^](#mark17)\r\n\r\n### ActiveCombobox<a name=\"mark59\"></a>[^](#mark58)\r\n**ttk.Combobox with added features and the SuperWidgetMixin**\r\n\r\n```py\r\nclass ActiveCombobox(Combobox, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, command: Callable = None, default: int = 0, on_keystroke: bool = False, bind_enter: bool = True, bind_escape_clear: bool = True, values: list = (), custom_values: bool = True, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Combobox to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Combobox. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Combobox. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Combobox value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Combobox value. `Returns None`\"\"\"\r\n```\r\n### LabeledCombobox<a name=\"mark60\"></a>[^](#mark58)\r\n**Labeled Combobox with the Super Widget mixin**\r\n\r\nSet custom_values keyword to \"False\" to disable custom user-entered values. Set the \"default\" keyword to the index of the value to display by default from the \"values\" keyword.\r\n```py\r\nclass LabeledCombobox(Labeler, ActiveCombobox):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, labelside: str = 'left', is_child: bool = False, widgetargs={}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Combobox to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Combobox. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Combobox. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Combobox value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Combobox value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiCombobox<a name=\"mark61\"></a>[^](#mark58)\r\n**Labeled MultiWidget LabeledCombobox.**\r\n\r\nUsed when you need mutiple, vertically stacked Labeled Comboboxes\r\n```py\r\nclass LabeledMultiCombobox(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Console Widgets<a name=\"mark62\"></a>[^](#mark17)\r\n\r\n### ConsoleWidget<a name=\"mark63\"></a>[^](#mark62)\r\n**Set labeltext, even if temporarily at init or the label widget will be ignored**\r\n\r\nUsed when you need to drop a console interface into an application. To write to the console call console.print(value). Pass a function as the \"command\" keyword argument to handle the entry input.\r\n```py\r\nclass ConsoleWidget(Labeler, Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str = 'Console: ', entrylabeltext: str = 'Command: ', labelside: str = 'top', button_text: str = 'Run', is_child: bool = False, **kwargs):\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef print(self, val, end: str = '\\n'):\r\n\t\t\"\"\"Prints a line to the console with a customizable line ending. `Returns None`\"\"\"\r\n```\r\n## Constraining Functions<a name=\"mark64\"></a>[^](#mark17)\r\n\r\n### check_entry_type<a name=\"mark65\"></a>[^](#mark64)\r\n> **Core type checker function. Limits entry to chars that construct a given type**\r\n> \r\n```python\r\ndef check_entry_type(val: str, typ: type) -> bool:\r\n> \t...\r\n```\r\n### check_entry_int<a name=\"mark66\"></a>[^](#mark64)\r\n> **Check if an entry input is a valid integer**\r\n> \r\n```python\r\ndef check_entry_int(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_float<a name=\"mark67\"></a>[^](#mark64)\r\n> **Check if an entry input is a valid float**\r\n> \r\n```python\r\ndef check_entry_float(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_contents<a name=\"mark68\"></a>[^](#mark64)\r\n> **Core content checker function. Limits entry to a list of chars ['a', 'b', 'c', ...] or     the chars contained in a simple string 'abc...'**\r\n> \r\n```python\r\ndef check_entry_contents(val: str, limiter: list | str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_lowercase<a name=\"mark69\"></a>[^](#mark64)\r\n> **Check if entry input is made only of lowercase ascii**\r\n> \r\n```python\r\ndef check_entry_ascii_lowercase(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_uppercase<a name=\"mark70\"></a>[^](#mark64)\r\n> **Check if entry input is made only of uppercase ascii**\r\n> \r\n```python\r\ndef check_entry_ascii_uppercase(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_letters<a name=\"mark71\"></a>[^](#mark64)\r\n> **Check if entry input is made only of uppercase and lowercase ascii**\r\n> \r\n```python\r\ndef check_entry_ascii_letters(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_digits<a name=\"mark72\"></a>[^](#mark64)\r\n> **Check if entry input is made only of digits**\r\n> \r\n```python\r\ndef check_entry_ascii_digits(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_uppercase_digits<a name=\"mark73\"></a>[^](#mark64)\r\n> **Check if entry input is made only of uppercase ascii and digits**\r\n> \r\n```python\r\ndef check_entry_ascii_uppercase_digits(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_lowercase_digits<a name=\"mark74\"></a>[^](#mark64)\r\n> **Check if entry input is made only of lowercase ascii and digits**\r\n> \r\n```python\r\ndef check_entry_ascii_lowercase_digits(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_hexdigits<a name=\"mark75\"></a>[^](#mark64)\r\n> **Check if entry input is made only of hexigits**\r\n> \r\n```python\r\ndef check_entry_ascii_hexdigits(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_octdigits<a name=\"mark76\"></a>[^](#mark64)\r\n> **Check if entry input is made only of octdigits**\r\n> \r\n```python\r\ndef check_entry_ascii_octdigits(val: str) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_letters_digits<a name=\"mark77\"></a>[^](#mark64)\r\n> **Check if entry input is made only of ascii lowercase, ascii uppercase, and digits**\r\n> \r\n```python\r\ndef check_entry_ascii_letters_digits(val) -> bool:\r\n> \t...\r\n```\r\n### check_entry_ascii_printable<a name=\"mark78\"></a>[^](#mark64)\r\n> **Check if entry input is made only of printable characters**\r\n> \r\n```python\r\ndef check_entry_ascii_printable(val: str) -> bool:\r\n> \t...\r\n```\r\n## Counter Widgets<a name=\"mark79\"></a>[^](#mark17)\r\n\r\n### Counter<a name=\"mark80\"></a>[^](#mark79)\r\n**Up / down counter widgets**\r\n\r\n```py\r\nclass Counter(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, default: int = 0, min_value: int = None, max_value: int = None, step: int = 1, state: str = 'normal', command: Callable = None, depth: int = 1, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> int:\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef enable(self) -> None:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: int, adjust: int = 0, no_command: bool = False) -> int:\r\n\t\t...\r\n```\r\n### FloatCounter<a name=\"mark81\"></a>[^](#mark79)\r\n**Float Counter Widget**\r\n\r\n```py\r\nclass FloatCounter(Frame):\r\n\tdef __init__(self, parent=<class 'tkinter.ttk.Frame'>, default: float = 0.0, min_value: float = None, max_value: float = None, step: float = 1.0, state: str = 'normal', command: Callable = None, decimal_level: int = 1, integer_level: int = 1, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> float:\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef enable(self) -> None:\r\n\t\t...\r\n\tdef get(self) -> float:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: float, adjust: float = 0.0) -> float:\r\n\t\t...\r\n```\r\n### LabeledCounter<a name=\"mark82\"></a>[^](#mark79)\r\n**Labeled Counter Widget**\r\n\r\n```py\r\nclass LabeledCounter(Labeler, Counter, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, command: Callable = None, labelside: str = 'left', is_child: bool = False, state: str = 'normal', widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> int:\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef enable(self) -> None:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: int, adjust: int = 0, no_command: bool = False) -> int:\r\n\t\t...\r\n```\r\n### LabeledFloatCounter<a name=\"mark83\"></a>[^](#mark79)\r\n**Labeled Float Counter Widget**\r\n\r\n```py\r\nclass LabeledFloatCounter(Labeler, FloatCounter, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, command: Callable = None, labelside: str = 'left', is_child: bool = False, state: str = 'normal', widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> float:\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef enable(self) -> None:\r\n\t\t...\r\n\tdef get(self) -> float:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: float, adjust: float = 0.0) -> float:\r\n\t\t...\r\n```\r\n### LabeledMultiCounter<a name=\"mark84\"></a>[^](#mark79)\r\n**Labeled MultiWidget LabeledCounter.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Counters\r\n```py\r\nclass LabeledMultiCounter(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LabeledMultiFloatCounter<a name=\"mark85\"></a>[^](#mark79)\r\n**Labeled MultiWidget Labeled FloatCounter.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled FloatCounters\r\n```py\r\nclass LabeledMultiFloatCounter(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Entry Widgets<a name=\"mark86\"></a>[^](#mark17)\r\n\r\n### ActiveEntry<a name=\"mark87\"></a>[^](#mark86)\r\n**Active ttk.Entry with added features and the SuperWidgetMixin**\r\n\r\n```py\r\nclass ActiveEntry(Entry, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, command: Callable = None, default: str = '', on_keystroke: bool = False, bind_enter: bool = True, bind_escape_clear: bool = True, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Entry value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### ScrolledEntry<a name=\"mark88\"></a>[^](#mark86)\r\n**Scrolled ttk.Entry with SuperWidgetMixin**\r\n\r\nThis class is here for completeness but most of the time you will want to use the ScrolledText widget. Used when you need a scrollable text entry box.\r\n```py\r\nclass ScrolledEntry(Scroller, ActiveEntry):\r\n\tdef __init__(self, parent, **kw) -> object:\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Entry value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledEntry<a name=\"mark89\"></a>[^](#mark86)\r\n**Labeled ActiveEntry**\r\n\r\nActiveEntry with Label\r\n```py\r\nclass LabeledEntry(Labeler, ActiveEntry):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, labelside: str = 'left', is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Entry value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiEntry<a name=\"mark90\"></a>[^](#mark86)\r\n**Labeled MultiWidget LabeledEntry**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Entries\r\n```py\r\nclass LabeledMultiEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LabeledButtonEntry<a name=\"mark91\"></a>[^](#mark86)\r\n**LabeledEntry with a ttk.Button on the right**\r\n\r\n```py\r\nclass LabeledButtonEntry(LabeledEntry):\r\n\tdef __init__(self, *args, button_text='', **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Entry value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiButtonEntry<a name=\"mark92\"></a>[^](#mark86)\r\n**Labeled MultiWidget Labeled ButtonEntry**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Entries\r\n```py\r\nclass LabeledMultiButtonEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LabeledPathEntry<a name=\"mark93\"></a>[^](#mark86)\r\n**LabeledEntry with a ttk.Button bound to a file- or folder-picker for easy     system path selection. Defaults to tk.filedialog.askopenfilename if no     tk.filedialog specified.**\r\n\r\n```py\r\nclass LabeledPathEntry(LabeledEntry):\r\n\tdef __init__(self, *args, button_text: str = '...', dialog=None, dialog_args: dict = {}, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Entry value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiPathEntry<a name=\"mark94\"></a>[^](#mark86)\r\n**Labeled MultiWidget LabeledPathEntry**\r\n\r\nUsed when you need multiple, vertically stacked LabeledPathEntries\r\n```py\r\nclass LabeledMultiPathEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### PasswordEntry<a name=\"mark95\"></a>[^](#mark86)\r\n**Username / Password Entry**\r\n\r\nA username/password entry widget with optional password peeking. Set password_char to `''` to show password by default. The provided command will always be called with the tuple `(username_entry.get(), password_entry.get())` as the only argument even if one of the entries is disabled.\r\n```py\r\nclass PasswordEntry(Frame):\r\n\tdef __init__(self, *args, instruction_text: str = '', username_text: str = 'Username: ', username_enabled: bool = True, password_text: str = 'Password: ', password_enabled: bool = True, button_text: str = 'Submit', command=<built-in function print>, password_char: str = '*', peek_enabled: bool = True, invert_peek_colors: bool = False, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get(self) -> tuple:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, values: tuple) -> None:\r\n\t\t...\r\n```\r\n### LabeledPasswordEntry<a name=\"mark96\"></a>[^](#mark86)\r\n**Labeled Username/Password entry**\r\n\r\n```py\r\nclass LabeledPasswordEntry(Labeler, PasswordEntry):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, *args, is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get(self) -> tuple:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, values: tuple) -> None:\r\n\t\t...\r\n```\r\n### LabeledMultiPasswordEntry<a name=\"mark97\"></a>[^](#mark86)\r\n**Labeled MultiWidget Labeled PasswordEntry**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Username/Password Entries\r\n```py\r\nclass LabeledMultiPasswordEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### ConstrainedEntry<a name=\"mark98\"></a>[^](#mark86)\r\n**Constrained ActiveEntry**\r\n\r\nAn Entry widget that allows certain constraints to be placed on the input with a given check_function that returns true if the input is allowed for each keystroke / input.\r\n```py\r\nclass ConstrainedEntry(ActiveEntry):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, check_function: Callable, return_type: type = <class 'str'>, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledConstrainedEntry<a name=\"mark99\"></a>[^](#mark86)\r\n**Labeled Constrained Entry**\r\n\r\n```py\r\nclass LabeledConstrainedEntry(Labeler, ConstrainedEntry):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, *args, is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiConstrainedEntry<a name=\"mark100\"></a>[^](#mark86)\r\n**Labeled Multi Constrained Entry**\r\n\r\n```py\r\nclass LabeledMultiConstrainedEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### IntEntry<a name=\"mark101\"></a>[^](#mark86)\r\n**Int Entry Widget**\r\n\r\n```py\r\nclass IntEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> int:\r\n\t\t\"\"\"Get IntEntry value, `Returns an Int`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledIntEntry<a name=\"mark102\"></a>[^](#mark86)\r\n**Labeled Int Entry Widget**\r\n\r\n```py\r\nclass LabeledIntEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> int:\r\n\t\t\"\"\"Get IntEntry value, `Returns an Int`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiIntEntry<a name=\"mark103\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiIntEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### FloatEntry<a name=\"mark104\"></a>[^](#mark86)\r\n```py\r\nclass FloatEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledFloatEntry<a name=\"mark105\"></a>[^](#mark86)\r\n```py\r\nclass LabeledFloatEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiFloatEntry<a name=\"mark106\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiFloatEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LowercaseEntry<a name=\"mark107\"></a>[^](#mark86)\r\n```py\r\nclass LowercaseEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledLowercaseEntry<a name=\"mark108\"></a>[^](#mark86)\r\n```py\r\nclass LabeledLowercaseEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiLowercaseEntry<a name=\"mark109\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiLowercaseEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### UppercaseEntry<a name=\"mark110\"></a>[^](#mark86)\r\n```py\r\nclass UppercaseEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledUppercaseEntry<a name=\"mark111\"></a>[^](#mark86)\r\n```py\r\nclass LabeledUppercaseEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiUppercaseEntry<a name=\"mark112\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiUppercaseEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LettersEntry<a name=\"mark113\"></a>[^](#mark86)\r\n```py\r\nclass LettersEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledLettersEntry<a name=\"mark114\"></a>[^](#mark86)\r\n```py\r\nclass LabeledLettersEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiLettersEntry<a name=\"mark115\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiLettersEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### DigitsEntry<a name=\"mark116\"></a>[^](#mark86)\r\n```py\r\nclass DigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledDigitsEntry<a name=\"mark117\"></a>[^](#mark86)\r\n```py\r\nclass LabeledDigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiDigitsEntry<a name=\"mark118\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiDigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### UppercaseDigitsEntry<a name=\"mark119\"></a>[^](#mark86)\r\n```py\r\nclass UppercaseDigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledUppercaseDigitsEntry<a name=\"mark120\"></a>[^](#mark86)\r\n```py\r\nclass LabeledUppercaseDigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiUppercaseDigitsEntry<a name=\"mark121\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiUppercaseDigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LowercaseDigitsEntry<a name=\"mark122\"></a>[^](#mark86)\r\n```py\r\nclass LowercaseDigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledLowercaseDigitsEntry<a name=\"mark123\"></a>[^](#mark86)\r\n```py\r\nclass LabeledLowercaseDigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiLowercaseDigitsEntry<a name=\"mark124\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiLowercaseDigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### LettersDigitsEntry<a name=\"mark125\"></a>[^](#mark86)\r\n```py\r\nclass LettersDigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledLettersDigitsEntry<a name=\"mark126\"></a>[^](#mark86)\r\n```py\r\nclass LabeledLettersDigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiLettersDigitsEntry<a name=\"mark127\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiLettersDigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### HexdigitsEntry<a name=\"mark128\"></a>[^](#mark86)\r\n```py\r\nclass HexdigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledHexdigitsEntry<a name=\"mark129\"></a>[^](#mark86)\r\n```py\r\nclass LabeledHexdigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiHexdigitsEntry<a name=\"mark130\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiHexdigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### OctdigitsEntry<a name=\"mark131\"></a>[^](#mark86)\r\n```py\r\nclass OctdigitsEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledOctdigitsEntry<a name=\"mark132\"></a>[^](#mark86)\r\n```py\r\nclass LabeledOctdigitsEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiOctdigitsEntry<a name=\"mark133\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiOctdigitsEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### PrintableEntry<a name=\"mark134\"></a>[^](#mark86)\r\n```py\r\nclass PrintableEntry(ConstrainedEntry):\r\n\tdef __init__(self, parent, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledPrintableEntry<a name=\"mark135\"></a>[^](#mark86)\r\n```py\r\nclass LabeledPrintableEntry(LabeledConstrainedEntry):\r\n\tdef __init__(self, parent, labeltext, *args, **kwargs):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set Entry value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Entry. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Entry. `Returns None`\"\"\"\r\n\tdef get(self) -> object:\r\n\t\t\"\"\"Get Entry value, return type varies based on Entry constraint.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set Entry value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiPrintableEntry<a name=\"mark136\"></a>[^](#mark86)\r\n```py\r\nclass LabeledMultiPrintableEntry(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Frame Widgets<a name=\"mark137\"></a>[^](#mark17)\r\n\r\n### ColumnFrame<a name=\"mark138\"></a>[^](#mark137)\r\n**A frame with a given number of children column ttk.Frames**\r\n\r\nTakes a number of columns or a list of names when the `labeled` keyword is set to True\r\n```py\r\nclass ColumnFrame(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, columns: int | list = 1, labeled=False, pack_args: dict = {}, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef yield_frame(self):\r\n\t\t\"\"\"Cyclically returns frames\"\"\"\r\n```\r\n### HamburgerFrame<a name=\"mark139\"></a>[^](#mark137)\r\n**A ttk.Frame with a Hamburger Menu and supporting widgets**\r\n\r\nOptions is an iterable in the form ((label, callback), (label2, callback2), ...). See examples/hamburger_demo.py for usage.\r\n```py\r\nclass HamburgerFrame(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: collections.abc.Iterable, menu_width: int = 300, column_style='Hamburger.TFrame', **kw):\r\n\t\t...\r\n\tdef close(self, event=None) -> None:\r\n\t\t\"\"\"Closes the menu. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef open(self, event=None) -> None:\r\n\t\t\"\"\"Opens the menu. `Returns None`\"\"\"\r\n```\r\n## KeyPad Widgets<a name=\"mark140\"></a>[^](#mark17)\r\n\r\n### KeypadButton<a name=\"mark141\"></a>[^](#mark140)\r\n**Base Keypad Button**\r\n\r\nKeypad button that automatically packs itself based on given coordinates. This object is not usually directly instantiated.\r\n```py\r\nclass KeypadButton(Button):\r\n\tdef __init__(self, frame: tkinter.ttk.Frame, value: int, coords: tuple, command: Callable):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### BaseKeypad<a name=\"mark142\"></a>[^](#mark140)\r\n**Base Keypad Class**\r\n\r\nEither instantiate directly with a custom layout or subclass with each subclass supplying a custom layout for more keypads. Subclass KeypadButton and supply the class as the \"button_type\" kwarg for custom buttons.\r\n```py\r\nclass BaseKeypad(Frame):\r\n\tdef __init__(self, layout, command, button_class=<class 'src.py_simple_ttk.widgets.KeyPadWidgets.KeypadButton'>, *args, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### DialerKeypad<a name=\"mark143\"></a>[^](#mark140)\r\n**Phone Dialer Keypad**\r\n\r\nExample 12-button keypad, subclass BaseKeypad and supply a custom layout for more keypads.\r\n```py\r\nclass DialerKeypad(BaseKeypad):\r\n\tdef __init__(self, command: Callable, *args, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n## Label Widgets<a name=\"mark144\"></a>[^](#mark17)\r\n\r\n### ActiveLabel<a name=\"mark145\"></a>[^](#mark144)\r\n**Active ttk.Entry with added features and the SuperWidgetMixin**\r\n\r\n```py\r\nclass ActiveLabel(Label, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, command: Callable = None, default: str = '', widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set label value to default, empty unless default set. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable label updates. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable label updates. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get label value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set label value. `Returns None`\"\"\"\r\n```\r\n### LabeledValue<a name=\"mark146\"></a>[^](#mark144)\r\n**A pair of ActiveLabels in a frame acting as a label and value pair with the label in bold**\r\n\r\n```py\r\nclass LabeledValue(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, label_text: str = None, value_text: str = None, label_config: dict = {}, value_config: dict = {}, *args, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Returns the label's and value's texts separated by a space. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: tuple):\r\n\t\t\"\"\"Set the label and value from two text strings in a tuple like (\"label:\", \"value\"). `Returns None`\"\"\"\r\n```\r\n## Labeler Widget<a name=\"mark147\"></a>[^](#mark17)\r\n\r\n### ActiveButton<a name=\"mark148\"></a>[^](#mark147)\r\n**ttk.Button with added features**\r\n\r\n```py\r\nclass ActiveButton(Button, SuperWidgetMixin):\r\n\tdef __init__(self, parent, default: str = '', command: Callable = None, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set button text to default\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledButton<a name=\"mark149\"></a>[^](#mark147)\r\n**Labeled ActiveButton widget**\r\n\r\n```py\r\nclass LabeledButton(Labeler, ActiveButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, command: Callable = '', default: str = '', is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Set button text to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledMultiButton<a name=\"mark150\"></a>[^](#mark147)\r\n**Labeled MultiWidget LabeledButton.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled ActiveButtons\r\n```py\r\nclass LabeledMultiButton(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### CycleButton<a name=\"mark151\"></a>[^](#mark147)\r\n**ActiveButton that cycles through options on each click**\r\n\r\n```py\r\nclass CycleButton(ActiveButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: list, default: int = 0, command: Callable = None, **kw):\r\n\t\t...\r\n\tdef clear(self, event=None):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledCycleButton<a name=\"mark152\"></a>[^](#mark147)\r\n**Labeled CycleButton widget**\r\n\r\n```py\r\nclass LabeledCycleButton(Labeler, CycleButton):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, options: list, is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self, event=None):\r\n\t\t...\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable button\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable button\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get button text\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set button text\"\"\"\r\n```\r\n### LabeledMultiCycleButton<a name=\"mark153\"></a>[^](#mark147)\r\n**Labeled MultiWidget LabeledCycleButton**\r\n\r\nUsed when you need multiple, vertically stacked Labeled CycleButtons\r\n```py\r\nclass LabeledMultiCycleButton(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## ListBox Widgets<a name=\"mark154\"></a>[^](#mark17)\r\n\r\n### ScrolledListBox<a name=\"mark155\"></a>[^](#mark154)\r\n**Scrolled Listbox with SuperWidget mixin**\r\n\r\n```py\r\nclass ScrolledListBox(Scroller, Listbox, SuperWidgetMixin):\r\n\tdef __init__(self, parent, **kw) -> object:\r\n\t\t...\r\n\tdef activate(self, index):\r\n\t\t\"\"\"Activate item identified by INDEX.\"\"\"\r\n\tdef add(self, val: str) -> None:\r\n\t\t\"\"\"Add an item to the end of the Listbox. `Returns None`\"\"\"\r\n\tdef add_list(self, items: list) -> None:\r\n\t\t\"\"\"Add a list of items to the end of the Listbox. `Returns None`\"\"\"\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clear Listbox. `Returns None`\"\"\"\r\n\tdef curselection(self):\r\n\t\t\"\"\"Return the indices of currently selected item.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self):\r\n\t\t\"\"\"Disable Listbox. `Returns None`\"\"\"\r\n\tdef enable(self):\r\n\t\t\"\"\"Disable Listbox. `Returns None`\"\"\"\r\n\tdef get(self, first, last=None):\r\n\t\t\"\"\"Get list of items from FIRST to LAST (included).\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### OrderedListbox<a name=\"mark156\"></a>[^](#mark154)\r\n**A Scrolled Re-Orderable Listbox with SuperWidget mixin**\r\n\r\nUsed when you need a re-orderable listbox for list arrangement etc. \"selectmode\" can only be \"single\" for this Widget.\r\n```py\r\nclass OrderedListbox(ScrolledListBox):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, **kw):\r\n\t\t...\r\n\tdef activate(self, index):\r\n\t\t\"\"\"Activate item identified by INDEX.\"\"\"\r\n\tdef add(self, val: str) -> None:\r\n\t\t\"\"\"Add an item to the end of the Listbox. `Returns None`\"\"\"\r\n\tdef add_list(self, items: list) -> None:\r\n\t\t\"\"\"Add a list of items to the end of the Listbox. `Returns None`\"\"\"\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clear Listbox. `Returns None`\"\"\"\r\n\tdef curselection(self):\r\n\t\t\"\"\"Return the indices of currently selected item.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self):\r\n\t\t\"\"\"Disable Listbox. `Returns None`\"\"\"\r\n\tdef enable(self):\r\n\t\t\"\"\"Disable Listbox. `Returns None`\"\"\"\r\n\tdef get(self, first, last=None):\r\n\t\t\"\"\"Get list of items from FIRST to LAST (included).\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### ListManipulator<a name=\"mark157\"></a>[^](#mark154)\r\n```py\r\nclass ListManipulator(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, disable_entry: bool = False, load_button_text: str = 'Load', load_button_width: int = 6, clear_button_text='Clear', clear_button_width: int = 6, add_button_text: str = 'Add>', add_button_width: int = 6, listbox_height: int = 7, entry_text: str = 'Add item', **kwargs):\r\n\t\t...\r\n\tdef add(self, val: str) -> None:\r\n\t\t\"\"\"Add an item to the listbox. `Returns None`\"\"\"\r\n\tdef add_list(self, *args) -> None:\r\n\t\t\"\"\"Add a list to the listbox. `Returns None`\"\"\"\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clear Entry and Listbox. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Listbox, Entry, and Buttons. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Listbox, Entry, and Buttons. `Returns None`\"\"\"\r\n\tdef get(self) -> list:\r\n\t\t\"\"\"Get the list of items in the listbox. `Returns a list`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef load(self) -> None:\r\n\t\t\"\"\"Load file, clear Listbox, insert each line from file into listbox. `Returns None`\"\"\"\r\n```\r\n### Table<a name=\"mark158\"></a>[^](#mark154)\r\n**Listboxes bound to scroll in union. Additional bindings will be needed in order to handle clicking.**\r\n\r\nTested on Mac/Windows/Linux. In most cases a TreeTable widget will be superior to this.\r\n```py\r\nclass Table(Frame):\r\n\tdef __init__(self, *args, min_column_width: int = 100, start_column_width: int = 100, on_selection: Callable = None, visible_rows=0, **kw):\r\n\t\t...\r\n\tdef build(self, contents: dict) -> None:\r\n\t\t\"\"\"Rebuild the table\"\"\"\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clears the table\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef get(self) -> list:\r\n\t\t\"\"\"Gets the currently selected items from the table. `Returns a List of Strings`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef use_style(self, style: tkinter.ttk.Style) -> None:\r\n\t\t\"\"\"Update to match supplied ttk.Style object. `Returns None`\"\"\"\r\n```\r\n## OptionMenu Widgets<a name=\"mark159\"></a>[^](#mark17)\r\n\r\n### ActiveOptionMenu<a name=\"mark160\"></a>[^](#mark159)\r\n**ttk.OptionMenu with added features and SuperWidgetMixin**\r\n\r\n```py\r\nclass ActiveOptionMenu(OptionMenu, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: list, default: int = 0, on_keystroke: bool = False, bind_enter: bool = True, bind_escape_clear: bool = True, command: Callable = None, widgetargs: dict = {}):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets OptionMenu to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this widget and its associated variable.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable OptionMenu. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable OptionMenu. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get OptionMenu value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set OptionMenu value. `Returns None`\"\"\"\r\n\tdef set_menu(self, default=None, *values):\r\n\t\t\"\"\"Build a new menu of radiobuttons with *values and optionally a default value.\"\"\"\r\n```\r\n### LabeledOptionMenu<a name=\"mark161\"></a>[^](#mark159)\r\n**Labeled ActiveOptionMenu**\r\n\r\n```py\r\nclass LabeledOptionMenu(Labeler, ActiveOptionMenu):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, *args, is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets OptionMenu to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this widget and its associated variable.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable OptionMenu. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable OptionMenu. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get OptionMenu value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val) -> None:\r\n\t\t\"\"\"Set OptionMenu value. `Returns None`\"\"\"\r\n\tdef set_menu(self, default=None, *values):\r\n\t\t\"\"\"Build a new menu of radiobuttons with *values and optionally a default value.\"\"\"\r\n```\r\n### LabeledMultiOptionMenu<a name=\"mark162\"></a>[^](#mark159)\r\n**Labeled MultiWidget LabeledOptionMenu**\r\n\r\n```py\r\nclass LabeledMultiOptionMenu(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## ProgressBar Widgets<a name=\"mark163\"></a>[^](#mark17)\r\n\r\n### ActiveProgressbar<a name=\"mark164\"></a>[^](#mark163)\r\n**ttk.Progressbar with added features**\r\n\r\n```py\r\nclass ActiveProgressbar(Progressbar):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, default: float = 0, **kw):\r\n\t\t...\r\n\tdef clear(self):\r\n\t\t\"\"\"Sets Progressbar progress to its default value `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self):\r\n\t\t\"\"\"Enable Progressbar. `Returns None`\"\"\"\r\n\tdef enable(self):\r\n\t\t\"\"\"Disable Progressbar. `Returns None`\"\"\"\r\n\tdef get(self):\r\n\t\t\"\"\"Set Progressbar progress. `Returns None`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef link(self, widget):\r\n\t\t\"\"\"Easily link to other widgets, sets the progressbar var to the passed widget's var. `Returns None`\"\"\"\r\n\tdef set(self, val):\r\n\t\t\"\"\"Get Progressbar progress. `Returns a String`\"\"\"\r\n\tdef start(self, interval=None):\r\n\t\t\"\"\"Begin autoincrement mode: schedules a recurring timer event that calls method step every interval milliseconds. interval defaults to 50 milliseconds (20 steps/second) if omitted.\"\"\"\r\n\tdef step(self, amount=None):\r\n\t\t\"\"\"Increments the value option by amount. amount defaults to 1.0 if omitted.\"\"\"\r\n\tdef stop(self):\r\n\t\t\"\"\"Stop autoincrement mode: cancels any recurring timer event initiated by start.\"\"\"\r\n```\r\n### LabeledProgressbar<a name=\"mark165\"></a>[^](#mark163)\r\n**Labeled Progressbar**\r\n\r\n```py\r\nclass LabeledProgressbar(Labeler, ActiveProgressbar):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, orient='horizontal', labelside='left', is_child=False, default: float = 0, **kw):\r\n\t\t...\r\n\tdef clear(self):\r\n\t\t\"\"\"Sets Progressbar progress to its default value `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self):\r\n\t\t\"\"\"Enable Progressbar. `Returns None`\"\"\"\r\n\tdef enable(self):\r\n\t\t\"\"\"Disable Progressbar. `Returns None`\"\"\"\r\n\tdef get(self):\r\n\t\t\"\"\"Set Progressbar progress. `Returns None`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef link(self, widget):\r\n\t\t\"\"\"Easily link to other widgets, sets the progressbar var to the passed widget's var. `Returns None`\"\"\"\r\n\tdef set(self, val):\r\n\t\t\"\"\"Get Progressbar progress. `Returns a String`\"\"\"\r\n\tdef start(self, interval=None):\r\n\t\t\"\"\"Begin autoincrement mode: schedules a recurring timer event that calls method step every interval milliseconds. interval defaults to 50 milliseconds (20 steps/second) if omitted.\"\"\"\r\n\tdef step(self, amount=None):\r\n\t\t\"\"\"Increments the value option by amount. amount defaults to 1.0 if omitted.\"\"\"\r\n\tdef stop(self):\r\n\t\t\"\"\"Stop autoincrement mode: cancels any recurring timer event initiated by start.\"\"\"\r\n```\r\n### LabeledMultiProgressbar<a name=\"mark166\"></a>[^](#mark163)\r\n**Labeled MultiWidget LabeledProgressbar**\r\n\r\n```py\r\nclass LabeledMultiProgressbar(Labeler, Frame, MultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside='top', orient='horizontal'):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args, kwargs, widget_type=None) -> object:\r\n\t\t\"\"\"Overrides normal MultiWidgetMixin behavior to deal with vertical orientation. Will break most added widgets `Returns None`\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef link(self, config: dict) -> None:\r\n\t\t\"\"\"Link to other widgets with a dict of subwidget keys to link to. This function will break if widgets without the link method are added to the MultiWidget. `Returns None`\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Radiobutton Widgets<a name=\"mark167\"></a>[^](#mark17)\r\n\r\n### ActiveRadiobutton<a name=\"mark168\"></a>[^](#mark167)\r\n**ttk.Radiobutton with added features and the SuperWidgetMixin**\r\n\r\n```py\r\nclass ActiveRadiobutton(Radiobutton, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, text: str, value: str, variable: tkinter.StringVar | tkinter.IntVar | tkinter.DoubleVar, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef enable(self) -> None:\r\n\t\t...\r\n\tdef get(self) -> bool:\r\n\t\t\"\"\"`Returns a bool if the button is clicked`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str | int | float) -> None:\r\n\t\t\"\"\"Set value, input type varies base on tk variable type. `Returns None`\"\"\"\r\n```\r\n### RadioTable<a name=\"mark169\"></a>[^](#mark167)\r\n**A table of ttk.RadioButtons**\r\n\r\n```py\r\nclass RadioTable(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: tuple, default: int = 0, variable_type: type = <class 'tkinter.StringVar'>, state: str = 'normal', columns: int = 1, pack_args: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Radiobutton to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Radiobutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Radiobutton. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Radiobutton value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Radiobutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledRadioTable<a name=\"mark170\"></a>[^](#mark167)\r\n**Labeled RadioTable widget**\r\n\r\n```py\r\nclass LabeledRadioTable(Labeler, RadioTable):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Radiobutton to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Radiobutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Radiobutton. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Radiobutton value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Radiobutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiRadioTable<a name=\"mark171\"></a>[^](#mark167)\r\n**Labeled MultiWidget LabeledRadioTable**\r\n\r\nUsed when you need multiple, vertically stacked LabeledRadioTables\r\n```py\r\nclass LabeledMultiRadioTable(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n### SimpleRadioTable<a name=\"mark172\"></a>[^](#mark167)\r\n**A simplified RadioTable where the text is used at the value.**\r\n\r\nUses a tk.StringVar variable type only. Takes a tuple in the form `(value1, value2, ...)`\r\n```py\r\nclass SimpleRadioTable(RadioTable):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, options: tuple, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Radiobutton to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Radiobutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Radiobutton. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Radiobutton value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Radiobutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledSimpleRadioTable<a name=\"mark173\"></a>[^](#mark167)\r\n**Labeled SimpleRadioTable widget**\r\n\r\n```py\r\nclass LabeledSimpleRadioTable(Labeler, SimpleRadioTable):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, options: list, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Radiobutton to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Radiobutton. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Radiobutton. `Returns None`\"\"\"\r\n\tdef get(self) -> str:\r\n\t\t\"\"\"Get Radiobutton value. `Returns a String`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set Radiobutton value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiSimpleRadioTable<a name=\"mark174\"></a>[^](#mark167)\r\n**Labeled MultiWidget LabeledSimpleRadioTable**\r\n\r\nUsed when you need multiple, vertically stacked LabeledSimpleRadioTables\r\n```py\r\nclass LabeledMultiSimpleRadioTable(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Scale Widgets<a name=\"mark175\"></a>[^](#mark17)\r\n\r\n### ActiveScale<a name=\"mark176\"></a>[^](#mark175)\r\n**ttk.Scale with added features and the SuperWidget mixin**\r\n\r\n```py\r\nclass ActiveScale(Scale, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, command: Callable = None, default: float = 0, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Scale to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Scale. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Scale. `Returns None`\"\"\"\r\n\tdef get(self) -> float:\r\n\t\t\"\"\"Get Scale value. `Returns a Float`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: float) -> None:\r\n\t\t\"\"\"Set Scale value. `Returns None`\"\"\"\r\n```\r\n### LabeledScale<a name=\"mark177\"></a>[^](#mark175)\r\n**Labeled ActiveScale**\r\n\r\n```py\r\nclass LabeledScale(Labeler, ActiveScale):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, command: Callable = None, orient: bool = 'horizontal', is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Scale to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Enable Scale. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Disable Scale. `Returns None`\"\"\"\r\n\tdef get(self) -> float:\r\n\t\t\"\"\"Get Scale value. `Returns a Float`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: float) -> None:\r\n\t\t\"\"\"Set Scale value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiScale<a name=\"mark178\"></a>[^](#mark175)\r\n**Labeled MultiWidget Labeled Scale**\r\n\r\n```py\r\nclass LabeledMultiScale(Labeler, Frame, MultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside='top', orient='horizontal', command=None):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list, kwargs: dict, widget_type: type = None) -> object:\r\n\t\t\"\"\"Override MultiWidgetMixin for vertical orientation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Spinbox Widgets<a name=\"mark179\"></a>[^](#mark17)\r\n\r\n### ActiveSpinbox<a name=\"mark180\"></a>[^](#mark179)\r\n**Spinbox with added features**\r\n\r\n```py\r\nclass ActiveSpinbox(Spinbox, SuperWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, command: Callable = None, default: int = 0, on_keystroke: bool = False, bind_enter: bool = True, bind_escape_clear: bool = True, bind_mouse_wheel: bool = True, custom_values: bool = True, widgetargs: dict = {}, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Spinbox to its default value. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Spinbox. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Spinbox. `Returns None`\"\"\"\r\n\tdef get(self) -> int:\r\n\t\t\"\"\"Get Spinbox value. `Returns an Int`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: int) -> None:\r\n\t\t\"\"\"Set Spinbox value. `Returns None`\"\"\"\r\n```\r\n### LabeledSpinbox<a name=\"mark181\"></a>[^](#mark179)\r\n**Labeled Spinbox with the SuperWidget mixin**\r\n\r\n```py\r\nclass LabeledSpinbox(Labeler, ActiveSpinbox):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, labelside: str = 'left', is_child: bool = False, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Sets Spinbox to its default value. `Returns None`\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable Spinbox. `Returns None`\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Spinbox. `Returns None`\"\"\"\r\n\tdef get(self) -> int:\r\n\t\t\"\"\"Get Spinbox value. `Returns an Int`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: int) -> None:\r\n\t\t\"\"\"Set Spinbox value. `Returns None`\"\"\"\r\n```\r\n### LabeledMultiSpinbox<a name=\"mark182\"></a>[^](#mark179)\r\n**Labeled MultiWidget Spinbox.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled Spinboxes\r\n```py\r\nclass LabeledMultiSpinbox(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Text Widgets<a name=\"mark183\"></a>[^](#mark17)\r\n\r\n### ScrolledText<a name=\"mark184\"></a>[^](#mark183)\r\n**Scrolled Text with SuperWidget mixin**\r\n\r\nScrolled Text SuperWidget\r\n```py\r\nclass ScrolledText(Scroller, Text, SuperWidgetMixin):\r\n\tdef __init__(self, parent, **kw) -> object:\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Empties the text box. `Returns None`\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t...\r\n\tdef edit_undo(self):\r\n\t\t\"\"\"Undoes the last edit action If the undo option is true. An edit action is defined as all the insert and delete commands that are recorded on the undo stack in between two separators. Generates an error when the undo stack is empty. Does nothing when the undo option is false\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable Text box\"\"\"\r\n\tdef get(self, start: str = '1.0', end: str = 'end'):\r\n\t\t\"\"\"Returns the contents of the text box with optional start/end kwargs. `Returns a String`\"\"\"\r\n\tdef get_cursor(self):\r\n\t\t\"\"\"Get the current location of the cursor. `Returns None`\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef select_all(self, event=None) -> None:\r\n\t\t\"\"\"Selects all text. `Returns None`\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Sets the text. `Returns a String`\"\"\"\r\n\tdef window_create(self, index, cnf={}, **kw):\r\n\t\t\"\"\"Create a window at INDEX.\"\"\"\r\n```\r\n### CopyBox<a name=\"mark185\"></a>[^](#mark183)\r\n**Scrolled Text with \"Copy to Clipboard\" Button**\r\n\r\nA widget with a scrolled textbox and button that copies the textbox contents to the user's clipboard. Useful for form output, etc.\r\n```py\r\nclass CopyBox(Frame):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clear CopyBox Contents\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable CopyBox\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable CopyBox\"\"\"\r\n\tdef get(self) -> None:\r\n\t\t\"\"\"Get CopyBox contents\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set CopyBox Contents\"\"\"\r\n```\r\n### LabeledCopyBox<a name=\"mark186\"></a>[^](#mark183)\r\n**Labeled CopyBox widget**\r\n\r\n```py\r\nclass LabeledCopyBox(Labeler, CopyBox):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, is_child: bool = False, labelside: str = 'left', **kw):\r\n\t\t...\r\n\tdef clear(self) -> None:\r\n\t\t\"\"\"Clear CopyBox Contents\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self) -> None:\r\n\t\t\"\"\"Disable CopyBox\"\"\"\r\n\tdef enable(self) -> None:\r\n\t\t\"\"\"Enable CopyBox\"\"\"\r\n\tdef get(self) -> None:\r\n\t\t\"\"\"Get CopyBox contents\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, val: str) -> None:\r\n\t\t\"\"\"Set CopyBox Contents\"\"\"\r\n```\r\n### LabeledMultiCopyBox<a name=\"mark187\"></a>[^](#mark183)\r\n**Labeled MultiWidget CopyBox.**\r\n\r\nUsed when you need multiple, vertically stacked Labeled CopyBoxes\r\n```py\r\nclass LabeledMultiCopyBox(LabeledMultiWidgetMixin):\r\n\tdef __init__(self, parent: tkinter.ttk.Frame, labeltext: str, config: dict, is_child: bool = False, labelside: str = 'top', **kw):\r\n\t\t...\r\n\tdef add(self, parent: tkinter.ttk.Frame, key: str, args: list = [], kwargs: dict = {}, widget_type: type = None, fill: str = 'x', padx: tuple = (20, 0), pady: tuple = (5, 0), side: str = 'top', expand: bool = False) -> object:\r\n\t\t\"\"\"Method for adding different widgets to a multiwidget post-instantiation\"\"\"\r\n\tdef clear(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to clear or all are set to default\"\"\"\r\n\tdef clear_label_text(self) -> None:\r\n\t\t\"\"\"Clear a Labeled widget's Label text.\"\"\"\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to disable or all are disabled\"\"\"\r\n\tdef enable(self, config: list = None) -> None:\r\n\t\t\"\"\"Pass a list of subwidgets to enable or all are enabled\"\"\"\r\n\tdef get(self, config: list = None) -> dict:\r\n\t\t\"\"\"Pass a list of widget keys to get a dict of outputs\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set(self, config: dict) -> None:\r\n\t\t\"\"\"Pass a map of widget keys and their values\"\"\"\r\n```\r\n## Toplevel Widgets<a name=\"mark188\"></a>[^](#mark17)\r\n\r\n### FocusedToplevel<a name=\"mark189\"></a>[^](#mark188)\r\n**Base Focused Toplevel Class**\r\n\r\nWindow that takes focus and center's itself on the current window. Used as a base class for other windows.\r\n```py\r\nclass FocusedToplevel(Toplevel):\r\n\tdef __init__(self, *args, title: str = None, window: tkinter.Toplevel = None, on_close: Callable = None, **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### NoticeWindow<a name=\"mark190\"></a>[^](#mark188)\r\n**Provides the user with a notice.**\r\n\r\n`button_action` can call a function to help with determining acceptance vs. the user hitting the exit button.\r\n```py\r\nclass NoticeWindow(FocusedToplevel):\r\n\tdef __init__(self, *args, text: str = None, button_text: str = 'Continue', button_action: Callable = None, **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### YesNoCancelWindow<a name=\"mark191\"></a>[^](#mark188)\r\n**Provides the user with a yes/no/cancel option.**\r\n\r\n`no_destroy` can be set to `True` to allow the window to remain open after a selection is made.\r\n```py\r\nclass YesNoCancelWindow(FocusedToplevel):\r\n\tdef __init__(self, *args, text: str = None, yes_enabled: bool = True, on_yes: Callable = None, yes_text: str = 'Yes', no_enabled: bool = True, on_no: Callable = None, no_text: str = 'No', cancel_enabled: bool = True, on_cancel: Callable = None, cancel_text: str = 'Cancel', no_destroy: bool = False, focus: str = '', **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### PromptWindow<a name=\"mark192\"></a>[^](#mark188)\r\n**Prompts the user for a text input**\r\n\r\n`no_destroy` can be set to `True` to allow the window to remain open after a selection is made, useful for informing the user a string input was invalid via setting label_var. If the select_type kwarg is set to true the user will be prompted to select a data type (int / string) to return.\r\n```py\r\nclass PromptWindow(FocusedToplevel):\r\n\tdef __init__(self, *args, text: str = 'Enter Text:', on_yes=None, yes_text: str = 'Continue', on_cancel=None, cancel_text: str = 'Cancel', bind_enter: bool = True, no_destroy: bool = False, select_type: bool = False, focus='', **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### PasswordWindow<a name=\"mark193\"></a>[^](#mark188)\r\n**Password Entry window.**\r\n\r\nDemo Password Entry Window, you will want to copy the source for this widget and rewrite it.\r\n```py\r\nclass PasswordWindow(FocusedToplevel):\r\n\tdef __init__(self, window=None, **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### ListWindow<a name=\"mark194\"></a>[^](#mark188)\r\n**Window to select an option from a Scrolled Listbox**\r\n\r\n```py\r\nclass ListWindow(FocusedToplevel):\r\n\tdef __init__(self, *args, options: list, text: str = 'Select Item:', on_yes=None, yes_text: str = 'Continue', on_cancel=None, cancel_text: str = 'Cancel', no_destroy: bool = False, select_mode: str = 'single', **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n### TextWindow<a name=\"mark195\"></a>[^](#mark188)\r\n**Provides the user a cancelable Scrolled Text window**\r\n\r\n`no_destroy` can be set to `True` to allow the window to remain open after a submission is made. on_yes callback must take the text value as a String.\r\n```py\r\nclass TextWindow(FocusedToplevel):\r\n\tdef __init__(self, *args, text: str = 'Enter Text', on_yes: Callable = None, yes_text: str = 'Submit', on_cancel: Callable = None, cancel_text: str = 'Cancel', no_destroy: bool = False, focus: str = '', default: str = '', height: int = 32, width: int = 88, **kwargs):\r\n\t\t...\r\n\tdef destroy(self) -> None:\r\n\t\t...\r\n\tdef iconify(self):\r\n\t\t\"\"\"Display widget as icon.\"\"\"\r\n\tdef iconmask(self, bitmap=None):\r\n\t\t\"\"\"Set mask for the icon bitmap of this widget. Return the mask if None is given.\"\"\"\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n## Misc Widgets<a name=\"mark196\"></a>[^](#mark17)\r\n\r\n### ToolTip<a name=\"mark197\"></a>[^](#mark196)\r\n**Easy ToolTip**\r\n\r\nEasily show theme-friendly tooltip. Currently only left and right align are supported.\r\n```py\r\nclass ToolTip(ToolTipBase):\r\n\tdef __init__(self, parent: object, text: str, align: str = 'left'):\r\n\t\t...\r\n```\r\n### EasySizegrip<a name=\"mark198\"></a>[^](#mark196)\r\n**Sizegrip widget with bindings**\r\n\r\nAutomatically packs self and binds mouse presses for systems that don't bind automatically.\r\n```py\r\nclass EasySizegrip(Sizegrip):\r\n\tdef __init__(self, *args, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef disable(self):\r\n\t\t...\r\n\tdef enable(self):\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n```\r\n# SuperLib.utils<a name=\"mark199\"></a>[^](#mark0)\r\n\r\n## Utils<a name=\"mark200\"></a>[^](#mark199)\r\n\r\n### check_if_module_installed<a name=\"mark201\"></a>[^](#mark200)\r\n> **Indicates if a packages is installed. `Returns a Boolean`**\r\n> \r\n```python\r\ndef check_if_module_installed(package: str) -> bool:\r\n> \t...\r\n```\r\n### check_string_contains<a name=\"mark202\"></a>[^](#mark200)\r\n> **Returns `(True, char_index)` if any character from the list exists in the string otherwise returns `(False, None)`**\r\n> \r\n```python\r\ndef check_string_contains(string: str, contains_list: tuple) -> tuple:\r\n> \t...\r\n```\r\n### dummy_function<a name=\"mark203\"></a>[^](#mark200)\r\n> **Dummy function that nicely prints out any passed args and kwargs. `Returns True`**\r\n> \r\n```python\r\ndef dummy_function(*args, **kwargs) -> bool:\r\n> \t...\r\n```\r\n### get_friendly_time<a name=\"mark204\"></a>[^](#mark200)\r\n> **Gets a time string in one of several modes. Modes: `all, time, date, nice_date`. `Returns a String`**\r\n> \r\n```python\r\ndef get_friendly_time(timestamp, mode: str = 'all') -> str:\r\n> \t...\r\n```\r\n### get_unix_timestamp<a name=\"mark205\"></a>[^](#mark200)\r\n> **Get a unix timestamp. `Returns a Float`**\r\n> \r\n```python\r\ndef get_unix_timestamp() -> float:\r\n> \t...\r\n```\r\n### get_unix_timestring<a name=\"mark206\"></a>[^](#mark200)\r\n> **Get a unix timestring. `Returns a String`**\r\n> \r\n```python\r\ndef get_unix_timestring() -> str:\r\n> \t...\r\n```\r\n### get_user_home_folder<a name=\"mark207\"></a>[^](#mark200)\r\n> **Cross-platform function to get a user's home folder**\r\n> \r\n```python\r\ndef get_user_home_folder() -> str:\r\n> \t...\r\n```\r\n### open_folder_in_explorer<a name=\"mark208\"></a>[^](#mark200)\r\n> **Cross-platform way to open a folder in the default file manager for a system**\r\n> \r\n```python\r\ndef open_folder_in_explorer(path) -> None:\r\n> \t...\r\n```\r\n### sort_dict_by_keys<a name=\"mark209\"></a>[^](#mark200)\r\n> **Sorts a dictionary by its keys**\r\n> \r\n```python\r\ndef sort_dict_by_keys(source: dict, reverse: bool = False) -> collections.OrderedDict:\r\n> \t...\r\n```\r\n### timer_decorator<a name=\"mark210\"></a>[^](#mark200)\r\n> **Decorator to add timing to a function**\r\n> \r\n```python\r\ndef timer_decorator(func: Callable) -> None:\r\n> \t...\r\n```\r\n## File Generators<a name=\"mark211\"></a>[^](#mark199)\r\n\r\n### HTML_Generator<a name=\"mark212\"></a>[^](#mark211)\r\n```py\r\nclass HTML_Generator(object):\r\n\tdef __init__(self, indent='\\t'):\r\n\t\t...\r\n\tdef add_body_line(self, text=''):\r\n\t\t...\r\n\tdef add_bold(self, text=''):\r\n\t\t...\r\n\tdef add_center(self, text=''):\r\n\t\t...\r\n\tdef add_comment(self, text):\r\n\t\t...\r\n\tdef add_div(self, text=''):\r\n\t\t...\r\n\tdef add_divider(self):\r\n\t\t...\r\n\tdef add_list(self, items=[], ordered=False):\r\n\t\t...\r\n\tdef add_list_item(self, item: str):\r\n\t\t...\r\n\tdef add_paragraph(self, text=''):\r\n\t\t...\r\n\tdef assemble(self):\r\n\t\t...\r\n\tdef end_bold(self):\r\n\t\t...\r\n\tdef end_center(self):\r\n\t\t...\r\n\tdef end_div(self):\r\n\t\t...\r\n\tdef end_list(self, ordered=False):\r\n\t\t...\r\n\tdef end_paragraph(self):\r\n\t\t...\r\n\tdef get_indent(self, offset=0):\r\n\t\t...\r\n\tdef save(self, path):\r\n\t\t...\r\n\tdef start_bold(self, text=''):\r\n\t\t...\r\n\tdef start_center(self, text=''):\r\n\t\t...\r\n\tdef start_div(self, text=''):\r\n\t\t...\r\n\tdef start_list(self, items=[], ordered=False):\r\n\t\t...\r\n\tdef start_paragraph(self, text=''):\r\n\t\t...\r\n```\r\n### TXT_Generator<a name=\"mark213\"></a>[^](#mark211)\r\n```py\r\nclass TXT_Generator(object):\r\n\tdef __init__(self, ):\r\n\t\t...\r\n\tdef add_body_line(self, text=''):\r\n\t\t...\r\n\tdef add_divider(self):\r\n\t\t...\r\n\tdef assemble(self):\r\n\t\t...\r\n\tdef save(self, path):\r\n\t\t...\r\n```\r\n### MD_Generator<a name=\"mark214\"></a>[^](#mark211)\r\n```py\r\nclass MD_Generator(object):\r\n\tdef __init__(self, title=None, footnote_title='Notes:', footnote_heading_level=2, numbered_toc=False):\r\n\t\t...\r\n\tdef add_blockquote(self, text, end='\\n\\n'):\r\n\t\t...\r\n\tdef add_bold(self, text, end='\\n\\n'):\r\n\t\t...\r\n\tdef add_bold_italic(self, text, end='\\n'):\r\n\t\t...\r\n\tdef add_break(self):\r\n\t\t...\r\n\tdef add_code_block(self, text, lang='', end='\\n'):\r\n\t\t...\r\n\tdef add_heading_1(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_heading_2(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_heading_3(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_heading_4(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_heading_5(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_heading_6(self, text, **kwargs):\r\n\t\t...\r\n\tdef add_horizontal_rule(self):\r\n\t\t...\r\n\tdef add_italic(self, text, end='\\n'):\r\n\t\t...\r\n\tdef add_link(self, link, text=None, tooltip=None):\r\n\t\t...\r\n\tdef add_multi_blockquote(self, texts):\r\n\t\t...\r\n\tdef add_ordered_list(self, texts, indent=0):\r\n\t\t...\r\n\tdef add_paragraph(self, text, end='\\n\\n'):\r\n\t\t...\r\n\tdef add_to_ordered_list(self, index, text, indent=0):\r\n\t\t...\r\n\tdef add_to_unordered_list(self, text, indent=0):\r\n\t\t...\r\n\tdef add_toc(self, title, end='\\n\\n'):\r\n\t\t...\r\n\tdef add_unordered_list(self, texts, indent=0):\r\n\t\t...\r\n\tdef assemble(self):\r\n\t\t...\r\n\tdef decrease_toc_depth(self):\r\n\t\t...\r\n\tdef get_prefix(self):\r\n\t\t...\r\n\tdef increase_toc_depth(self):\r\n\t\t...\r\n\tdef insert_footnote(self, text):\r\n\t\t...\r\n\tdef save(self, path):\r\n\t\t...\r\n\tdef set_slogan(self, slogan):\r\n\t\t...\r\n```\r\n## History Mixin<a name=\"mark215\"></a>[^](#mark199)\r\n\r\n### HistoryMixin<a name=\"mark216\"></a>[^](#mark215)\r\n**Abstract mixin to add history-tracking to an application**\r\n\r\nThis object is meant to be used as a mixin rather than instantiated directly most of the time.\r\n```py\r\nclass HistoryMixin(object):\r\n\tdef __init__(self, data):\r\n\t\t...\r\n\tdef add_history(self, data):\r\n\t\t...\r\n\tdef clear_history(self, data):\r\n\t\t...\r\n\tdef get_history_uid(self):\r\n\t\t...\r\n\tdef redo(self):\r\n\t\t...\r\n\tdef undo(self):\r\n\t\t...\r\n```\r\n## Color Functions<a name=\"mark217\"></a>[^](#mark199)\r\n\r\n### reduce_255<a name=\"mark218\"></a>[^](#mark217)\r\n> **Limits a val to a range of 0 to 255**\r\n> \r\n```python\r\ndef reduce_255(in_value: int, maxval: int = 255) -> int:\r\n> \t...\r\n```\r\n### rgb_to_hex<a name=\"mark219\"></a>[^](#mark217)\r\n> **Converts an rgb tuple to hex**\r\n> \r\n```python\r\ndef rgb_to_hex(rgb: tuple) -> str:\r\n> \t...\r\n```\r\n### rgba_to_hex<a name=\"mark220\"></a>[^](#mark217)\r\n> **Converts an rgba tuple to rgba hex**\r\n> \r\n```python\r\ndef rgba_to_hex(rgba: tuple) -> str:\r\n> \t...\r\n```\r\n### hex_to_rgb<a name=\"mark221\"></a>[^](#mark217)\r\n> **Converts hex to rgb tuple**\r\n> \r\n```python\r\ndef hex_to_rgb(hex: str) -> tuple:\r\n> \t...\r\n```\r\n### hex_to_rgba<a name=\"mark222\"></a>[^](#mark217)\r\n> **Tries to convert rgba hex to rgba, on failure converts rgb hex to rgb and sets a full opacity**\r\n> \r\n```python\r\ndef hex_to_rgba(hex: str) -> tuple:\r\n> \t...\r\n```\r\n### get_gradient<a name=\"mark223\"></a>[^](#mark217)\r\n> **Generates a black / white gradient with a given number of steps**\r\n> \r\n```python\r\ndef get_gradient(steps: int) -> tuple:\r\n> \t...\r\n```\r\n### rgb_to_scalar<a name=\"mark224\"></a>[^](#mark217)\r\n> **Converts an rgb itterable to scalar list**\r\n> \r\n```python\r\ndef rgb_to_scalar(rgb: tuple) -> tuple:\r\n> \t...\r\n```\r\n### scalar_to_rgb<a name=\"mark225\"></a>[^](#mark217)\r\n> **Converts rgb scalar to rgb list**\r\n> \r\n```python\r\ndef scalar_to_rgb(rgb: tuple) -> tuple:\r\n> \t...\r\n```\r\n### linear_gradient<a name=\"mark226\"></a>[^](#mark217)\r\n> **Generates a linear gradient between two colors, accepts html hex or rgb formats**\r\n> \r\n```python\r\ndef linear_gradient(start_hex: str = '#000000', finish_hex: str = '#FFFFFF', n: int = 10) -> list:\r\n> \t...\r\n```\r\n### get_rainbow<a name=\"mark227\"></a>[^](#mark217)\r\n> **Generates a rainbow with a given number of steps. Steps must be divisible by 4)**\r\n> \r\n```python\r\ndef get_rainbow(steps: int) -> tuple:\r\n> \t...\r\n```\r\n# MegaWidgets<a name=\"mark228\"></a>[^](#mark0)\r\n\r\n## Notes MegaWidget<a name=\"mark229\"></a>[^](#mark228)\r\n\r\n### NotesTab<a name=\"mark230\"></a>[^](#mark229)\r\n```py\r\nclass NotesTab(Tab):\r\n\tdef __init__(self, notebook, app):\r\n\t\t...\r\n\tdef copy_note(self, note):\r\n\t\t...\r\n\tdef delete_note(self, note):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef export_note_html(self, note):\r\n\t\t...\r\n\tdef export_note_json(self, note):\r\n\t\t...\r\n\tdef export_note_markdown(self, note):\r\n\t\t...\r\n\tdef export_note_text(self, note):\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef load_notes(self):\r\n\t\t...\r\n\tdef make_new_note(self, title):\r\n\t\t...\r\n\tdef new_note(self, event=None):\r\n\t\t...\r\n\tdef on_toplevel_destroy(self, *args):\r\n\t\t\"\"\"Function for toplevels to call on no / cancel\"\"\"\r\n\tdef reload_notes(self):\r\n\t\t...\r\n\tdef rename_note(self, note):\r\n\t\t...\r\n\tdef start_new_note(self, title=None):\r\n\t\t...\r\n```\r\n## Conversation MegaWidget<a name=\"mark231\"></a>[^](#mark228)\r\n\r\n### ConversationsTab<a name=\"mark232\"></a>[^](#mark231)\r\n```py\r\nclass ConversationsTab(Tab):\r\n\tdef __init__(self, notebook, app):\r\n\t\t...\r\n\tdef copy_conversation(self, conversation):\r\n\t\t...\r\n\tdef delete_conversation(self, conversation):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef export_conversation_html(self, conversation):\r\n\t\t...\r\n\tdef export_conversation_json(self, conversation):\r\n\t\t...\r\n\tdef export_conversation_markdown(self, conversation):\r\n\t\t...\r\n\tdef export_conversation_text(self, conversation):\r\n\t\t...\r\n\tdef get_cached_icon(self, size, color, char):\r\n\t\t...\r\n\tdef get_user_icon(self, user):\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef load_conversations(self):\r\n\t\t...\r\n\tdef make_new_conversation(self, title):\r\n\t\t...\r\n\tdef new_conversation(self, event=None):\r\n\t\t...\r\n\tdef on_toplevel_destroy(self, *args):\r\n\t\t\"\"\"Function for toplevels to call on no / cancel\"\"\"\r\n\tdef reload_conversations(self):\r\n\t\t...\r\n\tdef rename_conversation(self, conversation):\r\n\t\t...\r\n\tdef start_new_conversation(self, title=None):\r\n\t\t...\r\n```\r\n## Profile Management<a name=\"mark233\"></a>[^](#mark228)\r\n\r\n### ProfilesSystem<a name=\"mark234\"></a>[^](#mark233)\r\n```py\r\nclass ProfilesSystem(object):\r\n\tdef __init__(self, select_profile_actions: list = [], refresh_profiles_actions: list = [], profiles_dir: str = 'C:\\\\Users\\\\arcti\\\\GitHub\\\\py_simple_ttk\\\\Profiles', handle_duplicates: bool = True):\r\n\t\t...\r\n\tdef add_refresh_profiles_action(self, action: Callable) -> None:\r\n\t\t\"\"\"Add an action to the profiles list refresh actions\"\"\"\r\n\tdef add_refresh_profiles_actions(self, actions: list) -> None:\r\n\t\t\"\"\"Add a list of actions to the profiles list refresh actions\"\"\"\r\n\tdef add_select_profile_action(self, action: Callable) -> None:\r\n\t\t\"\"\"Add an action to the profile switch actions\"\"\"\r\n\tdef add_select_profile_actions(self, actions: list) -> None:\r\n\t\t\"\"\"Add a list of actions to the profile switch actions\"\"\"\r\n\tdef check_if_name_exists_in_profiles(self, name: str, profiles: list = None) -> bool:\r\n\t\t\"\"\"Check if a name exists in a list of profiles, if no list is provided uses the list of all profiles. `Returns a Bool`\"\"\"\r\n\tdef clear_refresh_profile_actions(self, new: list = []) -> None:\r\n\t\t\"\"\"Clear out the profiles list refresh actions, optionally replacing them with new ones\"\"\"\r\n\tdef clear_select_profile_actions(self, new: list = []) -> None:\r\n\t\t\"\"\"Clear out the profile switch actions, optionally replacing them with new ones\"\"\"\r\n\tdef create_profile(self, name: str) -> src.py_simple_ttk.utils.ProfilesSystem.UserProfile:\r\n\t\t\"\"\"Creates a profile with a given name. `Raises ValueError` if the profile name already exists. `Returns a UserProfile`\"\"\"\r\n\tdef delete_profile(self, profile: src.py_simple_ttk.utils.ProfilesSystem.UserProfile) -> None:\r\n\t\t...\r\n\tdef get_last_used_profile(self, profiles: list = None) -> src.py_simple_ttk.utils.ProfilesSystem.UserProfile:\r\n\t\t\"\"\"Returns the most recently accessed profile\"\"\"\r\n\tdef get_profile_by_username(self, name: str) -> src.py_simple_ttk.utils.ProfilesSystem.UserProfile:\r\n\t\t...\r\n\tdef get_profile_names(self) -> list:\r\n\t\t\"\"\"Returns an alphabetically sorted list of profile names\"\"\"\r\n\tdef handle_duplicate_profile_names(self, name: str) -> None:\r\n\t\t\"\"\"Makes profile names unique if they have identical names. The most recently accessed profile (according to the file json) keeps its name untouched. `Returns None`\"\"\"\r\n\tdef handle_refresh_profiles_actions(self) -> None:\r\n\t\t\"\"\"Handle on-refresh-profiles actions\"\"\"\r\n\tdef handle_select_profile_actions(self) -> None:\r\n\t\t\"\"\"Handle on-profile-selection actions\"\"\"\r\n\tdef select_profile(self, profile: src.py_simple_ttk.utils.ProfilesSystem.UserProfile) -> None:\r\n\t\t\"\"\"Change the currently selected profile\"\"\"\r\n\tdef select_profile_by_username(self, name: str) -> None:\r\n\t\t...\r\n\tdef sort_profiles_by_accessed(self, profiles: list = None) -> None:\r\n\t\t\"\"\"Sort a list of profiles by last accessed, if no list is provided returns a sorted list of all profiles in the system. `Returns a List`\"\"\"\r\n```\r\n### UserProfile<a name=\"mark235\"></a>[^](#mark233)\r\n**A class to represent a User / User's Preferences**\r\n\r\nMust pass a unique username and a unique identifier for new profile.\r\n```py\r\nclass UserProfile(object):\r\n\tdef __init__(self, path: str, username: str = None, atomic: str = None):\r\n\t\t...\r\n\tdef clear_preferences(self, preferences: list = None) -> None:\r\n\t\t...\r\n\tdef get_preference(self, key: str) -> object:\r\n\t\t...\r\n\tdef load(self, path: str = None, overwrite_path: bool = False) -> None:\r\n\t\t...\r\n\tdef save(self, path: str = None, overwrite_path: bool = False) -> None:\r\n\t\t...\r\n\tdef set_preference(self, key: str, value: str) -> None:\r\n\t\t...\r\n\tdef set_username(self, name: str) -> None:\r\n\t\t...\r\n```\r\n### get_profiles_folder<a name=\"mark236\"></a>[^](#mark235)\r\n> **Gets the absolute path to the included profiles folder. `Returns a String`**\r\n> \r\n```python\r\ndef get_profiles_folder() -> str:\r\n> \t...\r\n```\r\n### get_profiles_list<a name=\"mark237\"></a>[^](#mark235)\r\n> **Gets a list of profile files at a given path. `Returns a List of Path strings`**\r\n> \r\n```python\r\ndef get_profiles_list(path: str = './Profiles', verbose: bool = False) -> list:\r\n> \t...\r\n```\r\n# PIL-Only Widgets and Functions<a name=\"mark238\"></a>[^](#mark0)\r\n\r\npy_simple_ttk has a number of widgets and functions only available when PIL is installed. By default, installing py_simple_ttk through pip does *NOT* install PIL. py_simple_ttk provides a method to check if PIL is available at runtime: `from py_simple_ttk import PILLOW_AVAILABLE` To enable PIL-only widgets run `pip install PIL`, when creating your own modules that use py_simple_ttk as a dependency ensure you add PIL to your project's requirements.txt / pyproject.toml file\r\n\r\n\r\n## PIL-Only Widgets<a name=\"mark239\"></a>[^](#mark0)\r\n\r\n### GifLoader<a name=\"mark240\"></a>[^](#mark239)\r\n```py\r\nclass GifLoader(object):\r\n\tdef __init__(self, path: str, defer_load: bool = False):\r\n\t\t...\r\n\tdef load_tk_frames(self) -> None:\r\n\t\t\"\"\"Called during instantiation unless defer_load was set to False\"\"\"\r\n```\r\n### GifViewer<a name=\"mark241\"></a>[^](#mark239)\r\n```py\r\nclass GifViewer(Frame):\r\n\tdef __init__(self, loader: src.py_simple_ttk.pillow_widgets.GifLoader.GifLoader, *args, **kwargs):\r\n\t\t...\r\n\tdef destroy(self):\r\n\t\t\"\"\"Destroy this and all descendants widgets.\"\"\"\r\n\tdef display_loop(self) -> None:\r\n\t\t...\r\n\tdef info_patchlevel(self):\r\n\t\t\"\"\"Returns the exact version of the Tcl library.\"\"\"\r\n\tdef set_delay(self, fps) -> None:\r\n\t\t...\r\n```\r\n## PIL-Only Functions<a name=\"mark242\"></a>[^](#mark0)\r\n\r\n### convert_image_to_blackandwhite<a name=\"mark243\"></a>[^](#mark242)\r\n> **Converts an image to black and white**\r\n> \r\n```python\r\ndef convert_image_to_blackandwhite(image: PIL.Image.Image) -> PIL.Image.Image:\r\n> \t...\r\n```\r\n### convert_image_to_grayscale<a name=\"mark244\"></a>[^](#mark242)\r\n> **Converts a PIL image to grayscale**\r\n> \r\n```python\r\ndef convert_image_to_grayscale(image: PIL.Image.Image) -> PIL.Image.Image:\r\n> \t...\r\n```\r\n### load_image_from_byte_array<a name=\"mark245\"></a>[^](#mark242)\r\n> **Converts a png encoded in bytes to a PIL Image**\r\n> \r\n```python\r\ndef load_image_from_byte_array(byte_array: bytes) -> PIL.Image.Image:\r\n> \t...\r\n```\r\n### load_tk_image_from_bytes_array<a name=\"mark246\"></a>[^](#mark242)\r\n> **Loads a png encoded in bytes to an image tkinter can process**\r\n> \r\n```python\r\ndef load_tk_image_from_bytes_array(bytes_array: bytes) -> PIL.ImageTk.PhotoImage:\r\n> \t...\r\n```\r\n### make_checkerboard<a name=\"mark247\"></a>[^](#mark242)\r\n> **Function to make a background checkerboard for displaying images on**\r\n> \r\n```python\r\ndef make_checkerboard(width: int, height: int, repeat: int = 14, color_1: tuple = (127, 127, 127, 255), color_2: tuple = (64, 64, 64, 255)) -> PIL.Image.Image:\r\n> \t...\r\n```\r\n# Changelog<a name=\"mark248\"></a>[^](#mark0)\r\n\r\n## 0.2.9<a name=\"mark249\"></a>[^](#mark248)\r\n\r\nAdd more scroller imports to toplevel namespace\r\n\r\n## 0.2.8<a name=\"mark250\"></a>[^](#mark248)\r\n\r\nAdd get_scaling and bind_mousewheel to toplevel namespace import. Fix theme defaulting to winnative to fix unix system crash when theme not configured in ini.json\r\n\r\n## 0.2.7<a name=\"mark251\"></a>[^](#mark248)\r\n\r\nFix missing ImageDraw import in ImageCore.py\r\n\r\n## 0.2.6<a name=\"mark252\"></a>[^](#mark248)\r\n\r\nAdd more functions to pillow_widgets/ImageCore.py and cleaned up typehinting, added pillow widgets to readme\r\n\r\n## 0.2.5<a name=\"mark253\"></a>[^](#mark248)\r\n\r\nAdd utils/tcl_commands.py with tcl_bell, tcl_center_window, and tcl_choose_font functions\r\n\r\n## 0.2.4<a name=\"mark254\"></a>[^](#mark248)\r\n\r\nUse recursive import on asset folders to fix ALL missing assets.\r\n\r\n## 0.2.3<a name=\"mark255\"></a>[^](#mark248)\r\n\r\nFix missing theme and font assets\r\n\r\n## 0.2.2<a name=\"mark256\"></a>[^](#mark248)\r\n\r\nFix readme, remove pkg_resources in favor of importlib\r\n\r\n## 0.2.1<a name=\"mark257\"></a>[^](#mark248)\r\n\r\nFix pkg_resources dependency\r\n\r\n## 0.2.0<a name=\"mark258\"></a>[^](#mark248)\r\n\r\nRestructure for better pep compliance, breaks some imports.\r\n\r\n## 0.1.42<a name=\"mark259\"></a>[^](#mark248)\r\n\r\nAdd <<Modified>> custom event to ScrolledText\r\n\r\n## 0.1.41<a name=\"mark260\"></a>[^](#mark248)\r\n\r\nAdd enable / disable to ActiveButton\r\n\r\n## 0.1.40<a name=\"mark261\"></a>[^](#mark248)\r\n\r\nFix bug with TextWindow\r\n\r\n## 0.1.39<a name=\"mark262\"></a>[^](#mark248)\r\n\r\nAdd TextWindow to ToplevelWidgets.py\r\n\r\n## 0.1.38<a name=\"mark263\"></a>[^](#mark248)\r\n\r\nAdd 16px python icons to assets\r\n\r\n## 0.1.37<a name=\"mark264\"></a>[^](#mark248)\r\n\r\nMulti-Widgets packing can be customized through multiwidget.add() kwargs\r\n\r\n## 0.1.36<a name=\"mark265\"></a>[^](#mark248)\r\n\r\nMore improvements to the font system, added font tab to test.py\r\n\r\n## 0.1.35<a name=\"mark266\"></a>[^](#mark248)\r\n\r\nAdded more label styles\r\n\r\n## 0.1.34<a name=\"mark267\"></a>[^](#mark248)\r\n\r\nAdd init option to disable default notebook. Add function to make config file from dict (for testing, parent applications launching apps with custom args, etc.). Add handling when no ini width / height specified. Added ListManipulator widget.\r\n\r\n## 0.1.33<a name=\"mark268\"></a>[^](#mark248)\r\n\r\nFix labeled checkbutton packing\r\n\r\n## 0.1.32<a name=\"mark269\"></a>[^](#mark248)\r\n\r\nCleanup\r\n\r\n## 0.1.31<a name=\"mark270\"></a>[^](#mark248)\r\n\r\nAdd ActiveLabel and LabeledValue, add image_encoder.py and list_compare.py to demos\r\n\r\n## 0.1.30<a name=\"mark271\"></a>[^](#mark248)\r\n\r\nCleanup, bug fixes, add HamburgerFrame\r\n\r\n## 0.1.29<a name=\"mark272\"></a>[^](#mark248)\r\n\r\nMove TicTacToe to examples\r\n\r\n## 0.1.28<a name=\"mark273\"></a>[^](#mark248)\r\n\r\nMove SuperWidgetMixin from WidgetsCore.py to SuperWidget.py\r\n\r\n## 0.1.27<a name=\"mark274\"></a>[^](#mark248)\r\n\r\nAdd ActiveButton, ActiveCheckButton, ActiveComboBox, ActiveEntry, ActiveOptionMenu, ActiveProgressbar, ActiveRadioButton, ActiveScale, ColumnFrame, CycleButton, LabeledButton, LabeledMultiButton, LabeledCycleButton, LabeledMultiCycleButton, LabeledMultiRadioTable, LabeledMultiSimpleRadioTable, LabeledRadioTable, LabeledSimpleRadioTable, RadioTable, SimpleRadioTable, Remove: LabeledRadioButton, LabeledMultiRadioButton\r\n\r\n## 0.1.26<a name=\"mark275\"></a>[^](#mark248)\r\n\r\nAdd Spinbox widgets, fix Copybox\r\n\r\n## 0.1.25<a name=\"mark276\"></a>[^](#mark248)\r\n\r\nReduce packaged fonts color pallete\r\n\r\n## 0.1.24<a name=\"mark277\"></a>[^](#mark248)\r\n\r\nUpdate readme generator with more config keys, fix ini readme md code block being marked as python\r\n\r\n## 0.1.23<a name=\"mark278\"></a>[^](#mark248)\r\n\r\nAdd columns to Configurable Launcher\r\n\r\n## 0.1.22<a name=\"mark279\"></a>[^](#mark248)\r\n\r\nFix readme\r\n\r\n## 0.1.21<a name=\"mark280\"></a>[^](#mark248)\r\n\r\nFix readme\r\n\r\n## 0.1.20<a name=\"mark281\"></a>[^](#mark248)\r\n\r\nAdd counter widget.\r\n\r\n## 0.1.19<a name=\"mark282\"></a>[^](#mark248)\r\n\r\nAdd dynamic launcher system.\r\n\r\n## 0.1.18<a name=\"mark283\"></a>[^](#mark248)\r\n\r\nAdd Ordered Listbox, add more bindings to SuperWidget, cleanup\r\n\r\n## 0.1.17<a name=\"mark284\"></a>[^](#mark248)\r\n\r\nAdd set_desktop_background to WidgetsCore.py\r\n\r\n## 0.1.16<a name=\"mark285\"></a>[^](#mark248)\r\n\r\nAdd needs_white_text to color.py, add pyinstaller compatibility to WidgetsCore.get_asset\r\n\r\n## 0.1.15<a name=\"mark286\"></a>[^](#mark248)\r\n\r\nFix misnamed function in color.py\r\n\r\n## 0.1.14<a name=\"mark287\"></a>[^](#mark248)\r\n\r\nFix missing import in app.py\r\n\r\n## 0.1.13<a name=\"mark288\"></a>[^](#mark248)\r\n\r\nreduced variety of packaged font images, fixed bug with constrained widgets command not triggering\r\n\r\n## 0.1.12<a name=\"mark289\"></a>[^](#mark248)\r\n\r\nAdd Constrained + Labeled + Multi Entries (>35 widgets)\r\n\r\n## 0.1.11<a name=\"mark290\"></a>[^](#mark248)\r\n\r\nFix LabeledPathEntry error when no dialog type was specified\r\n\r\n## 0.1.10<a name=\"mark291\"></a>[^](#mark248)\r\n\r\nAdd LabeledPathEntry to EntryWidgets.py\r\n\r\n## 0.1.9<a name=\"mark292\"></a>[^](#mark248)\r\n\r\nAdd pencil icons to assets\r\n\r\n## 0.1.8<a name=\"mark293\"></a>[^](#mark248)\r\n\r\nFix labeled button not running command on press\r\n\r\n## 0.1.7<a name=\"mark294\"></a>[^](#mark248)\r\n\r\nadd labeled button\r\n\r\n## 0.1.6<a name=\"mark295\"></a>[^](#mark248)\r\n\r\nFix missing Labeler import\r\n\r\n## 0.1.5<a name=\"mark296\"></a>[^](#mark248)\r\n\r\nFix broken package\r\n\r\n## 0.1.4<a name=\"mark297\"></a>[^](#mark248)\r\n\r\nFix broken package\r\n\r\n## 0.1.3<a name=\"mark298\"></a>[^](#mark248)\r\n\r\nMore cleanup, input fixes.py\r\n\r\n## 0.1.2<a name=\"mark299\"></a>[^](#mark248)\r\n\r\nCleanup, move type lists to generate_readme.py\r\n\r\n## 0.1.1<a name=\"mark300\"></a>[^](#mark248)\r\n\r\nFix missing 'ListWindow' import in app.py\r\n\r\n## 0.1.0<a name=\"mark301\"></a>[^](#mark248)\r\n\r\nModulize\r\n\r\n\r\n\r\nGenerated with [py_simple_readme](https://github.com/AndrewSpangler/py_simple_readme)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-simple-ttk",
    "package_url": "https://pypi.org/project/py-simple-ttk/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-simple-ttk/",
    "project_urls": {
      "bug tracker": "https://GitHub.com/AndrewSpangler/py_simple_ttk/issues",
      "documentation": "https://GitHub.com/AndrewSpangler/py_simple_ttk/",
      "homepage": "https://GitHub.com/AndrewSpangler/py_simple_ttk/",
      "repository": "https://GitHub.com/AndrewSpangler/py_simple_ttk/"
    },
    "release_url": "https://pypi.org/project/py-simple-ttk/0.2.10/",
    "requires_dist": [
      "py-simple-lorem"
    ],
    "requires_python": ">=3.9",
    "summary": "Tkinter themes don't have to be hard.",
    "version": "0.2.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17167615,
  "releases": {
    "0.0.0": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37dc0c4ebc5fe5c7f94b99389d83b6611789f94fe89c5c35456362d6187d497e",
          "md5": "37ae049ace6d6dfba44e47e0970f7837",
          "sha256": "c4366420a03b7e6f3cb4666490df6ef23065c7d5d4e8e53ecd5325cc7d091b87"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37ae049ace6d6dfba44e47e0970f7837",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 32196,
        "upload_time": "2022-10-23T21:05:46",
        "upload_time_iso_8601": "2022-10-23T21:05:46.755451Z",
        "url": "https://files.pythonhosted.org/packages/37/dc/0c4ebc5fe5c7f94b99389d83b6611789f94fe89c5c35456362d6187d497e/py_simple_ttk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aa297792659892653f7e8994a5299dffd5a77e3a7770d692451d06fad78e38c",
          "md5": "2d48fdfc2ad063fa3ee7f87726836a40",
          "sha256": "a03588861e2bf550e615f98c1e285ef5d476c022d8fab383ee5e3d16c8ffa23d"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d48fdfc2ad063fa3ee7f87726836a40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 73666690,
        "upload_time": "2022-10-24T00:07:58",
        "upload_time_iso_8601": "2022-10-24T00:07:58.719066Z",
        "url": "https://files.pythonhosted.org/packages/8a/a2/97792659892653f7e8994a5299dffd5a77e3a7770d692451d06fad78e38c/py_simple_ttk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc681d17d0adbe313945c61469639d7e22be6fe6600ba616fe38f90836a839d4",
          "md5": "14736c5ebc0f8f262d1597d1e02bec2d",
          "sha256": "618206c19f0055e2657ca27bdfae4e371cd0f1c481bcae488c543050b3d5bbe4"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14736c5ebc0f8f262d1597d1e02bec2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77344498,
        "upload_time": "2022-10-30T19:05:20",
        "upload_time_iso_8601": "2022-10-30T19:05:20.166407Z",
        "url": "https://files.pythonhosted.org/packages/fc/68/1d17d0adbe313945c61469639d7e22be6fe6600ba616fe38f90836a839d4/py_simple_ttk-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e10cf9406d5da97543011ad6f8fe89b6b1bd123b5d00287e22dfb5fb92aae04",
          "md5": "752a6dffe68de25cb5218ae410e32a2e",
          "sha256": "0c87d2e284985c2dd55e5070c26c4ab702280204dc2ea2a5d02360423f096962"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "752a6dffe68de25cb5218ae410e32a2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77344550,
        "upload_time": "2022-10-30T19:25:02",
        "upload_time_iso_8601": "2022-10-30T19:25:02.446286Z",
        "url": "https://files.pythonhosted.org/packages/2e/10/cf9406d5da97543011ad6f8fe89b6b1bd123b5d00287e22dfb5fb92aae04/py_simple_ttk-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc61ff9650e5802f9bac381dd8417047f72c750bf3821e2df81cdb7348dc3d1c",
          "md5": "d3c2672e35f40ba99966fcda24f51ee8",
          "sha256": "30358a3dd831548b0d2c218b2e9fe6fb08a588c75829a7b68a27db74148ea24e"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3c2672e35f40ba99966fcda24f51ee8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77349510,
        "upload_time": "2022-10-30T23:54:23",
        "upload_time_iso_8601": "2022-10-30T23:54:23.889126Z",
        "url": "https://files.pythonhosted.org/packages/fc/61/ff9650e5802f9bac381dd8417047f72c750bf3821e2df81cdb7348dc3d1c/py_simple_ttk-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d96052bdb6ff8e55f9f26ad7d8672841783fb8fc99ae23a42a1043d24d3d192",
          "md5": "a827951bec7c2a508ad56b9bebc3de83",
          "sha256": "d528cf552efa7ebd2f9d6cea14748ceecfdeb236b2391f559f9e88acc8f597c8"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a827951bec7c2a508ad56b9bebc3de83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 38936106,
        "upload_time": "2022-10-31T00:24:02",
        "upload_time_iso_8601": "2022-10-31T00:24:02.074476Z",
        "url": "https://files.pythonhosted.org/packages/9d/96/052bdb6ff8e55f9f26ad7d8672841783fb8fc99ae23a42a1043d24d3d192/py_simple_ttk-0.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1910bfc98d9d765cec23828724c9393cbb04cba6840914df314dd5a186e6afb7",
          "md5": "dd4bac8010debe9ebeea8404b9c61240",
          "sha256": "4c17e2ca21f8ad08a4f96f5ee09ca54556f4b3f6b1a86c7e27a7cfbef32d1d45"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd4bac8010debe9ebeea8404b9c61240",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60284515,
        "upload_time": "2022-11-04T02:28:43",
        "upload_time_iso_8601": "2022-11-04T02:28:43.042335Z",
        "url": "https://files.pythonhosted.org/packages/19/10/bfc98d9d765cec23828724c9393cbb04cba6840914df314dd5a186e6afb7/py_simple_ttk-0.1.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7286c3ba1cb90053e3f86b3105f26a00c9cefa162e65be99ee1d85c621662ec1",
          "md5": "20a405b35f4435cb300fce0abca4ae38",
          "sha256": "0a56be8bc3ded4953b501afac024cea9913d4dd7b0e0e0c6201cac317b3238d0"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20a405b35f4435cb300fce0abca4ae38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60285004,
        "upload_time": "2022-11-05T21:27:07",
        "upload_time_iso_8601": "2022-11-05T21:27:07.657899Z",
        "url": "https://files.pythonhosted.org/packages/72/86/c3ba1cb90053e3f86b3105f26a00c9cefa162e65be99ee1d85c621662ec1/py_simple_ttk-0.1.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f297c35e52b911b7e95258cd42f74cd1b10de5c9c8b7e02efe3f7362b00d0cd",
          "md5": "ff81d1f7b567d67ae34ca1fb81413d0c",
          "sha256": "7f11a97ebdf074eb00fd69e05e9a5f103b1177ce6120b47e171cb13a8d42833c"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff81d1f7b567d67ae34ca1fb81413d0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60288142,
        "upload_time": "2022-11-05T23:24:59",
        "upload_time_iso_8601": "2022-11-05T23:24:59.105474Z",
        "url": "https://files.pythonhosted.org/packages/8f/29/7c35e52b911b7e95258cd42f74cd1b10de5c9c8b7e02efe3f7362b00d0cd/py_simple_ttk-0.1.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dad4654bc0c937b65872d232d38945240a150b4dcba7689a0dc6586f4c4fd1e8",
          "md5": "04d6c1433226ab99e657651ae994f7a7",
          "sha256": "69aff4a9efdef59625beb2adc93569871ae0b7da8ada97e9fb366fda5f0c48bb"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04d6c1433226ab99e657651ae994f7a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 73671997,
        "upload_time": "2022-10-24T00:12:46",
        "upload_time_iso_8601": "2022-10-24T00:12:46.117339Z",
        "url": "https://files.pythonhosted.org/packages/da/d4/654bc0c937b65872d232d38945240a150b4dcba7689a0dc6586f4c4fd1e8/py_simple_ttk-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c46ca1452b63f2922b7c0f8da91add8d5e036263fda01cc4b4b2e87a670d0dc3",
          "md5": "a6e9c42bef3040b468b66f5b97e13b64",
          "sha256": "098368bd2a05e435d3fc065dcf7e5a5c8aeab373d95a2c5f2e6bce49c6843aec"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6e9c42bef3040b468b66f5b97e13b64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60290462,
        "upload_time": "2022-11-06T15:59:44",
        "upload_time_iso_8601": "2022-11-06T15:59:44.886643Z",
        "url": "https://files.pythonhosted.org/packages/c4/6c/a1452b63f2922b7c0f8da91add8d5e036263fda01cc4b4b2e87a670d0dc3/py_simple_ttk-0.1.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bfe9d20f30bae67b51baade2f4243df2d3c12ab8b8725b77c7e7b6816bc5729",
          "md5": "b8030a0132e5fb718c1dfb663198776a",
          "sha256": "e5aa2f3849011b8fdc80f9fe201b8dbaf21d490031a3dc7762097d4f277972f5"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8030a0132e5fb718c1dfb663198776a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60290461,
        "upload_time": "2022-11-06T16:00:32",
        "upload_time_iso_8601": "2022-11-06T16:00:32.487161Z",
        "url": "https://files.pythonhosted.org/packages/1b/fe/9d20f30bae67b51baade2f4243df2d3c12ab8b8725b77c7e7b6816bc5729/py_simple_ttk-0.1.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f2a62ccde27e2ab5e7360a9d859e456b04fb6195e197a9430b05b7db58d7040",
          "md5": "0b9711deecc79e8d4ccb306e49c20079",
          "sha256": "fa9b98ae46abd3aa5cb7d27f90308264305dd7145cb87dbc0417245135e27780"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b9711deecc79e8d4ccb306e49c20079",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60290380,
        "upload_time": "2022-11-06T16:10:22",
        "upload_time_iso_8601": "2022-11-06T16:10:22.264608Z",
        "url": "https://files.pythonhosted.org/packages/8f/2a/62ccde27e2ab5e7360a9d859e456b04fb6195e197a9430b05b7db58d7040/py_simple_ttk-0.1.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b1c3d53a5ac5975f2d1aec428e55092f6ca6265e128da4691f4d770564df653",
          "md5": "cf66f96a283e1cecf3eccd7249e31634",
          "sha256": "027cae03a34d541346950b9b3c58045dad0f026425f93ae2c383d68059a3f8c3"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf66f96a283e1cecf3eccd7249e31634",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60290897,
        "upload_time": "2022-11-06T17:55:33",
        "upload_time_iso_8601": "2022-11-06T17:55:33.651100Z",
        "url": "https://files.pythonhosted.org/packages/1b/1c/3d53a5ac5975f2d1aec428e55092f6ca6265e128da4691f4d770564df653/py_simple_ttk-0.1.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa32a5da6cc4309e1a0be42bacb1e2020ae71d4d989e00d7dabc53c111cfae0c",
          "md5": "8fc09eaf7788e22ce77776ed8442717e",
          "sha256": "19ac9b213de96203f37c2a008f6ae068911503a84079e605ea70055a6eb0113e"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fc09eaf7788e22ce77776ed8442717e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23645960,
        "upload_time": "2022-11-06T19:14:32",
        "upload_time_iso_8601": "2022-11-06T19:14:32.911095Z",
        "url": "https://files.pythonhosted.org/packages/fa/32/a5da6cc4309e1a0be42bacb1e2020ae71d4d989e00d7dabc53c111cfae0c/py_simple_ttk-0.1.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d769bb67cccd03d1c9014b72bf6bba79dfb102e695f08957d7f3fb5e47f246c6",
          "md5": "81b086de5b8532283b1c770f5d3ac8d5",
          "sha256": "a846bbe75b8cdc8a6b343aad23a56fc7a8cbd7a5de8d74474ebb82faec5235ff"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81b086de5b8532283b1c770f5d3ac8d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23654434,
        "upload_time": "2022-11-11T05:12:27",
        "upload_time_iso_8601": "2022-11-11T05:12:27.972257Z",
        "url": "https://files.pythonhosted.org/packages/d7/69/bb67cccd03d1c9014b72bf6bba79dfb102e695f08957d7f3fb5e47f246c6/py_simple_ttk-0.1.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cb79ac10e4db7ecbef8330b974064216b8c98f7ca80fcb53f4d91e635caf53f",
          "md5": "c5b8940420dd17f5084e679b66949d7f",
          "sha256": "9de46fc7c2139aba40b1c66d809bbdf14a53d0f4f0e229c6aad2f55ae9900fe8"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b8940420dd17f5084e679b66949d7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 26897,
        "upload_time": "2022-10-29T21:22:09",
        "upload_time_iso_8601": "2022-10-29T21:22:09.719483Z",
        "url": "https://files.pythonhosted.org/packages/9c/b7/9ac10e4db7ecbef8330b974064216b8c98f7ca80fcb53f4d91e635caf53f/py_simple_ttk-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84b47114dedfad7469f3622699736dca2736ba2b64c14ade1bd84fc3ebc6a993",
          "md5": "a3f18a4402ea03793236f50b438f7613",
          "sha256": "f847946ab33ea35c7d9147c4a88e7eaf2363b42a70b4d9dc84759a857122f08c"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.30-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3f18a4402ea03793236f50b438f7613",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23656419,
        "upload_time": "2022-11-12T04:48:46",
        "upload_time_iso_8601": "2022-11-12T04:48:46.872988Z",
        "url": "https://files.pythonhosted.org/packages/84/b4/7114dedfad7469f3622699736dca2736ba2b64c14ade1bd84fc3ebc6a993/py_simple_ttk-0.1.30-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "197251e7e772d7b0970918115aaddb6370c57929670183edd557ae2d68c5e9fc",
          "md5": "43d71e8f6887378aa4b42f97d6be72bf",
          "sha256": "07da8179684c852769b3037f88ec9b441f19861a50cb5d9ae8b3e0fc53f8b791"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43d71e8f6887378aa4b42f97d6be72bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23658164,
        "upload_time": "2022-11-17T04:38:07",
        "upload_time_iso_8601": "2022-11-17T04:38:07.310566Z",
        "url": "https://files.pythonhosted.org/packages/19/72/51e7e772d7b0970918115aaddb6370c57929670183edd557ae2d68c5e9fc/py_simple_ttk-0.1.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250a462ae3215d4aa75939b8fb07ac85c9eca10e2414e227fcf081f53a8fe69e",
          "md5": "e8e456a4e13e62f9cbd97a7524df7a2c",
          "sha256": "bcc2feca1bc74b28724dd0d686bb8d092f720fa2cb6e954f53daf1da41dd712a"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8e456a4e13e62f9cbd97a7524df7a2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23660493,
        "upload_time": "2022-11-24T01:47:47",
        "upload_time_iso_8601": "2022-11-24T01:47:47.861800Z",
        "url": "https://files.pythonhosted.org/packages/25/0a/462ae3215d4aa75939b8fb07ac85c9eca10e2414e227fcf081f53a8fe69e/py_simple_ttk-0.1.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e2211d74ff2d2be3ea3d49250388a862b7d8bde9867adcf256c2b6dbff5cda2",
          "md5": "a4143135b26f7a0d4fcb1a60472df5a0",
          "sha256": "e77e41c3a6339b3fde0a808406df534c5caecafa5aabf2a4fdca8ad96119afea"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4143135b26f7a0d4fcb1a60472df5a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23660531,
        "upload_time": "2022-11-24T01:48:10",
        "upload_time_iso_8601": "2022-11-24T01:48:10.708346Z",
        "url": "https://files.pythonhosted.org/packages/8e/22/11d74ff2d2be3ea3d49250388a862b7d8bde9867adcf256c2b6dbff5cda2/py_simple_ttk-0.1.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a5892743650e97a9f5903f1d8e4466f1ef229e23ab23247f2b547469b63dddb",
          "md5": "009bdec75ba62bc3041bafa51f80399d",
          "sha256": "cc286e2471ee440e11a7a31b734a67c9225b2bde4886ee0a2db6a8b370eeed4d"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.34-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "009bdec75ba62bc3041bafa51f80399d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23662078,
        "upload_time": "2022-11-24T01:48:34",
        "upload_time_iso_8601": "2022-11-24T01:48:34.618962Z",
        "url": "https://files.pythonhosted.org/packages/8a/58/92743650e97a9f5903f1d8e4466f1ef229e23ab23247f2b547469b63dddb/py_simple_ttk-0.1.34-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e71e7194c1ae6738771ad101c26fdc776a93884092f0fb8cebee87ec02cda7d",
          "md5": "a79fc89f8197ad4c2f4209678776d7d4",
          "sha256": "75c38372e0cd44f9574ee6048aa6eb9d25a8ffb542ee1acdfe98f7b6657cbd11"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a79fc89f8197ad4c2f4209678776d7d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23662719,
        "upload_time": "2022-11-24T01:48:56",
        "upload_time_iso_8601": "2022-11-24T01:48:56.668968Z",
        "url": "https://files.pythonhosted.org/packages/1e/71/e7194c1ae6738771ad101c26fdc776a93884092f0fb8cebee87ec02cda7d/py_simple_ttk-0.1.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a0ca7532d8d81449b784bb945cc833f8fab7bd29eecf05c500c797ef8076df7",
          "md5": "1db7813d594b50ecc31e99c8e2211090",
          "sha256": "1586ec7e656d19032760ea4bfcafafc133ecaffe0b63e819303bb8e5665f659f"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1db7813d594b50ecc31e99c8e2211090",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23662807,
        "upload_time": "2022-11-24T01:49:20",
        "upload_time_iso_8601": "2022-11-24T01:49:20.016580Z",
        "url": "https://files.pythonhosted.org/packages/8a/0c/a7532d8d81449b784bb945cc833f8fab7bd29eecf05c500c797ef8076df7/py_simple_ttk-0.1.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b947a06590d2ab919d0ac2b2124613f9a9702500e76856096f960b4194f09b8e",
          "md5": "d37f5e4c88269af8fefb87602bfa9ece",
          "sha256": "7d6ac74c08b622cf1f9ec8849f9dd0d29a8b277d12e95fd69856465e374f1107"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.37-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d37f5e4c88269af8fefb87602bfa9ece",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23662900,
        "upload_time": "2022-11-24T01:49:42",
        "upload_time_iso_8601": "2022-11-24T01:49:42.178217Z",
        "url": "https://files.pythonhosted.org/packages/b9/47/a06590d2ab919d0ac2b2124613f9a9702500e76856096f960b4194f09b8e/py_simple_ttk-0.1.37-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d472cdf4aa7c5262acfe50ce9c0c0dd77d3fb58233727c5820a56300d9282446",
          "md5": "56c5d0bcdca4ce655a0765f512265f60",
          "sha256": "3bb3069d8e76d6fdebe3c2c0e280961cd0d5153f92313835d2fa77ab8c2dee08"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.38-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56c5d0bcdca4ce655a0765f512265f60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23664828,
        "upload_time": "2022-11-24T01:50:05",
        "upload_time_iso_8601": "2022-11-24T01:50:05.752635Z",
        "url": "https://files.pythonhosted.org/packages/d4/72/cdf4aa7c5262acfe50ce9c0c0dd77d3fb58233727c5820a56300d9282446/py_simple_ttk-0.1.38-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.39": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b06e6f663b1b077207957d8b9b65337ce28abc56be4dd7d07dd444c2151af84",
          "md5": "de9c091202d9fd1ee8c8c126b6df818a",
          "sha256": "7f3fbe3165c408f51211efa13f4b336391881cfe059603fd3500f3ec77260257"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.39-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de9c091202d9fd1ee8c8c126b6df818a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23664828,
        "upload_time": "2022-11-24T01:50:30",
        "upload_time_iso_8601": "2022-11-24T01:50:30.276885Z",
        "url": "https://files.pythonhosted.org/packages/1b/06/e6f663b1b077207957d8b9b65337ce28abc56be4dd7d07dd444c2151af84/py_simple_ttk-0.1.39-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "293e9b39f210f2029cbbfbc10fddcdcee353d895373d21a7e59de20f33dd72d4",
          "md5": "8ef9196d81658d34cb37f9f7e54095e9",
          "sha256": "7145e844f6de0f917dedf155ef0851b5efbbd048a610554371fa38d5fec54dcb"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ef9196d81658d34cb37f9f7e54095e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 109890,
        "upload_time": "2022-10-29T21:47:53",
        "upload_time_iso_8601": "2022-10-29T21:47:53.881762Z",
        "url": "https://files.pythonhosted.org/packages/29/3e/9b39f210f2029cbbfbc10fddcdcee353d895373d21a7e59de20f33dd72d4/py_simple_ttk-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8db1fb776e9f1f76c73a5603be097a790c2e4aa98fe4b9be151b232e978f8a",
          "md5": "41b27d038404a1b7ed0c1295c681c605",
          "sha256": "7d9f21ff7bcd2109e1ca9d7da3fa28fcb2a3e6b8e5026eda83e69c07b812d9e6"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.40-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41b27d038404a1b7ed0c1295c681c605",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23665016,
        "upload_time": "2022-11-24T01:50:53",
        "upload_time_iso_8601": "2022-11-24T01:50:53.918372Z",
        "url": "https://files.pythonhosted.org/packages/fd/8d/b1fb776e9f1f76c73a5603be097a790c2e4aa98fe4b9be151b232e978f8a/py_simple_ttk-0.1.40-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "761647ccb58333c4627fedf13fdc2a117793221da02d9172beaed59025ac215c",
          "md5": "2f675a2275672426100b23dfa4eb72b5",
          "sha256": "e792fcf97441ec3cd1b81f92d6a2d04c0f379df045513b8b12656b34e7dfc472"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f675a2275672426100b23dfa4eb72b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77341192,
        "upload_time": "2022-10-29T22:33:36",
        "upload_time_iso_8601": "2022-10-29T22:33:36.445081Z",
        "url": "https://files.pythonhosted.org/packages/76/16/47ccb58333c4627fedf13fdc2a117793221da02d9172beaed59025ac215c/py_simple_ttk-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ace83bb2a235500c198d35fb89fa3e22490d9730394c678ffa41654856827d62",
          "md5": "791c4a34dc8194c355d2614a9ca59b09",
          "sha256": "75398b62ee26251c2f749355cf274a8e5aa6baa34e78660e2db9f288d8944539"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "791c4a34dc8194c355d2614a9ca59b09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77341220,
        "upload_time": "2022-10-29T22:56:18",
        "upload_time_iso_8601": "2022-10-29T22:56:18.839429Z",
        "url": "https://files.pythonhosted.org/packages/ac/e8/3bb2a235500c198d35fb89fa3e22490d9730394c678ffa41654856827d62/py_simple_ttk-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40be97dddcb12ffd5d6f71507597d4b1107df72fcb115f54f5ea5f64f5c16a58",
          "md5": "3bb493e656ddf147d7a8b2839e3aa0f9",
          "sha256": "b150d864635c9aca00ee71d425f4b2dfdb768c79420089f72fe8e20e52aed302"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bb493e656ddf147d7a8b2839e3aa0f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77342019,
        "upload_time": "2022-10-30T00:09:39",
        "upload_time_iso_8601": "2022-10-30T00:09:39.236773Z",
        "url": "https://files.pythonhosted.org/packages/40/be/97dddcb12ffd5d6f71507597d4b1107df72fcb115f54f5ea5f64f5c16a58/py_simple_ttk-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "139da06192c1faa4c353b5049ca8a3e5b73ffa19ac84607796c29f38de04e81b",
          "md5": "c245154573bf93d559bb668413cf1d77",
          "sha256": "8f8f8f079abcd2a7869e7cc184b4b2d19b7cc34e85c496f9f6ab3262a364baca"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c245154573bf93d559bb668413cf1d77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77342131,
        "upload_time": "2022-10-30T00:41:17",
        "upload_time_iso_8601": "2022-10-30T00:41:17.100650Z",
        "url": "https://files.pythonhosted.org/packages/13/9d/a06192c1faa4c353b5049ca8a3e5b73ffa19ac84607796c29f38de04e81b/py_simple_ttk-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19f04863f0d202a80e1e8f3b116bca1bcd9cfa6b529373b8e0240c17ffee23e3",
          "md5": "a50416701f38f1599d8b129d162fd3e0",
          "sha256": "7d103aa374dcfcc61146ab36ce787bd25596f8846ffadf8b239fbe42730fc09a"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a50416701f38f1599d8b129d162fd3e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77344025,
        "upload_time": "2022-10-30T17:57:46",
        "upload_time_iso_8601": "2022-10-30T17:57:46.940638Z",
        "url": "https://files.pythonhosted.org/packages/19/f0/4863f0d202a80e1e8f3b116bca1bcd9cfa6b529373b8e0240c17ffee23e3/py_simple_ttk-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4bf723a8252c40e23e2c0eeacc056f0febea540d5032d635c88988b5510d245",
          "md5": "41314dab1e1aff7c442d3e7ec33cd43e",
          "sha256": "11fb2aaa7d40509c8fd3780cb887c657f5fda2178d3023b70d167c1af3421a04"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41314dab1e1aff7c442d3e7ec33cd43e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 19986081,
        "upload_time": "2023-01-14T01:39:57",
        "upload_time_iso_8601": "2023-01-14T01:39:57.916207Z",
        "url": "https://files.pythonhosted.org/packages/f4/bf/723a8252c40e23e2c0eeacc056f0febea540d5032d635c88988b5510d245/py_simple_ttk-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83b19cdf2ad3bfb2e1243df4f0a6a0aab9b0bf89014175b5792f9e11713cd450",
          "md5": "308b65ebc29aaee5b59df4116fcc028c",
          "sha256": "7675d4b9f05a90fd2ef241f03f35b811ce0234c09b65ce914a4dc3b80f50ac4a"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "308b65ebc29aaee5b59df4116fcc028c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 20011765,
        "upload_time": "2023-01-14T01:40:21",
        "upload_time_iso_8601": "2023-01-14T01:40:21.258631Z",
        "url": "https://files.pythonhosted.org/packages/83/b1/9cdf2ad3bfb2e1243df4f0a6a0aab9b0bf89014175b5792f9e11713cd450/py_simple_ttk-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e9c732e6b465f980b842e514b87ff517b8147924afb72a731b4beacdf272bd",
          "md5": "14984944708541a939f408d7b9f3d3ff",
          "sha256": "16b7d798ef5fe449a96115445788669853bf2cbdc145a4b973bbf17545219e74"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14984944708541a939f408d7b9f3d3ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 19986102,
        "upload_time": "2023-01-14T01:46:43",
        "upload_time_iso_8601": "2023-01-14T01:46:43.010314Z",
        "url": "https://files.pythonhosted.org/packages/17/e9/c732e6b465f980b842e514b87ff517b8147924afb72a731b4beacdf272bd/py_simple_ttk-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78413d84098675bd2220097079517cfab5bfd9775fa11620094415ddb20ec921",
          "md5": "8cd308747dedca057d7d76bc66afcece",
          "sha256": "cdc831c47e00a8ea596b451d3099d2db65362d749cd0f0256f9418e79e33a03e"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8cd308747dedca057d7d76bc66afcece",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 20011861,
        "upload_time": "2023-01-14T01:47:34",
        "upload_time_iso_8601": "2023-01-14T01:47:34.943277Z",
        "url": "https://files.pythonhosted.org/packages/78/41/3d84098675bd2220097079517cfab5bfd9775fa11620094415ddb20ec921/py_simple_ttk-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9a276770e79ab456712c51c7dba9428c6e76b99f61ad1579b2c32cae45b5f31",
          "md5": "e75df0fb105c5c77d36523b9a8b182a7",
          "sha256": "052ec49f9ef118970fa0fe9abd1f8ea1bc7c31b4f08e190ac266565d46039619"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e75df0fb105c5c77d36523b9a8b182a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 23665551,
        "upload_time": "2023-03-05T23:16:39",
        "upload_time_iso_8601": "2023-03-05T23:16:39.802525Z",
        "url": "https://files.pythonhosted.org/packages/c9/a2/76770e79ab456712c51c7dba9428c6e76b99f61ad1579b2c32cae45b5f31/py_simple_ttk-0.2.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3223f2fc78a8021f41343a9a178b3d6720527c953069fe0dca19e49e7c10d001",
          "md5": "f6ef84d59f0086c461b7dc15d9b82353",
          "sha256": "e6afbca9195533ab7464942971ed3355209fd2640e0285039405564567385e95"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f6ef84d59f0086c461b7dc15d9b82353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 23677949,
        "upload_time": "2023-03-05T23:17:00",
        "upload_time_iso_8601": "2023-03-05T23:17:00.995290Z",
        "url": "https://files.pythonhosted.org/packages/32/23/f2fc78a8021f41343a9a178b3d6720527c953069fe0dca19e49e7c10d001/py_simple_ttk-0.2.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a061751a2641039fbda245cf3967b52116d9445efcc9c486f9a634ceec6db0e",
          "md5": "532148a3c891836e2e1c0ec50b1a9766",
          "sha256": "d3c2e3a03319ed28092c8805fe4bb75d7b9fce934478df3f47f0f58d50bb4657"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "532148a3c891836e2e1c0ec50b1a9766",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 19987719,
        "upload_time": "2023-01-14T02:12:36",
        "upload_time_iso_8601": "2023-01-14T02:12:36.357081Z",
        "url": "https://files.pythonhosted.org/packages/0a/06/1751a2641039fbda245cf3967b52116d9445efcc9c486f9a634ceec6db0e/py_simple_ttk-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9b9c78f1d7385d81bde4afd0323d0051c483bc8c15e3942635312777f7a1a37",
          "md5": "0514ee3b98916b6253e5f47a2833b11c",
          "sha256": "ff86c6d4db4dc4e86398b0c2469a81634bf8efa13a099d06dc82eb7aeb2c0405"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0514ee3b98916b6253e5f47a2833b11c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 20017656,
        "upload_time": "2023-01-14T02:12:54",
        "upload_time_iso_8601": "2023-01-14T02:12:54.255344Z",
        "url": "https://files.pythonhosted.org/packages/b9/b9/c78f1d7385d81bde4afd0323d0051c483bc8c15e3942635312777f7a1a37/py_simple_ttk-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4456d549b207e28071f5d7fc11d8d9e85c1d86f96bd91c3e979190eedaaeb941",
          "md5": "f474365b07709b6081c2b8eec7a599e2",
          "sha256": "a0757fff6953068b8e15f69581607cbf88ad2f54a1579dd04c01bc0a34c03848"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f474365b07709b6081c2b8eec7a599e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 19993024,
        "upload_time": "2023-01-14T02:18:24",
        "upload_time_iso_8601": "2023-01-14T02:18:24.162706Z",
        "url": "https://files.pythonhosted.org/packages/44/56/d549b207e28071f5d7fc11d8d9e85c1d86f96bd91c3e979190eedaaeb941/py_simple_ttk-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17cf76a42031b07ab09d120f208ddcbea20d283f8f18e8f0061a7e5ebe7a9675",
          "md5": "534a487db7034a706327bd3cf975c874",
          "sha256": "29462a40fdb233b004b9f39e100c92c70c44826360553341660178d8a95475e2"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "534a487db7034a706327bd3cf975c874",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 20019978,
        "upload_time": "2023-01-14T02:18:42",
        "upload_time_iso_8601": "2023-01-14T02:18:42.548328Z",
        "url": "https://files.pythonhosted.org/packages/17/cf/76a42031b07ab09d120f208ddcbea20d283f8f18e8f0061a7e5ebe7a9675/py_simple_ttk-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee3206d8ffd531c4e99f46f30a5d2950a14bb63099e7a93fe6aa2537c83e8355",
          "md5": "965fbab3e5b16befd624116630248915",
          "sha256": "9cfcd2880a08dc10d34ed34a0cde791519542308585b34230d2a2077af8a65d0"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "965fbab3e5b16befd624116630248915",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23662913,
        "upload_time": "2023-01-14T02:24:53",
        "upload_time_iso_8601": "2023-01-14T02:24:53.921890Z",
        "url": "https://files.pythonhosted.org/packages/ee/32/06d8ffd531c4e99f46f30a5d2950a14bb63099e7a93fe6aa2537c83e8355/py_simple_ttk-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ef9bd94bde5b78355d922a064404033d10f6a6de812c818e689080a30a28acb",
          "md5": "dc6356df26583d6f43ad370e317b67e1",
          "sha256": "a86608d56042c75c9d6fc6d8c4631e64884e57a8ea65d356e378b0d60817dbed"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc6356df26583d6f43ad370e317b67e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23672811,
        "upload_time": "2023-01-14T02:25:14",
        "upload_time_iso_8601": "2023-01-14T02:25:14.613342Z",
        "url": "https://files.pythonhosted.org/packages/7e/f9/bd94bde5b78355d922a064404033d10f6a6de812c818e689080a30a28acb/py_simple_ttk-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7eaa5ad76d238d715a0b1a330b36d70bdb0e69bbeda8d675ad1e7253e39c3087",
          "md5": "ec258488a04f769651c017fbb52824a6",
          "sha256": "aa69bf3ec1de92c83e68200f454291d4274d8351211d6e8e1ea7c4dbdaff7cd0"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec258488a04f769651c017fbb52824a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23663608,
        "upload_time": "2023-01-21T00:00:43",
        "upload_time_iso_8601": "2023-01-21T00:00:43.942677Z",
        "url": "https://files.pythonhosted.org/packages/7e/aa/5ad76d238d715a0b1a330b36d70bdb0e69bbeda8d675ad1e7253e39c3087/py_simple_ttk-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54e8ded493123813a6529a35ae334963971bc42d790b5a160237a3ad3c0ec2f1",
          "md5": "4e19ac3280f3df6164d9aa57d3d63447",
          "sha256": "c3d5814ac6e058793aaf898c6aeb60fd6d697741ef45fc2bbdfa969ab6c99eeb"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4e19ac3280f3df6164d9aa57d3d63447",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23673616,
        "upload_time": "2023-01-21T00:01:05",
        "upload_time_iso_8601": "2023-01-21T00:01:05.140182Z",
        "url": "https://files.pythonhosted.org/packages/54/e8/ded493123813a6529a35ae334963971bc42d790b5a160237a3ad3c0ec2f1/py_simple_ttk-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "912105252b8f0fe503eb53338ec4cac5ff469c5e988b8deb7d453c4d3459b9f5",
          "md5": "39ec5877d3308030c6b3b863f8795356",
          "sha256": "dd19a6127002d4d62035412443bdb6ded7a16763a927a5e4c12e2089b8f2e341"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39ec5877d3308030c6b3b863f8795356",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23664348,
        "upload_time": "2023-01-24T22:13:59",
        "upload_time_iso_8601": "2023-01-24T22:13:59.297721Z",
        "url": "https://files.pythonhosted.org/packages/91/21/05252b8f0fe503eb53338ec4cac5ff469c5e988b8deb7d453c4d3459b9f5/py_simple_ttk-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50c10f566320ef4ac169d71cceb5c1858ef2d34b7ab1341523be764f70d7f901",
          "md5": "7a457674fe4a70ad73f167adf58e3c20",
          "sha256": "3dc20c8343a75febbd90cd34e1566ca836cc0a7bcbe5ee50b9e06c9444aba37b"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7a457674fe4a70ad73f167adf58e3c20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23676071,
        "upload_time": "2023-01-24T22:14:39",
        "upload_time_iso_8601": "2023-01-24T22:14:39.359929Z",
        "url": "https://files.pythonhosted.org/packages/50/c1/0f566320ef4ac169d71cceb5c1858ef2d34b7ab1341523be764f70d7f901/py_simple_ttk-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55dd6e25e09424c771e397e61fb92fabf8f3ba2bd53e5bf30aa19e279125aeb8",
          "md5": "f7b8cf41db436e243d401fa3aefc59d1",
          "sha256": "6f885de0a83a68748b6dd69e60342186b3b44874465d6f3811b5ff5e59c10400"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b8cf41db436e243d401fa3aefc59d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23664381,
        "upload_time": "2023-01-24T22:27:52",
        "upload_time_iso_8601": "2023-01-24T22:27:52.142120Z",
        "url": "https://files.pythonhosted.org/packages/55/dd/6e25e09424c771e397e61fb92fabf8f3ba2bd53e5bf30aa19e279125aeb8/py_simple_ttk-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0976e95ffa44eceb946155a1fb116c66827b563765a8f030bc7eaf2f2caf53a3",
          "md5": "e1e9b3c5ec87c3ef8e425cdc76d6d6b4",
          "sha256": "79bd49b9352d22d8156799f4e5e0bc15c03092444ab998ce9ac09940f24ef7a5"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e1e9b3c5ec87c3ef8e425cdc76d6d6b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23676152,
        "upload_time": "2023-01-24T22:28:13",
        "upload_time_iso_8601": "2023-01-24T22:28:13.292654Z",
        "url": "https://files.pythonhosted.org/packages/09/76/e95ffa44eceb946155a1fb116c66827b563765a8f030bc7eaf2f2caf53a3/py_simple_ttk-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19aa95e1cfc5a87132f21a6b632ce0f8268dea0ebac3eeb7d12735fda061bf23",
          "md5": "154ca7c035bd144ffc3122e88b0bbc9d",
          "sha256": "3d345c982a8194ab9a9e168b396071d4913919db3cff497aa104017b4411277d"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "154ca7c035bd144ffc3122e88b0bbc9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23665435,
        "upload_time": "2023-02-08T00:46:12",
        "upload_time_iso_8601": "2023-02-08T00:46:12.042577Z",
        "url": "https://files.pythonhosted.org/packages/19/aa/95e1cfc5a87132f21a6b632ce0f8268dea0ebac3eeb7d12735fda061bf23/py_simple_ttk-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "542f887a12eaa6f5b7c5305a781598db9781deda6dfcd064b7d7138c67fc5d70",
          "md5": "7f4c57d83b8e0832af9042bfbaa94551",
          "sha256": "f3c15658687627df82e3c638e4eef23dea854eb66ce4c78fa41c2c1ded32a9a8"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7f4c57d83b8e0832af9042bfbaa94551",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23677577,
        "upload_time": "2023-02-08T00:46:33",
        "upload_time_iso_8601": "2023-02-08T00:46:33.456131Z",
        "url": "https://files.pythonhosted.org/packages/54/2f/887a12eaa6f5b7c5305a781598db9781deda6dfcd064b7d7138c67fc5d70/py_simple_ttk-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0fefc68cc3ac6e1a62728d8f325fffcb9122f78f3b1acc124db733ff6329737",
          "md5": "0cd94b5fe97c5eb85f6caeaf1fe4e618",
          "sha256": "92ff09b3145d629129ba6280da3468b95537ab36c12485c6b3e476a01d58c91d"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cd94b5fe97c5eb85f6caeaf1fe4e618",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 23665462,
        "upload_time": "2023-02-08T01:08:29",
        "upload_time_iso_8601": "2023-02-08T01:08:29.691176Z",
        "url": "https://files.pythonhosted.org/packages/b0/fe/fc68cc3ac6e1a62728d8f325fffcb9122f78f3b1acc124db733ff6329737/py_simple_ttk-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa1ba408e49fa9cbc30b12fe2da2a1f43068db65a619dfd003c913450ebcf8db",
          "md5": "2f17e4c571c2c39869c098d2a1dc1844",
          "sha256": "9984fc54486f8005db92249a1ea744a1ed8796dd4ee08029f39ab8cdc9f56fcf"
        },
        "downloads": -1,
        "filename": "py_simple_ttk-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "2f17e4c571c2c39869c098d2a1dc1844",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 23677742,
        "upload_time": "2023-02-08T01:08:50",
        "upload_time_iso_8601": "2023-02-08T01:08:50.557935Z",
        "url": "https://files.pythonhosted.org/packages/aa/1b/a408e49fa9cbc30b12fe2da2a1f43068db65a619dfd003c913450ebcf8db/py_simple_ttk-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9a276770e79ab456712c51c7dba9428c6e76b99f61ad1579b2c32cae45b5f31",
        "md5": "e75df0fb105c5c77d36523b9a8b182a7",
        "sha256": "052ec49f9ef118970fa0fe9abd1f8ea1bc7c31b4f08e190ac266565d46039619"
      },
      "downloads": -1,
      "filename": "py_simple_ttk-0.2.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e75df0fb105c5c77d36523b9a8b182a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 23665551,
      "upload_time": "2023-03-05T23:16:39",
      "upload_time_iso_8601": "2023-03-05T23:16:39.802525Z",
      "url": "https://files.pythonhosted.org/packages/c9/a2/76770e79ab456712c51c7dba9428c6e76b99f61ad1579b2c32cae45b5f31/py_simple_ttk-0.2.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3223f2fc78a8021f41343a9a178b3d6720527c953069fe0dca19e49e7c10d001",
        "md5": "f6ef84d59f0086c461b7dc15d9b82353",
        "sha256": "e6afbca9195533ab7464942971ed3355209fd2640e0285039405564567385e95"
      },
      "downloads": -1,
      "filename": "py_simple_ttk-0.2.10.tar.gz",
      "has_sig": false,
      "md5_digest": "f6ef84d59f0086c461b7dc15d9b82353",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 23677949,
      "upload_time": "2023-03-05T23:17:00",
      "upload_time_iso_8601": "2023-03-05T23:17:00.995290Z",
      "url": "https://files.pythonhosted.org/packages/32/23/f2fc78a8021f41343a9a178b3d6720527c953069fe0dca19e49e7c10d001/py_simple_ttk-0.2.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}