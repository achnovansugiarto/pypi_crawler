{
  "info": {
    "author": "Gianluca Malato",
    "author_email": "gianluca.malato@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Introduction\n\nThis library implements some functionf for removing collinearity from a dataset of features. It can be used both for supervised and for unsupervised machine learning problems.\n\nCollinearity is evaluated calculating __Pearson's linear correlation coefficient__ between the features. The user sets a __threshold__, which is the maximum absolute value allowed for the correlation coefficients in the correlation matrix. \n\nFor __unsupervised problems__, the algorithm selects only those features that produce a correlation matrix whose off-diagonal elements are, in absolute value, less than the threshold. \n\nFor __supervised problems__, the importance of the features with respect to the target variable is calculated using a univariate approach. Then, the features are added with the same unsupervised approach, starting from the most important ones.\n\n# Objects\n\nThe main object is __SelectNonCollinear__. It can be imported this way:\n\n```python\nfrom collinearity import SelectNonCollinear\n```\n\n> collinearity.__SelectNonCollinear__(_correlation_threshold=0.4, scoring=f_classif_)\n\nParameters:\n\n__correlation_threshold : _float (between 0 and 1), default = 0.4___\n\nOnly those features that produce a correlation matrix with off-diagonal elements that are, in absolute value, less than this threshold will be chosen.\n\n__scoring : _callable, default=f_classif___\n\nThe scoring function for supervised problems. It must be the same accepted by [sklearn.feature_selection.SelectKBest](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html).\n\n# Methods\n\nThis object supports the main methods of scikit-learn Estimators:\n\n> fit(X,y=None)\n\nIdentifies the features to consider. For supervised problems, _y_ is the target array and the algorithm is:\n- Sort the features by scoring descending\n- Take the most important feature (i.e. the first feature)\n- Take the next feature if it shows a linear correlation coefficient with the already selected feature that is, in absolute value, lower than the threshold\n- Keep adding features as long as the correlation constraint holds\n\nFor unsupervised problems, we have `y = None` and the algorithm is:\n- Take the couple of features that have the lowest absolute value of the linear correlation coefficient.\n- If it's lower than the threshold, consider these features\n- Keep adding features as long as the correlation matrix doesn't show off-diagonal elements whose absolute value is greater than the threshold. \n\n> transform(X)\n\nSelects the features according to the result of _fit_. It must be called after _fit_.\n\n> fit_transform(X,y=None)\n\nCalls _fit_ and then _transform_\n\n> get_support()\n\nReturns an array of _True_ and _False_ of size X.shape[1]. A feature is selected if the value on this array corresponding to its index is _True_, otherwise it's not selected.\n\n# Examples\n\nThe following examples explain how the main objects work. The code to run in advance for initializing the environment is:\n\n```python\nfrom collinearity import SelectNonCollinear\nfrom sklearn.feature_selection import f_regression\nimport numpy as np\nfrom sklearn.datasets import load_diabetes\n\nX,y = load_diabetes(return_X_y=True)\n```\n\n## Unsupervised problems\n\n\nThis example shows how to perform selection according to minimum collinearity in unsupervised problems. \n\nLet's consider, for this example, a threshold equal to 0.3.\n\n```python\nselector = SelectNonCollinear(0.3)\n```\n\nIf we apply the selection to the features and calculate the correlation matrix, we have:\n\n```python\nnp.corrcoef(selector.fit_transform(X),rowvar=False)\n\n# array([[1.       , 0.1737371 , 0.18508467, 0.26006082],\n#       [0.1737371 , 1.        , 0.0881614 , 0.03527682],\n#       [0.18508467, 0.0881614 , 1.        , 0.24977742],\n#       [0.26006082, 0.03527682, 0.24977742, 1.        ]])\n\n```\nAs we can see, no off-diagonal element is greater than the threshold.\n\n## Supervised problems\n\nFor this problem, we must set the value of the `scoring` argument in the constructor. \n\nLet's consider a threshold equal to 0.4 and a scoring equal to `f_regression`.\n\n```python\nselector = SelectNonCollinear(correlation_threshold=0.4,scoring=f_regression)\n\nselector.fit(X,y)\n```\n\nThe correlation matrix is:\n```python\nnp.corrcoef(selector.transform(X),rowvar=False)\n\n# array([[ 1.       ,  0.1737371 ,  0.18508467,  0.33542671,  0.26006082,\n#        -0.07518097,  0.30173101],\n#       [ 0.1737371 ,  1.        ,  0.0881614 ,  0.24101317,  0.03527682,\n#        -0.37908963,  0.20813322],\n#       [ 0.18508467,  0.0881614 ,  1.        ,  0.39541532,  0.24977742,\n#        -0.36681098,  0.38867999],\n#       [ 0.33542671,  0.24101317,  0.39541532,  1.        ,  0.24246971,\n#        -0.17876121,  0.39042938],\n#       [ 0.26006082,  0.03527682,  0.24977742,  0.24246971,  1.        ,\n#         0.05151936,  0.32571675],\n#       [-0.07518097, -0.37908963, -0.36681098, -0.17876121,  0.05151936,\n#         1.        , -0.2736973 ],\n#       [ 0.30173101,  0.20813322,  0.38867999,  0.39042938,  0.32571675,\n#        -0.2736973 ,  1.        ]])\n```\n\nAgain, no off-diagonal element is greater than the threshold in absolute value.\n\n## Use in pipelines\n\nIt's possible to use `SelectNonCollinear` inside a pipeline, if necessary.\n\n```python\npipeline = make_pipeline(SelectNonCollinear(correlation_threshold=0.4, scoring=f_regression), LinearRegression())\n```\n# Contact the author\n\nFor any questions, you can contact me at gianluca.malato@gmail.com",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/gianlucamalato/collinearity/archive/refs/tags/0.6.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gianlucamalato/collinearity",
    "keywords": "machine learning,collinearity,supervised models",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "collinearity",
    "package_url": "https://pypi.org/project/collinearity/",
    "platform": "",
    "project_url": "https://pypi.org/project/collinearity/",
    "project_urls": {
      "Download": "https://github.com/gianlucamalato/collinearity/archive/refs/tags/0.6.1.tar.gz",
      "Homepage": "https://github.com/gianlucamalato/collinearity"
    },
    "release_url": "https://pypi.org/project/collinearity/0.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library for removing collinearity in machine learning datasets",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10741887,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99a8abdd76f87d86c4b9b11f4eb985c6fa20169bcb07ae93ea9f82572433c0ad",
          "md5": "0ee971364a8083a1832ff0fe616139c5",
          "sha256": "667d6da12ac1785cb699e8285eaf2ff9d468d74b2abe36858a78d94dbd053a66"
        },
        "downloads": -1,
        "filename": "collinearity-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0ee971364a8083a1832ff0fe616139c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2280,
        "upload_time": "2021-06-23T07:37:49",
        "upload_time_iso_8601": "2021-06-23T07:37:49.025137Z",
        "url": "https://files.pythonhosted.org/packages/99/a8/abdd76f87d86c4b9b11f4eb985c6fa20169bcb07ae93ea9f82572433c0ad/collinearity-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1be50ba3f1a20f3899619cb36ebfb3a3ba3702d560a29f3e0eb75bfa8ccdbf2",
          "md5": "34a6f6125c5e4755680825bda7294179",
          "sha256": "aa3214ce69041380c292b6388a3e6e0e1dcfef480de8d715ad575cc18023477e"
        },
        "downloads": -1,
        "filename": "collinearity-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "34a6f6125c5e4755680825bda7294179",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5013,
        "upload_time": "2021-06-24T07:41:52",
        "upload_time_iso_8601": "2021-06-24T07:41:52.171968Z",
        "url": "https://files.pythonhosted.org/packages/a1/be/50ba3f1a20f3899619cb36ebfb3a3ba3702d560a29f3e0eb75bfa8ccdbf2/collinearity-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b2d9e6c89039a5a239f0025f10c6799d63a23ca608241efdbc600069854626",
          "md5": "45af25fcfd20661237ebc9ad10abb412",
          "sha256": "b24d97391118873b259ad4f8f500cbfafeb2e531a16534fe15b3e1c530fd323e"
        },
        "downloads": -1,
        "filename": "collinearity-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45af25fcfd20661237ebc9ad10abb412",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5027,
        "upload_time": "2021-06-25T10:31:45",
        "upload_time_iso_8601": "2021-06-25T10:31:45.814787Z",
        "url": "https://files.pythonhosted.org/packages/02/b2/d9e6c89039a5a239f0025f10c6799d63a23ca608241efdbc600069854626/collinearity-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02b2d9e6c89039a5a239f0025f10c6799d63a23ca608241efdbc600069854626",
        "md5": "45af25fcfd20661237ebc9ad10abb412",
        "sha256": "b24d97391118873b259ad4f8f500cbfafeb2e531a16534fe15b3e1c530fd323e"
      },
      "downloads": -1,
      "filename": "collinearity-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "45af25fcfd20661237ebc9ad10abb412",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5027,
      "upload_time": "2021-06-25T10:31:45",
      "upload_time_iso_8601": "2021-06-25T10:31:45.814787Z",
      "url": "https://files.pythonhosted.org/packages/02/b2/d9e6c89039a5a239f0025f10c6799d63a23ca608241efdbc600069854626/collinearity-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}