{
  "info": {
    "author": "TheCheapestPixels",
    "author_email": "TheCheapestPixels@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "panda3d-keybindings\n===================\n\nPanda3D comes with a nice API suite to work with input devices. In\nparticular, it has one for USB HIDs, and one for mouse and keyboard.\nWhat it does not have is a mechanism to build an abstraction over these\ndevices, so that a developer can define them in terms of a set of\nbuttons and axes, and it is a matter of configuration how actual inputs\non devices are mapped to those abstract inputs. A game's logic should\nnot be concerned with details like...\n\n* whether a 2D axis gets its values from a gamepad's stick or its four\n  buttons, from WASD, or a dance pad.\n* how the player wants the inputs from the devices combined. There may\n  be a different list of priorities for different abstract inputs with\n  regard what devices should be checked. A player may prefer to control\n  character movement on a gamepad, but functions like invoking and\n  working in menus with the keyboard.\n* how input is preprocessed. Badly manufactured sticks create noise near\n  the center, and may require a dead zone. An axis' amplitude may need\n  to be scaled or squared.\n* devices connecting or disconnecting. From a game developer's\n  perspective, these events should be dealt with under the hood.\n* how devices are identified. A player may use two flight sticks for a\n  space simulator. If they're of different makes, they can be identified\n  \"uniquely\", and should be mappable independent of one another. Even\n  with two identical sticks, there should be a way to check which is\n  which (\"Press trigger on left stick\"), and label them accordingly.\n  NOTE: Not implemented yet.\n* providing an interface to work with the mappings.\n  NOTE: Menu to display the current cofiguration exists, and\n  functionality to save the current configuration back to file. The\n  DeviceListener's API to change bindings, and menu functionality to do\n  so are missing. Also the menu so far exists only in\n  `examples/minimal/`.\n* if the state, when polled at different times during a frame, is still\n  the same; It just should be. This is quite an edge case, but may cause\n  hard to reproduce bugs.\n\n\nStatus\n------\n\nThis project's state is alpha, as features are still being added and its\nspecifications are liable to change. That being said, it is close to\nreaching beta.\n\n\nInstallation\n------------\n\n`pip install panda3d-keybindings`\n\n\nConcepts\n--------\n\n* A `virtual input` a button or axis with a semantic to the game, like\n  jumping, turning around moving, etc.; It has\n  * a type, which is one of\n    * `button`: `True` if the button is pressed, `False` otherwise.\n    * `trigger`: `True` for the frame in which the button is pressed.\n    * `repeater`: `True` whenever its interval elapses and the button is\n      still pressed.\n    * `axis`: A `float`.\n    * `axis2d`: `panda3d.core.Vec2`.\n    * `axis3d`: `panda3d.core.Vec3`.\n  * a list of mappings ordered by priority in which they are checked for\n    their device being present, and whether they have a non-zero / False\n    input value.\n  * a sensor definition for each mapping. This defines the buttons /\n    axes used, and specifies post-processing that is to be done on them.\n* A `context` is a set of `virtual input`s that is read together. It is\n  an organizational unit to make it easy for the application to activate\n  or deactivate parts of the user input interface. For example, opening\n  the game's ingame menu may activate the `menu` context, and deactivate\n  the `character_movement` one.\n* When a device is connected, it is assigned to a `player`, or kept\n  unassigned for the time being. Players will only be able to read data\n  from devices assigned to them.\n  NOTE: Currently only single-player assigners exist off-the-shelf.\n* There's a configuration file that defines for each `player` and each\n  `context` the `virtual_inputs` and in what order to read their\n  mappings. If no readable device is present for a `virtual_input`, its\n  value will be `None`, otherwise the first mapping with a value other\n  than a zero value or `False` determines the final value. If all\n  devices have a value of zero or `False`, that will be returned.\n  In other words, the highest-priority mapping that the player uses is\n  used.\n  NOTE: Currently no concept of players exists in the config file.\n\n\nExample\n-------\n\nSetting up an application for use with this module is easy:\n\n    from direct.showbase.ShowBase import ShowBase\n    from keybindings.device_listener import add_device_listener\n    from keybindings.device_listener import SinglePlayerAssigner\n\n    ShowBase()\n    add_device_listener(\n        assigner=SinglePlayerAssigner(),\n    )\n\nNow there is a `base.device_listener`. It assumes that the configuration\nfile is named `keybindings.config` and is present in the application's\n`base.main_dir`, and it creates a task at `sort=-10` that freezes this\nframe's input state. Other names file names and ways to handle freezing\ncan be configured.\nNOTE: Donnt remember off the top of my head how true that is.\n\nA keybinding configuration could look like this:\n\n    context demo_context\n      button demo_button\n        gamepad         face_a\n        flight_stick    trigger\n        keyboard        q\n\nWhen the context `demo_context` is read, ...\n\n    base.device_listener.read_context('demo_context')\n\n...the result may look like this:\n\n    {'demo_button': False}\n\nThis means that due to the config snippet above, the device listener has\nchecked whether a gamepad is connected; If so, the state of `face_a` is\nused, if not, the `flight_stick` is tested next, and so on. In this\nexample, a device has been found and the button has not been pressed.\n\n\nConfiguration File in Detail\n----------------------------\n\nAs mentioned above, this is a simple configuration file:\n\n    context demo_context\n      button demo_button\n        gamepad         face_a\n        flight_stick    trigger\n        keyboard        q\n\nThe `context` header indicates the name of the context.\n\nThe virtual input header below it defines both its type and name. As\nmentioned above, valid types are `button`, `trigger`, `axis`, `axis2d`,\nand `axis3d`. There is also `repeater`, which takes two additional\narguments, separated by `:` characters. The first is the initial\ncooldown, the second the repeating cooldown. When its button is pressed,\nand then kept pressed, it will return `True` in the first frame, then\nagain for one frame after the initial cooldown has passed, and\nthereafter whenever the repeating cooldown has passed. For example, a\nrepeater that fires after one second, and then every half second, would\nread `repeater:1.0:0.5`.\n\nThe mapping lines each start with a device name as managed by the\nassigner (by default Panda3D's device type names are used), and then has\none sensor for each dimension of the input. `button`, `trigger`,\n`repeater`, and `axis` are one-dimensional, and `axis2d` and `axis3d`\nare two- and three-dimensional respectively. However, in the case of\naxes, pairs of buttons can be used instead. For example:\n\n    context demo_context\n      axis turning\n        gamepad         right_x\n        keyboard        arrow_left arrow_right\n\nThe arrow buttons will now be read, and their combined value of -1, 0,\nor 1 will be determined.\n\nSensor names are as provided by Panda3D. Access to the mouse is given\nvia the sensors `mouse_x`, `mouse_y`, `mouse_x_delta`, and\n`mouse_y_delta`, with the two latter tracking frame-to-frame changes\n(without respect to frame time).\n\nEach sensor may also be post-processed after being read. Each such step\nis indicated with a flag, some of which may bear a numeric argument, and\nthey are again separated by `:` characters. For example, `right_x:flip`\nwould invert the axis (multiplying it with -1), while\n`right_x:deadzone=0.02` would turn all results between -0.02 and 0.02 to\n0.0.\n\n* `flip` multiplies an axis value (float) with -1, and has no argument.\n* `scale` multiplies an axis value with its argument.\n* `button<` and `button>` turn axis values into button values (boolean),\n  returning True if the axis value is greater / smaller or equal to the\n  argument; e.g. `right_x:button>=0.75` will trigger when the stick is\n  pressed far enough to the right.\n* `exp` magnifies the magnitude to the power of the argument. For\n  example `right_x:exp=2` would square the axis value, but preserve its\n  sign; -0.5 would be turned into -0.25, while -1, 0, and 1 are\n  preserved.\n* `deadzone`, as explained above, turns axis values within the\n  argument's range into 0.0. Without this, a stick could read at a very\n  low value, but still be the final value, while the player actually\n  wants to use a lower-priority device.\n\n\nControlling the Read\n--------------------\n\nThere are two aspects about reading and freezing the state: When it is\ndone, and how much time it should assume to have passed.\n\nBy default, a task is created at `sort=-10`. If you want to want to use\nanother value, you can pass a dict or arguments to `add_device_listener`\nto be passed on to the task creation.\n\n    add_device_listener(task_args=dict(sort=-1, priority=1))\n\nIf you want instead to control yourself when the input is frozen, you\ncan pass `task=False`, and then call `base.device_listener.read()`\nyourself.\n\nEither way by default `globalClock.dt` will be used to determine how\nmuch time has elapsed. If you want to determine that by yourself as well\n(which I would warn against; We're talking about inputs here, not the\ngame world's clock), you *will* have to use your own call as described\nabove, and pass a `dt` argument indicating the elapsed time. For a\ntrivial example, see `examples/minimal/main_2_manual_task.py`.\n\n\nTODO\n----\n\n* Upgrade examples\n* `doubleclick` and `multiclick` virtual input types\n* Uniquely identifying devices, and remove the NOTE above\n* Changing bindings at run time\n  * Update DeviceListener / Assigner API\n  * Add menu functionality\n  * Remove the NOTE above\n* Menu\n  * Abstract it out of `examples/minimal/`\n  * Develop menu along with DeviceListener's change-bindings API\n  * Write a new `device_tester`\n* Multiplayer ...\n  * Assigner\n  * config file\n  * Remove the NOTEs above\n* Click-and-drag support for mouse\n* Sphinx documentation\n* Raw keys: `keyboard = \"raw-z\"`; Requires Panda3D API support.\n* Throw events\n* `setup.py`: Go over `packages=` again.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TheCheapestPixels/panda3d-keybindings",
    "keywords": "panda3d keybinding keybindings keymapping",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "panda3d-keybindings",
    "package_url": "https://pypi.org/project/panda3d-keybindings/",
    "platform": null,
    "project_url": "https://pypi.org/project/panda3d-keybindings/",
    "project_urls": {
      "Homepage": "https://github.com/TheCheapestPixels/panda3d-keybindings"
    },
    "release_url": "https://pypi.org/project/panda3d-keybindings/0.3a0/",
    "requires_dist": [
      "panda3d",
      "toml"
    ],
    "requires_python": ">=3.5, <4.*",
    "summary": "A more abstract interface for using input devices in Panda3D.",
    "version": "0.3a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14165598,
  "releases": {
    "0.0.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "919482f80ba1ce5717daabf0df9ed102c3697ffc8ae53d6bdaa5491451f457f3",
          "md5": "a6aa8022cb5929a3f9615d16422e025b",
          "sha256": "ac18e1bdd6814ba30952a37400d30370048b2bb33609ff7e1ee509799b424533"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6aa8022cb5929a3f9615d16422e025b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <3.8.*",
        "size": 4789,
        "upload_time": "2020-01-31T23:17:19",
        "upload_time_iso_8601": "2020-01-31T23:17:19.146989Z",
        "url": "https://files.pythonhosted.org/packages/91/94/82f80ba1ce5717daabf0df9ed102c3697ffc8ae53d6bdaa5491451f457f3/panda3d_keybindings-0.0.1b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52bd526d3b3eecbd26d8b3c1665476e7b0009acd8b890a33393f30fc4594603c",
          "md5": "372538ea1aaca6434f71a2b9741c7efe",
          "sha256": "f605240cc888e8dead16042cc00b6fb355951f440c42b9e7bc9c2d0e950ceac6"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.2b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "372538ea1aaca6434f71a2b9741c7efe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <3.8.*",
        "size": 4789,
        "upload_time": "2020-02-06T16:31:07",
        "upload_time_iso_8601": "2020-02-06T16:31:07.732727Z",
        "url": "https://files.pythonhosted.org/packages/52/bd/526d3b3eecbd26d8b3c1665476e7b0009acd8b890a33393f30fc4594603c/panda3d_keybindings-0.0.2b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2f7bccb41a0f4c576dacf64903ca205b16b183e1c4824be79c0db275406f29e",
          "md5": "0a69a6d4e97383664f098e2f0e4fda04",
          "sha256": "da6b46fdfe88021515e7acee09f50d4305125b16f1411d7359b9fc42ac94d7ec"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.3b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a69a6d4e97383664f098e2f0e4fda04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <3.8.*",
        "size": 4787,
        "upload_time": "2020-02-07T17:18:21",
        "upload_time_iso_8601": "2020-02-07T17:18:21.646792Z",
        "url": "https://files.pythonhosted.org/packages/f2/f7/bccb41a0f4c576dacf64903ca205b16b183e1c4824be79c0db275406f29e/panda3d_keybindings-0.0.3b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e03b4f052842f1a9e5849beeb4ab83d3f9bbd576ed93bb240bd94475fa1d7b4",
          "md5": "5a2400eea6b28859ca97ecaf1a2b759a",
          "sha256": "f6d1c44976c7a1079672966ff94ec10b7436c14de07b560d80dac335a63c729e"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.4b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a2400eea6b28859ca97ecaf1a2b759a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4.*",
        "size": 7933,
        "upload_time": "2020-02-09T23:05:04",
        "upload_time_iso_8601": "2020-02-09T23:05:04.416444Z",
        "url": "https://files.pythonhosted.org/packages/4e/03/b4f052842f1a9e5849beeb4ab83d3f9bbd576ed93bb240bd94475fa1d7b4/panda3d_keybindings-0.0.4b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "504e66026333a8450ac2f2fc5b59512c285e6b1b52a9118831c93dacd3b4aa04",
          "md5": "57a30b183dad9e979e0c4ba66311cf5e",
          "sha256": "f2803297375dcc8be30eac385e9c1fe642b0be3fb9aaba8696e31e4040a77ff4"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.5b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57a30b183dad9e979e0c4ba66311cf5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4.*",
        "size": 11076,
        "upload_time": "2020-02-09T23:24:16",
        "upload_time_iso_8601": "2020-02-09T23:24:16.887948Z",
        "url": "https://files.pythonhosted.org/packages/50/4e/66026333a8450ac2f2fc5b59512c285e6b1b52a9118831c93dacd3b4aa04/panda3d_keybindings-0.0.5b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14d90ab73d67789f2cb7d4be6a3cfd5dc10ab08d65cbe46509448e8e125f438",
          "md5": "61263aa03a2a3e63f9b2342c6d1fe53c",
          "sha256": "a1d3ba6bb4cd05b677a32c9b41e05b8f2c27db1deed7edacecc89f977f9ef85d"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.6b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61263aa03a2a3e63f9b2342c6d1fe53c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4.*",
        "size": 11082,
        "upload_time": "2020-02-09T23:30:18",
        "upload_time_iso_8601": "2020-02-09T23:30:18.796961Z",
        "url": "https://files.pythonhosted.org/packages/d1/4d/90ab73d67789f2cb7d4be6a3cfd5dc10ab08d65cbe46509448e8e125f438/panda3d_keybindings-0.0.6b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b14441fe45041ce8c7a7abb9f89f9ea8f9525de2e2cbe93df7654cb754512c",
          "md5": "bac5281b83839f27c7abe9ae85492bc5",
          "sha256": "343d7c63fdf448d3c5c5c2a77d9ef2ef4df3c89f846f843e6a4e44d0b86ccdaf"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.0.7b0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bac5281b83839f27c7abe9ae85492bc5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5, <4.*",
        "size": 11176,
        "upload_time": "2021-04-24T15:02:36",
        "upload_time_iso_8601": "2021-04-24T15:02:36.660594Z",
        "url": "https://files.pythonhosted.org/packages/d7/b1/4441fe45041ce8c7a7abb9f89f9ea8f9525de2e2cbe93df7654cb754512c/panda3d_keybindings-0.0.7b0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0631a598d82e84f35a1706f3d1ee5b18911814a4c0a85fcdd561dd342ad00cc3",
          "md5": "712cabe8912d7f1658ad7b0401ceef54",
          "sha256": "99825d00d1bca516a641ff7e92c7869e7f38befd09f9a983f2eee69dc564c51c"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.1a0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "712cabe8912d7f1658ad7b0401ceef54",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5, <4.*",
        "size": 11611,
        "upload_time": "2021-06-12T22:55:03",
        "upload_time_iso_8601": "2021-06-12T22:55:03.733862Z",
        "url": "https://files.pythonhosted.org/packages/06/31/a598d82e84f35a1706f3d1ee5b18911814a4c0a85fcdd561dd342ad00cc3/panda3d_keybindings-0.1a0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbc36bb7acd40880eddc369c622fc9ab02c7dc242d3009c1a190c91d65945608",
          "md5": "c46490c09e2c0b6a364ae58204c9b48b",
          "sha256": "a2224ae154cec32d5aa5843214726bd3fd3ffddffe7058c162799eb3e1afb874"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c46490c09e2c0b6a364ae58204c9b48b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4.*",
        "size": 14513,
        "upload_time": "2021-11-16T02:34:38",
        "upload_time_iso_8601": "2021-11-16T02:34:38.461959Z",
        "url": "https://files.pythonhosted.org/packages/db/c3/6bb7acd40880eddc369c622fc9ab02c7dc242d3009c1a190c91d65945608/panda3d_keybindings-0.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94a1f64224aa40fda4fcb5eb22ef19fa6f28f8d324040b88ca9ff11703a8bc54",
          "md5": "1308a25329b8adec8a011f245e4539eb",
          "sha256": "1bf8043de9095bb2188fb3027b260a961745996b10581772ab15eaf169abbd12"
        },
        "downloads": -1,
        "filename": "panda3d_keybindings-0.3a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1308a25329b8adec8a011f245e4539eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4.*",
        "size": 11407,
        "upload_time": "2022-06-17T17:47:54",
        "upload_time_iso_8601": "2022-06-17T17:47:54.041310Z",
        "url": "https://files.pythonhosted.org/packages/94/a1/f64224aa40fda4fcb5eb22ef19fa6f28f8d324040b88ca9ff11703a8bc54/panda3d_keybindings-0.3a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94a1f64224aa40fda4fcb5eb22ef19fa6f28f8d324040b88ca9ff11703a8bc54",
        "md5": "1308a25329b8adec8a011f245e4539eb",
        "sha256": "1bf8043de9095bb2188fb3027b260a961745996b10581772ab15eaf169abbd12"
      },
      "downloads": -1,
      "filename": "panda3d_keybindings-0.3a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1308a25329b8adec8a011f245e4539eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <4.*",
      "size": 11407,
      "upload_time": "2022-06-17T17:47:54",
      "upload_time_iso_8601": "2022-06-17T17:47:54.041310Z",
      "url": "https://files.pythonhosted.org/packages/94/a1/f64224aa40fda4fcb5eb22ef19fa6f28f8d324040b88ca9ff11703a8bc54/panda3d_keybindings-0.3a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}