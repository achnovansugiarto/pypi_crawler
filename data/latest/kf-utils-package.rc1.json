{
  "info": {
    "author": "KFSEMBU",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Flask",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# kf_utils v2.0.1\n\nThis repository provides the utils package used in all **Knowledge Factory** microservices.\n\n**Table of contents:**\n- [Use this package in your code](#use-this-package-in-your-code)\n- [Available modules and methods](#available-modules-and-methods)\n- [Add new features, hotfixes or bugfixes](#add-new-features,-hotfixes-or-bugfixes)\n- [Run automatic tests](#run-automatic-tests)\n- [Build kf_utils as a PyPi package](#build-kf_utils-as-a-pypi-package)\n- [Project changelog](#project-changelog)\n\n\n\n## Use this package in your code\n\nFirst of all, to install this package using `pip`, use the following command:\n\n```shell\n# To download it from a PyPi repository\npip install kf-utils-package\n\n# Go to the kf_utils folder and execute this command\n# to install the package using setup.py config\npip install -e .\n```\n\nTo use this package in your code just import `kf_utils`:\n\n```python\n# Import the whole kf_utils package\nimport kf_utils\n\n# Import just the package/method you want to use\nfrom kf_utils import graphs             # graphs package\nfrom kf_utils.files import to_file      # to_file method from files package\n```\n\nWe really encourage you to import **just the module/method you want to use**, because it will always be more optimal \nthan importing the entire `kf_utils` package.\n\n\n\n## Available modules and methods\n\nAll the different packages, modules and methods available in this `kf_utils` are listed here:\n\n- [char_codec module](#char_codec-module)\n  - [CharCodec class](#charcodec-class)\n    - [extract_bracketed method](#extract_bracketed-method)\n    - [extract_quoted method](#extract_quoted-method)\n    - [quoted method](#quoted-method)\n    - [angled method](#angled-method)\n    - [bracketed method](#bracketed-method)\n    - [pointers method](#pointers-method)\n    - [properties method](#properties-method)\n    - [sequence method](#sequence-method)\n- [dicts module](#dicts-module)\n  - [clean_dict method](#clean_dict-method)\n- [extractors module](#extractors-module)\n  - [extract_angled method](#extract_angled-method)\n  - [extract_between_parenthesis method](#extract_between_parenthesis-method)\n  - [extract_between_delimiters method](#extract_between_delimiters-method)\n  - [extract_quoted method](#extract_quoted-method-v2)\n  - [extract_double_quoted method](#extract_double_quoted-method)\n  - [extract_single_quoted method](#extract_single_quoted-method)\n- [files module](#files-module)\n    - [base64_ method](#base64_-method)\n    - [copy_file method](#copy_file-method)\n    - [count_occurrences_in_file method](#count_occurrences_in_file-method)\n    - [delete_line_number method](#delete_line_number-method)\n    - [to_file method](#to_file-method)\n    - [delete method](#delete-method)\n    - [get_file_name_from_path method](#get_file_name_from_path-method)\n    - [file_split_name_ext method](#file_split_name_ext-method)\n    - [get_file method](#get_file-method)\n    - [get_file_content method](#get_file_content-method)\n    - [get_file_extension method](#get_file_extension-method)\n    - [remove_extension_from_file_path method](#remove_extension_from_file_path-method)\n    - [get_extension_from_file_name method](#get_extension_from_file_name-method)\n    - [get_directory_and_file_name_and_extension_from_path method](#get_directory_and_file_name_and_extension_from_path-method)\n    - [get_file_name method](#get_file_name-method)\n    - [get_file_root_path method](#get_file_root_path-method)\n    - [to_json method](#to_json-method)\n    - [exist method](#exist-method)\n    - [drop_dir method](#drop_dir-method)\n    - [drop_file method](#drop_file-method)\n    - [from_json method](#from_json-method)\n    - [from_yaml method](#from_yaml-method)\n    - [path_exists method](#path_exists-method)\n    - [grep method](#grep-method)\n    - [head method](#head-method)\n    - [tail method](#tail-method)\n    - [import_library method](#import_library-method)\n    - [make_dirs method](#make_dirs-method)\n    - [remove_file_protocol method](#remove_file_protocol-method)\n    - [to_file_line method](#to_file_line-method)\n    - [xst_file method](#xst_file-method)\n    - [extract_files_from_zip_folder method](#extract_files_from_zip_folder-method)\n    - [get_file_name_length method](#get_file_name_length-method)\n    - [get_file_size method](#get_file_size-method)\n- [graphs module](#graphs-module)\n  - [load_graph method](#load_graph-method)\n  - [convert_response_query_graph_to_df method](#convert_response_query_graph_to_df-method)\n- [hashers module](#hashers-module)\n  - [HashAlgorithm class](#hashalgorithm-class)\n  - [crc method](#crc-method)\n  - [scrc method](#scrc-method)\n  - [hash method](#hash-method)\n  - [md5 method](#md5-method)\n  - [hashbin method](#hashbin-method)\n  - [md5int method](#md5int-method)\n  - [uuids method](#uuids-method)\n- [lang module](#lang-module)\n  - [alpha2 method](#alpha2-method)\n- [lists module](#lists-module)\n  - [duplicated method](#duplicated-method)\n  - [index method](#index-method)\n  - [ordered_set method](#ordered_set-method)\n  - [remove_duplicates method](#remove_duplicates-method)\n- [replacers module](#replacers-module)\n  - [replace_chars method](#replace_chars-method)\n  - [replace_substrings method](#replace_substrings-method)\n  - [replace_match_boundaries method](#replace_match_boundaries-method)\n  - [replace_quoted method](#replace_quoted-method)\n  - [un_pad_fixed_locations method](#un_pad_fixed_locations-method)\n  - [replace method](#replace-method)\n  - [replace_angled method](#replace_angled-method)\n  - [replace_delimited method](#replace_delimited-method)\n- [strings module](#strings-module)\n  - [indices method](#indices-method)\n  - [is_get_list method](#is_get_list-method)\n  - [json_str_to_dict method](#json_str_to_dict-method)\n  - [mask_quoted method](#mask_quoted-method)\n  - [unmask_quoted method](#unmask_quoted-method)\n  - [nnl method](#nnl-method)\n  - [remove_comments method](#remove_comments-method)\n  - [slash method](#slash-method)\n  - [tokenize method](#tokenize-method)\n  - [unaccent method](#unaccent-method)\n  - [url_tail method](#url_tail-method)\n  - [url_head method](#url_head-method)\n  - [regex method](#regex-method)\n- [timers module](#timers-module)\n  - [now method](#now-method)\n  - [str_to_datetime method](#str_to_datetime-method)\n  - [Timer class](#timer-class)\n    - [now method](#now-method-v2)\n    - [trig method](#trig-method)\n    - [console method](#console-method)\n    - [delta method](#delta-method)\n    - [deltas method](#deltas-method)\n- [data_types package](#data_types-package)\n    - [uri module](#uri-module)\n      - [URI class](#uri-class)\n      - [URL class](#url-class)\n\n\n### `char_codec` module\n\n```python\nimport kf_utils.char_codec\nfrom kf_utils import char_codec\n```\n\nClass `CharCodec` is a helper to code and decode characters or strings of characters.\n\n> **Note** Main use cases: parsers, compiler, and text analysers in general that need to find patterns and replace \n> portions of text that match the patterns with another text or symbol.\n\n#### `CharCodec` class\n\nString coder and decoder.\n\nAttributes:\n- **code:** The code taking the place of the substring to be replaced.\n- **to_replace:** The substring that is being replaced.\n- **text:** The text containing the substring to be replaced.\n- **exclude:** A text NOT to replace if found inside the substring being replaced.\n\n##### `extract_bracketed` method\n\nExtracts string between left and right delimiters.\n\n- **Params:**\n  - **text: str** – string to be analysed.\n  - **left: str** – left delimiter.\n  - **right: str** – right delimiter.\n- **Returns: list** – extracted parts listed as strings.\n\n##### `extract_quoted` method\n\nExtracts text between double or single quotes unless it equals the 'exclude' text.\n\n- **Params:**\n  - **text: str** – string to be analysed.\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: list** – extracted parts listed as strings.\n\n##### `quoted` method\n\nReplaces a substring inside a double or single quoted text with the code.\n\n- **Returns: str** – the text with the replaced substring.\n\n##### `angled` method\n\nReplaces everything between &lt;&gt;, uses a special pattern that avoids problems with statements containing operators \nlike &lt; and &gt;.\n\n- **Params:**\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: str** – the text with angled chars replaced.\n\n##### `bracketed` method\n\nReplaces a substring inside parenthesis, square brackets, curly brackets, angles or disparate delimiters with the code.\n\n- **Params:**\n  - **left: str** – left delimiter.\n  - **right: str** – right delimiter.\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: str** – the text with bracketed chars replaced.\n\n##### `pointers` method\n\nReplaces pointers to functions (e.g., the dot in \"class.function_name(*args, **kwargs))\" with the code.\n \n- **Returns: list** – function with pointers replaced.\n\n##### `properties` method\n\nReplaces invocation to method or class properties.\n\n- **Returns: list** – function with pointers replaced.\n\n**Example:**\n```python\nmd5 = \"self.io().hash\"\n\n# Returns\nmd5 = \"self.io()<code>hash\"\n```\n\n##### `sequence` method\n\nReplaces each inner 'x' char with the code in a sequence of words separated with 'x'. E.g., with '.' as the \nseparator and &lt;code&gt; representing whatever code you choose, e.g. &lt;&#95;&#95;DOT&#95;&#95;&gt;\n\nNotice that the tokenizer is able to remove comments, which in this case is highly convenient.\n\n> **Note**\n> `remove_comments` defaults to **True**, thus this argument here is superfluous, but we keep it for the \n> sake of clarity and documentation.\n\n- **Returns: list** – function with pointers replaced.\n\n**Example:**\n```python\nfrom kf_utils.char_codec import CharCodec\n\ntext: str = \"com.nttdata.dgi.crud.Compiler. t1 = sequence.of.dots.here # comment\"\ncode: str = \"<__DOT__>\"\nto_replace: str = \".\"\nreplacer: CharCodec = CharCodec(text=text, to_replace=to_replace, code=code)\n\nnew_text: str = replacer.sequence()\nprint(new_text)         # \"com<__DOT__>nttdata<__DOT__>dgi<__DOT__>crud<__DOT__>Compiler<__DOT__>\"\n```\n\n***\n\n### `dicts` module\n\n```python\nimport kf_utils.dicts\nfrom kf_utils import dicts\n```\n\nMethods related with dicts management.\n\n#### `clean_dict` method\n\nDelete key from a dict where value is None.\n\n- **Params:**\n  - **data_dict: dict** – dictionary to clean.\n- **Returns: dict** – dictionary with cleaned key-values.\n\n**Example:**\n```python\nfrom kf_utils.dicts import clean_dict\n\ndict_with_none_values: dict = {\"id\": \"123\", \"field\": None}      # GIVEN a dict with None values\n\nnew_clean_dict: dict = clean_dict(dict_with_none_values)        # RETURNS a new dict without None values\nprint(new_clean_dict)                                           # {\"id\": \"123\"}\n```\n\n***\n\n### `extractors` module\n\n```python\nimport kf_utils.extractors\nfrom kf_utils import extractors\n```\n\nHelpers for advance extraction of substrings.\n\n#### `extract_angled` method\n\nExtracts text between &lt; and &gt;. \n\nCopes with the situation: `var_name = 1 > 2`.\n\n- **Params:**\n  - **txt: str** – txt to be analysed.\n- **Returns: list** – extracted parts listed.\n\n#### `extract_between_parenthesis` method\n\nExtracts text between '(' and ')'.\n\n- **Params:**\n  - **txt: str** – txt to be analysed.\n- **Returns: list** – extracted parts listed.\n\n#### `extract_between_delimiters` method\n\nExtracts text between any left char and right car.\n\n**BEWARE THAT** the last right char is included and needs to be removed.\n\n- **Params:**\n  - **txt: str** – txt to be analysed.\n  - **left: str** – left delimiter.\n  - **right: str** – right delimiter.\n- **Returns: list** – extracted parts listed.\n\n#### `extract_quoted` method<a name=\"extract_quoted-method-v2\"></a>\n\nExtracts text between double or single quotes unless it equals the 'exclude' text.\n\n- **Params:**\n  - **quoted_txt: str** – quoted text to be analysed.\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: list** – extracted parts listed.\n\n#### `extract_double_quoted` method\n\nExtracts text between double quotes unless it equals the 'exclude' text.\n\n- **Params:**\n  - **quoted_txt: str** – double-quoted text to be analysed.\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: list** – extracted parts listed.\n\n#### `extract_single_quoted` method\n\nExtracts text between single quotes unless it equals the 'exclude' text.\n\n- **Params:**\n  - **quoted_txt: str** – single-quoted text to be analysed.\n  - **exclude: str** – text to exclude. By default, it is set to None.\n- **Returns: list** – extracted parts listed.\n\n***\n\n### `files` module\n\n```python\nimport kf_utils.files\nfrom kf_utils import files\n```\n\nMethods related with files and directories management\n\n#### `base64_` method\n\nReturns the content of a file as a Base64 string\n\n- **Params:**\n  - **file_path: str** – path to the file.\n- **Returns: str** – content of the file encoded as Base64 string.\n\n#### `copy_file` method\n\nCopies source file to target file.\n\n- **Params:**\n  - **source_file_path: str** – file to be copied.\n  - **target_file_path: str** – file that will be created containing the source file content.\n\n#### `count_occurrences_in_file` method\n\nReturns the number of times that the text occurs in the file.\n\n- **Params:**\n  - **txt: str** – text to find in the file content.\n  - **file_path: str** – path to the file.\n  - **case_sensitive: bool** – whether the search is case-sensitive. By default, it is set to True.\n- **Returns: int** – the number of times that the text occurs in the file.\n\n#### `delete_line_number` method\n\nRemoves a line from a file.\n\n- **Params:**\n  - **file_path: str** – file to edit.\n  - **line: int** – number of the line to be removed.\n\n#### `to_file` method\n\nWrites a text into a file.\n\n- **Params:**\n  - **txt: str** – text to be wrote into the file.\n  - **path: str** – path where the file will be created.\n\n#### `delete` method\n\nRemoves all occurrences of a text from inside a file.\n\n- **Params:**\n  - **txt: str** – text to be removed in the file.\n  - **file_path: str** – path to the file.\n\n#### `get_file_name_from_path` method\n\nGiven a full file path name, returns just the filename.\n\n- **Params:**\n  - **path: str** – full file path name.\n- **Returns: str** – filename extracted from the path.\n\n#### `file_split_name_ext` method\n\nGiven a complete file path name, it separates the name from the extension.\n\n- **Params:**\n  - **file_name: str** – complete file path name.\n- **Returns: (str, str)** – filename, extension.\n\n#### `get_file` method\n\nGiven the full file path name, it returns the name and the extension of the file.\n\n- **Params:**\n  - **path_filename: str** – full file path name.\n- **Returns: (str, str)** – name, extension.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file\n\nwindows_file_path: str = 'C:\\\\utils\\\\README.md'\nlinux_file_path: str = '/home/README.md'\nfolder_path: str = 'C:\\\\folder'\n\nwindows: tuple[str, str] = get_file(windows_file_path)\nlinux: tuple[str, str] = get_file(linux_file_path)\nfolder: tuple[str, str] = get_file(folder_path)\n\nprint(windows)      # ('README', 'md')\nprint(linux)        # ('README', 'md)\nprint(folder)       # ('folder', '')\n```\n\n#### `get_file_content` method\n\nReturns the content of a file as a string.\n\n- **Params:**\n  - **path: str** – the path filename.\n  - **encoding: str** – the encoding of the content if known, otherwise defaults to `'utf-8'`.\n  - **bytes_number: int** – the number of bytes to read; if '0' the entire file is read.\n- **Returns: str** – the file content as a string.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file_content\n\nfile_path: str = 'C:\\\\files\\\\test.txt'\n\nfile_content: str = get_file_content(file_path)\n\nprint(file_content)     # I'm the test file content\n```\n\n#### `get_file_extension` method\n\nReturns the file extension from a path.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n- **Returns: str** – string with the extension of the file.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file_extension\n\nfile: str = \"/home/test.txt\"                # GIVEN a file path\n\nextension: str = get_file_extension(file)   # RETURNS the extension of the file\nprint(extension)                            # \"txt\"\n```\n\n#### `remove_extension_from_file_path` method\n\nGiven the complete file path, remove the file extension.\n\n- **Params:**\n  - **file_path: str** – path where the file is.\n- **Returns: str** – the entire file path without extension of the file.\n\n#### `get_extension_from_file_name` method\n\nGiven the complete file path, remove the entire file path and preserve the extension.\n\n- **Params:**\n  - **file_path: str** – path where the file is.\n- **Returns: (str, str)** – the name and extension of the file.\n\n**Example:**\n```python\nfrom kf_utils.files import get_extension_from_file_name\n\nwindows_file_path: str = 'C:\\\\utils\\\\README.md'\nlinux_file_path: str = '/home/README.md'\nfolder_path: str = 'C:\\\\folder'\n\nwindows: tuple[str, str] = get_extension_from_file_name(windows_file_path)\nlinux: tuple[str, str] = get_extension_from_file_name(linux_file_path)\nfolder: tuple[str, str] = get_extension_from_file_name(folder_path)\n\nprint(windows)      # ('C:\\\\utils\\\\README', 'md')\nprint(linux)        # ('/home/README', 'md)\nprint(folder)       # ('C:\\\\folder', '')\n```\n\n#### `get_directory_and_file_name_and_extension_from_path` method\n\nGiven the complete file path, remove the entire file path and preserve the file name.\n\n- **Params:**\n  - **path: str** – path where the file is.\n- **Returns: (str, str, str)** – directory of the file, file name and extension.\n\n**Example:**\n```python\nfrom kf_utils.files import get_directory_and_file_name_and_extension_from_path\n\nwindows_file_path: str = 'C:\\\\utils\\\\README.md'\nlinux_file_path: str = '/home/README.md'\nfolder_path: str = 'C:\\\\folder'\n\nwindows: tuple[str, str, str] = get_directory_and_file_name_and_extension_from_path(windows_file_path)\nlinux: tuple[str, str, str] = get_directory_and_file_name_and_extension_from_path(linux_file_path)\nfolder: tuple[str, str, str] = get_directory_and_file_name_and_extension_from_path(folder_path)\n\nprint(windows)      # ('C:\\\\utils', 'README', 'md')\nprint(linux)        # ('/home', 'README', 'md)\nprint(folder)       # ('C:', '', 'folder)\n```\n\n#### `get_file_name` method\n\nExtracts the file name and extension from a path.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n- **Returns: str** – file 'name.extension'.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file_name\n\nfile_path: str = \"/home/test.txt\"           # GIVEN an absolute path to a file\n\nfile_name: str = get_file_name(file_path)   # RETURNS the file name and extension\nprint(file_name)                            # \"test.txt\"\n```\n\n#### `get_file_root_path` method\n\nGiven the complete file path, remove the file name from the path.\n\n- **Params:**\n  - **file_path: str** – path where the file is.\n- **Returns: str** – path to the directory in which a file is located without the file name.\n\n#### `to_json` method\n\nSave a dictionary to a JSON file.\n\n- **Params:**\n  - **dict_data: dict** – dictionary to save to json file.\n  - **path: str** – absolute or relative path where the json will be saved.\n\n**Example:**\n```python\nfrom kf_utils.files import to_json, exist\n\nemployee_file_path: str = '/home/employee.json'\nemployee: dict = {\n  \"employee\": {\n    \"name\": \"John\", \n    \"age\": 30, \n    \"city\": \"New York\"\n  }\n}\n\nto_json(employee, employee_file_path)\n\n# Does employee.json file exist?\nprint(exist(employee_file_path))       # True\n```\n\n#### `exist` method\n\nCheck if the file exists.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n- **Returns: bool** – boolean indicating if the file exists.\n\n**Example:**\n```python\nfrom kf_utils.files import exist\n\nexisting_file_path: str = '/home/this_file_exists.txt'\nnot_existing_file_path: str = '/home/this_file_does_not_exists.txt'\n\nexisting_file_exist: bool = exist(existing_file_path)\nnot_existing_file_exist: bool = exist(not_existing_file_path)\n\nprint(existing_file_exist)          # True\nprint(not_existing_file_exist)      # False\n```\n\n#### `drop_dir` method\n\nRecursively removes a directory tree from the file system.\n\n- **Params:**\n  - **dir_path: str** – path to the directory.\n\n#### `drop_file` method\n\nRemoves a file from the file system.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n\n**Example:**\n```python\nfrom kf_utils.files import drop_file, exist\n\nfile_path: str = '/home/test.txt'\n\ndrop_file(file_path)\n\n# Does test.txt file exist?\nprint(exist(file_path))        # False\n```\n\n#### `from_json` method\n\nReturns the Python dictionary out of a JSON file.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the json file to load.\n- **Returns: dict** – file content as a Python dict.\n\n**Example:**\n```python\nfrom kf_utils.files import from_json\n\nemployee_file_path: str = '/home/employee.json'\n\nemployee: dict = from_json(employee_file_path)\n\nprint(employee)     # {\"employee\":{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}}\n```\n\n#### `from_yaml` method\n\nReturns the Python dictionary out of a YAML file.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the YAML file to load.\n- **Returns: dict** – file content as a Python dict.\n\n**Example:**\n```python\nfrom kf_utils.files import from_yaml\n\nemployee_file_path: str = '/home/employee.yaml'\n\nemployee: dict = from_yaml(employee_file_path)\n\nprint(employee)     # {\"employee\":{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}}\n```\n\n#### `path_exists` method\n\nChecks whether a file or directory exists or not.\n\n- **Params:**\n  - **path: str** – the path to the dir or file.\n- **Returns: bool** – the result of the checking.\n\n#### `grep` method\n\nChecks whether a file or directory exists or not.\n\n- **Params:**\n  - **file: str** – the file containing the text to grep.\n  - **text: str** – the string to find in the file content.\n  - **case_sensitive: bool** – if False, the comparison is insensitive to the letter casing. By default, it is set \n    to True.\n- **Returns: Iterator[str]** – the result of the checking.\n\n#### `head` method\n\nReturns the first **n** lines of a text file. If the number of lines is negative or the forwards flag is set to \nFalse, the lines are reversed.\n\n- **Params:**\n  - **file_path: str** – path to the file containing the text.\n  - **lines: int** – number of lines to be returned.\n  - **encoding: str** – the encoding of the content if known, otherwise defaults to 'utf-8'.\n  - **forwards: bool** – whether the lines should be reversed. By default, it is set to True.\n- **Returns: Iterator[str]** – the extracted lines from the file content.\n\n#### `tail` method\n\nReturns the last **n** lines of a text file. If the number of lines is negative or the forwards flag\nis set to False, the lines are reversed.\n\n- **Params:**\n  - **file_path: str** – path to the file containing the text.\n  - **lines: int** – number of lines to be returned.\n  - **encoding: str** – the encoding of the content if known, otherwise defaults to 'utf-8'.\n  - **forwards: bool** – whether the lines should be reversed. By default, it is set to True.\n- **Returns: Iterator[str]** – the extracted lines from the file content.\n\n#### `import_library` method\n\nImports a library dynamically if installed.\n\n> **Note** Use Case: control the installation of different libraries based on the Operating System, the version of \n> the library, the dynamical installation of one library or another (e.g., install NLTK or spaCy?), etc.\n> \n> See the DGI/SEMBU `FilePersistor.select()` method for a Use Case where the content of the file is returned as a \n> spaCy Doc if spaCy is installed or as a string if not installed.\n\n> **Warning** Make sure the library `iadn` is installed.\n\n- **Params:**\n  - **package: str** – package to be installed.\n- **Returns: Distribution** – the import statement as a Distribution object.\n\n#### `make_dirs` method\n\nGiven the complete path to a file, creates the directories preceding the name of the file.\n\n- **Params:**\n  - **file_path: str** – a relative or absolute path or path file name.\n\n**Example:**\n```python\nfrom kf_utils.files import make_dirs, exist\n\nfile_directory: str = '/home/testing'\n\n# Does file_directory exist?\nprint(exist(file_directory))       # False\n\nfile_to_create: str = file_directory + '/test.txt'\n\nmake_dirs(file_to_create)\n\n# Does file_directory exist?\nprint(exist(file_directory))       # True\n```\n\n#### `remove_file_protocol` method\n\nRemoves `file:` and `file://` from an url string, like in `'file:../test/files/eDeclaration.xsd'` or `'file:///home/paula/.\nbashrc'`.\n\n- **Params:**\n  - **url: str or URL** – url to be modified.\n- **Returns: str** – url without `'file://'` protocol.\n\n#### `to_file_line` method\n\nInserts a line in a file containing multiple lines.\n\n- **Params:**\n  - **txt: str** – text to add in the file.\n  - **file_path: str** – path to the file.\n  - **index: int** – number of the line where the text will be inserted.\n\n#### `xst_file` method\n\nChecks whether a file or directory exists or not.\n\n- **Params:**\n  - **path: str** – the path to the dir or file.\n- **Returns: bool** – the result of the checking.\n\n#### `extract_files_from_zip_folder` method\n\nGiven the complete zip file path, unzip the documents zipped.\n\n- **Params:**\n  - **save_file_path: str** – path where the zip file is.\n  - **temporal_folder: str** – path where the zip object will be temporally extracted.\n- **Returns: list[str]** – list with the path to each unzipped file.\n\n#### `get_file_name_length` method\n\nReturn the length of the file name.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n- **Returns: int** – int with the length of the file name.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file_name_length\n\nfile_name: str = \"/home/test.txt\"\n\nfile_name_length: int = get_file_name_length(file_name)\nprint(file_name_length)     # 4\n```\n\n#### `get_file_size` method\n\nReturn the file size.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the file.\n- **Returns: int** – bytes value of the file size.\n\n**Example:**\n```python\nfrom kf_utils.files import get_file_size\n\nfile_name: str = \"/home/test.txt\"\n\nfile_size: int = get_file_size(file_name)\nprint(file_size)        # 10769322\n```\n\n***\n\n### `graphs` module\n\n```python\nimport kf_utils.graphs\nfrom kf_utils import graphs\n```\n\nMethods related with graphs management\n\n#### `load_graph` method\n\nReturns an instance of Graph from a file.\n\n- **Params:**\n  - **file_path: str** – absolute or relative path of the graph.\n- **Returns: Graph** – Graph loaded.\n\n**Example:**\n```python\nfrom kf_utils.graphs import load_graph\n\ngraph = load_graph('home/test.ttl') # -> Graph()\n```\n\n#### `convert_response_query_graph_to_df` method\n\nTransforms the result of an rdf query using the rdflib library to a dataframe.\n\n- **Params:**\n  - **result_query: rdflib.query.Result** – rdflib query result.\n- **Returns: pandas.DataFrame** – transformed query result to a dataframe.\n\n***\n\n### `hashers` module\n\n```python\nimport kf_utils.hashers\nfrom kf_utils import hashers\n```\n\nHelpers for custom hashing\n\n#### `HashAlgorithm` class\n\nHashing methods enum.\n\nIt contains:\n1. md5\n2. sha1\n3. sha256\n\n#### `crc` method\n\nReturns the CRC of a text as an int. Uses `zlib`.\n\n- **Params:**\n  - **value** – the value to hash.\n- **Returns: int** – the CRC of the text as int.\n\n#### `scrc` method\n\nReturns the CRC of a text as a string. Uses `zlib`.\n\n- **Params:**\n  - **value** – the value to hash.\n- **Returns: int** – the CRC of the text as string.\n\n#### `hash` method\n\nReturns the hash of a file content.\n\n- **Params:**\n  - **file: str** – the name of the file.\n  - **algorithm: HashAlgorithm** – the type of hash. By default, it is set to md5.\n- **Returns: str** – the hash of a file as string.\n\n#### `md5` method\n\nReturns the MD5 hash as a string.\n\n- **Params:**\n  - **text: str** – text to hash.\n- **Returns: str** – MD5 of the text as string.\n\n#### `hashbin` method\n\nReturns the hash of a binary file content.\n\n- **Params:**\n  - **file: str** – path to the file.\n  - **algorithm_type: HashAlgorithm** – algorithm to use to hash the file content. By default, is set to md5.\n- **Returns: str** – the file content hashed using a specific algorithm as string.\n- **Raises:**\n  - **NotImplemented** – if the algorithm type is not implemented\n\n**Example:**\n```python\nfrom kf_utils.hashers import hashbin, HashAlgorithm\n\nfile_path: str = '/home/test.txt'\n\nmd5_hash_content: str = hashbin(file_path)\nsha256_hash_content: str = hashbin(file_path, HashAlgorithm.sha256)\n\nprint(md5_hash_content)         # dd18bf3a8e0a2a3e53e2661c7fb53534\nprint(sha256_hash_content)      # a6ed0c785d4590bc95c216bcf514384eee6765b1c2b732d0b0a1ad7e14d3204a\n```\n\n#### `md5int` method\n\nReturns the MD5 hash as an int.\n\n- **Params:**\n  - **text** – text to hash.\n- **Returns: int** – MD5 hash as integer.\n\n#### `uuids` method\n\nReturns a standard 4-UUID as a string.\n\n- **Returns: str** – standard 4-UUID as a string.\n\n***\n\n### `lang` module\n\n```python\nimport kf_utils.lang\nfrom kf_utils import lang\n```\n\nLanguage functools\n\n#### `alpha2` method\n\nReturns the alpha-2 version of an expanded idb lang, like from 'en-US' into 'en'.\n\n- **Params:**\n  - **lang: str** – idb version of the lang.\n- **Returns: str** – alpha-2 version of the lang.\n\n***\n\n### `lists` module\n\n```python\nimport kf_utils.lists\nfrom kf_utils import lists\n```\n\nManipulation of lists\n\n#### `duplicated` method\n\nReturns True if an element of a list contains duplicated elements, or False otherwise.\n\n- **Params:**\n  - **elements: list** – list to be analysed.\n- **Returns: bool** – whether the list contains duplicate elements.\n\n#### `index` method\n\nReturns the position of an string element in a list or None if not found.\n\n- **Params:**\n  - **list&#95;: list** – the list to look up into.\n  - **pattern: str** – the string to find within the list.\n  - **case_insensitive: bool** – if True the search does not care about the case of the pattern. By default, it is \n    set to True.\n- **Returns: int** – the position of the pattern, an integer, or None if not found.\n\n#### `ordered_set` method\n\nRemoves duplicate items from a list without altering the occurrence order. Faster than OrderedDict.\n\n- **Params:**\n  - **items: list** – list of items to order and remove duplicate.\n- **Returns: list** – the given list without duplicate items.\n\n#### `remove_duplicates` method\n\nRemoves duplicated elements from a list.\n\n- **Params:**\n  - **vector: list** – list of items.\n- **Returns: list** – list without duplicate items.\n\n***\n\n### `replacers` module\n\n```python\nimport kf_utils.replacers\nfrom kf_utils import replacers\n```\n\nHelpers for advanced string replacement\n\n#### `replace_chars` method\n\nReturns a str where mapped `{'char': 'replacer', ...}` are replaced.\n\n- **Params:**\n  - **txt: str** – text where to replace specific chars.\n  - **trans: dict** – dict that maps specific characters and its replacer. E.g.: `{'char': 'replacer', 'prod': \n    'test', 'author': 'SEMBU'}`.\n- **Returns: str** – replaced text as string.\n\n#### `replace_substrings` method\n\nReplaces multiples substrings in a text with the pairs (`source_substring`, `target_substring`).\n\n- **Params:**\n  - **txt: str** – text where to replace specific substrings.\n  - **tuple_list: list[tuple[str, str]]** – list of pairs (`source_substring`, `target_substring`).\n- **Returns: str** – replaced text as string.\n\n**Example:**\n```python\nfrom kf_utils.replacers import replace_substrings\n\ntext: str = \"The quick brown fox jumps over the lazy dog\"                   # GIVEN the text \"The quick brown fox jumps over the lazy dog\"\nreplacer: list[tuple[str, str]] = [(\"brown\", \"red\"), (\"lazy\", \"quick\")]     # AND the list of pairs [(\"brown\", \"red\"), (\"lazy\", \"quick\")]\n\nnew_text: str = replace_substrings(text, replacer)                          # RETURNS \"The quick red fox jumps over the quick dog\"\nprint(new_text)                                                             # \"The quick red fox jumps over the quick dog\"\n```\n\n#### `replace_match_boundaries` method\n\nReplaces a word in a string but not other words containing that word.\n\n- **Params:**\n  - **to_replace: str** – text with substrings to be replaced.\n  - **tuples: list[tuple[str, str]]** –  a list of tuples containing the substring to match and the replacer substring: \n    (`source_substring`, `target_substring`).\n  - **escape_chars: dict** – a list of tuples containing special chars that need to be coded before the replacement. \n    By default, it is set to None.\n  - **mask_quoted: bool** – if False, quoted substrings inside the `to_replace` will not be masked. Masking is used to \n    avoid unwanted boundaries inside the `to_replace` string. By default, it is set to False.\n- **Returns: str** – replaced text as string.\n\n**Example:**\n```python\nfrom kf_utils.replacers import replace_match_boundaries\n\ntext: str = \"allowedX and allowed and allowedXX\"                # GIVEN the string \"allowedX and allowed and allowedXX\"\nreplacer: list[tuple[str, str]] = [(\"allowed\", \"ALLOWED\")]      # AND the list of pairs [(\"allowed\", \"ALLOWED\")]\n\nnew_text: str = replace_match_boundaries(text, replacer)        # RETURNS \"allowedX and ALLOWED and allowedXX\"\nprint(new_text)                                                 # \"allowedX and ALLOWED and allowedXX\"\n```\n\n#### `replace_quoted` method\n\nReplaces a portion of text (the `to_replace`) enclosed with double or single quotes (the `text_to_replace`) with an \nalternative text, unless it equals the `exclude` text.\n\n> **Note**\n> See the Compiler class within the Persistor package to see an example of how this is used to code and decode dots \n> (.) occurring between quotes.\n\n- **Params:**\n  - **quoted_txt: str** – the text containing quoted words and possibly unquoted words.\n  - **to_replace: str** –  the text inside the quotes to be replaced.\n  - **replacer: str** – the text used to swap the to_replace var with.\n  - **exclude: str** – do not apply the replacement if the quoted text contains this text. By default, it is set to \n    None.\n- **Returns: str** – replaced text as string.\n\n**Example:**\n```python\nfrom kf_utils.replacers import replace_quoted\nfrom kf_utils.hashers import hash\n\ntext: str = ''' a text with \"double quoted dots .\" and a p.function('.') call'''\n\nnew_text: str = replace_quoted(text, '.', hash('.'), '.')\nprint(new_text)                                             # ''' a text with \"double quoted dots 5058f1af8388633f609cadb75a75dc9d and a p.function('.') call'''\n\n# In the new_text all quoted text has been replaced with the dot hash, except in p.function('.'), since:\n#   1. The dot between p and function is not double or single quoted.\n#   2. The argument of the function contains the string to exclude.\n```\n\n#### `un_pad_fixed_locations` method\n\nGiven a text padded with padding_char, and a list with `(substring, start, end)` tuples, it replaces the portions that \nhad been padded with the original text.\n\n- **Params:**\n  - **quoted_txt: str** – the text containing the substrings that are to be replaced with the masker.\n  - **to_replace: list[tuple]** –  the list of tuples containing the `(masked_substrings, start, end)`.\n- **Returns: str** – replaced text as string.\n\n#### `replace` method\n\nReplaces a text with the items in a list, except if the item is to be excluded.\n\n- **Params:**\n  - **original_txt: str** – the text original text to be analysed.\n  - **to_replace: str** –  the text to be replaced.\n  - **replacer: str** – the text used to swap the to_replace var with.\n  - **listed_terms: list[str]** – list of terms to replace.\n  - **exclude: str** – do not apply the replacement if the substring contains this text.\n- **Returns: str** – replaced text as string.\n\n#### `replace_angled` method\n\nTreats differently the <> than when using replace_between_delimiters. Copes with the case where the line contains \njust one angle, like in exec statements with <, >, <=, and >= operators.\n\n- **Params:**\n  - **angled_txt: str** – the text containing angled words and possibly non-angled words.\n  - **to_replace: str** –  the text inside the angled to be replaced.\n  - **replacer: str** – the text used to swap the to_replace var with.\n  - **exclude: str** – do not apply the replacement if the angled text contains this text. By default, it is set to \n    None.\n- **Returns: str** – replaced text as string.\n\n#### `replace_delimited` method\n\nIbidem to replace quoted, but with different delimiters to the left and right sides.\n\nReplaces a portion of text (the `to_replace`) enclosed with specific delimiters (the `text_to_replace`) with an \nalternative text, unless it equals the `exclude` text.\n\n- **Params:**\n  - **delimited_txt: str** – the text containing delimited words and possibly non-delimited words.\n  - **left: str** –  left delimiter.\n  - **right: str** – right delimiter.\n  - **to_replace: str** – the text inside the delimiters to be replaced.\n  - **replacer: str** – the text used to swap the to_replace var with.\n  - **exclude: str** – do not apply the replacement if the delimited text contains this text. By default, it is set \n    to None.\n- **Returns: str** – replaced text as string.\n\n***\n\n### `strings` module\n\n```python\nimport kf_utils.strings\nfrom kf_utils import strings\n```\n\nFunctools for the manipulation of strings\n\n#### `indices` method\n\nSearches a string (the `key`) in a text and returns a list with all the positions where the key occurs.\n\n- **Params:**\n  - **txt: str** – text where to search.\n  - **key: str** –  substrings to search inside the text.\n  - **case_sensitive: bool** – whether the search is case-sensitive. By default, it is set to True.\n- **Returns: list** – list with all the positions where the key occurs in the given text.\n\n#### `is_get_list` method\n\nDetermines whether a text is a valid Python's list.\n\n> **Note**\n> `is_get_` methods have a twofold mission:\n> 1. they check that a condition is met, and\n> 2. f the condition is met then return a value.\n> \n> In this case, the condition to be met is that the text is a valid Python list expressed as a text. The value \n> returned is the Python's list.\n\n- **Params:**\n  - **o: list or str** – list or list-style string.\n  - **dic: dict** – a dictionary with all the variables needed for the Python interpreter to execute the code; if \n    not provided, the presumption is that the statement to be executed is a primitive of the type x = 1 + 2, b = \n    True, h = \"Hello World\", or similar. By default, it is set to None.\n- **Returns: list** – list with the `o` param content.\n\n#### `json_str_to_dict` method\n\nUsed to read JSON objects expressed as texts and transform them into Python's dictionaries.\n\nOne usage of this method is to read JSONL files and process the contents, e.g. to store these contents into NO-SQL \ndatabased, such as in an Elasticsearch index as Elastic documents.\n\n- **Params:**\n  - **json_line: str** – json-style string.\n- **Returns: dict** – Python's dictionary with the json content.\n\n#### `mask_quoted` method\n\nExtracts quoted substrings from a quoted text, masks (i.e., codes) the substrings and returns the masked text and a \nlist of tuples with the pairs `[(original substring, masked substring), ...]`\n\n- **Params:**\n  - **quoted_txt: str** – text that contains quoted substrings.\n- **Returns: (str, list[tuple[str, str]])** – masked text and a list of tuples with the pairs `[(original substring, masked substring), ...]`.\n\n#### `unmask_quoted` method\n\nFor a given text, and a list of pairs `(substring, crc(substring))`, replaces previously masked substrings into their \noriginal forms.\n\n- **Params:**\n  - **masked_txt: str** – masked text returned by mask_quoted method. _Please refer to `mask_quoted` method \n    documentation._\n  - **tuples: list[tuple[str, str]]** – list of tuples with the pairs `[(original substring, masked substring), ...]`.\n- **Returns: str** – original text with its previously masked substrings replaced into their original forms.\n\n#### `nnl` method\n\nReplaces all new lined `'\\n'` with `' '`\n\n- **Params:**\n  - **text: str** – text with new lines\n- **Returns: str** – text without new lines.\n\n#### `remove_comments` method\n\nRemoves C-like `/*...*/` block and `//` or `#` line comments.\n\n- **Params:**\n  - **txt: str** – the string containing comments.\n  - **include_double_slash: bool** – include_double_slash: if True, line comments starting with '//' will be removed.\n    By default, it is set to False, because strings containing 'http://whatever.org' would be reduced to 'http:'.\n- **Returns: str** – text without comments.\n\n#### `slash` method\n\nWill add the trailing slash if it's not already there.\n\n- **Params:**\n  - **path: str** – path file name.\n- **Returns: str** – slashed path file name.\n\n#### `tokenize` method\n\nVery elementary tokenizer totally oriented to parse Query strings. It implements at least some interesting features:\n1. It is able to remove C-like comments (both block and line comments);\n2. The list of punctuation signs can be customised, so one can decide what signs to isolate as tokens; and\n3. It is fast and language-independent.\n\n- **Params:**\n  - **txt: str** – the string to be tokenized.\n  - **punctuation_tokens: str** – a string with punctuation signs to be split. If None, a default list is provided. \n    By default, it is set to None.\n- **Returns: list[str]** – the list of tokens.\n\n#### `unaccent` method\n\nRemoves the diacritics and character symbols of a text.\n\n- **Params:**\n  - **text: str** – text with diacritics and character symbols.\n- **Returns: str** – text without diacritics and character symbols.\n\n#### `url_tail` method\n\nReturns the element id of an url. If instead of sep being `'/'` it is a different one, this function can be used for \nmany other purposes, e.g. getting the last element after `'#}'` in `'{blahblahblah.blablhablah#}type'`, which would \nreturn `'type'` if `sep = '#}'`.\n\n- **Params:**\n  - **url: str** – url where to find the id.\n  - **sep: str** – url delimiter. By default, it is set to `'/'`.\n- **Returns: str** – element id of the url as string.\n\n#### `url_head` method\n\n> **Note**\n> See `url_tail`. Same comments\n\nReturns the element id of an url. If instead of sep being `'/'` it is a different one, this function can be used for \nmany other purposes, e.g. getting the last element after `'#}'` in `'{blahblahblah.blablhablah#}type'`, which would \nreturn `'{blahblahblah.blablhablah'` if `sep = '#}'`.\n\n- **Params:**\n  - **url: str** – url where to find the id.\n  - **sep: str** – url delimiter. By default, it is set to `'/'`.\n- **Returns: str** – head of the url as string.\n\n#### `regex` method\n\nReturns the result of the search regex.\n\n- **Params:**\n  - **content: str** – text where to search.\n  - **regex_condition: str** – regex expression to search in the text.\n- **Returns: str** – head of the url as string.\n\n***\n\n### `timers` module\n\n```python\nimport kf_utils.timers\nfrom kf_utils import timers\n```\n\nHelpers for custom timers\n\n#### `now` method\n\nReturns the current timestamp with timezone\n\n- **Returns: datetime** – Current timestamp with Spain timezone.\n\n**Example:**\n```python\nfrom datetime import datetime\nfrom kf_utils.timers import now\n\nnow: datetime = now()\n\nprint(now)      # 2022-08-16 09:30:06.466873+02:00\n```\n\n#### `str_to_datetime` method\n\nGiven a string with a datetime in format **YYYY-mm-dd HH:MM:SS.f+Z** (e.g.: `2022-07-13 10:00:00.21324+00:02`), convert \nthis string in a datetime object.\n\n- **Params:**\n  - **string_datetime: str** – string with a properly formatted datetime.\n- **Returns: datetime** – datetime object.\n\n**Example:**\n```python\nfrom datetime import datetime\nfrom kf_utils.timers import str_to_datetime\n\ndate_str: str = '2022-08-16 09:30:06.466873+02:00'\n\ndate: datetime = str_to_datetime(date_str)\n\nprint(date)     # 2022-08-16 09:30:06.466873+02:00\n```\n\n#### `Timer` class\n\nClass for capturing and display timedelta.\n\nAttributes:\n- **n:** datetime that represents the current instant\n- **d:** Timedelta or None\n- **out:** Output of the class\n\n##### `now` method<a name=\"now-method-v2\"></a>\n\nThis moment.\n\n- **Returns: datetime** – the current instant as datetime.\n\n##### `trig` method\n\nTriggers `now()`, and returns `self`.\n\n- **Returns: Timer** – the self object with n attribute updated with the current datetime instant.\n\n##### `console` method\n\nPrints the delta.\n\n- **Returns: str** – the delta as string. _Please refer to `delta` method documentation for more information._\n\n##### `delta` method\n\nDifference between now and the last now.\n\nIf `reset = True` **n** is set to 0, thus being able to use consecutive deltas without having to re-now().\n\n- **Params:**\n  - **reset: bool** – if it is True, n attribute is set to 0. By default, it is set to False.\n- **Returns: timedelta** – difference between now and the last now as timedelta object.\n\n**Example:**\n```python\nfrom kf_utils.timers import Timer\n\nt: Timer = Timer()\nnow = t.now()\n\nprint(t.delta(True))\nprint(t.delta(True))\n```\n\n##### `deltas` method\n\nReturns the timedelta as a string. Please, refer to delta method documentation for more information.\n\n- **Returns: str** – the timedelta as string.\n\n***\n\n### `data_types` package\n\n```python\nimport kf_utils.data_types\nfrom kf_utils import data_types\n```\n\nCustom data types used by the `kf_utils` modules and functions\n\n#### `uri` module\n\n```python\nimport kf_utils.data_types.uri\nfrom kf_utils.data_types import uri\n```\n\nCore classes URL and URI\n\n##### `URI` class\n\nURI data type. Accepts the following protocols:\n- file:../dir/dir/file.ext\n- http://example.org\n- ftp://repo.example.org/dir\n- ftps://repo.example.org/dir\n- mailto:username@server.org\n- urn:zone:domain:host:etc\n\nAttributes:\n- **host:** URI's host part (e.g.: `'example.org'`).\n- **uri_str:** URI stored as plain string.\n- **protocol:** URI's protocol (e.g.: `'file:'`, `'http:'`, `'ftp:'`).\n\n###### `validate` method\n\nChecks whether the uri has a valid URI syntax, including the protocol `\"file:\"`\n\n- **Params:**\n  - **uri: str** – uri to validate.\n- **Raises:**\n  - **ArgumentException** – if uri has not a valid format.\n\n###### `get_protocol` method\n\nReturns the protocol of the URL (`\"http:\"`, `\"ftp:\"`, `\"ftps:\"`, `\"file:\"`). No need to verify if url is None, since this is taken \ncare of at construction time.\n\n- **Returns: str** – the protocol of the url.\n\n###### `get_host` method\n\nReturns the host of the URI (`\"example.org\"`). No need to verify if url is None, since this is taken care of at \nconstruction time.\n\n- **Returns: str** – the protocol of the url.\n\n##### `URL` class\n\nSpecialisation of `URI` class, for back-wards compatibility with previous NTT-DGI developments. _Please refer to \n`URI` class documentation._\n\n\n\n## Add new features, hotfixes or bugfixes\n\nPlease, refer to [CONTRIBUTING](./CONTRIBUTING.md), there is explained the methodolofy used to add new **features**, \n**hotfixes** and **bugfixes**.\n\n\n\n## Run automatic tests\n\nAll the automatic tests are stored in [test](./test) folder. \nThey can be run by both, executing [test.sh](./test.sh) script or executing the following command:\n\n```shell\npip install --no-cache-dir --user --upgrade coverage unittest-xml-reporting && \\\npython -m coverage erase && \\\npython -m coverage run -m xmlrunner discover -o ./xunit_reports && \\\npython -m coverage report && \\\npython -m coverage xml -i\n```\n\nIt will execute all the automatic tests, and it will create a new folder called *xunit_reports* and a new xml file \ncalled *coverage.xml*, that will contain the tests results and reports.\n\n\n\n## Build `kf_utils` as a PyPi package\n\nTo build the **kf_utils** pip package you'll need to upgrade and use `setuptools` and `wheel` packages.\n\nYou can do both, execute [build.sh](./build.sh) script or execute the following commands in the repo root folder:\n\n```shell\n# Upgrade setuptools library\npip install --no-cache-dir --user --upgrade setuptools wheel && \\\n\n# Build the package\npython -m setup sdist bdist_wheel\n```\n\nIt will build the PyPi package, and will create several folders and files, the folders names will be: *build*, *dist* \nand *kf_utils.egg-info*. The most important folder is **dist**, there will be the distribution files of the kf_utils \nPyPi package.\n\n\n\n## Project changelog\n\nAll notable changes to this project will be documented in [CHANGELOG](./CHANGELOG.md) file. So if you want to know \nabout all the changes included in each release, check out this file.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/kf-utils-package/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://umane.everis.com/git/KFSEMBU/utils",
    "keywords": "kfsembu,knowledge-factory,helpers,utils,utilities,useful-methods",
    "license": "GNU General Public License version 3",
    "maintainer": "KFSEMBU",
    "maintainer_email": "",
    "name": "kf-utils-package",
    "package_url": "https://pypi.org/project/kf-utils-package/",
    "platform": null,
    "project_url": "https://pypi.org/project/kf-utils-package/",
    "project_urls": {
      "Download": "https://pypi.org/project/kf-utils-package/",
      "Homepage": "https://umane.everis.com/git/KFSEMBU/utils"
    },
    "release_url": "https://pypi.org/project/kf-utils-package/2.0.1/",
    "requires_dist": [
      "validators (>=0.20.0)",
      "urllib3 (<1.27,>=1.21.1)",
      "file-read-backwards (>=2.0.0)",
      "Unidecode (>=1.3.3)",
      "rdflib (==6.1.1)",
      "pandas (>=1.4.3)",
      "PyYAML (>=5.1.1)",
      "tzdata (>=2022.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Utils package used in all Knowledge Factory microservices.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16765677,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d13dadc642abf88cf3b9d94b3d7dd7566a7a6015b7616b6167e92b37aa1c93f9",
          "md5": "def0e80e5709a5b5e1beeccb0983cd4b",
          "sha256": "e6d7d4c252cedcf4c8ccc14e5abe4e1536d9bc2e939105d16f86be995c010aed"
        },
        "downloads": -1,
        "filename": "kf_utils_package-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "def0e80e5709a5b5e1beeccb0983cd4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46256,
        "upload_time": "2022-12-12T15:29:26",
        "upload_time_iso_8601": "2022-12-12T15:29:26.666942Z",
        "url": "https://files.pythonhosted.org/packages/d1/3d/adc642abf88cf3b9d94b3d7dd7566a7a6015b7616b6167e92b37aa1c93f9/kf_utils_package-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba0df4060879510e3580ece4fa7981a732fc82aa509a161a8576e2d97471061b",
          "md5": "1b428b2dd9353c8ba17ba7925eb9ee2d",
          "sha256": "e9096ade290157dc63ed93aecd67c52642ab93d294c4bfc3ee95bedb46662899"
        },
        "downloads": -1,
        "filename": "kf_utils_package-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b428b2dd9353c8ba17ba7925eb9ee2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 83078,
        "upload_time": "2022-12-12T15:29:30",
        "upload_time_iso_8601": "2022-12-12T15:29:30.173885Z",
        "url": "https://files.pythonhosted.org/packages/ba/0d/f4060879510e3580ece4fa7981a732fc82aa509a161a8576e2d97471061b/kf_utils_package-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d13dadc642abf88cf3b9d94b3d7dd7566a7a6015b7616b6167e92b37aa1c93f9",
        "md5": "def0e80e5709a5b5e1beeccb0983cd4b",
        "sha256": "e6d7d4c252cedcf4c8ccc14e5abe4e1536d9bc2e939105d16f86be995c010aed"
      },
      "downloads": -1,
      "filename": "kf_utils_package-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "def0e80e5709a5b5e1beeccb0983cd4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 46256,
      "upload_time": "2022-12-12T15:29:26",
      "upload_time_iso_8601": "2022-12-12T15:29:26.666942Z",
      "url": "https://files.pythonhosted.org/packages/d1/3d/adc642abf88cf3b9d94b3d7dd7566a7a6015b7616b6167e92b37aa1c93f9/kf_utils_package-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba0df4060879510e3580ece4fa7981a732fc82aa509a161a8576e2d97471061b",
        "md5": "1b428b2dd9353c8ba17ba7925eb9ee2d",
        "sha256": "e9096ade290157dc63ed93aecd67c52642ab93d294c4bfc3ee95bedb46662899"
      },
      "downloads": -1,
      "filename": "kf_utils_package-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b428b2dd9353c8ba17ba7925eb9ee2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 83078,
      "upload_time": "2022-12-12T15:29:30",
      "upload_time_iso_8601": "2022-12-12T15:29:30.173885Z",
      "url": "https://files.pythonhosted.org/packages/ba/0d/f4060879510e3580ece4fa7981a732fc82aa509a161a8576e2d97471061b/kf_utils_package-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}