{
  "info": {
    "author": "",
    "author_email": "Sheng Zhong <zhsh@umich.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "This repository documents the syntax for multidimensional indexing for Pytorch and Numpy, and offers classes that\nencapsulates the process and provides additional features on top for data that represents a coordinate grid.\nYou can follow along the code blocks here with the included Jupyter notebook.\n\n## Multidimensional Indexing\n\nSuppose we have a multidimensional tensor, which could be a cached voxel grid, or a batch of images\n(the values are ordered to make clear how the indexing works):\n\n```python\nimport torch\n\nB = 256  # batch size (optional)\nshape = (B, 64, 64)\nhigh = torch.prod(torch.tensor(shape)).to(dtype=torch.long)\ndata = torch.arange(0, high).reshape(shape)\n```\n\nA key operation on this tensor is to index it for querying and assignment. It is straightforward to index a single\nvalue, and particular groupings of dimensions:\n\n```python\n# index a single element\nprint(data[124, 5, 52])\n\n# index all dimensions given the first is index 0 (the following are equivalent)\nprint(data[0])\nprint(data[0, :, :])\nprint(data[0, ...])  # pytorch only syntax\n\n# index all dimensions given the last is index 5 (the following are equivalent)\nprint(data[..., 5])\nprint(data[:, :, 5])\n```\n\nIt is also straightforward to batch index along a single dimension:\n\n```python\nidx = [4, 8, 15, 16, 23, 42]\n\n# index all dimensions given the first follows idx\nprint(data[idx].shape)  # (len(idx), 64, 64)\nprint(data[idx, ...].shape)\nprint(data[idx, :, :].shape)\n\n# index all dimensions given the second follows idx\nprint(data[:, idx].shape)\nprint(data[:, idx, :].shape)\n```\n\nIt is also reasonable to batch index along multiple dimensions. Note that it does not make sense for `idx` and `idx2` to\nhave different lengths since that would lead to combinations where one is missing a value.\n\n```python\nidx = [4, 8, 15, 16, 23, 42]\nidx2 = [5, 2, 7, 1, 32, 4]\n\n# index the last dimension when the first two are (4,5), (8,2), (15,7), (16,1), (23,32), and (42,4)\nprint(data[idx, idx2].shape)  # (len(idx), 64)\n```\n\nIt is also common to have a list of entries by their indices that we'd like to batch query.\n\n```python\n# indices of 5 entries\nidx3 = [[0, 5, 3],\n        [2, 7, 5],\n        [100, 23, 45],\n        [3, 6, 4],\n        [4, 2, 1]]\n```\n\nDirectly indexing the tensor with a multidimensional index does not do what you want:\n\n```python\nprint(data[idx3])  # results in an error\n```\n\nInstead, **split up the indices by their dimension** either manually, or with `torch.unbind`\n\n```python\n# easier to convert it to something that allows column indexing first\nidx4 = torch.tensor(idx3)\nprint(data[idx4[:, 0], idx4[:, 1], idx4[:, 2]])  # returns the 5 entries as desired\nprint(data[torch.unbind(idx4, -1)])              # can also use unbind\n```\n\n## How can it be improved?\n\nMost importantly, it may not be clear why simply doing `data[idx3]` does not work, and what the correct syntax is. So\nreading up to here should resolve most questions about indexing with a batch of indices on a multidimensional tensor.\nThis library provides `MultidimView` variants (torch and numpy) that provide a view for these tensors with features\nspecialized to multidimensional tensor that represent coordinate gridded values:\n\n- direct indexing so `data[idx3]` does what you want\n- optional indexing on values if you specify value ranges\n    - value resolution implicitly defined by size of source and value range\n- optional safety checking for out of bound values or indices\n    - provide default value for out of bound queries instead of throwing an exception\n\n## Installation\nnumpy only\n```shell\npip install multidim-indexing[numpy]\n```\npytorch only\n```shell\npip install multidim-indexing[torch]\n```\nall\n```shell\npip install multidim-indexing[all]\n```\n## Usage\n\nContinuing with `data` and the indices described before,\n\n```python\nfrom multidim_indexing import torch_view as view\n\n# for numpy, import numpy_view and use NumpyMultidimView\n\n# simple wrapper with bounds checking\ndata_multi = view.TorchMultidimView(data)\n# another view into the data, treating it as a batch of 2 dimensional grid data with X in [-5, 5] and Y in [0, 10]\n# can specify value to assign a query if it's out of bounds (defaults to -1)\n# note that the invalid value needs to be of the same type as the source, so we can't for example use float('inf') here\ndata_batch = view.TorchMultidimView(data, value_ranges=[[0, B], [-5, 5], [0, 10]], invalid_value=-1)\n# another view into the data, treating it as a 3D grid data with X in [-2.5, 5], Y in [0, 4], and Z in [0, 10]\ndata_3d = view.TorchMultidimView(data, value_ranges=[[-2.5, 5], [0, 4], [0, 10]])\n```\n\nWe can then use them like:\n\n```python\n# convert index to the corresponding type (pytorch vs numpy)\nkey = torch.tensor(idx3, dtype=torch.long)\nprint(data_multi[key])  # returns the 5 entries as desired\n```\n\n```python\n# query the other views using grid values\n# first, let's try keying the same 2D values across all batches\nvalue_key_per_batch = torch.tensor([[-3.5, 0.2],\n                                    [-4, 0.1],\n                                    [-7, 0.5],  # this is out of bounds\n                                    [3, 2]])\n# number of entries to query\nN = value_key_per_batch.shape[0]\nprint(torch.arange(B, dtype=value_key_per_batch.dtype).reshape(B, 1, 1).repeat(1, N, 1).shape)\n# make the indices for all batches\nvalue_key_batch = torch.cat(\n    (torch.arange(B, dtype=value_key_per_batch.dtype).reshape(B, 1, 1).repeat(1, N, 1),\n     value_key_per_batch.repeat(B, 1, 1)), dim=-1)\n# keys can have an additional batch indices at the front\nprint(value_key_batch.shape)  # (B, N, 3)\n# these 2 should be the same apart from the first batch index\nprint(value_key_batch[0:N])\nprint(value_key_batch[12*N:13*N])\n\n# should see some -1 to indicate invalid value\nprint(data_batch[value_key_batch]) \n\n# also there is a shorthand for directly using the per batch indices\nprint(data_batch[value_key_per_batch.repeat(B,1,1)]) # should be the same as above\n```\n\n```python\nvalue_key_3d = torch.tensor([[-2.5, 0., 0.],  # right on the boundary of validity\n                             [-2.51, 0.5, 0],  # out of bounds\n                             [5, 4, 10]  # right on the boundary\n                             ]\n                            )\nprint(data_3d[value_key_3d])  # (0, -1 for invalid, high - 1)\nprint(torch.prod(torch.tensor(data.shape)) - 1)\nprint(high - 1)\n```\n\nThe indexing naturally allows setting in addition to querying. Out of bound indices will be\nignored.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "numpy,pytorch,indexing",
    "license": "Copyright (c) 2023 Sheng Zhong  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "",
    "maintainer_email": "Sheng Zhong <zhsh@umich.edu>",
    "name": "multidim-indexing",
    "package_url": "https://pypi.org/project/multidim-indexing/",
    "platform": null,
    "project_url": "https://pypi.org/project/multidim-indexing/",
    "project_urls": {
      "Bug Reports": "https://github.com/LemonPi/multidim_indexing/issues",
      "Homepage": "https://github.com/LemonPi/multidim_indexing",
      "Source": "https://github.com/LemonPi/multidim_indexing"
    },
    "release_url": "https://pypi.org/project/multidim-indexing/0.8.1/",
    "requires_dist": [
      "torch ; extra == 'all'",
      "numpy ; extra == 'all'",
      "numpy ; extra == 'numpy'",
      "pytest ; extra == 'test'",
      "torch ; extra == 'torch'"
    ],
    "requires_python": ">=3.6",
    "summary": "Multidimensional batch indexing of pytorch tensors and numpy arrays",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16783039,
  "releases": {
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20122880664eb7539e8c0ffdf53c761534ec6d1526a241ef05a39c1b367ae50d",
          "md5": "90ac4a835acfaba2f017c524461a10b5",
          "sha256": "3d5704cd44570fee727fcd62cb474e17721bbd88b9b0cf5c7d03374642d9f977"
        },
        "downloads": -1,
        "filename": "multidim_indexing-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90ac4a835acfaba2f017c524461a10b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9358,
        "upload_time": "2023-02-10T04:02:59",
        "upload_time_iso_8601": "2023-02-10T04:02:59.986251Z",
        "url": "https://files.pythonhosted.org/packages/20/12/2880664eb7539e8c0ffdf53c761534ec6d1526a241ef05a39c1b367ae50d/multidim_indexing-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aa4595d3434d7f4a26bdaf1ec063db5bd2c68c8ec57ce8849a424a9d6f60ef6",
          "md5": "ad1079deea4b4d1ee9f567a0c53055d7",
          "sha256": "05ff7d7afbe963eb4c00927b0a7d23e7c914ac43978ea1ce3a0d158b86335832"
        },
        "downloads": -1,
        "filename": "multidim_indexing-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad1079deea4b4d1ee9f567a0c53055d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14134,
        "upload_time": "2023-02-10T04:03:01",
        "upload_time_iso_8601": "2023-02-10T04:03:01.364726Z",
        "url": "https://files.pythonhosted.org/packages/1a/a4/595d3434d7f4a26bdaf1ec063db5bd2c68c8ec57ce8849a424a9d6f60ef6/multidim_indexing-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20122880664eb7539e8c0ffdf53c761534ec6d1526a241ef05a39c1b367ae50d",
        "md5": "90ac4a835acfaba2f017c524461a10b5",
        "sha256": "3d5704cd44570fee727fcd62cb474e17721bbd88b9b0cf5c7d03374642d9f977"
      },
      "downloads": -1,
      "filename": "multidim_indexing-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90ac4a835acfaba2f017c524461a10b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9358,
      "upload_time": "2023-02-10T04:02:59",
      "upload_time_iso_8601": "2023-02-10T04:02:59.986251Z",
      "url": "https://files.pythonhosted.org/packages/20/12/2880664eb7539e8c0ffdf53c761534ec6d1526a241ef05a39c1b367ae50d/multidim_indexing-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1aa4595d3434d7f4a26bdaf1ec063db5bd2c68c8ec57ce8849a424a9d6f60ef6",
        "md5": "ad1079deea4b4d1ee9f567a0c53055d7",
        "sha256": "05ff7d7afbe963eb4c00927b0a7d23e7c914ac43978ea1ce3a0d158b86335832"
      },
      "downloads": -1,
      "filename": "multidim_indexing-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ad1079deea4b4d1ee9f567a0c53055d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14134,
      "upload_time": "2023-02-10T04:03:01",
      "upload_time_iso_8601": "2023-02-10T04:03:01.364726Z",
      "url": "https://files.pythonhosted.org/packages/1a/a4/595d3434d7f4a26bdaf1ec063db5bd2c68c8ec57ce8849a424a9d6f60ef6/multidim_indexing-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}