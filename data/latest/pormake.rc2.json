{
  "info": {
    "author": "Sangwon Lee",
    "author_email": "lsw91.main@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PORMAKE\n**Por**ous materials **Make**r\n\n> Python library for the construction of porous materials using topology and building blocks.\n>\n> Please cite [me](https://pubs.acs.org/doi/abs/10.1021/acsami.1c02471) if you find it useful!\n\n## Installation\n\n### 1. Using PIP\n\n This method is only valid for Linux and macOS as `jax` supports those operating\nsystems. It is recommended to use WSL for Windows users.\n\n```\npip install pormake\n```\n\n### 2. From source\n\n#### 1. Directly install from Github repository.\n```\npip install git+https://github.com/Sangwon91/PORMAKE.git\n```\n\n#### 2. Editable installtion.\n```\ngit clone https://github.com/Sangwon91/PORMAKE.git\npip install -e .\n```\n\n## Examples\n\n### 1. Construction of HKUST-1\n\nImport `pormake` .\n\n```python\nimport pormake as pm\n```\n\nLoad `tbo` topology from the default database.\n\n```python\ndatabase = pm.Database()\ntbo = database.get_topo(\"tbo\")\n```\n\nYou can check the information using `.describe()` method.\n\n```python\ntbo.describe()\n```\n\nIn this case, there are two node types (`0` and `1`) and one edge type (`(0, 1)`). `CN` in the node information indicates coordination number (number of adjacent nodes).\n\n```\n===============================================================================\nTopology tbo\nSpacegroup: Fm-3m\n-------------------------------------------------------------------------------\n# of slots: 152 (56 nodes, 96 edges)\n# of node types: 2\n# of edge types: 1\n\n-------------------------------------------------------------------------------\nNode type information\n-------------------------------------------------------------------------------\nNode type: 0, CN: 3\n  slot indices: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n                10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n                20, 21, 22, 23, 24, 25, 26, 27, 28, 29\n                30, 31\nNode type: 1, CN: 4\n  slot indices: 32, 33, 34, 35, 36, 37, 38, 39, 40, 41\n                42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n                52, 53, 54, 55\n\n-------------------------------------------------------------------------------\nEdge type information (adjacent node types)\n-------------------------------------------------------------------------------\nEdge type: (0, 1)\n  slot indices: 56, 57, 58, 59, 60, 61, 62, 63, 64, 65\n                66, 67, 68, 69, 70, 71, 72, 73, 74, 75\n                76, 77, 78, 79, 80, 81, 82, 83, 84, 85\n                86, 87, 88, 89, 90, 91, 92, 93, 94, 95\n                96, 97, 98, 99, 100, 101, 102, 103, 104, 105\n                106, 107, 108, 109, 110, 111, 112, 113, 114, 115\n                116, 117, 118, 119, 120, 121, 122, 123, 124, 125\n                126, 127, 128, 129, 130, 131, 132, 133, 134, 135\n                136, 137, 138, 139, 140, 141, 142, 143, 144, 145\n                146, 147, 148, 149, 150, 151\n===============================================================================\n```\n\nYou can also visualize the topology using `.view()` method.\n\n```python\ntbo.view()\n```\n\n<img src=\"doc/tbo.png\" width=400>\n\nIn order to construct HKUST-1, copper paddle-wheel cluster and BTC linker are required.  You can load the building blocks from the database. All visual description of the building blocks can be found at [here](doc/building_blocks.pdf).\n\n```python\n# bb: budilding block.\n# Copper paddle-wheel.\nN409 = database.get_bb(\"N409\")\n# BTC linker.\nN10 = database.get_bb(\"N10\")\n```\n\nYou can visualize building blocks using `.view()` method.\n\n```python\nN409.view()\nN10.view()\n```\n\n<img src=\"doc/N409.png\" width=350> <img src=\"doc/N10.png\" width=350>\n\nNext, make `Builder` instance.\n\n```python\nbuilder = pm.Builder()\n```\n\nMake node type to building block dictionary. This dictionary is used for the construction of the MOF. Building blocks have to be assigned to each node type (in this case, `0` and `1`).\n\n```python\n# N10 is assigned to node type 0 because the coordination number of node type 0 is 3.\n# Likewise, N409 is assigned to node type 1.\nnode_bbs = {\n    0: N10,\n    1: N409\n}\n```\n\nConstruct HKUST-1 using `builder`.\n\n```python\nHKUST1 = builder.build_by_type(topology=tbo, node_bbs=node_bbs)\n```\n\nYou can visualize constructed MOF using `.view()` method.\n\n```python\nHKUST1.view()\n```\n\n<img src=\"doc/HKUST-1.png\" width=400>\n\nAnd save the HKUST-1 in `cif` format.\n\n```python\nHKUST1.write_cif(\"HKUST-1.cif\")\n```\n\n\n\n### 2. Inserting edge building block to HKUST-1\n\nFrom the above example, we can insert edge building blocks between `N409` and `N10`.\n\nLoad long and thin edge building block from the database.\n\n```python\nE41 = database.get_bb(\"E41\")\nE41.view()\n```\n\n<img src=\"doc/E41.png\" width=400>\n\nMake edge type to building block dictionary. Edge type is a tuple of the types of adjacent nodes: (`0`, `1`).\n\n```python\nedge_bbs = {(0, 1): E41}\n```\n\nMake new MOF with  `edge_bbs`.\n\n```python\nMOF = builder.build_by_type(topology=tbo, node_bbs=node_bbs, edge_bbs=edge_bbs)\n```\n\nCheck the constructed MOF.\n\n```python\nMOF.view()\n```\n\n`E41` is inserted properly between `N409` and `N10`.\n\n<img src=\"doc/MOF.png\" width=400>\n\n\n\n### 3. Construction of *Chimera* MOF\n\n`pormake` can assign different building block to each slot. In this example, we will replace some of `N409` to porphyrin.\n\nLoad porphyrin from the database.\n\n```python\nN13 = database.get_bb(\"N13\")\nN13.view()\n```\n\n<img src=\"doc/N13.png\" width=400>\n\nBefore the next step, you should know the equivalence of the following two approaches for MOF construction.\n\n```python\n# Approach 1.\nMOF = builder.build_by_type(topology=tbo, node_bbs=node_bbs, edge_bbs=edge_bbs)\n\n# Approach 2.\n# Same operation with different code.\nbbs = builder.make_bbs_by_type(topology=tbo, node_bbs=node_bbs, edge_bbs=edge_bbs)\nMOF = builder.build(topology=tbo, bbs=bbs)\n```\n\nHere, `bbs` is the list of building blocks. `bbs[i]` is the building block at i'th slot.\n\nChange some of `N409` to `N13`. You can get the indices from the `tbo.describe()`\n\n```python\nbbs = builder.make_bbs_by_type(topology=tbo, node_bbs=node_bbs, edge_bbs=edge_bbs)\n\nbbs[33] = N13.copy()\nbbs[38] = N13.copy()\nbbs[40] = N13.copy()\nbbs[49] = N13.copy()\nbbs[53] = N13.copy()\nbbs[55] = N13.copy()\n```\n\nMake chimera MOF with modified `bbs`.\n\n```python\nMOF = builder.build(topology=tbo, bbs=bbs)\nMOF.view()\n```\n\n<img src=\"doc/chimera.png\" width=400>\n\n### 4. Calculation of RMSD between node and building block\n\nThe root-mean-square deviation of atomic positions (RMSD) between node and building block can be used as a criterion for determining whether a particular building block can be located to a particular node.\n\nLoad metal cluster of triangular prism shape.\n\n```python\nN198 = database.get_bb(\"N198\")\nN198.view()\n```\n\n<img src=\"doc/N198.PNG\" width=400>\n\nLoad two test topologies: `pcu` and `acs`. `pcu` has nodes of octahedron shape and `acs` has nodes of triangular prism shape. Each topology has single node type (`0`).\n\n```python\npcu = database.get_topo(\"pcu\")\npcu.describe()\n```\n\n```\n===============================================================================\nTopology pcu\nSpacegroup: Pm-3m\n-------------------------------------------------------------------------------\n# of slots: 4 (1 nodes, 3 edges)\n# of node types: 1\n# of edge types: 1\n\n-------------------------------------------------------------------------------\nNode type information\n-------------------------------------------------------------------------------\nNode type: 0, CN: 6\n  slot indices: 0\n\n-------------------------------------------------------------------------------\nEdge type information (adjacent node types)\n-------------------------------------------------------------------------------\nEdge type: (0, 0)\n  slot indices: 1, 2, 3\n===============================================================================\n```\n\n\n\n```python\nacs = database.get_topo(\"acs\")\nacs.describe()\n```\n\n```\n===============================================================================\nTopology acs\nSpacegroup: P63/mmc\n-------------------------------------------------------------------------------\n# of slots: 8 (2 nodes, 6 edges)\n# of node types: 1\n# of edge types: 1\n\n-------------------------------------------------------------------------------\nNode type information\n-------------------------------------------------------------------------------\nNode type: 0, CN: 6\n  slot indices: 0, 1\n\n-------------------------------------------------------------------------------\nEdge type information (adjacent node types)\n-------------------------------------------------------------------------------\nEdge type: (0, 0)\n  slot indices: 2, 3, 4, 5, 6, 7\n===============================================================================\n```\n\nYou can check the shape of node via `LocalStructure` object.\n\n```python\n# 0 is the type of node.\n# Octahedron shape.\npcu_local_0 = pcu.unique_local_structures[0]\npcu_local_0.view()\n```\n\n<img src=\"doc/oct.png\" width=350> <img src=\"doc/oct_2.png\" width=350>\n\n```python\n# 0 is the type of node.\n# Triangular prism shape.\nacs_local_0 = acs.unique_local_structures[0]\nacs_local_0.view()\n```\n\n<img src=\"doc/tri.png\" width=350> <img src=\"doc/tri_2.png\" width=350>\n\nMake `Locator` instance.\n\n```python\nlocator = pm.Locator()\n```\n\nCalculate RMSD values using the `locator`. As expected, you can see that the RMSD value of the `pcu` (0.42) is bigger than that of `acs` (0.02).\n\n```python\nacs_rmsd_0 = locator.calculate_rmsd(acs_local_0, N198)\nprint(\"RMSD at acs node type 0: %.2f\" % acs_rmsd_0)\n```\n\n```\nRMSD at acs node type 0: 0.02\n```\n\n\n\n```python\npcu_rmsd_0 = locator.calculate_rmsd(pcu_local_0, N198)\nprint(\"RMSD at pcu node type 0: %.2f\" % pcu_rmsd_0)\n```\n\n```\nRMSD at pcu node type 0: 0.42\n```\n\nIn general, `RMSD < 0.3`  is good threshold for the MOF constructions.\n\n\n\n### 5. Simple example of MOF construction using low-symmetry building blocks\n\nLoad `ith` topology.\n\n```python\nith = database.get_topo(\"ith\")\nith.describe()\n```\n\n```\n===============================================================================\nTopology ith\nSpacegroup: Pm-3n\n-------------------------------------------------------------------------------\n# of slots: 32 (8 nodes, 24 edges)\n# of node types: 2\n# of edge types: 1\n\n-------------------------------------------------------------------------------\nNode type information\n-------------------------------------------------------------------------------\nNode type: 0, CN: 4\n  slot indices: 0, 1, 2, 3, 4, 5\nNode type: 1, CN: 12\n  slot indices: 6, 7\n\n-------------------------------------------------------------------------------\nEdge type information (adjacent node types)\n-------------------------------------------------------------------------------\nEdge type: (0, 1)\n  slot indices: 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\n                18, 19, 20, 21, 22, 23, 24, 25, 26, 27\n                28, 29, 30, 31\n===============================================================================\n```\n\nLoad and visualize node building blocks. `N114` is the building block of low-symmetry.\n\n```python\nnode_bbs = {\n    0: database.get_bb(\"N3\"),\n    1: database.get_bb(\"N114\"),\n}\n\nfor bb in node_bbs.values():\n    bb.view()\n```\n\n<img src=\"doc/N3.png\" width=350> <img src=\"doc/N114.png\" width=350>\n\nCheck RMSD values.\n\n```python\nfor key, bb in node_bbs.items():\n    local = ith.unique_local_structures[key]\n    rmsd = locator.calculate_rmsd(local, bb)\n    print(\"RMSD: %.2f\" % rmsd)\n```\n\n```\nRMSD: 0.16\nRMSD: 0.27\n```\n\nLoad edge building block.\n\n```python\nedge_bbs = {(0, 1): database.get_bb(\"E41\")}\nedge_bbs[(0, 1)].view()\n```\n\n<img src=\"doc/E41.png\" width=400>\n\nMake MOF.\n\n```python\nMOF = builder.build_by_type(topology=ith, node_bbs=node_bbs, edge_bbs=edge_bbs)\nMOF.view()\n```\n\n<img src=\"doc/LS_MOF.png\" width=350> <img src=\"doc/LS_MOF_2.png\" width=350>\n\n### 6. Custom building block\n\nPORMAKE can read building blocks from xyz file. In xyz file, all connection points are denoted as symbol `X`.\n\nUsers can assign bond manually as shown below:\n\n`N10.xyz`:\n```\n12\n    9   10   11\nC    0.0000 0.0000 0.0000\nC    0.7700 -1.3336 0.0000\nC    2.3100 -1.3336 0.0000\nC    3.0800 0.0000 0.0000\nC    2.3100 1.3336 0.0000\nC    0.7700 1.3336 0.0000\nH    0.2000 -2.3210 0.0000\nH    4.2200 0.0000 0.0000\nH    0.2000 2.3210 0.0000\nX    -0.7500 0.0000 0.0000\nX    2.6850 -1.9831 0.0000\nX    2.6850 1.9831 0.0000\n   0    1 A\n   0    5 A\n   1    2 A\n   1    6 S\n   2    3 A\n   3    4 A\n   3    7 S\n   4    5 A\n   5    8 S\n   9    0 S\n  10    2 S\n  11    4 S\n```\n\nThe first two columns are the indices of atoms consisting the bond and the third term is bond type.\nSupported bond types include single (`A`), double (`D`), triple (`T`), and aromatic (`A`).\nIf no bond information is fed, bonds are automatically generated by distance threshold but all bond types are assignged to single bond.\n\nYou can load building block using `BuilingBlock` object like below:\n\n```python\nbb = pm.BuildingBlock('N10.xyz')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sangwon91/PORMAKE",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pormake",
    "package_url": "https://pypi.org/project/pormake/",
    "platform": null,
    "project_url": "https://pypi.org/project/pormake/",
    "project_urls": {
      "Homepage": "https://github.com/Sangwon91/PORMAKE",
      "Repository": "https://github.com/Sangwon91/PORMAKE"
    },
    "release_url": "https://pypi.org/project/pormake/0.1.1/",
    "requires_dist": [
      "pymatgen (>=2022.11.7,<2023.0.0)",
      "ase (>=3.22.1,<4.0.0)",
      "jax[cpu] (>=0.4.1,<0.5.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Python library for the construction of porous materials using topology and building blocks",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16268274,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66344ff9a3ad39980ca5bb4d84a128c801dc5e00c61b6b532760bc4334d933fe",
          "md5": "0227deb89dc9f4993fdb2a0bdee80c8b",
          "sha256": "9e63814f5ecfa809c19fe0637f8e26812a517594f3b7b3d8457234aedf0f7b7a"
        },
        "downloads": -1,
        "filename": "pormake-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0227deb89dc9f4993fdb2a0bdee80c8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 2215698,
        "upload_time": "2022-12-31T16:54:09",
        "upload_time_iso_8601": "2022-12-31T16:54:09.953384Z",
        "url": "https://files.pythonhosted.org/packages/66/34/4ff9a3ad39980ca5bb4d84a128c801dc5e00c61b6b532760bc4334d933fe/pormake-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb78d7ab7ca018a4aa29158be16dd990f1b0f65ae948732be2ac18ab11045d2",
          "md5": "55fe9a5fb5ce6261c7869ee389149d39",
          "sha256": "34d2b7f63a5067e9ec64beeb704332b9a22aa3032c1c12442f85e59e1aaac883"
        },
        "downloads": -1,
        "filename": "pormake-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55fe9a5fb5ce6261c7869ee389149d39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 2209285,
        "upload_time": "2022-12-31T16:54:12",
        "upload_time_iso_8601": "2022-12-31T16:54:12.545689Z",
        "url": "https://files.pythonhosted.org/packages/fc/b7/8d7ab7ca018a4aa29158be16dd990f1b0f65ae948732be2ac18ab11045d2/pormake-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00a6b86d249e0ebb22bca91dd30c3db672786ee6ee8a8717438fcb2b8dd3e4e2",
          "md5": "dac66449cead1e39a6cda47d8a373c95",
          "sha256": "8bd7a680caf3d7f37d4a67976418138dca93eac961c38b9fe3c2256cc2d7639a"
        },
        "downloads": -1,
        "filename": "pormake-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dac66449cead1e39a6cda47d8a373c95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 2215734,
        "upload_time": "2022-12-31T18:01:26",
        "upload_time_iso_8601": "2022-12-31T18:01:26.643902Z",
        "url": "https://files.pythonhosted.org/packages/00/a6/b86d249e0ebb22bca91dd30c3db672786ee6ee8a8717438fcb2b8dd3e4e2/pormake-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6752a1d8d91558187e9e633ad58d645203e222ed95971e4fcf8cc9400290f233",
          "md5": "71d07b3be70aaeea1a22f86eb9058103",
          "sha256": "9ff01a1371937e203f556e905a9bd04faf49434e9487064558bc490e171abca2"
        },
        "downloads": -1,
        "filename": "pormake-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71d07b3be70aaeea1a22f86eb9058103",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 2209426,
        "upload_time": "2022-12-31T18:01:29",
        "upload_time_iso_8601": "2022-12-31T18:01:29.112753Z",
        "url": "https://files.pythonhosted.org/packages/67/52/a1d8d91558187e9e633ad58d645203e222ed95971e4fcf8cc9400290f233/pormake-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00a6b86d249e0ebb22bca91dd30c3db672786ee6ee8a8717438fcb2b8dd3e4e2",
        "md5": "dac66449cead1e39a6cda47d8a373c95",
        "sha256": "8bd7a680caf3d7f37d4a67976418138dca93eac961c38b9fe3c2256cc2d7639a"
      },
      "downloads": -1,
      "filename": "pormake-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dac66449cead1e39a6cda47d8a373c95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 2215734,
      "upload_time": "2022-12-31T18:01:26",
      "upload_time_iso_8601": "2022-12-31T18:01:26.643902Z",
      "url": "https://files.pythonhosted.org/packages/00/a6/b86d249e0ebb22bca91dd30c3db672786ee6ee8a8717438fcb2b8dd3e4e2/pormake-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6752a1d8d91558187e9e633ad58d645203e222ed95971e4fcf8cc9400290f233",
        "md5": "71d07b3be70aaeea1a22f86eb9058103",
        "sha256": "9ff01a1371937e203f556e905a9bd04faf49434e9487064558bc490e171abca2"
      },
      "downloads": -1,
      "filename": "pormake-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "71d07b3be70aaeea1a22f86eb9058103",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 2209426,
      "upload_time": "2022-12-31T18:01:29",
      "upload_time_iso_8601": "2022-12-31T18:01:29.112753Z",
      "url": "https://files.pythonhosted.org/packages/67/52/a1d8d91558187e9e633ad58d645203e222ed95971e4fcf8cc9400290f233/pormake-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}