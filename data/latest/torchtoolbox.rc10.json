{
  "info": {
    "author": "X.Yang",
    "author_email": "pistonyang@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# Torch Toolbox\n![](https://github.com/PistonY/torch-toolbox/workflows/Torch-Toolbox-CI/badge.svg)\n\nStable Version: v0.1.5 (recommended)\n\nAutomatic upload to PyPI is finished.\n\nThis project aims to provide the most frequently used tools to help you write more concise and readable PyTorch code. \n\nPull requests and issues are highly encouraged. Please reach out!\n\n- [Pytorch-Toolbox](#pytorch-toolbox)\n  * [Installing](#installing)\n  * [Todo](#todo)\n  * [Usage](#usage)\n    + [Tools](#tools)\n      - [0. Now CV2 transforms have been released.](#0-now-cv2-transforms-have-been-released)\n      - [1. Show your model parameters and FLOPs.](#1-show-your-model-parameters-and-flops)\n      - [2. Metric collection](#2-metric-collection)\n      - [3. Model Initializer](#3-model-initializer)\n      - [4. AdaptiveSequential](#4-adaptivesequential)\n      - [5. Make and Use LMDB dataset.](#5-make-and-use-lmdb-dataset)\n      - [6. Non-Lable dataset](#6-non-lable-dataset)\n      - [7. Activation Layer](#7-activation-layer)\n      - [8. FeatureVerification Metric](#8-featureverification-metric)\n    + [Fashion work](#fashion-work)\n      - [1. LabelSmoothingLoss](#1-labelsmoothingloss)\n      - [2. CosineWarmupLr](#2-cosinewarmuplr)\n      - [3. SwitchNorm2d/3d](#3-switchnorm2d-3d)\n      - [4. Swish activation](#4-swish-activation)\n      - [5. Lookahead optimizer](#5-lookahead-optimizer)\n      - [5. Mixup training](#5-mixup-training)\n      - [6. Cutout](#6-cutout)\n      - [7. No decay bias](#7-no-decay-bias)\n      - [8. Margin based classification loss](#8-margin-based-classification-loss)\n      - [9. DCNv2](#9-dcnv2)\n      - [10. FocalLoss](#10-focalloss)\n      - [11. SigmoidCrossEntropy](#11-sigmoidcrossentropy)\n      - [12. CircleLoss](#12-circleloss)\n      - [13. EvoNrom](#13-evonrom)\n      - [14. Activation Layer](#14-activation-layer)\n      - [15. Zero LastGamma Init](#15-zero-lastgamma-init)\n      - [16. SGD_GC](#16-sgc_gc)\n      - [17. Autoaugment](#17-autoaugment)\n  * [Contribution](#contribution)\n\n## Installing\nAn easy way to install Torch Toolbox is via pip:\n```shell\npip install torchtoolbox\n```\nIf you want to install the nightly version:\n```shell\npip install -U git+https://github.com/PistonY/torch-toolbox.git@master\n```\n## Todo\n- [x] cv2 transforms.\n- [ ] Integrate with [albumentations](https://github.com/albumentations-team/albumentations)\n- [ ] Prepare tensorboard support with metric collection.\n\n## Usage\nToolbox have two main parts:\n1. Auxiliary tools to make using Pytorch easier.\n2. Some fashion work which don't exist in Pytorch core.\n\nMore examples could be found at [ModelZoo.pytorch](https://github.com/PistonY/ModelZoo.pytorch)\n\n### Tools\n#### 0. Now CV2 transforms have been released.\nSupport as list:(need test)\n```python\n__all__ = [\"Compose\", \"ToTensor\", \"ToCVImage\", \"Normalize\", \"Resize\", \"Scale\", \"CenterCrop\", \"Pad\",\n           \"Lambda\", \"RandomApply\", \"RandomChoice\", \"RandomOrder\", \"RandomCrop\", \"RandomHorizontalFlip\",\n           \"RandomVerticalFlip\", \"RandomResizedCrop\", \"RandomSizedCrop\", \"FiveCrop\", \"TenCrop\", \"LinearTransformation\",\n           \"ColorJitter\", \"RandomRotation\", \"RandomAffine\", \"Grayscale\", \"RandomGrayscale\",\n           \"RandomPerspective\", \"RandomErasing\", \"RandomGaussianNoise\", \"RandomPoissonNoise\", \"RandomSPNoise\",\n           \"RandomTransforms\", \"Cutout\"]\n```\nPart of this code refers to [opencv_transforms_torchvision](https://github.com/YU-Zhiyang/opencv_transforms_torchvision)\n- [albumentations](https://github.com/albumentations-team/albumentations) is also recommended as cv2 backend transform tools.\n\n#### 1. Show your model parameters and FLOPs.\n```python\nimport torch\nfrom torchtoolbox.tools import summary\nfrom torchvision.models.mobilenet import mobilenet_v2\nmodel = mobilenet_v2()\nsummary(model, torch.rand((1, 3, 224, 224)))\n``` \nHere are some short outputs.\n```\n        Layer (type)               Output Shape          Params    FLOPs(M+A) #\n================================================================================\n            Conv2d-1          [1, 64, 112, 112]            9408       235225088\n       BatchNorm2d-2          [1, 64, 112, 112]             256         1605632\n              ReLU-3          [1, 64, 112, 112]               0               0\n         MaxPool2d-4            [1, 64, 56, 56]               0               0\n          ...                      ...                      ...              ...\n          Linear-158                  [1, 1000]         1281000         2560000\n     MobileNetV2-159                  [1, 1000]               0               0\n================================================================================\n        Total parameters: 3,538,984  3.5M\n    Trainable parameters: 3,504,872\nNon-trainable parameters: 34,112\nTotal flops(M)  : 305,252,872  305.3M\nTotal flops(M+A): 610,505,744  610.5M\n--------------------------------------------------------------------------------\nParameters size (MB): 13.50\n```\n\n#### 2. Metric collection\nWhen we train a model we usually need to calculate some metrics like accuracy(top1-acc), loss etc.\nNow toolbox support the following:\n1. Accuracy: top-1 acc.\n2. TopKAccuracy: topK-acc.\n3. NumericalCost: This is a number metric collection which support `mean`, `max`, `min` calculate type.\n4. FeatureVerification.\n    - This is widely used in margin based algorithm.\n\n```python\nfrom torchtoolbox import metric\n\n# define first\ntop1_acc = metric.Accuracy(name='Top1 Accuracy')\ntop5_acc = metric.TopKAccuracy(top=5, name='Top5 Accuracy')\nloss_record = metric.NumericalCost(name='Loss')\n\n# reset before using\ntop1_acc.reset()\ntop5_acc.reset()\nloss_record.reset()\n\n...\nmodel.eval()\nfor data, labels in val_data:\n    data = data.to(device, non_blocking=True)\n    labels = labels.to(device, non_blocking=True)\n\n    outputs = model(data)\n    losses = Loss(outputs, labels)\n    # update/record\n    top1_acc.update(outputs, labels)\n    top5_acc.update(outputs, labels)\n    loss_record.update(losses)\n    test_msg = 'Test Epoch {}: {}:{:.5}, {}:{:.5}, {}:{:.5}\\n'.format(\n    epoch, top1_acc.name, top1_acc.get(), top5_acc.name, top5_acc.get(),\n    loss_record.name, loss_record.get())\n\nprint(test_msg)\n``` \nThen you may get outputs like this\n```\nTest Epoch 101: Top1 Accuracy:0.7332, Top5 Accuracy:0.91514, Loss:1.0605\n```\n\n#### 3. Model Initializer\nNow ToolBox support `XavierInitializer` and `KaimingInitializer`.\n```python\nfrom torchtoolbox.nn.init import KaimingInitializer\n\nmodel = XXX\ninitializer = KaimingInitializer()\nmodel.apply(initializer)\n\n```\n#### 4. AdaptiveSequential\nMake Pytorch `nn.Sequential` could handle multi input/output layer.\n```python\nfrom torch import nn\nfrom torchtoolbox.nn import AdaptiveSequential\nimport torch\n\n\nclass n_to_n(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 3, 1, 1, bias=False)\n        self.conv2 = nn.Conv2d(3, 3, 1, 1, bias=False)\n\n    def forward(self, x1, x2):\n        y1 = self.conv1(x1)\n        y2 = self.conv2(x2)\n        return y1, y2\n\n\nclass n_to_one(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 3, 1, 1, bias=False)\n        self.conv2 = nn.Conv2d(3, 3, 1, 1, bias=False)\n\n    def forward(self, x1, x2):\n        y1 = self.conv1(x1)\n        y2 = self.conv2(x2)\n        return y1 + y2\n\n\nclass one_to_n(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 3, 1, 1, bias=False)\n        self.conv2 = nn.Conv2d(3, 3, 1, 1, bias=False)\n\n    def forward(self, x):\n        y1 = self.conv1(x)\n        y2 = self.conv2(x)\n        return y1, y2\n\nseq = AdaptiveSequential(one_to_n(), n_to_n(), n_to_one()).cuda()\ntd = torch.rand(1, 3, 32, 32).cuda()\n\nout = seq(td)\nprint(out.size())\n\n# output\n# torch.Size([1, 3, 32, 32])\n```\n#### 5. Make and Use LMDB dataset.\nIf you meet IO speed limit, you may think about [LMDB](https://lmdb.readthedocs.io/en/release/) format dataset.\nLMDB is a tiny database with some excellent properties.\n\nEasy to generate a LMDB format dataset.\n```python\nfrom torchtoolbox.tools.convert_lmdb import generate_lmdb_dataset, raw_reader\nfrom torchvision.datasets import ImageFolder\n\ndt = ImageFolder(..., loader=raw_reader)\nsave_dir = XXX \ndataset_name = YYY\ngenerate_lmdb_dataset(dt, save_dir=save_dir, name=dataset_name)\n\n```\n\nThen if you use `ImageFolder` like dataset you can easily use `ImageLMDB` to load you dataset.\n```python\nfrom torchtoolbox.data import ImageLMDB\n\ndt = ImageLMDB(db_path=save_dir, db_name=dataset_name, ...)\n```\n\n#### 6. Non-Lable dataset\nThis dataset only return images.\n\nMore details please refers to [codes](https://github.com/PistonY/torch-toolbox/blob/4838af996b972cd666fadb9fb6bd6dab2103ccad/torchtoolbox/data/datasets.py#L13)\n\n#### 7. Activation Layer\nA `Activation` Layer is provided to select a activation by string.\n```python\nfrom torchtoolbox.nn import Activation\n\nrelu = Activation('relu', auto_optimize=True)\n\n```\n\n#### 8. FeatureVerification Metric\nA `FeatureVerification Metric` used to test feature based accuracy.\nMore details refers to code.\n\n### Fashion work\n\n#### 1. LabelSmoothingLoss\n\n```python\nfrom torchtoolbox.nn import LabelSmoothingLoss\n# The num classes of your task should be defined.\nclasses = 10\n# Loss\nLoss = LabelSmoothingLoss(classes, smoothing=0.1)\n\n...\nfor i, (data, labels) in enumerate(train_data):\n    data = data.to(device, non_blocking=True)\n    labels = labels.to(device, non_blocking=True)\n\n    optimizer.zero_grad()\n    outputs = model(data)\n    # just use as usual.\n    loss = Loss(outputs, labels)\n    loss.backward()\n    optimizer.step()\n```\n\n#### 2. CosineWarmupLr\nCosine lr scheduler with warm-up epochs.It's helpful to improve acc for classification models.\n```python\nfrom torchtoolbox.optimizer import CosineWarmupLr\n\noptimizer = optim.SGD(...)\n# define scheduler\n# `batches_pre_epoch` means how many batches(times update/step the model) within one epoch.\n# `warmup_epochs` means increase lr how many epochs to `base_lr`.\n# you can find more details in file.\nlr_scheduler = CosineWarmupLr(optimizer, batches_pre_epoch, epochs,\n                              base_lr=lr, warmup_epochs=warmup_epochs)\n...\nfor i, (data, labels) in enumerate(train_data):\n    ...\n    optimizer.step()\n    # remember to step/update status here.\n    lr_scheduler.step()\n    ...\n```\n\n#### 3. SwitchNorm2d/3d\n```python\nfrom torchtoolbox.nn import SwitchNorm2d, SwitchNorm3d\n```\nJust use it like Batchnorm2d/3d.\nMore details please refer to origin paper \n[Differentiable Learning-to-Normalize via Switchable Normalization](https://arxiv.org/pdf/1806.10779.pdf) \n[OpenSourse](https://github.com/switchablenorms/Switchable-Normalization)\n\n\n#### 4. Swish activation\n```python\nfrom torchtoolbox.nn import Swish\n```\nJust use it like Relu.\nMore details please refer to origin paper \n[SEARCHING FOR ACTIVATION FUNCTIONS](https://arxiv.org/pdf/1710.05941.pdf)\n\n#### 5. Lookahead optimizer\nA wrapper optimizer seems better than Adam. \n[Lookahead Optimizer: k steps forward, 1 step back](https://arxiv.org/abs/1907.08610)\n```python\nfrom torchtoolbox.optimizer import Lookahead\nfrom torch import optim\n\noptimizer = optim.Adam(...)\noptimizer = Lookahead(optimizer)\n```\n\n#### 5. Mixup training\nMixup method to train a classification model.\n[mixup: BEYOND EMPIRICAL RISK MINIMIZATION](https://arxiv.org/pdf/1710.09412.pdf)\n\n```python\nfrom torchtoolbox.tools import mixup_data, mixup_criterion\n\n# set beta distributed parm, 0.2 is recommend.\nalpha = 0.2\nfor i, (data, labels) in enumerate(train_data):\n    data = data.to(device, non_blocking=True)\n    labels = labels.to(device, non_blocking=True)\n\n    data, labels_a, labels_b, lam = mixup_data(data, labels, alpha)\n    optimizer.zero_grad()\n    outputs = model(data)\n    loss = mixup_criterion(Loss, outputs, labels_a, labels_b, lam)\n\n    loss.backward()\n    optimizer.update()\n```\n\n#### 6. Cutout\nA image transform method.\n[Improved Regularization of Convolutional Neural Networks with Cutout](https://arxiv.org/pdf/1708.04552.pdf)\n```python\nfrom torchvision import transforms\nfrom torchtoolbox.transform import Cutout\n\n_train_transform = transforms.Compose([\n    transforms.RandomResizedCrop(224),\n    Cutout(),\n    transforms.RandomHorizontalFlip(),\n    transforms.ColorJitter(0.4, 0.4, 0.4),\n    transforms.ToTensor(),\n    normalize,\n])\n```\n\n#### 7. No decay bias\nIf you train a model with big batch size, eg. 64k, you may need this,\n[Highly Scalable Deep Learning Training System with Mixed-Precision: Training ImageNet in Four Minutes](https://arxiv.org/pdf/1807.11205.pdf)\n\n```python\nfrom torchtoolbox.tools import no_decay_bias\nfrom torch import optim\n\nmodel = XXX\nparameters = no_decay_bias(model)\noptimizer = optim.SGD(parameters, ...)\n\n```\n#### 8. Margin based classification loss\nNow support:\n1. ArcLoss\n2. CosLoss\n3. L2Softmax\n\n```python\nfrom torchtoolbox.nn.loss import ArcLoss, CosLoss, L2Softmax\n```\n\nYou could use this like `nn.CrossEntropyLoss`\n\n#### 9. DCNv2\n- [Deformable ConvNets v2: More Deformable, Better Results](https://arxiv.org/abs/1811.11168)\n\n#### 10. FocalLoss\n- [Focal Loss for Dense Object Detection](https://arxiv.org/abs/1708.02002)\n\n#### 11. SigmoidCrossEntropy\n\n#### 12. CircleLoss\n- [Circle Loss: A Unified Perspective of Pair Similarity Optimization](https://arxiv.org/pdf/2002.10857)\n\n#### 13. EvoNrom\n- [Evolving Normalization-Activation Layers](https://arxiv.org/pdf/2004.02967)\n\n#### 14. Activation Layer\n1. Swish\n2. HardSwish\n3. HardSigmoid\nUsage:\n```python\nfrom torchtoolbox.nn import Swish, HardSwish, HardSigmoid\n\nswish = Swish()\nhswish = HardSwish()\nhsigmoid = HardSigmoid()\n\n```\n\n#### 15. Zero LastGamma Init\n```python\nfrom torchtoolbox.nn.init import ZeroLastGamma\n\nmodel == XXX\ninit = ZeroLastGamma(block_name='Bottleneck', bn_name='bn3')\nmodel.apply(init)\n```\n\n#### 16. SGC_GC\n[Gradient Centralization: A New Optimization Technique for Deep Neural Networks](https://arxiv.org/pdf/2004.01461.pdf)\n\n```python\nfrom torchtoolbox.optimizer import SGD_GC\n\noptimizer = SGD_GC(model.parameters())\noptimizer.zero_grad()\nloss.backward()\noptimizer.step()\n\n```\n\n#### 17. Autoaugment\n```python\n# for ImageNet\nfrom torchtoolbox.transform import ImageNetPolicy, Compose, \\\n            RandomResizedCrop, RandomHorizontalFlip, ToTensor\n\ntransforms = Compose([RandomResizedCrop(224), \n                      RandomHorizontalFlip(),\n                      ImageNetPolicy,\n                      ToTensor()])\n```\n\n## Contribution\n\nWelcome pull requests and issues!!!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PistonY/torch-toolbox",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchtoolbox",
    "package_url": "https://pypi.org/project/torchtoolbox/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchtoolbox/",
    "project_urls": {
      "Homepage": "https://github.com/PistonY/torch-toolbox"
    },
    "release_url": "https://pypi.org/project/torchtoolbox/0.1.8.2/",
    "requires_dist": [
      "numpy",
      "tqdm",
      "pyarrow",
      "six",
      "lmdb",
      "scikit-learn",
      "scipy",
      "opencv-python",
      "pyyaml",
      "tensorboard",
      "prettytable",
      "transformers"
    ],
    "requires_python": "",
    "summary": "ToolBox to make using Pytorch much easier.",
    "version": "0.1.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11884006,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22515ffc4f617475e564e64e3b777f34d90633aac98f5812b78a71fb2e6d91b2",
          "md5": "e954b879c0741e4885df0afc30229130",
          "sha256": "56fc2a0d53ad9d4255a346a8254cca45cd11ab6387d5781cddcc231013f45f1b"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e954b879c0741e4885df0afc30229130",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5678,
        "upload_time": "2019-07-01T07:14:03",
        "upload_time_iso_8601": "2019-07-01T07:14:03.602660Z",
        "url": "https://files.pythonhosted.org/packages/22/51/5ffc4f617475e564e64e3b777f34d90633aac98f5812b78a71fb2e6d91b2/torchtoolbox-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b2af8186129d477f06b1eb7ea3736e33baaedc5ea2ff13047997815f885894b",
          "md5": "696bb98428883d3ff5e1f4cc13f674ad",
          "sha256": "a3410580bb6ffd0a0e3c94b09f711558f32229236579a8004920d8e4c47c4d70"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "696bb98428883d3ff5e1f4cc13f674ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7651,
        "upload_time": "2019-07-09T09:21:59",
        "upload_time_iso_8601": "2019-07-09T09:21:59.276674Z",
        "url": "https://files.pythonhosted.org/packages/1b/2a/f8186129d477f06b1eb7ea3736e33baaedc5ea2ff13047997815f885894b/torchtoolbox-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14409431a5c189ee16a0c1e442ae0b7ff659387da36058e2cdee669869957376",
          "md5": "32ab328ca360928e3b7aed29f4bb9c13",
          "sha256": "3e9654886c2940e40a6536981b9380711b591650a27c7542c7eb81ddf754d04a"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "32ab328ca360928e3b7aed29f4bb9c13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19682,
        "upload_time": "2019-08-28T10:20:48",
        "upload_time_iso_8601": "2019-08-28T10:20:48.716041Z",
        "url": "https://files.pythonhosted.org/packages/14/40/9431a5c189ee16a0c1e442ae0b7ff659387da36058e2cdee669869957376/torchtoolbox-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60bbd6a731a46e5dcb28495323033ef01ad93647d0965a645147e5e921bfcb8d",
          "md5": "0eb52f5b70cf246f52b6911cdd626db6",
          "sha256": "ebd1b292d1056e9a6d9b8a51662e639844c09bda96d45e97e42c845b3c135fab"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0eb52f5b70cf246f52b6911cdd626db6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33915,
        "upload_time": "2019-12-17T09:04:18",
        "upload_time_iso_8601": "2019-12-17T09:04:18.538358Z",
        "url": "https://files.pythonhosted.org/packages/60/bb/d6a731a46e5dcb28495323033ef01ad93647d0965a645147e5e921bfcb8d/torchtoolbox-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d777d58c37478b731fdaac8ac5ad3131eff095aa893e3a98daddd836208d8296",
          "md5": "9a36099306cbe5f831a693ce11cb23af",
          "sha256": "3b805c3603aa77cdbed5d42c70e3d15481ea086fe8668b2329c344dde65d4644"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a36099306cbe5f831a693ce11cb23af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27513,
        "upload_time": "2019-12-17T09:04:22",
        "upload_time_iso_8601": "2019-12-17T09:04:22.394717Z",
        "url": "https://files.pythonhosted.org/packages/d7/77/d58c37478b731fdaac8ac5ad3131eff095aa893e3a98daddd836208d8296/torchtoolbox-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12e14e4fa67ce73b985d852a30434a9cb6d8418b85559ec0439e75044cb0c697",
          "md5": "c6c74f6cbee8aeb6727ef0b884235b87",
          "sha256": "427fc30aa14d069249ade9714a2caa7a9f0cd37cf5356a7b388fcbcb3c39d63a"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6c74f6cbee8aeb6727ef0b884235b87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33927,
        "upload_time": "2019-12-18T03:22:42",
        "upload_time_iso_8601": "2019-12-18T03:22:42.911644Z",
        "url": "https://files.pythonhosted.org/packages/12/e1/4e4fa67ce73b985d852a30434a9cb6d8418b85559ec0439e75044cb0c697/torchtoolbox-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a03209ef76c1ae0a95035fc07c135c5f3fc23eb959ffcd8ab549e26595f9116",
          "md5": "1b13d2b91649901abdd8637dff6dc72f",
          "sha256": "efe82426abccff1113abeb7e94f61bd18d063055fb7b0e783efb71378451fa17"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1b13d2b91649901abdd8637dff6dc72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27295,
        "upload_time": "2019-12-18T03:22:44",
        "upload_time_iso_8601": "2019-12-18T03:22:44.675552Z",
        "url": "https://files.pythonhosted.org/packages/3a/03/209ef76c1ae0a95035fc07c135c5f3fc23eb959ffcd8ab549e26595f9116/torchtoolbox-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "025163486af2b1a834187067d160b69d15c795af29e69d718727f7d7e42e501a",
          "md5": "a7a5ee577d036f41271fb6d9227eee57",
          "sha256": "d71ecb31259bdd628cada804ee5a8bc7890f0b837dc3c99bcea32ca766e2d881"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a5ee577d036f41271fb6d9227eee57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55110,
        "upload_time": "2020-03-05T08:20:51",
        "upload_time_iso_8601": "2020-03-05T08:20:51.782845Z",
        "url": "https://files.pythonhosted.org/packages/02/51/63486af2b1a834187067d160b69d15c795af29e69d718727f7d7e42e501a/torchtoolbox-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e256563a08cfd72810147b825d638f16dda94861e5bd21d9ada64c3c1800c26",
          "md5": "1e81a0a76c7228265250a89b2464efaf",
          "sha256": "d138732ca8e0f1b8ae4918b086ff36d0e95d69f4eb0e1aad31e160bd3fc57485"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1e81a0a76c7228265250a89b2464efaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46660,
        "upload_time": "2020-03-05T08:20:53",
        "upload_time_iso_8601": "2020-03-05T08:20:53.413708Z",
        "url": "https://files.pythonhosted.org/packages/7e/25/6563a08cfd72810147b825d638f16dda94861e5bd21d9ada64c3c1800c26/torchtoolbox-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c3e2fb126d913f6956a454fc45d8cdb01bee85329d7a596559741d8937806a5",
          "md5": "74c1215bcdd2ac3c105ec3d8523d83e0",
          "sha256": "abd45f41e744194c50a2c32751a4a156efb748d8975387e1b567190e78c022af"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74c1215bcdd2ac3c105ec3d8523d83e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55854,
        "upload_time": "2020-04-08T09:15:58",
        "upload_time_iso_8601": "2020-04-08T09:15:58.167919Z",
        "url": "https://files.pythonhosted.org/packages/8c/3e/2fb126d913f6956a454fc45d8cdb01bee85329d7a596559741d8937806a5/torchtoolbox-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aef26512b3b09bf77f7254f320165fbffa9570793632297aae65be5d3fbedf1d",
          "md5": "03671fa010bd9eae85fa87de32dec8af",
          "sha256": "e3184baeebd3fb6084272e4e1286b416d43ba1655edd3984eb8c96ca864d9b11"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "03671fa010bd9eae85fa87de32dec8af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47398,
        "upload_time": "2020-04-08T09:16:00",
        "upload_time_iso_8601": "2020-04-08T09:16:00.041712Z",
        "url": "https://files.pythonhosted.org/packages/ae/f2/6512b3b09bf77f7254f320165fbffa9570793632297aae65be5d3fbedf1d/torchtoolbox-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "766c25f066977b6821796c3cf11e981921c1cb030eafec0ff736d271b6b09878",
          "md5": "dfe6e60756c2b5e4b1761dda6f63a20f",
          "sha256": "241c803781b686c11f00dd2567bffc97ceeda501eb42ed5407bf5e468eea8e78"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfe6e60756c2b5e4b1761dda6f63a20f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55945,
        "upload_time": "2020-04-09T03:32:46",
        "upload_time_iso_8601": "2020-04-09T03:32:46.554959Z",
        "url": "https://files.pythonhosted.org/packages/76/6c/25f066977b6821796c3cf11e981921c1cb030eafec0ff736d271b6b09878/torchtoolbox-0.1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62eb5e14eca434d5c4e968d988b227fb97cb8e7ac06022a864ba37e87ff5ce98",
          "md5": "4331e1171bf181258450dad6f246e786",
          "sha256": "324d6d410452637e65603d736a897b85f2bfe34bb3637af7cb8008f22b40ce60"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4331e1171bf181258450dad6f246e786",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47467,
        "upload_time": "2020-04-09T03:32:48",
        "upload_time_iso_8601": "2020-04-09T03:32:48.136804Z",
        "url": "https://files.pythonhosted.org/packages/62/eb/5e14eca434d5c4e968d988b227fb97cb8e7ac06022a864ba37e87ff5ce98/torchtoolbox-0.1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b3720399783618f307c6b1cac4d2507602514720df66f26ccb57319a75d9e1",
          "md5": "168bb0ea64f01f85bc521a6f839127ff",
          "sha256": "37e0b9b144d9ef611189cfe7fea303e5814ed2a3fc2948f03d773a5547f5f6a3"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "168bb0ea64f01f85bc521a6f839127ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58626,
        "upload_time": "2020-08-03T02:31:24",
        "upload_time_iso_8601": "2020-08-03T02:31:24.433742Z",
        "url": "https://files.pythonhosted.org/packages/a2/b3/720399783618f307c6b1cac4d2507602514720df66f26ccb57319a75d9e1/torchtoolbox-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96026482f90ba8a41b62008b76f94bfd13e54f2ee28ef2035dbaca5e7f6756c8",
          "md5": "959c01bf860ff178837fa41a7d85da72",
          "sha256": "e1558fe8fd78d65786a91a26f44f2924d2900e75da0c734ee791691fa5b310b5"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "959c01bf860ff178837fa41a7d85da72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51950,
        "upload_time": "2020-08-03T02:31:25",
        "upload_time_iso_8601": "2020-08-03T02:31:25.759335Z",
        "url": "https://files.pythonhosted.org/packages/96/02/6482f90ba8a41b62008b76f94bfd13e54f2ee28ef2035dbaca5e7f6756c8/torchtoolbox-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e855bacaf19eefb0e3f86a7cacfe597e08664dec510872f3a0f2848e61ae1dd2",
          "md5": "d4ef9bad06248d9f719effe3be5f35af",
          "sha256": "fedf293605e84f5a59bb9a727b978ac1c9f0ec7d644db1e4ecce59db96563628"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4ef9bad06248d9f719effe3be5f35af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 84980,
        "upload_time": "2021-10-31T15:09:30",
        "upload_time_iso_8601": "2021-10-31T15:09:30.222160Z",
        "url": "https://files.pythonhosted.org/packages/e8/55/bacaf19eefb0e3f86a7cacfe597e08664dec510872f3a0f2848e61ae1dd2/torchtoolbox-0.1.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "831cf5156660f0942e51f69c7eab6f326b09390eecdefde7c2465cb6d9d48e9f",
          "md5": "83f7e327b333f621b2ea4f3294596513",
          "sha256": "31f92dd93f3115a8e336d9e3db5945bafa9dbb1323f3d7e47bb7fff968c87203"
        },
        "downloads": -1,
        "filename": "torchtoolbox-0.1.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "83f7e327b333f621b2ea4f3294596513",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71829,
        "upload_time": "2021-10-31T15:09:32",
        "upload_time_iso_8601": "2021-10-31T15:09:32.025444Z",
        "url": "https://files.pythonhosted.org/packages/83/1c/f5156660f0942e51f69c7eab6f326b09390eecdefde7c2465cb6d9d48e9f/torchtoolbox-0.1.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e855bacaf19eefb0e3f86a7cacfe597e08664dec510872f3a0f2848e61ae1dd2",
        "md5": "d4ef9bad06248d9f719effe3be5f35af",
        "sha256": "fedf293605e84f5a59bb9a727b978ac1c9f0ec7d644db1e4ecce59db96563628"
      },
      "downloads": -1,
      "filename": "torchtoolbox-0.1.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4ef9bad06248d9f719effe3be5f35af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 84980,
      "upload_time": "2021-10-31T15:09:30",
      "upload_time_iso_8601": "2021-10-31T15:09:30.222160Z",
      "url": "https://files.pythonhosted.org/packages/e8/55/bacaf19eefb0e3f86a7cacfe597e08664dec510872f3a0f2848e61ae1dd2/torchtoolbox-0.1.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "831cf5156660f0942e51f69c7eab6f326b09390eecdefde7c2465cb6d9d48e9f",
        "md5": "83f7e327b333f621b2ea4f3294596513",
        "sha256": "31f92dd93f3115a8e336d9e3db5945bafa9dbb1323f3d7e47bb7fff968c87203"
      },
      "downloads": -1,
      "filename": "torchtoolbox-0.1.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "83f7e327b333f621b2ea4f3294596513",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 71829,
      "upload_time": "2021-10-31T15:09:32",
      "upload_time_iso_8601": "2021-10-31T15:09:32.025444Z",
      "url": "https://files.pythonhosted.org/packages/83/1c/f5156660f0942e51f69c7eab6f326b09390eecdefde7c2465cb6d9d48e9f/torchtoolbox-0.1.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}