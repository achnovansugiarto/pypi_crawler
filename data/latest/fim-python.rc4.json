{
  "info": {
    "author": "Thomas Grandits",
    "author_email": "tomdev@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: GPU :: NVIDIA CUDA",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Fast Iterative Method - Numpy/Cupy\nThis repository implements the Fast Iterative Method on [tetrahedral domains](https://epubs.siam.org/doi/abs/10.1137/120881956) and [triangulated surfaces](https://epubs.siam.org/doi/abs/10.1137/100788951) purely in python both for CPU (numpy) and GPU (cupy). The main focus is however on the GPU implementation, since it can be better exploited for very large domains.\n\n[![codecov](https://codecov.io/gh/thomgrand/fim-python/branch/master/graph/badge.svg?token=DG05WR5030)](https://codecov.io/gh/thomgrand/fim-python)\n[![CI Tests](https://github.com/thomgrand/fim-python/actions/workflows/python-package.yml/badge.svg)](https://github.com/thomgrand/fim-python/actions/workflows/python-package.yml)\n[![DOI](https://joss.theoj.org/papers/10.21105/joss.03641/status.svg)](https://doi.org/10.21105/joss.03641)\n\n# Details\nThe anisotropic eikonal equation is given by\n\n![$$\\left<D \\nabla \\phi, \\nabla \\phi\\right> = 1$$](https://latex.codecogs.com/svg.latex?\\Large&space;\\left%3CD%20\\nabla%20\\phi,%20\\nabla%20\\phi\\right%3E%20=%201)\n\n\nfor given boundary conditions \n\n![$$\\phi(\\mathbf{x}_0) = g(\\mathbf{x}_0)$$](https://latex.codecogs.com/svg.latex?\\Large\\phi(\\mathbf{x}_0)%20=%20g(\\mathbf{x}_0))\n\nFor a given anisotropic velocity, this can calculate the geodesic distance between a set of ![$\\mathbf{x}_0$](https://latex.codecogs.com/svg.latex?\\Large\\mathbf{x}_0) and all points on the domain like shown in the figure.\n\n![Preview Image](docs/figs/usage_example.jpg)\n\nNote that when using multiple ![$\\mathbf{x}_0$](https://latex.codecogs.com/svg.latex?\\Large\\mathbf{x}_0), they are not guaranteed to be in the final solution if they are not a valid viscosity solution. A recommended read for more details on the subject is:  \nEvans, Lawrence C. \"Partial differential equations.\" *Graduate studies in mathematics* 19.2 (1998).\n\n# Installation\n\nThe easiest way to install the library is using pip\n```bash\npip install fim-python[gpu] #GPU version\n```\n\nIf you don't have a compatible CUDA GPU, you can install the CPU only version to test the library, but the performance won't be comparable to the GPU version (see [Benchmark](#benchmark)).\n\n```bash\npip install fim-python #CPU version\n```\n\n# Usage\n\nThe main interface to create a solver object to use is [`FIMPY.create_fim_solver`](https://fim-python.readthedocs.io/en/latest/interface.html#fimpy.solver.FIMPY.create_fim_solver)\n\n```python\nfrom fimpy.solver import FIMPY\n\n#Create a FIM solver, by default the GPU solver will be called with the active list\n#Set device='cpu' to run on cpu and use_active_list=False to use Jacobi method\nfim = FIMPY.create_fim_solver(points, elems, D)\n```\n\nExample\n-------\n\nThe following code reproduces the [above example](#details)\n\n```python\nimport numpy as np\nimport cupy as cp\nfrom fimpy.solver import FIMPY\nfrom scipy.spatial import Delaunay\nimport matplotlib.pyplot as plt\n\n#Create triangulated points in 2D\nx = np.linspace(-1, 1, num=50)\nX, Y = np.meshgrid(x, x)\npoints = np.stack([X, Y], axis=-1).reshape([-1, 2]).astype(np.float32)\nelems = Delaunay(points).simplices\nelem_centers = np.mean(points[elems], axis=1)\n\n#The domain will have a small spot where movement will be slow\nvelocity_f = lambda x: (1 / (1 + np.exp(3.5 - 25*np.linalg.norm(x - np.array([[0.33, 0.33]]), axis=-1)**2)))\nvelocity_p = velocity_f(points) #For plotting\nvelocity_e = velocity_f(elem_centers) #For computing\nD = np.eye(2, dtype=np.float32)[np.newaxis] * velocity_e[..., np.newaxis, np.newaxis] #Isotropic propagation\n\nx0 = np.array([np.argmin(np.linalg.norm(points, axis=-1), axis=0)])\nx0_vals = np.array([0.])\n\n#Create a FIM solver, by default the GPU solver will be called with the active list\nfim = FIMPY.create_fim_solver(points, elems, D)\nphi = fim.comp_fim(x0, x0_vals)\n\n#Plot the data of all points to the given x0 at the center of the domain\nfig, axes = plt.subplots(nrows=1, ncols=2, sharey=True)\ncont_f1 = axes[0].contourf(X, Y, phi.get().reshape(X.shape))\naxes[0].set_title(\"Distance from center\")\n\ncont_f2 = axes[1].contourf(X, Y, velocity_p.reshape(X.shape))\naxes[1].set_title(\"Assumed isotropic velocity\")\nplt.show()\n```\n\nA general rule of thumb: If you only need to evaluate the eikonal equation once for a mesh, the Jacobi version (`use_active_list=False`) will probably be quicker since its initial overhead is low.\nRepeated evaluations with different ![$\\mathbf{x}_0$](https://latex.codecogs.com/svg.latex?\\Large\\mathbf{x}_0) or ![$D$](https://latex.codecogs.com/svg.latex?\\Large%20D) favor the active list method for larger meshes.  \nOn the CPU, `use_active_list=True` outperforms the Jacobi approach for almost all cases.\n\n# Documentation\n\n[https://fim-python.readthedocs.io/en/latest](https://fim-python.readthedocs.io/en/latest)\n\n# Citation\n\nIf you find this work useful in your research, please consider citing the paper in the [Journal of Open Source Software](https://joss.theoj.org/)\n```bibtex\n@article{grandits_fast_2021,\n  doi = {10.21105/joss.03641},\n  url = {https://doi.org/10.21105/joss.03641},\n  year = {2021},\n  publisher = {The Open Journal},\n  volume = {6},\n  number = {66},\n  pages = {3641},\n  author = {Thomas Grandits},\n  title = {A Fast Iterative Method Python package},\n  journal = {Journal of Open Source Software}\n}\n```\n\n# Benchmark\n\nBelow you can see a performance benchmark of the library for tetrahedral domains (cube in ND), triangular surfaces (plane in ND), and line networks (randomly sampled point cloud in the ND cube with successive minimum spanning tree) from left to right.\nIn all cases, ![$\\mathbf{x}_0$](https://latex.codecogs.com/svg.latex?\\Large\\mathbf{x}_0) was placed in the middle of the domain.\nThe dashed lines show the performance of the implementation using active lists, the solid lines use the Jacobi method (computing all updates in each iteration).\n\n![Preview](docs/figs/benchmark_gpu.jpg)\n\n![Preview](docs/figs/benchmark_cpu.jpg)\n\nThe library works for an arbitrary number of dimensions (manifolds in N-D), but the versions for 2 and 3D received a few optimized kernels that speed up the computations.\n\nThe steps to reproduce the benchmarks can be found in the documentation at [https://fim-python.readthedocs.io/en/latest/benchmark.html](https://fim-python.readthedocs.io/en/latest/benchmark.html)\n\n# Contributing\n\nSee [Contributing](CONTRIBUTING.md) for more information on how to contribute.\n\n# License\n\nThis library is licensed under the [GNU Affero General Public License](LICENSE). \nIf you need the library issued under another license for commercial use, you can contact me via e-mail [tomdev (at) gmx.net](mailto:tomdev@gmx.net).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thomgrand/fim-python",
    "keywords": "",
    "license": "AGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fim-python",
    "package_url": "https://pypi.org/project/fim-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/fim-python/",
    "project_urls": {
      "Homepage": "https://github.com/thomgrand/fim-python"
    },
    "release_url": "https://pypi.org/project/fim-python/1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "This repository implements the Fast Iterative Method on tetrahedral domains and triangulated surfaces purely in python both for CPU (numpy) and GPU (cupy).",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12707837,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d0bbe0fb5c277dff70cefd153e7c5a4e409fb0483d0612e269c2cd1df91d84",
          "md5": "ead368b6ba9770e5c3c3f4cb675b9151",
          "sha256": "bff1b45783e2d111a96c18d2b28438a8800e32ba4120e50b32594d0282bc8ec0"
        },
        "downloads": -1,
        "filename": "fim-python-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ead368b6ba9770e5c3c3f4cb675b9151",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18026,
        "upload_time": "2021-06-03T23:10:14",
        "upload_time_iso_8601": "2021-06-03T23:10:14.995970Z",
        "url": "https://files.pythonhosted.org/packages/20/d0/bbe0fb5c277dff70cefd153e7c5a4e409fb0483d0612e269c2cd1df91d84/fim-python-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c15d7b2e336cce04339e5ebb6f53b6ea813d2f858b580136b5d6663021df7c08",
          "md5": "771ae27085567ac4a87105d6985bda9a",
          "sha256": "628a939f16014effd0070497dbf38ce9e01b2218425d3f448c3748f164af5def"
        },
        "downloads": -1,
        "filename": "fim-python-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "771ae27085567ac4a87105d6985bda9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30568,
        "upload_time": "2021-06-04T21:47:37",
        "upload_time_iso_8601": "2021-06-04T21:47:37.815344Z",
        "url": "https://files.pythonhosted.org/packages/c1/5d/7b2e336cce04339e5ebb6f53b6ea813d2f858b580136b5d6663021df7c08/fim-python-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "906675f9360fbb3f98a1d39113920b579760647ad895c74b7b9e1fface6fefdd",
          "md5": "00025a57e1b9d4176cb1fe712587f15e",
          "sha256": "11f9c4c57f028a961fb87f8fca0b2b251a328ec1ebb51f529cd070ddc381d974"
        },
        "downloads": -1,
        "filename": "fim-python-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00025a57e1b9d4176cb1fe712587f15e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31376,
        "upload_time": "2021-10-22T08:51:01",
        "upload_time_iso_8601": "2021-10-22T08:51:01.954592Z",
        "url": "https://files.pythonhosted.org/packages/90/66/75f9360fbb3f98a1d39113920b579760647ad895c74b7b9e1fface6fefdd/fim-python-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3578f412598c064c2897e05f9009f01b693bc48ebd91ae5172eb453996d5752",
          "md5": "97d3b31dea4137aaeeab925b7a4c9f56",
          "sha256": "534dd7780b48daa996255c319eb3abc1f37e7b53efc30df2b28e797f688b928c"
        },
        "downloads": -1,
        "filename": "fim-python-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "97d3b31dea4137aaeeab925b7a4c9f56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31864,
        "upload_time": "2022-01-27T09:10:44",
        "upload_time_iso_8601": "2022-01-27T09:10:44.646560Z",
        "url": "https://files.pythonhosted.org/packages/d3/57/8f412598c064c2897e05f9009f01b693bc48ebd91ae5172eb453996d5752/fim-python-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3578f412598c064c2897e05f9009f01b693bc48ebd91ae5172eb453996d5752",
        "md5": "97d3b31dea4137aaeeab925b7a4c9f56",
        "sha256": "534dd7780b48daa996255c319eb3abc1f37e7b53efc30df2b28e797f688b928c"
      },
      "downloads": -1,
      "filename": "fim-python-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "97d3b31dea4137aaeeab925b7a4c9f56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31864,
      "upload_time": "2022-01-27T09:10:44",
      "upload_time_iso_8601": "2022-01-27T09:10:44.646560Z",
      "url": "https://files.pythonhosted.org/packages/d3/57/8f412598c064c2897e05f9009f01b693bc48ebd91ae5172eb453996d5752/fim-python-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}