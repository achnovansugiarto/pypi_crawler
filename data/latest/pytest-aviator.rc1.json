{
  "info": {
    "author": "aviator-co",
    "author_email": "engineering@aviator.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# Aviator's Pytest Plugin\n## About\n\nAviator's pytest plugin will automatically rerun flaky tests to keep your builds green. By analyzing the test data we have in Flakybot, we determine how many times we should rerun a specific flaky test and the threshold for passing. \n\nIn the example output below, `test_sample_random` must pass at least 1 time, with a maximum of 5 runs. It fails on the first run but passes on the second run, so `test_sample_random` successfully passes on this CI run.\n```\n============================= test session starts ==============================\nplatform linux -- Python 3.6.2, pytest-7.0.1, pluggy-1.0.0 -- /home/circleci/repo/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/circleci/repo\nplugins: flakybot-0.1.1\ncollecting ... collected 6 items                                                              \n\nsrc/test_sample.py::TestSample::test_sample_dict PASSED                  [ 16%]\nsrc/test_sample.py::TestSample::test_sample_list PASSED                  [ 33%]\nsrc/test_sample.py::TestSample::test_sample_number PASSED                [ 50%]\nsrc/test_sample.py::TestSample::test_sample_random PASSED                [ 66%]\nsrc/test_sample.py::TestSample::test_sample_text PASSED                  [ 83%]\nsrc/test_sample.py::TestSample::test_sample_tuple PASSED                 [100%]\n\n------- generated xml file: /home/circleci/repo/test_results/output.xml --------\n===FlakyBot Test Report===\n\ntest_sample_random\n    FAILED: (4 runs remaining out of 5).\n\t<class 'AssertionError'>: 2 != 1\n\t[<TracebackEntry /home/circleci/repo/src/test_sample.py:35>]\n\t\ntest_sample_random passed 1 out of the required 1 times.\n\n===End FlakyBot Test Report===\n============================== 6 passed in 0.08s ===============================\n```\n\nHere's another example run, where `test_sample_random` must pass at least 2 times, with a maximum of 3 runs. It passes on the first run but fails on the next two runs, so `test_sample_random` fails on this CI run.\n\n```\n============================= test session starts ==============================\nplatform linux -- Python 3.6.2, pytest-7.0.1, pluggy-1.0.0 -- /home/circleci/repo/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/circleci/repo\nplugins: flakybot-0.1.1\ncollecting ... collected 6 items                                                              \n\nsrc/test_sample.py::TestSample::test_sample_dict PASSED                  [ 16%]\nsrc/test_sample.py::TestSample::test_sample_list PASSED                  [ 33%]\nsrc/test_sample.py::TestSample::test_sample_number PASSED                [ 50%]\nsrc/test_sample.py::TestSample::test_sample_random FAILED                [ 66%]\nsrc/test_sample.py::TestSample::test_sample_text PASSED                  [ 83%]\nsrc/test_sample.py::TestSample::test_sample_tuple PASSED                 [100%]\n\n=================================== FAILURES ===================================\n________________________ TestSample.test_sample_random _________________________\n \nself = <src.test_sample.TestSample testMethod=test_sample_random>\n \n    def test_sample_random(self):\n        a = random.randint(0, 2)\n        # a = 1\n>       self.assertEqual(a, 1)\nE       AssertionError: 0 != 1\n \nsrc/test_sample.py:44: AssertionError\n- generated xml file: /opt/homebrew/var/buildkite-agent/builds/Doras-MacBook-Pro-local-1/aviator-demo/sample-test/test_results/output.xml -===FlakyBot Test Report===\n===FlakyBot Test Report===\n\ntest_sample_random passed 1 out of the required 2 times.\nRunning test again until it passes 2 times.\n \ntest_sample_random\n\tFAILED: (1 runs remaining out of 3).\n\t<class 'AssertionError'>: 2 != 1\n\t[<TracebackEntry /opt/homebrew/var/buildkite-agent/builds/Doras-MacBook-Pro-local-1/aviator-demo/sample-test/src/test_sample.py:44>]\n \ntest_sample_random: FAILED\n\tIt passed 1 out of the required 2 times.\n\n===End FlakyBot Test Report===\n============================== 1 failed, 5 passed in 0.08s ===============================\n```\n\n## Install\n\nInstall the plugin before running tests with pytest.\n\n```\npip install pytest-aviator\n```\n\n## Store Test Artifacts\n\nIn order to correctly process and rerun the tests, we need the test results. You'll need to use pytest's [`junitxml`](https://docs.pytest.org/en/7.1.x/_modules/_pytest/junitxml.html) flag to report results in JUnit-XML format..\n\n```\npytest src/ -vv --junitxml=\"test_results/result.xml\"\n```\n\n### Buildkite\n\nIf the test results are stored in `test_results/result.xml`, you can upload the artifacts using the buildkite agent.\n\n```\nbuildkite-agent artifact upload test_results/output.xml\n```\nSee the [Buildkite docs](https://buildkite.com/docs/pipelines/artifacts) for other ways to upload build artifacts.\n\n### CircleCI\n\nMake sure to include the `store_artifacts` step in your config.yml.\n```\n- store_artifacts:\n      path: ./test_results/output.xml\n      destination: output.xml\n```\nSee the [CircleCI docs](https://circleci.com/docs/artifacts) for more information.\n\n## Aviator API Token\nMake sure to set your account's Aviator API token as an environment variable `AVIATOR_API_URL`. You can find the token at https://app.aviator.co/account/api.\n\n[CircleCI](https://circleci.com/docs/env-vars) - set the variable under the Project Settings page.\n\n[Buildkite](https://buildkite.com/docs/pipelines/secrets) - manage your API token using a storage service or environment hooks.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aviator-co/pytest-aviator",
    "keywords": "pytest plugin flaky tests rerun retry flakybot aviator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-aviator",
    "package_url": "https://pypi.org/project/pytest-aviator/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-aviator/",
    "project_urls": {
      "Homepage": "https://github.com/aviator-co/pytest-aviator"
    },
    "release_url": "https://pypi.org/project/pytest-aviator/0.1.1/",
    "requires_dist": [
      "pytest",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Aviator's Flakybot pytest plugin that automatically reruns flaky tests.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15660056,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3db223acc79c96295e81975172873e53e6fe3939ba3ae33947eedcd40cfe7fe",
          "md5": "3181b72e6225457e415087a3b0120f25",
          "sha256": "59933a88b722a9f3c0da7be8b0cd0b371fe6859a61e3da33496d211e4786af95"
        },
        "downloads": -1,
        "filename": "pytest_aviator-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3181b72e6225457e415087a3b0120f25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9048,
        "upload_time": "2022-11-04T21:17:08",
        "upload_time_iso_8601": "2022-11-04T21:17:08.582076Z",
        "url": "https://files.pythonhosted.org/packages/a3/db/223acc79c96295e81975172873e53e6fe3939ba3ae33947eedcd40cfe7fe/pytest_aviator-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73b0e3d5e232afdaded88fcccfae199985f71957d56fb0849e40309767f67ee0",
          "md5": "b23fdab380e596137d4f615eade52f4d",
          "sha256": "79ac95fb7ec63f51fff29fb58f85efdee43e74d3dd07367188ad837ab49b5a8e"
        },
        "downloads": -1,
        "filename": "pytest-aviator-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b23fdab380e596137d4f615eade52f4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9786,
        "upload_time": "2022-11-04T21:17:13",
        "upload_time_iso_8601": "2022-11-04T21:17:13.962090Z",
        "url": "https://files.pythonhosted.org/packages/73/b0/e3d5e232afdaded88fcccfae199985f71957d56fb0849e40309767f67ee0/pytest-aviator-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3db223acc79c96295e81975172873e53e6fe3939ba3ae33947eedcd40cfe7fe",
        "md5": "3181b72e6225457e415087a3b0120f25",
        "sha256": "59933a88b722a9f3c0da7be8b0cd0b371fe6859a61e3da33496d211e4786af95"
      },
      "downloads": -1,
      "filename": "pytest_aviator-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3181b72e6225457e415087a3b0120f25",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9048,
      "upload_time": "2022-11-04T21:17:08",
      "upload_time_iso_8601": "2022-11-04T21:17:08.582076Z",
      "url": "https://files.pythonhosted.org/packages/a3/db/223acc79c96295e81975172873e53e6fe3939ba3ae33947eedcd40cfe7fe/pytest_aviator-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73b0e3d5e232afdaded88fcccfae199985f71957d56fb0849e40309767f67ee0",
        "md5": "b23fdab380e596137d4f615eade52f4d",
        "sha256": "79ac95fb7ec63f51fff29fb58f85efdee43e74d3dd07367188ad837ab49b5a8e"
      },
      "downloads": -1,
      "filename": "pytest-aviator-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b23fdab380e596137d4f615eade52f4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9786,
      "upload_time": "2022-11-04T21:17:13",
      "upload_time_iso_8601": "2022-11-04T21:17:13.962090Z",
      "url": "https://files.pythonhosted.org/packages/73/b0/e3d5e232afdaded88fcccfae199985f71957d56fb0849e40309767f67ee0/pytest-aviator-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}