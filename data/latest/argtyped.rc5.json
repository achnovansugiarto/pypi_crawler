{
  "info": {
    "author": "Zecong Hu",
    "author_email": "huzecong@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Shells",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# `argtyped`: Command Line Argument Parser, with Types\n\n[![Build Status](https://github.com/huzecong/argtyped/workflows/Build/badge.svg)](https://github.com/huzecong/argtyped/actions?query=workflow%3ABuild+branch%3Amaster)\n[![CodeCov](https://codecov.io/gh/huzecong/argtyped/branch/master/graph/badge.svg?token=ELHfYJ2Ydq)](https://codecov.io/gh/huzecong/argtyped)\n[![PyPI](https://img.shields.io/pypi/v/argtyped.svg)](https://pypi.org/project/argtyped/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/huzecong/argtyped/blob/master/LICENSE)\n\n`argtyped` is an command line argument parser with that relies on type annotations. It is built on\n[`argparse`](https://docs.python.org/3/library/argparse.html), the command line argument parser library built into\nPython. Compared with `argparse`, this library gives you:\n\n- More concise and intuitive syntax, less boilerplate code.\n- Type checking and IDE auto-completion for command line arguments.\n- A drop-in replacement for `argparse` in most cases.\n\nSince v0.4.0, `argtyped` also supports parsing arguments defined with an [attrs](https://attrs.org/)-class. See\n[Attrs Support](#attrs-support-new) for more details.  \n\n\n## Installation\n\nInstall stable release from [PyPI](https://pypi.org/project/argtyped/):\n```bash\npip install argtyped\n```\n\nOr, install the latest commit from GitHub:\n```bash\npip install git+https://github.com/huzecong/argtyped.git\n```\n\n## Usage\n\nWith `argtyped`, you can define command line arguments in a syntax similar to\n[`typing.NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple). The syntax is intuitive and can\nbe illustrated with an example:\n```python\nfrom typing import Optional\nfrom typing_extensions import Literal  # or directly import from `typing` in Python 3.8+\n\nfrom argtyped import Arguments, Switch\nfrom argtyped import Enum, auto\n\nclass LoggingLevels(Enum):\n    Debug = auto()\n    Info = auto()\n    Warning = auto()\n    Error = auto()\n    Critical = auto()\n\nclass MyArguments(Arguments):\n    model_name: str         # required argument of `str` type\n    hidden_size: int = 512  # `int` argument with default value of 512\n\n    activation: Literal[\"relu\", \"tanh\", \"sigmoid\"] = \"relu\"  # argument with limited choices\n    logging_level: LoggingLevels = LoggingLevels.Info        # using `Enum` class as choices\n\n    use_dropout: Switch = True  # switch argument, enable with \"--use-dropout\" and disable with \"--no-use-dropout\"\n    dropout_prob: Optional[float] = 0.5  # optional argument, \"--dropout-prob=none\" parses into `None`\n\nargs = MyArguments()\n```\n\nThis is equivalent to the following code with Python built-in `argparse`:\n```python\nimport argparse\nfrom enum import Enum\n\nclass LoggingLevels(Enum):\n    Debug = \"debug\"\n    Info = \"info\"\n    Warning = \"warning\"\n    Error = \"error\"\n    Critical = \"critical\"\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"--model-name\", type=str, required=True)\nparser.add_argument(\"--hidden-size\", type=int, default=512)\n\nparser.add_argument(\"--activation\", choices=[\"relu\", \"tanh\", \"sigmoid\"], default=\"relu\")\nparser.add_argument(\"--logging-level\", choices=list(LoggingLevels), type=LoggingLevels, default=\"info\")\n\nparser.add_argument(\"--use-dropout\", action=\"store_true\", dest=\"use_dropout\", default=True)\nparser.add_argument(\"--no-use-dropout\", action=\"store_false\", dest=\"use_dropout\")\nparser.add_argument(\"--dropout-prob\", type=lambda s: None if s.lower() == 'none' else float(s), default=0.5)\n\nargs = parser.parse_args()\n```\n\nSave the code into a file named `main.py`. Suppose the following arguments are provided:\n```bash\npython main.py \\\n    --model-name LSTM \\\n    --activation sigmoid \\\n    --logging-level debug \\\n    --no-use-dropout \\\n    --dropout-prob none\n```\nThen the parsed arguments will be equivalent to the following structure returned by `argparse`:\n```python\nargparse.Namespace(\n    model_name=\"LSTM\", hidden_size=512, activation=\"sigmoid\", logging_level=\"debug\",\n    use_dropout=False, dropout_prob=None)\n```\n\nArguments can also be pretty-printed:\n```\n>>> print(args)\n<class '__main__.MyArguments'>\n╔═════════════════╤══════════════════════════════════╗\n║ Arguments       │ Values                           ║\n╠═════════════════╪══════════════════════════════════╣\n║ model_name      │ 'LSTM'                           ║\n║ hidden_size     │ 512                              ║\n║ activation      │ 'sigmoid'                        ║\n║ logging_level   │ <MyLoggingLevels.Debug: 'debug'> ║\n║ use_dropout     │ False                            ║\n║ dropout_prob    │ None                             ║\n║ label_smoothing │ 0.1                              ║\n║ some_true_arg   │ True                             ║\n║ some_false_arg  │ False                            ║\n╚═════════════════╧══════════════════════════════════╝\n```\nIt is recommended though to use the `args.to_string()` method, which gives you control of the table width.\n\n## Attrs Support (New)\n\nThe way we define the arguments is very similar to defining a [dataclass](https://docs.python.org/3/library/dataclasses.html)\nor an [attrs](https://attrs.org)-class, so it seems natural to just write an attrs-class, and add parsing support to it.\n\nTo use `argtyped` with `attrs`, simply define an attrs-class as usual, and have it subclass `AttrsArguments`. Here's \nthe same example above, but implemented with attrs-classes, and with some bells and whistles:\n```python\nimport attr  # note: new style `attrs` syntax is also supported\nfrom argtyped import AttrsArguments\n\ndef _convert_logging_level(s: str) -> LoggingLevels:\n    # Custom conversion function that takes the raw string value from the command line.\n    return LoggingLevels[s.lower()]\n\n@attr.s(auto_attribs=True)\nclass MyArguments(AttrsArguments):\n    model_name: str = attr.ib(metadata={\"positional\": True})  # positional argument\n    # Or: `model_name: str = argtyped.positional_arg()`.\n    layer_sizes: List[int] = attr.ib(metadata={\"nargs\": \"+\"})  # other metadata are treated as `argparse` options\n\n    activation: Literal[\"relu\", \"tanh\", \"sigmoid\"] = \"relu\"\n    logging_level: LoggingLevels = attr.ib(default=LoggingLevels.Info, converter=_convert_logging_level)\n\n    use_dropout: Switch = True\n    dropout_prob: Optional[float] = 0.5\n\n    _activation_fn: Callable[[float], float] = attr.ib(init=False)  # `init=False` attributes are not parsed\n\n    @dropout_prob.validator  # validators still work as you would expect\n    def _dropout_prob_validator(self, attribute, value):\n        if not 0.0 <= value <= 1.0:\n            raise ValueError(f\"Invalid probability {value}\")\n\n    @_activation_fn.default\n    def _activation_fn(self):\n        return _ACTIVATION_FNS[self.activation]\n```\n\nA few things to note here:\n- You can define positional arguments by adding `\"positional\": True` as metadata. If this feels unnatural, you could \n  also use `argtyped.positional_arg()`, which takes the same arguments as `attr.ib`.\n- You can pass additional options to `ArgumentParser.add_argument` by listing them as metadata as well. Note that \n  these options take precedence over `argtyped`'s computed arguments, for example, sequence arguments (`List[T]`) by \n  default uses `nargs=\"*\"`, but you could override it with metadata.\n- Attributes with custom converters will not be parsed; its converter will be called with the raw string value from\n  command line. If the attribute also has a default value, you should make sure that your converter works with both\n  strings and the default value.\n- `init=False` attributes are not treated as arguments, but they can be useful for storing computed values based on\n  arguments.\n- The default value logic is the same as normal attrs classes, and thus could be different from non-attrs `argtyped` \n  classes. For example, optional arguments are not considered to have an implicit default of `None`, and no type \n  validation is performed on default values.\n\nHere are the (current) differences between an attrs-based arguments class (`AttrsArguments`) versus the normal arguments\nclass (`Arguments`):\n- `AttrsArguments` supports positional arguments and custom options via metadata.\n- `AttrsArguments` handles default values with attrs, so there's no validation of default value types.  This also \n  means that nullable arguments must have an explicit default value of `None`, otherwise it becomes a required \n  argument.\n- `AttrsArguments` does not support `underscore=True`.\n- `AttrsArguments` does not have `to_dict`, `to_string` methods.\n- `AttrsArguments` needs to be called with the factory `parse_args` method to parse, while `Arguments` parses command \n  line arguments on construction.\n\n\n## Reference\n\n### The `argtyped.Arguments` Class\n\nThe `argtyped.Arguments` class is main class of the package, from which you should derive your custom class that holds\narguments. Each argument takes the form of a class attribute, with its type annotation and an optional default value.\n\nWhen an instance of your custom class is initialized, the command line arguments are parsed from `sys.argv` into values\nwith your annotated types. You can also provide the list of strings to parse by passing them as the parameter.\n\nThe parsed arguments are stored in an object of your custom type. This gives you arguments that can be auto-completed\nby the IDE, and type-checked by a static type checker like [mypy](http://mypy-lang.org/).\n\nThe following example illustrates the keypoints:\n```python\nclass MyArgs(argtyped.Arguments):\n    # name: type [= default_val]\n    value: int = 0\n\nargs = MyArgs()                    # equivalent to `parser.parse_args()`\nargs = MyArgs([\"--value\", \"123\"])  # equivalent to `parser.parse_args([\"--value\", \"123\"])\nassert isinstance(args, MyArgs)\n```\n\n#### `Arguments.to_dict(self)`\n\nConvert the set of arguments to a dictionary (`OrderedDict`).\n\n#### `Arguments.to_string(self, width: Optional[int] = None, max_width: Optional[int] = None)`\n\nRepresent the arguments as a table.\n- `width`: Width of the printed table. Defaults to `None`, which fits the table to its contents. An exception is raised\n  when the table cannot be drawn with the given width.\n- `max_width`: Maximum width of the printed table. Defaults to `None`, meaning no limits. Must be `None` if `width` is\n  not `None`.\n\n#### `argtyped.argument_specs`\n\nReturn a dictionary mapping argument names to their specifications, represented as the `argtyped.ArgumentSpec` type.\nThis is useful for programmatically accessing the list of arguments.\n\n### Argument Types\n\nTo summarize, whatever works for `argparse` works here. The following types are supported:\n\n- **Built-in types** such as `int`, `float`, `str`.\n- **Boolean type** `bool`. Accepted values (case-insensitive) for `True` are: `y`, `yes`, `true`, `ok`; accepted values\n  for `False` are: `n`, `no`, `false`.\n- **Choice types** `Literal[...]`. A choice argument is essentially an `str` argument with limited\n  choice of values. The ellipses can be filled with a tuple of `str`s, or an expression that evaluates to a list of\n  `str`s:\n  ```python\n  from argtyped import Arguments\n  from typing_extensions import Literal\n\n  class MyArgs(Arguments):\n      foo: Literal[\"debug\", \"info\", \"warning\", \"error\"]  # 4 choices\n\n  # argv: [\"--foo=debug\"] => foo=\"debug\"\n  ```\n  This is equivalent to the `choices` keyword in `argparse.add_argument`.\n  \n  **Note:** The choice type was previously named `Choices`. This is deprecated in favor of the\n  [`Literal` type](https://mypy.readthedocs.io/en/stable/literal_types.html) introduced in Python 3.8 and back-ported to\n  3.6 and 3.7 in the `typing_extensions` library. `Choices` was removed since version 0.4.0.\n- **Enum types** derived from `enum.Enum`. It is recommended to use `argtyped.Enum` which uses the instance names as\n  values:\n  ```python\n  from argtyped import Enum\n\n  class MyEnum(Enum):\n      Debug = auto()    # \"debug\"\n      Info = auto()     # \"info\"\n      Warning = auto()  # \"warning\"\n  ```\n- **Switch types** `Switch`. `Switch` arguments are like `bool` arguments, but they don't take values. Instead, a switch\n  argument `switch` requires `--switch` to enable and `--no-switch` to disable:\n  ```python\n  from argtyped import Arguments, Switch\n\n  class MyArgs(Arguments):\n      switch: Switch = True\n      bool_arg: bool = False\n\n  # argv: []                                 => flag=True,  bool_arg=False\n  # argv: [\"--switch\", \"--bool-arg=false\"]   => flag=True,  bool_arg=False\n  # argv: [\"--no-switch\", \"--bool-arg=true\"] => flag=False, bool_arg=True\n  # argv: [\"--switch=false\"]                 => WRONG\n  # argv: [\"--no-bool-arg\"]                  => WRONG\n  ```\n- **List types** `List[T]`, where `T` is any supported type except switch types. List arguments allow passing multiple\n  values on the command line following the argument flag, it is equivalent to setting `nargs=\"*\"` in `argparse`.\n  \n  Although there is no built-in support for other `nargs` settings such as `\"+\"` (one or more) or `N` (fixed number),\n  you can add custom validation logic by overriding the `__init__` method in your `Arguments` subclass.\n- **Optional types** `Optional[T]`, where `T` is any supported type except list or switch types. An optional argument\n  will be filled with `None` if no value is provided. It could also be explicitly set to `None` by using `none` as value\n  in the command line:\n  ```python\n  from argtyped import Arguments\n  from typing import Optional\n\n  class MyArgs(Arguments):\n      opt_arg: Optional[int]  # implicitly defaults to `None`\n\n  # argv: []                 => opt_arg=None\n  # argv: [\"--opt-arg=1\"]    => opt_arg=1\n  # argv: [\"--opt-arg=none\"] => opt_arg=None\n  ```\n- Any other type that takes a single `str` as `__init__` parameters. It is also theoretically possible to use a function\n  that takes an `str` as input, but it's not recommended as it's not type-safe.\n  \n## Composing `Arguments` Classes\n\nYou can split your arguments into separate `Arguments` classes and then compose them together by inheritance. A subclass\nwill have the union of all arguments in its base classes. If the subclass contains an argument with the same name as an\nargument in a base class, then the subclass definition takes precedence. For example:\n\n```python\nclass BaseArgs(Arguments):\n    a: int = 1\n    b: Switch = True\n\nclass DerivedArgs(BaseArgs):\n    b: str\n\n# args = DerivedArgs([])  # bad; `b` is required\nargs = DerivedArgs([\"--b=1234\"])\n```\n\n**Caveat:** For simplicity, we do not completely follow the [C3 linearization algorithm](\nhttps://en.wikipedia.org/wiki/C3_linearization) that determines the class MRO in Python. Thus, it is a bad idea to have\noverridden arguments in cases where there's diamond inheritance.\n\nIf you don't understand the above, that's fine. Just note that generally, it's a bad idea to have too complicated\ninheritance relationships with overridden arguments.\n\n## Argument Naming Styles\n\nBy default `argtyped` uses `--kebab-case` (with hyphens connecting words), which is the convention for UNIX command line\ntools. However, many existing tools use the awkward `--snake_case` (with underscores connecting words), and sometimes\nconsistency is preferred over aesthetics. If you want to use underscores, you can do so by setting `underscore=True`\ninside the parentheses where you specify base classes, like this:\n\n```python\nclass UnderscoreArgs(Arguments, underscore=True):\n    underscore_arg: int\n    underscore_switch: Switch = True\n\nargs = UnderscoreArgs([\"--underscore_arg\", \"1\", \"--no_underscore_switch\"])\n```\n\nThe underscore settings only affect arguments defined in the class scope; (non-overridden) inherited arguments are not\naffects. Thus, you can mix-and-match `snake_case` and `kebab-case` arguments:\n\n```python\nclass MyArgs(UnderscoreArgs):\n    kebab_arg: str\n\nclass MyFinalArgs(MyArgs, underscore=True):\n    new_underscore_arg: float\n\nargs = MyArgs([\"--underscore_arg\", \"1\", \"--kebab-arg\", \"kebab\", \"--new_underscore_arg\", \"1.0\"])\n```\n\n## Notes\n\n- Advanced `argparse` features such as subparsers, groups, argument lists, and custom actions are not supported.\n- Using switch arguments may result in name clashes: if a switch argument has name `arg`, there can be no argument with\n  the name `no_arg`.\n- Optional types:\n  - `Optional` can be used with `Literal`:\n    ```python\n    from argtyped import Arguments\n    from typing import Literal, Optional\n    \n    class MyArgs(Arguments):\n        foo: Optional[Literal[\"a\", \"b\"]]  # valid\n        bar: Literal[\"a\", \"b\", \"none\"]    # also works but is less obvious\n    ```\n  - `Optional[str]` would parse a value of `\"none\"` (case-insensitive) into `None`.\n- List types:\n  - `List[Optional[T]]` is a valid type. For example:\n    ```python\n    from argtyped import Arguments\n    from typing import List, Literal, Optional\n    \n    class MyArgs(Arguments):\n        foo: List[Optional[Literal[\"a\", \"b\"]]] = [\"a\", None, \"b\"]  # valid\n    \n    # argv: [\"--foo\", \"a\", \"b\", \"none\", \"a\", \"b\"] => foo=[\"a\", \"b\", None, \"a\", \"b\"]\n    ```\n  - List types cannot be nested inside a list or an optional type. Types such as `Optional[List[int]]` and\n    `List[List[int]]` are not accepted.\n\n## Under the Hood\n\nThis is what happens under the hood:\n1. When a subclass of `argtyped.Arguments` is constructed, type annotations and class-level attributes (i.e., the\n   default values) are collected to form argument declarations.\n2. After verifying the validity of declared arguments, `argtyped.ArgumentSpec` are created for each argument and stored\n   within the subclass as the `__arguments__` class attribute.\n3. When an instance of the subclass is initialized, if it's the first time, an instance of `argparse.ArgumentParser` is\n   created and arguments are registered with the parser. The parser is cached in the subclass as the `__parser__`\n   attribute.\n4. The parser's `parse_args` method is invoked with either `sys.argv` or strings provided as parameters, returning\n   parsed arguments.\n5. The parsed arguments are assigned to `self` (the instance of the `Arguments` subclass being initialized).\n\n## Todo\n\n- [ ] Support `action=\"append\"` or `action=\"extend\"` for `List[T]` types.\n  - Technically this is not a problem, but there's no elegant way to configure whether this behavior is desired.\n- [ ] Throw (suppressible) warnings on using non-type callables as types.\n- [ ] Support converting an `attrs` class into `Arguments`.\n- [ ] Support forward references in type annotations.\n\nMIT License\n\nCopyright (c) 2020 Zecong Hu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/huzecong/argtyped",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argtyped",
    "package_url": "https://pypi.org/project/argtyped/",
    "platform": null,
    "project_url": "https://pypi.org/project/argtyped/",
    "project_urls": {
      "Homepage": "https://github.com/huzecong/argtyped"
    },
    "release_url": "https://pypi.org/project/argtyped/0.4.0/",
    "requires_dist": [
      "typing-inspect (>=0.7.1)",
      "pylint (==2.13.9) ; extra == 'dev'",
      "black (==22.6.0) ; extra == 'dev'",
      "isort (==5.10.1) ; extra == 'dev'",
      "mypy (==0.961) ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Command line arguments, with types",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14362451,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1bb36e1d57d8b3822c05255a01694593848f7ee179b077b08ba6b973fee3215",
          "md5": "ead601d16eb1af56df7796f128fd4fd0",
          "sha256": "39f01d515879ba3bfe852ebe5df1220cee1ff524bce6645a8b06c85c436b501c"
        },
        "downloads": -1,
        "filename": "argtyped-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ead601d16eb1af56df7796f128fd4fd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10778,
        "upload_time": "2020-02-17T00:57:18",
        "upload_time_iso_8601": "2020-02-17T00:57:18.594577Z",
        "url": "https://files.pythonhosted.org/packages/f1/bb/36e1d57d8b3822c05255a01694593848f7ee179b077b08ba6b973fee3215/argtyped-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c0a0387915f091eab3669bb0ef9468e146e86d0f938d34f0e7ddc29d6aa97d5",
          "md5": "fd99944c479d3c0d53a47f571431140d",
          "sha256": "7385edeb83eaf0dc998e2bb9ce30666dd0b6e9cd6d14d6170fdf6bb851f131a8"
        },
        "downloads": -1,
        "filename": "argtyped-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd99944c479d3c0d53a47f571431140d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10223,
        "upload_time": "2020-02-17T00:57:20",
        "upload_time_iso_8601": "2020-02-17T00:57:20.426917Z",
        "url": "https://files.pythonhosted.org/packages/5c/0a/0387915f091eab3669bb0ef9468e146e86d0f938d34f0e7ddc29d6aa97d5/argtyped-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0.post0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4f58ef4c89dffbad09bf11fc3b33a30a4f3810e7ca5f1e5808f0045442c3658",
          "md5": "7cf9e03b2dd3c84620536e61d3d7465e",
          "sha256": "9b90e8070c522b46d9ec8be3231dcfae67239fa29f89900862cf35bc46775824"
        },
        "downloads": -1,
        "filename": "argtyped-0.2.0.post0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cf9e03b2dd3c84620536e61d3d7465e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12578,
        "upload_time": "2020-06-16T01:29:50",
        "upload_time_iso_8601": "2020-06-16T01:29:50.003971Z",
        "url": "https://files.pythonhosted.org/packages/a4/f5/8ef4c89dffbad09bf11fc3b33a30a4f3810e7ca5f1e5808f0045442c3658/argtyped-0.2.0.post0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0677776090fe78d2cf1a7d9600c92108bda6b5139d86c8b9dae8bc90cff47869",
          "md5": "61badfb3bbfe00b2b59552a57218bb50",
          "sha256": "ddef3ba7b072ebcc3b1374f74baef0e0b4ed92904ccf6a75833792b8641bcafd"
        },
        "downloads": -1,
        "filename": "argtyped-0.2.0.post0.tar.gz",
        "has_sig": false,
        "md5_digest": "61badfb3bbfe00b2b59552a57218bb50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14327,
        "upload_time": "2020-06-16T01:29:51",
        "upload_time_iso_8601": "2020-06-16T01:29:51.204230Z",
        "url": "https://files.pythonhosted.org/packages/06/77/776090fe78d2cf1a7d9600c92108bda6b5139d86c8b9dae8bc90cff47869/argtyped-0.2.0.post0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34451ec81ccb4cf5b44b89ecbbf0e9bcc872bf17f1640970429b313b09250c71",
          "md5": "ad3369d2d73e31628c807db916e1a347",
          "sha256": "dc729c694c53dfea511f08f3d3546338c4bc1e698528f4be84b29b0b97e129b9"
        },
        "downloads": -1,
        "filename": "argtyped-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad3369d2d73e31628c807db916e1a347",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14693,
        "upload_time": "2021-01-09T03:10:31",
        "upload_time_iso_8601": "2021-01-09T03:10:31.828436Z",
        "url": "https://files.pythonhosted.org/packages/34/45/1ec81ccb4cf5b44b89ecbbf0e9bcc872bf17f1640970429b313b09250c71/argtyped-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a9ce0f06c609c64690bd60e29dbc652face8b1ae6e5a41f5ba831f9ecd7efc2",
          "md5": "beb780b500dc06af95f2e7d6b91b09c5",
          "sha256": "f6c86233fb763d92f5b404a968c08172e5ffdb1fe5ccf88389924bd06ca57c57"
        },
        "downloads": -1,
        "filename": "argtyped-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "beb780b500dc06af95f2e7d6b91b09c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17270,
        "upload_time": "2021-01-09T03:10:32",
        "upload_time_iso_8601": "2021-01-09T03:10:32.793596Z",
        "url": "https://files.pythonhosted.org/packages/2a/9c/e0f06c609c64690bd60e29dbc652face8b1ae6e5a41f5ba831f9ecd7efc2/argtyped-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55ca8b08a7efd84b61729631bc68b85978d77c5b226c7619da2ea9567f165d83",
          "md5": "98fc538cfd64e3c6a5bd4f2898d6806c",
          "sha256": "9d415c4c559fa334d9ed78ebf214f1f02f9d59a286f489a1adf303b68dd33e11"
        },
        "downloads": -1,
        "filename": "argtyped-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98fc538cfd64e3c6a5bd4f2898d6806c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15675,
        "upload_time": "2021-05-16T18:54:47",
        "upload_time_iso_8601": "2021-05-16T18:54:47.354231Z",
        "url": "https://files.pythonhosted.org/packages/55/ca/8b08a7efd84b61729631bc68b85978d77c5b226c7619da2ea9567f165d83/argtyped-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58773dafa707d46dca99486182f7140e27d5aaced64f4d63d304bce5d936c8cf",
          "md5": "0a20107e9a50d67735233e79d5cf4bfd",
          "sha256": "71edeff9ae71d6a8e6298f6020ff04a771300592538216fcb1625da1476cb236"
        },
        "downloads": -1,
        "filename": "argtyped-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a20107e9a50d67735233e79d5cf4bfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19174,
        "upload_time": "2021-05-16T18:54:48",
        "upload_time_iso_8601": "2021-05-16T18:54:48.622352Z",
        "url": "https://files.pythonhosted.org/packages/58/77/3dafa707d46dca99486182f7140e27d5aaced64f4d63d304bce5d936c8cf/argtyped-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2654b283e8435075516f60834a7b0cca8c1702bc8824a57af59d68433befc72d",
          "md5": "be5df3eec1e284c68d93a06b24e149a8",
          "sha256": "809d671f6f4bbf75821fbd97885a743a8ede7145e069782b68d559209d6535ab"
        },
        "downloads": -1,
        "filename": "argtyped-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be5df3eec1e284c68d93a06b24e149a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19057,
        "upload_time": "2022-07-07T09:19:39",
        "upload_time_iso_8601": "2022-07-07T09:19:39.989021Z",
        "url": "https://files.pythonhosted.org/packages/26/54/b283e8435075516f60834a7b0cca8c1702bc8824a57af59d68433befc72d/argtyped-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4573c8f3744b174211830f13f0cf8b1da88ea1c96330fc35c31dbf9ce719ae15",
          "md5": "2dc01e92a54b0beb3d8ff2d0acf1c01b",
          "sha256": "c4d4086987d039ff5ad8f1716a9966c52c2e04f43e10ffccdf464ebd70ef6122"
        },
        "downloads": -1,
        "filename": "argtyped-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2dc01e92a54b0beb3d8ff2d0acf1c01b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25104,
        "upload_time": "2022-07-07T09:19:42",
        "upload_time_iso_8601": "2022-07-07T09:19:42.161670Z",
        "url": "https://files.pythonhosted.org/packages/45/73/c8f3744b174211830f13f0cf8b1da88ea1c96330fc35c31dbf9ce719ae15/argtyped-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2654b283e8435075516f60834a7b0cca8c1702bc8824a57af59d68433befc72d",
        "md5": "be5df3eec1e284c68d93a06b24e149a8",
        "sha256": "809d671f6f4bbf75821fbd97885a743a8ede7145e069782b68d559209d6535ab"
      },
      "downloads": -1,
      "filename": "argtyped-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be5df3eec1e284c68d93a06b24e149a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19057,
      "upload_time": "2022-07-07T09:19:39",
      "upload_time_iso_8601": "2022-07-07T09:19:39.989021Z",
      "url": "https://files.pythonhosted.org/packages/26/54/b283e8435075516f60834a7b0cca8c1702bc8824a57af59d68433befc72d/argtyped-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4573c8f3744b174211830f13f0cf8b1da88ea1c96330fc35c31dbf9ce719ae15",
        "md5": "2dc01e92a54b0beb3d8ff2d0acf1c01b",
        "sha256": "c4d4086987d039ff5ad8f1716a9966c52c2e04f43e10ffccdf464ebd70ef6122"
      },
      "downloads": -1,
      "filename": "argtyped-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2dc01e92a54b0beb3d8ff2d0acf1c01b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25104,
      "upload_time": "2022-07-07T09:19:42",
      "upload_time_iso_8601": "2022-07-07T09:19:42.161670Z",
      "url": "https://files.pythonhosted.org/packages/45/73/c8f3744b174211830f13f0cf8b1da88ea1c96330fc35c31dbf9ce719ae15/argtyped-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}