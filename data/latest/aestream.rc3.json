{
  "info": {
    "author": "Jens E. Pedersen, Christian Pehle",
    "author_email": "jens@jepedersen.dk, christian.pehle@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Hardware :: Universal Serial Bus (USB)"
    ],
    "description": "# AEStream - Address Event streaming library\n\n<p align=\"center\">\n    <a href=\"https://github.com/norse/aestream/actions\">\n        <img src=\"https://github.com/norse/aestream/workflows/Build%20and%20test/badge.svg\" alt=\"Test status\"></a>\n    <a href=\"https://pypi.org/project/aestream/\" alt=\"PyPi\">\n        <img src=\"https://img.shields.io/pypi/v/aestream\" />\n    </a>\n    <a href=\"https://github.com/norse/aestream/pulse\" alt=\"Activity\">\n        <img src=\"https://img.shields.io/github/last-commit/norse/aestream\" />\n    </a>\n    <a href=\"https://discord.gg/7fGN359\">\n        <img src=\"https://img.shields.io/discord/723215296399147089\"\n            alt=\"chat on Discord\"></a>\n    <a href=\"https://www.codacy.com/gh/norse/aestream/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=norse/aestream&amp;utm_campaign=Badge_Grade\"><img src=\"https://app.codacy.com/project/badge/Grade/0a04a852daf540a9b9bbe9d78df9eea7\"/></a>\n    <a href=\"https://doi.org/10.5281/zenodo.6322829\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.6322829.svg\" alt=\"DOI\"></a>\n</p>\n\nAEStream efficiently reads sparse events from an input source and streams it to an output sink.\nAEStream supports reading from files, USB cameras, as well as network via UDP and can stream events to files, network over UDP, and peripherals such as [GPU](https://en.wikipedia.org/wiki/Graphics_processing_unit)s and [neuromorphic hardware](https://en.wikipedia.org/wiki/Neuromorphic_engineering).\n\n<img src=\"https://jegp.github.io/aestream-paper/2212_aestream.svg\" />\n\nRead more in [the AEStream publication](https://jegp.github.io/aestream-paper/).\n\n## Installation\n\nAEStream is usable both as a command-line binary or Python tool.\n\n| **Source** | **Installation** |\n| -------------------- | --- |\n| [pip](https://pypi.org/) | <code>pip install aestream <br/> pip install aestream[torch]</code> ([PyTorch support](https://pytorch.com)) |\n| [nix](https://nixos.org/) | <code>nix run github:norse/aestream</code> (CLI) <br/> <code>nix develop github:norse/aestream</code> (Python environment) |\n| [docker](https://docker.com/) | See [Installation documentation](https://norse.github.io/aestream/install.html) |\n\nContributions to support AEStream on additional platforms are always welcome.\n\n## Usage: read event-address files in Python\n\nAEStream can process fixed input sources like files like so:\n\n```python\nFileInput(\"file\", (640, 480)).load()\n```\n\n## Usage: stream real-time data in Python\nAEStream also supports streaming data in real-time *without strict guarantees on orders*. \nThis is particularly useful in real-time scenarios, for instance when operating with `USBInput` or `UDPInput`\n\n```python\n# Stream events from a DVS camera over USB\nwith USBInput((640, 480)) as stream:\n    while True:\n        frame = stream.read() # Provides a (640, 480) tensor\n        ...\n```\n\n```python\n# Stream events from UDP port 3333 (default)\nwith UDPInput((640, 480), port=3333) as stream:\n    while True:\n        frame = stream.read() # Provides a (640, 480) tensor\n        ...\n```\n\nMore examples can be found in [our example folder](https://github.com/norse/aestream/tree/master/example).\nPlease note the examples may require additional dependencies (such as [Norse](https://github.com/norse/norse) for spiking networks or [PySDL](https://github.com/py-sdl/py-sdl2) for rendering). To install all the requirements, simply stand in the `aestream` root directory and run `pip install -r example/requirements.txt`\n\n### Example: real-time edge detection with spiking neural networks\n\n![](example/usb_edgedetection.gif)\n\nWe stream events from a camera connected via USB and process them on a GPU in real-time using the [spiking neural network library, Norse](https://github.com/norse/norse) using fewer than 50 lines of Python.\nThe left panel in the video shows the raw signal, while the middle and right panels show horizontal and vertical edge detection respectively.\nThe full example can be found in [`example/usb_edgedetection.py`](https://github.com/norse/aestream/blob/main/example/usb_edgedetection.py)\n\n## Usage (CLI)\n\nInstalling AEStream also gives access to the command-line interface (CLI) `aestream`.\nTo use `aestraem`, simply provide an `input` source and an optional `output` sink (defaulting to STDOUT):\n\n```bash\naestream input <input source> [output <output sink>]\n```\n## Supported Inputs and Outputs\n\n| Input | Description | Usage |\n| --------- | :----------- | ----- |\n| DAVIS, DVXPlorer | [Inivation](https://inivation.com/) DVS Camera over USB | `input inivation` |\n| EVK Cameras      | [Prophesee](https://www.prophesee.ai/) DVS camera over USB  | `input prophesee` |\n| File             | [AEDAT file format](https://gitlab.com/inivation/inivation-docs/blob/master/Software%20user%20guides/AEDAT_file_formats.md) as `.aedat`, `.aedat4`, or `.dat` | `input file x.aedat4` |\n\n| Output | Description | Usage |\n| --------- | ----------- | ----- |\n| STDOUT    | Standard output (default output) | `output stdout`\n| Ethernet over UDP | Outputs to a given IP and port using the [SPIF protocol](https://github.com/SpiNNakerManchester/spif)  | `output udp 10.0.0.1 1234` |\n| `.aedat4` file  | Output to [`.aedat4` format](https://gitlab.com/inivation/inivation-docs/blob/master/Software%20user%20guides/AEDAT_file_formats.md#aedat-40) | `output file my_file.aedat4` |\n| CSV file       | Output to comma-separated-value (CSV) file format | `output file my_file.txt` |\n\n### CLI examples\n\n| Example | Syntax |\n| ------------- | ------------------------------|\n| Echo file to STDOUT | `aestream input file example/sample.aedat4` |\n| Stream DVS cameara from iniVation AG to STDOUT (Note, requires Inivation libraries) | `aestream input inivation output stdout` |\n| Stream DVS camera from Prophesee to STDOUT (Note, requires Metavision SDK) | `aestream input output stdout` |\n| Read file to remote IP X.X.X.X | `aestream input file example/sample.aedat4 output udp X.X.X.X` |\n\n## Custom installation (C++)\n\n[Metavision SDK](https://docs.prophesee.ai/stable/metavision_sdk/index.html) and [libcaer](https://github.com/inivation/libcaer) are optional dependencies, but are needed for connecting to Prophesee and Inivation cameras respectively.\n\nAEStream is based on [C++20](https://en.cppreference.com/w/cpp/20). Since C++20 is not yet fully supported by all compilers, we recommend using `GCC >= 10.2`. \n\nTo build the binaries of this repository, run the following code:\n```\n# Optional: Ensure paths to libcaer or Metavision are in place\nmkdir build/\ncd build/\ncmake -GNinja ..\nninja\n```\n\nIf your default C++ compiler doesn't support C++ 20, you will have to install an up-to-date compiler and provide the environmental variable `CXX`.\nFor instance like this: `CXX=/path/to/g++-10 cmake -GNinja ..`\n\n### Inivation cameras\nFor [Inivation](https://inivation.com/) cameras, the [libcaer](https://gitlab.com/inivation/dv/libcaer/) library needs to be available, either by a `-DCMAKE_PREFIX_PATH` flag to `cmake` or included in the `PATH` environmental variable.\nFor examble: `cmake -GNinja -DCMAKE_PREFIX_PATH=/path/to/libcaer`.\nInivation made the library available for most operating systems, but you may have to build it yourself.\n\n### Prophesee cameras\nFor [Prophesee](https://www.prophesee.ai/) cameras, a version of the [Metavision SDK](https://www.prophesee.ai/metavision-intelligence/) needs to be present.\nThe open-source version the SDK `openeb` is available with installation instructions at https://github.com/prophesee-ai/openeb.\nUsing `openeb`, it should be sufficient to install it using `cmake && make && make install` to put it in your path.\nOtherwise, you can point to it using the `-DCMAKE_PREFIX_PATH` option in `cmake`.\n\n## Acknowledgments\n\nAEStream is developed by (in alphabetical order):\n\n* Cameron Barker (@GitHub [cameron-git](https://github.com/cameron-git/))\n* Alexander Hadjivanov (@Github [cantordust](https://github.com/cantordust))\n* [Jens E. Pedersen](https://www.kth.se/profile/jeped) (@GitHub [jegp](https://github.com/jegp/))\n* [Christian Pehle](https://www.kip.uni-heidelberg.de/people/10110) (@GitHub [cpehle](https://github.com/cpehle/))\n\nThe work has received funding from the EC Horizon 2020 Framework Programme under Grant Agreements 785907 and 945539 (HBP) and by the Deutsche Forschungsgemeinschaft (DFG, German Research Fundation) under Germany's Excellence Strategy EXC 2181/1 - 390900948 (the Heidelberg STRUCTURES Excellence Cluster).\n\nThanks to [Philipp Mondorf](https://github.com/PMMon) for interfacing with Metavision SDK and preliminary network code.\n\n<a href=\"https://github.com/norse/aestream/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=norse/aestream\" />\n</a>\n\n\n## Citation\n\nPlease cite `aestream` if you use it in your work:\n\n```bibtex\n@misc{aestream,\n  doi = {10.48550/ARXIV.2212.10719},\n  url = {https://arxiv.org/abs/2212.10719},\n  author = {Pedersen, Jens Egholm and Conradt, JÃ¶rg},\n  title = {AEStream: Accelerated event-based processing with coroutines},\n  publisher = {arXiv},\n  year = {2022},\n}\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/norse/aestream",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aestream",
    "package_url": "https://pypi.org/project/aestream/",
    "platform": null,
    "project_url": "https://pypi.org/project/aestream/",
    "project_urls": {
      "Homepage": "https://github.com/norse/aestream"
    },
    "release_url": "https://pypi.org/project/aestream/0.5.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Streaming library for Address-Event Representation (AER) data",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17481810,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46522a48bfc7f59e2a08d4e9953d39f6905435833c5c609bb2b51ae3731722d",
          "md5": "4b4884d1d2c7fb9bf83fe8d102a0ecaa",
          "sha256": "0af95f62347a3dd9f8e35b4a071a76853709dd5e4bba87933e46c69f43865c4d"
        },
        "downloads": -1,
        "filename": "aestream-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b4884d1d2c7fb9bf83fe8d102a0ecaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32943,
        "upload_time": "2022-03-02T11:11:43",
        "upload_time_iso_8601": "2022-03-02T11:11:43.440742Z",
        "url": "https://files.pythonhosted.org/packages/d4/65/22a48bfc7f59e2a08d4e9953d39f6905435833c5c609bb2b51ae3731722d/aestream-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed4d4b306f6566fb0f957791dc0dceba15facc5c22a00c482184580eeb2c2d38",
          "md5": "b1f07206c0c74c68b95d28ccfaa09a63",
          "sha256": "5711244419a25e4657d4e9f84dacd0b7232bc2340731d38df5d2d879a94fddbe"
        },
        "downloads": -1,
        "filename": "aestream-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b1f07206c0c74c68b95d28ccfaa09a63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 125186,
        "upload_time": "2022-10-26T15:51:08",
        "upload_time_iso_8601": "2022-10-26T15:51:08.352994Z",
        "url": "https://files.pythonhosted.org/packages/ed/4d/4b306f6566fb0f957791dc0dceba15facc5c22a00c482184580eeb2c2d38/aestream-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ddd3c2e9f5117cd98e907401d67dbd9defb488ccdcd5dd7dd2fd358fee47aca",
          "md5": "3b03960d13a16f5a7f5e5660a797ed6b",
          "sha256": "48cbfcd7c285f0a41e4b7b3793bb48b49bceca0f43bc325ee1194066d31ba06a"
        },
        "downloads": -1,
        "filename": "aestream-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b03960d13a16f5a7f5e5660a797ed6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 133675,
        "upload_time": "2023-03-28T18:08:31",
        "upload_time_iso_8601": "2023-03-28T18:08:31.241232Z",
        "url": "https://files.pythonhosted.org/packages/3d/dd/3c2e9f5117cd98e907401d67dbd9defb488ccdcd5dd7dd2fd358fee47aca/aestream-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ddd3c2e9f5117cd98e907401d67dbd9defb488ccdcd5dd7dd2fd358fee47aca",
        "md5": "3b03960d13a16f5a7f5e5660a797ed6b",
        "sha256": "48cbfcd7c285f0a41e4b7b3793bb48b49bceca0f43bc325ee1194066d31ba06a"
      },
      "downloads": -1,
      "filename": "aestream-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3b03960d13a16f5a7f5e5660a797ed6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 133675,
      "upload_time": "2023-03-28T18:08:31",
      "upload_time_iso_8601": "2023-03-28T18:08:31.241232Z",
      "url": "https://files.pythonhosted.org/packages/3d/dd/3c2e9f5117cd98e907401d67dbd9defb488ccdcd5dd7dd2fd358fee47aca/aestream-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}