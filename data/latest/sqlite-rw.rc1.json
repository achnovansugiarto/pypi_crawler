{
  "info": {
    "author": "mark",
    "author_email": "578749341@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<!--\r\n * @Author       : xupingmao\r\n * @email        : 578749341@qq.com\r\n * @Date         : 2023-03-11 13:22:54\r\n * @LastEditors  : xupingmao\r\n * @LastEditTime : 2023-03-11 13:42:41\r\n * @FilePath     : /sqlite-rw/README.md\r\n * @Description  : 描述\r\n-->\r\n# sqlite-rw\r\n\r\n为sqlite提供读写分离能力，提高并发度。\r\n\r\n# 解决什么问题?\r\n\r\nsqlite是一个很好用的嵌入式数据库，但是由于sqlite采用了库级别的文件锁，所以并发能力不强，当存在慢SQL，比如在大表上`select count(*) from large_table`的时候，会导致其他任务无法写入。\r\n\r\n`sqlite-rw`就是为了解决这个问题的，思路如下\r\n- 采用读写分离的存储模式，每次写入会持久化写库，并且记录日志到binlog表，然后异步写入读库。\r\n- 读取的时候可以选择从读库或者写库读取，默认从读库读取。\r\n\r\n# 提高并发度的原理\r\n- sqlite本身读取是支持并发的，但是写入是不能和读取并发的。所以读库本身是支持并发读取的，同步的写操作是通过id主键写入的，耗时会比较短，基本上不会阻塞读操作。\r\n- 由于是读写分离的，在读库存在慢SQL的情况下，写库也能够正常工作，在读库慢SQL执行完成之后，系统会把写库的数据同步到读库中，使两者保持一致。\r\n\r\n# 使用限制和影响\r\n- 存储量相比于单独的sqlite会翻倍\r\n- 写入性能会有所下降，待详细的基准测试\r\n- 依赖`web.py`的`db`接口进行操作\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xupingmao/sqlite-rw",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlite-rw",
    "package_url": "https://pypi.org/project/sqlite-rw/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlite-rw/",
    "project_urls": {
      "Homepage": "https://github.com/xupingmao/sqlite-rw"
    },
    "release_url": "https://pypi.org/project/sqlite-rw/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "sqlite读写分离库",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17272716,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0edf5cd6ab19ef9f8ef7b61a2b478a1cdbb4ddaada0dfc66a359749854a3e6e",
          "md5": "93ae516af1f442d53819c13d35e8d281",
          "sha256": "c79f7ff6184b11e09dcf9b1b212f193ece762be37e002f99b1d5c906cd3d0d3d"
        },
        "downloads": -1,
        "filename": "sqlite-rw-0.0.1.win-amd64.zip",
        "has_sig": false,
        "md5_digest": "93ae516af1f442d53819c13d35e8d281",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17732,
        "upload_time": "2023-03-13T15:07:00",
        "upload_time_iso_8601": "2023-03-13T15:07:00.629157Z",
        "url": "https://files.pythonhosted.org/packages/a0/ed/f5cd6ab19ef9f8ef7b61a2b478a1cdbb4ddaada0dfc66a359749854a3e6e/sqlite-rw-0.0.1.win-amd64.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0edf5cd6ab19ef9f8ef7b61a2b478a1cdbb4ddaada0dfc66a359749854a3e6e",
        "md5": "93ae516af1f442d53819c13d35e8d281",
        "sha256": "c79f7ff6184b11e09dcf9b1b212f193ece762be37e002f99b1d5c906cd3d0d3d"
      },
      "downloads": -1,
      "filename": "sqlite-rw-0.0.1.win-amd64.zip",
      "has_sig": false,
      "md5_digest": "93ae516af1f442d53819c13d35e8d281",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17732,
      "upload_time": "2023-03-13T15:07:00",
      "upload_time_iso_8601": "2023-03-13T15:07:00.629157Z",
      "url": "https://files.pythonhosted.org/packages/a0/ed/f5cd6ab19ef9f8ef7b61a2b478a1cdbb4ddaada0dfc66a359749854a3e6e/sqlite-rw-0.0.1.win-amd64.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}