{
  "info": {
    "author": "Yida Xin",
    "author_email": "yxin@bu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## PatchComm: Commonsense Knowledge Enabled Natural Language Understanding\nPatchComm uses commonsense and contextual knowledge to guide syntactic parsers toward making\nbetter-informed parsing decisions, and at the same time, builds up a frame-like representation to\nembody discourse-level knowledge.  The discourse-level knowledge is an integration of\ncontext-independent commonsense knowledge that comes from external commonsense knowledge bases (CSKB)\nand context-dependent knowledge that comes from the discourse itself.\n\nConsider the two well-studied syntactic ambiguities: prepositional-phrase attachment ambiguities and \npronoun coreference ambiguities.  Both kinds of ambiguities are intrinsic in the notion of “natural \nlanguage” or “human language.”\n\nAs an example to get us started, consider the sentence\n\n    That person saved that bird with one arm.\n\nLogically speaking, the prepositional phrase “with one arm” can be attached either to “person”/“save”\nor to “bird.”  However, anyone who knows about people and birds is expected to know that “with one arm”\nshould be attached to “person”/“save” rather than “bird.”  Therefore, we only have a _logical_ ambiguity,\nbut we don't have any _commonsensical_ ambiguity here.\n\nAs another example, consider the sentence\n\n    Alex went to the shopping mall with a lot of people.\n\nHere, it's not only logically ambiguous whether “with a lot of people” attaches to “Alex”/“go” or to “mall,”\nbut it's also commonsensically ambiguous: Without further context, we just can't know whether Alex went with\na lot of people, or the mall had a lot of people.  In cases such as this one, it is much better to leave\nthe syntactic ambiguities as is, until further contextual information rolls around, rather than prematurely\nattempting to make some sort of “best” parsing decision.\n\nNevertheless, for whatever reason, when people build syntactic parsers, they still require the parsers to\noutput one single best _parse tree_.  To date, engineering efforts in syntactic parsing are, in my view,\ncounterintuitive and counterproductive.  Counterintuitive, because they assume there is no need for\nunderlying commonsense, whereas as we saw before, syntactic parsing really does need underlying commonsense.\nCounterproductive, because the end goal of sentence-level processing is discourse-level processing. By\nprematurely forcing every sentence to have an independently “best” parse, we necessarily involve ourselves\ninto the hopeless problem of _Combinatorial Explosion_, as follows:\n\nIf a discourse has 20 sentences and each sentence has two possible parses, that's over a million possible\ncombinations for the discourse.  Suppose there is one “best” interpretation for the discourse, then by\nprematurely forcing each sentence to settle on one of the two possible parses, we are gambling on the possibility\nthat the 20 parses we get from the sentences can chain together into an integral interpretation that either\nmatches or isn't too far off from that “best” discourse interpretation.  To me, this gamble is unwarranted.\n\nFurther, suppose that this gamble fails.  Which one or ones of the 20 sentences should the system modify?\nRecall that there are over a million such modifications that the system can potentially do, which is practically\nimpossible unless the system gets much extra input and monitoring from human — which defeats the purpose of\nbuilding a discourse-understanding system in the first place.\n\nIt is much better to have a system that keeps track of all the points of ambiguities as it reads away one or \nmultiple sentences.  Whenever more commonsense and contextual knowledge present themselves, the system utilizes \nsuch additional knowledge to double-check the points of ambiguities that it has already encountered and resolved, \nto see whether changes need to be made to any of these points.  This makes sure that the discourse-level \nrepresentation is always consistent with the knowledge and context so-far, and that the sentence parses are \nconsistent with the discourse-level representation.\n\nThe discourse-level representation is  useful for analyzing high-level concepts, especially ones that may not be\nexplicitly mentioned via keywords in the original discourse (e.g., concept patterns in Genesis).  The sentence-level\nparses are useful for answering specific questions, as a way of testing and evaluating the system.\n\n\n\n### Update, 23 September 2021\nAdded `requirements.txt`.\n\nDetailed steps for running this project:\n+ Set up a separate Conda virtual environment for this project:\n  ```conda create -n <venv_name> python=<verson>```\n+ Install all requirements:\n  ```pip install -r requirements.txt```\n+ Install `neuralcoref` from its source:\n  ```\n  git clone https://github.com/huggingface/neuralcoref.git\n  cd neuralcoref\n  pip install -r requirements.txt  # !!! NOT to be confused with the same command in previous step !!!\n  pip install -e .\n  ```\n+ Download spaCy language models\n  ```\n  python -m spacy download en_core_web_sm  # small\n  python -m spacy download en_core_web_md  # medium\n  python -m spacy download en_core_web_lg  # large\n  ```\n\n\n\n### Update, 11 May 2021\nPatchComm is still primarily focusing on sentence-level processing.  It now can\n- resolve one or more prepositional-phrase (PP) attachment ambiguities within a sentence\n- resolve one or more pronoun coreference ambiguities within a sentence\n\nBoth PP attachment and coreference resolution are important problems in not only syntactic parsing, but natural\nlanguage understanding in general — as argued above.\n\nMore updates to follow.\n\n\n\n### Update, 1 March 2021\nThe sentence parser now supports\n- spaCy, as of version 2.3.5\n- START parser, which is the brain child of the InfoLab Group at CSAIL, MIT\n\nCheck out the parser's (still limited) capabilities of resolving prepositional-phrase attachment ambiguities and\nof resolving co-reference, by running:\n\n    python -m unittest src.patchcomm.tests.test_sentence_parser.py\n\nVisualize the dependency parse, very much per spaCy, by running:\n\n    python -m unittest src.patchcomm.tests.test_dependency_visualizer.py\n\nIf you ran some really complicated sentences on these tests and discovered that the tests failed, do not worry.\n\nWe recommend using the visualizer all the time, because (1) the output being visualized comes entirely from the\nsentence parser, and (2) the more visual the better.\n\n\n\n### A Note on the Commonsense Knowledge Base (CSKB) Software\nPatchComm uses ConceptNet [(Speer et al, 2017)](https://arxiv.org/abs/1612.03975),\na large-scale commonsense knowledge base, ConceptNet, to guide syntactic parsers toward making more\ncommonsensically informed parsing decisions.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YidaXin/patchcomm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PatchComm",
    "package_url": "https://pypi.org/project/PatchComm/",
    "platform": "",
    "project_url": "https://pypi.org/project/PatchComm/",
    "project_urls": {
      "Bug Tracker": "https://github.com/YidaXin/patchcomm/issues",
      "Homepage": "https://github.com/YidaXin/patchcomm"
    },
    "release_url": "https://pypi.org/project/PatchComm/1.0.5/",
    "requires_dist": null,
    "requires_python": "==3.7.x",
    "summary": "PatchComm: Using Large-Scale Commonsense Knowledge to Guide Syntactic Parsers",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12928304,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "139d6a533f1501ea433fbeb8afb42e03d22b6a8e30ec58a49a3b9904b51601cf",
          "md5": "31428828aef63bd72a2e690a1e716765",
          "sha256": "46c02de7b0e1ae9173df5082f3a5042e93289e8b1c6058669cc68a670c5e5f0a"
        },
        "downloads": -1,
        "filename": "PatchComm-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31428828aef63bd72a2e690a1e716765",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.7.x",
        "size": 30223,
        "upload_time": "2022-02-18T00:43:13",
        "upload_time_iso_8601": "2022-02-18T00:43:13.268137Z",
        "url": "https://files.pythonhosted.org/packages/13/9d/6a533f1501ea433fbeb8afb42e03d22b6a8e30ec58a49a3b9904b51601cf/PatchComm-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ee7907bcde318e0ffb6ec0183fd6ab5c3bc950ed9cd92f1f515758d2b28ee8b",
          "md5": "467efe912265cbfbd2435e2f0cd825f3",
          "sha256": "f1654079f1e6e0f7783b973c2486b5716799b57a1a162c5f508a0122560c1ff0"
        },
        "downloads": -1,
        "filename": "PatchComm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "467efe912265cbfbd2435e2f0cd825f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.7.x",
        "size": 22524,
        "upload_time": "2022-02-18T00:43:14",
        "upload_time_iso_8601": "2022-02-18T00:43:14.843318Z",
        "url": "https://files.pythonhosted.org/packages/4e/e7/907bcde318e0ffb6ec0183fd6ab5c3bc950ed9cd92f1f515758d2b28ee8b/PatchComm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "802018a3a3877673607690cffc3229e37fece764c7f36076082e5ba4b6cc712c",
          "md5": "1a5b80fbc4a412862c14b45611347f57",
          "sha256": "196b1bfd5dc8010b22b4f80ee6dff3a04f8d8e99c328f62b968b6dc7b2524a53"
        },
        "downloads": -1,
        "filename": "patchcomm-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a5b80fbc4a412862c14b45611347f57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.7.x",
        "size": 30221,
        "upload_time": "2022-02-17T21:33:38",
        "upload_time_iso_8601": "2022-02-17T21:33:38.571149Z",
        "url": "https://files.pythonhosted.org/packages/80/20/18a3a3877673607690cffc3229e37fece764c7f36076082e5ba4b6cc712c/patchcomm-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcf0a40b2a58901f565369dcf48b97709de3a673b03f0064014e724b49d47c7c",
          "md5": "be61b3bf5d871c8b9b9f3d0248d71411",
          "sha256": "aa97f417d5cbcad6c47d76e3add7d95cf54648bfe5491fa5254633dc9b4af050"
        },
        "downloads": -1,
        "filename": "patchcomm-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "be61b3bf5d871c8b9b9f3d0248d71411",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.7.x",
        "size": 25388,
        "upload_time": "2022-02-17T21:33:39",
        "upload_time_iso_8601": "2022-02-17T21:33:39.747274Z",
        "url": "https://files.pythonhosted.org/packages/bc/f0/a40b2a58901f565369dcf48b97709de3a673b03f0064014e724b49d47c7c/patchcomm-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdf45c4e7f97d3d184a018dba14aadd3e4d973245f7de262144edb332a7adc11",
          "md5": "55b7325e47437101b102785a1b7fa7a0",
          "sha256": "f7b9c5f222100e8fb648110eb04cf5bb75c89269e010fc6b14a860662d06634c"
        },
        "downloads": -1,
        "filename": "patchcomm-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55b7325e47437101b102785a1b7fa7a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.7.x",
        "size": 30222,
        "upload_time": "2022-02-17T21:55:25",
        "upload_time_iso_8601": "2022-02-17T21:55:25.473032Z",
        "url": "https://files.pythonhosted.org/packages/cd/f4/5c4e7f97d3d184a018dba14aadd3e4d973245f7de262144edb332a7adc11/patchcomm-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4562617e5cb0bfe9df35a6ef7b03c06052be052a6dc88592931e1c7a3303f9e8",
          "md5": "46648b935bd9223bfb130a46b49de1b0",
          "sha256": "35724423c69dbd1d00f1fe535c81ec8c3f7d2a2e5735561085d2cde9f98d00a2"
        },
        "downloads": -1,
        "filename": "patchcomm-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "46648b935bd9223bfb130a46b49de1b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.7.x",
        "size": 25395,
        "upload_time": "2022-02-17T21:55:27",
        "upload_time_iso_8601": "2022-02-17T21:55:27.030317Z",
        "url": "https://files.pythonhosted.org/packages/45/62/617e5cb0bfe9df35a6ef7b03c06052be052a6dc88592931e1c7a3303f9e8/patchcomm-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdf45c4e7f97d3d184a018dba14aadd3e4d973245f7de262144edb332a7adc11",
        "md5": "55b7325e47437101b102785a1b7fa7a0",
        "sha256": "f7b9c5f222100e8fb648110eb04cf5bb75c89269e010fc6b14a860662d06634c"
      },
      "downloads": -1,
      "filename": "patchcomm-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55b7325e47437101b102785a1b7fa7a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "==3.7.x",
      "size": 30222,
      "upload_time": "2022-02-17T21:55:25",
      "upload_time_iso_8601": "2022-02-17T21:55:25.473032Z",
      "url": "https://files.pythonhosted.org/packages/cd/f4/5c4e7f97d3d184a018dba14aadd3e4d973245f7de262144edb332a7adc11/patchcomm-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4562617e5cb0bfe9df35a6ef7b03c06052be052a6dc88592931e1c7a3303f9e8",
        "md5": "46648b935bd9223bfb130a46b49de1b0",
        "sha256": "35724423c69dbd1d00f1fe535c81ec8c3f7d2a2e5735561085d2cde9f98d00a2"
      },
      "downloads": -1,
      "filename": "patchcomm-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "46648b935bd9223bfb130a46b49de1b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "==3.7.x",
      "size": 25395,
      "upload_time": "2022-02-17T21:55:27",
      "upload_time_iso_8601": "2022-02-17T21:55:27.030317Z",
      "url": "https://files.pythonhosted.org/packages/45/62/617e5cb0bfe9df35a6ef7b03c06052be052a6dc88592931e1c7a3303f9e8/patchcomm-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}