{
  "info": {
    "author": "Andrew Spangler",
    "author_email": "Andrew Spangler <AndrewSpangler@users.noreply.github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PySimpleBarcode 0.1.2<a name=\"mark0\"></a>\n\n***A basic Code 39 barcode generator.***\n\n![12345_normal_pink](https://raw.githubusercontent.com/AndrewSpangler/PySimpleBarcode/main/examples/12345_normal_pink.png)\n\n![abcde_normal_mint](https://raw.githubusercontent.com/AndrewSpangler/PySimpleBarcode/main/examples/abcde_normal_mint.png)\n\n![123456789_extended_turquoise](https://raw.githubusercontent.com/AndrewSpangler/PySimpleBarcode/main/examples/123456789_extended_turquoise.png)\n\n![abcde_extended_lilac](https://raw.githubusercontent.com/AndrewSpangler/PySimpleBarcode/main/examples/abcde_extended_lilac.png)\n\n---\n\n- [About](#mark1)\n\t- [Installation](#mark2)\n- [Command Line Usage](#mark3)\n\t- [Single Mode](#mark4)\n\t- [File Mode](#mark5)\n\t- [Manifest System](#mark6)\n- [Module Usage](#mark7)\n\t- [Examples](#mark8)\n\t\t- [Using the Encoder (the easy way)](#mark9)\n\t\t- [Using make_barcode directly (the hard way)](#mark10)\n\t- [The Encoder](#mark11)\n\t\t- [Encoder](#mark12)\n\t- [Functions](#mark13)\n\t\t- [make_barcode](#mark14)\n\t\t- [encode_39](#mark15)\n\t\t- [get_code_39_font_data](#mark16)\n\t\t- [get_code_39_extended_font_data](#mark17)\n\t\t- [get_code_39_font_and_extended_font_data](#mark18)\n- [Single File Usage](#mark19)\n\n---\n\n# About<a name=\"mark1\"></a>[^](#mark0)\n\nA basic Code 39 barcode generator using PIL and the Libre Barcode 39 font family\n\nLibre Barcode 39 is subject to the Open Font License and can be found at https://fonts.google.com/specimen/Libre+Barcode+39\n\nLibre Barcode 39 Extended Text is subject to the Open Font License and can be found at https://fonts.google.com/specimen/Libre+Barcode+39+Extended+Text\n\nSee OFL.txt for font license details.\n\n## Installation<a name=\"mark2\"></a>[^](#mark1)\n\nAvailable on pip - `pip install PySimpleBarcode`\n\nAlternatively download PySimpleBarcode.py to your project directory and import it.\n\n# Command Line Usage<a name=\"mark3\"></a>[^](#mark0)\n\nCommand line usage has two modes of operation: Single mode and File mode. In Single mode, a single barcode is generated using the the prompt passed to the command line. In File mode, a file at a provided path serves as a source of the barcode prompts.  \n\n```\nusage: PySimpleBarcode.py [-h] [-e] [-f] [-sc] [-i] [-m] [-o OUTPUT] [-t TYPE] [-s SIZE] [-px PADX] [-py PADY]\n                          [-fg FOREGROUND] [-bg BACKGROUND] [-mn MANIFEST_NAME] [-om]\n                          value\n\npositional arguments:\n  value                 Value or text file with one entry per line to encode. Set -f flag for file mode.\n\noptions:\n  -h, --help            show this help message and exit\n  -e, --extended        Set flag to use extended font. Extended font has a text label below it.\n  -f, --file            Set flag to load from text file at path specified by value.\n  -sc, --skip_check     Set flag to skip check to see if barcode file already exists\n  -i, --ignore_duplicates\n                        Set flag to ignore error normally raised on duplicate barcode names being found in the barcode\n                        file. File Mode only.\n  -m, --manifest        Set flag to generate / update barcode manifest json.\n  -o OUTPUT, --output OUTPUT\n                        Set to specify output directory name. Defaults to \"output\"\n  -t TYPE, --type TYPE  Set to specify output file type (without filetype) / directory name. Defaults to .png\n  -s SIZE, --size SIZE  Set to specify barcode font size. Defaults to 50\n  -px PADX, --padx PADX\n                        Set to specify barcode x-padding. Defauts to 10\n  -py PADY, --pady PADY\n                        Set to specify barcode y-padding. Defauts to 10\n  -fg FOREGROUND, --foreground FOREGROUND\n                        Set to specify barcode foreground in RGBA hexadecimal. Defaults to \"#000000FF\"\n  -bg BACKGROUND, --background BACKGROUND\n                        Set to specify barcode background in RGBA hexadecimal. Defaults to \"#FFFFFFFF\"\n  -mn MANIFEST_NAME, --manifest_name MANIFEST_NAME\n                        Set to override default manifest name.\n  -om, --overwrite_manifest\n                        Set to overwrite an existing barcode manifest json (losing current entries), by default an\n                        existing json will be updated to include new entries.\n```\n## Single Mode<a name=\"mark4\"></a>[^](#mark3)\n\nSingle mode is useful for one-off production of barcodes.\nPass the value to be encoded.\n#### Example usage:\n`PySimpleBarcode.py 120231`\n\n\n## File Mode<a name=\"mark5\"></a>[^](#mark3)\n\nFile mode is useful for batch production of barcodes.\nFile mode, as the name suggests, uses a test file with one barcode to generate per line.\nTo enable file mode use the `-f` flag.\nA basic commenting system allows comments prefixed by \"#\"\nExample barcode file format:\n\n```\n# Comments are supported\n900213\n900214\n900215 # Mid-line comments are supported too.\n900216\n\n# Empty lines are ignored.\n\n900217\n900218\n900219\n```\n\n#### Example usage:\n`PySimpleBarcode.py -f barcodes.txt`\n\n\n## Manifest System<a name=\"mark6\"></a>[^](#mark3)\n\nBoth Single Mode and File Mode have an optional manifest system that allows for easy tracking with an `output/manifest.json` that maps which barcodes have been generated to their file locations.\n\nUse the `-m` flag to enable the manifest system.\n\nThe `-mn` argument will override the default manifest name.\n\nThe `-om` argument will cause the script overwrite the previous manifest entirely rather than just adding a new entry, this does not remove the output files from the hard drive.\n\n# Module Usage<a name=\"mark7\"></a>[^](#mark0)\n\nEncoder objects simplify handling multiple barcode sub-types.\n\n## Examples<a name=\"mark8\"></a>[^](#mark7)\n\n### Using the Encoder (the easy way)<a name=\"mark9\"></a>[^](#mark8)\n\n```py\nfrom PySimpleBarcode import Encoder\n\n# Instantiate Encoder with custom background color\nencoder = Encoder(background = (200, 200, 255, 255))\n\n# Make standard barcode\nbarcode = encoder.make_barcode(\"8675309\")\n\n# Show the barcode in a window\nbarcode.show()\n\n# Save barcode\nbarcode.save(\"barcode.png\")\n\n# Repeat process for extended barcode\nextended_barcode = encoder.make_extended_barcode(\"8675309\")\nextended_barcode.show()\nextended_barcode.save(\"extended_barcode.png\")\n```\n### Using make_barcode directly (the hard way)<a name=\"mark10\"></a>[^](#mark8)\n\n```py\nfrom PySimpleBarcode import make_barcode, get_code_39_font_data\n\n# Custom background\nbackground = (200, 200, 255, 255)\n\n# Load normal font from library\nfont = get_code_39_font_data()\n\n# Make standard barcode\nbarcode = make_barcode(\"8675309\", font, background=background)\n\n# Show the barcode in a window\nbarcode.show()\n\n# Save barcode\nbarcode.save(\"barcode.png\")\n\n# Repeat the process for extended barcode\nextended_font = get_code_39_extended_font_data()\nextended_barcode = make_barcode(\"8675309\", extended_font, background=background)\nextended_barcode.show()\nextended_barcode.save(\"extended_barcode.png\")\n```\n## The Encoder<a name=\"mark11\"></a>[^](#mark7)\n\n### Encoder<a name=\"mark12\"></a>[^](#mark11)\n> **Encoder object to set overridable defaults and hold loaded font data. Setting a value in a method will temporarily overide the default.**\n> \n> ```py\n> class Encoder(object):\n> \tdef __init__(self, default_size: int = 50, default_padx: int = 10, default_pady: int = 10, default_background: tuple = (255, 255, 255, 255), default_foreground: tuple = (0, 0, 0, 255)):\n> \t\t...\n> \tdef make_barcode(self, val: str, size: int = None, padx: int = None, pady: int = None, background: tuple = None, foreground: tuple = None):\n> \t\t\"\"\"Make normal barcode, returns a PIL Image object.\"\"\"\n> \tdef make_extended_barcode(self, val: str, size: int = None, padx: int = None, pady: int = None, background: tuple = None, foreground: tuple = None):\n> \t\t\"\"\"Make extended barcode, returns a PIL Image object.\"\"\"\n> \n> ```\n## Functions<a name=\"mark13\"></a>[^](#mark7)\n\n### make_barcode<a name=\"mark14\"></a>[^](#mark13)\n> **Core barcode generation function, returns a PIL Image object.**\n> \n> ```py\n> def make_barcode(val: str, font: _io.BytesIO, size: int = 50, padx: int = 10, pady: int = 10, background: tuple = (255, 255, 255, 255), foreground: tuple = (0, 0, 0, 255)):\n> \t...\n> ```\n### encode_39<a name=\"mark15\"></a>[^](#mark13)\n> **Makes a string ready for the Code 39 font, returns a String.**\n> \n> ```py\n> def encode_39(val: str):\n> \t...\n> ```\n### get_code_39_font_data<a name=\"mark16\"></a>[^](#mark13)\n> **Returns a BytesIO file object containing the loaded normal Code 39 font. Takes no arguments.**\n> \n> ```py\n> def get_code_39_font_data():\n> \t...\n> ```\n### get_code_39_extended_font_data<a name=\"mark17\"></a>[^](#mark13)\n> **Returns a BytesIO file object containing the loaded extended Code 39 font. Takes no arguments.**\n> \n> ```py\n> def get_code_39_extended_font_data():\n> \t...\n> ```\n### get_code_39_font_and_extended_font_data<a name=\"mark18\"></a>[^](#mark13)\n> **Returns a tuple of BytesIO file objects containing the normal and extended fonts. Takes no arguments.**\n> \n> ```py\n> def get_code_39_font_and_extended_font_data():\n> \t...\n> ```\n# Single File Usage<a name=\"mark19\"></a>[^](#mark0)\n\n```\nThis project was designed with single-file usage in mind.\nPySimpleBarcode.py relies on only the standard python library and pillow.\nThe Libre Barcode 39 TrueType Fonts are packaged within the script file in a compressed format.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AndrewSpangler/PySimpleBarcode",
    "keywords": "barcode,code39,code,39,generator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PySimpleBarcode",
    "package_url": "https://pypi.org/project/PySimpleBarcode/",
    "platform": null,
    "project_url": "https://pypi.org/project/PySimpleBarcode/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AndrewSpangler/PySimpleBarcode/issues",
      "Homepage": "https://github.com/AndrewSpangler/PySimpleBarcode"
    },
    "release_url": "https://pypi.org/project/PySimpleBarcode/0.1.2/",
    "requires_dist": [
      "pillow"
    ],
    "requires_python": ">=3.8",
    "summary": "A small Code 39 barcode generator using PIL and the Libre Barcode 39 font family",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15428763,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bab29f6c072cd2b162d7197937ac67f8d5463121762d33c1474bfbd74013a4e",
          "md5": "16bbcb3b7668a98931be6b89077ed666",
          "sha256": "3cb2c71787a960ebf10d33f3a192ba26caae0eac8bbb8f10654fe2063cec85a2"
        },
        "downloads": -1,
        "filename": "PySimpleBarcode-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16bbcb3b7668a98931be6b89077ed666",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 45454,
        "upload_time": "2022-10-16T17:25:38",
        "upload_time_iso_8601": "2022-10-16T17:25:38.484377Z",
        "url": "https://files.pythonhosted.org/packages/4b/ab/29f6c072cd2b162d7197937ac67f8d5463121762d33c1474bfbd74013a4e/PySimpleBarcode-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ea40696cc7e46091b84ec73a849e62da79adc4c6ffbe372098b72c8c0e33b8a",
          "md5": "b40e6fd8ba4437c897dae54e24992730",
          "sha256": "313a6645b83c372f4349e87a0b50b4fb0d4d4ab11f60387d47aa8b817612c7ee"
        },
        "downloads": -1,
        "filename": "PySimpleBarcode-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b40e6fd8ba4437c897dae54e24992730",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 45612,
        "upload_time": "2022-10-16T18:15:26",
        "upload_time_iso_8601": "2022-10-16T18:15:26.665847Z",
        "url": "https://files.pythonhosted.org/packages/4e/a4/0696cc7e46091b84ec73a849e62da79adc4c6ffbe372098b72c8c0e33b8a/PySimpleBarcode-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ea40696cc7e46091b84ec73a849e62da79adc4c6ffbe372098b72c8c0e33b8a",
        "md5": "b40e6fd8ba4437c897dae54e24992730",
        "sha256": "313a6645b83c372f4349e87a0b50b4fb0d4d4ab11f60387d47aa8b817612c7ee"
      },
      "downloads": -1,
      "filename": "PySimpleBarcode-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b40e6fd8ba4437c897dae54e24992730",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 45612,
      "upload_time": "2022-10-16T18:15:26",
      "upload_time_iso_8601": "2022-10-16T18:15:26.665847Z",
      "url": "https://files.pythonhosted.org/packages/4e/a4/0696cc7e46091b84ec73a849e62da79adc4c6ffbe372098b72c8c0e33b8a/PySimpleBarcode-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}