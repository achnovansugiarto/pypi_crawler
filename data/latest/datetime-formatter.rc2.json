{
  "info": {
    "author": "nadime",
    "author_email": "scottpriceasher@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Localization"
    ],
    "description": "==================\ndatetime_formatter\n==================\n\n``datetime_formatter`` provides a *DSL (domain-specific language)* for formatting\n``datetimes`` inline to strings.  ``datetime_formatter`` is also capable of translating\nthe ``datetime`` by most intervals, including some that are not supported by\n``timedelta`` like \"business_day\" (skip weekends and holidays).\n\nFor example (see `Available Output Formats`_ for full details)\n\nUse ``datetime_formatter`` to format dates effectively, including translations\nand holiday/weekend management using easy-to-remember shortcuts\ninstead of esoteric ``strftime`` shortcuts, i.e.\nhaving to memorize that ``%m`` is month, while ``%M\"`` is minute.\nFor example, use ``YMD`` to refer to a ``YYYYMMDD`` formatting of a date.\n\n``datetime_formatter`` is especially useful for ingestion of configuration files\nwhere complicated date logic either has to be handled outside of the file itself,\nmaking understanding logic harder, or by making all configuration actual\nPython code -- which again makes reading harder and interoperability with\nnon-Python much harder or impossible.  ``datetime_formatter`` allows all of this\nformatting to be done inline, making configuration files easier to comprehend.\n\n.. image:: https://github.com/nadime/datetime_formatter/workflows/Tests/badge.svg\n    :target: actions\n\n.. image:: https://coveralls.io/repos/github/nadime/datetime_formatter/badge.svg?branch=main\n    :target: https://coveralls.io/repos/github/nadime/datetime_formatter/badge.svg?branch=main\n\n.. .. image:: http://img.shields.io/pypi/v/holidays.svg\n    :target: https://pypi.python.org/pypi/holidays\n\n.. image:: https://img.shields.io/badge/license-MIT-black\n    :target: LICENSE\n\n.. image:: https://readthedocs.org/projects/datetime-formatter/badge/?version=latest\n    :target: https://datetime-formatter.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\nInstall\n-------\n\nThe latest stable version can always be installed or updated via pip:\n\n.. code-block:: bash\n\n    $ pip install --update datetime_formatter\n\n\nDocumentation\n-------------\n\n.. _Read the Docs: https://datetime_formatter.readthedocs.io/\n\nThe documentation is hosted on `Read the Docs`_.\n\n\nQuick Start\n-----------\n\n``datetime_formatter`` is intended to be used in one of two ways.  You can either\nuse the provided ``DateTimeFormatter`` class which inherits from\n``string.Formatter``, but overrides ``.format`` to provide unique functionality.\n\n.. code-block:: python3\n\n  from datetime_formatter import DateTimeFormatter\n\n  dtf = DateTimeFormatter(\"2005-03-01 09:30:00\")\n  dtf.format(\"Format this way %ISODATETIME% or that way %YYYY%-%MM%-%DD% %HH%:%MM:%SS%\")\n  dtf.format(\"Or use translaters to change the datetime: %YYYYMMDD-P1Y%\")\n\nOr use the provided convenience function ``dtformat`` (aliased to ``dtfmt`` as well):\n\n.. code-block:: python3\n\n  from datetime import datetime\n  from datetime_formatter import dtfmt\n\n  dtfmt(20050301, \"YYYYMMDD\") == \"20050301\"  # True\n  dtfmt(\"2005-03-01\", \"MMDDYY\") == \"030105\"  # True\n  dtfmt(\"2005-03-01 08:30:00\", \"HHMMSS\") == \"083000\" # True\n\nYou can use the ``dtfmt`` shortcut, intended for use within ``f-strings``, or\nyou can instantiate a ``DateTimeFormatter`` object and use its ``.format`` method\n(or take advantage of the fact that ``__call__`` forwards to ``.format``)\n\n.. code-block:: python3\n\n  dtf = DateTimeFormatter(datetime(2005, 3, 1))\n  dtf.format(\"%YYYYMMDD%\") == \"20050301\"\n\nYou can also translate dates and/or times using inline translation syntax, e.g.:\n\n.. code-block:: python3\n\n  dtfmt(20050301, \"YMD-M1D\") == \"20050228\"\n  dtfmt(20050301, \"YMD-M1Y\") == \"20040301\"\n  dtfmt(\"20050301 08:30:00\", \"DATETIME-P1H\") == \"2005-03-01 09:30:00\"\n\nYou can also convert to a new timezone on the fly, but only if you\nyour ``datetime`` object is not timezone-naive.\n\n.. code-block:: python3\n\n  from dateutil import tz\n\n  utc = tz.gettz(\"UTC\")\n  est = tz.gettz(\"EST\")\n  dt = datetime(2005, 3, 1, 8, 30, 0, 0, est)\n  dtfmt(dt, \"ISODT\", output_tz=utc) == \"2005-03-01T13:30:00+00:00\"\n\nThe full list of supported output shortcuts and translations are provided\nbelow.  You can also use the ``holidays`` module with translations to skip\nwell-known holidays, much like you can skip weekends using the ``business_day``\ntranslation size.\n\n.. code-block:: python3\n\n  import holidays\n  dtfmt(20061229, \"DATE-P2B\", holidays=holidays.US()) == \"2007-01-03\"\n\n\nPlease see the `documentation`_ for additional examples and detailed\ninformation.\n\nAvailable Output Formats\n------------------------\n\nThese shortcuts are used either as the ``fmtstr`` argument to ``dtfmt`` or\nwithin a string passed to ``DateTimeFormatter.format`` - in the latter case,\nthe fields to be replaced must be surrounded by ``%``, e.g. ``%YYYYMMDD%``.\n\n.. list-table::\n   :widths: 23 35 23\n   :header-rows: 1\n   :class: tight-table\n\n   * - FormatShortcut\n     - ``datetime`` equivalent (``strftime`` or function)\n     - Output format example\n   * - ``DATE``\n     - ``%Y-%m-%d``\n     - 2005-03-01\n   * - ``DATETIME``\n     - ``%Y-%m-%d %H:%M:%S``\n     -  2005-03-01 13:30:00\n   * - ``USDATE``\n     - ``%x``\n     - 03/01/05\n   * - ``USDATETIME``\n     - ``%x %X``\n     - 03/01/05 13:30:00\n   * - ``TIME``\n     - ``%X``\n     - 13:30:00\n   * - ``YEAR``\n     - ``%Y``\n     - 2005\n   * - ``YMD``\n     - ``%Y%m%d``\n     - 20050301\n   * - ``YYYYMM``\n     - ``%Y%m``\n     - 200503\n   * - ``MMYYYY``\n     - ``%m%Y``\n     - 032005\n   * - ``YYMM``\n     - ``%y%m``\n     - 0503\n   * - ``MMYY``\n     - ``%m%y``\n     - 0305\n   * - ``YYYYMMDD``\n     - ``%Y%m%d``\n     - 20050301\n   * - ``MMDDYY``\n     - ``%m%d%y``\n     - 030105\n   * - ``MMDDYYYY``\n     - ``%m%d%Y``\n     - 03012005\n   * - ``ISODATE``\n     - ``%Y-%m-%d``\n     - 2005-03-01\n   * - ``ISODATETIME``\n     - ``datetime.isoformat``\n     - 2005-03-01T13:30:00.200Z-05:00\n   * - ``MONTH``\n     - ``%m``\n     - 03\n   * - ``MON``\n     - ``%m``\n     - 03\n   * - ``MONTHABV``\n     - ``%b``\n     - Mar\n   * - ``MONTHNAME``\n     - ``%B``\n     - March\n   * - ``DAYABV``\n     - ``%a``\n     - Tues\n   * - ``DAYNAME``\n     - ``%A``\n     - Tuesday\n   * - ``DAYNUM``\n     - ``%w``\n     - 2\n   * - ``DAYYEAR``\n     - ``%j``\n     - 060\n   * - ``TZOFF``\n     - ``%z``\n     - -0500\n   * - ``TZNAME``\n     - ``%Z``\n     - EST\n   * - ``WEEKNUM``\n     - ``%W``\n     - 09\n   * - ``DAY``\n     - ``%d``\n     - 01\n   * - ``DD``\n     - ``%d``\n     - 01\n   * - ``MM``\n     - ``%m``\n     - 03\n   * - ``YY``\n     - ``%y``\n     - 05\n   * - ``YYYY``\n     - ``%Y``\n     - 2005\n   * - ``LOCALE_DT``\n     - ``%c``\n     - Tue Mar  1 13:30:00 2005\n   * - ``HHMMSS``\n     - ``%H:%M:%S``\n     - 13:30:00\n   * - ``HHMMSSZZ``\n     - ``%H:%M:%S.%f``\n     - 13:30:00.200000\n   * - ``AMPM``\n     - ``%p``\n     - PM\n   * - ``HH``\n     - ``%H``\n     - 13\n   * - ``HH12``\n     - ``%I``\n     - 01\n   * - ``HOUR``\n     - ``%H``\n     - 13\n   * - ``MIN``\n     - ``%M``\n     - 30\n   * - ``SECOND``\n     - ``%S``\n     - 00\n   * - ``SS``\n     - ``%S``\n     - 00\n   * - ``MICROSECOND``\n     - ``%f``\n     - 200000\n   * - ``ZZ``\n     - ``%f``\n     - 200000\n\n\n\nAvailable Translations\n----------------------\n\nTranslations are made up of three parts.  The ``direction`` (``M`` or ``P``)\ndetermines whether to go forward/backward (plus/minus).  The ``unit``\n(see table below for ``unit``-types) determines how far each step takes us\nfoward or backward.  Finally the ``size`` is a non-negative integer that tells\nus how far to move in the provided ``units``.\n\n.. list-table::\n   :widths: 20 10 50\n   :header-rows: 1\n   :class: tight-table\n\n   * - Part name\n     - Possible Values\n     - Description\n   * - Direction\n     - ``[ \"M\",\"P\",\"m\",\"p\" ]``\n     - M = minus, P = plus\n   * - Number\n     - Integer >= 0\n     - The number of units to translate the date by\n   * - Size/Unit\n     - ``[ \"Y\",\"m\",\"D\",\"W\",\"H\",\"M\",\"S\",\"Z\",\"B\" ]``\n     - .. list-table::\n          :widths: 10 40\n          :header-rows: 1\n          :class: tight-table\n\n          * - Size\n            - Meaning\n          * - ``Y``\n            - Year(s)\n          * - ``m``\n            - Month(s)\n          * - ``D``\n            - Day(s)\n          * - ``W``\n            - Week(s)\n          * - ``H``\n            - Hour(s)\n          * - ``M``\n            - Minute(s)\n          * - ``S``\n            - Second(s)\n          * - ``Z``\n            - Microsecond(s)\n          * - ``B``\n            - Business day(s)\n          * - ``F``\n            - Business week(s)\n          * - ``P``\n            - Business month(s)\n          * - ``K``\n            - Business year(s)\n\t  * - ``TS``\n\t    - Timestamp (UTC seconds since epoch)\n\nYou can string together any combination of these three translation parts, e.g.:\n\n.. code-block:: python\n\n  dtfmt(20050301, \"YMD-M1B\")      # 20050301 minus 2 business days (20050225)\n  dtfmt(20050301, \"YMD-P1Y\")      # 20050301 plus 1 year (20060301)\n  dtfmt(20050301, \"DATETIME-P1H\") # 20050301 00:00:00 plus 1 hour: (2005-03-01 01:00:00)\n\nBeta Version\n------------\n\nThe latest development (beta) version can be installed directly from GitHub:\n\n.. code-block:: bash\n\n    $ pip install --upgrade https://github.com/nadime/datetime_formatter/tarball/beta\n\nAll new features are always first pushed to beta branch, then released on\nmaster branch upon official version upgrades.\n\n\nContributions\n-------------\n\n.. _Issues: https://github.com/nadime/datetime_formatter/issues\n.. _pull requests: https://github.com/nadime/datetime_formatter/pulls\n.. _here: CONTRIBUTING.rst\n\nIssues_ and `pull requests`_ are always welcome.  Please see\n`here`_ for more information.\n\nLicense\n-------\n\n.. __: LICENSE\n\nCode and documentation are available according to the MIT License\n(see LICENSE__).\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nadime/datetime_formatter",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datetime-formatter",
    "package_url": "https://pypi.org/project/datetime-formatter/",
    "platform": "any",
    "project_url": "https://pypi.org/project/datetime-formatter/",
    "project_urls": {
      "Homepage": "https://github.com/nadime/datetime_formatter"
    },
    "release_url": "https://pypi.org/project/datetime-formatter/0.0.2/",
    "requires_dist": [
      "attr",
      "datetime",
      "holidays",
      "python-dateutil",
      "tzlocal"
    ],
    "requires_python": ">=3.8",
    "summary": "Manipulate and format datetimes",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14823801,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "531a05ba5c1e3d49dd7c73a76154669385c609c07669270dc3dcfe64841a992e",
          "md5": "59635cdb071c02504d50ab5ca42e973c",
          "sha256": "7e7967f39c7ff5a44c04fd7b75cbb57dd38e2f9b628daddc1d323ab4880fa4f7"
        },
        "downloads": -1,
        "filename": "datetime_formatter-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59635cdb071c02504d50ab5ca42e973c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12551,
        "upload_time": "2022-04-14T15:21:55",
        "upload_time_iso_8601": "2022-04-14T15:21:55.960664Z",
        "url": "https://files.pythonhosted.org/packages/53/1a/05ba5c1e3d49dd7c73a76154669385c609c07669270dc3dcfe64841a992e/datetime_formatter-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cbefe11d2a4c0c94f87b0f7169ca9331c8a58d7674deec223a7d4ba5d98b5c5",
          "md5": "4c799f5c675f8259fadecac1d8bc0192",
          "sha256": "7f509fa8c1131ec0995a9f3d8e2b20473d8fe9a046abc2c59b68065e94e3f593"
        },
        "downloads": -1,
        "filename": "datetime_formatter-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c799f5c675f8259fadecac1d8bc0192",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16236,
        "upload_time": "2022-04-14T15:21:57",
        "upload_time_iso_8601": "2022-04-14T15:21:57.969157Z",
        "url": "https://files.pythonhosted.org/packages/5c/be/fe11d2a4c0c94f87b0f7169ca9331c8a58d7674deec223a7d4ba5d98b5c5/datetime_formatter-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1912019fe8cbb39c155e29f17529bc67bfd69fecde5d10c238661e5b92a8ec",
          "md5": "6052c9932a68594af664f060e501bcd0",
          "sha256": "b592650d1355e23d6a6721c92b846ebb7e4aa9f41172ebdc294f3da12af58a65"
        },
        "downloads": -1,
        "filename": "datetime_formatter-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6052c9932a68594af664f060e501bcd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12848,
        "upload_time": "2022-08-20T22:55:23",
        "upload_time_iso_8601": "2022-08-20T22:55:23.714312Z",
        "url": "https://files.pythonhosted.org/packages/7f/19/12019fe8cbb39c155e29f17529bc67bfd69fecde5d10c238661e5b92a8ec/datetime_formatter-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13b3bc86a07fd6e538743b6da9b2712129aa73101d52620b425e0af1eaeb15fe",
          "md5": "81a6bdbfcfacf5b9531cbc5de9ed3542",
          "sha256": "b634d3ac7dc639680f281c756d01df45ab2765b5b8a41b28e42ccca0930888aa"
        },
        "downloads": -1,
        "filename": "datetime_formatter-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81a6bdbfcfacf5b9531cbc5de9ed3542",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16740,
        "upload_time": "2022-08-20T22:55:25",
        "upload_time_iso_8601": "2022-08-20T22:55:25.527303Z",
        "url": "https://files.pythonhosted.org/packages/13/b3/bc86a07fd6e538743b6da9b2712129aa73101d52620b425e0af1eaeb15fe/datetime_formatter-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f1912019fe8cbb39c155e29f17529bc67bfd69fecde5d10c238661e5b92a8ec",
        "md5": "6052c9932a68594af664f060e501bcd0",
        "sha256": "b592650d1355e23d6a6721c92b846ebb7e4aa9f41172ebdc294f3da12af58a65"
      },
      "downloads": -1,
      "filename": "datetime_formatter-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6052c9932a68594af664f060e501bcd0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12848,
      "upload_time": "2022-08-20T22:55:23",
      "upload_time_iso_8601": "2022-08-20T22:55:23.714312Z",
      "url": "https://files.pythonhosted.org/packages/7f/19/12019fe8cbb39c155e29f17529bc67bfd69fecde5d10c238661e5b92a8ec/datetime_formatter-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13b3bc86a07fd6e538743b6da9b2712129aa73101d52620b425e0af1eaeb15fe",
        "md5": "81a6bdbfcfacf5b9531cbc5de9ed3542",
        "sha256": "b634d3ac7dc639680f281c756d01df45ab2765b5b8a41b28e42ccca0930888aa"
      },
      "downloads": -1,
      "filename": "datetime_formatter-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "81a6bdbfcfacf5b9531cbc5de9ed3542",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16740,
      "upload_time": "2022-08-20T22:55:25",
      "upload_time_iso_8601": "2022-08-20T22:55:25.527303Z",
      "url": "https://files.pythonhosted.org/packages/13/b3/bc86a07fd6e538743b6da9b2712129aa73101d52620b425e0af1eaeb15fe/datetime_formatter-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}