{
  "info": {
    "author": "Richard Gomes",
    "author_email": "rgomes.info@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: JavaScript",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "OVERVIEW\n-------------------\nThis is a simple Javascript OpenID selector. It has been designed so \nthat users do not even need to know what OpenID is to use it, they \nsimply select their account by a recognisable logo.\n\nUSAGE\n-------------------\nSee demo.html source\n\nTROUBLESHOOTING\n----------------------------\nPlease remember after you change list of providers, you must run \ngenerate-sprite.js <locale> to refresh sprite image\n\ngenerate-sprite.js requires ImageMagick to be installed and works\nonly in Windows (non-Windows users must run ./generate-sprite.sh or\n./generate-sprite.rb)\n\nBefore running generate-sprite.js for the first time, check its\nsource code and correct line 16 (var imagemagick = '<...>';) to \npoint to ImageMagick install dir.\n\nPlease also remember that sprites may be reused: if two \nlocalizations have the same provider list that differs only in text,\nit is reasonable to reuse the sprite: for example German \nlocalization is reusing sprite from English localization, Ukrainian \nlocalization is reusing sprite from Russian localization, etc.\n\nSo, if provider list in root localization changes, localizations \nthat reuse the sprite must be also changed, or unlinked or relinked\nto new root localization. \n\nHOWTO\n-------------------\n1. how to create new (small) provider icon\n   a. launch web browser, go to http://<provider-site>/favicon.ico\n      and save the image as <provider>.ico in ./images.small folder\n   b. launch GIMP or Photoshop and save 16x16 rendition from the \n      icon as <provider>.ico.gif\n   c. use ImageMagick command like \n      convert <provider>.ico <provider>.ico.png to convert the icon\n      to PNG format (it might generate several files, just pick 16x16\n      rendition and rename it as <provider>.ico.png w/o .1.)\n\n2. how to create new (large) provider image\n   a. grab provider logo image from its website\n   b. resize the image not to exceed 90x30 rect\n   c. save as the image as <provider>.gif in ./images.large folder\n\n3. how to plug-in facebook provider\n   put the following code in providers_large or providers_small:\n   facebook = {\n     name: 'Facebook',\n     url: \"javascript:facebook_click();\"\n   }\n   where facebook_click is something like:\n   function facebook_click() {\n     $('#<id of html fbconnect element>').click();\n   }\n   the same mechanism also applies if you want to plug-in any oauth or\n   xauth provider\n\nLICENSE\n-------------------\nThis code is licensed under the New BSD License.\n\n\nAuthors\n=======\n\nandyjm@gmail.com - Project Owner\ndavid.j.boden@googlemail.com\nandriy.gerasika@gmail.com\nrgomes.info@gmail.com - Packager",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openid-selector.readthedocs.org",
    "keywords": "authentication frontend javascript openid oauth2",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "openid-selector",
    "package_url": "https://pypi.org/project/openid-selector/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/openid-selector/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://openid-selector.readthedocs.org"
    },
    "release_url": "https://pypi.org/project/openid-selector/0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "openid-selector is a frontend in JavaScript for authentication with OpenID, OAuth2, etc",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 929790,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efdd7703cab732c8c7c0066bfac473230c7e8e0c216dc32d89c31dab3feb1ae8",
          "md5": "3d506f6409a9e2c544164c0dd7235ba8",
          "sha256": "c3a0d734fabfb8a03fa9b439e16900f08504108984043bdbb68b60f7584c3bb3"
        },
        "downloads": -1,
        "filename": "openid-selector-0.2.zip",
        "has_sig": false,
        "md5_digest": "3d506f6409a9e2c544164c0dd7235ba8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 324656,
        "upload_time": "2013-11-26T06:14:11",
        "upload_time_iso_8601": "2013-11-26T06:14:11.684396Z",
        "url": "https://files.pythonhosted.org/packages/ef/dd/7703cab732c8c7c0066bfac473230c7e8e0c216dc32d89c31dab3feb1ae8/openid-selector-0.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efdd7703cab732c8c7c0066bfac473230c7e8e0c216dc32d89c31dab3feb1ae8",
        "md5": "3d506f6409a9e2c544164c0dd7235ba8",
        "sha256": "c3a0d734fabfb8a03fa9b439e16900f08504108984043bdbb68b60f7584c3bb3"
      },
      "downloads": -1,
      "filename": "openid-selector-0.2.zip",
      "has_sig": false,
      "md5_digest": "3d506f6409a9e2c544164c0dd7235ba8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 324656,
      "upload_time": "2013-11-26T06:14:11",
      "upload_time_iso_8601": "2013-11-26T06:14:11.684396Z",
      "url": "https://files.pythonhosted.org/packages/ef/dd/7703cab732c8c7c0066bfac473230c7e8e0c216dc32d89c31dab3feb1ae8/openid-selector-0.2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}