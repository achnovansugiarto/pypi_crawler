{
  "info": {
    "author": "IBM Cloud",
    "author_email": "vkalangu@in.ibm.com, skairali@in.ibm.com, ashishth@in.ibm.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ibm_cloud_security_advisor-test\n\nThis repository contains the released python client SDK for IBM Cloud Security Advisor Findings and Notifications APIs . Check out below for more details.\n\n* Findings API : https://cloud.ibm.com/apidocs/security-advisor/findings\n* Notifications API : https://cloud.ibm.com/apidocs/security-advisor/notifications\n\n## Notice\n\nSupport for Python versions 2.x and versions <= 3.4 is deprecated and will be officially dropped in the next major release, which is expected to be end of December, 2019. Refer https://github.com/IBM/python-sdk-core \n\n## Overview\n\n\nThe  ibm_cloud_security_advisor allows developers to programmatically interact with the ibm cloud security advisor findings and notifications api\n\n## Prerequisites\n\n[ibm-cloud-onboarding]: https://cloud.ibm.com/registration?target=%2Fsecurity-advisor%23%2Fdashboard\n\n* An [IBM Cloud][ibm-cloud-onboarding] account.\n* An IAM API key to allow the SDK to access your account. Create one [here](https://cloud.ibm.com/iam/apikeys).\n* An installation of Python >=3.5 on your local machine.\n\n## Installation\n\nTo install, use `pip` or `easy_install`:\n\n```bash\npip install --upgrade \"ibm_cloud_security_advisor>=1.0.0\"\n```\n\nor\n\n```bash\neasy_install --upgrade \" ibm_cloud_security_advisor>=1.0.0\"\n```\n\n## Authentication\n\n ibm_cloud_security_advisor uses token-based [Identity and Access Management (IAM) authentication](https://cloud.ibm.com/docs/iam?topic=iam-getstarted).\n\nIAM authentication uses a service API key to get an access token that is passed with the call.\nAccess tokens are valid for a limited amount of time and must be regenerated.\n\nTo provide credentials to the SDK, you supply either an IAM service **API key** or an **access token**:\n\n- Use the API key to have the SDK manage the lifecycle of the access token. The SDK requests an access token, ensures that the access token is valid, and refreshes it if necessary.\n- Use the access token if you want to manage the lifecycle yourself. For details, see `Generating bearer tokens using the IAM API key` and `Supplying the access token` section\n\n\n### Supplying the IAM API key:\n\n\n```python\nfrom ibm_cloud_security_advisor import FindingsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator\nauthenticator = IAMAuthenticator('apikey')\nfindings_service =  FindingsApiV1(authenticator=authenticator)\n```\n\n### Generating bearer tokens using the IAM API key:\n\n```python\nfrom  ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n# In your API endpoint use this to generate new bearer tokens\niam_token_manager = IAMAuthenticator('<apikey>')\ntoken = iam_token_manager.get_token()\n```\n\n### Supplying the access token:\n\n```python\n#FINDINGS\nfrom ibm_cloud_security_advisor import FindingsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import BearerTokenAuthenticator\n# in the constructor, assuming control of managing the token\nauthenticator = BearerTokenAuthenticator('your token')\nfindings_service =  FindingsApiV1(authenticator=authenticator)\n```\n\n```python\n#NOTIFICATIONS\nfrom ibm_cloud_security_advisor import NotificationsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import BearerTokenAuthenticator\n# in the constructor, assuming control of managing the token\nauthenticator = BearerTokenAuthenticator('your token')\nnotifications_service =  NotificationsApiV1(authenticator=authenticator)\n```\n\n## Using the SDK\n\nThe  ibm_cloud_security_advisor Python SDK supports only synchronous (blocking) execution of service methods. The return value from all service methods is a DetailedResponse object. Use this SDK to perform the basic  ibm_cloud_security_advisor creation operation as follows, with the installation and initialization instructions from above:\n\n```python\n#Findings\nfrom ibm_cloud_security_advisor import FindingsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator\nauthenticator = IAMAuthenticator('your apikey')\nibm_cloud_security_advisor_findings_service =  FindingsApiV1(authenticator=authenticator)\nresponse =  ibm_cloud_security_advisor_findings_service.<Method here<>>\nprint(response)\n```\n\n```python\n#Notifications\nfrom ibm_cloud_security_advisor import NotificationsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator\nauthenticator = IAMAuthenticator('your apikey')\nibm_cloud_security_advisor_notifications_service =  NotificationsApiV1(authenticator=authenticator)\nresponse =  ibm_cloud_security_advisor_notifications_service.<Method here<>>\nprint(response)\n```\n\nThis would give an output of `DetailedResponse` from which you can use the `get_result()`, `get_headers()`, and `get_status_code()` to return the result, headers, and status code respectively.\n\n### Sending request headers\n\nCustom headers can be passed in any request in the form of a `dict` as:\n\n```python\nheaders = {\n'Custom-Header': 'custom_value'\n}\n```\n\nFor example, to send a header called `Custom-Header` to a call in  ibm_security_advisor_findings_api_sdk, pass the headers parameter as:\n\n```python\nfrom ibm_cloud_security_advisor import FindingsApiV1 \nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator\nauthenticator = IAMAuthenticator('your apikey')\nibm_security_advisor_findings_api_sdk_service =  FindingsApiV1(authenticator=authenticator)\nresponse = ibm_security_advisor_findings_api_sdk_service.<<METHOD HERE>>(headers={'Custom-Header': 'custom_value'}).get_result()\n```\n\n### Error Handling\n\nThe  ibm_cloud_security_advisor Python SDK generates an exception for any unsuccessful method invocation.\nIf the method receives an error response from an API call to the service, it will generate an\n`ApiException` with the following fields.\n\n| NAME | DESCRIPTION |\n| ----- | ----------- |\n| code | The HTTP response code that is returned. |\n| message\t| A message that describes the error. |\n| info\t| A dictionary of additional information about the error. |\n\n`ApiException` can be handled this way.\n\n```python\nfrom ibm_cloud_sdk_core.api_exception import ApiException\ntry:\n    response = ibm_cloud_security_advisor_findings_service.create_note(\n        account_id=\"<<Account ID here>>\",\n        **data\n        )\nexcept ApiException as err:\n    try:\n        # err.code  gives status code\n        excep_resp = err.http_response.json()\n        print(excep_resp)\n    except:\n        print(err)\n```\nexcep_resp would be-\n```json\n{\n  \"detail\": \"Document already exists: abc/providers/sdktest/notes/sdk_note_id1\",\n  \"instance\": \"abc/providers/sdktest/notes/sdk_note_id1\",\n  \"status\": 409,\n  \"title\": \"Conflict\",\n  \"type\": \"about:blank\"\n}\n```\n\n### Error log level\nBy default, error log level is disabled, so user will not see any error/exception logged by `logger.error` and `logger.exception` but will see other error/exception.\nTo enable it, user can pass `enable_error_log=True` .\n```python\nibm_cloud_security_advisor_findings_service =FindingsApiV1(authenticator=authenticator,enable_error_log=True)\n```\n\n\n## Sample Code\n\n#### Findings API\n\nExample | http method  \n------------ | ------------- \n[***post_graph***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/post_graph.py) | POST /v1/{account_id}/graph \n[***list_providers***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/list_providers.py) | GET /v1/{account_id}/providers\n[***create_finding***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_finding.py) | POST /v1/{account_id}/providers/{provider_id}/notes\n[***create_card***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_card.py) | POST /v1/{account_id}/providers/{provider_id}/notes\n[***create_note_with_kpi***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_note_with_kpi.py) | POST /v1/{account_id}/providers/{provider_id}/notes\n[***create_note_with_reporter***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_note_with_reporter.py) | POST /v1/{account_id}/providers/{provider_id}/notes\n[***create_note_with_section***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_note_with_section.py) | POST /v1/{account_id}/providers/{provider_id}/notes\n[***list_notes***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/list_notes.py) | GET /v1/{account_id}/providers/{provider_id}/notes\n[***delete_note***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/delete_note.py) | DELETE /v1/{account_id}/providers/{provider_id}/notes/{note_id}\n[***create_occurrence***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_occurrence.py) | POST /v1/{account_id}/providers/{provider_id}/occurrences\n[***create_occurrence_with_context***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_occurrence_with_context.py) | POST /v1/{account_id}/providers/{provider_id}/occurrences\n[***create_occurrence_with_kpi***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/create_occurrence_with_kpi.py) | POST /v1/{account_id}/providers/{provider_id}/occurrences\n[***list_occurrences***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/list_occurrences.py) | GET /v1/{account_id}/providers/{provider_id}/occurrences\n[***delete_occurrence***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/delete_occurrence.py) | DELETE /v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}\n[***list_note_occurrences***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/findings/list_note_occurrences.py) | GET /v1/{account_id}/providers/{provider_id}/notes/{note_id}/occurrences\n\n#### Notifications API\n\nExample | http method  \n------------ | ------------- \n[***create channel***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/create_notification_channel.py) | POST /v1/{account_id}/notifications/channels \n[***list channels***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/list_all_channels.py) | GET /v1/{account_id}/notifications/channels\n[***get channel***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/get_notification_channel.py) | GET /v1/{account_id}/notifications/channels/{channel_id} \n[***delete bulk channels***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/delete_notification_channels.py) | DELETE /v1/{account_id}/notifications/channels\n[***delete channel***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/delete_notification_channel.py) | DELETE /v1/{account_id}/notifications/channels/{channel_id}\n[***update channel***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/update_notification_channel.py) | PUT /v1/{account_id}/notifications/channels/{channel_id}\n[***test channel***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/test_notification_channel.py) | GET /v1/{account_id}/notifications/channels/{channel_id}/test \n[***get public key***](https://github.com/ibm-cloud-security/security-advisor-sdk-python/blob/master/samples/notifications/get_public_key.py) | GET /v1/{account_id}/notifications/public_key \n\n\n\n\n## Documentation\nSee [Findings API doc](https://ibm-cloud-security.github.io/security-advisor-sdk-python/docs/findings_api_v1.html#FindingsApiV1).  \nSee [Notifications API doc](https://ibm-cloud-security.github.io/security-advisor-sdk-python/docs/notifications_api_v1.html#NotificationsApiV1).\n\n\n## Integration test\nTo run pytest, create virtual env and then run. Otherwise you might see below error\n\nissue - https://github.com/pytest-dev/pytest/issues/2287\n```\nTraceback:\ntest/integration/test_note.py:26: in <module>\n    from ibm_cloud_security_advisor import FindingsApiV1\n   ModuleNotFoundError: No module named 'ibm_cloud_security_advisor'\n```\n1. Install dev modules.\n    ```bash\n    python3 -m venv env  #(for python3)\n    source env/bin/activate\n    cd ibm-coud-security-advisor-sdk-python\n    pip install -r requirements-dev.txt\n    ```\n2. Prereq variables, either by exporting all the variables directly or provide in file-\n*Make sure `API_KEY` has enough permission to perform findings api operations.*\n    - export env vars \n    ```bash\n        export API_KEY=<YOUR_API_KEY>\n        export ACCOUNT_ID=<YOUR_ACCOUNT_ID>\n        export FINDING_API_ENDPOINT=<FINDING_API_ENDPOINT>\n        export NOTIFICATION_API_ENDPOINT=<NOTIFICATION_API_ENDPOINT>\n        #optional. Use it for dev/preprod iam endpoint\n        export IAM_ENDPOINT= <IAM_ENDPOINT>\n    ```\n    - provide in `/integration/input/cred/ibm-credentials.env` file or export your own `.env` credential file with full path including filename.\n    ```bash\n        export IBM_CREDENTIALS_FILE= <file_path>\n    ```\n1. To run test-\n\n\n```bash\npython -m pytest test/integration --html=report.html --json-report --json-report-summary\n\n```\nOnce run is completed, html report and .report.json will be generated in the same directory and it will look like this\n\n![Integration Test result](pytest_report.png?raw=true )\n\n\n\n## License\n\nThe ibm_cloud_security_advisor Python SDK is released under the Apache 2.0 license. The license's full text can be found in [LICENSE](LICENSE).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skairali/security-advisor-sdk-python/",
    "keywords": "Swagger,Findings API,Notifications API",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ibm-cloud-security-advisor-test",
    "package_url": "https://pypi.org/project/ibm-cloud-security-advisor-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/ibm-cloud-security-advisor-test/",
    "project_urls": {
      "Homepage": "https://github.com/skairali/security-advisor-sdk-python/"
    },
    "release_url": "https://pypi.org/project/ibm-cloud-security-advisor-test/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Test SDK",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7354508,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "474690829984988e5ce3f6289a115e8003b5aa549a839b0aa7872eb3476cd4ac",
          "md5": "54324c9b70fb8ac24ccfc14863e45e3a",
          "sha256": "9ec635615248ce365316bc9a2e0044f14a0315f3c9edd4f60169a1deda40a4e8"
        },
        "downloads": -1,
        "filename": "ibm_cloud_security_advisor_test-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "54324c9b70fb8ac24ccfc14863e45e3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31916,
        "upload_time": "2020-05-29T16:16:09",
        "upload_time_iso_8601": "2020-05-29T16:16:09.457716Z",
        "url": "https://files.pythonhosted.org/packages/47/46/90829984988e5ce3f6289a115e8003b5aa549a839b0aa7872eb3476cd4ac/ibm_cloud_security_advisor_test-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cd861176defaf178989ae195554c187b72110fa42ad77ef52f555b2a7f381f1",
          "md5": "13506be79add70a03141738a77368918",
          "sha256": "d6a93d817df2555abe644d24a5305524a9cc3442e8b69e604c742a6dfe1bf1b5"
        },
        "downloads": -1,
        "filename": "ibm_cloud_security_advisor_test-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13506be79add70a03141738a77368918",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31909,
        "upload_time": "2020-05-29T17:34:13",
        "upload_time_iso_8601": "2020-05-29T17:34:13.556893Z",
        "url": "https://files.pythonhosted.org/packages/5c/d8/61176defaf178989ae195554c187b72110fa42ad77ef52f555b2a7f381f1/ibm_cloud_security_advisor_test-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cd861176defaf178989ae195554c187b72110fa42ad77ef52f555b2a7f381f1",
        "md5": "13506be79add70a03141738a77368918",
        "sha256": "d6a93d817df2555abe644d24a5305524a9cc3442e8b69e604c742a6dfe1bf1b5"
      },
      "downloads": -1,
      "filename": "ibm_cloud_security_advisor_test-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "13506be79add70a03141738a77368918",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31909,
      "upload_time": "2020-05-29T17:34:13",
      "upload_time_iso_8601": "2020-05-29T17:34:13.556893Z",
      "url": "https://files.pythonhosted.org/packages/5c/d8/61176defaf178989ae195554c187b72110fa42ad77ef52f555b2a7f381f1/ibm_cloud_security_advisor_test-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}