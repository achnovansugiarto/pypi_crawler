{
  "info": {
    "author": "George Wood (@Geoiv)",
    "author_email": "george.wood@55places.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# rivet\nA user-friendly Python-to-S3 interface. Adds quality of life and convenience features around `boto3`, including the handling of reading and writing to files in proper formats.  While there is nothing that you can do with `rivet` that you can't do with `boto3`, `rivet`'s primary focus is ease-of-use. By handling lower-level operations such as client establishment and default argument specification behind the scenes, the cost of entry to interacting with cloud storage from within Python is lowered.\nIt also enforces good practice in S3 naming conventions.\n\n\n## Usage\n`rivet` acts as an abstraction around the S3 functionality of Amazon's `boto3` package.\nAlthough `boto3` is very powerful, the expansive functionality it boasts can be overwhelming\nand often results in users sifting through a lot of documentation to find the subset of\nfunctionality that they need. In order to make use of this package, you will need to have\nthe environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` configured\nfor the buckets you wish to interact with.\n\n### General\n1. Because S3 allows for almost anything to be used as an S3 key, it can be very easy to\nlose track of what exactly you have saved in the cloud. A very important example of this is\nfiletype - without a file extension at the end of the S3 key, it is entirely possible to\nlose track of what format a file is saved as. `rivet` enforces file extensions in the objects\nit reads and writes.\n    * Currently supported formats are: CSV, JSON, Avro, Feather, Parquet, Pickle\n    * Accessible in a Python session via `rivet.supported_formats`\n\n2. A default S3 bucket can be set up as an environment variable, removing the requirement\nto provide it to each function call. The name of this environment variable is `RV_DEFAULT_S3_BUCKET`.\n\n### Reading\nReading in `rivet` only requires two things: a key, and a bucket.\n\n```\nimport rivet as rv\n\ndf = rv.read('test_path/test_key.csv', 'test_bucket')\n```\n\nThe file will be downloaded from S3 to a temporary file on your machine, and\nbased on the file extension at the end of the S3 key, the proper file reading\nfunction will be used to read the object into the Python session.\n\nBecause it cannot be expected that all teams will always utilize good practice though,\nthe `read_badpractice` function allows for reading of files that do not have a file\nextension (or do not follow enforced key-writing practices). In addition to a key\nand bucket, this function requires that a storage format is provided.\n\n```\nimport rivet as rv\n\nobj = rv.read_badpractice('test_path/bad_key', 'test_bucket', filetype='pkl')\n```\n\nBoth the `read` and `read_badpractice` functions accept additional arguments\nfor the underlying file reading functions. So, if a user is familiar with\nthose functions, they can customize how files are read.\n\n```\nimport rivet as rv\n\ndf = rv.read('test_path/test_key.csv', 'test_bucket', delimiter='|')\n```\n\n### Writing\nWriting is handled almost identically to reading, with the additional\nparameter of the object to be uploaded. `write` returns the full path to\nthe object written to S3, including bucket name, without the `s3://` prefix.\n\n```\nimport pandas as pd\nimport rivet as rv\n\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nrv.write(df, 'test_path/test_key.csv', 'test_bucket')\n```\n\nSimilar to the read functionality, `write` determines which underlying write\nfunction to use based on the file extension in the S3 key provided. It can\naccept additional arguments to be passed to those functions, exactly like\nin the reading functions. However, unlike the reading functions, there is\nno 'bad practice' writing funcitonality. The `rivet` developers understand that\nits users can't control the practices of other teams, but as soon as writing\nbegins, the package will ensure that best practice is being followed.\n\n### Other operations\n1. Listing<br>\n`rivet` can list the files that are present at a given location in S3, with\ntwo different options being available for how to do so: `include_prefix` and `recursive`.\n\n We will be using the following example S3 bucket structure:\n```\ntest_bucket\n|---- test_key_0.csv\n|---- folder0/\n      |---- test_key_1.pq,\n|---- folder1/\n      |---- test_key_2.pkl,\n      |---- subfolder0/\n            |---- test_key_3.pkl,\n|---- folder2/\n      |---- test_key_4.csv\n```\n\n  - `rv.list` would behave as follows with default behavior:\n     ```\n     import rivet as rv\n\n     rv.list(path='', bucket='test_bucket')\n     Output: ['test_key_0.csv', 'folder0/', 'folder1/', 'folder2/']\n\n     rv.list(path='folder1/', bucket='test_bucket')\n     Output: ['test_key_2.pkl', 'subfolder0/']\n     ```\n\n  - `include_prefix` option will result in the full S3 key up to the current folder\n to be included in the returned list of keys.\n     ```\n     import rivet as rv\n\n     rv.list_objects(path='folder1/', bucket='test_bucket', include_prefix=True)\n     Output: ['folder1/test_key_2.pkl', 'folder1/subfolder0/']\n     ```\n\n  - The `recursive` option will result in objects stored in nested folders to be returned as well.\n    ```\n    import rivet as rv\n\n    rv.list(path='folder1', bucket='test_bucket', recursive=True)\n    Output: ['test_key_2.pkl', 'subfolder0/test_key_3.pkl']\n    ```\n\n  - `include_prefix` and `recursive` can be used simultaneously.\n\n  - Regular expression matching on keys can be performed with the `matches` parameter.\n      - You can account for your key prefix:\n          1. In the `path` argument (highly encouraged for the above reasons): `rv.list_objects(path='folder0/')`\n          2. Hard-coded as part of the regular expression in your `matches` argument: `rv.list_objects(matches='folder0/.*')`\n          3. or by accounting for it in the matching logic of your regular expression: `rv.list_objects(matches='f.*der0/.*')`\n\n      - When you are using both `path` and `matches` parameters, however, there is one situation you need to be cautious of:\n          1. Hard-coding the path in `path` and using `matches` to match on anything that comes _after_ the path works great: `rv.list_objects(path='folder0/', matches='other_.*.csv')`\n          2. Hard-coding the path in `path` and including the hard-coded path in `matches` works fine, but is discouraged for a number of reasons: `rv.list_objects(path='folder0/', matches='folder0/other_.*.csv')`\n          3. What **will not** work is hard-coding the path in `path` and dynamically matching it in `matches`: `rv.list_objects(path='folder0/', matches='f.*der0/other_.*.csv')`\n              - This is because including the path in the regular expression interferes with the logic of the function. When you provide the hard-coded path both in `path` and in the beginning of `matches`, it can be detected and removed from the regular expression, but there is no definitive way to do this when you are matching on it.\n\n      - So, in general, try to separate the keep `path` and `matches` entirely separate if at all possible.\n\n2. Existence checks<br>\nAs an extension of listing operations, `rivet` can check if an object exists at\na specific S3 key. Note that for existence to be `True`, there must be an\n_exact_ match with the key provided\n\nUsing the following bucket structure:\n```\ntest_bucket\n|---- test_key_0.csv\n```\n```\nimport rivet as rv\n\nrv.exists('test_key_0.csv', bucket='test_bucket')\nOutput: True\n\nrv.exists('test_key_1.csv', bucket='test_bucket')\nOutput: False\n\nrv.exists('test_key_.csv', bucket='test_bucket')\nOutput: False\n```\n\n3. Copying<br>\nIt is possible to copy a file from one location in S3 to another using `rivet`.\nThis function is not configurable - it only takes a source and destination key and bucket.\n```\nimport rivet as rv\n\nrv.copy(source_path='test_path/df.csv',\n        dest_path='test_path_destination/df.csv',\n        source_bucket='test_bucket',\n        dest_bucket='test_bucket_destination')\n```\n\n### Session-Level Configuration\n`rivet` outputs certain messages to the screen to help interactive users\nmaintain awareness of what is being performed behind-the-scenes. If this\nis not desirable (as may be the case for notebooks, pipelines, usage of\n`rivet` within other packages, etc.), all non-logging output can be\ndisabled with `rv.set_option('verbose', False)`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neighborhoods/rivet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rivet",
    "package_url": "https://pypi.org/project/rivet/",
    "platform": "",
    "project_url": "https://pypi.org/project/rivet/",
    "project_urls": {
      "Homepage": "https://github.com/neighborhoods/rivet"
    },
    "release_url": "https://pypi.org/project/rivet/1.6.0/",
    "requires_dist": [
      "boto3 (>=1.10.0)",
      "pandas (>=0.25.3)",
      "pandavro (>=1.6)",
      "pyarrow (>=3.0.0)"
    ],
    "requires_python": "",
    "summary": "A Python-to-S3 interface with added convenience features.",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11350152,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cdf9bd64ea14e051a31de0df54a7e1f1b70ebd3a172b791edc6a8a94a6b43fa",
          "md5": "67e70363d451cebac6b26de8dc1ebe69",
          "sha256": "5cb36bf81d3a6a855cbbf16cec563b7dd2ccd51688c7c6f70c12e7039a65b161"
        },
        "downloads": -1,
        "filename": "rivet-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67e70363d451cebac6b26de8dc1ebe69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 552,
        "upload_time": "2017-11-10T20:34:10",
        "upload_time_iso_8601": "2017-11-10T20:34:10.459930Z",
        "url": "https://files.pythonhosted.org/packages/3c/df/9bd64ea14e051a31de0df54a7e1f1b70ebd3a172b791edc6a8a94a6b43fa/rivet-0.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20b3421c48c4065da81267831679b20c8e2848a4a2f8883d9f5bfb8052751595",
          "md5": "ca3f93eb9e2f5db0f700a727e21ff5ac",
          "sha256": "2d95d2f78dd7773cd4a238ba8aab49662e5208078b07b2e0836a1cb654d4fbe7"
        },
        "downloads": -1,
        "filename": "rivet-1.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca3f93eb9e2f5db0f700a727e21ff5ac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16947,
        "upload_time": "2021-09-02T19:35:06",
        "upload_time_iso_8601": "2021-09-02T19:35:06.529585Z",
        "url": "https://files.pythonhosted.org/packages/20/b3/421c48c4065da81267831679b20c8e2848a4a2f8883d9f5bfb8052751595/rivet-1.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58c344cbfea37c674cca411b095b0d512c7d4c350a40de1088cc120437219507",
          "md5": "897f8c9494709e5896208182fa9b8a14",
          "sha256": "b19f047a70fea46baf012eb5791bbc44401f467b28601b4926464320e8afbdf6"
        },
        "downloads": -1,
        "filename": "rivet-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "897f8c9494709e5896208182fa9b8a14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19520,
        "upload_time": "2021-09-02T19:35:07",
        "upload_time_iso_8601": "2021-09-02T19:35:07.794871Z",
        "url": "https://files.pythonhosted.org/packages/58/c3/44cbfea37c674cca411b095b0d512c7d4c350a40de1088cc120437219507/rivet-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20b3421c48c4065da81267831679b20c8e2848a4a2f8883d9f5bfb8052751595",
        "md5": "ca3f93eb9e2f5db0f700a727e21ff5ac",
        "sha256": "2d95d2f78dd7773cd4a238ba8aab49662e5208078b07b2e0836a1cb654d4fbe7"
      },
      "downloads": -1,
      "filename": "rivet-1.6.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca3f93eb9e2f5db0f700a727e21ff5ac",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16947,
      "upload_time": "2021-09-02T19:35:06",
      "upload_time_iso_8601": "2021-09-02T19:35:06.529585Z",
      "url": "https://files.pythonhosted.org/packages/20/b3/421c48c4065da81267831679b20c8e2848a4a2f8883d9f5bfb8052751595/rivet-1.6.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58c344cbfea37c674cca411b095b0d512c7d4c350a40de1088cc120437219507",
        "md5": "897f8c9494709e5896208182fa9b8a14",
        "sha256": "b19f047a70fea46baf012eb5791bbc44401f467b28601b4926464320e8afbdf6"
      },
      "downloads": -1,
      "filename": "rivet-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "897f8c9494709e5896208182fa9b8a14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19520,
      "upload_time": "2021-09-02T19:35:07",
      "upload_time_iso_8601": "2021-09-02T19:35:07.794871Z",
      "url": "https://files.pythonhosted.org/packages/58/c3/44cbfea37c674cca411b095b0d512c7d4c350a40de1088cc120437219507/rivet-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}