{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Verbit Streaming Python SDK\n\n## Overview\n\nThis package is a Python SDK for Verbit's Streaming Transcription API.\nIt can also be used as a reference implementation for porting to other programming languages.\nYou can use it as-is (see installation instructions below), or use it as an example for implementing your own custom client.\n\nThe package includes a Python client for streaming media and getting responses from Verbit's Streaming Speech Recognition services via a WebSocket connection.\n\n## Installation\n\nTo install this package run:\n\n    pip install --upgrade verbit-streaming-sdk\n\n### Requirements\n\n- Python 3.8+\n\n## Usage\n\n### Verbit API key\nTo access Verbit's Streaming Speech Recognition services an API key (customer token) should be obtained by sending an email request to the following address: api@verbit.ai  \n\n### Ordering API\nIn order to use Verbit's Streaming Speech Recognition services, you must place an order using Verbit's Ordering API. Your request to the Ordering API must specify that the desired input and/or output schemes are streaming through a WebSocket. Upon successful placement of the order, you will be issued a WebScoket URL, composed of the base streaming API URL and your order's token. The URL, together with the customer token, will be used to initiate a WebSocket connection.\n\nThese two APIs and their respective SDKs are separated on purpose because placing orders to Verbit's Transcription services does not necessarily imply media streaming (you might want to upload a file instead).\nAlso, the services which operate order placement and the actual streaming of media are commonly distinct, therefore we find it useful to separate the SDKs to allow maximal flexibility for our customers.\n\nFor further details regarding the Ordering API, please refer to the documentation here: [Ordering API](https://platform.verbit.co/api_docs).\n\n### Creating a WebSocketStreamingClient\n\nCreate the client, and pass in the `Customer Token` as detailed above:\n\n```python\nfrom verbit.streaming_client import WebSocketStreamingClient\n\nclient = WebSocketStreamingClient(customer_token=\"CUSTOMER TOKEN\")\n```\n\n### Streaming media via WebSocket\n\nCreate a generator function which yields chunks of audio (objects supporting the `bytes-like` interface).\nThe `WebSocketStreamingClient` will use your generator as input, iterating it and sending each audio chunk to the Speech Recognition service.\n\n**Important: The Speech Recognition service expects the audio chunks to arrive at a realtime pace, or slower. Faster than realtime pace may cause the service to behave unexpectedly.**\n\n\n#### Example\n\nThe following example reads audio from a WAV file and streams it to the Speech Recognition Service (Note: the example assumes that the customer token and WebSocket URL have been obtained via their respective API calls):\n\n```python\nimport wave\nfrom math import ceil\nfrom time import sleep\nfrom verbit.streaming_client import WebSocketStreamingClient, MediaConfig, ResponseType\n\nCHUNK_DURATION_SECONDS = 0.1\nAUDIO_FILENAME = 'example.wav'\n\ndef media_generator_wavefile(filename, chunk_duration):\n    \"\"\"\n    Example generator, for streaming a 'WAV' audio-file, simulating realtime playback-rate using sleep()\n    \"\"\"\n\n    with wave.open(str(filename), 'rb') as wav:\n        nchannels, samplewidth, sample_rate, nframes, _, _ = wav.getparams()\n        samples_per_chunk = ceil(chunk_duration * sample_rate)\n        chunk_bytes = wav.readframes(samples_per_chunk)\n        while chunk_bytes:\n            yield chunk_bytes\n            chunk_bytes = wav.readframes(samples_per_chunk)\n            sleep(chunk_duration)\n\nmedia_generator = media_generator_wavefile(AUDIO_FILENAME, CHUNK_DURATION_SECONDS)\n\nmedia_config = MediaConfig(format='S16LE',      # signed 16-bit little-endian PCM\n                           num_channels=1,      # number of audio channels\n                           sample_rate=16000,   # in Hz\n                           sample_width=2)      # in bytes\n\nresponse_types = ResponseType.Transcript | ResponseType.Captions\n\nclient = WebSocketStreamingClient(customer_token=\"CUSTOMER TOKEN\")\n\nresponse_generator = client.start_stream(\n   ws_url=\"WEBSOCKET URL\",\n   media_generator=media_generator,\n   media_config=media_config,\n   response_types=response_types)\n```\n\n### Providing media via an external source\n\nIt is possible to use an external media source to provide media to the Speech Recognition Service.\nTo do so, you need to specify the relevant input method when booking the session via Verbit's Ordering API.\n\nIn such a scenario, you should **not** provide a media generator to the `WebSocketStreamingClient`. \nConnecting the `WebSocketStreamingClient` to the Speech Recognition Service will initiate the session\nand signal the server to start consuming media from the external media source.\nTherefore, **you should only connect the `WebSocketStreamingClient` to the service after the external media source is ready.**\n\n#### Example\n\nThe following example connects to the Speech Recognition Service without providing a media generator:\n\n```python\nfrom verbit.streaming_client import WebSocketStreamingClient, ResponseType\n\nresponse_types = ResponseType.Transcript | ResponseType.Captions\n\nclient = WebSocketStreamingClient(customer_token=\"CUSTOMER TOKEN\")\n\nresponse_generator = client.start_with_external_source(ws_url=\"WEBSOCKET URL\", response_types=response_types)\n```\n\n\n### Getting responses\n\nThe client's `start_stream()` and `start_with_external_source()` methods return a generator which can be iterated to fetch the Speech Recognition responses:\n```python\n# get recognition responses\nprint('Waiting for responses ...')\nfor response in response_generator:\n    resp_type = response['response']['type']\n    alternatives = response['response']['alternatives']\n    alt0_transcript = alternatives[0]['transcript']\n    print(f'{resp_type}: {alt0_transcript}')\n```\n\n#### End of Stream\nWhen the media generator is exhausted, the client sends an End-of-Stream (non-binary) message to the service.\n\nIn a scenario where the media is coming from an external source, it is the user's responsibility to send the End-of-Stream message to the service.\n\nThe End-of-Stream message can be sent using the `send_eos_event()` method which internally sends the following payload:\n```\n{\n   \"event\": \"EOS\"\n}\n```\n\n### Responses\n\nResponses received through the WebSocket are JSON objects with a specific schema (a full description of which can be found in [examples/responses/schema.md](https://github.com/verbit-ai/verbit-streaming-python-sdk/blob/main/examples/responses/schema.md)).\nThere are two types of responses - \"transcript\" and \"captions\":\n\n1. **Transcript**: this type of response contains the recognized words since the beginning of the current utterance. Like in real human speech, the stream of words is segmented into utterances in automatic speech recognition. An utterance is recognized incrementally, processing more of the incoming audio at each step. Each utterance starts at a specific start-time and extends its end-time with each step, yielding the most updated result.\nNote that sequential updates for the same utterance will overlap, each response superseding the previous one - until a response signaling the end of the utterance is received (having `is_final == True`).\nThe `alternatives` array might contain different hypotheses, ordered by confidence level.\n\n    Example \"transcript\" responses can be found in [examples/responses/transcript.md](https://github.com/verbit-ai/verbit-streaming-python-sdk/blob/main/examples/responses/transcript.md).\n\n\n2. **Captions**: this type of response contains the recognized words within a specific time window. In contrast to the incremental nature of \"transcript\"-type responses, the \"captions\"-type responses are non-overlapping and consecutive. \nOnly one \"captions\"-type response covering a specific time-span in the audio will be returned (or none, if no words were uttered).\nThe `is_final` field is always `True` because no updates will be output for the same time-span. The `alternatives` array will always have only one item for captions.\n\n    Example \"captions\" responses can be found in [examples/responses/captions.md](https://github.com/verbit-ai/verbit-streaming-python-sdk/blob/main/examples/responses/captions.md).\n\n### Error handling and recovery\n\n#### Initial connection\nIn case the WebSocket client fails to establish the initial connection with the service, e.g. due to temporary unavailability, \nit will perform exponential retry, up to [`max_connection_retry_seconds`](https://github.com/verbit-ai/verbit-streaming-python-sdk/blob/main/verbit/streaming_client.py#L108) (configurable).\n\n#### During a session\nIn case the connection to the service is dropped during a session, the behavior of the WebSocket client will depend on the implementation chosen by the user.\nThis client SDK contains two implementations, which have the same interface, but differ in their error handling behavior:\n1. `WebSocketStreamingClientSingleConnection` - the base implementation; does not attempt to reconnect in case the connection was dropped prematurely. It can be useful, for example, if you would like to implement your own connection error handling logic.\n2. `WebSocketStreamingClient` - the default implementation; will attempt to reconnect in case the connection was closed prematurely, as many times as needed, until the final response is received (or some non-retryable error occurrs).\n\n### Testing\nThis client SDK comes with a set of unit-tests that can be used to ensure the correct functionality of the streaming client.\n\nTo run the unit-tests:\n```bash\npip install pytest\npip install -r tests/requirements_test.txt\npytest\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/verbit-ai/verbit-streaming-python-sdk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "verbit-streaming-sdk",
    "package_url": "https://pypi.org/project/verbit-streaming-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/verbit-streaming-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/verbit-ai/verbit-streaming-python-sdk"
    },
    "release_url": "https://pypi.org/project/verbit-streaming-sdk/0.10.1/",
    "requires_dist": [
      "websocket-client (~=1.2.3)",
      "tenacity (~=8.0.1)",
      "requests (~=2.28.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "Client SDK for Verbit's Streaming Speech Recognition services",
    "version": "0.10.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15772979,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23b134735fd339128bb061bfd8cc336003174ed8768d77b08ea5a88bc5ed550c",
          "md5": "6c28b6c753fb6701e6866c1d1ce13513",
          "sha256": "e702a047cb19a22e6f1cd9d57d833f8710312b21b9c595adbf238d90269c935f"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c28b6c753fb6701e6866c1d1ce13513",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11462,
        "upload_time": "2022-09-15T07:31:50",
        "upload_time_iso_8601": "2022-09-15T07:31:50.716869Z",
        "url": "https://files.pythonhosted.org/packages/23/b1/34735fd339128bb061bfd8cc336003174ed8768d77b08ea5a88bc5ed550c/verbit_streaming_sdk-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72d50af67e97fff660531f68bf343bfdaf78034b6a38c608bce8eeb37223fe91",
          "md5": "13c556e4878265258f51bdf5d3ead840",
          "sha256": "ad79efd2cdc4f8ac7696acd44488c972f1adc646a7789fbadb0d5c09b7142ac7"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13c556e4878265258f51bdf5d3ead840",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14366,
        "upload_time": "2022-09-15T07:31:52",
        "upload_time_iso_8601": "2022-09-15T07:31:52.033181Z",
        "url": "https://files.pythonhosted.org/packages/72/d5/0af67e97fff660531f68bf343bfdaf78034b6a38c608bce8eeb37223fe91/verbit-streaming-sdk-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bbb8f6bba17538315eda76ea9e686d5f63dbbf123c8d7d9954f12909cac3685",
          "md5": "f8f2f3ad9494804f6b95e43046398465",
          "sha256": "6d3ada256ee4cdb4e5db4032c43b9cf639eb67d0923b0d664a0760965d20924f"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.10.0.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8f2f3ad9494804f6b95e43046398465",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11563,
        "upload_time": "2022-09-13T09:23:39",
        "upload_time_iso_8601": "2022-09-13T09:23:39.540930Z",
        "url": "https://files.pythonhosted.org/packages/7b/bb/8f6bba17538315eda76ea9e686d5f63dbbf123c8d7d9954f12909cac3685/verbit_streaming_sdk-0.10.0.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f2c54d540d9ea48e6c1adb52cfff946fd96bfa14cf488571cefbb6dfc203b4d",
          "md5": "18b8148bb682abb28617994034410947",
          "sha256": "c1857e778ed70319db54365f7e5681d6c7a403feac93dd9c080b94db518c26a1"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.10.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "18b8148bb682abb28617994034410947",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14471,
        "upload_time": "2022-09-13T09:23:42",
        "upload_time_iso_8601": "2022-09-13T09:23:42.646197Z",
        "url": "https://files.pythonhosted.org/packages/4f/2c/54d540d9ea48e6c1adb52cfff946fd96bfa14cf488571cefbb6dfc203b4d/verbit-streaming-sdk-0.10.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f143e4e9462050d42421022533dfb241052204c9f0bdeffdc4047ef33bb1a294",
          "md5": "f8cdacf03c80fed4f67c7b37d8e66087",
          "sha256": "10aead7edbd3bd06a55f43376a7f65ee2f37bac0c9cb881829699446db47834d"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8cdacf03c80fed4f67c7b37d8e66087",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11726,
        "upload_time": "2022-11-15T09:57:41",
        "upload_time_iso_8601": "2022-11-15T09:57:41.914187Z",
        "url": "https://files.pythonhosted.org/packages/f1/43/e4e9462050d42421022533dfb241052204c9f0bdeffdc4047ef33bb1a294/verbit_streaming_sdk-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0c5461122be9df71503f06bf6ee86d87f7e056c96303cc6499c9d2cc5fe451a",
          "md5": "a5f34dde2ee97aaad9036f4ebef8c292",
          "sha256": "580564803f3ba0cd9a7b7b45690faa455285bd9d5796978b4ad682f3a5d14a0e"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5f34dde2ee97aaad9036f4ebef8c292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15115,
        "upload_time": "2022-11-15T09:57:44",
        "upload_time_iso_8601": "2022-11-15T09:57:44.641675Z",
        "url": "https://files.pythonhosted.org/packages/d0/c5/461122be9df71503f06bf6ee86d87f7e056c96303cc6499c9d2cc5fe451a/verbit-streaming-sdk-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfd536924998e0568df4f6d2a5a38b8acef861fad5a99803a20f92674b322307",
          "md5": "5306d33565d6a69278dd287bae2a2a9a",
          "sha256": "433064b6a008b3ce02f6c973619e0aa1ca730f8a1cb47a9f1517ba8ce9a360c6"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.8.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "5306d33565d6a69278dd287bae2a2a9a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.8",
        "size": 7350,
        "upload_time": "2022-02-09T11:21:13",
        "upload_time_iso_8601": "2022-02-09T11:21:13.694273Z",
        "url": "https://files.pythonhosted.org/packages/cf/d5/36924998e0568df4f6d2a5a38b8acef861fad5a99803a20f92674b322307/verbit_streaming_sdk-0.8.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0b9f6e4d68c4de6b5347e154cd18e415f581c984813bd045ff9022d9b89f9af",
          "md5": "2f4e598c26574c59a303cbd6d1e2de31",
          "sha256": "fa552eca91885a5f643641f878a57e77e8e4a522dc9556852b9c2b42af192bd7"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f4e598c26574c59a303cbd6d1e2de31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7118,
        "upload_time": "2022-02-09T11:21:15",
        "upload_time_iso_8601": "2022-02-09T11:21:15.945213Z",
        "url": "https://files.pythonhosted.org/packages/a0/b9/f6e4d68c4de6b5347e154cd18e415f581c984813bd045ff9022d9b89f9af/verbit-streaming-sdk-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8943c26c3c951577b2533503d169822955fa8d182af4ec624aa14c33432444ee",
          "md5": "4c3de7d66ba4045d896d3cec28bb6f27",
          "sha256": "0e34fb0a874d247cc94fa6758e18c0316e2ba02bdfaa23108eccfa0ac7e1a3e3"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.8.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c3de7d66ba4045d896d3cec28bb6f27",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.8",
        "size": 7624,
        "upload_time": "2022-02-24T09:02:29",
        "upload_time_iso_8601": "2022-02-24T09:02:29.203249Z",
        "url": "https://files.pythonhosted.org/packages/89/43/c26c3c951577b2533503d169822955fa8d182af4ec624aa14c33432444ee/verbit_streaming_sdk-0.8.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c7761d8ff6d3dfac36060c01529aad9cf27043479e28f121a7ae535ecee9306",
          "md5": "eba1f158a7a7ffb0c8c6b18c5b8b8ce7",
          "sha256": "d188e10ef4f7c287a84d788dbbcff72227f22bb73601f1a10c8e7e3d4ff033a1"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eba1f158a7a7ffb0c8c6b18c5b8b8ce7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7428,
        "upload_time": "2022-02-24T09:02:31",
        "upload_time_iso_8601": "2022-02-24T09:02:31.418220Z",
        "url": "https://files.pythonhosted.org/packages/7c/77/61d8ff6d3dfac36060c01529aad9cf27043479e28f121a7ae535ecee9306/verbit-streaming-sdk-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cf1502b767032d6fba58eed06606d8a7133c7955f502e4025c35ca5acbd5adc",
          "md5": "6de9d5ee1b76628ae26fcdfcfc6ea45b",
          "sha256": "3bdaeee9cd93bfb458ef52766cacb0d6a5587202038ad3f2b07c568cd4351f86"
        },
        "downloads": -1,
        "filename": "verbit_streaming_sdk-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6de9d5ee1b76628ae26fcdfcfc6ea45b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10992,
        "upload_time": "2022-05-01T08:06:20",
        "upload_time_iso_8601": "2022-05-01T08:06:20.053478Z",
        "url": "https://files.pythonhosted.org/packages/4c/f1/502b767032d6fba58eed06606d8a7133c7955f502e4025c35ca5acbd5adc/verbit_streaming_sdk-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bdce4893d02841087c8f4089dfcdffc62b0ef0f8423f4c2b740ce0dbcd05789",
          "md5": "d1a9728cf30f6af4a1bd3ce8940378e0",
          "sha256": "0b20483f31e2ab827704fa132dbc47ba293a6af9fa997198315cae72a696ad3d"
        },
        "downloads": -1,
        "filename": "verbit-streaming-sdk-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d1a9728cf30f6af4a1bd3ce8940378e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14131,
        "upload_time": "2022-05-01T08:06:22",
        "upload_time_iso_8601": "2022-05-01T08:06:22.142749Z",
        "url": "https://files.pythonhosted.org/packages/8b/dc/e4893d02841087c8f4089dfcdffc62b0ef0f8423f4c2b740ce0dbcd05789/verbit-streaming-sdk-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f143e4e9462050d42421022533dfb241052204c9f0bdeffdc4047ef33bb1a294",
        "md5": "f8cdacf03c80fed4f67c7b37d8e66087",
        "sha256": "10aead7edbd3bd06a55f43376a7f65ee2f37bac0c9cb881829699446db47834d"
      },
      "downloads": -1,
      "filename": "verbit_streaming_sdk-0.10.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f8cdacf03c80fed4f67c7b37d8e66087",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11726,
      "upload_time": "2022-11-15T09:57:41",
      "upload_time_iso_8601": "2022-11-15T09:57:41.914187Z",
      "url": "https://files.pythonhosted.org/packages/f1/43/e4e9462050d42421022533dfb241052204c9f0bdeffdc4047ef33bb1a294/verbit_streaming_sdk-0.10.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0c5461122be9df71503f06bf6ee86d87f7e056c96303cc6499c9d2cc5fe451a",
        "md5": "a5f34dde2ee97aaad9036f4ebef8c292",
        "sha256": "580564803f3ba0cd9a7b7b45690faa455285bd9d5796978b4ad682f3a5d14a0e"
      },
      "downloads": -1,
      "filename": "verbit-streaming-sdk-0.10.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a5f34dde2ee97aaad9036f4ebef8c292",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 15115,
      "upload_time": "2022-11-15T09:57:44",
      "upload_time_iso_8601": "2022-11-15T09:57:44.641675Z",
      "url": "https://files.pythonhosted.org/packages/d0/c5/461122be9df71503f06bf6ee86d87f7e056c96303cc6499c9d2cc5fe451a/verbit-streaming-sdk-0.10.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}