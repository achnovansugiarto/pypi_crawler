{
  "info": {
    "author": "Balazs Eszes",
    "author_email": "c4deszes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent"
    ],
    "description": "# Pytest Variant\n\n[![PyPI version](https://badge.fury.io/py/pytest-variant.svg)](https://pypi.org/project/pytest-variant/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytest-variant.svg)](https://pypi.org/project/pytest-variant/)\n![GitHub last commit](https://img.shields.io/github/last-commit/c4deszes/pytest-variant)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n> pytest-variant is a plugin for pytest that allows handling variants in test cases.\n> The plugin can deselect test cases that are only meant for certain variants or pass down the\n> variant settings to test cases.\n\n## Installation\n\nYou can install this library from PyPI using pip.\n\n`pip install pytest-variant`\n\n## Usage\n\n### Define variant attributes\n\nParameters can be loaded from INI files from the `variant` section. To load from INI file use\n`pytest --variant INI:config.ini`.\n\nAn example of such `.ini` file.\n\n```ini\n[variant]\nos = win32\narch = x86\n```\n\n---\n\nParameters can also be loaded from JSON files, they are loaded as a dictionary using `json.load`.\nTo load from JSON file use `pytest --variant JSON:config.json`.\n\nAn example of a `.json` file.\n\n```json\n{\n    \"os\": \"win32\",\n    \"arch\": \"x86\"\n}\n```\n\n---\n\nVariants can also be inferred from environment variables using `pytest --variant ENV:<prefix>`.\nWhen the prefix is empty all environment variables will be loaded, otherwise it will only load the\nvariables that start with the prefix and the attribute names will have the prefix stripped.\n\nFor example `pytest --variant ENV:VARIANT_` in a context where `VARIANT_OS=win32` and\n`VARIANT_ARCH=x86` exist then the loaded variant will be:\n\n```json\n{\n    \"OS\": \"win32\",\n    \"ARCH\": \"x86\"\n}\n```\n\nNote that on Windows systems environment variable names are case insensitive and they always have to\nbe referred to using capital letters.\n\n---\n\nLastly the internal variant variable can be overwritten and therefore it's possible to implement\ncustom configuration and loading mechanisms. This can be done by using a custom\n[pytest hook](https://docs.pytest.org/en/6.2.x/_modules/_pytest/hookspec.html#pytest_configure).\n\n```python\ndef pytest_configure(config):\n    config.variant = {\n        'os': 'win32',\n        'arch': 'x86'\n    }\n```\n\n### Accessing variant attributes\n\nThe plugin automatically registers a fixture called `variant`, which is a dictionary containing the\nattributes that were loaded. You can use these to make a test behave a certain way given a variant\nor you could conditionally skip the test case.\n\n```python\ndef test_case1(variant):\n    if variant['os'] == 'win32':\n        # windows specific behavior\n        pass\n    else:\n        pass\n```\n\n### Marking tests\n\nThere are two styles of marking tests for variant selection.\n\nWhen a dictionary is passed as the marker's argument the value of each key must match the currently\nactive variant's. Missing keys are ignored, you can think of each supplied key as an `and`\noperation, and providing a list as a key as an `or` operation.\n\n```python\ndef pytest_configure(config):\n    config.variant = {\n        'os': 'win32',\n        'arch': 'x86'\n    }\n\n# Will be selected\n@pytest.mark.variant({'os': 'win32'})\ndef test_case1():\n    pass\n\n# Will be deselected\n@pytest.mark.variant({'os': 'ubuntu'})\ndef test_case2():\n    pass\n\n# Will be selected\n@pytest.mark.variant({'os': 'win32', 'arch': 'x86'})\ndef test_case3():\n    pass\n\n# Will be deselected\n@pytest.mark.variant({'os': 'win32', 'arch': 'x64'})\ndef test_case4():\n    pass\n\n# Will be selected\n@pytest.mark.variant({'os': 'win32', 'arch': ['x86', 'x64']})\ndef test_case5():\n    pass\n```\n\nWhen a string is passed it's assumed to be a Python expression, which when evaluates to `True`\nindicates that the test should be selected. In the context of the expression all attributes are\navailable.\n\n```python\ndef pytest_configure(config):\n    config.variant = {\n        'os': 'win32',\n        'arch': 'x86'\n    }\n\n# Will be selected\n@pytest.mark.variant(\"os == 'win32'\")\ndef test_case1():\n    pass\n\n# Will be deselected\n@pytest.mark.variant(\"os == 'win32' and arch == 'x64'\")\ndef test_case2():\n    pass\n```\n\n## Why not just use custom marks or skips?\n\nPytest marks allow you to filter the tests based on the active marks, this is good when you have a\nfew test sets and you can control what marks are being used. For example you have tests specific to\nWindows, you could use `@pytest.mark.win32` but this is hard to scale up, if you want to use integer\ntypes as variant attributes then it becomes awkward to use.\n\nThe `skipif` mark can be a decent option however when used with a reporting tool like Jenkins they\nwill show up as skipped tests and looking at the report it won't be evident that a test shouldn't be\nperformed at all for the specific variant.\n\nTruly the only difference between custom marks and this plugin is that pytest marks are in a list,\nwhile variant attributes are in a dictionary.\n\n## License\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/c4deszes/pytest-variant",
    "keywords": "pytest,variant",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-variant",
    "package_url": "https://pypi.org/project/pytest-variant/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-variant/",
    "project_urls": {
      "Documentation": "https://github.com/c4deszes/pytest-variant",
      "Homepage": "https://github.com/c4deszes/pytest-variant",
      "Source Code": "https://github.com/c4deszes/pytest-variant"
    },
    "release_url": "https://pypi.org/project/pytest-variant/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Variant support for Pytest",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14047650,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7e3a5e514ad97b3161575da06334ee44985f2d637be43a00472c46a3c7e93d2",
          "md5": "65219bf974e18305ea23b37f82c82a8b",
          "sha256": "508c65cf9136a3d6243f06e48317a8566d3132a9ef06cf4b3b49bc64fcbbea9b"
        },
        "downloads": -1,
        "filename": "pytest_variant-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65219bf974e18305ea23b37f82c82a8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8317,
        "upload_time": "2021-06-20T13:00:57",
        "upload_time_iso_8601": "2021-06-20T13:00:57.660248Z",
        "url": "https://files.pythonhosted.org/packages/e7/e3/a5e514ad97b3161575da06334ee44985f2d637be43a00472c46a3c7e93d2/pytest_variant-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a8a7b24ea7d2d168b8d1f59b0806a08f7d26a1b4be8192c8eeb7cc2336de24",
          "md5": "e6346d6e84e161b67a06c37ab8315009",
          "sha256": "6f5ce9701c74428bf61395fb7135550f46f90675fd9cc08174d41baae470496e"
        },
        "downloads": -1,
        "filename": "pytest-variant-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6346d6e84e161b67a06c37ab8315009",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6203,
        "upload_time": "2021-06-20T13:00:59",
        "upload_time_iso_8601": "2021-06-20T13:00:59.287817Z",
        "url": "https://files.pythonhosted.org/packages/c7/a8/a7b24ea7d2d168b8d1f59b0806a08f7d26a1b4be8192c8eeb7cc2336de24/pytest-variant-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7858ae9b16386fa4eb0d61f194818f6539f4311a6397cd9effedc1bbcfc1760",
          "md5": "169c0520fa1b454be606b25a19a5f708",
          "sha256": "f97c603b973513d9bbfb806d837db288a401715d9bb11552b6a5e07c820de584"
        },
        "downloads": -1,
        "filename": "pytest_variant-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "169c0520fa1b454be606b25a19a5f708",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8459,
        "upload_time": "2022-06-06T17:32:14",
        "upload_time_iso_8601": "2022-06-06T17:32:14.746002Z",
        "url": "https://files.pythonhosted.org/packages/b7/85/8ae9b16386fa4eb0d61f194818f6539f4311a6397cd9effedc1bbcfc1760/pytest_variant-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e8f9d0d129f0a58b65b911f6534cc92a2549d1c778f680942bc3f9b6931b884",
          "md5": "ee275ffa6a434fd3e48f46c1ccd92a17",
          "sha256": "c5e8469dd3be37cfc9805f2c490c8ff68148539288487bc29665e79bc00846d6"
        },
        "downloads": -1,
        "filename": "pytest-variant-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee275ffa6a434fd3e48f46c1ccd92a17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6338,
        "upload_time": "2022-06-06T17:32:16",
        "upload_time_iso_8601": "2022-06-06T17:32:16.134523Z",
        "url": "https://files.pythonhosted.org/packages/5e/8f/9d0d129f0a58b65b911f6534cc92a2549d1c778f680942bc3f9b6931b884/pytest-variant-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7858ae9b16386fa4eb0d61f194818f6539f4311a6397cd9effedc1bbcfc1760",
        "md5": "169c0520fa1b454be606b25a19a5f708",
        "sha256": "f97c603b973513d9bbfb806d837db288a401715d9bb11552b6a5e07c820de584"
      },
      "downloads": -1,
      "filename": "pytest_variant-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "169c0520fa1b454be606b25a19a5f708",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8459,
      "upload_time": "2022-06-06T17:32:14",
      "upload_time_iso_8601": "2022-06-06T17:32:14.746002Z",
      "url": "https://files.pythonhosted.org/packages/b7/85/8ae9b16386fa4eb0d61f194818f6539f4311a6397cd9effedc1bbcfc1760/pytest_variant-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e8f9d0d129f0a58b65b911f6534cc92a2549d1c778f680942bc3f9b6931b884",
        "md5": "ee275ffa6a434fd3e48f46c1ccd92a17",
        "sha256": "c5e8469dd3be37cfc9805f2c490c8ff68148539288487bc29665e79bc00846d6"
      },
      "downloads": -1,
      "filename": "pytest-variant-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ee275ffa6a434fd3e48f46c1ccd92a17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6338,
      "upload_time": "2022-06-06T17:32:16",
      "upload_time_iso_8601": "2022-06-06T17:32:16.134523Z",
      "url": "https://files.pythonhosted.org/packages/5e/8f/9d0d129f0a58b65b911f6534cc92a2549d1c778f680942bc3f9b6931b884/pytest-variant-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}