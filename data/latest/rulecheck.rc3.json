{
  "info": {
    "author": "Erik Shreve",
    "author_email": "e-shreve@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: C#",
      "Programming Language :: C++",
      "Programming Language :: Java",
      "Topic :: Utilities"
    ],
    "description": "![Python package](https://github.com/e-shreve/rulecheck/workflows/Python%20package/badge.svg)  ![Upload Python Package](https://github.com/e-shreve/rulecheck/workflows/Upload%20Python%20Package/badge.svg)\n\n# Rule Check\nRule Check (aka rulecheck or source rule check) is a command line system for running custom static analysis rules on C, C++, C#, and Java code. The original use case is checking a code base against coding style or coding standard rules. \n\nRule Check uses [srcml](https://www.srcml.org/) to parse the source code into XML and then invokes each rule's methods as appropriate to allow the rules to inspect any source code element of interest to the rule. This architecture minimizes duplicate parsing time and allows rule authors to focus on their rule logic instead of the logic needed to parse source code.\n\nFeatures include:\n* Parsing C, C++, C#, and Java source via srcml\n* Parsing C and C++ prior to preprocessor execution (thus viewing code as developers do)\n* Custom rules\n  * Groups of rules can be created and published in 'rulepacks'\n  * Projects can have custom rules within their own code base (no need to publish/install rules)\n  * Rules can have their own custom settings. Rule check will provide the settings to the rule via its standard config file format.\n* Multiple config file inputs\n  * Projects can use an hierarchical set of configurations allowing organizations to provide rules across projects\n* Supression of errors and warnings without modifying source code via ignore list input\n* Supression of errors and warnings with source code comments\n* Standardized output format for all rules\n* Speicifcation of sources to be analyzed via glob format or via stdin\n\n___\n\n### Contents\n___\n* [Installation](#installation)\n* [Running and Configuration](#running)\n* [Design Choices](#design)\n* [Resources](#resources)\n\nTo learn how to write your own rules, see [how to create rules](how_to_create_rules.md).\n___\n### Installation\n\nEnsure Python 3.6 or greater is present on the system (see below) and then run:\n```\ngit clone https://github.com/e-shreve/rulecheck\ncd rulecheck\npip install .\n```\n\n#### Dependencies\n\n##### Python\nPython 3.6 or greater is required.\n\n##### srcml\nsrcml is a source code to xml parser that can parse C, C++, C Preprocessor, C#, and Java code. The pip install of rulecheck will not\ninstall srcml. Find installation files at https://www.srcml.org/ and install on your system.\nVersion required: 1.0.0 or greater.\nFor easiest use, srcml should be on the path. Otherwise, the path to srcml can be provided when starting rulecheck from the command line.\n\n##### lxml\nThe python xml library lxml is used over the built-in ElementTree library due to speed and additional functionality such as the ability\nto obtain the line number of tag from the source XML file. lxml has been available in Wheel install format since 2016\nand thus should not present an issue for users. lxml will be installed by pip automatically when insalling rulecheck.\n\n___\n### <a id=\"running\">Running and Configuration\n___\n\n```\nrulecheck --help\n```\n\n#### Selecting Rules\n\nRules are selected by specifying one or more rule configuration files on the command line, using the -c or --config option. To specify more than one configuration file, use the config option on the command line once for each configuration file to be read.\n\nNote that rule selection is additive across all configuration files specified. Thus, if config1.json activates ruleA and config2.json activates RuleB then both RuleA and RuleB will be active.\n\nExample of specifying more than one configuration file:\n\n```bash\nrulecheck -c config1.json -c config2.json ./src/**/*\n```\n\nRule configuration files are json files, with the following structure:\n\n```JSON\n{\n  \"rules\": [\n    {\n       \"name\" : \"rulepack1.ruleA\",\n       \"settings\" : {\n          \"opt1\" : \"dog\"\n       }\n    },\n    {\n       \"name\" : \"rulepack1.ruleB\",\n       \"settings\" : {\n          \"opt1\" : \"cat\"\n       }\n    }\n  ]\n}\n```\n\nAt the top level, an array named \"rules\" must be provided. Each member of this array is a rule object. \n\nEach rule object must consist of a \"name\" string. The name may contain '.' characters which are used to differentiate between \ncollections of rules known as rulepacks.\n\nOptionally, a rule object may include a settings object. The full list of settings supported depends\non the particular rule. However, all rules support the following settings:\n- werror: if value evaluates as true, it promotes all WARNINGS to ERRORS\n- verbose: if value evaluates as true, the rule may provide additional output on stdout\n\nTrue values are y, yes, t, true, on and 1; false values are n, no, f, false, off and 0. \n\nNote that rules *may* support being specified multiple times. For example, a rule for finding banned terms or words could support multiple instantiations each with a different word or term specified:\n\n```JSON\n{\n  \"rules\": [\n    {\n       \"name\" : \"rulepack1.bannedword\",\n       \"settings\" : {\n          \"word\" : \"master\"\n       }\n    },\n    {\n       \"name\" : \"rulepack1.bannedword\",\n       \"settings\" : {\n          \"word\" : \"slave\"\n       }\n    }\n  ]\n}\n```\n\nSome rules *may*, however, throw an error if configured more than once. Consult the documentation of a rule for specific usage instructions. \n\nTo prevent running the same rule multiple times, rulecheck will not load a rule twice if it has the *exact* same settings. In the following run, rulecheck will only load the bannedword rule twice, despite it being specified three times.\n\n```bash\nrulecheck -c config1.json -c config2.json ./src/**/*\n```\n\nWhere config 1.json contains:\n\n```JSON\n{\n  \"rules\": [\n    {\n       \"name\" : \"rulepack1.bannedword\",\n       \"settings\" : {\n          \"word\" : \"slave\"\n       }\n    }\n  ]\n}\n```\n\nAnd config2.json contains:\n\n```JSON\n{\n  \"rules\": [\n    {\n       \"name\" : \"rulepack1.bannedword\",\n       \"settings\" : {\n          \"word\" : \"master\"\n       }\n    },\n    {\n       \"name\" : \"rulepack1.bannedword\",\n       \"settings\" : {\n          \"word\" : \"slave\"\n       }\n    }\n  ]\n}\n```\n\nRulecheck's ability to load multiple configuration files and combine them supports a hierarchical configuration structure. For example, a company may provide a rule set and standard config at the organization level. A team may then apply additional rules and config file for all of their projects. Finally each project may have its own config file. Instead of needing to combine all three config files into a single set (and thus force updates to each project when a higher level policy is changed), rule check can be given all three config files and it takes care of combining the configurations.\n\n\n#### Specifying Files to Process\n\nThe files to process and/or the paths rulecheck will search to find files to process are provided on the command line as the last parameter (it must be the last parameter.) \nThe paths are specified in glob format. Recursive searches using '**' are supported. \nIn addition, the '?' (any character), '*' (any number of characters), and '[]' (character in range) wildcards are supported.\n\nMultiple files and paths to search can be specified by separating them with spaces. If a space is in a path, enclose the glob in quotation marks.\n\nAlternatively, the files or paths to check can be specified via stdin. Specify '-' as the final parameter to have rulecheck read the list in from stdin.\n\nWhen searching the paths specified, rulecheck will process any file found with one of the following case-sensitive extensions:\n.c, .h, .i, .cpp, .CPP, .cp, .hpp, .cxx, .hxx, .cc, .hh, .c++, .h++, .C, .H, .tcc, .ii, .java, .aj, .cs\n\nTo change the list of extensions rulecheck will parse when searching paths, use the -x or --extensions command line option.\n\nNote that extensions are case sensitive and .C and .H are by default treated as C++ source files whereas .c and .h are treated as C source files. \nTo change the language to extension mapping see the --register-ext option.\n\n#### Specifying Where Rule Scripts Are\n\nRules are encouraged to be installed onto the python path using a concept known as \"rulepacks.\" This is covered later in this document. \nHowever, there are situations where rules may not be installed to the python path. For example, when a rule is under development or when a rule is\ncreated for a single project and is kept in the same revision control system as the source being checked by the rule. For these situations, one or more\npaths to rules may be specified on the command line using the -r option. If more than one path is needed, repeat the option on the command line for\neach path.\n\nNote that the name of a rule specified in a configuration file may contain part of the path to the rule script itself. For example, if\n\n```JSON\n\t\"name\" : \"rulepack1.ruleA\"\n```\n\nis in a configuration file, rulecheck will look for a 'rulepack1/ruleA.py' script to load on the path. \n\n#### Using Ignore List Files\n\nA single ignore list file may be provided to rulecheck via the -i or --ignorelist command line option.\nIgnorelists are created by running rulecheck on the source with the -g or --generatehashes command line option,\ncapturing the rule violations to a file and then pruning that list to the list of violaions to be ignored.\nMore information can be found [later in this document](#ignore_lists).\n\n#### Options For Controlling srcml\n\n* '--srcml' to specify the path to the srcml binary. Use this option if srcml is not on the path.\n* '--tabs' specifies number of spaces to use when substituting tabs for spaces. This impacts the column numbers reported in rule messages.\n* '--register-ext' specifies language to extension mappings used by srcml.\n* '--srcml-args' allows for specification of additional options to srcml. Do not specify --tabs or -register-ext options here as they have their own dedicated options described above. This option must be provided within double quotation marks and must start with a leading space.\n\n\n#### Other Options\n\n* '--Werror' will promote all reported rule warnings to errors.\n* '--tabs' specifies number of spaces to use when substituting tabs for spaces. This impacts the column numbers reported in rule messages.\n* '-v' for verbose output.\n* '--version' prints the version of rulecheck and then exits.\n* '--help' prints a short help message and then exits.\n\n___\n### Waiving and Ignoring Rule Violations\n\nThere are two methods for telling rulecheck to ignore a rule finding for a particular file, line, or element of a file.\nThe first is to use comments in the source code file to instruct rulecheck on when to disable and reenable a rule.\nThe second is to use an \"ignore list\" which allows one to provide this information without modifying the source files.\nHowever, the ignore list method may require additional maintenance as the source code is changed compared to the use of\ncomments in the source code.\n\n### Source Comment Commands to Rulecheck\n\nA NORC comment is used to have rulecheck ignore violations reported for the same line the comment is on. The NORCNEXTLINE comment will cause rulecheck to ignore violations on the next line.\n\nBoth comments must include an open and closed parenthesis containing either the '\\*' character or a comma\nseparated list of rules to be ignored. Use of the '\\*' character will cause all rules to be suppressed.\n\nFor example:\n```C\n\n// Ignore all violations on the line:\nvoid myFunction1(int a); // NORC(*)\n\n// Ignore all violations on the next line:\n// NORCNEXTLINE(*)\nvoid myFunction2(int a); \n\n// Specific rules can be ignored:\n// NORCNEXTLINE(myrulepack.rule1, myrulepack.rule2)\nvoid myFunction3(int a); \n\n// Comments after the closing parenthesis may contain any text.\n// It is good practice to justify the suppression.\nvoid myFunction4(int a); // NORC(myrulepack.function\\_name\\_prefix): Function name required for backward compatibility.\n```\n\nNote that whitespace between NORC/NORCNEXTLINE and the opening parenthesis are not allowed.\n\n### <a id=\"ignore_lists\"></a>Ignore Lists\n\n- [ ] to be written (Feature is implemented.)\n\n___\n### Rulepacks\n\n- [ ] to be written\n\nThis section will describe the concept of rulepacks and provide a bit of the technical context for how they work (python path).\n\n___\n\n\n___\n### <a id=\"design\"></a>Design Choices\n___\n\nrulecheck intentionally does not support modification of the files parsed. Doing so would require rulecheck to \nrepeatedly run modified files through all rules until no new log messages were produced. However, a modification\nmade by one rule could trigger another rule to be violated. Thus, the execution might never terminate. In addition,\nmany coding standard rules that can be automatically fixed deal strictly with whitespace and there are already many\ntools and IDEs that support formatting of whitespace to any imaginable standard.\n___\n### Resources\n___\n* [srcml](https://www.srcml.org)\n* [srcml source](https://github.com/srcML/srcML)\n* [lxml](https://lxml.de/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/e-shreve/rulecheck",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rulecheck",
    "package_url": "https://pypi.org/project/rulecheck/",
    "platform": "",
    "project_url": "https://pypi.org/project/rulecheck/",
    "project_urls": {
      "Homepage": "https://github.com/e-shreve/rulecheck"
    },
    "release_url": "https://pypi.org/project/rulecheck/0.6.1/",
    "requires_dist": [
      "lxml"
    ],
    "requires_python": "",
    "summary": "Utility to check source code against coding convention rules.",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8176491,
  "releases": {
    "0.5.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54ee2137124e70f25b0a33df0e30b58b66d0dcf4b266fab51571309dd8a11a58",
          "md5": "fa73347d838860683875c1a2adb74005",
          "sha256": "4aa67d78bded7590dfc407d7af04bf8845b63a4b9b08ef6d5248b9128f189d79"
        },
        "downloads": -1,
        "filename": "rulecheck-0.5.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa73347d838860683875c1a2adb74005",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29602,
        "upload_time": "2020-09-05T01:41:31",
        "upload_time_iso_8601": "2020-09-05T01:41:31.084222Z",
        "url": "https://files.pythonhosted.org/packages/54/ee/2137124e70f25b0a33df0e30b58b66d0dcf4b266fab51571309dd8a11a58/rulecheck-0.5.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b4fe82d66be52ac37c5c9feb10abc78d961ce723d35511f24f4b185d8e4610",
          "md5": "cd60aded635585c4951cb63ae93b49ce",
          "sha256": "d4c970581c1934985aa7eff7afd8ef7c0de117c8688bbb62d88d9aee2f349a61"
        },
        "downloads": -1,
        "filename": "rulecheck-0.5.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cd60aded635585c4951cb63ae93b49ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27065,
        "upload_time": "2020-09-05T01:41:33",
        "upload_time_iso_8601": "2020-09-05T01:41:33.530363Z",
        "url": "https://files.pythonhosted.org/packages/61/b4/fe82d66be52ac37c5c9feb10abc78d961ce723d35511f24f4b185d8e4610/rulecheck-0.5.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e6142ad3fd3ba2540fe3fac281031cea29f4544263f93ece02a00b033e945d",
          "md5": "cba30e6befa34279f151445840e2678b",
          "sha256": "a7bfabaefbb815b9c006c8a52ad6832eec1503adaa8ecea0ff45fcf79dfd8a78"
        },
        "downloads": -1,
        "filename": "rulecheck-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cba30e6befa34279f151445840e2678b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36420,
        "upload_time": "2020-09-13T15:10:37",
        "upload_time_iso_8601": "2020-09-13T15:10:37.519137Z",
        "url": "https://files.pythonhosted.org/packages/e6/e6/142ad3fd3ba2540fe3fac281031cea29f4544263f93ece02a00b033e945d/rulecheck-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c69b4c27057a535c15bcd1251fe110e6519b77a3aa8ed5075d0faaa5065b0b6",
          "md5": "e9c933b3f177e7dc043f10e477edda71",
          "sha256": "7b5ce38e72bd8088f09d94846b4f3dfa0407177b435a4e92100e0dcee2eac9fc"
        },
        "downloads": -1,
        "filename": "rulecheck-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e9c933b3f177e7dc043f10e477edda71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30247,
        "upload_time": "2020-09-13T15:10:38",
        "upload_time_iso_8601": "2020-09-13T15:10:38.917533Z",
        "url": "https://files.pythonhosted.org/packages/7c/69/b4c27057a535c15bcd1251fe110e6519b77a3aa8ed5075d0faaa5065b0b6/rulecheck-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aee183f0480b5c883e4479cd1e3470a13a39ba6b4b4f0f5e52f8eda6188a208f",
          "md5": "a7c933850ed7372eed9ad63624cc91fa",
          "sha256": "cc79e5bc8295ba4b8277ea760b30fe22467f643dedbb0a7d07061b18657f11c3"
        },
        "downloads": -1,
        "filename": "rulecheck-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7c933850ed7372eed9ad63624cc91fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37305,
        "upload_time": "2020-09-13T18:58:50",
        "upload_time_iso_8601": "2020-09-13T18:58:50.154873Z",
        "url": "https://files.pythonhosted.org/packages/ae/e1/83f0480b5c883e4479cd1e3470a13a39ba6b4b4f0f5e52f8eda6188a208f/rulecheck-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "778490645257511b6adcaf05b7841573e9a22fb353b0bcfe0fc0f07dcaca3b6d",
          "md5": "143d9727c2561744ae98924b40293aa6",
          "sha256": "10b09ee006ed49a1ec3aac8f293f436e9d754870a702cd078d37651fef1e7f86"
        },
        "downloads": -1,
        "filename": "rulecheck-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "143d9727c2561744ae98924b40293aa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31215,
        "upload_time": "2020-09-13T18:58:51",
        "upload_time_iso_8601": "2020-09-13T18:58:51.356153Z",
        "url": "https://files.pythonhosted.org/packages/77/84/90645257511b6adcaf05b7841573e9a22fb353b0bcfe0fc0f07dcaca3b6d/rulecheck-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aee183f0480b5c883e4479cd1e3470a13a39ba6b4b4f0f5e52f8eda6188a208f",
        "md5": "a7c933850ed7372eed9ad63624cc91fa",
        "sha256": "cc79e5bc8295ba4b8277ea760b30fe22467f643dedbb0a7d07061b18657f11c3"
      },
      "downloads": -1,
      "filename": "rulecheck-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7c933850ed7372eed9ad63624cc91fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37305,
      "upload_time": "2020-09-13T18:58:50",
      "upload_time_iso_8601": "2020-09-13T18:58:50.154873Z",
      "url": "https://files.pythonhosted.org/packages/ae/e1/83f0480b5c883e4479cd1e3470a13a39ba6b4b4f0f5e52f8eda6188a208f/rulecheck-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "778490645257511b6adcaf05b7841573e9a22fb353b0bcfe0fc0f07dcaca3b6d",
        "md5": "143d9727c2561744ae98924b40293aa6",
        "sha256": "10b09ee006ed49a1ec3aac8f293f436e9d754870a702cd078d37651fef1e7f86"
      },
      "downloads": -1,
      "filename": "rulecheck-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "143d9727c2561744ae98924b40293aa6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31215,
      "upload_time": "2020-09-13T18:58:51",
      "upload_time_iso_8601": "2020-09-13T18:58:51.356153Z",
      "url": "https://files.pythonhosted.org/packages/77/84/90645257511b6adcaf05b7841573e9a22fb353b0bcfe0fc0f07dcaca3b6d/rulecheck-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}