{
  "info": {
    "author": "Matthew Peart",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PEReader\n\n<p align=\"center\">\n<img src=\"/figures/logo.svg\" height=\"20%\" width=\"20%\">\n</p>\n\nA lightweight Python module for parsing Portable Executable files. The parser reports warnings of PE file anomalies and malformations that may indicate formatting abuse. Windows defined structures are accessible as attributes on the PE object (winnt.h conventions) and extra metadata is provided, e.g. hashes, entropy, set flags, and interpreted strings. Please take a look at the files [calc.exe](/examples/calc.md), [aadauthhelper.dll](/examples/aadauthhelper.md), and [tiny.exe](/examples/tiny.md) to see the features and capabilities of the parser.\n\n## Development\n\nWe are currently walking through the advice of the [Corkami project](https://github.com/corkami/docs/blob/master/PE/PE.md) to increase its likeness w.r.t. the Windows loader. To request a new parser feature or to report a bug please submit an issue. Please feel free to contribute to the project.\n\n## Installation\n\n```\npip install pereader\n```\n\n## Usage\n\n### To parse calc.exe from file:\n\n``` \npe = pereader.PE('calc.exe')\n```\n\n## Features & API\nStructures are named in SCREAMING_CASE (capital letters), and fields are set as attributes on the respective structures in PascalCase. The field names can be found in the source code. Containers and lists storing the structures are named in snake_case, and interpreted fields are set using a variation of hungarian notation. Below is a diagram that includes the most useful parts of the API. Some of the patterns listed below make accessing specific structures and fields easier.\n\n<p align=\"center\">\n<img src=\"/figures/diagram.svg\" height=\"85%\" width=\"85%\">\n</p>\n\n### Characteristics:\n\nFlags are set as booleans on the respective header and true flags are stored in .flags.\n\n### Entropy:\n\nEntropy calculations set on the section headers can be slow for very big files. To switch them off:\n\n``` \npe = pereader.PE('calc.exe', is_entropy=False)\n```\n\n### Exports access pattern:\n\n```\nfor exp in pe.directory_entry_export.symbols:\n    print(hex(exp.address), exp.name, exp.ordinal)\n```\n\nAddresses are also set directly on symbols.\n\n```\nprint(pe.directory_entry_export.symbols.CreateTokenAuthBuffer)\n```\n\n### Imports access pattern:\n\n```\nfor dll in pe.directory_entry_import.dlls:\n    print(dll.name)\n    for imp in dll:\n\tprint(hex(imp.address), imp.name)\n```\n\nAddresses are also set directly on dlls.\n\n```\nfor dll in pe.directory_entry_import.dlls:\n    if hasattr(dll, 'memmove'):\n        print(dll.memmove)\n```\n\n### Strings table access pattern (using shortcut):\n\n```\nfor entry in pe.directory_entry_resource.resource_directory.entries:\n    if entry.RESOURCE_DIRECTORY_ENTRY.str_Type == 'RT_STRING':\n        for k in entry.strings:\n\t    print(k, entry.strings[k])\n```\n\n### Version information access pattern (using shortcut):\n\n```\nfor entry in pe.directory_entry_resource.resource_directory.entries:\n    if entry.RESOURCE_DIRECTORY_ENTRY.str_Type == 'RT_VERSION':\n    \tversion = entry.version\n\n\tfor e in version.stringfileinfo:\n\t    for stringtable in e.stringtables:\n\t        for string in stringtable.strings:\n\t\t    print(string.str_szKey, string.str_Value)\n\n\tfor e in version.varfileinfo:\n\t    for var in e.vars:\n\t        for w1, w2 in var.translations:\n\t\t    print(w1, w2)\n```\n\n### Relocations access pattern:\n\n```\nfor reloc in pe.directory_entry_basereloc.relocations:\n    for target in reloc.targets:\n        print(target.Value, target.str_Type)\n```\n\n### Debug access pattern:\n\n```\nfor entry in pe.directory_entry_debug.entries:\n    print(entry.DEBUG_DIRECTORY.str_Type)\n    print(entry.ENTRY)\n```\n\n### Thread local storage access pattern:\n\n```\nprint(pe.directory_entry_tls.TLS_DIRECTORY)\n```\n\n### Load configuration access pattern:\n\n```\nprint(pe.directory_entry_load_config.LOAD_CONFIG_DIRECTORY)\n```\n\n### Bound import access pattern:\n\n```\nfor desc in pe.directory_entry_bound_import.descriptors:\n    print(desc.str_Name, desc)\n```\n\n### Delay load access pattern:\n\n```\nfor dll in pe.directory_entry_delay_import.dlls:\n    print(dll.name)\n    for imp in dll:\n\tprint(hex(imp.address), imp.name)\n```\n\n## Resources\nWindows Dev Center specification - https://docs.microsoft.com/en-us/windows/win32/debug/pe-format  \nWin32 definitions - https://github.com/Alexpux/mingw-w64/blob/master/mingw-w64-tools/widl/include/winnt.h  \nPE format course - http://opensecuritytraining.info/LifeOfBinaries.html  \nResources directory - http://www.skynet.ie/~caolan/publink/winresdump/winresdump/doc/resfmt.txt  \nVersion information - http://blog.dkbza.org/2007/02/pefile-parsing-version-information-from.html?view=classic  \nDebug directory - http://www.debuginfo.com/articles/debuginfomatch.html\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matthewPeart/PEReader",
    "keywords": "pe,parser,exe,dll,pereader",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pereader",
    "package_url": "https://pypi.org/project/pereader/",
    "platform": "",
    "project_url": "https://pypi.org/project/pereader/",
    "project_urls": {
      "Homepage": "https://github.com/matthewPeart/PEReader"
    },
    "release_url": "https://pypi.org/project/pereader/9.8.2020/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A lightweight Python module for parsing portable executable files.",
    "version": "9.8.2020",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7920554,
  "releases": {
    "9.8.2020": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10377ccc5d51b73a8a533e3c5240a53fa3fa59bcb7525e8993f0b7a423ef5618",
          "md5": "0ef7f46a0e8dc6bccba0f67be02d9480",
          "sha256": "7330177dc8e6defc55ca4245777481a6031896094dd92f6c4d5837bc3b85c4b2"
        },
        "downloads": -1,
        "filename": "pereader-9.8.2020-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ef7f46a0e8dc6bccba0f67be02d9480",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26629,
        "upload_time": "2020-08-09T18:48:14",
        "upload_time_iso_8601": "2020-08-09T18:48:14.000500Z",
        "url": "https://files.pythonhosted.org/packages/10/37/7ccc5d51b73a8a533e3c5240a53fa3fa59bcb7525e8993f0b7a423ef5618/pereader-9.8.2020-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10377ccc5d51b73a8a533e3c5240a53fa3fa59bcb7525e8993f0b7a423ef5618",
        "md5": "0ef7f46a0e8dc6bccba0f67be02d9480",
        "sha256": "7330177dc8e6defc55ca4245777481a6031896094dd92f6c4d5837bc3b85c4b2"
      },
      "downloads": -1,
      "filename": "pereader-9.8.2020-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ef7f46a0e8dc6bccba0f67be02d9480",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26629,
      "upload_time": "2020-08-09T18:48:14",
      "upload_time_iso_8601": "2020-08-09T18:48:14.000500Z",
      "url": "https://files.pythonhosted.org/packages/10/37/7ccc5d51b73a8a533e3c5240a53fa3fa59bcb7525e8993f0b7a423ef5618/pereader-9.8.2020-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}