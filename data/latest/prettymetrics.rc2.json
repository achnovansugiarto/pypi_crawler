{
  "info": {
    "author": "Raja CSP Raman",
    "author_email": "info@tactii.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "================================================\nPretty Metrics\n================================================\n\n\nOne place metrics for various ML regression and classification algorithms\n\n* Free software: MIT license\n* Documentation: TBD\n\n\n================================================\nInstallation\n================================================\n\nTo install Pretty Metrics::\n\n    pip install prettymetrics\n\n    or\n\n    pip install git+https://github.com/tactlabs/prettymetrics.git\n\nPip installing the library from local repository::\n\n    conda activate <env_name>\n\n    python setup.py install develop\n\n================================================\nUsage\n================================================\n\nTo use Pretty Metrics in a project::\n\n    import prettymetrics\n\n================================================\nClassification\n================================================\n\nExample \n::\n\n    from prettymetrics.clf import Classifier\n    from sklearn.datasets import load_breast_cancer\n    from sklearn.model_selection import train_test_split\n\n    data = load_breast_cancer()\n    X = data.data\n    y= data.target\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=.5,random_state =123)\n\n    clf = Classifier(verbose=0,ignore_warnings=True, custom_metric=None)\n    models,predictions = clf.fit(X_train, X_test, y_train, y_test)\n\n    print(models)\n\n\n    | Model                          |   Accuracy |   Balanced Accuracy |   ROC AUC |   F1 Score |   Time Taken |\n    |:-------------------------------|-----------:|--------------------:|----------:|-----------:|-------------:|\n    | LinearSVC                      |   0.989474 |            0.987544 |  0.987544 |   0.989462 |    0.0150008 |\n    | SGDClassifier                  |   0.989474 |            0.987544 |  0.987544 |   0.989462 |    0.0109992 |\n    | MLPClassifier                  |   0.985965 |            0.986904 |  0.986904 |   0.985994 |    0.426     |\n    | Perceptron                     |   0.985965 |            0.984797 |  0.984797 |   0.985965 |    0.0120046 |\n    | LogisticRegression             |   0.985965 |            0.98269  |  0.98269  |   0.985934 |    0.0200036 |\n    | LogisticRegressionCV           |   0.985965 |            0.98269  |  0.98269  |   0.985934 |    0.262997  |\n    | SVC                            |   0.982456 |            0.979942 |  0.979942 |   0.982437 |    0.0140011 |\n    | CalibratedClassifierCV         |   0.982456 |            0.975728 |  0.975728 |   0.982357 |    0.0350015 |\n    | PassiveAggressiveClassifier    |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0130005 |\n    | LabelPropagation               |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0429988 |\n    | LabelSpreading                 |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0310006 |\n    | RandomForestClassifier         |   0.97193  |            0.969594 |  0.969594 |   0.97193  |    0.033     |\n    | GradientBoostingClassifier     |   0.97193  |            0.967486 |  0.967486 |   0.971869 |    0.166998  |\n    | QuadraticDiscriminantAnalysis  |   0.964912 |            0.966206 |  0.966206 |   0.965052 |    0.0119994 |\n    | HistGradientBoostingClassifier |   0.968421 |            0.964739 |  0.964739 |   0.968387 |    0.682003  |\n    | RidgeClassifierCV              |   0.97193  |            0.963272 |  0.963272 |   0.971736 |    0.0130029 |\n    | RidgeClassifier                |   0.968421 |            0.960525 |  0.960525 |   0.968242 |    0.0119977 |\n    | AdaBoostClassifier             |   0.961404 |            0.959245 |  0.959245 |   0.961444 |    0.204998  |\n    | ExtraTreesClassifier           |   0.961404 |            0.957138 |  0.957138 |   0.961362 |    0.0270066 |\n    | KNeighborsClassifier           |   0.961404 |            0.95503  |  0.95503  |   0.961276 |    0.0560005 |\n    | BaggingClassifier              |   0.947368 |            0.954577 |  0.954577 |   0.947882 |    0.0559971 |\n    | BernoulliNB                    |   0.950877 |            0.951003 |  0.951003 |   0.951072 |    0.0169988 |\n    | LinearDiscriminantAnalysis     |   0.961404 |            0.950816 |  0.950816 |   0.961089 |    0.0199995 |\n    | GaussianNB                     |   0.954386 |            0.949536 |  0.949536 |   0.954337 |    0.0139935 |\n    | NuSVC                          |   0.954386 |            0.943215 |  0.943215 |   0.954014 |    0.019989  |\n    | DecisionTreeClassifier         |   0.936842 |            0.933693 |  0.933693 |   0.936971 |    0.0170023 |\n    | NearestCentroid                |   0.947368 |            0.933506 |  0.933506 |   0.946801 |    0.0160074 |\n    | ExtraTreeClassifier            |   0.922807 |            0.912168 |  0.912168 |   0.922462 |    0.0109999 |\n    | CheckingClassifier             |   0.361404 |            0.5      |  0.5      |   0.191879 |    0.0170043 |\n    | DummyClassifier                |   0.512281 |            0.489598 |  0.489598 |   0.518924 |    0.0119965 |\n\n================================================\nRegression\n================================================\n\nExample \n::\n\n    from prettymetrics.reg import Regressor\n    from sklearn import datasets\n    from sklearn.utils import shuffle\n    import numpy as np\n\n    boston = datasets.load_boston()\n    X, y = shuffle(boston.data, boston.target, random_state=13)\n    X = X.astype(np.float32)\n\n    offset = int(X.shape[0] * 0.9)\n\n    X_train, y_train = X[:offset], y[:offset]\n    X_test, y_test = X[offset:], y[offset:]\n\n    reg = Regressor(verbose=0, ignore_warnings=False, custom_metric=None)\n    models, predictions = reg.fit(X_train, X_test, y_train, y_test)\n\n    print(models)\n\n\n    | Model                         | Adjusted R-Squared | R-Squared |  RMSE | Time Taken |\n    |:------------------------------|-------------------:|----------:|------:|-----------:|\n    | SVR                           |               0.83 |      0.88 |  2.62 |       0.01 |\n    | BaggingRegressor              |               0.83 |      0.88 |  2.63 |       0.03 |\n    | NuSVR                         |               0.82 |      0.86 |  2.76 |       0.03 |\n    | RandomForestRegressor         |               0.81 |      0.86 |  2.78 |       0.21 |\n    | XGBRegressor                  |               0.81 |      0.86 |  2.79 |       0.06 |\n    | GradientBoostingRegressor     |               0.81 |      0.86 |  2.84 |       0.11 |\n    | ExtraTreesRegressor           |               0.79 |      0.84 |  2.98 |       0.12 |\n    | AdaBoostRegressor             |               0.78 |      0.83 |  3.04 |       0.07 |\n    | HistGradientBoostingRegressor |               0.77 |      0.83 |  3.06 |       0.17 |\n    | PoissonRegressor              |               0.77 |      0.83 |  3.11 |       0.01 |\n    | LGBMRegressor                 |               0.77 |      0.83 |  3.11 |       0.07 |\n    | KNeighborsRegressor           |               0.77 |      0.83 |  3.12 |       0.01 |\n    | DecisionTreeRegressor         |               0.65 |      0.74 |  3.79 |       0.01 |\n    | MLPRegressor                  |               0.65 |      0.74 |  3.80 |       1.63 |\n    | HuberRegressor                |               0.64 |      0.74 |  3.84 |       0.01 |\n    | GammaRegressor                |               0.64 |      0.73 |  3.88 |       0.01 |\n    | LinearSVR                     |               0.62 |      0.72 |  3.96 |       0.01 |\n    | RidgeCV                       |               0.62 |      0.72 |  3.97 |       0.01 |\n    | BayesianRidge                 |               0.62 |      0.72 |  3.97 |       0.01 |\n    | Ridge                         |               0.62 |      0.72 |  3.97 |       0.01 |\n    | TransformedTargetRegressor    |               0.62 |      0.72 |  3.97 |       0.01 |\n    | LinearRegression              |               0.62 |      0.72 |  3.97 |       0.01 |\n    | ElasticNetCV                  |               0.62 |      0.72 |  3.98 |       0.04 |\n    | LassoCV                       |               0.62 |      0.72 |  3.98 |       0.06 |\n    | LassoLarsIC                   |               0.62 |      0.72 |  3.98 |       0.01 |\n    | LassoLarsCV                   |               0.62 |      0.72 |  3.98 |       0.02 |\n    | Lars                          |               0.61 |      0.72 |  3.99 |       0.01 |\n    | LarsCV                        |               0.61 |      0.71 |  4.02 |       0.04 |\n    | SGDRegressor                  |               0.60 |      0.70 |  4.07 |       0.01 |\n    | TweedieRegressor              |               0.59 |      0.70 |  4.12 |       0.01 |\n    | GeneralizedLinearRegressor    |               0.59 |      0.70 |  4.12 |       0.01 |\n    | ElasticNet                    |               0.58 |      0.69 |  4.16 |       0.01 |\n    | Lasso                         |               0.54 |      0.66 |  4.35 |       0.02 |\n    | RANSACRegressor               |               0.53 |      0.65 |  4.41 |       0.04 |\n    | OrthogonalMatchingPursuitCV   |               0.45 |      0.59 |  4.78 |       0.02 |\n    | PassiveAggressiveRegressor    |               0.37 |      0.54 |  5.09 |       0.01 |\n    | GaussianProcessRegressor      |               0.23 |      0.43 |  5.65 |       0.03 |\n    | OrthogonalMatchingPursuit     |               0.16 |      0.38 |  5.89 |       0.01 |\n    | ExtraTreeRegressor            |               0.08 |      0.32 |  6.17 |       0.01 |\n    | DummyRegressor                |              -0.38 |     -0.02 |  7.56 |       0.01 |\n    | LassoLars                     |              -0.38 |     -0.02 |  7.56 |       0.01 |\n    | KernelRidge                   |             -11.50 |     -8.25 | 22.74 |       0.01 |\n\n\n\nHow to run all examples\n::\n\n    git clone git@github.com:tactlabs/prettymetrics.git\n    cd prettymetrics\n    py examples/example_runner.py\n\nCredits\n::\n\n    The base code is derived from LazyPredict (https://github.com/shankarpandala/lazypredict). \n    As we see a lot of improvement in LazyPredict and the existing library is a bit outdated, we came up with this library. \n    It can be LazyPredict++ as you will see this lib is updated and having more metrics.\n\n===========================================\nHistory\n===========================================\n::\n\n    0.0.3 (2021-10-12)\n    ------------------\n    * Examples runner added\n    * All examples enclosed with methods\n    * One place examples runner initiated\n    * General code cleanup\n\n\n    0.0.2 (2021-10-11)\n    ------------------\n\n    * Various samples were added for testing\n    * Various datasets added\n    * LazyRegressor to Regressor naming convention\n    * LazyClassifier to Classifier naming convention\n    * Classifier and Regressor moved to separate files\n    * General code cleanup\n    * General coding standards improved\n\n\n    0.0.1 (2021-09-08)\n    ------------------\n\n    * Base version from Lazypredict.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tactlabs/prettymetrics",
    "keywords": "prettymetrics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prettymetrics",
    "package_url": "https://pypi.org/project/prettymetrics/",
    "platform": "",
    "project_url": "https://pypi.org/project/prettymetrics/",
    "project_urls": {
      "Homepage": "https://github.com/tactlabs/prettymetrics"
    },
    "release_url": "https://pypi.org/project/prettymetrics/0.0.3/",
    "requires_dist": [
      "click (==7.1.2)",
      "joblib (==1.0.0)",
      "lightgbm (==2.3.1)",
      "numpy (==1.19.1)",
      "pandas (==1.0.5)",
      "pytest (==5.4.3)",
      "PyYAML (==5.3.1)",
      "scikit-learn (==0.24.2)",
      "scipy (==1.5.4)",
      "six (==1.15.0)",
      "tqdm (==4.56.0)",
      "xgboost (==1.1.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "One place metrics for various ML regression and classification algorithms",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11712046,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a3bf8bef6bb3466d65ff72feddded8c864553d5f042798313d85e34dead22ae",
          "md5": "e48460bc88aa805adf3e493d90620b20",
          "sha256": "2f09d0eff841832354f436c04066adb0619414849b47dbb2469005095f99d057"
        },
        "downloads": -1,
        "filename": "prettymetrics-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e48460bc88aa805adf3e493d90620b20",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 15012,
        "upload_time": "2021-10-12T15:57:33",
        "upload_time_iso_8601": "2021-10-12T15:57:33.540917Z",
        "url": "https://files.pythonhosted.org/packages/7a/3b/f8bef6bb3466d65ff72feddded8c864553d5f042798313d85e34dead22ae/prettymetrics-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a5cf57d31e88a430a65f75c542e6f6bd022015182cd68158279ea5594a64e16",
          "md5": "eb7cd7312a13dd918247b83a12e71643",
          "sha256": "7a85ac5603061c010679092d3e845c077c6387f4f4813cd8fca248df13ea3078"
        },
        "downloads": -1,
        "filename": "prettymetrics-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb7cd7312a13dd918247b83a12e71643",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22669,
        "upload_time": "2021-10-12T15:57:36",
        "upload_time_iso_8601": "2021-10-12T15:57:36.283589Z",
        "url": "https://files.pythonhosted.org/packages/7a/5c/f57d31e88a430a65f75c542e6f6bd022015182cd68158279ea5594a64e16/prettymetrics-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f0a9d1a193a763be29a5b8bfa535e9e117675266c7f31ba3c780291e98846f1",
          "md5": "289f6ae9e9c70d1bc4fc92ed81653a10",
          "sha256": "467b2d52e61201155a0ea093f41ba1d1e34b0003ab842346fdab6735df7d9a1c"
        },
        "downloads": -1,
        "filename": "prettymetrics-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "289f6ae9e9c70d1bc4fc92ed81653a10",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 14833,
        "upload_time": "2021-10-13T12:18:28",
        "upload_time_iso_8601": "2021-10-13T12:18:28.984444Z",
        "url": "https://files.pythonhosted.org/packages/1f/0a/9d1a193a763be29a5b8bfa535e9e117675266c7f31ba3c780291e98846f1/prettymetrics-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "028651498960b9dcc5d49793ce2968cc4e46b790406d5e0ed1308785cc1cde7b",
          "md5": "56a1aec3b900a00fd67cdb056a7616eb",
          "sha256": "453d756c69c8a69e33bdbeabf53adad9e86e55067e02a60c3111ea6286b56184"
        },
        "downloads": -1,
        "filename": "prettymetrics-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "56a1aec3b900a00fd67cdb056a7616eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22280,
        "upload_time": "2021-10-13T12:18:31",
        "upload_time_iso_8601": "2021-10-13T12:18:31.965903Z",
        "url": "https://files.pythonhosted.org/packages/02/86/51498960b9dcc5d49793ce2968cc4e46b790406d5e0ed1308785cc1cde7b/prettymetrics-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f0a9d1a193a763be29a5b8bfa535e9e117675266c7f31ba3c780291e98846f1",
        "md5": "289f6ae9e9c70d1bc4fc92ed81653a10",
        "sha256": "467b2d52e61201155a0ea093f41ba1d1e34b0003ab842346fdab6735df7d9a1c"
      },
      "downloads": -1,
      "filename": "prettymetrics-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "289f6ae9e9c70d1bc4fc92ed81653a10",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 14833,
      "upload_time": "2021-10-13T12:18:28",
      "upload_time_iso_8601": "2021-10-13T12:18:28.984444Z",
      "url": "https://files.pythonhosted.org/packages/1f/0a/9d1a193a763be29a5b8bfa535e9e117675266c7f31ba3c780291e98846f1/prettymetrics-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "028651498960b9dcc5d49793ce2968cc4e46b790406d5e0ed1308785cc1cde7b",
        "md5": "56a1aec3b900a00fd67cdb056a7616eb",
        "sha256": "453d756c69c8a69e33bdbeabf53adad9e86e55067e02a60c3111ea6286b56184"
      },
      "downloads": -1,
      "filename": "prettymetrics-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "56a1aec3b900a00fd67cdb056a7616eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22280,
      "upload_time": "2021-10-13T12:18:31",
      "upload_time_iso_8601": "2021-10-13T12:18:31.965903Z",
      "url": "https://files.pythonhosted.org/packages/02/86/51498960b9dcc5d49793ce2968cc4e46b790406d5e0ed1308785cc1cde7b/prettymetrics-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}