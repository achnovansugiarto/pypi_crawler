{
  "info": {
    "author": "Guenter Quast",
    "author_email": "Guenter.Quast@online.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# picoDAQ\n\n*python* Data AcQuisition and analysis with PicoScope usb-oscilloscopes\n\nThe *usb*-oscilloscope series PicoSpope by Pico Technology (see <https://www.picotech.com>)\noffers universal instruments that come with great software support, not only a graphical\ninterface offering the functionality known from oscilloscopes, but - most importantly for\nthis project - also with a software development kit (*SDK*) which makes it possible to use\nthe devices with a wide range of high-level languages.\n\nProvided here is a data acquisition system as is needed to record,  analyze, classify and\ncount the occurrence of wave forms such as provided for example by single-photon counters\nor typical detectors common in quantum mechanical measurements or in nuclear, particle\nphysics and astro particle physics, e.g. photo tubes, Geiger counters, avalanche\nphoto-diodes or modern SiPMs.\n\nThe random nature of such processes and the need to keep read-out dead times low requires\nan input buffer and a buffer manager running as a background process. Data are provided\nvia the buffer manager interface to several consumer processes to analyze, check or\nvisualize data and analysis results. Such consumers may be obligatory ones, i.e. data\nacquisition pauses if all input buffers are full and an obligatory consumer is still busy\nprocessing. A second type of random consumers receives an event copy from the buffer manager\nupon request, without pausing the data acquisition process. Typical examples of \nrandom consumers are displays of a subset of the wave forms or of intermediate\nanalysis results. Examples for such consumers are provided as part of this package,\nrunning either as a 'thread' within the python interpreter or as sub-processes using\nthe 'multiprocessing' package.\n\nThis project originated as a demonstration to analyze pulses from a photomultiplier (PM)\nor a Silicon Photo Multiplier (SiPM) registering optical signals from  a detector, in the\nsimplest case a coffeepot filled with water and equipped with a PM to count muons from\ncosmic rays. \n\n## List of implemented **Functions**:\n\n- class *picoConfig*:\n  - set up PicoScope time base, channel ranges and trigger\n  - set up the internal signal generator\n  - PicoScope configuration read from *json* or *yaml* file\n  - data acquisition of raw data from device\n\n- class *BufferMan*:\n  - acquire data (implemented as background thread)\n  - manage event data buffer and distribute to consumers\n  - configuration read from *json* or *yaml* file\n  - supports\n\n    - *obligatory* consumers: data acquisition pauses until consumer done\n    - and *random* consumers: receive a copy of one event, data acquisition continues\n\n- module *AnimatedInstruments* (deprecated, to be removed soon)\n  - examples of animated graphical devices: a Buffer Manager display (using\n  class *plotBufManInfo), a VoltMeter (class *VoltMeter*), an Oscilloscope\n  (class *Ocscilloscope* and a ratemeter (class *RMeter*). The module must run as\n  a *python* *thread* in the same *python* interpreter as *BufferMan*\n\n- module *mpBufManCntrl*\n  - this sub-process receives status and logging information from the Buffer Manager\n  via a multiprocessing Queue and displays input rate history, filling level of the\n  buffers and the data-acquisition lifetime. Buttons at the bottom of the window allow\n  status changes (from RUNNING to PAUSED or vice versa) or to exit. A log-file at the\n  end contains a summary and, optionally, logging information. \n\n- module *mpOsci*  \n  runs an instance of *Oscilloscpe* as a sub-process, and receives data from *BufferMan*\n  via a multiprocessing Queue.\n\n-  module *mpRMeter*    \n   runs an instance of the *RMeter* class as a sub-process, receiving via a multiprocessing Queue.\n\n- module *mpVMeter*  \n  runs an instance of the *VoltMeter* class as a sub-process, receiving data via a multiprocessing Queue. \n\n- module *mpHists* \n  runs an instance of the *animHists* class as a sub-process; receives input data via a\n  multiprocessing Queue. Data are formatted as lists of values. A normalized frequency distribution is\n  then updated and displayed.\n\n- module *mpBDisplay* \n  - runs an instance of class BarDisplay and shows one (signed or unsigned) value per Channel\n  (e.g. peak Voltage, effective Voltage etc.). Values are passed to the sub-process via a\n  multiprocessing Queue.\n\n- module *mpDataLogger* \n  runs an instance of the *DataLogger* class as a sub-process, displaying  values passed via a\n  multiprocessing Queue as a history plot. This module   is not implemented as a *BufferMan**\n  client (see example `runDataLogger`).\n\n- module *mpDataGraphs*  \n  runs an instance of the *DataGraphs* class as a sub-process, displaying values passed via a\n  multiprocessing Queue as a bar graph, a history plot or optionally - if two channels are\n  enabled - as xy-display. This module ist not implemented as a *BufferMan* client (see example\n  `runDataGraphs`)\n\nThe script `runDAQ.py` gives an example of how to use all of the above. For a full demo,\nconnect the output of a PicoScope's signal generator to channel *B*, and eventually an\nopen cable to Channel *A* to see random noise. Use the configuration file `DAQconfig.yaml`,\nwhich specifies the configuration files`BMconfig.yaml` for the Buffer Manager and `PSConfig.yaml`\nfor the PicoScope. As a hook for own extensions, user code may be included. An example for this\nis shown in the configuration file `DAQ_Cosmo.json`, which points to a code snippet *anaDAQ.py*\nto start some example consumers (code in`exampleConsumers.py`).\n\n\n## Examples\n\nThe directory `examples/` contains configuration files and some special applications. \n\nThe script `runDataLogger.py` implements a data logger for rates below 20 Hz. Signals are\nsampled with a PicoSocpe at a rate of 10 kHz over 20 ms and then averaged. 50 Hz noise is\nthus eliminated, and a clean voltage signal is obtained. The history of the recorded voltages\nis displayed using the module `mpDataLogger`. \nSimilarly, `runDataGraphs` uses the same sampling mechanism to display the effective voltage\nas bar graph, a history plot, and, optionally,   channel B vs. Channel A as an xy-graph if two\nchannels are enabled.\nThese examples directly read from the hardware device and therefore do not rely on the `BufferMan` class.\nAs a third simple example the script `runOsci.py` provides a simple oscilloscpe independent of BufferMan. \n\nThe script `runCosmo.py` is a modified version of `runDAQ.py` and depends on the code in\n`pulseFilter.py`, which implements a convolution filter to search for characteristic signal\nshapes in an input waveform. The example is tailored to identify short pulses from muon\ndetectors (e. g. the scintillator panels of the *CosMO*-experiment by \"Netzwerk Teilchenwelt\",\n<http://www.teilchenwelt.de>, \nor the Kamiokanne-Experiment with photomultiplier readout and pulses shaped to a length of\napprox. 150ns). A more complete and updated version has been moved to the project `picoCosmo`,\nsee <https://github.com/GuenterQuast/picoCosmo>. \n\n\n## Installation of the package\n\nThis python code is compatible with *python* versions and >=3.5. It was tested with PicoScope\ndevice classes PS2000, PS2000a, PS3000a and PS4000 under Ubuntu, openSUSE Leap and on RaspberryPi.\nGraphical displays are implemented with `matplotlib`.\n\n**Requirements:**\n\n  - The low-level drivers and C-libraries contained in the Pico Technology\n    Software Development Kit are required,  *SDK* by Pico Technology,\n    see  https://www.picotech.com/downloads\n  - *python* bindings of the *pico-python* project by Colin O'Flynn\n    and Mark Harfouche, https://github.com/colinoflynn/pico-python\n\n*picoDAQ* presently consists of the modules in the direcoctry *picodaqa*, mentioned above,\nand an example *python* script (*runDAQ.py*) with configuration examples (*.yaml* files) for\nthe data acquisition (*DAQconfig.yaml*), for the PicoScope Device (*PSconfig.yaml*) and for\nthe Buffer Mananger (*BMconfig.yaml*).\n\nAfter downloading all files from the git repository, connect your PicoScope and start from\nthe command line, e. g. `python runDAQ.py`. \n\nYou may run the script *make_dist.sh* to generate a *.whl* file in the subdirectory\n*dist*, which can be installed via `pip install picodaqa_<vers>_<type>.whl`. Once\nthis is done, the provided examples can be copied to any directory. \n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.etp.kit.edu/~quast/",
    "keywords": "",
    "license": "GNU Public Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "picodaqa",
    "package_url": "https://pypi.org/project/picodaqa/",
    "platform": null,
    "project_url": "https://pypi.org/project/picodaqa/",
    "project_urls": {
      "Homepage": "https://www.etp.kit.edu/~quast/"
    },
    "release_url": "https://pypi.org/project/picodaqa/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data AcQuisition and analysis with PicoScope usb-oscilloscopes",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15351866,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31d1754a9d82fc47144c192563626c3769608264194a21fdeabc0be95268be7b",
          "md5": "78be0c9d1e8df35805c3352d74ede7c8",
          "sha256": "edc94ee894db7fca45a7114c91f11d00c6fedc69914714480457c6617143b9d1"
        },
        "downloads": -1,
        "filename": "picodaqa-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78be0c9d1e8df35805c3352d74ede7c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42458,
        "upload_time": "2022-10-09T14:03:07",
        "upload_time_iso_8601": "2022-10-09T14:03:07.422586Z",
        "url": "https://files.pythonhosted.org/packages/31/d1/754a9d82fc47144c192563626c3769608264194a21fdeabc0be95268be7b/picodaqa-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaa7287b8427e33d3c167b84f7e446da21dcbd9868dd5e60d44679f95f0fd773",
          "md5": "c35e8f49dbe9a8ffc81d4b1437ea8bc5",
          "sha256": "6db7c36ead13dbea0cf4aaf2a397825ce8797419b3edd9fc48da6053a2869fda"
        },
        "downloads": -1,
        "filename": "picodaqa-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c35e8f49dbe9a8ffc81d4b1437ea8bc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31010,
        "upload_time": "2022-10-09T14:03:09",
        "upload_time_iso_8601": "2022-10-09T14:03:09.581447Z",
        "url": "https://files.pythonhosted.org/packages/ea/a7/287b8427e33d3c167b84f7e446da21dcbd9868dd5e60d44679f95f0fd773/picodaqa-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31d1754a9d82fc47144c192563626c3769608264194a21fdeabc0be95268be7b",
        "md5": "78be0c9d1e8df35805c3352d74ede7c8",
        "sha256": "edc94ee894db7fca45a7114c91f11d00c6fedc69914714480457c6617143b9d1"
      },
      "downloads": -1,
      "filename": "picodaqa-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "78be0c9d1e8df35805c3352d74ede7c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42458,
      "upload_time": "2022-10-09T14:03:07",
      "upload_time_iso_8601": "2022-10-09T14:03:07.422586Z",
      "url": "https://files.pythonhosted.org/packages/31/d1/754a9d82fc47144c192563626c3769608264194a21fdeabc0be95268be7b/picodaqa-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaa7287b8427e33d3c167b84f7e446da21dcbd9868dd5e60d44679f95f0fd773",
        "md5": "c35e8f49dbe9a8ffc81d4b1437ea8bc5",
        "sha256": "6db7c36ead13dbea0cf4aaf2a397825ce8797419b3edd9fc48da6053a2869fda"
      },
      "downloads": -1,
      "filename": "picodaqa-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c35e8f49dbe9a8ffc81d4b1437ea8bc5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31010,
      "upload_time": "2022-10-09T14:03:09",
      "upload_time_iso_8601": "2022-10-09T14:03:09.581447Z",
      "url": "https://files.pythonhosted.org/packages/ea/a7/287b8427e33d3c167b84f7e446da21dcbd9868dd5e60d44679f95f0fd773/picodaqa-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}