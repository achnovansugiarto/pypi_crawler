{
  "info": {
    "author": "Sebastien Devine",
    "author_email": "sebdevine@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# implicit-globals\n\n**TL;DR: A Python decorator that allow you to modify at runtime a function's \nimplicit global variables or default variables.**\n\n## Goals\nThe _implicit_ adjective refers to all variables that are not explicit to a function call,\neither from the function (or method) 's global variables or any parameter with a default value.\nIt is heavily inspired from Scala's own implicit types, but obviously not the same, Scala solves implicitly at compile time.\n\nUsing \"pure\" functions is not always possible, using an external variable/function is\nquite easy in Python, but then when it comes to changing those dependencies, it is quite difficult:\nthink about testing, dependency injection, etc. So people often resort to \"objects\" as an easy way to override things, class attributes/methods replace global variables/functions. This way can make the code quite complex as `self` becomes the global repository with overrides all over the place.\n\nThe idea is to keep some sort of \"functional approach\" but keep things manageable with an explicit \"global' memory\" that manipulates global variables without changing the function's call graph.\nAnd also without resorting on the \"heavy artillery\" of functional programming patterns.\n\nThe main issue of this approach is to know in advance which are the global variables used and their\ntype. Obviously Python duck typing makes things easier, but still we cannot statically know\nthe dependencies in advances, so there is no check and control over the overrides.\n\n## Install\n```\npip install implicit-globals\n```\n\n## Usage\n\nYou can use either :\n- The default decorator `implicit`, **but beware, then all functions \ndecorated will share the same overrides !** \n- Or you can create your own local decorator using the class `ImplicitGlobals` : `my_implicit_decorator = ImplicitGlobals()`\n\nThe instances of `ImplicitGlobals` act like a mutable `dict` where the global names and their values can be set. \n\nPlease note that :\n- It is developed & tested on Python 3.6+, no older versions support.\n- It is not thread-safe (concurent changes can lead to unexpect behaviour)\n- It does not support (yet) coroutines\n- Only decorated functions can be changed, others are left untouched.  \n\n```python\nimport sys\n#Use the default decorator\nfrom implicit_globals import implicit\n\n\nAAA = \"FRE\"\n\n\ndef load():\n    return \"Hello\"\n\n\n@implicit\ndef foo(a, b, c=1, *, d=None):\n    print(\"foo : \", a, b, c, d, AAA, load())\n\n\n@implicit\ndef bar(a, b):\n    print(\"bar : \", a, b, AAA)\n    foo(a, b)\n\n\n@implicit\ndef qux(a, b=4):\n    print(\"qux : \", a, b, AAA)\n    bar(a, b)\n\n\nclass Foo:\n\n    @implicit\n    def toto(self, a, b):\n        print('TOTO: ', a, b)\n        bar(a, b)\n\n\nqux(3, 4)\n# qux :  3 4 FRE\n# bar :  3 4 FRE\n# foo :  3 4 1 None FRE Hello\n\nimplicit[\"AAA\"] = \"BAZ\"\nimplicit[\"print\"] = lambda *_: sys.stdout.write(\"YO-- \" + ', '.join(map(str, _)) + '\\n')\nimplicit[\"load\"] = lambda: \"New Hello\"\nimplicit[\"d\"] = 333\n\nqux(3, 4)\n# YO-- qux : , 3, 4, BAZ\n# YO-- bar : , 3, 4, BAZ\n# YO-- foo : , 3, 4, 1, 333, BAZ, New Hello\n\nFoo().toto(7, 8)\n# YO-- TOTO: , 7, 8\n# YO-- bar : , 7, 8, BAZ\n# YO-- foo : , 7, 8, 1, 333, BAZ, New Hello\n\ndel implicit[\"AAA\"]\nfoo(4, 5)\n# YO-- foo : , 4, 5, 1, 333, FRE, New Hello\n```\n\n## Development / Testing\nTo install local a development version :\n```\npip install -e .\n```\n\nTo launch the tests, you will need `pytest` :\n```\npytest test_implicit_globals.py\n```\n\nTo build and deploy, you will need these packages : `wheel`, `twine`, `setuptools`\n```\npython setup.py bdist_wheel\npython -m twine upload --repository pypi dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sebdevine/implicit_globals",
    "keywords": "implicit globals decorator functional",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "implicit-globals",
    "package_url": "https://pypi.org/project/implicit-globals/",
    "platform": "",
    "project_url": "https://pypi.org/project/implicit-globals/",
    "project_urls": {
      "Homepage": "https://github.com/sebdevine/implicit_globals"
    },
    "release_url": "https://pypi.org/project/implicit-globals/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A decorator that provides a way to override a function/method 's global and default variables",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8078413,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b2038b20feb915b86c74954356d0ae51c72e0e66e6c1c06c3f20a4981857201",
          "md5": "585daf540906b07da202b38c885b505a",
          "sha256": "e7526cfe596e3c7551da1b0aebe8a82b095e31f965afc6f565a41d7ee7a39ae1"
        },
        "downloads": -1,
        "filename": "implicit_globals-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "585daf540906b07da202b38c885b505a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6403,
        "upload_time": "2020-08-31T18:25:22",
        "upload_time_iso_8601": "2020-08-31T18:25:22.396414Z",
        "url": "https://files.pythonhosted.org/packages/3b/20/38b20feb915b86c74954356d0ae51c72e0e66e6c1c06c3f20a4981857201/implicit_globals-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b2038b20feb915b86c74954356d0ae51c72e0e66e6c1c06c3f20a4981857201",
        "md5": "585daf540906b07da202b38c885b505a",
        "sha256": "e7526cfe596e3c7551da1b0aebe8a82b095e31f965afc6f565a41d7ee7a39ae1"
      },
      "downloads": -1,
      "filename": "implicit_globals-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "585daf540906b07da202b38c885b505a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6403,
      "upload_time": "2020-08-31T18:25:22",
      "upload_time_iso_8601": "2020-08-31T18:25:22.396414Z",
      "url": "https://files.pythonhosted.org/packages/3b/20/38b20feb915b86c74954356d0ae51c72e0e66e6c1c06c3f20a4981857201/implicit_globals-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}