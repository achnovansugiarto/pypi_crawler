{
  "info": {
    "author": "Fabio Pachelli Pacheco",
    "author_email": "nanook.labs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# line-profiler-decorator\nWrapper around [line-profiler](https://github.com/rkern/line_profiler) adding a few features as an decorator\n\n## Install\n```shell\npip install line-profiler-decorator\n```\n\n## Usage\n```python\nfrom time import sleep\nfrom line_profiler_decorator import profiler\n\n\n@profiler\ndef slow_function():\n    print(\"quick line\")\n    sleep(1)  # slow one\n    sleep(0.3)  # not that slow\n```\n\n### Output\n```\nquick line\nTimer unit: 1e-06 s\n\nTotal time: 6.52823 s\nFile: /Users/fabio/projects/line-profiler-decorator/examples/example.py\nFunction: slow_function at line 5\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     5                                           @profiler(aggregate=True)\n     6                                           def slow_function():\n     7         5         69.0     13.8      0.0      print(\"quick line\")\n     8         5    5016944.0 1003388.8     76.8     sleep(1)  # slow one\n     9         5    1511218.0 302243.6      23.1     sleep(0.3)  # not that slow\n\n```\n\n## Options\n\n### Save output to a file\nSave the output to a file instead of stdout\n```python\n@profiler(\"output_file.txt\")\ndef slow_function():\n    print(\"quick line\")\n    sleep(1)  # slow one\n    sleep(0.3)  # not that slow\n```\n\n### Aggregate results\nAggregate the results of multiple calls to the decorated function\n```python\n@profiler(aggregate=True)\ndef slow_function():\n    print(\"quick line\")\n    sleep(1)  # slow one\n    sleep(0.3)  # not that slow\n\ndef run_slow(n=100):\n    for _ in range(n):\n        slow_function()\n```\n\n### Follow function\n```python\nfrom time import sleep\nfrom line_profiler_decorator import profiler\n\n\ndef other_function():\n    sleep(1)  # slow one\n    sleep(0.3)  # not that slow\n\n\n@profiler(follow=[other_function])\ndef function_that_calls_other_function(n):\n    for _ in range(n):\n        other_function()\n```\n\n#### Output\n```\nIn [3]: function_that_calls_other_function(10)                                                                                                                                      \nTimer unit: 1e-06 s\n\nTotal time: 13.0668 s\nFile: /Users/fabio/projects/line-profiler-decorator/examples/example.py\nFunction: other_function at line 17\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    17                                           def other_function():\n    18        10   10037030.0 1003703.0     76.8      sleep(1)  # slow one\n    19        10    3029725.0 302972.5     23.2      sleep(0.3)  # not that slow\n\nTotal time: 13.0672 s\nFile: /Users/fabio/projects/line-profiler-decorator/examples/example.py\nFunction: function_that_calls_other_function at line 22\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    22                                           @profiler(follow=[other_function])\n    23                                           def function_that_calls_other_function(n):\n    24        11         97.0      8.8      0.0      for _ in range(n):\n    25        10   13067104.0 1306710.4    100.0          other_function()\n```\n\n### Grouped aggregations\nGroup aggregations using a key function.\n`key` is a function that receives the same arguments as the decorated function and returns a value.\nThe profile results of each call of the decorated function will be grouped and aggregated together by the value returned by the `key` function\n\n#### Example:\n```python\nfrom time import sleep\nfrom line_profiler_decorator import profiler\n\n\n@profiler(aggregate=True, key=lambda x: x % 2 == 0)\ndef function_with_grouped_aggregations(number):\n    \"\"\"This function runs faster for even numbers.\"\"\"\n    if number % 2:\n        # sleep for 1 second if number is odd\n        sleep(1)\n    else:\n        # sleep for 0.2 second if number is even\n        sleep(0.2)\n    sleep(0.5)\n\n\ndef run_function_with_grouped_aggregations(n=10):\n    for _ in range(n):\n        function_with_grouped_aggregations(_)\n```\n#### Output\nThe `key` function returns value `True` for even numbers and `False` for odd numbers.\nThat way the aggregated results will be grouped into 2 profile results.\n\n```\nTimer unit: 1e-06 s\n\nTotal time: 3.533 s\nFile: /Users/fabio/projects/line-profiler-decorator/examples/example.py\nFunction: function_with_filtered_aggregations at line 28\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    28                                           @profiler(aggregate=True, key=lambda x: x % 2 == 0)\n    29                                           def function_with_filtered_aggregations(number):\n    30                                               \"\"\"This function runs faster for even numbers.\"\"\"\n    31         5         17.0      3.4      0.0      if number % 2:\n    32                                                   # sleep for 1 second if number is odd\n    33                                                   sleep(1)\n    34                                               else:\n    35                                                   # sleep for 0.2 second if number is even\n    36         5    1015312.0 203062.4     28.7          sleep(0.2)\n    37         5    2517674.0 503534.8     71.3      sleep(0.5)\n\nTimer unit: 1e-06 s\n\nTotal time: 7.53658 s\nFile: /Users/fabio/projects/line-profiler-decorator/examples/example.py\nFunction: function_with_filtered_aggregations at line 28\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    28                                           @profiler(aggregate=True, key=lambda x: x % 2 == 0)\n    29                                           def function_with_filtered_aggregations(number):\n    30                                               \"\"\"This function runs faster for even numbers.\"\"\"\n    31         5         15.0      3.0      0.0      if number % 2:\n    32                                                   # sleep for 1 second if number is odd\n    33         5    5017337.0 1003467.4     66.6          sleep(1)\n    34                                               else:\n    35                                                   # sleep for 0.2 second if number is even\n    36                                                   sleep(0.2)\n    37         5    2519231.0 503846.2     33.4      sleep(0.5)\n```\nLooking at the results above we can see that the first block only aggregated call with even `number`\ntherefore spent no time at line 33. On the other hand, the second block shows the same for odd numbers\nwhere no time was used on even numbers.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/nano-labs/line-profiler-decorator/archive/refs/tags/0.0.6.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nano-labs/line-profiler-decorator",
    "keywords": "line time profiler decorator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "line-profiler-decorator",
    "package_url": "https://pypi.org/project/line-profiler-decorator/",
    "platform": null,
    "project_url": "https://pypi.org/project/line-profiler-decorator/",
    "project_urls": {
      "Download": "https://github.com/nano-labs/line-profiler-decorator/archive/refs/tags/0.0.6.zip",
      "Homepage": "https://github.com/nano-labs/line-profiler-decorator"
    },
    "release_url": "https://pypi.org/project/line-profiler-decorator/0.0.6/",
    "requires_dist": [
      "line-profiler (==3.5.1)"
    ],
    "requires_python": ">3.6.0",
    "summary": "Line profiler Output time usage per line",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15321164,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cc05ebdfbe30ef9c6b4ba65bd467f29c749cec9a085f7f02ba6a1e3249d997",
          "md5": "7ec48670f59850d0b81487423e37f4bb",
          "sha256": "95eb5828c4318ae9e6e858c135da895541bff37fa87568daafcbd40cd38ae56a"
        },
        "downloads": -1,
        "filename": "line-profiler-decorator-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7ec48670f59850d0b81487423e37f4bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 4259,
        "upload_time": "2021-08-09T21:51:37",
        "upload_time_iso_8601": "2021-08-09T21:51:37.546611Z",
        "url": "https://files.pythonhosted.org/packages/d5/cc/05ebdfbe30ef9c6b4ba65bd467f29c749cec9a085f7f02ba6a1e3249d997/line-profiler-decorator-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bcbcfdcc6f0b97b06482c30c5251a96a5961331fe324117c770c79b47a735e3",
          "md5": "6e1b9d52e0ae475028b7c289a3d5663c",
          "sha256": "03a20cf26b1cfa14a9805570f3d794e7612ee9cac9efb6c8ab144a08e0a205c1"
        },
        "downloads": -1,
        "filename": "line_profiler_decorator-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e1b9d52e0ae475028b7c289a3d5663c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 4125,
        "upload_time": "2022-10-06T09:34:35",
        "upload_time_iso_8601": "2022-10-06T09:34:35.165494Z",
        "url": "https://files.pythonhosted.org/packages/6b/cb/cfdcc6f0b97b06482c30c5251a96a5961331fe324117c770c79b47a735e3/line_profiler_decorator-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a793f2ca83ea6a5c984d5747093a4931e8764b4a2bb9e3bdd1ac28b45d66f9",
          "md5": "503c5648af7d68d11044bc379780dc64",
          "sha256": "5fbc2c4bf053607a47a49591e34182c7b81e1aa2eb441f8821972709060d28eb"
        },
        "downloads": -1,
        "filename": "line-profiler-decorator-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "503c5648af7d68d11044bc379780dc64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 4234,
        "upload_time": "2022-10-06T09:34:36",
        "upload_time_iso_8601": "2022-10-06T09:34:36.743369Z",
        "url": "https://files.pythonhosted.org/packages/08/a7/93f2ca83ea6a5c984d5747093a4931e8764b4a2bb9e3bdd1ac28b45d66f9/line-profiler-decorator-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bcbcfdcc6f0b97b06482c30c5251a96a5961331fe324117c770c79b47a735e3",
        "md5": "6e1b9d52e0ae475028b7c289a3d5663c",
        "sha256": "03a20cf26b1cfa14a9805570f3d794e7612ee9cac9efb6c8ab144a08e0a205c1"
      },
      "downloads": -1,
      "filename": "line_profiler_decorator-0.0.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e1b9d52e0ae475028b7c289a3d5663c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">3.6.0",
      "size": 4125,
      "upload_time": "2022-10-06T09:34:35",
      "upload_time_iso_8601": "2022-10-06T09:34:35.165494Z",
      "url": "https://files.pythonhosted.org/packages/6b/cb/cfdcc6f0b97b06482c30c5251a96a5961331fe324117c770c79b47a735e3/line_profiler_decorator-0.0.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08a793f2ca83ea6a5c984d5747093a4931e8764b4a2bb9e3bdd1ac28b45d66f9",
        "md5": "503c5648af7d68d11044bc379780dc64",
        "sha256": "5fbc2c4bf053607a47a49591e34182c7b81e1aa2eb441f8821972709060d28eb"
      },
      "downloads": -1,
      "filename": "line-profiler-decorator-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "503c5648af7d68d11044bc379780dc64",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.6.0",
      "size": 4234,
      "upload_time": "2022-10-06T09:34:36",
      "upload_time_iso_8601": "2022-10-06T09:34:36.743369Z",
      "url": "https://files.pythonhosted.org/packages/08/a7/93f2ca83ea6a5c984d5747093a4931e8764b4a2bb9e3bdd1ac28b45d66f9/line-profiler-decorator-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}