{
  "info": {
    "author": "Anthony Sottile",
    "author_email": "asottile@umich.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "[![Build Status](https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.detect-test-pollution?branchName=main)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=72&branchName=main)\n[![Azure DevOps coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/72/main.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionId=72&branchName=main)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/detect-test-pollution/main.svg)](https://results.pre-commit.ci/latest/github/asottile/detect-test-pollution/main)\n\ndetect-test-pollution\n=====================\n\na tool to detect test pollution\n\n## installation\n\n`pip install detect-test-pollution`\n\n## what is test pollution?\n\n[![video about test pollution](https://camo.githubusercontent.com/e72348a4fa8369247e9e2f1441de4424065fc42d6d53aad6ef703e264b820c3d/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f4652746569616e61504d6f2f6d7164656661756c742e6a7067)](https://youtu.be/FRteianaPMo)\n\ntest pollution is where a test fails due to the side-effects of some other test\nin the test suite.\n\nit usually appears as a \"test flake\" something where the test fails\nmysteriously but passes when run by itself.\n\na simple example of this is the following python code:\n\n```python\nk = 1\n\ndef test_k():\n    assert k == 1\n\ndef test_k2():\n    global k\n\n    k = 2\n    assert k == 2\n```\n\nnow this example is a little bit silly, you probably wouldn't write code this\npoorly but helps us demonstrate the problem here.\n\nwhen run normally -- these tests pass:\n\n```console\n$ pytest -q t.py\n..                                                                       [100%]\n2 passed in 0.00s\n```\n\nbut, if the tests were run in some other order (due to something like\n[pytest-randomly] or [pytest-xdist]) then the pollution would be apparent:\n\n```console\n$ pytest -q t.py::test_k2 t.py::test_k\n.F                                                                       [100%]\n=================================== FAILURES ===================================\n____________________________________ test_k ____________________________________\n\n    def test_k():\n>       assert k == 1\nE       assert 2 == 1\n\nt.py:4: AssertionError\n=========================== short test summary info ============================\nFAILED t.py::test_k - assert 2 == 1\n1 failed, 1 passed in 0.03s\n```\n\noften this flake happens in a codebase with hundreds or thousands of tests\nand it's difficult to track down which test is causing the global side-effects.\n\nthat's where this tool comes in handy!  it helps you find the pair of tests\nwhich error when run in order.\n\n[pytest-randomly]: https://github.com/pytest-dev/pytest-randomly\n[pytest-xdist]: https://github.com/pytest-dev/pytest-xdist\n\n## usage\n\nonce you have identified a failing test, you'll be able to feed it into\n`detect-test-pollution` to find the causal test.\n\nthe basic mode is to run:\n\n```bash\ndetect-test-pollution \\\n    --failing-test test.py::test_id_here \\\n    --tests ./tests\n```\n\nwhere `test.py::test_id_here` is the identifier of the failing test and\n`./tests` is the directory where your testsuite lives.\n\nif you've already narrowed down the list of testids further than that, you\ncan specify a `--testids-file` instead of `--tests` to speed up discovery:\n\n```bash\ndetect-test-pollution \\\n    --failing-test test.py::test_id_here \\\n    --testids-file ./testids\n```\n\nyou can usually get a list of testids via `pytest --collect-only -q` (though\nyou'll need to strip some unrelated lines at the end, such as timing and\nwarning info).\n\nthen `detect-test-pollution` will bisect the list of tests to find the failing\none.  here's an example bisection from a [bug in pytest]\n\n```console\n$ detect-test-pollution --tests ./testing --failing-test testing/io/test_terminalwriter.py::test_should_do_markup_FORCE_COLOR\ndiscovering all tests...\n-> discovered 3140 tests!\nensuring test passes by itself...\n-> OK!\nensuring test fails with test group...\n-> OK!\nrunning step 1:\n- 3139 tests remaining (about 12 steps)\nrunning step 2:\n- 1570 tests remaining (about 11 steps)\nrunning step 3:\n- 785 tests remaining (about 10 steps)\nrunning step 4:\n- 393 tests remaining (about 9 steps)\nrunning step 5:\n- 197 tests remaining (about 8 steps)\nrunning step 6:\n- 99 tests remaining (about 7 steps)\nrunning step 7:\n- 50 tests remaining (about 6 steps)\nrunning step 8:\n- 25 tests remaining (about 5 steps)\nrunning step 9:\n- 12 tests remaining (about 4 steps)\nrunning step 10:\n- 6 tests remaining (about 3 steps)\nrunning step 11:\n- 3 tests remaining (about 2 steps)\ndouble checking we found it...\n-> the polluting test is: testing/test_terminal.py::TestTerminal::test_report_teststatus_explicit_markup\n```\n\n[bug in pytest]: https://github.com/pytest-dev/pytest/issues/9708\n\n## fuzzing\n\n`detect-test-pollution` can also be used to \"fuzz\" out failing tests.\n\nit does this by shuffling the test ids and running the testsuite until it\nfails.\n\nhere's an example execution on a silly testsuite:\n\n```console\n$ detect-test-pollution --fuzz --tests t.py\ndiscovering all tests...\n-> discovered 1002 tests!\nrun 1...\n-> OK!\nrun 2...\n-> found failing test!\ntry `detect-test-pollution --failing-test t.py::test_k --tests t.py`!\n```\n\nafterwards you can use the normal mode of `detect-test-pollution` to find the\nfailing pair.\n\n## supported test runners\n\nat the moment only `pytest` is supported -- though in theory the tool could\nbe adapted to support other python test runners, or even other languages.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/asottile/detect-test-pollution",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "detect-test-pollution",
    "package_url": "https://pypi.org/project/detect-test-pollution/",
    "platform": null,
    "project_url": "https://pypi.org/project/detect-test-pollution/",
    "project_urls": {
      "Homepage": "https://github.com/asottile/detect-test-pollution"
    },
    "release_url": "https://pypi.org/project/detect-test-pollution/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "a tool to detect test pollution",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13264467,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7482124c22bda61648dae5b04e7b9efa86572b94c1c29fd486fb784f3723a99",
          "md5": "7a3b5b61c3e160b1b9c05753d98d0575",
          "sha256": "6495258879f89178385b150c97facdd11e8033341f8297aa902f79f618b97539"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a3b5b61c3e160b1b9c05753d98d0575",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 6532,
        "upload_time": "2022-02-23T19:39:25",
        "upload_time_iso_8601": "2022-02-23T19:39:25.246537Z",
        "url": "https://files.pythonhosted.org/packages/c7/48/2124c22bda61648dae5b04e7b9efa86572b94c1c29fd486fb784f3723a99/detect_test_pollution-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7801a53118fb7a8a35b0f5948ae08eeea284def2c6568b5f7bfd907fe1c7637",
          "md5": "fcedbc92043fe6ba7df27430ee1e9bf4",
          "sha256": "7f416195f37fb5e502296f3f60669699a75214c63c8f0426bd992a4c39f407e0"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcedbc92043fe6ba7df27430ee1e9bf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5992,
        "upload_time": "2022-02-23T19:39:26",
        "upload_time_iso_8601": "2022-02-23T19:39:26.559448Z",
        "url": "https://files.pythonhosted.org/packages/a7/80/1a53118fb7a8a35b0f5948ae08eeea284def2c6568b5f7bfd907fe1c7637/detect_test_pollution-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c2c4eb7f928866364c5ae9f1afa59992e87f847c5bbe9c0ace40bdd3bbf49ac",
          "md5": "22e8a2986c06863741a7f6f95e4b6faf",
          "sha256": "fef44aeec41f61ad74b6daae6d364b98c1d84674060ed478cd16be19a336a03b"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22e8a2986c06863741a7f6f95e4b6faf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 7182,
        "upload_time": "2022-03-01T01:55:33",
        "upload_time_iso_8601": "2022-03-01T01:55:33.114730Z",
        "url": "https://files.pythonhosted.org/packages/1c/2c/4eb7f928866364c5ae9f1afa59992e87f847c5bbe9c0ace40bdd3bbf49ac/detect_test_pollution-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42476df2554bc0cb343e637cc3aca871fa4a62949a3920dc38a24a6d86f54ae6",
          "md5": "9d57a65830ed97cd756e0d3c55681d0b",
          "sha256": "781805f76a47ee5f596540ee4c3e78d5a7ba918022079de9591b3a3c4f859320"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d57a65830ed97cd756e0d3c55681d0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6679,
        "upload_time": "2022-03-01T01:55:35",
        "upload_time_iso_8601": "2022-03-01T01:55:35.171251Z",
        "url": "https://files.pythonhosted.org/packages/42/47/6df2554bc0cb343e637cc3aca871fa4a62949a3920dc38a24a6d86f54ae6/detect_test_pollution-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6aa76668aa85cb7d811eca9cc9c70abf88dea068782b3602eb58dbe87f51c9d",
          "md5": "8371042f0cbf81df478c9fd59c227b81",
          "sha256": "055a0af7102b06fd7f1d65fa2319199ad97c86d6e6c426c7508141fc82786180"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8371042f0cbf81df478c9fd59c227b81",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 7304,
        "upload_time": "2022-03-23T04:56:02",
        "upload_time_iso_8601": "2022-03-23T04:56:02.304886Z",
        "url": "https://files.pythonhosted.org/packages/e6/aa/76668aa85cb7d811eca9cc9c70abf88dea068782b3602eb58dbe87f51c9d/detect_test_pollution-1.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfe68259f26e088aea9ee1ac333ecbfd2ea6cfc1e762ab50df1b05bfabbf592a",
          "md5": "f48187ca59b0ad0fb976c9363dd9f307",
          "sha256": "29ba3656ced2c94e8c77e23ad15ebf193b838ce5ff67c480a44fa4e1acb31703"
        },
        "downloads": -1,
        "filename": "detect_test_pollution-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f48187ca59b0ad0fb976c9363dd9f307",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6798,
        "upload_time": "2022-03-23T04:56:03",
        "upload_time_iso_8601": "2022-03-23T04:56:03.965896Z",
        "url": "https://files.pythonhosted.org/packages/bf/e6/8259f26e088aea9ee1ac333ecbfd2ea6cfc1e762ab50df1b05bfabbf592a/detect_test_pollution-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6aa76668aa85cb7d811eca9cc9c70abf88dea068782b3602eb58dbe87f51c9d",
        "md5": "8371042f0cbf81df478c9fd59c227b81",
        "sha256": "055a0af7102b06fd7f1d65fa2319199ad97c86d6e6c426c7508141fc82786180"
      },
      "downloads": -1,
      "filename": "detect_test_pollution-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8371042f0cbf81df478c9fd59c227b81",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 7304,
      "upload_time": "2022-03-23T04:56:02",
      "upload_time_iso_8601": "2022-03-23T04:56:02.304886Z",
      "url": "https://files.pythonhosted.org/packages/e6/aa/76668aa85cb7d811eca9cc9c70abf88dea068782b3602eb58dbe87f51c9d/detect_test_pollution-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfe68259f26e088aea9ee1ac333ecbfd2ea6cfc1e762ab50df1b05bfabbf592a",
        "md5": "f48187ca59b0ad0fb976c9363dd9f307",
        "sha256": "29ba3656ced2c94e8c77e23ad15ebf193b838ce5ff67c480a44fa4e1acb31703"
      },
      "downloads": -1,
      "filename": "detect_test_pollution-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f48187ca59b0ad0fb976c9363dd9f307",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6798,
      "upload_time": "2022-03-23T04:56:03",
      "upload_time_iso_8601": "2022-03-23T04:56:03.965896Z",
      "url": "https://files.pythonhosted.org/packages/bf/e6/8259f26e088aea9ee1ac333ecbfd2ea6cfc1e762ab50df1b05bfabbf592a/detect_test_pollution-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}